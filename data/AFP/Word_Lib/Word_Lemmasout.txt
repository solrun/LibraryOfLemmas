Loading theory "HOL-Eisbach.Eisbach" (required by "Draft.Word_LemmasTemplates" via "Draft.Word_Lemmas" via "Word_Lib.Word_EqI" via "HOL-Eisbach.Eisbach_Tools")
Loading theory "HOL-Library.Function_Algebras" (required by "Draft.Word_LemmasTemplates" via "Draft.ExtrEqs" via "HOL-Library.BigO")
Loading theory "HOL-Library.Phantom_Type" (required by "Draft.Word_LemmasTemplates" via "Draft.Word_Lemmas" via "Word_Lib.Type_Syntax" via "HOL-Library.Word" via "HOL-Library.Type_Length" via "HOL-Library.Numeral_Type" via "HOL-Library.Cardinality")
Loading theory "HOL-Library.Nat_Bijection" (required by "Draft.Word_LemmasTemplates" via "Draft.ExtrEqs" via "HOL-Library.Stream")
signature PARSE_TOOLS =
  sig
    val is_real_val: ('a, 'b) parse_val -> bool
    val name_term: (term, string) parse_val parser
    val parse_term_val: 'a parser -> (term, 'a) parse_val parser
    val parse_thm_val: 'a parser -> (thm, 'a) parse_val parser
    datatype ('a, 'b) parse_val
    = Parse_Val of 'b * ('a -> unit) | Real_Val of 'a
    val parse_val_cases:
       ('a -> 'b) -> ('b, 'a) parse_val -> 'b * ('b -> unit)
    val the_parse_fun: ('a, 'b) parse_val -> 'a -> unit
    val the_parse_val: ('a, 'b) parse_val -> 'b
    val the_real_val: ('a, 'b) parse_val -> 'a
  end
structure Parse_Tools: PARSE_TOOLS
instantiation
  fun :: (type, plus) plus
  plus_fun == plus :: ('a => 'b) => ('a => 'b) => 'a => 'b
instantiation
  fun :: (type, zero) zero
  zero_fun == zero_class.zero :: 'a => 'b
instantiation
  fun :: (type, times) times
  times_fun == times :: ('a => 'b) => ('a => 'b) => 'a => 'b
instantiation
  fun :: (type, one) one
  one_fun == one_class.one :: 'a => 'b
signature METHOD_CLOSURE =
  sig
    val apply_method:
       Proof.context ->
         string ->
           term list ->
             thm list list ->
               (Proof.context -> Method.method) list ->
                 Proof.context -> thm list -> context_tactic
    val method:
       binding ->
         (binding * typ option * mixfix) list ->
           binding list ->
             binding list ->
               binding list ->
                 Token.src -> local_theory -> string * local_theory
    val method_cmd:
       binding ->
         (binding * string option * mixfix) list ->
           binding list ->
             binding list ->
               binding list ->
                 Token.src -> local_theory -> string * local_theory
  end
structure Method_Closure: METHOD_CLOSURE
Found termination order: "(%p. size (snd p)) <*mlex*> {}"
### theory "HOL-Library.Function_Algebras"
### 0.116s elapsed time, 0.447s cpu time, 0.035s GC time
Loading theory "HOL-Library.Set_Algebras" (required by "Draft.Word_LemmasTemplates" via "Draft.ExtrEqs" via "HOL-Library.BigO")
instantiation
  set :: (plus) plus
  plus_set == plus :: 'a set => 'a set => 'a set
instantiation
  set :: (times) times
  times_set == times :: 'a set => 'a set => 'a set
instantiation
  set :: (zero) zero
  zero_set == zero_class.zero :: 'a set
structure Eisbach_Rule_Insts: sig end
instantiation
  set :: (one) one
  one_set == one_class.one :: 'a set
Found termination order: "size_list size <*mlex*> {}"
### theory "HOL-Library.Set_Algebras"
### 0.235s elapsed time, 0.927s cpu time, 0.081s GC time
Loading theory "HOL-Library.Signed_Division" (required by "Draft.Word_LemmasTemplates" via "Draft.Word_Lemmas" via "Word_Lib.Signed_Division_Word")
### theory "HOL-Library.Nat_Bijection"
### 0.353s elapsed time, 1.380s cpu time, 0.116s GC time
Loading theory "HOL-Library.Stream" (required by "Draft.Word_LemmasTemplates" via "Draft.ExtrEqs")
### ML warning (line 170 of "~~/src/HOL/Eisbach/match_method.ML"):
### Pattern is not exhaustive.
### ML warning (line 187 of "~~/src/HOL/Eisbach/match_method.ML"):
### Pattern is not exhaustive.
### ML warning (line 309 of "~~/src/HOL/Eisbach/match_method.ML"):
### Pattern is not exhaustive.
signature MATCH_METHOD =
  sig
    val focus_params: Proof.context -> term list
    val focus_schematics: Proof.context -> Envir.tenv
  end
structure Match_Method: MATCH_METHOD
val method_evaluate = fn: Method.text -> Proof.context -> thm list -> tactic
class signed_division = type +
  fixes signed_divide :: "'a => 'a => 'a"
    and signed_modulo :: "'a => 'a => 'a"
instantiation
  int :: signed_division
  signed_divide_int == signed_divide :: int => int => int
  signed_modulo_int == signed_modulo :: int => int => int
### theory "HOL-Eisbach.Eisbach"
### 0.468s elapsed time, 1.833s cpu time, 0.188s GC time
Loading theory "HOL-Eisbach.Eisbach_Tools" (required by "Draft.Word_LemmasTemplates" via "Draft.Word_Lemmas" via "Word_Lib.Word_EqI")
val try_map = fn: 'a Seq.seq -> 'a Seq.seq -> 'a Seq.seq
### theory "HOL-Library.Signed_Division"
### 0.136s elapsed time, 0.530s cpu time, 0.071s GC time
Loading theory "HOL-Library.Tree" (required by "Draft.Word_LemmasTemplates" via "Draft.ExtrEqs" via "Draft.Templates")
val uncurry_rule = fn: thm -> thm
val curry_rule = fn: thm -> thm
### theory "HOL-Eisbach.Eisbach_Tools"
### 0.035s elapsed time, 0.141s cpu time, 0.000s GC time
Loading theory "HOL-Library.BigO" (required by "Draft.Word_LemmasTemplates" via "Draft.ExtrEqs")
### theory "HOL-Library.Phantom_Type"
### 0.576s elapsed time, 2.295s cpu time, 0.188s GC time
Loading theory "HOL-Library.Cardinality" (required by "Draft.Word_LemmasTemplates" via "Draft.Word_Lemmas" via "Word_Lib.Type_Syntax" via "HOL-Library.Word" via "HOL-Library.Type_Length" via "HOL-Library.Numeral_Type")
### Additional type variable(s) in locale specification "CARD_1": 'a
class CARD_1 = type +
  assumes "CARD_1": "CARD('a) = 1"
consts
  shift :: "'a list => 'a stream => 'a stream"
Proofs for coinductive predicate(s) "streamsp"
  Proving monotonicity ...
### Additional type variable(s) in locale specification "card2": 'a
class card2 = finite +
  assumes "two_le_card": "2 <= CARD('a)"
consts
  snth :: "'a stream => nat => 'a"
consts
  stake :: "nat => 'a stream => 'a list"
class finite_UNIV = type +
  fixes finite_UNIV :: "('a, bool) phantom"
  assumes "finite_UNIV": "finite_UNIV = Phantom('a) (finite UNIV)"
consts
  sdrop :: "nat => 'a stream => 'a stream"
class card_UNIV = finite_UNIV +
  fixes card_UNIV :: "('a, nat) phantom"
  assumes "card_UNIV": "card_UNIV_class.card_UNIV = Phantom('a) CARD('a)"
instantiation
  nat :: card_UNIV
  card_UNIV_nat == card_UNIV_class.card_UNIV :: (nat, nat) phantom
  finite_UNIV_nat == finite_UNIV :: (nat, bool) phantom
consts
  sfilter :: "('a => bool) => 'a stream => 'a stream"
instantiation
  int :: card_UNIV
  card_UNIV_int == card_UNIV_class.card_UNIV :: (int, nat) phantom
  finite_UNIV_int == finite_UNIV :: (int, bool) phantom
instantiation
  natural :: card_UNIV
  card_UNIV_natural == card_UNIV_class.card_UNIV :: (natural, nat) phantom
  finite_UNIV_natural == finite_UNIV :: (natural, bool) phantom
consts
  cycle :: "'a list => 'a stream"
instantiation
  integer :: card_UNIV
  card_UNIV_integer == card_UNIV_class.card_UNIV :: (integer, nat) phantom
  finite_UNIV_integer == finite_UNIV :: (integer, bool) phantom
instantiation
  list :: (type) card_UNIV
  card_UNIV_list == card_UNIV_class.card_UNIV :: ('a list, nat) phantom
  finite_UNIV_list == finite_UNIV :: ('a list, bool) phantom
instantiation
  unit :: card_UNIV
  card_UNIV_unit == card_UNIV_class.card_UNIV :: (unit, nat) phantom
  finite_UNIV_unit == finite_UNIV :: (unit, bool) phantom
consts
  left :: "'a tree => 'a tree"
consts
  right :: "'a tree => 'a tree"
instantiation
  bool :: card_UNIV
  card_UNIV_bool == card_UNIV_class.card_UNIV :: (bool, nat) phantom
  finite_UNIV_bool == finite_UNIV :: (bool, bool) phantom
consts
  siterate :: "('a => 'a) => 'a => 'a stream"
instantiation
  char :: card_UNIV
  card_UNIV_char == card_UNIV_class.card_UNIV :: (char, nat) phantom
  finite_UNIV_char == finite_UNIV :: (char, bool) phantom
instantiation
  prod :: (finite_UNIV, finite_UNIV) finite_UNIV
  finite_UNIV_prod == finite_UNIV :: ('a * 'b, bool) phantom
instantiation
  prod :: (card_UNIV, card_UNIV) card_UNIV
  card_UNIV_prod == card_UNIV_class.card_UNIV :: ('a * 'b, nat) phantom
instantiation
  sum :: (finite_UNIV, finite_UNIV) finite_UNIV
  finite_UNIV_sum == finite_UNIV :: ('a + 'b, bool) phantom
consts
  flat :: "'a list stream => 'a stream"
Found termination order: "size <*mlex*> {}"
instantiation
  sum :: (card_UNIV, card_UNIV) card_UNIV
  card_UNIV_sum == card_UNIV_class.card_UNIV :: ('a + 'b, nat) phantom
instantiation
  fun :: (finite_UNIV, card_UNIV) finite_UNIV
  finite_UNIV_fun == finite_UNIV :: ('a => 'b, bool) phantom
instantiation
  fun :: (card_UNIV, card_UNIV) card_UNIV
  card_UNIV_fun == card_UNIV_class.card_UNIV :: ('a => 'b, nat) phantom
instantiation
  option :: (finite_UNIV) finite_UNIV
  finite_UNIV_option == finite_UNIV :: ('a option, bool) phantom
instantiation
  option :: (card_UNIV) card_UNIV
  card_UNIV_option == card_UNIV_class.card_UNIV :: ('a option, nat) phantom
instantiation
  String.literal :: card_UNIV
  card_UNIV_literal == card_UNIV_class.card_UNIV ::
    (String.literal, nat) phantom
  finite_UNIV_literal == finite_UNIV :: (String.literal, bool) phantom
consts
  sinterleave :: "'a stream => 'a stream => 'a stream"
instantiation
  set :: (finite_UNIV) finite_UNIV
  finite_UNIV_set == finite_UNIV :: ('a set, bool) phantom
Found termination order: "size <*mlex*> {}"
instantiation
  set :: (card_UNIV) card_UNIV
  card_UNIV_set == card_UNIV_class.card_UNIV :: ('a set, nat) phantom
consts
  szip :: "'a stream => 'b stream => ('a * 'b) stream"
instantiation
  Enum.finite_1 :: card_UNIV
  card_UNIV_finite_1 == card_UNIV_class.card_UNIV ::
    (Enum.finite_1, nat) phantom
  finite_UNIV_finite_1 == finite_UNIV :: (Enum.finite_1, bool) phantom
instantiation
  Enum.finite_2 :: card_UNIV
  card_UNIV_finite_2 == card_UNIV_class.card_UNIV ::
    (Enum.finite_2, nat) phantom
  finite_UNIV_finite_2 == finite_UNIV :: (Enum.finite_2, bool) phantom
consts
  smap2 :: "('a => 'b => 'c) => 'a stream => 'b stream => 'c stream"
instantiation
  Enum.finite_3 :: card_UNIV
  card_UNIV_finite_3 == card_UNIV_class.card_UNIV ::
    (Enum.finite_3, nat) phantom
  finite_UNIV_finite_3 == finite_UNIV :: (Enum.finite_3, bool) phantom
instantiation
  Enum.finite_4 :: card_UNIV
  card_UNIV_finite_4 == card_UNIV_class.card_UNIV ::
    (Enum.finite_4, nat) phantom
  finite_UNIV_finite_4 == finite_UNIV :: (Enum.finite_4, bool) phantom
Found termination order: "size <*mlex*> {}"
### theory "HOL-Library.Stream"
### 1.168s elapsed time, 4.413s cpu time, 0.969s GC time
Loading theory "Word_Lib.Enumeration" (required by "Draft.Word_LemmasTemplates" via "Draft.Word_Lemmas" via "Word_Lib.Enumeration_Word")
instantiation
  Enum.finite_5 :: card_UNIV
  card_UNIV_finite_5 == card_UNIV_class.card_UNIV ::
    (Enum.finite_5, nat) phantom
  finite_UNIV_finite_5 == finite_UNIV :: (Enum.finite_5, bool) phantom
### theory "HOL-Library.Cardinality"
### 0.970s elapsed time, 3.594s cpu time, 0.898s GC time
Loading theory "HOL-Library.Numeral_Type" (required by "Draft.Word_LemmasTemplates" via "Draft.Word_Lemmas" via "Word_Lib.Type_Syntax" via "HOL-Library.Word" via "HOL-Library.Type_Length")
class height = type +
  fixes height :: "'a => nat"
consts
  the_index :: "'a list => 'a => nat"
instantiation
  tree :: (type) height
  height_tree == height :: 'a tree => nat
class enum = finite +
  fixes enum :: "'a list"
    and enum_all :: "('a => bool) => bool"
    and enum_ex :: "('a => bool) => bool"
  assumes "UNIV_enum": "UNIV = set enum_class.enum"
    and "enum_distinct": "distinct enum_class.enum"
  assumes "enum_all_UNIV": "!!P. enum_class.enum_all P = Ball UNIV P"
  assumes "enum_ex_UNIV": "!!P. enum_class.enum_ex P = Bex UNIV P"
### theory "HOL-Library.BigO"
### 1.071s elapsed time, 4.040s cpu time, 0.898s GC time
Loading theory "Word_Lib.Even_More_List" (required by "Draft.Word_LemmasTemplates" via "Draft.Word_Lemmas" via "Word_Lib.Enumeration_Word")
Found termination order: "size <*mlex*> {}"
### theory "Word_Lib.Even_More_List"
### 0.055s elapsed time, 0.222s cpu time, 0.000s GC time
class enum_alt = type +
  fixes enum_alt :: "nat => 'a option"
instantiation
  num1 :: CARD_1
instantiation
  num1 :: {comm_monoid_mult,numeral,comm_ring}
  uminus_num1 == uminus :: num1 => num1
  zero_num1 == zero_class.zero :: num1
  minus_num1 == minus :: num1 => num1 => num1
  plus_num1 == plus :: num1 => num1 => num1
  one_num1 == one_class.one :: num1
  times_num1 == times :: num1 => num1 => num1
Found termination order: "size <*mlex*> {}"
instantiation
  num1 :: linorder
  less_eq_num1 == less_eq :: num1 => num1 => bool
  less_num1 == less :: num1 => num1 => bool
class enumeration_alt = enum_alt +
  assumes
    "enum_alt_one_bound":
      "!!x. enum_alt x = None ==> enum_alt (Suc x) = None"
  assumes "enum_alt_surj": "range enum_alt Un {None} = UNIV"
  assumes
    "enum_alt_inj":
      "!!x y. enum_alt x = enum_alt y ==> x = y | enum_alt x = None"
locale mod_type
  fixes n :: "int"
    and Rep :: "'a => int"
    and Abs :: "int => 'a"
  assumes "mod_type n Rep Abs"
Found termination order: "size <*mlex*> {}"
locale mod_ring
  fixes n :: "int"
    and Rep :: "'a => int"
    and Abs :: "int => 'a"
  assumes "mod_ring n Rep Abs"
instantiation
  bit0 :: (finite) {minus,one,plus,times,uminus,zero}
  bit1 :: (finite) {minus,one,plus,times,uminus,zero}
  zero_bit0 == zero_class.zero :: 'a bit0
  uminus_bit0 == uminus :: 'a bit0 => 'a bit0
  times_bit0 == times :: 'a bit0 => 'a bit0 => 'a bit0
  plus_bit0 == plus :: 'a bit0 => 'a bit0 => 'a bit0
  one_bit0 == one_class.one :: 'a bit0
  minus_bit0 == minus :: 'a bit0 => 'a bit0 => 'a bit0
  zero_bit1 == zero_class.zero :: 'a bit1
  uminus_bit1 == uminus :: 'a bit1 => 'a bit1
  times_bit1 == times :: 'a bit1 => 'a bit1 => 'a bit1
  plus_bit1 == plus :: 'a bit1 => 'a bit1 => 'a bit1
  one_bit1 == one_class.one :: 'a bit1
  minus_bit1 == minus :: 'a bit1 => 'a bit1 => 'a bit1
class enumeration_both = enum + enum_alt +
  assumes "enum_alt_rel": "enum_alt = alt_from_ord enum_class.enum"
Found termination order: "size <*mlex*> {}"
Found termination order: "size <*mlex*> {}"
instantiation
  bit0 :: (finite) linorder
  bit1 :: (finite) linorder
  less_eq_bit0 == less_eq :: 'a bit0 => 'a bit0 => bool
  less_bit0 == less :: 'a bit0 => 'a bit0 => bool
  less_eq_bit1 == less_eq :: 'a bit1 => 'a bit1 => bool
  less_bit1 == less :: 'a bit1 => 'a bit1 => bool
instantiation
  bool :: enumeration_both
  enum_alt_bool == enum_alt :: nat => bool option
Found termination order: "size <*mlex*> {}"
instantiation
  nat :: enumeration_alt
  enum_alt_nat == enum_alt :: nat => nat option
instantiation
  num0 :: equal
  equal_num0 == equal_class.equal :: num0 => num0 => bool
Found termination order: "size <*mlex*> {}"
instantiation
  num1 :: equal
  equal_num1 == equal_class.equal :: num1 => num1 => bool
### theory "Word_Lib.Enumeration"
### 0.528s elapsed time, 1.749s cpu time, 0.207s GC time
instantiation
  num1 :: enum
  enum_num1 == enum_class.enum :: num1 list
  enum_all_num1 == enum_class.enum_all :: (num1 => bool) => bool
  enum_ex_num1 == enum_class.enum_ex :: (num1 => bool) => bool
instantiation
  num0 :: card_UNIV
  num1 :: card_UNIV
  card_UNIV_num0 == card_UNIV_class.card_UNIV :: (num0, nat) phantom
  finite_UNIV_num0 == finite_UNIV :: (num0, bool) phantom
  card_UNIV_num1 == card_UNIV_class.card_UNIV :: (num1, nat) phantom
  finite_UNIV_num1 == finite_UNIV :: (num1, bool) phantom
Found termination order: "(%p. size (fst p)) <*mlex*> {}"
instantiation
  bit0 :: (finite) equal
  bit1 :: (finite) equal
  equal_bit0 == equal_class.equal :: 'a bit0 => 'a bit0 => bool
  equal_bit1 == equal_class.equal :: 'a bit1 => 'a bit1 => bool
instantiation
  bit0 :: (finite) enum
  enum_bit0 == enum_class.enum :: 'a bit0 list
  enum_all_bit0 == enum_class.enum_all :: ('a bit0 => bool) => bool
  enum_ex_bit0 == enum_class.enum_ex :: ('a bit0 => bool) => bool
Found termination order: "size <*mlex*> {}"
instantiation
  bit1 :: (finite) enum
  enum_bit1 == enum_class.enum :: 'a bit1 list
  enum_all_bit1 == enum_class.enum_all :: ('a bit1 => bool) => bool
  enum_ex_bit1 == enum_class.enum_ex :: ('a bit1 => bool) => bool
instantiation
  bit0 :: (finite) finite_UNIV
  bit1 :: (finite) finite_UNIV
  finite_UNIV_bit0 == finite_UNIV :: ('a bit0, bool) phantom
  finite_UNIV_bit1 == finite_UNIV :: ('a bit1, bool) phantom
instantiation
  bit0 :: ({card_UNIV,finite}) card_UNIV
  bit1 :: ({card_UNIV,finite}) card_UNIV
  card_UNIV_bit0 == card_UNIV_class.card_UNIV :: ('a bit0, nat) phantom
  card_UNIV_bit1 == card_UNIV_class.card_UNIV :: ('a bit1, nat) phantom
### theory "HOL-Library.Numeral_Type"
### 0.692s elapsed time, 2.037s cpu time, 0.207s GC time
Loading theory "HOL-Library.Type_Length" (required by "Draft.Word_LemmasTemplates" via "Draft.Word_Lemmas" via "Word_Lib.Type_Syntax" via "HOL-Library.Word")
Found termination order: "(%p. size (snd p)) <*mlex*> {}"
class len0 = type +
  fixes len_of :: "'a itself => nat"
class len = len0 +
  assumes "len_gt_0": "0 < LENGTH('a)"
instantiation
  0 :: len0
  1 :: len0
  len_of_num0 == len_of :: 0 itself => nat
  len_of_num1 == len_of :: 1 itself => nat
instantiation
  bit0 :: (len0) len0
  bit1 :: (len0) len0
  len_of_bit0 == len_of :: 'a bit0 itself => nat
  len_of_bit1 == len_of :: 'a bit1 itself => nat
instantiation
  Enum.finite_1 :: len
  len_of_finite_1 == len_of :: Enum.finite_1 itself => nat
instantiation
  Enum.finite_2 :: len
  len_of_finite_2 == len_of :: Enum.finite_2 itself => nat
instantiation
  Enum.finite_3 :: len
  len_of_finite_3 == len_of :: Enum.finite_3 itself => nat
Found termination order: "size <*mlex*> {}"
### theory "HOL-Library.Tree"
### 2.139s elapsed time, 6.887s cpu time, 1.263s GC time
Loading theory "Draft.Templates" (required by "Draft.Word_LemmasTemplates" via "Draft.ExtrEqs")
datatype template_term
=
     t_empty
   | template_app of template_term * template_term
   | template_hole of int
   | template_var of int
datatype sign
= equals | greater_equals | greater_than | less_equals | less_than
datatype template
=
     template_bimplication of template * template
   | template_dunno
   | template_equation of template_term * template_term
   | template_implication of template list * template
   | template_inequation of sign * template_term * template_term
   | template_negation of template
   | template_predicate of template_term
constructor t_empty: template_term
constructor template_app: template_term * template_term -> template_term
constructor template_hole: int -> template_term
constructor template_var: int -> template_term
constructor equals: sign
constructor greater_equals: sign
constructor greater_than: sign
constructor less_equals: sign
constructor less_than: sign
constructor template_bimplication: template * template -> template
constructor template_dunno: template
constructor template_equation: template_term * template_term -> template
constructor template_implication: template list * template -> template
constructor template_inequation:
   sign * template_term * template_term -> template
constructor template_negation: template -> template
constructor template_predicate: template_term -> template
val vfs = fn: term -> (indexname * typ) list * (string * typ) list
val indexOf = fn: ''a list -> ''a -> int -> int
val has_eq = fn: term -> bool
val term2template = fn:
   (indexname * typ) list -> (string * typ) list -> term -> template_term
val lemma2predicate = fn: term -> term -> template
val makeTemplatewithContext = fn: term -> term -> template
val lemma2template = fn: term -> template
val thm2template = fn: thm -> template
val tterm2string = fn: template_term -> string
val template2string = fn: template -> string
val t = "height ?t <= size ?t": thm
val th =
   Const ("HOL.Trueprop", "bool => prop") $
     (Const ("Orderings.ord_class.less_eq", "nat => nat => bool") $
       (Const ("Tree.height_class.height", "?'a tree => nat") $
         Var (("t", 0), "?'a tree")) $
       (Const ("Nat.size_class.size", "?'a tree => nat") $
         Var (("t", 0), "?'a tree"))):
   term
### theory "Draft.Templates"
### 0.077s elapsed time, 0.193s cpu time, 0.082s GC time
Loading theory "Draft.ExtrEqs" (required by "Draft.Word_LemmasTemplates")
class linordered_idom = ring_char_0 + idom_abs_sgn +
  linordered_ring_strict + linordered_semidom +
  linordered_semiring_1_strict + ordered_comm_ring + ordered_ring_abs +
  assumes
    "sgn_if":
      "!!x. sgn x =
            (if x = (0::'a) then 0::'a
             else if (0::'a) < x then 1::'a else - (1::'a))"
### theory "HOL-Library.Type_Length"
### 0.494s elapsed time, 1.102s cpu time, 0.240s GC time
Loading theory "HOL-Library.Word" (required by "Draft.Word_LemmasTemplates" via "Draft.Word_Lemmas" via "Word_Lib.Type_Syntax")
Loading theory "Word_Lib.More_Arithmetic" (required by "Draft.Word_LemmasTemplates" via "Draft.Word_Lemmas" via "Word_Lib.More_Word")
### theory "Word_Lib.More_Arithmetic"
### 0.063s elapsed time, 0.183s cpu time, 0.000s GC time
instantiation
  word :: (len) comm_ring_1
  uminus_word == uminus :: 'a word => 'a word
  one_word == one_class.one :: 'a word
  times_word == times :: 'a word => 'a word => 'a word
  zero_word == zero_class.zero :: 'a word
  minus_word == minus :: 'a word => 'a word => 'a word
  plus_word == plus :: 'a word => 'a word => 'a word
signature WORD_LIB =
  sig
    val dest_binT: typ -> int
    val dest_wordT: typ -> int
    val is_wordT: typ -> bool
    val mk_wordT: int -> typ
  end
structure Word_Lib: WORD_LIB
instantiation
  word :: (len) equal
  equal_word == equal_class.equal :: 'a word => 'a word => bool
class semiring_char_0 = semiring_1 +
  assumes "inj_of_nat": "inj of_nat"
val eqpattern =
   Pattern
    (
       Const ("HOL.Trueprop", "bool => prop") $
         (Const ("HOL.eq", "?'a => ?'a => bool") $
           Var (("_dummy_", 1), "?'a") $ Var (("_dummy_", 2), "?'a"))
       ):
   term Find_Theorems.criterion
val badeqpattern = Pattern (Const ("Pure.eq", "?'a => ?'a => prop")):
   term Find_Theorems.criterion
val undefpattern =
   Pattern
    (
       Const ("HOL.Trueprop", "bool => prop") $
         (Const ("HOL.eq", "?'a => ?'a => bool") $
           Var (("_dummy_", 1), "?'a") $ Const ("HOL.undefined", "?'a"))
       ):
   term Find_Theorems.criterion
val thmpattern =
   Pattern
    (Const ("HOL.Trueprop", "bool => prop") $ Var (("_dummy_", 1), "bool")):
   term Find_Theorems.criterion
val badnames =
   ["*nitpick*", "*Nitpick*", "*full_exhaustive*", "*_def*", "Enum.finite*",
    "*Quickcheck*", "ATP*", "*Nunchaku*", "*Code*", "*BNF*", "*SMT*",
    "*.*.*"]:
   string list
val unwanted_names =
   [(false, Name "*nitpick*"), (false, Name "*Nitpick*"),
    (false, Name "*full_exhaustive*"), (false, Name "*_def*"),
    (false, Name "Enum.finite*"), (false, Name "*Quickcheck*"),
    (false, Name "ATP*"), (false, Name "*Nunchaku*"),
    (false, Name "*Code*"), (false, Name "*BNF*"), (false, Name "*SMT*"),
    (false, Name "*.*.*")]:
   (bool * term Find_Theorems.criterion) list
val has_vars = fn: term -> bool
val get_all_eqs = fn: string -> Proof.context -> (string * thm) list
val get_all_thms = fn: string -> Proof.context -> (string * thm) list
val get_noneq_thms = fn: string -> Proof.context -> (string * thm) list
val template_eqs = fn:
   string -> Proof.context -> (string * thm * template) list
val template_thms = fn:
   string -> Proof.context -> (string * thm * template) list
### theory "Draft.ExtrEqs"
### 0.822s elapsed time, 2.043s cpu time, 0.838s GC time
instantiation
  word :: (len) linorder
  less_eq_word == less_eq :: 'a word => 'a word => bool
  less_word == less :: 'a word => 'a word => bool
instantiation
  word :: (len) enum
  enum_word == enum_class.enum :: 'a word list
  enum_all_word == enum_class.enum_all :: ('a word => bool) => bool
  enum_ex_word == enum_class.enum_ex :: ('a word => bool) => bool
instantiation
  word :: (len) semiring_modulo
  modulo_word == modulo :: 'a word => 'a word => 'a word
  divide_word == divide :: 'a word => 'a word => 'a word
instantiation
  word :: (len) semiring_bits
  bit_word == bit :: 'a word => nat => bool
instantiation
  word :: (len) ring_bit_operations
  not_word == not :: 'a word => 'a word
  and_word == and :: 'a word => 'a word => 'a word
  or_word == or :: 'a word => 'a word => 'a word
  xor_word == xor :: 'a word => 'a word => 'a word
  mask_word == mask :: nat => 'a word
  set_bit_word == set_bit :: nat => 'a word => 'a word
  unset_bit_word == unset_bit :: nat => 'a word => 'a word
  flip_bit_word == flip_bit :: nat => 'a word => 'a word
  push_bit_word == push_bit :: nat => 'a word => 'a word
  drop_bit_word == drop_bit :: nat => 'a word => 'a word
  take_bit_word == take_bit :: nat => 'a word => 'a word
class semiring_bits = semiring_parity +
  fixes bit :: "'a => nat => bool"
  assumes
    "bits_induct":
      "!!P a.
          [| !!a. a div (2::'a) = a ==> P a;
             !!a b.
                [| P a; (of_bool b + (2::'a) * a) div (2::'a) = a |]
                ==> P (of_bool b + (2::'a) * a) |]
          ==> P a"
  assumes "bits_div_0": "!!a. (0::'a) div a = (0::'a)"
    and "bits_div_by_1": "!!a. a div (1::'a) = a"
    and "bits_mod_div_trivial": "!!a b. a mod b div b = (0::'a)"
    and
    "even_succ_div_2":
      "!!a. even a ==> ((1::'a) + a) div (2::'a) = a div (2::'a)"
    and
    "even_mask_div_iff":
      "!!m n.
          even (((2::'a) ^ m - (1::'a)) div (2::'a) ^ n) =
          ((2::'a) ^ n = (0::'a) | m <= n)"
    and
    "exp_div_exp_eq":
      "!!m n.
          (2::'a) ^ m div (2::'a) ^ n =
          of_bool ((2::'a) ^ m ~= (0::'a) & n <= m) * (2::'a) ^ (m - n)"
    and
    "div_exp_eq":
      "!!a m n. a div (2::'a) ^ m div (2::'a) ^ n = a div (2::'a) ^ (m + n)"
    and
    "mod_exp_eq":
      "!!a m n. a mod (2::'a) ^ m mod (2::'a) ^ n = a mod (2::'a) ^ min m n"
    and
    "mult_exp_mod_exp_eq":
      "!!m n a.
          m <= n ==>
          a * (2::'a) ^ m mod (2::'a) ^ n =
          a mod (2::'a) ^ (n - m) * (2::'a) ^ m"
    and
    "div_exp_mod_exp_eq":
      "!!a n m.
          a div (2::'a) ^ n mod (2::'a) ^ m =
          a mod (2::'a) ^ (n + m) div (2::'a) ^ n"
    and
    "even_mult_exp_div_exp_iff":
      "!!a m n.
          even (a * (2::'a) ^ m div (2::'a) ^ n) =
          (n < m |
           (2::'a) ^ n = (0::'a) | m <= n & even (a div (2::'a) ^ (n - m)))"
  assumes "bit_iff_odd": "!!a n. bit a n = odd (a div (2::'a) ^ n)"
class semiring_bit_operations = semiring_bits +
  fixes "and" :: "'a => 'a => 'a"
    and or :: "'a => 'a => 'a"
    and xor :: "'a => 'a => 'a"
    and mask :: "nat => 'a"
    and set_bit :: "nat => 'a => 'a"
    and unset_bit :: "nat => 'a => 'a"
    and flip_bit :: "nat => 'a => 'a"
    and push_bit :: "nat => 'a => 'a"
    and drop_bit :: "nat => 'a => 'a"
    and take_bit :: "nat => 'a => 'a"
  assumes "bit_and_iff": "!!a b n. bit (and a b) n = (bit a n & bit b n)"
    and "bit_or_iff": "!!a b n. bit (or a b) n = (bit a n | bit b n)"
    and "bit_xor_iff": "!!a b n. bit (xor a b) n = (bit a n ~= bit b n)"
    and "mask_eq_exp_minus_1": "!!n. mask n = (2::'a) ^ n - (1::'a)"
    and "set_bit_eq_or": "!!n a. set_bit n a = or a (push_bit n (1::'a))"
    and
    "bit_unset_bit_iff":
      "!!m a n. bit (unset_bit m a) n = (bit a n & m ~= n)"
    and
    "flip_bit_eq_xor": "!!n a. flip_bit n a = xor a (push_bit n (1::'a))"
    and "push_bit_eq_mult": "!!n a. push_bit n a = a * (2::'a) ^ n"
    and "drop_bit_eq_div": "!!n a. drop_bit n a = a div (2::'a) ^ n"
    and "take_bit_eq_mod": "!!n a. take_bit n a = a mod (2::'a) ^ n"
class semiring_bit_operations = semiring_bits +
  fixes "and" :: "'a => 'a => 'a"
    and or :: "'a => 'a => 'a"
    and xor :: "'a => 'a => 'a"
    and mask :: "nat => 'a"
    and set_bit :: "nat => 'a => 'a"
    and unset_bit :: "nat => 'a => 'a"
    and flip_bit :: "nat => 'a => 'a"
    and push_bit :: "nat => 'a => 'a"
    and drop_bit :: "nat => 'a => 'a"
    and take_bit :: "nat => 'a => 'a"
  assumes "bit_and_iff": "!!a b n. bit (and a b) n = (bit a n & bit b n)"
    and "bit_or_iff": "!!a b n. bit (or a b) n = (bit a n | bit b n)"
    and "bit_xor_iff": "!!a b n. bit (xor a b) n = (bit a n ~= bit b n)"
    and "mask_eq_exp_minus_1": "!!n. mask n = (2::'a) ^ n - (1::'a)"
    and "set_bit_eq_or": "!!n a. set_bit n a = or a (push_bit n (1::'a))"
    and
    "bit_unset_bit_iff":
      "!!m a n. bit (unset_bit m a) n = (bit a n & m ~= n)"
    and
    "flip_bit_eq_xor": "!!n a. flip_bit n a = xor a (push_bit n (1::'a))"
    and "push_bit_eq_mult": "!!n a. push_bit n a = a * (2::'a) ^ n"
    and "drop_bit_eq_div": "!!n a. drop_bit n a = a div (2::'a) ^ n"
    and "take_bit_eq_mod": "!!n a. take_bit n a = a mod (2::'a) ^ n"
class ring_bit_operations = semiring_bit_operations + ring_parity +
  fixes not :: "'a => 'a"
  assumes
    "bit_not_iff_eq":
      "!!a n. bit (not a) n = ((2::'a) ^ n ~= (0::'a) & ~ bit a n)"
  assumes "minus_eq_not_minus_1": "!!a. - a = not (a - (1::'a))"
class unique_euclidean_semiring_numeral =
  unique_euclidean_semiring_with_nat + linordered_semidom +
  fixes divmod :: "num => num => 'a * 'a"
    and divmod_step :: "num => 'a * 'a => 'a * 'a"
  assumes
    "div_less": "!!a b. [| (0::'a) <= a; a < b |] ==> a div b = (0::'a)"
    and "mod_less": "!!a b. [| (0::'a) <= a; a < b |] ==> a mod b = a"
    and
    "div_positive": "!!b a. [| (0::'a) < b; b <= a |] ==> (0::'a) < a div b"
    and "mod_less_eq_dividend": "!!a b. (0::'a) <= a ==> a mod b <= a"
    and "pos_mod_bound": "!!b a. (0::'a) < b ==> a mod b < b"
    and "pos_mod_sign": "!!b a. (0::'a) < b ==> (0::'a) <= a mod b"
    and
    "mod_mult2_eq":
      "!!c a b.
          (0::'a) <= c ==> a mod (b * c) = b * (a div b mod c) + a mod b"
    and
    "div_mult2_eq":
      "!!c a b. (0::'a) <= c ==> a div (b * c) = a div b div c"
  assumes "discrete": "!!a b. (a < b) = (a + (1::'a) <= b)"
  assumes
    "divmod_def":
      "!!m n.
          divmod m n = (numeral m div numeral n, numeral m mod numeral n)"
    and
    "divmod_step_def":
      "!!l qr.
          divmod_step l qr =
          (let (q, r) = qr
           in if numeral l <= r then ((2::'a) * q + (1::'a), r - numeral l)
              else ((2::'a) * q, r))"
class linordered_semidom = linordered_comm_semiring_strict +
  linordered_nonzero_semiring + semidom +
  assumes "le_add_diff_inverse2": "!!b a. b <= a ==> a - b + b = a"
class ring_bit_operations = semiring_bit_operations + ring_parity +
  fixes not :: "'a => 'a"
  assumes
    "bit_not_iff_eq":
      "!!a n. bit (not a) n = ((2::'a) ^ n ~= (0::'a) & ~ bit a n)"
  assumes "minus_eq_not_minus_1": "!!a. - a = not (a - (1::'a))"
class semiring_bit_operations = semiring_bits +
  fixes "and" :: "'a => 'a => 'a"
    and or :: "'a => 'a => 'a"
    and xor :: "'a => 'a => 'a"
    and mask :: "nat => 'a"
    and set_bit :: "nat => 'a => 'a"
    and unset_bit :: "nat => 'a => 'a"
    and flip_bit :: "nat => 'a => 'a"
    and push_bit :: "nat => 'a => 'a"
    and drop_bit :: "nat => 'a => 'a"
    and take_bit :: "nat => 'a => 'a"
  assumes "bit_and_iff": "!!a b n. bit (and a b) n = (bit a n & bit b n)"
    and "bit_or_iff": "!!a b n. bit (or a b) n = (bit a n | bit b n)"
    and "bit_xor_iff": "!!a b n. bit (xor a b) n = (bit a n ~= bit b n)"
    and "mask_eq_exp_minus_1": "!!n. mask n = (2::'a) ^ n - (1::'a)"
    and "set_bit_eq_or": "!!n a. set_bit n a = or a (push_bit n (1::'a))"
    and
    "bit_unset_bit_iff":
      "!!m a n. bit (unset_bit m a) n = (bit a n & m ~= n)"
    and
    "flip_bit_eq_xor": "!!n a. flip_bit n a = xor a (push_bit n (1::'a))"
    and "push_bit_eq_mult": "!!n a. push_bit n a = a * (2::'a) ^ n"
    and "drop_bit_eq_div": "!!n a. drop_bit n a = a div (2::'a) ^ n"
    and "take_bit_eq_mod": "!!n a. take_bit n a = a mod (2::'a) ^ n"
class ring_bit_operations = semiring_bit_operations + ring_parity +
  fixes not :: "'a => 'a"
  assumes
    "bit_not_iff_eq":
      "!!a n. bit (not a) n = ((2::'a) ^ n ~= (0::'a) & ~ bit a n)"
  assumes "minus_eq_not_minus_1": "!!a. - a = not (a - (1::'a))"
instantiation
  word :: (len) size
  size_word == size :: 'a word => nat
### Partially applied constant "Word.word_sle" on left hand side of equation, in theorem:
### linorder.Min (\<le>s) (set (?x # ?xs)) == fold signed.min ?xs ?x
### Partially applied constant "Word.word_sle" on left hand side of equation, in theorem:
### linorder.Max (\<le>s) (set (?x # ?xs)) == fold signed.max ?xs ?x
### Partially applied constant "Word.word_sle" on left hand side of equation, in theorem:
### signed.sorted [] == True
### Partially applied constant "Word.word_sle" on left hand side of equation, in theorem:
### signed.sorted [?x] == True
### Partially applied constant "Word.word_sle" on left hand side of equation, in theorem:
### signed.sorted (?x # ?y # ?zs) == ?x \<le>s ?y & signed.sorted (?y # ?zs)
### Partially applied constant "Word.word_sle" on left hand side of equation, in theorem:
### signed.sorted_list_of_set (set ?xs) == signed.sort (remdups ?xs)
val unat_arith_simpset =
   Simpset
    ({depth = (0, ref false), prems = [], rules =
      Net {atoms =
           {("Int.Pos",
              Leaf
               [{elhs = "Int.Pos", extra = false, fo = true, lhs =
                 Const ("Int.Pos", "num => int"), name = "Int.Pos_def",
                 perm = false, thm = "Int.Pos == numeral"}]),
             ("Word.Word",
               Leaf
                [{elhs = "Word.Word", extra = false, fo = true, lhs =
                  Const ("Word.Word", "int => ?'a1 word"), name =
                  "Word.Word_eq_word_of_int", perm = false, thm =
                  "Word.Word == word_of_int"}]),
             ("Word.cast",
               Leaf
                [{elhs = "Word.cast", extra = false, fo = true, lhs =
                  Const ("Word.cast", "?'a1 word => ?'b1 word"), name =
                  "??.unknown", perm = false, thm = "Word.cast == ucast"}]),
             ("Word.of_int",
               Leaf
                [{elhs = "Word.of_int", extra = false, fo = true, lhs =
                  Const ("Word.of_int", "int => ?'a1 word"), name =
                  "??.unknown", perm = false, thm =
                  "Word.of_int == word_of_int"}]),
             ("Word.of_nat",
               Leaf
                [{elhs = "Word.of_nat", extra = false, fo = true, lhs =
                  Const ("Word.of_nat", "nat => ?'a1 word"), name =
                  "??.unknown", perm = false, thm =
                  "Word.of_nat == word_of_nat"}]),
             ("Word.the_int",
               Leaf
                [{elhs = "Word.the_int", extra = false, fo = true, lhs =
                  Const ("Word.the_int", "?'a1 word => int"), name =
                  "??.unknown", perm = false, thm =
                  "Word.the_int == uint"}]),
             ("Word.the_nat",
               Leaf
                [{elhs = "Word.the_nat", extra = false, fo = true, lhs =
                  Const ("Word.the_nat", "?'a1 word ... nat"), name =
                  "??.unknown", perm = false, thm =
                  "Word.the_nat == unat"}]),
             ("String.Literal'",
               Leaf
                [{elhs = "String.Literal'", extra = false, fo = true, lhs =
                  Const ("String.Literal'", "... ... ..."), name =
                  "String.Literal'_def", perm = false, thm =
                  "String.Literal' ... String.Literal"}]),
             ("Code_Numeral.Pos",
               Leaf
                [{elhs = "Code_Numeral.Pos", extra = false, fo = true, lhs =
                  Const ("Code_Numeral.Pos", "..."), name =
                  "Code_Numeral.Pos_def", perm = false, thm =
                  "... ... ..."}]),
             ("Word.signed_cast",
               Leaf
                [{elhs = "Word.signed_cast", extra = false, fo = true, lhs =
                  Const ("Word.signed_cast", "..."), name = "??.unknown",
                  ...}]),
             ("Word.the_signed_int",
               Leaf
                [{elhs = "...", extra = false, fo = true, lhs =
                  Const ("...", ...), ...}]),
             ("Groups.abs_class.abs",
               Leaf [{elhs = "...", extra = false, fo = true, ...}]),
             ("Groups.one_class.one",
               Leaf [{elhs = ..., extra = false, ...}, ...]),
             ("Groups.sgn_class.sgn", Leaf [...]),
             ("Code_Numeral.negative", ...), ...},
           comb =
           Net {atoms =
                {("Fun.id",
                   Net {atoms = {}, comb = Leaf [], var =
                        Leaf
                         [{elhs = "id ?y", extra = false, fo = true, lhs =
                           Const ("Fun.id", "?'a => ?'a") $
                             Var (("y", 0), "?'a"),
                           name = "Fun.id_apply", perm = false, thm =
                           "id ?y == ?y"}]}),
                  ("HOL.Ex",
                    Net {atoms = {}, comb =
                         Net {atoms =
                              {("HOL.eq",
                                 Net {atoms = {}, comb = Leaf [], var =
Leaf
 [{elhs = "...", extra = false, fo = true, lhs =
   Const ("...", "(?'d1 => bool) => bool") $ ..., ...}]})},
                              comb = Leaf [], var = Leaf []},
                         var =
                         Leaf
                          [{elhs = "Ex ?P1", extra = false, fo = true, lhs =
                            Const ("HOL.Ex", "(...) ... bool") $
                              Abs ("x", "1",
                                Var ((...), "1 => bool") $ ...),
                            name = "Numeral_Type.ex_1", perm = false, thm =
                            "EX x. ?P1 x == ?P1 1"},
                           {elhs = "Ex ?P1", extra = false, fo = true, lhs =
                            Const ("HOL.Ex", "... ... ...") $
                              Abs ("x", "...", ... $ ...),
                            name = "Product_Type.split_paired_Ex", perm =
                            false, thm =
                            "... x... ... ... == ... a b... ... ..."},
                           {elhs = "EX x y. ?p1 ... ......... ......",
                            extra = false, fo = true, lhs =
                            Const ("HOL.Ex", "...") $ Abs ("x", "...", ...),
                            name = "Product_Type.surj_pair", perm = false,
                            thm = "... ... ...... ... ... True"},
                           {elhs = "... x... ... ... ...", extra = false,
                            fo = false, lhs =
                            Const ("HOL.Ex", "...") $ Abs ("x", ..., ...),
                            name = "Set.ex_image_cong_iff_2", perm = false,
                            thm = "... ... ..."},
                           {elhs = "... ...... ...", extra = false, fo =
                            true, lhs =
                            Const ("...", ...) $ Abs ("...", "?'a1", ...),
                            name = "Set.ex_image_cong_iff_1", ...},
                           {elhs = "...", extra = false, fo = false, lhs =
                            Const ("...", "(?'d1 => bool) => bool") $ ...,
                            ...},
                           {elhs = "...", extra = false, fo = false, ...},
                           {elhs = ..., extra = false, ...}, ...]}),
                  ("HOL.All",
                    Net {atoms = {}, comb = Leaf [], var =
                         Leaf
                          [{elhs = "All ?P1", extra = false, fo = true,
                            lhs =
                            Const ("HOL.All", "... ... ...") $
                              Abs ("i", "...", ... $ ...),
                            name = "Numeral_Type.forall_1", perm = false,
                            thm = "... i... ... ... == ?P1 ..."},
                           {elhs = "ALL y. ?x1 ... ... ...", extra = false,
                            fo = true, lhs =
                            Const ("HOL.All", "...") $
                              Abs ("y", "...", ...),
                            name = "Option.not_Some_eq", perm = false, thm =
                            "... ...... ... ... ... ... ..."},
                           {elhs = "All ?P1", extra = false, fo = true,
                            lhs =
                            Const ("HOL.All", "...") $ Abs ("x", ..., ...),
                            name = "Product_Type.split_paired_All", perm =
                            false, thm = "... ... ..."},
                           {elhs = "... ...... ...", extra = false, fo =
                            true, lhs =
                            Const ("...", ...) $ Abs ("...", "?'a1", ...),
                            name = "Set.all_not_in_conv", ...},
                           {elhs = "...", extra = false, fo = true, lhs =
                            Const ("...", "(?'d1 => bool) => bool") $ ...,
                            ...},
                           {elhs = "...", extra = false, fo = true, ...},
                           {elhs = ..., extra = false, ...}, ...]}),
                  ("HOL.Ex1",
                    Net {atoms = {}, comb =
                         Net {atoms =
                              {("HOL.eq",
                                 Net {atoms = {}, comb = Leaf [], var =
Leaf [{elhs = ..., extra = false, ...}]})},
                              comb = Leaf [], var = Leaf []},
                         var =
                         Leaf
                          [{elhs = "EX! x. x ... ?t1", extra = false, fo =
                            true, lhs =
                            Const ("HOL.Ex1", "...") $
                              Abs ("x", "...", ...),
                            name = "HOL.ex1_eq_1", perm = false, thm =
                            "... ...... ... ... True"}]}),
                  ("HOL.Not",
                    Net {atoms =
                         {("HOL.True",
                            Leaf
                             [{elhs = "... True", extra = false, fo = true,
                               lhs =
                               Const ("...", ...) $ Const ("...", "bool"),
                               name = "HOL.simp_thms_7", ...}]),
                           ("HOL.False",
                             Leaf
                              [{elhs = "... ...", extra = false, fo = true,
                                lhs = Const ("...", "bool => bool") $ ...,
                                ...}])},
                         comb =
                         Net {atoms =
                              {("HOL.Ex",
                                 Net {atoms = {}, comb = Leaf [...], var =
Leaf [...]}),
                                ("HOL.All",
                                  Net {atoms = {}, comb = ..., var = ...}),
                                ("HOL.Not", Net {atoms = {}, ...}),
                                ("Finite_Set.finite", ...)},
                              comb =
                              Net {atoms =
                                   {("HOL.eq", Net {atoms = {...}, ...}),
                                     ("Set.Bex", ...), ...},
                                   comb = Leaf [], var = Leaf []},
                              var = Leaf []},
                         var = Leaf []}),
                  ("HOL.The",
                    Net {atoms = {}, comb =
                         Net {atoms =
                              {("HOL.eq",
                                 Net {atoms = {}, comb = ..., var = ...}),
                                ("Product_Type.prod.case_prod",
                                  Net {atoms = {}, ...})},
                              comb = Leaf [], var = Leaf []},
                         var =
                         Leaf
                          [{elhs = "... ...... ...", extra = false, fo =
                            true, lhs =
                            Const ("...", ...) $ Abs ("...", "?'a", ...),
                            name = "HOL.the_eq_trivial", ...}]}),
                  ("Int.Neg",
                    Net {atoms = {}, comb = Leaf [], var =
                         Leaf
                          [{elhs = "...", extra = false, fo = true, lhs =
                            Const ("...", "num => int") $ ..., ...}]}),
                  ("Int.dup",
                    Net {atoms = {}, comb = Leaf [], var =
                         Leaf
                          [{elhs = "...", extra = false, fo = true, ...}]}),
                  ("Int.nat",
                    Net {atoms =
                         {("Groups.one_class.one", Leaf [...]),
                           ("Groups.zero_class.zero", ...)},
                         comb = Net {atoms = {...}, comb = ..., var = ...},
                         var = Leaf [{elhs = ..., extra = false, ...}]}),
                  ("Map.dom",
                    Net {atoms = {}, comb = Net {atoms = {...}, ...}, var =
                         Leaf [...]}),
                  ("Map.ran", Net {atoms = {}, comb = ..., var = ...}),
                  ("Nat.Suc", Net {atoms = {...}, ...}), ("Num.inc", ...),
                  ...},
                comb =
                Net {atoms =
                     {("HOL.eq",
                        Net {atoms =
                             {("HOL.True",
                                Net {atoms =
                                     {("HOL.False",
  Leaf
   [{elhs = "...", extra = false, fo = true, lhs =
     Const ("...", "bool => bool => bool") $ ... $ ..., ...}])},
                                     comb = Leaf [], var =
                                     Leaf
[{elhs = "... ... ...", extra = false, fo = true, lhs =
  Const ("...", ...) $ Const ("...", "bool") $ ..., name =
  "HOL.simp_thms_11", ...}]}),
                               ("HOL.False",
                                 Net {atoms =
{("HOL.True", Leaf [{elhs = "...", extra = false, fo = true, ...}])}, comb =
Leaf [], var =
Leaf
 [{elhs = "...", extra = false, fo = true, lhs =
   Const ("...", "bool => bool => bool") $ ... $ ..., ...}]}),
                               ("Num.num.One",
                                 Net {atoms = {}, comb =
Net {atoms = {("Num.num.Bit0", ...), ...}, comb = Leaf [...], var =
     Leaf [...]},
var = Leaf []}),
                               ("Filter.at_bot",
                                 Net {atoms =
{("Orderings.bot_class.bot", Leaf [...])}, comb = Leaf [], var = Leaf []}),
                               ("Filter.at_top",
                                 Net {atoms =
{("Orderings.bot_class.bot", ...)}, comb = Leaf [...], var = Leaf [...]}),
                               ("List.list.Nil",
                                 Net {atoms = {}, comb = ..., var = ...}),
                               ("Filter.cofinite",
                                 Net {atoms = {...}, ...}),
                               ("Option.option.None", ...), ...},
                             comb =
                             Net {atoms =
                                  {("HOL.Not",
                                     Net
{atoms = {}, comb = Leaf [], var =
 Net {atoms = {}, comb = Net {atoms = {...}, ...}, var = Leaf [...]}}),
                                    ("Int.nat",
Net {atoms = {}, comb = Leaf [], var =
     Net {atoms = {...}, comb = ..., var = ...}}),
                                    ("Map.dom",
Net {atoms = {}, comb = Leaf [...], var = Net {atoms = {...}, ...}}),
                                    ("Nat.Suc",
Net {atoms = {...}, comb = ..., var = ...}),
                                    ("Set.Pow", Net {atoms = {}, ...}),
                                    ("List.rev", ...), ...},
                                  comb =
                                  Net {atoms =
 {("List.upt",
    Net {atoms = {}, comb = Leaf [...], var = Net {atoms = {}, ...}}),
   ("List.zip", Net {atoms = {}, comb = ..., var = ...}),
   ("List.drop", Net {atoms = {}, ...}), ("List.take", ...), ...},
 comb =
 Net {atoms =
      {("Fun.fun_upd", Net {atoms = {}, ...}), ("Map.map_add", ...), ...},
      comb = Net {atoms = {...}, comb = ..., var = ...}, var = Leaf []},
 var = Leaf []},
                                  var = Leaf []},
                             var =
                             Net {atoms =
                                  {("HOL.True",
                                     Leaf
[{elhs = "... ... ...", extra = false, fo = true, lhs =
  Const ("...", ...) $ Var ((...), "bool") $ ..., name = "HOL.simp_thms_12",
  ...}]),
                                    ("HOL.False",
Leaf
 [{elhs = "...", extra = false, fo = true, lhs =
   Const ("...", "bool => bool => bool") $ ... $ ..., ...}]),
                                    ("Groups.one_class.one",
Leaf [{elhs = "...", extra = false, fo = true, ...}])},
                                  comb =
                                  Net {atoms =
 {("HOL.Not", Net {atoms = {}, comb = Leaf [...], var = Leaf [...]}),
   ("Map.map_of", Net {atoms = {}, comb = ..., var = ...}),
   ("Groups.uminus_class.uminus", Net {atoms = {}, ...})},
 comb =
 Net {atoms =
      {("List.append", Net {atoms = {}, ...}), ("Map.map_add", ...), ...},
      comb = Leaf [], var = Leaf []},
 var = Leaf []},
                                  var =
                                  Leaf
                                   [{elhs = "?v1 ... ?w1", extra = false,
                                     fo = true, lhs =
                                     Const ("HOL.eq", "...") $
 Var (("...", 1), ...) $ Var ((...), "?'a1 word"),
                                     name = "local.unat_arith_simps_3",
                                     perm = false, thm = "... ... ..."},
                                    {elhs = "... ... ...", extra = false,
                                     fo = true, lhs =
                                     Const ("...", ...) $
 Var ((...), "?'a1") $ ...,
                                     name = "HOL.simp_thms_6", ...}]}}),
                       ("HOL.Let",
                         Net {atoms =
                              {("Groups.one_class.one",
                                 Net {atoms = {}, comb = Leaf [], var =
Leaf
 [{elhs = "...", extra = false, fo = true, lhs =
   Const ("...", "?'b1 => (?'b1 => ?'a) => ?'a") $ ... $ ..., ...}]}),
                                ("Groups.zero_class.zero",
                                  Net {atoms = {}, comb = Leaf [], var =
 Leaf [{elhs = "...", extra = false, fo = true, ...}]})},
                              comb =
                              Net {atoms =
                                   {("Nat.Suc",
Net {atoms = {}, comb = Leaf [], var =
     Net {atoms = {}, comb = ..., var = ...}}),
                                     ("Num.numeral_class.numeral",
 Net {atoms = {}, comb = Leaf [...], var = Net {atoms = {}, ...}}),
                                     ("Groups.uminus_class.uminus",
 Net {atoms = {}, comb = ..., var = ...})},
                                   comb = Leaf [], var = Leaf []},
                              var = Leaf []}),
                       ("Int.sub",
                         Net {atoms = {}, comb = Leaf [], var =
                              Net {atoms = {}, comb = Leaf [], var =
                                   Leaf
                                    [{elhs = "...", extra = false, fo =
true, lhs = Const ("...", "num => num => int") $ ... $ ..., ...}]}}),
                       ("Num.pow",
                         Net {atoms = {}, comb = Leaf [], var =
                              Net {atoms =
                                   {("Num.num.One",
Leaf [{elhs = ..., extra = false, ...}])},
                                   comb =
                                   Net {atoms =
  {("Num.num.Bit0", ...), ...}, comb = Leaf [...], var = Leaf [...]},
                                   var = Leaf []}}),
                       ("Set.Bex",
                         Net {atoms =
                              {("Orderings.bot_class.bot",
                                 Net {atoms = {}, comb = Leaf [...], var =
Leaf [...]}),
                                ("Orderings.top_class.top",
                                  Net {atoms = {}, comb = ..., var = ...})},
                              comb =
                              Net {atoms =
                                   {("Set.Collect", Net {atoms = {}, ...}),
                                     ("List.list.set", ...), ...},
                                   comb =
                                   Net {atoms = {...}, comb = ..., var =
  ...},
                                   var = Leaf []},
                              var =
                              Net {atoms = {}, comb =
                                   Net {atoms = {...}, comb = ..., var =
  ...},
                                   var =
                                   Leaf
                                    [{elhs = ..., extra = false, ...},
                                     ...]}}),
                       ("Fun.comp",
                         Net {atoms =
                              {("Fun.id",
                                 Net {atoms = {}, comb = ..., var = ...}),
                                ("Option.option.the",
                                  Net {atoms = {...}, ...}),
                                ("Product_Type.prod.fst", ...), ...},
                              comb =
                              Net {atoms = {("List.list.map", ...), ...},
                                   comb = Net {atoms = {...}, ...}, var =
                                   Leaf [...]},
                              var =
                              Net {atoms = {("Fun.id", ...)}, comb =
                                   Leaf [...], var = Leaf [...]}}),
                       ("GCD.bezw",
                         Net {atoms = {}, comb = Leaf [], var =
                              Net {atoms = {...}, comb = ..., var = ...}}),
                       ("HOL.conj",
                         Net {atoms = {("HOL.True", ...), ...}, comb =
                              Net {atoms = {...}, ...}, var =
                              Net {atoms = {...}, ...}}),
                       ("HOL.disj",
                         Net {atoms = {...}, comb = ..., var = ...}),
                       ("List.nth", Net {atoms = {}, ...}),
                       ("List.upt", ...), ...},
                     comb =
                     Net {atoms =
                          {("HOL.If",
                             Net {atoms =
                                  {("HOL.True",
                                     Net
{atoms = {}, comb = Leaf [], var =
 Net {atoms = {}, comb = Leaf [...], var = Leaf [...]}}),
                                    ("HOL.False",
Net {atoms = {}, comb = Leaf [], var =
     Net {atoms = {}, comb = ..., var = ...}})},
                                  comb =
                                  Net {atoms = {}, comb =
 Net {atoms = {("HOL.eq", Net {atoms = {}, ...})}, comb = Leaf [], var =
      Leaf []},
 var = Leaf []},
                                  var =
                                  Net {atoms = {}, comb = Leaf [], var =
 Net {atoms = {}, comb = Leaf [], var =
      Leaf [{elhs = ..., extra = false, ...}]}}}),
                            ("Fun.comp",
                              Net {atoms = {}, comb = Leaf [], var =
                                   Net {atoms = {}, comb = Leaf [], var =
  Net {atoms = {}, comb = Leaf [...], var = Leaf [...]}}}),
                            ("Fun.fcomp",
                              Net {atoms = {}, comb = Leaf [], var =
                                   Net {atoms = {}, comb = Leaf [], var =
  Net {atoms = {}, comb = ..., var = ...}}}),
                            ("List.foldl",
                              Net {atoms = {}, comb = Leaf [], var =
                                   Net {atoms = {}, comb = Leaf [...], var =
  Net {atoms = {...}, ...}}}),
                            ("List.foldr",
                              Net {atoms = {}, comb = Leaf [], var =
                                   Net {atoms = {}, comb = ..., var =
  ...}}),
                            ("Nat.compow",
                              Net {atoms =
                                   {("Groups.zero_class.zero", ...)}, comb =
                                   Leaf [...], var = Leaf [...]}),
                            ("Fun.fun_upd",
                              Net {atoms = {}, comb = ..., var = ...}),
                            ("Map.map_add", Net {atoms = {}, ...}),
                            ("Fun.bij_betw", ...), ...},
                          comb =
                          Net {atoms =
                               {("Fun.fun_upd",
                                  Net {atoms = {}, comb = Leaf [], var =
 Net {atoms = {}, comb = Leaf [], var =
      Net {atoms = {}, comb = ..., var = ...}}}),
                                 ("Fun.map_fun",
                                   Net {atoms = {}, comb = Leaf [], var =
  Net {atoms = {}, comb = Leaf [...], var = Net {atoms = {}, ...}}}),
                                 ("Map.map_upds",
                                   Net {atoms = {}, comb = Leaf [], var =
  Net {atoms = {}, comb = ..., var = ...}}),
                                 ("BNF_Def.rel_sum",
                                   Net {atoms = {}, comb = Leaf [...], var =
  Net {atoms = {}, ...}}),
                                 ("Fun.override_on",
                                   Net {atoms = {}, comb = ..., var = ...}),
                                 ("Num.num.rec_num", Net {atoms = {}, ...}),
                                 ("Num.num.case_num", ...), ...},
                               comb =
                               Net {atoms =
                                    {("Enum.finite_4.rec_finite_4",
 Net {atoms = {}, comb = Leaf [], var =
      Net {atoms = {}, comb = ..., var = ...}}),
("Enum.finite_4.case_finite_4",
  Net {atoms = {}, comb = Leaf [...], var = Net {atoms = {}, ...}})},
                                    comb =
                                    Net {atoms =
   {("Enum.finite_5.rec_finite_5", Net {atoms = {}, comb = ..., var = ...}),
     ("Enum.finite_5.case_finite_5", Net {atoms = {}, ...})},
   comb =
   Net {atoms = {}, comb = Net {atoms = {...}, ...}, var = Leaf [...]},
   var = Leaf []},
                                    var = Leaf []},
                               var = Leaf []},
                          var = Leaf []},
                     var = Leaf []},
                var = Leaf []},
           var =
           Leaf
            [{elhs = "%u. EX x y. u = (x, y) & ?P1 x y", extra = false, fo =
              false, lhs =
              Abs ("u", "?'a1 * ?'b1",
                Const ("HOL.Ex", "(?'a1 => bool) => bool") $
                  Abs ("x", "?'a1",
                    Const ("HOL.Ex", "...") $ Abs ("y", "...", ...))),
              name = "Product_Type.split_eta_SetCompr2", perm = false, thm =
              "%u. EX x y. u = (x, y) & ?P1 x y == %(x, y). ?P1 x y"},
             {elhs = "%u. EX x y. u = (x, y) & ?y (x, y)", extra = false,
              fo = true, lhs =
              Abs ("u", "?'a1 * ?'b1",
                Const ("HOL.Ex", "(?'a1 ... bool) => bool") $
                  Abs ("x", "?'a1",
                    Const ("HOL.Ex", "...") $ Abs ("y", ..., ...))),
              name = "Product_Type.split_eta_SetCompr", perm = false, thm =
              "%u. EX x y. u = (x, y) & ?y (x, y) == ?y"},
             {elhs = "%a. ?y ()", extra = false, fo = true, lhs =
              Abs ("", "unit",
                Var (("y", 0), "unit => ?'a1") $
                  Const ("Product_Type.Unity", "unit")),
              name = "Product_Type.unit_abs_eta_conv", perm = false, thm =
              "%a. ?y () == ?y"},
             {elhs = "%A f. Inf (f ` A)", extra = false, fo = true, lhs =
              Abs ("A", "?'a1 set",
                Abs ("f", "?'a1 => bool",
                  Const ("Complete_Lattices.Inf_class.Inf", "...") $
                    (Const ("...",
                            "(?'a1 => bool) => ?'a1 set => bool set") $
                      ... $ ...))),
              name = "Complete_Lattices.INF_bool_eq", perm = false, thm =
              "%A f. Inf (f ` A) == Ball"},
             {elhs = "%A f. Sup (f ` A)", extra = false, fo = true, lhs =
              Abs ("A", "?'a1 set",
                Abs ("f", "?'a1 ... bool",
                  Const ("...", ...) $ (... $ ... $ ...))),
              name = "Complete_Lattices.SUP_bool_eq", perm = false, thm =
              "%A f. Sup (f ... A) == Bex"}]}},
     {congs =
      ({((true, "HOL.If"),
          "?b == ?c ==> if ?b then ?x else ?y == if ?c then ?x else ?y"),
         ((true, "Set.Bex"),
           "[| ?A == ?B; !!x. x : ?B =simp=> ?P x == ?Q x |]
            ==> EX x:?A. ?P x == EX x:?B. ?Q x"),
         ((true, "Set.Ball"),
           "[| ?A == ?B; !!x. x : ?B =simp=> ?P x == ?Q x |]
            ==> ALL x:?A. ?P x == ALL x:?B. ?Q x"),
         ((true, "Set.image"),
           "[| ?M == ?N; !!x. x : ?N =simp=> ?f x == ?g x |]
            ==> ?f ` ?M == ?g ` ?N"),
         ((true, "HOL.implies"),
           "[| ?P == ?P'; ?P' ==> ?Q == ?Q' |]
            ==> ?P --> ?Q == ?P' --> ?Q'"),
         ((true, "HOL.NO_MATCH"),
           "NO_MATCH ?pat ?val == NO_MATCH ?pat ?val"),
         ((true, "HOL.ASSUMPTION"), "ASSUMPTION ?A == ASSUMPTION ?A"),
         ((true, "HOL.simp_implies"),
           "[| PROP ?P == PROP ?P'; PROP ?P' ==> PROP ?Q ... PROP ?Q' |]
            ==> (PROP ?P ... PROP ?Q) == (PROP ?P' ... PROP ?Q')"),
         ((true, "Nat.nat.case_nat"),
           "?M == ?M' ==>
            case ?M of ... ... ... | ... ... ... ==
            case ?M' of ... ... ... | ... ... ..."),
         ((true, "Num.num.case_num"),
           "?num ... ?num' ==>
            ... ... ... ... ... ... ... ... ...
            ... ... ... ... ... ... ... ..."),
         ((true, "List.successively"),
           "... ...... ... ... ==> ... ... ..."),
         ((true, "List.list.case_list"), "... ... ..."),
         ((true, "String.char.case_char"), "..."),
         ((true, "Sum_Type.sum.case_sum"), "..."),
         ((true, "Nitpick.word.case_word"), ...), ((true, "..."), ...),
         ...},
       [(true, "Power.power_class.power"),
        (true, "Phantom_Type.phantom.case_phantom"),
        (true, "Nitpick.word.case_word"),
        (true, "Nitpick.pair_box.case_pair_box"),
        (true, "Nitpick.fun_box.case_fun_box"),
        (true, "Record.tuple_isomorphism.case_tuple_isomorphism"),
        (true, "Extraction.sumbool.case_sumbool"),
        (true, "Quickcheck_Exhaustive.three_valued.case_three_valued"),
        (true, "Quickcheck_Exhaustive.unknown.case_unknown"),
        (true, "Quickcheck_Narrowing.cfun.case_cfun"),
        (true, "Quickcheck_Narrowing.ffun.case_ffun"),
        (true, "Quickcheck_Narrowing.property.case_property"),
        (true, "Quickcheck_Narrowing.narrowing_cons.case_narrowing_cons"),
        (true, "Quickcheck_Narrowing.narrowing_term.case_narrowing_term"),
        (true, "Quickcheck_Narrowing.narrowing_type.case_narrowing_type"),
        (true, "..."), ...]),
      loop_tacs =
      [("split asm HOL.If :: (HOL.bool, (_, (_, _)fun)fun)fun", fn),
       ("split asm Rings.zero_neq_one_class.of_bool :: (HOL.bool, _)fun",
        fn),
       ("split Rings.zero_neq_one_class.of_bool :: (HOL.bool, _)fun", fn),
       ("split HOL.If :: (HOL.bool, (_, (_, _)fun)fun)fun", fn)],
      mk_rews =
      {mk = fn, mk_cong = fn, mk_eq_True = fn, mk_sym = fn, reorient = fn},
      procs =
      Net {atoms = {}, comb =
           Net {atoms =
                {("HOL.Ex",
                   Net {atoms = {}, comb = Leaf [], var =
                        Leaf
                         [Proc
                           {lhs =
                            Const ("HOL.Ex", "(...) ... bool") $
                              Abs ("x", "?'a",
                                Var ((...), "?'a => bool") $ ...),
                            name = "HOL.defined_Ex", proc = fn, stamp =
                            Stamp 91198}]}),
                  ("HOL.All",
                    Net {atoms = {}, comb = Leaf [], var =
                         Leaf
                          [Proc
                            {lhs =
                             Const ("HOL.All", "... ... ...") $
                               Abs ("x", "...", ... $ ...),
                             name = "HOL.defined_All", proc = fn, stamp =
                             Stamp 91244}]}),
                  ("HOL.Not",
                    Net {atoms = {}, comb =
                         Net {atoms = {}, comb =
                              Net {atoms =
                                   {("Orderings.ord_class.less",
Net {atoms = {}, comb = Leaf [...], var = Net {atoms = {}, ...}})},
                                   comb = Leaf [], var = Leaf []},
                              var = Leaf []},
                         var = Leaf []}),
                  ("Nat.Suc",
                    Net {atoms = {}, comb =
                         Net {atoms = {}, comb =
                              Net {atoms =
                                   {("Groups.plus_class.plus",
Net {atoms = {}, comb = ..., var = ...})},
                                   comb = Leaf [], var = Leaf []},
                              var = Leaf []},
                         var = Leaf []}),
                  ("Pure.all",
                    Net {atoms = {}, comb = Leaf [], var =
                         Leaf
                          [Proc
                            {lhs =
                             Const ("...", ...) $ Abs ("...", "?'a", ...),
                             name = "HOL.defined_all", proc = fn, stamp =
                             Stamp 91290}]}),
                  ("Set.Collect",
                    Net {atoms = {}, comb = Leaf [], var =
                         Leaf
                          [Proc
                            {lhs =
                             Const ("...", "(?'a => bool) => ?'a set") $
                               ...,
                             name = "Product_Type.Collect_mem", proc = fn,
                             stamp = Stamp 616364},
                           Proc
                            {lhs = ... $ ..., name = "Set.defined_Collect",
                             proc = fn, stamp = Stamp 299868}]}),
                  ("List.list.set",
                    Net {atoms = {}, comb = Leaf [], var =
                         Leaf
                          [Proc
                            {lhs = ... $ ..., name =
                             "List.list_to_set_comprehension", proc = fn,
                             stamp = Stamp 2625594}]}),
                  ("Product_Type.prod.case_prod",
                    Net {atoms = {}, comb = Leaf [], var =
                         Leaf [Proc {lhs = ..., name = "...", ...}]})},
                comb =
                Net {atoms =
                     {("HOL.eq",
                        Net {atoms =
                             {("Groups.one_class.one",
                                Net {atoms = {}, comb = Leaf [], var =
                                     Leaf
[Proc
  {lhs = Const ("...", "?'a => ?'a => bool") $ ... $ ..., name =
   "Groups.reorient_one", proc = fn, stamp = Stamp 171260}]}),
                               ("Groups.zero_class.zero",
                                 Net {atoms = {}, comb = Leaf [], var =
Leaf
 [Proc
   {lhs = ... $ ... $ ..., name = "Groups.reorient_zero", proc = fn, stamp =
    Stamp 171216}]})},
                             comb =
                             Net {atoms =
                                  {("Nat.Suc",
                                     Net
{atoms = {}, comb = Leaf [], var =
 Net {atoms = {}, comb = Leaf [...], var = Leaf [...]}}),
                                    ("Num.numeral_class.numeral",
Net {atoms = {}, comb = Leaf [], var =
     Net {atoms = {}, comb = ..., var = ...}}),
                                    ("Groups.uminus_class.uminus",
Net {atoms = {}, comb = Net {atoms = {...}, ...}, var =
     Net {atoms = {}, ...}})},
                                  comb =
                                  Net {atoms =
 {("Groups.plus_class.plus",
    Net {atoms = {}, comb = Leaf [...], var = Net {atoms = {}, ...}}),
   ("Groups.minus_class.minus", Net {atoms = {}, comb = ..., var = ...}),
   ("Groups.times_class.times", Net {atoms = {}, ...})},
 comb = Leaf [], var = Leaf []},
                                  var = Leaf []},
                             var =
                             Net {atoms = {}, comb =
                                  Net {atoms =
 {("Nat.Suc", Net {atoms = {}, comb = Leaf [...], var = Leaf [...]}),
   ("Groups.uminus_class.uminus", Net {atoms = {}, comb = ..., var = ...})},
 comb =
 Net {atoms =
      {("Groups.plus_class.plus", Net {atoms = {}, ...}),
        ("Groups.minus_class.minus", ...), ...},
      comb = Leaf [], var = Leaf []},
 var = Leaf []},
                                  var =
                                  Leaf
                                   [Proc
                                     {lhs =
Const ("...", ...) $ Var ((...), "?'a") $ ..., name = "record_eq", proc =
fn, stamp = Stamp 4153886},
                                    Proc
                                     {lhs =
Const ("...", "?'a list => ?'a list => bool") $ ... $ ..., name =
"List.list_neq", proc = fn, stamp = Stamp 2645062},
                                    Proc
                                     {lhs = ... $ ... $ ..., name =
"List.list_eq", proc = fn, stamp = Stamp 2633172},
                                    Proc {lhs = ..., name = "...", ...},
                                    Proc {lhs = ..., ...}, ...]}}),
                       ("HOL.Let",
                         Net {atoms = {}, comb = Leaf [], var =
                              Net {atoms = {}, comb = Leaf [], var =
                                   Leaf
                                    [Proc
{lhs = Const ("...", "?'a => (?'a => ?'b) => ?'b") $ ... $ ..., name =
 "HOL.let_simp", proc = fn, stamp = Stamp 91526}]}}),
                       ("Set.Bex",
                         Net {atoms = {}, comb = Leaf [], var =
                              Net {atoms = {}, comb = Leaf [], var =
                                   Leaf
                                    [Proc
{lhs = ... $ ... $ ..., name = "Set.defined_Bex", proc = fn, stamp =
 Stamp 303020}]}}),
                       ("Pure.imp",
                         Net {atoms = {}, comb =
                              Net {atoms =
                                   {("HOL.Trueprop",
Net {atoms = {...}, comb = ..., var = ...})},
                                   comb = Leaf [], var = Leaf []},
                              var = Leaf []}),
                       ("Set.Ball",
                         Net {atoms = {}, comb = Leaf [], var =
                              Net {atoms = {}, comb = Leaf [], var =
                                   Leaf [Proc {lhs = ..., ...}]}}),
                       ("HOL.NO_MATCH",
                         Net {atoms = {}, comb = Leaf [], var =
                              Net {atoms = {}, comb = Leaf [...], var =
                                   Leaf [...]}}),
                       ("Rings.dvd_class.dvd",
                         Net {atoms = {}, comb =
                              Net {atoms = {}, comb = ..., var = ...}, var =
                              Net {atoms = {}, comb = ..., var = ...}}),
                       ("Groups.plus_class.plus",
                         Net {atoms = {}, comb = Leaf [...], var =
                              Net {atoms = {}, ...}}),
                       ("Lattices.inf_class.inf",
                         Net {atoms = {}, comb = ..., var = ...}),
                       ("Lattices.sup_class.sup", Net {atoms = {}, ...}),
                       ("Groups.minus_class.minus", ...), ...},
                     comb =
                     Net {atoms =
                          {("Fun.fun_upd",
                             Net {atoms = {}, comb =
                                  Net {atoms = {}, comb =
 Net {atoms = {}, comb = Net {atoms = {...}, comb = ..., var = ...}, var =
      Leaf []},
 var = Leaf []},
                                  var = Leaf []})},
                          comb = Leaf [], var = Leaf []},
                     var = Leaf []},
                var = Leaf []},
           var =
           Leaf
            [Proc
              {lhs = Var (("x", 0), "?'a"), name = "record", proc = fn,
               stamp = Stamp 4153844},
             Proc
              {lhs = Var (("x", 0), "?'a"), name = "record_upd", proc = fn,
               stamp = Stamp 4153854},
             Proc
              {lhs = Var (("x", 0), "unit"), name = "Product_Type.unit_eq",
               proc = fn, stamp = Stamp 562196}]},
      solvers =
      ([Solver {id = Stamp 1038750, name = "Rtranclp", solver = fn},
        Solver {id = Stamp 1038748, name = "Tranclp", solver = fn},
        Solver {id = Stamp 1038746, name = "Rtrancl", solver = fn},
        Solver {id = Stamp 1038744, name = "Trancl", solver = fn},
        Solver {id = Stamp 781564, name = "lin_arith", solver = fn},
        Solver {id = Stamp 132670, name = "Transitivity", solver = fn},
        Solver {id = Stamp 102528, name = "ASSUMPTION", solver = fn},
        Solver {id = Stamp 90936, name = "HOL unsafe", solver = fn}],
       [Solver {id = Stamp 90938, name = "HOL safe", solver = fn}]),
      subgoal_tac = fn, term_ord = fn}):
   simpset
val unat_arith_tacs = fn: Proof.context -> tactic list
val unat_arith_tac = fn: Proof.context -> int -> tactic
val uint_arith_simpset =
   Simpset
    ({depth = (0, ref false), prems = [], rules =
      Net {atoms =
           {("Int.Pos",
              Leaf
               [{elhs = "Int.Pos", extra = false, fo = true, lhs =
                 Const ("Int.Pos", "num => int"), name = "Int.Pos_def",
                 perm = false, thm = "Int.Pos == numeral"}]),
             ("Word.Word",
               Leaf
                [{elhs = "Word.Word", extra = false, fo = true, lhs =
                  Const ("Word.Word", "int => ?'a1 word"), name =
                  "Word.Word_eq_word_of_int", perm = false, thm =
                  "Word.Word == word_of_int"}]),
             ("Word.cast",
               Leaf
                [{elhs = "Word.cast", extra = false, fo = true, lhs =
                  Const ("Word.cast", "?'a1 word => ?'b1 word"), name =
                  "??.unknown", perm = false, thm = "Word.cast == ucast"}]),
             ("Word.of_int",
               Leaf
                [{elhs = "Word.of_int", extra = false, fo = true, lhs =
                  Const ("Word.of_int", "int => ?'a1 word"), name =
                  "??.unknown", perm = false, thm =
                  "Word.of_int == word_of_int"}]),
             ("Word.of_nat",
               Leaf
                [{elhs = "Word.of_nat", extra = false, fo = true, lhs =
                  Const ("Word.of_nat", "nat => ?'a1 word"), name =
                  "??.unknown", perm = false, thm =
                  "Word.of_nat == word_of_nat"}]),
             ("Word.the_int",
               Leaf
                [{elhs = "Word.the_int", extra = false, fo = true, lhs =
                  Const ("Word.the_int", "?'a1 word => int"), name =
                  "??.unknown", perm = false, thm =
                  "Word.the_int == uint"}]),
             ("Word.the_nat",
               Leaf
                [{elhs = "Word.the_nat", extra = false, fo = true, lhs =
                  Const ("Word.the_nat", "?'a1 word ... nat"), name =
                  "??.unknown", perm = false, thm =
                  "Word.the_nat == unat"}]),
             ("String.Literal'",
               Leaf
                [{elhs = "String.Literal'", extra = false, fo = true, lhs =
                  Const ("String.Literal'", "... ... ..."), name =
                  "String.Literal'_def", perm = false, thm =
                  "String.Literal' ... String.Literal"}]),
             ("Code_Numeral.Pos",
               Leaf
                [{elhs = "Code_Numeral.Pos", extra = false, fo = true, lhs =
                  Const ("Code_Numeral.Pos", "..."), name =
                  "Code_Numeral.Pos_def", perm = false, thm =
                  "... ... ..."}]),
             ("Word.signed_cast",
               Leaf
                [{elhs = "Word.signed_cast", extra = false, fo = true, lhs =
                  Const ("Word.signed_cast", "..."), name = "??.unknown",
                  ...}]),
             ("Word.the_signed_int",
               Leaf
                [{elhs = "...", extra = false, fo = true, lhs =
                  Const ("...", ...), ...}]),
             ("Groups.abs_class.abs",
               Leaf [{elhs = "...", extra = false, fo = true, ...}]),
             ("Groups.one_class.one",
               Leaf [{elhs = ..., extra = false, ...}, ...]),
             ("Groups.sgn_class.sgn", Leaf [...]),
             ("Code_Numeral.negative", ...), ...},
           comb =
           Net {atoms =
                {("Fun.id",
                   Net {atoms = {}, comb = Leaf [], var =
                        Leaf
                         [{elhs = "id ?y", extra = false, fo = true, lhs =
                           Const ("Fun.id", "?'a => ?'a") $
                             Var (("y", 0), "?'a"),
                           name = "Fun.id_apply", perm = false, thm =
                           "id ?y == ?y"}]}),
                  ("HOL.Ex",
                    Net {atoms = {}, comb =
                         Net {atoms =
                              {("HOL.eq",
                                 Net {atoms = {}, comb = Leaf [], var =
Leaf
 [{elhs = "...", extra = false, fo = true, lhs =
   Const ("...", "(?'d1 => bool) => bool") $ ..., ...}]})},
                              comb = Leaf [], var = Leaf []},
                         var =
                         Leaf
                          [{elhs = "Ex ?P1", extra = false, fo = true, lhs =
                            Const ("HOL.Ex", "(...) ... bool") $
                              Abs ("x", "1",
                                Var ((...), "1 => bool") $ ...),
                            name = "Numeral_Type.ex_1", perm = false, thm =
                            "EX x. ?P1 x == ?P1 1"},
                           {elhs = "Ex ?P1", extra = false, fo = true, lhs =
                            Const ("HOL.Ex", "... ... ...") $
                              Abs ("x", "...", ... $ ...),
                            name = "Product_Type.split_paired_Ex", perm =
                            false, thm =
                            "... x... ... ... == ... a b... ... ..."},
                           {elhs = "EX x y. ?p1 ... ......... ......",
                            extra = false, fo = true, lhs =
                            Const ("HOL.Ex", "...") $ Abs ("x", "...", ...),
                            name = "Product_Type.surj_pair", perm = false,
                            thm = "... ... ...... ... ... True"},
                           {elhs = "... x... ... ... ...", extra = false,
                            fo = false, lhs =
                            Const ("HOL.Ex", "...") $ Abs ("x", ..., ...),
                            name = "Set.ex_image_cong_iff_2", perm = false,
                            thm = "... ... ..."},
                           {elhs = "... ...... ...", extra = false, fo =
                            true, lhs =
                            Const ("...", ...) $ Abs ("...", "?'a1", ...),
                            name = "Set.ex_image_cong_iff_1", ...},
                           {elhs = "...", extra = false, fo = false, lhs =
                            Const ("...", "(?'d1 => bool) => bool") $ ...,
                            ...},
                           {elhs = "...", extra = false, fo = false, ...},
                           {elhs = ..., extra = false, ...}, ...]}),
                  ("HOL.All",
                    Net {atoms = {}, comb = Leaf [], var =
                         Leaf
                          [{elhs = "All ?P1", extra = false, fo = true,
                            lhs =
                            Const ("HOL.All", "... ... ...") $
                              Abs ("i", "...", ... $ ...),
                            name = "Numeral_Type.forall_1", perm = false,
                            thm = "... i... ... ... == ?P1 ..."},
                           {elhs = "ALL y. ?x1 ... ... ...", extra = false,
                            fo = true, lhs =
                            Const ("HOL.All", "...") $
                              Abs ("y", "...", ...),
                            name = "Option.not_Some_eq", perm = false, thm =
                            "... ...... ... ... ... ... ..."},
                           {elhs = "All ?P1", extra = false, fo = true,
                            lhs =
                            Const ("HOL.All", "...") $ Abs ("x", ..., ...),
                            name = "Product_Type.split_paired_All", perm =
                            false, thm = "... ... ..."},
                           {elhs = "... ...... ...", extra = false, fo =
                            true, lhs =
                            Const ("...", ...) $ Abs ("...", "?'a1", ...),
                            name = "Set.all_not_in_conv", ...},
                           {elhs = "...", extra = false, fo = true, lhs =
                            Const ("...", "(?'d1 => bool) => bool") $ ...,
                            ...},
                           {elhs = "...", extra = false, fo = true, ...},
                           {elhs = ..., extra = false, ...}, ...]}),
                  ("HOL.Ex1",
                    Net {atoms = {}, comb =
                         Net {atoms =
                              {("HOL.eq",
                                 Net {atoms = {}, comb = Leaf [], var =
Leaf [{elhs = ..., extra = false, ...}]})},
                              comb = Leaf [], var = Leaf []},
                         var =
                         Leaf
                          [{elhs = "EX! x. x ... ?t1", extra = false, fo =
                            true, lhs =
                            Const ("HOL.Ex1", "...") $
                              Abs ("x", "...", ...),
                            name = "HOL.ex1_eq_1", perm = false, thm =
                            "... ...... ... ... True"}]}),
                  ("HOL.Not",
                    Net {atoms =
                         {("HOL.True",
                            Leaf
                             [{elhs = "... True", extra = false, fo = true,
                               lhs =
                               Const ("...", ...) $ Const ("...", "bool"),
                               name = "HOL.simp_thms_7", ...}]),
                           ("HOL.False",
                             Leaf
                              [{elhs = "... ...", extra = false, fo = true,
                                lhs = Const ("...", "bool => bool") $ ...,
                                ...}])},
                         comb =
                         Net {atoms =
                              {("HOL.Ex",
                                 Net {atoms = {}, comb = Leaf [...], var =
Leaf [...]}),
                                ("HOL.All",
                                  Net {atoms = {}, comb = ..., var = ...}),
                                ("HOL.Not", Net {atoms = {}, ...}),
                                ("Finite_Set.finite", ...)},
                              comb =
                              Net {atoms =
                                   {("HOL.eq", Net {atoms = {...}, ...}),
                                     ("Set.Bex", ...), ...},
                                   comb = Leaf [], var = Leaf []},
                              var = Leaf []},
                         var = Leaf []}),
                  ("HOL.The",
                    Net {atoms = {}, comb =
                         Net {atoms =
                              {("HOL.eq",
                                 Net {atoms = {}, comb = ..., var = ...}),
                                ("Product_Type.prod.case_prod",
                                  Net {atoms = {}, ...})},
                              comb = Leaf [], var = Leaf []},
                         var =
                         Leaf
                          [{elhs = "... ...... ...", extra = false, fo =
                            true, lhs =
                            Const ("...", ...) $ Abs ("...", "?'a", ...),
                            name = "HOL.the_eq_trivial", ...}]}),
                  ("Int.Neg",
                    Net {atoms = {}, comb = Leaf [], var =
                         Leaf
                          [{elhs = "...", extra = false, fo = true, lhs =
                            Const ("...", "num => int") $ ..., ...}]}),
                  ("Int.dup",
                    Net {atoms = {}, comb = Leaf [], var =
                         Leaf
                          [{elhs = "...", extra = false, fo = true, ...}]}),
                  ("Int.nat",
                    Net {atoms =
                         {("Groups.one_class.one", Leaf [...]),
                           ("Groups.zero_class.zero", ...)},
                         comb = Net {atoms = {...}, comb = ..., var = ...},
                         var = Leaf [{elhs = ..., extra = false, ...}]}),
                  ("Map.dom",
                    Net {atoms = {}, comb = Net {atoms = {...}, ...}, var =
                         Leaf [...]}),
                  ("Map.ran", Net {atoms = {}, comb = ..., var = ...}),
                  ("Nat.Suc", Net {atoms = {...}, ...}), ("Num.inc", ...),
                  ...},
                comb =
                Net {atoms =
                     {("HOL.eq",
                        Net {atoms =
                             {("HOL.True",
                                Net {atoms =
                                     {("HOL.False",
  Leaf
   [{elhs = "...", extra = false, fo = true, lhs =
     Const ("...", "bool => bool => bool") $ ... $ ..., ...}])},
                                     comb = Leaf [], var =
                                     Leaf
[{elhs = "... ... ...", extra = false, fo = true, lhs =
  Const ("...", ...) $ Const ("...", "bool") $ ..., name =
  "HOL.simp_thms_11", ...}]}),
                               ("HOL.False",
                                 Net {atoms =
{("HOL.True", Leaf [{elhs = "...", extra = false, fo = true, ...}])}, comb =
Leaf [], var =
Leaf
 [{elhs = "...", extra = false, fo = true, lhs =
   Const ("...", "bool => bool => bool") $ ... $ ..., ...}]}),
                               ("Num.num.One",
                                 Net {atoms = {}, comb =
Net {atoms = {("Num.num.Bit0", ...), ...}, comb = Leaf [...], var =
     Leaf [...]},
var = Leaf []}),
                               ("Filter.at_bot",
                                 Net {atoms =
{("Orderings.bot_class.bot", Leaf [...])}, comb = Leaf [], var = Leaf []}),
                               ("Filter.at_top",
                                 Net {atoms =
{("Orderings.bot_class.bot", ...)}, comb = Leaf [...], var = Leaf [...]}),
                               ("List.list.Nil",
                                 Net {atoms = {}, comb = ..., var = ...}),
                               ("Filter.cofinite",
                                 Net {atoms = {...}, ...}),
                               ("Option.option.None", ...), ...},
                             comb =
                             Net {atoms =
                                  {("HOL.Not",
                                     Net
{atoms = {}, comb = Leaf [], var =
 Net {atoms = {}, comb = Net {atoms = {...}, ...}, var = Leaf [...]}}),
                                    ("Int.nat",
Net {atoms = {}, comb = Leaf [], var =
     Net {atoms = {...}, comb = ..., var = ...}}),
                                    ("Map.dom",
Net {atoms = {}, comb = Leaf [...], var = Net {atoms = {...}, ...}}),
                                    ("Nat.Suc",
Net {atoms = {...}, comb = ..., var = ...}),
                                    ("Set.Pow", Net {atoms = {}, ...}),
                                    ("List.rev", ...), ...},
                                  comb =
                                  Net {atoms =
 {("List.upt",
    Net {atoms = {}, comb = Leaf [...], var = Net {atoms = {}, ...}}),
   ("List.zip", Net {atoms = {}, comb = ..., var = ...}),
   ("List.drop", Net {atoms = {}, ...}), ("List.take", ...), ...},
 comb =
 Net {atoms =
      {("Fun.fun_upd", Net {atoms = {}, ...}), ("Map.map_add", ...), ...},
      comb = Net {atoms = {...}, comb = ..., var = ...}, var = Leaf []},
 var = Leaf []},
                                  var = Leaf []},
                             var =
                             Net {atoms =
                                  {("HOL.True",
                                     Leaf
[{elhs = "... ... ...", extra = false, fo = true, lhs =
  Const ("...", ...) $ Var ((...), "bool") $ ..., name = "HOL.simp_thms_12",
  ...}]),
                                    ("HOL.False",
Leaf
 [{elhs = "...", extra = false, fo = true, lhs =
   Const ("...", "bool => bool => bool") $ ... $ ..., ...}]),
                                    ("Groups.one_class.one",
Leaf [{elhs = "...", extra = false, fo = true, ...}])},
                                  comb =
                                  Net {atoms =
 {("HOL.Not", Net {atoms = {}, comb = Leaf [...], var = Leaf [...]}),
   ("Map.map_of", Net {atoms = {}, comb = ..., var = ...}),
   ("Groups.uminus_class.uminus", Net {atoms = {}, ...})},
 comb =
 Net {atoms =
      {("List.append", Net {atoms = {}, ...}), ("Map.map_add", ...), ...},
      comb = Leaf [], var = Leaf []},
 var = Leaf []},
                                  var =
                                  Leaf
                                   [{elhs = "?a1 ... ?b1", extra = false,
                                     fo = true, lhs =
                                     Const ("HOL.eq", "...") $
 Var (("...", 1), ...) $ Var ((...), "?'a1 word"),
                                     name = "local.uint_arith_simps_3",
                                     perm = false, thm = "... ... ..."},
                                    {elhs = "... ... ...", extra = false,
                                     fo = true, lhs =
                                     Const ("...", ...) $
 Var ((...), "?'a1") $ ...,
                                     name = "HOL.simp_thms_6", ...}]}}),
                       ("HOL.Let",
                         Net {atoms =
                              {("Groups.one_class.one",
                                 Net {atoms = {}, comb = Leaf [], var =
Leaf
 [{elhs = "...", extra = false, fo = true, lhs =
   Const ("...", "?'b1 => (?'b1 => ?'a) => ?'a") $ ... $ ..., ...}]}),
                                ("Groups.zero_class.zero",
                                  Net {atoms = {}, comb = Leaf [], var =
 Leaf [{elhs = "...", extra = false, fo = true, ...}]})},
                              comb =
                              Net {atoms =
                                   {("Nat.Suc",
Net {atoms = {}, comb = Leaf [], var =
     Net {atoms = {}, comb = ..., var = ...}}),
                                     ("Num.numeral_class.numeral",
 Net {atoms = {}, comb = Leaf [...], var = Net {atoms = {}, ...}}),
                                     ("Groups.uminus_class.uminus",
 Net {atoms = {}, comb = ..., var = ...})},
                                   comb = Leaf [], var = Leaf []},
                              var = Leaf []}),
                       ("Int.sub",
                         Net {atoms = {}, comb = Leaf [], var =
                              Net {atoms = {}, comb = Leaf [], var =
                                   Leaf
                                    [{elhs = "...", extra = false, fo =
true, lhs = Const ("...", "num => num => int") $ ... $ ..., ...}]}}),
                       ("Num.pow",
                         Net {atoms = {}, comb = Leaf [], var =
                              Net {atoms =
                                   {("Num.num.One",
Leaf [{elhs = ..., extra = false, ...}])},
                                   comb =
                                   Net {atoms =
  {("Num.num.Bit0", ...), ...}, comb = Leaf [...], var = Leaf [...]},
                                   var = Leaf []}}),
                       ("Set.Bex",
                         Net {atoms =
                              {("Orderings.bot_class.bot",
                                 Net {atoms = {}, comb = Leaf [...], var =
Leaf [...]}),
                                ("Orderings.top_class.top",
                                  Net {atoms = {}, comb = ..., var = ...})},
                              comb =
                              Net {atoms =
                                   {("Set.Collect", Net {atoms = {}, ...}),
                                     ("List.list.set", ...), ...},
                                   comb =
                                   Net {atoms = {...}, comb = ..., var =
  ...},
                                   var = Leaf []},
                              var =
                              Net {atoms = {}, comb =
                                   Net {atoms = {...}, comb = ..., var =
  ...},
                                   var =
                                   Leaf
                                    [{elhs = ..., extra = false, ...},
                                     ...]}}),
                       ("Fun.comp",
                         Net {atoms =
                              {("Fun.id",
                                 Net {atoms = {}, comb = ..., var = ...}),
                                ("Option.option.the",
                                  Net {atoms = {...}, ...}),
                                ("Product_Type.prod.fst", ...), ...},
                              comb =
                              Net {atoms = {("List.list.map", ...), ...},
                                   comb = Net {atoms = {...}, ...}, var =
                                   Leaf [...]},
                              var =
                              Net {atoms = {("Fun.id", ...)}, comb =
                                   Leaf [...], var = Leaf [...]}}),
                       ("GCD.bezw",
                         Net {atoms = {}, comb = Leaf [], var =
                              Net {atoms = {...}, comb = ..., var = ...}}),
                       ("HOL.conj",
                         Net {atoms = {("HOL.True", ...), ...}, comb =
                              Net {atoms = {...}, ...}, var =
                              Net {atoms = {...}, ...}}),
                       ("HOL.disj",
                         Net {atoms = {...}, comb = ..., var = ...}),
                       ("List.nth", Net {atoms = {}, ...}),
                       ("List.upt", ...), ...},
                     comb =
                     Net {atoms =
                          {("HOL.If",
                             Net {atoms =
                                  {("HOL.True",
                                     Net
{atoms = {}, comb = Leaf [], var =
 Net {atoms = {}, comb = Leaf [...], var = Leaf [...]}}),
                                    ("HOL.False",
Net {atoms = {}, comb = Leaf [], var =
     Net {atoms = {}, comb = ..., var = ...}})},
                                  comb =
                                  Net {atoms = {}, comb =
 Net {atoms = {("HOL.eq", Net {atoms = {}, ...})}, comb = Leaf [], var =
      Leaf []},
 var = Leaf []},
                                  var =
                                  Net {atoms = {}, comb = Leaf [], var =
 Net {atoms = {}, comb = Leaf [], var =
      Leaf [{elhs = ..., extra = false, ...}]}}}),
                            ("Fun.comp",
                              Net {atoms = {}, comb = Leaf [], var =
                                   Net {atoms = {}, comb = Leaf [], var =
  Net {atoms = {}, comb = Leaf [...], var = Leaf [...]}}}),
                            ("Fun.fcomp",
                              Net {atoms = {}, comb = Leaf [], var =
                                   Net {atoms = {}, comb = Leaf [], var =
  Net {atoms = {}, comb = ..., var = ...}}}),
                            ("List.foldl",
                              Net {atoms = {}, comb = Leaf [], var =
                                   Net {atoms = {}, comb = Leaf [...], var =
  Net {atoms = {...}, ...}}}),
                            ("List.foldr",
                              Net {atoms = {}, comb = Leaf [], var =
                                   Net {atoms = {}, comb = ..., var =
  ...}}),
                            ("Nat.compow",
                              Net {atoms =
                                   {("Groups.zero_class.zero", ...)}, comb =
                                   Leaf [...], var = Leaf [...]}),
                            ("Fun.fun_upd",
                              Net {atoms = {}, comb = ..., var = ...}),
                            ("Map.map_add", Net {atoms = {}, ...}),
                            ("Fun.bij_betw", ...), ...},
                          comb =
                          Net {atoms =
                               {("Fun.fun_upd",
                                  Net {atoms = {}, comb = Leaf [], var =
 Net {atoms = {}, comb = Leaf [], var =
      Net {atoms = {}, comb = ..., var = ...}}}),
                                 ("Fun.map_fun",
                                   Net {atoms = {}, comb = Leaf [], var =
  Net {atoms = {}, comb = Leaf [...], var = Net {atoms = {}, ...}}}),
                                 ("Map.map_upds",
                                   Net {atoms = {}, comb = Leaf [], var =
  Net {atoms = {}, comb = ..., var = ...}}),
                                 ("BNF_Def.rel_sum",
                                   Net {atoms = {}, comb = Leaf [...], var =
  Net {atoms = {}, ...}}),
                                 ("Fun.override_on",
                                   Net {atoms = {}, comb = ..., var = ...}),
                                 ("Num.num.rec_num", Net {atoms = {}, ...}),
                                 ("Num.num.case_num", ...), ...},
                               comb =
                               Net {atoms =
                                    {("Enum.finite_4.rec_finite_4",
 Net {atoms = {}, comb = Leaf [], var =
      Net {atoms = {}, comb = ..., var = ...}}),
("Enum.finite_4.case_finite_4",
  Net {atoms = {}, comb = Leaf [...], var = Net {atoms = {}, ...}})},
                                    comb =
                                    Net {atoms =
   {("Enum.finite_5.rec_finite_5", Net {atoms = {}, comb = ..., var = ...}),
     ("Enum.finite_5.case_finite_5", Net {atoms = {}, ...})},
   comb =
   Net {atoms = {}, comb = Net {atoms = {...}, ...}, var = Leaf [...]},
   var = Leaf []},
                                    var = Leaf []},
                               var = Leaf []},
                          var = Leaf []},
                     var = Leaf []},
                var = Leaf []},
           var =
           Leaf
            [{elhs = "%u. EX x y. u = (x, y) & ?P1 x y", extra = false, fo =
              false, lhs =
              Abs ("u", "?'a1 * ?'b1",
                Const ("HOL.Ex", "(?'a1 => bool) => bool") $
                  Abs ("x", "?'a1",
                    Const ("HOL.Ex", "...") $ Abs ("y", "...", ...))),
              name = "Product_Type.split_eta_SetCompr2", perm = false, thm =
              "%u. EX x y. u = (x, y) & ?P1 x y == %(x, y). ?P1 x y"},
             {elhs = "%u. EX x y. u = (x, y) & ?y (x, y)", extra = false,
              fo = true, lhs =
              Abs ("u", "?'a1 * ?'b1",
                Const ("HOL.Ex", "(?'a1 ... bool) => bool") $
                  Abs ("x", "?'a1",
                    Const ("HOL.Ex", "...") $ Abs ("y", ..., ...))),
              name = "Product_Type.split_eta_SetCompr", perm = false, thm =
              "%u. EX x y. u = (x, y) & ?y (x, y) == ?y"},
             {elhs = "%a. ?y ()", extra = false, fo = true, lhs =
              Abs ("", "unit",
                Var (("y", 0), "unit => ?'a1") $
                  Const ("Product_Type.Unity", "unit")),
              name = "Product_Type.unit_abs_eta_conv", perm = false, thm =
              "%a. ?y () == ?y"},
             {elhs = "%A f. Inf (f ` A)", extra = false, fo = true, lhs =
              Abs ("A", "?'a1 set",
                Abs ("f", "?'a1 => bool",
                  Const ("Complete_Lattices.Inf_class.Inf", "...") $
                    (Const ("...",
                            "(?'a1 => bool) => ?'a1 set => bool set") $
                      ... $ ...))),
              name = "Complete_Lattices.INF_bool_eq", perm = false, thm =
              "%A f. Inf (f ` A) == Ball"},
             {elhs = "%A f. Sup (f ` A)", extra = false, fo = true, lhs =
              Abs ("A", "?'a1 set",
                Abs ("f", "?'a1 ... bool",
                  Const ("...", ...) $ (... $ ... $ ...))),
              name = "Complete_Lattices.SUP_bool_eq", perm = false, thm =
              "%A f. Sup (f ... A) == Bex"}]}},
     {congs =
      ({((true, "HOL.If"),
          "?b == ?c ==> if ?b then ?x else ?y == if ?c then ?x else ?y"),
         ((true, "Set.Bex"),
           "[| ?A == ?B; !!x. x : ?B =simp=> ?P x == ?Q x |]
            ==> EX x:?A. ?P x == EX x:?B. ?Q x"),
         ((true, "Set.Ball"),
           "[| ?A == ?B; !!x. x : ?B =simp=> ?P x == ?Q x |]
            ==> ALL x:?A. ?P x == ALL x:?B. ?Q x"),
         ((true, "Set.image"),
           "[| ?M == ?N; !!x. x : ?N =simp=> ?f x == ?g x |]
            ==> ?f ` ?M == ?g ` ?N"),
         ((true, "HOL.implies"),
           "[| ?P == ?P'; ?P' ==> ?Q == ?Q' |]
            ==> ?P --> ?Q == ?P' --> ?Q'"),
         ((true, "HOL.NO_MATCH"),
           "NO_MATCH ?pat ?val == NO_MATCH ?pat ?val"),
         ((true, "HOL.ASSUMPTION"), "ASSUMPTION ?A == ASSUMPTION ?A"),
         ((true, "HOL.simp_implies"),
           "[| PROP ?P == PROP ?P'; PROP ?P' ==> PROP ?Q ... PROP ?Q' |]
            ==> (PROP ?P ... PROP ?Q) == (PROP ?P' ... PROP ?Q')"),
         ((true, "Nat.nat.case_nat"),
           "?M == ?M' ==>
            case ?M of ... ... ... | ... ... ... ==
            case ?M' of ... ... ... | ... ... ..."),
         ((true, "Num.num.case_num"),
           "?num ... ?num' ==>
            ... ... ... ... ... ... ... ... ...
            ... ... ... ... ... ... ... ..."),
         ((true, "List.successively"),
           "... ...... ... ... ==> ... ... ..."),
         ((true, "List.list.case_list"), "... ... ..."),
         ((true, "String.char.case_char"), "..."),
         ((true, "Sum_Type.sum.case_sum"), "..."),
         ((true, "Nitpick.word.case_word"), ...), ((true, "..."), ...),
         ...},
       [(true, "Power.power_class.power"),
        (true, "Phantom_Type.phantom.case_phantom"),
        (true, "Nitpick.word.case_word"),
        (true, "Nitpick.pair_box.case_pair_box"),
        (true, "Nitpick.fun_box.case_fun_box"),
        (true, "Record.tuple_isomorphism.case_tuple_isomorphism"),
        (true, "Extraction.sumbool.case_sumbool"),
        (true, "Quickcheck_Exhaustive.three_valued.case_three_valued"),
        (true, "Quickcheck_Exhaustive.unknown.case_unknown"),
        (true, "Quickcheck_Narrowing.cfun.case_cfun"),
        (true, "Quickcheck_Narrowing.ffun.case_ffun"),
        (true, "Quickcheck_Narrowing.property.case_property"),
        (true, "Quickcheck_Narrowing.narrowing_cons.case_narrowing_cons"),
        (true, "Quickcheck_Narrowing.narrowing_term.case_narrowing_term"),
        (true, "Quickcheck_Narrowing.narrowing_type.case_narrowing_type"),
        (true, "..."), ...]),
      loop_tacs =
      [("split asm HOL.If :: (HOL.bool, (_, (_, _)fun)fun)fun", fn),
       ("split asm Rings.zero_neq_one_class.of_bool :: (HOL.bool, _)fun",
        fn),
       ("split Rings.zero_neq_one_class.of_bool :: (HOL.bool, _)fun", fn),
       ("split HOL.If :: (HOL.bool, (_, (_, _)fun)fun)fun", fn)],
      mk_rews =
      {mk = fn, mk_cong = fn, mk_eq_True = fn, mk_sym = fn, reorient = fn},
      procs =
      Net {atoms = {}, comb =
           Net {atoms =
                {("HOL.Ex",
                   Net {atoms = {}, comb = Leaf [], var =
                        Leaf
                         [Proc
                           {lhs =
                            Const ("HOL.Ex", "(...) ... bool") $
                              Abs ("x", "?'a",
                                Var ((...), "?'a => bool") $ ...),
                            name = "HOL.defined_Ex", proc = fn, stamp =
                            Stamp 91198}]}),
                  ("HOL.All",
                    Net {atoms = {}, comb = Leaf [], var =
                         Leaf
                          [Proc
                            {lhs =
                             Const ("HOL.All", "... ... ...") $
                               Abs ("x", "...", ... $ ...),
                             name = "HOL.defined_All", proc = fn, stamp =
                             Stamp 91244}]}),
                  ("HOL.Not",
                    Net {atoms = {}, comb =
                         Net {atoms = {}, comb =
                              Net {atoms =
                                   {("Orderings.ord_class.less",
Net {atoms = {}, comb = Leaf [...], var = Net {atoms = {}, ...}})},
                                   comb = Leaf [], var = Leaf []},
                              var = Leaf []},
                         var = Leaf []}),
                  ("Nat.Suc",
                    Net {atoms = {}, comb =
                         Net {atoms = {}, comb =
                              Net {atoms =
                                   {("Groups.plus_class.plus",
Net {atoms = {}, comb = ..., var = ...})},
                                   comb = Leaf [], var = Leaf []},
                              var = Leaf []},
                         var = Leaf []}),
                  ("Pure.all",
                    Net {atoms = {}, comb = Leaf [], var =
                         Leaf
                          [Proc
                            {lhs =
                             Const ("...", ...) $ Abs ("...", "?'a", ...),
                             name = "HOL.defined_all", proc = fn, stamp =
                             Stamp 91290}]}),
                  ("Set.Collect",
                    Net {atoms = {}, comb = Leaf [], var =
                         Leaf
                          [Proc
                            {lhs =
                             Const ("...", "(?'a => bool) => ?'a set") $
                               ...,
                             name = "Product_Type.Collect_mem", proc = fn,
                             stamp = Stamp 616364},
                           Proc
                            {lhs = ... $ ..., name = "Set.defined_Collect",
                             proc = fn, stamp = Stamp 299868}]}),
                  ("List.list.set",
                    Net {atoms = {}, comb = Leaf [], var =
                         Leaf
                          [Proc
                            {lhs = ... $ ..., name =
                             "List.list_to_set_comprehension", proc = fn,
                             stamp = Stamp 2625594}]}),
                  ("Product_Type.prod.case_prod",
                    Net {atoms = {}, comb = Leaf [], var =
                         Leaf [Proc {lhs = ..., name = "...", ...}]})},
                comb =
                Net {atoms =
                     {("HOL.eq",
                        Net {atoms =
                             {("Groups.one_class.one",
                                Net {atoms = {}, comb = Leaf [], var =
                                     Leaf
[Proc
  {lhs = Const ("...", "?'a => ?'a => bool") $ ... $ ..., name =
   "Groups.reorient_one", proc = fn, stamp = Stamp 171260}]}),
                               ("Groups.zero_class.zero",
                                 Net {atoms = {}, comb = Leaf [], var =
Leaf
 [Proc
   {lhs = ... $ ... $ ..., name = "Groups.reorient_zero", proc = fn, stamp =
    Stamp 171216}]})},
                             comb =
                             Net {atoms =
                                  {("Nat.Suc",
                                     Net
{atoms = {}, comb = Leaf [], var =
 Net {atoms = {}, comb = Leaf [...], var = Leaf [...]}}),
                                    ("Num.numeral_class.numeral",
Net {atoms = {}, comb = Leaf [], var =
     Net {atoms = {}, comb = ..., var = ...}}),
                                    ("Groups.uminus_class.uminus",
Net {atoms = {}, comb = Net {atoms = {...}, ...}, var =
     Net {atoms = {}, ...}})},
                                  comb =
                                  Net {atoms =
 {("Groups.plus_class.plus",
    Net {atoms = {}, comb = Leaf [...], var = Net {atoms = {}, ...}}),
   ("Groups.minus_class.minus", Net {atoms = {}, comb = ..., var = ...}),
   ("Groups.times_class.times", Net {atoms = {}, ...})},
 comb = Leaf [], var = Leaf []},
                                  var = Leaf []},
                             var =
                             Net {atoms = {}, comb =
                                  Net {atoms =
 {("Nat.Suc", Net {atoms = {}, comb = Leaf [...], var = Leaf [...]}),
   ("Groups.uminus_class.uminus", Net {atoms = {}, comb = ..., var = ...})},
 comb =
 Net {atoms =
      {("Groups.plus_class.plus", Net {atoms = {}, ...}),
        ("Groups.minus_class.minus", ...), ...},
      comb = Leaf [], var = Leaf []},
 var = Leaf []},
                                  var =
                                  Leaf
                                   [Proc
                                     {lhs =
Const ("...", ...) $ Var ((...), "?'a") $ ..., name = "record_eq", proc =
fn, stamp = Stamp 4153886},
                                    Proc
                                     {lhs =
Const ("...", "?'a list => ?'a list => bool") $ ... $ ..., name =
"List.list_neq", proc = fn, stamp = Stamp 2645062},
                                    Proc
                                     {lhs = ... $ ... $ ..., name =
"List.list_eq", proc = fn, stamp = Stamp 2633172},
                                    Proc {lhs = ..., name = "...", ...},
                                    Proc {lhs = ..., ...}, ...]}}),
                       ("HOL.Let",
                         Net {atoms = {}, comb = Leaf [], var =
                              Net {atoms = {}, comb = Leaf [], var =
                                   Leaf
                                    [Proc
{lhs = Const ("...", "?'a => (?'a => ?'b) => ?'b") $ ... $ ..., name =
 "HOL.let_simp", proc = fn, stamp = Stamp 91526}]}}),
                       ("Set.Bex",
                         Net {atoms = {}, comb = Leaf [], var =
                              Net {atoms = {}, comb = Leaf [], var =
                                   Leaf
                                    [Proc
{lhs = ... $ ... $ ..., name = "Set.defined_Bex", proc = fn, stamp =
 Stamp 303020}]}}),
                       ("Pure.imp",
                         Net {atoms = {}, comb =
                              Net {atoms =
                                   {("HOL.Trueprop",
Net {atoms = {...}, comb = ..., var = ...})},
                                   comb = Leaf [], var = Leaf []},
                              var = Leaf []}),
                       ("Set.Ball",
                         Net {atoms = {}, comb = Leaf [], var =
                              Net {atoms = {}, comb = Leaf [], var =
                                   Leaf [Proc {lhs = ..., ...}]}}),
                       ("HOL.NO_MATCH",
                         Net {atoms = {}, comb = Leaf [], var =
                              Net {atoms = {}, comb = Leaf [...], var =
                                   Leaf [...]}}),
                       ("Rings.dvd_class.dvd",
                         Net {atoms = {}, comb =
                              Net {atoms = {}, comb = ..., var = ...}, var =
                              Net {atoms = {}, comb = ..., var = ...}}),
                       ("Groups.plus_class.plus",
                         Net {atoms = {}, comb = Leaf [...], var =
                              Net {atoms = {}, ...}}),
                       ("Lattices.inf_class.inf",
                         Net {atoms = {}, comb = ..., var = ...}),
                       ("Lattices.sup_class.sup", Net {atoms = {}, ...}),
                       ("Groups.minus_class.minus", ...), ...},
                     comb =
                     Net {atoms =
                          {("Fun.fun_upd",
                             Net {atoms = {}, comb =
                                  Net {atoms = {}, comb =
 Net {atoms = {}, comb = Net {atoms = {...}, comb = ..., var = ...}, var =
      Leaf []},
 var = Leaf []},
                                  var = Leaf []})},
                          comb = Leaf [], var = Leaf []},
                     var = Leaf []},
                var = Leaf []},
           var =
           Leaf
            [Proc
              {lhs = Var (("x", 0), "?'a"), name = "record", proc = fn,
               stamp = Stamp 4153844},
             Proc
              {lhs = Var (("x", 0), "?'a"), name = "record_upd", proc = fn,
               stamp = Stamp 4153854},
             Proc
              {lhs = Var (("x", 0), "unit"), name = "Product_Type.unit_eq",
               proc = fn, stamp = Stamp 562196}]},
      solvers =
      ([Solver {id = Stamp 1038750, name = "Rtranclp", solver = fn},
        Solver {id = Stamp 1038748, name = "Tranclp", solver = fn},
        Solver {id = Stamp 1038746, name = "Rtrancl", solver = fn},
        Solver {id = Stamp 1038744, name = "Trancl", solver = fn},
        Solver {id = Stamp 781564, name = "lin_arith", solver = fn},
        Solver {id = Stamp 132670, name = "Transitivity", solver = fn},
        Solver {id = Stamp 102528, name = "ASSUMPTION", solver = fn},
        Solver {id = Stamp 90936, name = "HOL unsafe", solver = fn}],
       [Solver {id = Stamp 90938, name = "HOL safe", solver = fn}]),
      subgoal_tac = fn, term_ord = fn}):
   simpset
val uint_arith_tacs = fn: Proof.context -> tactic list
val uint_arith_tac = fn: Proof.context -> int -> tactic
locale word_rotate
signature SMT_WORD =
  sig
    val add_word_shift': term * string -> Context.generic -> Context.generic
  end
structure SMT_Word: SMT_WORD
### theory "HOL-Library.Word"
### 4.865s elapsed time, 6.988s cpu time, 2.250s GC time
Loading theory "Word_Lib.More_Divides" (required by "Draft.Word_LemmasTemplates" via "Draft.Word_Lemmas" via "Word_Lib.More_Word")
Loading theory "Word_Lib.Signed_Words" (required by "Draft.Word_LemmasTemplates" via "Draft.Word_Lemmas")
Loading theory "Word_Lib.Type_Syntax" (required by "Draft.Word_LemmasTemplates" via "Draft.Word_Lemmas")
Loading theory "Word_Lib.Signed_Division_Word" (required by "Draft.Word_LemmasTemplates" via "Draft.Word_Lemmas")
structure Word_Syntax:
  sig
    val show_word_types: bool Config.T
    val tr': string -> Proof.context -> typ -> term list -> term
  end
instantiation
  signed :: (len0) len0
  len_of_signed == len_of :: 'a signed itself => nat
### theory "Word_Lib.Type_Syntax"
### 0.062s elapsed time, 0.306s cpu time, 0.000s GC time
### theory "Word_Lib.Signed_Words"
### 0.115s elapsed time, 0.495s cpu time, 0.080s GC time
### theory "Word_Lib.More_Divides"
### 0.167s elapsed time, 0.591s cpu time, 0.080s GC time
Loading theory "Word_Lib.More_Word" (required by "Draft.Word_LemmasTemplates" via "Draft.Word_Lemmas")
instantiation
  word :: (len) signed_division
  signed_divide_word == signed_divide :: 'a word => 'a word => 'a word
  signed_modulo_word == signed_modulo :: 'a word => 'a word => 'a word
### theory "Word_Lib.Signed_Division_Word"
### 0.363s elapsed time, 0.985s cpu time, 0.080s GC time
### theory "Word_Lib.More_Word"
### 0.966s elapsed time, 1.298s cpu time, 0.178s GC time
Loading theory "Word_Lib.Bit_Shifts_Infix_Syntax" (required by "Draft.Word_LemmasTemplates" via "Draft.Word_Lemmas" via "Word_Lib.Most_significant_bit")
Loading theory "Word_Lib.Enumeration_Word" (required by "Draft.Word_LemmasTemplates" via "Draft.Word_Lemmas")
class semiring_bit_operations = semiring_bits +
  fixes "and" :: "'a => 'a => 'a"
    and or :: "'a => 'a => 'a"
    and xor :: "'a => 'a => 'a"
    and mask :: "nat => 'a"
    and set_bit :: "nat => 'a => 'a"
    and unset_bit :: "nat => 'a => 'a"
    and flip_bit :: "nat => 'a => 'a"
    and push_bit :: "nat => 'a => 'a"
    and drop_bit :: "nat => 'a => 'a"
    and take_bit :: "nat => 'a => 'a"
  assumes "bit_and_iff": "!!a b n. bit (and a b) n = (bit a n & bit b n)"
    and "bit_or_iff": "!!a b n. bit (or a b) n = (bit a n | bit b n)"
    and "bit_xor_iff": "!!a b n. bit (xor a b) n = (bit a n ~= bit b n)"
    and "mask_eq_exp_minus_1": "!!n. mask n = (2::'a) ^ n - (1::'a)"
    and "set_bit_eq_or": "!!n a. set_bit n a = or a (push_bit n (1::'a))"
    and
    "bit_unset_bit_iff":
      "!!m a n. bit (unset_bit m a) n = (bit a n & m ~= n)"
    and
    "flip_bit_eq_xor": "!!n a. flip_bit n a = xor a (push_bit n (1::'a))"
    and "push_bit_eq_mult": "!!n a. push_bit n a = a * (2::'a) ^ n"
    and "drop_bit_eq_div": "!!n a. drop_bit n a = a div (2::'a) ^ n"
    and "take_bit_eq_mod": "!!n a. take_bit n a = a mod (2::'a) ^ n"
instantiation
  word :: (len) enumeration_both
  enum_alt_word == enum_alt :: nat => 'a word option
class semiring_bit_operations = semiring_bits +
  fixes "and" :: "'a => 'a => 'a"
    and or :: "'a => 'a => 'a"
    and xor :: "'a => 'a => 'a"
    and mask :: "nat => 'a"
    and set_bit :: "nat => 'a => 'a"
    and unset_bit :: "nat => 'a => 'a"
    and flip_bit :: "nat => 'a => 'a"
    and push_bit :: "nat => 'a => 'a"
    and drop_bit :: "nat => 'a => 'a"
    and take_bit :: "nat => 'a => 'a"
  assumes "bit_and_iff": "!!a b n. bit (and a b) n = (bit a n & bit b n)"
    and "bit_or_iff": "!!a b n. bit (or a b) n = (bit a n | bit b n)"
    and "bit_xor_iff": "!!a b n. bit (xor a b) n = (bit a n ~= bit b n)"
    and "mask_eq_exp_minus_1": "!!n. mask n = (2::'a) ^ n - (1::'a)"
    and "set_bit_eq_or": "!!n a. set_bit n a = or a (push_bit n (1::'a))"
    and
    "bit_unset_bit_iff":
      "!!m a n. bit (unset_bit m a) n = (bit a n & m ~= n)"
    and
    "flip_bit_eq_xor": "!!n a. flip_bit n a = xor a (push_bit n (1::'a))"
    and "push_bit_eq_mult": "!!n a. push_bit n a = a * (2::'a) ^ n"
    and "drop_bit_eq_div": "!!n a. drop_bit n a = a div (2::'a) ^ n"
    and "take_bit_eq_mod": "!!n a. take_bit n a = a mod (2::'a) ^ n"
### theory "Word_Lib.Enumeration_Word"
### 0.383s elapsed time, 0.800s cpu time, 0.071s GC time
class ring_bit_operations = semiring_bit_operations + ring_parity +
  fixes not :: "'a => 'a"
  assumes
    "bit_not_iff_eq":
      "!!a n. bit (not a) n = ((2::'a) ^ n ~= (0::'a) & ~ bit a n)"
  assumes "minus_eq_not_minus_1": "!!a. - a = not (a - (1::'a))"
class ring_bit_operations = semiring_bit_operations + ring_parity +
  fixes not :: "'a => 'a"
  assumes
    "bit_not_iff_eq":
      "!!a n. bit (not a) n = ((2::'a) ^ n ~= (0::'a) & ~ bit a n)"
  assumes "minus_eq_not_minus_1": "!!a. - a = not (a - (1::'a))"
### theory "Word_Lib.Bit_Shifts_Infix_Syntax"
### 0.775s elapsed time, 1.244s cpu time, 0.140s GC time
Loading theory "Word_Lib.Aligned" (required by "Draft.Word_LemmasTemplates" via "Draft.Word_Lemmas")
Loading theory "Word_Lib.Most_significant_bit" (required by "Draft.Word_LemmasTemplates" via "Draft.Word_Lemmas")
class msb = type +
  fixes msb :: "'a => bool"
instantiation
  int :: msb
  msb_int == msb :: int => bool
instantiation
  word :: (len) msb
  msb_word == msb :: 'a word => bool
### theory "Word_Lib.Most_significant_bit"
### 0.115s elapsed time, 0.258s cpu time, 0.060s GC time
### theory "Word_Lib.Aligned"
### 0.234s elapsed time, 0.370s cpu time, 0.060s GC time
Loading theory "Word_Lib.Word_EqI" (required by "Draft.Word_LemmasTemplates" via "Draft.Word_Lemmas")
### theory "Word_Lib.Word_EqI"
### 1.178s elapsed time, 1.214s cpu time, 0.049s GC time
Loading theory "Draft.Word_Lemmas" (required by "Draft.Word_LemmasTemplates")
### theory "Draft.Word_Lemmas"
### 1.089s elapsed time, 1.141s cpu time, 0.071s GC time
Loading theory "Draft.Word_LemmasTemplates"
val templateLemmas =
   [("Word_Lemmas.shiftl0", "?x << 0 = ?x",
     template_equation
      (template_app
        (template_app (template_hole 1, template_var 0), template_hole 0),
       template_var 0)),
    ("Word_Lemmas.shiftr_x_0", "?x >> 0 = ?x",
     template_equation
      (template_app
        (template_app (template_hole 1, template_var 0), template_hole 0),
       template_var 0)),
    ("Word_Lemmas.cast_simps",
     "SCAST(?'a signed \<rightarrow> ?'a) (word_of_nat ?x) =
      word_of_nat ?x",
     template_equation
      (template_app
        (template_hole 2, template_app (template_hole 1, template_var 0)),
       template_app (template_hole 0, template_var 0))),
    ("Word_Lemmas.shiftr_mask", "mask ?m >> ?m = 0",
     template_equation
      (template_app
        (template_app
          (template_hole 2, template_app (template_hole 1, template_var 0)),
         template_var 0),
       template_hole 0)),
    ("Word_Lemmas.of_int_sint_scast",
     "word_of_int (sint ?x) = SCAST(?'a \<rightarrow> ?'b) ?x",
     template_equation
      (template_app
        (template_hole 2, template_app (template_hole 1, template_var 0)),
       template_app (template_hole 0, template_var 0))),
    ("Word_Lemmas.of_int_uint_ucast",
     "word_of_int (uint ?x) = UCAST(?'a \<rightarrow> ?'b) ?x",
     template_equation
      (template_app
        (template_hole 2, template_app (template_hole 1, template_var 0)),
       template_app (template_hole 0, template_var 0))),
    ("Word_Lemmas.scast_of_nat_to_signed",
     "SCAST(?'a \<rightarrow> ?'a signed) (word_of_nat ?x) =
      word_of_nat ?x",
     template_equation
      (template_app
        (template_hole 2, template_app (template_hole 1, template_var 0)),
       template_app (template_hole 0, template_var 0))),
    ("Word_Lemmas.unat_ucast_le",
     "unat (UCAST(?'a \<rightarrow> ?'b) ?x) <= unat ?x",
     template_inequation
      (less_equals,
       template_app
        (template_hole 2, template_app (template_hole 1, template_var 0)),
       template_app (template_hole 0, template_var 0))),
    ("Word_Lemmas.sshiftr_n1", "- 1 >>> ?n = - 1",
     template_equation
      (template_app
        (template_app
          (template_hole 2,
           template_app (template_hole 1, template_hole 0)),
         template_var 0),
       template_app (template_hole 1, template_hole 0))),
    ("Word_Lemmas.mask_len_id", "and ?x (mask LENGTH(?'a)) = ?x",
     template_equation
      (template_app
        (template_app (template_hole 3, template_var 0),
         template_app
          (template_hole 2,
           template_app (template_hole 1, template_hole 0))),
       template_var 0)),
    ("Word_Lemmas.cast_simps", "is_down ?c = (LENGTH(?'b) <= LENGTH(?'a))",
     template_equation
      (template_app (template_hole 5, template_var 0),
       template_app
        (template_app
          (template_hole 4,
           template_app (template_hole 3, template_hole 2)),
         template_app (template_hole 1, template_hole 0)))),
    ("Word_Lemmas.cast_simps", "is_up ?c = (LENGTH(?'a) <= LENGTH(?'b))",
     template_equation
      (template_app (template_hole 5, template_var 0),
       template_app
        (template_app
          (template_hole 4,
           template_app (template_hole 3, template_hole 2)),
         template_app (template_hole 1, template_hole 0)))),
    ("Word_Lemmas.mask_eq", "mask ?n = (1 << ?n) - 1",
     template_equation
      (template_app (template_hole 3, template_var 0),
       template_app
        (template_app
          (template_hole 2,
           template_app
            (template_app (template_hole 1, template_hole 0),
             template_var 0)),
         template_hole 0))),
    ("Word_Lemmas.mul_not_mask_eq_neg_shiftl", "not (mask ?n) = - 1 << ?n",
     template_equation
      (template_app
        (template_hole 4, template_app (template_hole 3, template_var 0)),
       template_app
        (template_app
          (template_hole 2,
           template_app (template_hole 1, template_hole 0)),
         template_var 0))),
    ("Word_Lemmas.slice_shiftr",
     "slice ?n ?w = UCAST(?'b \<rightarrow> ?'a) (?w >> ?n)",
     template_equation
      (template_app
        (template_app (template_hole 2, template_var 1), template_var 0),
       template_app
        (template_hole 1,
         template_app
          (template_app (template_hole 0, template_var 0),
           template_var 1)))),
    ("Word_Lemmas.scast_bit_test",
     "SCAST(?'a signed \<rightarrow> ?'a) (1 << ?n) = 1 << ?n",
     template_equation
      (template_app
        (template_hole 4,
         template_app
          (template_app (template_hole 3, template_hole 2),
           template_var 0)),
       template_app
        (template_app (template_hole 1, template_hole 0), template_var 0))),
    ("Word_Lemmas.shiftl_mask_is_0", "and (?x << ?n) (mask ?n) = 0",
     template_equation
      (template_app
        (template_app
          (template_hole 3,
           template_app
            (template_app (template_hole 2, template_var 1),
             template_var 0)),
         template_app (template_hole 1, template_var 0)),
       template_hole 0)),
    ("Word_Lemmas.shiftr1_unfold", "?x div (2::?'a) = ?x >> 1",
     template_equation
      (template_app
        (template_app (template_hole 5, template_var 0),
         template_app
          (template_hole 4,
           template_app (template_hole 3, template_hole 2))),
       template_app
        (template_app (template_hole 1, template_var 0), template_hole 0))),
    ("Word_Lemmas.shiftl_rev",
     "?w << ?n = word_reverse (word_reverse ?w >> ?n)",
     template_equation
      (template_app
        (template_app (template_hole 2, template_var 1), template_var 0),
       template_app
        (template_hole 1,
         template_app
          (template_app
            (template_hole 0,
             template_app (template_hole 1, template_var 1)),
           template_var 0)))),
    ("Word_Lemmas.shiftl1_is_mult", "?x << 1 = ?x * 2",
     template_equation
      (template_app
        (template_app (template_hole 5, template_var 0), template_hole 4),
       template_app
        (template_app (template_hole 3, template_var 0),
         template_app
          (template_hole 2,
           template_app (template_hole 1, template_hole 0))))),
    ("Word_Lemmas.shiftr_rev",
     "?w >> ?n = word_reverse (word_reverse ?w << ?n)",
     template_equation
      (template_app
        (template_app (template_hole 2, template_var 1), template_var 0),
       template_app
        (template_hole 1,
         template_app
          (template_app
            (template_hole 0,
             template_app (template_hole 1, template_var 1)),
           template_var 0)))),
    ("Word_Lemmas.shiftr1_is_div_2", "?x >> 1 = ?x div 2",
     template_equation
      (template_app
        (template_app (template_hole 5, template_var 0), template_hole 4),
       template_app
        (template_app (template_hole 3, template_var 0),
         template_app
          (template_hole 2,
           template_app (template_hole 1, template_hole 0))))),
    ("Word_Lemmas.rev_shiftl",
     "word_reverse ?w << ?n = word_reverse (?w >> ?n)",
     template_equation
      (template_app
        (template_app
          (template_hole 2, template_app (template_hole 1, template_var 1)),
         template_var 0),
       template_app
        (template_hole 1,
         template_app
          (template_app (template_hole 0, template_var 1),
           template_var 0)))),
    ("Word_Lemmas.rev_shiftr",
     "word_reverse ?w >> ?n = word_reverse (?w << ?n)",
     template_equation
      (template_app
        (template_app
          (template_hole 2, template_app (template_hole 1, template_var 1)),
         template_var 0),
       template_app
        (template_hole 1,
         template_app
          (template_app (template_hole 0, template_var 1),
           template_var 0)))),
    ("Word_Lemmas.minus_one_shift", "- (1 << ?n) = - 1 << ?n",
     template_equation
      (template_app
        (template_hole 2,
         template_app
          (template_app (template_hole 1, template_hole 0),
           template_var 0)),
       template_app
        (template_app
          (template_hole 1,
           template_app (template_hole 2, template_hole 0)),
         template_var 0))),
    ("Word_Lemmas.scast_ucast_add_one",
     "SCAST(?'a signed \<rightarrow> ?'a)
       (UCAST(?'a \<rightarrow> ?'a signed) ?x + 1) =
      ?x + 1",
     template_equation
      (template_app
        (template_hole 5,
         template_app
          (template_app
            (template_hole 4,
             template_app (template_hole 3, template_var 0)),
           template_hole 2)),
       template_app
        (template_app (template_hole 1, template_var 0), template_hole 0))),
    ("Word_Lemmas.upto_enum_step_subset",
     "set [?x , ?y .e. ?z] <= {?x..?z}",
     template_inequation
      (less_equals,
       template_app
        (template_hole 2,
         template_app
          (template_app
            (template_app (template_hole 1, template_var 2),
             template_var 1),
           template_var 0)),
       template_app
        (template_app (template_hole 0, template_var 2), template_var 0))),
    ("Word_Lemmas.is_aligned_ucastI",
     "is_aligned ?w ?n ==> is_aligned (UCAST(?'a \<rightarrow> ?'b) ?w) ?n",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 2, template_var 1),
              template_var 0)
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 1,
               template_app (template_hole 0, template_var 1)),
             template_var 0)
           ))),
    ("Word_Lemmas.unat_ucast_eq_unat_and_mask",
     "unat (UCAST(?'b \<rightarrow> ?'a) ?w) =
      unat (and ?w (mask LENGTH(?'a)))",
     template_equation
      (template_app
        (template_hole 6, template_app (template_hole 5, template_var 0)),
       template_app
        (template_hole 4,
         template_app
          (template_app (template_hole 3, template_var 0),
           template_app
            (template_hole 2,
             template_app (template_hole 1, template_hole 0)))))),
    ("Word_Lemmas.unat_ucast_mask",
     "unat (UCAST(?'aa \<rightarrow> ?'a) ?a) =
      unat (and ?a (mask LENGTH(?'a)))",
     template_equation
      (template_app
        (template_hole 6, template_app (template_hole 5, template_var 0)),
       template_app
        (template_hole 4,
         template_app
          (template_app (template_hole 3, template_var 0),
           template_app
            (template_hole 2,
             template_app (template_hole 1, template_hole 0)))))),
    ("Word_Lemmas.of_nat_eq_signed_scast",
     "(word_of_nat ?x = ?y) =
      (word_of_nat ?x = SCAST(?'a signed \<rightarrow> ?'a) ?y)",
     template_bimplication
      (template_equation
        (template_app (template_hole 3, template_var 1), template_var 0),
       template_equation
        (template_app (template_hole 1, template_var 1),
         template_app (template_hole 0, template_var 0)))),
    ("Word_Lemmas.le_mask_iff", "(?w <= mask ?n) = (?w >> ?n = 0)",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 4, template_var 1),
              template_app (template_hole 3, template_var 0))
            )],
       template_equation
        (template_app
          (template_app (template_hole 1, template_var 1), template_var 0),
         template_hole 0))),
    ("Word_Lemmas.shiftr_1", "1 >> ?n = (if ?n = 0 then 1 else 0)",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 5, template_hole 4),
              template_var 0)
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_app
                (template_hole 3,
                 template_app
                  (template_app (template_hole 2, template_var 0),
                   template_hole 1)),
               template_hole 4),
             template_hole 0)
           ))),
    ("Word_Lemmas.of_bool_nth", "of_bool (bit ?x ?v) = and (?x >> ?v) 1",
     template_equation
      (template_app
        (template_hole 4,
         template_app
          (template_app (template_hole 3, template_var 1), template_var 0)),
       template_app
        (template_app
          (template_hole 2,
           template_app
            (template_app (template_hole 1, template_var 1),
             template_var 0)),
         template_hole 0))),
    ("Word_Lemmas.mask_of_mask",
     "and (mask ?n) (mask ?m) = mask (min ?m ?n)",
     template_equation
      (template_app
        (template_app
          (template_hole 2, template_app (template_hole 1, template_var 1)),
         template_app (template_hole 1, template_var 0)),
       template_app
        (template_hole 1,
         template_app
          (template_app (template_hole 0, template_var 0),
           template_var 1)))),
    ("Word_Lemmas.ucast_minus",
     "UCAST(?'a \<rightarrow> ?'a signed) (?a - ?b) =
      UCAST(?'a \<rightarrow> ?'a signed) ?a -
      UCAST(?'a \<rightarrow> ?'a signed) ?b",
     template_equation
      (template_app
        (template_hole 2,
         template_app
          (template_app (template_hole 1, template_var 1), template_var 0)),
       template_app
        (template_app
          (template_hole 0, template_app (template_hole 2, template_var 1)),
         template_app (template_hole 2, template_var 0)))),
    ("Word_Lemmas.ucast_add",
     "UCAST(?'a \<rightarrow> ?'a signed) (?a + ?b) =
      UCAST(?'a \<rightarrow> ?'a signed) ?a +
      UCAST(?'a \<rightarrow> ?'a signed) ?b",
     template_equation
      (template_app
        (template_hole 2,
         template_app
          (template_app (template_hole 1, template_var 1), template_var 0)),
       template_app
        (template_app
          (template_hole 0, template_app (template_hole 2, template_var 1)),
         template_app (template_hole 2, template_var 0)))),
    ("Word_Lemmas.unat_plus_gt", "unat (?a + ?b) <= unat ?a + unat ?b",
     template_inequation
      (less_equals,
       template_app
        (template_hole 2,
         template_app
          (template_app (template_hole 1, template_var 1), template_var 0)),
       template_app
        (template_app
          (template_hole 0, template_app (template_hole 2, template_var 1)),
         template_app (template_hole 2, template_var 0)))),
    ("Word_Lemmas.scast_down_wi",
     "is_down SCAST(?'a \<rightarrow> ?'b) ==>
      SCAST(?'a \<rightarrow> ?'b) (word_of_int ?x) = word_of_int ?x",
     template_implication
      ([template_predicate
         (template_app (template_hole 4, template_hole 3))],
       template_equation
        (template_app
          (template_hole 3, template_app (template_hole 1, template_var 0)),
         template_app (template_hole 0, template_var 0)))),
    ("Word_Lemmas.of_nat_ucast",
     "is_down UCAST(?'a \<rightarrow> ?'b) ==>
      word_of_nat ?n = UCAST(?'a \<rightarrow> ?'b) (word_of_nat ?n)",
     template_implication
      ([template_predicate
         (template_app (template_hole 4, template_hole 3))],
       template_equation
        (template_app (template_hole 1, template_var 0),
         template_app
          (template_hole 3,
           template_app (template_hole 0, template_var 0))))),
    ("Word_Lemmas.cast_simps",
     "is_down UCAST(?'a \<rightarrow> ?'b) ==>
      UCAST(?'a \<rightarrow> ?'b) (word_of_int ?x) = word_of_int ?x",
     template_implication
      ([template_predicate
         (template_app (template_hole 4, template_hole 3))],
       template_equation
        (template_app
          (template_hole 3, template_app (template_hole 1, template_var 0)),
         template_app (template_hole 0, template_var 0)))),
    ("Word_Lemmas.cast_simps",
     "is_down UCAST(?'a \<rightarrow> ?'b) ==>
      UCAST(?'a \<rightarrow> ?'b) (word_of_nat ?n) = word_of_nat ?n",
     template_implication
      ([template_predicate
         (template_app (template_hole 4, template_hole 3))],
       template_equation
        (template_app
          (template_hole 3, template_app (template_hole 1, template_var 0)),
         template_app (template_hole 0, template_var 0)))),
    ("Word_Lemmas.scast_scast_a",
     "is_down SCAST(?'b \<rightarrow> ?'c) ==>
      SCAST(?'b \<rightarrow> ?'c) (SCAST(?'a \<rightarrow> ?'b) ?a) =
      SCAST(?'a \<rightarrow> ?'c) ?a",
     template_implication
      ([template_predicate
         (template_app (template_hole 4, template_hole 3))],
       template_equation
        (template_app
          (template_hole 3, template_app (template_hole 1, template_var 0)),
         template_app (template_hole 0, template_var 0)))),
    ("Word_Lemmas.ucast_ucast_a",
     "is_down UCAST(?'b \<rightarrow> ?'c) ==>
      UCAST(?'b \<rightarrow> ?'c) (UCAST(?'a \<rightarrow> ?'b) ?a) =
      UCAST(?'a \<rightarrow> ?'c) ?a",
     template_implication
      ([template_predicate
         (template_app (template_hole 4, template_hole 3))],
       template_equation
        (template_app
          (template_hole 3, template_app (template_hole 1, template_var 0)),
         template_app (template_hole 0, template_var 0)))),
    ("Word_Lemmas.cast_simps",
     "is_up SCAST(?'a \<rightarrow> ?'b) ==>
      sint (SCAST(?'a \<rightarrow> ?'b) ?w) = sint ?w",
     template_implication
      ([template_predicate
         (template_app (template_hole 4, template_hole 3))],
       template_equation
        (template_app
          (template_hole 1, template_app (template_hole 3, template_var 0)),
         template_app (template_hole 0, template_var 0)))),
    ("Word_Lemmas.scast_scast_b",
     "is_up SCAST(?'a \<rightarrow> ?'b) ==>
      SCAST(?'b \<rightarrow> ?'c) (SCAST(?'a \<rightarrow> ?'b) ?a) =
      SCAST(?'a \<rightarrow> ?'c) ?a",
     template_implication
      ([template_predicate
         (template_app (template_hole 4, template_hole 3))],
       template_equation
        (template_app
          (template_hole 1, template_app (template_hole 3, template_var 0)),
         template_app (template_hole 0, template_var 0)))),
    ("Word_Lemmas.cast_simps",
     "is_up UCAST(?'a \<rightarrow> ?'b) ==>
      uint (UCAST(?'a \<rightarrow> ?'b) ?w) = uint ?w",
     template_implication
      ([template_predicate
         (template_app (template_hole 4, template_hole 3))],
       template_equation
        (template_app
          (template_hole 1, template_app (template_hole 3, template_var 0)),
         template_app (template_hole 0, template_var 0)))),
    ("Word_Lemmas.ucast_ucast_b",
     "is_up UCAST(?'a \<rightarrow> ?'b) ==>
      UCAST(?'b \<rightarrow> ?'c) (UCAST(?'a \<rightarrow> ?'b) ?a) =
      UCAST(?'a \<rightarrow> ?'c) ?a",
     template_implication
      ([template_predicate
         (template_app (template_hole 4, template_hole 3))],
       template_equation
        (template_app
          (template_hole 1, template_app (template_hole 3, template_var 0)),
         template_app (template_hole 0, template_var 0)))),
    ("Word_Lemmas.less_diff_gt0", "?a < ?b ==> 0 < ?b - ?a",
     template_implication
      ([template_inequation (less_than, template_var 1, template_var 0)],
       template_inequation
        (less_than, template_hole 1,
         template_app
          (template_app (template_hole 0, template_var 0),
           template_var 1)))),
    ("Word_Lemmas.word_and_less'", "?b < ?c ==> and ?a ?b < ?c",
     template_implication
      ([template_inequation (less_than, template_var 2, template_var 1)],
       template_inequation
        (less_than,
         template_app
          (template_app (template_hole 0, template_var 0), template_var 2),
         template_var 1))),
    ("Word_Lemmas.shiftr_less", "?w < ?k ==> ?w >> ?n < ?k",
     template_implication
      ([template_inequation (less_than, template_var 2, template_var 1)],
       template_inequation
        (less_than,
         template_app
          (template_app (template_hole 0, template_var 2), template_var 0),
         template_var 1))),
    ("Word_Lemmas.word_upto_Nil", "?y < ?x ==> [?x .e. ?y] = []",
     template_implication
      ([template_inequation (less_than, template_var 1, template_var 0)],
       template_equation
        (template_app
          (template_app (template_hole 1, template_var 0), template_var 1),
         template_hole 0))),
    ("Word_Lemmas.mask_mono", "?sz' <= ?sz ==> mask ?sz' <= mask ?sz",
     template_implication
      ([template_inequation (less_equals, template_var 1, template_var 0)],
       template_inequation
        (less_equals, template_app (template_hole 0, template_var 1),
         template_app (template_hole 0, template_var 0)))),
    ("Word_Lemmas.word_and_le'", "?b <= ?c ==> and ?a ?b <= ?c",
     template_implication
      ([template_inequation (less_equals, template_var 2, template_var 1)],
       template_inequation
        (less_equals,
         template_app
          (template_app (template_hole 0, template_var 0), template_var 2),
         template_var 1))),
    ("Word_Lemmas.word_eq_zeroI", "?a <= ?a - 1 ==> ?a = 0",
     template_implication
      ([template_inequation
         (less_equals, template_var 0,
          template_app
           (template_app (template_hole 3, template_var 0),
            template_hole 2))],
       template_equation (template_var 0, template_hole 0))),
    ("Word_Lemmas.is_aligned_neg_mask_eq'",
     "is_aligned ?ptr ?sz = (and ?ptr (not (mask ?sz)) = ?ptr)",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 4, template_var 1),
              template_var 0)
            )],
       template_equation
        (template_app
          (template_app (template_hole 2, template_var 1),
           template_app
            (template_hole 1,
             template_app (template_hole 0, template_var 0))),
         template_var 1))),
    ("Word_Lemmas.bit_shiftr_word_iff",
     "bit (?w >> ?m) ?n = bit ?w (?m + ?n)",
     template_equation
      (template_app
        (template_app
          (template_hole 2,
           template_app
            (template_app (template_hole 1, template_var 2),
             template_var 1)),
         template_var 0),
       template_app
        (template_app (template_hole 2, template_var 2),
         template_app
          (template_app (template_hole 0, template_var 1),
           template_var 0)))),
    ("Word_Lemmas.nth_shiftr", "bit (?w >> ?m) ?n = bit ?w (?n + ?m)",
     template_equation
      (template_app
        (template_app
          (template_hole 2,
           template_app
            (template_app (template_hole 1, template_var 2),
             template_var 1)),
         template_var 0),
       template_app
        (template_app (template_hole 2, template_var 2),
         template_app
          (template_app (template_hole 0, template_var 0),
           template_var 1)))),
    ("Word_Lemmas.shiftl_t2n", "?w << ?n = 2 ^ ?n * ?w",
     template_equation
      (template_app
        (template_app (template_hole 5, template_var 1), template_var 0),
       template_app
        (template_app
          (template_hole 4,
           template_app
            (template_app
              (template_hole 3,
               template_app
                (template_hole 2,
                 template_app (template_hole 1, template_hole 0))),
             template_var 0)),
         template_var 1))),
    ("Word_Lemmas.shiftr_div_2n_w", "?w >> ?n = ?w div 2 ^ ?n",
     template_equation
      (template_app
        (template_app (template_hole 5, template_var 1), template_var 0),
       template_app
        (template_app (template_hole 4, template_var 1),
         template_app
          (template_app
            (template_hole 3,
             template_app
              (template_hole 2,
               template_app (template_hole 1, template_hole 0))),
           template_var 0)))),
    ("Word_Lemmas.and_not_mask", "and ?w (not (mask ?n)) = ?w >> ?n << ?n",
     template_equation
      (template_app
        (template_app (template_hole 4, template_var 1),
         template_app
          (template_hole 3,
           template_app (template_hole 2, template_var 0))),
       template_app
        (template_app
          (template_hole 1,
           template_app
            (template_app (template_hole 0, template_var 1),
             template_var 0)),
         template_var 0))),
    ("Word_Lemmas.shiftl_shiftl", "?a << ?b << ?c = ?a << ?b + ?c",
     template_equation
      (template_app
        (template_app
          (template_hole 1,
           template_app
            (template_app (template_hole 1, template_var 2),
             template_var 1)),
         template_var 0),
       template_app
        (template_app (template_hole 1, template_var 2),
         template_app
          (template_app (template_hole 0, template_var 1),
           template_var 0)))),
    ("Word_Lemmas.shiftr_shiftr", "?a >> ?b >> ?c = ?a >> ?b + ?c",
     template_equation
      (template_app
        (template_app
          (template_hole 1,
           template_app
            (template_app (template_hole 1, template_var 2),
             template_var 1)),
         template_var 0),
       template_app
        (template_app (template_hole 1, template_var 2),
         template_app
          (template_app (template_hole 0, template_var 1),
           template_var 0)))),
    ("Word_Lemmas.mask_shift", "and ?x (not (mask ?y)) >> ?y = ?x >> ?y",
     template_equation
      (template_app
        (template_app
          (template_hole 3,
           template_app
            (template_app (template_hole 2, template_var 1),
             template_app
              (template_hole 1,
               template_app (template_hole 0, template_var 0)))),
         template_var 0),
       template_app
        (template_app (template_hole 3, template_var 1), template_var 0))),
    ("Word_Lemmas.shiftr_shiftl_shiftr", "?x >> ?a << ?a >> ?a = ?x >> ?a",
     template_equation
      (template_app
        (template_app
          (template_hole 1,
           template_app
            (template_app
              (template_hole 0,
               template_app
                (template_app (template_hole 1, template_var 1),
                 template_var 0)),
             template_var 0)),
         template_var 0),
       template_app
        (template_app (template_hole 1, template_var 1), template_var 0))),
    ("Word_Lemmas.ucast_NOT",
     "UCAST(?'a \<rightarrow> ?'b) (not ?x) =
      and (not (UCAST(?'a \<rightarrow> ?'b) ?x)) (mask LENGTH(?'a))",
     template_equation
      (template_app
        (template_hole 6, template_app (template_hole 5, template_var 0)),
       template_app
        (template_app
          (template_hole 4,
           template_app
            (template_hole 3,
             template_app (template_hole 6, template_var 0))),
         template_app
          (template_hole 2,
           template_app (template_hole 1, template_hole 0))))),
    ("Word_Lemmas.ucast_NOT_down",
     "is_down UCAST(?'a \<rightarrow> ?'b) ==>
      UCAST(?'a \<rightarrow> ?'b) (not ?x) =
      not (UCAST(?'a \<rightarrow> ?'b) ?x)",
     template_implication
      ([template_predicate
         (template_app (template_hole 4, template_hole 3))],
       template_equation
        (template_app
          (template_hole 3, template_app (template_hole 1, template_var 0)),
         template_app
          (template_hole 0,
           template_app (template_hole 3, template_var 0))))),
    ("Word_Lemmas.shiftr_mask_le", "?n <= ?m ==> mask ?n >> ?m = 0",
     template_implication
      ([template_inequation (less_equals, template_var 1, template_var 0)],
       template_equation
        (template_app
          (template_app
            (template_hole 2,
             template_app (template_hole 1, template_var 1)),
           template_var 0),
         template_hole 0))),
    ("Word_Lemmas.shiftr1_lt", "?x ~= 0 ==> ?x >> 1 < ?x",
     template_implication
      ([template_negation
         (template_equation (template_var 0, template_hole 3))],
       template_inequation
        (less_than,
         template_app
          (template_app (template_hole 1, template_var 0), template_hole 0),
         template_var 0))),
    ("Word_Lemmas.shiftl_zero_size", "size ?x <= ?n ==> ?x << ?n = 0",
     template_implication
      ([template_inequation
         (less_equals, template_app (template_hole 3, template_var 1),
          template_var 0)],
       template_equation
        (template_app
          (template_app (template_hole 1, template_var 1), template_var 0),
         template_hole 0))),
    ("Word_Lemmas.shiftr_zero_size", "size ?x <= ?n ==> ?x >> ?n = 0",
     template_implication
      ([template_inequation
         (less_equals, template_app (template_hole 3, template_var 1),
          template_var 0)],
       template_equation
        (template_app
          (template_app (template_hole 1, template_var 1), template_var 0),
         template_hole 0))),
    ("Word_Lemmas.shiftr_eq_0", "LENGTH(?'a) <= ?n ==> ?w >> ?n = 0",
     template_implication
      ([template_inequation
         (less_equals, template_app (template_hole 4, template_hole 3),
          template_var 1)],
       template_equation
        (template_app
          (template_app (template_hole 1, template_var 0), template_var 1),
         template_hole 0))),
    ("Word_Lemmas.ucast_leq_mask",
     "LENGTH(?'a) <= ?n ==> UCAST(?'a \<rightarrow> ?'b) ?x <= mask ?n",
     template_implication
      ([template_inequation
         (less_equals, template_app (template_hole 4, template_hole 3),
          template_var 1)],
       template_inequation
        (less_equals, template_app (template_hole 1, template_var 0),
         template_app (template_hole 0, template_var 1)))),
    ("Word_Lemmas.ucast_le_maskI",
     "?a <= mask ?n ==> UCAST(?'a \<rightarrow> ?'b) ?a <= mask ?n",
     template_implication
      ([template_inequation
         (less_equals, template_var 1,
          template_app (template_hole 3, template_var 0))],
       template_inequation
        (less_equals, template_app (template_hole 1, template_var 1),
         template_app (template_hole 0, template_var 0)))),
    ("Word_Lemmas.and_mask_eq_iff_shiftr_0",
     "(and ?w (mask ?n) = ?w) = (?w >> ?n = 0)",
     template_bimplication
      (template_equation
        (template_app
          (template_app (template_hole 3, template_var 1),
           template_app (template_hole 2, template_var 0)),
         template_var 1),
       template_equation
        (template_app
          (template_app (template_hole 1, template_var 1), template_var 0),
         template_hole 0))),
    ("Word_Lemmas.mask_Suc", "mask (Suc ?n) = 2 ^ ?n + mask ?n",
     template_equation
      (template_app
        (template_hole 6, template_app (template_hole 5, template_var 0)),
       template_app
        (template_app
          (template_hole 4,
           template_app
            (template_app
              (template_hole 3,
               template_app
                (template_hole 2,
                 template_app (template_hole 1, template_hole 0))),
             template_var 0)),
         template_app (template_hole 6, template_var 0)))),
    ("Word_Lemmas.word_add_format", "- 1 + ?b + ?c = ?b + (?c - 1)",
     template_equation
      (template_app
        (template_app
          (template_hole 3,
           template_app
            (template_app
              (template_hole 3,
               template_app (template_hole 2, template_hole 1)),
             template_var 1)),
         template_var 0),
       template_app
        (template_app (template_hole 3, template_var 1),
         template_app
          (template_app (template_hole 0, template_var 0),
           template_hole 1)))),
    ("Word_Lemmas.word_shift_by_2", "?x * 4 = ?x << 2",
     template_equation
      (template_app
        (template_app (template_hole 5, template_var 0),
         template_app
          (template_hole 4,
           template_app
            (template_hole 3,
             template_app (template_hole 3, template_hole 2)))),
       template_app
        (template_app (template_hole 1, template_var 0),
         template_app
          (template_hole 0,
           template_app (template_hole 3, template_hole 2))))),
    ("Word_Lemmas.scast_of_nat_signed_to_unsigned_add",
     "SCAST(?'a signed \<rightarrow> ?'a)
       (word_of_nat ?x + word_of_nat ?y) =
      word_of_nat ?x + word_of_nat ?y",
     template_equation
      (template_app
        (template_hole 4,
         template_app
          (template_app
            (template_hole 3,
             template_app (template_hole 2, template_var 1)),
           template_app (template_hole 2, template_var 0))),
       template_app
        (template_app
          (template_hole 1, template_app (template_hole 0, template_var 1)),
         template_app (template_hole 0, template_var 0)))),
    ("Word_Lemmas.scast_of_nat_unsigned_to_signed_add",
     "SCAST(?'a \<rightarrow> ?'a signed)
       (word_of_nat ?x + word_of_nat ?y) =
      word_of_nat ?x + word_of_nat ?y",
     template_equation
      (template_app
        (template_hole 4,
         template_app
          (template_app
            (template_hole 3,
             template_app (template_hole 2, template_var 1)),
           template_app (template_hole 2, template_var 0))),
       template_app
        (template_app
          (template_hole 1, template_app (template_hole 0, template_var 1)),
         template_app (template_hole 0, template_var 0)))),
    ("Word_Lemmas.word_and_le_plus_one", "0 < ?a ==> and ?x (?a - 1) < ?a",
     template_implication
      ([template_inequation (less_than, template_hole 3, template_var 1)],
       template_inequation
        (less_than,
         template_app
          (template_app (template_hole 2, template_var 0),
           template_app
            (template_app (template_hole 1, template_var 1),
             template_hole 0)),
         template_var 1))),
    ("Word_Lemmas.shift_alignment",
     "?b <= ?a ==> is_aligned (?p >> ?a << ?a) ?b",
     template_implication
      ([template_inequation (less_equals, template_var 2, template_var 1)],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 2,
               template_app
                (template_app
                  (template_hole 1,
                   template_app
                    (template_app (template_hole 0, template_var 0),
                     template_var 1)),
                 template_var 1)),
             template_var 2)
           ))),
    ("Word_Lemmas.le_shiftr", "?u <= ?v ==> ?u >> ?n <= ?v >> ?n",
     template_implication
      ([template_inequation (less_equals, template_var 2, template_var 1)],
       template_inequation
        (less_equals,
         template_app
          (template_app (template_hole 0, template_var 2), template_var 0),
         template_app
          (template_app (template_hole 0, template_var 1),
           template_var 0)))),
    ("Word_Lemmas.shiftl_1_not_0", "?n < LENGTH(?'a) ==> 1 << ?n ~= 0",
     template_implication
      ([template_inequation
         (less_than, template_var 0,
          template_app (template_hole 6, template_hole 5))],
       template_negation
        (
           template_equation
            (template_app
              (template_app (template_hole 2, template_hole 1),
               template_var 0),
             template_hole 0)
           ))),
    ("Word_Lemmas.ucast_shiftl_eq_0",
     "LENGTH(?'b) <= ?n ==> UCAST(?'a \<rightarrow> ?'b) (?w << ?n) = 0",
     template_implication
      ([template_inequation
         (less_equals, template_app (template_hole 5, template_hole 4),
          template_var 1)],
       template_equation
        (template_app
          (template_hole 2,
           template_app
            (template_app (template_hole 1, template_var 0),
             template_var 1)),
         template_hole 0))),
    ("Word_Lemmas.le_max_word_ucast_id",
     "?x <= UCAST(?'b \<rightarrow> ?'a) (- 1) ==>
      UCAST(?'b \<rightarrow> ?'a) (UCAST(?'a \<rightarrow> ?'b) ?x) = ?x",
     template_implication
      ([template_inequation
         (less_equals, template_var 0,
          template_app
           (template_hole 4,
            template_app (template_hole 3, template_hole 2)))],
       template_equation
        (template_app
          (template_hole 4, template_app (template_hole 0, template_var 0)),
         template_var 0))),
    ("Word_Lemmas.is_up_compose",
     "[| is_up ?uc; is_up ?uc' |] ==> is_up (?uc' o ?uc)",
     template_implication
      ([template_predicate (template_app (template_hole 3, template_var 1)),
        template_predicate
         (template_app (template_hole 2, template_var 0))],
       template_predicate
        (
           template_app
            (template_hole 1,
             template_app
              (template_app (template_hole 0, template_var 0),
               template_var 1))
           ))),
    ("Word_Lemmas.shiftr1_irrelevant_lsb",
     "bit ?x 0 | ?x >> 1 = ?x + 1 >> 1",
     template_predicate
      (
         template_app
          (template_app
            (template_hole 7,
             template_app
              (template_app (template_hole 6, template_var 0),
               template_hole 5)),
           template_app
            (template_app
              (template_hole 4,
               template_app
                (template_app (template_hole 3, template_var 0),
                 template_hole 2)),
             template_app
              (template_app
                (template_hole 3,
                 template_app
                  (template_app (template_hole 1, template_var 0),
                   template_hole 0)),
               template_hole 2)))
         )),
    ("Word_Lemmas.sshiftr_div_2n", "sint (?w >>> ?n) = sint ?w div 2 ^ ?n",
     template_equation
      (template_app
        (template_hole 6,
         template_app
          (template_app (template_hole 5, template_var 1), template_var 0)),
       template_app
        (template_app
          (template_hole 4, template_app (template_hole 6, template_var 1)),
         template_app
          (template_app
            (template_hole 3,
             template_app
              (template_hole 2,
               template_app (template_hole 1, template_hole 0))),
           template_var 0)))),
    ("Word_Lemmas.shiftr_div_2n", "uint (?w >> ?n) = uint ?w div 2 ^ ?n",
     template_equation
      (template_app
        (template_hole 6,
         template_app
          (template_app (template_hole 5, template_var 1), template_var 0)),
       template_app
        (template_app
          (template_hole 4, template_app (template_hole 6, template_var 1)),
         template_app
          (template_app
            (template_hole 3,
             template_app
              (template_hole 2,
               template_app (template_hole 1, template_hole 0))),
           template_var 0)))),
    ("Word_Lemmas.shiftr_div_2n'", "unat (?w >> ?n) = unat ?w div 2 ^ ?n",
     template_equation
      (template_app
        (template_hole 6,
         template_app
          (template_app (template_hole 5, template_var 1), template_var 0)),
       template_app
        (template_app
          (template_hole 4, template_app (template_hole 6, template_var 1)),
         template_app
          (template_app
            (template_hole 3,
             template_app
              (template_hole 2,
               template_app (template_hole 1, template_hole 0))),
           template_var 0)))),
    ("Word_Lemmas.mask_shiftl_decompose",
     "mask ?m << ?n = and (mask (?m + ?n)) (not (mask ?n))",
     template_equation
      (template_app
        (template_app
          (template_hole 4, template_app (template_hole 3, template_var 1)),
         template_var 0),
       template_app
        (template_app
          (template_hole 2,
           template_app
            (template_hole 3,
             template_app
              (template_app (template_hole 1, template_var 1),
               template_var 0))),
         template_app
          (template_hole 0,
           template_app (template_hole 3, template_var 0))))),
    ("Word_Lemmas.of_nat_shiftl",
     "word_of_nat ?x << ?n = word_of_nat (?x * 2 ^ ?n)",
     template_equation
      (template_app
        (template_app
          (template_hole 6, template_app (template_hole 5, template_var 1)),
         template_var 0),
       template_app
        (template_hole 5,
         template_app
          (template_app (template_hole 4, template_var 1),
           template_app
            (template_app
              (template_hole 3,
               template_app
                (template_hole 2,
                 template_app (template_hole 1, template_hole 0))),
             template_var 0))))),
    ("Word_Lemmas.shiftl_over_and_dist",
     "and ?a ?b << ?c = and (?a << ?c) (?b << ?c)",
     template_equation
      (template_app
        (template_app
          (template_hole 1,
           template_app
            (template_app (template_hole 0, template_var 2),
             template_var 1)),
         template_var 0),
       template_app
        (template_app
          (template_hole 0,
           template_app
            (template_app (template_hole 1, template_var 2),
             template_var 0)),
         template_app
          (template_app (template_hole 1, template_var 1),
           template_var 0)))),
    ("Word_Lemmas.shiftl_over_or_dist",
     "or ?a ?b << ?c = or (?a << ?c) (?b << ?c)",
     template_equation
      (template_app
        (template_app
          (template_hole 1,
           template_app
            (template_app (template_hole 0, template_var 2),
             template_var 1)),
         template_var 0),
       template_app
        (template_app
          (template_hole 0,
           template_app
            (template_app (template_hole 1, template_var 2),
             template_var 0)),
         template_app
          (template_app (template_hole 1, template_var 1),
           template_var 0)))),
    ("Word_Lemmas.word_shiftl_add_distrib",
     "?x + ?y << ?n = (?x << ?n) + (?y << ?n)",
     template_equation
      (template_app
        (template_app
          (template_hole 1,
           template_app
            (template_app (template_hole 0, template_var 2),
             template_var 1)),
         template_var 0),
       template_app
        (template_app
          (template_hole 0,
           template_app
            (template_app (template_hole 1, template_var 2),
             template_var 0)),
         template_app
          (template_app (template_hole 1, template_var 1),
           template_var 0)))),
    ("Word_Lemmas.shiftr_over_and_dist",
     "and ?a ?b >> ?c = and (?a >> ?c) (?b >> ?c)",
     template_equation
      (template_app
        (template_app
          (template_hole 1,
           template_app
            (template_app (template_hole 0, template_var 2),
             template_var 1)),
         template_var 0),
       template_app
        (template_app
          (template_hole 0,
           template_app
            (template_app (template_hole 1, template_var 2),
             template_var 0)),
         template_app
          (template_app (template_hole 1, template_var 1),
           template_var 0)))),
    ("Word_Lemmas.shiftr_over_or_dist",
     "or ?a ?b >> ?c = or (?a >> ?c) (?b >> ?c)",
     template_equation
      (template_app
        (template_app
          (template_hole 1,
           template_app
            (template_app (template_hole 0, template_var 2),
             template_var 1)),
         template_var 0),
       template_app
        (template_app
          (template_hole 0,
           template_app
            (template_app (template_hole 1, template_var 2),
             template_var 0)),
         template_app
          (template_app (template_hole 1, template_var 1),
           template_var 0)))),
    ("Word_Lemmas.and_mask2",
     "?w << ?n >> ?n = and ?w (mask (size ?w - ?n))",
     template_equation
      (template_app
        (template_app
          (template_hole 5,
           template_app
            (template_app (template_hole 4, template_var 1),
             template_var 0)),
         template_var 0),
       template_app
        (template_app (template_hole 3, template_var 1),
         template_app
          (template_hole 2,
           template_app
            (template_app
              (template_hole 1,
               template_app (template_hole 0, template_var 1)),
             template_var 0))))),
    ("Word_Lemmas.sshiftr_over_and_dist",
     "and ?a ?b >>> ?c = and (?a >>> ?c) (?b >>> ?c)",
     template_equation
      (template_app
        (template_app
          (template_hole 1,
           template_app
            (template_app (template_hole 0, template_var 2),
             template_var 1)),
         template_var 0),
       template_app
        (template_app
          (template_hole 0,
           template_app
            (template_app (template_hole 1, template_var 2),
             template_var 0)),
         template_app
          (template_app (template_hole 1, template_var 1),
           template_var 0)))),
    ("Word_Lemmas.sshiftr_over_or_dist",
     "or ?a ?b >>> ?c = or (?a >>> ?c) (?b >>> ?c)",
     template_equation
      (template_app
        (template_app
          (template_hole 1,
           template_app
            (template_app (template_hole 0, template_var 2),
             template_var 1)),
         template_var 0),
       template_app
        (template_app
          (template_hole 0,
           template_app
            (template_app (template_hole 1, template_var 2),
             template_var 0)),
         template_app
          (template_app (template_hole 1, template_var 1),
           template_var 0)))),
    ("Word_Lemmas.word_shift_by_3", "?x * 8 = ?x << 3",
     template_equation
      (template_app
        (template_app (template_hole 6, template_var 0),
         template_app
          (template_hole 5,
           template_app
            (template_hole 4,
             template_app
              (template_hole 4,
               template_app (template_hole 4, template_hole 3))))),
       template_app
        (template_app (template_hole 2, template_var 0),
         template_app
          (template_hole 1,
           template_app (template_hole 0, template_hole 3))))),
    ("Word_Lemmas.mask_rshift_mult_eq_rshift_lshift",
     "(?a >> ?b) * (1 << ?c) = ?a >> ?b << ?c",
     template_equation
      (template_app
        (template_app
          (template_hole 3,
           template_app
            (template_app (template_hole 2, template_var 2),
             template_var 1)),
         template_app
          (template_app (template_hole 1, template_hole 0),
           template_var 0)),
       template_app
        (template_app
          (template_hole 1,
           template_app
            (template_app (template_hole 2, template_var 2),
             template_var 1)),
         template_var 0))),
    ("Word_Lemmas.shiftr_mask_eq",
     "and (?x >> ?n) (mask (size ?x - ?n)) = ?x >> ?n",
     template_equation
      (template_app
        (template_app
          (template_hole 4,
           template_app
            (template_app (template_hole 3, template_var 1),
             template_var 0)),
         template_app
          (template_hole 2,
           template_app
            (template_app
              (template_hole 1,
               template_app (template_hole 0, template_var 1)),
             template_var 0))),
       template_app
        (template_app (template_hole 3, template_var 1), template_var 0))),
    ("Word_Lemmas.word_shiftr_lt",
     "unat (?w >> ?n) < 2 ^ (LENGTH(?'a) - ?n)",
     template_inequation
      (less_than,
       template_app
        (template_hole 8,
         template_app
          (template_app (template_hole 7, template_var 1), template_var 0)),
       template_app
        (template_app
          (template_hole 6,
           template_app
            (template_hole 5,
             template_app (template_hole 4, template_hole 3))),
         template_app
          (template_app
            (template_hole 2,
             template_app (template_hole 1, template_hole 0)),
           template_var 0)))),
    ("Word_Lemmas.unat_signed_ucast_less_ucast",
     "LENGTH(?'a) <= LENGTH(?'b) ==>
      unat (UCAST(?'a \<rightarrow> ?'b signed) ?x) = unat ?x",
     template_implication
      ([template_inequation
         (less_equals, template_app (template_hole 7, template_hole 6),
          template_app (template_hole 5, template_hole 4))],
       template_equation
        (template_app
          (template_hole 2, template_app (template_hole 1, template_var 0)),
         template_app (template_hole 0, template_var 0)))),
    ("Word_Lemmas.word_and_1_shiftls'",
     "and ?x (1 << 1) = (if bit ?x 1 then 1 << 1 else 0)",
     template_equation
      (template_app
        (template_app (template_hole 6, template_var 0),
         template_app
          (template_app (template_hole 5, template_hole 4),
           template_hole 3)),
       template_app
        (template_app
          (template_app
            (template_hole 2,
             template_app
              (template_app (template_hole 1, template_var 0),
               template_hole 3)),
           template_app
            (template_app (template_hole 5, template_hole 4),
             template_hole 3)),
         template_hole 0))),
    ("Word_Lemmas.word_and_1_shiftls'",
     "and ?x (1 << 0) = (if bit ?x 0 then 1 << 0 else 0)",
     template_equation
      (template_app
        (template_app (template_hole 6, template_var 0),
         template_app
          (template_app (template_hole 5, template_hole 4),
           template_hole 3)),
       template_app
        (template_app
          (template_app
            (template_hole 2,
             template_app
              (template_app (template_hole 1, template_var 0),
               template_hole 3)),
           template_app
            (template_app (template_hole 5, template_hole 4),
             template_hole 3)),
         template_hole 0))),
    ("Word_Lemmas.word_and_1_shiftl",
     "and ?x (1 << ?n) = (if bit ?x ?n then 1 << ?n else 0)",
     template_equation
      (template_app
        (template_app (template_hole 5, template_var 1),
         template_app
          (template_app (template_hole 4, template_hole 3),
           template_var 0)),
       template_app
        (template_app
          (template_app
            (template_hole 2,
             template_app
              (template_app (template_hole 1, template_var 1),
               template_var 0)),
           template_app
            (template_app (template_hole 4, template_hole 3),
             template_var 0)),
         template_hole 0))),
    ("Word_Lemmas.shiftr_mul_not_mask_eq_and_not_mask",
     "(?x >> ?n) * not (mask ?n) = - and ?x (not (mask ?n))",
     template_equation
      (template_app
        (template_app
          (template_hole 5,
           template_app
            (template_app (template_hole 4, template_var 1),
             template_var 0)),
         template_app
          (template_hole 3,
           template_app (template_hole 2, template_var 0))),
       template_app
        (template_hole 1,
         template_app
          (template_app (template_hole 0, template_var 1),
           template_app
            (template_hole 3,
             template_app (template_hole 2, template_var 0)))))),
    ("Word_Lemmas.NOT_mask_shifted_lenword",
     "not (mask ?len << LENGTH(?'a) - ?len) = mask (LENGTH(?'a) - ?len)",
     template_equation
      (template_app
        (template_hole 5,
         template_app
          (template_app
            (template_hole 4,
             template_app (template_hole 3, template_var 0)),
           template_app
            (template_app
              (template_hole 2,
               template_app (template_hole 1, template_hole 0)),
             template_var 0))),
       template_app
        (template_hole 3,
         template_app
          (template_app
            (template_hole 2,
             template_app (template_hole 1, template_hole 0)),
           template_var 0)))),
    ("Word_Lemmas.mask_shift_and_negate",
     "and (and ?w (mask ?n) << ?m) (not (mask ?n << ?m)) = 0",
     template_equation
      (template_app
        (template_app
          (template_hole 4,
           template_app
            (template_app
              (template_hole 3,
               template_app
                (template_app (template_hole 4, template_var 2),
                 template_app (template_hole 2, template_var 1))),
             template_var 0)),
         template_app
          (template_hole 1,
           template_app
            (template_app
              (template_hole 3,
               template_app (template_hole 2, template_var 1)),
             template_var 0))),
       template_hole 0)),
    ("Word_Lemmas.scast_down_minus",
     "is_down SCAST(?'a \<rightarrow> ?'b) ==>
      SCAST(?'a \<rightarrow> ?'b) (?a - ?b) =
      SCAST(?'a \<rightarrow> ?'b) ?a - SCAST(?'a \<rightarrow> ?'b) ?b",
     template_implication
      ([template_predicate
         (template_app (template_hole 4, template_hole 3))],
       template_equation
        (template_app
          (template_hole 3,
           template_app
            (template_app (template_hole 1, template_var 1),
             template_var 0)),
         template_app
          (template_app
            (template_hole 0,
             template_app (template_hole 3, template_var 1)),
           template_app (template_hole 3, template_var 0))))),
    ("Word_Lemmas.scast_down_add",
     "is_down SCAST(?'a \<rightarrow> ?'b) ==>
      SCAST(?'a \<rightarrow> ?'b) (?a + ?b) =
      SCAST(?'a \<rightarrow> ?'b) ?a + SCAST(?'a \<rightarrow> ?'b) ?b",
     template_implication
      ([template_predicate
         (template_app (template_hole 4, template_hole 3))],
       template_equation
        (template_app
          (template_hole 3,
           template_app
            (template_app (template_hole 1, template_var 1),
             template_var 0)),
         template_app
          (template_app
            (template_hole 0,
             template_app (template_hole 3, template_var 1)),
           template_app (template_hole 3, template_var 0))))),
    ("Word_Lemmas.scast_down_mult",
     "is_down SCAST(?'a \<rightarrow> ?'b) ==>
      SCAST(?'a \<rightarrow> ?'b) (?a * ?b) =
      SCAST(?'a \<rightarrow> ?'b) ?a * SCAST(?'a \<rightarrow> ?'b) ?b",
     template_implication
      ([template_predicate
         (template_app (template_hole 4, template_hole 3))],
       template_equation
        (template_app
          (template_hole 3,
           template_app
            (template_app (template_hole 1, template_var 1),
             template_var 0)),
         template_app
          (template_app
            (template_hole 0,
             template_app (template_hole 3, template_var 1)),
           template_app (template_hole 3, template_var 0))))),
    ("Word_Lemmas.ucast_down_minus",
     "is_down UCAST(?'a \<rightarrow> ?'b) ==>
      UCAST(?'a \<rightarrow> ?'b) (?a - ?b) =
      UCAST(?'a \<rightarrow> ?'b) ?a - UCAST(?'a \<rightarrow> ?'b) ?b",
     template_implication
      ([template_predicate
         (template_app (template_hole 4, template_hole 3))],
       template_equation
        (template_app
          (template_hole 3,
           template_app
            (template_app (template_hole 1, template_var 1),
             template_var 0)),
         template_app
          (template_app
            (template_hole 0,
             template_app (template_hole 3, template_var 1)),
           template_app (template_hole 3, template_var 0))))),
    ("Word_Lemmas.ucast_down_add",
     "is_down UCAST(?'a \<rightarrow> ?'b) ==>
      UCAST(?'a \<rightarrow> ?'b) (?a + ?b) =
      UCAST(?'a \<rightarrow> ?'b) ?a + UCAST(?'a \<rightarrow> ?'b) ?b",
     template_implication
      ([template_predicate
         (template_app (template_hole 4, template_hole 3))],
       template_equation
        (template_app
          (template_hole 3,
           template_app
            (template_app (template_hole 1, template_var 1),
             template_var 0)),
         template_app
          (template_app
            (template_hole 0,
             template_app (template_hole 3, template_var 1)),
           template_app (template_hole 3, template_var 0))))),
    ("Word_Lemmas.ucast_down_mult",
     "is_down UCAST(?'a \<rightarrow> ?'b) ==>
      UCAST(?'a \<rightarrow> ?'b) (?a * ?b) =
      UCAST(?'a \<rightarrow> ?'b) ?a * UCAST(?'a \<rightarrow> ?'b) ?b",
     template_implication
      ([template_predicate
         (template_app (template_hole 4, template_hole 3))],
       template_equation
        (template_app
          (template_hole 3,
           template_app
            (template_app (template_hole 1, template_var 1),
             template_var 0)),
         template_app
          (template_app
            (template_hole 0,
             template_app (template_hole 3, template_var 1)),
           template_app (template_hole 3, template_var 0))))),
    ("Word_Lemmas.ucast_ucast_mask2",
     "is_down UCAST(?'a \<rightarrow> ?'b) ==>
      UCAST(?'b \<rightarrow> ?'c) (UCAST(?'a \<rightarrow> ?'b) ?x) =
      UCAST(?'a \<rightarrow> ?'c) (and ?x (mask LENGTH(?'b)))",
     template_implication
      ([template_predicate
         (template_app (template_hole 8, template_hole 7))],
       template_equation
        (template_app
          (template_hole 5, template_app (template_hole 7, template_var 0)),
         template_app
          (template_hole 4,
           template_app
            (template_app (template_hole 3, template_var 0),
             template_app
              (template_hole 2,
               template_app (template_hole 1, template_hole 0))))))),
    ("Word_Lemmas.unat_pow_le_intro",
     "LENGTH(?'a) <= ?n ==> unat ?x < 2 ^ ?n",
     template_implication
      ([template_inequation
         (less_equals, template_app (template_hole 7, template_hole 6),
          template_var 1)],
       template_inequation
        (less_than, template_app (template_hole 4, template_var 0),
         template_app
          (template_app
            (template_hole 3,
             template_app
              (template_hole 2,
               template_app (template_hole 1, template_hole 0))),
           template_var 1)))),
    ("Word_Lemmas.leq_high_bits_shiftr_low_bits_leq_bits_mask",
     "?x <= mask ?high_bits ==>
      ?x << ?low_bits <= mask (?low_bits + ?high_bits)",
     template_implication
      ([template_inequation
         (less_equals, template_var 2,
          template_app (template_hole 2, template_var 1))],
       template_inequation
        (less_equals,
         template_app
          (template_app (template_hole 1, template_var 2), template_var 0),
         template_app
          (template_hole 2,
           template_app
            (template_app (template_hole 0, template_var 0),
             template_var 1))))),
    ("Word_Lemmas.shiftr1_0_or_1", "?x >> 1 = 0 ==> ?x = 0 | ?x = 1",
     template_implication
      ([template_equation
         (template_app
           (template_app (template_hole 4, template_var 0),
            template_hole 3),
          template_hole 2)],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 1,
               template_app
                (template_app (template_hole 5, template_var 0),
                 template_hole 2)),
             template_app
              (template_app (template_hole 5, template_var 0),
               template_hole 0))
           ))),
    ("Word_Lemmas.toEnum_of_ucast",
     "LENGTH(?'b) <= LENGTH(?'a) ==>
      toEnum (unat ?b) = word_of_nat (unat ?b)",
     template_implication
      ([template_inequation
         (less_equals, template_app (template_hole 7, template_hole 6),
          template_app (template_hole 5, template_hole 4))],
       template_equation
        (template_app
          (template_hole 2, template_app (template_hole 1, template_var 0)),
         template_app
          (template_hole 0,
           template_app (template_hole 1, template_var 0))))),
    ("Word_Lemmas.leq_mask_shift",
     "?x <= mask (?low_bits + ?high_bits) ==>
      ?x >> ?low_bits <= mask ?high_bits",
     template_implication
      ([template_inequation
         (less_equals, template_var 2,
          template_app
           (template_hole 2,
            template_app
             (template_app (template_hole 1, template_var 1),
              template_var 0)))],
       template_inequation
        (less_equals,
         template_app
          (template_app (template_hole 0, template_var 2), template_var 1),
         template_app (template_hole 2, template_var 0)))),
    ("Word_Lemmas.ucast_scast_1",
     "[| is_down SCAST(?'a \<rightarrow> ?'b);
         is_down UCAST(?'b \<rightarrow> ?'c) |]
      ==> UCAST(?'b \<rightarrow> ?'c) (SCAST(?'a \<rightarrow> ?'b) ?a) =
          SCAST(?'a \<rightarrow> ?'c) ?a",
     template_implication
      ([template_predicate
         (template_app (template_hole 5, template_hole 4)),
        template_predicate
         (template_app (template_hole 3, template_hole 2))],
       template_equation
        (template_app
          (template_hole 2, template_app (template_hole 4, template_var 0)),
         template_app (template_hole 0, template_var 0)))),
    ("Word_Lemmas.scast_ucast_1",
     "[| is_down UCAST(?'a \<rightarrow> ?'b);
         is_down UCAST(?'b \<rightarrow> ?'c) |]
      ==> SCAST(?'b \<rightarrow> ?'c) (UCAST(?'a \<rightarrow> ?'b) ?a) =
          UCAST(?'a \<rightarrow> ?'c) ?a",
     template_implication
      ([template_predicate
         (template_app (template_hole 6, template_hole 5)),
        template_predicate
         (template_app (template_hole 4, template_hole 3))],
       template_equation
        (template_app
          (template_hole 1, template_app (template_hole 5, template_var 0)),
         template_app (template_hole 0, template_var 0)))),
    ("Word_Lemmas.ucast_scast_3",
     "[| is_down SCAST(?'a \<rightarrow> ?'c);
         is_down UCAST(?'b \<rightarrow> ?'c) |]
      ==> UCAST(?'b \<rightarrow> ?'c) (SCAST(?'a \<rightarrow> ?'b) ?a) =
          SCAST(?'a \<rightarrow> ?'c) ?a",
     template_implication
      ([template_predicate
         (template_app (template_hole 5, template_hole 4)),
        template_predicate
         (template_app (template_hole 3, template_hole 2))],
       template_equation
        (template_app
          (template_hole 2, template_app (template_hole 0, template_var 0)),
         template_app (template_hole 4, template_var 0)))),
    ("Word_Lemmas.scast_ucast_3",
     "[| is_down UCAST(?'a \<rightarrow> ?'c);
         is_down UCAST(?'b \<rightarrow> ?'c) |]
      ==> SCAST(?'b \<rightarrow> ?'c) (UCAST(?'a \<rightarrow> ?'b) ?a) =
          UCAST(?'a \<rightarrow> ?'c) ?a",
     template_implication
      ([template_predicate
         (template_app (template_hole 6, template_hole 5)),
        template_predicate
         (template_app (template_hole 4, template_hole 3))],
       template_equation
        (template_app
          (template_hole 1, template_app (template_hole 0, template_var 0)),
         template_app (template_hole 5, template_var 0)))),
    ("Word_Lemmas.ucast_scast_4",
     "[| is_up SCAST(?'a \<rightarrow> ?'b);
         is_down UCAST(?'b \<rightarrow> ?'c) |]
      ==> UCAST(?'b \<rightarrow> ?'c) (SCAST(?'a \<rightarrow> ?'b) ?a) =
          SCAST(?'a \<rightarrow> ?'c) ?a",
     template_implication
      ([template_predicate
         (template_app (template_hole 5, template_hole 4)),
        template_predicate
         (template_app (template_hole 3, template_hole 2))],
       template_equation
        (template_app
          (template_hole 2, template_app (template_hole 4, template_var 0)),
         template_app (template_hole 0, template_var 0)))),
    ("Word_Lemmas.scast_ucast_4",
     "[| is_up UCAST(?'a \<rightarrow> ?'b);
         is_down UCAST(?'b \<rightarrow> ?'c) |]
      ==> SCAST(?'b \<rightarrow> ?'c) (UCAST(?'a \<rightarrow> ?'b) ?a) =
          UCAST(?'a \<rightarrow> ?'c) ?a",
     template_implication
      ([template_predicate
         (template_app (template_hole 6, template_hole 5)),
        template_predicate
         (template_app (template_hole 4, template_hole 3))],
       template_equation
        (template_app
          (template_hole 1, template_app (template_hole 5, template_var 0)),
         template_app (template_hole 0, template_var 0)))),
    ("Word_Lemmas.word_and_1_shiftls",
     "and ?x 1 = (if odd ?x then 1 << 0 else 0)",
     template_equation
      (template_app
        (template_app (template_hole 10, template_var 0), template_hole 9),
       template_app
        (template_app
          (template_app
            (template_hole 8,
             template_app
              (template_hole 7,
               template_app
                (template_app
                  (template_hole 6,
                   template_app
                    (template_hole 5,
                     template_app (template_hole 4, template_hole 3))),
                 template_var 0))),
           template_app
            (template_app (template_hole 2, template_hole 9),
             template_hole 1)),
         template_hole 0))),
    ("Word_Lemmas.word_and_1_shiftls",
     "and ?x 2 = (if bit ?x (Suc 0) then 1 << 1 else 0)",
     template_equation
      (template_app
        (template_app (template_hole 11, template_var 0),
         template_app
          (template_hole 10,
           template_app (template_hole 9, template_hole 8))),
       template_app
        (template_app
          (template_app
            (template_hole 7,
             template_app
              (template_app (template_hole 6, template_var 0),
               template_app (template_hole 5, template_hole 4))),
           template_app
            (template_app (template_hole 3, template_hole 2),
             template_hole 1)),
         template_hole 0))),
    ("Word_Lemmas.word_and_mask_shiftl",
     "and ?x (mask ?n << ?m) = and (?x >> ?m) (mask ?n) << ?m",
     template_equation
      (template_app
        (template_app (template_hole 3, template_var 2),
         template_app
          (template_app
            (template_hole 2,
             template_app (template_hole 1, template_var 1)),
           template_var 0)),
       template_app
        (template_app
          (template_hole 2,
           template_app
            (template_app
              (template_hole 3,
               template_app
                (template_app (template_hole 0, template_var 2),
                 template_var 0)),
             template_app (template_hole 1, template_var 1))),
         template_var 0))),
    ("Word_Lemmas.shift_times_fold", "?x * 2 ^ ?n << ?m = ?x << ?m + ?n",
     template_equation
      (template_app
        (template_app
          (template_hole 6,
           template_app
            (template_app (template_hole 5, template_var 2),
             template_app
              (template_app
                (template_hole 4,
                 template_app
                  (template_hole 3,
                   template_app (template_hole 2, template_hole 1))),
               template_var 1))),
         template_var 0),
       template_app
        (template_app (template_hole 6, template_var 2),
         template_app
          (template_app (template_hole 0, template_var 0),
           template_var 1)))),
    ("Word_Lemmas.word_le_mask_out_plus_2sz",
     "?x <= and ?x (not (mask ?sz)) + 2 ^ ?sz - 1",
     template_inequation
      (less_equals, template_var 1,
       template_app
        (template_app
          (template_hole 9,
           template_app
            (template_app
              (template_hole 8,
               template_app
                (template_app (template_hole 7, template_var 1),
                 template_app
                  (template_hole 6,
                   template_app (template_hole 5, template_var 0)))),
             template_app
              (template_app
                (template_hole 4,
                 template_app
                  (template_hole 3,
                   template_app (template_hole 2, template_hole 1))),
               template_var 0))),
         template_hole 0))),
    ("Word_Lemmas.bitmagic_zeroLast_leq_or1Last",
     "and ?a (mask ?len << ?x - ?len) <= or ?a (mask (?y - ?len))",
     template_inequation
      (less_equals,
       template_app
        (template_app (template_hole 4, template_var 3),
         template_app
          (template_app
            (template_hole 3,
             template_app (template_hole 2, template_var 2)),
           template_app
            (template_app (template_hole 1, template_var 1),
             template_var 2))),
       template_app
        (template_app (template_hole 0, template_var 3),
         template_app
          (template_hole 2,
           template_app
            (template_app (template_hole 1, template_var 0),
             template_var 2))))),
    ("Word_Lemmas.mask_overlap_zero",
     "?a <= ?b ==> and (and ?p (mask ?a)) (not (mask ?b)) = 0",
     template_implication
      ([template_inequation (less_equals, template_var 2, template_var 1)],
       template_equation
        (template_app
          (template_app
            (template_hole 3,
             template_app
              (template_app (template_hole 3, template_var 0),
               template_app (template_hole 2, template_var 2))),
           template_app
            (template_hole 1,
             template_app (template_hole 2, template_var 1))),
         template_hole 0))),
    ("Word_Lemmas.mask_overlap_zero'",
     "?b <= ?a ==> and (and ?p (not (mask ?a))) (mask ?b) = 0",
     template_implication
      ([template_inequation (less_equals, template_var 2, template_var 1)],
       template_equation
        (template_app
          (template_app
            (template_hole 3,
             template_app
              (template_app (template_hole 3, template_var 0),
               template_app
                (template_hole 2,
                 template_app (template_hole 1, template_var 1)))),
           template_app (template_hole 1, template_var 2)),
         template_hole 0))),
    ("Word_Lemmas.shiftr1_irrelevant_lsb'",
     "~ bit ?x 0 ==> ?x >> 1 = ?x + 1 >> 1",
     template_implication
      ([template_negation
         (
            template_predicate
             (
                template_app
                 (template_app (template_hole 6, template_var 0),
                  template_hole 5)
                )
            )],
       template_equation
        (template_app
          (template_app (template_hole 3, template_var 0), template_hole 2),
         template_app
          (template_app
            (template_hole 3,
             template_app
              (template_app (template_hole 1, template_var 0),
               template_hole 0)),
           template_hole 2)))),
    ("Word_Lemmas.shiftr_mask2",
     "?n <= LENGTH(?'a) ==> mask ?n >> ?m = mask (?n - ?m)",
     template_implication
      ([template_inequation
         (less_equals, template_var 1,
          template_app (template_hole 5, template_hole 4))],
       template_equation
        (template_app
          (template_app
            (template_hole 2,
             template_app (template_hole 1, template_var 1)),
           template_var 0),
         template_app
          (template_hole 1,
           template_app
            (template_app (template_hole 0, template_var 1),
             template_var 0))))),
    ("Word_Lemmas.shiftr_le_0", "unat ?w < 2 ^ ?n ==> ?w >> ?n = 0",
     template_implication
      ([template_inequation
         (less_than, template_app (template_hole 7, template_var 1),
          template_app
           (template_app
             (template_hole 6,
              template_app
               (template_hole 5,
                template_app (template_hole 4, template_hole 3))),
            template_var 0))],
       template_equation
        (template_app
          (template_app (template_hole 1, template_var 1), template_var 0),
         template_hole 0))),
    ("Word_Lemmas.aligned_sub_aligned_simple",
     "[| is_aligned ?a ?n; is_aligned ?b ?n |] ==> is_aligned (?a - ?b) ?n",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 1, template_var 2),
              template_var 1)
            ),
        template_predicate
         (
            template_app
             (template_app (template_hole 1, template_var 0),
              template_var 1)
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 1,
               template_app
                (template_app (template_hole 0, template_var 2),
                 template_var 0)),
             template_var 1)
           ))),
    ("Word_Lemmas.ucast_zero_is_aligned",
     "[| UCAST(?'a \<rightarrow> ?'b) ?w = 0; ?n <= LENGTH(?'b) |]
      ==> is_aligned ?w ?n",
     template_implication
      ([template_equation
         (template_app (template_hole 5, template_var 1), template_hole 4),
        template_inequation
         (less_equals, template_var 0,
          template_app (template_hole 2, template_hole 1))],
       template_predicate
        (
           template_app
            (template_app (template_hole 0, template_var 1), template_var 0)
           ))),
    ("Word_Lemmas.uint_sshiftr_eq",
     "uint (?w >>> ?n) = take_bit LENGTH(?'a) (sint ?w div 2 ^ ?n)",
     template_equation
      (template_app
        (template_hole 10,
         template_app
          (template_app (template_hole 9, template_var 1), template_var 0)),
       template_app
        (template_app
          (template_hole 8,
           template_app (template_hole 7, template_hole 6)),
         template_app
          (template_app
            (template_hole 5,
             template_app (template_hole 4, template_var 1)),
           template_app
            (template_app
              (template_hole 3,
               template_app
                (template_hole 2,
                 template_app (template_hole 1, template_hole 0))),
             template_var 0))))),
    ("Word_Lemmas.and_mask",
     "and ?w (mask ?n) = ?w << size ?w - ?n >> size ?w - ?n",
     template_equation
      (template_app
        (template_app (template_hole 5, template_var 1),
         template_app (template_hole 4, template_var 0)),
       template_app
        (template_app
          (template_hole 3,
           template_app
            (template_app (template_hole 2, template_var 1),
             template_app
              (template_app
                (template_hole 1,
                 template_app (template_hole 0, template_var 1)),
               template_var 0))),
         template_app
          (template_app
            (template_hole 1,
             template_app (template_hole 0, template_var 1)),
           template_var 0)))),
    ("Word_Lemmas.rshift_sub_mask_eq",
     "and (?a >> size ?a - ?b) (mask ?b) = ?a >> size ?a - ?b",
     template_equation
      (template_app
        (template_app
          (template_hole 4,
           template_app
            (template_app (template_hole 3, template_var 1),
             template_app
              (template_app
                (template_hole 2,
                 template_app (template_hole 1, template_var 1)),
               template_var 0))),
         template_app (template_hole 0, template_var 0)),
       template_app
        (template_app (template_hole 3, template_var 1),
         template_app
          (template_app
            (template_hole 2,
             template_app (template_hole 1, template_var 1)),
           template_var 0)))),
    ("Word_Lemmas.sdiv_word_min'",
     "- (2 ^ (LENGTH(?'a) - Suc 0)) <= sint ?a sdiv sint ?b",
     template_inequation
      (less_equals,
       template_app
        (template_hole 11,
         template_app
          (template_app
            (template_hole 10,
             template_app
              (template_hole 9,
               template_app (template_hole 8, template_hole 7))),
           template_app
            (template_app
              (template_hole 6,
               template_app (template_hole 5, template_hole 4)),
             template_app (template_hole 3, template_hole 2)))),
       template_app
        (template_app
          (template_hole 1, template_app (template_hole 0, template_var 1)),
         template_app (template_hole 0, template_var 0)))),
    ("Word_Lemmas.mask_add_aligned_right",
     "is_aligned ?p ?n ==> and (?q + ?p) (mask ?n) = and ?q (mask ?n)",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 4, template_var 2),
              template_var 1)
            )],
       template_equation
        (template_app
          (template_app
            (template_hole 2,
             template_app
              (template_app (template_hole 1, template_var 0),
               template_var 2)),
           template_app (template_hole 0, template_var 1)),
         template_app
          (template_app (template_hole 2, template_var 0),
           template_app (template_hole 0, template_var 1))))),
    ("Word_Lemmas.word_shiftr_shiftl_shiftr_eq_shiftr",
     "?b <= ?a ==> ?x >> ?a << ?b >> ?b = ?x >> ?a",
     template_implication
      ([template_inequation (less_equals, template_var 2, template_var 1)],
       template_equation
        (template_app
          (template_app
            (template_hole 1,
             template_app
              (template_app
                (template_hole 0,
                 template_app
                  (template_app (template_hole 1, template_var 0),
                   template_var 1)),
               template_var 2)),
           template_var 2),
         template_app
          (template_app (template_hole 1, template_var 0),
           template_var 1)))),
    ("Word_Lemmas.mask_eq_n1_shiftr",
     "?n <= LENGTH(?'a) ==> mask ?n = - 1 >> LENGTH(?'a) - ?n",
     template_implication
      ([template_inequation
         (less_equals, template_var 0,
          template_app (template_hole 7, template_hole 6))],
       template_equation
        (template_app (template_hole 4, template_var 0),
         template_app
          (template_app
            (template_hole 3,
             template_app (template_hole 2, template_hole 1)),
           template_app
            (template_app
              (template_hole 0,
               template_app (template_hole 7, template_hole 6)),
             template_var 0))))),
    ("Word_Lemmas.ucast_shiftl",
     "LENGTH(?'b) <= LENGTH(?'a) ==>
      UCAST(?'a \<rightarrow> ?'b) ?x << ?n =
      UCAST(?'a \<rightarrow> ?'b) (?x << ?n)",
     template_implication
      ([template_inequation
         (less_equals, template_app (template_hole 7, template_hole 6),
          template_app (template_hole 5, template_hole 4))],
       template_equation
        (template_app
          (template_app
            (template_hole 2,
             template_app (template_hole 1, template_var 1)),
           template_var 0),
         template_app
          (template_hole 1,
           template_app
            (template_app (template_hole 0, template_var 1),
             template_var 0))))),
    ("Word_Lemmas.and_and_mask_simple_not",
     "and ?y (mask ?n) = (0::?'a) ==> and (and ?x ?y) (mask ?n) = (0::?'a)",
     template_implication
      ([template_equation
         (template_app
           (template_app (template_hole 2, template_var 2),
            template_app (template_hole 1, template_var 1)),
          template_hole 0)],
       template_equation
        (template_app
          (template_app
            (template_hole 2,
             template_app
              (template_app (template_hole 2, template_var 0),
               template_var 2)),
           template_app (template_hole 1, template_var 1)),
         template_hole 0))),
    ("Word_Lemmas.word_enum_decomp_set",
     "[?x .e. ?y] = ?as @ ?a # ?bs ==> ?a ~: set ?as",
     template_implication
      ([template_equation
         (template_app
           (template_app (template_hole 5, template_var 4), template_var 3),
          template_app
           (template_app (template_hole 4, template_var 2),
            template_app
             (template_app (template_hole 3, template_var 1),
              template_var 0)))],
       template_negation
        (
           template_predicate
            (
               template_app
                (template_app (template_hole 1, template_var 1),
                 template_app (template_hole 0, template_var 2))
               )
           ))),
    ("Word_Lemmas.aligned_mask_disjoint",
     "[| is_aligned ?a ?n; ?b <= mask ?n |] ==> and ?a ?b = 0",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 5, template_var 2),
              template_var 1)
            ),
        template_inequation
         (less_equals, template_var 0,
          template_app (template_hole 3, template_var 1))],
       template_equation
        (template_app
          (template_app (template_hole 1, template_var 2), template_var 0),
         template_hole 0))),
    ("Word_Lemmas.const_less", "[| ?a - 1 < ?b; ?a ~= ?b |] ==> ?a < ?b",
     template_implication
      ([template_inequation
         (less_than,
          template_app
           (template_app (template_hole 3, template_var 1),
            template_hole 2),
          template_var 0),
        template_negation
         (template_equation (template_var 1, template_var 0))],
       template_inequation (less_than, template_var 1, template_var 0))),
    ("Word_Lemmas.ucast_eq_mask",
     "(UCAST(?'a \<rightarrow> ?'b) ?x = UCAST(?'a \<rightarrow> ?'b) ?y) =
      (and ?x (mask LENGTH(?'b)) = and ?y (mask LENGTH(?'b)))",
     template_bimplication
      (template_equation
        (template_app (template_hole 5, template_var 1),
         template_app (template_hole 5, template_var 0)),
       template_equation
        (template_app
          (template_app (template_hole 3, template_var 1),
           template_app
            (template_hole 2,
             template_app (template_hole 1, template_hole 0))),
         template_app
          (template_app (template_hole 3, template_var 0),
           template_app
            (template_hole 2,
             template_app (template_hole 1, template_hole 0)))))),
    ("Word_Lemmas.sshiftr_numeral",
     "numeral ?k >>> numeral ?n =
      word_of_int
       (signed_take_bit (LENGTH(?'a) - 1) (numeral ?k) >> numeral ?n)",
     template_equation
      (template_app
        (template_app
          (template_hole 10,
           template_app (template_hole 9, template_var 1)),
         template_app (template_hole 8, template_var 0)),
       template_app
        (template_hole 7,
         template_app
          (template_app
            (template_hole 6,
             template_app
              (template_app
                (template_hole 5,
                 template_app
                  (template_app
                    (template_hole 4,
                     template_app (template_hole 3, template_hole 2)),
                   template_hole 1)),
               template_app (template_hole 0, template_var 1))),
           template_app (template_hole 8, template_var 0))))),
    ("Word_Lemmas.mask_shift_eq_mask_mask",
     "and ?p (mask ?a) >> ?b << ?b =
      and (and ?p (mask ?a)) (not (mask ?b))",
     template_equation
      (template_app
        (template_app
          (template_hole 4,
           template_app
            (template_app
              (template_hole 3,
               template_app
                (template_app (template_hole 2, template_var 2),
                 template_app (template_hole 1, template_var 1))),
             template_var 0)),
         template_var 0),
       template_app
        (template_app
          (template_hole 2,
           template_app
            (template_app (template_hole 2, template_var 2),
             template_app (template_hole 1, template_var 1))),
         template_app
          (template_hole 0,
           template_app (template_hole 1, template_var 0))))),
    ("Word_Lemmas.mask_sub",
     "?n <= ?m ==> mask ?m - mask ?n = and (mask ?m) (not (mask ?n))",
     template_implication
      ([template_inequation (less_equals, template_var 1, template_var 0)],
       template_equation
        (template_app
          (template_app
            (template_hole 3,
             template_app (template_hole 2, template_var 0)),
           template_app (template_hole 2, template_var 1)),
         template_app
          (template_app
            (template_hole 1,
             template_app (template_hole 2, template_var 0)),
           template_app
            (template_hole 0,
             template_app (template_hole 2, template_var 1)))))),
    ("Word_Lemmas.sbintrunc_uint_ucast",
     "Suc ?n = LENGTH(?'b) ==>
      signed_take_bit ?n (uint (UCAST(?'a \<rightarrow> ?'b) ?w)) =
      signed_take_bit ?n (uint ?w)",
     template_implication
      ([template_equation
         (template_app (template_hole 7, template_var 1),
          template_app (template_hole 6, template_hole 5))],
       template_equation
        (template_app
          (template_app (template_hole 3, template_var 1),
           template_app
            (template_hole 2,
             template_app (template_hole 1, template_var 0))),
         template_app
          (template_app (template_hole 3, template_var 1),
           template_app (template_hole 0, template_var 0))))),
    ("Word_Lemmas.and_eq_0_is_nth",
     "?y = 1 << ?n ==> (and ?x ?y = 0) = (~ bit ?x ?n)",
     template_implication
      ([template_equation
         (template_var 2,
          template_app
           (template_app (template_hole 6, template_hole 5),
            template_var 1))],
       template_equation
        (template_app
          (template_app
            (template_hole 7,
             template_app
              (template_app (template_hole 3, template_var 0),
               template_var 2)),
           template_hole 2),
         template_app
          (template_hole 1,
           template_app
            (template_app (template_hole 0, template_var 0),
             template_var 1))))),
    ("Word_Lemmas.unat_of_ucast_then_shift_eq_unat_of_shift",
     "LENGTH(?'a) <= LENGTH(?'b) ==>
      unat (UCAST(?'a \<rightarrow> ?'b) ?x >> ?n) = unat (?x >> ?n)",
     template_implication
      ([template_inequation
         (less_equals, template_app (template_hole 9, template_hole 8),
          template_app (template_hole 7, template_hole 6))],
       template_equation
        (template_app
          (template_hole 4,
           template_app
            (template_app
              (template_hole 3,
               template_app (template_hole 2, template_var 1)),
             template_var 0)),
         template_app
          (template_hole 1,
           template_app
            (template_app (template_hole 0, template_var 1),
             template_var 0))))),
    ("Word_Lemmas.word_and_notzeroD",
     "and ?w ?w' ~= (0::?'a) ==> ?w ~= (0::?'a) & ?w' ~= (0::?'a)",
     template_implication
      ([template_negation
         (
            template_equation
             (template_app
               (template_app (template_hole 2, template_var 1),
                template_var 0),
              template_hole 1)
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 0,
               template_app
                (template_hole 4,
                 template_app
                  (template_app (template_hole 3, template_var 1),
                   template_hole 1))),
             template_app
              (template_hole 4,
               template_app
                (template_app (template_hole 3, template_var 0),
                 template_hole 1)))
           ))),
    ("Word_Lemmas.shiftr_not_mask_0",
     "LENGTH(?'a) <= ?n + ?m ==> and (?w >> ?n) (not (mask ?m)) = 0",
     template_implication
      ([template_inequation
         (less_equals, template_app (template_hole 8, template_hole 7),
          template_app
           (template_app (template_hole 6, template_var 2),
            template_var 1))],
       template_equation
        (template_app
          (template_app
            (template_hole 4,
             template_app
              (template_app (template_hole 3, template_var 0),
               template_var 2)),
           template_app
            (template_hole 2,
             template_app (template_hole 1, template_var 1))),
         template_hole 0))),
    ("Word_Lemmas.sint_eq_uint_2pl",
     "?a < 2 ^ (LENGTH(?'a) - 1) ==> sint ?a = uint ?a",
     template_implication
      ([template_inequation
         (less_than, template_var 0,
          template_app
           (template_app
             (template_hole 10,
              template_app
               (template_hole 9,
                template_app (template_hole 8, template_hole 7))),
            template_app
             (template_app
               (template_hole 6,
                template_app (template_hole 5, template_hole 4)),
              template_hole 3)))],
       template_equation
        (template_app (template_hole 1, template_var 0),
         template_app (template_hole 0, template_var 0)))),
    ("Word_Lemmas.unat_2tp_if",
     "unat (2 ^ ?n) = (if ?n < LENGTH(?'a) then 2 ^ ?n else 0)",
     template_equation
      (template_app
        (template_hole 11,
         template_app
          (template_app
            (template_hole 10,
             template_app
              (template_hole 9,
               template_app (template_hole 8, template_hole 7))),
           template_var 0)),
       template_app
        (template_app
          (template_app
            (template_hole 6,
             template_app
              (template_app (template_hole 5, template_var 0),
               template_app (template_hole 4, template_hole 3))),
           template_app
            (template_app
              (template_hole 2,
               template_app
                (template_hole 1,
                 template_app (template_hole 8, template_hole 7))),
             template_var 0)),
         template_hole 0))),
    ("Word_Lemmas.shiftr_mask_eq'",
     "?m = size ?x - ?n ==> and (?x >> ?n) (mask ?m) = ?x >> ?n",
     template_implication
      ([template_equation
         (template_var 2,
          template_app
           (template_app
             (template_hole 5,
              template_app (template_hole 4, template_var 1)),
            template_var 0))],
       template_equation
        (template_app
          (template_app
            (template_hole 2,
             template_app
              (template_app (template_hole 1, template_var 1),
               template_var 0)),
           template_app (template_hole 0, template_var 2)),
         template_app
          (template_app (template_hole 1, template_var 1),
           template_var 0)))),
    ("Word_Lemmas.shift_then_mask_eq_shift_low_bits",
     "?x <= mask (?low_bits + ?high_bits) ==>
      and (?x >> ?low_bits) (mask ?high_bits) = ?x >> ?low_bits",
     template_implication
      ([template_inequation
         (less_equals, template_var 2,
          template_app
           (template_hole 4,
            template_app
             (template_app (template_hole 3, template_var 1),
              template_var 0)))],
       template_equation
        (template_app
          (template_app
            (template_hole 1,
             template_app
              (template_app (template_hole 0, template_var 2),
               template_var 1)),
           template_app (template_hole 4, template_var 0)),
         template_app
          (template_app (template_hole 0, template_var 2),
           template_var 1)))),
    ("Word_Lemmas.ucast_down",
     "source_size REVCAST(?'b \<rightarrow> ?'a) =
      target_size REVCAST(?'b \<rightarrow> ?'a) + ?n ==>
      UCAST(?'b \<rightarrow> ?'a) ?w =
      word_reverse
       (UCAST(?'b \<rightarrow> ?'a) (drop_bit ?n (word_reverse ?w)))",
     template_implication
      ([template_equation
         (template_app (template_hole 8, template_hole 7),
          template_app
           (template_app
             (template_hole 6,
              template_app (template_hole 5, template_hole 7)),
            template_var 1))],
       template_equation
        (template_app (template_hole 3, template_var 0),
         template_app
          (template_hole 2,
           template_app
            (template_hole 3,
             template_app
              (template_app (template_hole 1, template_var 1),
               template_app (template_hole 0, template_var 0))))))),
    ("Word_Lemmas.ucast_up",
     "source_size REVCAST(?'b \<rightarrow> ?'a) + ?n =
      target_size REVCAST(?'b \<rightarrow> ?'a) ==>
      UCAST(?'b \<rightarrow> ?'a) ?w =
      word_reverse
       (push_bit ?n (UCAST(?'b \<rightarrow> ?'a) (word_reverse ?w)))",
     template_implication
      ([template_equation
         (template_app
           (template_app
             (template_hole 8,
              template_app (template_hole 7, template_hole 6)),
            template_var 1),
          template_app (template_hole 5, template_hole 6))],
       template_equation
        (template_app (template_hole 3, template_var 0),
         template_app
          (template_hole 2,
           template_app
            (template_app (template_hole 1, template_var 1),
             template_app
              (template_hole 3,
               template_app (template_hole 0, template_var 0))))))),
    ("Word_Lemmas.shiftr_and_eq_shiftl",
     "and (?w >> ?n) ?x = ?y ==> and ?w (?x << ?n) = ?y << ?n",
     template_implication
      ([template_equation
         (template_app
           (template_app
             (template_hole 2,
              template_app
               (template_app (template_hole 1, template_var 3),
                template_var 2)),
            template_var 1),
          template_var 0)],
       template_equation
        (template_app
          (template_app (template_hole 2, template_var 3),
           template_app
            (template_app (template_hole 0, template_var 1),
             template_var 2)),
         template_app
          (template_app (template_hole 0, template_var 0),
           template_var 2)))),
    ("Word_Lemmas.shiftr1_0_imp_only_lsb",
     "?x + 1 >> 1 = 0 ==> ?x = 0 | ?x + 1 = 0",
     template_implication
      ([template_equation
         (template_app
           (template_app
             (template_hole 5,
              template_app
               (template_app (template_hole 4, template_var 0),
                template_hole 3)),
            template_hole 2),
          template_hole 1)],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 0,
               template_app
                (template_app (template_hole 6, template_var 0),
                 template_hole 1)),
             template_app
              (template_app
                (template_hole 6,
                 template_app
                  (template_app (template_hole 4, template_var 0),
                   template_hole 3)),
               template_hole 1))
           ))),
    ("Word_Lemmas.ucast_ucast_eq_mask_shift",
     "?x <= mask (?low_bits + LENGTH(?'b)) ==>
      UCAST(?'b \<rightarrow> ?'a)
       (UCAST(?'a \<rightarrow> ?'b) (?x >> ?low_bits)) =
      ?x >> ?low_bits",
     template_implication
      ([template_inequation
         (less_equals, template_var 1,
          template_app
           (template_hole 7,
            template_app
             (template_app (template_hole 6, template_var 0),
              template_app (template_hole 5, template_hole 4))))],
       template_equation
        (template_app
          (template_hole 2,
           template_app
            (template_hole 1,
             template_app
              (template_app (template_hole 0, template_var 1),
               template_var 0))),
         template_app
          (template_app (template_hole 0, template_var 1),
           template_var 0)))),
    ("Word_Lemmas.word_enum_decomp_elem",
     "[?x .e. ?y] = ?as @ ?a # ?bs ==> ?x <= ?a & ?a <= ?y",
     template_implication
      ([template_equation
         (template_app
           (template_app (template_hole 4, template_var 4), template_var 3),
          template_app
           (template_app (template_hole 3, template_var 2),
            template_app
             (template_app (template_hole 2, template_var 1),
              template_var 0)))],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 1,
               template_app
                (template_app (template_hole 0, template_var 4),
                 template_var 1)),
             template_app
              (template_app (template_hole 0, template_var 1),
               template_var 3))
           ))),
    ("Word_Lemmas.word_and_or_mask_aligned",
     "[| is_aligned ?a ?n; ?b <= mask ?n |] ==> ?a + ?b = or ?a ?b",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 5, template_var 2),
              template_var 1)
            ),
        template_inequation
         (less_equals, template_var 0,
          template_app (template_hole 3, template_var 1))],
       template_equation
        (template_app
          (template_app (template_hole 1, template_var 2), template_var 0),
         template_app
          (template_app (template_hole 0, template_var 2),
           template_var 0)))),
    ("Word_Lemmas.word_and_or_mask_aligned2",
     "[| is_aligned ?b ?n; ?a <= mask ?n |] ==> ?a + ?b = or ?a ?b",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 5, template_var 2),
              template_var 1)
            ),
        template_inequation
         (less_equals, template_var 0,
          template_app (template_hole 3, template_var 1))],
       template_equation
        (template_app
          (template_app (template_hole 1, template_var 0), template_var 2),
         template_app
          (template_app (template_hole 0, template_var 0),
           template_var 2)))),
    ("Word_Lemmas.of_nat_unat_le_mask_ucast",
     "[| word_of_nat (unat ?t) = ?w; ?t <= mask LENGTH(?'a) |]
      ==> ?t = UCAST(?'a \<rightarrow> ?'b) ?w",
     template_implication
      ([template_equation
         (template_app
           (template_hole 7,
            template_app (template_hole 6, template_var 1)),
          template_var 0),
        template_inequation
         (less_equals, template_var 1,
          template_app
           (template_hole 4,
            template_app (template_hole 3, template_hole 2)))],
       template_equation
        (template_var 1, template_app (template_hole 0, template_var 0)))),
    ("Word_Lemmas.word_and_1_shiftls",
     "and ?x 4 = (if bit ?x 2 then 1 << 2 else 0)",
     template_equation
      (template_app
        (template_app (template_hole 9, template_var 0),
         template_app
          (template_hole 8,
           template_app
            (template_hole 7,
             template_app (template_hole 7, template_hole 6)))),
       template_app
        (template_app
          (template_app
            (template_hole 5,
             template_app
              (template_app (template_hole 4, template_var 0),
               template_app
                (template_hole 3,
                 template_app (template_hole 7, template_hole 6)))),
           template_app
            (template_app (template_hole 2, template_hole 1),
             template_app
              (template_hole 3,
               template_app (template_hole 7, template_hole 6)))),
         template_hole 0))),
    ("Word_Lemmas.t2n_mask_eq_if",
     "and (2 ^ ?n) (mask ?m) = (if ?n < ?m then 2 ^ ?n else 0)",
     template_equation
      (template_app
        (template_app
          (template_hole 8,
           template_app
            (template_app
              (template_hole 7,
               template_app
                (template_hole 6,
                 template_app (template_hole 5, template_hole 4))),
             template_var 1)),
         template_app (template_hole 3, template_var 0)),
       template_app
        (template_app
          (template_app
            (template_hole 2,
             template_app
              (template_app (template_hole 1, template_var 1),
               template_var 0)),
           template_app
            (template_app
              (template_hole 7,
               template_app
                (template_hole 6,
                 template_app (template_hole 5, template_hole 4))),
             template_var 1)),
         template_hole 0))),
    ("Word_Lemmas.unat_of_ucast_then_mask_eq_unat_of_mask",
     "LENGTH(?'a) <= LENGTH(?'b) ==>
      unat (and (UCAST(?'a \<rightarrow> ?'b) ?x) (mask ?m)) =
      unat (and ?x (mask ?m))",
     template_implication
      ([template_inequation
         (less_equals, template_app (template_hole 11, template_hole 10),
          template_app (template_hole 9, template_hole 8))],
       template_equation
        (template_app
          (template_hole 6,
           template_app
            (template_app
              (template_hole 5,
               template_app (template_hole 4, template_var 1)),
             template_app (template_hole 3, template_var 0))),
         template_app
          (template_hole 2,
           template_app
            (template_app (template_hole 1, template_var 1),
             template_app (template_hole 0, template_var 0)))))),
    ("Word_Lemmas.mask_shifl_overlap_zero",
     "?a + ?c <= ?b ==> and (and ?p (mask ?a) << ?c) (not (mask ?b)) = 0",
     template_implication
      ([template_inequation
         (less_equals,
          template_app
           (template_app (template_hole 6, template_var 3), template_var 2),
          template_var 1)],
       template_equation
        (template_app
          (template_app
            (template_hole 4,
             template_app
              (template_app
                (template_hole 3,
                 template_app
                  (template_app (template_hole 4, template_var 0),
                   template_app (template_hole 2, template_var 3))),
               template_var 2)),
           template_app
            (template_hole 1,
             template_app (template_hole 2, template_var 1))),
         template_hole 0))),
    ("Word_Lemmas.plus_mask_AND_NOT_mask_eq",
     "and ?x (not (mask ?n)) = ?x ==>
      and (?x + mask ?n) (not (mask ?n)) = ?x",
     template_implication
      ([template_equation
         (template_app
           (template_app (template_hole 3, template_var 1),
            template_app
             (template_hole 2,
              template_app (template_hole 1, template_var 0))),
          template_var 1)],
       template_equation
        (template_app
          (template_app
            (template_hole 3,
             template_app
              (template_app (template_hole 0, template_var 1),
               template_app (template_hole 1, template_var 0))),
           template_app
            (template_hole 2,
             template_app (template_hole 1, template_var 0))),
         template_var 1))),
    ("Word_Lemmas.ucast_ucast_mask_eq",
     "[| UCAST(?'a \<rightarrow> ?'b) ?x = ?y;
         and ?x (mask LENGTH(?'b)) = ?x |]
      ==> ?x = UCAST(?'b \<rightarrow> ?'a) ?y",
     template_implication
      ([template_equation
         (template_app (template_hole 6, template_var 1), template_var 0),
        template_equation
         (template_app
           (template_app (template_hole 4, template_var 1),
            template_app
             (template_hole 3,
              template_app (template_hole 2, template_hole 1))),
          template_var 1)],
       template_equation
        (template_var 1, template_app (template_hole 0, template_var 0)))),
    ("Word_Lemmas.le_mask_shiftl_le_mask",
     "[| ?s = ?m + ?n; ?x <= mask ?n |] ==> ?x << ?m <= mask ?s",
     template_implication
      ([template_equation
         (template_var 3,
          template_app
           (template_app (template_hole 3, template_var 2),
            template_var 1)),
        template_inequation
         (less_equals, template_var 0,
          template_app (template_hole 1, template_var 1))],
       template_inequation
        (less_equals,
         template_app
          (template_app (template_hole 0, template_var 0), template_var 2),
         template_app (template_hole 1, template_var 3)))),
    ("Word_Lemmas.ucast_up_eq",
     "[| UCAST(?'c \<rightarrow> ?'b) ?x = UCAST(?'d \<rightarrow> ?'b) ?y;
         LENGTH(?'a) <= LENGTH(?'b) |]
      ==> UCAST(?'c \<rightarrow> ?'a) ?x =
          UCAST(?'d \<rightarrow> ?'a) ?y",
     template_implication
      ([template_equation
         (template_app (template_hole 9, template_var 1),
          template_app (template_hole 8, template_var 0)),
        template_inequation
         (less_equals, template_app (template_hole 6, template_hole 5),
          template_app (template_hole 4, template_hole 3))],
       template_equation
        (template_app (template_hole 1, template_var 1),
         template_app (template_hole 0, template_var 0)))),
    ("Word_Lemmas.mask_AND_less_0",
     "[| and ?x (mask ?n) = 0; ?m <= ?n |] ==> and ?x (mask ?m) = 0",
     template_implication
      ([template_equation
         (template_app
           (template_app (template_hole 3, template_var 2),
            template_app (template_hole 2, template_var 1)),
          template_hole 1),
        template_inequation (less_equals, template_var 0, template_var 1)],
       template_equation
        (template_app
          (template_app (template_hole 3, template_var 2),
           template_app (template_hole 2, template_var 0)),
         template_hole 1))),
    ("Word_Lemmas.bit_shiftl_word_iff",
     "bit (?w << ?m) ?n = (?m <= ?n & ?n < LENGTH(?'a) & bit ?w (?n - ?m))",
     template_equation
      (template_app
        (template_app
          (template_hole 7,
           template_app
            (template_app (template_hole 6, template_var 2),
             template_var 1)),
         template_var 0),
       template_app
        (template_app
          (template_hole 5,
           template_app
            (template_app (template_hole 4, template_var 1),
             template_var 0)),
         template_app
          (template_app
            (template_hole 5,
             template_app
              (template_app (template_hole 3, template_var 0),
               template_app (template_hole 2, template_hole 1))),
           template_app
            (template_app (template_hole 7, template_var 2),
             template_app
              (template_app (template_hole 0, template_var 0),
               template_var 1)))))),
    ("Word_Lemmas.nth_shiftl'",
     "bit (?w << ?m) ?n = (?n < size ?w & ?m <= ?n & bit ?w (?n - ?m))",
     template_equation
      (template_app
        (template_app
          (template_hole 6,
           template_app
            (template_app (template_hole 5, template_var 2),
             template_var 1)),
         template_var 0),
       template_app
        (template_app
          (template_hole 4,
           template_app
            (template_app (template_hole 3, template_var 0),
             template_app (template_hole 2, template_var 2))),
         template_app
          (template_app
            (template_hole 4,
             template_app
              (template_app (template_hole 1, template_var 1),
               template_var 0)),
           template_app
            (template_app (template_hole 6, template_var 2),
             template_app
              (template_app (template_hole 0, template_var 0),
               template_var 1)))))),
    ("Word_Lemmas.nth_shiftl",
     "bit (?w << ?m) ?n = (?n < LENGTH(?'a) & ?m <= ?n & bit ?w (?n - ?m))",
     template_equation
      (template_app
        (template_app
          (template_hole 7,
           template_app
            (template_app (template_hole 6, template_var 2),
             template_var 1)),
         template_var 0),
       template_app
        (template_app
          (template_hole 5,
           template_app
            (template_app (template_hole 4, template_var 0),
             template_app (template_hole 3, template_hole 2))),
         template_app
          (template_app
            (template_hole 5,
             template_app
              (template_app (template_hole 1, template_var 1),
               template_var 0)),
           template_app
            (template_app (template_hole 7, template_var 2),
             template_app
              (template_app (template_hole 0, template_var 0),
               template_var 1)))))),
    ("Word_Lemmas.word_and_1_shiftls'",
     "and ?x (1 << 2) = (if bit ?x 2 then 1 << 2 else 0)",
     template_equation
      (template_app
        (template_app (template_hole 8, template_var 0),
         template_app
          (template_app (template_hole 7, template_hole 6),
           template_app
            (template_hole 5,
             template_app (template_hole 4, template_hole 3)))),
       template_app
        (template_app
          (template_app
            (template_hole 2,
             template_app
              (template_app (template_hole 1, template_var 0),
               template_app
                (template_hole 5,
                 template_app (template_hole 4, template_hole 3)))),
           template_app
            (template_app (template_hole 7, template_hole 6),
             template_app
              (template_hole 5,
               template_app (template_hole 4, template_hole 3)))),
         template_hole 0))),
    ("Word_Lemmas.is_aligned_mask_out_add_eq",
     "is_aligned ?p ?n ==>
      and (?p + ?x) (not (mask ?n)) = ?p + and ?x (not (mask ?n))",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 5, template_var 2),
              template_var 1)
            )],
       template_equation
        (template_app
          (template_app
            (template_hole 3,
             template_app
              (template_app (template_hole 2, template_var 2),
               template_var 0)),
           template_app
            (template_hole 1,
             template_app (template_hole 0, template_var 1))),
         template_app
          (template_app (template_hole 2, template_var 2),
           template_app
            (template_app (template_hole 3, template_var 0),
             template_app
              (template_hole 1,
               template_app (template_hole 0, template_var 1))))))),
    ("Word_Lemmas.aligned_bump_down",
     "is_aligned ?x ?n ==> and (?x - 1) (not (mask ?n)) = ?x - 2 ^ ?n",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 10, template_var 1),
              template_var 0)
            )],
       template_equation
        (template_app
          (template_app
            (template_hole 8,
             template_app
              (template_app (template_hole 7, template_var 1),
               template_hole 6)),
           template_app
            (template_hole 5,
             template_app (template_hole 4, template_var 0))),
         template_app
          (template_app (template_hole 7, template_var 1),
           template_app
            (template_app
              (template_hole 3,
               template_app
                (template_hole 2,
                 template_app (template_hole 1, template_hole 0))),
             template_var 0))))),
    ("Word_Lemmas.shiftr_shiftl2",
     "?b < ?c ==> ?a >> ?b << ?c = and (?a << ?c - ?b) (not (mask ?c))",
     template_implication
      ([template_inequation (less_than, template_var 2, template_var 1)],
       template_equation
        (template_app
          (template_app
            (template_hole 5,
             template_app
              (template_app (template_hole 4, template_var 0),
               template_var 2)),
           template_var 1),
         template_app
          (template_app
            (template_hole 3,
             template_app
              (template_app (template_hole 5, template_var 0),
               template_app
                (template_app (template_hole 2, template_var 1),
                 template_var 2))),
           template_app
            (template_hole 1,
             template_app (template_hole 0, template_var 1)))))),
    ("Word_Lemmas.shiftr_shiftl1",
     "?c <= ?b ==> ?a >> ?b << ?c = and (?a >> ?b - ?c) (not (mask ?c))",
     template_implication
      ([template_inequation (less_equals, template_var 2, template_var 1)],
       template_equation
        (template_app
          (template_app
            (template_hole 5,
             template_app
              (template_app (template_hole 4, template_var 0),
               template_var 1)),
           template_var 2),
         template_app
          (template_app
            (template_hole 3,
             template_app
              (template_app (template_hole 4, template_var 0),
               template_app
                (template_app (template_hole 2, template_var 1),
                 template_var 2))),
           template_app
            (template_hole 1,
             template_app (template_hole 0, template_var 2)))))),
    ("Word_Lemmas.and_and_mask_simple",
     "and ?y (mask ?n) = mask ?n ==>
      and (and ?x ?y) (mask ?n) = and ?x (mask ?n)",
     template_implication
      ([template_equation
         (template_app
           (template_app (template_hole 1, template_var 2),
            template_app (template_hole 0, template_var 1)),
          template_app (template_hole 0, template_var 1))],
       template_equation
        (template_app
          (template_app
            (template_hole 1,
             template_app
              (template_app (template_hole 1, template_var 0),
               template_var 2)),
           template_app (template_hole 0, template_var 1)),
         template_app
          (template_app (template_hole 1, template_var 0),
           template_app (template_hole 0, template_var 1))))),
    ("Word_Lemmas.shiftr_less_t2n",
     "?x < 2 ^ (?n + ?m) ==> ?x >> ?n < 2 ^ ?m",
     template_implication
      ([template_inequation
         (less_than, template_var 2,
          template_app
           (template_app
             (template_hole 5,
              template_app
               (template_hole 4,
                template_app (template_hole 3, template_hole 2))),
            template_app
             (template_app (template_hole 1, template_var 1),
              template_var 0)))],
       template_inequation
        (less_than,
         template_app
          (template_app (template_hole 0, template_var 2), template_var 1),
         template_app
          (template_app
            (template_hole 5,
             template_app
              (template_hole 4,
               template_app (template_hole 3, template_hole 2))),
           template_var 0)))),
    ("Word_Lemmas.mask_eq1_nochoice",
     "[| 1 < LENGTH(?'a); and ?x 1 = ?x |] ==> ?x = 0 | ?x = 1",
     template_implication
      ([template_inequation
         (less_than, template_hole 7,
          template_app (template_hole 6, template_hole 5)),
        template_equation
         (template_app
           (template_app (template_hole 3, template_var 0),
            template_hole 2),
          template_var 0)],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 1,
               template_app
                (template_app (template_hole 4, template_var 0),
                 template_hole 0)),
             template_app
              (template_app (template_hole 4, template_var 0),
               template_hole 2))
           ))),
    ("Word_Lemmas.const_le_unat",
     "[| ?b < 2 ^ LENGTH(?'a); word_of_nat ?b <= ?a |] ==> ?b <= unat ?a",
     template_implication
      ([template_inequation
         (less_than, template_var 1,
          template_app
           (template_app
             (template_hole 9,
              template_app
               (template_hole 8,
                template_app (template_hole 7, template_hole 6))),
            template_app (template_hole 5, template_hole 4))),
        template_inequation
         (less_equals, template_app (template_hole 2, template_var 1),
          template_var 0)],
       template_inequation
        (less_equals, template_var 1,
         template_app (template_hole 0, template_var 0)))),
    ("Word_Lemmas.sless_less_2pl",
     "[| ?b < 2 ^ (LENGTH(?'a) - 1); ?a < ?b |] ==> ?a <s ?b",
     template_implication
      ([template_inequation
         (less_than, template_var 1,
          template_app
           (template_app
             (template_hole 8,
              template_app
               (template_hole 7,
                template_app (template_hole 6, template_hole 5))),
            template_app
             (template_app
               (template_hole 4,
                template_app (template_hole 3, template_hole 2)),
              template_hole 1))),
        template_inequation (less_than, template_var 0, template_var 1)],
       template_predicate
        (
           template_app
            (template_app (template_hole 0, template_var 0), template_var 1)
           ))),
    ("Word_Lemmas.sle_le_2pl",
     "[| ?b < 2 ^ (LENGTH(?'a) - 1); ?a <= ?b |] ==> ?a \<le>s ?b",
     template_implication
      ([template_inequation
         (less_than, template_var 1,
          template_app
           (template_app
             (template_hole 9,
              template_app
               (template_hole 8,
                template_app (template_hole 7, template_hole 6))),
            template_app
             (template_app
               (template_hole 5,
                template_app (template_hole 4, template_hole 3)),
              template_hole 2))),
        template_inequation (less_equals, template_var 0, template_var 1)],
       template_predicate
        (
           template_app
            (template_app (template_hole 0, template_var 0), template_var 1)
           ))),
    ("Word_Lemmas.and_mask_cases",
     "?n < LENGTH(?'a) ==>
      and ?x (mask ?n) : word_of_nat ` set [0..<2 ^ ?n]",
     template_implication
      ([template_inequation
         (less_than, template_var 1,
          template_app (template_hole 13, template_hole 12))],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 11,
               template_app
                (template_app (template_hole 10, template_var 0),
                 template_app (template_hole 9, template_var 1))),
             template_app
              (template_app (template_hole 8, template_hole 7),
               template_app
                (template_hole 6,
                 template_app
                  (template_app (template_hole 5, template_hole 4),
                   template_app
                    (template_app
                      (template_hole 3,
                       template_app
                        (template_hole 2,
                         template_app (template_hole 1, template_hole 0))),
                     template_var 1)))))
           ))),
    ("Word_Lemmas.neg_mask_mask_unat",
     "?sz < LENGTH(?'a) ==>
      unat (and ?ptr (not (mask ?sz))) + unat (and ?ptr (mask ?sz)) =
      unat ?ptr",
     template_implication
      ([template_inequation
         (less_than, template_var 1,
          template_app (template_hole 7, template_hole 6))],
       template_equation
        (template_app
          (template_app
            (template_hole 4,
             template_app
              (template_hole 3,
               template_app
                (template_app (template_hole 2, template_var 0),
                 template_app
                  (template_hole 1,
                   template_app (template_hole 0, template_var 1))))),
           template_app
            (template_hole 3,
             template_app
              (template_app (template_hole 2, template_var 0),
               template_app (template_hole 0, template_var 1)))),
         template_app (template_hole 3, template_var 0)))),
    ("Word_Lemmas.upto_enum_inc_1_len",
     "?a < - 1 ==> [0 .e. 1 + ?a] = [0 .e. ?a] @ [1 + ?a]",
     template_implication
      ([template_inequation
         (less_than, template_var 0,
          template_app (template_hole 8, template_hole 7))],
       template_equation
        (template_app
          (template_app (template_hole 5, template_hole 4),
           template_app
            (template_app (template_hole 3, template_hole 7),
             template_var 0)),
         template_app
          (template_app
            (template_hole 2,
             template_app
              (template_app (template_hole 5, template_hole 4),
               template_var 0)),
           template_app
            (template_app
              (template_hole 1,
               template_app
                (template_app (template_hole 3, template_hole 7),
                 template_var 0)),
             template_hole 0))))),
    ("Word_Lemmas.and_mask_shiftr_comm",
     "?m <= size ?w ==>
      and ?w (mask ?m) >> ?n = and (?w >> ?n) (mask (?m - ?n))",
     template_implication
      ([template_inequation
         (less_equals, template_var 2,
          template_app (template_hole 5, template_var 1))],
       template_equation
        (template_app
          (template_app
            (template_hole 3,
             template_app
              (template_app (template_hole 2, template_var 1),
               template_app (template_hole 1, template_var 2))),
           template_var 0),
         template_app
          (template_app
            (template_hole 2,
             template_app
              (template_app (template_hole 3, template_var 1),
               template_var 0)),
           template_app
            (template_hole 1,
             template_app
              (template_app (template_hole 0, template_var 2),
               template_var 0)))))),
    ("Word_Lemmas.ucast_add_mask_aligned",
     "[| ?a <= mask ?n; is_aligned ?b ?n |]
      ==> UCAST(?'a \<rightarrow> ?'b) (?a + ?b) =
          UCAST(?'a \<rightarrow> ?'b) ?a +
          UCAST(?'a \<rightarrow> ?'b) ?b",
     template_implication
      ([template_inequation
         (less_equals, template_var 2,
          template_app (template_hole 5, template_var 1)),
        template_predicate
         (
            template_app
             (template_app (template_hole 4, template_var 0),
              template_var 1)
            )],
       template_equation
        (template_app
          (template_hole 2,
           template_app
            (template_app (template_hole 1, template_var 2),
             template_var 0)),
         template_app
          (template_app
            (template_hole 0,
             template_app (template_hole 2, template_var 2)),
           template_app (template_hole 2, template_var 0))))),
    ("Word_Lemmas.ucast_up_neq",
     "[| UCAST(?'c \<rightarrow> ?'b) ?x ~= UCAST(?'d \<rightarrow> ?'b) ?y;
         LENGTH(?'b) <= LENGTH(?'a) |]
      ==> UCAST(?'c \<rightarrow> ?'a) ?x ~=
          UCAST(?'d \<rightarrow> ?'a) ?y",
     template_implication
      ([template_negation
         (
            template_equation
             (template_app (template_hole 9, template_var 1),
              template_app (template_hole 8, template_var 0))
            ),
        template_inequation
         (less_equals, template_app (template_hole 6, template_hole 5),
          template_app (template_hole 4, template_hole 3))],
       template_negation
        (
           template_equation
            (template_app (template_hole 1, template_var 1),
             template_app (template_hole 0, template_var 0))
           ))),
    ("Word_Lemmas.scast_ucast_mask_compare",
     "(SCAST(?'b \<rightarrow> ?'a) (UCAST(?'a \<rightarrow> ?'b) ?w) =
       ?w) =
      (?w <= mask (LENGTH(?'b) - 1) | not (mask (LENGTH(?'b) - 1)) <= ?w)",
     template_equation
      (template_app
        (template_app
          (template_hole 10,
           template_app
            (template_hole 9,
             template_app (template_hole 8, template_var 0))),
         template_var 0),
       template_app
        (template_app
          (template_hole 7,
           template_app
            (template_app (template_hole 6, template_var 0),
             template_app
              (template_hole 5,
               template_app
                (template_app
                  (template_hole 4,
                   template_app (template_hole 3, template_hole 2)),
                 template_hole 1)))),
         template_app
          (template_app
            (template_hole 6,
             template_app
              (template_hole 0,
               template_app
                (template_hole 5,
                 template_app
                  (template_app
                    (template_hole 4,
                     template_app (template_hole 3, template_hole 2)),
                   template_hole 1)))),
           template_var 0)))),
    ("Word_Lemmas.shiftl_shiftr2",
     "?b < ?c ==>
      ?a << ?b >> ?c = and (?a >> ?c - ?b) (mask (size ?a - ?c))",
     template_implication
      ([template_inequation (less_than, template_var 2, template_var 1)],
       template_equation
        (template_app
          (template_app
            (template_hole 5,
             template_app
              (template_app (template_hole 4, template_var 0),
               template_var 2)),
           template_var 1),
         template_app
          (template_app
            (template_hole 3,
             template_app
              (template_app (template_hole 5, template_var 0),
               template_app
                (template_app (template_hole 2, template_var 1),
                 template_var 2))),
           template_app
            (template_hole 1,
             template_app
              (template_app
                (template_hole 2,
                 template_app (template_hole 0, template_var 0)),
               template_var 1)))))),
    ("Word_Lemmas.shiftl_shiftr3",
     "?b <= ?c ==>
      ?a << ?b >> ?c = and (?a >> ?c - ?b) (mask (size ?a - ?c))",
     template_implication
      ([template_inequation (less_equals, template_var 2, template_var 1)],
       template_equation
        (template_app
          (template_app
            (template_hole 5,
             template_app
              (template_app (template_hole 4, template_var 0),
               template_var 2)),
           template_var 1),
         template_app
          (template_app
            (template_hole 3,
             template_app
              (template_app (template_hole 5, template_var 0),
               template_app
                (template_app (template_hole 2, template_var 1),
                 template_var 2))),
           template_app
            (template_hole 1,
             template_app
              (template_app
                (template_hole 2,
                 template_app (template_hole 0, template_var 0)),
               template_var 1)))))),
    ("Word_Lemmas.shiftl_shiftr1",
     "?c <= ?b ==>
      ?a << ?b >> ?c = and ?a (mask (size ?a - ?b)) << ?b - ?c",
     template_implication
      ([template_inequation (less_equals, template_var 2, template_var 1)],
       template_equation
        (template_app
          (template_app
            (template_hole 5,
             template_app
              (template_app (template_hole 4, template_var 0),
               template_var 1)),
           template_var 2),
         template_app
          (template_app
            (template_hole 4,
             template_app
              (template_app (template_hole 3, template_var 0),
               template_app
                (template_hole 2,
                 template_app
                  (template_app
                    (template_hole 1,
                     template_app (template_hole 0, template_var 0)),
                   template_var 1)))),
           template_app
            (template_app (template_hole 1, template_var 1),
             template_var 2))))),
    ("Word_Lemmas.word_two_power_neg_ineq",
     "2 ^ ?m ~= 0 ==> 2 ^ ?n <= - (2 ^ ?m)",
     template_implication
      ([template_negation
         (
            template_equation
             (template_app
               (template_app
                 (template_hole 6,
                  template_app
                   (template_hole 5,
                    template_app (template_hole 4, template_hole 3))),
                template_var 1),
              template_hole 2)
            )],
       template_inequation
        (less_equals,
         template_app
          (template_app
            (template_hole 6,
             template_app
              (template_hole 5,
               template_app (template_hole 4, template_hole 3))),
           template_var 0),
         template_app
          (template_hole 0,
           template_app
            (template_app
              (template_hole 6,
               template_app
                (template_hole 5,
                 template_app (template_hole 4, template_hole 3))),
             template_var 1))))),
    ("Word_Lemmas.unat_shiftr_less_t2n",
     "unat ?x < 2 ^ (?n + ?m) ==> unat (?x >> ?n) < 2 ^ ?m",
     template_implication
      ([template_inequation
         (less_than, template_app (template_hole 6, template_var 2),
          template_app
           (template_app
             (template_hole 5,
              template_app
               (template_hole 4,
                template_app (template_hole 3, template_hole 2))),
            template_app
             (template_app (template_hole 1, template_var 1),
              template_var 0)))],
       template_inequation
        (less_than,
         template_app
          (template_hole 6,
           template_app
            (template_app (template_hole 0, template_var 2),
             template_var 1)),
         template_app
          (template_app
            (template_hole 5,
             template_app
              (template_hole 4,
               template_app (template_hole 3, template_hole 2))),
           template_var 0)))),
    ("Word_Lemmas.mask_eq_ucast_eq",
     "[| and ?x (mask LENGTH(?'a)) = ?x; LENGTH(?'a) <= LENGTH(?'b) |]
      ==> UCAST(?'a \<rightarrow> ?'b) (UCAST(?'c \<rightarrow> ?'a) ?x) =
          UCAST(?'c \<rightarrow> ?'b) ?x",
     template_implication
      ([template_equation
         (template_app
           (template_app (template_hole 10, template_var 0),
            template_app
             (template_hole 9,
              template_app (template_hole 8, template_hole 7))),
          template_var 0),
        template_inequation
         (less_equals, template_app (template_hole 8, template_hole 7),
          template_app (template_hole 5, template_hole 4))],
       template_equation
        (template_app
          (template_hole 2, template_app (template_hole 1, template_var 0)),
         template_app (template_hole 0, template_var 0)))),
    ("Word_Lemmas.le_shiftr'",
     "[| ?u >> ?n <= ?v >> ?n; ?u >> ?n ~= ?v >> ?n |] ==> ?u <= ?v",
     template_implication
      ([template_inequation
         (less_equals,
          template_app
           (template_app (template_hole 2, template_var 2), template_var 1),
          template_app
           (template_app (template_hole 2, template_var 0),
            template_var 1)),
        template_negation
         (
            template_equation
             (template_app
               (template_app (template_hole 2, template_var 2),
                template_var 1),
              template_app
               (template_app (template_hole 2, template_var 0),
                template_var 1))
            )],
       template_inequation (less_equals, template_var 2, template_var 0))),
    ("Word_Lemmas.shiftr_eqD",
     "[| ?x >> ?n = ?y >> ?n; is_aligned ?x ?n; is_aligned ?y ?n |]
      ==> ?x = ?y",
     template_implication
      ([template_equation
         (template_app
           (template_app (template_hole 1, template_var 2), template_var 1),
          template_app
           (template_app (template_hole 1, template_var 0),
            template_var 1)),
        template_predicate
         (
            template_app
             (template_app (template_hole 0, template_var 2),
              template_var 1)
            ),
        template_predicate
         (
            template_app
             (template_app (template_hole 0, template_var 0),
              template_var 1)
            )],
       template_equation (template_var 2, template_var 0))),
    ("Word_Lemmas.scast_ucast_high_bits",
     "(SCAST(?'b \<rightarrow> ?'a) (UCAST(?'a \<rightarrow> ?'b) ?w) =
       ?w) =
      (ALL i:{LENGTH(?'b)..<size ?w}. bit ?w i = bit ?w (LENGTH(?'b) - 1))",
     template_equation
      (template_app
        (template_app
          (template_hole 10,
           template_app
            (template_hole 9,
             template_app (template_hole 8, template_var 0))),
         template_var 0),
       template_app
        (template_app
          (template_hole 7,
           template_app
            (template_app
              (template_hole 6,
               template_app (template_hole 5, template_hole 4)),
             template_app (template_hole 3, template_var 0))),
         t_empty))),
    ("Word_Lemmas.neg_mask_add",
     "and ?y (mask ?n) = 0 ==>
      and (?x + ?y) (not (mask ?n)) = and ?x (not (mask ?n)) + ?y",
     template_implication
      ([template_equation
         (template_app
           (template_app (template_hole 4, template_var 2),
            template_app (template_hole 3, template_var 1)),
          template_hole 2)],
       template_equation
        (template_app
          (template_app
            (template_hole 4,
             template_app
              (template_app (template_hole 1, template_var 0),
               template_var 2)),
           template_app
            (template_hole 0,
             template_app (template_hole 3, template_var 1))),
         template_app
          (template_app
            (template_hole 1,
             template_app
              (template_app (template_hole 4, template_var 0),
               template_app
                (template_hole 0,
                 template_app (template_hole 3, template_var 1)))),
           template_var 2)))),
    ("Word_Lemmas.ucast_ucast_mask_shift",
     "?a <= LENGTH(?'a) + ?b ==>
      UCAST(?'a \<rightarrow> ?'b)
       (UCAST(?'b \<rightarrow> ?'a) (and ?p (mask ?a) >> ?b)) =
      and ?p (mask ?a) >> ?b",
     template_implication
      ([template_inequation
         (less_equals, template_var 2,
          template_app
           (template_app
             (template_hole 8,
              template_app (template_hole 7, template_hole 6)),
            template_var 1))],
       template_equation
        (template_app
          (template_hole 4,
           template_app
            (template_hole 3,
             template_app
              (template_app
                (template_hole 2,
                 template_app
                  (template_app (template_hole 1, template_var 0),
                   template_app (template_hole 0, template_var 2))),
               template_var 1))),
         template_app
          (template_app
            (template_hole 2,
             template_app
              (template_app (template_hole 1, template_var 0),
               template_app (template_hole 0, template_var 2))),
           template_var 1)))),
    ("Word_Lemmas.and_mask_shiftl_comm",
     "?m + ?n <= size ?w ==>
      and ?w (mask ?m) << ?n = and (?w << ?n) (mask (?m + ?n))",
     template_implication
      ([template_inequation
         (less_equals,
          template_app
           (template_app (template_hole 5, template_var 2), template_var 1),
          template_app (template_hole 4, template_var 0))],
       template_equation
        (template_app
          (template_app
            (template_hole 2,
             template_app
              (template_app (template_hole 1, template_var 0),
               template_app (template_hole 0, template_var 2))),
           template_var 1),
         template_app
          (template_app
            (template_hole 1,
             template_app
              (template_app (template_hole 2, template_var 0),
               template_var 1)),
           template_app
            (template_hole 0,
             template_app
              (template_app (template_hole 5, template_var 2),
               template_var 1)))))),
    ("Word_Lemmas.word_enum_prefix",
     "[?x .e. ?y] = ?as @ ?a # ?bs ==>
      ?as = (if ?x < ?a then [?x .e. ?a - 1] else [])",
     template_implication
      ([template_equation
         (template_app
           (template_app (template_hole 7, template_var 4), template_var 3),
          template_app
           (template_app (template_hole 6, template_var 2),
            template_app
             (template_app (template_hole 5, template_var 1),
              template_var 0)))],
       template_equation
        (template_var 2,
         template_app
          (template_app
            (template_app
              (template_hole 4,
               template_app
                (template_app (template_hole 3, template_var 4),
                 template_var 1)),
             template_app
              (template_app (template_hole 7, template_var 4),
               template_app
                (template_app (template_hole 2, template_var 1),
                 template_hole 1))),
           template_hole 0)))),
    ("Word_Lemmas.upto_enum_word_nth",
     "[| ?i <= ?j; ?k <= unat (?j - ?i) |]
      ==> [?i .e. ?j] ! ?k = ?i + word_of_nat ?k",
     template_implication
      ([template_inequation (less_equals, template_var 2, template_var 1),
        template_inequation
         (less_equals, template_var 0,
          template_app
           (template_hole 6,
            template_app
             (template_app (template_hole 5, template_var 1),
              template_var 2)))],
       template_equation
        (template_app
          (template_app
            (template_hole 3,
             template_app
              (template_app (template_hole 2, template_var 2),
               template_var 1)),
           template_var 0),
         template_app
          (template_app (template_hole 1, template_var 2),
           template_app (template_hole 0, template_var 0))))),
    ("Word_Lemmas.ucast_le_up_down_iff",
     "[| LENGTH(?'a) <= LENGTH(?'b);
         ?x <= UCAST(?'a \<rightarrow> ?'b) (- 1) |]
      ==> (UCAST(?'b \<rightarrow> ?'a) ?x <= ?y) =
          (?x <= UCAST(?'a \<rightarrow> ?'b) ?y)",
     template_implication
      ([template_inequation
         (less_equals, template_app (template_hole 10, template_hole 9),
          template_app (template_hole 8, template_hole 7)),
        template_inequation
         (less_equals, template_var 1,
          template_app
           (template_hole 5,
            template_app (template_hole 4, template_hole 3)))],
       template_equation
        (template_app
          (template_app
            (template_hole 1,
             template_app (template_hole 0, template_var 1)),
           template_var 0),
         template_app
          (template_app (template_hole 6, template_var 1),
           template_app (template_hole 5, template_var 0))))),
    ("Word_Lemmas.mask_out_eq_0",
     "[| ?idx < 2 ^ ?sz; ?sz < LENGTH(?'a) |]
      ==> and (word_of_nat ?idx) (not (mask ?sz)) = 0",
     template_implication
      ([template_inequation
         (less_than, template_var 1,
          template_app
           (template_app
             (template_hole 11,
              template_app
               (template_hole 10,
                template_app (template_hole 9, template_hole 8))),
            template_var 0)),
        template_inequation
         (less_than, template_var 0,
          template_app (template_hole 7, template_hole 6))],
       template_equation
        (template_app
          (template_app
            (template_hole 4,
             template_app (template_hole 3, template_var 1)),
           template_app
            (template_hole 2,
             template_app (template_hole 1, template_var 0))),
         template_hole 0))),
    ("Word_Lemmas.is_aligned_mask_out_add_eq_sub",
     "is_aligned ?p ?n ==>
      and (?p + ?a - ?b) (not (mask ?n)) =
      ?p + and (?a - ?b) (not (mask ?n))",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 6, template_var 3),
              template_var 2)
            )],
       template_equation
        (template_app
          (template_app
            (template_hole 4,
             template_app
              (template_app
                (template_hole 3,
                 template_app
                  (template_app (template_hole 2, template_var 3),
                   template_var 1)),
               template_var 0)),
           template_app
            (template_hole 1,
             template_app (template_hole 0, template_var 2))),
         template_app
          (template_app (template_hole 2, template_var 3),
           template_app
            (template_app
              (template_hole 4,
               template_app
                (template_app (template_hole 3, template_var 1),
                 template_var 0)),
             template_app
              (template_hole 1,
               template_app (template_hole 0, template_var 2))))))),
    ("Word_Lemmas.test_bit_sbintrunc",
     "?i < LENGTH(?'a) ==>
      bit (word_of_int (signed_take_bit ?n (uint ?w))) ?i =
      (if ?n < ?i then bit ?w ?n else bit ?w ?i)",
     template_implication
      ([template_inequation
         (less_than, template_var 2,
          template_app (template_hole 7, template_hole 6))],
       template_equation
        (template_app
          (template_app
            (template_hole 4,
             template_app
              (template_hole 3,
               template_app
                (template_app (template_hole 2, template_var 1),
                 template_app (template_hole 1, template_var 0)))),
           template_var 2),
         template_app
          (template_app
            (template_app
              (template_hole 0,
               template_app
                (template_app (template_hole 8, template_var 1),
                 template_var 2)),
             template_app
              (template_app (template_hole 4, template_var 0),
               template_var 1)),
           template_app
            (template_app (template_hole 4, template_var 0),
             template_var 2))))),
    ("Word_Lemmas.unat_ucast_mask_shift",
     "?a <= LENGTH(?'a) + ?b ==>
      unat (UCAST(?'b \<rightarrow> ?'a) (and ?p (mask ?a) >> ?b)) =
      unat (and ?p (mask ?a) >> ?b)",
     template_implication
      ([template_inequation
         (less_equals, template_var 2,
          template_app
           (template_app
             (template_hole 9,
              template_app (template_hole 8, template_hole 7)),
            template_var 1))],
       template_equation
        (template_app
          (template_hole 5,
           template_app
            (template_hole 4,
             template_app
              (template_app
                (template_hole 3,
                 template_app
                  (template_app (template_hole 2, template_var 0),
                   template_app (template_hole 1, template_var 2))),
               template_var 1))),
         template_app
          (template_hole 0,
           template_app
            (template_app
              (template_hole 3,
               template_app
                (template_app (template_hole 2, template_var 0),
                 template_app (template_hole 1, template_var 2))),
             template_var 1))))),
    ("Word_Lemmas.of_nat_less_t2n",
     "word_of_nat ?i < 2 ^ ?n ==>
      ?n < LENGTH(?'a) & unat (word_of_nat ?i) < 2 ^ ?n",
     template_implication
      ([template_inequation
         (less_than, template_app (template_hole 11, template_var 1),
          template_app
           (template_app
             (template_hole 10,
              template_app
               (template_hole 9,
                template_app (template_hole 8, template_hole 7))),
            template_var 0))],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 6,
               template_app
                (template_app (template_hole 5, template_var 0),
                 template_app (template_hole 4, template_hole 3))),
             template_app
              (template_app
                (template_hole 5,
                 template_app
                  (template_hole 2,
                   template_app (template_hole 11, template_var 1))),
               template_app
                (template_app
                  (template_hole 1,
                   template_app
                    (template_hole 0,
                     template_app (template_hole 8, template_hole 7))),
                 template_var 0)))
           ))),
    ("Word_Lemmas.unat_less_iff",
     "[| unat ?a = ?b; ?c < 2 ^ LENGTH(?'a) |]
      ==> (?a < word_of_nat ?c) = (?b < ?c)",
     template_implication
      ([template_equation
         (template_app (template_hole 10, template_var 2), template_var 1),
        template_inequation
         (less_than, template_var 0,
          template_app
           (template_app
             (template_hole 8,
              template_app
               (template_hole 7,
                template_app (template_hole 6, template_hole 5))),
            template_app (template_hole 4, template_hole 3)))],
       template_equation
        (template_app
          (template_app (template_hole 1, template_var 2),
           template_app (template_hole 0, template_var 0)),
         template_app
          (template_app (template_hole 9, template_var 1),
           template_var 0)))),
    ("Word_Lemmas.shiftl_shiftr_id",
     "[| ?n < LENGTH(?'a); ?x < 2 ^ (LENGTH(?'a) - ?n) |]
      ==> ?x << ?n >> ?n = ?x",
     template_implication
      ([template_inequation
         (less_than, template_var 1,
          template_app (template_hole 10, template_hole 9)),
        template_inequation
         (less_than, template_var 0,
          template_app
           (template_app
             (template_hole 7,
              template_app
               (template_hole 6,
                template_app (template_hole 5, template_hole 4))),
            template_app
             (template_app
               (template_hole 3,
                template_app (template_hole 10, template_hole 9)),
              template_var 1)))],
       template_equation
        (template_app
          (template_app
            (template_hole 1,
             template_app
              (template_app (template_hole 0, template_var 0),
               template_var 1)),
           template_var 1),
         template_var 0))),
    ("Word_Lemmas.shiftr_less_t2n'",
     "[| and ?x (mask (?n + ?m)) = ?x; ?m < LENGTH(?'a) |]
      ==> ?x >> ?n < 2 ^ ?m",
     template_implication
      ([template_equation
         (template_app
           (template_app (template_hole 11, template_var 2),
            template_app
             (template_hole 10,
              template_app
               (template_app (template_hole 9, template_var 1),
                template_var 0))),
          template_var 2),
        template_inequation
         (less_than, template_var 0,
          template_app (template_hole 7, template_hole 6))],
       template_inequation
        (less_than,
         template_app
          (template_app (template_hole 4, template_var 2), template_var 1),
         template_app
          (template_app
            (template_hole 3,
             template_app
              (template_hole 2,
               template_app (template_hole 1, template_hole 0))),
           template_var 0)))),
    ("Word_Lemmas.unat_of_nat_minus_1",
     "[| ?n < 2 ^ LENGTH(?'a); ?n ~= 0 |]
      ==> unat (word_of_nat ?n - 1) = ?n - 1",
     template_implication
      ([template_inequation
         (less_than, template_var 0,
          template_app
           (template_app
             (template_hole 14,
              template_app
               (template_hole 13,
                template_app (template_hole 12, template_hole 11))),
            template_app (template_hole 10, template_hole 9))),
        template_negation
         (template_equation (template_var 0, template_hole 6))],
       template_equation
        (template_app
          (template_hole 5,
           template_app
            (template_app
              (template_hole 4,
               template_app (template_hole 3, template_var 0)),
             template_hole 2)),
         template_app
          (template_app (template_hole 1, template_var 0),
           template_hole 0)))),
    ("Word_Lemmas.unat_shiftr_le_bound",
     "[| 2 ^ (LENGTH(?'a) - ?n) - 1 <= ?bnd; 0 < ?n |]
      ==> unat (?x >> ?n) <= ?bnd",
     template_implication
      ([template_inequation
         (less_equals,
          template_app
           (template_app
             (template_hole 11,
              template_app
               (template_app
                 (template_hole 10,
                  template_app
                   (template_hole 9,
                    template_app (template_hole 8, template_hole 7))),
                template_app
                 (template_app
                   (template_hole 11,
                    template_app (template_hole 6, template_hole 5)),
                  template_var 2))),
            template_hole 4),
          template_var 1),
        template_inequation (less_than, template_hole 2, template_var 2)],
       template_inequation
        (less_equals,
         template_app
          (template_hole 1,
           template_app
            (template_app (template_hole 0, template_var 0),
             template_var 2)),
         template_var 1))),
    ("Word_Lemmas.mask_split_sum_twice",
     "?b <= ?a ==>
      and ?p (not (mask ?a)) + and (and ?p (mask ?a)) (not (mask ?b)) +
      and ?p (mask ?b) =
      ?p",
     template_implication
      ([template_inequation (less_equals, template_var 2, template_var 1)],
       template_equation
        (template_app
          (template_app
            (template_hole 3,
             template_app
              (template_app
                (template_hole 3,
                 template_app
                  (template_app (template_hole 2, template_var 0),
                   template_app
                    (template_hole 1,
                     template_app (template_hole 0, template_var 1)))),
               template_app
                (template_app
                  (template_hole 2,
                   template_app
                    (template_app (template_hole 2, template_var 0),
                     template_app (template_hole 0, template_var 1))),
                 template_app
                  (template_hole 1,
                   template_app (template_hole 0, template_var 2))))),
           template_app
            (template_app (template_hole 2, template_var 0),
             template_app (template_hole 0, template_var 2))),
         template_var 0))),
    ("Word_Lemmas.t2p_shiftr",
     "[| ?b <= ?a; ?a < LENGTH(?'a) |] ==> 2 ^ ?a >> ?b = 2 ^ (?a - ?b)",
     template_implication
      ([template_inequation (less_equals, template_var 1, template_var 0),
        template_inequation
         (less_than, template_var 0,
          template_app (template_hole 8, template_hole 7))],
       template_equation
        (template_app
          (template_app
            (template_hole 5,
             template_app
              (template_app
                (template_hole 4,
                 template_app
                  (template_hole 3,
                   template_app (template_hole 2, template_hole 1))),
               template_var 0)),
           template_var 1),
         template_app
          (template_app
            (template_hole 4,
             template_app
              (template_hole 3,
               template_app (template_hole 2, template_hole 1))),
           template_app
            (template_app (template_hole 0, template_var 0),
             template_var 1))))),
    ("Word_Lemmas.two_power_increasing_less_1",
     "[| ?n <= ?m; ?m <= LENGTH(?'a) |] ==> 2 ^ ?n - 1 <= 2 ^ ?m - 1",
     template_implication
      ([template_inequation (less_equals, template_var 1, template_var 0),
        template_inequation
         (less_equals, template_var 0,
          template_app (template_hole 8, template_hole 7))],
       template_inequation
        (less_equals,
         template_app
          (template_app
            (template_hole 5,
             template_app
              (template_app
                (template_hole 4,
                 template_app
                  (template_hole 3,
                   template_app (template_hole 2, template_hole 1))),
               template_var 1)),
           template_hole 0),
         template_app
          (template_app
            (template_hole 5,
             template_app
              (template_app
                (template_hole 4,
                 template_app
                  (template_hole 3,
                   template_app (template_hole 2, template_hole 1))),
               template_var 0)),
           template_hole 0)))),
    ("Word_Lemmas.shiftr_less_t2n3",
     "[| 2 ^ (?n + ?m) = 0; ?m < LENGTH(?'a) |] ==> ?x >> ?n < 2 ^ ?m",
     template_implication
      ([template_equation
         (template_app
           (template_app
             (template_hole 10,
              template_app
               (template_hole 9,
                template_app (template_hole 8, template_hole 7))),
            template_app
             (template_app (template_hole 6, template_var 2),
              template_var 1)),
          template_hole 5),
        template_inequation
         (less_than, template_var 1,
          template_app (template_hole 3, template_hole 2))],
       template_inequation
        (less_than,
         template_app
          (template_app (template_hole 0, template_var 0), template_var 2),
         template_app
          (template_app
            (template_hole 10,
             template_app
              (template_hole 9,
               template_app (template_hole 8, template_hole 7))),
           template_var 1)))),
    ("Word_Lemmas.shiftl_less_t2n",
     "[| ?x < 2 ^ (?m - ?n); ?m < LENGTH(?'a) |] ==> ?x << ?n < 2 ^ ?m",
     template_implication
      ([template_inequation
         (less_than, template_var 2,
          template_app
           (template_app
             (template_hole 8,
              template_app
               (template_hole 7,
                template_app (template_hole 6, template_hole 5))),
            template_app
             (template_app (template_hole 4, template_var 1),
              template_var 0))),
        template_inequation
         (less_than, template_var 1,
          template_app (template_hole 2, template_hole 1))],
       template_inequation
        (less_than,
         template_app
          (template_app (template_hole 0, template_var 2), template_var 0),
         template_app
          (template_app
            (template_hole 8,
             template_app
              (template_hole 7,
               template_app (template_hole 6, template_hole 5))),
           template_var 1)))),
    ("Word_Lemmas.upt_enum_offset_trivial",
     "[| ?x < 2 ^ LENGTH(?'a) - 1; ?n <= unat ?x |]
      ==> [0 .e. ?x] ! ?n = word_of_nat ?n",
     template_implication
      ([template_inequation
         (less_than, template_var 1,
          template_app
           (template_app
             (template_hole 14,
              template_app
               (template_app
                 (template_hole 13,
                  template_app
                   (template_hole 12,
                    template_app (template_hole 11, template_hole 10))),
                template_app (template_hole 9, template_hole 8))),
            template_hole 7)),
        template_inequation
         (less_equals, template_var 0,
          template_app (template_hole 5, template_var 1))],
       template_equation
        (template_app
          (template_app
            (template_hole 3,
             template_app
              (template_app (template_hole 2, template_hole 1),
               template_var 1)),
           template_var 0),
         template_app (template_hole 0, template_var 0)))),
    ("Word_Lemmas.word_sub_mono4",
     "[| ?y + ?x <= ?z + ?x; ?y <= ?y + ?x; ?z <= ?z + ?x |] ==> ?y <= ?z",
     template_implication
      ([template_inequation
         (less_equals,
          template_app
           (template_app (template_hole 0, template_var 2), template_var 1),
          template_app
           (template_app (template_hole 0, template_var 0),
            template_var 1)),
        template_inequation
         (less_equals, template_var 2,
          template_app
           (template_app (template_hole 0, template_var 2),
            template_var 1)),
        template_inequation
         (less_equals, template_var 0,
          template_app
           (template_app (template_hole 0, template_var 0),
            template_var 1))],
       template_inequation (less_equals, template_var 2, template_var 0))),
    ("Word_Lemmas.shiftr_w2p",
     "?x < LENGTH(?'a) ==>
      2 ^ ?x = 2 ^ (LENGTH(?'a) - 1) >> LENGTH(?'a) - 1 - ?x",
     template_implication
      ([template_inequation
         (less_than, template_var 0,
          template_app (template_hole 9, template_hole 8))],
       template_equation
        (template_app
          (template_app
            (template_hole 6,
             template_app
              (template_hole 5,
               template_app (template_hole 4, template_hole 3))),
           template_var 0),
         template_app
          (template_app
            (template_hole 2,
             template_app
              (template_app
                (template_hole 6,
                 template_app
                  (template_hole 5,
                   template_app (template_hole 4, template_hole 3))),
               template_app
                (template_app
                  (template_hole 1,
                   template_app (template_hole 9, template_hole 8)),
                 template_hole 0))),
           template_app
            (template_app
              (template_hole 1,
               template_app
                (template_app
                  (template_hole 1,
                   template_app (template_hole 9, template_hole 8)),
                 template_hole 0)),
             template_var 0))))),
    ("Word_Lemmas.ucast_less_shiftl_helper'",
     "[| LENGTH(?'b) + ?a < LENGTH(?'a); 2 ^ (LENGTH(?'b) + ?a) <= ?n |]
      ==> UCAST(?'b \<rightarrow> ?'a) ?x << ?a < ?n",
     template_implication
      ([template_inequation
         (less_than,
          template_app
           (template_app
             (template_hole 12,
              template_app (template_hole 11, template_hole 10)),
            template_var 2),
          template_app (template_hole 9, template_hole 8)),
        template_inequation
         (less_equals,
          template_app
           (template_app
             (template_hole 6,
              template_app
               (template_hole 5,
                template_app (template_hole 4, template_hole 3))),
            template_app
             (template_app
               (template_hole 12,
                template_app (template_hole 11, template_hole 10)),
              template_var 2)),
          template_var 1)],
       template_inequation
        (less_than,
         template_app
          (template_app
            (template_hole 1,
             template_app (template_hole 0, template_var 0)),
           template_var 2),
         template_var 1))),
    ("Word_Lemmas.leq_low_bits_iff_zero",
     "[| ?x <= mask (?low ?bits + ?high ?bits); ?x >> ?low_bits = 0 |]
      ==> (and ?x (mask ?low_bits) = 0) = (?x = 0)",
     template_implication
      ([template_inequation
         (less_equals, template_var 4,
          template_app
           (template_hole 6,
            template_app
             (template_app
               (template_hole 5,
                template_app (template_var 3, template_var 2)),
              template_app (template_var 1, template_var 2)))),
        template_equation
         (template_app
           (template_app (template_hole 3, template_var 4), template_var 0),
          template_hole 2)],
       template_bimplication
        (template_equation
          (template_app
            (template_app (template_hole 0, template_var 4),
             template_app (template_hole 6, template_var 0)),
           template_hole 2),
         template_equation (template_var 4, template_hole 2)))),
    ("Word_Lemmas.word_plus_mono_right_split",
     "[| unat (and ?x (mask ?sz)) + unat ?z < 2 ^ ?sz; ?sz < LENGTH(?'a) |]
      ==> ?x <= ?x + ?z",
     template_implication
      ([template_inequation
         (less_than,
          template_app
           (template_app
             (template_hole 11,
              template_app
               (template_hole 10,
                template_app
                 (template_app (template_hole 9, template_var 2),
                  template_app (template_hole 8, template_var 1)))),
            template_app (template_hole 10, template_var 0)),
          template_app
           (template_app
             (template_hole 7,
              template_app
               (template_hole 6,
                template_app (template_hole 5, template_hole 4))),
            template_var 1)),
        template_inequation
         (less_than, template_var 1,
          template_app (template_hole 3, template_hole 2))],
       template_inequation
        (less_equals, template_var 2,
         template_app
          (template_app (template_hole 0, template_var 2),
           template_var 0)))),
    ("Word_Lemmas.word_shift_zero",
     "[| ?x << ?n = 0; ?x <= 2 ^ ?m; ?m + ?n < LENGTH(?'a) |] ==> ?x = 0",
     template_implication
      ([template_equation
         (template_app
           (template_app (template_hole 10, template_var 2),
            template_var 1),
          template_hole 9),
        template_inequation
         (less_equals, template_var 2,
          template_app
           (template_app
             (template_hole 7,
              template_app
               (template_hole 6,
                template_app (template_hole 5, template_hole 4))),
            template_var 0)),
        template_inequation
         (less_than,
          template_app
           (template_app (template_hole 2, template_var 0), template_var 1),
          template_app (template_hole 1, template_hole 0))],
       template_equation (template_var 2, template_hole 9))),
    ("Word_Lemmas.bitfield_op_twice",
     "and (or (and ?x (not (mask ?n << ?m))) (and ?y (mask ?n) << ?m))
       (not (mask ?n << ?m)) =
      and ?x (not (mask ?n << ?m))",
     template_equation
      (template_app
        (template_app
          (template_hole 4,
           template_app
            (template_app
              (template_hole 3,
               template_app
                (template_app (template_hole 4, template_var 3),
                 template_app
                  (template_hole 2,
                   template_app
                    (template_app
                      (template_hole 1,
                       template_app (template_hole 0, template_var 2)),
                     template_var 1)))),
             template_app
              (template_app
                (template_hole 1,
                 template_app
                  (template_app (template_hole 4, template_var 0),
                   template_app (template_hole 0, template_var 2))),
               template_var 1))),
         template_app
          (template_hole 2,
           template_app
            (template_app
              (template_hole 1,
               template_app (template_hole 0, template_var 2)),
             template_var 1))),
       template_app
        (template_app (template_hole 4, template_var 3),
         template_app
          (template_hole 2,
           template_app
            (template_app
              (template_hole 1,
               template_app (template_hole 0, template_var 2)),
             template_var 1))))),
    ("Word_Lemmas.neg_mask_diff_bound",
     "?sz' <= ?sz ==>
      and ?ptr (not (mask ?sz')) - and ?ptr (not (mask ?sz))
      <= 2 ^ ?sz - 2 ^ ?sz'",
     template_implication
      ([template_inequation (less_equals, template_var 2, template_var 1)],
       template_inequation
        (less_equals,
         template_app
          (template_app
            (template_hole 7,
             template_app
              (template_app (template_hole 6, template_var 0),
               template_app
                (template_hole 5,
                 template_app (template_hole 4, template_var 2)))),
           template_app
            (template_app (template_hole 6, template_var 0),
             template_app
              (template_hole 5,
               template_app (template_hole 4, template_var 1)))),
         template_app
          (template_app
            (template_hole 7,
             template_app
              (template_app
                (template_hole 3,
                 template_app
                  (template_hole 2,
                   template_app (template_hole 1, template_hole 0))),
               template_var 1)),
           template_app
            (template_app
              (template_hole 3,
               template_app
                (template_hole 2,
                 template_app (template_hole 1, template_hole 0))),
             template_var 2))))),
    ("Word_Lemmas.shiftl_less_t2n'",
     "[| ?x < 2 ^ ?m; ?m + ?n < LENGTH(?'a) |]
      ==> ?x << ?n < 2 ^ (?m + ?n)",
     template_implication
      ([template_inequation
         (less_than, template_var 2,
          template_app
           (template_app
             (template_hole 8,
              template_app
               (template_hole 7,
                template_app (template_hole 6, template_hole 5))),
            template_var 1)),
        template_inequation
         (less_than,
          template_app
           (template_app (template_hole 3, template_var 1), template_var 0),
          template_app (template_hole 2, template_hole 1))],
       template_inequation
        (less_than,
         template_app
          (template_app (template_hole 0, template_var 2), template_var 0),
         template_app
          (template_app
            (template_hole 8,
             template_app
              (template_hole 7,
               template_app (template_hole 6, template_hole 5))),
           template_app
            (template_app (template_hole 3, template_var 1),
             template_var 0))))),
    ("Word_Lemmas.unat_shiftr_shiftl_mask_zero",
     "[| LENGTH(?'a) + ?b <= ?c + ?a; ?c < LENGTH(?'a) |]
      ==> unat (and (?q >> ?a << ?b) (not (mask ?c))) = 0",
     template_implication
      ([template_inequation
         (less_equals,
          template_app
           (template_app
             (template_hole 11,
              template_app (template_hole 10, template_hole 9)),
            template_var 3),
          template_app
           (template_app (template_hole 11, template_var 2),
            template_var 1)),
        template_inequation
         (less_than, template_var 2,
          template_app (template_hole 10, template_hole 9))],
       template_equation
        (template_app
          (template_hole 6,
           template_app
            (template_app
              (template_hole 5,
               template_app
                (template_app
                  (template_hole 4,
                   template_app
                    (template_app (template_hole 3, template_var 0),
                     template_var 1)),
                 template_var 3)),
             template_app
              (template_hole 2,
               template_app (template_hole 1, template_var 2)))),
         template_hole 0))),
    ("Word_Lemmas.unat_shiftl_less_t2n",
     "[| unat ?x < 2 ^ (?m - ?n); ?m < LENGTH(?'a) |]
      ==> unat (?x << ?n) < 2 ^ ?m",
     template_implication
      ([template_inequation
         (less_than, template_app (template_hole 8, template_var 2),
          template_app
           (template_app
             (template_hole 7,
              template_app
               (template_hole 6,
                template_app (template_hole 5, template_hole 4))),
            template_app
             (template_app (template_hole 3, template_var 1),
              template_var 0))),
        template_inequation
         (less_than, template_var 1,
          template_app (template_hole 2, template_hole 1))],
       template_inequation
        (less_than,
         template_app
          (template_hole 8,
           template_app
            (template_app (template_hole 0, template_var 2),
             template_var 0)),
         template_app
          (template_app
            (template_hole 7,
             template_app
              (template_hole 6,
               template_app (template_hole 5, template_hole 4))),
           template_var 1)))),
    ("Word_Lemmas.nth_sshiftr",
     "bit (?w >>> ?m) ?n =
      (?n < size ?w &
       (if size ?w <= ?n + ?m then bit ?w (size ?w - 1)
        else bit ?w (?n + ?m)))",
     template_equation
      (template_app
        (template_app
          (template_hole 9,
           template_app
            (template_app (template_hole 8, template_var 2),
             template_var 1)),
         template_var 0),
       template_app
        (template_app
          (template_hole 7,
           template_app
            (template_app (template_hole 6, template_var 0),
             template_app (template_hole 5, template_var 2))),
         template_app
          (template_app
            (template_app
              (template_hole 4,
               template_app
                (template_app
                  (template_hole 3,
                   template_app (template_hole 5, template_var 2)),
                 template_app
                  (template_app (template_hole 2, template_var 0),
                   template_var 1))),
             template_app
              (template_app (template_hole 9, template_var 2),
               template_app
                (template_app
                  (template_hole 1,
                   template_app (template_hole 5, template_var 2)),
                 template_hole 0))),
           template_app
            (template_app (template_hole 9, template_var 2),
             template_app
              (template_app (template_hole 2, template_var 0),
               template_var 1)))))),
    ("Word_Lemmas.word_shift_nonzero",
     "[| ?x <= 2 ^ ?m; ?m + ?n < LENGTH(?'a); ?x ~= 0 |] ==> ?x << ?n ~= 0",
     template_implication
      ([template_inequation
         (less_equals, template_var 2,
          template_app
           (template_app
             (template_hole 11,
              template_app
               (template_hole 10,
                template_app (template_hole 9, template_hole 8))),
            template_var 1)),
        template_inequation
         (less_than,
          template_app
           (template_app (template_hole 6, template_var 1), template_var 0),
          template_app (template_hole 5, template_hole 4)),
        template_negation
         (template_equation (template_var 2, template_hole 1))],
       template_negation
        (
           template_equation
            (template_app
              (template_app (template_hole 0, template_var 2),
               template_var 0),
             template_hole 1)
           ))),
    ("Word_Lemmas.shiftl_inj",
     "[| ?x << ?n = ?y << ?n; ?x <= mask (LENGTH(?'a) - ?n);
         ?y <= mask (LENGTH(?'a) - ?n) |]
      ==> ?x = ?y",
     template_implication
      ([template_equation
         (template_app
           (template_app (template_hole 5, template_var 2), template_var 1),
          template_app
           (template_app (template_hole 5, template_var 0),
            template_var 1)),
        template_inequation
         (less_equals, template_var 2,
          template_app
           (template_hole 3,
            template_app
             (template_app
               (template_hole 2,
                template_app (template_hole 1, template_hole 0)),
              template_var 1))),
        template_inequation
         (less_equals, template_var 0,
          template_app
           (template_hole 3,
            template_app
             (template_app
               (template_hole 2,
                template_app (template_hole 1, template_hole 0)),
              template_var 1)))],
       template_equation (template_var 2, template_var 0))),
    ("Word_Lemmas.bitfield_op_twice''",
     "[| not ?a = ?b << ?c; EX x. ?b = mask x |]
      ==> and (or (and ?x ?a) (and ?y ?b << ?c)) ?a = and ?x ?a",
     template_implication
      ([template_equation
         (template_app (template_hole 5, template_var 4),
          template_app
           (template_app (template_hole 4, template_var 3),
            template_var 2)),
        template_predicate (template_app (template_hole 3, t_empty))],
       template_equation
        (template_app
          (template_app
            (template_hole 1,
             template_app
              (template_app
                (template_hole 0,
                 template_app
                  (template_app (template_hole 1, template_var 1),
                   template_var 4)),
               template_app
                (template_app
                  (template_hole 4,
                   template_app
                    (template_app (template_hole 1, template_var 0),
                     template_var 3)),
                 template_var 2))),
           template_var 4),
         template_app
          (template_app (template_hole 1, template_var 1),
           template_var 4)))),
    ("Word_Lemmas.word_aligned_add_no_wrap_bounded",
     "[| ?w + 2 ^ ?n <= ?x; ?w + 2 ^ ?n ~= 0; is_aligned ?w ?n |]
      ==> ?w < ?x",
     template_implication
      ([template_inequation
         (less_equals,
          template_app
           (template_app (template_hole 9, template_var 2),
            template_app
             (template_app
               (template_hole 8,
                template_app
                 (template_hole 7,
                  template_app (template_hole 6, template_hole 5))),
              template_var 1)),
          template_var 0),
        template_negation
         (
            template_equation
             (template_app
               (template_app (template_hole 9, template_var 2),
                template_app
                 (template_app
                   (template_hole 8,
                    template_app
                     (template_hole 7,
                      template_app (template_hole 6, template_hole 5))),
                  template_var 1)),
              template_hole 2)
            ),
        template_predicate
         (
            template_app
             (template_app (template_hole 1, template_var 2),
              template_var 1)
            )],
       template_inequation (less_than, template_var 2, template_var 0))),
    ("Word_Lemmas.word_aligned_0_sum",
     "[| ?a + ?b = 0; is_aligned ?a ?n; ?b <= mask ?n; ?n < LENGTH(?'a) |]
      ==> ?a = 0 & ?b = 0",
     template_implication
      ([template_equation
         (template_app
           (template_app (template_hole 8, template_var 2), template_var 1),
          template_hole 7),
        template_predicate
         (
            template_app
             (template_app (template_hole 6, template_var 2),
              template_var 0)
            ),
        template_inequation
         (less_equals, template_var 1,
          template_app (template_hole 4, template_var 0)),
        template_inequation
         (less_than, template_var 0,
          template_app (template_hole 2, template_hole 1))],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 0,
               template_app
                (template_app (template_hole 9, template_var 2),
                 template_hole 7)),
             template_app
              (template_app (template_hole 9, template_var 1),
               template_hole 7))
           ))),
    ("Word_Lemmas.test_bit_sbintrunc_ucast",
     "?i < LENGTH(?'a) ==>
      bit (word_of_int
            (signed_take_bit (LENGTH(?'b) - 1)
              (uint (UCAST(?'a \<rightarrow> ?'b) ?w))))
       ?i =
      (if LENGTH(?'b) <= ?i then bit ?w (LENGTH(?'b) - 1) else bit ?w ?i)",
     template_implication
      ([template_inequation
         (less_than, template_var 1,
          template_app (template_hole 13, template_hole 12))],
       template_equation
        (template_app
          (template_app
            (template_hole 10,
             template_app
              (template_hole 9,
               template_app
                (template_app
                  (template_hole 8,
                   template_app
                    (template_app
                      (template_hole 7,
                       template_app (template_hole 6, template_hole 5)),
                     template_hole 4)),
                 template_app
                  (template_hole 3,
                   template_app (template_hole 2, template_var 0))))),
           template_var 1),
         template_app
          (template_app
            (template_app
              (template_hole 1,
               template_app
                (template_app
                  (template_hole 0,
                   template_app (template_hole 6, template_hole 5)),
                 template_var 1)),
             template_app
              (template_app (template_hole 10, template_var 0),
               template_app
                (template_app
                  (template_hole 7,
                   template_app (template_hole 6, template_hole 5)),
                 template_hole 4))),
           template_app
            (template_app (template_hole 10, template_var 0),
             template_var 1))))),
    ("Word_Lemmas.add_mult_aligned_neg_mask",
     "and ?m (2 ^ ?n - 1) = 0 ==>
      and (?x + ?y * ?m) (not (mask ?n)) =
      and ?x (not (mask ?n)) + ?y * ?m",
     template_implication
      ([template_equation
         (template_app
           (template_app (template_hole 11, template_var 3),
            template_app
             (template_app
               (template_hole 10,
                template_app
                 (template_app
                   (template_hole 9,
                    template_app
                     (template_hole 8,
                      template_app (template_hole 7, template_hole 6))),
                  template_var 2)),
              template_hole 5)),
          template_hole 4)],
       template_equation
        (template_app
          (template_app
            (template_hole 11,
             template_app
              (template_app (template_hole 3, template_var 1),
               template_app
                (template_app (template_hole 2, template_var 0),
                 template_var 3))),
           template_app
            (template_hole 1,
             template_app (template_hole 0, template_var 2))),
         template_app
          (template_app
            (template_hole 3,
             template_app
              (template_app (template_hole 11, template_var 1),
               template_app
                (template_hole 1,
                 template_app (template_hole 0, template_var 2)))),
           template_app
            (template_app (template_hole 2, template_var 0),
             template_var 3))))),
    ("Word_Lemmas.upto_enum_step_nth",
     "[| ?a <= ?c; ?n <= unat ((?c - ?a) div (?b - ?a)) |]
      ==> [?a , ?b .e. ?c] ! ?n = ?a + word_of_nat ?n * (?b - ?a)",
     template_implication
      ([template_inequation (less_equals, template_var 3, template_var 2),
        template_inequation
         (less_equals, template_var 1,
          template_app
           (template_hole 8,
            template_app
             (template_app
               (template_hole 7,
                template_app
                 (template_app (template_hole 6, template_var 2),
                  template_var 3)),
              template_app
               (template_app (template_hole 6, template_var 0),
                template_var 3))))],
       template_equation
        (template_app
          (template_app
            (template_hole 4,
             template_app
              (template_app
                (template_app (template_hole 3, template_var 3),
                 template_var 0),
               template_var 2)),
           template_var 1),
         template_app
          (template_app (template_hole 2, template_var 3),
           template_app
            (template_app
              (template_hole 1,
               template_app (template_hole 0, template_var 1)),
             template_app
              (template_app (template_hole 6, template_var 0),
               template_var 3)))))),
    ("Word_Lemmas.mod_mask_drop",
     "[| ?m = 2 ^ ?n; 0 < ?m; and (mask ?n) ?msk = mask ?n |]
      ==> and (?x mod ?m) ?msk = ?x mod ?m",
     template_implication
      ([template_equation
         (template_var 3,
          template_app
           (template_app
             (template_hole 8,
              template_app
               (template_hole 7,
                template_app (template_hole 6, template_hole 5))),
            template_var 2)),
        template_inequation (less_than, template_hole 3, template_var 3),
        template_equation
         (template_app
           (template_app
             (template_hole 2,
              template_app (template_hole 1, template_var 2)),
            template_var 1),
          template_app (template_hole 1, template_var 2))],
       template_equation
        (template_app
          (template_app
            (template_hole 2,
             template_app
              (template_app (template_hole 0, template_var 0),
               template_var 3)),
           template_var 1),
         template_app
          (template_app (template_hole 0, template_var 0),
           template_var 3)))),
    ("Word_Lemmas.sdiv_word_max",
     "(sint ?a sdiv sint ?b < 2 ^ (size ?a - 1)) =
      (?a ~= - (2 ^ (size ?a - 1)) | ?b ~= - 1)",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_hole 16,
                template_app
                 (template_app
                   (template_hole 15,
                    template_app (template_hole 14, template_var 1)),
                  template_app (template_hole 14, template_var 0))),
              template_app
               (template_app
                 (template_hole 13,
                  template_app
                   (template_hole 12,
                    template_app (template_hole 11, template_hole 10))),
                template_app
                 (template_app
                   (template_hole 9,
                    template_app (template_hole 8, template_var 1)),
                  template_hole 7)))
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 6,
               template_app
                (template_hole 5,
                 template_app
                  (template_app (template_hole 4, template_var 1),
                   template_app
                    (template_hole 3,
                     template_app
                      (template_app
                        (template_hole 2,
                         template_app
                          (template_hole 1,
                           template_app
                            (template_hole 11, template_hole 10))),
                       template_app
                        (template_app
                          (template_hole 9,
                           template_app (template_hole 8, template_var 1)),
                         template_hole 7)))))),
             template_app
              (template_hole 5,
               template_app
                (template_app (template_hole 4, template_var 0),
                 template_app (template_hole 3, template_hole 0))))
           ))),
    ("Word_Lemmas.zero_base_lsb_imp_set_eq_as_bit_operation",
     "and (mask (LENGTH(?'a) - ?len)) ?base = 0 ==>
      (?base = and (not (mask (LENGTH(?'a) - ?len))) ?a) =
      (?a : {?base..or ?base (mask (LENGTH(?'a) - ?len))})",
     template_implication
      ([template_equation
         (template_app
           (template_app
             (template_hole 10,
              template_app
               (template_hole 9,
                template_app
                 (template_app
                   (template_hole 8,
                    template_app (template_hole 7, template_hole 6)),
                  template_var 2))),
            template_var 1),
          template_hole 5)],
       template_equation
        (template_app
          (template_app (template_hole 11, template_var 1),
           template_app
            (template_app
              (template_hole 10,
               template_app
                (template_hole 3,
                 template_app
                  (template_hole 9,
                   template_app
                    (template_app
                      (template_hole 8,
                       template_app (template_hole 7, template_hole 6)),
                     template_var 2)))),
             template_var 0)),
         template_app
          (template_app (template_hole 2, template_var 0),
           template_app
            (template_app (template_hole 1, template_var 1),
             template_app
              (template_app (template_hole 0, template_var 1),
               template_app
                (template_hole 9,
                 template_app
                  (template_app
                    (template_hole 8,
                     template_app (template_hole 7, template_hole 6)),
                   template_var 2)))))))),
    ("Word_Lemmas.ucast_less_shiftl_helper",
     "[| LENGTH(?'b) + 2 < LENGTH(?'a); 2 ^ (LENGTH(?'b) + 2) <= ?n |]
      ==> UCAST(?'b \<rightarrow> ?'a) ?x << 2 < ?n",
     template_implication
      ([template_inequation
         (less_than,
          template_app
           (template_app
             (template_hole 13,
              template_app (template_hole 12, template_hole 11)),
            template_app
             (template_hole 10,
              template_app (template_hole 9, template_hole 8))),
          template_app (template_hole 7, template_hole 6)),
        template_inequation
         (less_equals,
          template_app
           (template_app
             (template_hole 4,
              template_app
               (template_hole 3,
                template_app (template_hole 9, template_hole 8))),
            template_app
             (template_app
               (template_hole 13,
                template_app (template_hole 12, template_hole 11)),
              template_app
               (template_hole 10,
                template_app (template_hole 9, template_hole 8)))),
          template_var 1)],
       template_inequation
        (less_than,
         template_app
          (template_app
            (template_hole 1,
             template_app (template_hole 0, template_var 0)),
           template_app
            (template_hole 10,
             template_app (template_hole 9, template_hole 8))),
         template_var 1))),
    ("Word_Lemmas.ucast_le_ucast_eq",
     "[| ?x < 2 ^ ?n; ?y < 2 ^ ?n; ?n = LENGTH(?'b) |]
      ==> (UCAST(?'a \<rightarrow> ?'b) ?x
           <= UCAST(?'a \<rightarrow> ?'b) ?y) =
          (?x <= ?y)",
     template_implication
      ([template_inequation
         (less_than, template_var 2,
          template_app
           (template_app
             (template_hole 10,
              template_app
               (template_hole 9,
                template_app (template_hole 8, template_hole 7))),
            template_var 1)),
        template_inequation
         (less_than, template_var 0,
          template_app
           (template_app
             (template_hole 10,
              template_app
               (template_hole 9,
                template_app (template_hole 8, template_hole 7))),
            template_var 1)),
        template_equation
         (template_var 1, template_app (template_hole 5, template_hole 4))],
       template_equation
        (template_app
          (template_app
            (template_hole 2,
             template_app (template_hole 1, template_var 2)),
           template_app (template_hole 1, template_var 0)),
         template_app
          (template_app (template_hole 0, template_var 2),
           template_var 0)))),
    ("Word_Lemmas.sdiv_word_max'",
     "(sint ?a sdiv sint ?b < 2 ^ (LENGTH(?'a) - Suc 0)) =
      (?a = - (2 ^ (LENGTH(?'a) - Suc 0)) --> ?b ~= - 1)",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_hole 18,
                template_app
                 (template_app
                   (template_hole 17,
                    template_app (template_hole 16, template_var 1)),
                  template_app (template_hole 16, template_var 0))),
              template_app
               (template_app
                 (template_hole 15,
                  template_app
                   (template_hole 14,
                    template_app (template_hole 13, template_hole 12))),
                template_app
                 (template_app
                   (template_hole 11,
                    template_app (template_hole 10, template_hole 9)),
                  template_app (template_hole 8, template_hole 7))))
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 6,
               template_app
                (template_app (template_hole 5, template_var 1),
                 template_app
                  (template_hole 4,
                   template_app
                    (template_app
                      (template_hole 3,
                       template_app
                        (template_hole 2,
                         template_app
                          (template_hole 13, template_hole 12))),
                     template_app
                      (template_app
                        (template_hole 11,
                         template_app (template_hole 10, template_hole 9)),
                       template_app (template_hole 8, template_hole 7)))))),
             template_app
              (template_hole 1,
               template_app
                (template_app (template_hole 5, template_var 0),
                 template_app (template_hole 4, template_hole 0))))
           ))),
    ("Word_Lemmas.unat_shiftl_absorb",
     "[| ?x <= 2 ^ ?p; ?p + ?k < LENGTH(?'a) |]
      ==> unat ?x * 2 ^ ?k = unat (?x * 2 ^ ?k)",
     template_implication
      ([template_inequation
         (less_equals, template_var 2,
          template_app
           (template_app
             (template_hole 13,
              template_app
               (template_hole 12,
                template_app (template_hole 11, template_hole 10))),
            template_var 1)),
        template_inequation
         (less_than,
          template_app
           (template_app (template_hole 8, template_var 1), template_var 0),
          template_app (template_hole 7, template_hole 6))],
       template_equation
        (template_app
          (template_app
            (template_hole 4,
             template_app (template_hole 3, template_var 2)),
           template_app
            (template_app
              (template_hole 2,
               template_app
                (template_hole 1,
                 template_app (template_hole 11, template_hole 10))),
             template_var 0)),
         template_app
          (template_hole 3,
           template_app
            (template_app (template_hole 0, template_var 2),
             template_app
              (template_app
                (template_hole 13,
                 template_app
                  (template_hole 12,
                   template_app (template_hole 11, template_hole 10))),
               template_var 0)))))),
    ("Word_Lemmas.cast_chunk_scast_assemble_id",
     "[| ?n = LENGTH(?'a); ?m = LENGTH(?'b); ?n * 2 = ?m |]
      ==> or (UCAST(?'a \<rightarrow> ?'b)
               (SCAST(?'b \<rightarrow> ?'a) ?x))
           (UCAST(?'a \<rightarrow> ?'b)
             (SCAST(?'b \<rightarrow> ?'a) (?x >> ?n)) <<
            ?n) =
          ?x",
     template_implication
      ([template_equation
         (template_var 2,
          template_app (template_hole 13, template_hole 12)),
        template_equation
         (template_var 1,
          template_app (template_hole 11, template_hole 10)),
        template_equation
         (template_app
           (template_app (template_hole 9, template_var 2),
            template_app
             (template_hole 8,
              template_app (template_hole 7, template_hole 6))),
          template_var 1)],
       template_equation
        (template_app
          (template_app
            (template_hole 4,
             template_app
              (template_hole 3,
               template_app (template_hole 2, template_var 0))),
           template_app
            (template_app
              (template_hole 1,
               template_app
                (template_hole 3,
                 template_app
                  (template_hole 2,
                   template_app
                    (template_app (template_hole 0, template_var 0),
                     template_var 2)))),
             template_var 2)),
         template_var 0))),
    ("Word_Lemmas.cast_chunk_assemble_id",
     "[| ?n = LENGTH(?'a); ?m = LENGTH(?'b); ?n * 2 = ?m |]
      ==> or (UCAST(?'a \<rightarrow> ?'b)
               (UCAST(?'b \<rightarrow> ?'a) ?x))
           (UCAST(?'a \<rightarrow> ?'b)
             (UCAST(?'b \<rightarrow> ?'a) (?x >> ?n)) <<
            ?n) =
          ?x",
     template_implication
      ([template_equation
         (template_var 2,
          template_app (template_hole 13, template_hole 12)),
        template_equation
         (template_var 1,
          template_app (template_hole 11, template_hole 10)),
        template_equation
         (template_app
           (template_app (template_hole 9, template_var 2),
            template_app
             (template_hole 8,
              template_app (template_hole 7, template_hole 6))),
          template_var 1)],
       template_equation
        (template_app
          (template_app
            (template_hole 4,
             template_app
              (template_hole 3,
               template_app (template_hole 2, template_var 0))),
           template_app
            (template_app
              (template_hole 1,
               template_app
                (template_hole 3,
                 template_app
                  (template_hole 2,
                   template_app
                    (template_app (template_hole 0, template_var 0),
                     template_var 2)))),
             template_var 2)),
         template_var 0))),
    ("Word_Lemmas.sub_right_shift",
     "[| and ?x (mask ?n) = 0; and ?y (mask ?n) = 0; ?y <= ?x |]
      ==> ?x - ?y >> ?n = (?x >> ?n) - (?y >> ?n)",
     template_implication
      ([template_equation
         (template_app
           (template_app (template_hole 5, template_var 2),
            template_app (template_hole 4, template_var 1)),
          template_hole 3),
        template_equation
         (template_app
           (template_app (template_hole 5, template_var 0),
            template_app (template_hole 4, template_var 1)),
          template_hole 3),
        template_inequation (less_equals, template_var 0, template_var 2)],
       template_equation
        (template_app
          (template_app
            (template_hole 1,
             template_app
              (template_app (template_hole 0, template_var 2),
               template_var 0)),
           template_var 1),
         template_app
          (template_app
            (template_hole 0,
             template_app
              (template_app (template_hole 1, template_var 2),
               template_var 1)),
           template_app
            (template_app (template_hole 1, template_var 0),
             template_var 1))))),
    ("Word_Lemmas.mask_shift_sum",
     "[| ?b <= ?a; unat ?n = unat (and ?p (mask ?b)) |]
      ==> and ?p (not (mask ?a)) + (and ?p (mask ?a) >> ?b) * (1 << ?b) +
          ?n =
          ?p",
     template_implication
      ([template_inequation (less_equals, template_var 3, template_var 2),
        template_equation
         (template_app (template_hole 9, template_var 1),
          template_app
           (template_hole 9,
            template_app
             (template_app (template_hole 8, template_var 0),
              template_app (template_hole 7, template_var 3))))],
       template_equation
        (template_app
          (template_app
            (template_hole 5,
             template_app
              (template_app
                (template_hole 5,
                 template_app
                  (template_app (template_hole 8, template_var 0),
                   template_app
                    (template_hole 4,
                     template_app (template_hole 7, template_var 2)))),
               template_app
                (template_app
                  (template_hole 3,
                   template_app
                    (template_app
                      (template_hole 2,
                       template_app
                        (template_app (template_hole 8, template_var 0),
                         template_app (template_hole 7, template_var 2))),
                     template_var 3)),
                 template_app
                  (template_app (template_hole 1, template_hole 0),
                   template_var 3)))),
           template_var 1),
         template_var 0))),
    ("Word_Lemmas.signed_arith_ineq_checks_to_eq",
     "(- (2 ^ (size ?a - 1)) <= - sint ?a &
       - sint ?a <= 2 ^ (size ?a - 1) - 1) =
      (- sint ?a = sint (- ?a))",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_hole 14,
                template_app
                 (template_app
                   (template_hole 13,
                    template_app
                     (template_hole 12,
                      template_app
                       (template_app
                         (template_hole 11,
                          template_app
                           (template_hole 10,
                            template_app
                             (template_hole 9, template_hole 8))),
                        template_app
                         (template_app
                           (template_hole 7,
                            template_app (template_hole 6, template_var 0)),
                          template_hole 5)))),
                  template_app
                   (template_hole 12,
                    template_app (template_hole 4, template_var 0)))),
              template_app
               (template_app
                 (template_hole 13,
                  template_app
                   (template_hole 12,
                    template_app (template_hole 4, template_var 0))),
                template_app
                 (template_app
                   (template_hole 3,
                    template_app
                     (template_app
                       (template_hole 11,
                        template_app
                         (template_hole 10,
                          template_app (template_hole 9, template_hole 8))),
                      template_app
                       (template_app
                         (template_hole 7,
                          template_app (template_hole 6, template_var 0)),
                        template_hole 5))),
                  template_hole 2)))
            )],
       template_equation
        (template_app
          (template_hole 12,
           template_app (template_hole 4, template_var 0)),
         template_app
          (template_hole 4,
           template_app (template_hole 0, template_var 0))))),
    ("Word_Lemmas.word_enum_decomp",
     "[?x .e. ?y] = ?as @ ?a # ?bs ==>
      ?x <= ?a &
      ?a <= ?y & ?a ~: set ?as & (ALL z:set ?as. ?x <= z & z <= ?y)",
     template_implication
      ([template_equation
         (template_app
           (template_app (template_hole 8, template_var 4), template_var 3),
          template_app
           (template_app (template_hole 7, template_var 2),
            template_app
             (template_app (template_hole 6, template_var 1),
              template_var 0)))],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 5,
               template_app
                (template_app (template_hole 4, template_var 4),
                 template_var 1)),
             template_app
              (template_app
                (template_hole 5,
                 template_app
                  (template_app (template_hole 4, template_var 1),
                   template_var 3)),
               template_app
                (template_app
                  (template_hole 5,
                   template_app
                    (template_hole 3,
                     template_app
                      (template_app (template_hole 2, template_var 1),
                       template_app (template_hole 1, template_var 2)))),
                 template_app
                  (template_app
                    (template_hole 0,
                     template_app (template_hole 1, template_var 2)),
                   t_empty))))
           ))),
    ("Word_Lemmas.pow_sub_less",
     "[| ?a + ?b <= LENGTH(?'a); unat ?x = 2 ^ ?a |]
      ==> unat (?x * 2 ^ ?b - 1) < 2 ^ (?a + ?b)",
     template_implication
      ([template_inequation
         (less_equals,
          template_app
           (template_app (template_hole 14, template_var 2),
            template_var 1),
          template_app (template_hole 13, template_hole 12)),
        template_equation
         (template_app (template_hole 10, template_var 0),
          template_app
           (template_app
             (template_hole 9,
              template_app
               (template_hole 8,
                template_app (template_hole 7, template_hole 6))),
            template_var 2))],
       template_inequation
        (less_than,
         template_app
          (template_hole 10,
           template_app
            (template_app
              (template_hole 4,
               template_app
                (template_app (template_hole 3, template_var 0),
                 template_app
                  (template_app
                    (template_hole 2,
                     template_app
                      (template_hole 1,
                       template_app (template_hole 7, template_hole 6))),
                   template_var 1))),
             template_hole 0)),
         template_app
          (template_app
            (template_hole 9,
             template_app
              (template_hole 8,
               template_app (template_hole 7, template_hole 6))),
           template_app
            (template_app (template_hole 14, template_var 2),
             template_var 1))))),
    ("Word_Lemmas.eq_or_less_helperD",
     "[| ?n = unat (2 ^ ?m - 1) | ?n < unat (2 ^ ?m - 1);
         ?m < LENGTH(?'a) |]
      ==> ?n < 2 ^ ?m",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_hole 13,
                template_app
                 (template_app (template_hole 12, template_var 1),
                  template_app
                   (template_hole 11,
                    template_app
                     (template_app
                       (template_hole 10,
                        template_app
                         (template_app
                           (template_hole 9,
                            template_app
                             (template_hole 8,
                              template_app
                               (template_hole 7, template_hole 6))),
                          template_var 0)),
                      template_hole 5)))),
              template_app
               (template_app (template_hole 4, template_var 1),
                template_app
                 (template_hole 11,
                  template_app
                   (template_app
                     (template_hole 10,
                      template_app
                       (template_app
                         (template_hole 9,
                          template_app
                           (template_hole 8,
                            template_app
                             (template_hole 7, template_hole 6))),
                        template_var 0)),
                    template_hole 5))))
            ),
        template_inequation
         (less_than, template_var 0,
          template_app (template_hole 3, template_hole 2))],
       template_inequation
        (less_than, template_var 1,
         template_app
          (template_app
            (template_hole 1,
             template_app
              (template_hole 0,
               template_app (template_hole 7, template_hole 6))),
           template_var 0)))),
    ("Word_Lemmas.add_mask_lower_bits'",
     "[| ?len = LENGTH(?'a); is_aligned ?x ?n;
         ALL n'>=?n. n' < ?len --> ~ bit ?p n' |]
      ==> and (?x + ?p) (not (mask ?n)) = ?x",
     template_implication
      ([template_equation
         (template_var 3,
          template_app (template_hole 13, template_hole 12)),
        template_predicate
         (
            template_app
             (template_app (template_hole 11, template_var 2),
              template_var 1)
            ),
        template_predicate (template_app (template_hole 10, t_empty))],
       template_equation
        (template_app
          (template_app
            (template_hole 3,
             template_app
              (template_app (template_hole 2, template_var 2),
               template_var 0)),
           template_app
            (template_hole 1,
             template_app (template_hole 0, template_var 1))),
         template_var 2))),
    ("Word_Lemmas.add_right_shift",
     "[| and ?x (mask ?n) = 0; and ?y (mask ?n) = 0; ?x <= ?x + ?y |]
      ==> ?x + ?y >> ?n = (?x >> ?n) + (?y >> ?n)",
     template_implication
      ([template_equation
         (template_app
           (template_app (template_hole 5, template_var 2),
            template_app (template_hole 4, template_var 1)),
          template_hole 3),
        template_equation
         (template_app
           (template_app (template_hole 5, template_var 0),
            template_app (template_hole 4, template_var 1)),
          template_hole 3),
        template_inequation
         (less_equals, template_var 2,
          template_app
           (template_app (template_hole 1, template_var 2),
            template_var 0))],
       template_equation
        (template_app
          (template_app
            (template_hole 0,
             template_app
              (template_app (template_hole 1, template_var 2),
               template_var 0)),
           template_var 1),
         template_app
          (template_app
            (template_hole 1,
             template_app
              (template_app (template_hole 0, template_var 2),
               template_var 1)),
           template_app
            (template_app (template_hole 0, template_var 0),
             template_var 1))))),
    ("Word_Lemmas.signed_arith_sint",
     "- (2 ^ (size ?a - 1)) <= - sint ?a &
      - sint ?a <= 2 ^ (size ?a - 1) - 1 ==>
      sint (- ?a) = - sint ?a",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_hole 14,
                template_app
                 (template_app
                   (template_hole 13,
                    template_app
                     (template_hole 12,
                      template_app
                       (template_app
                         (template_hole 11,
                          template_app
                           (template_hole 10,
                            template_app
                             (template_hole 9, template_hole 8))),
                        template_app
                         (template_app
                           (template_hole 7,
                            template_app (template_hole 6, template_var 0)),
                          template_hole 5)))),
                  template_app
                   (template_hole 12,
                    template_app (template_hole 4, template_var 0)))),
              template_app
               (template_app
                 (template_hole 13,
                  template_app
                   (template_hole 12,
                    template_app (template_hole 4, template_var 0))),
                template_app
                 (template_app
                   (template_hole 3,
                    template_app
                     (template_app
                       (template_hole 11,
                        template_app
                         (template_hole 10,
                          template_app (template_hole 9, template_hole 8))),
                      template_app
                       (template_app
                         (template_hole 7,
                          template_app (template_hole 6, template_var 0)),
                        template_hole 5))),
                  template_hole 2)))
            )],
       template_equation
        (template_app
          (template_hole 4, template_app (template_hole 0, template_var 0)),
         template_app
          (template_hole 12,
           template_app (template_hole 4, template_var 0))))),
    ("Word_Lemmas.unat_is_aligned_add",
     "[| is_aligned ?p ?n; unat ?d < 2 ^ ?n |]
      ==> unat (and (?p + ?d) (mask ?n)) = unat ?d &
          unat (and (?p + ?d) (not (mask ?n))) = unat ?p",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 12, template_var 2),
              template_var 1)
            ),
        template_inequation
         (less_than, template_app (template_hole 10, template_var 0),
          template_app
           (template_app
             (template_hole 9,
              template_app
               (template_hole 8,
                template_app (template_hole 7, template_hole 6))),
            template_var 1))],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 5,
               template_app
                (template_app
                  (template_hole 4,
                   template_app
                    (template_hole 10,
                     template_app
                      (template_app
                        (template_hole 3,
                         template_app
                          (template_app (template_hole 2, template_var 2),
                           template_var 0)),
                       template_app (template_hole 1, template_var 1)))),
                 template_app (template_hole 10, template_var 0))),
             template_app
              (template_app
                (template_hole 4,
                 template_app
                  (template_hole 10,
                   template_app
                    (template_app
                      (template_hole 3,
                       template_app
                        (template_app (template_hole 2, template_var 2),
                         template_var 0)),
                     template_app
                      (template_hole 0,
                       template_app (template_hole 1, template_var 1))))),
               template_app (template_hole 10, template_var 2)))
           ))),
    ("Word_Lemmas.signed_shift_guard_to_word",
     "[| ?n < LENGTH(?'a); 0 < ?n |]
      ==> (unat ?x * 2 ^ ?y < 2 ^ ?n) = (?x = 0 | ?x < 1 << ?n >> ?y)",
     template_implication
      ([template_inequation
         (less_than, template_var 2,
          template_app (template_hole 16, template_hole 15)),
        template_inequation (less_than, template_hole 14, template_var 2)],
       template_implication
        ([template_predicate
           (
              template_app
               (template_app
                 (template_hole 17,
                  template_app
                   (template_app
                     (template_hole 12,
                      template_app (template_hole 11, template_var 1)),
                    template_app
                     (template_app
                       (template_hole 10,
                        template_app
                         (template_hole 9,
                          template_app (template_hole 8, template_hole 7))),
                      template_var 0))),
                template_app
                 (template_app
                   (template_hole 10,
                    template_app
                     (template_hole 9,
                      template_app (template_hole 8, template_hole 7))),
                  template_var 2))
              )],
         template_predicate
          (
             template_app
              (template_app
                (template_hole 6,
                 template_app
                  (template_app (template_hole 5, template_var 1),
                   template_hole 4)),
               template_app
                (template_app (template_hole 3, template_var 1),
                 template_app
                  (template_app
                    (template_hole 2,
                     template_app
                      (template_app (template_hole 1, template_hole 0),
                       template_var 2)),
                   template_var 0)))
             )))),
    ("Word_Lemmas.upto_enum_step_shift",
     "is_aligned ?p ?n ==>
      [?p , ?p + 2 ^ ?m .e. ?p + 2 ^ ?n - 1] =
      map ((+) ?p) [0 , 2 ^ ?m .e. 2 ^ ?n - 1]",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 11, template_var 2),
              template_var 1)
            )],
       template_equation
        (template_app
          (template_app
            (template_app (template_hole 9, template_var 2),
             template_app
              (template_app (template_hole 8, template_var 2),
               template_app
                (template_app
                  (template_hole 7,
                   template_app
                    (template_hole 6,
                     template_app (template_hole 5, template_hole 4))),
                 template_var 0))),
           template_app
            (template_app
              (template_hole 3,
               template_app
                (template_app (template_hole 8, template_var 2),
                 template_app
                  (template_app
                    (template_hole 7,
                     template_app
                      (template_hole 6,
                       template_app (template_hole 5, template_hole 4))),
                   template_var 1))),
             template_hole 2)),
         template_app
          (template_app
            (template_hole 1,
             template_app (template_hole 8, template_var 2)),
           template_app
            (template_app
              (template_app (template_hole 9, template_hole 0),
               template_app
                (template_app
                  (template_hole 7,
                   template_app
                    (template_hole 6,
                     template_app (template_hole 5, template_hole 4))),
                 template_var 0)),
             template_app
              (template_app
                (template_hole 3,
                 template_app
                  (template_app
                    (template_hole 7,
                     template_app
                      (template_hole 6,
                       template_app (template_hole 5, template_hole 4))),
                   template_var 1)),
               template_hole 2)))))),
    ("Word_Lemmas.signed_arith_ineq_checks_to_eq",
     "(- (2 ^ (size ?a - 1)) <= sint ?a - sint ?b &
       sint ?a - sint ?b <= 2 ^ (size ?a - 1) - 1) =
      (sint ?a - sint ?b = sint (?a - ?b))",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_hole 14,
                template_app
                 (template_app
                   (template_hole 13,
                    template_app
                     (template_hole 12,
                      template_app
                       (template_app
                         (template_hole 11,
                          template_app
                           (template_hole 10,
                            template_app
                             (template_hole 9, template_hole 8))),
                        template_app
                         (template_app
                           (template_hole 7,
                            template_app (template_hole 6, template_var 1)),
                          template_hole 5)))),
                  template_app
                   (template_app
                     (template_hole 4,
                      template_app (template_hole 3, template_var 1)),
                    template_app (template_hole 3, template_var 0)))),
              template_app
               (template_app
                 (template_hole 13,
                  template_app
                   (template_app
                     (template_hole 4,
                      template_app (template_hole 3, template_var 1)),
                    template_app (template_hole 3, template_var 0))),
                template_app
                 (template_app
                   (template_hole 4,
                    template_app
                     (template_app
                       (template_hole 11,
                        template_app
                         (template_hole 10,
                          template_app (template_hole 9, template_hole 8))),
                      template_app
                       (template_app
                         (template_hole 7,
                          template_app (template_hole 6, template_var 1)),
                        template_hole 5))),
                  template_hole 2)))
            )],
       template_equation
        (template_app
          (template_app
            (template_hole 4,
             template_app (template_hole 3, template_var 1)),
           template_app (template_hole 3, template_var 0)),
         template_app
          (template_hole 3,
           template_app
            (template_app (template_hole 0, template_var 1),
             template_var 0))))),
    ("Word_Lemmas.signed_arith_ineq_checks_to_eq",
     "(- (2 ^ (size ?a - 1)) <= sint ?a + sint ?b &
       sint ?a + sint ?b <= 2 ^ (size ?a - 1) - 1) =
      (sint ?a + sint ?b = sint (?a + ?b))",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_hole 15,
                template_app
                 (template_app
                   (template_hole 14,
                    template_app
                     (template_hole 13,
                      template_app
                       (template_app
                         (template_hole 12,
                          template_app
                           (template_hole 11,
                            template_app
                             (template_hole 10, template_hole 9))),
                        template_app
                         (template_app
                           (template_hole 8,
                            template_app (template_hole 7, template_var 1)),
                          template_hole 6)))),
                  template_app
                   (template_app
                     (template_hole 5,
                      template_app (template_hole 4, template_var 1)),
                    template_app (template_hole 4, template_var 0)))),
              template_app
               (template_app
                 (template_hole 14,
                  template_app
                   (template_app
                     (template_hole 5,
                      template_app (template_hole 4, template_var 1)),
                    template_app (template_hole 4, template_var 0))),
                template_app
                 (template_app
                   (template_hole 3,
                    template_app
                     (template_app
                       (template_hole 12,
                        template_app
                         (template_hole 11,
                          template_app
                           (template_hole 10, template_hole 9))),
                      template_app
                       (template_app
                         (template_hole 8,
                          template_app (template_hole 7, template_var 1)),
                        template_hole 6))),
                  template_hole 2)))
            )],
       template_equation
        (template_app
          (template_app
            (template_hole 5,
             template_app (template_hole 4, template_var 1)),
           template_app (template_hole 4, template_var 0)),
         template_app
          (template_hole 4,
           template_app
            (template_app (template_hole 0, template_var 1),
             template_var 0))))),
    ("Word_Lemmas.signed_arith_ineq_checks_to_eq",
     "(- (2 ^ (size ?a - 1)) <= sint ?a * sint ?b &
       sint ?a * sint ?b <= 2 ^ (size ?a - 1) - 1) =
      (sint ?a * sint ?b = sint (?a * ?b))",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_hole 15,
                template_app
                 (template_app
                   (template_hole 14,
                    template_app
                     (template_hole 13,
                      template_app
                       (template_app
                         (template_hole 12,
                          template_app
                           (template_hole 11,
                            template_app
                             (template_hole 10, template_hole 9))),
                        template_app
                         (template_app
                           (template_hole 8,
                            template_app (template_hole 7, template_var 1)),
                          template_hole 6)))),
                  template_app
                   (template_app
                     (template_hole 5,
                      template_app (template_hole 4, template_var 1)),
                    template_app (template_hole 4, template_var 0)))),
              template_app
               (template_app
                 (template_hole 14,
                  template_app
                   (template_app
                     (template_hole 5,
                      template_app (template_hole 4, template_var 1)),
                    template_app (template_hole 4, template_var 0))),
                template_app
                 (template_app
                   (template_hole 3,
                    template_app
                     (template_app
                       (template_hole 12,
                        template_app
                         (template_hole 11,
                          template_app
                           (template_hole 10, template_hole 9))),
                      template_app
                       (template_app
                         (template_hole 8,
                          template_app (template_hole 7, template_var 1)),
                        template_hole 6))),
                  template_hole 2)))
            )],
       template_equation
        (template_app
          (template_app
            (template_hole 5,
             template_app (template_hole 4, template_var 1)),
           template_app (template_hole 4, template_var 0)),
         template_app
          (template_hole 4,
           template_app
            (template_app (template_hole 0, template_var 1),
             template_var 0))))),
    ("Word_Lemmas.signed_arith_ineq_checks_to_eq",
     "(- (2 ^ (size ?a - 1)) <= sint ?a sdiv sint ?b &
       sint ?a sdiv sint ?b <= 2 ^ (size ?a - 1) - 1) =
      (sint ?a sdiv sint ?b = sint (?a sdiv ?b))",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_hole 15,
                template_app
                 (template_app
                   (template_hole 14,
                    template_app
                     (template_hole 13,
                      template_app
                       (template_app
                         (template_hole 12,
                          template_app
                           (template_hole 11,
                            template_app
                             (template_hole 10, template_hole 9))),
                        template_app
                         (template_app
                           (template_hole 8,
                            template_app (template_hole 7, template_var 1)),
                          template_hole 6)))),
                  template_app
                   (template_app
                     (template_hole 5,
                      template_app (template_hole 4, template_var 1)),
                    template_app (template_hole 4, template_var 0)))),
              template_app
               (template_app
                 (template_hole 14,
                  template_app
                   (template_app
                     (template_hole 5,
                      template_app (template_hole 4, template_var 1)),
                    template_app (template_hole 4, template_var 0))),
                template_app
                 (template_app
                   (template_hole 3,
                    template_app
                     (template_app
                       (template_hole 12,
                        template_app
                         (template_hole 11,
                          template_app
                           (template_hole 10, template_hole 9))),
                      template_app
                       (template_app
                         (template_hole 8,
                          template_app (template_hole 7, template_var 1)),
                        template_hole 6))),
                  template_hole 2)))
            )],
       template_equation
        (template_app
          (template_app
            (template_hole 5,
             template_app (template_hole 4, template_var 1)),
           template_app (template_hole 4, template_var 0)),
         template_app
          (template_hole 4,
           template_app
            (template_app (template_hole 0, template_var 1),
             template_var 0))))),
    ("Word_Lemmas.signed_arith_ineq_checks_to_eq",
     "(- (2 ^ (size ?a - 1)) <= sint ?a smod sint ?b &
       sint ?a smod sint ?b <= 2 ^ (size ?a - 1) - 1) =
      (sint ?a smod sint ?b = sint (?a smod ?b))",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_hole 15,
                template_app
                 (template_app
                   (template_hole 14,
                    template_app
                     (template_hole 13,
                      template_app
                       (template_app
                         (template_hole 12,
                          template_app
                           (template_hole 11,
                            template_app
                             (template_hole 10, template_hole 9))),
                        template_app
                         (template_app
                           (template_hole 8,
                            template_app (template_hole 7, template_var 1)),
                          template_hole 6)))),
                  template_app
                   (template_app
                     (template_hole 5,
                      template_app (template_hole 4, template_var 1)),
                    template_app (template_hole 4, template_var 0)))),
              template_app
               (template_app
                 (template_hole 14,
                  template_app
                   (template_app
                     (template_hole 5,
                      template_app (template_hole 4, template_var 1)),
                    template_app (template_hole 4, template_var 0))),
                template_app
                 (template_app
                   (template_hole 3,
                    template_app
                     (template_app
                       (template_hole 12,
                        template_app
                         (template_hole 11,
                          template_app
                           (template_hole 10, template_hole 9))),
                      template_app
                       (template_app
                         (template_hole 8,
                          template_app (template_hole 7, template_var 1)),
                        template_hole 6))),
                  template_hole 2)))
            )],
       template_equation
        (template_app
          (template_app
            (template_hole 5,
             template_app (template_hole 4, template_var 1)),
           template_app (template_hole 4, template_var 0)),
         template_app
          (template_hole 4,
           template_app
            (template_app (template_hole 0, template_var 1),
             template_var 0))))),
    ("Word_Lemmas.is_aligned_no_overflow3",
     "[| is_aligned ?a ?n; ?n < LENGTH(?'a); ?b < 2 ^ ?n; ?c <= 2 ^ ?n;
         ?b < ?c |]
      ==> ?a + ?b <= ?a + (?c - 1)",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 12, template_var 3),
              template_var 2)
            ),
        template_inequation
         (less_than, template_var 2,
          template_app (template_hole 10, template_hole 9)),
        template_inequation
         (less_than, template_var 1,
          template_app
           (template_app
             (template_hole 7,
              template_app
               (template_hole 6,
                template_app (template_hole 5, template_hole 4))),
            template_var 2)),
        template_inequation
         (less_equals, template_var 0,
          template_app
           (template_app
             (template_hole 7,
              template_app
               (template_hole 6,
                template_app (template_hole 5, template_hole 4))),
            template_var 2)),
        template_inequation (less_than, template_var 1, template_var 0)],
       template_inequation
        (less_equals,
         template_app
          (template_app (template_hole 2, template_var 3), template_var 1),
         template_app
          (template_app (template_hole 2, template_var 3),
           template_app
            (template_app (template_hole 1, template_var 0),
             template_hole 0))))),
    ("Word_Lemmas.signed_arith_sint",
     "- (2 ^ (size ?a - 1)) <= sint ?a - sint ?b &
      sint ?a - sint ?b <= 2 ^ (size ?a - 1) - 1 ==>
      sint (?a - ?b) = sint ?a - sint ?b",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_hole 14,
                template_app
                 (template_app
                   (template_hole 13,
                    template_app
                     (template_hole 12,
                      template_app
                       (template_app
                         (template_hole 11,
                          template_app
                           (template_hole 10,
                            template_app
                             (template_hole 9, template_hole 8))),
                        template_app
                         (template_app
                           (template_hole 7,
                            template_app (template_hole 6, template_var 1)),
                          template_hole 5)))),
                  template_app
                   (template_app
                     (template_hole 4,
                      template_app (template_hole 3, template_var 1)),
                    template_app (template_hole 3, template_var 0)))),
              template_app
               (template_app
                 (template_hole 13,
                  template_app
                   (template_app
                     (template_hole 4,
                      template_app (template_hole 3, template_var 1)),
                    template_app (template_hole 3, template_var 0))),
                template_app
                 (template_app
                   (template_hole 4,
                    template_app
                     (template_app
                       (template_hole 11,
                        template_app
                         (template_hole 10,
                          template_app (template_hole 9, template_hole 8))),
                      template_app
                       (template_app
                         (template_hole 7,
                          template_app (template_hole 6, template_var 1)),
                        template_hole 5))),
                  template_hole 2)))
            )],
       template_equation
        (template_app
          (template_hole 3,
           template_app
            (template_app (template_hole 0, template_var 1),
             template_var 0)),
         template_app
          (template_app
            (template_hole 4,
             template_app (template_hole 3, template_var 1)),
           template_app (template_hole 3, template_var 0))))),
    ("Word_Lemmas.signed_arith_sint",
     "- (2 ^ (size ?a - 1)) <= sint ?a + sint ?b &
      sint ?a + sint ?b <= 2 ^ (size ?a - 1) - 1 ==>
      sint (?a + ?b) = sint ?a + sint ?b",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_hole 15,
                template_app
                 (template_app
                   (template_hole 14,
                    template_app
                     (template_hole 13,
                      template_app
                       (template_app
                         (template_hole 12,
                          template_app
                           (template_hole 11,
                            template_app
                             (template_hole 10, template_hole 9))),
                        template_app
                         (template_app
                           (template_hole 8,
                            template_app (template_hole 7, template_var 1)),
                          template_hole 6)))),
                  template_app
                   (template_app
                     (template_hole 5,
                      template_app (template_hole 4, template_var 1)),
                    template_app (template_hole 4, template_var 0)))),
              template_app
               (template_app
                 (template_hole 14,
                  template_app
                   (template_app
                     (template_hole 5,
                      template_app (template_hole 4, template_var 1)),
                    template_app (template_hole 4, template_var 0))),
                template_app
                 (template_app
                   (template_hole 3,
                    template_app
                     (template_app
                       (template_hole 12,
                        template_app
                         (template_hole 11,
                          template_app
                           (template_hole 10, template_hole 9))),
                      template_app
                       (template_app
                         (template_hole 8,
                          template_app (template_hole 7, template_var 1)),
                        template_hole 6))),
                  template_hole 2)))
            )],
       template_equation
        (template_app
          (template_hole 4,
           template_app
            (template_app (template_hole 0, template_var 1),
             template_var 0)),
         template_app
          (template_app
            (template_hole 5,
             template_app (template_hole 4, template_var 1)),
           template_app (template_hole 4, template_var 0))))),
    ("Word_Lemmas.signed_arith_sint",
     "- (2 ^ (size ?a - 1)) <= sint ?a * sint ?b &
      sint ?a * sint ?b <= 2 ^ (size ?a - 1) - 1 ==>
      sint (?a * ?b) = sint ?a * sint ?b",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_hole 15,
                template_app
                 (template_app
                   (template_hole 14,
                    template_app
                     (template_hole 13,
                      template_app
                       (template_app
                         (template_hole 12,
                          template_app
                           (template_hole 11,
                            template_app
                             (template_hole 10, template_hole 9))),
                        template_app
                         (template_app
                           (template_hole 8,
                            template_app (template_hole 7, template_var 1)),
                          template_hole 6)))),
                  template_app
                   (template_app
                     (template_hole 5,
                      template_app (template_hole 4, template_var 1)),
                    template_app (template_hole 4, template_var 0)))),
              template_app
               (template_app
                 (template_hole 14,
                  template_app
                   (template_app
                     (template_hole 5,
                      template_app (template_hole 4, template_var 1)),
                    template_app (template_hole 4, template_var 0))),
                template_app
                 (template_app
                   (template_hole 3,
                    template_app
                     (template_app
                       (template_hole 12,
                        template_app
                         (template_hole 11,
                          template_app
                           (template_hole 10, template_hole 9))),
                      template_app
                       (template_app
                         (template_hole 8,
                          template_app (template_hole 7, template_var 1)),
                        template_hole 6))),
                  template_hole 2)))
            )],
       template_equation
        (template_app
          (template_hole 4,
           template_app
            (template_app (template_hole 0, template_var 1),
             template_var 0)),
         template_app
          (template_app
            (template_hole 5,
             template_app (template_hole 4, template_var 1)),
           template_app (template_hole 4, template_var 0))))),
    ("Word_Lemmas.signed_arith_sint",
     "- (2 ^ (size ?a - 1)) <= sint ?a sdiv sint ?b &
      sint ?a sdiv sint ?b <= 2 ^ (size ?a - 1) - 1 ==>
      sint (?a sdiv ?b) = sint ?a sdiv sint ?b",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_hole 15,
                template_app
                 (template_app
                   (template_hole 14,
                    template_app
                     (template_hole 13,
                      template_app
                       (template_app
                         (template_hole 12,
                          template_app
                           (template_hole 11,
                            template_app
                             (template_hole 10, template_hole 9))),
                        template_app
                         (template_app
                           (template_hole 8,
                            template_app (template_hole 7, template_var 1)),
                          template_hole 6)))),
                  template_app
                   (template_app
                     (template_hole 5,
                      template_app (template_hole 4, template_var 1)),
                    template_app (template_hole 4, template_var 0)))),
              template_app
               (template_app
                 (template_hole 14,
                  template_app
                   (template_app
                     (template_hole 5,
                      template_app (template_hole 4, template_var 1)),
                    template_app (template_hole 4, template_var 0))),
                template_app
                 (template_app
                   (template_hole 3,
                    template_app
                     (template_app
                       (template_hole 12,
                        template_app
                         (template_hole 11,
                          template_app
                           (template_hole 10, template_hole 9))),
                      template_app
                       (template_app
                         (template_hole 8,
                          template_app (template_hole 7, template_var 1)),
                        template_hole 6))),
                  template_hole 2)))
            )],
       template_equation
        (template_app
          (template_hole 4,
           template_app
            (template_app (template_hole 0, template_var 1),
             template_var 0)),
         template_app
          (template_app
            (template_hole 5,
             template_app (template_hole 4, template_var 1)),
           template_app (template_hole 4, template_var 0))))),
    ("Word_Lemmas.signed_arith_sint",
     "- (2 ^ (size ?a - 1)) <= sint ?a smod sint ?b &
      sint ?a smod sint ?b <= 2 ^ (size ?a - 1) - 1 ==>
      sint (?a smod ?b) = sint ?a smod sint ?b",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_hole 15,
                template_app
                 (template_app
                   (template_hole 14,
                    template_app
                     (template_hole 13,
                      template_app
                       (template_app
                         (template_hole 12,
                          template_app
                           (template_hole 11,
                            template_app
                             (template_hole 10, template_hole 9))),
                        template_app
                         (template_app
                           (template_hole 8,
                            template_app (template_hole 7, template_var 1)),
                          template_hole 6)))),
                  template_app
                   (template_app
                     (template_hole 5,
                      template_app (template_hole 4, template_var 1)),
                    template_app (template_hole 4, template_var 0)))),
              template_app
               (template_app
                 (template_hole 14,
                  template_app
                   (template_app
                     (template_hole 5,
                      template_app (template_hole 4, template_var 1)),
                    template_app (template_hole 4, template_var 0))),
                template_app
                 (template_app
                   (template_hole 3,
                    template_app
                     (template_app
                       (template_hole 12,
                        template_app
                         (template_hole 11,
                          template_app
                           (template_hole 10, template_hole 9))),
                      template_app
                       (template_app
                         (template_hole 8,
                          template_app (template_hole 7, template_var 1)),
                        template_hole 6))),
                  template_hole 2)))
            )],
       template_equation
        (template_app
          (template_hole 4,
           template_app
            (template_app (template_hole 0, template_var 1),
             template_var 0)),
         template_app
          (template_app
            (template_hole 5,
             template_app (template_hole 4, template_var 1)),
           template_app (template_hole 4, template_var 0))))),
    ("Word_Lemmas.nasty_split_lt",
     "[| ?x < 2 ^ (?m - ?n); ?n <= ?m; ?m < LENGTH(?'a) |]
      ==> ?x * 2 ^ ?n + (2 ^ ?n - 1) <= 2 ^ ?m - 1",
     template_implication
      ([template_inequation
         (less_than, template_var 2,
          template_app
           (template_app
             (template_hole 13,
              template_app
               (template_hole 12,
                template_app (template_hole 11, template_hole 10))),
            template_app
             (template_app (template_hole 9, template_var 1),
              template_var 0))),
        template_inequation (less_equals, template_var 0, template_var 1),
        template_inequation
         (less_than, template_var 1,
          template_app (template_hole 6, template_hole 5))],
       template_inequation
        (less_equals,
         template_app
          (template_app
            (template_hole 3,
             template_app
              (template_app (template_hole 2, template_var 2),
               template_app
                (template_app
                  (template_hole 13,
                   template_app
                    (template_hole 12,
                     template_app (template_hole 11, template_hole 10))),
                 template_var 0))),
           template_app
            (template_app
              (template_hole 1,
               template_app
                (template_app
                  (template_hole 13,
                   template_app
                    (template_hole 12,
                     template_app (template_hole 11, template_hole 10))),
                 template_var 0)),
             template_hole 0)),
         template_app
          (template_app
            (template_hole 1,
             template_app
              (template_app
                (template_hole 13,
                 template_app
                  (template_hole 12,
                   template_app (template_hole 11, template_hole 10))),
               template_var 1)),
           template_hole 0)))),
    ("Word_Lemmas.distinct_word_add_ucast_shift_inj",
     "[| ?p + (UCAST(?'a \<rightarrow> ?'b) ?off << ?n) =
         ?p' + (UCAST(?'a \<rightarrow> ?'b) ?off' << ?n);
         is_aligned ?p ?n'; is_aligned ?p' ?n'; ?n' = ?n + LENGTH(?'a);
         ?n' < LENGTH(?'b) |]
      ==> ?p' = ?p & ?off' = ?off",
     template_implication
      ([template_equation
         (template_app
           (template_app (template_hole 12, template_var 5),
            template_app
             (template_app
               (template_hole 11,
                template_app (template_hole 10, template_var 4)),
              template_var 3)),
          template_app
           (template_app (template_hole 12, template_var 2),
            template_app
             (template_app
               (template_hole 11,
                template_app (template_hole 10, template_var 1)),
              template_var 3))),
        template_predicate
         (
            template_app
             (template_app (template_hole 9, template_var 5),
              template_var 0)
            ),
        template_predicate
         (
            template_app
             (template_app (template_hole 9, template_var 2),
              template_var 0)
            ),
        template_equation
         (template_var 0,
          template_app
           (template_app (template_hole 7, template_var 3),
            template_app (template_hole 6, template_hole 5))),
        template_inequation
         (less_than, template_var 0,
          template_app (template_hole 3, template_hole 2))],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 1,
               template_app
                (template_app (template_hole 13, template_var 2),
                 template_var 5)),
             template_app
              (template_app (template_hole 0, template_var 1),
               template_var 4))
           ))),
    ("Word_Lemmas.nasty_split_less",
     "[| ?m <= ?n; ?n <= ?nm; ?nm < LENGTH(?'a); ?x < 2 ^ (?nm - ?n) |]
      ==> ?x * 2 ^ ?n + (2 ^ ?m - 1) < 2 ^ ?nm",
     template_implication
      ([template_inequation (less_equals, template_var 3, template_var 2),
        template_inequation (less_equals, template_var 2, template_var 1),
        template_inequation
         (less_than, template_var 1,
          template_app (template_hole 11, template_hole 10)),
        template_inequation
         (less_than, template_var 0,
          template_app
           (template_app
             (template_hole 8,
              template_app
               (template_hole 7,
                template_app (template_hole 6, template_hole 5))),
            template_app
             (template_app (template_hole 4, template_var 1),
              template_var 2)))],
       template_inequation
        (less_than,
         template_app
          (template_app
            (template_hole 3,
             template_app
              (template_app (template_hole 2, template_var 0),
               template_app
                (template_app
                  (template_hole 8,
                   template_app
                    (template_hole 7,
                     template_app (template_hole 6, template_hole 5))),
                 template_var 2))),
           template_app
            (template_app
              (template_hole 1,
               template_app
                (template_app
                  (template_hole 8,
                   template_app
                    (template_hole 7,
                     template_app (template_hole 6, template_hole 5))),
                 template_var 3)),
             template_hole 0)),
         template_app
          (template_app
            (template_hole 8,
             template_app
              (template_hole 7,
               template_app (template_hole 6, template_hole 5))),
           template_var 1)))),
    ("Word_Lemmas.upto_enum_step_shift_red",
     "[| is_aligned ?p ?sz; ?sz < LENGTH(?'a); ?us <= ?sz |]
      ==> [?p , ?p + 2 ^ ?us .e. ?p + 2 ^ ?sz - 1] =
          map (%x. ?p + word_of_nat x * 2 ^ ?us) [0..<2 ^ (?sz - ?us)]",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 21, template_var 2),
              template_var 1)
            ),
        template_inequation
         (less_than, template_var 1,
          template_app (template_hole 19, template_hole 18)),
        template_inequation (less_equals, template_var 0, template_var 1)],
       template_equation
        (template_app
          (template_app
            (template_app (template_hole 15, template_var 2),
             template_app
              (template_app (template_hole 14, template_var 2),
               template_app
                (template_app
                  (template_hole 13,
                   template_app
                    (template_hole 12,
                     template_app (template_hole 11, template_hole 10))),
                 template_var 0))),
           template_app
            (template_app
              (template_hole 9,
               template_app
                (template_app (template_hole 14, template_var 2),
                 template_app
                  (template_app
                    (template_hole 13,
                     template_app
                      (template_hole 12,
                       template_app (template_hole 11, template_hole 10))),
                   template_var 1))),
             template_hole 8)),
         template_app
          (template_app (template_hole 7, t_empty),
           template_app
            (template_app (template_hole 4, template_hole 3),
             template_app
              (template_app
                (template_hole 2,
                 template_app
                  (template_hole 1,
                   template_app (template_hole 11, template_hole 10))),
               template_app
                (template_app (template_hole 0, template_var 1),
                 template_var 0))))))),
    ("Word_Lemmas.scast_distrib",
     "[| !!x y. uint (?M x y) = ?L (uint x) (uint y) mod 2 ^ LENGTH(?'a);
         !!x y. uint (?M' x y) = ?L (uint x) (uint y) mod 2 ^ LENGTH(?'b);
         !!x y.
            ?L (x mod 2 ^ LENGTH(?'b)) (y mod 2 ^ LENGTH(?'b)) mod
            2 ^ LENGTH(?'b) =
            ?L x y mod 2 ^ LENGTH(?'b);
         is_down SCAST(?'a \<rightarrow> ?'b) |]
      ==> SCAST(?'a \<rightarrow> ?'b) (?M ?a ?b) =
          ?M' (SCAST(?'a \<rightarrow> ?'b) ?a)
           (SCAST(?'a \<rightarrow> ?'b) ?b)",
     template_implication
      ([template_predicate (template_app (template_hole 18, t_empty)),
        template_predicate (template_app (template_hole 7, t_empty)),
        template_predicate (template_app (template_hole 3, t_empty)),
        template_predicate
         (template_app (template_hole 2, template_hole 1))],
       template_equation
        (template_app
          (template_hole 1,
           template_app
            (template_app (template_var 4, template_var 1),
             template_var 0)),
         template_app
          (template_app
            (template_var 2,
             template_app (template_hole 1, template_var 1)),
           template_app (template_hole 1, template_var 0))))),
    ("Word_Lemmas.ucast_distrib",
     "[| !!x y. uint (?M x y) = ?L (uint x) (uint y) mod 2 ^ LENGTH(?'a);
         !!x y. uint (?M' x y) = ?L (uint x) (uint y) mod 2 ^ LENGTH(?'b);
         !!x y.
            ?L (x mod 2 ^ LENGTH(?'b)) (y mod 2 ^ LENGTH(?'b)) mod
            2 ^ LENGTH(?'b) =
            ?L x y mod 2 ^ LENGTH(?'b);
         is_down UCAST(?'a \<rightarrow> ?'b) |]
      ==> UCAST(?'a \<rightarrow> ?'b) (?M ?a ?b) =
          ?M' (UCAST(?'a \<rightarrow> ?'b) ?a)
           (UCAST(?'a \<rightarrow> ?'b) ?b)",
     template_implication
      ([template_predicate (template_app (template_hole 18, t_empty)),
        template_predicate (template_app (template_hole 7, t_empty)),
        template_predicate (template_app (template_hole 3, t_empty)),
        template_predicate
         (template_app (template_hole 2, template_hole 1))],
       template_equation
        (template_app
          (template_hole 1,
           template_app
            (template_app (template_var 4, template_var 1),
             template_var 0)),
         template_app
          (template_app
            (template_var 2,
             template_app (template_hole 1, template_var 1)),
           template_app (template_hole 1, template_var 0)))))]:
   (string * thm * template) list
### theory "Draft.Word_LemmasTemplates"
### 0.539s elapsed time, 0.713s cpu time, 0.092s GC time
val it = (): unit
