   [("Word_Lemmas.shiftl0", "?x << 0 = ?x",
     template_equation
      (template_app
        (template_app (template_hole 1, template_var 0), template_hole 0),
       template_var 0)),
    ("Word_Lemmas.shiftr_x_0", "?x >> 0 = ?x",
     template_equation
      (template_app
        (template_app (template_hole 1, template_var 0), template_hole 0),
       template_var 0)),
    ("Word_Lemmas.cast_simps",
     "SCAST(?'a signed \<rightarrow> ?'a) (word_of_nat ?x) =
      word_of_nat ?x",
     template_equation
      (template_app
        (template_hole 2, template_app (template_hole 1, template_var 0)),
       template_app (template_hole 0, template_var 0))),
    ("Word_Lemmas.shiftr_mask", "mask ?m >> ?m = 0",
     template_equation
      (template_app
        (template_app
          (template_hole 2, template_app (template_hole 1, template_var 0)),
         template_var 0),
       template_hole 0)),
    ("Word_Lemmas.of_int_sint_scast",
     "word_of_int (sint ?x) = SCAST(?'a \<rightarrow> ?'b) ?x",
     template_equation
      (template_app
        (template_hole 2, template_app (template_hole 1, template_var 0)),
       template_app (template_hole 0, template_var 0))),
    ("Word_Lemmas.of_int_uint_ucast",
     "word_of_int (uint ?x) = UCAST(?'a \<rightarrow> ?'b) ?x",
     template_equation
      (template_app
        (template_hole 2, template_app (template_hole 1, template_var 0)),
       template_app (template_hole 0, template_var 0))),
    ("Word_Lemmas.scast_of_nat_to_signed",
     "SCAST(?'a \<rightarrow> ?'a signed) (word_of_nat ?x) =
      word_of_nat ?x",
     template_equation
      (template_app
        (template_hole 2, template_app (template_hole 1, template_var 0)),
       template_app (template_hole 0, template_var 0))),
    ("Word_Lemmas.sshiftr_n1", "- 1 >>> ?n = - 1",
     template_equation
      (template_app
        (template_app
          (template_hole 2,
           template_app (template_hole 1, template_hole 0)),
         template_var 0),
       template_app (template_hole 1, template_hole 0))),
    ("Word_Lemmas.mask_len_id", "and ?x (mask LENGTH(?'a)) = ?x",
     template_equation
      (template_app
        (template_app (template_hole 3, template_var 0),
         template_app
          (template_hole 2,
           template_app (template_hole 1, template_hole 0))),
       template_var 0)),
    ("Word_Lemmas.cast_simps", "is_down ?c = (LENGTH(?'b) <= LENGTH(?'a))",
     template_equation
      (template_app (template_hole 5, template_var 0),
       template_app
        (template_app
          (template_hole 4,
           template_app (template_hole 3, template_hole 2)),
         template_app (template_hole 1, template_hole 0)))),
    ("Word_Lemmas.cast_simps", "is_up ?c = (LENGTH(?'a) <= LENGTH(?'b))",
     template_equation
      (template_app (template_hole 5, template_var 0),
       template_app
        (template_app
          (template_hole 4,
           template_app (template_hole 3, template_hole 2)),
         template_app (template_hole 1, template_hole 0)))),
    ("Word_Lemmas.mask_eq", "mask ?n = (1 << ?n) - 1",
     template_equation
      (template_app (template_hole 3, template_var 0),
       template_app
        (template_app
          (template_hole 2,
           template_app
            (template_app (template_hole 1, template_hole 0),
             template_var 0)),
         template_hole 0))),
    ("Word_Lemmas.mul_not_mask_eq_neg_shiftl", "not (mask ?n) = - 1 << ?n",
     template_equation
      (template_app
        (template_hole 4, template_app (template_hole 3, template_var 0)),
       template_app
        (template_app
          (template_hole 2,
           template_app (template_hole 1, template_hole 0)),
         template_var 0))),
    ("Word_Lemmas.slice_shiftr",
     "slice ?n ?w = UCAST(?'b \<rightarrow> ?'a) (?w >> ?n)",
     template_equation
      (template_app
        (template_app (template_hole 2, template_var 1), template_var 0),
       template_app
        (template_hole 1,
         template_app
          (template_app (template_hole 0, template_var 0),
           template_var 1)))),
    ("Word_Lemmas.scast_bit_test",
     "SCAST(?'a signed \<rightarrow> ?'a) (1 << ?n) = 1 << ?n",
     template_equation
      (template_app
        (template_hole 4,
         template_app
          (template_app (template_hole 3, template_hole 2),
           template_var 0)),
       template_app
        (template_app (template_hole 1, template_hole 0), template_var 0))),
    ("Word_Lemmas.shiftl_mask_is_0", "and (?x << ?n) (mask ?n) = 0",
     template_equation
      (template_app
        (template_app
          (template_hole 3,
           template_app
            (template_app (template_hole 2, template_var 1),
             template_var 0)),
         template_app (template_hole 1, template_var 0)),
       template_hole 0)),
    ("Word_Lemmas.shiftr1_unfold", "?x div (2::?'a) = ?x >> 1",
     template_equation
      (template_app
        (template_app (template_hole 5, template_var 0),
         template_app
          (template_hole 4,
           template_app (template_hole 3, template_hole 2))),
       template_app
        (template_app (template_hole 1, template_var 0), template_hole 0))),
    ("Word_Lemmas.shiftl_rev",
     "?w << ?n = word_reverse (word_reverse ?w >> ?n)",
     template_equation
      (template_app
        (template_app (template_hole 2, template_var 1), template_var 0),
       template_app
        (template_hole 1,
         template_app
          (template_app
            (template_hole 0,
             template_app (template_hole 1, template_var 1)),
           template_var 0)))),
    ("Word_Lemmas.shiftl1_is_mult", "?x << 1 = ?x * 2",
     template_equation
      (template_app
        (template_app (template_hole 5, template_var 0), template_hole 4),
       template_app
        (template_app (template_hole 3, template_var 0),
         template_app
          (template_hole 2,
           template_app (template_hole 1, template_hole 0))))),
    ("Word_Lemmas.shiftr_rev",
     "?w >> ?n = word_reverse (word_reverse ?w << ?n)",
     template_equation
      (template_app
        (template_app (template_hole 2, template_var 1), template_var 0),
       template_app
        (template_hole 1,
         template_app
          (template_app
            (template_hole 0,
             template_app (template_hole 1, template_var 1)),
           template_var 0)))),
    ("Word_Lemmas.shiftr1_is_div_2", "?x >> 1 = ?x div 2",
     template_equation
      (template_app
        (template_app (template_hole 5, template_var 0), template_hole 4),
       template_app
        (template_app (template_hole 3, template_var 0),
         template_app
          (template_hole 2,
           template_app (template_hole 1, template_hole 0))))),
    ("Word_Lemmas.rev_shiftl",
     "word_reverse ?w << ?n = word_reverse (?w >> ?n)",
     template_equation
      (template_app
        (template_app
          (template_hole 2, template_app (template_hole 1, template_var 1)),
         template_var 0),
       template_app
        (template_hole 1,
         template_app
          (template_app (template_hole 0, template_var 1),
           template_var 0)))),
    ("Word_Lemmas.rev_shiftr",
     "word_reverse ?w >> ?n = word_reverse (?w << ?n)",
     template_equation
      (template_app
        (template_app
          (template_hole 2, template_app (template_hole 1, template_var 1)),
         template_var 0),
       template_app
        (template_hole 1,
         template_app
          (template_app (template_hole 0, template_var 1),
           template_var 0)))),
    ("Word_Lemmas.minus_one_shift", "- (1 << ?n) = - 1 << ?n",
     template_equation
      (template_app
        (template_hole 2,
         template_app
          (template_app (template_hole 1, template_hole 0),
           template_var 0)),
       template_app
        (template_app
          (template_hole 1,
           template_app (template_hole 2, template_hole 0)),
         template_var 0))),
    ("Word_Lemmas.scast_ucast_add_one",
     "SCAST(?'a signed \<rightarrow> ?'a)
       (UCAST(?'a \<rightarrow> ?'a signed) ?x + 1) =
      ?x + 1",
     template_equation
      (template_app
        (template_hole 5,
         template_app
          (template_app
            (template_hole 4,
             template_app (template_hole 3, template_var 0)),
           template_hole 2)),
       template_app
        (template_app (template_hole 1, template_var 0), template_hole 0))),
    ("Word_Lemmas.unat_ucast_eq_unat_and_mask",
     "unat (UCAST(?'b \<rightarrow> ?'a) ?w) =
      unat (and ?w (mask LENGTH(?'a)))",
     template_equation
      (template_app
        (template_hole 6, template_app (template_hole 5, template_var 0)),
       template_app
        (template_hole 4,
         template_app
          (template_app (template_hole 3, template_var 0),
           template_app
            (template_hole 2,
             template_app (template_hole 1, template_hole 0)))))),
    ("Word_Lemmas.unat_ucast_mask",
     "unat (UCAST(?'aa \<rightarrow> ?'a) ?a) =
      unat (and ?a (mask LENGTH(?'a)))",
     template_equation
      (template_app
        (template_hole 6, template_app (template_hole 5, template_var 0)),
       template_app
        (template_hole 4,
         template_app
          (template_app (template_hole 3, template_var 0),
           template_app
            (template_hole 2,
             template_app (template_hole 1, template_hole 0)))))),
    ("Word_Lemmas.of_nat_eq_signed_scast",
     "(word_of_nat ?x = ?y) =
      (word_of_nat ?x = SCAST(?'a signed \<rightarrow> ?'a) ?y)",
     template_bimplication
      (template_equation
        (template_app (template_hole 3, template_var 1), template_var 0),
       template_equation
        (template_app (template_hole 1, template_var 1),
         template_app (template_hole 0, template_var 0)))),
    ("Word_Lemmas.le_mask_iff", "(?w <= mask ?n) = (?w >> ?n = 0)",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 4, template_var 1),
              template_app (template_hole 3, template_var 0))
            )],
       template_equation
        (template_app
          (template_app (template_hole 1, template_var 1), template_var 0),
         template_hole 0))),
    ("Word_Lemmas.shiftr_1", "1 >> ?n = (if ?n = 0 then 1 else 0)",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 5, template_hole 4),
              template_var 0)
            )],
       template_dunno)),
    ("Word_Lemmas.of_bool_nth", "of_bool (bit ?x ?v) = and (?x >> ?v) 1",
     template_equation
      (template_app
        (template_hole 4,
         template_app
          (template_app (template_hole 3, template_var 1), template_var 0)),
       template_app
        (template_app
          (template_hole 2,
           template_app
            (template_app (template_hole 1, template_var 1),
             template_var 0)),
         template_hole 0))),
    ("Word_Lemmas.mask_of_mask",
     "and (mask ?n) (mask ?m) = mask (min ?m ?n)",
     template_equation
      (template_app
        (template_app
          (template_hole 2, template_app (template_hole 1, template_var 1)),
         template_app (template_hole 1, template_var 0)),
       template_app
        (template_hole 1,
         template_app
          (template_app (template_hole 0, template_var 0),
           template_var 1)))),
    ("Word_Lemmas.ucast_minus",
     "UCAST(?'a \<rightarrow> ?'a signed) (?a - ?b) =
      UCAST(?'a \<rightarrow> ?'a signed) ?a -
      UCAST(?'a \<rightarrow> ?'a signed) ?b",
     template_equation
      (template_app
        (template_hole 2,
         template_app
          (template_app (template_hole 1, template_var 1), template_var 0)),
       template_app
        (template_app
          (template_hole 0, template_app (template_hole 2, template_var 1)),
         template_app (template_hole 2, template_var 0)))),
    ("Word_Lemmas.ucast_add",
     "UCAST(?'a \<rightarrow> ?'a signed) (?a + ?b) =
      UCAST(?'a \<rightarrow> ?'a signed) ?a +
      UCAST(?'a \<rightarrow> ?'a signed) ?b",
     template_equation
      (template_app
        (template_hole 2,
         template_app
          (template_app (template_hole 1, template_var 1), template_var 0)),
       template_app
        (template_app
          (template_hole 0, template_app (template_hole 2, template_var 1)),
         template_app (template_hole 2, template_var 0)))),
    ("Word_Lemmas.is_aligned_neg_mask_eq'",
     "is_aligned ?ptr ?sz = (and ?ptr (not (mask ?sz)) = ?ptr)",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 4, template_var 1),
              template_var 0)
            )],
       template_equation
        (template_app
          (template_app (template_hole 2, template_var 1),
           template_app
            (template_hole 1,
             template_app (template_hole 0, template_var 0))),
         template_var 1))),
    ("Word_Lemmas.bit_shiftr_word_iff",
     "bit (?w >> ?m) ?n = bit ?w (?m + ?n)",
     template_equation
      (template_app
        (template_app
          (template_hole 2,
           template_app
            (template_app (template_hole 1, template_var 2),
             template_var 1)),
         template_var 0),
       template_app
        (template_app (template_hole 2, template_var 2),
         template_app
          (template_app (template_hole 0, template_var 1),
           template_var 0)))),
    ("Word_Lemmas.nth_shiftr", "bit (?w >> ?m) ?n = bit ?w (?n + ?m)",
     template_equation
      (template_app
        (template_app
          (template_hole 2,
           template_app
            (template_app (template_hole 1, template_var 2),
             template_var 1)),
         template_var 0),
       template_app
        (template_app (template_hole 2, template_var 2),
         template_app
          (template_app (template_hole 0, template_var 0),
           template_var 1)))),
    ("Word_Lemmas.shiftl_t2n", "?w << ?n = 2 ^ ?n * ?w",
     template_equation
      (template_app
        (template_app (template_hole 5, template_var 1), template_var 0),
       template_app
        (template_app
          (template_hole 4,
           template_app
            (template_app
              (template_hole 3,
               template_app
                (template_hole 2,
                 template_app (template_hole 1, template_hole 0))),
             template_var 0)),
         template_var 1))),
    ("Word_Lemmas.shiftr_div_2n_w", "?w >> ?n = ?w div 2 ^ ?n",
     template_equation
      (template_app
        (template_app (template_hole 5, template_var 1), template_var 0),
       template_app
        (template_app (template_hole 4, template_var 1),
         template_app
          (template_app
            (template_hole 3,
             template_app
              (template_hole 2,
               template_app (template_hole 1, template_hole 0))),
           template_var 0)))),
    ("Word_Lemmas.and_not_mask", "and ?w (not (mask ?n)) = ?w >> ?n << ?n",
     template_equation
      (template_app
        (template_app (template_hole 4, template_var 1),
         template_app
          (template_hole 3,
           template_app (template_hole 2, template_var 0))),
       template_app
        (template_app
          (template_hole 1,
           template_app
            (template_app (template_hole 0, template_var 1),
             template_var 0)),
         template_var 0))),
    ("Word_Lemmas.shiftl_shiftl", "?a << ?b << ?c = ?a << ?b + ?c",
     template_equation
      (template_app
        (template_app
          (template_hole 1,
           template_app
            (template_app (template_hole 1, template_var 2),
             template_var 1)),
         template_var 0),
       template_app
        (template_app (template_hole 1, template_var 2),
         template_app
          (template_app (template_hole 0, template_var 1),
           template_var 0)))),
    ("Word_Lemmas.shiftr_shiftr", "?a >> ?b >> ?c = ?a >> ?b + ?c",
     template_equation
      (template_app
        (template_app
          (template_hole 1,
           template_app
            (template_app (template_hole 1, template_var 2),
             template_var 1)),
         template_var 0),
       template_app
        (template_app (template_hole 1, template_var 2),
         template_app
          (template_app (template_hole 0, template_var 1),
           template_var 0)))),
    ("Word_Lemmas.mask_shift", "and ?x (not (mask ?y)) >> ?y = ?x >> ?y",
     template_equation
      (template_app
        (template_app
          (template_hole 3,
           template_app
            (template_app (template_hole 2, template_var 1),
             template_app
              (template_hole 1,
               template_app (template_hole 0, template_var 0)))),
         template_var 0),
       template_app
        (template_app (template_hole 3, template_var 1), template_var 0))),
    ("Word_Lemmas.shiftr_shiftl_shiftr", "?x >> ?a << ?a >> ?a = ?x >> ?a",
     template_equation
      (template_app
        (template_app
          (template_hole 1,
           template_app
            (template_app
              (template_hole 0,
               template_app
                (template_app (template_hole 1, template_var 1),
                 template_var 0)),
             template_var 0)),
         template_var 0),
       template_app
        (template_app (template_hole 1, template_var 1), template_var 0))),
    ("Word_Lemmas.ucast_NOT",
     "UCAST(?'a \<rightarrow> ?'b) (not ?x) =
      and (not (UCAST(?'a \<rightarrow> ?'b) ?x)) (mask LENGTH(?'a))",
     template_equation
      (template_app
        (template_hole 6, template_app (template_hole 5, template_var 0)),
       template_app
        (template_app
          (template_hole 4,
           template_app
            (template_hole 3,
             template_app (template_hole 6, template_var 0))),
         template_app
          (template_hole 2,
           template_app (template_hole 1, template_hole 0))))),
    ("Word_Lemmas.and_mask_eq_iff_shiftr_0",
     "(and ?w (mask ?n) = ?w) = (?w >> ?n = 0)",
     template_bimplication
      (template_equation
        (template_app
          (template_app (template_hole 3, template_var 1),
           template_app (template_hole 2, template_var 0)),
         template_var 1),
       template_equation
        (template_app
          (template_app (template_hole 1, template_var 1), template_var 0),
         template_hole 0))),
    ("Word_Lemmas.mask_Suc", "mask (Suc ?n) = 2 ^ ?n + mask ?n",
     template_equation
      (template_app
        (template_hole 6, template_app (template_hole 5, template_var 0)),
       template_app
        (template_app
          (template_hole 4,
           template_app
            (template_app
              (template_hole 3,
               template_app
                (template_hole 2,
                 template_app (template_hole 1, template_hole 0))),
             template_var 0)),
         template_app (template_hole 6, template_var 0)))),
    ("Word_Lemmas.word_add_format", "- 1 + ?b + ?c = ?b + (?c - 1)",
     template_equation
      (template_app
        (template_app
          (template_hole 3,
           template_app
            (template_app
              (template_hole 3,
               template_app (template_hole 2, template_hole 1)),
             template_var 1)),
         template_var 0),
       template_app
        (template_app (template_hole 3, template_var 1),
         template_app
          (template_app (template_hole 0, template_var 0),
           template_hole 1)))),
    ("Word_Lemmas.word_shift_by_2", "?x * 4 = ?x << 2",
     template_equation
      (template_app
        (template_app (template_hole 5, template_var 0),
         template_app
          (template_hole 4,
           template_app
            (template_hole 3,
             template_app (template_hole 3, template_hole 2)))),
       template_app
        (template_app (template_hole 1, template_var 0),
         template_app
          (template_hole 0,
           template_app (template_hole 3, template_hole 2))))),
    ("Word_Lemmas.scast_of_nat_signed_to_unsigned_add",
     "SCAST(?'a signed \<rightarrow> ?'a)
       (word_of_nat ?x + word_of_nat ?y) =
      word_of_nat ?x + word_of_nat ?y",
     template_equation
      (template_app
        (template_hole 4,
         template_app
          (template_app
            (template_hole 3,
             template_app (template_hole 2, template_var 1)),
           template_app (template_hole 2, template_var 0))),
       template_app
        (template_app
          (template_hole 1, template_app (template_hole 0, template_var 1)),
         template_app (template_hole 0, template_var 0)))),
    ("Word_Lemmas.scast_of_nat_unsigned_to_signed_add",
     "SCAST(?'a \<rightarrow> ?'a signed)
       (word_of_nat ?x + word_of_nat ?y) =
      word_of_nat ?x + word_of_nat ?y",
     template_equation
      (template_app
        (template_hole 4,
         template_app
          (template_app
            (template_hole 3,
             template_app (template_hole 2, template_var 1)),
           template_app (template_hole 2, template_var 0))),
       template_app
        (template_app
          (template_hole 1, template_app (template_hole 0, template_var 1)),
         template_app (template_hole 0, template_var 0)))),
    ("Word_Lemmas.sshiftr_div_2n", "sint (?w >>> ?n) = sint ?w div 2 ^ ?n",
     template_equation
      (template_app
        (template_hole 6,
         template_app
          (template_app (template_hole 5, template_var 1), template_var 0)),
       template_app
        (template_app
          (template_hole 4, template_app (template_hole 6, template_var 1)),
         template_app
          (template_app
            (template_hole 3,
             template_app
              (template_hole 2,
               template_app (template_hole 1, template_hole 0))),
           template_var 0)))),
    ("Word_Lemmas.shiftr_div_2n", "uint (?w >> ?n) = uint ?w div 2 ^ ?n",
     template_equation
      (template_app
        (template_hole 6,
         template_app
          (template_app (template_hole 5, template_var 1), template_var 0)),
       template_app
        (template_app
          (template_hole 4, template_app (template_hole 6, template_var 1)),
         template_app
          (template_app
            (template_hole 3,
             template_app
              (template_hole 2,
               template_app (template_hole 1, template_hole 0))),
           template_var 0)))),
    ("Word_Lemmas.shiftr_div_2n'", "unat (?w >> ?n) = unat ?w div 2 ^ ?n",
     template_equation
      (template_app
        (template_hole 6,
         template_app
          (template_app (template_hole 5, template_var 1), template_var 0)),
       template_app
        (template_app
          (template_hole 4, template_app (template_hole 6, template_var 1)),
         template_app
          (template_app
            (template_hole 3,
             template_app
              (template_hole 2,
               template_app (template_hole 1, template_hole 0))),
           template_var 0)))),
    ("Word_Lemmas.mask_shiftl_decompose",
     "mask ?m << ?n = and (mask (?m + ?n)) (not (mask ?n))",
     template_equation
      (template_app
        (template_app
          (template_hole 4, template_app (template_hole 3, template_var 1)),
         template_var 0),
       template_app
        (template_app
          (template_hole 2,
           template_app
            (template_hole 3,
             template_app
              (template_app (template_hole 1, template_var 1),
               template_var 0))),
         template_app
          (template_hole 0,
           template_app (template_hole 3, template_var 0))))),
    ("Word_Lemmas.of_nat_shiftl",
     "word_of_nat ?x << ?n = word_of_nat (?x * 2 ^ ?n)",
     template_equation
      (template_app
        (template_app
          (template_hole 6, template_app (template_hole 5, template_var 1)),
         template_var 0),
       template_app
        (template_hole 5,
         template_app
          (template_app (template_hole 4, template_var 1),
           template_app
            (template_app
              (template_hole 3,
               template_app
                (template_hole 2,
                 template_app (template_hole 1, template_hole 0))),
             template_var 0))))),
    ("Word_Lemmas.shiftl_over_and_dist",
     "and ?a ?b << ?c = and (?a << ?c) (?b << ?c)",
     template_equation
      (template_app
        (template_app
          (template_hole 1,
           template_app
            (template_app (template_hole 0, template_var 2),
             template_var 1)),
         template_var 0),
       template_app
        (template_app
          (template_hole 0,
           template_app
            (template_app (template_hole 1, template_var 2),
             template_var 0)),
         template_app
          (template_app (template_hole 1, template_var 1),
           template_var 0)))),
    ("Word_Lemmas.shiftl_over_or_dist",
     "or ?a ?b << ?c = or (?a << ?c) (?b << ?c)",
     template_equation
      (template_app
        (template_app
          (template_hole 1,
           template_app
            (template_app (template_hole 0, template_var 2),
             template_var 1)),
         template_var 0),
       template_app
        (template_app
          (template_hole 0,
           template_app
            (template_app (template_hole 1, template_var 2),
             template_var 0)),
         template_app
          (template_app (template_hole 1, template_var 1),
           template_var 0)))),
    ("Word_Lemmas.word_shiftl_add_distrib",
     "?x + ?y << ?n = (?x << ?n) + (?y << ?n)",
     template_equation
      (template_app
        (template_app
          (template_hole 1,
           template_app
            (template_app (template_hole 0, template_var 2),
             template_var 1)),
         template_var 0),
       template_app
        (template_app
          (template_hole 0,
           template_app
            (template_app (template_hole 1, template_var 2),
             template_var 0)),
         template_app
          (template_app (template_hole 1, template_var 1),
           template_var 0)))),
    ("Word_Lemmas.shiftr_over_and_dist",
     "and ?a ?b >> ?c = and (?a >> ?c) (?b >> ?c)",
     template_equation
      (template_app
        (template_app
          (template_hole 1,
           template_app
            (template_app (template_hole 0, template_var 2),
             template_var 1)),
         template_var 0),
       template_app
        (template_app
          (template_hole 0,
           template_app
            (template_app (template_hole 1, template_var 2),
             template_var 0)),
         template_app
          (template_app (template_hole 1, template_var 1),
           template_var 0)))),
    ("Word_Lemmas.shiftr_over_or_dist",
     "or ?a ?b >> ?c = or (?a >> ?c) (?b >> ?c)",
     template_equation
      (template_app
        (template_app
          (template_hole 1,
           template_app
            (template_app (template_hole 0, template_var 2),
             template_var 1)),
         template_var 0),
       template_app
        (template_app
          (template_hole 0,
           template_app
            (template_app (template_hole 1, template_var 2),
             template_var 0)),
         template_app
          (template_app (template_hole 1, template_var 1),
           template_var 0)))),
    ("Word_Lemmas.and_mask2",
     "?w << ?n >> ?n = and ?w (mask (size ?w - ?n))",
     template_equation
      (template_app
        (template_app
          (template_hole 5,
           template_app
            (template_app (template_hole 4, template_var 1),
             template_var 0)),
         template_var 0),
       template_app
        (template_app (template_hole 3, template_var 1),
         template_app
          (template_hole 2,
           template_app
            (template_app
              (template_hole 1,
               template_app (template_hole 0, template_var 1)),
             template_var 0))))),
    ("Word_Lemmas.sshiftr_over_and_dist",
     "and ?a ?b >>> ?c = and (?a >>> ?c) (?b >>> ?c)",
     template_equation
      (template_app
        (template_app
          (template_hole 1,
           template_app
            (template_app (template_hole 0, template_var 2),
             template_var 1)),
         template_var 0),
       template_app
        (template_app
          (template_hole 0,
           template_app
            (template_app (template_hole 1, template_var 2),
             template_var 0)),
         template_app
          (template_app (template_hole 1, template_var 1),
           template_var 0)))),
    ("Word_Lemmas.sshiftr_over_or_dist",
     "or ?a ?b >>> ?c = or (?a >>> ?c) (?b >>> ?c)",
     template_equation
      (template_app
        (template_app
          (template_hole 1,
           template_app
            (template_app (template_hole 0, template_var 2),
             template_var 1)),
         template_var 0),
       template_app
        (template_app
          (template_hole 0,
           template_app
            (template_app (template_hole 1, template_var 2),
             template_var 0)),
         template_app
          (template_app (template_hole 1, template_var 1),
           template_var 0)))),
    ("Word_Lemmas.word_shift_by_3", "?x * 8 = ?x << 3",
     template_equation
      (template_app
        (template_app (template_hole 6, template_var 0),
         template_app
          (template_hole 5,
           template_app
            (template_hole 4,
             template_app
              (template_hole 4,
               template_app (template_hole 4, template_hole 3))))),
       template_app
        (template_app (template_hole 2, template_var 0),
         template_app
          (template_hole 1,
           template_app (template_hole 0, template_hole 3))))),
    ("Word_Lemmas.mask_rshift_mult_eq_rshift_lshift",
     "(?a >> ?b) * (1 << ?c) = ?a >> ?b << ?c",
     template_equation
      (template_app
        (template_app
          (template_hole 3,
           template_app
            (template_app (template_hole 2, template_var 2),
             template_var 1)),
         template_app
          (template_app (template_hole 1, template_hole 0),
           template_var 0)),
       template_app
        (template_app
          (template_hole 1,
           template_app
            (template_app (template_hole 2, template_var 2),
             template_var 1)),
         template_var 0))),
    ("Word_Lemmas.shiftr_mask_eq",
     "and (?x >> ?n) (mask (size ?x - ?n)) = ?x >> ?n",
     template_equation
      (template_app
        (template_app
          (template_hole 4,
           template_app
            (template_app (template_hole 3, template_var 1),
             template_var 0)),
         template_app
          (template_hole 2,
           template_app
            (template_app
              (template_hole 1,
               template_app (template_hole 0, template_var 1)),
             template_var 0))),
       template_app
        (template_app (template_hole 3, template_var 1), template_var 0))),
    ("Word_Lemmas.word_and_1_shiftls'",
     "and ?x (1 << 1) = (if bit ?x 1 then 1 << 1 else 0)",
     template_equation
      (template_app
        (template_app (template_hole 6, template_var 0),
         template_app
          (template_app (template_hole 5, template_hole 4),
           template_hole 3)),
       template_app
        (template_app
          (template_app
            (template_hole 2,
             template_app
              (template_app (template_hole 1, template_var 0),
               template_hole 3)),
           template_app
            (template_app (template_hole 5, template_hole 4),
             template_hole 3)),
         template_hole 0))),
    ("Word_Lemmas.word_and_1_shiftls'",
     "and ?x (1 << 0) = (if bit ?x 0 then 1 << 0 else 0)",
     template_equation
      (template_app
        (template_app (template_hole 6, template_var 0),
         template_app
          (template_app (template_hole 5, template_hole 4),
           template_hole 3)),
       template_app
        (template_app
          (template_app
            (template_hole 2,
             template_app
              (template_app (template_hole 1, template_var 0),
               template_hole 3)),
           template_app
            (template_app (template_hole 5, template_hole 4),
             template_hole 3)),
         template_hole 0))),
    ("Word_Lemmas.word_and_1_shiftl",
     "and ?x (1 << ?n) = (if bit ?x ?n then 1 << ?n else 0)",
     template_equation
      (template_app
        (template_app (template_hole 5, template_var 1),
         template_app
          (template_app (template_hole 4, template_hole 3),
           template_var 0)),
       template_app
        (template_app
          (template_app
            (template_hole 2,
             template_app
              (template_app (template_hole 1, template_var 1),
               template_var 0)),
           template_app
            (template_app (template_hole 4, template_hole 3),
             template_var 0)),
         template_hole 0))),
    ("Word_Lemmas.shiftr_mul_not_mask_eq_and_not_mask",
     "(?x >> ?n) * not (mask ?n) = - and ?x (not (mask ?n))",
     template_equation
      (template_app
        (template_app
          (template_hole 5,
           template_app
            (template_app (template_hole 4, template_var 1),
             template_var 0)),
         template_app
          (template_hole 3,
           template_app (template_hole 2, template_var 0))),
       template_app
        (template_hole 1,
         template_app
          (template_app (template_hole 0, template_var 1),
           template_app
            (template_hole 3,
             template_app (template_hole 2, template_var 0)))))),
    ("Word_Lemmas.NOT_mask_shifted_lenword",
     "not (mask ?len << LENGTH(?'a) - ?len) = mask (LENGTH(?'a) - ?len)",
     template_equation
      (template_app
        (template_hole 5,
         template_app
          (template_app
            (template_hole 4,
             template_app (template_hole 3, template_var 0)),
           template_app
            (template_app
              (template_hole 2,
               template_app (template_hole 1, template_hole 0)),
             template_var 0))),
       template_app
        (template_hole 3,
         template_app
          (template_app
            (template_hole 2,
             template_app (template_hole 1, template_hole 0)),
           template_var 0)))),
    ("Word_Lemmas.mask_shift_and_negate",
     "and (and ?w (mask ?n) << ?m) (not (mask ?n << ?m)) = 0",
     template_equation
      (template_app
        (template_app
          (template_hole 4,
           template_app
            (template_app
              (template_hole 3,
               template_app
                (template_app (template_hole 4, template_var 2),
                 template_app (template_hole 2, template_var 1))),
             template_var 0)),
         template_app
          (template_hole 1,
           template_app
            (template_app
              (template_hole 3,
               template_app (template_hole 2, template_var 1)),
             template_var 0))),
       template_hole 0)),
    ("Word_Lemmas.word_and_1_shiftls",
     "and ?x 1 = (if odd ?x then 1 << 0 else 0)",
     template_equation
      (template_app
        (template_app (template_hole 10, template_var 0), template_hole 9),
       template_app
        (template_app
          (template_app
            (template_hole 8,
             template_app
              (template_hole 7,
               template_app
                (template_app
                  (template_hole 6,
                   template_app
                    (template_hole 5,
                     template_app (template_hole 4, template_hole 3))),
                 template_var 0))),
           template_app
            (template_app (template_hole 2, template_hole 9),
             template_hole 1)),
         template_hole 0))),
    ("Word_Lemmas.word_and_1_shiftls",
     "and ?x 2 = (if bit ?x (Suc 0) then 1 << 1 else 0)",
     template_equation
      (template_app
        (template_app (template_hole 11, template_var 0),
         template_app
          (template_hole 10,
           template_app (template_hole 9, template_hole 8))),
       template_app
        (template_app
          (template_app
            (template_hole 7,
             template_app
              (template_app (template_hole 6, template_var 0),
               template_app (template_hole 5, template_hole 4))),
           template_app
            (template_app (template_hole 3, template_hole 2),
             template_hole 1)),
         template_hole 0))),
    ("Word_Lemmas.word_and_mask_shiftl",
     "and ?x (mask ?n << ?m) = and (?x >> ?m) (mask ?n) << ?m",
     template_equation
      (template_app
        (template_app (template_hole 3, template_var 2),
         template_app
          (template_app
            (template_hole 2,
             template_app (template_hole 1, template_var 1)),
           template_var 0)),
       template_app
        (template_app
          (template_hole 2,
           template_app
            (template_app
              (template_hole 3,
               template_app
                (template_app (template_hole 0, template_var 2),
                 template_var 0)),
             template_app (template_hole 1, template_var 1))),
         template_var 0))),
    ("Word_Lemmas.shift_times_fold", "?x * 2 ^ ?n << ?m = ?x << ?m + ?n",
     template_equation
      (template_app
        (template_app
          (template_hole 6,
           template_app
            (template_app (template_hole 5, template_var 2),
             template_app
              (template_app
                (template_hole 4,
                 template_app
                  (template_hole 3,
                   template_app (template_hole 2, template_hole 1))),
               template_var 1))),
         template_var 0),
       template_app
        (template_app (template_hole 6, template_var 2),
         template_app
          (template_app (template_hole 0, template_var 0),
           template_var 1)))),
    ("Word_Lemmas.uint_sshiftr_eq",
     "uint (?w >>> ?n) = take_bit LENGTH(?'a) (sint ?w div 2 ^ ?n)",
     template_equation
      (template_app
        (template_hole 10,
         template_app
          (template_app (template_hole 9, template_var 1), template_var 0)),
       template_app
        (template_app
          (template_hole 8,
           template_app (template_hole 7, template_hole 6)),
         template_app
          (template_app
            (template_hole 5,
             template_app (template_hole 4, template_var 1)),
           template_app
            (template_app
              (template_hole 3,
               template_app
                (template_hole 2,
                 template_app (template_hole 1, template_hole 0))),
             template_var 0))))),
    ("Word_Lemmas.and_mask",
     "and ?w (mask ?n) = ?w << size ?w - ?n >> size ?w - ?n",
     template_equation
      (template_app
        (template_app (template_hole 5, template_var 1),
         template_app (template_hole 4, template_var 0)),
       template_app
        (template_app
          (template_hole 3,
           template_app
            (template_app (template_hole 2, template_var 1),
             template_app
              (template_app
                (template_hole 1,
                 template_app (template_hole 0, template_var 1)),
               template_var 0))),
         template_app
          (template_app
            (template_hole 1,
             template_app (template_hole 0, template_var 1)),
           template_var 0)))),
    ("Word_Lemmas.rshift_sub_mask_eq",
     "and (?a >> size ?a - ?b) (mask ?b) = ?a >> size ?a - ?b",
     template_equation
      (template_app
        (template_app
          (template_hole 4,
           template_app
            (template_app (template_hole 3, template_var 1),
             template_app
              (template_app
                (template_hole 2,
                 template_app (template_hole 1, template_var 1)),
               template_var 0))),
         template_app (template_hole 0, template_var 0)),
       template_app
        (template_app (template_hole 3, template_var 1),
         template_app
          (template_app
            (template_hole 2,
             template_app (template_hole 1, template_var 1)),
           template_var 0)))),
    ("Word_Lemmas.ucast_eq_mask",
     "(UCAST(?'a \<rightarrow> ?'b) ?x = UCAST(?'a \<rightarrow> ?'b) ?y) =
      (and ?x (mask LENGTH(?'b)) = and ?y (mask LENGTH(?'b)))",
     template_bimplication
      (template_equation
        (template_app (template_hole 5, template_var 1),
         template_app (template_hole 5, template_var 0)),
       template_equation
        (template_app
          (template_app (template_hole 3, template_var 1),
           template_app
            (template_hole 2,
             template_app (template_hole 1, template_hole 0))),
         template_app
          (template_app (template_hole 3, template_var 0),
           template_app
            (template_hole 2,
             template_app (template_hole 1, template_hole 0)))))),
    ("Word_Lemmas.sshiftr_numeral",
     "numeral ?k >>> numeral ?n =
      word_of_int
       (signed_take_bit (LENGTH(?'a) - 1) (numeral ?k) >> numeral ?n)",
     template_equation
      (template_app
        (template_app
          (template_hole 10,
           template_app (template_hole 9, template_var 1)),
         template_app (template_hole 8, template_var 0)),
       template_app
        (template_hole 7,
         template_app
          (template_app
            (template_hole 6,
             template_app
              (template_app
                (template_hole 5,
                 template_app
                  (template_app
                    (template_hole 4,
                     template_app (template_hole 3, template_hole 2)),
                   template_hole 1)),
               template_app (template_hole 0, template_var 1))),
           template_app (template_hole 8, template_var 0))))),
    ("Word_Lemmas.mask_shift_eq_mask_mask",
     "and ?p (mask ?a) >> ?b << ?b =
      and (and ?p (mask ?a)) (not (mask ?b))",
     template_equation
      (template_app
        (template_app
          (template_hole 4,
           template_app
            (template_app
              (template_hole 3,
               template_app
                (template_app (template_hole 2, template_var 2),
                 template_app (template_hole 1, template_var 1))),
             template_var 0)),
         template_var 0),
       template_app
        (template_app
          (template_hole 2,
           template_app
            (template_app (template_hole 2, template_var 2),
             template_app (template_hole 1, template_var 1))),
         template_app
          (template_hole 0,
           template_app (template_hole 1, template_var 0))))),
    ("Word_Lemmas.unat_2tp_if",
     "unat (2 ^ ?n) = (if ?n < LENGTH(?'a) then 2 ^ ?n else 0)",
     template_equation
      (template_app
        (template_hole 11,
         template_app
          (template_app
            (template_hole 10,
             template_app
              (template_hole 9,
               template_app (template_hole 8, template_hole 7))),
           template_var 0)),
       template_app
        (template_app
          (template_app
            (template_hole 6,
             template_app
              (template_app (template_hole 5, template_var 0),
               template_app (template_hole 4, template_hole 3))),
           template_app
            (template_app
              (template_hole 2,
               template_app
                (template_hole 1,
                 template_app (template_hole 8, template_hole 7))),
             template_var 0)),
         template_hole 0))),
    ("Word_Lemmas.word_and_1_shiftls",
     "and ?x 4 = (if bit ?x 2 then 1 << 2 else 0)",
     template_equation
      (template_app
        (template_app (template_hole 9, template_var 0),
         template_app
          (template_hole 8,
           template_app
            (template_hole 7,
             template_app (template_hole 7, template_hole 6)))),
       template_app
        (template_app
          (template_app
            (template_hole 5,
             template_app
              (template_app (template_hole 4, template_var 0),
               template_app
                (template_hole 3,
                 template_app (template_hole 7, template_hole 6)))),
           template_app
            (template_app (template_hole 2, template_hole 1),
             template_app
              (template_hole 3,
               template_app (template_hole 7, template_hole 6)))),
         template_hole 0))),
    ("Word_Lemmas.t2n_mask_eq_if",
     "and (2 ^ ?n) (mask ?m) = (if ?n < ?m then 2 ^ ?n else 0)",
     template_equation
      (template_app
        (template_app
          (template_hole 8,
           template_app
            (template_app
              (template_hole 7,
               template_app
                (template_hole 6,
                 template_app (template_hole 5, template_hole 4))),
             template_var 1)),
         template_app (template_hole 3, template_var 0)),
       template_app
        (template_app
          (template_app
            (template_hole 2,
             template_app
              (template_app (template_hole 1, template_var 1),
               template_var 0)),
           template_app
            (template_app
              (template_hole 7,
               template_app
                (template_hole 6,
                 template_app (template_hole 5, template_hole 4))),
             template_var 1)),
         template_hole 0))),
    ("Word_Lemmas.bit_shiftl_word_iff",
     "bit (?w << ?m) ?n = (?m <= ?n & ?n < LENGTH(?'a) & bit ?w (?n - ?m))",
     template_equation
      (template_app
        (template_app
          (template_hole 7,
           template_app
            (template_app (template_hole 6, template_var 2),
             template_var 1)),
         template_var 0),
       template_app
        (template_app
          (template_hole 5,
           template_app
            (template_app (template_hole 4, template_var 1),
             template_var 0)),
         template_app
          (template_app
            (template_hole 5,
             template_app
              (template_app (template_hole 3, template_var 0),
               template_app (template_hole 2, template_hole 1))),
           template_app
            (template_app (template_hole 7, template_var 2),
             template_app
              (template_app (template_hole 0, template_var 0),
               template_var 1)))))),
    ("Word_Lemmas.nth_shiftl'",
     "bit (?w << ?m) ?n = (?n < size ?w & ?m <= ?n & bit ?w (?n - ?m))",
     template_equation
      (template_app
        (template_app
          (template_hole 6,
           template_app
            (template_app (template_hole 5, template_var 2),
             template_var 1)),
         template_var 0),
       template_app
        (template_app
          (template_hole 4,
           template_app
            (template_app (template_hole 3, template_var 0),
             template_app (template_hole 2, template_var 2))),
         template_app
          (template_app
            (template_hole 4,
             template_app
              (template_app (template_hole 1, template_var 1),
               template_var 0)),
           template_app
            (template_app (template_hole 6, template_var 2),
             template_app
              (template_app (template_hole 0, template_var 0),
               template_var 1)))))),
    ("Word_Lemmas.nth_shiftl",
     "bit (?w << ?m) ?n = (?n < LENGTH(?'a) & ?m <= ?n & bit ?w (?n - ?m))",
     template_equation
      (template_app
        (template_app
          (template_hole 7,
           template_app
            (template_app (template_hole 6, template_var 2),
             template_var 1)),
         template_var 0),
       template_app
        (template_app
          (template_hole 5,
           template_app
            (template_app (template_hole 4, template_var 0),
             template_app (template_hole 3, template_hole 2))),
         template_app
          (template_app
            (template_hole 5,
             template_app
              (template_app (template_hole 1, template_var 1),
               template_var 0)),
           template_app
            (template_app (template_hole 7, template_var 2),
             template_app
              (template_app (template_hole 0, template_var 0),
               template_var 1)))))),
    ("Word_Lemmas.word_and_1_shiftls'",
     "and ?x (1 << 2) = (if bit ?x 2 then 1 << 2 else 0)",
     template_equation
      (template_app
        (template_app (template_hole 8, template_var 0),
         template_app
          (template_app (template_hole 7, template_hole 6),
           template_app
            (template_hole 5,
             template_app (template_hole 4, template_hole 3)))),
       template_app
        (template_app
          (template_app
            (template_hole 2,
             template_app
              (template_app (template_hole 1, template_var 0),
               template_app
                (template_hole 5,
                 template_app (template_hole 4, template_hole 3)))),
           template_app
            (template_app (template_hole 7, template_hole 6),
             template_app
              (template_hole 5,
               template_app (template_hole 4, template_hole 3)))),
         template_hole 0))),
    ("Word_Lemmas.scast_ucast_mask_compare",
     "(SCAST(?'b \<rightarrow> ?'a) (UCAST(?'a \<rightarrow> ?'b) ?w) =
       ?w) =
      (?w <= mask (LENGTH(?'b) - 1) | not (mask (LENGTH(?'b) - 1)) <= ?w)",
     template_equation
      (template_app
        (template_app
          (template_hole 10,
           template_app
            (template_hole 9,
             template_app (template_hole 8, template_var 0))),
         template_var 0),
       template_app
        (template_app
          (template_hole 7,
           template_app
            (template_app (template_hole 6, template_var 0),
             template_app
              (template_hole 5,
               template_app
                (template_app
                  (template_hole 4,
                   template_app (template_hole 3, template_hole 2)),
                 template_hole 1)))),
         template_app
          (template_app
            (template_hole 6,
             template_app
              (template_hole 0,
               template_app
                (template_hole 5,
                 template_app
                  (template_app
                    (template_hole 4,
                     template_app (template_hole 3, template_hole 2)),
                   template_hole 1)))),
           template_var 0)))),
    ("Word_Lemmas.scast_ucast_high_bits",
     "(SCAST(?'b \<rightarrow> ?'a) (UCAST(?'a \<rightarrow> ?'b) ?w) =
       ?w) =
      (ALL i:{LENGTH(?'b)..<size ?w}. bit ?w i = bit ?w (LENGTH(?'b) - 1))",
     template_equation
      (template_app
        (template_app
          (template_hole 10,
           template_app
            (template_hole 9,
             template_app (template_hole 8, template_var 0))),
         template_var 0),
       template_app
        (template_app
          (template_hole 7,
           template_app
            (template_app
              (template_hole 6,
               template_app (template_hole 5, template_hole 4)),
             template_app (template_hole 3, template_var 0))),
         t_empty))),
    ("Word_Lemmas.bitfield_op_twice",
     "and (or (and ?x (not (mask ?n << ?m))) (and ?y (mask ?n) << ?m))
       (not (mask ?n << ?m)) =
      and ?x (not (mask ?n << ?m))",
     template_equation
      (template_app
        (template_app
          (template_hole 4,
           template_app
            (template_app
              (template_hole 3,
               template_app
                (template_app (template_hole 4, template_var 3),
                 template_app
                  (template_hole 2,
                   template_app
                    (template_app
                      (template_hole 1,
                       template_app (template_hole 0, template_var 2)),
                     template_var 1)))),
             template_app
              (template_app
                (template_hole 1,
                 template_app
                  (template_app (template_hole 4, template_var 0),
                   template_app (template_hole 0, template_var 2))),
               template_var 1))),
         template_app
          (template_hole 2,
           template_app
            (template_app
              (template_hole 1,
               template_app (template_hole 0, template_var 2)),
             template_var 1))),
       template_app
        (template_app (template_hole 4, template_var 3),
         template_app
          (template_hole 2,
           template_app
            (template_app
              (template_hole 1,
               template_app (template_hole 0, template_var 2)),
             template_var 1))))),
    ("Word_Lemmas.nth_sshiftr",
     "bit (?w >>> ?m) ?n =
      (?n < size ?w &
       (if size ?w <= ?n + ?m then bit ?w (size ?w - 1)
        else bit ?w (?n + ?m)))",
     template_equation
      (template_app
        (template_app
          (template_hole 9,
           template_app
            (template_app (template_hole 8, template_var 2),
             template_var 1)),
         template_var 0),
       template_app
        (template_app
          (template_hole 7,
           template_app
            (template_app (template_hole 6, template_var 0),
             template_app (template_hole 5, template_var 2))),
         template_app
          (template_app
            (template_app
              (template_hole 4,
               template_app
                (template_app
                  (template_hole 3,
                   template_app (template_hole 5, template_var 2)),
                 template_app
                  (template_app (template_hole 2, template_var 0),
                   template_var 1))),
             template_app
              (template_app (template_hole 9, template_var 2),
               template_app
                (template_app
                  (template_hole 1,
                   template_app (template_hole 5, template_var 2)),
                 template_hole 0))),
           template_app
            (template_app (template_hole 9, template_var 2),
             template_app
              (template_app (template_hole 2, template_var 0),
               template_var 1)))))),
    ("Word_Lemmas.sdiv_word_max",
     "(sint ?a sdiv sint ?b < 2 ^ (size ?a - 1)) =
      (?a ~= - (2 ^ (size ?a - 1)) | ?b ~= - 1)",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_hole 16,
                template_app
                 (template_app
                   (template_hole 15,
                    template_app (template_hole 14, template_var 1)),
                  template_app (template_hole 14, template_var 0))),
              template_app
               (template_app
                 (template_hole 13,
                  template_app
                   (template_hole 12,
                    template_app (template_hole 11, template_hole 10))),
                template_app
                 (template_app
                   (template_hole 9,
                    template_app (template_hole 8, template_var 1)),
                  template_hole 7)))
            )],
       template_dunno)),
    ("Word_Lemmas.sdiv_word_max'",
     "(sint ?a sdiv sint ?b < 2 ^ (LENGTH(?'a) - Suc 0)) =
      (?a = - (2 ^ (LENGTH(?'a) - Suc 0)) --> ?b ~= - 1)",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_hole 18,
                template_app
                 (template_app
                   (template_hole 17,
                    template_app (template_hole 16, template_var 1)),
                  template_app (template_hole 16, template_var 0))),
              template_app
               (template_app
                 (template_hole 15,
                  template_app
                   (template_hole 14,
                    template_app (template_hole 13, template_hole 12))),
                template_app
                 (template_app
                   (template_hole 11,
                    template_app (template_hole 10, template_hole 9)),
                  template_app (template_hole 8, template_hole 7))))
            )],
       template_dunno)),
    ("Word_Lemmas.signed_arith_ineq_checks_to_eq",
     "(- (2 ^ (size ?a - 1)) <= - sint ?a &
       - sint ?a <= 2 ^ (size ?a - 1) - 1) =
      (- sint ?a = sint (- ?a))",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_hole 14,
                template_app
                 (template_app
                   (template_hole 13,
                    template_app
                     (template_hole 12,
                      template_app
                       (template_app
                         (template_hole 11,
                          template_app
                           (template_hole 10,
                            template_app
                             (template_hole 9, template_hole 8))),
                        template_app
                         (template_app
                           (template_hole 7,
                            template_app (template_hole 6, template_var 0)),
                          template_hole 5)))),
                  template_app
                   (template_hole 12,
                    template_app (template_hole 4, template_var 0)))),
              template_app
               (template_app
                 (template_hole 13,
                  template_app
                   (template_hole 12,
                    template_app (template_hole 4, template_var 0))),
                template_app
                 (template_app
                   (template_hole 3,
                    template_app
                     (template_app
                       (template_hole 11,
                        template_app
                         (template_hole 10,
                          template_app (template_hole 9, template_hole 8))),
                      template_app
                       (template_app
                         (template_hole 7,
                          template_app (template_hole 6, template_var 0)),
                        template_hole 5))),
                  template_hole 2)))
            )],
       template_equation
        (template_app
          (template_hole 12,
           template_app (template_hole 4, template_var 0)),
         template_app
          (template_hole 4,
           template_app (template_hole 0, template_var 0))))),
    ("Word_Lemmas.signed_arith_ineq_checks_to_eq",
     "(- (2 ^ (size ?a - 1)) <= sint ?a - sint ?b &
       sint ?a - sint ?b <= 2 ^ (size ?a - 1) - 1) =
      (sint ?a - sint ?b = sint (?a - ?b))",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_hole 14,
                template_app
                 (template_app
                   (template_hole 13,
                    template_app
                     (template_hole 12,
                      template_app
                       (template_app
                         (template_hole 11,
                          template_app
                           (template_hole 10,
                            template_app
                             (template_hole 9, template_hole 8))),
                        template_app
                         (template_app
                           (template_hole 7,
                            template_app (template_hole 6, template_var 1)),
                          template_hole 5)))),
                  template_app
                   (template_app
                     (template_hole 4,
                      template_app (template_hole 3, template_var 1)),
                    template_app (template_hole 3, template_var 0)))),
              template_app
               (template_app
                 (template_hole 13,
                  template_app
                   (template_app
                     (template_hole 4,
                      template_app (template_hole 3, template_var 1)),
                    template_app (template_hole 3, template_var 0))),
                template_app
                 (template_app
                   (template_hole 4,
                    template_app
                     (template_app
                       (template_hole 11,
                        template_app
                         (template_hole 10,
                          template_app (template_hole 9, template_hole 8))),
                      template_app
                       (template_app
                         (template_hole 7,
                          template_app (template_hole 6, template_var 1)),
                        template_hole 5))),
                  template_hole 2)))
            )],
       template_equation
        (template_app
          (template_app
            (template_hole 4,
             template_app (template_hole 3, template_var 1)),
           template_app (template_hole 3, template_var 0)),
         template_app
          (template_hole 3,
           template_app
            (template_app (template_hole 0, template_var 1),
             template_var 0))))),
    ("Word_Lemmas.signed_arith_ineq_checks_to_eq",
     "(- (2 ^ (size ?a - 1)) <= sint ?a + sint ?b &
       sint ?a + sint ?b <= 2 ^ (size ?a - 1) - 1) =
      (sint ?a + sint ?b = sint (?a + ?b))",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_hole 15,
                template_app
                 (template_app
                   (template_hole 14,
                    template_app
                     (template_hole 13,
                      template_app
                       (template_app
                         (template_hole 12,
                          template_app
                           (template_hole 11,
                            template_app
                             (template_hole 10, template_hole 9))),
                        template_app
                         (template_app
                           (template_hole 8,
                            template_app (template_hole 7, template_var 1)),
                          template_hole 6)))),
                  template_app
                   (template_app
                     (template_hole 5,
                      template_app (template_hole 4, template_var 1)),
                    template_app (template_hole 4, template_var 0)))),
              template_app
               (template_app
                 (template_hole 14,
                  template_app
                   (template_app
                     (template_hole 5,
                      template_app (template_hole 4, template_var 1)),
                    template_app (template_hole 4, template_var 0))),
                template_app
                 (template_app
                   (template_hole 3,
                    template_app
                     (template_app
                       (template_hole 12,
                        template_app
                         (template_hole 11,
                          template_app
                           (template_hole 10, template_hole 9))),
                      template_app
                       (template_app
                         (template_hole 8,
                          template_app (template_hole 7, template_var 1)),
                        template_hole 6))),
                  template_hole 2)))
            )],
       template_equation
        (template_app
          (template_app
            (template_hole 5,
             template_app (template_hole 4, template_var 1)),
           template_app (template_hole 4, template_var 0)),
         template_app
          (template_hole 4,
           template_app
            (template_app (template_hole 0, template_var 1),
             template_var 0))))),
    ("Word_Lemmas.signed_arith_ineq_checks_to_eq",
     "(- (2 ^ (size ?a - 1)) <= sint ?a * sint ?b &
       sint ?a * sint ?b <= 2 ^ (size ?a - 1) - 1) =
      (sint ?a * sint ?b = sint (?a * ?b))",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_hole 15,
                template_app
                 (template_app
                   (template_hole 14,
                    template_app
                     (template_hole 13,
                      template_app
                       (template_app
                         (template_hole 12,
                          template_app
                           (template_hole 11,
                            template_app
                             (template_hole 10, template_hole 9))),
                        template_app
                         (template_app
                           (template_hole 8,
                            template_app (template_hole 7, template_var 1)),
                          template_hole 6)))),
                  template_app
                   (template_app
                     (template_hole 5,
                      template_app (template_hole 4, template_var 1)),
                    template_app (template_hole 4, template_var 0)))),
              template_app
               (template_app
                 (template_hole 14,
                  template_app
                   (template_app
                     (template_hole 5,
                      template_app (template_hole 4, template_var 1)),
                    template_app (template_hole 4, template_var 0))),
                template_app
                 (template_app
                   (template_hole 3,
                    template_app
                     (template_app
                       (template_hole 12,
                        template_app
                         (template_hole 11,
                          template_app
                           (template_hole 10, template_hole 9))),
                      template_app
                       (template_app
                         (template_hole 8,
                          template_app (template_hole 7, template_var 1)),
                        template_hole 6))),
                  template_hole 2)))
            )],
       template_equation
        (template_app
          (template_app
            (template_hole 5,
             template_app (template_hole 4, template_var 1)),
           template_app (template_hole 4, template_var 0)),
         template_app
          (template_hole 4,
           template_app
            (template_app (template_hole 0, template_var 1),
             template_var 0))))),
    ("Word_Lemmas.signed_arith_ineq_checks_to_eq",
     "(- (2 ^ (size ?a - 1)) <= sint ?a sdiv sint ?b &
       sint ?a sdiv sint ?b <= 2 ^ (size ?a - 1) - 1) =
      (sint ?a sdiv sint ?b = sint (?a sdiv ?b))",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_hole 15,
                template_app
                 (template_app
                   (template_hole 14,
                    template_app
                     (template_hole 13,
                      template_app
                       (template_app
                         (template_hole 12,
                          template_app
                           (template_hole 11,
                            template_app
                             (template_hole 10, template_hole 9))),
                        template_app
                         (template_app
                           (template_hole 8,
                            template_app (template_hole 7, template_var 1)),
                          template_hole 6)))),
                  template_app
                   (template_app
                     (template_hole 5,
                      template_app (template_hole 4, template_var 1)),
                    template_app (template_hole 4, template_var 0)))),
              template_app
               (template_app
                 (template_hole 14,
                  template_app
                   (template_app
                     (template_hole 5,
                      template_app (template_hole 4, template_var 1)),
                    template_app (template_hole 4, template_var 0))),
                template_app
                 (template_app
                   (template_hole 3,
                    template_app
                     (template_app
                       (template_hole 12,
                        template_app
                         (template_hole 11,
                          template_app
                           (template_hole 10, template_hole 9))),
                      template_app
                       (template_app
                         (template_hole 8,
                          template_app (template_hole 7, template_var 1)),
                        template_hole 6))),
                  template_hole 2)))
            )],
       template_equation
        (template_app
          (template_app
            (template_hole 5,
             template_app (template_hole 4, template_var 1)),
           template_app (template_hole 4, template_var 0)),
         template_app
          (template_hole 4,
           template_app
            (template_app (template_hole 0, template_var 1),
             template_var 0))))),
    ("Word_Lemmas.signed_arith_ineq_checks_to_eq",
     "(- (2 ^ (size ?a - 1)) <= sint ?a smod sint ?b &
       sint ?a smod sint ?b <= 2 ^ (size ?a - 1) - 1) =
      (sint ?a smod sint ?b = sint (?a smod ?b))",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_hole 15,
                template_app
                 (template_app
                   (template_hole 14,
                    template_app
                     (template_hole 13,
                      template_app
                       (template_app
                         (template_hole 12,
                          template_app
                           (template_hole 11,
                            template_app
                             (template_hole 10, template_hole 9))),
                        template_app
                         (template_app
                           (template_hole 8,
                            template_app (template_hole 7, template_var 1)),
                          template_hole 6)))),
                  template_app
                   (template_app
                     (template_hole 5,
                      template_app (template_hole 4, template_var 1)),
                    template_app (template_hole 4, template_var 0)))),
              template_app
               (template_app
                 (template_hole 14,
                  template_app
                   (template_app
                     (template_hole 5,
                      template_app (template_hole 4, template_var 1)),
                    template_app (template_hole 4, template_var 0))),
                template_app
                 (template_app
                   (template_hole 3,
                    template_app
                     (template_app
                       (template_hole 12,
                        template_app
                         (template_hole 11,
                          template_app
                           (template_hole 10, template_hole 9))),
                      template_app
                       (template_app
                         (template_hole 8,
                          template_app (template_hole 7, template_var 1)),
                        template_hole 6))),
                  template_hole 2)))
            )],
       template_equation
        (template_app
          (template_app
            (template_hole 5,
             template_app (template_hole 4, template_var 1)),
           template_app (template_hole 4, template_var 0)),
         template_app
          (template_hole 4,
           template_app
            (template_app (template_hole 0, template_var 1),
             template_var 0)))))]
