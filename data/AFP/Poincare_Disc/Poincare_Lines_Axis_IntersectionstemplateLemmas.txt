   [("Poincare_Lines_Axis_Intersections.intersects_x_axis_positive_intersects_x_axis",
     "intersects_x_axis_positive ?H ==> intersects_x_axis ?H",
     template_implication
      ([template_predicate
         (template_app (template_hole 1, template_var 0))],
       template_predicate
        (template_app (template_hole 0, template_var 0)))),
    ("Poincare_Lines_Axis_Intersections.intersects_x_axis_intersects_y_axis",
     "intersects_x_axis (moebius_circline (moebius_rotation (pi / 2)) ?H) =
      intersects_y_axis ?H",
     template_equation
      (template_app
        (template_hole 8,
         template_app
          (template_app
            (template_hole 7,
             template_app
              (template_hole 6,
               template_app
                (template_app (template_hole 5, template_hole 4),
                 template_app
                  (template_hole 3,
                   template_app (template_hole 2, template_hole 1))))),
           template_var 0)),
       template_app (template_hole 0, template_var 0))),
    ("Poincare_Lines_Axis_Intersections.calc_x_axis_intersection_in_unit_disc",
     "[| is_poincare_line ?H; intersects_x_axis ?H |]
      ==> calc_x_axis_intersection ?H : unit_disc",
     template_implication
      ([template_predicate (template_app (template_hole 4, template_var 0)),
        template_predicate
         (template_app (template_hole 3, template_var 0))],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 2,
               template_app (template_hole 1, template_var 0)),
             template_hole 0)
           ))),
    ("Poincare_Lines_Axis_Intersections.intersects_x_axis_positive_intersects_y_axis_positive",
     "intersects_x_axis_positive
       (moebius_circline (moebius_rotation (- pi / 2)) ?H) =
      intersects_y_axis_positive ?H",
     template_equation
      (template_app
        (template_hole 9,
         template_app
          (template_app
            (template_hole 8,
             template_app
              (template_hole 7,
               template_app
                (template_app
                  (template_hole 6,
                   template_app (template_hole 5, template_hole 4)),
                 template_app
                  (template_hole 3,
                   template_app (template_hole 2, template_hole 1))))),
           template_var 0)),
       template_app (template_hole 0, template_var 0))),
    ("Poincare_Lines_Axis_Intersections.add_less_abs_positive_iff",
     "\<bar>?b\<bar> < \<bar>?a\<bar> ==> (0 < ?a + ?b) = (0 < ?a)",
     template_implication
      ([template_inequation
         (less_than, template_app (template_hole 3, template_var 1),
          template_app (template_hole 3, template_var 0))],
       template_equation
        (template_app
          (template_app (template_hole 4, template_hole 1),
           template_app
            (template_app (template_hole 0, template_var 0),
             template_var 1)),
         template_app
          (template_app (template_hole 4, template_hole 1),
           template_var 0)))),
    ("Poincare_Lines_Axis_Intersections.calc_x_axis_intersection",
     "[| is_poincare_line ?H; intersects_x_axis ?H |]
      ==> calc_x_axis_intersection ?H
          : circline_set ?H Int circline_set x_axis",
     template_implication
      ([template_predicate (template_app (template_hole 6, template_var 0)),
        template_predicate
         (template_app (template_hole 5, template_var 0))],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 4,
               template_app (template_hole 3, template_var 0)),
             template_app
              (template_app
                (template_hole 2,
                 template_app (template_hole 1, template_var 0)),
               template_app (template_hole 1, template_hole 0)))
           ))),
    ("Poincare_Lines_Axis_Intersections.intersects_x_axis_iff",
     "is_poincare_line ?H ==>
      (EX x:unit_disc. x : circline_set ?H Int circline_set x_axis) =
      intersects_x_axis ?H",
     template_implication
      ([template_predicate
         (template_app (template_hole 8, template_var 0))],
       template_equation
        (template_app
          (template_app (template_hole 6, template_hole 5), t_empty),
         template_app (template_hole 0, template_var 0)))),
    ("Poincare_Lines_Axis_Intersections.intersects_y_axis_iff",
     "is_poincare_line ?H ==>
      (EX y:unit_disc. y : circline_set ?H Int circline_set y_axis) =
      intersects_y_axis ?H",
     template_implication
      ([template_predicate
         (template_app (template_hole 8, template_var 0))],
       template_equation
        (template_app
          (template_app (template_hole 6, template_hole 5), t_empty),
         template_app (template_hole 0, template_var 0)))),
    ("Poincare_Lines_Axis_Intersections.intersects_x_axis_positive_iff'",
     "is_poincare_line ?H ==>
      intersects_x_axis_positive ?H =
      (calc_x_axis_intersection ?H : unit_disc &
       calc_x_axis_intersection ?H : circline_set ?H Int positive_x_axis)",
     template_implication
      ([template_predicate
         (template_app (template_hole 9, template_var 0))],
       template_equation
        (template_app (template_hole 7, template_var 0),
         template_app
          (template_app
            (template_hole 6,
             template_app
              (template_app
                (template_hole 5,
                 template_app (template_hole 4, template_var 0)),
               template_hole 3)),
           template_app
            (template_app
              (template_hole 5,
               template_app (template_hole 4, template_var 0)),
             template_app
              (template_app
                (template_hole 2,
                 template_app (template_hole 1, template_var 0)),
               template_hole 0)))))),
    ("Poincare_Lines_Axis_Intersections.intersects_y_axis_positive_iff",
     "[| is_poincare_line ?H; ?H ~= y_axis |]
      ==> (EX y:unit_disc. y : circline_set ?H Int positive_y_axis) =
          intersects_y_axis_positive ?H",
     template_implication
      ([template_predicate
         (template_app (template_hole 11, template_var 0)),
        template_negation
         (template_equation (template_var 0, template_hole 8))],
       template_equation
        (template_app
          (template_app (template_hole 6, template_hole 5), t_empty),
         template_app (template_hole 0, template_var 0)))),
    ("Poincare_Lines_Axis_Intersections.intersects_x_axis_positive_iff",
     "[| is_poincare_line ?H; ?H ~= x_axis |]
      ==> intersects_x_axis_positive ?H =
          (EX x. x : unit_disc & x : circline_set ?H Int positive_x_axis)",
     template_implication
      ([template_predicate
         (template_app (template_hole 12, template_var 0)),
        template_negation
         (template_equation (template_var 0, template_hole 9))],
       template_equation
        (template_app (template_hole 7, template_var 0),
         template_app (template_hole 6, t_empty)))),
    ("Poincare_Lines_Axis_Intersections.unique_calc_x_axis_intersection",
     "[| is_poincare_line ?H; ?H ~= x_axis; ?x : unit_disc;
         ?x : circline_set ?H Int circline_set x_axis |]
      ==> ?x = calc_x_axis_intersection ?H",
     template_implication
      ([template_predicate (template_app (template_hole 9, template_var 1)),
        template_negation
         (template_equation (template_var 1, template_hole 6)),
        template_predicate
         (
            template_app
             (template_app (template_hole 5, template_var 0),
              template_hole 4)
            ),
        template_predicate
         (
            template_app
             (template_app (template_hole 5, template_var 0),
              template_app
               (template_app
                 (template_hole 3,
                  template_app (template_hole 2, template_var 1)),
                template_app (template_hole 2, template_hole 6)))
            )],
       template_equation
        (template_var 0, template_app (template_hole 0, template_var 1)))),
    ("Poincare_Lines_Axis_Intersections.outward",
     "[| is_poincare_line ?H1.0; is_poincare_line ?H2.0;
         intersects_x_axis_positive ?H1.0; intersects_x_axis_positive ?H2.0;
         outward ?H1.0 ?H2.0 |]
      ==> Re (to_complex (calc_x_axis_intersection ?H2.0))
          <= Re (to_complex (calc_x_axis_intersection ?H1.0))",
     template_implication
      ([template_predicate (template_app (template_hole 6, template_var 1)),
        template_predicate (template_app (template_hole 6, template_var 0)),
        template_predicate (template_app (template_hole 5, template_var 1)),
        template_predicate (template_app (template_hole 5, template_var 0)),
        template_predicate
         (
            template_app
             (template_app (template_hole 4, template_var 1),
              template_var 0)
            )],
       template_inequation
        (less_equals,
         template_app
          (template_hole 2,
           template_app
            (template_hole 1,
             template_app (template_hole 0, template_var 0))),
         template_app
          (template_hole 2,
           template_app
            (template_hole 1,
             template_app (template_hole 0, template_var 1)))))),
    ("Poincare_Lines_Axis_Intersections.calc_x_axis_intersection_fun_mono",
     "[| 1 < ?x1.0; ?x1.0 < ?x2.0 |]
      ==> ?x2.0 - sqrt (?x2.0\<^sup>2 - 1)
          < ?x1.0 - sqrt (?x1.0\<^sup>2 - 1)",
     template_implication
      ([template_inequation (less_than, template_hole 6, template_var 1),
        template_inequation (less_than, template_var 1, template_var 0)],
       template_inequation
        (less_than,
         template_app
          (template_app (template_hole 5, template_var 0),
           template_app
            (template_hole 4,
             template_app
              (template_app
                (template_hole 5,
                 template_app
                  (template_app (template_hole 3, template_var 0),
                   template_app
                    (template_hole 2,
                     template_app (template_hole 1, template_hole 0)))),
               template_hole 6))),
         template_app
          (template_app (template_hole 5, template_var 1),
           template_app
            (template_hole 4,
             template_app
              (template_app
                (template_hole 5,
                 template_app
                  (template_app (template_hole 3, template_var 1),
                   template_app
                    (template_hole 2,
                     template_app (template_hole 1, template_hole 0)))),
               template_hole 6)))))),
    ("Poincare_Lines_Axis_Intersections.ideal_points_intersects_x_axis",
     "[| is_poincare_line ?H; ideal_points ?H = {?i1.0, ?i2.0};
         ?H ~= x_axis |]
      ==> intersects_x_axis ?H =
          (Im (to_complex ?i1.0) * Im (to_complex ?i2.0) < 0)",
     template_implication
      ([template_predicate
         (template_app (template_hole 14, template_var 2)),
        template_equation
         (template_app (template_hole 12, template_var 2),
          template_app
           (template_app (template_hole 11, template_var 1),
            template_app
             (template_app (template_hole 11, template_var 0),
              template_hole 10))),
        template_negation
         (template_equation (template_var 2, template_hole 7))],
       template_equation
        (template_app (template_hole 5, template_var 2),
         template_app
          (template_app
            (template_hole 4,
             template_app
              (template_app
                (template_hole 3,
                 template_app
                  (template_hole 2,
                   template_app (template_hole 1, template_var 1))),
               template_app
                (template_hole 2,
                 template_app (template_hole 1, template_var 0)))),
           template_hole 0)))),
    ("Poincare_Lines_Axis_Intersections.intersects_x_axis_positive_mk_circline",
     "[| is_real ?A; ?A ~= 0 | ?B ~= 0 |]
      ==> intersects_x_axis_positive (mk_circline ?A ?B (cnj ?B) ?A) =
          (Re ?B / Re ?A < - 1)",
     template_implication
      ([template_equation
         (template_app (template_hole 14, template_var 1),
          template_hole 13),
        template_predicate
         (
            template_app
             (template_app
               (template_hole 12,
                template_app
                 (template_hole 11,
                  template_app
                   (template_app (template_hole 10, template_var 1),
                    template_hole 9))),
              template_app
               (template_hole 11,
                template_app
                 (template_app (template_hole 10, template_var 0),
                  template_hole 9)))
            )],
       template_equation
        (template_app
          (template_hole 7,
           template_app
            (template_app
              (template_app
                (template_app (template_hole 6, template_var 1),
                 template_var 0),
               template_app (template_hole 5, template_var 0)),
             template_var 1)),
         template_app
          (template_app
            (template_hole 4,
             template_app
              (template_app
                (template_hole 3,
                 template_app (template_hole 2, template_var 0)),
               template_app (template_hole 2, template_var 1))),
           template_app (template_hole 1, template_hole 0))))),
    ("Poincare_Lines_Axis_Intersections.intersects_x_axis_mk_circline",
     "[| is_real ?A; ?A ~= 0 | ?B ~= 0 |]
      ==> intersects_x_axis (mk_circline ?A ?B (cnj ?B) ?A) =
          (?A = 0 | (Re ?A)\<^sup>2 < (Re ?B)\<^sup>2)",
     template_implication
      ([template_equation
         (template_app (template_hole 15, template_var 1),
          template_hole 14),
        template_predicate
         (
            template_app
             (template_app
               (template_hole 13,
                template_app
                 (template_hole 12,
                  template_app
                   (template_app (template_hole 11, template_var 1),
                    template_hole 10))),
              template_app
               (template_hole 12,
                template_app
                 (template_app (template_hole 11, template_var 0),
                  template_hole 10)))
            )],
       template_implication
        ([template_predicate
           (
              template_app
               (template_hole 8,
                template_app
                 (template_app
                   (template_app
                     (template_app (template_hole 7, template_var 1),
                      template_var 0),
                    template_app (template_hole 6, template_var 0)),
                  template_var 1))
              )],
         template_predicate
          (
             template_app
              (template_app
                (template_hole 13,
                 template_app
                  (template_app (template_hole 11, template_var 1),
                   template_hole 10)),
               template_app
                (template_app
                  (template_hole 5,
                   template_app
                    (template_app
                      (template_hole 4,
                       template_app (template_hole 3, template_var 1)),
                     template_app
                      (template_hole 2,
                       template_app (template_hole 1, template_hole 0)))),
                 template_app
                  (template_app
                    (template_hole 4,
                     template_app (template_hole 3, template_var 0)),
                   template_app
                    (template_hole 2,
                     template_app (template_hole 1, template_hole 0)))))
             )))),
    ("Poincare_Lines_Axis_Intersections.calc_x_axis_intersection_positive_abs'",
     "[| ?A\<^sup>2 < ?B\<^sup>2; ?A ~= 0 |]
      ==> \<bar>sgn ?B * sqrt (?B\<^sup>2 - ?A\<^sup>2) / ?A\<bar>
          < \<bar>- ?B / ?A\<bar>",
     template_implication
      ([template_inequation
         (less_than,
          template_app
           (template_app (template_hole 13, template_var 1),
            template_app
             (template_hole 12,
              template_app (template_hole 11, template_hole 10))),
          template_app
           (template_app (template_hole 13, template_var 0),
            template_app
             (template_hole 12,
              template_app (template_hole 11, template_hole 10)))),
        template_negation
         (template_equation (template_var 1, template_hole 7))],
       template_inequation
        (less_than,
         template_app
          (template_hole 6,
           template_app
            (template_app
              (template_hole 5,
               template_app
                (template_app
                  (template_hole 4,
                   template_app (template_hole 3, template_var 0)),
                 template_app
                  (template_hole 2,
                   template_app
                    (template_app
                      (template_hole 1,
                       template_app
                        (template_app (template_hole 13, template_var 0),
                         template_app
                          (template_hole 12,
                           template_app
                            (template_hole 11, template_hole 10)))),
                     template_app
                      (template_app (template_hole 13, template_var 1),
                       template_app
                        (template_hole 12,
                         template_app
                          (template_hole 11, template_hole 10))))))),
             template_var 1)),
         template_app
          (template_hole 6,
           template_app
            (template_app
              (template_hole 5,
               template_app (template_hole 0, template_var 0)),
             template_var 1))))),
    ("Poincare_Lines_Axis_Intersections.calc_intersect_x_axis_positive_lemma",
     "[| ?A\<^sup>2 < ?B\<^sup>2; ?A ~= 0 |]
      ==> (0 < (- ?B + sgn ?B * sqrt (?B\<^sup>2 - ?A\<^sup>2)) / ?A) =
          (1 < - ?B / ?A)",
     template_implication
      ([template_inequation
         (less_than,
          template_app
           (template_app (template_hole 15, template_var 1),
            template_app
             (template_hole 14,
              template_app (template_hole 13, template_hole 12))),
          template_app
           (template_app (template_hole 15, template_var 0),
            template_app
             (template_hole 14,
              template_app (template_hole 13, template_hole 12)))),
        template_negation
         (template_equation (template_var 1, template_hole 9))],
       template_equation
        (template_app
          (template_app (template_hole 16, template_hole 9),
           template_app
            (template_app
              (template_hole 7,
               template_app
                (template_app
                  (template_hole 6,
                   template_app (template_hole 5, template_var 0)),
                 template_app
                  (template_app
                    (template_hole 4,
                     template_app (template_hole 3, template_var 0)),
                   template_app
                    (template_hole 2,
                     template_app
                      (template_app
                        (template_hole 1,
                         template_app
                          (template_app (template_hole 15, template_var 0),
                           template_app
                            (template_hole 14,
                             template_app
                              (template_hole 13, template_hole 12)))),
                       template_app
                        (template_app (template_hole 15, template_var 1),
                         template_app
                          (template_hole 14,
                           template_app
                            (template_hole 13, template_hole 12)))))))),
             template_var 1)),
         template_app
          (template_app (template_hole 16, template_hole 0),
           template_app
            (template_app
              (template_hole 7,
               template_app (template_hole 5, template_var 0)),
             template_var 1))))),
    ("Poincare_Lines_Axis_Intersections.poincare_between_x_axis_intersection",
     "[| ?u : unit_disc; ?v : unit_disc; ?z : unit_disc; ?u ~= ?v;
         ?u ~: circline_set x_axis; ?v ~: circline_set x_axis;
         ?z : circline_set (poincare_line ?u ?v) Int circline_set x_axis |]
      ==> poincare_between ?u ?z ?v =
          (Arg (to_complex ?u) * Arg (to_complex ?v) < 0)",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 14, template_var 2),
              template_hole 13)
            ),
        template_predicate
         (
            template_app
             (template_app (template_hole 14, template_var 1),
              template_hole 13)
            ),
        template_predicate
         (
            template_app
             (template_app (template_hole 14, template_var 0),
              template_hole 13)
            ),
        template_negation
         (template_equation (template_var 2, template_var 1)),
        template_negation
         (
            template_predicate
             (
                template_app
                 (template_app (template_hole 14, template_var 2),
                  template_app (template_hole 10, template_hole 9))
                )
            ),
        template_negation
         (
            template_predicate
             (
                template_app
                 (template_app (template_hole 14, template_var 1),
                  template_app (template_hole 10, template_hole 9))
                )
            ),
        template_predicate
         (
            template_app
             (template_app (template_hole 14, template_var 0),
              template_app
               (template_app
                 (template_hole 8,
                  template_app
                   (template_hole 10,
                    template_app
                     (template_app (template_hole 7, template_var 2),
                      template_var 1))),
                template_app (template_hole 10, template_hole 9)))
            )],
       template_equation
        (template_app
          (template_app
            (template_app (template_hole 5, template_var 2),
             template_var 0),
           template_var 1),
         template_app
          (template_app
            (template_hole 4,
             template_app
              (template_app
                (template_hole 3,
                 template_app
                  (template_hole 2,
                   template_app (template_hole 1, template_var 2))),
               template_app
                (template_hole 2,
                 template_app (template_hole 1, template_var 1)))),
           template_hole 0)))),
    ("Poincare_Lines_Axis_Intersections.outward_mk_circline",
     "[| is_real ?A1.0; is_real ?A2.0; ?A1.0 ~= 0 | ?B1.0 ~= 0;
         ?A2.0 ~= 0 | ?B2.0 ~= 0 |]
      ==> outward (mk_circline ?A1.0 ?B1.0 (cnj ?B1.0) ?A1.0)
           (mk_circline ?A2.0 ?B2.0 (cnj ?B2.0) ?A2.0) =
          (- Re ?B1.0 / Re ?A1.0 <= - Re ?B2.0 / Re ?A2.0)",
     template_implication
      ([template_equation
         (template_app (template_hole 13, template_var 3),
          template_hole 12),
        template_equation
         (template_app (template_hole 13, template_var 2),
          template_hole 12),
        template_predicate
         (
            template_app
             (template_app
               (template_hole 11,
                template_app
                 (template_hole 10,
                  template_app
                   (template_app (template_hole 9, template_var 3),
                    template_hole 8))),
              template_app
               (template_hole 10,
                template_app
                 (template_app (template_hole 9, template_var 1),
                  template_hole 8)))
            ),
        template_predicate
         (
            template_app
             (template_app
               (template_hole 11,
                template_app
                 (template_hole 10,
                  template_app
                   (template_app (template_hole 9, template_var 2),
                    template_hole 8))),
              template_app
               (template_hole 10,
                template_app
                 (template_app (template_hole 9, template_var 0),
                  template_hole 8)))
            )],
       template_equation
        (template_app
          (template_app
            (template_hole 6,
             template_app
              (template_app
                (template_app
                  (template_app (template_hole 5, template_var 3),
                   template_var 1),
                 template_app (template_hole 4, template_var 1)),
               template_var 3)),
           template_app
            (template_app
              (template_app
                (template_app (template_hole 5, template_var 2),
                 template_var 0),
               template_app (template_hole 4, template_var 0)),
             template_var 2)),
         template_app
          (template_app
            (template_hole 3,
             template_app
              (template_app
                (template_hole 2,
                 template_app
                  (template_hole 1,
                   template_app (template_hole 0, template_var 1))),
               template_app (template_hole 0, template_var 3))),
           template_app
            (template_app
              (template_hole 2,
               template_app
                (template_hole 1,
                 template_app (template_hole 0, template_var 0))),
             template_app (template_hole 0, template_var 2)))))),
    ("Poincare_Lines_Axis_Intersections.x_axis_intersection_equation",
     "[| ?H = mk_circline (cor ?A) ?B ?C (cor ?D);
         (cor ?A, ?B, ?C, cor ?D) : hermitean_nonzero |]
      ==> (of_complex (cor ?z) : circline_set x_axis Int circline_set ?H) =
          (?A * ?z\<^sup>2 + 2 * Re ?B * ?z + ?D = 0 & is_real (cor ?z))",
     template_implication
      ([template_equation
         (template_var 5,
          template_app
           (template_app
             (template_app
               (template_app
                 (template_hole 28,
                  template_app (template_hole 27, template_var 4)),
                template_var 3),
              template_var 2),
            template_app (template_hole 27, template_var 1))),
        template_predicate
         (
            template_app
             (template_app
               (template_hole 26,
                template_app
                 (template_app
                   (template_hole 25,
                    template_app (template_hole 27, template_var 4)),
                  template_app
                   (template_app (template_hole 24, template_var 3),
                    template_app
                     (template_app (template_hole 23, template_var 2),
                      template_app (template_hole 27, template_var 1))))),
              template_app (template_hole 22, t_empty))
            )],
       template_implication
        ([template_predicate
           (
              template_app
               (template_app
                 (template_hole 15,
                  template_app
                   (template_hole 14,
                    template_app (template_hole 27, template_var 0))),
                template_app
                 (template_app
                   (template_hole 13,
                    template_app (template_hole 12, template_hole 11)),
                  template_app (template_hole 12, template_var 5)))
              )],
         template_predicate
          (
             template_app
              (template_app
                (template_hole 21,
                 template_app
                  (template_app
                    (template_hole 10,
                     template_app
                      (template_app
                        (template_hole 9,
                         template_app
                          (template_app
                            (template_hole 9,
                             template_app
                              (template_app
                                (template_hole 8, template_var 4),
                               template_app
                                (template_app
                                  (template_hole 7, template_var 0),
                                 template_app
                                  (template_hole 6,
                                   template_app
                                    (template_hole 5, template_hole 4))))),
                           template_app
                            (template_app
                              (template_hole 8,
                               template_app
                                (template_app
                                  (template_hole 8,
                                   template_app
                                    (template_hole 3,
                                     template_app
(template_hole 5, template_hole 4))),
                                 template_app
                                  (template_hole 2, template_var 3))),
                             template_var 0))),
                       template_var 1)),
                   template_hole 1)),
               template_app
                (template_app
                  (template_hole 10,
                   template_app
                    (template_hole 0,
                     template_app (template_hole 27, template_var 0))),
                 template_hole 1))
             )))),
    ("Poincare_Lines_Axis_Intersections.calc_x_axis_intersection_mono",
     "[| 1 < - ?b1.0 / ?a1.0; ?a1.0 ~= 0;
         - ?b1.0 / ?a1.0 <= - ?b2.0 / ?a2.0; ?a2.0 ~= 0 |]
      ==> (- ?b2.0 + sgn ?b2.0 * sqrt (?b2.0\<^sup>2 - ?a2.0\<^sup>2)) /
          ?a2.0
          <= (- ?b1.0 + sgn ?b1.0 * sqrt (?b1.0\<^sup>2 - ?a1.0\<^sup>2)) /
             ?a1.0",
     template_implication
      ([template_inequation
         (less_than, template_hole 15,
          template_app
           (template_app
             (template_hole 14,
              template_app (template_hole 13, template_var 3)),
            template_var 2)),
        template_negation
         (template_equation (template_var 2, template_hole 10)),
        template_inequation
         (less_equals,
          template_app
           (template_app
             (template_hole 14,
              template_app (template_hole 13, template_var 3)),
            template_var 2),
          template_app
           (template_app
             (template_hole 14,
              template_app (template_hole 13, template_var 1)),
            template_var 0)),
        template_negation
         (template_equation (template_var 0, template_hole 10))],
       template_inequation
        (less_equals,
         template_app
          (template_app
            (template_hole 14,
             template_app
              (template_app
                (template_hole 8,
                 template_app (template_hole 13, template_var 1)),
               template_app
                (template_app
                  (template_hole 7,
                   template_app (template_hole 6, template_var 1)),
                 template_app
                  (template_hole 5,
                   template_app
                    (template_app
                      (template_hole 4,
                       template_app
                        (template_app (template_hole 3, template_var 1),
                         template_app
                          (template_hole 2,
                           template_app
                            (template_hole 1, template_hole 0)))),
                     template_app
                      (template_app (template_hole 3, template_var 0),
                       template_app
                        (template_hole 2,
                         template_app
                          (template_hole 1, template_hole 0)))))))),
           template_var 0),
         template_app
          (template_app
            (template_hole 14,
             template_app
              (template_app
                (template_hole 8,
                 template_app (template_hole 13, template_var 3)),
               template_app
                (template_app
                  (template_hole 7,
                   template_app (template_hole 6, template_var 3)),
                 template_app
                  (template_hole 5,
                   template_app
                    (template_app
                      (template_hole 4,
                       template_app
                        (template_app (template_hole 3, template_var 3),
                         template_app
                          (template_hole 2,
                           template_app
                            (template_hole 1, template_hole 0)))),
                     template_app
                      (template_app (template_hole 3, template_var 2),
                       template_app
                        (template_hole 2,
                         template_app
                          (template_hole 1, template_hole 0)))))))),
           template_var 2))))]
