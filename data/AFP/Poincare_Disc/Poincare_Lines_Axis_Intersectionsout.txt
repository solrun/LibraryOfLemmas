Loading theory "Complex_Geometry.Linear_Systems" (required by "Draft.Poincare_Lines_Axis_IntersectionsMoreTemplates" via "Draft.Poincare_Lines_Axis_Intersections" via "Draft.Poincare_Between" via "Draft.Poincare_Distance" via "Draft.Poincare_Lines_Ideal_Points" via "Draft.Poincare_Lines" via "Complex_Geometry.Unit_Circle_Preserving_Moebius" via "Complex_Geometry.Unitary11_Matrices" via "Complex_Geometry.Matrices")
Loading theory "Complex_Geometry.More_Set" (required by "Draft.Poincare_Lines_Axis_IntersectionsMoreTemplates" via "Draft.Poincare_Lines_Axis_Intersections" via "Draft.Poincare_Between" via "Draft.Poincare_Distance" via "Draft.Poincare_Lines_Ideal_Points" via "Draft.Poincare_Lines" via "Complex_Geometry.Unit_Circle_Preserving_Moebius" via "Complex_Geometry.Oriented_Circlines" via "Complex_Geometry.Circlines")
Loading theory "HOL-Library.Function_Algebras" (required by "Draft.Poincare_Lines_Axis_IntersectionsMoreTemplates" via "Draft.ExtrEqs" via "HOL-Library.BigO")
Loading theory "HOL-Library.Nat_Bijection" (required by "Draft.Poincare_Lines_Axis_IntersectionsMoreTemplates" via "Draft.ExtrEqs" via "HOL-Library.Stream")
instantiation
  fun :: (type, plus) plus
  plus_fun == plus :: ('a => 'b) => ('a => 'b) => 'a => 'b
instantiation
  fun :: (type, zero) zero
  zero_fun == zero_class.zero :: 'a => 'b
instantiation
  fun :: (type, times) times
  times_fun == times :: ('a => 'b) => ('a => 'b) => 'a => 'b
### theory "Complex_Geometry.More_Set"
### 0.059s elapsed time, 0.270s cpu time, 0.000s GC time
Loading theory "HOL-Library.Set_Algebras" (required by "Draft.Poincare_Lines_Axis_IntersectionsMoreTemplates" via "Draft.ExtrEqs" via "HOL-Library.BigO")
instantiation
  fun :: (type, one) one
  one_fun == one_class.one :: 'a => 'b
### theory "Complex_Geometry.Linear_Systems"
### 0.070s elapsed time, 0.315s cpu time, 0.000s GC time
Loading theory "HOL-Library.Tree" (required by "Draft.Poincare_Lines_Axis_IntersectionsMoreTemplates" via "Draft.ExtrEqs" via "Draft.Templates")
Found termination order: "(%p. size (snd p)) <*mlex*> {}"
instantiation
  set :: (plus) plus
  plus_set == plus :: 'a set => 'a set => 'a set
instantiation
  set :: (times) times
  times_set == times :: 'a set => 'a set => 'a set
instantiation
  set :: (zero) zero
  zero_set == zero_class.zero :: 'a set
instantiation
  set :: (one) one
  one_set == one_class.one :: 'a set
### theory "HOL-Library.Function_Algebras"
### 0.150s elapsed time, 0.618s cpu time, 0.042s GC time
Loading theory "HOL-Library.Periodic_Fun" (required by "Draft.Poincare_Lines_Axis_IntersectionsMoreTemplates" via "Draft.Poincare_Lines_Axis_Intersections" via "Draft.Poincare_Between" via "Draft.Poincare_Distance" via "Draft.Poincare_Lines_Ideal_Points" via "Draft.Poincare_Lines" via "Complex_Geometry.Unit_Circle_Preserving_Moebius" via "Complex_Geometry.Unitary11_Matrices" via "Complex_Geometry.Matrices" via "Complex_Geometry.More_Complex" via "Complex_Geometry.More_Transcendental")
Found termination order: "size_list size <*mlex*> {}"
locale periodic_fun
  fixes f :: "'a => 'b"
    and g :: "'a => 'a => 'a"
    and gm :: "'a => 'a => 'a"
    and g1 :: "'a => 'a"
    and gn1 :: "'a => 'a"
  assumes "periodic_fun f g gm g1 gn1"
locale periodic_fun_simple
  fixes f :: "'a => 'b"
    and period :: "'a"
  assumes "periodic_fun_simple f period"
locale periodic_fun_simple'
  fixes f :: "'a => 'b"
  assumes "periodic_fun_simple' f"
### theory "HOL-Library.Set_Algebras"
### 0.262s elapsed time, 1.021s cpu time, 0.134s GC time
Loading theory "HOL-Library.BigO" (required by "Draft.Poincare_Lines_Axis_IntersectionsMoreTemplates" via "Draft.ExtrEqs")
### theory "HOL-Library.Nat_Bijection"
### 0.327s elapsed time, 1.315s cpu time, 0.134s GC time
Loading theory "HOL-Library.Stream" (required by "Draft.Poincare_Lines_Axis_IntersectionsMoreTemplates" via "Draft.ExtrEqs")
### theory "HOL-Library.Periodic_Fun"
### 0.187s elapsed time, 0.737s cpu time, 0.092s GC time
Loading theory "Complex_Geometry.More_Transcendental" (required by "Draft.Poincare_Lines_Axis_IntersectionsMoreTemplates" via "Draft.Poincare_Lines_Axis_Intersections" via "Draft.Poincare_Between" via "Draft.Poincare_Distance" via "Draft.Poincare_Lines_Ideal_Points" via "Draft.Poincare_Lines" via "Complex_Geometry.Unit_Circle_Preserving_Moebius" via "Complex_Geometry.Unitary11_Matrices" via "Complex_Geometry.Matrices" via "Complex_Geometry.More_Complex")
### theory "Complex_Geometry.More_Transcendental"
### 0.089s elapsed time, 0.352s cpu time, 0.000s GC time
Loading theory "Complex_Geometry.Canonical_Angle" (required by "Draft.Poincare_Lines_Axis_IntersectionsMoreTemplates" via "Draft.Poincare_Lines_Axis_Intersections" via "Draft.Poincare_Between" via "Draft.Poincare_Distance" via "Draft.Poincare_Lines_Ideal_Points" via "Draft.Poincare_Lines" via "Complex_Geometry.Unit_Circle_Preserving_Moebius" via "Complex_Geometry.Unitary11_Matrices" via "Complex_Geometry.Matrices" via "Complex_Geometry.More_Complex")
### theory "Complex_Geometry.Canonical_Angle"
### 0.119s elapsed time, 0.469s cpu time, 0.100s GC time
Loading theory "Complex_Geometry.More_Complex" (required by "Draft.Poincare_Lines_Axis_IntersectionsMoreTemplates" via "Draft.Poincare_Lines_Axis_Intersections" via "Draft.Poincare_Between" via "Draft.Poincare_Distance" via "Draft.Poincare_Lines_Ideal_Points" via "Draft.Poincare_Lines" via "Complex_Geometry.Unit_Circle_Preserving_Moebius" via "Complex_Geometry.Unitary11_Matrices" via "Complex_Geometry.Matrices")
consts
  left :: "'a tree => 'a tree"
consts
  right :: "'a tree => 'a tree"
Found termination order: "size <*mlex*> {}"
Found termination order: "size <*mlex*> {}"
consts
  shift :: "'a list => 'a stream => 'a stream"
Proofs for coinductive predicate(s) "streamsp"
  Proving monotonicity ...
Found termination order: "size <*mlex*> {}"
consts
  snth :: "'a stream => nat => 'a"
class height = type +
  fixes height :: "'a => nat"
instantiation
  tree :: (type) height
  height_tree == height :: 'a tree => nat
consts
  stake :: "nat => 'a stream => 'a list"
### theory "Complex_Geometry.More_Complex"
### 0.342s elapsed time, 1.355s cpu time, 0.158s GC time
Loading theory "Complex_Geometry.Angles" (required by "Draft.Poincare_Lines_Axis_IntersectionsMoreTemplates" via "Draft.Poincare_Lines_Axis_Intersections" via "Draft.Poincare_Between" via "Draft.Poincare_Distance" via "Draft.Poincare_Lines_Ideal_Points" via "Draft.Poincare_Lines" via "Complex_Geometry.Unit_Circle_Preserving_Moebius" via "Complex_Geometry.Oriented_Circlines" via "Complex_Geometry.Circlines" via "Complex_Geometry.Elementary_Complex_Geometry")
consts
  sdrop :: "nat => 'a stream => 'a stream"
Found termination order: "size <*mlex*> {}"
consts
  sfilter :: "('a => bool) => 'a stream => 'a stream"
Found termination order: "size <*mlex*> {}"
consts
  cycle :: "'a list => 'a stream"
### theory "Complex_Geometry.Angles"
### 0.348s elapsed time, 1.226s cpu time, 0.632s GC time
Loading theory "Complex_Geometry.Elementary_Complex_Geometry" (required by "Draft.Poincare_Lines_Axis_IntersectionsMoreTemplates" via "Draft.Poincare_Lines_Axis_Intersections" via "Draft.Poincare_Between" via "Draft.Poincare_Distance" via "Draft.Poincare_Lines_Ideal_Points" via "Draft.Poincare_Lines" via "Complex_Geometry.Unit_Circle_Preserving_Moebius" via "Complex_Geometry.Oriented_Circlines" via "Complex_Geometry.Circlines")
consts
  siterate :: "('a => 'a) => 'a => 'a stream"
Found termination order: "size <*mlex*> {}"
consts
  flat :: "'a list stream => 'a stream"
Found termination order: "size <*mlex*> {}"
### theory "HOL-Library.BigO"
### 1.039s elapsed time, 3.958s cpu time, 0.891s GC time
Loading theory "Draft.Hyperbolic_Functions" (required by "Draft.Poincare_Lines_Axis_IntersectionsMoreTemplates" via "Draft.Poincare_Lines_Axis_Intersections" via "Draft.Poincare_Between" via "Draft.Poincare_Distance")
consts
  sinterleave :: "'a stream => 'a stream => 'a stream"
consts
  szip :: "'a stream => 'b stream => ('a * 'b) stream"
Found termination order: "size <*mlex*> {}"
### theory "Draft.Hyperbolic_Functions"
### 0.093s elapsed time, 0.366s cpu time, 0.104s GC time
Loading theory "HOL-Library.Quadratic_Discriminant" (required by "Draft.Poincare_Lines_Axis_IntersectionsMoreTemplates" via "Draft.Poincare_Lines_Axis_Intersections" via "Draft.Poincare_Between" via "Draft.Poincare_Distance" via "Draft.Poincare_Lines_Ideal_Points" via "Draft.Poincare_Lines" via "Complex_Geometry.Unit_Circle_Preserving_Moebius" via "Complex_Geometry.Unitary11_Matrices" via "Complex_Geometry.Matrices" via "Complex_Geometry.Quadratic")
consts
  smap2 :: "('a => 'b => 'c) => 'a stream => 'b stream => 'c stream"
### theory "HOL-Library.Stream"
### 1.171s elapsed time, 4.472s cpu time, 0.994s GC time
Found termination order: "size <*mlex*> {}"
### theory "HOL-Library.Quadratic_Discriminant"
### 0.093s elapsed time, 0.324s cpu time, 0.000s GC time
Loading theory "Complex_Geometry.Quadratic" (required by "Draft.Poincare_Lines_Axis_IntersectionsMoreTemplates" via "Draft.Poincare_Lines_Axis_Intersections" via "Draft.Poincare_Between" via "Draft.Poincare_Distance" via "Draft.Poincare_Lines_Ideal_Points" via "Draft.Poincare_Lines" via "Complex_Geometry.Unit_Circle_Preserving_Moebius" via "Complex_Geometry.Unitary11_Matrices" via "Complex_Geometry.Matrices")
Found termination order: "size <*mlex*> {}"
Found termination order: "(%p. size (fst p)) <*mlex*> {}"
Found termination order: "size <*mlex*> {}"
Found termination order: "(%p. size (snd p)) <*mlex*> {}"
### theory "Complex_Geometry.Elementary_Complex_Geometry"
### 0.550s elapsed time, 1.913s cpu time, 0.198s GC time
### theory "Complex_Geometry.Quadratic"
### 0.319s elapsed time, 0.946s cpu time, 0.183s GC time
Loading theory "Complex_Geometry.Matrices" (required by "Draft.Poincare_Lines_Axis_IntersectionsMoreTemplates" via "Draft.Poincare_Lines_Axis_Intersections" via "Draft.Poincare_Between" via "Draft.Poincare_Distance" via "Draft.Poincare_Lines_Ideal_Points" via "Draft.Poincare_Lines" via "Complex_Geometry.Unit_Circle_Preserving_Moebius" via "Complex_Geometry.Unitary11_Matrices")
Found termination order: "size <*mlex*> {}"
### theory "HOL-Library.Tree"
### 2.118s elapsed time, 7.262s cpu time, 1.363s GC time
Loading theory "Draft.Templates" (required by "Draft.Poincare_Lines_Axis_IntersectionsMoreTemplates" via "Draft.ExtrEqs")
Found termination order: "{}"
datatype template_term
=
     t_empty
   | template_app of template_term * template_term
   | template_hole of int
   | template_var of int
datatype sign
= equals | greater_equals | greater_than | less_equals | less_than
datatype template
=
     template_bimplication of template * template
   | template_dunno
   | template_equation of template_term * template_term
   | template_implication of template list * template
   | template_inequation of sign * template_term * template_term
   | template_negation of template
   | template_predicate of template_term
constructor t_empty: template_term
constructor template_app: template_term * template_term -> template_term
constructor template_hole: int -> template_term
constructor template_var: int -> template_term
constructor equals: sign
constructor greater_equals: sign
constructor greater_than: sign
constructor less_equals: sign
constructor less_than: sign
constructor template_bimplication: template * template -> template
constructor template_dunno: template
constructor template_equation: template_term * template_term -> template
constructor template_implication: template list * template -> template
constructor template_inequation:
   sign * template_term * template_term -> template
constructor template_negation: template -> template
constructor template_predicate: template_term -> template
val vfs = fn: term -> (indexname * typ) list * (string * typ) list
val indexOf = fn: ''a list -> ''a -> int -> int
val has_eq = fn: term -> bool
val term2template = fn:
   (indexname * typ) list -> (string * typ) list -> term -> template_term
val lemma2predicate = fn: term -> term -> template
val makeTemplatewithContext = fn: term -> term -> template
val lemma2template = fn: term -> template
val thm2template = fn: thm -> template
val tterm2string = fn: template_term -> string
val template2string = fn: template -> string
val t = "height ?t <= size ?t": thm
val th =
   Const ("HOL.Trueprop", "bool => prop") $
     (Const ("Orderings.ord_class.less_eq", "nat => nat => bool") $
       (Const ("Tree.height_class.height", "?'a tree => nat") $
         Var (("t", 0), "?'a tree")) $
       (Const ("Nat.size_class.size", "?'a tree => nat") $
         Var (("t", 0), "?'a tree"))):
   term
### theory "Draft.Templates"
### 0.054s elapsed time, 0.125s cpu time, 0.000s GC time
Loading theory "Draft.ExtrEqs" (required by "Draft.Poincare_Lines_Axis_IntersectionsMoreTemplates")
Found termination order: "{}"
Found termination order: "{}"
Found termination order: "{}"
Found termination order: "{}"
Found termination order: "{}"
Found termination order: "{}"
Found termination order: "{}"
Found termination order: "{}"
Found termination order: "{}"
Found termination order: "{}"
val eqpattern =
   Pattern
    (
       Const ("HOL.Trueprop", "bool => prop") $
         (Const ("HOL.eq", "?'a => ?'a => bool") $
           Var (("_dummy_", 1), "?'a") $ Var (("_dummy_", 2), "?'a"))
       ):
   term Find_Theorems.criterion
val badeqpattern = Pattern (Const ("Pure.eq", "?'a => ?'a => prop")):
   term Find_Theorems.criterion
val undefpattern =
   Pattern
    (
       Const ("HOL.Trueprop", "bool => prop") $
         (Const ("HOL.eq", "?'a => ?'a => bool") $
           Var (("_dummy_", 1), "?'a") $ Const ("HOL.undefined", "?'a"))
       ):
   term Find_Theorems.criterion
val thmpattern =
   Pattern
    (Const ("HOL.Trueprop", "bool => prop") $ Var (("_dummy_", 1), "bool")):
   term Find_Theorems.criterion
val badnames =
   ["*nitpick*", "*Nitpick*", "*full_exhaustive*", "*_def*", "Enum.finite*",
    "*Quickcheck*", "ATP*", "*Nunchaku*", "*Code*", "*BNF*", "*SMT*",
    "*.*.*"]:
   string list
val unwanted_names =
   [(false, Name "*nitpick*"), (false, Name "*Nitpick*"),
    (false, Name "*full_exhaustive*"), (false, Name "*_def*"),
    (false, Name "Enum.finite*"), (false, Name "*Quickcheck*"),
    (false, Name "ATP*"), (false, Name "*Nunchaku*"),
    (false, Name "*Code*"), (false, Name "*BNF*"), (false, Name "*SMT*"),
    (false, Name "*.*.*")]:
   (bool * term Find_Theorems.criterion) list
val has_vars = fn: term -> bool
val get_all_eqs = fn: string -> Proof.context -> (string * thm) list
val get_all_thms = fn: string -> Proof.context -> (string * thm) list
val get_noneq_thms = fn: string -> Proof.context -> (string * thm) list
val template_eqs = fn:
   string -> Proof.context -> (string * thm * template) list
val template_thms = fn:
   string -> Proof.context -> (string * thm * template) list
### theory "Draft.ExtrEqs"
### 0.563s elapsed time, 1.196s cpu time, 0.148s GC time
Found termination order: "{}"
Found termination order: "{}"
Found termination order: "{}"
Found termination order: "{}"
Found termination order: "{}"
### theory "Complex_Geometry.Matrices"
### 1.286s elapsed time, 2.367s cpu time, 0.259s GC time
Loading theory "Complex_Geometry.Homogeneous_Coordinates" (required by "Draft.Poincare_Lines_Axis_IntersectionsMoreTemplates" via "Draft.Poincare_Lines_Axis_Intersections" via "Draft.Poincare_Between" via "Draft.Poincare_Distance" via "Draft.Poincare_Lines_Ideal_Points" via "Draft.Poincare_Lines" via "Complex_Geometry.Unit_Circle_Preserving_Moebius" via "Complex_Geometry.Moebius")
Loading theory "Complex_Geometry.Unitary11_Matrices" (required by "Draft.Poincare_Lines_Axis_IntersectionsMoreTemplates" via "Draft.Poincare_Lines_Axis_Intersections" via "Draft.Poincare_Between" via "Draft.Poincare_Distance" via "Draft.Poincare_Lines_Ideal_Points" via "Draft.Poincare_Lines" via "Complex_Geometry.Unit_Circle_Preserving_Moebius")
Loading theory "Complex_Geometry.Unitary_Matrices" (required by "Draft.Poincare_Lines_Axis_IntersectionsMoreTemplates" via "Draft.Poincare_Lines_Axis_Intersections" via "Draft.Poincare_Between" via "Draft.Poincare_Distance" via "Draft.Poincare_Lines_Ideal_Points" via "Draft.Poincare_Lines" via "Complex_Geometry.Unit_Circle_Preserving_Moebius" via "Complex_Geometry.Oriented_Circlines" via "Complex_Geometry.Circlines" via "Complex_Geometry.Hermitean_Matrices")
### theory "Complex_Geometry.Unitary_Matrices"
### 0.104s elapsed time, 0.324s cpu time, 0.076s GC time
Loading theory "Complex_Geometry.Hermitean_Matrices" (required by "Draft.Poincare_Lines_Axis_IntersectionsMoreTemplates" via "Draft.Poincare_Lines_Axis_Intersections" via "Draft.Poincare_Between" via "Draft.Poincare_Distance" via "Draft.Poincare_Lines_Ideal_Points" via "Draft.Poincare_Lines" via "Complex_Geometry.Unit_Circle_Preserving_Moebius" via "Complex_Geometry.Oriented_Circlines" via "Complex_Geometry.Circlines")
### theory "Complex_Geometry.Unitary11_Matrices"
### 0.180s elapsed time, 0.554s cpu time, 0.076s GC time
### theory "Complex_Geometry.Hermitean_Matrices"
### 0.080s elapsed time, 0.237s cpu time, 0.000s GC time
### theory "Complex_Geometry.Homogeneous_Coordinates"
### 0.891s elapsed time, 1.947s cpu time, 1.036s GC time
Loading theory "Complex_Geometry.Moebius" (required by "Draft.Poincare_Lines_Axis_IntersectionsMoreTemplates" via "Draft.Poincare_Lines_Axis_Intersections" via "Draft.Poincare_Between" via "Draft.Poincare_Distance" via "Draft.Poincare_Lines_Ideal_Points" via "Draft.Poincare_Lines" via "Complex_Geometry.Unit_Circle_Preserving_Moebius")
instantiation
  moebius :: group_add
  minus_moebius == minus :: moebius => moebius => moebius
  uminus_moebius == uminus_class.uminus :: moebius => moebius
  zero_moebius == zero_class.zero :: moebius
  plus_moebius == plus :: moebius => moebius => moebius
### theory "Complex_Geometry.Moebius"
### 0.604s elapsed time, 0.726s cpu time, 0.165s GC time
Loading theory "Complex_Geometry.Circlines" (required by "Draft.Poincare_Lines_Axis_IntersectionsMoreTemplates" via "Draft.Poincare_Lines_Axis_Intersections" via "Draft.Poincare_Between" via "Draft.Poincare_Distance" via "Draft.Poincare_Lines_Ideal_Points" via "Draft.Poincare_Lines" via "Complex_Geometry.Unit_Circle_Preserving_Moebius" via "Complex_Geometry.Oriented_Circlines")
### theory "Complex_Geometry.Circlines"
### 1.358s elapsed time, 1.541s cpu time, 0.250s GC time
Loading theory "Complex_Geometry.Oriented_Circlines" (required by "Draft.Poincare_Lines_Axis_IntersectionsMoreTemplates" via "Draft.Poincare_Lines_Axis_Intersections" via "Draft.Poincare_Between" via "Draft.Poincare_Distance" via "Draft.Poincare_Lines_Ideal_Points" via "Draft.Poincare_Lines" via "Complex_Geometry.Unit_Circle_Preserving_Moebius")
### theory "Complex_Geometry.Oriented_Circlines"
### 0.712s elapsed time, 1.521s cpu time, 1.126s GC time
Loading theory "Complex_Geometry.Circlines_Angle" (required by "Draft.Poincare_Lines_Axis_IntersectionsMoreTemplates" via "Draft.Poincare_Lines_Axis_Intersections" via "Draft.Poincare_Between" via "Draft.Poincare_Distance" via "Draft.Poincare_Lines_Ideal_Points" via "Draft.Poincare_Lines")
Loading theory "Complex_Geometry.Unit_Circle_Preserving_Moebius" (required by "Draft.Poincare_Lines_Axis_IntersectionsMoreTemplates" via "Draft.Poincare_Lines_Axis_Intersections" via "Draft.Poincare_Between" via "Draft.Poincare_Distance" via "Draft.Poincare_Lines_Ideal_Points" via "Draft.Poincare_Lines")
Found termination order: "{}"
### theory "Complex_Geometry.Circlines_Angle"
### 0.167s elapsed time, 0.337s cpu time, 0.000s GC time
### theory "Complex_Geometry.Unit_Circle_Preserving_Moebius"
### 0.490s elapsed time, 0.737s cpu time, 0.111s GC time
Loading theory "Draft.Poincare_Lines" (required by "Draft.Poincare_Lines_Axis_IntersectionsMoreTemplates" via "Draft.Poincare_Lines_Axis_Intersections" via "Draft.Poincare_Between" via "Draft.Poincare_Distance" via "Draft.Poincare_Lines_Ideal_Points")
### theory "Draft.Poincare_Lines"
### 0.434s elapsed time, 0.520s cpu time, 0.115s GC time
Loading theory "Draft.Poincare_Lines_Ideal_Points" (required by "Draft.Poincare_Lines_Axis_IntersectionsMoreTemplates" via "Draft.Poincare_Lines_Axis_Intersections" via "Draft.Poincare_Between" via "Draft.Poincare_Distance")
### theory "Draft.Poincare_Lines_Ideal_Points"
### 0.171s elapsed time, 0.247s cpu time, 0.103s GC time
Loading theory "Draft.Poincare_Distance" (required by "Draft.Poincare_Lines_Axis_IntersectionsMoreTemplates" via "Draft.Poincare_Lines_Axis_Intersections" via "Draft.Poincare_Between")
[| 1 <= ?x; 1 <= ?y |]
==> arcosh ?x + arcosh ?y =
    arcosh (?x * ?y + sqrt ((?x\<^sup>2 - 1) * (?y\<^sup>2 - 1)))
### theory "Draft.Poincare_Distance"
### 0.368s elapsed time, 0.451s cpu time, 0.111s GC time
Loading theory "Draft.Poincare_Between" (required by "Draft.Poincare_Lines_Axis_IntersectionsMoreTemplates" via "Draft.Poincare_Lines_Axis_Intersections")
### theory "Draft.Poincare_Between"
### 0.143s elapsed time, 0.143s cpu time, 0.000s GC time
Loading theory "Draft.Poincare_Lines_Axis_Intersections" (required by "Draft.Poincare_Lines_Axis_IntersectionsMoreTemplates")
### theory "Draft.Poincare_Lines_Axis_Intersections"
### 0.274s elapsed time, 0.360s cpu time, 0.117s GC time
Loading theory "Draft.Poincare_Lines_Axis_IntersectionsMoreTemplates"
val templateLemmas =
   [("Poincare_Lines_Axis_Intersections.intersects_x_axis_positive_intersects_x_axis",
     "intersects_x_axis_positive ?H ==> intersects_x_axis ?H",
     template_implication
      ([template_predicate
         (template_app (template_hole 1, template_var 0))],
       template_predicate
        (template_app (template_hole 0, template_var 0)))),
    ("Poincare_Lines_Axis_Intersections.intersects_x_axis_intersects_y_axis",
     "intersects_x_axis (moebius_circline (moebius_rotation (pi / 2)) ?H) =
      intersects_y_axis ?H",
     template_equation
      (template_app
        (template_hole 8,
         template_app
          (template_app
            (template_hole 7,
             template_app
              (template_hole 6,
               template_app
                (template_app (template_hole 5, template_hole 4),
                 template_app
                  (template_hole 3,
                   template_app (template_hole 2, template_hole 1))))),
           template_var 0)),
       template_app (template_hole 0, template_var 0))),
    ("Poincare_Lines_Axis_Intersections.calc_x_axis_intersection_in_unit_disc",
     "[| is_poincare_line ?H; intersects_x_axis ?H |]
      ==> calc_x_axis_intersection ?H : unit_disc",
     template_implication
      ([template_predicate (template_app (template_hole 4, template_var 0)),
        template_predicate
         (template_app (template_hole 3, template_var 0))],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 2,
               template_app (template_hole 1, template_var 0)),
             template_hole 0)
           ))),
    ("Poincare_Lines_Axis_Intersections.intersects_x_axis_positive_intersects_y_axis_positive",
     "intersects_x_axis_positive
       (moebius_circline (moebius_rotation (- pi / 2)) ?H) =
      intersects_y_axis_positive ?H",
     template_equation
      (template_app
        (template_hole 9,
         template_app
          (template_app
            (template_hole 8,
             template_app
              (template_hole 7,
               template_app
                (template_app
                  (template_hole 6,
                   template_app (template_hole 5, template_hole 4)),
                 template_app
                  (template_hole 3,
                   template_app (template_hole 2, template_hole 1))))),
           template_var 0)),
       template_app (template_hole 0, template_var 0))),
    ("Poincare_Lines_Axis_Intersections.add_less_abs_positive_iff",
     "\<bar>?b\<bar> < \<bar>?a\<bar> ==> (0 < ?a + ?b) = (0 < ?a)",
     template_implication
      ([template_inequation
         (less_than, template_app (template_hole 3, template_var 1),
          template_app (template_hole 3, template_var 0))],
       template_equation
        (template_app
          (template_app (template_hole 4, template_hole 1),
           template_app
            (template_app (template_hole 0, template_var 0),
             template_var 1)),
         template_app
          (template_app (template_hole 4, template_hole 1),
           template_var 0)))),
    ("Poincare_Lines_Axis_Intersections.calc_x_axis_intersection",
     "[| is_poincare_line ?H; intersects_x_axis ?H |]
      ==> calc_x_axis_intersection ?H
          : circline_set ?H Int circline_set x_axis",
     template_implication
      ([template_predicate (template_app (template_hole 6, template_var 0)),
        template_predicate
         (template_app (template_hole 5, template_var 0))],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 4,
               template_app (template_hole 3, template_var 0)),
             template_app
              (template_app
                (template_hole 2,
                 template_app (template_hole 1, template_var 0)),
               template_app (template_hole 1, template_hole 0)))
           ))),
    ("Poincare_Lines_Axis_Intersections.intersects_x_axis_iff",
     "is_poincare_line ?H ==>
      (EX x:unit_disc. x : circline_set ?H Int circline_set x_axis) =
      intersects_x_axis ?H",
     template_implication
      ([template_predicate
         (template_app (template_hole 8, template_var 0))],
       template_equation
        (template_app
          (template_app (template_hole 6, template_hole 5), t_empty),
         template_app (template_hole 0, template_var 0)))),
    ("Poincare_Lines_Axis_Intersections.intersects_y_axis_iff",
     "is_poincare_line ?H ==>
      (EX y:unit_disc. y : circline_set ?H Int circline_set y_axis) =
      intersects_y_axis ?H",
     template_implication
      ([template_predicate
         (template_app (template_hole 8, template_var 0))],
       template_equation
        (template_app
          (template_app (template_hole 6, template_hole 5), t_empty),
         template_app (template_hole 0, template_var 0)))),
    ("Poincare_Lines_Axis_Intersections.intersects_x_axis_positive_iff'",
     "is_poincare_line ?H ==>
      intersects_x_axis_positive ?H =
      (calc_x_axis_intersection ?H : unit_disc &
       calc_x_axis_intersection ?H : circline_set ?H Int positive_x_axis)",
     template_implication
      ([template_predicate
         (template_app (template_hole 9, template_var 0))],
       template_equation
        (template_app (template_hole 7, template_var 0),
         template_app
          (template_app
            (template_hole 6,
             template_app
              (template_app
                (template_hole 5,
                 template_app (template_hole 4, template_var 0)),
               template_hole 3)),
           template_app
            (template_app
              (template_hole 5,
               template_app (template_hole 4, template_var 0)),
             template_app
              (template_app
                (template_hole 2,
                 template_app (template_hole 1, template_var 0)),
               template_hole 0)))))),
    ("Poincare_Lines_Axis_Intersections.intersects_y_axis_positive_iff",
     "[| is_poincare_line ?H; ?H ~= y_axis |]
      ==> (EX y:unit_disc. y : circline_set ?H Int positive_y_axis) =
          intersects_y_axis_positive ?H",
     template_implication
      ([template_predicate
         (template_app (template_hole 11, template_var 0)),
        template_negation
         (template_equation (template_var 0, template_hole 8))],
       template_equation
        (template_app
          (template_app (template_hole 6, template_hole 5), t_empty),
         template_app (template_hole 0, template_var 0)))),
    ("Poincare_Lines_Axis_Intersections.intersects_x_axis_positive_iff",
     "[| is_poincare_line ?H; ?H ~= x_axis |]
      ==> intersects_x_axis_positive ?H =
          (EX x. x : unit_disc & x : circline_set ?H Int positive_x_axis)",
     template_implication
      ([template_predicate
         (template_app (template_hole 12, template_var 0)),
        template_negation
         (template_equation (template_var 0, template_hole 9))],
       template_equation
        (template_app (template_hole 7, template_var 0),
         template_app (template_hole 6, t_empty)))),
    ("Poincare_Lines_Axis_Intersections.unique_calc_x_axis_intersection",
     "[| is_poincare_line ?H; ?H ~= x_axis; ?x : unit_disc;
         ?x : circline_set ?H Int circline_set x_axis |]
      ==> ?x = calc_x_axis_intersection ?H",
     template_implication
      ([template_predicate (template_app (template_hole 9, template_var 1)),
        template_negation
         (template_equation (template_var 1, template_hole 6)),
        template_predicate
         (
            template_app
             (template_app (template_hole 5, template_var 0),
              template_hole 4)
            ),
        template_predicate
         (
            template_app
             (template_app (template_hole 5, template_var 0),
              template_app
               (template_app
                 (template_hole 3,
                  template_app (template_hole 2, template_var 1)),
                template_app (template_hole 2, template_hole 6)))
            )],
       template_equation
        (template_var 0, template_app (template_hole 0, template_var 1)))),
    ("Poincare_Lines_Axis_Intersections.outward",
     "[| is_poincare_line ?H1.0; is_poincare_line ?H2.0;
         intersects_x_axis_positive ?H1.0; intersects_x_axis_positive ?H2.0;
         outward ?H1.0 ?H2.0 |]
      ==> Re (to_complex (calc_x_axis_intersection ?H2.0))
          <= Re (to_complex (calc_x_axis_intersection ?H1.0))",
     template_implication
      ([template_predicate (template_app (template_hole 6, template_var 1)),
        template_predicate (template_app (template_hole 6, template_var 0)),
        template_predicate (template_app (template_hole 5, template_var 1)),
        template_predicate (template_app (template_hole 5, template_var 0)),
        template_predicate
         (
            template_app
             (template_app (template_hole 4, template_var 1),
              template_var 0)
            )],
       template_inequation
        (less_equals,
         template_app
          (template_hole 2,
           template_app
            (template_hole 1,
             template_app (template_hole 0, template_var 0))),
         template_app
          (template_hole 2,
           template_app
            (template_hole 1,
             template_app (template_hole 0, template_var 1)))))),
    ("Poincare_Lines_Axis_Intersections.calc_x_axis_intersection_fun_mono",
     "[| 1 < ?x1.0; ?x1.0 < ?x2.0 |]
      ==> ?x2.0 - sqrt (?x2.0\<^sup>2 - 1)
          < ?x1.0 - sqrt (?x1.0\<^sup>2 - 1)",
     template_implication
      ([template_inequation (less_than, template_hole 6, template_var 1),
        template_inequation (less_than, template_var 1, template_var 0)],
       template_inequation
        (less_than,
         template_app
          (template_app (template_hole 5, template_var 0),
           template_app
            (template_hole 4,
             template_app
              (template_app
                (template_hole 5,
                 template_app
                  (template_app (template_hole 3, template_var 0),
                   template_app
                    (template_hole 2,
                     template_app (template_hole 1, template_hole 0)))),
               template_hole 6))),
         template_app
          (template_app (template_hole 5, template_var 1),
           template_app
            (template_hole 4,
             template_app
              (template_app
                (template_hole 5,
                 template_app
                  (template_app (template_hole 3, template_var 1),
                   template_app
                    (template_hole 2,
                     template_app (template_hole 1, template_hole 0)))),
               template_hole 6)))))),
    ("Poincare_Lines_Axis_Intersections.ideal_points_intersects_x_axis",
     "[| is_poincare_line ?H; ideal_points ?H = {?i1.0, ?i2.0};
         ?H ~= x_axis |]
      ==> intersects_x_axis ?H =
          (Im (to_complex ?i1.0) * Im (to_complex ?i2.0) < 0)",
     template_implication
      ([template_predicate
         (template_app (template_hole 14, template_var 2)),
        template_equation
         (template_app (template_hole 12, template_var 2),
          template_app
           (template_app (template_hole 11, template_var 1),
            template_app
             (template_app (template_hole 11, template_var 0),
              template_hole 10))),
        template_negation
         (template_equation (template_var 2, template_hole 7))],
       template_equation
        (template_app (template_hole 5, template_var 2),
         template_app
          (template_app
            (template_hole 4,
             template_app
              (template_app
                (template_hole 3,
                 template_app
                  (template_hole 2,
                   template_app (template_hole 1, template_var 1))),
               template_app
                (template_hole 2,
                 template_app (template_hole 1, template_var 0)))),
           template_hole 0)))),
    ("Poincare_Lines_Axis_Intersections.intersects_x_axis_positive_mk_circline",
     "[| is_real ?A; ?A ~= 0 | ?B ~= 0 |]
      ==> intersects_x_axis_positive (mk_circline ?A ?B (cnj ?B) ?A) =
          (Re ?B / Re ?A < - 1)",
     template_implication
      ([template_equation
         (template_app (template_hole 14, template_var 1),
          template_hole 13),
        template_predicate
         (
            template_app
             (template_app
               (template_hole 12,
                template_app
                 (template_hole 11,
                  template_app
                   (template_app (template_hole 10, template_var 1),
                    template_hole 9))),
              template_app
               (template_hole 11,
                template_app
                 (template_app (template_hole 10, template_var 0),
                  template_hole 9)))
            )],
       template_equation
        (template_app
          (template_hole 7,
           template_app
            (template_app
              (template_app
                (template_app (template_hole 6, template_var 1),
                 template_var 0),
               template_app (template_hole 5, template_var 0)),
             template_var 1)),
         template_app
          (template_app
            (template_hole 4,
             template_app
              (template_app
                (template_hole 3,
                 template_app (template_hole 2, template_var 0)),
               template_app (template_hole 2, template_var 1))),
           template_app (template_hole 1, template_hole 0))))),
    ("Poincare_Lines_Axis_Intersections.intersects_x_axis_mk_circline",
     "[| is_real ?A; ?A ~= 0 | ?B ~= 0 |]
      ==> intersects_x_axis (mk_circline ?A ?B (cnj ?B) ?A) =
          (?A = 0 | (Re ?A)\<^sup>2 < (Re ?B)\<^sup>2)",
     template_implication
      ([template_equation
         (template_app (template_hole 15, template_var 1),
          template_hole 14),
        template_predicate
         (
            template_app
             (template_app
               (template_hole 13,
                template_app
                 (template_hole 12,
                  template_app
                   (template_app (template_hole 11, template_var 1),
                    template_hole 10))),
              template_app
               (template_hole 12,
                template_app
                 (template_app (template_hole 11, template_var 0),
                  template_hole 10)))
            )],
       template_implication
        ([template_predicate
           (
              template_app
               (template_hole 8,
                template_app
                 (template_app
                   (template_app
                     (template_app (template_hole 7, template_var 1),
                      template_var 0),
                    template_app (template_hole 6, template_var 0)),
                  template_var 1))
              )],
         template_predicate
          (
             template_app
              (template_app
                (template_hole 13,
                 template_app
                  (template_app (template_hole 11, template_var 1),
                   template_hole 10)),
               template_app
                (template_app
                  (template_hole 5,
                   template_app
                    (template_app
                      (template_hole 4,
                       template_app (template_hole 3, template_var 1)),
                     template_app
                      (template_hole 2,
                       template_app (template_hole 1, template_hole 0)))),
                 template_app
                  (template_app
                    (template_hole 4,
                     template_app (template_hole 3, template_var 0)),
                   template_app
                    (template_hole 2,
                     template_app (template_hole 1, template_hole 0)))))
             )))),
    ("Poincare_Lines_Axis_Intersections.calc_x_axis_intersection_positive_abs'",
     "[| ?A\<^sup>2 < ?B\<^sup>2; ?A ~= 0 |]
      ==> \<bar>sgn ?B * sqrt (?B\<^sup>2 - ?A\<^sup>2) / ?A\<bar>
          < \<bar>- ?B / ?A\<bar>",
     template_implication
      ([template_inequation
         (less_than,
          template_app
           (template_app (template_hole 13, template_var 1),
            template_app
             (template_hole 12,
              template_app (template_hole 11, template_hole 10))),
          template_app
           (template_app (template_hole 13, template_var 0),
            template_app
             (template_hole 12,
              template_app (template_hole 11, template_hole 10)))),
        template_negation
         (template_equation (template_var 1, template_hole 7))],
       template_inequation
        (less_than,
         template_app
          (template_hole 6,
           template_app
            (template_app
              (template_hole 5,
               template_app
                (template_app
                  (template_hole 4,
                   template_app (template_hole 3, template_var 0)),
                 template_app
                  (template_hole 2,
                   template_app
                    (template_app
                      (template_hole 1,
                       template_app
                        (template_app (template_hole 13, template_var 0),
                         template_app
                          (template_hole 12,
                           template_app
                            (template_hole 11, template_hole 10)))),
                     template_app
                      (template_app (template_hole 13, template_var 1),
                       template_app
                        (template_hole 12,
                         template_app
                          (template_hole 11, template_hole 10))))))),
             template_var 1)),
         template_app
          (template_hole 6,
           template_app
            (template_app
              (template_hole 5,
               template_app (template_hole 0, template_var 0)),
             template_var 1))))),
    ("Poincare_Lines_Axis_Intersections.calc_intersect_x_axis_positive_lemma",
     "[| ?A\<^sup>2 < ?B\<^sup>2; ?A ~= 0 |]
      ==> (0 < (- ?B + sgn ?B * sqrt (?B\<^sup>2 - ?A\<^sup>2)) / ?A) =
          (1 < - ?B / ?A)",
     template_implication
      ([template_inequation
         (less_than,
          template_app
           (template_app (template_hole 15, template_var 1),
            template_app
             (template_hole 14,
              template_app (template_hole 13, template_hole 12))),
          template_app
           (template_app (template_hole 15, template_var 0),
            template_app
             (template_hole 14,
              template_app (template_hole 13, template_hole 12)))),
        template_negation
         (template_equation (template_var 1, template_hole 9))],
       template_equation
        (template_app
          (template_app (template_hole 16, template_hole 9),
           template_app
            (template_app
              (template_hole 7,
               template_app
                (template_app
                  (template_hole 6,
                   template_app (template_hole 5, template_var 0)),
                 template_app
                  (template_app
                    (template_hole 4,
                     template_app (template_hole 3, template_var 0)),
                   template_app
                    (template_hole 2,
                     template_app
                      (template_app
                        (template_hole 1,
                         template_app
                          (template_app (template_hole 15, template_var 0),
                           template_app
                            (template_hole 14,
                             template_app
                              (template_hole 13, template_hole 12)))),
                       template_app
                        (template_app (template_hole 15, template_var 1),
                         template_app
                          (template_hole 14,
                           template_app
                            (template_hole 13, template_hole 12)))))))),
             template_var 1)),
         template_app
          (template_app (template_hole 16, template_hole 0),
           template_app
            (template_app
              (template_hole 7,
               template_app (template_hole 5, template_var 0)),
             template_var 1))))),
    ("Poincare_Lines_Axis_Intersections.poincare_between_x_axis_intersection",
     "[| ?u : unit_disc; ?v : unit_disc; ?z : unit_disc; ?u ~= ?v;
         ?u ~: circline_set x_axis; ?v ~: circline_set x_axis;
         ?z : circline_set (poincare_line ?u ?v) Int circline_set x_axis |]
      ==> poincare_between ?u ?z ?v =
          (Arg (to_complex ?u) * Arg (to_complex ?v) < 0)",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 14, template_var 2),
              template_hole 13)
            ),
        template_predicate
         (
            template_app
             (template_app (template_hole 14, template_var 1),
              template_hole 13)
            ),
        template_predicate
         (
            template_app
             (template_app (template_hole 14, template_var 0),
              template_hole 13)
            ),
        template_negation
         (template_equation (template_var 2, template_var 1)),
        template_negation
         (
            template_predicate
             (
                template_app
                 (template_app (template_hole 14, template_var 2),
                  template_app (template_hole 10, template_hole 9))
                )
            ),
        template_negation
         (
            template_predicate
             (
                template_app
                 (template_app (template_hole 14, template_var 1),
                  template_app (template_hole 10, template_hole 9))
                )
            ),
        template_predicate
         (
            template_app
             (template_app (template_hole 14, template_var 0),
              template_app
               (template_app
                 (template_hole 8,
                  template_app
                   (template_hole 10,
                    template_app
                     (template_app (template_hole 7, template_var 2),
                      template_var 1))),
                template_app (template_hole 10, template_hole 9)))
            )],
       template_equation
        (template_app
          (template_app
            (template_app (template_hole 5, template_var 2),
             template_var 0),
           template_var 1),
         template_app
          (template_app
            (template_hole 4,
             template_app
              (template_app
                (template_hole 3,
                 template_app
                  (template_hole 2,
                   template_app (template_hole 1, template_var 2))),
               template_app
                (template_hole 2,
                 template_app (template_hole 1, template_var 1)))),
           template_hole 0)))),
    ("Poincare_Lines_Axis_Intersections.outward_mk_circline",
     "[| is_real ?A1.0; is_real ?A2.0; ?A1.0 ~= 0 | ?B1.0 ~= 0;
         ?A2.0 ~= 0 | ?B2.0 ~= 0 |]
      ==> outward (mk_circline ?A1.0 ?B1.0 (cnj ?B1.0) ?A1.0)
           (mk_circline ?A2.0 ?B2.0 (cnj ?B2.0) ?A2.0) =
          (- Re ?B1.0 / Re ?A1.0 <= - Re ?B2.0 / Re ?A2.0)",
     template_implication
      ([template_equation
         (template_app (template_hole 13, template_var 3),
          template_hole 12),
        template_equation
         (template_app (template_hole 13, template_var 2),
          template_hole 12),
        template_predicate
         (
            template_app
             (template_app
               (template_hole 11,
                template_app
                 (template_hole 10,
                  template_app
                   (template_app (template_hole 9, template_var 3),
                    template_hole 8))),
              template_app
               (template_hole 10,
                template_app
                 (template_app (template_hole 9, template_var 1),
                  template_hole 8)))
            ),
        template_predicate
         (
            template_app
             (template_app
               (template_hole 11,
                template_app
                 (template_hole 10,
                  template_app
                   (template_app (template_hole 9, template_var 2),
                    template_hole 8))),
              template_app
               (template_hole 10,
                template_app
                 (template_app (template_hole 9, template_var 0),
                  template_hole 8)))
            )],
       template_equation
        (template_app
          (template_app
            (template_hole 6,
             template_app
              (template_app
                (template_app
                  (template_app (template_hole 5, template_var 3),
                   template_var 1),
                 template_app (template_hole 4, template_var 1)),
               template_var 3)),
           template_app
            (template_app
              (template_app
                (template_app (template_hole 5, template_var 2),
                 template_var 0),
               template_app (template_hole 4, template_var 0)),
             template_var 2)),
         template_app
          (template_app
            (template_hole 3,
             template_app
              (template_app
                (template_hole 2,
                 template_app
                  (template_hole 1,
                   template_app (template_hole 0, template_var 1))),
               template_app (template_hole 0, template_var 3))),
           template_app
            (template_app
              (template_hole 2,
               template_app
                (template_hole 1,
                 template_app (template_hole 0, template_var 0))),
             template_app (template_hole 0, template_var 2)))))),
    ("Poincare_Lines_Axis_Intersections.x_axis_intersection_equation",
     "[| ?H = mk_circline (cor ?A) ?B ?C (cor ?D);
         (cor ?A, ?B, ?C, cor ?D) : hermitean_nonzero |]
      ==> (of_complex (cor ?z) : circline_set x_axis Int circline_set ?H) =
          (?A * ?z\<^sup>2 + 2 * Re ?B * ?z + ?D = 0 & is_real (cor ?z))",
     template_implication
      ([template_equation
         (template_var 5,
          template_app
           (template_app
             (template_app
               (template_app
                 (template_hole 28,
                  template_app (template_hole 27, template_var 4)),
                template_var 3),
              template_var 2),
            template_app (template_hole 27, template_var 1))),
        template_predicate
         (
            template_app
             (template_app
               (template_hole 26,
                template_app
                 (template_app
                   (template_hole 25,
                    template_app (template_hole 27, template_var 4)),
                  template_app
                   (template_app (template_hole 24, template_var 3),
                    template_app
                     (template_app (template_hole 23, template_var 2),
                      template_app (template_hole 27, template_var 1))))),
              template_app (template_hole 22, t_empty))
            )],
       template_implication
        ([template_predicate
           (
              template_app
               (template_app
                 (template_hole 15,
                  template_app
                   (template_hole 14,
                    template_app (template_hole 27, template_var 0))),
                template_app
                 (template_app
                   (template_hole 13,
                    template_app (template_hole 12, template_hole 11)),
                  template_app (template_hole 12, template_var 5)))
              )],
         template_predicate
          (
             template_app
              (template_app
                (template_hole 21,
                 template_app
                  (template_app
                    (template_hole 10,
                     template_app
                      (template_app
                        (template_hole 9,
                         template_app
                          (template_app
                            (template_hole 9,
                             template_app
                              (template_app
                                (template_hole 8, template_var 4),
                               template_app
                                (template_app
                                  (template_hole 7, template_var 0),
                                 template_app
                                  (template_hole 6,
                                   template_app
                                    (template_hole 5, template_hole 4))))),
                           template_app
                            (template_app
                              (template_hole 8,
                               template_app
                                (template_app
                                  (template_hole 8,
                                   template_app
                                    (template_hole 3,
                                     template_app
(template_hole 5, template_hole 4))),
                                 template_app
                                  (template_hole 2, template_var 3))),
                             template_var 0))),
                       template_var 1)),
                   template_hole 1)),
               template_app
                (template_app
                  (template_hole 10,
                   template_app
                    (template_hole 0,
                     template_app (template_hole 27, template_var 0))),
                 template_hole 1))
             )))),
    ("Poincare_Lines_Axis_Intersections.calc_x_axis_intersection_mono",
     "[| 1 < - ?b1.0 / ?a1.0; ?a1.0 ~= 0;
         - ?b1.0 / ?a1.0 <= - ?b2.0 / ?a2.0; ?a2.0 ~= 0 |]
      ==> (- ?b2.0 + sgn ?b2.0 * sqrt (?b2.0\<^sup>2 - ?a2.0\<^sup>2)) /
          ?a2.0
          <= (- ?b1.0 + sgn ?b1.0 * sqrt (?b1.0\<^sup>2 - ?a1.0\<^sup>2)) /
             ?a1.0",
     template_implication
      ([template_inequation
         (less_than, template_hole 15,
          template_app
           (template_app
             (template_hole 14,
              template_app (template_hole 13, template_var 3)),
            template_var 2)),
        template_negation
         (template_equation (template_var 2, template_hole 10)),
        template_inequation
         (less_equals,
          template_app
           (template_app
             (template_hole 14,
              template_app (template_hole 13, template_var 3)),
            template_var 2),
          template_app
           (template_app
             (template_hole 14,
              template_app (template_hole 13, template_var 1)),
            template_var 0)),
        template_negation
         (template_equation (template_var 0, template_hole 10))],
       template_inequation
        (less_equals,
         template_app
          (template_app
            (template_hole 14,
             template_app
              (template_app
                (template_hole 8,
                 template_app (template_hole 13, template_var 1)),
               template_app
                (template_app
                  (template_hole 7,
                   template_app (template_hole 6, template_var 1)),
                 template_app
                  (template_hole 5,
                   template_app
                    (template_app
                      (template_hole 4,
                       template_app
                        (template_app (template_hole 3, template_var 1),
                         template_app
                          (template_hole 2,
                           template_app
                            (template_hole 1, template_hole 0)))),
                     template_app
                      (template_app (template_hole 3, template_var 0),
                       template_app
                        (template_hole 2,
                         template_app
                          (template_hole 1, template_hole 0)))))))),
           template_var 0),
         template_app
          (template_app
            (template_hole 14,
             template_app
              (template_app
                (template_hole 8,
                 template_app (template_hole 13, template_var 3)),
               template_app
                (template_app
                  (template_hole 7,
                   template_app (template_hole 6, template_var 3)),
                 template_app
                  (template_hole 5,
                   template_app
                    (template_app
                      (template_hole 4,
                       template_app
                        (template_app (template_hole 3, template_var 3),
                         template_app
                          (template_hole 2,
                           template_app
                            (template_hole 1, template_hole 0)))),
                     template_app
                      (template_app (template_hole 3, template_var 2),
                       template_app
                        (template_hole 2,
                         template_app
                          (template_hole 1, template_hole 0)))))))),
           template_var 2))))]:
   (string * thm * template) list
### theory "Draft.Poincare_Lines_Axis_IntersectionsMoreTemplates"
### 0.751s elapsed time, 1.861s cpu time, 1.402s GC time
val it = (): unit
