Loading theory "Complex_Geometry.Linear_Systems" (required by "Draft.PoincareMoreTemplates" via "Draft.Poincare" via "Draft.Poincare_Lines" via "Complex_Geometry.Unit_Circle_Preserving_Moebius" via "Complex_Geometry.Unitary11_Matrices" via "Complex_Geometry.Matrices")
Loading theory "HOL-Library.Function_Algebras" (required by "Draft.PoincareMoreTemplates" via "Draft.ExtrEqs" via "HOL-Library.BigO")
Loading theory "Complex_Geometry.More_Set" (required by "Draft.PoincareMoreTemplates" via "Draft.Poincare" via "Draft.Poincare_Lines" via "Complex_Geometry.Unit_Circle_Preserving_Moebius" via "Complex_Geometry.Oriented_Circlines" via "Complex_Geometry.Circlines")
Loading theory "HOL-Library.Nat_Bijection" (required by "Draft.PoincareMoreTemplates" via "Draft.ExtrEqs" via "HOL-Library.Stream")
instantiation
  fun :: (type, plus) plus
  plus_fun == plus :: ('a => 'b) => ('a => 'b) => 'a => 'b
instantiation
  fun :: (type, zero) zero
  zero_fun == zero_class.zero :: 'a => 'b
instantiation
  fun :: (type, times) times
  times_fun == times :: ('a => 'b) => ('a => 'b) => 'a => 'b
### theory "Complex_Geometry.More_Set"
### 0.050s elapsed time, 0.235s cpu time, 0.000s GC time
Loading theory "HOL-Library.Set_Algebras" (required by "Draft.PoincareMoreTemplates" via "Draft.ExtrEqs" via "HOL-Library.BigO")
instantiation
  fun :: (type, one) one
  one_fun == one_class.one :: 'a => 'b
instantiation
  set :: (plus) plus
  plus_set == plus :: 'a set => 'a set => 'a set
### theory "Complex_Geometry.Linear_Systems"
### 0.075s elapsed time, 0.333s cpu time, 0.000s GC time
Loading theory "HOL-Library.Tree" (required by "Draft.PoincareMoreTemplates" via "Draft.ExtrEqs" via "Draft.Templates")
instantiation
  set :: (times) times
  times_set == times :: 'a set => 'a set => 'a set
Found termination order: "(%p. size (snd p)) <*mlex*> {}"
instantiation
  set :: (zero) zero
  zero_set == zero_class.zero :: 'a set
instantiation
  set :: (one) one
  one_set == one_class.one :: 'a set
### theory "HOL-Library.Function_Algebras"
### 0.122s elapsed time, 0.513s cpu time, 0.045s GC time
Loading theory "HOL-Library.Periodic_Fun" (required by "Draft.PoincareMoreTemplates" via "Draft.Poincare" via "Draft.Poincare_Lines" via "Complex_Geometry.Unit_Circle_Preserving_Moebius" via "Complex_Geometry.Unitary11_Matrices" via "Complex_Geometry.Matrices" via "Complex_Geometry.More_Complex" via "Complex_Geometry.More_Transcendental")
locale periodic_fun
  fixes f :: "'a => 'b"
    and g :: "'a => 'a => 'a"
    and gm :: "'a => 'a => 'a"
    and g1 :: "'a => 'a"
    and gn1 :: "'a => 'a"
  assumes "periodic_fun f g gm g1 gn1"
locale periodic_fun_simple
  fixes f :: "'a => 'b"
    and period :: "'a"
  assumes "periodic_fun_simple f period"
Found termination order: "size_list size <*mlex*> {}"
locale periodic_fun_simple'
  fixes f :: "'a => 'b"
  assumes "periodic_fun_simple' f"
### theory "HOL-Library.Set_Algebras"
### 0.227s elapsed time, 0.881s cpu time, 0.122s GC time
Loading theory "HOL-Library.BigO" (required by "Draft.PoincareMoreTemplates" via "Draft.ExtrEqs")
### theory "HOL-Library.Periodic_Fun"
### 0.177s elapsed time, 0.691s cpu time, 0.078s GC time
Loading theory "Complex_Geometry.More_Transcendental" (required by "Draft.PoincareMoreTemplates" via "Draft.Poincare" via "Draft.Poincare_Lines" via "Complex_Geometry.Unit_Circle_Preserving_Moebius" via "Complex_Geometry.Unitary11_Matrices" via "Complex_Geometry.Matrices" via "Complex_Geometry.More_Complex")
### theory "HOL-Library.Nat_Bijection"
### 0.329s elapsed time, 1.322s cpu time, 0.122s GC time
Loading theory "HOL-Library.Stream" (required by "Draft.PoincareMoreTemplates" via "Draft.ExtrEqs")
### theory "Complex_Geometry.More_Transcendental"
### 0.089s elapsed time, 0.363s cpu time, 0.000s GC time
Loading theory "Complex_Geometry.Canonical_Angle" (required by "Draft.PoincareMoreTemplates" via "Draft.Poincare" via "Draft.Poincare_Lines" via "Complex_Geometry.Unit_Circle_Preserving_Moebius" via "Complex_Geometry.Unitary11_Matrices" via "Complex_Geometry.Matrices" via "Complex_Geometry.More_Complex")
### theory "Complex_Geometry.Canonical_Angle"
### 0.115s elapsed time, 0.452s cpu time, 0.082s GC time
Loading theory "Complex_Geometry.More_Complex" (required by "Draft.PoincareMoreTemplates" via "Draft.Poincare" via "Draft.Poincare_Lines" via "Complex_Geometry.Unit_Circle_Preserving_Moebius" via "Complex_Geometry.Unitary11_Matrices" via "Complex_Geometry.Matrices")
consts
  left :: "'a tree => 'a tree"
consts
  right :: "'a tree => 'a tree"
Found termination order: "size <*mlex*> {}"
consts
  shift :: "'a list => 'a stream => 'a stream"
Found termination order: "size <*mlex*> {}"
Proofs for coinductive predicate(s) "streamsp"
  Proving monotonicity ...
Found termination order: "size <*mlex*> {}"
### theory "Complex_Geometry.More_Complex"
### 0.336s elapsed time, 1.335s cpu time, 0.141s GC time
Loading theory "Complex_Geometry.Angles" (required by "Draft.PoincareMoreTemplates" via "Draft.Poincare" via "Draft.Poincare_Lines" via "Complex_Geometry.Unit_Circle_Preserving_Moebius" via "Complex_Geometry.Oriented_Circlines" via "Complex_Geometry.Circlines" via "Complex_Geometry.Elementary_Complex_Geometry")
consts
  snth :: "'a stream => nat => 'a"
class height = type +
  fixes height :: "'a => nat"
instantiation
  tree :: (type) height
  height_tree == height :: 'a tree => nat
consts
  stake :: "nat => 'a stream => 'a list"
consts
  sdrop :: "nat => 'a stream => 'a stream"
Found termination order: "size <*mlex*> {}"
consts
  sfilter :: "('a => bool) => 'a stream => 'a stream"
consts
  cycle :: "'a list => 'a stream"
### theory "Complex_Geometry.Angles"
### 0.331s elapsed time, 1.167s cpu time, 0.560s GC time
Loading theory "Complex_Geometry.Elementary_Complex_Geometry" (required by "Draft.PoincareMoreTemplates" via "Draft.Poincare" via "Draft.Poincare_Lines" via "Complex_Geometry.Unit_Circle_Preserving_Moebius" via "Complex_Geometry.Oriented_Circlines" via "Complex_Geometry.Circlines")
Found termination order: "size <*mlex*> {}"
consts
  siterate :: "('a => 'a) => 'a => 'a stream"
Found termination order: "size <*mlex*> {}"
consts
  flat :: "'a list stream => 'a stream"
### theory "HOL-Library.BigO"
### 1.012s elapsed time, 3.853s cpu time, 0.845s GC time
Loading theory "Draft.Hyperbolic_Functions" (required by "Draft.PoincareMoreTemplates" via "Draft.Poincare" via "Draft.Poincare_Between" via "Draft.Poincare_Distance")
consts
  sinterleave :: "'a stream => 'a stream => 'a stream"
### theory "Draft.Hyperbolic_Functions"
### 0.072s elapsed time, 0.285s cpu time, 0.000s GC time
Loading theory "HOL-Library.Quadratic_Discriminant" (required by "Draft.PoincareMoreTemplates" via "Draft.Poincare" via "Draft.Poincare_Lines" via "Complex_Geometry.Unit_Circle_Preserving_Moebius" via "Complex_Geometry.Unitary11_Matrices" via "Complex_Geometry.Matrices" via "Complex_Geometry.Quadratic")
Found termination order: "size <*mlex*> {}"
consts
  szip :: "'a stream => 'b stream => ('a * 'b) stream"
consts
  smap2 :: "('a => 'b => 'c) => 'a stream => 'b stream => 'c stream"
Found termination order: "size <*mlex*> {}"
### theory "HOL-Library.Stream"
### 1.133s elapsed time, 4.319s cpu time, 0.952s GC time
### theory "HOL-Library.Quadratic_Discriminant"
### 0.122s elapsed time, 0.459s cpu time, 0.107s GC time
Loading theory "Complex_Geometry.Quadratic" (required by "Draft.PoincareMoreTemplates" via "Draft.Poincare" via "Draft.Poincare_Lines" via "Complex_Geometry.Unit_Circle_Preserving_Moebius" via "Complex_Geometry.Unitary11_Matrices" via "Complex_Geometry.Matrices")
Found termination order: "size <*mlex*> {}"
Found termination order: "size <*mlex*> {}"
Found termination order: "(%p. size (fst p)) <*mlex*> {}"
Found termination order: "size <*mlex*> {}"
### theory "Complex_Geometry.Elementary_Complex_Geometry"
### 0.570s elapsed time, 1.985s cpu time, 0.261s GC time
### theory "Complex_Geometry.Quadratic"
### 0.298s elapsed time, 0.889s cpu time, 0.093s GC time
Loading theory "Complex_Geometry.Matrices" (required by "Draft.PoincareMoreTemplates" via "Draft.Poincare" via "Draft.Poincare_Lines" via "Complex_Geometry.Unit_Circle_Preserving_Moebius" via "Complex_Geometry.Unitary11_Matrices")
Found termination order: "(%p. size (snd p)) <*mlex*> {}"
Found termination order: "size <*mlex*> {}"
Found termination order: "{}"
### theory "HOL-Library.Tree"
### 2.102s elapsed time, 7.134s cpu time, 1.275s GC time
Loading theory "Draft.Templates" (required by "Draft.PoincareMoreTemplates" via "Draft.ExtrEqs")
Found termination order: "{}"
datatype template_term
=
     t_empty
   | template_app of template_term * template_term
   | template_hole of int
   | template_var of int
datatype sign
= equals | greater_equals | greater_than | less_equals | less_than
datatype template
=
     template_bimplication of template * template
   | template_dunno
   | template_equation of template_term * template_term
   | template_implication of template list * template
   | template_inequation of sign * template_term * template_term
   | template_negation of template
   | template_predicate of template_term
constructor t_empty: template_term
constructor template_app: template_term * template_term -> template_term
constructor template_hole: int -> template_term
constructor template_var: int -> template_term
constructor equals: sign
constructor greater_equals: sign
constructor greater_than: sign
constructor less_equals: sign
constructor less_than: sign
constructor template_bimplication: template * template -> template
constructor template_dunno: template
constructor template_equation: template_term * template_term -> template
constructor template_implication: template list * template -> template
constructor template_inequation:
   sign * template_term * template_term -> template
constructor template_negation: template -> template
constructor template_predicate: template_term -> template
val vfs = fn: term -> (indexname * typ) list * (string * typ) list
val indexOf = fn: ''a list -> ''a -> int -> int
val has_eq = fn: term -> bool
val term2template = fn:
   (indexname * typ) list -> (string * typ) list -> term -> template_term
val lemma2predicate = fn: term -> term -> template
val makeTemplatewithContext = fn: term -> term -> template
val lemma2template = fn: term -> template
val thm2template = fn: thm -> template
val tterm2string = fn: template_term -> string
val template2string = fn: template -> string
val t = "height ?t <= size ?t": thm
val th =
   Const ("HOL.Trueprop", "bool => prop") $
     (Const ("Orderings.ord_class.less_eq", "nat => nat => bool") $
       (Const ("Tree.height_class.height", "?'a tree => nat") $
         Var (("t", 0), "?'a tree")) $
       (Const ("Nat.size_class.size", "?'a tree => nat") $
         Var (("t", 0), "?'a tree"))):
   term
### theory "Draft.Templates"
### 0.059s elapsed time, 0.137s cpu time, 0.000s GC time
Loading theory "Draft.ExtrEqs" (required by "Draft.PoincareMoreTemplates")
Found termination order: "{}"
Found termination order: "{}"
Found termination order: "{}"
Found termination order: "{}"
Found termination order: "{}"
Found termination order: "{}"
Found termination order: "{}"
Found termination order: "{}"
Found termination order: "{}"
Found termination order: "{}"
val eqpattern =
   Pattern
    (
       Const ("HOL.Trueprop", "bool => prop") $
         (Const ("HOL.eq", "?'a => ?'a => bool") $
           Var (("_dummy_", 1), "?'a") $ Var (("_dummy_", 2), "?'a"))
       ):
   term Find_Theorems.criterion
val badeqpattern = Pattern (Const ("Pure.eq", "?'a => ?'a => prop")):
   term Find_Theorems.criterion
val undefpattern =
   Pattern
    (
       Const ("HOL.Trueprop", "bool => prop") $
         (Const ("HOL.eq", "?'a => ?'a => bool") $
           Var (("_dummy_", 1), "?'a") $ Const ("HOL.undefined", "?'a"))
       ):
   term Find_Theorems.criterion
val thmpattern =
   Pattern
    (Const ("HOL.Trueprop", "bool => prop") $ Var (("_dummy_", 1), "bool")):
   term Find_Theorems.criterion
val badnames =
   ["*nitpick*", "*Nitpick*", "*full_exhaustive*", "*_def*", "Enum.finite*",
    "*Quickcheck*", "ATP*", "*Nunchaku*", "*Code*", "*BNF*", "*SMT*",
    "*.*.*"]:
   string list
val unwanted_names =
   [(false, Name "*nitpick*"), (false, Name "*Nitpick*"),
    (false, Name "*full_exhaustive*"), (false, Name "*_def*"),
    (false, Name "Enum.finite*"), (false, Name "*Quickcheck*"),
    (false, Name "ATP*"), (false, Name "*Nunchaku*"),
    (false, Name "*Code*"), (false, Name "*BNF*"), (false, Name "*SMT*"),
    (false, Name "*.*.*")]:
   (bool * term Find_Theorems.criterion) list
val has_vars = fn: term -> bool
val get_all_eqs = fn: string -> Proof.context -> (string * thm) list
val get_all_thms = fn: string -> Proof.context -> (string * thm) list
val get_noneq_thms = fn: string -> Proof.context -> (string * thm) list
val template_eqs = fn:
   string -> Proof.context -> (string * thm * template) list
val template_thms = fn:
   string -> Proof.context -> (string * thm * template) list
### theory "Draft.ExtrEqs"
### 0.561s elapsed time, 1.193s cpu time, 0.141s GC time
Found termination order: "{}"
Found termination order: "{}"
Found termination order: "{}"
Found termination order: "{}"
### theory "Complex_Geometry.Matrices"
### 1.334s elapsed time, 2.560s cpu time, 0.357s GC time
Loading theory "Complex_Geometry.Homogeneous_Coordinates" (required by "Draft.PoincareMoreTemplates" via "Draft.Poincare" via "Draft.Poincare_Lines" via "Complex_Geometry.Unit_Circle_Preserving_Moebius" via "Complex_Geometry.Moebius")
Loading theory "Complex_Geometry.Unitary11_Matrices" (required by "Draft.PoincareMoreTemplates" via "Draft.Poincare" via "Draft.Poincare_Lines" via "Complex_Geometry.Unit_Circle_Preserving_Moebius")
Loading theory "Complex_Geometry.Unitary_Matrices" (required by "Draft.PoincareMoreTemplates" via "Draft.Poincare" via "Draft.Poincare_Lines" via "Complex_Geometry.Unit_Circle_Preserving_Moebius" via "Complex_Geometry.Oriented_Circlines" via "Complex_Geometry.Circlines" via "Complex_Geometry.Hermitean_Matrices")
### theory "Complex_Geometry.Unitary_Matrices"
### 0.102s elapsed time, 0.320s cpu time, 0.083s GC time
Loading theory "Complex_Geometry.Hermitean_Matrices" (required by "Draft.PoincareMoreTemplates" via "Draft.Poincare" via "Draft.Poincare_Lines" via "Complex_Geometry.Unit_Circle_Preserving_Moebius" via "Complex_Geometry.Oriented_Circlines" via "Complex_Geometry.Circlines")
### theory "Complex_Geometry.Unitary11_Matrices"
### 0.178s elapsed time, 0.544s cpu time, 0.083s GC time
### theory "Complex_Geometry.Hermitean_Matrices"
### 0.080s elapsed time, 0.236s cpu time, 0.000s GC time
### theory "Complex_Geometry.Homogeneous_Coordinates"
### 0.915s elapsed time, 1.972s cpu time, 1.054s GC time
Loading theory "Complex_Geometry.Moebius" (required by "Draft.PoincareMoreTemplates" via "Draft.Poincare" via "Draft.Poincare_Lines" via "Complex_Geometry.Unit_Circle_Preserving_Moebius")
instantiation
  moebius :: group_add
  minus_moebius == minus :: moebius => moebius => moebius
  uminus_moebius == uminus_class.uminus :: moebius => moebius
  zero_moebius == zero_class.zero :: moebius
  plus_moebius == plus :: moebius => moebius => moebius
### theory "Complex_Geometry.Moebius"
### 0.635s elapsed time, 0.759s cpu time, 0.170s GC time
Loading theory "Complex_Geometry.Circlines" (required by "Draft.PoincareMoreTemplates" via "Draft.Poincare" via "Draft.Poincare_Lines" via "Complex_Geometry.Unit_Circle_Preserving_Moebius" via "Complex_Geometry.Oriented_Circlines")
### theory "Complex_Geometry.Circlines"
### 1.680s elapsed time, 2.576s cpu time, 1.244s GC time
Loading theory "Complex_Geometry.Oriented_Circlines" (required by "Draft.PoincareMoreTemplates" via "Draft.Poincare" via "Draft.Poincare_Lines" via "Complex_Geometry.Unit_Circle_Preserving_Moebius")
### theory "Complex_Geometry.Oriented_Circlines"
### 0.505s elapsed time, 0.629s cpu time, 0.168s GC time
Loading theory "Complex_Geometry.Circlines_Angle" (required by "Draft.PoincareMoreTemplates" via "Draft.Poincare" via "Draft.Poincare_Lines")
Loading theory "Complex_Geometry.Unit_Circle_Preserving_Moebius" (required by "Draft.PoincareMoreTemplates" via "Draft.Poincare" via "Draft.Poincare_Lines")
Found termination order: "{}"
### theory "Complex_Geometry.Circlines_Angle"
### 0.161s elapsed time, 0.321s cpu time, 0.000s GC time
### theory "Complex_Geometry.Unit_Circle_Preserving_Moebius"
### 0.472s elapsed time, 0.713s cpu time, 0.115s GC time
Loading theory "Draft.Poincare_Lines" (required by "Draft.PoincareMoreTemplates" via "Draft.Poincare")
### theory "Draft.Poincare_Lines"
### 0.439s elapsed time, 0.530s cpu time, 0.123s GC time
Loading theory "Draft.Poincare_Lines_Ideal_Points" (required by "Draft.PoincareMoreTemplates" via "Draft.Poincare" via "Draft.Poincare_Between" via "Draft.Poincare_Distance")
### theory "Draft.Poincare_Lines_Ideal_Points"
### 0.177s elapsed time, 0.269s cpu time, 0.123s GC time
Loading theory "Draft.Poincare_Distance" (required by "Draft.PoincareMoreTemplates" via "Draft.Poincare" via "Draft.Poincare_Between")
[| 1 <= ?x; 1 <= ?y |]
==> arcosh ?x + arcosh ?y =
    arcosh (?x * ?y + sqrt ((?x\<^sup>2 - 1) * (?y\<^sup>2 - 1)))
### theory "Draft.Poincare_Distance"
### 0.334s elapsed time, 0.335s cpu time, 0.000s GC time
Loading theory "Draft.Poincare_Between" (required by "Draft.PoincareMoreTemplates" via "Draft.Poincare")
Loading theory "Draft.Poincare_Circles" (required by "Draft.PoincareMoreTemplates" via "Draft.Poincare")
### theory "Draft.Poincare_Between"
### 0.182s elapsed time, 0.397s cpu time, 0.066s GC time
### theory "Draft.Poincare_Circles"
### 0.618s elapsed time, 1.835s cpu time, 1.442s GC time
Loading theory "Draft.Poincare" (required by "Draft.PoincareMoreTemplates")
instantiation
  p_point :: metric_space
  dist_p_point == dist :: p_point => p_point => real
  uniformity_p_point == uniformity :: (p_point * p_point) filter
  open_p_point == open :: p_point set => bool
### theory "Draft.Poincare"
### 0.416s elapsed time, 0.513s cpu time, 0.129s GC time
Loading theory "Draft.PoincareMoreTemplates"
val templateLemmas =
   [("Poincare_Lines.mk_poincare_line_cmat_hermitean",
     "hermitean (mk_poincare_line_cmat ?A ?B)",
     template_predicate
      (
         template_app
          (template_hole 1,
           template_app
            (template_app (template_hole 0, template_var 1),
             template_var 0))
         )),
    ("Poincare_Lines.poincare_line_cvec_cmat_hermitean",
     "hermitean (poincare_line_cvec_cmat ?z ?w)",
     template_predicate
      (
         template_app
          (template_hole 1,
           template_app
            (template_app (template_hole 0, template_var 1),
             template_var 0))
         )),
    ("Poincare_Between.poincare_between_nonstrict",
     "poincare_between ?u ?u ?v",
     template_predicate
      (
         template_app
          (template_app
            (template_app (template_hole 0, template_var 1),
             template_var 1),
           template_var 0)
         )),
    ("Poincare_Between.poincare_between_nonstrict",
     "poincare_between ?u ?v ?v",
     template_predicate
      (
         template_app
          (template_app
            (template_app (template_hole 0, template_var 1),
             template_var 0),
           template_var 0)
         )),
    ("Poincare_Lines.is_poincare_line_conjugate_circline_iff",
     "is_poincare_line (conjugate_circline ?H) = is_poincare_line ?H",
     template_equation
      (template_app
        (template_hole 1, template_app (template_hole 0, template_var 0)),
       template_app (template_hole 1, template_var 0))),
    ("Poincare_Lines.conjugate_conjugate",
     "conjugate ` conjugate ` ?A = ?A",
     template_equation
      (template_app
        (template_app (template_hole 1, template_hole 0),
         template_app
          (template_app (template_hole 1, template_hole 0),
           template_var 0)),
       template_var 0)),
    ("Poincare_Lines.conjugate_preserve_poincare_collinear_iff",
     "poincare_collinear (conjugate ` ?A) = poincare_collinear ?A",
     template_equation
      (template_app
        (template_hole 2,
         template_app
          (template_app (template_hole 1, template_hole 0),
           template_var 0)),
       template_app (template_hole 2, template_var 0))),
    ("Poincare_Lines.is_poincare_line_conjugate_circline",
     "is_poincare_line ?H ==> is_poincare_line (conjugate_circline ?H)",
     template_implication
      ([template_predicate
         (template_app (template_hole 1, template_var 0))],
       template_predicate
        (
           template_app
            (template_hole 1,
             template_app (template_hole 0, template_var 0))
           ))),
    ("Poincare.p_collinear_p_isometry_pt",
     "p_collinear (p_isometry_pt ?M ` ?A) = p_collinear ?A",
     template_equation
      (template_app
        (template_hole 2,
         template_app
          (template_app
            (template_hole 1,
             template_app (template_hole 0, template_var 1)),
           template_var 0)),
       template_app (template_hole 2, template_var 0))),
    ("Poincare_Lines_Ideal_Points.calc_ideal_points_on_unit_circle",
     "ALL z:calc_ideal_points ?H. z : circline_set unit_circle",
     template_predicate
      (
         template_app
          (template_app
            (template_hole 4,
             template_app (template_hole 3, template_var 0)),
           t_empty)
         )),
    ("Poincare_Lines_Ideal_Points.ideal_points_on_unit_circle",
     "ALL z:ideal_points ?H. z : circline_set unit_circle",
     template_predicate
      (
         template_app
          (template_app
            (template_hole 4,
             template_app (template_hole 3, template_var 0)),
           t_empty)
         )),
    ("Poincare_Lines_Ideal_Points.ideal_points_on_circline",
     "ALL z:ideal_points ?H. z : circline_set ?H",
     template_predicate
      (
         template_app
          (template_app
            (template_hole 3,
             template_app (template_hole 2, template_var 0)),
           t_empty)
         )),
    ("Poincare_Lines.circline_inversion_poincare_line",
     "is_poincare_line ?H ==> circline_inversion ?H = ?H",
     template_implication
      ([template_predicate
         (template_app (template_hole 2, template_var 0))],
       template_equation
        (template_app (template_hole 0, template_var 0), template_var 0))),
    ("Poincare_Lines.conjugate_preserve_poincare_collinear",
     "poincare_collinear ?A ==> poincare_collinear (conjugate ` ?A)",
     template_implication
      ([template_predicate
         (template_app (template_hole 2, template_var 0))],
       template_predicate
        (
           template_app
            (template_hole 2,
             template_app
              (template_app (template_hole 1, template_hole 0),
               template_var 0))
           ))),
    ("Poincare_Lines.ex_poincare_line_one_point",
     "EX l. is_poincare_line l & ?z : circline_set l",
     template_predicate (template_app (template_hole 4, t_empty))),
    ("Poincare_Lines_Ideal_Points.ideal_points_unique",
     "is_poincare_line ?H ==> ideal_points ?H = calc_ideal_points ?H",
     template_implication
      ([template_predicate
         (template_app (template_hole 3, template_var 0))],
       template_equation
        (template_app (template_hole 1, template_var 0),
         template_app (template_hole 0, template_var 0)))),
    ("Poincare_Lines.poincare_collinear_singleton",
     "?u : unit_disc ==> poincare_collinear {?u}",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 4, template_var 0),
              template_hole 3)
            )],
       template_predicate
        (
           template_app
            (template_hole 2,
             template_app
              (template_app (template_hole 1, template_var 0),
               template_hole 0))
           ))),
    ("Poincare_Distance.poincare_distance_refl",
     "?u : unit_disc ==> poincare_distance ?u ?u = 0",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 4, template_var 0),
              template_hole 3)
            )],
       template_equation
        (template_app
          (template_app (template_hole 1, template_var 0), template_var 0),
         template_hole 0))),
    ("Poincare_Lines.is_poincare_line_poincare_line",
     "?z ~= ?w ==> is_poincare_line (poincare_line ?z ?w)",
     template_implication
      ([template_negation
         (template_equation (template_var 1, template_var 0))],
       template_predicate
        (
           template_app
            (template_hole 1,
             template_app
              (template_app (template_hole 0, template_var 1),
               template_var 0))
           ))),
    ("Poincare_Lines_Ideal_Points.two_calc_ideal_points",
     "is_poincare_line ?H ==> card (calc_ideal_points ?H) = 2",
     template_implication
      ([template_predicate
         (template_app (template_hole 6, template_var 0))],
       template_equation
        (template_app
          (template_hole 4, template_app (template_hole 3, template_var 0)),
         template_app
          (template_hole 2,
           template_app (template_hole 1, template_hole 0))))),
    ("Poincare_Lines_Ideal_Points.two_ideal_points",
     "is_poincare_line ?H ==> card (ideal_points ?H) = 2",
     template_implication
      ([template_predicate
         (template_app (template_hole 6, template_var 0))],
       template_equation
        (template_app
          (template_hole 4, template_app (template_hole 3, template_var 0)),
         template_app
          (template_hole 2,
           template_app (template_hole 1, template_hole 0))))),
    ("Poincare_Lines.unit_circle_fix_preserve_is_poincare_line_iff",
     "unit_circle_fix ?M ==>
      is_poincare_line (moebius_circline ?M ?H) = is_poincare_line ?H",
     template_implication
      ([template_predicate
         (template_app (template_hole 3, template_var 1))],
       template_equation
        (template_app
          (template_hole 1,
           template_app
            (template_app (template_hole 0, template_var 1),
             template_var 0)),
         template_app (template_hole 1, template_var 0)))),
    ("Poincare.p_on_line", "?z ~= ?w ==> p_incident (p_line ?z ?w) ?w",
     template_implication
      ([template_negation
         (template_equation (template_var 1, template_var 0))],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 1,
               template_app
                (template_app (template_hole 0, template_var 1),
                 template_var 0)),
             template_var 0)
           ))),
    ("Poincare.p_on_line", "?z ~= ?w ==> p_incident (p_line ?z ?w) ?z",
     template_implication
      ([template_negation
         (template_equation (template_var 1, template_var 0))],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 1,
               template_app
                (template_app (template_hole 0, template_var 1),
                 template_var 0)),
             template_var 1)
           ))),
    ("Poincare_Lines.poincare_line",
     "?z ~= ?w ==> on_circline (poincare_line ?z ?w) ?w",
     template_implication
      ([template_negation
         (template_equation (template_var 1, template_var 0))],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 1,
               template_app
                (template_app (template_hole 0, template_var 1),
                 template_var 0)),
             template_var 0)
           ))),
    ("Poincare_Lines.poincare_line",
     "?z ~= ?w ==> on_circline (poincare_line ?z ?w) ?z",
     template_implication
      ([template_negation
         (template_equation (template_var 1, template_var 0))],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 1,
               template_app
                (template_app (template_hole 0, template_var 1),
                 template_var 0)),
             template_var 1)
           ))),
    ("Poincare_Lines.is_poincare_line_iff",
     "is_poincare_line ?H =
      (circline_type ?H = - 1 & perpendicular ?H unit_circle)",
     template_implication
      ([template_predicate
         (template_app (template_hole 7, template_var 0))],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 6,
               template_app
                (template_app
                  (template_hole 5,
                   template_app (template_hole 4, template_var 0)),
                 template_app (template_hole 3, template_hole 2))),
             template_app
              (template_app (template_hole 1, template_var 0),
               template_hole 0))
           ))),
    ("Poincare_Lines_Ideal_Points.ideal_points_conjugate",
     "is_poincare_line ?H ==>
      ideal_points (conjugate_circline ?H) = conjugate ` ideal_points ?H",
     template_implication
      ([template_predicate
         (template_app (template_hole 5, template_var 0))],
       template_equation
        (template_app
          (template_hole 3, template_app (template_hole 2, template_var 0)),
         template_app
          (template_app (template_hole 1, template_hole 0),
           template_app (template_hole 3, template_var 0))))),
    ("Poincare_Lines_Ideal_Points.calc_ideal_points_on_circline",
     "is_poincare_line ?H ==>
      ALL z:calc_ideal_points ?H. z : circline_set ?H",
     template_implication
      ([template_predicate
         (template_app (template_hole 4, template_var 0))],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 3,
               template_app (template_hole 2, template_var 0)),
             t_empty)
           ))),
    ("Poincare_Lines.unit_disc_fix_preserve_poincare_collinear_iff",
     "unit_circle_fix ?M ==>
      poincare_collinear (moebius_pt ?M ` ?A) = poincare_collinear ?A",
     template_implication
      ([template_predicate
         (template_app (template_hole 4, template_var 1))],
       template_equation
        (template_app
          (template_hole 2,
           template_app
            (template_app
              (template_hole 1,
               template_app (template_hole 0, template_var 1)),
             template_var 0)),
         template_app (template_hole 2, template_var 0)))),
    ("Poincare_Lines.poincare_line_inversion",
     "?z ~= ?w ==> on_circline (poincare_line ?z ?w) (inversion ?w)",
     template_implication
      ([template_negation
         (template_equation (template_var 1, template_var 0))],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 2,
               template_app
                (template_app (template_hole 1, template_var 1),
                 template_var 0)),
             template_app (template_hole 0, template_var 0))
           ))),
    ("Poincare_Lines.poincare_line_inversion",
     "?z ~= ?w ==> on_circline (poincare_line ?z ?w) (inversion ?z)",
     template_implication
      ([template_negation
         (template_equation (template_var 1, template_var 0))],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 2,
               template_app
                (template_app (template_hole 1, template_var 1),
                 template_var 0)),
             template_app (template_hole 0, template_var 1))
           ))),
    ("Poincare_Lines.poincare_line_circline_set",
     "?z ~= ?w ==> ?w : circline_set (poincare_line ?z ?w)",
     template_implication
      ([template_negation
         (template_equation (template_var 1, template_var 0))],
       template_predicate
        (
           template_app
            (template_app (template_hole 2, template_var 0),
             template_app
              (template_hole 1,
               template_app
                (template_app (template_hole 0, template_var 1),
                 template_var 0)))
           ))),
    ("Poincare_Lines.poincare_line_circline_set",
     "?z ~= ?w ==> ?z : circline_set (poincare_line ?z ?w)",
     template_implication
      ([template_negation
         (template_equation (template_var 1, template_var 0))],
       template_predicate
        (
           template_app
            (template_app (template_hole 2, template_var 1),
             template_app
              (template_hole 1,
               template_app
                (template_app (template_hole 0, template_var 1),
                 template_var 0)))
           ))),
    ("Poincare_Lines.is_poincare_line_trough_zero_is_line",
     "[| is_poincare_line ?l; 0\<^sub>h : circline_set ?l |]
      ==> is_line ?l",
     template_implication
      ([template_predicate (template_app (template_hole 4, template_var 0)),
        template_predicate
         (
            template_app
             (template_app (template_hole 3, template_hole 2),
              template_app (template_hole 1, template_var 0))
            )],
       template_predicate
        (template_app (template_hole 0, template_var 0)))),
    ("Poincare_Lines.unit_circle_fix_preserve_is_poincare_line",
     "[| unit_circle_fix ?M; is_poincare_line ?H |]
      ==> is_poincare_line (moebius_circline ?M ?H)",
     template_implication
      ([template_predicate (template_app (template_hole 2, template_var 1)),
        template_predicate
         (template_app (template_hole 1, template_var 0))],
       template_predicate
        (
           template_app
            (template_hole 1,
             template_app
              (template_app (template_hole 0, template_var 1),
               template_var 0))
           ))),
    ("Poincare_Lines.mk_poincare_line_cmat_zero_iff",
     "(mk_poincare_line_cmat ?A ?B = mat_zero) = (?A = 0 & ?B = 0)",
     template_bimplication
      (template_equation
        (template_app
          (template_app (template_hole 6, template_var 1), template_var 0),
         template_hole 5),
       template_predicate
        (
           template_app
            (template_app
              (template_hole 4,
               template_app
                (template_app (template_hole 3, template_var 1),
                 template_hole 2)),
             template_app
              (template_app (template_hole 1, template_var 0),
               template_hole 0))
           ))),
    ("Poincare_Lines.poincare_line_type",
     "?z ~= ?w ==> circline_type (poincare_line ?z ?w) = - 1",
     template_implication
      ([template_negation
         (template_equation (template_var 1, template_var 0))],
       template_equation
        (template_app
          (template_hole 3,
           template_app
            (template_app (template_hole 2, template_var 1),
             template_var 0)),
         template_app (template_hole 1, template_hole 0)))),
    ("Poincare_Lines.unit_disc_fix_preserve_poincare_collinear",
     "[| unit_circle_fix ?M; poincare_collinear ?A |]
      ==> poincare_collinear (moebius_pt ?M ` ?A)",
     template_implication
      ([template_predicate (template_app (template_hole 3, template_var 1)),
        template_predicate
         (template_app (template_hole 2, template_var 0))],
       template_predicate
        (
           template_app
            (template_hole 2,
             template_app
              (template_app
                (template_hole 1,
                 template_app (template_hole 0, template_var 1)),
               template_var 0))
           ))),
    ("Poincare_Lines.ex_unit_disc_fix_is_poincare_line_to_x_axis",
     "is_poincare_line ?l ==>
      EX M. unit_disc_fix M & moebius_circline M ?l = x_axis",
     template_implication
      ([template_predicate
         (template_app (template_hole 6, template_var 0))],
       template_predicate (template_app (template_hole 5, t_empty)))),
    ("Poincare_Lines.is_poincare_line_trough_zero_trough_infty",
     "[| is_poincare_line ?l; 0\<^sub>h : circline_set ?l |]
      ==> \<infinity>\<^sub>h : circline_set ?l",
     template_implication
      ([template_predicate (template_app (template_hole 4, template_var 0)),
        template_predicate
         (
            template_app
             (template_app (template_hole 3, template_hole 2),
              template_app (template_hole 1, template_var 0))
            )],
       template_predicate
        (
           template_app
            (template_app (template_hole 3, template_hole 0),
             template_app (template_hole 1, template_var 0))
           ))),
    ("Poincare_Lines.is_poincare_line_not_trough_zero_is_circle",
     "[| is_poincare_line ?l; 0\<^sub>h ~: circline_set ?l |]
      ==> is_circle ?l",
     template_implication
      ([template_predicate (template_app (template_hole 5, template_var 0)),
        template_negation
         (
            template_predicate
             (
                template_app
                 (template_app (template_hole 3, template_hole 2),
                  template_app (template_hole 1, template_var 0))
                )
            )],
       template_negation
        (
           template_predicate
            (template_app (template_hole 0, template_var 0))
           ))),
    ("Poincare_Lines.mk_poincare_line_cmat_scale",
     "cor ?k *\<^sub>s\<^sub>m mk_poincare_line_cmat ?A ?B =
      mk_poincare_line_cmat (?k * ?A) (cor ?k * ?B)",
     template_equation
      (template_app
        (template_app
          (template_hole 4, template_app (template_hole 3, template_var 2)),
         template_app
          (template_app (template_hole 2, template_var 1), template_var 0)),
       template_app
        (template_app
          (template_hole 2,
           template_app
            (template_app (template_hole 1, template_var 2),
             template_var 1)),
         template_app
          (template_app
            (template_hole 0,
             template_app (template_hole 3, template_var 2)),
           template_var 0)))),
    ("Poincare_Lines.is_poincare_line_inverse_point",
     "[| is_poincare_line ?H; ?u : circline_set ?H |]
      ==> inversion ?u : circline_set ?H",
     template_implication
      ([template_predicate (template_app (template_hole 3, template_var 1)),
        template_predicate
         (
            template_app
             (template_app (template_hole 2, template_var 0),
              template_app (template_hole 1, template_var 1))
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 2,
               template_app (template_hole 0, template_var 0)),
             template_app (template_hole 1, template_var 1))
           ))),
    ("Poincare_Distance.poincare_distance_ge0",
     "[| ?u : unit_disc; ?v : unit_disc |]
      ==> 0 <= poincare_distance ?u ?v",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 4, template_var 1),
              template_hole 3)
            ),
        template_predicate
         (
            template_app
             (template_app (template_hole 4, template_var 0),
              template_hole 3)
            )],
       template_inequation
        (less_equals, template_hole 1,
         template_app
          (template_app (template_hole 0, template_var 1),
           template_var 0)))),
    ("Poincare_Lines_Ideal_Points.calc_ideal_points_different",
     "is_poincare_line ?H ==>
      EX i1:calc_ideal_points ?H. EX i2:calc_ideal_points ?H. i1 ~= i2",
     template_implication
      ([template_predicate
         (template_app (template_hole 4, template_var 0))],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 3,
               template_app (template_hole 2, template_var 0)),
             t_empty)
           ))),
    ("Poincare_Distance.poincare_distance_zero_opposite",
     "of_complex ?z : unit_disc ==>
      poincare_distance 0\<^sub>h (of_complex (- ?z)) =
      poincare_distance 0\<^sub>h (of_complex ?z)",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_hole 6,
                template_app (template_hole 5, template_var 0)),
              template_hole 4)
            )],
       template_equation
        (template_app
          (template_app (template_hole 2, template_hole 1),
           template_app
            (template_hole 5,
             template_app (template_hole 0, template_var 0))),
         template_app
          (template_app (template_hole 2, template_hole 1),
           template_app (template_hole 5, template_var 0))))),
    ("Poincare_Lines.poincare_line_cvec_cmat_AeqD",
     "poincare_line_cvec_cmat ?z ?w = (?A, ?B, ?C, ?D) ==> ?A = ?D",
     template_implication
      ([template_equation
         (template_app
           (template_app (template_hole 4, template_var 5), template_var 4),
          template_app
           (template_app (template_hole 3, template_var 3),
            template_app
             (template_app (template_hole 2, template_var 2),
              template_app
               (template_app (template_hole 1, template_var 1),
                template_var 0))))],
       template_equation (template_var 3, template_var 0))),
    ("Poincare_Lines.is_poincare_line_not_trough_zero_not_trough_infty",
     "[| is_poincare_line ?l; 0\<^sub>h ~: circline_set ?l |]
      ==> \<infinity>\<^sub>h ~: circline_set ?l",
     template_implication
      ([template_predicate (template_app (template_hole 5, template_var 0)),
        template_negation
         (
            template_predicate
             (
                template_app
                 (template_app (template_hole 3, template_hole 2),
                  template_app (template_hole 1, template_var 0))
                )
            )],
       template_negation
        (
           template_predicate
            (
               template_app
                (template_app (template_hole 3, template_hole 0),
                 template_app (template_hole 1, template_var 0))
               )
           ))),
    ("Poincare_Distance.distance_unique",
     "[| ?u : unit_disc; ?v : unit_disc |]
      ==> EX! d. poincare_distance_pred ?u ?v d",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 3, template_var 1),
              template_hole 2)
            ),
        template_predicate
         (
            template_app
             (template_app (template_hole 3, template_var 0),
              template_hole 2)
            )],
       template_predicate (template_app (template_hole 1, t_empty)))),
    ("Poincare_Distance.poincare_distance_satisfies_pred",
     "[| ?u : unit_disc; ?v : unit_disc |]
      ==> poincare_distance_pred ?u ?v (poincare_distance ?u ?v)",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 3, template_var 1),
              template_hole 2)
            ),
        template_predicate
         (
            template_app
             (template_app (template_hole 3, template_var 0),
              template_hole 2)
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_app (template_hole 1, template_var 1),
               template_var 0),
             template_app
              (template_app (template_hole 0, template_var 1),
               template_var 0))
           ))),
    ("Poincare_Lines.poincare_collinear_doubleton",
     "[| ?u : unit_disc; ?v : unit_disc |] ==> poincare_collinear {?u, ?v}",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 4, template_var 1),
              template_hole 3)
            ),
        template_predicate
         (
            template_app
             (template_app (template_hole 4, template_var 0),
              template_hole 3)
            )],
       template_predicate
        (
           template_app
            (template_hole 2,
             template_app
              (template_app (template_hole 1, template_var 1),
               template_app
                (template_app (template_hole 1, template_var 0),
                 template_hole 0)))
           ))),
    ("Poincare_Distance.poincare_distance_sym",
     "[| ?u : unit_disc; ?v : unit_disc |]
      ==> poincare_distance ?u ?v = poincare_distance ?v ?u",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 3, template_var 1),
              template_hole 2)
            ),
        template_predicate
         (
            template_app
             (template_app (template_hole 3, template_var 0),
              template_hole 2)
            )],
       template_equation
        (template_app
          (template_app (template_hole 0, template_var 1), template_var 0),
         template_app
          (template_app (template_hole 0, template_var 0),
           template_var 1)))),
    ("Poincare_Distance.poincare_distance_formula'_ge_1",
     "[| ?u : unit_disc; ?v : unit_disc |]
      ==> 1 <= poincare_distance_formula' (to_complex ?u) (to_complex ?v)",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 5, template_var 1),
              template_hole 4)
            ),
        template_predicate
         (
            template_app
             (template_app (template_hole 5, template_var 0),
              template_hole 4)
            )],
       template_inequation
        (less_equals, template_hole 2,
         template_app
          (template_app
            (template_hole 1,
             template_app (template_hole 0, template_var 1)),
           template_app (template_hole 0, template_var 0))))),
    ("Poincare_Lines_Ideal_Points.ideal_points_moebius_circline",
     "[| unit_circle_fix ?M; is_poincare_line ?H |]
      ==> ideal_points (moebius_circline ?M ?H) =
          moebius_pt ?M ` ideal_points ?H",
     template_implication
      ([template_predicate (template_app (template_hole 6, template_var 1)),
        template_predicate
         (template_app (template_hole 5, template_var 0))],
       template_equation
        (template_app
          (template_hole 3,
           template_app
            (template_app (template_hole 2, template_var 1),
             template_var 0)),
         template_app
          (template_app
            (template_hole 1,
             template_app (template_hole 0, template_var 1)),
           template_app (template_hole 3, template_var 0))))),
    ("Poincare_Lines.poincare_line_cvec_cmat_nonzero",
     "[| ?z ~= vec_zero; ?w ~= vec_zero |]
      ==> poincare_line_cvec_cmat ?z ?w ~= mat_zero",
     template_implication
      ([template_negation
         (template_equation (template_var 1, template_hole 3)),
        template_negation
         (template_equation (template_var 0, template_hole 3))],
       template_negation
        (
           template_equation
            (template_app
              (template_app (template_hole 1, template_var 1),
               template_var 0),
             template_hole 0)
           ))),
    ("Poincare_Lines_Ideal_Points.ideal_points_line_unique",
     "[| is_poincare_line ?H; ideal_points ?H = {?i1.0, ?i2.0} |]
      ==> ?H = poincare_line ?i1.0 ?i2.0",
     template_implication
      ([template_predicate (template_app (template_hole 6, template_var 2)),
        template_equation
         (template_app (template_hole 4, template_var 2),
          template_app
           (template_app (template_hole 3, template_var 1),
            template_app
             (template_app (template_hole 3, template_var 0),
              template_hole 2)))],
       template_equation
        (template_var 2,
         template_app
          (template_app (template_hole 0, template_var 1),
           template_var 0)))),
    ("Poincare_Distance.poincare_distance_eq_0_iff",
     "[| ?u : unit_disc; ?v : unit_disc |]
      ==> (poincare_distance ?u ?v = 0) = (?u = ?v)",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 6, template_var 1),
              template_hole 5)
            ),
        template_predicate
         (
            template_app
             (template_app (template_hole 6, template_var 0),
              template_hole 5)
            )],
       template_bimplication
        (template_equation
          (template_app
            (template_app (template_hole 2, template_var 1),
             template_var 0),
           template_hole 1),
         template_equation (template_var 1, template_var 0)))),
    ("Poincare_Distance.poincare_distance_formula",
     "[| ?u : unit_disc; ?v : unit_disc |]
      ==> poincare_distance ?u ?v =
          poincare_distance_formula (to_complex ?u) (to_complex ?v)",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 5, template_var 1),
              template_hole 4)
            ),
        template_predicate
         (
            template_app
             (template_app (template_hole 5, template_var 0),
              template_hole 4)
            )],
       template_equation
        (template_app
          (template_app (template_hole 2, template_var 1), template_var 0),
         template_app
          (template_app
            (template_hole 1,
             template_app (template_hole 0, template_var 1)),
           template_app (template_hole 0, template_var 0))))),
    ("Poincare_Distance.conjugate_preserve_poincare_distance",
     "[| ?u : unit_disc; ?v : unit_disc |]
      ==> poincare_distance (conjugate ?u) (conjugate ?v) =
          poincare_distance ?u ?v",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 4, template_var 1),
              template_hole 3)
            ),
        template_predicate
         (
            template_app
             (template_app (template_hole 4, template_var 0),
              template_hole 3)
            )],
       template_equation
        (template_app
          (template_app
            (template_hole 1,
             template_app (template_hole 0, template_var 1)),
           template_app (template_hole 0, template_var 0)),
         template_app
          (template_app (template_hole 1, template_var 1),
           template_var 0)))),
    ("Poincare_Lines.poincare_line_inversion_full",
     "[| ?u ~= ?v; on_circline (poincare_line ?u ?v) ?x |]
      ==> on_circline (poincare_line ?u ?v) (inversion ?x)",
     template_implication
      ([template_negation
         (template_equation (template_var 2, template_var 1)),
        template_predicate
         (
            template_app
             (template_app
               (template_hole 2,
                template_app
                 (template_app (template_hole 1, template_var 2),
                  template_var 1)),
              template_var 0)
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 2,
               template_app
                (template_app (template_hole 1, template_var 2),
                 template_var 1)),
             template_app (template_hole 0, template_var 0))
           ))),
    ("Poincare_Between.poincare_between_sandwich",
     "[| ?u : unit_disc; ?v : unit_disc; poincare_between ?u ?v ?u |]
      ==> ?u = ?v",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 3, template_var 1),
              template_hole 2)
            ),
        template_predicate
         (
            template_app
             (template_app (template_hole 3, template_var 0),
              template_hole 2)
            ),
        template_predicate
         (
            template_app
             (template_app
               (template_app (template_hole 1, template_var 1),
                template_var 0),
              template_var 1)
            )],
       template_equation (template_var 1, template_var 0))),
    ("Poincare_Lines.ex_poincare_line_two_points",
     "?z ~= ?w ==>
      EX l. is_poincare_line l & ?z : circline_set l & ?w : circline_set l",
     template_implication
      ([template_negation
         (template_equation (template_var 1, template_var 0))],
       template_predicate (template_app (template_hole 4, t_empty)))),
    ("Poincare_Distance.cosh_dist",
     "[| ?u : unit_disc; ?v : unit_disc |]
      ==> cosh_dist ?u ?v =
          poincare_distance_formula' (to_complex ?u) (to_complex ?v)",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 6, template_var 1),
              template_hole 5)
            ),
        template_predicate
         (
            template_app
             (template_app (template_hole 6, template_var 0),
              template_hole 5)
            )],
       template_equation
        (template_app
          (template_hole 3,
           template_app
            (template_app (template_hole 2, template_var 1),
             template_var 0)),
         template_app
          (template_app
            (template_hole 1,
             template_app (template_hole 0, template_var 1)),
           template_app (template_hole 0, template_var 0))))),
    ("Poincare_Lines.poincare_line_sym_general",
     "[| ?u ~= ?v; ?u ~= inversion ?v |]
      ==> poincare_line ?u ?v = poincare_line ?v ?u",
     template_implication
      ([template_negation
         (template_equation (template_var 1, template_var 0)),
        template_negation
         (
            template_equation
             (template_var 1,
              template_app (template_hole 2, template_var 0))
            )],
       template_equation
        (template_app
          (template_app (template_hole 0, template_var 1), template_var 0),
         template_app
          (template_app (template_hole 0, template_var 0),
           template_var 1)))),
    ("Poincare_Lines.poincare_line_poincare_collinear3_general",
     "[| ?a : circline_set (poincare_line ?a1.0 ?a2.0); ?a1.0 ~= ?a2.0 |]
      ==> poincare_collinear {?a, ?a1.0, ?a2.0}",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 7, template_var 2),
              template_app
               (template_hole 6,
                template_app
                 (template_app (template_hole 5, template_var 1),
                  template_var 0)))
            ),
        template_negation
         (template_equation (template_var 1, template_var 0))],
       template_predicate
        (
           template_app
            (template_hole 2,
             template_app
              (template_app (template_hole 1, template_var 2),
               template_app
                (template_app (template_hole 1, template_var 1),
                 template_app
                  (template_app (template_hole 1, template_var 0),
                   template_hole 0))))
           ))),
    ("Poincare_Circles.poincare_circle_in_disc",
     "[| 0 < ?r; ?z : unit_disc;
         (?ze, ?re) = poincare_circle_euclidean ?z ?r |]
      ==> 0 < ?re",
     template_implication
      ([template_inequation (less_than, template_hole 5, template_var 3),
        template_predicate
         (
            template_app
             (template_app (template_hole 4, template_var 2),
              template_hole 3)
            ),
        template_equation
         (template_app
           (template_app (template_hole 1, template_var 1), template_var 0),
          template_app
           (template_app (template_hole 0, template_var 2),
            template_var 3))],
       template_inequation (less_than, template_hole 5, template_var 0))),
    ("Poincare_Circles.poincare_circle_in_disc",
     "[| 0 < ?r; ?z : unit_disc;
         (?ze, ?re) = poincare_circle_euclidean ?z ?r |]
      ==> cmod ?ze < 1",
     template_implication
      ([template_inequation (less_than, template_hole 7, template_var 3),
        template_predicate
         (
            template_app
             (template_app (template_hole 6, template_var 2),
              template_hole 5)
            ),
        template_equation
         (template_app
           (template_app (template_hole 3, template_var 1), template_var 0),
          template_app
           (template_app (template_hole 2, template_var 2),
            template_var 3))],
       template_inequation
        (less_than, template_app (template_hole 1, template_var 1),
         template_hole 0))),
    ("Poincare_Lines.poincare_line_sym",
     "[| ?u : unit_disc; ?v : unit_disc; ?u ~= ?v |]
      ==> poincare_line ?u ?v = poincare_line ?v ?u",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 5, template_var 1),
              template_hole 4)
            ),
        template_predicate
         (
            template_app
             (template_app (template_hole 5, template_var 0),
              template_hole 4)
            ),
        template_negation
         (template_equation (template_var 1, template_var 0))],
       template_equation
        (template_app
          (template_app (template_hole 0, template_var 1), template_var 0),
         template_app
          (template_app (template_hole 0, template_var 0),
           template_var 1)))),
    ("Poincare_Lines.poincare_line_0_real_is_x_axis",
     "[| ?x : circline_set x_axis; ?x ~= 0\<^sub>h;
         ?x ~= \<infinity>\<^sub>h |]
      ==> poincare_line 0\<^sub>h ?x = x_axis",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 8, template_var 0),
              template_app (template_hole 7, template_hole 6))
            ),
        template_negation
         (template_equation (template_var 0, template_hole 3)),
        template_negation
         (template_equation (template_var 0, template_hole 2))],
       template_equation
        (template_app
          (template_app (template_hole 0, template_hole 3), template_var 0),
         template_hole 6))),
    ("Poincare_Lines.poincare_line_0_imag_is_y_axis",
     "[| ?y : circline_set y_axis; ?y ~= 0\<^sub>h;
         ?y ~= \<infinity>\<^sub>h |]
      ==> poincare_line 0\<^sub>h ?y = y_axis",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 8, template_var 0),
              template_app (template_hole 7, template_hole 6))
            ),
        template_negation
         (template_equation (template_var 0, template_hole 3)),
        template_negation
         (template_equation (template_var 0, template_hole 2))],
       template_equation
        (template_app
          (template_app (template_hole 0, template_hole 3), template_var 0),
         template_hole 6))),
    ("Poincare_Between.poincare_between_rev",
     "[| ?u : unit_disc; ?v : unit_disc; ?w : unit_disc |]
      ==> poincare_between ?u ?v ?w = poincare_between ?w ?v ?u",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 3, template_var 2),
              template_hole 2)
            ),
        template_predicate
         (
            template_app
             (template_app (template_hole 3, template_var 1),
              template_hole 2)
            ),
        template_predicate
         (
            template_app
             (template_app (template_hole 3, template_var 0),
              template_hole 2)
            )],
       template_equation
        (template_app
          (template_app
            (template_app (template_hole 0, template_var 2),
             template_var 1),
           template_var 0),
         template_app
          (template_app
            (template_app (template_hole 0, template_var 0),
             template_var 1),
           template_var 2)))),
    ("Poincare_Distance.unit_disc_fix_preserve_poincare_distance",
     "[| unit_disc_fix ?M; ?u : unit_disc; ?v : unit_disc |]
      ==> poincare_distance (moebius_pt ?M ?u) (moebius_pt ?M ?v) =
          poincare_distance ?u ?v",
     template_implication
      ([template_predicate (template_app (template_hole 5, template_var 2)),
        template_predicate
         (
            template_app
             (template_app (template_hole 4, template_var 1),
              template_hole 3)
            ),
        template_predicate
         (
            template_app
             (template_app (template_hole 4, template_var 0),
              template_hole 3)
            )],
       template_equation
        (template_app
          (template_app
            (template_hole 1,
             template_app
              (template_app (template_hole 0, template_var 2),
               template_var 1)),
           template_app
            (template_app (template_hole 0, template_var 2),
             template_var 0)),
         template_app
          (template_app (template_hole 1, template_var 1),
           template_var 0)))),
    ("Poincare_Lines.ex_poincare_line_points",
     "is_poincare_line ?H ==>
      EX u v.
         u : unit_disc & v : unit_disc & u ~= v & ?H = poincare_line u v",
     template_implication
      ([template_predicate
         (template_app (template_hole 8, template_var 0))],
       template_predicate (template_app (template_hole 7, t_empty)))),
    ("Poincare_Distance.poincare_distance_zero",
     "?x : unit_disc ==>
      poincare_distance 0\<^sub>h ?x =
      (let x' = to_complex ?x
       in \<bar>ln (Re (cor ((1 - cmod x') / (1 + cmod x'))))\<bar>)",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 15, template_var 0),
              template_hole 14)
            )],
       template_equation
        (template_app
          (template_app (template_hole 12, template_hole 11),
           template_var 0),
         template_app
          (template_app
            (template_hole 10,
             template_app (template_hole 9, template_var 0)),
           t_empty)))),
    ("Poincare_Circles.poincare_circle_is_euclidean_circle",
     "[| ?z : unit_disc; 0 < ?r |]
      ==> let (Ze, Re) = poincare_circle_euclidean ?z ?r
          in of_complex ` circle Ze Re = poincare_circle ?z ?r",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 11, template_var 1),
              template_hole 10)
            ),
        template_inequation (less_than, template_hole 8, template_var 0)],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 7,
               template_app
                (template_app (template_hole 6, template_var 1),
                 template_var 0)),
             template_app (template_hole 5, t_empty))
           ))),
    ("Poincare_Lines.wlog_line_x_axis",
     "[| is_poincare_line ?H; ?P x_axis;
         !!M. [| unit_disc_fix M; ?P (moebius_circline M ?H) |] ==> ?P ?H |]
      ==> ?P ?H",
     template_implication
      ([template_predicate (template_app (template_hole 4, template_var 1)),
        template_predicate (template_app (template_var 0, template_hole 3)),
        template_predicate (template_app (template_hole 2, t_empty))],
       template_predicate (template_app (template_var 0, template_var 1)))),
    ("Poincare_Distance.poincare_distance_triangle_inequality",
     "[| ?u : unit_disc; ?v : unit_disc; ?w : unit_disc |]
      ==> poincare_distance ?u ?w
          <= poincare_distance ?u ?v + poincare_distance ?v ?w",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 4, template_var 2),
              template_hole 3)
            ),
        template_predicate
         (
            template_app
             (template_app (template_hole 4, template_var 1),
              template_hole 3)
            ),
        template_predicate
         (
            template_app
             (template_app (template_hole 4, template_var 0),
              template_hole 3)
            )],
       template_inequation
        (less_equals,
         template_app
          (template_app (template_hole 1, template_var 2), template_var 0),
         template_app
          (template_app
            (template_hole 0,
             template_app
              (template_app (template_hole 1, template_var 2),
               template_var 1)),
           template_app
            (template_app (template_hole 1, template_var 1),
             template_var 0))))),
    ("Poincare_Lines.conjugate_preserve_poincare_line",
     "[| ?u : unit_disc; ?v : unit_disc; ?u ~= ?v |]
      ==> poincare_line (conjugate ?u) (conjugate ?v) =
          conjugate_circline (poincare_line ?u ?v)",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 7, template_var 1),
              template_hole 6)
            ),
        template_predicate
         (
            template_app
             (template_app (template_hole 7, template_var 0),
              template_hole 6)
            ),
        template_negation
         (template_equation (template_var 1, template_var 0))],
       template_equation
        (template_app
          (template_app
            (template_hole 2,
             template_app (template_hole 1, template_var 1)),
           template_app (template_hole 1, template_var 0)),
         template_app
          (template_hole 0,
           template_app
            (template_app (template_hole 2, template_var 1),
             template_var 0))))),
    ("Poincare_Lines.unit_disc_fix_preserve_poincare_collinear3",
     "unit_disc_fix ?M ==>
      poincare_collinear
       {moebius_pt ?M ?u, moebius_pt ?M ?v, moebius_pt ?M ?w} =
      poincare_collinear {?u, ?v, ?w}",
     template_implication
      ([template_predicate
         (template_app (template_hole 5, template_var 3))],
       template_equation
        (template_app
          (template_hole 3,
           template_app
            (template_app
              (template_hole 2,
               template_app
                (template_app (template_hole 1, template_var 3),
                 template_var 2)),
             template_app
              (template_app
                (template_hole 2,
                 template_app
                  (template_app (template_hole 1, template_var 3),
                   template_var 1)),
               template_app
                (template_app
                  (template_hole 2,
                   template_app
                    (template_app (template_hole 1, template_var 3),
                     template_var 0)),
                 template_hole 0)))),
         template_app
          (template_hole 3,
           template_app
            (template_app (template_hole 2, template_var 2),
             template_app
              (template_app (template_hole 2, template_var 1),
               template_app
                (template_app (template_hole 2, template_var 0),
                 template_hole 0))))))),
    ("Poincare_Distance.rotation_preserve_distance_formula",
     "[| ?u : unit_disc; ?v : unit_disc |]
      ==> poincare_distance_formula
           (to_complex (moebius_pt (moebius_rotation ?\<phi>) ?u))
           (to_complex (moebius_pt (moebius_rotation ?\<phi>) ?v)) =
          poincare_distance_formula (to_complex ?u) (to_complex ?v)",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 6, template_var 2),
              template_hole 5)
            ),
        template_predicate
         (
            template_app
             (template_app (template_hole 6, template_var 1),
              template_hole 5)
            )],
       template_equation
        (template_app
          (template_app
            (template_hole 3,
             template_app
              (template_hole 2,
               template_app
                (template_app
                  (template_hole 1,
                   template_app (template_hole 0, template_var 0)),
                 template_var 2))),
           template_app
            (template_hole 2,
             template_app
              (template_app
                (template_hole 1,
                 template_app (template_hole 0, template_var 0)),
               template_var 1))),
         template_app
          (template_app
            (template_hole 3,
             template_app (template_hole 2, template_var 2)),
           template_app (template_hole 2, template_var 1))))),
    ("Poincare_Lines.ex1_poincare_line_general",
     "[| ?u ~= ?v; ?u ~= inversion ?v |]
      ==> EX! l.
             is_poincare_line l &
             ?u : circline_set l & ?v : circline_set l",
     template_implication
      ([template_negation
         (template_equation (template_var 1, template_var 0)),
        template_negation
         (
            template_equation
             (template_var 1,
              template_app (template_hole 5, template_var 0))
            )],
       template_predicate (template_app (template_hole 4, t_empty)))),
    ("Poincare_Between.conjugate_preserve_poincare_between",
     "[| ?u : unit_disc; ?v : unit_disc; ?w : unit_disc |]
      ==> poincare_between (conjugate ?u) (conjugate ?v) (conjugate ?w) =
          poincare_between ?u ?v ?w",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 4, template_var 2),
              template_hole 3)
            ),
        template_predicate
         (
            template_app
             (template_app (template_hole 4, template_var 1),
              template_hole 3)
            ),
        template_predicate
         (
            template_app
             (template_app (template_hole 4, template_var 0),
              template_hole 3)
            )],
       template_equation
        (template_app
          (template_app
            (template_app
              (template_hole 1,
               template_app (template_hole 0, template_var 2)),
             template_app (template_hole 0, template_var 1)),
           template_app (template_hole 0, template_var 0)),
         template_app
          (template_app
            (template_app (template_hole 1, template_var 2),
             template_var 1),
           template_var 0)))),
    ("Poincare_Distance.unique_x_axis_poincare_distance_positive",
     "0 <= ?d ==>
      EX! z.
         is_real z &
         0 <= Re z &
         Re z < 1 & poincare_distance 0\<^sub>h (of_complex z) = ?d",
     template_implication
      ([template_inequation
         (less_equals, template_hole 10, template_var 0)],
       template_predicate (template_app (template_hole 9, t_empty)))),
    ("Poincare_Lines_Ideal_Points.obtain_ideal_points",
     "[| is_poincare_line ?H;
         !!i1 i2. [| i1 ~= i2; ideal_points ?H = {i1, i2} |] ==> ?thesis |]
      ==> ?thesis",
     template_implication
      ([template_predicate (template_app (template_hole 7, template_var 1)),
        template_predicate (template_app (template_hole 6, t_empty))],
       template_predicate (template_var 0))),
    ("Poincare_Lines_Ideal_Points.ideal_points_proportional",
     "[| is_poincare_line ?H; ideal_points ?H = {?i1.0, ?i2.0};
         to_complex ?i1.0 = cor ?k * to_complex ?i2.0 |]
      ==> 0\<^sub>h : circline_set ?H",
     template_implication
      ([template_predicate
         (template_app (template_hole 11, template_var 3)),
        template_equation
         (template_app (template_hole 9, template_var 3),
          template_app
           (template_app (template_hole 8, template_var 2),
            template_app
             (template_app (template_hole 8, template_var 1),
              template_hole 7))),
        template_equation
         (template_app (template_hole 5, template_var 2),
          template_app
           (template_app
             (template_hole 4,
              template_app (template_hole 3, template_var 0)),
            template_app (template_hole 5, template_var 1)))],
       template_predicate
        (
           template_app
            (template_app (template_hole 2, template_hole 1),
             template_app (template_hole 0, template_var 3))
           ))),
    ("Poincare_Circles.poincare_circle_in_disc",
     "[| 0 < ?r; ?z : unit_disc;
         (?ze, ?re) = poincare_circle_euclidean ?z ?r |]
      ==> ALL x:circle ?ze ?re. cmod x < 1",
     template_implication
      ([template_inequation (less_than, template_hole 9, template_var 3),
        template_predicate
         (
            template_app
             (template_app (template_hole 8, template_var 2),
              template_hole 7)
            ),
        template_equation
         (template_app
           (template_app (template_hole 5, template_var 1), template_var 0),
          template_app
           (template_app (template_hole 4, template_var 2),
            template_var 3))],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 3,
               template_app
                (template_app (template_hole 2, template_var 1),
                 template_var 0)),
             t_empty)
           ))),
    ("Poincare_Lines.ex_is_poincare_line_points",
     "is_poincare_line ?H ==>
      EX u v.
         u : unit_disc &
         v : unit_disc & u ~= v & {u, v} <= circline_set ?H",
     template_implication
      ([template_predicate
         (template_app (template_hole 10, template_var 0))],
       template_predicate (template_app (template_hole 9, t_empty)))),
    ("Poincare_Distance.unique_x_axis_poincare_distance_negative",
     "0 <= ?d ==>
      EX! z.
         is_real z &
         Re z <= 0 &
         - 1 < Re z & poincare_distance 0\<^sub>h (of_complex z) = ?d",
     template_implication
      ([template_inequation
         (less_equals, template_hole 11, template_var 0)],
       template_predicate (template_app (template_hole 10, t_empty)))),
    ("Poincare_Distance.poincare_distance_zero_x_axis",
     "[| ?x : unit_disc; ?x : circline_set x_axis |]
      ==> poincare_distance 0\<^sub>h ?x =
          (let x' = to_complex ?x
           in \<bar>ln (Re ((1 - x') / (1 + x')))\<bar>)",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 15, template_var 0),
              template_hole 14)
            ),
        template_predicate
         (
            template_app
             (template_app (template_hole 15, template_var 0),
              template_app (template_hole 13, template_hole 12))
            )],
       template_equation
        (template_app
          (template_app (template_hole 10, template_hole 9),
           template_var 0),
         template_app
          (template_app
            (template_hole 8,
             template_app (template_hole 7, template_var 0)),
           t_empty)))),
    ("Poincare_Lines_Ideal_Points.calc_ideal_points_cvec_different",
     "[| (cmod ?A)\<^sup>2 < (cmod ?B)\<^sup>2; is_real ?A |]
      ==> ~ calc_ideal_point1_cvec ?A ?B \<approx>\<^sub>v
            calc_ideal_point2_cvec ?A ?B",
     template_implication
      ([template_inequation
         (less_than,
          template_app
           (template_app
             (template_hole 11,
              template_app (template_hole 10, template_var 1)),
            template_app
             (template_hole 9,
              template_app (template_hole 8, template_hole 7))),
          template_app
           (template_app
             (template_hole 11,
              template_app (template_hole 10, template_var 0)),
            template_app
             (template_hole 9,
              template_app (template_hole 8, template_hole 7)))),
        template_equation
         (template_app (template_hole 5, template_var 1), template_hole 4)],
       template_negation
        (
           template_predicate
            (
               template_app
                (template_app
                  (template_hole 2,
                   template_app
                    (template_app (template_hole 1, template_var 1),
                     template_var 0)),
                 template_app
                  (template_app (template_hole 0, template_var 1),
                   template_var 0))
               )
           ))),
    ("Poincare_Distance.unit_disc_fix_preserve_distance_formula",
     "[| unit_disc_fix ?M; ?u : unit_disc; ?v : unit_disc |]
      ==> poincare_distance_formula (to_complex (moebius_pt ?M ?u))
           (to_complex (moebius_pt ?M ?v)) =
          poincare_distance_formula (to_complex ?u) (to_complex ?v)",
     template_implication
      ([template_predicate (template_app (template_hole 6, template_var 2)),
        template_predicate
         (
            template_app
             (template_app (template_hole 5, template_var 1),
              template_hole 4)
            ),
        template_predicate
         (
            template_app
             (template_app (template_hole 5, template_var 0),
              template_hole 4)
            )],
       template_equation
        (template_app
          (template_app
            (template_hole 2,
             template_app
              (template_hole 1,
               template_app
                (template_app (template_hole 0, template_var 2),
                 template_var 1))),
           template_app
            (template_hole 1,
             template_app
              (template_app (template_hole 0, template_var 2),
               template_var 0))),
         template_app
          (template_app
            (template_hole 2,
             template_app (template_hole 1, template_var 1)),
           template_app (template_hole 1, template_var 0))))),
    ("Poincare_Lines.poincare_collinear3_poincare_line_general",
     "[| poincare_collinear {?a, ?a1.0, ?a2.0}; ?a1.0 ~= ?a2.0;
         ?a1.0 ~= inversion ?a2.0 |]
      ==> ?a : circline_set (poincare_line ?a1.0 ?a2.0)",
     template_implication
      ([template_predicate
         (
            template_app
             (template_hole 8,
              template_app
               (template_app (template_hole 7, template_var 2),
                template_app
                 (template_app (template_hole 7, template_var 1),
                  template_app
                   (template_app (template_hole 7, template_var 0),
                    template_hole 6))))
            ),
        template_negation
         (template_equation (template_var 1, template_var 0)),
        template_negation
         (
            template_equation
             (template_var 1,
              template_app (template_hole 3, template_var 0))
            )],
       template_predicate
        (
           template_app
            (template_app (template_hole 2, template_var 2),
             template_app
              (template_hole 1,
               template_app
                (template_app (template_hole 0, template_var 1),
                 template_var 0)))
           ))),
    ("Poincare_Between.poincare_between_poincare_collinear",
     "[| ?u : unit_disc; ?v : unit_disc; ?w : unit_disc;
         poincare_between ?u ?v ?w |]
      ==> poincare_collinear {?u, ?v, ?w}",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 5, template_var 2),
              template_hole 4)
            ),
        template_predicate
         (
            template_app
             (template_app (template_hole 5, template_var 1),
              template_hole 4)
            ),
        template_predicate
         (
            template_app
             (template_app (template_hole 5, template_var 0),
              template_hole 4)
            ),
        template_predicate
         (
            template_app
             (template_app
               (template_app (template_hole 3, template_var 2),
                template_var 1),
              template_var 0)
            )],
       template_predicate
        (
           template_app
            (template_hole 2,
             template_app
              (template_app (template_hole 1, template_var 2),
               template_app
                (template_app (template_hole 1, template_var 1),
                 template_app
                  (template_app (template_hole 1, template_var 0),
                   template_hole 0))))
           ))),
    ("Poincare_Lines.ex1_poincare_line",
     "[| ?u ~= ?v; ?u : unit_disc; ?v : unit_disc |]
      ==> EX! l.
             is_poincare_line l &
             ?u : circline_set l & ?v : circline_set l",
     template_implication
      ([template_negation
         (template_equation (template_var 1, template_var 0)),
        template_predicate
         (
            template_app
             (template_app (template_hole 5, template_var 1),
              template_hole 4)
            ),
        template_predicate
         (
            template_app
             (template_app (template_hole 5, template_var 0),
              template_hole 4)
            )],
       template_predicate (template_app (template_hole 3, t_empty)))),
    ("Poincare_Between.poincare_between_sum_distances",
     "[| ?u : unit_disc; ?v : unit_disc; ?w : unit_disc |]
      ==> poincare_between ?u ?v ?w =
          (poincare_distance ?u ?v + poincare_distance ?v ?w =
           poincare_distance ?u ?w)",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 6, template_var 2),
              template_hole 5)
            ),
        template_predicate
         (
            template_app
             (template_app (template_hole 6, template_var 1),
              template_hole 5)
            ),
        template_predicate
         (
            template_app
             (template_app (template_hole 6, template_var 0),
              template_hole 5)
            )],
       template_implication
        ([template_predicate
           (
              template_app
               (template_app
                 (template_app (template_hole 3, template_var 2),
                  template_var 1),
                template_var 0)
              )],
         template_equation
          (template_app
            (template_app
              (template_hole 1,
               template_app
                (template_app (template_hole 0, template_var 2),
                 template_var 1)),
             template_app
              (template_app (template_hole 0, template_var 1),
               template_var 0)),
           template_app
            (template_app (template_hole 0, template_var 2),
             template_var 0))))),
    ("Poincare_Lines_Ideal_Points.ideal_points_different",
     "[| ?u : unit_disc; ?v : unit_disc; ?u ~= ?v;
         ideal_points (poincare_line ?u ?v) = {?i1.0, ?i2.0} |]
      ==> ?i1.0 ~= ?i2.0",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 8, template_var 3),
              template_hole 7)
            ),
        template_predicate
         (
            template_app
             (template_app (template_hole 8, template_var 2),
              template_hole 7)
            ),
        template_negation
         (template_equation (template_var 3, template_var 2)),
        template_equation
         (template_app
           (template_hole 3,
            template_app
             (template_app (template_hole 2, template_var 3),
              template_var 2)),
          template_app
           (template_app (template_hole 1, template_var 1),
            template_app
             (template_app (template_hole 1, template_var 0),
              template_hole 0)))],
       template_negation
        (template_equation (template_var 1, template_var 0)))),
    ("Poincare_Lines_Ideal_Points.ideal_points_different",
     "[| ?u : unit_disc; ?v : unit_disc; ?u ~= ?v;
         ideal_points (poincare_line ?u ?v) = {?i1.0, ?i2.0} |]
      ==> ?u ~= ?i1.0",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 8, template_var 3),
              template_hole 7)
            ),
        template_predicate
         (
            template_app
             (template_app (template_hole 8, template_var 2),
              template_hole 7)
            ),
        template_negation
         (template_equation (template_var 3, template_var 2)),
        template_equation
         (template_app
           (template_hole 3,
            template_app
             (template_app (template_hole 2, template_var 3),
              template_var 2)),
          template_app
           (template_app (template_hole 1, template_var 1),
            template_app
             (template_app (template_hole 1, template_var 0),
              template_hole 0)))],
       template_negation
        (template_equation (template_var 3, template_var 1)))),
    ("Poincare_Lines_Ideal_Points.ideal_points_different",
     "[| ?u : unit_disc; ?v : unit_disc; ?u ~= ?v;
         ideal_points (poincare_line ?u ?v) = {?i1.0, ?i2.0} |]
      ==> ?u ~= ?i2.0",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 8, template_var 3),
              template_hole 7)
            ),
        template_predicate
         (
            template_app
             (template_app (template_hole 8, template_var 2),
              template_hole 7)
            ),
        template_negation
         (template_equation (template_var 3, template_var 2)),
        template_equation
         (template_app
           (template_hole 3,
            template_app
             (template_app (template_hole 2, template_var 3),
              template_var 2)),
          template_app
           (template_app (template_hole 1, template_var 1),
            template_app
             (template_app (template_hole 1, template_var 0),
              template_hole 0)))],
       template_negation
        (template_equation (template_var 3, template_var 0)))),
    ("Poincare_Lines_Ideal_Points.ideal_points_different",
     "[| ?u : unit_disc; ?v : unit_disc; ?u ~= ?v;
         ideal_points (poincare_line ?u ?v) = {?i1.0, ?i2.0} |]
      ==> ?v ~= ?i1.0",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 8, template_var 3),
              template_hole 7)
            ),
        template_predicate
         (
            template_app
             (template_app (template_hole 8, template_var 2),
              template_hole 7)
            ),
        template_negation
         (template_equation (template_var 3, template_var 2)),
        template_equation
         (template_app
           (template_hole 3,
            template_app
             (template_app (template_hole 2, template_var 3),
              template_var 2)),
          template_app
           (template_app (template_hole 1, template_var 1),
            template_app
             (template_app (template_hole 1, template_var 0),
              template_hole 0)))],
       template_negation
        (template_equation (template_var 2, template_var 1)))),
    ("Poincare_Lines_Ideal_Points.ideal_points_different",
     "[| ?u : unit_disc; ?v : unit_disc; ?u ~= ?v;
         ideal_points (poincare_line ?u ?v) = {?i1.0, ?i2.0} |]
      ==> ?v ~= ?i2.0",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 8, template_var 3),
              template_hole 7)
            ),
        template_predicate
         (
            template_app
             (template_app (template_hole 8, template_var 2),
              template_hole 7)
            ),
        template_negation
         (template_equation (template_var 3, template_var 2)),
        template_equation
         (template_app
           (template_hole 3,
            template_app
             (template_app (template_hole 2, template_var 3),
              template_var 2)),
          template_app
           (template_app (template_hole 1, template_var 1),
            template_app
             (template_app (template_hole 1, template_var 0),
              template_hole 0)))],
       template_negation
        (template_equation (template_var 2, template_var 0)))),
    ("Poincare_Distance.blaschke_preserve_distance_formula",
     "[| of_complex ?k : unit_disc; ?u : unit_disc; ?v : unit_disc |]
      ==> poincare_distance_formula
           (to_complex (moebius_pt (blaschke ?k) ?u))
           (to_complex (moebius_pt (blaschke ?k) ?v)) =
          poincare_distance_formula (to_complex ?u) (to_complex ?v)",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_hole 7,
                template_app (template_hole 6, template_var 2)),
              template_hole 5)
            ),
        template_predicate
         (
            template_app
             (template_app (template_hole 7, template_var 1),
              template_hole 5)
            ),
        template_predicate
         (
            template_app
             (template_app (template_hole 7, template_var 0),
              template_hole 5)
            )],
       template_equation
        (template_app
          (template_app
            (template_hole 3,
             template_app
              (template_hole 2,
               template_app
                (template_app
                  (template_hole 1,
                   template_app (template_hole 0, template_var 2)),
                 template_var 1))),
           template_app
            (template_hole 2,
             template_app
              (template_app
                (template_hole 1,
                 template_app (template_hole 0, template_var 2)),
               template_var 0))),
         template_app
          (template_app
            (template_hole 3,
             template_app (template_hole 2, template_var 1)),
           template_app (template_hole 2, template_var 0))))),
    ("Poincare_Lines.unit_disc_fix_preserve_poincare_line",
     "[| unit_disc_fix ?M; ?u : unit_disc; ?v : unit_disc; ?u ~= ?v |]
      ==> poincare_line (moebius_pt ?M ?u) (moebius_pt ?M ?v) =
          moebius_circline ?M (poincare_line ?u ?v)",
     template_implication
      ([template_predicate (template_app (template_hole 8, template_var 2)),
        template_predicate
         (
            template_app
             (template_app (template_hole 7, template_var 1),
              template_hole 6)
            ),
        template_predicate
         (
            template_app
             (template_app (template_hole 7, template_var 0),
              template_hole 6)
            ),
        template_negation
         (template_equation (template_var 1, template_var 0))],
       template_equation
        (template_app
          (template_app
            (template_hole 2,
             template_app
              (template_app (template_hole 1, template_var 2),
               template_var 1)),
           template_app
            (template_app (template_hole 1, template_var 2),
             template_var 0)),
         template_app
          (template_app (template_hole 0, template_var 2),
           template_app
            (template_app (template_hole 2, template_var 1),
             template_var 0))))),
    ("Poincare_Lines.poincare_line_x_axis",
     "[| ?x : unit_disc; ?y : unit_disc; ?x : circline_set x_axis;
         ?y : circline_set x_axis; ?x ~= ?y |]
      ==> poincare_line ?x ?y = x_axis",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 7, template_var 1),
              template_hole 6)
            ),
        template_predicate
         (
            template_app
             (template_app (template_hole 7, template_var 0),
              template_hole 6)
            ),
        template_predicate
         (
            template_app
             (template_app (template_hole 7, template_var 1),
              template_app (template_hole 5, template_hole 4))
            ),
        template_predicate
         (
            template_app
             (template_app (template_hole 7, template_var 0),
              template_app (template_hole 5, template_hole 4))
            ),
        template_negation
         (template_equation (template_var 1, template_var 0))],
       template_equation
        (template_app
          (template_app (template_hole 0, template_var 1), template_var 0),
         template_hole 4))),
    ("Poincare_Between.poincare_between_poincare_line_uvz",
     "[| ?u ~= ?v; ?u : unit_disc; ?v : unit_disc; ?z : unit_disc;
         poincare_between ?u ?v ?z |]
      ==> ?z : circline_set (poincare_line ?u ?v)",
     template_implication
      ([template_negation
         (template_equation (template_var 2, template_var 1)),
        template_predicate
         (
            template_app
             (template_app (template_hole 4, template_var 2),
              template_hole 3)
            ),
        template_predicate
         (
            template_app
             (template_app (template_hole 4, template_var 1),
              template_hole 3)
            ),
        template_predicate
         (
            template_app
             (template_app (template_hole 4, template_var 0),
              template_hole 3)
            ),
        template_predicate
         (
            template_app
             (template_app
               (template_app (template_hole 2, template_var 2),
                template_var 1),
              template_var 0)
            )],
       template_predicate
        (
           template_app
            (template_app (template_hole 4, template_var 0),
             template_app
              (template_hole 1,
               template_app
                (template_app (template_hole 0, template_var 2),
                 template_var 1)))
           ))),
    ("Poincare_Between.poincare_between_poincare_line_uzv",
     "[| ?u ~= ?v; ?u : unit_disc; ?v : unit_disc; ?z : unit_disc;
         poincare_between ?u ?z ?v |]
      ==> ?z : circline_set (poincare_line ?u ?v)",
     template_implication
      ([template_negation
         (template_equation (template_var 2, template_var 1)),
        template_predicate
         (
            template_app
             (template_app (template_hole 4, template_var 2),
              template_hole 3)
            ),
        template_predicate
         (
            template_app
             (template_app (template_hole 4, template_var 1),
              template_hole 3)
            ),
        template_predicate
         (
            template_app
             (template_app (template_hole 4, template_var 0),
              template_hole 3)
            ),
        template_predicate
         (
            template_app
             (template_app
               (template_app (template_hole 2, template_var 2),
                template_var 0),
              template_var 1)
            )],
       template_predicate
        (
           template_app
            (template_app (template_hole 4, template_var 0),
             template_app
              (template_hole 1,
               template_app
                (template_app (template_hole 0, template_var 2),
                 template_var 1)))
           ))),
    ("Poincare_Between.unit_disc_fix_moebius_preserve_poincare_between",
     "[| unit_disc_fix ?M; ?u : unit_disc; ?v : unit_disc; ?w : unit_disc |]
      ==> poincare_between (moebius_pt ?M ?u) (moebius_pt ?M ?v)
           (moebius_pt ?M ?w) =
          poincare_between ?u ?v ?w",
     template_implication
      ([template_predicate (template_app (template_hole 5, template_var 3)),
        template_predicate
         (
            template_app
             (template_app (template_hole 4, template_var 2),
              template_hole 3)
            ),
        template_predicate
         (
            template_app
             (template_app (template_hole 4, template_var 1),
              template_hole 3)
            ),
        template_predicate
         (
            template_app
             (template_app (template_hole 4, template_var 0),
              template_hole 3)
            )],
       template_equation
        (template_app
          (template_app
            (template_app
              (template_hole 1,
               template_app
                (template_app (template_hole 0, template_var 3),
                 template_var 2)),
             template_app
              (template_app (template_hole 0, template_var 3),
               template_var 1)),
           template_app
            (template_app (template_hole 0, template_var 3),
             template_var 0)),
         template_app
          (template_app
            (template_app (template_hole 1, template_var 2),
             template_var 1),
           template_var 0)))),
    ("Poincare_Lines.is_poincare_line_0_real_is_x_axis",
     "[| is_poincare_line ?l; 0\<^sub>h : circline_set ?l;
         ?x : circline_set ?l Int circline_set x_axis; ?x ~= 0\<^sub>h;
         ?x ~= \<infinity>\<^sub>h |]
      ==> ?l = x_axis",
     template_implication
      ([template_predicate (template_app (template_hole 9, template_var 1)),
        template_predicate
         (
            template_app
             (template_app (template_hole 8, template_hole 7),
              template_app (template_hole 6, template_var 1))
            ),
        template_predicate
         (
            template_app
             (template_app (template_hole 8, template_var 0),
              template_app
               (template_app
                 (template_hole 5,
                  template_app (template_hole 6, template_var 1)),
                template_app (template_hole 6, template_hole 4)))
            ),
        template_negation
         (template_equation (template_var 0, template_hole 7)),
        template_negation
         (template_equation (template_var 0, template_hole 1))],
       template_equation (template_var 1, template_hole 4))),
    ("Poincare_Lines.is_poincare_line_0_imag_is_y_axis",
     "[| is_poincare_line ?l; 0\<^sub>h : circline_set ?l;
         ?y : circline_set ?l Int circline_set y_axis; ?y ~= 0\<^sub>h;
         ?y ~= \<infinity>\<^sub>h |]
      ==> ?l = y_axis",
     template_implication
      ([template_predicate (template_app (template_hole 9, template_var 1)),
        template_predicate
         (
            template_app
             (template_app (template_hole 8, template_hole 7),
              template_app (template_hole 6, template_var 1))
            ),
        template_predicate
         (
            template_app
             (template_app (template_hole 8, template_var 0),
              template_app
               (template_app
                 (template_hole 5,
                  template_app (template_hole 6, template_var 1)),
                template_app (template_hole 6, template_hole 4)))
            ),
        template_negation
         (template_equation (template_var 0, template_hole 7)),
        template_negation
         (template_equation (template_var 0, template_hole 1))],
       template_equation (template_var 1, template_hole 4))),
    ("Poincare_Lines.unique_poincare_line_general",
     "[| ?u ~= ?v; ?u ~= inversion ?v; ?u : circline_set ?l;
         ?v : circline_set ?l; is_poincare_line ?l |]
      ==> ?l = poincare_line ?u ?v",
     template_implication
      ([template_negation
         (template_equation (template_var 2, template_var 1)),
        template_negation
         (
            template_equation
             (template_var 2,
              template_app (template_hole 5, template_var 1))
            ),
        template_predicate
         (
            template_app
             (template_app (template_hole 4, template_var 2),
              template_app (template_hole 3, template_var 0))
            ),
        template_predicate
         (
            template_app
             (template_app (template_hole 4, template_var 1),
              template_app (template_hole 3, template_var 0))
            ),
        template_predicate
         (template_app (template_hole 2, template_var 0))],
       template_equation
        (template_var 0,
         template_app
          (template_app (template_hole 0, template_var 2),
           template_var 1)))),
    ("Poincare_Between.poincare_between_transitivity",
     "[| ?a : unit_disc; ?x : unit_disc; ?b : unit_disc; ?y : unit_disc;
         poincare_between ?a ?x ?b; poincare_between ?a ?b ?y |]
      ==> poincare_between ?x ?b ?y",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 2, template_var 3),
              template_hole 1)
            ),
        template_predicate
         (
            template_app
             (template_app (template_hole 2, template_var 2),
              template_hole 1)
            ),
        template_predicate
         (
            template_app
             (template_app (template_hole 2, template_var 1),
              template_hole 1)
            ),
        template_predicate
         (
            template_app
             (template_app (template_hole 2, template_var 0),
              template_hole 1)
            ),
        template_predicate
         (
            template_app
             (template_app
               (template_app (template_hole 0, template_var 3),
                template_var 2),
              template_var 1)
            ),
        template_predicate
         (
            template_app
             (template_app
               (template_app (template_hole 0, template_var 3),
                template_var 1),
              template_var 0)
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_app (template_hole 0, template_var 2),
               template_var 1),
             template_var 0)
           ))),
    ("Poincare_Between.poincare_between_x_axis_u0v",
     "[| is_real ?u'; ?u' ~= 0; ?v' ~= 0 |]
      ==> poincare_between (of_complex ?u') 0\<^sub>h (of_complex ?v') =
          (is_real ?v' & Re ?u' * Re ?v' < 0)",
     template_implication
      ([template_equation
         (template_app (template_hole 12, template_var 1),
          template_hole 11),
        template_negation
         (template_equation (template_var 1, template_hole 8)),
        template_negation
         (template_equation (template_var 0, template_hole 8))],
       template_implication
        ([template_predicate
           (
              template_app
               (template_app
                 (template_app
                   (template_hole 6,
                    template_app (template_hole 5, template_var 1)),
                  template_hole 4),
                template_app (template_hole 5, template_var 0))
              )],
         template_predicate
          (
             template_app
              (template_app
                (template_hole 3,
                 template_app
                  (template_app
                    (template_hole 13,
                     template_app (template_hole 12, template_var 0)),
                   template_hole 11)),
               template_app
                (template_app
                  (template_hole 2,
                   template_app
                    (template_app
                      (template_hole 1,
                       template_app (template_hole 0, template_var 1)),
                     template_app (template_hole 0, template_var 0))),
                 template_hole 11))
             )))),
    ("Poincare_Distance.poincare_distance_I",
     "[| ?u : unit_disc; ?v : unit_disc; ?u ~= ?v;
         ideal_points (poincare_line ?u ?v) = {?i1.0, ?i2.0} |]
      ==> poincare_distance ?u ?v =
          calc_poincare_distance ?u ?i1.0 ?v ?i2.0",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 11, template_var 3),
              template_hole 10)
            ),
        template_predicate
         (
            template_app
             (template_app (template_hole 11, template_var 2),
              template_hole 10)
            ),
        template_negation
         (template_equation (template_var 3, template_var 2)),
        template_equation
         (template_app
           (template_hole 6,
            template_app
             (template_app (template_hole 5, template_var 3),
              template_var 2)),
          template_app
           (template_app (template_hole 4, template_var 1),
            template_app
             (template_app (template_hole 4, template_var 0),
              template_hole 3)))],
       template_equation
        (template_app
          (template_app (template_hole 1, template_var 3), template_var 2),
         template_app
          (template_app
            (template_app
              (template_app (template_hole 0, template_var 3),
               template_var 1),
             template_var 2),
           template_var 0)))),
    ("Poincare_Lines.unique_is_poincare_line_general",
     "[| ?u ~= ?v; ?u ~= inversion ?v; is_poincare_line ?l1.0;
         is_poincare_line ?l2.0;
         {?u, ?v} <= circline_set ?l1.0 Int circline_set ?l2.0 |]
      ==> ?l1.0 = ?l2.0",
     template_implication
      ([template_negation
         (template_equation (template_var 3, template_var 2)),
        template_negation
         (
            template_equation
             (template_var 3,
              template_app (template_hole 7, template_var 2))
            ),
        template_predicate (template_app (template_hole 6, template_var 1)),
        template_predicate (template_app (template_hole 6, template_var 0)),
        template_inequation
         (less_equals,
          template_app
           (template_app (template_hole 4, template_var 3),
            template_app
             (template_app (template_hole 4, template_var 2),
              template_hole 3)),
          template_app
           (template_app
             (template_hole 2,
              template_app (template_hole 1, template_var 1)),
            template_app (template_hole 1, template_var 0)))],
       template_equation (template_var 1, template_var 0))),
    ("Poincare_Lines.unique_poincare_line",
     "[| ?u ~= ?v; ?u : unit_disc; ?v : unit_disc; ?u : circline_set ?l;
         ?v : circline_set ?l; is_poincare_line ?l |]
      ==> ?l = poincare_line ?u ?v",
     template_implication
      ([template_negation
         (template_equation (template_var 2, template_var 1)),
        template_predicate
         (
            template_app
             (template_app (template_hole 5, template_var 2),
              template_hole 4)
            ),
        template_predicate
         (
            template_app
             (template_app (template_hole 5, template_var 1),
              template_hole 4)
            ),
        template_predicate
         (
            template_app
             (template_app (template_hole 5, template_var 2),
              template_app (template_hole 3, template_var 0))
            ),
        template_predicate
         (
            template_app
             (template_app (template_hole 5, template_var 1),
              template_app (template_hole 3, template_var 0))
            ),
        template_predicate
         (template_app (template_hole 2, template_var 0))],
       template_equation
        (template_var 0,
         template_app
          (template_app (template_hole 0, template_var 2),
           template_var 1)))),
    ("Poincare_Between.poincare_collinear3_iff",
     "[| ?u : unit_disc; ?v : unit_disc; ?w : unit_disc |]
      ==> poincare_collinear {?u, ?v, ?w} =
          (poincare_between ?u ?v ?w |
           poincare_between ?v ?u ?w | poincare_between ?v ?w ?u)",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 7, template_var 2),
              template_hole 6)
            ),
        template_predicate
         (
            template_app
             (template_app (template_hole 7, template_var 1),
              template_hole 6)
            ),
        template_predicate
         (
            template_app
             (template_app (template_hole 7, template_var 0),
              template_hole 6)
            )],
       template_equation
        (template_app
          (template_hole 4,
           template_app
            (template_app (template_hole 3, template_var 2),
             template_app
              (template_app (template_hole 3, template_var 1),
               template_app
                (template_app (template_hole 3, template_var 0),
                 template_hole 2)))),
         template_app
          (template_app
            (template_hole 1,
             template_app
              (template_app
                (template_app (template_hole 0, template_var 2),
                 template_var 1),
               template_var 0)),
           template_app
            (template_app
              (template_hole 1,
               template_app
                (template_app
                  (template_app (template_hole 0, template_var 1),
                   template_var 2),
                 template_var 0)),
             template_app
              (template_app
                (template_app (template_hole 0, template_var 1),
                 template_var 0),
               template_var 2)))))),
    ("Poincare_Distance.ex_x_axis_poincare_distance_positive",
     "0 <= ?d ==>
      EX z. is_real z &
            0 <= Re z &
            Re z < 1 &
            of_complex z : unit_disc &
            of_complex z : circline_set x_axis &
            poincare_distance 0\<^sub>h (of_complex z) = ?d",
     template_implication
      ([template_inequation
         (less_equals, template_hole 14, template_var 0)],
       template_predicate (template_app (template_hole 13, t_empty)))),
    ("Poincare_Lines_Ideal_Points.calc_ideal_point_1_unit",
     "[| is_real ?A; (cmod ?A)\<^sup>2 < (cmod ?B)\<^sup>2;
         (?z1.0, ?z2.0) = calc_ideal_point1_cvec ?A ?B |]
      ==> ?z1.0 * cnj ?z1.0 = ?z2.0 * cnj ?z2.0",
     template_implication
      ([template_equation
         (template_app (template_hole 13, template_var 3),
          template_hole 12),
        template_inequation
         (less_than,
          template_app
           (template_app
             (template_hole 10,
              template_app (template_hole 9, template_var 3)),
            template_app
             (template_hole 8,
              template_app (template_hole 7, template_hole 6))),
          template_app
           (template_app
             (template_hole 10,
              template_app (template_hole 9, template_var 2)),
            template_app
             (template_hole 8,
              template_app (template_hole 7, template_hole 6)))),
        template_equation
         (template_app
           (template_app (template_hole 4, template_var 1), template_var 0),
          template_app
           (template_app (template_hole 3, template_var 3),
            template_var 2))],
       template_equation
        (template_app
          (template_app (template_hole 1, template_var 1),
           template_app (template_hole 0, template_var 1)),
         template_app
          (template_app (template_hole 1, template_var 0),
           template_app (template_hole 0, template_var 0))))),
    ("Poincare_Lines_Ideal_Points.calc_ideal_point_2_unit",
     "[| is_real ?A; (cmod ?A)\<^sup>2 < (cmod ?B)\<^sup>2;
         (?z1.0, ?z2.0) = calc_ideal_point2_cvec ?A ?B |]
      ==> ?z1.0 * cnj ?z1.0 = ?z2.0 * cnj ?z2.0",
     template_implication
      ([template_equation
         (template_app (template_hole 13, template_var 3),
          template_hole 12),
        template_inequation
         (less_than,
          template_app
           (template_app
             (template_hole 10,
              template_app (template_hole 9, template_var 3)),
            template_app
             (template_hole 8,
              template_app (template_hole 7, template_hole 6))),
          template_app
           (template_app
             (template_hole 10,
              template_app (template_hole 9, template_var 2)),
            template_app
             (template_hole 8,
              template_app (template_hole 7, template_hole 6)))),
        template_equation
         (template_app
           (template_app (template_hole 4, template_var 1), template_var 0),
          template_app
           (template_app (template_hole 3, template_var 3),
            template_var 2))],
       template_equation
        (template_app
          (template_app (template_hole 1, template_var 1),
           template_app (template_hole 0, template_var 1)),
         template_app
          (template_app (template_hole 1, template_var 0),
           template_app (template_hole 0, template_var 0))))),
    ("Poincare_Between.poincare_collinear3_between",
     "[| ?u : unit_disc; ?v : unit_disc; ?w : unit_disc;
         poincare_collinear {?u, ?v, ?w} |]
      ==> poincare_between ?u ?v ?w |
          poincare_between ?u ?w ?v | poincare_between ?v ?u ?w",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 6, template_var 2),
              template_hole 5)
            ),
        template_predicate
         (
            template_app
             (template_app (template_hole 6, template_var 1),
              template_hole 5)
            ),
        template_predicate
         (
            template_app
             (template_app (template_hole 6, template_var 0),
              template_hole 5)
            ),
        template_predicate
         (
            template_app
             (template_hole 4,
              template_app
               (template_app (template_hole 3, template_var 2),
                template_app
                 (template_app (template_hole 3, template_var 1),
                  template_app
                   (template_app (template_hole 3, template_var 0),
                    template_hole 2))))
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 1,
               template_app
                (template_app
                  (template_app (template_hole 0, template_var 2),
                   template_var 1),
                 template_var 0)),
             template_app
              (template_app
                (template_hole 1,
                 template_app
                  (template_app
                    (template_app (template_hole 0, template_var 2),
                     template_var 0),
                   template_var 1)),
               template_app
                (template_app
                  (template_app (template_hole 0, template_var 1),
                   template_var 2),
                 template_var 0)))
           ))),
    ("Poincare_Distance.ex_x_axis_poincare_distance_negative",
     "0 <= ?d ==>
      EX z. is_real z &
            Re z <= 0 &
            - 1 < Re z &
            of_complex z : unit_disc &
            of_complex z : circline_set x_axis &
            poincare_distance 0\<^sub>h (of_complex z) = ?d",
     template_implication
      ([template_inequation
         (less_equals, template_hole 15, template_var 0)],
       template_predicate (template_app (template_hole 14, t_empty)))),
    ("Poincare_Lines.unique_is_poincare_line",
     "[| ?u : unit_disc; ?v : unit_disc; ?u ~= ?v; is_poincare_line ?l1.0;
         is_poincare_line ?l2.0;
         {?u, ?v} <= circline_set ?l1.0 Int circline_set ?l2.0 |]
      ==> ?l1.0 = ?l2.0",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 10, template_var 3),
              template_hole 9)
            ),
        template_predicate
         (
            template_app
             (template_app (template_hole 10, template_var 2),
              template_hole 9)
            ),
        template_negation
         (template_equation (template_var 3, template_var 2)),
        template_predicate (template_app (template_hole 6, template_var 1)),
        template_predicate (template_app (template_hole 6, template_var 0)),
        template_inequation
         (less_equals,
          template_app
           (template_app (template_hole 4, template_var 3),
            template_app
             (template_app (template_hole 4, template_var 2),
              template_hole 3)),
          template_app
           (template_app
             (template_hole 2,
              template_app (template_hole 1, template_var 1)),
            template_app (template_hole 1, template_var 0)))],
       template_equation (template_var 1, template_var 0))),
    ("Poincare_Between.poincare_between_u0v",
     "[| ?u : unit_disc; ?v : unit_disc; ?u ~= 0\<^sub>h; ?v ~= 0\<^sub>h |]
      ==> poincare_between ?u 0\<^sub>h ?v =
          (EX k<0. to_complex ?u = cor k * to_complex ?v)",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 14, template_var 1),
              template_hole 13)
            ),
        template_predicate
         (
            template_app
             (template_app (template_hole 14, template_var 0),
              template_hole 13)
            ),
        template_negation
         (template_equation (template_var 1, template_hole 10)),
        template_negation
         (template_equation (template_var 0, template_hole 10))],
       template_equation
        (template_app
          (template_app
            (template_app (template_hole 8, template_var 1),
             template_hole 10),
           template_var 0),
         template_app (template_hole 7, t_empty)))),
    ("Poincare_Lines_Ideal_Points.ideal_points_poincare_line_conjugate",
     "[| ?u : unit_disc; ?v : unit_disc; ?u ~= ?v;
         ideal_points (poincare_line ?u ?v) = {?i1.0, ?i2.0} |]
      ==> ideal_points (poincare_line (conjugate ?u) (conjugate ?v)) =
          {conjugate ?i1.0, conjugate ?i2.0}",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 9, template_var 3),
              template_hole 8)
            ),
        template_predicate
         (
            template_app
             (template_app (template_hole 9, template_var 2),
              template_hole 8)
            ),
        template_negation
         (template_equation (template_var 3, template_var 2)),
        template_equation
         (template_app
           (template_hole 4,
            template_app
             (template_app (template_hole 3, template_var 3),
              template_var 2)),
          template_app
           (template_app (template_hole 2, template_var 1),
            template_app
             (template_app (template_hole 2, template_var 0),
              template_hole 1)))],
       template_equation
        (template_app
          (template_hole 4,
           template_app
            (template_app
              (template_hole 3,
               template_app (template_hole 0, template_var 3)),
             template_app (template_hole 0, template_var 2))),
         template_app
          (template_app
            (template_hole 2,
             template_app (template_hole 0, template_var 1)),
           template_app
            (template_app
              (template_hole 2,
               template_app (template_hole 0, template_var 0)),
             template_hole 1))))),
    ("Poincare_Lines.is_poincare_line_mk_circline",
     "(?A, ?B, ?C, ?D) : hermitean_nonzero ==>
      is_poincare_line (mk_circline ?A ?B ?C ?D) =
      ((cmod ?A)\<^sup>2 < (cmod ?B)\<^sup>2 & ?A = ?D)",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_hole 19,
                template_app
                 (template_app (template_hole 18, template_var 3),
                  template_app
                   (template_app (template_hole 17, template_var 2),
                    template_app
                     (template_app (template_hole 16, template_var 1),
                      template_var 0)))),
              template_app (template_hole 15, t_empty))
            )],
       template_implication
        ([template_predicate
           (
              template_app
               (template_hole 8,
                template_app
                 (template_app
                   (template_app
                     (template_app (template_hole 7, template_var 3),
                      template_var 2),
                    template_var 1),
                  template_var 0))
              )],
         template_predicate
          (
             template_app
              (template_app
                (template_hole 14,
                 template_app
                  (template_app
                    (template_hole 6,
                     template_app
                      (template_app
                        (template_hole 5,
                         template_app (template_hole 4, template_var 3)),
                       template_app
                        (template_hole 3,
                         template_app (template_hole 2, template_hole 1)))),
                   template_app
                    (template_app
                      (template_hole 5,
                       template_app (template_hole 4, template_var 2)),
                     template_app
                      (template_hole 3,
                       template_app (template_hole 2, template_hole 1))))),
               template_app
                (template_app (template_hole 0, template_var 3),
                 template_var 0))
             )))),
    ("Poincare_Lines.poincare_collinear3_poincare_lines_equal_general",
     "[| poincare_collinear {?a, ?a1.0, ?a2.0}; ?a ~= ?a1.0; ?a ~= ?a2.0;
         ?a ~= inversion ?a1.0; ?a ~= inversion ?a2.0 |]
      ==> poincare_line ?a ?a1.0 = poincare_line ?a ?a2.0",
     template_implication
      ([template_predicate
         (
            template_app
             (template_hole 7,
              template_app
               (template_app (template_hole 6, template_var 2),
                template_app
                 (template_app (template_hole 6, template_var 1),
                  template_app
                   (template_app (template_hole 6, template_var 0),
                    template_hole 5))))
            ),
        template_negation
         (template_equation (template_var 2, template_var 1)),
        template_negation
         (template_equation (template_var 2, template_var 0)),
        template_negation
         (
            template_equation
             (template_var 2,
              template_app (template_hole 2, template_var 1))
            ),
        template_negation
         (
            template_equation
             (template_var 2,
              template_app (template_hole 2, template_var 0))
            )],
       template_equation
        (template_app
          (template_app (template_hole 0, template_var 2), template_var 1),
         template_app
          (template_app (template_hole 0, template_var 2),
           template_var 0)))),
    ("Poincare_Circles.intersect_poincare_circles_conjugate_centers",
     "[| ?z1.0 : unit_disc; ?z2.0 : unit_disc; ?z1.0 ~= ?z2.0;
         ?z1.0 = conjugate ?z2.0; 0 < ?r;
         ?u : poincare_circle ?z1.0 ?r Int poincare_circle ?z2.0 ?r |]
      ==> is_real (to_complex ?u)",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 11, template_var 3),
              template_hole 10)
            ),
        template_predicate
         (
            template_app
             (template_app (template_hole 11, template_var 2),
              template_hole 10)
            ),
        template_negation
         (template_equation (template_var 3, template_var 2)),
        template_equation
         (template_var 3, template_app (template_hole 7, template_var 2)),
        template_inequation (less_than, template_hole 5, template_var 1),
        template_predicate
         (
            template_app
             (template_app (template_hole 11, template_var 0),
              template_app
               (template_app
                 (template_hole 4,
                  template_app
                   (template_app (template_hole 3, template_var 3),
                    template_var 1)),
                template_app
                 (template_app (template_hole 3, template_var 2),
                  template_var 1)))
            )],
       template_equation
        (template_app
          (template_hole 1, template_app (template_hole 0, template_var 0)),
         template_hole 5))),
    ("Poincare_Distance.poincare_distance_eq_ex_moebius",
     "[| ?u : unit_disc; ?v : unit_disc; ?u' : unit_disc; ?v' : unit_disc;
         poincare_distance ?u ?v = poincare_distance ?u' ?v' |]
      ==> EX M. unit_disc_fix M &
                moebius_pt M ?u = ?u' & moebius_pt M ?v = ?v'",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 8, template_var 3),
              template_hole 7)
            ),
        template_predicate
         (
            template_app
             (template_app (template_hole 8, template_var 2),
              template_hole 7)
            ),
        template_predicate
         (
            template_app
             (template_app (template_hole 8, template_var 1),
              template_hole 7)
            ),
        template_predicate
         (
            template_app
             (template_app (template_hole 8, template_var 0),
              template_hole 7)
            ),
        template_equation
         (template_app
           (template_app (template_hole 5, template_var 3), template_var 2),
          template_app
           (template_app (template_hole 5, template_var 1),
            template_var 0))],
       template_predicate (template_app (template_hole 4, t_empty)))),
    ("Poincare_Between.poincare_between_0uv",
     "[| ?u : unit_disc; ?v : unit_disc; ?u ~= 0\<^sub>h; ?v ~= 0\<^sub>h |]
      ==> poincare_between 0\<^sub>h ?u ?v =
          (let u' = to_complex ?u; v' = to_complex ?v
           in Arg u' = Arg v' & cmod u' <= cmod v')",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 13, template_var 1),
              template_hole 12)
            ),
        template_predicate
         (
            template_app
             (template_app (template_hole 13, template_var 0),
              template_hole 12)
            ),
        template_negation
         (template_equation (template_var 1, template_hole 9)),
        template_negation
         (template_equation (template_var 0, template_hole 9))],
       template_equation
        (template_app
          (template_app
            (template_app (template_hole 7, template_hole 9),
             template_var 1),
           template_var 0),
         template_app
          (template_app
            (template_hole 6,
             template_app (template_hole 5, template_var 1)),
           t_empty)))),
    ("Poincare_Lines_Ideal_Points.ideal_points_poincare_line_moebius",
     "[| unit_disc_fix ?M; ?u : unit_disc; ?v : unit_disc; ?u ~= ?v;
         ideal_points (poincare_line ?u ?v) = {?i1.0, ?i2.0} |]
      ==> ideal_points
           (poincare_line (moebius_pt ?M ?u) (moebius_pt ?M ?v)) =
          {moebius_pt ?M ?i1.0, moebius_pt ?M ?i2.0}",
     template_implication
      ([template_predicate
         (template_app (template_hole 10, template_var 4)),
        template_predicate
         (
            template_app
             (template_app (template_hole 9, template_var 3),
              template_hole 8)
            ),
        template_predicate
         (
            template_app
             (template_app (template_hole 9, template_var 2),
              template_hole 8)
            ),
        template_negation
         (template_equation (template_var 3, template_var 2)),
        template_equation
         (template_app
           (template_hole 4,
            template_app
             (template_app (template_hole 3, template_var 3),
              template_var 2)),
          template_app
           (template_app (template_hole 2, template_var 1),
            template_app
             (template_app (template_hole 2, template_var 0),
              template_hole 1)))],
       template_equation
        (template_app
          (template_hole 4,
           template_app
            (template_app
              (template_hole 3,
               template_app
                (template_app (template_hole 0, template_var 4),
                 template_var 3)),
             template_app
              (template_app (template_hole 0, template_var 4),
               template_var 2))),
         template_app
          (template_app
            (template_hole 2,
             template_app
              (template_app (template_hole 0, template_var 4),
               template_var 1)),
           template_app
            (template_app
              (template_hole 2,
               template_app
                (template_app (template_hole 0, template_var 4),
                 template_var 0)),
             template_hole 1))))),
    ("Poincare_Lines.poincare_collinear_zero_iff",
     "[| of_complex ?y' : unit_disc; of_complex ?z' : unit_disc; ?y' ~= ?z';
         ?y' ~= 0; ?z' ~= 0 |]
      ==> poincare_collinear {0\<^sub>h, of_complex ?y', of_complex ?z'} =
          (?y' * cnj ?z' = cnj ?y' * ?z')",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_hole 12,
                template_app (template_hole 11, template_var 1)),
              template_hole 10)
            ),
        template_predicate
         (
            template_app
             (template_app
               (template_hole 12,
                template_app (template_hole 11, template_var 0)),
              template_hole 10)
            ),
        template_negation
         (template_equation (template_var 1, template_var 0)),
        template_negation
         (template_equation (template_var 1, template_hole 7)),
        template_negation
         (template_equation (template_var 0, template_hole 7))],
       template_implication
        ([template_predicate
           (
              template_app
               (template_hole 5,
                template_app
                 (template_app (template_hole 4, template_hole 3),
                  template_app
                   (template_app
                     (template_hole 4,
                      template_app (template_hole 11, template_var 1)),
                    template_app
                     (template_app
                       (template_hole 4,
                        template_app (template_hole 11, template_var 0)),
                      template_hole 2))))
              )],
         template_equation
          (template_app
            (template_app (template_hole 1, template_var 1),
             template_app (template_hole 0, template_var 0)),
           template_app
            (template_app
              (template_hole 1,
               template_app (template_hole 0, template_var 1)),
             template_var 0))))),
    ("Poincare_Lines_Ideal_Points.calc_ideal_point1_sq",
     "[| (?z1.0, ?z2.0) = calc_ideal_point1_cvec ?A ?B; is_real ?A;
         (cmod ?A)\<^sup>2 < (cmod ?B)\<^sup>2 |]
      ==> ?z1.0 * cnj ?z1.0 + ?z2.0 * cnj ?z2.0 =
          2 * (?B * cnj ?B)\<^sup>2",
     template_implication
      ([template_equation
         (template_app
           (template_app (template_hole 16, template_var 3),
            template_var 2),
          template_app
           (template_app (template_hole 15, template_var 1),
            template_var 0)),
        template_equation
         (template_app (template_hole 13, template_var 1),
          template_hole 12),
        template_inequation
         (less_than,
          template_app
           (template_app
             (template_hole 10,
              template_app (template_hole 9, template_var 1)),
            template_app
             (template_hole 8,
              template_app (template_hole 7, template_hole 6))),
          template_app
           (template_app
             (template_hole 10,
              template_app (template_hole 9, template_var 0)),
            template_app
             (template_hole 8,
              template_app (template_hole 7, template_hole 6))))],
       template_equation
        (template_app
          (template_app
            (template_hole 4,
             template_app
              (template_app (template_hole 3, template_var 3),
               template_app (template_hole 2, template_var 3))),
           template_app
            (template_app (template_hole 3, template_var 2),
             template_app (template_hole 2, template_var 2))),
         template_app
          (template_app
            (template_hole 3,
             template_app
              (template_hole 1,
               template_app (template_hole 7, template_hole 6))),
           template_app
            (template_app
              (template_hole 0,
               template_app
                (template_app (template_hole 3, template_var 0),
                 template_app (template_hole 2, template_var 0))),
             template_app
              (template_hole 8,
               template_app (template_hole 7, template_hole 6))))))),
    ("Poincare_Lines_Ideal_Points.calc_ideal_point2_sq",
     "[| (?z1.0, ?z2.0) = calc_ideal_point2_cvec ?A ?B; is_real ?A;
         (cmod ?A)\<^sup>2 < (cmod ?B)\<^sup>2 |]
      ==> ?z1.0 * cnj ?z1.0 + ?z2.0 * cnj ?z2.0 =
          2 * (?B * cnj ?B)\<^sup>2",
     template_implication
      ([template_equation
         (template_app
           (template_app (template_hole 16, template_var 3),
            template_var 2),
          template_app
           (template_app (template_hole 15, template_var 1),
            template_var 0)),
        template_equation
         (template_app (template_hole 13, template_var 1),
          template_hole 12),
        template_inequation
         (less_than,
          template_app
           (template_app
             (template_hole 10,
              template_app (template_hole 9, template_var 1)),
            template_app
             (template_hole 8,
              template_app (template_hole 7, template_hole 6))),
          template_app
           (template_app
             (template_hole 10,
              template_app (template_hole 9, template_var 0)),
            template_app
             (template_hole 8,
              template_app (template_hole 7, template_hole 6))))],
       template_equation
        (template_app
          (template_app
            (template_hole 4,
             template_app
              (template_app (template_hole 3, template_var 3),
               template_app (template_hole 2, template_var 3))),
           template_app
            (template_app (template_hole 3, template_var 2),
             template_app (template_hole 2, template_var 2))),
         template_app
          (template_app
            (template_hole 3,
             template_app
              (template_hole 1,
               template_app (template_hole 7, template_hole 6))),
           template_app
            (template_app
              (template_hole 0,
               template_app
                (template_app (template_hole 3, template_var 0),
                 template_app (template_hole 2, template_var 0))),
             template_app
              (template_hole 8,
               template_app (template_hole 7, template_hole 6))))))),
    ("Poincare_Distance.cosh_poincare_distance_cross_ratio_average",
     "[| ?u : unit_disc; ?v : unit_disc; ?u ~= ?v;
         ideal_points (poincare_line ?u ?v) = {?i1.0, ?i2.0} |]
      ==> cosh_dist ?u ?v =
          (Re_cross_ratio ?u ?i1.0 ?v ?i2.0 +
           Re_cross_ratio ?v ?i1.0 ?u ?i2.0) /
          2",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 19, template_var 3),
              template_hole 18)
            ),
        template_predicate
         (
            template_app
             (template_app (template_hole 19, template_var 2),
              template_hole 18)
            ),
        template_negation
         (template_equation (template_var 3, template_var 2)),
        template_equation
         (template_app
           (template_hole 14,
            template_app
             (template_app (template_hole 13, template_var 3),
              template_var 2)),
          template_app
           (template_app (template_hole 12, template_var 1),
            template_app
             (template_app (template_hole 12, template_var 0),
              template_hole 11)))],
       template_equation
        (template_app
          (template_hole 9,
           template_app
            (template_app (template_hole 8, template_var 3),
             template_var 2)),
         template_app
          (template_app
            (template_hole 7,
             template_app
              (template_app
                (template_hole 6,
                 template_app
                  (template_hole 5,
                   template_app
                    (template_hole 4,
                     template_app
                      (template_app
                        (template_app
                          (template_app (template_hole 3, template_var 3),
                           template_var 1),
                         template_var 2),
                       template_var 0)))),
               template_app
                (template_hole 5,
                 template_app
                  (template_hole 4,
                   template_app
                    (template_app
                      (template_app
                        (template_app (template_hole 3, template_var 2),
                         template_var 1),
                       template_var 3),
                     template_var 0))))),
           template_app
            (template_hole 2,
             template_app (template_hole 1, template_hole 0)))))),
    ("Poincare_Distance.poincare_distance_x_axis_x_axis",
     "[| ?x : unit_disc; ?y : unit_disc; ?x : circline_set x_axis;
         ?y : circline_set x_axis |]
      ==> poincare_distance ?x ?y =
          (let x' = to_complex ?x; y' = to_complex ?y
           in \<bar>ln (Re ((1 + x') * (1 - y') /
                            ((1 - x') * (1 + y'))))\<bar>)",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 15, template_var 1),
              template_hole 14)
            ),
        template_predicate
         (
            template_app
             (template_app (template_hole 15, template_var 0),
              template_hole 14)
            ),
        template_predicate
         (
            template_app
             (template_app (template_hole 15, template_var 1),
              template_app (template_hole 13, template_hole 12))
            ),
        template_predicate
         (
            template_app
             (template_app (template_hole 15, template_var 0),
              template_app (template_hole 13, template_hole 12))
            )],
       template_equation
        (template_app
          (template_app (template_hole 10, template_var 1), template_var 0),
         template_app
          (template_app
            (template_hole 9,
             template_app (template_hole 8, template_var 1)),
           t_empty)))),
    ("Poincare_Between.poincare_between_u0v_polar_form",
     "[| ?x : unit_disc; ?y : unit_disc; ?x ~= 0\<^sub>h; ?y ~= 0\<^sub>h;
         to_complex ?x = cor ?rx * cis ?\<phi>;
         to_complex ?y = cor ?ry * cis ?\<phi> |]
      ==> poincare_between ?x 0\<^sub>h ?y = (?rx * ?ry < 0)",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 14, template_var 4),
              template_hole 13)
            ),
        template_predicate
         (
            template_app
             (template_app (template_hole 14, template_var 3),
              template_hole 13)
            ),
        template_negation
         (template_equation (template_var 4, template_hole 10)),
        template_negation
         (template_equation (template_var 3, template_hole 10)),
        template_equation
         (template_app (template_hole 8, template_var 4),
          template_app
           (template_app
             (template_hole 7,
              template_app (template_hole 6, template_var 2)),
            template_app (template_hole 5, template_var 1))),
        template_equation
         (template_app (template_hole 8, template_var 3),
          template_app
           (template_app
             (template_hole 7,
              template_app (template_hole 6, template_var 0)),
            template_app (template_hole 5, template_var 1)))],
       template_equation
        (template_app
          (template_app
            (template_app (template_hole 3, template_var 4),
             template_hole 10),
           template_var 3),
         template_app
          (template_app
            (template_hole 2,
             template_app
              (template_app (template_hole 1, template_var 2),
               template_var 0)),
           template_hole 0)))),
    ("Poincare_Distance.ex_x_axis_poincare_distance_negative'",
     "0 <= ?d ==>
      let x = (1 - exp ?d) / (1 + exp ?d)
      in is_real (cor x) &
         Re (cor x) <= 0 &
         - 1 < Re (cor x) &
         of_complex (cor x) : unit_disc &
         of_complex (cor x) : circline_set x_axis &
         poincare_distance 0\<^sub>h (of_complex (cor x)) = ?d",
     template_implication
      ([template_inequation
         (less_equals, template_hole 20, template_var 0)],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 19,
               template_app
                (template_app
                  (template_hole 18,
                   template_app
                    (template_app (template_hole 17, template_hole 16),
                     template_app (template_hole 15, template_var 0))),
                 template_app
                  (template_app (template_hole 14, template_hole 16),
                   template_app (template_hole 15, template_var 0)))),
             t_empty)
           ))),
    ("Poincare_Between.poincare_between_sum_distances_x_axis_u0v",
     "[| of_complex ?u' : unit_disc; of_complex ?v' : unit_disc;
         is_real ?u'; ?u' ~= 0; ?v' ~= 0 |]
      ==> (poincare_distance (of_complex ?u') 0\<^sub>h +
           poincare_distance 0\<^sub>h (of_complex ?v') =
           poincare_distance (of_complex ?u') (of_complex ?v')) =
          (is_real ?v' & Re ?u' * Re ?v' < 0)",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_hole 16,
                template_app (template_hole 15, template_var 1)),
              template_hole 14)
            ),
        template_predicate
         (
            template_app
             (template_app
               (template_hole 16,
                template_app (template_hole 15, template_var 0)),
              template_hole 14)
            ),
        template_equation
         (template_app (template_hole 12, template_var 1),
          template_hole 11),
        template_negation
         (template_equation (template_var 1, template_hole 8)),
        template_negation
         (template_equation (template_var 0, template_hole 8))],
       template_bimplication
        (template_equation
          (template_app
            (template_app
              (template_hole 6,
               template_app
                (template_app
                  (template_hole 5,
                   template_app (template_hole 15, template_var 1)),
                 template_hole 4)),
             template_app
              (template_app (template_hole 5, template_hole 4),
               template_app (template_hole 15, template_var 0))),
           template_app
            (template_app
              (template_hole 5,
               template_app (template_hole 15, template_var 1)),
             template_app (template_hole 15, template_var 0))),
         template_predicate
          (
             template_app
              (template_app
                (template_hole 3,
                 template_app
                  (template_app
                    (template_hole 13,
                     template_app (template_hole 12, template_var 0)),
                   template_hole 11)),
               template_app
                (template_app
                  (template_hole 2,
                   template_app
                    (template_app
                      (template_hole 1,
                       template_app (template_hole 0, template_var 1)),
                     template_app (template_hole 0, template_var 0))),
                 template_hole 11))
             )))),
    ("Poincare_Distance.distance_cross_ratio_real_positive",
     "[| ?u : unit_disc; ?v : unit_disc; ?u ~= ?v |]
      ==> ALL i1 i2.
             ideal_points (poincare_line ?u ?v) = {i1, i2} -->
             cross_ratio ?u i1 ?v i2 ~= \<infinity>\<^sub>h &
             is_real (to_complex (cross_ratio ?u i1 ?v i2)) &
             0 < Re_cross_ratio ?u i1 ?v i2",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 19, template_var 1),
              template_hole 18)
            ),
        template_predicate
         (
            template_app
             (template_app (template_hole 19, template_var 0),
              template_hole 18)
            ),
        template_negation
         (template_equation (template_var 1, template_var 0))],
       template_predicate (template_app (template_hole 15, t_empty)))),
    ("Poincare_Between.poincare_between_sum_distances_x_axis_u0v_different_proof",
     "[| of_complex ?u' : unit_disc; of_complex ?v' : unit_disc;
         is_real ?u'; ?u' ~= 0; ?v' ~= 0; is_real ?v' |]
      ==> (poincare_distance (of_complex ?u') 0\<^sub>h +
           poincare_distance 0\<^sub>h (of_complex ?v') =
           poincare_distance (of_complex ?u') (of_complex ?v')) =
          (Re ?u' * Re ?v' < 0)",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_hole 15,
                template_app (template_hole 14, template_var 1)),
              template_hole 13)
            ),
        template_predicate
         (
            template_app
             (template_app
               (template_hole 15,
                template_app (template_hole 14, template_var 0)),
              template_hole 13)
            ),
        template_equation
         (template_app (template_hole 11, template_var 1),
          template_hole 10),
        template_negation
         (template_equation (template_var 1, template_hole 7)),
        template_negation
         (template_equation (template_var 0, template_hole 7)),
        template_equation
         (template_app (template_hole 11, template_var 0),
          template_hole 10)],
       template_equation
        (template_app
          (template_app
            (template_hole 12,
             template_app
              (template_app
                (template_hole 5,
                 template_app
                  (template_app
                    (template_hole 4,
                     template_app (template_hole 14, template_var 1)),
                   template_hole 3)),
               template_app
                (template_app (template_hole 4, template_hole 3),
                 template_app (template_hole 14, template_var 0)))),
           template_app
            (template_app
              (template_hole 4,
               template_app (template_hole 14, template_var 1)),
             template_app (template_hole 14, template_var 0))),
         template_app
          (template_app
            (template_hole 2,
             template_app
              (template_app
                (template_hole 1,
                 template_app (template_hole 0, template_var 1)),
               template_app (template_hole 0, template_var 0))),
           template_hole 10)))),
    ("Poincare_Lines_Ideal_Points.calc_ideal_point1_mix",
     "[| (?z1.0, ?z2.0) = calc_ideal_point1_cvec ?A ?B; is_real ?A;
         (cmod ?A)\<^sup>2 < (cmod ?B)\<^sup>2 |]
      ==> ?B * cnj ?z1.0 * ?z2.0 + cnj ?B * ?z1.0 * cnj ?z2.0 =
          - 2 * ?A * (?B * cnj ?B)\<^sup>2",
     template_implication
      ([template_equation
         (template_app
           (template_app (template_hole 17, template_var 3),
            template_var 2),
          template_app
           (template_app (template_hole 16, template_var 1),
            template_var 0)),
        template_equation
         (template_app (template_hole 14, template_var 1),
          template_hole 13),
        template_inequation
         (less_than,
          template_app
           (template_app
             (template_hole 11,
              template_app (template_hole 10, template_var 1)),
            template_app
             (template_hole 9,
              template_app (template_hole 8, template_hole 7))),
          template_app
           (template_app
             (template_hole 11,
              template_app (template_hole 10, template_var 0)),
            template_app
             (template_hole 9,
              template_app (template_hole 8, template_hole 7))))],
       template_equation
        (template_app
          (template_app
            (template_hole 5,
             template_app
              (template_app
                (template_hole 4,
                 template_app
                  (template_app (template_hole 4, template_var 0),
                   template_app (template_hole 3, template_var 3))),
               template_var 2)),
           template_app
            (template_app
              (template_hole 4,
               template_app
                (template_app
                  (template_hole 4,
                   template_app (template_hole 3, template_var 0)),
                 template_var 3)),
             template_app (template_hole 3, template_var 2))),
         template_app
          (template_app
            (template_hole 4,
             template_app
              (template_app
                (template_hole 4,
                 template_app
                  (template_hole 2,
                   template_app
                    (template_hole 1,
                     template_app (template_hole 8, template_hole 7)))),
               template_var 1)),
           template_app
            (template_app
              (template_hole 0,
               template_app
                (template_app (template_hole 4, template_var 0),
                 template_app (template_hole 3, template_var 0))),
             template_app
              (template_hole 9,
               template_app (template_hole 8, template_hole 7))))))),
    ("Poincare_Lines_Ideal_Points.calc_ideal_point1_on_circline",
     "[| (?z1.0, ?z2.0) = calc_ideal_point1_cvec ?A ?B; is_real ?A;
         (cmod ?A)\<^sup>2 < (cmod ?B)\<^sup>2 |]
      ==> ?A * ?z1.0 * cnj ?z1.0 + ?B * cnj ?z1.0 * ?z2.0 +
          cnj ?B * ?z1.0 * cnj ?z2.0 +
          ?A * ?z2.0 * cnj ?z2.0 =
          0",
     template_implication
      ([template_equation
         (template_app
           (template_app (template_hole 15, template_var 3),
            template_var 2),
          template_app
           (template_app (template_hole 14, template_var 1),
            template_var 0)),
        template_equation
         (template_app (template_hole 12, template_var 1),
          template_hole 11),
        template_inequation
         (less_than,
          template_app
           (template_app
             (template_hole 9,
              template_app (template_hole 8, template_var 1)),
            template_app
             (template_hole 7,
              template_app (template_hole 6, template_hole 5))),
          template_app
           (template_app
             (template_hole 9,
              template_app (template_hole 8, template_var 0)),
            template_app
             (template_hole 7,
              template_app (template_hole 6, template_hole 5))))],
       template_equation
        (template_app
          (template_app
            (template_hole 3,
             template_app
              (template_app
                (template_hole 3,
                 template_app
                  (template_app
                    (template_hole 3,
                     template_app
                      (template_app
                        (template_hole 2,
                         template_app
                          (template_app (template_hole 2, template_var 1),
                           template_var 3)),
                       template_app (template_hole 1, template_var 3))),
                   template_app
                    (template_app
                      (template_hole 2,
                       template_app
                        (template_app (template_hole 2, template_var 0),
                         template_app (template_hole 1, template_var 3))),
                     template_var 2))),
               template_app
                (template_app
                  (template_hole 2,
                   template_app
                    (template_app
                      (template_hole 2,
                       template_app (template_hole 1, template_var 0)),
                     template_var 3)),
                 template_app (template_hole 1, template_var 2)))),
           template_app
            (template_app
              (template_hole 2,
               template_app
                (template_app (template_hole 2, template_var 1),
                 template_var 2)),
             template_app (template_hole 1, template_var 2))),
         template_hole 0))),
    ("Poincare_Lines_Ideal_Points.calc_ideal_point2_mix",
     "[| (?z1.0, ?z2.0) = calc_ideal_point2_cvec ?A ?B; is_real ?A;
         (cmod ?A)\<^sup>2 < (cmod ?B)\<^sup>2 |]
      ==> ?B * cnj ?z1.0 * ?z2.0 + cnj ?B * ?z1.0 * cnj ?z2.0 =
          - 2 * ?A * (?B * cnj ?B)\<^sup>2",
     template_implication
      ([template_equation
         (template_app
           (template_app (template_hole 17, template_var 3),
            template_var 2),
          template_app
           (template_app (template_hole 16, template_var 1),
            template_var 0)),
        template_equation
         (template_app (template_hole 14, template_var 1),
          template_hole 13),
        template_inequation
         (less_than,
          template_app
           (template_app
             (template_hole 11,
              template_app (template_hole 10, template_var 1)),
            template_app
             (template_hole 9,
              template_app (template_hole 8, template_hole 7))),
          template_app
           (template_app
             (template_hole 11,
              template_app (template_hole 10, template_var 0)),
            template_app
             (template_hole 9,
              template_app (template_hole 8, template_hole 7))))],
       template_equation
        (template_app
          (template_app
            (template_hole 5,
             template_app
              (template_app
                (template_hole 4,
                 template_app
                  (template_app (template_hole 4, template_var 0),
                   template_app (template_hole 3, template_var 3))),
               template_var 2)),
           template_app
            (template_app
              (template_hole 4,
               template_app
                (template_app
                  (template_hole 4,
                   template_app (template_hole 3, template_var 0)),
                 template_var 3)),
             template_app (template_hole 3, template_var 2))),
         template_app
          (template_app
            (template_hole 4,
             template_app
              (template_app
                (template_hole 4,
                 template_app
                  (template_hole 2,
                   template_app
                    (template_hole 1,
                     template_app (template_hole 8, template_hole 7)))),
               template_var 1)),
           template_app
            (template_app
              (template_hole 0,
               template_app
                (template_app (template_hole 4, template_var 0),
                 template_app (template_hole 3, template_var 0))),
             template_app
              (template_hole 9,
               template_app (template_hole 8, template_hole 7))))))),
    ("Poincare_Lines_Ideal_Points.calc_ideal_point2_on_circline",
     "[| (?z1.0, ?z2.0) = calc_ideal_point2_cvec ?A ?B; is_real ?A;
         (cmod ?A)\<^sup>2 < (cmod ?B)\<^sup>2 |]
      ==> ?A * ?z1.0 * cnj ?z1.0 + ?B * cnj ?z1.0 * ?z2.0 +
          cnj ?B * ?z1.0 * cnj ?z2.0 +
          ?A * ?z2.0 * cnj ?z2.0 =
          0",
     template_implication
      ([template_equation
         (template_app
           (template_app (template_hole 15, template_var 3),
            template_var 2),
          template_app
           (template_app (template_hole 14, template_var 1),
            template_var 0)),
        template_equation
         (template_app (template_hole 12, template_var 1),
          template_hole 11),
        template_inequation
         (less_than,
          template_app
           (template_app
             (template_hole 9,
              template_app (template_hole 8, template_var 1)),
            template_app
             (template_hole 7,
              template_app (template_hole 6, template_hole 5))),
          template_app
           (template_app
             (template_hole 9,
              template_app (template_hole 8, template_var 0)),
            template_app
             (template_hole 7,
              template_app (template_hole 6, template_hole 5))))],
       template_equation
        (template_app
          (template_app
            (template_hole 3,
             template_app
              (template_app
                (template_hole 3,
                 template_app
                  (template_app
                    (template_hole 3,
                     template_app
                      (template_app
                        (template_hole 2,
                         template_app
                          (template_app (template_hole 2, template_var 1),
                           template_var 3)),
                       template_app (template_hole 1, template_var 3))),
                   template_app
                    (template_app
                      (template_hole 2,
                       template_app
                        (template_app (template_hole 2, template_var 0),
                         template_app (template_hole 1, template_var 3))),
                     template_var 2))),
               template_app
                (template_app
                  (template_hole 2,
                   template_app
                    (template_app
                      (template_hole 2,
                       template_app (template_hole 1, template_var 0)),
                     template_var 3)),
                 template_app (template_hole 1, template_var 2)))),
           template_app
            (template_app
              (template_hole 2,
               template_app
                (template_app (template_hole 2, template_var 1),
                 template_var 2)),
             template_app (template_hole 1, template_var 2))),
         template_hole 0))),
    ("Poincare_Between.unique_poincare_distance_on_ray",
     "[| 0 <= ?d; ?u ~= ?v; ?u : unit_disc; ?v : unit_disc; ?y : unit_disc;
         poincare_distance ?u ?y = ?d; poincare_between ?u ?v ?y;
         ?z : unit_disc; poincare_distance ?u ?z = ?d;
         poincare_between ?u ?v ?z |]
      ==> ?y = ?z",
     template_implication
      ([template_inequation (less_equals, template_hole 7, template_var 4),
        template_negation
         (template_equation (template_var 3, template_var 2)),
        template_predicate
         (
            template_app
             (template_app (template_hole 4, template_var 3),
              template_hole 3)
            ),
        template_predicate
         (
            template_app
             (template_app (template_hole 4, template_var 2),
              template_hole 3)
            ),
        template_predicate
         (
            template_app
             (template_app (template_hole 4, template_var 1),
              template_hole 3)
            ),
        template_equation
         (template_app
           (template_app (template_hole 1, template_var 3), template_var 1),
          template_var 4),
        template_predicate
         (
            template_app
             (template_app
               (template_app (template_hole 0, template_var 3),
                template_var 2),
              template_var 1)
            ),
        template_predicate
         (
            template_app
             (template_app (template_hole 4, template_var 0),
              template_hole 3)
            ),
        template_equation
         (template_app
           (template_app (template_hole 1, template_var 3), template_var 0),
          template_var 4),
        template_predicate
         (
            template_app
             (template_app
               (template_app (template_hole 0, template_var 3),
                template_var 2),
              template_var 0)
            )],
       template_equation (template_var 1, template_var 0))),
    ("Poincare_Lines.ex_is_poincare_line_points'",
     "[| ?i1.0 : circline_set ?H Int unit_circle_set;
         ?i2.0 : circline_set ?H Int unit_circle_set; ?i1.0 ~= ?i2.0;
         ?a : circline_set ?H; ?a ~: unit_circle_set |]
      ==> EX b. b ~= ?i1.0 &
                b ~= ?i2.0 &
                b ~= ?a & b ~= inversion ?a & b : circline_set ?H",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 8, template_var 3),
              template_app
               (template_app
                 (template_hole 7,
                  template_app (template_hole 6, template_var 2)),
                template_hole 5))
            ),
        template_predicate
         (
            template_app
             (template_app (template_hole 8, template_var 1),
              template_app
               (template_app
                 (template_hole 7,
                  template_app (template_hole 6, template_var 2)),
                template_hole 5))
            ),
        template_negation
         (template_equation (template_var 3, template_var 1)),
        template_predicate
         (
            template_app
             (template_app (template_hole 8, template_var 0),
              template_app (template_hole 6, template_var 2))
            ),
        template_negation
         (
            template_predicate
             (
                template_app
                 (template_app (template_hole 8, template_var 0),
                  template_hole 5)
                )
            )],
       template_predicate (template_app (template_hole 2, t_empty)))),
    ("Poincare_Between.poincare_between_x_axis_0uv",
     "[| - 1 < ?x; ?x < 1; ?x ~= 0; - 1 < ?y; ?y < 1; ?y ~= 0 |]
      ==> poincare_between 0\<^sub>h (of_complex (cor ?x))
           (of_complex (cor ?y)) =
          (?x < 0 & ?y < 0 & ?y <= ?x | 0 < ?x & 0 < ?y & ?x <= ?y)",
     template_implication
      ([template_inequation
         (less_than, template_app (template_hole 12, template_hole 11),
          template_var 1),
        template_inequation (less_than, template_var 1, template_hole 11),
        template_negation
         (template_equation (template_var 1, template_hole 8)),
        template_inequation
         (less_than, template_app (template_hole 12, template_hole 11),
          template_var 0),
        template_inequation (less_than, template_var 0, template_hole 11),
        template_negation
         (template_equation (template_var 0, template_hole 8))],
       template_equation
        (template_app
          (template_app
            (template_app (template_hole 6, template_hole 5),
             template_app
              (template_hole 4,
               template_app (template_hole 3, template_var 1))),
           template_app
            (template_hole 4,
             template_app (template_hole 3, template_var 0))),
         template_app
          (template_app
            (template_hole 2,
             template_app
              (template_app
                (template_hole 1,
                 template_app
                  (template_app (template_hole 13, template_var 1),
                   template_hole 8)),
               template_app
                (template_app
                  (template_hole 1,
                   template_app
                    (template_app (template_hole 13, template_var 0),
                     template_hole 8)),
                 template_app
                  (template_app (template_hole 0, template_var 0),
                   template_var 1)))),
           template_app
            (template_app
              (template_hole 1,
               template_app
                (template_app (template_hole 13, template_hole 8),
                 template_var 1)),
             template_app
              (template_app
                (template_hole 1,
                 template_app
                  (template_app (template_hole 13, template_hole 8),
                   template_var 0)),
               template_app
                (template_app (template_hole 0, template_var 1),
                 template_var 0))))))),
    ("Poincare_Lines.poincare_collinear_zero_polar_form",
     "[| poincare_collinear {0\<^sub>h, of_complex ?x, of_complex ?y};
         ?x ~= 0; ?y ~= 0; of_complex ?x : unit_disc;
         of_complex ?y : unit_disc |]
      ==> EX \<phi> rx ry.
             ?x = cor rx * cis \<phi> &
             ?y = cor ry * cis \<phi> & rx ~= 0 & ry ~= 0",
     template_implication
      ([template_predicate
         (
            template_app
             (template_hole 16,
              template_app
               (template_app (template_hole 15, template_hole 14),
                template_app
                 (template_app
                   (template_hole 15,
                    template_app (template_hole 13, template_var 1)),
                  template_app
                   (template_app
                     (template_hole 15,
                      template_app (template_hole 13, template_var 0)),
                    template_hole 12))))
            ),
        template_negation
         (template_equation (template_var 1, template_hole 9)),
        template_negation
         (template_equation (template_var 0, template_hole 9)),
        template_predicate
         (
            template_app
             (template_app
               (template_hole 8,
                template_app (template_hole 13, template_var 1)),
              template_hole 7)
            ),
        template_predicate
         (
            template_app
             (template_app
               (template_hole 8,
                template_app (template_hole 13, template_var 0)),
              template_hole 7)
            )],
       template_predicate (template_app (template_hole 6, t_empty)))),
    ("Poincare_Distance.poincare_distance_formula_zero_sum",
     "[| ?u : unit_disc; ?v : unit_disc |]
      ==> poincare_distance ?u 0\<^sub>h + poincare_distance 0\<^sub>h ?v =
          (let u' = cmod (to_complex ?u); v' = cmod (to_complex ?v)
           in arcosh
               (((1 + u'\<^sup>2) * (1 + v'\<^sup>2) + 4 * u' * v') /
                ((1 - u'\<^sup>2) * (1 - v'\<^sup>2))))",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 18, template_var 1),
              template_hole 17)
            ),
        template_predicate
         (
            template_app
             (template_app (template_hole 18, template_var 0),
              template_hole 17)
            )],
       template_equation
        (template_app
          (template_app
            (template_hole 15,
             template_app
              (template_app (template_hole 14, template_var 1),
               template_hole 13)),
           template_app
            (template_app (template_hole 14, template_hole 13),
             template_var 0)),
         template_app
          (template_app
            (template_hole 12,
             template_app
              (template_hole 11,
               template_app (template_hole 10, template_var 1))),
           t_empty)))),
    ("Poincare_Between.poincare_between_y_axis_0uv",
     "[| - 1 < ?x; ?x < 1; ?x ~= 0; - 1 < ?y; ?y < 1; ?y ~= 0 |]
      ==> poincare_between 0\<^sub>h (of_complex (\<i> * cor ?x))
           (of_complex (\<i> * cor ?y)) =
          (?x < 0 & ?y < 0 & ?y <= ?x | 0 < ?x & 0 < ?y & ?x <= ?y)",
     template_implication
      ([template_inequation
         (less_than, template_app (template_hole 14, template_hole 13),
          template_var 1),
        template_inequation (less_than, template_var 1, template_hole 13),
        template_negation
         (template_equation (template_var 1, template_hole 10)),
        template_inequation
         (less_than, template_app (template_hole 14, template_hole 13),
          template_var 0),
        template_inequation (less_than, template_var 0, template_hole 13),
        template_negation
         (template_equation (template_var 0, template_hole 10))],
       template_equation
        (template_app
          (template_app
            (template_app (template_hole 8, template_hole 7),
             template_app
              (template_hole 6,
               template_app
                (template_app (template_hole 5, template_hole 4),
                 template_app (template_hole 3, template_var 1)))),
           template_app
            (template_hole 6,
             template_app
              (template_app (template_hole 5, template_hole 4),
               template_app (template_hole 3, template_var 0)))),
         template_app
          (template_app
            (template_hole 2,
             template_app
              (template_app
                (template_hole 1,
                 template_app
                  (template_app (template_hole 15, template_var 1),
                   template_hole 10)),
               template_app
                (template_app
                  (template_hole 1,
                   template_app
                    (template_app (template_hole 15, template_var 0),
                     template_hole 10)),
                 template_app
                  (template_app (template_hole 0, template_var 0),
                   template_var 1)))),
           template_app
            (template_app
              (template_hole 1,
               template_app
                (template_app (template_hole 15, template_hole 10),
                 template_var 1)),
             template_app
              (template_app
                (template_hole 1,
                 template_app
                  (template_app (template_hole 15, template_hole 10),
                   template_var 0)),
               template_app
                (template_app (template_hole 0, template_var 1),
                 template_var 0))))))),
    ("Poincare_Distance.unique_midpoint_x_axis",
     "[| is_real ?x; - 1 < Re ?x; Re ?x < 1; is_real ?y; - 1 < Re ?y;
         Re ?y < 1; ?x ~= ?y |]
      ==> EX! z.
             - 1 < Re z &
             Re z < 1 &
             is_real z &
             poincare_distance (of_complex z) (of_complex ?x) =
             poincare_distance (of_complex z) (of_complex ?y)",
     template_implication
      ([template_equation
         (template_app (template_hole 11, template_var 1),
          template_hole 10),
        template_inequation
         (less_than, template_app (template_hole 8, template_hole 7),
          template_app (template_hole 6, template_var 1)),
        template_inequation
         (less_than, template_app (template_hole 6, template_var 1),
          template_hole 7),
        template_equation
         (template_app (template_hole 11, template_var 0),
          template_hole 10),
        template_inequation
         (less_than, template_app (template_hole 8, template_hole 7),
          template_app (template_hole 6, template_var 0)),
        template_inequation
         (less_than, template_app (template_hole 6, template_var 0),
          template_hole 7),
        template_negation
         (template_equation (template_var 1, template_var 0))],
       template_predicate (template_app (template_hole 3, t_empty)))),
    ("Poincare_Circles.unit_disc_fix_f_congruent_triangles",
     "[| ?u : unit_disc; ?v : unit_disc; ?w : unit_disc; ?u' : unit_disc;
         ?v' : unit_disc; ?w' : unit_disc;
         poincare_distance ?u ?v = poincare_distance ?u' ?v';
         poincare_distance ?v ?w = poincare_distance ?v' ?w';
         poincare_distance ?u ?w = poincare_distance ?u' ?w' |]
      ==> EX M. unit_disc_fix_f M & M ?u = ?u' & M ?v = ?v' & M ?w = ?w'",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 7, template_var 5),
              template_hole 6)
            ),
        template_predicate
         (
            template_app
             (template_app (template_hole 7, template_var 4),
              template_hole 6)
            ),
        template_predicate
         (
            template_app
             (template_app (template_hole 7, template_var 3),
              template_hole 6)
            ),
        template_predicate
         (
            template_app
             (template_app (template_hole 7, template_var 2),
              template_hole 6)
            ),
        template_predicate
         (
            template_app
             (template_app (template_hole 7, template_var 1),
              template_hole 6)
            ),
        template_predicate
         (
            template_app
             (template_app (template_hole 7, template_var 0),
              template_hole 6)
            ),
        template_equation
         (template_app
           (template_app (template_hole 4, template_var 5), template_var 4),
          template_app
           (template_app (template_hole 4, template_var 2),
            template_var 1)),
        template_equation
         (template_app
           (template_app (template_hole 4, template_var 4), template_var 3),
          template_app
           (template_app (template_hole 4, template_var 1),
            template_var 0)),
        template_equation
         (template_app
           (template_app (template_hole 4, template_var 5), template_var 3),
          template_app
           (template_app (template_hole 4, template_var 2),
            template_var 0))],
       template_predicate (template_app (template_hole 3, t_empty)))),
    ("Poincare_Between.poincare_between_x_axis_uvw",
     "[| - 1 < ?x; ?x < 1; - 1 < ?y; ?y < 1; ?y ~= ?x; - 1 < ?z; ?z < 1;
         ?z ~= ?x |]
      ==> poincare_between (of_complex (cor ?x)) (of_complex (cor ?y))
           (of_complex (cor ?z)) =
          (?y < ?x & ?z < ?x & ?z <= ?y | ?x < ?y & ?x < ?z & ?y <= ?z)",
     template_implication
      ([template_inequation
         (less_than, template_app (template_hole 10, template_hole 9),
          template_var 2),
        template_inequation (less_than, template_var 2, template_hole 9),
        template_inequation
         (less_than, template_app (template_hole 10, template_hole 9),
          template_var 1),
        template_inequation (less_than, template_var 1, template_hole 9),
        template_negation
         (template_equation (template_var 1, template_var 2)),
        template_inequation
         (less_than, template_app (template_hole 10, template_hole 9),
          template_var 0),
        template_inequation (less_than, template_var 0, template_hole 9),
        template_negation
         (template_equation (template_var 0, template_var 2))],
       template_equation
        (template_app
          (template_app
            (template_app
              (template_hole 5,
               template_app
                (template_hole 4,
                 template_app (template_hole 3, template_var 2))),
             template_app
              (template_hole 4,
               template_app (template_hole 3, template_var 1))),
           template_app
            (template_hole 4,
             template_app (template_hole 3, template_var 0))),
         template_app
          (template_app
            (template_hole 2,
             template_app
              (template_app
                (template_hole 1,
                 template_app
                  (template_app (template_hole 11, template_var 1),
                   template_var 2)),
               template_app
                (template_app
                  (template_hole 1,
                   template_app
                    (template_app (template_hole 11, template_var 0),
                     template_var 2)),
                 template_app
                  (template_app (template_hole 0, template_var 0),
                   template_var 1)))),
           template_app
            (template_app
              (template_hole 1,
               template_app
                (template_app (template_hole 11, template_var 2),
                 template_var 1)),
             template_app
              (template_app
                (template_hole 1,
                 template_app
                  (template_app (template_hole 11, template_var 2),
                   template_var 0)),
               template_app
                (template_app (template_hole 0, template_var 1),
                 template_var 0))))))),
    ("Poincare_Lines.poincare_line_non_homogenous",
     "[| ?u ~= \<infinity>\<^sub>h; ?v ~= \<infinity>\<^sub>h; ?u ~= ?v;
         ?u ~= inversion ?v |]
      ==> let u' = to_complex ?u; v' = to_complex ?v;
              A = \<i> * (u' * cnj v' - v' * cnj u');
              B = \<i> *
                  (v' * cor ((cmod u')\<^sup>2 + 1) -
                   u' * cor ((cmod v')\<^sup>2 + 1))
          in poincare_line ?u ?v = mk_circline A B (cnj B) A",
     template_implication
      ([template_negation
         (template_equation (template_var 1, template_hole 18)),
        template_negation
         (template_equation (template_var 0, template_hole 18)),
        template_negation
         (template_equation (template_var 1, template_var 0)),
        template_negation
         (
            template_equation
             (template_var 1,
              template_app (template_hole 17, template_var 0))
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 16,
               template_app (template_hole 15, template_var 1)),
             t_empty)
           ))),
    ("Poincare_Circles.intersect_poincare_circles_x_axis",
     "[| is_real ?z1.0; is_real ?z2.0; 0 < ?r1.0; 0 < ?r2.0; - 1 < Re ?z1.0;
         Re ?z1.0 < 1; - 1 < Re ?z2.0; Re ?z2.0 < 1; ?z1.0 ~= ?z2.0;
         ?x1.0
         : poincare_circle (of_complex ?z1.0) ?r1.0 Int
           poincare_circle (of_complex ?z2.0) ?r2.0;
         ?x2.0
         : poincare_circle (of_complex ?z1.0) ?r1.0 Int
           poincare_circle (of_complex ?z2.0) ?r2.0;
         ?x1.0 ~= ?x2.0 |]
      ==> ?x1.0 = conjugate ?x2.0",
     template_implication
      ([template_equation
         (template_app (template_hole 13, template_var 5),
          template_hole 12),
        template_equation
         (template_app (template_hole 13, template_var 4),
          template_hole 12),
        template_inequation (less_than, template_hole 12, template_var 3),
        template_inequation (less_than, template_hole 12, template_var 2),
        template_inequation
         (less_than, template_app (template_hole 10, template_hole 9),
          template_app (template_hole 8, template_var 5)),
        template_inequation
         (less_than, template_app (template_hole 8, template_var 5),
          template_hole 9),
        template_inequation
         (less_than, template_app (template_hole 10, template_hole 9),
          template_app (template_hole 8, template_var 4)),
        template_inequation
         (less_than, template_app (template_hole 8, template_var 4),
          template_hole 9),
        template_negation
         (template_equation (template_var 5, template_var 4)),
        template_predicate
         (
            template_app
             (template_app (template_hole 5, template_var 1),
              template_app
               (template_app
                 (template_hole 4,
                  template_app
                   (template_app
                     (template_hole 3,
                      template_app (template_hole 2, template_var 5)),
                    template_var 3)),
                template_app
                 (template_app
                   (template_hole 3,
                    template_app (template_hole 2, template_var 4)),
                  template_var 2)))
            ),
        template_predicate
         (
            template_app
             (template_app (template_hole 5, template_var 0),
              template_app
               (template_app
                 (template_hole 4,
                  template_app
                   (template_app
                     (template_hole 3,
                      template_app (template_hole 2, template_var 5)),
                    template_var 3)),
                template_app
                 (template_app
                   (template_hole 3,
                    template_app (template_hole 2, template_var 4)),
                  template_var 2)))
            ),
        template_negation
         (template_equation (template_var 1, template_var 0))],
       template_equation
        (template_var 1, template_app (template_hole 0, template_var 0))))]:
   (string * thm * template) list
### theory "Draft.PoincareMoreTemplates"
### 0.462s elapsed time, 0.621s cpu time, 0.092s GC time
val it = (): unit
