Loading theory "Complex_Geometry.Linear_Systems" (required by "Draft.Poincare_Lines_Ideal_PointsMoreTemplates" via "Draft.Poincare_Lines_Ideal_Points" via "Draft.Poincare_Lines" via "Complex_Geometry.Unit_Circle_Preserving_Moebius" via "Complex_Geometry.Unitary11_Matrices" via "Complex_Geometry.Matrices")
Loading theory "Complex_Geometry.More_Set" (required by "Draft.Poincare_Lines_Ideal_PointsMoreTemplates" via "Draft.Poincare_Lines_Ideal_Points" via "Draft.Poincare_Lines" via "Complex_Geometry.Unit_Circle_Preserving_Moebius" via "Complex_Geometry.Oriented_Circlines" via "Complex_Geometry.Circlines")
Loading theory "HOL-Library.Nat_Bijection" (required by "Draft.Poincare_Lines_Ideal_PointsMoreTemplates" via "Draft.ExtrEqs" via "HOL-Library.Stream")
Loading theory "HOL-Library.Function_Algebras" (required by "Draft.Poincare_Lines_Ideal_PointsMoreTemplates" via "Draft.ExtrEqs" via "HOL-Library.BigO")
instantiation
  fun :: (type, plus) plus
  plus_fun == plus :: ('a => 'b) => ('a => 'b) => 'a => 'b
instantiation
  fun :: (type, zero) zero
  zero_fun == zero_class.zero :: 'a => 'b
instantiation
  fun :: (type, times) times
  times_fun == times :: ('a => 'b) => ('a => 'b) => 'a => 'b
### theory "Complex_Geometry.More_Set"
### 0.057s elapsed time, 0.252s cpu time, 0.000s GC time
Loading theory "HOL-Library.Set_Algebras" (required by "Draft.Poincare_Lines_Ideal_PointsMoreTemplates" via "Draft.ExtrEqs" via "HOL-Library.BigO")
instantiation
  fun :: (type, one) one
  one_fun == one_class.one :: 'a => 'b
### theory "Complex_Geometry.Linear_Systems"
### 0.078s elapsed time, 0.339s cpu time, 0.000s GC time
Loading theory "HOL-Library.Tree" (required by "Draft.Poincare_Lines_Ideal_PointsMoreTemplates" via "Draft.ExtrEqs" via "Draft.Templates")
instantiation
  set :: (plus) plus
  plus_set == plus :: 'a set => 'a set => 'a set
instantiation
  set :: (times) times
  times_set == times :: 'a set => 'a set => 'a set
instantiation
  set :: (zero) zero
  zero_set == zero_class.zero :: 'a set
Found termination order: "(%p. size (snd p)) <*mlex*> {}"
### theory "HOL-Library.Function_Algebras"
### 0.136s elapsed time, 0.556s cpu time, 0.041s GC time
Loading theory "HOL-Library.Periodic_Fun" (required by "Draft.Poincare_Lines_Ideal_PointsMoreTemplates" via "Draft.Poincare_Lines_Ideal_Points" via "Draft.Poincare_Lines" via "Complex_Geometry.Unit_Circle_Preserving_Moebius" via "Complex_Geometry.Unitary11_Matrices" via "Complex_Geometry.Matrices" via "Complex_Geometry.More_Complex" via "Complex_Geometry.More_Transcendental")
instantiation
  set :: (one) one
  one_set == one_class.one :: 'a set
locale periodic_fun
  fixes f :: "'a => 'b"
    and g :: "'a => 'a => 'a"
    and gm :: "'a => 'a => 'a"
    and g1 :: "'a => 'a"
    and gn1 :: "'a => 'a"
  assumes "periodic_fun f g gm g1 gn1"
locale periodic_fun_simple
  fixes f :: "'a => 'b"
    and period :: "'a"
  assumes "periodic_fun_simple f period"
locale periodic_fun_simple'
  fixes f :: "'a => 'b"
  assumes "periodic_fun_simple' f"
Found termination order: "size_list size <*mlex*> {}"
### theory "HOL-Library.Set_Algebras"
### 0.262s elapsed time, 1.023s cpu time, 0.116s GC time
Loading theory "HOL-Library.BigO" (required by "Draft.Poincare_Lines_Ideal_PointsMoreTemplates" via "Draft.ExtrEqs")
### theory "HOL-Library.Periodic_Fun"
### 0.199s elapsed time, 0.783s cpu time, 0.075s GC time
Loading theory "Complex_Geometry.More_Transcendental" (required by "Draft.Poincare_Lines_Ideal_PointsMoreTemplates" via "Draft.Poincare_Lines_Ideal_Points" via "Draft.Poincare_Lines" via "Complex_Geometry.Unit_Circle_Preserving_Moebius" via "Complex_Geometry.Unitary11_Matrices" via "Complex_Geometry.Matrices" via "Complex_Geometry.More_Complex")
### theory "HOL-Library.Nat_Bijection"
### 0.426s elapsed time, 1.700s cpu time, 0.116s GC time
Loading theory "HOL-Library.Stream" (required by "Draft.Poincare_Lines_Ideal_PointsMoreTemplates" via "Draft.ExtrEqs")
### theory "Complex_Geometry.More_Transcendental"
### 0.122s elapsed time, 0.482s cpu time, 0.000s GC time
Loading theory "Complex_Geometry.Canonical_Angle" (required by "Draft.Poincare_Lines_Ideal_PointsMoreTemplates" via "Draft.Poincare_Lines_Ideal_Points" via "Draft.Poincare_Lines" via "Complex_Geometry.Unit_Circle_Preserving_Moebius" via "Complex_Geometry.Unitary11_Matrices" via "Complex_Geometry.Matrices" via "Complex_Geometry.More_Complex")
consts
  left :: "'a tree => 'a tree"
consts
  right :: "'a tree => 'a tree"
### theory "Complex_Geometry.Canonical_Angle"
### 0.145s elapsed time, 0.580s cpu time, 0.068s GC time
Loading theory "Complex_Geometry.More_Complex" (required by "Draft.Poincare_Lines_Ideal_PointsMoreTemplates" via "Draft.Poincare_Lines_Ideal_Points" via "Draft.Poincare_Lines" via "Complex_Geometry.Unit_Circle_Preserving_Moebius" via "Complex_Geometry.Unitary11_Matrices" via "Complex_Geometry.Matrices")
Found termination order: "size <*mlex*> {}"
Found termination order: "size <*mlex*> {}"
Found termination order: "size <*mlex*> {}"
class height = type +
  fixes height :: "'a => nat"
instantiation
  tree :: (type) height
  height_tree == height :: 'a tree => nat
Found termination order: "size <*mlex*> {}"
consts
  shift :: "'a list => 'a stream => 'a stream"
Found termination order: "size <*mlex*> {}"
Proofs for coinductive predicate(s) "streamsp"
  Proving monotonicity ...
### theory "Complex_Geometry.More_Complex"
### 0.346s elapsed time, 1.360s cpu time, 0.137s GC time
Loading theory "Complex_Geometry.Angles" (required by "Draft.Poincare_Lines_Ideal_PointsMoreTemplates" via "Draft.Poincare_Lines_Ideal_Points" via "Draft.Poincare_Lines" via "Complex_Geometry.Unit_Circle_Preserving_Moebius" via "Complex_Geometry.Oriented_Circlines" via "Complex_Geometry.Circlines" via "Complex_Geometry.Elementary_Complex_Geometry")
Found termination order: "size <*mlex*> {}"
consts
  snth :: "'a stream => nat => 'a"
consts
  stake :: "nat => 'a stream => 'a list"
consts
  sdrop :: "nat => 'a stream => 'a stream"
Found termination order: "size <*mlex*> {}"
### theory "HOL-Library.BigO"
### 0.954s elapsed time, 3.621s cpu time, 0.796s GC time
Loading theory "HOL-Library.Quadratic_Discriminant" (required by "Draft.Poincare_Lines_Ideal_PointsMoreTemplates" via "Draft.Poincare_Lines_Ideal_Points" via "Draft.Poincare_Lines" via "Complex_Geometry.Unit_Circle_Preserving_Moebius" via "Complex_Geometry.Unitary11_Matrices" via "Complex_Geometry.Matrices" via "Complex_Geometry.Quadratic")
### theory "Complex_Geometry.Angles"
### 0.334s elapsed time, 1.158s cpu time, 0.590s GC time
Loading theory "Complex_Geometry.Elementary_Complex_Geometry" (required by "Draft.Poincare_Lines_Ideal_PointsMoreTemplates" via "Draft.Poincare_Lines_Ideal_Points" via "Draft.Poincare_Lines" via "Complex_Geometry.Unit_Circle_Preserving_Moebius" via "Complex_Geometry.Oriented_Circlines" via "Complex_Geometry.Circlines")
consts
  sfilter :: "('a => bool) => 'a stream => 'a stream"
Found termination order: "size <*mlex*> {}"
consts
  cycle :: "'a list => 'a stream"
### theory "HOL-Library.Quadratic_Discriminant"
### 0.102s elapsed time, 0.409s cpu time, 0.000s GC time
Loading theory "Complex_Geometry.Quadratic" (required by "Draft.Poincare_Lines_Ideal_PointsMoreTemplates" via "Draft.Poincare_Lines_Ideal_Points" via "Draft.Poincare_Lines" via "Complex_Geometry.Unit_Circle_Preserving_Moebius" via "Complex_Geometry.Unitary11_Matrices" via "Complex_Geometry.Matrices")
consts
  siterate :: "('a => 'a) => 'a => 'a stream"
Found termination order: "size <*mlex*> {}"
consts
  flat :: "'a list stream => 'a stream"
Found termination order: "size <*mlex*> {}"
consts
  sinterleave :: "'a stream => 'a stream => 'a stream"
consts
  szip :: "'a stream => 'b stream => ('a * 'b) stream"
Found termination order: "(%p. size (fst p)) <*mlex*> {}"
consts
  smap2 :: "('a => 'b => 'c) => 'a stream => 'b stream => 'c stream"
### theory "HOL-Library.Stream"
### 1.175s elapsed time, 4.492s cpu time, 0.887s GC time
Found termination order: "size <*mlex*> {}"
### theory "Complex_Geometry.Quadratic"
### 0.339s elapsed time, 1.243s cpu time, 0.173s GC time
Loading theory "Complex_Geometry.Matrices" (required by "Draft.Poincare_Lines_Ideal_PointsMoreTemplates" via "Draft.Poincare_Lines_Ideal_Points" via "Draft.Poincare_Lines" via "Complex_Geometry.Unit_Circle_Preserving_Moebius" via "Complex_Geometry.Unitary11_Matrices")
Found termination order: "(%p. size (snd p)) <*mlex*> {}"
### theory "Complex_Geometry.Elementary_Complex_Geometry"
### 0.589s elapsed time, 2.090s cpu time, 0.259s GC time
Found termination order: "size <*mlex*> {}"
Found termination order: "{}"
### theory "HOL-Library.Tree"
### 2.063s elapsed time, 7.299s cpu time, 1.218s GC time
Loading theory "Draft.Templates" (required by "Draft.Poincare_Lines_Ideal_PointsMoreTemplates" via "Draft.ExtrEqs")
Found termination order: "{}"
datatype template_term
=
     t_empty
   | template_app of template_term * template_term
   | template_hole of int
   | template_var of int
datatype sign
= equals | greater_equals | greater_than | less_equals | less_than
datatype template
=
     template_bimplication of template * template
   | template_dunno
   | template_equation of template_term * template_term
   | template_implication of template list * template
   | template_inequation of sign * template_term * template_term
   | template_negation of template
   | template_predicate of template_term
constructor t_empty: template_term
constructor template_app: template_term * template_term -> template_term
constructor template_hole: int -> template_term
constructor template_var: int -> template_term
constructor equals: sign
constructor greater_equals: sign
constructor greater_than: sign
constructor less_equals: sign
constructor less_than: sign
constructor template_bimplication: template * template -> template
constructor template_dunno: template
constructor template_equation: template_term * template_term -> template
constructor template_implication: template list * template -> template
constructor template_inequation:
   sign * template_term * template_term -> template
constructor template_negation: template -> template
constructor template_predicate: template_term -> template
val vfs = fn: term -> (indexname * typ) list * (string * typ) list
val indexOf = fn: ''a list -> ''a -> int -> int
val has_eq = fn: term -> bool
val term2template = fn:
   (indexname * typ) list -> (string * typ) list -> term -> template_term
val lemma2predicate = fn: term -> term -> template
val makeTemplatewithContext = fn: term -> term -> template
val lemma2template = fn: term -> template
val thm2template = fn: thm -> template
val tterm2string = fn: template_term -> string
val template2string = fn: template -> string
val t = "height ?t <= size ?t": thm
val th =
   Const ("HOL.Trueprop", "bool => prop") $
     (Const ("Orderings.ord_class.less_eq", "nat => nat => bool") $
       (Const ("Tree.height_class.height", "?'a tree => nat") $
         Var (("t", 0), "?'a tree")) $
       (Const ("Nat.size_class.size", "?'a tree => nat") $
         Var (("t", 0), "?'a tree"))):
   term
### theory "Draft.Templates"
### 0.057s elapsed time, 0.129s cpu time, 0.000s GC time
Loading theory "Draft.ExtrEqs" (required by "Draft.Poincare_Lines_Ideal_PointsMoreTemplates")
Found termination order: "{}"
Found termination order: "{}"
Found termination order: "{}"
Found termination order: "{}"
Found termination order: "{}"
Found termination order: "{}"
Found termination order: "{}"
Found termination order: "{}"
Found termination order: "{}"
Found termination order: "{}"
val eqpattern =
   Pattern
    (
       Const ("HOL.Trueprop", "bool => prop") $
         (Const ("HOL.eq", "?'a => ?'a => bool") $
           Var (("_dummy_", 1), "?'a") $ Var (("_dummy_", 2), "?'a"))
       ):
   term Find_Theorems.criterion
val badeqpattern = Pattern (Const ("Pure.eq", "?'a => ?'a => prop")):
   term Find_Theorems.criterion
val undefpattern =
   Pattern
    (
       Const ("HOL.Trueprop", "bool => prop") $
         (Const ("HOL.eq", "?'a => ?'a => bool") $
           Var (("_dummy_", 1), "?'a") $ Const ("HOL.undefined", "?'a"))
       ):
   term Find_Theorems.criterion
val thmpattern =
   Pattern
    (Const ("HOL.Trueprop", "bool => prop") $ Var (("_dummy_", 1), "bool")):
   term Find_Theorems.criterion
val badnames =
   ["*nitpick*", "*Nitpick*", "*full_exhaustive*", "*_def*", "Enum.finite*",
    "*Quickcheck*", "ATP*", "*Nunchaku*", "*Code*", "*BNF*", "*SMT*",
    "*.*.*"]:
   string list
val unwanted_names =
   [(false, Name "*nitpick*"), (false, Name "*Nitpick*"),
    (false, Name "*full_exhaustive*"), (false, Name "*_def*"),
    (false, Name "Enum.finite*"), (false, Name "*Quickcheck*"),
    (false, Name "ATP*"), (false, Name "*Nunchaku*"),
    (false, Name "*Code*"), (false, Name "*BNF*"), (false, Name "*SMT*"),
    (false, Name "*.*.*")]:
   (bool * term Find_Theorems.criterion) list
val has_vars = fn: term -> bool
val get_all_eqs = fn: string -> Proof.context -> (string * thm) list
val get_all_thms = fn: string -> Proof.context -> (string * thm) list
val get_noneq_thms = fn: string -> Proof.context -> (string * thm) list
val template_eqs = fn:
   string -> Proof.context -> (string * thm * template) list
val template_thms = fn:
   string -> Proof.context -> (string * thm * template) list
### theory "Draft.ExtrEqs"
### 0.558s elapsed time, 1.173s cpu time, 0.117s GC time
Found termination order: "{}"
Found termination order: "{}"
Found termination order: "{}"
Found termination order: "{}"
### theory "Complex_Geometry.Matrices"
### 1.334s elapsed time, 2.680s cpu time, 0.309s GC time
Loading theory "Complex_Geometry.Homogeneous_Coordinates" (required by "Draft.Poincare_Lines_Ideal_PointsMoreTemplates" via "Draft.Poincare_Lines_Ideal_Points" via "Draft.Poincare_Lines" via "Complex_Geometry.Unit_Circle_Preserving_Moebius" via "Complex_Geometry.Moebius")
Loading theory "Complex_Geometry.Unitary11_Matrices" (required by "Draft.Poincare_Lines_Ideal_PointsMoreTemplates" via "Draft.Poincare_Lines_Ideal_Points" via "Draft.Poincare_Lines" via "Complex_Geometry.Unit_Circle_Preserving_Moebius")
Loading theory "Complex_Geometry.Unitary_Matrices" (required by "Draft.Poincare_Lines_Ideal_PointsMoreTemplates" via "Draft.Poincare_Lines_Ideal_Points" via "Draft.Poincare_Lines" via "Complex_Geometry.Unit_Circle_Preserving_Moebius" via "Complex_Geometry.Oriented_Circlines" via "Complex_Geometry.Circlines" via "Complex_Geometry.Hermitean_Matrices")
### theory "Complex_Geometry.Unitary_Matrices"
### 0.100s elapsed time, 0.316s cpu time, 0.084s GC time
Loading theory "Complex_Geometry.Hermitean_Matrices" (required by "Draft.Poincare_Lines_Ideal_PointsMoreTemplates" via "Draft.Poincare_Lines_Ideal_Points" via "Draft.Poincare_Lines" via "Complex_Geometry.Unit_Circle_Preserving_Moebius" via "Complex_Geometry.Oriented_Circlines" via "Complex_Geometry.Circlines")
### theory "Complex_Geometry.Unitary11_Matrices"
### 0.177s elapsed time, 0.549s cpu time, 0.084s GC time
### theory "Complex_Geometry.Hermitean_Matrices"
### 0.081s elapsed time, 0.242s cpu time, 0.000s GC time
### theory "Complex_Geometry.Homogeneous_Coordinates"
### 0.867s elapsed time, 1.852s cpu time, 0.964s GC time
Loading theory "Complex_Geometry.Moebius" (required by "Draft.Poincare_Lines_Ideal_PointsMoreTemplates" via "Draft.Poincare_Lines_Ideal_Points" via "Draft.Poincare_Lines" via "Complex_Geometry.Unit_Circle_Preserving_Moebius")
instantiation
  moebius :: group_add
  minus_moebius == minus :: moebius => moebius => moebius
  uminus_moebius == uminus_class.uminus :: moebius => moebius
  zero_moebius == zero_class.zero :: moebius
  plus_moebius == plus :: moebius => moebius => moebius
### theory "Complex_Geometry.Moebius"
### 0.627s elapsed time, 0.748s cpu time, 0.165s GC time
Loading theory "Complex_Geometry.Circlines" (required by "Draft.Poincare_Lines_Ideal_PointsMoreTemplates" via "Draft.Poincare_Lines_Ideal_Points" via "Draft.Poincare_Lines" via "Complex_Geometry.Unit_Circle_Preserving_Moebius" via "Complex_Geometry.Oriented_Circlines")
### theory "Complex_Geometry.Circlines"
### 1.635s elapsed time, 2.528s cpu time, 1.238s GC time
Loading theory "Complex_Geometry.Oriented_Circlines" (required by "Draft.Poincare_Lines_Ideal_PointsMoreTemplates" via "Draft.Poincare_Lines_Ideal_Points" via "Draft.Poincare_Lines" via "Complex_Geometry.Unit_Circle_Preserving_Moebius")
### theory "Complex_Geometry.Oriented_Circlines"
### 0.441s elapsed time, 0.482s cpu time, 0.055s GC time
Loading theory "Complex_Geometry.Circlines_Angle" (required by "Draft.Poincare_Lines_Ideal_PointsMoreTemplates" via "Draft.Poincare_Lines_Ideal_Points" via "Draft.Poincare_Lines")
Loading theory "Complex_Geometry.Unit_Circle_Preserving_Moebius" (required by "Draft.Poincare_Lines_Ideal_PointsMoreTemplates" via "Draft.Poincare_Lines_Ideal_Points" via "Draft.Poincare_Lines")
Found termination order: "{}"
### theory "Complex_Geometry.Circlines_Angle"
### 0.172s elapsed time, 0.391s cpu time, 0.097s GC time
### theory "Complex_Geometry.Unit_Circle_Preserving_Moebius"
### 0.473s elapsed time, 0.756s cpu time, 0.190s GC time
Loading theory "Draft.Poincare_Lines" (required by "Draft.Poincare_Lines_Ideal_PointsMoreTemplates" via "Draft.Poincare_Lines_Ideal_Points")
### theory "Draft.Poincare_Lines"
### 0.428s elapsed time, 0.501s cpu time, 0.097s GC time
Loading theory "Draft.Poincare_Lines_Ideal_Points" (required by "Draft.Poincare_Lines_Ideal_PointsMoreTemplates")
### theory "Draft.Poincare_Lines_Ideal_Points"
### 0.142s elapsed time, 0.142s cpu time, 0.000s GC time
Loading theory "Draft.Poincare_Lines_Ideal_PointsMoreTemplates"
val templateLemmas =
   [("Poincare_Lines_Ideal_Points.calc_ideal_points_on_unit_circle",
     "ALL z:calc_ideal_points ?H. z : circline_set unit_circle",
     template_predicate
      (
         template_app
          (template_app
            (template_hole 4,
             template_app (template_hole 3, template_var 0)),
           t_empty)
         )),
    ("Poincare_Lines_Ideal_Points.ideal_points_on_unit_circle",
     "ALL z:ideal_points ?H. z : circline_set unit_circle",
     template_predicate
      (
         template_app
          (template_app
            (template_hole 4,
             template_app (template_hole 3, template_var 0)),
           t_empty)
         )),
    ("Poincare_Lines_Ideal_Points.ideal_points_on_circline",
     "ALL z:ideal_points ?H. z : circline_set ?H",
     template_predicate
      (
         template_app
          (template_app
            (template_hole 3,
             template_app (template_hole 2, template_var 0)),
           t_empty)
         )),
    ("Poincare_Lines_Ideal_Points.ideal_points_unique",
     "is_poincare_line ?H ==> ideal_points ?H = calc_ideal_points ?H",
     template_implication
      ([template_predicate
         (template_app (template_hole 3, template_var 0))],
       template_equation
        (template_app (template_hole 1, template_var 0),
         template_app (template_hole 0, template_var 0)))),
    ("Poincare_Lines_Ideal_Points.two_calc_ideal_points",
     "is_poincare_line ?H ==> card (calc_ideal_points ?H) = 2",
     template_implication
      ([template_predicate
         (template_app (template_hole 6, template_var 0))],
       template_equation
        (template_app
          (template_hole 4, template_app (template_hole 3, template_var 0)),
         template_app
          (template_hole 2,
           template_app (template_hole 1, template_hole 0))))),
    ("Poincare_Lines_Ideal_Points.two_ideal_points",
     "is_poincare_line ?H ==> card (ideal_points ?H) = 2",
     template_implication
      ([template_predicate
         (template_app (template_hole 6, template_var 0))],
       template_equation
        (template_app
          (template_hole 4, template_app (template_hole 3, template_var 0)),
         template_app
          (template_hole 2,
           template_app (template_hole 1, template_hole 0))))),
    ("Poincare_Lines_Ideal_Points.ideal_points_conjugate",
     "is_poincare_line ?H ==>
      ideal_points (conjugate_circline ?H) = conjugate ` ideal_points ?H",
     template_implication
      ([template_predicate
         (template_app (template_hole 5, template_var 0))],
       template_equation
        (template_app
          (template_hole 3, template_app (template_hole 2, template_var 0)),
         template_app
          (template_app (template_hole 1, template_hole 0),
           template_app (template_hole 3, template_var 0))))),
    ("Poincare_Lines_Ideal_Points.calc_ideal_points_on_circline",
     "is_poincare_line ?H ==>
      ALL z:calc_ideal_points ?H. z : circline_set ?H",
     template_implication
      ([template_predicate
         (template_app (template_hole 4, template_var 0))],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 3,
               template_app (template_hole 2, template_var 0)),
             t_empty)
           ))),
    ("Poincare_Lines_Ideal_Points.calc_ideal_points_different",
     "is_poincare_line ?H ==>
      EX i1:calc_ideal_points ?H. EX i2:calc_ideal_points ?H. i1 ~= i2",
     template_implication
      ([template_predicate
         (template_app (template_hole 4, template_var 0))],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 3,
               template_app (template_hole 2, template_var 0)),
             t_empty)
           ))),
    ("Poincare_Lines_Ideal_Points.ideal_points_moebius_circline",
     "[| unit_circle_fix ?M; is_poincare_line ?H |]
      ==> ideal_points (moebius_circline ?M ?H) =
          moebius_pt ?M ` ideal_points ?H",
     template_implication
      ([template_predicate (template_app (template_hole 6, template_var 1)),
        template_predicate
         (template_app (template_hole 5, template_var 0))],
       template_equation
        (template_app
          (template_hole 3,
           template_app
            (template_app (template_hole 2, template_var 1),
             template_var 0)),
         template_app
          (template_app
            (template_hole 1,
             template_app (template_hole 0, template_var 1)),
           template_app (template_hole 3, template_var 0))))),
    ("Poincare_Lines_Ideal_Points.ideal_points_line_unique",
     "[| is_poincare_line ?H; ideal_points ?H = {?i1.0, ?i2.0} |]
      ==> ?H = poincare_line ?i1.0 ?i2.0",
     template_implication
      ([template_predicate (template_app (template_hole 6, template_var 2)),
        template_equation
         (template_app (template_hole 4, template_var 2),
          template_app
           (template_app (template_hole 3, template_var 1),
            template_app
             (template_app (template_hole 3, template_var 0),
              template_hole 2)))],
       template_equation
        (template_var 2,
         template_app
          (template_app (template_hole 0, template_var 1),
           template_var 0)))),
    ("Poincare_Lines_Ideal_Points.obtain_ideal_points",
     "[| is_poincare_line ?H;
         !!i1 i2. [| i1 ~= i2; ideal_points ?H = {i1, i2} |] ==> ?thesis |]
      ==> ?thesis",
     template_implication
      ([template_predicate (template_app (template_hole 7, template_var 1)),
        template_predicate (template_app (template_hole 6, t_empty))],
       template_predicate (template_var 0))),
    ("Poincare_Lines_Ideal_Points.ideal_points_proportional",
     "[| is_poincare_line ?H; ideal_points ?H = {?i1.0, ?i2.0};
         to_complex ?i1.0 = cor ?k * to_complex ?i2.0 |]
      ==> 0\<^sub>h : circline_set ?H",
     template_implication
      ([template_predicate
         (template_app (template_hole 11, template_var 3)),
        template_equation
         (template_app (template_hole 9, template_var 3),
          template_app
           (template_app (template_hole 8, template_var 2),
            template_app
             (template_app (template_hole 8, template_var 1),
              template_hole 7))),
        template_equation
         (template_app (template_hole 5, template_var 2),
          template_app
           (template_app
             (template_hole 4,
              template_app (template_hole 3, template_var 0)),
            template_app (template_hole 5, template_var 1)))],
       template_predicate
        (
           template_app
            (template_app (template_hole 2, template_hole 1),
             template_app (template_hole 0, template_var 3))
           ))),
    ("Poincare_Lines_Ideal_Points.calc_ideal_points_cvec_different",
     "[| (cmod ?A)\<^sup>2 < (cmod ?B)\<^sup>2; is_real ?A |]
      ==> ~ calc_ideal_point1_cvec ?A ?B \<approx>\<^sub>v
            calc_ideal_point2_cvec ?A ?B",
     template_implication
      ([template_inequation
         (less_than,
          template_app
           (template_app
             (template_hole 11,
              template_app (template_hole 10, template_var 1)),
            template_app
             (template_hole 9,
              template_app (template_hole 8, template_hole 7))),
          template_app
           (template_app
             (template_hole 11,
              template_app (template_hole 10, template_var 0)),
            template_app
             (template_hole 9,
              template_app (template_hole 8, template_hole 7)))),
        template_equation
         (template_app (template_hole 5, template_var 1), template_hole 4)],
       template_negation
        (
           template_predicate
            (
               template_app
                (template_app
                  (template_hole 2,
                   template_app
                    (template_app (template_hole 1, template_var 1),
                     template_var 0)),
                 template_app
                  (template_app (template_hole 0, template_var 1),
                   template_var 0))
               )
           ))),
    ("Poincare_Lines_Ideal_Points.ideal_points_different",
     "[| ?u : unit_disc; ?v : unit_disc; ?u ~= ?v;
         ideal_points (poincare_line ?u ?v) = {?i1.0, ?i2.0} |]
      ==> ?i1.0 ~= ?i2.0",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 8, template_var 3),
              template_hole 7)
            ),
        template_predicate
         (
            template_app
             (template_app (template_hole 8, template_var 2),
              template_hole 7)
            ),
        template_negation
         (template_equation (template_var 3, template_var 2)),
        template_equation
         (template_app
           (template_hole 3,
            template_app
             (template_app (template_hole 2, template_var 3),
              template_var 2)),
          template_app
           (template_app (template_hole 1, template_var 1),
            template_app
             (template_app (template_hole 1, template_var 0),
              template_hole 0)))],
       template_negation
        (template_equation (template_var 1, template_var 0)))),
    ("Poincare_Lines_Ideal_Points.ideal_points_different",
     "[| ?u : unit_disc; ?v : unit_disc; ?u ~= ?v;
         ideal_points (poincare_line ?u ?v) = {?i1.0, ?i2.0} |]
      ==> ?u ~= ?i1.0",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 8, template_var 3),
              template_hole 7)
            ),
        template_predicate
         (
            template_app
             (template_app (template_hole 8, template_var 2),
              template_hole 7)
            ),
        template_negation
         (template_equation (template_var 3, template_var 2)),
        template_equation
         (template_app
           (template_hole 3,
            template_app
             (template_app (template_hole 2, template_var 3),
              template_var 2)),
          template_app
           (template_app (template_hole 1, template_var 1),
            template_app
             (template_app (template_hole 1, template_var 0),
              template_hole 0)))],
       template_negation
        (template_equation (template_var 3, template_var 1)))),
    ("Poincare_Lines_Ideal_Points.ideal_points_different",
     "[| ?u : unit_disc; ?v : unit_disc; ?u ~= ?v;
         ideal_points (poincare_line ?u ?v) = {?i1.0, ?i2.0} |]
      ==> ?u ~= ?i2.0",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 8, template_var 3),
              template_hole 7)
            ),
        template_predicate
         (
            template_app
             (template_app (template_hole 8, template_var 2),
              template_hole 7)
            ),
        template_negation
         (template_equation (template_var 3, template_var 2)),
        template_equation
         (template_app
           (template_hole 3,
            template_app
             (template_app (template_hole 2, template_var 3),
              template_var 2)),
          template_app
           (template_app (template_hole 1, template_var 1),
            template_app
             (template_app (template_hole 1, template_var 0),
              template_hole 0)))],
       template_negation
        (template_equation (template_var 3, template_var 0)))),
    ("Poincare_Lines_Ideal_Points.ideal_points_different",
     "[| ?u : unit_disc; ?v : unit_disc; ?u ~= ?v;
         ideal_points (poincare_line ?u ?v) = {?i1.0, ?i2.0} |]
      ==> ?v ~= ?i1.0",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 8, template_var 3),
              template_hole 7)
            ),
        template_predicate
         (
            template_app
             (template_app (template_hole 8, template_var 2),
              template_hole 7)
            ),
        template_negation
         (template_equation (template_var 3, template_var 2)),
        template_equation
         (template_app
           (template_hole 3,
            template_app
             (template_app (template_hole 2, template_var 3),
              template_var 2)),
          template_app
           (template_app (template_hole 1, template_var 1),
            template_app
             (template_app (template_hole 1, template_var 0),
              template_hole 0)))],
       template_negation
        (template_equation (template_var 2, template_var 1)))),
    ("Poincare_Lines_Ideal_Points.ideal_points_different",
     "[| ?u : unit_disc; ?v : unit_disc; ?u ~= ?v;
         ideal_points (poincare_line ?u ?v) = {?i1.0, ?i2.0} |]
      ==> ?v ~= ?i2.0",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 8, template_var 3),
              template_hole 7)
            ),
        template_predicate
         (
            template_app
             (template_app (template_hole 8, template_var 2),
              template_hole 7)
            ),
        template_negation
         (template_equation (template_var 3, template_var 2)),
        template_equation
         (template_app
           (template_hole 3,
            template_app
             (template_app (template_hole 2, template_var 3),
              template_var 2)),
          template_app
           (template_app (template_hole 1, template_var 1),
            template_app
             (template_app (template_hole 1, template_var 0),
              template_hole 0)))],
       template_negation
        (template_equation (template_var 2, template_var 0)))),
    ("Poincare_Lines_Ideal_Points.calc_ideal_point_1_unit",
     "[| is_real ?A; (cmod ?A)\<^sup>2 < (cmod ?B)\<^sup>2;
         (?z1.0, ?z2.0) = calc_ideal_point1_cvec ?A ?B |]
      ==> ?z1.0 * cnj ?z1.0 = ?z2.0 * cnj ?z2.0",
     template_implication
      ([template_equation
         (template_app (template_hole 13, template_var 3),
          template_hole 12),
        template_inequation
         (less_than,
          template_app
           (template_app
             (template_hole 10,
              template_app (template_hole 9, template_var 3)),
            template_app
             (template_hole 8,
              template_app (template_hole 7, template_hole 6))),
          template_app
           (template_app
             (template_hole 10,
              template_app (template_hole 9, template_var 2)),
            template_app
             (template_hole 8,
              template_app (template_hole 7, template_hole 6)))),
        template_equation
         (template_app
           (template_app (template_hole 4, template_var 1), template_var 0),
          template_app
           (template_app (template_hole 3, template_var 3),
            template_var 2))],
       template_equation
        (template_app
          (template_app (template_hole 1, template_var 1),
           template_app (template_hole 0, template_var 1)),
         template_app
          (template_app (template_hole 1, template_var 0),
           template_app (template_hole 0, template_var 0))))),
    ("Poincare_Lines_Ideal_Points.calc_ideal_point_2_unit",
     "[| is_real ?A; (cmod ?A)\<^sup>2 < (cmod ?B)\<^sup>2;
         (?z1.0, ?z2.0) = calc_ideal_point2_cvec ?A ?B |]
      ==> ?z1.0 * cnj ?z1.0 = ?z2.0 * cnj ?z2.0",
     template_implication
      ([template_equation
         (template_app (template_hole 13, template_var 3),
          template_hole 12),
        template_inequation
         (less_than,
          template_app
           (template_app
             (template_hole 10,
              template_app (template_hole 9, template_var 3)),
            template_app
             (template_hole 8,
              template_app (template_hole 7, template_hole 6))),
          template_app
           (template_app
             (template_hole 10,
              template_app (template_hole 9, template_var 2)),
            template_app
             (template_hole 8,
              template_app (template_hole 7, template_hole 6)))),
        template_equation
         (template_app
           (template_app (template_hole 4, template_var 1), template_var 0),
          template_app
           (template_app (template_hole 3, template_var 3),
            template_var 2))],
       template_equation
        (template_app
          (template_app (template_hole 1, template_var 1),
           template_app (template_hole 0, template_var 1)),
         template_app
          (template_app (template_hole 1, template_var 0),
           template_app (template_hole 0, template_var 0))))),
    ("Poincare_Lines_Ideal_Points.ideal_points_poincare_line_conjugate",
     "[| ?u : unit_disc; ?v : unit_disc; ?u ~= ?v;
         ideal_points (poincare_line ?u ?v) = {?i1.0, ?i2.0} |]
      ==> ideal_points (poincare_line (conjugate ?u) (conjugate ?v)) =
          {conjugate ?i1.0, conjugate ?i2.0}",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 9, template_var 3),
              template_hole 8)
            ),
        template_predicate
         (
            template_app
             (template_app (template_hole 9, template_var 2),
              template_hole 8)
            ),
        template_negation
         (template_equation (template_var 3, template_var 2)),
        template_equation
         (template_app
           (template_hole 4,
            template_app
             (template_app (template_hole 3, template_var 3),
              template_var 2)),
          template_app
           (template_app (template_hole 2, template_var 1),
            template_app
             (template_app (template_hole 2, template_var 0),
              template_hole 1)))],
       template_equation
        (template_app
          (template_hole 4,
           template_app
            (template_app
              (template_hole 3,
               template_app (template_hole 0, template_var 3)),
             template_app (template_hole 0, template_var 2))),
         template_app
          (template_app
            (template_hole 2,
             template_app (template_hole 0, template_var 1)),
           template_app
            (template_app
              (template_hole 2,
               template_app (template_hole 0, template_var 0)),
             template_hole 1))))),
    ("Poincare_Lines_Ideal_Points.ideal_points_poincare_line_moebius",
     "[| unit_disc_fix ?M; ?u : unit_disc; ?v : unit_disc; ?u ~= ?v;
         ideal_points (poincare_line ?u ?v) = {?i1.0, ?i2.0} |]
      ==> ideal_points
           (poincare_line (moebius_pt ?M ?u) (moebius_pt ?M ?v)) =
          {moebius_pt ?M ?i1.0, moebius_pt ?M ?i2.0}",
     template_implication
      ([template_predicate
         (template_app (template_hole 10, template_var 4)),
        template_predicate
         (
            template_app
             (template_app (template_hole 9, template_var 3),
              template_hole 8)
            ),
        template_predicate
         (
            template_app
             (template_app (template_hole 9, template_var 2),
              template_hole 8)
            ),
        template_negation
         (template_equation (template_var 3, template_var 2)),
        template_equation
         (template_app
           (template_hole 4,
            template_app
             (template_app (template_hole 3, template_var 3),
              template_var 2)),
          template_app
           (template_app (template_hole 2, template_var 1),
            template_app
             (template_app (template_hole 2, template_var 0),
              template_hole 1)))],
       template_equation
        (template_app
          (template_hole 4,
           template_app
            (template_app
              (template_hole 3,
               template_app
                (template_app (template_hole 0, template_var 4),
                 template_var 3)),
             template_app
              (template_app (template_hole 0, template_var 4),
               template_var 2))),
         template_app
          (template_app
            (template_hole 2,
             template_app
              (template_app (template_hole 0, template_var 4),
               template_var 1)),
           template_app
            (template_app
              (template_hole 2,
               template_app
                (template_app (template_hole 0, template_var 4),
                 template_var 0)),
             template_hole 1))))),
    ("Poincare_Lines_Ideal_Points.calc_ideal_point1_sq",
     "[| (?z1.0, ?z2.0) = calc_ideal_point1_cvec ?A ?B; is_real ?A;
         (cmod ?A)\<^sup>2 < (cmod ?B)\<^sup>2 |]
      ==> ?z1.0 * cnj ?z1.0 + ?z2.0 * cnj ?z2.0 =
          2 * (?B * cnj ?B)\<^sup>2",
     template_implication
      ([template_equation
         (template_app
           (template_app (template_hole 16, template_var 3),
            template_var 2),
          template_app
           (template_app (template_hole 15, template_var 1),
            template_var 0)),
        template_equation
         (template_app (template_hole 13, template_var 1),
          template_hole 12),
        template_inequation
         (less_than,
          template_app
           (template_app
             (template_hole 10,
              template_app (template_hole 9, template_var 1)),
            template_app
             (template_hole 8,
              template_app (template_hole 7, template_hole 6))),
          template_app
           (template_app
             (template_hole 10,
              template_app (template_hole 9, template_var 0)),
            template_app
             (template_hole 8,
              template_app (template_hole 7, template_hole 6))))],
       template_equation
        (template_app
          (template_app
            (template_hole 4,
             template_app
              (template_app (template_hole 3, template_var 3),
               template_app (template_hole 2, template_var 3))),
           template_app
            (template_app (template_hole 3, template_var 2),
             template_app (template_hole 2, template_var 2))),
         template_app
          (template_app
            (template_hole 3,
             template_app
              (template_hole 1,
               template_app (template_hole 7, template_hole 6))),
           template_app
            (template_app
              (template_hole 0,
               template_app
                (template_app (template_hole 3, template_var 0),
                 template_app (template_hole 2, template_var 0))),
             template_app
              (template_hole 8,
               template_app (template_hole 7, template_hole 6))))))),
    ("Poincare_Lines_Ideal_Points.calc_ideal_point2_sq",
     "[| (?z1.0, ?z2.0) = calc_ideal_point2_cvec ?A ?B; is_real ?A;
         (cmod ?A)\<^sup>2 < (cmod ?B)\<^sup>2 |]
      ==> ?z1.0 * cnj ?z1.0 + ?z2.0 * cnj ?z2.0 =
          2 * (?B * cnj ?B)\<^sup>2",
     template_implication
      ([template_equation
         (template_app
           (template_app (template_hole 16, template_var 3),
            template_var 2),
          template_app
           (template_app (template_hole 15, template_var 1),
            template_var 0)),
        template_equation
         (template_app (template_hole 13, template_var 1),
          template_hole 12),
        template_inequation
         (less_than,
          template_app
           (template_app
             (template_hole 10,
              template_app (template_hole 9, template_var 1)),
            template_app
             (template_hole 8,
              template_app (template_hole 7, template_hole 6))),
          template_app
           (template_app
             (template_hole 10,
              template_app (template_hole 9, template_var 0)),
            template_app
             (template_hole 8,
              template_app (template_hole 7, template_hole 6))))],
       template_equation
        (template_app
          (template_app
            (template_hole 4,
             template_app
              (template_app (template_hole 3, template_var 3),
               template_app (template_hole 2, template_var 3))),
           template_app
            (template_app (template_hole 3, template_var 2),
             template_app (template_hole 2, template_var 2))),
         template_app
          (template_app
            (template_hole 3,
             template_app
              (template_hole 1,
               template_app (template_hole 7, template_hole 6))),
           template_app
            (template_app
              (template_hole 0,
               template_app
                (template_app (template_hole 3, template_var 0),
                 template_app (template_hole 2, template_var 0))),
             template_app
              (template_hole 8,
               template_app (template_hole 7, template_hole 6))))))),
    ("Poincare_Lines_Ideal_Points.calc_ideal_point1_mix",
     "[| (?z1.0, ?z2.0) = calc_ideal_point1_cvec ?A ?B; is_real ?A;
         (cmod ?A)\<^sup>2 < (cmod ?B)\<^sup>2 |]
      ==> ?B * cnj ?z1.0 * ?z2.0 + cnj ?B * ?z1.0 * cnj ?z2.0 =
          - 2 * ?A * (?B * cnj ?B)\<^sup>2",
     template_implication
      ([template_equation
         (template_app
           (template_app (template_hole 17, template_var 3),
            template_var 2),
          template_app
           (template_app (template_hole 16, template_var 1),
            template_var 0)),
        template_equation
         (template_app (template_hole 14, template_var 1),
          template_hole 13),
        template_inequation
         (less_than,
          template_app
           (template_app
             (template_hole 11,
              template_app (template_hole 10, template_var 1)),
            template_app
             (template_hole 9,
              template_app (template_hole 8, template_hole 7))),
          template_app
           (template_app
             (template_hole 11,
              template_app (template_hole 10, template_var 0)),
            template_app
             (template_hole 9,
              template_app (template_hole 8, template_hole 7))))],
       template_equation
        (template_app
          (template_app
            (template_hole 5,
             template_app
              (template_app
                (template_hole 4,
                 template_app
                  (template_app (template_hole 4, template_var 0),
                   template_app (template_hole 3, template_var 3))),
               template_var 2)),
           template_app
            (template_app
              (template_hole 4,
               template_app
                (template_app
                  (template_hole 4,
                   template_app (template_hole 3, template_var 0)),
                 template_var 3)),
             template_app (template_hole 3, template_var 2))),
         template_app
          (template_app
            (template_hole 4,
             template_app
              (template_app
                (template_hole 4,
                 template_app
                  (template_hole 2,
                   template_app
                    (template_hole 1,
                     template_app (template_hole 8, template_hole 7)))),
               template_var 1)),
           template_app
            (template_app
              (template_hole 0,
               template_app
                (template_app (template_hole 4, template_var 0),
                 template_app (template_hole 3, template_var 0))),
             template_app
              (template_hole 9,
               template_app (template_hole 8, template_hole 7))))))),
    ("Poincare_Lines_Ideal_Points.calc_ideal_point1_on_circline",
     "[| (?z1.0, ?z2.0) = calc_ideal_point1_cvec ?A ?B; is_real ?A;
         (cmod ?A)\<^sup>2 < (cmod ?B)\<^sup>2 |]
      ==> ?A * ?z1.0 * cnj ?z1.0 + ?B * cnj ?z1.0 * ?z2.0 +
          cnj ?B * ?z1.0 * cnj ?z2.0 +
          ?A * ?z2.0 * cnj ?z2.0 =
          0",
     template_implication
      ([template_equation
         (template_app
           (template_app (template_hole 15, template_var 3),
            template_var 2),
          template_app
           (template_app (template_hole 14, template_var 1),
            template_var 0)),
        template_equation
         (template_app (template_hole 12, template_var 1),
          template_hole 11),
        template_inequation
         (less_than,
          template_app
           (template_app
             (template_hole 9,
              template_app (template_hole 8, template_var 1)),
            template_app
             (template_hole 7,
              template_app (template_hole 6, template_hole 5))),
          template_app
           (template_app
             (template_hole 9,
              template_app (template_hole 8, template_var 0)),
            template_app
             (template_hole 7,
              template_app (template_hole 6, template_hole 5))))],
       template_equation
        (template_app
          (template_app
            (template_hole 3,
             template_app
              (template_app
                (template_hole 3,
                 template_app
                  (template_app
                    (template_hole 3,
                     template_app
                      (template_app
                        (template_hole 2,
                         template_app
                          (template_app (template_hole 2, template_var 1),
                           template_var 3)),
                       template_app (template_hole 1, template_var 3))),
                   template_app
                    (template_app
                      (template_hole 2,
                       template_app
                        (template_app (template_hole 2, template_var 0),
                         template_app (template_hole 1, template_var 3))),
                     template_var 2))),
               template_app
                (template_app
                  (template_hole 2,
                   template_app
                    (template_app
                      (template_hole 2,
                       template_app (template_hole 1, template_var 0)),
                     template_var 3)),
                 template_app (template_hole 1, template_var 2)))),
           template_app
            (template_app
              (template_hole 2,
               template_app
                (template_app (template_hole 2, template_var 1),
                 template_var 2)),
             template_app (template_hole 1, template_var 2))),
         template_hole 0))),
    ("Poincare_Lines_Ideal_Points.calc_ideal_point2_mix",
     "[| (?z1.0, ?z2.0) = calc_ideal_point2_cvec ?A ?B; is_real ?A;
         (cmod ?A)\<^sup>2 < (cmod ?B)\<^sup>2 |]
      ==> ?B * cnj ?z1.0 * ?z2.0 + cnj ?B * ?z1.0 * cnj ?z2.0 =
          - 2 * ?A * (?B * cnj ?B)\<^sup>2",
     template_implication
      ([template_equation
         (template_app
           (template_app (template_hole 17, template_var 3),
            template_var 2),
          template_app
           (template_app (template_hole 16, template_var 1),
            template_var 0)),
        template_equation
         (template_app (template_hole 14, template_var 1),
          template_hole 13),
        template_inequation
         (less_than,
          template_app
           (template_app
             (template_hole 11,
              template_app (template_hole 10, template_var 1)),
            template_app
             (template_hole 9,
              template_app (template_hole 8, template_hole 7))),
          template_app
           (template_app
             (template_hole 11,
              template_app (template_hole 10, template_var 0)),
            template_app
             (template_hole 9,
              template_app (template_hole 8, template_hole 7))))],
       template_equation
        (template_app
          (template_app
            (template_hole 5,
             template_app
              (template_app
                (template_hole 4,
                 template_app
                  (template_app (template_hole 4, template_var 0),
                   template_app (template_hole 3, template_var 3))),
               template_var 2)),
           template_app
            (template_app
              (template_hole 4,
               template_app
                (template_app
                  (template_hole 4,
                   template_app (template_hole 3, template_var 0)),
                 template_var 3)),
             template_app (template_hole 3, template_var 2))),
         template_app
          (template_app
            (template_hole 4,
             template_app
              (template_app
                (template_hole 4,
                 template_app
                  (template_hole 2,
                   template_app
                    (template_hole 1,
                     template_app (template_hole 8, template_hole 7)))),
               template_var 1)),
           template_app
            (template_app
              (template_hole 0,
               template_app
                (template_app (template_hole 4, template_var 0),
                 template_app (template_hole 3, template_var 0))),
             template_app
              (template_hole 9,
               template_app (template_hole 8, template_hole 7))))))),
    ("Poincare_Lines_Ideal_Points.calc_ideal_point2_on_circline",
     "[| (?z1.0, ?z2.0) = calc_ideal_point2_cvec ?A ?B; is_real ?A;
         (cmod ?A)\<^sup>2 < (cmod ?B)\<^sup>2 |]
      ==> ?A * ?z1.0 * cnj ?z1.0 + ?B * cnj ?z1.0 * ?z2.0 +
          cnj ?B * ?z1.0 * cnj ?z2.0 +
          ?A * ?z2.0 * cnj ?z2.0 =
          0",
     template_implication
      ([template_equation
         (template_app
           (template_app (template_hole 15, template_var 3),
            template_var 2),
          template_app
           (template_app (template_hole 14, template_var 1),
            template_var 0)),
        template_equation
         (template_app (template_hole 12, template_var 1),
          template_hole 11),
        template_inequation
         (less_than,
          template_app
           (template_app
             (template_hole 9,
              template_app (template_hole 8, template_var 1)),
            template_app
             (template_hole 7,
              template_app (template_hole 6, template_hole 5))),
          template_app
           (template_app
             (template_hole 9,
              template_app (template_hole 8, template_var 0)),
            template_app
             (template_hole 7,
              template_app (template_hole 6, template_hole 5))))],
       template_equation
        (template_app
          (template_app
            (template_hole 3,
             template_app
              (template_app
                (template_hole 3,
                 template_app
                  (template_app
                    (template_hole 3,
                     template_app
                      (template_app
                        (template_hole 2,
                         template_app
                          (template_app (template_hole 2, template_var 1),
                           template_var 3)),
                       template_app (template_hole 1, template_var 3))),
                   template_app
                    (template_app
                      (template_hole 2,
                       template_app
                        (template_app (template_hole 2, template_var 0),
                         template_app (template_hole 1, template_var 3))),
                     template_var 2))),
               template_app
                (template_app
                  (template_hole 2,
                   template_app
                    (template_app
                      (template_hole 2,
                       template_app (template_hole 1, template_var 0)),
                     template_var 3)),
                 template_app (template_hole 1, template_var 2)))),
           template_app
            (template_app
              (template_hole 2,
               template_app
                (template_app (template_hole 2, template_var 1),
                 template_var 2)),
             template_app (template_hole 1, template_var 2))),
         template_hole 0)))]:
   (string * thm * template) list
### theory "Draft.Poincare_Lines_Ideal_PointsMoreTemplates"
### 0.382s elapsed time, 0.536s cpu time, 0.107s GC time
val it = (): unit
