Loading theory "Complex_Geometry.Linear_Systems" (required by "Draft.Poincare_LinesMoreTemplates" via "Draft.Poincare_Lines" via "Complex_Geometry.Unit_Circle_Preserving_Moebius" via "Complex_Geometry.Unitary11_Matrices" via "Complex_Geometry.Matrices")
Loading theory "Complex_Geometry.More_Set" (required by "Draft.Poincare_LinesMoreTemplates" via "Draft.Poincare_Lines" via "Complex_Geometry.Unit_Circle_Preserving_Moebius" via "Complex_Geometry.Oriented_Circlines" via "Complex_Geometry.Circlines")
Loading theory "HOL-Library.Nat_Bijection" (required by "Draft.Poincare_LinesMoreTemplates" via "Draft.ExtrEqs" via "HOL-Library.Stream")
Loading theory "HOL-Library.Function_Algebras" (required by "Draft.Poincare_LinesMoreTemplates" via "Draft.ExtrEqs" via "HOL-Library.BigO")
instantiation
  fun :: (type, plus) plus
  plus_fun == plus :: ('a => 'b) => ('a => 'b) => 'a => 'b
instantiation
  fun :: (type, zero) zero
  zero_fun == zero_class.zero :: 'a => 'b
instantiation
  fun :: (type, times) times
  times_fun == times :: ('a => 'b) => ('a => 'b) => 'a => 'b
instantiation
  fun :: (type, one) one
  one_fun == one_class.one :: 'a => 'b
### theory "Complex_Geometry.More_Set"
### 0.062s elapsed time, 0.282s cpu time, 0.000s GC time
Loading theory "HOL-Library.Set_Algebras" (required by "Draft.Poincare_LinesMoreTemplates" via "Draft.ExtrEqs" via "HOL-Library.BigO")
### theory "Complex_Geometry.Linear_Systems"
### 0.074s elapsed time, 0.329s cpu time, 0.000s GC time
Loading theory "HOL-Library.Tree" (required by "Draft.Poincare_LinesMoreTemplates" via "Draft.ExtrEqs" via "Draft.Templates")
instantiation
  set :: (plus) plus
  plus_set == plus :: 'a set => 'a set => 'a set
instantiation
  set :: (times) times
  times_set == times :: 'a set => 'a set => 'a set
Found termination order: "(%p. size (snd p)) <*mlex*> {}"
### theory "HOL-Library.Function_Algebras"
### 0.132s elapsed time, 0.545s cpu time, 0.047s GC time
Loading theory "HOL-Library.Periodic_Fun" (required by "Draft.Poincare_LinesMoreTemplates" via "Draft.Poincare_Lines" via "Complex_Geometry.Unit_Circle_Preserving_Moebius" via "Complex_Geometry.Unitary11_Matrices" via "Complex_Geometry.Matrices" via "Complex_Geometry.More_Complex" via "Complex_Geometry.More_Transcendental")
instantiation
  set :: (zero) zero
  zero_set == zero_class.zero :: 'a set
instantiation
  set :: (one) one
  one_set == one_class.one :: 'a set
locale periodic_fun
  fixes f :: "'a => 'b"
    and g :: "'a => 'a => 'a"
    and gm :: "'a => 'a => 'a"
    and g1 :: "'a => 'a"
    and gn1 :: "'a => 'a"
  assumes "periodic_fun f g gm g1 gn1"
locale periodic_fun_simple
  fixes f :: "'a => 'b"
    and period :: "'a"
  assumes "periodic_fun_simple f period"
locale periodic_fun_simple'
  fixes f :: "'a => 'b"
  assumes "periodic_fun_simple' f"
Found termination order: "size_list size <*mlex*> {}"
### theory "HOL-Library.Periodic_Fun"
### 0.172s elapsed time, 0.674s cpu time, 0.089s GC time
Loading theory "Complex_Geometry.More_Transcendental" (required by "Draft.Poincare_LinesMoreTemplates" via "Draft.Poincare_Lines" via "Complex_Geometry.Unit_Circle_Preserving_Moebius" via "Complex_Geometry.Unitary11_Matrices" via "Complex_Geometry.Matrices" via "Complex_Geometry.More_Complex")
### theory "HOL-Library.Set_Algebras"
### 0.267s elapsed time, 1.043s cpu time, 0.135s GC time
Loading theory "HOL-Library.BigO" (required by "Draft.Poincare_LinesMoreTemplates" via "Draft.ExtrEqs")
### theory "HOL-Library.Nat_Bijection"
### 0.379s elapsed time, 1.525s cpu time, 0.135s GC time
Loading theory "HOL-Library.Stream" (required by "Draft.Poincare_LinesMoreTemplates" via "Draft.ExtrEqs")
### theory "Complex_Geometry.More_Transcendental"
### 0.083s elapsed time, 0.335s cpu time, 0.000s GC time
Loading theory "Complex_Geometry.Canonical_Angle" (required by "Draft.Poincare_LinesMoreTemplates" via "Draft.Poincare_Lines" via "Complex_Geometry.Unit_Circle_Preserving_Moebius" via "Complex_Geometry.Unitary11_Matrices" via "Complex_Geometry.Matrices" via "Complex_Geometry.More_Complex")
### theory "Complex_Geometry.Canonical_Angle"
### 0.115s elapsed time, 0.452s cpu time, 0.099s GC time
Loading theory "Complex_Geometry.More_Complex" (required by "Draft.Poincare_LinesMoreTemplates" via "Draft.Poincare_Lines" via "Complex_Geometry.Unit_Circle_Preserving_Moebius" via "Complex_Geometry.Unitary11_Matrices" via "Complex_Geometry.Matrices")
consts
  left :: "'a tree => 'a tree"
consts
  right :: "'a tree => 'a tree"
Found termination order: "size <*mlex*> {}"
Found termination order: "size <*mlex*> {}"
Found termination order: "size <*mlex*> {}"
consts
  shift :: "'a list => 'a stream => 'a stream"
Proofs for coinductive predicate(s) "streamsp"
### theory "Complex_Geometry.More_Complex"
### 0.338s elapsed time, 1.324s cpu time, 0.181s GC time
Loading theory "Complex_Geometry.Angles" (required by "Draft.Poincare_LinesMoreTemplates" via "Draft.Poincare_Lines" via "Complex_Geometry.Unit_Circle_Preserving_Moebius" via "Complex_Geometry.Oriented_Circlines" via "Complex_Geometry.Circlines" via "Complex_Geometry.Elementary_Complex_Geometry")
  Proving monotonicity ...
class height = type +
  fixes height :: "'a => nat"
instantiation
  tree :: (type) height
  height_tree == height :: 'a tree => nat
consts
  snth :: "'a stream => nat => 'a"
Found termination order: "size <*mlex*> {}"
consts
  stake :: "nat => 'a stream => 'a list"
consts
  sdrop :: "nat => 'a stream => 'a stream"
### theory "Complex_Geometry.Angles"
### 0.313s elapsed time, 1.114s cpu time, 0.573s GC time
Loading theory "Complex_Geometry.Elementary_Complex_Geometry" (required by "Draft.Poincare_LinesMoreTemplates" via "Draft.Poincare_Lines" via "Complex_Geometry.Unit_Circle_Preserving_Moebius" via "Complex_Geometry.Oriented_Circlines" via "Complex_Geometry.Circlines")
Found termination order: "size <*mlex*> {}"
consts
  sfilter :: "('a => bool) => 'a stream => 'a stream"
consts
  cycle :: "'a list => 'a stream"
Found termination order: "size <*mlex*> {}"
consts
  siterate :: "('a => 'a) => 'a => 'a stream"
Found termination order: "size <*mlex*> {}"
consts
  flat :: "'a list stream => 'a stream"
### theory "HOL-Library.BigO"
### 1.021s elapsed time, 3.893s cpu time, 0.904s GC time
Loading theory "HOL-Library.Quadratic_Discriminant" (required by "Draft.Poincare_LinesMoreTemplates" via "Draft.Poincare_Lines" via "Complex_Geometry.Unit_Circle_Preserving_Moebius" via "Complex_Geometry.Unitary11_Matrices" via "Complex_Geometry.Matrices" via "Complex_Geometry.Quadratic")
Found termination order: "size <*mlex*> {}"
consts
  sinterleave :: "'a stream => 'a stream => 'a stream"
consts
  szip :: "'a stream => 'b stream => ('a * 'b) stream"
### theory "HOL-Library.Quadratic_Discriminant"
### 0.117s elapsed time, 0.452s cpu time, 0.072s GC time
Loading theory "Complex_Geometry.Quadratic" (required by "Draft.Poincare_LinesMoreTemplates" via "Draft.Poincare_Lines" via "Complex_Geometry.Unit_Circle_Preserving_Moebius" via "Complex_Geometry.Unitary11_Matrices" via "Complex_Geometry.Matrices")
Found termination order: "size <*mlex*> {}"
consts
  smap2 :: "('a => 'b => 'c) => 'a stream => 'b stream => 'c stream"
### theory "HOL-Library.Stream"
### 1.134s elapsed time, 4.337s cpu time, 0.975s GC time
Found termination order: "size <*mlex*> {}"
Found termination order: "(%p. size (fst p)) <*mlex*> {}"
Found termination order: "size <*mlex*> {}"
### theory "Complex_Geometry.Elementary_Complex_Geometry"
### 0.567s elapsed time, 2.041s cpu time, 0.207s GC time
### theory "Complex_Geometry.Quadratic"
### 0.298s elapsed time, 0.913s cpu time, 0.085s GC time
Loading theory "Complex_Geometry.Matrices" (required by "Draft.Poincare_LinesMoreTemplates" via "Draft.Poincare_Lines" via "Complex_Geometry.Unit_Circle_Preserving_Moebius" via "Complex_Geometry.Unitary11_Matrices")
Found termination order: "(%p. size (snd p)) <*mlex*> {}"
Found termination order: "size <*mlex*> {}"
### theory "HOL-Library.Tree"
### 2.080s elapsed time, 7.130s cpu time, 1.316s GC time
Loading theory "Draft.Templates" (required by "Draft.Poincare_LinesMoreTemplates" via "Draft.ExtrEqs")
Found termination order: "{}"
Found termination order: "{}"
datatype template_term
=
     t_empty
   | template_app of template_term * template_term
   | template_hole of int
   | template_var of int
datatype sign
= equals | greater_equals | greater_than | less_equals | less_than
datatype template
=
     template_bimplication of template * template
   | template_dunno
   | template_equation of template_term * template_term
   | template_implication of template list * template
   | template_inequation of sign * template_term * template_term
   | template_negation of template
   | template_predicate of template_term
constructor t_empty: template_term
constructor template_app: template_term * template_term -> template_term
constructor template_hole: int -> template_term
constructor template_var: int -> template_term
constructor equals: sign
constructor greater_equals: sign
constructor greater_than: sign
constructor less_equals: sign
constructor less_than: sign
constructor template_bimplication: template * template -> template
constructor template_dunno: template
constructor template_equation: template_term * template_term -> template
constructor template_implication: template list * template -> template
constructor template_inequation:
   sign * template_term * template_term -> template
constructor template_negation: template -> template
constructor template_predicate: template_term -> template
val vfs = fn: term -> (indexname * typ) list * (string * typ) list
val indexOf = fn: ''a list -> ''a -> int -> int
val has_eq = fn: term -> bool
val term2template = fn:
   (indexname * typ) list -> (string * typ) list -> term -> template_term
val lemma2predicate = fn: term -> term -> template
val makeTemplatewithContext = fn: term -> term -> template
val lemma2template = fn: term -> template
val thm2template = fn: thm -> template
val tterm2string = fn: template_term -> string
val template2string = fn: template -> string
val t = "height ?t <= size ?t": thm
val th =
   Const ("HOL.Trueprop", "bool => prop") $
     (Const ("Orderings.ord_class.less_eq", "nat => nat => bool") $
       (Const ("Tree.height_class.height", "?'a tree => nat") $
         Var (("t", 0), "?'a tree")) $
       (Const ("Nat.size_class.size", "?'a tree => nat") $
         Var (("t", 0), "?'a tree"))):
   term
### theory "Draft.Templates"
### 0.055s elapsed time, 0.129s cpu time, 0.000s GC time
Loading theory "Draft.ExtrEqs" (required by "Draft.Poincare_LinesMoreTemplates")
Found termination order: "{}"
Found termination order: "{}"
Found termination order: "{}"
Found termination order: "{}"
Found termination order: "{}"
Found termination order: "{}"
Found termination order: "{}"
Found termination order: "{}"
Found termination order: "{}"
val eqpattern =
   Pattern
    (
       Const ("HOL.Trueprop", "bool => prop") $
         (Const ("HOL.eq", "?'a => ?'a => bool") $
           Var (("_dummy_", 1), "?'a") $ Var (("_dummy_", 2), "?'a"))
       ):
   term Find_Theorems.criterion
val badeqpattern = Pattern (Const ("Pure.eq", "?'a => ?'a => prop")):
   term Find_Theorems.criterion
val undefpattern =
   Pattern
    (
       Const ("HOL.Trueprop", "bool => prop") $
         (Const ("HOL.eq", "?'a => ?'a => bool") $
           Var (("_dummy_", 1), "?'a") $ Const ("HOL.undefined", "?'a"))
       ):
   term Find_Theorems.criterion
val thmpattern =
   Pattern
    (Const ("HOL.Trueprop", "bool => prop") $ Var (("_dummy_", 1), "bool")):
   term Find_Theorems.criterion
val badnames =
   ["*nitpick*", "*Nitpick*", "*full_exhaustive*", "*_def*", "Enum.finite*",
    "*Quickcheck*", "ATP*", "*Nunchaku*", "*Code*", "*BNF*", "*SMT*",
    "*.*.*"]:
   string list
val unwanted_names =
   [(false, Name "*nitpick*"), (false, Name "*Nitpick*"),
    (false, Name "*full_exhaustive*"), (false, Name "*_def*"),
    (false, Name "Enum.finite*"), (false, Name "*Quickcheck*"),
    (false, Name "ATP*"), (false, Name "*Nunchaku*"),
    (false, Name "*Code*"), (false, Name "*BNF*"), (false, Name "*SMT*"),
    (false, Name "*.*.*")]:
   (bool * term Find_Theorems.criterion) list
val has_vars = fn: term -> bool
val get_all_eqs = fn: string -> Proof.context -> (string * thm) list
val get_all_thms = fn: string -> Proof.context -> (string * thm) list
val get_noneq_thms = fn: string -> Proof.context -> (string * thm) list
val template_eqs = fn:
   string -> Proof.context -> (string * thm * template) list
val template_thms = fn:
   string -> Proof.context -> (string * thm * template) list
### theory "Draft.ExtrEqs"
### 0.549s elapsed time, 1.153s cpu time, 0.118s GC time
Found termination order: "{}"
Found termination order: "{}"
Found termination order: "{}"
Found termination order: "{}"
Found termination order: "{}"
### theory "Complex_Geometry.Matrices"
### 1.299s elapsed time, 2.445s cpu time, 0.289s GC time
Loading theory "Complex_Geometry.Homogeneous_Coordinates" (required by "Draft.Poincare_LinesMoreTemplates" via "Draft.Poincare_Lines" via "Complex_Geometry.Unit_Circle_Preserving_Moebius" via "Complex_Geometry.Moebius")
Loading theory "Complex_Geometry.Unitary11_Matrices" (required by "Draft.Poincare_LinesMoreTemplates" via "Draft.Poincare_Lines" via "Complex_Geometry.Unit_Circle_Preserving_Moebius")
Loading theory "Complex_Geometry.Unitary_Matrices" (required by "Draft.Poincare_LinesMoreTemplates" via "Draft.Poincare_Lines" via "Complex_Geometry.Unit_Circle_Preserving_Moebius" via "Complex_Geometry.Oriented_Circlines" via "Complex_Geometry.Circlines" via "Complex_Geometry.Hermitean_Matrices")
### theory "Complex_Geometry.Unitary_Matrices"
### 0.095s elapsed time, 0.300s cpu time, 0.071s GC time
Loading theory "Complex_Geometry.Hermitean_Matrices" (required by "Draft.Poincare_LinesMoreTemplates" via "Draft.Poincare_Lines" via "Complex_Geometry.Unit_Circle_Preserving_Moebius" via "Complex_Geometry.Oriented_Circlines" via "Complex_Geometry.Circlines")
### theory "Complex_Geometry.Hermitean_Matrices"
### 0.081s elapsed time, 0.243s cpu time, 0.000s GC time
### theory "Complex_Geometry.Unitary11_Matrices"
### 0.176s elapsed time, 0.542s cpu time, 0.071s GC time
### theory "Complex_Geometry.Homogeneous_Coordinates"
### 0.609s elapsed time, 1.047s cpu time, 0.190s GC time
Loading theory "Complex_Geometry.Moebius" (required by "Draft.Poincare_LinesMoreTemplates" via "Draft.Poincare_Lines" via "Complex_Geometry.Unit_Circle_Preserving_Moebius")
instantiation
  moebius :: group_add
  minus_moebius == minus :: moebius => moebius => moebius
  uminus_moebius == uminus_class.uminus :: moebius => moebius
  zero_moebius == zero_class.zero :: moebius
  plus_moebius == plus :: moebius => moebius => moebius
### theory "Complex_Geometry.Moebius"
### 0.561s elapsed time, 0.595s cpu time, 0.048s GC time
Loading theory "Complex_Geometry.Circlines" (required by "Draft.Poincare_LinesMoreTemplates" via "Draft.Poincare_Lines" via "Complex_Geometry.Unit_Circle_Preserving_Moebius" via "Complex_Geometry.Oriented_Circlines")
### theory "Complex_Geometry.Circlines"
### 1.684s elapsed time, 2.469s cpu time, 1.087s GC time
Loading theory "Complex_Geometry.Oriented_Circlines" (required by "Draft.Poincare_LinesMoreTemplates" via "Draft.Poincare_Lines" via "Complex_Geometry.Unit_Circle_Preserving_Moebius")
### theory "Complex_Geometry.Oriented_Circlines"
### 0.410s elapsed time, 0.472s cpu time, 0.085s GC time
Loading theory "Complex_Geometry.Circlines_Angle" (required by "Draft.Poincare_LinesMoreTemplates" via "Draft.Poincare_Lines")
Loading theory "Complex_Geometry.Unit_Circle_Preserving_Moebius" (required by "Draft.Poincare_LinesMoreTemplates" via "Draft.Poincare_Lines")
Found termination order: "{}"
### theory "Complex_Geometry.Circlines_Angle"
### 0.178s elapsed time, 0.401s cpu time, 0.095s GC time
### theory "Complex_Geometry.Unit_Circle_Preserving_Moebius"
### 0.455s elapsed time, 0.661s cpu time, 0.077s GC time
Loading theory "Draft.Poincare_Lines" (required by "Draft.Poincare_LinesMoreTemplates")
### theory "Draft.Poincare_Lines"
### 0.735s elapsed time, 1.626s cpu time, 1.227s GC time
Loading theory "Draft.Poincare_LinesMoreTemplates"
val templateLemmas =
   [("Poincare_Lines.mk_poincare_line_cmat_hermitean",
     "hermitean (mk_poincare_line_cmat ?A ?B)",
     template_predicate
      (
         template_app
          (template_hole 1,
           template_app
            (template_app (template_hole 0, template_var 1),
             template_var 0))
         )),
    ("Poincare_Lines.poincare_line_cvec_cmat_hermitean",
     "hermitean (poincare_line_cvec_cmat ?z ?w)",
     template_predicate
      (
         template_app
          (template_hole 1,
           template_app
            (template_app (template_hole 0, template_var 1),
             template_var 0))
         )),
    ("Poincare_Lines.is_poincare_line_conjugate_circline_iff",
     "is_poincare_line (conjugate_circline ?H) = is_poincare_line ?H",
     template_equation
      (template_app
        (template_hole 1, template_app (template_hole 0, template_var 0)),
       template_app (template_hole 1, template_var 0))),
    ("Poincare_Lines.conjugate_conjugate",
     "conjugate ` conjugate ` ?A = ?A",
     template_equation
      (template_app
        (template_app (template_hole 1, template_hole 0),
         template_app
          (template_app (template_hole 1, template_hole 0),
           template_var 0)),
       template_var 0)),
    ("Poincare_Lines.conjugate_preserve_poincare_collinear_iff",
     "poincare_collinear (conjugate ` ?A) = poincare_collinear ?A",
     template_equation
      (template_app
        (template_hole 2,
         template_app
          (template_app (template_hole 1, template_hole 0),
           template_var 0)),
       template_app (template_hole 2, template_var 0))),
    ("Poincare_Lines.is_poincare_line_conjugate_circline",
     "is_poincare_line ?H ==> is_poincare_line (conjugate_circline ?H)",
     template_implication
      ([template_predicate
         (template_app (template_hole 1, template_var 0))],
       template_predicate
        (
           template_app
            (template_hole 1,
             template_app (template_hole 0, template_var 0))
           ))),
    ("Poincare_Lines.circline_inversion_poincare_line",
     "is_poincare_line ?H ==> circline_inversion ?H = ?H",
     template_implication
      ([template_predicate
         (template_app (template_hole 2, template_var 0))],
       template_equation
        (template_app (template_hole 0, template_var 0), template_var 0))),
    ("Poincare_Lines.conjugate_preserve_poincare_collinear",
     "poincare_collinear ?A ==> poincare_collinear (conjugate ` ?A)",
     template_implication
      ([template_predicate
         (template_app (template_hole 2, template_var 0))],
       template_predicate
        (
           template_app
            (template_hole 2,
             template_app
              (template_app (template_hole 1, template_hole 0),
               template_var 0))
           ))),
    ("Poincare_Lines.ex_poincare_line_one_point",
     "EX l. is_poincare_line l & ?z : circline_set l",
     template_predicate (template_app (template_hole 4, t_empty))),
    ("Poincare_Lines.poincare_collinear_singleton",
     "?u : unit_disc ==> poincare_collinear {?u}",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 4, template_var 0),
              template_hole 3)
            )],
       template_predicate
        (
           template_app
            (template_hole 2,
             template_app
              (template_app (template_hole 1, template_var 0),
               template_hole 0))
           ))),
    ("Poincare_Lines.is_poincare_line_poincare_line",
     "?z ~= ?w ==> is_poincare_line (poincare_line ?z ?w)",
     template_implication
      ([template_negation
         (template_equation (template_var 1, template_var 0))],
       template_predicate
        (
           template_app
            (template_hole 1,
             template_app
              (template_app (template_hole 0, template_var 1),
               template_var 0))
           ))),
    ("Poincare_Lines.unit_circle_fix_preserve_is_poincare_line_iff",
     "unit_circle_fix ?M ==>
      is_poincare_line (moebius_circline ?M ?H) = is_poincare_line ?H",
     template_implication
      ([template_predicate
         (template_app (template_hole 3, template_var 1))],
       template_equation
        (template_app
          (template_hole 1,
           template_app
            (template_app (template_hole 0, template_var 1),
             template_var 0)),
         template_app (template_hole 1, template_var 0)))),
    ("Poincare_Lines.poincare_line",
     "?z ~= ?w ==> on_circline (poincare_line ?z ?w) ?w",
     template_implication
      ([template_negation
         (template_equation (template_var 1, template_var 0))],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 1,
               template_app
                (template_app (template_hole 0, template_var 1),
                 template_var 0)),
             template_var 0)
           ))),
    ("Poincare_Lines.poincare_line",
     "?z ~= ?w ==> on_circline (poincare_line ?z ?w) ?z",
     template_implication
      ([template_negation
         (template_equation (template_var 1, template_var 0))],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 1,
               template_app
                (template_app (template_hole 0, template_var 1),
                 template_var 0)),
             template_var 1)
           ))),
    ("Poincare_Lines.is_poincare_line_iff",
     "is_poincare_line ?H =
      (circline_type ?H = - 1 & perpendicular ?H unit_circle)",
     template_implication
      ([template_predicate
         (template_app (template_hole 7, template_var 0))],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 6,
               template_app
                (template_app
                  (template_hole 5,
                   template_app (template_hole 4, template_var 0)),
                 template_app (template_hole 3, template_hole 2))),
             template_app
              (template_app (template_hole 1, template_var 0),
               template_hole 0))
           ))),
    ("Poincare_Lines.unit_disc_fix_preserve_poincare_collinear_iff",
     "unit_circle_fix ?M ==>
      poincare_collinear (moebius_pt ?M ` ?A) = poincare_collinear ?A",
     template_implication
      ([template_predicate
         (template_app (template_hole 4, template_var 1))],
       template_equation
        (template_app
          (template_hole 2,
           template_app
            (template_app
              (template_hole 1,
               template_app (template_hole 0, template_var 1)),
             template_var 0)),
         template_app (template_hole 2, template_var 0)))),
    ("Poincare_Lines.poincare_line_inversion",
     "?z ~= ?w ==> on_circline (poincare_line ?z ?w) (inversion ?w)",
     template_implication
      ([template_negation
         (template_equation (template_var 1, template_var 0))],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 2,
               template_app
                (template_app (template_hole 1, template_var 1),
                 template_var 0)),
             template_app (template_hole 0, template_var 0))
           ))),
    ("Poincare_Lines.poincare_line_inversion",
     "?z ~= ?w ==> on_circline (poincare_line ?z ?w) (inversion ?z)",
     template_implication
      ([template_negation
         (template_equation (template_var 1, template_var 0))],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 2,
               template_app
                (template_app (template_hole 1, template_var 1),
                 template_var 0)),
             template_app (template_hole 0, template_var 1))
           ))),
    ("Poincare_Lines.poincare_line_circline_set",
     "?z ~= ?w ==> ?w : circline_set (poincare_line ?z ?w)",
     template_implication
      ([template_negation
         (template_equation (template_var 1, template_var 0))],
       template_predicate
        (
           template_app
            (template_app (template_hole 2, template_var 0),
             template_app
              (template_hole 1,
               template_app
                (template_app (template_hole 0, template_var 1),
                 template_var 0)))
           ))),
    ("Poincare_Lines.poincare_line_circline_set",
     "?z ~= ?w ==> ?z : circline_set (poincare_line ?z ?w)",
     template_implication
      ([template_negation
         (template_equation (template_var 1, template_var 0))],
       template_predicate
        (
           template_app
            (template_app (template_hole 2, template_var 1),
             template_app
              (template_hole 1,
               template_app
                (template_app (template_hole 0, template_var 1),
                 template_var 0)))
           ))),
    ("Poincare_Lines.is_poincare_line_trough_zero_is_line",
     "[| is_poincare_line ?l; 0\<^sub>h : circline_set ?l |]
      ==> is_line ?l",
     template_implication
      ([template_predicate (template_app (template_hole 4, template_var 0)),
        template_predicate
         (
            template_app
             (template_app (template_hole 3, template_hole 2),
              template_app (template_hole 1, template_var 0))
            )],
       template_predicate
        (template_app (template_hole 0, template_var 0)))),
    ("Poincare_Lines.unit_circle_fix_preserve_is_poincare_line",
     "[| unit_circle_fix ?M; is_poincare_line ?H |]
      ==> is_poincare_line (moebius_circline ?M ?H)",
     template_implication
      ([template_predicate (template_app (template_hole 2, template_var 1)),
        template_predicate
         (template_app (template_hole 1, template_var 0))],
       template_predicate
        (
           template_app
            (template_hole 1,
             template_app
              (template_app (template_hole 0, template_var 1),
               template_var 0))
           ))),
    ("Poincare_Lines.mk_poincare_line_cmat_zero_iff",
     "(mk_poincare_line_cmat ?A ?B = mat_zero) = (?A = 0 & ?B = 0)",
     template_bimplication
      (template_equation
        (template_app
          (template_app (template_hole 6, template_var 1), template_var 0),
         template_hole 5),
       template_predicate
        (
           template_app
            (template_app
              (template_hole 4,
               template_app
                (template_app (template_hole 3, template_var 1),
                 template_hole 2)),
             template_app
              (template_app (template_hole 1, template_var 0),
               template_hole 0))
           ))),
    ("Poincare_Lines.poincare_line_type",
     "?z ~= ?w ==> circline_type (poincare_line ?z ?w) = - 1",
     template_implication
      ([template_negation
         (template_equation (template_var 1, template_var 0))],
       template_equation
        (template_app
          (template_hole 3,
           template_app
            (template_app (template_hole 2, template_var 1),
             template_var 0)),
         template_app (template_hole 1, template_hole 0)))),
    ("Poincare_Lines.unit_disc_fix_preserve_poincare_collinear",
     "[| unit_circle_fix ?M; poincare_collinear ?A |]
      ==> poincare_collinear (moebius_pt ?M ` ?A)",
     template_implication
      ([template_predicate (template_app (template_hole 3, template_var 1)),
        template_predicate
         (template_app (template_hole 2, template_var 0))],
       template_predicate
        (
           template_app
            (template_hole 2,
             template_app
              (template_app
                (template_hole 1,
                 template_app (template_hole 0, template_var 1)),
               template_var 0))
           ))),
    ("Poincare_Lines.ex_unit_disc_fix_is_poincare_line_to_x_axis",
     "is_poincare_line ?l ==>
      EX M. unit_disc_fix M & moebius_circline M ?l = x_axis",
     template_implication
      ([template_predicate
         (template_app (template_hole 6, template_var 0))],
       template_predicate (template_app (template_hole 5, t_empty)))),
    ("Poincare_Lines.is_poincare_line_trough_zero_trough_infty",
     "[| is_poincare_line ?l; 0\<^sub>h : circline_set ?l |]
      ==> \<infinity>\<^sub>h : circline_set ?l",
     template_implication
      ([template_predicate (template_app (template_hole 4, template_var 0)),
        template_predicate
         (
            template_app
             (template_app (template_hole 3, template_hole 2),
              template_app (template_hole 1, template_var 0))
            )],
       template_predicate
        (
           template_app
            (template_app (template_hole 3, template_hole 0),
             template_app (template_hole 1, template_var 0))
           ))),
    ("Poincare_Lines.is_poincare_line_not_trough_zero_is_circle",
     "[| is_poincare_line ?l; 0\<^sub>h ~: circline_set ?l |]
      ==> is_circle ?l",
     template_implication
      ([template_predicate (template_app (template_hole 5, template_var 0)),
        template_negation
         (
            template_predicate
             (
                template_app
                 (template_app (template_hole 3, template_hole 2),
                  template_app (template_hole 1, template_var 0))
                )
            )],
       template_negation
        (
           template_predicate
            (template_app (template_hole 0, template_var 0))
           ))),
    ("Poincare_Lines.mk_poincare_line_cmat_scale",
     "cor ?k *\<^sub>s\<^sub>m mk_poincare_line_cmat ?A ?B =
      mk_poincare_line_cmat (?k * ?A) (cor ?k * ?B)",
     template_equation
      (template_app
        (template_app
          (template_hole 4, template_app (template_hole 3, template_var 2)),
         template_app
          (template_app (template_hole 2, template_var 1), template_var 0)),
       template_app
        (template_app
          (template_hole 2,
           template_app
            (template_app (template_hole 1, template_var 2),
             template_var 1)),
         template_app
          (template_app
            (template_hole 0,
             template_app (template_hole 3, template_var 2)),
           template_var 0)))),
    ("Poincare_Lines.is_poincare_line_inverse_point",
     "[| is_poincare_line ?H; ?u : circline_set ?H |]
      ==> inversion ?u : circline_set ?H",
     template_implication
      ([template_predicate (template_app (template_hole 3, template_var 1)),
        template_predicate
         (
            template_app
             (template_app (template_hole 2, template_var 0),
              template_app (template_hole 1, template_var 1))
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 2,
               template_app (template_hole 0, template_var 0)),
             template_app (template_hole 1, template_var 1))
           ))),
    ("Poincare_Lines.poincare_line_cvec_cmat_AeqD",
     "poincare_line_cvec_cmat ?z ?w = (?A, ?B, ?C, ?D) ==> ?A = ?D",
     template_implication
      ([template_equation
         (template_app
           (template_app (template_hole 4, template_var 5), template_var 4),
          template_app
           (template_app (template_hole 3, template_var 3),
            template_app
             (template_app (template_hole 2, template_var 2),
              template_app
               (template_app (template_hole 1, template_var 1),
                template_var 0))))],
       template_equation (template_var 3, template_var 0))),
    ("Poincare_Lines.is_poincare_line_not_trough_zero_not_trough_infty",
     "[| is_poincare_line ?l; 0\<^sub>h ~: circline_set ?l |]
      ==> \<infinity>\<^sub>h ~: circline_set ?l",
     template_implication
      ([template_predicate (template_app (template_hole 5, template_var 0)),
        template_negation
         (
            template_predicate
             (
                template_app
                 (template_app (template_hole 3, template_hole 2),
                  template_app (template_hole 1, template_var 0))
                )
            )],
       template_negation
        (
           template_predicate
            (
               template_app
                (template_app (template_hole 3, template_hole 0),
                 template_app (template_hole 1, template_var 0))
               )
           ))),
    ("Poincare_Lines.poincare_collinear_doubleton",
     "[| ?u : unit_disc; ?v : unit_disc |] ==> poincare_collinear {?u, ?v}",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 4, template_var 1),
              template_hole 3)
            ),
        template_predicate
         (
            template_app
             (template_app (template_hole 4, template_var 0),
              template_hole 3)
            )],
       template_predicate
        (
           template_app
            (template_hole 2,
             template_app
              (template_app (template_hole 1, template_var 1),
               template_app
                (template_app (template_hole 1, template_var 0),
                 template_hole 0)))
           ))),
    ("Poincare_Lines.poincare_line_cvec_cmat_nonzero",
     "[| ?z ~= vec_zero; ?w ~= vec_zero |]
      ==> poincare_line_cvec_cmat ?z ?w ~= mat_zero",
     template_implication
      ([template_negation
         (template_equation (template_var 1, template_hole 3)),
        template_negation
         (template_equation (template_var 0, template_hole 3))],
       template_negation
        (
           template_equation
            (template_app
              (template_app (template_hole 1, template_var 1),
               template_var 0),
             template_hole 0)
           ))),
    ("Poincare_Lines.poincare_line_inversion_full",
     "[| ?u ~= ?v; on_circline (poincare_line ?u ?v) ?x |]
      ==> on_circline (poincare_line ?u ?v) (inversion ?x)",
     template_implication
      ([template_negation
         (template_equation (template_var 2, template_var 1)),
        template_predicate
         (
            template_app
             (template_app
               (template_hole 2,
                template_app
                 (template_app (template_hole 1, template_var 2),
                  template_var 1)),
              template_var 0)
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 2,
               template_app
                (template_app (template_hole 1, template_var 2),
                 template_var 1)),
             template_app (template_hole 0, template_var 0))
           ))),
    ("Poincare_Lines.ex_poincare_line_two_points",
     "?z ~= ?w ==>
      EX l. is_poincare_line l & ?z : circline_set l & ?w : circline_set l",
     template_implication
      ([template_negation
         (template_equation (template_var 1, template_var 0))],
       template_predicate (template_app (template_hole 4, t_empty)))),
    ("Poincare_Lines.poincare_line_sym_general",
     "[| ?u ~= ?v; ?u ~= inversion ?v |]
      ==> poincare_line ?u ?v = poincare_line ?v ?u",
     template_implication
      ([template_negation
         (template_equation (template_var 1, template_var 0)),
        template_negation
         (
            template_equation
             (template_var 1,
              template_app (template_hole 2, template_var 0))
            )],
       template_equation
        (template_app
          (template_app (template_hole 0, template_var 1), template_var 0),
         template_app
          (template_app (template_hole 0, template_var 0),
           template_var 1)))),
    ("Poincare_Lines.poincare_line_poincare_collinear3_general",
     "[| ?a : circline_set (poincare_line ?a1.0 ?a2.0); ?a1.0 ~= ?a2.0 |]
      ==> poincare_collinear {?a, ?a1.0, ?a2.0}",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 7, template_var 2),
              template_app
               (template_hole 6,
                template_app
                 (template_app (template_hole 5, template_var 1),
                  template_var 0)))
            ),
        template_negation
         (template_equation (template_var 1, template_var 0))],
       template_predicate
        (
           template_app
            (template_hole 2,
             template_app
              (template_app (template_hole 1, template_var 2),
               template_app
                (template_app (template_hole 1, template_var 1),
                 template_app
                  (template_app (template_hole 1, template_var 0),
                   template_hole 0))))
           ))),
    ("Poincare_Lines.poincare_line_sym",
     "[| ?u : unit_disc; ?v : unit_disc; ?u ~= ?v |]
      ==> poincare_line ?u ?v = poincare_line ?v ?u",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 5, template_var 1),
              template_hole 4)
            ),
        template_predicate
         (
            template_app
             (template_app (template_hole 5, template_var 0),
              template_hole 4)
            ),
        template_negation
         (template_equation (template_var 1, template_var 0))],
       template_equation
        (template_app
          (template_app (template_hole 0, template_var 1), template_var 0),
         template_app
          (template_app (template_hole 0, template_var 0),
           template_var 1)))),
    ("Poincare_Lines.poincare_line_0_real_is_x_axis",
     "[| ?x : circline_set x_axis; ?x ~= 0\<^sub>h;
         ?x ~= \<infinity>\<^sub>h |]
      ==> poincare_line 0\<^sub>h ?x = x_axis",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 8, template_var 0),
              template_app (template_hole 7, template_hole 6))
            ),
        template_negation
         (template_equation (template_var 0, template_hole 3)),
        template_negation
         (template_equation (template_var 0, template_hole 2))],
       template_equation
        (template_app
          (template_app (template_hole 0, template_hole 3), template_var 0),
         template_hole 6))),
    ("Poincare_Lines.poincare_line_0_imag_is_y_axis",
     "[| ?y : circline_set y_axis; ?y ~= 0\<^sub>h;
         ?y ~= \<infinity>\<^sub>h |]
      ==> poincare_line 0\<^sub>h ?y = y_axis",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 8, template_var 0),
              template_app (template_hole 7, template_hole 6))
            ),
        template_negation
         (template_equation (template_var 0, template_hole 3)),
        template_negation
         (template_equation (template_var 0, template_hole 2))],
       template_equation
        (template_app
          (template_app (template_hole 0, template_hole 3), template_var 0),
         template_hole 6))),
    ("Poincare_Lines.ex_poincare_line_points",
     "is_poincare_line ?H ==>
      EX u v.
         u : unit_disc & v : unit_disc & u ~= v & ?H = poincare_line u v",
     template_implication
      ([template_predicate
         (template_app (template_hole 8, template_var 0))],
       template_predicate (template_app (template_hole 7, t_empty)))),
    ("Poincare_Lines.wlog_line_x_axis",
     "[| is_poincare_line ?H; ?P x_axis;
         !!M. [| unit_disc_fix M; ?P (moebius_circline M ?H) |] ==> ?P ?H |]
      ==> ?P ?H",
     template_implication
      ([template_predicate (template_app (template_hole 4, template_var 1)),
        template_predicate (template_app (template_var 0, template_hole 3)),
        template_predicate (template_app (template_hole 2, t_empty))],
       template_predicate (template_app (template_var 0, template_var 1)))),
    ("Poincare_Lines.conjugate_preserve_poincare_line",
     "[| ?u : unit_disc; ?v : unit_disc; ?u ~= ?v |]
      ==> poincare_line (conjugate ?u) (conjugate ?v) =
          conjugate_circline (poincare_line ?u ?v)",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 7, template_var 1),
              template_hole 6)
            ),
        template_predicate
         (
            template_app
             (template_app (template_hole 7, template_var 0),
              template_hole 6)
            ),
        template_negation
         (template_equation (template_var 1, template_var 0))],
       template_equation
        (template_app
          (template_app
            (template_hole 2,
             template_app (template_hole 1, template_var 1)),
           template_app (template_hole 1, template_var 0)),
         template_app
          (template_hole 0,
           template_app
            (template_app (template_hole 2, template_var 1),
             template_var 0))))),
    ("Poincare_Lines.unit_disc_fix_preserve_poincare_collinear3",
     "unit_disc_fix ?M ==>
      poincare_collinear
       {moebius_pt ?M ?u, moebius_pt ?M ?v, moebius_pt ?M ?w} =
      poincare_collinear {?u, ?v, ?w}",
     template_implication
      ([template_predicate
         (template_app (template_hole 5, template_var 3))],
       template_equation
        (template_app
          (template_hole 3,
           template_app
            (template_app
              (template_hole 2,
               template_app
                (template_app (template_hole 1, template_var 3),
                 template_var 2)),
             template_app
              (template_app
                (template_hole 2,
                 template_app
                  (template_app (template_hole 1, template_var 3),
                   template_var 1)),
               template_app
                (template_app
                  (template_hole 2,
                   template_app
                    (template_app (template_hole 1, template_var 3),
                     template_var 0)),
                 template_hole 0)))),
         template_app
          (template_hole 3,
           template_app
            (template_app (template_hole 2, template_var 2),
             template_app
              (template_app (template_hole 2, template_var 1),
               template_app
                (template_app (template_hole 2, template_var 0),
                 template_hole 0))))))),
    ("Poincare_Lines.ex1_poincare_line_general",
     "[| ?u ~= ?v; ?u ~= inversion ?v |]
      ==> EX! l.
             is_poincare_line l &
             ?u : circline_set l & ?v : circline_set l",
     template_implication
      ([template_negation
         (template_equation (template_var 1, template_var 0)),
        template_negation
         (
            template_equation
             (template_var 1,
              template_app (template_hole 5, template_var 0))
            )],
       template_predicate (template_app (template_hole 4, t_empty)))),
    ("Poincare_Lines.ex_is_poincare_line_points",
     "is_poincare_line ?H ==>
      EX u v.
         u : unit_disc &
         v : unit_disc & u ~= v & {u, v} <= circline_set ?H",
     template_implication
      ([template_predicate
         (template_app (template_hole 10, template_var 0))],
       template_predicate (template_app (template_hole 9, t_empty)))),
    ("Poincare_Lines.poincare_collinear3_poincare_line_general",
     "[| poincare_collinear {?a, ?a1.0, ?a2.0}; ?a1.0 ~= ?a2.0;
         ?a1.0 ~= inversion ?a2.0 |]
      ==> ?a : circline_set (poincare_line ?a1.0 ?a2.0)",
     template_implication
      ([template_predicate
         (
            template_app
             (template_hole 8,
              template_app
               (template_app (template_hole 7, template_var 2),
                template_app
                 (template_app (template_hole 7, template_var 1),
                  template_app
                   (template_app (template_hole 7, template_var 0),
                    template_hole 6))))
            ),
        template_negation
         (template_equation (template_var 1, template_var 0)),
        template_negation
         (
            template_equation
             (template_var 1,
              template_app (template_hole 3, template_var 0))
            )],
       template_predicate
        (
           template_app
            (template_app (template_hole 2, template_var 2),
             template_app
              (template_hole 1,
               template_app
                (template_app (template_hole 0, template_var 1),
                 template_var 0)))
           ))),
    ("Poincare_Lines.ex1_poincare_line",
     "[| ?u ~= ?v; ?u : unit_disc; ?v : unit_disc |]
      ==> EX! l.
             is_poincare_line l &
             ?u : circline_set l & ?v : circline_set l",
     template_implication
      ([template_negation
         (template_equation (template_var 1, template_var 0)),
        template_predicate
         (
            template_app
             (template_app (template_hole 5, template_var 1),
              template_hole 4)
            ),
        template_predicate
         (
            template_app
             (template_app (template_hole 5, template_var 0),
              template_hole 4)
            )],
       template_predicate (template_app (template_hole 3, t_empty)))),
    ("Poincare_Lines.unit_disc_fix_preserve_poincare_line",
     "[| unit_disc_fix ?M; ?u : unit_disc; ?v : unit_disc; ?u ~= ?v |]
      ==> poincare_line (moebius_pt ?M ?u) (moebius_pt ?M ?v) =
          moebius_circline ?M (poincare_line ?u ?v)",
     template_implication
      ([template_predicate (template_app (template_hole 8, template_var 2)),
        template_predicate
         (
            template_app
             (template_app (template_hole 7, template_var 1),
              template_hole 6)
            ),
        template_predicate
         (
            template_app
             (template_app (template_hole 7, template_var 0),
              template_hole 6)
            ),
        template_negation
         (template_equation (template_var 1, template_var 0))],
       template_equation
        (template_app
          (template_app
            (template_hole 2,
             template_app
              (template_app (template_hole 1, template_var 2),
               template_var 1)),
           template_app
            (template_app (template_hole 1, template_var 2),
             template_var 0)),
         template_app
          (template_app (template_hole 0, template_var 2),
           template_app
            (template_app (template_hole 2, template_var 1),
             template_var 0))))),
    ("Poincare_Lines.poincare_line_x_axis",
     "[| ?x : unit_disc; ?y : unit_disc; ?x : circline_set x_axis;
         ?y : circline_set x_axis; ?x ~= ?y |]
      ==> poincare_line ?x ?y = x_axis",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 7, template_var 1),
              template_hole 6)
            ),
        template_predicate
         (
            template_app
             (template_app (template_hole 7, template_var 0),
              template_hole 6)
            ),
        template_predicate
         (
            template_app
             (template_app (template_hole 7, template_var 1),
              template_app (template_hole 5, template_hole 4))
            ),
        template_predicate
         (
            template_app
             (template_app (template_hole 7, template_var 0),
              template_app (template_hole 5, template_hole 4))
            ),
        template_negation
         (template_equation (template_var 1, template_var 0))],
       template_equation
        (template_app
          (template_app (template_hole 0, template_var 1), template_var 0),
         template_hole 4))),
    ("Poincare_Lines.is_poincare_line_0_real_is_x_axis",
     "[| is_poincare_line ?l; 0\<^sub>h : circline_set ?l;
         ?x : circline_set ?l Int circline_set x_axis; ?x ~= 0\<^sub>h;
         ?x ~= \<infinity>\<^sub>h |]
      ==> ?l = x_axis",
     template_implication
      ([template_predicate (template_app (template_hole 9, template_var 1)),
        template_predicate
         (
            template_app
             (template_app (template_hole 8, template_hole 7),
              template_app (template_hole 6, template_var 1))
            ),
        template_predicate
         (
            template_app
             (template_app (template_hole 8, template_var 0),
              template_app
               (template_app
                 (template_hole 5,
                  template_app (template_hole 6, template_var 1)),
                template_app (template_hole 6, template_hole 4)))
            ),
        template_negation
         (template_equation (template_var 0, template_hole 7)),
        template_negation
         (template_equation (template_var 0, template_hole 1))],
       template_equation (template_var 1, template_hole 4))),
    ("Poincare_Lines.is_poincare_line_0_imag_is_y_axis",
     "[| is_poincare_line ?l; 0\<^sub>h : circline_set ?l;
         ?y : circline_set ?l Int circline_set y_axis; ?y ~= 0\<^sub>h;
         ?y ~= \<infinity>\<^sub>h |]
      ==> ?l = y_axis",
     template_implication
      ([template_predicate (template_app (template_hole 9, template_var 1)),
        template_predicate
         (
            template_app
             (template_app (template_hole 8, template_hole 7),
              template_app (template_hole 6, template_var 1))
            ),
        template_predicate
         (
            template_app
             (template_app (template_hole 8, template_var 0),
              template_app
               (template_app
                 (template_hole 5,
                  template_app (template_hole 6, template_var 1)),
                template_app (template_hole 6, template_hole 4)))
            ),
        template_negation
         (template_equation (template_var 0, template_hole 7)),
        template_negation
         (template_equation (template_var 0, template_hole 1))],
       template_equation (template_var 1, template_hole 4))),
    ("Poincare_Lines.unique_poincare_line_general",
     "[| ?u ~= ?v; ?u ~= inversion ?v; ?u : circline_set ?l;
         ?v : circline_set ?l; is_poincare_line ?l |]
      ==> ?l = poincare_line ?u ?v",
     template_implication
      ([template_negation
         (template_equation (template_var 2, template_var 1)),
        template_negation
         (
            template_equation
             (template_var 2,
              template_app (template_hole 5, template_var 1))
            ),
        template_predicate
         (
            template_app
             (template_app (template_hole 4, template_var 2),
              template_app (template_hole 3, template_var 0))
            ),
        template_predicate
         (
            template_app
             (template_app (template_hole 4, template_var 1),
              template_app (template_hole 3, template_var 0))
            ),
        template_predicate
         (template_app (template_hole 2, template_var 0))],
       template_equation
        (template_var 0,
         template_app
          (template_app (template_hole 0, template_var 2),
           template_var 1)))),
    ("Poincare_Lines.unique_is_poincare_line_general",
     "[| ?u ~= ?v; ?u ~= inversion ?v; is_poincare_line ?l1.0;
         is_poincare_line ?l2.0;
         {?u, ?v} <= circline_set ?l1.0 Int circline_set ?l2.0 |]
      ==> ?l1.0 = ?l2.0",
     template_implication
      ([template_negation
         (template_equation (template_var 3, template_var 2)),
        template_negation
         (
            template_equation
             (template_var 3,
              template_app (template_hole 7, template_var 2))
            ),
        template_predicate (template_app (template_hole 6, template_var 1)),
        template_predicate (template_app (template_hole 6, template_var 0)),
        template_inequation
         (less_equals,
          template_app
           (template_app (template_hole 4, template_var 3),
            template_app
             (template_app (template_hole 4, template_var 2),
              template_hole 3)),
          template_app
           (template_app
             (template_hole 2,
              template_app (template_hole 1, template_var 1)),
            template_app (template_hole 1, template_var 0)))],
       template_equation (template_var 1, template_var 0))),
    ("Poincare_Lines.unique_poincare_line",
     "[| ?u ~= ?v; ?u : unit_disc; ?v : unit_disc; ?u : circline_set ?l;
         ?v : circline_set ?l; is_poincare_line ?l |]
      ==> ?l = poincare_line ?u ?v",
     template_implication
      ([template_negation
         (template_equation (template_var 2, template_var 1)),
        template_predicate
         (
            template_app
             (template_app (template_hole 5, template_var 2),
              template_hole 4)
            ),
        template_predicate
         (
            template_app
             (template_app (template_hole 5, template_var 1),
              template_hole 4)
            ),
        template_predicate
         (
            template_app
             (template_app (template_hole 5, template_var 2),
              template_app (template_hole 3, template_var 0))
            ),
        template_predicate
         (
            template_app
             (template_app (template_hole 5, template_var 1),
              template_app (template_hole 3, template_var 0))
            ),
        template_predicate
         (template_app (template_hole 2, template_var 0))],
       template_equation
        (template_var 0,
         template_app
          (template_app (template_hole 0, template_var 2),
           template_var 1)))),
    ("Poincare_Lines.unique_is_poincare_line",
     "[| ?u : unit_disc; ?v : unit_disc; ?u ~= ?v; is_poincare_line ?l1.0;
         is_poincare_line ?l2.0;
         {?u, ?v} <= circline_set ?l1.0 Int circline_set ?l2.0 |]
      ==> ?l1.0 = ?l2.0",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 10, template_var 3),
              template_hole 9)
            ),
        template_predicate
         (
            template_app
             (template_app (template_hole 10, template_var 2),
              template_hole 9)
            ),
        template_negation
         (template_equation (template_var 3, template_var 2)),
        template_predicate (template_app (template_hole 6, template_var 1)),
        template_predicate (template_app (template_hole 6, template_var 0)),
        template_inequation
         (less_equals,
          template_app
           (template_app (template_hole 4, template_var 3),
            template_app
             (template_app (template_hole 4, template_var 2),
              template_hole 3)),
          template_app
           (template_app
             (template_hole 2,
              template_app (template_hole 1, template_var 1)),
            template_app (template_hole 1, template_var 0)))],
       template_equation (template_var 1, template_var 0))),
    ("Poincare_Lines.is_poincare_line_mk_circline",
     "(?A, ?B, ?C, ?D) : hermitean_nonzero ==>
      is_poincare_line (mk_circline ?A ?B ?C ?D) =
      ((cmod ?A)\<^sup>2 < (cmod ?B)\<^sup>2 & ?A = ?D)",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_hole 19,
                template_app
                 (template_app (template_hole 18, template_var 3),
                  template_app
                   (template_app (template_hole 17, template_var 2),
                    template_app
                     (template_app (template_hole 16, template_var 1),
                      template_var 0)))),
              template_app (template_hole 15, t_empty))
            )],
       template_implication
        ([template_predicate
           (
              template_app
               (template_hole 8,
                template_app
                 (template_app
                   (template_app
                     (template_app (template_hole 7, template_var 3),
                      template_var 2),
                    template_var 1),
                  template_var 0))
              )],
         template_predicate
          (
             template_app
              (template_app
                (template_hole 14,
                 template_app
                  (template_app
                    (template_hole 6,
                     template_app
                      (template_app
                        (template_hole 5,
                         template_app (template_hole 4, template_var 3)),
                       template_app
                        (template_hole 3,
                         template_app (template_hole 2, template_hole 1)))),
                   template_app
                    (template_app
                      (template_hole 5,
                       template_app (template_hole 4, template_var 2)),
                     template_app
                      (template_hole 3,
                       template_app (template_hole 2, template_hole 1))))),
               template_app
                (template_app (template_hole 0, template_var 3),
                 template_var 0))
             )))),
    ("Poincare_Lines.poincare_collinear3_poincare_lines_equal_general",
     "[| poincare_collinear {?a, ?a1.0, ?a2.0}; ?a ~= ?a1.0; ?a ~= ?a2.0;
         ?a ~= inversion ?a1.0; ?a ~= inversion ?a2.0 |]
      ==> poincare_line ?a ?a1.0 = poincare_line ?a ?a2.0",
     template_implication
      ([template_predicate
         (
            template_app
             (template_hole 7,
              template_app
               (template_app (template_hole 6, template_var 2),
                template_app
                 (template_app (template_hole 6, template_var 1),
                  template_app
                   (template_app (template_hole 6, template_var 0),
                    template_hole 5))))
            ),
        template_negation
         (template_equation (template_var 2, template_var 1)),
        template_negation
         (template_equation (template_var 2, template_var 0)),
        template_negation
         (
            template_equation
             (template_var 2,
              template_app (template_hole 2, template_var 1))
            ),
        template_negation
         (
            template_equation
             (template_var 2,
              template_app (template_hole 2, template_var 0))
            )],
       template_equation
        (template_app
          (template_app (template_hole 0, template_var 2), template_var 1),
         template_app
          (template_app (template_hole 0, template_var 2),
           template_var 0)))),
    ("Poincare_Lines.poincare_collinear_zero_iff",
     "[| of_complex ?y' : unit_disc; of_complex ?z' : unit_disc; ?y' ~= ?z';
         ?y' ~= 0; ?z' ~= 0 |]
      ==> poincare_collinear {0\<^sub>h, of_complex ?y', of_complex ?z'} =
          (?y' * cnj ?z' = cnj ?y' * ?z')",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_hole 12,
                template_app (template_hole 11, template_var 1)),
              template_hole 10)
            ),
        template_predicate
         (
            template_app
             (template_app
               (template_hole 12,
                template_app (template_hole 11, template_var 0)),
              template_hole 10)
            ),
        template_negation
         (template_equation (template_var 1, template_var 0)),
        template_negation
         (template_equation (template_var 1, template_hole 7)),
        template_negation
         (template_equation (template_var 0, template_hole 7))],
       template_implication
        ([template_predicate
           (
              template_app
               (template_hole 5,
                template_app
                 (template_app (template_hole 4, template_hole 3),
                  template_app
                   (template_app
                     (template_hole 4,
                      template_app (template_hole 11, template_var 1)),
                    template_app
                     (template_app
                       (template_hole 4,
                        template_app (template_hole 11, template_var 0)),
                      template_hole 2))))
              )],
         template_equation
          (template_app
            (template_app (template_hole 1, template_var 1),
             template_app (template_hole 0, template_var 0)),
           template_app
            (template_app
              (template_hole 1,
               template_app (template_hole 0, template_var 1)),
             template_var 0))))),
    ("Poincare_Lines.ex_is_poincare_line_points'",
     "[| ?i1.0 : circline_set ?H Int unit_circle_set;
         ?i2.0 : circline_set ?H Int unit_circle_set; ?i1.0 ~= ?i2.0;
         ?a : circline_set ?H; ?a ~: unit_circle_set |]
      ==> EX b. b ~= ?i1.0 &
                b ~= ?i2.0 &
                b ~= ?a & b ~= inversion ?a & b : circline_set ?H",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 8, template_var 3),
              template_app
               (template_app
                 (template_hole 7,
                  template_app (template_hole 6, template_var 2)),
                template_hole 5))
            ),
        template_predicate
         (
            template_app
             (template_app (template_hole 8, template_var 1),
              template_app
               (template_app
                 (template_hole 7,
                  template_app (template_hole 6, template_var 2)),
                template_hole 5))
            ),
        template_negation
         (template_equation (template_var 3, template_var 1)),
        template_predicate
         (
            template_app
             (template_app (template_hole 8, template_var 0),
              template_app (template_hole 6, template_var 2))
            ),
        template_negation
         (
            template_predicate
             (
                template_app
                 (template_app (template_hole 8, template_var 0),
                  template_hole 5)
                )
            )],
       template_predicate (template_app (template_hole 2, t_empty)))),
    ("Poincare_Lines.poincare_collinear_zero_polar_form",
     "[| poincare_collinear {0\<^sub>h, of_complex ?x, of_complex ?y};
         ?x ~= 0; ?y ~= 0; of_complex ?x : unit_disc;
         of_complex ?y : unit_disc |]
      ==> EX \<phi> rx ry.
             ?x = cor rx * cis \<phi> &
             ?y = cor ry * cis \<phi> & rx ~= 0 & ry ~= 0",
     template_implication
      ([template_predicate
         (
            template_app
             (template_hole 16,
              template_app
               (template_app (template_hole 15, template_hole 14),
                template_app
                 (template_app
                   (template_hole 15,
                    template_app (template_hole 13, template_var 1)),
                  template_app
                   (template_app
                     (template_hole 15,
                      template_app (template_hole 13, template_var 0)),
                    template_hole 12))))
            ),
        template_negation
         (template_equation (template_var 1, template_hole 9)),
        template_negation
         (template_equation (template_var 0, template_hole 9)),
        template_predicate
         (
            template_app
             (template_app
               (template_hole 8,
                template_app (template_hole 13, template_var 1)),
              template_hole 7)
            ),
        template_predicate
         (
            template_app
             (template_app
               (template_hole 8,
                template_app (template_hole 13, template_var 0)),
              template_hole 7)
            )],
       template_predicate (template_app (template_hole 6, t_empty)))),
    ("Poincare_Lines.poincare_line_non_homogenous",
     "[| ?u ~= \<infinity>\<^sub>h; ?v ~= \<infinity>\<^sub>h; ?u ~= ?v;
         ?u ~= inversion ?v |]
      ==> let u' = to_complex ?u; v' = to_complex ?v;
              A = \<i> * (u' * cnj v' - v' * cnj u');
              B = \<i> *
                  (v' * cor ((cmod u')\<^sup>2 + 1) -
                   u' * cor ((cmod v')\<^sup>2 + 1))
          in poincare_line ?u ?v = mk_circline A B (cnj B) A",
     template_implication
      ([template_negation
         (template_equation (template_var 1, template_hole 18)),
        template_negation
         (template_equation (template_var 0, template_hole 18)),
        template_negation
         (template_equation (template_var 1, template_var 0)),
        template_negation
         (
            template_equation
             (template_var 1,
              template_app (template_hole 17, template_var 0))
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 16,
               template_app (template_hole 15, template_var 1)),
             t_empty)
           )))]:
   (string * thm * template) list
### theory "Draft.Poincare_LinesMoreTemplates"
### 0.434s elapsed time, 0.632s cpu time, 0.078s GC time
val it = (): unit
