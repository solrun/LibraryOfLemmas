   [("Poincare_Lines.mk_poincare_line_cmat_hermitean",
     "hermitean (mk_poincare_line_cmat ?A ?B)",
     template_predicate
      (
         template_app
          (template_hole 1,
           template_app
            (template_app (template_hole 0, template_var 1),
             template_var 0))
         )),
    ("Poincare_Lines.poincare_line_cvec_cmat_hermitean",
     "hermitean (poincare_line_cvec_cmat ?z ?w)",
     template_predicate
      (
         template_app
          (template_hole 1,
           template_app
            (template_app (template_hole 0, template_var 1),
             template_var 0))
         )),
    ("Poincare_Lines.is_poincare_line_conjugate_circline_iff",
     "is_poincare_line (conjugate_circline ?H) = is_poincare_line ?H",
     template_equation
      (template_app
        (template_hole 1, template_app (template_hole 0, template_var 0)),
       template_app (template_hole 1, template_var 0))),
    ("Poincare_Lines.conjugate_conjugate",
     "conjugate ` conjugate ` ?A = ?A",
     template_equation
      (template_app
        (template_app (template_hole 1, template_hole 0),
         template_app
          (template_app (template_hole 1, template_hole 0),
           template_var 0)),
       template_var 0)),
    ("Poincare_Lines.conjugate_preserve_poincare_collinear_iff",
     "poincare_collinear (conjugate ` ?A) = poincare_collinear ?A",
     template_equation
      (template_app
        (template_hole 2,
         template_app
          (template_app (template_hole 1, template_hole 0),
           template_var 0)),
       template_app (template_hole 2, template_var 0))),
    ("Poincare_Lines.is_poincare_line_conjugate_circline",
     "is_poincare_line ?H ==> is_poincare_line (conjugate_circline ?H)",
     template_implication
      ([template_predicate
         (template_app (template_hole 1, template_var 0))],
       template_predicate
        (
           template_app
            (template_hole 1,
             template_app (template_hole 0, template_var 0))
           ))),
    ("Poincare_Lines.circline_inversion_poincare_line",
     "is_poincare_line ?H ==> circline_inversion ?H = ?H",
     template_implication
      ([template_predicate
         (template_app (template_hole 2, template_var 0))],
       template_equation
        (template_app (template_hole 0, template_var 0), template_var 0))),
    ("Poincare_Lines.conjugate_preserve_poincare_collinear",
     "poincare_collinear ?A ==> poincare_collinear (conjugate ` ?A)",
     template_implication
      ([template_predicate
         (template_app (template_hole 2, template_var 0))],
       template_predicate
        (
           template_app
            (template_hole 2,
             template_app
              (template_app (template_hole 1, template_hole 0),
               template_var 0))
           ))),
    ("Poincare_Lines.ex_poincare_line_one_point",
     "EX l. is_poincare_line l & ?z : circline_set l",
     template_predicate (template_app (template_hole 4, t_empty))),
    ("Poincare_Lines.poincare_collinear_singleton",
     "?u : unit_disc ==> poincare_collinear {?u}",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 4, template_var 0),
              template_hole 3)
            )],
       template_predicate
        (
           template_app
            (template_hole 2,
             template_app
              (template_app (template_hole 1, template_var 0),
               template_hole 0))
           ))),
    ("Poincare_Lines.is_poincare_line_poincare_line",
     "?z ~= ?w ==> is_poincare_line (poincare_line ?z ?w)",
     template_implication
      ([template_negation
         (template_equation (template_var 1, template_var 0))],
       template_predicate
        (
           template_app
            (template_hole 1,
             template_app
              (template_app (template_hole 0, template_var 1),
               template_var 0))
           ))),
    ("Poincare_Lines.unit_circle_fix_preserve_is_poincare_line_iff",
     "unit_circle_fix ?M ==>
      is_poincare_line (moebius_circline ?M ?H) = is_poincare_line ?H",
     template_implication
      ([template_predicate
         (template_app (template_hole 3, template_var 1))],
       template_equation
        (template_app
          (template_hole 1,
           template_app
            (template_app (template_hole 0, template_var 1),
             template_var 0)),
         template_app (template_hole 1, template_var 0)))),
    ("Poincare_Lines.poincare_line",
     "?z ~= ?w ==> on_circline (poincare_line ?z ?w) ?w",
     template_implication
      ([template_negation
         (template_equation (template_var 1, template_var 0))],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 1,
               template_app
                (template_app (template_hole 0, template_var 1),
                 template_var 0)),
             template_var 0)
           ))),
    ("Poincare_Lines.poincare_line",
     "?z ~= ?w ==> on_circline (poincare_line ?z ?w) ?z",
     template_implication
      ([template_negation
         (template_equation (template_var 1, template_var 0))],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 1,
               template_app
                (template_app (template_hole 0, template_var 1),
                 template_var 0)),
             template_var 1)
           ))),
    ("Poincare_Lines.is_poincare_line_iff",
     "is_poincare_line ?H =
      (circline_type ?H = - 1 & perpendicular ?H unit_circle)",
     template_implication
      ([template_predicate
         (template_app (template_hole 7, template_var 0))],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 6,
               template_app
                (template_app
                  (template_hole 5,
                   template_app (template_hole 4, template_var 0)),
                 template_app (template_hole 3, template_hole 2))),
             template_app
              (template_app (template_hole 1, template_var 0),
               template_hole 0))
           ))),
    ("Poincare_Lines.unit_disc_fix_preserve_poincare_collinear_iff",
     "unit_circle_fix ?M ==>
      poincare_collinear (moebius_pt ?M ` ?A) = poincare_collinear ?A",
     template_implication
      ([template_predicate
         (template_app (template_hole 4, template_var 1))],
       template_equation
        (template_app
          (template_hole 2,
           template_app
            (template_app
              (template_hole 1,
               template_app (template_hole 0, template_var 1)),
             template_var 0)),
         template_app (template_hole 2, template_var 0)))),
    ("Poincare_Lines.poincare_line_inversion",
     "?z ~= ?w ==> on_circline (poincare_line ?z ?w) (inversion ?w)",
     template_implication
      ([template_negation
         (template_equation (template_var 1, template_var 0))],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 2,
               template_app
                (template_app (template_hole 1, template_var 1),
                 template_var 0)),
             template_app (template_hole 0, template_var 0))
           ))),
    ("Poincare_Lines.poincare_line_inversion",
     "?z ~= ?w ==> on_circline (poincare_line ?z ?w) (inversion ?z)",
     template_implication
      ([template_negation
         (template_equation (template_var 1, template_var 0))],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 2,
               template_app
                (template_app (template_hole 1, template_var 1),
                 template_var 0)),
             template_app (template_hole 0, template_var 1))
           ))),
    ("Poincare_Lines.poincare_line_circline_set",
     "?z ~= ?w ==> ?w : circline_set (poincare_line ?z ?w)",
     template_implication
      ([template_negation
         (template_equation (template_var 1, template_var 0))],
       template_predicate
        (
           template_app
            (template_app (template_hole 2, template_var 0),
             template_app
              (template_hole 1,
               template_app
                (template_app (template_hole 0, template_var 1),
                 template_var 0)))
           ))),
    ("Poincare_Lines.poincare_line_circline_set",
     "?z ~= ?w ==> ?z : circline_set (poincare_line ?z ?w)",
     template_implication
      ([template_negation
         (template_equation (template_var 1, template_var 0))],
       template_predicate
        (
           template_app
            (template_app (template_hole 2, template_var 1),
             template_app
              (template_hole 1,
               template_app
                (template_app (template_hole 0, template_var 1),
                 template_var 0)))
           ))),
    ("Poincare_Lines.is_poincare_line_trough_zero_is_line",
     "[| is_poincare_line ?l; 0\<^sub>h : circline_set ?l |]
      ==> is_line ?l",
     template_implication
      ([template_predicate (template_app (template_hole 4, template_var 0)),
        template_predicate
         (
            template_app
             (template_app (template_hole 3, template_hole 2),
              template_app (template_hole 1, template_var 0))
            )],
       template_predicate
        (template_app (template_hole 0, template_var 0)))),
    ("Poincare_Lines.unit_circle_fix_preserve_is_poincare_line",
     "[| unit_circle_fix ?M; is_poincare_line ?H |]
      ==> is_poincare_line (moebius_circline ?M ?H)",
     template_implication
      ([template_predicate (template_app (template_hole 2, template_var 1)),
        template_predicate
         (template_app (template_hole 1, template_var 0))],
       template_predicate
        (
           template_app
            (template_hole 1,
             template_app
              (template_app (template_hole 0, template_var 1),
               template_var 0))
           ))),
    ("Poincare_Lines.mk_poincare_line_cmat_zero_iff",
     "(mk_poincare_line_cmat ?A ?B = mat_zero) = (?A = 0 & ?B = 0)",
     template_bimplication
      (template_equation
        (template_app
          (template_app (template_hole 6, template_var 1), template_var 0),
         template_hole 5),
       template_predicate
        (
           template_app
            (template_app
              (template_hole 4,
               template_app
                (template_app (template_hole 3, template_var 1),
                 template_hole 2)),
             template_app
              (template_app (template_hole 1, template_var 0),
               template_hole 0))
           ))),
    ("Poincare_Lines.poincare_line_type",
     "?z ~= ?w ==> circline_type (poincare_line ?z ?w) = - 1",
     template_implication
      ([template_negation
         (template_equation (template_var 1, template_var 0))],
       template_equation
        (template_app
          (template_hole 3,
           template_app
            (template_app (template_hole 2, template_var 1),
             template_var 0)),
         template_app (template_hole 1, template_hole 0)))),
    ("Poincare_Lines.unit_disc_fix_preserve_poincare_collinear",
     "[| unit_circle_fix ?M; poincare_collinear ?A |]
      ==> poincare_collinear (moebius_pt ?M ` ?A)",
     template_implication
      ([template_predicate (template_app (template_hole 3, template_var 1)),
        template_predicate
         (template_app (template_hole 2, template_var 0))],
       template_predicate
        (
           template_app
            (template_hole 2,
             template_app
              (template_app
                (template_hole 1,
                 template_app (template_hole 0, template_var 1)),
               template_var 0))
           ))),
    ("Poincare_Lines.ex_unit_disc_fix_is_poincare_line_to_x_axis",
     "is_poincare_line ?l ==>
      EX M. unit_disc_fix M & moebius_circline M ?l = x_axis",
     template_implication
      ([template_predicate
         (template_app (template_hole 6, template_var 0))],
       template_predicate (template_app (template_hole 5, t_empty)))),
    ("Poincare_Lines.is_poincare_line_trough_zero_trough_infty",
     "[| is_poincare_line ?l; 0\<^sub>h : circline_set ?l |]
      ==> \<infinity>\<^sub>h : circline_set ?l",
     template_implication
      ([template_predicate (template_app (template_hole 4, template_var 0)),
        template_predicate
         (
            template_app
             (template_app (template_hole 3, template_hole 2),
              template_app (template_hole 1, template_var 0))
            )],
       template_predicate
        (
           template_app
            (template_app (template_hole 3, template_hole 0),
             template_app (template_hole 1, template_var 0))
           ))),
    ("Poincare_Lines.is_poincare_line_not_trough_zero_is_circle",
     "[| is_poincare_line ?l; 0\<^sub>h ~: circline_set ?l |]
      ==> is_circle ?l",
     template_implication
      ([template_predicate (template_app (template_hole 5, template_var 0)),
        template_negation
         (
            template_predicate
             (
                template_app
                 (template_app (template_hole 3, template_hole 2),
                  template_app (template_hole 1, template_var 0))
                )
            )],
       template_negation
        (
           template_predicate
            (template_app (template_hole 0, template_var 0))
           ))),
    ("Poincare_Lines.mk_poincare_line_cmat_scale",
     "cor ?k *\<^sub>s\<^sub>m mk_poincare_line_cmat ?A ?B =
      mk_poincare_line_cmat (?k * ?A) (cor ?k * ?B)",
     template_equation
      (template_app
        (template_app
          (template_hole 4, template_app (template_hole 3, template_var 2)),
         template_app
          (template_app (template_hole 2, template_var 1), template_var 0)),
       template_app
        (template_app
          (template_hole 2,
           template_app
            (template_app (template_hole 1, template_var 2),
             template_var 1)),
         template_app
          (template_app
            (template_hole 0,
             template_app (template_hole 3, template_var 2)),
           template_var 0)))),
    ("Poincare_Lines.is_poincare_line_inverse_point",
     "[| is_poincare_line ?H; ?u : circline_set ?H |]
      ==> inversion ?u : circline_set ?H",
     template_implication
      ([template_predicate (template_app (template_hole 3, template_var 1)),
        template_predicate
         (
            template_app
             (template_app (template_hole 2, template_var 0),
              template_app (template_hole 1, template_var 1))
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 2,
               template_app (template_hole 0, template_var 0)),
             template_app (template_hole 1, template_var 1))
           ))),
    ("Poincare_Lines.poincare_line_cvec_cmat_AeqD",
     "poincare_line_cvec_cmat ?z ?w = (?A, ?B, ?C, ?D) ==> ?A = ?D",
     template_implication
      ([template_equation
         (template_app
           (template_app (template_hole 4, template_var 5), template_var 4),
          template_app
           (template_app (template_hole 3, template_var 3),
            template_app
             (template_app (template_hole 2, template_var 2),
              template_app
               (template_app (template_hole 1, template_var 1),
                template_var 0))))],
       template_equation (template_var 3, template_var 0))),
    ("Poincare_Lines.is_poincare_line_not_trough_zero_not_trough_infty",
     "[| is_poincare_line ?l; 0\<^sub>h ~: circline_set ?l |]
      ==> \<infinity>\<^sub>h ~: circline_set ?l",
     template_implication
      ([template_predicate (template_app (template_hole 5, template_var 0)),
        template_negation
         (
            template_predicate
             (
                template_app
                 (template_app (template_hole 3, template_hole 2),
                  template_app (template_hole 1, template_var 0))
                )
            )],
       template_negation
        (
           template_predicate
            (
               template_app
                (template_app (template_hole 3, template_hole 0),
                 template_app (template_hole 1, template_var 0))
               )
           ))),
    ("Poincare_Lines.poincare_collinear_doubleton",
     "[| ?u : unit_disc; ?v : unit_disc |] ==> poincare_collinear {?u, ?v}",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 4, template_var 1),
              template_hole 3)
            ),
        template_predicate
         (
            template_app
             (template_app (template_hole 4, template_var 0),
              template_hole 3)
            )],
       template_predicate
        (
           template_app
            (template_hole 2,
             template_app
              (template_app (template_hole 1, template_var 1),
               template_app
                (template_app (template_hole 1, template_var 0),
                 template_hole 0)))
           ))),
    ("Poincare_Lines.poincare_line_cvec_cmat_nonzero",
     "[| ?z ~= vec_zero; ?w ~= vec_zero |]
      ==> poincare_line_cvec_cmat ?z ?w ~= mat_zero",
     template_implication
      ([template_negation
         (template_equation (template_var 1, template_hole 3)),
        template_negation
         (template_equation (template_var 0, template_hole 3))],
       template_negation
        (
           template_equation
            (template_app
              (template_app (template_hole 1, template_var 1),
               template_var 0),
             template_hole 0)
           ))),
    ("Poincare_Lines.poincare_line_inversion_full",
     "[| ?u ~= ?v; on_circline (poincare_line ?u ?v) ?x |]
      ==> on_circline (poincare_line ?u ?v) (inversion ?x)",
     template_implication
      ([template_negation
         (template_equation (template_var 2, template_var 1)),
        template_predicate
         (
            template_app
             (template_app
               (template_hole 2,
                template_app
                 (template_app (template_hole 1, template_var 2),
                  template_var 1)),
              template_var 0)
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 2,
               template_app
                (template_app (template_hole 1, template_var 2),
                 template_var 1)),
             template_app (template_hole 0, template_var 0))
           ))),
    ("Poincare_Lines.ex_poincare_line_two_points",
     "?z ~= ?w ==>
      EX l. is_poincare_line l & ?z : circline_set l & ?w : circline_set l",
     template_implication
      ([template_negation
         (template_equation (template_var 1, template_var 0))],
       template_predicate (template_app (template_hole 4, t_empty)))),
    ("Poincare_Lines.poincare_line_sym_general",
     "[| ?u ~= ?v; ?u ~= inversion ?v |]
      ==> poincare_line ?u ?v = poincare_line ?v ?u",
     template_implication
      ([template_negation
         (template_equation (template_var 1, template_var 0)),
        template_negation
         (
            template_equation
             (template_var 1,
              template_app (template_hole 2, template_var 0))
            )],
       template_equation
        (template_app
          (template_app (template_hole 0, template_var 1), template_var 0),
         template_app
          (template_app (template_hole 0, template_var 0),
           template_var 1)))),
    ("Poincare_Lines.poincare_line_poincare_collinear3_general",
     "[| ?a : circline_set (poincare_line ?a1.0 ?a2.0); ?a1.0 ~= ?a2.0 |]
      ==> poincare_collinear {?a, ?a1.0, ?a2.0}",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 7, template_var 2),
              template_app
               (template_hole 6,
                template_app
                 (template_app (template_hole 5, template_var 1),
                  template_var 0)))
            ),
        template_negation
         (template_equation (template_var 1, template_var 0))],
       template_predicate
        (
           template_app
            (template_hole 2,
             template_app
              (template_app (template_hole 1, template_var 2),
               template_app
                (template_app (template_hole 1, template_var 1),
                 template_app
                  (template_app (template_hole 1, template_var 0),
                   template_hole 0))))
           ))),
    ("Poincare_Lines.poincare_line_sym",
     "[| ?u : unit_disc; ?v : unit_disc; ?u ~= ?v |]
      ==> poincare_line ?u ?v = poincare_line ?v ?u",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 5, template_var 1),
              template_hole 4)
            ),
        template_predicate
         (
            template_app
             (template_app (template_hole 5, template_var 0),
              template_hole 4)
            ),
        template_negation
         (template_equation (template_var 1, template_var 0))],
       template_equation
        (template_app
          (template_app (template_hole 0, template_var 1), template_var 0),
         template_app
          (template_app (template_hole 0, template_var 0),
           template_var 1)))),
    ("Poincare_Lines.poincare_line_0_real_is_x_axis",
     "[| ?x : circline_set x_axis; ?x ~= 0\<^sub>h;
         ?x ~= \<infinity>\<^sub>h |]
      ==> poincare_line 0\<^sub>h ?x = x_axis",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 8, template_var 0),
              template_app (template_hole 7, template_hole 6))
            ),
        template_negation
         (template_equation (template_var 0, template_hole 3)),
        template_negation
         (template_equation (template_var 0, template_hole 2))],
       template_equation
        (template_app
          (template_app (template_hole 0, template_hole 3), template_var 0),
         template_hole 6))),
    ("Poincare_Lines.poincare_line_0_imag_is_y_axis",
     "[| ?y : circline_set y_axis; ?y ~= 0\<^sub>h;
         ?y ~= \<infinity>\<^sub>h |]
      ==> poincare_line 0\<^sub>h ?y = y_axis",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 8, template_var 0),
              template_app (template_hole 7, template_hole 6))
            ),
        template_negation
         (template_equation (template_var 0, template_hole 3)),
        template_negation
         (template_equation (template_var 0, template_hole 2))],
       template_equation
        (template_app
          (template_app (template_hole 0, template_hole 3), template_var 0),
         template_hole 6))),
    ("Poincare_Lines.ex_poincare_line_points",
     "is_poincare_line ?H ==>
      EX u v.
         u : unit_disc & v : unit_disc & u ~= v & ?H = poincare_line u v",
     template_implication
      ([template_predicate
         (template_app (template_hole 8, template_var 0))],
       template_predicate (template_app (template_hole 7, t_empty)))),
    ("Poincare_Lines.wlog_line_x_axis",
     "[| is_poincare_line ?H; ?P x_axis;
         !!M. [| unit_disc_fix M; ?P (moebius_circline M ?H) |] ==> ?P ?H |]
      ==> ?P ?H",
     template_implication
      ([template_predicate (template_app (template_hole 4, template_var 1)),
        template_predicate (template_app (template_var 0, template_hole 3)),
        template_predicate (template_app (template_hole 2, t_empty))],
       template_predicate (template_app (template_var 0, template_var 1)))),
    ("Poincare_Lines.conjugate_preserve_poincare_line",
     "[| ?u : unit_disc; ?v : unit_disc; ?u ~= ?v |]
      ==> poincare_line (conjugate ?u) (conjugate ?v) =
          conjugate_circline (poincare_line ?u ?v)",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 7, template_var 1),
              template_hole 6)
            ),
        template_predicate
         (
            template_app
             (template_app (template_hole 7, template_var 0),
              template_hole 6)
            ),
        template_negation
         (template_equation (template_var 1, template_var 0))],
       template_equation
        (template_app
          (template_app
            (template_hole 2,
             template_app (template_hole 1, template_var 1)),
           template_app (template_hole 1, template_var 0)),
         template_app
          (template_hole 0,
           template_app
            (template_app (template_hole 2, template_var 1),
             template_var 0))))),
    ("Poincare_Lines.unit_disc_fix_preserve_poincare_collinear3",
     "unit_disc_fix ?M ==>
      poincare_collinear
       {moebius_pt ?M ?u, moebius_pt ?M ?v, moebius_pt ?M ?w} =
      poincare_collinear {?u, ?v, ?w}",
     template_implication
      ([template_predicate
         (template_app (template_hole 5, template_var 3))],
       template_equation
        (template_app
          (template_hole 3,
           template_app
            (template_app
              (template_hole 2,
               template_app
                (template_app (template_hole 1, template_var 3),
                 template_var 2)),
             template_app
              (template_app
                (template_hole 2,
                 template_app
                  (template_app (template_hole 1, template_var 3),
                   template_var 1)),
               template_app
                (template_app
                  (template_hole 2,
                   template_app
                    (template_app (template_hole 1, template_var 3),
                     template_var 0)),
                 template_hole 0)))),
         template_app
          (template_hole 3,
           template_app
            (template_app (template_hole 2, template_var 2),
             template_app
              (template_app (template_hole 2, template_var 1),
               template_app
                (template_app (template_hole 2, template_var 0),
                 template_hole 0))))))),
    ("Poincare_Lines.ex1_poincare_line_general",
     "[| ?u ~= ?v; ?u ~= inversion ?v |]
      ==> EX! l.
             is_poincare_line l &
             ?u : circline_set l & ?v : circline_set l",
     template_implication
      ([template_negation
         (template_equation (template_var 1, template_var 0)),
        template_negation
         (
            template_equation
             (template_var 1,
              template_app (template_hole 5, template_var 0))
            )],
       template_predicate (template_app (template_hole 4, t_empty)))),
    ("Poincare_Lines.ex_is_poincare_line_points",
     "is_poincare_line ?H ==>
      EX u v.
         u : unit_disc &
         v : unit_disc & u ~= v & {u, v} <= circline_set ?H",
     template_implication
      ([template_predicate
         (template_app (template_hole 10, template_var 0))],
       template_predicate (template_app (template_hole 9, t_empty)))),
    ("Poincare_Lines.poincare_collinear3_poincare_line_general",
     "[| poincare_collinear {?a, ?a1.0, ?a2.0}; ?a1.0 ~= ?a2.0;
         ?a1.0 ~= inversion ?a2.0 |]
      ==> ?a : circline_set (poincare_line ?a1.0 ?a2.0)",
     template_implication
      ([template_predicate
         (
            template_app
             (template_hole 8,
              template_app
               (template_app (template_hole 7, template_var 2),
                template_app
                 (template_app (template_hole 7, template_var 1),
                  template_app
                   (template_app (template_hole 7, template_var 0),
                    template_hole 6))))
            ),
        template_negation
         (template_equation (template_var 1, template_var 0)),
        template_negation
         (
            template_equation
             (template_var 1,
              template_app (template_hole 3, template_var 0))
            )],
       template_predicate
        (
           template_app
            (template_app (template_hole 2, template_var 2),
             template_app
              (template_hole 1,
               template_app
                (template_app (template_hole 0, template_var 1),
                 template_var 0)))
           ))),
    ("Poincare_Lines.ex1_poincare_line",
     "[| ?u ~= ?v; ?u : unit_disc; ?v : unit_disc |]
      ==> EX! l.
             is_poincare_line l &
             ?u : circline_set l & ?v : circline_set l",
     template_implication
      ([template_negation
         (template_equation (template_var 1, template_var 0)),
        template_predicate
         (
            template_app
             (template_app (template_hole 5, template_var 1),
              template_hole 4)
            ),
        template_predicate
         (
            template_app
             (template_app (template_hole 5, template_var 0),
              template_hole 4)
            )],
       template_predicate (template_app (template_hole 3, t_empty)))),
    ("Poincare_Lines.unit_disc_fix_preserve_poincare_line",
     "[| unit_disc_fix ?M; ?u : unit_disc; ?v : unit_disc; ?u ~= ?v |]
      ==> poincare_line (moebius_pt ?M ?u) (moebius_pt ?M ?v) =
          moebius_circline ?M (poincare_line ?u ?v)",
     template_implication
      ([template_predicate (template_app (template_hole 8, template_var 2)),
        template_predicate
         (
            template_app
             (template_app (template_hole 7, template_var 1),
              template_hole 6)
            ),
        template_predicate
         (
            template_app
             (template_app (template_hole 7, template_var 0),
              template_hole 6)
            ),
        template_negation
         (template_equation (template_var 1, template_var 0))],
       template_equation
        (template_app
          (template_app
            (template_hole 2,
             template_app
              (template_app (template_hole 1, template_var 2),
               template_var 1)),
           template_app
            (template_app (template_hole 1, template_var 2),
             template_var 0)),
         template_app
          (template_app (template_hole 0, template_var 2),
           template_app
            (template_app (template_hole 2, template_var 1),
             template_var 0))))),
    ("Poincare_Lines.poincare_line_x_axis",
     "[| ?x : unit_disc; ?y : unit_disc; ?x : circline_set x_axis;
         ?y : circline_set x_axis; ?x ~= ?y |]
      ==> poincare_line ?x ?y = x_axis",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 7, template_var 1),
              template_hole 6)
            ),
        template_predicate
         (
            template_app
             (template_app (template_hole 7, template_var 0),
              template_hole 6)
            ),
        template_predicate
         (
            template_app
             (template_app (template_hole 7, template_var 1),
              template_app (template_hole 5, template_hole 4))
            ),
        template_predicate
         (
            template_app
             (template_app (template_hole 7, template_var 0),
              template_app (template_hole 5, template_hole 4))
            ),
        template_negation
         (template_equation (template_var 1, template_var 0))],
       template_equation
        (template_app
          (template_app (template_hole 0, template_var 1), template_var 0),
         template_hole 4))),
    ("Poincare_Lines.is_poincare_line_0_real_is_x_axis",
     "[| is_poincare_line ?l; 0\<^sub>h : circline_set ?l;
         ?x : circline_set ?l Int circline_set x_axis; ?x ~= 0\<^sub>h;
         ?x ~= \<infinity>\<^sub>h |]
      ==> ?l = x_axis",
     template_implication
      ([template_predicate (template_app (template_hole 9, template_var 1)),
        template_predicate
         (
            template_app
             (template_app (template_hole 8, template_hole 7),
              template_app (template_hole 6, template_var 1))
            ),
        template_predicate
         (
            template_app
             (template_app (template_hole 8, template_var 0),
              template_app
               (template_app
                 (template_hole 5,
                  template_app (template_hole 6, template_var 1)),
                template_app (template_hole 6, template_hole 4)))
            ),
        template_negation
         (template_equation (template_var 0, template_hole 7)),
        template_negation
         (template_equation (template_var 0, template_hole 1))],
       template_equation (template_var 1, template_hole 4))),
    ("Poincare_Lines.is_poincare_line_0_imag_is_y_axis",
     "[| is_poincare_line ?l; 0\<^sub>h : circline_set ?l;
         ?y : circline_set ?l Int circline_set y_axis; ?y ~= 0\<^sub>h;
         ?y ~= \<infinity>\<^sub>h |]
      ==> ?l = y_axis",
     template_implication
      ([template_predicate (template_app (template_hole 9, template_var 1)),
        template_predicate
         (
            template_app
             (template_app (template_hole 8, template_hole 7),
              template_app (template_hole 6, template_var 1))
            ),
        template_predicate
         (
            template_app
             (template_app (template_hole 8, template_var 0),
              template_app
               (template_app
                 (template_hole 5,
                  template_app (template_hole 6, template_var 1)),
                template_app (template_hole 6, template_hole 4)))
            ),
        template_negation
         (template_equation (template_var 0, template_hole 7)),
        template_negation
         (template_equation (template_var 0, template_hole 1))],
       template_equation (template_var 1, template_hole 4))),
    ("Poincare_Lines.unique_poincare_line_general",
     "[| ?u ~= ?v; ?u ~= inversion ?v; ?u : circline_set ?l;
         ?v : circline_set ?l; is_poincare_line ?l |]
      ==> ?l = poincare_line ?u ?v",
     template_implication
      ([template_negation
         (template_equation (template_var 2, template_var 1)),
        template_negation
         (
            template_equation
             (template_var 2,
              template_app (template_hole 5, template_var 1))
            ),
        template_predicate
         (
            template_app
             (template_app (template_hole 4, template_var 2),
              template_app (template_hole 3, template_var 0))
            ),
        template_predicate
         (
            template_app
             (template_app (template_hole 4, template_var 1),
              template_app (template_hole 3, template_var 0))
            ),
        template_predicate
         (template_app (template_hole 2, template_var 0))],
       template_equation
        (template_var 0,
         template_app
          (template_app (template_hole 0, template_var 2),
           template_var 1)))),
    ("Poincare_Lines.unique_is_poincare_line_general",
     "[| ?u ~= ?v; ?u ~= inversion ?v; is_poincare_line ?l1.0;
         is_poincare_line ?l2.0;
         {?u, ?v} <= circline_set ?l1.0 Int circline_set ?l2.0 |]
      ==> ?l1.0 = ?l2.0",
     template_implication
      ([template_negation
         (template_equation (template_var 3, template_var 2)),
        template_negation
         (
            template_equation
             (template_var 3,
              template_app (template_hole 7, template_var 2))
            ),
        template_predicate (template_app (template_hole 6, template_var 1)),
        template_predicate (template_app (template_hole 6, template_var 0)),
        template_inequation
         (less_equals,
          template_app
           (template_app (template_hole 4, template_var 3),
            template_app
             (template_app (template_hole 4, template_var 2),
              template_hole 3)),
          template_app
           (template_app
             (template_hole 2,
              template_app (template_hole 1, template_var 1)),
            template_app (template_hole 1, template_var 0)))],
       template_equation (template_var 1, template_var 0))),
    ("Poincare_Lines.unique_poincare_line",
     "[| ?u ~= ?v; ?u : unit_disc; ?v : unit_disc; ?u : circline_set ?l;
         ?v : circline_set ?l; is_poincare_line ?l |]
      ==> ?l = poincare_line ?u ?v",
     template_implication
      ([template_negation
         (template_equation (template_var 2, template_var 1)),
        template_predicate
         (
            template_app
             (template_app (template_hole 5, template_var 2),
              template_hole 4)
            ),
        template_predicate
         (
            template_app
             (template_app (template_hole 5, template_var 1),
              template_hole 4)
            ),
        template_predicate
         (
            template_app
             (template_app (template_hole 5, template_var 2),
              template_app (template_hole 3, template_var 0))
            ),
        template_predicate
         (
            template_app
             (template_app (template_hole 5, template_var 1),
              template_app (template_hole 3, template_var 0))
            ),
        template_predicate
         (template_app (template_hole 2, template_var 0))],
       template_equation
        (template_var 0,
         template_app
          (template_app (template_hole 0, template_var 2),
           template_var 1)))),
    ("Poincare_Lines.unique_is_poincare_line",
     "[| ?u : unit_disc; ?v : unit_disc; ?u ~= ?v; is_poincare_line ?l1.0;
         is_poincare_line ?l2.0;
         {?u, ?v} <= circline_set ?l1.0 Int circline_set ?l2.0 |]
      ==> ?l1.0 = ?l2.0",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 10, template_var 3),
              template_hole 9)
            ),
        template_predicate
         (
            template_app
             (template_app (template_hole 10, template_var 2),
              template_hole 9)
            ),
        template_negation
         (template_equation (template_var 3, template_var 2)),
        template_predicate (template_app (template_hole 6, template_var 1)),
        template_predicate (template_app (template_hole 6, template_var 0)),
        template_inequation
         (less_equals,
          template_app
           (template_app (template_hole 4, template_var 3),
            template_app
             (template_app (template_hole 4, template_var 2),
              template_hole 3)),
          template_app
           (template_app
             (template_hole 2,
              template_app (template_hole 1, template_var 1)),
            template_app (template_hole 1, template_var 0)))],
       template_equation (template_var 1, template_var 0))),
    ("Poincare_Lines.is_poincare_line_mk_circline",
     "(?A, ?B, ?C, ?D) : hermitean_nonzero ==>
      is_poincare_line (mk_circline ?A ?B ?C ?D) =
      ((cmod ?A)\<^sup>2 < (cmod ?B)\<^sup>2 & ?A = ?D)",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_hole 19,
                template_app
                 (template_app (template_hole 18, template_var 3),
                  template_app
                   (template_app (template_hole 17, template_var 2),
                    template_app
                     (template_app (template_hole 16, template_var 1),
                      template_var 0)))),
              template_app (template_hole 15, t_empty))
            )],
       template_implication
        ([template_predicate
           (
              template_app
               (template_hole 8,
                template_app
                 (template_app
                   (template_app
                     (template_app (template_hole 7, template_var 3),
                      template_var 2),
                    template_var 1),
                  template_var 0))
              )],
         template_predicate
          (
             template_app
              (template_app
                (template_hole 14,
                 template_app
                  (template_app
                    (template_hole 6,
                     template_app
                      (template_app
                        (template_hole 5,
                         template_app (template_hole 4, template_var 3)),
                       template_app
                        (template_hole 3,
                         template_app (template_hole 2, template_hole 1)))),
                   template_app
                    (template_app
                      (template_hole 5,
                       template_app (template_hole 4, template_var 2)),
                     template_app
                      (template_hole 3,
                       template_app (template_hole 2, template_hole 1))))),
               template_app
                (template_app (template_hole 0, template_var 3),
                 template_var 0))
             )))),
    ("Poincare_Lines.poincare_collinear3_poincare_lines_equal_general",
     "[| poincare_collinear {?a, ?a1.0, ?a2.0}; ?a ~= ?a1.0; ?a ~= ?a2.0;
         ?a ~= inversion ?a1.0; ?a ~= inversion ?a2.0 |]
      ==> poincare_line ?a ?a1.0 = poincare_line ?a ?a2.0",
     template_implication
      ([template_predicate
         (
            template_app
             (template_hole 7,
              template_app
               (template_app (template_hole 6, template_var 2),
                template_app
                 (template_app (template_hole 6, template_var 1),
                  template_app
                   (template_app (template_hole 6, template_var 0),
                    template_hole 5))))
            ),
        template_negation
         (template_equation (template_var 2, template_var 1)),
        template_negation
         (template_equation (template_var 2, template_var 0)),
        template_negation
         (
            template_equation
             (template_var 2,
              template_app (template_hole 2, template_var 1))
            ),
        template_negation
         (
            template_equation
             (template_var 2,
              template_app (template_hole 2, template_var 0))
            )],
       template_equation
        (template_app
          (template_app (template_hole 0, template_var 2), template_var 1),
         template_app
          (template_app (template_hole 0, template_var 2),
           template_var 0)))),
    ("Poincare_Lines.poincare_collinear_zero_iff",
     "[| of_complex ?y' : unit_disc; of_complex ?z' : unit_disc; ?y' ~= ?z';
         ?y' ~= 0; ?z' ~= 0 |]
      ==> poincare_collinear {0\<^sub>h, of_complex ?y', of_complex ?z'} =
          (?y' * cnj ?z' = cnj ?y' * ?z')",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_hole 12,
                template_app (template_hole 11, template_var 1)),
              template_hole 10)
            ),
        template_predicate
         (
            template_app
             (template_app
               (template_hole 12,
                template_app (template_hole 11, template_var 0)),
              template_hole 10)
            ),
        template_negation
         (template_equation (template_var 1, template_var 0)),
        template_negation
         (template_equation (template_var 1, template_hole 7)),
        template_negation
         (template_equation (template_var 0, template_hole 7))],
       template_implication
        ([template_predicate
           (
              template_app
               (template_hole 5,
                template_app
                 (template_app (template_hole 4, template_hole 3),
                  template_app
                   (template_app
                     (template_hole 4,
                      template_app (template_hole 11, template_var 1)),
                    template_app
                     (template_app
                       (template_hole 4,
                        template_app (template_hole 11, template_var 0)),
                      template_hole 2))))
              )],
         template_equation
          (template_app
            (template_app (template_hole 1, template_var 1),
             template_app (template_hole 0, template_var 0)),
           template_app
            (template_app
              (template_hole 1,
               template_app (template_hole 0, template_var 1)),
             template_var 0))))),
    ("Poincare_Lines.ex_is_poincare_line_points'",
     "[| ?i1.0 : circline_set ?H Int unit_circle_set;
         ?i2.0 : circline_set ?H Int unit_circle_set; ?i1.0 ~= ?i2.0;
         ?a : circline_set ?H; ?a ~: unit_circle_set |]
      ==> EX b. b ~= ?i1.0 &
                b ~= ?i2.0 &
                b ~= ?a & b ~= inversion ?a & b : circline_set ?H",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 8, template_var 3),
              template_app
               (template_app
                 (template_hole 7,
                  template_app (template_hole 6, template_var 2)),
                template_hole 5))
            ),
        template_predicate
         (
            template_app
             (template_app (template_hole 8, template_var 1),
              template_app
               (template_app
                 (template_hole 7,
                  template_app (template_hole 6, template_var 2)),
                template_hole 5))
            ),
        template_negation
         (template_equation (template_var 3, template_var 1)),
        template_predicate
         (
            template_app
             (template_app (template_hole 8, template_var 0),
              template_app (template_hole 6, template_var 2))
            ),
        template_negation
         (
            template_predicate
             (
                template_app
                 (template_app (template_hole 8, template_var 0),
                  template_hole 5)
                )
            )],
       template_predicate (template_app (template_hole 2, t_empty)))),
    ("Poincare_Lines.poincare_collinear_zero_polar_form",
     "[| poincare_collinear {0\<^sub>h, of_complex ?x, of_complex ?y};
         ?x ~= 0; ?y ~= 0; of_complex ?x : unit_disc;
         of_complex ?y : unit_disc |]
      ==> EX \<phi> rx ry.
             ?x = cor rx * cis \<phi> &
             ?y = cor ry * cis \<phi> & rx ~= 0 & ry ~= 0",
     template_implication
      ([template_predicate
         (
            template_app
             (template_hole 16,
              template_app
               (template_app (template_hole 15, template_hole 14),
                template_app
                 (template_app
                   (template_hole 15,
                    template_app (template_hole 13, template_var 1)),
                  template_app
                   (template_app
                     (template_hole 15,
                      template_app (template_hole 13, template_var 0)),
                    template_hole 12))))
            ),
        template_negation
         (template_equation (template_var 1, template_hole 9)),
        template_negation
         (template_equation (template_var 0, template_hole 9)),
        template_predicate
         (
            template_app
             (template_app
               (template_hole 8,
                template_app (template_hole 13, template_var 1)),
              template_hole 7)
            ),
        template_predicate
         (
            template_app
             (template_app
               (template_hole 8,
                template_app (template_hole 13, template_var 0)),
              template_hole 7)
            )],
       template_predicate (template_app (template_hole 6, t_empty)))),
    ("Poincare_Lines.poincare_line_non_homogenous",
     "[| ?u ~= \<infinity>\<^sub>h; ?v ~= \<infinity>\<^sub>h; ?u ~= ?v;
         ?u ~= inversion ?v |]
      ==> let u' = to_complex ?u; v' = to_complex ?v;
              A = \<i> * (u' * cnj v' - v' * cnj u');
              B = \<i> *
                  (v' * cor ((cmod u')\<^sup>2 + 1) -
                   u' * cor ((cmod v')\<^sup>2 + 1))
          in poincare_line ?u ?v = mk_circline A B (cnj B) A",
     template_implication
      ([template_negation
         (template_equation (template_var 1, template_hole 18)),
        template_negation
         (template_equation (template_var 0, template_hole 18)),
        template_negation
         (template_equation (template_var 1, template_var 0)),
        template_negation
         (
            template_equation
             (template_var 1,
              template_app (template_hole 17, template_var 0))
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 16,
               template_app (template_hole 15, template_var 1)),
             t_empty)
           )))]
