   [("Propositional_Logic.max_depth_0",
     "(max_depth ?\<phi> = 0) = (EX n. ?\<phi> = Atom n)",
     template_equation
      (template_app
        (template_app
          (template_hole 5, template_app (template_hole 4, template_var 0)),
         template_hole 3),
       template_app (template_hole 2, t_empty))),
    ("Propositional_Logic.max_depth_Suc",
     "(max_depth ?\<phi> = Suc ?n) =
      ((EX \<psi>. ?\<phi> = Neg \<psi> & max_depth \<psi> = ?n) |
       (EX \<psi>1 \<psi>2.
           ?\<phi> = Conj \<psi>1 \<psi>2 &
           max (max_depth \<psi>1) (max_depth \<psi>2) = ?n))",
     template_equation
      (template_app
        (template_app
          (template_hole 9, template_app (template_hole 8, template_var 1)),
         template_app (template_hole 7, template_var 0)),
       template_app
        (template_app
          (template_hole 6, template_app (template_hole 5, t_empty)),
         template_app (template_hole 5, t_empty)))),
    ("Propositional_Logic.mkTree_unfold",
     "mkTree ?rs ?s =
      (case trim ?rs ?s of
       r ## s' =>
         Abstract_Completeness.tree.Node (?s, r)
          (mkTree s' |`| pickEff r ?s))",
     template_equation
      (template_app
        (template_app
          (template_app (template_hole 9, t_empty), template_var 1),
         template_var 0),
       template_app
        (template_app (template_hole 5, t_empty),
         template_app
          (template_app
            (template_app (template_hole 0, t_empty), template_var 1),
           template_var 0))))]
