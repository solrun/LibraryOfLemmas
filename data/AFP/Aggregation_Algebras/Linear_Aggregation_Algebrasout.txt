Loading theory "Draft.Semigroups_Big" (required by "Draft.Linear_Aggregation_AlgebrasMoreTemplates" via "Draft.Linear_Aggregation_Algebras" via "Draft.Matrix_Aggregation_Algebras")
Loading theory "HOL-Library.Function_Algebras" (required by "Draft.Linear_Aggregation_AlgebrasMoreTemplates" via "Draft.ExtrEqs" via "HOL-Library.BigO")
Loading theory "HOL-Library.Nat_Bijection" (required by "Draft.Linear_Aggregation_AlgebrasMoreTemplates" via "Draft.ExtrEqs" via "HOL-Library.Stream")
Loading theory "HOL-Library.Set_Algebras" (required by "Draft.Linear_Aggregation_AlgebrasMoreTemplates" via "Draft.ExtrEqs" via "HOL-Library.BigO")
instantiation
  set :: (plus) plus
  plus_set == plus :: 'a set => 'a set => 'a set
instantiation
  fun :: (type, plus) plus
  plus_fun == plus :: ('a => 'b) => ('a => 'b) => 'a => 'b
instantiation
  fun :: (type, zero) zero
  zero_fun == zero_class.zero :: 'a => 'b
instantiation
  set :: (times) times
  times_set == times :: 'a set => 'a set => 'a set
instantiation
  fun :: (type, times) times
  times_fun == times :: ('a => 'b) => ('a => 'b) => 'a => 'b
instantiation
  set :: (zero) zero
  zero_set == zero_class.zero :: 'a set
locale abel_semigroup_set
  fixes f :: "'a => 'a => 'a"  (infixl \<open>\<^bold>*\<close> 70)
    and z :: "'a"  (\<open>\<^bold>1\<close>)
  assumes "abel_semigroup_set (\<^bold>*) \<^bold>1"
instantiation
  fun :: (type, one) one
  one_fun == one_class.one :: 'a => 'b
instantiation
  set :: (one) one
  one_set == one_class.one :: 'a set
### theory "HOL-Library.Function_Algebras"
### 0.102s elapsed time, 0.422s cpu time, 0.029s GC time
Loading theory "HOL-Library.Tree" (required by "Draft.Linear_Aggregation_AlgebrasMoreTemplates" via "Draft.ExtrEqs" via "Draft.Templates")
Found termination order: "(%p. size (snd p)) <*mlex*> {}"
### theory "HOL-Library.Set_Algebras"
### 0.171s elapsed time, 0.700s cpu time, 0.029s GC time
Loading theory "HOL-Library.BigO" (required by "Draft.Linear_Aggregation_AlgebrasMoreTemplates" via "Draft.ExtrEqs")
Found termination order: "size_list size <*mlex*> {}"
### theory "HOL-Library.Nat_Bijection"
### 0.339s elapsed time, 1.361s cpu time, 0.118s GC time
Loading theory "HOL-Library.Stream" (required by "Draft.Linear_Aggregation_AlgebrasMoreTemplates" via "Draft.ExtrEqs")
class ab_semigroup_add_0 = ab_semigroup_add + zero +
  assumes "zero_neutral": "!!x y. x + y + (0::'a) = x + y"
  assumes "zero_idem": "(0::'a) + (0::'a) = (0::'a)"
class comm_monoid_add = ab_semigroup_add + monoid_add +
  assumes "add_0": "!!a. (0::'a) + a = a"
consts
  left :: "'a tree => 'a tree"
consts
  right :: "'a tree => 'a tree"
Found termination order: "size <*mlex*> {}"
Found termination order: "size <*mlex*> {}"
consts
  shift :: "'a list => 'a stream => 'a stream"
Proofs for coinductive predicate(s) "streamsp"
  Proving monotonicity ...
Found termination order: "size <*mlex*> {}"
class height = type +
  fixes height :: "'a => nat"
instantiation
  tree :: (type) height
  height_tree == height :: 'a tree => nat
consts
  snth :: "'a stream => nat => 'a"
consts
  stake :: "nat => 'a stream => 'a list"
Found termination order: "size <*mlex*> {}"
consts
  sdrop :: "nat => 'a stream => 'a stream"
### theory "HOL-Library.BigO"
### 0.829s elapsed time, 3.136s cpu time, 0.606s GC time
Loading theory "Stone_Algebras.Lattice_Basics" (required by "Draft.Linear_Aggregation_AlgebrasMoreTemplates" via "Draft.Linear_Aggregation_Algebras" via "Draft.Matrix_Aggregation_Algebras" via "Stone_Kleene_Relation_Algebras.Matrix_Kleene_Algebras" via "Stone_Relation_Algebras.Matrix_Relation_Algebras" via "Stone_Relation_Algebras.Relation_Algebras" via "Stone_Algebras.P_Algebras")
consts
  sfilter :: "('a => bool) => 'a stream => 'a stream"
Found termination order: "size <*mlex*> {}"
consts
  cycle :: "'a list => 'a stream"
class sup = type +
  fixes sup :: "'a => 'a => 'a"
class inf = type +
  fixes inf :: "'a => 'a => 'a"
class uminus = type +
  fixes uminus :: "'a => 'a"
Found termination order: "size <*mlex*> {}"
consts
  siterate :: "('a => 'a) => 'a => 'a stream"
consts
  flat :: "'a list stream => 'a stream"
Found termination order: "size <*mlex*> {}"
class ord = type +
  fixes less_eq :: "'a => 'a => bool"
    and less :: "'a => 'a => bool"
consts
  sinterleave :: "'a stream => 'a stream => 'a stream"
consts
  szip :: "'a stream => 'b stream => ('a * 'b) stream"
### theory "Draft.Semigroups_Big"
### 1.219s elapsed time, 4.698s cpu time, 0.765s GC time
Found termination order: "size <*mlex*> {}"
consts
  smap2 :: "('a => 'b => 'c) => 'a stream => 'b stream => 'c stream"
class order = preorder +
  assumes "order_antisym": "!!x y. [| x <= y; y <= x |] ==> x = y"
### theory "HOL-Library.Stream"
### 0.921s elapsed time, 3.492s cpu time, 0.648s GC time
Found termination order: "size <*mlex*> {}"
class semilattice_sup = sup + order +
  assumes "sup_ge1": "!!x y. x <= x \<squnion> y"
    and "sup_ge2": "!!y x. y <= x \<squnion> y"
    and "sup_least": "!!y x z. [| y <= x; z <= x |] ==> y \<squnion> z <= x"
Found termination order: "size <*mlex*> {}"
### Partially applied constant "Lattices.sup_class.sup" on left hand side of equation, in theorem:
### monoid_add.sum_list (\<squnion>) bot ?xs == foldr (\<squnion>) ?xs bot
### Partially applied constant "Lattices.sup_class.sup" on left hand side of equation, in theorem:
### comm_monoid_add.sum (\<squnion>) bot ?g (set ?xs) ==
### sup_monoid.sum_list (map ?g (remdups ?xs))
Found termination order: "(%p. size (fst p)) <*mlex*> {}"
Found termination order: "size <*mlex*> {}"
class semilattice_inf = inf + order +
  assumes "inf_le1": "!!x y. x \<sqinter> y <= x"
    and "inf_le2": "!!x y. x \<sqinter> y <= y"
    and
    "inf_greatest": "!!x y z. [| x <= y; x <= z |] ==> x <= y \<sqinter> z"
Found termination order: "(%p. size (snd p)) <*mlex*> {}"
class directed_semilattice_inf = semilattice_inf +
  assumes "ub": "!!x y. EX z>=x. y <= z"
Found termination order: "size <*mlex*> {}"
### theory "HOL-Library.Tree"
### 1.733s elapsed time, 5.643s cpu time, 0.865s GC time
Loading theory "Draft.Templates" (required by "Draft.Linear_Aggregation_AlgebrasMoreTemplates" via "Draft.ExtrEqs")
datatype template_term
=
     t_empty
   | template_app of template_term * template_term
   | template_hole of int
   | template_var of int
datatype sign
= equals | greater_equals | greater_than | less_equals | less_than
datatype template
=
     template_bimplication of template * template
   | template_dunno
   | template_equation of template_term * template_term
   | template_implication of template list * template
   | template_inequation of sign * template_term * template_term
   | template_negation of template
   | template_predicate of template_term
constructor t_empty: template_term
constructor template_app: template_term * template_term -> template_term
constructor template_hole: int -> template_term
constructor template_var: int -> template_term
constructor equals: sign
constructor greater_equals: sign
constructor greater_than: sign
constructor less_equals: sign
constructor less_than: sign
constructor template_bimplication: template * template -> template
constructor template_dunno: template
constructor template_equation: template_term * template_term -> template
constructor template_implication: template list * template -> template
constructor template_inequation:
   sign * template_term * template_term -> template
constructor template_negation: template -> template
constructor template_predicate: template_term -> template
val vfs = fn: term -> (indexname * typ) list * (string * typ) list
val indexOf = fn: ''a list -> ''a -> int -> int
val has_eq = fn: term -> bool
val term2template = fn:
   (indexname * typ) list -> (string * typ) list -> term -> template_term
val lemma2predicate = fn: term -> term -> template
val makeTemplatewithContext = fn: term -> term -> template
val lemma2template = fn: term -> template
val thm2template = fn: thm -> template
val tterm2string = fn: template_term -> string
val template2string = fn: template -> string
val t = "height ?t <= size ?t": thm
val th =
   Const ("HOL.Trueprop", "bool => prop") $
     (Const ("Orderings.ord_class.less_eq", "nat => nat => bool") $
       (Const ("Tree.height_class.height", "?'a tree => nat") $
         Var (("t", 0), "?'a tree")) $
       (Const ("Nat.size_class.size", "?'a tree => nat") $
         Var (("t", 0), "?'a tree"))):
   term
### theory "Draft.Templates"
### 0.052s elapsed time, 0.124s cpu time, 0.000s GC time
Loading theory "Draft.ExtrEqs" (required by "Draft.Linear_Aggregation_AlgebrasMoreTemplates")
### Partially applied constant "Lattices.inf_class.inf" on left hand side of equation, in theorem:
### monoid_add.sum_list (\<sqinter>) top ?xs == foldr (\<sqinter>) ?xs top
### Partially applied constant "Lattices.inf_class.inf" on left hand side of equation, in theorem:
### comm_monoid_add.sum (\<sqinter>) top ?g (set ?xs) ==
### inf.sup_monoid.sum_list (map ?g (remdups ?xs))
val eqpattern =
   Pattern
    (
       Const ("HOL.Trueprop", "bool => prop") $
         (Const ("HOL.eq", "?'a => ?'a => bool") $
           Var (("_dummy_", 1), "?'a") $ Var (("_dummy_", 2), "?'a"))
       ):
   term Find_Theorems.criterion
val badeqpattern = Pattern (Const ("Pure.eq", "?'a => ?'a => prop")):
   term Find_Theorems.criterion
val undefpattern =
   Pattern
    (
       Const ("HOL.Trueprop", "bool => prop") $
         (Const ("HOL.eq", "?'a => ?'a => bool") $
           Var (("_dummy_", 1), "?'a") $ Const ("HOL.undefined", "?'a"))
       ):
   term Find_Theorems.criterion
val thmpattern =
   Pattern
    (Const ("HOL.Trueprop", "bool => prop") $ Var (("_dummy_", 1), "bool")):
   term Find_Theorems.criterion
val badnames =
   ["*nitpick*", "*Nitpick*", "*full_exhaustive*", "*_def*", "Enum.finite*",
    "*Quickcheck*", "ATP*", "*Nunchaku*", "*Code*", "*BNF*", "*SMT*",
    "*.*.*"]:
   string list
val unwanted_names =
   [(false, Name "*nitpick*"), (false, Name "*Nitpick*"),
    (false, Name "*full_exhaustive*"), (false, Name "*_def*"),
    (false, Name "Enum.finite*"), (false, Name "*Quickcheck*"),
    (false, Name "ATP*"), (false, Name "*Nunchaku*"),
    (false, Name "*Code*"), (false, Name "*BNF*"), (false, Name "*SMT*"),
    (false, Name "*.*.*")]:
   (bool * term Find_Theorems.criterion) list
val has_vars = fn: term -> bool
val get_all_eqs = fn: string -> Proof.context -> (string * thm) list
val get_all_thms = fn: string -> Proof.context -> (string * thm) list
val get_noneq_thms = fn: string -> Proof.context -> (string * thm) list
val template_eqs = fn:
   string -> Proof.context -> (string * thm * template) list
val template_thms = fn:
   string -> Proof.context -> (string * thm * template) list
### theory "Draft.ExtrEqs"
### 0.490s elapsed time, 1.009s cpu time, 0.063s GC time
class dense_lattice = bounded_lattice +
  assumes
    "bot_meet_irreducible":
      "!!x y. x \<sqinter> y = bot --> x = bot | y = bot"
class distrib_lattice = lattice +
  assumes
    "sup_inf_distrib1":
      "!!x y z.
          x \<squnion> y \<sqinter> z =
          (x \<squnion> y) \<sqinter> (x \<squnion> z)"
class linorder_lattice_expansion = bounded_linorder + inf + sup +
  assumes "sup_def": "!!x y. x \<squnion> y = max x y"
  assumes "inf_def": "!!x y. x \<sqinter> y = min x y"
### Additional type variable(s) in locale specification "non_trivial": 'a
class non_trivial = type +
  assumes "consistent": "EX x y. x ~= y"
class boolean_algebra = minus + uminus + bounded_lattice + distrib_lattice +
  assumes "inf_compl_bot": "!!x. x \<sqinter> - x = bot"
    and "sup_compl_top": "!!x. x \<squnion> - x = top"
  assumes "diff_eq": "!!x y. x - y = x \<sqinter> - y"
### theory "Stone_Algebras.Lattice_Basics"
### 7.510s elapsed time, 9.664s cpu time, 0.601s GC time
Loading theory "Stone_Relation_Algebras.Fixpoints" (required by "Draft.Linear_Aggregation_AlgebrasMoreTemplates" via "Draft.Linear_Aggregation_Algebras" via "Draft.Matrix_Aggregation_Algebras" via "Stone_Kleene_Relation_Algebras.Matrix_Kleene_Algebras" via "Stone_Relation_Algebras.Matrix_Relation_Algebras" via "Stone_Relation_Algebras.Relation_Algebras" via "Stone_Relation_Algebras.Semirings")
Loading theory "Stone_Algebras.P_Algebras" (required by "Draft.Linear_Aggregation_AlgebrasMoreTemplates" via "Draft.Linear_Aggregation_Algebras" via "Draft.Matrix_Aggregation_Algebras" via "Stone_Kleene_Relation_Algebras.Matrix_Kleene_Algebras" via "Stone_Relation_Algebras.Matrix_Relation_Algebras" via "Stone_Relation_Algebras.Relation_Algebras")
class order = preorder +
  assumes "order_antisym": "!!x y. [| x <= y; y <= x |] ==> x = y"
class p_algebra = uminus + bounded_lattice +
  assumes "pseudo_complement": "!!x y. (x \<sqinter> y = bot) = (x <= - y)"
### theory "Stone_Relation_Algebras.Fixpoints"
### 1.196s elapsed time, 2.799s cpu time, 0.159s GC time
Loading theory "Stone_Relation_Algebras.Semirings" (required by "Draft.Linear_Aggregation_AlgebrasMoreTemplates" via "Draft.Linear_Aggregation_Algebras" via "Draft.Matrix_Aggregation_Algebras" via "Stone_Kleene_Relation_Algebras.Matrix_Kleene_Algebras" via "Stone_Relation_Algebras.Matrix_Relation_Algebras" via "Stone_Relation_Algebras.Relation_Algebras")
class non_associative_left_semiring = one + times +
  bounded_semilattice_sup_bot +
  assumes
    "mult_left_sub_dist_sup":
      "!!x y z. x * y \<squnion> x * z <= x * (y \<squnion> z)"
  assumes
    "mult_right_dist_sup":
      "!!x y z. (x \<squnion> y) * z = x * z \<squnion> y * z"
  assumes "mult_left_zero": "!!x. bot * x = bot"
  assumes "mult_left_one": "!!x. (1::'a) * x = x"
  assumes "mult_sub_right_one": "!!x. x <= x * (1::'a)"
class p_algebra_eq = uminus + bounded_lattice +
  assumes "p_bot_eq": "- bot = top"
    and "p_top_eq": "- top = bot"
    and
    "inf_import_p_eq":
      "!!x y. x \<sqinter> - (x \<sqinter> y) = x \<sqinter> - y"
class pre_left_semiring = non_associative_left_semiring +
  assumes "mult_semi_associative": "!!x y z. x * y * z <= x * (y * z)"
class residuated_pre_left_semiring = divide + pre_left_semiring +
  assumes "lres_galois": "!!x y z. (x * y <= z) = (x <= z / y)"
class idempotent_left_zero_semiring = idempotent_left_semiring +
  assumes
    "mult_left_dist_sup":
      "!!x y z. x * (y \<squnion> z) = x * y \<squnion> x * z"
### Partially applied constant "Lattices.sup_class.sup" on left hand side of equation, in theorem:
### semiring.numeral num.One == 1::?'a
### Partially applied constant "Lattices.sup_class.sup" on left hand side of equation, in theorem:
### semiring.numeral (num.Bit0 ?n) ==
### let m = semiring.numeral ?n in m \<squnion> m
### Partially applied constant "Lattices.sup_class.sup" on left hand side of equation, in theorem:
### semiring.numeral (num.Bit1 ?n) ==
### let m = semiring.numeral ?n in m \<squnion> m \<squnion> (1::?'a)
class stone_algebra = pd_algebra +
  assumes "stone": "!!x. - x \<squnion> - - x = top"
class idempotent_semiring = idempotent_left_zero_semiring +
  assumes "mult_right_zero": "!!x. x * bot = bot"
class bounded_non_associative_left_semiring = top +
  non_associative_left_semiring +
  assumes "sup_right_top": "!!x. x \<squnion> top = top"
class linorder_stone_algebra_expansion = uminus +
  linorder_lattice_expansion +
  assumes "uminus_def": "!!x. - x = (if x = bot then top else bot)"
class implies = type +
  fixes implies :: "'a => 'a => 'a"
class heyting_semilattice = semilattice_inf + implies +
  assumes
    "implies_galois":
      "!!x y z. (x \<sqinter> y <= z) = (x <= y \<leadsto> z)"
class heyting_semilattice_eq = semilattice_inf + implies +
  assumes "implies_mp_below": "!!x y. x \<sqinter> (x \<leadsto> y) <= y"
    and
    "implies_galois_increasing": "!!x y. x <= y \<leadsto> x \<sqinter> y"
    and
    "implies_isotone_inf":
      "!!x y z. x \<leadsto> y \<sqinter> z <= x \<leadsto> y"
### theory "Stone_Relation_Algebras.Semirings"
### 5.305s elapsed time, 10.801s cpu time, 0.629s GC time
Loading theory "Stone_Kleene_Relation_Algebras.Iterings" (required by "Draft.Linear_Aggregation_AlgebrasMoreTemplates" via "Draft.Linear_Aggregation_Algebras" via "Draft.Matrix_Aggregation_Algebras" via "Stone_Kleene_Relation_Algebras.Matrix_Kleene_Algebras" via "Stone_Kleene_Relation_Algebras.Kleene_Relation_Algebras" via "Stone_Kleene_Relation_Algebras.Kleene_Algebras")
class circ = type +
  fixes circ :: "'a => 'a"
class left_conway_semiring = circ + idempotent_left_semiring +
  assumes
    "circ_left_unfold": "!!x. Rf x (x\<^sup>\<circ>) = x\<^sup>\<circ>"
  assumes
    "circ_left_slide":
      "!!x y. (x * y)\<^sup>\<circ> * x <= x * (y * x)\<^sup>\<circ>"
  assumes
    "circ_sup_1":
      "!!x y.
          (x \<squnion> y)\<^sup>\<circ> =
          x\<^sup>\<circ> * (y * x\<^sup>\<circ>)\<^sup>\<circ>"
class heyting_algebra = uminus + bounded_heyting_lattice +
  assumes "uminus_eq": "!!x. - x = x \<leadsto> bot"
class left_conway_semiring_1 = left_conway_semiring +
  assumes
    "circ_right_slide":
      "!!x y. x * (y * x)\<^sup>\<circ> <= (x * y)\<^sup>\<circ> * x"
class heyting_algebra_eq = uminus + bounded_lattice + implies +
  assumes
    "implies_mp_eq": "!!x y. x \<sqinter> (x \<leadsto> y) = x \<sqinter> y"
    and
    "implies_import_inf":
      "!!x y z.
          x \<sqinter> (x \<sqinter> y \<leadsto> (x \<leadsto> z)) =
          x \<sqinter> (y \<leadsto> z)"
    and
    "inf_inf_implies":
      "!!z x y. z \<sqinter> (x \<sqinter> y \<leadsto> x) = z"
    and "uminus_eq_eq": "!!x. - x = x \<leadsto> bot"
class itering_1 = left_conway_semiring_1 +
  assumes
    "circ_simulate":
      "!!z x y.
          z * x <= y * z --> z * x\<^sup>\<circ> <= y\<^sup>\<circ> * z"
class itering_2 = left_conway_semiring_1 +
  assumes
    "circ_simulate_right":
      "!!z x y w.
          z * x <= y * z \<squnion> w -->
          z * x\<^sup>\<circ>
          <= y\<^sup>\<circ> * (z \<squnion> w * x\<^sup>\<circ>)"
  assumes
    "circ_simulate_left":
      "!!x z y w.
          x * z <= z * y \<squnion> w -->
          x\<^sup>\<circ> * z
          <= (z \<squnion> x\<^sup>\<circ> * w) * y\<^sup>\<circ>"
class heyting_stone_algebra = heyting_algebra +
  assumes "heyting_stone": "!!x. - x \<squnion> - - x = top"
class brouwer_algebra = minus + uminus + bounded_lattice +
  assumes "minus_galois": "!!x y z. (x <= y \<squnion> z) = (x - y <= z)"
    and "uminus_eq_minus": "!!x. - x = top - x"
class itering = circ + idempotent_left_zero_semiring +
  assumes
    "circ_sup":
      "!!x y.
          (x \<squnion> y)\<^sup>\<circ> =
          (x\<^sup>\<circ> * y)\<^sup>\<circ> * x\<^sup>\<circ>"
  assumes
    "circ_mult":
      "!!x y. (x * y)\<^sup>\<circ> = Rf (x * (y * x)\<^sup>\<circ>) y"
  assumes
    "circ_simulate_right_plus":
      "!!z x y w.
          z * x <= y * y\<^sup>\<circ> * z \<squnion> w -->
          z * x\<^sup>\<circ>
          <= y\<^sup>\<circ> * (z \<squnion> w * x\<^sup>\<circ>)"
  assumes
    "circ_simulate_left_plus":
      "!!x z y w.
          x * z <= z * y\<^sup>\<circ> \<squnion> w -->
          x\<^sup>\<circ> * z
          <= (z \<squnion> x\<^sup>\<circ> * w) * y\<^sup>\<circ>"
class boolean_algebra = minus + sup_inf_top_bot_uminus_ord +
  bounded_lattice + distrib_lattice +
  assumes "inf_compl_bot": "!!x. x \<sqinter> - x = bot"
    and "sup_compl_top": "!!x. x \<squnion> - x = top"
  assumes "diff_eq": "!!x y. x - y = x \<sqinter> - y"
class L = type +
  fixes L :: "'a"
class left_conway_semiring_L = L + left_conway_semiring +
  assumes
    "one_circ_mult_split": "!!x. (1::'a)\<^sup>\<circ> * x = L \<squnion> x"
  assumes "L_split_sup": "!!x y. x * (y \<squnion> L) <= x * y \<squnion> L"
class itering_L = L + itering +
  assumes "L_def": "L = (1::'a)\<^sup>\<circ> * bot"
### theory "Stone_Kleene_Relation_Algebras.Iterings"
### 7.057s elapsed time, 14.978s cpu time, 2.268s GC time
Loading theory "Stone_Kleene_Relation_Algebras.Kleene_Algebras" (required by "Draft.Linear_Aggregation_AlgebrasMoreTemplates" via "Draft.Linear_Aggregation_Algebras" via "Draft.Matrix_Aggregation_Algebras" via "Stone_Kleene_Relation_Algebras.Matrix_Kleene_Algebras" via "Stone_Kleene_Relation_Algebras.Kleene_Relation_Algebras")
class star = type +
  fixes star :: "'a => 'a"
class left_kleene_algebra = star + idempotent_left_semiring +
  assumes
    "star_left_unfold": "!!y. Rf y (y\<^sup>\<star>) <= y\<^sup>\<star>"
  assumes
    "star_left_induct":
      "!!z y x. z \<squnion> y * x <= x --> y\<^sup>\<star> * z <= x"
class left_kleene_algebra = star + idempotent_left_semiring +
  assumes
    "star_left_unfold":
      "!!y. (1::'a) \<squnion> y\<^sup>+ <= y\<^sup>\<star>"
  assumes
    "star_left_induct":
      "!!z y x. z \<squnion> y * x <= x --> y\<^sup>\<star> * z <= x"
class strong_left_kleene_algebra = left_kleene_algebra +
  assumes
    "star_right_induct":
      "!!z x y. z \<squnion> x * y <= x --> z * y\<^sup>\<star> <= x"
class strong_left_kleene_algebra = left_kleene_algebra +
  assumes
    "star_right_induct":
      "!!z x y. z \<squnion> x * y <= x --> z * y\<^sup>\<star> <= x"
### theory "Stone_Algebras.P_Algebras"
### 15.702s elapsed time, 33.474s cpu time, 4.606s GC time
Loading theory "Stone_Relation_Algebras.Relation_Algebras" (required by "Draft.Linear_Aggregation_AlgebrasMoreTemplates" via "Draft.Linear_Aggregation_Algebras" via "Draft.Matrix_Aggregation_Algebras" via "Stone_Kleene_Relation_Algebras.Matrix_Kleene_Algebras" via "Stone_Relation_Algebras.Matrix_Relation_Algebras")
class conv = type +
  fixes conv :: "'a => 'a"
class bounded_distrib_allegory = one + times + bounded_distrib_lattice +
  conv +
  assumes "comp_associative": "!!x y z. x * y * z = x * (y * z)"
  assumes
    "comp_right_dist_sup":
      "!!x y z. (x \<squnion> y) * z = x * z \<squnion> y * z"
  assumes "comp_left_zero": "!!x. bot * x = bot"
  assumes "comp_left_one": "!!x. (1::'a) * x = x"
  assumes "conv_involutive": "!!x. x\<^sup>T\<^sup>T = x"
  assumes
    "conv_dist_sup":
      "!!x y. (x \<squnion> y)\<^sup>T = x\<^sup>T \<squnion> y\<^sup>T"
  assumes "conv_dist_comp": "!!x y. (x * y)\<^sup>T = y\<^sup>T * x\<^sup>T"
  assumes
    "dedekind_1":
      "!!x y z. x * y \<sqinter> z <= x * (y \<sqinter> x\<^sup>T * z)"
class kleene_algebra_var = star + idempotent_semiring +
  assumes
    "star_left_unfold_var": "!!y. Rf y (y\<^sup>\<star>) <= y\<^sup>\<star>"
  assumes
    "star_left_induct_var": "!!y x. y * x <= x --> y\<^sup>\<star> * x <= x"
  assumes
    "star_right_induct_var":
      "!!x y. x * y <= x --> x * y\<^sup>\<star> <= x"
### theory "Stone_Kleene_Relation_Algebras.Kleene_Algebras"
### 7.340s elapsed time, 16.120s cpu time, 2.424s GC time
class stone_relation_algebra = stone_algebra + pd_allegory +
  assumes "pp_dist_comp": "!!x y. - - (x * y) = - - x * - - y"
  assumes "pp_one": "- - (1::'a) = (1::'a)"
### Partially applied constant "Lattices.sup_class.sup" on left hand side of equation, in theorem:
### comp_inf.semiring.numeral num.One == top
### Partially applied constant "Lattices.sup_class.sup" on left hand side of equation, in theorem:
### comp_inf.semiring.numeral (num.Bit0 ?n) ==
### let m = comp_inf.semiring.numeral ?n in m \<squnion> m
### Partially applied constant "Lattices.sup_class.sup" on left hand side of equation, in theorem:
### comp_inf.semiring.numeral (num.Bit1 ?n) ==
### let m = comp_inf.semiring.numeral ?n in m \<squnion> m \<squnion> top
class linorder_stone_relation_algebra_expansion = one + times +
  linorder_stone_algebra_expansion + conv +
  assumes "times_def": "!!x y. x * y = min x y"
  assumes "conv_def": "!!x. x\<^sup>T = x"
  assumes "one_def": "(1::'a) = top"
class stone_relation_algebra_tarski = stone_relation_algebra +
  assumes
    "tarski":
      "!!x. [| regular x; x ~= bot |] ==> times_top_class.total (top * x)"
class stone_relation_algebra_consistent = stone_relation_algebra +
  assumes "consistent": "bot ~= top"
### theory "Stone_Relation_Algebras.Relation_Algebras"
### 22.376s elapsed time, 31.675s cpu time, 5.410s GC time
Loading theory "Stone_Kleene_Relation_Algebras.Kleene_Relation_Algebras" (required by "Draft.Linear_Aggregation_AlgebrasMoreTemplates" via "Draft.Linear_Aggregation_Algebras" via "Draft.Matrix_Aggregation_Algebras" via "Stone_Kleene_Relation_Algebras.Matrix_Kleene_Algebras")
Loading theory "Stone_Relation_Algebras.Matrix_Relation_Algebras" (required by "Draft.Linear_Aggregation_AlgebrasMoreTemplates" via "Draft.Linear_Aggregation_Algebras" via "Draft.Matrix_Aggregation_Algebras" via "Stone_Kleene_Relation_Algebras.Matrix_Kleene_Algebras")
class idempotent_semiring = idempotent_left_zero_semiring +
  assumes "mult_right_zero": "!!x. x * bot = bot"
class stone_relation_algebra = stone_algebra + pd_allegory +
  assumes "pp_dist_comp": "!!x y. - - (x * y) = - - x * - - y"
  assumes "pp_one": "- - (1::'a) = (1::'a)"
### Partially applied constant "Lattices.inf_class.inf" on left hand side of equation, in theorem:
### brouwer.comp_inf.semiring.numeral num.One == bot
### Partially applied constant "Lattices.inf_class.inf" on left hand side of equation, in theorem:
### brouwer.comp_inf.semiring.numeral (num.Bit0 ?n) ==
### let m = brouwer.comp_inf.semiring.numeral ?n in m \<sqinter> m
### Partially applied constant "Lattices.inf_class.inf" on left hand side of equation, in theorem:
### brouwer.comp_inf.semiring.numeral (num.Bit1 ?n) ==
### let m = brouwer.comp_inf.semiring.numeral ?n
### in m \<sqinter> m \<sqinter> bot
### Partially applied constant "Matrix_Relation_Algebras.sup_matrix" on left hand side of equation, in theorem:
### semilattice_sup.Sup_fin (\<oplus>) (set (?x # ?xs)) ==
### fold (\<oplus>) ?xs ?x
### Partially applied constant "Matrix_Relation_Algebras.inf_matrix" on left hand side of equation, in theorem:
### semilattice_inf.Inf_fin (\<otimes>) (set (?x # ?xs)) ==
### fold (\<otimes>) ?xs ?x
### Partially applied constant "Matrix_Relation_Algebras.sup_matrix" on left hand side of equation, in theorem:
### monoid_add.sum_list (\<oplus>) mbot ?xs == foldr (\<oplus>) ?xs mbot
### Partially applied constant "Matrix_Relation_Algebras.sup_matrix" on left hand side of equation, in theorem:
### comm_monoid_add.sum (\<oplus>) mbot ?g (set ?xs) ==
### matrix_bounded_semilattice_sup_bot.sup_monoid.sum_list
###  (map ?g (remdups ?xs))
### Partially applied constant "Matrix_Relation_Algebras.inf_matrix" on left hand side of equation, in theorem:
### monoid_add.sum_list (\<otimes>) mtop ?xs == foldr (\<otimes>) ?xs mtop
### Partially applied constant "Matrix_Relation_Algebras.inf_matrix" on left hand side of equation, in theorem:
### comm_monoid_add.sum (\<otimes>) mtop ?g (set ?xs) ==
### matrix_bounded_semilattice_inf_top.inf.sup_monoid.sum_list
###  (map ?g (remdups ?xs))
### Partially applied constant "Matrix_Relation_Algebras.top_matrix" on left hand side of equation, in theorem:
### matrix_stone_algebra.comp_inf.semiring.numeral num.One == mtop
### Partially applied constant "Matrix_Relation_Algebras.top_matrix" on left hand side of equation, in theorem:
### matrix_stone_algebra.comp_inf.semiring.numeral (num.Bit0 ?n) ==
### let m = matrix_stone_algebra.comp_inf.semiring.numeral ?n in m \<oplus> m
### Partially applied constant "Matrix_Relation_Algebras.top_matrix" on left hand side of equation, in theorem:
### matrix_stone_algebra.comp_inf.semiring.numeral (num.Bit1 ?n) ==
### let m = matrix_stone_algebra.comp_inf.semiring.numeral ?n
### in m \<oplus> m \<oplus> mtop
### Partially applied constant "Lattices.sup_class.sup" on left hand side of equation, in theorem:
### bounded_distrib_lattice_class.comp_inf.semiring.numeral num.One == top
### Partially applied constant "Lattices.sup_class.sup" on left hand side of equation, in theorem:
### bounded_distrib_lattice_class.comp_inf.semiring.numeral (num.Bit0 ?n) ==
### let m = bounded_distrib_lattice_class.comp_inf.semiring.numeral ?n
### in m \<squnion> m
### Partially applied constant "Lattices.sup_class.sup" on left hand side of equation, in theorem:
### bounded_distrib_lattice_class.comp_inf.semiring.numeral (num.Bit1 ?n) ==
### let m = bounded_distrib_lattice_class.comp_inf.semiring.numeral ?n
### in m \<squnion> m \<squnion> top
### Partially applied constant "Matrix_Relation_Algebras.one_matrix" on left hand side of equation, in theorem:
### monoid_mult.prod_list mone (\<odot>) ?xs == foldr (\<odot>) ?xs mone
### Partially applied constant "Matrix_Relation_Algebras.one_matrix" on left hand side of equation, in theorem:
### matrix_idempotent_semiring.semiring.numeral num.One == mone
### Partially applied constant "Matrix_Relation_Algebras.one_matrix" on left hand side of equation, in theorem:
### matrix_idempotent_semiring.semiring.numeral (num.Bit0 ?n) ==
### let m = matrix_idempotent_semiring.semiring.numeral ?n in m \<oplus> m
### Partially applied constant "Matrix_Relation_Algebras.one_matrix" on left hand side of equation, in theorem:
### matrix_idempotent_semiring.semiring.numeral (num.Bit1 ?n) ==
### let m = matrix_idempotent_semiring.semiring.numeral ?n
### in m \<oplus> m \<oplus> mone
### theory "Stone_Relation_Algebras.Matrix_Relation_Algebras"
### 3.868s elapsed time, 9.138s cpu time, 2.681s GC time
class stone_kleene_relation_algebra = pd_kleene_allegory +
  stone_relation_algebra +
  assumes "pp_dist_star": "!!x. - - x\<^sup>\<star> = components x"
class linorder_stone_kleene_relation_algebra_expansion = star +
  linorder_stone_relation_algebra_expansion +
  assumes "star_def": "!!x. x\<^sup>\<star> = top"
### theory "Stone_Kleene_Relation_Algebras.Kleene_Relation_Algebras"
### 29.369s elapsed time, 40.772s cpu time, 11.323s GC time
Loading theory "Draft.Aggregation_Algebras" (required by "Draft.Linear_Aggregation_AlgebrasMoreTemplates" via "Draft.Linear_Aggregation_Algebras" via "Draft.Matrix_Aggregation_Algebras")
Loading theory "Stone_Kleene_Relation_Algebras.Matrix_Kleene_Algebras" (required by "Draft.Linear_Aggregation_AlgebrasMoreTemplates" via "Draft.Linear_Aggregation_Algebras" via "Draft.Matrix_Aggregation_Algebras")
class sup = type +
  fixes sup :: "'a => 'a => 'a"
class plus = type +
  fixes plus :: "'a => 'a => 'a"
class sum = type +
  fixes sum :: "'a => 'a"
consts
  star_matrix' :: "'a list => ('a * 'a => 'b) => 'a * 'a => 'b"
Found termination order: "{}"
### theory "Stone_Kleene_Relation_Algebras.Matrix_Kleene_Algebras"
### 1.450s elapsed time, 3.526s cpu time, 0.466s GC time
class s_algebra = sum + plus + stone_relation_algebra +
  assumes
    "sum_plus_right_isotone":
      "!!x y z.
          x ~= bot & sum_class.sum x <= sum_class.sum y -->
          sum_class.sum z + sum_class.sum x
          <= sum_class.sum z + sum_class.sum y"
  assumes
    "sum_bot": "!!x. sum_class.sum x + sum_class.sum bot = sum_class.sum x"
  assumes
    "sum_plus":
      "!!x y.
          sum_class.sum x + sum_class.sum y =
          sum_class.sum (x \<squnion> y) + sum_class.sum (x \<sqinter> y)"
  assumes "sum_conv": "!!x. sum_class.sum (x\<^sup>T) = sum_class.sum x"
class minarc = type +
  fixes minarc :: "'a => 'a"
class m_algebra = minarc + s_algebra +
  assumes "minarc_below": "!!x. minarc x <= - - x"
  assumes "minarc_arc": "!!x. x ~= bot --> arc (minarc x)"
  assumes
    "minarc_min":
      "!!y x.
          arc y & y \<sqinter> x ~= bot -->
          sum_class.sum (minarc x \<sqinter> x)
          <= sum_class.sum (y \<sqinter> x)"
  assumes
    "sum_linear":
      "!!x y.
          sum_class.sum x <= sum_class.sum y |
          sum_class.sum y <= sum_class.sum x"
  assumes "finite_regular": "finite {x. regular x}"
### theory "Draft.Aggregation_Algebras"
### 5.379s elapsed time, 7.821s cpu time, 0.927s GC time
Loading theory "Draft.Matrix_Aggregation_Algebras" (required by "Draft.Linear_Aggregation_AlgebrasMoreTemplates" via "Draft.Linear_Aggregation_Algebras")
class aggregation_order = ab_semigroup_add + order_bot +
  assumes
    "add_right_isotone":
      "!!x y z. x ~= bot & x + bot <= y + bot --> x + z <= y + z"
  assumes "add_add_bot": "!!x y. x + y + bot = x + y"
  assumes "add_bot": "!!x y. x + y = bot --> x = bot"
class aggregation_lattice = bounded_distrib_lattice + dense_lattice +
  aggregation_order +
  assumes "add_lattice": "!!x y. x + y = x \<squnion> y + x \<sqinter> y"
class aggregation_algebra = one + times + uminus + aggregation_lattice +
  conv +
  assumes "uminus_def": "!!x. - x = (if x = bot then top else bot)"
  assumes "one_def": "(1::'a) = top"
  assumes "times_def": "!!x y. x * y = x \<sqinter> y"
  assumes "conv_def": "!!x. x\<^sup>T = x"
consts
  enum_pos' :: "'a list => 'a => nat"
Found termination order: "{}"
class linear_aggregation_algebra = one + times + uminus +
  linear_aggregation_lattice + conv +
  assumes "uminus_def_2": "!!x. - x = (if x = bot then top else bot)"
  assumes "one_def_2": "(1::'a) = top"
  assumes "times_def_2": "!!x y. x * y = x \<sqinter> y"
  assumes "conv_def_2": "!!x. x\<^sup>T = x"
class aggregation_kleene_algebra = star + aggregation_algebra +
  assumes "star_def": "!!x. x\<^sup>\<star> = top"
class linear_aggregation_kleene_algebra = star +
  linear_aggregation_algebra +
  assumes "star_def_2": "!!x. x\<^sup>\<star> = top"
### theory "Draft.Matrix_Aggregation_Algebras"
### 17.343s elapsed time, 22.199s cpu time, 6.109s GC time
Loading theory "Draft.Linear_Aggregation_Algebras" (required by "Draft.Linear_Aggregation_AlgebrasMoreTemplates")
instantiation
  ext :: (linordered_ab_semigroup_add) linear_aggregation_kleene_algebra
  star_ext == star :: 'a ext => 'a ext
  uminus_ext == uminus :: 'a ext => 'a ext
  conv_ext == conv :: 'a ext => 'a ext
  one_ext == one_class.one :: 'a ext
  times_ext == times :: 'a ext => 'a ext => 'a ext
  sup_ext == sup :: 'a ext => 'a ext => 'a ext
  top_ext == top :: 'a ext
  inf_ext == inf :: 'a ext => 'a ext => 'a ext
  bot_ext == bot :: 'a ext
  less_eq_ext == less_eq :: 'a ext => 'a ext => bool
  less_ext == less :: 'a ext => 'a ext => bool
  plus_ext == plus :: 'a ext => 'a ext => 'a ext
Found termination order: "{}"
Found termination order: "{}"
Found termination order: "{}"
Found termination order: "{}"
Found termination order: "{}"
Found termination order: "{}"
Found termination order: "{}"
Found termination order: "{}"
Found termination order: "{}"
instantiation
  real_max :: linordered_ab_semigroup_add
  less_eq_real_max == less_eq :: real_max => real_max => bool
  less_real_max == less :: real_max => real_max => bool
  plus_real_max == plus :: real_max => real_max => real_max
Found termination order: "{}"
Found termination order: "{}"
Found termination order: "{}"
instantiation
  real_min :: linordered_ab_semigroup_add
  less_eq_real_min == less_eq :: real_min => real_min => bool
  less_real_min == less :: real_min => real_min => bool
  plus_real_min == plus :: real_min => real_min => real_min
Found termination order: "{}"
Found termination order: "{}"
Found termination order: "{}"
instantiation
  ext0 :: (linordered_comm_monoid_add) linear_aggregation_kleene_algebra
  star_ext0 == star :: 'a ext0 => 'a ext0
  uminus_ext0 == uminus :: 'a ext0 => 'a ext0
  conv_ext0 == conv :: 'a ext0 => 'a ext0
  one_ext0 == one_class.one :: 'a ext0
  times_ext0 == times :: 'a ext0 => 'a ext0 => 'a ext0
  sup_ext0 == sup :: 'a ext0 => 'a ext0 => 'a ext0
  top_ext0 == top :: 'a ext0
  inf_ext0 == inf :: 'a ext0 => 'a ext0 => 'a ext0
  bot_ext0 == bot :: 'a ext0
  less_eq_ext0 == less_eq :: 'a ext0 => 'a ext0 => bool
  less_ext0 == less :: 'a ext0 => 'a ext0 => bool
  plus_ext0 == plus :: 'a ext0 => 'a ext0 => 'a ext0
Found termination order: "{}"
Found termination order: "{}"
Found termination order: "{}"
Found termination order: "{}"
Found termination order: "{}"
Found termination order: "{}"
Found termination order: "{}"
Found termination order: "{}"
Found termination order: "{}"
instantiation
  real :: linordered_comm_monoid_add
class linordered_comm_monoid_add_bot = linordered_ab_semigroup_add +
  order_bot +
  assumes "bot_zero": "!!x. bot + x = x"
### Partially applied constant "Groups.plus_class.plus" on left hand side of equation, in theorem:
### monoid_add.sum_list (+) bot ?xs == foldr (+) ?xs bot
### Partially applied constant "Groups.plus_class.plus" on left hand side of equation, in theorem:
### comm_monoid_add.sum (+) bot ?g (set ?xs) ==
### linordered_comm_monoid_add_bot_class.sum_list (map ?g (remdups ?xs))
instantiation
  extT :: (linordered_comm_monoid_add_bot) linear_aggregation_kleene_algebra
  star_extT == star :: 'a extT => 'a extT
  uminus_extT == uminus :: 'a extT => 'a extT
  conv_extT == conv :: 'a extT => 'a extT
  one_extT == one_class.one :: 'a extT
  times_extT == times :: 'a extT => 'a extT => 'a extT
  sup_extT == sup :: 'a extT => 'a extT => 'a extT
  top_extT == top :: 'a extT
  inf_extT == inf :: 'a extT => 'a extT => 'a extT
  bot_extT == bot :: 'a extT
  less_eq_extT == less_eq :: 'a extT => 'a extT => bool
  less_extT == less :: 'a extT => 'a extT => bool
  plus_extT == plus :: 'a extT => 'a extT => 'a extT
Found termination order: "{}"
Found termination order: "{}"
Found termination order: "{}"
Found termination order: "{}"
Found termination order: "{}"
Found termination order: "{}"
Found termination order: "{}"
Found termination order: "{}"
Found termination order: "{}"
instantiation
  real_max_bot :: linordered_comm_monoid_add_bot
  bot_real_max_bot == bot :: real_max_bot
  less_eq_real_max_bot == less_eq :: real_max_bot => real_max_bot => bool
  less_real_max_bot == less :: real_max_bot => real_max_bot => bool
  plus_real_max_bot == plus :: real_max_bot => real_max_bot => real_max_bot
Found termination order: "{}"
Found termination order: "{}"
Found termination order: "{}"
class linordered_comm_monoid_add_top = linordered_ab_semigroup_add +
  order_top +
  assumes "top_zero": "!!x. top + x = x"
### Partially applied constant "Groups.plus_class.plus" on left hand side of equation, in theorem:
### monoid_add.sum_list (+) top ?xs == foldr (+) ?xs top
### Partially applied constant "Groups.plus_class.plus" on left hand side of equation, in theorem:
### comm_monoid_add.sum (+) top ?g (set ?xs) ==
### linordered_comm_monoid_add_top_class.sum_list (map ?g (remdups ?xs))
instantiation
  extB :: (linordered_comm_monoid_add_top) linear_aggregation_kleene_algebra
  star_extB == star :: 'a extB => 'a extB
  uminus_extB == uminus :: 'a extB => 'a extB
  conv_extB == conv :: 'a extB => 'a extB
  one_extB == one_class.one :: 'a extB
  times_extB == times :: 'a extB => 'a extB => 'a extB
  sup_extB == sup :: 'a extB => 'a extB => 'a extB
  top_extB == top :: 'a extB
  inf_extB == inf :: 'a extB => 'a extB => 'a extB
  bot_extB == bot :: 'a extB
  less_eq_extB == less_eq :: 'a extB => 'a extB => bool
  less_extB == less :: 'a extB => 'a extB => bool
  plus_extB == plus :: 'a extB => 'a extB => 'a extB
Found termination order: "{}"
Found termination order: "{}"
Found termination order: "{}"
Found termination order: "{}"
Found termination order: "{}"
Found termination order: "{}"
Found termination order: "{}"
Found termination order: "{}"
Found termination order: "{}"
instantiation
  real_min_top :: linordered_comm_monoid_add_top
  top_real_min_top == top :: real_min_top
  less_eq_real_min_top == less_eq :: real_min_top => real_min_top => bool
  less_real_min_top == less :: real_min_top => real_min_top => bool
  plus_real_min_top == plus :: real_min_top => real_min_top => real_min_top
Found termination order: "{}"
Found termination order: "{}"
Found termination order: "{}"
instantiation
  Linear_Aggregation_Algebras.unit :: bounded_linorder
  bot_unit == bot :: Linear_Aggregation_Algebras.unit
  top_unit == top :: Linear_Aggregation_Algebras.unit
  less_eq_unit == less_eq ::
    Linear_Aggregation_Algebras.unit
    => Linear_Aggregation_Algebras.unit => bool
  less_unit == less ::
    Linear_Aggregation_Algebras.unit
    => Linear_Aggregation_Algebras.unit => bool
instantiation
  Linear_Aggregation_Algebras.unit :: linordered_comm_monoid_add_top
  plus_unit == plus ::
    Linear_Aggregation_Algebras.unit
    => Linear_Aggregation_Algebras.unit => Linear_Aggregation_Algebras.unit
### Partially applied constant "Orderings.ord_class.max" on left hand side of equation, in theorem:
### monoid_add.sum_list max bot ?xs == foldr max ?xs bot
### Partially applied constant "Orderings.ord_class.max" on left hand side of equation, in theorem:
### comm_monoid_add.sum max bot ?g (set ?xs) ==
### linordered_bounded_comm_monoid_add_bot_class.sup_monoid.sum_list
###  (map ?g (remdups ?xs))
### Partially applied constant "Orderings.ord_class.min" on left hand side of equation, in theorem:
### monoid_add.sum_list min top ?xs == foldr min ?xs top
### Partially applied constant "Orderings.ord_class.min" on left hand side of equation, in theorem:
### comm_monoid_add.sum min top ?g (set ?xs) ==
### linordered_bounded_comm_monoid_add_bot_class.inf.sup_monoid.sum_list
###  (map ?g (remdups ?xs))
### Partially applied constant "Orderings.ord_class.max" on left hand side of equation, in theorem:
### linordered_bounded_comm_monoid_add_bot_class.comp_inf.semiring.numeral
###  num.One ==
### top
### Partially applied constant "Orderings.ord_class.max" on left hand side of equation, in theorem:
### linordered_bounded_comm_monoid_add_bot_class.comp_inf.semiring.numeral
###  (num.Bit0 ?n) ==
### let m = linordered_bounded_comm_monoid_add_bot_class.comp_inf.semiring.numeral
###          ?n
### in max m m
### Partially applied constant "Orderings.ord_class.max" on left hand side of equation, in theorem:
### linordered_bounded_comm_monoid_add_bot_class.comp_inf.semiring.numeral
###  (num.Bit1 ?n) ==
### let m = linordered_bounded_comm_monoid_add_bot_class.comp_inf.semiring.numeral
###          ?n
### in max (max m m) top
instantiation
  unit2 :: bounded_linorder
  bot_unit2 == bot :: unit2
  top_unit2 == top :: unit2
  less_eq_unit2 == less_eq :: unit2 => unit2 => bool
  less_unit2 == less :: unit2 => unit2 => bool
instantiation
  unit2 :: linordered_bounded_comm_monoid_add_bot
  plus_unit2 == plus :: unit2 => unit2 => unit2
class pointed_linorder = linorder +
  fixes const :: "'a"
instantiation
  extC :: (pointed_linorder) linear_aggregation_kleene_algebra
  star_extC == star :: 'a extC => 'a extC
  uminus_extC == uminus :: 'a extC => 'a extC
  conv_extC == conv :: 'a extC => 'a extC
  one_extC == one_class.one :: 'a extC
  times_extC == times :: 'a extC => 'a extC => 'a extC
  sup_extC == sup :: 'a extC => 'a extC => 'a extC
  top_extC == top :: 'a extC
  inf_extC == inf :: 'a extC => 'a extC => 'a extC
  bot_extC == bot :: 'a extC
  less_eq_extC == less_eq :: 'a extC => 'a extC => bool
  less_extC == less :: 'a extC => 'a extC => bool
  plus_extC == plus :: 'a extC => 'a extC => 'a extC
Found termination order: "{}"
Found termination order: "{}"
Found termination order: "{}"
Found termination order: "{}"
Found termination order: "{}"
Found termination order: "{}"
Found termination order: "{}"
Found termination order: "{}"
Found termination order: "{}"
instantiation
  real :: pointed_linorder
  const_real == const :: real
Found termination order: "{}"
### Partially applied constant "Orderings.ord_class.less_eq" on left hand side of equation, in theorem:
### linorder.Min (<=) (set (?x # ?xs)) == fold (ord.min (<=)) ?xs ?x
### Partially applied constant "Orderings.ord_class.less_eq" on left hand side of equation, in theorem:
### linorder.Max (<=) (set (?x # ?xs)) == fold (ord.max (<=)) ?xs ?x
instantiation
  extN :: (linorder) linear_aggregation_kleene_algebra
  star_extN == star :: 'a extN => 'a extN
  uminus_extN == uminus :: 'a extN => 'a extN
  conv_extN == conv :: 'a extN => 'a extN
  one_extN == one_class.one :: 'a extN
  times_extN == times :: 'a extN => 'a extN => 'a extN
  sup_extN == sup :: 'a extN => 'a extN => 'a extN
  top_extN == top :: 'a extN
  inf_extN == inf :: 'a extN => 'a extN => 'a extN
  bot_extN == bot :: 'a extN
  less_eq_extN == less_eq :: 'a extN => 'a extN => bool
  less_extN == less :: 'a extN => 'a extN => bool
  plus_extN == plus :: 'a extN => 'a extN => 'a extN
Found termination order: "{}"
Found termination order: "{}"
Found termination order: "{}"
Found termination order: "{}"
Found termination order: "{}"
Found termination order: "{}"
Found termination order: "{}"
Found termination order: "{}"
Found termination order: "{}"
### theory "Draft.Linear_Aggregation_Algebras"
### 32.728s elapsed time, 58.398s cpu time, 36.189s GC time
Loading theory "Draft.Linear_Aggregation_AlgebrasMoreTemplates"
val templateLemmas =
   [("Linear_Aggregation_Algebras.example_real_ext_matrix",
     "minarc\<^sub>M ?x \<preceq> \<ominus> \<ominus> ?x",
     template_predicate
      (
         template_app
          (template_app
            (template_hole 2,
             template_app (template_hole 1, template_var 0)),
           template_app
            (template_hole 0,
             template_app (template_hole 0, template_var 0)))
         )),
    ("Linear_Aggregation_Algebras.example_real_max_ext_matrix",
     "minarc\<^sub>M ?x \<preceq> \<ominus> \<ominus> ?x",
     template_predicate
      (
         template_app
          (template_app
            (template_hole 2,
             template_app (template_hole 1, template_var 0)),
           template_app
            (template_hole 0,
             template_app (template_hole 0, template_var 0)))
         )),
    ("Linear_Aggregation_Algebras.example_real_min_ext_matrix",
     "minarc\<^sub>M ?x \<preceq> \<ominus> \<ominus> ?x",
     template_predicate
      (
         template_app
          (template_app
            (template_hole 2,
             template_app (template_hole 1, template_var 0)),
           template_app
            (template_hole 0,
             template_app (template_hole 0, template_var 0)))
         )),
    ("Linear_Aggregation_Algebras.tl_top_zero",
     "?x : {0..1} ==> Linear_Aggregation_Algebras.tl 1 ?x = ?x",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 7, template_var 0),
              template_app
               (template_app (template_hole 6, template_hole 5),
                template_hole 4))
            )],
       template_equation
        (template_app
          (template_app
            (template_hole 2,
             template_app
              (template_app
                (template_hole 1,
                 template_app
                  (template_app (template_hole 0, template_hole 4),
                   template_var 0)),
               template_hole 4)),
           template_hole 5),
         template_var 0))),
    ("Linear_Aggregation_Algebras.sp_mono",
     "[| ?z : {0..1}; ?x <= ?y |] ==> sp ?z ?x <= sp ?z ?y",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 7, template_var 2),
              template_app
               (template_app (template_hole 6, template_hole 5),
                template_hole 4))
            ),
        template_inequation (less_equals, template_var 1, template_var 0)],
       template_inequation
        (less_equals,
         template_app
          (template_app
            (template_hole 2,
             template_app
              (template_app (template_hole 1, template_var 2),
               template_var 1)),
           template_app
            (template_app (template_hole 0, template_var 2),
             template_var 1)),
         template_app
          (template_app
            (template_hole 2,
             template_app
              (template_app (template_hole 1, template_var 2),
               template_var 0)),
           template_app
            (template_app (template_hole 0, template_var 2),
             template_var 0))))),
    ("Linear_Aggregation_Algebras.sp_assoc",
     "sp (sp ?x ?y) ?z = sp ?x (sp ?y ?z)",
     template_equation
      (template_app
        (template_app
          (template_hole 2,
           template_app
            (template_app
              (template_hole 1,
               template_app
                (template_app
                  (template_hole 2,
                   template_app
                    (template_app (template_hole 1, template_var 2),
                     template_var 1)),
                 template_app
                  (template_app (template_hole 0, template_var 2),
                   template_var 1))),
             template_var 0)),
         template_app
          (template_app
            (template_hole 0,
             template_app
              (template_app
                (template_hole 2,
                 template_app
                  (template_app (template_hole 1, template_var 2),
                   template_var 1)),
               template_app
                (template_app (template_hole 0, template_var 2),
                 template_var 1))),
           template_var 0)),
       template_app
        (template_app
          (template_hole 2,
           template_app
            (template_app (template_hole 1, template_var 2),
             template_app
              (template_app
                (template_hole 2,
                 template_app
                  (template_app (template_hole 1, template_var 1),
                   template_var 0)),
               template_app
                (template_app (template_hole 0, template_var 1),
                 template_var 0)))),
         template_app
          (template_app (template_hole 0, template_var 2),
           template_app
            (template_app
              (template_hole 2,
               template_app
                (template_app (template_hole 1, template_var 1),
                 template_var 0)),
             template_app
              (template_app (template_hole 0, template_var 1),
               template_var 0)))))),
    ("Linear_Aggregation_Algebras.tl_assoc",
     "[| ?x : {0..1}; ?z : {0..1} |]
      ==> Linear_Aggregation_Algebras.tl
           (Linear_Aggregation_Algebras.tl ?x ?y) ?z =
          Linear_Aggregation_Algebras.tl ?x
           (Linear_Aggregation_Algebras.tl ?y ?z)",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 7, template_var 2),
              template_app
               (template_app (template_hole 6, template_hole 5),
                template_hole 4))
            ),
        template_predicate
         (
            template_app
             (template_app (template_hole 7, template_var 1),
              template_app
               (template_app (template_hole 6, template_hole 5),
                template_hole 4))
            )],
       template_equation
        (template_app
          (template_app
            (template_hole 2,
             template_app
              (template_app
                (template_hole 1,
                 template_app
                  (template_app
                    (template_hole 0,
                     template_app
                      (template_app
                        (template_hole 2,
                         template_app
                          (template_app
                            (template_hole 1,
                             template_app
                              (template_app
                                (template_hole 0, template_var 2),
                               template_var 0)),
                           template_hole 4)),
                       template_hole 5)),
                   template_var 1)),
               template_hole 4)),
           template_hole 5),
         template_app
          (template_app
            (template_hole 2,
             template_app
              (template_app
                (template_hole 1,
                 template_app
                  (template_app (template_hole 0, template_var 2),
                   template_app
                    (template_app
                      (template_hole 2,
                       template_app
                        (template_app
                          (template_hole 1,
                           template_app
                            (template_app (template_hole 0, template_var 0),
                             template_var 1)),
                         template_hole 4)),
                     template_hole 5))),
               template_hole 4)),
           template_hole 5))))]:
   (string * thm * template) list
### theory "Draft.Linear_Aggregation_AlgebrasMoreTemplates"
### 2.387s elapsed time, 7.513s cpu time, 3.553s GC time
val it = (): unit
