Loading theory "Pure-ex.Guess" (required by "Draft.Akra_BazziMoreTemplates" via "Draft.Akra_Bazzi" via "Draft.Akra_Bazzi_Real" via "Draft.Akra_Bazzi_Asymptotics" via "Draft.Akra_Bazzi_Library")
Loading theory "HOL-Library.Cancellation" (required by "Draft.Akra_BazziMoreTemplates" via "Draft.Akra_Bazzi" via "Draft.Akra_Bazzi_Real" via "Draft.Akra_Bazzi_Asymptotics" via "Draft.Akra_Bazzi_Library" via "Landau_Symbols.Landau_More" via "Landau_Symbols.Landau_Simprocs" via "Landau_Symbols.Landau_Real_Products" via "Landau_Symbols.Group_Sort" via "HOL-Library.Multiset")
Loading theory "HOL-Library.Function_Algebras" (required by "Draft.Akra_BazziMoreTemplates" via "Draft.ExtrEqs" via "HOL-Library.BigO")
Loading theory "HOL-Library.Nat_Bijection" (required by "Draft.Akra_BazziMoreTemplates" via "Draft.ExtrEqs" via "HOL-Library.Stream")
instantiation
  fun :: (type, plus) plus
  plus_fun == plus :: ('a => 'b) => ('a => 'b) => 'a => 'b
instantiation
  fun :: (type, zero) zero
  zero_fun == zero_class.zero :: 'a => 'b
instantiation
  fun :: (type, times) times
  times_fun == times :: ('a => 'b) => ('a => 'b) => 'a => 'b
instantiation
  fun :: (type, one) one
  one_fun == one_class.one :: 'a => 'b
### ML warning (line 99 of "~~/src/Pure/ex/Guess.thy"):
### Pattern is not exhaustive.
### ML warning (line 150 of "~~/src/Pure/ex/Guess.thy"):
### Matches are not exhaustive.
### ML warning (line 157 of "~~/src/Pure/ex/Guess.thy"):
### Pattern is not exhaustive.
signature GUESS =
  sig
    val guess:
       (binding * typ option * mixfix) list ->
         bool -> Proof.state -> Proof.state
    val guess_cmd:
       (binding * string option * mixfix) list ->
         bool -> Proof.state -> Proof.state
  end
structure Guess: GUESS
### theory "Pure-ex.Guess"
### 0.075s elapsed time, 0.299s cpu time, 0.000s GC time
Loading theory "HOL-Library.Set_Algebras" (required by "Draft.Akra_BazziMoreTemplates" via "Draft.ExtrEqs" via "HOL-Library.BigO")
Found termination order: "(%p. size (snd p)) <*mlex*> {}"
instantiation
  set :: (plus) plus
  plus_set == plus :: 'a set => 'a set => 'a set
### theory "HOL-Library.Function_Algebras"
### 0.134s elapsed time, 0.557s cpu time, 0.034s GC time
Loading theory "HOL-Library.Tree" (required by "Draft.Akra_BazziMoreTemplates" via "Draft.ExtrEqs" via "Draft.Templates")
instantiation
  set :: (times) times
  times_set == times :: 'a set => 'a set => 'a set
instantiation
  set :: (zero) zero
  zero_set == zero_class.zero :: 'a set
instantiation
  set :: (one) one
  one_set == one_class.one :: 'a set
Found termination order: "size_list size <*mlex*> {}"
### theory "HOL-Library.Nat_Bijection"
### 0.327s elapsed time, 1.323s cpu time, 0.120s GC time
Loading theory "HOL-Library.Stream" (required by "Draft.Akra_BazziMoreTemplates" via "Draft.ExtrEqs")
### theory "HOL-Library.Set_Algebras"
### 0.258s elapsed time, 1.040s cpu time, 0.120s GC time
Loading theory "HOL-Library.BigO" (required by "Draft.Akra_BazziMoreTemplates" via "Draft.ExtrEqs")
signature CANCEL = sig val proc: Proof.context -> cterm -> thm option end
functor Cancel_Fun (Data: CANCEL_NUMERALS_DATA): CANCEL
signature CANCEL_DATA =
  sig
    val dest_coeff: term -> int * term
    val dest_sum: term -> term list
    val find_first_coeff: term -> term list -> int * term list
    val mk_coeff: int * term -> term
    val mk_sum: typ -> term list -> term
    val norm_ss1: simpset
    val norm_ss2: simpset
    val norm_tac: Proof.context -> tactic
    val numeral_simp_tac: Proof.context -> tactic
    val prove_conv:
       tactic list -> Proof.context -> thm list -> term * term -> thm option
    val simplify_meta_eq: Proof.context -> thm -> thm
    val trans_tac: Proof.context -> thm option -> tactic
  end
structure Cancel_Data: CANCEL_DATA
signature CANCEL_SIMPROCS =
  sig
    val diff_cancel: Proof.context -> cterm -> thm option
    val eq_cancel: Proof.context -> cterm -> thm option
    val less_cancel: Proof.context -> cterm -> thm option
    val less_eq_cancel: Proof.context -> cterm -> thm option
  end
structure Cancel_Simprocs: CANCEL_SIMPROCS
### theory "HOL-Library.Cancellation"
### 0.460s elapsed time, 1.851s cpu time, 0.120s GC time
Loading theory "HOL-Library.Multiset" (required by "Draft.Akra_BazziMoreTemplates" via "Draft.Akra_Bazzi" via "Draft.Akra_Bazzi_Real" via "Draft.Akra_Bazzi_Asymptotics" via "Draft.Akra_Bazzi_Library" via "Landau_Symbols.Landau_More" via "Landau_Symbols.Landau_Simprocs" via "Landau_Symbols.Landau_Real_Products" via "Landau_Symbols.Group_Sort")
instantiation
  multiset :: (type) cancel_comm_monoid_add
  zero_multiset == zero_class.zero :: 'a multiset
  minus_multiset == minus :: 'a multiset => 'a multiset => 'a multiset
  plus_multiset == plus :: 'a multiset => 'a multiset => 'a multiset
consts
  left :: "'a tree => 'a tree"
consts
  right :: "'a tree => 'a tree"
Found termination order: "size <*mlex*> {}"
consts
  shift :: "'a list => 'a stream => 'a stream"
Proofs for coinductive predicate(s) "streamsp"
  Proving monotonicity ...
Found termination order: "size <*mlex*> {}"
consts
  snth :: "'a stream => nat => 'a"
Found termination order: "size <*mlex*> {}"
consts
  stake :: "nat => 'a stream => 'a list"
consts
  sdrop :: "nat => 'a stream => 'a stream"
class height = type +
  fixes height :: "'a => nat"
instantiation
  tree :: (type) height
  height_tree == height :: 'a tree => nat
consts
  sfilter :: "('a => bool) => 'a stream => 'a stream"
consts
  cycle :: "'a list => 'a stream"
Found termination order: "size <*mlex*> {}"
consts
  siterate :: "('a => 'a) => 'a => 'a stream"
Found termination order: "size <*mlex*> {}"
consts
  flat :: "'a list stream => 'a stream"
Found termination order: "size <*mlex*> {}"
consts
  sinterleave :: "'a stream => 'a stream => 'a stream"
### theory "HOL-Library.BigO"
### 1.033s elapsed time, 3.910s cpu time, 0.943s GC time
Loading theory "HOL-Library.Landau_Symbols" (required by "Draft.Akra_BazziMoreTemplates" via "Draft.Akra_Bazzi")
consts
  szip :: "'a stream => 'b stream => ('a * 'b) stream"
consts
  smap2 :: "('a => 'b => 'c) => 'a stream => 'b stream => 'c stream"
Found termination order: "size <*mlex*> {}"
### Partially applied constant "Multiset.inter_mset" on left hand side of equation, in theorem:
### semilattice_inf.Inf_fin (\<inter>#) (set (?x # ?xs)) ==
### fold (\<inter>#) ?xs ?x
### theory "HOL-Library.Stream"
### 1.160s elapsed time, 4.402s cpu time, 1.044s GC time
Found termination order: "size <*mlex*> {}"
### Partially applied constant "Multiset.union_mset" on left hand side of equation, in theorem:
### semilattice_sup.Sup_fin (\<union>#) (set (?x # ?xs)) ==
### fold (\<union>#) ?xs ?x
Found termination order: "size <*mlex*> {}"
Found termination order: "size <*mlex*> {}"
Found termination order: "(%p. size (fst p)) <*mlex*> {}"
locale landau_symbol
  fixes L :: "'a filter => ('a => 'b) => ('a => 'b) set"
    and L' :: "'c filter => ('c => 'b) => ('c => 'b) set"
    and Lr :: "'a filter => ('a => real) => ('a => real) set"
  assumes "landau_symbol L L' Lr"
signature MULTISET_SIMPROCS =
  sig
    val subset_cancel_msets: Proof.context -> cterm -> thm option
    val subseteq_cancel_msets: Proof.context -> cterm -> thm option
  end
structure Multiset_Simprocs: MULTISET_SIMPROCS
instantiation
  multiset :: (type) Inf
  Inf_multiset == Inf :: 'a multiset set => 'a multiset
Found termination order: "size <*mlex*> {}"
instantiation
  multiset :: (type) Sup
  Sup_multiset == Sup :: 'a multiset set => 'a multiset
Found termination order: "(%p. size (snd p)) <*mlex*> {}"
locale landau_pair
  fixes L :: "'a filter => ('a => 'b) => ('a => 'b) set"
    and l :: "'a filter => ('a => 'b) => ('a => 'b) set"
    and L' :: "'c filter => ('c => 'b) => ('c => 'b) set"
    and l' :: "'c filter => ('c => 'b) => ('c => 'b) set"
    and Lr :: "'a filter => ('a => real) => ('a => real) set"
    and lr :: "'a filter => ('a => real) => ('a => real) set"
    and R :: "real => real => bool"
  assumes "landau_pair L l L' l' Lr lr R"
locale landau_pair
  fixes L :: "'a filter => ('a => 'b) => ('a => 'b) set"
    and l :: "'a filter => ('a => 'b) => ('a => 'b) set"
    and L' :: "'c filter => ('c => 'b) => ('c => 'b) set"
    and l' :: "'c filter => ('c => 'b) => ('c => 'b) set"
    and Lr :: "'a filter => ('a => real) => ('a => real) set"
    and lr :: "'a filter => ('a => real) => ('a => real) set"
    and R :: "real => real => bool"
  assumes "landau_pair L l L' l' Lr lr R"
instantiation
  multiset :: (type) size
  size_multiset == size :: 'a multiset => nat
locale comp_fun_commute
  fixes f :: "'a => 'b => 'b"
  assumes "comp_fun_commute f"
locale landau_pair
  fixes L :: "'a filter => ('a => 'b) => ('a => 'b) set"
    and l :: "'a filter => ('a => 'b) => ('a => 'b) set"
    and L' :: "'c filter => ('c => 'b) => ('c => 'b) set"
    and l' :: "'c filter => ('c => 'b) => ('c => 'b) set"
    and Lr :: "'a filter => ('a => real) => ('a => real) set"
    and lr :: "'a filter => ('a => real) => ('a => real) set"
    and R :: "real => real => bool"
  assumes "landau_pair L l L' l' Lr lr R"
Found termination order: "size <*mlex*> {}"
consts
  mset :: "'a list => 'a multiset"
locale landau_symbol
  fixes L :: "'a filter => ('a => 'b) => ('a => 'b) set"
    and L' :: "'c filter => ('c => 'b) => ('c => 'b) set"
    and Lr :: "'a filter => ('a => real) => ('a => real) set"
  assumes "landau_symbol L L' Lr"
### theory "HOL-Library.Tree"
### 2.182s elapsed time, 7.697s cpu time, 1.389s GC time
Loading theory "Draft.Templates" (required by "Draft.Akra_BazziMoreTemplates" via "Draft.ExtrEqs")
class linorder = order +
  assumes "linear": "!!x y. x <= y | y <= x"
datatype template_term
=
     t_empty
   | template_app of template_term * template_term
   | template_hole of int
   | template_var of int
datatype sign
= equals | greater_equals | greater_than | less_equals | less_than
datatype template
=
     template_bimplication of template * template
   | template_dunno
   | template_equation of template_term * template_term
   | template_implication of template list * template
   | template_inequation of sign * template_term * template_term
   | template_negation of template
   | template_predicate of template_term
constructor t_empty: template_term
constructor template_app: template_term * template_term -> template_term
constructor template_hole: int -> template_term
constructor template_var: int -> template_term
constructor equals: sign
constructor greater_equals: sign
constructor greater_than: sign
constructor less_equals: sign
constructor less_than: sign
constructor template_bimplication: template * template -> template
constructor template_dunno: template
constructor template_equation: template_term * template_term -> template
constructor template_implication: template list * template -> template
constructor template_inequation:
   sign * template_term * template_term -> template
constructor template_negation: template -> template
constructor template_predicate: template_term -> template
val vfs = fn: term -> (indexname * typ) list * (string * typ) list
val indexOf = fn: ''a list -> ''a -> int -> int
val has_eq = fn: term -> bool
val term2template = fn:
   (indexname * typ) list -> (string * typ) list -> term -> template_term
val lemma2predicate = fn: term -> term -> template
val makeTemplatewithContext = fn: term -> term -> template
val lemma2template = fn: term -> template
val thm2template = fn: thm -> template
val tterm2string = fn: template_term -> string
val template2string = fn: template -> string
val t = "height ?t <= size ?t": thm
val th =
   Const ("HOL.Trueprop", "bool => prop") $
     (Const ("Orderings.ord_class.less_eq", "nat => nat => bool") $
       (Const ("Tree.height_class.height", "?'a tree => nat") $
         Var (("t", 0), "?'a tree")) $
       (Const ("Nat.size_class.size", "?'a tree => nat") $
         Var (("t", 0), "?'a tree"))):
   term
### theory "Draft.Templates"
### 0.063s elapsed time, 0.188s cpu time, 0.000s GC time
Loading theory "Draft.ExtrEqs" (required by "Draft.Akra_BazziMoreTemplates")
locale comm_monoid_mset
  fixes f :: "'a => 'a => 'a"  (infixl \<open>\<^bold>*\<close> 70)
    and z :: "'a"  (\<open>\<^bold>1\<close>)
  assumes "comm_monoid_mset (\<^bold>*) \<^bold>1"
class comm_monoid_add = ab_semigroup_add + monoid_add +
  assumes "add_0": "!!a. (0::'a) + a = a"
class comm_monoid_add = ab_semigroup_add + monoid_add +
  assumes "add_0": "!!a. (0::'a) + a = a"
locale landau_symbol
  fixes L :: "'a filter => ('a => 'b) => ('a => 'b) set"
    and L' :: "'c filter => ('c => 'b) => ('c => 'b) set"
    and Lr :: "'a filter => ('a => real) => ('a => real) set"
  assumes "landau_symbol L L' Lr"
class canonically_ordered_monoid_add = ordered_comm_monoid_add +
  assumes "le_iff_add": "!!a b. (a <= b) = (EX c. b = a + c)"
class comm_monoid_mult = ab_semigroup_mult + monoid_mult + dvd +
  assumes "mult_1": "!!a. (1::'a) * a = a"
bundle asymp_equiv_notation
val eqpattern =
   Pattern
    (
       Const ("HOL.Trueprop", "bool => prop") $
         (Const ("HOL.eq", "?'a => ?'a => bool") $
           Var (("_dummy_", 1), "?'a") $ Var (("_dummy_", 2), "?'a"))
       ):
   term Find_Theorems.criterion
val badeqpattern = Pattern (Const ("Pure.eq", "?'a => ?'a => prop")):
   term Find_Theorems.criterion
val undefpattern =
   Pattern
    (
       Const ("HOL.Trueprop", "bool => prop") $
         (Const ("HOL.eq", "?'a => ?'a => bool") $
           Var (("_dummy_", 1), "?'a") $ Const ("HOL.undefined", "?'a"))
       ):
   term Find_Theorems.criterion
val thmpattern =
   Pattern
    (Const ("HOL.Trueprop", "bool => prop") $ Var (("_dummy_", 1), "bool")):
   term Find_Theorems.criterion
val badnames =
   ["*nitpick*", "*Nitpick*", "*full_exhaustive*", "*_def*", "Enum.finite*",
    "*Quickcheck*", "ATP*", "*Nunchaku*", "*Code*", "*BNF*", "*SMT*",
    "*.*.*"]:
   string list
val unwanted_names =
   [(false, Name "*nitpick*"), (false, Name "*Nitpick*"),
    (false, Name "*full_exhaustive*"), (false, Name "*_def*"),
    (false, Name "Enum.finite*"), (false, Name "*Quickcheck*"),
    (false, Name "ATP*"), (false, Name "*Nunchaku*"),
    (false, Name "*Code*"), (false, Name "*BNF*"), (false, Name "*SMT*"),
    (false, Name "*.*.*")]:
   (bool * term Find_Theorems.criterion) list
val has_vars = fn: term -> bool
val get_all_eqs = fn: string -> Proof.context -> (string * thm) list
val get_all_thms = fn: string -> Proof.context -> (string * thm) list
val get_noneq_thms = fn: string -> Proof.context -> (string * thm) list
val template_eqs = fn:
   string -> Proof.context -> (string * thm * template) list
val template_thms = fn:
   string -> Proof.context -> (string * thm * template) list
### theory "Draft.ExtrEqs"
### 0.911s elapsed time, 2.827s cpu time, 1.043s GC time
### theory "HOL-Library.Landau_Symbols"
### 1.971s elapsed time, 6.061s cpu time, 1.488s GC time
class linorder = order +
  assumes "linear": "!!x y. x <= y | y <= x"
instantiation
  multiset :: (preorder) order
  less_eq_multiset == less_eq :: 'a multiset => 'a multiset => bool
  less_multiset == less :: 'a multiset => 'a multiset => bool
instantiation
  multiset :: (preorder) ordered_ab_semigroup_add
Proofs for inductive predicate(s) "pw_leq"
  Proving monotonicity ...
Found termination order: "(%p. length (fst p)) <*mlex*> {}"
instantiation
  multiset :: (equal) equal
  equal_multiset == equal_class.equal :: 'a multiset => 'a multiset => bool
instantiation
  multiset :: (random) random
  random_multiset == random_class.random ::
    natural
    => natural * natural
       => ('a multiset * (unit => term)) * natural * natural
instantiation
  multiset :: (full_exhaustive) full_exhaustive
  full_exhaustive_multiset == full_exhaustive_class.full_exhaustive ::
    ('a multiset * (unit => term) => (bool * term list) option)
    => natural => (bool * term list) option
Proofs for inductive predicate(s) "pred_mset"
  Proving monotonicity ...
Proofs for inductive predicate(s) "rel_mset'"
  Proving monotonicity ...
### theory "HOL-Library.Multiset"
### 3.668s elapsed time, 10.297s cpu time, 2.424s GC time
Loading theory "Landau_Symbols.Group_Sort" (required by "Draft.Akra_BazziMoreTemplates" via "Draft.Akra_Bazzi" via "Draft.Akra_Bazzi_Real" via "Draft.Akra_Bazzi_Asymptotics" via "Draft.Akra_Bazzi_Library" via "Landau_Symbols.Landau_More" via "Landau_Symbols.Landau_Simprocs" via "Landau_Symbols.Landau_Real_Products")
locale groupsort
  fixes f :: "'a => 'b"
    and merge :: "'a => 'a => 'a"
    and g :: "'a list => 'c"
  assumes "groupsort f merge g"
Found termination order: "length <*mlex*> {}"
### theory "Landau_Symbols.Group_Sort"
### 1.077s elapsed time, 2.010s cpu time, 1.105s GC time
Loading theory "Landau_Symbols.Landau_Real_Products" (required by "Draft.Akra_BazziMoreTemplates" via "Draft.Akra_Bazzi" via "Draft.Akra_Bazzi_Real" via "Draft.Akra_Bazzi_Asymptotics" via "Draft.Akra_Bazzi_Library" via "Landau_Symbols.Landau_More" via "Landau_Symbols.Landau_Simprocs")
consts
  bigtheta_pow :: "'a filter => ('a => 'b) set => nat => ('a => 'b) set"
locale landau_function_family
  fixes F :: "'a filter"
    and H :: "('a => real) set"
  assumes "landau_function_family F H"
locale landau_function_family_pair
  fixes F :: "'a filter"
    and G :: "('a => real) set"
    and H :: "('a => real) set"
    and g :: "'a => real"
  assumes "landau_function_family_pair F G H g"
Found termination order: "(%p. length (snd p)) <*mlex*> {}"
consts
  landau_dominating_chain' :: "'a filter => ('a => real) list => bool"
consts
  nonneg_list :: "'a list => bool"
consts
  pos_list :: "'a list => bool"
locale landau_function_family_chain
  fixes F :: "'b filter"
    and gs :: "'a list"
    and get_param :: "'a => real"
    and get_fun :: "'a => 'b => real"
  assumes "landau_function_family_chain F gs get_fun"
instantiation
  primfun :: linorder
  less_eq_primfun == less_eq :: primfun => primfun => bool
  less_primfun == less :: primfun => primfun => bool
Found termination order: "{}"
Found termination order: "{}"
Found termination order: "{}"
Found termination order: "{}"
Found termination order: "{}"
Found termination order: "{}"
Found termination order: "{}"
Found termination order: "size_list size <*mlex*> {}"
Found termination order: "size_list size <*mlex*> {}"
Found termination order: "size_list size <*mlex*> {}"
### Ignoring duplicate rewrite rule:
### pos_primfun_list [] == False
### Ignoring duplicate rewrite rule:
### pos_primfun_list ((?uu1, ?x1) # ?xs1) ==
### (0::?'b1) < ?x1 | ?x1 = (0::?'b1) & pos_primfun_list ?xs1
### Ignoring duplicate rewrite rule:
### nonneg_primfun_list [] == True
### Ignoring duplicate rewrite rule:
### nonneg_primfun_list ((?uu1, ?x1) # ?xs1) ==
### (0::?'b1) < ?x1 | ?x1 = (0::?'b1) & nonneg_primfun_list ?xs1
### Ignoring duplicate rewrite rule:
### iszero_primfun_list [] == True
### Ignoring duplicate rewrite rule:
### iszero_primfun_list ((?uu1, ?x1) # ?xs1) ==
### ?x1 = (0::?'b1) & iszero_primfun_list ?xs1
### theory "Landau_Symbols.Landau_Real_Products"
### 2.087s elapsed time, 2.323s cpu time, 0.308s GC time
Loading theory "Landau_Symbols.Landau_Simprocs" (required by "Draft.Akra_BazziMoreTemplates" via "Draft.Akra_Bazzi" via "Draft.Akra_Bazzi_Real" via "Draft.Akra_Bazzi_Asymptotics" via "Draft.Akra_Bazzi_Library" via "Landau_Symbols.Landau_More")
### ML warning (line 63 of "$AFP/Landau_Symbols/landau_simprocs.ML"):
### Value identifier (dest_bigtheta) has not been referenced.
### ML warning (line 176 of "$AFP/Landau_Symbols/landau_simprocs.ML"):
### Value identifier (x_name2) has not been referenced.
### ML warning (line 185 of "$AFP/Landau_Symbols/landau_simprocs.ML"):
### Value identifier (rest2) has not been referenced.
### ML warning (line 185 of "$AFP/Landau_Symbols/landau_simprocs.ML"):
### Value identifier (rest1) has not been referenced.
### ML warning (line 318 of "$AFP/Landau_Symbols/landau_simprocs.ML"):
### Pattern is not exhaustive.
### ML warning (line 373 of "$AFP/Landau_Symbols/landau_simprocs.ML"):
### Pattern is not exhaustive.
signature LANDAU =
  sig
    val cancel_factor_conv: Proof.context -> cterm -> thm
    val cancel_factor_simproc: Proof.context -> cterm -> thm option
    val dest_landau: term -> term * term * term
    val landau_const_names: string list
    val landau_sum_limit: int Config.T
    val lift_landau_conv: conv -> conv
    val lift_landau_simproc:
       (Proof.context -> cterm -> thm option) ->
         Proof.context -> cterm -> thm option
    val simplify_landau_product_conv: Proof.context -> conv
    val simplify_landau_product_simproc:
       Proof.context -> cterm -> thm option
    val simplify_landau_real_prod_prop_conv: Proof.context -> conv
    val simplify_landau_real_prod_prop_simproc:
       Proof.context -> cterm -> thm option
    val simplify_landau_sum_conv: Proof.context -> conv
    val simplify_landau_sum_simproc: Proof.context -> cterm -> thm option
  end
structure Landau: LANDAU
### theory "Landau_Symbols.Landau_Simprocs"
### 0.293s elapsed time, 0.359s cpu time, 0.052s GC time
Loading theory "Landau_Symbols.Landau_More" (required by "Draft.Akra_BazziMoreTemplates" via "Draft.Akra_Bazzi" via "Draft.Akra_Bazzi_Real" via "Draft.Akra_Bazzi_Asymptotics" via "Draft.Akra_Bazzi_Library")
val it =
   "(%x. 5 * (ln (ln x))\<^sup>2 / (2 * x) powr (15 / 10) * inverse 2)
    : \<omega>(%x. 3 * ln x * ln x / x * ln (ln (ln (ln x)))) ==
    3 = 0 |
    5 * inverse (2 powr (15 / 10)) * inverse 2 ~= 0 &
    pos_primfun_list
     (group_primfuns
       [(LnChain 1, - 1), (LnChain 1, - 1), (LnChain 0, 1),
        (LnChain 4, - 1), (LnChain 2, real 2), (LnChain 0, - (15 / 10))])":
   thm
### theory "Landau_Symbols.Landau_More"
### 0.104s elapsed time, 0.111s cpu time, 0.000s GC time
Loading theory "Draft.Akra_Bazzi_Library" (required by "Draft.Akra_BazziMoreTemplates" via "Draft.Akra_Bazzi" via "Draft.Akra_Bazzi_Real" via "Draft.Akra_Bazzi_Asymptotics")
### theory "Draft.Akra_Bazzi_Library"
### 0.212s elapsed time, 0.212s cpu time, 0.000s GC time
Loading theory "Draft.Akra_Bazzi_Asymptotics" (required by "Draft.Akra_BazziMoreTemplates" via "Draft.Akra_Bazzi" via "Draft.Akra_Bazzi_Real")
locale akra_bazzi_asymptotics_bep
  fixes b :: "real"
    and e :: "real"
    and p :: "real"
    and hb :: "real"
  assumes "akra_bazzi_asymptotics_bep b e hb"
### theory "Draft.Akra_Bazzi_Asymptotics"
### 0.195s elapsed time, 0.244s cpu time, 0.067s GC time
Loading theory "Draft.Akra_Bazzi_Real" (required by "Draft.Akra_BazziMoreTemplates" via "Draft.Akra_Bazzi")
locale akra_bazzi_integral
  fixes integrable :: "(real => real) => real => real => bool"
    and integral :: "(real => real) => real => real => real"
  assumes "akra_bazzi_integral integrable integral"
locale akra_bazzi_params
  fixes k :: "nat"
    and as :: "real list"
    and bs :: "real list"
  assumes "akra_bazzi_params k as bs"
locale akra_bazzi_params_nonzero
  fixes k :: "nat"
    and as :: "real list"
    and bs :: "real list"
  assumes "akra_bazzi_params_nonzero k as bs"
locale akra_bazzi_real_recursion
  fixes as :: "real list"
    and bs :: "real list"
    and hs :: "(real => real) list"
    and k :: "nat"
    and x\<^sub>0 :: "real"
    and x\<^sub>1 :: "real"
    and hb :: "real"
    and e :: "real"
    and p :: "real"
  assumes "akra_bazzi_real_recursion as bs hs k x\<^sub>0 x\<^sub>1 hb e p"
locale akra_bazzi_real
  fixes as :: "real list"
    and bs :: "real list"
    and hs :: "(real => real) list"
    and k :: "nat"
    and x\<^sub>0 :: "real"
    and x\<^sub>1 :: "real"
    and hb :: "real"
    and e :: "real"
    and p :: "real"
    and integrable :: "(real => real) => real => real => bool"
    and integral :: "(real => real) => real => real => real"
    and f :: "real => real"
    and g :: "real => real"
    and C :: "real"
  assumes
    "akra_bazzi_real as bs hs k x\<^sub>0 x\<^sub>1 hb e p integrable
      integral f g C"
locale akra_bazzi_nat_to_real
  fixes as :: "real list"
    and bs :: "real list"
    and hs :: "(real => real) list"
    and k :: "nat"
    and x\<^sub>0 :: "real"
    and x\<^sub>1 :: "real"
    and hb :: "real"
    and e :: "real"
    and p :: "real"
    and f :: "nat => real"
    and g :: "real => real"
  assumes "akra_bazzi_nat_to_real as bs hs k x\<^sub>0 x\<^sub>1 hb e p f g"
locale akra_bazzi_real_lower
  fixes as :: "real list"
    and bs :: "real list"
    and hs :: "(real => real) list"
    and k :: "nat"
    and x\<^sub>0 :: "real"
    and x\<^sub>1 :: "real"
    and hb :: "real"
    and e :: "real"
    and p :: "real"
    and integrable :: "(real => real) => real => real => bool"
    and integral :: "(real => real) => real => real => real"
    and f :: "real => real"
    and g :: "real => real"
    and C :: "real"
    and fb2 :: "real"
    and gb2 :: "real"
    and c2 :: "real"
  assumes
    "akra_bazzi_real_lower as bs hs k x\<^sub>0 x\<^sub>1 hb e p integrable
      integral f g C fb2 gb2 c2"
locale akra_bazzi_real_upper
  fixes as :: "real list"
    and bs :: "real list"
    and hs :: "(real => real) list"
    and k :: "nat"
    and x\<^sub>0 :: "real"
    and x\<^sub>1 :: "real"
    and hb :: "real"
    and e :: "real"
    and p :: "real"
    and integrable :: "(real => real) => real => real => bool"
    and integral :: "(real => real) => real => real => real"
    and f :: "real => real"
    and g :: "real => real"
    and C :: "real"
    and fb1 :: "real"
    and c1 :: "real"
  assumes
    "akra_bazzi_real_upper as bs hs k x\<^sub>0 x\<^sub>1 hb e p integrable
      integral f g C fb1 c1"
### theory "Draft.Akra_Bazzi_Real"
### 0.453s elapsed time, 0.495s cpu time, 0.058s GC time
Loading theory "Draft.Akra_Bazzi" (required by "Draft.Akra_BazziMoreTemplates")
locale akra_bazzi_recursion
  fixes x\<^sub>0 :: "nat"
    and x\<^sub>1 :: "nat"
    and k :: "nat"
    and as :: "real list"
    and bs :: "real list"
    and ts :: "(nat => nat) list"
    and f :: "nat => real"
  assumes "akra_bazzi_recursion x\<^sub>0 x\<^sub>1 k as bs ts"
locale akra_bazzi_function
  fixes x\<^sub>0 :: "nat"
    and x\<^sub>1 :: "nat"
    and k :: "nat"
    and as :: "real list"
    and bs :: "real list"
    and ts :: "(nat => nat) list"
    and f :: "nat => real"
    and integrable :: "(real => real) => real => real => bool"
    and integral :: "(real => real) => real => real => real"
    and g :: "nat => real"
  assumes
    "akra_bazzi_function x\<^sub>0 x\<^sub>1 k as bs ts f integrable
      integral g"
locale akra_bazzi_lower
  fixes x\<^sub>0 :: "nat"
    and x\<^sub>1 :: "nat"
    and k :: "nat"
    and as :: "real list"
    and bs :: "real list"
    and ts :: "(nat => nat) list"
    and f :: "nat => real"
    and integrable :: "(real => real) => real => real => bool"
    and integral :: "(real => real) => real => real => real"
    and g :: "nat => real"
    and g' :: "real => real"
  assumes
    "akra_bazzi_lower x\<^sub>0 x\<^sub>1 k as bs ts f integrable integral g
      g'"
locale akra_bazzi_upper
  fixes x\<^sub>0 :: "nat"
    and x\<^sub>1 :: "nat"
    and k :: "nat"
    and as :: "real list"
    and bs :: "real list"
    and ts :: "(nat => nat) list"
    and f :: "nat => real"
    and integrable :: "(real => real) => real => real => bool"
    and integral :: "(real => real) => real => real => real"
    and g :: "nat => real"
    and g' :: "real => real"
  assumes
    "akra_bazzi_upper x\<^sub>0 x\<^sub>1 k as bs ts f integrable integral g
      g'"
locale akra_bazzi
  fixes x\<^sub>0 :: "nat"
    and x\<^sub>1 :: "nat"
    and k :: "nat"
    and as :: "real list"
    and bs :: "real list"
    and ts :: "(nat => nat) list"
    and f :: "nat => real"
    and integrable :: "(real => real) => real => real => bool"
    and integral :: "(real => real) => real => real => real"
    and g :: "nat => real"
    and g' :: "real => real"
  assumes
    "akra_bazzi x\<^sub>0 x\<^sub>1 k as bs ts f integrable integral g g'"
### theory "Draft.Akra_Bazzi"
### 0.755s elapsed time, 0.847s cpu time, 0.124s GC time
Loading theory "Draft.Akra_BazziMoreTemplates"
val templateLemmas =
   [("Akra_Bazzi_Library.eventually_nat_real",
     "eventually ?P at_top ==>
      \<forall>\<^sub>F x in sequentially. ?P (real x)",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 4, template_var 0),
              template_hole 3)
            )],
       template_predicate
        (
           template_app
            (template_app (template_hole 2, t_empty), template_hole 0)
           ))),
    ("Akra_Bazzi_Library.real_natfloor_nat",
     "?x : \<nat> ==> real (nat \<lfloor>?x\<rfloor>) = ?x",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 5, template_var 0),
              template_hole 4)
            )],
       template_equation
        (template_app
          (template_hole 2,
           template_app
            (template_hole 1,
             template_app (template_hole 0, template_var 0))),
         template_var 0))),
    ("Akra_Bazzi_Library.eventually_natfloor",
     "eventually ?P sequentially ==>
      \<forall>\<^sub>F x in at_top. ?P (nat \<lfloor>x\<rfloor>)",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 5, template_var 0),
              template_hole 4)
            )],
       template_predicate
        (
           template_app
            (template_app (template_hole 3, t_empty), template_hole 0)
           ))),
    ("Akra_Bazzi_Library.real_powr_at_bot",
     "1 < ?a ==> ((powr) ?a \<longlongrightarrow> 0) at_bot",
     template_implication
      ([template_inequation (less_than, template_hole 5, template_var 0)],
       template_predicate
        (
           template_app
            (template_app
              (template_app (template_hole 4, t_empty),
               template_app (template_hole 2, template_hole 1)),
             template_hole 0)
           ))),
    ("Akra_Bazzi_Library.smallo_1_tendsto_0",
     "(?f \<longlongrightarrow> 0) at_top ==> ?f : o(%x. 1)",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app (template_hole 6, template_var 0),
                template_app (template_hole 5, template_hole 4)),
              template_hole 3)
            )],
       template_predicate
        (
           template_app
            (template_app (template_hole 2, template_var 0),
             template_app
              (template_app (template_hole 1, template_hole 3), t_empty))
           ))),
    ("Akra_Bazzi_Library.tendsto_0_smallo_1",
     "?f : o(%x. 1) ==> (?f \<longlongrightarrow> 0) at_top",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 6, template_var 0),
              template_app
               (template_app (template_hole 5, template_hole 4), t_empty))
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_app (template_hole 2, template_var 0),
               template_app (template_hole 1, template_hole 0)),
             template_hole 4)
           ))),
    ("Akra_Bazzi_Library.x_times_x_minus_1_nonneg",
     "?x <= (0::?'a) | (1::?'a) <= ?x ==> (0::?'a) <= ?x * (?x - (1::?'a))",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_hole 5,
                template_app
                 (template_app (template_hole 4, template_var 0),
                  template_hole 3)),
              template_app
               (template_app (template_hole 4, template_hole 2),
                template_var 0))
            )],
       template_inequation
        (less_equals, template_hole 3,
         template_app
          (template_app (template_hole 1, template_var 0),
           template_app
            (template_app (template_hole 0, template_var 0),
             template_hole 2))))),
    ("Akra_Bazzi.akra_bazzi_term_imp_less",
     "[| akra_bazzi_term ?x\<^sub>0 ?x\<^sub>1 ?b ?t; ?x\<^sub>1 <= ?x |]
      ==> ?t ?x < ?x",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_app (template_hole 2, template_var 4),
                  template_var 3),
                template_var 2),
              template_var 1)
            ),
        template_inequation (less_equals, template_var 3, template_var 0)],
       template_inequation
        (less_than, template_app (template_var 1, template_var 0),
         template_var 0))),
    ("Akra_Bazzi_Library.real_powr_at_bot_neg",
     "[| 0 < ?a; ?a < 1 |] ==> filterlim ((powr) ?a) at_top at_bot",
     template_implication
      ([template_inequation (less_than, template_hole 5, template_var 0),
        template_inequation (less_than, template_var 0, template_hole 4)],
       template_predicate
        (
           template_app
            (template_app
              (template_app (template_hole 3, t_empty), template_hole 1),
             template_hole 0)
           ))),
    ("Akra_Bazzi_Library.x_times_x_minus_1_nonpos",
     "[| (0::?'a) <= ?x; ?x <= (1::?'a) |]
      ==> ?x * (?x - (1::?'a)) <= (0::?'a)",
     template_implication
      ([template_inequation (less_equals, template_hole 3, template_var 0),
        template_inequation (less_equals, template_var 0, template_hole 2)],
       template_inequation
        (less_equals,
         template_app
          (template_app (template_hole 1, template_var 0),
           template_app
            (template_app (template_hole 0, template_var 0),
             template_hole 2)),
         template_hole 3))),
    ("Akra_Bazzi.akra_bazzi_term_imp_less'",
     "[| akra_bazzi_term ?x\<^sub>0 (Suc ?x\<^sub>1) ?b ?t;
         ?x\<^sub>1 < ?x |]
      ==> ?t ?x < ?x",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_app (template_hole 2, template_var 4),
                  template_app (template_hole 1, template_var 3)),
                template_var 2),
              template_var 1)
            ),
        template_inequation (less_than, template_var 3, template_var 0)],
       template_inequation
        (less_than, template_app (template_var 1, template_var 0),
         template_var 0))),
    ("Akra_Bazzi_Library.max_mult_left",
     "0 < ?x ==> ?x * max ?y ?z = max (?x * ?y) (?x * ?z)",
     template_implication
      ([template_inequation (less_than, template_hole 3, template_var 2)],
       template_equation
        (template_app
          (template_app (template_hole 1, template_var 2),
           template_app
            (template_app (template_hole 0, template_var 1),
             template_var 0)),
         template_app
          (template_app
            (template_hole 0,
             template_app
              (template_app (template_hole 1, template_var 2),
               template_var 1)),
           template_app
            (template_app (template_hole 1, template_var 2),
             template_var 0))))),
    ("Akra_Bazzi_Library.min_mult_left",
     "0 < ?x ==> ?x * min ?y ?z = min (?x * ?y) (?x * ?z)",
     template_implication
      ([template_inequation (less_than, template_hole 3, template_var 2)],
       template_equation
        (template_app
          (template_app (template_hole 1, template_var 2),
           template_app
            (template_app (template_hole 0, template_var 1),
             template_var 0)),
         template_app
          (template_app
            (template_hole 0,
             template_app
              (template_app (template_hole 1, template_var 2),
               template_var 1)),
           template_app
            (template_app (template_hole 1, template_var 2),
             template_var 0))))),
    ("Akra_Bazzi_Library.real_powr_at_top_neg",
     "[| 0 < ?a; ?a < 1 |] ==> ((powr) ?a \<longlongrightarrow> 0) at_top",
     template_implication
      ([template_inequation (less_than, template_hole 5, template_var 0),
        template_inequation (less_than, template_var 0, template_hole 4)],
       template_predicate
        (
           template_app
            (template_app
              (template_app (template_hole 3, t_empty),
               template_app (template_hole 1, template_hole 5)),
             template_hole 0)
           ))),
    ("Akra_Bazzi.ex_mono",
     "[| EX x. ?P x; !!x. ?P x ==> ?Q x |] ==> EX x. ?Q x",
     template_implication
      ([template_predicate (template_app (template_hole 1, t_empty)),
        template_predicate (template_app (template_hole 0, t_empty))],
       template_predicate (template_app (template_hole 1, t_empty)))),
    ("Akra_Bazzi_Library.ln_mono_strict",
     "[| 0 < ?x; 0 < ?y; ?x < ?y |] ==> ln ?x < ln ?y",
     template_implication
      ([template_inequation (less_than, template_hole 1, template_var 1),
        template_inequation (less_than, template_hole 1, template_var 0),
        template_inequation (less_than, template_var 1, template_var 0)],
       template_inequation
        (less_than, template_app (template_hole 0, template_var 1),
         template_app (template_hole 0, template_var 0)))),
    ("Akra_Bazzi_Library.ln_mono",
     "[| 0 < ?x; 0 < ?y; ?x <= ?y |] ==> ln ?x <= ln ?y",
     template_implication
      ([template_inequation (less_than, template_hole 2, template_var 1),
        template_inequation (less_than, template_hole 2, template_var 0),
        template_inequation (less_equals, template_var 1, template_var 0)],
       template_inequation
        (less_equals, template_app (template_hole 0, template_var 1),
         template_app (template_hole 0, template_var 0)))),
    ("Akra_Bazzi_Library.filterlim_at_right",
     "filterlim ?f (at_right ?a) ?F =
      ((\<forall>\<^sub>F x in ?F. ?a < ?f x) &
       (?f \<longlongrightarrow> ?a) ?F)",
     template_equation
      (template_app
        (template_app
          (template_app (template_hole 6, template_var 2),
           template_app
            (template_app (template_hole 5, template_var 1),
             template_app (template_hole 4, template_var 1))),
         template_var 0),
       template_app
        (template_app
          (template_hole 3,
           template_app
            (template_app (template_hole 2, t_empty), template_var 0)),
         template_app
          (template_app
            (template_app (template_hole 6, template_var 2),
             template_app (template_hole 0, template_var 1)),
           template_var 0)))),
    ("Akra_Bazzi_Library.filterlim_at_top_smallomega_1",
     "[| ?f : \<omega>[?F](%x. 1); \<forall>\<^sub>F x in ?F. 0 < ?f x |]
      ==> filterlim ?f at_top ?F",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 7, template_var 1),
              template_app
               (template_app (template_hole 6, template_var 0), t_empty))
            ),
        template_predicate
         (
            template_app
             (template_app (template_hole 4, t_empty), template_var 0)
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_app (template_hole 1, template_var 1),
               template_hole 0),
             template_var 0)
           ))),
    ("Akra_Bazzi_Library.one_plus_x_powr_Taylor1_bigo",
     "(?f \<longlongrightarrow> 0) ?F ==>
      (%x. (1 + ?f x) powr ?p - 1) : O[?F](?f)",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app (template_hole 8, template_var 2),
                template_app (template_hole 7, template_hole 6)),
              template_var 1)
            )],
       template_predicate
        (
           template_app
            (template_app (template_hole 5, t_empty),
             template_app
              (template_app (template_hole 0, template_var 1), t_empty))
           ))),
    ("Akra_Bazzi_Library.powr_less_mono'",
     "[| 0 < ?x; ?x < 1; ?a < ?b |] ==> ?x powr ?b < ?x powr ?a",
     template_implication
      ([template_inequation (less_than, template_hole 2, template_var 2),
        template_inequation (less_than, template_var 2, template_hole 1),
        template_inequation (less_than, template_var 1, template_var 0)],
       template_inequation
        (less_than,
         template_app
          (template_app (template_hole 0, template_var 2), template_var 0),
         template_app
          (template_app (template_hole 0, template_var 2),
           template_var 1)))),
    ("Akra_Bazzi_Library.powr_mono'",
     "[| 0 < ?x; ?x <= 1; ?a <= ?b |] ==> ?x powr ?b <= ?x powr ?a",
     template_implication
      ([template_inequation (less_than, template_hole 3, template_var 2),
        template_inequation (less_equals, template_var 2, template_hole 1),
        template_inequation (less_equals, template_var 1, template_var 0)],
       template_inequation
        (less_equals,
         template_app
          (template_app (template_hole 0, template_var 2), template_var 0),
         template_app
          (template_app (template_hole 0, template_var 2),
           template_var 1)))),
    ("Akra_Bazzi_Library.smallo_imp_less_real",
     "[| ?f : o[?F](?g); \<forall>\<^sub>F x in ?F. 0 < ?g x |]
      ==> \<forall>\<^sub>F x in ?F. ?f x < ?g x",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 4, template_var 2),
              template_app
               (template_app (template_hole 3, template_var 1),
                template_var 0))
            ),
        template_predicate
         (
            template_app
             (template_app (template_hole 2, t_empty), template_var 1)
            )],
       template_predicate
        (
           template_app
            (template_app (template_hole 2, t_empty), template_var 1)
           ))),
    ("Akra_Bazzi_Library.smallo_imp_le_real",
     "[| ?f : o[?F](?g); \<forall>\<^sub>F x in ?F. 0 <= ?g x |]
      ==> \<forall>\<^sub>F x in ?F. ?f x <= ?g x",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 4, template_var 2),
              template_app
               (template_app (template_hole 3, template_var 1),
                template_var 0))
            ),
        template_predicate
         (
            template_app
             (template_app (template_hole 2, t_empty), template_var 1)
            )],
       template_predicate
        (
           template_app
            (template_app (template_hole 2, t_empty), template_var 1)
           ))),
    ("Akra_Bazzi_Library.eventually_conjE",
     "[| \<forall>\<^sub>F x in ?F. ?P x & ?Q x;
         [| eventually ?P ?F; eventually ?Q ?F |] ==> ?R |]
      ==> ?R",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 1, t_empty), template_var 1)
            ),
        template_implication
         ([template_predicate
            (
               template_app
                (template_app (template_hole 1, template_var 3),
                 template_var 1)
               )],
          template_implication
           ([template_predicate
              (
                 template_app
                  (template_app (template_hole 1, template_var 2),
                   template_var 1)
                 )],
            template_predicate (template_var 0)))],
       template_predicate (template_var 0))),
    ("Akra_Bazzi_Library.smallo_imp_abs_less_real",
     "[| ?f : o[?F](?g); \<forall>\<^sub>F x in ?F. 0 < ?g x |]
      ==> \<forall>\<^sub>F x in ?F. \<bar>?f x\<bar> < ?g x",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 5, template_var 2),
              template_app
               (template_app (template_hole 4, template_var 1),
                template_var 0))
            ),
        template_predicate
         (
            template_app
             (template_app (template_hole 3, t_empty), template_var 1)
            )],
       template_predicate
        (
           template_app
            (template_app (template_hole 3, t_empty), template_var 1)
           ))),
    ("Akra_Bazzi_Library.powr_upper_bound",
     "[| 0 < ?l; ?l <= ?x; ?x <= ?u |]
      ==> ?x powr ?z <= max (?l powr ?z) (?u powr ?z)",
     template_implication
      ([template_inequation (less_than, template_hole 3, template_var 3),
        template_inequation (less_equals, template_var 3, template_var 2),
        template_inequation (less_equals, template_var 2, template_var 1)],
       template_inequation
        (less_equals,
         template_app
          (template_app (template_hole 1, template_var 2), template_var 0),
         template_app
          (template_app
            (template_hole 0,
             template_app
              (template_app (template_hole 1, template_var 3),
               template_var 0)),
           template_app
            (template_app (template_hole 1, template_var 1),
             template_var 0))))),
    ("Akra_Bazzi_Library.powr_lower_bound",
     "[| 0 < ?l; ?l <= ?x; ?x <= ?u |]
      ==> min (?l powr ?z) (?u powr ?z) <= ?x powr ?z",
     template_implication
      ([template_inequation (less_than, template_hole 3, template_var 3),
        template_inequation (less_equals, template_var 3, template_var 2),
        template_inequation (less_equals, template_var 2, template_var 1)],
       template_inequation
        (less_equals,
         template_app
          (template_app
            (template_hole 1,
             template_app
              (template_app (template_hole 0, template_var 3),
               template_var 0)),
           template_app
            (template_app (template_hole 0, template_var 1),
             template_var 0)),
         template_app
          (template_app (template_hole 0, template_var 2),
           template_var 0)))),
    ("Akra_Bazzi.x_over_ln_mono",
     "[| 0 < ?e; exp ?e < ?x; ?x <= ?y |]
      ==> ?x / ln ?x powr ?e <= ?y / ln ?y powr ?e",
     template_implication
      ([template_inequation (less_than, template_hole 5, template_var 2),
        template_inequation
         (less_than, template_app (template_hole 4, template_var 2),
          template_var 1),
        template_inequation (less_equals, template_var 1, template_var 0)],
       template_inequation
        (less_equals,
         template_app
          (template_app (template_hole 2, template_var 1),
           template_app
            (template_app
              (template_hole 1,
               template_app (template_hole 0, template_var 1)),
             template_var 2)),
         template_app
          (template_app (template_hole 2, template_var 0),
           template_app
            (template_app
              (template_hole 1,
               template_app (template_hole 0, template_var 0)),
             template_var 2))))),
    ("Akra_Bazzi_Library.one_plus_x_powr_Taylor2_bigo",
     "(?f \<longlongrightarrow> 0) ?F ==>
      (%x. (1 + ?f x) powr ?p - 1 - ?p * ?f x) : O[?F](%x. (?f x)\<^sup>2)",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app (template_hole 13, template_var 2),
                template_app (template_hole 12, template_hole 11)),
              template_var 1)
            )],
       template_predicate
        (
           template_app
            (template_app (template_hole 10, t_empty),
             template_app
              (template_app (template_hole 4, template_var 1), t_empty))
           ))),
    ("Akra_Bazzi_Library.sum_pos'",
     "[| finite ?I; EX x:?I. (0::?'b) < ?f x;
         !!x. x : ?I ==> (0::?'b) <= ?f x |]
      ==> (0::?'b) < sum ?f ?I",
     template_implication
      ([template_predicate (template_app (template_hole 7, template_var 1)),
        template_predicate
         (
            template_app
             (template_app (template_hole 6, template_var 1), t_empty)
            ),
        template_predicate (template_app (template_hole 3, t_empty))],
       template_inequation
        (less_than, template_hole 4,
         template_app
          (template_app (template_hole 0, template_var 0),
           template_var 1)))),
    ("Akra_Bazzi_Asymptotics.akra_bazzi_asymptotics",
     "[| !!b. b : set ?bs ==> b : {0<..<1}; 0 < ?hb; 0 < ?e |]
      ==> \<forall>\<^sub>F x in at_top.
             ALL b:set ?bs. akra_bazzi_asymptotics b ?hb ?e ?p x",
     template_implication
      ([template_predicate (template_app (template_hole 11, t_empty)),
        template_inequation (less_than, template_hole 6, template_var 2),
        template_inequation (less_than, template_hole 6, template_var 1)],
       template_predicate
        (
           template_app
            (template_app (template_hole 3, t_empty), template_hole 0)
           ))),
    ("Akra_Bazzi_Library.one_plus_x_powr_Taylor2",
     "(!!k. (!!x. \<bar>x\<bar> <= 1 / 2 ==>
                  \<bar>(1 + x) powr ?p - 1 - ?p * x\<bar>
                  <= k * x\<^sup>2) ==>
            ?thesis) ==>
      ?thesis",
     template_implication
      ([template_predicate (template_app (template_hole 14, t_empty))],
       template_predicate (template_var 0))),
    ("Akra_Bazzi.akra_bazzi_term_ceiling",
     "[| 0 < ?b; ?b < 1; real ?x\<^sub>0 <= ?b * real ?x\<^sub>1;
         1 <= (1 - ?b) * real ?x\<^sub>1 |]
      ==> akra_bazzi_term ?x\<^sub>0 ?x\<^sub>1 ?b
           (%x. nat \<lceil>?b * real x\<rceil>)",
     template_implication
      ([template_inequation (less_than, template_hole 8, template_var 2),
        template_inequation (less_than, template_var 2, template_hole 7),
        template_inequation
         (less_equals, template_app (template_hole 5, template_var 1),
          template_app
           (template_app (template_hole 4, template_var 2),
            template_app (template_hole 5, template_var 0))),
        template_inequation
         (less_equals, template_hole 7,
          template_app
           (template_app
             (template_hole 4,
              template_app
               (template_app (template_hole 3, template_hole 7),
                template_var 2)),
            template_app (template_hole 5, template_var 0)))],
       template_predicate
        (
           template_app
            (template_app
              (template_app
                (template_app (template_hole 2, template_var 1),
                 template_var 0),
               template_var 2),
             t_empty)
           ))),
    ("Akra_Bazzi_Library.DERIV_nonneg_imp_mono",
     "[| !!t. t : {?x..?y} ==> (?f has_real_derivative ?f' t) (at t);
         !!t. t : {?x..?y} ==> 0 <= ?f' t; ?x <= ?y |]
      ==> ?f ?x <= ?f ?y",
     template_implication
      ([template_predicate (template_app (template_hole 8, t_empty)),
        template_predicate (template_app (template_hole 8, t_empty)),
        template_inequation (less_equals, template_var 3, template_var 2)],
       template_inequation
        (less_equals, template_app (template_var 1, template_var 3),
         template_app (template_var 1, template_var 2)))),
    ("Akra_Bazzi.akra_bazzi_term_floor",
     "[| 0 < ?b; ?b < 1; real ?x\<^sub>0 <= ?b * real ?x\<^sub>1;
         0 < (1 - ?b) * real ?x\<^sub>1; 0 < ?x\<^sub>1 |]
      ==> akra_bazzi_term ?x\<^sub>0 ?x\<^sub>1 ?b
           (%x. nat \<lfloor>?b * real x\<rfloor>)",
     template_implication
      ([template_inequation (less_than, template_hole 10, template_var 2),
        template_inequation (less_than, template_var 2, template_hole 9),
        template_inequation
         (less_equals, template_app (template_hole 7, template_var 1),
          template_app
           (template_app (template_hole 6, template_var 2),
            template_app (template_hole 7, template_var 0))),
        template_inequation
         (less_than, template_hole 10,
          template_app
           (template_app
             (template_hole 6,
              template_app
               (template_app (template_hole 5, template_hole 9),
                template_var 2)),
            template_app (template_hole 7, template_var 0))),
        template_inequation (less_than, template_hole 3, template_var 0)],
       template_predicate
        (
           template_app
            (template_app
              (template_app
                (template_app (template_hole 2, template_var 1),
                 template_var 0),
               template_var 2),
             t_empty)
           ))),
    ("Akra_Bazzi.akra_bazzi_term_ceiling_subtract",
     "[| 0 < ?b; ?b < 1; real ?x\<^sub>0 <= ?b * real ?x\<^sub>1 - ?c;
         1 <= ?c + (1 - ?b) * real ?x\<^sub>1 |]
      ==> akra_bazzi_term ?x\<^sub>0 ?x\<^sub>1 ?b
           (%x. nat \<lceil>?b * real x - ?c\<rceil>)",
     template_implication
      ([template_inequation (less_than, template_hole 9, template_var 3),
        template_inequation (less_than, template_var 3, template_hole 8),
        template_inequation
         (less_equals, template_app (template_hole 6, template_var 2),
          template_app
           (template_app
             (template_hole 5,
              template_app
               (template_app (template_hole 4, template_var 3),
                template_app (template_hole 6, template_var 1))),
            template_var 0)),
        template_inequation
         (less_equals, template_hole 8,
          template_app
           (template_app (template_hole 3, template_var 0),
            template_app
             (template_app
               (template_hole 4,
                template_app
                 (template_app (template_hole 5, template_hole 8),
                  template_var 3)),
              template_app (template_hole 6, template_var 1))))],
       template_predicate
        (
           template_app
            (template_app
              (template_app
                (template_app (template_hole 2, template_var 2),
                 template_var 1),
               template_var 3),
             t_empty)
           ))),
    ("Akra_Bazzi.akra_bazzi_term_ceiling_add",
     "[| 0 < ?b; ?b < 1; real ?x\<^sub>0 <= ?b * real ?x\<^sub>1 + ?c;
         ?c + 1 <= (1 - ?b) * real ?x\<^sub>1 |]
      ==> akra_bazzi_term ?x\<^sub>0 ?x\<^sub>1 ?b
           (%x. nat \<lceil>?b * real x + ?c\<rceil>)",
     template_implication
      ([template_inequation (less_than, template_hole 9, template_var 3),
        template_inequation (less_than, template_var 3, template_hole 8),
        template_inequation
         (less_equals, template_app (template_hole 6, template_var 2),
          template_app
           (template_app
             (template_hole 5,
              template_app
               (template_app (template_hole 4, template_var 3),
                template_app (template_hole 6, template_var 1))),
            template_var 0)),
        template_inequation
         (less_equals,
          template_app
           (template_app (template_hole 5, template_var 0),
            template_hole 8),
          template_app
           (template_app
             (template_hole 4,
              template_app
               (template_app (template_hole 3, template_hole 8),
                template_var 3)),
            template_app (template_hole 6, template_var 1)))],
       template_predicate
        (
           template_app
            (template_app
              (template_app
                (template_app (template_hole 2, template_var 2),
                 template_var 1),
               template_var 3),
             t_empty)
           ))),
    ("Akra_Bazzi.akra_bazzi_term_ceiling_subtract'",
     "[| 0 < ?b; ?b < 1; real ?x\<^sub>0 <= ?b * real ?x\<^sub>1 - real ?c;
         1 <= real ?c + (1 - ?b) * real ?x\<^sub>1 |]
      ==> akra_bazzi_term ?x\<^sub>0 ?x\<^sub>1 ?b
           (%x. nat \<lceil>?b * real x\<rceil> - ?c)",
     template_implication
      ([template_inequation (less_than, template_hole 10, template_var 3),
        template_inequation (less_than, template_var 3, template_hole 9),
        template_inequation
         (less_equals, template_app (template_hole 7, template_var 2),
          template_app
           (template_app
             (template_hole 6,
              template_app
               (template_app (template_hole 5, template_var 3),
                template_app (template_hole 7, template_var 1))),
            template_app (template_hole 7, template_var 0))),
        template_inequation
         (less_equals, template_hole 9,
          template_app
           (template_app
             (template_hole 4,
              template_app (template_hole 7, template_var 0)),
            template_app
             (template_app
               (template_hole 5,
                template_app
                 (template_app (template_hole 6, template_hole 9),
                  template_var 3)),
              template_app (template_hole 7, template_var 1))))],
       template_predicate
        (
           template_app
            (template_app
              (template_app
                (template_app (template_hole 3, template_var 2),
                 template_var 1),
               template_var 3),
             t_empty)
           ))),
    ("Akra_Bazzi.akra_bazzi_term_ceiling_add'",
     "[| 0 < ?b; ?b < 1; real ?x\<^sub>0 <= ?b * real ?x\<^sub>1 + real ?c;
         real ?c + 1 <= (1 - ?b) * real ?x\<^sub>1 |]
      ==> akra_bazzi_term ?x\<^sub>0 ?x\<^sub>1 ?b
           (%x. nat \<lceil>?b * real x\<rceil> + ?c)",
     template_implication
      ([template_inequation (less_than, template_hole 10, template_var 3),
        template_inequation (less_than, template_var 3, template_hole 9),
        template_inequation
         (less_equals, template_app (template_hole 7, template_var 2),
          template_app
           (template_app
             (template_hole 6,
              template_app
               (template_app (template_hole 5, template_var 3),
                template_app (template_hole 7, template_var 1))),
            template_app (template_hole 7, template_var 0))),
        template_inequation
         (less_equals,
          template_app
           (template_app
             (template_hole 6,
              template_app (template_hole 7, template_var 0)),
            template_hole 9),
          template_app
           (template_app
             (template_hole 5,
              template_app
               (template_app (template_hole 4, template_hole 9),
                template_var 3)),
            template_app (template_hole 7, template_var 1)))],
       template_predicate
        (
           template_app
            (template_app
              (template_app
                (template_app (template_hole 3, template_var 2),
                 template_var 1),
               template_var 3),
             t_empty)
           ))),
    ("Akra_Bazzi.akra_bazzi_term_floor_add",
     "[| 0 < ?b; ?b < 1; real ?x\<^sub>0 <= ?b * real ?x\<^sub>1 + ?c;
         ?c < (1 - ?b) * real ?x\<^sub>1; 0 < ?x\<^sub>1 |]
      ==> akra_bazzi_term ?x\<^sub>0 ?x\<^sub>1 ?b
           (%x. nat \<lfloor>?b * real x + ?c\<rfloor>)",
     template_implication
      ([template_inequation (less_than, template_hole 11, template_var 3),
        template_inequation (less_than, template_var 3, template_hole 10),
        template_inequation
         (less_equals, template_app (template_hole 8, template_var 2),
          template_app
           (template_app
             (template_hole 7,
              template_app
               (template_app (template_hole 6, template_var 3),
                template_app (template_hole 8, template_var 1))),
            template_var 0)),
        template_inequation
         (less_than, template_var 0,
          template_app
           (template_app
             (template_hole 6,
              template_app
               (template_app (template_hole 5, template_hole 10),
                template_var 3)),
            template_app (template_hole 8, template_var 1))),
        template_inequation (less_than, template_hole 3, template_var 1)],
       template_predicate
        (
           template_app
            (template_app
              (template_app
                (template_app (template_hole 2, template_var 2),
                 template_var 1),
               template_var 3),
             t_empty)
           ))),
    ("Akra_Bazzi.akra_bazzi_term_floor_subtract",
     "[| 0 < ?b; ?b < 1; real ?x\<^sub>0 <= ?b * real ?x\<^sub>1 - ?c;
         0 < ?c + (1 - ?b) * real ?x\<^sub>1; 0 < ?x\<^sub>1 |]
      ==> akra_bazzi_term ?x\<^sub>0 ?x\<^sub>1 ?b
           (%x. nat \<lfloor>?b * real x - ?c\<rfloor>)",
     template_implication
      ([template_inequation (less_than, template_hole 11, template_var 3),
        template_inequation (less_than, template_var 3, template_hole 10),
        template_inequation
         (less_equals, template_app (template_hole 8, template_var 2),
          template_app
           (template_app
             (template_hole 7,
              template_app
               (template_app (template_hole 6, template_var 3),
                template_app (template_hole 8, template_var 1))),
            template_var 0)),
        template_inequation
         (less_than, template_hole 11,
          template_app
           (template_app (template_hole 5, template_var 0),
            template_app
             (template_app
               (template_hole 6,
                template_app
                 (template_app (template_hole 7, template_hole 10),
                  template_var 3)),
              template_app (template_hole 8, template_var 1)))),
        template_inequation (less_than, template_hole 3, template_var 1)],
       template_predicate
        (
           template_app
            (template_app
              (template_app
                (template_app (template_hole 2, template_var 2),
                 template_var 1),
               template_var 3),
             t_empty)
           ))),
    ("Akra_Bazzi.akra_bazzi_term_floor_add'",
     "[| 0 < ?b; ?b < 1; real ?x\<^sub>0 <= ?b * real ?x\<^sub>1 + real ?c;
         real ?c < (1 - ?b) * real ?x\<^sub>1; 0 < ?x\<^sub>1 |]
      ==> akra_bazzi_term ?x\<^sub>0 ?x\<^sub>1 ?b
           (%x. nat \<lfloor>?b * real x\<rfloor> + ?c)",
     template_implication
      ([template_inequation (less_than, template_hole 12, template_var 3),
        template_inequation (less_than, template_var 3, template_hole 11),
        template_inequation
         (less_equals, template_app (template_hole 9, template_var 2),
          template_app
           (template_app
             (template_hole 8,
              template_app
               (template_app (template_hole 7, template_var 3),
                template_app (template_hole 9, template_var 1))),
            template_app (template_hole 9, template_var 0))),
        template_inequation
         (less_than, template_app (template_hole 9, template_var 0),
          template_app
           (template_app
             (template_hole 7,
              template_app
               (template_app (template_hole 6, template_hole 11),
                template_var 3)),
            template_app (template_hole 9, template_var 1))),
        template_inequation (less_than, template_hole 4, template_var 1)],
       template_predicate
        (
           template_app
            (template_app
              (template_app
                (template_app (template_hole 3, template_var 2),
                 template_var 1),
               template_var 3),
             t_empty)
           ))),
    ("Akra_Bazzi_Real.strict_mono_imp_ex1_real",
     "[| filterlim ?f at_top at_bot; (?f \<longlongrightarrow> ?z) at_top;
         !!a b. a < b ==> ?f b < ?f a; !!x. isCont ?f x; ?z < ?y |]
      ==> EX! x. ?f x = ?y",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app (template_hole 10, t_empty), template_hole 9),
              template_hole 8)
            ),
        template_predicate
         (
            template_app
             (template_app
               (template_app (template_hole 10, template_var 2),
                template_app (template_hole 7, template_var 1)),
              template_hole 9)
            ),
        template_predicate (template_app (template_hole 6, t_empty)),
        template_predicate (template_app (template_hole 6, t_empty)),
        template_inequation (less_than, template_var 1, template_var 0)],
       template_predicate (template_app (template_hole 1, t_empty)))),
    ("Akra_Bazzi.akra_bazzi_term_floor_subtract'",
     "[| 0 < ?b; ?b < 1; real ?x\<^sub>0 <= ?b * real ?x\<^sub>1 - real ?c;
         0 < real ?c + (1 - ?b) * real ?x\<^sub>1; 0 < ?x\<^sub>1 |]
      ==> akra_bazzi_term ?x\<^sub>0 ?x\<^sub>1 ?b
           (%x. nat \<lfloor>?b * real x\<rfloor> - ?c)",
     template_implication
      ([template_inequation (less_than, template_hole 12, template_var 3),
        template_inequation (less_than, template_var 3, template_hole 11),
        template_inequation
         (less_equals, template_app (template_hole 9, template_var 2),
          template_app
           (template_app
             (template_hole 8,
              template_app
               (template_app (template_hole 7, template_var 3),
                template_app (template_hole 9, template_var 1))),
            template_app (template_hole 9, template_var 0))),
        template_inequation
         (less_than, template_hole 12,
          template_app
           (template_app
             (template_hole 6,
              template_app (template_hole 9, template_var 0)),
            template_app
             (template_app
               (template_hole 7,
                template_app
                 (template_app (template_hole 8, template_hole 11),
                  template_var 3)),
              template_app (template_hole 9, template_var 1)))),
        template_inequation (less_than, template_hole 4, template_var 1)],
       template_predicate
        (
           template_app
            (template_app
              (template_app
                (template_app (template_hole 3, template_var 2),
                 template_var 1),
               template_var 3),
             t_empty)
           ))),
    ("Akra_Bazzi_Library.one_plus_x_powr_approx_ex",
     "[| \<bar>?x\<bar> <= 1 / 2;
         !!t. [| \<bar>t\<bar> < 1 / 2;
                 (1 + ?x) powr ?p =
                 1 + ?p * ?x +
                 ?p * (?p - 1) * (1 + t) powr (?p - 2) / 2 * ?x\<^sup>2 |]
              ==> ?thesis |]
      ==> ?thesis",
     template_implication
      ([template_inequation
         (less_equals, template_app (template_hole 14, template_var 2),
          template_app
           (template_app (template_hole 13, template_hole 12),
            template_app
             (template_hole 11,
              template_app (template_hole 10, template_hole 9)))),
        template_predicate (template_app (template_hole 8, t_empty))],
       template_predicate (template_var 0))),
    ("Akra_Bazzi.akra_bazzi_termI",
     "[| 0 < ?e; ?h : O(%x. real x / ln (real x) powr (1 + ?e));
         !!x. ?x\<^sub>1 <= x ==> ?x\<^sub>0 <= ?t x;
         !!x. ?x\<^sub>1 <= x ==> ?t x < x;
         !!x. ?x\<^sub>1 <= x ==> ?b * real x + ?h x = real (?t x) |]
      ==> akra_bazzi_term ?x\<^sub>0 ?x\<^sub>1 ?b ?t",
     template_implication
      ([template_inequation (less_than, template_hole 15, template_var 5),
        template_predicate
         (
            template_app
             (template_app (template_hole 14, t_empty),
              template_app
               (template_app (template_hole 13, template_hole 12), t_empty))
            ),
        template_predicate (template_app (template_hole 5, t_empty)),
        template_predicate (template_app (template_hole 5, t_empty)),
        template_predicate (template_app (template_hole 5, t_empty))],
       template_predicate
        (
           template_app
            (template_app
              (template_app
                (template_app (template_hole 0, template_var 2),
                 template_var 3),
               template_var 0),
             template_var 1)
           )))]:
   (string * thm * template) list
### theory "Draft.Akra_BazziMoreTemplates"
### 0.423s elapsed time, 0.595s cpu time, 0.000s GC time
val it = (): unit
