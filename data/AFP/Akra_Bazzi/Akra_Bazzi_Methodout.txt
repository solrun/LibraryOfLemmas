Loading theory "HOL-Combinatorics.Transposition" (required by "Draft.Akra_Bazzi_MethodMoreTemplates" via "Draft.Akra_Bazzi_Method" via "Draft.Master_Theorem" via "HOL-Analysis.Equivalence_Lebesgue_Henstock_Integration" via "HOL-Analysis.Lebesgue_Measure" via "HOL-Analysis.Finite_Product_Measure" via "HOL-Analysis.Binary_Product_Measure" via "HOL-Analysis.Nonnegative_Lebesgue_Integration" via "HOL-Analysis.Borel_Space" via "HOL-Analysis.Derivative" via "HOL-Analysis.Bounded_Linear_Function" via "HOL-Analysis.Topology_Euclidean_Space" via "HOL-Analysis.Elementary_Normed_Spaces" via "HOL-Analysis.Cartesian_Space")
Loading theory "Pure-ex.Guess" (required by "Draft.Akra_Bazzi_MethodMoreTemplates" via "Draft.Akra_Bazzi_Method" via "Draft.Akra_Bazzi" via "Draft.Akra_Bazzi_Real" via "Draft.Akra_Bazzi_Asymptotics" via "Draft.Akra_Bazzi_Library")
Loading theory "HOL-Library.FuncSet" (required by "Draft.Akra_Bazzi_MethodMoreTemplates" via "Draft.Akra_Bazzi_Method" via "Draft.Master_Theorem" via "HOL-Analysis.Equivalence_Lebesgue_Henstock_Integration" via "HOL-Analysis.Lebesgue_Measure" via "HOL-Analysis.Finite_Product_Measure" via "HOL-Analysis.Binary_Product_Measure" via "HOL-Analysis.Nonnegative_Lebesgue_Integration" via "HOL-Analysis.Measure_Space" via "HOL-Analysis.Measurable" via "HOL-Analysis.Sigma_Algebra")
Loading theory "HOL-Library.Cancellation" (required by "Draft.Akra_Bazzi_MethodMoreTemplates" via "Draft.Akra_Bazzi_Method" via "Draft.Akra_Bazzi" via "Draft.Akra_Bazzi_Real" via "Draft.Akra_Bazzi_Asymptotics" via "Draft.Akra_Bazzi_Library" via "Landau_Symbols.Landau_More" via "Landau_Symbols.Landau_Simprocs" via "Landau_Symbols.Landau_Real_Products" via "Landau_Symbols.Group_Sort" via "HOL-Library.Multiset")
### ML warning (line 99 of "~~/src/Pure/ex/Guess.thy"):
### Pattern is not exhaustive.
### ML warning (line 150 of "~~/src/Pure/ex/Guess.thy"):
### Matches are not exhaustive.
### ML warning (line 157 of "~~/src/Pure/ex/Guess.thy"):
### Pattern is not exhaustive.
signature GUESS =
  sig
    val guess:
       (binding * typ option * mixfix) list ->
         bool -> Proof.state -> Proof.state
    val guess_cmd:
       (binding * string option * mixfix) list ->
         bool -> Proof.state -> Proof.state
  end
structure Guess: GUESS
### theory "Pure-ex.Guess"
### 0.057s elapsed time, 0.220s cpu time, 0.000s GC time
Loading theory "HOL-Library.Function_Algebras" (required by "Draft.Akra_Bazzi_MethodMoreTemplates" via "Draft.ExtrEqs" via "HOL-Library.BigO")
instantiation
  fun :: (type, plus) plus
  plus_fun == plus :: ('a => 'b) => ('a => 'b) => 'a => 'b
instantiation
  fun :: (type, zero) zero
  zero_fun == zero_class.zero :: 'a => 'b
instantiation
  fun :: (type, times) times
  times_fun == times :: ('a => 'b) => ('a => 'b) => 'a => 'b
instantiation
  fun :: (type, one) one
  one_fun == one_class.one :: 'a => 'b
### theory "HOL-Combinatorics.Transposition"
### 0.150s elapsed time, 0.617s cpu time, 0.023s GC time
Loading theory "HOL-Library.Infinite_Set" (required by "Draft.Akra_Bazzi_MethodMoreTemplates" via "Draft.Akra_Bazzi_Method" via "Draft.Master_Theorem" via "HOL-Analysis.Equivalence_Lebesgue_Henstock_Integration" via "HOL-Analysis.Lebesgue_Measure" via "HOL-Analysis.Finite_Product_Measure" via "HOL-Analysis.Binary_Product_Measure" via "HOL-Analysis.Nonnegative_Lebesgue_Integration" via "HOL-Analysis.Measure_Space" via "HOL-Analysis.Measurable" via "HOL-Analysis.Sigma_Algebra" via "HOL-Library.Countable_Set")
### theory "HOL-Library.Function_Algebras"
### 0.142s elapsed time, 0.591s cpu time, 0.023s GC time
Loading theory "HOL-Library.Nat_Bijection" (required by "Draft.Akra_Bazzi_MethodMoreTemplates" via "Draft.ExtrEqs" via "HOL-Library.Stream")
Found termination order: "(%p. size (snd p)) <*mlex*> {}"
signature CANCEL = sig val proc: Proof.context -> cterm -> thm option end
functor Cancel_Fun (Data: CANCEL_NUMERALS_DATA): CANCEL
consts
  enumerate :: "'a set => nat => 'a"
signature CANCEL_DATA =
  sig
    val dest_coeff: term -> int * term
    val dest_sum: term -> term list
    val find_first_coeff: term -> term list -> int * term list
    val mk_coeff: int * term -> term
    val mk_sum: typ -> term list -> term
    val norm_ss1: simpset
    val norm_ss2: simpset
    val norm_tac: Proof.context -> tactic
    val numeral_simp_tac: Proof.context -> tactic
    val prove_conv:
       tactic list -> Proof.context -> thm list -> term * term -> thm option
    val simplify_meta_eq: Proof.context -> thm -> thm
    val trans_tac: Proof.context -> thm option -> tactic
  end
structure Cancel_Data: CANCEL_DATA
Found termination order: "size_list size <*mlex*> {}"
signature CANCEL_SIMPROCS =
  sig
    val diff_cancel: Proof.context -> cterm -> thm option
    val eq_cancel: Proof.context -> cterm -> thm option
    val less_cancel: Proof.context -> cterm -> thm option
    val less_eq_cancel: Proof.context -> cterm -> thm option
  end
structure Cancel_Simprocs: CANCEL_SIMPROCS
### theory "HOL-Library.Cancellation"
### 0.463s elapsed time, 1.845s cpu time, 0.178s GC time
Loading theory "HOL-Library.Multiset" (required by "Draft.Akra_Bazzi_MethodMoreTemplates" via "Draft.Akra_Bazzi_Method" via "Draft.Akra_Bazzi" via "Draft.Akra_Bazzi_Real" via "Draft.Akra_Bazzi_Asymptotics" via "Draft.Akra_Bazzi_Library" via "Landau_Symbols.Landau_More" via "Landau_Symbols.Landau_Simprocs" via "Landau_Symbols.Landau_Real_Products" via "Landau_Symbols.Group_Sort")
### theory "HOL-Library.Infinite_Set"
### 0.313s elapsed time, 1.231s cpu time, 0.156s GC time
Loading theory "HOL-Library.Old_Datatype" (required by "Draft.Akra_Bazzi_MethodMoreTemplates" via "Draft.Akra_Bazzi_Method" via "Draft.Master_Theorem" via "HOL-Analysis.Equivalence_Lebesgue_Henstock_Integration" via "HOL-Analysis.Lebesgue_Measure" via "HOL-Analysis.Finite_Product_Measure" via "HOL-Analysis.Binary_Product_Measure" via "HOL-Analysis.Nonnegative_Lebesgue_Integration" via "HOL-Analysis.Measure_Space" via "HOL-Analysis.Measurable" via "HOL-Analysis.Sigma_Algebra" via "HOL-Library.Countable_Set" via "HOL-Library.Countable")
### theory "HOL-Library.FuncSet"
### 0.475s elapsed time, 1.891s cpu time, 0.178s GC time
Loading theory "HOL-Library.Disjoint_Sets" (required by "Draft.Akra_Bazzi_MethodMoreTemplates" via "Draft.Akra_Bazzi_Method" via "Draft.Master_Theorem" via "HOL-Analysis.Equivalence_Lebesgue_Henstock_Integration" via "HOL-Analysis.Lebesgue_Measure" via "HOL-Analysis.Finite_Product_Measure" via "HOL-Analysis.Binary_Product_Measure" via "HOL-Analysis.Nonnegative_Lebesgue_Integration" via "HOL-Analysis.Measure_Space" via "HOL-Analysis.Measurable" via "HOL-Analysis.Sigma_Algebra" via "HOL-Library.Indicator_Function")
### theory "HOL-Library.Nat_Bijection"
### 0.352s elapsed time, 1.385s cpu time, 0.156s GC time
Loading theory "HOL-Library.Stream" (required by "Draft.Akra_Bazzi_MethodMoreTemplates" via "Draft.ExtrEqs")
instantiation
  multiset :: (type) cancel_comm_monoid_add
  zero_multiset == zero_class.zero :: 'a multiset
  minus_multiset == minus :: 'a multiset => 'a multiset => 'a multiset
  plus_multiset == plus :: 'a multiset => 'a multiset => 'a multiset
locale comm_monoid_set
  fixes f :: "'a => 'a => 'a"  (infixl \<open>\<^bold>*\<close> 70)
    and z :: "'a"  (\<open>\<^bold>1\<close>)
  assumes "comm_monoid_set (\<^bold>*) \<^bold>1"
### theory "HOL-Library.Disjoint_Sets"
### 0.316s elapsed time, 1.237s cpu time, 0.212s GC time
Loading theory "HOL-Library.Phantom_Type" (required by "Draft.Akra_Bazzi_MethodMoreTemplates" via "Draft.Akra_Bazzi_Method" via "Draft.Master_Theorem" via "HOL-Analysis.Equivalence_Lebesgue_Henstock_Integration" via "HOL-Analysis.Lebesgue_Measure" via "HOL-Analysis.Finite_Product_Measure" via "HOL-Analysis.Binary_Product_Measure" via "HOL-Analysis.Nonnegative_Lebesgue_Integration" via "HOL-Analysis.Borel_Space" via "HOL-Analysis.Derivative" via "HOL-Analysis.Bounded_Linear_Function" via "HOL-Analysis.Topology_Euclidean_Space" via "HOL-Analysis.Elementary_Normed_Spaces" via "HOL-Analysis.Cartesian_Space" via "HOL-Analysis.Finite_Cartesian_Product" via "HOL-Library.Numeral_Type" via "HOL-Library.Cardinality")
signature OLD_DATATYPE =
  sig
    val check_specs: spec list -> theory -> spec list * Proof.context
    type config = {quiet: bool, strict: bool}
    val default_config: config
    type descr =
       (int * (string * dtyp list * (string * dtyp list) list)) list
    val distinct_lemma: thm
    datatype dtyp
    = DtRec of int | DtTFree of string * sort | DtType of string * dtyp list
    type info =
       {case_cong: thm,
        case_cong_weak: thm,
        case_name: string,
        case_rewrites: thm list,
        descr: descr,
        distinct: thm list,
        exhaust: thm,
        index: int,
        induct: thm,
        inducts: thm list,
        inject: thm list,
        nchotomy: thm,
        rec_names: string list,
        rec_rewrites: thm list, split: thm, split_asm: thm}
    val read_specs: spec_cmd list -> theory -> spec list * Proof.context
    type spec =
       (binding * (string * sort) list * mixfix) *
       (binding * typ list * mixfix) list
    type spec_cmd =
       (binding * (string * string option) list * mixfix) *
       (binding * string list * mixfix) list
  end
structure Old_Datatype: OLD_DATATYPE
### theory "HOL-Library.Old_Datatype"
### 0.643s elapsed time, 2.313s cpu time, 0.790s GC time
Loading theory "HOL-Library.Product_Plus" (required by "Draft.Akra_Bazzi_MethodMoreTemplates" via "Draft.Akra_Bazzi_Method" via "Draft.Master_Theorem" via "HOL-Analysis.Equivalence_Lebesgue_Henstock_Integration" via "HOL-Analysis.Lebesgue_Measure" via "HOL-Analysis.Finite_Product_Measure" via "HOL-Analysis.Binary_Product_Measure" via "HOL-Analysis.Nonnegative_Lebesgue_Integration" via "HOL-Analysis.Borel_Space" via "HOL-Analysis.Derivative" via "HOL-Analysis.Bounded_Linear_Function" via "HOL-Analysis.Topology_Euclidean_Space" via "HOL-Analysis.Elementary_Normed_Spaces" via "HOL-Analysis.Elementary_Metric_Spaces" via "HOL-Analysis.Abstract_Topology_2" via "HOL-Analysis.Elementary_Topology" via "HOL-Analysis.Product_Vector")
instantiation
  prod :: (zero, zero) zero
  zero_prod == zero_class.zero :: 'a * 'b
instantiation
  prod :: (plus, plus) plus
  plus_prod == plus :: 'a * 'b => 'a * 'b => 'a * 'b
instantiation
  prod :: (minus, minus) minus
  minus_prod == minus :: 'a * 'b => 'a * 'b => 'a * 'b
instantiation
  prod :: (uminus, uminus) uminus
  uminus_prod == uminus :: 'a * 'b => 'a * 'b
### theory "HOL-Library.Product_Plus"
### 0.104s elapsed time, 0.406s cpu time, 0.044s GC time
Loading theory "HOL-Library.Product_Order" (required by "Draft.Akra_Bazzi_MethodMoreTemplates" via "Draft.Akra_Bazzi_Method" via "Draft.Master_Theorem" via "HOL-Analysis.Equivalence_Lebesgue_Henstock_Integration" via "HOL-Analysis.Lebesgue_Measure" via "HOL-Analysis.Finite_Product_Measure" via "HOL-Analysis.Binary_Product_Measure" via "HOL-Analysis.Nonnegative_Lebesgue_Integration" via "HOL-Analysis.Borel_Space" via "HOL-Analysis.Ordered_Euclidean_Space")
consts
  shift :: "'a list => 'a stream => 'a stream"
instantiation
  prod :: (ord, ord) ord
  less_eq_prod == less_eq :: 'a * 'b => 'a * 'b => bool
  less_prod == less :: 'a * 'b => 'a * 'b => bool
Proofs for coinductive predicate(s) "streamsp"
  Proving monotonicity ...
instantiation
  prod :: (inf, inf) inf
  inf_prod == inf :: 'a * 'b => 'a * 'b => 'a * 'b
instantiation
  prod :: (sup, sup) sup
  sup_prod == sup :: 'a * 'b => 'a * 'b => 'a * 'b
instantiation
  prod :: (top, top) top
  top_prod == top :: 'a * 'b
instantiation
  prod :: (bot, bot) bot
  bot_prod == bot :: 'a * 'b
instantiation
  prod :: (Inf, Inf) Inf
  Inf_prod == Inf :: ('a * 'b) set => 'a * 'b
consts
  snth :: "'a stream => nat => 'a"
instantiation
  prod :: (Sup, Sup) Sup
  Sup_prod == Sup :: ('a * 'b) set => 'a * 'b
consts
  stake :: "nat => 'a stream => 'a list"
consts
  sdrop :: "nat => 'a stream => 'a stream"
### theory "HOL-Library.Product_Order"
### 0.223s elapsed time, 0.884s cpu time, 0.092s GC time
Loading theory "HOL-Library.Set_Algebras" (required by "Draft.Akra_Bazzi_MethodMoreTemplates" via "Draft.ExtrEqs" via "HOL-Library.BigO")
consts
  sfilter :: "('a => bool) => 'a stream => 'a stream"
### Partially applied constant "Multiset.inter_mset" on left hand side of equation, in theorem:
### semilattice_inf.Inf_fin (\<inter>#) (set (?x # ?xs)) ==
### fold (\<inter>#) ?xs ?x
instantiation
  set :: (plus) plus
  plus_set == plus :: 'a set => 'a set => 'a set
instantiation
  set :: (times) times
  times_set == times :: 'a set => 'a set => 'a set
instantiation
  set :: (zero) zero
  zero_set == zero_class.zero :: 'a set
consts
  cycle :: "'a list => 'a stream"
instantiation
  set :: (one) one
  one_set == one_class.one :: 'a set
### Partially applied constant "Multiset.union_mset" on left hand side of equation, in theorem:
### semilattice_sup.Sup_fin (\<union>#) (set (?x # ?xs)) ==
### fold (\<union>#) ?xs ?x
consts
  siterate :: "('a => 'a) => 'a => 'a stream"
consts
  flat :: "'a list stream => 'a stream"
### theory "HOL-Library.Phantom_Type"
### 0.815s elapsed time, 3.002s cpu time, 0.809s GC time
Loading theory "HOL-Library.Cardinality" (required by "Draft.Akra_Bazzi_MethodMoreTemplates" via "Draft.Akra_Bazzi_Method" via "Draft.Master_Theorem" via "HOL-Analysis.Equivalence_Lebesgue_Henstock_Integration" via "HOL-Analysis.Lebesgue_Measure" via "HOL-Analysis.Finite_Product_Measure" via "HOL-Analysis.Binary_Product_Measure" via "HOL-Analysis.Nonnegative_Lebesgue_Integration" via "HOL-Analysis.Borel_Space" via "HOL-Analysis.Derivative" via "HOL-Analysis.Bounded_Linear_Function" via "HOL-Analysis.Topology_Euclidean_Space" via "HOL-Analysis.Elementary_Normed_Spaces" via "HOL-Analysis.Cartesian_Space" via "HOL-Analysis.Finite_Cartesian_Product" via "HOL-Library.Numeral_Type")
consts
  sinterleave :: "'a stream => 'a stream => 'a stream"
### theory "HOL-Library.Set_Algebras"
### 0.259s elapsed time, 1.019s cpu time, 0.195s GC time
Loading theory "HOL-Library.Tree" (required by "Draft.Akra_Bazzi_MethodMoreTemplates" via "Draft.ExtrEqs" via "Draft.Templates")
### Additional type variable(s) in locale specification "CARD_1": 'a
consts
  szip :: "'a stream => 'b stream => ('a * 'b) stream"
consts
  smap2 :: "('a => 'b => 'c) => 'a stream => 'b stream => 'c stream"
class CARD_1 = type +
  assumes "CARD_1": "CARD('a) = 1"
### theory "HOL-Library.Stream"
### 1.216s elapsed time, 4.568s cpu time, 1.122s GC time
Loading theory "HOL-Library.Countable" (required by "Draft.Akra_Bazzi_MethodMoreTemplates" via "Draft.Akra_Bazzi_Method" via "Draft.Master_Theorem" via "HOL-Analysis.Equivalence_Lebesgue_Henstock_Integration" via "HOL-Analysis.Lebesgue_Measure" via "HOL-Analysis.Finite_Product_Measure" via "HOL-Analysis.Binary_Product_Measure" via "HOL-Analysis.Nonnegative_Lebesgue_Integration" via "HOL-Analysis.Measure_Space" via "HOL-Analysis.Measurable" via "HOL-Analysis.Sigma_Algebra" via "HOL-Library.Countable_Set")
signature MULTISET_SIMPROCS =
  sig
    val subset_cancel_msets: Proof.context -> cterm -> thm option
    val subseteq_cancel_msets: Proof.context -> cterm -> thm option
  end
structure Multiset_Simprocs: MULTISET_SIMPROCS
instantiation
  multiset :: (type) Inf
  Inf_multiset == Inf :: 'a multiset set => 'a multiset
instantiation
  multiset :: (type) Sup
  Sup_multiset == Sup :: 'a multiset set => 'a multiset
### Additional type variable(s) in locale specification "card2": 'a
class card2 = finite +
  assumes "two_le_card": "2 <= CARD('a)"
class finite_UNIV = type +
  fixes finite_UNIV :: "('a, bool) phantom"
  assumes "finite_UNIV": "finite_UNIV = Phantom('a) (finite UNIV)"
instantiation
  multiset :: (type) size
  size_multiset == size :: 'a multiset => nat
class card_UNIV = finite_UNIV +
  fixes card_UNIV :: "('a, nat) phantom"
  assumes "card_UNIV": "card_UNIV_class.card_UNIV = Phantom('a) CARD('a)"
instantiation
  nat :: card_UNIV
  card_UNIV_nat == card_UNIV_class.card_UNIV :: (nat, nat) phantom
  finite_UNIV_nat == finite_UNIV :: (nat, bool) phantom
instantiation
  int :: card_UNIV
  card_UNIV_int == card_UNIV_class.card_UNIV :: (int, nat) phantom
  finite_UNIV_int == finite_UNIV :: (int, bool) phantom
instantiation
  natural :: card_UNIV
  card_UNIV_natural == card_UNIV_class.card_UNIV :: (natural, nat) phantom
  finite_UNIV_natural == finite_UNIV :: (natural, bool) phantom
instantiation
  integer :: card_UNIV
  card_UNIV_integer == card_UNIV_class.card_UNIV :: (integer, nat) phantom
  finite_UNIV_integer == finite_UNIV :: (integer, bool) phantom
locale comp_fun_commute
  fixes f :: "'a => 'b => 'b"
  assumes "comp_fun_commute f"
instantiation
  list :: (type) card_UNIV
  card_UNIV_list == card_UNIV_class.card_UNIV :: ('a list, nat) phantom
  finite_UNIV_list == finite_UNIV :: ('a list, bool) phantom
instantiation
  unit :: card_UNIV
  card_UNIV_unit == card_UNIV_class.card_UNIV :: (unit, nat) phantom
  finite_UNIV_unit == finite_UNIV :: (unit, bool) phantom
instantiation
  bool :: card_UNIV
  card_UNIV_bool == card_UNIV_class.card_UNIV :: (bool, nat) phantom
  finite_UNIV_bool == finite_UNIV :: (bool, bool) phantom
instantiation
  char :: card_UNIV
  card_UNIV_char == card_UNIV_class.card_UNIV :: (char, nat) phantom
  finite_UNIV_char == finite_UNIV :: (char, bool) phantom
instantiation
  prod :: (finite_UNIV, finite_UNIV) finite_UNIV
  finite_UNIV_prod == finite_UNIV :: ('a * 'b, bool) phantom
instantiation
  prod :: (card_UNIV, card_UNIV) card_UNIV
  card_UNIV_prod == card_UNIV_class.card_UNIV :: ('a * 'b, nat) phantom
consts
  mset :: "'a list => 'a multiset"
### Additional type variable(s) in locale specification "countable": 'a
instantiation
  sum :: (finite_UNIV, finite_UNIV) finite_UNIV
  finite_UNIV_sum == finite_UNIV :: ('a + 'b, bool) phantom
instantiation
  sum :: (card_UNIV, card_UNIV) card_UNIV
  card_UNIV_sum == card_UNIV_class.card_UNIV :: ('a + 'b, nat) phantom
instantiation
  fun :: (finite_UNIV, card_UNIV) finite_UNIV
  finite_UNIV_fun == finite_UNIV :: ('a => 'b, bool) phantom
instantiation
  fun :: (card_UNIV, card_UNIV) card_UNIV
  card_UNIV_fun == card_UNIV_class.card_UNIV :: ('a => 'b, nat) phantom
instantiation
  option :: (finite_UNIV) finite_UNIV
  finite_UNIV_option == finite_UNIV :: ('a option, bool) phantom
instantiation
  option :: (card_UNIV) card_UNIV
  card_UNIV_option == card_UNIV_class.card_UNIV :: ('a option, nat) phantom
class countable = type +
  assumes "ex_inj": "EX to_nat. inj to_nat"
instantiation
  String.literal :: card_UNIV
  card_UNIV_literal == card_UNIV_class.card_UNIV ::
    (String.literal, nat) phantom
  finite_UNIV_literal == finite_UNIV :: (String.literal, bool) phantom
consts
  left :: "'a tree => 'a tree"
instantiation
  set :: (finite_UNIV) finite_UNIV
  finite_UNIV_set == finite_UNIV :: ('a set, bool) phantom
consts
  right :: "'a tree => 'a tree"
instantiation
  set :: (card_UNIV) card_UNIV
  card_UNIV_set == card_UNIV_class.card_UNIV :: ('a set, nat) phantom
instantiation
  Enum.finite_1 :: card_UNIV
  card_UNIV_finite_1 == card_UNIV_class.card_UNIV ::
    (Enum.finite_1, nat) phantom
  finite_UNIV_finite_1 == finite_UNIV :: (Enum.finite_1, bool) phantom
instantiation
  Enum.finite_2 :: card_UNIV
  card_UNIV_finite_2 == card_UNIV_class.card_UNIV ::
    (Enum.finite_2, nat) phantom
  finite_UNIV_finite_2 == finite_UNIV :: (Enum.finite_2, bool) phantom
instantiation
  Enum.finite_3 :: card_UNIV
  card_UNIV_finite_3 == card_UNIV_class.card_UNIV ::
    (Enum.finite_3, nat) phantom
  finite_UNIV_finite_3 == finite_UNIV :: (Enum.finite_3, bool) phantom
Found termination order: "size <*mlex*> {}"
instantiation
  Enum.finite_4 :: card_UNIV
  card_UNIV_finite_4 == card_UNIV_class.card_UNIV ::
    (Enum.finite_4, nat) phantom
  finite_UNIV_finite_4 == finite_UNIV :: (Enum.finite_4, bool) phantom
instantiation
  Enum.finite_5 :: card_UNIV
  card_UNIV_finite_5 == card_UNIV_class.card_UNIV ::
    (Enum.finite_5, nat) phantom
  finite_UNIV_finite_5 == finite_UNIV :: (Enum.finite_5, bool) phantom
### theory "HOL-Library.Cardinality"
### 0.819s elapsed time, 3.228s cpu time, 0.395s GC time
Loading theory "HOL-Library.Numeral_Type" (required by "Draft.Akra_Bazzi_MethodMoreTemplates" via "Draft.Akra_Bazzi_Method" via "Draft.Master_Theorem" via "HOL-Analysis.Equivalence_Lebesgue_Henstock_Integration" via "HOL-Analysis.Lebesgue_Measure" via "HOL-Analysis.Finite_Product_Measure" via "HOL-Analysis.Binary_Product_Measure" via "HOL-Analysis.Nonnegative_Lebesgue_Integration" via "HOL-Analysis.Borel_Space" via "HOL-Analysis.Derivative" via "HOL-Analysis.Bounded_Linear_Function" via "HOL-Analysis.Topology_Euclidean_Space" via "HOL-Analysis.Elementary_Normed_Spaces" via "HOL-Analysis.Cartesian_Space" via "HOL-Analysis.Finite_Cartesian_Product")
class linorder = order +
  assumes "linear": "!!x y. x <= y | y <= x"
Found termination order: "size <*mlex*> {}"
Proofs for inductive predicate(s) "finite_item"
  Proving monotonicity ...
Found termination order: "size <*mlex*> {}"
locale comm_monoid_mset
  fixes f :: "'a => 'a => 'a"  (infixl \<open>\<^bold>*\<close> 70)
    and z :: "'a"  (\<open>\<^bold>1\<close>)
  assumes "comm_monoid_mset (\<^bold>*) \<^bold>1"
class height = type +
  fixes height :: "'a => nat"
instantiation
  tree :: (type) height
  height_tree == height :: 'a tree => nat
instantiation
  num1 :: CARD_1
instantiation
  num1 :: {comm_monoid_mult,numeral,comm_ring}
  uminus_num1 == uminus :: num1 => num1
  zero_num1 == zero_class.zero :: num1
  minus_num1 == minus :: num1 => num1 => num1
  plus_num1 == plus :: num1 => num1 => num1
  one_num1 == one_class.one :: num1
  times_num1 == times :: num1 => num1 => num1
instantiation
  num1 :: linorder
  less_eq_num1 == less_eq :: num1 => num1 => bool
  less_num1 == less :: num1 => num1 => bool
Found termination order: "size <*mlex*> {}"
locale mod_type
  fixes n :: "int"
    and Rep :: "'a => int"
    and Abs :: "int => 'a"
  assumes "mod_type n Rep Abs"
class comm_monoid_add = ab_semigroup_add + monoid_add +
  assumes "add_0": "!!a. (0::'a) + a = a"
locale mod_ring
  fixes n :: "int"
    and Rep :: "'a => int"
    and Abs :: "int => 'a"
  assumes "mod_ring n Rep Abs"
val old_countable_datatype_tac = fn: Proof.context -> int -> tactic
class comm_monoid_add = ab_semigroup_add + monoid_add +
  assumes "add_0": "!!a. (0::'a) + a = a"
instantiation
  bit0 :: (finite) {minus,one,plus,times,uminus,zero}
  bit1 :: (finite) {minus,one,plus,times,uminus,zero}
  zero_bit0 == zero_class.zero :: 'a bit0
  uminus_bit0 == uminus :: 'a bit0 => 'a bit0
  times_bit0 == times :: 'a bit0 => 'a bit0 => 'a bit0
  plus_bit0 == plus :: 'a bit0 => 'a bit0 => 'a bit0
  one_bit0 == one_class.one :: 'a bit0
  minus_bit0 == minus :: 'a bit0 => 'a bit0 => 'a bit0
  zero_bit1 == zero_class.zero :: 'a bit1
  uminus_bit1 == uminus :: 'a bit1 => 'a bit1
  times_bit1 == times :: 'a bit1 => 'a bit1 => 'a bit1
  plus_bit1 == plus :: 'a bit1 => 'a bit1 => 'a bit1
  one_bit1 == one_class.one :: 'a bit1
  minus_bit1 == minus :: 'a bit1 => 'a bit1 => 'a bit1
Found termination order: "size <*mlex*> {}"
class canonically_ordered_monoid_add = ordered_comm_monoid_add +
  assumes "le_iff_add": "!!a b. (a <= b) = (EX c. b = a + c)"
### ML warning (line 93 of "~~/src/HOL/Tools/BNF/bnf_lfp_countable.ML"):
### Pattern is not exhaustive.
### ML warning (line 139 of "~~/src/HOL/Tools/BNF/bnf_lfp_countable.ML"):
### Pattern is not exhaustive.
### ML warning (line 143 of "~~/src/HOL/Tools/BNF/bnf_lfp_countable.ML"):
### Matches are not exhaustive.
### ML warning (line 145 of "~~/src/HOL/Tools/BNF/bnf_lfp_countable.ML"):
### Matches are not exhaustive.
### ML warning (line 156 of "~~/src/HOL/Tools/BNF/bnf_lfp_countable.ML"):
### Pattern is not exhaustive.
signature BNF_LFP_COUNTABLE =
  sig
    val countable_datatype_tac: Proof.context -> tactic
    val derive_encode_injectives_thms:
       Proof.context -> string list -> thm list
  end
structure BNF_LFP_Countable: BNF_LFP_COUNTABLE
val countable_datatype_tac = fn: Proof.context -> thm -> thm Seq.seq
val countable_tac = fn: Proof.context -> int -> tactic
Found termination order: "size <*mlex*> {}"
instantiation
  bit0 :: (finite) linorder
  bit1 :: (finite) linorder
  less_eq_bit0 == less_eq :: 'a bit0 => 'a bit0 => bool
  less_bit0 == less :: 'a bit0 => 'a bit0 => bool
  less_eq_bit1 == less_eq :: 'a bit1 => 'a bit1 => bool
  less_bit1 == less :: 'a bit1 => 'a bit1 => bool
Found termination order: "size <*mlex*> {}"
instantiation
  num0 :: equal
  equal_num0 == equal_class.equal :: num0 => num0 => bool
Found termination order: "size <*mlex*> {}"
instantiation
  num1 :: equal
  equal_num1 == equal_class.equal :: num1 => num1 => bool
instantiation
  num1 :: enum
  enum_num1 == enum_class.enum :: num1 list
  enum_all_num1 == enum_class.enum_all :: (num1 => bool) => bool
  enum_ex_num1 == enum_class.enum_ex :: (num1 => bool) => bool
instantiation
  num0 :: card_UNIV
  num1 :: card_UNIV
  card_UNIV_num0 == card_UNIV_class.card_UNIV :: (num0, nat) phantom
  finite_UNIV_num0 == finite_UNIV :: (num0, bool) phantom
  card_UNIV_num1 == card_UNIV_class.card_UNIV :: (num1, nat) phantom
  finite_UNIV_num1 == finite_UNIV :: (num1, bool) phantom
class comm_monoid_mult = ab_semigroup_mult + monoid_mult + dvd +
  assumes "mult_1": "!!a. (1::'a) * a = a"
Found termination order: "size <*mlex*> {}"
### theory "HOL-Library.Countable"
### 1.343s elapsed time, 5.272s cpu time, 0.668s GC time
Loading theory "HOL-Library.Countable_Set" (required by "Draft.Akra_Bazzi_MethodMoreTemplates" via "Draft.Akra_Bazzi_Method" via "Draft.Master_Theorem" via "HOL-Analysis.Equivalence_Lebesgue_Henstock_Integration" via "HOL-Analysis.Lebesgue_Measure" via "HOL-Analysis.Finite_Product_Measure" via "HOL-Analysis.Binary_Product_Measure" via "HOL-Analysis.Nonnegative_Lebesgue_Integration" via "HOL-Analysis.Measure_Space" via "HOL-Analysis.Measurable" via "HOL-Analysis.Sigma_Algebra")
instantiation
  bit0 :: (finite) equal
  bit1 :: (finite) equal
  equal_bit0 == equal_class.equal :: 'a bit0 => 'a bit0 => bool
  equal_bit1 == equal_class.equal :: 'a bit1 => 'a bit1 => bool
instantiation
  bit0 :: (finite) enum
  enum_bit0 == enum_class.enum :: 'a bit0 list
  enum_all_bit0 == enum_class.enum_all :: ('a bit0 => bool) => bool
  enum_ex_bit0 == enum_class.enum_ex :: ('a bit0 => bool) => bool
Found termination order: "size <*mlex*> {}"
instantiation
  bit1 :: (finite) enum
  enum_bit1 == enum_class.enum :: 'a bit1 list
  enum_all_bit1 == enum_class.enum_all :: ('a bit1 => bool) => bool
  enum_ex_bit1 == enum_class.enum_ex :: ('a bit1 => bool) => bool
instantiation
  bit0 :: (finite) finite_UNIV
  bit1 :: (finite) finite_UNIV
  finite_UNIV_bit0 == finite_UNIV :: ('a bit0, bool) phantom
  finite_UNIV_bit1 == finite_UNIV :: ('a bit1, bool) phantom
instantiation
  bit0 :: ({card_UNIV,finite}) card_UNIV
  bit1 :: ({card_UNIV,finite}) card_UNIV
  card_UNIV_bit0 == card_UNIV_class.card_UNIV :: ('a bit0, nat) phantom
  card_UNIV_bit1 == card_UNIV_class.card_UNIV :: ('a bit1, nat) phantom
Found termination order: "(%p. size (fst p)) <*mlex*> {}"
### theory "HOL-Library.Numeral_Type"
### 0.839s elapsed time, 3.292s cpu time, 0.443s GC time
Loading theory "HOL-Analysis.Metric_Arith" (required by "Draft.Akra_Bazzi_MethodMoreTemplates" via "Draft.Akra_Bazzi_Method" via "Draft.Master_Theorem" via "HOL-Analysis.Equivalence_Lebesgue_Henstock_Integration" via "HOL-Analysis.Lebesgue_Measure" via "HOL-Analysis.Finite_Product_Measure" via "HOL-Analysis.Binary_Product_Measure" via "HOL-Analysis.Nonnegative_Lebesgue_Integration" via "HOL-Analysis.Borel_Space" via "HOL-Analysis.Derivative" via "HOL-Analysis.Bounded_Linear_Function" via "HOL-Analysis.Topology_Euclidean_Space" via "HOL-Analysis.Elementary_Normed_Spaces" via "HOL-Analysis.Elementary_Metric_Spaces")
Found termination order: "size <*mlex*> {}"
Found termination order: "(%p. size (snd p)) <*mlex*> {}"
locale comm_monoid_set
  fixes f :: "'a => 'a => 'a"  (infixl \<open>\<^bold>*\<close> 70)
    and z :: "'a"  (\<open>\<^bold>1\<close>)
  assumes "comm_monoid_set (\<^bold>*) \<^bold>1"
### theory "HOL-Library.Countable_Set"
### 0.489s elapsed time, 1.923s cpu time, 0.176s GC time
Loading theory "HOL-Library.Countable_Complete_Lattices" (required by "Draft.Akra_Bazzi_MethodMoreTemplates" via "Draft.Akra_Bazzi_Method" via "Draft.Master_Theorem" via "HOL-Analysis.Equivalence_Lebesgue_Henstock_Integration" via "HOL-Analysis.Lebesgue_Measure" via "HOL-Analysis.Finite_Product_Measure" via "HOL-Analysis.Binary_Product_Measure" via "HOL-Analysis.Nonnegative_Lebesgue_Integration" via "HOL-Analysis.Measure_Space" via "HOL-Analysis.Measurable" via "HOL-Analysis.Sigma_Algebra" via "HOL-Library.Extended_Nonnegative_Real" via "HOL-Library.Extended_Real" via "HOL-Library.Extended_Nat" via "HOL-Library.Order_Continuity")
Found termination order: "size <*mlex*> {}"
class linorder = order +
  assumes "linear": "!!x y. x <= y | y <= x"
### theory "HOL-Library.Tree"
### 2.203s elapsed time, 8.650s cpu time, 0.996s GC time
Loading theory "Draft.Templates" (required by "Draft.Akra_Bazzi_MethodMoreTemplates" via "Draft.ExtrEqs")
signature METRIC_ARITH =
  sig
    val argo_timeout: real Config.T
    val metric_arith_tac: Proof.context -> int -> tactic
    val trace: bool Config.T
  end
structure Metric_Arith: METRIC_ARITH
### theory "HOL-Analysis.Metric_Arith"
### 0.662s elapsed time, 2.593s cpu time, 0.259s GC time
Loading theory "HOL-Library.Set_Idioms" (required by "Draft.Akra_Bazzi_MethodMoreTemplates" via "Draft.Akra_Bazzi_Method" via "Draft.Master_Theorem" via "HOL-Analysis.Equivalence_Lebesgue_Henstock_Integration" via "HOL-Analysis.Lebesgue_Measure" via "HOL-Analysis.Finite_Product_Measure" via "HOL-Analysis.Binary_Product_Measure" via "HOL-Analysis.Nonnegative_Lebesgue_Integration" via "HOL-Analysis.Borel_Space" via "HOL-Analysis.Derivative" via "HOL-Analysis.Bounded_Linear_Function" via "HOL-Analysis.Topology_Euclidean_Space" via "HOL-Analysis.Elementary_Normed_Spaces" via "HOL-Analysis.Elementary_Metric_Spaces" via "HOL-Analysis.Abstract_Topology_2" via "HOL-Analysis.Elementary_Topology")
datatype template_term
=
     t_empty
   | template_app of template_term * template_term
   | template_hole of int
   | template_var of int
datatype sign
= equals | greater_equals | greater_than | less_equals | less_than
datatype template
=
     template_bimplication of template * template
   | template_dunno
   | template_equation of template_term * template_term
   | template_implication of template list * template
   | template_inequation of sign * template_term * template_term
   | template_negation of template
   | template_predicate of template_term
constructor t_empty: template_term
constructor template_app: template_term * template_term -> template_term
constructor template_hole: int -> template_term
constructor template_var: int -> template_term
constructor equals: sign
constructor greater_equals: sign
constructor greater_than: sign
constructor less_equals: sign
constructor less_than: sign
constructor template_bimplication: template * template -> template
constructor template_dunno: template
constructor template_equation: template_term * template_term -> template
constructor template_implication: template list * template -> template
constructor template_inequation:
   sign * template_term * template_term -> template
constructor template_negation: template -> template
constructor template_predicate: template_term -> template
val vfs = fn: term -> (indexname * typ) list * (string * typ) list
val indexOf = fn: ''a list -> ''a -> int -> int
val has_eq = fn: term -> bool
val term2template = fn:
   (indexname * typ) list -> (string * typ) list -> term -> template_term
val lemma2predicate = fn: term -> term -> template
val makeTemplatewithContext = fn: term -> term -> template
val lemma2template = fn: term -> template
val thm2template = fn: thm -> template
val tterm2string = fn: template_term -> string
val template2string = fn: template -> string
val t = "height ?t <= size ?t": thm
val th =
   Const ("HOL.Trueprop", "bool => prop") $
     (Const ("Orderings.ord_class.less_eq", "nat => nat => bool") $
       (Const ("Tree.height_class.height", "?'a tree => nat") $
         Var (("t", 0), "?'a tree")) $
       (Const ("Nat.size_class.size", "?'a tree => nat") $
         Var (("t", 0), "?'a tree"))):
   term
instantiation
  multiset :: (preorder) order
  less_eq_multiset == less_eq :: 'a multiset => 'a multiset => bool
  less_multiset == less :: 'a multiset => 'a multiset => bool
### theory "Draft.Templates"
### 0.068s elapsed time, 0.272s cpu time, 0.000s GC time
Loading theory "Draft.Eval_Numeral" (required by "Draft.Akra_Bazzi_MethodMoreTemplates" via "Draft.Akra_Bazzi_Method")
instantiation
  multiset :: (preorder) ordered_ab_semigroup_add
Proofs for inductive predicate(s) "pw_leq"
  Proving monotonicity ...
signature EVAL_NUMERAL =
  sig val eval_numeral_tac: Proof.context -> int -> tactic end
structure Eval_Numeral: EVAL_NUMERAL
### theory "Draft.Eval_Numeral"
### 0.164s elapsed time, 0.646s cpu time, 0.029s GC time
Loading theory "HOL-Analysis.Continuum_Not_Denumerable" (required by "Draft.Akra_Bazzi_MethodMoreTemplates" via "Draft.Akra_Bazzi_Method" via "Draft.Master_Theorem" via "HOL-Analysis.Equivalence_Lebesgue_Henstock_Integration" via "HOL-Analysis.Homeomorphism" via "HOL-Analysis.Homotopy")
class countable_complete_lattice = Inf + Sup + lattice + bot + top +
  assumes "ccInf_lower": "!!A x. [| countable A; x : A |] ==> Inf A <= x"
  assumes
    "ccInf_greatest":
      "!!A z. [| countable A; !!x. x : A ==> z <= x |] ==> z <= Inf A"
  assumes "ccSup_upper": "!!A x. [| countable A; x : A |] ==> x <= Sup A"
  assumes
    "ccSup_least":
      "!!A z. [| countable A; !!x. x : A ==> x <= z |] ==> Sup A <= z"
  assumes "ccInf_empty": "Inf {} = top"
  assumes "ccSup_empty": "Sup {} = bot"
### theory "HOL-Library.Set_Idioms"
### 0.609s elapsed time, 2.228s cpu time, 1.249s GC time
Loading theory "HOL-Analysis.Abstract_Topology" (required by "Draft.Akra_Bazzi_MethodMoreTemplates" via "Draft.Akra_Bazzi_Method" via "Draft.Master_Theorem" via "HOL-Analysis.Equivalence_Lebesgue_Henstock_Integration" via "HOL-Analysis.Lebesgue_Measure" via "HOL-Analysis.Finite_Product_Measure" via "HOL-Analysis.Binary_Product_Measure" via "HOL-Analysis.Nonnegative_Lebesgue_Integration" via "HOL-Analysis.Borel_Space" via "HOL-Analysis.Derivative" via "HOL-Analysis.Bounded_Linear_Function" via "HOL-Analysis.Topology_Euclidean_Space" via "HOL-Analysis.Elementary_Normed_Spaces" via "HOL-Analysis.Elementary_Metric_Spaces" via "HOL-Analysis.Abstract_Topology_2")
Found termination order: "(%p. length (fst p)) <*mlex*> {}"
instantiation
  multiset :: (equal) equal
  equal_multiset == equal_class.equal :: 'a multiset => 'a multiset => bool
instantiation
  multiset :: (random) random
  random_multiset == random_class.random ::
    natural
    => natural * natural
       => ('a multiset * (unit => term)) * natural * natural
instantiation
  multiset :: (full_exhaustive) full_exhaustive
  full_exhaustive_multiset == full_exhaustive_class.full_exhaustive ::
    ('a multiset * (unit => term) => (bool * term list) option)
    => natural => (bool * term list) option
Proofs for inductive predicate(s) "pred_mset"
  Proving monotonicity ...
### theory "HOL-Analysis.Continuum_Not_Denumerable"
### 0.308s elapsed time, 1.202s cpu time, 0.147s GC time
Loading theory "HOL-Analysis.Inner_Product" (required by "Draft.Akra_Bazzi_MethodMoreTemplates" via "Draft.Akra_Bazzi_Method" via "Draft.Master_Theorem" via "HOL-Analysis.Equivalence_Lebesgue_Henstock_Integration" via "HOL-Analysis.Lebesgue_Measure" via "HOL-Analysis.Finite_Product_Measure" via "HOL-Analysis.Binary_Product_Measure" via "HOL-Analysis.Nonnegative_Lebesgue_Integration" via "HOL-Analysis.Borel_Space" via "HOL-Analysis.Derivative" via "HOL-Analysis.Bounded_Linear_Function" via "HOL-Analysis.Topology_Euclidean_Space" via "HOL-Analysis.Elementary_Normed_Spaces" via "HOL-Analysis.Cartesian_Space" via "HOL-Analysis.Finite_Cartesian_Product" via "HOL-Analysis.Euclidean_Space")
Proofs for inductive predicate(s) "rel_mset'"
  Proving monotonicity ...
### theory "HOL-Library.Multiset"
### 4.430s elapsed time, 17.033s cpu time, 3.528s GC time
Loading theory "HOL-Analysis.L2_Norm" (required by "Draft.Akra_Bazzi_MethodMoreTemplates" via "Draft.Akra_Bazzi_Method" via "Draft.Master_Theorem" via "HOL-Analysis.Equivalence_Lebesgue_Henstock_Integration" via "HOL-Analysis.Lebesgue_Measure" via "HOL-Analysis.Finite_Product_Measure" via "HOL-Analysis.Binary_Product_Measure" via "HOL-Analysis.Nonnegative_Lebesgue_Integration" via "HOL-Analysis.Borel_Space" via "HOL-Analysis.Derivative" via "HOL-Analysis.Bounded_Linear_Function" via "HOL-Analysis.Topology_Euclidean_Space" via "HOL-Analysis.Elementary_Normed_Spaces" via "HOL-Analysis.Cartesian_Space" via "HOL-Analysis.Finite_Cartesian_Product" via "HOL-Analysis.Euclidean_Space")
### theory "HOL-Analysis.L2_Norm"
### 0.109s elapsed time, 0.520s cpu time, 0.043s GC time
Loading theory "HOL-Analysis.Operator_Norm" (required by "Draft.Akra_Bazzi_MethodMoreTemplates" via "Draft.Akra_Bazzi_Method" via "Draft.Master_Theorem" via "HOL-Analysis.Equivalence_Lebesgue_Henstock_Integration" via "HOL-Analysis.Lebesgue_Measure" via "HOL-Analysis.Finite_Product_Measure" via "HOL-Analysis.Binary_Product_Measure" via "HOL-Analysis.Nonnegative_Lebesgue_Integration" via "HOL-Analysis.Borel_Space" via "HOL-Analysis.Derivative" via "HOL-Analysis.Bounded_Linear_Function")
### theory "HOL-Analysis.Operator_Norm"
### 0.120s elapsed time, 0.499s cpu time, 0.061s GC time
Loading theory "HOL-Analysis.Product_Vector" (required by "Draft.Akra_Bazzi_MethodMoreTemplates" via "Draft.Akra_Bazzi_Method" via "Draft.Master_Theorem" via "HOL-Analysis.Equivalence_Lebesgue_Henstock_Integration" via "HOL-Analysis.Lebesgue_Measure" via "HOL-Analysis.Finite_Product_Measure" via "HOL-Analysis.Binary_Product_Measure" via "HOL-Analysis.Nonnegative_Lebesgue_Integration" via "HOL-Analysis.Borel_Space" via "HOL-Analysis.Derivative" via "HOL-Analysis.Bounded_Linear_Function" via "HOL-Analysis.Topology_Euclidean_Space" via "HOL-Analysis.Elementary_Normed_Spaces" via "HOL-Analysis.Elementary_Metric_Spaces" via "HOL-Analysis.Abstract_Topology_2" via "HOL-Analysis.Elementary_Topology")
class real_inner = dist_norm + real_vector + sgn_div_norm +
  uniformity_dist + open_uniformity +
  fixes inner :: "'a => 'a => real"
  assumes "inner_commute": "!!x y. inner x y = inner y x"
    and "inner_add_left": "!!x y z. inner (x + y) z = inner x z + inner y z"
    and
    "inner_scaleR_left": "!!r x y. inner (r *\<^sub>R x) y = r * inner x y"
    and "inner_ge_zero": "!!x. 0 <= inner x x"
    and "inner_eq_zero_iff": "!!x. (inner x x = 0) = (x = (0::'a))"
    and "norm_eq_sqrt_inner": "!!x. norm x = sqrt (inner x x)"
locale module_prod
  fixes s1 :: "'a => 'b => 'b"
    and s2 :: "'a => 'c => 'c"
  assumes "module_prod s1 s2"
class countable_complete_distrib_lattice = countable_complete_lattice +
  assumes
    "sup_ccInf": "!!B a. countable B ==> sup a (Inf B) = Inf (sup a ` B)"
  assumes
    "inf_ccSup": "!!B a. countable B ==> inf a (Sup B) = Sup (inf a ` B)"
locale vector_space_prod
  fixes s1 :: "'a => 'b => 'b"  (infixr \<open>*a\<close> 75)
    and s2 :: "'a => 'c => 'c"  (infixr \<open>*b\<close> 75)
  assumes "vector_space_prod (*a) (*b)"
### Cannot skip proof of schematic goal statement
instantiation
  prod :: (real_vector, real_vector) real_vector
  scaleR_prod == scaleR :: real => 'a * 'b => 'a * 'b
### Cannot skip proof of schematic goal statement
instantiation
  prod :: (metric_space, metric_space) dist
  dist_prod == dist :: 'a * 'b => 'a * 'b => real
instantiation
  prod :: (uniformity, uniformity) uniformity
  uniformity_prod == uniformity :: (('a * 'b) * 'a * 'b) filter
instantiation
  prod :: (uniform_space, uniform_space) uniform_space
instantiation
  prod :: (metric_space, metric_space) uniformity_dist
instantiation
  prod :: (metric_space, metric_space) metric_space
instantiation
  prod :: (real_normed_vector, real_normed_vector) real_normed_vector
  sgn_prod == sgn :: 'a * 'b => 'a * 'b
  norm_prod == norm :: 'a * 'b => real
instantiation
  real :: real_inner
  inner_real == inner :: real => real => real
instantiation
  complex :: real_inner
  inner_complex == inner :: complex => complex => real
bundle inner_syntax
bundle no_inner_syntax
### theory "HOL-Analysis.Inner_Product"
### 1.490s elapsed time, 5.817s cpu time, 1.648s GC time
Loading theory "HOL-Library.BigO" (required by "Draft.Akra_Bazzi_MethodMoreTemplates" via "Draft.ExtrEqs")
locale finite_dimensional_vector_space_prod
  fixes s1 :: "'a => 'b => 'b"  (infixr \<open>*a\<close> 75)
    and s2 :: "'a => 'c => 'c"  (infixr \<open>*b\<close> 75)
    and B1 :: "'b set"
    and B2 :: "'c set"
  assumes "finite_dimensional_vector_space_prod (*a) (*b) B1 B2"
### theory "HOL-Analysis.Product_Vector"
### 1.338s elapsed time, 5.100s cpu time, 1.550s GC time
Loading theory "HOL-Analysis.Elementary_Topology" (required by "Draft.Akra_Bazzi_MethodMoreTemplates" via "Draft.Akra_Bazzi_Method" via "Draft.Master_Theorem" via "HOL-Analysis.Equivalence_Lebesgue_Henstock_Integration" via "HOL-Analysis.Lebesgue_Measure" via "HOL-Analysis.Finite_Product_Measure" via "HOL-Analysis.Binary_Product_Measure" via "HOL-Analysis.Nonnegative_Lebesgue_Integration" via "HOL-Analysis.Borel_Space" via "HOL-Analysis.Derivative" via "HOL-Analysis.Bounded_Linear_Function" via "HOL-Analysis.Topology_Euclidean_Space" via "HOL-Analysis.Elementary_Normed_Spaces" via "HOL-Analysis.Elementary_Metric_Spaces" via "HOL-Analysis.Abstract_Topology_2")
### theory "HOL-Library.Countable_Complete_Lattices"
### 3.019s elapsed time, 11.668s cpu time, 3.217s GC time
Loading theory "HOL-Analysis.Euclidean_Space" (required by "Draft.Akra_Bazzi_MethodMoreTemplates" via "Draft.Akra_Bazzi_Method" via "Draft.Master_Theorem" via "HOL-Analysis.Equivalence_Lebesgue_Henstock_Integration" via "HOL-Analysis.Lebesgue_Measure" via "HOL-Analysis.Finite_Product_Measure" via "HOL-Analysis.Binary_Product_Measure" via "HOL-Analysis.Nonnegative_Lebesgue_Integration" via "HOL-Analysis.Borel_Space" via "HOL-Analysis.Derivative" via "HOL-Analysis.Bounded_Linear_Function" via "HOL-Analysis.Topology_Euclidean_Space" via "HOL-Analysis.Elementary_Normed_Spaces" via "HOL-Analysis.Cartesian_Space" via "HOL-Analysis.Finite_Cartesian_Product")
### theory "HOL-Library.BigO"
### 0.835s elapsed time, 3.298s cpu time, 0.319s GC time
Loading theory "Draft.ExtrEqs" (required by "Draft.Akra_Bazzi_MethodMoreTemplates")
class topological_space = open +
  assumes "open_UNIV": "open UNIV"
  assumes "open_Int": "!!S T. [| open S; open T |] ==> open (S Int T)"
  assumes "open_Union": "!!K. Ball K open ==> open (\<Union> K)"
locale countable_basis
  fixes p :: "'a set => bool"
    and B :: "'a set set"
  assumes "countable_basis p B"
class second_countable_topology = topological_space +
  assumes
    "ex_countable_subbasis":
      "EX B. countable B & open = generate_topology B"
class euclidean_space = real_inner +
  fixes Basis :: "'a set"
  assumes "nonempty_Basis": "Basis ~= {}"
  assumes "finite_Basis": "finite Basis"
  assumes
    "inner_Basis":
      "!!u v.
          [| u : Basis; v : Basis |]
          ==> inner u v = (if u = v then 1 else 0)"
  assumes
    "euclidean_all_zero_iff":
      "!!x. (ALL u:Basis. inner x u = 0) = (x = (0::'a))"
Proofs for inductive predicate(s) "generate_topology_on"
  Proving monotonicity ...
### theory "HOL-Analysis.Abstract_Topology"
### 3.159s elapsed time, 12.398s cpu time, 2.309s GC time
Loading theory "HOL-Analysis.Abstract_Limits" (required by "Draft.Akra_Bazzi_MethodMoreTemplates" via "Draft.Akra_Bazzi_Method" via "Draft.Master_Theorem" via "HOL-Analysis.Equivalence_Lebesgue_Henstock_Integration" via "HOL-Analysis.Lebesgue_Measure" via "HOL-Analysis.Finite_Product_Measure" via "HOL-Analysis.Binary_Product_Measure" via "HOL-Analysis.Nonnegative_Lebesgue_Integration" via "HOL-Analysis.Borel_Space" via "HOL-Analysis.Derivative" via "HOL-Analysis.Bounded_Linear_Function" via "HOL-Analysis.Function_Topology")
val eqpattern =
   Pattern
    (
       Const ("HOL.Trueprop", "bool => prop") $
         (Const ("HOL.eq", "?'a => ?'a => bool") $
           Var (("_dummy_", 1), "?'a") $ Var (("_dummy_", 2), "?'a"))
       ):
   term Find_Theorems.criterion
val badeqpattern = Pattern (Const ("Pure.eq", "?'a => ?'a => prop")):
   term Find_Theorems.criterion
val undefpattern =
   Pattern
    (
       Const ("HOL.Trueprop", "bool => prop") $
         (Const ("HOL.eq", "?'a => ?'a => bool") $
           Var (("_dummy_", 1), "?'a") $ Const ("HOL.undefined", "?'a"))
       ):
   term Find_Theorems.criterion
val thmpattern =
   Pattern
    (Const ("HOL.Trueprop", "bool => prop") $ Var (("_dummy_", 1), "bool")):
   term Find_Theorems.criterion
val badnames =
   ["*nitpick*", "*Nitpick*", "*full_exhaustive*", "*_def*", "Enum.finite*",
    "*Quickcheck*", "ATP*", "*Nunchaku*", "*Code*", "*BNF*", "*SMT*",
    "*.*.*"]:
   string list
val unwanted_names =
   [(false, Name "*nitpick*"), (false, Name "*Nitpick*"),
    (false, Name "*full_exhaustive*"), (false, Name "*_def*"),
    (false, Name "Enum.finite*"), (false, Name "*Quickcheck*"),
    (false, Name "ATP*"), (false, Name "*Nunchaku*"),
    (false, Name "*Code*"), (false, Name "*BNF*"), (false, Name "*SMT*"),
    (false, Name "*.*.*")]:
   (bool * term Find_Theorems.criterion) list
val has_vars = fn: term -> bool
val get_all_eqs = fn: string -> Proof.context -> (string * thm) list
val get_all_thms = fn: string -> Proof.context -> (string * thm) list
val get_noneq_thms = fn: string -> Proof.context -> (string * thm) list
val template_eqs = fn:
   string -> Proof.context -> (string * thm * template) list
val template_thms = fn:
   string -> Proof.context -> (string * thm * template) list
### theory "Draft.ExtrEqs"
### 0.709s elapsed time, 2.804s cpu time, 0.246s GC time
Loading theory "HOL-Library.Discrete" (required by "Draft.Akra_Bazzi_MethodMoreTemplates" via "Draft.Akra_Bazzi_Method" via "Draft.Master_Theorem" via "HOL-Analysis.Equivalence_Lebesgue_Henstock_Integration" via "HOL-Analysis.Lebesgue_Measure" via "HOL-Analysis.Finite_Product_Measure" via "HOL-Analysis.Binary_Product_Measure" via "HOL-Analysis.Nonnegative_Lebesgue_Integration" via "HOL-Analysis.Borel_Space" via "HOL-Analysis.Derivative" via "HOL-Analysis.Bounded_Linear_Function" via "HOL-Analysis.Uniform_Limit" via "HOL-Analysis.Summation_Tests")
### Rewrite rule not in simpset:
### Wellfounded.accp log_rel ?n1 ==>
### log ?n1 == if ?n1 < 2 then 0 else Suc (log (?n1 div 2))
Found termination order: "size <*mlex*> {}"
### theory "HOL-Library.Discrete"
### 0.175s elapsed time, 0.682s cpu time, 0.064s GC time
Loading theory "HOL-Library.Indicator_Function" (required by "Draft.Akra_Bazzi_MethodMoreTemplates" via "Draft.Akra_Bazzi_Method" via "Draft.Master_Theorem" via "HOL-Analysis.Equivalence_Lebesgue_Henstock_Integration" via "HOL-Analysis.Lebesgue_Measure" via "HOL-Analysis.Finite_Product_Measure" via "HOL-Analysis.Binary_Product_Measure" via "HOL-Analysis.Nonnegative_Lebesgue_Integration" via "HOL-Analysis.Measure_Space" via "HOL-Analysis.Measurable" via "HOL-Analysis.Sigma_Algebra")
### theory "HOL-Analysis.Abstract_Limits"
### 0.250s elapsed time, 0.991s cpu time, 0.064s GC time
Loading theory "HOL-Library.Landau_Symbols" (required by "Draft.Akra_Bazzi_MethodMoreTemplates" via "Draft.Akra_Bazzi_Method" via "Draft.Akra_Bazzi")
instantiation
  real :: euclidean_space
  Basis_real == Basis :: real set
instantiation
  complex :: euclidean_space
  Basis_complex == Basis :: complex set
instantiation
  prod :: (real_inner, real_inner) real_inner
  inner_prod == inner :: 'a * 'b => 'a * 'b => real
instantiation
  prod :: (euclidean_space, euclidean_space) euclidean_space
  Basis_prod == Basis :: ('a * 'b) set
### Cannot skip proof of schematic goal statement
locale landau_symbol
  fixes L :: "'a filter => ('a => 'b) => ('a => 'b) set"
    and L' :: "'c filter => ('c => 'b) => ('c => 'b) set"
    and Lr :: "'a filter => ('a => real) => ('a => real) set"
  assumes "landau_symbol L L' Lr"
### Cannot skip proof of schematic goal statement
### theory "HOL-Analysis.Euclidean_Space"
### 1.803s elapsed time, 7.111s cpu time, 0.753s GC time
Loading theory "HOL-Analysis.Finite_Cartesian_Product" (required by "Draft.Akra_Bazzi_MethodMoreTemplates" via "Draft.Akra_Bazzi_Method" via "Draft.Master_Theorem" via "HOL-Analysis.Equivalence_Lebesgue_Henstock_Integration" via "HOL-Analysis.Lebesgue_Measure" via "HOL-Analysis.Finite_Product_Measure" via "HOL-Analysis.Binary_Product_Measure" via "HOL-Analysis.Nonnegative_Lebesgue_Integration" via "HOL-Analysis.Borel_Space" via "HOL-Analysis.Derivative" via "HOL-Analysis.Bounded_Linear_Function" via "HOL-Analysis.Topology_Euclidean_Space" via "HOL-Analysis.Elementary_Normed_Spaces" via "HOL-Analysis.Cartesian_Space")
### theory "HOL-Library.Indicator_Function"
### 0.443s elapsed time, 1.747s cpu time, 0.195s GC time
Loading theory "HOL-Analysis.Linear_Algebra" (required by "Draft.Akra_Bazzi_MethodMoreTemplates" via "Draft.Akra_Bazzi_Method" via "Draft.Master_Theorem" via "HOL-Analysis.Equivalence_Lebesgue_Henstock_Integration" via "HOL-Analysis.Lebesgue_Measure" via "HOL-Analysis.Finite_Product_Measure" via "HOL-Analysis.Binary_Product_Measure" via "HOL-Analysis.Nonnegative_Lebesgue_Integration" via "HOL-Analysis.Borel_Space" via "HOL-Analysis.Derivative" via "HOL-Analysis.Bounded_Linear_Function" via "HOL-Analysis.Topology_Euclidean_Space" via "HOL-Analysis.Elementary_Normed_Spaces" via "HOL-Analysis.Cartesian_Space")
### theory "HOL-Analysis.Elementary_Topology"
### 2.050s elapsed time, 8.097s cpu time, 0.753s GC time
Loading theory "HOL-Analysis.Abstract_Topology_2" (required by "Draft.Akra_Bazzi_MethodMoreTemplates" via "Draft.Akra_Bazzi_Method" via "Draft.Master_Theorem" via "HOL-Analysis.Equivalence_Lebesgue_Henstock_Integration" via "HOL-Analysis.Lebesgue_Measure" via "HOL-Analysis.Finite_Product_Measure" via "HOL-Analysis.Binary_Product_Measure" via "HOL-Analysis.Nonnegative_Lebesgue_Integration" via "HOL-Analysis.Borel_Space" via "HOL-Analysis.Derivative" via "HOL-Analysis.Bounded_Linear_Function" via "HOL-Analysis.Topology_Euclidean_Space" via "HOL-Analysis.Elementary_Normed_Spaces" via "HOL-Analysis.Elementary_Metric_Spaces")
locale landau_pair
  fixes L :: "'a filter => ('a => 'b) => ('a => 'b) set"
    and l :: "'a filter => ('a => 'b) => ('a => 'b) set"
    and L' :: "'c filter => ('c => 'b) => ('c => 'b) set"
    and l' :: "'c filter => ('c => 'b) => ('c => 'b) set"
    and Lr :: "'a filter => ('a => real) => ('a => real) set"
    and lr :: "'a filter => ('a => real) => ('a => real) set"
    and R :: "real => real => bool"
  assumes "landau_pair L l L' l' Lr lr R"
locale landau_pair
  fixes L :: "'a filter => ('a => 'b) => ('a => 'b) set"
    and l :: "'a filter => ('a => 'b) => ('a => 'b) set"
    and L' :: "'c filter => ('c => 'b) => ('c => 'b) set"
    and l' :: "'c filter => ('c => 'b) => ('c => 'b) set"
    and Lr :: "'a filter => ('a => real) => ('a => real) set"
    and lr :: "'a filter => ('a => real) => ('a => real) set"
    and R :: "real => real => bool"
  assumes "landau_pair L l L' l' Lr lr R"
locale landau_pair
  fixes L :: "'a filter => ('a => 'b) => ('a => 'b) set"
    and l :: "'a filter => ('a => 'b) => ('a => 'b) set"
    and L' :: "'c filter => ('c => 'b) => ('c => 'b) set"
    and l' :: "'c filter => ('c => 'b) => ('c => 'b) set"
    and Lr :: "'a filter => ('a => real) => ('a => real) set"
    and lr :: "'a filter => ('a => real) => ('a => real) set"
    and R :: "real => real => bool"
  assumes "landau_pair L l L' l' Lr lr R"
locale landau_symbol
  fixes L :: "'a filter => ('a => 'b) => ('a => 'b) set"
    and L' :: "'c filter => ('c => 'b) => ('c => 'b) set"
    and Lr :: "'a filter => ('a => real) => ('a => real) set"
  assumes "landau_symbol L L' Lr"
class real_inner = real_normed_vector +
  fixes inner :: "'a => 'a => real"
  assumes "inner_commute": "!!x y. x \<bullet> y = y \<bullet> x"
    and
    "inner_add_left":
      "!!x y z. (x + y) \<bullet> z = x \<bullet> z + y \<bullet> z"
    and
    "inner_scaleR_left":
      "!!r x y. r *\<^sub>R x \<bullet> y = r * (x \<bullet> y)"
    and "inner_ge_zero": "!!x. 0 <= x \<bullet> x"
    and "inner_eq_zero_iff": "!!x. (x \<bullet> x = 0) = (x = (0::'a))"
    and "norm_eq_sqrt_inner": "!!x. norm x = sqrt (x \<bullet> x)"
locale landau_symbol
  fixes L :: "'a filter => ('a => 'b) => ('a => 'b) set"
    and L' :: "'c filter => ('c => 'b) => ('c => 'b) set"
    and Lr :: "'a filter => ('a => real) => ('a => real) set"
  assumes "landau_symbol L L' Lr"
bundle vec_syntax
bundle no_vec_syntax
instantiation
  vec :: (zero, finite) zero
  zero_vec == zero_class.zero :: ('a, 'b) vec
instantiation
  vec :: (plus, finite) plus
  plus_vec == plus :: ('a, 'b) vec => ('a, 'b) vec => ('a, 'b) vec
instantiation
  vec :: (minus, finite) minus
  minus_vec == minus :: ('a, 'b) vec => ('a, 'b) vec => ('a, 'b) vec
instantiation
  vec :: (uminus, finite) uminus
  uminus_vec == uminus :: ('a, 'b) vec => ('a, 'b) vec
instantiation
  vec :: (times, finite) times
  times_vec == times :: ('a, 'b) vec => ('a, 'b) vec => ('a, 'b) vec
instantiation
  vec :: (one, finite) one
  one_vec == one_class.one :: ('a, 'b) vec
instantiation
  vec :: (ord, finite) ord
  less_eq_vec == less_eq :: ('a, 'b) vec => ('a, 'b) vec => bool
  less_vec == less :: ('a, 'b) vec => ('a, 'b) vec => bool
### theory "HOL-Analysis.Linear_Algebra"
### 1.047s elapsed time, 4.148s cpu time, 0.494s GC time
Loading theory "HOL-Analysis.Affine" (required by "Draft.Akra_Bazzi_MethodMoreTemplates" via "Draft.Akra_Bazzi_Method" via "Draft.Master_Theorem" via "HOL-Analysis.Equivalence_Lebesgue_Henstock_Integration" via "HOL-Analysis.Lebesgue_Measure" via "HOL-Analysis.Finite_Product_Measure" via "HOL-Analysis.Binary_Product_Measure" via "HOL-Analysis.Nonnegative_Lebesgue_Integration" via "HOL-Analysis.Borel_Space" via "HOL-Analysis.Derivative" via "HOL-Analysis.Line_Segment" via "HOL-Analysis.Convex")
instantiation
  vec :: (real_vector, finite) real_vector
  scaleR_vec == scaleR :: real => ('a, 'b) vec => ('a, 'b) vec
instantiation
  vec :: (topological_space, finite) topological_space
  open_vec == open :: ('a, 'b) vec set => bool
instantiation
  vec :: (metric_space, finite) dist
  dist_vec == dist :: ('a, 'b) vec => ('a, 'b) vec => real
instantiation
  vec :: (metric_space, finite) uniformity_dist
  uniformity_vec == uniformity :: (('a, 'b) vec * ('a, 'b) vec) filter
instantiation
  vec :: (metric_space, finite) metric_space
instantiation
  vec :: (real_normed_vector, finite) real_normed_vector
  sgn_vec == sgn :: ('a, 'b) vec => ('a, 'b) vec
  norm_vec == norm :: ('a, 'b) vec => real
bundle asymp_equiv_notation
instantiation
  vec :: (real_inner, finite) real_inner
  inner_vec == inner :: ('a, 'b) vec => ('a, 'b) vec => real
instantiation
  vec :: (euclidean_space, finite) euclidean_space
  Basis_vec == Basis :: ('a, 'b) vec set
### theory "HOL-Library.Landau_Symbols"
### 1.922s elapsed time, 7.602s cpu time, 1.023s GC time
Loading theory "HOL-Library.Liminf_Limsup" (required by "Draft.Akra_Bazzi_MethodMoreTemplates" via "Draft.Akra_Bazzi_Method" via "Draft.Master_Theorem" via "HOL-Analysis.Equivalence_Lebesgue_Henstock_Integration" via "HOL-Analysis.Lebesgue_Measure" via "HOL-Analysis.Finite_Product_Measure" via "HOL-Analysis.Binary_Product_Measure" via "HOL-Analysis.Nonnegative_Lebesgue_Integration" via "HOL-Analysis.Measure_Space" via "HOL-Analysis.Measurable" via "HOL-Analysis.Sigma_Algebra" via "HOL-Library.Extended_Nonnegative_Real" via "HOL-Library.Extended_Real")
### theory "HOL-Analysis.Abstract_Topology_2"
### 1.410s elapsed time, 5.581s cpu time, 0.726s GC time
Loading theory "HOL-Analysis.Connected" (required by "Draft.Akra_Bazzi_MethodMoreTemplates" via "Draft.Akra_Bazzi_Method" via "Draft.Master_Theorem" via "HOL-Analysis.Equivalence_Lebesgue_Henstock_Integration" via "HOL-Analysis.Lebesgue_Measure" via "HOL-Analysis.Finite_Product_Measure" via "HOL-Analysis.Binary_Product_Measure" via "HOL-Analysis.Nonnegative_Lebesgue_Integration" via "HOL-Analysis.Borel_Space" via "HOL-Analysis.Derivative" via "HOL-Analysis.Bounded_Linear_Function" via "HOL-Analysis.Topology_Euclidean_Space" via "HOL-Analysis.Elementary_Normed_Spaces")
### theory "HOL-Analysis.Affine"
### 0.523s elapsed time, 2.071s cpu time, 0.334s GC time
Loading theory "HOL-Analysis.Convex" (required by "Draft.Akra_Bazzi_MethodMoreTemplates" via "Draft.Akra_Bazzi_Method" via "Draft.Master_Theorem" via "HOL-Analysis.Equivalence_Lebesgue_Henstock_Integration" via "HOL-Analysis.Lebesgue_Measure" via "HOL-Analysis.Finite_Product_Measure" via "HOL-Analysis.Binary_Product_Measure" via "HOL-Analysis.Nonnegative_Lebesgue_Integration" via "HOL-Analysis.Borel_Space" via "HOL-Analysis.Derivative" via "HOL-Analysis.Line_Segment")
### theory "HOL-Analysis.Finite_Cartesian_Product"
### 2.501s elapsed time, 9.608s cpu time, 3.471s GC time
Loading theory "HOL-Analysis.Cartesian_Space" (required by "Draft.Akra_Bazzi_MethodMoreTemplates" via "Draft.Akra_Bazzi_Method" via "Draft.Master_Theorem" via "HOL-Analysis.Equivalence_Lebesgue_Henstock_Integration" via "HOL-Analysis.Lebesgue_Measure" via "HOL-Analysis.Finite_Product_Measure" via "HOL-Analysis.Binary_Product_Measure" via "HOL-Analysis.Nonnegative_Lebesgue_Integration" via "HOL-Analysis.Borel_Space" via "HOL-Analysis.Derivative" via "HOL-Analysis.Bounded_Linear_Function" via "HOL-Analysis.Topology_Euclidean_Space" via "HOL-Analysis.Elementary_Normed_Spaces")
### theory "HOL-Analysis.Connected"
### 1.056s elapsed time, 3.876s cpu time, 2.704s GC time
Loading theory "HOL-Analysis.Function_Topology" (required by "Draft.Akra_Bazzi_MethodMoreTemplates" via "Draft.Akra_Bazzi_Method" via "Draft.Master_Theorem" via "HOL-Analysis.Equivalence_Lebesgue_Henstock_Integration" via "HOL-Analysis.Lebesgue_Measure" via "HOL-Analysis.Finite_Product_Measure" via "HOL-Analysis.Binary_Product_Measure" via "HOL-Analysis.Nonnegative_Lebesgue_Integration" via "HOL-Analysis.Borel_Space" via "HOL-Analysis.Derivative" via "HOL-Analysis.Bounded_Linear_Function")
### theory "HOL-Library.Liminf_Limsup"
### 1.260s elapsed time, 4.693s cpu time, 2.704s GC time
Loading theory "HOL-Analysis.Elementary_Metric_Spaces" (required by "Draft.Akra_Bazzi_MethodMoreTemplates" via "Draft.Akra_Bazzi_Method" via "Draft.Master_Theorem" via "HOL-Analysis.Equivalence_Lebesgue_Henstock_Integration" via "HOL-Analysis.Lebesgue_Measure" via "HOL-Analysis.Finite_Product_Measure" via "HOL-Analysis.Binary_Product_Measure" via "HOL-Analysis.Nonnegative_Lebesgue_Integration" via "HOL-Analysis.Borel_Space" via "HOL-Analysis.Derivative" via "HOL-Analysis.Bounded_Linear_Function" via "HOL-Analysis.Topology_Euclidean_Space" via "HOL-Analysis.Elementary_Normed_Spaces")
instantiation
  fun :: (type, topological_space) topological_space
  open_fun == open :: ('a => 'b) set => bool
### theory "HOL-Analysis.Function_Topology"
### 0.722s elapsed time, 2.859s cpu time, 0.406s GC time
Loading theory "HOL-Analysis.Product_Topology" (required by "Draft.Akra_Bazzi_MethodMoreTemplates" via "Draft.Akra_Bazzi_Method" via "Draft.Master_Theorem" via "HOL-Analysis.Equivalence_Lebesgue_Henstock_Integration" via "HOL-Analysis.Homeomorphism" via "HOL-Analysis.Homotopy" via "HOL-Analysis.Path_Connected" via "HOL-Analysis.T1_Spaces")
### theory "HOL-Analysis.Convex"
### 1.771s elapsed time, 6.713s cpu time, 3.110s GC time
Loading theory "HOL-Library.Order_Continuity" (required by "Draft.Akra_Bazzi_MethodMoreTemplates" via "Draft.Akra_Bazzi_Method" via "Draft.Master_Theorem" via "HOL-Analysis.Equivalence_Lebesgue_Henstock_Integration" via "HOL-Analysis.Lebesgue_Measure" via "HOL-Analysis.Finite_Product_Measure" via "HOL-Analysis.Binary_Product_Measure" via "HOL-Analysis.Nonnegative_Lebesgue_Integration" via "HOL-Analysis.Measure_Space" via "HOL-Analysis.Measurable" via "HOL-Analysis.Sigma_Algebra" via "HOL-Library.Extended_Nonnegative_Real" via "HOL-Library.Extended_Real" via "HOL-Library.Extended_Nat")
### theory "HOL-Analysis.Product_Topology"
### 0.298s elapsed time, 1.184s cpu time, 0.197s GC time
Loading theory "HOL-Analysis.T1_Spaces" (required by "Draft.Akra_Bazzi_MethodMoreTemplates" via "Draft.Akra_Bazzi_Method" via "Draft.Master_Theorem" via "HOL-Analysis.Equivalence_Lebesgue_Henstock_Integration" via "HOL-Analysis.Homeomorphism" via "HOL-Analysis.Homotopy" via "HOL-Analysis.Path_Connected")
locale linear_first_finite_dimensional_vector_space
  fixes scaleB :: "'a => 'b => 'b"  (infixr \<open>*b\<close> 75)
    and scaleC :: "'a => 'c => 'c"  (infixr \<open>*c\<close> 75)
    and BasisB :: "'b set"
    and f :: "'b => 'c"
  assumes "linear_first_finite_dimensional_vector_space (*b) (*c) BasisB f"
class heine_borel = metric_space +
  assumes
    "bounded_imp_convergent_subsequence":
      "!!f. bounded (range f) ==>
            EX l r. strict_mono r & (f o r) \<longlonglongrightarrow> l"
### theory "HOL-Analysis.T1_Spaces"
### 1.123s elapsed time, 4.152s cpu time, 3.114s GC time
Loading theory "HOL-Library.Sum_of_Squares" (required by "Draft.Akra_Bazzi_MethodMoreTemplates" via "Draft.Akra_Bazzi_Method" via "Draft.Master_Theorem" via "HOL-Analysis.Equivalence_Lebesgue_Henstock_Integration" via "HOL-Analysis.Lebesgue_Measure" via "HOL-Analysis.Finite_Product_Measure" via "HOL-Analysis.Binary_Product_Measure" via "HOL-Analysis.Nonnegative_Lebesgue_Integration" via "HOL-Analysis.Borel_Space" via "HOL-Analysis.Derivative" via "HOL-Analysis.Bounded_Linear_Function" via "HOL-Analysis.Topology_Euclidean_Space" via "HOL-Analysis.Norm_Arith")
### theory "HOL-Library.Order_Continuity"
### 1.503s elapsed time, 5.647s cpu time, 3.474s GC time
Loading theory "HOL-Library.Extended_Nat" (required by "Draft.Akra_Bazzi_MethodMoreTemplates" via "Draft.Akra_Bazzi_Method" via "Draft.Master_Theorem" via "HOL-Analysis.Equivalence_Lebesgue_Henstock_Integration" via "HOL-Analysis.Lebesgue_Measure" via "HOL-Analysis.Finite_Product_Measure" via "HOL-Analysis.Binary_Product_Measure" via "HOL-Analysis.Nonnegative_Lebesgue_Integration" via "HOL-Analysis.Measure_Space" via "HOL-Analysis.Measurable" via "HOL-Analysis.Sigma_Algebra" via "HOL-Library.Extended_Nonnegative_Real" via "HOL-Library.Extended_Real")
class infinity = type +
  fixes infinity :: "'a"
instantiation
  enat :: infinity
  infinity_enat == infinity :: enat
Proofs for inductive predicate(s) "rec_set_enat"
### theory "HOL-Analysis.Cartesian_Space"
### 2.578s elapsed time, 9.922s cpu time, 4.055s GC time
Loading theory "Landau_Symbols.Group_Sort" (required by "Draft.Akra_Bazzi_MethodMoreTemplates" via "Draft.Akra_Bazzi_Method" via "Draft.Akra_Bazzi" via "Draft.Akra_Bazzi_Real" via "Draft.Akra_Bazzi_Asymptotics" via "Draft.Akra_Bazzi_Library" via "Landau_Symbols.Landau_More" via "Landau_Symbols.Landau_Simprocs" via "Landau_Symbols.Landau_Real_Products")
locale groupsort
  fixes f :: "'a => 'b"
    and merge :: "'a => 'a => 'a"
    and g :: "'a list => 'c"
  assumes "groupsort f merge g"
### No equation for constructor "Extended_Nat.infinity_class.infinity"
### in definition of function "the_enat"
consts
  the_enat :: "enat => nat"
instantiation
  enat :: zero_neq_one
  one_enat == one_class.one :: enat
  zero_enat == zero_class.zero :: enat
instantiation
  enat :: comm_monoid_add
  plus_enat == plus :: enat => enat => enat
instantiation
  enat :: {comm_semiring_1,semiring_no_zero_divisors}
  times_enat == times :: enat => enat => enat
instantiation
  enat :: minus
  minus_enat == minus :: enat => enat => enat
instantiation
  enat :: linordered_ab_semigroup_add
  less_eq_enat == less_eq :: enat => enat => bool
  less_enat == less :: enat => enat => bool
instantiation
  enat :: {order_bot,order_top}
  top_enat == top :: enat
  bot_enat == bot :: enat
structure Cancel_Enat_Common:
  sig
    val dest_sum: term -> term list
    val dest_summing: term * term list -> term list
    val find_first: term -> term list -> term list
    val find_first_t: term list -> term -> term list -> term list
    val mk_eq: term * term -> term
    val mk_sum: typ -> term list -> term
    val norm_ss: simpset
    val norm_tac: Proof.context -> tactic
    val simplify_meta_eq: Proof.context -> thm -> thm -> thm
    val trans_tac: Proof.context -> thm option -> tactic
  end
structure Eq_Enat_Cancel:
  sig val proc: Proof.context -> term -> thm option end
structure Le_Enat_Cancel:
  sig val proc: Proof.context -> term -> thm option end
structure Less_Enat_Cancel:
  sig val proc: Proof.context -> term -> thm option end
### theory "HOL-Analysis.Elementary_Metric_Spaces"
### 2.847s elapsed time, 11.001s cpu time, 4.354s GC time
Loading theory "HOL-Analysis.Elementary_Normed_Spaces" (required by "Draft.Akra_Bazzi_MethodMoreTemplates" via "Draft.Akra_Bazzi_Method" via "Draft.Master_Theorem" via "HOL-Analysis.Equivalence_Lebesgue_Henstock_Integration" via "HOL-Analysis.Lebesgue_Measure" via "HOL-Analysis.Finite_Product_Measure" via "HOL-Analysis.Binary_Product_Measure" via "HOL-Analysis.Nonnegative_Lebesgue_Integration" via "HOL-Analysis.Borel_Space" via "HOL-Analysis.Derivative" via "HOL-Analysis.Bounded_Linear_Function" via "HOL-Analysis.Topology_Euclidean_Space")
instantiation
  enat :: complete_lattice
  Inf_enat == Inf :: enat set => enat
  Sup_enat == Sup :: enat set => enat
  sup_enat == sup :: enat => enat => enat
  inf_enat == inf :: enat => enat => enat
### theory "HOL-Library.Extended_Nat"
### 0.805s elapsed time, 3.230s cpu time, 0.473s GC time
Loading theory "HOL-Library.Extended_Real" (required by "Draft.Akra_Bazzi_MethodMoreTemplates" via "Draft.Akra_Bazzi_Method" via "Draft.Master_Theorem" via "HOL-Analysis.Equivalence_Lebesgue_Henstock_Integration" via "HOL-Analysis.Lebesgue_Measure" via "HOL-Analysis.Finite_Product_Measure" via "HOL-Analysis.Binary_Product_Measure" via "HOL-Analysis.Nonnegative_Lebesgue_Integration" via "HOL-Analysis.Measure_Space" via "HOL-Analysis.Measurable" via "HOL-Analysis.Sigma_Algebra" via "HOL-Library.Extended_Nonnegative_Real")
Found termination order: "length <*mlex*> {}"
### ML warning (line 261 of "~~/src/HOL/Library/Sum_of_Squares/positivstellensatz.ML"):
### Value identifier (pth_abs) has not been referenced.
### ML warning (line 265 of "~~/src/HOL/Library/Sum_of_Squares/positivstellensatz.ML"):
### Value identifier (pth_max) has not been referenced.
### ML warning (line 269 of "~~/src/HOL/Library/Sum_of_Squares/positivstellensatz.ML"):
### Value identifier (pth_min) has not been referenced.
### ML warning (line 379 of "~~/src/HOL/Library/Sum_of_Squares/positivstellensatz.ML"):
### Pattern is not exhaustive.
signature FUNC =
  sig
    exception DUP of key
    exception SAME
    exception UNDEF of key
    val apply: 'a table -> key -> 'a
    val applyd: 'a table -> (key -> 'a) -> key -> 'a
    val build: ('a table -> 'a table) -> 'a table
    val choose: 'a table -> key * 'a
    val combine:
       ('a -> 'a -> 'a) -> ('a -> bool) -> 'a table -> 'a table -> 'a table
    val cons_list: key * 'a -> 'a list table -> 'a list table
    val default: key * 'a -> 'a table -> 'a table
    val defined: 'a table -> key -> bool
    val delete: key -> 'a table -> 'a table
    val delete_safe: key -> 'a table -> 'a table
    val dest: 'a table -> (key * 'a) list
    val dest_list: 'a list table -> (key * 'a) list
    val dom: 'a table -> key list
    val empty: 'a table
    val exists: (key * 'a -> bool) -> 'a table -> bool
    val fold: (key * 'a -> 'b -> 'b) -> 'a table -> 'b -> 'b
    val fold_rev: (key * 'a -> 'b -> 'b) -> 'a table -> 'b -> 'b
    val forall: (key * 'a -> bool) -> 'a table -> bool
    val get_first: (key * 'a -> 'b option) -> 'a table -> 'b option
    val insert: ('a * 'a -> bool) -> key * 'a -> 'a table -> 'a table
    val insert_list:
       ('a * 'a -> bool) -> key * 'a -> 'a list table -> 'a list table
    val insert_set: key -> set -> set
    val is_empty: 'a table -> bool
    val is_single: 'a table -> bool
    val join: (key -> 'a * 'a -> 'a) -> 'a table * 'a table -> 'a table
    type key
    val keys: 'a table -> key list
    val lookup: 'a table -> key -> 'a option
    val lookup_key: 'a table -> key -> (key * 'a) option
    val lookup_list: 'a list table -> key -> 'a list
    val make: (key * 'a) list -> 'a table
    val make_list: (key * 'a) list -> 'a list table
    val make_set: key list -> set
    val map: (key -> 'a -> 'b) -> 'a table -> 'b table
    val map_default: key * 'a -> ('a -> 'a) -> 'a table -> 'a table
    val map_entry: key -> ('a -> 'a) -> 'a table -> 'a table
    val max: 'a table -> (key * 'a) option
    val member: ('a * 'b -> bool) -> 'b table -> key * 'a -> bool
    val merge: ('a * 'a -> bool) -> 'a table * 'a table -> 'a table
    val merge_list:
       ('a * 'a -> bool) -> 'a list table * 'a list table -> 'a list table
    val min: 'a table -> (key * 'a) option
    val onefunc: key * 'a -> 'a table
    val remove: ('a * 'b -> bool) -> key * 'a -> 'b table -> 'b table
    val remove_list:
       ('a * 'b -> bool) -> key * 'a -> 'b list table -> 'b list table
    val remove_set: key -> set -> set
    type set = unit table
    type 'a table
    val tryapplyd: 'a table -> key -> 'a -> 'a
    val update: key * 'a -> 'a table -> 'a table
    val update_list:
       ('a * 'a -> bool) -> key * 'a -> 'a list table -> 'a list table
    val update_new: key * 'a -> 'a table -> 'a table
    val updatep: (key * 'a -> bool) -> key * 'a -> 'a table -> 'a table
  end
functor FuncFun (Key: KEY): FUNC
signature REAL_ARITH =
  sig
    type cert_conv = cterm -> thm * pss_tree
    val cterm_of_rat: Rat.rat -> cterm
    val dest_ratconst: cterm -> Rat.rat
    val gen_gen_real_arith:
       Proof.context ->
         (Rat.rat -> cterm) * conv * conv * conv * conv * conv * conv *
         conv * conv * conv * prover
           -> cert_conv
    val gen_prover_real_arith: Proof.context -> prover -> cert_conv
    val gen_real_arith:
       Proof.context ->
         (Rat.rat -> cterm) * conv * conv * conv * conv * conv * conv *
         conv * prover
           -> cert_conv
    val is_ratconst: cterm -> bool
    datatype positivstellensatz
    =
         Axiom_eq of int
       | Axiom_le of int
       | Axiom_lt of int
       | Eqmul of FuncUtil.poly * positivstellensatz
       | Product of positivstellensatz * positivstellensatz
       | Rational_eq of Rat.rat
       | Rational_le of Rat.rat
       | Rational_lt of Rat.rat
       | Square of FuncUtil.poly
       | Sum of positivstellensatz * positivstellensatz
    type prover =
       tree_choice list ->
         (thm list * thm list * thm list -> positivstellensatz -> thm) ->
           thm list * thm list * thm list -> thm * pss_tree
    datatype pss_tree
    = Branch of pss_tree * pss_tree | Cert of positivstellensatz | Trivial
    val real_linear_prover:
       (thm list * thm list * thm list -> positivstellensatz -> thm) ->
         thm list * thm list * thm list -> thm * pss_tree
    datatype tree_choice = Left | Right
  end
structure FuncUtil:
  sig
    structure Ctermfunc: FUNC
    structure Intfunc: FUNC
    structure Intpairfunc: FUNC
    structure Monomialfunc: FUNC
    structure Ratfunc: FUNC
    structure Symfunc: FUNC
    structure Termfunc: FUNC
    val dest_monomial: 'a Ctermfunc.table -> (cterm * 'a) list
    type monomial = int Ctermfunc.table
    val monomial_ord: int Ctermfunc.table * int Ctermfunc.table -> order
    val monomial_order: int Ctermfunc.table * int Ctermfunc.table -> order
    type poly = Rat.rat Monomialfunc.table
  end
structure RealArith: REAL_ARITH
signature POSITIVSTELLENSATZ_TOOLS =
  sig
    val print_cert: RealArith.pss_tree -> string
    val read_cert: Proof.context -> string -> RealArith.pss_tree
  end
structure Positivstellensatz_Tools: POSITIVSTELLENSATZ_TOOLS
instantiation
  enat :: linorder_topology
  open_enat == open :: enat set => bool
### theory "Landau_Symbols.Group_Sort"
### 1.157s elapsed time, 4.627s cpu time, 0.743s GC time
Loading theory "Landau_Symbols.Landau_Real_Products" (required by "Draft.Akra_Bazzi_MethodMoreTemplates" via "Draft.Akra_Bazzi_Method" via "Draft.Akra_Bazzi" via "Draft.Akra_Bazzi_Real" via "Draft.Akra_Bazzi_Asymptotics" via "Draft.Akra_Bazzi_Library" via "Landau_Symbols.Landau_More" via "Landau_Symbols.Landau_Simprocs")
signature SUM_OF_SQUARES =
  sig
    exception Failure of string
    val debug: bool Config.T
    val debug_message: Proof.context -> (unit -> string) -> unit
    datatype proof_method
    = Certificate of RealArith.pss_tree | Prover of string -> string
    val sos_tac:
       (RealArith.pss_tree -> unit) ->
         proof_method -> Proof.context -> int -> tactic
    val trace: bool Config.T
    val trace_message: Proof.context -> (unit -> string) -> unit
  end
structure Sum_of_Squares: SUM_OF_SQUARES
signature SOS_WRAPPER =
  sig val sos_tac: Proof.context -> string option -> int -> tactic end
structure SOS_Wrapper: SOS_WRAPPER
### theory "HOL-Library.Sum_of_Squares"
### 1.507s elapsed time, 6.043s cpu time, 0.857s GC time
Loading theory "HOL-Analysis.Norm_Arith" (required by "Draft.Akra_Bazzi_MethodMoreTemplates" via "Draft.Akra_Bazzi_Method" via "Draft.Master_Theorem" via "HOL-Analysis.Equivalence_Lebesgue_Henstock_Integration" via "HOL-Analysis.Lebesgue_Measure" via "HOL-Analysis.Finite_Product_Measure" via "HOL-Analysis.Binary_Product_Measure" via "HOL-Analysis.Nonnegative_Lebesgue_Integration" via "HOL-Analysis.Borel_Space" via "HOL-Analysis.Derivative" via "HOL-Analysis.Bounded_Linear_Function" via "HOL-Analysis.Topology_Euclidean_Space")
instantiation
  ereal :: uminus
  uminus_ereal == uminus :: ereal => ereal
Found termination order: "{}"
instantiation
  ereal :: infinity
  infinity_ereal == infinity :: ereal
### ML warning (line 103 of "~~/src/HOL/Analysis/normarith.ML"):
### Matches are not exhaustive.
signature NORM_ARITH =
  sig
    val norm_arith: Proof.context -> conv
    val norm_arith_tac: Proof.context -> int -> tactic
  end
structure NormArith: NORM_ARITH
### theory "HOL-Analysis.Norm_Arith"
### 0.303s elapsed time, 1.223s cpu time, 0.148s GC time
instantiation
  ereal :: abs
  abs_ereal == abs :: ereal => ereal
instantiation
  ereal :: {comm_monoid_add,zero_neq_one}
  one_ereal == one_class.one :: ereal
  zero_ereal == zero_class.zero :: ereal
  plus_ereal == plus :: ereal => ereal => ereal
instantiation
  ereal :: linorder
  less_eq_ereal == less_eq :: ereal => ereal => bool
  less_ereal == less :: ereal => ereal => bool
### theory "HOL-Analysis.Elementary_Normed_Spaces"
### 1.465s elapsed time, 5.771s cpu time, 0.862s GC time
Loading theory "HOL-Analysis.Topology_Euclidean_Space" (required by "Draft.Akra_Bazzi_MethodMoreTemplates" via "Draft.Akra_Bazzi_Method" via "Draft.Master_Theorem" via "HOL-Analysis.Equivalence_Lebesgue_Henstock_Integration" via "HOL-Analysis.Lebesgue_Measure" via "HOL-Analysis.Finite_Product_Measure" via "HOL-Analysis.Binary_Product_Measure" via "HOL-Analysis.Nonnegative_Lebesgue_Integration" via "HOL-Analysis.Borel_Space" via "HOL-Analysis.Derivative" via "HOL-Analysis.Bounded_Linear_Function")
instantiation
  ereal :: {comm_monoid_mult,sgn}
  sgn_ereal == sgn :: ereal => ereal
  times_ereal == times :: ereal => ereal => ereal
consts
  bigtheta_pow :: "'a filter => ('a => 'b) set => nat => ('a => 'b) set"
instantiation
  ereal :: minus
  minus_ereal == minus :: ereal => ereal => ereal
instantiation
  ereal :: inverse
  inverse_ereal == inverse :: ereal => ereal
  divide_ereal == divide :: ereal => ereal => ereal
locale landau_function_family
  fixes F :: "'a filter"
    and H :: "('a => real) set"
  assumes "landau_function_family F H"
locale landau_function_family_pair
  fixes F :: "'a filter"
    and G :: "('a => real) set"
    and H :: "('a => real) set"
    and g :: "'a => real"
  assumes "landau_function_family_pair F G H g"
instantiation
  ereal :: lattice
  inf_ereal == inf :: ereal => ereal => ereal
  sup_ereal == sup :: ereal => ereal => ereal
instantiation
  ereal :: complete_lattice
  Inf_ereal == Inf :: ereal set => ereal
  Sup_ereal == Sup :: ereal set => ereal
  bot_ereal == bot :: ereal
  top_ereal == top :: ereal
Found termination order: "(%p. length (snd p)) <*mlex*> {}"
consts
  landau_dominating_chain' :: "'a filter => ('a => real) list => bool"
consts
  nonneg_list :: "'a list => bool"
consts
  pos_list :: "'a list => bool"
locale landau_function_family_chain
  fixes F :: "'b filter"
    and gs :: "'a list"
    and get_param :: "'a => real"
    and get_fun :: "'a => 'b => real"
  assumes "landau_function_family_chain F gs get_fun"
instantiation
  ereal :: linear_continuum_topology
  open_ereal == open :: ereal set => bool
instantiation
  primfun :: linorder
  less_eq_primfun == less_eq :: primfun => primfun => bool
  less_primfun == less :: primfun => primfun => bool
Found termination order: "{}"
Found termination order: "{}"
Found termination order: "{}"
Found termination order: "{}"
Found termination order: "{}"
Found termination order: "{}"
Found termination order: "{}"
### theory "HOL-Library.Extended_Real"
### 2.790s elapsed time, 9.856s cpu time, 1.372s GC time
Loading theory "HOL-Library.Extended_Nonnegative_Real" (required by "Draft.Akra_Bazzi_MethodMoreTemplates" via "Draft.Akra_Bazzi_Method" via "Draft.Master_Theorem" via "HOL-Analysis.Equivalence_Lebesgue_Henstock_Integration" via "HOL-Analysis.Lebesgue_Measure" via "HOL-Analysis.Finite_Product_Measure" via "HOL-Analysis.Binary_Product_Measure" via "HOL-Analysis.Nonnegative_Lebesgue_Integration" via "HOL-Analysis.Measure_Space" via "HOL-Analysis.Measurable" via "HOL-Analysis.Sigma_Algebra")
"- \<infinity>"
  :: "ereal"
Found termination order: "size_list size <*mlex*> {}"
"\<infinity>"
  :: "ereal"
Found termination order: "size_list size <*mlex*> {}"
Found termination order: "size_list size <*mlex*> {}"
"ereal (13 / 4)"
  :: "ereal"
instantiation
  ennreal :: complete_linorder
  Inf_ennreal == Inf :: ennreal set => ennreal
  Sup_ennreal == Sup :: ennreal set => ennreal
  bot_ennreal == bot :: ennreal
  sup_ennreal == sup :: ennreal => ennreal => ennreal
  top_ennreal == top :: ennreal
  inf_ennreal == inf :: ennreal => ennreal => ennreal
  less_eq_ennreal == less_eq :: ennreal => ennreal => bool
  less_ennreal == less :: ennreal => ennreal => bool
"True"
  :: "bool"
"True"
  :: "bool"
### theory "HOL-Analysis.Topology_Euclidean_Space"
### 2.147s elapsed time, 7.349s cpu time, 1.093s GC time
Loading theory "HOL-Analysis.Convex_Euclidean_Space" (required by "Draft.Akra_Bazzi_MethodMoreTemplates" via "Draft.Akra_Bazzi_Method" via "Draft.Master_Theorem" via "HOL-Analysis.Equivalence_Lebesgue_Henstock_Integration" via "HOL-Analysis.Lebesgue_Measure" via "HOL-Analysis.Finite_Product_Measure" via "HOL-Analysis.Binary_Product_Measure" via "HOL-Analysis.Nonnegative_Lebesgue_Integration" via "HOL-Analysis.Borel_Space" via "HOL-Analysis.Derivative")
Loading theory "HOL-Analysis.Line_Segment" (required by "Draft.Akra_Bazzi_MethodMoreTemplates" via "Draft.Akra_Bazzi_Method" via "Draft.Master_Theorem" via "HOL-Analysis.Equivalence_Lebesgue_Henstock_Integration" via "HOL-Analysis.Lebesgue_Measure" via "HOL-Analysis.Finite_Product_Measure" via "HOL-Analysis.Binary_Product_Measure" via "HOL-Analysis.Nonnegative_Lebesgue_Integration" via "HOL-Analysis.Borel_Space" via "HOL-Analysis.Derivative")
instantiation
  ennreal :: infinity
  infinity_ennreal == infinity :: ennreal
instantiation
  ennreal :: {comm_semiring_1,semiring_1_no_zero_divisors}
  zero_ennreal == zero_class.zero :: ennreal
  plus_ennreal == plus :: ennreal => ennreal => ennreal
  one_ennreal == one_class.one :: ennreal
  times_ennreal == times :: ennreal => ennreal => ennreal
### Ignoring duplicate rewrite rule:
### pos_primfun_list [] == False
### Ignoring duplicate rewrite rule:
### pos_primfun_list ((?uu1, ?x1) # ?xs1) ==
### (0::?'b1) < ?x1 | ?x1 = (0::?'b1) & pos_primfun_list ?xs1
### Ignoring duplicate rewrite rule:
### nonneg_primfun_list [] == True
### Ignoring duplicate rewrite rule:
### nonneg_primfun_list ((?uu1, ?x1) # ?xs1) ==
### (0::?'b1) < ?x1 | ?x1 = (0::?'b1) & nonneg_primfun_list ?xs1
### Ignoring duplicate rewrite rule:
### iszero_primfun_list [] == True
### Ignoring duplicate rewrite rule:
### iszero_primfun_list ((?uu1, ?x1) # ?xs1) ==
### ?x1 = (0::?'b1) & iszero_primfun_list ?xs1
### theory "Landau_Symbols.Landau_Real_Products"
### 3.144s elapsed time, 11.230s cpu time, 1.571s GC time
Loading theory "HOL-Analysis.Tagged_Division" (required by "Draft.Akra_Bazzi_MethodMoreTemplates" via "Draft.Akra_Bazzi_Method" via "Draft.Master_Theorem" via "HOL-Analysis.Equivalence_Lebesgue_Henstock_Integration" via "HOL-Analysis.Henstock_Kurzweil_Integration")
instantiation
  ennreal :: minus
  minus_ennreal == minus :: ennreal => ennreal => ennreal
instantiation
  ennreal :: inverse
  inverse_ennreal == inverse :: ennreal => ennreal
  divide_ennreal == divide :: ennreal => ennreal => ennreal
structure Cancel_Ennreal_Common:
  sig
    val dest_sum: term -> term list
    val dest_summing: term * term list -> term list
    val find_first: term -> term list -> term list
    val find_first_t: term list -> term -> term list -> term list
    val mk_eq: term * term -> term
    val mk_sum: typ -> term list -> term
    val norm_ss: simpset
    val norm_tac: Proof.context -> tactic
    val simplify_meta_eq: Proof.context -> thm -> thm -> thm
    val trans_tac: Proof.context -> thm option -> tactic
  end
structure Eq_Ennreal_Cancel:
  sig val proc: Proof.context -> term -> thm option end
structure Le_Ennreal_Cancel:
  sig val proc: Proof.context -> term -> thm option end
structure Less_Ennreal_Cancel:
  sig val proc: Proof.context -> term -> thm option end
instantiation
  ennreal :: linear_continuum_topology
  open_ennreal == open :: ennreal set => bool
locale operative
  fixes f :: "'a => 'a => 'a"  (infixl \<open>\<^bold>*\<close> 70)
    and z :: "'a"  (\<open>\<^bold>1\<close>)
    and g :: "'b set => 'a"
  assumes "operative (\<^bold>*) \<^bold>1 g"
locale operative_real
  fixes f :: "'a => 'a => 'a"  (infixl \<open>\<^bold>*\<close> 70)
    and z :: "'a"  (\<open>\<^bold>1\<close>)
    and g :: "real set => 'a"
  assumes "operative_real (\<^bold>*) \<^bold>1 g"
### theory "HOL-Library.Extended_Nonnegative_Real"
### 1.724s elapsed time, 6.860s cpu time, 1.031s GC time
Loading theory "HOL-Analysis.Sigma_Algebra" (required by "Draft.Akra_Bazzi_MethodMoreTemplates" via "Draft.Akra_Bazzi_Method" via "Draft.Master_Theorem" via "HOL-Analysis.Equivalence_Lebesgue_Henstock_Integration" via "HOL-Analysis.Lebesgue_Measure" via "HOL-Analysis.Finite_Product_Measure" via "HOL-Analysis.Binary_Product_Measure" via "HOL-Analysis.Nonnegative_Lebesgue_Integration" via "HOL-Analysis.Measure_Space" via "HOL-Analysis.Measurable")
### theory "HOL-Analysis.Line_Segment"
### 1.053s elapsed time, 4.225s cpu time, 0.672s GC time
Loading theory "HOL-Analysis.Extended_Real_Limits" (required by "Draft.Akra_Bazzi_MethodMoreTemplates" via "Draft.Akra_Bazzi_Method" via "Draft.Master_Theorem" via "HOL-Analysis.Equivalence_Lebesgue_Henstock_Integration" via "HOL-Analysis.Lebesgue_Measure" via "HOL-Analysis.Finite_Product_Measure" via "HOL-Analysis.Binary_Product_Measure" via "HOL-Analysis.Nonnegative_Lebesgue_Integration" via "HOL-Analysis.Borel_Space" via "HOL-Analysis.Derivative" via "HOL-Analysis.Bounded_Linear_Function" via "HOL-Analysis.Uniform_Limit" via "HOL-Analysis.Summation_Tests")
locale subset_class
  fixes \<Omega> :: "'a set"
    and M :: "'a set set"
  assumes "subset_class \<Omega> M"
locale semiring_of_sets
  fixes \<Omega> :: "'a set"
    and M :: "'a set set"
  assumes "semiring_of_sets \<Omega> M"
### theory "HOL-Analysis.Tagged_Division"
### 1.024s elapsed time, 4.110s cpu time, 0.672s GC time
Loading theory "Landau_Symbols.Landau_Simprocs" (required by "Draft.Akra_Bazzi_MethodMoreTemplates" via "Draft.Akra_Bazzi_Method" via "Draft.Akra_Bazzi" via "Draft.Akra_Bazzi_Real" via "Draft.Akra_Bazzi_Asymptotics" via "Draft.Akra_Bazzi_Library" via "Landau_Symbols.Landau_More")
locale ring_of_sets
  fixes \<Omega> :: "'a set"
    and M :: "'a set set"
  assumes "ring_of_sets \<Omega> M"
### theory "HOL-Analysis.Convex_Euclidean_Space"
### 1.145s elapsed time, 4.601s cpu time, 0.672s GC time
Loading theory "HOL-Analysis.Ordered_Euclidean_Space" (required by "Draft.Akra_Bazzi_MethodMoreTemplates" via "Draft.Akra_Bazzi_Method" via "Draft.Master_Theorem" via "HOL-Analysis.Equivalence_Lebesgue_Henstock_Integration" via "HOL-Analysis.Lebesgue_Measure" via "HOL-Analysis.Finite_Product_Measure" via "HOL-Analysis.Binary_Product_Measure" via "HOL-Analysis.Nonnegative_Lebesgue_Integration" via "HOL-Analysis.Borel_Space")
locale algebra
  fixes \<Omega> :: "'a set"
    and M :: "'a set set"
  assumes "algebra \<Omega> M"
locale sigma_algebra
  fixes \<Omega> :: "'a set"
    and M :: "'a set set"
  assumes "sigma_algebra \<Omega> M"
Proofs for inductive predicate(s) "sigma_setsp"
  Proving monotonicity ...
### ML warning (line 63 of "$AFP/Landau_Symbols/landau_simprocs.ML"):
### Value identifier (dest_bigtheta) has not been referenced.
### ML warning (line 176 of "$AFP/Landau_Symbols/landau_simprocs.ML"):
### Value identifier (x_name2) has not been referenced.
### ML warning (line 185 of "$AFP/Landau_Symbols/landau_simprocs.ML"):
### Value identifier (rest2) has not been referenced.
### ML warning (line 185 of "$AFP/Landau_Symbols/landau_simprocs.ML"):
### Value identifier (rest1) has not been referenced.
### ML warning (line 318 of "$AFP/Landau_Symbols/landau_simprocs.ML"):
### Pattern is not exhaustive.
### ML warning (line 373 of "$AFP/Landau_Symbols/landau_simprocs.ML"):
### Pattern is not exhaustive.
signature LANDAU =
  sig
    val cancel_factor_conv: Proof.context -> cterm -> thm
    val cancel_factor_simproc: Proof.context -> cterm -> thm option
    val dest_landau: term -> term * term * term
    val landau_const_names: string list
    val landau_sum_limit: int Config.T
    val lift_landau_conv: conv -> conv
    val lift_landau_simproc:
       (Proof.context -> cterm -> thm option) ->
         Proof.context -> cterm -> thm option
    val simplify_landau_product_conv: Proof.context -> conv
    val simplify_landau_product_simproc:
       Proof.context -> cterm -> thm option
    val simplify_landau_real_prod_prop_conv: Proof.context -> conv
    val simplify_landau_real_prod_prop_simproc:
       Proof.context -> cterm -> thm option
    val simplify_landau_sum_conv: Proof.context -> conv
    val simplify_landau_sum_simproc: Proof.context -> cterm -> thm option
  end
structure Landau: LANDAU
### theory "Landau_Symbols.Landau_Simprocs"
### 0.477s elapsed time, 1.916s cpu time, 0.288s GC time
Loading theory "HOL-Analysis.Starlike" (required by "Draft.Akra_Bazzi_MethodMoreTemplates" via "Draft.Akra_Bazzi_Method" via "Draft.Master_Theorem" via "HOL-Analysis.Equivalence_Lebesgue_Henstock_Integration" via "HOL-Analysis.Homeomorphism" via "HOL-Analysis.Homotopy" via "HOL-Analysis.Path_Connected")
Proofs for inductive predicate(s) "smallest_ccdi_setsp"
  Proving monotonicity ...
locale Dynkin_system
  fixes \<Omega> :: "'a set"
    and M :: "'a set set"
  assumes "Dynkin_system \<Omega> M"
### theory "HOL-Analysis.Extended_Real_Limits"
### 1.181s elapsed time, 4.711s cpu time, 0.777s GC time
Loading theory "HOL-Analysis.Summation_Tests" (required by "Draft.Akra_Bazzi_MethodMoreTemplates" via "Draft.Akra_Bazzi_Method" via "Draft.Master_Theorem" via "HOL-Analysis.Equivalence_Lebesgue_Henstock_Integration" via "HOL-Analysis.Lebesgue_Measure" via "HOL-Analysis.Finite_Product_Measure" via "HOL-Analysis.Binary_Product_Measure" via "HOL-Analysis.Nonnegative_Lebesgue_Integration" via "HOL-Analysis.Borel_Space" via "HOL-Analysis.Derivative" via "HOL-Analysis.Bounded_Linear_Function" via "HOL-Analysis.Uniform_Limit")
class ordered_euclidean_space = Inf + Sup + euclidean_space + abs + inf +
  sup + ord +
  assumes
    "eucl_le":
      "!!x y. (x <= y) = (ALL i:Basis. x \<bullet> i <= y \<bullet> i)"
  assumes "eucl_less_le_not_le": "!!x y. (x < y) = (x <= y & ~ y <= x)"
  assumes
    "eucl_inf":
      "!!x y.
          inf x y =
          (SUM i:Basis. inf (x \<bullet> i) (y \<bullet> i) *\<^sub>R i)"
  assumes
    "eucl_sup":
      "!!x y.
          sup x y =
          (SUM i:Basis. sup (x \<bullet> i) (y \<bullet> i) *\<^sub>R i)"
  assumes
    "eucl_Inf":
      "!!X. Inf X = (SUM i:Basis. (INF x\<in>X. x \<bullet> i) *\<^sub>R i)"
  assumes
    "eucl_Sup":
      "!!X. Sup X = (SUM i:Basis. (SUP x\<in>X. x \<bullet> i) *\<^sub>R i)"
  assumes
    "eucl_abs":
      "!!x. \<bar>x\<bar> =
            (SUM i:Basis. \<bar>x \<bullet> i\<bar> *\<^sub>R i)"
### theory "HOL-Analysis.Sigma_Algebra"
### 1.749s elapsed time, 6.998s cpu time, 1.099s GC time
Loading theory "HOL-Analysis.Measurable" (required by "Draft.Akra_Bazzi_MethodMoreTemplates" via "Draft.Akra_Bazzi_Method" via "Draft.Master_Theorem" via "HOL-Analysis.Equivalence_Lebesgue_Henstock_Integration" via "HOL-Analysis.Lebesgue_Measure" via "HOL-Analysis.Finite_Product_Measure" via "HOL-Analysis.Binary_Product_Measure" via "HOL-Analysis.Nonnegative_Lebesgue_Integration" via "HOL-Analysis.Measure_Space")
signature MEASURABLE =
  sig
    val add_del_cong_thm: bool -> thm -> Context.generic -> Context.generic
    val add_local_cong: thm -> Proof.context -> Proof.context
    val add_preprocessor:
       string -> preprocessor -> Context.generic -> Context.generic
    val cong_thm_attr: attribute context_parser
    val del_preprocessor: string -> Context.generic -> Context.generic
    val dest_thm_attr: attribute context_parser
    val get_all: Context.generic -> thm list
    val get_cong: Context.generic -> thm list
    val get_dest: Context.generic -> thm list
    datatype level = Concrete | Generic
    val measurable_tac: Proof.context -> thm list -> tactic
    val measurable_thm_attr: bool * (bool * level) -> attribute
    val prepare_facts: Proof.context -> thm list -> thm list * Proof.context
    type preprocessor = thm -> Proof.context -> thm list * Proof.context
    val simproc: Proof.context -> cterm -> thm option
  end
structure Measurable: MEASURABLE
### theory "HOL-Analysis.Summation_Tests"
### 1.000s elapsed time, 4.004s cpu time, 0.788s GC time
Loading theory "HOL-Analysis.Uniform_Limit" (required by "Draft.Akra_Bazzi_MethodMoreTemplates" via "Draft.Akra_Bazzi_Method" via "Draft.Master_Theorem" via "HOL-Analysis.Equivalence_Lebesgue_Henstock_Integration" via "HOL-Analysis.Lebesgue_Measure" via "HOL-Analysis.Finite_Product_Measure" via "HOL-Analysis.Binary_Product_Measure" via "HOL-Analysis.Nonnegative_Lebesgue_Integration" via "HOL-Analysis.Borel_Space" via "HOL-Analysis.Derivative" via "HOL-Analysis.Bounded_Linear_Function")
### theory "HOL-Analysis.Measurable"
### 0.627s elapsed time, 2.513s cpu time, 0.466s GC time
Loading theory "HOL-Analysis.Measure_Space" (required by "Draft.Akra_Bazzi_MethodMoreTemplates" via "Draft.Akra_Bazzi_Method" via "Draft.Master_Theorem" via "HOL-Analysis.Equivalence_Lebesgue_Henstock_Integration" via "HOL-Analysis.Lebesgue_Measure" via "HOL-Analysis.Finite_Product_Measure" via "HOL-Analysis.Binary_Product_Measure" via "HOL-Analysis.Nonnegative_Lebesgue_Integration")
### theory "HOL-Analysis.Starlike"
### 1.985s elapsed time, 7.945s cpu time, 1.364s GC time
Loading theory "HOL-Analysis.Path_Connected" (required by "Draft.Akra_Bazzi_MethodMoreTemplates" via "Draft.Akra_Bazzi_Method" via "Draft.Master_Theorem" via "HOL-Analysis.Equivalence_Lebesgue_Henstock_Integration" via "HOL-Analysis.Homeomorphism" via "HOL-Analysis.Homotopy")
### theory "HOL-Analysis.Uniform_Limit"
### 0.626s elapsed time, 2.504s cpu time, 0.273s GC time
Loading theory "HOL-Analysis.Bounded_Linear_Function" (required by "Draft.Akra_Bazzi_MethodMoreTemplates" via "Draft.Akra_Bazzi_Method" via "Draft.Master_Theorem" via "HOL-Analysis.Equivalence_Lebesgue_Henstock_Integration" via "HOL-Analysis.Lebesgue_Measure" via "HOL-Analysis.Finite_Product_Measure" via "HOL-Analysis.Binary_Product_Measure" via "HOL-Analysis.Nonnegative_Lebesgue_Integration" via "HOL-Analysis.Borel_Space" via "HOL-Analysis.Derivative")
locale sigma_finite_measure
  fixes M :: "'a measure"
  assumes "sigma_finite_measure M"
locale finite_measure
  fixes M :: "'a measure"
  assumes "finite_measure M"
instantiation
  measure :: (type) order_bot
  bot_measure == bot :: 'a measure
  less_eq_measure == less_eq :: 'a measure => 'a measure => bool
  less_measure == less :: 'a measure => 'a measure => bool
Proofs for inductive predicate(s) "less_eq_measure"
  Proving monotonicity ...
instantiation
  prod :: (abs, abs) abs
  abs_prod == abs :: 'a * 'b => 'a * 'b
instantiation
  vec :: (ordered_euclidean_space, finite) ordered_euclidean_space
  abs_vec == abs :: ('a, 'b) vec => ('a, 'b) vec
  inf_vec == inf :: ('a, 'b) vec => ('a, 'b) vec => ('a, 'b) vec
  sup_vec == sup :: ('a, 'b) vec => ('a, 'b) vec => ('a, 'b) vec
  Inf_vec == Inf :: ('a, 'b) vec set => ('a, 'b) vec
  Sup_vec == Sup :: ('a, 'b) vec set => ('a, 'b) vec
instantiation
  measure :: (type) semilattice_sup
  sup_measure == sup :: 'a measure => 'a measure => 'a measure
instantiation
  blinfun :: (real_normed_vector, real_normed_vector) real_normed_vector
  uminus_blinfun == uminus ::
    'a \<Rightarrow>\<^sub>L 'b => 'a \<Rightarrow>\<^sub>L 'b
  zero_blinfun == zero_class.zero :: 'a \<Rightarrow>\<^sub>L 'b
  minus_blinfun == minus ::
    'a \<Rightarrow>\<^sub>L 'b
    => 'a \<Rightarrow>\<^sub>L 'b => 'a \<Rightarrow>\<^sub>L 'b
  plus_blinfun == plus ::
    'a \<Rightarrow>\<^sub>L 'b
    => 'a \<Rightarrow>\<^sub>L 'b => 'a \<Rightarrow>\<^sub>L 'b
  sgn_blinfun == sgn ::
    'a \<Rightarrow>\<^sub>L 'b => 'a \<Rightarrow>\<^sub>L 'b
  norm_blinfun == norm :: 'a \<Rightarrow>\<^sub>L 'b => real
  scaleR_blinfun == scaleR ::
    real => 'a \<Rightarrow>\<^sub>L 'b => 'a \<Rightarrow>\<^sub>L 'b
  dist_blinfun == dist ::
    'a \<Rightarrow>\<^sub>L 'b => 'a \<Rightarrow>\<^sub>L 'b => real
  uniformity_blinfun == uniformity ::
    ('a \<Rightarrow>\<^sub>L 'b * 'a \<Rightarrow>\<^sub>L 'b) filter
  open_blinfun == open :: ('a \<Rightarrow>\<^sub>L 'b) set => bool
### theory "HOL-Analysis.Ordered_Euclidean_Space"
### 3.980s elapsed time, 15.921s cpu time, 2.509s GC time
Loading theory "Landau_Symbols.Landau_More" (required by "Draft.Akra_Bazzi_MethodMoreTemplates" via "Draft.Akra_Bazzi_Method" via "Draft.Akra_Bazzi" via "Draft.Akra_Bazzi_Real" via "Draft.Akra_Bazzi_Asymptotics" via "Draft.Akra_Bazzi_Library")
instantiation
  measure :: (type) complete_lattice
  Inf_measure == Inf :: 'a measure set => 'a measure
  Sup_measure == Sup :: 'a measure set => 'a measure
  top_measure == top :: 'a measure
  inf_measure == inf :: 'a measure => 'a measure => 'a measure
### theory "Landau_Symbols.Landau_More"
### 0.151s elapsed time, 0.598s cpu time, 0.000s GC time
Loading theory "Draft.Akra_Bazzi_Library" (required by "Draft.Akra_Bazzi_MethodMoreTemplates" via "Draft.Akra_Bazzi_Method" via "Draft.Akra_Bazzi" via "Draft.Akra_Bazzi_Real" via "Draft.Akra_Bazzi_Asymptotics")
locale bounded_bilinear
  fixes prod :: "'a => 'b => 'c"  (infixl \<open>**\<close> 70)
  assumes "bounded_bilinear (**)"
### theory "HOL-Analysis.Measure_Space"
### 2.049s elapsed time, 8.202s cpu time, 1.188s GC time
Loading theory "HOL-Analysis.Caratheodory" (required by "Draft.Akra_Bazzi_MethodMoreTemplates" via "Draft.Akra_Bazzi_Method" via "Draft.Master_Theorem" via "HOL-Analysis.Equivalence_Lebesgue_Henstock_Integration" via "HOL-Analysis.Lebesgue_Measure")
### theory "HOL-Analysis.Path_Connected"
### 1.854s elapsed time, 7.422s cpu time, 0.915s GC time
Loading theory "HOL-Analysis.Homotopy" (required by "Draft.Akra_Bazzi_MethodMoreTemplates" via "Draft.Akra_Bazzi_Method" via "Draft.Master_Theorem" via "HOL-Analysis.Equivalence_Lebesgue_Henstock_Integration" via "HOL-Analysis.Homeomorphism")
### theory "Draft.Akra_Bazzi_Library"
### 0.365s elapsed time, 1.463s cpu time, 0.243s GC time
Loading theory "Draft.Akra_Bazzi_Asymptotics" (required by "Draft.Akra_Bazzi_MethodMoreTemplates" via "Draft.Akra_Bazzi_Method" via "Draft.Akra_Bazzi" via "Draft.Akra_Bazzi_Real")
locale bounded_bilinear
  fixes prod :: "'a => 'b => 'c"  (infixl \<open>**\<close> 70)
  assumes "bounded_bilinear (**)"
locale akra_bazzi_asymptotics_bep
  fixes b :: "real"
    and e :: "real"
    and p :: "real"
    and hb :: "real"
  assumes "akra_bazzi_asymptotics_bep b e hb"
### theory "HOL-Analysis.Caratheodory"
### 0.485s elapsed time, 1.950s cpu time, 0.411s GC time
### theory "Draft.Akra_Bazzi_Asymptotics"
### 0.388s elapsed time, 1.581s cpu time, 0.411s GC time
Loading theory "Draft.Akra_Bazzi_Real" (required by "Draft.Akra_Bazzi_MethodMoreTemplates" via "Draft.Akra_Bazzi_Method" via "Draft.Akra_Bazzi")
val it =
   "(%x. 5 * (ln (ln x))\<^sup>2 / (2 * x) powr (15 / 10) * inverse 2)
    : \<omega>(%x. 3 * ln x * ln x / x * ln (ln (ln (ln x)))) ==
    3 = 0 |
    5 * inverse (2 powr (15 / 10)) * inverse 2 ~= 0 &
    pos_primfun_list
     (group_primfuns
       [(LnChain 1, - 1), (LnChain 1, - 1), (LnChain 0, 1),
        (LnChain 4, - 1), (LnChain 2, real 2), (LnChain 0, - (15 / 10))])":
   thm
?a : affine hull ?S ==> aff_dim ?S = int (dim ((+) (- ?a) ` ?S))
### theory "HOL-Analysis.Bounded_Linear_Function"
### 2.186s elapsed time, 8.770s cpu time, 1.325s GC time
Loading theory "HOL-Analysis.Derivative" (required by "Draft.Akra_Bazzi_MethodMoreTemplates" via "Draft.Akra_Bazzi_Method" via "Draft.Master_Theorem" via "HOL-Analysis.Equivalence_Lebesgue_Henstock_Integration" via "HOL-Analysis.Lebesgue_Measure" via "HOL-Analysis.Finite_Product_Measure" via "HOL-Analysis.Binary_Product_Measure" via "HOL-Analysis.Nonnegative_Lebesgue_Integration" via "HOL-Analysis.Borel_Space")
locale akra_bazzi_integral
  fixes integrable :: "(real => real) => real => real => bool"
    and integral :: "(real => real) => real => real => real"
  assumes "akra_bazzi_integral integrable integral"
locale akra_bazzi_params
  fixes k :: "nat"
    and as :: "real list"
    and bs :: "real list"
  assumes "akra_bazzi_params k as bs"
locale akra_bazzi_params_nonzero
  fixes k :: "nat"
    and as :: "real list"
    and bs :: "real list"
  assumes "akra_bazzi_params_nonzero k as bs"
locale akra_bazzi_real_recursion
  fixes as :: "real list"
    and bs :: "real list"
    and hs :: "(real => real) list"
    and k :: "nat"
    and x\<^sub>0 :: "real"
    and x\<^sub>1 :: "real"
    and hb :: "real"
    and e :: "real"
    and p :: "real"
  assumes "akra_bazzi_real_recursion as bs hs k x\<^sub>0 x\<^sub>1 hb e p"
locale akra_bazzi_real
  fixes as :: "real list"
    and bs :: "real list"
    and hs :: "(real => real) list"
    and k :: "nat"
    and x\<^sub>0 :: "real"
    and x\<^sub>1 :: "real"
    and hb :: "real"
    and e :: "real"
    and p :: "real"
    and integrable :: "(real => real) => real => real => bool"
    and integral :: "(real => real) => real => real => real"
    and f :: "real => real"
    and g :: "real => real"
    and C :: "real"
  assumes
    "akra_bazzi_real as bs hs k x\<^sub>0 x\<^sub>1 hb e p integrable
      integral f g C"
locale akra_bazzi_nat_to_real
  fixes as :: "real list"
    and bs :: "real list"
    and hs :: "(real => real) list"
    and k :: "nat"
    and x\<^sub>0 :: "real"
    and x\<^sub>1 :: "real"
    and hb :: "real"
    and e :: "real"
    and p :: "real"
    and f :: "nat => real"
    and g :: "real => real"
  assumes "akra_bazzi_nat_to_real as bs hs k x\<^sub>0 x\<^sub>1 hb e p f g"
locale akra_bazzi_real_lower
  fixes as :: "real list"
    and bs :: "real list"
    and hs :: "(real => real) list"
    and k :: "nat"
    and x\<^sub>0 :: "real"
    and x\<^sub>1 :: "real"
    and hb :: "real"
    and e :: "real"
    and p :: "real"
    and integrable :: "(real => real) => real => real => bool"
    and integral :: "(real => real) => real => real => real"
    and f :: "real => real"
    and g :: "real => real"
    and C :: "real"
    and fb2 :: "real"
    and gb2 :: "real"
    and c2 :: "real"
  assumes
    "akra_bazzi_real_lower as bs hs k x\<^sub>0 x\<^sub>1 hb e p integrable
      integral f g C fb2 gb2 c2"
locale akra_bazzi_real_upper
  fixes as :: "real list"
    and bs :: "real list"
    and hs :: "(real => real) list"
    and k :: "nat"
    and x\<^sub>0 :: "real"
    and x\<^sub>1 :: "real"
    and hb :: "real"
    and e :: "real"
    and p :: "real"
    and integrable :: "(real => real) => real => real => bool"
    and integral :: "(real => real) => real => real => real"
    and f :: "real => real"
    and g :: "real => real"
    and C :: "real"
    and fb1 :: "real"
    and c1 :: "real"
  assumes
    "akra_bazzi_real_upper as bs hs k x\<^sub>0 x\<^sub>1 hb e p integrable
      integral f g C fb1 c1"
### theory "Draft.Akra_Bazzi_Real"
### 0.878s elapsed time, 2.802s cpu time, 0.332s GC time
Loading theory "Draft.Akra_Bazzi" (required by "Draft.Akra_Bazzi_MethodMoreTemplates" via "Draft.Akra_Bazzi_Method")
locale akra_bazzi_recursion
  fixes x\<^sub>0 :: "nat"
    and x\<^sub>1 :: "nat"
    and k :: "nat"
    and as :: "real list"
    and bs :: "real list"
    and ts :: "(nat => nat) list"
    and f :: "nat => real"
  assumes "akra_bazzi_recursion x\<^sub>0 x\<^sub>1 k as bs ts"
locale akra_bazzi_function
  fixes x\<^sub>0 :: "nat"
    and x\<^sub>1 :: "nat"
    and k :: "nat"
    and as :: "real list"
    and bs :: "real list"
    and ts :: "(nat => nat) list"
    and f :: "nat => real"
    and integrable :: "(real => real) => real => real => bool"
    and integral :: "(real => real) => real => real => real"
    and g :: "nat => real"
  assumes
    "akra_bazzi_function x\<^sub>0 x\<^sub>1 k as bs ts f integrable
      integral g"
locale akra_bazzi_lower
  fixes x\<^sub>0 :: "nat"
    and x\<^sub>1 :: "nat"
    and k :: "nat"
    and as :: "real list"
    and bs :: "real list"
    and ts :: "(nat => nat) list"
    and f :: "nat => real"
    and integrable :: "(real => real) => real => real => bool"
    and integral :: "(real => real) => real => real => real"
    and g :: "nat => real"
    and g' :: "real => real"
  assumes
    "akra_bazzi_lower x\<^sub>0 x\<^sub>1 k as bs ts f integrable integral g
      g'"
locale akra_bazzi_upper
  fixes x\<^sub>0 :: "nat"
    and x\<^sub>1 :: "nat"
    and k :: "nat"
    and as :: "real list"
    and bs :: "real list"
    and ts :: "(nat => nat) list"
    and f :: "nat => real"
    and integrable :: "(real => real) => real => real => bool"
    and integral :: "(real => real) => real => real => real"
    and g :: "nat => real"
    and g' :: "real => real"
  assumes
    "akra_bazzi_upper x\<^sub>0 x\<^sub>1 k as bs ts f integrable integral g
      g'"
locale Retracts
  fixes s :: "'a set"
    and h :: "'a => 'b"
    and t :: "'b set"
    and k :: "'b => 'a"
  assumes "Retracts s h t k"
locale akra_bazzi
  fixes x\<^sub>0 :: "nat"
    and x\<^sub>1 :: "nat"
    and k :: "nat"
    and as :: "real list"
    and bs :: "real list"
    and ts :: "(nat => nat) list"
    and f :: "nat => real"
    and integrable :: "(real => real) => real => real => bool"
    and integral :: "(real => real) => real => real => real"
    and g :: "nat => real"
    and g' :: "real => real"
  assumes
    "akra_bazzi x\<^sub>0 x\<^sub>1 k as bs ts f integrable integral g g'"
### theory "Draft.Akra_Bazzi"
### 1.078s elapsed time, 3.359s cpu time, 0.499s GC time
### theory "HOL-Analysis.Homotopy"
### 2.493s elapsed time, 8.204s cpu time, 1.508s GC time
Loading theory "HOL-Analysis.Homeomorphism" (required by "Draft.Akra_Bazzi_MethodMoreTemplates" via "Draft.Akra_Bazzi_Method" via "Draft.Master_Theorem" via "HOL-Analysis.Equivalence_Lebesgue_Henstock_Integration")
### theory "HOL-Analysis.Derivative"
### 2.124s elapsed time, 6.494s cpu time, 1.097s GC time
Loading theory "HOL-Analysis.Borel_Space" (required by "Draft.Akra_Bazzi_MethodMoreTemplates" via "Draft.Akra_Bazzi_Method" via "Draft.Master_Theorem" via "HOL-Analysis.Equivalence_Lebesgue_Henstock_Integration" via "HOL-Analysis.Lebesgue_Measure" via "HOL-Analysis.Finite_Product_Measure" via "HOL-Analysis.Binary_Product_Measure" via "HOL-Analysis.Nonnegative_Lebesgue_Integration")
Loading theory "HOL-Analysis.Cartesian_Euclidean_Space" (required by "Draft.Akra_Bazzi_MethodMoreTemplates" via "Draft.Akra_Bazzi_Method" via "Draft.Master_Theorem" via "HOL-Analysis.Equivalence_Lebesgue_Henstock_Integration")
### theory "HOL-Analysis.Cartesian_Euclidean_Space"
### 0.267s elapsed time, 0.802s cpu time, 0.000s GC time
### theory "HOL-Analysis.Homeomorphism"
### 0.537s elapsed time, 1.519s cpu time, 0.344s GC time
### theory "HOL-Analysis.Borel_Space"
### 1.551s elapsed time, 2.562s cpu time, 0.533s GC time
Loading theory "HOL-Analysis.Nonnegative_Lebesgue_Integration" (required by "Draft.Akra_Bazzi_MethodMoreTemplates" via "Draft.Akra_Bazzi_Method" via "Draft.Master_Theorem" via "HOL-Analysis.Equivalence_Lebesgue_Henstock_Integration" via "HOL-Analysis.Lebesgue_Measure" via "HOL-Analysis.Finite_Product_Measure" via "HOL-Analysis.Binary_Product_Measure")
Loading theory "HOL-Analysis.Regularity" (required by "Draft.Akra_Bazzi_MethodMoreTemplates" via "Draft.Akra_Bazzi_Method" via "Draft.Master_Theorem" via "HOL-Analysis.Equivalence_Lebesgue_Henstock_Integration" via "HOL-Analysis.Lebesgue_Measure")
### theory "HOL-Analysis.Regularity"
### 0.462s elapsed time, 0.927s cpu time, 0.000s GC time
### theory "HOL-Analysis.Nonnegative_Lebesgue_Integration"
### 1.189s elapsed time, 1.822s cpu time, 0.248s GC time
Loading theory "HOL-Analysis.Binary_Product_Measure" (required by "Draft.Akra_Bazzi_MethodMoreTemplates" via "Draft.Akra_Bazzi_Method" via "Draft.Master_Theorem" via "HOL-Analysis.Equivalence_Lebesgue_Henstock_Integration" via "HOL-Analysis.Lebesgue_Measure" via "HOL-Analysis.Finite_Product_Measure")
locale pair_sigma_finite
  fixes M1 :: "'a measure"
    and M2 :: "'b measure"
  assumes "pair_sigma_finite M1 M2"
### theory "HOL-Analysis.Binary_Product_Measure"
### 0.411s elapsed time, 0.560s cpu time, 0.197s GC time
Loading theory "HOL-Analysis.Finite_Product_Measure" (required by "Draft.Akra_Bazzi_MethodMoreTemplates" via "Draft.Akra_Bazzi_Method" via "Draft.Master_Theorem" via "HOL-Analysis.Equivalence_Lebesgue_Henstock_Integration" via "HOL-Analysis.Lebesgue_Measure")
locale product_sigma_finite
  fixes M :: "'i => 'a measure"
  assumes "product_sigma_finite M"
locale finite_product_sigma_finite
  fixes M :: "'i => 'a measure"
    and I :: "'i set"
  assumes "finite_product_sigma_finite M I"
### theory "HOL-Analysis.Finite_Product_Measure"
### 0.642s elapsed time, 0.788s cpu time, 0.193s GC time
Loading theory "HOL-Analysis.Bochner_Integration" (required by "Draft.Akra_Bazzi_MethodMoreTemplates" via "Draft.Akra_Bazzi_Method" via "Draft.Master_Theorem" via "HOL-Analysis.Equivalence_Lebesgue_Henstock_Integration" via "HOL-Analysis.Lebesgue_Measure" via "HOL-Analysis.Complete_Measure")
Proofs for inductive predicate(s) "simple_bochner_integrable"
  Proving monotonicity ...
Proofs for inductive predicate(s) "has_bochner_integral"
  Proving monotonicity ...
Proofs for inductive predicate(s) "integrable"
  Proving monotonicity ...
### theory "HOL-Analysis.Bochner_Integration"
### 0.996s elapsed time, 1.154s cpu time, 0.208s GC time
Loading theory "HOL-Analysis.Complete_Measure" (required by "Draft.Akra_Bazzi_MethodMoreTemplates" via "Draft.Akra_Bazzi_Method" via "Draft.Master_Theorem" via "HOL-Analysis.Equivalence_Lebesgue_Henstock_Integration" via "HOL-Analysis.Lebesgue_Measure")
Loading theory "HOL-Analysis.Radon_Nikodym" (required by "Draft.Akra_Bazzi_MethodMoreTemplates" via "Draft.Akra_Bazzi_Method" via "Draft.Master_Theorem" via "HOL-Analysis.Equivalence_Lebesgue_Henstock_Integration" via "HOL-Analysis.Set_Integral")
locale complete_measure
  fixes M :: "'a measure"
  assumes "complete_measure M"
locale semifinite_measure
  fixes M :: "'a measure"
  assumes "semifinite_measure M"
locale locally_determined_measure
  fixes M :: "'a measure"
  assumes "locally_determined_measure M"
locale cld_measure
  fixes M :: "'a measure"
  assumes "cld_measure M"
### theory "HOL-Analysis.Radon_Nikodym"
### 0.297s elapsed time, 0.714s cpu time, 0.241s GC time
Loading theory "HOL-Analysis.Set_Integral" (required by "Draft.Akra_Bazzi_MethodMoreTemplates" via "Draft.Akra_Bazzi_Method" via "Draft.Master_Theorem" via "HOL-Analysis.Equivalence_Lebesgue_Henstock_Integration")
### theory "HOL-Analysis.Complete_Measure"
### 0.433s elapsed time, 0.990s cpu time, 0.241s GC time
Loading theory "HOL-Analysis.Lebesgue_Measure" (required by "Draft.Akra_Bazzi_MethodMoreTemplates" via "Draft.Akra_Bazzi_Method" via "Draft.Master_Theorem" via "HOL-Analysis.Equivalence_Lebesgue_Henstock_Integration")
### theory "HOL-Analysis.Set_Integral"
### 0.470s elapsed time, 1.052s cpu time, 0.220s GC time
Proofs for inductive predicate(s) "fsigma"
  Proving monotonicity ...
Proofs for inductive predicate(s) "gdelta"
  Proving monotonicity ...
### theory "HOL-Analysis.Lebesgue_Measure"
### 1.178s elapsed time, 1.747s cpu time, 0.391s GC time
Loading theory "HOL-Analysis.Henstock_Kurzweil_Integration" (required by "Draft.Akra_Bazzi_MethodMoreTemplates" via "Draft.Akra_Bazzi_Method" via "Draft.Master_Theorem" via "HOL-Analysis.Equivalence_Lebesgue_Henstock_Integration")
### Cannot skip proof of schematic goal statement
### theory "HOL-Analysis.Henstock_Kurzweil_Integration"
### 3.971s elapsed time, 9.607s cpu time, 7.676s GC time
Loading theory "HOL-Analysis.Equivalence_Lebesgue_Henstock_Integration" (required by "Draft.Akra_Bazzi_MethodMoreTemplates" via "Draft.Akra_Bazzi_Method" via "Draft.Master_Theorem")
### theory "HOL-Analysis.Equivalence_Lebesgue_Henstock_Integration"
### 1.687s elapsed time, 1.827s cpu time, 0.188s GC time
Loading theory "Draft.Master_Theorem" (required by "Draft.Akra_Bazzi_MethodMoreTemplates" via "Draft.Akra_Bazzi_Method")
locale master_theorem_function
  fixes x\<^sub>0 :: "nat"
    and x\<^sub>1 :: "nat"
    and k :: "nat"
    and as :: "real list"
    and bs :: "real list"
    and ts :: "(nat => nat) list"
    and f :: "nat => real"
    and g :: "nat => real"
  assumes "master_theorem_function x\<^sub>0 x\<^sub>1 k as bs ts f g"
### theory "Draft.Master_Theorem"
### 0.578s elapsed time, 0.800s cpu time, 0.256s GC time
Loading theory "Draft.Akra_Bazzi_Method" (required by "Draft.Akra_Bazzi_MethodMoreTemplates")
locale master_theorem_function
  fixes x\<^sub>0 :: "nat"
    and x\<^sub>1 :: "nat"
    and k :: "nat"
    and as :: "real list"
    and bs :: "real list"
    and ts :: "(nat => nat) list"
    and f :: "nat => real"
    and g :: "nat => real"
  assumes "master_theorem_function x\<^sub>0 x\<^sub>1 k as bs ts f g"
### ML warning (line 369 of "$AFP/Akra_Bazzi/Akra_Bazzi_Method.thy"):
### Pattern is not exhaustive.
val generalize_master_thm = fn: Proof.context -> thm -> thm
val generalize_master_thm' = fn:
   binding * thm -> Proof.context -> local_theory
signature AKRA_BAZZI =
  sig
    val akra_bazzi_measure_tac: Proof.context -> int -> tactic
    val akra_bazzi_relation_tac: Proof.context -> int -> tactic
    val akra_bazzi_sum_tac: Proof.context -> int -> tactic
    val akra_bazzi_term_tac: Proof.context -> int -> tactic
    val akra_bazzi_termination_tac: Proof.context -> int -> tactic
    val master_theorem_function_tac: bool -> Proof.context -> int -> tactic
    val master_theorem_tac:
       string option ->
         bool ->
           thm option ->
             term option ->
               term option -> term option -> Proof.context -> int -> tactic
    val setup_master_theorem:
       Context.generic * Token.T list ->
         (Proof.context -> Method.method) * (Context.generic * Token.T list)
  end
structure Akra_Bazzi: AKRA_BAZZI
### theory "Draft.Akra_Bazzi_Method"
### 0.652s elapsed time, 0.721s cpu time, 0.097s GC time
Loading theory "Draft.Akra_Bazzi_MethodMoreTemplates"
val templateLemmas =
   [("Akra_Bazzi_Method.akra_bazzi_termsI'",
     "akra_bazzi_terms ?x\<^sub>0 ?x\<^sub>1 [] []",
     template_predicate
      (
         template_app
          (template_app
            (template_app
              (template_app (template_hole 2, template_var 1),
               template_var 0),
             template_hole 1),
           template_hole 0)
         )),
    ("Akra_Bazzi_Method.CLAMP_aux", "(0::?'a) * ?a = (0::?'a)",
     template_equation
      (template_app
        (template_app (template_hole 1, template_hole 0), template_var 0),
       template_hole 0)),
    ("Akra_Bazzi_Method.CLAMP_aux", "?a * (0::?'a) = (0::?'a)",
     template_equation
      (template_app
        (template_app (template_hole 1, template_var 0), template_hole 0),
       template_hole 0)),
    ("Akra_Bazzi_Method.CLAMP_aux", "?a - (0::?'a) = ?a",
     template_equation
      (template_app
        (template_app (template_hole 1, template_var 0), template_hole 0),
       template_var 0)),
    ("Akra_Bazzi_Method.CLAMP_aux", "(0::?'a) + ?a = ?a",
     template_equation
      (template_app
        (template_app (template_hole 1, template_hole 0), template_var 0),
       template_var 0)),
    ("Akra_Bazzi_Method.CLAMP_aux", "?a + (0::?'a) = ?a",
     template_equation
      (template_app
        (template_app (template_hole 1, template_var 0), template_hole 0),
       template_var 0)),
    ("Akra_Bazzi_Method.CLAMP_aux", "num.One * ?n = ?n",
     template_equation
      (template_app
        (template_app (template_hole 1, template_hole 0), template_var 0),
       template_var 0)),
    ("Akra_Bazzi_Method.CLAMP_aux", "?m * num.One = ?m",
     template_equation
      (template_app
        (template_app (template_hole 1, template_var 0), template_hole 0),
       template_var 0)),
    ("Akra_Bazzi_Method.eval_akra_bazzi_le_list_ex",
     "list_ex ?P [] = False",
     template_equation
      (template_app
        (template_app (template_hole 2, template_var 0), template_hole 1),
       template_hole 0)),
    ("Akra_Bazzi_Method.CLAMP_aux", "(0::?'a) - ?a = - ?a",
     template_equation
      (template_app
        (template_app (template_hole 2, template_hole 1), template_var 0),
       template_app (template_hole 0, template_var 0))),
    ("Akra_Bazzi_Method.CLAMP_aux", "of_nat (numeral ?n) = numeral ?n",
     template_equation
      (template_app
        (template_hole 2, template_app (template_hole 1, template_var 0)),
       template_app (template_hole 0, template_var 0))),
    ("Akra_Bazzi_Method.CLAMP_aux", "\<bar>numeral ?n\<bar> = numeral ?n",
     template_equation
      (template_app
        (template_hole 1, template_app (template_hole 0, template_var 0)),
       template_app (template_hole 0, template_var 0))),
    ("Akra_Bazzi_Method.MASTER_BOUND_UNCLAMP",
     "??.Akra_Bazzi_Method.CLAMP (??.Akra_Bazzi_Method.CLAMP ?f) =
      ??.Akra_Bazzi_Method.CLAMP ?f",
     template_equation
      (template_app
        (template_hole 0, template_app (template_hole 0, template_var 0)),
       template_app (template_hole 0, template_var 0))),
    ("Akra_Bazzi_Method.propagate_CLAMP",
     "??.Akra_Bazzi_Method.CLAMP' (??.Akra_Bazzi_Method.CLAMP ?f) =
      ??.Akra_Bazzi_Method.CLAMP' ?f",
     template_equation
      (template_app
        (template_hole 1, template_app (template_hole 0, template_var 0)),
       template_app (template_hole 1, template_var 0))),
    ("Akra_Bazzi_Method.ball_set_intros", "ALL x:set []. ?P x",
     template_predicate
      (
         template_app
          (template_app
            (template_hole 2,
             template_app (template_hole 1, template_hole 0)),
           t_empty)
         )),
    ("Akra_Bazzi_Method.CLAMP_aux",
     "neg_numeral_class.dbl (numeral ?k) = numeral (num.Bit0 ?k)",
     template_equation
      (template_app
        (template_hole 2, template_app (template_hole 1, template_var 0)),
       template_app
        (template_hole 1, template_app (template_hole 0, template_var 0)))),
    ("Akra_Bazzi_Method.CLAMP_aux",
     "neg_numeral_class.dbl_dec (numeral ?k) = numeral (Num.BitM ?k)",
     template_equation
      (template_app
        (template_hole 2, template_app (template_hole 1, template_var 0)),
       template_app
        (template_hole 1, template_app (template_hole 0, template_var 0)))),
    ("Akra_Bazzi_Method.CLAMP_aux",
     "neg_numeral_class.dbl_inc (numeral ?k) = numeral (num.Bit1 ?k)",
     template_equation
      (template_app
        (template_hole 2, template_app (template_hole 1, template_var 0)),
       template_app
        (template_hole 1, template_app (template_hole 0, template_var 0)))),
    ("Akra_Bazzi_Method.CLAMP_aux", "\<bar>- numeral ?n\<bar> = numeral ?n",
     template_equation
      (template_app
        (template_hole 2,
         template_app
          (template_hole 1,
           template_app (template_hole 0, template_var 0))),
       template_app (template_hole 0, template_var 0))),
    ("Akra_Bazzi_Method.CLAMP_aux",
     "Num.BitM (num.Bit0 ?n) = num.Bit1 (Num.BitM ?n)",
     template_equation
      (template_app
        (template_hole 2, template_app (template_hole 1, template_var 0)),
       template_app
        (template_hole 0, template_app (template_hole 2, template_var 0)))),
    ("Akra_Bazzi_Method.CLAMP_aux",
     "Num.BitM (num.Bit1 ?n) = num.Bit1 (num.Bit0 ?n)",
     template_equation
      (template_app
        (template_hole 2, template_app (template_hole 1, template_var 0)),
       template_app
        (template_hole 1, template_app (template_hole 0, template_var 0)))),
    ("Akra_Bazzi_Method.CLAMP_aux", "num.One + num.Bit0 ?n = num.Bit1 ?n",
     template_equation
      (template_app
        (template_app (template_hole 3, template_hole 2),
         template_app (template_hole 1, template_var 0)),
       template_app (template_hole 0, template_var 0))),
    ("Akra_Bazzi_Method.CLAMP_aux", "num.Bit0 ?m + num.One = num.Bit1 ?m",
     template_equation
      (template_app
        (template_app
          (template_hole 3, template_app (template_hole 2, template_var 0)),
         template_hole 1),
       template_app (template_hole 0, template_var 0))),
    ("Akra_Bazzi_Method.CLAMP_aux",
     "neg_numeral_class.sub (num.Bit0 ?k) num.One = numeral (Num.BitM ?k)",
     template_equation
      (template_app
        (template_app
          (template_hole 4, template_app (template_hole 3, template_var 0)),
         template_hole 2),
       template_app
        (template_hole 1, template_app (template_hole 0, template_var 0)))),
    ("Akra_Bazzi_Method.CLAMP_aux",
     "neg_numeral_class.sub (num.Bit1 ?k) num.One = numeral (num.Bit0 ?k)",
     template_equation
      (template_app
        (template_app
          (template_hole 4, template_app (template_hole 3, template_var 0)),
         template_hole 2),
       template_app
        (template_hole 1, template_app (template_hole 0, template_var 0)))),
    ("Akra_Bazzi_Method.MASTER_BOUND_postproc",
     "??.Akra_Bazzi_Method.CLAMP (??.Akra_Bazzi_Method.MASTER_BOUND' ?a 0) =
      ??.Akra_Bazzi_Method.CLAMP (??.Akra_Bazzi_Method.MASTER_BOUND'' ?a)",
     template_equation
      (template_app
        (template_hole 3,
         template_app
          (template_app (template_hole 2, template_var 0),
           template_hole 1)),
       template_app
        (template_hole 3, template_app (template_hole 0, template_var 0)))),
    ("Akra_Bazzi_Method.eval_length",
     "length (?x # ?xs) = Suc (length ?xs)",
     template_equation
      (template_app
        (template_hole 2,
         template_app
          (template_app (template_hole 1, template_var 1), template_var 0)),
       template_app
        (template_hole 0, template_app (template_hole 2, template_var 0)))),
    ("Akra_Bazzi_Method.eval_akra_bazzi_le_sum_list",
     "(?x <= sum_list []) = (?x <= (0::?'a))",
     template_equation
      (template_app
        (template_app (template_hole 3, template_var 0),
         template_app (template_hole 2, template_hole 1)),
       template_app
        (template_app (template_hole 3, template_var 0), template_hole 0))),
    ("Akra_Bazzi_Method.eval_akra_bazzi_le_list_ex",
     "list_ex ?P [?x] = ?P ?x",
     template_equation
      (template_app
        (template_app (template_hole 2, template_var 1),
         template_app
          (template_app (template_hole 1, template_var 0),
           template_hole 0)),
       template_app (template_var 1, template_var 0))),
    ("Akra_Bazzi_Method.ball_set_simps", "(ALL x:set []. ?P x) = True",
     template_equation
      (template_app
        (template_app
          (template_hole 3,
           template_app (template_hole 2, template_hole 1)),
         t_empty),
       template_hole 0)),
    ("Akra_Bazzi_Method.bex_set_simps", "(EX x:set []. ?P x) = False",
     template_equation
      (template_app
        (template_app
          (template_hole 3,
           template_app (template_hole 2, template_hole 1)),
         t_empty),
       template_hole 0)),
    ("Akra_Bazzi_Method.CLAMP_aux",
     "neg_numeral_class.dbl (- numeral ?k) =
      - neg_numeral_class.dbl (numeral ?k)",
     template_equation
      (template_app
        (template_hole 2,
         template_app
          (template_hole 1,
           template_app (template_hole 0, template_var 0))),
       template_app
        (template_hole 1,
         template_app
          (template_hole 2,
           template_app (template_hole 0, template_var 0))))),
    ("Akra_Bazzi_Method.CLAMP_aux",
     "neg_numeral_class.dbl_dec (- numeral ?k) =
      - neg_numeral_class.dbl_inc (numeral ?k)",
     template_equation
      (template_app
        (template_hole 3,
         template_app
          (template_hole 2,
           template_app (template_hole 1, template_var 0))),
       template_app
        (template_hole 2,
         template_app
          (template_hole 0,
           template_app (template_hole 1, template_var 0))))),
    ("Akra_Bazzi_Method.CLAMP_aux",
     "neg_numeral_class.dbl_inc (- numeral ?k) =
      - neg_numeral_class.dbl_dec (numeral ?k)",
     template_equation
      (template_app
        (template_hole 3,
         template_app
          (template_hole 2,
           template_app (template_hole 1, template_var 0))),
       template_app
        (template_hole 2,
         template_app
          (template_hole 0,
           template_app (template_hole 1, template_var 0))))),
    ("Akra_Bazzi_Method.CLAMP_aux",
     "neg_numeral_class.sub num.One (num.Bit0 ?l) =
      - numeral (Num.BitM ?l)",
     template_equation
      (template_app
        (template_app (template_hole 5, template_hole 4),
         template_app (template_hole 3, template_var 0)),
       template_app
        (template_hole 2,
         template_app
          (template_hole 1,
           template_app (template_hole 0, template_var 0))))),
    ("Akra_Bazzi_Method.CLAMP_aux",
     "neg_numeral_class.sub num.One (num.Bit1 ?l) =
      - numeral (num.Bit0 ?l)",
     template_equation
      (template_app
        (template_app (template_hole 5, template_hole 4),
         template_app (template_hole 3, template_var 0)),
       template_app
        (template_hole 2,
         template_app
          (template_hole 1,
           template_app (template_hole 0, template_var 0))))),
    ("Akra_Bazzi_Method.CLAMP_aux",
     "numeral ?m - numeral ?n = neg_numeral_class.sub ?m ?n",
     template_equation
      (template_app
        (template_app
          (template_hole 2, template_app (template_hole 1, template_var 1)),
         template_app (template_hole 1, template_var 0)),
       template_app
        (template_app (template_hole 0, template_var 1), template_var 0))),
    ("Akra_Bazzi_Method.CLAMP_aux", "of_nat (?m ^ ?n) = of_nat ?m ^ ?n",
     template_equation
      (template_app
        (template_hole 2,
         template_app
          (template_app (template_hole 1, template_var 1), template_var 0)),
       template_app
        (template_app
          (template_hole 0, template_app (template_hole 2, template_var 1)),
         template_var 0))),
    ("Akra_Bazzi_Method.CLAMP_aux",
     "num.One + num.Bit1 ?n = num.Bit0 (?n + num.One)",
     template_equation
      (template_app
        (template_app (template_hole 3, template_hole 2),
         template_app (template_hole 1, template_var 0)),
       template_app
        (template_hole 0,
         template_app
          (template_app (template_hole 3, template_var 0),
           template_hole 2)))),
    ("Akra_Bazzi_Method.CLAMP_aux",
     "num.Bit1 ?m + num.One = num.Bit0 (?m + num.One)",
     template_equation
      (template_app
        (template_app
          (template_hole 3, template_app (template_hole 2, template_var 0)),
         template_hole 1),
       template_app
        (template_hole 0,
         template_app
          (template_app (template_hole 3, template_var 0),
           template_hole 1)))),
    ("Akra_Bazzi_Method.CLAMP_aux",
     "numeral ?m + numeral ?n = numeral (?m + ?n)",
     template_equation
      (template_app
        (template_app
          (template_hole 2, template_app (template_hole 1, template_var 1)),
         template_app (template_hole 1, template_var 0)),
       template_app
        (template_hole 1,
         template_app
          (template_app (template_hole 0, template_var 1),
           template_var 0)))),
    ("Akra_Bazzi_Method.CLAMP_aux",
     "neg_numeral_class.sub (num.Bit0 ?k) (num.Bit0 ?l) =
      neg_numeral_class.dbl (neg_numeral_class.sub ?k ?l)",
     template_equation
      (template_app
        (template_app
          (template_hole 2, template_app (template_hole 1, template_var 1)),
         template_app (template_hole 1, template_var 0)),
       template_app
        (template_hole 0,
         template_app
          (template_app (template_hole 2, template_var 1),
           template_var 0)))),
    ("Akra_Bazzi_Method.CLAMP_aux",
     "neg_numeral_class.sub (num.Bit0 ?k) (num.Bit1 ?l) =
      neg_numeral_class.dbl_dec (neg_numeral_class.sub ?k ?l)",
     template_equation
      (template_app
        (template_app
          (template_hole 3, template_app (template_hole 2, template_var 1)),
         template_app (template_hole 1, template_var 0)),
       template_app
        (template_hole 0,
         template_app
          (template_app (template_hole 3, template_var 1),
           template_var 0)))),
    ("Akra_Bazzi_Method.CLAMP_aux",
     "neg_numeral_class.sub (num.Bit1 ?k) (num.Bit0 ?l) =
      neg_numeral_class.dbl_inc (neg_numeral_class.sub ?k ?l)",
     template_equation
      (template_app
        (template_app
          (template_hole 3, template_app (template_hole 2, template_var 1)),
         template_app (template_hole 1, template_var 0)),
       template_app
        (template_hole 0,
         template_app
          (template_app (template_hole 3, template_var 1),
           template_var 0)))),
    ("Akra_Bazzi_Method.CLAMP_aux",
     "neg_numeral_class.sub (num.Bit1 ?k) (num.Bit1 ?l) =
      neg_numeral_class.dbl (neg_numeral_class.sub ?k ?l)",
     template_equation
      (template_app
        (template_app
          (template_hole 2, template_app (template_hole 1, template_var 1)),
         template_app (template_hole 1, template_var 0)),
       template_app
        (template_hole 0,
         template_app
          (template_app (template_hole 2, template_var 1),
           template_var 0)))),
    ("Akra_Bazzi_Method.CLAMP_aux",
     "numeral ?m + - numeral ?n = neg_numeral_class.sub ?m ?n",
     template_equation
      (template_app
        (template_app
          (template_hole 3, template_app (template_hole 2, template_var 1)),
         template_app
          (template_hole 1,
           template_app (template_hole 2, template_var 0))),
       template_app
        (template_app (template_hole 0, template_var 1), template_var 0))),
    ("Akra_Bazzi_Method.CLAMP_aux",
     "- numeral ?m + numeral ?n = neg_numeral_class.sub ?n ?m",
     template_equation
      (template_app
        (template_app
          (template_hole 3,
           template_app
            (template_hole 2,
             template_app (template_hole 1, template_var 1))),
         template_app (template_hole 1, template_var 0)),
       template_app
        (template_app (template_hole 0, template_var 0), template_var 1))),
    ("Akra_Bazzi_Method.CLAMP_aux",
     "of_nat (?m * ?n) = of_nat ?m * of_nat ?n",
     template_equation
      (template_app
        (template_hole 2,
         template_app
          (template_app (template_hole 1, template_var 1), template_var 0)),
       template_app
        (template_app
          (template_hole 0, template_app (template_hole 2, template_var 1)),
         template_app (template_hole 2, template_var 0)))),
    ("Akra_Bazzi_Method.CLAMP_aux",
     "numeral ?m * numeral ?n = numeral (?m * ?n)",
     template_equation
      (template_app
        (template_app
          (template_hole 2, template_app (template_hole 1, template_var 1)),
         template_app (template_hole 1, template_var 0)),
       template_app
        (template_hole 1,
         template_app
          (template_app (template_hole 0, template_var 1),
           template_var 0)))),
    ("Akra_Bazzi_Method.MASTER_BOUND_postproc",
     "??.Akra_Bazzi_Method.CLAMP (??.Akra_Bazzi_Method.MASTER_BOUND'' ?a) =
      ??.Akra_Bazzi_Method.CLAMP (%x. real x powr ?a)",
     template_equation
      (template_app
        (template_hole 3, template_app (template_hole 2, template_var 0)),
       template_app (template_hole 3, t_empty))),
    ("Akra_Bazzi_Method.CLAMP_aux",
     "num.Bit0 ?m + num.Bit0 ?n = num.Bit0 (?m + ?n)",
     template_equation
      (template_app
        (template_app
          (template_hole 1, template_app (template_hole 0, template_var 1)),
         template_app (template_hole 0, template_var 0)),
       template_app
        (template_hole 0,
         template_app
          (template_app (template_hole 1, template_var 1),
           template_var 0)))),
    ("Akra_Bazzi_Method.CLAMP_aux",
     "num.Bit0 ?m + num.Bit1 ?n = num.Bit1 (?m + ?n)",
     template_equation
      (template_app
        (template_app
          (template_hole 2, template_app (template_hole 1, template_var 1)),
         template_app (template_hole 0, template_var 0)),
       template_app
        (template_hole 0,
         template_app
          (template_app (template_hole 2, template_var 1),
           template_var 0)))),
    ("Akra_Bazzi_Method.CLAMP_aux",
     "num.Bit1 ?m + num.Bit0 ?n = num.Bit1 (?m + ?n)",
     template_equation
      (template_app
        (template_app
          (template_hole 2, template_app (template_hole 1, template_var 1)),
         template_app (template_hole 0, template_var 0)),
       template_app
        (template_hole 1,
         template_app
          (template_app (template_hole 2, template_var 1),
           template_var 0)))),
    ("Akra_Bazzi_Method.eval_akra_bazzi_le_sum_list",
     "(?x <= ?z + sum_list []) = (?x <= ?z)",
     template_equation
      (template_app
        (template_app (template_hole 3, template_var 1),
         template_app
          (template_app (template_hole 2, template_var 0),
           template_app (template_hole 1, template_hole 0))),
       template_app
        (template_app (template_hole 3, template_var 1), template_var 0))),
    ("Akra_Bazzi_Method.CLAMP_aux",
     "numeral ?m - - numeral ?n = numeral (?m + ?n)",
     template_equation
      (template_app
        (template_app
          (template_hole 3, template_app (template_hole 2, template_var 1)),
         template_app
          (template_hole 1,
           template_app (template_hole 2, template_var 0))),
       template_app
        (template_hole 2,
         template_app
          (template_app (template_hole 0, template_var 1),
           template_var 0)))),
    ("Akra_Bazzi_Method.CLAMP_aux",
     "- numeral ?m - - numeral ?n = neg_numeral_class.sub ?n ?m",
     template_equation
      (template_app
        (template_app
          (template_hole 3,
           template_app
            (template_hole 2,
             template_app (template_hole 1, template_var 1))),
         template_app
          (template_hole 2,
           template_app (template_hole 1, template_var 0))),
       template_app
        (template_app (template_hole 0, template_var 0), template_var 1))),
    ("Akra_Bazzi_Method.CLAMP_aux",
     "num.Bit0 ?m * num.Bit0 ?n = num.Bit0 (num.Bit0 (?m * ?n))",
     template_equation
      (template_app
        (template_app
          (template_hole 1, template_app (template_hole 0, template_var 1)),
         template_app (template_hole 0, template_var 0)),
       template_app
        (template_hole 0,
         template_app
          (template_hole 0,
           template_app
            (template_app (template_hole 1, template_var 1),
             template_var 0))))),
    ("Akra_Bazzi_Method.CLAMP_aux",
     "num.Bit0 ?m * num.Bit1 ?n = num.Bit0 (?m * num.Bit1 ?n)",
     template_equation
      (template_app
        (template_app
          (template_hole 2, template_app (template_hole 1, template_var 1)),
         template_app (template_hole 0, template_var 0)),
       template_app
        (template_hole 1,
         template_app
          (template_app (template_hole 2, template_var 1),
           template_app (template_hole 0, template_var 0))))),
    ("Akra_Bazzi_Method.CLAMP_aux",
     "num.Bit1 ?m * num.Bit0 ?n = num.Bit0 (num.Bit1 ?m * ?n)",
     template_equation
      (template_app
        (template_app
          (template_hole 2, template_app (template_hole 1, template_var 1)),
         template_app (template_hole 0, template_var 0)),
       template_app
        (template_hole 0,
         template_app
          (template_app
            (template_hole 2,
             template_app (template_hole 1, template_var 1)),
           template_var 0)))),
    ("Akra_Bazzi_Method.akra_bazzi_termination_simps",
     "real ?x / ?b = 1 / ?b * real ?x",
     template_equation
      (template_app
        (template_app
          (template_hole 3, template_app (template_hole 2, template_var 1)),
         template_var 0),
       template_app
        (template_app
          (template_hole 1,
           template_app
            (template_app (template_hole 3, template_hole 0),
             template_var 0)),
         template_app (template_hole 2, template_var 1)))),
    ("Akra_Bazzi_Method.ln_1_imp_less_3", "ln ?x = 1 ==> ?x < 3",
     template_implication
      ([template_equation
         (template_app (template_hole 5, template_var 0), template_hole 4)],
       template_inequation
        (less_than, template_var 0,
         template_app
          (template_hole 2,
           template_app (template_hole 1, template_hole 0))))),
    ("Akra_Bazzi_Method.CLAMP_aux",
     "numeral ?m * - numeral ?n = - numeral (?m * ?n)",
     template_equation
      (template_app
        (template_app
          (template_hole 3, template_app (template_hole 2, template_var 1)),
         template_app
          (template_hole 1,
           template_app (template_hole 2, template_var 0))),
       template_app
        (template_hole 1,
         template_app
          (template_hole 2,
           template_app
            (template_app (template_hole 0, template_var 1),
             template_var 0))))),
    ("Akra_Bazzi_Method.CLAMP_aux",
     "- numeral ?m * numeral ?n = - numeral (?m * ?n)",
     template_equation
      (template_app
        (template_app
          (template_hole 3,
           template_app
            (template_hole 2,
             template_app (template_hole 1, template_var 1))),
         template_app (template_hole 1, template_var 0)),
       template_app
        (template_hole 2,
         template_app
          (template_hole 1,
           template_app
            (template_app (template_hole 0, template_var 1),
             template_var 0))))),
    ("Akra_Bazzi_Method.CLAMP_aux",
     "- numeral ?m * - numeral ?n = numeral (?m * ?n)",
     template_equation
      (template_app
        (template_app
          (template_hole 3,
           template_app
            (template_hole 2,
             template_app (template_hole 1, template_var 1))),
         template_app
          (template_hole 2,
           template_app (template_hole 1, template_var 0))),
       template_app
        (template_hole 1,
         template_app
          (template_app (template_hole 0, template_var 1),
           template_var 0)))),
    ("Akra_Bazzi_Method.CLAMP_aux",
     "- numeral ?m - numeral ?n = - numeral (?m + ?n)",
     template_equation
      (template_app
        (template_app
          (template_hole 3,
           template_app
            (template_hole 2,
             template_app (template_hole 1, template_var 1))),
         template_app (template_hole 1, template_var 0)),
       template_app
        (template_hole 2,
         template_app
          (template_hole 1,
           template_app
            (template_app (template_hole 0, template_var 1),
             template_var 0))))),
    ("Akra_Bazzi_Method.MASTER_BOUND_postproc",
     "??.Akra_Bazzi_Method.CLAMP
       (??.Akra_Bazzi_Method.MASTER_BOUND'' (numeral ?n)) =
      ??.Akra_Bazzi_Method.CLAMP (%x. real x ^ numeral ?n)",
     template_equation
      (template_app
        (template_hole 5,
         template_app
          (template_hole 4,
           template_app (template_hole 3, template_var 0))),
       template_app (template_hole 5, t_empty))),
    ("Akra_Bazzi_Method.propagate_CLAMP",
     "??.Akra_Bazzi_Method.CLAMP (%x. inverse (?f x)) =
      ??.Akra_Bazzi_Method.CLAMP'
       (%x. inverse (??.Akra_Bazzi_Method.CLAMP ?f x))",
     template_equation
      (template_app (template_hole 2, t_empty),
       template_app (template_hole 0, t_empty))),
    ("Akra_Bazzi_Method.propagate_CLAMP",
     "??.Akra_Bazzi_Method.CLAMP (%x. real x powr ?a) =
      ??.Akra_Bazzi_Method.CLAMP'
       (??.Akra_Bazzi_Method.MASTER_BOUND ?a 0 0)",
     template_equation
      (template_app (template_hole 5, t_empty),
       template_app
        (template_hole 2,
         template_app
          (template_app
            (template_app (template_hole 1, template_var 0),
             template_hole 0),
           template_hole 0)))),
    ("Akra_Bazzi_Method.CLAMP_aux",
     "num.Bit1 ?m + num.Bit1 ?n = num.Bit0 (?m + ?n + num.One)",
     template_equation
      (template_app
        (template_app
          (template_hole 3, template_app (template_hole 2, template_var 1)),
         template_app (template_hole 2, template_var 0)),
       template_app
        (template_hole 1,
         template_app
          (template_app
            (template_hole 3,
             template_app
              (template_app (template_hole 3, template_var 1),
               template_var 0)),
           template_hole 0)))),
    ("Akra_Bazzi_Method.ln_1_imp_less_3'", "ln (real ?x) = 1 ==> ?x < 3",
     template_implication
      ([template_equation
         (template_app
           (template_hole 6,
            template_app (template_hole 5, template_var 0)),
          template_hole 4)],
       template_inequation
        (less_than, template_var 0,
         template_app
          (template_hole 2,
           template_app (template_hole 1, template_hole 0))))),
    ("Akra_Bazzi_Method.ln_ln_pos", "3 <= ?x ==> 0 < ln (ln ?x)",
     template_implication
      ([template_inequation
         (less_equals,
          template_app
           (template_hole 5,
            template_app (template_hole 4, template_hole 3)),
          template_var 0)],
       template_inequation
        (less_than, template_hole 1,
         template_app
          (template_hole 0,
           template_app (template_hole 0, template_var 0))))),
    ("Akra_Bazzi_Method.ln_ln_nonneg", "3 <= ?x ==> 0 <= ln (ln ?x)",
     template_implication
      ([template_inequation
         (less_equals,
          template_app
           (template_hole 4,
            template_app (template_hole 3, template_hole 2)),
          template_var 0)],
       template_inequation
        (less_equals, template_hole 1,
         template_app
          (template_hole 0,
           template_app (template_hole 0, template_var 0))))),
    ("Akra_Bazzi_Method.propagate_CLAMP",
     "??.Akra_Bazzi_Method.CLAMP (%x. real x ^ ?a') =
      ??.Akra_Bazzi_Method.CLAMP'
       (??.Akra_Bazzi_Method.MASTER_BOUND (real ?a') 0 0)",
     template_equation
      (template_app (template_hole 5, t_empty),
       template_app
        (template_hole 2,
         template_app
          (template_app
            (template_app
              (template_hole 1,
               template_app (template_hole 3, template_var 0)),
             template_hole 0),
           template_hole 0)))),
    ("Akra_Bazzi_Method.propagate_CLAMP",
     "??.Akra_Bazzi_Method.CLAMP (%x. ln (real x) powr ?b) =
      ??.Akra_Bazzi_Method.CLAMP'
       (??.Akra_Bazzi_Method.MASTER_BOUND 0 ?b 0)",
     template_equation
      (template_app (template_hole 6, t_empty),
       template_app
        (template_hole 2,
         template_app
          (template_app
            (template_app (template_hole 1, template_hole 0),
             template_var 0),
           template_hole 0)))),
    ("Akra_Bazzi_Method.eval_akra_bazzi_le_sum_list",
     "(?x <= sum_list (?y # ?ys)) = (?x <= ?y + sum_list ?ys)",
     template_equation
      (template_app
        (template_app (template_hole 3, template_var 2),
         template_app
          (template_hole 2,
           template_app
            (template_app (template_hole 1, template_var 1),
             template_var 0))),
       template_app
        (template_app (template_hole 3, template_var 2),
         template_app
          (template_app (template_hole 0, template_var 1),
           template_app (template_hole 2, template_var 0))))),
    ("Akra_Bazzi_Method.akra_bazzi_termination_simps",
     "?a * real ?x / ?b = ?a / ?b * real ?x",
     template_equation
      (template_app
        (template_app
          (template_hole 2,
           template_app
            (template_app (template_hole 1, template_var 2),
             template_app (template_hole 0, template_var 1))),
         template_var 0),
       template_app
        (template_app
          (template_hole 1,
           template_app
            (template_app (template_hole 2, template_var 2),
             template_var 0)),
         template_app (template_hole 0, template_var 1)))),
    ("Akra_Bazzi_Method.CLAMP_aux",
     "?a + numeral ?b - numeral ?c = ?a + neg_numeral_class.sub ?b ?c",
     template_equation
      (template_app
        (template_app
          (template_hole 3,
           template_app
            (template_app (template_hole 2, template_var 2),
             template_app (template_hole 1, template_var 1))),
         template_app (template_hole 1, template_var 0)),
       template_app
        (template_app (template_hole 2, template_var 2),
         template_app
          (template_app (template_hole 0, template_var 1),
           template_var 0)))),
    ("Akra_Bazzi_Method.CLAMP_aux",
     "?a - numeral ?b + numeral ?c = ?a + neg_numeral_class.sub ?c ?b",
     template_equation
      (template_app
        (template_app
          (template_hole 3,
           template_app
            (template_app (template_hole 2, template_var 2),
             template_app (template_hole 1, template_var 1))),
         template_app (template_hole 1, template_var 0)),
       template_app
        (template_app (template_hole 3, template_var 2),
         template_app
          (template_app (template_hole 0, template_var 0),
           template_var 1)))),
    ("Akra_Bazzi_Method.ln_ln_nonneg'",
     "3 <= ?x ==> 0 <= ln (ln (real ?x))",
     template_implication
      ([template_inequation
         (less_equals,
          template_app
           (template_hole 6,
            template_app (template_hole 5, template_hole 4)),
          template_var 0)],
       template_inequation
        (less_equals, template_hole 2,
         template_app
          (template_hole 1,
           template_app
            (template_hole 1,
             template_app (template_hole 0, template_var 0)))))),
    ("Akra_Bazzi_Method.CLAMP_aux",
     "- numeral ?m + - numeral ?n = - (numeral ?m + numeral ?n)",
     template_equation
      (template_app
        (template_app
          (template_hole 2,
           template_app
            (template_hole 1,
             template_app (template_hole 0, template_var 1))),
         template_app
          (template_hole 1,
           template_app (template_hole 0, template_var 0))),
       template_app
        (template_hole 1,
         template_app
          (template_app
            (template_hole 2,
             template_app (template_hole 0, template_var 1)),
           template_app (template_hole 0, template_var 0))))),
    ("Akra_Bazzi_Method.propagate_CLAMP",
     "??.Akra_Bazzi_Method.CLAMP (%x. ln (real x) ^ ?b') =
      ??.Akra_Bazzi_Method.CLAMP'
       (??.Akra_Bazzi_Method.MASTER_BOUND 0 (real ?b') 0)",
     template_equation
      (template_app (template_hole 6, t_empty),
       template_app
        (template_hole 2,
         template_app
          (template_app
            (template_app (template_hole 1, template_hole 0),
             template_app (template_hole 3, template_var 0)),
           template_hole 0)))),
    ("Akra_Bazzi_Method.propagate_CLAMP",
     "??.Akra_Bazzi_Method.CLAMP (%x. ln (ln (real x)) powr ?c) =
      ??.Akra_Bazzi_Method.CLAMP'
       (??.Akra_Bazzi_Method.MASTER_BOUND 0 0 ?c)",
     template_equation
      (template_app (template_hole 6, t_empty),
       template_app
        (template_hole 2,
         template_app
          (template_app
            (template_app (template_hole 1, template_hole 0),
             template_hole 0),
           template_var 0)))),
    ("Akra_Bazzi_Method.CLAMP_aux",
     "?a - numeral ?b - numeral ?c = ?a - numeral (?b + ?c)",
     template_equation
      (template_app
        (template_app
          (template_hole 2,
           template_app
            (template_app (template_hole 2, template_var 2),
             template_app (template_hole 1, template_var 1))),
         template_app (template_hole 1, template_var 0)),
       template_app
        (template_app (template_hole 2, template_var 2),
         template_app
          (template_hole 1,
           template_app
            (template_app (template_hole 0, template_var 1),
             template_var 0))))),
    ("Akra_Bazzi_Method.CLAMP_aux",
     "?a + numeral ?b + numeral ?c = ?a + numeral (?b + ?c)",
     template_equation
      (template_app
        (template_app
          (template_hole 2,
           template_app
            (template_app (template_hole 2, template_var 2),
             template_app (template_hole 1, template_var 1))),
         template_app (template_hole 1, template_var 0)),
       template_app
        (template_app (template_hole 2, template_var 2),
         template_app
          (template_hole 1,
           template_app
            (template_app (template_hole 0, template_var 1),
             template_var 0))))),
    ("Akra_Bazzi_Method.eval_akra_bazzi_sum",
     "(SUM i<0. ?as ! i * ?bs ! i powr ?x) = (0::?'a)",
     template_equation
      (template_app
        (template_app (template_hole 6, t_empty),
         template_app (template_hole 2, template_hole 1)),
       template_hole 0)),
    ("Akra_Bazzi_Method.eval_akra_bazzi_sum'",
     "(SUM i<0. ?as ! i * ?f ((?ts ! i) ?x)) = (0::?'a)",
     template_equation
      (template_app
        (template_app (template_hole 6, t_empty),
         template_app (template_hole 2, template_hole 1)),
       template_hole 0)),
    ("Akra_Bazzi_Method.MASTER_BOUND_postproc",
     "??.Akra_Bazzi_Method.CLAMP
       (??.Akra_Bazzi_Method.MASTER_BOUND'' (- numeral ?n)) =
      ??.Akra_Bazzi_Method.CLAMP (%x. 1 / real x ^ numeral ?n)",
     template_equation
      (template_app
        (template_hole 8,
         template_app
          (template_hole 7,
           template_app
            (template_hole 6,
             template_app (template_hole 5, template_var 0)))),
       template_app (template_hole 8, t_empty))),
    ("Akra_Bazzi_Method.propagate_CLAMP",
     "??.Akra_Bazzi_Method.CLAMP (%x. ln (ln (real x)) ^ ?c') =
      ??.Akra_Bazzi_Method.CLAMP'
       (??.Akra_Bazzi_Method.MASTER_BOUND 0 0 (real ?c'))",
     template_equation
      (template_app (template_hole 6, t_empty),
       template_app
        (template_hole 2,
         template_app
          (template_app
            (template_app (template_hole 1, template_hole 0),
             template_hole 0),
           template_app (template_hole 3, template_var 0))))),
    ("Akra_Bazzi_Method.CLAMP_aux",
     "num.Bit1 ?m * num.Bit1 ?n = num.Bit1 (?m + ?n + num.Bit0 (?m * ?n))",
     template_equation
      (template_app
        (template_app
          (template_hole 3, template_app (template_hole 2, template_var 1)),
         template_app (template_hole 2, template_var 0)),
       template_app
        (template_hole 2,
         template_app
          (template_app
            (template_hole 1,
             template_app
              (template_app (template_hole 1, template_var 1),
               template_var 0)),
           template_app
            (template_hole 0,
             template_app
              (template_app (template_hole 3, template_var 1),
               template_var 0)))))),
    ("Akra_Bazzi_Method.eval_akra_bazzi_le_list_ex",
     "list_ex ?P (?x # ?y # ?xs) = (?P ?x | list_ex ?P (?y # ?xs))",
     template_equation
      (template_app
        (template_app (template_hole 2, template_var 3),
         template_app
          (template_app (template_hole 1, template_var 2),
           template_app
            (template_app (template_hole 1, template_var 1),
             template_var 0))),
       template_app
        (template_app
          (template_hole 0, template_app (template_var 3, template_var 2)),
         template_app
          (template_app (template_hole 2, template_var 3),
           template_app
            (template_app (template_hole 1, template_var 1),
             template_var 0))))),
    ("Akra_Bazzi_Method.propagate_CLAMP",
     "??.Akra_Bazzi_Method.CLAMP (%x. ?f x * ?g x) =
      ??.Akra_Bazzi_Method.CLAMP'
       (%x. ??.Akra_Bazzi_Method.CLAMP ?f x *
            ??.Akra_Bazzi_Method.CLAMP ?g x)",
     template_equation
      (template_app (template_hole 2, t_empty),
       template_app (template_hole 0, t_empty))),
    ("Akra_Bazzi_Method.propagate_CLAMP",
     "??.Akra_Bazzi_Method.CLAMP (%x. ?f x / ?g x) =
      ??.Akra_Bazzi_Method.CLAMP'
       (%x. ??.Akra_Bazzi_Method.CLAMP ?f x /
            ??.Akra_Bazzi_Method.CLAMP ?g x)",
     template_equation
      (template_app (template_hole 2, t_empty),
       template_app (template_hole 0, t_empty))),
    ("Akra_Bazzi_Method.propagate_CLAMP",
     "??.Akra_Bazzi_Method.CLAMP'
       (%x. inverse
             (??.Akra_Bazzi_Method.MASTER_BOUND ?a1.0 ?b1.0 ?c1.0 x)) =
      ??.Akra_Bazzi_Method.CLAMP'
       (??.Akra_Bazzi_Method.MASTER_BOUND (- ?a1.0) (- ?b1.0) (- ?c1.0))",
     template_equation
      (template_app (template_hole 3, t_empty),
       template_app
        (template_hole 3,
         template_app
          (template_app
            (template_app
              (template_hole 1,
               template_app (template_hole 0, template_var 2)),
             template_app (template_hole 0, template_var 1)),
           template_app (template_hole 0, template_var 0))))),
    ("Akra_Bazzi_Method.MASTER_BOUND_UNCLAMP",
     "??.Akra_Bazzi_Method.CLAMP
       (%x. ??.Akra_Bazzi_Method.CLAMP ?f x *
            ??.Akra_Bazzi_Method.CLAMP ?g x) =
      ??.Akra_Bazzi_Method.CLAMP (%x. ?f x * ?g x)",
     template_equation
      (template_app (template_hole 1, t_empty),
       template_app (template_hole 1, t_empty))),
    ("Akra_Bazzi_Method.MASTER_BOUND_UNCLAMP",
     "??.Akra_Bazzi_Method.CLAMP
       (%x. ??.Akra_Bazzi_Method.CLAMP ?f x /
            ??.Akra_Bazzi_Method.CLAMP ?g x) =
      ??.Akra_Bazzi_Method.CLAMP (%x. ?f x / ?g x)",
     template_equation
      (template_app (template_hole 1, t_empty),
       template_app (template_hole 1, t_empty))),
    ("Akra_Bazzi_Method.eval_akra_bazzi_le_sum_list",
     "(?x <= ?z + sum_list (?y # ?ys)) = (?x <= ?z + ?y + sum_list ?ys)",
     template_equation
      (template_app
        (template_app (template_hole 3, template_var 3),
         template_app
          (template_app (template_hole 2, template_var 2),
           template_app
            (template_hole 1,
             template_app
              (template_app (template_hole 0, template_var 1),
               template_var 0)))),
       template_app
        (template_app (template_hole 3, template_var 3),
         template_app
          (template_app
            (template_hole 2,
             template_app
              (template_app (template_hole 2, template_var 2),
               template_var 1)),
           template_app (template_hole 1, template_var 0))))),
    ("Akra_Bazzi_Method.MASTER_BOUND_postproc",
     "??.Akra_Bazzi_Method.CLAMP (??.Akra_Bazzi_Method.MASTER_BOUND' ?a 1) =
      ??.Akra_Bazzi_Method.CLAMP
       (%x. ??.Akra_Bazzi_Method.CLAMP
             (??.Akra_Bazzi_Method.MASTER_BOUND'' ?a) x *
            ??.Akra_Bazzi_Method.CLAMP (%x. ln (real x)) x)",
     template_equation
      (template_app
        (template_hole 6,
         template_app
          (template_app (template_hole 5, template_var 0),
           template_hole 4)),
       template_app (template_hole 6, t_empty))),
    ("Akra_Bazzi_Method.ball_set_simps",
     "(ALL x:set (?x # ?xs). ?P x) = (?P ?x & (ALL x:set ?xs. ?P x))",
     template_equation
      (template_app
        (template_app
          (template_hole 3,
           template_app
            (template_hole 2,
             template_app
              (template_app (template_hole 1, template_var 2),
               template_var 1))),
         t_empty),
       template_app
        (template_app
          (template_hole 0, template_app (template_var 0, template_var 2)),
         template_app
          (template_app
            (template_hole 3,
             template_app (template_hole 2, template_var 1)),
           t_empty)))),
    ("Akra_Bazzi_Method.bex_set_simps",
     "(EX x:set (?x # ?xs). ?P x) = (?P ?x | (EX x:set ?xs. ?P x))",
     template_equation
      (template_app
        (template_app
          (template_hole 3,
           template_app
            (template_hole 2,
             template_app
              (template_app (template_hole 1, template_var 2),
               template_var 1))),
         t_empty),
       template_app
        (template_app
          (template_hole 0, template_app (template_var 0, template_var 2)),
         template_app
          (template_app
            (template_hole 3,
             template_app (template_hole 2, template_var 1)),
           t_empty)))),
    ("Akra_Bazzi_Method.akra_bazzi_term_imp_size_less",
     "[| ?x\<^sub>1 <= ?x; akra_bazzi_term 0 ?x\<^sub>1 ?b ?t |]
      ==> size (?t ?x) < size ?x",
     template_implication
      ([template_inequation (less_equals, template_var 3, template_var 2),
        template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_app (template_hole 3, template_hole 2),
                  template_var 3),
                template_var 1),
              template_var 0)
            )],
       template_inequation
        (less_than,
         template_app
          (template_hole 0, template_app (template_var 0, template_var 2)),
         template_app (template_hole 0, template_var 2)))),
    ("Akra_Bazzi_Method.MASTER_BOUND_postproc",
     "??.Akra_Bazzi_Method.CLAMP
       (??.Akra_Bazzi_Method.MASTER_BOUND' ?a (- 1)) =
      ??.Akra_Bazzi_Method.CLAMP
       (%x. ??.Akra_Bazzi_Method.CLAMP
             (??.Akra_Bazzi_Method.MASTER_BOUND'' ?a) x /
            ??.Akra_Bazzi_Method.CLAMP (%x. ln (real x)) x)",
     template_equation
      (template_app
        (template_hole 7,
         template_app
          (template_app (template_hole 6, template_var 0),
           template_app (template_hole 5, template_hole 4))),
       template_app (template_hole 7, t_empty))),
    ("Akra_Bazzi_Method.akra_bazzi_term_imp_size_less",
     "[| ?x\<^sub>1 < ?x; akra_bazzi_term 0 (Suc ?x\<^sub>1) ?b ?t |]
      ==> size (?t ?x) < size ?x",
     template_implication
      ([template_inequation (less_than, template_var 3, template_var 2),
        template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_app (template_hole 3, template_hole 2),
                  template_app (template_hole 1, template_var 3)),
                template_var 1),
              template_var 0)
            )],
       template_inequation
        (less_than,
         template_app
          (template_hole 0, template_app (template_var 0, template_var 2)),
         template_app (template_hole 0, template_var 2)))),
    ("Akra_Bazzi_Method.MASTER_BOUND_postproc",
     "??.Akra_Bazzi_Method.CLAMP
       (??.Akra_Bazzi_Method.MASTER_BOUND' ?a ?b) =
      ??.Akra_Bazzi_Method.CLAMP
       (%x. ??.Akra_Bazzi_Method.CLAMP
             (??.Akra_Bazzi_Method.MASTER_BOUND'' ?a) x *
            ??.Akra_Bazzi_Method.CLAMP (%x. ln (real x) powr ?b) x)",
     template_equation
      (template_app
        (template_hole 6,
         template_app
          (template_app (template_hole 5, template_var 1), template_var 0)),
       template_app (template_hole 6, t_empty))),
    ("Akra_Bazzi_Method.measure_prod_conv'",
     "(((?e, ?f), ?g, ?h) : Wellfounded.measure snd) =
      ((?f, ?h) : Wellfounded.measure (%x. x))",
     template_equation
      (template_app
        (template_app
          (template_hole 7,
           template_app
            (template_app
              (template_hole 6,
               template_app
                (template_app (template_hole 5, template_var 3),
                 template_var 2)),
             template_app
              (template_app (template_hole 5, template_var 1),
               template_var 0))),
         template_app (template_hole 4, t_empty)),
       template_app
        (template_app
          (template_hole 2,
           template_app
            (template_app (template_hole 1, template_var 2),
             template_var 0)),
         template_app (template_hole 0, t_empty)))),
    ("Akra_Bazzi_Method.measure_prod_conv'",
     "(((?a, ?b), ?c, ?d) : Wellfounded.measure fst) =
      ((?a, ?c) : Wellfounded.measure (%x. x))",
     template_equation
      (template_app
        (template_app
          (template_hole 7,
           template_app
            (template_app
              (template_hole 6,
               template_app
                (template_app (template_hole 5, template_var 3),
                 template_var 2)),
             template_app
              (template_app (template_hole 5, template_var 1),
               template_var 0))),
         template_app (template_hole 4, t_empty)),
       template_app
        (template_app
          (template_hole 2,
           template_app
            (template_app (template_hole 1, template_var 3),
             template_var 1)),
         template_app (template_hole 0, t_empty)))),
    ("Akra_Bazzi_Method.measure_prod_conv",
     "(((?a, ?b), ?c, ?d) : Wellfounded.measure (%x. ?t (fst x))) =
      ((?a, ?c) : Wellfounded.measure ?t)",
     template_equation
      (template_app
        (template_app
          (template_hole 7,
           template_app
            (template_app
              (template_hole 6,
               template_app
                (template_app (template_hole 5, template_var 4),
                 template_var 3)),
             template_app
              (template_app (template_hole 5, template_var 2),
               template_var 1))),
         template_app (template_hole 4, t_empty)),
       template_app
        (template_app
          (template_hole 2,
           template_app
            (template_app (template_hole 1, template_var 4),
             template_var 2)),
         template_app (template_hole 0, template_var 0)))),
    ("Akra_Bazzi_Method.measure_prod_conv",
     "(((?e, ?f), ?g, ?h) : Wellfounded.measure (%x. ?t (snd x))) =
      ((?f, ?h) : Wellfounded.measure ?t)",
     template_equation
      (template_app
        (template_app
          (template_hole 7,
           template_app
            (template_app
              (template_hole 6,
               template_app
                (template_app (template_hole 5, template_var 4),
                 template_var 3)),
             template_app
              (template_app (template_hole 5, template_var 2),
               template_var 1))),
         template_app (template_hole 4, t_empty)),
       template_app
        (template_app
          (template_hole 2,
           template_app
            (template_app (template_hole 1, template_var 3),
             template_var 1)),
         template_app (template_hole 0, template_var 0)))),
    ("Akra_Bazzi_Method.ball_set_intros",
     "[| ?P ?x; ALL x:set ?xs. ?P x |] ==> ALL x:set (?x # ?xs). ?P x",
     template_implication
      ([template_predicate (template_app (template_var 2, template_var 1)),
        template_predicate
         (
            template_app
             (template_app
               (template_hole 2,
                template_app (template_hole 1, template_var 0)),
              t_empty)
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 2,
               template_app
                (template_hole 1,
                 template_app
                  (template_app (template_hole 0, template_var 1),
                   template_var 0))),
             t_empty)
           ))),
    ("Akra_Bazzi_Method.akra_bazzi_term_measure",
     "[| ?x\<^sub>1 <= ?x; akra_bazzi_term 0 ?x\<^sub>1 ?b ?t |]
      ==> (?t ?x, ?x) : Wellfounded.measure (%n. n)",
     template_implication
      ([template_inequation (less_equals, template_var 3, template_var 2),
        template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_app (template_hole 4, template_hole 3),
                  template_var 3),
                template_var 1),
              template_var 0)
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 2,
               template_app
                (template_app
                  (template_hole 1,
                   template_app (template_var 0, template_var 2)),
                 template_var 2)),
             template_app (template_hole 0, t_empty))
           ))),
    ("Akra_Bazzi_Method.akra_bazzi_term_measure",
     "[| ?x\<^sub>1 < ?x; akra_bazzi_term 0 (Suc ?x\<^sub>1) ?b ?t |]
      ==> (?t ?x, ?x) : Wellfounded.measure (%n. n)",
     template_implication
      ([template_inequation (less_than, template_var 3, template_var 2),
        template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_app (template_hole 5, template_hole 4),
                  template_app (template_hole 3, template_var 3)),
                template_var 1),
              template_var 0)
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 2,
               template_app
                (template_app
                  (template_hole 1,
                   template_app (template_var 0, template_var 2)),
                 template_var 2)),
             template_app (template_hole 0, t_empty))
           ))),
    ("Akra_Bazzi_Method.atLeastLessThanE",
     "[| ?x : {?a..<?b}; [| ?a <= ?x; ?x < ?b |] ==> ?P |] ==> ?P",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 3, template_var 3),
              template_app
               (template_app (template_hole 2, template_var 2),
                template_var 1))
            ),
        template_implication
         ([template_inequation
            (less_equals, template_var 2, template_var 3)],
          template_implication
           ([template_inequation
              (less_than, template_var 3, template_var 1)],
            template_predicate (template_var 0)))],
       template_predicate (template_var 0))),
    ("Akra_Bazzi_Method.MASTER_BOUND_postproc",
     "??.Akra_Bazzi_Method.CLAMP
       (??.Akra_Bazzi_Method.MASTER_BOUND' ?a (numeral ?n)) =
      ??.Akra_Bazzi_Method.CLAMP
       (%x. ??.Akra_Bazzi_Method.CLAMP
             (??.Akra_Bazzi_Method.MASTER_BOUND'' ?a) x *
            ??.Akra_Bazzi_Method.CLAMP (%x. ln (real x) ^ numeral ?n) x)",
     template_equation
      (template_app
        (template_hole 8,
         template_app
          (template_app (template_hole 7, template_var 1),
           template_app (template_hole 6, template_var 0))),
       template_app (template_hole 8, t_empty))),
    ("Akra_Bazzi_Method.master_theorem_preprocess",
     "\<Theta>(%n. ln (real n) powr ?p') =
      \<Theta>(%n. real n powr 0 * ln (real n) powr ?p')",
     template_equation
      (template_app
        (template_app (template_hole 6, template_hole 5), t_empty),
       template_app
        (template_app (template_hole 6, template_hole 5), t_empty))),
    ("Akra_Bazzi_Method.MASTER_BOUND_postproc",
     "??.Akra_Bazzi_Method.CLAMP
       (??.Akra_Bazzi_Method.MASTER_BOUND' ?a (- numeral ?n)) =
      ??.Akra_Bazzi_Method.CLAMP
       (%x. ??.Akra_Bazzi_Method.CLAMP
             (??.Akra_Bazzi_Method.MASTER_BOUND'' ?a) x /
            ??.Akra_Bazzi_Method.CLAMP (%x. ln (real x) ^ numeral ?n) x)",
     template_equation
      (template_app
        (template_hole 9,
         template_app
          (template_app (template_hole 8, template_var 1),
           template_app
            (template_hole 7,
             template_app (template_hole 6, template_var 0)))),
       template_app (template_hole 9, t_empty))),
    ("Akra_Bazzi_Method.akra_bazzi_termsI'",
     "[| akra_bazzi_term ?x\<^sub>0 ?x\<^sub>1 ?b ?t;
         akra_bazzi_terms ?x\<^sub>0 ?x\<^sub>1 ?bs ?ts |]
      ==> akra_bazzi_terms ?x\<^sub>0 ?x\<^sub>1 (?b # ?bs) (?t # ?ts)",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_app (template_hole 3, template_var 5),
                  template_var 4),
                template_var 3),
              template_var 2)
            ),
        template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_app (template_hole 2, template_var 5),
                  template_var 4),
                template_var 1),
              template_var 0)
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_app
                (template_app (template_hole 2, template_var 5),
                 template_var 4),
               template_app
                (template_app (template_hole 1, template_var 3),
                 template_var 1)),
             template_app
              (template_app (template_hole 0, template_var 2),
               template_var 0))
           ))),
    ("Akra_Bazzi_Method.eval_akra_bazzi_sum",
     "(SUM i<Suc 0. (?a # ?as) ! i * (?b # ?bs) ! i powr ?x) =
      ?a * ?b powr ?x",
     template_equation
      (template_app
        (template_app (template_hole 7, t_empty),
         template_app
          (template_hole 2,
           template_app (template_hole 1, template_hole 0))),
       template_app
        (template_app (template_hole 6, template_var 4),
         template_app
          (template_app (template_hole 3, template_var 2),
           template_var 0)))),
    ("Akra_Bazzi_Method.eval_akra_bazzi_sum'",
     "(SUM i<Suc 0. (?a # ?as) ! i * ?f (((?t # ?ts) ! i) ?x)) =
      ?a * ?f (?t ?x)",
     template_equation
      (template_app
        (template_app (template_hole 8, t_empty),
         template_app
          (template_hole 2,
           template_app (template_hole 1, template_hole 0))),
       template_app
        (template_app (template_hole 7, template_var 5),
         template_app
          (template_var 3,
           template_app (template_var 2, template_var 0))))),
    ("Akra_Bazzi_Method.akra_bazzi_termsI",
     "(!!i. i < length ?bs ==>
            akra_bazzi_term ?x\<^sub>0 ?x\<^sub>1 (?bs ! i) (?ts ! i)) ==>
      akra_bazzi_terms ?x\<^sub>0 ?x\<^sub>1 ?bs ?ts",
     template_implication
      ([template_predicate (template_app (template_hole 7, t_empty))],
       template_predicate
        (
           template_app
            (template_app
              (template_app
                (template_app (template_hole 0, template_var 2),
                 template_var 1),
               template_var 3),
             template_var 0)
           ))),
    ("Akra_Bazzi_Method.master_theorem_preprocess",
     "\<Theta>(%n. real n * ln (real n) powr ?p') =
      \<Theta>(%n. real n powr 1 * ln (real n) powr ?p')",
     template_equation
      (template_app
        (template_app (template_hole 6, template_hole 5), t_empty),
       template_app
        (template_app (template_hole 6, template_hole 5), t_empty))),
    ("Akra_Bazzi_Method.master_theorem_preprocess",
     "\<Theta>(%n. real n powr ?p * ln (real n)) =
      \<Theta>(%n. real n powr ?p * ln (real n) powr 1)",
     template_equation
      (template_app
        (template_app (template_hole 6, template_hole 5), t_empty),
       template_app
        (template_app (template_hole 6, template_hole 5), t_empty))),
    ("Akra_Bazzi_Method.propagate_CLAMP",
     "??.Akra_Bazzi_Method.CLAMP'
       (%x. ??.Akra_Bazzi_Method.CLAMP'
             (??.Akra_Bazzi_Method.MASTER_BOUND ?a1.0 ?b1.0 ?c1.0) x *
            ??.Akra_Bazzi_Method.CLAMP'
             (??.Akra_Bazzi_Method.MASTER_BOUND ?a2.0 ?b2.0 ?c2.0) x) =
      ??.Akra_Bazzi_Method.CLAMP'
       (??.Akra_Bazzi_Method.MASTER_BOUND (?a1.0 + ?a2.0) (?b1.0 + ?b2.0)
         (?c1.0 + ?c2.0))",
     template_equation
      (template_app (template_hole 3, t_empty),
       template_app
        (template_hole 3,
         template_app
          (template_app
            (template_app
              (template_hole 1,
               template_app
                (template_app (template_hole 0, template_var 5),
                 template_var 2)),
             template_app
              (template_app (template_hole 0, template_var 4),
               template_var 1)),
           template_app
            (template_app (template_hole 0, template_var 3),
             template_var 0))))),
    ("Akra_Bazzi_Method.propagate_CLAMP",
     "??.Akra_Bazzi_Method.CLAMP'
       (%x. ??.Akra_Bazzi_Method.CLAMP'
             (??.Akra_Bazzi_Method.MASTER_BOUND ?a1.0 ?b1.0 ?c1.0) x /
            ??.Akra_Bazzi_Method.CLAMP'
             (??.Akra_Bazzi_Method.MASTER_BOUND ?a2.0 ?b2.0 ?c2.0) x) =
      ??.Akra_Bazzi_Method.CLAMP'
       (??.Akra_Bazzi_Method.MASTER_BOUND (?a1.0 - ?a2.0) (?b1.0 - ?b2.0)
         (?c1.0 - ?c2.0))",
     template_equation
      (template_app (template_hole 3, t_empty),
       template_app
        (template_hole 3,
         template_app
          (template_app
            (template_app
              (template_hole 1,
               template_app
                (template_app (template_hole 0, template_var 5),
                 template_var 2)),
             template_app
              (template_app (template_hole 0, template_var 4),
               template_var 1)),
           template_app
            (template_app (template_hole 0, template_var 3),
             template_var 0))))),
    ("Akra_Bazzi_Method.landau_symbol_ge_3_cong",
     "[| landau_symbol ?L ?L' ?Lr; !!x. (3::?'a) <= x ==> ?f x = ?g x |]
      ==> ?L at_top ?f = ?L at_top ?g",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app (template_hole 8, template_var 4),
                template_var 3),
              template_var 2)
            ),
        template_predicate (template_app (template_hole 7, t_empty))],
       template_equation
        (template_app
          (template_app (template_var 4, template_hole 0), template_var 1),
         template_app
          (template_app (template_var 4, template_hole 0),
           template_var 0)))),
    ("Akra_Bazzi_Method.eval_akra_bazzi_sum",
     "(SUM i<Suc ?k. (?a # ?as) ! i * (?b # ?bs) ! i powr ?x) =
      ?a * ?b powr ?x + (SUM i<?k. ?as ! i * ?bs ! i powr ?x)",
     template_equation
      (template_app
        (template_app (template_hole 7, t_empty),
         template_app
          (template_hole 2,
           template_app (template_hole 1, template_var 0))),
       template_app
        (template_app
          (template_hole 0,
           template_app
            (template_app (template_hole 6, template_var 5),
             template_app
              (template_app (template_hole 3, template_var 3),
               template_var 1))),
         template_app
          (template_app (template_hole 7, t_empty),
           template_app (template_hole 2, template_var 0))))),
    ("Akra_Bazzi_Method.eval_akra_bazzi_sum'",
     "(SUM i<Suc ?k. (?a # ?as) ! i * ?f (((?t # ?ts) ! i) ?x)) =
      ?a * ?f (?t ?x) + (SUM i<?k. ?as ! i * ?f ((?ts ! i) ?x))",
     template_equation
      (template_app
        (template_app (template_hole 8, t_empty),
         template_app
          (template_hole 2,
           template_app (template_hole 1, template_var 0))),
       template_app
        (template_app
          (template_hole 0,
           template_app
            (template_app (template_hole 7, template_var 6),
             template_app
              (template_var 4,
               template_app (template_var 3, template_var 1)))),
         template_app
          (template_app (template_hole 8, t_empty),
           template_app (template_hole 2, template_var 0))))),
    ("Akra_Bazzi_Method.akra_bazzi_params_nonzeroI",
     "[| length ?as = length ?bs; ALL a:set ?as. 0 <= a;
         ALL b:set ?bs. b : {0<..<1}; EX a:set ?as. 0 < a |]
      ==> akra_bazzi_params_nonzero (length ?as) ?as ?bs",
     template_implication
      ([template_equation
         (template_app (template_hole 10, template_var 1),
          template_app (template_hole 10, template_var 0)),
        template_predicate
         (
            template_app
             (template_app
               (template_hole 9,
                template_app (template_hole 8, template_var 1)),
              t_empty)
            ),
        template_predicate
         (
            template_app
             (template_app
               (template_hole 9,
                template_app (template_hole 8, template_var 0)),
              t_empty)
            ),
        template_predicate
         (
            template_app
             (template_app
               (template_hole 2,
                template_app (template_hole 8, template_var 1)),
              t_empty)
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_app
                (template_hole 0,
                 template_app (template_hole 10, template_var 1)),
               template_var 1),
             template_var 0)
           ))),
    ("Akra_Bazzi_Method.akra_bazzi_p_rel_intros",
     "[| 1 < (SUM i<length ?as. ?as ! i * ?bs ! i powr ?p');
         length ?as = length ?bs; ALL a:set ?as. 0 <= a;
         ALL b:set ?bs. b : {0<..<1}; EX a:set ?as. 0 < a |]
      ==> ?p' < akra_bazzi_exponent ?as ?bs",
     template_implication
      ([template_inequation
         (less_than, template_hole 15,
          template_app
           (template_app (template_hole 14, t_empty),
            template_app
             (template_hole 10,
              template_app (template_hole 9, template_var 2)))),
        template_equation
         (template_app (template_hole 9, template_var 2),
          template_app (template_hole 9, template_var 1)),
        template_predicate
         (
            template_app
             (template_app
               (template_hole 7,
                template_app (template_hole 6, template_var 2)),
              t_empty)
            ),
        template_predicate
         (
            template_app
             (template_app
               (template_hole 7,
                template_app (template_hole 6, template_var 1)),
              t_empty)
            ),
        template_predicate
         (
            template_app
             (template_app
               (template_hole 1,
                template_app (template_hole 6, template_var 2)),
              t_empty)
            )],
       template_inequation
        (less_than, template_var 0,
         template_app
          (template_app (template_hole 0, template_var 2),
           template_var 1)))),
    ("Akra_Bazzi_Method.akra_bazzi_p_rel_intros",
     "[| (SUM i<length ?as. ?as ! i * ?bs ! i powr ?p') < 1;
         length ?as = length ?bs; ALL a:set ?as. 0 <= a;
         ALL b:set ?bs. b : {0<..<1}; EX a:set ?as. 0 < a |]
      ==> akra_bazzi_exponent ?as ?bs < ?p'",
     template_implication
      ([template_inequation
         (less_than,
          template_app
           (template_app (template_hole 15, t_empty),
            template_app
             (template_hole 11,
              template_app (template_hole 10, template_var 2))),
          template_hole 9),
        template_equation
         (template_app (template_hole 10, template_var 2),
          template_app (template_hole 10, template_var 1)),
        template_predicate
         (
            template_app
             (template_app
               (template_hole 7,
                template_app (template_hole 6, template_var 2)),
              t_empty)
            ),
        template_predicate
         (
            template_app
             (template_app
               (template_hole 7,
                template_app (template_hole 6, template_var 1)),
              t_empty)
            ),
        template_predicate
         (
            template_app
             (template_app
               (template_hole 1,
                template_app (template_hole 6, template_var 2)),
              t_empty)
            )],
       template_inequation
        (less_than,
         template_app
          (template_app (template_hole 0, template_var 2), template_var 1),
         template_var 0))),
    ("Akra_Bazzi_Method.akra_bazzi_p_rel_intros",
     "[| 1 <= (SUM i<length ?as. ?as ! i * ?bs ! i powr ?p');
         length ?as = length ?bs; ALL a:set ?as. 0 <= a;
         ALL b:set ?bs. b : {0<..<1}; EX a:set ?as. 0 < a |]
      ==> ?p' <= akra_bazzi_exponent ?as ?bs",
     template_implication
      ([template_inequation
         (less_equals, template_hole 15,
          template_app
           (template_app (template_hole 14, t_empty),
            template_app
             (template_hole 10,
              template_app (template_hole 9, template_var 2)))),
        template_equation
         (template_app (template_hole 9, template_var 2),
          template_app (template_hole 9, template_var 1)),
        template_predicate
         (
            template_app
             (template_app
               (template_hole 7,
                template_app (template_hole 6, template_var 2)),
              t_empty)
            ),
        template_predicate
         (
            template_app
             (template_app
               (template_hole 7,
                template_app (template_hole 6, template_var 1)),
              t_empty)
            ),
        template_predicate
         (
            template_app
             (template_app
               (template_hole 2,
                template_app (template_hole 6, template_var 2)),
              t_empty)
            )],
       template_inequation
        (less_equals, template_var 0,
         template_app
          (template_app (template_hole 0, template_var 2),
           template_var 1)))),
    ("Akra_Bazzi_Method.akra_bazzi_p_rel_intros",
     "[| (SUM i<length ?as. ?as ! i * ?bs ! i powr ?p') <= 1;
         length ?as = length ?bs; ALL a:set ?as. 0 <= a;
         ALL b:set ?bs. b : {0<..<1}; EX a:set ?as. 0 < a |]
      ==> akra_bazzi_exponent ?as ?bs <= ?p'",
     template_implication
      ([template_inequation
         (less_equals,
          template_app
           (template_app (template_hole 15, t_empty),
            template_app
             (template_hole 11,
              template_app (template_hole 10, template_var 2))),
          template_hole 9),
        template_equation
         (template_app (template_hole 10, template_var 2),
          template_app (template_hole 10, template_var 1)),
        template_predicate
         (
            template_app
             (template_app
               (template_hole 7,
                template_app (template_hole 6, template_var 2)),
              t_empty)
            ),
        template_predicate
         (
            template_app
             (template_app
               (template_hole 7,
                template_app (template_hole 6, template_var 1)),
              t_empty)
            ),
        template_predicate
         (
            template_app
             (template_app
               (template_hole 2,
                template_app (template_hole 6, template_var 2)),
              t_empty)
            )],
       template_inequation
        (less_equals,
         template_app
          (template_app (template_hole 0, template_var 2), template_var 1),
         template_var 0))),
    ("Akra_Bazzi_Method.akra_bazzi_p_rel_intros",
     "[| (SUM i<length ?as. ?as ! i * ?bs ! i powr ?x) < 1 &
         1 < (SUM i<length ?as. ?as ! i * ?bs ! i powr ?y);
         length ?as = length ?bs; ALL a:set ?as. 0 <= a;
         ALL b:set ?bs. b : {0<..<1}; EX a:set ?as. 0 < a |]
      ==> akra_bazzi_exponent ?as ?bs : {?y<..<?x}",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_hole 17,
                template_app
                 (template_app
                   (template_hole 16,
                    template_app
                     (template_app (template_hole 15, t_empty),
                      template_app
                       (template_hole 11,
                        template_app (template_hole 10, template_var 3)))),
                  template_hole 9)),
              template_app
               (template_app (template_hole 16, template_hole 9),
                template_app
                 (template_app (template_hole 15, t_empty),
                  template_app
                   (template_hole 11,
                    template_app (template_hole 10, template_var 3)))))
            ),
        template_equation
         (template_app (template_hole 10, template_var 3),
          template_app (template_hole 10, template_var 2)),
        template_predicate
         (
            template_app
             (template_app
               (template_hole 7,
                template_app (template_hole 6, template_var 3)),
              t_empty)
            ),
        template_predicate
         (
            template_app
             (template_app
               (template_hole 7,
                template_app (template_hole 6, template_var 2)),
              t_empty)
            ),
        template_predicate
         (
            template_app
             (template_app
               (template_hole 1,
                template_app (template_hole 6, template_var 3)),
              t_empty)
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 3,
               template_app
                (template_app (template_hole 0, template_var 3),
                 template_var 2)),
             template_app
              (template_app (template_hole 2, template_var 0),
               template_var 1))
           ))),
    ("Akra_Bazzi_Method.akra_bazzi_p_rel_intros",
     "[| (SUM i<length ?as. ?as ! i * ?bs ! i powr ?x) <= 1 &
         1 <= (SUM i<length ?as. ?as ! i * ?bs ! i powr ?y);
         length ?as = length ?bs; ALL a:set ?as. 0 <= a;
         ALL b:set ?bs. b : {0<..<1}; EX a:set ?as. 0 < a |]
      ==> akra_bazzi_exponent ?as ?bs : {?y..?x}",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_hole 18,
                template_app
                 (template_app
                   (template_hole 17,
                    template_app
                     (template_app (template_hole 16, t_empty),
                      template_app
                       (template_hole 12,
                        template_app (template_hole 11, template_var 3)))),
                  template_hole 10)),
              template_app
               (template_app (template_hole 17, template_hole 10),
                template_app
                 (template_app (template_hole 16, t_empty),
                  template_app
                   (template_hole 12,
                    template_app (template_hole 11, template_var 3)))))
            ),
        template_equation
         (template_app (template_hole 11, template_var 3),
          template_app (template_hole 11, template_var 2)),
        template_predicate
         (
            template_app
             (template_app
               (template_hole 8,
                template_app (template_hole 7, template_var 3)),
              t_empty)
            ),
        template_predicate
         (
            template_app
             (template_app
               (template_hole 8,
                template_app (template_hole 7, template_var 2)),
              t_empty)
            ),
        template_predicate
         (
            template_app
             (template_app
               (template_hole 3,
                template_app (template_hole 7, template_var 3)),
              t_empty)
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 5,
               template_app
                (template_app (template_hole 1, template_var 3),
                 template_var 2)),
             template_app
              (template_app (template_hole 0, template_var 0),
               template_var 1))
           ))),
    ("Akra_Bazzi_Method.master_theorem_functionI",
     "[| ALL x:{?x\<^sub>0..<?x\<^sub>1}. 0 <= ?f x;
         ALL x>=?x\<^sub>1.
            ?f x = ?g x + (SUM i<?k. ?as ! i * ?f ((?ts ! i) x));
         ALL x>=?x\<^sub>1. 0 <= ?g x; ALL a:set ?as. 0 <= a;
         list_ex ((<) 0) ?as; ALL b:set ?bs. b : {0<..<1}; ?k ~= 0;
         length ?as = ?k; length ?bs = ?k; length ?ts = ?k;
         akra_bazzi_terms ?x\<^sub>0 ?x\<^sub>1 ?bs ?ts |]
      ==> master_theorem_function ?x\<^sub>0 ?x\<^sub>1 ?k ?as ?bs ?ts ?f
           ?g",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_hole 27,
                template_app
                 (template_app (template_hole 26, template_var 7),
                  template_var 6)),
              t_empty)
            ),
        template_predicate (template_app (template_hole 23, t_empty)),
        template_predicate (template_app (template_hole 23, t_empty)),
        template_predicate
         (
            template_app
             (template_app
               (template_hole 13,
                template_app (template_hole 12, template_var 3)),
              t_empty)
            ),
        template_predicate
         (
            template_app
             (template_app (template_hole 11, t_empty), template_var 3)
            ),
        template_predicate
         (
            template_app
             (template_app
               (template_hole 13,
                template_app (template_hole 12, template_var 0)),
              t_empty)
            ),
        template_negation
         (template_equation (template_var 1, template_hole 4)),
        template_equation
         (template_app (template_hole 3, template_var 3), template_var 1),
        template_equation
         (template_app (template_hole 3, template_var 0), template_var 1),
        template_equation
         (template_app (template_hole 2, template_var 2), template_var 1),
        template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_app (template_hole 1, template_var 7),
                  template_var 6),
                template_var 0),
              template_var 2)
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_app
                (template_app
                  (template_app
                    (template_app
                      (template_app
                        (template_app (template_hole 0, template_var 7),
                         template_var 6),
                       template_var 1),
                     template_var 3),
                   template_var 0),
                 template_var 2),
               template_var 5),
             template_var 4)
           )))]:
   (string * thm * template) list
### theory "Draft.Akra_Bazzi_MethodMoreTemplates"
### 0.947s elapsed time, 1.199s cpu time, 0.000s GC time
val it = (): unit
