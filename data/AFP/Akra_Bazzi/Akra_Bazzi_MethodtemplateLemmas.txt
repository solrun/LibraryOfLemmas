   [("Akra_Bazzi_Method.akra_bazzi_termsI'",
     "akra_bazzi_terms ?x\<^sub>0 ?x\<^sub>1 [] []",
     template_predicate
      (
         template_app
          (template_app
            (template_app
              (template_app (template_hole 2, template_var 1),
               template_var 0),
             template_hole 1),
           template_hole 0)
         )),
    ("Akra_Bazzi_Method.CLAMP_aux", "(0::?'a) * ?a = (0::?'a)",
     template_equation
      (template_app
        (template_app (template_hole 1, template_hole 0), template_var 0),
       template_hole 0)),
    ("Akra_Bazzi_Method.CLAMP_aux", "?a * (0::?'a) = (0::?'a)",
     template_equation
      (template_app
        (template_app (template_hole 1, template_var 0), template_hole 0),
       template_hole 0)),
    ("Akra_Bazzi_Method.CLAMP_aux", "?a - (0::?'a) = ?a",
     template_equation
      (template_app
        (template_app (template_hole 1, template_var 0), template_hole 0),
       template_var 0)),
    ("Akra_Bazzi_Method.CLAMP_aux", "(0::?'a) + ?a = ?a",
     template_equation
      (template_app
        (template_app (template_hole 1, template_hole 0), template_var 0),
       template_var 0)),
    ("Akra_Bazzi_Method.CLAMP_aux", "?a + (0::?'a) = ?a",
     template_equation
      (template_app
        (template_app (template_hole 1, template_var 0), template_hole 0),
       template_var 0)),
    ("Akra_Bazzi_Method.CLAMP_aux", "num.One * ?n = ?n",
     template_equation
      (template_app
        (template_app (template_hole 1, template_hole 0), template_var 0),
       template_var 0)),
    ("Akra_Bazzi_Method.CLAMP_aux", "?m * num.One = ?m",
     template_equation
      (template_app
        (template_app (template_hole 1, template_var 0), template_hole 0),
       template_var 0)),
    ("Akra_Bazzi_Method.eval_akra_bazzi_le_list_ex",
     "list_ex ?P [] = False",
     template_equation
      (template_app
        (template_app (template_hole 2, template_var 0), template_hole 1),
       template_hole 0)),
    ("Akra_Bazzi_Method.CLAMP_aux", "(0::?'a) - ?a = - ?a",
     template_equation
      (template_app
        (template_app (template_hole 2, template_hole 1), template_var 0),
       template_app (template_hole 0, template_var 0))),
    ("Akra_Bazzi_Method.CLAMP_aux", "of_nat (numeral ?n) = numeral ?n",
     template_equation
      (template_app
        (template_hole 2, template_app (template_hole 1, template_var 0)),
       template_app (template_hole 0, template_var 0))),
    ("Akra_Bazzi_Method.CLAMP_aux", "\<bar>numeral ?n\<bar> = numeral ?n",
     template_equation
      (template_app
        (template_hole 1, template_app (template_hole 0, template_var 0)),
       template_app (template_hole 0, template_var 0))),
    ("Akra_Bazzi_Method.MASTER_BOUND_UNCLAMP",
     "??.Akra_Bazzi_Method.CLAMP (??.Akra_Bazzi_Method.CLAMP ?f) =
      ??.Akra_Bazzi_Method.CLAMP ?f",
     template_equation
      (template_app
        (template_hole 0, template_app (template_hole 0, template_var 0)),
       template_app (template_hole 0, template_var 0))),
    ("Akra_Bazzi_Method.propagate_CLAMP",
     "??.Akra_Bazzi_Method.CLAMP' (??.Akra_Bazzi_Method.CLAMP ?f) =
      ??.Akra_Bazzi_Method.CLAMP' ?f",
     template_equation
      (template_app
        (template_hole 1, template_app (template_hole 0, template_var 0)),
       template_app (template_hole 1, template_var 0))),
    ("Akra_Bazzi_Method.ball_set_intros", "ALL x:set []. ?P x",
     template_predicate
      (
         template_app
          (template_app
            (template_hole 2,
             template_app (template_hole 1, template_hole 0)),
           t_empty)
         )),
    ("Akra_Bazzi_Method.CLAMP_aux",
     "neg_numeral_class.dbl (numeral ?k) = numeral (num.Bit0 ?k)",
     template_equation
      (template_app
        (template_hole 2, template_app (template_hole 1, template_var 0)),
       template_app
        (template_hole 1, template_app (template_hole 0, template_var 0)))),
    ("Akra_Bazzi_Method.CLAMP_aux",
     "neg_numeral_class.dbl_dec (numeral ?k) = numeral (Num.BitM ?k)",
     template_equation
      (template_app
        (template_hole 2, template_app (template_hole 1, template_var 0)),
       template_app
        (template_hole 1, template_app (template_hole 0, template_var 0)))),
    ("Akra_Bazzi_Method.CLAMP_aux",
     "neg_numeral_class.dbl_inc (numeral ?k) = numeral (num.Bit1 ?k)",
     template_equation
      (template_app
        (template_hole 2, template_app (template_hole 1, template_var 0)),
       template_app
        (template_hole 1, template_app (template_hole 0, template_var 0)))),
    ("Akra_Bazzi_Method.CLAMP_aux", "\<bar>- numeral ?n\<bar> = numeral ?n",
     template_equation
      (template_app
        (template_hole 2,
         template_app
          (template_hole 1,
           template_app (template_hole 0, template_var 0))),
       template_app (template_hole 0, template_var 0))),
    ("Akra_Bazzi_Method.CLAMP_aux",
     "Num.BitM (num.Bit0 ?n) = num.Bit1 (Num.BitM ?n)",
     template_equation
      (template_app
        (template_hole 2, template_app (template_hole 1, template_var 0)),
       template_app
        (template_hole 0, template_app (template_hole 2, template_var 0)))),
    ("Akra_Bazzi_Method.CLAMP_aux",
     "Num.BitM (num.Bit1 ?n) = num.Bit1 (num.Bit0 ?n)",
     template_equation
      (template_app
        (template_hole 2, template_app (template_hole 1, template_var 0)),
       template_app
        (template_hole 1, template_app (template_hole 0, template_var 0)))),
    ("Akra_Bazzi_Method.CLAMP_aux", "num.One + num.Bit0 ?n = num.Bit1 ?n",
     template_equation
      (template_app
        (template_app (template_hole 3, template_hole 2),
         template_app (template_hole 1, template_var 0)),
       template_app (template_hole 0, template_var 0))),
    ("Akra_Bazzi_Method.CLAMP_aux", "num.Bit0 ?m + num.One = num.Bit1 ?m",
     template_equation
      (template_app
        (template_app
          (template_hole 3, template_app (template_hole 2, template_var 0)),
         template_hole 1),
       template_app (template_hole 0, template_var 0))),
    ("Akra_Bazzi_Method.CLAMP_aux",
     "neg_numeral_class.sub (num.Bit0 ?k) num.One = numeral (Num.BitM ?k)",
     template_equation
      (template_app
        (template_app
          (template_hole 4, template_app (template_hole 3, template_var 0)),
         template_hole 2),
       template_app
        (template_hole 1, template_app (template_hole 0, template_var 0)))),
    ("Akra_Bazzi_Method.CLAMP_aux",
     "neg_numeral_class.sub (num.Bit1 ?k) num.One = numeral (num.Bit0 ?k)",
     template_equation
      (template_app
        (template_app
          (template_hole 4, template_app (template_hole 3, template_var 0)),
         template_hole 2),
       template_app
        (template_hole 1, template_app (template_hole 0, template_var 0)))),
    ("Akra_Bazzi_Method.MASTER_BOUND_postproc",
     "??.Akra_Bazzi_Method.CLAMP (??.Akra_Bazzi_Method.MASTER_BOUND' ?a 0) =
      ??.Akra_Bazzi_Method.CLAMP (??.Akra_Bazzi_Method.MASTER_BOUND'' ?a)",
     template_equation
      (template_app
        (template_hole 3,
         template_app
          (template_app (template_hole 2, template_var 0),
           template_hole 1)),
       template_app
        (template_hole 3, template_app (template_hole 0, template_var 0)))),
    ("Akra_Bazzi_Method.eval_length",
     "length (?x # ?xs) = Suc (length ?xs)",
     template_equation
      (template_app
        (template_hole 2,
         template_app
          (template_app (template_hole 1, template_var 1), template_var 0)),
       template_app
        (template_hole 0, template_app (template_hole 2, template_var 0)))),
    ("Akra_Bazzi_Method.eval_akra_bazzi_le_sum_list",
     "(?x <= sum_list []) = (?x <= (0::?'a))",
     template_equation
      (template_app
        (template_app (template_hole 3, template_var 0),
         template_app (template_hole 2, template_hole 1)),
       template_app
        (template_app (template_hole 3, template_var 0), template_hole 0))),
    ("Akra_Bazzi_Method.eval_akra_bazzi_le_list_ex",
     "list_ex ?P [?x] = ?P ?x",
     template_equation
      (template_app
        (template_app (template_hole 2, template_var 1),
         template_app
          (template_app (template_hole 1, template_var 0),
           template_hole 0)),
       template_app (template_var 1, template_var 0))),
    ("Akra_Bazzi_Method.ball_set_simps", "(ALL x:set []. ?P x) = True",
     template_equation
      (template_app
        (template_app
          (template_hole 3,
           template_app (template_hole 2, template_hole 1)),
         t_empty),
       template_hole 0)),
    ("Akra_Bazzi_Method.bex_set_simps", "(EX x:set []. ?P x) = False",
     template_equation
      (template_app
        (template_app
          (template_hole 3,
           template_app (template_hole 2, template_hole 1)),
         t_empty),
       template_hole 0)),
    ("Akra_Bazzi_Method.CLAMP_aux",
     "neg_numeral_class.dbl (- numeral ?k) =
      - neg_numeral_class.dbl (numeral ?k)",
     template_equation
      (template_app
        (template_hole 2,
         template_app
          (template_hole 1,
           template_app (template_hole 0, template_var 0))),
       template_app
        (template_hole 1,
         template_app
          (template_hole 2,
           template_app (template_hole 0, template_var 0))))),
    ("Akra_Bazzi_Method.CLAMP_aux",
     "neg_numeral_class.dbl_dec (- numeral ?k) =
      - neg_numeral_class.dbl_inc (numeral ?k)",
     template_equation
      (template_app
        (template_hole 3,
         template_app
          (template_hole 2,
           template_app (template_hole 1, template_var 0))),
       template_app
        (template_hole 2,
         template_app
          (template_hole 0,
           template_app (template_hole 1, template_var 0))))),
    ("Akra_Bazzi_Method.CLAMP_aux",
     "neg_numeral_class.dbl_inc (- numeral ?k) =
      - neg_numeral_class.dbl_dec (numeral ?k)",
     template_equation
      (template_app
        (template_hole 3,
         template_app
          (template_hole 2,
           template_app (template_hole 1, template_var 0))),
       template_app
        (template_hole 2,
         template_app
          (template_hole 0,
           template_app (template_hole 1, template_var 0))))),
    ("Akra_Bazzi_Method.CLAMP_aux",
     "neg_numeral_class.sub num.One (num.Bit0 ?l) =
      - numeral (Num.BitM ?l)",
     template_equation
      (template_app
        (template_app (template_hole 5, template_hole 4),
         template_app (template_hole 3, template_var 0)),
       template_app
        (template_hole 2,
         template_app
          (template_hole 1,
           template_app (template_hole 0, template_var 0))))),
    ("Akra_Bazzi_Method.CLAMP_aux",
     "neg_numeral_class.sub num.One (num.Bit1 ?l) =
      - numeral (num.Bit0 ?l)",
     template_equation
      (template_app
        (template_app (template_hole 5, template_hole 4),
         template_app (template_hole 3, template_var 0)),
       template_app
        (template_hole 2,
         template_app
          (template_hole 1,
           template_app (template_hole 0, template_var 0))))),
    ("Akra_Bazzi_Method.CLAMP_aux",
     "numeral ?m - numeral ?n = neg_numeral_class.sub ?m ?n",
     template_equation
      (template_app
        (template_app
          (template_hole 2, template_app (template_hole 1, template_var 1)),
         template_app (template_hole 1, template_var 0)),
       template_app
        (template_app (template_hole 0, template_var 1), template_var 0))),
    ("Akra_Bazzi_Method.CLAMP_aux", "of_nat (?m ^ ?n) = of_nat ?m ^ ?n",
     template_equation
      (template_app
        (template_hole 2,
         template_app
          (template_app (template_hole 1, template_var 1), template_var 0)),
       template_app
        (template_app
          (template_hole 0, template_app (template_hole 2, template_var 1)),
         template_var 0))),
    ("Akra_Bazzi_Method.CLAMP_aux",
     "num.One + num.Bit1 ?n = num.Bit0 (?n + num.One)",
     template_equation
      (template_app
        (template_app (template_hole 3, template_hole 2),
         template_app (template_hole 1, template_var 0)),
       template_app
        (template_hole 0,
         template_app
          (template_app (template_hole 3, template_var 0),
           template_hole 2)))),
    ("Akra_Bazzi_Method.CLAMP_aux",
     "num.Bit1 ?m + num.One = num.Bit0 (?m + num.One)",
     template_equation
      (template_app
        (template_app
          (template_hole 3, template_app (template_hole 2, template_var 0)),
         template_hole 1),
       template_app
        (template_hole 0,
         template_app
          (template_app (template_hole 3, template_var 0),
           template_hole 1)))),
    ("Akra_Bazzi_Method.CLAMP_aux",
     "numeral ?m + numeral ?n = numeral (?m + ?n)",
     template_equation
      (template_app
        (template_app
          (template_hole 2, template_app (template_hole 1, template_var 1)),
         template_app (template_hole 1, template_var 0)),
       template_app
        (template_hole 1,
         template_app
          (template_app (template_hole 0, template_var 1),
           template_var 0)))),
    ("Akra_Bazzi_Method.CLAMP_aux",
     "neg_numeral_class.sub (num.Bit0 ?k) (num.Bit0 ?l) =
      neg_numeral_class.dbl (neg_numeral_class.sub ?k ?l)",
     template_equation
      (template_app
        (template_app
          (template_hole 2, template_app (template_hole 1, template_var 1)),
         template_app (template_hole 1, template_var 0)),
       template_app
        (template_hole 0,
         template_app
          (template_app (template_hole 2, template_var 1),
           template_var 0)))),
    ("Akra_Bazzi_Method.CLAMP_aux",
     "neg_numeral_class.sub (num.Bit0 ?k) (num.Bit1 ?l) =
      neg_numeral_class.dbl_dec (neg_numeral_class.sub ?k ?l)",
     template_equation
      (template_app
        (template_app
          (template_hole 3, template_app (template_hole 2, template_var 1)),
         template_app (template_hole 1, template_var 0)),
       template_app
        (template_hole 0,
         template_app
          (template_app (template_hole 3, template_var 1),
           template_var 0)))),
    ("Akra_Bazzi_Method.CLAMP_aux",
     "neg_numeral_class.sub (num.Bit1 ?k) (num.Bit0 ?l) =
      neg_numeral_class.dbl_inc (neg_numeral_class.sub ?k ?l)",
     template_equation
      (template_app
        (template_app
          (template_hole 3, template_app (template_hole 2, template_var 1)),
         template_app (template_hole 1, template_var 0)),
       template_app
        (template_hole 0,
         template_app
          (template_app (template_hole 3, template_var 1),
           template_var 0)))),
    ("Akra_Bazzi_Method.CLAMP_aux",
     "neg_numeral_class.sub (num.Bit1 ?k) (num.Bit1 ?l) =
      neg_numeral_class.dbl (neg_numeral_class.sub ?k ?l)",
     template_equation
      (template_app
        (template_app
          (template_hole 2, template_app (template_hole 1, template_var 1)),
         template_app (template_hole 1, template_var 0)),
       template_app
        (template_hole 0,
         template_app
          (template_app (template_hole 2, template_var 1),
           template_var 0)))),
    ("Akra_Bazzi_Method.CLAMP_aux",
     "numeral ?m + - numeral ?n = neg_numeral_class.sub ?m ?n",
     template_equation
      (template_app
        (template_app
          (template_hole 3, template_app (template_hole 2, template_var 1)),
         template_app
          (template_hole 1,
           template_app (template_hole 2, template_var 0))),
       template_app
        (template_app (template_hole 0, template_var 1), template_var 0))),
    ("Akra_Bazzi_Method.CLAMP_aux",
     "- numeral ?m + numeral ?n = neg_numeral_class.sub ?n ?m",
     template_equation
      (template_app
        (template_app
          (template_hole 3,
           template_app
            (template_hole 2,
             template_app (template_hole 1, template_var 1))),
         template_app (template_hole 1, template_var 0)),
       template_app
        (template_app (template_hole 0, template_var 0), template_var 1))),
    ("Akra_Bazzi_Method.CLAMP_aux",
     "of_nat (?m * ?n) = of_nat ?m * of_nat ?n",
     template_equation
      (template_app
        (template_hole 2,
         template_app
          (template_app (template_hole 1, template_var 1), template_var 0)),
       template_app
        (template_app
          (template_hole 0, template_app (template_hole 2, template_var 1)),
         template_app (template_hole 2, template_var 0)))),
    ("Akra_Bazzi_Method.CLAMP_aux",
     "numeral ?m * numeral ?n = numeral (?m * ?n)",
     template_equation
      (template_app
        (template_app
          (template_hole 2, template_app (template_hole 1, template_var 1)),
         template_app (template_hole 1, template_var 0)),
       template_app
        (template_hole 1,
         template_app
          (template_app (template_hole 0, template_var 1),
           template_var 0)))),
    ("Akra_Bazzi_Method.MASTER_BOUND_postproc",
     "??.Akra_Bazzi_Method.CLAMP (??.Akra_Bazzi_Method.MASTER_BOUND'' ?a) =
      ??.Akra_Bazzi_Method.CLAMP (%x. real x powr ?a)",
     template_equation
      (template_app
        (template_hole 3, template_app (template_hole 2, template_var 0)),
       template_app (template_hole 3, t_empty))),
    ("Akra_Bazzi_Method.CLAMP_aux",
     "num.Bit0 ?m + num.Bit0 ?n = num.Bit0 (?m + ?n)",
     template_equation
      (template_app
        (template_app
          (template_hole 1, template_app (template_hole 0, template_var 1)),
         template_app (template_hole 0, template_var 0)),
       template_app
        (template_hole 0,
         template_app
          (template_app (template_hole 1, template_var 1),
           template_var 0)))),
    ("Akra_Bazzi_Method.CLAMP_aux",
     "num.Bit0 ?m + num.Bit1 ?n = num.Bit1 (?m + ?n)",
     template_equation
      (template_app
        (template_app
          (template_hole 2, template_app (template_hole 1, template_var 1)),
         template_app (template_hole 0, template_var 0)),
       template_app
        (template_hole 0,
         template_app
          (template_app (template_hole 2, template_var 1),
           template_var 0)))),
    ("Akra_Bazzi_Method.CLAMP_aux",
     "num.Bit1 ?m + num.Bit0 ?n = num.Bit1 (?m + ?n)",
     template_equation
      (template_app
        (template_app
          (template_hole 2, template_app (template_hole 1, template_var 1)),
         template_app (template_hole 0, template_var 0)),
       template_app
        (template_hole 1,
         template_app
          (template_app (template_hole 2, template_var 1),
           template_var 0)))),
    ("Akra_Bazzi_Method.eval_akra_bazzi_le_sum_list",
     "(?x <= ?z + sum_list []) = (?x <= ?z)",
     template_equation
      (template_app
        (template_app (template_hole 3, template_var 1),
         template_app
          (template_app (template_hole 2, template_var 0),
           template_app (template_hole 1, template_hole 0))),
       template_app
        (template_app (template_hole 3, template_var 1), template_var 0))),
    ("Akra_Bazzi_Method.CLAMP_aux",
     "numeral ?m - - numeral ?n = numeral (?m + ?n)",
     template_equation
      (template_app
        (template_app
          (template_hole 3, template_app (template_hole 2, template_var 1)),
         template_app
          (template_hole 1,
           template_app (template_hole 2, template_var 0))),
       template_app
        (template_hole 2,
         template_app
          (template_app (template_hole 0, template_var 1),
           template_var 0)))),
    ("Akra_Bazzi_Method.CLAMP_aux",
     "- numeral ?m - - numeral ?n = neg_numeral_class.sub ?n ?m",
     template_equation
      (template_app
        (template_app
          (template_hole 3,
           template_app
            (template_hole 2,
             template_app (template_hole 1, template_var 1))),
         template_app
          (template_hole 2,
           template_app (template_hole 1, template_var 0))),
       template_app
        (template_app (template_hole 0, template_var 0), template_var 1))),
    ("Akra_Bazzi_Method.CLAMP_aux",
     "num.Bit0 ?m * num.Bit0 ?n = num.Bit0 (num.Bit0 (?m * ?n))",
     template_equation
      (template_app
        (template_app
          (template_hole 1, template_app (template_hole 0, template_var 1)),
         template_app (template_hole 0, template_var 0)),
       template_app
        (template_hole 0,
         template_app
          (template_hole 0,
           template_app
            (template_app (template_hole 1, template_var 1),
             template_var 0))))),
    ("Akra_Bazzi_Method.CLAMP_aux",
     "num.Bit0 ?m * num.Bit1 ?n = num.Bit0 (?m * num.Bit1 ?n)",
     template_equation
      (template_app
        (template_app
          (template_hole 2, template_app (template_hole 1, template_var 1)),
         template_app (template_hole 0, template_var 0)),
       template_app
        (template_hole 1,
         template_app
          (template_app (template_hole 2, template_var 1),
           template_app (template_hole 0, template_var 0))))),
    ("Akra_Bazzi_Method.CLAMP_aux",
     "num.Bit1 ?m * num.Bit0 ?n = num.Bit0 (num.Bit1 ?m * ?n)",
     template_equation
      (template_app
        (template_app
          (template_hole 2, template_app (template_hole 1, template_var 1)),
         template_app (template_hole 0, template_var 0)),
       template_app
        (template_hole 0,
         template_app
          (template_app
            (template_hole 2,
             template_app (template_hole 1, template_var 1)),
           template_var 0)))),
    ("Akra_Bazzi_Method.akra_bazzi_termination_simps",
     "real ?x / ?b = 1 / ?b * real ?x",
     template_equation
      (template_app
        (template_app
          (template_hole 3, template_app (template_hole 2, template_var 1)),
         template_var 0),
       template_app
        (template_app
          (template_hole 1,
           template_app
            (template_app (template_hole 3, template_hole 0),
             template_var 0)),
         template_app (template_hole 2, template_var 1)))),
    ("Akra_Bazzi_Method.ln_1_imp_less_3", "ln ?x = 1 ==> ?x < 3",
     template_implication
      ([template_equation
         (template_app (template_hole 5, template_var 0), template_hole 4)],
       template_inequation
        (less_than, template_var 0,
         template_app
          (template_hole 2,
           template_app (template_hole 1, template_hole 0))))),
    ("Akra_Bazzi_Method.CLAMP_aux",
     "numeral ?m * - numeral ?n = - numeral (?m * ?n)",
     template_equation
      (template_app
        (template_app
          (template_hole 3, template_app (template_hole 2, template_var 1)),
         template_app
          (template_hole 1,
           template_app (template_hole 2, template_var 0))),
       template_app
        (template_hole 1,
         template_app
          (template_hole 2,
           template_app
            (template_app (template_hole 0, template_var 1),
             template_var 0))))),
    ("Akra_Bazzi_Method.CLAMP_aux",
     "- numeral ?m * numeral ?n = - numeral (?m * ?n)",
     template_equation
      (template_app
        (template_app
          (template_hole 3,
           template_app
            (template_hole 2,
             template_app (template_hole 1, template_var 1))),
         template_app (template_hole 1, template_var 0)),
       template_app
        (template_hole 2,
         template_app
          (template_hole 1,
           template_app
            (template_app (template_hole 0, template_var 1),
             template_var 0))))),
    ("Akra_Bazzi_Method.CLAMP_aux",
     "- numeral ?m * - numeral ?n = numeral (?m * ?n)",
     template_equation
      (template_app
        (template_app
          (template_hole 3,
           template_app
            (template_hole 2,
             template_app (template_hole 1, template_var 1))),
         template_app
          (template_hole 2,
           template_app (template_hole 1, template_var 0))),
       template_app
        (template_hole 1,
         template_app
          (template_app (template_hole 0, template_var 1),
           template_var 0)))),
    ("Akra_Bazzi_Method.CLAMP_aux",
     "- numeral ?m - numeral ?n = - numeral (?m + ?n)",
     template_equation
      (template_app
        (template_app
          (template_hole 3,
           template_app
            (template_hole 2,
             template_app (template_hole 1, template_var 1))),
         template_app (template_hole 1, template_var 0)),
       template_app
        (template_hole 2,
         template_app
          (template_hole 1,
           template_app
            (template_app (template_hole 0, template_var 1),
             template_var 0))))),
    ("Akra_Bazzi_Method.MASTER_BOUND_postproc",
     "??.Akra_Bazzi_Method.CLAMP
       (??.Akra_Bazzi_Method.MASTER_BOUND'' (numeral ?n)) =
      ??.Akra_Bazzi_Method.CLAMP (%x. real x ^ numeral ?n)",
     template_equation
      (template_app
        (template_hole 5,
         template_app
          (template_hole 4,
           template_app (template_hole 3, template_var 0))),
       template_app (template_hole 5, t_empty))),
    ("Akra_Bazzi_Method.propagate_CLAMP",
     "??.Akra_Bazzi_Method.CLAMP (%x. inverse (?f x)) =
      ??.Akra_Bazzi_Method.CLAMP'
       (%x. inverse (??.Akra_Bazzi_Method.CLAMP ?f x))",
     template_equation
      (template_app (template_hole 2, t_empty),
       template_app (template_hole 0, t_empty))),
    ("Akra_Bazzi_Method.propagate_CLAMP",
     "??.Akra_Bazzi_Method.CLAMP (%x. real x powr ?a) =
      ??.Akra_Bazzi_Method.CLAMP'
       (??.Akra_Bazzi_Method.MASTER_BOUND ?a 0 0)",
     template_equation
      (template_app (template_hole 5, t_empty),
       template_app
        (template_hole 2,
         template_app
          (template_app
            (template_app (template_hole 1, template_var 0),
             template_hole 0),
           template_hole 0)))),
    ("Akra_Bazzi_Method.CLAMP_aux",
     "num.Bit1 ?m + num.Bit1 ?n = num.Bit0 (?m + ?n + num.One)",
     template_equation
      (template_app
        (template_app
          (template_hole 3, template_app (template_hole 2, template_var 1)),
         template_app (template_hole 2, template_var 0)),
       template_app
        (template_hole 1,
         template_app
          (template_app
            (template_hole 3,
             template_app
              (template_app (template_hole 3, template_var 1),
               template_var 0)),
           template_hole 0)))),
    ("Akra_Bazzi_Method.ln_1_imp_less_3'", "ln (real ?x) = 1 ==> ?x < 3",
     template_implication
      ([template_equation
         (template_app
           (template_hole 6,
            template_app (template_hole 5, template_var 0)),
          template_hole 4)],
       template_inequation
        (less_than, template_var 0,
         template_app
          (template_hole 2,
           template_app (template_hole 1, template_hole 0))))),
    ("Akra_Bazzi_Method.ln_ln_pos", "3 <= ?x ==> 0 < ln (ln ?x)",
     template_implication
      ([template_inequation
         (less_equals,
          template_app
           (template_hole 5,
            template_app (template_hole 4, template_hole 3)),
          template_var 0)],
       template_inequation
        (less_than, template_hole 1,
         template_app
          (template_hole 0,
           template_app (template_hole 0, template_var 0))))),
    ("Akra_Bazzi_Method.ln_ln_nonneg", "3 <= ?x ==> 0 <= ln (ln ?x)",
     template_implication
      ([template_inequation
         (less_equals,
          template_app
           (template_hole 4,
            template_app (template_hole 3, template_hole 2)),
          template_var 0)],
       template_inequation
        (less_equals, template_hole 1,
         template_app
          (template_hole 0,
           template_app (template_hole 0, template_var 0))))),
    ("Akra_Bazzi_Method.propagate_CLAMP",
     "??.Akra_Bazzi_Method.CLAMP (%x. real x ^ ?a') =
      ??.Akra_Bazzi_Method.CLAMP'
       (??.Akra_Bazzi_Method.MASTER_BOUND (real ?a') 0 0)",
     template_equation
      (template_app (template_hole 5, t_empty),
       template_app
        (template_hole 2,
         template_app
          (template_app
            (template_app
              (template_hole 1,
               template_app (template_hole 3, template_var 0)),
             template_hole 0),
           template_hole 0)))),
    ("Akra_Bazzi_Method.propagate_CLAMP",
     "??.Akra_Bazzi_Method.CLAMP (%x. ln (real x) powr ?b) =
      ??.Akra_Bazzi_Method.CLAMP'
       (??.Akra_Bazzi_Method.MASTER_BOUND 0 ?b 0)",
     template_equation
      (template_app (template_hole 6, t_empty),
       template_app
        (template_hole 2,
         template_app
          (template_app
            (template_app (template_hole 1, template_hole 0),
             template_var 0),
           template_hole 0)))),
    ("Akra_Bazzi_Method.eval_akra_bazzi_le_sum_list",
     "(?x <= sum_list (?y # ?ys)) = (?x <= ?y + sum_list ?ys)",
     template_equation
      (template_app
        (template_app (template_hole 3, template_var 2),
         template_app
          (template_hole 2,
           template_app
            (template_app (template_hole 1, template_var 1),
             template_var 0))),
       template_app
        (template_app (template_hole 3, template_var 2),
         template_app
          (template_app (template_hole 0, template_var 1),
           template_app (template_hole 2, template_var 0))))),
    ("Akra_Bazzi_Method.akra_bazzi_termination_simps",
     "?a * real ?x / ?b = ?a / ?b * real ?x",
     template_equation
      (template_app
        (template_app
          (template_hole 2,
           template_app
            (template_app (template_hole 1, template_var 2),
             template_app (template_hole 0, template_var 1))),
         template_var 0),
       template_app
        (template_app
          (template_hole 1,
           template_app
            (template_app (template_hole 2, template_var 2),
             template_var 0)),
         template_app (template_hole 0, template_var 1)))),
    ("Akra_Bazzi_Method.CLAMP_aux",
     "?a + numeral ?b - numeral ?c = ?a + neg_numeral_class.sub ?b ?c",
     template_equation
      (template_app
        (template_app
          (template_hole 3,
           template_app
            (template_app (template_hole 2, template_var 2),
             template_app (template_hole 1, template_var 1))),
         template_app (template_hole 1, template_var 0)),
       template_app
        (template_app (template_hole 2, template_var 2),
         template_app
          (template_app (template_hole 0, template_var 1),
           template_var 0)))),
    ("Akra_Bazzi_Method.CLAMP_aux",
     "?a - numeral ?b + numeral ?c = ?a + neg_numeral_class.sub ?c ?b",
     template_equation
      (template_app
        (template_app
          (template_hole 3,
           template_app
            (template_app (template_hole 2, template_var 2),
             template_app (template_hole 1, template_var 1))),
         template_app (template_hole 1, template_var 0)),
       template_app
        (template_app (template_hole 3, template_var 2),
         template_app
          (template_app (template_hole 0, template_var 0),
           template_var 1)))),
    ("Akra_Bazzi_Method.ln_ln_nonneg'",
     "3 <= ?x ==> 0 <= ln (ln (real ?x))",
     template_implication
      ([template_inequation
         (less_equals,
          template_app
           (template_hole 6,
            template_app (template_hole 5, template_hole 4)),
          template_var 0)],
       template_inequation
        (less_equals, template_hole 2,
         template_app
          (template_hole 1,
           template_app
            (template_hole 1,
             template_app (template_hole 0, template_var 0)))))),
    ("Akra_Bazzi_Method.CLAMP_aux",
     "- numeral ?m + - numeral ?n = - (numeral ?m + numeral ?n)",
     template_equation
      (template_app
        (template_app
          (template_hole 2,
           template_app
            (template_hole 1,
             template_app (template_hole 0, template_var 1))),
         template_app
          (template_hole 1,
           template_app (template_hole 0, template_var 0))),
       template_app
        (template_hole 1,
         template_app
          (template_app
            (template_hole 2,
             template_app (template_hole 0, template_var 1)),
           template_app (template_hole 0, template_var 0))))),
    ("Akra_Bazzi_Method.propagate_CLAMP",
     "??.Akra_Bazzi_Method.CLAMP (%x. ln (real x) ^ ?b') =
      ??.Akra_Bazzi_Method.CLAMP'
       (??.Akra_Bazzi_Method.MASTER_BOUND 0 (real ?b') 0)",
     template_equation
      (template_app (template_hole 6, t_empty),
       template_app
        (template_hole 2,
         template_app
          (template_app
            (template_app (template_hole 1, template_hole 0),
             template_app (template_hole 3, template_var 0)),
           template_hole 0)))),
    ("Akra_Bazzi_Method.propagate_CLAMP",
     "??.Akra_Bazzi_Method.CLAMP (%x. ln (ln (real x)) powr ?c) =
      ??.Akra_Bazzi_Method.CLAMP'
       (??.Akra_Bazzi_Method.MASTER_BOUND 0 0 ?c)",
     template_equation
      (template_app (template_hole 6, t_empty),
       template_app
        (template_hole 2,
         template_app
          (template_app
            (template_app (template_hole 1, template_hole 0),
             template_hole 0),
           template_var 0)))),
    ("Akra_Bazzi_Method.CLAMP_aux",
     "?a - numeral ?b - numeral ?c = ?a - numeral (?b + ?c)",
     template_equation
      (template_app
        (template_app
          (template_hole 2,
           template_app
            (template_app (template_hole 2, template_var 2),
             template_app (template_hole 1, template_var 1))),
         template_app (template_hole 1, template_var 0)),
       template_app
        (template_app (template_hole 2, template_var 2),
         template_app
          (template_hole 1,
           template_app
            (template_app (template_hole 0, template_var 1),
             template_var 0))))),
    ("Akra_Bazzi_Method.CLAMP_aux",
     "?a + numeral ?b + numeral ?c = ?a + numeral (?b + ?c)",
     template_equation
      (template_app
        (template_app
          (template_hole 2,
           template_app
            (template_app (template_hole 2, template_var 2),
             template_app (template_hole 1, template_var 1))),
         template_app (template_hole 1, template_var 0)),
       template_app
        (template_app (template_hole 2, template_var 2),
         template_app
          (template_hole 1,
           template_app
            (template_app (template_hole 0, template_var 1),
             template_var 0))))),
    ("Akra_Bazzi_Method.eval_akra_bazzi_sum",
     "(SUM i<0. ?as ! i * ?bs ! i powr ?x) = (0::?'a)",
     template_equation
      (template_app
        (template_app (template_hole 6, t_empty),
         template_app (template_hole 2, template_hole 1)),
       template_hole 0)),
    ("Akra_Bazzi_Method.eval_akra_bazzi_sum'",
     "(SUM i<0. ?as ! i * ?f ((?ts ! i) ?x)) = (0::?'a)",
     template_equation
      (template_app
        (template_app (template_hole 6, t_empty),
         template_app (template_hole 2, template_hole 1)),
       template_hole 0)),
    ("Akra_Bazzi_Method.MASTER_BOUND_postproc",
     "??.Akra_Bazzi_Method.CLAMP
       (??.Akra_Bazzi_Method.MASTER_BOUND'' (- numeral ?n)) =
      ??.Akra_Bazzi_Method.CLAMP (%x. 1 / real x ^ numeral ?n)",
     template_equation
      (template_app
        (template_hole 8,
         template_app
          (template_hole 7,
           template_app
            (template_hole 6,
             template_app (template_hole 5, template_var 0)))),
       template_app (template_hole 8, t_empty))),
    ("Akra_Bazzi_Method.propagate_CLAMP",
     "??.Akra_Bazzi_Method.CLAMP (%x. ln (ln (real x)) ^ ?c') =
      ??.Akra_Bazzi_Method.CLAMP'
       (??.Akra_Bazzi_Method.MASTER_BOUND 0 0 (real ?c'))",
     template_equation
      (template_app (template_hole 6, t_empty),
       template_app
        (template_hole 2,
         template_app
          (template_app
            (template_app (template_hole 1, template_hole 0),
             template_hole 0),
           template_app (template_hole 3, template_var 0))))),
    ("Akra_Bazzi_Method.CLAMP_aux",
     "num.Bit1 ?m * num.Bit1 ?n = num.Bit1 (?m + ?n + num.Bit0 (?m * ?n))",
     template_equation
      (template_app
        (template_app
          (template_hole 3, template_app (template_hole 2, template_var 1)),
         template_app (template_hole 2, template_var 0)),
       template_app
        (template_hole 2,
         template_app
          (template_app
            (template_hole 1,
             template_app
              (template_app (template_hole 1, template_var 1),
               template_var 0)),
           template_app
            (template_hole 0,
             template_app
              (template_app (template_hole 3, template_var 1),
               template_var 0)))))),
    ("Akra_Bazzi_Method.eval_akra_bazzi_le_list_ex",
     "list_ex ?P (?x # ?y # ?xs) = (?P ?x | list_ex ?P (?y # ?xs))",
     template_equation
      (template_app
        (template_app (template_hole 2, template_var 3),
         template_app
          (template_app (template_hole 1, template_var 2),
           template_app
            (template_app (template_hole 1, template_var 1),
             template_var 0))),
       template_app
        (template_app
          (template_hole 0, template_app (template_var 3, template_var 2)),
         template_app
          (template_app (template_hole 2, template_var 3),
           template_app
            (template_app (template_hole 1, template_var 1),
             template_var 0))))),
    ("Akra_Bazzi_Method.propagate_CLAMP",
     "??.Akra_Bazzi_Method.CLAMP (%x. ?f x * ?g x) =
      ??.Akra_Bazzi_Method.CLAMP'
       (%x. ??.Akra_Bazzi_Method.CLAMP ?f x *
            ??.Akra_Bazzi_Method.CLAMP ?g x)",
     template_equation
      (template_app (template_hole 2, t_empty),
       template_app (template_hole 0, t_empty))),
    ("Akra_Bazzi_Method.propagate_CLAMP",
     "??.Akra_Bazzi_Method.CLAMP (%x. ?f x / ?g x) =
      ??.Akra_Bazzi_Method.CLAMP'
       (%x. ??.Akra_Bazzi_Method.CLAMP ?f x /
            ??.Akra_Bazzi_Method.CLAMP ?g x)",
     template_equation
      (template_app (template_hole 2, t_empty),
       template_app (template_hole 0, t_empty))),
    ("Akra_Bazzi_Method.propagate_CLAMP",
     "??.Akra_Bazzi_Method.CLAMP'
       (%x. inverse
             (??.Akra_Bazzi_Method.MASTER_BOUND ?a1.0 ?b1.0 ?c1.0 x)) =
      ??.Akra_Bazzi_Method.CLAMP'
       (??.Akra_Bazzi_Method.MASTER_BOUND (- ?a1.0) (- ?b1.0) (- ?c1.0))",
     template_equation
      (template_app (template_hole 3, t_empty),
       template_app
        (template_hole 3,
         template_app
          (template_app
            (template_app
              (template_hole 1,
               template_app (template_hole 0, template_var 2)),
             template_app (template_hole 0, template_var 1)),
           template_app (template_hole 0, template_var 0))))),
    ("Akra_Bazzi_Method.MASTER_BOUND_UNCLAMP",
     "??.Akra_Bazzi_Method.CLAMP
       (%x. ??.Akra_Bazzi_Method.CLAMP ?f x *
            ??.Akra_Bazzi_Method.CLAMP ?g x) =
      ??.Akra_Bazzi_Method.CLAMP (%x. ?f x * ?g x)",
     template_equation
      (template_app (template_hole 1, t_empty),
       template_app (template_hole 1, t_empty))),
    ("Akra_Bazzi_Method.MASTER_BOUND_UNCLAMP",
     "??.Akra_Bazzi_Method.CLAMP
       (%x. ??.Akra_Bazzi_Method.CLAMP ?f x /
            ??.Akra_Bazzi_Method.CLAMP ?g x) =
      ??.Akra_Bazzi_Method.CLAMP (%x. ?f x / ?g x)",
     template_equation
      (template_app (template_hole 1, t_empty),
       template_app (template_hole 1, t_empty))),
    ("Akra_Bazzi_Method.eval_akra_bazzi_le_sum_list",
     "(?x <= ?z + sum_list (?y # ?ys)) = (?x <= ?z + ?y + sum_list ?ys)",
     template_equation
      (template_app
        (template_app (template_hole 3, template_var 3),
         template_app
          (template_app (template_hole 2, template_var 2),
           template_app
            (template_hole 1,
             template_app
              (template_app (template_hole 0, template_var 1),
               template_var 0)))),
       template_app
        (template_app (template_hole 3, template_var 3),
         template_app
          (template_app
            (template_hole 2,
             template_app
              (template_app (template_hole 2, template_var 2),
               template_var 1)),
           template_app (template_hole 1, template_var 0))))),
    ("Akra_Bazzi_Method.MASTER_BOUND_postproc",
     "??.Akra_Bazzi_Method.CLAMP (??.Akra_Bazzi_Method.MASTER_BOUND' ?a 1) =
      ??.Akra_Bazzi_Method.CLAMP
       (%x. ??.Akra_Bazzi_Method.CLAMP
             (??.Akra_Bazzi_Method.MASTER_BOUND'' ?a) x *
            ??.Akra_Bazzi_Method.CLAMP (%x. ln (real x)) x)",
     template_equation
      (template_app
        (template_hole 6,
         template_app
          (template_app (template_hole 5, template_var 0),
           template_hole 4)),
       template_app (template_hole 6, t_empty))),
    ("Akra_Bazzi_Method.ball_set_simps",
     "(ALL x:set (?x # ?xs). ?P x) = (?P ?x & (ALL x:set ?xs. ?P x))",
     template_equation
      (template_app
        (template_app
          (template_hole 3,
           template_app
            (template_hole 2,
             template_app
              (template_app (template_hole 1, template_var 2),
               template_var 1))),
         t_empty),
       template_app
        (template_app
          (template_hole 0, template_app (template_var 0, template_var 2)),
         template_app
          (template_app
            (template_hole 3,
             template_app (template_hole 2, template_var 1)),
           t_empty)))),
    ("Akra_Bazzi_Method.bex_set_simps",
     "(EX x:set (?x # ?xs). ?P x) = (?P ?x | (EX x:set ?xs. ?P x))",
     template_equation
      (template_app
        (template_app
          (template_hole 3,
           template_app
            (template_hole 2,
             template_app
              (template_app (template_hole 1, template_var 2),
               template_var 1))),
         t_empty),
       template_app
        (template_app
          (template_hole 0, template_app (template_var 0, template_var 2)),
         template_app
          (template_app
            (template_hole 3,
             template_app (template_hole 2, template_var 1)),
           t_empty)))),
    ("Akra_Bazzi_Method.akra_bazzi_term_imp_size_less",
     "[| ?x\<^sub>1 <= ?x; akra_bazzi_term 0 ?x\<^sub>1 ?b ?t |]
      ==> size (?t ?x) < size ?x",
     template_implication
      ([template_inequation (less_equals, template_var 3, template_var 2),
        template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_app (template_hole 3, template_hole 2),
                  template_var 3),
                template_var 1),
              template_var 0)
            )],
       template_inequation
        (less_than,
         template_app
          (template_hole 0, template_app (template_var 0, template_var 2)),
         template_app (template_hole 0, template_var 2)))),
    ("Akra_Bazzi_Method.MASTER_BOUND_postproc",
     "??.Akra_Bazzi_Method.CLAMP
       (??.Akra_Bazzi_Method.MASTER_BOUND' ?a (- 1)) =
      ??.Akra_Bazzi_Method.CLAMP
       (%x. ??.Akra_Bazzi_Method.CLAMP
             (??.Akra_Bazzi_Method.MASTER_BOUND'' ?a) x /
            ??.Akra_Bazzi_Method.CLAMP (%x. ln (real x)) x)",
     template_equation
      (template_app
        (template_hole 7,
         template_app
          (template_app (template_hole 6, template_var 0),
           template_app (template_hole 5, template_hole 4))),
       template_app (template_hole 7, t_empty))),
    ("Akra_Bazzi_Method.akra_bazzi_term_imp_size_less",
     "[| ?x\<^sub>1 < ?x; akra_bazzi_term 0 (Suc ?x\<^sub>1) ?b ?t |]
      ==> size (?t ?x) < size ?x",
     template_implication
      ([template_inequation (less_than, template_var 3, template_var 2),
        template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_app (template_hole 3, template_hole 2),
                  template_app (template_hole 1, template_var 3)),
                template_var 1),
              template_var 0)
            )],
       template_inequation
        (less_than,
         template_app
          (template_hole 0, template_app (template_var 0, template_var 2)),
         template_app (template_hole 0, template_var 2)))),
    ("Akra_Bazzi_Method.MASTER_BOUND_postproc",
     "??.Akra_Bazzi_Method.CLAMP
       (??.Akra_Bazzi_Method.MASTER_BOUND' ?a ?b) =
      ??.Akra_Bazzi_Method.CLAMP
       (%x. ??.Akra_Bazzi_Method.CLAMP
             (??.Akra_Bazzi_Method.MASTER_BOUND'' ?a) x *
            ??.Akra_Bazzi_Method.CLAMP (%x. ln (real x) powr ?b) x)",
     template_equation
      (template_app
        (template_hole 6,
         template_app
          (template_app (template_hole 5, template_var 1), template_var 0)),
       template_app (template_hole 6, t_empty))),
    ("Akra_Bazzi_Method.measure_prod_conv'",
     "(((?e, ?f), ?g, ?h) : Wellfounded.measure snd) =
      ((?f, ?h) : Wellfounded.measure (%x. x))",
     template_equation
      (template_app
        (template_app
          (template_hole 7,
           template_app
            (template_app
              (template_hole 6,
               template_app
                (template_app (template_hole 5, template_var 3),
                 template_var 2)),
             template_app
              (template_app (template_hole 5, template_var 1),
               template_var 0))),
         template_app (template_hole 4, t_empty)),
       template_app
        (template_app
          (template_hole 2,
           template_app
            (template_app (template_hole 1, template_var 2),
             template_var 0)),
         template_app (template_hole 0, t_empty)))),
    ("Akra_Bazzi_Method.measure_prod_conv'",
     "(((?a, ?b), ?c, ?d) : Wellfounded.measure fst) =
      ((?a, ?c) : Wellfounded.measure (%x. x))",
     template_equation
      (template_app
        (template_app
          (template_hole 7,
           template_app
            (template_app
              (template_hole 6,
               template_app
                (template_app (template_hole 5, template_var 3),
                 template_var 2)),
             template_app
              (template_app (template_hole 5, template_var 1),
               template_var 0))),
         template_app (template_hole 4, t_empty)),
       template_app
        (template_app
          (template_hole 2,
           template_app
            (template_app (template_hole 1, template_var 3),
             template_var 1)),
         template_app (template_hole 0, t_empty)))),
    ("Akra_Bazzi_Method.measure_prod_conv",
     "(((?a, ?b), ?c, ?d) : Wellfounded.measure (%x. ?t (fst x))) =
      ((?a, ?c) : Wellfounded.measure ?t)",
     template_equation
      (template_app
        (template_app
          (template_hole 7,
           template_app
            (template_app
              (template_hole 6,
               template_app
                (template_app (template_hole 5, template_var 4),
                 template_var 3)),
             template_app
              (template_app (template_hole 5, template_var 2),
               template_var 1))),
         template_app (template_hole 4, t_empty)),
       template_app
        (template_app
          (template_hole 2,
           template_app
            (template_app (template_hole 1, template_var 4),
             template_var 2)),
         template_app (template_hole 0, template_var 0)))),
    ("Akra_Bazzi_Method.measure_prod_conv",
     "(((?e, ?f), ?g, ?h) : Wellfounded.measure (%x. ?t (snd x))) =
      ((?f, ?h) : Wellfounded.measure ?t)",
     template_equation
      (template_app
        (template_app
          (template_hole 7,
           template_app
            (template_app
              (template_hole 6,
               template_app
                (template_app (template_hole 5, template_var 4),
                 template_var 3)),
             template_app
              (template_app (template_hole 5, template_var 2),
               template_var 1))),
         template_app (template_hole 4, t_empty)),
       template_app
        (template_app
          (template_hole 2,
           template_app
            (template_app (template_hole 1, template_var 3),
             template_var 1)),
         template_app (template_hole 0, template_var 0)))),
    ("Akra_Bazzi_Method.ball_set_intros",
     "[| ?P ?x; ALL x:set ?xs. ?P x |] ==> ALL x:set (?x # ?xs). ?P x",
     template_implication
      ([template_predicate (template_app (template_var 2, template_var 1)),
        template_predicate
         (
            template_app
             (template_app
               (template_hole 2,
                template_app (template_hole 1, template_var 0)),
              t_empty)
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 2,
               template_app
                (template_hole 1,
                 template_app
                  (template_app (template_hole 0, template_var 1),
                   template_var 0))),
             t_empty)
           ))),
    ("Akra_Bazzi_Method.akra_bazzi_term_measure",
     "[| ?x\<^sub>1 <= ?x; akra_bazzi_term 0 ?x\<^sub>1 ?b ?t |]
      ==> (?t ?x, ?x) : Wellfounded.measure (%n. n)",
     template_implication
      ([template_inequation (less_equals, template_var 3, template_var 2),
        template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_app (template_hole 4, template_hole 3),
                  template_var 3),
                template_var 1),
              template_var 0)
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 2,
               template_app
                (template_app
                  (template_hole 1,
                   template_app (template_var 0, template_var 2)),
                 template_var 2)),
             template_app (template_hole 0, t_empty))
           ))),
    ("Akra_Bazzi_Method.akra_bazzi_term_measure",
     "[| ?x\<^sub>1 < ?x; akra_bazzi_term 0 (Suc ?x\<^sub>1) ?b ?t |]
      ==> (?t ?x, ?x) : Wellfounded.measure (%n. n)",
     template_implication
      ([template_inequation (less_than, template_var 3, template_var 2),
        template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_app (template_hole 5, template_hole 4),
                  template_app (template_hole 3, template_var 3)),
                template_var 1),
              template_var 0)
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 2,
               template_app
                (template_app
                  (template_hole 1,
                   template_app (template_var 0, template_var 2)),
                 template_var 2)),
             template_app (template_hole 0, t_empty))
           ))),
    ("Akra_Bazzi_Method.atLeastLessThanE",
     "[| ?x : {?a..<?b}; [| ?a <= ?x; ?x < ?b |] ==> ?P |] ==> ?P",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 3, template_var 3),
              template_app
               (template_app (template_hole 2, template_var 2),
                template_var 1))
            ),
        template_implication
         ([template_inequation
            (less_equals, template_var 2, template_var 3)],
          template_implication
           ([template_inequation
              (less_than, template_var 3, template_var 1)],
            template_predicate (template_var 0)))],
       template_predicate (template_var 0))),
    ("Akra_Bazzi_Method.MASTER_BOUND_postproc",
     "??.Akra_Bazzi_Method.CLAMP
       (??.Akra_Bazzi_Method.MASTER_BOUND' ?a (numeral ?n)) =
      ??.Akra_Bazzi_Method.CLAMP
       (%x. ??.Akra_Bazzi_Method.CLAMP
             (??.Akra_Bazzi_Method.MASTER_BOUND'' ?a) x *
            ??.Akra_Bazzi_Method.CLAMP (%x. ln (real x) ^ numeral ?n) x)",
     template_equation
      (template_app
        (template_hole 8,
         template_app
          (template_app (template_hole 7, template_var 1),
           template_app (template_hole 6, template_var 0))),
       template_app (template_hole 8, t_empty))),
    ("Akra_Bazzi_Method.master_theorem_preprocess",
     "\<Theta>(%n. ln (real n) powr ?p') =
      \<Theta>(%n. real n powr 0 * ln (real n) powr ?p')",
     template_equation
      (template_app
        (template_app (template_hole 6, template_hole 5), t_empty),
       template_app
        (template_app (template_hole 6, template_hole 5), t_empty))),
    ("Akra_Bazzi_Method.MASTER_BOUND_postproc",
     "??.Akra_Bazzi_Method.CLAMP
       (??.Akra_Bazzi_Method.MASTER_BOUND' ?a (- numeral ?n)) =
      ??.Akra_Bazzi_Method.CLAMP
       (%x. ??.Akra_Bazzi_Method.CLAMP
             (??.Akra_Bazzi_Method.MASTER_BOUND'' ?a) x /
            ??.Akra_Bazzi_Method.CLAMP (%x. ln (real x) ^ numeral ?n) x)",
     template_equation
      (template_app
        (template_hole 9,
         template_app
          (template_app (template_hole 8, template_var 1),
           template_app
            (template_hole 7,
             template_app (template_hole 6, template_var 0)))),
       template_app (template_hole 9, t_empty))),
    ("Akra_Bazzi_Method.akra_bazzi_termsI'",
     "[| akra_bazzi_term ?x\<^sub>0 ?x\<^sub>1 ?b ?t;
         akra_bazzi_terms ?x\<^sub>0 ?x\<^sub>1 ?bs ?ts |]
      ==> akra_bazzi_terms ?x\<^sub>0 ?x\<^sub>1 (?b # ?bs) (?t # ?ts)",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_app (template_hole 3, template_var 5),
                  template_var 4),
                template_var 3),
              template_var 2)
            ),
        template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_app (template_hole 2, template_var 5),
                  template_var 4),
                template_var 1),
              template_var 0)
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_app
                (template_app (template_hole 2, template_var 5),
                 template_var 4),
               template_app
                (template_app (template_hole 1, template_var 3),
                 template_var 1)),
             template_app
              (template_app (template_hole 0, template_var 2),
               template_var 0))
           ))),
    ("Akra_Bazzi_Method.eval_akra_bazzi_sum",
     "(SUM i<Suc 0. (?a # ?as) ! i * (?b # ?bs) ! i powr ?x) =
      ?a * ?b powr ?x",
     template_equation
      (template_app
        (template_app (template_hole 7, t_empty),
         template_app
          (template_hole 2,
           template_app (template_hole 1, template_hole 0))),
       template_app
        (template_app (template_hole 6, template_var 4),
         template_app
          (template_app (template_hole 3, template_var 2),
           template_var 0)))),
    ("Akra_Bazzi_Method.eval_akra_bazzi_sum'",
     "(SUM i<Suc 0. (?a # ?as) ! i * ?f (((?t # ?ts) ! i) ?x)) =
      ?a * ?f (?t ?x)",
     template_equation
      (template_app
        (template_app (template_hole 8, t_empty),
         template_app
          (template_hole 2,
           template_app (template_hole 1, template_hole 0))),
       template_app
        (template_app (template_hole 7, template_var 5),
         template_app
          (template_var 3,
           template_app (template_var 2, template_var 0))))),
    ("Akra_Bazzi_Method.akra_bazzi_termsI",
     "(!!i. i < length ?bs ==>
            akra_bazzi_term ?x\<^sub>0 ?x\<^sub>1 (?bs ! i) (?ts ! i)) ==>
      akra_bazzi_terms ?x\<^sub>0 ?x\<^sub>1 ?bs ?ts",
     template_implication
      ([template_predicate (template_app (template_hole 7, t_empty))],
       template_predicate
        (
           template_app
            (template_app
              (template_app
                (template_app (template_hole 0, template_var 2),
                 template_var 1),
               template_var 3),
             template_var 0)
           ))),
    ("Akra_Bazzi_Method.master_theorem_preprocess",
     "\<Theta>(%n. real n * ln (real n) powr ?p') =
      \<Theta>(%n. real n powr 1 * ln (real n) powr ?p')",
     template_equation
      (template_app
        (template_app (template_hole 6, template_hole 5), t_empty),
       template_app
        (template_app (template_hole 6, template_hole 5), t_empty))),
    ("Akra_Bazzi_Method.master_theorem_preprocess",
     "\<Theta>(%n. real n powr ?p * ln (real n)) =
      \<Theta>(%n. real n powr ?p * ln (real n) powr 1)",
     template_equation
      (template_app
        (template_app (template_hole 6, template_hole 5), t_empty),
       template_app
        (template_app (template_hole 6, template_hole 5), t_empty))),
    ("Akra_Bazzi_Method.propagate_CLAMP",
     "??.Akra_Bazzi_Method.CLAMP'
       (%x. ??.Akra_Bazzi_Method.CLAMP'
             (??.Akra_Bazzi_Method.MASTER_BOUND ?a1.0 ?b1.0 ?c1.0) x *
            ??.Akra_Bazzi_Method.CLAMP'
             (??.Akra_Bazzi_Method.MASTER_BOUND ?a2.0 ?b2.0 ?c2.0) x) =
      ??.Akra_Bazzi_Method.CLAMP'
       (??.Akra_Bazzi_Method.MASTER_BOUND (?a1.0 + ?a2.0) (?b1.0 + ?b2.0)
         (?c1.0 + ?c2.0))",
     template_equation
      (template_app (template_hole 3, t_empty),
       template_app
        (template_hole 3,
         template_app
          (template_app
            (template_app
              (template_hole 1,
               template_app
                (template_app (template_hole 0, template_var 5),
                 template_var 2)),
             template_app
              (template_app (template_hole 0, template_var 4),
               template_var 1)),
           template_app
            (template_app (template_hole 0, template_var 3),
             template_var 0))))),
    ("Akra_Bazzi_Method.propagate_CLAMP",
     "??.Akra_Bazzi_Method.CLAMP'
       (%x. ??.Akra_Bazzi_Method.CLAMP'
             (??.Akra_Bazzi_Method.MASTER_BOUND ?a1.0 ?b1.0 ?c1.0) x /
            ??.Akra_Bazzi_Method.CLAMP'
             (??.Akra_Bazzi_Method.MASTER_BOUND ?a2.0 ?b2.0 ?c2.0) x) =
      ??.Akra_Bazzi_Method.CLAMP'
       (??.Akra_Bazzi_Method.MASTER_BOUND (?a1.0 - ?a2.0) (?b1.0 - ?b2.0)
         (?c1.0 - ?c2.0))",
     template_equation
      (template_app (template_hole 3, t_empty),
       template_app
        (template_hole 3,
         template_app
          (template_app
            (template_app
              (template_hole 1,
               template_app
                (template_app (template_hole 0, template_var 5),
                 template_var 2)),
             template_app
              (template_app (template_hole 0, template_var 4),
               template_var 1)),
           template_app
            (template_app (template_hole 0, template_var 3),
             template_var 0))))),
    ("Akra_Bazzi_Method.landau_symbol_ge_3_cong",
     "[| landau_symbol ?L ?L' ?Lr; !!x. (3::?'a) <= x ==> ?f x = ?g x |]
      ==> ?L at_top ?f = ?L at_top ?g",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app (template_hole 8, template_var 4),
                template_var 3),
              template_var 2)
            ),
        template_predicate (template_app (template_hole 7, t_empty))],
       template_equation
        (template_app
          (template_app (template_var 4, template_hole 0), template_var 1),
         template_app
          (template_app (template_var 4, template_hole 0),
           template_var 0)))),
    ("Akra_Bazzi_Method.eval_akra_bazzi_sum",
     "(SUM i<Suc ?k. (?a # ?as) ! i * (?b # ?bs) ! i powr ?x) =
      ?a * ?b powr ?x + (SUM i<?k. ?as ! i * ?bs ! i powr ?x)",
     template_equation
      (template_app
        (template_app (template_hole 7, t_empty),
         template_app
          (template_hole 2,
           template_app (template_hole 1, template_var 0))),
       template_app
        (template_app
          (template_hole 0,
           template_app
            (template_app (template_hole 6, template_var 5),
             template_app
              (template_app (template_hole 3, template_var 3),
               template_var 1))),
         template_app
          (template_app (template_hole 7, t_empty),
           template_app (template_hole 2, template_var 0))))),
    ("Akra_Bazzi_Method.eval_akra_bazzi_sum'",
     "(SUM i<Suc ?k. (?a # ?as) ! i * ?f (((?t # ?ts) ! i) ?x)) =
      ?a * ?f (?t ?x) + (SUM i<?k. ?as ! i * ?f ((?ts ! i) ?x))",
     template_equation
      (template_app
        (template_app (template_hole 8, t_empty),
         template_app
          (template_hole 2,
           template_app (template_hole 1, template_var 0))),
       template_app
        (template_app
          (template_hole 0,
           template_app
            (template_app (template_hole 7, template_var 6),
             template_app
              (template_var 4,
               template_app (template_var 3, template_var 1)))),
         template_app
          (template_app (template_hole 8, t_empty),
           template_app (template_hole 2, template_var 0))))),
    ("Akra_Bazzi_Method.akra_bazzi_params_nonzeroI",
     "[| length ?as = length ?bs; ALL a:set ?as. 0 <= a;
         ALL b:set ?bs. b : {0<..<1}; EX a:set ?as. 0 < a |]
      ==> akra_bazzi_params_nonzero (length ?as) ?as ?bs",
     template_implication
      ([template_equation
         (template_app (template_hole 10, template_var 1),
          template_app (template_hole 10, template_var 0)),
        template_predicate
         (
            template_app
             (template_app
               (template_hole 9,
                template_app (template_hole 8, template_var 1)),
              t_empty)
            ),
        template_predicate
         (
            template_app
             (template_app
               (template_hole 9,
                template_app (template_hole 8, template_var 0)),
              t_empty)
            ),
        template_predicate
         (
            template_app
             (template_app
               (template_hole 2,
                template_app (template_hole 8, template_var 1)),
              t_empty)
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_app
                (template_hole 0,
                 template_app (template_hole 10, template_var 1)),
               template_var 1),
             template_var 0)
           ))),
    ("Akra_Bazzi_Method.akra_bazzi_p_rel_intros",
     "[| 1 < (SUM i<length ?as. ?as ! i * ?bs ! i powr ?p');
         length ?as = length ?bs; ALL a:set ?as. 0 <= a;
         ALL b:set ?bs. b : {0<..<1}; EX a:set ?as. 0 < a |]
      ==> ?p' < akra_bazzi_exponent ?as ?bs",
     template_implication
      ([template_inequation
         (less_than, template_hole 15,
          template_app
           (template_app (template_hole 14, t_empty),
            template_app
             (template_hole 10,
              template_app (template_hole 9, template_var 2)))),
        template_equation
         (template_app (template_hole 9, template_var 2),
          template_app (template_hole 9, template_var 1)),
        template_predicate
         (
            template_app
             (template_app
               (template_hole 7,
                template_app (template_hole 6, template_var 2)),
              t_empty)
            ),
        template_predicate
         (
            template_app
             (template_app
               (template_hole 7,
                template_app (template_hole 6, template_var 1)),
              t_empty)
            ),
        template_predicate
         (
            template_app
             (template_app
               (template_hole 1,
                template_app (template_hole 6, template_var 2)),
              t_empty)
            )],
       template_inequation
        (less_than, template_var 0,
         template_app
          (template_app (template_hole 0, template_var 2),
           template_var 1)))),
    ("Akra_Bazzi_Method.akra_bazzi_p_rel_intros",
     "[| (SUM i<length ?as. ?as ! i * ?bs ! i powr ?p') < 1;
         length ?as = length ?bs; ALL a:set ?as. 0 <= a;
         ALL b:set ?bs. b : {0<..<1}; EX a:set ?as. 0 < a |]
      ==> akra_bazzi_exponent ?as ?bs < ?p'",
     template_implication
      ([template_inequation
         (less_than,
          template_app
           (template_app (template_hole 15, t_empty),
            template_app
             (template_hole 11,
              template_app (template_hole 10, template_var 2))),
          template_hole 9),
        template_equation
         (template_app (template_hole 10, template_var 2),
          template_app (template_hole 10, template_var 1)),
        template_predicate
         (
            template_app
             (template_app
               (template_hole 7,
                template_app (template_hole 6, template_var 2)),
              t_empty)
            ),
        template_predicate
         (
            template_app
             (template_app
               (template_hole 7,
                template_app (template_hole 6, template_var 1)),
              t_empty)
            ),
        template_predicate
         (
            template_app
             (template_app
               (template_hole 1,
                template_app (template_hole 6, template_var 2)),
              t_empty)
            )],
       template_inequation
        (less_than,
         template_app
          (template_app (template_hole 0, template_var 2), template_var 1),
         template_var 0))),
    ("Akra_Bazzi_Method.akra_bazzi_p_rel_intros",
     "[| 1 <= (SUM i<length ?as. ?as ! i * ?bs ! i powr ?p');
         length ?as = length ?bs; ALL a:set ?as. 0 <= a;
         ALL b:set ?bs. b : {0<..<1}; EX a:set ?as. 0 < a |]
      ==> ?p' <= akra_bazzi_exponent ?as ?bs",
     template_implication
      ([template_inequation
         (less_equals, template_hole 15,
          template_app
           (template_app (template_hole 14, t_empty),
            template_app
             (template_hole 10,
              template_app (template_hole 9, template_var 2)))),
        template_equation
         (template_app (template_hole 9, template_var 2),
          template_app (template_hole 9, template_var 1)),
        template_predicate
         (
            template_app
             (template_app
               (template_hole 7,
                template_app (template_hole 6, template_var 2)),
              t_empty)
            ),
        template_predicate
         (
            template_app
             (template_app
               (template_hole 7,
                template_app (template_hole 6, template_var 1)),
              t_empty)
            ),
        template_predicate
         (
            template_app
             (template_app
               (template_hole 2,
                template_app (template_hole 6, template_var 2)),
              t_empty)
            )],
       template_inequation
        (less_equals, template_var 0,
         template_app
          (template_app (template_hole 0, template_var 2),
           template_var 1)))),
    ("Akra_Bazzi_Method.akra_bazzi_p_rel_intros",
     "[| (SUM i<length ?as. ?as ! i * ?bs ! i powr ?p') <= 1;
         length ?as = length ?bs; ALL a:set ?as. 0 <= a;
         ALL b:set ?bs. b : {0<..<1}; EX a:set ?as. 0 < a |]
      ==> akra_bazzi_exponent ?as ?bs <= ?p'",
     template_implication
      ([template_inequation
         (less_equals,
          template_app
           (template_app (template_hole 15, t_empty),
            template_app
             (template_hole 11,
              template_app (template_hole 10, template_var 2))),
          template_hole 9),
        template_equation
         (template_app (template_hole 10, template_var 2),
          template_app (template_hole 10, template_var 1)),
        template_predicate
         (
            template_app
             (template_app
               (template_hole 7,
                template_app (template_hole 6, template_var 2)),
              t_empty)
            ),
        template_predicate
         (
            template_app
             (template_app
               (template_hole 7,
                template_app (template_hole 6, template_var 1)),
              t_empty)
            ),
        template_predicate
         (
            template_app
             (template_app
               (template_hole 2,
                template_app (template_hole 6, template_var 2)),
              t_empty)
            )],
       template_inequation
        (less_equals,
         template_app
          (template_app (template_hole 0, template_var 2), template_var 1),
         template_var 0))),
    ("Akra_Bazzi_Method.akra_bazzi_p_rel_intros",
     "[| (SUM i<length ?as. ?as ! i * ?bs ! i powr ?x) < 1 &
         1 < (SUM i<length ?as. ?as ! i * ?bs ! i powr ?y);
         length ?as = length ?bs; ALL a:set ?as. 0 <= a;
         ALL b:set ?bs. b : {0<..<1}; EX a:set ?as. 0 < a |]
      ==> akra_bazzi_exponent ?as ?bs : {?y<..<?x}",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_hole 17,
                template_app
                 (template_app
                   (template_hole 16,
                    template_app
                     (template_app (template_hole 15, t_empty),
                      template_app
                       (template_hole 11,
                        template_app (template_hole 10, template_var 3)))),
                  template_hole 9)),
              template_app
               (template_app (template_hole 16, template_hole 9),
                template_app
                 (template_app (template_hole 15, t_empty),
                  template_app
                   (template_hole 11,
                    template_app (template_hole 10, template_var 3)))))
            ),
        template_equation
         (template_app (template_hole 10, template_var 3),
          template_app (template_hole 10, template_var 2)),
        template_predicate
         (
            template_app
             (template_app
               (template_hole 7,
                template_app (template_hole 6, template_var 3)),
              t_empty)
            ),
        template_predicate
         (
            template_app
             (template_app
               (template_hole 7,
                template_app (template_hole 6, template_var 2)),
              t_empty)
            ),
        template_predicate
         (
            template_app
             (template_app
               (template_hole 1,
                template_app (template_hole 6, template_var 3)),
              t_empty)
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 3,
               template_app
                (template_app (template_hole 0, template_var 3),
                 template_var 2)),
             template_app
              (template_app (template_hole 2, template_var 0),
               template_var 1))
           ))),
    ("Akra_Bazzi_Method.akra_bazzi_p_rel_intros",
     "[| (SUM i<length ?as. ?as ! i * ?bs ! i powr ?x) <= 1 &
         1 <= (SUM i<length ?as. ?as ! i * ?bs ! i powr ?y);
         length ?as = length ?bs; ALL a:set ?as. 0 <= a;
         ALL b:set ?bs. b : {0<..<1}; EX a:set ?as. 0 < a |]
      ==> akra_bazzi_exponent ?as ?bs : {?y..?x}",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_hole 18,
                template_app
                 (template_app
                   (template_hole 17,
                    template_app
                     (template_app (template_hole 16, t_empty),
                      template_app
                       (template_hole 12,
                        template_app (template_hole 11, template_var 3)))),
                  template_hole 10)),
              template_app
               (template_app (template_hole 17, template_hole 10),
                template_app
                 (template_app (template_hole 16, t_empty),
                  template_app
                   (template_hole 12,
                    template_app (template_hole 11, template_var 3)))))
            ),
        template_equation
         (template_app (template_hole 11, template_var 3),
          template_app (template_hole 11, template_var 2)),
        template_predicate
         (
            template_app
             (template_app
               (template_hole 8,
                template_app (template_hole 7, template_var 3)),
              t_empty)
            ),
        template_predicate
         (
            template_app
             (template_app
               (template_hole 8,
                template_app (template_hole 7, template_var 2)),
              t_empty)
            ),
        template_predicate
         (
            template_app
             (template_app
               (template_hole 3,
                template_app (template_hole 7, template_var 3)),
              t_empty)
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 5,
               template_app
                (template_app (template_hole 1, template_var 3),
                 template_var 2)),
             template_app
              (template_app (template_hole 0, template_var 0),
               template_var 1))
           ))),
    ("Akra_Bazzi_Method.master_theorem_functionI",
     "[| ALL x:{?x\<^sub>0..<?x\<^sub>1}. 0 <= ?f x;
         ALL x>=?x\<^sub>1.
            ?f x = ?g x + (SUM i<?k. ?as ! i * ?f ((?ts ! i) x));
         ALL x>=?x\<^sub>1. 0 <= ?g x; ALL a:set ?as. 0 <= a;
         list_ex ((<) 0) ?as; ALL b:set ?bs. b : {0<..<1}; ?k ~= 0;
         length ?as = ?k; length ?bs = ?k; length ?ts = ?k;
         akra_bazzi_terms ?x\<^sub>0 ?x\<^sub>1 ?bs ?ts |]
      ==> master_theorem_function ?x\<^sub>0 ?x\<^sub>1 ?k ?as ?bs ?ts ?f
           ?g",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_hole 27,
                template_app
                 (template_app (template_hole 26, template_var 7),
                  template_var 6)),
              t_empty)
            ),
        template_predicate (template_app (template_hole 23, t_empty)),
        template_predicate (template_app (template_hole 23, t_empty)),
        template_predicate
         (
            template_app
             (template_app
               (template_hole 13,
                template_app (template_hole 12, template_var 3)),
              t_empty)
            ),
        template_predicate
         (
            template_app
             (template_app (template_hole 11, t_empty), template_var 3)
            ),
        template_predicate
         (
            template_app
             (template_app
               (template_hole 13,
                template_app (template_hole 12, template_var 0)),
              t_empty)
            ),
        template_negation
         (template_equation (template_var 1, template_hole 4)),
        template_equation
         (template_app (template_hole 3, template_var 3), template_var 1),
        template_equation
         (template_app (template_hole 3, template_var 0), template_var 1),
        template_equation
         (template_app (template_hole 2, template_var 2), template_var 1),
        template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_app (template_hole 1, template_var 7),
                  template_var 6),
                template_var 0),
              template_var 2)
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_app
                (template_app
                  (template_app
                    (template_app
                      (template_app
                        (template_app (template_hole 0, template_var 7),
                         template_var 6),
                       template_var 1),
                     template_var 3),
                   template_var 0),
                 template_var 2),
               template_var 5),
             template_var 4)
           )))]
