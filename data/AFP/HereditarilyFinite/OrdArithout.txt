Loading theory "HOL-Library.Nat_Bijection" (required by "Draft.OrdArithMoreTemplates" via "Draft.ExtrEqs" via "HOL-Library.Stream")
Loading theory "HOL-Library.Set_Algebras" (required by "Draft.OrdArithMoreTemplates" via "Draft.ExtrEqs" via "HOL-Library.BigO")
Loading theory "HOL-Library.Tree" (required by "Draft.OrdArithMoreTemplates" via "Draft.ExtrEqs" via "Draft.Templates")
Loading theory "HOL-Library.Function_Algebras" (required by "Draft.OrdArithMoreTemplates" via "Draft.ExtrEqs" via "HOL-Library.BigO")
instantiation
  fun :: (type, plus) plus
  plus_fun == plus :: ('a => 'b) => ('a => 'b) => 'a => 'b
instantiation
  set :: (plus) plus
  plus_set == plus :: 'a set => 'a set => 'a set
instantiation
  fun :: (type, zero) zero
  zero_fun == zero_class.zero :: 'a => 'b
instantiation
  set :: (times) times
  times_set == times :: 'a set => 'a set => 'a set
instantiation
  fun :: (type, times) times
  times_fun == times :: ('a => 'b) => ('a => 'b) => 'a => 'b
instantiation
  set :: (zero) zero
  zero_set == zero_class.zero :: 'a set
instantiation
  fun :: (type, one) one
  one_fun == one_class.one :: 'a => 'b
instantiation
  set :: (one) one
  one_set == one_class.one :: 'a set
Found termination order: "(%p. size (snd p)) <*mlex*> {}"
### theory "HOL-Library.Function_Algebras"
### 0.167s elapsed time, 0.688s cpu time, 0.069s GC time
Found termination order: "size_list size <*mlex*> {}"
### theory "HOL-Library.Set_Algebras"
### 0.258s elapsed time, 0.963s cpu time, 0.069s GC time
Loading theory "HOL-Library.BigO" (required by "Draft.OrdArithMoreTemplates" via "Draft.ExtrEqs")
### theory "HOL-Library.Nat_Bijection"
### 0.348s elapsed time, 1.229s cpu time, 0.069s GC time
Loading theory "Draft.HF" (required by "Draft.OrdArithMoreTemplates" via "Draft.OrdArith" via "Draft.Rank" via "Draft.Ordinal")
Loading theory "HOL-Library.Stream" (required by "Draft.OrdArithMoreTemplates" via "Draft.ExtrEqs")
instantiation
  hf :: zero
  zero_hf == zero_class.zero :: hf
instantiation
  hf :: sup
  sup_hf == sup :: hf => hf => hf
instantiation
  hf :: inf
  inf_hf == inf :: hf => hf => hf
instantiation
  hf :: minus
  minus_hf == minus :: hf => hf => hf
instantiation
  hf :: order
  less_eq_hf == less_eq :: hf => hf => bool
  less_hf == less :: hf => hf => bool
instantiation
  hf :: distrib_lattice
instantiation
  hf :: bounded_lattice_bot
  bot_hf == bot :: hf
consts
  left :: "'a tree => 'a tree"
consts
  right :: "'a tree => 'a tree"
Found termination order: "size <*mlex*> {}"
Found termination order: "size <*mlex*> {}"
consts
  shift :: "'a list => 'a stream => 'a stream"
Proofs for coinductive predicate(s) "streamsp"
  Proving monotonicity ...
Found termination order: "size <*mlex*> {}"
instantiation
  hf :: times
  times_hf == times :: hf => hf => hf
instantiation
  hf :: mult_zero
instantiation
  hf :: zero_neq_one
  one_hf == one_class.one :: hf
instantiation
  hf :: plus
  plus_hf == plus :: hf => hf => hf
class height = type +
  fixes height :: "'a => nat"
instantiation
  tree :: (type) height
  height_tree == height :: 'a tree => nat
### theory "HOL-Library.BigO"
### 0.907s elapsed time, 3.492s cpu time, 0.456s GC time
consts
  snth :: "'a stream => nat => 'a"
### theory "Draft.HF"
### 0.820s elapsed time, 3.199s cpu time, 0.313s GC time
Loading theory "Draft.Ordinal" (required by "Draft.OrdArithMoreTemplates" via "Draft.OrdArith" via "Draft.Rank")
consts
  stake :: "nat => 'a stream => 'a list"
Found termination order: "size <*mlex*> {}"
consts
  sdrop :: "nat => 'a stream => 'a stream"
consts
  sfilter :: "('a => bool) => 'a stream => 'a stream"
Found termination order: "size <*mlex*> {}"
consts
  cycle :: "'a list => 'a stream"
consts
  siterate :: "('a => 'a) => 'a => 'a stream"
Found termination order: "size <*mlex*> {}"
Found termination order: "size <*mlex*> {}"
consts
  flat :: "'a list stream => 'a stream"
Found termination order: "size <*mlex*> {}"
consts
  sinterleave :: "'a stream => 'a stream => 'a stream"
consts
  szip :: "'a stream => 'b stream => ('a * 'b) stream"
Found termination order: "size <*mlex*> {}"
### theory "Draft.Ordinal"
### 0.535s elapsed time, 1.635s cpu time, 0.645s GC time
Loading theory "Draft.Rank" (required by "Draft.OrdArithMoreTemplates" via "Draft.OrdArith")
consts
  smap2 :: "('a => 'b => 'c) => 'a stream => 'b stream => 'c stream"
### theory "HOL-Library.Stream"
### 1.446s elapsed time, 5.134s cpu time, 1.061s GC time
Found termination order: "size <*mlex*> {}"
Found termination order: "size <*mlex*> {}"
### theory "Draft.Rank"
### 0.160s elapsed time, 0.415s cpu time, 0.103s GC time
Loading theory "Draft.OrdArith" (required by "Draft.OrdArithMoreTemplates")
Found termination order: "(%p. size (fst p)) <*mlex*> {}"
Found termination order: "size <*mlex*> {}"
Found termination order: "(%p. size (snd p)) <*mlex*> {}"
### theory "Draft.OrdArith"
### 0.311s elapsed time, 0.664s cpu time, 0.082s GC time
Found termination order: "size <*mlex*> {}"
### theory "HOL-Library.Tree"
### 2.516s elapsed time, 7.715s cpu time, 1.405s GC time
Loading theory "Draft.Templates" (required by "Draft.OrdArithMoreTemplates" via "Draft.ExtrEqs")
datatype template_term
=
     t_empty
   | template_app of template_term * template_term
   | template_hole of int
   | template_var of int
datatype sign
= equals | greater_equals | greater_than | less_equals | less_than
datatype template
=
     template_bimplication of template * template
   | template_dunno
   | template_equation of template_term * template_term
   | template_implication of template list * template
   | template_inequation of sign * template_term * template_term
   | template_negation of template
   | template_predicate of template_term
constructor t_empty: template_term
constructor template_app: template_term * template_term -> template_term
constructor template_hole: int -> template_term
constructor template_var: int -> template_term
constructor equals: sign
constructor greater_equals: sign
constructor greater_than: sign
constructor less_equals: sign
constructor less_than: sign
constructor template_bimplication: template * template -> template
constructor template_dunno: template
constructor template_equation: template_term * template_term -> template
constructor template_implication: template list * template -> template
constructor template_inequation:
   sign * template_term * template_term -> template
constructor template_negation: template -> template
constructor template_predicate: template_term -> template
val vfs = fn: term -> (indexname * typ) list * (string * typ) list
val indexOf = fn: ''a list -> ''a -> int -> int
val has_eq = fn: term -> bool
val term2template = fn:
   (indexname * typ) list -> (string * typ) list -> term -> template_term
val lemma2predicate = fn: term -> term -> template
val makeTemplatewithContext = fn: term -> term -> template
val lemma2template = fn: term -> template
val thm2template = fn: thm -> template
val tterm2string = fn: template_term -> string
val template2string = fn: template -> string
val t = "height ?t <= size ?t": thm
val th =
   Const ("HOL.Trueprop", "bool => prop") $
     (Const ("Orderings.ord_class.less_eq", "nat => nat => bool") $
       (Const ("Tree.height_class.height", "?'a tree => nat") $
         Var (("t", 0), "?'a tree")) $
       (Const ("Nat.size_class.size", "?'a tree => nat") $
         Var (("t", 0), "?'a tree"))):
   term
### theory "Draft.Templates"
### 0.056s elapsed time, 0.076s cpu time, 0.000s GC time
Loading theory "Draft.ExtrEqs" (required by "Draft.OrdArithMoreTemplates")
val eqpattern =
   Pattern
    (
       Const ("HOL.Trueprop", "bool => prop") $
         (Const ("HOL.eq", "?'a => ?'a => bool") $
           Var (("_dummy_", 1), "?'a") $ Var (("_dummy_", 2), "?'a"))
       ):
   term Find_Theorems.criterion
val badeqpattern = Pattern (Const ("Pure.eq", "?'a => ?'a => prop")):
   term Find_Theorems.criterion
val undefpattern =
   Pattern
    (
       Const ("HOL.Trueprop", "bool => prop") $
         (Const ("HOL.eq", "?'a => ?'a => bool") $
           Var (("_dummy_", 1), "?'a") $ Const ("HOL.undefined", "?'a"))
       ):
   term Find_Theorems.criterion
val thmpattern =
   Pattern
    (Const ("HOL.Trueprop", "bool => prop") $ Var (("_dummy_", 1), "bool")):
   term Find_Theorems.criterion
val badnames =
   ["*nitpick*", "*Nitpick*", "*full_exhaustive*", "*_def*", "Enum.finite*",
    "*Quickcheck*", "ATP*", "*Nunchaku*", "*Code*", "*BNF*", "*SMT*",
    "*.*.*"]:
   string list
val unwanted_names =
   [(false, Name "*nitpick*"), (false, Name "*Nitpick*"),
    (false, Name "*full_exhaustive*"), (false, Name "*_def*"),
    (false, Name "Enum.finite*"), (false, Name "*Quickcheck*"),
    (false, Name "ATP*"), (false, Name "*Nunchaku*"),
    (false, Name "*Code*"), (false, Name "*BNF*"), (false, Name "*SMT*"),
    (false, Name "*.*.*")]:
   (bool * term Find_Theorems.criterion) list
val has_vars = fn: term -> bool
val get_all_eqs = fn: string -> Proof.context -> (string * thm) list
val get_all_thms = fn: string -> Proof.context -> (string * thm) list
val get_noneq_thms = fn: string -> Proof.context -> (string * thm) list
val template_eqs = fn:
   string -> Proof.context -> (string * thm * template) list
val template_thms = fn:
   string -> Proof.context -> (string * thm * template) list
### theory "Draft.ExtrEqs"
### 0.533s elapsed time, 0.587s cpu time, 0.066s GC time
Loading theory "Draft.OrdArithMoreTemplates"
val templateLemmas =
   [("OrdArith.hrelation_shift", "hrelation (OrdArith.shift ?f ?delta)",
     template_predicate
      (
         template_app
          (template_hole 1,
           template_app
            (template_app (template_hole 0, template_var 1),
             template_var 0))
         )),
    ("OrdArith.hrelation_seq_append", "hrelation (seq_append ?k ?f ?g)",
     template_predicate
      (
         template_app
          (template_hole 1,
           template_app
            (template_app
              (template_app (template_hole 0, template_var 2),
               template_var 1),
             template_var 0))
         )),
    ("OrdArith.hadd_0_left", "0 @+ ?x = ?x",
     template_equation
      (template_app
        (template_app (template_hole 1, template_hole 0), template_var 0),
       template_var 0)),
    ("OrdArith.hadd_0_right", "?x @+ 0 = ?x",
     template_equation
      (template_app
        (template_app (template_hole 1, template_var 0), template_hole 0),
       template_var 0)),
    ("OrdArith.pred_succ", "pred (succ ?x) = ?x",
     template_equation
      (template_app
        (template_hole 1, template_app (template_hole 0, template_var 0)),
       template_var 0)),
    ("OrdArith.not_add_mem_right", "?x @+ ?y \<^bold>\<notin> ?x",
     template_negation
      (
         template_predicate
          (
             template_app
              (template_app
                (template_hole 1,
                 template_app
                  (template_app (template_hole 0, template_var 1),
                   template_var 0)),
               template_var 1)
             )
         )),
    ("OrdArith.not_add_less_right", "~ ?x @+ ?y < ?x",
     template_negation
      (
         template_inequation
          (less_than,
           template_app
            (template_app (template_hole 0, template_var 1),
             template_var 0),
           template_var 1)
         )),
    ("OrdArith.hfunction_shift_iff",
     "hfunction (OrdArith.shift ?f ?delta) = hfunction ?f",
     template_equation
      (template_app
        (template_hole 1,
         template_app
          (template_app (template_hole 0, template_var 1), template_var 0)),
       template_app (template_hole 1, template_var 1))),
    ("OrdArith.Ord_pred", "Ord ?x ==> Ord (pred ?x)",
     template_implication
      ([template_predicate
         (template_app (template_hole 1, template_var 0))],
       template_predicate
        (
           template_app
            (template_hole 1,
             template_app (template_hole 0, template_var 0))
           ))),
    ("OrdArith.hdomain_shift_disjoint",
     "?delta \<sqinter> hdomain (OrdArith.shift ?f ?delta) = 0",
     template_equation
      (template_app
        (template_app (template_hole 3, template_var 1),
         template_app
          (template_hole 2,
           template_app
            (template_app (template_hole 1, template_var 0),
             template_var 1))),
       template_hole 0)),
    ("OrdArith.RepFun_hadd_disjoint",
     "?x \<sqinter> RepFun ?y ((@+) ?x) = 0",
     template_equation
      (template_app
        (template_app (template_hole 3, template_var 1),
         template_app
          (template_app (template_hole 2, template_var 0),
           template_app (template_hole 1, template_var 1))),
       template_hole 0)),
    ("OrdArith.LstSeq_1", "LstSeq {|<0, ?y>|} 0 ?y",
     template_predicate
      (
         template_app
          (template_app
            (template_app
              (template_hole 3,
               template_app
                (template_app
                  (template_hole 2,
                   template_app
                    (template_app (template_hole 1, template_hole 0),
                     template_var 0)),
                 template_hole 0)),
             template_hole 0),
           template_var 0)
         )),
    ("OrdArith.OrdDom_hrestrict", "OrdDom ?s ==> OrdDom (hrestrict ?s ?A)",
     template_implication
      ([template_predicate
         (template_app (template_hole 1, template_var 1))],
       template_predicate
        (
           template_app
            (template_hole 1,
             template_app
              (template_app (template_hole 0, template_var 1),
               template_var 0))
           ))),
    ("OrdArith.LstSeq_imp_Ord", "LstSeq ?s ?k ?y ==> Ord ?k",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app (template_hole 1, template_var 2),
                template_var 1),
              template_var 0)
            )],
       template_predicate
        (template_app (template_hole 0, template_var 1)))),
    ("OrdArith.hadd_succ_right", "?x @+ succ ?y = succ (?x @+ ?y)",
     template_equation
      (template_app
        (template_app (template_hole 1, template_var 1),
         template_app (template_hole 0, template_var 0)),
       template_app
        (template_hole 0,
         template_app
          (template_app (template_hole 1, template_var 1),
           template_var 0)))),
    ("OrdArith.hmem_self_hadd", "(?k1.0 <: ?k1.0 @+ ?k2.0) = (0 <: ?k2.0)",
     template_equation
      (template_app
        (template_app (template_hole 2, template_var 1),
         template_app
          (template_app (template_hole 1, template_var 1), template_var 0)),
       template_app
        (template_app (template_hole 2, template_hole 0), template_var 0))),
    ("OrdArith.Ord_pred_HUnion", "Ord ?k ==> pred ?k = \<Squnion>?k",
     template_implication
      ([template_predicate
         (template_app (template_hole 3, template_var 0))],
       template_equation
        (template_app (template_hole 1, template_var 0),
         template_app (template_hole 0, template_var 0)))),
    ("OrdArith.LstSeq_imp_Seq_same", "LstSeq ?s ?k ?y ==> Seq ?s ?k",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app (template_hole 1, template_var 2),
                template_var 1),
              template_var 0)
            )],
       template_predicate
        (
           template_app
            (template_app (template_hole 0, template_var 2), template_var 1)
           ))),
    ("OrdArith.ord_of_add", "ord_of (?i + ?j) = ord_of ?i @+ ord_of ?j",
     template_equation
      (template_app
        (template_hole 2,
         template_app
          (template_app (template_hole 1, template_var 1), template_var 0)),
       template_app
        (template_app
          (template_hole 0, template_app (template_hole 2, template_var 1)),
         template_app (template_hole 2, template_var 0)))),
    ("OrdArith.OrdDom_hunion",
     "OrdDom (?s1.0 \<squnion> ?s2.0) = (OrdDom ?s1.0 & OrdDom ?s2.0)",
     template_equation
      (template_app
        (template_hole 2,
         template_app
          (template_app (template_hole 1, template_var 1), template_var 0)),
       template_app
        (template_app
          (template_hole 0, template_app (template_hole 2, template_var 1)),
         template_app (template_hole 2, template_var 0)))),
    ("OrdArith.hmem_imp_less", "?x <: ?y ==> Rep_hf ?x < Rep_hf ?y",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 2, template_var 1),
              template_var 0)
            )],
       template_inequation
        (less_than, template_app (template_hole 0, template_var 1),
         template_app (template_hole 0, template_var 0)))),
    ("OrdArith.hsubset_imp_le", "?x <= ?y ==> Rep_hf ?x <= Rep_hf ?y",
     template_implication
      ([template_inequation (less_equals, template_var 1, template_var 0)],
       template_inequation
        (less_equals, template_app (template_hole 0, template_var 1),
         template_app (template_hole 0, template_var 0)))),
    ("OrdArith.least_hmem", "?a ~= 0 ==> least ?a <: ?a",
     template_implication
      ([template_negation
         (template_equation (template_var 0, template_hole 2))],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 1,
               template_app (template_hole 0, template_var 0)),
             template_var 0)
           ))),
    ("OrdArith.LstSeq_imp_Seq_succ", "LstSeq ?s ?k ?y ==> Seq ?s (succ ?k)",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app (template_hole 2, template_var 2),
                template_var 1),
              template_var 0)
            )],
       template_predicate
        (
           template_app
            (template_app (template_hole 1, template_var 2),
             template_app (template_hole 0, template_var 1))
           ))),
    ("OrdArith.hadd_assoc", "?x @+ ?y @+ ?z = ?x @+ (?y @+ ?z)",
     template_equation
      (template_app
        (template_app
          (template_hole 0,
           template_app
            (template_app (template_hole 0, template_var 2),
             template_var 1)),
         template_var 0),
       template_app
        (template_app (template_hole 0, template_var 2),
         template_app
          (template_app (template_hole 0, template_var 1),
           template_var 0)))),
    ("OrdArith.app_shift",
     "app (OrdArith.shift ?f ?k) (?k @+ ?j) = app ?f ?j",
     template_equation
      (template_app
        (template_app
          (template_hole 2,
           template_app
            (template_app (template_hole 1, template_var 2),
             template_var 1)),
         template_app
          (template_app (template_hole 0, template_var 1), template_var 0)),
       template_app
        (template_app (template_hole 2, template_var 2), template_var 0))),
    ("OrdArith.hadd_hmem_cancel", "(?x @+ ?y <: ?x @+ ?z) = (?y <: ?z)",
     template_equation
      (template_app
        (template_app
          (template_hole 1,
           template_app
            (template_app (template_hole 0, template_var 2),
             template_var 1)),
         template_app
          (template_app (template_hole 0, template_var 2), template_var 0)),
       template_app
        (template_app (template_hole 1, template_var 1), template_var 0))),
    ("OrdArith.hadd_cancel_right", "(?x @+ ?y = ?x @+ ?z) = (?y = ?z)",
     template_bimplication
      (template_equation
        (template_app
          (template_app (template_hole 0, template_var 2), template_var 1),
         template_app
          (template_app (template_hole 0, template_var 2), template_var 0)),
       template_equation (template_var 1, template_var 0))),
    ("OrdArith.LstSeq_app", "LstSeq ?s ?k ?y ==> app ?s ?k = ?y",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app (template_hole 2, template_var 2),
                template_var 1),
              template_var 0)
            )],
       template_equation
        (template_app
          (template_app (template_hole 0, template_var 2), template_var 1),
         template_var 0))),
    ("OrdArith.hadd", "?x @+ ?y = ?x \<squnion> RepFun ?y ((@+) ?x)",
     template_equation
      (template_app
        (template_app (template_hole 2, template_var 1), template_var 0),
       template_app
        (template_app (template_hole 1, template_var 1),
         template_app
          (template_app (template_hole 0, template_var 0), t_empty)))),
    ("OrdArith.hdomain_shift_add",
     "hdomain (OrdArith.shift ?f ?delta) =
      RepFun (hdomain ?f) ((@+) ?delta)",
     template_equation
      (template_app
        (template_hole 3,
         template_app
          (template_app (template_hole 2, template_var 1), template_var 0)),
       template_app
        (template_app
          (template_hole 1, template_app (template_hole 3, template_var 1)),
         t_empty))),
    ("OrdArith.BuildSeq_imp_LstSeq",
     "BuildSeq ?B ?C ?s ?k ?y ==> LstSeq ?s ?k ?y",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_app
                   (template_app (template_hole 1, template_var 4),
                    template_var 3),
                  template_var 2),
                template_var 1),
              template_var 0)
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_app (template_hole 0, template_var 2),
               template_var 1),
             template_var 0)
           ))),
    ("OrdArith.BuildSeq_imp_Seq",
     "BuildSeq ?B ?C ?s ?k ?y ==> Seq ?s (succ ?k)",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_app
                   (template_app (template_hole 2, template_var 4),
                    template_var 3),
                  template_var 2),
                template_var 1),
              template_var 0)
            )],
       template_predicate
        (
           template_app
            (template_app (template_hole 1, template_var 2),
             template_app (template_hole 0, template_var 1))
           ))),
    ("OrdArith.OrdDom_shift",
     "[| OrdDom ?s; Ord ?k |] ==> OrdDom (OrdArith.shift ?s ?k)",
     template_implication
      ([template_predicate (template_app (template_hole 2, template_var 1)),
        template_predicate
         (template_app (template_hole 1, template_var 0))],
       template_predicate
        (
           template_app
            (template_hole 2,
             template_app
              (template_app (template_hole 0, template_var 1),
               template_var 0))
           ))),
    ("OrdArith.Ord_hadd", "[| Ord ?x; Ord ?y |] ==> Ord (?x @+ ?y)",
     template_implication
      ([template_predicate (template_app (template_hole 1, template_var 1)),
        template_predicate
         (template_app (template_hole 1, template_var 0))],
       template_predicate
        (
           template_app
            (template_hole 1,
             template_app
              (template_app (template_hole 0, template_var 1),
               template_var 0))
           ))),
    ("OrdArith.hadd_hinsert_right",
     "?x @+ (?z \<triangleleft> ?y) = ?x @+ ?z \<triangleleft> ?x @+ ?y",
     template_equation
      (template_app
        (template_app (template_hole 1, template_var 2),
         template_app
          (template_app (template_hole 0, template_var 1), template_var 0)),
       template_app
        (template_app
          (template_hole 0,
           template_app
            (template_app (template_hole 1, template_var 2),
             template_var 1)),
         template_app
          (template_app (template_hole 1, template_var 2),
           template_var 0)))),
    ("OrdArith.hadd_succ_left",
     "Ord ?y ==> succ ?x @+ ?y = succ (?x @+ ?y)",
     template_implication
      ([template_predicate
         (template_app (template_hole 3, template_var 1))],
       template_equation
        (template_app
          (template_app
            (template_hole 1,
             template_app (template_hole 0, template_var 0)),
           template_var 1),
         template_app
          (template_hole 0,
           template_app
            (template_app (template_hole 1, template_var 0),
             template_var 1))))),
    ("OrdArith.BuildSeq_exI", "?B ?t ==> EX s k. BuildSeq ?B ?C s k ?t",
     template_implication
      ([template_predicate (template_app (template_var 2, template_var 1))],
       template_predicate (template_app (template_hole 1, t_empty)))),
    ("OrdArith.BuildSeq_1", "?B ?y ==> BuildSeq ?B ?C {|<0, ?y>|} 0 ?y",
     template_implication
      ([template_predicate (template_app (template_var 2, template_var 1))],
       template_predicate
        (
           template_app
            (template_app
              (template_app
                (template_app
                  (template_app (template_hole 3, template_var 2),
                   template_var 0),
                 template_app
                  (template_app
                    (template_hole 2,
                     template_app
                      (template_app (template_hole 1, template_hole 0),
                       template_var 1)),
                   template_hole 0)),
               template_hole 0),
             template_var 1)
           ))),
    ("OrdArith.diff_hmem_imp_less",
     "?x <: ?y ==> Rep_hf (?y - {|?x|}) < Rep_hf ?y",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 5, template_var 1),
              template_var 0)
            )],
       template_inequation
        (less_than,
         template_app
          (template_hole 3,
           template_app
            (template_app (template_hole 2, template_var 0),
             template_app
              (template_app (template_hole 1, template_var 1),
               template_hole 0))),
         template_app (template_hole 3, template_var 0)))),
    ("OrdArith.OrdDom_insf",
     "[| OrdDom ?s; Ord ?k |] ==> OrdDom (insf ?s (succ ?k) ?y)",
     template_implication
      ([template_predicate (template_app (template_hole 3, template_var 2)),
        template_predicate
         (template_app (template_hole 2, template_var 1))],
       template_predicate
        (
           template_app
            (template_hole 3,
             template_app
              (template_app
                (template_app (template_hole 1, template_var 2),
                 template_app (template_hole 0, template_var 1)),
               template_var 0))
           ))),
    ("OrdArith.pred_mem", "[| Ord ?x; ?x ~= 0 |] ==> pred ?x <: ?x",
     template_implication
      ([template_predicate (template_app (template_hole 5, template_var 0)),
        template_negation
         (template_equation (template_var 0, template_hole 2))],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 1,
               template_app (template_hole 0, template_var 0)),
             template_var 0)
           ))),
    ("OrdArith.hmem_shift_add_iff",
     "(<?delta @+ ?n, ?y> <: OrdArith.shift ?f ?delta) = (<?n, ?y> <: ?f)",
     template_equation
      (template_app
        (template_app
          (template_hole 3,
           template_app
            (template_app
              (template_hole 2,
               template_app
                (template_app (template_hole 1, template_var 3),
                 template_var 2)),
             template_var 1)),
         template_app
          (template_app (template_hole 0, template_var 0), template_var 3)),
       template_app
        (template_app
          (template_hole 3,
           template_app
            (template_app (template_hole 2, template_var 2),
             template_var 1)),
         template_var 0))),
    ("OrdArith.hadd_cancel_left",
     "Ord ?x ==> (?y @+ ?x = ?z @+ ?x) = (?y = ?z)",
     template_implication
      ([template_predicate
         (template_app (template_hole 3, template_var 2))],
       template_bimplication
        (template_equation
          (template_app
            (template_app (template_hole 0, template_var 1),
             template_var 2),
           template_app
            (template_app (template_hole 0, template_var 0),
             template_var 2)),
         template_equation (template_var 1, template_var 0)))),
    ("OrdArith.LstSeq_insf",
     "LstSeq ?s ?k ?z ==> LstSeq (insf ?s (succ ?k) ?y) (succ ?k) ?y",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app (template_hole 2, template_var 3),
                template_var 2),
              template_var 1)
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_app
                (template_hole 2,
                 template_app
                  (template_app
                    (template_app (template_hole 1, template_var 3),
                     template_app (template_hole 0, template_var 2)),
                   template_var 0)),
               template_app (template_hole 0, template_var 2)),
             template_var 0)
           ))),
    ("OrdArith.hadd_commute",
     "[| Ord ?x; Ord ?y |] ==> ?x @+ ?y = ?y @+ ?x",
     template_implication
      ([template_predicate (template_app (template_hole 2, template_var 1)),
        template_predicate
         (template_app (template_hole 2, template_var 0))],
       template_equation
        (template_app
          (template_app (template_hole 0, template_var 1), template_var 0),
         template_app
          (template_app (template_hole 0, template_var 0),
           template_var 1)))),
    ("OrdArith.succ_pred", "[| Ord ?x; ?x ~= 0 |] ==> succ (pred ?x) = ?x",
     template_implication
      ([template_predicate (template_app (template_hole 5, template_var 0)),
        template_negation
         (template_equation (template_var 0, template_hole 2))],
       template_equation
        (template_app
          (template_hole 1, template_app (template_hole 0, template_var 0)),
         template_var 0))),
    ("OrdArith.BuildSeq2_exI",
     "?B ?t ?t' ==> EX s k. BuildSeq2 ?B ?C s k ?t ?t'",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_var 3, template_var 2), template_var 1)
            )],
       template_predicate (template_app (template_hole 1, t_empty)))),
    ("OrdArith.app_insf_LstSeq",
     "LstSeq ?s ?k ?z ==> app (insf ?s (succ ?k) ?y) (succ ?k) = ?y",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app (template_hole 4, template_var 3),
                template_var 2),
              template_var 1)
            )],
       template_equation
        (template_app
          (template_app
            (template_hole 2,
             template_app
              (template_app
                (template_app (template_hole 1, template_var 3),
                 template_app (template_hole 0, template_var 2)),
               template_var 0)),
           template_app (template_hole 0, template_var 2)),
         template_var 0))),
    ("OrdArith.app_hunion2",
     "?x \<^bold>\<notin> hdomain ?f ==>
      app (?f \<squnion> ?g) ?x = app ?g ?x",
     template_implication
      ([template_negation
         (
            template_predicate
             (
                template_app
                 (template_app (template_hole 4, template_var 2),
                  template_app (template_hole 3, template_var 1))
                )
            )],
       template_equation
        (template_app
          (template_app
            (template_hole 1,
             template_app
              (template_app (template_hole 0, template_var 1),
               template_var 0)),
           template_var 2),
         template_app
          (template_app (template_hole 1, template_var 0),
           template_var 2)))),
    ("OrdArith.app_hunion1",
     "?x \<^bold>\<notin> hdomain ?g ==>
      app (?f \<squnion> ?g) ?x = app ?f ?x",
     template_implication
      ([template_negation
         (
            template_predicate
             (
                template_app
                 (template_app (template_hole 4, template_var 2),
                  template_app (template_hole 3, template_var 1))
                )
            )],
       template_equation
        (template_app
          (template_app
            (template_hole 1,
             template_app
              (template_app (template_hole 0, template_var 0),
               template_var 1)),
           template_var 2),
         template_app
          (template_app (template_hole 1, template_var 0),
           template_var 2)))),
    ("OrdArith.RepFun_hadd_cancel",
     "(RepFun ?y ((@+) ?x) = RepFun ?z ((@+) ?x)) = (?y = ?z)",
     template_bimplication
      (template_equation
        (template_app
          (template_app (template_hole 1, template_var 2), t_empty),
         template_app
          (template_app (template_hole 1, template_var 0), t_empty)),
       template_equation (template_var 2, template_var 0))),
    ("OrdArith.LstSeq_trunc",
     "[| LstSeq ?s ?k ?y; ?l <: ?k |] ==> LstSeq ?s ?l (app ?s ?l)",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app (template_hole 2, template_var 3),
                template_var 2),
              template_var 1)
            ),
        template_predicate
         (
            template_app
             (template_app (template_hole 1, template_var 0),
              template_var 2)
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_app (template_hole 2, template_var 3),
               template_var 0),
             template_app
              (template_app (template_hole 0, template_var 3),
               template_var 0))
           ))),
    ("OrdArith.Seq_append_OrdDom",
     "[| Ord ?k; OrdDom ?s1.0; OrdDom ?s2.0 |]
      ==> OrdDom (seq_append ?k ?s1.0 ?s2.0)",
     template_implication
      ([template_predicate (template_app (template_hole 2, template_var 2)),
        template_predicate (template_app (template_hole 1, template_var 1)),
        template_predicate
         (template_app (template_hole 1, template_var 0))],
       template_predicate
        (
           template_app
            (template_hole 1,
             template_app
              (template_app
                (template_app (template_hole 0, template_var 2),
                 template_var 1),
               template_var 0))
           ))),
    ("OrdArith.BuildSeq2_1",
     "?B ?y ?y' ==> BuildSeq2 ?B ?C {|<0, ?y, ?y'>|} 0 ?y ?y'",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_var 3, template_var 2), template_var 1)
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_app
                (template_app
                  (template_app
                    (template_app (template_hole 3, template_var 3),
                     template_var 0),
                   template_app
                    (template_app
                      (template_hole 2,
                       template_app
                        (template_app (template_hole 1, template_hole 0),
                         template_app
                          (template_app (template_hole 1, template_var 2),
                           template_var 1))),
                     template_hole 0)),
                 template_hole 0),
               template_var 2),
             template_var 1)
           ))),
    ("OrdArith.BuildSeq3_exI",
     "?B ?t ?t' ?t'' ==> EX s k. BuildSeq3 ?B ?C s k ?t ?t' ?t''",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app (template_var 4, template_var 3),
                template_var 2),
              template_var 1)
            )],
       template_predicate (template_app (template_hole 1, t_empty)))),
    ("OrdArith.Seq_append",
     "[| Seq ?s1.0 ?k1.0; Seq ?s2.0 ?k2.0 |]
      ==> Seq (seq_append ?k1.0 ?s1.0 ?s2.0) (?k1.0 @+ ?k2.0)",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 2, template_var 3),
              template_var 2)
            ),
        template_predicate
         (
            template_app
             (template_app (template_hole 2, template_var 1),
              template_var 0)
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 2,
               template_app
                (template_app
                  (template_app (template_hole 1, template_var 2),
                   template_var 3),
                 template_var 1)),
             template_app
              (template_app (template_hole 0, template_var 2),
               template_var 0))
           ))),
    ("OrdArith.hadd_pred_right",
     "[| Ord ?y; ?y ~= 0 |] ==> ?x @+ pred ?y = pred (?x @+ ?y)",
     template_implication
      ([template_predicate (template_app (template_hole 5, template_var 1)),
        template_negation
         (template_equation (template_var 1, template_hole 2))],
       template_equation
        (template_app
          (template_app (template_hole 1, template_var 0),
           template_app (template_hole 0, template_var 1)),
         template_app
          (template_hole 0,
           template_app
            (template_app (template_hole 1, template_var 0),
             template_var 1))))),
    ("OrdArith.Seq_append_app1",
     "[| Seq ?s ?k; ?l <: ?k |]
      ==> app (seq_append ?k ?s ?s') ?l = app ?s ?l",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 4, template_var 3),
              template_var 2)
            ),
        template_predicate
         (
            template_app
             (template_app (template_hole 3, template_var 1),
              template_var 2)
            )],
       template_equation
        (template_app
          (template_app
            (template_hole 1,
             template_app
              (template_app
                (template_app (template_hole 0, template_var 2),
                 template_var 3),
               template_var 0)),
           template_var 1),
         template_app
          (template_app (template_hole 1, template_var 3),
           template_var 1)))),
    ("OrdArith.hmem_shift_iff",
     "(<?m, ?y> <: OrdArith.shift ?f ?delta) =
      (EX n. ?m = ?delta @+ n & <n, ?y> <: ?f)",
     template_equation
      (template_app
        (template_app
          (template_hole 6,
           template_app
            (template_app (template_hole 5, template_var 3),
             template_var 2)),
         template_app
          (template_app (template_hole 4, template_var 1), template_var 0)),
       template_app (template_hole 3, t_empty))),
    ("OrdArith.BuildSeq_trunc",
     "[| BuildSeq ?B ?C ?s ?k ?y; ?l <: ?k |]
      ==> BuildSeq ?B ?C ?s ?l (app ?s ?l)",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_app
                   (template_app (template_hole 2, template_var 5),
                    template_var 4),
                  template_var 3),
                template_var 2),
              template_var 1)
            ),
        template_predicate
         (
            template_app
             (template_app (template_hole 1, template_var 0),
              template_var 2)
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_app
                (template_app
                  (template_app (template_hole 2, template_var 5),
                   template_var 4),
                 template_var 3),
               template_var 0),
             template_app
              (template_app (template_hole 0, template_var 3),
               template_var 0))
           ))),
    ("OrdArith.BuildSeq3_1",
     "?B ?y ?y' ?y'' ==>
      BuildSeq3 ?B ?C {|<0, ?y, ?y', ?y''>|} 0 ?y ?y' ?y''",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app (template_var 4, template_var 3),
                template_var 2),
              template_var 1)
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_app
                (template_app
                  (template_app
                    (template_app
                      (template_app (template_hole 3, template_var 4),
                       template_var 0),
                     template_app
                      (template_app
                        (template_hole 2,
                         template_app
                          (template_app (template_hole 1, template_hole 0),
                           template_app
                            (template_app (template_hole 1, template_var 3),
                             template_app
                              (template_app
                                (template_hole 1, template_var 2),
                               template_var 1)))),
                       template_hole 0)),
                   template_hole 0),
                 template_var 3),
               template_var 2),
             template_var 1)
           ))),
    ("OrdArith.shiftD",
     "?x <: OrdArith.shift ?f ?delta ==>
      EX u. u <: ?f & ?x = <?delta @+ hfst u, hsnd u>",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 8, template_var 2),
              template_app
               (template_app (template_hole 7, template_var 1),
                template_var 0))
            )],
       template_predicate (template_app (template_hole 6, t_empty)))),
    ("OrdArith.nonempty_imp_ex_least",
     "?a ~= 0 ==>
      EX x. x <: ?a & (ALL y. y <: ?a --> Rep_hf x <= Rep_hf y)",
     template_implication
      ([template_negation
         (template_equation (template_var 0, template_hole 7))],
       template_predicate (template_app (template_hole 6, t_empty)))),
    ("OrdArith.app_insf_LstSeq_if",
     "LstSeq ?s ?k ?z ==>
      app (insf ?s (succ ?k) ?y) ?k' =
      (if ?k' = succ ?k then ?y else app ?s ?k')",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app (template_hole 5, template_var 4),
                template_var 3),
              template_var 2)
            )],
       template_implication
        ([template_predicate
           (
              template_app
               (template_app
                 (template_hole 3,
                  template_app
                   (template_app
                     (template_app (template_hole 2, template_var 4),
                      template_app (template_hole 1, template_var 3)),
                    template_var 1)),
                template_var 0)
              )],
         template_predicate
          (
             template_app
              (template_app
                (template_app
                  (template_hole 0,
                   template_app
                    (template_app (template_hole 4, template_var 0),
                     template_app (template_hole 1, template_var 3))),
                 template_var 1),
               template_app
                (template_app (template_hole 3, template_var 4),
                 template_var 0))
             )))),
    ("OrdArith.least_equality",
     "[| ?x <: ?a; !!y. y <: ?a ==> Rep_hf ?x <= Rep_hf y |]
      ==> least ?a = ?x",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 5, template_var 1),
              template_var 0)
            ),
        template_predicate (template_app (template_hole 4, t_empty))],
       template_equation
        (template_app (template_hole 0, template_var 0), template_var 1))),
    ("OrdArith.LstSeq_append_app1",
     "[| LstSeq ?s ?k ?y; ?l <: succ ?k |]
      ==> app (seq_append (succ ?k) ?s ?s') ?l = app ?s ?l",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app (template_hole 5, template_var 4),
                template_var 3),
              template_var 2)
            ),
        template_predicate
         (
            template_app
             (template_app (template_hole 4, template_var 1),
              template_app (template_hole 3, template_var 3))
            )],
       template_equation
        (template_app
          (template_app
            (template_hole 1,
             template_app
              (template_app
                (template_app
                  (template_hole 0,
                   template_app (template_hole 3, template_var 3)),
                 template_var 4),
               template_var 0)),
           template_var 1),
         template_app
          (template_app (template_hole 1, template_var 4),
           template_var 1)))),
    ("OrdArith.LstSeq_append",
     "[| LstSeq ?s1.0 ?k1.0 ?y1.0; LstSeq ?s2.0 ?k2.0 ?y2.0 |]
      ==> LstSeq (seq_append (succ ?k1.0) ?s1.0 ?s2.0)
           (succ (?k1.0 @+ ?k2.0)) ?y2.0",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app (template_hole 3, template_var 5),
                template_var 4),
              template_var 3)
            ),
        template_predicate
         (
            template_app
             (template_app
               (template_app (template_hole 3, template_var 2),
                template_var 1),
              template_var 0)
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_app
                (template_hole 3,
                 template_app
                  (template_app
                    (template_app
                      (template_hole 2,
                       template_app (template_hole 1, template_var 4)),
                     template_var 5),
                   template_var 2)),
               template_app
                (template_hole 1,
                 template_app
                  (template_app (template_hole 0, template_var 4),
                   template_var 1))),
             template_var 0)
           ))),
    ("OrdArith.BuildSeq_insf1",
     "[| BuildSeq ?B ?C ?s ?k ?z; ?B ?y |]
      ==> BuildSeq ?B ?C (insf ?s (succ ?k) ?y) (succ ?k) ?y",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_app
                   (template_app (template_hole 2, template_var 5),
                    template_var 4),
                  template_var 3),
                template_var 2),
              template_var 1)
            ),
        template_predicate (template_app (template_var 5, template_var 0))],
       template_predicate
        (
           template_app
            (template_app
              (template_app
                (template_app
                  (template_app (template_hole 2, template_var 5),
                   template_var 4),
                 template_app
                  (template_app
                    (template_app (template_hole 1, template_var 3),
                     template_app (template_hole 0, template_var 2)),
                   template_var 0)),
               template_app (template_hole 0, template_var 2)),
             template_var 0)
           ))),
    ("OrdArith.Rep_le_Cancel",
     "?x \<squnion> RepFun ?y ((@+) ?x)
      <= ?x \<squnion> RepFun ?z ((@+) ?x) ==>
      RepFun ?y ((@+) ?x) <= RepFun ?z ((@+) ?x)",
     template_implication
      ([template_inequation
         (less_equals,
          template_app
           (template_app (template_hole 2, template_var 2),
            template_app
             (template_app (template_hole 1, template_var 1),
              template_app (template_hole 0, template_var 2))),
          template_app
           (template_app (template_hole 2, template_var 2),
            template_app
             (template_app (template_hole 1, template_var 0),
              template_app (template_hole 0, template_var 2))))],
       template_inequation
        (less_equals,
         template_app
          (template_app (template_hole 1, template_var 1),
           template_app (template_hole 0, template_var 2)),
         template_app
          (template_app (template_hole 1, template_var 0),
           template_app (template_hole 0, template_var 2))))),
    ("OrdArith.app_insf2_LstSeq",
     "[| LstSeq ?s ?k ?z; ?k' ~= succ ?k |]
      ==> app (insf ?s (succ ?k) ?y) ?k' = app ?s ?k'",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app (template_hole 5, template_var 4),
                template_var 3),
              template_var 2)
            ),
        template_negation
         (
            template_equation
             (template_var 1,
              template_app (template_hole 2, template_var 3))
            )],
       template_equation
        (template_app
          (template_app
            (template_hole 1,
             template_app
              (template_app
                (template_app (template_hole 0, template_var 4),
                 template_app (template_hole 2, template_var 3)),
               template_var 0)),
           template_var 1),
         template_app
          (template_app (template_hole 1, template_var 4),
           template_var 1)))),
    ("OrdArith.BuildSeqI",
     "[| LstSeq ?s ?k ?y; !!l. l <: succ ?k ==> Builds ?B ?C ?s l |]
      ==> BuildSeq ?B ?C ?s ?k ?y",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app (template_hole 5, template_var 4),
                template_var 3),
              template_var 2)
            ),
        template_predicate (template_app (template_hole 4, t_empty))],
       template_predicate
        (
           template_app
            (template_app
              (template_app
                (template_app
                  (template_app (template_hole 0, template_var 1),
                   template_var 0),
                 template_var 4),
               template_var 3),
             template_var 2)
           ))),
    ("OrdArith.Seq_append_app2",
     "[| Seq ?s1.0 ?k1.0; Seq ?s2.0 ?k2.0; ?l = ?k1.0 @+ ?j |]
      ==> app (seq_append ?k1.0 ?s1.0 ?s2.0) ?l = app ?s2.0 ?j",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 4, template_var 5),
              template_var 4)
            ),
        template_predicate
         (
            template_app
             (template_app (template_hole 4, template_var 3),
              template_var 2)
            ),
        template_equation
         (template_var 1,
          template_app
           (template_app (template_hole 2, template_var 4),
            template_var 0))],
       template_equation
        (template_app
          (template_app
            (template_hole 1,
             template_app
              (template_app
                (template_app (template_hole 0, template_var 4),
                 template_var 5),
               template_var 3)),
           template_var 1),
         template_app
          (template_app (template_hole 1, template_var 3),
           template_var 0)))),
    ("OrdArith.Builds_insf",
     "[| Builds ?B ?C ?s ?l; LstSeq ?s ?k ?z; ?l <: succ ?k |]
      ==> Builds ?B ?C (insf ?s (succ ?k) ?y) ?l",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_app (template_hole 4, template_var 6),
                  template_var 5),
                template_var 4),
              template_var 3)
            ),
        template_predicate
         (
            template_app
             (template_app
               (template_app (template_hole 3, template_var 4),
                template_var 2),
              template_var 1)
            ),
        template_predicate
         (
            template_app
             (template_app (template_hole 2, template_var 3),
              template_app (template_hole 1, template_var 2))
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_app
                (template_app (template_hole 4, template_var 6),
                 template_var 5),
               template_app
                (template_app
                  (template_app (template_hole 0, template_var 4),
                   template_app (template_hole 1, template_var 2)),
                 template_var 0)),
             template_var 3)
           ))),
    ("OrdArith.BuildSeq_append",
     "[| BuildSeq ?B ?C ?s1.0 ?k1.0 ?y1.0;
         BuildSeq ?B ?C ?s2.0 ?k2.0 ?y2.0 |]
      ==> BuildSeq ?B ?C (seq_append (succ ?k1.0) ?s1.0 ?s2.0)
           (succ (?k1.0 @+ ?k2.0)) ?y2.0",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_app
                   (template_app (template_hole 3, template_var 7),
                    template_var 6),
                  template_var 5),
                template_var 4),
              template_var 3)
            ),
        template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_app
                   (template_app (template_hole 3, template_var 7),
                    template_var 6),
                  template_var 2),
                template_var 1),
              template_var 0)
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_app
                (template_app
                  (template_app (template_hole 3, template_var 7),
                   template_var 6),
                 template_app
                  (template_app
                    (template_app
                      (template_hole 2,
                       template_app (template_hole 1, template_var 4)),
                     template_var 5),
                   template_var 2)),
               template_app
                (template_hole 1,
                 template_app
                  (template_app (template_hole 0, template_var 4),
                   template_var 1))),
             template_var 0)
           ))),
    ("OrdArith.LstSeq_append_app2",
     "[| LstSeq ?s1.0 ?k1.0 ?y1.0; LstSeq ?s2.0 ?k2.0 ?y2.0;
         ?l = succ ?k1.0 @+ ?j |]
      ==> app (seq_append (succ ?k1.0) ?s1.0 ?s2.0) ?l = app ?s2.0 ?j",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app (template_hole 5, template_var 7),
                template_var 6),
              template_var 5)
            ),
        template_predicate
         (
            template_app
             (template_app
               (template_app (template_hole 5, template_var 4),
                template_var 3),
              template_var 2)
            ),
        template_equation
         (template_var 1,
          template_app
           (template_app
             (template_hole 3,
              template_app (template_hole 2, template_var 6)),
            template_var 0))],
       template_equation
        (template_app
          (template_app
            (template_hole 1,
             template_app
              (template_app
                (template_app
                  (template_hole 0,
                   template_app (template_hole 2, template_var 6)),
                 template_var 7),
               template_var 4)),
           template_var 1),
         template_app
          (template_app (template_hole 1, template_var 4),
           template_var 0)))),
    ("OrdArith.Seq_append_pair",
     "[| Seq ?s1.0 ?k1.0; Seq ?s2.0 (succ ?n); <?n, ?y> <: ?s2.0; Ord ?n |]
      ==> <?k1.0 @+ ?n, ?y> <: seq_append ?k1.0 ?s1.0 ?s2.0",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 6, template_var 4),
              template_var 3)
            ),
        template_predicate
         (
            template_app
             (template_app (template_hole 6, template_var 2),
              template_app (template_hole 5, template_var 1))
            ),
        template_predicate
         (
            template_app
             (template_app
               (template_hole 4,
                template_app
                 (template_app (template_hole 3, template_var 1),
                  template_var 0)),
              template_var 2)
            ),
        template_predicate
         (template_app (template_hole 2, template_var 1))],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 4,
               template_app
                (template_app
                  (template_hole 3,
                   template_app
                    (template_app (template_hole 1, template_var 3),
                     template_var 1)),
                 template_var 0)),
             template_app
              (template_app
                (template_app (template_hole 0, template_var 3),
                 template_var 4),
               template_var 2))
           ))),
    ("OrdArith.hmem_hadd_E",
     "[| ?l <: ?x @+ ?y; ?l <: ?x ==> ?thesis;
         !!z. [| z <: ?y; ?l = ?x @+ z |] ==> ?thesis |]
      ==> ?thesis",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 3, template_var 3),
              template_app
               (template_app (template_hole 2, template_var 2),
                template_var 1))
            ),
        template_implication
         ([template_predicate
            (
               template_app
                (template_app (template_hole 3, template_var 3),
                 template_var 2)
               )],
          template_predicate (template_var 0)),
        template_predicate (template_app (template_hole 1, t_empty))],
       template_predicate (template_var 0))),
    ("OrdArith.BuildSeq_conj_distrib",
     "BuildSeq (%x. ?B x & ?P x) (%x y z. ?C x y z & ?P x) ?s ?k ?y =
      (BuildSeq ?B ?C ?s ?k ?y & (ALL l<:succ ?k. ?P (app ?s l)))",
     template_equation
      (template_app
        (template_app
          (template_app
            (template_app
              (template_app (template_hole 4, t_empty), t_empty),
             template_var 2),
           template_var 1),
         template_var 0),
       template_app
        (template_app
          (template_hole 3,
           template_app
            (template_app
              (template_app
                (template_app
                  (template_app (template_hole 4, template_var 5),
                   template_var 3),
                 template_var 2),
               template_var 1),
             template_var 0)),
         template_app
          (template_app
            (template_hole 2,
             template_app (template_hole 1, template_var 1)),
           t_empty)))),
    ("OrdArith.BuildSeq_insf2",
     "[| BuildSeq ?B ?C ?s ?k ?z; ?m <: ?k; ?n <: ?k;
         ?C ?y (app ?s ?m) (app ?s ?n) |]
      ==> BuildSeq ?B ?C (insf ?s (succ ?k) ?y) (succ ?k) ?y",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_app
                   (template_app (template_hole 4, template_var 7),
                    template_var 6),
                  template_var 5),
                template_var 4),
              template_var 3)
            ),
        template_predicate
         (
            template_app
             (template_app (template_hole 3, template_var 2),
              template_var 4)
            ),
        template_predicate
         (
            template_app
             (template_app (template_hole 3, template_var 1),
              template_var 4)
            ),
        template_predicate
         (
            template_app
             (template_app
               (template_app (template_var 6, template_var 0),
                template_app
                 (template_app (template_hole 2, template_var 5),
                  template_var 2)),
              template_app
               (template_app (template_hole 2, template_var 5),
                template_var 1))
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_app
                (template_app
                  (template_app (template_hole 4, template_var 7),
                   template_var 6),
                 template_app
                  (template_app
                    (template_app (template_hole 1, template_var 5),
                     template_app (template_hole 0, template_var 4)),
                   template_var 0)),
               template_app (template_hole 0, template_var 4)),
             template_var 0)
           ))),
    ("OrdArith.BuildSeq_mono",
     "[| BuildSeq ?B ?C ?s ?k ?y; !!x. ?B x ==> ?B' x;
         !!x y z. ?C x y z ==> ?C' x y z |]
      ==> BuildSeq ?B' ?C' ?s ?k ?y",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_app
                   (template_app (template_hole 1, template_var 6),
                    template_var 5),
                  template_var 4),
                template_var 3),
              template_var 2)
            ),
        template_predicate (template_app (template_hole 0, t_empty)),
        template_predicate (template_app (template_hole 0, t_empty))],
       template_predicate
        (
           template_app
            (template_app
              (template_app
                (template_app
                  (template_app (template_hole 1, template_var 1),
                   template_var 0),
                 template_var 4),
               template_var 3),
             template_var 2)
           ))),
    ("OrdArith.BuildSeq_succ_E",
     "[| BuildSeq ?B ?C ?s ?k ?y; ?B ?y ==> ?thesis;
         !!m n.
            [| m <: ?k; n <: ?k; ?C ?y (app ?s m) (app ?s n) |]
            ==> ?thesis |]
      ==> ?thesis",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_app
                   (template_app (template_hole 3, template_var 5),
                    template_var 4),
                  template_var 3),
                template_var 2),
              template_var 1)
            ),
        template_implication
         ([template_predicate
            (template_app (template_var 5, template_var 1))],
          template_predicate (template_var 0)),
        template_predicate (template_app (template_hole 2, t_empty))],
       template_predicate (template_var 0))),
    ("OrdArith.BuildSeq_combine",
     "[| BuildSeq ?B ?C ?s1.0 ?k1.0 ?y1.0; BuildSeq ?B ?C ?s2.0 ?k2.0 ?y2.0;
         ?C ?y ?y1.0 ?y2.0 |]
      ==> BuildSeq ?B ?C
           (insf (seq_append (succ ?k1.0) ?s1.0 ?s2.0)
             (succ (succ (?k1.0 @+ ?k2.0))) ?y)
           (succ (succ (?k1.0 @+ ?k2.0))) ?y",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_app
                   (template_app (template_hole 4, template_var 8),
                    template_var 7),
                  template_var 6),
                template_var 5),
              template_var 4)
            ),
        template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_app
                   (template_app (template_hole 4, template_var 8),
                    template_var 7),
                  template_var 3),
                template_var 2),
              template_var 1)
            ),
        template_predicate
         (
            template_app
             (template_app
               (template_app (template_var 7, template_var 0),
                template_var 4),
              template_var 1)
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_app
                (template_app
                  (template_app (template_hole 4, template_var 8),
                   template_var 7),
                 template_app
                  (template_app
                    (template_app
                      (template_hole 3,
                       template_app
                        (template_app
                          (template_app
                            (template_hole 2,
                             template_app
                              (template_hole 1, template_var 5)),
                           template_var 6),
                         template_var 3)),
                     template_app
                      (template_hole 1,
                       template_app
                        (template_hole 1,
                         template_app
                          (template_app (template_hole 0, template_var 5),
                           template_var 2)))),
                   template_var 0)),
               template_app
                (template_hole 1,
                 template_app
                  (template_hole 1,
                   template_app
                    (template_app (template_hole 0, template_var 5),
                     template_var 2)))),
             template_var 0)
           ))),
    ("OrdArith.BuildSeq_induct",
     "[| BuildSeq ?B ?C ?s ?k ?a; !!x. ?B x ==> ?P x;
         !!x y z. [| ?C x y z; ?P y; ?P z |] ==> ?P x |]
      ==> ?P ?a",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_app
                   (template_app (template_hole 1, template_var 5),
                    template_var 4),
                  template_var 3),
                template_var 2),
              template_var 1)
            ),
        template_predicate (template_app (template_hole 0, t_empty)),
        template_predicate (template_app (template_hole 0, t_empty))],
       template_predicate (template_app (template_var 0, template_var 1)))),
    ("OrdArith.BuildSeq_insf",
     "[| BuildSeq ?B ?C ?s ?k ?z; ?m <: succ ?k; ?n <: succ ?k;
         ?B ?y | ?C ?y (app ?s ?m) (app ?s ?n) |]
      ==> BuildSeq ?B ?C (insf ?s (succ ?k) ?y) (succ ?k) ?y",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_app
                   (template_app (template_hole 5, template_var 7),
                    template_var 6),
                  template_var 5),
                template_var 4),
              template_var 3)
            ),
        template_predicate
         (
            template_app
             (template_app (template_hole 4, template_var 2),
              template_app (template_hole 3, template_var 4))
            ),
        template_predicate
         (
            template_app
             (template_app (template_hole 4, template_var 1),
              template_app (template_hole 3, template_var 4))
            ),
        template_predicate
         (
            template_app
             (template_app
               (template_hole 2,
                template_app (template_var 7, template_var 0)),
              template_app
               (template_app
                 (template_app (template_var 6, template_var 0),
                  template_app
                   (template_app (template_hole 1, template_var 5),
                    template_var 2)),
                template_app
                 (template_app (template_hole 1, template_var 5),
                  template_var 1)))
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_app
                (template_app
                  (template_app (template_hole 5, template_var 7),
                   template_var 6),
                 template_app
                  (template_app
                    (template_app (template_hole 0, template_var 5),
                     template_app (template_hole 3, template_var 4)),
                   template_var 0)),
               template_app (template_hole 3, template_var 4)),
             template_var 0)
           ))),
    ("OrdArith.leastI2_order",
     "[| ?x <: ?a; !!y. y <: ?a ==> Rep_hf ?x <= Rep_hf y;
         !!z. [| z <: ?a; ALL y. y <: ?a --> Rep_hf z <= Rep_hf y |]
              ==> ?Q z |]
      ==> ?Q (least ?a)",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 6, template_var 2),
              template_var 1)
            ),
        template_predicate (template_app (template_hole 5, t_empty)),
        template_predicate (template_app (template_hole 5, t_empty))],
       template_predicate
        (
           template_app
            (template_var 0, template_app (template_hole 0, template_var 1))
           ))),
    ("OrdArith.BuildSeq2_combine",
     "[| BuildSeq2 ?B ?C ?s1.0 ?k1.0 ?y1.0 ?y1';
         BuildSeq2 ?B ?C ?s2.0 ?k2.0 ?y2.0 ?y2';
         ?C ?y ?y' ?y1.0 ?y1' ?y2.0 ?y2' |]
      ==> BuildSeq2 ?B ?C
           (insf (seq_append (succ ?k1.0) ?s1.0 ?s2.0)
             (succ (succ (?k1.0 @+ ?k2.0))) <?y, ?y'>)
           (succ (succ (?k1.0 @+ ?k2.0))) ?y ?y'",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_app
                   (template_app
                     (template_app (template_hole 5, template_var 11),
                      template_var 10),
                    template_var 9),
                  template_var 8),
                template_var 7),
              template_var 6)
            ),
        template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_app
                   (template_app
                     (template_app (template_hole 5, template_var 11),
                      template_var 10),
                    template_var 5),
                  template_var 4),
                template_var 3),
              template_var 2)
            ),
        template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_app
                   (template_app
                     (template_app (template_var 10, template_var 1),
                      template_var 0),
                    template_var 7),
                  template_var 6),
                template_var 3),
              template_var 2)
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_app
                (template_app
                  (template_app
                    (template_app (template_hole 5, template_var 11),
                     template_var 10),
                   template_app
                    (template_app
                      (template_app
                        (template_hole 4,
                         template_app
                          (template_app
                            (template_app
                              (template_hole 3,
                               template_app
                                (template_hole 2, template_var 8)),
                             template_var 9),
                           template_var 5)),
                       template_app
                        (template_hole 2,
                         template_app
                          (template_hole 2,
                           template_app
                            (template_app (template_hole 1, template_var 8),
                             template_var 4)))),
                     template_app
                      (template_app (template_hole 0, template_var 1),
                       template_var 0))),
                 template_app
                  (template_hole 2,
                   template_app
                    (template_hole 2,
                     template_app
                      (template_app (template_hole 1, template_var 8),
                       template_var 4)))),
               template_var 1),
             template_var 0)
           ))),
    ("OrdArith.BuildSeq3_combine",
     "[| BuildSeq3 ?B ?C ?s1.0 ?k1.0 ?y1.0 ?y1' ?y1'';
         BuildSeq3 ?B ?C ?s2.0 ?k2.0 ?y2.0 ?y2' ?y2'';
         ?C ?y ?y' ?y'' ?y1.0 ?y1' ?y1'' ?y2.0 ?y2' ?y2'' |]
      ==> BuildSeq3 ?B ?C
           (insf (seq_append (succ ?k1.0) ?s1.0 ?s2.0)
             (succ (succ (?k1.0 @+ ?k2.0))) <?y, ?y', ?y''>)
           (succ (succ (?k1.0 @+ ?k2.0))) ?y ?y' ?y''",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_app
                   (template_app
                     (template_app
                       (template_app (template_hole 5, template_var 14),
                        template_var 13),
                      template_var 12),
                    template_var 11),
                  template_var 10),
                template_var 9),
              template_var 8)
            ),
        template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_app
                   (template_app
                     (template_app
                       (template_app (template_hole 5, template_var 14),
                        template_var 13),
                      template_var 7),
                    template_var 6),
                  template_var 5),
                template_var 4),
              template_var 3)
            ),
        template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_app
                   (template_app
                     (template_app
                       (template_app
                         (template_app
                           (template_app (template_var 13, template_var 2),
                            template_var 1),
                          template_var 0),
                        template_var 10),
                      template_var 9),
                    template_var 8),
                  template_var 5),
                template_var 4),
              template_var 3)
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_app
                (template_app
                  (template_app
                    (template_app
                      (template_app (template_hole 5, template_var 14),
                       template_var 13),
                     template_app
                      (template_app
                        (template_app
                          (template_hole 4,
                           template_app
                            (template_app
                              (template_app
                                (template_hole 3,
                                 template_app
                                  (template_hole 2, template_var 11)),
                               template_var 12),
                             template_var 7)),
                         template_app
                          (template_hole 2,
                           template_app
                            (template_hole 2,
                             template_app
                              (template_app
                                (template_hole 1, template_var 11),
                               template_var 6)))),
                       template_app
                        (template_app (template_hole 0, template_var 2),
                         template_app
                          (template_app (template_hole 0, template_var 1),
                           template_var 0)))),
                   template_app
                    (template_hole 2,
                     template_app
                      (template_hole 2,
                       template_app
                        (template_app (template_hole 1, template_var 11),
                         template_var 6)))),
                 template_var 2),
               template_var 1),
             template_var 0)
           ))),
    ("OrdArith.BuildSeq2_induct",
     "[| BuildSeq2 ?B ?C ?s ?k ?a ?a'; !!x x'. ?B x x' ==> ?P x x';
         !!x x' y y' z z'.
            [| ?C x x' y y' z z'; ?P y y'; ?P z z' |] ==> ?P x x' |]
      ==> ?P ?a ?a'",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_app
                   (template_app
                     (template_app (template_hole 1, template_var 6),
                      template_var 5),
                    template_var 4),
                  template_var 3),
                template_var 2),
              template_var 1)
            ),
        template_predicate (template_app (template_hole 0, t_empty)),
        template_predicate (template_app (template_hole 0, t_empty))],
       template_predicate
        (
           template_app
            (template_app (template_var 0, template_var 2), template_var 1)
           ))),
    ("OrdArith.BuildSeq3_induct",
     "[| BuildSeq3 ?B ?C ?s ?k ?a ?a' ?a'';
         !!x x' x''. ?B x x' x'' ==> ?P x x' x'';
         !!x x' x'' y y' y'' z z' z''.
            [| ?C x x' x'' y y' y'' z z' z''; ?P y y' y''; ?P z z' z'' |]
            ==> ?P x x' x'' |]
      ==> ?P ?a ?a' ?a''",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_app
                   (template_app
                     (template_app
                       (template_app (template_hole 1, template_var 7),
                        template_var 6),
                      template_var 5),
                    template_var 4),
                  template_var 3),
                template_var 2),
              template_var 1)
            ),
        template_predicate (template_app (template_hole 0, t_empty)),
        template_predicate (template_app (template_hole 0, t_empty))],
       template_predicate
        (
           template_app
            (template_app
              (template_app (template_var 0, template_var 3),
               template_var 2),
             template_var 1)
           )))]:
   (string * thm * template) list
### theory "Draft.OrdArithMoreTemplates"
### 0.392s elapsed time, 0.550s cpu time, 0.064s GC time
val it = (): unit
