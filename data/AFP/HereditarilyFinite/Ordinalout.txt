Loading theory "HOL-Library.Function_Algebras" (required by "Draft.OrdinalMoreTemplates" via "Draft.ExtrEqs" via "HOL-Library.BigO")
Loading theory "HOL-Library.Nat_Bijection" (required by "Draft.OrdinalMoreTemplates" via "Draft.ExtrEqs" via "HOL-Library.Stream")
Loading theory "HOL-Library.Set_Algebras" (required by "Draft.OrdinalMoreTemplates" via "Draft.ExtrEqs" via "HOL-Library.BigO")
Loading theory "HOL-Library.Tree" (required by "Draft.OrdinalMoreTemplates" via "Draft.ExtrEqs" via "Draft.Templates")
instantiation
  fun :: (type, plus) plus
  plus_fun == plus :: ('a => 'b) => ('a => 'b) => 'a => 'b
instantiation
  set :: (plus) plus
  plus_set == plus :: 'a set => 'a set => 'a set
instantiation
  fun :: (type, zero) zero
  zero_fun == zero_class.zero :: 'a => 'b
instantiation
  fun :: (type, times) times
  times_fun == times :: ('a => 'b) => ('a => 'b) => 'a => 'b
instantiation
  set :: (times) times
  times_set == times :: 'a set => 'a set => 'a set
instantiation
  set :: (zero) zero
  zero_set == zero_class.zero :: 'a set
instantiation
  fun :: (type, one) one
  one_fun == one_class.one :: 'a => 'b
instantiation
  set :: (one) one
  one_set == one_class.one :: 'a set
Found termination order: "(%p. size (snd p)) <*mlex*> {}"
### theory "HOL-Library.Function_Algebras"
### 0.143s elapsed time, 0.590s cpu time, 0.059s GC time
Found termination order: "size_list size <*mlex*> {}"
### theory "HOL-Library.Set_Algebras"
### 0.257s elapsed time, 0.928s cpu time, 0.059s GC time
Loading theory "HOL-Library.BigO" (required by "Draft.OrdinalMoreTemplates" via "Draft.ExtrEqs")
### theory "HOL-Library.Nat_Bijection"
### 0.405s elapsed time, 1.386s cpu time, 0.165s GC time
Loading theory "Draft.HF" (required by "Draft.OrdinalMoreTemplates" via "Draft.Ordinal")
Loading theory "HOL-Library.Stream" (required by "Draft.OrdinalMoreTemplates" via "Draft.ExtrEqs")
instantiation
  hf :: zero
  zero_hf == zero_class.zero :: hf
instantiation
  hf :: sup
  sup_hf == sup :: hf => hf => hf
instantiation
  hf :: inf
  inf_hf == inf :: hf => hf => hf
instantiation
  hf :: minus
  minus_hf == minus :: hf => hf => hf
instantiation
  hf :: order
  less_eq_hf == less_eq :: hf => hf => bool
  less_hf == less :: hf => hf => bool
consts
  left :: "'a tree => 'a tree"
consts
  right :: "'a tree => 'a tree"
instantiation
  hf :: distrib_lattice
instantiation
  hf :: bounded_lattice_bot
  bot_hf == bot :: hf
Found termination order: "size <*mlex*> {}"
consts
  shift :: "'a list => 'a stream => 'a stream"
Proofs for coinductive predicate(s) "streamsp"
  Proving monotonicity ...
Found termination order: "size <*mlex*> {}"
consts
  snth :: "'a stream => nat => 'a"
Found termination order: "size <*mlex*> {}"
consts
  stake :: "nat => 'a stream => 'a list"
class height = type +
  fixes height :: "'a => nat"
instantiation
  tree :: (type) height
  height_tree == height :: 'a tree => nat
consts
  sdrop :: "nat => 'a stream => 'a stream"
instantiation
  hf :: times
  times_hf == times :: hf => hf => hf
instantiation
  hf :: mult_zero
instantiation
  hf :: zero_neq_one
  one_hf == one_class.one :: hf
instantiation
  hf :: plus
  plus_hf == plus :: hf => hf => hf
consts
  sfilter :: "('a => bool) => 'a stream => 'a stream"
Found termination order: "size <*mlex*> {}"
consts
  cycle :: "'a list => 'a stream"
### theory "Draft.HF"
### 0.974s elapsed time, 3.675s cpu time, 0.864s GC time
Loading theory "Draft.Ordinal" (required by "Draft.OrdinalMoreTemplates")
consts
  siterate :: "('a => 'a) => 'a => 'a stream"
Found termination order: "size <*mlex*> {}"
### theory "HOL-Library.BigO"
### 1.154s elapsed time, 4.276s cpu time, 0.970s GC time
consts
  flat :: "'a list stream => 'a stream"
Found termination order: "size <*mlex*> {}"
consts
  sinterleave :: "'a stream => 'a stream => 'a stream"
consts
  szip :: "'a stream => 'b stream => ('a * 'b) stream"
Found termination order: "size <*mlex*> {}"
consts
  smap2 :: "('a => 'b => 'c) => 'a stream => 'b stream => 'c stream"
Found termination order: "size <*mlex*> {}"
### theory "HOL-Library.Stream"
### 1.193s elapsed time, 4.376s cpu time, 0.909s GC time
Found termination order: "size <*mlex*> {}"
Found termination order: "size <*mlex*> {}"
### theory "Draft.Ordinal"
### 0.378s elapsed time, 1.047s cpu time, 0.136s GC time
Found termination order: "size <*mlex*> {}"
Found termination order: "(%p. size (fst p)) <*mlex*> {}"
Found termination order: "size <*mlex*> {}"
Found termination order: "(%p. size (snd p)) <*mlex*> {}"
Found termination order: "size <*mlex*> {}"
### theory "HOL-Library.Tree"
### 2.336s elapsed time, 6.800s cpu time, 1.229s GC time
Loading theory "Draft.Templates" (required by "Draft.OrdinalMoreTemplates" via "Draft.ExtrEqs")
datatype template_term
=
     t_empty
   | template_app of template_term * template_term
   | template_hole of int
   | template_var of int
datatype sign
= equals | greater_equals | greater_than | less_equals | less_than
datatype template
=
     template_bimplication of template * template
   | template_dunno
   | template_equation of template_term * template_term
   | template_implication of template list * template
   | template_inequation of sign * template_term * template_term
   | template_negation of template
   | template_predicate of template_term
constructor t_empty: template_term
constructor template_app: template_term * template_term -> template_term
constructor template_hole: int -> template_term
constructor template_var: int -> template_term
constructor equals: sign
constructor greater_equals: sign
constructor greater_than: sign
constructor less_equals: sign
constructor less_than: sign
constructor template_bimplication: template * template -> template
constructor template_dunno: template
constructor template_equation: template_term * template_term -> template
constructor template_implication: template list * template -> template
constructor template_inequation:
   sign * template_term * template_term -> template
constructor template_negation: template -> template
constructor template_predicate: template_term -> template
val vfs = fn: term -> (indexname * typ) list * (string * typ) list
val indexOf = fn: ''a list -> ''a -> int -> int
val has_eq = fn: term -> bool
val term2template = fn:
   (indexname * typ) list -> (string * typ) list -> term -> template_term
val lemma2predicate = fn: term -> term -> template
val makeTemplatewithContext = fn: term -> term -> template
val lemma2template = fn: term -> template
val thm2template = fn: thm -> template
val tterm2string = fn: template_term -> string
val template2string = fn: template -> string
val t = "height ?t <= size ?t": thm
val th =
   Const ("HOL.Trueprop", "bool => prop") $
     (Const ("Orderings.ord_class.less_eq", "nat => nat => bool") $
       (Const ("Tree.height_class.height", "?'a tree => nat") $
         Var (("t", 0), "?'a tree")) $
       (Const ("Nat.size_class.size", "?'a tree => nat") $
         Var (("t", 0), "?'a tree"))):
   term
### theory "Draft.Templates"
### 0.059s elapsed time, 0.084s cpu time, 0.000s GC time
Loading theory "Draft.ExtrEqs" (required by "Draft.OrdinalMoreTemplates")
val eqpattern =
   Pattern
    (
       Const ("HOL.Trueprop", "bool => prop") $
         (Const ("HOL.eq", "?'a => ?'a => bool") $
           Var (("_dummy_", 1), "?'a") $ Var (("_dummy_", 2), "?'a"))
       ):
   term Find_Theorems.criterion
val badeqpattern = Pattern (Const ("Pure.eq", "?'a => ?'a => prop")):
   term Find_Theorems.criterion
val undefpattern =
   Pattern
    (
       Const ("HOL.Trueprop", "bool => prop") $
         (Const ("HOL.eq", "?'a => ?'a => bool") $
           Var (("_dummy_", 1), "?'a") $ Const ("HOL.undefined", "?'a"))
       ):
   term Find_Theorems.criterion
val thmpattern =
   Pattern
    (Const ("HOL.Trueprop", "bool => prop") $ Var (("_dummy_", 1), "bool")):
   term Find_Theorems.criterion
val badnames =
   ["*nitpick*", "*Nitpick*", "*full_exhaustive*", "*_def*", "Enum.finite*",
    "*Quickcheck*", "ATP*", "*Nunchaku*", "*Code*", "*BNF*", "*SMT*",
    "*.*.*"]:
   string list
val unwanted_names =
   [(false, Name "*nitpick*"), (false, Name "*Nitpick*"),
    (false, Name "*full_exhaustive*"), (false, Name "*_def*"),
    (false, Name "Enum.finite*"), (false, Name "*Quickcheck*"),
    (false, Name "ATP*"), (false, Name "*Nunchaku*"),
    (false, Name "*Code*"), (false, Name "*BNF*"), (false, Name "*SMT*"),
    (false, Name "*.*.*")]:
   (bool * term Find_Theorems.criterion) list
val has_vars = fn: term -> bool
val get_all_eqs = fn: string -> Proof.context -> (string * thm) list
val get_all_thms = fn: string -> Proof.context -> (string * thm) list
val get_noneq_thms = fn: string -> Proof.context -> (string * thm) list
val template_eqs = fn:
   string -> Proof.context -> (string * thm * template) list
val template_thms = fn:
   string -> Proof.context -> (string * thm * template) list
### theory "Draft.ExtrEqs"
### 0.544s elapsed time, 0.613s cpu time, 0.085s GC time
Loading theory "Draft.OrdinalMoreTemplates"
val templateLemmas =
   [("Ordinal.inj_ord_of", "inj_on ord_of ?A",
     template_predicate
      (
         template_app
          (template_app (template_hole 1, template_hole 0), template_var 0)
         )),
    ("Ordinal.Ord_ord_of", "Ord (ord_of ?k)",
     template_predicate
      (
         template_app
          (template_hole 1, template_app (template_hole 0, template_var 0))
         )),
    ("Ordinal.hmem_succ_self", "?k <: succ ?k",
     template_predicate
      (
         template_app
          (template_app (template_hole 1, template_var 0),
           template_app (template_hole 0, template_var 0))
         )),
    ("Ordinal.is_hpair", "is_hpair <?x, ?y>",
     template_predicate
      (
         template_app
          (template_hole 1,
           template_app
            (template_app (template_hole 0, template_var 1),
             template_var 0))
         )),
    ("Ordinal.succ_notin_self", "succ ?i \<^bold>\<notin> ?i",
     template_negation
      (
         template_predicate
          (
             template_app
              (template_app
                (template_hole 1,
                 template_app (template_hole 0, template_var 0)),
               template_var 0)
             )
         )),
    ("Ordinal.succ_ne_self", "?i ~= succ ?i",
     template_negation
      (
         template_equation
          (template_var 0, template_app (template_hole 0, template_var 0))
         )),
    ("Ordinal.Not_Ord_hpair", "~ Ord <?x, ?y>",
     template_negation
      (
         template_predicate
          (
             template_app
              (template_hole 1,
               template_app
                (template_app (template_hole 0, template_var 1),
                 template_var 0))
             )
         )),
    ("Ordinal.nat_of_ord_ord_of", "nat_of_ord (ord_of ?n) = ?n",
     template_equation
      (template_app
        (template_hole 1, template_app (template_hole 0, template_var 0)),
       template_var 0)),
    ("Ordinal.one_neq_hpair", "1 ~= <?x, ?y>",
     template_negation
      (
         template_equation
          (template_hole 1,
           template_app
            (template_app (template_hole 0, template_var 1),
             template_var 0))
         )),
    ("Ordinal.hpair_neq_one", "<?x, ?y> ~= 1",
     template_negation
      (
         template_equation
          (template_app
            (template_app (template_hole 1, template_var 1),
             template_var 0),
           template_hole 0)
         )),
    ("Ordinal.Ord_succ_iff", "Ord (succ ?k) = Ord ?k",
     template_equation
      (template_app
        (template_hole 1, template_app (template_hole 0, template_var 0)),
       template_app (template_hole 1, template_var 0))),
    ("Ordinal.succ_neq_hpair", "succ ?k ~= <?x, ?y>",
     template_negation
      (
         template_equation
          (template_app (template_hole 1, template_var 2),
           template_app
            (template_app (template_hole 0, template_var 1),
             template_var 0))
         )),
    ("Ordinal.hpair_neq_succ", "<?x, ?y> ~= succ ?k",
     template_negation
      (
         template_equation
          (template_app
            (template_app (template_hole 1, template_var 2),
             template_var 1),
           template_app (template_hole 0, template_var 0))
         )),
    ("Ordinal.ord_rec_0", "ord_rec ?T ?G ?H 0 = ?T",
     template_equation
      (template_app
        (template_app
          (template_app
            (template_app (template_hole 1, template_var 2),
             template_var 1),
           template_var 0),
         template_hole 0),
       template_var 2)),
    ("Ordinal.zero_hmem_one", "(?x <: 1) = (?x = 0)",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 3, template_var 0),
              template_hole 2)
            )],
       template_equation (template_var 0, template_hole 0))),
    ("Ordinal.Ord_succ", "Ord ?k ==> Ord (succ ?k)",
     template_implication
      ([template_predicate
         (template_app (template_hole 1, template_var 0))],
       template_predicate
        (
           template_app
            (template_hole 1,
             template_app (template_hole 0, template_var 0))
           ))),
    ("Ordinal.Ord_not_hpair", "Ord ?x ==> ~ is_hpair ?x",
     template_implication
      ([template_predicate
         (template_app (template_hole 2, template_var 0))],
       template_negation
        (
           template_predicate
            (template_app (template_hole 0, template_var 0))
           ))),
    ("Ordinal.bij_betw_ord_of",
     "bij_betw ord_of {0..<?n} (hfset (ord_of ?n))",
     template_predicate
      (
         template_app
          (template_app
            (template_app (template_hole 4, template_hole 3),
             template_app
              (template_app (template_hole 2, template_hole 1),
               template_var 0)),
           template_app
            (template_hole 0,
             template_app (template_hole 3, template_var 0)))
         )),
    ("Ordinal.ord_recp_total", "EX y. ord_recp ?T ?G ?H ?x y",
     template_predicate (template_app (template_hole 1, t_empty))),
    ("Ordinal.hball_One", "HBall 1 ?P = ?P 0",
     template_equation
      (template_app
        (template_app (template_hole 2, template_hole 1), t_empty),
       template_app (template_var 0, template_hole 0))),
    ("Ordinal.hbex_One", "HBex 1 ?P = ?P 0",
     template_equation
      (template_app
        (template_app (template_hole 2, template_hole 1), t_empty),
       template_app (template_var 0, template_hole 0))),
    ("Ordinal.zero_in_succ", "Ord ?i ==> 0 <: succ ?i",
     template_implication
      ([template_predicate
         (template_app (template_hole 3, template_var 0))],
       template_predicate
        (
           template_app
            (template_app (template_hole 2, template_hole 1),
             template_app (template_hole 0, template_var 0))
           ))),
    ("Ordinal.hfset_ord_of", "hfset (ord_of ?n) = ord_of ` {0..<?n}",
     template_equation
      (template_app
        (template_hole 4, template_app (template_hole 3, template_var 0)),
       template_app
        (template_app (template_hole 2, template_hole 3),
         template_app
          (template_app (template_hole 1, template_hole 0),
           template_var 0)))),
    ("Ordinal.ord_of_inject", "(ord_of ?i = ord_of ?j) = (?i = ?j)",
     template_bimplication
      (template_equation
        (template_app (template_hole 1, template_var 1),
         template_app (template_hole 1, template_var 0)),
       template_equation (template_var 1, template_var 0))),
    ("Ordinal.succ_inject_iff", "(succ ?i = succ ?j) = (?i = ?j)",
     template_bimplication
      (template_equation
        (template_app (template_hole 0, template_var 1),
         template_app (template_hole 0, template_var 0)),
       template_equation (template_var 1, template_var 0))),
    ("Ordinal.hfunction_insf", "hfunction ?s ==> hfunction (insf ?s ?k ?y)",
     template_implication
      ([template_predicate
         (template_app (template_hole 1, template_var 2))],
       template_predicate
        (
           template_app
            (template_hole 1,
             template_app
              (template_app
                (template_app (template_hole 0, template_var 2),
                 template_var 1),
               template_var 0))
           ))),
    ("Ordinal.Ord_Sup_succ_eq", "Ord ?k ==> \<Squnion>succ ?k = ?k",
     template_implication
      ([template_predicate
         (template_app (template_hole 3, template_var 0))],
       template_equation
        (template_app
          (template_hole 1, template_app (template_hole 0, template_var 0)),
         template_var 0))),
    ("Ordinal.ord_of_nat_of_ord", "Ord ?x ==> ord_of (nat_of_ord ?x) = ?x",
     template_implication
      ([template_predicate
         (template_app (template_hole 3, template_var 0))],
       template_equation
        (template_app
          (template_hole 1, template_app (template_hole 0, template_var 0)),
         template_var 0))),
    ("Ordinal.hmem_succ", "?l <: ?k ==> ?l <: succ ?k",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 1, template_var 1),
              template_var 0)
            )],
       template_predicate
        (
           template_app
            (template_app (template_hole 1, template_var 1),
             template_app (template_hole 0, template_var 0))
           ))),
    ("Ordinal.Seq_succ_D", "Seq ?s (succ ?k) ==> Seq ?s ?k",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 1, template_var 1),
              template_app (template_hole 0, template_var 0))
            )],
       template_predicate
        (
           template_app
            (template_app (template_hole 1, template_var 1), template_var 0)
           ))),
    ("Ordinal.hpair_neq_Ord'", "Ord ?k ==> ?k ~= <?x, ?y>",
     template_implication
      ([template_predicate
         (template_app (template_hole 3, template_var 2))],
       template_negation
        (
           template_equation
            (template_var 2,
             template_app
              (template_app (template_hole 0, template_var 1),
               template_var 0))
           ))),
    ("Ordinal.hpair_neq_Ord", "Ord ?k ==> <?x, ?y> ~= ?k",
     template_implication
      ([template_predicate
         (template_app (template_hole 3, template_var 2))],
       template_negation
        (
           template_equation
            (template_app
              (template_app (template_hole 0, template_var 1),
               template_var 0),
             template_var 2)
           ))),
    ("Ordinal.hmem_succ_ne", "succ ?x <: ?y ==> ?x ~= ?y",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_hole 3,
                template_app (template_hole 2, template_var 1)),
              template_var 0)
            )],
       template_negation
        (template_equation (template_var 1, template_var 0)))),
    ("Ordinal.nonrestrictD", "?a <: nonrestrict ?s ?X ==> ?a <: ?s",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 1, template_var 2),
              template_app
               (template_app (template_hole 0, template_var 1),
                template_var 0))
            )],
       template_predicate
        (
           template_app
            (template_app (template_hole 1, template_var 2), template_var 1)
           ))),
    ("Ordinal.le_succE", "succ ?i <= succ ?j ==> ?i <= ?j",
     template_implication
      ([template_inequation
         (less_equals, template_app (template_hole 0, template_var 1),
          template_app (template_hole 0, template_var 0))],
       template_inequation (less_equals, template_var 1, template_var 0))),
    ("Ordinal.zero_in_Ord", "Ord ?k ==> ?k = 0 | 0 <: ?k",
     template_implication
      ([template_predicate
         (template_app (template_hole 4, template_var 0))],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 3,
               template_app
                (template_app (template_hole 2, template_var 0),
                 template_hole 1)),
             template_app
              (template_app (template_hole 0, template_hole 1),
               template_var 0))
           ))),
    ("Ordinal.nat_of_ord_succ",
     "Ord ?x ==> nat_of_ord (succ ?x) = Suc (nat_of_ord ?x)",
     template_implication
      ([template_predicate
         (template_app (template_hole 4, template_var 0))],
       template_equation
        (template_app
          (template_hole 2, template_app (template_hole 1, template_var 0)),
         template_app
          (template_hole 0,
           template_app (template_hole 2, template_var 0))))),
    ("Ordinal.Seq_restr", "Seq ?s (succ ?k) ==> Seq (hrestrict ?s ?k) ?k",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 2, template_var 1),
              template_app (template_hole 1, template_var 0))
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 2,
               template_app
                (template_app (template_hole 0, template_var 1),
                 template_var 0)),
             template_var 0)
           ))),
    ("Ordinal.Ord_in_Ord", "[| Ord ?k; ?m <: ?k |] ==> Ord ?m",
     template_implication
      ([template_predicate (template_app (template_hole 1, template_var 1)),
        template_predicate
         (
            template_app
             (template_app (template_hole 0, template_var 0),
              template_var 1)
            )],
       template_predicate
        (template_app (template_hole 1, template_var 0)))),
    ("Ordinal.succ_iff", "(?x <: succ ?y) = (?x = ?y | ?x <: ?y)",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 3, template_var 1),
              template_app (template_hole 2, template_var 0))
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 1,
               template_app
                (template_app (template_hole 0, template_var 1),
                 template_var 0)),
             template_app
              (template_app (template_hole 3, template_var 1),
               template_var 0))
           ))),
    ("Ordinal.Seq_insf", "Seq ?s ?k ==> Seq (insf ?s ?k ?y) (succ ?k)",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 2, template_var 2),
              template_var 1)
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 2,
               template_app
                (template_app
                  (template_app (template_hole 1, template_var 2),
                   template_var 1),
                 template_var 0)),
             template_app (template_hole 0, template_var 1))
           ))),
    ("Ordinal.OrdmemD", "[| Ord ?k; ?j <: ?k |] ==> ?j <= ?k",
     template_implication
      ([template_predicate (template_app (template_hole 2, template_var 1)),
        template_predicate
         (
            template_app
             (template_app (template_hole 1, template_var 0),
              template_var 1)
            )],
       template_inequation (less_equals, template_var 0, template_var 1))),
    ("Ordinal.Transset_inf",
     "[| Transset ?x; Transset ?y |] ==> Transset (?x \<sqinter> ?y)",
     template_implication
      ([template_predicate (template_app (template_hole 1, template_var 1)),
        template_predicate
         (template_app (template_hole 1, template_var 0))],
       template_predicate
        (
           template_app
            (template_hole 1,
             template_app
              (template_app (template_hole 0, template_var 1),
               template_var 0))
           ))),
    ("Ordinal.Transset_sup",
     "[| Transset ?x; Transset ?y |] ==> Transset (?x \<squnion> ?y)",
     template_implication
      ([template_predicate (template_app (template_hole 1, template_var 1)),
        template_predicate
         (template_app (template_hole 1, template_var 0))],
       template_predicate
        (
           template_app
            (template_hole 1,
             template_app
              (template_app (template_hole 0, template_var 1),
               template_var 0))
           ))),
    ("Ordinal.mem_succ_iff", "Ord ?j ==> (succ ?i <: succ ?j) = (?i <: ?j)",
     template_implication
      ([template_predicate
         (template_app (template_hole 3, template_var 1))],
       template_equation
        (template_app
          (template_app
            (template_hole 1,
             template_app (template_hole 0, template_var 0)),
           template_app (template_hole 0, template_var 1)),
         template_app
          (template_app (template_hole 1, template_var 0),
           template_var 1)))),
    ("Ordinal.ord_rec_non", "~ Ord ?x ==> ord_rec ?T ?G ?H ?x = ?H ?x",
     template_implication
      ([template_negation
         (
            template_predicate
             (template_app (template_hole 2, template_var 3))
            )],
       template_equation
        (template_app
          (template_app
            (template_app
              (template_app (template_hole 0, template_var 2),
               template_var 1),
             template_var 0),
           template_var 3),
         template_app (template_var 0, template_var 3)))),
    ("Ordinal.ord_of_minus_1",
     "0 < ?n ==> ord_of ?n = succ (ord_of (?n - 1))",
     template_implication
      ([template_inequation (less_than, template_hole 5, template_var 0)],
       template_equation
        (template_app (template_hole 3, template_var 0),
         template_app
          (template_hole 2,
           template_app
            (template_hole 3,
             template_app
              (template_app (template_hole 1, template_var 0),
               template_hole 0)))))),
    ("Ordinal.app_insf_Seq", "Seq ?s ?k ==> app (insf ?s ?k ?y) ?k = ?y",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 3, template_var 2),
              template_var 1)
            )],
       template_equation
        (template_app
          (template_app
            (template_hole 1,
             template_app
              (template_app
                (template_app (template_hole 0, template_var 2),
                 template_var 1),
               template_var 0)),
           template_var 1),
         template_var 0))),
    ("Ordinal.hmem_0_Ord", "[| Ord ?k; ?k ~= 0 |] ==> 0 <: ?k",
     template_implication
      ([template_predicate (template_app (template_hole 4, template_var 0)),
        template_negation
         (template_equation (template_var 0, template_hole 1))],
       template_predicate
        (
           template_app
            (template_app (template_hole 0, template_hole 1),
             template_var 0)
           ))),
    ("Ordinal.Transset_hinsert",
     "[| Transset ?x; ?y <= ?x |] ==> Transset (?x \<triangleleft> ?y)",
     template_implication
      ([template_predicate (template_app (template_hole 2, template_var 1)),
        template_inequation (less_equals, template_var 0, template_var 1)],
       template_predicate
        (
           template_app
            (template_hole 2,
             template_app
              (template_app (template_hole 0, template_var 0),
               template_var 1))
           ))),
    ("Ordinal.Seq_succ_insf",
     "Seq ?s (succ ?k) ==> EX y. ?s = insf ?s ?k y",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 4, template_var 1),
              template_app (template_hole 3, template_var 0))
            )],
       template_predicate (template_app (template_hole 2, t_empty)))),
    ("Ordinal.Ord_Inter", "(!!i. i <: ?A ==> Ord i) ==> Ord (\<Sqinter>?A)",
     template_implication
      ([template_predicate (template_app (template_hole 4, t_empty))],
       template_predicate
        (
           template_app
            (template_hole 1,
             template_app (template_hole 0, template_var 0))
           ))),
    ("Ordinal.Ord_Union", "(!!i. i <: ?A ==> Ord i) ==> Ord (\<Squnion>?A)",
     template_implication
      ([template_predicate (template_app (template_hole 4, t_empty))],
       template_predicate
        (
           template_app
            (template_hole 1,
             template_app (template_hole 0, template_var 0))
           ))),
    ("Ordinal.hball_succ", "HBall (succ ?k) ?P = (?P ?k & HBall ?k ?P)",
     template_equation
      (template_app
        (template_app
          (template_hole 2, template_app (template_hole 1, template_var 1)),
         t_empty),
       template_app
        (template_app
          (template_hole 0, template_app (template_var 0, template_var 1)),
         template_app
          (template_app (template_hole 2, template_var 1), t_empty)))),
    ("Ordinal.hbex_succ", "HBex (succ ?k) ?P = (?P ?k | HBex ?k ?P)",
     template_equation
      (template_app
        (template_app
          (template_hole 2, template_app (template_hole 1, template_var 1)),
         t_empty),
       template_app
        (template_app
          (template_hole 0, template_app (template_var 0, template_var 1)),
         template_app
          (template_app (template_hole 2, template_var 1), t_empty)))),
    ("Ordinal.Ord_mem_iff_lt",
     "[| Ord ?k; Ord ?l |] ==> (?k <: ?l) = (?k < ?l)",
     template_implication
      ([template_predicate (template_app (template_hole 3, template_var 1)),
        template_predicate
         (template_app (template_hole 3, template_var 0))],
       template_equation
        (template_app
          (template_app (template_hole 1, template_var 1), template_var 0),
         template_app
          (template_app (template_hole 0, template_var 1),
           template_var 0)))),
    ("Ordinal.Ord_pred",
     "[| Ord ?k; ?k ~= 0 |] ==> succ (\<Squnion>?k) = ?k",
     template_implication
      ([template_predicate (template_app (template_hole 5, template_var 0)),
        template_negation
         (template_equation (template_var 0, template_hole 2))],
       template_equation
        (template_app
          (template_hole 1, template_app (template_hole 0, template_var 0)),
         template_var 0))),
    ("Ordinal.Seq_succ_iff",
     "Seq ?s (succ ?k) = (Seq ?s ?k & (EX y. <?k, y> <: ?s))",
     template_equation
      (template_app
        (template_app (template_hole 5, template_var 1),
         template_app (template_hole 4, template_var 0)),
       template_app
        (template_app
          (template_hole 3,
           template_app
            (template_app (template_hole 5, template_var 1),
             template_var 0)),
         template_app (template_hole 2, t_empty)))),
    ("Ordinal.bij_betw_ord_ofI",
     "bij_betw ?h ?A {0..<?n} ==>
      bij_betw (ord_of o ?h) ?A (hfset (ord_of ?n))",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app (template_hole 6, template_var 2),
                template_var 1),
              template_app
               (template_app (template_hole 5, template_hole 4),
                template_var 0))
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_app
                (template_hole 3,
                 template_app
                  (template_app (template_hole 2, template_hole 1),
                   template_var 2)),
               template_var 1),
             template_app
              (template_hole 0,
               template_app (template_hole 1, template_var 0)))
           ))),
    ("Ordinal.Ord_lt_succ_iff_le",
     "[| Ord ?k; Ord ?l |] ==> (?k < succ ?l) = (?k <= ?l)",
     template_implication
      ([template_predicate (template_app (template_hole 4, template_var 1)),
        template_predicate
         (template_app (template_hole 4, template_var 0))],
       template_equation
        (template_app
          (template_app (template_hole 2, template_var 1),
           template_app (template_hole 1, template_var 0)),
         template_app
          (template_app (template_hole 0, template_var 1),
           template_var 0)))),
    ("Ordinal.ord_rec_succ",
     "Ord ?k ==> ord_rec ?T ?G ?H (succ ?k) = ?G (ord_rec ?T ?G ?H ?k)",
     template_implication
      ([template_predicate
         (template_app (template_hole 3, template_var 3))],
       template_equation
        (template_app
          (template_app
            (template_app
              (template_app (template_hole 1, template_var 2),
               template_var 1),
             template_var 0),
           template_app (template_hole 0, template_var 3)),
         template_app
          (template_var 1,
           template_app
            (template_app
              (template_app
                (template_app (template_hole 1, template_var 2),
                 template_var 1),
               template_var 0),
             template_var 3))))),
    ("Ordinal.le_succ_iff",
     "[| Ord ?i; Ord ?j |] ==> (succ ?i <= succ ?j) = (?i <= ?j)",
     template_implication
      ([template_predicate (template_app (template_hole 3, template_var 1)),
        template_predicate
         (template_app (template_hole 3, template_var 0))],
       template_equation
        (template_app
          (template_app
            (template_hole 1,
             template_app (template_hole 0, template_var 1)),
           template_app (template_hole 0, template_var 0)),
         template_app
          (template_app (template_hole 1, template_var 1),
           template_var 0)))),
    ("Ordinal.nat_of_ord_inject",
     "[| Ord ?x; Ord ?y |] ==> (nat_of_ord ?x = nat_of_ord ?y) = (?x = ?y)",
     template_implication
      ([template_predicate (template_app (template_hole 4, template_var 1)),
        template_predicate
         (template_app (template_hole 4, template_var 0))],
       template_bimplication
        (template_equation
          (template_app (template_hole 1, template_var 1),
           template_app (template_hole 1, template_var 0)),
         template_equation (template_var 1, template_var 0)))),
    ("Ordinal.Seq_imp_eq_app",
     "[| Seq ?s ?d; <?x, ?y> <: ?s |] ==> app ?s ?x = ?y",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 4, template_var 3),
              template_var 2)
            ),
        template_predicate
         (
            template_app
             (template_app
               (template_hole 3,
                template_app
                 (template_app (template_hole 2, template_var 1),
                  template_var 0)),
              template_var 3)
            )],
       template_equation
        (template_app
          (template_app (template_hole 0, template_var 3), template_var 1),
         template_var 0))),
    ("Ordinal.Ord_trans", "[| ?i <: ?j; ?j <: ?k; Ord ?k |] ==> ?i <: ?k",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 1, template_var 2),
              template_var 1)
            ),
        template_predicate
         (
            template_app
             (template_app (template_hole 1, template_var 1),
              template_var 0)
            ),
        template_predicate
         (template_app (template_hole 0, template_var 0))],
       template_predicate
        (
           template_app
            (template_app (template_hole 1, template_var 2), template_var 0)
           ))),
    ("Ordinal.Seq_Ord_D", "[| Seq ?s ?k; ?l <: ?k; Ord ?k |] ==> Seq ?s ?l",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 2, template_var 2),
              template_var 1)
            ),
        template_predicate
         (
            template_app
             (template_app (template_hole 1, template_var 0),
              template_var 1)
            ),
        template_predicate
         (template_app (template_hole 0, template_var 1))],
       template_predicate
        (
           template_app
            (template_app (template_hole 2, template_var 2), template_var 0)
           ))),
    ("Ordinal.hpair_in_nonrestrict_iff",
     "(<?a, ?b> <: nonrestrict ?s ?X) =
      (<?a, ?b> <: ?s & ?a \<^bold>\<notin> ?X)",
     template_equation
      (template_app
        (template_app
          (template_hole 4,
           template_app
            (template_app (template_hole 3, template_var 3),
             template_var 2)),
         template_app
          (template_app (template_hole 2, template_var 1), template_var 0)),
       template_app
        (template_app
          (template_hole 1,
           template_app
            (template_app
              (template_hole 4,
               template_app
                (template_app (template_hole 3, template_var 3),
                 template_var 2)),
             template_var 1)),
         template_app
          (template_hole 0,
           template_app
            (template_app (template_hole 4, template_var 3),
             template_var 0))))),
    ("Ordinal.Ord_mem_succ_cases",
     "[| Ord ?k; ?l <: ?k |] ==> succ ?l = ?k | succ ?l <: ?k",
     template_implication
      ([template_predicate (template_app (template_hole 4, template_var 1)),
        template_predicate
         (
            template_app
             (template_app (template_hole 3, template_var 0),
              template_var 1)
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 2,
               template_app
                (template_app
                  (template_hole 1,
                   template_app (template_hole 0, template_var 0)),
                 template_var 1)),
             template_app
              (template_app
                (template_hole 3,
                 template_app (template_hole 0, template_var 0)),
               template_var 1))
           ))),
    ("Ordinal.Ord_linear",
     "[| Ord ?k; Ord ?l |] ==> ?k <: ?l | ?k = ?l | ?l <: ?k",
     template_implication
      ([template_predicate (template_app (template_hole 3, template_var 1)),
        template_predicate
         (template_app (template_hole 3, template_var 0))],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 2,
               template_app
                (template_app (template_hole 1, template_var 1),
                 template_var 0)),
             template_app
              (template_app
                (template_hole 2,
                 template_app
                  (template_app (template_hole 0, template_var 1),
                   template_var 0)),
               template_app
                (template_app (template_hole 1, template_var 0),
                 template_var 1)))
           ))),
    ("Ordinal.ord_recp_functional",
     "[| ord_recp ?T ?G ?H ?x ?y; ord_recp ?T ?G ?H ?x ?y' |] ==> ?y' = ?y",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_app
                   (template_app (template_hole 1, template_var 5),
                    template_var 4),
                  template_var 3),
                template_var 2),
              template_var 1)
            ),
        template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_app
                   (template_app (template_hole 1, template_var 5),
                    template_var 4),
                  template_var 3),
                template_var 2),
              template_var 0)
            )],
       template_equation (template_var 0, template_var 1))),
    ("Ordinal.Seq_Ord_restr",
     "[| Seq ?s ?k; ?l <: ?k; Ord ?k |] ==> Seq (hrestrict ?s ?l) ?l",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 3, template_var 2),
              template_var 1)
            ),
        template_predicate
         (
            template_app
             (template_app (template_hole 2, template_var 0),
              template_var 1)
            ),
        template_predicate
         (template_app (template_hole 1, template_var 1))],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 3,
               template_app
                (template_app (template_hole 0, template_var 2),
                 template_var 0)),
             template_var 0)
           ))),
    ("Ordinal.app_insf_Seq_if",
     "Seq ?s ?k ==>
      app (insf ?s ?k ?y) ?k' = (if ?k' = ?k then ?y else app ?s ?k')",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 4, template_var 3),
              template_var 2)
            )],
       template_implication
        ([template_predicate
           (
              template_app
               (template_app
                 (template_hole 2,
                  template_app
                   (template_app
                     (template_app (template_hole 1, template_var 3),
                      template_var 2),
                    template_var 1)),
                template_var 0)
              )],
         template_predicate
          (
             template_app
              (template_app
                (template_app
                  (template_hole 0,
                   template_app
                    (template_app (template_hole 3, template_var 0),
                     template_var 2)),
                 template_var 1),
               template_app
                (template_app (template_hole 2, template_var 3),
                 template_var 0))
             )))),
    ("Ordinal.app_nonrestrict_Seq",
     "[| Seq ?s ?k; ?z \<^bold>\<notin> ?X |]
      ==> app (nonrestrict ?s ?X) ?z = app ?s ?z",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 5, template_var 3),
              template_var 2)
            ),
        template_negation
         (
            template_predicate
             (
                template_app
                 (template_app (template_hole 3, template_var 1),
                  template_var 0)
                )
            )],
       template_equation
        (template_app
          (template_app
            (template_hole 1,
             template_app
              (template_app (template_hole 0, template_var 3),
               template_var 0)),
           template_var 1),
         template_app
          (template_app (template_hole 1, template_var 3),
           template_var 1)))),
    ("Ordinal.Seq_ins",
     "[| Seq ?s ?k; ?k \<^bold>\<notin> hdomain ?s |]
      ==> Seq (?s \<triangleleft> <?k, ?y>) (succ ?k)",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 6, template_var 2),
              template_var 1)
            ),
        template_negation
         (
            template_predicate
             (
                template_app
                 (template_app (template_hole 4, template_var 1),
                  template_app (template_hole 3, template_var 2))
                )
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 6,
               template_app
                (template_app
                  (template_hole 2,
                   template_app
                    (template_app (template_hole 1, template_var 1),
                     template_var 0)),
                 template_var 2)),
             template_app (template_hole 0, template_var 1))
           ))),
    ("Ordinal.hunion_less_iff",
     "[| Ord ?i; Ord ?j |]
      ==> (?i \<squnion> ?j < ?k) = (?i < ?k & ?j < ?k)",
     template_implication
      ([template_predicate (template_app (template_hole 4, template_var 2)),
        template_predicate
         (template_app (template_hole 4, template_var 1))],
       template_equation
        (template_app
          (template_app
            (template_hole 2,
             template_app
              (template_app (template_hole 1, template_var 2),
               template_var 1)),
           template_var 0),
         template_app
          (template_app
            (template_hole 0,
             template_app
              (template_app (template_hole 2, template_var 2),
               template_var 0)),
           template_app
            (template_app (template_hole 2, template_var 1),
             template_var 0))))),
    ("Ordinal.Seq_iff_app",
     "[| Seq ?s ?d; ?x <: ?d |] ==> (<?x, ?y> <: ?s) = (app ?s ?x = ?y)",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 5, template_var 3),
              template_var 2)
            ),
        template_predicate
         (
            template_app
             (template_app (template_hole 4, template_var 1),
              template_var 2)
            )],
       template_implication
        ([template_predicate
           (
              template_app
               (template_app
                 (template_hole 4,
                  template_app
                   (template_app (template_hole 2, template_var 1),
                    template_var 0)),
                template_var 3)
              )],
         template_equation
          (template_app
            (template_app (template_hole 0, template_var 3),
             template_var 1),
           template_var 0)))),
    ("Ordinal.app_insf2_Seq",
     "[| Seq ?s ?k; ?k' ~= ?k |] ==> app (insf ?s ?k ?y) ?k' = app ?s ?k'",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 4, template_var 3),
              template_var 2)
            ),
        template_negation
         (template_equation (template_var 1, template_var 2))],
       template_equation
        (template_app
          (template_app
            (template_hole 1,
             template_app
              (template_app
                (template_app (template_hole 0, template_var 3),
                 template_var 2),
               template_var 0)),
           template_var 1),
         template_app
          (template_app (template_hole 1, template_var 3),
           template_var 1)))),
    ("Ordinal.hmem_Inf_Ords",
     "[| ?A ~= 0; !!i. i <: ?A ==> Ord i |] ==> \<Sqinter>?A <: ?A",
     template_implication
      ([template_negation
         (template_equation (template_var 0, template_hole 4)),
        template_predicate (template_app (template_hole 3, t_empty))],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 2,
               template_app (template_hole 0, template_var 0)),
             template_var 0)
           ))),
    ("Ordinal.hmem_Sup_Ords",
     "[| ?A ~= 0; !!i. i <: ?A ==> Ord i |] ==> \<Squnion>?A <: ?A",
     template_implication
      ([template_negation
         (template_equation (template_var 0, template_hole 4)),
        template_predicate (template_app (template_hole 3, t_empty))],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 2,
               template_app (template_hole 0, template_var 0)),
             template_var 0)
           ))),
    ("Ordinal.Ord_trans2",
     "[| ?i2.0 <: ?i; ?i <: ?j; ?j <: ?k; Ord ?k |] ==> ?i2.0 <: ?k",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 1, template_var 3),
              template_var 2)
            ),
        template_predicate
         (
            template_app
             (template_app (template_hole 1, template_var 2),
              template_var 1)
            ),
        template_predicate
         (
            template_app
             (template_app (template_hole 1, template_var 1),
              template_var 0)
            ),
        template_predicate
         (template_app (template_hole 0, template_var 0))],
       template_predicate
        (
           template_app
            (template_app (template_hole 1, template_var 3), template_var 0)
           ))),
    ("Ordinal.succE",
     "[| ?x <: succ ?y; ?x = ?y ==> ?thesis; ?x <: ?y ==> ?thesis |]
      ==> ?thesis",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 2, template_var 2),
              template_app (template_hole 1, template_var 1))
            ),
        template_implication
         ([template_equation (template_var 2, template_var 1)],
          template_predicate (template_var 0)),
        template_implication
         ([template_predicate
            (
               template_app
                (template_app (template_hole 2, template_var 2),
                 template_var 1)
               )],
          template_predicate (template_var 0))],
       template_predicate (template_var 0))),
    ("Ordinal.ord_recp_succ_iff",
     "Ord ?k ==>
      ord_recp ?T ?G ?H (succ ?k) ?z =
      (EX y. ?z = ?G y & ord_recp ?T ?G ?H ?k y)",
     template_implication
      ([template_predicate
         (template_app (template_hole 6, template_var 4))],
       template_equation
        (template_app
          (template_app
            (template_app
              (template_app
                (template_app (template_hole 4, template_var 3),
                 template_var 2),
               template_var 1),
             template_app (template_hole 3, template_var 4)),
           template_var 0),
         template_app (template_hole 2, t_empty)))),
    ("Ordinal.Exists_iff_app",
     "[| Seq ?s ?d; ?x <: ?d |]
      ==> (EX y. <?x, y> <: ?s & ?P y) = ?P (app ?s ?x)",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 6, template_var 3),
              template_var 2)
            ),
        template_predicate
         (
            template_app
             (template_app (template_hole 5, template_var 1),
              template_var 2)
            )],
       template_equation
        (template_app (template_hole 3, t_empty),
         template_app
          (template_var 0,
           template_app
            (template_app (template_hole 0, template_var 3),
             template_var 1))))),
    ("Ordinal.Ord_induct2",
     "[| Ord ?k; ?P 0; !!k. [| Ord k; ?P k |] ==> ?P (succ k) |] ==> ?P ?k",
     template_implication
      ([template_predicate (template_app (template_hole 3, template_var 1)),
        template_predicate (template_app (template_var 0, template_hole 2)),
        template_predicate (template_app (template_hole 1, t_empty))],
       template_predicate (template_app (template_var 0, template_var 1)))),
    ("Ordinal.Ord_linear2",
     "[| Ord ?k; Ord ?l; ?k <: ?l ==> ?thesis; ?l <= ?k ==> ?thesis |]
      ==> ?thesis",
     template_implication
      ([template_predicate (template_app (template_hole 2, template_var 2)),
        template_predicate (template_app (template_hole 2, template_var 1)),
        template_implication
         ([template_predicate
            (
               template_app
                (template_app (template_hole 1, template_var 2),
                 template_var 1)
               )],
          template_predicate (template_var 0)),
        template_implication
         ([template_inequation
            (less_equals, template_var 1, template_var 2)],
          template_predicate (template_var 0))],
       template_predicate (template_var 0))),
    ("Ordinal.Ord_linear_le",
     "[| Ord ?k; Ord ?l; ?k <= ?l ==> ?thesis; ?l <= ?k ==> ?thesis |]
      ==> ?thesis",
     template_implication
      ([template_predicate (template_app (template_hole 1, template_var 2)),
        template_predicate (template_app (template_hole 1, template_var 1)),
        template_implication
         ([template_inequation
            (less_equals, template_var 2, template_var 1)],
          template_predicate (template_var 0)),
        template_implication
         ([template_inequation
            (less_equals, template_var 1, template_var 2)],
          template_predicate (template_var 0))],
       template_predicate (template_var 0))),
    ("Ordinal.Ord_induct",
     "[| Ord ?k; !!x. [| Ord x; !!y. y <: x ==> ?P y |] ==> ?P x |]
      ==> ?P ?k",
     template_implication
      ([template_predicate (template_app (template_hole 2, template_var 1)),
        template_predicate (template_app (template_hole 1, t_empty))],
       template_predicate (template_app (template_var 0, template_var 1)))),
    ("Ordinal.Ord_cases",
     "[| Ord ?k; ?k = 0 ==> ?thesis;
         !!l. [| Ord l; succ l = ?k |] ==> ?thesis |]
      ==> ?thesis",
     template_implication
      ([template_predicate (template_app (template_hole 4, template_var 1)),
        template_implication
         ([template_equation (template_var 1, template_hole 2)],
          template_predicate (template_var 0)),
        template_predicate (template_app (template_hole 1, t_empty))],
       template_predicate (template_var 0))),
    ("Ordinal.ord_rec_Seq_functional",
     "[| Ord ?k; ?k ~= 0; ord_rec_Seq ?T ?G ?s ?k ?y;
         ord_rec_Seq ?T ?G ?s' ?k ?y' |]
      ==> ?y' = ?y",
     template_implication
      ([template_predicate (template_app (template_hole 4, template_var 6)),
        template_negation
         (template_equation (template_var 6, template_hole 1)),
        template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_app
                   (template_app (template_hole 0, template_var 5),
                    template_var 4),
                  template_var 3),
                template_var 6),
              template_var 2)
            ),
        template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_app
                   (template_app (template_hole 0, template_var 5),
                    template_var 4),
                  template_var 1),
                template_var 6),
              template_var 0)
            )],
       template_equation (template_var 0, template_var 2))),
    ("Ordinal.Ord_linear_lt",
     "[| Ord ?k; Ord ?l; ?k <: ?l ==> ?thesis; ?k = ?l ==> ?thesis;
         ?l <: ?k ==> ?thesis |]
      ==> ?thesis",
     template_implication
      ([template_predicate (template_app (template_hole 2, template_var 2)),
        template_predicate (template_app (template_hole 2, template_var 1)),
        template_implication
         ([template_predicate
            (
               template_app
                (template_app (template_hole 1, template_var 2),
                 template_var 1)
               )],
          template_predicate (template_var 0)),
        template_implication
         ([template_equation (template_var 2, template_var 1)],
          template_predicate (template_var 0)),
        template_implication
         ([template_predicate
            (
               template_app
                (template_app (template_hole 1, template_var 1),
                 template_var 2)
               )],
          template_predicate (template_var 0))],
       template_predicate (template_var 0))),
    ("Ordinal.ord_rec_Seq_succ_iff",
     "[| Ord ?k; ?k ~= 0 |]
      ==> ord_rec_Seq ?T ?G ?s (succ ?k) ?z =
          (EX s' y.
              ord_rec_Seq ?T ?G s' ?k y & ?z = ?G y & ?s = insf s' ?k y)",
     template_implication
      ([template_predicate (template_app (template_hole 9, template_var 4)),
        template_negation
         (template_equation (template_var 4, template_hole 6))],
       template_equation
        (template_app
          (template_app
            (template_app
              (template_app
                (template_app (template_hole 4, template_var 3),
                 template_var 2),
               template_var 1),
             template_app (template_hole 3, template_var 4)),
           template_var 0),
         template_app (template_hole 2, t_empty))))]:
   (string * thm * template) list
### theory "Draft.OrdinalMoreTemplates"
### 0.398s elapsed time, 0.580s cpu time, 0.088s GC time
val it = (): unit
