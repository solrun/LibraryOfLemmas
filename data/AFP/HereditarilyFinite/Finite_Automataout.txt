Loading theory "HOL-Library.Function_Algebras" (required by "Draft.Finite_AutomataMoreTemplates" via "Draft.ExtrEqs" via "HOL-Library.BigO")
Loading theory "HOL-Library.Nat_Bijection" (required by "Draft.Finite_AutomataMoreTemplates" via "Draft.ExtrEqs" via "HOL-Library.Stream")
Loading theory "HOL-Library.Set_Algebras" (required by "Draft.Finite_AutomataMoreTemplates" via "Draft.ExtrEqs" via "HOL-Library.BigO")
Loading theory "HOL-Library.Tree" (required by "Draft.Finite_AutomataMoreTemplates" via "Draft.ExtrEqs" via "Draft.Templates")
instantiation
  fun :: (type, plus) plus
  plus_fun == plus :: ('a => 'b) => ('a => 'b) => 'a => 'b
instantiation
  set :: (plus) plus
  plus_set == plus :: 'a set => 'a set => 'a set
instantiation
  set :: (times) times
  times_set == times :: 'a set => 'a set => 'a set
instantiation
  fun :: (type, zero) zero
  zero_fun == zero_class.zero :: 'a => 'b
instantiation
  fun :: (type, times) times
  times_fun == times :: ('a => 'b) => ('a => 'b) => 'a => 'b
instantiation
  set :: (zero) zero
  zero_set == zero_class.zero :: 'a set
instantiation
  set :: (one) one
  one_set == one_class.one :: 'a set
instantiation
  fun :: (type, one) one
  one_fun == one_class.one :: 'a => 'b
Found termination order: "(%p. size (snd p)) <*mlex*> {}"
### theory "HOL-Library.Function_Algebras"
### 0.174s elapsed time, 0.715s cpu time, 0.058s GC time
Found termination order: "size_list size <*mlex*> {}"
### theory "HOL-Library.Set_Algebras"
### 0.261s elapsed time, 0.976s cpu time, 0.058s GC time
Loading theory "HOL-Library.BigO" (required by "Draft.Finite_AutomataMoreTemplates" via "Draft.ExtrEqs")
### theory "HOL-Library.Nat_Bijection"
### 0.360s elapsed time, 1.272s cpu time, 0.058s GC time
Loading theory "Draft.HF" (required by "Draft.Finite_AutomataMoreTemplates" via "Draft.Finite_Automata" via "Draft.Ordinal")
Loading theory "HOL-Library.Stream" (required by "Draft.Finite_AutomataMoreTemplates" via "Draft.ExtrEqs")
instantiation
  hf :: zero
  zero_hf == zero_class.zero :: hf
instantiation
  hf :: sup
  sup_hf == sup :: hf => hf => hf
instantiation
  hf :: inf
  inf_hf == inf :: hf => hf => hf
instantiation
  hf :: minus
  minus_hf == minus :: hf => hf => hf
instantiation
  hf :: order
  less_eq_hf == less_eq :: hf => hf => bool
  less_hf == less :: hf => hf => bool
consts
  left :: "'a tree => 'a tree"
instantiation
  hf :: distrib_lattice
instantiation
  hf :: bounded_lattice_bot
  bot_hf == bot :: hf
consts
  right :: "'a tree => 'a tree"
Found termination order: "size <*mlex*> {}"
Found termination order: "size <*mlex*> {}"
Found termination order: "size <*mlex*> {}"
class height = type +
  fixes height :: "'a => nat"
instantiation
  tree :: (type) height
  height_tree == height :: 'a tree => nat
instantiation
  hf :: times
  times_hf == times :: hf => hf => hf
consts
  shift :: "'a list => 'a stream => 'a stream"
instantiation
  hf :: mult_zero
instantiation
  hf :: zero_neq_one
  one_hf == one_class.one :: hf
instantiation
  hf :: plus
  plus_hf == plus :: hf => hf => hf
Proofs for coinductive predicate(s) "streamsp"
  Proving monotonicity ...
Found termination order: "size <*mlex*> {}"
### theory "Draft.HF"
### 0.771s elapsed time, 3.022s cpu time, 0.399s GC time
Loading theory "Draft.Ordinal" (required by "Draft.Finite_AutomataMoreTemplates" via "Draft.Finite_Automata")
Found termination order: "size <*mlex*> {}"
consts
  snth :: "'a stream => nat => 'a"
consts
  stake :: "nat => 'a stream => 'a list"
consts
  sdrop :: "nat => 'a stream => 'a stream"
Found termination order: "size <*mlex*> {}"
consts
  sfilter :: "('a => bool) => 'a stream => 'a stream"
Found termination order: "size <*mlex*> {}"
Found termination order: "size <*mlex*> {}"
consts
  cycle :: "'a list => 'a stream"
consts
  siterate :: "('a => 'a) => 'a => 'a stream"
Found termination order: "size <*mlex*> {}"
### theory "HOL-Library.BigO"
### 1.393s elapsed time, 5.183s cpu time, 1.066s GC time
consts
  flat :: "'a list stream => 'a stream"
### theory "Draft.Ordinal"
### 0.544s elapsed time, 1.914s cpu time, 0.667s GC time
Loading theory "Draft.Finite_Automata" (required by "Draft.Finite_AutomataMoreTemplates")
Found termination order: "size <*mlex*> {}"
consts
  sinterleave :: "'a stream => 'a stream => 'a stream"
consts
  szip :: "'a stream => 'b stream => ('a * 'b) stream"
Found termination order: "size <*mlex*> {}"
consts
  smap2 :: "('a => 'b => 'c) => 'a stream => 'b stream => 'c stream"
### theory "HOL-Library.Stream"
### 1.507s elapsed time, 5.544s cpu time, 1.174s GC time
Proofs for inductive predicate(s) "reaches"
Found termination order: "(%p. size (fst p)) <*mlex*> {}"
  Proving monotonicity ...
Found termination order: "size <*mlex*> {}"
Found termination order: "(%p. size (snd p)) <*mlex*> {}"
### theory "Draft.Finite_Automata"
### 0.349s elapsed time, 0.905s cpu time, 0.108s GC time
Found termination order: "size <*mlex*> {}"
### theory "HOL-Library.Tree"
### 2.401s elapsed time, 7.630s cpu time, 1.329s GC time
Loading theory "Draft.Templates" (required by "Draft.Finite_AutomataMoreTemplates" via "Draft.ExtrEqs")
datatype template_term
=
     t_empty
   | template_app of template_term * template_term
   | template_hole of int
   | template_var of int
datatype sign
= equals | greater_equals | greater_than | less_equals | less_than
datatype template
=
     template_bimplication of template * template
   | template_dunno
   | template_equation of template_term * template_term
   | template_implication of template list * template
   | template_inequation of sign * template_term * template_term
   | template_negation of template
   | template_predicate of template_term
constructor t_empty: template_term
constructor template_app: template_term * template_term -> template_term
constructor template_hole: int -> template_term
constructor template_var: int -> template_term
constructor equals: sign
constructor greater_equals: sign
constructor greater_than: sign
constructor less_equals: sign
constructor less_than: sign
constructor template_bimplication: template * template -> template
constructor template_dunno: template
constructor template_equation: template_term * template_term -> template
constructor template_implication: template list * template -> template
constructor template_inequation:
   sign * template_term * template_term -> template
constructor template_negation: template -> template
constructor template_predicate: template_term -> template
val vfs = fn: term -> (indexname * typ) list * (string * typ) list
val indexOf = fn: ''a list -> ''a -> int -> int
val has_eq = fn: term -> bool
val term2template = fn:
   (indexname * typ) list -> (string * typ) list -> term -> template_term
val lemma2predicate = fn: term -> term -> template
val makeTemplatewithContext = fn: term -> term -> template
val lemma2template = fn: term -> template
val thm2template = fn: thm -> template
val tterm2string = fn: template_term -> string
val template2string = fn: template -> string
val t = "height ?t <= size ?t": thm
val th =
   Const ("HOL.Trueprop", "bool => prop") $
     (Const ("Orderings.ord_class.less_eq", "nat => nat => bool") $
       (Const ("Tree.height_class.height", "?'a tree => nat") $
         Var (("t", 0), "?'a tree")) $
       (Const ("Nat.size_class.size", "?'a tree => nat") $
         Var (("t", 0), "?'a tree"))):
   term
### theory "Draft.Templates"
### 0.072s elapsed time, 0.131s cpu time, 0.059s GC time
Loading theory "Draft.ExtrEqs" (required by "Draft.Finite_AutomataMoreTemplates")
val eqpattern =
   Pattern
    (
       Const ("HOL.Trueprop", "bool => prop") $
         (Const ("HOL.eq", "?'a => ?'a => bool") $
           Var (("_dummy_", 1), "?'a") $ Var (("_dummy_", 2), "?'a"))
       ):
   term Find_Theorems.criterion
val badeqpattern = Pattern (Const ("Pure.eq", "?'a => ?'a => prop")):
   term Find_Theorems.criterion
val undefpattern =
   Pattern
    (
       Const ("HOL.Trueprop", "bool => prop") $
         (Const ("HOL.eq", "?'a => ?'a => bool") $
           Var (("_dummy_", 1), "?'a") $ Const ("HOL.undefined", "?'a"))
       ):
   term Find_Theorems.criterion
val thmpattern =
   Pattern
    (Const ("HOL.Trueprop", "bool => prop") $ Var (("_dummy_", 1), "bool")):
   term Find_Theorems.criterion
val badnames =
   ["*nitpick*", "*Nitpick*", "*full_exhaustive*", "*_def*", "Enum.finite*",
    "*Quickcheck*", "ATP*", "*Nunchaku*", "*Code*", "*BNF*", "*SMT*",
    "*.*.*"]:
   string list
val unwanted_names =
   [(false, Name "*nitpick*"), (false, Name "*Nitpick*"),
    (false, Name "*full_exhaustive*"), (false, Name "*_def*"),
    (false, Name "Enum.finite*"), (false, Name "*Quickcheck*"),
    (false, Name "ATP*"), (false, Name "*Nunchaku*"),
    (false, Name "*Code*"), (false, Name "*BNF*"), (false, Name "*SMT*"),
    (false, Name "*.*.*")]:
   (bool * term Find_Theorems.criterion) list
val has_vars = fn: term -> bool
val get_all_eqs = fn: string -> Proof.context -> (string * thm) list
val get_all_thms = fn: string -> Proof.context -> (string * thm) list
val get_noneq_thms = fn: string -> Proof.context -> (string * thm) list
val template_eqs = fn:
   string -> Proof.context -> (string * thm * template) list
val template_thms = fn:
   string -> Proof.context -> (string * thm * template) list
### theory "Draft.ExtrEqs"
### 0.545s elapsed time, 0.551s cpu time, 0.000s GC time
Loading theory "Draft.Finite_AutomataMoreTemplates"
val templateLemmas =
   [("Finite_Automata.Reverse_Reverse_ident",
     "Reverse (Reverse ?fsm) = ?fsm",
     template_equation
      (template_app
        (template_hole 0, template_app (template_hole 0, template_var 0)),
       template_var 0)),
    ("Finite_Automata.regular_singstr", "regular {[?a]}",
     template_predicate
      (
         template_app
          (template_hole 4,
           template_app
            (template_app
              (template_hole 3,
               template_app
                (template_app (template_hole 2, template_var 0),
                 template_hole 1)),
             template_hole 0))
         )),
    ("Finite_Automata.regular_rev", "regular ?S ==> regular (rev ` ?S)",
     template_implication
      ([template_predicate
         (template_app (template_hole 2, template_var 0))],
       template_predicate
        (
           template_app
            (template_hole 2,
             template_app
              (template_app (template_hole 1, template_hole 0),
               template_var 0))
           ))),
    ("Finite_Automata.final_Plus",
     "final (Plus ?fsm1.0 ?fsm2.0) = final ?fsm1.0 + final ?fsm2.0",
     template_equation
      (template_app
        (template_hole 4,
         template_app
          (template_app (template_hole 3, template_var 1), template_var 0)),
       template_app
        (template_app
          (template_hole 2, template_app (template_hole 1, template_var 1)),
         template_app (template_hole 0, template_var 0)))),
    ("Finite_Automata.final_Times",
     "final (Times ?fsm1.0 ?fsm2.0) = final ?fsm1.0 * final ?fsm2.0",
     template_equation
      (template_app
        (template_hole 4,
         template_app
          (template_app (template_hole 3, template_var 1), template_var 0)),
       template_app
        (template_app
          (template_hole 2, template_app (template_hole 1, template_var 1)),
         template_app (template_hole 0, template_var 0)))),
    ("Finite_Automata.init_Plus",
     "init (Plus ?fsm1.0 ?fsm2.0) = init ?fsm1.0 + init ?fsm2.0",
     template_equation
      (template_app
        (template_hole 4,
         template_app
          (template_app (template_hole 3, template_var 1), template_var 0)),
       template_app
        (template_app
          (template_hole 2, template_app (template_hole 1, template_var 1)),
         template_app (template_hole 0, template_var 0)))),
    ("Finite_Automata.init_Times",
     "init (Times ?fsm1.0 ?fsm2.0) = init ?fsm1.0 * init ?fsm2.0",
     template_equation
      (template_app
        (template_hole 4,
         template_app
          (template_app (template_hole 3, template_var 1), template_var 0)),
       template_app
        (template_app
          (template_hole 2, template_app (template_hole 1, template_var 1)),
         template_app (template_hole 0, template_var 0)))),
    ("Finite_Automata.states_Plus",
     "states (Plus ?fsm1.0 ?fsm2.0) = states ?fsm1.0 + states ?fsm2.0",
     template_equation
      (template_app
        (template_hole 4,
         template_app
          (template_app (template_hole 3, template_var 1), template_var 0)),
       template_app
        (template_app
          (template_hole 2, template_app (template_hole 1, template_var 1)),
         template_app (template_hole 0, template_var 0)))),
    ("Finite_Automata.states_Times",
     "states (Times ?fsm1.0 ?fsm2.0) = states ?fsm1.0 * states ?fsm2.0",
     template_equation
      (template_app
        (template_hole 4,
         template_app
          (template_app (template_hole 3, template_var 1), template_var 0)),
       template_app
        (template_app
          (template_hole 2, template_app (template_hole 1, template_var 1)),
         template_app (template_hole 0, template_var 0)))),
    ("Finite_Automata.regular_Int",
     "[| regular ?S; regular ?T |] ==> regular (?S Int ?T)",
     template_implication
      ([template_predicate (template_app (template_hole 1, template_var 1)),
        template_predicate
         (template_app (template_hole 1, template_var 0))],
       template_predicate
        (
           template_app
            (template_hole 1,
             template_app
              (template_app (template_hole 0, template_var 1),
               template_var 0))
           ))),
    ("Finite_Automata.regular_Un",
     "[| regular ?S; regular ?T |] ==> regular (?S Un ?T)",
     template_implication
      ([template_predicate (template_app (template_hole 1, template_var 1)),
        template_predicate
         (template_app (template_hole 1, template_var 0))],
       template_predicate
        (
           template_app
            (template_hole 1,
             template_app
              (template_app (template_hole 0, template_var 1),
               template_var 0))
           ))),
    ("Finite_Automata.accepts_Plus_iff",
     "accepts (Plus ?fsm1.0 ?fsm2.0) ?xs =
      (accepts ?fsm1.0 ?xs | accepts ?fsm2.0 ?xs)",
     template_equation
      (template_app
        (template_app
          (template_hole 2,
           template_app
            (template_app (template_hole 1, template_var 2),
             template_var 1)),
         template_var 0),
       template_app
        (template_app
          (template_hole 0,
           template_app
            (template_app (template_hole 2, template_var 2),
             template_var 0)),
         template_app
          (template_app (template_hole 2, template_var 1),
           template_var 0)))),
    ("Finite_Automata.accepts_Times_iff",
     "accepts (Times ?fsm1.0 ?fsm2.0) ?xs =
      (accepts ?fsm1.0 ?xs & accepts ?fsm2.0 ?xs)",
     template_equation
      (template_app
        (template_app
          (template_hole 2,
           template_app
            (template_app (template_hole 1, template_var 2),
             template_var 1)),
         template_var 0),
       template_app
        (template_app
          (template_hole 0,
           template_app
            (template_app (template_hole 2, template_var 2),
             template_var 0)),
         template_app
          (template_app (template_hole 2, template_var 1),
           template_var 0)))),
    ("Finite_Automata.reaches_Reverse_iff2",
     "reaches (Reverse ?fsm) ?st' ?xs ?st =
      reaches ?fsm ?st (rev ?xs) ?st'",
     template_equation
      (template_app
        (template_app
          (template_app
            (template_app
              (template_hole 2,
               template_app (template_hole 1, template_var 3)),
             template_var 2),
           template_var 1),
         template_var 0),
       template_app
        (template_app
          (template_app
            (template_app (template_hole 2, template_var 3),
             template_var 0),
           template_app (template_hole 0, template_var 1)),
         template_var 2))),
    ("Finite_Automata.reaches_Reverse_iff",
     "reaches (Reverse ?fsm) ?st (rev ?xs) ?st' =
      reaches ?fsm ?st' ?xs ?st",
     template_equation
      (template_app
        (template_app
          (template_app
            (template_app
              (template_hole 2,
               template_app (template_hole 1, template_var 3)),
             template_var 2),
           template_app (template_hole 0, template_var 1)),
         template_var 0),
       template_app
        (template_app
          (template_app
            (template_app (template_hole 2, template_var 3),
             template_var 0),
           template_var 1),
         template_var 2))),
    ("Finite_Automata.reaches_Nil",
     "reaches ?fsm ?st [] ?st' = (?st' = ?st & ?st <: states ?fsm)",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_app (template_hole 5, template_var 2),
                  template_var 1),
                template_hole 4),
              template_var 0)
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 3,
               template_app
                (template_app (template_hole 2, template_var 0),
                 template_var 1)),
             template_app
              (template_app (template_hole 1, template_var 1),
               template_app (template_hole 0, template_var 2)))
           ))),
    ("Finite_Automata.reaches_imp_states",
     "reaches ?fsm ?st ?xs ?st' ==>
      ?st <: states ?fsm & ?st' <: states ?fsm",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_app (template_hole 3, template_var 3),
                  template_var 2),
                template_var 1),
              template_var 0)
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 2,
               template_app
                (template_app (template_hole 1, template_var 2),
                 template_app (template_hole 0, template_var 3))),
             template_app
              (template_app (template_hole 1, template_var 0),
               template_app (template_hole 0, template_var 3)))
           ))),
    ("Finite_Automata.reaches_append_iff",
     "reaches ?fsm ?st (?xs @ ?ys) ?st' =
      (EX st''. reaches ?fsm ?st ?xs st'' & reaches ?fsm st'' ?ys ?st')",
     template_equation
      (template_app
        (template_app
          (template_app
            (template_app (template_hole 3, template_var 4),
             template_var 3),
           template_app
            (template_app (template_hole 2, template_var 2),
             template_var 1)),
         template_var 0),
       template_app (template_hole 1, t_empty))),
    ("Finite_Automata.next_Plus1",
     "next (Plus ?fsm1.0 ?fsm2.0) (HF.Inl ?st1.0) ?x ?st' =
      (EX st1'. ?st' = HF.Inl st1' & next ?fsm1.0 ?st1.0 ?x st1')",
     template_equation
      (template_app
        (template_app
          (template_app
            (template_app
              (template_hole 6,
               template_app
                (template_app (template_hole 5, template_var 4),
                 template_var 3)),
             template_app (template_hole 4, template_var 2)),
           template_var 1),
         template_var 0),
       template_app (template_hole 3, t_empty))),
    ("Finite_Automata.next_Plus2",
     "next (Plus ?fsm1.0 ?fsm2.0) (HF.Inr ?st2.0) ?x ?st' =
      (EX st2'. ?st' = HF.Inr st2' & next ?fsm2.0 ?st2.0 ?x st2')",
     template_equation
      (template_app
        (template_app
          (template_app
            (template_app
              (template_hole 6,
               template_app
                (template_app (template_hole 5, template_var 4),
                 template_var 3)),
             template_app (template_hole 4, template_var 2)),
           template_var 1),
         template_var 0),
       template_app (template_hole 3, t_empty))),
    ("Finite_Automata.reaches_Plus_iff2",
     "reaches (Plus ?fsm1.0 ?fsm2.0) (HF.Inr ?st2.0) ?xs ?st' =
      (EX st2'. ?st' = HF.Inr st2' & reaches ?fsm2.0 ?st2.0 ?xs st2')",
     template_equation
      (template_app
        (template_app
          (template_app
            (template_app
              (template_hole 5,
               template_app
                (template_app (template_hole 4, template_var 4),
                 template_var 3)),
             template_app (template_hole 3, template_var 2)),
           template_var 1),
         template_var 0),
       template_app (template_hole 2, t_empty))),
    ("Finite_Automata.reaches_Plus_iff1",
     "reaches (Plus ?fsm1.0 ?fsm2.0) (HF.Inl ?st1.0) ?xs ?st' =
      (EX st1'. ?st' = HF.Inl st1' & reaches ?fsm1.0 ?st1.0 ?xs st1')",
     template_equation
      (template_app
        (template_app
          (template_app
            (template_app
              (template_hole 5,
               template_app
                (template_app (template_hole 4, template_var 4),
                 template_var 3)),
             template_app (template_hole 3, template_var 2)),
           template_var 1),
         template_var 0),
       template_app (template_hole 2, t_empty))),
    ("Finite_Automata.reaches_Times_iff",
     "reaches (Times ?fsm1.0 ?fsm2.0) <?st1.0, ?st2.0> ?xs <?st1', ?st2'> =
      (reaches ?fsm1.0 ?st1.0 ?xs ?st1' &
       reaches ?fsm2.0 ?st2.0 ?xs ?st2')",
     template_equation
      (template_app
        (template_app
          (template_app
            (template_app
              (template_hole 3,
               template_app
                (template_app (template_hole 2, template_var 6),
                 template_var 5)),
             template_app
              (template_app (template_hole 1, template_var 4),
               template_var 3)),
           template_var 2),
         template_app
          (template_app (template_hole 1, template_var 1), template_var 0)),
       template_app
        (template_app
          (template_hole 0,
           template_app
            (template_app
              (template_app
                (template_app (template_hole 3, template_var 6),
                 template_var 4),
               template_var 2),
             template_var 1)),
         template_app
          (template_app
            (template_app
              (template_app (template_hole 3, template_var 5),
               template_var 3),
             template_var 2),
           template_var 0)))),
    ("Finite_Automata.reaches_Cons",
     "reaches ?fsm ?st (?x # ?xs) ?st' =
      (EX st''.
          next ?fsm ?st ?x st'' &
          reaches ?fsm st'' ?xs ?st' & ?st <: states ?fsm)",
     template_equation
      (template_app
        (template_app
          (template_app
            (template_app (template_hole 6, template_var 4),
             template_var 3),
           template_app
            (template_app (template_hole 5, template_var 2),
             template_var 1)),
         template_var 0),
       template_app (template_hole 4, t_empty))),
    ("Finite_Automata.next_Times",
     "next (Times ?fsm1.0 ?fsm2.0) <?st1.0, ?st2.0> ?x ?st' =
      (EX st1' st2'.
          ?st' = <st1', st2'> &
          next ?fsm1.0 ?st1.0 ?x st1' & next ?fsm2.0 ?st2.0 ?x st2')",
     template_equation
      (template_app
        (template_app
          (template_app
            (template_app
              (template_hole 7,
               template_app
                (template_app (template_hole 6, template_var 5),
                 template_var 4)),
             template_app
              (template_app (template_hole 5, template_var 3),
               template_var 2)),
           template_var 1),
         template_var 0),
       template_app (template_hole 4, t_empty))),
    ("Finite_Automata.reaches_Plus_iff",
     "reaches (Plus ?fsm1.0 ?fsm2.0) ?st ?xs ?st' =
      ((EX st1 st1'.
           ?st = HF.Inl st1 &
           ?st' = HF.Inl st1' & reaches ?fsm1.0 st1 ?xs st1') |
       (EX st2 st2'.
           ?st = HF.Inr st2 &
           ?st' = HF.Inr st2' & reaches ?fsm2.0 st2 ?xs st2'))",
     template_equation
      (template_app
        (template_app
          (template_app
            (template_app
              (template_hole 7,
               template_app
                (template_app (template_hole 6, template_var 4),
                 template_var 3)),
             template_var 2),
           template_var 1),
         template_var 0),
       template_app
        (template_app
          (template_hole 5, template_app (template_hole 4, t_empty)),
         template_app (template_hole 4, t_empty))))]:
   (string * thm * template) list
### theory "Draft.Finite_AutomataMoreTemplates"
### 0.382s elapsed time, 0.531s cpu time, 0.063s GC time
val it = (): unit
