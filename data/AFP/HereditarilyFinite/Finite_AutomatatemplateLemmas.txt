   [("Finite_Automata.Reverse_Reverse_ident",
     "Reverse (Reverse ?fsm) = ?fsm",
     template_equation
      (template_app
        (template_hole 0, template_app (template_hole 0, template_var 0)),
       template_var 0)),
    ("Finite_Automata.regular_singstr", "regular {[?a]}",
     template_predicate
      (
         template_app
          (template_hole 4,
           template_app
            (template_app
              (template_hole 3,
               template_app
                (template_app (template_hole 2, template_var 0),
                 template_hole 1)),
             template_hole 0))
         )),
    ("Finite_Automata.regular_rev", "regular ?S ==> regular (rev ` ?S)",
     template_implication
      ([template_predicate
         (template_app (template_hole 2, template_var 0))],
       template_predicate
        (
           template_app
            (template_hole 2,
             template_app
              (template_app (template_hole 1, template_hole 0),
               template_var 0))
           ))),
    ("Finite_Automata.final_Plus",
     "final (Plus ?fsm1.0 ?fsm2.0) = final ?fsm1.0 + final ?fsm2.0",
     template_equation
      (template_app
        (template_hole 4,
         template_app
          (template_app (template_hole 3, template_var 1), template_var 0)),
       template_app
        (template_app
          (template_hole 2, template_app (template_hole 1, template_var 1)),
         template_app (template_hole 0, template_var 0)))),
    ("Finite_Automata.final_Times",
     "final (Times ?fsm1.0 ?fsm2.0) = final ?fsm1.0 * final ?fsm2.0",
     template_equation
      (template_app
        (template_hole 4,
         template_app
          (template_app (template_hole 3, template_var 1), template_var 0)),
       template_app
        (template_app
          (template_hole 2, template_app (template_hole 1, template_var 1)),
         template_app (template_hole 0, template_var 0)))),
    ("Finite_Automata.init_Plus",
     "init (Plus ?fsm1.0 ?fsm2.0) = init ?fsm1.0 + init ?fsm2.0",
     template_equation
      (template_app
        (template_hole 4,
         template_app
          (template_app (template_hole 3, template_var 1), template_var 0)),
       template_app
        (template_app
          (template_hole 2, template_app (template_hole 1, template_var 1)),
         template_app (template_hole 0, template_var 0)))),
    ("Finite_Automata.init_Times",
     "init (Times ?fsm1.0 ?fsm2.0) = init ?fsm1.0 * init ?fsm2.0",
     template_equation
      (template_app
        (template_hole 4,
         template_app
          (template_app (template_hole 3, template_var 1), template_var 0)),
       template_app
        (template_app
          (template_hole 2, template_app (template_hole 1, template_var 1)),
         template_app (template_hole 0, template_var 0)))),
    ("Finite_Automata.states_Plus",
     "states (Plus ?fsm1.0 ?fsm2.0) = states ?fsm1.0 + states ?fsm2.0",
     template_equation
      (template_app
        (template_hole 4,
         template_app
          (template_app (template_hole 3, template_var 1), template_var 0)),
       template_app
        (template_app
          (template_hole 2, template_app (template_hole 1, template_var 1)),
         template_app (template_hole 0, template_var 0)))),
    ("Finite_Automata.states_Times",
     "states (Times ?fsm1.0 ?fsm2.0) = states ?fsm1.0 * states ?fsm2.0",
     template_equation
      (template_app
        (template_hole 4,
         template_app
          (template_app (template_hole 3, template_var 1), template_var 0)),
       template_app
        (template_app
          (template_hole 2, template_app (template_hole 1, template_var 1)),
         template_app (template_hole 0, template_var 0)))),
    ("Finite_Automata.regular_Int",
     "[| regular ?S; regular ?T |] ==> regular (?S Int ?T)",
     template_implication
      ([template_predicate (template_app (template_hole 1, template_var 1)),
        template_predicate
         (template_app (template_hole 1, template_var 0))],
       template_predicate
        (
           template_app
            (template_hole 1,
             template_app
              (template_app (template_hole 0, template_var 1),
               template_var 0))
           ))),
    ("Finite_Automata.regular_Un",
     "[| regular ?S; regular ?T |] ==> regular (?S Un ?T)",
     template_implication
      ([template_predicate (template_app (template_hole 1, template_var 1)),
        template_predicate
         (template_app (template_hole 1, template_var 0))],
       template_predicate
        (
           template_app
            (template_hole 1,
             template_app
              (template_app (template_hole 0, template_var 1),
               template_var 0))
           ))),
    ("Finite_Automata.accepts_Plus_iff",
     "accepts (Plus ?fsm1.0 ?fsm2.0) ?xs =
      (accepts ?fsm1.0 ?xs | accepts ?fsm2.0 ?xs)",
     template_equation
      (template_app
        (template_app
          (template_hole 2,
           template_app
            (template_app (template_hole 1, template_var 2),
             template_var 1)),
         template_var 0),
       template_app
        (template_app
          (template_hole 0,
           template_app
            (template_app (template_hole 2, template_var 2),
             template_var 0)),
         template_app
          (template_app (template_hole 2, template_var 1),
           template_var 0)))),
    ("Finite_Automata.accepts_Times_iff",
     "accepts (Times ?fsm1.0 ?fsm2.0) ?xs =
      (accepts ?fsm1.0 ?xs & accepts ?fsm2.0 ?xs)",
     template_equation
      (template_app
        (template_app
          (template_hole 2,
           template_app
            (template_app (template_hole 1, template_var 2),
             template_var 1)),
         template_var 0),
       template_app
        (template_app
          (template_hole 0,
           template_app
            (template_app (template_hole 2, template_var 2),
             template_var 0)),
         template_app
          (template_app (template_hole 2, template_var 1),
           template_var 0)))),
    ("Finite_Automata.reaches_Reverse_iff2",
     "reaches (Reverse ?fsm) ?st' ?xs ?st =
      reaches ?fsm ?st (rev ?xs) ?st'",
     template_equation
      (template_app
        (template_app
          (template_app
            (template_app
              (template_hole 2,
               template_app (template_hole 1, template_var 3)),
             template_var 2),
           template_var 1),
         template_var 0),
       template_app
        (template_app
          (template_app
            (template_app (template_hole 2, template_var 3),
             template_var 0),
           template_app (template_hole 0, template_var 1)),
         template_var 2))),
    ("Finite_Automata.reaches_Reverse_iff",
     "reaches (Reverse ?fsm) ?st (rev ?xs) ?st' =
      reaches ?fsm ?st' ?xs ?st",
     template_equation
      (template_app
        (template_app
          (template_app
            (template_app
              (template_hole 2,
               template_app (template_hole 1, template_var 3)),
             template_var 2),
           template_app (template_hole 0, template_var 1)),
         template_var 0),
       template_app
        (template_app
          (template_app
            (template_app (template_hole 2, template_var 3),
             template_var 0),
           template_var 1),
         template_var 2))),
    ("Finite_Automata.reaches_Nil",
     "reaches ?fsm ?st [] ?st' = (?st' = ?st & ?st <: states ?fsm)",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_app (template_hole 5, template_var 2),
                  template_var 1),
                template_hole 4),
              template_var 0)
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 3,
               template_app
                (template_app (template_hole 2, template_var 0),
                 template_var 1)),
             template_app
              (template_app (template_hole 1, template_var 1),
               template_app (template_hole 0, template_var 2)))
           ))),
    ("Finite_Automata.reaches_imp_states",
     "reaches ?fsm ?st ?xs ?st' ==>
      ?st <: states ?fsm & ?st' <: states ?fsm",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_app (template_hole 3, template_var 3),
                  template_var 2),
                template_var 1),
              template_var 0)
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 2,
               template_app
                (template_app (template_hole 1, template_var 2),
                 template_app (template_hole 0, template_var 3))),
             template_app
              (template_app (template_hole 1, template_var 0),
               template_app (template_hole 0, template_var 3)))
           ))),
    ("Finite_Automata.reaches_append_iff",
     "reaches ?fsm ?st (?xs @ ?ys) ?st' =
      (EX st''. reaches ?fsm ?st ?xs st'' & reaches ?fsm st'' ?ys ?st')",
     template_equation
      (template_app
        (template_app
          (template_app
            (template_app (template_hole 3, template_var 4),
             template_var 3),
           template_app
            (template_app (template_hole 2, template_var 2),
             template_var 1)),
         template_var 0),
       template_app (template_hole 1, t_empty))),
    ("Finite_Automata.next_Plus1",
     "next (Plus ?fsm1.0 ?fsm2.0) (HF.Inl ?st1.0) ?x ?st' =
      (EX st1'. ?st' = HF.Inl st1' & next ?fsm1.0 ?st1.0 ?x st1')",
     template_equation
      (template_app
        (template_app
          (template_app
            (template_app
              (template_hole 6,
               template_app
                (template_app (template_hole 5, template_var 4),
                 template_var 3)),
             template_app (template_hole 4, template_var 2)),
           template_var 1),
         template_var 0),
       template_app (template_hole 3, t_empty))),
    ("Finite_Automata.next_Plus2",
     "next (Plus ?fsm1.0 ?fsm2.0) (HF.Inr ?st2.0) ?x ?st' =
      (EX st2'. ?st' = HF.Inr st2' & next ?fsm2.0 ?st2.0 ?x st2')",
     template_equation
      (template_app
        (template_app
          (template_app
            (template_app
              (template_hole 6,
               template_app
                (template_app (template_hole 5, template_var 4),
                 template_var 3)),
             template_app (template_hole 4, template_var 2)),
           template_var 1),
         template_var 0),
       template_app (template_hole 3, t_empty))),
    ("Finite_Automata.reaches_Plus_iff2",
     "reaches (Plus ?fsm1.0 ?fsm2.0) (HF.Inr ?st2.0) ?xs ?st' =
      (EX st2'. ?st' = HF.Inr st2' & reaches ?fsm2.0 ?st2.0 ?xs st2')",
     template_equation
      (template_app
        (template_app
          (template_app
            (template_app
              (template_hole 5,
               template_app
                (template_app (template_hole 4, template_var 4),
                 template_var 3)),
             template_app (template_hole 3, template_var 2)),
           template_var 1),
         template_var 0),
       template_app (template_hole 2, t_empty))),
    ("Finite_Automata.reaches_Plus_iff1",
     "reaches (Plus ?fsm1.0 ?fsm2.0) (HF.Inl ?st1.0) ?xs ?st' =
      (EX st1'. ?st' = HF.Inl st1' & reaches ?fsm1.0 ?st1.0 ?xs st1')",
     template_equation
      (template_app
        (template_app
          (template_app
            (template_app
              (template_hole 5,
               template_app
                (template_app (template_hole 4, template_var 4),
                 template_var 3)),
             template_app (template_hole 3, template_var 2)),
           template_var 1),
         template_var 0),
       template_app (template_hole 2, t_empty))),
    ("Finite_Automata.reaches_Times_iff",
     "reaches (Times ?fsm1.0 ?fsm2.0) <?st1.0, ?st2.0> ?xs <?st1', ?st2'> =
      (reaches ?fsm1.0 ?st1.0 ?xs ?st1' &
       reaches ?fsm2.0 ?st2.0 ?xs ?st2')",
     template_equation
      (template_app
        (template_app
          (template_app
            (template_app
              (template_hole 3,
               template_app
                (template_app (template_hole 2, template_var 6),
                 template_var 5)),
             template_app
              (template_app (template_hole 1, template_var 4),
               template_var 3)),
           template_var 2),
         template_app
          (template_app (template_hole 1, template_var 1), template_var 0)),
       template_app
        (template_app
          (template_hole 0,
           template_app
            (template_app
              (template_app
                (template_app (template_hole 3, template_var 6),
                 template_var 4),
               template_var 2),
             template_var 1)),
         template_app
          (template_app
            (template_app
              (template_app (template_hole 3, template_var 5),
               template_var 3),
             template_var 2),
           template_var 0)))),
    ("Finite_Automata.reaches_Cons",
     "reaches ?fsm ?st (?x # ?xs) ?st' =
      (EX st''.
          next ?fsm ?st ?x st'' &
          reaches ?fsm st'' ?xs ?st' & ?st <: states ?fsm)",
     template_equation
      (template_app
        (template_app
          (template_app
            (template_app (template_hole 6, template_var 4),
             template_var 3),
           template_app
            (template_app (template_hole 5, template_var 2),
             template_var 1)),
         template_var 0),
       template_app (template_hole 4, t_empty))),
    ("Finite_Automata.next_Times",
     "next (Times ?fsm1.0 ?fsm2.0) <?st1.0, ?st2.0> ?x ?st' =
      (EX st1' st2'.
          ?st' = <st1', st2'> &
          next ?fsm1.0 ?st1.0 ?x st1' & next ?fsm2.0 ?st2.0 ?x st2')",
     template_equation
      (template_app
        (template_app
          (template_app
            (template_app
              (template_hole 7,
               template_app
                (template_app (template_hole 6, template_var 5),
                 template_var 4)),
             template_app
              (template_app (template_hole 5, template_var 3),
               template_var 2)),
           template_var 1),
         template_var 0),
       template_app (template_hole 4, t_empty))),
    ("Finite_Automata.reaches_Plus_iff",
     "reaches (Plus ?fsm1.0 ?fsm2.0) ?st ?xs ?st' =
      ((EX st1 st1'.
           ?st = HF.Inl st1 &
           ?st' = HF.Inl st1' & reaches ?fsm1.0 st1 ?xs st1') |
       (EX st2 st2'.
           ?st = HF.Inr st2 &
           ?st' = HF.Inr st2' & reaches ?fsm2.0 st2 ?xs st2'))",
     template_equation
      (template_app
        (template_app
          (template_app
            (template_app
              (template_hole 7,
               template_app
                (template_app (template_hole 6, template_var 4),
                 template_var 3)),
             template_var 2),
           template_var 1),
         template_var 0),
       template_app
        (template_app
          (template_hole 5, template_app (template_hole 4, t_empty)),
         template_app (template_hole 4, t_empty))))]
