Loading theory "HOL-Library.Function_Algebras" (required by "Draft.Optimal_BST_MemoTemplates" via "Draft.ExtrEqs" via "HOL-Library.BigO")
Loading theory "HOL-Library.Set_Algebras" (required by "Draft.Optimal_BST_MemoTemplates" via "Draft.ExtrEqs" via "HOL-Library.BigO")
Loading theory "Draft.Optimal_BST_Examples" (required by "Draft.Optimal_BST_MemoTemplates" via "Draft.Optimal_BST_Memo")
Loading theory "HOL-Library.Stream" (required by "Draft.Optimal_BST_MemoTemplates" via "Draft.ExtrEqs")
instantiation
  set :: (plus) plus
  plus_set == plus :: 'a set => 'a set => 'a set
instantiation
  fun :: (type, plus) plus
  plus_fun == plus :: ('a => 'b) => ('a => 'b) => 'a => 'b
instantiation
  set :: (times) times
  times_set == times :: 'a set => 'a set => 'a set
instantiation
  fun :: (type, zero) zero
  zero_fun == zero_class.zero :: 'a => 'b
instantiation
  set :: (zero) zero
  zero_set == zero_class.zero :: 'a set
instantiation
  set :: (one) one
  one_set == one_class.one :: 'a set
instantiation
  fun :: (type, times) times
  times_fun == times :: ('a => 'b) => ('a => 'b) => 'a => 'b
instantiation
  fun :: (type, one) one
  one_fun == one_class.one :: 'a => 'b
### theory "Draft.Optimal_BST_Examples"
### 0.074s elapsed time, 0.333s cpu time, 0.000s GC time
Loading theory "Draft.Templates" (required by "Draft.Optimal_BST_MemoTemplates" via "Draft.ExtrEqs")
### theory "HOL-Library.Function_Algebras"
### 0.156s elapsed time, 0.640s cpu time, 0.049s GC time
Loading theory "Draft.Weighted_Path_Length" (required by "Draft.Optimal_BST_MemoTemplates" via "Draft.Optimal_BST_Memo" via "Draft.Optimal_BST")
datatype template_term
=
     t_empty
   | template_app of template_term * template_term
   | template_hole of int
   | template_var of int
datatype sign
= equals | greater_equals | greater_than | less_equals | less_than
datatype template
=
     template_bimplication of template * template
   | template_dunno
   | template_equation of template_term * template_term
   | template_implication of template list * template
   | template_inequation of sign * template_term * template_term
   | template_negation of template
   | template_predicate of template_term
constructor t_empty: template_term
constructor template_app: template_term * template_term -> template_term
constructor template_hole: int -> template_term
constructor template_var: int -> template_term
constructor equals: sign
constructor greater_equals: sign
constructor greater_than: sign
constructor less_equals: sign
constructor less_than: sign
constructor template_bimplication: template * template -> template
constructor template_dunno: template
constructor template_equation: template_term * template_term -> template
constructor template_implication: template list * template -> template
constructor template_inequation:
   sign * template_term * template_term -> template
constructor template_negation: template -> template
constructor template_predicate: template_term -> template
val vfs = fn: term -> (indexname * typ) list * (string * typ) list
val indexOf = fn: ''a list -> ''a -> int -> int
val has_eq = fn: term -> bool
val term2template = fn:
   (indexname * typ) list -> (string * typ) list -> term -> template_term
val lemma2predicate = fn: term -> term -> template
val makeTemplatewithContext = fn: term -> term -> template
val lemma2template = fn: term -> template
val thm2template = fn: thm -> template
val tterm2string = fn: template_term -> string
val template2string = fn: template -> string
val t = "height ?t <= size ?t": thm
val th =
   Const ("HOL.Trueprop", "bool => prop") $
     (Const ("Orderings.ord_class.less_eq", "nat => nat => bool") $
       (Const ("Tree.height_class.height", "?'a tree => nat") $
         Var (("t", 0), "?'a tree")) $
       (Const ("Nat.size_class.size", "?'a tree => nat") $
         Var (("t", 0), "?'a tree"))):
   term
### theory "Draft.Templates"
### 0.107s elapsed time, 0.408s cpu time, 0.049s GC time
### theory "HOL-Library.Set_Algebras"
### 0.202s elapsed time, 0.800s cpu time, 0.049s GC time
Loading theory "HOL-Library.BigO" (required by "Draft.Optimal_BST_MemoTemplates" via "Draft.ExtrEqs")
Found termination order: "{}"
Found termination order: "(%p. size (snd p)) <*mlex*> {}"
Found termination order: "size <*mlex*> {}"
locale wpl
  fixes w :: "int => int => nat"
consts
  shift :: "'a list => 'a stream => 'a stream"
Proofs for coinductive predicate(s) "streamsp"
  Proving monotonicity ...
Found termination order: "(%p. size (snd (snd p))) <*mlex*> {}"
locale Wpl
  fixes a :: "int => nat"
    and b :: "int => nat"
### theory "Draft.Weighted_Path_Length"
### 0.327s elapsed time, 1.014s cpu time, 0.086s GC time
Loading theory "Draft.Optimal_BST" (required by "Draft.Optimal_BST_MemoTemplates" via "Draft.Optimal_BST_Memo")
consts
  snth :: "'a stream => nat => 'a"
consts
  stake :: "nat => 'a stream => 'a list"
consts
  sdrop :: "nat => 'a stream => 'a stream"
consts
  sfilter :: "('a => bool) => 'a stream => 'a stream"
consts
  cycle :: "'a list => 'a stream"
consts
  siterate :: "('a => 'a) => 'a => 'a stream"
consts
  flat :: "'a list stream => 'a stream"
consts
  sinterleave :: "'a stream => 'a stream => 'a stream"
consts
  szip :: "'a stream => 'b stream => ('a * 'b) stream"
consts
  smap2 :: "('a => 'b => 'c) => 'a stream => 'b stream => 'c stream"
### theory "HOL-Library.Stream"
### 0.853s elapsed time, 2.777s cpu time, 0.304s GC time
### theory "HOL-Library.BigO"
### 0.752s elapsed time, 2.207s cpu time, 0.255s GC time
Loading theory "Draft.ExtrEqs" (required by "Draft.Optimal_BST_MemoTemplates")
### Missing patterns in function definition:
### !!a. argmin2 a [] = undefined
Found termination order: "(%p. length (snd p)) <*mlex*> {}"
locale Optimal_BST
  fixes w :: "int => int => nat"
### theory "Draft.Optimal_BST"
### 0.841s elapsed time, 2.139s cpu time, 0.264s GC time
Loading theory "Draft.Optimal_BST_Memo" (required by "Draft.Optimal_BST_MemoTemplates")
val eqpattern =
   Pattern
    (
       Const ("HOL.Trueprop", "bool => prop") $
         (Const ("HOL.eq", "?'a => ?'a => bool") $
           Var (("_dummy_", 1), "?'a") $ Var (("_dummy_", 2), "?'a"))
       ):
   term Find_Theorems.criterion
val badeqpattern = Pattern (Const ("Pure.eq", "?'a => ?'a => prop")):
   term Find_Theorems.criterion
val undefpattern =
   Pattern
    (
       Const ("HOL.Trueprop", "bool => prop") $
         (Const ("HOL.eq", "?'a => ?'a => bool") $
           Var (("_dummy_", 1), "?'a") $ Const ("HOL.undefined", "?'a"))
       ):
   term Find_Theorems.criterion
val thmpattern =
   Pattern
    (Const ("HOL.Trueprop", "bool => prop") $ Var (("_dummy_", 1), "bool")):
   term Find_Theorems.criterion
val badnames =
   ["*nitpick*", "*Nitpick*", "*full_exhaustive*", "*_def*", "Enum.finite*",
    "*Quickcheck*", "ATP*", "*Nunchaku*", "*Code*", "*BNF*", "*SMT*",
    "*.*.*"]:
   string list
val unwanted_names =
   [(false, Name "*nitpick*"), (false, Name "*Nitpick*"),
    (false, Name "*full_exhaustive*"), (false, Name "*_def*"),
    (false, Name "Enum.finite*"), (false, Name "*Quickcheck*"),
    (false, Name "ATP*"), (false, Name "*Nunchaku*"),
    (false, Name "*Code*"), (false, Name "*BNF*"), (false, Name "*SMT*"),
    (false, Name "*.*.*")]:
   (bool * term Find_Theorems.criterion) list
val has_vars = fn: term -> bool
val get_all_eqs = fn: string -> Proof.context -> (string * thm) list
val get_all_thms = fn: string -> Proof.context -> (string * thm) list
val get_noneq_thms = fn: string -> Proof.context -> (string * thm) list
val template_eqs = fn:
   string -> Proof.context -> (string * thm * template) list
val template_thms = fn:
   string -> Proof.context -> (string * thm * template) list
### theory "Draft.ExtrEqs"
### 0.723s elapsed time, 1.693s cpu time, 0.631s GC time
locale Optimal_BST
  fixes w :: "int => int => nat"
termination by replaying
consts
  opt_bst\<^sub>m' ::
    "int => int => ((int * int, int tree) mapping, int tree) state"
  opt_bst\<^sub>m ::
    "('b,
      int
      => ('a,
          int
          => ((int * int, int tree) mapping, int tree) state) state) state"
theorem
  local.opt_bst\<^sub>m.crel:
    dp_consistency.consistentDP
     (%k. State_Monad.get >>= (%m. State_Monad.return (Mapping.lookup m k)))
     (%_. True) (%(x, y). local.opt_bst x y)
     (%(x, y). local.opt_bst\<^sub>m' x y)
theorem
  local.opt_bst\<^sub>m.memoized_correct:
    local.opt_bst ?a ?b =
    fst (run_state (local.opt_bst\<^sub>m' ?a ?b) Mapping.empty)
local.opt_bst\<^sub>m' ?i ?j =
state_mem_defs.checkmem
 (%k. State_Monad.get >>= (%m. State_Monad.return (Mapping.lookup m k)))
 (%k v. State_Monad.get >>= (%m. State_Monad.set (Mapping.update k v m)))
 (?i, ?j)
 (State_Monad_Ext.if\<^sub>T (State_Monad.return (?j < ?i))
   (State_Monad.return \<langle>\<rangle>)
   (State_Monad_Ext.fun_app_lifted
     (State_Monad.return
       (%a. State_Monad.return
             (case a of
              x # xs =>
                fst (fold
                      (%x (m, fm).
                          let fx = local.wpl ?i ?j x
                          in if fx <= fm then (x, fx) else (m, fm))
                      xs (x, local.wpl ?i ?j x)))))
     (State_Monad_Ext.fun_app_lifted
       (State_Monad_Ext.fun_app_lifted State_Main.map\<^sub>T
         (State_Monad.return
           (%k. State_Monad_Ext.fun_app_lifted
                 (State_Monad_Ext.fun_app_lifted
                   (State_Monad_Ext.fun_app_lifted
                     (State_Monad.return
                       (%a. State_Monad.return
                             (%b. State_Monad.return
                                   (%c.
 State_Monad.return \<langle>a, b, c\<rangle>))))
                     (local.opt_bst\<^sub>m' ?i (k - 1)))
                   (State_Monad.return k))
                 (local.opt_bst\<^sub>m' (k + 1) ?j))))
       (State_Monad.return [?i..?j]))))
### theory "Draft.Optimal_BST_Memo"
### 1.021s elapsed time, 1.649s cpu time, 0.609s GC time
Loading theory "Draft.Optimal_BST_MemoTemplates"
val templateLemmas =
   [("Optimal_BST_Memo.opt_bst_simps",
     "?j < ?i ==> opt_bst_ab ?a ?b ?i ?j = \<langle>\<rangle>",
     template_implication
      ([template_inequation (less_than, template_var 3, template_var 2)],
       template_equation
        (template_app
          (template_app
            (template_app
              (template_app (template_hole 1, template_var 1),
               template_var 0),
             template_var 2),
           template_var 3),
         template_hole 0))),
    ("Optimal_BST_Memo.min_wpl_simps",
     "?j < ?i ==> Optimal_BST_Memo.min_wpl ?a ?b ?i ?j = 0",
     template_implication
      ([template_inequation (less_than, template_var 3, template_var 2)],
       template_equation
        (template_app
          (template_app
            (template_app
              (template_hole 2,
               template_app
                (template_app (template_hole 1, template_var 1),
                 template_var 0)),
             template_var 2),
           template_var 3),
         template_hole 0))),
    ("Optimal_BST_Memo.wpl_opt_bst",
     "wpl_ab ?a ?b ?i ?j (opt_bst_ab ?a ?b ?i ?j) =
      Optimal_BST_Memo.min_wpl ?a ?b ?i ?j",
     template_equation
      (template_app
        (template_app
          (template_app
            (template_app
              (template_app (template_hole 3, template_var 3),
               template_var 2),
             template_var 1),
           template_var 0),
         template_app
          (template_app
            (template_app
              (template_app (template_hole 2, template_var 3),
               template_var 2),
             template_var 1),
           template_var 0)),
       template_app
        (template_app
          (template_app
            (template_hole 1,
             template_app
              (template_app (template_hole 0, template_var 3),
               template_var 2)),
           template_var 1),
         template_var 0))),
    ("Optimal_BST_Memo.opt_bst_wpl_eq_pair'",
     "opt_bst_wpl ?a ?b ?i ?j =
      (opt_bst_ab ?a ?b ?i ?j, Optimal_BST_Memo.min_wpl ?a ?b ?i ?j)",
     template_equation
      (template_app
        (template_app
          (template_app
            (template_hole 4,
             template_app
              (template_app (template_hole 3, template_var 3),
               template_var 2)),
           template_var 1),
         template_var 0),
       template_app
        (template_app
          (template_hole 2,
           template_app
            (template_app
              (template_app
                (template_app (template_hole 1, template_var 3),
                 template_var 2),
               template_var 1),
             template_var 0)),
         template_app
          (template_app
            (template_app
              (template_hole 0,
               template_app
                (template_app (template_hole 3, template_var 3),
                 template_var 2)),
             template_var 1),
           template_var 0)))),
    ("Optimal_BST_Memo.min_wpl_is_optimal",
     "inorder ?t = [?i..?j] ==>
      Optimal_BST_Memo.min_wpl ?a ?b ?i ?j <= wpl_ab ?a ?b ?i ?j ?t",
     template_implication
      ([template_equation
         (template_app (template_hole 5, template_var 4),
          template_app
           (template_app (template_hole 4, template_var 3),
            template_var 2))],
       template_inequation
        (less_equals,
         template_app
          (template_app
            (template_app
              (template_hole 2,
               template_app
                (template_app (template_hole 1, template_var 1),
                 template_var 0)),
             template_var 3),
           template_var 2),
         template_app
          (template_app
            (template_app
              (template_app
                (template_app (template_hole 0, template_var 1),
                 template_var 0),
               template_var 3),
             template_var 2),
           template_var 4)))),
    ("Optimal_BST_Memo.opt_bst_wpl_eq_pair",
     "opt_bst_wpl ?a ?b ?i ?j =
      (opt_bst_ab ?a ?b ?i ?j,
       wpl_ab ?a ?b ?i ?j (opt_bst_ab ?a ?b ?i ?j))",
     template_equation
      (template_app
        (template_app
          (template_app
            (template_hole 4,
             template_app
              (template_app (template_hole 3, template_var 3),
               template_var 2)),
           template_var 1),
         template_var 0),
       template_app
        (template_app
          (template_hole 2,
           template_app
            (template_app
              (template_app
                (template_app (template_hole 1, template_var 3),
                 template_var 2),
               template_var 1),
             template_var 0)),
         template_app
          (template_app
            (template_app
              (template_app
                (template_app (template_hole 0, template_var 3),
                 template_var 2),
               template_var 1),
             template_var 0),
           template_app
            (template_app
              (template_app
                (template_app (template_hole 1, template_var 3),
                 template_var 2),
               template_var 1),
             template_var 0))))),
    ("Optimal_BST_Memo.upto_split1",
     "[| ?i <= ?j; ?j <= ?k |] ==> [?i..?k] = [?i..?j - 1] @ [?j..?k]",
     template_implication
      ([template_inequation (less_equals, template_var 2, template_var 1),
        template_inequation (less_equals, template_var 1, template_var 0)],
       template_equation
        (template_app
          (template_app (template_hole 3, template_var 2), template_var 0),
         template_app
          (template_app
            (template_hole 2,
             template_app
              (template_app (template_hole 3, template_var 2),
               template_app
                (template_app (template_hole 1, template_var 1),
                 template_hole 0))),
           template_app
            (template_app (template_hole 3, template_var 1),
             template_var 0))))),
    ("Optimal_BST_Memo.opt_bst_is_optimal",
     "inorder ?t = [?i..?j] ==>
      wpl_ab ?a ?b ?i ?j (opt_bst_ab ?a ?b ?i ?j) <= wpl_ab ?a ?b ?i ?j ?t",
     template_implication
      ([template_equation
         (template_app (template_hole 4, template_var 4),
          template_app
           (template_app (template_hole 3, template_var 3),
            template_var 2))],
       template_inequation
        (less_equals,
         template_app
          (template_app
            (template_app
              (template_app
                (template_app (template_hole 1, template_var 1),
                 template_var 0),
               template_var 3),
             template_var 2),
           template_app
            (template_app
              (template_app
                (template_app (template_hole 0, template_var 1),
                 template_var 0),
               template_var 3),
             template_var 2)),
         template_app
          (template_app
            (template_app
              (template_app
                (template_app (template_hole 1, template_var 1),
                 template_var 0),
               template_var 3),
             template_var 2),
           template_var 4)))),
    ("Optimal_BST_Memo.argmin_fold",
     "argmin ?f ?xs =
      (case ?xs of
       x # xs =>
         fst (fold
               (%x (m, fm).
                   let fx = ?f x in if fx <= fm then (x, fx) else (m, fm))
               xs (x, ?f x)))",
     template_equation
      (template_app
        (template_app (template_hole 9, template_var 1), template_var 0),
       template_app
        (template_app
          (template_app (template_hole 8, template_hole 7), t_empty),
         template_var 0))),
    ("Optimal_BST_Memo.fold_argmin",
     "fold
       (%x (m, fm). let fx = ?f x in if fx <= fm then (x, fx) else (m, fm))
       ?xs (?x, ?f ?x) =
      (argmin ?f (?x # ?xs), ?f (argmin ?f (?x # ?xs)))",
     template_equation
      (template_app
        (template_app
          (template_app (template_hole 7, t_empty), template_var 1),
         template_app
          (template_app (template_hole 2, template_var 0),
           template_app (template_var 2, template_var 0))),
       template_app
        (template_app
          (template_hole 2,
           template_app
            (template_app (template_hole 1, template_var 2),
             template_app
              (template_app (template_hole 0, template_var 0),
               template_var 1))),
         template_app
          (template_var 2,
           template_app
            (template_app (template_hole 1, template_var 2),
             template_app
              (template_app (template_hole 0, template_var 0),
               template_var 1)))))),
    ("Optimal_BST_Memo.opt_bst_simps",
     "?i <= ?j ==>
      opt_bst_ab ?a ?b ?i ?j =
      argmin (wpl_ab ?a ?b ?i ?j)
       (map (%k. \<langle>opt_bst_ab ?a ?b ?i (k - 1), k,
                  opt_bst_ab ?a ?b (k + 1) ?j\<rangle>)
         [?i..?j])",
     template_implication
      ([template_inequation (less_equals, template_var 3, template_var 2)],
       template_equation
        (template_app
          (template_app
            (template_app
              (template_app (template_hole 8, template_var 1),
               template_var 0),
             template_var 3),
           template_var 2),
         template_app
          (template_app
            (template_hole 7,
             template_app
              (template_app
                (template_app
                  (template_app (template_hole 6, template_var 1),
                   template_var 0),
                 template_var 3),
               template_var 2)),
           template_app
            (template_app (template_hole 5, t_empty),
             template_app
              (template_app (template_hole 0, template_var 3),
               template_var 2)))))),
    ("Optimal_BST_Memo.min_wpl_simps",
     "?i <= ?j ==>
      Optimal_BST_Memo.min_wpl ?a ?b ?i ?j =
      (MIN k\<in>{?i..?j}.
          Optimal_BST_Memo.min_wpl ?a ?b ?i (k - 1) +
          Optimal_BST_Memo.min_wpl ?a ?b (k + 1) ?j +
          w_ab ?a ?b ?i ?j)",
     template_implication
      ([template_inequation (less_equals, template_var 3, template_var 2)],
       template_equation
        (template_app
          (template_app
            (template_app
              (template_hole 8,
               template_app
                (template_app (template_hole 7, template_var 1),
                 template_var 0)),
             template_var 3),
           template_var 2),
         template_app
          (template_hole 6,
           template_app
            (template_app (template_hole 5, t_empty),
             template_app
              (template_app (template_hole 0, template_var 3),
               template_var 2))))))]:
   (string * thm * template) list
### theory "Draft.Optimal_BST_MemoTemplates"
### 0.560s elapsed time, 0.732s cpu time, 0.060s GC time
val it = (): unit
