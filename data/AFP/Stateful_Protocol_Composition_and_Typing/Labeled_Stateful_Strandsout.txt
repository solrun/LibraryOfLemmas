Loading theory "Draft.Miscellaneous" (required by "Draft.Labeled_Stateful_StrandsTemplates" via "Draft.Labeled_Stateful_Strands" via "Draft.Stateful_Strands" via "Draft.Strands_and_Constraints" via "Draft.Messages")
Loading theory "Draft.Templates" (required by "Draft.Labeled_Stateful_StrandsTemplates" via "Draft.ExtrEqs")
datatype template_term
=
     t_empty
   | template_app of template_term * template_term
   | template_hole of int
   | template_var of int
datatype sign
= equals | greater_equals | greater_than | less_equals | less_than
datatype template
=
     template_bimplication of template * template
   | template_dunno
   | template_equation of template_term * template_term
   | template_implication of template list * template
   | template_inequation of sign * template_term * template_term
   | template_negation of template
   | template_predicate of template_term
constructor t_empty: template_term
constructor template_app: template_term * template_term -> template_term
constructor template_hole: int -> template_term
constructor template_var: int -> template_term
constructor equals: sign
constructor greater_equals: sign
constructor greater_than: sign
constructor less_equals: sign
constructor less_than: sign
constructor template_bimplication: template * template -> template
constructor template_dunno: template
constructor template_equation: template_term * template_term -> template
constructor template_implication: template list * template -> template
constructor template_inequation:
   sign * template_term * template_term -> template
constructor template_negation: template -> template
constructor template_predicate: template_term -> template
val vfs = fn: term -> (indexname * typ) list * (string * typ) list
val indexOf = fn: ''a list -> ''a -> int -> int
val has_eq = fn: term -> bool
val term2template = fn:
   (indexname * typ) list -> (string * typ) list -> term -> template_term
val lemma2predicate = fn: term -> term -> template
val makeTemplatewithContext = fn: term -> term -> template
val lemma2template = fn: term -> template
val thm2template = fn: thm -> template
val tterm2string = fn: template_term -> string
val template2string = fn: template -> string
val t = "height ?t <= size ?t": thm
val th =
   Const ("HOL.Trueprop", "bool => prop") $
     (Const ("Orderings.ord_class.less_eq", "nat => nat => bool") $
       (Const ("Tree.height_class.height", "?'a tree => nat") $
         Var (("t", 0), "?'a tree")) $
       (Const ("Nat.size_class.size", "?'a tree => nat") $
         Var (("t", 0), "?'a tree"))):
   term
### theory "Draft.Templates"
### 0.052s elapsed time, 0.135s cpu time, 0.000s GC time
Loading theory "Draft.ExtrEqs" (required by "Draft.Labeled_Stateful_StrandsTemplates")
Found termination order: "(%p. size (fst p)) <*mlex*> {}"
### theory "Draft.Miscellaneous"
### 0.418s elapsed time, 0.946s cpu time, 0.260s GC time
Loading theory "Draft.Messages" (required by "Draft.Labeled_Stateful_StrandsTemplates" via "Draft.Labeled_Stateful_Strands" via "Draft.Stateful_Strands" via "Draft.Strands_and_Constraints")
Found termination order: "size <*mlex*> {}"
val eqpattern =
   Pattern
    (
       Const ("HOL.Trueprop", "bool => prop") $
         (Const ("HOL.eq", "?'a => ?'a => bool") $
           Var (("_dummy_", 1), "?'a") $ Var (("_dummy_", 2), "?'a"))
       ):
   term Find_Theorems.criterion
val badeqpattern = Pattern (Const ("Pure.eq", "?'a => ?'a => prop")):
   term Find_Theorems.criterion
val undefpattern =
   Pattern
    (
       Const ("HOL.Trueprop", "bool => prop") $
         (Const ("HOL.eq", "?'a => ?'a => bool") $
           Var (("_dummy_", 1), "?'a") $ Const ("HOL.undefined", "?'a"))
       ):
   term Find_Theorems.criterion
val thmpattern =
   Pattern
    (Const ("HOL.Trueprop", "bool => prop") $ Var (("_dummy_", 1), "bool")):
   term Find_Theorems.criterion
val badnames =
   ["*nitpick*", "*Nitpick*", "*full_exhaustive*", "*_def*", "Enum.finite*",
    "*Quickcheck*", "ATP*", "*Nunchaku*", "*Code*", "*BNF*", "*SMT*",
    "*.*.*"]:
   string list
val unwanted_names =
   [(false, Name "*nitpick*"), (false, Name "*Nitpick*"),
    (false, Name "*full_exhaustive*"), (false, Name "*_def*"),
    (false, Name "Enum.finite*"), (false, Name "*Quickcheck*"),
    (false, Name "ATP*"), (false, Name "*Nunchaku*"),
    (false, Name "*Code*"), (false, Name "*BNF*"), (false, Name "*SMT*"),
    (false, Name "*.*.*")]:
   (bool * term Find_Theorems.criterion) list
val has_vars = fn: term -> bool
val get_all_eqs = fn: string -> Proof.context -> (string * thm) list
val get_all_thms = fn: string -> Proof.context -> (string * thm) list
val get_noneq_thms = fn: string -> Proof.context -> (string * thm) list
val template_eqs = fn:
   string -> Proof.context -> (string * thm * template) list
val template_thms = fn:
   string -> Proof.context -> (string * thm * template) list
### theory "Draft.ExtrEqs"
### 0.579s elapsed time, 1.247s cpu time, 0.260s GC time
Found termination order: "{}"
Found termination order: "{}"
Found termination order: "size <*mlex*> {}"
Found termination order: "size <*mlex*> {}"
Found termination order: "(%p. size (snd p)) <*mlex*> {}"
### theory "Draft.Messages"
### 0.789s elapsed time, 1.054s cpu time, 0.075s GC time
Loading theory "Draft.More_Unification" (required by "Draft.Labeled_Stateful_StrandsTemplates" via "Draft.Labeled_Stateful_Strands" via "Draft.Stateful_Strands" via "Draft.Strands_and_Constraints")
Proofs for inductive predicate(s) "fsubstp"
  Proving monotonicity ...
Proofs for inductive predicate(s) "wf\<^sub>s\<^sub>u\<^sub>b\<^sub>s\<^sub>t_setp"
  Proving monotonicity ...
### theory "Draft.More_Unification"
### 1.203s elapsed time, 1.416s cpu time, 0.301s GC time
Loading theory "Draft.Intruder_Deduction" (required by "Draft.Labeled_Stateful_StrandsTemplates" via "Draft.Labeled_Stateful_Strands" via "Draft.Stateful_Strands" via "Draft.Strands_and_Constraints")
locale intruder_model
  fixes arity :: "'fun => nat"
    and public :: "'fun => bool"
    and
    Ana ::
      "('fun, 'var) Term.term
       => ('fun, 'var) Term.term list * ('fun, 'var) Term.term list"
  assumes "intruder_model arity Ana"
Proofs for inductive predicate(s) "intruder_deduct"
  Proving monotonicity ...
Proofs for inductive predicate(s) "intruder_synth"
  Proving monotonicity ...
Proofs for inductive predicate(s) "public_ground_wf_term"
  Proving monotonicity ...
Proofs for inductive predicate(s) "intruder_deduct_restricted"
  Proving monotonicity ...
Proofs for inductive predicate(s) "intruder_deduct_num"
  Proving monotonicity ...
Found termination order: "(%p. size (snd (snd (snd p)))) <*mlex*> {}"
### theory "Draft.Intruder_Deduction"
### 1.049s elapsed time, 1.596s cpu time, 0.761s GC time
Loading theory "Draft.Strands_and_Constraints" (required by "Draft.Labeled_Stateful_StrandsTemplates" via "Draft.Labeled_Stateful_Strands" via "Draft.Stateful_Strands")
Found termination order: "{}"
Found termination order: "{}"
Found termination order: "{}"
Found termination order: "size_list size <*mlex*> {}"
Found termination order: "{}"
Found termination order: "{}"
Found termination order: "size_list size <*mlex*> {}"
Found termination order: "(%p. size_list size (snd p)) <*mlex*> {}"
locale intruder_model
  fixes arity :: "'fun => nat"
    and public :: "'fun => bool"
    and
    Ana ::
      "('fun, 'var) Term.term
       => ('fun, 'var) Term.term list * ('fun, 'var) Term.term list"
  assumes "intruder_model arity Ana"
Found termination order: "(%p. size_list size (snd p)) <*mlex*> {}"
Found termination order: "(%p. size_list size (snd p)) <*mlex*> {}"
Found termination order: "(%p. size_list size (snd p)) <*mlex*> {}"
Found termination order: "(%p. size_list size (snd p)) <*mlex*> {}"
Found termination order: "size_list size <*mlex*> {}"
### theory "Draft.Strands_and_Constraints"
### 3.954s elapsed time, 5.152s cpu time, 1.487s GC time
Loading theory "Draft.Labeled_Strands" (required by "Draft.Labeled_Stateful_StrandsTemplates" via "Draft.Labeled_Stateful_Strands")
Loading theory "Draft.Stateful_Strands" (required by "Draft.Labeled_Stateful_StrandsTemplates" via "Draft.Labeled_Stateful_Strands")
### theory "Draft.Labeled_Strands"
### 0.538s elapsed time, 1.139s cpu time, 0.123s GC time
Found termination order: "{}"
Found termination order: "{}"
Found termination order: "{}"
Found termination order: "{}"
Found termination order: "(%p. size_list size (snd p)) <*mlex*> {}"
Found termination order: "{}"
Found termination order: "(%p. size_list size (fst p)) <*mlex*> {}"
Found termination order: "(%p. size_list size (fst p)) <*mlex*> {}"
Found termination order: "{}"
Found termination order: "{}"
locale intruder_model
  fixes arity :: "'fun => nat"
    and public :: "'fun => bool"
    and
    Ana ::
      "('fun, 'var) Term.term
       => ('fun, 'var) Term.term list * ('fun, 'var) Term.term list"
  assumes "intruder_model arity Ana"
Found termination order: "(%p. size_list size (snd (snd p))) <*mlex*> {}"
### theory "Draft.Stateful_Strands"
### 4.976s elapsed time, 7.144s cpu time, 1.991s GC time
Loading theory "Draft.Labeled_Stateful_Strands" (required by "Draft.Labeled_Stateful_StrandsTemplates")
Found termination order: "{}"
Found termination order: "{}"
Found termination order: "{}"
### theory "Draft.Labeled_Stateful_Strands"
### 0.937s elapsed time, 1.106s cpu time, 0.167s GC time
Loading theory "Draft.Labeled_Stateful_StrandsTemplates"
val templateLemmas =
   [("Labeled_Stateful_Strands.dual\<^sub>l\<^sub>s\<^sub>s\<^sub>t_self_inverse",
     "dual\<^sub>l\<^sub>s\<^sub>s\<^sub>t
       (dual\<^sub>l\<^sub>s\<^sub>s\<^sub>t ?A) =
      ?A",
     template_equation
      (template_app
        (template_hole 0, template_app (template_hole 0, template_var 0)),
       template_var 0)),
    ("Labeled_Stateful_Strands.subst_lsst_nil",
     "[] \<cdot>\<^sub>l\<^sub>s\<^sub>s\<^sub>t ?\<delta> = []",
     template_equation
      (template_app
        (template_app (template_hole 1, template_hole 0), template_var 0),
       template_hole 0)),
    ("Labeled_Stateful_Strands.setops\<^sub>l\<^sub>s\<^sub>s\<^sub>t_dual\<^sub>l\<^sub>s\<^sub>s\<^sub>t_eq",
     "setops\<^sub>l\<^sub>s\<^sub>s\<^sub>t
       (dual\<^sub>l\<^sub>s\<^sub>s\<^sub>t ?A) =
      setops\<^sub>l\<^sub>s\<^sub>s\<^sub>t ?A",
     template_equation
      (template_app
        (template_hole 1, template_app (template_hole 0, template_var 0)),
       template_app (template_hole 1, template_var 0))),
    ("Labeled_Stateful_Strands.proj_set_subset",
     "set (proj ?n ?A) <= set ?A",
     template_inequation
      (less_equals,
       template_app
        (template_hole 1,
         template_app
          (template_app (template_hole 0, template_var 1), template_var 0)),
       template_app (template_hole 1, template_var 0))),
    ("Labeled_Stateful_Strands.setops\<^sub>l\<^sub>s\<^sub>s\<^sub>t_prefix_subset",
     "setops\<^sub>l\<^sub>s\<^sub>s\<^sub>t ?A
      <= setops\<^sub>l\<^sub>s\<^sub>s\<^sub>t (?A @ ?B)",
     template_inequation
      (less_equals, template_app (template_hole 1, template_var 1),
       template_app
        (template_hole 1,
         template_app
          (template_app (template_hole 0, template_var 1),
           template_var 0)))),
    ("Labeled_Stateful_Strands.setops\<^sub>l\<^sub>s\<^sub>s\<^sub>t_suffix_subset",
     "setops\<^sub>l\<^sub>s\<^sub>s\<^sub>t ?B
      <= setops\<^sub>l\<^sub>s\<^sub>s\<^sub>t (?A @ ?B)",
     template_inequation
      (less_equals, template_app (template_hole 1, template_var 1),
       template_app
        (template_hole 1,
         template_app
          (template_app (template_hole 0, template_var 0),
           template_var 1)))),
    ("Labeled_Stateful_Strands.setops\<^sub>l\<^sub>s\<^sub>s\<^sub>t_proj_subset",
     "setops\<^sub>l\<^sub>s\<^sub>s\<^sub>t (proj ?n ?A)
      <= setops\<^sub>l\<^sub>s\<^sub>s\<^sub>t ?A",
     template_inequation
      (less_equals,
       template_app
        (template_hole 1,
         template_app
          (template_app (template_hole 0, template_var 1), template_var 0)),
       template_app (template_hole 1, template_var 0))),
    ("Labeled_Stateful_Strands.dual\<^sub>l\<^sub>s\<^sub>s\<^sub>t_db\<^sub>l\<^sub>s\<^sub>s\<^sub>t",
     "db'\<^sub>l\<^sub>s\<^sub>s\<^sub>t
       (dual\<^sub>l\<^sub>s\<^sub>s\<^sub>t ?A) =
      db'\<^sub>l\<^sub>s\<^sub>s\<^sub>t ?A",
     template_equation
      (template_app
        (template_hole 2,
         template_app
          (template_hole 1,
           template_app (template_hole 0, template_var 0))),
       template_app
        (template_hole 2, template_app (template_hole 1, template_var 0)))),
    ("Labeled_Stateful_Strands.bvars\<^sub>s\<^sub>s\<^sub>t_unlabel_dual\<^sub>l\<^sub>s\<^sub>s\<^sub>t_eq",
     "bvars\<^sub>l\<^sub>s\<^sub>s\<^sub>t
       (dual\<^sub>l\<^sub>s\<^sub>s\<^sub>t ?A) =
      bvars\<^sub>l\<^sub>s\<^sub>s\<^sub>t ?A",
     template_equation
      (template_app
        (template_hole 2,
         template_app
          (template_hole 1,
           template_app (template_hole 0, template_var 0))),
       template_app
        (template_hole 2, template_app (template_hole 1, template_var 0)))),
    ("Labeled_Stateful_Strands.fv\<^sub>s\<^sub>s\<^sub>t_unlabel_dual\<^sub>l\<^sub>s\<^sub>s\<^sub>t_eq",
     "fv\<^sub>l\<^sub>s\<^sub>s\<^sub>t
       (dual\<^sub>l\<^sub>s\<^sub>s\<^sub>t ?A) =
      fv\<^sub>l\<^sub>s\<^sub>s\<^sub>t ?A",
     template_equation
      (template_app
        (template_hole 2,
         template_app
          (template_hole 1,
           template_app (template_hole 0, template_var 0))),
       template_app
        (template_hole 2, template_app (template_hole 1, template_var 0)))),
    ("Labeled_Stateful_Strands.vars\<^sub>s\<^sub>s\<^sub>t_unlabel_dual\<^sub>l\<^sub>s\<^sub>s\<^sub>t_eq",
     "vars\<^sub>l\<^sub>s\<^sub>s\<^sub>t
       (dual\<^sub>l\<^sub>s\<^sub>s\<^sub>t ?A) =
      vars\<^sub>l\<^sub>s\<^sub>s\<^sub>t ?A",
     template_equation
      (template_app
        (template_hole 2,
         template_app
          (template_hole 1,
           template_app (template_hole 0, template_var 0))),
       template_app
        (template_hole 2, template_app (template_hole 1, template_var 0)))),
    ("Labeled_Stateful_Strands.trms\<^sub>s\<^sub>s\<^sub>t_unlabel_dual\<^sub>l\<^sub>s\<^sub>s\<^sub>t_eq",
     "trms\<^sub>l\<^sub>s\<^sub>s\<^sub>t
       (dual\<^sub>l\<^sub>s\<^sub>s\<^sub>t ?A) =
      trms\<^sub>l\<^sub>s\<^sub>s\<^sub>t ?A",
     template_equation
      (template_app
        (template_hole 2,
         template_app
          (template_hole 1,
           template_app (template_hole 0, template_var 0))),
       template_app
        (template_hole 2, template_app (template_hole 1, template_var 0)))),
    ("Labeled_Stateful_Strands.bvars\<^sub>l\<^sub>s\<^sub>s\<^sub>t_subst",
     "bvars\<^sub>l\<^sub>s\<^sub>s\<^sub>t
       (?A \<cdot>\<^sub>l\<^sub>s\<^sub>s\<^sub>t ?\<delta>) =
      bvars\<^sub>l\<^sub>s\<^sub>s\<^sub>t ?A",
     template_equation
      (template_app
        (template_hole 2,
         template_app
          (template_hole 1,
           template_app
            (template_app (template_hole 0, template_var 1),
             template_var 0))),
       template_app
        (template_hole 2, template_app (template_hole 1, template_var 1)))),
    ("Labeled_Stateful_Strands.setops\<^sub>l\<^sub>s\<^sub>s\<^sub>t\<^sub>p_subst_cases",
     "setops\<^sub>l\<^sub>s\<^sub>s\<^sub>t\<^sub>p
       ((?l,
         receive\<langle>?t\<rangle>) \<cdot>\<^sub>l\<^sub>s\<^sub>s\<^sub>t\<^sub>p
        ?\<delta>) =
      {}",
     template_equation
      (template_app
        (template_hole 4,
         template_app
          (template_app
            (template_hole 3,
             template_app
              (template_app (template_hole 2, template_var 2),
               template_app (template_hole 1, template_var 1))),
           template_var 0)),
       template_hole 0)),
    ("Labeled_Stateful_Strands.setops\<^sub>l\<^sub>s\<^sub>s\<^sub>t\<^sub>p_subst_cases",
     "setops\<^sub>l\<^sub>s\<^sub>s\<^sub>t\<^sub>p
       ((?l,
         send\<langle>?t\<rangle>) \<cdot>\<^sub>l\<^sub>s\<^sub>s\<^sub>t\<^sub>p
        ?\<delta>) =
      {}",
     template_equation
      (template_app
        (template_hole 4,
         template_app
          (template_app
            (template_hole 3,
             template_app
              (template_app (template_hole 2, template_var 2),
               template_app (template_hole 1, template_var 1))),
           template_var 0)),
       template_hole 0)),
    ("Labeled_Stateful_Strands.dual\<^sub>l\<^sub>s\<^sub>s\<^sub>t_subst",
     "dual\<^sub>l\<^sub>s\<^sub>s\<^sub>t
       (?S \<cdot>\<^sub>l\<^sub>s\<^sub>s\<^sub>t ?\<delta>) =
      dual\<^sub>l\<^sub>s\<^sub>s\<^sub>t
       ?S \<cdot>\<^sub>l\<^sub>s\<^sub>s\<^sub>t
      ?\<delta>",
     template_equation
      (template_app
        (template_hole 1,
         template_app
          (template_app (template_hole 0, template_var 1), template_var 0)),
       template_app
        (template_app
          (template_hole 0, template_app (template_hole 1, template_var 1)),
         template_var 0))),
    ("Labeled_Stateful_Strands.proj_dual\<^sub>l\<^sub>s\<^sub>s\<^sub>t",
     "proj ?l (dual\<^sub>l\<^sub>s\<^sub>s\<^sub>t ?A) =
      dual\<^sub>l\<^sub>s\<^sub>s\<^sub>t (proj ?l ?A)",
     template_equation
      (template_app
        (template_app (template_hole 1, template_var 1),
         template_app (template_hole 0, template_var 0)),
       template_app
        (template_hole 0,
         template_app
          (template_app (template_hole 1, template_var 1),
           template_var 0)))),
    ("Labeled_Stateful_Strands.subst_lsst_unlabel",
     "unlabel (?A \<cdot>\<^sub>l\<^sub>s\<^sub>s\<^sub>t ?\<delta>) =
      unlabel ?A \<cdot>\<^sub>s\<^sub>s\<^sub>t ?\<delta>",
     template_equation
      (template_app
        (template_hole 2,
         template_app
          (template_app (template_hole 1, template_var 1), template_var 0)),
       template_app
        (template_app
          (template_hole 0, template_app (template_hole 2, template_var 1)),
         template_var 0))),
    ("Labeled_Stateful_Strands.unlabel_subst",
     "unlabel ?S \<cdot>\<^sub>s\<^sub>s\<^sub>t ?\<delta> =
      unlabel (?S \<cdot>\<^sub>l\<^sub>s\<^sub>s\<^sub>t ?\<delta>)",
     template_equation
      (template_app
        (template_app
          (template_hole 2, template_app (template_hole 1, template_var 1)),
         template_var 0),
       template_app
        (template_hole 1,
         template_app
          (template_app (template_hole 0, template_var 1),
           template_var 0)))),
    ("Labeled_Stateful_Strands.dual\<^sub>l\<^sub>s\<^sub>s\<^sub>t\<^sub>p_subst",
     "dual\<^sub>l\<^sub>s\<^sub>s\<^sub>t\<^sub>p
       (?s \<cdot>\<^sub>l\<^sub>s\<^sub>s\<^sub>t\<^sub>p ?\<delta>) =
      dual\<^sub>l\<^sub>s\<^sub>s\<^sub>t\<^sub>p
       ?s \<cdot>\<^sub>l\<^sub>s\<^sub>s\<^sub>t\<^sub>p
      ?\<delta>",
     template_equation
      (template_app
        (template_hole 1,
         template_app
          (template_app (template_hole 0, template_var 1), template_var 0)),
       template_app
        (template_app
          (template_hole 0, template_app (template_hole 1, template_var 1)),
         template_var 0))),
    ("Labeled_Stateful_Strands.sst_vars_proj_subset",
     "bvars\<^sub>l\<^sub>s\<^sub>s\<^sub>t (proj ?n ?A)
      <= bvars\<^sub>l\<^sub>s\<^sub>s\<^sub>t ?A",
     template_inequation
      (less_equals,
       template_app
        (template_hole 2,
         template_app
          (template_hole 1,
           template_app
            (template_app (template_hole 0, template_var 1),
             template_var 0))),
       template_app
        (template_hole 2, template_app (template_hole 1, template_var 0)))),
    ("Labeled_Stateful_Strands.sst_vars_proj_subset",
     "fv\<^sub>l\<^sub>s\<^sub>s\<^sub>t (proj ?n ?A)
      <= fv\<^sub>l\<^sub>s\<^sub>s\<^sub>t ?A",
     template_inequation
      (less_equals,
       template_app
        (template_hole 2,
         template_app
          (template_hole 1,
           template_app
            (template_app (template_hole 0, template_var 1),
             template_var 0))),
       template_app
        (template_hole 2, template_app (template_hole 1, template_var 0)))),
    ("Labeled_Stateful_Strands.sst_vars_proj_subset",
     "vars\<^sub>l\<^sub>s\<^sub>s\<^sub>t (proj ?n ?A)
      <= vars\<^sub>l\<^sub>s\<^sub>s\<^sub>t ?A",
     template_inequation
      (less_equals,
       template_app
        (template_hole 2,
         template_app
          (template_hole 1,
           template_app
            (template_app (template_hole 0, template_var 1),
             template_var 0))),
       template_app
        (template_hole 2, template_app (template_hole 1, template_var 0)))),
    ("Labeled_Stateful_Strands.trms\<^sub>s\<^sub>s\<^sub>t_unlabel_prefix_subset",
     "trms\<^sub>l\<^sub>s\<^sub>s\<^sub>t ?A
      <= trms\<^sub>l\<^sub>s\<^sub>s\<^sub>t (?A @ ?B)",
     template_inequation
      (less_equals,
       template_app
        (template_hole 2, template_app (template_hole 1, template_var 1)),
       template_app
        (template_hole 2,
         template_app
          (template_hole 1,
           template_app
            (template_app (template_hole 0, template_var 1),
             template_var 0))))),
    ("Labeled_Stateful_Strands.trms\<^sub>s\<^sub>s\<^sub>t_unlabel_suffix_subset",
     "trms\<^sub>l\<^sub>s\<^sub>s\<^sub>t ?B
      <= trms\<^sub>l\<^sub>s\<^sub>s\<^sub>t (?A @ ?B)",
     template_inequation
      (less_equals,
       template_app
        (template_hole 2, template_app (template_hole 1, template_var 1)),
       template_app
        (template_hole 2,
         template_app
          (template_hole 1,
           template_app
            (template_app (template_hole 0, template_var 0),
             template_var 1))))),
    ("Labeled_Stateful_Strands.trms\<^sub>s\<^sub>s\<^sub>t_proj_subset",
     "trms\<^sub>l\<^sub>s\<^sub>s\<^sub>t (proj ?n ?A)
      <= trms\<^sub>l\<^sub>s\<^sub>s\<^sub>t ?A",
     template_inequation
      (less_equals,
       template_app
        (template_hole 2,
         template_app
          (template_hole 1,
           template_app
            (template_app (template_hole 0, template_var 1),
             template_var 0))),
       template_app
        (template_hole 2, template_app (template_hole 1, template_var 0)))),
    ("Labeled_Stateful_Strands.setops\<^sub>s\<^sub>s\<^sub>t_unlabel_prefix_subset",
     "setops\<^sub>s\<^sub>s\<^sub>t (unlabel ?A)
      <= setops\<^sub>s\<^sub>s\<^sub>t (unlabel (?A @ ?B))",
     template_inequation
      (less_equals,
       template_app
        (template_hole 2, template_app (template_hole 1, template_var 1)),
       template_app
        (template_hole 2,
         template_app
          (template_hole 1,
           template_app
            (template_app (template_hole 0, template_var 1),
             template_var 0))))),
    ("Labeled_Stateful_Strands.setops\<^sub>s\<^sub>s\<^sub>t_unlabel_suffix_subset",
     "setops\<^sub>s\<^sub>s\<^sub>t (unlabel ?B)
      <= setops\<^sub>s\<^sub>s\<^sub>t (unlabel (?A @ ?B))",
     template_inequation
      (less_equals,
       template_app
        (template_hole 2, template_app (template_hole 1, template_var 1)),
       template_app
        (template_hole 2,
         template_app
          (template_hole 1,
           template_app
            (template_app (template_hole 0, template_var 0),
             template_var 1))))),
    ("Labeled_Stateful_Strands.setops\<^sub>s\<^sub>s\<^sub>t_proj_subset",
     "setops\<^sub>s\<^sub>s\<^sub>t (proj_unl ?n ?A)
      <= setops\<^sub>s\<^sub>s\<^sub>t (unlabel ?A)",
     template_inequation
      (less_equals,
       template_app
        (template_hole 2,
         template_app
          (template_hole 1,
           template_app
            (template_app (template_hole 0, template_var 1),
             template_var 0))),
       template_app
        (template_hole 2, template_app (template_hole 1, template_var 0)))),
    ("Labeled_Stateful_Strands.setops\<^sub>l\<^sub>s\<^sub>s\<^sub>t_cons",
     "setops\<^sub>l\<^sub>s\<^sub>s\<^sub>t (?x # ?S) =
      setops\<^sub>l\<^sub>s\<^sub>s\<^sub>t\<^sub>p ?x Un
      setops\<^sub>l\<^sub>s\<^sub>s\<^sub>t ?S",
     template_equation
      (template_app
        (template_hole 3,
         template_app
          (template_app (template_hole 2, template_var 1), template_var 0)),
       template_app
        (template_app
          (template_hole 1, template_app (template_hole 0, template_var 1)),
         template_app (template_hole 3, template_var 0)))),
    ("Labeled_Stateful_Strands.dual\<^sub>l\<^sub>s\<^sub>s\<^sub>t_append",
     "dual\<^sub>l\<^sub>s\<^sub>s\<^sub>t (?A @ ?B) =
      dual\<^sub>l\<^sub>s\<^sub>s\<^sub>t ?A @
      dual\<^sub>l\<^sub>s\<^sub>s\<^sub>t ?B",
     template_equation
      (template_app
        (template_hole 1,
         template_app
          (template_app (template_hole 0, template_var 1), template_var 0)),
       template_app
        (template_app
          (template_hole 0, template_app (template_hole 1, template_var 1)),
         template_app (template_hole 1, template_var 0)))),
    ("Labeled_Stateful_Strands.setops\<^sub>l\<^sub>s\<^sub>s\<^sub>t\<^sub>p_subst_cases",
     "setops\<^sub>l\<^sub>s\<^sub>s\<^sub>t\<^sub>p
       ((?l,
         \<langle>?ac: ?s \<doteq> ?t\<rangle>) \<cdot>\<^sub>l\<^sub>s\<^sub>s\<^sub>t\<^sub>p
        ?\<delta>) =
      {}",
     template_equation
      (template_app
        (template_hole 4,
         template_app
          (template_app
            (template_hole 3,
             template_app
              (template_app (template_hole 2, template_var 4),
               template_app
                (template_app
                  (template_app (template_hole 1, template_var 3),
                   template_var 2),
                 template_var 1))),
           template_var 0)),
       template_hole 0)),
    ("Labeled_Stateful_Strands.proj_subst",
     "proj ?l (?A \<cdot>\<^sub>l\<^sub>s\<^sub>s\<^sub>t ?\<delta>) =
      proj ?l ?A \<cdot>\<^sub>l\<^sub>s\<^sub>s\<^sub>t ?\<delta>",
     template_equation
      (template_app
        (template_app (template_hole 1, template_var 2),
         template_app
          (template_app (template_hole 0, template_var 1), template_var 0)),
       template_app
        (template_app
          (template_hole 0,
           template_app
            (template_app (template_hole 1, template_var 2),
             template_var 1)),
         template_var 0))),
    ("Labeled_Stateful_Strands.dual\<^sub>l\<^sub>s\<^sub>s\<^sub>t_subst_unlabel",
     "unlabel
       (dual\<^sub>l\<^sub>s\<^sub>s\<^sub>t
         (?S \<cdot>\<^sub>l\<^sub>s\<^sub>s\<^sub>t ?\<delta>)) =
      unlabel
       (dual\<^sub>l\<^sub>s\<^sub>s\<^sub>t
         ?S) \<cdot>\<^sub>s\<^sub>s\<^sub>t
      ?\<delta>",
     template_equation
      (template_app
        (template_hole 3,
         template_app
          (template_hole 2,
           template_app
            (template_app (template_hole 1, template_var 1),
             template_var 0))),
       template_app
        (template_app
          (template_hole 0,
           template_app
            (template_hole 3,
             template_app (template_hole 2, template_var 1))),
         template_var 0))),
    ("Labeled_Stateful_Strands.proj_proj_set_subset",
     "set (proj ?n (proj ?m ?A)) <= set (proj ?m ?A)",
     template_inequation
      (less_equals,
       template_app
        (template_hole 1,
         template_app
          (template_app (template_hole 0, template_var 2),
           template_app
            (template_app (template_hole 0, template_var 1),
             template_var 0))),
       template_app
        (template_hole 1,
         template_app
          (template_app (template_hole 0, template_var 1),
           template_var 0)))),
    ("Labeled_Stateful_Strands.proj_proj_set_subset",
     "set (proj ?n (proj ?m ?A)) <= set (proj ?n ?A)",
     template_inequation
      (less_equals,
       template_app
        (template_hole 1,
         template_app
          (template_app (template_hole 0, template_var 2),
           template_app
            (template_app (template_hole 0, template_var 1),
             template_var 0))),
       template_app
        (template_hole 1,
         template_app
          (template_app (template_hole 0, template_var 2),
           template_var 0)))),
    ("Labeled_Stateful_Strands.setops\<^sub>l\<^sub>s\<^sub>s\<^sub>t_prefix_subset",
     "setops\<^sub>l\<^sub>s\<^sub>s\<^sub>t (proj ?n ?A)
      <= setops\<^sub>l\<^sub>s\<^sub>s\<^sub>t (proj ?n (?A @ ?B))",
     template_inequation
      (less_equals,
       template_app
        (template_hole 2,
         template_app
          (template_app (template_hole 1, template_var 2), template_var 1)),
       template_app
        (template_hole 2,
         template_app
          (template_app (template_hole 1, template_var 2),
           template_app
            (template_app (template_hole 0, template_var 1),
             template_var 0))))),
    ("Labeled_Stateful_Strands.setops\<^sub>l\<^sub>s\<^sub>s\<^sub>t_suffix_subset",
     "setops\<^sub>l\<^sub>s\<^sub>s\<^sub>t (proj ?n ?B)
      <= setops\<^sub>l\<^sub>s\<^sub>s\<^sub>t (proj ?n (?A @ ?B))",
     template_inequation
      (less_equals,
       template_app
        (template_hole 2,
         template_app
          (template_app (template_hole 1, template_var 2), template_var 1)),
       template_app
        (template_hole 2,
         template_app
          (template_app (template_hole 1, template_var 2),
           template_app
            (template_app (template_hole 0, template_var 0),
             template_var 1))))),
    ("Labeled_Stateful_Strands.setops\<^sub>l\<^sub>s\<^sub>s\<^sub>t_proj_subset",
     "setops\<^sub>l\<^sub>s\<^sub>s\<^sub>t (proj ?m (proj ?n ?A))
      <= setops\<^sub>l\<^sub>s\<^sub>s\<^sub>t (proj ?n ?A)",
     template_inequation
      (less_equals,
       template_app
        (template_hole 1,
         template_app
          (template_app (template_hole 0, template_var 2),
           template_app
            (template_app (template_hole 0, template_var 1),
             template_var 0))),
       template_app
        (template_hole 1,
         template_app
          (template_app (template_hole 0, template_var 1),
           template_var 0)))),
    ("Labeled_Stateful_Strands.dual\<^sub>l\<^sub>s\<^sub>s\<^sub>t_list_all",
     "list_all is_Delete (unlabel ?A) ==>
      list_all is_Delete
       (unlabel (dual\<^sub>l\<^sub>s\<^sub>s\<^sub>t ?A))",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 3, template_hole 2),
              template_app (template_hole 1, template_var 0))
            )],
       template_predicate
        (
           template_app
            (template_app (template_hole 3, template_hole 2),
             template_app
              (template_hole 1,
               template_app (template_hole 0, template_var 0)))
           ))),
    ("Labeled_Stateful_Strands.dual\<^sub>l\<^sub>s\<^sub>s\<^sub>t_list_all",
     "list_all stateful_strand_step.is_Equality (unlabel ?A) ==>
      list_all stateful_strand_step.is_Equality
       (unlabel (dual\<^sub>l\<^sub>s\<^sub>s\<^sub>t ?A))",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 3, template_hole 2),
              template_app (template_hole 1, template_var 0))
            )],
       template_predicate
        (
           template_app
            (template_app (template_hole 3, template_hole 2),
             template_app
              (template_hole 1,
               template_app (template_hole 0, template_var 0)))
           ))),
    ("Labeled_Stateful_Strands.dual\<^sub>l\<^sub>s\<^sub>s\<^sub>t_list_all",
     "list_all is_InSet (unlabel ?A) ==>
      list_all is_InSet
       (unlabel (dual\<^sub>l\<^sub>s\<^sub>s\<^sub>t ?A))",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 3, template_hole 2),
              template_app (template_hole 1, template_var 0))
            )],
       template_predicate
        (
           template_app
            (template_app (template_hole 3, template_hole 2),
             template_app
              (template_hole 1,
               template_app (template_hole 0, template_var 0)))
           ))),
    ("Labeled_Stateful_Strands.dual\<^sub>l\<^sub>s\<^sub>s\<^sub>t_list_all",
     "list_all is_Insert (unlabel ?A) ==>
      list_all is_Insert
       (unlabel (dual\<^sub>l\<^sub>s\<^sub>s\<^sub>t ?A))",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 3, template_hole 2),
              template_app (template_hole 1, template_var 0))
            )],
       template_predicate
        (
           template_app
            (template_app (template_hole 3, template_hole 2),
             template_app
              (template_hole 1,
               template_app (template_hole 0, template_var 0)))
           ))),
    ("Labeled_Stateful_Strands.dual\<^sub>l\<^sub>s\<^sub>s\<^sub>t_list_all",
     "list_all is_NegChecks (unlabel ?A) ==>
      list_all is_NegChecks
       (unlabel (dual\<^sub>l\<^sub>s\<^sub>s\<^sub>t ?A))",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 3, template_hole 2),
              template_app (template_hole 1, template_var 0))
            )],
       template_predicate
        (
           template_app
            (template_app (template_hole 3, template_hole 2),
             template_app
              (template_hole 1,
               template_app (template_hole 0, template_var 0)))
           ))),
    ("Labeled_Stateful_Strands.dual\<^sub>l\<^sub>s\<^sub>s\<^sub>t_list_all",
     "list_all stateful_strand_step.is_Receive (unlabel ?A) ==>
      list_all stateful_strand_step.is_Send
       (unlabel (dual\<^sub>l\<^sub>s\<^sub>s\<^sub>t ?A))",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 4, template_hole 3),
              template_app (template_hole 2, template_var 0))
            )],
       template_predicate
        (
           template_app
            (template_app (template_hole 4, template_hole 1),
             template_app
              (template_hole 2,
               template_app (template_hole 0, template_var 0)))
           ))),
    ("Labeled_Stateful_Strands.dual\<^sub>l\<^sub>s\<^sub>s\<^sub>t_list_all",
     "list_all stateful_strand_step.is_Send (unlabel ?A) ==>
      list_all stateful_strand_step.is_Receive
       (unlabel (dual\<^sub>l\<^sub>s\<^sub>s\<^sub>t ?A))",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 4, template_hole 3),
              template_app (template_hole 2, template_var 0))
            )],
       template_predicate
        (
           template_app
            (template_app (template_hole 4, template_hole 1),
             template_app
              (template_hole 2,
               template_app (template_hole 0, template_var 0)))
           ))),
    ("Labeled_Stateful_Strands.setops\<^sub>l\<^sub>s\<^sub>s\<^sub>t\<^sub>pD",
     "?p : setops\<^sub>l\<^sub>s\<^sub>s\<^sub>t\<^sub>p ?a ==>
      fst ?p = fst ?a",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 4, template_var 1),
              template_app (template_hole 3, template_var 0))
            )],
       template_equation
        (template_app (template_hole 1, template_var 1),
         template_app (template_hole 0, template_var 0)))),
    ("Labeled_Stateful_Strands.setops\<^sub>l\<^sub>s\<^sub>s\<^sub>t_mono",
     "set ?M <= set ?N ==>
      setops\<^sub>l\<^sub>s\<^sub>s\<^sub>t ?M
      <= setops\<^sub>l\<^sub>s\<^sub>s\<^sub>t ?N",
     template_implication
      ([template_inequation
         (less_equals, template_app (template_hole 2, template_var 1),
          template_app (template_hole 2, template_var 0))],
       template_inequation
        (less_equals, template_app (template_hole 0, template_var 1),
         template_app (template_hole 0, template_var 0)))),
    ("Labeled_Stateful_Strands.subst_lsst_append",
     "?A @ ?B \<cdot>\<^sub>l\<^sub>s\<^sub>s\<^sub>t ?\<delta> =
      (?A \<cdot>\<^sub>l\<^sub>s\<^sub>s\<^sub>t ?\<delta>) @
      (?B \<cdot>\<^sub>l\<^sub>s\<^sub>s\<^sub>t ?\<delta>)",
     template_equation
      (template_app
        (template_app
          (template_hole 1,
           template_app
            (template_app (template_hole 0, template_var 2),
             template_var 1)),
         template_var 0),
       template_app
        (template_app
          (template_hole 0,
           template_app
            (template_app (template_hole 1, template_var 2),
             template_var 0)),
         template_app
          (template_app (template_hole 1, template_var 1),
           template_var 0)))),
    ("Labeled_Stateful_Strands.subst_lsst_cons",
     "?a # ?A \<cdot>\<^sub>l\<^sub>s\<^sub>s\<^sub>t ?\<delta> =
      (?a \<cdot>\<^sub>l\<^sub>s\<^sub>s\<^sub>t\<^sub>p ?\<delta>) #
      (?A \<cdot>\<^sub>l\<^sub>s\<^sub>s\<^sub>t ?\<delta>)",
     template_equation
      (template_app
        (template_app
          (template_hole 2,
           template_app
            (template_app (template_hole 1, template_var 2),
             template_var 1)),
         template_var 0),
       template_app
        (template_app
          (template_hole 1,
           template_app
            (template_app (template_hole 0, template_var 2),
             template_var 0)),
         template_app
          (template_app (template_hole 2, template_var 1),
           template_var 0)))),
    ("Labeled_Stateful_Strands.dbproj_subset",
     "set (unlabel (dbproj ?i ?D)) <= set (unlabel ?D)",
     template_inequation
      (less_equals,
       template_app
        (template_hole 4,
         template_app
          (template_hole 3,
           template_app
            (template_app (template_hole 2, t_empty), template_var 0))),
       template_app
        (template_hole 4, template_app (template_hole 3, template_var 0)))),
    ("Labeled_Stateful_Strands.proj_proj_set_subset",
     "set (proj_unl ?n (proj ?m ?A)) <= set (proj_unl ?m ?A)",
     template_inequation
      (less_equals,
       template_app
        (template_hole 2,
         template_app
          (template_hole 1,
           template_app
            (template_app (template_hole 0, template_var 2),
             template_app
              (template_app (template_hole 0, template_var 1),
               template_var 0)))),
       template_app
        (template_hole 2,
         template_app
          (template_hole 1,
           template_app
            (template_app (template_hole 0, template_var 1),
             template_var 0))))),
    ("Labeled_Stateful_Strands.proj_proj_set_subset",
     "set (proj_unl ?n (proj ?m ?A)) <= set (proj_unl ?n ?A)",
     template_inequation
      (less_equals,
       template_app
        (template_hole 2,
         template_app
          (template_hole 1,
           template_app
            (template_app (template_hole 0, template_var 2),
             template_app
              (template_app (template_hole 0, template_var 1),
               template_var 0)))),
       template_app
        (template_hole 2,
         template_app
          (template_hole 1,
           template_app
            (template_app (template_hole 0, template_var 2),
             template_var 0))))),
    ("Labeled_Stateful_Strands.trms\<^sub>s\<^sub>s\<^sub>t_unlabel_prefix_subset",
     "trms\<^sub>l\<^sub>s\<^sub>s\<^sub>t (proj ?n ?A)
      <= trms\<^sub>l\<^sub>s\<^sub>s\<^sub>t (proj ?n (?A @ ?B))",
     template_inequation
      (less_equals,
       template_app
        (template_hole 3,
         template_app
          (template_hole 2,
           template_app
            (template_app (template_hole 1, template_var 2),
             template_var 1))),
       template_app
        (template_hole 3,
         template_app
          (template_hole 2,
           template_app
            (template_app (template_hole 1, template_var 2),
             template_app
              (template_app (template_hole 0, template_var 1),
               template_var 0)))))),
    ("Labeled_Stateful_Strands.trms\<^sub>s\<^sub>s\<^sub>t_unlabel_suffix_subset",
     "trms\<^sub>l\<^sub>s\<^sub>s\<^sub>t (proj ?n ?B)
      <= trms\<^sub>l\<^sub>s\<^sub>s\<^sub>t (proj ?n (?A @ ?B))",
     template_inequation
      (less_equals,
       template_app
        (template_hole 3,
         template_app
          (template_hole 2,
           template_app
            (template_app (template_hole 1, template_var 2),
             template_var 1))),
       template_app
        (template_hole 3,
         template_app
          (template_hole 2,
           template_app
            (template_app (template_hole 1, template_var 2),
             template_app
              (template_app (template_hole 0, template_var 0),
               template_var 1)))))),
    ("Labeled_Stateful_Strands.trms\<^sub>s\<^sub>s\<^sub>t_proj_subset",
     "trms\<^sub>l\<^sub>s\<^sub>s\<^sub>t (proj ?m (proj ?n ?A))
      <= trms\<^sub>l\<^sub>s\<^sub>s\<^sub>t (proj ?m ?A)",
     template_inequation
      (less_equals,
       template_app
        (template_hole 2,
         template_app
          (template_hole 1,
           template_app
            (template_app (template_hole 0, template_var 2),
             template_app
              (template_app (template_hole 0, template_var 1),
               template_var 0)))),
       template_app
        (template_hole 2,
         template_app
          (template_hole 1,
           template_app
            (template_app (template_hole 0, template_var 2),
             template_var 0))))),
    ("Labeled_Stateful_Strands.trms\<^sub>s\<^sub>s\<^sub>t_proj_subset",
     "trms\<^sub>l\<^sub>s\<^sub>s\<^sub>t (proj ?m (proj ?n ?A))
      <= trms\<^sub>l\<^sub>s\<^sub>s\<^sub>t (proj ?n ?A)",
     template_inequation
      (less_equals,
       template_app
        (template_hole 2,
         template_app
          (template_hole 1,
           template_app
            (template_app (template_hole 0, template_var 2),
             template_app
              (template_app (template_hole 0, template_var 1),
               template_var 0)))),
       template_app
        (template_hole 2,
         template_app
          (template_hole 1,
           template_app
            (template_app (template_hole 0, template_var 1),
             template_var 0))))),
    ("Labeled_Stateful_Strands.setops\<^sub>s\<^sub>s\<^sub>t_unlabel_prefix_subset",
     "setops\<^sub>s\<^sub>s\<^sub>t (proj_unl ?n ?A)
      <= setops\<^sub>s\<^sub>s\<^sub>t (proj_unl ?n (?A @ ?B))",
     template_inequation
      (less_equals,
       template_app
        (template_hole 3,
         template_app
          (template_hole 2,
           template_app
            (template_app (template_hole 1, template_var 2),
             template_var 1))),
       template_app
        (template_hole 3,
         template_app
          (template_hole 2,
           template_app
            (template_app (template_hole 1, template_var 2),
             template_app
              (template_app (template_hole 0, template_var 1),
               template_var 0)))))),
    ("Labeled_Stateful_Strands.setops\<^sub>s\<^sub>s\<^sub>t_unlabel_suffix_subset",
     "setops\<^sub>s\<^sub>s\<^sub>t (proj_unl ?n ?B)
      <= setops\<^sub>s\<^sub>s\<^sub>t (proj_unl ?n (?A @ ?B))",
     template_inequation
      (less_equals,
       template_app
        (template_hole 3,
         template_app
          (template_hole 2,
           template_app
            (template_app (template_hole 1, template_var 2),
             template_var 1))),
       template_app
        (template_hole 3,
         template_app
          (template_hole 2,
           template_app
            (template_app (template_hole 1, template_var 2),
             template_app
              (template_app (template_hole 0, template_var 0),
               template_var 1)))))),
    ("Labeled_Stateful_Strands.setops\<^sub>s\<^sub>s\<^sub>t_proj_subset",
     "setops\<^sub>s\<^sub>s\<^sub>t (proj_unl ?m (proj ?n ?A))
      <= setops\<^sub>s\<^sub>s\<^sub>t (proj_unl ?m ?A)",
     template_inequation
      (less_equals,
       template_app
        (template_hole 2,
         template_app
          (template_hole 1,
           template_app
            (template_app (template_hole 0, template_var 2),
             template_app
              (template_app (template_hole 0, template_var 1),
               template_var 0)))),
       template_app
        (template_hole 2,
         template_app
          (template_hole 1,
           template_app
            (template_app (template_hole 0, template_var 2),
             template_var 0))))),
    ("Labeled_Stateful_Strands.setops\<^sub>s\<^sub>s\<^sub>t_proj_subset",
     "setops\<^sub>s\<^sub>s\<^sub>t (proj_unl ?m (proj ?n ?A))
      <= setops\<^sub>s\<^sub>s\<^sub>t (proj_unl ?n ?A)",
     template_inequation
      (less_equals,
       template_app
        (template_hole 2,
         template_app
          (template_hole 1,
           template_app
            (template_app (template_hole 0, template_var 2),
             template_app
              (template_app (template_hole 0, template_var 1),
               template_var 0)))),
       template_app
        (template_hole 2,
         template_app
          (template_hole 1,
           template_app
            (template_app (template_hole 0, template_var 1),
             template_var 0))))),
    ("Labeled_Stateful_Strands.dual\<^sub>l\<^sub>s\<^sub>s\<^sub>t\<^sub>p_inv",
     "dual\<^sub>l\<^sub>s\<^sub>s\<^sub>t\<^sub>p (?l, ?a) = (?k, ?b) ==>
      ?l = ?k",
     template_implication
      ([template_equation
         (template_app
           (template_hole 2,
            template_app
             (template_app (template_hole 1, template_var 3),
              template_var 2)),
          template_app
           (template_app (template_hole 1, template_var 1),
            template_var 0))],
       template_equation (template_var 3, template_var 1))),
    ("Labeled_Stateful_Strands.dual\<^sub>l\<^sub>s\<^sub>s\<^sub>t_funs_term",
     "\<Union>
       (funs_term `
        trms\<^sub>l\<^sub>s\<^sub>s\<^sub>t
         (dual\<^sub>l\<^sub>s\<^sub>s\<^sub>t ?S)) =
      \<Union> (funs_term ` trms\<^sub>l\<^sub>s\<^sub>s\<^sub>t ?S)",
     template_equation
      (template_app
        (template_hole 5,
         template_app
          (template_app (template_hole 4, template_hole 3),
           template_app
            (template_hole 2,
             template_app
              (template_hole 1,
               template_app (template_hole 0, template_var 0))))),
       template_app
        (template_hole 5,
         template_app
          (template_app (template_hole 4, template_hole 3),
           template_app
            (template_hole 2,
             template_app (template_hole 1, template_var 0)))))),
    ("Labeled_Stateful_Strands.fv\<^sub>s\<^sub>s\<^sub>t_unlabel_Cons",
     "fv\<^sub>l\<^sub>s\<^sub>s\<^sub>t ((?l, ?b) # ?A) =
      fv\<^sub>s\<^sub>s\<^sub>t\<^sub>p ?b Un
      fv\<^sub>l\<^sub>s\<^sub>s\<^sub>t ?A",
     template_equation
      (template_app
        (template_hole 5,
         template_app
          (template_hole 4,
           template_app
            (template_app
              (template_hole 3,
               template_app
                (template_app (template_hole 2, template_var 2),
                 template_var 1)),
             template_var 0))),
       template_app
        (template_app
          (template_hole 1, template_app (template_hole 0, template_var 1)),
         template_app
          (template_hole 5,
           template_app (template_hole 4, template_var 0))))),
    ("Labeled_Stateful_Strands.vars\<^sub>s\<^sub>s\<^sub>t_unlabel_Cons",
     "vars\<^sub>l\<^sub>s\<^sub>s\<^sub>t ((?l, ?b) # ?A) =
      vars\<^sub>s\<^sub>s\<^sub>t\<^sub>p ?b Un
      vars\<^sub>l\<^sub>s\<^sub>s\<^sub>t ?A",
     template_equation
      (template_app
        (template_hole 5,
         template_app
          (template_hole 4,
           template_app
            (template_app
              (template_hole 3,
               template_app
                (template_app (template_hole 2, template_var 2),
                 template_var 1)),
             template_var 0))),
       template_app
        (template_app
          (template_hole 1, template_app (template_hole 0, template_var 1)),
         template_app
          (template_hole 5,
           template_app (template_hole 4, template_var 0))))),
    ("Labeled_Stateful_Strands.dual\<^sub>l\<^sub>s\<^sub>s\<^sub>t_unlabel_steps_iff",
     "(receive\<langle>?t\<rangle> : set (unlabel ?A)) =
      (send\<langle>?t\<rangle>
       : set (unlabel (dual\<^sub>l\<^sub>s\<^sub>s\<^sub>t ?A)))",
     template_equation
      (template_app
        (template_app
          (template_hole 5, template_app (template_hole 4, template_var 1)),
         template_app
          (template_hole 3,
           template_app (template_hole 2, template_var 0))),
       template_app
        (template_app
          (template_hole 5, template_app (template_hole 1, template_var 1)),
         template_app
          (template_hole 3,
           template_app
            (template_hole 2,
             template_app (template_hole 0, template_var 0)))))),
    ("Labeled_Stateful_Strands.dual\<^sub>l\<^sub>s\<^sub>s\<^sub>t_unlabel_steps_iff",
     "(send\<langle>?t\<rangle> : set (unlabel ?A)) =
      (receive\<langle>?t\<rangle>
       : set (unlabel (dual\<^sub>l\<^sub>s\<^sub>s\<^sub>t ?A)))",
     template_equation
      (template_app
        (template_app
          (template_hole 5, template_app (template_hole 4, template_var 1)),
         template_app
          (template_hole 3,
           template_app (template_hole 2, template_var 0))),
       template_app
        (template_app
          (template_hole 5, template_app (template_hole 1, template_var 1)),
         template_app
          (template_hole 3,
           template_app
            (template_hole 2,
             template_app (template_hole 0, template_var 0)))))),
    ("Labeled_Stateful_Strands.dual\<^sub>l\<^sub>s\<^sub>s\<^sub>t_subst_append",
     "dual\<^sub>l\<^sub>s\<^sub>s\<^sub>t
       (?A @ ?B \<cdot>\<^sub>l\<^sub>s\<^sub>s\<^sub>t ?\<sigma>) =
      dual\<^sub>l\<^sub>s\<^sub>s\<^sub>t ?A @
      dual\<^sub>l\<^sub>s\<^sub>s\<^sub>t
       ?B \<cdot>\<^sub>l\<^sub>s\<^sub>s\<^sub>t
      ?\<sigma>",
     template_equation
      (template_app
        (template_hole 2,
         template_app
          (template_app
            (template_hole 1,
             template_app
              (template_app (template_hole 0, template_var 2),
               template_var 1)),
           template_var 0)),
       template_app
        (template_app
          (template_hole 1,
           template_app
            (template_app
              (template_hole 0,
               template_app (template_hole 2, template_var 2)),
             template_app (template_hole 2, template_var 1))),
         template_var 0))),
    ("Labeled_Stateful_Strands.subst_lsst_member",
     "?x : set ?A ==>
      ?x \<cdot>\<^sub>l\<^sub>s\<^sub>s\<^sub>t\<^sub>p ?\<delta>
      : set (?A \<cdot>\<^sub>l\<^sub>s\<^sub>s\<^sub>t ?\<delta>)",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 3, template_var 2),
              template_app (template_hole 2, template_var 1))
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 3,
               template_app
                (template_app (template_hole 1, template_var 2),
                 template_var 0)),
             template_app
              (template_hole 2,
               template_app
                (template_app (template_hole 0, template_var 1),
                 template_var 0)))
           ))),
    ("Labeled_Stateful_Strands.bvars\<^sub>s\<^sub>s\<^sub>t_unlabel_Cons",
     "bvars\<^sub>l\<^sub>s\<^sub>s\<^sub>t ((?l, ?b) # ?A) =
      set (bvars\<^sub>s\<^sub>s\<^sub>t\<^sub>p ?b) Un
      bvars\<^sub>l\<^sub>s\<^sub>s\<^sub>t ?A",
     template_equation
      (template_app
        (template_hole 6,
         template_app
          (template_hole 5,
           template_app
            (template_app
              (template_hole 4,
               template_app
                (template_app (template_hole 3, template_var 2),
                 template_var 1)),
             template_var 0))),
       template_app
        (template_app
          (template_hole 2,
           template_app
            (template_hole 1,
             template_app (template_hole 0, template_var 1))),
         template_app
          (template_hole 6,
           template_app (template_hole 5, template_var 0))))),
    ("Labeled_Stateful_Strands.proj_in_set_iff",
     "((\<star>, ?d) : set (proj ?i ?D)) = ((\<star>, ?d) : set ?D)",
     template_equation
      (template_app
        (template_app
          (template_hole 4,
           template_app
            (template_app (template_hole 3, template_hole 2),
             template_var 2)),
         template_app
          (template_hole 1,
           template_app
            (template_app (template_hole 0, template_var 1),
             template_var 0))),
       template_app
        (template_app
          (template_hole 4,
           template_app
            (template_app (template_hole 3, template_hole 2),
             template_var 2)),
         template_app (template_hole 1, template_var 0)))),
    ("Labeled_Stateful_Strands.proj_list_insert",
     "proj ?i (List.insert (\<star>, ?d) ?D) =
      List.insert (\<star>, ?d) (proj ?i ?D)",
     template_equation
      (template_app
        (template_app (template_hole 3, template_var 2),
         template_app
          (template_app
            (template_hole 2,
             template_app
              (template_app (template_hole 1, template_hole 0),
               template_var 1)),
           template_var 0)),
       template_app
        (template_app
          (template_hole 2,
           template_app
            (template_app (template_hole 1, template_hole 0),
             template_var 1)),
         template_app
          (template_app (template_hole 3, template_var 2),
           template_var 0)))),
    ("Labeled_Stateful_Strands.proj_list_Cons",
     "proj ?i ((\<star>, ?d) # ?D) = (\<star>, ?d) # proj ?i ?D",
     template_equation
      (template_app
        (template_app (template_hole 3, template_var 2),
         template_app
          (template_app
            (template_hole 2,
             template_app
              (template_app (template_hole 1, template_hole 0),
               template_var 1)),
           template_var 0)),
       template_app
        (template_app
          (template_hole 2,
           template_app
            (template_app (template_hole 1, template_hole 0),
             template_var 1)),
         template_app
          (template_app (template_hole 3, template_var 2),
           template_var 0)))),
    ("Labeled_Stateful_Strands.dual\<^sub>l\<^sub>s\<^sub>s\<^sub>t_Cons",
     "dual\<^sub>l\<^sub>s\<^sub>s\<^sub>t
       ((?l, receive\<langle>?t\<rangle>) # ?A) =
      (?l, send\<langle>?t\<rangle>) #
      dual\<^sub>l\<^sub>s\<^sub>s\<^sub>t ?A",
     template_equation
      (template_app
        (template_hole 4,
         template_app
          (template_app
            (template_hole 3,
             template_app
              (template_app (template_hole 2, template_var 2),
               template_app (template_hole 1, template_var 1))),
           template_var 0)),
       template_app
        (template_app
          (template_hole 3,
           template_app
            (template_app (template_hole 2, template_var 2),
             template_app (template_hole 0, template_var 1))),
         template_app (template_hole 4, template_var 0)))),
    ("Labeled_Stateful_Strands.dual\<^sub>l\<^sub>s\<^sub>s\<^sub>t_Cons",
     "dual\<^sub>l\<^sub>s\<^sub>s\<^sub>t
       ((?l, send\<langle>?t\<rangle>) # ?A) =
      (?l, receive\<langle>?t\<rangle>) #
      dual\<^sub>l\<^sub>s\<^sub>s\<^sub>t ?A",
     template_equation
      (template_app
        (template_hole 4,
         template_app
          (template_app
            (template_hole 3,
             template_app
              (template_app (template_hole 2, template_var 2),
               template_app (template_hole 1, template_var 1))),
           template_var 0)),
       template_app
        (template_app
          (template_hole 3,
           template_app
            (template_app (template_hole 2, template_var 2),
             template_app (template_hole 0, template_var 1))),
         template_app (template_hole 4, template_var 0)))),
    ("Labeled_Stateful_Strands.subst_lsst_singleton",
     "[(?l, ?s)] \<cdot>\<^sub>l\<^sub>s\<^sub>s\<^sub>t ?\<delta> =
      [(?l, ?s \<cdot>\<^sub>s\<^sub>s\<^sub>t\<^sub>p ?\<delta>)]",
     template_equation
      (template_app
        (template_app
          (template_hole 4,
           template_app
            (template_app
              (template_hole 3,
               template_app
                (template_app (template_hole 2, template_var 2),
                 template_var 1)),
             template_hole 1)),
         template_var 0),
       template_app
        (template_app
          (template_hole 3,
           template_app
            (template_app (template_hole 2, template_var 2),
             template_app
              (template_app (template_hole 0, template_var 1),
               template_var 0))),
         template_hole 1))),
    ("Labeled_Stateful_Strands.dual\<^sub>l\<^sub>s\<^sub>s\<^sub>t_steps_iff",
     "((?l, receive\<langle>?t\<rangle>) : set ?A) =
      ((?l, send\<langle>?t\<rangle>)
       : set (dual\<^sub>l\<^sub>s\<^sub>s\<^sub>t ?A))",
     template_equation
      (template_app
        (template_app
          (template_hole 5,
           template_app
            (template_app (template_hole 4, template_var 2),
             template_app (template_hole 3, template_var 1))),
         template_app (template_hole 2, template_var 0)),
       template_app
        (template_app
          (template_hole 5,
           template_app
            (template_app (template_hole 4, template_var 2),
             template_app (template_hole 1, template_var 1))),
         template_app
          (template_hole 2,
           template_app (template_hole 0, template_var 0))))),
    ("Labeled_Stateful_Strands.dual\<^sub>l\<^sub>s\<^sub>s\<^sub>t_steps_iff",
     "((?l, send\<langle>?t\<rangle>) : set ?A) =
      ((?l, receive\<langle>?t\<rangle>)
       : set (dual\<^sub>l\<^sub>s\<^sub>s\<^sub>t ?A))",
     template_equation
      (template_app
        (template_app
          (template_hole 5,
           template_app
            (template_app (template_hole 4, template_var 2),
             template_app (template_hole 3, template_var 1))),
         template_app (template_hole 2, template_var 0)),
       template_app
        (template_app
          (template_hole 5,
           template_app
            (template_app (template_hole 4, template_var 2),
             template_app (template_hole 1, template_var 1))),
         template_app
          (template_hole 2,
           template_app (template_hole 0, template_var 0))))),
    ("Labeled_Stateful_Strands.dual\<^sub>l\<^sub>s\<^sub>s\<^sub>t_unlabel_steps_iff",
     "(delete\<langle>?t,?s\<rangle> : set (unlabel ?A)) =
      (delete\<langle>?t,?s\<rangle>
       : set (unlabel (dual\<^sub>l\<^sub>s\<^sub>s\<^sub>t ?A)))",
     template_equation
      (template_app
        (template_app
          (template_hole 4,
           template_app
            (template_app (template_hole 3, template_var 2),
             template_var 1)),
         template_app
          (template_hole 2,
           template_app (template_hole 1, template_var 0))),
       template_app
        (template_app
          (template_hole 4,
           template_app
            (template_app (template_hole 3, template_var 2),
             template_var 1)),
         template_app
          (template_hole 2,
           template_app
            (template_hole 1,
             template_app (template_hole 0, template_var 0)))))),
    ("Labeled_Stateful_Strands.dual\<^sub>l\<^sub>s\<^sub>s\<^sub>t_unlabel_steps_iff",
     "(insert\<langle>?t,?s\<rangle> : set (unlabel ?A)) =
      (insert\<langle>?t,?s\<rangle>
       : set (unlabel (dual\<^sub>l\<^sub>s\<^sub>s\<^sub>t ?A)))",
     template_equation
      (template_app
        (template_app
          (template_hole 4,
           template_app
            (template_app (template_hole 3, template_var 2),
             template_var 1)),
         template_app
          (template_hole 2,
           template_app (template_hole 1, template_var 0))),
       template_app
        (template_app
          (template_hole 4,
           template_app
            (template_app (template_hole 3, template_var 2),
             template_var 1)),
         template_app
          (template_hole 2,
           template_app
            (template_hole 1,
             template_app (template_hole 0, template_var 0)))))),
    ("Labeled_Stateful_Strands.db\<^sub>s\<^sub>s\<^sub>t_dual\<^sub>l\<^sub>s\<^sub>s\<^sub>t",
     "db'\<^sub>l\<^sub>s\<^sub>s\<^sub>t
       (dual\<^sub>l\<^sub>s\<^sub>s\<^sub>t
         (?T \<cdot>\<^sub>l\<^sub>s\<^sub>s\<^sub>t ?\<delta>))
       ?\<I> ?D =
      db'\<^sub>l\<^sub>s\<^sub>s\<^sub>t
       (?T \<cdot>\<^sub>l\<^sub>s\<^sub>s\<^sub>t ?\<delta>) ?\<I> ?D",
     template_equation
      (template_app
        (template_app
          (template_app
            (template_hole 3,
             template_app
              (template_hole 2,
               template_app
                (template_hole 1,
                 template_app
                  (template_app (template_hole 0, template_var 3),
                   template_var 2)))),
           template_var 1),
         template_var 0),
       template_app
        (template_app
          (template_app
            (template_hole 3,
             template_app
              (template_hole 2,
               template_app
                (template_app (template_hole 0, template_var 3),
                 template_var 2))),
           template_var 1),
         template_var 0))),
    ("Labeled_Stateful_Strands.dual\<^sub>l\<^sub>s\<^sub>s\<^sub>t_subst_cons",
     "dual\<^sub>l\<^sub>s\<^sub>s\<^sub>t
       (?a # ?A \<cdot>\<^sub>l\<^sub>s\<^sub>s\<^sub>t ?\<sigma>) =
      (dual\<^sub>l\<^sub>s\<^sub>s\<^sub>t\<^sub>p
        ?a \<cdot>\<^sub>l\<^sub>s\<^sub>s\<^sub>t\<^sub>p
       ?\<sigma>) #
      dual\<^sub>l\<^sub>s\<^sub>s\<^sub>t
       (?A \<cdot>\<^sub>l\<^sub>s\<^sub>s\<^sub>t ?\<sigma>)",
     template_equation
      (template_app
        (template_hole 4,
         template_app
          (template_app
            (template_hole 3,
             template_app
              (template_app (template_hole 2, template_var 2),
               template_var 1)),
           template_var 0)),
       template_app
        (template_app
          (template_hole 2,
           template_app
            (template_app
              (template_hole 1,
               template_app (template_hole 0, template_var 2)),
             template_var 0)),
         template_app
          (template_hole 4,
           template_app
            (template_app (template_hole 3, template_var 1),
             template_var 0))))),
    ("Labeled_Stateful_Strands.subst_lsst_unlabel_member",
     "?x : set (unlabel ?A) ==>
      ?x \<cdot>\<^sub>s\<^sub>s\<^sub>t\<^sub>p ?\<delta>
      : set (unlabel
              (?A \<cdot>\<^sub>l\<^sub>s\<^sub>s\<^sub>t ?\<delta>))",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 4, template_var 2),
              template_app
               (template_hole 3,
                template_app (template_hole 2, template_var 1)))
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 4,
               template_app
                (template_app (template_hole 1, template_var 2),
                 template_var 0)),
             template_app
              (template_hole 3,
               template_app
                (template_hole 2,
                 template_app
                  (template_app (template_hole 0, template_var 1),
                   template_var 0))))
           ))),
    ("Labeled_Stateful_Strands.proj_in_set_iff",
     "((ln ?i, ?d) : set (proj ?i ?D)) = ((ln ?i, ?d) : set ?D)",
     template_equation
      (template_app
        (template_app
          (template_hole 4,
           template_app
            (template_app
              (template_hole 3,
               template_app (template_hole 2, template_var 2)),
             template_var 1)),
         template_app
          (template_hole 1,
           template_app
            (template_app (template_hole 0, template_var 2),
             template_var 0))),
       template_app
        (template_app
          (template_hole 4,
           template_app
            (template_app
              (template_hole 3,
               template_app (template_hole 2, template_var 2)),
             template_var 1)),
         template_app (template_hole 1, template_var 0)))),
    ("Labeled_Stateful_Strands.db\<^sub>s\<^sub>s\<^sub>t_unlabel_append",
     "db'\<^sub>l\<^sub>s\<^sub>s\<^sub>t (?A @ ?B) ?I ?D =
      db'\<^sub>l\<^sub>s\<^sub>s\<^sub>t ?B ?I
       (db'\<^sub>l\<^sub>s\<^sub>s\<^sub>t ?A ?I ?D)",
     template_equation
      (template_app
        (template_app
          (template_app
            (template_hole 2,
             template_app
              (template_hole 1,
               template_app
                (template_app (template_hole 0, template_var 3),
                 template_var 2))),
           template_var 1),
         template_var 0),
       template_app
        (template_app
          (template_app
            (template_hole 2,
             template_app (template_hole 1, template_var 2)),
           template_var 1),
         template_app
          (template_app
            (template_app
              (template_hole 2,
               template_app (template_hole 1, template_var 3)),
             template_var 1),
           template_var 0)))),
    ("Labeled_Stateful_Strands.proj_list_insert",
     "proj ?i (List.insert (ln ?i, ?d) ?D) =
      List.insert (ln ?i, ?d) (proj ?i ?D)",
     template_equation
      (template_app
        (template_app (template_hole 3, template_var 2),
         template_app
          (template_app
            (template_hole 2,
             template_app
              (template_app
                (template_hole 1,
                 template_app (template_hole 0, template_var 2)),
               template_var 1)),
           template_var 0)),
       template_app
        (template_app
          (template_hole 2,
           template_app
            (template_app
              (template_hole 1,
               template_app (template_hole 0, template_var 2)),
             template_var 1)),
         template_app
          (template_app (template_hole 3, template_var 2),
           template_var 0)))),
    ("Labeled_Stateful_Strands.proj_list_Cons",
     "proj ?i ((ln ?i, ?d) # ?D) = (ln ?i, ?d) # proj ?i ?D",
     template_equation
      (template_app
        (template_app (template_hole 3, template_var 2),
         template_app
          (template_app
            (template_hole 2,
             template_app
              (template_app
                (template_hole 1,
                 template_app (template_hole 0, template_var 2)),
               template_var 1)),
           template_var 0)),
       template_app
        (template_app
          (template_hole 2,
           template_app
            (template_app
              (template_hole 1,
               template_app (template_hole 0, template_var 2)),
             template_var 1)),
         template_app
          (template_app (template_hole 3, template_var 2),
           template_var 0)))),
    ("Labeled_Stateful_Strands.proj_dbproj",
     "dbproj \<star> (proj ?i ?D) = dbproj \<star> ?D",
     template_equation
      (template_app
        (template_app (template_hole 4, t_empty),
         template_app
          (template_app (template_hole 0, template_var 1), template_var 0)),
       template_app
        (template_app (template_hole 4, t_empty), template_var 0))),
    ("Labeled_Stateful_Strands.dual\<^sub>l\<^sub>s\<^sub>s\<^sub>t_Cons",
     "dual\<^sub>l\<^sub>s\<^sub>s\<^sub>t
       ((?l, delete\<langle>?t,?s\<rangle>) # ?A) =
      (?l, delete\<langle>?t,?s\<rangle>) #
      dual\<^sub>l\<^sub>s\<^sub>s\<^sub>t ?A",
     template_equation
      (template_app
        (template_hole 3,
         template_app
          (template_app
            (template_hole 2,
             template_app
              (template_app (template_hole 1, template_var 3),
               template_app
                (template_app (template_hole 0, template_var 2),
                 template_var 1))),
           template_var 0)),
       template_app
        (template_app
          (template_hole 2,
           template_app
            (template_app (template_hole 1, template_var 3),
             template_app
              (template_app (template_hole 0, template_var 2),
               template_var 1))),
         template_app (template_hole 3, template_var 0)))),
    ("Labeled_Stateful_Strands.dual\<^sub>l\<^sub>s\<^sub>s\<^sub>t_Cons",
     "dual\<^sub>l\<^sub>s\<^sub>s\<^sub>t
       ((?l, insert\<langle>?t,?s\<rangle>) # ?A) =
      (?l, insert\<langle>?t,?s\<rangle>) #
      dual\<^sub>l\<^sub>s\<^sub>s\<^sub>t ?A",
     template_equation
      (template_app
        (template_hole 3,
         template_app
          (template_app
            (template_hole 2,
             template_app
              (template_app (template_hole 1, template_var 3),
               template_app
                (template_app (template_hole 0, template_var 2),
                 template_var 1))),
           template_var 0)),
       template_app
        (template_app
          (template_hole 2,
           template_app
            (template_app (template_hole 1, template_var 3),
             template_app
              (template_app (template_hole 0, template_var 2),
               template_var 1))),
         template_app (template_hole 3, template_var 0)))),
    ("Labeled_Stateful_Strands.subst_lsst_unlabel_cons",
     "unlabel
       ((?l, ?b) # ?A \<cdot>\<^sub>l\<^sub>s\<^sub>s\<^sub>t ?\<theta>) =
      (?b \<cdot>\<^sub>s\<^sub>s\<^sub>t\<^sub>p ?\<theta>) #
      unlabel (?A \<cdot>\<^sub>l\<^sub>s\<^sub>s\<^sub>t ?\<theta>)",
     template_equation
      (template_app
        (template_hole 5,
         template_app
          (template_app
            (template_hole 4,
             template_app
              (template_app
                (template_hole 3,
                 template_app
                  (template_app (template_hole 2, template_var 3),
                   template_var 2)),
               template_var 1)),
           template_var 0)),
       template_app
        (template_app
          (template_hole 1,
           template_app
            (template_app (template_hole 0, template_var 2),
             template_var 0)),
         template_app
          (template_hole 5,
           template_app
            (template_app (template_hole 4, template_var 1),
             template_var 0))))),
    ("Labeled_Stateful_Strands.unlabel_subseqsD",
     "?A : set (subseqs (unlabel ?B)) ==>
      EX C:set (subseqs ?B). unlabel C = ?A",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 7, template_var 1),
              template_app
               (template_hole 6,
                template_app
                 (template_hole 5,
                  template_app (template_hole 4, template_var 0))))
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 3,
               template_app
                (template_hole 2,
                 template_app (template_hole 1, template_var 0))),
             t_empty)
           ))),
    ("Labeled_Stateful_Strands.dual\<^sub>l\<^sub>s\<^sub>s\<^sub>t_steps_iff",
     "((?l, delete\<langle>?t,?s\<rangle>) : set ?A) =
      ((?l, delete\<langle>?t,?s\<rangle>)
       : set (dual\<^sub>l\<^sub>s\<^sub>s\<^sub>t ?A))",
     template_equation
      (template_app
        (template_app
          (template_hole 4,
           template_app
            (template_app (template_hole 3, template_var 3),
             template_app
              (template_app (template_hole 2, template_var 2),
               template_var 1))),
         template_app (template_hole 1, template_var 0)),
       template_app
        (template_app
          (template_hole 4,
           template_app
            (template_app (template_hole 3, template_var 3),
             template_app
              (template_app (template_hole 2, template_var 2),
               template_var 1))),
         template_app
          (template_hole 1,
           template_app (template_hole 0, template_var 0))))),
    ("Labeled_Stateful_Strands.dual\<^sub>l\<^sub>s\<^sub>s\<^sub>t_steps_iff",
     "((?l, insert\<langle>?t,?s\<rangle>) : set ?A) =
      ((?l, insert\<langle>?t,?s\<rangle>)
       : set (dual\<^sub>l\<^sub>s\<^sub>s\<^sub>t ?A))",
     template_equation
      (template_app
        (template_app
          (template_hole 4,
           template_app
            (template_app (template_hole 3, template_var 3),
             template_app
              (template_app (template_hole 2, template_var 2),
               template_var 1))),
         template_app (template_hole 1, template_var 0)),
       template_app
        (template_app
          (template_hole 4,
           template_app
            (template_app (template_hole 3, template_var 3),
             template_app
              (template_app (template_hole 2, template_var 2),
               template_var 1))),
         template_app
          (template_hole 1,
           template_app (template_hole 0, template_var 0))))),
    ("Labeled_Stateful_Strands.dual\<^sub>l\<^sub>s\<^sub>s\<^sub>t_unlabel_steps_iff",
     "(\<langle>?c: ?t \<doteq> ?s\<rangle> : set (unlabel ?A)) =
      (\<langle>?c: ?t \<doteq> ?s\<rangle>
       : set (unlabel (dual\<^sub>l\<^sub>s\<^sub>s\<^sub>t ?A)))",
     template_equation
      (template_app
        (template_app
          (template_hole 4,
           template_app
            (template_app
              (template_app (template_hole 3, template_var 3),
               template_var 2),
             template_var 1)),
         template_app
          (template_hole 2,
           template_app (template_hole 1, template_var 0))),
       template_app
        (template_app
          (template_hole 4,
           template_app
            (template_app
              (template_app (template_hole 3, template_var 3),
               template_var 2),
             template_var 1)),
         template_app
          (template_hole 2,
           template_app
            (template_hole 1,
             template_app (template_hole 0, template_var 0)))))),
    ("Labeled_Stateful_Strands.dual\<^sub>l\<^sub>s\<^sub>s\<^sub>t_unlabel_steps_iff",
     "(\<langle>?c: ?t \<in> ?s\<rangle> : set (unlabel ?A)) =
      (\<langle>?c: ?t \<in> ?s\<rangle>
       : set (unlabel (dual\<^sub>l\<^sub>s\<^sub>s\<^sub>t ?A)))",
     template_equation
      (template_app
        (template_app
          (template_hole 4,
           template_app
            (template_app
              (template_app (template_hole 3, template_var 3),
               template_var 2),
             template_var 1)),
         template_app
          (template_hole 2,
           template_app (template_hole 1, template_var 0))),
       template_app
        (template_app
          (template_hole 4,
           template_app
            (template_app
              (template_app (template_hole 3, template_var 3),
               template_var 2),
             template_var 1)),
         template_app
          (template_hole 2,
           template_app
            (template_hole 1,
             template_app (template_hole 0, template_var 0)))))),
    ("Labeled_Stateful_Strands.dual\<^sub>l\<^sub>s\<^sub>s\<^sub>t_unlabel_steps_iff",
     "(\<forall>?X\<langle>\<or>\<noteq>: ?F \<or>\<notin>: ?G\<rangle>
       : set (unlabel ?A)) =
      (\<forall>?X\<langle>\<or>\<noteq>: ?F \<or>\<notin>: ?G\<rangle>
       : set (unlabel (dual\<^sub>l\<^sub>s\<^sub>s\<^sub>t ?A)))",
     template_equation
      (template_app
        (template_app
          (template_hole 4,
           template_app
            (template_app
              (template_app (template_hole 3, template_var 3),
               template_var 2),
             template_var 1)),
         template_app
          (template_hole 2,
           template_app (template_hole 1, template_var 0))),
       template_app
        (template_app
          (template_hole 4,
           template_app
            (template_app
              (template_app (template_hole 3, template_var 3),
               template_var 2),
             template_var 1)),
         template_app
          (template_hole 2,
           template_app
            (template_hole 1,
             template_app (template_hole 0, template_var 0)))))),
    ("Labeled_Stateful_Strands.proj_list_insert",
     "?i ~= ?j ==> proj ?i (List.insert (ln ?j, ?d) ?D) = proj ?i ?D",
     template_implication
      ([template_negation
         (template_equation (template_var 3, template_var 2))],
       template_equation
        (template_app
          (template_app (template_hole 3, template_var 3),
           template_app
            (template_app
              (template_hole 2,
               template_app
                (template_app
                  (template_hole 1,
                   template_app (template_hole 0, template_var 2)),
                 template_var 1)),
             template_var 0)),
         template_app
          (template_app (template_hole 3, template_var 3),
           template_var 0)))),
    ("Labeled_Stateful_Strands.proj_list_Cons",
     "?i ~= ?j ==> proj ?i ((ln ?j, ?d) # ?D) = proj ?i ?D",
     template_implication
      ([template_negation
         (template_equation (template_var 3, template_var 2))],
       template_equation
        (template_app
          (template_app (template_hole 3, template_var 3),
           template_app
            (template_app
              (template_hole 2,
               template_app
                (template_app
                  (template_hole 1,
                   template_app (template_hole 0, template_var 2)),
                 template_var 1)),
             template_var 0)),
         template_app
          (template_app (template_hole 3, template_var 3),
           template_var 0)))),
    ("Labeled_Stateful_Strands.proj_dbproj",
     "?i ~= ?j ==> dbproj ln ?j (proj ?i ?D) = []",
     template_implication
      ([template_negation
         (template_equation (template_var 2, template_var 1))],
       template_equation
        (template_app
          (template_app (template_hole 5, t_empty),
           template_app
            (template_app (template_hole 1, template_var 2),
             template_var 0)),
         template_hole 0))),
    ("Labeled_Stateful_Strands.subst_lsst_prefix",
     "prefix ?B (?A \<cdot>\<^sub>l\<^sub>s\<^sub>s\<^sub>t ?\<theta>) ==>
      EX C. C \<cdot>\<^sub>l\<^sub>s\<^sub>s\<^sub>t ?\<theta> = ?B &
            prefix C ?A",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 4, template_var 2),
              template_app
               (template_app (template_hole 3, template_var 1),
                template_var 0))
            )],
       template_predicate (template_app (template_hole 2, t_empty)))),
    ("Labeled_Stateful_Strands.dbproj_subseq_subset",
     "?Di : set (subseqs (dbproj ?i ?D)) ==> set ?Di <= set ?D",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 7, template_var 2),
              template_app
               (template_hole 6,
                template_app
                 (template_hole 5,
                  template_app
                   (template_app (template_hole 4, t_empty),
                    template_var 0))))
            )],
       template_inequation
        (less_equals, template_app (template_hole 0, template_var 2),
         template_app (template_hole 0, template_var 0)))),
    ("Labeled_Stateful_Strands.dbproj_subseq_in_subseqs",
     "?Di : set (subseqs (dbproj ?i ?D)) ==> ?Di : set (subseqs ?D)",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 5, template_var 2),
              template_app
               (template_hole 4,
                template_app
                 (template_hole 3,
                  template_app
                   (template_app (template_hole 2, t_empty),
                    template_var 0))))
            )],
       template_predicate
        (
           template_app
            (template_app (template_hole 5, template_var 2),
             template_app
              (template_hole 4,
               template_app (template_hole 3, template_var 0)))
           ))),
    ("Labeled_Stateful_Strands.proj_dbproj",
     "dbproj ln ?i (proj ?i ?D) = dbproj ln ?i ?D",
     template_equation
      (template_app
        (template_app (template_hole 4, t_empty),
         template_app
          (template_app (template_hole 0, template_var 1), template_var 0)),
       template_app
        (template_app (template_hole 4, t_empty), template_var 0))),
    ("Labeled_Stateful_Strands.dual\<^sub>l\<^sub>s\<^sub>s\<^sub>t_Cons",
     "dual\<^sub>l\<^sub>s\<^sub>s\<^sub>t
       ((?l, \<langle>?a: ?t \<doteq> ?s\<rangle>) # ?A) =
      (?l, \<langle>?a: ?t \<doteq> ?s\<rangle>) #
      dual\<^sub>l\<^sub>s\<^sub>s\<^sub>t ?A",
     template_equation
      (template_app
        (template_hole 3,
         template_app
          (template_app
            (template_hole 2,
             template_app
              (template_app (template_hole 1, template_var 4),
               template_app
                (template_app
                  (template_app (template_hole 0, template_var 3),
                   template_var 2),
                 template_var 1))),
           template_var 0)),
       template_app
        (template_app
          (template_hole 2,
           template_app
            (template_app (template_hole 1, template_var 4),
             template_app
              (template_app
                (template_app (template_hole 0, template_var 3),
                 template_var 2),
               template_var 1))),
         template_app (template_hole 3, template_var 0)))),
    ("Labeled_Stateful_Strands.dual\<^sub>l\<^sub>s\<^sub>s\<^sub>t_Cons",
     "dual\<^sub>l\<^sub>s\<^sub>s\<^sub>t
       ((?l, \<langle>?a: ?t \<in> ?s\<rangle>) # ?A) =
      (?l, \<langle>?a: ?t \<in> ?s\<rangle>) #
      dual\<^sub>l\<^sub>s\<^sub>s\<^sub>t ?A",
     template_equation
      (template_app
        (template_hole 3,
         template_app
          (template_app
            (template_hole 2,
             template_app
              (template_app (template_hole 1, template_var 4),
               template_app
                (template_app
                  (template_app (template_hole 0, template_var 3),
                   template_var 2),
                 template_var 1))),
           template_var 0)),
       template_app
        (template_app
          (template_hole 2,
           template_app
            (template_app (template_hole 1, template_var 4),
             template_app
              (template_app
                (template_app (template_hole 0, template_var 3),
                 template_var 2),
               template_var 1))),
         template_app (template_hole 3, template_var 0)))),
    ("Labeled_Stateful_Strands.dual\<^sub>l\<^sub>s\<^sub>s\<^sub>t_Cons",
     "dual\<^sub>l\<^sub>s\<^sub>s\<^sub>t
       ((?l,
         \<forall>?X\<langle>\<or>\<noteq>: ?F \<or>\<notin>: ?G\<rangle>) #
        ?A) =
      (?l,
       \<forall>?X\<langle>\<or>\<noteq>: ?F \<or>\<notin>: ?G\<rangle>) #
      dual\<^sub>l\<^sub>s\<^sub>s\<^sub>t ?A",
     template_equation
      (template_app
        (template_hole 3,
         template_app
          (template_app
            (template_hole 2,
             template_app
              (template_app (template_hole 1, template_var 4),
               template_app
                (template_app
                  (template_app (template_hole 0, template_var 3),
                   template_var 2),
                 template_var 1))),
           template_var 0)),
       template_app
        (template_app
          (template_hole 2,
           template_app
            (template_app (template_hole 1, template_var 4),
             template_app
              (template_app
                (template_app (template_hole 0, template_var 3),
                 template_var 2),
               template_var 1))),
         template_app (template_hole 3, template_var 0)))),
    ("Labeled_Stateful_Strands.labeled_list_insert_eq_cases",
     "?d ~: set (unlabel ?D) ==>
      List.insert ?d (unlabel ?D) = unlabel (List.insert (?i, ?d) ?D)",
     template_implication
      ([template_negation
         (
            template_predicate
             (
                template_app
                 (template_app (template_hole 6, template_var 2),
                  template_app
                   (template_hole 5,
                    template_app (template_hole 4, template_var 1)))
                )
            )],
       template_equation
        (template_app
          (template_app (template_hole 2, template_var 2),
           template_app (template_hole 4, template_var 1)),
         template_app
          (template_hole 4,
           template_app
            (template_app
              (template_hole 1,
               template_app
                (template_app (template_hole 0, template_var 0),
                 template_var 2)),
             template_var 1))))),
    ("Labeled_Stateful_Strands.labeled_list_insert_eq_cases",
     "(?i, ?d) : set ?D ==>
      List.insert ?d (unlabel ?D) = unlabel (List.insert (?i, ?d) ?D)",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_hole 6,
                template_app
                 (template_app (template_hole 5, template_var 2),
                  template_var 1)),
              template_app (template_hole 4, template_var 0))
            )],
       template_equation
        (template_app
          (template_app (template_hole 2, template_var 1),
           template_app (template_hole 1, template_var 0)),
         template_app
          (template_hole 1,
           template_app
            (template_app
              (template_hole 0,
               template_app
                (template_app (template_hole 5, template_var 2),
                 template_var 1)),
             template_var 0))))),
    ("Labeled_Stateful_Strands.trms\<^sub>s\<^sub>s\<^sub>t_unlabel_subst_cons",
     "trms\<^sub>l\<^sub>s\<^sub>s\<^sub>t
       ((?l, ?b) # ?A \<cdot>\<^sub>l\<^sub>s\<^sub>s\<^sub>t ?\<delta>) =
      trms\<^sub>s\<^sub>s\<^sub>t\<^sub>p
       (?b \<cdot>\<^sub>s\<^sub>s\<^sub>t\<^sub>p ?\<delta>) Un
      trms\<^sub>l\<^sub>s\<^sub>s\<^sub>t
       (?A \<cdot>\<^sub>l\<^sub>s\<^sub>s\<^sub>t ?\<delta>)",
     template_equation
      (template_app
        (template_hole 7,
         template_app
          (template_hole 6,
           template_app
            (template_app
              (template_hole 5,
               template_app
                (template_app
                  (template_hole 4,
                   template_app
                    (template_app (template_hole 3, template_var 3),
                     template_var 2)),
                 template_var 1)),
             template_var 0))),
       template_app
        (template_app
          (template_hole 2,
           template_app
            (template_hole 1,
             template_app
              (template_app (template_hole 0, template_var 2),
               template_var 0))),
         template_app
          (template_hole 7,
           template_app
            (template_hole 6,
             template_app
              (template_app (template_hole 5, template_var 1),
               template_var 0)))))),
    ("Labeled_Stateful_Strands.setops\<^sub>l\<^sub>s\<^sub>s\<^sub>t\<^sub>p_subst_cases",
     "setops\<^sub>l\<^sub>s\<^sub>s\<^sub>t\<^sub>p
       ((?l,
         delete\<langle>?t,?s\<rangle>) \<cdot>\<^sub>l\<^sub>s\<^sub>s\<^sub>t\<^sub>p
        ?\<delta>) =
      {(?l, ?t \<cdot> ?\<delta>, ?s \<cdot> ?\<delta>)}",
     template_equation
      (template_app
        (template_hole 8,
         template_app
          (template_app
            (template_hole 7,
             template_app
              (template_app (template_hole 6, template_var 3),
               template_app
                (template_app (template_hole 5, template_var 2),
                 template_var 1))),
           template_var 0)),
       template_app
        (template_app
          (template_hole 4,
           template_app
            (template_app (template_hole 3, template_var 3),
             template_app
              (template_app
                (template_hole 2,
                 template_app
                  (template_app (template_hole 1, template_var 2),
                   template_var 0)),
               template_app
                (template_app (template_hole 1, template_var 1),
                 template_var 0)))),
         template_hole 0))),
    ("Labeled_Stateful_Strands.setops\<^sub>l\<^sub>s\<^sub>s\<^sub>t\<^sub>p_subst_cases",
     "setops\<^sub>l\<^sub>s\<^sub>s\<^sub>t\<^sub>p
       ((?l,
         insert\<langle>?t,?s\<rangle>) \<cdot>\<^sub>l\<^sub>s\<^sub>s\<^sub>t\<^sub>p
        ?\<delta>) =
      {(?l, ?t \<cdot> ?\<delta>, ?s \<cdot> ?\<delta>)}",
     template_equation
      (template_app
        (template_hole 8,
         template_app
          (template_app
            (template_hole 7,
             template_app
              (template_app (template_hole 6, template_var 3),
               template_app
                (template_app (template_hole 5, template_var 2),
                 template_var 1))),
           template_var 0)),
       template_app
        (template_app
          (template_hole 4,
           template_app
            (template_app (template_hole 3, template_var 3),
             template_app
              (template_app
                (template_hole 2,
                 template_app
                  (template_app (template_hole 1, template_var 2),
                   template_var 0)),
               template_app
                (template_app (template_hole 1, template_var 1),
                 template_var 0)))),
         template_hole 0))),
    ("Labeled_Stateful_Strands.dual\<^sub>l\<^sub>s\<^sub>s\<^sub>t_steps_iff",
     "((?l, \<langle>?c: ?t \<doteq> ?s\<rangle>) : set ?A) =
      ((?l, \<langle>?c: ?t \<doteq> ?s\<rangle>)
       : set (dual\<^sub>l\<^sub>s\<^sub>s\<^sub>t ?A))",
     template_equation
      (template_app
        (template_app
          (template_hole 4,
           template_app
            (template_app (template_hole 3, template_var 4),
             template_app
              (template_app
                (template_app (template_hole 2, template_var 3),
                 template_var 2),
               template_var 1))),
         template_app (template_hole 1, template_var 0)),
       template_app
        (template_app
          (template_hole 4,
           template_app
            (template_app (template_hole 3, template_var 4),
             template_app
              (template_app
                (template_app (template_hole 2, template_var 3),
                 template_var 2),
               template_var 1))),
         template_app
          (template_hole 1,
           template_app (template_hole 0, template_var 0))))),
    ("Labeled_Stateful_Strands.dual\<^sub>l\<^sub>s\<^sub>s\<^sub>t_steps_iff",
     "((?l, \<langle>?c: ?t \<in> ?s\<rangle>) : set ?A) =
      ((?l, \<langle>?c: ?t \<in> ?s\<rangle>)
       : set (dual\<^sub>l\<^sub>s\<^sub>s\<^sub>t ?A))",
     template_equation
      (template_app
        (template_app
          (template_hole 4,
           template_app
            (template_app (template_hole 3, template_var 4),
             template_app
              (template_app
                (template_app (template_hole 2, template_var 3),
                 template_var 2),
               template_var 1))),
         template_app (template_hole 1, template_var 0)),
       template_app
        (template_app
          (template_hole 4,
           template_app
            (template_app (template_hole 3, template_var 4),
             template_app
              (template_app
                (template_app (template_hole 2, template_var 3),
                 template_var 2),
               template_var 1))),
         template_app
          (template_hole 1,
           template_app (template_hole 0, template_var 0))))),
    ("Labeled_Stateful_Strands.dual\<^sub>l\<^sub>s\<^sub>s\<^sub>t_steps_iff",
     "((?l,
        \<forall>?X\<langle>\<or>\<noteq>: ?F \<or>\<notin>: ?G\<rangle>)
       : set ?A) =
      ((?l,
        \<forall>?X\<langle>\<or>\<noteq>: ?F \<or>\<notin>: ?G\<rangle>)
       : set (dual\<^sub>l\<^sub>s\<^sub>s\<^sub>t ?A))",
     template_equation
      (template_app
        (template_app
          (template_hole 4,
           template_app
            (template_app (template_hole 3, template_var 4),
             template_app
              (template_app
                (template_app (template_hole 2, template_var 3),
                 template_var 2),
               template_var 1))),
         template_app (template_hole 1, template_var 0)),
       template_app
        (template_app
          (template_hole 4,
           template_app
            (template_app (template_hole 3, template_var 4),
             template_app
              (template_app
                (template_app (template_hole 2, template_var 3),
                 template_var 2),
               template_var 1))),
         template_app
          (template_hole 1,
           template_app (template_hole 0, template_var 0))))),
    ("Labeled_Stateful_Strands.dual\<^sub>l\<^sub>s\<^sub>s\<^sub>t_subst_snoc",
     "dual\<^sub>l\<^sub>s\<^sub>s\<^sub>t
       (?A @ [?a] \<cdot>\<^sub>l\<^sub>s\<^sub>s\<^sub>t ?\<sigma>) =
      (dual\<^sub>l\<^sub>s\<^sub>s\<^sub>t
        ?A \<cdot>\<^sub>l\<^sub>s\<^sub>s\<^sub>t
       ?\<sigma>) @
      [dual\<^sub>l\<^sub>s\<^sub>s\<^sub>t\<^sub>p
        ?a \<cdot>\<^sub>l\<^sub>s\<^sub>s\<^sub>t\<^sub>p
       ?\<sigma>]",
     template_equation
      (template_app
        (template_hole 6,
         template_app
          (template_app
            (template_hole 5,
             template_app
              (template_app (template_hole 4, template_var 2),
               template_app
                (template_app (template_hole 3, template_var 1),
                 template_hole 2))),
           template_var 0)),
       template_app
        (template_app
          (template_hole 4,
           template_app
            (template_app
              (template_hole 5,
               template_app (template_hole 6, template_var 2)),
             template_var 0)),
         template_app
          (template_app
            (template_hole 3,
             template_app
              (template_app
                (template_hole 1,
                 template_app (template_hole 0, template_var 1)),
               template_var 0)),
           template_hole 2)))),
    ("Labeled_Stateful_Strands.setops\<^sub>l\<^sub>s\<^sub>s\<^sub>t_proj_subset_if_no_label",
     "~ list_ex (is_LabelN ?l) ?A ==>
      setops\<^sub>l\<^sub>s\<^sub>s\<^sub>t (proj ?l ?A)
      <= setops\<^sub>l\<^sub>s\<^sub>s\<^sub>t (proj ?l' ?A)",
     template_implication
      ([template_negation
         (
            template_predicate
             (
                template_app
                 (template_app (template_hole 6, t_empty), template_var 1)
                )
            )],
       template_inequation
        (less_equals,
         template_app
          (template_hole 1,
           template_app
            (template_app (template_hole 0, template_var 2),
             template_var 1)),
         template_app
          (template_hole 1,
           template_app
            (template_app (template_hole 0, template_var 0),
             template_var 1))))),
    ("Labeled_Stateful_Strands.dual\<^sub>l\<^sub>s\<^sub>s\<^sub>t\<^sub>p_inv",
     "[| dual\<^sub>l\<^sub>s\<^sub>s\<^sub>t\<^sub>p (?l, ?a) = (?k, ?b);
         ?a = receive\<langle>?t\<rangle> |]
      ==> ?b = send\<langle>?t\<rangle>",
     template_implication
      ([template_equation
         (template_app
           (template_hole 4,
            template_app
             (template_app (template_hole 3, template_var 4),
              template_var 3)),
          template_app
           (template_app (template_hole 3, template_var 2),
            template_var 1)),
        template_equation
         (template_var 3, template_app (template_hole 1, template_var 0))],
       template_equation
        (template_var 1, template_app (template_hole 0, template_var 0)))),
    ("Labeled_Stateful_Strands.dual\<^sub>l\<^sub>s\<^sub>s\<^sub>t\<^sub>p_inv",
     "[| dual\<^sub>l\<^sub>s\<^sub>s\<^sub>t\<^sub>p (?l, ?a) = (?k, ?b);
         ?a = send\<langle>?t\<rangle> |]
      ==> ?b = receive\<langle>?t\<rangle>",
     template_implication
      ([template_equation
         (template_app
           (template_hole 4,
            template_app
             (template_app (template_hole 3, template_var 4),
              template_var 3)),
          template_app
           (template_app (template_hole 3, template_var 2),
            template_var 1)),
        template_equation
         (template_var 3, template_app (template_hole 1, template_var 0))],
       template_equation
        (template_var 1, template_app (template_hole 0, template_var 0)))),
    ("Labeled_Stateful_Strands.trms\<^sub>s\<^sub>s\<^sub>t_unlabel_dual_subst_cons",
     "trms\<^sub>l\<^sub>s\<^sub>s\<^sub>t
       (dual\<^sub>l\<^sub>s\<^sub>s\<^sub>t
         (?a # ?A \<cdot>\<^sub>l\<^sub>s\<^sub>s\<^sub>t ?\<sigma>)) =
      trms\<^sub>s\<^sub>s\<^sub>t\<^sub>p
       (snd ?a \<cdot>\<^sub>s\<^sub>s\<^sub>t\<^sub>p ?\<sigma>) Un
      trms\<^sub>l\<^sub>s\<^sub>s\<^sub>t
       (dual\<^sub>l\<^sub>s\<^sub>s\<^sub>t
         (?A \<cdot>\<^sub>l\<^sub>s\<^sub>s\<^sub>t ?\<sigma>))",
     template_equation
      (template_app
        (template_hole 8,
         template_app
          (template_hole 7,
           template_app
            (template_hole 6,
             template_app
              (template_app
                (template_hole 5,
                 template_app
                  (template_app (template_hole 4, template_var 2),
                   template_var 1)),
               template_var 0)))),
       template_app
        (template_app
          (template_hole 3,
           template_app
            (template_hole 2,
             template_app
              (template_app
                (template_hole 1,
                 template_app (template_hole 0, template_var 2)),
               template_var 0))),
         template_app
          (template_hole 8,
           template_app
            (template_hole 7,
             template_app
              (template_hole 6,
               template_app
                (template_app (template_hole 5, template_var 1),
                 template_var 0))))))),
    ("Labeled_Stateful_Strands.setops\<^sub>l\<^sub>s\<^sub>s\<^sub>t\<^sub>p_subst_cases",
     "setops\<^sub>l\<^sub>s\<^sub>s\<^sub>t\<^sub>p
       ((?l,
         \<langle>?ac: ?t \<in> ?s\<rangle>) \<cdot>\<^sub>l\<^sub>s\<^sub>s\<^sub>t\<^sub>p
        ?\<delta>) =
      {(?l, ?t \<cdot> ?\<delta>, ?s \<cdot> ?\<delta>)}",
     template_equation
      (template_app
        (template_hole 8,
         template_app
          (template_app
            (template_hole 7,
             template_app
              (template_app (template_hole 6, template_var 4),
               template_app
                (template_app
                  (template_app (template_hole 5, template_var 3),
                   template_var 2),
                 template_var 1))),
           template_var 0)),
       template_app
        (template_app
          (template_hole 4,
           template_app
            (template_app (template_hole 3, template_var 4),
             template_app
              (template_app
                (template_hole 2,
                 template_app
                  (template_app (template_hole 1, template_var 2),
                   template_var 0)),
               template_app
                (template_app (template_hole 1, template_var 1),
                 template_var 0)))),
         template_hole 0))),
    ("Labeled_Stateful_Strands.proj_filter",
     "proj ?i (filter (%d. d ~: set ?Di) ?D) =
      filter (%d. d ~: set ?Di) (proj ?i ?D)",
     template_equation
      (template_app
        (template_app (template_hole 4, template_var 2),
         template_app
          (template_app (template_hole 3, t_empty), template_var 0)),
       template_app
        (template_app (template_hole 3, t_empty),
         template_app
          (template_app (template_hole 4, template_var 2),
           template_var 0)))),
    ("Labeled_Stateful_Strands.setops\<^sub>l\<^sub>s\<^sub>s\<^sub>t\<^sub>pD",
     "?p : setops\<^sub>l\<^sub>s\<^sub>s\<^sub>t\<^sub>p ?a ==>
      is_Update (snd ?a) | is_InSet (snd ?a) | is_NegChecks (snd ?a)",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 7, template_var 1),
              template_app (template_hole 6, template_var 0))
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 5,
               template_app
                (template_app
                  (template_hole 5,
                   template_app
                    (template_hole 4,
                     template_app (template_hole 3, template_var 0))),
                 template_app
                  (template_hole 2,
                   template_app (template_hole 3, template_var 0)))),
             template_app
              (template_app
                (template_hole 5,
                 template_app
                  (template_hole 1,
                   template_app (template_hole 3, template_var 0))),
               template_app
                (template_hole 0,
                 template_app (template_hole 3, template_var 0))))
           ))),
    ("Labeled_Stateful_Strands.labeled_stateful_strand_subst_comp",
     "range_vars ?\<delta> Int bvars\<^sub>l\<^sub>s\<^sub>s\<^sub>t ?S =
      {} ==>
      ?S \<cdot>\<^sub>l\<^sub>s\<^sub>s\<^sub>t
      ?\<delta> \<circ>\<^sub>s ?\<theta> =
      (?S \<cdot>\<^sub>l\<^sub>s\<^sub>s\<^sub>t
       ?\<delta>) \<cdot>\<^sub>l\<^sub>s\<^sub>s\<^sub>t
      ?\<theta>",
     template_implication
      ([template_equation
         (template_app
           (template_app
             (template_hole 7,
              template_app (template_hole 6, template_var 2)),
            template_app
             (template_hole 5,
              template_app (template_hole 4, template_var 1))),
          template_hole 3)],
       template_equation
        (template_app
          (template_app (template_hole 1, template_var 1),
           template_app
            (template_app (template_hole 0, template_var 2),
             template_var 0)),
         template_app
          (template_app
            (template_hole 1,
             template_app
              (template_app (template_hole 1, template_var 1),
               template_var 2)),
           template_var 0)))),
    ("Labeled_Stateful_Strands.dual\<^sub>l\<^sub>s\<^sub>s\<^sub>t_list_all",
     "list_all is_Update (unlabel ?A) ==>
      list_all is_Update
       (unlabel (dual\<^sub>l\<^sub>s\<^sub>s\<^sub>t ?A))",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 5, t_empty),
              template_app (template_hole 1, template_var 0))
            )],
       template_predicate
        (
           template_app
            (template_app (template_hole 5, t_empty),
             template_app
              (template_hole 1,
               template_app (template_hole 0, template_var 0)))
           ))),
    ("Labeled_Stateful_Strands.trms\<^sub>s\<^sub>s\<^sub>t_unlabel_subset_if_no_label",
     "~ list_ex (is_LabelN ?l) ?A ==>
      trms\<^sub>l\<^sub>s\<^sub>s\<^sub>t (proj ?l ?A)
      <= trms\<^sub>l\<^sub>s\<^sub>s\<^sub>t (proj ?l' ?A)",
     template_implication
      ([template_negation
         (
            template_predicate
             (
                template_app
                 (template_app (template_hole 7, t_empty), template_var 1)
                )
            )],
       template_inequation
        (less_equals,
         template_app
          (template_hole 2,
           template_app
            (template_hole 1,
             template_app
              (template_app (template_hole 0, template_var 2),
               template_var 1))),
         template_app
          (template_hole 2,
           template_app
            (template_hole 1,
             template_app
              (template_app (template_hole 0, template_var 0),
               template_var 1)))))),
    ("Labeled_Stateful_Strands.setops\<^sub>s\<^sub>s\<^sub>t_unlabel_subset_if_no_label",
     "~ list_ex (is_LabelN ?l) ?A ==>
      setops\<^sub>s\<^sub>s\<^sub>t (proj_unl ?l ?A)
      <= setops\<^sub>s\<^sub>s\<^sub>t (proj_unl ?l' ?A)",
     template_implication
      ([template_negation
         (
            template_predicate
             (
                template_app
                 (template_app (template_hole 7, t_empty), template_var 1)
                )
            )],
       template_inequation
        (less_equals,
         template_app
          (template_hole 2,
           template_app
            (template_hole 1,
             template_app
              (template_app (template_hole 0, template_var 2),
               template_var 1))),
         template_app
          (template_hole 2,
           template_app
            (template_hole 1,
             template_app
              (template_app (template_hole 0, template_var 0),
               template_var 1)))))),
    ("Labeled_Stateful_Strands.dbproj_subseq",
     "?Di : set (subseqs (dbproj ?k ?D)) ==> dbproj ?k ?Di = ?Di",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 6, template_var 2),
              template_app
               (template_hole 5,
                template_app
                 (template_hole 4,
                  template_app
                   (template_app (template_hole 3, t_empty),
                    template_var 0))))
            )],
       template_equation
        (template_app
          (template_app (template_hole 3, t_empty), template_var 2),
         template_var 2))),
    ("Labeled_Stateful_Strands.dbproj_Cons",
     "dbproj ?i ((?i, ?d) # ?D) = (?i, ?d) # dbproj ?i ?D",
     template_equation
      (template_app
        (template_app (template_hole 4, t_empty),
         template_app
          (template_app
            (template_hole 1,
             template_app
              (template_app (template_hole 0, template_var 2),
               template_var 1)),
           template_var 0)),
       template_app
        (template_app
          (template_hole 1,
           template_app
            (template_app (template_hole 0, template_var 2),
             template_var 1)),
         template_app
          (template_app (template_hole 4, t_empty), template_var 0)))),
    ("Labeled_Stateful_Strands.dual\<^sub>l\<^sub>s\<^sub>s\<^sub>t_unlabel_member",
     "[| ?x : set (unlabel ?A); ~ stateful_strand_step.is_Receive ?x;
         ~ stateful_strand_step.is_Send ?x |]
      ==> ?x : set (unlabel (dual\<^sub>l\<^sub>s\<^sub>s\<^sub>t ?A))",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 6, template_var 1),
              template_app
               (template_hole 5,
                template_app (template_hole 4, template_var 0)))
            ),
        template_negation
         (
            template_predicate
             (template_app (template_hole 2, template_var 1))
            ),
        template_negation
         (
            template_predicate
             (template_app (template_hole 1, template_var 1))
            )],
       template_predicate
        (
           template_app
            (template_app (template_hole 6, template_var 1),
             template_app
              (template_hole 5,
               template_app
                (template_hole 4,
                 template_app (template_hole 0, template_var 0))))
           ))),
    ("Labeled_Stateful_Strands.trms\<^sub>s\<^sub>s\<^sub>t_unlabel_subst",
     "bvars\<^sub>l\<^sub>s\<^sub>s\<^sub>t ?S Int subst_domain ?\<theta> =
      {} ==>
      trms\<^sub>l\<^sub>s\<^sub>s\<^sub>t
       (?S \<cdot>\<^sub>l\<^sub>s\<^sub>s\<^sub>t ?\<theta>) =
      trms\<^sub>l\<^sub>s\<^sub>s\<^sub>t
       ?S \<cdot>\<^sub>s\<^sub>e\<^sub>t
      ?\<theta>",
     template_implication
      ([template_equation
         (template_app
           (template_app
             (template_hole 9,
              template_app
               (template_hole 8,
                template_app (template_hole 7, template_var 1))),
            template_app (template_hole 6, template_var 0)),
          template_hole 5)],
       template_equation
        (template_app
          (template_hole 3,
           template_app
            (template_hole 7,
             template_app
              (template_app (template_hole 2, template_var 1),
               template_var 0))),
         template_app
          (template_app (template_hole 1, t_empty),
           template_app
            (template_hole 3,
             template_app (template_hole 7, template_var 1)))))),
    ("Labeled_Stateful_Strands.dbproj_Cons",
     "?i ~= ?j ==> dbproj ?j ((?i, ?d) # ?D) = dbproj ?j ?D",
     template_implication
      ([template_negation
         (template_equation (template_var 3, template_var 2))],
       template_equation
        (template_app
          (template_app (template_hole 3, t_empty),
           template_app
            (template_app
              (template_hole 1,
               template_app
                (template_app (template_hole 0, template_var 3),
                 template_var 1)),
             template_var 0)),
         template_app
          (template_app (template_hole 3, t_empty), template_var 0)))),
    ("Labeled_Stateful_Strands.dual\<^sub>l\<^sub>s\<^sub>s\<^sub>t_member",
     "[| (?l, ?x) : set ?A; ~ stateful_strand_step.is_Receive ?x;
         ~ stateful_strand_step.is_Send ?x |]
      ==> (?l, ?x) : set (dual\<^sub>l\<^sub>s\<^sub>s\<^sub>t ?A)",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_hole 6,
                template_app
                 (template_app (template_hole 5, template_var 2),
                  template_var 1)),
              template_app (template_hole 4, template_var 0))
            ),
        template_negation
         (
            template_predicate
             (template_app (template_hole 2, template_var 1))
            ),
        template_negation
         (
            template_predicate
             (template_app (template_hole 1, template_var 1))
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 6,
               template_app
                (template_app (template_hole 5, template_var 2),
                 template_var 1)),
             template_app
              (template_hole 4,
               template_app (template_hole 0, template_var 0)))
           ))),
    ("Labeled_Stateful_Strands.dual\<^sub>l\<^sub>s\<^sub>s\<^sub>t_memberD",
     "(?l, ?a) : set (dual\<^sub>l\<^sub>s\<^sub>s\<^sub>t ?A) ==>
      EX b. (?l, b) : set ?A &
            dual\<^sub>l\<^sub>s\<^sub>s\<^sub>t\<^sub>p (?l, b) =
            (?l, ?a)",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_hole 7,
                template_app
                 (template_app (template_hole 6, template_var 2),
                  template_var 1)),
              template_app
               (template_hole 5,
                template_app (template_hole 4, template_var 0)))
            )],
       template_predicate (template_app (template_hole 3, t_empty)))),
    ("Labeled_Stateful_Strands.subseqs_mem_dbproj",
     "[| ?Di : set (subseqs ?D); list_all (%d. fst d = ?i) ?Di |]
      ==> ?Di : set (subseqs (dbproj ?i ?D))",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 6, template_var 2),
              template_app
               (template_hole 5,
                template_app (template_hole 4, template_var 1)))
            ),
        template_predicate
         (
            template_app
             (template_app (template_hole 3, t_empty), template_var 2)
            )],
       template_predicate
        (
           template_app
            (template_app (template_hole 6, template_var 2),
             template_app
              (template_hole 5,
               template_app
                (template_hole 4,
                 template_app
                  (template_app (template_hole 0, t_empty),
                   template_var 1))))
           ))),
    ("Labeled_Stateful_Strands.dual\<^sub>l\<^sub>s\<^sub>s\<^sub>t\<^sub>p_inv",
     "[| dual\<^sub>l\<^sub>s\<^sub>s\<^sub>t\<^sub>p (?l, ?a) = (?k, ?b);
         \<nexists>t.
            ?a = receive\<langle>t\<rangle> |
            ?a = send\<langle>t\<rangle> |]
      ==> ?b = ?a",
     template_implication
      ([template_equation
         (template_app
           (template_hole 7,
            template_app
             (template_app (template_hole 6, template_var 3),
              template_var 2)),
          template_app
           (template_app (template_hole 6, template_var 1),
            template_var 0)),
        template_negation
         (template_predicate (template_app (template_hole 4, t_empty)))],
       template_equation (template_var 0, template_var 2))),
    ("Labeled_Stateful_Strands.dbproj_subseq",
     "[| ?Di : set (subseqs (dbproj ?k ?D)); ?i ~= ?k |]
      ==> dbproj ?i ?Di = []",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 8, template_var 3),
              template_app
               (template_hole 7,
                template_app
                 (template_hole 6,
                  template_app
                   (template_app (template_hole 5, t_empty),
                    template_var 1))))
            ),
        template_negation
         (template_equation (template_var 0, template_var 2))],
       template_equation
        (template_app
          (template_app (template_hole 5, t_empty), template_var 3),
         template_hole 0))),
    ("Labeled_Stateful_Strands.subst_lsst_append_inv",
     "?A \<cdot>\<^sub>l\<^sub>s\<^sub>s\<^sub>t ?\<delta> =
      ?B1.0 @ ?B2.0 ==>
      EX A1 A2.
         ?A = A1 @ A2 &
         A1 \<cdot>\<^sub>l\<^sub>s\<^sub>s\<^sub>t ?\<delta> = ?B1.0 &
         A2 \<cdot>\<^sub>l\<^sub>s\<^sub>s\<^sub>t ?\<delta> = ?B2.0",
     template_implication
      ([template_equation
         (template_app
           (template_app (template_hole 3, template_var 3), template_var 2),
          template_app
           (template_app (template_hole 2, template_var 1),
            template_var 0))],
       template_predicate (template_app (template_hole 1, t_empty)))),
    ("Labeled_Stateful_Strands.dual\<^sub>l\<^sub>s\<^sub>s\<^sub>t_list_all",
     "list_all is_Assignment (unlabel ?A) ==>
      list_all is_Assignment
       (unlabel (dual\<^sub>l\<^sub>s\<^sub>s\<^sub>t ?A))",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 9, t_empty),
              template_app (template_hole 1, template_var 0))
            )],
       template_predicate
        (
           template_app
            (template_app (template_hole 9, t_empty),
             template_app
              (template_hole 1,
               template_app (template_hole 0, template_var 0)))
           ))),
    ("Labeled_Stateful_Strands.labeled_list_insert_eq_ex_cases",
     "List.insert ?d (unlabel ?D) = unlabel (List.insert (?i, ?d) ?D) |
      (EX j. (j, ?d) : set ?D &
             List.insert ?d (unlabel ?D) =
             unlabel (List.insert (j, ?d) ?D))",
     template_predicate
      (
         template_app
          (template_app
            (template_hole 9,
             template_app
              (template_app
                (template_hole 8,
                 template_app
                  (template_app (template_hole 7, template_var 2),
                   template_app (template_hole 6, template_var 1))),
               template_app
                (template_hole 6,
                 template_app
                  (template_app
                    (template_hole 5,
                     template_app
                      (template_app (template_hole 4, template_var 0),
                       template_var 2)),
                   template_var 1)))),
           template_app (template_hole 3, t_empty))
         )),
    ("Labeled_Stateful_Strands.dual\<^sub>l\<^sub>s\<^sub>s\<^sub>t_in_set_prefix_obtain",
     "?s : set (unlabel (dual\<^sub>l\<^sub>s\<^sub>s\<^sub>t ?A)) ==>
      EX l B s'.
         (l, ?s) = dual\<^sub>l\<^sub>s\<^sub>s\<^sub>t\<^sub>p (l, s') &
         prefix (B @ [(l, s')]) ?A",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 14, template_var 1),
              template_app
               (template_hole 13,
                template_app
                 (template_hole 12,
                  template_app (template_hole 11, template_var 0))))
            )],
       template_predicate (template_app (template_hole 10, t_empty)))),
    ("Labeled_Stateful_Strands.setops\<^sub>l\<^sub>s\<^sub>s\<^sub>t_subst",
     "bvars\<^sub>l\<^sub>s\<^sub>s\<^sub>t ?S Int subst_domain ?\<theta> =
      {} ==>
      setops\<^sub>l\<^sub>s\<^sub>s\<^sub>t
       (?S \<cdot>\<^sub>l\<^sub>s\<^sub>s\<^sub>t ?\<theta>) =
      (%p. (fst p, snd p \<cdot>\<^sub>p ?\<theta>)) `
      setops\<^sub>l\<^sub>s\<^sub>s\<^sub>t ?S",
     template_implication
      ([template_equation
         (template_app
           (template_app
             (template_hole 14,
              template_app
               (template_hole 13,
                template_app (template_hole 12, template_var 1))),
            template_app (template_hole 11, template_var 0)),
          template_hole 10)],
       template_equation
        (template_app
          (template_hole 8,
           template_app
            (template_app (template_hole 7, template_var 1),
             template_var 0)),
         template_app
          (template_app (template_hole 6, t_empty),
           template_app (template_hole 8, template_var 1))))),
    ("Labeled_Stateful_Strands.proj_subseq",
     "[| ?Di : set (subseqs (dbproj ln ?j ?D)); ?j ~= ?i |]
      ==> filter (%d. d ~: set ?Di) (proj ?i ?D) = proj ?i ?D",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 12, template_var 3),
              template_app
               (template_hole 11,
                template_app
                 (template_hole 10,
                  template_app
                   (template_app (template_hole 9, t_empty),
                    template_var 1))))
            ),
        template_negation
         (template_equation (template_var 2, template_var 0))],
       template_equation
        (template_app
          (template_app (template_hole 9, t_empty),
           template_app
            (template_app (template_hole 0, template_var 0),
             template_var 1)),
         template_app
          (template_app (template_hole 0, template_var 0),
           template_var 1)))),
    ("Labeled_Stateful_Strands.setops\<^sub>l\<^sub>s\<^sub>s\<^sub>t\<^sub>p_subst",
     "set (bvars\<^sub>s\<^sub>s\<^sub>t\<^sub>p (snd ?a)) Int
      subst_domain ?\<theta> =
      {} ==>
      setops\<^sub>l\<^sub>s\<^sub>s\<^sub>t\<^sub>p
       (?a \<cdot>\<^sub>l\<^sub>s\<^sub>s\<^sub>t\<^sub>p ?\<theta>) =
      (%p. (fst ?a, snd p \<cdot>\<^sub>p ?\<theta>)) `
      setops\<^sub>l\<^sub>s\<^sub>s\<^sub>t\<^sub>p ?a",
     template_implication
      ([template_equation
         (template_app
           (template_app
             (template_hole 15,
              template_app
               (template_hole 14,
                template_app
                 (template_hole 13,
                  template_app (template_hole 12, template_var 1)))),
            template_app (template_hole 11, template_var 0)),
          template_hole 10)],
       template_equation
        (template_app
          (template_hole 8,
           template_app
            (template_app (template_hole 7, template_var 1),
             template_var 0)),
         template_app
          (template_app (template_hole 6, t_empty),
           template_app (template_hole 8, template_var 1))))),
    ("Labeled_Stateful_Strands.setops\<^sub>l\<^sub>s\<^sub>s\<^sub>t\<^sub>p_subst'",
     "set (bvars\<^sub>s\<^sub>s\<^sub>t\<^sub>p (snd ?a)) Int
      subst_domain ?\<theta> =
      {} ==>
      setops\<^sub>l\<^sub>s\<^sub>s\<^sub>t\<^sub>p
       (?a \<cdot>\<^sub>l\<^sub>s\<^sub>s\<^sub>t\<^sub>p ?\<theta>) =
      (%(i, p). (i, p \<cdot>\<^sub>p ?\<theta>)) `
      setops\<^sub>l\<^sub>s\<^sub>s\<^sub>t\<^sub>p ?a",
     template_implication
      ([template_equation
         (template_app
           (template_app
             (template_hole 14,
              template_app
               (template_hole 13,
                template_app
                 (template_hole 12,
                  template_app (template_hole 11, template_var 1)))),
            template_app (template_hole 10, template_var 0)),
          template_hole 9)],
       template_equation
        (template_app
          (template_hole 7,
           template_app
            (template_app (template_hole 6, template_var 1),
             template_var 0)),
         template_app
          (template_app
            (template_hole 5, template_app (template_hole 4, t_empty)),
           template_app (template_hole 7, template_var 1))))),
    ("Labeled_Stateful_Strands.trms\<^sub>s\<^sub>s\<^sub>t_unlabel_subst'",
     "?t : trms\<^sub>l\<^sub>s\<^sub>s\<^sub>t
            (?S \<cdot>\<^sub>l\<^sub>s\<^sub>s\<^sub>t ?\<delta>) ==>
      EX s:trms\<^sub>l\<^sub>s\<^sub>s\<^sub>t ?S.
         EX X. set X <= bvars\<^sub>l\<^sub>s\<^sub>s\<^sub>t ?S &
               ?t = s \<cdot> rm_vars (set X) ?\<delta>",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 14, template_var 2),
              template_app
               (template_hole 13,
                template_app
                 (template_hole 12,
                  template_app
                   (template_app (template_hole 11, template_var 1),
                    template_var 0))))
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 10,
               template_app
                (template_hole 13,
                 template_app (template_hole 12, template_var 1))),
             t_empty)
           ))),
    ("Labeled_Stateful_Strands.dual\<^sub>l\<^sub>s\<^sub>s\<^sub>t_list_all",
     "list_all is_Check (unlabel ?A) ==>
      list_all is_Check
       (unlabel (dual\<^sub>l\<^sub>s\<^sub>s\<^sub>t ?A))",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 10, t_empty),
              template_app (template_hole 1, template_var 0))
            )],
       template_predicate
        (
           template_app
            (template_app (template_hole 10, t_empty),
             template_app
              (template_hole 1,
               template_app (template_hole 0, template_var 0)))
           ))),
    ("Labeled_Stateful_Strands.dual\<^sub>l\<^sub>s\<^sub>s\<^sub>t_in_set_prefix_obtain_subst",
     "?s : set (unlabel
                 (dual\<^sub>l\<^sub>s\<^sub>s\<^sub>t
                   (?A \<cdot>\<^sub>l\<^sub>s\<^sub>s\<^sub>t
                    ?\<theta>))) ==>
      EX l B s'.
         (l, ?s) =
         dual\<^sub>l\<^sub>s\<^sub>s\<^sub>t\<^sub>p
          ((l, s') \<cdot>\<^sub>l\<^sub>s\<^sub>s\<^sub>t\<^sub>p
           ?\<theta>) &
         prefix
          ((B \<cdot>\<^sub>l\<^sub>s\<^sub>s\<^sub>t ?\<theta>) @
           [(l, s') \<cdot>\<^sub>l\<^sub>s\<^sub>s\<^sub>t\<^sub>p
            ?\<theta>])
          (?A \<cdot>\<^sub>l\<^sub>s\<^sub>s\<^sub>t ?\<theta>)",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 16, template_var 2),
              template_app
               (template_hole 15,
                template_app
                 (template_hole 14,
                  template_app
                   (template_hole 13,
                    template_app
                     (template_app (template_hole 12, template_var 1),
                      template_var 0)))))
            )],
       template_predicate (template_app (template_hole 11, t_empty)))),
    ("Labeled_Stateful_Strands.setops\<^sub>l\<^sub>s\<^sub>s\<^sub>t\<^sub>p_subst_cases",
     "setops\<^sub>l\<^sub>s\<^sub>s\<^sub>t\<^sub>p
       ((?l,
         \<forall>?X\<langle>\<or>\<noteq>: ?F \<or>\<notin>: ?F'\<rangle>) \<cdot>\<^sub>l\<^sub>s\<^sub>s\<^sub>t\<^sub>p
        ?\<delta>) =
      (%(t, s).
          (?l, t \<cdot> rm_vars (set ?X) ?\<delta>,
           s \<cdot> rm_vars (set ?X) ?\<delta>)) `
      set ?F'",
     template_equation
      (template_app
        (template_hole 13,
         template_app
          (template_app
            (template_hole 12,
             template_app
              (template_app (template_hole 11, template_var 4),
               template_app
                (template_app
                  (template_app (template_hole 10, template_var 3),
                   template_var 2),
                 template_var 1))),
           template_var 0)),
       template_app
        (template_app
          (template_hole 9, template_app (template_hole 8, t_empty)),
         template_app (template_hole 0, template_var 1)))),
    ("Labeled_Stateful_Strands.trms\<^sub>s\<^sub>s\<^sub>t_unlabel_subst''",
     "?t : trms\<^sub>l\<^sub>s\<^sub>s\<^sub>t
            (?S \<cdot>\<^sub>l\<^sub>s\<^sub>s\<^sub>t
             ?\<delta>) \<cdot>\<^sub>s\<^sub>e\<^sub>t
           ?\<theta> ==>
      EX s:trms\<^sub>l\<^sub>s\<^sub>s\<^sub>t ?S.
         EX X. set X <= bvars\<^sub>l\<^sub>s\<^sub>s\<^sub>t ?S &
               ?t =
               s \<cdot>
               rm_vars (set X) ?\<delta> \<circ>\<^sub>s ?\<theta>",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 16, template_var 3),
              template_app
               (template_app (template_hole 15, t_empty),
                template_app
                 (template_hole 13,
                  template_app
                   (template_hole 12,
                    template_app
                     (template_app (template_hole 11, template_var 1),
                      template_var 0)))))
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 10,
               template_app
                (template_hole 13,
                 template_app (template_hole 12, template_var 1))),
             t_empty)
           ))),
    ("Labeled_Stateful_Strands.subterms_subst_lsst_ik",
     "ALL x:fv\<^sub>s\<^sub>e\<^sub>t
             (ik\<^sub>l\<^sub>s\<^sub>s\<^sub>t ?S).
         (EX f. ?\<sigma> x = Fun f []) | (EX y. ?\<sigma> x = Var y) ==>
      subterms\<^sub>s\<^sub>e\<^sub>t
       (ik\<^sub>l\<^sub>s\<^sub>s\<^sub>t
         (?S \<cdot>\<^sub>l\<^sub>s\<^sub>s\<^sub>t ?\<sigma>)) =
      subterms\<^sub>s\<^sub>e\<^sub>t
       (ik\<^sub>l\<^sub>s\<^sub>s\<^sub>t
         ?S) \<cdot>\<^sub>s\<^sub>e\<^sub>t
      ?\<sigma>",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_hole 17,
                template_app
                 (template_hole 16,
                  template_app
                   (template_hole 15,
                    template_app (template_hole 14, template_var 1)))),
              t_empty)
            )],
       template_equation
        (template_app
          (template_hole 5,
           template_app
            (template_app (template_hole 4, template_hole 3),
             template_app
              (template_hole 15,
               template_app
                (template_hole 14,
                 template_app
                  (template_app (template_hole 2, template_var 1),
                   template_var 0))))),
         template_app
          (template_app (template_hole 1, t_empty),
           template_app
            (template_hole 5,
             template_app
              (template_app (template_hole 4, template_hole 3),
               template_app
                (template_hole 15,
                 template_app (template_hole 14, template_var 1)))))))),
    ("Labeled_Stateful_Strands.unlabel_filter_eq",
     "ALL (j, p):set ?A Un ?B. ALL (k, q):set ?A Un ?B. p = q --> j = k ==>
      filter (%d. d ~: snd ` ?B) (unlabel ?A) =
      unlabel (filter (%d. d ~: ?B) ?A)",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_hole 15,
                template_app
                 (template_app
                   (template_hole 14,
                    template_app (template_hole 13, template_var 1)),
                  template_var 0)),
              template_app (template_hole 12, t_empty))
            )],
       template_equation
        (template_app
          (template_app (template_hole 7, t_empty),
           template_app (template_hole 2, template_var 1)),
         template_app
          (template_hole 2,
           template_app
            (template_app (template_hole 1, t_empty), template_var 1))))),
    ("Labeled_Stateful_Strands.proj_instance_ex",
     "[| ALL b:set ?B.
            EX a:set ?A.
               EX \<delta>.
                  b =
                  a \<cdot>\<^sub>l\<^sub>s\<^sub>s\<^sub>t\<^sub>p
                  \<delta> &
                  ?P \<delta>;
         ?b : set (proj ?l ?B) |]
      ==> EX a:set (proj ?l ?A).
             EX \<delta>.
                ?b =
                a \<cdot>\<^sub>l\<^sub>s\<^sub>s\<^sub>t\<^sub>p \<delta> &
                ?P \<delta>",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_hole 8,
                template_app (template_hole 7, template_var 4)),
              t_empty)
            ),
        template_predicate
         (
            template_app
             (template_app (template_hole 1, template_var 1),
              template_app
               (template_hole 7,
                template_app
                 (template_app (template_hole 0, template_var 0),
                  template_var 4)))
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 6,
               template_app
                (template_hole 7,
                 template_app
                  (template_app (template_hole 0, template_var 0),
                   template_var 3))),
             t_empty)
           ))),
    ("Labeled_Stateful_Strands.subterms_subst_lsst",
     "[| ALL x:fv\<^sub>s\<^sub>e\<^sub>t
                (trms\<^sub>l\<^sub>s\<^sub>s\<^sub>t ?S).
            (EX f. ?\<sigma> x = Fun f []) | (EX y. ?\<sigma> x = Var y);
         bvars\<^sub>l\<^sub>s\<^sub>s\<^sub>t ?S Int
         subst_domain ?\<sigma> =
         {} |]
      ==> subterms\<^sub>s\<^sub>e\<^sub>t
           (trms\<^sub>l\<^sub>s\<^sub>s\<^sub>t
             (?S \<cdot>\<^sub>l\<^sub>s\<^sub>s\<^sub>t ?\<sigma>)) =
          subterms\<^sub>s\<^sub>e\<^sub>t
           (trms\<^sub>l\<^sub>s\<^sub>s\<^sub>t
             ?S) \<cdot>\<^sub>s\<^sub>e\<^sub>t
          ?\<sigma>",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_hole 22,
                template_app
                 (template_hole 21,
                  template_app
                   (template_hole 20,
                    template_app (template_hole 19, template_var 1)))),
              t_empty)
            ),
        template_equation
         (template_app
           (template_app
             (template_hole 10,
              template_app
               (template_hole 9,
                template_app (template_hole 19, template_var 1))),
            template_app (template_hole 8, template_var 0)),
          template_hole 7)],
       template_equation
        (template_app
          (template_hole 5,
           template_app
            (template_app (template_hole 4, template_hole 3),
             template_app
              (template_hole 20,
               template_app
                (template_hole 19,
                 template_app
                  (template_app (template_hole 2, template_var 1),
                   template_var 0))))),
         template_app
          (template_app (template_hole 1, t_empty),
           template_app
            (template_hole 5,
             template_app
              (template_app (template_hole 4, template_hole 3),
               template_app
                (template_hole 20,
                 template_app (template_hole 19, template_var 1)))))))),
    ("Labeled_Stateful_Strands.setops\<^sub>l\<^sub>s\<^sub>s\<^sub>t\<^sub>p_in_subst",
     "?p : setops\<^sub>l\<^sub>s\<^sub>s\<^sub>t\<^sub>p
            (?a \<cdot>\<^sub>l\<^sub>s\<^sub>s\<^sub>t\<^sub>p
             ?\<delta>) ==>
      EX q:setops\<^sub>l\<^sub>s\<^sub>s\<^sub>t\<^sub>p ?a.
         fst ?p = fst q &
         snd ?p =
         snd q \<cdot>\<^sub>p
         rm_vars (set (bvars\<^sub>s\<^sub>s\<^sub>t\<^sub>p (snd ?a)))
          ?\<delta>",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 17, template_var 2),
              template_app
               (template_hole 16,
                template_app
                 (template_app (template_hole 15, template_var 1),
                  template_var 0)))
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 14,
               template_app (template_hole 16, template_var 1)),
             t_empty)
           ))),
    ("Labeled_Stateful_Strands.setops\<^sub>l\<^sub>s\<^sub>s\<^sub>t_in_subst",
     "?p : setops\<^sub>l\<^sub>s\<^sub>s\<^sub>t
            (?A \<cdot>\<^sub>l\<^sub>s\<^sub>s\<^sub>t ?\<delta>) ==>
      EX q:setops\<^sub>l\<^sub>s\<^sub>s\<^sub>t ?A.
         fst ?p = fst q &
         (EX X<=bvars\<^sub>l\<^sub>s\<^sub>s\<^sub>t ?A.
             snd ?p = snd q \<cdot>\<^sub>p rm_vars X ?\<delta>)",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 18, template_var 2),
              template_app
               (template_hole 17,
                template_app
                 (template_app (template_hole 16, template_var 1),
                  template_var 0)))
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 15,
               template_app (template_hole 17, template_var 1)),
             t_empty)
           )))]:
   (string * thm * template) list
### theory "Draft.Labeled_Stateful_StrandsTemplates"
### 0.575s elapsed time, 0.769s cpu time, 0.122s GC time
val it = (): unit
