   [("Stateful_Strands.bvars\<^sub>s\<^sub>s\<^sub>t_finite",
     "finite (bvars\<^sub>s\<^sub>s\<^sub>t ?S)",
     template_predicate
      (
         template_app
          (template_hole 1, template_app (template_hole 0, template_var 0))
         )),
    ("Stateful_Strands.fv\<^sub>s\<^sub>s\<^sub>t_finite",
     "finite (fv\<^sub>s\<^sub>s\<^sub>t ?S)",
     template_predicate
      (
         template_app
          (template_hole 1, template_app (template_hole 0, template_var 0))
         )),
    ("Stateful_Strands.fv\<^sub>s\<^sub>s\<^sub>t\<^sub>p_finite",
     "finite (fv\<^sub>s\<^sub>s\<^sub>t\<^sub>p ?x)",
     template_predicate
      (
         template_app
          (template_hole 1, template_app (template_hole 0, template_var 0))
         )),
    ("Stateful_Strands.vars\<^sub>s\<^sub>s\<^sub>t\<^sub>p_finite",
     "finite (vars\<^sub>s\<^sub>s\<^sub>t\<^sub>p ?x)",
     template_predicate
      (
         template_app
          (template_hole 1, template_app (template_hole 0, template_var 0))
         )),
    ("Stateful_Strands.vars\<^sub>s\<^sub>s\<^sub>t_finite",
     "finite (vars\<^sub>s\<^sub>s\<^sub>t ?S)",
     template_predicate
      (
         template_app
          (template_hole 1, template_app (template_hole 0, template_var 0))
         )),
    ("Stateful_Strands.trms\<^sub>s\<^sub>s\<^sub>t_finite",
     "finite (trms\<^sub>s\<^sub>s\<^sub>t ?S)",
     template_predicate
      (
         template_app
          (template_hole 1, template_app (template_hole 0, template_var 0))
         )),
    ("Stateful_Strands.trms\<^sub>s\<^sub>s\<^sub>t\<^sub>p_finite",
     "finite (trms\<^sub>s\<^sub>s\<^sub>t\<^sub>p ?x)",
     template_predicate
      (
         template_app
          (template_hole 1, template_app (template_hole 0, template_var 0))
         )),
    ("Stateful_Strands.bvars\<^sub>s\<^sub>s\<^sub>t\<^sub>p_finite",
     "finite (set (bvars\<^sub>s\<^sub>s\<^sub>t\<^sub>p ?x))",
     template_predicate
      (
         template_app
          (template_hole 2,
           template_app
            (template_hole 1,
             template_app (template_hole 0, template_var 0)))
         )),
    ("Stateful_Strands.db\<^sub>s\<^sub>s\<^sub>t_nil",
     "db\<^sub>s\<^sub>s\<^sub>t [] ?\<I> = []",
     template_equation
      (template_app
        (template_app (template_hole 2, template_hole 1), template_var 0),
       template_hole 0)),
    ("Stateful_Strands.subst_sst_nil",
     "[] \<cdot>\<^sub>s\<^sub>s\<^sub>t ?\<delta> = []",
     template_equation
      (template_app
        (template_app (template_hole 1, template_hole 0), template_var 0),
       template_hole 0)),
    ("Stateful_Strands.wfvarsocc\<^sub>s\<^sub>s\<^sub>t_subset_wfrestrictedvars\<^sub>s\<^sub>s\<^sub>t",
     "wfvarsoccs\<^sub>s\<^sub>s\<^sub>t ?S
      <= wfrestrictedvars\<^sub>s\<^sub>s\<^sub>t ?S",
     template_inequation
      (less_equals, template_app (template_hole 1, template_var 0),
       template_app (template_hole 0, template_var 0))),
    ("Stateful_Strands.ik\<^sub>s\<^sub>s\<^sub>t_trms\<^sub>s\<^sub>s\<^sub>t_subset",
     "ik\<^sub>s\<^sub>s\<^sub>t ?A <= trms\<^sub>s\<^sub>s\<^sub>t ?A",
     template_inequation
      (less_equals, template_app (template_hole 1, template_var 0),
       template_app (template_hole 0, template_var 0))),
    ("Stateful_Strands.fv_list\<^sub>s\<^sub>s\<^sub>t_is_fv\<^sub>s\<^sub>s\<^sub>t",
     "fv\<^sub>s\<^sub>s\<^sub>t ?S =
      set (fv_list\<^sub>s\<^sub>s\<^sub>t ?S)",
     template_equation
      (template_app (template_hole 2, template_var 0),
       template_app
        (template_hole 1, template_app (template_hole 0, template_var 0)))),
    ("Stateful_Strands.fv_list\<^sub>s\<^sub>s\<^sub>t\<^sub>p_is_fv\<^sub>s\<^sub>s\<^sub>t\<^sub>p",
     "fv\<^sub>s\<^sub>s\<^sub>t\<^sub>p ?a =
      set (fv_list\<^sub>s\<^sub>s\<^sub>t\<^sub>p ?a)",
     template_equation
      (template_app (template_hole 2, template_var 0),
       template_app
        (template_hole 1, template_app (template_hole 0, template_var 0)))),
    ("Stateful_Strands.vars\<^sub>s\<^sub>s\<^sub>t\<^sub>p_cases",
     "vars\<^sub>s\<^sub>s\<^sub>t\<^sub>p (receive\<langle>?t\<rangle>) =
      fv ?t",
     template_equation
      (template_app
        (template_hole 2, template_app (template_hole 1, template_var 0)),
       template_app (template_hole 0, template_var 0))),
    ("Stateful_Strands.vars\<^sub>s\<^sub>s\<^sub>t\<^sub>p_cases",
     "vars\<^sub>s\<^sub>s\<^sub>t\<^sub>p (send\<langle>?t\<rangle>) =
      fv ?t",
     template_equation
      (template_app
        (template_hole 2, template_app (template_hole 1, template_var 0)),
       template_app (template_hole 0, template_var 0))),
    ("Stateful_Strands.bvars\<^sub>s\<^sub>s\<^sub>t\<^sub>p_set_cases",
     "set (bvars\<^sub>s\<^sub>s\<^sub>t\<^sub>p
            (receive\<langle>?t\<rangle>)) =
      {}",
     template_equation
      (template_app
        (template_hole 3,
         template_app
          (template_hole 2,
           template_app (template_hole 1, template_var 0))),
       template_hole 0)),
    ("Stateful_Strands.bvars\<^sub>s\<^sub>s\<^sub>t\<^sub>p_set_cases",
     "set (bvars\<^sub>s\<^sub>s\<^sub>t\<^sub>p
            (send\<langle>?t\<rangle>)) =
      {}",
     template_equation
      (template_app
        (template_hole 3,
         template_app
          (template_hole 2,
           template_app (template_hole 1, template_var 0))),
       template_hole 0)),
    ("Stateful_Strands.trms_list\<^sub>s\<^sub>s\<^sub>t_is_trms\<^sub>s\<^sub>s\<^sub>t",
     "trms\<^sub>s\<^sub>s\<^sub>t ?S =
      set (trms_list\<^sub>s\<^sub>s\<^sub>t ?S)",
     template_equation
      (template_app (template_hole 2, template_var 0),
       template_app
        (template_hole 1, template_app (template_hole 0, template_var 0)))),
    ("Stateful_Strands.setops_list\<^sub>s\<^sub>s\<^sub>t_is_setops\<^sub>s\<^sub>s\<^sub>t",
     "setops\<^sub>s\<^sub>s\<^sub>t ?S =
      set (setops_list\<^sub>s\<^sub>s\<^sub>t ?S)",
     template_equation
      (template_app (template_hole 2, template_var 0),
       template_app
        (template_hole 1, template_app (template_hole 0, template_var 0)))),
    ("Stateful_Strands.fv_trms\<^sub>s\<^sub>s\<^sub>t_subset",
     "fv\<^sub>s\<^sub>s\<^sub>t ?S
      <= fv\<^sub>s\<^sub>e\<^sub>t (trms\<^sub>s\<^sub>s\<^sub>t ?S)",
     template_inequation
      (less_equals, template_app (template_hole 2, template_var 0),
       template_app
        (template_hole 1, template_app (template_hole 0, template_var 0)))),
    ("Stateful_Strands.fv_ik_subset_fv_sst'",
     "fv\<^sub>s\<^sub>e\<^sub>t (ik\<^sub>s\<^sub>s\<^sub>t ?S)
      <= fv\<^sub>s\<^sub>s\<^sub>t ?S",
     template_inequation
      (less_equals,
       template_app
        (template_hole 2, template_app (template_hole 1, template_var 0)),
       template_app (template_hole 0, template_var 0))),
    ("Stateful_Strands.fv_ik_subset_vars_sst'",
     "fv\<^sub>s\<^sub>e\<^sub>t (ik\<^sub>s\<^sub>s\<^sub>t ?S)
      <= vars\<^sub>s\<^sub>s\<^sub>t ?S",
     template_inequation
      (less_equals,
       template_app
        (template_hole 2, template_app (template_hole 1, template_var 0)),
       template_app (template_hole 0, template_var 0))),
    ("Stateful_Strands.fv_trms\<^sub>s\<^sub>s\<^sub>t_subset",
     "fv\<^sub>s\<^sub>e\<^sub>t (trms\<^sub>s\<^sub>s\<^sub>t ?S)
      <= vars\<^sub>s\<^sub>s\<^sub>t ?S",
     template_inequation
      (less_equals,
       template_app
        (template_hole 2, template_app (template_hole 1, template_var 0)),
       template_app (template_hole 0, template_var 0))),
    ("Stateful_Strands.bvars\<^sub>s\<^sub>s\<^sub>t_NegChecks",
     "bvars\<^sub>s\<^sub>s\<^sub>t ?A =
      bvars\<^sub>s\<^sub>s\<^sub>t (filter is_NegChecks ?A)",
     template_equation
      (template_app (template_hole 2, template_var 0),
       template_app
        (template_hole 2,
         template_app
          (template_app (template_hole 1, template_hole 0),
           template_var 0)))),
    ("Stateful_Strands.bvars\<^sub>s\<^sub>s\<^sub>t_subst",
     "bvars\<^sub>s\<^sub>s\<^sub>t
       (?A \<cdot>\<^sub>s\<^sub>s\<^sub>t ?\<delta>) =
      bvars\<^sub>s\<^sub>s\<^sub>t ?A",
     template_equation
      (template_app
        (template_hole 1,
         template_app
          (template_app (template_hole 0, template_var 1), template_var 0)),
       template_app (template_hole 1, template_var 1))),
    ("Stateful_Strands.bvars\<^sub>s\<^sub>s\<^sub>t\<^sub>p_set_cases",
     "set (bvars\<^sub>s\<^sub>s\<^sub>t\<^sub>p
            (delete\<langle>?t,?s\<rangle>)) =
      {}",
     template_equation
      (template_app
        (template_hole 3,
         template_app
          (template_hole 2,
           template_app
            (template_app (template_hole 1, template_var 1),
             template_var 0))),
       template_hole 0)),
    ("Stateful_Strands.bvars\<^sub>s\<^sub>s\<^sub>t\<^sub>p_set_cases",
     "set (bvars\<^sub>s\<^sub>s\<^sub>t\<^sub>p
            (insert\<langle>?t,?s\<rangle>)) =
      {}",
     template_equation
      (template_app
        (template_hole 3,
         template_app
          (template_hole 2,
           template_app
            (template_app (template_hole 1, template_var 1),
             template_var 0))),
       template_hole 0)),
    ("Stateful_Strands.stateful_strand_step_cases_subst",
     "is_Delete ?a =
      is_Delete (?a \<cdot>\<^sub>s\<^sub>s\<^sub>t\<^sub>p ?\<theta>)",
     template_equation
      (template_app (template_hole 1, template_var 1),
       template_app
        (template_hole 1,
         template_app
          (template_app (template_hole 0, template_var 1),
           template_var 0)))),
    ("Stateful_Strands.stateful_strand_step_cases_subst",
     "stateful_strand_step.is_Equality ?a =
      stateful_strand_step.is_Equality
       (?a \<cdot>\<^sub>s\<^sub>s\<^sub>t\<^sub>p ?\<theta>)",
     template_equation
      (template_app (template_hole 1, template_var 1),
       template_app
        (template_hole 1,
         template_app
          (template_app (template_hole 0, template_var 1),
           template_var 0)))),
    ("Stateful_Strands.stateful_strand_step_cases_subst",
     "is_InSet ?a =
      is_InSet (?a \<cdot>\<^sub>s\<^sub>s\<^sub>t\<^sub>p ?\<theta>)",
     template_equation
      (template_app (template_hole 1, template_var 1),
       template_app
        (template_hole 1,
         template_app
          (template_app (template_hole 0, template_var 1),
           template_var 0)))),
    ("Stateful_Strands.stateful_strand_step_cases_subst",
     "is_Insert ?a =
      is_Insert (?a \<cdot>\<^sub>s\<^sub>s\<^sub>t\<^sub>p ?\<theta>)",
     template_equation
      (template_app (template_hole 1, template_var 1),
       template_app
        (template_hole 1,
         template_app
          (template_app (template_hole 0, template_var 1),
           template_var 0)))),
    ("Stateful_Strands.stateful_strand_step_cases_subst",
     "is_NegChecks ?a =
      is_NegChecks (?a \<cdot>\<^sub>s\<^sub>s\<^sub>t\<^sub>p ?\<theta>)",
     template_equation
      (template_app (template_hole 1, template_var 1),
       template_app
        (template_hole 1,
         template_app
          (template_app (template_hole 0, template_var 1),
           template_var 0)))),
    ("Stateful_Strands.stateful_strand_step_cases_subst",
     "stateful_strand_step.is_Receive ?a =
      stateful_strand_step.is_Receive
       (?a \<cdot>\<^sub>s\<^sub>s\<^sub>t\<^sub>p ?\<theta>)",
     template_equation
      (template_app (template_hole 1, template_var 1),
       template_app
        (template_hole 1,
         template_app
          (template_app (template_hole 0, template_var 1),
           template_var 0)))),
    ("Stateful_Strands.stateful_strand_step_cases_subst",
     "stateful_strand_step.is_Send ?a =
      stateful_strand_step.is_Send
       (?a \<cdot>\<^sub>s\<^sub>s\<^sub>t\<^sub>p ?\<theta>)",
     template_equation
      (template_app (template_hole 1, template_var 1),
       template_app
        (template_hole 1,
         template_app
          (template_app (template_hole 0, template_var 1),
           template_var 0)))),
    ("Stateful_Strands.bvars\<^sub>s\<^sub>s\<^sub>t\<^sub>p_subst",
     "bvars\<^sub>s\<^sub>s\<^sub>t\<^sub>p
       (?a \<cdot>\<^sub>s\<^sub>s\<^sub>t\<^sub>p ?\<delta>) =
      bvars\<^sub>s\<^sub>s\<^sub>t\<^sub>p ?a",
     template_equation
      (template_app
        (template_hole 1,
         template_app
          (template_app (template_hole 0, template_var 1), template_var 0)),
       template_app (template_hole 1, template_var 1))),
    ("Stateful_Strands.bvars\<^sub>s\<^sub>s\<^sub>t\<^sub>p_NegCheck",
     "bvars\<^sub>s\<^sub>s\<^sub>t\<^sub>p
       \<forall>?X\<langle>\<or>\<noteq>: ?F \<or>\<notin>: ?G\<rangle> =
      ?X",
     template_equation
      (template_app
        (template_hole 1,
         template_app
          (template_app
            (template_app (template_hole 0, template_var 2),
             template_var 1),
           template_var 0)),
       template_var 2)),
    ("Stateful_Strands.sst_vars_append_subset",
     "bvars\<^sub>s\<^sub>s\<^sub>t ?A
      <= bvars\<^sub>s\<^sub>s\<^sub>t (?A @ ?B)",
     template_inequation
      (less_equals, template_app (template_hole 1, template_var 1),
       template_app
        (template_hole 1,
         template_app
          (template_app (template_hole 0, template_var 1),
           template_var 0)))),
    ("Stateful_Strands.bvars\<^sub>s\<^sub>s\<^sub>t_cons_subset",
     "bvars\<^sub>s\<^sub>s\<^sub>t ?A
      <= bvars\<^sub>s\<^sub>s\<^sub>t (?a # ?A)",
     template_inequation
      (less_equals, template_app (template_hole 1, template_var 1),
       template_app
        (template_hole 1,
         template_app
          (template_app (template_hole 0, template_var 0),
           template_var 1)))),
    ("Stateful_Strands.sst_vars_append_subset",
     "bvars\<^sub>s\<^sub>s\<^sub>t ?B
      <= bvars\<^sub>s\<^sub>s\<^sub>t (?A @ ?B)",
     template_inequation
      (less_equals, template_app (template_hole 1, template_var 1),
       template_app
        (template_hole 1,
         template_app
          (template_app (template_hole 0, template_var 0),
           template_var 1)))),
    ("Stateful_Strands.sst_vars_append_subset",
     "fv\<^sub>s\<^sub>s\<^sub>t ?A
      <= fv\<^sub>s\<^sub>s\<^sub>t (?A @ ?B)",
     template_inequation
      (less_equals, template_app (template_hole 1, template_var 1),
       template_app
        (template_hole 1,
         template_app
          (template_app (template_hole 0, template_var 1),
           template_var 0)))),
    ("Stateful_Strands.fv\<^sub>s\<^sub>s\<^sub>t_cons_subset",
     "fv\<^sub>s\<^sub>s\<^sub>t ?A
      <= fv\<^sub>s\<^sub>s\<^sub>t (?a # ?A)",
     template_inequation
      (less_equals, template_app (template_hole 1, template_var 1),
       template_app
        (template_hole 1,
         template_app
          (template_app (template_hole 0, template_var 0),
           template_var 1)))),
    ("Stateful_Strands.sst_vars_append_subset",
     "fv\<^sub>s\<^sub>s\<^sub>t ?B
      <= fv\<^sub>s\<^sub>s\<^sub>t (?A @ ?B)",
     template_inequation
      (less_equals, template_app (template_hole 1, template_var 1),
       template_app
        (template_hole 1,
         template_app
          (template_app (template_hole 0, template_var 0),
           template_var 1)))),
    ("Stateful_Strands.setops\<^sub>s\<^sub>s\<^sub>t_cons_subset",
     "setops\<^sub>s\<^sub>s\<^sub>t ?A
      <= setops\<^sub>s\<^sub>s\<^sub>t (?a # ?A)",
     template_inequation
      (less_equals, template_app (template_hole 1, template_var 1),
       template_app
        (template_hole 1,
         template_app
          (template_app (template_hole 0, template_var 0),
           template_var 1)))),
    ("Stateful_Strands.bvars\<^sub>s\<^sub>s\<^sub>t\<^sub>p_set_cases",
     "set (bvars\<^sub>s\<^sub>s\<^sub>t\<^sub>p
            \<langle>?c: ?t \<doteq> ?s\<rangle>) =
      {}",
     template_equation
      (template_app
        (template_hole 3,
         template_app
          (template_hole 2,
           template_app
            (template_app
              (template_app (template_hole 1, template_var 2),
               template_var 1),
             template_var 0))),
       template_hole 0)),
    ("Stateful_Strands.bvars\<^sub>s\<^sub>s\<^sub>t\<^sub>p_set_cases",
     "set (bvars\<^sub>s\<^sub>s\<^sub>t\<^sub>p
            \<langle>?c: ?t \<in> ?s\<rangle>) =
      {}",
     template_equation
      (template_app
        (template_hole 3,
         template_app
          (template_hole 2,
           template_app
            (template_app
              (template_app (template_hole 1, template_var 2),
               template_var 1),
             template_var 0))),
       template_hole 0)),
    ("Stateful_Strands.bvars\<^sub>s\<^sub>s\<^sub>t\<^sub>p_NegCheck",
     "set (bvars\<^sub>s\<^sub>s\<^sub>t\<^sub>p
            \<forall>[]\<langle>\<or>\<noteq>: ?F \<or>\<notin>: ?G\<rangle>) =
      {}",
     template_equation
      (template_app
        (template_hole 4,
         template_app
          (template_hole 3,
           template_app
            (template_app
              (template_app (template_hole 2, template_hole 1),
               template_var 1),
             template_var 0))),
       template_hole 0)),
    ("Stateful_Strands.vars\<^sub>s\<^sub>s\<^sub>t_is_fv\<^sub>s\<^sub>s\<^sub>t_bvars\<^sub>s\<^sub>s\<^sub>t",
     "vars\<^sub>s\<^sub>s\<^sub>t ?S =
      fv\<^sub>s\<^sub>s\<^sub>t ?S Un bvars\<^sub>s\<^sub>s\<^sub>t ?S",
     template_equation
      (template_app (template_hole 3, template_var 0),
       template_app
        (template_app
          (template_hole 2, template_app (template_hole 1, template_var 0)),
         template_app (template_hole 0, template_var 0)))),
    ("Stateful_Strands.vars\<^sub>s\<^sub>s\<^sub>t\<^sub>p_is_fv\<^sub>s\<^sub>s\<^sub>t\<^sub>p_bvars\<^sub>s\<^sub>s\<^sub>t\<^sub>p",
     "vars\<^sub>s\<^sub>s\<^sub>t\<^sub>p ?x =
      fv\<^sub>s\<^sub>s\<^sub>t\<^sub>p ?x Un
      set (bvars\<^sub>s\<^sub>s\<^sub>t\<^sub>p ?x)",
     template_equation
      (template_app (template_hole 4, template_var 0),
       template_app
        (template_app
          (template_hole 3, template_app (template_hole 2, template_var 0)),
         template_app
          (template_hole 1,
           template_app (template_hole 0, template_var 0))))),
    ("Stateful_Strands.bvars\<^sub>s\<^sub>s\<^sub>t\<^sub>p_set_cases",
     "set (bvars\<^sub>s\<^sub>s\<^sub>t\<^sub>p
            \<forall>?X\<langle>\<or>\<noteq>: ?F \<or>\<notin>: ?G\<rangle>) =
      set ?X",
     template_equation
      (template_app
        (template_hole 2,
         template_app
          (template_hole 1,
           template_app
            (template_app
              (template_app (template_hole 0, template_var 2),
               template_var 1),
             template_var 0))),
       template_app (template_hole 2, template_var 2))),
    ("Stateful_Strands.bvars\<^sub>s\<^sub>s\<^sub>t\<^sub>p_NegChecks",
     "~ is_NegChecks ?a ==> bvars\<^sub>s\<^sub>s\<^sub>t\<^sub>p ?a = []",
     template_implication
      ([template_negation
         (
            template_predicate
             (template_app (template_hole 3, template_var 0))
            )],
       template_equation
        (template_app (template_hole 1, template_var 0), template_hole 0))),
    ("Stateful_Strands.wf\<^sub>s\<^sub>s\<^sub>tI",
     "wfrestrictedvars\<^sub>s\<^sub>s\<^sub>t ?S <= ?V ==>
      wf'\<^sub>s\<^sub>s\<^sub>t ?V ?S",
     template_implication
      ([template_inequation
         (less_equals, template_app (template_hole 1, template_var 1),
          template_var 0)],
       template_predicate
        (
           template_app
            (template_app (template_hole 0, template_var 0), template_var 1)
           ))),
    ("Stateful_Strands.bvars\<^sub>s\<^sub>s\<^sub>t_append",
     "bvars\<^sub>s\<^sub>s\<^sub>t (?A @ ?B) =
      bvars\<^sub>s\<^sub>s\<^sub>t ?A Un bvars\<^sub>s\<^sub>s\<^sub>t ?B",
     template_equation
      (template_app
        (template_hole 2,
         template_app
          (template_app (template_hole 1, template_var 1), template_var 0)),
       template_app
        (template_app
          (template_hole 0, template_app (template_hole 2, template_var 1)),
         template_app (template_hole 2, template_var 0)))),
    ("Stateful_Strands.fv\<^sub>s\<^sub>s\<^sub>t_append",
     "fv\<^sub>s\<^sub>s\<^sub>t (?A @ ?B) =
      fv\<^sub>s\<^sub>s\<^sub>t ?A Un fv\<^sub>s\<^sub>s\<^sub>t ?B",
     template_equation
      (template_app
        (template_hole 2,
         template_app
          (template_app (template_hole 1, template_var 1), template_var 0)),
       template_app
        (template_app
          (template_hole 0, template_app (template_hole 2, template_var 1)),
         template_app (template_hole 2, template_var 0)))),
    ("Stateful_Strands.fv\<^sub>s\<^sub>s\<^sub>t_Cons",
     "fv\<^sub>s\<^sub>s\<^sub>t (?a # ?A) =
      fv\<^sub>s\<^sub>s\<^sub>t\<^sub>p ?a Un
      fv\<^sub>s\<^sub>s\<^sub>t ?A",
     template_equation
      (template_app
        (template_hole 3,
         template_app
          (template_app (template_hole 2, template_var 1), template_var 0)),
       template_app
        (template_app
          (template_hole 1, template_app (template_hole 0, template_var 1)),
         template_app (template_hole 3, template_var 0)))),
    ("Stateful_Strands.vars\<^sub>s\<^sub>s\<^sub>t\<^sub>p_cases",
     "vars\<^sub>s\<^sub>s\<^sub>t\<^sub>p (delete\<langle>?t,?s\<rangle>) =
      fv ?t Un fv ?s",
     template_equation
      (template_app
        (template_hole 3,
         template_app
          (template_app (template_hole 2, template_var 1), template_var 0)),
       template_app
        (template_app
          (template_hole 1, template_app (template_hole 0, template_var 1)),
         template_app (template_hole 0, template_var 0)))),
    ("Stateful_Strands.vars\<^sub>s\<^sub>s\<^sub>t\<^sub>p_cases",
     "vars\<^sub>s\<^sub>s\<^sub>t\<^sub>p (insert\<langle>?t,?s\<rangle>) =
      fv ?t Un fv ?s",
     template_equation
      (template_app
        (template_hole 3,
         template_app
          (template_app (template_hole 2, template_var 1), template_var 0)),
       template_app
        (template_app
          (template_hole 1, template_app (template_hole 0, template_var 1)),
         template_app (template_hole 0, template_var 0)))),
    ("Stateful_Strands.vars\<^sub>s\<^sub>s\<^sub>t_append",
     "vars\<^sub>s\<^sub>s\<^sub>t (?A @ ?B) =
      vars\<^sub>s\<^sub>s\<^sub>t ?A Un vars\<^sub>s\<^sub>s\<^sub>t ?B",
     template_equation
      (template_app
        (template_hole 2,
         template_app
          (template_app (template_hole 1, template_var 1), template_var 0)),
       template_app
        (template_app
          (template_hole 0, template_app (template_hole 2, template_var 1)),
         template_app (template_hole 2, template_var 0)))),
    ("Stateful_Strands.vars\<^sub>s\<^sub>s\<^sub>t_Cons",
     "vars\<^sub>s\<^sub>s\<^sub>t (?a # ?A) =
      vars\<^sub>s\<^sub>s\<^sub>t\<^sub>p ?a Un
      vars\<^sub>s\<^sub>s\<^sub>t ?A",
     template_equation
      (template_app
        (template_hole 3,
         template_app
          (template_app (template_hole 2, template_var 1), template_var 0)),
       template_app
        (template_app
          (template_hole 1, template_app (template_hole 0, template_var 1)),
         template_app (template_hole 3, template_var 0)))),
    ("Stateful_Strands.wfrestrictedvars\<^sub>s\<^sub>s\<^sub>t_union",
     "wfrestrictedvars\<^sub>s\<^sub>s\<^sub>t (?S @ ?T) =
      wfrestrictedvars\<^sub>s\<^sub>s\<^sub>t ?S Un
      wfrestrictedvars\<^sub>s\<^sub>s\<^sub>t ?T",
     template_equation
      (template_app
        (template_hole 2,
         template_app
          (template_app (template_hole 1, template_var 1), template_var 0)),
       template_app
        (template_app
          (template_hole 0, template_app (template_hole 2, template_var 1)),
         template_app (template_hole 2, template_var 0)))),
    ("Stateful_Strands.wfvarsoccs\<^sub>s\<^sub>s\<^sub>t_append",
     "wfvarsoccs\<^sub>s\<^sub>s\<^sub>t (?S @ ?S') =
      wfvarsoccs\<^sub>s\<^sub>s\<^sub>t ?S Un
      wfvarsoccs\<^sub>s\<^sub>s\<^sub>t ?S'",
     template_equation
      (template_app
        (template_hole 2,
         template_app
          (template_app (template_hole 1, template_var 1), template_var 0)),
       template_app
        (template_app
          (template_hole 0, template_app (template_hole 2, template_var 1)),
         template_app (template_hole 2, template_var 0)))),
    ("Stateful_Strands.fv\<^sub>s\<^sub>s\<^sub>t\<^sub>p_subst_cases",
     "fv\<^sub>s\<^sub>s\<^sub>t\<^sub>p
       (receive\<langle>?t\<rangle> \<cdot>\<^sub>s\<^sub>s\<^sub>t\<^sub>p
        ?\<theta>) =
      fv (?t \<cdot> ?\<theta>)",
     template_equation
      (template_app
        (template_hole 4,
         template_app
          (template_app
            (template_hole 3,
             template_app (template_hole 2, template_var 1)),
           template_var 0)),
       template_app
        (template_hole 1,
         template_app
          (template_app (template_hole 0, template_var 1),
           template_var 0)))),
    ("Stateful_Strands.fv\<^sub>s\<^sub>s\<^sub>t\<^sub>p_subst_cases",
     "fv\<^sub>s\<^sub>s\<^sub>t\<^sub>p
       (send\<langle>?t\<rangle> \<cdot>\<^sub>s\<^sub>s\<^sub>t\<^sub>p
        ?\<theta>) =
      fv (?t \<cdot> ?\<theta>)",
     template_equation
      (template_app
        (template_hole 4,
         template_app
          (template_app
            (template_hole 3,
             template_app (template_hole 2, template_var 1)),
           template_var 0)),
       template_app
        (template_hole 1,
         template_app
          (template_app (template_hole 0, template_var 1),
           template_var 0)))),
    ("Stateful_Strands.vars\<^sub>s\<^sub>s\<^sub>t\<^sub>p_subst_cases",
     "vars\<^sub>s\<^sub>s\<^sub>t\<^sub>p
       (receive\<langle>?t\<rangle> \<cdot>\<^sub>s\<^sub>s\<^sub>t\<^sub>p
        ?\<theta>) =
      fv (?t \<cdot> ?\<theta>)",
     template_equation
      (template_app
        (template_hole 4,
         template_app
          (template_app
            (template_hole 3,
             template_app (template_hole 2, template_var 1)),
           template_var 0)),
       template_app
        (template_hole 1,
         template_app
          (template_app (template_hole 0, template_var 1),
           template_var 0)))),
    ("Stateful_Strands.vars\<^sub>s\<^sub>s\<^sub>t\<^sub>p_subst_cases",
     "vars\<^sub>s\<^sub>s\<^sub>t\<^sub>p
       (send\<langle>?t\<rangle> \<cdot>\<^sub>s\<^sub>s\<^sub>t\<^sub>p
        ?\<theta>) =
      fv (?t \<cdot> ?\<theta>)",
     template_equation
      (template_app
        (template_hole 4,
         template_app
          (template_app
            (template_hole 3,
             template_app (template_hole 2, template_var 1)),
           template_var 0)),
       template_app
        (template_hole 1,
         template_app
          (template_app (template_hole 0, template_var 1),
           template_var 0)))),
    ("Stateful_Strands.ik\<^sub>s\<^sub>s\<^sub>t_append",
     "ik\<^sub>s\<^sub>s\<^sub>t (?A @ ?B) =
      ik\<^sub>s\<^sub>s\<^sub>t ?A Un ik\<^sub>s\<^sub>s\<^sub>t ?B",
     template_equation
      (template_app
        (template_hole 2,
         template_app
          (template_app (template_hole 1, template_var 1), template_var 0)),
       template_app
        (template_app
          (template_hole 0, template_app (template_hole 2, template_var 1)),
         template_app (template_hole 2, template_var 0)))),
    ("Stateful_Strands.trms\<^sub>s\<^sub>s\<^sub>t_append",
     "trms\<^sub>s\<^sub>s\<^sub>t (?A @ ?B) =
      trms\<^sub>s\<^sub>s\<^sub>t ?A Un trms\<^sub>s\<^sub>s\<^sub>t ?B",
     template_equation
      (template_app
        (template_hole 2,
         template_app
          (template_app (template_hole 1, template_var 1), template_var 0)),
       template_app
        (template_app
          (template_hole 0, template_app (template_hole 2, template_var 1)),
         template_app (template_hole 2, template_var 0)))),
    ("Stateful_Strands.trms\<^sub>s\<^sub>s\<^sub>t_cons",
     "trms\<^sub>s\<^sub>s\<^sub>t (?a # ?A) =
      trms\<^sub>s\<^sub>s\<^sub>t\<^sub>p ?a Un
      trms\<^sub>s\<^sub>s\<^sub>t ?A",
     template_equation
      (template_app
        (template_hole 3,
         template_app
          (template_app (template_hole 2, template_var 1), template_var 0)),
       template_app
        (template_app
          (template_hole 1, template_app (template_hole 0, template_var 1)),
         template_app (template_hole 3, template_var 0)))),
    ("Stateful_Strands.setops\<^sub>s\<^sub>s\<^sub>t_append",
     "setops\<^sub>s\<^sub>s\<^sub>t (?A @ ?B) =
      setops\<^sub>s\<^sub>s\<^sub>t ?A Un
      setops\<^sub>s\<^sub>s\<^sub>t ?B",
     template_equation
      (template_app
        (template_hole 2,
         template_app
          (template_app (template_hole 1, template_var 1), template_var 0)),
       template_app
        (template_app
          (template_hole 0, template_app (template_hole 2, template_var 1)),
         template_app (template_hole 2, template_var 0)))),
    ("Stateful_Strands.setops\<^sub>s\<^sub>s\<^sub>t_cons",
     "setops\<^sub>s\<^sub>s\<^sub>t (?a # ?A) =
      setops\<^sub>s\<^sub>s\<^sub>t\<^sub>p ?a Un
      setops\<^sub>s\<^sub>s\<^sub>t ?A",
     template_equation
      (template_app
        (template_hole 3,
         template_app
          (template_app (template_hole 2, template_var 1), template_var 0)),
       template_app
        (template_app
          (template_hole 1, template_app (template_hole 0, template_var 1)),
         template_app (template_hole 3, template_var 0)))),
    ("Stateful_Strands.wf\<^sub>s\<^sub>s\<^sub>t_vars_mono",
     "wf'\<^sub>s\<^sub>s\<^sub>t ?V ?S ==>
      wf'\<^sub>s\<^sub>s\<^sub>t (?V Un ?W) ?S",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 1, template_var 2),
              template_var 1)
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 1,
               template_app
                (template_app (template_hole 0, template_var 2),
                 template_var 0)),
             template_var 1)
           ))),
    ("Stateful_Strands.wf\<^sub>s\<^sub>s\<^sub>t_prefix",
     "wf'\<^sub>s\<^sub>s\<^sub>t ?V (?S @ ?S') ==>
      wf'\<^sub>s\<^sub>s\<^sub>t ?V ?S",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 1, template_var 2),
              template_app
               (template_app (template_hole 0, template_var 1),
                template_var 0))
            )],
       template_predicate
        (
           template_app
            (template_app (template_hole 1, template_var 2), template_var 1)
           ))),
    ("Stateful_Strands.bvars\<^sub>s\<^sub>s\<^sub>t_Cons",
     "bvars\<^sub>s\<^sub>s\<^sub>t (?a # ?A) =
      set (bvars\<^sub>s\<^sub>s\<^sub>t\<^sub>p ?a) Un
      bvars\<^sub>s\<^sub>s\<^sub>t ?A",
     template_equation
      (template_app
        (template_hole 4,
         template_app
          (template_app (template_hole 3, template_var 1), template_var 0)),
       template_app
        (template_app
          (template_hole 2,
           template_app
            (template_hole 1,
             template_app (template_hole 0, template_var 1))),
         template_app (template_hole 4, template_var 0)))),
    ("Stateful_Strands.fv\<^sub>s\<^sub>s\<^sub>t\<^sub>p_NegCheck",
     "fv\<^sub>s\<^sub>s\<^sub>t\<^sub>p
       \<forall>[]\<langle>\<or>\<noteq>: ?F \<or>\<notin>: ?G\<rangle> =
      fv\<^sub>p\<^sub>a\<^sub>i\<^sub>r\<^sub>s ?F Un
      fv\<^sub>p\<^sub>a\<^sub>i\<^sub>r\<^sub>s ?G",
     template_equation
      (template_app
        (template_hole 4,
         template_app
          (template_app
            (template_app (template_hole 3, template_hole 2),
             template_var 1),
           template_var 0)),
       template_app
        (template_app
          (template_hole 1, template_app (template_hole 0, template_var 1)),
         template_app (template_hole 0, template_var 0)))),
    ("Stateful_Strands.vars\<^sub>s\<^sub>s\<^sub>t\<^sub>p_cases",
     "vars\<^sub>s\<^sub>s\<^sub>t\<^sub>p
       \<langle>?c: ?t \<doteq> ?s\<rangle> =
      fv ?t Un fv ?s",
     template_equation
      (template_app
        (template_hole 3,
         template_app
          (template_app
            (template_app (template_hole 2, template_var 2),
             template_var 1),
           template_var 0)),
       template_app
        (template_app
          (template_hole 1, template_app (template_hole 0, template_var 1)),
         template_app (template_hole 0, template_var 0)))),
    ("Stateful_Strands.vars\<^sub>s\<^sub>s\<^sub>t\<^sub>p_cases",
     "vars\<^sub>s\<^sub>s\<^sub>t\<^sub>p
       \<langle>?c: ?t \<in> ?s\<rangle> =
      fv ?t Un fv ?s",
     template_equation
      (template_app
        (template_hole 3,
         template_app
          (template_app
            (template_app (template_hole 2, template_var 2),
             template_var 1),
           template_var 0)),
       template_app
        (template_app
          (template_hole 1, template_app (template_hole 0, template_var 1)),
         template_app (template_hole 0, template_var 0)))),
    ("Stateful_Strands.db\<^sub>s\<^sub>s\<^sub>t_set_is_dbupd\<^sub>s\<^sub>s\<^sub>t",
     "set (db'\<^sub>s\<^sub>s\<^sub>t ?A ?I ?D) =
      dbupd\<^sub>s\<^sub>s\<^sub>t ?A ?I (set ?D)",
     template_equation
      (template_app
        (template_hole 2,
         template_app
          (template_app
            (template_app (template_hole 1, template_var 2),
             template_var 1),
           template_var 0)),
       template_app
        (template_app
          (template_app (template_hole 0, template_var 2), template_var 1),
         template_app (template_hole 2, template_var 0)))),
    ("Stateful_Strands.fv\<^sub>s\<^sub>s\<^sub>t_in_fv_trms\<^sub>s\<^sub>s\<^sub>t",
     "?x : fv\<^sub>s\<^sub>s\<^sub>t ?S ==>
      ?x : fv\<^sub>s\<^sub>e\<^sub>t (trms\<^sub>s\<^sub>s\<^sub>t ?S)",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 3, template_var 1),
              template_app (template_hole 2, template_var 0))
            )],
       template_predicate
        (
           template_app
            (template_app (template_hole 3, template_var 1),
             template_app
              (template_hole 1,
               template_app (template_hole 0, template_var 0)))
           ))),
    ("Stateful_Strands.trms\<^sub>s\<^sub>s\<^sub>t_fv_vars\<^sub>s\<^sub>s\<^sub>t_subset",
     "?t : trms\<^sub>s\<^sub>s\<^sub>t ?A ==>
      fv ?t <= vars\<^sub>s\<^sub>s\<^sub>t ?A",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 4, template_var 1),
              template_app (template_hole 3, template_var 0))
            )],
       template_inequation
        (less_equals, template_app (template_hole 1, template_var 1),
         template_app (template_hole 0, template_var 0)))),
    ("Stateful_Strands.fv_ik\<^sub>s\<^sub>s\<^sub>t_is_fv\<^sub>s\<^sub>s\<^sub>t",
     "?x : fv\<^sub>s\<^sub>e\<^sub>t (ik\<^sub>s\<^sub>s\<^sub>t ?A) ==>
      ?x : fv\<^sub>s\<^sub>s\<^sub>t ?A",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 3, template_var 1),
              template_app
               (template_hole 2,
                template_app (template_hole 1, template_var 0)))
            )],
       template_predicate
        (
           template_app
            (template_app (template_hole 3, template_var 1),
             template_app (template_hole 0, template_var 0))
           ))),
    ("Stateful_Strands.var_trms\<^sub>s\<^sub>s\<^sub>t_is_vars\<^sub>s\<^sub>s\<^sub>t",
     "Var ?x : trms\<^sub>s\<^sub>s\<^sub>t ?A ==>
      ?x : vars\<^sub>s\<^sub>s\<^sub>t ?A",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_hole 4,
                template_app (template_hole 3, template_var 1)),
              template_app (template_hole 2, template_var 0))
            )],
       template_predicate
        (
           template_app
            (template_app (template_hole 1, template_var 1),
             template_app (template_hole 0, template_var 0))
           ))),
    ("Stateful_Strands.vars\<^sub>s\<^sub>s\<^sub>t_Cons'",
     "vars\<^sub>s\<^sub>s\<^sub>t (receive\<langle>?t\<rangle> # ?A) =
      vars\<^sub>s\<^sub>s\<^sub>t\<^sub>p (receive\<langle>?t\<rangle>) Un
      vars\<^sub>s\<^sub>s\<^sub>t ?A",
     template_equation
      (template_app
        (template_hole 4,
         template_app
          (template_app
            (template_hole 3,
             template_app (template_hole 2, template_var 1)),
           template_var 0)),
       template_app
        (template_app
          (template_hole 1,
           template_app
            (template_hole 0,
             template_app (template_hole 2, template_var 1))),
         template_app (template_hole 4, template_var 0)))),
    ("Stateful_Strands.vars\<^sub>s\<^sub>s\<^sub>t_Cons'",
     "vars\<^sub>s\<^sub>s\<^sub>t (send\<langle>?t\<rangle> # ?A) =
      vars\<^sub>s\<^sub>s\<^sub>t\<^sub>p (send\<langle>?t\<rangle>) Un
      vars\<^sub>s\<^sub>s\<^sub>t ?A",
     template_equation
      (template_app
        (template_hole 4,
         template_app
          (template_app
            (template_hole 3,
             template_app (template_hole 2, template_var 1)),
           template_var 0)),
       template_app
        (template_app
          (template_hole 1,
           template_app
            (template_hole 0,
             template_app (template_hole 2, template_var 1))),
         template_app (template_hole 4, template_var 0)))),
    ("Stateful_Strands.ik\<^sub>s\<^sub>s\<^sub>t_subst",
     "ik\<^sub>s\<^sub>s\<^sub>t
       (?A \<cdot>\<^sub>s\<^sub>s\<^sub>t ?\<delta>) =
      ik\<^sub>s\<^sub>s\<^sub>t ?A \<cdot>\<^sub>s\<^sub>e\<^sub>t
      ?\<delta>",
     template_equation
      (template_app
        (template_hole 3,
         template_app
          (template_app (template_hole 2, template_var 1), template_var 0)),
       template_app
        (template_app (template_hole 1, t_empty),
         template_app (template_hole 3, template_var 1)))),
    ("Stateful_Strands.trms\<^sub>s\<^sub>s\<^sub>t_mono",
     "set ?M <= set ?N ==>
      trms\<^sub>s\<^sub>s\<^sub>t ?M <= trms\<^sub>s\<^sub>s\<^sub>t ?N",
     template_implication
      ([template_inequation
         (less_equals, template_app (template_hole 2, template_var 1),
          template_app (template_hole 2, template_var 0))],
       template_inequation
        (less_equals, template_app (template_hole 0, template_var 1),
         template_app (template_hole 0, template_var 0)))),
    ("Stateful_Strands.setops\<^sub>s\<^sub>s\<^sub>t_mono",
     "set ?M <= set ?N ==>
      setops\<^sub>s\<^sub>s\<^sub>t ?M
      <= setops\<^sub>s\<^sub>s\<^sub>t ?N",
     template_implication
      ([template_inequation
         (less_equals, template_app (template_hole 2, template_var 1),
          template_app (template_hole 2, template_var 0))],
       template_inequation
        (less_equals, template_app (template_hole 0, template_var 1),
         template_app (template_hole 0, template_var 0)))),
    ("Stateful_Strands.stateful_strand_step_fv_subset_cases",
     "receive\<langle>?t\<rangle> : set ?S ==>
      fv ?t <= fv\<^sub>s\<^sub>s\<^sub>t ?S",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_hole 5,
                template_app (template_hole 4, template_var 1)),
              template_app (template_hole 3, template_var 0))
            )],
       template_inequation
        (less_equals, template_app (template_hole 1, template_var 1),
         template_app (template_hole 0, template_var 0)))),
    ("Stateful_Strands.stateful_strand_step_fv_subset_cases",
     "send\<langle>?t\<rangle> : set ?S ==>
      fv ?t <= fv\<^sub>s\<^sub>s\<^sub>t ?S",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_hole 5,
                template_app (template_hole 4, template_var 1)),
              template_app (template_hole 3, template_var 0))
            )],
       template_inequation
        (less_equals, template_app (template_hole 1, template_var 1),
         template_app (template_hole 0, template_var 0)))),
    ("Stateful_Strands.subst_sst_append",
     "?A @ ?B \<cdot>\<^sub>s\<^sub>s\<^sub>t ?\<delta> =
      (?A \<cdot>\<^sub>s\<^sub>s\<^sub>t ?\<delta>) @
      (?B \<cdot>\<^sub>s\<^sub>s\<^sub>t ?\<delta>)",
     template_equation
      (template_app
        (template_app
          (template_hole 1,
           template_app
            (template_app (template_hole 0, template_var 2),
             template_var 1)),
         template_var 0),
       template_app
        (template_app
          (template_hole 0,
           template_app
            (template_app (template_hole 1, template_var 2),
             template_var 0)),
         template_app
          (template_app (template_hole 1, template_var 1),
           template_var 0)))),
    ("Stateful_Strands.subst_sst_cons",
     "?a # ?A \<cdot>\<^sub>s\<^sub>s\<^sub>t ?\<delta> =
      (?a \<cdot>\<^sub>s\<^sub>s\<^sub>t\<^sub>p ?\<delta>) #
      (?A \<cdot>\<^sub>s\<^sub>s\<^sub>t ?\<delta>)",
     template_equation
      (template_app
        (template_app
          (template_hole 2,
           template_app
            (template_app (template_hole 1, template_var 2),
             template_var 1)),
         template_var 0),
       template_app
        (template_app
          (template_hole 1,
           template_app
            (template_app (template_hole 0, template_var 2),
             template_var 0)),
         template_app
          (template_app (template_hole 2, template_var 1),
           template_var 0)))),
    ("Stateful_Strands.subst_apply_NegChecks_no_bvars",
     "\<forall>[]\<langle>\<or>\<noteq>: ?F \<or>\<notin>: []\<rangle> \<cdot>\<^sub>s\<^sub>s\<^sub>t\<^sub>p
      ?\<theta> =
      \<forall>[]\<langle>\<or>\<noteq>: (?F \<cdot>\<^sub>p\<^sub>a\<^sub>i\<^sub>r\<^sub>s
    ?\<theta>) \<or>\<notin>: []\<rangle>",
     template_equation
      (template_app
        (template_app
          (template_hole 4,
           template_app
            (template_app
              (template_app (template_hole 3, template_hole 2),
               template_var 1),
             template_hole 1)),
         template_var 0),
       template_app
        (template_app
          (template_app (template_hole 3, template_hole 2),
           template_app
            (template_app (template_hole 0, template_var 1),
             template_var 0)),
         template_hole 1))),
    ("Stateful_Strands.subst_apply_NegChecks_no_bvars",
     "\<forall>[]\<langle>\<or>\<noteq>: [] \<or>\<notin>: ?F'\<rangle> \<cdot>\<^sub>s\<^sub>s\<^sub>t\<^sub>p
      ?\<theta> =
      \<forall>[]\<langle>\<or>\<noteq>: [] \<or>\<notin>: ?F' \<cdot>\<^sub>p\<^sub>a\<^sub>i\<^sub>r\<^sub>s
                     ?\<theta>\<rangle>",
     template_equation
      (template_app
        (template_app
          (template_hole 4,
           template_app
            (template_app
              (template_app (template_hole 3, template_hole 2),
               template_hole 1),
             template_var 1)),
         template_var 0),
       template_app
        (template_app
          (template_app (template_hole 3, template_hole 2),
           template_hole 1),
         template_app
          (template_app (template_hole 0, template_var 1),
           template_var 0)))),
    ("Stateful_Strands.wf\<^sub>s\<^sub>s\<^sub>t_subst_apply",
     "wf'\<^sub>s\<^sub>s\<^sub>t ?V ?S ==>
      wf'\<^sub>s\<^sub>s\<^sub>t
       (fv\<^sub>s\<^sub>e\<^sub>t (?\<delta> ` ?V))
       (?S \<cdot>\<^sub>s\<^sub>s\<^sub>t ?\<delta>)",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 3, template_var 2),
              template_var 1)
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 3,
               template_app
                (template_hole 2,
                 template_app
                  (template_app (template_hole 1, template_var 0),
                   template_var 2))),
             template_app
              (template_app (template_hole 0, template_var 1),
               template_var 0))
           ))),
    ("Stateful_Strands.wf\<^sub>s\<^sub>s\<^sub>t_append_exec",
     "wf'\<^sub>s\<^sub>s\<^sub>t ?V (?S @ ?S') ==>
      wf'\<^sub>s\<^sub>s\<^sub>t
       (?V Un wfvarsoccs\<^sub>s\<^sub>s\<^sub>t ?S) ?S'",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 3, template_var 2),
              template_app
               (template_app (template_hole 2, template_var 1),
                template_var 0))
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 3,
               template_app
                (template_app (template_hole 1, template_var 2),
                 template_app (template_hole 0, template_var 1))),
             template_var 0)
           ))),
    ("Stateful_Strands.fv\<^sub>s\<^sub>s\<^sub>t\<^sub>p_NegCheck",
     "fv\<^sub>s\<^sub>s\<^sub>t\<^sub>p
       \<forall>?X\<langle>\<or>\<noteq>: ?F \<or>\<notin>: ?G\<rangle> =
      fv\<^sub>p\<^sub>a\<^sub>i\<^sub>r\<^sub>s ?F Un
      fv\<^sub>p\<^sub>a\<^sub>i\<^sub>r\<^sub>s ?G -
      set ?X",
     template_equation
      (template_app
        (template_hole 5,
         template_app
          (template_app
            (template_app (template_hole 4, template_var 2),
             template_var 1),
           template_var 0)),
       template_app
        (template_app
          (template_hole 3,
           template_app
            (template_app
              (template_hole 2,
               template_app (template_hole 1, template_var 1)),
             template_app (template_hole 1, template_var 0))),
         template_app (template_hole 0, template_var 2)))),
    ("Stateful_Strands.vars\<^sub>s\<^sub>s\<^sub>t\<^sub>p_NegCheck",
     "vars\<^sub>s\<^sub>s\<^sub>t\<^sub>p
       \<forall>?X\<langle>\<or>\<noteq>: ?F \<or>\<notin>: ?G\<rangle> =
      set ?X Un fv\<^sub>p\<^sub>a\<^sub>i\<^sub>r\<^sub>s ?F Un
      fv\<^sub>p\<^sub>a\<^sub>i\<^sub>r\<^sub>s ?G",
     template_equation
      (template_app
        (template_hole 4,
         template_app
          (template_app
            (template_app (template_hole 3, template_var 2),
             template_var 1),
           template_var 0)),
       template_app
        (template_app
          (template_hole 2,
           template_app
            (template_app
              (template_hole 2,
               template_app (template_hole 1, template_var 2)),
             template_app (template_hole 0, template_var 1))),
         template_app (template_hole 0, template_var 0)))),
    ("Stateful_Strands.vars\<^sub>s\<^sub>s\<^sub>t\<^sub>p_cases",
     "vars\<^sub>s\<^sub>s\<^sub>t\<^sub>p
       \<forall>?X\<langle>\<or>\<noteq>: ?F \<or>\<notin>: ?G\<rangle> =
      fv\<^sub>p\<^sub>a\<^sub>i\<^sub>r\<^sub>s ?F Un
      fv\<^sub>p\<^sub>a\<^sub>i\<^sub>r\<^sub>s ?G Un
      set ?X",
     template_equation
      (template_app
        (template_hole 4,
         template_app
          (template_app
            (template_app (template_hole 3, template_var 2),
             template_var 1),
           template_var 0)),
       template_app
        (template_app
          (template_hole 2,
           template_app
            (template_app
              (template_hole 2,
               template_app (template_hole 1, template_var 1)),
             template_app (template_hole 1, template_var 0))),
         template_app (template_hole 0, template_var 2)))),
    ("Stateful_Strands.vars\<^sub>s\<^sub>s\<^sub>t_Cons'",
     "vars\<^sub>s\<^sub>s\<^sub>t (delete\<langle>?t,?s\<rangle> # ?A) =
      vars\<^sub>s\<^sub>s\<^sub>t\<^sub>p
       (delete\<langle>?t,?s\<rangle>) Un
      vars\<^sub>s\<^sub>s\<^sub>t ?A",
     template_equation
      (template_app
        (template_hole 4,
         template_app
          (template_app
            (template_hole 3,
             template_app
              (template_app (template_hole 2, template_var 2),
               template_var 1)),
           template_var 0)),
       template_app
        (template_app
          (template_hole 1,
           template_app
            (template_hole 0,
             template_app
              (template_app (template_hole 2, template_var 2),
               template_var 1))),
         template_app (template_hole 4, template_var 0)))),
    ("Stateful_Strands.vars\<^sub>s\<^sub>s\<^sub>t_Cons'",
     "vars\<^sub>s\<^sub>s\<^sub>t (insert\<langle>?t,?s\<rangle> # ?A) =
      vars\<^sub>s\<^sub>s\<^sub>t\<^sub>p
       (insert\<langle>?t,?s\<rangle>) Un
      vars\<^sub>s\<^sub>s\<^sub>t ?A",
     template_equation
      (template_app
        (template_hole 4,
         template_app
          (template_app
            (template_hole 3,
             template_app
              (template_app (template_hole 2, template_var 2),
               template_var 1)),
           template_var 0)),
       template_app
        (template_app
          (template_hole 1,
           template_app
            (template_hole 0,
             template_app
              (template_app (template_hole 2, template_var 2),
               template_var 1))),
         template_app (template_hole 4, template_var 0)))),
    ("Stateful_Strands.db\<^sub>s\<^sub>s\<^sub>t_append",
     "db'\<^sub>s\<^sub>s\<^sub>t (?A @ ?B) ?I ?D =
      db'\<^sub>s\<^sub>s\<^sub>t ?B ?I
       (db'\<^sub>s\<^sub>s\<^sub>t ?A ?I ?D)",
     template_equation
      (template_app
        (template_app
          (template_app
            (template_hole 1,
             template_app
              (template_app (template_hole 0, template_var 3),
               template_var 2)),
           template_var 1),
         template_var 0),
       template_app
        (template_app
          (template_app (template_hole 1, template_var 2), template_var 1),
         template_app
          (template_app
            (template_app (template_hole 1, template_var 3),
             template_var 1),
           template_var 0)))),
    ("Stateful_Strands.fv\<^sub>s\<^sub>s\<^sub>t_is_subterm_trms\<^sub>s\<^sub>s\<^sub>t",
     "?x : fv\<^sub>s\<^sub>s\<^sub>t ?A ==>
      Var ?x \<sqsubseteq>\<^sub>s\<^sub>e\<^sub>t
      trms\<^sub>s\<^sub>s\<^sub>t ?A",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 7, template_var 1),
              template_app (template_hole 6, template_var 0))
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 5,
               template_app (template_hole 4, template_var 1)),
             template_app
              (template_hole 3,
               template_app
                (template_app (template_hole 2, template_hole 1),
                 template_app (template_hole 0, template_var 0))))
           ))),
    ("Stateful_Strands.fv\<^sub>s\<^sub>s\<^sub>t\<^sub>p_is_subterm_trms\<^sub>s\<^sub>s\<^sub>t\<^sub>p",
     "?x : fv\<^sub>s\<^sub>s\<^sub>t\<^sub>p ?a ==>
      Var ?x \<sqsubseteq>\<^sub>s\<^sub>e\<^sub>t
      trms\<^sub>s\<^sub>s\<^sub>t\<^sub>p ?a",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 7, template_var 1),
              template_app (template_hole 6, template_var 0))
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 5,
               template_app (template_hole 4, template_var 1)),
             template_app
              (template_hole 3,
               template_app
                (template_app (template_hole 2, template_hole 1),
                 template_app (template_hole 0, template_var 0))))
           ))),
    ("Stateful_Strands.trms\<^sub>s\<^sub>s\<^sub>t_in",
     "?t : trms\<^sub>s\<^sub>s\<^sub>t ?S ==>
      EX a:set ?S. ?t : trms\<^sub>s\<^sub>s\<^sub>t\<^sub>p a",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 4, template_var 1),
              template_app (template_hole 3, template_var 0))
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 2,
               template_app (template_hole 1, template_var 0)),
             t_empty)
           ))),
    ("Stateful_Strands.fv\<^sub>s\<^sub>s\<^sub>t_subst_subset_range_vars_if_subset_domain",
     "fv\<^sub>s\<^sub>s\<^sub>t ?S <= subst_domain ?\<sigma> ==>
      fv\<^sub>s\<^sub>s\<^sub>t
       (?S \<cdot>\<^sub>s\<^sub>s\<^sub>t ?\<sigma>)
      <= range_vars ?\<sigma>",
     template_implication
      ([template_inequation
         (less_equals, template_app (template_hole 3, template_var 1),
          template_app (template_hole 2, template_var 0))],
       template_inequation
        (less_equals,
         template_app
          (template_hole 3,
           template_app
            (template_app (template_hole 1, template_var 1),
             template_var 0)),
         template_app (template_hole 0, template_var 0)))),
    ("Stateful_Strands.ik\<^sub>s\<^sub>s\<^sub>t_var_is_fv",
     "Var ?x \<sqsubseteq>\<^sub>s\<^sub>e\<^sub>t
      ik\<^sub>s\<^sub>s\<^sub>t ?A ==>
      ?x : fv\<^sub>s\<^sub>s\<^sub>t ?A",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_hole 7,
                template_app (template_hole 6, template_var 1)),
              template_app
               (template_hole 5,
                template_app
                 (template_app (template_hole 4, template_hole 3),
                  template_app (template_hole 2, template_var 0))))
            )],
       template_predicate
        (
           template_app
            (template_app (template_hole 1, template_var 1),
             template_app (template_hole 0, template_var 0))
           ))),
    ("Stateful_Strands.var_subterm_ik\<^sub>s\<^sub>s\<^sub>t_is_vars\<^sub>s\<^sub>s\<^sub>t",
     "Var ?x \<sqsubseteq>\<^sub>s\<^sub>e\<^sub>t
      ik\<^sub>s\<^sub>s\<^sub>t ?A ==>
      ?x : vars\<^sub>s\<^sub>s\<^sub>t ?A",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_hole 7,
                template_app (template_hole 6, template_var 1)),
              template_app
               (template_hole 5,
                template_app
                 (template_app (template_hole 4, template_hole 3),
                  template_app (template_hole 2, template_var 0))))
            )],
       template_predicate
        (
           template_app
            (template_app (template_hole 1, template_var 1),
             template_app (template_hole 0, template_var 0))
           ))),
    ("Stateful_Strands.var_subterm_trms\<^sub>s\<^sub>s\<^sub>t_is_vars\<^sub>s\<^sub>s\<^sub>t",
     "Var ?x \<sqsubseteq>\<^sub>s\<^sub>e\<^sub>t
      trms\<^sub>s\<^sub>s\<^sub>t ?A ==>
      ?x : vars\<^sub>s\<^sub>s\<^sub>t ?A",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_hole 7,
                template_app (template_hole 6, template_var 1)),
              template_app
               (template_hole 5,
                template_app
                 (template_app (template_hole 4, template_hole 3),
                  template_app (template_hole 2, template_var 0))))
            )],
       template_predicate
        (
           template_app
            (template_app (template_hole 1, template_var 1),
             template_app (template_hole 0, template_var 0))
           ))),
    ("Stateful_Strands.var_subterm_trms\<^sub>s\<^sub>s\<^sub>t\<^sub>p_is_vars\<^sub>s\<^sub>s\<^sub>t\<^sub>p",
     "Var ?x \<sqsubseteq>\<^sub>s\<^sub>e\<^sub>t
      trms\<^sub>s\<^sub>s\<^sub>t\<^sub>p ?a ==>
      ?x : vars\<^sub>s\<^sub>s\<^sub>t\<^sub>p ?a",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_hole 7,
                template_app (template_hole 6, template_var 1)),
              template_app
               (template_hole 5,
                template_app
                 (template_app (template_hole 4, template_hole 3),
                  template_app (template_hole 2, template_var 0))))
            )],
       template_predicate
        (
           template_app
            (template_app (template_hole 1, template_var 1),
             template_app (template_hole 0, template_var 0))
           ))),
    ("Stateful_Strands.fv\<^sub>s\<^sub>s\<^sub>t\<^sub>p_NegCheck",
     "fv\<^sub>s\<^sub>s\<^sub>t\<^sub>p \<langle>?t not in ?s\<rangle> =
      fv ?t Un fv ?s",
     template_equation
      (template_app
        (template_hole 7,
         template_app
          (template_app
            (template_app (template_hole 6, template_hole 5),
             template_hole 4),
           template_app
            (template_app
              (template_hole 3,
               template_app
                (template_app (template_hole 2, template_var 1),
                 template_var 0)),
             template_hole 4))),
       template_app
        (template_app
          (template_hole 1, template_app (template_hole 0, template_var 1)),
         template_app (template_hole 0, template_var 0)))),
    ("Stateful_Strands.fv\<^sub>s\<^sub>s\<^sub>t\<^sub>p_NegCheck",
     "fv\<^sub>s\<^sub>s\<^sub>t\<^sub>p \<langle>?t != ?s\<rangle> =
      fv ?t Un fv ?s",
     template_equation
      (template_app
        (template_hole 7,
         template_app
          (template_app
            (template_app (template_hole 6, template_hole 5),
             template_app
              (template_app
                (template_hole 4,
                 template_app
                  (template_app (template_hole 3, template_var 1),
                   template_var 0)),
               template_hole 2)),
           template_hole 2)),
       template_app
        (template_app
          (template_hole 1, template_app (template_hole 0, template_var 1)),
         template_app (template_hole 0, template_var 0)))),
    ("Stateful_Strands.stateful_strand_step_cases_subst",
     "is_Update ?a =
      is_Update (?a \<cdot>\<^sub>s\<^sub>s\<^sub>t\<^sub>p ?\<theta>)",
     template_equation
      (template_app
        (template_app
          (template_hole 3, template_app (template_hole 2, template_var 1)),
         template_app (template_hole 1, template_var 1)),
       template_app
        (template_app
          (template_hole 3,
           template_app
            (template_hole 2,
             template_app
              (template_app (template_hole 0, template_var 1),
               template_var 0))),
         template_app
          (template_hole 1,
           template_app
            (template_app (template_hole 0, template_var 1),
             template_var 0))))),
    ("Stateful_Strands.subst_apply_NegChecks_no_bvars",
     "\<forall>[]\<langle>\<or>\<noteq>: ?F \<or>\<notin>: ?F'\<rangle> \<cdot>\<^sub>s\<^sub>s\<^sub>t\<^sub>p
      ?\<theta> =
      \<forall>[]\<langle>\<or>\<noteq>: (?F \<cdot>\<^sub>p\<^sub>a\<^sub>i\<^sub>r\<^sub>s
    ?\<theta>) \<or>\<notin>: ?F' \<cdot>\<^sub>p\<^sub>a\<^sub>i\<^sub>r\<^sub>s
                              ?\<theta>\<rangle>",
     template_equation
      (template_app
        (template_app
          (template_hole 3,
           template_app
            (template_app
              (template_app (template_hole 2, template_hole 1),
               template_var 2),
             template_var 1)),
         template_var 0),
       template_app
        (template_app
          (template_app (template_hole 2, template_hole 1),
           template_app
            (template_app (template_hole 0, template_var 2),
             template_var 0)),
         template_app
          (template_app (template_hole 0, template_var 1),
           template_var 0)))),
    ("Stateful_Strands.fv\<^sub>s\<^sub>s\<^sub>t\<^sub>p_subst_cases",
     "fv\<^sub>s\<^sub>s\<^sub>t\<^sub>p
       (delete\<langle>?t,?s\<rangle> \<cdot>\<^sub>s\<^sub>s\<^sub>t\<^sub>p
        ?\<theta>) =
      fv (?t \<cdot> ?\<theta>) Un fv (?s \<cdot> ?\<theta>)",
     template_equation
      (template_app
        (template_hole 5,
         template_app
          (template_app
            (template_hole 4,
             template_app
              (template_app (template_hole 3, template_var 2),
               template_var 1)),
           template_var 0)),
       template_app
        (template_app
          (template_hole 2,
           template_app
            (template_hole 1,
             template_app
              (template_app (template_hole 0, template_var 2),
               template_var 0))),
         template_app
          (template_hole 1,
           template_app
            (template_app (template_hole 0, template_var 1),
             template_var 0))))),
    ("Stateful_Strands.fv\<^sub>s\<^sub>s\<^sub>t\<^sub>p_subst_cases",
     "fv\<^sub>s\<^sub>s\<^sub>t\<^sub>p
       (insert\<langle>?t,?s\<rangle> \<cdot>\<^sub>s\<^sub>s\<^sub>t\<^sub>p
        ?\<theta>) =
      fv (?t \<cdot> ?\<theta>) Un fv (?s \<cdot> ?\<theta>)",
     template_equation
      (template_app
        (template_hole 5,
         template_app
          (template_app
            (template_hole 4,
             template_app
              (template_app (template_hole 3, template_var 2),
               template_var 1)),
           template_var 0)),
       template_app
        (template_app
          (template_hole 2,
           template_app
            (template_hole 1,
             template_app
              (template_app (template_hole 0, template_var 2),
               template_var 0))),
         template_app
          (template_hole 1,
           template_app
            (template_app (template_hole 0, template_var 1),
             template_var 0))))),
    ("Stateful_Strands.vars\<^sub>s\<^sub>s\<^sub>t\<^sub>p_subst_cases",
     "vars\<^sub>s\<^sub>s\<^sub>t\<^sub>p
       (delete\<langle>?t,?s\<rangle> \<cdot>\<^sub>s\<^sub>s\<^sub>t\<^sub>p
        ?\<theta>) =
      fv (?t \<cdot> ?\<theta>) Un fv (?s \<cdot> ?\<theta>)",
     template_equation
      (template_app
        (template_hole 5,
         template_app
          (template_app
            (template_hole 4,
             template_app
              (template_app (template_hole 3, template_var 2),
               template_var 1)),
           template_var 0)),
       template_app
        (template_app
          (template_hole 2,
           template_app
            (template_hole 1,
             template_app
              (template_app (template_hole 0, template_var 2),
               template_var 0))),
         template_app
          (template_hole 1,
           template_app
            (template_app (template_hole 0, template_var 1),
             template_var 0))))),
    ("Stateful_Strands.vars\<^sub>s\<^sub>s\<^sub>t\<^sub>p_subst_cases",
     "vars\<^sub>s\<^sub>s\<^sub>t\<^sub>p
       (insert\<langle>?t,?s\<rangle> \<cdot>\<^sub>s\<^sub>s\<^sub>t\<^sub>p
        ?\<theta>) =
      fv (?t \<cdot> ?\<theta>) Un fv (?s \<cdot> ?\<theta>)",
     template_equation
      (template_app
        (template_hole 5,
         template_app
          (template_app
            (template_hole 4,
             template_app
              (template_app (template_hole 3, template_var 2),
               template_var 1)),
           template_var 0)),
       template_app
        (template_app
          (template_hole 2,
           template_app
            (template_hole 1,
             template_app
              (template_app (template_hole 0, template_var 2),
               template_var 0))),
         template_app
          (template_hole 1,
           template_app
            (template_app (template_hole 0, template_var 1),
             template_var 0))))),
    ("Stateful_Strands.vars\<^sub>s\<^sub>s\<^sub>t_Cons'",
     "vars\<^sub>s\<^sub>s\<^sub>t
       (\<langle>?a: ?t \<doteq> ?s\<rangle> # ?A) =
      vars\<^sub>s\<^sub>s\<^sub>t\<^sub>p
       \<langle>?a: ?t \<doteq> ?s\<rangle> Un
      vars\<^sub>s\<^sub>s\<^sub>t ?A",
     template_equation
      (template_app
        (template_hole 4,
         template_app
          (template_app
            (template_hole 3,
             template_app
              (template_app
                (template_app (template_hole 2, template_var 3),
                 template_var 2),
               template_var 1)),
           template_var 0)),
       template_app
        (template_app
          (template_hole 1,
           template_app
            (template_hole 0,
             template_app
              (template_app
                (template_app (template_hole 2, template_var 3),
                 template_var 2),
               template_var 1))),
         template_app (template_hole 4, template_var 0)))),
    ("Stateful_Strands.vars\<^sub>s\<^sub>s\<^sub>t_Cons'",
     "vars\<^sub>s\<^sub>s\<^sub>t
       (\<langle>?a: ?t \<in> ?s\<rangle> # ?A) =
      vars\<^sub>s\<^sub>s\<^sub>t\<^sub>p
       \<langle>?a: ?t \<in> ?s\<rangle> Un
      vars\<^sub>s\<^sub>s\<^sub>t ?A",
     template_equation
      (template_app
        (template_hole 4,
         template_app
          (template_app
            (template_hole 3,
             template_app
              (template_app
                (template_app (template_hole 2, template_var 3),
                 template_var 2),
               template_var 1)),
           template_var 0)),
       template_app
        (template_app
          (template_hole 1,
           template_app
            (template_hole 0,
             template_app
              (template_app
                (template_app (template_hole 2, template_var 3),
                 template_var 2),
               template_var 1))),
         template_app (template_hole 4, template_var 0)))),
    ("Stateful_Strands.vars\<^sub>s\<^sub>s\<^sub>t_Cons'",
     "vars\<^sub>s\<^sub>s\<^sub>t
       (\<forall>?X\<langle>\<or>\<noteq>: ?F \<or>\<notin>: ?G\<rangle> #
        ?A) =
      vars\<^sub>s\<^sub>s\<^sub>t\<^sub>p
       \<forall>?X\<langle>\<or>\<noteq>: ?F \<or>\<notin>: ?G\<rangle> Un
      vars\<^sub>s\<^sub>s\<^sub>t ?A",
     template_equation
      (template_app
        (template_hole 4,
         template_app
          (template_app
            (template_hole 3,
             template_app
              (template_app
                (template_app (template_hole 2, template_var 3),
                 template_var 2),
               template_var 1)),
           template_var 0)),
       template_app
        (template_app
          (template_hole 1,
           template_app
            (template_hole 0,
             template_app
              (template_app
                (template_app (template_hole 2, template_var 3),
                 template_var 2),
               template_var 1))),
         template_app (template_hole 4, template_var 0)))),
    ("Stateful_Strands.trms\<^sub>s\<^sub>s\<^sub>t_subst_cons",
     "trms\<^sub>s\<^sub>s\<^sub>t
       (?a # ?A \<cdot>\<^sub>s\<^sub>s\<^sub>t ?\<delta>) =
      trms\<^sub>s\<^sub>s\<^sub>t\<^sub>p
       (?a \<cdot>\<^sub>s\<^sub>s\<^sub>t\<^sub>p ?\<delta>) Un
      trms\<^sub>s\<^sub>s\<^sub>t
       (?A \<cdot>\<^sub>s\<^sub>s\<^sub>t ?\<delta>)",
     template_equation
      (template_app
        (template_hole 5,
         template_app
          (template_app
            (template_hole 4,
             template_app
              (template_app (template_hole 3, template_var 2),
               template_var 1)),
           template_var 0)),
       template_app
        (template_app
          (template_hole 2,
           template_app
            (template_hole 1,
             template_app
              (template_app (template_hole 0, template_var 2),
               template_var 0))),
         template_app
          (template_hole 5,
           template_app
            (template_app (template_hole 4, template_var 1),
             template_var 0))))),
    ("Stateful_Strands.db\<^sub>s\<^sub>s\<^sub>t_filter",
     "db'\<^sub>s\<^sub>s\<^sub>t ?A ?I ?D =
      db'\<^sub>s\<^sub>s\<^sub>t (filter is_Update ?A) ?I ?D",
     template_equation
      (template_app
        (template_app
          (template_app (template_hole 4, template_var 2), template_var 1),
         template_var 0),
       template_app
        (template_app
          (template_app
            (template_hole 4,
             template_app
              (template_app (template_hole 3, t_empty), template_var 2)),
           template_var 1),
         template_var 0))),
    ("Stateful_Strands.stateful_strand_step_subst_inI",
     "receive\<langle>?t\<rangle> : set ?A ==>
      receive\<langle>?t \<cdot> ?\<theta>\<rangle>
      : set (?A \<cdot>\<^sub>s\<^sub>s\<^sub>t ?\<theta>)",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_hole 4,
                template_app (template_hole 3, template_var 2)),
              template_app (template_hole 2, template_var 1))
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 4,
               template_app
                (template_hole 3,
                 template_app
                  (template_app (template_hole 1, template_var 2),
                   template_var 0))),
             template_app
              (template_hole 2,
               template_app
                (template_app (template_hole 0, template_var 1),
                 template_var 0)))
           ))),
    ("Stateful_Strands.stateful_strand_step_subst_inI",
     "send\<langle>?t\<rangle> : set ?A ==>
      send\<langle>?t \<cdot> ?\<theta>\<rangle>
      : set (?A \<cdot>\<^sub>s\<^sub>s\<^sub>t ?\<theta>)",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_hole 4,
                template_app (template_hole 3, template_var 2)),
              template_app (template_hole 2, template_var 1))
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 4,
               template_app
                (template_hole 3,
                 template_app
                  (template_app (template_hole 1, template_var 2),
                   template_var 0))),
             template_app
              (template_hole 2,
               template_app
                (template_app (template_hole 0, template_var 1),
                 template_var 0)))
           ))),
    ("Stateful_Strands.stateful_strand_step_fv_subset_cases",
     "delete\<langle>?t,?s\<rangle> : set ?S ==>
      fv ?t Un fv ?s <= fv\<^sub>s\<^sub>s\<^sub>t ?S",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_hole 6,
                template_app
                 (template_app (template_hole 5, template_var 2),
                  template_var 1)),
              template_app (template_hole 4, template_var 0))
            )],
       template_inequation
        (less_equals,
         template_app
          (template_app
            (template_hole 2,
             template_app (template_hole 1, template_var 2)),
           template_app (template_hole 1, template_var 1)),
         template_app (template_hole 0, template_var 0)))),
    ("Stateful_Strands.stateful_strand_step_fv_subset_cases",
     "insert\<langle>?t,?s\<rangle> : set ?S ==>
      fv ?t Un fv ?s <= fv\<^sub>s\<^sub>s\<^sub>t ?S",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_hole 6,
                template_app
                 (template_app (template_hole 5, template_var 2),
                  template_var 1)),
              template_app (template_hole 4, template_var 0))
            )],
       template_inequation
        (less_equals,
         template_app
          (template_app
            (template_hole 2,
             template_app (template_hole 1, template_var 2)),
           template_app (template_hole 1, template_var 1)),
         template_app (template_hole 0, template_var 0)))),
    ("Stateful_Strands.fv\<^sub>s\<^sub>s\<^sub>t\<^sub>p_subst_cases",
     "fv\<^sub>s\<^sub>s\<^sub>t\<^sub>p
       (\<langle>?c: ?t \<doteq> ?s\<rangle> \<cdot>\<^sub>s\<^sub>s\<^sub>t\<^sub>p
        ?\<theta>) =
      fv (?t \<cdot> ?\<theta>) Un fv (?s \<cdot> ?\<theta>)",
     template_equation
      (template_app
        (template_hole 5,
         template_app
          (template_app
            (template_hole 4,
             template_app
              (template_app
                (template_app (template_hole 3, template_var 3),
                 template_var 2),
               template_var 1)),
           template_var 0)),
       template_app
        (template_app
          (template_hole 2,
           template_app
            (template_hole 1,
             template_app
              (template_app (template_hole 0, template_var 2),
               template_var 0))),
         template_app
          (template_hole 1,
           template_app
            (template_app (template_hole 0, template_var 1),
             template_var 0))))),
    ("Stateful_Strands.fv\<^sub>s\<^sub>s\<^sub>t\<^sub>p_subst_cases",
     "fv\<^sub>s\<^sub>s\<^sub>t\<^sub>p
       (\<langle>?c: ?t \<in> ?s\<rangle> \<cdot>\<^sub>s\<^sub>s\<^sub>t\<^sub>p
        ?\<theta>) =
      fv (?t \<cdot> ?\<theta>) Un fv (?s \<cdot> ?\<theta>)",
     template_equation
      (template_app
        (template_hole 5,
         template_app
          (template_app
            (template_hole 4,
             template_app
              (template_app
                (template_app (template_hole 3, template_var 3),
                 template_var 2),
               template_var 1)),
           template_var 0)),
       template_app
        (template_app
          (template_hole 2,
           template_app
            (template_hole 1,
             template_app
              (template_app (template_hole 0, template_var 2),
               template_var 0))),
         template_app
          (template_hole 1,
           template_app
            (template_app (template_hole 0, template_var 1),
             template_var 0))))),
    ("Stateful_Strands.vars\<^sub>s\<^sub>s\<^sub>t\<^sub>p_subst_cases",
     "vars\<^sub>s\<^sub>s\<^sub>t\<^sub>p
       (\<langle>?c: ?t \<doteq> ?s\<rangle> \<cdot>\<^sub>s\<^sub>s\<^sub>t\<^sub>p
        ?\<theta>) =
      fv (?t \<cdot> ?\<theta>) Un fv (?s \<cdot> ?\<theta>)",
     template_equation
      (template_app
        (template_hole 5,
         template_app
          (template_app
            (template_hole 4,
             template_app
              (template_app
                (template_app (template_hole 3, template_var 3),
                 template_var 2),
               template_var 1)),
           template_var 0)),
       template_app
        (template_app
          (template_hole 2,
           template_app
            (template_hole 1,
             template_app
              (template_app (template_hole 0, template_var 2),
               template_var 0))),
         template_app
          (template_hole 1,
           template_app
            (template_app (template_hole 0, template_var 1),
             template_var 0))))),
    ("Stateful_Strands.vars\<^sub>s\<^sub>s\<^sub>t\<^sub>p_subst_cases",
     "vars\<^sub>s\<^sub>s\<^sub>t\<^sub>p
       (\<langle>?c: ?t \<in> ?s\<rangle> \<cdot>\<^sub>s\<^sub>s\<^sub>t\<^sub>p
        ?\<theta>) =
      fv (?t \<cdot> ?\<theta>) Un fv (?s \<cdot> ?\<theta>)",
     template_equation
      (template_app
        (template_hole 5,
         template_app
          (template_app
            (template_hole 4,
             template_app
              (template_app
                (template_app (template_hole 3, template_var 3),
                 template_var 2),
               template_var 1)),
           template_var 0)),
       template_app
        (template_app
          (template_hole 2,
           template_app
            (template_hole 1,
             template_app
              (template_app (template_hole 0, template_var 2),
               template_var 0))),
         template_app
          (template_hole 1,
           template_app
            (template_app (template_hole 0, template_var 1),
             template_var 0))))),
    ("Stateful_Strands.subst_sst_snoc",
     "?A @ [?a] \<cdot>\<^sub>s\<^sub>s\<^sub>t ?\<delta> =
      (?A \<cdot>\<^sub>s\<^sub>s\<^sub>t ?\<delta>) @
      [?a \<cdot>\<^sub>s\<^sub>s\<^sub>t\<^sub>p ?\<delta>]",
     template_equation
      (template_app
        (template_app
          (template_hole 4,
           template_app
            (template_app (template_hole 3, template_var 2),
             template_app
              (template_app (template_hole 2, template_var 1),
               template_hole 1))),
         template_var 0),
       template_app
        (template_app
          (template_hole 3,
           template_app
            (template_app (template_hole 4, template_var 2),
             template_var 0)),
         template_app
          (template_app
            (template_hole 2,
             template_app
              (template_app (template_hole 0, template_var 1),
               template_var 0)),
           template_hole 1)))),
    ("Stateful_Strands.trms\<^sub>s\<^sub>s\<^sub>t\<^sub>p_subst'",
     "~ is_NegChecks ?a ==>
      trms\<^sub>s\<^sub>s\<^sub>t\<^sub>p
       (?a \<cdot>\<^sub>s\<^sub>s\<^sub>t\<^sub>p ?\<theta>) =
      trms\<^sub>s\<^sub>s\<^sub>t\<^sub>p
       ?a \<cdot>\<^sub>s\<^sub>e\<^sub>t
      ?\<theta>",
     template_implication
      ([template_negation
         (
            template_predicate
             (template_app (template_hole 5, template_var 1))
            )],
       template_equation
        (template_app
          (template_hole 3,
           template_app
            (template_app (template_hole 2, template_var 1),
             template_var 0)),
         template_app
          (template_app (template_hole 1, t_empty),
           template_app (template_hole 3, template_var 1))))),
    ("Stateful_Strands.fv\<^sub>s\<^sub>s\<^sub>t_subst_obtain_var",
     "?x : fv\<^sub>s\<^sub>s\<^sub>t
            (?S \<cdot>\<^sub>s\<^sub>s\<^sub>t ?\<delta>) ==>
      EX y:fv\<^sub>s\<^sub>s\<^sub>t ?S. ?x : fv (?\<delta> y)",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 4, template_var 2),
              template_app
               (template_hole 3,
                template_app
                 (template_app (template_hole 2, template_var 1),
                  template_var 0)))
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 1,
               template_app (template_hole 3, template_var 1)),
             t_empty)
           ))),
    ("Stateful_Strands.stateful_strand_step_fv_subset_cases",
     "\<langle>?c: ?t \<doteq> ?s\<rangle> : set ?S ==>
      fv ?t Un fv ?s <= fv\<^sub>s\<^sub>s\<^sub>t ?S",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_hole 6,
                template_app
                 (template_app
                   (template_app (template_hole 5, template_var 3),
                    template_var 2),
                  template_var 1)),
              template_app (template_hole 4, template_var 0))
            )],
       template_inequation
        (less_equals,
         template_app
          (template_app
            (template_hole 2,
             template_app (template_hole 1, template_var 2)),
           template_app (template_hole 1, template_var 1)),
         template_app (template_hole 0, template_var 0)))),
    ("Stateful_Strands.stateful_strand_step_fv_subset_cases",
     "\<langle>?c: ?t \<in> ?s\<rangle> : set ?S ==>
      fv ?t Un fv ?s <= fv\<^sub>s\<^sub>s\<^sub>t ?S",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_hole 6,
                template_app
                 (template_app
                   (template_app (template_hole 5, template_var 3),
                    template_var 2),
                  template_var 1)),
              template_app (template_hole 4, template_var 0))
            )],
       template_inequation
        (less_equals,
         template_app
          (template_app
            (template_hole 2,
             template_app (template_hole 1, template_var 2)),
           template_app (template_hole 1, template_var 1)),
         template_app (template_hole 0, template_var 0)))),
    ("Stateful_Strands.wf\<^sub>s\<^sub>s\<^sub>t_append",
     "[| wf'\<^sub>s\<^sub>s\<^sub>t ?X ?S;
         wf'\<^sub>s\<^sub>s\<^sub>t ?Y ?T |]
      ==> wf'\<^sub>s\<^sub>s\<^sub>t (?X Un ?Y) (?S @ ?T)",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 2, template_var 3),
              template_var 2)
            ),
        template_predicate
         (
            template_app
             (template_app (template_hole 2, template_var 1),
              template_var 0)
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 2,
               template_app
                (template_app (template_hole 1, template_var 3),
                 template_var 1)),
             template_app
              (template_app (template_hole 0, template_var 2),
               template_var 0))
           ))),
    ("Stateful_Strands.vars\<^sub>s\<^sub>s\<^sub>t\<^sub>p_cases",
     "vars\<^sub>s\<^sub>s\<^sub>t\<^sub>p
       \<forall>?X\<langle>\<or>\<noteq>: [] \<or>\<notin>: [(?t,
                        ?s)]\<rangle> =
      fv ?t Un fv ?s Un set ?X",
     template_equation
      (template_app
        (template_hole 7,
         template_app
          (template_app
            (template_app (template_hole 6, template_var 2),
             template_hole 5),
           template_app
            (template_app
              (template_hole 4,
               template_app
                (template_app (template_hole 3, template_var 1),
                 template_var 0)),
             template_hole 5))),
       template_app
        (template_app
          (template_hole 2,
           template_app
            (template_app
              (template_hole 2,
               template_app (template_hole 1, template_var 1)),
             template_app (template_hole 1, template_var 0))),
         template_app (template_hole 0, template_var 2)))),
    ("Stateful_Strands.vars\<^sub>s\<^sub>s\<^sub>t\<^sub>p_cases",
     "vars\<^sub>s\<^sub>s\<^sub>t\<^sub>p
       \<forall>?X\<langle>\<or>\<noteq>: [(?t,
      ?s)] \<or>\<notin>: []\<rangle> =
      fv ?t Un fv ?s Un set ?X",
     template_equation
      (template_app
        (template_hole 7,
         template_app
          (template_app
            (template_app (template_hole 6, template_var 2),
             template_app
              (template_app
                (template_hole 5,
                 template_app
                  (template_app (template_hole 4, template_var 1),
                   template_var 0)),
               template_hole 3)),
           template_hole 3)),
       template_app
        (template_app
          (template_hole 2,
           template_app
            (template_app
              (template_hole 2,
               template_app (template_hole 1, template_var 1)),
             template_app (template_hole 1, template_var 0))),
         template_app (template_hole 0, template_var 2)))),
    ("Stateful_Strands.dbupd\<^sub>s\<^sub>s\<^sub>t_no_upd",
     "ALL a:set ?A. ~ is_Insert a & ~ is_Delete a ==>
      dbupd\<^sub>s\<^sub>s\<^sub>t ?A ?I ?D = ?D",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_hole 7,
                template_app (template_hole 6, template_var 2)),
              t_empty)
            )],
       template_equation
        (template_app
          (template_app
            (template_app (template_hole 0, template_var 2),
             template_var 1),
           template_var 0),
         template_var 0))),
    ("Stateful_Strands.db\<^sub>s\<^sub>s\<^sub>t_no_upd",
     "ALL a:set ?A. ~ is_Insert a & ~ is_Delete a ==>
      db'\<^sub>s\<^sub>s\<^sub>t ?A ?I ?D = ?D",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_hole 7,
                template_app (template_hole 6, template_var 2)),
              t_empty)
            )],
       template_equation
        (template_app
          (template_app
            (template_app (template_hole 0, template_var 2),
             template_var 1),
           template_var 0),
         template_var 0))),
    ("Stateful_Strands.wf\<^sub>s\<^sub>s\<^sub>t_append_suffix",
     "[| wf'\<^sub>s\<^sub>s\<^sub>t ?V ?S;
         wfrestrictedvars\<^sub>s\<^sub>s\<^sub>t ?S'
         <= wfrestrictedvars\<^sub>s\<^sub>s\<^sub>t ?S Un ?V |]
      ==> wf'\<^sub>s\<^sub>s\<^sub>t ?V (?S @ ?S')",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 4, template_var 2),
              template_var 1)
            ),
        template_inequation
         (less_equals, template_app (template_hole 2, template_var 0),
          template_app
           (template_app
             (template_hole 1,
              template_app (template_hole 2, template_var 1)),
            template_var 2))],
       template_predicate
        (
           template_app
            (template_app (template_hole 4, template_var 2),
             template_app
              (template_app (template_hole 0, template_var 1),
               template_var 0))
           ))),
    ("Stateful_Strands.vars\<^sub>s\<^sub>s\<^sub>t\<^sub>p_subst_cases'",
     "?x : vars\<^sub>s\<^sub>s\<^sub>t\<^sub>p
            (?s \<cdot>\<^sub>s\<^sub>s\<^sub>t\<^sub>p ?\<theta>) ==>
      ?x : vars\<^sub>s\<^sub>s\<^sub>t\<^sub>p ?s |
      ?x : fv\<^sub>s\<^sub>e\<^sub>t
            (?\<theta> ` vars\<^sub>s\<^sub>s\<^sub>t\<^sub>p ?s)",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 5, template_var 2),
              template_app
               (template_hole 4,
                template_app
                 (template_app (template_hole 3, template_var 1),
                  template_var 0)))
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 2,
               template_app
                (template_app (template_hole 5, template_var 2),
                 template_app (template_hole 4, template_var 1))),
             template_app
              (template_app (template_hole 5, template_var 2),
               template_app
                (template_hole 1,
                 template_app
                  (template_app (template_hole 0, template_var 0),
                   template_app (template_hole 4, template_var 1)))))
           ))),
    ("Stateful_Strands.vars\<^sub>s\<^sub>s\<^sub>t_subst_cases",
     "?x : vars\<^sub>s\<^sub>s\<^sub>t
            (?S \<cdot>\<^sub>s\<^sub>s\<^sub>t ?\<theta>) ==>
      ?x : vars\<^sub>s\<^sub>s\<^sub>t ?S |
      ?x : fv\<^sub>s\<^sub>e\<^sub>t
            (?\<theta> ` vars\<^sub>s\<^sub>s\<^sub>t ?S)",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 5, template_var 2),
              template_app
               (template_hole 4,
                template_app
                 (template_app (template_hole 3, template_var 1),
                  template_var 0)))
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 2,
               template_app
                (template_app (template_hole 5, template_var 2),
                 template_app (template_hole 4, template_var 1))),
             template_app
              (template_app (template_hole 5, template_var 2),
               template_app
                (template_hole 1,
                 template_app
                  (template_app (template_hole 0, template_var 0),
                   template_app (template_hole 4, template_var 1)))))
           ))),
    ("Stateful_Strands.stateful_strand_step_subst_inI",
     "delete\<langle>?t,?s\<rangle> : set ?A ==>
      delete\<langle>?t \<cdot> ?\<theta>,?s \<cdot> ?\<theta>\<rangle>
      : set (?A \<cdot>\<^sub>s\<^sub>s\<^sub>t ?\<theta>)",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_hole 4,
                template_app
                 (template_app (template_hole 3, template_var 3),
                  template_var 2)),
              template_app (template_hole 2, template_var 1))
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 4,
               template_app
                (template_app
                  (template_hole 3,
                   template_app
                    (template_app (template_hole 1, template_var 3),
                     template_var 0)),
                 template_app
                  (template_app (template_hole 1, template_var 2),
                   template_var 0))),
             template_app
              (template_hole 2,
               template_app
                (template_app (template_hole 0, template_var 1),
                 template_var 0)))
           ))),
    ("Stateful_Strands.stateful_strand_step_subst_inI",
     "insert\<langle>?t,?s\<rangle> : set ?A ==>
      insert\<langle>?t \<cdot> ?\<theta>,?s \<cdot> ?\<theta>\<rangle>
      : set (?A \<cdot>\<^sub>s\<^sub>s\<^sub>t ?\<theta>)",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_hole 4,
                template_app
                 (template_app (template_hole 3, template_var 3),
                  template_var 2)),
              template_app (template_hole 2, template_var 1))
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 4,
               template_app
                (template_app
                  (template_hole 3,
                   template_app
                    (template_app (template_hole 1, template_var 3),
                     template_var 0)),
                 template_app
                  (template_app (template_hole 1, template_var 2),
                   template_var 0))),
             template_app
              (template_hole 2,
               template_app
                (template_app (template_hole 0, template_var 1),
                 template_var 0)))
           ))),
    ("Stateful_Strands.stateful_strand_subst_comp",
     "range_vars ?\<delta> Int bvars\<^sub>s\<^sub>s\<^sub>t ?S = {} ==>
      ?S \<cdot>\<^sub>s\<^sub>s\<^sub>t
      ?\<delta> \<circ>\<^sub>s ?\<theta> =
      (?S \<cdot>\<^sub>s\<^sub>s\<^sub>t
       ?\<delta>) \<cdot>\<^sub>s\<^sub>s\<^sub>t
      ?\<theta>",
     template_implication
      ([template_equation
         (template_app
           (template_app
             (template_hole 6,
              template_app (template_hole 5, template_var 2)),
            template_app (template_hole 4, template_var 1)),
          template_hole 3)],
       template_equation
        (template_app
          (template_app (template_hole 1, template_var 1),
           template_app
            (template_app (template_hole 0, template_var 2),
             template_var 0)),
         template_app
          (template_app
            (template_hole 1,
             template_app
              (template_app (template_hole 1, template_var 1),
               template_var 2)),
           template_var 0)))),
    ("Stateful_Strands.stateful_strand_step_fv_subset_cases",
     "\<forall>?X\<langle>\<or>\<noteq>: ?F \<or>\<notin>: ?G\<rangle>
      : set ?S ==>
      fv\<^sub>p\<^sub>a\<^sub>i\<^sub>r\<^sub>s ?F Un
      fv\<^sub>p\<^sub>a\<^sub>i\<^sub>r\<^sub>s ?G -
      set ?X
      <= fv\<^sub>s\<^sub>s\<^sub>t ?S",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_hole 8,
                template_app
                 (template_app
                   (template_app (template_hole 7, template_var 3),
                    template_var 2),
                  template_var 1)),
              template_app (template_hole 6, template_var 0))
            )],
       template_inequation
        (less_equals,
         template_app
          (template_app
            (template_hole 4,
             template_app
              (template_app
                (template_hole 3,
                 template_app (template_hole 2, template_var 2)),
               template_app (template_hole 2, template_var 1))),
           template_app (template_hole 1, template_var 3)),
         template_app (template_hole 0, template_var 0)))),
    ("Stateful_Strands.sst_vars_disj_cons",
     "fv\<^sub>s\<^sub>s\<^sub>t (?a # ?A) Int
      bvars\<^sub>s\<^sub>s\<^sub>t (?a # ?A) =
      {} ==>
      fv\<^sub>s\<^sub>s\<^sub>t ?A Int bvars\<^sub>s\<^sub>s\<^sub>t ?A =
      {}",
     template_implication
      ([template_equation
         (template_app
           (template_app
             (template_hole 4,
              template_app
               (template_hole 3,
                template_app
                 (template_app (template_hole 2, template_var 1),
                  template_var 0))),
            template_app
             (template_hole 1,
              template_app
               (template_app (template_hole 2, template_var 1),
                template_var 0))),
          template_hole 0)],
       template_equation
        (template_app
          (template_app
            (template_hole 4,
             template_app (template_hole 3, template_var 0)),
           template_app (template_hole 1, template_var 0)),
         template_hole 0))),
    ("Stateful_Strands.db\<^sub>s\<^sub>s\<^sub>t_no_upd_append",
     "ALL b:set ?B. ~ is_Insert b & ~ is_Delete b ==>
      db'\<^sub>s\<^sub>s\<^sub>t ?A =
      db'\<^sub>s\<^sub>s\<^sub>t (?A @ ?B)",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_hole 8,
                template_app (template_hole 7, template_var 1)),
              t_empty)
            )],
       template_equation
        (template_app (template_hole 1, template_var 0),
         template_app
          (template_hole 1,
           template_app
            (template_app (template_hole 0, template_var 0),
             template_var 1))))),
    ("Stateful_Strands.trms\<^sub>s\<^sub>s\<^sub>t_subst",
     "bvars\<^sub>s\<^sub>s\<^sub>t ?S Int subst_domain ?\<theta> = {} ==>
      trms\<^sub>s\<^sub>s\<^sub>t
       (?S \<cdot>\<^sub>s\<^sub>s\<^sub>t ?\<theta>) =
      trms\<^sub>s\<^sub>s\<^sub>t ?S \<cdot>\<^sub>s\<^sub>e\<^sub>t
      ?\<theta>",
     template_implication
      ([template_equation
         (template_app
           (template_app
             (template_hole 8,
              template_app (template_hole 7, template_var 1)),
            template_app (template_hole 6, template_var 0)),
          template_hole 5)],
       template_equation
        (template_app
          (template_hole 3,
           template_app
            (template_app (template_hole 2, template_var 1),
             template_var 0)),
         template_app
          (template_app (template_hole 1, t_empty),
           template_app (template_hole 3, template_var 1))))),
    ("Stateful_Strands.stateful_strand_step_subst_comp",
     "range_vars ?\<delta> Int
      set (bvars\<^sub>s\<^sub>s\<^sub>t\<^sub>p ?x) =
      {} ==>
      ?x \<cdot>\<^sub>s\<^sub>s\<^sub>t\<^sub>p
      ?\<delta> \<circ>\<^sub>s ?\<theta> =
      (?x \<cdot>\<^sub>s\<^sub>s\<^sub>t\<^sub>p
       ?\<delta>) \<cdot>\<^sub>s\<^sub>s\<^sub>t\<^sub>p
      ?\<theta>",
     template_implication
      ([template_equation
         (template_app
           (template_app
             (template_hole 7,
              template_app (template_hole 6, template_var 2)),
            template_app
             (template_hole 5,
              template_app (template_hole 4, template_var 1))),
          template_hole 3)],
       template_equation
        (template_app
          (template_app (template_hole 1, template_var 1),
           template_app
            (template_app (template_hole 0, template_var 2),
             template_var 0)),
         template_app
          (template_app
            (template_hole 1,
             template_app
              (template_app (template_hole 1, template_var 1),
               template_var 2)),
           template_var 0)))),
    ("Stateful_Strands.stateful_strand_step_subst_inv_cases",
     "receive\<langle>?t\<rangle>
      : set (?S \<cdot>\<^sub>s\<^sub>s\<^sub>t ?\<sigma>) ==>
      EX t'.
         ?t = t' \<cdot> ?\<sigma> & receive\<langle>t'\<rangle> : set ?S",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_hole 7,
                template_app (template_hole 6, template_var 2)),
              template_app
               (template_hole 5,
                template_app
                 (template_app (template_hole 4, template_var 1),
                  template_var 0)))
            )],
       template_predicate (template_app (template_hole 3, t_empty)))),
    ("Stateful_Strands.stateful_strand_step_subst_inv_cases",
     "send\<langle>?t\<rangle>
      : set (?S \<cdot>\<^sub>s\<^sub>s\<^sub>t ?\<sigma>) ==>
      EX t'. ?t = t' \<cdot> ?\<sigma> & send\<langle>t'\<rangle> : set ?S",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_hole 7,
                template_app (template_hole 6, template_var 2)),
              template_app
               (template_hole 5,
                template_app
                 (template_app (template_hole 4, template_var 1),
                  template_var 0)))
            )],
       template_predicate (template_app (template_hole 3, t_empty)))),
    ("Stateful_Strands.stateful_strand_step_subst_inI",
     "\<langle>?c: ?t \<doteq> ?s\<rangle> : set ?A ==>
      \<langle>?c: (?t \<cdot>
                    ?\<theta>) \<doteq> ?s \<cdot> ?\<theta>\<rangle>
      : set (?A \<cdot>\<^sub>s\<^sub>s\<^sub>t ?\<theta>)",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_hole 4,
                template_app
                 (template_app
                   (template_app (template_hole 3, template_var 4),
                    template_var 3),
                  template_var 2)),
              template_app (template_hole 2, template_var 1))
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 4,
               template_app
                (template_app
                  (template_app (template_hole 3, template_var 4),
                   template_app
                    (template_app (template_hole 1, template_var 3),
                     template_var 0)),
                 template_app
                  (template_app (template_hole 1, template_var 2),
                   template_var 0))),
             template_app
              (template_hole 2,
               template_app
                (template_app (template_hole 0, template_var 1),
                 template_var 0)))
           ))),
    ("Stateful_Strands.stateful_strand_step_subst_inI",
     "\<langle>?c: ?t \<in> ?s\<rangle> : set ?A ==>
      \<langle>?c: (?t \<cdot>
                    ?\<theta>) \<in> ?s \<cdot> ?\<theta>\<rangle>
      : set (?A \<cdot>\<^sub>s\<^sub>s\<^sub>t ?\<theta>)",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_hole 4,
                template_app
                 (template_app
                   (template_app (template_hole 3, template_var 4),
                    template_var 3),
                  template_var 2)),
              template_app (template_hole 2, template_var 1))
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 4,
               template_app
                (template_app
                  (template_app (template_hole 3, template_var 4),
                   template_app
                    (template_app (template_hole 1, template_var 3),
                     template_var 0)),
                 template_app
                  (template_app (template_hole 1, template_var 2),
                   template_var 0))),
             template_app
              (template_hole 2,
               template_app
                (template_app (template_hole 0, template_var 1),
                 template_var 0)))
           ))),
    ("Stateful_Strands.trms\<^sub>s\<^sub>s\<^sub>t\<^sub>p_subst",
     "set (bvars\<^sub>s\<^sub>s\<^sub>t\<^sub>p ?a) Int
      subst_domain ?\<theta> =
      {} ==>
      trms\<^sub>s\<^sub>s\<^sub>t\<^sub>p
       (?a \<cdot>\<^sub>s\<^sub>s\<^sub>t\<^sub>p ?\<theta>) =
      trms\<^sub>s\<^sub>s\<^sub>t\<^sub>p
       ?a \<cdot>\<^sub>s\<^sub>e\<^sub>t
      ?\<theta>",
     template_implication
      ([template_equation
         (template_app
           (template_app
             (template_hole 9,
              template_app
               (template_hole 8,
                template_app (template_hole 7, template_var 1))),
            template_app (template_hole 6, template_var 0)),
          template_hole 5)],
       template_equation
        (template_app
          (template_hole 3,
           template_app
            (template_app (template_hole 2, template_var 1),
             template_var 0)),
         template_app
          (template_app (template_hole 1, t_empty),
           template_app (template_hole 3, template_var 1))))),
    ("Stateful_Strands.subst_apply_NegChecks_no_bvars",
     "\<langle>?t not in ?s\<rangle> \<cdot>\<^sub>s\<^sub>s\<^sub>t\<^sub>p
      ?\<theta> =
      \<langle>?t \<cdot> ?\<theta> not in ?s \<cdot> ?\<theta>\<rangle>",
     template_equation
      (template_app
        (template_app
          (template_hole 6,
           template_app
            (template_app
              (template_app (template_hole 5, template_hole 4),
               template_hole 3),
             template_app
              (template_app
                (template_hole 2,
                 template_app
                  (template_app (template_hole 1, template_var 2),
                   template_var 1)),
               template_hole 3))),
         template_var 0),
       template_app
        (template_app
          (template_app (template_hole 5, template_hole 4),
           template_hole 3),
         template_app
          (template_app
            (template_hole 2,
             template_app
              (template_app
                (template_hole 1,
                 template_app
                  (template_app (template_hole 0, template_var 2),
                   template_var 0)),
               template_app
                (template_app (template_hole 0, template_var 1),
                 template_var 0))),
           template_hole 3)))),
    ("Stateful_Strands.subst_apply_NegChecks_no_bvars",
     "\<langle>?t != ?s\<rangle> \<cdot>\<^sub>s\<^sub>s\<^sub>t\<^sub>p
      ?\<theta> =
      \<langle>?t \<cdot> ?\<theta> != ?s \<cdot> ?\<theta>\<rangle>",
     template_equation
      (template_app
        (template_app
          (template_hole 6,
           template_app
            (template_app
              (template_app (template_hole 5, template_hole 4),
               template_app
                (template_app
                  (template_hole 3,
                   template_app
                    (template_app (template_hole 2, template_var 2),
                     template_var 1)),
                 template_hole 1)),
             template_hole 1)),
         template_var 0),
       template_app
        (template_app
          (template_app (template_hole 5, template_hole 4),
           template_app
            (template_app
              (template_hole 3,
               template_app
                (template_app
                  (template_hole 2,
                   template_app
                    (template_app (template_hole 0, template_var 2),
                     template_var 0)),
                 template_app
                  (template_app (template_hole 0, template_var 1),
                   template_var 0))),
             template_hole 1)),
         template_hole 1))),
    ("Stateful_Strands.subst_apply_bvars_disj_NegChecks",
     "set ?X Int subst_domain ?\<theta> = {} ==>
      \<forall>?X\<langle>\<or>\<noteq>: ?F \<or>\<notin>: ?G\<rangle> \<cdot>\<^sub>s\<^sub>s\<^sub>t\<^sub>p
      ?\<theta> =
      \<forall>?X\<langle>\<or>\<noteq>: (?F \<cdot>\<^sub>p\<^sub>a\<^sub>i\<^sub>r\<^sub>s
    ?\<theta>) \<or>\<notin>: ?G \<cdot>\<^sub>p\<^sub>a\<^sub>i\<^sub>r\<^sub>s
                              ?\<theta>\<rangle>",
     template_implication
      ([template_equation
         (template_app
           (template_app
             (template_hole 7,
              template_app (template_hole 6, template_var 3)),
            template_app (template_hole 5, template_var 2)),
          template_hole 4)],
       template_equation
        (template_app
          (template_app
            (template_hole 2,
             template_app
              (template_app
                (template_app (template_hole 1, template_var 3),
                 template_var 1),
               template_var 0)),
           template_var 2),
         template_app
          (template_app
            (template_app (template_hole 1, template_var 3),
             template_app
              (template_app (template_hole 0, template_var 1),
               template_var 2)),
           template_app
            (template_app (template_hole 0, template_var 0),
             template_var 2))))),
    ("Stateful_Strands.trms\<^sub>s\<^sub>s\<^sub>t_fv_subst_subset",
     "[| ?t : trms\<^sub>s\<^sub>s\<^sub>t ?S;
         subst_domain ?\<theta> Int bvars\<^sub>s\<^sub>s\<^sub>t ?S = {} |]
      ==> fv (?t \<cdot> ?\<theta>)
          <= vars\<^sub>s\<^sub>s\<^sub>t
              (?S \<cdot>\<^sub>s\<^sub>s\<^sub>t ?\<theta>)",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 11, template_var 2),
              template_app (template_hole 10, template_var 1))
            ),
        template_equation
         (template_app
           (template_app
             (template_hole 8,
              template_app (template_hole 7, template_var 0)),
            template_app (template_hole 6, template_var 1)),
          template_hole 5)],
       template_inequation
        (less_equals,
         template_app
          (template_hole 3,
           template_app
            (template_app (template_hole 2, template_var 2),
             template_var 0)),
         template_app
          (template_hole 1,
           template_app
            (template_app (template_hole 0, template_var 1),
             template_var 0))))),
    ("Stateful_Strands.setops\<^sub>s\<^sub>s\<^sub>t\<^sub>p_subst'",
     "~ is_NegChecks ?a ==>
      setops\<^sub>s\<^sub>s\<^sub>t\<^sub>p
       (?a \<cdot>\<^sub>s\<^sub>s\<^sub>t\<^sub>p ?\<theta>) =
      setops\<^sub>s\<^sub>s\<^sub>t\<^sub>p
       ?a \<cdot>\<^sub>p\<^sub>s\<^sub>e\<^sub>t
      ?\<theta>",
     template_implication
      ([template_negation
         (
            template_predicate
             (template_app (template_hole 7, template_var 1))
            )],
       template_equation
        (template_app
          (template_hole 5,
           template_app
            (template_app (template_hole 4, template_var 1),
             template_var 0)),
         template_app
          (template_app (template_hole 3, t_empty),
           template_app (template_hole 5, template_var 1))))),
    ("Stateful_Strands.fv\<^sub>s\<^sub>s\<^sub>t_is_subterm_trms\<^sub>s\<^sub>s\<^sub>t_subst",
     "[| ?x : fv\<^sub>s\<^sub>s\<^sub>t ?T;
         bvars\<^sub>s\<^sub>s\<^sub>t ?T Int subst_domain ?\<theta> = {} |]
      ==> ?\<theta> ?x \<sqsubseteq>\<^sub>s\<^sub>e\<^sub>t
          trms\<^sub>s\<^sub>s\<^sub>t
           (?T \<cdot>\<^sub>s\<^sub>s\<^sub>t ?\<theta>)",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 12, template_var 2),
              template_app (template_hole 11, template_var 1))
            ),
        template_equation
         (template_app
           (template_app
             (template_hole 9,
              template_app (template_hole 8, template_var 1)),
            template_app (template_hole 7, template_var 0)),
          template_hole 6)],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 5,
               template_app (template_var 0, template_var 2)),
             template_app
              (template_hole 4,
               template_app
                (template_app (template_hole 3, template_hole 2),
                 template_app
                  (template_hole 1,
                   template_app
                    (template_app (template_hole 0, template_var 1),
                     template_var 0)))))
           ))),
    ("Stateful_Strands.stateful_strand_step_cases_subst",
     "is_Assignment ?a =
      is_Assignment (?a \<cdot>\<^sub>s\<^sub>s\<^sub>t\<^sub>p ?\<theta>)",
     template_bimplication
      (template_predicate
        (
           template_app
            (template_app
              (template_hole 7,
               template_app
                (template_app
                  (template_hole 6,
                   template_app (template_hole 5, template_var 1)),
                 template_app (template_hole 4, template_var 1))),
             template_app
              (template_app
                (template_hole 3,
                 template_app (template_hole 2, template_var 1)),
               template_hole 1))
           ),
       template_predicate
        (
           template_app
            (template_app
              (template_hole 7,
               template_app
                (template_app
                  (template_hole 6,
                   template_app
                    (template_hole 5,
                     template_app
                      (template_app (template_hole 0, template_var 1),
                       template_var 0))),
                 template_app
                  (template_hole 4,
                   template_app
                    (template_app (template_hole 0, template_var 1),
                     template_var 0)))),
             template_app
              (template_app
                (template_hole 3,
                 template_app
                  (template_hole 2,
                   template_app
                    (template_app (template_hole 0, template_var 1),
                     template_var 0))),
               template_hole 1))
           ))),
    ("Stateful_Strands.trms\<^sub>s\<^sub>s\<^sub>t\<^sub>p_subst''",
     "?t : trms\<^sub>s\<^sub>s\<^sub>t\<^sub>p
            (?b \<cdot>\<^sub>s\<^sub>s\<^sub>t\<^sub>p ?\<delta>) ==>
      EX s:trms\<^sub>s\<^sub>s\<^sub>t\<^sub>p ?b.
         ?t =
         s \<cdot>
         rm_vars (set (bvars\<^sub>s\<^sub>s\<^sub>t\<^sub>p ?b))
          ?\<delta>",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 10, template_var 2),
              template_app
               (template_hole 9,
                template_app
                 (template_app (template_hole 8, template_var 1),
                  template_var 0)))
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 7,
               template_app (template_hole 9, template_var 1)),
             t_empty)
           ))),
    ("Stateful_Strands.setops\<^sub>s\<^sub>s\<^sub>t_subst",
     "bvars\<^sub>s\<^sub>s\<^sub>t ?S Int subst_domain ?\<theta> = {} ==>
      setops\<^sub>s\<^sub>s\<^sub>t
       (?S \<cdot>\<^sub>s\<^sub>s\<^sub>t ?\<theta>) =
      setops\<^sub>s\<^sub>s\<^sub>t
       ?S \<cdot>\<^sub>p\<^sub>s\<^sub>e\<^sub>t
      ?\<theta>",
     template_implication
      ([template_equation
         (template_app
           (template_app
             (template_hole 10,
              template_app (template_hole 9, template_var 1)),
            template_app (template_hole 8, template_var 0)),
          template_hole 7)],
       template_equation
        (template_app
          (template_hole 5,
           template_app
            (template_app (template_hole 4, template_var 1),
             template_var 0)),
         template_app
          (template_app (template_hole 3, t_empty),
           template_app (template_hole 5, template_var 1))))),
    ("Stateful_Strands.setops\<^sub>s\<^sub>s\<^sub>t\<^sub>p_subst",
     "set (bvars\<^sub>s\<^sub>s\<^sub>t\<^sub>p ?a) Int
      subst_domain ?\<theta> =
      {} ==>
      setops\<^sub>s\<^sub>s\<^sub>t\<^sub>p
       (?a \<cdot>\<^sub>s\<^sub>s\<^sub>t\<^sub>p ?\<theta>) =
      setops\<^sub>s\<^sub>s\<^sub>t\<^sub>p
       ?a \<cdot>\<^sub>p\<^sub>s\<^sub>e\<^sub>t
      ?\<theta>",
     template_implication
      ([template_equation
         (template_app
           (template_app
             (template_hole 11,
              template_app
               (template_hole 10,
                template_app (template_hole 9, template_var 1))),
            template_app (template_hole 8, template_var 0)),
          template_hole 7)],
       template_equation
        (template_app
          (template_hole 5,
           template_app
            (template_app (template_hole 4, template_var 1),
             template_var 0)),
         template_app
          (template_app (template_hole 3, t_empty),
           template_app (template_hole 5, template_var 1))))),
    ("Stateful_Strands.stateful_strand_step_subst_inI",
     "\<langle>?t not in ?s\<rangle> : set ?A ==>
      \<langle>?t \<cdot> ?\<theta> not in ?s \<cdot> ?\<theta>\<rangle>
      : set (?A \<cdot>\<^sub>s\<^sub>s\<^sub>t ?\<theta>)",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_hole 8,
                template_app
                 (template_app
                   (template_app (template_hole 7, template_hole 6),
                    template_hole 5),
                  template_app
                   (template_app
                     (template_hole 4,
                      template_app
                       (template_app (template_hole 3, template_var 3),
                        template_var 2)),
                    template_hole 5))),
              template_app (template_hole 2, template_var 1))
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 8,
               template_app
                (template_app
                  (template_app (template_hole 7, template_hole 6),
                   template_hole 5),
                 template_app
                  (template_app
                    (template_hole 4,
                     template_app
                      (template_app
                        (template_hole 3,
                         template_app
                          (template_app (template_hole 1, template_var 3),
                           template_var 0)),
                       template_app
                        (template_app (template_hole 1, template_var 2),
                         template_var 0))),
                   template_hole 5))),
             template_app
              (template_hole 2,
               template_app
                (template_app (template_hole 0, template_var 1),
                 template_var 0)))
           ))),
    ("Stateful_Strands.stateful_strand_step_subst_inI",
     "\<langle>?t != ?s\<rangle> : set ?A ==>
      \<langle>?t \<cdot> ?\<theta> != ?s \<cdot> ?\<theta>\<rangle>
      : set (?A \<cdot>\<^sub>s\<^sub>s\<^sub>t ?\<theta>)",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_hole 8,
                template_app
                 (template_app
                   (template_app (template_hole 7, template_hole 6),
                    template_app
                     (template_app
                       (template_hole 5,
                        template_app
                         (template_app (template_hole 4, template_var 3),
                          template_var 2)),
                      template_hole 3)),
                  template_hole 3)),
              template_app (template_hole 2, template_var 1))
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 8,
               template_app
                (template_app
                  (template_app (template_hole 7, template_hole 6),
                   template_app
                    (template_app
                      (template_hole 5,
                       template_app
                        (template_app
                          (template_hole 4,
                           template_app
                            (template_app (template_hole 1, template_var 3),
                             template_var 0)),
                         template_app
                          (template_app (template_hole 1, template_var 2),
                           template_var 0))),
                     template_hole 3)),
                 template_hole 3)),
             template_app
              (template_hole 2,
               template_app
                (template_app (template_hole 0, template_var 1),
                 template_var 0)))
           ))),
    ("Stateful_Strands.fv\<^sub>s\<^sub>s\<^sub>t_subst_fv_subset",
     "[| ?x : fv\<^sub>s\<^sub>s\<^sub>t ?S;
         ?x ~: bvars\<^sub>s\<^sub>s\<^sub>t ?S;
         fv (?\<theta> ?x) Int bvars\<^sub>s\<^sub>s\<^sub>t ?S = {} |]
      ==> fv (?\<theta> ?x)
          <= fv\<^sub>s\<^sub>s\<^sub>t
              (?S \<cdot>\<^sub>s\<^sub>s\<^sub>t ?\<theta>)",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 9, template_var 2),
              template_app (template_hole 8, template_var 1))
            ),
        template_negation
         (
            template_predicate
             (
                template_app
                 (template_app (template_hole 9, template_var 2),
                  template_app (template_hole 6, template_var 1))
                )
            ),
        template_equation
         (template_app
           (template_app
             (template_hole 4,
              template_app
               (template_hole 3,
                template_app (template_var 0, template_var 2))),
            template_app (template_hole 6, template_var 1)),
          template_hole 2)],
       template_inequation
        (less_equals,
         template_app
          (template_hole 3, template_app (template_var 0, template_var 2)),
         template_app
          (template_hole 8,
           template_app
            (template_app (template_hole 0, template_var 1),
             template_var 0))))),
    ("Stateful_Strands.stateful_strand_step_subst_inv_cases",
     "delete\<langle>?t,?s\<rangle>
      : set (?S \<cdot>\<^sub>s\<^sub>s\<^sub>t ?\<sigma>) ==>
      EX t' s'.
         ?t = t' \<cdot> ?\<sigma> &
         ?s = s' \<cdot> ?\<sigma> &
         delete\<langle>t',s'\<rangle> : set ?S",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_hole 7,
                template_app
                 (template_app (template_hole 6, template_var 3),
                  template_var 2)),
              template_app
               (template_hole 5,
                template_app
                 (template_app (template_hole 4, template_var 1),
                  template_var 0)))
            )],
       template_predicate (template_app (template_hole 3, t_empty)))),
    ("Stateful_Strands.stateful_strand_step_subst_inv_cases",
     "insert\<langle>?t,?s\<rangle>
      : set (?S \<cdot>\<^sub>s\<^sub>s\<^sub>t ?\<sigma>) ==>
      EX t' s'.
         ?t = t' \<cdot> ?\<sigma> &
         ?s = s' \<cdot> ?\<sigma> &
         insert\<langle>t',s'\<rangle> : set ?S",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_hole 7,
                template_app
                 (template_app (template_hole 6, template_var 3),
                  template_var 2)),
              template_app
               (template_hole 5,
                template_app
                 (template_app (template_hole 4, template_var 1),
                  template_var 0)))
            )],
       template_predicate (template_app (template_hole 3, t_empty)))),
    ("Stateful_Strands.trms\<^sub>s\<^sub>s\<^sub>t_funs_term_cases",
     "[| ?t : trms\<^sub>s\<^sub>s\<^sub>t
               (?S \<cdot>\<^sub>s\<^sub>s\<^sub>t ?\<theta>);
         ?f : funs_term ?t |]
      ==> (EX u:trms\<^sub>s\<^sub>s\<^sub>t ?S. ?f : funs_term u) |
          (EX x:fv\<^sub>s\<^sub>s\<^sub>t ?S.
              ?f : funs_term (?\<theta> x))",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 8, template_var 3),
              template_app
               (template_hole 7,
                template_app
                 (template_app (template_hole 6, template_var 2),
                  template_var 1)))
            ),
        template_predicate
         (
            template_app
             (template_app (template_hole 5, template_var 0),
              template_app (template_hole 4, template_var 3))
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 3,
               template_app
                (template_app
                  (template_hole 2,
                   template_app (template_hole 7, template_var 2)),
                 t_empty)),
             template_app
              (template_app
                (template_hole 1,
                 template_app (template_hole 0, template_var 2)),
               t_empty))
           ))),
    ("Stateful_Strands.trms\<^sub>s\<^sub>s\<^sub>t\<^sub>p_funs_term_cases",
     "[| ?t : trms\<^sub>s\<^sub>s\<^sub>t\<^sub>p
               (?s \<cdot>\<^sub>s\<^sub>s\<^sub>t\<^sub>p ?\<theta>);
         ?f : funs_term ?t |]
      ==> (EX u:trms\<^sub>s\<^sub>s\<^sub>t\<^sub>p ?s. ?f : funs_term u) |
          (EX x:fv\<^sub>s\<^sub>s\<^sub>t\<^sub>p ?s.
              ?f : funs_term (?\<theta> x))",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 8, template_var 3),
              template_app
               (template_hole 7,
                template_app
                 (template_app (template_hole 6, template_var 2),
                  template_var 1)))
            ),
        template_predicate
         (
            template_app
             (template_app (template_hole 5, template_var 0),
              template_app (template_hole 4, template_var 3))
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 3,
               template_app
                (template_app
                  (template_hole 2,
                   template_app (template_hole 7, template_var 2)),
                 t_empty)),
             template_app
              (template_app
                (template_hole 1,
                 template_app (template_hole 0, template_var 2)),
               t_empty))
           ))),
    ("Stateful_Strands.stateful_strand_step_subst_inv_cases",
     "\<langle>?c: ?t \<doteq> ?s\<rangle>
      : set (?S \<cdot>\<^sub>s\<^sub>s\<^sub>t ?\<sigma>) ==>
      EX t' s'.
         ?t = t' \<cdot> ?\<sigma> &
         ?s = s' \<cdot> ?\<sigma> &
         \<langle>?c: t' \<doteq> s'\<rangle> : set ?S",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_hole 7,
                template_app
                 (template_app
                   (template_app (template_hole 6, template_var 4),
                    template_var 3),
                  template_var 2)),
              template_app
               (template_hole 5,
                template_app
                 (template_app (template_hole 4, template_var 1),
                  template_var 0)))
            )],
       template_predicate (template_app (template_hole 3, t_empty)))),
    ("Stateful_Strands.stateful_strand_step_subst_inv_cases",
     "\<langle>?c: ?t \<in> ?s\<rangle>
      : set (?S \<cdot>\<^sub>s\<^sub>s\<^sub>t ?\<sigma>) ==>
      EX t' s'.
         ?t = t' \<cdot> ?\<sigma> &
         ?s = s' \<cdot> ?\<sigma> &
         \<langle>?c: t' \<in> s'\<rangle> : set ?S",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_hole 7,
                template_app
                 (template_app
                   (template_app (template_hole 6, template_var 4),
                    template_var 3),
                  template_var 2)),
              template_app
               (template_hole 5,
                template_app
                 (template_app (template_hole 4, template_var 1),
                  template_var 0)))
            )],
       template_predicate (template_app (template_hole 3, t_empty)))),
    ("Stateful_Strands.trms\<^sub>s\<^sub>s\<^sub>t\<^sub>p_subst'''",
     "?t : trms\<^sub>s\<^sub>s\<^sub>t\<^sub>p
            (?b \<cdot>\<^sub>s\<^sub>s\<^sub>t\<^sub>p
             ?\<delta>) \<cdot>\<^sub>s\<^sub>e\<^sub>t
           ?\<theta> ==>
      EX s:trms\<^sub>s\<^sub>s\<^sub>t\<^sub>p ?b.
         ?t =
         s \<cdot>
         rm_vars (set (bvars\<^sub>s\<^sub>s\<^sub>t\<^sub>p ?b))
          ?\<delta> \<circ>\<^sub>s
         ?\<theta>",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 12, template_var 3),
              template_app
               (template_app (template_hole 11, t_empty),
                template_app
                 (template_hole 9,
                  template_app
                   (template_app (template_hole 8, template_var 1),
                    template_var 0))))
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 7,
               template_app (template_hole 9, template_var 1)),
             t_empty)
           ))),
    ("Stateful_Strands.stateful_strand_step_cases_subst",
     "is_Check ?a =
      is_Check (?a \<cdot>\<^sub>s\<^sub>s\<^sub>t\<^sub>p ?\<theta>)",
     template_bimplication
      (template_predicate
        (
           template_app
            (template_app
              (template_hole 8,
               template_app
                (template_app
                  (template_hole 7,
                   template_app
                    (template_app
                      (template_hole 8,
                       template_app (template_hole 6, template_var 1)),
                     template_app (template_hole 5, template_var 1))),
                 template_app
                  (template_app
                    (template_hole 4,
                     template_app (template_hole 3, template_var 1)),
                   template_hole 2))),
             template_app (template_hole 1, template_var 1))
           ),
       template_predicate
        (
           template_app
            (template_app
              (template_hole 8,
               template_app
                (template_app
                  (template_hole 7,
                   template_app
                    (template_app
                      (template_hole 8,
                       template_app
                        (template_hole 6,
                         template_app
                          (template_app (template_hole 0, template_var 1),
                           template_var 0))),
                     template_app
                      (template_hole 5,
                       template_app
                        (template_app (template_hole 0, template_var 1),
                         template_var 0)))),
                 template_app
                  (template_app
                    (template_hole 4,
                     template_app
                      (template_hole 3,
                       template_app
                        (template_app (template_hole 0, template_var 1),
                         template_var 0))),
                   template_hole 2))),
             template_app
              (template_hole 1,
               template_app
                (template_app (template_hole 0, template_var 1),
                 template_var 0)))
           ))),
    ("Stateful_Strands.subset_subst_pairs_diff_exists",
     "EX Di<=?D.
         Di \<cdot>\<^sub>p\<^sub>s\<^sub>e\<^sub>t ?\<I> =
         (?D \<cdot>\<^sub>p\<^sub>s\<^sub>e\<^sub>t ?\<I>) - ?D'",
     template_predicate (template_app (template_hole 8, t_empty))),
    ("Stateful_Strands.fv\<^sub>s\<^sub>s\<^sub>t\<^sub>p_subst_cases",
     "fv\<^sub>s\<^sub>s\<^sub>t\<^sub>p
       (\<forall>?X\<langle>\<or>\<noteq>: ?F \<or>\<notin>: ?G\<rangle> \<cdot>\<^sub>s\<^sub>s\<^sub>t\<^sub>p
        ?\<theta>) =
      fv\<^sub>p\<^sub>a\<^sub>i\<^sub>r\<^sub>s
       (?F \<cdot>\<^sub>p\<^sub>a\<^sub>i\<^sub>r\<^sub>s
        rm_vars (set ?X) ?\<theta>) Un
      fv\<^sub>p\<^sub>a\<^sub>i\<^sub>r\<^sub>s
       (?G \<cdot>\<^sub>p\<^sub>a\<^sub>i\<^sub>r\<^sub>s
        rm_vars (set ?X) ?\<theta>) -
      set ?X",
     template_equation
      (template_app
        (template_hole 10,
         template_app
          (template_app
            (template_hole 9,
             template_app
              (template_app
                (template_app (template_hole 8, template_var 3),
                 template_var 2),
               template_var 1)),
           template_var 0)),
       template_app
        (template_app
          (template_hole 7,
           template_app
            (template_app
              (template_hole 6,
               template_app
                (template_hole 5,
                 template_app
                  (template_app (template_hole 4, template_var 2),
                   t_empty))),
             template_app
              (template_hole 5,
               template_app
                (template_app (template_hole 4, template_var 1),
                 t_empty)))),
         template_app (template_hole 1, template_var 3)))),
    ("Stateful_Strands.vars\<^sub>s\<^sub>s\<^sub>t\<^sub>p_subst_cases",
     "vars\<^sub>s\<^sub>s\<^sub>t\<^sub>p
       (\<forall>?X\<langle>\<or>\<noteq>: ?F \<or>\<notin>: ?G\<rangle> \<cdot>\<^sub>s\<^sub>s\<^sub>t\<^sub>p
        ?\<theta>) =
      fv\<^sub>p\<^sub>a\<^sub>i\<^sub>r\<^sub>s
       (?F \<cdot>\<^sub>p\<^sub>a\<^sub>i\<^sub>r\<^sub>s
        rm_vars (set ?X) ?\<theta>) Un
      fv\<^sub>p\<^sub>a\<^sub>i\<^sub>r\<^sub>s
       (?G \<cdot>\<^sub>p\<^sub>a\<^sub>i\<^sub>r\<^sub>s
        rm_vars (set ?X) ?\<theta>) Un
      set ?X",
     template_equation
      (template_app
        (template_hole 9,
         template_app
          (template_app
            (template_hole 8,
             template_app
              (template_app
                (template_app (template_hole 7, template_var 3),
                 template_var 2),
               template_var 1)),
           template_var 0)),
       template_app
        (template_app
          (template_hole 6,
           template_app
            (template_app
              (template_hole 6,
               template_app
                (template_hole 5,
                 template_app
                  (template_app (template_hole 4, template_var 2),
                   t_empty))),
             template_app
              (template_hole 5,
               template_app
                (template_app (template_hole 4, template_var 1),
                 t_empty)))),
         template_app (template_hole 1, template_var 3)))),
    ("Stateful_Strands.trms\<^sub>s\<^sub>s\<^sub>t_fv_subst_subset'",
     "[| ?t \<sqsubseteq>\<^sub>s\<^sub>e\<^sub>t
         trms\<^sub>s\<^sub>s\<^sub>t ?S;
         fv ?t Int bvars\<^sub>s\<^sub>s\<^sub>t ?S = {};
         fv (?t \<cdot> ?\<theta>) Int bvars\<^sub>s\<^sub>s\<^sub>t ?S =
         {} |]
      ==> fv (?t \<cdot> ?\<theta>)
          <= fv\<^sub>s\<^sub>s\<^sub>t
              (?S \<cdot>\<^sub>s\<^sub>s\<^sub>t ?\<theta>)",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 13, template_var 2),
              template_app
               (template_hole 12,
                template_app
                 (template_app (template_hole 11, template_hole 10),
                  template_app (template_hole 9, template_var 1))))
            ),
        template_equation
         (template_app
           (template_app
             (template_hole 7,
              template_app (template_hole 6, template_var 2)),
            template_app (template_hole 5, template_var 1)),
          template_hole 4),
        template_equation
         (template_app
           (template_app
             (template_hole 7,
              template_app
               (template_hole 6,
                template_app
                 (template_app (template_hole 3, template_var 2),
                  template_var 0))),
            template_app (template_hole 5, template_var 1)),
          template_hole 4)],
       template_inequation
        (less_equals,
         template_app
          (template_hole 6,
           template_app
            (template_app (template_hole 3, template_var 2),
             template_var 0)),
         template_app
          (template_hole 1,
           template_app
            (template_app (template_hole 0, template_var 1),
             template_var 0))))),
    ("Stateful_Strands.wfrestrictedvars\<^sub>s\<^sub>s\<^sub>t_singleton",
     "wfrestrictedvars\<^sub>s\<^sub>s\<^sub>t [?s] =
      wfrestrictedvars\<^sub>s\<^sub>s\<^sub>t\<^sub>p ?s",
     template_equation
      (template_app
        (template_hole 6,
         template_app
          (template_app (template_hole 5, template_var 0),
           template_hole 4)),
       template_app
        (template_app
          (template_app
            (template_app
              (template_app
                (template_app
                  (template_app
                    (template_app (template_hole 3, t_empty), t_empty),
                   t_empty),
                 t_empty),
               t_empty),
             t_empty),
           t_empty),
         template_var 0))),
    ("Stateful_Strands.stateful_strand_step_subst_inI",
     "\<forall>?X\<langle>\<or>\<noteq>: ?F \<or>\<notin>: ?G\<rangle>
      : set ?A ==>
      \<forall>?X\<langle>\<or>\<noteq>: (?F \<cdot>\<^sub>p\<^sub>a\<^sub>i\<^sub>r\<^sub>s
    rm_vars (set ?X)
     ?\<theta>) \<or>\<notin>: ?G \<cdot>\<^sub>p\<^sub>a\<^sub>i\<^sub>r\<^sub>s
                               rm_vars (set ?X) ?\<theta>\<rangle>
      : set (?A \<cdot>\<^sub>s\<^sub>s\<^sub>t ?\<theta>)",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_hole 8,
                template_app
                 (template_app
                   (template_app (template_hole 7, template_var 4),
                    template_var 3),
                  template_var 2)),
              template_app (template_hole 6, template_var 1))
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 8,
               template_app
                (template_app
                  (template_app (template_hole 7, template_var 4),
                   template_app
                    (template_app (template_hole 5, template_var 3),
                     t_empty)),
                 template_app
                  (template_app (template_hole 5, template_var 2),
                   t_empty))),
             template_app
              (template_hole 6,
               template_app
                (template_app (template_hole 0, template_var 1),
                 template_var 0)))
           ))),
    ("Stateful_Strands.db\<^sub>s\<^sub>s\<^sub>t_in_cases",
     "(?t, ?s) : set (db'\<^sub>s\<^sub>s\<^sub>t ?A ?I ?D) ==>
      (?t, ?s) : set ?D |
      (EX t' s'.
          insert\<langle>t',s'\<rangle> : set ?A &
          ?t = t' \<cdot> ?I & ?s = s' \<cdot> ?I)",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_hole 11,
                template_app
                 (template_app (template_hole 10, template_var 4),
                  template_var 3)),
              template_app
               (template_hole 9,
                template_app
                 (template_app
                   (template_app (template_hole 8, template_var 2),
                    template_var 1),
                  template_var 0)))
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 7,
               template_app
                (template_app
                  (template_hole 11,
                   template_app
                    (template_app (template_hole 10, template_var 4),
                     template_var 3)),
                 template_app (template_hole 9, template_var 0))),
             template_app (template_hole 6, t_empty))
           ))),
    ("Stateful_Strands.vars\<^sub>s\<^sub>s\<^sub>t\<^sub>p_subst_cases",
     "vars\<^sub>s\<^sub>s\<^sub>t\<^sub>p
       (\<forall>?X\<langle>\<or>\<noteq>: [] \<or>\<notin>: [(?t,
                         ?s)]\<rangle> \<cdot>\<^sub>s\<^sub>s\<^sub>t\<^sub>p
        ?\<theta>) =
      fv (?t \<cdot> rm_vars (set ?X) ?\<theta>) Un
      fv (?s \<cdot> rm_vars (set ?X) ?\<theta>) Un
      set ?X",
     template_equation
      (template_app
        (template_hole 12,
         template_app
          (template_app
            (template_hole 11,
             template_app
              (template_app
                (template_app (template_hole 10, template_var 3),
                 template_hole 9),
               template_app
                (template_app
                  (template_hole 8,
                   template_app
                    (template_app (template_hole 7, template_var 2),
                     template_var 1)),
                 template_hole 9))),
           template_var 0)),
       template_app
        (template_app
          (template_hole 6,
           template_app
            (template_app
              (template_hole 6,
               template_app
                (template_hole 5,
                 template_app
                  (template_app (template_hole 4, template_var 2),
                   t_empty))),
             template_app
              (template_hole 5,
               template_app
                (template_app (template_hole 4, template_var 1),
                 t_empty)))),
         template_app (template_hole 1, template_var 3)))),
    ("Stateful_Strands.vars\<^sub>s\<^sub>s\<^sub>t\<^sub>p_subst_cases",
     "vars\<^sub>s\<^sub>s\<^sub>t\<^sub>p
       (\<forall>?X\<langle>\<or>\<noteq>: [(?t,
       ?s)] \<or>\<notin>: []\<rangle> \<cdot>\<^sub>s\<^sub>s\<^sub>t\<^sub>p
        ?\<theta>) =
      fv (?t \<cdot> rm_vars (set ?X) ?\<theta>) Un
      fv (?s \<cdot> rm_vars (set ?X) ?\<theta>) Un
      set ?X",
     template_equation
      (template_app
        (template_hole 12,
         template_app
          (template_app
            (template_hole 11,
             template_app
              (template_app
                (template_app (template_hole 10, template_var 3),
                 template_app
                  (template_app
                    (template_hole 9,
                     template_app
                      (template_app (template_hole 8, template_var 2),
                       template_var 1)),
                   template_hole 7)),
               template_hole 7)),
           template_var 0)),
       template_app
        (template_app
          (template_hole 6,
           template_app
            (template_app
              (template_hole 6,
               template_app
                (template_hole 5,
                 template_app
                  (template_app (template_hole 4, template_var 2),
                   t_empty))),
             template_app
              (template_hole 5,
               template_app
                (template_app (template_hole 4, template_var 1),
                 t_empty)))),
         template_app (template_hole 1, template_var 3)))),
    ("Stateful_Strands.setops\<^sub>s\<^sub>s\<^sub>t\<^sub>p_subst''",
     "?t : setops\<^sub>s\<^sub>s\<^sub>t\<^sub>p
            (?b \<cdot>\<^sub>s\<^sub>s\<^sub>t\<^sub>p ?\<delta>) ==>
      EX s:setops\<^sub>s\<^sub>s\<^sub>t\<^sub>p ?b.
         ?t =
         s \<cdot>\<^sub>p
         rm_vars (set (bvars\<^sub>s\<^sub>s\<^sub>t\<^sub>p ?b))
          ?\<delta>",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 12, template_var 2),
              template_app
               (template_hole 11,
                template_app
                 (template_app (template_hole 10, template_var 1),
                  template_var 0)))
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 9,
               template_app (template_hole 11, template_var 1)),
             t_empty)
           ))),
    ("Stateful_Strands.wf\<^sub>s\<^sub>s\<^sub>tI'",
     "(UN x:set ?S.
          case x of receive\<langle>x\<rangle> => fv x
          | \<langle>assign: x \<doteq> t'\<rangle> => fv t'
          | \<langle>check: x \<doteq> t'\<rangle> => {}
          | insert\<langle>t,t'\<rangle> => fv t Un fv t' | _ => {})
      <= ?V ==>
      wf'\<^sub>s\<^sub>s\<^sub>t ?V ?S",
     template_implication
      ([template_inequation
         (less_equals,
          template_app
           (template_hole 8,
            template_app
             (template_app (template_hole 7, t_empty),
              template_app (template_hole 1, template_var 1))),
          template_var 0)],
       template_predicate
        (
           template_app
            (template_app (template_hole 0, template_var 0), template_var 1)
           ))),
    ("Stateful_Strands.setops\<^sub>s\<^sub>s\<^sub>t\<^sub>p_member_iff",
     "((?t, ?s) : setops\<^sub>s\<^sub>s\<^sub>t\<^sub>p ?x) =
      (?x = insert\<langle>?t,?s\<rangle> |
       ?x = delete\<langle>?t,?s\<rangle> |
       (EX ac. ?x = \<langle>ac: ?t \<in> ?s\<rangle>) |
       (EX X F F'.
           ?x =
           \<forall>X\<langle>\<or>\<noteq>: F \<or>\<notin>: F'\<rangle> &
           (?t, ?s) : set F'))",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_hole 13,
                template_app
                 (template_app (template_hole 12, template_var 2),
                  template_var 1)),
              template_app (template_hole 11, template_var 0))
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 10,
               template_app
                (template_app (template_hole 9, template_var 0),
                 template_app
                  (template_app (template_hole 8, template_var 2),
                   template_var 1))),
             template_app
              (template_app
                (template_hole 10,
                 template_app
                  (template_app (template_hole 9, template_var 0),
                   template_app
                    (template_app (template_hole 7, template_var 2),
                     template_var 1))),
               template_app
                (template_app
                  (template_hole 10,
                   template_app (template_hole 6, t_empty)),
                 template_app (template_hole 4, t_empty))))
           ))),
    ("Stateful_Strands.setops\<^sub>s\<^sub>s\<^sub>t_member_iff",
     "((?t, ?s) : setops\<^sub>s\<^sub>s\<^sub>t ?A) =
      (insert\<langle>?t,?s\<rangle> : set ?A |
       delete\<langle>?t,?s\<rangle> : set ?A |
       (EX ac. \<langle>ac: ?t \<in> ?s\<rangle> : set ?A) |
       (EX X F F'.
           \<forall>X\<langle>\<or>\<noteq>: F \<or>\<notin>: F'\<rangle>
           : set ?A &
           (?t, ?s) : set F'))",
     template_equation
      (template_app
        (template_app
          (template_hole 14,
           template_app
            (template_app (template_hole 13, template_var 2),
             template_var 1)),
         template_app (template_hole 12, template_var 0)),
       template_app
        (template_app
          (template_hole 11,
           template_app
            (template_app
              (template_hole 10,
               template_app
                (template_app (template_hole 9, template_var 2),
                 template_var 1)),
             template_app (template_hole 8, template_var 0))),
         template_app
          (template_app
            (template_hole 11,
             template_app
              (template_app
                (template_hole 10,
                 template_app
                  (template_app (template_hole 7, template_var 2),
                   template_var 1)),
               template_app (template_hole 8, template_var 0))),
           template_app
            (template_app
              (template_hole 11, template_app (template_hole 6, t_empty)),
             template_app (template_hole 4, t_empty)))))),
    ("Stateful_Strands.setops\<^sub>s\<^sub>s\<^sub>t_subst'",
     "?p : setops\<^sub>s\<^sub>s\<^sub>t
            (?S \<cdot>\<^sub>s\<^sub>s\<^sub>t ?\<delta>) ==>
      EX s:setops\<^sub>s\<^sub>s\<^sub>t ?S.
         EX X. set X <= bvars\<^sub>s\<^sub>s\<^sub>t ?S &
               ?p = s \<cdot>\<^sub>p rm_vars (set X) ?\<delta>",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 15, template_var 2),
              template_app
               (template_hole 14,
                template_app
                 (template_app (template_hole 13, template_var 1),
                  template_var 0)))
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 12,
               template_app (template_hole 14, template_var 1)),
             t_empty)
           ))),
    ("Stateful_Strands.stateful_strand_step_subst_inv_cases",
     "\<forall>?X\<langle>\<or>\<noteq>: ?F \<or>\<notin>: ?G\<rangle>
      : set (?S \<cdot>\<^sub>s\<^sub>s\<^sub>t ?\<sigma>) ==>
      EX F' G'.
         ?F =
         F' \<cdot>\<^sub>p\<^sub>a\<^sub>i\<^sub>r\<^sub>s
         rm_vars (set ?X) ?\<sigma> &
         ?G =
         G' \<cdot>\<^sub>p\<^sub>a\<^sub>i\<^sub>r\<^sub>s
         rm_vars (set ?X) ?\<sigma> &
         \<forall>?X\<langle>\<or>\<noteq>: F' \<or>\<notin>: G'\<rangle>
         : set ?S",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_hole 11,
                template_app
                 (template_app
                   (template_app (template_hole 10, template_var 4),
                    template_var 3),
                  template_var 2)),
              template_app
               (template_hole 9,
                template_app
                 (template_app (template_hole 8, template_var 1),
                  template_var 0)))
            )],
       template_predicate (template_app (template_hole 7, t_empty)))),
    ("Stateful_Strands.wf\<^sub>s\<^sub>s\<^sub>t_append_suffix'",
     "[| wf'\<^sub>s\<^sub>s\<^sub>t ?V ?S;
         (UN x:set ?S'.
             case x of receive\<langle>x\<rangle> => fv x
             | \<langle>assign: x \<doteq> t'\<rangle> => fv t'
             | \<langle>check: x \<doteq> t'\<rangle> => {}
             | insert\<langle>t,t'\<rangle> => fv t Un fv t' | _ => {})
         <= wfvarsoccs\<^sub>s\<^sub>s\<^sub>t ?S Un ?V |]
      ==> wf'\<^sub>s\<^sub>s\<^sub>t ?V (?S @ ?S')",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 11, template_var 2),
              template_var 1)
            ),
        template_inequation
         (less_equals,
          template_app
           (template_hole 9,
            template_app
             (template_app (template_hole 8, t_empty),
              template_app (template_hole 2, template_var 0))),
          template_app
           (template_app
             (template_hole 3,
              template_app (template_hole 1, template_var 1)),
            template_var 2))],
       template_predicate
        (
           template_app
            (template_app (template_hole 11, template_var 2),
             template_app
              (template_app (template_hole 0, template_var 1),
               template_var 0))
           ))),
    ("Stateful_Strands.subset_subst_pairs_diff_exists'",
     "finite ?D ==>
      EX Di<=?D.
         Di \<cdot>\<^sub>p\<^sub>s\<^sub>e\<^sub>t ?\<I>
         <= {?d \<cdot>\<^sub>p ?\<I>} &
         ?d \<cdot>\<^sub>p ?\<I>
         ~: ?D - Di \<cdot>\<^sub>p\<^sub>s\<^sub>e\<^sub>t ?\<I>",
     template_implication
      ([template_predicate
         (template_app (template_hole 12, template_var 2))],
       template_predicate (template_app (template_hole 11, t_empty)))),
    ("Stateful_Strands.db\<^sub>s\<^sub>s\<^sub>t_in_cases'",
     "[| (?t, ?s) : set (db'\<^sub>s\<^sub>s\<^sub>t ?A ?I ?D);
         (?t, ?s) ~: set ?D |]
      ==> EX B C t' s'.
             ?A = B @ insert\<langle>t',s'\<rangle> # C &
             ?t = t' \<cdot> ?I &
             ?s = s' \<cdot> ?I &
             (ALL t'' s''.
                 delete\<langle>t'',s''\<rangle> : set C -->
                 ?t ~= t'' \<cdot> ?I | ?s ~= s'' \<cdot> ?I)",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_hole 19,
                template_app
                 (template_app (template_hole 18, template_var 4),
                  template_var 3)),
              template_app
               (template_hole 17,
                template_app
                 (template_app
                   (template_app (template_hole 16, template_var 2),
                    template_var 1),
                  template_var 0)))
            ),
        template_negation
         (
            template_predicate
             (
                template_app
                 (template_app
                   (template_hole 19,
                    template_app
                     (template_app (template_hole 18, template_var 4),
                      template_var 3)),
                  template_app (template_hole 17, template_var 0))
                )
            )],
       template_predicate (template_app (template_hole 14, t_empty))))]
