Loading theory "Draft.Miscellaneous" (required by "Draft.Example_TLSTemplates" via "Draft.Example_TLS" via "Draft.Typed_Model" via "Draft.Lazy_Intruder" via "Draft.Strands_and_Constraints" via "Draft.Messages")
Loading theory "Draft.Templates" (required by "Draft.Example_TLSTemplates" via "Draft.ExtrEqs")
datatype template_term
=
     t_empty
   | template_app of template_term * template_term
   | template_hole of int
   | template_var of int
datatype sign
= equals | greater_equals | greater_than | less_equals | less_than
datatype template
=
     template_bimplication of template * template
   | template_dunno
   | template_equation of template_term * template_term
   | template_implication of template list * template
   | template_inequation of sign * template_term * template_term
   | template_negation of template
   | template_predicate of template_term
constructor t_empty: template_term
constructor template_app: template_term * template_term -> template_term
constructor template_hole: int -> template_term
constructor template_var: int -> template_term
constructor equals: sign
constructor greater_equals: sign
constructor greater_than: sign
constructor less_equals: sign
constructor less_than: sign
constructor template_bimplication: template * template -> template
constructor template_dunno: template
constructor template_equation: template_term * template_term -> template
constructor template_implication: template list * template -> template
constructor template_inequation:
   sign * template_term * template_term -> template
constructor template_negation: template -> template
constructor template_predicate: template_term -> template
val vfs = fn: term -> (indexname * typ) list * (string * typ) list
val indexOf = fn: ''a list -> ''a -> int -> int
val has_eq = fn: term -> bool
val term2template = fn:
   (indexname * typ) list -> (string * typ) list -> term -> template_term
val lemma2predicate = fn: term -> term -> template
val makeTemplatewithContext = fn: term -> term -> template
val lemma2template = fn: term -> template
val thm2template = fn: thm -> template
val tterm2string = fn: template_term -> string
val template2string = fn: template -> string
val t = "height ?t <= size ?t": thm
val th =
   Const ("HOL.Trueprop", "bool => prop") $
     (Const ("Orderings.ord_class.less_eq", "nat => nat => bool") $
       (Const ("Tree.height_class.height", "?'a tree => nat") $
         Var (("t", 0), "?'a tree")) $
       (Const ("Nat.size_class.size", "?'a tree => nat") $
         Var (("t", 0), "?'a tree"))):
   term
### theory "Draft.Templates"
### 0.048s elapsed time, 0.133s cpu time, 0.000s GC time
Loading theory "Draft.ExtrEqs" (required by "Draft.Example_TLSTemplates")
Found termination order: "(%p. size (fst p)) <*mlex*> {}"
### theory "Draft.Miscellaneous"
### 0.287s elapsed time, 0.610s cpu time, 0.000s GC time
Loading theory "Draft.Messages" (required by "Draft.Example_TLSTemplates" via "Draft.Example_TLS" via "Draft.Typed_Model" via "Draft.Lazy_Intruder" via "Draft.Strands_and_Constraints")
Found termination order: "size <*mlex*> {}"
val eqpattern =
   Pattern
    (
       Const ("HOL.Trueprop", "bool => prop") $
         (Const ("HOL.eq", "?'a => ?'a => bool") $
           Var (("_dummy_", 1), "?'a") $ Var (("_dummy_", 2), "?'a"))
       ):
   term Find_Theorems.criterion
val badeqpattern = Pattern (Const ("Pure.eq", "?'a => ?'a => prop")):
   term Find_Theorems.criterion
val undefpattern =
   Pattern
    (
       Const ("HOL.Trueprop", "bool => prop") $
         (Const ("HOL.eq", "?'a => ?'a => bool") $
           Var (("_dummy_", 1), "?'a") $ Const ("HOL.undefined", "?'a"))
       ):
   term Find_Theorems.criterion
val thmpattern =
   Pattern
    (Const ("HOL.Trueprop", "bool => prop") $ Var (("_dummy_", 1), "bool")):
   term Find_Theorems.criterion
val badnames =
   ["*nitpick*", "*Nitpick*", "*full_exhaustive*", "*_def*", "Enum.finite*",
    "*Quickcheck*", "ATP*", "*Nunchaku*", "*Code*", "*BNF*", "*SMT*",
    "*.*.*"]:
   string list
val unwanted_names =
   [(false, Name "*nitpick*"), (false, Name "*Nitpick*"),
    (false, Name "*full_exhaustive*"), (false, Name "*_def*"),
    (false, Name "Enum.finite*"), (false, Name "*Quickcheck*"),
    (false, Name "ATP*"), (false, Name "*Nunchaku*"),
    (false, Name "*Code*"), (false, Name "*BNF*"), (false, Name "*SMT*"),
    (false, Name "*.*.*")]:
   (bool * term Find_Theorems.criterion) list
val has_vars = fn: term -> bool
val get_all_eqs = fn: string -> Proof.context -> (string * thm) list
val get_all_thms = fn: string -> Proof.context -> (string * thm) list
val get_noneq_thms = fn: string -> Proof.context -> (string * thm) list
val template_eqs = fn:
   string -> Proof.context -> (string * thm * template) list
val template_thms = fn:
   string -> Proof.context -> (string * thm * template) list
### theory "Draft.ExtrEqs"
### 0.594s elapsed time, 1.334s cpu time, 0.355s GC time
Found termination order: "{}"
Found termination order: "{}"
Found termination order: "size <*mlex*> {}"
Found termination order: "size <*mlex*> {}"
Found termination order: "(%p. size (snd p)) <*mlex*> {}"
### theory "Draft.Messages"
### 0.952s elapsed time, 1.476s cpu time, 0.396s GC time
Loading theory "Draft.More_Unification" (required by "Draft.Example_TLSTemplates" via "Draft.Example_TLS" via "Draft.Typed_Model" via "Draft.Lazy_Intruder" via "Draft.Strands_and_Constraints")
Proofs for inductive predicate(s) "fsubstp"
  Proving monotonicity ...
Proofs for inductive predicate(s) "wf\<^sub>s\<^sub>u\<^sub>b\<^sub>s\<^sub>t_setp"
  Proving monotonicity ...
### theory "Draft.More_Unification"
### 1.204s elapsed time, 1.382s cpu time, 0.248s GC time
Loading theory "Draft.Intruder_Deduction" (required by "Draft.Example_TLSTemplates" via "Draft.Example_TLS" via "Draft.Typed_Model" via "Draft.Lazy_Intruder" via "Draft.Strands_and_Constraints")
locale intruder_model
  fixes arity :: "'fun => nat"
    and public :: "'fun => bool"
    and
    Ana ::
      "('fun, 'var) Term.term
       => ('fun, 'var) Term.term list * ('fun, 'var) Term.term list"
  assumes "intruder_model arity Ana"
Proofs for inductive predicate(s) "intruder_deduct"
  Proving monotonicity ...
Proofs for inductive predicate(s) "intruder_synth"
  Proving monotonicity ...
Proofs for inductive predicate(s) "public_ground_wf_term"
  Proving monotonicity ...
Proofs for inductive predicate(s) "intruder_deduct_restricted"
  Proving monotonicity ...
Proofs for inductive predicate(s) "intruder_deduct_num"
  Proving monotonicity ...
Found termination order: "(%p. size (snd (snd (snd p)))) <*mlex*> {}"
### theory "Draft.Intruder_Deduction"
### 0.734s elapsed time, 0.818s cpu time, 0.114s GC time
Loading theory "Draft.Strands_and_Constraints" (required by "Draft.Example_TLSTemplates" via "Draft.Example_TLS" via "Draft.Typed_Model" via "Draft.Lazy_Intruder")
Found termination order: "{}"
Found termination order: "{}"
Found termination order: "{}"
Found termination order: "size_list size <*mlex*> {}"
Found termination order: "{}"
Found termination order: "{}"
Found termination order: "size_list size <*mlex*> {}"
Found termination order: "(%p. size_list size (snd p)) <*mlex*> {}"
locale intruder_model
  fixes arity :: "'fun => nat"
    and public :: "'fun => bool"
    and
    Ana ::
      "('fun, 'var) Term.term
       => ('fun, 'var) Term.term list * ('fun, 'var) Term.term list"
  assumes "intruder_model arity Ana"
Found termination order: "(%p. size_list size (snd p)) <*mlex*> {}"
Found termination order: "(%p. size_list size (snd p)) <*mlex*> {}"
Found termination order: "(%p. size_list size (snd p)) <*mlex*> {}"
Found termination order: "(%p. size_list size (snd p)) <*mlex*> {}"
Found termination order: "size_list size <*mlex*> {}"
### theory "Draft.Strands_and_Constraints"
### 3.754s elapsed time, 4.743s cpu time, 1.224s GC time
Loading theory "Draft.Lazy_Intruder" (required by "Draft.Example_TLSTemplates" via "Draft.Example_TLS" via "Draft.Typed_Model")
locale intruder_model
  fixes arity :: "'fun => nat"
    and public :: "'fun => bool"
    and
    Ana ::
      "('fun, 'var) Term.term
       => ('fun, 'var) Term.term list * ('fun, 'var) Term.term list"
  assumes "intruder_model arity Ana"
Proofs for inductive predicate(s) "LI_relp"
  Proving monotonicity ...
### theory "Draft.Lazy_Intruder"
### 0.388s elapsed time, 0.440s cpu time, 0.070s GC time
Loading theory "Draft.Typed_Model" (required by "Draft.Example_TLSTemplates" via "Draft.Example_TLS")
locale typed_model
  fixes arity :: "'fun => nat"
    and public :: "'fun => bool"
    and
    Ana ::
      "('fun, 'var) Term.term
       => ('fun, 'var) Term.term list * ('fun, 'var) Term.term list"
    and \<Gamma> :: "('fun, 'var) Term.term => ('fun, 'atom) Term.term"
  assumes "typed_model arity public Ana \<Gamma>"
Proofs for inductive predicate(s) "SMPp"
  Proving monotonicity ...
Found termination order: "{}"
Found termination order: "(%p. size (snd (snd (snd p)))) <*mlex*> {}"
Found termination order: "{}"
locale typed_model'
  fixes arity :: "'fun => nat"
    and public :: "'fun => bool"
    and
    Ana ::
      "('fun, ('fun, 'atom) Term.term * nat) Term.term
       => ('fun, ('fun, 'atom) Term.term * nat) Term.term list *
          ('fun, ('fun, 'atom) Term.term * nat) Term.term list"
    and
    \<Gamma> ::
      "('fun, ('fun, 'atom) Term.term * nat) Term.term
       => ('fun, 'atom) Term.term"
  assumes "typed_model' arity public Ana \<Gamma>"
### theory "Draft.Typed_Model"
### 2.719s elapsed time, 3.104s cpu time, 0.282s GC time
Loading theory "Draft.Example_TLS" (required by "Draft.Example_TLSTemplates")
consts
  arity :: "ex_fun => nat"
Found termination order: "{}"
Found termination order: "{}"
Found termination order: "{}"
Found termination order: "{}"
Found termination order: "size <*mlex*> {}"
### theory "Draft.Example_TLS"
### 3.927s elapsed time, 4.611s cpu time, 0.504s GC time
Loading theory "Draft.Example_TLSTemplates"
val templateLemmas =
   [("Example_TLS.assm11", "wf\<^sub>t\<^sub>r\<^sub>m (\<Gamma> (Var ?x))",
     template_predicate
      (
         template_app
          (template_hole 2,
           template_app
            (template_hole 1,
             template_app (template_hole 0, template_var 0)))
         )),
    ("Example_TLS.assm6", "0 < arity ?f ==> public ?f",
     template_implication
      ([template_inequation
         (less_than, template_hole 2,
          template_app (template_hole 1, template_var 0))],
       template_predicate
        (template_app (template_hole 0, template_var 0)))),
    ("Example_TLS.assm12",
     "\<Gamma> (Var (?\<tau>, ?n)) = \<Gamma> (Var (?\<tau>, ?m))",
     template_equation
      (template_app
        (template_hole 2,
         template_app
          (template_hole 1,
           template_app
            (template_app (template_hole 0, template_var 2),
             template_var 1))),
       template_app
        (template_hole 2,
         template_app
          (template_hole 1,
           template_app
            (template_app (template_hole 0, template_var 2),
             template_var 0))))),
    ("Example_TLS.assm10",
     "Fun ?f ?T \<sqsubseteq> \<Gamma> ?t ==> 0 < arity ?f",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_hole 6,
                template_app
                 (template_app (template_hole 5, template_var 2),
                  template_var 1)),
              template_app
               (template_hole 4,
                template_app (template_hole 3, template_var 0)))
            )],
       template_inequation
        (less_than, template_hole 1,
         template_app (template_hole 0, template_var 2)))),
    ("Example_TLS.assm9",
     "infinite {c. \<Gamma> (Fun c []) = Var ?a & public c}",
     template_negation
      (
         template_predicate
          (
             template_app
              (template_hole 8, template_app (template_hole 7, t_empty))
             )
         )),
    ("Example_TLS.Ana_const", "arity ?c = 0 ==> Ana (Fun ?c ?T) = ([], [])",
     template_implication
      ([template_equation
         (template_app (template_hole 6, template_var 1), template_hole 5)],
       template_equation
        (template_app
          (template_hole 3,
           template_app
            (template_app (template_hole 2, template_var 1),
             template_var 0)),
         template_app
          (template_app (template_hole 1, template_hole 0),
           template_hole 0)))),
    ("Example_TLS.assm1",
     "Ana ?t = (?K, ?M) ==> fv\<^sub>s\<^sub>e\<^sub>t (set ?K) <= fv ?t",
     template_implication
      ([template_equation
         (template_app (template_hole 5, template_var 2),
          template_app
           (template_app (template_hole 4, template_var 1),
            template_var 0))],
       template_inequation
        (less_equals,
         template_app
          (template_hole 2, template_app (template_hole 1, template_var 1)),
         template_app (template_hole 0, template_var 2)))),
    ("Example_TLS.assm2", "Ana (Fun ?f ?T) = (?K, ?M) ==> set ?M <= set ?T",
     template_implication
      ([template_equation
         (template_app
           (template_hole 4,
            template_app
             (template_app (template_hole 3, template_var 3),
              template_var 2)),
          template_app
           (template_app (template_hole 2, template_var 1),
            template_var 0))],
       template_inequation
        (less_equals, template_app (template_hole 0, template_var 0),
         template_app (template_hole 0, template_var 2)))),
    ("Example_TLS.assm8",
     "0 < arity ?f ==> \<Gamma> (Fun ?f ?X) = Fun ?f (map \<Gamma> ?X)",
     template_implication
      ([template_inequation
         (less_than, template_hole 6,
          template_app (template_hole 5, template_var 1))],
       template_equation
        (template_app
          (template_hole 3,
           template_app
            (template_app (template_hole 2, template_var 1),
             template_var 0)),
         template_app
          (template_app (template_hole 1, template_var 1),
           template_app
            (template_app (template_hole 0, template_hole 3),
             template_var 0))))),
    ("Example_TLS.assm7",
     "arity ?c = 0 ==> EX a. ALL X. \<Gamma> (Fun ?c X) = Var a",
     template_implication
      ([template_equation
         (template_app (template_hole 7, template_var 0), template_hole 6)],
       template_predicate (template_app (template_hole 5, t_empty)))),
    ("Example_TLS.Ana_keys_subterm",
     "[| Ana ?t = (?K, ?T); ?k : set ?K |] ==> ?k \<sqsubset> ?t",
     template_implication
      ([template_equation
         (template_app (template_hole 7, template_var 3),
          template_app
           (template_app (template_hole 6, template_var 2),
            template_var 1)),
        template_predicate
         (
            template_app
             (template_app (template_hole 5, template_var 0),
              template_app (template_hole 4, template_var 2))
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 3,
               template_app
                (template_app (template_hole 5, template_var 0),
                 template_app (template_hole 2, template_var 3))),
             template_app
              (template_hole 1,
               template_app
                (template_app (template_hole 0, template_var 0),
                 template_var 3)))
           ))),
    ("Example_TLS.assm1",
     "[| Ana ?t = (?K, ?M); ?K ~= [] | ?M ~= [] |]
      ==> Ana (?t \<cdot> ?\<delta>) =
          (?K \<cdot>\<^sub>l\<^sub>i\<^sub>s\<^sub>t ?\<delta>,
           ?M \<cdot>\<^sub>l\<^sub>i\<^sub>s\<^sub>t ?\<delta>)",
     template_implication
      ([template_equation
         (template_app (template_hole 7, template_var 3),
          template_app
           (template_app (template_hole 6, template_var 2),
            template_var 1)),
        template_predicate
         (
            template_app
             (template_app
               (template_hole 5,
                template_app
                 (template_hole 4,
                  template_app
                   (template_app (template_hole 3, template_var 2),
                    template_hole 2))),
              template_app
               (template_hole 4,
                template_app
                 (template_app (template_hole 3, template_var 1),
                  template_hole 2)))
            )],
       template_equation
        (template_app
          (template_hole 7,
           template_app
            (template_app (template_hole 1, template_var 3),
             template_var 0)),
         template_app
          (template_app
            (template_hole 6,
             template_app
              (template_app (template_hole 0, t_empty), template_var 2)),
           template_app
            (template_app (template_hole 0, t_empty), template_var 1))))),
    ("Example_TLS.assm1",
     "[| Ana ?t = (?K, ?M);
         !!g S'. Fun g S' \<sqsubseteq> ?t ==> length S' = arity g;
         ?k : set ?K; Fun ?f ?T' \<sqsubseteq> ?k |]
      ==> length ?T' = arity ?f",
     template_implication
      ([template_equation
         (template_app (template_hole 10, template_var 5),
          template_app
           (template_app (template_hole 9, template_var 4),
            template_var 3)),
        template_predicate (template_app (template_hole 8, t_empty)),
        template_predicate
         (
            template_app
             (template_app (template_hole 6, template_var 2),
              template_app (template_hole 0, template_var 4))
            ),
        template_predicate
         (
            template_app
             (template_app
               (template_hole 6,
                template_app
                 (template_app (template_hole 5, template_var 1),
                  template_var 0)),
              template_app (template_hole 4, template_var 2))
            )],
       template_equation
        (template_app (template_hole 2, template_var 0),
         template_app (template_hole 1, template_var 1))))]:
   (string * thm * template) list
### theory "Draft.Example_TLSTemplates"
### 0.550s elapsed time, 0.937s cpu time, 0.156s GC time
val it = (): unit
