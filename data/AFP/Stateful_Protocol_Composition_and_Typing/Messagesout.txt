Loading theory "Draft.Miscellaneous" (required by "Draft.MessagesTemplates" via "Draft.Messages")
Loading theory "Draft.Templates" (required by "Draft.MessagesTemplates" via "Draft.ExtrEqs")
datatype template_term
=
     t_empty
   | template_app of template_term * template_term
   | template_hole of int
   | template_var of int
datatype sign
= equals | greater_equals | greater_than | less_equals | less_than
datatype template
=
     template_bimplication of template * template
   | template_dunno
   | template_equation of template_term * template_term
   | template_implication of template list * template
   | template_inequation of sign * template_term * template_term
   | template_negation of template
   | template_predicate of template_term
constructor t_empty: template_term
constructor template_app: template_term * template_term -> template_term
constructor template_hole: int -> template_term
constructor template_var: int -> template_term
constructor equals: sign
constructor greater_equals: sign
constructor greater_than: sign
constructor less_equals: sign
constructor less_than: sign
constructor template_bimplication: template * template -> template
constructor template_dunno: template
constructor template_equation: template_term * template_term -> template
constructor template_implication: template list * template -> template
constructor template_inequation:
   sign * template_term * template_term -> template
constructor template_negation: template -> template
constructor template_predicate: template_term -> template
val vfs = fn: term -> (indexname * typ) list * (string * typ) list
val indexOf = fn: ''a list -> ''a -> int -> int
val has_eq = fn: term -> bool
val term2template = fn:
   (indexname * typ) list -> (string * typ) list -> term -> template_term
val lemma2predicate = fn: term -> term -> template
val makeTemplatewithContext = fn: term -> term -> template
val lemma2template = fn: term -> template
val thm2template = fn: thm -> template
val tterm2string = fn: template_term -> string
val template2string = fn: template -> string
val t = "height ?t <= size ?t": thm
val th =
   Const ("HOL.Trueprop", "bool => prop") $
     (Const ("Orderings.ord_class.less_eq", "nat => nat => bool") $
       (Const ("Tree.height_class.height", "?'a tree => nat") $
         Var (("t", 0), "?'a tree")) $
       (Const ("Nat.size_class.size", "?'a tree => nat") $
         Var (("t", 0), "?'a tree"))):
   term
### theory "Draft.Templates"
### 0.076s elapsed time, 0.186s cpu time, 0.018s GC time
Loading theory "Draft.ExtrEqs" (required by "Draft.MessagesTemplates")
Found termination order: "(%p. size (fst p)) <*mlex*> {}"
### theory "Draft.Miscellaneous"
### 0.359s elapsed time, 0.754s cpu time, 0.018s GC time
Loading theory "Draft.Messages" (required by "Draft.MessagesTemplates")
Found termination order: "size <*mlex*> {}"
val eqpattern =
   Pattern
    (
       Const ("HOL.Trueprop", "bool => prop") $
         (Const ("HOL.eq", "?'a => ?'a => bool") $
           Var (("_dummy_", 1), "?'a") $ Var (("_dummy_", 2), "?'a"))
       ):
   term Find_Theorems.criterion
val badeqpattern = Pattern (Const ("Pure.eq", "?'a => ?'a => prop")):
   term Find_Theorems.criterion
val undefpattern =
   Pattern
    (
       Const ("HOL.Trueprop", "bool => prop") $
         (Const ("HOL.eq", "?'a => ?'a => bool") $
           Var (("_dummy_", 1), "?'a") $ Const ("HOL.undefined", "?'a"))
       ):
   term Find_Theorems.criterion
val thmpattern =
   Pattern
    (Const ("HOL.Trueprop", "bool => prop") $ Var (("_dummy_", 1), "bool")):
   term Find_Theorems.criterion
val badnames =
   ["*nitpick*", "*Nitpick*", "*full_exhaustive*", "*_def*", "Enum.finite*",
    "*Quickcheck*", "ATP*", "*Nunchaku*", "*Code*", "*BNF*", "*SMT*",
    "*.*.*"]:
   string list
val unwanted_names =
   [(false, Name "*nitpick*"), (false, Name "*Nitpick*"),
    (false, Name "*full_exhaustive*"), (false, Name "*_def*"),
    (false, Name "Enum.finite*"), (false, Name "*Quickcheck*"),
    (false, Name "ATP*"), (false, Name "*Nunchaku*"),
    (false, Name "*Code*"), (false, Name "*BNF*"), (false, Name "*SMT*"),
    (false, Name "*.*.*")]:
   (bool * term Find_Theorems.criterion) list
val has_vars = fn: term -> bool
val get_all_eqs = fn: string -> Proof.context -> (string * thm) list
val get_all_thms = fn: string -> Proof.context -> (string * thm) list
val get_noneq_thms = fn: string -> Proof.context -> (string * thm) list
val template_eqs = fn:
   string -> Proof.context -> (string * thm * template) list
val template_thms = fn:
   string -> Proof.context -> (string * thm * template) list
### theory "Draft.ExtrEqs"
### 0.559s elapsed time, 1.152s cpu time, 0.079s GC time
Found termination order: "{}"
Found termination order: "{}"
Found termination order: "size <*mlex*> {}"
Found termination order: "size <*mlex*> {}"
Found termination order: "(%p. size (snd p)) <*mlex*> {}"
### theory "Draft.Messages"
### 0.823s elapsed time, 1.165s cpu time, 0.134s GC time
Loading theory "Draft.MessagesTemplates"
val templateLemmas =
   [("Messages.finite_fv\<^sub>p\<^sub>a\<^sub>i\<^sub>r\<^sub>s",
     "finite (fv\<^sub>p\<^sub>a\<^sub>i\<^sub>r\<^sub>s ?x)",
     template_predicate
      (
         template_app
          (template_hole 1, template_app (template_hole 0, template_var 0))
         )),
    ("Messages.finite_fun_symbols", "finite (funs_term ?t)",
     template_predicate
      (
         template_app
          (template_hole 1, template_app (template_hole 0, template_var 0))
         )),
    ("Messages.subterms_finite", "finite (subterms ?t)",
     template_predicate
      (
         template_app
          (template_hole 1, template_app (template_hole 0, template_var 0))
         )),
    ("Messages.fv_list\<^sub>p\<^sub>a\<^sub>i\<^sub>r\<^sub>s_is_fv\<^sub>p\<^sub>a\<^sub>i\<^sub>r\<^sub>s",
     "fv\<^sub>p\<^sub>a\<^sub>i\<^sub>r\<^sub>s ?F =
      set (fv_list\<^sub>p\<^sub>a\<^sub>i\<^sub>r\<^sub>s ?F)",
     template_equation
      (template_app (template_hole 2, template_var 0),
       template_app
        (template_hole 1, template_app (template_hole 0, template_var 0)))),
    ("Messages.fv_list_is_fv", "fv ?t = set (fv_list ?t)",
     template_equation
      (template_app (template_hole 2, template_var 0),
       template_app
        (template_hole 1, template_app (template_hole 0, template_var 0)))),
    ("Messages.fv_subterms",
     "fv\<^sub>s\<^sub>e\<^sub>t (subterms ?t) = fv ?t",
     template_equation
      (template_app
        (template_hole 2, template_app (template_hole 1, template_var 0)),
       template_app (template_hole 0, template_var 0))),
    ("Messages.subterms_list_is_subterms",
     "subterms ?t = set (subterms_list ?t)",
     template_equation
      (template_app (template_hole 2, template_var 0),
       template_app
        (template_hole 1, template_app (template_hole 0, template_var 0)))),
    ("Messages.subset_subterms_Union",
     "?M <= subterms\<^sub>s\<^sub>e\<^sub>t ?M",
     template_inequation
      (less_equals, template_var 0,
       template_app
        (template_hole 2,
         template_app
          (template_app (template_hole 1, template_hole 0),
           template_var 0)))),
    ("Messages.fv_simps", "fv (Var ?x1.0) = {?x1.0}",
     template_equation
      (template_app
        (template_hole 3, template_app (template_hole 2, template_var 0)),
       template_app
        (template_app (template_hole 1, template_var 0), template_hole 0))),
    ("Messages.fv\<^sub>p\<^sub>a\<^sub>i\<^sub>r\<^sub>s_cons_subset",
     "fv\<^sub>p\<^sub>a\<^sub>i\<^sub>r\<^sub>s ?F
      <= fv\<^sub>p\<^sub>a\<^sub>i\<^sub>r\<^sub>s (?f # ?F)",
     template_inequation
      (less_equals, template_app (template_hole 1, template_var 1),
       template_app
        (template_hole 1,
         template_app
          (template_app (template_hole 0, template_var 0),
           template_var 1)))),
    ("Messages.params_subterms", "set ?X <= subterms (Fun ?f ?X)",
     template_inequation
      (less_equals, template_app (template_hole 2, template_var 1),
       template_app
        (template_hole 1,
         template_app
          (template_app (template_hole 0, template_var 0),
           template_var 1)))),
    ("Messages.finite_fv_set",
     "finite ?M ==> finite (fv\<^sub>s\<^sub>e\<^sub>t ?M)",
     template_implication
      ([template_predicate
         (template_app (template_hole 2, template_var 0))],
       template_predicate
        (
           template_app
            (template_hole 1,
             template_app (template_hole 0, template_var 0))
           ))),
    ("Messages.fv_subterms_set",
     "fv\<^sub>s\<^sub>e\<^sub>t (subterms\<^sub>s\<^sub>e\<^sub>t ?M) =
      fv\<^sub>s\<^sub>e\<^sub>t ?M",
     template_equation
      (template_app
        (template_hole 3,
         template_app
          (template_hole 2,
           template_app
            (template_app (template_hole 1, template_hole 0),
             template_var 0))),
       template_app (template_hole 3, template_var 0))),
    ("Messages.subterm_of_iff_subtermeq",
     "(?t \<sqsubseteq> ?t') = subterm_of ?t ?t'",
     template_equation
      (template_app
        (template_app (template_hole 2, template_var 1),
         template_app (template_hole 1, template_var 0)),
       template_app
        (template_app (template_hole 0, template_var 1), template_var 0))),
    ("Messages.fv_map_fv_set",
     "\<Union> (set (map fv ?L)) = fv\<^sub>s\<^sub>e\<^sub>t (set ?L)",
     template_equation
      (template_app
        (template_hole 5,
         template_app
          (template_hole 4,
           template_app
            (template_app (template_hole 3, template_hole 2),
             template_var 0))),
       template_app
        (template_hole 1, template_app (template_hole 0, template_var 0)))),
    ("Messages.subtermeqI'", "?x = ?y ==> ?x \<sqsubseteq> ?y",
     template_implication
      ([template_equation (template_var 1, template_var 0)],
       template_predicate
        (
           template_app
            (template_app (template_hole 1, template_var 1),
             template_app (template_hole 0, template_var 0))
           ))),
    ("Messages.fv\<^sub>p\<^sub>a\<^sub>i\<^sub>r\<^sub>s_append",
     "fv\<^sub>p\<^sub>a\<^sub>i\<^sub>r\<^sub>s (?F @ ?G) =
      fv\<^sub>p\<^sub>a\<^sub>i\<^sub>r\<^sub>s ?F Un
      fv\<^sub>p\<^sub>a\<^sub>i\<^sub>r\<^sub>s ?G",
     template_equation
      (template_app
        (template_hole 2,
         template_app
          (template_app (template_hole 1, template_var 1), template_var 0)),
       template_app
        (template_app
          (template_hole 0, template_app (template_hole 2, template_var 1)),
         template_app (template_hole 2, template_var 0)))),
    ("Messages.fv\<^sub>s\<^sub>e\<^sub>t_union",
     "fv\<^sub>s\<^sub>e\<^sub>t (?M Un ?N) =
      fv\<^sub>s\<^sub>e\<^sub>t ?M Un fv\<^sub>s\<^sub>e\<^sub>t ?N",
     template_equation
      (template_app
        (template_hole 2,
         template_app
          (template_app (template_hole 1, template_var 1), template_var 0)),
       template_app
        (template_app
          (template_hole 0, template_app (template_hole 2, template_var 1)),
         template_app (template_hole 2, template_var 0)))),
    ("Messages.funs_term_subterms_eq",
     "\<Union> (funs_term ` subterms ?t) = funs_term ?t",
     template_equation
      (template_app
        (template_hole 3,
         template_app
          (template_app (template_hole 2, t_empty),
           template_app (template_hole 0, template_var 0))),
       template_app (template_hole 1, template_var 0))),
    ("Messages.subterms_const", "subterms (Fun ?f []) = {Fun ?f []}",
     template_equation
      (template_app
        (template_hole 4,
         template_app
          (template_app (template_hole 3, template_var 0),
           template_hole 2)),
       template_app
        (template_app
          (template_hole 1,
           template_app
            (template_app (template_hole 3, template_var 0),
             template_hole 2)),
         template_hole 0))),
    ("Messages.vars_iff_subtermeq",
     "(?x : fv ?t) = (Var ?x \<sqsubseteq> ?t)",
     template_equation
      (template_app
        (template_app (template_hole 4, template_var 1),
         template_app (template_hole 3, template_var 0)),
       template_app
        (template_app
          (template_hole 2, template_app (template_hole 1, template_var 1)),
         template_app (template_hole 0, template_var 0)))),
    ("Messages.fv_list\<^sub>p\<^sub>a\<^sub>i\<^sub>r\<^sub>s_append",
     "fv_list\<^sub>p\<^sub>a\<^sub>i\<^sub>r\<^sub>s (?F @ ?G) =
      fv_list\<^sub>p\<^sub>a\<^sub>i\<^sub>r\<^sub>s ?F @
      fv_list\<^sub>p\<^sub>a\<^sub>i\<^sub>r\<^sub>s ?G",
     template_equation
      (template_app
        (template_hole 2,
         template_app
          (template_app (template_hole 1, template_var 1), template_var 0)),
       template_app
        (template_app
          (template_hole 0, template_app (template_hole 2, template_var 1)),
         template_app (template_hole 2, template_var 0)))),
    ("Messages.params_subterms_Union",
     "subterms\<^sub>s\<^sub>e\<^sub>t (set ?X) <= subterms (Fun ?f ?X)",
     template_inequation
      (less_equals,
       template_app
        (template_hole 4,
         template_app
          (template_app (template_hole 3, template_hole 2),
           template_app (template_hole 1, template_var 1))),
       template_app
        (template_hole 2,
         template_app
          (template_app (template_hole 0, template_var 0),
           template_var 1)))),
    ("Messages.fv_set_mono",
     "?M <= ?N ==>
      fv\<^sub>s\<^sub>e\<^sub>t ?M <= fv\<^sub>s\<^sub>e\<^sub>t ?N",
     template_implication
      ([template_inequation (less_equals, template_var 1, template_var 0)],
       template_inequation
        (less_equals, template_app (template_hole 0, template_var 1),
         template_app (template_hole 0, template_var 0)))),
    ("Messages.fv_subset",
     "?t : ?M ==> fv ?t <= fv\<^sub>s\<^sub>e\<^sub>t ?M",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 3, template_var 1),
              template_var 0)
            )],
       template_inequation
        (less_equals, template_app (template_hole 1, template_var 1),
         template_app (template_hole 0, template_var 0)))),
    ("Messages.subterms_union_finite",
     "finite ?M ==> finite (subterms\<^sub>s\<^sub>e\<^sub>t ?M)",
     template_implication
      ([template_predicate
         (template_app (template_hole 3, template_var 0))],
       template_predicate
        (
           template_app
            (template_hole 3,
             template_app
              (template_hole 2,
               template_app
                (template_app (template_hole 1, t_empty), template_var 0)))
           ))),
    ("Messages.in_subterms_Union",
     "?t : ?M ==> ?t \<sqsubseteq>\<^sub>s\<^sub>e\<^sub>t ?M",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 3, template_var 1),
              template_var 0)
            )],
       template_predicate
        (
           template_app
            (template_app (template_hole 3, template_var 1),
             template_app
              (template_hole 2,
               template_app
                (template_app (template_hole 1, template_hole 0),
                 template_var 0)))
           ))),
    ("Messages.empty_fv_not_var", "fv ?t = {} ==> ?t ~= Var ?x",
     template_implication
      ([template_equation
         (template_app (template_hole 4, template_var 1), template_hole 3)],
       template_negation
        (
           template_equation
            (template_var 1, template_app (template_hole 0, template_var 0))
           ))),
    ("Messages.var_is_subterm", "?x : fv ?t ==> Var ?x \<sqsubseteq> ?t",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 4, template_var 1),
              template_app (template_hole 3, template_var 0))
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 2,
               template_app (template_hole 1, template_var 1)),
             template_app (template_hole 0, template_var 0))
           ))),
    ("Messages.subtermeq_vars_subset",
     "?M \<sqsubseteq> ?N ==> fv ?M <= fv ?N",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 3, template_var 1),
              template_app (template_hole 2, template_var 0))
            )],
       template_inequation
        (less_equals, template_app (template_hole 0, template_var 1),
         template_app (template_hole 0, template_var 0)))),
    ("Messages.subtermeq_imp_funs_term_subset",
     "?s \<sqsubseteq> ?t ==> funs_term ?s <= funs_term ?t",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 3, template_var 1),
              template_app (template_hole 2, template_var 0))
            )],
       template_inequation
        (less_equals, template_app (template_hole 0, template_var 1),
         template_app (template_hole 0, template_var 0)))),
    ("Messages.subterms_subset",
     "?t' \<sqsubseteq> ?t ==> subterms ?t' <= subterms ?t",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 2, template_var 1),
              template_app (template_hole 1, template_var 0))
            )],
       template_inequation
        (less_equals, template_app (template_hole 1, template_var 1),
         template_app (template_hole 1, template_var 0)))),
    ("Messages.Var_subtermeq", "?t \<sqsubseteq> Var ?v ==> ?t = Var ?v",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 3, template_var 1),
              template_app
               (template_hole 2,
                template_app (template_hole 1, template_var 0)))
            )],
       template_equation
        (template_var 1, template_app (template_hole 1, template_var 0)))),
    ("Messages.subterm_is_var", "Var ?x \<sqsubseteq> ?t ==> ?x : fv ?t",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_hole 4,
                template_app (template_hole 3, template_var 1)),
              template_app (template_hole 2, template_var 0))
            )],
       template_predicate
        (
           template_app
            (template_app (template_hole 1, template_var 1),
             template_app (template_hole 0, template_var 0))
           ))),
    ("Messages.no_var_subterm", "~ ?t \<sqsubset> Var ?v",
     template_negation
      (
         template_predicate
          (
             template_app
              (template_app
                (template_hole 4,
                 template_app
                  (template_app (template_hole 3, template_var 1),
                   template_app
                    (template_hole 2,
                     template_app (template_hole 1, template_var 0)))),
               template_app
                (template_hole 5,
                 template_app
                  (template_app (template_hole 0, template_var 1),
                   template_app (template_hole 1, template_var 0))))
             )
         )),
    ("Messages.Fun_gt_params",
     "Fun ?f ?X ~: subterms\<^sub>s\<^sub>e\<^sub>t (set ?X)",
     template_negation
      (
         template_predicate
          (
             template_app
              (template_app
                (template_hole 5,
                 template_app
                  (template_app (template_hole 4, template_var 1),
                   template_var 0)),
               template_app
                (template_hole 3,
                 template_app
                  (template_app (template_hole 2, t_empty),
                   template_app (template_hole 0, template_var 0))))
             )
         )),
    ("Messages.fv\<^sub>p\<^sub>a\<^sub>i\<^sub>r\<^sub>s_singleton",
     "fv\<^sub>p\<^sub>a\<^sub>i\<^sub>r\<^sub>s [(?t, ?s)] =
      fv ?t Un fv ?s",
     template_equation
      (template_app
        (template_hole 6,
         template_app
          (template_app
            (template_hole 5,
             template_app
              (template_app (template_hole 4, template_var 1),
               template_var 0)),
           template_hole 3)),
       template_app
        (template_app
          (template_hole 2, template_app (template_hole 1, template_var 1)),
         template_app (template_hole 0, template_var 0)))),
    ("Messages.fv_simps",
     "fv (Fun ?x21.0 ?x22.0) = \<Union> (fv ` set ?x22.0)",
     template_equation
      (template_app
        (template_hole 4,
         template_app
          (template_app (template_hole 3, template_var 1), template_var 0)),
       template_app
        (template_hole 2,
         template_app
          (template_app (template_hole 1, t_empty),
           template_app (template_hole 0, template_var 0))))),
    ("Messages.vars_iff_subtermeq_set",
     "(?x : fv\<^sub>s\<^sub>e\<^sub>t ?M) =
      (Var ?x \<sqsubseteq>\<^sub>s\<^sub>e\<^sub>t ?M)",
     template_equation
      (template_app
        (template_app (template_hole 6, template_var 1),
         template_app (template_hole 5, template_var 0)),
       template_app
        (template_app
          (template_hole 4, template_app (template_hole 3, template_var 1)),
         template_app
          (template_hole 2,
           template_app
            (template_app (template_hole 1, template_hole 0),
             template_var 0))))),
    ("Messages.subtermeqI''", "?t : set ?T ==> ?t \<sqsubseteq> Fun ?f ?T",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 3, template_var 2),
              template_app (template_hole 2, template_var 1))
            )],
       template_predicate
        (
           template_app
            (template_app (template_hole 3, template_var 2),
             template_app
              (template_hole 1,
               template_app
                (template_app (template_hole 0, template_var 0),
                 template_var 1)))
           ))),
    ("Messages.Fun_param_in_subterms",
     "?x : set ?X ==> ?x \<sqsubseteq> Fun ?f ?X",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 3, template_var 2),
              template_app (template_hole 2, template_var 1))
            )],
       template_predicate
        (
           template_app
            (template_app (template_hole 3, template_var 2),
             template_app
              (template_hole 1,
               template_app
                (template_app (template_hole 0, template_var 0),
                 template_var 1)))
           ))),
    ("Messages.fv\<^sub>p\<^sub>a\<^sub>i\<^sub>r\<^sub>s_mono",
     "set ?M <= set ?N ==>
      fv\<^sub>p\<^sub>a\<^sub>i\<^sub>r\<^sub>s ?M
      <= fv\<^sub>p\<^sub>a\<^sub>i\<^sub>r\<^sub>s ?N",
     template_implication
      ([template_inequation
         (less_equals, template_app (template_hole 2, template_var 1),
          template_app (template_hole 2, template_var 0))],
       template_inequation
        (less_equals, template_app (template_hole 0, template_var 1),
         template_app (template_hole 0, template_var 0)))),
    ("Messages.funs_term_Fun_subterm'",
     "Fun ?f ?T \<sqsubseteq> ?t ==> ?f : funs_term ?t",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_hole 4,
                template_app
                 (template_app (template_hole 3, template_var 2),
                  template_var 1)),
              template_app (template_hole 2, template_var 0))
            )],
       template_predicate
        (
           template_app
            (template_app (template_hole 1, template_var 2),
             template_app (template_hole 0, template_var 0))
           ))),
    ("Messages.subterm_of_ex_set_iff_subtermeqset",
     "(?t \<sqsubseteq>\<^sub>s\<^sub>e\<^sub>t ?M) =
      (EX t':?M. subterm_of ?t t')",
     template_equation
      (template_app
        (template_app (template_hole 5, template_var 1),
         template_app
          (template_hole 4,
           template_app
            (template_app (template_hole 3, template_hole 2),
             template_var 0))),
       template_app
        (template_app (template_hole 1, template_var 0), t_empty))),
    ("Messages.subterms_union_ground",
     "ground ?M ==> ground (subterms\<^sub>s\<^sub>e\<^sub>t ?M)",
     template_implication
      ([template_equation
         (template_app (template_hole 4, template_var 0), template_hole 3)],
       template_equation
        (template_app
          (template_hole 4,
           template_app
            (template_hole 2,
             template_app
              (template_app (template_hole 1, template_hole 0),
               template_var 0))),
         template_hole 3))),
    ("Messages.subterms_subset_set",
     "?M <= subterms ?t ==>
      subterms\<^sub>s\<^sub>e\<^sub>t ?M <= subterms ?t",
     template_implication
      ([template_inequation
         (less_equals, template_var 1,
          template_app (template_hole 2, template_var 0))],
       template_inequation
        (less_equals,
         template_app
          (template_hole 1,
           template_app
            (template_app (template_hole 0, template_hole 2),
             template_var 1)),
         template_app (template_hole 2, template_var 0)))),
    ("Messages.subtermeq_set_if_vars",
     "?x : fv\<^sub>s\<^sub>e\<^sub>t ?M ==>
      Var ?x \<sqsubseteq>\<^sub>s\<^sub>e\<^sub>t ?M",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 6, template_var 1),
              template_app (template_hole 5, template_var 0))
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 4,
               template_app (template_hole 3, template_var 1)),
             template_app
              (template_hole 2,
               template_app
                (template_app (template_hole 1, template_hole 0),
                 template_var 0)))
           ))),
    ("Messages.fv_subset_subterms",
     "?t \<sqsubseteq>\<^sub>s\<^sub>e\<^sub>t ?M ==>
      fv ?t <= fv\<^sub>s\<^sub>e\<^sub>t ?M",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 6, template_var 1),
              template_app
               (template_hole 5,
                template_app
                 (template_app (template_hole 4, template_hole 3),
                  template_var 0)))
            )],
       template_inequation
        (less_equals, template_app (template_hole 1, template_var 1),
         template_app (template_hole 0, template_var 0)))),
    ("Messages.vars_if_subtermeq_set",
     "Var ?x \<sqsubseteq>\<^sub>s\<^sub>e\<^sub>t ?M ==>
      ?x : fv\<^sub>s\<^sub>e\<^sub>t ?M",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_hole 6,
                template_app (template_hole 5, template_var 1)),
              template_app
               (template_hole 4,
                template_app
                 (template_app (template_hole 3, template_hole 2),
                  template_var 0)))
            )],
       template_predicate
        (
           template_app
            (template_app (template_hole 1, template_var 1),
             template_app (template_hole 0, template_var 0))
           ))),
    ("Messages.funs_term_subterms_eq",
     "\<Union> (funs_term ` subterms\<^sub>s\<^sub>e\<^sub>t ?M) =
      \<Union> (funs_term ` ?M)",
     template_equation
      (template_app
        (template_hole 5,
         template_app
          (template_app (template_hole 4, t_empty),
           template_app
            (template_hole 2,
             template_app
              (template_app (template_hole 1, template_hole 0),
               template_var 0)))),
       template_app
        (template_hole 5,
         template_app
          (template_app (template_hole 4, template_hole 3),
           template_var 0)))),
    ("Messages.subterms\<^sub>s\<^sub>e\<^sub>t_mono",
     "?M <= ?N ==>
      subterms\<^sub>s\<^sub>e\<^sub>t ?M
      <= subterms\<^sub>s\<^sub>e\<^sub>t ?N",
     template_implication
      ([template_inequation (less_equals, template_var 1, template_var 0)],
       template_inequation
        (less_equals,
         template_app
          (template_hole 2,
           template_app
            (template_app (template_hole 1, template_hole 0),
             template_var 1)),
         template_app
          (template_hole 2,
           template_app
            (template_app (template_hole 1, template_hole 0),
             template_var 0))))),
    ("Messages.const_subterm_obtain'",
     "fv ?t = {} ==> EX c. Fun c [] \<sqsubseteq> ?t",
     template_implication
      ([template_equation
         (template_app (template_hole 6, template_var 0), template_hole 5)],
       template_predicate (template_app (template_hole 4, t_empty)))),
    ("Messages.funs_term_Fun_subterm",
     "?f : funs_term ?t ==> EX T. Fun ?f T \<sqsubseteq> ?t",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 5, template_var 1),
              template_app (template_hole 4, template_var 0))
            )],
       template_predicate (template_app (template_hole 3, t_empty)))),
    ("Messages.fv\<^sub>p\<^sub>a\<^sub>i\<^sub>r\<^sub>s_Cons",
     "fv\<^sub>p\<^sub>a\<^sub>i\<^sub>r\<^sub>s ((?s, ?t) # ?F) =
      fv ?s Un fv ?t Un fv\<^sub>p\<^sub>a\<^sub>i\<^sub>r\<^sub>s ?F",
     template_equation
      (template_app
        (template_hole 5,
         template_app
          (template_app
            (template_hole 4,
             template_app
              (template_app (template_hole 3, template_var 2),
               template_var 1)),
           template_var 0)),
       template_app
        (template_app
          (template_hole 2,
           template_app
            (template_app
              (template_hole 2,
               template_app (template_hole 1, template_var 2)),
             template_app (template_hole 0, template_var 1))),
         template_app (template_hole 5, template_var 0)))),
    ("Messages.inv_set_fv",
     "finite ?M ==>
      \<Union> (set (map fv (inv set ?M))) = fv\<^sub>s\<^sub>e\<^sub>t ?M",
     template_implication
      ([template_predicate
         (template_app (template_hole 9, template_var 0))],
       template_equation
        (template_app
          (template_hole 7,
           template_app
            (template_hole 6,
             template_app
              (template_app (template_hole 5, template_hole 4),
               template_app
                (template_app
                  (template_app (template_hole 3, template_hole 2),
                   template_hole 1),
                 template_var 0)))),
         template_app (template_hole 0, template_var 0)))),
    ("Messages.empty_fv_exists_fun", "fv ?t = {} ==> EX f X. ?t = Fun f X",
     template_implication
      ([template_equation
         (template_app (template_hole 5, template_var 0), template_hole 4)],
       template_predicate (template_app (template_hole 3, t_empty)))),
    ("Messages.index_Fun_fv_subset",
     "?i < length ?T ==> fv (?T ! ?i) <= fv (Fun ?f ?T)",
     template_implication
      ([template_inequation
         (less_than, template_var 2,
          template_app (template_hole 4, template_var 1))],
       template_inequation
        (less_equals,
         template_app
          (template_hole 2,
           template_app
            (template_app (template_hole 1, template_var 1),
             template_var 2)),
         template_app
          (template_hole 2,
           template_app
            (template_app (template_hole 0, template_var 0),
             template_var 1))))),
    ("Messages.index_Fun_subterms_subset",
     "?i < length ?T ==> subterms (?T ! ?i) <= subterms (Fun ?f ?T)",
     template_implication
      ([template_inequation
         (less_than, template_var 2,
          template_app (template_hole 4, template_var 1))],
       template_inequation
        (less_equals,
         template_app
          (template_hole 2,
           template_app
            (template_app (template_hole 1, template_var 1),
             template_var 2)),
         template_app
          (template_hole 2,
           template_app
            (template_app (template_hole 0, template_var 0),
             template_var 1))))),
    ("Messages.in_subterms_subset_Union",
     "?t \<sqsubseteq>\<^sub>s\<^sub>e\<^sub>t ?M ==>
      subterms ?t <= subterms\<^sub>s\<^sub>e\<^sub>t ?M",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 4, template_var 1),
              template_app
               (template_hole 3,
                template_app
                 (template_app (template_hole 2, template_hole 1),
                  template_var 0)))
            )],
       template_inequation
        (less_equals, template_app (template_hole 1, template_var 1),
         template_app
          (template_hole 3,
           template_app
            (template_app (template_hole 2, template_hole 1),
             template_var 0))))),
    ("Messages.ground_subset", "[| ?M <= ?N; ground ?N |] ==> ground ?M",
     template_implication
      ([template_inequation (less_equals, template_var 1, template_var 0),
        template_equation
         (template_app (template_hole 1, template_var 0), template_hole 0)],
       template_equation
        (template_app (template_hole 1, template_var 1), template_hole 0))),
    ("Messages.subterm_size_lt", "?x \<sqsubset> ?y ==> size ?x < size ?y",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_hole 6,
                template_app
                 (template_app (template_hole 5, template_var 1),
                  template_app (template_hole 4, template_var 0))),
              template_app
               (template_hole 3,
                template_app
                 (template_app (template_hole 2, template_var 1),
                  template_var 0)))
            )],
       template_inequation
        (less_than, template_app (template_hole 0, template_var 1),
         template_app (template_hole 0, template_var 0)))),
    ("Messages.ground_subterm",
     "[| fv ?t = {}; ?t' \<sqsubseteq> ?t |] ==> fv ?t' = {}",
     template_implication
      ([template_equation
         (template_app (template_hole 3, template_var 1), template_hole 2),
        template_predicate
         (
            template_app
             (template_app (template_hole 1, template_var 0),
              template_app (template_hole 0, template_var 1))
            )],
       template_equation
        (template_app (template_hole 3, template_var 0), template_hole 2))),
    ("Messages.subtermeq_Var_const",
     "[| ?s \<sqsubseteq> ?t; ?t = Var ?v |] ==> ?s = Var ?v",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 3, template_var 2),
              template_app (template_hole 2, template_var 1))
            ),
        template_equation
         (template_var 1, template_app (template_hole 0, template_var 0))],
       template_equation
        (template_var 2, template_app (template_hole 0, template_var 0)))),
    ("Messages.ground_iff_no_vars",
     "ground ?M = (ALL v. Var v ~: subterms\<^sub>s\<^sub>e\<^sub>t ?M)",
     template_equation
      (template_app
        (template_app
          (template_hole 9, template_app (template_hole 8, template_var 0)),
         template_hole 7),
       template_app (template_hole 6, t_empty))),
    ("Messages.in_subterms_eq",
     "[| ?x \<sqsubseteq> ?y; ?y \<sqsubseteq> ?x |]
      ==> subterms ?x = subterms ?y",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 2, template_var 1),
              template_app (template_hole 1, template_var 0))
            ),
        template_predicate
         (
            template_app
             (template_app (template_hole 2, template_var 0),
              template_app (template_hole 1, template_var 1))
            )],
       template_equation
        (template_app (template_hole 1, template_var 1),
         template_app (template_hole 1, template_var 0)))),
    ("Messages.fv\<^sub>p\<^sub>a\<^sub>i\<^sub>r\<^sub>s_inI",
     "[| ?f : set ?F; ?x : fv (fst ?f) |]
      ==> ?x : fv\<^sub>p\<^sub>a\<^sub>i\<^sub>r\<^sub>s ?F",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 5, template_var 2),
              template_app (template_hole 4, template_var 1))
            ),
        template_predicate
         (
            template_app
             (template_app (template_hole 3, template_var 0),
              template_app
               (template_hole 2,
                template_app (template_hole 1, template_var 2)))
            )],
       template_predicate
        (
           template_app
            (template_app (template_hole 3, template_var 0),
             template_app (template_hole 0, template_var 1))
           ))),
    ("Messages.fv\<^sub>p\<^sub>a\<^sub>i\<^sub>r\<^sub>s_inI",
     "[| ?f : set ?F; ?x : fv (snd ?f) |]
      ==> ?x : fv\<^sub>p\<^sub>a\<^sub>i\<^sub>r\<^sub>s ?F",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 5, template_var 2),
              template_app (template_hole 4, template_var 1))
            ),
        template_predicate
         (
            template_app
             (template_app (template_hole 3, template_var 0),
              template_app
               (template_hole 2,
                template_app (template_hole 1, template_var 2)))
            )],
       template_predicate
        (
           template_app
            (template_app (template_hole 3, template_var 0),
             template_app (template_hole 0, template_var 1))
           ))),
    ("Messages.subtermeq_Var_const",
     "[| ?s \<sqsubseteq> ?t; ?t = Fun ?f [] |] ==> ?s = Fun ?f []",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 4, template_var 2),
              template_app (template_hole 3, template_var 1))
            ),
        template_equation
         (template_var 1,
          template_app
           (template_app (template_hole 1, template_var 0),
            template_hole 0))],
       template_equation
        (template_var 2,
         template_app
          (template_app (template_hole 1, template_var 0),
           template_hole 0)))),
    ("Messages.fv\<^sub>p\<^sub>a\<^sub>i\<^sub>r\<^sub>s_inI",
     "[| (?t, ?s) : set ?F; ?x : fv ?t |]
      ==> ?x : fv\<^sub>p\<^sub>a\<^sub>i\<^sub>r\<^sub>s ?F",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_hole 5,
                template_app
                 (template_app (template_hole 4, template_var 3),
                  template_var 2)),
              template_app (template_hole 3, template_var 1))
            ),
        template_predicate
         (
            template_app
             (template_app (template_hole 2, template_var 0),
              template_app (template_hole 1, template_var 3))
            )],
       template_predicate
        (
           template_app
            (template_app (template_hole 2, template_var 0),
             template_app (template_hole 0, template_var 1))
           ))),
    ("Messages.fv\<^sub>p\<^sub>a\<^sub>i\<^sub>r\<^sub>s_inI",
     "[| (?t, ?s) : set ?F; ?x : fv ?s |]
      ==> ?x : fv\<^sub>p\<^sub>a\<^sub>i\<^sub>r\<^sub>s ?F",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_hole 5,
                template_app
                 (template_app (template_hole 4, template_var 3),
                  template_var 2)),
              template_app (template_hole 3, template_var 1))
            ),
        template_predicate
         (
            template_app
             (template_app (template_hole 2, template_var 0),
              template_app (template_hole 1, template_var 2))
            )],
       template_predicate
        (
           template_app
            (template_app (template_hole 2, template_var 0),
             template_app (template_hole 0, template_var 1))
           ))),
    ("Messages.subtermI'", "?x : set ?X ==> ?x \<sqsubset> Fun ?f ?X",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 6, template_var 2),
              template_app (template_hole 5, template_var 1))
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 4,
               template_app
                (template_app (template_hole 6, template_var 2),
                 template_app
                  (template_hole 3,
                   template_app
                    (template_app (template_hole 2, template_var 0),
                     template_var 1)))),
             template_app
              (template_hole 1,
               template_app
                (template_app (template_hole 0, template_var 2),
                 template_app
                  (template_app (template_hole 2, template_var 0),
                   template_var 1))))
           ))),
    ("Messages.Fun_not_in_param",
     "?x : set ?X ==> ~ Fun ?f ?X \<sqsubset> ?x",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 6, template_var 2),
              template_app (template_hole 5, template_var 1))
            )],
       template_negation
        (
           template_predicate
            (
               template_app
                (template_app
                  (template_hole 3,
                   template_app
                    (template_app
                      (template_hole 6,
                       template_app
                        (template_app (template_hole 2, template_var 0),
                         template_var 1)),
                     template_app (template_hole 1, template_var 2))),
                 template_app
                  (template_hole 4,
                   template_app
                    (template_app
                      (template_hole 0,
                       template_app
                        (template_app (template_hole 2, template_var 0),
                         template_var 1)),
                     template_var 2)))
               )
           ))),
    ("Messages.fun_if_subterm",
     "?t \<sqsubset> ?u ==> EX f X. ?u = Fun f X",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_hole 7,
                template_app
                 (template_app (template_hole 6, template_var 1),
                  template_app (template_hole 5, template_var 0))),
              template_app
               (template_hole 4,
                template_app
                 (template_app (template_hole 3, template_var 1),
                  template_var 0)))
            )],
       template_predicate (template_app (template_hole 2, t_empty)))),
    ("Messages.const_subterm_obtain",
     "[| fv ?t = {}; !!c. Fun c [] \<sqsubseteq> ?t ==> ?thesis |]
      ==> ?thesis",
     template_implication
      ([template_equation
         (template_app (template_hole 6, template_var 1), template_hole 5),
        template_predicate (template_app (template_hole 4, t_empty))],
       template_predicate (template_var 0))),
    ("Messages.vars_iff_subterm_or_eq",
     "(?x : fv ?t) = (Var ?x \<sqsubset> ?t | Var ?x = ?t)",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 8, template_var 1),
              template_app (template_hole 7, template_var 0))
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 6,
               template_app
                (template_app
                  (template_hole 5,
                   template_app
                    (template_app
                      (template_hole 4,
                       template_app (template_hole 3, template_var 1)),
                     template_app (template_hole 2, template_var 0))),
                 template_app
                  (template_hole 1,
                   template_app
                    (template_app
                      (template_hole 0,
                       template_app (template_hole 3, template_var 1)),
                     template_var 0)))),
             template_app
              (template_app
                (template_hole 0,
                 template_app (template_hole 3, template_var 1)),
               template_var 0))
           ))),
    ("Messages.subtermeq_subterm_neq",
     "[| ?t \<sqsubseteq> ?u; ?u \<sqsubset> ?v |] ==> ?t ~= ?v",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 4, template_var 2),
              template_app (template_hole 3, template_var 1))
            ),
        template_predicate
         (
            template_app
             (template_app
               (template_hole 2,
                template_app
                 (template_app (template_hole 4, template_var 1),
                  template_app (template_hole 3, template_var 0))),
              template_app
               (template_hole 1,
                template_app
                 (template_app (template_hole 0, template_var 1),
                  template_var 0)))
            )],
       template_negation
        (template_equation (template_var 2, template_var 0)))),
    ("Messages.subterm_subtermeq_neq",
     "[| ?t \<sqsubset> ?u; ?u \<sqsubseteq> ?v |] ==> ?t ~= ?v",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_hole 4,
                template_app
                 (template_app (template_hole 3, template_var 2),
                  template_app (template_hole 2, template_var 1))),
              template_app
               (template_hole 1,
                template_app
                 (template_app (template_hole 0, template_var 2),
                  template_var 1)))
            ),
        template_predicate
         (
            template_app
             (template_app (template_hole 3, template_var 1),
              template_app (template_hole 2, template_var 0))
            )],
       template_negation
        (template_equation (template_var 2, template_var 0)))),
    ("Messages.subterms_singleton'",
     "subterms ?t = {?t} ==> (EX v. ?t = Var v) | (EX f. ?t = Fun f [])",
     template_implication
      ([template_equation
         (template_app (template_hole 9, template_var 0),
          template_app
           (template_app (template_hole 8, template_var 0),
            template_hole 7))],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 6, template_app (template_hole 5, t_empty)),
             template_app (template_hole 2, t_empty))
           ))),
    ("Messages.subterms_singleton",
     "(EX v. ?t = Var v) | (EX f. ?t = Fun f []) ==> subterms ?t = {?t}",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_hole 10, template_app (template_hole 9, t_empty)),
              template_app (template_hole 6, t_empty))
            )],
       template_equation
        (template_app (template_hole 2, template_var 0),
         template_app
          (template_app (template_hole 1, template_var 0),
           template_hole 0)))),
    ("Messages.Fun_subterm_inside_params",
     "(?t \<sqsubset> Fun ?f ?X) =
      (?t \<sqsubseteq>\<^sub>s\<^sub>e\<^sub>t set ?X)",
     template_equation
      (template_app
        (template_app
          (template_hole 8,
           template_app
            (template_app (template_hole 7, template_var 2),
             template_app
              (template_hole 6,
               template_app
                (template_app (template_hole 5, template_var 1),
                 template_var 0)))),
         template_app
          (template_hole 4,
           template_app
            (template_app (template_hole 3, template_var 2),
             template_app
              (template_app (template_hole 5, template_var 1),
               template_var 0)))),
       template_app
        (template_app (template_hole 7, template_var 2),
         template_app
          (template_hole 2,
           template_app
            (template_app (template_hole 1, t_empty),
             template_app (template_hole 0, template_var 0)))))),
    ("Messages.zip_arg_subterm",
     "(?s, ?t) : set (zip ?X ?Y) ==> ?s \<sqsubset> Fun ?f ?X",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_hole 9,
                template_app
                 (template_app (template_hole 8, template_var 4),
                  template_var 3)),
              template_app
               (template_hole 7,
                template_app
                 (template_app (template_hole 6, template_var 2),
                  template_var 1)))
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 5,
               template_app
                (template_app (template_hole 4, template_var 4),
                 template_app
                  (template_hole 3,
                   template_app
                    (template_app (template_hole 2, template_var 0),
                     template_var 2)))),
             template_app
              (template_hole 1,
               template_app
                (template_app (template_hole 0, template_var 4),
                 template_app
                  (template_app (template_hole 2, template_var 0),
                   template_var 2))))
           ))),
    ("Messages.zip_arg_subterm",
     "(?s, ?t) : set (zip ?X ?Y) ==> ?t \<sqsubset> Fun ?g ?Y",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_hole 9,
                template_app
                 (template_app (template_hole 8, template_var 4),
                  template_var 3)),
              template_app
               (template_hole 7,
                template_app
                 (template_app (template_hole 6, template_var 2),
                  template_var 1)))
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 5,
               template_app
                (template_app (template_hole 4, template_var 3),
                 template_app
                  (template_hole 3,
                   template_app
                    (template_app (template_hole 2, template_var 0),
                     template_var 1)))),
             template_app
              (template_hole 1,
               template_app
                (template_app (template_hole 0, template_var 3),
                 template_app
                  (template_app (template_hole 2, template_var 0),
                   template_var 1))))
           ))),
    ("Messages.fv\<^sub>p\<^sub>a\<^sub>i\<^sub>r\<^sub>s_inI",
     "[| ?f : set ?F; ?x : fv\<^sub>p\<^sub>a\<^sub>i\<^sub>r ?f |]
      ==> ?x : fv\<^sub>p\<^sub>a\<^sub>i\<^sub>r\<^sub>s ?F",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 7, template_var 2),
              template_app (template_hole 6, template_var 1))
            ),
        template_predicate
         (
            template_app
             (template_app (template_hole 5, template_var 0),
              template_app
               (template_app (template_hole 4, t_empty), template_var 2))
            )],
       template_predicate
        (
           template_app
            (template_app (template_hole 5, template_var 0),
             template_app (template_hole 0, template_var 1))
           ))),
    ("Messages.Fun_ex_if_subterm",
     "?t \<sqsubset> ?s ==> EX f T. Fun f T \<sqsubseteq> ?s & ?t : set T",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_hole 8,
                template_app
                 (template_app (template_hole 7, template_var 1),
                  template_app (template_hole 6, template_var 0))),
              template_app
               (template_hole 5,
                template_app
                 (template_app (template_hole 4, template_var 1),
                  template_var 0)))
            )],
       template_predicate (template_app (template_hole 3, t_empty)))),
    ("Messages.fv_disj_Fun_subterm_param_cases",
     "[| fv ?t Int ?X = {}; Fun ?f ?T \<sqsubseteq> ?t |]
      ==> ?T = [] | (EX s:set ?T. s ~: Var ` ?X)",
     template_implication
      ([template_equation
         (template_app
           (template_app
             (template_hole 13,
              template_app (template_hole 12, template_var 3)),
            template_var 2),
          template_hole 11),
        template_predicate
         (
            template_app
             (template_app
               (template_hole 10,
                template_app
                 (template_app (template_hole 9, template_var 1),
                  template_var 0)),
              template_app (template_hole 8, template_var 3))
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 7,
               template_app
                (template_app (template_hole 6, template_var 0),
                 template_hole 5)),
             template_app
              (template_app
                (template_hole 4,
                 template_app (template_hole 3, template_var 0)),
               t_empty))
           ))),
    ("Messages.finite_subset_Union",
     "finite (\<Union> (?f ` ?A)) ==>
      EX B. finite B & B <= ?A & \<Union> (?f ` B) = \<Union> (?f ` ?A)",
     template_implication
      ([template_predicate
         (
            template_app
             (template_hole 7,
              template_app
               (template_hole 6,
                template_app
                 (template_app (template_hole 5, t_empty), template_var 0)))
            )],
       template_predicate (template_app (template_hole 4, t_empty)))),
    ("Messages.subterm_param_split",
     "?t \<sqsubset> Fun ?f ?X ==>
      EX pre x suf. ?t \<sqsubseteq> x & ?X = pre @ x # suf",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_hole 10,
                template_app
                 (template_app (template_hole 9, template_var 2),
                  template_app
                   (template_hole 8,
                    template_app
                     (template_app (template_hole 7, template_var 1),
                      template_var 0)))),
              template_app
               (template_hole 6,
                template_app
                 (template_app (template_hole 5, template_var 2),
                  template_app
                   (template_app (template_hole 7, template_var 1),
                    template_var 0))))
            )],
       template_predicate (template_app (template_hole 4, t_empty)))),
    ("Messages.fv_eq_FunI",
     "[| length ?T = length ?S;
         !!i. i < length ?T ==> fv (?T ! i) = fv (?S ! i) |]
      ==> fv (Fun ?f ?T) = fv (Fun ?g ?S)",
     template_implication
      ([template_equation
         (template_app (template_hole 10, template_var 3),
          template_app (template_hole 9, template_var 2)),
        template_predicate (template_app (template_hole 8, t_empty))],
       template_equation
        (template_app
          (template_hole 5,
           template_app
            (template_app (template_hole 1, template_var 1),
             template_var 3)),
         template_app
          (template_hole 3,
           template_app
            (template_app (template_hole 0, template_var 0),
             template_var 2))))),
    ("Messages.nonvar_term_has_composed_shallow_term",
     "\<nexists>x. ?t = Var x ==>
      EX f T.
         Fun f T \<sqsubseteq> ?t &
         (ALL s:set T. (EX c. s = Fun c []) | (EX x. s = Var x))",
     template_implication
      ([template_negation
         (template_predicate (template_app (template_hole 12, t_empty)))],
       template_predicate (template_app (template_hole 9, t_empty)))),
    ("Messages.distinct_fv_list_idx_fv_disjoint",
     "[| distinct (fv_list ?t); Fun ?f ?T \<sqsubseteq> ?t; ?i < length ?T;
         ?j < length ?T; ?i < ?j |]
      ==> fv (?T ! ?i) Int fv (?T ! ?j) = {}",
     template_implication
      ([template_predicate
         (
            template_app
             (template_hole 11,
              template_app (template_hole 10, template_var 4))
            ),
        template_predicate
         (
            template_app
             (template_app
               (template_hole 9,
                template_app
                 (template_app (template_hole 8, template_var 3),
                  template_var 2)),
              template_app (template_hole 7, template_var 4))
            ),
        template_inequation
         (less_than, template_var 1,
          template_app (template_hole 5, template_var 2)),
        template_inequation
         (less_than, template_var 0,
          template_app (template_hole 5, template_var 2)),
        template_inequation (less_than, template_var 1, template_var 0)],
       template_equation
        (template_app
          (template_app
            (template_hole 3,
             template_app
              (template_hole 2,
               template_app
                (template_app (template_hole 1, template_var 2),
                 template_var 1))),
           template_app
            (template_hole 2,
             template_app
              (template_app (template_hole 1, template_var 2),
               template_var 0))),
         template_hole 0))),
    ("Messages.fv_eq_FunI'",
     "[| length ?T = length ?S;
         !!i. i < length ?T ==> (?x : fv (?T ! i)) = (?x : fv (?S ! i)) |]
      ==> (?x : fv (Fun ?f ?T)) = (?x : fv (Fun ?g ?S))",
     template_implication
      ([template_equation
         (template_app (template_hole 11, template_var 4),
          template_app (template_hole 10, template_var 3)),
        template_predicate (template_app (template_hole 9, t_empty))],
       template_equation
        (template_app
          (template_app (template_hole 6, template_var 2),
           template_app
            (template_hole 5,
             template_app
              (template_app (template_hole 1, template_var 1),
               template_var 4))),
         template_app
          (template_app (template_hole 6, template_var 2),
           template_app
            (template_hole 3,
             template_app
              (template_app (template_hole 0, template_var 0),
               template_var 3))))))]:
   (string * thm * template) list
### theory "Draft.MessagesTemplates"
### 0.372s elapsed time, 0.552s cpu time, 0.060s GC time
val it = (): unit
