Loading theory "Draft.Miscellaneous" (required by "Draft.Labeled_StrandsTemplates" via "Draft.Labeled_Strands" via "Draft.Strands_and_Constraints" via "Draft.Messages")
Loading theory "Draft.Templates" (required by "Draft.Labeled_StrandsTemplates" via "Draft.ExtrEqs")
datatype template_term
=
     t_empty
   | template_app of template_term * template_term
   | template_hole of int
   | template_var of int
datatype sign
= equals | greater_equals | greater_than | less_equals | less_than
datatype template
=
     template_bimplication of template * template
   | template_dunno
   | template_equation of template_term * template_term
   | template_implication of template list * template
   | template_inequation of sign * template_term * template_term
   | template_negation of template
   | template_predicate of template_term
constructor t_empty: template_term
constructor template_app: template_term * template_term -> template_term
constructor template_hole: int -> template_term
constructor template_var: int -> template_term
constructor equals: sign
constructor greater_equals: sign
constructor greater_than: sign
constructor less_equals: sign
constructor less_than: sign
constructor template_bimplication: template * template -> template
constructor template_dunno: template
constructor template_equation: template_term * template_term -> template
constructor template_implication: template list * template -> template
constructor template_inequation:
   sign * template_term * template_term -> template
constructor template_negation: template -> template
constructor template_predicate: template_term -> template
val vfs = fn: term -> (indexname * typ) list * (string * typ) list
val indexOf = fn: ''a list -> ''a -> int -> int
val has_eq = fn: term -> bool
val term2template = fn:
   (indexname * typ) list -> (string * typ) list -> term -> template_term
val lemma2predicate = fn: term -> term -> template
val makeTemplatewithContext = fn: term -> term -> template
val lemma2template = fn: term -> template
val thm2template = fn: thm -> template
val tterm2string = fn: template_term -> string
val template2string = fn: template -> string
val t = "height ?t <= size ?t": thm
val th =
   Const ("HOL.Trueprop", "bool => prop") $
     (Const ("Orderings.ord_class.less_eq", "nat => nat => bool") $
       (Const ("Tree.height_class.height", "?'a tree => nat") $
         Var (("t", 0), "?'a tree")) $
       (Const ("Nat.size_class.size", "?'a tree => nat") $
         Var (("t", 0), "?'a tree"))):
   term
### theory "Draft.Templates"
### 0.132s elapsed time, 0.337s cpu time, 0.160s GC time
Loading theory "Draft.ExtrEqs" (required by "Draft.Labeled_StrandsTemplates")
Found termination order: "(%p. size (fst p)) <*mlex*> {}"
### theory "Draft.Miscellaneous"
### 0.381s elapsed time, 0.843s cpu time, 0.202s GC time
Loading theory "Draft.Messages" (required by "Draft.Labeled_StrandsTemplates" via "Draft.Labeled_Strands" via "Draft.Strands_and_Constraints")
Found termination order: "size <*mlex*> {}"
Found termination order: "{}"
val eqpattern =
   Pattern
    (
       Const ("HOL.Trueprop", "bool => prop") $
         (Const ("HOL.eq", "?'a => ?'a => bool") $
           Var (("_dummy_", 1), "?'a") $ Var (("_dummy_", 2), "?'a"))
       ):
   term Find_Theorems.criterion
val badeqpattern = Pattern (Const ("Pure.eq", "?'a => ?'a => prop")):
   term Find_Theorems.criterion
val undefpattern =
   Pattern
    (
       Const ("HOL.Trueprop", "bool => prop") $
         (Const ("HOL.eq", "?'a => ?'a => bool") $
           Var (("_dummy_", 1), "?'a") $ Const ("HOL.undefined", "?'a"))
       ):
   term Find_Theorems.criterion
val thmpattern =
   Pattern
    (Const ("HOL.Trueprop", "bool => prop") $ Var (("_dummy_", 1), "bool")):
   term Find_Theorems.criterion
val badnames =
   ["*nitpick*", "*Nitpick*", "*full_exhaustive*", "*_def*", "Enum.finite*",
    "*Quickcheck*", "ATP*", "*Nunchaku*", "*Code*", "*BNF*", "*SMT*",
    "*.*.*"]:
   string list
val unwanted_names =
   [(false, Name "*nitpick*"), (false, Name "*Nitpick*"),
    (false, Name "*full_exhaustive*"), (false, Name "*_def*"),
    (false, Name "Enum.finite*"), (false, Name "*Quickcheck*"),
    (false, Name "ATP*"), (false, Name "*Nunchaku*"),
    (false, Name "*Code*"), (false, Name "*BNF*"), (false, Name "*SMT*"),
    (false, Name "*.*.*")]:
   (bool * term Find_Theorems.criterion) list
val has_vars = fn: term -> bool
val get_all_eqs = fn: string -> Proof.context -> (string * thm) list
val get_all_thms = fn: string -> Proof.context -> (string * thm) list
val get_noneq_thms = fn: string -> Proof.context -> (string * thm) list
val template_eqs = fn:
   string -> Proof.context -> (string * thm * template) list
val template_thms = fn:
   string -> Proof.context -> (string * thm * template) list
### theory "Draft.ExtrEqs"
### 0.557s elapsed time, 1.171s cpu time, 0.146s GC time
Found termination order: "{}"
Found termination order: "size <*mlex*> {}"
Found termination order: "size <*mlex*> {}"
Found termination order: "(%p. size (snd p)) <*mlex*> {}"
### theory "Draft.Messages"
### 0.815s elapsed time, 1.220s cpu time, 0.183s GC time
Loading theory "Draft.More_Unification" (required by "Draft.Labeled_StrandsTemplates" via "Draft.Labeled_Strands" via "Draft.Strands_and_Constraints")
Proofs for inductive predicate(s) "fsubstp"
  Proving monotonicity ...
Proofs for inductive predicate(s) "wf\<^sub>s\<^sub>u\<^sub>b\<^sub>s\<^sub>t_setp"
  Proving monotonicity ...
### theory "Draft.More_Unification"
### 1.446s elapsed time, 2.095s cpu time, 0.914s GC time
Loading theory "Draft.Intruder_Deduction" (required by "Draft.Labeled_StrandsTemplates" via "Draft.Labeled_Strands" via "Draft.Strands_and_Constraints")
locale intruder_model
  fixes arity :: "'fun => nat"
    and public :: "'fun => bool"
    and
    Ana ::
      "('fun, 'var) Term.term
       => ('fun, 'var) Term.term list * ('fun, 'var) Term.term list"
  assumes "intruder_model arity Ana"
Proofs for inductive predicate(s) "intruder_deduct"
  Proving monotonicity ...
Proofs for inductive predicate(s) "intruder_synth"
  Proving monotonicity ...
Proofs for inductive predicate(s) "public_ground_wf_term"
  Proving monotonicity ...
Proofs for inductive predicate(s) "intruder_deduct_restricted"
  Proving monotonicity ...
Proofs for inductive predicate(s) "intruder_deduct_num"
  Proving monotonicity ...
Found termination order: "(%p. size (snd (snd (snd p)))) <*mlex*> {}"
### theory "Draft.Intruder_Deduction"
### 0.809s elapsed time, 0.939s cpu time, 0.181s GC time
Loading theory "Draft.Strands_and_Constraints" (required by "Draft.Labeled_StrandsTemplates" via "Draft.Labeled_Strands")
Found termination order: "{}"
Found termination order: "{}"
Found termination order: "{}"
Found termination order: "size_list size <*mlex*> {}"
Found termination order: "{}"
Found termination order: "{}"
Found termination order: "size_list size <*mlex*> {}"
Found termination order: "(%p. size_list size (snd p)) <*mlex*> {}"
locale intruder_model
  fixes arity :: "'fun => nat"
    and public :: "'fun => bool"
    and
    Ana ::
      "('fun, 'var) Term.term
       => ('fun, 'var) Term.term list * ('fun, 'var) Term.term list"
  assumes "intruder_model arity Ana"
Found termination order: "(%p. size_list size (snd p)) <*mlex*> {}"
Found termination order: "(%p. size_list size (snd p)) <*mlex*> {}"
Found termination order: "(%p. size_list size (snd p)) <*mlex*> {}"
Found termination order: "(%p. size_list size (snd p)) <*mlex*> {}"
Found termination order: "size_list size <*mlex*> {}"
### theory "Draft.Strands_and_Constraints"
### 3.761s elapsed time, 4.887s cpu time, 1.435s GC time
Loading theory "Draft.Labeled_Strands" (required by "Draft.Labeled_StrandsTemplates")
### theory "Draft.Labeled_Strands"
### 0.498s elapsed time, 0.558s cpu time, 0.064s GC time
Loading theory "Draft.Labeled_StrandsTemplates"
val templateLemmas =
   [("Labeled_Strands.proj_nil", "proj ?n [] = []",
     template_equation
      (template_app
        (template_app (template_hole 1, template_var 0), template_hole 0),
       template_hole 0)),
    ("Labeled_Strands.proj_nil", "proj_unl ?n [] = []",
     template_equation
      (template_app
        (template_hole 3,
         template_app
          (template_app (template_hole 2, template_var 0),
           template_hole 1)),
       template_hole 0)),
    ("Labeled_Strands.proj_idem", "proj ?l (proj ?l ?A) = proj ?l ?A",
     template_equation
      (template_app
        (template_app (template_hole 0, template_var 1),
         template_app
          (template_app (template_hole 0, template_var 1), template_var 0)),
       template_app
        (template_app (template_hole 0, template_var 1), template_var 0))),
    ("Labeled_Strands.trms\<^sub>l\<^sub>s\<^sub>t_subset",
     "trms\<^sub>l\<^sub>s\<^sub>t ?A
      <= trms\<^sub>l\<^sub>s\<^sub>t (?A @ ?B)",
     template_inequation
      (less_equals,
       template_app
        (template_hole 2, template_app (template_hole 1, template_var 1)),
       template_app
        (template_hole 2,
         template_app
          (template_hole 1,
           template_app
            (template_app (template_hole 0, template_var 1),
             template_var 0))))),
    ("Labeled_Strands.trms\<^sub>l\<^sub>s\<^sub>t_subset",
     "trms\<^sub>l\<^sub>s\<^sub>t ?B
      <= trms\<^sub>l\<^sub>s\<^sub>t (?A @ ?B)",
     template_inequation
      (less_equals,
       template_app
        (template_hole 2, template_app (template_hole 1, template_var 1)),
       template_app
        (template_hole 2,
         template_app
          (template_hole 1,
           template_app
            (template_app (template_hole 0, template_var 0),
             template_var 1))))),
    ("Labeled_Strands.unlabel_nil_only_if_nil",
     "unlabel ?A = [] ==> ?A = []",
     template_implication
      ([template_equation
         (template_app (template_hole 3, template_var 0), template_hole 2)],
       template_equation (template_var 0, template_hole 0))),
    ("Labeled_Strands.unlabel_append",
     "unlabel (?A @ ?B) = unlabel ?A @ unlabel ?B",
     template_equation
      (template_app
        (template_hole 2,
         template_app
          (template_app (template_hole 1, template_var 1), template_var 0)),
       template_app
        (template_app
          (template_hole 0, template_app (template_hole 2, template_var 1)),
         template_app (template_hole 2, template_var 0)))),
    ("Labeled_Strands.unlabel_Cons",
     "unlabel (?b # ?A) = snd ?b # unlabel ?A",
     template_equation
      (template_app
        (template_hole 3,
         template_app
          (template_app (template_hole 2, template_var 1), template_var 0)),
       template_app
        (template_app
          (template_hole 1, template_app (template_hole 0, template_var 1)),
         template_app (template_hole 3, template_var 0)))),
    ("Labeled_Strands.singleton_lst_proj", "unlabel [(?l'', ?a)] = [?a]",
     template_equation
      (template_app
        (template_hole 5,
         template_app
          (template_app
            (template_hole 4,
             template_app
              (template_app (template_hole 3, template_var 1),
               template_var 0)),
           template_hole 2)),
       template_app
        (template_app (template_hole 1, template_var 0), template_hole 0))),
    ("Labeled_Strands.prefix_proj",
     "prefix ?A ?B ==> prefix (unlabel ?A) (unlabel ?B)",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 2, template_var 1),
              template_var 0)
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 1,
               template_app (template_hole 0, template_var 1)),
             template_app (template_hole 0, template_var 0))
           ))),
    ("Labeled_Strands.unlabel_Cons",
     "unlabel ((?l, ?a) # ?A) = ?a # unlabel ?A",
     template_equation
      (template_app
        (template_hole 3,
         template_app
          (template_app
            (template_hole 2,
             template_app
              (template_app (template_hole 1, template_var 2),
               template_var 1)),
           template_var 0)),
       template_app
        (template_app (template_hole 0, template_var 1),
         template_app (template_hole 3, template_var 0)))),
    ("Labeled_Strands.ik_proj_subset",
     "ik\<^sub>s\<^sub>t (proj_unl ?n ?A)
      <= trms\<^sub>l\<^sub>s\<^sub>t (proj ?n ?A)",
     template_inequation
      (less_equals,
       template_app
        (template_hole 3,
         template_app
          (template_hole 2,
           template_app
            (template_app (template_hole 1, template_var 1),
             template_var 0))),
       template_app
        (template_hole 0,
         template_app
          (template_hole 2,
           template_app
            (template_app (template_hole 1, template_var 1),
             template_var 0))))),
    ("Labeled_Strands.singleton_lst_proj",
     "proj_unl ?l [(\<star>, ?a)] = [?a]",
     template_equation
      (template_app
        (template_hole 7,
         template_app
          (template_app (template_hole 6, template_var 1),
           template_app
            (template_app
              (template_hole 5,
               template_app
                (template_app (template_hole 4, template_hole 3),
                 template_var 0)),
             template_hole 2))),
       template_app
        (template_app (template_hole 1, template_var 0), template_hole 0))),
    ("Labeled_Strands.prefix_proj",
     "prefix ?A ?B ==> prefix (proj ?n ?A) (proj ?n ?B)",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 1, template_var 2),
              template_var 1)
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 1,
               template_app
                (template_app (template_hole 0, template_var 0),
                 template_var 2)),
             template_app
              (template_app (template_hole 0, template_var 0),
               template_var 1))
           ))),
    ("Labeled_Strands.vars\<^sub>l\<^sub>s\<^sub>t_union",
     "vars\<^sub>l\<^sub>s\<^sub>t ?A =
      (UN l. vars\<^sub>l\<^sub>s\<^sub>t (proj l ?A))",
     template_equation
      (template_app
        (template_hole 5, template_app (template_hole 4, template_var 0)),
       template_app
        (template_hole 3,
         template_app
          (template_app (template_hole 2, t_empty), template_hole 0)))),
    ("Labeled_Strands.wfvarsoccs\<^sub>s\<^sub>t_proj_union",
     "wfvarsoccs\<^sub>s\<^sub>t (unlabel ?A) =
      (UN l. wfvarsoccs\<^sub>s\<^sub>t (proj_unl l ?A))",
     template_equation
      (template_app
        (template_hole 5, template_app (template_hole 4, template_var 0)),
       template_app
        (template_hole 3,
         template_app
          (template_app (template_hole 2, t_empty), template_hole 0)))),
    ("Labeled_Strands.proj_ik_union_is_unlabel_ik",
     "ik\<^sub>s\<^sub>t (unlabel ?A) =
      (UN l. ik\<^sub>s\<^sub>t (proj_unl l ?A))",
     template_equation
      (template_app
        (template_hole 5, template_app (template_hole 4, template_var 0)),
       template_app
        (template_hole 3,
         template_app
          (template_app (template_hole 2, t_empty), template_hole 0)))),
    ("Labeled_Strands.trms\<^sub>l\<^sub>s\<^sub>t_union",
     "trms\<^sub>l\<^sub>s\<^sub>t ?A =
      (UN l. trms\<^sub>l\<^sub>s\<^sub>t (proj l ?A))",
     template_equation
      (template_app
        (template_hole 5, template_app (template_hole 4, template_var 0)),
       template_app
        (template_hole 3,
         template_app
          (template_app (template_hole 2, t_empty), template_hole 0)))),
    ("Labeled_Strands.trms\<^sub>l\<^sub>s\<^sub>t_append",
     "trms\<^sub>l\<^sub>s\<^sub>t (?A @ ?B) =
      trms\<^sub>l\<^sub>s\<^sub>t ?A Un trms\<^sub>l\<^sub>s\<^sub>t ?B",
     template_equation
      (template_app
        (template_hole 3,
         template_app
          (template_hole 2,
           template_app
            (template_app (template_hole 1, template_var 1),
             template_var 0))),
       template_app
        (template_app
          (template_hole 0,
           template_app
            (template_hole 3,
             template_app (template_hole 2, template_var 1))),
         template_app
          (template_hole 3,
           template_app (template_hole 2, template_var 0))))),
    ("Labeled_Strands.singleton_lst_proj",
     "proj_unl ?l [(ln ?l, ?a)] = [?a]",
     template_equation
      (template_app
        (template_hole 7,
         template_app
          (template_app (template_hole 6, template_var 1),
           template_app
            (template_app
              (template_hole 5,
               template_app
                (template_app
                  (template_hole 4,
                   template_app (template_hole 3, template_var 1)),
                 template_var 0)),
             template_hole 2))),
       template_app
        (template_app (template_hole 1, template_var 0), template_hole 0))),
    ("Labeled_Strands.proj_append",
     "proj ?l (?A' @ ?B') = proj ?l ?A' @ proj ?l ?B'",
     template_equation
      (template_app
        (template_app (template_hole 1, template_var 2),
         template_app
          (template_app (template_hole 0, template_var 1), template_var 0)),
       template_app
        (template_app
          (template_hole 0,
           template_app
            (template_app (template_hole 1, template_var 2),
             template_var 1)),
         template_app
          (template_app (template_hole 1, template_var 2),
           template_var 0)))),
    ("Labeled_Strands.trms_proj\<^sub>l\<^sub>s\<^sub>t_subset",
     "trms\<^sub>l\<^sub>s\<^sub>t (proj ?l ?A)
      <= trms\<^sub>l\<^sub>s\<^sub>t (proj ?l (?A @ ?B))",
     template_inequation
      (less_equals,
       template_app
        (template_hole 3,
         template_app
          (template_hole 2,
           template_app
            (template_app (template_hole 1, template_var 2),
             template_var 1))),
       template_app
        (template_hole 3,
         template_app
          (template_hole 2,
           template_app
            (template_app (template_hole 1, template_var 2),
             template_app
              (template_app (template_hole 0, template_var 1),
               template_var 0)))))),
    ("Labeled_Strands.trms_proj\<^sub>l\<^sub>s\<^sub>t_subset",
     "trms\<^sub>l\<^sub>s\<^sub>t (proj ?l ?B)
      <= trms\<^sub>l\<^sub>s\<^sub>t (proj ?l (?A @ ?B))",
     template_inequation
      (less_equals,
       template_app
        (template_hole 3,
         template_app
          (template_hole 2,
           template_app
            (template_app (template_hole 1, template_var 2),
             template_var 1))),
       template_app
        (template_hole 3,
         template_app
          (template_hole 2,
           template_app
            (template_app (template_hole 1, template_var 2),
             template_app
              (template_app (template_hole 0, template_var 0),
               template_var 1)))))),
    ("Labeled_Strands.unlabel_in",
     "(?l, ?x) : set ?A ==> ?x : set (unlabel ?A)",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_hole 5,
                template_app
                 (template_app (template_hole 4, template_var 2),
                  template_var 1)),
              template_app (template_hole 3, template_var 0))
            )],
       template_predicate
        (
           template_app
            (template_app (template_hole 2, template_var 1),
             template_app
              (template_hole 1,
               template_app (template_hole 0, template_var 0)))
           ))),
    ("Labeled_Strands.prefix_proj",
     "prefix ?A ?B ==> prefix (proj_unl ?n ?A) (proj_unl ?n ?B)",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 3, template_var 2),
              template_var 1)
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 2,
               template_app
                (template_hole 1,
                 template_app
                  (template_app (template_hole 0, template_var 0),
                   template_var 2))),
             template_app
              (template_hole 1,
               template_app
                (template_app (template_hole 0, template_var 0),
                 template_var 1)))
           ))),
    ("Labeled_Strands.unlabel_mono",
     "set ?A <= set ?B ==> set (unlabel ?A) <= set (unlabel ?B)",
     template_implication
      ([template_inequation
         (less_equals, template_app (template_hole 3, template_var 1),
          template_app (template_hole 3, template_var 0))],
       template_inequation
        (less_equals,
         template_app
          (template_hole 1, template_app (template_hole 0, template_var 1)),
         template_app
          (template_hole 1,
           template_app (template_hole 0, template_var 0))))),
    ("Labeled_Strands.wf_if_wf_proj",
     "ALL l. wf\<^sub>l\<^sub>s\<^sub>t ?V (proj l ?A) ==>
      wf\<^sub>l\<^sub>s\<^sub>t ?V ?A",
     template_implication
      ([template_predicate (template_app (template_hole 3, t_empty))],
       template_predicate
        (
           template_app
            (template_app (template_hole 2, template_var 1),
             template_app (template_hole 1, template_var 0))
           ))),
    ("Labeled_Strands.proj_unl_cons",
     "proj_unl ?l ((\<star>, ?a) # ?A) = ?a # proj_unl ?l ?A",
     template_equation
      (template_app
        (template_hole 5,
         template_app
          (template_app (template_hole 4, template_var 2),
           template_app
            (template_app
              (template_hole 3,
               template_app
                (template_app (template_hole 2, template_hole 1),
                 template_var 1)),
             template_var 0))),
       template_app
        (template_app (template_hole 0, template_var 1),
         template_app
          (template_hole 5,
           template_app
            (template_app (template_hole 4, template_var 2),
             template_var 0))))),
    ("Labeled_Strands.proj_Cons",
     "proj ?n ((\<star>, ?a) # ?A) = (\<star>, ?a) # proj ?n ?A",
     template_equation
      (template_app
        (template_app (template_hole 3, template_var 2),
         template_app
          (template_app
            (template_hole 2,
             template_app
              (template_app (template_hole 1, template_hole 0),
               template_var 1)),
           template_var 0)),
       template_app
        (template_app
          (template_hole 2,
           template_app
            (template_app (template_hole 1, template_hole 0),
             template_var 1)),
         template_app
          (template_app (template_hole 3, template_var 2),
           template_var 0)))),
    ("Labeled_Strands.trms_unlabel_star",
     "trms\<^sub>s\<^sub>t\<^sub>p (snd (\<star>, ?x))
      <= trms\<^sub>l\<^sub>s\<^sub>t (proj ?l [(\<star>, ?x)])",
     template_inequation
      (less_equals,
       template_app
        (template_hole 10,
         template_app
          (template_hole 9,
           template_app
            (template_app (template_hole 8, template_hole 7),
             template_var 1))),
       template_app
        (template_hole 6,
         template_app
          (template_hole 5,
           template_app
            (template_app (template_hole 4, template_var 0),
             template_app
              (template_app
                (template_hole 3,
                 template_app
                  (template_app (template_hole 2, template_hole 1),
                   template_var 1)),
               template_hole 0)))))),
    ("Labeled_Strands.unlabel_mem_has_label",
     "?x : set (unlabel ?A) ==> EX l. (l, ?x) : set ?A",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 6, template_var 1),
              template_app
               (template_hole 5,
                template_app (template_hole 4, template_var 0)))
            )],
       template_predicate (template_app (template_hole 3, t_empty)))),
    ("Labeled_Strands.proj_unl_cons",
     "proj_unl ?l ((ln ?l, ?a) # ?A) = ?a # proj_unl ?l ?A",
     template_equation
      (template_app
        (template_hole 5,
         template_app
          (template_app (template_hole 4, template_var 2),
           template_app
            (template_app
              (template_hole 3,
               template_app
                (template_app
                  (template_hole 2,
                   template_app (template_hole 1, template_var 2)),
                 template_var 1)),
             template_var 0))),
       template_app
        (template_app (template_hole 0, template_var 1),
         template_app
          (template_hole 5,
           template_app
            (template_app (template_hole 4, template_var 2),
             template_var 0))))),
    ("Labeled_Strands.proj_append",
     "proj_unl ?l (?A @ ?B) = proj_unl ?l ?A @ proj_unl ?l ?B",
     template_equation
      (template_app
        (template_hole 3,
         template_app
          (template_app (template_hole 2, template_var 2),
           template_app
            (template_app (template_hole 1, template_var 1),
             template_var 0))),
       template_app
        (template_app
          (template_hole 0,
           template_app
            (template_hole 3,
             template_app
              (template_app (template_hole 2, template_var 2),
               template_var 1))),
         template_app
          (template_hole 3,
           template_app
            (template_app (template_hole 2, template_var 2),
             template_var 0))))),
    ("Labeled_Strands.proj_set_mono",
     "set ?A <= set ?B ==> set (proj ?n ?A) <= set (proj ?n ?B)",
     template_implication
      ([template_inequation
         (less_equals, template_app (template_hole 1, template_var 2),
          template_app (template_hole 1, template_var 1))],
       template_inequation
        (less_equals,
         template_app
          (template_hole 1,
           template_app
            (template_app (template_hole 0, template_var 0),
             template_var 2)),
         template_app
          (template_hole 1,
           template_app
            (template_app (template_hole 0, template_var 0),
             template_var 1))))),
    ("Labeled_Strands.proj_Cons",
     "proj ?n ((ln ?n, ?a) # ?A) = (ln ?n, ?a) # proj ?n ?A",
     template_equation
      (template_app
        (template_app (template_hole 3, template_var 2),
         template_app
          (template_app
            (template_hole 2,
             template_app
              (template_app
                (template_hole 1,
                 template_app (template_hole 0, template_var 2)),
               template_var 1)),
           template_var 0)),
       template_app
        (template_app
          (template_hole 2,
           template_app
            (template_app
              (template_hole 1,
               template_app (template_hole 0, template_var 2)),
             template_var 1)),
         template_app
          (template_app (template_hole 3, template_var 2),
           template_var 0)))),
    ("Labeled_Strands.trms_unlabel_proj",
     "trms\<^sub>s\<^sub>t\<^sub>p (snd (ln ?l, ?x))
      <= trms\<^sub>l\<^sub>s\<^sub>t (proj ?l [(ln ?l, ?x)])",
     template_inequation
      (less_equals,
       template_app
        (template_hole 8,
         template_app
          (template_hole 7,
           template_app
            (template_app
              (template_hole 6,
               template_app (template_hole 5, template_var 1)),
             template_var 0))),
       template_app
        (template_hole 4,
         template_app
          (template_hole 3,
           template_app
            (template_app (template_hole 2, template_var 1),
             template_app
              (template_app
                (template_hole 1,
                 template_app
                  (template_app
                    (template_hole 6,
                     template_app (template_hole 5, template_var 1)),
                   template_var 0)),
               template_hole 0)))))),
    ("Labeled_Strands.singleton_lst_proj",
     "?l ~= ?l' ==> proj_unl ?l' [(ln ?l, ?a)] = []",
     template_implication
      ([template_negation
         (template_equation (template_var 2, template_var 1))],
       template_equation
        (template_app
          (template_hole 6,
           template_app
            (template_app (template_hole 5, template_var 1),
             template_app
              (template_app
                (template_hole 4,
                 template_app
                  (template_app
                    (template_hole 3,
                     template_app (template_hole 2, template_var 2)),
                   template_var 0)),
               template_hole 1))),
         template_hole 0))),
    ("Labeled_Strands.proj_Cons",
     "?m ~= ?n ==> proj ?n ((ln ?m, ?a) # ?A) = proj ?n ?A",
     template_implication
      ([template_negation
         (template_equation (template_var 3, template_var 2))],
       template_equation
        (template_app
          (template_app (template_hole 3, template_var 2),
           template_app
            (template_app
              (template_hole 2,
               template_app
                (template_app
                  (template_hole 1,
                   template_app (template_hole 0, template_var 3)),
                 template_var 1)),
             template_var 0)),
         template_app
          (template_app (template_hole 3, template_var 2),
           template_var 0)))),
    ("Labeled_Strands.proj_set_mono",
     "set ?A <= set ?B ==> set (proj_unl ?n ?A) <= set (proj_unl ?n ?B)",
     template_implication
      ([template_inequation
         (less_equals, template_app (template_hole 4, template_var 2),
          template_app (template_hole 4, template_var 1))],
       template_inequation
        (less_equals,
         template_app
          (template_hole 2,
           template_app
            (template_hole 1,
             template_app
              (template_app (template_hole 0, template_var 0),
               template_var 2))),
         template_app
          (template_hole 2,
           template_app
            (template_hole 1,
             template_app
              (template_app (template_hole 0, template_var 0),
               template_var 1)))))),
    ("Labeled_Strands.proj_ik_append",
     "ik\<^sub>s\<^sub>t (proj_unl ?l (?A @ ?B)) =
      ik\<^sub>s\<^sub>t (proj_unl ?l ?A) Un
      ik\<^sub>s\<^sub>t (proj_unl ?l ?B)",
     template_equation
      (template_app
        (template_hole 4,
         template_app
          (template_hole 3,
           template_app
            (template_app (template_hole 2, template_var 2),
             template_app
              (template_app (template_hole 1, template_var 1),
               template_var 0)))),
       template_app
        (template_app
          (template_hole 0,
           template_app
            (template_hole 4,
             template_app
              (template_hole 3,
               template_app
                (template_app (template_hole 2, template_var 2),
                 template_var 1)))),
         template_app
          (template_hole 4,
           template_app
            (template_hole 3,
             template_app
              (template_app (template_hole 2, template_var 2),
               template_var 0)))))),
    ("Labeled_Strands.trms_proj\<^sub>l\<^sub>s\<^sub>t_append",
     "trms\<^sub>l\<^sub>s\<^sub>t (proj ?l (?A @ ?B)) =
      trms\<^sub>l\<^sub>s\<^sub>t (proj ?l ?A) Un
      trms\<^sub>l\<^sub>s\<^sub>t (proj ?l ?B)",
     template_equation
      (template_app
        (template_hole 4,
         template_app
          (template_hole 3,
           template_app
            (template_app (template_hole 2, template_var 2),
             template_app
              (template_app (template_hole 1, template_var 1),
               template_var 0)))),
       template_app
        (template_app
          (template_hole 0,
           template_app
            (template_hole 4,
             template_app
              (template_hole 3,
               template_app
                (template_app (template_hole 2, template_var 2),
                 template_var 1)))),
         template_app
          (template_hole 4,
           template_app
            (template_hole 3,
             template_app
              (template_app (template_hole 2, template_var 2),
               template_var 0)))))),
    ("Labeled_Strands.is_LabelS_proj_iff_not_is_LabelN",
     "list_all is_LabelS (proj ?l ?A) = (~ list_ex (is_LabelN ?l) ?A)",
     template_equation
      (template_app
        (template_app (template_hole 7, t_empty),
         template_app
          (template_app (template_hole 3, template_var 1), template_var 0)),
       template_app
        (template_hole 2,
         template_app
          (template_app (template_hole 1, t_empty), template_var 0)))),
    ("Labeled_Strands.proj_Cons",
     "?l = \<star> ==> proj ?n ((?l, ?a) # ?A) = (?l, ?a) # proj ?n ?A",
     template_implication
      ([template_equation (template_var 3, template_hole 4)],
       template_equation
        (template_app
          (template_app (template_hole 2, template_var 2),
           template_app
            (template_app
              (template_hole 1,
               template_app
                (template_app (template_hole 0, template_var 3),
                 template_var 1)),
             template_var 0)),
         template_app
          (template_app
            (template_hole 1,
             template_app
              (template_app (template_hole 0, template_var 3),
               template_var 1)),
           template_app
            (template_app (template_hole 2, template_var 2),
             template_var 0))))),
    ("Labeled_Strands.proj_unl_cons",
     "?l ~= ?l' ==> proj_unl ?l' ((ln ?l, ?a) # ?A) = proj_unl ?l' ?A",
     template_implication
      ([template_negation
         (template_equation (template_var 3, template_var 2))],
       template_equation
        (template_app
          (template_hole 4,
           template_app
            (template_app (template_hole 3, template_var 2),
             template_app
              (template_app
                (template_hole 2,
                 template_app
                  (template_app
                    (template_hole 1,
                     template_app (template_hole 0, template_var 3)),
                   template_var 1)),
               template_var 0))),
         template_app
          (template_hole 4,
           template_app
            (template_app (template_hole 3, template_var 2),
             template_var 0))))),
    ("Labeled_Strands.proj_subset_if_no_label",
     "~ list_ex (is_LabelN ?l) ?A ==>
      set (proj ?l ?A) <= set (proj ?l' ?A)",
     template_implication
      ([template_negation
         (
            template_predicate
             (
                template_app
                 (template_app (template_hole 6, t_empty), template_var 1)
                )
            )],
       template_inequation
        (less_equals,
         template_app
          (template_hole 1,
           template_app
            (template_app (template_hole 0, template_var 2),
             template_var 1)),
         template_app
          (template_hole 1,
           template_app
            (template_app (template_hole 0, template_var 0),
             template_var 1))))),
    ("Labeled_Strands.unlabel_ik\<^sub>s\<^sub>t_is_rcv_set",
     "ik\<^sub>s\<^sub>t (unlabel ?A) =
      {uu_.
       EX l t.
          uu_ = t &
          (l, receive\<langle>t\<rangle>\<^sub>s\<^sub>t) : set ?A}",
     template_equation
      (template_app
        (template_hole 10, template_app (template_hole 9, template_var 0)),
       template_app (template_hole 8, t_empty))),
    ("Labeled_Strands.proj_Cons",
     "?l = ln ?n ==> proj ?n ((?l, ?a) # ?A) = (?l, ?a) # proj ?n ?A",
     template_implication
      ([template_equation
         (template_var 3, template_app (template_hole 4, template_var 2))],
       template_equation
        (template_app
          (template_app (template_hole 2, template_var 2),
           template_app
            (template_app
              (template_hole 1,
               template_app
                (template_app (template_hole 0, template_var 3),
                 template_var 1)),
             template_var 0)),
         template_app
          (template_app
            (template_hole 1,
             template_app
              (template_app (template_hole 0, template_var 3),
               template_var 1)),
           template_app
            (template_app (template_hole 2, template_var 2),
             template_var 0))))),
    ("Labeled_Strands.proj_subset_if_no_label",
     "~ list_ex (is_LabelN ?l) ?A ==>
      set (proj_unl ?l ?A) <= set (proj_unl ?l' ?A)",
     template_implication
      ([template_negation
         (
            template_predicate
             (
                template_app
                 (template_app (template_hole 7, t_empty), template_var 1)
                )
            )],
       template_inequation
        (less_equals,
         template_app
          (template_hole 2,
           template_app
            (template_hole 1,
             template_app
              (template_app (template_hole 0, template_var 2),
               template_var 1))),
         template_app
          (template_hole 2,
           template_app
            (template_hole 1,
             template_app
              (template_app (template_hole 0, template_var 0),
               template_var 1)))))),
    ("Labeled_Strands.proj_ik\<^sub>s\<^sub>t_is_proj_rcv_set",
     "ik\<^sub>s\<^sub>t (proj_unl ?n ?A) =
      {t. (ln ?n, receive\<langle>t\<rangle>\<^sub>s\<^sub>t) : set ?A |
          (\<star>, receive\<langle>t\<rangle>\<^sub>s\<^sub>t) : set ?A}",
     template_equation
      (template_app
        (template_hole 10,
         template_app
          (template_hole 9,
           template_app
            (template_app (template_hole 8, template_var 1),
             template_var 0))),
       template_app (template_hole 7, t_empty))),
    ("Labeled_Strands.proj_Cons",
     "[| fst ?b ~= \<star>; fst ?b ~= ln ?n |]
      ==> proj ?n (?b # ?A) = proj ?n ?A",
     template_implication
      ([template_negation
         (
            template_equation
             (template_app (template_hole 5, template_var 2),
              template_hole 4)
            ),
        template_negation
         (
            template_equation
             (template_app (template_hole 5, template_var 2),
              template_app (template_hole 3, template_var 1))
            )],
       template_equation
        (template_app
          (template_app (template_hole 1, template_var 1),
           template_app
            (template_app (template_hole 0, template_var 2),
             template_var 0)),
         template_app
          (template_app (template_hole 1, template_var 1),
           template_var 0)))),
    ("Labeled_Strands.unlabel_Cons_inv",
     "unlabel ?A = ?b # ?B ==>
      EX A'. (EX n. ?A = (ln n, ?b) # A') | ?A = (\<star>, ?b) # A'",
     template_implication
      ([template_equation
         (template_app (template_hole 9, template_var 2),
          template_app
           (template_app (template_hole 8, template_var 1),
            template_var 0))],
       template_predicate (template_app (template_hole 7, t_empty)))),
    ("Labeled_Strands.proj_in_setD",
     "[| ?a : set (proj ?l ?A);
         !!k b. [| ?a = (k, b); k = ln ?l | k = \<star> |] ==> ?thesis |]
      ==> ?thesis",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 10, template_var 3),
              template_app
               (template_hole 9,
                template_app
                 (template_app (template_hole 8, template_var 2),
                  template_var 1)))
            ),
        template_predicate (template_app (template_hole 7, t_empty))],
       template_predicate (template_var 0))),
    ("Labeled_Strands.proj_ik_append_subst_all",
     "ik\<^sub>s\<^sub>t
       (proj_unl ?l (?A @ ?B)) \<cdot>\<^sub>s\<^sub>e\<^sub>t
      ?I =
      (ik\<^sub>s\<^sub>t (proj_unl ?l ?A) \<cdot>\<^sub>s\<^sub>e\<^sub>t
       ?I) Un
      (ik\<^sub>s\<^sub>t (proj_unl ?l ?B) \<cdot>\<^sub>s\<^sub>e\<^sub>t
       ?I)",
     template_equation
      (template_app
        (template_app (template_hole 6, t_empty),
         template_app
          (template_hole 4,
           template_app
            (template_hole 3,
             template_app
              (template_app (template_hole 2, template_var 2),
               template_app
                (template_app (template_hole 1, template_var 1),
                 template_var 0))))),
       template_app
        (template_app
          (template_hole 0,
           template_app
            (template_app (template_hole 6, t_empty),
             template_app
              (template_hole 4,
               template_app
                (template_hole 3,
                 template_app
                  (template_app (template_hole 2, template_var 2),
                   template_var 1))))),
         template_app
          (template_app (template_hole 6, t_empty),
           template_app
            (template_hole 4,
             template_app
              (template_hole 3,
               template_app
                (template_app (template_hole 2, template_var 2),
                 template_var 0))))))),
    ("Labeled_Strands.unlabel_snoc_inv",
     "unlabel ?A = ?B @ [?b] ==>
      EX A'. (EX n. ?A = A' @ [(ln n, ?b)]) | ?A = A' @ [(\<star>, ?b)]",
     template_implication
      ([template_equation
         (template_app (template_hole 13, template_var 2),
          template_app
           (template_app (template_hole 12, template_var 1),
            template_app
             (template_app (template_hole 11, template_var 0),
              template_hole 10)))],
       template_predicate (template_app (template_hole 9, t_empty))))]:
   (string * thm * template) list
### theory "Draft.Labeled_StrandsTemplates"
### 0.481s elapsed time, 0.684s cpu time, 0.097s GC time
val it = (): unit
