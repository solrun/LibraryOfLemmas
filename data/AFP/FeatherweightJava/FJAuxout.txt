Loading theory "Draft.FJDefs" (required by "Draft.FJAuxMoreTemplates" via "Draft.FJAux")
Loading theory "HOL-Library.Function_Algebras" (required by "Draft.FJAuxMoreTemplates" via "Draft.ExtrEqs" via "HOL-Library.BigO")
Loading theory "HOL-Library.Nat_Bijection" (required by "Draft.FJAuxMoreTemplates" via "Draft.ExtrEqs" via "HOL-Library.Stream")
Loading theory "HOL-Library.Set_Algebras" (required by "Draft.FJAuxMoreTemplates" via "Draft.ExtrEqs" via "HOL-Library.BigO")
instantiation
  fun :: (type, plus) plus
  plus_fun == plus :: ('a => 'b) => ('a => 'b) => 'a => 'b
instantiation
  set :: (plus) plus
  plus_set == plus :: 'a set => 'a set => 'a set
instantiation
  set :: (times) times
  times_set == times :: 'a set => 'a set => 'a set
instantiation
  fun :: (type, zero) zero
  zero_fun == zero_class.zero :: 'a => 'b
instantiation
  set :: (zero) zero
  zero_set == zero_class.zero :: 'a set
instantiation
  fun :: (type, times) times
  times_fun == times :: ('a => 'b) => ('a => 'b) => 'a => 'b
instantiation
  set :: (one) one
  one_set == one_class.one :: 'a set
instantiation
  fun :: (type, one) one
  one_fun == one_class.one :: 'a => 'b
Found termination order: "(%p. size (snd p)) <*mlex*> {}"
### theory "HOL-Library.Function_Algebras"
### 0.149s elapsed time, 0.612s cpu time, 0.039s GC time
Loading theory "HOL-Library.Tree" (required by "Draft.FJAuxMoreTemplates" via "Draft.ExtrEqs" via "Draft.Templates")
### theory "HOL-Library.Set_Algebras"
### 0.193s elapsed time, 0.786s cpu time, 0.039s GC time
Loading theory "HOL-Library.BigO" (required by "Draft.FJAuxMoreTemplates" via "Draft.ExtrEqs")
Found termination order: "size_list size <*mlex*> {}"
### theory "HOL-Library.Nat_Bijection"
### 0.316s elapsed time, 1.258s cpu time, 0.109s GC time
Loading theory "HOL-Library.Stream" (required by "Draft.FJAuxMoreTemplates" via "Draft.ExtrEqs")
consts
  shift :: "'a list => 'a stream => 'a stream"
consts
  left :: "'a tree => 'a tree"
consts
  right :: "'a tree => 'a tree"
Proofs for coinductive predicate(s) "streamsp"
  Proving monotonicity ...
Found termination order: "size <*mlex*> {}"
consts
  snth :: "'a stream => nat => 'a"
consts
  stake :: "nat => 'a stream => 'a list"
consts
  sdrop :: "nat => 'a stream => 'a stream"
Found termination order: "size <*mlex*> {}"
consts
  sfilter :: "('a => bool) => 'a stream => 'a stream"
Found termination order: "size <*mlex*> {}"
consts
  cycle :: "'a list => 'a stream"
class height = type +
  fixes height :: "'a => nat"
### theory "HOL-Library.BigO"
### 0.765s elapsed time, 3.014s cpu time, 0.302s GC time
instantiation
  tree :: (type) height
  height_tree == height :: 'a tree => nat
consts
  siterate :: "('a => 'a) => 'a => 'a stream"
Found termination order: "size <*mlex*> {}"
consts
  flat :: "'a list stream => 'a stream"
Found termination order: "size <*mlex*> {}"
consts
  sinterleave :: "'a stream => 'a stream => 'a stream"
consts
  szip :: "'a stream => 'b stream => ('a * 'b) stream"
consts
  smap2 :: "('a => 'b => 'c) => 'a stream => 'b stream => 'c stream"
Found termination order: "size <*mlex*> {}"
### theory "HOL-Library.Stream"
### 1.069s elapsed time, 3.825s cpu time, 0.833s GC time
Found termination order: "size <*mlex*> {}"
Proofs for inductive predicate(s) "isubexprsp"
  Proving monotonicity ...
Found termination order: "size <*mlex*> {}"
Proofs for inductive predicate(s) "vals", "val"
  Proving monotonicity ...
Found termination order: "size <*mlex*> {}"
Found termination order: "size <*mlex*> {}"
Found termination order: "(%p. size (fst p)) <*mlex*> {}"
Found termination order: "size <*mlex*> {}"
Found termination order: "(%p. size (snd p)) <*mlex*> {}"
Found termination order: "size <*mlex*> {}"
consts
  substs :: "(nat => exp option) => exp => exp"
  subst_list1 :: "(nat => exp option) => exp list => exp list"
  subst_list2 :: "(nat => exp option) => exp list => exp list"
### Ambiguous input (line 145 of "$AFP/FeatherweightJava/FJDefs.thy") produces 2 parse trees:
### ("\<^const>Pure.eq"
###   ("\<^fixed>substs_syn" ("_position" ds) ("_position" xs) ("_position" e))
###   ("_applC" ("_position" substs)
###     ("_cargs"
###       ("_applC" ("_position" map_upds)
###         ("_cargs" ("_position" Map.empty)
###           ("_cargs" ("_position" xs) ("_position" ds))))
###       ("_position" e))))
### ("\<^const>Pure.eq"
###   ("_applC"
###     ("\<^const>Fields.inverse_class.inverse_divide" ("_position" ds)
###       ("_position" xs))
###     ("_position" e))
###   ("_applC" ("_position" substs)
###     ("_cargs"
###       ("_applC" ("_position" map_upds)
###         ("_cargs" ("_position" Map.empty)
###           ("_cargs" ("_position" xs) ("_position" ds))))
###       ("_position" e))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 150 of "$AFP/FeatherweightJava/FJDefs.thy") produces 2 parse trees:
### ("\<^const>Pure.eq"
###   ("\<^fixed>subst_list_syn" ("_position" ds) ("_position" xs)
###     ("_position" es))
###   ("_applC" ("_position" map)
###     ("_cargs"
###       ("_applC" ("_position" substs)
###         ("_applC" ("_position" map_upds)
###           ("_cargs" ("_position" Map.empty)
###             ("_cargs" ("_position" xs) ("_position" ds)))))
###       ("_position" es))))
### ("\<^const>Pure.eq"
###   ("_applC"
###     ("_list"
###       ("\<^const>Fields.inverse_class.inverse_divide" ("_position" ds)
###         ("_position" xs)))
###     ("_position" es))
###   ("_applC" ("_position" map)
###     ("_cargs"
###       ("_applC" ("_position" substs)
###         ("_applC" ("_position" map_upds)
###           ("_cargs" ("_position" Map.empty)
###             ("_cargs" ("_position" xs) ("_position" ds)))))
###       ("_position" es))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
consts
  lookup :: "'a list => ('a => bool) => 'a option"
consts
  lookup2 :: "'a list => 'b list => ('a => bool) => 'b option"
### theory "HOL-Library.Tree"
### 2.025s elapsed time, 6.178s cpu time, 1.135s GC time
Loading theory "Draft.Templates" (required by "Draft.FJAuxMoreTemplates" via "Draft.ExtrEqs")
Proofs for inductive predicate(s) "subtyping"
  Proving monotonicity ...
Proofs for inductive predicate(s) "subtypings"
  Proving monotonicity ...
Proofs for inductive predicate(s) "fields"
  Proving monotonicity ...
datatype template_term
=
     t_empty
   | template_app of template_term * template_term
   | template_hole of int
   | template_var of int
datatype sign
= equals | greater_equals | greater_than | less_equals | less_than
datatype template
=
     template_bimplication of template * template
   | template_dunno
   | template_equation of template_term * template_term
   | template_implication of template list * template
   | template_inequation of sign * template_term * template_term
   | template_negation of template
   | template_predicate of template_term
constructor t_empty: template_term
constructor template_app: template_term * template_term -> template_term
constructor template_hole: int -> template_term
constructor template_var: int -> template_term
constructor equals: sign
constructor greater_equals: sign
constructor greater_than: sign
constructor less_equals: sign
constructor less_than: sign
constructor template_bimplication: template * template -> template
constructor template_dunno: template
constructor template_equation: template_term * template_term -> template
constructor template_implication: template list * template -> template
constructor template_inequation:
   sign * template_term * template_term -> template
constructor template_negation: template -> template
constructor template_predicate: template_term -> template
val vfs = fn: term -> (indexname * typ) list * (string * typ) list
val indexOf = fn: ''a list -> ''a -> int -> int
val has_eq = fn: term -> bool
val term2template = fn:
   (indexname * typ) list -> (string * typ) list -> term -> template_term
val lemma2predicate = fn: term -> term -> template
val makeTemplatewithContext = fn: term -> term -> template
val lemma2template = fn: term -> template
val thm2template = fn: thm -> template
val tterm2string = fn: template_term -> string
val template2string = fn: template -> string
val t = "height ?t <= size ?t": thm
val th =
   Const ("HOL.Trueprop", "bool => prop") $
     (Const ("Orderings.ord_class.less_eq", "nat => nat => bool") $
       (Const ("Tree.height_class.height", "?'a tree => nat") $
         Var (("t", 0), "?'a tree")) $
       (Const ("Nat.size_class.size", "?'a tree => nat") $
         Var (("t", 0), "?'a tree"))):
   term
### theory "Draft.Templates"
### 0.076s elapsed time, 0.184s cpu time, 0.070s GC time
Loading theory "Draft.ExtrEqs" (required by "Draft.FJAuxMoreTemplates")
Proofs for inductive predicate(s) "mtype"
  Proving monotonicity ...
Proofs for inductive predicate(s) "mbody"
  Proving monotonicity ...
Proofs for inductive predicate(s) "typings", "typing"
  Proving monotonicity ...
Proofs for inductive predicate(s) "method_typing"
  Proving monotonicity ...
Proofs for inductive predicate(s) "method_typings"
  Proving monotonicity ...
Proofs for inductive predicate(s) "class_typing"
  Proving monotonicity ...
Proofs for inductive predicate(s) "ct_typing"
  Proving monotonicity ...
Proofs for inductive predicate(s) "reduction"
  Proving monotonicity ...
Proofs for inductive predicate(s) "reductions"
  Proving monotonicity ...
### theory "Draft.FJDefs"
### 2.797s elapsed time, 8.337s cpu time, 1.961s GC time
Loading theory "Draft.FJAux" (required by "Draft.FJAuxMoreTemplates")
### theory "Draft.FJAux"
### 0.148s elapsed time, 0.314s cpu time, 0.047s GC time
val eqpattern =
   Pattern
    (
       Const ("HOL.Trueprop", "bool => prop") $
         (Const ("HOL.eq", "?'a => ?'a => bool") $
           Var (("_dummy_", 1), "?'a") $ Var (("_dummy_", 2), "?'a"))
       ):
   term Find_Theorems.criterion
val badeqpattern = Pattern (Const ("Pure.eq", "?'a => ?'a => prop")):
   term Find_Theorems.criterion
val undefpattern =
   Pattern
    (
       Const ("HOL.Trueprop", "bool => prop") $
         (Const ("HOL.eq", "?'a => ?'a => bool") $
           Var (("_dummy_", 1), "?'a") $ Const ("HOL.undefined", "?'a"))
       ):
   term Find_Theorems.criterion
val thmpattern =
   Pattern
    (Const ("HOL.Trueprop", "bool => prop") $ Var (("_dummy_", 1), "bool")):
   term Find_Theorems.criterion
val badnames =
   ["*nitpick*", "*Nitpick*", "*full_exhaustive*", "*_def*", "Enum.finite*",
    "*Quickcheck*", "ATP*", "*Nunchaku*", "*Code*", "*BNF*", "*SMT*",
    "*.*.*"]:
   string list
val unwanted_names =
   [(false, Name "*nitpick*"), (false, Name "*Nitpick*"),
    (false, Name "*full_exhaustive*"), (false, Name "*_def*"),
    (false, Name "Enum.finite*"), (false, Name "*Quickcheck*"),
    (false, Name "ATP*"), (false, Name "*Nunchaku*"),
    (false, Name "*Code*"), (false, Name "*BNF*"), (false, Name "*SMT*"),
    (false, Name "*.*.*")]:
   (bool * term Find_Theorems.criterion) list
val has_vars = fn: term -> bool
val get_all_eqs = fn: string -> Proof.context -> (string * thm) list
val get_all_thms = fn: string -> Proof.context -> (string * thm) list
val get_noneq_thms = fn: string -> Proof.context -> (string * thm) list
val template_eqs = fn:
   string -> Proof.context -> (string * thm * template) list
val template_thms = fn:
   string -> Proof.context -> (string * thm * template) list
### theory "Draft.ExtrEqs"
### 0.787s elapsed time, 1.821s cpu time, 0.764s GC time
Loading theory "Draft.FJAuxMoreTemplates"
val templateLemmas =
   [("FJAux.subtypings_refl", "?CT \<turnstile>+ ?Cs <: ?Cs",
     template_predicate
      (
         template_app
          (template_app
            (template_app (template_hole 0, template_var 1),
             template_var 0),
           template_var 0)
         )),
    ("FJAux.subst_list1_eq_map_substs",
     "ALL \<sigma>. subst_list1 \<sigma> ?l = map (substs \<sigma>) ?l",
     template_predicate (template_app (template_hole 4, t_empty))),
    ("FJAux.subst_list2_eq_map_substs",
     "ALL \<sigma>. subst_list2 \<sigma> ?l = map (substs \<sigma>) ?l",
     template_predicate (template_app (template_hole 4, t_empty))),
    ("FJAux.lookup_true", "lookup ?l ?f = Some ?r ==> ?f ?r",
     template_implication
      ([template_equation
         (template_app
           (template_app (template_hole 1, template_var 2), template_var 1),
          template_app (template_hole 0, template_var 0))],
       template_predicate (template_app (template_var 1, template_var 0)))),
    ("FJAux.subtypings_length",
     "?CT \<turnstile>+ ?As <: ?Bs ==> length ?As = length ?Bs",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app (template_hole 2, template_var 2),
                template_var 1),
              template_var 0)
            )],
       template_equation
        (template_app (template_hole 0, template_var 1),
         template_app (template_hole 0, template_var 0)))),
    ("FJAux.ith_mem", "?i < length ?es ==> ?es ! ?i : set ?es",
     template_implication
      ([template_inequation
         (less_than, template_var 1,
          template_app (template_hole 3, template_var 0))],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 2,
               template_app
                (template_app (template_hole 1, template_var 0),
                 template_var 1)),
             template_app (template_hole 0, template_var 0))
           ))),
    ("FJAux.typings_lengths",
     "?CT;?\<Gamma> \<turnstile>+ ?es : ?Cs ==> length ?es = length ?Cs",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_app (template_hole 3, template_var 3),
                  template_var 2),
                template_var 1),
              template_var 0)
            )],
       template_equation
        (template_app (template_hole 1, template_var 1),
         template_app (template_hole 0, template_var 0)))),
    ("FJAux.lookup_split",
     "lookup ?l ?f = None | (EX h. lookup ?l ?f = Some h)",
     template_predicate
      (
         template_app
          (template_app
            (template_hole 5,
             template_app
              (template_app
                (template_hole 4,
                 template_app
                  (template_app (template_hole 3, template_var 1),
                   template_var 0)),
               template_hole 2)),
           template_app (template_hole 1, t_empty))
         )),
    ("FJAux.lookup_append",
     "lookup ?l ?f = Some ?r ==> lookup (?l @ ?l') ?f = Some ?r",
     template_implication
      ([template_equation
         (template_app
           (template_app (template_hole 2, template_var 3), template_var 2),
          template_app (template_hole 1, template_var 1))],
       template_equation
        (template_app
          (template_app
            (template_hole 2,
             template_app
              (template_app (template_hole 0, template_var 3),
               template_var 0)),
           template_var 2),
         template_app (template_hole 1, template_var 1)))),
    ("FJAux.subtypings_trans",
     "[| ?CT \<turnstile>+ ?Cs <: ?Ds; ?CT \<turnstile>+ ?Ds <: ?Es |]
      ==> ?CT \<turnstile>+ ?Cs <: ?Es",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app (template_hole 0, template_var 3),
                template_var 2),
              template_var 1)
            ),
        template_predicate
         (
            template_app
             (template_app
               (template_app (template_hole 0, template_var 3),
                template_var 1),
              template_var 0)
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_app (template_hole 0, template_var 3),
               template_var 2),
             template_var 0)
           ))),
    ("FJAux.mem_ith", "?ei : set ?es ==> EX el er. ?es = el @ ?ei # er",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 5, template_var 1),
              template_app (template_hole 4, template_var 0))
            )],
       template_predicate (template_app (template_hole 3, t_empty)))),
    ("FJAux.ith_subtyping",
     "?CT \<turnstile>+ (?Cs @ ?h # ?t) <: ?Ds ==>
      ?CT \<turnstile> ?h <: ?Ds ! length ?Cs",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app (template_hole 5, template_var 4),
                template_app
                 (template_app (template_hole 4, template_var 3),
                  template_app
                   (template_app (template_hole 3, template_var 2),
                    template_var 1))),
              template_var 0)
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_app (template_hole 2, template_var 4),
               template_var 2),
             template_app
              (template_app (template_hole 1, template_var 0),
               template_app (template_hole 0, template_var 3)))
           ))),
    ("FJAux.lookup_functional",
     "[| lookup ?l ?f = ?o1.0; lookup ?l ?f = ?o2.0 |] ==> ?o1.0 = ?o2.0",
     template_implication
      ([template_equation
         (template_app
           (template_app (template_hole 0, template_var 3), template_var 2),
          template_var 1),
        template_equation
         (template_app
           (template_app (template_hole 0, template_var 3), template_var 2),
          template_var 0)],
       template_equation (template_var 1, template_var 0))),
    ("FJAux.method_typings_lookup",
     "[| lookup ?M ?f = Some ?mDef; ?CT \<turnstile>+ ?M OK IN ?C |]
      ==> ?CT \<turnstile> ?mDef OK IN ?C",
     template_implication
      ([template_equation
         (template_app
           (template_app (template_hole 3, template_var 4), template_var 3),
          template_app (template_hole 2, template_var 2)),
        template_predicate
         (
            template_app
             (template_app
               (template_app (template_hole 1, template_var 1),
                template_var 4),
              template_var 0)
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_app (template_hole 0, template_var 1),
               template_var 2),
             template_var 0)
           ))),
    ("FJAux.ith_typing",
     "?CT;?\<Gamma> \<turnstile>+ (?es @ ?h # ?t) : ?Cs ==>
      ?CT;?\<Gamma> \<turnstile> ?h : ?Cs ! length ?es",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_app (template_hole 5, template_var 5),
                  template_var 4),
                template_app
                 (template_app (template_hole 4, template_var 3),
                  template_app
                   (template_app (template_hole 3, template_var 2),
                    template_var 1))),
              template_var 0)
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_app
                (template_app (template_hole 2, template_var 5),
                 template_var 4),
               template_var 2),
             template_app
              (template_app (template_hole 1, template_var 0),
               template_app (template_hole 0, template_var 3)))
           ))),
    ("FJAux.isubexpr_reduct",
     "[| ?d1.0 \<in> isubexprs(?e1.0);
         ?CT \<turnstile> ?d1.0 \<rightarrow> ?d2.0 |]
      ==> EX e2. ?CT \<turnstile> ?e1.0 \<rightarrow> e2",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_hole 4,
                template_app
                 (template_app (template_hole 3, template_var 3),
                  template_var 2)),
              template_hole 2)
            ),
        template_predicate
         (
            template_app
             (template_app
               (template_app (template_hole 1, template_var 1),
                template_var 3),
              template_var 0)
            )],
       template_predicate (template_app (template_hole 0, t_empty)))),
    ("FJAux.fields_functional",
     "[| fields(?CT,?C) = ?Cf; ?CT OK; fields(?CT,?C) = ?Cf' |]
      ==> ?Cf = ?Cf'",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app (template_hole 2, template_var 3),
                template_var 2),
              template_var 1)
            ),
        template_predicate (template_app (template_hole 1, template_var 3)),
        template_predicate
         (
            template_app
             (template_app
               (template_app (template_hole 2, template_var 3),
                template_var 2),
              template_var 0)
            )],
       template_equation (template_var 1, template_var 0))),
    ("FJAux.subtypings_index",
     "[| ?CT \<turnstile>+ ?Cs <: ?Ds; ?i < length ?Cs |]
      ==> ?CT \<turnstile> ?Cs ! ?i <: ?Ds ! ?i",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app (template_hole 4, template_var 3),
                template_var 2),
              template_var 1)
            ),
        template_inequation
         (less_than, template_var 0,
          template_app (template_hole 2, template_var 2))],
       template_predicate
        (
           template_app
            (template_app
              (template_app (template_hole 1, template_var 3),
               template_app
                (template_app (template_hole 0, template_var 2),
                 template_var 0)),
             template_app
              (template_app (template_hole 0, template_var 1),
               template_var 0))
           ))),
    ("FJAux.lookup_hd",
     "[| 0 < length ?l; ?f (?l ! 0) |] ==> lookup ?l ?f = Some (?l ! 0)",
     template_implication
      ([template_inequation
         (less_than, template_hole 5,
          template_app (template_hole 4, template_var 1)),
        template_predicate
         (
            template_app
             (template_var 0,
              template_app
               (template_app (template_hole 3, template_var 1),
                template_hole 5))
            )],
       template_equation
        (template_app
          (template_app (template_hole 1, template_var 1), template_var 0),
         template_app
          (template_hole 0,
           template_app
            (template_app (template_hole 3, template_var 1),
             template_hole 5))))),
    ("FJAux.mem_typings",
     "[| ?CT;?\<Gamma> \<turnstile>+ ?es : ?Cs; ?ei : set ?es |]
      ==> EX Ci. ?CT;?\<Gamma> \<turnstile> ?ei : Ci",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_app (template_hole 4, template_var 4),
                  template_var 3),
                template_var 2),
              template_var 1)
            ),
        template_predicate
         (
            template_app
             (template_app (template_hole 3, template_var 0),
              template_app (template_hole 2, template_var 2))
            )],
       template_predicate (template_app (template_hole 1, t_empty)))),
    ("FJAux.subexpr_reduct",
     "[| ?d1.0 \<in> subexprs(?e1.0);
         ?CT \<turnstile> ?d1.0 \<rightarrow> ?d2.0 |]
      ==> EX e2. ?CT \<turnstile> ?e1.0 \<rightarrow> e2",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_hole 5,
                template_app
                 (template_app (template_hole 4, template_var 3),
                  template_var 2)),
              template_app (template_hole 3, template_hole 2))
            ),
        template_predicate
         (
            template_app
             (template_app
               (template_app (template_hole 1, template_var 1),
                template_var 3),
              template_var 0)
            )],
       template_predicate (template_app (template_hole 0, t_empty)))),
    ("FJAux.typings_index",
     "[| ?CT;?\<Gamma> \<turnstile>+ ?es : ?Cs; ?i < length ?es |]
      ==> ?CT;?\<Gamma> \<turnstile> ?es ! ?i : ?Cs ! ?i",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_app (template_hole 5, template_var 4),
                  template_var 3),
                template_var 2),
              template_var 1)
            ),
        template_inequation
         (less_than, template_var 0,
          template_app (template_hole 3, template_var 2))],
       template_predicate
        (
           template_app
            (template_app
              (template_app
                (template_app (template_hole 2, template_var 4),
                 template_var 3),
               template_app
                (template_app (template_hole 1, template_var 2),
                 template_var 0)),
             template_app
              (template_app (template_hole 0, template_var 1),
               template_var 0))
           ))),
    ("FJAux.isubexpr_typing",
     "[| ?e1.0 \<in> isubexprs(?e0.0);
         ?CT;Map.empty \<turnstile> ?e0.0 : ?C |]
      ==> EX D. ?CT;Map.empty \<turnstile> ?e1.0 : D",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_hole 5,
                template_app
                 (template_app (template_hole 4, template_var 3),
                  template_var 2)),
              template_hole 3)
            ),
        template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_app (template_hole 2, template_var 1), t_empty),
                template_var 2),
              template_var 0)
            )],
       template_predicate (template_app (template_hole 0, t_empty)))),
    ("FJAux.mbody_functional",
     "[| mbody(?CT,?m,?C) = ?xs . ?e0.0; mbody(?CT,?m,?C) = ?ys . ?d0.0 |]
      ==> ?xs = ?ys & ?e0.0 = ?d0.0",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_app
                   (template_app (template_hole 3, template_var 6),
                    template_var 5),
                  template_var 4),
                template_var 3),
              template_var 2)
            ),
        template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_app
                   (template_app (template_hole 3, template_var 6),
                    template_var 5),
                  template_var 4),
                template_var 1),
              template_var 0)
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 2,
               template_app
                (template_app (template_hole 1, template_var 3),
                 template_var 1)),
             template_app
              (template_app (template_hole 0, template_var 2),
               template_var 0))
           ))),
    ("FJAux.mtype_functional",
     "[| mtype(?CT,?m,?C) = ?Cs \<rightarrow> ?C0.0;
         mtype(?CT,?m,?C) = ?Ds \<rightarrow> ?D0.0 |]
      ==> ?Ds = ?Cs & ?D0.0 = ?C0.0",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_app
                   (template_app (template_hole 3, template_var 6),
                    template_var 5),
                  template_var 4),
                template_var 3),
              template_var 2)
            ),
        template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_app
                   (template_app (template_hole 3, template_var 6),
                    template_var 5),
                  template_var 4),
                template_var 1),
              template_var 0)
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 2,
               template_app
                (template_app (template_hole 1, template_var 1),
                 template_var 3)),
             template_app
              (template_app (template_hole 0, template_var 0),
               template_var 2))
           ))),
    ("FJAux.subtyping_append",
     "[| ?CT \<turnstile>+ ?Cs <: ?Ds; ?CT \<turnstile> ?C <: ?D |]
      ==> ?CT \<turnstile>+ (?Cs @ [?C]) <: (?Ds @ [?D])",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app (template_hole 4, template_var 4),
                template_var 3),
              template_var 2)
            ),
        template_predicate
         (
            template_app
             (template_app
               (template_app (template_hole 3, template_var 4),
                template_var 1),
              template_var 0)
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_app (template_hole 4, template_var 4),
               template_app
                (template_app (template_hole 2, template_var 3),
                 template_app
                  (template_app (template_hole 1, template_var 1),
                   template_hole 0))),
             template_app
              (template_app (template_hole 2, template_var 2),
               template_app
                (template_app (template_hole 1, template_var 0),
                 template_hole 0)))
           ))),
    ("FJAux.subexpr_typing",
     "[| ?e1.0 \<in> subexprs(?e0.0);
         ?CT;Map.empty \<turnstile> ?e0.0 : ?C |]
      ==> EX D. ?CT;Map.empty \<turnstile> ?e1.0 : D",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_hole 6,
                template_app
                 (template_app (template_hole 5, template_var 3),
                  template_var 2)),
              template_app (template_hole 4, template_hole 3))
            ),
        template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_app (template_hole 2, template_var 1), t_empty),
                template_var 2),
              template_var 0)
            )],
       template_predicate (template_app (template_hole 0, t_empty)))),
    ("FJAux.not_subtypes",
     "[| ?CT \<turnstile> ?A <: ?C; ?CT \<turnstile> ?D \<not><: ?C;
         ?CT \<turnstile> ?C \<not><: ?D |]
      ==> ?CT \<turnstile> ?A \<not><: ?D",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app (template_hole 1, template_var 3),
                template_var 2),
              template_var 1)
            ),
        template_negation
         (
            template_predicate
             (
                template_app
                 (template_app
                   (template_app (template_hole 1, template_var 3),
                    template_var 0),
                  template_var 1)
                )
            ),
        template_negation
         (
            template_predicate
             (
                template_app
                 (template_app
                   (template_app (template_hole 1, template_var 3),
                    template_var 1),
                  template_var 0)
                )
            )],
       template_negation
        (
           template_predicate
            (
               template_app
                (template_app
                  (template_app (template_hole 1, template_var 3),
                   template_var 2),
                 template_var 0)
               )
           ))),
    ("FJAux.typings_append",
     "[| ?CT;?\<Gamma> \<turnstile>+ ?es : ?Cs;
         ?CT;?\<Gamma> \<turnstile> ?e : ?C |]
      ==> ?CT;?\<Gamma> \<turnstile>+ (?es @ [?e]) : (?Cs @ [?C])",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_app (template_hole 7, template_var 5),
                  template_var 4),
                template_var 3),
              template_var 2)
            ),
        template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_app (template_hole 6, template_var 5),
                  template_var 4),
                template_var 1),
              template_var 0)
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_app
                (template_app (template_hole 7, template_var 5),
                 template_var 4),
               template_app
                (template_app (template_hole 5, template_var 3),
                 template_app
                  (template_app (template_hole 4, template_var 1),
                   template_hole 3))),
             template_app
              (template_app (template_hole 2, template_var 2),
               template_app
                (template_app (template_hole 1, template_var 0),
                 template_hole 0)))
           ))),
    ("FJAux.not_subtypes_aux",
     "[| ?CT \<turnstile> ?C <: ?Da; ?C ~= ?Da; ?CT ?C = Some ?CDef;
         cSuper ?CDef = ?D |]
      ==> ?CT \<turnstile> ?D <: ?Da",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app (template_hole 5, template_var 4),
                template_var 3),
              template_var 2)
            ),
        template_negation
         (template_equation (template_var 3, template_var 2)),
        template_equation
         (template_app (template_var 4, template_var 3),
          template_app (template_hole 1, template_var 1)),
        template_equation
         (template_app (template_hole 0, template_var 1), template_var 0)],
       template_predicate
        (
           template_app
            (template_app
              (template_app (template_hole 5, template_var 4),
               template_var 0),
             template_var 2)
           ))),
    ("FJAux.map_shuffle",
     "length ?xs = length ?ys ==>
      [?xs [|->] ?ys, ?x |-> ?y] = [?xs @ [?x] [|->] ?ys @ [?y]]",
     template_implication
      ([template_equation
         (template_app (template_hole 12, template_var 3),
          template_app (template_hole 11, template_var 2))],
       template_equation
        (template_app
          (template_app
            (template_app
              (template_hole 9,
               template_app
                (template_app
                  (template_app (template_hole 8, t_empty), template_var 3),
                 template_var 2)),
             template_var 1),
           template_app (template_hole 6, template_var 0)),
         template_app
          (template_app
            (template_app (template_hole 8, t_empty),
             template_app
              (template_app (template_hole 5, template_var 3),
               template_app
                (template_app (template_hole 4, template_var 1),
                 template_hole 3))),
           template_app
            (template_app (template_hole 2, template_var 2),
             template_app
              (template_app (template_hole 1, template_var 0),
               template_hole 0)))))),
    ("FJAux.lookup_index",
     "lookup ?l1.0 ?f = Some ?e ==>
      EX i<length ?l1.0.
         ?e = ?l1.0 ! i &
         (length ?l1.0 = length ?l2.0 -->
          lookup2 ?l1.0 ?l2.0 ?f = Some (?l2.0 ! i))",
     template_implication
      ([template_equation
         (template_app
           (template_app (template_hole 14, template_var 3),
            template_var 2),
          template_app (template_hole 13, template_var 1))],
       template_predicate (template_app (template_hole 12, t_empty)))),
    ("FJAux.lookup2_index",
     "[| lookup2 ?l1.0 ?l2.0 ?f = Some ?e; length ?l1.0 = length ?l2.0 |]
      ==> EX i<length ?l2.0.
             ?e = ?l2.0 ! i & lookup ?l1.0 ?f = Some (?l1.0 ! i)",
     template_implication
      ([template_equation
         (template_app
           (template_app
             (template_app (template_hole 13, template_var 3),
              template_var 2),
            template_var 1),
          template_app (template_hole 12, template_var 0)),
        template_equation
         (template_app (template_hole 10, template_var 3),
          template_app (template_hole 9, template_var 2))],
       template_predicate (template_app (template_hole 8, t_empty)))),
    ("FJAux.typings_proj",
     "[| ?CT;?\<Gamma> \<turnstile>+ ?ds : ?As;
         ?CT \<turnstile>+ ?As <: ?Bs; length ?ds = length ?As;
         length ?ds = length ?Bs; ?i < length ?ds |]
      ==> ?CT \<turnstile> ?As ! ?i <: ?Bs ! ?i",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_app (template_hole 7, template_var 5),
                  template_var 4),
                template_var 3),
              template_var 2)
            ),
        template_predicate
         (
            template_app
             (template_app
               (template_app (template_hole 6, template_var 5),
                template_var 2),
              template_var 1)
            ),
        template_equation
         (template_app (template_hole 4, template_var 3),
          template_app (template_hole 3, template_var 2)),
        template_equation
         (template_app (template_hole 4, template_var 3),
          template_app (template_hole 3, template_var 1)),
        template_inequation
         (less_than, template_var 0,
          template_app (template_hole 4, template_var 3))],
       template_predicate
        (
           template_app
            (template_app
              (template_app (template_hole 1, template_var 5),
               template_app
                (template_app (template_hole 0, template_var 2),
                 template_var 0)),
             template_app
              (template_app (template_hole 0, template_var 1),
               template_var 0))
           ))),
    ("FJAux.typings_proj",
     "[| ?CT;?\<Gamma> \<turnstile>+ ?ds : ?As;
         ?CT \<turnstile>+ ?As <: ?Bs; length ?ds = length ?As;
         length ?ds = length ?Bs; ?i < length ?ds |]
      ==> ?CT;?\<Gamma> \<turnstile> ?ds ! ?i : ?As ! ?i",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_app (template_hole 8, template_var 5),
                  template_var 4),
                template_var 3),
              template_var 2)
            ),
        template_predicate
         (
            template_app
             (template_app
               (template_app (template_hole 7, template_var 5),
                template_var 2),
              template_var 1)
            ),
        template_equation
         (template_app (template_hole 5, template_var 3),
          template_app (template_hole 4, template_var 2)),
        template_equation
         (template_app (template_hole 5, template_var 3),
          template_app (template_hole 4, template_var 1)),
        template_inequation
         (less_than, template_var 0,
          template_app (template_hole 5, template_var 3))],
       template_predicate
        (
           template_app
            (template_app
              (template_app
                (template_app (template_hole 2, template_var 5),
                 template_var 4),
               template_app
                (template_app (template_hole 1, template_var 3),
                 template_var 0)),
             template_app
              (template_app (template_hole 0, template_var 2),
               template_var 0))
           ))),
    ("FJAux.ith_typing_sub",
     "[| ?CT;?\<Gamma> \<turnstile>+ (?es @ ?h # ?t) : ?Cs;
         ?CT;?\<Gamma> \<turnstile> ?h' : ?Ci';
         ?CT \<turnstile> ?Ci' <: ?Cs ! length ?es |]
      ==> EX Cs'.
             ?CT;?\<Gamma> \<turnstile>+ (?es @ ?h' # ?t) : Cs' &
             ?CT \<turnstile>+ Cs' <: ?Cs",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_app (template_hole 9, template_var 7),
                  template_var 6),
                template_app
                 (template_app (template_hole 8, template_var 5),
                  template_app
                   (template_app (template_hole 7, template_var 4),
                    template_var 3))),
              template_var 2)
            ),
        template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_app (template_hole 6, template_var 7),
                  template_var 6),
                template_var 1),
              template_var 0)
            ),
        template_predicate
         (
            template_app
             (template_app
               (template_app (template_hole 5, template_var 7),
                template_var 0),
              template_app
               (template_app (template_hole 4, template_var 2),
                template_app (template_hole 3, template_var 5)))
            )],
       template_predicate (template_app (template_hole 2, t_empty)))),
    ("FJAux.map_upds_index",
     "[| length ?xs = length ?As; [?xs [|->] ?As] ?x = Some ?Ai |]
      ==> EX i. ?As ! i = ?Ai &
                i < length ?As &
                (ALL Bs.
                    length Bs = length ?As -->
                    [?xs [|->] Bs] ?x = Some (Bs ! i))",
     template_implication
      ([template_equation
         (template_app (template_hole 18, template_var 3),
          template_app (template_hole 17, template_var 2)),
        template_equation
         (template_app
           (template_app
             (template_app
               (template_app (template_hole 15, t_empty), template_var 3),
              template_var 2),
            template_var 1),
          template_app (template_hole 13, template_var 0))],
       template_predicate (template_app (template_hole 12, t_empty))))]:
   (string * thm * template) list
### theory "Draft.FJAuxMoreTemplates"
### 0.408s elapsed time, 0.574s cpu time, 0.064s GC time
val it = (): unit
