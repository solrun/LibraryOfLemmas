Loading theory "Draft.FJDefs" (required by "Draft.FJDefsMoreTemplates")
Loading theory "HOL-Library.Function_Algebras" (required by "Draft.FJDefsMoreTemplates" via "Draft.ExtrEqs" via "HOL-Library.BigO")
Loading theory "HOL-Library.Nat_Bijection" (required by "Draft.FJDefsMoreTemplates" via "Draft.ExtrEqs" via "HOL-Library.Stream")
Loading theory "HOL-Library.Set_Algebras" (required by "Draft.FJDefsMoreTemplates" via "Draft.ExtrEqs" via "HOL-Library.BigO")
instantiation
  set :: (plus) plus
  plus_set == plus :: 'a set => 'a set => 'a set
instantiation
  fun :: (type, plus) plus
  plus_fun == plus :: ('a => 'b) => ('a => 'b) => 'a => 'b
instantiation
  set :: (times) times
  times_set == times :: 'a set => 'a set => 'a set
instantiation
  fun :: (type, zero) zero
  zero_fun == zero_class.zero :: 'a => 'b
instantiation
  set :: (zero) zero
  zero_set == zero_class.zero :: 'a set
instantiation
  fun :: (type, times) times
  times_fun == times :: ('a => 'b) => ('a => 'b) => 'a => 'b
instantiation
  set :: (one) one
  one_set == one_class.one :: 'a set
instantiation
  fun :: (type, one) one
  one_fun == one_class.one :: 'a => 'b
Found termination order: "(%p. size (snd p)) <*mlex*> {}"
### theory "HOL-Library.Function_Algebras"
### 0.134s elapsed time, 0.552s cpu time, 0.040s GC time
Loading theory "HOL-Library.Tree" (required by "Draft.FJDefsMoreTemplates" via "Draft.ExtrEqs" via "Draft.Templates")
### theory "HOL-Library.Set_Algebras"
### 0.204s elapsed time, 0.829s cpu time, 0.040s GC time
Loading theory "HOL-Library.BigO" (required by "Draft.FJDefsMoreTemplates" via "Draft.ExtrEqs")
Found termination order: "size_list size <*mlex*> {}"
### theory "HOL-Library.Nat_Bijection"
### 0.343s elapsed time, 1.372s cpu time, 0.134s GC time
Loading theory "HOL-Library.Stream" (required by "Draft.FJDefsMoreTemplates" via "Draft.ExtrEqs")
consts
  left :: "'a tree => 'a tree"
consts
  right :: "'a tree => 'a tree"
consts
  shift :: "'a list => 'a stream => 'a stream"
Proofs for coinductive predicate(s) "streamsp"
  Proving monotonicity ...
Found termination order: "size <*mlex*> {}"
consts
  snth :: "'a stream => nat => 'a"
Found termination order: "size <*mlex*> {}"
consts
  stake :: "nat => 'a stream => 'a list"
consts
  sdrop :: "nat => 'a stream => 'a stream"
consts
  sfilter :: "('a => bool) => 'a stream => 'a stream"
Found termination order: "size <*mlex*> {}"
consts
  cycle :: "'a list => 'a stream"
class height = type +
  fixes height :: "'a => nat"
instantiation
  tree :: (type) height
  height_tree == height :: 'a tree => nat
consts
  siterate :: "('a => 'a) => 'a => 'a stream"
consts
  flat :: "'a list stream => 'a stream"
Found termination order: "size <*mlex*> {}"
consts
  sinterleave :: "'a stream => 'a stream => 'a stream"
consts
  szip :: "'a stream => 'b stream => ('a * 'b) stream"
### theory "HOL-Library.BigO"
### 1.102s elapsed time, 4.183s cpu time, 0.868s GC time
Proofs for inductive predicate(s) "isubexprsp"
  Proving monotonicity ...
Found termination order: "size <*mlex*> {}"
consts
  smap2 :: "('a => 'b => 'c) => 'a stream => 'b stream => 'c stream"
### theory "HOL-Library.Stream"
### 1.027s elapsed time, 3.849s cpu time, 0.774s GC time
Found termination order: "size <*mlex*> {}"
Proofs for inductive predicate(s) "vals", "val"
  Proving monotonicity ...
Found termination order: "size <*mlex*> {}"
Found termination order: "size <*mlex*> {}"
Found termination order: "size <*mlex*> {}"
Found termination order: "size <*mlex*> {}"
Found termination order: "(%p. size (fst p)) <*mlex*> {}"
Found termination order: "size <*mlex*> {}"
Found termination order: "(%p. size (snd p)) <*mlex*> {}"
consts
  substs :: "(nat => exp option) => exp => exp"
  subst_list1 :: "(nat => exp option) => exp list => exp list"
  subst_list2 :: "(nat => exp option) => exp list => exp list"
### Ambiguous input (line 145 of "$AFP/FeatherweightJava/FJDefs.thy") produces 2 parse trees:
### ("\<^const>Pure.eq"
###   ("\<^fixed>substs_syn" ("_position" ds) ("_position" xs) ("_position" e))
###   ("_applC" ("_position" substs)
###     ("_cargs"
###       ("_applC" ("_position" map_upds)
###         ("_cargs" ("_position" Map.empty)
###           ("_cargs" ("_position" xs) ("_position" ds))))
###       ("_position" e))))
### ("\<^const>Pure.eq"
###   ("_applC"
###     ("\<^const>Fields.inverse_class.inverse_divide" ("_position" ds)
###       ("_position" xs))
###     ("_position" e))
###   ("_applC" ("_position" substs)
###     ("_cargs"
###       ("_applC" ("_position" map_upds)
###         ("_cargs" ("_position" Map.empty)
###           ("_cargs" ("_position" xs) ("_position" ds))))
###       ("_position" e))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 150 of "$AFP/FeatherweightJava/FJDefs.thy") produces 2 parse trees:
### ("\<^const>Pure.eq"
###   ("\<^fixed>subst_list_syn" ("_position" ds) ("_position" xs)
###     ("_position" es))
###   ("_applC" ("_position" map)
###     ("_cargs"
###       ("_applC" ("_position" substs)
###         ("_applC" ("_position" map_upds)
###           ("_cargs" ("_position" Map.empty)
###             ("_cargs" ("_position" xs) ("_position" ds)))))
###       ("_position" es))))
### ("\<^const>Pure.eq"
###   ("_applC"
###     ("_list"
###       ("\<^const>Fields.inverse_class.inverse_divide" ("_position" ds)
###         ("_position" xs)))
###     ("_position" es))
###   ("_applC" ("_position" map)
###     ("_cargs"
###       ("_applC" ("_position" substs)
###         ("_applC" ("_position" map_upds)
###           ("_cargs" ("_position" Map.empty)
###             ("_cargs" ("_position" xs) ("_position" ds)))))
###       ("_position" es))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
consts
  lookup :: "'a list => ('a => bool) => 'a option"
consts
  lookup2 :: "'a list => 'b list => ('a => bool) => 'b option"
Found termination order: "size <*mlex*> {}"
Proofs for inductive predicate(s) "subtyping"
  Proving monotonicity ...
Proofs for inductive predicate(s) "subtypings"
  Proving monotonicity ...
Proofs for inductive predicate(s) "fields"
  Proving monotonicity ...
Proofs for inductive predicate(s) "mtype"
  Proving monotonicity ...
Proofs for inductive predicate(s) "mbody"
  Proving monotonicity ...
Proofs for inductive predicate(s) "typings", "typing"
### theory "HOL-Library.Tree"
### 2.083s elapsed time, 6.482s cpu time, 1.113s GC time
Loading theory "Draft.Templates" (required by "Draft.FJDefsMoreTemplates" via "Draft.ExtrEqs")
  Proving monotonicity ...
datatype template_term
=
     t_empty
   | template_app of template_term * template_term
   | template_hole of int
   | template_var of int
datatype sign
= equals | greater_equals | greater_than | less_equals | less_than
datatype template
=
     template_bimplication of template * template
   | template_dunno
   | template_equation of template_term * template_term
   | template_implication of template list * template
   | template_inequation of sign * template_term * template_term
   | template_negation of template
   | template_predicate of template_term
constructor t_empty: template_term
constructor template_app: template_term * template_term -> template_term
constructor template_hole: int -> template_term
constructor template_var: int -> template_term
constructor equals: sign
constructor greater_equals: sign
constructor greater_than: sign
constructor less_equals: sign
constructor less_than: sign
constructor template_bimplication: template * template -> template
constructor template_dunno: template
constructor template_equation: template_term * template_term -> template
constructor template_implication: template list * template -> template
constructor template_inequation:
   sign * template_term * template_term -> template
constructor template_negation: template -> template
constructor template_predicate: template_term -> template
val vfs = fn: term -> (indexname * typ) list * (string * typ) list
val indexOf = fn: ''a list -> ''a -> int -> int
val has_eq = fn: term -> bool
val term2template = fn:
   (indexname * typ) list -> (string * typ) list -> term -> template_term
val lemma2predicate = fn: term -> term -> template
val makeTemplatewithContext = fn: term -> term -> template
val lemma2template = fn: term -> template
val thm2template = fn: thm -> template
val tterm2string = fn: template_term -> string
val template2string = fn: template -> string
val t = "height ?t <= size ?t": thm
val th =
   Const ("HOL.Trueprop", "bool => prop") $
     (Const ("Orderings.ord_class.less_eq", "nat => nat => bool") $
       (Const ("Tree.height_class.height", "?'a tree => nat") $
         Var (("t", 0), "?'a tree")) $
       (Const ("Nat.size_class.size", "?'a tree => nat") $
         Var (("t", 0), "?'a tree"))):
   term
### theory "Draft.Templates"
### 0.055s elapsed time, 0.107s cpu time, 0.000s GC time
Loading theory "Draft.ExtrEqs" (required by "Draft.FJDefsMoreTemplates")
Proofs for inductive predicate(s) "method_typing"
  Proving monotonicity ...
Proofs for inductive predicate(s) "method_typings"
  Proving monotonicity ...
Proofs for inductive predicate(s) "class_typing"
  Proving monotonicity ...
Proofs for inductive predicate(s) "ct_typing"
  Proving monotonicity ...
Proofs for inductive predicate(s) "reduction"
  Proving monotonicity ...
Proofs for inductive predicate(s) "reductions"
  Proving monotonicity ...
### theory "Draft.FJDefs"
### 2.459s elapsed time, 7.540s cpu time, 1.201s GC time
val eqpattern =
   Pattern
    (
       Const ("HOL.Trueprop", "bool => prop") $
         (Const ("HOL.eq", "?'a => ?'a => bool") $
           Var (("_dummy_", 1), "?'a") $ Var (("_dummy_", 2), "?'a"))
       ):
   term Find_Theorems.criterion
val badeqpattern = Pattern (Const ("Pure.eq", "?'a => ?'a => prop")):
   term Find_Theorems.criterion
val undefpattern =
   Pattern
    (
       Const ("HOL.Trueprop", "bool => prop") $
         (Const ("HOL.eq", "?'a => ?'a => bool") $
           Var (("_dummy_", 1), "?'a") $ Const ("HOL.undefined", "?'a"))
       ):
   term Find_Theorems.criterion
val thmpattern =
   Pattern
    (Const ("HOL.Trueprop", "bool => prop") $ Var (("_dummy_", 1), "bool")):
   term Find_Theorems.criterion
val badnames =
   ["*nitpick*", "*Nitpick*", "*full_exhaustive*", "*_def*", "Enum.finite*",
    "*Quickcheck*", "ATP*", "*Nunchaku*", "*Code*", "*BNF*", "*SMT*",
    "*.*.*"]:
   string list
val unwanted_names =
   [(false, Name "*nitpick*"), (false, Name "*Nitpick*"),
    (false, Name "*full_exhaustive*"), (false, Name "*_def*"),
    (false, Name "Enum.finite*"), (false, Name "*Quickcheck*"),
    (false, Name "ATP*"), (false, Name "*Nunchaku*"),
    (false, Name "*Code*"), (false, Name "*BNF*"), (false, Name "*SMT*"),
    (false, Name "*.*.*")]:
   (bool * term Find_Theorems.criterion) list
val has_vars = fn: term -> bool
val get_all_eqs = fn: string -> Proof.context -> (string * thm) list
val get_all_thms = fn: string -> Proof.context -> (string * thm) list
val get_noneq_thms = fn: string -> Proof.context -> (string * thm) list
val template_eqs = fn:
   string -> Proof.context -> (string * thm * template) list
val template_thms = fn:
   string -> Proof.context -> (string * thm * template) list
### theory "Draft.ExtrEqs"
### 0.509s elapsed time, 0.744s cpu time, 0.047s GC time
Loading theory "Draft.FJDefsMoreTemplates"
val templateLemmas =
   [("FJDefs.typing_induct",
     "[| ?CT;?\<Gamma> \<turnstile> ?e : ?C;
         !!C CT \<Gamma> x.
            \<Gamma> x = Some C ==> ?P CT \<Gamma> (Var x) C;
         !!C0 CT Cf Ci \<Gamma> e0 fDef fi.
            [| CT;\<Gamma> \<turnstile> e0 : C0; ?P CT \<Gamma> e0 C0;
               fields(CT,C0) = Cf;
               lookup Cf (%fd. vdName fd = fi) = Some fDef;
               vdType fDef = Ci |]
            ==> ?P CT \<Gamma> (FieldProj e0 fi) Ci;
         !!C C0 CT Cs Ds \<Gamma> e0 es m.
            [| CT;\<Gamma> \<turnstile> e0 : C0; ?P CT \<Gamma> e0 C0;
               mtype(CT,m,C0) = Ds \<rightarrow> C;
               CT;\<Gamma> \<turnstile>+ es : Cs;
               !!i. i < length es ==> ?P CT \<Gamma> (es ! i) (Cs ! i);
               CT \<turnstile>+ Cs <: Ds; length es = length Ds |]
            ==> ?P CT \<Gamma> (MethodInvk e0 m es) C;
         !!C CT Cs Df Ds \<Gamma> es.
            [| fields(CT,C) = Df; length es = length Df;
               varDefs_types Df = Ds; CT;\<Gamma> \<turnstile>+ es : Cs;
               !!i. i < length es ==> ?P CT \<Gamma> (es ! i) (Cs ! i);
               CT \<turnstile>+ Cs <: Ds |]
            ==> ?P CT \<Gamma> (New C es) C;
         !!C CT D \<Gamma> e0.
            [| CT;\<Gamma> \<turnstile> e0 : D; ?P CT \<Gamma> e0 D;
               CT \<turnstile> D <: C |]
            ==> ?P CT \<Gamma> (Cast C e0) C;
         !!C CT D \<Gamma> e0.
            [| CT;\<Gamma> \<turnstile> e0 : D; ?P CT \<Gamma> e0 D;
               CT \<turnstile> C <: D; C ~= D |]
            ==> ?P CT \<Gamma> (Cast C e0) C;
         !!C CT D \<Gamma> e0.
            [| CT;\<Gamma> \<turnstile> e0 : D; ?P CT \<Gamma> e0 D;
               CT \<turnstile> C \<not><: D; CT \<turnstile> D \<not><: C |]
            ==> ?P CT \<Gamma> (Cast C e0) C |]
      ==> ?P ?CT ?\<Gamma> ?e ?C",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_app (template_hole 35, template_var 4),
                  template_var 3),
                template_var 2),
              template_var 1)
            ),
        template_predicate (template_app (template_hole 34, t_empty)),
        template_predicate (template_app (template_hole 34, t_empty)),
        template_predicate (template_app (template_hole 34, t_empty)),
        template_predicate (template_app (template_hole 34, t_empty)),
        template_predicate (template_app (template_hole 34, t_empty)),
        template_predicate (template_app (template_hole 34, t_empty)),
        template_predicate (template_app (template_hole 34, t_empty))],
       template_predicate
        (
           template_app
            (template_app
              (template_app
                (template_app (template_var 0, template_var 4),
                 template_var 3),
               template_var 2),
             template_var 1)
           )))]:
   (string * thm * template) list
### theory "Draft.FJDefsMoreTemplates"
### 0.361s elapsed time, 0.508s cpu time, 0.049s GC time
val it = (): unit
