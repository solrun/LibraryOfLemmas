Loading theory "Draft.FJDefs" (required by "Draft.ExecuteMoreTemplates" via "Draft.Execute" via "Draft.FJSound" via "Draft.FJAux")
Loading theory "HOL-Library.Function_Algebras" (required by "Draft.ExecuteMoreTemplates" via "Draft.ExtrEqs" via "HOL-Library.BigO")
Loading theory "HOL-Library.Nat_Bijection" (required by "Draft.ExecuteMoreTemplates" via "Draft.ExtrEqs" via "HOL-Library.Stream")
Loading theory "HOL-Library.Set_Algebras" (required by "Draft.ExecuteMoreTemplates" via "Draft.ExtrEqs" via "HOL-Library.BigO")
instantiation
  fun :: (type, plus) plus
  plus_fun == plus :: ('a => 'b) => ('a => 'b) => 'a => 'b
instantiation
  set :: (plus) plus
  plus_set == plus :: 'a set => 'a set => 'a set
instantiation
  set :: (times) times
  times_set == times :: 'a set => 'a set => 'a set
instantiation
  fun :: (type, zero) zero
  zero_fun == zero_class.zero :: 'a => 'b
instantiation
  fun :: (type, times) times
  times_fun == times :: ('a => 'b) => ('a => 'b) => 'a => 'b
instantiation
  set :: (zero) zero
  zero_set == zero_class.zero :: 'a set
instantiation
  set :: (one) one
  one_set == one_class.one :: 'a set
instantiation
  fun :: (type, one) one
  one_fun == one_class.one :: 'a => 'b
Found termination order: "(%p. size (snd p)) <*mlex*> {}"
### theory "HOL-Library.Function_Algebras"
### 0.128s elapsed time, 0.533s cpu time, 0.046s GC time
Loading theory "HOL-Library.Tree" (required by "Draft.ExecuteMoreTemplates" via "Draft.ExtrEqs" via "Draft.Templates")
Found termination order: "size_list size <*mlex*> {}"
### theory "HOL-Library.Set_Algebras"
### 0.240s elapsed time, 0.981s cpu time, 0.046s GC time
Loading theory "HOL-Library.BigO" (required by "Draft.ExecuteMoreTemplates" via "Draft.ExtrEqs")
### theory "HOL-Library.Nat_Bijection"
### 0.322s elapsed time, 1.292s cpu time, 0.120s GC time
Loading theory "HOL-Library.Stream" (required by "Draft.ExecuteMoreTemplates" via "Draft.ExtrEqs")
consts
  left :: "'a tree => 'a tree"
consts
  right :: "'a tree => 'a tree"
consts
  shift :: "'a list => 'a stream => 'a stream"
Found termination order: "size <*mlex*> {}"
Proofs for coinductive predicate(s) "streamsp"
  Proving monotonicity ...
Found termination order: "size <*mlex*> {}"
consts
  snth :: "'a stream => nat => 'a"
consts
  stake :: "nat => 'a stream => 'a list"
consts
  sdrop :: "nat => 'a stream => 'a stream"
Found termination order: "size <*mlex*> {}"
class height = type +
  fixes height :: "'a => nat"
instantiation
  tree :: (type) height
  height_tree == height :: 'a tree => nat
consts
  sfilter :: "('a => bool) => 'a stream => 'a stream"
consts
  cycle :: "'a list => 'a stream"
Found termination order: "size <*mlex*> {}"
consts
  siterate :: "('a => 'a) => 'a => 'a stream"
consts
  flat :: "'a list stream => 'a stream"
Found termination order: "size <*mlex*> {}"
### theory "HOL-Library.BigO"
### 0.992s elapsed time, 3.757s cpu time, 0.839s GC time
consts
  sinterleave :: "'a stream => 'a stream => 'a stream"
consts
  szip :: "'a stream => 'b stream => ('a * 'b) stream"
Found termination order: "size <*mlex*> {}"
consts
  smap2 :: "('a => 'b => 'c) => 'a stream => 'b stream => 'c stream"
### theory "HOL-Library.Stream"
### 1.019s elapsed time, 3.779s cpu time, 0.765s GC time
Found termination order: "size <*mlex*> {}"
Proofs for inductive predicate(s) "isubexprsp"
  Proving monotonicity ...
Found termination order: "size <*mlex*> {}"
Proofs for inductive predicate(s) "vals", "val"
  Proving monotonicity ...
Found termination order: "size <*mlex*> {}"
Found termination order: "size <*mlex*> {}"
Found termination order: "(%p. size (fst p)) <*mlex*> {}"
Found termination order: "size <*mlex*> {}"
Found termination order: "(%p. size (snd p)) <*mlex*> {}"
Found termination order: "size <*mlex*> {}"
consts
  substs :: "(nat => exp option) => exp => exp"
  subst_list1 :: "(nat => exp option) => exp list => exp list"
  subst_list2 :: "(nat => exp option) => exp list => exp list"
### Ambiguous input (line 145 of "$AFP/FeatherweightJava/FJDefs.thy") produces 2 parse trees:
### ("\<^const>Pure.eq"
###   ("\<^fixed>substs_syn" ("_position" ds) ("_position" xs) ("_position" e))
###   ("_applC" ("_position" substs)
###     ("_cargs"
###       ("_applC" ("_position" map_upds)
###         ("_cargs" ("_position" Map.empty)
###           ("_cargs" ("_position" xs) ("_position" ds))))
###       ("_position" e))))
### ("\<^const>Pure.eq"
###   ("_applC"
###     ("\<^const>Fields.inverse_class.inverse_divide" ("_position" ds)
###       ("_position" xs))
###     ("_position" e))
###   ("_applC" ("_position" substs)
###     ("_cargs"
###       ("_applC" ("_position" map_upds)
###         ("_cargs" ("_position" Map.empty)
###           ("_cargs" ("_position" xs) ("_position" ds))))
###       ("_position" e))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 150 of "$AFP/FeatherweightJava/FJDefs.thy") produces 2 parse trees:
### ("\<^const>Pure.eq"
###   ("\<^fixed>subst_list_syn" ("_position" ds) ("_position" xs)
###     ("_position" es))
###   ("_applC" ("_position" map)
###     ("_cargs"
###       ("_applC" ("_position" substs)
###         ("_applC" ("_position" map_upds)
###           ("_cargs" ("_position" Map.empty)
###             ("_cargs" ("_position" xs) ("_position" ds)))))
###       ("_position" es))))
### ("\<^const>Pure.eq"
###   ("_applC"
###     ("_list"
###       ("\<^const>Fields.inverse_class.inverse_divide" ("_position" ds)
###         ("_position" xs)))
###     ("_position" es))
###   ("_applC" ("_position" map)
###     ("_cargs"
###       ("_applC" ("_position" substs)
###         ("_applC" ("_position" map_upds)
###           ("_cargs" ("_position" Map.empty)
###             ("_cargs" ("_position" xs) ("_position" ds)))))
###       ("_position" es))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
consts
  lookup :: "'a list => ('a => bool) => 'a option"
consts
  lookup2 :: "'a list => 'b list => ('a => bool) => 'b option"
Proofs for inductive predicate(s) "subtyping"
  Proving monotonicity ...
Proofs for inductive predicate(s) "subtypings"
### theory "HOL-Library.Tree"
### 1.999s elapsed time, 6.221s cpu time, 1.033s GC time
Loading theory "Draft.Templates" (required by "Draft.ExecuteMoreTemplates" via "Draft.ExtrEqs")
  Proving monotonicity ...
Proofs for inductive predicate(s) "fields"
  Proving monotonicity ...
Proofs for inductive predicate(s) "mtype"
  Proving monotonicity ...
datatype template_term
=
     t_empty
   | template_app of template_term * template_term
   | template_hole of int
   | template_var of int
datatype sign
= equals | greater_equals | greater_than | less_equals | less_than
datatype template
=
     template_bimplication of template * template
   | template_dunno
   | template_equation of template_term * template_term
   | template_implication of template list * template
   | template_inequation of sign * template_term * template_term
   | template_negation of template
   | template_predicate of template_term
constructor t_empty: template_term
constructor template_app: template_term * template_term -> template_term
constructor template_hole: int -> template_term
constructor template_var: int -> template_term
constructor equals: sign
constructor greater_equals: sign
constructor greater_than: sign
constructor less_equals: sign
constructor less_than: sign
constructor template_bimplication: template * template -> template
constructor template_dunno: template
constructor template_equation: template_term * template_term -> template
constructor template_implication: template list * template -> template
constructor template_inequation:
   sign * template_term * template_term -> template
constructor template_negation: template -> template
constructor template_predicate: template_term -> template
val vfs = fn: term -> (indexname * typ) list * (string * typ) list
val indexOf = fn: ''a list -> ''a -> int -> int
val has_eq = fn: term -> bool
val term2template = fn:
   (indexname * typ) list -> (string * typ) list -> term -> template_term
val lemma2predicate = fn: term -> term -> template
val makeTemplatewithContext = fn: term -> term -> template
val lemma2template = fn: term -> template
val thm2template = fn: thm -> template
val tterm2string = fn: template_term -> string
val template2string = fn: template -> string
val t = "height ?t <= size ?t": thm
val th =
   Const ("HOL.Trueprop", "bool => prop") $
     (Const ("Orderings.ord_class.less_eq", "nat => nat => bool") $
       (Const ("Tree.height_class.height", "?'a tree => nat") $
         Var (("t", 0), "?'a tree")) $
       (Const ("Nat.size_class.size", "?'a tree => nat") $
         Var (("t", 0), "?'a tree"))):
   term
### theory "Draft.Templates"
### 0.074s elapsed time, 0.173s cpu time, 0.055s GC time
Loading theory "Draft.ExtrEqs" (required by "Draft.ExecuteMoreTemplates")
Proofs for inductive predicate(s) "mbody"
  Proving monotonicity ...
Proofs for inductive predicate(s) "typings", "typing"
  Proving monotonicity ...
Proofs for inductive predicate(s) "method_typing"
  Proving monotonicity ...
Proofs for inductive predicate(s) "method_typings"
  Proving monotonicity ...
Proofs for inductive predicate(s) "class_typing"
  Proving monotonicity ...
Proofs for inductive predicate(s) "ct_typing"
  Proving monotonicity ...
Proofs for inductive predicate(s) "reduction"
  Proving monotonicity ...
Proofs for inductive predicate(s) "reductions"
  Proving monotonicity ...
### theory "Draft.FJDefs"
### 2.501s elapsed time, 7.544s cpu time, 1.184s GC time
Loading theory "Draft.FJAux" (required by "Draft.ExecuteMoreTemplates" via "Draft.Execute" via "Draft.FJSound")
### theory "Draft.FJAux"
### 0.119s elapsed time, 0.244s cpu time, 0.000s GC time
Loading theory "Draft.FJSound" (required by "Draft.ExecuteMoreTemplates" via "Draft.Execute")
### Ambiguous input (line 24 of "$AFP/FeatherweightJava/FJSound.thy") produces 3 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.Ex_binder" ("_idts" ("_position" xs) ("_position" e))
###     ("\<^const>HOL.conj"
###       ("\<^const>FJDefs.mbody" ("_position" CT) ("_position" m)
###         ("_position" C) ("_position" xs) ("_position" e))
###       ("\<^const>HOL.eq" ("_applC" ("_position" length) ("_position" xs))
###         ("_applC" ("_position" length) ("_position" Cs))))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.Ex_binder" ("_idts" ("_position" xs) ("_position" e))
###     ("\<^const>FJDefs.mbody" ("_position" CT) ("_position" m)
###       ("_position" C) ("_position" xs)
###       ("\<^const>HOL.conj" ("_position" e)
###         ("\<^const>HOL.eq" ("_applC" ("_position" length) ("_position" xs))
###           ("_applC" ("_position" length) ("_position" Cs)))))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.Ex_binder" ("_idts" ("_position" xs) ("_position" e))
###     ("\<^const>HOL.eq"
###       ("\<^const>FJDefs.mbody" ("_position" CT) ("_position" m)
###         ("_position" C) ("_position" xs)
###         ("\<^const>HOL.conj" ("_position" e)
###           ("_applC" ("_position" length) ("_position" xs))))
###       ("_applC" ("_position" length) ("_position" Cs)))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 122 of "$AFP/FeatherweightJava/FJSound.thy") produces 2 parse trees:
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>FJDefs.typings" ("_position" CT) ("_position" \<Gamma>)
###       ("_position" es) ("_position" Ds)))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>HOL.Ex_binder" ("_position" Cs)
###       ("\<^const>HOL.conj"
###         ("\<^const>FJDefs.typings" ("_position" CT) ("_position" \<Gamma>1)
###           ("\<^const>FJDefs.subst_list_syn" ("_position" ds)
###             ("_position" xs) ("_position" es))
###           ("_position" Cs))
###         ("\<^const>FJDefs.subtypings" ("_position" CT) ("_position" Cs)
###           ("_position" Ds))))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>FJDefs.typings" ("_position" CT) ("_position" \<Gamma>)
###       ("_position" es) ("_position" Ds)))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>HOL.Ex_binder" ("_position" Cs)
###       ("\<^const>HOL.conj"
###         ("\<^const>FJDefs.typings" ("_position" CT) ("_position" \<Gamma>1)
###           ("_applC"
###             ("_list"
###               ("\<^const>Fields.inverse_class.inverse_divide"
###                 ("_position" ds) ("_position" xs)))
###             ("_position" es))
###           ("_position" Cs))
###         ("\<^const>FJDefs.subtypings" ("_position" CT) ("_position" Cs)
###           ("_position" Ds))))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 123 of "$AFP/FeatherweightJava/FJSound.thy") produces 2 parse trees:
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>FJDefs.typing" ("_position" CT) ("_position" \<Gamma>)
###       ("_position" e) ("_position" D)))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>HOL.Ex_binder" ("_position" C)
###       ("\<^const>HOL.conj"
###         ("\<^const>FJDefs.typing" ("_position" CT) ("_position" \<Gamma>1)
###           ("_applC"
###             ("\<^const>Fields.inverse_class.inverse_divide" ("_position" ds)
###               ("_position" xs))
###             ("_position" e))
###           ("_position" C))
###         ("\<^const>FJDefs.subtyping" ("_position" CT) ("_position" C)
###           ("_position" D))))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>FJDefs.typing" ("_position" CT) ("_position" \<Gamma>)
###       ("_position" e) ("_position" D)))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>HOL.Ex_binder" ("_position" C)
###       ("\<^const>HOL.conj"
###         ("\<^const>FJDefs.typing" ("_position" CT) ("_position" \<Gamma>1)
###           ("\<^const>FJDefs.substs_syn" ("_position" ds) ("_position" xs)
###             ("_position" e))
###           ("_position" C))
###         ("\<^const>FJDefs.subtyping" ("_position" CT) ("_position" C)
###           ("_position" D))))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 615 of "$AFP/FeatherweightJava/FJSound.thy") produces 3 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.Ex_binder" ("_idts" ("_position" xs) ("_position" e0))
###     ("\<^const>HOL.conj"
###       ("\<^const>FJDefs.mbody" ("_position" CT) ("_position" m)
###         ("_position" C0) ("_position" xs) ("_position" e0))
###       ("\<^const>HOL.eq" ("_applC" ("_position" length) ("_position" xs))
###         ("_applC" ("_position" length) ("_position" ds))))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.Ex_binder" ("_idts" ("_position" xs) ("_position" e0))
###     ("\<^const>FJDefs.mbody" ("_position" CT) ("_position" m)
###       ("_position" C0) ("_position" xs)
###       ("\<^const>HOL.conj" ("_position" e0)
###         ("\<^const>HOL.eq" ("_applC" ("_position" length) ("_position" xs))
###           ("_applC" ("_position" length) ("_position" ds)))))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.Ex_binder" ("_idts" ("_position" xs) ("_position" e0))
###     ("\<^const>HOL.eq"
###       ("\<^const>FJDefs.mbody" ("_position" CT) ("_position" m)
###         ("_position" C0) ("_position" xs)
###         ("\<^const>HOL.conj" ("_position" e0)
###           ("_applC" ("_position" length) ("_position" xs))))
###       ("_applC" ("_position" length) ("_position" ds)))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
val eqpattern =
   Pattern
    (
       Const ("HOL.Trueprop", "bool => prop") $
         (Const ("HOL.eq", "?'a => ?'a => bool") $
           Var (("_dummy_", 1), "?'a") $ Var (("_dummy_", 2), "?'a"))
       ):
   term Find_Theorems.criterion
val badeqpattern = Pattern (Const ("Pure.eq", "?'a => ?'a => prop")):
   term Find_Theorems.criterion
val undefpattern =
   Pattern
    (
       Const ("HOL.Trueprop", "bool => prop") $
         (Const ("HOL.eq", "?'a => ?'a => bool") $
           Var (("_dummy_", 1), "?'a") $ Const ("HOL.undefined", "?'a"))
       ):
   term Find_Theorems.criterion
val thmpattern =
   Pattern
    (Const ("HOL.Trueprop", "bool => prop") $ Var (("_dummy_", 1), "bool")):
   term Find_Theorems.criterion
val badnames =
   ["*nitpick*", "*Nitpick*", "*full_exhaustive*", "*_def*", "Enum.finite*",
    "*Quickcheck*", "ATP*", "*Nunchaku*", "*Code*", "*BNF*", "*SMT*",
    "*.*.*"]:
   string list
val unwanted_names =
   [(false, Name "*nitpick*"), (false, Name "*Nitpick*"),
    (false, Name "*full_exhaustive*"), (false, Name "*_def*"),
    (false, Name "Enum.finite*"), (false, Name "*Quickcheck*"),
    (false, Name "ATP*"), (false, Name "*Nunchaku*"),
    (false, Name "*Code*"), (false, Name "*BNF*"), (false, Name "*SMT*"),
    (false, Name "*.*.*")]:
   (bool * term Find_Theorems.criterion) list
val has_vars = fn: term -> bool
val get_all_eqs = fn: string -> Proof.context -> (string * thm) list
val get_all_thms = fn: string -> Proof.context -> (string * thm) list
val get_noneq_thms = fn: string -> Proof.context -> (string * thm) list
val template_eqs = fn:
   string -> Proof.context -> (string * thm * template) list
val template_thms = fn:
   string -> Proof.context -> (string * thm * template) list
### theory "Draft.ExtrEqs"
### 0.581s elapsed time, 1.236s cpu time, 0.143s GC time
### theory "Draft.FJSound"
### 0.153s elapsed time, 0.349s cpu time, 0.093s GC time
Loading theory "Draft.Execute" (required by "Draft.ExecuteMoreTemplates")
subtyping_i_i_i ?x ?xa ?xb =
sup (Predicate.bind (Predicate.single (?x, ?xa, ?xb))
      (%x. case x of
           (CT_, C_, Ca_) => if C_ = Ca_ then Predicate.single () else bot))
 (sup (Predicate.bind (Predicate.single (?x, ?xa, ?xb))
        (%x. case x of
             (CT_, C_, E_) =>
               Predicate.bind (supertypes_of CT_ C_)
                (%x. Predicate.bind (subtyping_i_i_i CT_ x E_)
                      (%x. case x of () => Predicate.single ()))))
   (Predicate.bind (Predicate.single (?x, ?xa, ?xb))
     (%x. case x of
          (CT_, C_, D_) =>
            Predicate.bind (eq_i_o (CT_ C_))
             (%x. case x of None => bot
                  | Some CDef_ =>
                      Predicate.bind (eq_i_i (cSuper CDef_) D_)
                       (%x. case x of () => Predicate.single ())))))
supertypes_of ?x ?xa =
sup (Predicate.bind (Predicate.single (?x, ?xa))
      (%x. case x of (CT_, C_) => Predicate.single C_))
 (sup (Predicate.bind (Predicate.single (?x, ?xa))
        (%x. case x of
             (CT_, C_) =>
               Predicate.bind (supertypes_of CT_ C_)
                (%x. Predicate.bind (supertypes_of CT_ x)
                      Predicate.single)))
   (Predicate.bind (Predicate.single (?x, ?xa))
     (%x. case x of
          (CT_, C_) =>
            Predicate.bind (eq_i_o (CT_ C_))
             (%x. case x of None => bot
                  | Some CDef_ =>
                      Predicate.bind (eq_i_o (cSuper CDef_))
                       Predicate.single))))
?x1.0 \<turnstile> ?x2.0 <: ?x3.0 =
Predicate.holds (subtyping_i_i_i ?x1.0 ?x2.0 ?x3.0)
reductions_i_i_i ?x ?xa ?xb =
sup (Predicate.bind (Predicate.single (?x, ?xa, ?xb))
      (%x. case x of
           (CT_, e_, ea_) => if e_ = ea_ then Predicate.single () else bot))
 (Predicate.bind (Predicate.single (?x, ?xa, ?xb))
   (%x. case x of
        (CT_, e_, e''_) =>
          Predicate.bind (reduce CT_ e_)
           (%x. Predicate.bind (reductions_i_i_i CT_ x e''_)
                 (%x. case x of () => Predicate.single ()))))
reductions_i_i_o ?x ?xa =
sup (Predicate.bind (Predicate.single (?x, ?xa))
      (%x. case x of (CT_, e_) => Predicate.single e_))
 (Predicate.bind (Predicate.single (?x, ?xa))
   (%x. case x of
        (CT_, e_) =>
          Predicate.bind (reduce CT_ e_)
           (%x. Predicate.bind (reductions_i_i_o CT_ x) Predicate.single)))
?x1.0 \<turnstile> ?x2.0 \<rightarrow>* ?x3.0 =
Predicate.holds (reductions_i_i_i ?x1.0 ?x2.0 ?x3.0)
### Ambiguous input (line 87 of "$AFP/FeatherweightJava/Execute.thy") produces 5 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("_applC" ("_position" method_typing_aux)
###       ("_cargs" ("_position" CT)
###         ("_cargs" ("_position" m)
###           ("_cargs" ("_position" D)
###             ("_cargs" ("_position" Cs) ("_position" C))))))
###     ("\<^const>HOL.Not"
###       ("\<^const>HOL.All_binder" ("_idts" ("_position" Ds) ("_position" D0))
###         ("\<^const>HOL.eq"
###           ("\<^const>FJDefs.mtype" ("_position" CT) ("_position" m)
###             ("_position" D) ("_position" Ds)
###             ("\<^const>HOL.implies" ("_position" D0)
###               ("\<^const>HOL.conj"
###                 ("\<^const>HOL.eq" ("_position" Cs) ("_position" Ds))
###                 ("_position" C))))
###           ("_position" D0))))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("_applC" ("_position" method_typing_aux)
###       ("_cargs" ("_position" CT)
###         ("_cargs" ("_position" m)
###           ("_cargs" ("_position" D)
###             ("_cargs" ("_position" Cs) ("_position" C))))))
###     ("\<^const>HOL.Not"
###       ("\<^const>HOL.All_binder" ("_idts" ("_position" Ds) ("_position" D0))
###         ("\<^const>HOL.conj"
###           ("\<^const>HOL.eq"
###             ("\<^const>FJDefs.mtype" ("_position" CT) ("_position" m)
###               ("_position" D) ("_position" Ds)
###               ("\<^const>HOL.implies" ("_position" D0) ("_position" Cs)))
###             ("_position" Ds))
###           ("\<^const>HOL.eq" ("_position" C) ("_position" D0)))))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("_applC" ("_position" method_typing_aux)
###       ("_cargs" ("_position" CT)
###         ("_cargs" ("_position" m)
###           ("_cargs" ("_position" D)
###             ("_cargs" ("_position" Cs) ("_position" C))))))
###     ("\<^const>HOL.Not"
###       ("\<^const>HOL.All_binder" ("_idts" ("_position" Ds) ("_position" D0))
###         ("\<^const>HOL.implies"
###           ("\<^const>FJDefs.mtype" ("_position" CT) ("_position" m)
###             ("_position" D) ("_position" Ds) ("_position" D0))
###           ("\<^const>HOL.conj"
###             ("\<^const>HOL.eq" ("_position" Cs) ("_position" Ds))
###             ("\<^const>HOL.eq" ("_position" C) ("_position" D0))))))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("_applC" ("_position" method_typing_aux)
###       ("_cargs" ("_position" CT)
###         ("_cargs" ("_position" m)
###           ("_cargs" ("_position" D)
###             ("_cargs" ("_position" Cs) ("_position" C))))))
###     ("\<^const>HOL.Not"
###       ("\<^const>HOL.All_binder" ("_idts" ("_position" Ds) ("_position" D0))
###         ("\<^const>FJDefs.mtype" ("_position" CT) ("_position" m)
###           ("_position" D) ("_position" Ds)
###           ("\<^const>HOL.implies" ("_position" D0)
###             ("\<^const>HOL.conj"
###               ("\<^const>HOL.eq" ("_position" Cs) ("_position" Ds))
###               ("\<^const>HOL.eq" ("_position" C) ("_position" D0)))))))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("_applC" ("_position" method_typing_aux)
###       ("_cargs" ("_position" CT)
###         ("_cargs" ("_position" m)
###           ("_cargs" ("_position" D)
###             ("_cargs" ("_position" Cs) ("_position" C))))))
###     ("\<^const>HOL.Not"
###       ("\<^const>HOL.All_binder" ("_idts" ("_position" Ds) ("_position" D0))
###         ("\<^const>HOL.conj"
###           ("\<^const>FJDefs.mtype" ("_position" CT) ("_position" m)
###             ("_position" D) ("_position" Ds)
###             ("\<^const>HOL.implies" ("_position" D0)
###               ("\<^const>HOL.eq" ("_position" Cs) ("_position" Ds))))
###           ("\<^const>HOL.eq" ("_position" C) ("_position" D0)))))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 90 of "$AFP/FeatherweightJava/Execute.thy") produces 5 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("\<^const>HOL.All_binder" ("_idts" ("_position" Ds) ("_position" D0))
###       ("\<^const>HOL.conj"
###         ("\<^const>FJDefs.mtype" ("_position" CT) ("_position" m)
###           ("_position" D) ("_position" Ds)
###           ("\<^const>HOL.implies" ("_position" D0)
###             ("\<^const>HOL.eq" ("_position" Cs) ("_position" Ds))))
###         ("\<^const>HOL.eq" ("_position" C) ("_position" D0))))
###     ("\<^const>HOL.Not"
###       ("_applC" ("_position" method_typing_aux)
###         ("_cargs" ("_position" CT)
###           ("_cargs" ("_position" m)
###             ("_cargs" ("_position" D)
###               ("_cargs" ("_position" Cs) ("_position" C)))))))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("\<^const>HOL.All_binder" ("_idts" ("_position" Ds) ("_position" D0))
###       ("\<^const>FJDefs.mtype" ("_position" CT) ("_position" m)
###         ("_position" D) ("_position" Ds)
###         ("\<^const>HOL.implies" ("_position" D0)
###           ("\<^const>HOL.conj"
###             ("\<^const>HOL.eq" ("_position" Cs) ("_position" Ds))
###             ("\<^const>HOL.eq" ("_position" C) ("_position" D0))))))
###     ("\<^const>HOL.Not"
###       ("_applC" ("_position" method_typing_aux)
###         ("_cargs" ("_position" CT)
###           ("_cargs" ("_position" m)
###             ("_cargs" ("_position" D)
###               ("_cargs" ("_position" Cs) ("_position" C)))))))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("\<^const>HOL.All_binder" ("_idts" ("_position" Ds) ("_position" D0))
###       ("\<^const>HOL.implies"
###         ("\<^const>FJDefs.mtype" ("_position" CT) ("_position" m)
###           ("_position" D) ("_position" Ds) ("_position" D0))
###         ("\<^const>HOL.conj"
###           ("\<^const>HOL.eq" ("_position" Cs) ("_position" Ds))
###           ("\<^const>HOL.eq" ("_position" C) ("_position" D0)))))
###     ("\<^const>HOL.Not"
###       ("_applC" ("_position" method_typing_aux)
###         ("_cargs" ("_position" CT)
###           ("_cargs" ("_position" m)
###             ("_cargs" ("_position" D)
###               ("_cargs" ("_position" Cs) ("_position" C)))))))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("\<^const>HOL.All_binder" ("_idts" ("_position" Ds) ("_position" D0))
###       ("\<^const>HOL.conj"
###         ("\<^const>HOL.eq"
###           ("\<^const>FJDefs.mtype" ("_position" CT) ("_position" m)
###             ("_position" D) ("_position" Ds)
###             ("\<^const>HOL.implies" ("_position" D0) ("_position" Cs)))
###           ("_position" Ds))
###         ("\<^const>HOL.eq" ("_position" C) ("_position" D0))))
###     ("\<^const>HOL.Not"
###       ("_applC" ("_position" method_typing_aux)
###         ("_cargs" ("_position" CT)
###           ("_cargs" ("_position" m)
###             ("_cargs" ("_position" D)
###               ("_cargs" ("_position" Cs) ("_position" C)))))))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("\<^const>HOL.All_binder" ("_idts" ("_position" Ds) ("_position" D0))
###       ("\<^const>HOL.eq"
###         ("\<^const>FJDefs.mtype" ("_position" CT) ("_position" m)
###           ("_position" D) ("_position" Ds)
###           ("\<^const>HOL.implies" ("_position" D0)
###             ("\<^const>HOL.conj"
###               ("\<^const>HOL.eq" ("_position" Cs) ("_position" Ds))
###               ("_position" C))))
###         ("_position" D0)))
###     ("\<^const>HOL.Not"
###       ("_applC" ("_position" method_typing_aux)
###         ("_cargs" ("_position" CT)
###           ("_cargs" ("_position" m)
###             ("_cargs" ("_position" D)
###               ("_cargs" ("_position" Cs) ("_position" C)))))))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
reduction_i_i_i ?x ?xa ?xb =
sup (Predicate.bind (Predicate.single (?x, ?xa, ?xb))
      (%x. case x of
           (CT_, FieldProj (New C_ es_) fi_, ei_) =>
             Predicate.bind (fields_i_i_o CT_ C_)
              (%x. Predicate.bind
                    (eq_i_i (lookup2 x es_ (%fd. vdName fd = fi_))
                      (Some ei_))
                    (%x. case x of () => Predicate.single ()))
           | (CT_, FieldProj _ fi_, ei_) => bot | (CT_, _, ei_) => bot))
 (sup (Predicate.bind (Predicate.single (?x, ?xa, ?xb))
        (%x. case x of
             (CT_, MethodInvk (New C_ es_) m_ ds_, e0'_) =>
               Predicate.bind (mbody_i_i_i_o_o CT_ m_ C_)
                (%x. case x of
                     (xs_, e0_) =>
                       Predicate.bind
                        (eq_i_i
                          (substs [xs_ [|->] ds_, this |-> New C_ es_] e0_)
                          e0'_)
                        (%x. case x of () => Predicate.single ()))
             | (CT_, MethodInvk _ m_ ds_, e0'_) => bot
             | (CT_, _, e0'_) => bot))
   (sup (Predicate.bind (Predicate.single (?x, ?xa, ?xb))
          (%x. case x of
               (CT_, Cast D_ (New C_ es_), New Ca_ esa_) =>
                 if es_ = esa_ & C_ = Ca_
                 then Predicate.bind (subtyping_i_i_i CT_ C_ D_)
                       (%x. case x of () => Predicate.single ())
                 else bot
               | (CT_, Cast D_ (New C_ es_), _) => bot
               | (CT_, Cast D_ _, ba) => bot | (CT_, _, ba) => bot))
     (sup (Predicate.bind (Predicate.single (?x, ?xa, ?xb))
            (%x. case x of
                 (CT_, FieldProj e0_ f_, FieldProj e0'_ fa_) =>
                   if f_ = fa_
                   then Predicate.bind (reduction_i_i_i CT_ e0_ e0'_)
                         (%x. case x of () => Predicate.single ())
                   else bot
                 | (CT_, FieldProj e0_ f_, _) => bot | (CT_, _, ba) => bot))
       (sup (Predicate.bind (Predicate.single (?x, ?xa, ?xb))
              (%x. case x of
                   (CT_, MethodInvk e0_ m_ es_, MethodInvk e0'_ ma_ esa_) =>
                     if es_ = esa_ & m_ = ma_
                     then Predicate.bind (reduction_i_i_i CT_ e0_ e0'_)
                           (%x. case x of () => Predicate.single ())
                     else bot
                   | (CT_, MethodInvk e0_ m_ es_, _) => bot
                   | (CT_, _, ba) => bot))
         (sup (Predicate.bind (Predicate.single (?x, ?xa, ?xb))
                (%x. case x of
                     (CT_, MethodInvk e_ m_ e'_, MethodInvk eb_ ma_ e''_) =>
                       if m_ = ma_ & e_ = eb_
                       then Predicate.bind (append_o_o_i e'_)
                             (%x. case x of (el_, []) => bot
                                  | (el_, ei_ # er_) =>
Predicate.bind (reduce CT_ ei_)
 (%x. Predicate.bind (append_i_i_i el_ (x # er_) e''_)
       (%x. case x of () => Predicate.single ())))
                       else bot
                     | (CT_, MethodInvk e_ m_ e'_, _) => bot
                     | (CT_, _, ba) => bot))
           (sup (Predicate.bind (Predicate.single (?x, ?xa, ?xb))
                  (%x. case x of
                       (CT_, New C_ ea_, New Ca_ e'_) =>
                         if C_ = Ca_
                         then Predicate.bind (append_o_o_i ea_)
                               (%x. case x of (el_, []) => bot
                                    | (el_, ei_ # er_) =>
  Predicate.bind (reduce CT_ ei_)
   (%x. Predicate.bind (append_i_i_i el_ (x # er_) e'_)
         (%x. case x of () => Predicate.single ())))
                         else bot
                       | (CT_, New C_ ea_, _) => bot | (CT_, _, ba) => bot))
             (Predicate.bind (Predicate.single (?x, ?xa, ?xb))
               (%x. case x of
                    (CT_, Cast C_ e0_, Cast Ca_ e0'_) =>
                      if C_ = Ca_
                      then Predicate.bind (reduction_i_i_i CT_ e0_ e0'_)
                            (%x. case x of () => Predicate.single ())
                      else bot
                    | (CT_, Cast C_ e0_, _) => bot
                    | (CT_, _, ba) => bot))))))))
reduce ?x ?xa =
sup (Predicate.bind (Predicate.single (?x, ?xa))
      (%x. case x of
           (CT_, FieldProj (New C_ es_) fi_) =>
             Predicate.bind (fields_i_i_o CT_ C_)
              (%x. Predicate.bind
                    (eq_i_o (lookup2 x es_ (%fd. vdName fd = fi_)))
                    (%x. case x of None => bot
                         | Some ei_ => Predicate.single ei_))
           | (CT_, FieldProj _ fi_) => bot | (CT_, _) => bot))
 (sup (Predicate.bind (Predicate.single (?x, ?xa))
        (%x. case x of
             (CT_, MethodInvk (New C_ es_) m_ ds_) =>
               Predicate.bind (mbody_i_i_i_o_o CT_ m_ C_)
                (%x. case x of
                     (xs_, e0_) =>
                       Predicate.bind
                        (eq_i_o
                          (substs [xs_ [|->] ds_, this |-> New C_ es_] e0_))
                        Predicate.single)
             | (CT_, MethodInvk _ m_ ds_) => bot | (CT_, _) => bot))
   (sup (Predicate.bind (Predicate.single (?x, ?xa))
          (%x. case x of
               (CT_, Cast D_ (New C_ es_)) =>
                 Predicate.bind (subtyping_i_i_i CT_ C_ D_)
                  (%x. case x of () => Predicate.single (New C_ es_))
               | (CT_, Cast D_ _) => bot | (CT_, _) => bot))
     (sup (Predicate.bind (Predicate.single (?x, ?xa))
            (%x. case x of
                 (CT_, FieldProj e0_ f_) =>
                   Predicate.bind (reduce CT_ e0_)
                    (%x. Predicate.single (FieldProj x f_))
                 | (CT_, _) => bot))
       (sup (Predicate.bind (Predicate.single (?x, ?xa))
              (%x. case x of
                   (CT_, MethodInvk e0_ m_ es_) =>
                     Predicate.bind (reduce CT_ e0_)
                      (%x. Predicate.single (MethodInvk x m_ es_))
                   | (CT_, _) => bot))
         (sup (Predicate.bind (Predicate.single (?x, ?xa))
                (%x. case x of
                     (CT_, MethodInvk e_ m_ e'_) =>
                       Predicate.bind (append_o_o_i e'_)
                        (%x. case x of (el_, []) => bot
                             | (el_, ei_ # er_) =>
                                 Predicate.bind (reduce CT_ ei_)
                                  (%x.
Predicate.bind (append_i_i_o el_ (x # er_))
 (%x. Predicate.single (MethodInvk e_ m_ x))))
                     | (CT_, _) => bot))
           (sup (Predicate.bind (Predicate.single (?x, ?xa))
                  (%x. case x of
                       (CT_, New C_ ea_) =>
                         Predicate.bind (append_o_o_i ea_)
                          (%x. case x of (el_, []) => bot
                               | (el_, ei_ # er_) =>
                                   Predicate.bind (reduce CT_ ei_)
                                    (%x.
  Predicate.bind (append_i_i_o el_ (x # er_))
   (%x. Predicate.single (New C_ x))))
                       | (CT_, _) => bot))
             (Predicate.bind (Predicate.single (?x, ?xa))
               (%x. case x of
                    (CT_, Cast C_ e0_) =>
                      Predicate.bind (reduce CT_ e0_)
                       (%x. Predicate.single (Cast C_ x))
                    | (CT_, _) => bot))))))))
?x1.0 \<turnstile> ?x2.0 \<rightarrow> ?x3.0 =
Predicate.holds (reduction_i_i_i ?x1.0 ?x2.0 ?x3.0)
### theory "Draft.Execute"
### 1.710s elapsed time, 2.325s cpu time, 0.729s GC time
Loading theory "Draft.ExecuteMoreTemplates"
"True"
  :: "bool"
"True"
  :: "bool"
"True"
  :: "bool"
val templateLemmas =
   [("Execute.eq_i_oI", "Predicate.eq ?x ?xa ==> pred.eval (eq_i_o ?x) ?xa",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 2, template_var 1),
              template_var 0)
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 1,
               template_app (template_hole 0, template_var 1)),
             template_var 0)
           ))),
    ("Execute.eq_o_iI", "Predicate.eq ?x ?xa ==> pred.eval (eq_o_i ?xa) ?x",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 2, template_var 1),
              template_var 0)
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 1,
               template_app (template_hole 0, template_var 0)),
             template_var 1)
           ))),
    ("Execute.class_typing_i_iI",
     "?x \<turnstile> ?xa OK ==> pred.eval (class_typing_i_i ?x ?xa) ()",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 3, template_var 1),
              template_var 0)
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 2,
               template_app
                (template_app (template_hole 1, template_var 1),
                 template_var 0)),
             template_hole 0)
           ))),
    ("Execute.eq_i_iI",
     "Predicate.eq ?x ?xa ==> pred.eval (eq_i_i ?x ?xa) ()",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 3, template_var 1),
              template_var 0)
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 2,
               template_app
                (template_app (template_hole 1, template_var 1),
                 template_var 0)),
             template_hole 0)
           ))),
    ("Execute.append_i_i_oI",
     "Execute.append ?x ?xa ?xb ==> pred.eval (append_i_i_o ?x ?xa) ?xb",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app (template_hole 2, template_var 2),
                template_var 1),
              template_var 0)
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 1,
               template_app
                (template_app (template_hole 0, template_var 2),
                 template_var 1)),
             template_var 0)
           ))),
    ("Execute.append_i_o_iI",
     "Execute.append ?x ?xa ?xb ==> pred.eval (append_i_o_i ?x ?xb) ?xa",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app (template_hole 2, template_var 2),
                template_var 1),
              template_var 0)
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 1,
               template_app
                (template_app (template_hole 0, template_var 2),
                 template_var 0)),
             template_var 1)
           ))),
    ("Execute.append_o_i_iI",
     "Execute.append ?x ?xa ?xb ==> pred.eval (append_o_i_i ?xa ?xb) ?x",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app (template_hole 2, template_var 2),
                template_var 1),
              template_var 0)
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 1,
               template_app
                (template_app (template_hole 0, template_var 1),
                 template_var 0)),
             template_var 2)
           ))),
    ("Execute.fields_i_i_oI",
     "fields(?x,?xa) = ?xb ==> pred.eval (fields_i_i_o ?x ?xa) ?xb",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app (template_hole 2, template_var 2),
                template_var 1),
              template_var 0)
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 1,
               template_app
                (template_app (template_hole 0, template_var 2),
                 template_var 1)),
             template_var 0)
           ))),
    ("Execute.reduceI",
     "?x \<turnstile> ?xa \<rightarrow> ?xb ==>
      pred.eval (reduce ?x ?xa) ?xb",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app (template_hole 2, template_var 2),
                template_var 1),
              template_var 0)
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 1,
               template_app
                (template_app (template_hole 0, template_var 2),
                 template_var 1)),
             template_var 0)
           ))),
    ("Execute.reductions_i_i_oI",
     "?x \<turnstile> ?xa \<rightarrow>* ?xb ==>
      pred.eval (reductions_i_i_o ?x ?xa) ?xb",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app (template_hole 2, template_var 2),
                template_var 1),
              template_var 0)
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 1,
               template_app
                (template_app (template_hole 0, template_var 2),
                 template_var 1)),
             template_var 0)
           ))),
    ("Execute.supertypes_ofI",
     "?x \<turnstile> ?xa <: ?xb ==> pred.eval (supertypes_of ?x ?xa) ?xb",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app (template_hole 2, template_var 2),
                template_var 1),
              template_var 0)
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 1,
               template_app
                (template_app (template_hole 0, template_var 2),
                 template_var 1)),
             template_var 0)
           ))),
    ("Execute.subtypings_i_i_oI",
     "?x \<turnstile>+ ?xa <: ?xb ==>
      pred.eval (subtypings_i_i_o ?x ?xa) ?xb",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app (template_hole 2, template_var 2),
                template_var 1),
              template_var 0)
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 1,
               template_app
                (template_app (template_hole 0, template_var 2),
                 template_var 1)),
             template_var 0)
           ))),
    ("Execute.append_o_o_iI",
     "Execute.append ?x ?xa ?xb ==> pred.eval (append_o_o_i ?xb) (?x, ?xa)",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app (template_hole 3, template_var 2),
                template_var 1),
              template_var 0)
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 2,
               template_app (template_hole 1, template_var 0)),
             template_app
              (template_app (template_hole 0, template_var 2),
               template_var 1))
           ))),
    ("Execute.append_i_i_iI",
     "Execute.append ?x ?xa ?xb ==> pred.eval (append_i_i_i ?x ?xa ?xb) ()",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app (template_hole 3, template_var 2),
                template_var 1),
              template_var 0)
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 2,
               template_app
                (template_app
                  (template_app (template_hole 1, template_var 2),
                   template_var 1),
                 template_var 0)),
             template_hole 0)
           ))),
    ("Execute.fields_i_i_iI",
     "fields(?x,?xa) = ?xb ==> pred.eval (fields_i_i_i ?x ?xa ?xb) ()",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app (template_hole 3, template_var 2),
                template_var 1),
              template_var 0)
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 2,
               template_app
                (template_app
                  (template_app (template_hole 1, template_var 2),
                   template_var 1),
                 template_var 0)),
             template_hole 0)
           ))),
    ("Execute.method_typing_i_i_iI",
     "?x \<turnstile> ?xa OK IN ?xb ==>
      pred.eval (method_typing_i_i_i ?x ?xa ?xb) ()",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app (template_hole 3, template_var 2),
                template_var 1),
              template_var 0)
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 2,
               template_app
                (template_app
                  (template_app (template_hole 1, template_var 2),
                   template_var 1),
                 template_var 0)),
             template_hole 0)
           ))),
    ("Execute.method_typings_i_i_iI",
     "?x \<turnstile>+ ?xa OK IN ?xb ==>
      pred.eval (method_typings_i_i_i ?x ?xa ?xb) ()",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app (template_hole 3, template_var 2),
                template_var 1),
              template_var 0)
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 2,
               template_app
                (template_app
                  (template_app (template_hole 1, template_var 2),
                   template_var 1),
                 template_var 0)),
             template_hole 0)
           ))),
    ("Execute.reduction_i_i_iI",
     "?x \<turnstile> ?xa \<rightarrow> ?xb ==>
      pred.eval (reduction_i_i_i ?x ?xa ?xb) ()",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app (template_hole 3, template_var 2),
                template_var 1),
              template_var 0)
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 2,
               template_app
                (template_app
                  (template_app (template_hole 1, template_var 2),
                   template_var 1),
                 template_var 0)),
             template_hole 0)
           ))),
    ("Execute.reductions_i_i_iI",
     "?x \<turnstile> ?xa \<rightarrow>* ?xb ==>
      pred.eval (reductions_i_i_i ?x ?xa ?xb) ()",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app (template_hole 3, template_var 2),
                template_var 1),
              template_var 0)
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 2,
               template_app
                (template_app
                  (template_app (template_hole 1, template_var 2),
                   template_var 1),
                 template_var 0)),
             template_hole 0)
           ))),
    ("Execute.subtyping_i_i_iI",
     "?x \<turnstile> ?xa <: ?xb ==>
      pred.eval (subtyping_i_i_i ?x ?xa ?xb) ()",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app (template_hole 3, template_var 2),
                template_var 1),
              template_var 0)
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 2,
               template_app
                (template_app
                  (template_app (template_hole 1, template_var 2),
                   template_var 1),
                 template_var 0)),
             template_hole 0)
           ))),
    ("Execute.subtypings_i_i_iI",
     "?x \<turnstile>+ ?xa <: ?xb ==>
      pred.eval (subtypings_i_i_i ?x ?xa ?xb) ()",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app (template_hole 3, template_var 2),
                template_var 1),
              template_var 0)
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 2,
               template_app
                (template_app
                  (template_app (template_hole 1, template_var 2),
                   template_var 1),
                 template_var 0)),
             template_hole 0)
           ))),
    ("Execute.typing_i_i_i_oI",
     "?x;?xa \<turnstile> ?xb : ?xc ==>
      pred.eval (typing_i_i_i_o ?x ?xa ?xb) ?xc",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_app (template_hole 2, template_var 3),
                  template_var 2),
                template_var 1),
              template_var 0)
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 1,
               template_app
                (template_app
                  (template_app (template_hole 0, template_var 3),
                   template_var 2),
                 template_var 1)),
             template_var 0)
           ))),
    ("Execute.typings_i_i_i_oI",
     "?x;?xa \<turnstile>+ ?xb : ?xc ==>
      pred.eval (typings_i_i_i_o ?x ?xa ?xb) ?xc",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_app (template_hole 2, template_var 3),
                  template_var 2),
                template_var 1),
              template_var 0)
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 1,
               template_app
                (template_app
                  (template_app (template_hole 0, template_var 3),
                   template_var 2),
                 template_var 1)),
             template_var 0)
           ))),
    ("Execute.typing_i_i_i_iI",
     "?x;?xa \<turnstile> ?xb : ?xc ==>
      pred.eval (typing_i_i_i_i ?x ?xa ?xb ?xc) ()",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_app (template_hole 3, template_var 3),
                  template_var 2),
                template_var 1),
              template_var 0)
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 2,
               template_app
                (template_app
                  (template_app
                    (template_app (template_hole 1, template_var 3),
                     template_var 2),
                   template_var 1),
                 template_var 0)),
             template_hole 0)
           ))),
    ("Execute.typings_i_i_i_iI",
     "?x;?xa \<turnstile>+ ?xb : ?xc ==>
      pred.eval (typings_i_i_i_i ?x ?xa ?xb ?xc) ()",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_app (template_hole 3, template_var 3),
                  template_var 2),
                template_var 1),
              template_var 0)
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 2,
               template_app
                (template_app
                  (template_app
                    (template_app (template_hole 1, template_var 3),
                     template_var 2),
                   template_var 1),
                 template_var 0)),
             template_hole 0)
           ))),
    ("Execute.mbody_i_i_i_o_iI",
     "mbody(?x,?xa,?xb) = ?xc . ?xd ==>
      pred.eval (mbody_i_i_i_o_i ?x ?xa ?xb ?xd) ?xc",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_app
                   (template_app (template_hole 2, template_var 4),
                    template_var 3),
                  template_var 2),
                template_var 1),
              template_var 0)
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 1,
               template_app
                (template_app
                  (template_app
                    (template_app (template_hole 0, template_var 4),
                     template_var 3),
                   template_var 2),
                 template_var 0)),
             template_var 1)
           ))),
    ("Execute.mbody_i_i_i_i_oI",
     "mbody(?x,?xa,?xb) = ?xc . ?xd ==>
      pred.eval (mbody_i_i_i_i_o ?x ?xa ?xb ?xc) ?xd",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_app
                   (template_app (template_hole 2, template_var 4),
                    template_var 3),
                  template_var 2),
                template_var 1),
              template_var 0)
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 1,
               template_app
                (template_app
                  (template_app
                    (template_app (template_hole 0, template_var 4),
                     template_var 3),
                   template_var 2),
                 template_var 1)),
             template_var 0)
           ))),
    ("Execute.mtype_i_i_i_i_oI",
     "mtype(?x,?xa,?xb) = ?xc \<rightarrow> ?xd ==>
      pred.eval (mtype_i_i_i_i_o ?x ?xa ?xb ?xc) ?xd",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_app
                   (template_app (template_hole 2, template_var 4),
                    template_var 3),
                  template_var 2),
                template_var 1),
              template_var 0)
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 1,
               template_app
                (template_app
                  (template_app
                    (template_app (template_hole 0, template_var 4),
                     template_var 3),
                   template_var 2),
                 template_var 1)),
             template_var 0)
           ))),
    ("Execute.mtype_i_i_i_o_iI",
     "mtype(?x,?xa,?xb) = ?xc \<rightarrow> ?xd ==>
      pred.eval (mtype_i_i_i_o_i ?x ?xa ?xb ?xd) ?xc",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_app
                   (template_app (template_hole 2, template_var 4),
                    template_var 3),
                  template_var 2),
                template_var 1),
              template_var 0)
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 1,
               template_app
                (template_app
                  (template_app
                    (template_app (template_hole 0, template_var 4),
                     template_var 3),
                   template_var 2),
                 template_var 0)),
             template_var 1)
           ))),
    ("Execute.eq_i_oE",
     "[| pred.eval (eq_i_o ?x) ?xa; Predicate.eq ?x ?xa ==> ?P |] ==> ?P",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_hole 2,
                template_app (template_hole 1, template_var 2)),
              template_var 1)
            ),
        template_implication
         ([template_predicate
            (
               template_app
                (template_app (template_hole 0, template_var 2),
                 template_var 1)
               )],
          template_predicate (template_var 0))],
       template_predicate (template_var 0))),
    ("Execute.eq_o_iE",
     "[| pred.eval (eq_o_i ?xa) ?x; Predicate.eq ?x ?xa ==> ?P |] ==> ?P",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_hole 2,
                template_app (template_hole 1, template_var 2)),
              template_var 1)
            ),
        template_implication
         ([template_predicate
            (
               template_app
                (template_app (template_hole 0, template_var 1),
                 template_var 2)
               )],
          template_predicate (template_var 0))],
       template_predicate (template_var 0))),
    ("Execute.method_typing_aux_i_i_i_i_iI",
     "method_typing_aux ?x ?xa ?xb ?xc ?xd ==>
      pred.eval (method_typing_aux_i_i_i_i_i ?x ?xa ?xb ?xc ?xd) ()",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_app
                   (template_app (template_hole 3, template_var 4),
                    template_var 3),
                  template_var 2),
                template_var 1),
              template_var 0)
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 2,
               template_app
                (template_app
                  (template_app
                    (template_app
                      (template_app (template_hole 1, template_var 4),
                       template_var 3),
                     template_var 2),
                   template_var 1),
                 template_var 0)),
             template_hole 0)
           ))),
    ("Execute.mbody_i_i_i_o_oI",
     "mbody(?x,?xa,?xb) = ?xc . ?xd ==>
      pred.eval (mbody_i_i_i_o_o ?x ?xa ?xb) (?xc, ?xd)",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_app
                   (template_app (template_hole 3, template_var 4),
                    template_var 3),
                  template_var 2),
                template_var 1),
              template_var 0)
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 2,
               template_app
                (template_app
                  (template_app (template_hole 1, template_var 4),
                   template_var 3),
                 template_var 2)),
             template_app
              (template_app (template_hole 0, template_var 1),
               template_var 0))
           ))),
    ("Execute.mbody_i_i_i_i_iI",
     "mbody(?x,?xa,?xb) = ?xc . ?xd ==>
      pred.eval (mbody_i_i_i_i_i ?x ?xa ?xb ?xc ?xd) ()",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_app
                   (template_app (template_hole 3, template_var 4),
                    template_var 3),
                  template_var 2),
                template_var 1),
              template_var 0)
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 2,
               template_app
                (template_app
                  (template_app
                    (template_app
                      (template_app (template_hole 1, template_var 4),
                       template_var 3),
                     template_var 2),
                   template_var 1),
                 template_var 0)),
             template_hole 0)
           ))),
    ("Execute.mtype_i_i_i_o_oI",
     "mtype(?x,?xa,?xb) = ?xc \<rightarrow> ?xd ==>
      pred.eval (mtype_i_i_i_o_o ?x ?xa ?xb) (?xc, ?xd)",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_app
                   (template_app (template_hole 3, template_var 4),
                    template_var 3),
                  template_var 2),
                template_var 1),
              template_var 0)
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 2,
               template_app
                (template_app
                  (template_app (template_hole 1, template_var 4),
                   template_var 3),
                 template_var 2)),
             template_app
              (template_app (template_hole 0, template_var 1),
               template_var 0))
           ))),
    ("Execute.mtype_i_i_i_i_iI",
     "mtype(?x,?xa,?xb) = ?xc \<rightarrow> ?xd ==>
      pred.eval (mtype_i_i_i_i_i ?x ?xa ?xb ?xc ?xd) ()",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_app
                   (template_app (template_hole 3, template_var 4),
                    template_var 3),
                  template_var 2),
                template_var 1),
              template_var 0)
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 2,
               template_app
                (template_app
                  (template_app
                    (template_app
                      (template_app (template_hole 1, template_var 4),
                       template_var 3),
                     template_var 2),
                   template_var 1),
                 template_var 0)),
             template_hole 0)
           ))),
    ("Execute.class_typing_i_iE",
     "[| pred.eval (class_typing_i_i ?x ?xa) ?y;
         ?x \<turnstile> ?xa OK ==> ?P |]
      ==> ?P",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_hole 2,
                template_app
                 (template_app (template_hole 1, template_var 3),
                  template_var 2)),
              template_var 1)
            ),
        template_implication
         ([template_predicate
            (
               template_app
                (template_app (template_hole 0, template_var 3),
                 template_var 2)
               )],
          template_predicate (template_var 0))],
       template_predicate (template_var 0))),
    ("Execute.eq_i_iE",
     "[| pred.eval (eq_i_i ?x ?xa) ?y; Predicate.eq ?x ?xa ==> ?P |]
      ==> ?P",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_hole 2,
                template_app
                 (template_app (template_hole 1, template_var 3),
                  template_var 2)),
              template_var 1)
            ),
        template_implication
         ([template_predicate
            (
               template_app
                (template_app (template_hole 0, template_var 3),
                 template_var 2)
               )],
          template_predicate (template_var 0))],
       template_predicate (template_var 0))),
    ("Execute.supertypes_ofE",
     "[| pred.eval (supertypes_of ?x ?xa) ?xb;
         ?x \<turnstile> ?xa <: ?xb ==> ?P |]
      ==> ?P",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_hole 2,
                template_app
                 (template_app (template_hole 1, template_var 3),
                  template_var 2)),
              template_var 1)
            ),
        template_implication
         ([template_predicate
            (
               template_app
                (template_app
                  (template_app (template_hole 0, template_var 3),
                   template_var 2),
                 template_var 1)
               )],
          template_predicate (template_var 0))],
       template_predicate (template_var 0))),
    ("Execute.append_i_i_oE",
     "[| pred.eval (append_i_i_o ?x ?xa) ?xb;
         Execute.append ?x ?xa ?xb ==> ?P |]
      ==> ?P",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_hole 2,
                template_app
                 (template_app (template_hole 1, template_var 3),
                  template_var 2)),
              template_var 1)
            ),
        template_implication
         ([template_predicate
            (
               template_app
                (template_app
                  (template_app (template_hole 0, template_var 3),
                   template_var 2),
                 template_var 1)
               )],
          template_predicate (template_var 0))],
       template_predicate (template_var 0))),
    ("Execute.append_i_o_iE",
     "[| pred.eval (append_i_o_i ?x ?xb) ?xa;
         Execute.append ?x ?xa ?xb ==> ?P |]
      ==> ?P",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_hole 2,
                template_app
                 (template_app (template_hole 1, template_var 3),
                  template_var 2)),
              template_var 1)
            ),
        template_implication
         ([template_predicate
            (
               template_app
                (template_app
                  (template_app (template_hole 0, template_var 3),
                   template_var 1),
                 template_var 2)
               )],
          template_predicate (template_var 0))],
       template_predicate (template_var 0))),
    ("Execute.append_o_i_iE",
     "[| pred.eval (append_o_i_i ?xa ?xb) ?x;
         Execute.append ?x ?xa ?xb ==> ?P |]
      ==> ?P",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_hole 2,
                template_app
                 (template_app (template_hole 1, template_var 3),
                  template_var 2)),
              template_var 1)
            ),
        template_implication
         ([template_predicate
            (
               template_app
                (template_app
                  (template_app (template_hole 0, template_var 1),
                   template_var 3),
                 template_var 2)
               )],
          template_predicate (template_var 0))],
       template_predicate (template_var 0))),
    ("Execute.subtypings_i_i_oE",
     "[| pred.eval (subtypings_i_i_o ?x ?xa) ?xb;
         ?x \<turnstile>+ ?xa <: ?xb ==> ?P |]
      ==> ?P",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_hole 2,
                template_app
                 (template_app (template_hole 1, template_var 3),
                  template_var 2)),
              template_var 1)
            ),
        template_implication
         ([template_predicate
            (
               template_app
                (template_app
                  (template_app (template_hole 0, template_var 3),
                   template_var 2),
                 template_var 1)
               )],
          template_predicate (template_var 0))],
       template_predicate (template_var 0))),
    ("Execute.fields_i_i_oE",
     "[| pred.eval (fields_i_i_o ?x ?xa) ?xb; fields(?x,?xa) = ?xb ==> ?P |]
      ==> ?P",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_hole 2,
                template_app
                 (template_app (template_hole 1, template_var 3),
                  template_var 2)),
              template_var 1)
            ),
        template_implication
         ([template_predicate
            (
               template_app
                (template_app
                  (template_app (template_hole 0, template_var 3),
                   template_var 2),
                 template_var 1)
               )],
          template_predicate (template_var 0))],
       template_predicate (template_var 0))),
    ("Execute.reduceE",
     "[| pred.eval (reduce ?x ?xa) ?xb;
         ?x \<turnstile> ?xa \<rightarrow> ?xb ==> ?P |]
      ==> ?P",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_hole 2,
                template_app
                 (template_app (template_hole 1, template_var 3),
                  template_var 2)),
              template_var 1)
            ),
        template_implication
         ([template_predicate
            (
               template_app
                (template_app
                  (template_app (template_hole 0, template_var 3),
                   template_var 2),
                 template_var 1)
               )],
          template_predicate (template_var 0))],
       template_predicate (template_var 0))),
    ("Execute.reductions_i_i_oE",
     "[| pred.eval (reductions_i_i_o ?x ?xa) ?xb;
         ?x \<turnstile> ?xa \<rightarrow>* ?xb ==> ?P |]
      ==> ?P",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_hole 2,
                template_app
                 (template_app (template_hole 1, template_var 3),
                  template_var 2)),
              template_var 1)
            ),
        template_implication
         ([template_predicate
            (
               template_app
                (template_app
                  (template_app (template_hole 0, template_var 3),
                   template_var 2),
                 template_var 1)
               )],
          template_predicate (template_var 0))],
       template_predicate (template_var 0))),
    ("Execute.append_o_o_iE",
     "[| pred.eval (append_o_o_i ?xb) (?x, ?xa);
         Execute.append ?x ?xa ?xb ==> ?P |]
      ==> ?P",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_hole 3,
                template_app (template_hole 2, template_var 3)),
              template_app
               (template_app (template_hole 1, template_var 2),
                template_var 1))
            ),
        template_implication
         ([template_predicate
            (
               template_app
                (template_app
                  (template_app (template_hole 0, template_var 2),
                   template_var 1),
                 template_var 3)
               )],
          template_predicate (template_var 0))],
       template_predicate (template_var 0))),
    ("Execute.append_i_i_iE",
     "[| pred.eval (append_i_i_i ?x ?xa ?xb) ?y;
         Execute.append ?x ?xa ?xb ==> ?P |]
      ==> ?P",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_hole 2,
                template_app
                 (template_app
                   (template_app (template_hole 1, template_var 4),
                    template_var 3),
                  template_var 2)),
              template_var 1)
            ),
        template_implication
         ([template_predicate
            (
               template_app
                (template_app
                  (template_app (template_hole 0, template_var 4),
                   template_var 3),
                 template_var 2)
               )],
          template_predicate (template_var 0))],
       template_predicate (template_var 0))),
    ("Execute.fields_i_i_iE",
     "[| pred.eval (fields_i_i_i ?x ?xa ?xb) ?y;
         fields(?x,?xa) = ?xb ==> ?P |]
      ==> ?P",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_hole 2,
                template_app
                 (template_app
                   (template_app (template_hole 1, template_var 4),
                    template_var 3),
                  template_var 2)),
              template_var 1)
            ),
        template_implication
         ([template_predicate
            (
               template_app
                (template_app
                  (template_app (template_hole 0, template_var 4),
                   template_var 3),
                 template_var 2)
               )],
          template_predicate (template_var 0))],
       template_predicate (template_var 0))),
    ("Execute.method_typing_i_i_iE",
     "[| pred.eval (method_typing_i_i_i ?x ?xa ?xb) ?y;
         ?x \<turnstile> ?xa OK IN ?xb ==> ?P |]
      ==> ?P",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_hole 2,
                template_app
                 (template_app
                   (template_app (template_hole 1, template_var 4),
                    template_var 3),
                  template_var 2)),
              template_var 1)
            ),
        template_implication
         ([template_predicate
            (
               template_app
                (template_app
                  (template_app (template_hole 0, template_var 4),
                   template_var 3),
                 template_var 2)
               )],
          template_predicate (template_var 0))],
       template_predicate (template_var 0))),
    ("Execute.method_typings_i_i_iE",
     "[| pred.eval (method_typings_i_i_i ?x ?xa ?xb) ?y;
         ?x \<turnstile>+ ?xa OK IN ?xb ==> ?P |]
      ==> ?P",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_hole 2,
                template_app
                 (template_app
                   (template_app (template_hole 1, template_var 4),
                    template_var 3),
                  template_var 2)),
              template_var 1)
            ),
        template_implication
         ([template_predicate
            (
               template_app
                (template_app
                  (template_app (template_hole 0, template_var 4),
                   template_var 3),
                 template_var 2)
               )],
          template_predicate (template_var 0))],
       template_predicate (template_var 0))),
    ("Execute.reduction_i_i_iE",
     "[| pred.eval (reduction_i_i_i ?x ?xa ?xb) ?y;
         ?x \<turnstile> ?xa \<rightarrow> ?xb ==> ?P |]
      ==> ?P",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_hole 2,
                template_app
                 (template_app
                   (template_app (template_hole 1, template_var 4),
                    template_var 3),
                  template_var 2)),
              template_var 1)
            ),
        template_implication
         ([template_predicate
            (
               template_app
                (template_app
                  (template_app (template_hole 0, template_var 4),
                   template_var 3),
                 template_var 2)
               )],
          template_predicate (template_var 0))],
       template_predicate (template_var 0))),
    ("Execute.reductions_i_i_iE",
     "[| pred.eval (reductions_i_i_i ?x ?xa ?xb) ?y;
         ?x \<turnstile> ?xa \<rightarrow>* ?xb ==> ?P |]
      ==> ?P",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_hole 2,
                template_app
                 (template_app
                   (template_app (template_hole 1, template_var 4),
                    template_var 3),
                  template_var 2)),
              template_var 1)
            ),
        template_implication
         ([template_predicate
            (
               template_app
                (template_app
                  (template_app (template_hole 0, template_var 4),
                   template_var 3),
                 template_var 2)
               )],
          template_predicate (template_var 0))],
       template_predicate (template_var 0))),
    ("Execute.subtyping_i_i_iE",
     "[| pred.eval (subtyping_i_i_i ?x ?xa ?xb) ?y;
         ?x \<turnstile> ?xa <: ?xb ==> ?P |]
      ==> ?P",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_hole 2,
                template_app
                 (template_app
                   (template_app (template_hole 1, template_var 4),
                    template_var 3),
                  template_var 2)),
              template_var 1)
            ),
        template_implication
         ([template_predicate
            (
               template_app
                (template_app
                  (template_app (template_hole 0, template_var 4),
                   template_var 3),
                 template_var 2)
               )],
          template_predicate (template_var 0))],
       template_predicate (template_var 0))),
    ("Execute.subtypings_i_i_iE",
     "[| pred.eval (subtypings_i_i_i ?x ?xa ?xb) ?y;
         ?x \<turnstile>+ ?xa <: ?xb ==> ?P |]
      ==> ?P",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_hole 2,
                template_app
                 (template_app
                   (template_app (template_hole 1, template_var 4),
                    template_var 3),
                  template_var 2)),
              template_var 1)
            ),
        template_implication
         ([template_predicate
            (
               template_app
                (template_app
                  (template_app (template_hole 0, template_var 4),
                   template_var 3),
                 template_var 2)
               )],
          template_predicate (template_var 0))],
       template_predicate (template_var 0))),
    ("Execute.typing_i_i_i_oE",
     "[| pred.eval (typing_i_i_i_o ?x ?xa ?xb) ?xc;
         ?x;?xa \<turnstile> ?xb : ?xc ==> ?P |]
      ==> ?P",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_hole 2,
                template_app
                 (template_app
                   (template_app (template_hole 1, template_var 4),
                    template_var 3),
                  template_var 2)),
              template_var 1)
            ),
        template_implication
         ([template_predicate
            (
               template_app
                (template_app
                  (template_app
                    (template_app (template_hole 0, template_var 4),
                     template_var 3),
                   template_var 2),
                 template_var 1)
               )],
          template_predicate (template_var 0))],
       template_predicate (template_var 0))),
    ("Execute.typings_i_i_i_oE",
     "[| pred.eval (typings_i_i_i_o ?x ?xa ?xb) ?xc;
         ?x;?xa \<turnstile>+ ?xb : ?xc ==> ?P |]
      ==> ?P",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_hole 2,
                template_app
                 (template_app
                   (template_app (template_hole 1, template_var 4),
                    template_var 3),
                  template_var 2)),
              template_var 1)
            ),
        template_implication
         ([template_predicate
            (
               template_app
                (template_app
                  (template_app
                    (template_app (template_hole 0, template_var 4),
                     template_var 3),
                   template_var 2),
                 template_var 1)
               )],
          template_predicate (template_var 0))],
       template_predicate (template_var 0))),
    ("Execute.typing_i_i_i_iE",
     "[| pred.eval (typing_i_i_i_i ?x ?xa ?xb ?xc) ?y;
         ?x;?xa \<turnstile> ?xb : ?xc ==> ?P |]
      ==> ?P",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_hole 2,
                template_app
                 (template_app
                   (template_app
                     (template_app (template_hole 1, template_var 5),
                      template_var 4),
                    template_var 3),
                  template_var 2)),
              template_var 1)
            ),
        template_implication
         ([template_predicate
            (
               template_app
                (template_app
                  (template_app
                    (template_app (template_hole 0, template_var 5),
                     template_var 4),
                   template_var 3),
                 template_var 2)
               )],
          template_predicate (template_var 0))],
       template_predicate (template_var 0))),
    ("Execute.typings_i_i_i_iE",
     "[| pred.eval (typings_i_i_i_i ?x ?xa ?xb ?xc) ?y;
         ?x;?xa \<turnstile>+ ?xb : ?xc ==> ?P |]
      ==> ?P",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_hole 2,
                template_app
                 (template_app
                   (template_app
                     (template_app (template_hole 1, template_var 5),
                      template_var 4),
                    template_var 3),
                  template_var 2)),
              template_var 1)
            ),
        template_implication
         ([template_predicate
            (
               template_app
                (template_app
                  (template_app
                    (template_app (template_hole 0, template_var 5),
                     template_var 4),
                   template_var 3),
                 template_var 2)
               )],
          template_predicate (template_var 0))],
       template_predicate (template_var 0))),
    ("Execute.mtype_i_i_i_i_oE",
     "[| pred.eval (mtype_i_i_i_i_o ?x ?xa ?xb ?xc) ?xd;
         mtype(?x,?xa,?xb) = ?xc \<rightarrow> ?xd ==> ?P |]
      ==> ?P",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_hole 2,
                template_app
                 (template_app
                   (template_app
                     (template_app (template_hole 1, template_var 5),
                      template_var 4),
                    template_var 3),
                  template_var 2)),
              template_var 1)
            ),
        template_implication
         ([template_predicate
            (
               template_app
                (template_app
                  (template_app
                    (template_app
                      (template_app (template_hole 0, template_var 5),
                       template_var 4),
                     template_var 3),
                   template_var 2),
                 template_var 1)
               )],
          template_predicate (template_var 0))],
       template_predicate (template_var 0))),
    ("Execute.mbody_i_i_i_o_iE",
     "[| pred.eval (mbody_i_i_i_o_i ?x ?xa ?xb ?xd) ?xc;
         mbody(?x,?xa,?xb) = ?xc . ?xd ==> ?P |]
      ==> ?P",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_hole 2,
                template_app
                 (template_app
                   (template_app
                     (template_app (template_hole 1, template_var 5),
                      template_var 4),
                    template_var 3),
                  template_var 2)),
              template_var 1)
            ),
        template_implication
         ([template_predicate
            (
               template_app
                (template_app
                  (template_app
                    (template_app
                      (template_app (template_hole 0, template_var 5),
                       template_var 4),
                     template_var 3),
                   template_var 1),
                 template_var 2)
               )],
          template_predicate (template_var 0))],
       template_predicate (template_var 0))),
    ("Execute.mtype_i_i_i_o_iE",
     "[| pred.eval (mtype_i_i_i_o_i ?x ?xa ?xb ?xd) ?xc;
         mtype(?x,?xa,?xb) = ?xc \<rightarrow> ?xd ==> ?P |]
      ==> ?P",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_hole 2,
                template_app
                 (template_app
                   (template_app
                     (template_app (template_hole 1, template_var 5),
                      template_var 4),
                    template_var 3),
                  template_var 2)),
              template_var 1)
            ),
        template_implication
         ([template_predicate
            (
               template_app
                (template_app
                  (template_app
                    (template_app
                      (template_app (template_hole 0, template_var 5),
                       template_var 4),
                     template_var 3),
                   template_var 1),
                 template_var 2)
               )],
          template_predicate (template_var 0))],
       template_predicate (template_var 0))),
    ("Execute.mbody_i_i_i_i_oE",
     "[| pred.eval (mbody_i_i_i_i_o ?x ?xa ?xb ?xc) ?xd;
         mbody(?x,?xa,?xb) = ?xc . ?xd ==> ?P |]
      ==> ?P",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_hole 2,
                template_app
                 (template_app
                   (template_app
                     (template_app (template_hole 1, template_var 5),
                      template_var 4),
                    template_var 3),
                  template_var 2)),
              template_var 1)
            ),
        template_implication
         ([template_predicate
            (
               template_app
                (template_app
                  (template_app
                    (template_app
                      (template_app (template_hole 0, template_var 5),
                       template_var 4),
                     template_var 3),
                   template_var 2),
                 template_var 1)
               )],
          template_predicate (template_var 0))],
       template_predicate (template_var 0))),
    ("Execute.mtype_i_i_i_o_oE",
     "[| pred.eval (mtype_i_i_i_o_o ?x ?xa ?xb) (?xc, ?xd);
         mtype(?x,?xa,?xb) = ?xc \<rightarrow> ?xd ==> ?P |]
      ==> ?P",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_hole 3,
                template_app
                 (template_app
                   (template_app (template_hole 2, template_var 5),
                    template_var 4),
                  template_var 3)),
              template_app
               (template_app (template_hole 1, template_var 2),
                template_var 1))
            ),
        template_implication
         ([template_predicate
            (
               template_app
                (template_app
                  (template_app
                    (template_app
                      (template_app (template_hole 0, template_var 5),
                       template_var 4),
                     template_var 3),
                   template_var 2),
                 template_var 1)
               )],
          template_predicate (template_var 0))],
       template_predicate (template_var 0))),
    ("Execute.mbody_i_i_i_o_oE",
     "[| pred.eval (mbody_i_i_i_o_o ?x ?xa ?xb) (?xc, ?xd);
         mbody(?x,?xa,?xb) = ?xc . ?xd ==> ?P |]
      ==> ?P",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_hole 3,
                template_app
                 (template_app
                   (template_app (template_hole 2, template_var 5),
                    template_var 4),
                  template_var 3)),
              template_app
               (template_app (template_hole 1, template_var 2),
                template_var 1))
            ),
        template_implication
         ([template_predicate
            (
               template_app
                (template_app
                  (template_app
                    (template_app
                      (template_app (template_hole 0, template_var 5),
                       template_var 4),
                     template_var 3),
                   template_var 2),
                 template_var 1)
               )],
          template_predicate (template_var 0))],
       template_predicate (template_var 0))),
    ("Execute.mbody_i_i_i_i_iE",
     "[| pred.eval (mbody_i_i_i_i_i ?x ?xa ?xb ?xc ?xd) ?y;
         mbody(?x,?xa,?xb) = ?xc . ?xd ==> ?P |]
      ==> ?P",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_hole 2,
                template_app
                 (template_app
                   (template_app
                     (template_app
                       (template_app (template_hole 1, template_var 6),
                        template_var 5),
                      template_var 4),
                    template_var 3),
                  template_var 2)),
              template_var 1)
            ),
        template_implication
         ([template_predicate
            (
               template_app
                (template_app
                  (template_app
                    (template_app
                      (template_app (template_hole 0, template_var 6),
                       template_var 5),
                     template_var 4),
                   template_var 3),
                 template_var 2)
               )],
          template_predicate (template_var 0))],
       template_predicate (template_var 0))),
    ("Execute.method_typing_aux_i_i_i_i_iE",
     "[| pred.eval (method_typing_aux_i_i_i_i_i ?x ?xa ?xb ?xc ?xd) ?y;
         method_typing_aux ?x ?xa ?xb ?xc ?xd ==> ?P |]
      ==> ?P",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_hole 2,
                template_app
                 (template_app
                   (template_app
                     (template_app
                       (template_app (template_hole 1, template_var 6),
                        template_var 5),
                      template_var 4),
                    template_var 3),
                  template_var 2)),
              template_var 1)
            ),
        template_implication
         ([template_predicate
            (
               template_app
                (template_app
                  (template_app
                    (template_app
                      (template_app (template_hole 0, template_var 6),
                       template_var 5),
                     template_var 4),
                   template_var 3),
                 template_var 2)
               )],
          template_predicate (template_var 0))],
       template_predicate (template_var 0))),
    ("Execute.mtype_i_i_i_i_iE",
     "[| pred.eval (mtype_i_i_i_i_i ?x ?xa ?xb ?xc ?xd) ?y;
         mtype(?x,?xa,?xb) = ?xc \<rightarrow> ?xd ==> ?P |]
      ==> ?P",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_hole 2,
                template_app
                 (template_app
                   (template_app
                     (template_app
                       (template_app (template_hole 1, template_var 6),
                        template_var 5),
                      template_var 4),
                    template_var 3),
                  template_var 2)),
              template_var 1)
            ),
        template_implication
         ([template_predicate
            (
               template_app
                (template_app
                  (template_app
                    (template_app
                      (template_app (template_hole 0, template_var 6),
                       template_var 5),
                     template_var 4),
                   template_var 3),
                 template_var 2)
               )],
          template_predicate (template_var 0))],
       template_predicate (template_var 0))),
    ("Execute.method_typing_aux",
     "(ALL Ds D0.
          mtype(?CT,?m,?D) = Ds \<rightarrow> D0 --> ?Cs = Ds & ?C = D0) =
      (~ method_typing_aux ?CT ?m ?D ?Cs ?C)",
     template_equation
      (template_app (template_hole 8, t_empty),
       template_app
        (template_hole 1,
         template_app
          (template_app
            (template_app
              (template_app
                (template_app (template_hole 0, template_var 4),
                 template_var 3),
               template_var 2),
             template_var 1),
           template_var 0)))),
    ("Execute.rc_new_arg'",
     "[| ?CT \<turnstile> ?ei \<rightarrow> ?ei';
         Execute.append ?el (?ei # ?er) ?e;
         Execute.append ?el (?ei' # ?er) ?e' |]
      ==> ?CT \<turnstile> New ?C ?e \<rightarrow> New ?C ?e'",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app (template_hole 3, template_var 7),
                template_var 6),
              template_var 5)
            ),
        template_predicate
         (
            template_app
             (template_app
               (template_app (template_hole 2, template_var 4),
                template_app
                 (template_app (template_hole 1, template_var 6),
                  template_var 3)),
              template_var 2)
            ),
        template_predicate
         (
            template_app
             (template_app
               (template_app (template_hole 2, template_var 4),
                template_app
                 (template_app (template_hole 1, template_var 5),
                  template_var 3)),
              template_var 1)
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_app (template_hole 3, template_var 7),
               template_app
                (template_app (template_hole 0, template_var 0),
                 template_var 2)),
             template_app
              (template_app (template_hole 0, template_var 0),
               template_var 1))
           ))),
    ("Execute.rc_invk_arg'",
     "[| ?CT \<turnstile> ?ei \<rightarrow> ?ei';
         Execute.append ?el (?ei # ?er) ?e';
         Execute.append ?el (?ei' # ?er) ?e'' |]
      ==> ?CT \<turnstile> MethodInvk ?e ?m
                            ?e' \<rightarrow> MethodInvk ?e ?m ?e''",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app (template_hole 3, template_var 8),
                template_var 7),
              template_var 6)
            ),
        template_predicate
         (
            template_app
             (template_app
               (template_app (template_hole 2, template_var 5),
                template_app
                 (template_app (template_hole 1, template_var 7),
                  template_var 4)),
              template_var 3)
            ),
        template_predicate
         (
            template_app
             (template_app
               (template_app (template_hole 2, template_var 5),
                template_app
                 (template_app (template_hole 1, template_var 6),
                  template_var 4)),
              template_var 2)
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_app (template_hole 3, template_var 8),
               template_app
                (template_app
                  (template_app (template_hole 0, template_var 1),
                   template_var 0),
                 template_var 3)),
             template_app
              (template_app
                (template_app (template_hole 0, template_var 1),
                 template_var 0),
               template_var 2))
           )))]:
   (string * thm * template) list
### theory "Draft.ExecuteMoreTemplates"
### 0.468s elapsed time, 1.830s cpu time, 0.092s GC time
"{FieldProj
   (FieldProj (New cPair [New cPair [New 1 [], New B []], New 1 []]) ffst)
   fsnd,
  FieldProj (New cPair [New 1 [], New B []]) fsnd, New B []}"
  :: "exp set"
"{MethodInvk (New cPair [New 1 [], New B []]) setfst [New B []],
  New cPair [New B [], FieldProj (New cPair [New 1 [], New B []]) fsnd],
  New cPair [New B [], New B []]}"
  :: "exp set"
val it = (): unit
