Loading theory "HOL-Library.Cancellation" (required by "Draft.Exchange_AbadiMoreTemplates" via "Draft.Exchange_Abadi" via "Draft.Auxiliary" via "HOL-Library.Multiset")
Loading theory "HOL-Library.Function_Algebras" (required by "Draft.Exchange_AbadiMoreTemplates" via "Draft.ExtrEqs" via "HOL-Library.BigO")
Loading theory "HOL-Library.Nat_Bijection" (required by "Draft.Exchange_AbadiMoreTemplates" via "Draft.ExtrEqs" via "HOL-Library.Stream")
Loading theory "HOL-Library.Infinite_Set" (required by "Draft.Exchange_AbadiMoreTemplates" via "Draft.Exchange_Abadi" via "Draft.Auxiliary" via "HOL-Library.Linear_Temporal_Logic_on_Streams" via "HOL-Library.Extended_Nat" via "HOL-Library.Order_Continuity" via "HOL-Library.Countable_Complete_Lattices" via "HOL-Library.Countable_Set")
instantiation
  fun :: (type, plus) plus
  plus_fun == plus :: ('a => 'b) => ('a => 'b) => 'a => 'b
instantiation
  fun :: (type, zero) zero
  zero_fun == zero_class.zero :: 'a => 'b
instantiation
  fun :: (type, times) times
  times_fun == times :: ('a => 'b) => ('a => 'b) => 'a => 'b
instantiation
  fun :: (type, one) one
  one_fun == one_class.one :: 'a => 'b
### theory "HOL-Library.Function_Algebras"
### 0.127s elapsed time, 0.522s cpu time, 0.056s GC time
Loading theory "HOL-Library.Old_Datatype" (required by "Draft.Exchange_AbadiMoreTemplates" via "Draft.Exchange_Abadi" via "Draft.Auxiliary" via "HOL-Library.Linear_Temporal_Logic_on_Streams" via "HOL-Library.Extended_Nat" via "HOL-Library.Countable")
Found termination order: "(%p. size (snd p)) <*mlex*> {}"
consts
  enumerate :: "'a set => nat => 'a"
Found termination order: "size_list size <*mlex*> {}"
signature CANCEL = sig val proc: Proof.context -> cterm -> thm option end
functor Cancel_Fun (Data: CANCEL_NUMERALS_DATA): CANCEL
### theory "HOL-Library.Infinite_Set"
### 0.340s elapsed time, 1.357s cpu time, 0.130s GC time
Loading theory "HOL-Library.Set_Algebras" (required by "Draft.Exchange_AbadiMoreTemplates" via "Draft.ExtrEqs" via "HOL-Library.BigO")
signature CANCEL_DATA =
  sig
    val dest_coeff: term -> int * term
    val dest_sum: term -> term list
    val find_first_coeff: term -> term list -> int * term list
    val mk_coeff: int * term -> term
    val mk_sum: typ -> term list -> term
    val norm_ss1: simpset
    val norm_ss2: simpset
    val norm_tac: Proof.context -> tactic
    val numeral_simp_tac: Proof.context -> tactic
    val prove_conv:
       tactic list -> Proof.context -> thm list -> term * term -> thm option
    val simplify_meta_eq: Proof.context -> thm -> thm
    val trans_tac: Proof.context -> thm option -> tactic
  end
structure Cancel_Data: CANCEL_DATA
### theory "HOL-Library.Nat_Bijection"
### 0.369s elapsed time, 1.472s cpu time, 0.130s GC time
Loading theory "HOL-Library.Stream" (required by "Draft.Exchange_AbadiMoreTemplates" via "Draft.ExtrEqs")
instantiation
  set :: (plus) plus
  plus_set == plus :: 'a set => 'a set => 'a set
instantiation
  set :: (times) times
  times_set == times :: 'a set => 'a set => 'a set
instantiation
  set :: (zero) zero
  zero_set == zero_class.zero :: 'a set
instantiation
  set :: (one) one
  one_set == one_class.one :: 'a set
signature CANCEL_SIMPROCS =
  sig
    val diff_cancel: Proof.context -> cterm -> thm option
    val eq_cancel: Proof.context -> cterm -> thm option
    val less_cancel: Proof.context -> cterm -> thm option
    val less_eq_cancel: Proof.context -> cterm -> thm option
  end
structure Cancel_Simprocs: CANCEL_SIMPROCS
### theory "HOL-Library.Cancellation"
### 0.440s elapsed time, 1.764s cpu time, 0.130s GC time
Loading theory "HOL-Library.Multiset" (required by "Draft.Exchange_AbadiMoreTemplates" via "Draft.Exchange_Abadi" via "Draft.Auxiliary")
signature OLD_DATATYPE =
  sig
    val check_specs: spec list -> theory -> spec list * Proof.context
    type config = {quiet: bool, strict: bool}
    val default_config: config
    type descr =
       (int * (string * dtyp list * (string * dtyp list) list)) list
    val distinct_lemma: thm
    datatype dtyp
    = DtRec of int | DtTFree of string * sort | DtType of string * dtyp list
    type info =
       {case_cong: thm,
        case_cong_weak: thm,
        case_name: string,
        case_rewrites: thm list,
        descr: descr,
        distinct: thm list,
        exhaust: thm,
        index: int,
        induct: thm,
        inducts: thm list,
        inject: thm list,
        nchotomy: thm,
        rec_names: string list,
        rec_rewrites: thm list, split: thm, split_asm: thm}
    val read_specs: spec_cmd list -> theory -> spec list * Proof.context
    type spec =
       (binding * (string * sort) list * mixfix) *
       (binding * typ list * mixfix) list
    type spec_cmd =
       (binding * (string * string option) list * mixfix) *
       (binding * string list * mixfix) list
  end
structure Old_Datatype: OLD_DATATYPE
### theory "HOL-Library.Old_Datatype"
### 0.398s elapsed time, 1.572s cpu time, 0.166s GC time
Loading theory "HOL-Library.Sublist" (required by "Draft.Exchange_AbadiMoreTemplates" via "Draft.Exchange_Abadi" via "Draft.Auxiliary" via "Nested_Multisets_Ordinals.Signed_Multiset" via "Nested_Multisets_Ordinals.Multiset_More")
### theory "HOL-Library.Set_Algebras"
### 0.220s elapsed time, 0.866s cpu time, 0.091s GC time
Loading theory "HOL-Library.Tree" (required by "Draft.Exchange_AbadiMoreTemplates" via "Draft.ExtrEqs" via "Draft.Templates")
instantiation
  multiset :: (type) cancel_comm_monoid_add
  zero_multiset == zero_class.zero :: 'a multiset
  minus_multiset == minus :: 'a multiset => 'a multiset => 'a multiset
  plus_multiset == plus :: 'a multiset => 'a multiset => 'a multiset
consts
  shift :: "'a list => 'a stream => 'a stream"
Proofs for coinductive predicate(s) "streamsp"
  Proving monotonicity ...
consts
  prefixes :: "'a list => 'a list list"
consts
  snth :: "'a stream => nat => 'a"
consts
  stake :: "nat => 'a stream => 'a list"
consts
  sdrop :: "nat => 'a stream => 'a stream"
Found termination order: "(%p. length (snd p)) <*mlex*> {}"
consts
  sfilter :: "('a => bool) => 'a stream => 'a stream"
consts
  cycle :: "'a list => 'a stream"
consts
  siterate :: "('a => 'a) => 'a => 'a stream"
consts
  flat :: "'a list stream => 'a stream"
consts
  left :: "'a tree => 'a tree"
consts
  right :: "'a tree => 'a tree"
### Partially applied constant "Multiset.inter_mset" on left hand side of equation, in theorem:
### semilattice_inf.Inf_fin (\<inter>#) (set (?x # ?xs)) ==
### fold (\<inter>#) ?xs ?x
consts
  sinterleave :: "'a stream => 'a stream => 'a stream"
Found termination order: "size <*mlex*> {}"
consts
  szip :: "'a stream => 'b stream => ('a * 'b) stream"
### Partially applied constant "Multiset.union_mset" on left hand side of equation, in theorem:
### semilattice_sup.Sup_fin (\<union>#) (set (?x # ?xs)) ==
### fold (\<union>#) ?xs ?x
consts
  smap2 :: "('a => 'b => 'c) => 'a stream => 'b stream => 'c stream"
Found termination order: "size <*mlex*> {}"
### theory "HOL-Library.Stream"
### 1.165s elapsed time, 4.416s cpu time, 1.065s GC time
Loading theory "HOL-Library.Countable" (required by "Draft.Exchange_AbadiMoreTemplates" via "Draft.Exchange_Abadi" via "Draft.Auxiliary" via "HOL-Library.Linear_Temporal_Logic_on_Streams" via "HOL-Library.Extended_Nat")
consts
  suffixes :: "'a list => 'a list list"
Found termination order: "size <*mlex*> {}"
Proofs for inductive predicate(s) "list_emb"
  Proving monotonicity ...
class height = type +
  fixes height :: "'a => nat"
instantiation
  tree :: (type) height
  height_tree == height :: 'a tree => nat
Found termination order: "size <*mlex*> {}"
signature MULTISET_SIMPROCS =
  sig
    val subset_cancel_msets: Proof.context -> cterm -> thm option
    val subseteq_cancel_msets: Proof.context -> cterm -> thm option
  end
structure Multiset_Simprocs: MULTISET_SIMPROCS
instantiation
  multiset :: (type) Inf
  Inf_multiset == Inf :: 'a multiset set => 'a multiset
Found termination order: "size <*mlex*> {}"
instantiation
  multiset :: (type) Sup
  Sup_multiset == Sup :: 'a multiset set => 'a multiset
Found termination order: "size <*mlex*> {}"
Found termination order: "size <*mlex*> {}"
instantiation
  multiset :: (type) size
  size_multiset == size :: 'a multiset => nat
### Additional type variable(s) in locale specification "countable": 'a
Found termination order: "size <*mlex*> {}"
class countable = type +
  assumes "ex_inj": "EX to_nat. inj to_nat"
locale comp_fun_commute
  fixes f :: "'a => 'b => 'b"
  assumes "comp_fun_commute f"
Found termination order: "size <*mlex*> {}"
Found termination order: "size <*mlex*> {}"
consts
  mset :: "'a list => 'a multiset"
consts
  sublists :: "'a list => 'a list list"
Proofs for inductive predicate(s) "finite_item"
Found termination order: "(%p. size (fst p)) <*mlex*> {}"
  Proving monotonicity ...
### theory "HOL-Library.Sublist"
### 1.760s elapsed time, 6.765s cpu time, 1.341s GC time
Loading theory "HOL-Library.BigO" (required by "Draft.Exchange_AbadiMoreTemplates" via "Draft.ExtrEqs")
Found termination order: "size <*mlex*> {}"
class linorder = order +
  assumes "linear": "!!x y. x <= y | y <= x"
val old_countable_datatype_tac = fn: Proof.context -> int -> tactic
Found termination order: "(%p. size (snd p)) <*mlex*> {}"
locale comm_monoid_mset
  fixes f :: "'a => 'a => 'a"  (infixl \<open>\<^bold>*\<close> 70)
    and z :: "'a"  (\<open>\<^bold>1\<close>)
  assumes "comm_monoid_mset (\<^bold>*) \<^bold>1"
### ML warning (line 93 of "~~/src/HOL/Tools/BNF/bnf_lfp_countable.ML"):
### Pattern is not exhaustive.
### ML warning (line 139 of "~~/src/HOL/Tools/BNF/bnf_lfp_countable.ML"):
### Pattern is not exhaustive.
### ML warning (line 143 of "~~/src/HOL/Tools/BNF/bnf_lfp_countable.ML"):
### Matches are not exhaustive.
### ML warning (line 145 of "~~/src/HOL/Tools/BNF/bnf_lfp_countable.ML"):
### Matches are not exhaustive.
### ML warning (line 156 of "~~/src/HOL/Tools/BNF/bnf_lfp_countable.ML"):
### Pattern is not exhaustive.
signature BNF_LFP_COUNTABLE =
  sig
    val countable_datatype_tac: Proof.context -> tactic
    val derive_encode_injectives_thms:
       Proof.context -> string list -> thm list
  end
structure BNF_LFP_Countable: BNF_LFP_COUNTABLE
val countable_datatype_tac = fn: Proof.context -> thm -> thm Seq.seq
val countable_tac = fn: Proof.context -> int -> tactic
class comm_monoid_add = ab_semigroup_add + monoid_add +
  assumes "add_0": "!!a. (0::'a) + a = a"
class comm_monoid_add = ab_semigroup_add + monoid_add +
  assumes "add_0": "!!a. (0::'a) + a = a"
class canonically_ordered_monoid_add = ordered_comm_monoid_add +
  assumes "le_iff_add": "!!a b. (a <= b) = (EX c. b = a + c)"
Found termination order: "size <*mlex*> {}"
### theory "HOL-Library.Countable"
### 1.249s elapsed time, 4.900s cpu time, 0.630s GC time
Loading theory "HOL-Library.Countable_Set" (required by "Draft.Exchange_AbadiMoreTemplates" via "Draft.Exchange_Abadi" via "Draft.Auxiliary" via "HOL-Library.Linear_Temporal_Logic_on_Streams" via "HOL-Library.Extended_Nat" via "HOL-Library.Order_Continuity" via "HOL-Library.Countable_Complete_Lattices")
### theory "HOL-Library.Tree"
### 2.359s elapsed time, 9.108s cpu time, 1.676s GC time
Loading theory "Draft.Templates" (required by "Draft.Exchange_AbadiMoreTemplates" via "Draft.ExtrEqs")
class comm_monoid_mult = ab_semigroup_mult + monoid_mult + dvd +
  assumes "mult_1": "!!a. (1::'a) * a = a"
datatype template_term
=
     t_empty
   | template_app of template_term * template_term
   | template_hole of int
   | template_var of int
datatype sign
= equals | greater_equals | greater_than | less_equals | less_than
datatype template
=
     template_bimplication of template * template
   | template_dunno
   | template_equation of template_term * template_term
   | template_implication of template list * template
   | template_inequation of sign * template_term * template_term
   | template_negation of template
   | template_predicate of template_term
constructor t_empty: template_term
constructor template_app: template_term * template_term -> template_term
constructor template_hole: int -> template_term
constructor template_var: int -> template_term
constructor equals: sign
constructor greater_equals: sign
constructor greater_than: sign
constructor less_equals: sign
constructor less_than: sign
constructor template_bimplication: template * template -> template
constructor template_dunno: template
constructor template_equation: template_term * template_term -> template
constructor template_implication: template list * template -> template
constructor template_inequation:
   sign * template_term * template_term -> template
constructor template_negation: template -> template
constructor template_predicate: template_term -> template
val vfs = fn: term -> (indexname * typ) list * (string * typ) list
val indexOf = fn: ''a list -> ''a -> int -> int
val has_eq = fn: term -> bool
val term2template = fn:
   (indexname * typ) list -> (string * typ) list -> term -> template_term
val lemma2predicate = fn: term -> term -> template
val makeTemplatewithContext = fn: term -> term -> template
val lemma2template = fn: term -> template
val thm2template = fn: thm -> template
val tterm2string = fn: template_term -> string
val template2string = fn: template -> string
val t = "height ?t <= size ?t": thm
val th =
   Const ("HOL.Trueprop", "bool => prop") $
     (Const ("Orderings.ord_class.less_eq", "nat => nat => bool") $
       (Const ("Tree.height_class.height", "?'a tree => nat") $
         Var (("t", 0), "?'a tree")) $
       (Const ("Nat.size_class.size", "?'a tree => nat") $
         Var (("t", 0), "?'a tree"))):
   term
### theory "Draft.Templates"
### 0.072s elapsed time, 0.288s cpu time, 0.000s GC time
locale comm_monoid_set
  fixes f :: "'a => 'a => 'a"  (infixl \<open>\<^bold>*\<close> 70)
    and z :: "'a"  (\<open>\<^bold>1\<close>)
  assumes "comm_monoid_set (\<^bold>*) \<^bold>1"
### theory "HOL-Library.BigO"
### 0.902s elapsed time, 3.369s cpu time, 0.479s GC time
Loading theory "Draft.ExtrEqs" (required by "Draft.Exchange_AbadiMoreTemplates")
### theory "HOL-Library.Countable_Set"
### 0.475s elapsed time, 1.641s cpu time, 0.216s GC time
Loading theory "HOL-Library.Countable_Complete_Lattices" (required by "Draft.Exchange_AbadiMoreTemplates" via "Draft.Exchange_Abadi" via "Draft.Auxiliary" via "HOL-Library.Linear_Temporal_Logic_on_Streams" via "HOL-Library.Extended_Nat" via "HOL-Library.Order_Continuity")
class linorder = order +
  assumes "linear": "!!x y. x <= y | y <= x"
class countable_complete_lattice = Inf + Sup + lattice + bot + top +
  assumes "ccInf_lower": "!!A x. [| countable A; x : A |] ==> Inf A <= x"
  assumes
    "ccInf_greatest":
      "!!A z. [| countable A; !!x. x : A ==> z <= x |] ==> z <= Inf A"
  assumes "ccSup_upper": "!!A x. [| countable A; x : A |] ==> x <= Sup A"
  assumes
    "ccSup_least":
      "!!A z. [| countable A; !!x. x : A ==> x <= z |] ==> Sup A <= z"
  assumes "ccInf_empty": "Inf {} = top"
  assumes "ccSup_empty": "Sup {} = bot"
instantiation
  multiset :: (preorder) order
  less_eq_multiset == less_eq :: 'a multiset => 'a multiset => bool
  less_multiset == less :: 'a multiset => 'a multiset => bool
instantiation
  multiset :: (preorder) ordered_ab_semigroup_add
val eqpattern =
   Pattern
    (
       Const ("HOL.Trueprop", "bool => prop") $
         (Const ("HOL.eq", "?'a => ?'a => bool") $
           Var (("_dummy_", 1), "?'a") $ Var (("_dummy_", 2), "?'a"))
       ):
   term Find_Theorems.criterion
val badeqpattern = Pattern (Const ("Pure.eq", "?'a => ?'a => prop")):
   term Find_Theorems.criterion
val undefpattern =
   Pattern
    (
       Const ("HOL.Trueprop", "bool => prop") $
         (Const ("HOL.eq", "?'a => ?'a => bool") $
           Var (("_dummy_", 1), "?'a") $ Const ("HOL.undefined", "?'a"))
       ):
   term Find_Theorems.criterion
val thmpattern =
   Pattern
    (Const ("HOL.Trueprop", "bool => prop") $ Var (("_dummy_", 1), "bool")):
   term Find_Theorems.criterion
val badnames =
   ["*nitpick*", "*Nitpick*", "*full_exhaustive*", "*_def*", "Enum.finite*",
    "*Quickcheck*", "ATP*", "*Nunchaku*", "*Code*", "*BNF*", "*SMT*",
    "*.*.*"]:
   string list
val unwanted_names =
   [(false, Name "*nitpick*"), (false, Name "*Nitpick*"),
    (false, Name "*full_exhaustive*"), (false, Name "*_def*"),
    (false, Name "Enum.finite*"), (false, Name "*Quickcheck*"),
    (false, Name "ATP*"), (false, Name "*Nunchaku*"),
    (false, Name "*Code*"), (false, Name "*BNF*"), (false, Name "*SMT*"),
    (false, Name "*.*.*")]:
   (bool * term Find_Theorems.criterion) list
val has_vars = fn: term -> bool
val get_all_eqs = fn: string -> Proof.context -> (string * thm) list
val get_all_thms = fn: string -> Proof.context -> (string * thm) list
val get_noneq_thms = fn: string -> Proof.context -> (string * thm) list
val template_eqs = fn:
   string -> Proof.context -> (string * thm * template) list
val template_thms = fn:
   string -> Proof.context -> (string * thm * template) list
### theory "Draft.ExtrEqs"
### 0.913s elapsed time, 2.872s cpu time, 1.137s GC time
Proofs for inductive predicate(s) "pw_leq"
  Proving monotonicity ...
Found termination order: "(%p. length (fst p)) <*mlex*> {}"
instantiation
  multiset :: (equal) equal
  equal_multiset == equal_class.equal :: 'a multiset => 'a multiset => bool
instantiation
  multiset :: (random) random
  random_multiset == random_class.random ::
    natural
    => natural * natural
       => ('a multiset * (unit => term)) * natural * natural
instantiation
  multiset :: (full_exhaustive) full_exhaustive
  full_exhaustive_multiset == full_exhaustive_class.full_exhaustive ::
    ('a multiset * (unit => term) => (bool * term list) option)
    => natural => (bool * term list) option
Proofs for inductive predicate(s) "pred_mset"
  Proving monotonicity ...
Proofs for inductive predicate(s) "rel_mset'"
  Proving monotonicity ...
### theory "HOL-Library.Multiset"
### 4.065s elapsed time, 14.121s cpu time, 3.042s GC time
Loading theory "HOL-Library.Multiset_Order" (required by "Draft.Exchange_AbadiMoreTemplates" via "Draft.Exchange_Abadi" via "Draft.Auxiliary" via "Nested_Multisets_Ordinals.Signed_Multiset" via "Nested_Multisets_Ordinals.Multiset_More")
class preorder = ord +
  assumes "less_le_not_le": "!!x y. (x < y) = (x <= y & ~ y <= x)"
    and "order_refl": "!!x. x <= x"
    and "order_trans": "!!x y z. [| x <= y; y <= z |] ==> x <= z"
instantiation
  multiset :: (preorder) ordered_ab_semigroup_monoid_add_imp_le
instantiation
  multiset :: (wellorder) wellorder
instantiation
  multiset :: (preorder) order_bot
  bot_multiset == bot :: 'a multiset
instantiation
  multiset :: (linorder) distrib_lattice
  inf_multiset == inf :: 'a multiset => 'a multiset => 'a multiset
  sup_multiset == sup :: 'a multiset => 'a multiset => 'a multiset
### theory "HOL-Library.Multiset_Order"
### 0.579s elapsed time, 1.701s cpu time, 1.182s GC time
Loading theory "Nested_Multisets_Ordinals.Multiset_More" (required by "Draft.Exchange_AbadiMoreTemplates" via "Draft.Exchange_Abadi" via "Draft.Auxiliary" via "Nested_Multisets_Ordinals.Signed_Multiset")
class countable_complete_distrib_lattice = countable_complete_lattice +
  assumes
    "sup_ccInf": "!!B a. countable B ==> sup a (Inf B) = Inf (sup a ` B)"
  assumes
    "inf_ccSup": "!!B a. countable B ==> inf a (Sup B) = Sup (inf a ` B)"
### theory "Nested_Multisets_Ordinals.Multiset_More"
### 0.572s elapsed time, 1.266s cpu time, 0.121s GC time
Loading theory "Nested_Multisets_Ordinals.Signed_Multiset" (required by "Draft.Exchange_AbadiMoreTemplates" via "Draft.Exchange_Abadi" via "Draft.Auxiliary")
### theory "HOL-Library.Countable_Complete_Lattices"
### 2.527s elapsed time, 6.752s cpu time, 2.525s GC time
Loading theory "HOL-Library.Order_Continuity" (required by "Draft.Exchange_AbadiMoreTemplates" via "Draft.Exchange_Abadi" via "Draft.Auxiliary" via "HOL-Library.Linear_Temporal_Logic_on_Streams" via "HOL-Library.Extended_Nat")
instantiation
  zmultiset :: (type) cancel_comm_monoid_add
  zero_zmultiset == zero_class.zero :: 'a zmultiset
  minus_zmultiset == minus :: 'a zmultiset => 'a zmultiset => 'a zmultiset
  plus_zmultiset == plus :: 'a zmultiset => 'a zmultiset => 'a zmultiset
instantiation
  zmultiset :: (type) group_add
  uminus_zmultiset == uminus :: 'a zmultiset => 'a zmultiset
### theory "HOL-Library.Order_Continuity"
### 0.478s elapsed time, 1.022s cpu time, 0.146s GC time
Loading theory "HOL-Library.Extended_Nat" (required by "Draft.Exchange_AbadiMoreTemplates" via "Draft.Exchange_Abadi" via "Draft.Auxiliary" via "HOL-Library.Linear_Temporal_Logic_on_Streams")
Found termination order: "(%p. size (fst p)) <*mlex*> {}"
class infinity = type +
  fixes infinity :: "'a"
instantiation
  zmultiset :: (preorder) order
  less_eq_zmultiset == less_eq :: 'a zmultiset => 'a zmultiset => bool
  less_zmultiset == less :: 'a zmultiset => 'a zmultiset => bool
instantiation
  enat :: infinity
  infinity_enat == infinity :: enat
Proofs for inductive predicate(s) "rec_set_enat"
instantiation
  zmultiset :: (linorder) distrib_lattice
  inf_zmultiset == inf :: 'a zmultiset => 'a zmultiset => 'a zmultiset
  sup_zmultiset == sup :: 'a zmultiset => 'a zmultiset => 'a zmultiset
signature ZMULTISET_SIMPROCS =
  sig
    val subset_cancel_zmsets: Proof.context -> cterm -> thm option
    val subseteq_cancel_zmsets: Proof.context -> cterm -> thm option
  end
structure ZMultiset_Simprocs: ZMULTISET_SIMPROCS
### theory "Nested_Multisets_Ordinals.Signed_Multiset"
### 0.804s elapsed time, 1.703s cpu time, 0.208s GC time
### No equation for constructor "Extended_Nat.infinity_class.infinity"
### in definition of function "the_enat"
consts
  the_enat :: "enat => nat"
instantiation
  enat :: zero_neq_one
  one_enat == one_class.one :: enat
  zero_enat == zero_class.zero :: enat
instantiation
  enat :: comm_monoid_add
  plus_enat == plus :: enat => enat => enat
instantiation
  enat :: {comm_semiring_1,semiring_no_zero_divisors}
  times_enat == times :: enat => enat => enat
instantiation
  enat :: minus
  minus_enat == minus :: enat => enat => enat
instantiation
  enat :: linordered_ab_semigroup_add
  less_eq_enat == less_eq :: enat => enat => bool
  less_enat == less :: enat => enat => bool
instantiation
  enat :: {order_bot,order_top}
  top_enat == top :: enat
  bot_enat == bot :: enat
structure Cancel_Enat_Common:
  sig
    val dest_sum: term -> term list
    val dest_summing: term * term list -> term list
    val find_first: term -> term list -> term list
    val find_first_t: term list -> term -> term list -> term list
    val mk_eq: term * term -> term
    val mk_sum: typ -> term list -> term
    val norm_ss: simpset
    val norm_tac: Proof.context -> tactic
    val simplify_meta_eq: Proof.context -> thm -> thm -> thm
    val trans_tac: Proof.context -> thm option -> tactic
  end
structure Eq_Enat_Cancel:
  sig val proc: Proof.context -> term -> thm option end
structure Le_Enat_Cancel:
  sig val proc: Proof.context -> term -> thm option end
structure Less_Enat_Cancel:
  sig val proc: Proof.context -> term -> thm option end
instantiation
  enat :: complete_lattice
  Inf_enat == Inf :: enat set => enat
  Sup_enat == Sup :: enat set => enat
  sup_enat == sup :: enat => enat => enat
  inf_enat == inf :: enat => enat => enat
### theory "HOL-Library.Extended_Nat"
### 0.522s elapsed time, 0.871s cpu time, 0.062s GC time
Loading theory "HOL-Library.Linear_Temporal_Logic_on_Streams" (required by "Draft.Exchange_AbadiMoreTemplates" via "Draft.Exchange_Abadi" via "Draft.Auxiliary")
Found termination order: "{}"
Found termination order: "{}"
Proofs for inductive predicate(s) "ev"
  Proving monotonicity ...
Proofs for coinductive predicate(s) "alw"
  Proving monotonicity ...
Proofs for coinductive predicate(s) "UNTIL"
  Proving monotonicity ...
Proofs for inductive predicate(s) "ev_at"
  Proving monotonicity ...
Proofs for inductive predicate(s) "suntil"
  Proving monotonicity ...
### theory "HOL-Library.Linear_Temporal_Logic_on_Streams"
### 0.842s elapsed time, 0.959s cpu time, 0.161s GC time
Loading theory "Draft.Auxiliary" (required by "Draft.Exchange_AbadiMoreTemplates" via "Draft.Exchange_Abadi")
### theory "Draft.Auxiliary"
### 0.788s elapsed time, 0.900s cpu time, 0.152s GC time
Loading theory "Draft.Exchange_Abadi" (required by "Draft.Exchange_AbadiMoreTemplates")
### theory "Draft.Exchange_Abadi"
### 0.468s elapsed time, 0.528s cpu time, 0.079s GC time
Loading theory "Draft.Exchange_AbadiMoreTemplates"
val templateLemmas =
   [("Exchange_Abadi.beta_upright_0", "beta_upright {#}\<^sub>z ?vb",
     template_predicate
      (
         template_app
          (template_app (template_hole 1, template_hole 0), template_var 0)
         )),
    ("Exchange_Abadi.init_InvIncomingInfoUpright",
     "init_config ?c ==> InvIncomingInfoUpright ?c",
     template_implication
      ([template_predicate
         (template_app (template_hole 1, template_var 0))],
       template_predicate
        (template_app (template_hole 0, template_var 0)))),
    ("Exchange_Abadi.init_InvInfoAtBetaUpright",
     "init_config ?c ==> InvInfoAtBetaUpright ?c",
     template_implication
      ([template_predicate
         (template_app (template_hole 1, template_var 0))],
       template_predicate
        (template_app (template_hole 0, template_var 0)))),
    ("Exchange_Abadi.init_InvTempUpright",
     "init_config ?c ==> InvTempUpright ?c",
     template_implication
      ([template_predicate
         (template_app (template_hole 1, template_var 0))],
       template_predicate
        (template_app (template_hole 0, template_var 0)))),
    ("Exchange_Abadi.spec_imp_safe",
     "spec ?s ==> alw SafeGlobVacantUptoImpliesStickyNrec ?s",
     template_implication
      ([template_predicate
         (template_app (template_hole 2, template_var 0))],
       template_predicate
        (
           template_app
            (template_app (template_hole 1, template_hole 0),
             template_var 0)
           ))),
    ("Exchange_Abadi.spec_imp_SafeStickyGlobVacantUpto",
     "spec ?s ==> alw SafeStickyGlobVacantUpto ?s",
     template_implication
      ([template_predicate
         (template_app (template_hole 2, template_var 0))],
       template_predicate
        (
           template_app
            (template_app (template_hole 1, template_hole 0),
             template_var 0)
           ))),
    ("Exchange_Abadi.spec_imp_SafeStickyNrecVacantUpto",
     "spec ?s ==> alw SafeStickyNrecVacantUpto ?s",
     template_implication
      ([template_predicate
         (template_app (template_hole 2, template_var 0))],
       template_predicate
        (
           template_app
            (template_app (template_hole 1, template_hole 0),
             template_var 0)
           ))),
    ("Exchange_Abadi.alw_SafeGlobMono",
     "spec ?s ==> alw (relates SafeGlobMono) ?s",
     template_implication
      ([template_predicate
         (template_app (template_hole 3, template_var 0))],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 2,
               template_app (template_hole 1, template_hole 0)),
             template_var 0)
           ))),
    ("Exchange_Abadi.spec_imp_inv1",
     "spec ?s ==> alw (holds InvGlobVacantUptoImpliesNrec) ?s",
     template_implication
      ([template_predicate
         (template_app (template_hole 3, template_var 0))],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 2,
               template_app (template_hole 1, template_hole 0)),
             template_var 0)
           ))),
    ("Exchange_Abadi.alw_InvGlobalIncomingInfoUpright",
     "spec ?s ==> alw (holds InvGlobalIncomingInfoUpright) ?s",
     template_implication
      ([template_predicate
         (template_app (template_hole 3, template_var 0))],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 2,
               template_app (template_hole 1, template_hole 0)),
             template_var 0)
           ))),
    ("Exchange_Abadi.alw_InvGlobalInfoAtBetaUpright",
     "spec ?s ==> alw (holds InvGlobalInfoAtBetaUpright) ?s",
     template_implication
      ([template_predicate
         (template_app (template_hole 3, template_var 0))],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 2,
               template_app (template_hole 1, template_hole 0)),
             template_var 0)
           ))),
    ("Exchange_Abadi.alw_InvGlobalRecordCount",
     "spec ?s ==> alw (holds InvGlobalRecordCount) ?s",
     template_implication
      ([template_predicate
         (template_app (template_hole 3, template_var 0))],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 2,
               template_app (template_hole 1, template_hole 0)),
             template_var 0)
           ))),
    ("Exchange_Abadi.alw_InvIncomingInfoUpright",
     "spec ?s ==> alw (holds InvIncomingInfoUpright) ?s",
     template_implication
      ([template_predicate
         (template_app (template_hole 3, template_var 0))],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 2,
               template_app (template_hole 1, template_hole 0)),
             template_var 0)
           ))),
    ("Exchange_Abadi.alw_InvInfoAtBetaUpright",
     "spec ?s ==> alw (holds InvInfoAtBetaUpright) ?s",
     template_implication
      ([template_predicate
         (template_app (template_hole 3, template_var 0))],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 2,
               template_app (template_hole 1, template_hole 0)),
             template_var 0)
           ))),
    ("Exchange_Abadi.alw_InvTempUpright",
     "spec ?s ==> alw (holds InvTempUpright) ?s",
     template_implication
      ([template_predicate
         (template_app (template_hole 3, template_var 0))],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 2,
               template_app (template_hole 1, template_hole 0)),
             template_var 0)
           ))),
    ("Exchange_Abadi.spec_imp_SafeStickyNrecVacantUpto_aux",
     "alw next ?s ==> alw SafeStickyNrecVacantUpto ?s",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 2, template_hole 1),
              template_var 0)
            )],
       template_predicate
        (
           template_app
            (template_app (template_hole 2, template_hole 0),
             template_var 0)
           ))),
    ("Exchange_Abadi.InvIncomingInfoUpright_imp_InvGlobalIncomingInfoUpright",
     "holds InvIncomingInfoUpright ?s ==>
      holds InvGlobalIncomingInfoUpright ?s",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 2, template_hole 1),
              template_var 0)
            )],
       template_predicate
        (
           template_app
            (template_app (template_hole 2, template_hole 0),
             template_var 0)
           ))),
    ("Exchange_Abadi.init_InvGlobalRecordCount",
     "holds init_config ?s ==> holds InvGlobalRecordCount ?s",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 2, template_hole 1),
              template_var 0)
            )],
       template_predicate
        (
           template_app
            (template_app (template_hole 2, template_hole 0),
             template_var 0)
           ))),
    ("Exchange_Abadi.if_eq_same",
     "(if ?a = ?b then ?f ?b else ?f ?a) = ?f ?a",
     template_equation
      (template_app
        (template_app
          (template_app
            (template_hole 1,
             template_app
              (template_app (template_hole 0, template_var 2),
               template_var 1)),
           template_app (template_var 0, template_var 1)),
         template_app (template_var 0, template_var 2)),
       template_app (template_var 0, template_var 2))),
    ("Exchange_Abadi.safe2_inv1_imp_safe",
     "[| SafeStickyNrecVacantUpto ?s;
         holds InvGlobVacantUptoImpliesNrec ?s |]
      ==> SafeGlobVacantUptoImpliesStickyNrec ?s",
     template_implication
      ([template_predicate (template_app (template_hole 3, template_var 0)),
        template_predicate
         (
            template_app
             (template_app (template_hole 2, template_hole 1),
              template_var 0)
            )],
       template_predicate
        (template_app (template_hole 0, template_var 0)))),
    ("Exchange_Abadi.upright_vec_add",
     "[| upright ?v1.0; upright ?v2.0 |] ==> upright (?v1.0 + ?v2.0)",
     template_implication
      ([template_predicate (template_app (template_hole 1, template_var 1)),
        template_predicate
         (template_app (template_hole 1, template_var 0))],
       template_predicate
        (
           template_app
            (template_hole 1,
             template_app
              (template_app (template_hole 0, template_var 1),
               template_var 0))
           ))),
    ("Exchange_Abadi.next_InvIncomingInfoUpright",
     "[| holds InvIncomingInfoUpright ?s; next ?s |]
      ==> nxt (holds InvIncomingInfoUpright) ?s",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 3, template_hole 2),
              template_var 0)
            ),
        template_predicate
         (template_app (template_hole 1, template_var 0))],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 0,
               template_app (template_hole 3, template_hole 2)),
             template_var 0)
           ))),
    ("Exchange_Abadi.next_InvTempUpright",
     "[| holds InvTempUpright ?s; next ?s |]
      ==> nxt (holds InvTempUpright) ?s",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 3, template_hole 2),
              template_var 0)
            ),
        template_predicate
         (template_app (template_hole 1, template_var 0))],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 0,
               template_app (template_hole 3, template_hole 2)),
             template_var 0)
           ))),
    ("Exchange_Abadi.next_InvGlobalRecordCount",
     "[| holds InvGlobalRecordCount ?s; next ?s |]
      ==> nxt (holds InvGlobalRecordCount) ?s",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 3, template_hole 2),
              template_var 0)
            ),
        template_predicate
         (template_app (template_hole 1, template_var 0))],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 0,
               template_app (template_hole 3, template_hole 2)),
             template_var 0)
           ))),
    ("Exchange_Abadi.upright_alt",
     "upright ?a = (ALL t. 0 < zcount ?a t --> supported_strong ?a t)",
     template_equation
      (template_app (template_hole 6, template_var 0),
       template_app (template_hole 5, t_empty))),
    ("Exchange_Abadi.alw_nrec_pos",
     "spec ?s ==> alw (holds (%c. ALL t. 0 <= zcount (c_records c) t)) ?s",
     template_implication
      ([template_predicate
         (template_app (template_hole 7, template_var 0))],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 6, template_app (template_hole 5, t_empty)),
             template_var 0)
           ))),
    ("Exchange_Abadi.init_nrec_pos",
     "holds init_config ?s ==>
      holds (%c. ALL t. 0 <= zcount (c_records c) t) ?s",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 6, template_hole 5),
              template_var 0)
            )],
       template_predicate
        (
           template_app
            (template_app (template_hole 6, t_empty), template_var 0)
           ))),
    ("Exchange_Abadi.betaupright_PositiveImplies",
     "[| upright (?va + ?vb); PositiveImplies ?va (?va + ?vb) |]
      ==> beta_upright ?va ?vb",
     template_implication
      ([template_predicate
         (
            template_app
             (template_hole 3,
              template_app
               (template_app (template_hole 2, template_var 1),
                template_var 0))
            ),
        template_predicate
         (
            template_app
             (template_app (template_hole 1, template_var 1),
              template_app
               (template_app (template_hole 2, template_var 1),
                template_var 0))
            )],
       template_predicate
        (
           template_app
            (template_app (template_hole 0, template_var 1), template_var 0)
           ))),
    ("Exchange_Abadi.upright_sum_upright",
     "[| finite ?X; ALL x. upright (?A x) |] ==> upright (sum ?A ?X)",
     template_implication
      ([template_predicate (template_app (template_hole 3, template_var 1)),
        template_predicate (template_app (template_hole 2, t_empty))],
       template_predicate
        (
           template_app
            (template_hole 1,
             template_app
              (template_app (template_hole 0, t_empty), template_var 1))
           ))),
    ("Exchange_Abadi.beta_upright_add",
     "[| upright ?vb; upright ?vc; beta_upright ?va ?vb |]
      ==> beta_upright ?va (?vb + ?vc)",
     template_implication
      ([template_predicate (template_app (template_hole 2, template_var 2)),
        template_predicate (template_app (template_hole 2, template_var 1)),
        template_predicate
         (
            template_app
             (template_app (template_hole 1, template_var 0),
              template_var 2)
            )],
       template_predicate
        (
           template_app
            (template_app (template_hole 1, template_var 0),
             template_app
              (template_app (template_hole 0, template_var 2),
               template_var 1))
           ))),
    ("Exchange_Abadi.invs_imp_InvGlobalInfoAtBetaUpright",
     "[| holds InvInfoAtBetaUpright ?s;
         holds InvGlobalIncomingInfoUpright ?s;
         holds InvIncomingInfoUpright ?s |]
      ==> holds InvGlobalInfoAtBetaUpright ?s",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 4, template_hole 3),
              template_var 0)
            ),
        template_predicate
         (
            template_app
             (template_app (template_hole 4, template_hole 2),
              template_var 0)
            ),
        template_predicate
         (
            template_app
             (template_app (template_hole 4, template_hole 1),
              template_var 0)
            )],
       template_predicate
        (
           template_app
            (template_app (template_hole 4, template_hole 0),
             template_var 0)
           ))),
    ("Exchange_Abadi.betaupright_upright_vut",
     "[| beta_upright ?va ?vb; upright ?vb; vacant_upto (?va + ?vb) ?t |]
      ==> vacant_upto ?va ?t",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 3, template_var 2),
              template_var 1)
            ),
        template_predicate (template_app (template_hole 2, template_var 1)),
        template_predicate
         (
            template_app
             (template_app
               (template_hole 1,
                template_app
                 (template_app (template_hole 0, template_var 2),
                  template_var 1)),
              template_var 0)
            )],
       template_predicate
        (
           template_app
            (template_app (template_hole 1, template_var 2), template_var 0)
           ))),
    ("Exchange_Abadi.next_InvInfoAtBetaUpright",
     "[| next ?s; InvInfoAtBetaUpright (shd ?s);
         InvIncomingInfoUpright (shd ?s); InvTempUpright (shd ?s) |]
      ==> InvInfoAtBetaUpright (shd (stl ?s))",
     template_implication
      ([template_predicate (template_app (template_hole 5, template_var 0)),
        template_predicate
         (
            template_app
             (template_hole 4,
              template_app (template_hole 3, template_var 0))
            ),
        template_predicate
         (
            template_app
             (template_hole 2,
              template_app (template_hole 3, template_var 0))
            ),
        template_predicate
         (
            template_app
             (template_hole 1,
              template_app (template_hole 3, template_var 0))
            )],
       template_predicate
        (
           template_app
            (template_hole 4,
             template_app
              (template_hole 3,
               template_app (template_hole 0, template_var 0)))
           ))),
    ("Exchange_Abadi.invs_imp_InvGlobVacantUptoImpliesNrec",
     "[| holds InvGlobalIncomingInfoUpright ?s;
         holds InvGlobalRecordCount ?s;
         holds (%c. ALL t. 0 <= zcount (c_records c) t) ?s |]
      ==> holds InvGlobVacantUptoImpliesNrec ?s",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 8, template_hole 7),
              template_var 0)
            ),
        template_predicate
         (
            template_app
             (template_app (template_hole 8, template_hole 6),
              template_var 0)
            ),
        template_predicate
         (
            template_app
             (template_app (template_hole 8, t_empty), template_var 0)
            )],
       template_predicate
        (
           template_app
            (template_app (template_hole 8, template_hole 0),
             template_var 0)
           ))),
    ("Exchange_Abadi.alw_InvInfoAtBetaUpright_aux",
     "[| alw (holds InvTempUpright) ?s;
         alw (holds InvIncomingInfoUpright) ?s;
         holds InvInfoAtBetaUpright ?s; alw next ?s |]
      ==> alw (holds InvInfoAtBetaUpright) ?s",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_hole 5,
                template_app (template_hole 4, template_hole 3)),
              template_var 0)
            ),
        template_predicate
         (
            template_app
             (template_app
               (template_hole 5,
                template_app (template_hole 4, template_hole 2)),
              template_var 0)
            ),
        template_predicate
         (
            template_app
             (template_app (template_hole 4, template_hole 1),
              template_var 0)
            ),
        template_predicate
         (
            template_app
             (template_app (template_hole 5, template_hole 0),
              template_var 0)
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 5,
               template_app (template_hole 4, template_hole 1)),
             template_var 0)
           ))),
    ("Exchange_Abadi.next_recvupd_vacant",
     "[| NrecVacantUpto (shd ?s) ?t; next_recvupd ?s |]
      ==> NrecVacantUpto (shd (stl ?s)) ?t",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_hole 5,
                template_app
                 (template_hole 4,
                  template_app (template_hole 3, template_var 1))),
              template_var 0)
            ),
        template_predicate (template_app (template_hole 2, t_empty))],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 5,
               template_app
                (template_hole 4,
                 template_app
                  (template_hole 3,
                   template_app (template_hole 0, template_var 1)))),
             template_var 0)
           ))),
    ("Exchange_Abadi.next_sendupd_vacant",
     "[| NrecVacantUpto (shd ?s) ?t; next_sendupd ?s |]
      ==> NrecVacantUpto (shd (stl ?s)) ?t",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_hole 6,
                template_app
                 (template_hole 5,
                  template_app (template_hole 4, template_var 1))),
              template_var 0)
            ),
        template_predicate (template_app (template_hole 3, t_empty))],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 6,
               template_app
                (template_hole 5,
                 template_app
                  (template_hole 4,
                   template_app (template_hole 0, template_var 1)))),
             template_var 0)
           ))),
    ("Exchange_Abadi.gvut2",
     "[| GlobVacantUpto (shd ?s) ?q ?t; next_sendupd ?s |]
      ==> GlobVacantUpto (shd (stl ?s)) ?q ?t",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_hole 6,
                template_app
                 (template_app
                   (template_hole 5,
                    template_app (template_hole 4, template_var 2)),
                  template_var 1)),
              template_var 0)
            ),
        template_predicate (template_app (template_hole 3, t_empty))],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 6,
               template_app
                (template_app
                  (template_hole 5,
                   template_app
                    (template_hole 4,
                     template_app (template_hole 0, template_var 2))),
                 template_var 1)),
             template_var 0)
           ))),
    ("Exchange_Abadi.next_nrec_pos",
     "[| holds (%c. ALL t. 0 <= zcount (c_records c) t) ?s; next ?s |]
      ==> nxt (holds (%c. ALL t. 0 <= zcount (c_records c) t)) ?s",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 7, t_empty), template_var 0)
            ),
        template_predicate
         (template_app (template_hole 1, template_var 0))],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 0, template_app (template_hole 7, t_empty)),
             template_var 0)
           ))),
    ("Exchange_Abadi.next_performop_vacant",
     "[| NrecVacantUpto (shd ?s) ?t; next_performop ?s |]
      ==> NrecVacantUpto (shd (stl ?s)) ?t",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_hole 6,
                template_app
                 (template_hole 5,
                  template_app (template_hole 4, template_var 1))),
              template_var 0)
            ),
        template_predicate (template_app (template_hole 3, t_empty))],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 6,
               template_app
                (template_hole 5,
                 template_app
                  (template_hole 4,
                   template_app (template_hole 0, template_var 1)))),
             template_var 0)
           ))),
    ("Exchange_Abadi.gvut1",
     "[| GlobVacantUpto (shd ?s) ?q ?t; next_performop ?s |]
      ==> GlobVacantUpto (shd (stl ?s)) ?q ?t",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_hole 6,
                template_app
                 (template_app
                   (template_hole 5,
                    template_app (template_hole 4, template_var 2)),
                  template_var 1)),
              template_var 0)
            ),
        template_predicate (template_app (template_hole 3, t_empty))],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 6,
               template_app
                (template_app
                  (template_hole 5,
                   template_app
                    (template_hole 4,
                     template_app (template_hole 0, template_var 2))),
                 template_var 1)),
             template_var 0)
           ))),
    ("Exchange_Abadi.finite_induct_select",
     "[| finite ?S; ?P {};
         !!T. [| finite T; T < ?S; ?P T |]
              ==> EX s:?S - T. ?P (insert s T) |]
      ==> ?P ?S",
     template_implication
      ([template_predicate (template_app (template_hole 6, template_var 1)),
        template_predicate (template_app (template_var 0, template_hole 5)),
        template_predicate (template_app (template_hole 4, t_empty))],
       template_predicate (template_app (template_var 0, template_var 1)))),
    ("Exchange_Abadi.spec_imp_SafeStickyGlobVacantUpto_aux",
     "[| alw (holds InvGlobVacantUptoImpliesNrec) ?s;
         alw (holds InvGlobalRecordCount) ?s;
         alw (holds InvGlobalIncomingInfoUpright) ?s;
         alw (holds InvGlobalInfoAtBetaUpright) ?s; alw next ?s |]
      ==> alw SafeStickyGlobVacantUpto ?s",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_hole 7, template_app (template_hole 6, t_empty)),
              template_var 0)
            ),
        template_predicate
         (
            template_app
             (template_app
               (template_hole 7, template_app (template_hole 6, t_empty)),
              template_var 0)
            ),
        template_predicate
         (
            template_app
             (template_app
               (template_hole 7, template_app (template_hole 6, t_empty)),
              template_var 0)
            ),
        template_predicate
         (
            template_app
             (template_app
               (template_hole 7, template_app (template_hole 6, t_empty)),
              template_var 0)
            ),
        template_predicate
         (
            template_app
             (template_app (template_hole 7, template_hole 1),
              template_var 0)
            )],
       template_predicate
        (
           template_app
            (template_app (template_hole 7, template_hole 0),
             template_var 0)
           ))),
    ("Exchange_Abadi.beta_upright_alt",
     "beta_upright ?va ?vb =
      (ALL t.
          0 < zcount ?va t -->
          (EX s<t.
              (zcount ?va s < 0 | zcount ?vb s < 0) & nonpos_upto ?va s))",
     template_equation
      (template_app
        (template_app (template_hole 11, template_var 1), template_var 0),
       template_app (template_hole 10, t_empty))),
    ("Exchange_Abadi.upright_obtain_support",
     "[| upright ?a; 0 < zcount ?a ?t;
         !!s. [| s < ?t; zcount ?a s < 0; nonpos_upto ?a s |] ==> ?thesis |]
      ==> ?thesis",
     template_implication
      ([template_predicate (template_app (template_hole 9, template_var 2)),
        template_inequation
         (less_than, template_hole 7,
          template_app
           (template_app (template_hole 6, template_var 2),
            template_var 1)),
        template_predicate (template_app (template_hole 5, t_empty))],
       template_predicate (template_var 0))),
    ("Exchange_Abadi.betaupright_obtain_support",
     "[| beta_upright ?va ?vb; 0 < zcount ?va ?t;
         !!s. [| s < ?t; zcount ?va s < 0 | zcount ?vb s < 0;
                 nonpos_upto ?va s |]
              ==> ?thesis |]
      ==> ?thesis",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 10, template_var 3),
              template_var 2)
            ),
        template_inequation
         (less_than, template_hole 8,
          template_app
           (template_app (template_hole 7, template_var 3),
            template_var 1)),
        template_predicate (template_app (template_hole 6, t_empty))],
       template_predicate (template_var 0))),
    ("Exchange_Abadi.gvut3",
     "[| GlobVacantUpto (shd ?s) ?q ?t;
         InvGlobVacantUptoImpliesNrec (shd ?s);
         InvGlobalRecordCount (shd ?s);
         InvGlobalIncomingInfoUpright (shd ?s);
         InvGlobalInfoAtBetaUpright (shd ?s); next_recvupd ?s |]
      ==> GlobVacantUpto (shd (stl ?s)) ?q ?t",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_hole 9,
                template_app
                 (template_app
                   (template_hole 8,
                    template_app (template_hole 7, template_var 2)),
                  template_var 1)),
              template_var 0)
            ),
        template_predicate
         (
            template_app
             (template_hole 6,
              template_app (template_hole 7, template_var 2))
            ),
        template_predicate
         (
            template_app
             (template_hole 5,
              template_app (template_hole 7, template_var 2))
            ),
        template_predicate
         (
            template_app
             (template_hole 4,
              template_app (template_hole 7, template_var 2))
            ),
        template_predicate
         (
            template_app
             (template_hole 3,
              template_app (template_hole 7, template_var 2))
            ),
        template_predicate (template_app (template_hole 2, t_empty))],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 9,
               template_app
                (template_app
                  (template_hole 8,
                   template_app
                    (template_hole 7,
                     template_app (template_hole 0, template_var 2))),
                 template_var 1)),
             template_var 0)
           ))),
    ("Exchange_Abadi.next_inv",
     "[| next ?s; next_performop ?s ==> ?P; next_sendupd ?s ==> ?P;
         next_recvupd ?s ==> ?P; shd (stl ?s) = shd ?s ==> ?P |]
      ==> ?P",
     template_implication
      ([template_predicate (template_app (template_hole 9, template_var 1)),
        template_implication
         ([template_predicate (template_app (template_hole 8, t_empty))],
          template_predicate (template_var 0)),
        template_implication
         ([template_predicate (template_app (template_hole 8, t_empty))],
          template_predicate (template_var 0)),
        template_implication
         ([template_predicate (template_app (template_hole 8, t_empty))],
          template_predicate (template_var 0)),
        template_implication
         ([template_equation
            (template_app
              (template_hole 5,
               template_app (template_hole 4, template_var 1)),
             template_app (template_hole 5, template_var 1))],
          template_predicate (template_var 0))],
       template_predicate (template_var 0))),
    ("Exchange_Abadi.predicate_sum_decompose",
     "[| finite ?X; ?x : ?X; ?A (?f ?x); ALL Z. ?B (sum ?f Z);
         !!x Z. [| ?A (?f x); ?B (sum ?f Z) |] ==> ?A (?f x + sum ?f Z);
         !!x Z. [| ?B (?f x); ?A (sum ?f Z) |] ==> ?A (?f x + sum ?f Z) |]
      ==> ?A (sum ?f ?X)",
     template_implication
      ([template_predicate (template_app (template_hole 6, template_var 4)),
        template_predicate
         (
            template_app
             (template_app (template_hole 5, template_var 3),
              template_var 4)
            ),
        template_predicate
         (
            template_app
             (template_var 2, template_app (template_var 1, template_var 3))
            ),
        template_predicate (template_app (template_hole 4, t_empty)),
        template_predicate (template_app (template_hole 2, t_empty)),
        template_predicate (template_app (template_hole 2, t_empty))],
       template_predicate
        (
           template_app
            (template_var 2,
             template_app
              (template_app (template_hole 3, t_empty), template_var 4))
           )))]:
   (string * thm * template) list
### theory "Draft.Exchange_AbadiMoreTemplates"
### 0.488s elapsed time, 0.743s cpu time, 0.105s GC time
val it = (): unit
