Loading theory "HOL-Library.Cancellation" (required by "Draft.AuxiliaryMoreTemplates" via "Draft.Auxiliary" via "HOL-Library.Multiset")
Loading theory "HOL-Library.Nat_Bijection" (required by "Draft.AuxiliaryMoreTemplates" via "Draft.ExtrEqs" via "HOL-Library.Stream")
Loading theory "HOL-Library.Function_Algebras" (required by "Draft.AuxiliaryMoreTemplates" via "Draft.ExtrEqs" via "HOL-Library.BigO")
Loading theory "HOL-Library.Infinite_Set" (required by "Draft.AuxiliaryMoreTemplates" via "Draft.Auxiliary" via "HOL-Library.Linear_Temporal_Logic_on_Streams" via "HOL-Library.Extended_Nat" via "HOL-Library.Order_Continuity" via "HOL-Library.Countable_Complete_Lattices" via "HOL-Library.Countable_Set")
instantiation
  fun :: (type, plus) plus
  plus_fun == plus :: ('a => 'b) => ('a => 'b) => 'a => 'b
instantiation
  fun :: (type, zero) zero
  zero_fun == zero_class.zero :: 'a => 'b
instantiation
  fun :: (type, times) times
  times_fun == times :: ('a => 'b) => ('a => 'b) => 'a => 'b
instantiation
  fun :: (type, one) one
  one_fun == one_class.one :: 'a => 'b
Found termination order: "(%p. size (snd p)) <*mlex*> {}"
### theory "HOL-Library.Function_Algebras"
### 0.138s elapsed time, 0.571s cpu time, 0.039s GC time
Loading theory "HOL-Library.Old_Datatype" (required by "Draft.AuxiliaryMoreTemplates" via "Draft.Auxiliary" via "HOL-Library.Linear_Temporal_Logic_on_Streams" via "HOL-Library.Extended_Nat" via "HOL-Library.Countable")
consts
  enumerate :: "'a set => nat => 'a"
Found termination order: "size_list size <*mlex*> {}"
### theory "HOL-Library.Infinite_Set"
### 0.278s elapsed time, 1.131s cpu time, 0.039s GC time
Loading theory "HOL-Library.Set_Algebras" (required by "Draft.AuxiliaryMoreTemplates" via "Draft.ExtrEqs" via "HOL-Library.BigO")
instantiation
  set :: (plus) plus
  plus_set == plus :: 'a set => 'a set => 'a set
signature CANCEL = sig val proc: Proof.context -> cterm -> thm option end
functor Cancel_Fun (Data: CANCEL_NUMERALS_DATA): CANCEL
instantiation
  set :: (times) times
  times_set == times :: 'a set => 'a set => 'a set
instantiation
  set :: (zero) zero
  zero_set == zero_class.zero :: 'a set
instantiation
  set :: (one) one
  one_set == one_class.one :: 'a set
### theory "HOL-Library.Nat_Bijection"
### 0.359s elapsed time, 1.441s cpu time, 0.128s GC time
Loading theory "HOL-Library.Stream" (required by "Draft.AuxiliaryMoreTemplates" via "Draft.ExtrEqs")
signature CANCEL_DATA =
  sig
    val dest_coeff: term -> int * term
    val dest_sum: term -> term list
    val find_first_coeff: term -> term list -> int * term list
    val mk_coeff: int * term -> term
    val mk_sum: typ -> term list -> term
    val norm_ss1: simpset
    val norm_ss2: simpset
    val norm_tac: Proof.context -> tactic
    val numeral_simp_tac: Proof.context -> tactic
    val prove_conv:
       tactic list -> Proof.context -> thm list -> term * term -> thm option
    val simplify_meta_eq: Proof.context -> thm -> thm
    val trans_tac: Proof.context -> thm option -> tactic
  end
structure Cancel_Data: CANCEL_DATA
signature CANCEL_SIMPROCS =
  sig
    val diff_cancel: Proof.context -> cterm -> thm option
    val eq_cancel: Proof.context -> cterm -> thm option
    val less_cancel: Proof.context -> cterm -> thm option
    val less_eq_cancel: Proof.context -> cterm -> thm option
  end
structure Cancel_Simprocs: CANCEL_SIMPROCS
### theory "HOL-Library.Cancellation"
### 0.470s elapsed time, 1.878s cpu time, 0.211s GC time
Loading theory "HOL-Library.Multiset" (required by "Draft.AuxiliaryMoreTemplates" via "Draft.Auxiliary")
### theory "HOL-Library.Set_Algebras"
### 0.231s elapsed time, 0.896s cpu time, 0.172s GC time
Loading theory "HOL-Library.Sublist" (required by "Draft.AuxiliaryMoreTemplates" via "Draft.Auxiliary" via "Nested_Multisets_Ordinals.Signed_Multiset" via "Nested_Multisets_Ordinals.Multiset_More")
signature OLD_DATATYPE =
  sig
    val check_specs: spec list -> theory -> spec list * Proof.context
    type config = {quiet: bool, strict: bool}
    val default_config: config
    type descr =
       (int * (string * dtyp list * (string * dtyp list) list)) list
    val distinct_lemma: thm
    datatype dtyp
    = DtRec of int | DtTFree of string * sort | DtType of string * dtyp list
    type info =
       {case_cong: thm,
        case_cong_weak: thm,
        case_name: string,
        case_rewrites: thm list,
        descr: descr,
        distinct: thm list,
        exhaust: thm,
        index: int,
        induct: thm,
        inducts: thm list,
        inject: thm list,
        nchotomy: thm,
        rec_names: string list,
        rec_rewrites: thm list, split: thm, split_asm: thm}
    val read_specs: spec_cmd list -> theory -> spec list * Proof.context
    type spec =
       (binding * (string * sort) list * mixfix) *
       (binding * typ list * mixfix) list
    type spec_cmd =
       (binding * (string * string option) list * mixfix) *
       (binding * string list * mixfix) list
  end
structure Old_Datatype: OLD_DATATYPE
### theory "HOL-Library.Old_Datatype"
### 0.408s elapsed time, 1.602s cpu time, 0.172s GC time
Loading theory "HOL-Library.Tree" (required by "Draft.AuxiliaryMoreTemplates" via "Draft.ExtrEqs" via "Draft.Templates")
instantiation
  multiset :: (type) cancel_comm_monoid_add
  zero_multiset == zero_class.zero :: 'a multiset
  minus_multiset == minus :: 'a multiset => 'a multiset => 'a multiset
  plus_multiset == plus :: 'a multiset => 'a multiset => 'a multiset
consts
  shift :: "'a list => 'a stream => 'a stream"
Proofs for coinductive predicate(s) "streamsp"
  Proving monotonicity ...
consts
  prefixes :: "'a list => 'a list list"
consts
  snth :: "'a stream => nat => 'a"
consts
  stake :: "nat => 'a stream => 'a list"
consts
  sdrop :: "nat => 'a stream => 'a stream"
Found termination order: "(%p. length (snd p)) <*mlex*> {}"
consts
  sfilter :: "('a => bool) => 'a stream => 'a stream"
consts
  cycle :: "'a list => 'a stream"
consts
  siterate :: "('a => 'a) => 'a => 'a stream"
consts
  flat :: "'a list stream => 'a stream"
consts
  left :: "'a tree => 'a tree"
consts
  right :: "'a tree => 'a tree"
consts
  sinterleave :: "'a stream => 'a stream => 'a stream"
### Partially applied constant "Multiset.inter_mset" on left hand side of equation, in theorem:
### semilattice_inf.Inf_fin (\<inter>#) (set (?x # ?xs)) ==
### fold (\<inter>#) ?xs ?x
Found termination order: "size <*mlex*> {}"
consts
  szip :: "'a stream => 'b stream => ('a * 'b) stream"
consts
  smap2 :: "('a => 'b => 'c) => 'a stream => 'b stream => 'c stream"
### Partially applied constant "Multiset.union_mset" on left hand side of equation, in theorem:
### semilattice_sup.Sup_fin (\<union>#) (set (?x # ?xs)) ==
### fold (\<union>#) ?xs ?x
Found termination order: "size <*mlex*> {}"
### theory "HOL-Library.Stream"
### 1.148s elapsed time, 4.370s cpu time, 1.058s GC time
Loading theory "HOL-Library.Countable" (required by "Draft.AuxiliaryMoreTemplates" via "Draft.Auxiliary" via "HOL-Library.Linear_Temporal_Logic_on_Streams" via "HOL-Library.Extended_Nat")
consts
  suffixes :: "'a list => 'a list list"
Found termination order: "size <*mlex*> {}"
Proofs for inductive predicate(s) "list_emb"
  Proving monotonicity ...
class height = type +
  fixes height :: "'a => nat"
instantiation
  tree :: (type) height
  height_tree == height :: 'a tree => nat
Found termination order: "size <*mlex*> {}"
signature MULTISET_SIMPROCS =
  sig
    val subset_cancel_msets: Proof.context -> cterm -> thm option
    val subseteq_cancel_msets: Proof.context -> cterm -> thm option
  end
structure Multiset_Simprocs: MULTISET_SIMPROCS
Found termination order: "size <*mlex*> {}"
instantiation
  multiset :: (type) Inf
  Inf_multiset == Inf :: 'a multiset set => 'a multiset
instantiation
  multiset :: (type) Sup
  Sup_multiset == Sup :: 'a multiset set => 'a multiset
Found termination order: "size <*mlex*> {}"
Found termination order: "size <*mlex*> {}"
instantiation
  multiset :: (type) size
  size_multiset == size :: 'a multiset => nat
### Additional type variable(s) in locale specification "countable": 'a
Found termination order: "size <*mlex*> {}"
class countable = type +
  assumes "ex_inj": "EX to_nat. inj to_nat"
Found termination order: "size <*mlex*> {}"
locale comp_fun_commute
  fixes f :: "'a => 'b => 'b"
  assumes "comp_fun_commute f"
Found termination order: "size <*mlex*> {}"
consts
  mset :: "'a list => 'a multiset"
consts
  sublists :: "'a list => 'a list list"
Found termination order: "(%p. size (fst p)) <*mlex*> {}"
Proofs for inductive predicate(s) "finite_item"
  Proving monotonicity ...
### theory "HOL-Library.Sublist"
### 1.724s elapsed time, 6.634s cpu time, 1.311s GC time
Loading theory "HOL-Library.BigO" (required by "Draft.AuxiliaryMoreTemplates" via "Draft.ExtrEqs")
Found termination order: "size <*mlex*> {}"
class linorder = order +
  assumes "linear": "!!x y. x <= y | y <= x"
Found termination order: "(%p. size (snd p)) <*mlex*> {}"
val old_countable_datatype_tac = fn: Proof.context -> int -> tactic
### ML warning (line 93 of "~~/src/HOL/Tools/BNF/bnf_lfp_countable.ML"):
### Pattern is not exhaustive.
### ML warning (line 139 of "~~/src/HOL/Tools/BNF/bnf_lfp_countable.ML"):
### Pattern is not exhaustive.
### ML warning (line 143 of "~~/src/HOL/Tools/BNF/bnf_lfp_countable.ML"):
### Matches are not exhaustive.
### ML warning (line 145 of "~~/src/HOL/Tools/BNF/bnf_lfp_countable.ML"):
### Matches are not exhaustive.
### ML warning (line 156 of "~~/src/HOL/Tools/BNF/bnf_lfp_countable.ML"):
### Pattern is not exhaustive.
signature BNF_LFP_COUNTABLE =
  sig
    val countable_datatype_tac: Proof.context -> tactic
    val derive_encode_injectives_thms:
       Proof.context -> string list -> thm list
  end
structure BNF_LFP_Countable: BNF_LFP_COUNTABLE
locale comm_monoid_mset
  fixes f :: "'a => 'a => 'a"  (infixl \<open>\<^bold>*\<close> 70)
    and z :: "'a"  (\<open>\<^bold>1\<close>)
  assumes "comm_monoid_mset (\<^bold>*) \<^bold>1"
val countable_datatype_tac = fn: Proof.context -> thm -> thm Seq.seq
val countable_tac = fn: Proof.context -> int -> tactic
class comm_monoid_add = ab_semigroup_add + monoid_add +
  assumes "add_0": "!!a. (0::'a) + a = a"
class comm_monoid_add = ab_semigroup_add + monoid_add +
  assumes "add_0": "!!a. (0::'a) + a = a"
Found termination order: "size <*mlex*> {}"
class canonically_ordered_monoid_add = ordered_comm_monoid_add +
  assumes "le_iff_add": "!!a b. (a <= b) = (EX c. b = a + c)"
### theory "HOL-Library.Countable"
### 1.227s elapsed time, 4.808s cpu time, 0.543s GC time
Loading theory "HOL-Library.Countable_Set" (required by "Draft.AuxiliaryMoreTemplates" via "Draft.Auxiliary" via "HOL-Library.Linear_Temporal_Logic_on_Streams" via "HOL-Library.Extended_Nat" via "HOL-Library.Order_Continuity" via "HOL-Library.Countable_Complete_Lattices")
### theory "HOL-Library.Tree"
### 2.314s elapsed time, 8.947s cpu time, 1.582s GC time
Loading theory "Draft.Templates" (required by "Draft.AuxiliaryMoreTemplates" via "Draft.ExtrEqs")
datatype template_term
=
     t_empty
   | template_app of template_term * template_term
   | template_hole of int
   | template_var of int
datatype sign
= equals | greater_equals | greater_than | less_equals | less_than
datatype template
=
     template_bimplication of template * template
   | template_dunno
   | template_equation of template_term * template_term
   | template_implication of template list * template
   | template_inequation of sign * template_term * template_term
   | template_negation of template
   | template_predicate of template_term
constructor t_empty: template_term
constructor template_app: template_term * template_term -> template_term
constructor template_hole: int -> template_term
constructor template_var: int -> template_term
constructor equals: sign
constructor greater_equals: sign
constructor greater_than: sign
constructor less_equals: sign
constructor less_than: sign
constructor template_bimplication: template * template -> template
constructor template_dunno: template
constructor template_equation: template_term * template_term -> template
constructor template_implication: template list * template -> template
constructor template_inequation:
   sign * template_term * template_term -> template
constructor template_negation: template -> template
constructor template_predicate: template_term -> template
val vfs = fn: term -> (indexname * typ) list * (string * typ) list
val indexOf = fn: ''a list -> ''a -> int -> int
val has_eq = fn: term -> bool
val term2template = fn:
   (indexname * typ) list -> (string * typ) list -> term -> template_term
val lemma2predicate = fn: term -> term -> template
val makeTemplatewithContext = fn: term -> term -> template
val lemma2template = fn: term -> template
val thm2template = fn: thm -> template
val tterm2string = fn: template_term -> string
val template2string = fn: template -> string
val t = "height ?t <= size ?t": thm
val th =
   Const ("HOL.Trueprop", "bool => prop") $
     (Const ("Orderings.ord_class.less_eq", "nat => nat => bool") $
       (Const ("Tree.height_class.height", "?'a tree => nat") $
         Var (("t", 0), "?'a tree")) $
       (Const ("Nat.size_class.size", "?'a tree => nat") $
         Var (("t", 0), "?'a tree"))):
   term
### theory "Draft.Templates"
### 0.066s elapsed time, 0.260s cpu time, 0.000s GC time
class comm_monoid_mult = ab_semigroup_mult + monoid_mult + dvd +
  assumes "mult_1": "!!a. (1::'a) * a = a"
locale comm_monoid_set
  fixes f :: "'a => 'a => 'a"  (infixl \<open>\<^bold>*\<close> 70)
    and z :: "'a"  (\<open>\<^bold>1\<close>)
  assumes "comm_monoid_set (\<^bold>*) \<^bold>1"
### theory "HOL-Library.BigO"
### 0.846s elapsed time, 3.165s cpu time, 0.329s GC time
Loading theory "Draft.ExtrEqs" (required by "Draft.AuxiliaryMoreTemplates")
### theory "HOL-Library.Countable_Set"
### 0.461s elapsed time, 1.566s cpu time, 0.170s GC time
Loading theory "HOL-Library.Countable_Complete_Lattices" (required by "Draft.AuxiliaryMoreTemplates" via "Draft.Auxiliary" via "HOL-Library.Linear_Temporal_Logic_on_Streams" via "HOL-Library.Extended_Nat" via "HOL-Library.Order_Continuity")
class linorder = order +
  assumes "linear": "!!x y. x <= y | y <= x"
class countable_complete_lattice = Inf + Sup + lattice + bot + top +
  assumes "ccInf_lower": "!!A x. [| countable A; x : A |] ==> Inf A <= x"
  assumes
    "ccInf_greatest":
      "!!A z. [| countable A; !!x. x : A ==> z <= x |] ==> z <= Inf A"
  assumes "ccSup_upper": "!!A x. [| countable A; x : A |] ==> x <= Sup A"
  assumes
    "ccSup_least":
      "!!A z. [| countable A; !!x. x : A ==> x <= z |] ==> Sup A <= z"
  assumes "ccInf_empty": "Inf {} = top"
  assumes "ccSup_empty": "Sup {} = bot"
instantiation
  multiset :: (preorder) order
  less_eq_multiset == less_eq :: 'a multiset => 'a multiset => bool
  less_multiset == less :: 'a multiset => 'a multiset => bool
instantiation
  multiset :: (preorder) ordered_ab_semigroup_add
val eqpattern =
   Pattern
    (
       Const ("HOL.Trueprop", "bool => prop") $
         (Const ("HOL.eq", "?'a => ?'a => bool") $
           Var (("_dummy_", 1), "?'a") $ Var (("_dummy_", 2), "?'a"))
       ):
   term Find_Theorems.criterion
val badeqpattern = Pattern (Const ("Pure.eq", "?'a => ?'a => prop")):
   term Find_Theorems.criterion
val undefpattern =
   Pattern
    (
       Const ("HOL.Trueprop", "bool => prop") $
         (Const ("HOL.eq", "?'a => ?'a => bool") $
           Var (("_dummy_", 1), "?'a") $ Const ("HOL.undefined", "?'a"))
       ):
   term Find_Theorems.criterion
val thmpattern =
   Pattern
    (Const ("HOL.Trueprop", "bool => prop") $ Var (("_dummy_", 1), "bool")):
   term Find_Theorems.criterion
val badnames =
   ["*nitpick*", "*Nitpick*", "*full_exhaustive*", "*_def*", "Enum.finite*",
    "*Quickcheck*", "ATP*", "*Nunchaku*", "*Code*", "*BNF*", "*SMT*",
    "*.*.*"]:
   string list
val unwanted_names =
   [(false, Name "*nitpick*"), (false, Name "*Nitpick*"),
    (false, Name "*full_exhaustive*"), (false, Name "*_def*"),
    (false, Name "Enum.finite*"), (false, Name "*Quickcheck*"),
    (false, Name "ATP*"), (false, Name "*Nunchaku*"),
    (false, Name "*Code*"), (false, Name "*BNF*"), (false, Name "*SMT*"),
    (false, Name "*.*.*")]:
   (bool * term Find_Theorems.criterion) list
val has_vars = fn: term -> bool
val get_all_eqs = fn: string -> Proof.context -> (string * thm) list
val get_all_thms = fn: string -> Proof.context -> (string * thm) list
val get_noneq_thms = fn: string -> Proof.context -> (string * thm) list
val template_eqs = fn:
   string -> Proof.context -> (string * thm * template) list
val template_thms = fn:
   string -> Proof.context -> (string * thm * template) list
### theory "Draft.ExtrEqs"
### 0.619s elapsed time, 1.871s cpu time, 0.160s GC time
Proofs for inductive predicate(s) "pw_leq"
  Proving monotonicity ...
Found termination order: "(%p. length (fst p)) <*mlex*> {}"
instantiation
  multiset :: (equal) equal
  equal_multiset == equal_class.equal :: 'a multiset => 'a multiset => bool
instantiation
  multiset :: (random) random
  random_multiset == random_class.random ::
    natural
    => natural * natural
       => ('a multiset * (unit => term)) * natural * natural
instantiation
  multiset :: (full_exhaustive) full_exhaustive
  full_exhaustive_multiset == full_exhaustive_class.full_exhaustive ::
    ('a multiset * (unit => term) => (bool * term list) option)
    => natural => (bool * term list) option
Proofs for inductive predicate(s) "pred_mset"
  Proving monotonicity ...
Proofs for inductive predicate(s) "rel_mset'"
  Proving monotonicity ...
### theory "HOL-Library.Multiset"
### 3.682s elapsed time, 12.773s cpu time, 1.920s GC time
Loading theory "HOL-Library.Multiset_Order" (required by "Draft.AuxiliaryMoreTemplates" via "Draft.Auxiliary" via "Nested_Multisets_Ordinals.Signed_Multiset" via "Nested_Multisets_Ordinals.Multiset_More")
class preorder = ord +
  assumes "less_le_not_le": "!!x y. (x < y) = (x <= y & ~ y <= x)"
    and "order_refl": "!!x. x <= x"
    and "order_trans": "!!x y z. [| x <= y; y <= z |] ==> x <= z"
instantiation
  multiset :: (preorder) ordered_ab_semigroup_monoid_add_imp_le
instantiation
  multiset :: (wellorder) wellorder
instantiation
  multiset :: (preorder) order_bot
  bot_multiset == bot :: 'a multiset
instantiation
  multiset :: (linorder) distrib_lattice
  inf_multiset == inf :: 'a multiset => 'a multiset => 'a multiset
  sup_multiset == sup :: 'a multiset => 'a multiset => 'a multiset
### theory "HOL-Library.Multiset_Order"
### 0.210s elapsed time, 0.524s cpu time, 0.076s GC time
Loading theory "Nested_Multisets_Ordinals.Multiset_More" (required by "Draft.AuxiliaryMoreTemplates" via "Draft.Auxiliary" via "Nested_Multisets_Ordinals.Signed_Multiset")
class countable_complete_distrib_lattice = countable_complete_lattice +
  assumes
    "sup_ccInf": "!!B a. countable B ==> sup a (Inf B) = Inf (sup a ` B)"
  assumes
    "inf_ccSup": "!!B a. countable B ==> inf a (Sup B) = Sup (inf a ` B)"
### theory "Nested_Multisets_Ordinals.Multiset_More"
### 0.557s elapsed time, 1.242s cpu time, 0.156s GC time
Loading theory "Nested_Multisets_Ordinals.Signed_Multiset" (required by "Draft.AuxiliaryMoreTemplates" via "Draft.Auxiliary")
### theory "HOL-Library.Countable_Complete_Lattices"
### 1.836s elapsed time, 4.489s cpu time, 0.464s GC time
Loading theory "HOL-Library.Order_Continuity" (required by "Draft.AuxiliaryMoreTemplates" via "Draft.Auxiliary" via "HOL-Library.Linear_Temporal_Logic_on_Streams" via "HOL-Library.Extended_Nat")
instantiation
  zmultiset :: (type) cancel_comm_monoid_add
  zero_zmultiset == zero_class.zero :: 'a zmultiset
  minus_zmultiset == minus :: 'a zmultiset => 'a zmultiset => 'a zmultiset
  plus_zmultiset == plus :: 'a zmultiset => 'a zmultiset => 'a zmultiset
instantiation
  zmultiset :: (type) group_add
  uminus_zmultiset == uminus :: 'a zmultiset => 'a zmultiset
### theory "HOL-Library.Order_Continuity"
### 0.466s elapsed time, 0.977s cpu time, 0.116s GC time
Loading theory "HOL-Library.Extended_Nat" (required by "Draft.AuxiliaryMoreTemplates" via "Draft.Auxiliary" via "HOL-Library.Linear_Temporal_Logic_on_Streams")
Found termination order: "(%p. size (fst p)) <*mlex*> {}"
class infinity = type +
  fixes infinity :: "'a"
instantiation
  zmultiset :: (preorder) order
  less_eq_zmultiset == less_eq :: 'a zmultiset => 'a zmultiset => bool
  less_zmultiset == less :: 'a zmultiset => 'a zmultiset => bool
instantiation
  enat :: infinity
  infinity_enat == infinity :: enat
instantiation
  zmultiset :: (linorder) distrib_lattice
  inf_zmultiset == inf :: 'a zmultiset => 'a zmultiset => 'a zmultiset
  sup_zmultiset == sup :: 'a zmultiset => 'a zmultiset => 'a zmultiset
Proofs for inductive predicate(s) "rec_set_enat"
signature ZMULTISET_SIMPROCS =
  sig
    val subset_cancel_zmsets: Proof.context -> cterm -> thm option
    val subseteq_cancel_zmsets: Proof.context -> cterm -> thm option
  end
structure ZMultiset_Simprocs: ZMULTISET_SIMPROCS
### theory "Nested_Multisets_Ordinals.Signed_Multiset"
### 0.786s elapsed time, 1.642s cpu time, 0.178s GC time
### No equation for constructor "Extended_Nat.infinity_class.infinity"
### in definition of function "the_enat"
consts
  the_enat :: "enat => nat"
instantiation
  enat :: zero_neq_one
  one_enat == one_class.one :: enat
  zero_enat == zero_class.zero :: enat
instantiation
  enat :: comm_monoid_add
  plus_enat == plus :: enat => enat => enat
instantiation
  enat :: {comm_semiring_1,semiring_no_zero_divisors}
  times_enat == times :: enat => enat => enat
instantiation
  enat :: minus
  minus_enat == minus :: enat => enat => enat
instantiation
  enat :: linordered_ab_semigroup_add
  less_eq_enat == less_eq :: enat => enat => bool
  less_enat == less :: enat => enat => bool
instantiation
  enat :: {order_bot,order_top}
  top_enat == top :: enat
  bot_enat == bot :: enat
structure Cancel_Enat_Common:
  sig
    val dest_sum: term -> term list
    val dest_summing: term * term list -> term list
    val find_first: term -> term list -> term list
    val find_first_t: term list -> term -> term list -> term list
    val mk_eq: term * term -> term
    val mk_sum: typ -> term list -> term
    val norm_ss: simpset
    val norm_tac: Proof.context -> tactic
    val simplify_meta_eq: Proof.context -> thm -> thm -> thm
    val trans_tac: Proof.context -> thm option -> tactic
  end
structure Eq_Enat_Cancel:
  sig val proc: Proof.context -> term -> thm option end
structure Le_Enat_Cancel:
  sig val proc: Proof.context -> term -> thm option end
structure Less_Enat_Cancel:
  sig val proc: Proof.context -> term -> thm option end
instantiation
  enat :: complete_lattice
  Inf_enat == Inf :: enat set => enat
  Sup_enat == Sup :: enat set => enat
  sup_enat == sup :: enat => enat => enat
  inf_enat == inf :: enat => enat => enat
### theory "HOL-Library.Extended_Nat"
### 0.540s elapsed time, 0.897s cpu time, 0.092s GC time
Loading theory "HOL-Library.Linear_Temporal_Logic_on_Streams" (required by "Draft.AuxiliaryMoreTemplates" via "Draft.Auxiliary")
Found termination order: "{}"
Found termination order: "{}"
Proofs for inductive predicate(s) "ev"
  Proving monotonicity ...
Proofs for coinductive predicate(s) "alw"
  Proving monotonicity ...
Proofs for coinductive predicate(s) "UNTIL"
  Proving monotonicity ...
Proofs for inductive predicate(s) "ev_at"
  Proving monotonicity ...
Proofs for inductive predicate(s) "suntil"
  Proving monotonicity ...
### theory "HOL-Library.Linear_Temporal_Logic_on_Streams"
### 0.830s elapsed time, 0.936s cpu time, 0.148s GC time
Loading theory "Draft.Auxiliary" (required by "Draft.AuxiliaryMoreTemplates")
### theory "Draft.Auxiliary"
### 1.210s elapsed time, 2.241s cpu time, 1.424s GC time
Loading theory "Draft.AuxiliaryMoreTemplates"
val templateLemmas =
   [("Auxiliary.image_zmset_empty",
     "Auxiliary.image_zmset ?f {#}\<^sub>z = {#}\<^sub>z",
     template_equation
      (template_app
        (template_app (template_hole 2, template_var 0), template_hole 1),
       template_hole 0)),
    ("Auxiliary.zcount_zmset_of_nonneg", "0 <= zcount (zmset_of ?M) ?t",
     template_inequation
      (less_equals, template_hole 2,
       template_app
        (template_app
          (template_hole 1, template_app (template_hole 0, template_var 1)),
         template_var 0))),
    ("Auxiliary.finite_zcount_pos", "finite {t. 0 < zcount ?M t}",
     template_predicate
      (
         template_app
          (template_hole 4, template_app (template_hole 3, t_empty))
         )),
    ("Auxiliary.finite_zcount_neg", "finite {t. zcount ?M t < 0}",
     template_predicate
      (
         template_app
          (template_hole 4, template_app (template_hole 3, t_empty))
         )),
    ("Auxiliary.finite_nonzero_count", "finite {t. 0 < count ?M t}",
     template_predicate
      (
         template_app
          (template_hole 4, template_app (template_hole 3, t_empty))
         )),
    ("Auxiliary.finite_count", "finite {t. ?i < count ?M t}",
     template_predicate
      (
         template_app
          (template_hole 3, template_app (template_hole 2, t_empty))
         )),
    ("Auxiliary.mset_pos_mset_neg_disjoint",
     "set_mset (mset_pos ?\<Delta>) Int set_mset (mset_neg ?\<Delta>) = {}",
     template_equation
      (template_app
        (template_app
          (template_hole 4,
           template_app
            (template_hole 3,
             template_app (template_hole 2, template_var 0))),
         template_app
          (template_hole 3,
           template_app (template_hole 1, template_var 0))),
       template_hole 0)),
    ("Auxiliary.mset_neg_minus",
     "mset_neg (abs_zmultiset (?Mp, ?Mn)) = ?Mn - ?Mp",
     template_equation
      (template_app
        (template_hole 3,
         template_app
          (template_hole 2,
           template_app
            (template_app (template_hole 1, template_var 1),
             template_var 0))),
       template_app
        (template_app (template_hole 0, template_var 0), template_var 1))),
    ("Auxiliary.mset_pos_minus",
     "mset_pos (abs_zmultiset (?Mp, ?Mn)) = ?Mp - ?Mn",
     template_equation
      (template_app
        (template_hole 3,
         template_app
          (template_hole 2,
           template_app
            (template_app (template_hole 1, template_var 1),
             template_var 0))),
       template_app
        (template_app (template_hole 0, template_var 1), template_var 0))),
    ("Auxiliary.set_zmset_eq_set_mset_union",
     "set_zmset ?M = set_mset (mset_pos ?M) Un set_mset (mset_neg ?M)",
     template_equation
      (template_app (template_hole 4, template_var 0),
       template_app
        (template_app
          (template_hole 3,
           template_app
            (template_hole 2,
             template_app (template_hole 1, template_var 0))),
         template_app
          (template_hole 2,
           template_app (template_hole 0, template_var 0))))),
    ("Auxiliary.mem_zmset_of", "(?x :#z zmset_of ?M) = (?x :# ?M)",
     template_equation
      (template_app
        (template_app (template_hole 3, template_var 1),
         template_app
          (template_hole 2,
           template_app (template_hole 1, template_var 0))),
       template_app
        (template_app (template_hole 3, template_var 1),
         template_app (template_hole 0, template_var 0)))),
    ("Auxiliary.image_zmset_single",
     "Auxiliary.image_zmset ?f {#?x#}\<^sub>z = {#?f ?x#}\<^sub>z",
     template_equation
      (template_app
        (template_app (template_hole 4, template_var 1),
         template_app
          (template_app (template_hole 3, template_var 0),
           template_hole 2)),
       template_app
        (template_app
          (template_hole 1, template_app (template_var 1, template_var 0)),
         template_hole 0))),
    ("Auxiliary.member_mset_neg_iff_zcount",
     "(?x :# mset_neg ?M) = (zcount ?M ?x < 0)",
     template_equation
      (template_app
        (template_app (template_hole 5, template_var 1),
         template_app
          (template_hole 4,
           template_app (template_hole 3, template_var 0))),
       template_app
        (template_app
          (template_hole 2,
           template_app
            (template_app (template_hole 1, template_var 0),
             template_var 1)),
         template_hole 0))),
    ("Auxiliary.member_mset_pos_iff_zcount",
     "(?x :# mset_pos ?M) = (0 < zcount ?M ?x)",
     template_equation
      (template_app
        (template_app (template_hole 5, template_var 1),
         template_app
          (template_hole 4,
           template_app (template_hole 3, template_var 0))),
       template_app
        (template_app (template_hole 2, template_hole 1),
         template_app
          (template_app (template_hole 0, template_var 0),
           template_var 1)))),
    ("Auxiliary.zero_le_sum_single",
     "0 <= zcount (SUM x:?M. {#?f x#}\<^sub>z) ?t",
     template_inequation
      (less_equals, template_hole 4,
       template_app
        (template_app
          (template_hole 3,
           template_app
            (template_app (template_hole 2, t_empty), template_var 1)),
         template_var 0))),
    ("Auxiliary.relatesD", "relates ?P ?s ==> ?P (shd ?s) (shd (stl ?s))",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 2, template_var 1),
              template_var 0)
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_var 1,
               template_app (template_hole 1, template_var 0)),
             template_app
              (template_hole 1,
               template_app (template_hole 0, template_var 0)))
           ))),
    ("Auxiliary.mset_neg_zcount_nonneg",
     "mset_neg ?M = {#} ==> 0 <= zcount ?M ?t",
     template_implication
      ([template_equation
         (template_app (template_hole 4, template_var 1), template_hole 3)],
       template_inequation
        (less_equals, template_hole 1,
         template_app
          (template_app (template_hole 0, template_var 1),
           template_var 0)))),
    ("Auxiliary.pos_zcount_in_zmset", "0 < zcount ?M ?x ==> ?x :#z ?M",
     template_implication
      ([template_inequation
         (less_than, template_hole 3,
          template_app
           (template_app (template_hole 2, template_var 1),
            template_var 0))],
       template_predicate
        (
           template_app
            (template_app (template_hole 1, template_var 0),
             template_app (template_hole 0, template_var 1))
           ))),
    ("Auxiliary.in_mset_neg_in_zmset", "?x :# mset_neg ?M ==> ?x :#z ?M",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 3, template_var 1),
              template_app
               (template_hole 2,
                template_app (template_hole 1, template_var 0)))
            )],
       template_predicate
        (
           template_app
            (template_app (template_hole 3, template_var 1),
             template_app (template_hole 0, template_var 0))
           ))),
    ("Auxiliary.in_mset_pos_in_zmset", "?x :# mset_pos ?M ==> ?x :#z ?M",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 3, template_var 1),
              template_app
               (template_hole 2,
                template_app (template_hole 1, template_var 0)))
            )],
       template_predicate
        (
           template_app
            (template_app (template_hole 3, template_var 1),
             template_app (template_hole 0, template_var 0))
           ))),
    ("Auxiliary.relatesI", "?P (shd ?s) (shd (stl ?s)) ==> relates ?P ?s",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_var 1,
                template_app (template_hole 2, template_var 0)),
              template_app
               (template_hole 2,
                template_app (template_hole 1, template_var 0)))
            )],
       template_predicate
        (
           template_app
            (template_app (template_hole 0, template_var 1), template_var 0)
           ))),
    ("Auxiliary.zcount_filter_invariant",
     "zcount {#t' :#z ?M. t' = ?t#} ?t = zcount ?M ?t",
     template_equation
      (template_app
        (template_app
          (template_hole 2,
           template_app
            (template_app (template_hole 1, t_empty), template_var 0)),
         template_var 1),
       template_app
        (template_app (template_hole 2, template_var 0), template_var 1))),
    ("Auxiliary.mset_neg_empty_iff",
     "(mset_neg ?M = {#}) = (ALL t. 0 <= zcount ?M t)",
     template_equation
      (template_app
        (template_app
          (template_hole 6, template_app (template_hole 5, template_var 0)),
         template_hole 4),
       template_app (template_hole 3, t_empty))),
    ("Auxiliary.image_zmset_add_zmset",
     "Auxiliary.image_zmset ?f (add_zmset ?t ?M) =
      add_zmset (?f ?t) (Auxiliary.image_zmset ?f ?M)",
     template_equation
      (template_app
        (template_app (template_hole 2, template_var 2),
         template_app
          (template_app (template_hole 1, template_var 1), template_var 0)),
       template_app
        (template_app
          (template_hole 0, template_app (template_var 2, template_var 1)),
         template_app
          (template_app (template_hole 2, template_var 2),
           template_var 0)))),
    ("Auxiliary.mset_neg_image_zmset",
     "mset_neg ?M = {#} ==> mset_neg (Auxiliary.image_zmset ?f ?M) = {#}",
     template_implication
      ([template_equation
         (template_app (template_hole 5, template_var 1), template_hole 4)],
       template_equation
        (template_app
          (template_hole 2,
           template_app
            (template_app (template_hole 1, template_var 0),
             template_var 1)),
         template_hole 0))),
    ("Auxiliary.alw_relatesD",
     "alw (relates ?P) ?s ==> ?P (shd ?s) (shd (stl ?s))",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_hole 3,
                template_app (template_hole 2, template_var 1)),
              template_var 0)
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_var 1,
               template_app (template_hole 1, template_var 0)),
             template_app
              (template_hole 1,
               template_app (template_hole 0, template_var 0)))
           ))),
    ("Auxiliary.in_filter_zmset_in_zmset",
     "?x :#z filter_zmset ?P ?M ==> ?x :#z ?M",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 2, template_var 2),
              template_app
               (template_hole 1,
                template_app
                 (template_app (template_hole 0, template_var 1),
                  template_var 0)))
            )],
       template_predicate
        (
           template_app
            (template_app (template_hole 2, template_var 2),
             template_app (template_hole 1, template_var 0))
           ))),
    ("Auxiliary.image_zmset_Diff",
     "Auxiliary.image_zmset ?f (?A - ?B) =
      Auxiliary.image_zmset ?f ?A - Auxiliary.image_zmset ?f ?B",
     template_equation
      (template_app
        (template_app (template_hole 2, template_var 2),
         template_app
          (template_app (template_hole 1, template_var 1), template_var 0)),
       template_app
        (template_app
          (template_hole 0,
           template_app
            (template_app (template_hole 2, template_var 2),
             template_var 1)),
         template_app
          (template_app (template_hole 2, template_var 2),
           template_var 0)))),
    ("Auxiliary.image_zmset_union",
     "Auxiliary.image_zmset ?f (?M + ?N) =
      Auxiliary.image_zmset ?f ?M + Auxiliary.image_zmset ?f ?N",
     template_equation
      (template_app
        (template_app (template_hole 2, template_var 2),
         template_app
          (template_app (template_hole 1, template_var 1), template_var 0)),
       template_app
        (template_app
          (template_hole 0,
           template_app
            (template_app (template_hole 2, template_var 2),
             template_var 1)),
         template_app
          (template_app (template_hole 2, template_var 2),
           template_var 0)))),
    ("Auxiliary.finite_distinct_bounded",
     "finite ?A ==> finite {xs. distinct xs & set xs <= ?A}",
     template_implication
      ([template_predicate
         (template_app (template_hole 6, template_var 0))],
       template_predicate
        (
           template_app
            (template_hole 5, template_app (template_hole 4, t_empty))
           ))),
    ("Auxiliary.in_image_zmset_in_zmset",
     "?t :#z Auxiliary.image_zmset ?f ?M ==> EX t. t :#z ?M",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 5, template_var 2),
              template_app
               (template_hole 4,
                template_app
                 (template_app (template_hole 3, template_var 1),
                  template_var 0)))
            )],
       template_predicate (template_app (template_hole 2, t_empty)))),
    ("Auxiliary.pos_filter_zmset_pos_zmset",
     "0 < zcount (filter_zmset ?P ?M) ?x ==> 0 < zcount ?M ?x",
     template_implication
      ([template_inequation
         (less_than, template_hole 2,
          template_app
           (template_app
             (template_hole 1,
              template_app
               (template_app (template_hole 0, template_var 2),
                template_var 1)),
            template_var 0))],
       template_inequation
        (less_than, template_hole 2,
         template_app
          (template_app (template_hole 1, template_var 1),
           template_var 0)))),
    ("Auxiliary.neg_filter_zmset_neg_zmset",
     "zcount (filter_zmset ?P ?M) ?x < 0 ==> zcount ?M ?x < 0",
     template_implication
      ([template_inequation
         (less_than,
          template_app
           (template_app
             (template_hole 2,
              template_app
               (template_app (template_hole 1, template_var 2),
                template_var 1)),
            template_var 0),
          template_hole 0)],
       template_inequation
        (less_than,
         template_app
          (template_app (template_hole 2, template_var 1), template_var 0),
         template_hole 0))),
    ("Auxiliary.zcount_sum",
     "zcount (sum ?f ?MM) ?t = (SUM M:?MM. zcount (?f M) ?t)",
     template_equation
      (template_app
        (template_app
          (template_hole 2,
           template_app
            (template_app (template_hole 1, t_empty), template_var 1)),
         template_var 0),
       template_app
        (template_app (template_hole 0, t_empty), template_var 1))),
    ("Auxiliary.alw_holds_smap_conv_comp",
     "alw (holds ?P) (smap ?f ?s) = alw (%s. (?P o ?f) (shd s)) ?s",
     template_equation
      (template_app
        (template_app
          (template_hole 5, template_app (template_hole 4, template_var 2)),
         template_app
          (template_app (template_hole 3, template_var 1), template_var 0)),
       template_app
        (template_app (template_hole 2, t_empty), template_var 0))),
    ("Auxiliary.in_zmset_conv_pos_neg_disj",
     "(?x :#z ?M) = (?x :# mset_pos ?M | ?x :# mset_neg ?M)",
     template_equation
      (template_app
        (template_app (template_hole 5, template_var 1),
         template_app (template_hole 4, template_var 0)),
       template_app
        (template_app
          (template_hole 3,
           template_app
            (template_app (template_hole 5, template_var 1),
             template_app
              (template_hole 2,
               template_app (template_hole 1, template_var 0)))),
         template_app
          (template_app (template_hole 5, template_var 1),
           template_app
            (template_hole 2,
             template_app (template_hole 0, template_var 0)))))),
    ("Auxiliary.sum_list_hd_tl",
     "?xs ~= [] ==> sum_list (tl ?xs) = - hd ?xs + sum_list ?xs",
     template_implication
      ([template_negation
         (template_equation (template_var 0, template_hole 6))],
       template_equation
        (template_app
          (template_hole 4, template_app (template_hole 3, template_var 0)),
         template_app
          (template_app
            (template_hole 2,
             template_app
              (template_hole 1,
               template_app (template_hole 0, template_var 0))),
           template_app (template_hole 4, template_var 0))))),
    ("Auxiliary.sum_pos_ex_elem_pos", "0 < sum ?f ?M ==> EX m:?M. 0 < ?f m",
     template_implication
      ([template_inequation
         (less_than, template_hole 2,
          template_app
           (template_app (template_hole 1, t_empty), template_var 0))],
       template_predicate
        (
           template_app
            (template_app (template_hole 0, template_var 0), t_empty)
           ))),
    ("Auxiliary.zmset_empty_image_zmset_empty",
     "(!!t. zcount ?M t = 0) ==>
      zcount (Auxiliary.image_zmset ?f ?M) ?t = 0",
     template_implication
      ([template_predicate (template_app (template_hole 6, t_empty))],
       template_equation
        (template_app
          (template_app
            (template_hole 1,
             template_app
              (template_app (template_hole 0, template_var 1),
               template_var 2)),
           template_var 0),
         template_hole 2))),
    ("Auxiliary.nonneg_zcount_image_zmset",
     "(!!t. 0 <= zcount ?M t) ==>
      0 <= zcount (Auxiliary.image_zmset ?f ?M) ?t",
     template_implication
      ([template_predicate (template_app (template_hole 6, t_empty))],
       template_inequation
        (less_equals, template_hole 3,
         template_app
          (template_app
            (template_hole 1,
             template_app
              (template_app (template_hole 0, template_var 1),
               template_var 2)),
           template_var 0)))),
    ("Auxiliary.zcount_update_zmultiset",
     "zcount (update_zmultiset ?M ?t ?n) ?t' =
      zcount ?M ?t' + (if ?t = ?t' then ?n else 0)",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_hole 5,
                template_app
                 (template_app
                   (template_app (template_hole 4, template_var 3),
                    template_var 2),
                  template_var 1)),
              template_var 0)
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 3,
               template_app
                (template_app (template_hole 5, template_var 3),
                 template_var 0)),
             template_app
              (template_app
                (template_app
                  (template_hole 2,
                   template_app
                    (template_app (template_hole 1, template_var 2),
                     template_var 0)),
                 template_var 1),
               template_hole 0))
           ))),
    ("Auxiliary.alw_relates",
     "alw (relates ?P) ?s =
      (?P (shd ?s) (shd (stl ?s)) & alw (relates ?P) (stl ?s))",
     template_equation
      (template_app
        (template_app
          (template_hole 4, template_app (template_hole 3, template_var 1)),
         template_var 0),
       template_app
        (template_app
          (template_hole 2,
           template_app
            (template_app
              (template_var 1,
               template_app (template_hole 1, template_var 0)),
             template_app
              (template_hole 1,
               template_app (template_hole 0, template_var 0)))),
         template_app
          (template_app
            (template_hole 4,
             template_app (template_hole 3, template_var 1)),
           template_app (template_hole 0, template_var 0))))),
    ("Auxiliary.zcount_image_zmset",
     "zcount (Auxiliary.image_zmset ?f ?M) ?x =
      sum (zcount ?M) (?f -` {?x} Int set_zmset ?M)",
     template_equation
      (template_app
        (template_app
          (template_hole 8,
           template_app
            (template_app (template_hole 7, template_var 2),
             template_var 1)),
         template_var 0),
       template_app
        (template_app (template_hole 6, t_empty),
         template_app
          (template_app
            (template_hole 4,
             template_app
              (template_app (template_hole 3, template_var 2),
               template_app
                (template_app (template_hole 2, template_var 0),
                 template_hole 1))),
           template_app (template_hole 0, template_var 1))))),
    ("Auxiliary.image_zmset_pre",
     "?t :#z Auxiliary.image_zmset ?f ?M ==> EX m. m :#z ?M & ?f m = ?t",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 7, template_var 2),
              template_app
               (template_hole 6,
                template_app
                 (template_app (template_hole 5, template_var 1),
                  template_var 0)))
            )],
       template_predicate (template_app (template_hole 4, t_empty)))),
    ("Auxiliary.in_zmset_notin_mset_neg",
     "[| ?x :#z ?M; ?x ~:# mset_neg ?M |] ==> ?x :# mset_pos ?M",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 5, template_var 1),
              template_app (template_hole 4, template_var 0))
            ),
        template_negation
         (
            template_predicate
             (
                template_app
                 (template_app (template_hole 5, template_var 1),
                  template_app
                   (template_hole 2,
                    template_app (template_hole 1, template_var 0)))
                )
            )],
       template_predicate
        (
           template_app
            (template_app (template_hole 5, template_var 1),
             template_app
              (template_hole 2,
               template_app (template_hole 0, template_var 0)))
           ))),
    ("Auxiliary.in_zmset_notin_mset_pos",
     "[| ?x :#z ?M; ?x ~:# mset_pos ?M |] ==> ?x :# mset_neg ?M",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 5, template_var 1),
              template_app (template_hole 4, template_var 0))
            ),
        template_negation
         (
            template_predicate
             (
                template_app
                 (template_app (template_hole 5, template_var 1),
                  template_app
                   (template_hole 2,
                    template_app (template_hole 1, template_var 0)))
                )
            )],
       template_predicate
        (
           template_app
            (template_app (template_hole 5, template_var 1),
             template_app
              (template_hole 2,
               template_app (template_hole 0, template_var 0)))
           ))),
    ("Auxiliary.mset_neg_sum_set",
     "(!!m. m : ?M ==> mset_neg (?f m) = {#}) ==>
      mset_neg (sum ?f ?M) = {#}",
     template_implication
      ([template_predicate (template_app (template_hole 6, t_empty))],
       template_equation
        (template_app
          (template_hole 2,
           template_app
            (template_app (template_hole 0, t_empty), template_var 1)),
         template_hole 1))),
    ("Auxiliary.zcount_image_zmset_zero",
     "(!!m. m :#z ?M ==> ?f m ~= ?x) ==>
      ?x ~:#z Auxiliary.image_zmset ?f ?M",
     template_implication
      ([template_predicate (template_app (template_hole 8, t_empty))],
       template_negation
        (
           template_predicate
            (
               template_app
                (template_app (template_hole 2, template_var 0),
                 template_app
                  (template_hole 1,
                   template_app
                    (template_app (template_hole 0, template_var 1),
                     template_var 2)))
               )
           ))),
    ("Auxiliary.pos_zcount_image_zmset",
     "[| !!t. 0 <= zcount ?M t; 0 < zcount ?M ?t |]
      ==> 0 < zcount (Auxiliary.image_zmset ?f ?M) (?f ?t)",
     template_implication
      ([template_predicate (template_app (template_hole 7, t_empty)),
        template_inequation
         (less_than, template_hole 4,
          template_app
           (template_app (template_hole 3, template_var 2),
            template_var 1))],
       template_inequation
        (less_than, template_hole 4,
         template_app
          (template_app
            (template_hole 1,
             template_app
              (template_app (template_hole 0, template_var 0),
               template_var 2)),
           template_app (template_var 0, template_var 1))))),
    ("Auxiliary.zmset_elem_nonneg",
     "[| ?x :#z ?M; !!x. x :#z ?M ==> 0 <= zcount ?M x |]
      ==> 0 < zcount ?M ?x",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 6, template_var 1),
              template_app (template_hole 5, template_var 0))
            ),
        template_predicate (template_app (template_hole 4, t_empty))],
       template_inequation
        (less_than, template_hole 2,
         template_app
          (template_app (template_hole 1, template_var 0),
           template_var 1)))),
    ("Auxiliary.pos_image_zmset_obtain_pre",
     "[| !!t. 0 <= zcount ?M t;
         0 < zcount (Auxiliary.image_zmset ?f ?M) ?t |]
      ==> EX m. 0 < zcount ?M m & ?f m = ?t",
     template_implication
      ([template_predicate (template_app (template_hole 10, t_empty)),
        template_inequation
         (less_than, template_hole 7,
          template_app
           (template_app
             (template_hole 4,
              template_app
               (template_app (template_hole 3, template_var 1),
                template_var 2)),
            template_var 0))],
       template_predicate (template_app (template_hole 2, t_empty)))),
    ("Auxiliary.sum_if_distrib_add",
     "[| finite ?A; ?b : ?A |]
      ==> (SUM a:?A. if a = ?b then ?X ?b + ?Y a else ?X a) =
          sum ?X ?A + ?Y ?b",
     template_implication
      ([template_predicate (template_app (template_hole 6, template_var 3)),
        template_predicate
         (
            template_app
             (template_app (template_hole 5, template_var 2),
              template_var 3)
            )],
       template_equation
        (template_app
          (template_app (template_hole 3, t_empty), template_var 3),
         template_app
          (template_app
            (template_hole 0,
             template_app
              (template_app (template_hole 3, t_empty), template_var 3)),
           template_app (template_var 0, template_var 2))))),
    ("Auxiliary.order_finite_set_obtain_foundation",
     "[| finite ?M; ?t : ?M;
         !!s. [| s : ?M; s <= ?t; ALL u:?M. ~ u < s |] ==> ?thesis |]
      ==> ?thesis",
     template_implication
      ([template_predicate (template_app (template_hole 6, template_var 2)),
        template_predicate
         (
            template_app
             (template_app (template_hole 5, template_var 1),
              template_var 2)
            ),
        template_predicate (template_app (template_hole 4, t_empty))],
       template_predicate (template_var 0))),
    ("Auxiliary.Sum_eq_pick_changed_elem",
     "[| finite ?M; ?m : ?M; ?f ?m = ?g ?m + ?\<Delta>;
         !!n. n ~= ?m & n : ?M ==> ?f n = ?g n |]
      ==> sum ?f ?M = sum ?g ?M + ?\<Delta>",
     template_implication
      ([template_predicate (template_app (template_hole 8, template_var 4)),
        template_predicate
         (
            template_app
             (template_app (template_hole 7, template_var 3),
              template_var 4)
            ),
        template_equation
         (template_app (template_var 2, template_var 3),
          template_app
           (template_app
             (template_hole 5,
              template_app (template_var 1, template_var 3)),
            template_var 0)),
        template_predicate (template_app (template_hole 4, t_empty))],
       template_equation
        (template_app
          (template_app (template_hole 0, t_empty), template_var 4),
         template_app
          (template_app
            (template_hole 5,
             template_app
              (template_app (template_hole 0, t_empty), template_var 4)),
           template_var 0))))]:
   (string * thm * template) list
### theory "Draft.AuxiliaryMoreTemplates"
### 0.484s elapsed time, 0.734s cpu time, 0.048s GC time
val it = (): unit
