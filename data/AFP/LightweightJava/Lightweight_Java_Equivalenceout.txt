Loading theory "HOL-Library.Cancellation" (required by "Draft.Lightweight_Java_EquivalenceMoreTemplates" via "Draft.Lightweight_Java_Equivalence" via "Draft.Lightweight_Java_Definition" via "HOL-Library.Multiset")
Loading theory "HOL-Library.Function_Algebras" (required by "Draft.Lightweight_Java_EquivalenceMoreTemplates" via "Draft.ExtrEqs" via "HOL-Library.BigO")
Loading theory "HOL-Library.Nat_Bijection" (required by "Draft.Lightweight_Java_EquivalenceMoreTemplates" via "Draft.ExtrEqs" via "HOL-Library.Stream")
Loading theory "HOL-Library.Set_Algebras" (required by "Draft.Lightweight_Java_EquivalenceMoreTemplates" via "Draft.ExtrEqs" via "HOL-Library.BigO")
instantiation
  set :: (plus) plus
  plus_set == plus :: 'a set => 'a set => 'a set
instantiation
  fun :: (type, plus) plus
  plus_fun == plus :: ('a => 'b) => ('a => 'b) => 'a => 'b
instantiation
  set :: (times) times
  times_set == times :: 'a set => 'a set => 'a set
instantiation
  fun :: (type, zero) zero
  zero_fun == zero_class.zero :: 'a => 'b
instantiation
  set :: (zero) zero
  zero_set == zero_class.zero :: 'a set
instantiation
  fun :: (type, times) times
  times_fun == times :: ('a => 'b) => ('a => 'b) => 'a => 'b
instantiation
  set :: (one) one
  one_set == one_class.one :: 'a set
instantiation
  fun :: (type, one) one
  one_fun == one_class.one :: 'a => 'b
Found termination order: "(%p. size (snd p)) <*mlex*> {}"
### theory "HOL-Library.Function_Algebras"
### 0.150s elapsed time, 0.609s cpu time, 0.049s GC time
Loading theory "HOL-Library.Tree" (required by "Draft.Lightweight_Java_EquivalenceMoreTemplates" via "Draft.ExtrEqs" via "Draft.Templates")
Found termination order: "size_list size <*mlex*> {}"
### theory "HOL-Library.Set_Algebras"
### 0.255s elapsed time, 1.032s cpu time, 0.049s GC time
Loading theory "HOL-Library.BigO" (required by "Draft.Lightweight_Java_EquivalenceMoreTemplates" via "Draft.ExtrEqs")
### theory "HOL-Library.Nat_Bijection"
### 0.300s elapsed time, 1.210s cpu time, 0.049s GC time
Loading theory "HOL-Library.Stream" (required by "Draft.Lightweight_Java_EquivalenceMoreTemplates" via "Draft.ExtrEqs")
signature CANCEL = sig val proc: Proof.context -> cterm -> thm option end
functor Cancel_Fun (Data: CANCEL_NUMERALS_DATA): CANCEL
signature CANCEL_DATA =
  sig
    val dest_coeff: term -> int * term
    val dest_sum: term -> term list
    val find_first_coeff: term -> term list -> int * term list
    val mk_coeff: int * term -> term
    val mk_sum: typ -> term list -> term
    val norm_ss1: simpset
    val norm_ss2: simpset
    val norm_tac: Proof.context -> tactic
    val numeral_simp_tac: Proof.context -> tactic
    val prove_conv:
       tactic list -> Proof.context -> thm list -> term * term -> thm option
    val simplify_meta_eq: Proof.context -> thm -> thm
    val trans_tac: Proof.context -> thm option -> tactic
  end
structure Cancel_Data: CANCEL_DATA
signature CANCEL_SIMPROCS =
  sig
    val diff_cancel: Proof.context -> cterm -> thm option
    val eq_cancel: Proof.context -> cterm -> thm option
    val less_cancel: Proof.context -> cterm -> thm option
    val less_eq_cancel: Proof.context -> cterm -> thm option
  end
structure Cancel_Simprocs: CANCEL_SIMPROCS
### theory "HOL-Library.Cancellation"
### 0.434s elapsed time, 1.738s cpu time, 0.147s GC time
Loading theory "HOL-Library.Multiset" (required by "Draft.Lightweight_Java_EquivalenceMoreTemplates" via "Draft.Lightweight_Java_Equivalence" via "Draft.Lightweight_Java_Definition")
instantiation
  multiset :: (type) cancel_comm_monoid_add
  zero_multiset == zero_class.zero :: 'a multiset
  minus_multiset == minus :: 'a multiset => 'a multiset => 'a multiset
  plus_multiset == plus :: 'a multiset => 'a multiset => 'a multiset
consts
  left :: "'a tree => 'a tree"
consts
  right :: "'a tree => 'a tree"
consts
  shift :: "'a list => 'a stream => 'a stream"
Proofs for coinductive predicate(s) "streamsp"
  Proving monotonicity ...
Found termination order: "size <*mlex*> {}"
consts
  snth :: "'a stream => nat => 'a"
Found termination order: "size <*mlex*> {}"
consts
  stake :: "nat => 'a stream => 'a list"
consts
  sdrop :: "nat => 'a stream => 'a stream"
Found termination order: "size <*mlex*> {}"
consts
  sfilter :: "('a => bool) => 'a stream => 'a stream"
class height = type +
  fixes height :: "'a => nat"
instantiation
  tree :: (type) height
  height_tree == height :: 'a tree => nat
consts
  cycle :: "'a list => 'a stream"
consts
  siterate :: "('a => 'a) => 'a => 'a stream"
Found termination order: "size <*mlex*> {}"
consts
  flat :: "'a list stream => 'a stream"
Found termination order: "size <*mlex*> {}"
consts
  sinterleave :: "'a stream => 'a stream => 'a stream"
consts
  szip :: "'a stream => 'b stream => ('a * 'b) stream"
Found termination order: "size <*mlex*> {}"
consts
  smap2 :: "('a => 'b => 'c) => 'a stream => 'b stream => 'c stream"
### theory "HOL-Library.BigO"
### 1.134s elapsed time, 4.294s cpu time, 0.931s GC time
### theory "HOL-Library.Stream"
### 1.099s elapsed time, 4.144s cpu time, 0.931s GC time
Found termination order: "size <*mlex*> {}"
### Partially applied constant "Multiset.inter_mset" on left hand side of equation, in theorem:
### semilattice_inf.Inf_fin (\<inter>#) (set (?x # ?xs)) ==
### fold (\<inter>#) ?xs ?x
Found termination order: "size <*mlex*> {}"
### Partially applied constant "Multiset.union_mset" on left hand side of equation, in theorem:
### semilattice_sup.Sup_fin (\<union>#) (set (?x # ?xs)) ==
### fold (\<union>#) ?xs ?x
Found termination order: "size <*mlex*> {}"
Found termination order: "size <*mlex*> {}"
Found termination order: "(%p. size (fst p)) <*mlex*> {}"
signature MULTISET_SIMPROCS =
  sig
    val subset_cancel_msets: Proof.context -> cterm -> thm option
    val subseteq_cancel_msets: Proof.context -> cterm -> thm option
  end
structure Multiset_Simprocs: MULTISET_SIMPROCS
Found termination order: "size <*mlex*> {}"
instantiation
  multiset :: (type) Inf
  Inf_multiset == Inf :: 'a multiset set => 'a multiset
instantiation
  multiset :: (type) Sup
  Sup_multiset == Sup :: 'a multiset set => 'a multiset
Found termination order: "(%p. size (snd p)) <*mlex*> {}"
instantiation
  multiset :: (type) size
  size_multiset == size :: 'a multiset => nat
locale comp_fun_commute
  fixes f :: "'a => 'b => 'b"
  assumes "comp_fun_commute f"
Found termination order: "size <*mlex*> {}"
consts
  mset :: "'a list => 'a multiset"
### theory "HOL-Library.Tree"
### 2.051s elapsed time, 6.474s cpu time, 1.175s GC time
Loading theory "Draft.Templates" (required by "Draft.Lightweight_Java_EquivalenceMoreTemplates" via "Draft.ExtrEqs")
class linorder = order +
  assumes "linear": "!!x y. x <= y | y <= x"
datatype template_term
=
     t_empty
   | template_app of template_term * template_term
   | template_hole of int
   | template_var of int
datatype sign
= equals | greater_equals | greater_than | less_equals | less_than
datatype template
=
     template_bimplication of template * template
   | template_dunno
   | template_equation of template_term * template_term
   | template_implication of template list * template
   | template_inequation of sign * template_term * template_term
   | template_negation of template
   | template_predicate of template_term
constructor t_empty: template_term
constructor template_app: template_term * template_term -> template_term
constructor template_hole: int -> template_term
constructor template_var: int -> template_term
constructor equals: sign
constructor greater_equals: sign
constructor greater_than: sign
constructor less_equals: sign
constructor less_than: sign
constructor template_bimplication: template * template -> template
constructor template_dunno: template
constructor template_equation: template_term * template_term -> template
constructor template_implication: template list * template -> template
constructor template_inequation:
   sign * template_term * template_term -> template
constructor template_negation: template -> template
constructor template_predicate: template_term -> template
val vfs = fn: term -> (indexname * typ) list * (string * typ) list
val indexOf = fn: ''a list -> ''a -> int -> int
val has_eq = fn: term -> bool
val term2template = fn:
   (indexname * typ) list -> (string * typ) list -> term -> template_term
val lemma2predicate = fn: term -> term -> template
val makeTemplatewithContext = fn: term -> term -> template
val lemma2template = fn: term -> template
val thm2template = fn: thm -> template
val tterm2string = fn: template_term -> string
val template2string = fn: template -> string
val t = "height ?t <= size ?t": thm
val th =
   Const ("HOL.Trueprop", "bool => prop") $
     (Const ("Orderings.ord_class.less_eq", "nat => nat => bool") $
       (Const ("Tree.height_class.height", "?'a tree => nat") $
         Var (("t", 0), "?'a tree")) $
       (Const ("Nat.size_class.size", "?'a tree => nat") $
         Var (("t", 0), "?'a tree"))):
   term
### theory "Draft.Templates"
### 0.053s elapsed time, 0.109s cpu time, 0.000s GC time
Loading theory "Draft.ExtrEqs" (required by "Draft.Lightweight_Java_EquivalenceMoreTemplates")
locale comm_monoid_mset
  fixes f :: "'a => 'a => 'a"  (infixl \<open>\<^bold>*\<close> 70)
    and z :: "'a"  (\<open>\<^bold>1\<close>)
  assumes "comm_monoid_mset (\<^bold>*) \<^bold>1"
class comm_monoid_add = ab_semigroup_add + monoid_add +
  assumes "add_0": "!!a. (0::'a) + a = a"
class comm_monoid_add = ab_semigroup_add + monoid_add +
  assumes "add_0": "!!a. (0::'a) + a = a"
class canonically_ordered_monoid_add = ordered_comm_monoid_add +
  assumes "le_iff_add": "!!a b. (a <= b) = (EX c. b = a + c)"
class comm_monoid_mult = ab_semigroup_mult + monoid_mult + dvd +
  assumes "mult_1": "!!a. (1::'a) * a = a"
val eqpattern =
   Pattern
    (
       Const ("HOL.Trueprop", "bool => prop") $
         (Const ("HOL.eq", "?'a => ?'a => bool") $
           Var (("_dummy_", 1), "?'a") $ Var (("_dummy_", 2), "?'a"))
       ):
   term Find_Theorems.criterion
val badeqpattern = Pattern (Const ("Pure.eq", "?'a => ?'a => prop")):
   term Find_Theorems.criterion
val undefpattern =
   Pattern
    (
       Const ("HOL.Trueprop", "bool => prop") $
         (Const ("HOL.eq", "?'a => ?'a => bool") $
           Var (("_dummy_", 1), "?'a") $ Const ("HOL.undefined", "?'a"))
       ):
   term Find_Theorems.criterion
val thmpattern =
   Pattern
    (Const ("HOL.Trueprop", "bool => prop") $ Var (("_dummy_", 1), "bool")):
   term Find_Theorems.criterion
val badnames =
   ["*nitpick*", "*Nitpick*", "*full_exhaustive*", "*_def*", "Enum.finite*",
    "*Quickcheck*", "ATP*", "*Nunchaku*", "*Code*", "*BNF*", "*SMT*",
    "*.*.*"]:
   string list
val unwanted_names =
   [(false, Name "*nitpick*"), (false, Name "*Nitpick*"),
    (false, Name "*full_exhaustive*"), (false, Name "*_def*"),
    (false, Name "Enum.finite*"), (false, Name "*Quickcheck*"),
    (false, Name "ATP*"), (false, Name "*Nunchaku*"),
    (false, Name "*Code*"), (false, Name "*BNF*"), (false, Name "*SMT*"),
    (false, Name "*.*.*")]:
   (bool * term Find_Theorems.criterion) list
val has_vars = fn: term -> bool
val get_all_eqs = fn: string -> Proof.context -> (string * thm) list
val get_all_thms = fn: string -> Proof.context -> (string * thm) list
val get_noneq_thms = fn: string -> Proof.context -> (string * thm) list
val template_eqs = fn:
   string -> Proof.context -> (string * thm * template) list
val template_thms = fn:
   string -> Proof.context -> (string * thm * template) list
### theory "Draft.ExtrEqs"
### 0.542s elapsed time, 1.129s cpu time, 0.102s GC time
class linorder = order +
  assumes "linear": "!!x y. x <= y | y <= x"
instantiation
  multiset :: (preorder) order
  less_eq_multiset == less_eq :: 'a multiset => 'a multiset => bool
  less_multiset == less :: 'a multiset => 'a multiset => bool
instantiation
  multiset :: (preorder) ordered_ab_semigroup_add
Proofs for inductive predicate(s) "pw_leq"
  Proving monotonicity ...
Found termination order: "(%p. length (fst p)) <*mlex*> {}"
instantiation
  multiset :: (equal) equal
  equal_multiset == equal_class.equal :: 'a multiset => 'a multiset => bool
instantiation
  multiset :: (random) random
  random_multiset == random_class.random ::
    natural
    => natural * natural
       => ('a multiset * (unit => term)) * natural * natural
instantiation
  multiset :: (full_exhaustive) full_exhaustive
  full_exhaustive_multiset == full_exhaustive_class.full_exhaustive ::
    ('a multiset * (unit => term) => (bool * term list) option)
    => natural => (bool * term list) option
Proofs for inductive predicate(s) "pred_mset"
  Proving monotonicity ...
Proofs for inductive predicate(s) "rel_mset'"
  Proving monotonicity ...
### theory "HOL-Library.Multiset"
### 3.167s elapsed time, 7.389s cpu time, 1.299s GC time
Loading theory "Draft.Lightweight_Java_Definition" (required by "Draft.Lightweight_Java_EquivalenceMoreTemplates" via "Draft.Lightweight_Java_Equivalence")
Proofs for inductive predicate(s) "class_name"
  Proving monotonicity ...
Proofs for inductive predicate(s) "superclass_name"
  Proving monotonicity ...
Proofs for inductive predicate(s) "class_fields"
  Proving monotonicity ...
Proofs for inductive predicate(s) "class_methods"
  Proving monotonicity ...
Proofs for inductive predicate(s) "method_name"
  Proving monotonicity ...
Proofs for inductive predicate(s) "distinct_names"
  Proving monotonicity ...
Proofs for inductive predicate(s) "find_cld"
  Proving monotonicity ...
Proofs for inductive predicate(s) "find_type"
  Proving monotonicity ...
Proofs for inductive predicate(s) "path_length"
  Proving monotonicity ...
Proofs for inductive predicate(s) "acyclic_clds"
  Proving monotonicity ...
Proofs for inductive predicate(s) "find_path_rec"
  Proving monotonicity ...
Proofs for inductive predicate(s) "find_path"
  Proving monotonicity ...
Proofs for inductive predicate(s) "find_path_ty"
  Proving monotonicity ...
Proofs for inductive predicate(s) "fields_in_path"
  Proving monotonicity ...
Proofs for inductive predicate(s) "fields"
  Proving monotonicity ...
Proofs for inductive predicate(s) "methods_in_path"
  Proving monotonicity ...
Proofs for inductive predicate(s) "methods"
  Proving monotonicity ...
Proofs for inductive predicate(s) "ftype_in_fds"
  Proving monotonicity ...
Proofs for inductive predicate(s) "ftype_in_path"
  Proving monotonicity ...
Proofs for inductive predicate(s) "ftype"
  Proving monotonicity ...
Proofs for inductive predicate(s) "find_meth_def_in_list"
  Proving monotonicity ...
Proofs for inductive predicate(s) "find_meth_def_in_path"
  Proving monotonicity ...
Proofs for inductive predicate(s) "find_meth_def"
  Proving monotonicity ...
Proofs for inductive predicate(s) "mtype"
  Proving monotonicity ...
Proofs for inductive predicate(s) "sty_one"
  Proving monotonicity ...
Proofs for inductive predicate(s) "sty_many"
  Proving monotonicity ...
Proofs for inductive predicate(s) "sty_option"
  Proving monotonicity ...
Proofs for inductive predicate(s) "wf_object", "wf_varstate", "wf_heap", "wf_config", "wf_stmt", "wf_meth", "wf_class_common", "wf_class", "wf_program"
  Proving monotonicity ...
Proofs for inductive predicate(s) "tr_s"
  Proving monotonicity ...
Proofs for inductive predicate(s) "r_stmt"
  Proving monotonicity ...
### theory "Draft.Lightweight_Java_Definition"
### 5.634s elapsed time, 7.259s cpu time, 2.156s GC time
Loading theory "Draft.Lightweight_Java_Equivalence" (required by "Draft.Lightweight_Java_EquivalenceMoreTemplates")
consts
  find_cld_f :: "cld list => ctx => fqn => (ctx * cld) option"
consts
  find_type_f :: "cld list => ctx => cl => ty option"
consts
  find_path_ty_f :: "cld list => ty => (ctx * cld) list option"
consts
  fields_in_path_f :: "(ctx * cld) list => char list list"
consts
  methods_in_path_f :: "cld list => char list list"
consts
  ftype_in_fds_f :: "cld list => ctx => fd list => char list => ty_opt_bot"
consts
  ftype_in_path_f ::
    "cld list => (ctx * cld) list => char list => ty option"
consts
  find_meth_def_in_list_f :: "meth_def list => char list => meth_def option"
consts
  find_meth_def_in_path_f ::
    "(ctx * cld) list => char list => (ctx * meth_def) option"
consts
  lift_opts :: "'a option list => 'a list option"
consts
  tr_s_f :: "(x => x option) => s => s"
  tr_ss_f :: "(x => x option) => s list => s list"
### theory "Draft.Lightweight_Java_Equivalence"
### 0.774s elapsed time, 0.880s cpu time, 0.136s GC time
Loading theory "Draft.Lightweight_Java_EquivalenceMoreTemplates"
val templateLemmas =
   [("Lightweight_Java_Equivalence.map_id", "map id ?list = ?list",
     template_equation
      (template_app
        (template_app (template_hole 1, template_hole 0), template_var 0),
       template_var 0)),
    ("Lightweight_Java_Equivalence.concat_map_singlton",
     "concat (map (%e. [e]) ?list) = ?list",
     template_equation
      (template_app
        (template_hole 3,
         template_app
          (template_app (template_hole 2, t_empty), template_var 0)),
       template_var 0)),
    ("Lightweight_Java_Equivalence.zip_map_map_two",
     "zip (map fst ?list) (map snd ?list) = ?list",
     template_equation
      (template_app
        (template_app
          (template_hole 4,
           template_app
            (template_app (template_hole 3, template_hole 2),
             template_var 0)),
         template_app
          (template_app (template_hole 1, template_hole 0),
           template_var 0)),
       template_var 0)),
    ("Lightweight_Java_Equivalence.fip_ind_to_f",
     "ALL fs. fields_in_path ?clds fs --> fields_in_path_f ?clds = fs",
     template_predicate (template_app (template_hole 4, t_empty))),
    ("Lightweight_Java_Equivalence.tr_rel_f_eq",
     "tr_s ?T ?s ?s' = (tr_s_f ?T ?s = ?s')",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app (template_hole 2, template_var 2),
                template_var 1),
              template_var 0)
            )],
       template_equation
        (template_app
          (template_app (template_hole 0, template_var 2), template_var 1),
         template_var 0))),
    ("Lightweight_Java_Equivalence.map_fst",
     "map (%(x, y). x) ?list = map fst ?list",
     template_equation
      (template_app
        (template_app
          (template_hole 2, template_app (template_hole 1, t_empty)),
         template_var 0),
       template_app
        (template_app (template_hole 2, template_hole 0), template_var 0))),
    ("Lightweight_Java_Equivalence.map_snd",
     "map (%(x, y). y) ?list = map snd ?list",
     template_equation
      (template_app
        (template_app
          (template_hole 2, template_app (template_hole 1, t_empty)),
         template_var 0),
       template_app
        (template_app (template_hole 2, template_hole 0), template_var 0))),
    ("Lightweight_Java_Equivalence.id_map_two",
     "map (%(x, y). (x, y)) ?list = ?list",
     template_equation
      (template_app
        (template_app
          (template_hole 2, template_app (template_hole 1, t_empty)),
         template_var 0),
       template_var 0)),
    ("Lightweight_Java_Equivalence.tr_f_to_rel",
     "ALL s'. tr_s_f ?T ?s = s' --> tr_s ?T ?s s'",
     template_predicate (template_app (template_hole 4, t_empty))),
    ("Lightweight_Java_Equivalence.id_image_two",
     "(%(x, y). (x, y)) ` set ?list = set ?list",
     template_equation
      (template_app
        (template_app
          (template_hole 3, template_app (template_hole 2, t_empty)),
         template_app (template_hole 0, template_var 0)),
       template_app (template_hole 0, template_var 0))),
    ("Lightweight_Java_Equivalence.lift_opts_length",
     "lift_opts ?ty_opts = Some ?tys ==> length ?ty_opts = length ?tys",
     template_implication
      ([template_equation
         (template_app (template_hole 4, template_var 1),
          template_app (template_hole 3, template_var 0))],
       template_equation
        (template_app (template_hole 1, template_var 1),
         template_app (template_hole 0, template_var 0)))),
    ("Lightweight_Java_Equivalence.vds_map_length",
     "length (map (case_vd (%clk vark. find_type_f ?P ?ctx clk)) ?vds) =
      length ?vds",
     template_equation
      (template_app
        (template_hole 4,
         template_app
          (template_app
            (template_hole 3, template_app (template_hole 2, t_empty)),
           template_var 0)),
       template_app (template_hole 0, template_var 0))),
    ("Lightweight_Java_Equivalence.dom_single",
     "(?a : dom [?k |-> ?v]) = (?a = ?k)",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 5, template_var 2),
              template_app
               (template_hole 4,
                template_app
                 (template_app
                   (template_app (template_hole 3, t_empty),
                    template_var 1),
                  template_app (template_hole 1, template_var 0))))
            )],
       template_equation (template_var 2, template_var 1))),
    ("Lightweight_Java_Equivalence.fd_map_split'",
     "map (%(x, y). fd_def x y) (map (case_fd Pair) ?list) = ?list",
     template_equation
      (template_app
        (template_app
          (template_hole 5, template_app (template_hole 4, t_empty)),
         template_app
          (template_app
            (template_hole 2,
             template_app (template_hole 1, template_hole 0)),
           template_var 0)),
       template_var 0)),
    ("Lightweight_Java_Equivalence.fd_map_split''",
     "map ((%(x, y). fd_def x y) o case_fd Pair) ?list = ?list",
     template_equation
      (template_app
        (template_app
          (template_hole 5,
           template_app
            (template_app
              (template_hole 4, template_app (template_hole 3, t_empty)),
             template_app (template_hole 1, template_hole 0))),
         template_var 0),
       template_var 0)),
    ("Lightweight_Java_Equivalence.mem_remove",
     "?cld : set ?P ==> length (remove1 ?cld ?P) < length ?P",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 4, template_var 1),
              template_app (template_hole 3, template_var 0))
            )],
       template_inequation
        (less_than,
         template_app
          (template_hole 1,
           template_app
            (template_app (template_hole 0, template_var 1),
             template_var 0)),
         template_app (template_hole 1, template_var 0)))),
    ("Lightweight_Java_Equivalence.mem_cong",
     "?x : set ?list ==> ?f ?x : set (map ?f ?list)",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 4, template_var 2),
              template_app (template_hole 3, template_var 1))
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 2,
               template_app (template_var 0, template_var 2)),
             template_app
              (template_hole 1,
               template_app
                (template_app (template_hole 0, template_var 0),
                 template_var 1)))
           ))),
    ("Lightweight_Java_Equivalence.key_in_map1",
     "?k ~: dom ?M' ==> (?M ++ ?M') ?k = ?M ?k",
     template_implication
      ([template_negation
         (
            template_predicate
             (
                template_app
                 (template_app (template_hole 3, template_var 2),
                  template_app (template_hole 2, template_var 1))
                )
            )],
       template_equation
        (template_app
          (template_app
            (template_app (template_hole 0, template_var 0),
             template_var 1),
           template_var 2),
         template_app (template_var 0, template_var 2)))),
    ("Lightweight_Java_Equivalence.list_all_map_P",
     "list_all (%b. b) (map ?P ?list) = (ALL x:set ?list. ?P x)",
     template_equation
      (template_app
        (template_app (template_hole 3, t_empty),
         template_app
          (template_app (template_hole 2, t_empty), template_var 0)),
       template_app
        (template_app
          (template_hole 1, template_app (template_hole 0, template_var 0)),
         t_empty))),
    ("Lightweight_Java_Equivalence.find_to_mem",
     "find_cld_f ?P ?ctx ?fqn = Some (?ctx', ?cld) ==> ?cld : set ?P",
     template_implication
      ([template_equation
         (template_app
           (template_app
             (template_app (template_hole 4, template_var 4),
              template_var 3),
            template_var 2),
          template_app
           (template_hole 3,
            template_app
             (template_app (template_hole 2, template_var 1),
              template_var 0)))],
       template_predicate
        (
           template_app
            (template_app (template_hole 1, template_var 0),
             template_app (template_hole 0, template_var 4))
           ))),
    ("Lightweight_Java_Equivalence.forall_cons",
     "Ball (set (?s # ?S)) ?P & ?y : set ?S ==> ?P ?y",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_hole 4,
                template_app
                 (template_app
                   (template_hole 3,
                    template_app
                     (template_hole 2,
                      template_app
                       (template_app (template_hole 1, template_var 3),
                        template_var 2))),
                  template_var 1)),
              template_app
               (template_app (template_hole 0, template_var 0),
                template_app (template_hole 2, template_var 2)))
            )],
       template_predicate (template_app (template_var 1, template_var 0)))),
    ("Lightweight_Java_Equivalence.set_zip_tr",
     "(?s, ?s') : set (zip ?ss (tr_ss_f ?T ?ss)) --> ?s' = tr_s_f ?T ?s",
     template_predicate
      (
         template_app
          (template_app
            (template_hole 7,
             template_app
              (template_app
                (template_hole 6,
                 template_app
                  (template_app (template_hole 5, template_var 3),
                   template_var 2)),
               template_app
                (template_hole 4,
                 template_app
                  (template_app (template_hole 3, template_var 1),
                   template_app
                    (template_app (template_hole 2, template_var 0),
                     template_var 1))))),
           template_app
            (template_app (template_hole 1, template_var 2),
             template_app
              (template_app (template_hole 0, template_var 0),
               template_var 3)))
         )),
    ("Lightweight_Java_Equivalence.sty_reflexiveI",
     "is_sty_one ?P ?ty ?ty' = Some True ==>
      is_sty_one ?P ?ty ?ty = Some True",
     template_implication
      ([template_equation
         (template_app
           (template_app
             (template_app (template_hole 2, template_var 2),
              template_var 1),
            template_var 0),
          template_app (template_hole 1, template_hole 0))],
       template_equation
        (template_app
          (template_app
            (template_app (template_hole 2, template_var 2),
             template_var 1),
           template_var 1),
         template_app (template_hole 1, template_hole 0)))),
    ("Lightweight_Java_Equivalence.find_md_m_match'",
     "find_meth_def_in_list_f ?mds ?m =
      Some (meth_def_def (meth_sig_def ?cl ?m' ?vds) ?mb) ==>
      ?m' = ?m",
     template_implication
      ([template_equation
         (template_app
           (template_app (template_hole 4, template_var 5), template_var 4),
          template_app
           (template_hole 3,
            template_app
             (template_app
               (template_hole 2,
                template_app
                 (template_app
                   (template_app (template_hole 1, template_var 3),
                    template_var 2),
                  template_var 1)),
              template_var 0)))],
       template_equation (template_var 2, template_var 4))),
    ("Lightweight_Java_Equivalence.find_md_m_match",
     "find_meth_def_in_path_f ?path ?m =
      Some (?ctx, meth_def_def (meth_sig_def ?cl ?m' ?vds) ?mb) -->
      ?m' = ?m",
     template_predicate
      (
         template_app
          (template_app
            (template_hole 7,
             template_app
              (template_app
                (template_hole 6,
                 template_app
                  (template_app (template_hole 5, template_var 6),
                   template_var 5)),
               template_app
                (template_hole 4,
                 template_app
                  (template_app (template_hole 3, template_var 4),
                   template_app
                    (template_app
                      (template_hole 2,
                       template_app
                        (template_app
                          (template_app (template_hole 1, template_var 3),
                           template_var 2),
                         template_var 1)),
                     template_var 0))))),
           template_app
            (template_app (template_hole 0, template_var 2),
             template_var 5))
         )),
    ("Lightweight_Java_Equivalence.predicted_lu",
     "?x : set ?list ==>
      map_of (map (%key. (key, ?value)) ?list) ?x = Some ?value",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 6, template_var 2),
              template_app (template_hole 5, template_var 1))
            )],
       template_equation
        (template_app
          (template_app
            (template_hole 3,
             template_app
              (template_app (template_hole 2, t_empty), template_var 1)),
           template_var 2),
         template_app (template_hole 0, template_var 0)))),
    ("Lightweight_Java_Equivalence.path_append",
     "find_path_rec_f ?P ?ctx ?cl ?path' = Some ?path ==>
      EX path''. ?path = ?path' @ path''",
     template_implication
      ([template_equation
         (template_app
           (template_app
             (template_app
               (template_app (template_hole 4, template_var 4),
                template_var 3),
              template_var 2),
            template_var 1),
          template_app (template_hole 3, template_var 0))],
       template_predicate (template_app (template_hole 2, t_empty)))),
    ("Lightweight_Java_Equivalence.path_length_eq",
     "[| path_length ?P ?ctx ?cl ?nn; path_length ?P ?ctx ?cl ?nn' |]
      ==> ?nn = ?nn'",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_app (template_hole 1, template_var 4),
                  template_var 3),
                template_var 2),
              template_var 1)
            ),
        template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_app (template_hole 1, template_var 4),
                  template_var 3),
                template_var 2),
              template_var 0)
            )],
       template_equation (template_var 1, template_var 0))),
    ("Lightweight_Java_Equivalence.cld_for_path",
     "find_path_f ?P ?ctx (cl_fqn ?fqn) = Some ?path ==>
      EX ctxcld. find_cld_f ?P ?ctx ?fqn = Some ctxcld",
     template_implication
      ([template_equation
         (template_app
           (template_app
             (template_app (template_hole 6, template_var 3),
              template_var 2),
            template_app (template_hole 5, template_var 1)),
          template_app (template_hole 4, template_var 0))],
       template_predicate (template_app (template_hole 3, t_empty)))),
    ("Lightweight_Java_Equivalence.distinct_names_map",
     "(ALL (cld, y):set ?cld_dcl_list. class_name_f cld = y) &
      distinct (map snd ?cld_dcl_list) ==>
      distinct_names_f (map fst ?cld_dcl_list)",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_hole 11,
                template_app
                 (template_app
                   (template_hole 10,
                    template_app (template_hole 9, template_var 0)),
                  template_app (template_hole 8, t_empty))),
              template_app
               (template_hole 5,
                template_app
                 (template_app (template_hole 4, template_hole 3),
                  template_var 0)))
            )],
       template_predicate
        (
           template_app
            (template_hole 2,
             template_app
              (template_app (template_hole 1, template_hole 0),
               template_var 0))
           ))),
    ("Lightweight_Java_Equivalence.cl_f_list_map",
     "map (case_fd (%cl f. f)) (map (%(x, y). fd_def x y) ?cl_f_list) =
      map (%(cl_XXX, f_XXX). f_XXX) ?cl_f_list",
     template_equation
      (template_app
        (template_app
          (template_hole 6, template_app (template_hole 5, t_empty)),
         template_app
          (template_app
            (template_hole 4, template_app (template_hole 3, t_empty)),
           template_var 0)),
       template_app
        (template_app
          (template_hole 1, template_app (template_hole 0, t_empty)),
         template_var 0))),
    ("Lightweight_Java_Equivalence.fd_map_split",
     "map (case_fd (%cl f. f)) (map (%(x, y). fd_def x y) ?list) =
      map (%(cl, f). f) ?list",
     template_equation
      (template_app
        (template_app
          (template_hole 6, template_app (template_hole 5, t_empty)),
         template_app
          (template_app
            (template_hole 4, template_app (template_hole 3, t_empty)),
           template_var 0)),
       template_app
        (template_app
          (template_hole 1, template_app (template_hole 0, t_empty)),
         template_var 0))),
    ("Lightweight_Java_Equivalence.vds_tys_length_eq",
     "lift_opts (map (case_vd (%clk vark. find_type_f ?P ?ctx clk)) ?vds) =
      Some ?tys ==>
      length ?vds = length ?tys",
     template_implication
      ([template_equation
         (template_app
           (template_hole 7,
            template_app
             (template_app
               (template_hole 6, template_app (template_hole 5, t_empty)),
              template_var 1)),
          template_app (template_hole 3, template_var 0))],
       template_equation
        (template_app (template_hole 1, template_var 1),
         template_app (template_hole 0, template_var 0)))),
    ("Lightweight_Java_Equivalence.map_map_three",
     "?ctxclds =
      map ((%(ctx, cld, dcl). (ctx, cld)) o
           (%(ctx, cld). (ctx, cld, class_name_f cld)))
       ?ctxclds",
     template_equation
      (template_var 0,
       template_app
        (template_app
          (template_hole 8,
           template_app
            (template_app
              (template_hole 7, template_app (template_hole 6, t_empty)),
             template_app (template_hole 3, t_empty))),
         template_var 0))),
    ("Lightweight_Java_Equivalence.fpr_first_in_path",
     "[| find_path_f ?P ?ctx (cl_fqn ?fqn) = Some ?path;
         find_cld_f ?P ?ctx ?fqn = Some ?ctxcld |]
      ==> ?ctxcld : set ?path",
     template_implication
      ([template_equation
         (template_app
           (template_app
             (template_app (template_hole 7, template_var 4),
              template_var 3),
            template_app (template_hole 6, template_var 2)),
          template_app (template_hole 5, template_var 1)),
        template_equation
         (template_app
           (template_app
             (template_app (template_hole 3, template_var 4),
              template_var 3),
            template_var 2),
          template_app (template_hole 2, template_var 0))],
       template_predicate
        (
           template_app
            (template_app (template_hole 1, template_var 0),
             template_app (template_hole 0, template_var 1))
           ))),
    ("Lightweight_Java_Equivalence.finite_program",
     "EX ctx ctx' fqn. find_cld_f ?P ctx fqn = Some (ctx', ?cld) ==>
      length (remove1 ?cld ?P) < length ?P",
     template_implication
      ([template_predicate (template_app (template_hole 8, t_empty))],
       template_inequation
        (less_than,
         template_app
          (template_hole 1,
           template_app
            (template_app (template_hole 0, template_var 0),
             template_var 1)),
         template_app (template_hole 1, template_var 1)))),
    ("Lightweight_Java_Equivalence.find_cld_name_eq",
     "find_cld_f ?P ?ctx (fqn_def ?dcl) = Some ?ctxcld ==>
      EX cl fds mds. (?ctx, cld_def ?dcl cl fds mds) = ?ctxcld",
     template_implication
      ([template_equation
         (template_app
           (template_app
             (template_app (template_hole 8, template_var 3),
              template_var 2),
            template_app (template_hole 7, template_var 1)),
          template_app (template_hole 6, template_var 0))],
       template_predicate (template_app (template_hole 5, t_empty)))),
    ("Lightweight_Java_Equivalence.ctx_dcl_mem_path",
     "find_path_f ?P ?ctx (cl_fqn (fqn_def ?dcl)) = Some ?path ==>
      (?ctx, ?dcl) : (%(ctx, cld). (ctx, class_name_f cld)) ` set ?path",
     template_implication
      ([template_equation
         (template_app
           (template_app
             (template_app (template_hole 9, template_var 3),
              template_var 2),
            template_app
             (template_hole 8,
              template_app (template_hole 7, template_var 1))),
          template_app (template_hole 6, template_var 0))],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 5,
               template_app
                (template_app (template_hole 4, template_var 2),
                 template_var 1)),
             template_app
              (template_app
                (template_hole 3, template_app (template_hole 2, t_empty)),
               template_app (template_hole 0, template_var 0)))
           ))),
    ("Lightweight_Java_Equivalence.sty_transitiveI",
     "[| is_sty_one ?P ?ty ?ty' = Some True;
         is_sty_one ?P ?ty' ?ty'' = Some True |]
      ==> is_sty_one ?P ?ty ?ty'' = Some True",
     template_implication
      ([template_equation
         (template_app
           (template_app
             (template_app (template_hole 2, template_var 3),
              template_var 2),
            template_var 1),
          template_app (template_hole 1, template_hole 0)),
        template_equation
         (template_app
           (template_app
             (template_app (template_hole 2, template_var 3),
              template_var 1),
            template_var 0),
          template_app (template_hole 1, template_hole 0))],
       template_equation
        (template_app
          (template_app
            (template_app (template_hole 2, template_var 3),
             template_var 2),
           template_var 0),
         template_app (template_hole 1, template_hole 0)))),
    ("Lightweight_Java_Equivalence.ctx_cld_ctx_dcl",
     "(?ctx, cld_def ?dcl ?cl ?fds ?mds) : set ?path ==>
      (?ctx, ?dcl) : (%(ctx, cld). (ctx, class_name_f cld)) ` set ?path",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_hole 8,
                template_app
                 (template_app (template_hole 7, template_var 5),
                  template_app
                   (template_app
                     (template_app
                       (template_app (template_hole 6, template_var 4),
                        template_var 3),
                      template_var 2),
                    template_var 1))),
              template_app (template_hole 5, template_var 0))
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 4,
               template_app
                (template_app (template_hole 3, template_var 5),
                 template_var 4)),
             template_app
              (template_app
                (template_hole 2, template_app (template_hole 1, t_empty)),
               template_app (template_hole 5, template_var 0)))
           ))),
    ("Lightweight_Java_Equivalence.all_in_path_found",
     "[| find_path_f ?P ?ctx ?cl = Some ?path; ?ctxcld : set ?path |]
      ==> EX ctx' fqn'. find_cld_f ?P ctx' fqn' = Some ?ctxcld",
     template_implication
      ([template_equation
         (template_app
           (template_app
             (template_app (template_hole 8, template_var 4),
              template_var 3),
            template_var 2),
          template_app (template_hole 7, template_var 1)),
        template_predicate
         (
            template_app
             (template_app (template_hole 6, template_var 0),
              template_app (template_hole 5, template_var 1))
            )],
       template_predicate (template_app (template_hole 4, t_empty)))),
    ("Lightweight_Java_Equivalence.fpr_target_is_head",
     "find_path_f ?P ?ctx (cl_fqn ?fqn) = Some ?path ==>
      EX ctxcld.
         find_cld_f ?P ?ctx ?fqn = Some ctxcld &
         (EX path''. ?path = ctxcld # path'')",
     template_implication
      ([template_equation
         (template_app
           (template_app
             (template_app (template_hole 10, template_var 3),
              template_var 2),
            template_app (template_hole 9, template_var 1)),
          template_app (template_hole 8, template_var 0))],
       template_predicate (template_app (template_hole 7, t_empty)))),
    ("Lightweight_Java_Equivalence.fpr_same_suffix'",
     "[| find_path_rec_f ?P ?ctx ?cl ?prefix = Some ?path;
         ?path = ?prefix @ ?suffix |]
      ==> find_path_rec_f ?P ?ctx ?cl ?prefix' = Some (?prefix' @ ?suffix)",
     template_implication
      ([template_equation
         (template_app
           (template_app
             (template_app
               (template_app (template_hole 3, template_var 6),
                template_var 5),
              template_var 4),
            template_var 3),
          template_app (template_hole 2, template_var 2)),
        template_equation
         (template_var 2,
          template_app
           (template_app (template_hole 0, template_var 3),
            template_var 1))],
       template_equation
        (template_app
          (template_app
            (template_app
              (template_app (template_hole 3, template_var 6),
               template_var 5),
             template_var 4),
           template_var 0),
         template_app
          (template_hole 2,
           template_app
            (template_app (template_hole 0, template_var 0),
             template_var 1))))),
    ("Lightweight_Java_Equivalence.lift_opts_all_true",
     "(ALL (ty, ty'):set ?ty_ty'_list. is_sty_one ?P ty ty' = Some True) &
      lift_opts (map (%(x, y). is_sty_one ?P x y) ?ty_ty'_list) =
      Some ?bools ==>
      list_all id ?bools",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_hole 14,
                template_app
                 (template_app
                   (template_hole 13,
                    template_app (template_hole 12, template_var 2)),
                  template_app (template_hole 11, t_empty))),
              template_app
               (template_app
                 (template_hole 6,
                  template_app
                   (template_hole 5,
                    template_app
                     (template_app
                       (template_hole 4,
                        template_app
                         (template_hole 3,
                          template_app (template_hole 9, template_var 1))),
                      template_var 2))),
                template_app (template_hole 2, template_var 0)))
            )],
       template_predicate
        (
           template_app
            (template_app (template_hole 1, template_hole 0),
             template_var 0)
           ))),
    ("Lightweight_Java_Equivalence.fpr_first_in_path'",
     "[| find_path_rec_f ?P ?ctx ?cl ?path' = Some ?path;
         ?cl = cl_fqn ?fqn & find_cld_f ?P ?ctx ?fqn = Some ?ctxcld |]
      ==> ?ctxcld : set ?path",
     template_implication
      ([template_equation
         (template_app
           (template_app
             (template_app
               (template_app (template_hole 9, template_var 6),
                template_var 5),
              template_var 4),
            template_var 3),
          template_app (template_hole 8, template_var 2)),
        template_predicate
         (
            template_app
             (template_app
               (template_hole 7,
                template_app
                 (template_app (template_hole 6, template_var 4),
                  template_app (template_hole 5, template_var 1))),
              template_app
               (template_app
                 (template_hole 4,
                  template_app
                   (template_app
                     (template_app (template_hole 3, template_var 6),
                      template_var 5),
                    template_var 1)),
                template_app (template_hole 2, template_var 0)))
            )],
       template_predicate
        (
           template_app
            (template_app (template_hole 1, template_var 0),
             template_app (template_hole 0, template_var 2))
           ))),
    ("Lightweight_Java_Equivalence.forall_union",
     "[| ALL a:dom ?A. ?P (?A a); ALL b:dom ?B. ?P (?B b) |]
      ==> ALL x:dom ?A Un dom ?B. ?P ((?B ++ ?A) x)",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_hole 3,
                template_app (template_hole 2, template_var 2)),
              t_empty)
            ),
        template_predicate
         (
            template_app
             (template_app
               (template_hole 3,
                template_app (template_hole 2, template_var 0)),
              t_empty)
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 3,
               template_app
                (template_app
                  (template_hole 1,
                   template_app (template_hole 2, template_var 2)),
                 template_app (template_hole 2, template_var 0))),
             t_empty)
           ))),
    ("Lightweight_Java_Equivalence.tr_ss_map",
     "tr_ss_f ?T (map fst ?s_s'_list) = map snd ?s_s'_list &
      (ALL x:set ?s_s'_list. case x of (x, xa) => tr_s ?T x xa) &
      (?a, ?b) : set ?s_s'_list -->
      tr_s ?T ?a (tr_s_f ?T ?a)",
     template_predicate
      (
         template_app
          (template_app
            (template_hole 13,
             template_app
              (template_app
                (template_hole 12,
                 template_app
                  (template_app
                    (template_hole 11,
                     template_app
                      (template_app (template_hole 10, template_var 3),
                       template_app
                        (template_app (template_hole 9, template_hole 8),
                         template_var 2))),
                   template_app
                    (template_app (template_hole 9, template_hole 7),
                     template_var 2))),
               template_app
                (template_app
                  (template_hole 12,
                   template_app
                    (template_app
                      (template_hole 6,
                       template_app (template_hole 5, template_var 2)),
                     t_empty)),
                 template_app
                  (template_app
                    (template_hole 2,
                     template_app
                      (template_app (template_hole 1, template_var 1),
                       template_var 0)),
                   template_app (template_hole 5, template_var 2))))),
           template_app
            (template_app
              (template_app (template_hole 3, template_var 3),
               template_var 1),
             template_app
              (template_app (template_hole 0, template_var 3),
               template_var 1)))
         )),
    ("Lightweight_Java_Equivalence.vds_tys_length_eq''",
     "length ?vds = length ?tys ==>
      ?tys =
      map ((%(cl, var, ty). ty) o
           (%(vd, ty). case vd of vd_def cl var => (cl, var, ty)))
       (zip ?vds ?tys)",
     template_implication
      ([template_equation
         (template_app (template_hole 11, template_var 1),
          template_app (template_hole 10, template_var 0))],
       template_equation
        (template_var 0,
         template_app
          (template_app
            (template_hole 8,
             template_app
              (template_app
                (template_hole 7, template_app (template_hole 6, t_empty)),
               template_app (template_hole 4, t_empty))),
           template_app
            (template_app (template_hole 0, template_var 1),
             template_var 0))))),
    ("Lightweight_Java_Equivalence.ctx_dcl_ctx_cld",
     "(?ctx, ?dcl) : (%(ctx, cld). (ctx, class_name_f cld)) ` set ?path ==>
      EX cl fds mds. (?ctx, cld_def ?dcl cl fds mds) : set ?path",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_hole 11,
                template_app
                 (template_app (template_hole 10, template_var 2),
                  template_var 1)),
              template_app
               (template_app
                 (template_hole 9, template_app (template_hole 8, t_empty)),
                template_app (template_hole 6, template_var 0)))
            )],
       template_predicate (template_app (template_hole 5, t_empty)))),
    ("Lightweight_Java_Equivalence.lift_opts_exists",
     "ALL x:set ?ty_ty'_list.
         case x of (ty, ty') => is_sty_one ?P ty ty' = Some True ==>
      EX bools.
         lift_opts (map (%(ty, ty'). is_sty_one ?P ty ty') ?ty_ty'_list) =
         Some bools",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_hole 12,
                template_app (template_hole 11, template_var 1)),
              t_empty)
            )],
       template_predicate (template_app (template_hole 5, t_empty)))),
    ("Lightweight_Java_Equivalence.all_in_path_found'",
     "[| find_path_rec_f ?P ?ctx ?cl ?path' = Some ?path;
         ?ctxcld : set ?path |]
      ==> ?ctxcld : set ?path' |
          (EX ctx' fqn'. find_cld_f ?P ctx' fqn' = Some ?ctxcld)",
     template_implication
      ([template_equation
         (template_app
           (template_app
             (template_app
               (template_app (template_hole 9, template_var 5),
                template_var 4),
              template_var 3),
            template_var 2),
          template_app (template_hole 8, template_var 1)),
        template_predicate
         (
            template_app
             (template_app (template_hole 7, template_var 0),
              template_app (template_hole 6, template_var 1))
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 5,
               template_app
                (template_app (template_hole 7, template_var 0),
                 template_app (template_hole 6, template_var 2))),
             template_app (template_hole 4, t_empty))
           ))),
    ("Lightweight_Java_Equivalence.vds_tys_length_eq'",
     "length ?vds = length ?tys ==>
      ?vds =
      map (%(cl, var, ty). vd_def cl var)
       (map2 (%vd ty. case vd of vd_def cl var => (cl, var, ty)) ?vds
         ?tys)",
     template_implication
      ([template_equation
         (template_app (template_hole 12, template_var 1),
          template_app (template_hole 11, template_var 0))],
       template_equation
        (template_var 1,
         template_app
          (template_app
            (template_hole 9, template_app (template_hole 8, t_empty)),
           template_app
            (template_app
              (template_hole 5, template_app (template_hole 4, t_empty)),
             template_app
              (template_app (template_hole 0, template_var 1),
               template_var 0)))))),
    ("Lightweight_Java_Equivalence.mem_el_map",
     "(?ctx, ?dcl) : set ?ctxclds ==>
      (?ctx, class_name_f ?dcl)
      : (%(ctx_XXX, cld_XXX, y). (ctx_XXX, y)) `
        set (map (%(ctx, cld). (ctx, cld, class_name_f cld)) ?ctxclds)",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_hole 13,
                template_app
                 (template_app (template_hole 12, template_var 2),
                  template_var 1)),
              template_app (template_hole 11, template_var 0))
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 10,
               template_app
                (template_app (template_hole 9, template_var 2),
                 template_app (template_hole 8, template_var 1))),
             template_app
              (template_app
                (template_hole 7, template_app (template_hole 6, t_empty)),
               template_app
                (template_hole 4,
                 template_app
                  (template_app
                    (template_hole 3,
                     template_app (template_hole 2, t_empty)),
                   template_var 0))))
           ))),
    ("Lightweight_Java_Equivalence.fpr_target_is_head'",
     "find_path_rec_f ?P ?ctx ?cl ?path' = Some ?path -->
      (ALL fqn ctxcld.
          ?cl = cl_fqn fqn & find_cld_f ?P ?ctx fqn = Some ctxcld -->
          (EX path''. ?path = ?path' @ ctxcld # path''))",
     template_predicate
      (
         template_app
          (template_app
            (template_hole 15,
             template_app
              (template_app
                (template_hole 14,
                 template_app
                  (template_app
                    (template_app
                      (template_app (template_hole 13, template_var 4),
                       template_var 3),
                     template_var 2),
                   template_var 1)),
               template_app (template_hole 12, template_var 0))),
           template_app (template_hole 11, t_empty))
         )),
    ("Lightweight_Java_Equivalence.fpr_same_suffix",
     "find_path_rec_f ?P ?ctx ?cl ?prefix = Some ?path -->
      (ALL suffix prefix' suffix'.
          ?path = ?prefix @ suffix &
          find_path_rec_f ?P ?ctx ?cl prefix' = Some (prefix' @ suffix') -->
          suffix = suffix')",
     template_predicate
      (
         template_app
          (template_app
            (template_hole 7,
             template_app
              (template_app
                (template_hole 6,
                 template_app
                  (template_app
                    (template_app
                      (template_app (template_hole 5, template_var 4),
                       template_var 3),
                     template_var 2),
                   template_var 1)),
               template_app (template_hole 4, template_var 0))),
           template_app (template_hole 3, t_empty))
         )),
    ("Lightweight_Java_Equivalence.class_name_mem_map",
     "(?ctx, ?cld, class_name_f ?cld) : set ?ctx_cld_dcl_list ==>
      (?ctx, class_name_f ?cld)
      : ((%(ctx, cld). (ctx, class_name_f cld)) o
         (%(ctx, cld, dcl). (ctx, cld))) `
        set ?ctx_cld_dcl_list",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_hole 12,
                template_app
                 (template_app (template_hole 11, template_var 2),
                  template_app
                   (template_app (template_hole 10, template_var 1),
                    template_app (template_hole 9, template_var 1)))),
              template_app (template_hole 8, template_var 0))
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 7,
               template_app
                (template_app (template_hole 6, template_var 2),
                 template_app (template_hole 9, template_var 1))),
             template_app
              (template_app
                (template_hole 5,
                 template_app
                  (template_app
                    (template_hole 4,
                     template_app (template_hole 3, t_empty)),
                   template_app (template_hole 2, t_empty))),
               template_app (template_hole 8, template_var 0)))
           ))),
    ("Lightweight_Java_Equivalence.fpr_mid_path",
     "[| find_path_f ?P ?ctx ?cl = Some ?path; (?ctx', ?cld') : set ?path;
         find_path_f ?P ?ctx' (cl_fqn (fqn_def (class_name_f ?cld'))) =
         Some ?path' |]
      ==> EX path''. ?path = path'' @ ?path'",
     template_implication
      ([template_equation
         (template_app
           (template_app
             (template_app (template_hole 10, template_var 6),
              template_var 5),
            template_var 4),
          template_app (template_hole 9, template_var 3)),
        template_predicate
         (
            template_app
             (template_app
               (template_hole 8,
                template_app
                 (template_app (template_hole 7, template_var 2),
                  template_var 1)),
              template_app (template_hole 6, template_var 3))
            ),
        template_equation
         (template_app
           (template_app
             (template_app (template_hole 10, template_var 6),
              template_var 2),
            template_app
             (template_hole 5,
              template_app
               (template_hole 4,
                template_app (template_hole 3, template_var 1)))),
          template_app (template_hole 9, template_var 0))],
       template_predicate (template_app (template_hole 2, t_empty)))),
    ("Lightweight_Java_Equivalence.fpr_sub_path",
     "[| find_path_f ?P ?ctx (cl_fqn ?fqn) = Some ?path;
         find_cld_f ?P ?ctx ?fqn = Some ?ctxcld;
         find_path_f ?P (fst ?ctxcld) (superclass_name_f (snd ?ctxcld)) =
         Some ?path' |]
      ==> ?path = ?ctxcld # ?path'",
     template_implication
      ([template_equation
         (template_app
           (template_app
             (template_app (template_hole 10, template_var 5),
              template_var 4),
            template_app (template_hole 9, template_var 3)),
          template_app (template_hole 8, template_var 2)),
        template_equation
         (template_app
           (template_app
             (template_app (template_hole 6, template_var 5),
              template_var 4),
            template_var 3),
          template_app (template_hole 5, template_var 1)),
        template_equation
         (template_app
           (template_app
             (template_app (template_hole 10, template_var 5),
              template_app (template_hole 4, template_var 1)),
            template_app
             (template_hole 3,
              template_app (template_hole 2, template_var 1))),
          template_app (template_hole 8, template_var 0))],
       template_equation
        (template_var 2,
         template_app
          (template_app (template_hole 0, template_var 1),
           template_var 0)))),
    ("Lightweight_Java_Equivalence.lift_opts_find_type",
     "[| lift_opts
          (map (case_vd (%clk vark. find_type_f ?P ?ctx clk)) ?vds) =
         Some ?tys;
         ?x : set (zip ?vds ?tys) |]
      ==> case ?x of
          (vd_def cl var, ty) => find_type_f ?P ?ctx cl = Some ty",
     template_implication
      ([template_equation
         (template_app
           (template_hole 11,
            template_app
             (template_app
               (template_hole 10, template_app (template_hole 9, t_empty)),
              template_var 2)),
          template_app (template_hole 7, template_var 1)),
        template_predicate
         (
            template_app
             (template_app (template_hole 6, template_var 0),
              template_app
               (template_hole 5,
                template_app
                 (template_app (template_hole 4, template_var 2),
                  template_var 1)))
            )],
       template_predicate
        (
           template_app
            (template_app (template_hole 3, t_empty), template_var 0)
           ))),
    ("Lightweight_Java_Equivalence.tys_tys'_list",
     "[| lift_opts (map (%(x, y). is_sty_one ?P x y) ?tys_tys'_list) =
         Some ?bools;
         length ?tys = length ?tys'; list_all id ?bools;
         (?ty, ?ty') : set ?tys_tys'_list |]
      ==> is_sty_one ?P ?ty ?ty' = Some True",
     template_implication
      ([template_equation
         (template_app
           (template_hole 15,
            template_app
             (template_app
               (template_hole 14, template_app (template_hole 13, t_empty)),
              template_var 5)),
          template_app (template_hole 11, template_var 4)),
        template_equation
         (template_app (template_hole 9, template_var 3),
          template_app (template_hole 8, template_var 2)),
        template_predicate
         (
            template_app
             (template_app (template_hole 7, template_hole 6),
              template_var 4)
            ),
        template_predicate
         (
            template_app
             (template_app
               (template_hole 5,
                template_app
                 (template_app (template_hole 4, template_var 1),
                  template_var 0)),
              template_app (template_hole 3, template_var 5))
            )],
       template_equation
        (template_app
          (template_app
            (template_app (template_hole 12, template_var 6),
             template_var 1),
           template_var 0),
         template_app (template_hole 1, template_hole 0)))),
    ("Lightweight_Java_Equivalence.lift_opts_ind",
     "(!!x. x : set ?list ==>
            case x of (cl, var, ty) => find_type_f ?P ?ctx cl = Some ty) ==>
      lift_opts
       (map (case_vd (%clk vark. find_type_f ?P ?ctx clk) o
             (%(cl, var, ty). vd_def cl var))
         ?list) =
      Some (map (%(cl, var, ty). ty) ?list)",
     template_implication
      ([template_predicate (template_app (template_hole 20, t_empty))],
       template_equation
        (template_app
          (template_hole 10,
           template_app
            (template_app
              (template_hole 9,
               template_app
                (template_app
                  (template_hole 8,
                   template_app (template_hole 7, t_empty)),
                 template_app (template_hole 6, t_empty))),
             template_var 2)),
         template_app
          (template_hole 3,
           template_app
            (template_app
              (template_hole 2, template_app (template_hole 1, t_empty)),
             template_var 2))))),
    ("Lightweight_Java_Equivalence.fpr_mid_path'",
     "[| find_path_rec_f ?P ?ctx ?cl ?path' = Some ?path;
         ?ctxcld : set ?path |]
      ==> ?ctxcld : set ?path' |
          (ALL path_fqn.
              find_path_rec_f ?P (fst ?ctxcld)
               (cl_fqn (fqn_def (class_name_f (snd ?ctxcld)))) ?path'' =
              Some path_fqn -->
              (ALL path'''.
                  path_fqn = ?path'' @ path''' -->
                  (EX path_rest. ?path = path_rest @ path''')))",
     template_implication
      ([template_equation
         (template_app
           (template_app
             (template_app
               (template_app (template_hole 14, template_var 6),
                template_var 5),
              template_var 4),
            template_var 3),
          template_app (template_hole 13, template_var 2)),
        template_predicate
         (
            template_app
             (template_app (template_hole 12, template_var 1),
              template_app (template_hole 11, template_var 2))
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 10,
               template_app
                (template_app (template_hole 12, template_var 1),
                 template_app (template_hole 11, template_var 3))),
             template_app (template_hole 9, t_empty))
           ))),
    ("Lightweight_Java_Equivalence.fpr_sub_path'",
     "find_path_rec_f ?P ?ctx ?cl ?path' = Some ?path -->
      (ALL fqn ctxcld path'' path_fqn.
          ?cl = cl_fqn fqn &
          find_cld_f ?P ?ctx fqn = Some ctxcld &
          find_path_rec_f ?P (fst ctxcld) (superclass_name_f (snd ctxcld))
           path'' =
          Some path_fqn -->
          (EX path'''.
              path_fqn = path'' @ path''' &
              ?path = ?path' @ ctxcld # path'''))",
     template_predicate
      (
         template_app
          (template_app
            (template_hole 19,
             template_app
              (template_app
                (template_hole 18,
                 template_app
                  (template_app
                    (template_app
                      (template_app (template_hole 17, template_var 4),
                       template_var 3),
                     template_var 2),
                   template_var 1)),
               template_app (template_hole 16, template_var 0))),
           template_app (template_hole 15, t_empty))
         )),
    ("Lightweight_Java_Equivalence.fpr_sub_path_simp",
     "[| find_path_rec_f ?P ?ctx (superclass_name_f ?cld) ?path'' =
         Some ?path_fqn;
         find_cld_f ?P ?ctx ?fqn = Some (?ctx, ?cld); acyclic_clds ?P;
         find_path_rec_f ?P ?ctx (superclass_name_f ?cld)
          (?path' @ [(?ctx, ?cld)]) =
         Some ?path |]
      ==> EX path'''.
             ?path_fqn = ?path'' @ path''' &
             ?path = ?path' @ (?ctx, ?cld) # path'''",
     template_implication
      ([template_equation
         (template_app
           (template_app
             (template_app
               (template_app (template_hole 13, template_var 7),
                template_var 6),
              template_app (template_hole 12, template_var 5)),
            template_var 4),
          template_app (template_hole 11, template_var 3)),
        template_equation
         (template_app
           (template_app
             (template_app (template_hole 9, template_var 7),
              template_var 6),
            template_var 2),
          template_app
           (template_hole 8,
            template_app
             (template_app (template_hole 7, template_var 6),
              template_var 5))),
        template_predicate (template_app (template_hole 6, template_var 7)),
        template_equation
         (template_app
           (template_app
             (template_app
               (template_app (template_hole 13, template_var 7),
                template_var 6),
              template_app (template_hole 12, template_var 5)),
            template_app
             (template_app (template_hole 5, template_var 1),
              template_app
               (template_app
                 (template_hole 4,
                  template_app
                   (template_app (template_hole 7, template_var 6),
                    template_var 5)),
                template_hole 3))),
          template_app (template_hole 11, template_var 0))],
       template_predicate (template_app (template_hole 2, t_empty))))]:
   (string * thm * template) list
### theory "Draft.Lightweight_Java_EquivalenceMoreTemplates"
### 0.537s elapsed time, 0.756s cpu time, 0.069s GC time
val it = (): unit
