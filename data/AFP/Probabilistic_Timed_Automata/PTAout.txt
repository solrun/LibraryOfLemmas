Loading theory "Draft.Basic" (required by "Draft.PTATemplates" via "Draft.PTA" via "Draft.Lib" via "Draft.Sequence_LTL" via "Draft.Sequence")
Loading theory "Draft.Finiteness" (required by "Draft.PTATemplates" via "Draft.PTA" via "Draft.Lib")
Loading theory "Draft.Instantiate_Existentials" (required by "Draft.PTATemplates" via "Draft.PTA" via "Draft.Lib")
Loading theory "HOL-Library.Function_Algebras" (required by "Draft.PTATemplates" via "Draft.ExtrEqs" via "HOL-Library.BigO")
instantiation
  fun :: (type, plus) plus
  plus_fun == plus :: ('a => 'b) => ('a => 'b) => 'a => 'b
instantiation
  fun :: (type, zero) zero
  zero_fun == zero_class.zero :: 'a => 'b
val inst_existentials_tac = fn: Proof.context -> term list -> int -> tactic
instantiation
  fun :: (type, times) times
  times_fun == times :: ('a => 'b) => ('a => 'b) => 'a => 'b
### theory "Draft.Instantiate_Existentials"
### 0.047s elapsed time, 0.223s cpu time, 0.000s GC time
Loading theory "Draft.More_List" (required by "Draft.PTATemplates" via "Draft.PTA" via "Draft.Lib" via "Draft.Graphs")
consts
  alternate :: "('a => 'a) => ('a => 'a) => nat => 'a => 'a"
instantiation
  fun :: (type, one) one
  one_fun == one_class.one :: 'a => 'b
### theory "Draft.Basic"
### 0.066s elapsed time, 0.297s cpu time, 0.000s GC time
Loading theory "Draft.Sequence" (required by "Draft.PTATemplates" via "Draft.PTA" via "Draft.Lib" via "Draft.Sequence_LTL")
### theory "HOL-Library.Function_Algebras"
### 0.131s elapsed time, 0.524s cpu time, 0.052s GC time
Loading theory "Draft.Templates" (required by "Draft.PTATemplates" via "Draft.ExtrEqs")
### theory "Draft.More_List"
### 0.103s elapsed time, 0.373s cpu time, 0.052s GC time
Loading theory "HOL-Library.BigO" (required by "Draft.PTATemplates" via "Draft.ExtrEqs")
datatype template_term
=
     t_empty
   | template_app of template_term * template_term
   | template_hole of int
   | template_var of int
datatype sign
= equals | greater_equals | greater_than | less_equals | less_than
datatype template
=
     template_bimplication of template * template
   | template_dunno
   | template_equation of template_term * template_term
   | template_implication of template list * template
   | template_inequation of sign * template_term * template_term
   | template_negation of template
   | template_predicate of template_term
constructor t_empty: template_term
constructor template_app: template_term * template_term -> template_term
constructor template_hole: int -> template_term
constructor template_var: int -> template_term
constructor equals: sign
constructor greater_equals: sign
constructor greater_than: sign
constructor less_equals: sign
constructor less_than: sign
constructor template_bimplication: template * template -> template
constructor template_dunno: template
constructor template_equation: template_term * template_term -> template
constructor template_implication: template list * template -> template
constructor template_inequation:
   sign * template_term * template_term -> template
constructor template_negation: template -> template
constructor template_predicate: template_term -> template
val vfs = fn: term -> (indexname * typ) list * (string * typ) list
val indexOf = fn: ''a list -> ''a -> int -> int
val has_eq = fn: term -> bool
val term2template = fn:
   (indexname * typ) list -> (string * typ) list -> term -> template_term
val lemma2predicate = fn: term -> term -> template
val makeTemplatewithContext = fn: term -> term -> template
val lemma2template = fn: term -> template
val thm2template = fn: thm -> template
val tterm2string = fn: template_term -> string
val template2string = fn: template -> string
val t = "height ?t <= size ?t": thm
val th =
   Const ("HOL.Trueprop", "bool => prop") $
     (Const ("Orderings.ord_class.less_eq", "nat => nat => bool") $
       (Const ("Tree.height_class.height", "?'a tree => nat") $
         Var (("t", 0), "?'a tree")) $
       (Const ("Nat.size_class.size", "?'a tree => nat") $
         Var (("t", 0), "?'a tree"))):
   term
### theory "Draft.Templates"
### 0.055s elapsed time, 0.222s cpu time, 0.000s GC time
Loading theory "Draft.MDP_Aux" (required by "Draft.PTATemplates" via "Draft.PTA" via "Draft.Lib")
### theory "Draft.MDP_Aux"
### 0.054s elapsed time, 0.223s cpu time, 0.000s GC time
### theory "Draft.Finiteness"
### 0.371s elapsed time, 1.350s cpu time, 0.142s GC time
Found termination order: "(%p. length (fst (snd p))) <*mlex*> {}"
consts
  sscan :: "('a => 'b => 'b) => 'a stream => 'b => 'b stream"
Proofs for coinductive predicate(s) "sdistinct"
  Proving monotonicity ...
Proofs for coinductive predicate(s) "sascending"
  Proving monotonicity ...
Proofs for coinductive predicate(s) "sdescending"
  Proving monotonicity ...
### theory "Draft.Sequence"
### 0.523s elapsed time, 1.496s cpu time, 0.142s GC time
Loading theory "Draft.Sequence_LTL" (required by "Draft.PTATemplates" via "Draft.PTA" via "Draft.Lib")
### theory "HOL-Library.BigO"
### 0.639s elapsed time, 1.617s cpu time, 0.153s GC time
Loading theory "Draft.ExtrEqs" (required by "Draft.PTATemplates")
### theory "Draft.Sequence_LTL"
### 0.400s elapsed time, 0.869s cpu time, 0.170s GC time
Loading theory "Draft.Stream_More" (required by "Draft.PTATemplates" via "Draft.PTA" via "Draft.Lib" via "Draft.Graphs")
val eqpattern =
   Pattern
    (
       Const ("HOL.Trueprop", "bool => prop") $
         (Const ("HOL.eq", "?'a => ?'a => bool") $
           Var (("_dummy_", 1), "?'a") $ Var (("_dummy_", 2), "?'a"))
       ):
   term Find_Theorems.criterion
val badeqpattern = Pattern (Const ("Pure.eq", "?'a => ?'a => prop")):
   term Find_Theorems.criterion
val undefpattern =
   Pattern
    (
       Const ("HOL.Trueprop", "bool => prop") $
         (Const ("HOL.eq", "?'a => ?'a => bool") $
           Var (("_dummy_", 1), "?'a") $ Const ("HOL.undefined", "?'a"))
       ):
   term Find_Theorems.criterion
val thmpattern =
   Pattern
    (Const ("HOL.Trueprop", "bool => prop") $ Var (("_dummy_", 1), "bool")):
   term Find_Theorems.criterion
val badnames =
   ["*nitpick*", "*Nitpick*", "*full_exhaustive*", "*_def*", "Enum.finite*",
    "*Quickcheck*", "ATP*", "*Nunchaku*", "*Code*", "*BNF*", "*SMT*",
    "*.*.*"]:
   string list
val unwanted_names =
   [(false, Name "*nitpick*"), (false, Name "*Nitpick*"),
    (false, Name "*full_exhaustive*"), (false, Name "*_def*"),
    (false, Name "Enum.finite*"), (false, Name "*Quickcheck*"),
    (false, Name "ATP*"), (false, Name "*Nunchaku*"),
    (false, Name "*Code*"), (false, Name "*BNF*"), (false, Name "*SMT*"),
    (false, Name "*.*.*")]:
   (bool * term Find_Theorems.criterion) list
val has_vars = fn: term -> bool
val get_all_eqs = fn: string -> Proof.context -> (string * thm) list
val get_all_thms = fn: string -> Proof.context -> (string * thm) list
val get_noneq_thms = fn: string -> Proof.context -> (string * thm) list
val template_eqs = fn:
   string -> Proof.context -> (string * thm * template) list
val template_thms = fn:
   string -> Proof.context -> (string * thm * template) list
### theory "Draft.ExtrEqs"
### 0.518s elapsed time, 1.092s cpu time, 0.169s GC time
ev ?\<phi> ?xs ==> ?\<phi> (sdrop (wait ?\<phi> ?xs) ?xs)
### theory "Draft.Stream_More"
### 0.468s elapsed time, 0.815s cpu time, 0.063s GC time
Loading theory "Draft.Graphs" (required by "Draft.PTATemplates" via "Draft.PTA" via "Draft.Lib")
locale Graph_Defs
  fixes E :: "'a => 'a => bool"
Proofs for inductive predicate(s) "steps"
  Proving monotonicity ...
Proofs for coinductive predicate(s) "run"
  Proving monotonicity ...
locale Graph_Start_Defs
  fixes E :: "'a => 'a => bool"
    and s\<^sub>0 :: "'a"
locale Subgraph_Defs
  fixes E :: "'a => 'a => bool"
    and E' :: "'a => 'a => bool"
locale Subgraph_Start_Defs
  fixes E :: "'a => 'a => bool"
    and s\<^sub>0 :: "'a"
    and E' :: "'a => 'a => bool"
locale Subgraph
  fixes E :: "'a => 'a => bool"
    and E' :: "'a => 'a => bool"
  assumes "Subgraph E E'"
locale Subgraph_Start
  fixes E :: "'a => 'a => bool"
    and s\<^sub>0 :: "'a"
    and E' :: "'a => 'a => bool"
  assumes "Subgraph_Start E E'"
locale Subgraph_Node_Defs
  fixes E :: "'a => 'a => bool"
    and V :: "'a => bool"
locale Subgraph_Node_Defs_Notation
  fixes E :: "'a => 'a => bool"
    and V :: "'a => bool"
locale Graph_Start_Defs
  fixes E :: "'a => 'a => bool"
    and s\<^sub>0 :: "'a"
bundle graph_automation
bundle graph_automation_aggressive
bundle subgraph_automation
locale Graph_Invariant
  fixes E :: "'a => 'a => bool"
    and P :: "'a => bool"
  assumes "Graph_Invariant E P"
locale Graph_Invariants
  fixes E :: "'a => 'a => bool"
    and P :: "'a => bool"
    and Q :: "'a => bool"
  assumes "Graph_Invariants E P Q"
locale Graph_Invariant_Start
  fixes E :: "'a => 'a => bool"
    and s\<^sub>0 :: "'a"
    and P :: "'a => bool"
  assumes "Graph_Invariant_Start E s\<^sub>0 P"
locale Graph_Invariant_Strong
  fixes E :: "'a => 'a => bool"
    and P :: "'a => bool"
  assumes "Graph_Invariant_Strong E P"
locale Simulation_Defs
  fixes A :: "'a => 'a => bool"
    and B :: "'b => 'b => bool"
    and sim :: "'a => 'b => bool"  (infixr \<open>\<sim>\<close> 60)
locale Simulation
  fixes A :: "'a => 'a => bool"
    and B :: "'b => 'b => bool"
    and sim :: "'a => 'b => bool"  (infixr \<open>\<sim>\<close> 60)
  assumes "Simulation A B (\<sim>)"
locale Simulation_Invariant
  fixes A :: "'a => 'a => bool"
    and B :: "'b => 'b => bool"
    and sim :: "'a => 'b => bool"  (infixr \<open>\<sim>\<close> 60)
    and PA :: "'a => bool"
    and PB :: "'b => bool"
  assumes "Simulation_Invariant A B (\<sim>) PA PB"
locale Simulation_Invariants
  fixes A :: "'a => 'a => bool"
    and B :: "'b => 'b => bool"
    and sim :: "'a => 'b => bool"  (infixr \<open>\<sim>\<close> 60)
    and PA :: "'a => bool"
    and QA :: "'a => bool"
    and PB :: "'b => bool"
    and QB :: "'b => bool"
  assumes "Simulation_Invariants A B (\<sim>) PA QA PB QB"
locale Bisimulation
  fixes A :: "'a => 'a => bool"
    and B :: "'b => 'b => bool"
    and sim :: "'a => 'b => bool"  (infixr \<open>\<sim>\<close> 60)
  assumes "Bisimulation A B (\<sim>)"
locale Bisimulation_Invariant
  fixes A :: "'a => 'a => bool"
    and B :: "'b => 'b => bool"
    and sim :: "'a => 'b => bool"  (infixr \<open>\<sim>\<close> 60)
    and PA :: "'a => bool"
    and PB :: "'b => bool"
  assumes "Bisimulation_Invariant A B (\<sim>) PA PB"
locale Bisimulation_Invariants
  fixes A :: "'a => 'a => bool"
    and B :: "'b => 'b => bool"
    and sim :: "'a => 'b => bool"  (infixr \<open>\<sim>\<close> 60)
    and PA :: "'a => bool"
    and QA :: "'a => bool"
    and PB :: "'b => bool"
    and QB :: "'b => bool"
  assumes "Bisimulation_Invariants A B (\<sim>) PA QA PB QB"
### theory "Draft.Graphs"
### 4.694s elapsed time, 5.638s cpu time, 1.442s GC time
Loading theory "Draft.Lib" (required by "Draft.PTATemplates" via "Draft.PTA")
locale Graph_Defs
  fixes E :: "'a => 'a => bool"
locale MC_syntax
  fixes K :: "'s => 's pmf"
locale Markov_Decision_Process
  fixes K :: "'s => 's pmf set"
  assumes "Markov_Decision_Process K"
locale Markov_Decision_Process_Invariant
  fixes K :: "'s => 's pmf set"
    and S :: "'s set"
  assumes "Markov_Decision_Process_Invariant K S"
locale Finite_Markov_Decision_Process
  fixes K :: "'s => 's pmf set"
    and S :: "'s set"
  assumes "Finite_Markov_Decision_Process K S"
### theory "Draft.Lib"
### 2.552s elapsed time, 3.187s cpu time, 0.885s GC time
Loading theory "Draft.PTA" (required by "Draft.PTATemplates")
locale AlphaClosure
  fixes X :: "'c set"
    and k :: "'c => nat"
    and \<R> :: "('c => real) set set"
    and V :: "('c => real) set"
  assumes "AlphaClosure X"
  defines
    "\<R> == {Regions.region X I r |I r. Regions.valid_region X k I r}"
    and "V == {v. ALL x:X. 0 <= v x}"
### Ambiguous input (line 419 of "$AFP/Probabilistic_Timed_Automata/PTA.thy") produces 2 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("_applC"
###       ("_list" ("\<^const>FuncSet.funcset" ("_position" r) ("_position" d)))
###       ("_position" u))
###     ("_position" u)))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("\<^const>Timed_Automata.clock_set_abbrv" ("_position" r)
###       ("_position" d) ("_position" u))
###     ("_position" u)))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
"region_set'"
  :: "('a => 'b) set => 'a list => 'b => ('a => 'b) set"
locale Probabilistic_Timed_Automaton
  fixes
    A :: "('s * ('c, 't) cconstraint * ('c set * 's) pmf) set *
          ('s => ('c, 't) cconstraint)"
  assumes "Probabilistic_Timed_Automaton A"
Proofs for inductive predicate(s) "Kp"
  Proving monotonicity ...
locale Probabilistic_Timed_Automaton_Regions
  fixes k :: "'c => nat"
    and v :: "'c => nat"
    and n :: "nat"
    and not_in_X :: "'c"
    and
    A :: "('s * ('c, real) cconstraint * ('c set * 's) pmf) set *
          ('s => ('c, real) cconstraint)"
  assumes "Probabilistic_Timed_Automaton_Regions k v n not_in_X A"
Proofs for inductive predicate(s) "\<K>p"
  Proving monotonicity ...
### Ambiguous input (line 702 of "$AFP/Probabilistic_Timed_Automata/PTA.thy") produces 2 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Set.member"
###     ("_applC"
###       ("_list"
###         ("\<^const>FuncSet.funcset" ("_position" r)
###           ("_constrain" ("_position" d) ("_type_name" nat))))
###       ("_position" u))
###     ("_position" V)))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Set.member"
###     ("\<^const>Timed_Automata.clock_set_abbrv" ("_position" r)
###       ("_constrain" ("_position" d) ("_type_name" nat)) ("_position" u))
###     ("_position" V)))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 907 of "$AFP/Probabilistic_Timed_Automata/PTA.thy") produces 4 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Set.member"
###     ("_applC"
###       ("_list"
###         ("\<^const>FuncSet.funcset" ("_position" r)
###           ("_constrain" ("_position" d) ("_type_name" nat))))
###       ("_position" u))
###     ("\<^const>Regions.part"
###       ("_applC"
###         ("_list"
###           ("\<^const>FuncSet.funcset" ("_position" r) ("_position" d)))
###         ("_position" u))
###       ("_position" \<R>))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Set.member"
###     ("\<^const>Timed_Automata.clock_set_abbrv" ("_position" r)
###       ("_constrain" ("_position" d) ("_type_name" nat)) ("_position" u))
###     ("\<^const>Regions.part"
###       ("_applC"
###         ("_list"
###           ("\<^const>FuncSet.funcset" ("_position" r) ("_position" d)))
###         ("_position" u))
###       ("_position" \<R>))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Set.member"
###     ("_applC"
###       ("_list"
###         ("\<^const>FuncSet.funcset" ("_position" r)
###           ("_constrain" ("_position" d) ("_type_name" nat))))
###       ("_position" u))
###     ("\<^const>Regions.part"
###       ("\<^const>Timed_Automata.clock_set_abbrv" ("_position" r)
###         ("_position" d) ("_position" u))
###       ("_position" \<R>))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Set.member"
###     ("\<^const>Timed_Automata.clock_set_abbrv" ("_position" r)
###       ("_constrain" ("_position" d) ("_type_name" nat)) ("_position" u))
###     ("\<^const>Regions.part"
###       ("\<^const>Timed_Automata.clock_set_abbrv" ("_position" r)
###         ("_position" d) ("_position" u))
###       ("_position" \<R>))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 907 of "$AFP/Probabilistic_Timed_Automata/PTA.thy") produces 2 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Set.member"
###     ("\<^const>Regions.part"
###       ("_applC"
###         ("_list"
###           ("\<^const>FuncSet.funcset" ("_position" r) ("_position" d)))
###         ("_position" u))
###       ("_position" \<R>))
###     ("_position" \<R>)))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Set.member"
###     ("\<^const>Regions.part"
###       ("\<^const>Timed_Automata.clock_set_abbrv" ("_position" r)
###         ("_position" d) ("_position" u))
###       ("_position" \<R>))
###     ("_position" \<R>)))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 911 of "$AFP/Probabilistic_Timed_Automata/PTA.thy") produces 2 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Set.member" ("_position" u')
###     ("\<^const>Regions.part"
###       ("_applC"
###         ("_list"
###           ("\<^const>FuncSet.funcset" ("_position" r)
###             ("_constrain" ("_position" d) ("_type_name" nat))))
###         ("_position" u))
###       ("_position" \<R>))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Set.member" ("_position" u')
###     ("\<^const>Regions.part"
###       ("\<^const>Timed_Automata.clock_set_abbrv" ("_position" r)
###         ("_constrain" ("_position" d) ("_type_name" nat)) ("_position" u))
###       ("_position" \<R>))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 925 of "$AFP/Probabilistic_Timed_Automata/PTA.thy") produces 4 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("\<^const>Regions.part"
###       ("\<^const>Timed_Automata.clock_set_abbrv" ("_position" r)
###         ("\<^const>Groups.zero_class.zero") ("_position" u))
###       ("_position" \<R>))
###     ("\<^const>Regions.part"
###       ("\<^const>Timed_Automata.clock_set_abbrv" ("_position" r')
###         ("\<^const>Groups.zero_class.zero") ("_position" u))
###       ("_position" \<R>))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("\<^const>Regions.part"
###       ("_applC"
###         ("_list"
###           ("\<^const>FuncSet.funcset" ("_position" r)
###             ("\<^const>Groups.zero_class.zero")))
###         ("_position" u))
###       ("_position" \<R>))
###     ("\<^const>Regions.part"
###       ("\<^const>Timed_Automata.clock_set_abbrv" ("_position" r')
###         ("\<^const>Groups.zero_class.zero") ("_position" u))
###       ("_position" \<R>))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("\<^const>Regions.part"
###       ("\<^const>Timed_Automata.clock_set_abbrv" ("_position" r)
###         ("\<^const>Groups.zero_class.zero") ("_position" u))
###       ("_position" \<R>))
###     ("\<^const>Regions.part"
###       ("_applC"
###         ("_list"
###           ("\<^const>FuncSet.funcset" ("_position" r')
###             ("\<^const>Groups.zero_class.zero")))
###         ("_position" u))
###       ("_position" \<R>))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("\<^const>Regions.part"
###       ("_applC"
###         ("_list"
###           ("\<^const>FuncSet.funcset" ("_position" r)
###             ("\<^const>Groups.zero_class.zero")))
###         ("_position" u))
###       ("_position" \<R>))
###     ("\<^const>Regions.part"
###       ("_applC"
###         ("_list"
###           ("\<^const>FuncSet.funcset" ("_position" r')
###             ("\<^const>Groups.zero_class.zero")))
###         ("_position" u))
###       ("_position" \<R>))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 926 of "$AFP/Probabilistic_Timed_Automata/PTA.thy") produces 4 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("_applC"
###       ("_list"
###         ("\<^const>FuncSet.funcset" ("_position" r)
###           ("\<^const>Groups.zero_class.zero")))
###       ("_position" u))
###     ("_applC"
###       ("_list"
###         ("\<^const>FuncSet.funcset" ("_position" r')
###           ("\<^const>Groups.zero_class.zero")))
###       ("_position" u))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("\<^const>Timed_Automata.clock_set_abbrv" ("_position" r)
###       ("\<^const>Groups.zero_class.zero") ("_position" u))
###     ("_applC"
###       ("_list"
###         ("\<^const>FuncSet.funcset" ("_position" r')
###           ("\<^const>Groups.zero_class.zero")))
###       ("_position" u))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("_applC"
###       ("_list"
###         ("\<^const>FuncSet.funcset" ("_position" r)
###           ("\<^const>Groups.zero_class.zero")))
###       ("_position" u))
###     ("\<^const>Timed_Automata.clock_set_abbrv" ("_position" r')
###       ("\<^const>Groups.zero_class.zero") ("_position" u))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("\<^const>Timed_Automata.clock_set_abbrv" ("_position" r)
###       ("\<^const>Groups.zero_class.zero") ("_position" u))
###     ("\<^const>Timed_Automata.clock_set_abbrv" ("_position" r')
###       ("\<^const>Groups.zero_class.zero") ("_position" u))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
"let a = 3::'a in b"
  :: "'b"
### theory "Draft.PTA"
### 8.420s elapsed time, 9.193s cpu time, 1.251s GC time
Loading theory "Draft.PTATemplates"
val templateLemmas =
   [("PTA.valid_abstractionD",
     "PTA.valid_abstraction ?A ?X ?k ==> finite ?X",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app (template_hole 1, template_var 2),
                template_var 1),
              template_var 0)
            )],
       template_predicate
        (template_app (template_hole 0, template_var 1)))),
    ("PTA.valid_abstractionD",
     "PTA.valid_abstraction ?A ?X ?k ==> PTA.collect_clkvt ?A <= ?X",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app (template_hole 2, template_var 2),
                template_var 1),
              template_var 0)
            )],
       template_inequation
        (less_equals, template_app (template_hole 0, template_var 2),
         template_var 1))),
    ("PTA.valid_abstractionD",
     "PTA.valid_abstraction ?A ?X ?k ==>
      ALL (x, m):PTA.clkp_set ?A. m <= ?k x & x : ?X & m : \<nat>",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app (template_hole 8, template_var 2),
                template_var 1),
              template_var 0)
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 7,
               template_app (template_hole 6, template_var 2)),
             template_app (template_hole 5, t_empty))
           ))),
    ("PTA.guard_continuous",
     "[| ?u \<turnstile> ?g; ?u \<oplus> ?t \<turnstile> ?g;
         (0::?'t) <= ?t'; ?t' <= ?t |]
      ==> ?u \<oplus> ?t' \<turnstile> ?g",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 3, template_var 3),
              template_var 2)
            ),
        template_predicate
         (
            template_app
             (template_app
               (template_hole 3,
                template_app
                 (template_app (template_hole 2, template_var 3),
                  template_var 1)),
              template_var 2)
            ),
        template_inequation (less_equals, template_hole 0, template_var 0),
        template_inequation (less_equals, template_var 0, template_var 1)],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 3,
               template_app
                (template_app (template_hole 2, template_var 3),
                 template_var 0)),
             template_var 2)
           ))),
    ("PTA.valid_abstractionI",
     "[| ALL (x, m):PTA.clkp_set ?A. m <= ?k x & x : ?X & m : \<nat>;
         PTA.collect_clkvt ?A <= ?X; finite ?X |]
      ==> PTA.valid_abstraction ?A ?X ?k",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_hole 11,
                template_app (template_hole 10, template_var 2)),
              template_app (template_hole 9, t_empty))
            ),
        template_inequation
         (less_equals, template_app (template_hole 2, template_var 2),
          template_var 0),
        template_predicate
         (template_app (template_hole 1, template_var 0))],
       template_predicate
        (
           template_app
            (template_app
              (template_app (template_hole 0, template_var 2),
               template_var 0),
             template_var 1)
           ))),
    ("PTA.upper_right_eq",
     "[| finite ?X; Regions.valid_region ?X ?k ?I ?r |]
      ==> (ALL x:?X. Regions.isGreater (?I x)) =
          (ALL t>=0.
              ALL u:Regions.region ?X ?I ?r.
                 u \<oplus> t : Regions.region ?X ?I ?r)",
     template_implication
      ([template_predicate
         (template_app (template_hole 12, template_var 3)),
        template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_app (template_hole 11, template_var 3),
                  template_var 2),
                template_var 1),
              template_var 0)
            )],
       template_equation
        (template_app
          (template_app (template_hole 9, template_var 3), t_empty),
         template_app (template_hole 7, t_empty)))),
    ("PTA.region_continuous",
     "[| Regions.valid_region ?X ?k ?I ?r; 0 <= ?t1.0; ?t1.0 <= ?t2.0;
         ?u : Regions.region ?X ?I ?r;
         ?u \<oplus> ?t2.0 : Regions.region ?X ?I ?r |]
      ==> ?u \<oplus> ?t1.0 : Regions.region ?X ?I ?r",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_app (template_hole 5, template_var 6),
                  template_var 5),
                template_var 4),
              template_var 3)
            ),
        template_inequation (less_equals, template_hole 3, template_var 2),
        template_inequation (less_equals, template_var 2, template_var 1),
        template_predicate
         (
            template_app
             (template_app (template_hole 2, template_var 0),
              template_app
               (template_app
                 (template_app (template_hole 1, template_var 6),
                  template_var 4),
                template_var 3))
            ),
        template_predicate
         (
            template_app
             (template_app
               (template_hole 2,
                template_app
                 (template_app (template_hole 0, template_var 0),
                  template_var 1)),
              template_app
               (template_app
                 (template_app (template_hole 1, template_var 6),
                  template_var 4),
                template_var 3))
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 2,
               template_app
                (template_app (template_hole 0, template_var 0),
                 template_var 2)),
             template_app
              (template_app
                (template_app (template_hole 1, template_var 6),
                 template_var 4),
               template_var 3))
           ))),
    ("PTA.bounded_region",
     "[| finite ?X; Regions.valid_region ?X ?k ?I ?r;
         ~ (ALL t>=0.
               ALL u:Regions.region ?X ?I ?r.
                  u \<oplus> t : Regions.region ?X ?I ?r);
         ?u : Regions.region ?X ?I ?r |]
      ==> ?u \<oplus> 1 ~: Regions.region ?X ?I ?r",
     template_implication
      ([template_predicate
         (template_app (template_hole 11, template_var 4)),
        template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_app (template_hole 10, template_var 4),
                  template_var 3),
                template_var 2),
              template_var 1)
            ),
        template_negation
         (template_predicate (template_app (template_hole 8, t_empty))),
        template_predicate
         (
            template_app
             (template_app (template_hole 2, template_var 0),
              template_app
               (template_app
                 (template_app (template_hole 3, template_var 4),
                  template_var 2),
                template_var 1))
            )],
       template_negation
        (
           template_predicate
            (
               template_app
                (template_app
                  (template_hole 2,
                   template_app
                    (template_app (template_hole 1, template_var 0),
                     template_hole 0)),
                 template_app
                  (template_app
                    (template_app (template_hole 3, template_var 4),
                     template_var 2),
                   template_var 1))
               )
           ))),
    ("PTA.T_eq_rel_half",
     "[| !!s t. ?R s t = (s : ?S & ?f s = t);
         ?A : sets (stream_space (count_space UNIV));
         ?B : sets (stream_space (count_space UNIV));
         PTA.rel_set_strong (stream_all2 ?R) ?A ?B;
         rel_fun ?R (rel_pmf ?R) ?K ?L; ?R ?x ?y |]
      ==> emeasure (MC_syntax.T ?K ?x) ?A =
          emeasure (MC_syntax.T ?L ?y) ?B",
     template_implication
      ([template_predicate (template_app (template_hole 25, t_empty)),
        template_predicate
         (
            template_app
             (template_app (template_hole 18, template_var 5),
              template_app
               (template_hole 17,
                template_app
                 (template_hole 16,
                  template_app (template_hole 15, template_hole 14))))
            ),
        template_predicate
         (
            template_app
             (template_app (template_hole 13, template_var 4),
              template_app
               (template_hole 12,
                template_app
                 (template_hole 11,
                  template_app (template_hole 10, template_hole 9))))
            ),
        template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_hole 8,
                  template_app (template_hole 7, template_var 8)),
                template_var 5),
              template_var 4)
            ),
        template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_app (template_hole 6, template_var 8),
                  template_app (template_hole 5, template_var 8)),
                template_var 3),
              template_var 2)
            ),
        template_predicate
         (
            template_app
             (template_app (template_var 8, template_var 1), template_var 0)
            )],
       template_equation
        (template_app
          (template_app
            (template_hole 3,
             template_app
              (template_app (template_hole 2, template_var 3),
               template_var 1)),
           template_var 5),
         template_app
          (template_app
            (template_hole 1,
             template_app
              (template_app (template_hole 0, template_var 2),
               template_var 0)),
           template_var 4))))]:
   (string * thm * template) list
### theory "Draft.PTATemplates"
### 1.485s elapsed time, 1.861s cpu time, 0.239s GC time
val it = (): unit
