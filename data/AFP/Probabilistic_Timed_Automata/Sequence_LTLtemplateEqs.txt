   [("Sequence_LTL.HLD_sconst", "HLD ?A (sconst ?a) = (?a : ?A)",
     template_equation
      (template_app
        (template_app (template_hole 3, template_var 1),
         template_app
          (template_app (template_hole 2, template_hole 1),
           template_var 0)),
       template_app
        (template_app (template_hole 0, template_var 0), template_var 1))),
    ("Sequence_LTL.alw_ev_sdrop",
     "alw (ev ?P) (sdrop ?n ?w) = alw (ev ?P) ?w",
     template_equation
      (template_app
        (template_app
          (template_hole 2, template_app (template_hole 1, template_var 2)),
         template_app
          (template_app (template_hole 0, template_var 1), template_var 0)),
       template_app
        (template_app
          (template_hole 2, template_app (template_hole 1, template_var 2)),
         template_var 0))),
    ("Sequence_LTL.alw_ev_shift", "alw (ev ?P) (?u @- ?v) = alw (ev ?P) ?v",
     template_equation
      (template_app
        (template_app
          (template_hole 2, template_app (template_hole 1, template_var 2)),
         template_app
          (template_app (template_hole 0, template_var 1), template_var 0)),
       template_app
        (template_app
          (template_hole 2, template_app (template_hole 1, template_var 2)),
         template_var 0))),
    ("Sequence_LTL.alw_ev_scons", "alw (ev ?P) (?a ## ?w) = alw (ev ?P) ?w",
     template_equation
      (template_app
        (template_app
          (template_hole 2, template_app (template_hole 1, template_var 2)),
         template_app
          (template_app (template_hole 0, template_var 1), template_var 0)),
       template_app
        (template_app
          (template_hole 2, template_app (template_hole 1, template_var 2)),
         template_var 0))),
    ("Sequence_LTL.ev_alw_sdrop",
     "ev (alw ?P) (sdrop ?n ?w) = ev (alw ?P) ?w",
     template_equation
      (template_app
        (template_app
          (template_hole 2, template_app (template_hole 1, template_var 2)),
         template_app
          (template_app (template_hole 0, template_var 1), template_var 0)),
       template_app
        (template_app
          (template_hole 2, template_app (template_hole 1, template_var 2)),
         template_var 0))),
    ("Sequence_LTL.ev_alw_shift", "ev (alw ?P) (?u @- ?v) = ev (alw ?P) ?v",
     template_equation
      (template_app
        (template_app
          (template_hole 2, template_app (template_hole 1, template_var 2)),
         template_app
          (template_app (template_hole 0, template_var 1), template_var 0)),
       template_app
        (template_app
          (template_hole 2, template_app (template_hole 1, template_var 2)),
         template_var 0))),
    ("Sequence_LTL.ev_alw_scons", "ev (alw ?P) (?a ## ?w) = ev (alw ?P) ?w",
     template_equation
      (template_app
        (template_app
          (template_hole 2, template_app (template_hole 1, template_var 2)),
         template_app
          (template_app (template_hole 0, template_var 1), template_var 0)),
       template_app
        (template_app
          (template_hole 2, template_app (template_hole 1, template_var 2)),
         template_var 0))),
    ("Sequence_LTL.ev_HLD_sset", "ev (HLD ?A) ?w = (sset ?w Int ?A ~= {})",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_hole 6,
                template_app (template_hole 5, template_var 1)),
              template_var 0)
            )],
       template_negation
        (
           template_equation
            (template_app
              (template_app
                (template_hole 2,
                 template_app (template_hole 1, template_var 0)),
               template_var 1),
             template_hole 0)
           ))),
    ("Sequence_LTL.infs_infm", "infs ?A ?w = (INFM i. ?w !! i : ?A)",
     template_equation
      (template_app
        (template_app
          (template_hole 6,
           template_app
            (template_hole 5,
             template_app (template_hole 4, template_var 1))),
         template_var 0),
       template_app
        (template_app (template_hole 3, t_empty), template_hole 0))),
    ("Sequence_LTL.infs_snth",
     "infs ?A ?w = (ALL n. EX k>=n. ?w !! k : ?A)",
     template_equation
      (template_app
        (template_app
          (template_hole 8,
           template_app
            (template_hole 7,
             template_app (template_hole 6, template_var 1))),
         template_var 0),
       template_app (template_hole 5, t_empty))),
    ("Sequence_LTL.infs_union",
     "infs (?A Un ?B) ?w = (infs ?A ?w | infs ?B ?w)",
     template_equation
      (template_app
        (template_app
          (template_hole 4,
           template_app
            (template_hole 3,
             template_app
              (template_hole 2,
               template_app
                (template_app (template_hole 1, template_var 2),
                 template_var 1)))),
         template_var 0),
       template_app
        (template_app
          (template_hole 0,
           template_app
            (template_app
              (template_hole 4,
               template_app
                (template_hole 3,
                 template_app (template_hole 2, template_var 2))),
             template_var 0)),
         template_app
          (template_app
            (template_hole 4,
             template_app
              (template_hole 3,
               template_app (template_hole 2, template_var 1))),
           template_var 0)))),
    ("Sequence_LTL.ev_stl",
     "ev ?\<phi> (stl ?w) = (EX u v. ?w = u @- v & u ~= [] & ?\<phi> v)",
     template_equation
      (template_app
        (template_app (template_hole 9, template_var 1),
         template_app (template_hole 8, template_var 0)),
       template_app (template_hole 7, t_empty))),
    ("Sequence_LTL.infs_suffix",
     "infs ?A ?w = (ALL u v. ?w = u @- v --> sset v Int ?A ~= {})",
     template_equation
      (template_app
        (template_app
          (template_hole 12,
           template_app
            (template_hole 11,
             template_app (template_hole 10, template_var 1))),
         template_var 0),
       template_app (template_hole 9, t_empty)))]
