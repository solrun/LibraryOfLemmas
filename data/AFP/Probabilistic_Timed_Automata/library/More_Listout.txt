Loading theory "Draft.Instantiate_Existentials" (required by "Draft.More_ListTemplates" via "Draft.More_List")
Loading theory "HOL-Library.Function_Algebras" (required by "Draft.More_ListTemplates" via "Draft.ExtrEqs" via "HOL-Library.BigO")
Loading theory "Draft.Templates" (required by "Draft.More_ListTemplates" via "Draft.ExtrEqs")
instantiation
  fun :: (type, plus) plus
  plus_fun == plus :: ('a => 'b) => ('a => 'b) => 'a => 'b
val inst_existentials_tac = fn: Proof.context -> term list -> int -> tactic
instantiation
  fun :: (type, zero) zero
  zero_fun == zero_class.zero :: 'a => 'b
### theory "Draft.Instantiate_Existentials"
### 0.046s elapsed time, 0.163s cpu time, 0.000s GC time
Loading theory "Draft.More_List" (required by "Draft.More_ListTemplates")
instantiation
  fun :: (type, times) times
  times_fun == times :: ('a => 'b) => ('a => 'b) => 'a => 'b
instantiation
  fun :: (type, one) one
  one_fun == one_class.one :: 'a => 'b
datatype template_term
=
     t_empty
   | template_app of template_term * template_term
   | template_hole of int
   | template_var of int
datatype sign
= equals | greater_equals | greater_than | less_equals | less_than
datatype template
=
     template_bimplication of template * template
   | template_dunno
   | template_equation of template_term * template_term
   | template_implication of template list * template
   | template_inequation of sign * template_term * template_term
   | template_negation of template
   | template_predicate of template_term
constructor t_empty: template_term
constructor template_app: template_term * template_term -> template_term
constructor template_hole: int -> template_term
constructor template_var: int -> template_term
constructor equals: sign
constructor greater_equals: sign
constructor greater_than: sign
constructor less_equals: sign
constructor less_than: sign
constructor template_bimplication: template * template -> template
constructor template_dunno: template
constructor template_equation: template_term * template_term -> template
constructor template_implication: template list * template -> template
constructor template_inequation:
   sign * template_term * template_term -> template
constructor template_negation: template -> template
constructor template_predicate: template_term -> template
val vfs = fn: term -> (indexname * typ) list * (string * typ) list
val indexOf = fn: ''a list -> ''a -> int -> int
val has_eq = fn: term -> bool
val term2template = fn:
   (indexname * typ) list -> (string * typ) list -> term -> template_term
val lemma2predicate = fn: term -> term -> template
val makeTemplatewithContext = fn: term -> term -> template
val lemma2template = fn: term -> template
val thm2template = fn: thm -> template
val tterm2string = fn: template_term -> string
val template2string = fn: template -> string
val t = "height ?t <= size ?t": thm
val th =
   Const ("HOL.Trueprop", "bool => prop") $
     (Const ("Orderings.ord_class.less_eq", "nat => nat => bool") $
       (Const ("Tree.height_class.height", "?'a tree => nat") $
         Var (("t", 0), "?'a tree")) $
       (Const ("Nat.size_class.size", "?'a tree => nat") $
         Var (("t", 0), "?'a tree"))):
   term
### theory "Draft.Templates"
### 0.078s elapsed time, 0.262s cpu time, 0.000s GC time
### theory "HOL-Library.Function_Algebras"
### 0.119s elapsed time, 0.339s cpu time, 0.000s GC time
Loading theory "HOL-Library.BigO" (required by "Draft.More_ListTemplates" via "Draft.ExtrEqs")
### theory "Draft.More_List"
### 0.112s elapsed time, 0.258s cpu time, 0.048s GC time
### theory "HOL-Library.BigO"
### 0.565s elapsed time, 0.589s cpu time, 0.000s GC time
Loading theory "Draft.ExtrEqs" (required by "Draft.More_ListTemplates")
val eqpattern =
   Pattern
    (
       Const ("HOL.Trueprop", "bool => prop") $
         (Const ("HOL.eq", "?'a => ?'a => bool") $
           Var (("_dummy_", 1), "?'a") $ Var (("_dummy_", 2), "?'a"))
       ):
   term Find_Theorems.criterion
val badeqpattern = Pattern (Const ("Pure.eq", "?'a => ?'a => prop")):
   term Find_Theorems.criterion
val undefpattern =
   Pattern
    (
       Const ("HOL.Trueprop", "bool => prop") $
         (Const ("HOL.eq", "?'a => ?'a => bool") $
           Var (("_dummy_", 1), "?'a") $ Const ("HOL.undefined", "?'a"))
       ):
   term Find_Theorems.criterion
val thmpattern =
   Pattern
    (Const ("HOL.Trueprop", "bool => prop") $ Var (("_dummy_", 1), "bool")):
   term Find_Theorems.criterion
val badnames =
   ["*nitpick*", "*Nitpick*", "*full_exhaustive*", "*_def*", "Enum.finite*",
    "*Quickcheck*", "ATP*", "*Nunchaku*", "*Code*", "*BNF*", "*SMT*",
    "*.*.*"]:
   string list
val unwanted_names =
   [(false, Name "*nitpick*"), (false, Name "*Nitpick*"),
    (false, Name "*full_exhaustive*"), (false, Name "*_def*"),
    (false, Name "Enum.finite*"), (false, Name "*Quickcheck*"),
    (false, Name "ATP*"), (false, Name "*Nunchaku*"),
    (false, Name "*Code*"), (false, Name "*BNF*"), (false, Name "*SMT*"),
    (false, Name "*.*.*")]:
   (bool * term Find_Theorems.criterion) list
val has_vars = fn: term -> bool
val get_all_eqs = fn: string -> Proof.context -> (string * thm) list
val get_all_thms = fn: string -> Proof.context -> (string * thm) list
val get_noneq_thms = fn: string -> Proof.context -> (string * thm) list
val template_eqs = fn:
   string -> Proof.context -> (string * thm * template) list
val template_thms = fn:
   string -> Proof.context -> (string * thm * template) list
### theory "Draft.ExtrEqs"
### 0.456s elapsed time, 0.515s cpu time, 0.086s GC time
Loading theory "Draft.More_ListTemplates"
val templateLemmas =
   [("More_List.filter_nths_length",
     "length (filter ?P (nths ?xs ?I)) <= length (filter ?P ?xs)",
     template_inequation
      (less_equals,
       template_app
        (template_hole 2,
         template_app
          (template_app (template_hole 1, template_var 2),
           template_app
            (template_app (template_hole 0, template_var 1),
             template_var 0))),
       template_app
        (template_hole 2,
         template_app
          (template_app (template_hole 1, template_var 2),
           template_var 1)))),
    ("More_List.list_all2_swap",
     "list_all2 ?P ?xs ?ys = list_all2 (%x y. ?P y x) ?ys ?xs",
     template_equation
      (template_app
        (template_app
          (template_app (template_hole 1, template_var 2), template_var 1),
         template_var 0),
       template_app
        (template_app
          (template_app (template_hole 0, t_empty), template_var 0),
         template_var 1))),
    ("More_List.nths_out_of_bounds",
     "ALL i:?I. length ?xs <= i ==> nths ?xs ?I = []",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 5, template_var 1), t_empty)
            )],
       template_equation
        (template_app
          (template_app (template_hole 1, template_var 0), template_var 1),
         template_hole 0))),
    ("More_List.list_all2_op_map_iff",
     "list_all2 (%a b. b = ?f a) ?xs ?ys = (map ?f ?xs = ?ys)",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app (template_hole 3, t_empty), template_var 1),
              template_var 0)
            )],
       template_equation
        (template_app
          (template_app (template_hole 0, template_var 2), template_var 1),
         template_var 0))),
    ("More_List.list_all2_set1",
     "list_all2 ?P ?xs ?as ==> ALL x:set ?xs. EX xa:set ?as. ?P x xa",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app (template_hole 4, template_var 2),
                template_var 1),
              template_var 0)
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 3,
               template_app (template_hole 2, template_var 1)),
             t_empty)
           ))),
    ("More_List.list_all2_set2",
     "list_all2 ?P ?xs ?as ==> ALL x:set ?as. EX xa:set ?xs. ?P xa x",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app (template_hole 4, template_var 2),
                template_var 1),
              template_var 0)
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 3,
               template_app (template_hole 2, template_var 0)),
             t_empty)
           ))),
    ("More_List.nths_nth", "?i < length ?xs ==> nths ?xs {?i} = [?xs ! ?i]",
     template_implication
      ([template_inequation
         (less_than, template_var 1,
          template_app (template_hole 7, template_var 0))],
       template_equation
        (template_app
          (template_app (template_hole 5, template_var 0),
           template_app
            (template_app (template_hole 4, template_var 1),
             template_hole 3)),
         template_app
          (template_app
            (template_hole 2,
             template_app
              (template_app (template_hole 1, template_var 0),
               template_var 1)),
           template_hole 0)))),
    ("More_List.list_all2_last",
     "[| list_all2 ?R ?xs ?ys; ?xs ~= [] |] ==> ?R (last ?xs) (last ?ys)",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app (template_hole 5, template_var 2),
                template_var 1),
              template_var 0)
            ),
        template_negation
         (template_equation (template_var 1, template_hole 2))],
       template_predicate
        (
           template_app
            (template_app
              (template_var 2,
               template_app (template_hole 1, template_var 1)),
             template_app (template_hole 0, template_var 0))
           ))),
    ("More_List.hd_butlast_last_id",
     "1 < length ?xs ==> hd ?xs # tl (butlast ?xs) @ [last ?xs] = ?xs",
     template_implication
      ([template_inequation
         (less_than, template_hole 9,
          template_app (template_hole 8, template_var 0))],
       template_equation
        (template_app
          (template_app
            (template_hole 6,
             template_app (template_hole 5, template_var 0)),
           template_app
            (template_app
              (template_hole 4,
               template_app
                (template_hole 3,
                 template_app (template_hole 2, template_var 0))),
             template_app
              (template_app
                (template_hole 6,
                 template_app (template_hole 1, template_var 0)),
               template_hole 0))),
         template_var 0))),
    ("More_List.list_all2_elem_filter",
     "[| list_all2 ?P ?xs ?us; ?x : set ?xs |]
      ==> 1 <= length (filter (?P ?x) ?us)",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app (template_hole 6, template_var 3),
                template_var 2),
              template_var 1)
            ),
        template_predicate
         (
            template_app
             (template_app (template_hole 5, template_var 0),
              template_app (template_hole 4, template_var 2))
            )],
       template_inequation
        (less_equals, template_hole 2,
         template_app
          (template_hole 1,
           template_app
            (template_app
              (template_hole 0,
               template_app (template_var 3, template_var 0)),
             template_var 1))))),
    ("More_List.distinct_length_le",
     "[| finite ?s; set ?xs <= ?s; distinct ?xs |]
      ==> length ?xs <= card ?s",
     template_implication
      ([template_predicate (template_app (template_hole 6, template_var 1)),
        template_inequation
         (less_equals, template_app (template_hole 4, template_var 0),
          template_var 1),
        template_predicate
         (template_app (template_hole 3, template_var 0))],
       template_inequation
        (less_equals, template_app (template_hole 1, template_var 0),
         template_app (template_hole 0, template_var 1)))),
    ("More_List.list_all2_replicate_elem_filter",
     "[| list_all2 ?P (concat (replicate ?n ?xs)) ?ys; ?x : set ?xs |]
      ==> ?n <= length (filter (?P ?x) ?ys)",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app (template_hole 7, template_var 4),
                template_app
                 (template_hole 6,
                  template_app
                   (template_app (template_hole 5, template_var 3),
                    template_var 2))),
              template_var 1)
            ),
        template_predicate
         (
            template_app
             (template_app (template_hole 4, template_var 0),
              template_app (template_hole 3, template_var 2))
            )],
       template_inequation
        (less_equals, template_var 3,
         template_app
          (template_hole 1,
           template_app
            (template_app
              (template_hole 0,
               template_app (template_var 4, template_var 0)),
             template_var 1))))),
    ("More_List.nths_split",
     "ALL i:?A. ALL j:?B. i < j ==>
      nths ?xs (?A Un ?B) = nths ?xs ?A @ nths ?xs ?B",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 5, template_var 2), t_empty)
            )],
       template_equation
        (template_app
          (template_app (template_hole 2, template_var 0),
           template_app
            (template_app (template_hole 1, template_var 2),
             template_var 1)),
         template_app
          (template_app
            (template_hole 0,
             template_app
              (template_app (template_hole 2, template_var 0),
               template_var 2)),
           template_app
            (template_app (template_hole 2, template_var 0),
             template_var 1))))),
    ("More_List.list_all_map",
     "[| !!x. ?P x ==> EX y. ?f y = x; list_all ?P ?as |]
      ==> EX as'. map ?f as' = ?as",
     template_implication
      ([template_predicate (template_app (template_hole 7, t_empty)),
        template_predicate
         (
            template_app
             (template_app (template_hole 3, template_var 2),
              template_var 0)
            )],
       template_predicate (template_app (template_hole 2, t_empty)))),
    ("More_List.filter_eq_appendD",
     "filter ?P ?as = ?xs @ ?ys ==>
      EX xs' ys'.
         filter ?P xs' = ?xs & filter ?P ys' = ?ys & ?as = xs' @ ys'",
     template_implication
      ([template_equation
         (template_app
           (template_app (template_hole 3, template_var 3), template_var 2),
          template_app
           (template_app (template_hole 2, template_var 1),
            template_var 0))],
       template_predicate (template_app (template_hole 1, t_empty)))),
    ("More_List.nths_shift",
     "ALL i:?S. length ?xs <= i ==>
      nths (?xs @ ?ys) ?S = nths ?ys {x - length ?xs |x. x : ?S}",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 11, template_var 2), t_empty)
            )],
       template_equation
        (template_app
          (template_app
            (template_hole 7,
             template_app
              (template_app (template_hole 6, template_var 1),
               template_var 0)),
           template_var 2),
         template_app
          (template_app (template_hole 7, template_var 0),
           template_app (template_hole 5, t_empty))))),
    ("More_List.nths_eq_appendD",
     "nths ?xs ?I = ?as @ ?bs ==>
      EX ys zs.
         ?xs = ys @ zs &
         nths ys ?I = ?as &
         nths zs {i - length ys |i. i : ?I & length ys <= i} = ?bs",
     template_implication
      ([template_equation
         (template_app
           (template_app (template_hole 10, template_var 3),
            template_var 2),
          template_app
           (template_app (template_hole 9, template_var 1),
            template_var 0))],
       template_predicate (template_app (template_hole 8, t_empty)))),
    ("More_List.nths_eq_ConsD",
     "nths ?xs ?I = ?x # ?as ==>
      EX ys zs.
         ?xs = ys @ ?x # zs &
         length ys : ?I &
         (ALL i:?I. length ys <= i) &
         nths zs {i - length ys - 1 |i. i : ?I & length ys < i} = ?as",
     template_implication
      ([template_equation
         (template_app
           (template_app (template_hole 14, template_var 3),
            template_var 2),
          template_app
           (template_app (template_hole 13, template_var 1),
            template_var 0))],
       template_predicate (template_app (template_hole 12, t_empty))))]:
   (string * thm * template) list
### theory "Draft.More_ListTemplates"
### 0.298s elapsed time, 0.464s cpu time, 0.071s GC time
val it = (): unit
