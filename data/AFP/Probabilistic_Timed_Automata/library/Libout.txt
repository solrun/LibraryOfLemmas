Loading theory "Draft.Finiteness" (required by "Draft.LibTemplates" via "Draft.Lib")
Loading theory "Draft.Basic" (required by "Draft.LibTemplates" via "Draft.Lib" via "Draft.Sequence_LTL" via "Draft.Sequence")
Loading theory "Draft.Instantiate_Existentials" (required by "Draft.LibTemplates" via "Draft.Lib")
Loading theory "HOL-Library.Function_Algebras" (required by "Draft.LibTemplates" via "Draft.ExtrEqs" via "HOL-Library.BigO")
instantiation
  fun :: (type, plus) plus
  plus_fun == plus :: ('a => 'b) => ('a => 'b) => 'a => 'b
val inst_existentials_tac = fn: Proof.context -> term list -> int -> tactic
instantiation
  fun :: (type, zero) zero
  zero_fun == zero_class.zero :: 'a => 'b
### theory "Draft.Instantiate_Existentials"
### 0.047s elapsed time, 0.221s cpu time, 0.000s GC time
Loading theory "Draft.More_List" (required by "Draft.LibTemplates" via "Draft.Lib" via "Draft.Graphs")
instantiation
  fun :: (type, times) times
  times_fun == times :: ('a => 'b) => ('a => 'b) => 'a => 'b
consts
  alternate :: "('a => 'a) => ('a => 'a) => nat => 'a => 'a"
instantiation
  fun :: (type, one) one
  one_fun == one_class.one :: 'a => 'b
### theory "Draft.Basic"
### 0.070s elapsed time, 0.311s cpu time, 0.000s GC time
Loading theory "Draft.Sequence" (required by "Draft.LibTemplates" via "Draft.Lib" via "Draft.Sequence_LTL")
### theory "HOL-Library.Function_Algebras"
### 0.136s elapsed time, 0.537s cpu time, 0.048s GC time
Loading theory "Draft.Templates" (required by "Draft.LibTemplates" via "Draft.ExtrEqs")
### theory "Draft.More_List"
### 0.133s elapsed time, 0.487s cpu time, 0.048s GC time
Loading theory "HOL-Library.BigO" (required by "Draft.LibTemplates" via "Draft.ExtrEqs")
datatype template_term
=
     t_empty
   | template_app of template_term * template_term
   | template_hole of int
   | template_var of int
datatype sign
= equals | greater_equals | greater_than | less_equals | less_than
datatype template
=
     template_bimplication of template * template
   | template_dunno
   | template_equation of template_term * template_term
   | template_implication of template list * template
   | template_inequation of sign * template_term * template_term
   | template_negation of template
   | template_predicate of template_term
constructor t_empty: template_term
constructor template_app: template_term * template_term -> template_term
constructor template_hole: int -> template_term
constructor template_var: int -> template_term
constructor equals: sign
constructor greater_equals: sign
constructor greater_than: sign
constructor less_equals: sign
constructor less_than: sign
constructor template_bimplication: template * template -> template
constructor template_dunno: template
constructor template_equation: template_term * template_term -> template
constructor template_implication: template list * template -> template
constructor template_inequation:
   sign * template_term * template_term -> template
constructor template_negation: template -> template
constructor template_predicate: template_term -> template
val vfs = fn: term -> (indexname * typ) list * (string * typ) list
val indexOf = fn: ''a list -> ''a -> int -> int
val has_eq = fn: term -> bool
val term2template = fn:
   (indexname * typ) list -> (string * typ) list -> term -> template_term
val lemma2predicate = fn: term -> term -> template
val makeTemplatewithContext = fn: term -> term -> template
val lemma2template = fn: term -> template
val thm2template = fn: thm -> template
val tterm2string = fn: template_term -> string
val template2string = fn: template -> string
val t = "height ?t <= size ?t": thm
val th =
   Const ("HOL.Trueprop", "bool => prop") $
     (Const ("Orderings.ord_class.less_eq", "nat => nat => bool") $
       (Const ("Tree.height_class.height", "?'a tree => nat") $
         Var (("t", 0), "?'a tree")) $
       (Const ("Nat.size_class.size", "?'a tree => nat") $
         Var (("t", 0), "?'a tree"))):
   term
### theory "Draft.Templates"
### 0.057s elapsed time, 0.225s cpu time, 0.000s GC time
Loading theory "Draft.MDP_Aux" (required by "Draft.LibTemplates" via "Draft.Lib")
### theory "Draft.MDP_Aux"
### 0.056s elapsed time, 0.227s cpu time, 0.000s GC time
### theory "Draft.Finiteness"
### 0.343s elapsed time, 1.279s cpu time, 0.048s GC time
Found termination order: "(%p. length (fst (snd p))) <*mlex*> {}"
consts
  sscan :: "('a => 'b => 'b) => 'a stream => 'b => 'b stream"
Proofs for coinductive predicate(s) "sdistinct"
  Proving monotonicity ...
Proofs for coinductive predicate(s) "sascending"
  Proving monotonicity ...
Proofs for coinductive predicate(s) "sdescending"
  Proving monotonicity ...
### theory "Draft.Sequence"
### 0.587s elapsed time, 1.621s cpu time, 0.129s GC time
Loading theory "Draft.Sequence_LTL" (required by "Draft.LibTemplates" via "Draft.Lib")
### theory "HOL-Library.BigO"
### 0.668s elapsed time, 1.620s cpu time, 0.139s GC time
Loading theory "Draft.ExtrEqs" (required by "Draft.LibTemplates")
### theory "Draft.Sequence_LTL"
### 0.398s elapsed time, 0.860s cpu time, 0.150s GC time
Loading theory "Draft.Stream_More" (required by "Draft.LibTemplates" via "Draft.Lib" via "Draft.Graphs")
val eqpattern =
   Pattern
    (
       Const ("HOL.Trueprop", "bool => prop") $
         (Const ("HOL.eq", "?'a => ?'a => bool") $
           Var (("_dummy_", 1), "?'a") $ Var (("_dummy_", 2), "?'a"))
       ):
   term Find_Theorems.criterion
val badeqpattern = Pattern (Const ("Pure.eq", "?'a => ?'a => prop")):
   term Find_Theorems.criterion
val undefpattern =
   Pattern
    (
       Const ("HOL.Trueprop", "bool => prop") $
         (Const ("HOL.eq", "?'a => ?'a => bool") $
           Var (("_dummy_", 1), "?'a") $ Const ("HOL.undefined", "?'a"))
       ):
   term Find_Theorems.criterion
val thmpattern =
   Pattern
    (Const ("HOL.Trueprop", "bool => prop") $ Var (("_dummy_", 1), "bool")):
   term Find_Theorems.criterion
val badnames =
   ["*nitpick*", "*Nitpick*", "*full_exhaustive*", "*_def*", "Enum.finite*",
    "*Quickcheck*", "ATP*", "*Nunchaku*", "*Code*", "*BNF*", "*SMT*",
    "*.*.*"]:
   string list
val unwanted_names =
   [(false, Name "*nitpick*"), (false, Name "*Nitpick*"),
    (false, Name "*full_exhaustive*"), (false, Name "*_def*"),
    (false, Name "Enum.finite*"), (false, Name "*Quickcheck*"),
    (false, Name "ATP*"), (false, Name "*Nunchaku*"),
    (false, Name "*Code*"), (false, Name "*BNF*"), (false, Name "*SMT*"),
    (false, Name "*.*.*")]:
   (bool * term Find_Theorems.criterion) list
val has_vars = fn: term -> bool
val get_all_eqs = fn: string -> Proof.context -> (string * thm) list
val get_all_thms = fn: string -> Proof.context -> (string * thm) list
val get_noneq_thms = fn: string -> Proof.context -> (string * thm) list
val template_eqs = fn:
   string -> Proof.context -> (string * thm * template) list
val template_thms = fn:
   string -> Proof.context -> (string * thm * template) list
### theory "Draft.ExtrEqs"
### 0.514s elapsed time, 1.079s cpu time, 0.148s GC time
ev ?\<phi> ?xs ==> ?\<phi> (sdrop (wait ?\<phi> ?xs) ?xs)
### theory "Draft.Stream_More"
### 0.465s elapsed time, 0.800s cpu time, 0.057s GC time
Loading theory "Draft.Graphs" (required by "Draft.LibTemplates" via "Draft.Lib")
locale Graph_Defs
  fixes E :: "'a => 'a => bool"
Proofs for inductive predicate(s) "steps"
  Proving monotonicity ...
Proofs for coinductive predicate(s) "run"
  Proving monotonicity ...
locale Graph_Start_Defs
  fixes E :: "'a => 'a => bool"
    and s\<^sub>0 :: "'a"
locale Subgraph_Defs
  fixes E :: "'a => 'a => bool"
    and E' :: "'a => 'a => bool"
locale Subgraph_Start_Defs
  fixes E :: "'a => 'a => bool"
    and s\<^sub>0 :: "'a"
    and E' :: "'a => 'a => bool"
locale Subgraph
  fixes E :: "'a => 'a => bool"
    and E' :: "'a => 'a => bool"
  assumes "Subgraph E E'"
locale Subgraph_Start
  fixes E :: "'a => 'a => bool"
    and s\<^sub>0 :: "'a"
    and E' :: "'a => 'a => bool"
  assumes "Subgraph_Start E E'"
locale Subgraph_Node_Defs
  fixes E :: "'a => 'a => bool"
    and V :: "'a => bool"
locale Subgraph_Node_Defs_Notation
  fixes E :: "'a => 'a => bool"
    and V :: "'a => bool"
locale Graph_Start_Defs
  fixes E :: "'a => 'a => bool"
    and s\<^sub>0 :: "'a"
bundle graph_automation
bundle graph_automation_aggressive
bundle subgraph_automation
locale Graph_Invariant
  fixes E :: "'a => 'a => bool"
    and P :: "'a => bool"
  assumes "Graph_Invariant E P"
locale Graph_Invariants
  fixes E :: "'a => 'a => bool"
    and P :: "'a => bool"
    and Q :: "'a => bool"
  assumes "Graph_Invariants E P Q"
locale Graph_Invariant_Start
  fixes E :: "'a => 'a => bool"
    and s\<^sub>0 :: "'a"
    and P :: "'a => bool"
  assumes "Graph_Invariant_Start E s\<^sub>0 P"
locale Graph_Invariant_Strong
  fixes E :: "'a => 'a => bool"
    and P :: "'a => bool"
  assumes "Graph_Invariant_Strong E P"
locale Simulation_Defs
  fixes A :: "'a => 'a => bool"
    and B :: "'b => 'b => bool"
    and sim :: "'a => 'b => bool"  (infixr \<open>\<sim>\<close> 60)
locale Simulation
  fixes A :: "'a => 'a => bool"
    and B :: "'b => 'b => bool"
    and sim :: "'a => 'b => bool"  (infixr \<open>\<sim>\<close> 60)
  assumes "Simulation A B (\<sim>)"
locale Simulation_Invariant
  fixes A :: "'a => 'a => bool"
    and B :: "'b => 'b => bool"
    and sim :: "'a => 'b => bool"  (infixr \<open>\<sim>\<close> 60)
    and PA :: "'a => bool"
    and PB :: "'b => bool"
  assumes "Simulation_Invariant A B (\<sim>) PA PB"
locale Simulation_Invariants
  fixes A :: "'a => 'a => bool"
    and B :: "'b => 'b => bool"
    and sim :: "'a => 'b => bool"  (infixr \<open>\<sim>\<close> 60)
    and PA :: "'a => bool"
    and QA :: "'a => bool"
    and PB :: "'b => bool"
    and QB :: "'b => bool"
  assumes "Simulation_Invariants A B (\<sim>) PA QA PB QB"
locale Bisimulation
  fixes A :: "'a => 'a => bool"
    and B :: "'b => 'b => bool"
    and sim :: "'a => 'b => bool"  (infixr \<open>\<sim>\<close> 60)
  assumes "Bisimulation A B (\<sim>)"
locale Bisimulation_Invariant
  fixes A :: "'a => 'a => bool"
    and B :: "'b => 'b => bool"
    and sim :: "'a => 'b => bool"  (infixr \<open>\<sim>\<close> 60)
    and PA :: "'a => bool"
    and PB :: "'b => bool"
  assumes "Bisimulation_Invariant A B (\<sim>) PA PB"
locale Bisimulation_Invariants
  fixes A :: "'a => 'a => bool"
    and B :: "'b => 'b => bool"
    and sim :: "'a => 'b => bool"  (infixr \<open>\<sim>\<close> 60)
    and PA :: "'a => bool"
    and QA :: "'a => bool"
    and PB :: "'b => bool"
    and QB :: "'b => bool"
  assumes "Bisimulation_Invariants A B (\<sim>) PA QA PB QB"
### theory "Draft.Graphs"
### 4.752s elapsed time, 5.755s cpu time, 1.510s GC time
Loading theory "Draft.Lib" (required by "Draft.LibTemplates")
locale Graph_Defs
  fixes E :: "'a => 'a => bool"
locale MC_syntax
  fixes K :: "'s => 's pmf"
locale Markov_Decision_Process
  fixes K :: "'s => 's pmf set"
  assumes "Markov_Decision_Process K"
locale Markov_Decision_Process_Invariant
  fixes K :: "'s => 's pmf set"
    and S :: "'s set"
  assumes "Markov_Decision_Process_Invariant K S"
locale Finite_Markov_Decision_Process
  fixes K :: "'s => 's pmf set"
    and S :: "'s set"
  assumes "Finite_Markov_Decision_Process K S"
### theory "Draft.Lib"
### 2.500s elapsed time, 3.186s cpu time, 0.959s GC time
Loading theory "Draft.LibTemplates"
val templateLemmas =
   [("Lib.alw_True", "alw (%x. True) ?\<omega>",
     template_predicate
      (
         template_app
          (template_app (template_hole 1, t_empty), template_var 0)
         )),
    ("Lib.pred_stream_sconst", "pred_stream ((=) ?x) (sconst ?x)",
     template_predicate
      (
         template_app
          (template_app
            (template_hole 3,
             template_app (template_hole 2, template_var 0)),
           template_app
            (template_app (template_hole 1, template_hole 0),
             template_var 0))
         )),
    ("Lib.pred_stream_iff", "pred_stream ?P ?s = Ball (sset ?s) ?P",
     template_equation
      (template_app
        (template_app (template_hole 2, template_var 1), template_var 0),
       template_app
        (template_app
          (template_hole 1, template_app (template_hole 0, template_var 0)),
         template_var 1))),
    ("Lib.pred_stream_stl",
     "pred_stream ?\<phi> ?xs --> pred_stream ?\<phi> (stl ?xs)",
     template_predicate
      (
         template_app
          (template_app
            (template_hole 2,
             template_app
              (template_app (template_hole 1, template_var 1),
               template_var 0)),
           template_app
            (template_app (template_hole 1, template_var 1),
             template_app (template_hole 0, template_var 0)))
         )),
    ("Lib.measurable_pred_stream",
     "Measurable.pred (stream_space (count_space UNIV)) (pred_stream ?P)",
     template_predicate
      (
         template_app
          (template_app
            (template_hole 7,
             template_app (template_hole 6, template_var 0)),
           template_app
            (template_app
              (template_hole 5,
               template_app
                (template_hole 4,
                 template_app (template_hole 3, template_hole 2))),
             template_app (template_hole 1, template_hole 0)))
         )),
    ("Lib.frac_le_self", "(0::?'a) <= ?x ==> frac ?x <= ?x",
     template_implication
      ([template_inequation (less_equals, template_hole 1, template_var 0)],
       template_inequation
        (less_equals, template_app (template_hole 0, template_var 0),
         template_var 0))),
    ("Lib.stream_all2_refl",
     "stream_all2 ?P ?x ?x = pred_stream (%x. ?P x x) ?x",
     template_equation
      (template_app
        (template_app
          (template_app (template_hole 1, template_var 1), template_var 0),
         template_var 0),
       template_app
        (template_app (template_hole 0, t_empty), template_var 0))),
    ("Lib.sset_sdrop", "?x : sset (sdrop ?i ?xs) ==> ?x : sset ?xs",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 2, template_var 2),
              template_app
               (template_hole 1,
                template_app
                 (template_app (template_hole 0, template_var 1),
                  template_var 0)))
            )],
       template_predicate
        (
           template_app
            (template_app (template_hole 2, template_var 2),
             template_app (template_hole 1, template_var 0))
           ))),
    ("Lib.measure_pmf_eq_1_iff",
     "(emeasure (measure_pmf ?\<mu>) {?x} = 1) = (?\<mu> = return_pmf ?x)",
     template_bimplication
      (template_equation
        (template_app
          (template_app
            (template_hole 6,
             template_app (template_hole 5, template_var 1)),
           template_app
            (template_app (template_hole 4, template_var 0),
             template_hole 3)),
         template_hole 2),
       template_equation
        (template_var 1, template_app (template_hole 0, template_var 0)))),
    ("Lib.HLD_mono",
     "[| HLD ?R ?\<omega>; ?R <= ?S |] ==> HLD ?S ?\<omega>",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 1, template_var 2),
              template_var 1)
            ),
        template_inequation (less_equals, template_var 2, template_var 0)],
       template_predicate
        (
           template_app
            (template_app (template_hole 1, template_var 0), template_var 1)
           ))),
    ("Lib.alw_Stream", "alw ?P (?x ## ?s) = (?P (?x ## ?s) & alw ?P ?s)",
     template_equation
      (template_app
        (template_app (template_hole 2, template_var 2),
         template_app
          (template_app (template_hole 1, template_var 1), template_var 0)),
       template_app
        (template_app
          (template_hole 0,
           template_app
            (template_var 2,
             template_app
              (template_app (template_hole 1, template_var 1),
               template_var 0))),
         template_app
          (template_app (template_hole 2, template_var 2),
           template_var 0)))),
    ("Lib.alw_HLD_smap",
     "alw (HLD ?S) ?\<omega> ==> alw (HLD (?f ` ?S)) (smap ?f ?\<omega>)",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_hole 5,
                template_app (template_hole 4, template_var 2)),
              template_var 1)
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 3,
               template_app
                (template_hole 2,
                 template_app
                  (template_app (template_hole 1, template_var 0),
                   template_var 2))),
             template_app
              (template_app (template_hole 0, template_var 0),
               template_var 1))
           ))),
    ("Lib.prop_nth_stl",
     "ALL i. ?P (?xs !! i) ==> ALL i. ?P (stl ?xs !! i)",
     template_implication
      ([template_predicate (template_app (template_hole 2, t_empty))],
       template_predicate (template_app (template_hole 2, t_empty)))),
    ("Lib.ev_sdropD",
     "[| ev ?P ?xs; !!i. ?P (sdrop i ?xs) ==> ?thesis |] ==> ?thesis",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 2, template_var 2),
              template_var 1)
            ),
        template_predicate (template_app (template_hole 1, t_empty))],
       template_predicate (template_var 0))),
    ("Lib.alw_conjI",
     "[| alw ?P ?xs; alw ?Q ?xs |] ==> alw (%xs. ?P xs & ?Q xs) ?xs",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 1, template_var 2),
              template_var 1)
            ),
        template_predicate
         (
            template_app
             (template_app (template_hole 1, template_var 0),
              template_var 1)
            )],
       template_predicate
        (
           template_app
            (template_app (template_hole 1, t_empty), template_var 1)
           ))),
    ("Lib.measurable_eq_stream_space",
     "?f : ?M \<rightarrow>\<^sub>M stream_space (count_space UNIV) ==>
      Measurable.pred ?M (%x. ?f x = ?c)",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 9, template_var 2),
              template_app
               (template_app (template_hole 8, template_var 1),
                template_app
                 (template_hole 7,
                  template_app (template_hole 6, template_hole 5))))
            )],
       template_predicate
        (
           template_app
            (template_app (template_hole 4, t_empty),
             template_app
              (template_app (template_hole 2, template_var 1),
               template_app (template_hole 1, template_hole 0)))
           ))),
    ("Lib.measurable_alw_stream",
     "Measurable.pred (stream_space (count_space UNIV)) ?P ==>
      Measurable.pred (stream_space (count_space UNIV)) (alw ?P)",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 7, template_var 0),
              template_app
               (template_app
                 (template_hole 6,
                  template_app
                   (template_hole 5,
                    template_app (template_hole 4, template_hole 3))),
                template_app (template_hole 2, template_hole 1)))
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 7,
               template_app (template_hole 0, template_var 0)),
             template_app
              (template_app
                (template_hole 6,
                 template_app
                  (template_hole 5,
                   template_app (template_hole 4, template_hole 3))),
               template_app (template_hole 2, template_hole 1)))
           ))),
    ("Lib.frac_le_1I",
     "[| (0::?'a) <= ?x; ?x <= (1::?'a); ?x <= ?y |] ==> frac ?x <= ?y",
     template_implication
      ([template_inequation (less_equals, template_hole 2, template_var 1),
        template_inequation (less_equals, template_var 1, template_hole 1),
        template_inequation (less_equals, template_var 1, template_var 0)],
       template_inequation
        (less_equals, template_app (template_hole 0, template_var 1),
         template_var 0))),
    ("Lib.AE_conj",
     "almost_everywhere ?M ?Q ==>
      almost_everywhere ?M ?P = (AE x in ?M. ?P x & ?Q x)",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 3, template_var 2),
              template_app (template_hole 2, template_var 1))
            )],
       template_equation
        (template_app
          (template_app (template_hole 3, template_var 0),
           template_app (template_hole 2, template_var 1)),
         template_app
          (template_app (template_hole 3, t_empty),
           template_app (template_hole 2, template_var 1))))),
    ("Lib.prop_nth_sdrop",
     "ALL i>=?j. ?P (?\<omega> !! i) ==>
      ALL i. ?P (sdrop ?j ?\<omega> !! i)",
     template_implication
      ([template_predicate (template_app (template_hole 4, t_empty))],
       template_predicate (template_app (template_hole 4, t_empty)))),
    ("Lib.frac_le_1I'",
     "[| (0::?'a) <= ?x; ?x <= ?y; ?y < (1::?'a) |] ==> frac ?x <= frac ?y",
     template_implication
      ([template_inequation (less_equals, template_hole 3, template_var 1),
        template_inequation (less_equals, template_var 1, template_var 0),
        template_inequation (less_than, template_var 0, template_hole 1)],
       template_inequation
        (less_equals, template_app (template_hole 0, template_var 1),
         template_app (template_hole 0, template_var 0)))),
    ("Lib.alw_disjoint_ccontr",
     "[| alw (HLD ?S) ?\<omega>; ev (alw (HLD ?R)) ?\<omega>;
         ?R Int ?S = {} |]
      ==> False",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_hole 6,
                template_app (template_hole 5, template_var 2)),
              template_var 1)
            ),
        template_predicate
         (
            template_app
             (template_app
               (template_hole 4,
                template_app
                 (template_hole 6,
                  template_app (template_hole 5, template_var 0))),
              template_var 1)
            ),
        template_equation
         (template_app
           (template_app (template_hole 2, template_var 0), template_var 2),
          template_hole 1)],
       template_predicate (template_hole 0))),
    ("Lib.collect_pair_finite'",
     "finite {(x, y). ?P x y} ==> finite {(x, y). ?P x y & ?R x y}",
     template_implication
      ([template_predicate
         (
            template_app
             (template_hole 3,
              template_app
               (template_hole 2, template_app (template_hole 1, t_empty)))
            )],
       template_predicate
        (
           template_app
            (template_hole 3,
             template_app
              (template_hole 2, template_app (template_hole 1, t_empty)))
           ))),
    ("Lib.prop_nth_sdrop_pair",
     "ALL i. ?P (?\<omega> !! i) (?\<omega>' !! i) ==>
      ALL i. ?P (sdrop ?j ?\<omega> !! i) (sdrop ?j ?\<omega>' !! i)",
     template_implication
      ([template_predicate (template_app (template_hole 4, t_empty))],
       template_predicate (template_app (template_hole 4, t_empty)))),
    ("Lib.ev_neq_start_implies_ev_neq",
     "ev (Not o HLD {?y}) (?y ## ?xs) ==>
      ev (%xs. shd xs ~= shd (stl xs)) (?y ## ?xs)",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_hole 9,
                template_app
                 (template_app (template_hole 8, template_hole 7),
                  template_app
                   (template_hole 6,
                    template_app
                     (template_app (template_hole 5, template_var 1),
                      template_hole 4)))),
              template_app
               (template_app (template_hole 3, template_var 1),
                template_var 0))
            )],
       template_predicate
        (
           template_app
            (template_app (template_hole 9, t_empty),
             template_app
              (template_app (template_hole 3, template_var 1),
               template_var 0))
           ))),
    ("Lib.holds_untilD",
     "[| (holds ?P until holds ?Q) ?xs; ALL i<=?j. ~ ?Q (?xs !! i) |]
      ==> ?P (?xs !! ?j)",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_hole 6,
                  template_app (template_hole 5, template_var 3)),
                template_app (template_hole 5, template_var 2)),
              template_var 1)
            ),
        template_predicate (template_app (template_hole 4, t_empty))],
       template_predicate
        (
           template_app
            (template_var 3,
             template_app
              (template_app (template_hole 0, template_var 1),
               template_var 0))
           ))),
    ("Lib.finite_imageI'",
     "finite {(x, y). ?P x y} ==> finite {?f x y |x y. ?P x y}",
     template_implication
      ([template_predicate
         (
            template_app
             (template_hole 8,
              template_app
               (template_hole 7, template_app (template_hole 6, t_empty)))
            )],
       template_predicate
        (
           template_app
            (template_hole 5, template_app (template_hole 4, t_empty))
           ))),
    ("Lib.collect_pair_finite''",
     "finite {(x, y). ?P x & ?Q y} ==>
      finite {(x, y). ?P x & ?Q y & ?R x y}",
     template_implication
      ([template_predicate
         (
            template_app
             (template_hole 3,
              template_app
               (template_hole 2, template_app (template_hole 1, t_empty)))
            )],
       template_predicate
        (
           template_app
            (template_hole 3,
             template_app
              (template_hole 2, template_app (template_hole 1, t_empty)))
           ))),
    ("Lib.alw_ev_cong",
     "[| alw ?P ?xs; !!x. ?P x ==> ?S x = ?R x |]
      ==> alw (ev ?S) ?xs = alw (ev ?R) ?xs",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 3, template_var 3),
              template_var 2)
            ),
        template_predicate (template_app (template_hole 2, t_empty))],
       template_equation
        (template_app
          (template_app
            (template_hole 3,
             template_app (template_hole 0, template_var 1)),
           template_var 2),
         template_app
          (template_app
            (template_hole 3,
             template_app (template_hole 0, template_var 0)),
           template_var 2)))),
    ("Lib.list_hd_lastD",
     "[| 1 < length ?xs; !!x y ys. ?xs = x # ys @ [y] ==> ?thesis |]
      ==> ?thesis",
     template_implication
      ([template_inequation
         (less_than, template_hole 7,
          template_app (template_hole 6, template_var 1)),
        template_predicate (template_app (template_hole 5, t_empty))],
       template_predicate (template_var 0))),
    ("Lib.nat_eventually_critical",
     "[| ?P ?i; ~ ?P ?j; ?i < ?j |] ==> EX k>=?i. ?P k & ~ ?P (Suc k)",
     template_implication
      ([template_predicate (template_app (template_var 2, template_var 1)),
        template_negation
         (
            template_predicate
             (template_app (template_var 2, template_var 0))
            ),
        template_inequation (less_than, template_var 1, template_var 0)],
       template_predicate (template_app (template_hole 3, t_empty)))),
    ("Lib.collect_pair_finite",
     "[| finite {x. ?P x}; finite {x. ?Q x} |]
      ==> finite {(x, y). ?P x & ?Q y & ?R x y}",
     template_implication
      ([template_predicate
         (
            template_app
             (template_hole 7, template_app (template_hole 6, t_empty))
            ),
        template_predicate
         (
            template_app
             (template_hole 5, template_app (template_hole 4, t_empty))
            )],
       template_predicate
        (
           template_app
            (template_hole 3,
             template_app
              (template_hole 2, template_app (template_hole 1, t_empty)))
           ))),
    ("Lib.pmf_map_pmf_cong",
     "(!!x. x : set_pmf ?\<mu> ==> (?f x = ?y1.0) = (?g x = ?y2.0)) ==>
      pmf (map_pmf ?f ?\<mu>) ?y1.0 = pmf (map_pmf ?g ?\<mu>) ?y2.0",
     template_implication
      ([template_predicate (template_app (template_hole 11, t_empty))],
       template_equation
        (template_app
          (template_app
            (template_hole 3,
             template_app
              (template_app (template_hole 2, template_var 3),
               template_var 4)),
           template_var 2),
         template_app
          (template_app
            (template_hole 1,
             template_app
              (template_app (template_hole 0, template_var 1),
               template_var 4)),
           template_var 0)))),
    ("Lib.finite_imageI''",
     "finite (?A \<times> ?B) ==>
      finite {?f x y |x y. x : ?A & y : ?B & ?R x y}",
     template_implication
      ([template_predicate
         (
            template_app
             (template_hole 9,
              template_app
               (template_app (template_hole 8, template_var 3), t_empty))
            )],
       template_predicate
        (
           template_app
            (template_hole 7, template_app (template_hole 6, t_empty))
           ))),
    ("Lib.AE_all_imp_countable",
     "countable {x. ?Q x} ==>
      (AE x in ?M. ALL y. ?Q y --> ?P x y) =
      (ALL y. ?Q y --> (AE x in ?M. ?P x y))",
     template_implication
      ([template_predicate
         (
            template_app
             (template_hole 6, template_app (template_hole 5, t_empty))
            )],
       template_equation
        (template_app
          (template_app (template_hole 3, t_empty),
           template_app (template_hole 0, template_var 0)),
         template_app (template_hole 2, t_empty)))),
    ("Lib.alw_ev_HLD_cong",
     "[| alw (HLD ?P) ?xs; !!x. x : ?P ==> (x : ?S) = (x : ?R) |]
      ==> infs ?S ?xs = infs ?R ?xs",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_hole 5,
                template_app (template_hole 4, template_var 3)),
              template_var 2)
            ),
        template_predicate (template_app (template_hole 3, t_empty))],
       template_equation
        (template_app
          (template_app
            (template_hole 5,
             template_app
              (template_hole 0,
               template_app (template_hole 4, template_var 1))),
           template_var 2),
         template_app
          (template_app
            (template_hole 5,
             template_app
              (template_hole 0,
               template_app (template_hole 4, template_var 0))),
           template_var 2)))),
    ("Lib.nat_eventually_critical_path",
     "[| ?P ?i; ~ ?P ?j; ?i < ?j |]
      ==> EX k>?i. k <= ?j & ~ ?P k & (ALL m>=?i. m < k --> ?P m)",
     template_implication
      ([template_predicate (template_app (template_var 2, template_var 1)),
        template_negation
         (
            template_predicate
             (template_app (template_var 2, template_var 0))
            ),
        template_inequation (less_than, template_var 1, template_var 0)],
       template_predicate (template_app (template_hole 4, t_empty)))),
    ("Lib.SUP_eq_and_INF_eq",
     "[| !!i. i : ?A ==> EX j:?B. ?f i = ?g j;
         !!j. j : ?B ==> EX i:?A. ?g j = ?f i |]
      ==> \<Squnion> (?f ` ?A) = \<Squnion> (?g ` ?B) &
          \<Sqinter> (?f ` ?A) = \<Sqinter> (?g ` ?B)",
     template_implication
      ([template_predicate (template_app (template_hole 12, t_empty)),
        template_predicate (template_app (template_hole 7, t_empty))],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 4,
               template_app
                (template_app
                  (template_hole 8,
                   template_app
                    (template_hole 3,
                     template_app
                      (template_app (template_hole 2, template_var 1),
                       template_var 3))),
                 template_app
                  (template_hole 3,
                   template_app
                    (template_app (template_hole 1, template_var 0),
                     template_var 2)))),
             template_app
              (template_app
                (template_hole 8,
                 template_app
                  (template_hole 0,
                   template_app
                    (template_app (template_hole 2, template_var 1),
                     template_var 3))),
               template_app
                (template_hole 0,
                 template_app
                  (template_app (template_hole 1, template_var 0),
                   template_var 2))))
           )))]:
   (string * thm * template) list
### theory "Draft.LibTemplates"
### 1.437s elapsed time, 1.813s cpu time, 0.224s GC time
val it = (): unit
