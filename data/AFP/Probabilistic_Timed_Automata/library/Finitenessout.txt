Loading theory "Draft.Finiteness" (required by "Draft.FinitenessTemplates")
Loading theory "HOL-Library.Function_Algebras" (required by "Draft.FinitenessTemplates" via "Draft.ExtrEqs" via "HOL-Library.BigO")
Loading theory "Draft.Templates" (required by "Draft.FinitenessTemplates" via "Draft.ExtrEqs")
instantiation
  fun :: (type, plus) plus
  plus_fun == plus :: ('a => 'b) => ('a => 'b) => 'a => 'b
instantiation
  fun :: (type, zero) zero
  zero_fun == zero_class.zero :: 'a => 'b
instantiation
  fun :: (type, times) times
  times_fun == times :: ('a => 'b) => ('a => 'b) => 'a => 'b
instantiation
  fun :: (type, one) one
  one_fun == one_class.one :: 'a => 'b
datatype template_term
=
     t_empty
   | template_app of template_term * template_term
   | template_hole of int
   | template_var of int
datatype sign
= equals | greater_equals | greater_than | less_equals | less_than
datatype template
=
     template_bimplication of template * template
   | template_dunno
   | template_equation of template_term * template_term
   | template_implication of template list * template
   | template_inequation of sign * template_term * template_term
   | template_negation of template
   | template_predicate of template_term
constructor t_empty: template_term
constructor template_app: template_term * template_term -> template_term
constructor template_hole: int -> template_term
constructor template_var: int -> template_term
constructor equals: sign
constructor greater_equals: sign
constructor greater_than: sign
constructor less_equals: sign
constructor less_than: sign
constructor template_bimplication: template * template -> template
constructor template_dunno: template
constructor template_equation: template_term * template_term -> template
constructor template_implication: template list * template -> template
constructor template_inequation:
   sign * template_term * template_term -> template
constructor template_negation: template -> template
constructor template_predicate: template_term -> template
val vfs = fn: term -> (indexname * typ) list * (string * typ) list
val indexOf = fn: ''a list -> ''a -> int -> int
val has_eq = fn: term -> bool
val term2template = fn:
   (indexname * typ) list -> (string * typ) list -> term -> template_term
val lemma2predicate = fn: term -> term -> template
val makeTemplatewithContext = fn: term -> term -> template
val lemma2template = fn: term -> template
val thm2template = fn: thm -> template
val tterm2string = fn: template_term -> string
val template2string = fn: template -> string
val t = "height ?t <= size ?t": thm
val th =
   Const ("HOL.Trueprop", "bool => prop") $
     (Const ("Orderings.ord_class.less_eq", "nat => nat => bool") $
       (Const ("Tree.height_class.height", "?'a tree => nat") $
         Var (("t", 0), "?'a tree")) $
       (Const ("Nat.size_class.size", "?'a tree => nat") $
         Var (("t", 0), "?'a tree"))):
   term
### theory "Draft.Templates"
### 0.082s elapsed time, 0.281s cpu time, 0.000s GC time
### theory "HOL-Library.Function_Algebras"
### 0.115s elapsed time, 0.347s cpu time, 0.000s GC time
Loading theory "HOL-Library.BigO" (required by "Draft.FinitenessTemplates" via "Draft.ExtrEqs")
### theory "Draft.Finiteness"
### 0.287s elapsed time, 0.689s cpu time, 0.041s GC time
### theory "HOL-Library.BigO"
### 0.623s elapsed time, 0.824s cpu time, 0.073s GC time
Loading theory "Draft.ExtrEqs" (required by "Draft.FinitenessTemplates")
val eqpattern =
   Pattern
    (
       Const ("HOL.Trueprop", "bool => prop") $
         (Const ("HOL.eq", "?'a => ?'a => bool") $
           Var (("_dummy_", 1), "?'a") $ Var (("_dummy_", 2), "?'a"))
       ):
   term Find_Theorems.criterion
val badeqpattern = Pattern (Const ("Pure.eq", "?'a => ?'a => prop")):
   term Find_Theorems.criterion
val undefpattern =
   Pattern
    (
       Const ("HOL.Trueprop", "bool => prop") $
         (Const ("HOL.eq", "?'a => ?'a => bool") $
           Var (("_dummy_", 1), "?'a") $ Const ("HOL.undefined", "?'a"))
       ):
   term Find_Theorems.criterion
val thmpattern =
   Pattern
    (Const ("HOL.Trueprop", "bool => prop") $ Var (("_dummy_", 1), "bool")):
   term Find_Theorems.criterion
val badnames =
   ["*nitpick*", "*Nitpick*", "*full_exhaustive*", "*_def*", "Enum.finite*",
    "*Quickcheck*", "ATP*", "*Nunchaku*", "*Code*", "*BNF*", "*SMT*",
    "*.*.*"]:
   string list
val unwanted_names =
   [(false, Name "*nitpick*"), (false, Name "*Nitpick*"),
    (false, Name "*full_exhaustive*"), (false, Name "*_def*"),
    (false, Name "Enum.finite*"), (false, Name "*Quickcheck*"),
    (false, Name "ATP*"), (false, Name "*Nunchaku*"),
    (false, Name "*Code*"), (false, Name "*BNF*"), (false, Name "*SMT*"),
    (false, Name "*.*.*")]:
   (bool * term Find_Theorems.criterion) list
val has_vars = fn: term -> bool
val get_all_eqs = fn: string -> Proof.context -> (string * thm) list
val get_all_thms = fn: string -> Proof.context -> (string * thm) list
val get_noneq_thms = fn: string -> Proof.context -> (string * thm) list
val template_eqs = fn:
   string -> Proof.context -> (string * thm * template) list
val template_thms = fn:
   string -> Proof.context -> (string * thm * template) list
### theory "Draft.ExtrEqs"
### 0.464s elapsed time, 0.465s cpu time, 0.000s GC time
Loading theory "Draft.FinitenessTemplates"
val templateLemmas =
   [("Finiteness.select_finite", "finite ?S ==> finite (select ?f ?S)",
     template_implication
      ([template_predicate
         (template_app (template_hole 2, template_var 1))],
       template_predicate
        (
           template_app
            (template_hole 1,
             template_app
              (template_app (template_hole 0, template_var 0),
               template_var 1))
           ))),
    ("Finiteness.R", "[| finite ?A; ?A = ?B |] ==> finite ?B",
     template_implication
      ([template_predicate (template_app (template_hole 1, template_var 1)),
        template_equation (template_var 1, template_var 0)],
       template_predicate
        (template_app (template_hole 1, template_var 0)))),
    ("Finiteness.inj_finite_single", "inj ?f ==> finite {y. ?x = ?f y}",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 4, template_var 1),
              template_hole 3)
            )],
       template_predicate
        (
           template_app
            (template_hole 2, template_app (template_hole 1, t_empty))
           ))),
    ("Finiteness.inj_finite_single'", "inj ?f ==> finite {z. ?f z = ?x}",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 4, template_var 1),
              template_hole 3)
            )],
       template_predicate
        (
           template_app
            (template_hole 2, template_app (template_hole 1, t_empty))
           ))),
    ("Finiteness.finite_ex_and1",
     "finite {b. EX a. ?P a b} ==> finite {b. EX a. ?P a b & ?Q a b}",
     template_implication
      ([template_predicate
         (
            template_app
             (template_hole 3, template_app (template_hole 2, t_empty))
            )],
       template_predicate
        (
           template_app
            (template_hole 3, template_app (template_hole 2, t_empty))
           ))),
    ("Finiteness.finite_ex_and2",
     "finite {b. EX a. ?Q a b} ==> finite {b. EX a. ?P a b & ?Q a b}",
     template_implication
      ([template_predicate
         (
            template_app
             (template_hole 3, template_app (template_hole 2, t_empty))
            )],
       template_predicate
        (
           template_app
            (template_hole 3, template_app (template_hole 2, t_empty))
           ))),
    ("Finiteness.collect_pair_finite'",
     "finite {(x, y). ?P x y} ==> finite {(x, y). ?P x y & ?R x y}",
     template_implication
      ([template_predicate
         (
            template_app
             (template_hole 3,
              template_app
               (template_hole 2, template_app (template_hole 1, t_empty)))
            )],
       template_predicate
        (
           template_app
            (template_hole 3,
             template_app
              (template_hole 2, template_app (template_hole 1, t_empty)))
           ))),
    ("Finiteness.finite_imageI'",
     "finite {(x, y). ?P x y} ==> finite {?f x y |x y. ?P x y}",
     template_implication
      ([template_predicate
         (
            template_app
             (template_hole 8,
              template_app
               (template_hole 7, template_app (template_hole 6, t_empty)))
            )],
       template_predicate
        (
           template_app
            (template_hole 5, template_app (template_hole 4, t_empty))
           ))),
    ("Finiteness.collect_pair_finite''",
     "finite {(x, y). ?P x & ?Q y} ==>
      finite {(x, y). ?P x & ?Q y & ?R x y}",
     template_implication
      ([template_predicate
         (
            template_app
             (template_hole 3,
              template_app
               (template_hole 2, template_app (template_hole 1, t_empty)))
            )],
       template_predicate
        (
           template_app
            (template_hole 3,
             template_app
              (template_hole 2, template_app (template_hole 1, t_empty)))
           ))),
    ("Finiteness.collect_pair_finite",
     "[| finite {x. ?P x}; finite {x. ?Q x} |]
      ==> finite {(x, y). ?P x & ?Q y & ?R x y}",
     template_implication
      ([template_predicate
         (
            template_app
             (template_hole 7, template_app (template_hole 6, t_empty))
            ),
        template_predicate
         (
            template_app
             (template_hole 5, template_app (template_hole 4, t_empty))
            )],
       template_predicate
        (
           template_app
            (template_hole 3,
             template_app
              (template_hole 2, template_app (template_hole 1, t_empty)))
           ))),
    ("Finiteness.pairwise_finiteI",
     "[| finite {b. EX a. ?P a b}; finite {a. EX b. ?P a b} |]
      ==> finite {(a, b). ?P a b}",
     template_implication
      ([template_predicate
         (
            template_app
             (template_hole 8, template_app (template_hole 7, t_empty))
            ),
        template_predicate
         (
            template_app
             (template_hole 5, template_app (template_hole 4, t_empty))
            )],
       template_predicate
        (
           template_app
            (template_hole 2,
             template_app
              (template_hole 1, template_app (template_hole 0, t_empty)))
           ))),
    ("Finiteness.finite_imageI''",
     "finite (?A \<times> ?B) ==>
      finite {?f x y |x y. x : ?A & y : ?B & ?R x y}",
     template_implication
      ([template_predicate
         (
            template_app
             (template_hole 9,
              template_app
               (template_app (template_hole 8, template_var 3), t_empty))
            )],
       template_predicate
        (
           template_app
            (template_hole 7, template_app (template_hole 6, t_empty))
           ))),
    ("Finiteness.pairwise_finiteI3",
     "[| finite {b. EX a c. ?P a b c}; finite {a. EX b c. ?P a b c};
         finite {c. EX a b. ?P a b c} |]
      ==> finite {(a, b, c). ?P a b c}",
     template_implication
      ([template_predicate
         (
            template_app
             (template_hole 12, template_app (template_hole 11, t_empty))
            ),
        template_predicate
         (
            template_app
             (template_hole 8, template_app (template_hole 7, t_empty))
            ),
        template_predicate
         (
            template_app
             (template_hole 5, template_app (template_hole 4, t_empty))
            )],
       template_predicate
        (
           template_app
            (template_hole 3,
             template_app
              (template_hole 2, template_app (template_hole 1, t_empty)))
           ))),
    ("Finiteness.finite_set_of_finite_funs2",
     "[| finite ?A; finite ?B; finite ?C |]
      ==> finite
           {f. ALL x y.
                  (x : ?A & y : ?B --> f x y : ?C) &
                  (x ~: ?A --> f x y = ?d) & (y ~: ?B --> f x y = ?d)}",
     template_implication
      ([template_predicate
         (template_app (template_hole 13, template_var 3)),
        template_predicate
         (template_app (template_hole 12, template_var 2)),
        template_predicate
         (template_app (template_hole 11, template_var 1))],
       template_predicate
        (
           template_app
            (template_hole 10, template_app (template_hole 9, t_empty))
           ))),
    ("Finiteness.pairwise_finiteI4",
     "[| finite {b. EX a c d. ?P a b c d}; finite {a. EX b c d. ?P a b c d};
         finite {c. EX a b d. ?P a b c d};
         finite {d. EX a b c. ?P a b c d} |]
      ==> finite {(a, b, c, d). ?P a b c d}",
     template_implication
      ([template_predicate
         (
            template_app
             (template_hole 16, template_app (template_hole 15, t_empty))
            ),
        template_predicate
         (
            template_app
             (template_hole 11, template_app (template_hole 10, t_empty))
            ),
        template_predicate
         (
            template_app
             (template_hole 8, template_app (template_hole 7, t_empty))
            ),
        template_predicate
         (
            template_app
             (template_hole 6, template_app (template_hole 5, t_empty))
            )],
       template_predicate
        (
           template_app
            (template_hole 4,
             template_app
              (template_hole 3, template_app (template_hole 2, t_empty)))
           )))]:
   (string * thm * template) list
### theory "Draft.FinitenessTemplates"
### 0.301s elapsed time, 0.445s cpu time, 0.075s GC time
val it = (): unit
