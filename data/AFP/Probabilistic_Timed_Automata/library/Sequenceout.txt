Loading theory "Draft.Basic" (required by "Draft.SequenceTemplates" via "Draft.Sequence")
Loading theory "HOL-Library.Function_Algebras" (required by "Draft.SequenceTemplates" via "Draft.ExtrEqs" via "HOL-Library.BigO")
Loading theory "Draft.Templates" (required by "Draft.SequenceTemplates" via "Draft.ExtrEqs")
instantiation
  fun :: (type, plus) plus
  plus_fun == plus :: ('a => 'b) => ('a => 'b) => 'a => 'b
instantiation
  fun :: (type, zero) zero
  zero_fun == zero_class.zero :: 'a => 'b
instantiation
  fun :: (type, times) times
  times_fun == times :: ('a => 'b) => ('a => 'b) => 'a => 'b
instantiation
  fun :: (type, one) one
  one_fun == one_class.one :: 'a => 'b
consts
  alternate :: "('a => 'a) => ('a => 'a) => nat => 'a => 'a"
### theory "Draft.Basic"
### 0.076s elapsed time, 0.257s cpu time, 0.000s GC time
Loading theory "Draft.Sequence" (required by "Draft.SequenceTemplates")
datatype template_term
=
     t_empty
   | template_app of template_term * template_term
   | template_hole of int
   | template_var of int
datatype sign
= equals | greater_equals | greater_than | less_equals | less_than
datatype template
=
     template_bimplication of template * template
   | template_dunno
   | template_equation of template_term * template_term
   | template_implication of template list * template
   | template_inequation of sign * template_term * template_term
   | template_negation of template
   | template_predicate of template_term
constructor t_empty: template_term
constructor template_app: template_term * template_term -> template_term
constructor template_hole: int -> template_term
constructor template_var: int -> template_term
constructor equals: sign
constructor greater_equals: sign
constructor greater_than: sign
constructor less_equals: sign
constructor less_than: sign
constructor template_bimplication: template * template -> template
constructor template_dunno: template
constructor template_equation: template_term * template_term -> template
constructor template_implication: template list * template -> template
constructor template_inequation:
   sign * template_term * template_term -> template
constructor template_negation: template -> template
constructor template_predicate: template_term -> template
val vfs = fn: term -> (indexname * typ) list * (string * typ) list
val indexOf = fn: ''a list -> ''a -> int -> int
val has_eq = fn: term -> bool
val term2template = fn:
   (indexname * typ) list -> (string * typ) list -> term -> template_term
val lemma2predicate = fn: term -> term -> template
val makeTemplatewithContext = fn: term -> term -> template
val lemma2template = fn: term -> template
val thm2template = fn: thm -> template
val tterm2string = fn: template_term -> string
val template2string = fn: template -> string
val t = "height ?t <= size ?t": thm
val th =
   Const ("HOL.Trueprop", "bool => prop") $
     (Const ("Orderings.ord_class.less_eq", "nat => nat => bool") $
       (Const ("Tree.height_class.height", "?'a tree => nat") $
         Var (("t", 0), "?'a tree")) $
       (Const ("Nat.size_class.size", "?'a tree => nat") $
         Var (("t", 0), "?'a tree"))):
   term
### theory "Draft.Templates"
### 0.091s elapsed time, 0.299s cpu time, 0.000s GC time
### theory "HOL-Library.Function_Algebras"
### 0.105s elapsed time, 0.329s cpu time, 0.000s GC time
Loading theory "HOL-Library.BigO" (required by "Draft.SequenceTemplates" via "Draft.ExtrEqs")
Found termination order: "(%p. length (fst (snd p))) <*mlex*> {}"
consts
  sscan :: "('a => 'b => 'b) => 'a stream => 'b => 'b stream"
Proofs for coinductive predicate(s) "sdistinct"
  Proving monotonicity ...
Proofs for coinductive predicate(s) "sascending"
  Proving monotonicity ...
Proofs for coinductive predicate(s) "sdescending"
  Proving monotonicity ...
### theory "Draft.Sequence"
### 0.500s elapsed time, 1.045s cpu time, 0.121s GC time
### theory "HOL-Library.BigO"
### 0.614s elapsed time, 1.127s cpu time, 0.121s GC time
Loading theory "Draft.ExtrEqs" (required by "Draft.SequenceTemplates")
val eqpattern =
   Pattern
    (
       Const ("HOL.Trueprop", "bool => prop") $
         (Const ("HOL.eq", "?'a => ?'a => bool") $
           Var (("_dummy_", 1), "?'a") $ Var (("_dummy_", 2), "?'a"))
       ):
   term Find_Theorems.criterion
val badeqpattern = Pattern (Const ("Pure.eq", "?'a => ?'a => prop")):
   term Find_Theorems.criterion
val undefpattern =
   Pattern
    (
       Const ("HOL.Trueprop", "bool => prop") $
         (Const ("HOL.eq", "?'a => ?'a => bool") $
           Var (("_dummy_", 1), "?'a") $ Const ("HOL.undefined", "?'a"))
       ):
   term Find_Theorems.criterion
val thmpattern =
   Pattern
    (Const ("HOL.Trueprop", "bool => prop") $ Var (("_dummy_", 1), "bool")):
   term Find_Theorems.criterion
val badnames =
   ["*nitpick*", "*Nitpick*", "*full_exhaustive*", "*_def*", "Enum.finite*",
    "*Quickcheck*", "ATP*", "*Nunchaku*", "*Code*", "*BNF*", "*SMT*",
    "*.*.*"]:
   string list
val unwanted_names =
   [(false, Name "*nitpick*"), (false, Name "*Nitpick*"),
    (false, Name "*full_exhaustive*"), (false, Name "*_def*"),
    (false, Name "Enum.finite*"), (false, Name "*Quickcheck*"),
    (false, Name "ATP*"), (false, Name "*Nunchaku*"),
    (false, Name "*Code*"), (false, Name "*BNF*"), (false, Name "*SMT*"),
    (false, Name "*.*.*")]:
   (bool * term Find_Theorems.criterion) list
val has_vars = fn: term -> bool
val get_all_eqs = fn: string -> Proof.context -> (string * thm) list
val get_all_thms = fn: string -> Proof.context -> (string * thm) list
val get_noneq_thms = fn: string -> Proof.context -> (string * thm) list
val template_eqs = fn:
   string -> Proof.context -> (string * thm * template) list
val template_thms = fn:
   string -> Proof.context -> (string * thm * template) list
### theory "Draft.ExtrEqs"
### 0.491s elapsed time, 0.551s cpu time, 0.088s GC time
Loading theory "Draft.SequenceTemplates"
val templateLemmas =
   [("Lazy_Sequence.lazy_sequence_of_list_of_lazy_sequence",
     "lazy_sequence_of_list (list_of_lazy_sequence ?xq) = ?xq",
     template_equation
      (template_app
        (template_hole 1, template_app (template_hole 0, template_var 0)),
       template_var 0)),
    ("Lazy_Sequence.yield_Seq",
     "Lazy_Sequence.yield (Lazy_Sequence ?f) = ?f ()",
     template_equation
      (template_app
        (template_hole 2, template_app (template_hole 1, template_var 0)),
       template_app (template_var 0, template_hole 0))),
    ("Lazy_Sequence.case_lazy_sequence",
     "(case ?xq of lazy_sequence_of_list x => ?f x) =
      ?f (list_of_lazy_sequence ?xq)",
     template_equation
      (template_app
        (template_app (template_hole 1, template_var 1), template_var 0),
       template_app
        (template_var 1, template_app (template_hole 0, template_var 0)))),
    ("Lazy_Sequence.rec_lazy_sequence",
     "rec_lazy_sequence ?f ?xq = ?f (list_of_lazy_sequence ?xq)",
     template_equation
      (template_app
        (template_app (template_hole 1, template_var 1), template_var 0),
       template_app
        (template_var 1, template_app (template_hole 0, template_var 0)))),
    ("Lazy_Sequence.list_of_lazy_sequence_single",
     "list_of_lazy_sequence (Lazy_Sequence.single ?x) = [?x]",
     template_equation
      (template_app
        (template_hole 3, template_app (template_hole 2, template_var 0)),
       template_app
        (template_app (template_hole 1, template_var 0), template_hole 0))),
    ("Sequence.set_sset_stake", "set (stake ?n ?xs) <= sset ?xs",
     template_inequation
      (less_equals,
       template_app
        (template_hole 2,
         template_app
          (template_app (template_hole 1, template_var 1), template_var 0)),
       template_app (template_hole 0, template_var 0))),
    ("Sequence.sset_sdrop", "sset (sdrop ?n ?xs) <= sset ?xs",
     template_inequation
      (less_equals,
       template_app
        (template_hole 1,
         template_app
          (template_app (template_hole 0, template_var 1), template_var 0)),
       template_app (template_hole 1, template_var 0))),
    ("Sequence.sdescending_snth_antimono",
     "sdescending ?w ==> decseq ((!!) ?w)",
     template_implication
      ([template_predicate
         (template_app (template_hole 2, template_var 0))],
       template_predicate
        (
           template_app
            (template_hole 1,
             template_app (template_hole 0, template_var 0))
           ))),
    ("Sequence.scan_length", "length (scan ?f ?xs ?a) = length ?xs",
     template_equation
      (template_app
        (template_hole 2,
         template_app
          (template_app
            (template_app (template_hole 1, template_var 2),
             template_var 1),
           template_var 0)),
       template_app (template_hole 0, template_var 1))),
    ("Sequence.scan_const", "scan (%x _. x) ?xs ?a = ?xs",
     template_equation
      (template_app
        (template_app
          (template_app (template_hole 0, t_empty), template_var 1),
         template_var 0),
       template_var 1)),
    ("Sequence.sscan_const", "sscan (%x _. x) ?xs ?a = ?xs",
     template_equation
      (template_app
        (template_app
          (template_app (template_hole 0, t_empty), template_var 1),
         template_var 0),
       template_var 1)),
    ("Sequence.sdescending_sdrop",
     "sdescending ?w ==> sdescending (sdrop ?k ?w)",
     template_implication
      ([template_predicate
         (template_app (template_hole 1, template_var 1))],
       template_predicate
        (
           template_app
            (template_hole 1,
             template_app
              (template_app (template_hole 0, template_var 0),
               template_var 1))
           ))),
    ("Sequence.sdistinct_infinite_sset",
     "sdistinct ?w ==> infinite (sset ?w)",
     template_implication
      ([template_predicate
         (template_app (template_hole 3, template_var 0))],
       template_negation
        (
           template_predicate
            (
               template_app
                (template_hole 1,
                 template_app (template_hole 0, template_var 0))
               )
           ))),
    ("Lazy_Sequence.lazy_sequence_eq_iff",
     "(?xq = ?yq) =
      (list_of_lazy_sequence ?xq = list_of_lazy_sequence ?yq)",
     template_bimplication
      (template_equation (template_var 1, template_var 0),
       template_equation
        (template_app (template_hole 0, template_var 1),
         template_app (template_hole 0, template_var 0)))),
    ("Lazy_Sequence.list_of_lazy_sequence_flat",
     "list_of_lazy_sequence (Lazy_Sequence.flat ?xqq) =
      concat (map list_of_lazy_sequence (list_of_lazy_sequence ?xqq))",
     template_equation
      (template_app
        (template_hole 4, template_app (template_hole 3, template_var 0)),
       template_app
        (template_hole 2,
         template_app
          (template_app (template_hole 1, template_hole 4),
           template_app (template_hole 0, template_var 0))))),
    ("Lazy_Sequence.list_of_lazy_sequence_map",
     "list_of_lazy_sequence (Lazy_Sequence.map ?f ?xq) =
      map ?f (list_of_lazy_sequence ?xq)",
     template_equation
      (template_app
        (template_hole 3,
         template_app
          (template_app (template_hole 2, template_var 1), template_var 0)),
       template_app
        (template_app (template_hole 1, template_var 1),
         template_app (template_hole 0, template_var 0)))),
    ("Lazy_Sequence.single_code",
     "Lazy_Sequence.single ?x =
      Lazy_Sequence (%_. Some (?x, Lazy_Sequence.empty))",
     template_equation
      (template_app (template_hole 4, template_var 0),
       template_app (template_hole 3, t_empty))),
    ("Sequence.stream_pred_snth",
     "pred_stream ?P ?w = (ALL i. ?P (?w !! i))",
     template_equation
      (template_app
        (template_app (template_hole 2, template_var 1), template_var 0),
       template_app (template_hole 1, t_empty))),
    ("Sequence.scan_eq_nil", "(scan ?f ?xs ?a = []) = (?xs = [])",
     template_bimplication
      (template_equation
        (template_app
          (template_app
            (template_app (template_hole 3, template_var 2),
             template_var 1),
           template_var 0),
         template_hole 2),
       template_equation (template_var 1, template_hole 0))),
    ("Lazy_Sequence.list_of_lazy_sequence_append",
     "list_of_lazy_sequence (Lazy_Sequence.append ?xq ?yq) =
      list_of_lazy_sequence ?xq @ list_of_lazy_sequence ?yq",
     template_equation
      (template_app
        (template_hole 2,
         template_app
          (template_app (template_hole 1, template_var 1), template_var 0)),
       template_app
        (template_app
          (template_hole 0, template_app (template_hole 2, template_var 1)),
         template_app (template_hole 2, template_var 0)))),
    ("Lazy_Sequence.lazy_sequence_eqI",
     "list_of_lazy_sequence ?xq = list_of_lazy_sequence ?yq ==> ?xq = ?yq",
     template_implication
      ([template_equation
         (template_app (template_hole 1, template_var 1),
          template_app (template_hole 1, template_var 0))],
       template_equation (template_var 1, template_var 0))),
    ("Sequence.fold_const", "fold (%x _. x) ?xs ?a = last (?a # ?xs)",
     template_equation
      (template_app
        (template_app
          (template_app (template_hole 2, t_empty), template_var 1),
         template_var 0),
       template_app
        (template_hole 1,
         template_app
          (template_app (template_hole 0, template_var 0),
           template_var 1)))),
    ("Sequence.sset_subset_stream_pred",
     "(sset ?w <= ?A) = pred_stream (%a. a : ?A) ?w",
     template_equation
      (template_app
        (template_app
          (template_hole 3, template_app (template_hole 2, template_var 1)),
         template_var 0),
       template_app
        (template_app (template_hole 1, t_empty), template_var 1))),
    ("Sequence.scan_last", "last (?a # scan ?f ?xs ?a) = fold ?f ?xs ?a",
     template_equation
      (template_app
        (template_hole 3,
         template_app
          (template_app (template_hole 2, template_var 2),
           template_app
            (template_app
              (template_app (template_hole 1, template_var 1),
               template_var 0),
             template_var 2))),
       template_app
        (template_app
          (template_app (template_hole 0, template_var 1), template_var 0),
         template_var 2))),
    ("Sequence.stream_pred_shift",
     "pred_stream ?P (?u @- ?v) = (list_all ?P ?u & pred_stream ?P ?v)",
     template_equation
      (template_app
        (template_app (template_hole 3, template_var 2),
         template_app
          (template_app (template_hole 2, template_var 1), template_var 0)),
       template_app
        (template_app
          (template_hole 1,
           template_app
            (template_app (template_hole 0, template_var 2),
             template_var 1)),
         template_app
          (template_app (template_hole 3, template_var 2),
           template_var 0)))),
    ("Sequence.scan_take",
     "take ?k (scan ?f ?xs ?a) = scan ?f (take ?k ?xs) ?a",
     template_equation
      (template_app
        (template_app (template_hole 2, template_var 3),
         template_app
          (template_app
            (template_app (template_hole 1, template_var 2),
             template_var 1),
           template_var 0)),
       template_app
        (template_app
          (template_app (template_hole 1, template_var 2),
           template_app
            (template_app (template_hole 0, template_var 3),
             template_var 1)),
         template_var 0))),
    ("Sequence.scan_map", "scan ?f (map ?g ?xs) ?a = scan (?f o ?g) ?xs ?a",
     template_equation
      (template_app
        (template_app
          (template_app (template_hole 3, template_var 3),
           template_app
            (template_app (template_hole 2, template_var 2),
             template_var 1)),
         template_var 0),
       template_app
        (template_app
          (template_app
            (template_hole 1,
             template_app
              (template_app (template_hole 0, template_var 3),
               template_var 2)),
           template_var 1),
         template_var 0))),
    ("Sequence.sscan_stake",
     "stake ?k (sscan ?f ?xs ?a) = scan ?f (stake ?k ?xs) ?a",
     template_equation
      (template_app
        (template_app (template_hole 3, template_var 3),
         template_app
          (template_app
            (template_app (template_hole 2, template_var 2),
             template_var 1),
           template_var 0)),
       template_app
        (template_app
          (template_app (template_hole 1, template_var 2),
           template_app
            (template_app (template_hole 0, template_var 3),
             template_var 1)),
         template_var 0))),
    ("Sequence.sscan_smap",
     "sscan ?f (smap ?g ?xs) ?a = sscan (?f o ?g) ?xs ?a",
     template_equation
      (template_app
        (template_app
          (template_app (template_hole 3, template_var 3),
           template_app
            (template_app (template_hole 2, template_var 2),
             template_var 1)),
         template_var 0),
       template_app
        (template_app
          (template_app
            (template_hole 1,
             template_app
              (template_app (template_hole 0, template_var 3),
               template_var 2)),
           template_var 1),
         template_var 0))),
    ("Sequence.sscan_snth",
     "sscan ?f ?xs ?a !! ?i = fold ?f (stake (Suc ?i) ?xs) ?a",
     template_equation
      (template_app
        (template_app
          (template_hole 4,
           template_app
            (template_app
              (template_app (template_hole 3, template_var 3),
               template_var 2),
             template_var 1)),
         template_var 0),
       template_app
        (template_app
          (template_app (template_hole 2, template_var 3),
           template_app
            (template_app
              (template_hole 1,
               template_app (template_hole 0, template_var 0)),
             template_var 2)),
         template_var 1))),
    ("Sequence.eqI_snth", "(!!i. ?u !! i = ?v !! i) ==> ?u = ?v",
     template_implication
      ([template_predicate (template_app (template_hole 4, t_empty))],
       template_equation (template_var 1, template_var 0))),
    ("Sequence.sscan_scons_snth",
     "(?a ## sscan ?f ?xs ?a) !! ?i = fold ?f (stake ?i ?xs) ?a",
     template_equation
      (template_app
        (template_app
          (template_hole 4,
           template_app
            (template_app (template_hole 3, template_var 3),
             template_app
              (template_app
                (template_app (template_hole 2, template_var 2),
                 template_var 1),
               template_var 3))),
         template_var 0),
       template_app
        (template_app
          (template_app (template_hole 1, template_var 2),
           template_app
            (template_app (template_hole 0, template_var 0),
             template_var 1)),
         template_var 3))),
    ("Sequence.eq_scons", "(?w = ?a ## ?v) = (?a = shd ?w & ?v = stl ?w)",
     template_bimplication
      (template_equation
        (template_var 2,
         template_app
          (template_app (template_hole 4, template_var 1), template_var 0)),
       template_predicate
        (
           template_app
            (template_app
              (template_hole 3,
               template_app
                (template_app (template_hole 2, template_var 1),
                 template_app (template_hole 1, template_var 2))),
             template_app
              (template_app (template_hole 5, template_var 0),
               template_app (template_hole 0, template_var 2)))
           ))),
    ("Sequence.scons_eq", "(?a ## ?v = ?w) = (shd ?w = ?a & stl ?w = ?v)",
     template_bimplication
      (template_equation
        (template_app
          (template_app (template_hole 4, template_var 2), template_var 1),
         template_var 0),
       template_predicate
        (
           template_app
            (template_app
              (template_hole 3,
               template_app
                (template_app
                  (template_hole 2,
                   template_app (template_hole 1, template_var 0)),
                 template_var 2)),
             template_app
              (template_app
                (template_hole 5,
                 template_app (template_hole 0, template_var 0)),
               template_var 1))
           ))),
    ("Lazy_Sequence.case_yield_eq",
     "(case Lazy_Sequence.yield ?xq of None => ?g | Some x => ?h x) =
      (case list_of_lazy_sequence ?xq of [] => ?g
       | x # xa => (curry ?h x o lazy_sequence_of_list) xa)",
     template_equation
      (template_app
        (template_app
          (template_app (template_hole 6, template_var 2), template_var 1),
         template_app (template_hole 5, template_var 0)),
       template_app
        (template_app
          (template_app (template_hole 4, template_var 2), t_empty),
         template_app (template_hole 0, template_var 0)))),
    ("Lazy_Sequence.list_of_Lazy_Sequence",
     "list_of_lazy_sequence (Lazy_Sequence ?f) =
      (case ?f () of None => []
       | Some (x, xq) => x # list_of_lazy_sequence xq)",
     template_equation
      (template_app
        (template_hole 6, template_app (template_hole 5, template_var 0)),
       template_app
        (template_app
          (template_app (template_hole 4, template_hole 3), t_empty),
         template_app (template_var 0, template_hole 0)))),
    ("Sequence.take_Suc",
     "take (Suc ?n) ?xs =
      (if ?xs = [] then [] else hd ?xs # take ?n (tl ?xs))",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_hole 6,
                template_app (template_hole 5, template_var 1)),
              template_var 0)
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_app
                (template_hole 4,
                 template_app
                  (template_app (template_hole 7, template_var 0),
                   template_hole 3)),
               template_hole 3),
             template_app
              (template_app
                (template_hole 2,
                 template_app (template_hole 1, template_var 0)),
               template_app
                (template_app (template_hole 6, template_var 1),
                 template_app (template_hole 0, template_var 0))))
           ))),
    ("Sequence.sscan_scons",
     "sscan ?f (?x ## ?xs) ?a = ?f ?x ?a ## sscan ?f ?xs (?f ?x ?a)",
     template_equation
      (template_app
        (template_app
          (template_app (template_hole 2, template_var 3),
           template_app
            (template_app (template_hole 1, template_var 2),
             template_var 1)),
         template_var 0),
       template_app
        (template_app
          (template_hole 0,
           template_app
            (template_app (template_var 3, template_var 2),
             template_var 0)),
         template_app
          (template_app
            (template_app (template_hole 2, template_var 3),
             template_var 1),
           template_app
            (template_app (template_var 3, template_var 2),
             template_var 0))))),
    ("Sequence.stream_all2_sset1",
     "stream_all2 ?P ?xs ?ys ==> ALL x:sset ?xs. EX y:sset ?ys. ?P x y",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app (template_hole 4, template_var 2),
                template_var 1),
              template_var 0)
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 3,
               template_app (template_hole 2, template_var 1)),
             t_empty)
           ))),
    ("Sequence.stream_all2_sset2",
     "stream_all2 ?P ?xs ?ys ==> ALL y:sset ?ys. EX x:sset ?xs. ?P x y",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app (template_hole 4, template_var 2),
                template_var 1),
              template_var 0)
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 3,
               template_app (template_hole 2, template_var 0)),
             t_empty)
           ))),
    ("Sequence.set_stake_snth",
     "(?x : set (stake ?n ?xs)) = (EX i<?n. ?xs !! i = ?x)",
     template_equation
      (template_app
        (template_app (template_hole 7, template_var 2),
         template_app
          (template_hole 6,
           template_app
            (template_app (template_hole 5, template_var 1),
             template_var 0))),
       template_app (template_hole 4, t_empty))),
    ("Sequence.siterate_eq_scons",
     "(siterate ?f ?s = ?a ## ?w) = (?s = ?a & siterate ?f (?f ?s) = ?w)",
     template_bimplication
      (template_equation
        (template_app
          (template_app (template_hole 3, template_var 3), template_var 2),
         template_app
          (template_app (template_hole 2, template_var 1), template_var 0)),
       template_predicate
        (
           template_app
            (template_app
              (template_hole 1,
               template_app
                (template_app (template_hole 0, template_var 2),
                 template_var 1)),
             template_app
              (template_app
                (template_hole 4,
                 template_app
                  (template_app (template_hole 3, template_var 3),
                   template_app (template_var 3, template_var 2))),
               template_var 0))
           ))),
    ("Sequence.scons_eq_siterate",
     "(?a ## ?w = siterate ?f ?s) = (?a = ?s & ?w = siterate ?f (?f ?s))",
     template_bimplication
      (template_equation
        (template_app
          (template_app (template_hole 3, template_var 3), template_var 2),
         template_app
          (template_app (template_hole 2, template_var 1), template_var 0)),
       template_predicate
        (
           template_app
            (template_app
              (template_hole 1,
               template_app
                (template_app (template_hole 0, template_var 3),
                 template_var 0)),
             template_app
              (template_app (template_hole 4, template_var 2),
               template_app
                (template_app (template_hole 2, template_var 1),
                 template_app (template_var 1, template_var 0))))
           ))),
    ("Sequence.scan_drop",
     "drop ?k (scan ?f ?xs ?a) =
      scan ?f (drop ?k ?xs) (fold ?f (take ?k ?xs) ?a)",
     template_equation
      (template_app
        (template_app (template_hole 4, template_var 3),
         template_app
          (template_app
            (template_app (template_hole 3, template_var 2),
             template_var 1),
           template_var 0)),
       template_app
        (template_app
          (template_app (template_hole 3, template_var 2),
           template_app
            (template_app (template_hole 2, template_var 3),
             template_var 1)),
         template_app
          (template_app
            (template_app (template_hole 1, template_var 2),
             template_app
              (template_app (template_hole 0, template_var 3),
               template_var 1)),
           template_var 0)))),
    ("Sequence.sscan_sdrop",
     "sdrop ?k (sscan ?f ?xs ?a) =
      sscan ?f (sdrop ?k ?xs) (fold ?f (stake ?k ?xs) ?a)",
     template_equation
      (template_app
        (template_app (template_hole 4, template_var 3),
         template_app
          (template_app
            (template_app (template_hole 3, template_var 2),
             template_var 1),
           template_var 0)),
       template_app
        (template_app
          (template_app (template_hole 3, template_var 2),
           template_app
            (template_app (template_hole 2, template_var 3),
             template_var 1)),
         template_app
          (template_app
            (template_app (template_hole 1, template_var 2),
             template_app
              (template_app (template_hole 0, template_var 3),
               template_var 1)),
           template_var 0)))),
    ("Lazy_Sequence.map_code",
     "Lazy_Sequence.map ?f ?xq =
      Lazy_Sequence
       (%_. map_option (%(x, xq'). (?f x, Lazy_Sequence.map ?f xq'))
             (Lazy_Sequence.yield ?xq))",
     template_equation
      (template_app
        (template_app (template_hole 5, template_var 1), template_var 0),
       template_app (template_hole 4, t_empty))),
    ("Sequence.eq_shift",
     "(?w = ?u @- ?v) =
      (stake (length ?u) ?w = ?u & sdrop (length ?u) ?w = ?v)",
     template_bimplication
      (template_equation
        (template_var 2,
         template_app
          (template_app (template_hole 5, template_var 1), template_var 0)),
       template_predicate
        (
           template_app
            (template_app
              (template_hole 4,
               template_app
                (template_app
                  (template_hole 3,
                   template_app
                    (template_app
                      (template_hole 2,
                       template_app (template_hole 1, template_var 1)),
                     template_var 2)),
                 template_var 1)),
             template_app
              (template_app
                (template_hole 6,
                 template_app
                  (template_app
                    (template_hole 0,
                     template_app (template_hole 1, template_var 1)),
                   template_var 2)),
               template_var 0))
           ))),
    ("Sequence.shift_eq",
     "(?u @- ?v = ?w) =
      (?u = stake (length ?u) ?w & ?v = sdrop (length ?u) ?w)",
     template_bimplication
      (template_equation
        (template_app
          (template_app (template_hole 5, template_var 2), template_var 1),
         template_var 0),
       template_predicate
        (
           template_app
            (template_app
              (template_hole 4,
               template_app
                (template_app (template_hole 3, template_var 2),
                 template_app
                  (template_app
                    (template_hole 2,
                     template_app (template_hole 1, template_var 2)),
                   template_var 0))),
             template_app
              (template_app (template_hole 6, template_var 1),
               template_app
                (template_app
                  (template_hole 0,
                   template_app (template_hole 1, template_var 2)),
                 template_var 0)))
           ))),
    ("Sequence.scan_append",
     "scan ?f (?xs @ ?ys) ?a =
      scan ?f ?xs ?a @ scan ?f ?ys (fold ?f ?xs ?a)",
     template_equation
      (template_app
        (template_app
          (template_app (template_hole 3, template_var 3),
           template_app
            (template_app (template_hole 2, template_var 2),
             template_var 1)),
         template_var 0),
       template_app
        (template_app
          (template_hole 1,
           template_app
            (template_app
              (template_app (template_hole 3, template_var 3),
               template_var 2),
             template_var 0)),
         template_app
          (template_app
            (template_app (template_hole 3, template_var 3),
             template_var 1),
           template_app
            (template_app
              (template_app (template_hole 0, template_var 3),
               template_var 2),
             template_var 0))))),
    ("Lazy_Sequence.list_of_lazy_sequence_hb_flat",
     "list_of_lazy_sequence (hb_flat ?xqq) =
      concat
       (map ((%x. case x of None => [None] | Some xs => xs) o
             map_option list_of_lazy_sequence)
         (list_of_lazy_sequence ?xqq))",
     template_equation
      (template_app
        (template_hole 10, template_app (template_hole 9, template_var 0)),
       template_app
        (template_hole 8,
         template_app
          (template_app
            (template_hole 7,
             template_app
              (template_app (template_hole 6, t_empty),
               template_app (template_hole 1, template_hole 10))),
           template_app (template_hole 0, template_var 0))))),
    ("Sequence.sscan_shift",
     "sscan ?f (?xs @- ?ys) ?a =
      scan ?f ?xs ?a @- sscan ?f ?ys (fold ?f ?xs ?a)",
     template_equation
      (template_app
        (template_app
          (template_app (template_hole 4, template_var 3),
           template_app
            (template_app (template_hole 3, template_var 2),
             template_var 1)),
         template_var 0),
       template_app
        (template_app
          (template_hole 2,
           template_app
            (template_app
              (template_app (template_hole 1, template_var 3),
               template_var 2),
             template_var 0)),
         template_app
          (template_app
            (template_app (template_hole 4, template_var 3),
             template_var 1),
           template_app
            (template_app
              (template_app (template_hole 0, template_var 3),
               template_var 2),
             template_var 0))))),
    ("Lazy_Sequence.flat_code",
     "Lazy_Sequence.flat ?xqq =
      Lazy_Sequence
       (%_. case Lazy_Sequence.yield ?xqq of None => None
            | Some (xq, xqq') =>
                Lazy_Sequence.yield
                 (Lazy_Sequence.append xq (Lazy_Sequence.flat xqq')))",
     template_equation
      (template_app (template_hole 7, template_var 0),
       template_app (template_hole 6, t_empty))),
    ("Lazy_Sequence.hb_map_code",
     "hb_map ?f ?xq =
      Lazy_Sequence
       (%_. map_option (%(x, xq'). (map_option ?f x, hb_map ?f xq'))
             (Lazy_Sequence.yield ?xq))",
     template_equation
      (template_app
        (template_app (template_hole 6, template_var 1), template_var 0),
       template_app (template_hole 5, t_empty))),
    ("Sequence.scons_eq_smap",
     "(?y ## ?ys = smap ?f ?xs) =
      (?y = ?f (shd ?xs) & ?ys = smap ?f (stl ?xs))",
     template_bimplication
      (template_equation
        (template_app
          (template_app (template_hole 5, template_var 3), template_var 2),
         template_app
          (template_app (template_hole 4, template_var 1), template_var 0)),
       template_predicate
        (
           template_app
            (template_app
              (template_hole 3,
               template_app
                (template_app (template_hole 2, template_var 3),
                 template_app
                  (template_var 1,
                   template_app (template_hole 1, template_var 0)))),
             template_app
              (template_app (template_hole 6, template_var 2),
               template_app
                (template_app (template_hole 4, template_var 1),
                 template_app (template_hole 0, template_var 0))))
           ))),
    ("Sequence.smap_eq_scons",
     "(smap ?f ?xs = ?y ## ?ys) =
      (?f (shd ?xs) = ?y & smap ?f (stl ?xs) = ?ys)",
     template_bimplication
      (template_equation
        (template_app
          (template_app (template_hole 5, template_var 3), template_var 2),
         template_app
          (template_app (template_hole 4, template_var 1), template_var 0)),
       template_predicate
        (
           template_app
            (template_app
              (template_hole 3,
               template_app
                (template_app
                  (template_hole 2,
                   template_app
                    (template_var 3,
                     template_app (template_hole 1, template_var 2))),
                 template_var 1)),
             template_app
              (template_app
                (template_hole 6,
                 template_app
                  (template_app (template_hole 5, template_var 3),
                   template_app (template_hole 0, template_var 2))),
               template_var 0))
           ))),
    ("Sequence.sdescending_stuck",
     "[| sdescending ?w; !!k. sdrop k ?w = sconst (?w !! k) ==> ?thesis |]
      ==> ?thesis",
     template_implication
      ([template_predicate (template_app (template_hole 6, template_var 1)),
        template_predicate (template_app (template_hole 5, t_empty))],
       template_predicate (template_var 0))),
    ("Sequence.sdistinct_scons_elim",
     "[| sdistinct (?x ## ?xs);
         [| ?x ~: sset ?xs; sdistinct ?xs |] ==> ?thesis |]
      ==> ?thesis",
     template_implication
      ([template_predicate
         (
            template_app
             (template_hole 4,
              template_app
               (template_app (template_hole 3, template_var 2),
                template_var 1))
            ),
        template_implication
         ([template_negation
            (
               template_predicate
                (
                   template_app
                    (template_app (template_hole 1, template_var 2),
                     template_app (template_hole 0, template_var 1))
                   )
               )],
          template_implication
           ([template_predicate
              (template_app (template_hole 4, template_var 1))],
            template_predicate (template_var 0)))],
       template_predicate (template_var 0))),
    ("Sequence.sdistinct_shift",
     "[| distinct ?xs; sdistinct ?ys; set ?xs Int sset ?ys = {} |]
      ==> sdistinct (?xs @- ?ys)",
     template_implication
      ([template_predicate (template_app (template_hole 7, template_var 1)),
        template_predicate (template_app (template_hole 6, template_var 0)),
        template_equation
         (template_app
           (template_app
             (template_hole 4,
              template_app (template_hole 3, template_var 1)),
            template_app (template_hole 2, template_var 0)),
          template_hole 1)],
       template_predicate
        (
           template_app
            (template_hole 6,
             template_app
              (template_app (template_hole 0, template_var 1),
               template_var 0))
           ))),
    ("Lazy_Sequence.append_code",
     "Lazy_Sequence.append ?xq ?yq =
      Lazy_Sequence
       (%_. case Lazy_Sequence.yield ?xq of None => Lazy_Sequence.yield ?yq
            | Some (x, xq') => Some (x, Lazy_Sequence.append xq' ?yq))",
     template_equation
      (template_app
        (template_app (template_hole 6, template_var 1), template_var 0),
       template_app (template_hole 5, t_empty))),
    ("Lazy_Sequence.hb_flat_code",
     "hb_flat ?xqq =
      Lazy_Sequence
       (%_. case Lazy_Sequence.yield ?xqq of None => None
            | Some (xq, xqq') =>
                Lazy_Sequence.yield
                 (Lazy_Sequence.append
                   (case xq of None => hit_bound | Some xq => xq)
                   (hb_flat xqq')))",
     template_equation
      (template_app (template_hole 9, template_var 0),
       template_app (template_hole 8, t_empty))),
    ("Sequence.scan_nth",
     "?i < length (scan ?f ?xs ?a) ==>
      scan ?f ?xs ?a ! ?i = fold ?f (take (Suc ?i) ?xs) ?a",
     template_implication
      ([template_inequation
         (less_than, template_var 3,
          template_app
           (template_hole 6,
            template_app
             (template_app
               (template_app (template_hole 5, template_var 2),
                template_var 1),
              template_var 0)))],
       template_equation
        (template_app
          (template_app
            (template_hole 3,
             template_app
              (template_app
                (template_app (template_hole 5, template_var 2),
                 template_var 1),
               template_var 0)),
           template_var 3),
         template_app
          (template_app
            (template_app (template_hole 2, template_var 2),
             template_app
              (template_app
                (template_hole 1,
                 template_app (template_hole 0, template_var 3)),
               template_var 1)),
           template_var 0)))),
    ("Sequence.stream_pred_coinduct",
     "[| ?R ?w; !!a w. ?R (a ## w) ==> ?P a & ?R w |]
      ==> pred_stream ?P ?w",
     template_implication
      ([template_predicate (template_app (template_var 2, template_var 1)),
        template_predicate (template_app (template_hole 4, t_empty))],
       template_predicate
        (
           template_app
            (template_app (template_hole 0, template_var 0), template_var 1)
           ))),
    ("Sequence.stream_rel_shift",
     "length ?u\<^sub>1 = length ?v\<^sub>1 ==>
      stream_all2 ?P (?u\<^sub>1 @- ?u\<^sub>2) (?v\<^sub>1 @- ?v\<^sub>2) =
      (list_all2 ?P ?u\<^sub>1 ?v\<^sub>1 &
       stream_all2 ?P ?u\<^sub>2 ?v\<^sub>2)",
     template_implication
      ([template_equation
         (template_app (template_hole 7, template_var 4),
          template_app (template_hole 6, template_var 3))],
       template_equation
        (template_app
          (template_app
            (template_app (template_hole 4, template_var 2),
             template_app
              (template_app (template_hole 3, template_var 4),
               template_var 1)),
           template_app
            (template_app (template_hole 2, template_var 3),
             template_var 0)),
         template_app
          (template_app
            (template_hole 1,
             template_app
              (template_app
                (template_app (template_hole 0, template_var 2),
                 template_var 4),
               template_var 3)),
           template_app
            (template_app
              (template_app (template_hole 4, template_var 2),
               template_var 1),
             template_var 0))))),
    ("Sequence.scons_eq_sscan",
     "(?b ## ?w = sscan ?f ?xs ?a) =
      (?b = ?f (shd ?xs) ?a & ?w = sscan ?f (stl ?xs) (?f (shd ?xs) ?a))",
     template_bimplication
      (template_equation
        (template_app
          (template_app (template_hole 5, template_var 4), template_var 3),
         template_app
          (template_app
            (template_app (template_hole 4, template_var 2),
             template_var 1),
           template_var 0)),
       template_predicate
        (
           template_app
            (template_app
              (template_hole 3,
               template_app
                (template_app (template_hole 2, template_var 4),
                 template_app
                  (template_app
                    (template_var 2,
                     template_app (template_hole 1, template_var 1)),
                   template_var 0))),
             template_app
              (template_app (template_hole 6, template_var 3),
               template_app
                (template_app
                  (template_app (template_hole 4, template_var 2),
                   template_app (template_hole 0, template_var 1)),
                 template_app
                  (template_app
                    (template_var 2,
                     template_app (template_hole 1, template_var 1)),
                   template_var 0))))
           ))),
    ("Sequence.sscan_eq_scons",
     "(sscan ?f ?xs ?a = ?b ## ?w) =
      (?f (shd ?xs) ?a = ?b & sscan ?f (stl ?xs) (?f (shd ?xs) ?a) = ?w)",
     template_bimplication
      (template_equation
        (template_app
          (template_app
            (template_app (template_hole 5, template_var 4),
             template_var 3),
           template_var 2),
         template_app
          (template_app (template_hole 4, template_var 1), template_var 0)),
       template_predicate
        (
           template_app
            (template_app
              (template_hole 3,
               template_app
                (template_app
                  (template_hole 2,
                   template_app
                    (template_app
                      (template_var 4,
                       template_app (template_hole 1, template_var 3)),
                     template_var 2)),
                 template_var 1)),
             template_app
              (template_app
                (template_hole 6,
                 template_app
                  (template_app
                    (template_app (template_hole 5, template_var 4),
                     template_app (template_hole 0, template_var 3)),
                   template_app
                    (template_app
                      (template_var 4,
                       template_app (template_hole 1, template_var 3)),
                     template_var 2))),
               template_var 0))
           ))),
    ("Sequence.sdistinct_coinduct",
     "[| ?P ?xs; !!x xs. ?P (x ## xs) ==> x ~: sset xs & ?P xs |]
      ==> sdistinct ?xs",
     template_implication
      ([template_predicate (template_app (template_var 1, template_var 0)),
        template_predicate (template_app (template_hole 7, t_empty))],
       template_predicate
        (template_app (template_hole 0, template_var 0)))),
    ("Sequence.sdistinct_shift_elim",
     "[| sdistinct (?xs @- ?ys);
         [| distinct ?xs; sdistinct ?ys; set ?xs Int sset ?ys = {} |]
         ==> ?thesis |]
      ==> ?thesis",
     template_implication
      ([template_predicate
         (
            template_app
             (template_hole 7,
              template_app
               (template_app (template_hole 6, template_var 2),
                template_var 1))
            ),
        template_implication
         ([template_predicate
            (template_app (template_hole 5, template_var 2))],
          template_implication
           ([template_predicate
              (template_app (template_hole 7, template_var 1))],
            template_implication
             ([template_equation
                (template_app
                  (template_app
                    (template_hole 3,
                     template_app (template_hole 2, template_var 2)),
                   template_app (template_hole 1, template_var 1)),
                 template_hole 0)],
              template_predicate (template_var 0))))],
       template_predicate (template_var 0))),
    ("Sequence.shift_eq_smap",
     "(?u @- ?v = smap ?f ?w) =
      (EX w\<^sub>1 w\<^sub>2.
          ?w = w\<^sub>1 @- w\<^sub>2 &
          ?u = map ?f w\<^sub>1 & ?v = smap ?f w\<^sub>2)",
     template_equation
      (template_app
        (template_app
          (template_hole 9,
           template_app
            (template_app (template_hole 8, template_var 3),
             template_var 2)),
         template_app
          (template_app (template_hole 7, template_var 1), template_var 0)),
       template_app (template_hole 6, t_empty))),
    ("Sequence.smap_eq_shift",
     "(smap ?f ?w = ?u @- ?v) =
      (EX w\<^sub>1 w\<^sub>2.
          ?w = w\<^sub>1 @- w\<^sub>2 &
          map ?f w\<^sub>1 = ?u & smap ?f w\<^sub>2 = ?v)",
     template_equation
      (template_app
        (template_app
          (template_hole 9,
           template_app
            (template_app (template_hole 8, template_var 3),
             template_var 2)),
         template_app
          (template_app (template_hole 7, template_var 1), template_var 0)),
       template_app (template_hole 6, t_empty))),
    ("Sequence.stream_pred_cases",
     "[| pred_stream ?P ?xs;
         !!y ys. [| ?xs = y ## ys; ?P y; pred_stream ?P ys |] ==> ?thesis |]
      ==> ?thesis",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 4, template_var 2),
              template_var 1)
            ),
        template_predicate (template_app (template_hole 3, t_empty))],
       template_predicate (template_var 0))),
    ("Sequence.sdescending_coinduct",
     "[| ?P ?w; !!a b w. ?P (a ## b ## w) ==> b <= a & ?P (b ## w) |]
      ==> sdescending ?w",
     template_implication
      ([template_predicate (template_app (template_var 1, template_var 0)),
        template_predicate (template_app (template_hole 5, t_empty))],
       template_predicate
        (template_app (template_hole 0, template_var 0)))),
    ("Sequence.not_sdistinct_decomp",
     "[| ~ sdistinct ?w;
         !!u v a w'. ?w = u @- a ## v @- a ## w' ==> ?thesis |]
      ==> ?thesis",
     template_implication
      ([template_negation
         (
            template_predicate
             (template_app (template_hole 6, template_var 1))
            ),
        template_predicate (template_app (template_hole 5, t_empty))],
       template_predicate (template_var 0))),
    ("Sequence.split_stream_first",
     "[| ?x : sset ?xs;
         !!ys zs. [| ?xs = ys @- ?x ## zs; ?x ~: set ys |] ==> ?thesis |]
      ==> ?thesis",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 8, template_var 2),
              template_app (template_hole 7, template_var 1))
            ),
        template_predicate (template_app (template_hole 6, t_empty))],
       template_predicate (template_var 0))),
    ("Sequence.shift_eq_scons",
     "(?u @- ?v = ?a ## ?w) =
      (?u = [] & ?v = ?a ## ?w | (EX u'. ?u = ?a # u' & u' @- ?v = ?w))",
     template_bimplication
      (template_equation
        (template_app
          (template_app (template_hole 7, template_var 3), template_var 2),
         template_app
          (template_app (template_hole 6, template_var 1), template_var 0)),
       template_predicate
        (
           template_app
            (template_app
              (template_hole 5,
               template_app
                (template_app
                  (template_hole 4,
                   template_app
                    (template_app (template_hole 3, template_var 3),
                     template_hole 2)),
                 template_app
                  (template_app (template_hole 8, template_var 2),
                   template_app
                    (template_app (template_hole 6, template_var 1),
                     template_var 0)))),
             template_app (template_hole 1, t_empty))
           ))),
    ("Sequence.scons_eq_shift",
     "(?a ## ?w = ?u @- ?v) =
      ([] = ?u & ?a ## ?w = ?v | (EX u'. ?a # u' = ?u & ?w = u' @- ?v))",
     template_bimplication
      (template_equation
        (template_app
          (template_app (template_hole 7, template_var 3), template_var 2),
         template_app
          (template_app (template_hole 6, template_var 1), template_var 0)),
       template_predicate
        (
           template_app
            (template_app
              (template_hole 5,
               template_app
                (template_app
                  (template_hole 4,
                   template_app
                    (template_app (template_hole 3, template_hole 2),
                     template_var 1)),
                 template_app
                  (template_app
                    (template_hole 8,
                     template_app
                      (template_app (template_hole 7, template_var 3),
                       template_var 2)),
                   template_var 0))),
             template_app (template_hole 1, t_empty))
           ))),
    ("Sequence.stream_pred_flat_coinduct",
     "[| ?R ?ws; !!w ws. ?R (w ## ws) ==> w ~= [] & list_all ?P w & ?R ws |]
      ==> pred_stream ?P (flat ?ws)",
     template_implication
      ([template_predicate (template_app (template_var 2, template_var 1)),
        template_predicate (template_app (template_hole 9, t_empty))],
       template_predicate
        (
           template_app
            (template_app (template_hole 1, template_var 0),
             template_app (template_hole 0, template_var 1))
           ))),
    ("Sequence.scan_eq_cons",
     "(scan ?f ?xs ?a = ?b # ?w) =
      (EX y ys. ?xs = y # ys & ?f y ?a = ?b & scan ?f ys (?f y ?a) = ?w)",
     template_equation
      (template_app
        (template_app
          (template_hole 8,
           template_app
            (template_app
              (template_app (template_hole 7, template_var 4),
               template_var 3),
             template_var 2)),
         template_app
          (template_app (template_hole 6, template_var 1), template_var 0)),
       template_app (template_hole 5, t_empty))),
    ("Sequence.stream_eq_coinduct",
     "[| ?R ?u ?v; !!a u b v. ?R (a ## u) (b ## v) ==> a = b & ?R u v |]
      ==> ?u = ?v",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_var 2, template_var 1), template_var 0)
            ),
        template_predicate (template_app (template_hole 5, t_empty))],
       template_equation (template_var 1, template_var 0))),
    ("Sequence.scan_eq_append",
     "(scan ?f ?xs ?a = ?u @ ?v) =
      (EX ys zs.
          ?xs = ys @ zs &
          scan ?f ys ?a = ?u & scan ?f zs (fold ?f ys ?a) = ?v)",
     template_equation
      (template_app
        (template_app
          (template_hole 7,
           template_app
            (template_app
              (template_app (template_hole 6, template_var 4),
               template_var 3),
             template_var 2)),
         template_app
          (template_app (template_hole 5, template_var 1), template_var 0)),
       template_app (template_hole 4, t_empty))),
    ("Sequence.stream_rel_coinduct",
     "[| ?R ?u ?v; !!a u b v. ?R (a ## u) (b ## v) ==> ?P a b & ?R u v |]
      ==> stream_all2 ?P ?u ?v",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_var 3, template_var 2), template_var 1)
            ),
        template_predicate (template_app (template_hole 7, t_empty))],
       template_predicate
        (
           template_app
            (template_app
              (template_app (template_hole 0, template_var 0),
               template_var 2),
             template_var 1)
           ))),
    ("Limited_Sequence.map_seq_code",
     "Limited_Sequence.map_seq ?f ?xq ?i ?pol =
      (case Lazy_Sequence.yield ?xq of None => Some Lazy_Sequence.empty
       | Some (x, xq') =>
           case Limited_Sequence.eval (?f x) ?i ?pol of None => None
           | Some yq =>
               case Limited_Sequence.map_seq ?f xq' ?i ?pol of None => None
               | Some zq => Some (Lazy_Sequence.append yq zq))",
     template_equation
      (template_app
        (template_app
          (template_app
            (template_app (template_hole 9, template_var 3),
             template_var 2),
           template_var 1),
         template_var 0),
       template_app
        (template_app
          (template_app
            (template_hole 8,
             template_app (template_hole 7, template_hole 6)),
           t_empty),
         template_app (template_hole 0, template_var 2)))),
    ("Sequence.stream_pred_coinduct_shift",
     "[| ?R ?w;
         !!w. ?R w ==>
              EX u v. w = u @- v & u ~= [] & list_all ?P u & ?R v |]
      ==> pred_stream ?P ?w",
     template_implication
      ([template_predicate (template_app (template_var 2, template_var 1)),
        template_predicate (template_app (template_hole 10, t_empty))],
       template_predicate
        (
           template_app
            (template_app (template_hole 0, template_var 0), template_var 1)
           ))),
    ("Sequence.list_pred_cases",
     "[| list_all ?P ?xs; ?xs = [] ==> ?thesis;
         !!y ys. [| ?xs = y # ys; ?P y; list_all ?P ys |] ==> ?thesis |]
      ==> ?thesis",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 5, template_var 2),
              template_var 1)
            ),
        template_implication
         ([template_equation (template_var 1, template_hole 3)],
          template_predicate (template_var 0)),
        template_predicate (template_app (template_hole 2, t_empty))],
       template_predicate (template_var 0))),
    ("Lazy_Sequence.equal_lazy_sequence_code",
     "equal_class.equal ?xq ?yq =
      (case (Lazy_Sequence.yield ?xq, Lazy_Sequence.yield ?yq) of
       (None, None) => True | (None, Some a) => False
       | (Some (x, xq'), None) => False
       | (Some (x, xq'), Some (y, yq')) =>
           equal_class.equal x y & equal_class.equal ?xq ?yq)",
     template_equation
      (template_app
        (template_app (template_hole 9, template_var 1), template_var 0),
       template_app
        (template_app (template_hole 8, t_empty),
         template_app
          (template_app
            (template_hole 1,
             template_app (template_hole 0, template_var 1)),
           template_app (template_hole 0, template_var 0))))),
    ("Sequence.stream_eq_coinduct_shift",
     "[| ?R ?u ?v;
         !!u v.
            ?R u v ==>
            EX u\<^sub>1 u\<^sub>2 v\<^sub>1 v\<^sub>2.
               u = u\<^sub>1 @- u\<^sub>2 &
               v = v\<^sub>1 @- v\<^sub>2 &
               u\<^sub>1 ~= [] &
               v\<^sub>1 ~= [] &
               u\<^sub>1 = v\<^sub>1 & ?R u\<^sub>2 v\<^sub>2 |]
      ==> ?u = ?v",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_var 2, template_var 1), template_var 0)
            ),
        template_predicate (template_app (template_hole 8, t_empty))],
       template_equation (template_var 1, template_var 0))),
    ("Sequence.stream_rel_coinduct_shift",
     "[| ?R ?u ?v;
         !!u v.
            ?R u v ==>
            EX u\<^sub>1 u\<^sub>2 v\<^sub>1 v\<^sub>2.
               u = u\<^sub>1 @- u\<^sub>2 &
               v = v\<^sub>1 @- v\<^sub>2 &
               u\<^sub>1 ~= [] &
               v\<^sub>1 ~= [] &
               list_all2 ?P u\<^sub>1 v\<^sub>1 & ?R u\<^sub>2 v\<^sub>2 |]
      ==> stream_all2 ?P ?u ?v",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_var 3, template_var 2), template_var 1)
            ),
        template_predicate (template_app (template_hole 17, t_empty))],
       template_predicate
        (
           template_app
            (template_app
              (template_app (template_hole 0, template_var 0),
               template_var 2),
             template_var 1)
           )))]:
   (string * thm * template) list
### theory "Draft.SequenceTemplates"
### 0.303s elapsed time, 0.410s cpu time, 0.043s GC time
val it = (): unit
