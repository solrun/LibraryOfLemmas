Loading theory "Draft.Basic" (required by "Draft.Sequence_LTLTemplates" via "Draft.Sequence_LTL" via "Draft.Sequence")
Loading theory "HOL-Library.Function_Algebras" (required by "Draft.Sequence_LTLTemplates" via "Draft.ExtrEqs" via "HOL-Library.BigO")
Loading theory "Draft.Templates" (required by "Draft.Sequence_LTLTemplates" via "Draft.ExtrEqs")
instantiation
  fun :: (type, plus) plus
  plus_fun == plus :: ('a => 'b) => ('a => 'b) => 'a => 'b
instantiation
  fun :: (type, zero) zero
  zero_fun == zero_class.zero :: 'a => 'b
instantiation
  fun :: (type, times) times
  times_fun == times :: ('a => 'b) => ('a => 'b) => 'a => 'b
consts
  alternate :: "('a => 'a) => ('a => 'a) => nat => 'a => 'a"
instantiation
  fun :: (type, one) one
  one_fun == one_class.one :: 'a => 'b
### theory "Draft.Basic"
### 0.069s elapsed time, 0.234s cpu time, 0.000s GC time
Loading theory "Draft.Sequence" (required by "Draft.Sequence_LTLTemplates" via "Draft.Sequence_LTL")
datatype template_term
=
     t_empty
   | template_app of template_term * template_term
   | template_hole of int
   | template_var of int
datatype sign
= equals | greater_equals | greater_than | less_equals | less_than
datatype template
=
     template_bimplication of template * template
   | template_dunno
   | template_equation of template_term * template_term
   | template_implication of template list * template
   | template_inequation of sign * template_term * template_term
   | template_negation of template
   | template_predicate of template_term
constructor t_empty: template_term
constructor template_app: template_term * template_term -> template_term
constructor template_hole: int -> template_term
constructor template_var: int -> template_term
constructor equals: sign
constructor greater_equals: sign
constructor greater_than: sign
constructor less_equals: sign
constructor less_than: sign
constructor template_bimplication: template * template -> template
constructor template_dunno: template
constructor template_equation: template_term * template_term -> template
constructor template_implication: template list * template -> template
constructor template_inequation:
   sign * template_term * template_term -> template
constructor template_negation: template -> template
constructor template_predicate: template_term -> template
val vfs = fn: term -> (indexname * typ) list * (string * typ) list
val indexOf = fn: ''a list -> ''a -> int -> int
val has_eq = fn: term -> bool
val term2template = fn:
   (indexname * typ) list -> (string * typ) list -> term -> template_term
val lemma2predicate = fn: term -> term -> template
val makeTemplatewithContext = fn: term -> term -> template
val lemma2template = fn: term -> template
val thm2template = fn: thm -> template
val tterm2string = fn: template_term -> string
val template2string = fn: template -> string
val t = "height ?t <= size ?t": thm
val th =
   Const ("HOL.Trueprop", "bool => prop") $
     (Const ("Orderings.ord_class.less_eq", "nat => nat => bool") $
       (Const ("Tree.height_class.height", "?'a tree => nat") $
         Var (("t", 0), "?'a tree")) $
       (Const ("Nat.size_class.size", "?'a tree => nat") $
         Var (("t", 0), "?'a tree"))):
   term
### theory "Draft.Templates"
### 0.086s elapsed time, 0.285s cpu time, 0.000s GC time
### theory "HOL-Library.Function_Algebras"
### 0.122s elapsed time, 0.358s cpu time, 0.000s GC time
Loading theory "HOL-Library.BigO" (required by "Draft.Sequence_LTLTemplates" via "Draft.ExtrEqs")
Found termination order: "(%p. length (fst (snd p))) <*mlex*> {}"
consts
  sscan :: "('a => 'b => 'b) => 'a stream => 'b => 'b stream"
Proofs for coinductive predicate(s) "sdistinct"
  Proving monotonicity ...
Proofs for coinductive predicate(s) "sascending"
  Proving monotonicity ...
Proofs for coinductive predicate(s) "sdescending"
  Proving monotonicity ...
### theory "Draft.Sequence"
### 0.548s elapsed time, 1.137s cpu time, 0.114s GC time
Loading theory "Draft.Sequence_LTL" (required by "Draft.Sequence_LTLTemplates")
### theory "HOL-Library.BigO"
### 0.683s elapsed time, 1.422s cpu time, 0.141s GC time
Loading theory "Draft.ExtrEqs" (required by "Draft.Sequence_LTLTemplates")
### theory "Draft.Sequence_LTL"
### 0.409s elapsed time, 0.858s cpu time, 0.081s GC time
val eqpattern =
   Pattern
    (
       Const ("HOL.Trueprop", "bool => prop") $
         (Const ("HOL.eq", "?'a => ?'a => bool") $
           Var (("_dummy_", 1), "?'a") $ Var (("_dummy_", 2), "?'a"))
       ):
   term Find_Theorems.criterion
val badeqpattern = Pattern (Const ("Pure.eq", "?'a => ?'a => prop")):
   term Find_Theorems.criterion
val undefpattern =
   Pattern
    (
       Const ("HOL.Trueprop", "bool => prop") $
         (Const ("HOL.eq", "?'a => ?'a => bool") $
           Var (("_dummy_", 1), "?'a") $ Const ("HOL.undefined", "?'a"))
       ):
   term Find_Theorems.criterion
val thmpattern =
   Pattern
    (Const ("HOL.Trueprop", "bool => prop") $ Var (("_dummy_", 1), "bool")):
   term Find_Theorems.criterion
val badnames =
   ["*nitpick*", "*Nitpick*", "*full_exhaustive*", "*_def*", "Enum.finite*",
    "*Quickcheck*", "ATP*", "*Nunchaku*", "*Code*", "*BNF*", "*SMT*",
    "*.*.*"]:
   string list
val unwanted_names =
   [(false, Name "*nitpick*"), (false, Name "*Nitpick*"),
    (false, Name "*full_exhaustive*"), (false, Name "*_def*"),
    (false, Name "Enum.finite*"), (false, Name "*Quickcheck*"),
    (false, Name "ATP*"), (false, Name "*Nunchaku*"),
    (false, Name "*Code*"), (false, Name "*BNF*"), (false, Name "*SMT*"),
    (false, Name "*.*.*")]:
   (bool * term Find_Theorems.criterion) list
val has_vars = fn: term -> bool
val get_all_eqs = fn: string -> Proof.context -> (string * thm) list
val get_all_thms = fn: string -> Proof.context -> (string * thm) list
val get_noneq_thms = fn: string -> Proof.context -> (string * thm) list
val template_eqs = fn:
   string -> Proof.context -> (string * thm * template) list
val template_thms = fn:
   string -> Proof.context -> (string * thm * template) list
### theory "Draft.ExtrEqs"
### 0.509s elapsed time, 0.755s cpu time, 0.074s GC time
Loading theory "Draft.Sequence_LTLTemplates"
val templateLemmas =
   [("Sequence_LTL.infs_UNIV", "infs UNIV ?w",
     template_predicate
      (
         template_app
          (template_app
            (template_hole 3,
             template_app
              (template_hole 2,
               template_app (template_hole 1, template_hole 0))),
           template_var 0)
         )),
    ("Sequence_LTL.infs_sset", "infs (sset ?w) ?w",
     template_predicate
      (
         template_app
          (template_app
            (template_hole 3,
             template_app
              (template_hole 2,
               template_app
                (template_hole 1,
                 template_app (template_hole 0, template_var 0)))),
           template_var 0)
         )),
    ("Sequence_LTL.HLD_sconst", "HLD ?A (sconst ?a) = (?a : ?A)",
     template_equation
      (template_app
        (template_app (template_hole 3, template_var 1),
         template_app
          (template_app (template_hole 2, template_hole 1),
           template_var 0)),
       template_app
        (template_app (template_hole 0, template_var 0), template_var 1))),
    ("Sequence_LTL.alw_ev_sdrop",
     "alw (ev ?P) (sdrop ?n ?w) = alw (ev ?P) ?w",
     template_equation
      (template_app
        (template_app
          (template_hole 2, template_app (template_hole 1, template_var 2)),
         template_app
          (template_app (template_hole 0, template_var 1), template_var 0)),
       template_app
        (template_app
          (template_hole 2, template_app (template_hole 1, template_var 2)),
         template_var 0))),
    ("Sequence_LTL.alw_ev_shift", "alw (ev ?P) (?u @- ?v) = alw (ev ?P) ?v",
     template_equation
      (template_app
        (template_app
          (template_hole 2, template_app (template_hole 1, template_var 2)),
         template_app
          (template_app (template_hole 0, template_var 1), template_var 0)),
       template_app
        (template_app
          (template_hole 2, template_app (template_hole 1, template_var 2)),
         template_var 0))),
    ("Sequence_LTL.alw_ev_scons", "alw (ev ?P) (?a ## ?w) = alw (ev ?P) ?w",
     template_equation
      (template_app
        (template_app
          (template_hole 2, template_app (template_hole 1, template_var 2)),
         template_app
          (template_app (template_hole 0, template_var 1), template_var 0)),
       template_app
        (template_app
          (template_hole 2, template_app (template_hole 1, template_var 2)),
         template_var 0))),
    ("Sequence_LTL.ev_alw_sdrop",
     "ev (alw ?P) (sdrop ?n ?w) = ev (alw ?P) ?w",
     template_equation
      (template_app
        (template_app
          (template_hole 2, template_app (template_hole 1, template_var 2)),
         template_app
          (template_app (template_hole 0, template_var 1), template_var 0)),
       template_app
        (template_app
          (template_hole 2, template_app (template_hole 1, template_var 2)),
         template_var 0))),
    ("Sequence_LTL.ev_alw_shift", "ev (alw ?P) (?u @- ?v) = ev (alw ?P) ?v",
     template_equation
      (template_app
        (template_app
          (template_hole 2, template_app (template_hole 1, template_var 2)),
         template_app
          (template_app (template_hole 0, template_var 1), template_var 0)),
       template_app
        (template_app
          (template_hole 2, template_app (template_hole 1, template_var 2)),
         template_var 0))),
    ("Sequence_LTL.ev_alw_scons", "ev (alw ?P) (?a ## ?w) = ev (alw ?P) ?w",
     template_equation
      (template_app
        (template_app
          (template_hole 2, template_app (template_hole 1, template_var 2)),
         template_app
          (template_app (template_hole 0, template_var 1), template_var 0)),
       template_app
        (template_app
          (template_hole 2, template_app (template_hole 1, template_var 2)),
         template_var 0))),
    ("Sequence_LTL.infsI_sset", "sset ?w <= ?A ==> infs ?A ?w",
     template_implication
      ([template_inequation
         (less_equals, template_app (template_hole 3, template_var 1),
          template_var 0)],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 2,
               template_app
                (template_hole 1,
                 template_app (template_hole 0, template_var 0))),
             template_var 1)
           ))),
    ("Sequence_LTL.ev_HLD_sset", "ev (HLD ?A) ?w = (sset ?w Int ?A ~= {})",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_hole 6,
                template_app (template_hole 5, template_var 1)),
              template_var 0)
            )],
       template_negation
        (
           template_equation
            (template_app
              (template_app
                (template_hole 2,
                 template_app (template_hole 1, template_var 0)),
               template_var 1),
             template_hole 0)
           ))),
    ("Sequence_LTL.infs_infm", "infs ?A ?w = (INFM i. ?w !! i : ?A)",
     template_equation
      (template_app
        (template_app
          (template_hole 6,
           template_app
            (template_hole 5,
             template_app (template_hole 4, template_var 1))),
         template_var 0),
       template_app
        (template_app (template_hole 3, t_empty), template_hole 0))),
    ("Sequence_LTL.infsD_sset", "infs ?A ?w ==> sset ?w Int ?A ~= {}",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_hole 7,
                template_app
                 (template_hole 6,
                  template_app (template_hole 5, template_var 1))),
              template_var 0)
            )],
       template_negation
        (
           template_equation
            (template_app
              (template_app
                (template_hole 2,
                 template_app (template_hole 1, template_var 0)),
               template_var 1),
             template_hole 0)
           ))),
    ("Sequence_LTL.infs_snth",
     "infs ?A ?w = (ALL n. EX k>=n. ?w !! k : ?A)",
     template_equation
      (template_app
        (template_app
          (template_hole 8,
           template_app
            (template_hole 7,
             template_app (template_hole 6, template_var 1))),
         template_var 0),
       template_app (template_hole 5, t_empty))),
    ("Sequence_LTL.infs_union",
     "infs (?A Un ?B) ?w = (infs ?A ?w | infs ?B ?w)",
     template_equation
      (template_app
        (template_app
          (template_hole 4,
           template_app
            (template_hole 3,
             template_app
              (template_hole 2,
               template_app
                (template_app (template_hole 1, template_var 2),
                 template_var 1)))),
         template_var 0),
       template_app
        (template_app
          (template_hole 0,
           template_app
            (template_app
              (template_hole 4,
               template_app
                (template_hole 3,
                 template_app (template_hole 2, template_var 2))),
             template_var 0)),
         template_app
          (template_app
            (template_hole 4,
             template_app
              (template_hole 3,
               template_app (template_hole 2, template_var 1))),
           template_var 0)))),
    ("Sequence_LTL.infs_cycle",
     "?w ~= [] ==> infs ?A (cycle ?w) = (set ?w Int ?A ~= {})",
     template_implication
      ([template_negation
         (template_equation (template_var 1, template_hole 9))],
       template_implication
        ([template_predicate
           (
              template_app
               (template_app
                 (template_hole 7,
                  template_app
                   (template_hole 6,
                    template_app (template_hole 5, template_var 0))),
                template_app (template_hole 4, template_var 1))
              )],
         template_negation
          (
             template_equation
              (template_app
                (template_app
                  (template_hole 2,
                   template_app (template_hole 1, template_var 1)),
                 template_var 0),
               template_hole 0)
             )))),
    ("Sequence_LTL.infs_supset",
     "[| infs ?A ?w; sset ?w Int ?A <= ?B |] ==> infs ?B ?w",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_hole 5,
                template_app
                 (template_hole 4,
                  template_app (template_hole 3, template_var 2))),
              template_var 1)
            ),
        template_inequation
         (less_equals,
          template_app
           (template_app
             (template_hole 1,
              template_app (template_hole 0, template_var 1)),
            template_var 2),
          template_var 0)],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 5,
               template_app
                (template_hole 4,
                 template_app (template_hole 3, template_var 0))),
             template_var 1)
           ))),
    ("Sequence_LTL.ev_stl",
     "ev ?\<phi> (stl ?w) = (EX u v. ?w = u @- v & u ~= [] & ?\<phi> v)",
     template_equation
      (template_app
        (template_app (template_hole 9, template_var 1),
         template_app (template_hole 8, template_var 0)),
       template_app (template_hole 7, t_empty))),
    ("Sequence_LTL.infs_suffix",
     "infs ?A ?w = (ALL u v. ?w = u @- v --> sset v Int ?A ~= {})",
     template_equation
      (template_app
        (template_app
          (template_hole 12,
           template_app
            (template_hole 11,
             template_app (template_hole 10, template_var 1))),
         template_var 0),
       template_app (template_hole 9, t_empty))),
    ("Sequence_LTL.alw_ev_coinduct",
     "[| ?R ?w; !!w. ?R w ==> ev ?\<phi> w & ev ?R (stl w) |]
      ==> alw (ev ?\<phi>) ?w",
     template_implication
      ([template_predicate (template_app (template_var 2, template_var 1)),
        template_predicate (template_app (template_hole 4, t_empty))],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 0,
               template_app (template_hole 2, template_var 0)),
             template_var 1)
           ))),
    ("Sequence_LTL.infs_flat_coinduct",
     "[| ?R ?xss;
         !!xs xss. ?R (xs ## xss) ==> set xs Int ?A ~= {} & ?R xss |]
      ==> infs ?A (flat ?xss)",
     template_implication
      ([template_predicate (template_app (template_var 2, template_var 1)),
        template_predicate (template_app (template_hole 12, t_empty))],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 3,
               template_app
                (template_hole 2,
                 template_app (template_hole 1, template_var 0))),
             template_app (template_hole 0, template_var 1))
           ))),
    ("Sequence_LTL.infs_coinduct",
     "[| ?R ?w;
         !!w. ?R w ==> EX u v. w = u @- v & set u Int ?A ~= {} & ?R v |]
      ==> infs ?A ?w",
     template_implication
      ([template_predicate (template_app (template_var 2, template_var 1)),
        template_predicate (template_app (template_hole 13, t_empty))],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 2,
               template_app
                (template_hole 1,
                 template_app (template_hole 0, template_var 0))),
             template_var 1)
           )))]:
   (string * thm * template) list
### theory "Draft.Sequence_LTLTemplates"
### 0.354s elapsed time, 0.438s cpu time, 0.000s GC time
val it = (): unit
