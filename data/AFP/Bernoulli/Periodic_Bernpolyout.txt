Loading theory "HOL-Library.Function_Algebras" (required by "Draft.Periodic_BernpolyMoreTemplates" via "Draft.ExtrEqs" via "HOL-Library.BigO")
Loading theory "HOL-Library.Nat_Bijection" (required by "Draft.Periodic_BernpolyMoreTemplates" via "Draft.ExtrEqs" via "HOL-Library.Stream")
Loading theory "HOL-Library.Set_Algebras" (required by "Draft.Periodic_BernpolyMoreTemplates" via "Draft.ExtrEqs" via "HOL-Library.BigO")
Loading theory "HOL-Library.Tree" (required by "Draft.Periodic_BernpolyMoreTemplates" via "Draft.ExtrEqs" via "Draft.Templates")
instantiation
  fun :: (type, plus) plus
  plus_fun == plus :: ('a => 'b) => ('a => 'b) => 'a => 'b
instantiation
  set :: (plus) plus
  plus_set == plus :: 'a set => 'a set => 'a set
instantiation
  set :: (times) times
  times_set == times :: 'a set => 'a set => 'a set
instantiation
  fun :: (type, zero) zero
  zero_fun == zero_class.zero :: 'a => 'b
instantiation
  set :: (zero) zero
  zero_set == zero_class.zero :: 'a set
instantiation
  fun :: (type, times) times
  times_fun == times :: ('a => 'b) => ('a => 'b) => 'a => 'b
instantiation
  set :: (one) one
  one_set == one_class.one :: 'a set
instantiation
  fun :: (type, one) one
  one_fun == one_class.one :: 'a => 'b
Found termination order: "(%p. size (snd p)) <*mlex*> {}"
### theory "HOL-Library.Function_Algebras"
### 0.163s elapsed time, 0.674s cpu time, 0.063s GC time
Loading theory "Draft.Bernoulli" (required by "Draft.Periodic_BernpolyMoreTemplates" via "Draft.Periodic_Bernpoly")
Found termination order: "size_list size <*mlex*> {}"
### theory "HOL-Library.Set_Algebras"
### 0.287s elapsed time, 1.168s cpu time, 0.063s GC time
Loading theory "HOL-Library.BigO" (required by "Draft.Periodic_BernpolyMoreTemplates" via "Draft.ExtrEqs")
Found termination order: "size <*mlex*> {}"
### theory "HOL-Library.Nat_Bijection"
### 0.349s elapsed time, 1.402s cpu time, 0.159s GC time
Loading theory "HOL-Library.Stream" (required by "Draft.Periodic_BernpolyMoreTemplates" via "Draft.ExtrEqs")
### theory "Draft.Bernoulli"
### 0.289s elapsed time, 1.142s cpu time, 0.095s GC time
Loading theory "HOL-Library.Periodic_Fun" (required by "Draft.Periodic_BernpolyMoreTemplates" via "Draft.Periodic_Bernpoly")
locale periodic_fun
  fixes f :: "'a => 'b"
    and g :: "'a => 'a => 'a"
    and gm :: "'a => 'a => 'a"
    and g1 :: "'a => 'a"
    and gn1 :: "'a => 'a"
  assumes "periodic_fun f g gm g1 gn1"
locale periodic_fun_simple
  fixes f :: "'a => 'b"
    and period :: "'a"
  assumes "periodic_fun_simple f period"
consts
  left :: "'a tree => 'a tree"
locale periodic_fun_simple'
  fixes f :: "'a => 'b"
  assumes "periodic_fun_simple' f"
consts
  right :: "'a tree => 'a tree"
Found termination order: "size <*mlex*> {}"
### theory "HOL-Library.Periodic_Fun"
### 0.169s elapsed time, 0.674s cpu time, 0.091s GC time
Loading theory "Draft.Periodic_Bernpoly" (required by "Draft.Periodic_BernpolyMoreTemplates")
Found termination order: "size <*mlex*> {}"
consts
  shift :: "'a list => 'a stream => 'a stream"
Found termination order: "size <*mlex*> {}"
Proofs for coinductive predicate(s) "streamsp"
  Proving monotonicity ...
class height = type +
  fixes height :: "'a => nat"
instantiation
  tree :: (type) height
  height_tree == height :: 'a tree => nat
consts
  snth :: "'a stream => nat => 'a"
Found termination order: "size <*mlex*> {}"
consts
  stake :: "nat => 'a stream => 'a list"
consts
  sdrop :: "nat => 'a stream => 'a stream"
### theory "Draft.Periodic_Bernpoly"
### 0.285s elapsed time, 1.126s cpu time, 0.158s GC time
Found termination order: "size <*mlex*> {}"
consts
  sfilter :: "('a => bool) => 'a stream => 'a stream"
consts
  cycle :: "'a list => 'a stream"
Found termination order: "size <*mlex*> {}"
consts
  siterate :: "('a => 'a) => 'a => 'a stream"
consts
  flat :: "'a list stream => 'a stream"
Found termination order: "size <*mlex*> {}"
consts
  sinterleave :: "'a stream => 'a stream => 'a stream"
consts
  szip :: "'a stream => 'b stream => ('a * 'b) stream"
### theory "HOL-Library.BigO"
### 1.079s elapsed time, 3.822s cpu time, 1.001s GC time
Found termination order: "size <*mlex*> {}"
consts
  smap2 :: "('a => 'b => 'c) => 'a stream => 'b stream => 'c stream"
### theory "HOL-Library.Stream"
### 1.107s elapsed time, 3.812s cpu time, 0.965s GC time
Found termination order: "size <*mlex*> {}"
Found termination order: "size <*mlex*> {}"
Found termination order: "(%p. size (fst p)) <*mlex*> {}"
Found termination order: "size <*mlex*> {}"
Found termination order: "(%p. size (snd p)) <*mlex*> {}"
Found termination order: "size <*mlex*> {}"
### theory "HOL-Library.Tree"
### 2.228s elapsed time, 6.069s cpu time, 1.197s GC time
Loading theory "Draft.Templates" (required by "Draft.Periodic_BernpolyMoreTemplates" via "Draft.ExtrEqs")
datatype template_term
=
     t_empty
   | template_app of template_term * template_term
   | template_hole of int
   | template_var of int
datatype sign
= equals | greater_equals | greater_than | less_equals | less_than
datatype template
=
     template_bimplication of template * template
   | template_dunno
   | template_equation of template_term * template_term
   | template_implication of template list * template
   | template_inequation of sign * template_term * template_term
   | template_negation of template
   | template_predicate of template_term
constructor t_empty: template_term
constructor template_app: template_term * template_term -> template_term
constructor template_hole: int -> template_term
constructor template_var: int -> template_term
constructor equals: sign
constructor greater_equals: sign
constructor greater_than: sign
constructor less_equals: sign
constructor less_than: sign
constructor template_bimplication: template * template -> template
constructor template_dunno: template
constructor template_equation: template_term * template_term -> template
constructor template_implication: template list * template -> template
constructor template_inequation:
   sign * template_term * template_term -> template
constructor template_negation: template -> template
constructor template_predicate: template_term -> template
val vfs = fn: term -> (indexname * typ) list * (string * typ) list
val indexOf = fn: ''a list -> ''a -> int -> int
val has_eq = fn: term -> bool
val term2template = fn:
   (indexname * typ) list -> (string * typ) list -> term -> template_term
val lemma2predicate = fn: term -> term -> template
val makeTemplatewithContext = fn: term -> term -> template
val lemma2template = fn: term -> template
val thm2template = fn: thm -> template
val tterm2string = fn: template_term -> string
val template2string = fn: template -> string
val t = "height ?t <= size ?t": thm
val th =
   Const ("HOL.Trueprop", "bool => prop") $
     (Const ("Orderings.ord_class.less_eq", "nat => nat => bool") $
       (Const ("Tree.height_class.height", "?'a tree => nat") $
         Var (("t", 0), "?'a tree")) $
       (Const ("Nat.size_class.size", "?'a tree => nat") $
         Var (("t", 0), "?'a tree"))):
   term
### theory "Draft.Templates"
### 0.060s elapsed time, 0.077s cpu time, 0.000s GC time
Loading theory "Draft.ExtrEqs" (required by "Draft.Periodic_BernpolyMoreTemplates")
val eqpattern =
   Pattern
    (
       Const ("HOL.Trueprop", "bool => prop") $
         (Const ("HOL.eq", "?'a => ?'a => bool") $
           Var (("_dummy_", 1), "?'a") $ Var (("_dummy_", 2), "?'a"))
       ):
   term Find_Theorems.criterion
val badeqpattern = Pattern (Const ("Pure.eq", "?'a => ?'a => prop")):
   term Find_Theorems.criterion
val undefpattern =
   Pattern
    (
       Const ("HOL.Trueprop", "bool => prop") $
         (Const ("HOL.eq", "?'a => ?'a => bool") $
           Var (("_dummy_", 1), "?'a") $ Const ("HOL.undefined", "?'a"))
       ):
   term Find_Theorems.criterion
val thmpattern =
   Pattern
    (Const ("HOL.Trueprop", "bool => prop") $ Var (("_dummy_", 1), "bool")):
   term Find_Theorems.criterion
val badnames =
   ["*nitpick*", "*Nitpick*", "*full_exhaustive*", "*_def*", "Enum.finite*",
    "*Quickcheck*", "ATP*", "*Nunchaku*", "*Code*", "*BNF*", "*SMT*",
    "*.*.*"]:
   string list
val unwanted_names =
   [(false, Name "*nitpick*"), (false, Name "*Nitpick*"),
    (false, Name "*full_exhaustive*"), (false, Name "*_def*"),
    (false, Name "Enum.finite*"), (false, Name "*Quickcheck*"),
    (false, Name "ATP*"), (false, Name "*Nunchaku*"),
    (false, Name "*Code*"), (false, Name "*BNF*"), (false, Name "*SMT*"),
    (false, Name "*.*.*")]:
   (bool * term Find_Theorems.criterion) list
val has_vars = fn: term -> bool
val get_all_eqs = fn: string -> Proof.context -> (string * thm) list
val get_all_thms = fn: string -> Proof.context -> (string * thm) list
val get_noneq_thms = fn: string -> Proof.context -> (string * thm) list
val template_eqs = fn:
   string -> Proof.context -> (string * thm * template) list
val template_thms = fn:
   string -> Proof.context -> (string * thm * template) list
### theory "Draft.ExtrEqs"
### 0.569s elapsed time, 0.619s cpu time, 0.060s GC time
Loading theory "Draft.Periodic_BernpolyMoreTemplates"
val templateLemmas =
   [("Periodic_Bernpoly.pbernpoly_0", "pbernpoly ?n 0 = bernoulli ?n",
     template_equation
      (template_app
        (template_app (template_hole 2, template_var 0), template_hole 1),
       template_app (template_hole 0, template_var 0))),
    ("Periodic_Bernpoly.continuous_on_pbernpoly",
     "?n ~= 1 ==> continuous_on ?A (pbernpoly ?n)",
     template_implication
      ([template_negation
         (template_equation (template_var 1, template_hole 2))],
       template_predicate
        (
           template_app
            (template_app (template_hole 1, template_var 0),
             template_app (template_hole 0, template_var 1))
           ))),
    ("Periodic_Bernpoly.continuous_on_frac",
     "?t <= {0::?'a1..<1::?'a1} ==> continuous_on ?t frac",
     template_implication
      ([template_inequation
         (less_equals, template_var 0,
          template_app
           (template_app (template_hole 4, template_hole 3),
            template_hole 2))],
       template_predicate
        (
           template_app
            (template_app (template_hole 1, template_var 0),
             template_hole 0)
           ))),
    ("Periodic_Bernpoly.frac_eq_id",
     "?x : {0::?'a..<1::?'a} ==> frac ?x = ?x",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 5, template_var 0),
              template_app
               (template_app (template_hole 4, template_hole 3),
                template_hole 2))
            )],
       template_equation
        (template_app (template_hole 0, template_var 0), template_var 0))),
    ("Periodic_Bernpoly.isCont_pbernpoly",
     "?n ~= 1 ==> isCont (pbernpoly ?n) ?x",
     template_implication
      ([template_negation
         (template_equation (template_var 1, template_hole 4))],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 3,
               template_app
                (template_app (template_hole 2, template_var 0),
                 template_hole 1)),
             template_app (template_hole 0, template_var 1))
           ))),
    ("Periodic_Bernpoly.has_field_derivative_frac",
     "?x ~: \<int> ==> (frac has_real_derivative 1) (at ?x)",
     template_implication
      ([template_negation
         (
            template_predicate
             (
                template_app
                 (template_app (template_hole 6, template_var 0),
                  template_hole 5)
                )
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_app (template_hole 4, template_hole 3),
               template_hole 2),
             template_app
              (template_app (template_hole 1, template_var 0),
               template_hole 0))
           ))),
    ("Periodic_Bernpoly.isCont_frac",
     "?x : {0::?'a<..<1::?'a} ==> isCont frac ?x",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 7, template_var 0),
              template_app
               (template_app (template_hole 6, template_hole 5),
                template_hole 4))
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 3,
               template_app
                (template_app (template_hole 2, template_var 0),
                 template_hole 1)),
             template_hole 0)
           ))),
    ("Periodic_Bernpoly.pbernpoly_eq_bernpoly",
     "?x : {0..<1} ==> pbernpoly ?n ?x = bernpoly ?n ?x",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 6, template_var 1),
              template_app
               (template_app (template_hole 5, template_hole 4),
                template_hole 3))
            )],
       template_equation
        (template_app
          (template_app (template_hole 1, template_var 0), template_var 1),
         template_app
          (template_app (template_hole 0, template_var 0),
           template_var 1)))),
    ("Periodic_Bernpoly.bounded_pbernpoly",
     "(!!c. (!!x. norm (pbernpoly ?n x) <= c) ==> ?thesis) ==> ?thesis",
     template_implication
      ([template_predicate (template_app (template_hole 4, t_empty))],
       template_predicate (template_var 0))),
    ("Periodic_Bernpoly.continuous_on_pbernpoly'",
     "[| ?n ~= 1; continuous_on ?A ?f |]
      ==> continuous_on ?A (%x. pbernpoly ?n (?f x))",
     template_implication
      ([template_negation
         (template_equation (template_var 2, template_hole 2)),
        template_predicate
         (
            template_app
             (template_app (template_hole 1, template_var 1),
              template_var 0)
            )],
       template_predicate
        (
           template_app
            (template_app (template_hole 1, template_var 1), t_empty)
           ))),
    ("Periodic_Bernpoly.continuous_on_compose_fracI",
     "[| continuous_on {0..1} ?f; ?f 0 = ?f 1 |]
      ==> continuous_on UNIV (%x. ?f (frac x))",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_hole 6,
                template_app
                 (template_app (template_hole 5, template_hole 4),
                  template_hole 3)),
              template_var 0)
            ),
        template_equation
         (template_app (template_var 0, template_hole 4),
          template_app (template_var 0, template_hole 3))],
       template_predicate
        (
           template_app
            (template_app (template_hole 6, template_hole 1), t_empty)
           ))),
    ("Periodic_Bernpoly.has_field_derivative_at_within_union",
     "[| (?f has_field_derivative ?D) (at ?x within ?A);
         (?f has_field_derivative ?D) (at ?x within ?B) |]
      ==> (?f has_field_derivative ?D) (at ?x within ?A Un ?B)",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app (template_hole 2, template_var 4),
                template_var 3),
              template_app
               (template_app (template_hole 1, template_var 2),
                template_var 1))
            ),
        template_predicate
         (
            template_app
             (template_app
               (template_app (template_hole 2, template_var 4),
                template_var 3),
              template_app
               (template_app (template_hole 1, template_var 2),
                template_var 0))
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_app (template_hole 2, template_var 4),
               template_var 3),
             template_app
              (template_app (template_hole 1, template_var 2),
               template_app
                (template_app (template_hole 0, template_var 1),
                 template_var 0)))
           ))),
    ("Periodic_Bernpoly.has_field_derivative_pbernpoly_Suc",
     "2 <= ?n | ?x ~: \<int> ==>
      (pbernpoly (Suc ?n) has_real_derivative
       real (Suc ?n) * pbernpoly ?n ?x)
       (at ?x)",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_hole 14,
                template_app
                 (template_app
                   (template_hole 13,
                    template_app
                     (template_hole 12,
                      template_app (template_hole 11, template_hole 10))),
                  template_var 1)),
              template_app
               (template_hole 9,
                template_app
                 (template_app (template_hole 8, template_var 0),
                  template_hole 7)))
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_app
                (template_hole 6,
                 template_app
                  (template_hole 5,
                   template_app (template_hole 4, template_var 1))),
               template_app
                (template_app
                  (template_hole 3,
                   template_app
                    (template_hole 2,
                     template_app (template_hole 4, template_var 1))),
                 template_app
                  (template_app (template_hole 5, template_var 1),
                   template_var 0))),
             template_app
              (template_app (template_hole 1, template_var 0),
               template_hole 0))
           ))),
    ("Periodic_Bernpoly.has_field_derivative_frac'",
     "[| (?f has_real_derivative ?D) (at ?x within ?s); ?f ?x ~: \<int> |]
      ==> ((%x. frac (?f x)) has_real_derivative 1 * ?D) (at ?x within ?s)",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app (template_hole 7, template_var 3),
                template_var 2),
              template_app
               (template_app (template_hole 6, template_var 1),
                template_var 0))
            ),
        template_negation
         (
            template_predicate
             (
                template_app
                 (template_app
                   (template_hole 4,
                    template_app (template_var 3, template_var 1)),
                  template_hole 3)
                )
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_app (template_hole 7, t_empty),
               template_app
                (template_app (template_hole 1, template_hole 0),
                 template_var 2)),
             template_app
              (template_app (template_hole 6, template_var 1),
               template_var 0))
           ))),
    ("Periodic_Bernpoly.periodic_continuous_onI",
     "[| !!x. ?f (x + ?p) = ?f x; 0 < ?p; continuous_on {?a..?a + ?p} ?f |]
      ==> continuous_on UNIV ?f",
     template_implication
      ([template_predicate (template_app (template_hole 8, t_empty)),
        template_inequation (less_than, template_hole 3, template_var 1),
        template_predicate
         (
            template_app
             (template_app
               (template_hole 2,
                template_app
                 (template_app (template_hole 1, template_var 0),
                  template_app
                   (template_app (template_hole 5, template_var 0),
                    template_var 1))),
              template_var 2)
            )],
       template_predicate
        (
           template_app
            (template_app (template_hole 2, template_hole 0),
             template_var 2)
           ))),
    ("Periodic_Bernpoly.has_field_derivative_pbernpoly_Suc'",
     "[| (?f has_real_derivative ?D) (at ?x within ?s);
         2 <= ?n | ?f ?x ~: \<int> |]
      ==> ((%x. pbernpoly (Suc ?n) (?f x)) has_real_derivative
           real (Suc ?n) * pbernpoly ?n (?f ?x) * ?D)
           (at ?x within ?s)",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app (template_hole 13, template_var 4),
                template_var 3),
              template_app
               (template_app (template_hole 12, template_var 2),
                template_var 1))
            ),
        template_predicate
         (
            template_app
             (template_app
               (template_hole 11,
                template_app
                 (template_app
                   (template_hole 10,
                    template_app
                     (template_hole 9,
                      template_app (template_hole 8, template_hole 7))),
                  template_var 0)),
              template_app
               (template_hole 6,
                template_app
                 (template_app
                   (template_hole 5,
                    template_app (template_var 4, template_var 2)),
                  template_hole 4)))
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_app (template_hole 13, t_empty),
               template_app
                (template_app
                  (template_hole 1,
                   template_app
                    (template_app
                      (template_hole 1,
                       template_app
                        (template_hole 0,
                         template_app (template_hole 2, template_var 0))),
                     template_app
                      (template_app (template_hole 3, template_var 0),
                       template_app (template_var 4, template_var 2)))),
                 template_var 3)),
             template_app
              (template_app (template_hole 12, template_var 2),
               template_var 1))
           ))),
    ("Periodic_Bernpoly.has_field_derivative_cong_ev'",
     "[| ?x = ?y; \<forall>\<^sub>F x in nhds ?x. x : ?s --> ?f x = ?g x;
         ?u = ?v; ?s = ?t; ?f ?x = ?g ?y |]
      ==> (?f has_field_derivative ?u) (at ?x within ?s) =
          (?g has_field_derivative ?v) (at ?y within ?t)",
     template_implication
      ([template_equation (template_var 7, template_var 6),
        template_predicate
         (
            template_app
             (template_app (template_hole 7, t_empty),
              template_app (template_hole 4, template_var 7))
            ),
        template_equation (template_var 2, template_var 1),
        template_equation (template_var 5, template_var 0),
        template_equation
         (template_app (template_var 4, template_var 7),
          template_app (template_var 3, template_var 6))],
       template_equation
        (template_app
          (template_app
            (template_app (template_hole 1, template_var 4),
             template_var 2),
           template_app
            (template_app (template_hole 0, template_var 7),
             template_var 5)),
         template_app
          (template_app
            (template_app (template_hole 1, template_var 3),
             template_var 1),
           template_app
            (template_app (template_hole 0, template_var 6),
             template_var 0)))))]:
   (string * thm * template) list
### theory "Draft.Periodic_BernpolyMoreTemplates"
### 0.345s elapsed time, 0.513s cpu time, 0.070s GC time
val it = (): unit
