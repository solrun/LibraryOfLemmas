   [("Periodic_Bernpoly.pbernpoly_0", "pbernpoly ?n 0 = bernoulli ?n",
     template_equation
      (template_app
        (template_app (template_hole 2, template_var 0), template_hole 1),
       template_app (template_hole 0, template_var 0))),
    ("Periodic_Bernpoly.continuous_on_pbernpoly",
     "?n ~= 1 ==> continuous_on ?A (pbernpoly ?n)",
     template_implication
      ([template_negation
         (template_equation (template_var 1, template_hole 2))],
       template_predicate
        (
           template_app
            (template_app (template_hole 1, template_var 0),
             template_app (template_hole 0, template_var 1))
           ))),
    ("Periodic_Bernpoly.continuous_on_frac",
     "?t <= {0::?'a1..<1::?'a1} ==> continuous_on ?t frac",
     template_implication
      ([template_inequation
         (less_equals, template_var 0,
          template_app
           (template_app (template_hole 4, template_hole 3),
            template_hole 2))],
       template_predicate
        (
           template_app
            (template_app (template_hole 1, template_var 0),
             template_hole 0)
           ))),
    ("Periodic_Bernpoly.frac_eq_id",
     "?x : {0::?'a..<1::?'a} ==> frac ?x = ?x",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 5, template_var 0),
              template_app
               (template_app (template_hole 4, template_hole 3),
                template_hole 2))
            )],
       template_equation
        (template_app (template_hole 0, template_var 0), template_var 0))),
    ("Periodic_Bernpoly.isCont_pbernpoly",
     "?n ~= 1 ==> isCont (pbernpoly ?n) ?x",
     template_implication
      ([template_negation
         (template_equation (template_var 1, template_hole 4))],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 3,
               template_app
                (template_app (template_hole 2, template_var 0),
                 template_hole 1)),
             template_app (template_hole 0, template_var 1))
           ))),
    ("Periodic_Bernpoly.has_field_derivative_frac",
     "?x ~: \<int> ==> (frac has_real_derivative 1) (at ?x)",
     template_implication
      ([template_negation
         (
            template_predicate
             (
                template_app
                 (template_app (template_hole 6, template_var 0),
                  template_hole 5)
                )
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_app (template_hole 4, template_hole 3),
               template_hole 2),
             template_app
              (template_app (template_hole 1, template_var 0),
               template_hole 0))
           ))),
    ("Periodic_Bernpoly.isCont_frac",
     "?x : {0::?'a<..<1::?'a} ==> isCont frac ?x",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 7, template_var 0),
              template_app
               (template_app (template_hole 6, template_hole 5),
                template_hole 4))
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 3,
               template_app
                (template_app (template_hole 2, template_var 0),
                 template_hole 1)),
             template_hole 0)
           ))),
    ("Periodic_Bernpoly.pbernpoly_eq_bernpoly",
     "?x : {0..<1} ==> pbernpoly ?n ?x = bernpoly ?n ?x",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 6, template_var 1),
              template_app
               (template_app (template_hole 5, template_hole 4),
                template_hole 3))
            )],
       template_equation
        (template_app
          (template_app (template_hole 1, template_var 0), template_var 1),
         template_app
          (template_app (template_hole 0, template_var 0),
           template_var 1)))),
    ("Periodic_Bernpoly.bounded_pbernpoly",
     "(!!c. (!!x. norm (pbernpoly ?n x) <= c) ==> ?thesis) ==> ?thesis",
     template_implication
      ([template_predicate (template_app (template_hole 4, t_empty))],
       template_predicate (template_var 0))),
    ("Periodic_Bernpoly.continuous_on_pbernpoly'",
     "[| ?n ~= 1; continuous_on ?A ?f |]
      ==> continuous_on ?A (%x. pbernpoly ?n (?f x))",
     template_implication
      ([template_negation
         (template_equation (template_var 2, template_hole 2)),
        template_predicate
         (
            template_app
             (template_app (template_hole 1, template_var 1),
              template_var 0)
            )],
       template_predicate
        (
           template_app
            (template_app (template_hole 1, template_var 1), t_empty)
           ))),
    ("Periodic_Bernpoly.continuous_on_compose_fracI",
     "[| continuous_on {0..1} ?f; ?f 0 = ?f 1 |]
      ==> continuous_on UNIV (%x. ?f (frac x))",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_hole 6,
                template_app
                 (template_app (template_hole 5, template_hole 4),
                  template_hole 3)),
              template_var 0)
            ),
        template_equation
         (template_app (template_var 0, template_hole 4),
          template_app (template_var 0, template_hole 3))],
       template_predicate
        (
           template_app
            (template_app (template_hole 6, template_hole 1), t_empty)
           ))),
    ("Periodic_Bernpoly.has_field_derivative_at_within_union",
     "[| (?f has_field_derivative ?D) (at ?x within ?A);
         (?f has_field_derivative ?D) (at ?x within ?B) |]
      ==> (?f has_field_derivative ?D) (at ?x within ?A Un ?B)",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app (template_hole 2, template_var 4),
                template_var 3),
              template_app
               (template_app (template_hole 1, template_var 2),
                template_var 1))
            ),
        template_predicate
         (
            template_app
             (template_app
               (template_app (template_hole 2, template_var 4),
                template_var 3),
              template_app
               (template_app (template_hole 1, template_var 2),
                template_var 0))
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_app (template_hole 2, template_var 4),
               template_var 3),
             template_app
              (template_app (template_hole 1, template_var 2),
               template_app
                (template_app (template_hole 0, template_var 1),
                 template_var 0)))
           ))),
    ("Periodic_Bernpoly.has_field_derivative_pbernpoly_Suc",
     "2 <= ?n | ?x ~: \<int> ==>
      (pbernpoly (Suc ?n) has_real_derivative
       real (Suc ?n) * pbernpoly ?n ?x)
       (at ?x)",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_hole 14,
                template_app
                 (template_app
                   (template_hole 13,
                    template_app
                     (template_hole 12,
                      template_app (template_hole 11, template_hole 10))),
                  template_var 1)),
              template_app
               (template_hole 9,
                template_app
                 (template_app (template_hole 8, template_var 0),
                  template_hole 7)))
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_app
                (template_hole 6,
                 template_app
                  (template_hole 5,
                   template_app (template_hole 4, template_var 1))),
               template_app
                (template_app
                  (template_hole 3,
                   template_app
                    (template_hole 2,
                     template_app (template_hole 4, template_var 1))),
                 template_app
                  (template_app (template_hole 5, template_var 1),
                   template_var 0))),
             template_app
              (template_app (template_hole 1, template_var 0),
               template_hole 0))
           ))),
    ("Periodic_Bernpoly.has_field_derivative_frac'",
     "[| (?f has_real_derivative ?D) (at ?x within ?s); ?f ?x ~: \<int> |]
      ==> ((%x. frac (?f x)) has_real_derivative 1 * ?D) (at ?x within ?s)",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app (template_hole 7, template_var 3),
                template_var 2),
              template_app
               (template_app (template_hole 6, template_var 1),
                template_var 0))
            ),
        template_negation
         (
            template_predicate
             (
                template_app
                 (template_app
                   (template_hole 4,
                    template_app (template_var 3, template_var 1)),
                  template_hole 3)
                )
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_app (template_hole 7, t_empty),
               template_app
                (template_app (template_hole 1, template_hole 0),
                 template_var 2)),
             template_app
              (template_app (template_hole 6, template_var 1),
               template_var 0))
           ))),
    ("Periodic_Bernpoly.periodic_continuous_onI",
     "[| !!x. ?f (x + ?p) = ?f x; 0 < ?p; continuous_on {?a..?a + ?p} ?f |]
      ==> continuous_on UNIV ?f",
     template_implication
      ([template_predicate (template_app (template_hole 8, t_empty)),
        template_inequation (less_than, template_hole 3, template_var 1),
        template_predicate
         (
            template_app
             (template_app
               (template_hole 2,
                template_app
                 (template_app (template_hole 1, template_var 0),
                  template_app
                   (template_app (template_hole 5, template_var 0),
                    template_var 1))),
              template_var 2)
            )],
       template_predicate
        (
           template_app
            (template_app (template_hole 2, template_hole 0),
             template_var 2)
           ))),
    ("Periodic_Bernpoly.has_field_derivative_pbernpoly_Suc'",
     "[| (?f has_real_derivative ?D) (at ?x within ?s);
         2 <= ?n | ?f ?x ~: \<int> |]
      ==> ((%x. pbernpoly (Suc ?n) (?f x)) has_real_derivative
           real (Suc ?n) * pbernpoly ?n (?f ?x) * ?D)
           (at ?x within ?s)",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app (template_hole 13, template_var 4),
                template_var 3),
              template_app
               (template_app (template_hole 12, template_var 2),
                template_var 1))
            ),
        template_predicate
         (
            template_app
             (template_app
               (template_hole 11,
                template_app
                 (template_app
                   (template_hole 10,
                    template_app
                     (template_hole 9,
                      template_app (template_hole 8, template_hole 7))),
                  template_var 0)),
              template_app
               (template_hole 6,
                template_app
                 (template_app
                   (template_hole 5,
                    template_app (template_var 4, template_var 2)),
                  template_hole 4)))
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_app (template_hole 13, t_empty),
               template_app
                (template_app
                  (template_hole 1,
                   template_app
                    (template_app
                      (template_hole 1,
                       template_app
                        (template_hole 0,
                         template_app (template_hole 2, template_var 0))),
                     template_app
                      (template_app (template_hole 3, template_var 0),
                       template_app (template_var 4, template_var 2)))),
                 template_var 3)),
             template_app
              (template_app (template_hole 12, template_var 2),
               template_var 1))
           ))),
    ("Periodic_Bernpoly.has_field_derivative_cong_ev'",
     "[| ?x = ?y; \<forall>\<^sub>F x in nhds ?x. x : ?s --> ?f x = ?g x;
         ?u = ?v; ?s = ?t; ?f ?x = ?g ?y |]
      ==> (?f has_field_derivative ?u) (at ?x within ?s) =
          (?g has_field_derivative ?v) (at ?y within ?t)",
     template_implication
      ([template_equation (template_var 7, template_var 6),
        template_predicate
         (
            template_app
             (template_app (template_hole 7, t_empty),
              template_app (template_hole 4, template_var 7))
            ),
        template_equation (template_var 2, template_var 1),
        template_equation (template_var 5, template_var 0),
        template_equation
         (template_app (template_var 4, template_var 7),
          template_app (template_var 3, template_var 6))],
       template_equation
        (template_app
          (template_app
            (template_app (template_hole 1, template_var 4),
             template_var 2),
           template_app
            (template_app (template_hole 0, template_var 7),
             template_var 5)),
         template_app
          (template_app
            (template_app (template_hole 1, template_var 3),
             template_var 1),
           template_app
            (template_app (template_hole 0, template_var 6),
             template_var 0)))))]
