   [("Bernoulli.bernoulli_in_Rats", "bernoulli ?n : \<rat>",
     template_predicate
      (
         template_app
          (template_app
            (template_hole 2,
             template_app (template_hole 1, template_var 0)),
           template_hole 0)
         )),
    ("Bernoulli.bernoulli'_in_Rats", "bernoulli' ?n : \<rat>",
     template_predicate
      (
         template_app
          (template_app
            (template_hole 2,
             template_app (template_hole 1, template_var 0)),
           template_hole 0)
         )),
    ("Bernoulli.continuous_on_bernpoly", "continuous_on ?A (bernpoly ?n)",
     template_predicate
      (
         template_app
          (template_app (template_hole 1, template_var 1),
           template_app (template_hole 0, template_var 0))
         )),
    ("Bernoulli.isCont_bernpoly", "isCont (bernpoly ?n) ?x",
     template_predicate
      (
         template_app
          (template_app
            (template_hole 3,
             template_app
              (template_app (template_hole 2, template_var 1),
               template_hole 1)),
           template_app (template_hole 0, template_var 0))
         )),
    ("Bernoulli.bernpoly_1'",
     "bernpoly ?n (1::?'a) = of_real (bernoulli' ?n)",
     template_equation
      (template_app
        (template_app (template_hole 3, template_var 0), template_hole 2),
       template_app
        (template_hole 1, template_app (template_hole 0, template_var 0)))),
    ("Bernoulli.bernpoly_0",
     "bernpoly ?n (0::?'a) = of_real (bernoulli ?n)",
     template_equation
      (template_app
        (template_app (template_hole 3, template_var 0), template_hole 2),
       template_app
        (template_hole 1, template_app (template_hole 0, template_var 0)))),
    ("Bernoulli.bernpoly_of_real",
     "bernpoly ?n (of_real ?x) = of_real (bernpoly ?n ?x)",
     template_equation
      (template_app
        (template_app (template_hole 2, template_var 1),
         template_app (template_hole 1, template_var 0)),
       template_app
        (template_hole 1,
         template_app
          (template_app (template_hole 0, template_var 1),
           template_var 0)))),
    ("Bernoulli.power_numeral_reduce",
     "?a ^ numeral ?n = ?a * ?a ^ pred_numeral ?n",
     template_equation
      (template_app
        (template_app (template_hole 3, template_var 1),
         template_app (template_hole 2, template_var 0)),
       template_app
        (template_app (template_hole 1, template_var 1),
         template_app
          (template_app (template_hole 3, template_var 1),
           template_app (template_hole 0, template_var 0))))),
    ("Bernoulli.bernoulli_conv_bernoulli'",
     "?n ~= 1 ==> bernoulli ?n = bernoulli' ?n",
     template_implication
      ([template_negation
         (template_equation (template_var 0, template_hole 3))],
       template_equation
        (template_app (template_hole 1, template_var 0),
         template_app (template_hole 0, template_var 0)))),
    ("Bernoulli.bernoulli'_conv_bernoulli",
     "?n ~= 1 ==> bernoulli' ?n = bernoulli ?n",
     template_implication
      ([template_negation
         (template_equation (template_var 0, template_hole 3))],
       template_equation
        (template_app (template_hole 1, template_var 0),
         template_app (template_hole 0, template_var 0)))),
    ("Bernoulli.bernpoly_1",
     "?n ~= 1 ==> bernpoly ?n (1::?'a) = of_real (bernoulli ?n)",
     template_implication
      ([template_negation
         (template_equation (template_var 0, template_hole 5))],
       template_equation
        (template_app
          (template_app (template_hole 3, template_var 0), template_hole 2),
         template_app
          (template_hole 1,
           template_app (template_hole 0, template_var 0))))),
    ("Bernoulli.has_field_derivative_bernpoly",
     "(bernpoly (Suc ?n) has_field_derivative
       of_nat (?n + 1) * bernpoly ?n ?x)
       (at ?x)",
     template_predicate
      (
         template_app
          (template_app
            (template_app
              (template_hole 8,
               template_app
                (template_hole 7,
                 template_app (template_hole 6, template_var 1))),
             template_app
              (template_app
                (template_hole 5,
                 template_app
                  (template_hole 4,
                   template_app
                    (template_app (template_hole 3, template_var 1),
                     template_hole 2))),
               template_app
                (template_app (template_hole 7, template_var 1),
                 template_var 0))),
           template_app
            (template_app (template_hole 1, template_var 0),
             template_hole 0))
         )),
    ("Bernoulli.diff_bernpoly",
     "bernpoly ?n (?x + 1) - bernpoly ?n ?x = real ?n * ?x ^ (?n - 1)",
     template_equation
      (template_app
        (template_app
          (template_hole 8,
           template_app
            (template_app (template_hole 7, template_var 1),
             template_app
              (template_app (template_hole 6, template_var 0),
               template_hole 5))),
         template_app
          (template_app (template_hole 7, template_var 1), template_var 0)),
       template_app
        (template_app
          (template_hole 4, template_app (template_hole 3, template_var 1)),
         template_app
          (template_app (template_hole 2, template_var 0),
           template_app
            (template_app (template_hole 1, template_var 1),
             template_hole 0))))),
    ("Bernoulli.sum_binomial_times_bernoulli'",
     "(SUM k<?n. real (?n choose k) * bernoulli k) =
      (if ?n = 1 then 1 else 0)",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 10, t_empty),
              template_app (template_hole 5, template_var 0))
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_app
                (template_hole 4,
                 template_app
                  (template_app (template_hole 3, template_var 0),
                   template_hole 2)),
               template_hole 1),
             template_hole 0)
           ))),
    ("Real.Bernoulli_inequality",
     "- 1 <= ?x ==> 1 + real ?n * ?x <= (1 + ?x) ^ ?n",
     template_implication
      ([template_inequation
         (less_equals, template_app (template_hole 5, template_hole 4),
          template_var 1)],
       template_inequation
        (less_equals,
         template_app
          (template_app (template_hole 3, template_hole 4),
           template_app
            (template_app
              (template_hole 2,
               template_app (template_hole 1, template_var 0)),
             template_var 1)),
         template_app
          (template_app
            (template_hole 0,
             template_app
              (template_app (template_hole 3, template_hole 4),
               template_var 1)),
           template_var 0)))),
    ("Bernoulli.Rats_sum",
     "(!!x. x : ?A ==> ?f x : \<rat>) ==> sum ?f ?A : \<rat>",
     template_implication
      ([template_predicate (template_app (template_hole 5, t_empty))],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 2,
               template_app
                (template_app (template_hole 0, template_var 0),
                 template_var 1)),
             template_hole 1)
           ))),
    ("Bernoulli.sum_diff",
     "(SUM i<=?n. ?f (i + 1) - ?f i) = ?f (?n + 1) - ?f 0",
     template_equation
      (template_app
        (template_app (template_hole 5, t_empty),
         template_app (template_hole 1, template_var 0)),
       template_app
        (template_app
          (template_hole 4,
           template_app
            (template_var 1,
             template_app
              (template_app (template_hole 3, template_var 0),
               template_hole 2))),
         template_app (template_var 1, template_hole 0)))),
    ("Bernoulli.sum_binomial_times_bernoulli",
     "(SUM k<=?n. real (Suc ?n choose k) * bernoulli k) =
      (if ?n = 0 then 1 else 0)",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 11, t_empty),
              template_app (template_hole 5, template_var 0))
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_app
                (template_hole 4,
                 template_app
                  (template_app (template_hole 3, template_var 0),
                   template_hole 2)),
               template_hole 1),
             template_hole 0)
           ))),
    ("Real.Bernoulli_inequality_even",
     "even ?n ==> 1 + real ?n * ?x <= (1 + ?x) ^ ?n",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_hole 9,
                template_app
                 (template_hole 8,
                  template_app (template_hole 7, template_hole 6))),
              template_var 1)
            )],
       template_inequation
        (less_equals,
         template_app
          (template_app (template_hole 4, template_hole 3),
           template_app
            (template_app
              (template_hole 2,
               template_app (template_hole 1, template_var 1)),
             template_var 0)),
         template_app
          (template_app
            (template_hole 0,
             template_app
              (template_app (template_hole 4, template_hole 3),
               template_var 0)),
           template_var 1)))),
    ("Bernoulli.bernoulli_conv_bernoulli'_if",
     "?n ~= 1 ==>
      bernoulli ?n = (if ?n = 1 then - 1 / 2 else bernoulli' ?n)",
     template_implication
      ([template_negation
         (template_equation (template_var 0, template_hole 10))],
       template_implication
        ([template_predicate
           (template_app (template_hole 8, template_var 0))],
         template_predicate
          (
             template_app
              (template_app
                (template_app
                  (template_hole 7,
                   template_app
                    (template_app (template_hole 11, template_var 0),
                     template_hole 10)),
                 template_app
                  (template_app
                    (template_hole 6,
                     template_app (template_hole 5, template_hole 4)),
                   template_app
                    (template_hole 3,
                     template_app (template_hole 2, template_hole 1)))),
               template_app (template_hole 0, template_var 0))
             )))),
    ("Bernoulli.bernoulli_unroll_all",
     "bernpoly ?n =
      (%x. SUM k<=?n.
           of_nat (?n choose k) * of_real (bernoulli k) * x ^ (?n - k))",
     template_equation
      (template_app (template_hole 9, template_var 0), t_empty)),
    ("Bernoulli.bernpoly_altdef",
     "bernpoly ?n =
      (%x. SUM k<=?n.
           of_nat (?n choose k) * of_real (bernoulli (?n - k)) * x ^ k)",
     template_equation
      (template_app (template_hole 9, template_var 0), t_empty)),
    ("Bernoulli.fact_diff_Suc",
     "?n < Suc ?m ==>
      fact (Suc ?m - ?n) = of_nat (Suc ?m - ?n) * fact (?m - ?n)",
     template_implication
      ([template_inequation
         (less_than, template_var 1,
          template_app (template_hole 5, template_var 0))],
       template_equation
        (template_app
          (template_hole 3,
           template_app
            (template_app
              (template_hole 2,
               template_app (template_hole 5, template_var 0)),
             template_var 1)),
         template_app
          (template_app
            (template_hole 1,
             template_app
              (template_hole 0,
               template_app
                (template_app
                  (template_hole 2,
                   template_app (template_hole 5, template_var 0)),
                 template_var 1))),
           template_app
            (template_hole 3,
             template_app
              (template_app (template_hole 2, template_var 0),
               template_var 1)))))),
    ("Bernoulli.sum_unroll",
     "sum ?f {..?n} = (if ?n = 0 then ?f 0 else ?f ?n + sum ?f {..?n - 1})",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 7, t_empty),
              template_app (template_hole 6, template_var 0))
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_app
                (template_hole 5,
                 template_app
                  (template_app (template_hole 4, template_var 0),
                   template_hole 3)),
               template_app (template_var 1, template_hole 3)),
             template_app
              (template_app
                (template_hole 2,
                 template_app (template_var 1, template_var 0)),
               template_app
                (template_app (template_hole 7, t_empty),
                 template_app
                  (template_hole 6,
                   template_app
                    (template_app (template_hole 1, template_var 0),
                     template_hole 0)))))
           ))),
    ("Bernoulli.of_nat_binomial_Suc",
     "?k <= ?n ==>
      of_nat (Suc ?n choose ?k) =
      of_nat (Suc ?n) / of_nat (Suc ?n - ?k) * of_nat (?n choose ?k)",
     template_implication
      ([template_inequation (less_equals, template_var 1, template_var 0)],
       template_equation
        (template_app
          (template_hole 5,
           template_app
            (template_app
              (template_hole 4,
               template_app (template_hole 3, template_var 0)),
             template_var 1)),
         template_app
          (template_app
            (template_hole 2,
             template_app
              (template_app
                (template_hole 1,
                 template_app
                  (template_hole 5,
                   template_app (template_hole 3, template_var 0))),
               template_app
                (template_hole 5,
                 template_app
                  (template_app
                    (template_hole 0,
                     template_app (template_hole 3, template_var 0)),
                   template_var 1)))),
           template_app
            (template_hole 5,
             template_app
              (template_app (template_hole 4, template_var 0),
               template_var 1)))))),
    ("Bernoulli.sum_of_powers_nat_aux",
     "[| real ?a = ?b / ?c; real ?b' = ?b; real ?c' = ?c |]
      ==> ?a = ?b' div ?c'",
     template_implication
      ([template_equation
         (template_app (template_hole 3, template_var 4),
          template_app
           (template_app (template_hole 2, template_var 3),
            template_var 2)),
        template_equation
         (template_app (template_hole 3, template_var 1), template_var 3),
        template_equation
         (template_app (template_hole 3, template_var 0), template_var 2)],
       template_equation
        (template_var 4,
         template_app
          (template_app (template_hole 0, template_var 1),
           template_var 0)))),
    ("Bernoulli.sum_of_cubes_nat",
     "(SUM k<=?n. k ^ 3) = (?n\<^sup>2 + ?n)\<^sup>2 div 4",
     template_equation
      (template_app
        (template_app (template_hole 8, t_empty),
         template_app (template_hole 3, template_var 0)),
       template_app
        (template_app
          (template_hole 2,
           template_app
            (template_app
              (template_hole 7,
               template_app
                (template_app
                  (template_hole 1,
                   template_app
                    (template_app (template_hole 7, template_var 0),
                     template_app
                      (template_hole 6,
                       template_app (template_hole 0, template_hole 4)))),
                 template_var 0)),
             template_app
              (template_hole 6,
               template_app (template_hole 0, template_hole 4)))),
         template_app
          (template_hole 6,
           template_app
            (template_hole 0,
             template_app (template_hole 0, template_hole 4)))))),
    ("Bernoulli.sum_of_powers",
     "(SUM k<=?n. real k ^ ?m) =
      (bernpoly (Suc ?m) (real ?n + 1) - bernpoly (Suc ?m) 0) /
      (real ?m + 1)",
     template_equation
      (template_app
        (template_app (template_hole 10, t_empty),
         template_app (template_hole 7, template_var 0)),
       template_app
        (template_app
          (template_hole 6,
           template_app
            (template_app
              (template_hole 5,
               template_app
                (template_app
                  (template_hole 4,
                   template_app (template_hole 3, template_var 1)),
                 template_app
                  (template_app
                    (template_hole 2,
                     template_app (template_hole 8, template_var 0)),
                   template_hole 1))),
             template_app
              (template_app
                (template_hole 4,
                 template_app (template_hole 3, template_var 1)),
               template_hole 0))),
         template_app
          (template_app
            (template_hole 2,
             template_app (template_hole 8, template_var 1)),
           template_hole 1)))),
    ("Bernoulli.binomial_unroll",
     "0 < ?n ==>
      ?n choose ?k =
      (if ?k = 0 then 1 else ?n - 1 choose (?k - 1) + (?n - 1 choose ?k))",
     template_implication
      ([template_inequation (less_than, template_hole 6, template_var 1)],
       template_implication
        ([template_predicate
           (
              template_app
               (template_app (template_hole 4, template_var 1),
                template_var 0)
              )],
         template_predicate
          (
             template_app
              (template_app
                (template_app
                  (template_hole 3,
                   template_app
                    (template_app (template_hole 5, template_var 0),
                     template_hole 6)),
                 template_hole 2),
               template_app
                (template_app
                  (template_hole 1,
                   template_app
                    (template_app
                      (template_hole 4,
                       template_app
                        (template_app (template_hole 0, template_var 1),
                         template_hole 2)),
                     template_app
                      (template_app (template_hole 0, template_var 0),
                       template_hole 2))),
                 template_app
                  (template_app
                    (template_hole 4,
                     template_app
                      (template_app (template_hole 0, template_var 1),
                       template_hole 2)),
                   template_var 0)))
             )))),
    ("Bernoulli.integrals_eq",
     "[| ?f 0 = ?g 0;
         !!x. ((%x. ?f x - ?g x) has_real_derivative 0) (at x) |]
      ==> ?f ?x = ?g ?x",
     template_implication
      ([template_equation
         (template_app (template_var 2, template_hole 5),
          template_app (template_var 1, template_hole 5)),
        template_predicate (template_app (template_hole 4, t_empty))],
       template_equation
        (template_app (template_var 2, template_var 0),
         template_app (template_var 1, template_var 0)))),
    ("Bernoulli.sum_of_cubes",
     "real (SUM k<=?n. k ^ 3) = (real (?n\<^sup>2 + ?n))\<^sup>2 / 4",
     template_equation
      (template_app
        (template_hole 11,
         template_app
          (template_app (template_hole 10, t_empty),
           template_app (template_hole 5, template_var 0))),
       template_app
        (template_app
          (template_hole 4,
           template_app
            (template_app
              (template_hole 3,
               template_app
                (template_hole 11,
                 template_app
                  (template_app
                    (template_hole 2,
                     template_app
                      (template_app (template_hole 9, template_var 0),
                       template_app
                        (template_hole 8,
                         template_app (template_hole 1, template_hole 6)))),
                   template_var 0))),
             template_app
              (template_hole 8,
               template_app (template_hole 1, template_hole 6)))),
         template_app
          (template_hole 0,
           template_app
            (template_hole 1,
             template_app (template_hole 1, template_hole 6)))))),
    ("Bernoulli.bernoulli_Suc",
     "bernoulli (Suc ?n) =
      - 1 / (real ?n + 2) *
      (SUM k<=?n. real (?n + 2 choose k) * bernoulli k)",
     template_equation
      (template_app
        (template_hole 15, template_app (template_hole 14, template_var 0)),
       template_app
        (template_app
          (template_hole 13,
           template_app
            (template_app
              (template_hole 12,
               template_app (template_hole 11, template_hole 10)),
             template_app
              (template_app
                (template_hole 9,
                 template_app (template_hole 8, template_var 0)),
               template_app
                (template_hole 7,
                 template_app (template_hole 6, template_hole 5))))),
         template_app
          (template_app (template_hole 4, t_empty),
           template_app (template_hole 0, template_var 0))))),
    ("Bernoulli.has_field_derivative_bernpoly'",
     "(?f has_field_derivative ?D) (at ?x within ?s) ==>
      ((%x. bernpoly (Suc ?n) (?f x)) has_field_derivative
       of_nat (?n + 1) * bernpoly ?n (?f ?x) * ?D)
       (at ?x within ?s)",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app (template_hole 7, template_var 4),
                template_var 3),
              template_app
               (template_app (template_hole 6, template_var 2),
                template_var 1))
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_app (template_hole 7, t_empty),
               template_app
                (template_app
                  (template_hole 3,
                   template_app
                    (template_app
                      (template_hole 3,
                       template_app
                        (template_hole 2,
                         template_app
                          (template_app (template_hole 1, template_var 0),
                           template_hole 0))),
                     template_app
                      (template_app (template_hole 5, template_var 0),
                       template_app (template_var 4, template_var 2)))),
                 template_var 3)),
             template_app
              (template_app (template_hole 6, template_var 2),
               template_var 1))
           ))),
    ("Bernoulli.bernoulli_unroll",
     "0 < ?n ==>
      bernoulli ?n =
      - 1 / (real ?n + 1) *
      (SUM k<=?n - 1. real (?n + 1 choose k) * bernoulli k)",
     template_implication
      ([template_inequation (less_than, template_hole 14, template_var 0)],
       template_equation
        (template_app (template_hole 12, template_var 0),
         template_app
          (template_app
            (template_hole 11,
             template_app
              (template_app
                (template_hole 10,
                 template_app (template_hole 9, template_hole 8)),
               template_app
                (template_app
                  (template_hole 7,
                   template_app (template_hole 6, template_var 0)),
                 template_hole 8))),
           template_app
            (template_app (template_hole 5, t_empty),
             template_app
              (template_hole 1,
               template_app
                (template_app (template_hole 0, template_var 0),
                 template_hole 2))))))),
    ("Bernoulli.bernoulli_Suc'",
     "bernoulli (Suc ?n) =
      - 1 / (real ?n + 2) *
      (SUM k<=?n. real (?n + 2 choose (k + 2)) * bernoulli (?n - k))",
     template_equation
      (template_app
        (template_hole 16, template_app (template_hole 15, template_var 0)),
       template_app
        (template_app
          (template_hole 14,
           template_app
            (template_app
              (template_hole 13,
               template_app (template_hole 12, template_hole 11)),
             template_app
              (template_app
                (template_hole 10,
                 template_app (template_hole 9, template_var 0)),
               template_app
                (template_hole 8,
                 template_app (template_hole 7, template_hole 6))))),
         template_app
          (template_app (template_hole 5, t_empty),
           template_app (template_hole 0, template_var 0))))),
    ("Bernoulli.sum_of_squares_nat",
     "sum power2 {..?n} = (2 * ?n ^ 3 + 3 * ?n\<^sup>2 + ?n) div 6",
     template_equation
      (template_app
        (template_app (template_hole 9, t_empty),
         template_app (template_hole 4, template_var 0)),
       template_app
        (template_app
          (template_hole 3,
           template_app
            (template_app
              (template_hole 2,
               template_app
                (template_app
                  (template_hole 2,
                   template_app
                    (template_app
                      (template_hole 1,
                       template_app
                        (template_hole 7,
                         template_app (template_hole 6, template_hole 5))),
                     template_app
                      (template_app (template_hole 8, template_var 0),
                       template_app
                        (template_hole 7,
                         template_app
                          (template_hole 0, template_hole 5))))),
                 template_app
                  (template_app
                    (template_hole 1,
                     template_app
                      (template_hole 7,
                       template_app (template_hole 0, template_hole 5))),
                   template_app
                    (template_app (template_hole 8, template_var 0),
                     template_app
                      (template_hole 7,
                       template_app (template_hole 6, template_hole 5)))))),
             template_var 0)),
         template_app
          (template_hole 7,
           template_app
            (template_hole 6,
             template_app (template_hole 0, template_hole 5)))))),
    ("Bernoulli.sum_of_squares",
     "real (sum power2 {..?n}) =
      real (2 * ?n ^ 3 + 3 * ?n\<^sup>2 + ?n) / 6",
     template_equation
      (template_app
        (template_hole 11,
         template_app
          (template_app (template_hole 10, t_empty),
           template_app (template_hole 5, template_var 0))),
       template_app
        (template_app
          (template_hole 4,
           template_app
            (template_hole 11,
             template_app
              (template_app
                (template_hole 3,
                 template_app
                  (template_app
                    (template_hole 3,
                     template_app
                      (template_app
                        (template_hole 2,
                         template_app
                          (template_hole 8,
                           template_app
                            (template_hole 7, template_hole 6))),
                       template_app
                        (template_app (template_hole 9, template_var 0),
                         template_app
                          (template_hole 8,
                           template_app
                            (template_hole 1, template_hole 6))))),
                   template_app
                    (template_app
                      (template_hole 2,
                       template_app
                        (template_hole 8,
                         template_app (template_hole 1, template_hole 6))),
                     template_app
                      (template_app (template_hole 9, template_var 0),
                       template_app
                        (template_hole 8,
                         template_app
                          (template_hole 7, template_hole 6)))))),
               template_var 0))),
         template_app
          (template_hole 0,
           template_app
            (template_hole 7,
             template_app (template_hole 1, template_hole 6))))))]
