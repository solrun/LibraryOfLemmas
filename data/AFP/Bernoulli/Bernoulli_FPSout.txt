Loading theory "HOL-Combinatorics.Stirling" (required by "Draft.Bernoulli_FPSMoreTemplates" via "Draft.Bernoulli_FPS")
Loading theory "HOL-Computational_Algebra.Group_Closure" (required by "Draft.Bernoulli_FPSMoreTemplates" via "Draft.Bernoulli_FPS" via "HOL-Computational_Algebra.Computational_Algebra")
Loading theory "HOL-Library.Cancellation" (required by "Draft.Bernoulli_FPSMoreTemplates" via "Draft.Bernoulli_FPS" via "HOL-Computational_Algebra.Computational_Algebra" via "HOL-Computational_Algebra.Euclidean_Algorithm" via "HOL-Computational_Algebra.Factorial_Ring" via "HOL-Library.Multiset")
Loading theory "HOL-Computational_Algebra.Fraction_Field" (required by "Draft.Bernoulli_FPSMoreTemplates" via "Draft.Bernoulli_FPS" via "HOL-Computational_Algebra.Computational_Algebra")
class ab_group_add = cancel_comm_monoid_add + group_add +
  assumes "ab_left_minus": "!!a. - a + a = (0::'a)"
  assumes "ab_diff_conv_add_uminus": "!!a b. a - b = a + - b"
Proofs for inductive predicate(s) "group_closurep"
  Proving monotonicity ...
Found termination order:
  "(%p. size (snd p)) <*mlex*> (%p. size (fst p)) <*mlex*> {}"
Found termination order:
  "(%p. size (snd p)) <*mlex*> (%p. size (fst p)) <*mlex*> {}"
consts
  stirling_row_aux :: "'a => 'a => 'a list => 'a list"
### theory "HOL-Combinatorics.Stirling"
### 0.248s elapsed time, 0.993s cpu time, 0.065s GC time
Loading theory "HOL-Library.FuncSet" (required by "Draft.Bernoulli_FPSMoreTemplates" via "Draft.Bernoulli_FPS" via "HOL-Number_Theory.Number_Theory" via "HOL-Number_Theory.Residues" via "HOL-Algebra.Multiplicative_Group" via "HOL-Algebra.Group" via "HOL-Algebra.Complete_Lattice" via "HOL-Algebra.Lattice" via "HOL-Algebra.Order" via "HOL-Algebra.Congruence")
instantiation
  fract :: (idom) comm_ring_1
  uminus_fract == uminus :: 'a fract => 'a fract
  one_fract == one_class.one :: 'a fract
  times_fract == times :: 'a fract => 'a fract => 'a fract
  zero_fract == zero_class.zero :: 'a fract
  minus_fract == minus :: 'a fract => 'a fract => 'a fract
  plus_fract == plus :: 'a fract => 'a fract => 'a fract
signature CANCEL = sig val proc: Proof.context -> cterm -> thm option end
functor Cancel_Fun (Data: CANCEL_NUMERALS_DATA): CANCEL
signature CANCEL_DATA =
  sig
    val dest_coeff: term -> int * term
    val dest_sum: term -> term list
    val find_first_coeff: term -> term list -> int * term list
    val mk_coeff: int * term -> term
    val mk_sum: typ -> term list -> term
    val norm_ss1: simpset
    val norm_ss2: simpset
    val norm_tac: Proof.context -> tactic
    val numeral_simp_tac: Proof.context -> tactic
    val prove_conv:
       tactic list -> Proof.context -> thm list -> term * term -> thm option
    val simplify_meta_eq: Proof.context -> thm -> thm
    val trans_tac: Proof.context -> thm option -> tactic
  end
structure Cancel_Data: CANCEL_DATA
signature CANCEL_SIMPROCS =
  sig
    val diff_cancel: Proof.context -> cterm -> thm option
    val eq_cancel: Proof.context -> cterm -> thm option
    val less_cancel: Proof.context -> cterm -> thm option
    val less_eq_cancel: Proof.context -> cterm -> thm option
  end
structure Cancel_Simprocs: CANCEL_SIMPROCS
### theory "HOL-Library.Cancellation"
### 0.421s elapsed time, 1.685s cpu time, 0.107s GC time
Loading theory "HOL-Library.Multiset" (required by "Draft.Bernoulli_FPSMoreTemplates" via "Draft.Bernoulli_FPS" via "HOL-Computational_Algebra.Computational_Algebra" via "HOL-Computational_Algebra.Euclidean_Algorithm" via "HOL-Computational_Algebra.Factorial_Ring")
### theory "HOL-Computational_Algebra.Group_Closure"
### 0.488s elapsed time, 1.940s cpu time, 0.159s GC time
Loading theory "HOL-Library.Function_Algebras" (required by "Draft.Bernoulli_FPSMoreTemplates" via "Draft.ExtrEqs" via "HOL-Library.BigO")
instantiation
  fun :: (type, plus) plus
  plus_fun == plus :: ('a => 'b) => ('a => 'b) => 'a => 'b
instantiation
  fun :: (type, zero) zero
  zero_fun == zero_class.zero :: 'a => 'b
instantiation
  fun :: (type, times) times
  times_fun == times :: ('a => 'b) => ('a => 'b) => 'a => 'b
instantiation
  fun :: (type, one) one
  one_fun == one_class.one :: 'a => 'b
instantiation
  multiset :: (type) cancel_comm_monoid_add
  zero_multiset == zero_class.zero :: 'a multiset
  minus_multiset == minus :: 'a multiset => 'a multiset => 'a multiset
  plus_multiset == plus :: 'a multiset => 'a multiset => 'a multiset
### theory "HOL-Library.Function_Algebras"
### 0.090s elapsed time, 0.364s cpu time, 0.000s GC time
Loading theory "HOL-Library.Infinite_Set" (required by "Draft.Bernoulli_FPSMoreTemplates" via "Draft.Bernoulli_FPS" via "HOL-Computational_Algebra.Computational_Algebra" via "HOL-Computational_Algebra.Formal_Laurent_Series" via "HOL-Computational_Algebra.Polynomial_FPS" via "HOL-Computational_Algebra.Polynomial")
### theory "HOL-Library.FuncSet"
### 0.352s elapsed time, 1.388s cpu time, 0.094s GC time
Loading theory "HOL-Algebra.Congruence" (required by "Draft.Bernoulli_FPSMoreTemplates" via "Draft.Bernoulli_FPS" via "HOL-Number_Theory.Number_Theory" via "HOL-Number_Theory.Residues" via "HOL-Algebra.Multiplicative_Group" via "HOL-Algebra.Group" via "HOL-Algebra.Complete_Lattice" via "HOL-Algebra.Lattice" via "HOL-Algebra.Order")
instantiation
  fract :: (idom) field
  inverse_fract == inverse :: 'a fract => 'a fract
  divide_fract == divide :: 'a fract => 'a fract => 'a fract
instantiation
  fract :: (linordered_idom) linorder
  less_eq_fract == less_eq :: 'a fract => 'a fract => bool
  less_fract == less :: 'a fract => 'a fract => bool
instantiation
  fract :: (linordered_idom) linordered_field
  sgn_fract == sgn :: 'a fract => 'a fract
  abs_fract == abs :: 'a fract => 'a fract
instantiation
  fract :: (linordered_idom) distrib_lattice
  inf_fract == inf :: 'a fract => 'a fract => 'a fract
  sup_fract == sup :: 'a fract => 'a fract => 'a fract
consts
  enumerate :: "'a set => nat => 'a"
### theory "HOL-Computational_Algebra.Fraction_Field"
### 0.898s elapsed time, 3.446s cpu time, 0.559s GC time
Loading theory "HOL-Library.More_List" (required by "Draft.Bernoulli_FPSMoreTemplates" via "Draft.Bernoulli_FPS" via "HOL-Computational_Algebra.Computational_Algebra" via "HOL-Computational_Algebra.Formal_Laurent_Series" via "HOL-Computational_Algebra.Polynomial_FPS" via "HOL-Computational_Algebra.Polynomial")
### theory "HOL-Library.Infinite_Set"
### 0.406s elapsed time, 1.489s cpu time, 0.463s GC time
Loading theory "HOL-Library.Nat_Bijection" (required by "Draft.Bernoulli_FPSMoreTemplates" via "Draft.ExtrEqs" via "HOL-Library.Stream")
### theory "HOL-Library.More_List"
### 0.158s elapsed time, 0.621s cpu time, 0.063s GC time
Found termination order: "(%p. size (snd p)) <*mlex*> {}"
Loading theory "HOL-Library.Power_By_Squaring" (required by "Draft.Bernoulli_FPSMoreTemplates" via "Draft.Bernoulli_FPS" via "HOL-Number_Theory.Number_Theory" via "HOL-Number_Theory.Mod_Exp")
Found termination order: "size_list size <*mlex*> {}"
### Partially applied constant "Multiset.inter_mset" on left hand side of equation, in theorem:
### semilattice_inf.Inf_fin (\<inter>#) (set (?x # ?xs)) ==
### fold (\<inter>#) ?xs ?x
locale equivalence
  fixes S :: "('a, 'b) eq_object_scheme"  (structure)
  assumes "equivalence S"
locale partition
  fixes A :: "'a set"
    and B :: "'a set set"
  assumes "Congruence.partition A B"
class monoid_mult = semigroup_mult + power +
  assumes "mult_1_left": "!!a. (1::'a) * a = a"
    and "mult_1_right": "!!a. a * (1::'a) = a"
### theory "HOL-Library.Power_By_Squaring"
### 0.177s elapsed time, 0.693s cpu time, 0.123s GC time
Loading theory "HOL-Library.Set_Algebras" (required by "Draft.Bernoulli_FPSMoreTemplates" via "Draft.ExtrEqs" via "HOL-Library.BigO")
### Partially applied constant "Multiset.union_mset" on left hand side of equation, in theorem:
### semilattice_sup.Sup_fin (\<union>#) (set (?x # ?xs)) ==
### fold (\<union>#) ?xs ?x
instantiation
  set :: (plus) plus
  plus_set == plus :: 'a set => 'a set => 'a set
instantiation
  set :: (times) times
  times_set == times :: 'a set => 'a set => 'a set
instantiation
  set :: (zero) zero
  zero_set == zero_class.zero :: 'a set
instantiation
  set :: (one) one
  one_set == one_class.one :: 'a set
### theory "HOL-Library.Nat_Bijection"
### 0.316s elapsed time, 1.251s cpu time, 0.123s GC time
Loading theory "HOL-Library.Stream" (required by "Draft.Bernoulli_FPSMoreTemplates" via "Draft.ExtrEqs")
### theory "HOL-Algebra.Congruence"
### 0.683s elapsed time, 2.678s cpu time, 0.289s GC time
Loading theory "HOL-Algebra.Order" (required by "Draft.Bernoulli_FPSMoreTemplates" via "Draft.Bernoulli_FPS" via "HOL-Number_Theory.Number_Theory" via "HOL-Number_Theory.Residues" via "HOL-Algebra.Multiplicative_Group" via "HOL-Algebra.Group" via "HOL-Algebra.Complete_Lattice" via "HOL-Algebra.Lattice")
### theory "HOL-Library.Set_Algebras"
### 0.187s elapsed time, 0.735s cpu time, 0.072s GC time
Loading theory "HOL-Library.Tree" (required by "Draft.Bernoulli_FPSMoreTemplates" via "Draft.ExtrEqs" via "Draft.Templates")
signature MULTISET_SIMPROCS =
  sig
    val subset_cancel_msets: Proof.context -> cterm -> thm option
    val subseteq_cancel_msets: Proof.context -> cterm -> thm option
  end
structure Multiset_Simprocs: MULTISET_SIMPROCS
instantiation
  multiset :: (type) Inf
  Inf_multiset == Inf :: 'a multiset set => 'a multiset
instantiation
  multiset :: (type) Sup
  Sup_multiset == Sup :: 'a multiset set => 'a multiset
locale weak_partial_order
  fixes L :: "('a, 'b) gorder_scheme"  (structure)
  assumes "weak_partial_order L"
instantiation
  multiset :: (type) size
  size_multiset == size :: 'a multiset => nat
locale weak_partial_order
  fixes L :: "('a, 'b) gorder_scheme"  (structure)
  assumes "weak_partial_order L"
consts
  shift :: "'a list => 'a stream => 'a stream"
Proofs for coinductive predicate(s) "streamsp"
  Proving monotonicity ...
locale comp_fun_commute
  fixes f :: "'a => 'b => 'b"
  assumes "comp_fun_commute f"
consts
  snth :: "'a stream => nat => 'a"
consts
  mset :: "'a list => 'a multiset"
consts
  stake :: "nat => 'a stream => 'a list"
consts
  sdrop :: "nat => 'a stream => 'a stream"
consts
  sfilter :: "('a => bool) => 'a stream => 'a stream"
consts
  cycle :: "'a list => 'a stream"
consts
  left :: "'a tree => 'a tree"
consts
  right :: "'a tree => 'a tree"
locale weak_partial_order
  fixes L :: "('a, 'b) gorder_scheme"  (structure)
  assumes "weak_partial_order L"
consts
  siterate :: "('a => 'a) => 'a => 'a stream"
Found termination order: "size <*mlex*> {}"
class linorder = order +
  assumes "linear": "!!x y. x <= y | y <= x"
consts
  flat :: "'a list stream => 'a stream"
locale partial_order
  fixes L :: "('a, 'b) gorder_scheme"  (structure)
  assumes "partial_order L"
Found termination order: "size <*mlex*> {}"
consts
  sinterleave :: "'a stream => 'a stream => 'a stream"
locale comm_monoid_mset
  fixes f :: "'a => 'a => 'a"  (infixl \<open>\<^bold>*\<close> 70)
    and z :: "'a"  (\<open>\<^bold>1\<close>)
  assumes "comm_monoid_mset (\<^bold>*) \<^bold>1"
consts
  szip :: "'a stream => 'b stream => ('a * 'b) stream"
Found termination order: "size <*mlex*> {}"
consts
  smap2 :: "('a => 'b => 'c) => 'a stream => 'b stream => 'c stream"
locale weak_partial_order_bottom
  fixes L :: "('a, 'b) gorder_scheme"  (structure)
  assumes "weak_partial_order_bottom L"
### theory "HOL-Library.Stream"
### 1.030s elapsed time, 3.908s cpu time, 1.040s GC time
Loading theory "Draft.Bernoulli" (required by "Draft.Bernoulli_FPSMoreTemplates" via "Draft.Bernoulli_FPS")
locale weak_partial_order_top
  fixes L :: "('a, 'b) gorder_scheme"  (structure)
  assumes "weak_partial_order_top L"
class height = type +
  fixes height :: "'a => nat"
instantiation
  tree :: (type) height
  height_tree == height :: 'a tree => nat
class comm_monoid_add = ab_semigroup_add + monoid_add +
  assumes "add_0": "!!a. (0::'a) + a = a"
locale weak_total_order
  fixes L :: "('a, 'b) gorder_scheme"  (structure)
  assumes "weak_total_order L"
locale total_order
  fixes L :: "('a, 'b) gorder_scheme"  (structure)
  assumes "total_order L"
class comm_monoid_add = ab_semigroup_add + monoid_add +
  assumes "add_0": "!!a. (0::'a) + a = a"
Found termination order: "size <*mlex*> {}"
### theory "HOL-Algebra.Order"
### 0.992s elapsed time, 3.768s cpu time, 0.968s GC time
Loading theory "HOL-Algebra.Lattice" (required by "Draft.Bernoulli_FPSMoreTemplates" via "Draft.Bernoulli_FPS" via "HOL-Number_Theory.Number_Theory" via "HOL-Number_Theory.Residues" via "HOL-Algebra.Multiplicative_Group" via "HOL-Algebra.Group" via "HOL-Algebra.Complete_Lattice")
Found termination order: "size <*mlex*> {}"
Found termination order: "size <*mlex*> {}"
class canonically_ordered_monoid_add = ordered_comm_monoid_add +
  assumes "le_iff_add": "!!a b. (a <= b) = (EX c. b = a + c)"
Found termination order: "size <*mlex*> {}"
### theory "Draft.Bernoulli"
### 0.194s elapsed time, 0.764s cpu time, 0.075s GC time
Loading theory "HOL-Library.BigO" (required by "Draft.Bernoulli_FPSMoreTemplates" via "Draft.ExtrEqs")
locale weak_upper_semilattice
  fixes L :: "('a, 'b) gorder_scheme"  (structure)
  assumes "weak_upper_semilattice L"
locale weak_lower_semilattice
  fixes L :: "('a, 'b) gorder_scheme"  (structure)
  assumes "weak_lower_semilattice L"
locale weak_lattice
  fixes L :: "('a, 'b) gorder_scheme"  (structure)
  assumes "weak_lattice L"
Found termination order: "size <*mlex*> {}"
Found termination order: "size <*mlex*> {}"
class comm_monoid_mult = ab_semigroup_mult + monoid_mult + dvd +
  assumes "mult_1": "!!a. (1::'a) * a = a"
Found termination order: "size <*mlex*> {}"
Found termination order: "size <*mlex*> {}"
Found termination order: "(%p. size (fst p)) <*mlex*> {}"
Found termination order: "size <*mlex*> {}"
locale weak_bounded_lattice
  fixes L :: "('a, 'b) gorder_scheme"  (structure)
  assumes "weak_bounded_lattice L"
locale upper_semilattice
  fixes L :: "('a, 'b) gorder_scheme"  (structure)
  assumes "upper_semilattice L"
locale lower_semilattice
  fixes L :: "('a, 'b) gorder_scheme"  (structure)
  assumes "lower_semilattice L"
Found termination order: "(%p. size (snd p)) <*mlex*> {}"
locale Lattice.lattice
  fixes L :: "('a, 'b) gorder_scheme"  (structure)
  assumes "lattice L"
locale Lattice.bounded_lattice
  fixes L :: "('a, 'b) gorder_scheme"  (structure)
  assumes "bounded_lattice L"
locale Lattice.bounded_lattice
  fixes L :: "('a, 'b) gorder_scheme"  (structure)
  assumes "bounded_lattice L"
### theory "HOL-Algebra.Lattice"
### 1.000s elapsed time, 3.800s cpu time, 1.237s GC time
Loading theory "HOL-Algebra.Complete_Lattice" (required by "Draft.Bernoulli_FPSMoreTemplates" via "Draft.Bernoulli_FPS" via "HOL-Number_Theory.Number_Theory" via "HOL-Number_Theory.Residues" via "HOL-Algebra.Multiplicative_Group" via "HOL-Algebra.Group")
locale weak_complete_lattice
  fixes L :: "('a, 'b) gorder_scheme"  (structure)
  assumes "weak_complete_lattice L"
Found termination order: "size <*mlex*> {}"
class linorder = order +
  assumes "linear": "!!x y. x <= y | y <= x"
### theory "HOL-Library.BigO"
### 0.987s elapsed time, 3.751s cpu time, 1.230s GC time
Loading theory "HOL-Number_Theory.Fib" (required by "Draft.Bernoulli_FPSMoreTemplates" via "Draft.Bernoulli_FPS" via "HOL-Number_Theory.Number_Theory")
Found termination order: "size <*mlex*> {}"
locale weak_complete_lattice
  fixes L :: "('a, 'b) gorder_scheme"  (structure)
  assumes "weak_complete_lattice L"
### theory "HOL-Library.Tree"
### 2.241s elapsed time, 8.552s cpu time, 2.336s GC time
Loading theory "Draft.Templates" (required by "Draft.Bernoulli_FPSMoreTemplates" via "Draft.ExtrEqs")
Found termination order: "(%p. size (snd (snd p))) <*mlex*> {}"
locale weak_complete_lattice
  fixes L :: "('a, 'b) gorder_scheme"  (structure)
  assumes "weak_complete_lattice L"
datatype template_term
=
     t_empty
   | template_app of template_term * template_term
   | template_hole of int
   | template_var of int
datatype sign
= equals | greater_equals | greater_than | less_equals | less_than
datatype template
=
     template_bimplication of template * template
   | template_dunno
   | template_equation of template_term * template_term
   | template_implication of template list * template
   | template_inequation of sign * template_term * template_term
   | template_negation of template
   | template_predicate of template_term
constructor t_empty: template_term
constructor template_app: template_term * template_term -> template_term
constructor template_hole: int -> template_term
constructor template_var: int -> template_term
constructor equals: sign
constructor greater_equals: sign
constructor greater_than: sign
constructor less_equals: sign
constructor less_than: sign
constructor template_bimplication: template * template -> template
constructor template_dunno: template
constructor template_equation: template_term * template_term -> template
constructor template_implication: template list * template -> template
constructor template_inequation:
   sign * template_term * template_term -> template
constructor template_negation: template -> template
constructor template_predicate: template_term -> template
val vfs = fn: term -> (indexname * typ) list * (string * typ) list
val indexOf = fn: ''a list -> ''a -> int -> int
val has_eq = fn: term -> bool
val term2template = fn:
   (indexname * typ) list -> (string * typ) list -> term -> template_term
val lemma2predicate = fn: term -> term -> template
val makeTemplatewithContext = fn: term -> term -> template
val lemma2template = fn: term -> template
val thm2template = fn: thm -> template
val tterm2string = fn: template_term -> string
val template2string = fn: template -> string
val t = "height ?t <= size ?t": thm
val th =
   Const ("HOL.Trueprop", "bool => prop") $
     (Const ("Orderings.ord_class.less_eq", "nat => nat => bool") $
       (Const ("Tree.height_class.height", "?'a tree => nat") $
         Var (("t", 0), "?'a tree")) $
       (Const ("Nat.size_class.size", "?'a tree => nat") $
         Var (("t", 0), "?'a tree"))):
   term
### theory "Draft.Templates"
### 0.084s elapsed time, 0.325s cpu time, 0.090s GC time
Loading theory "Draft.ExtrEqs" (required by "Draft.Bernoulli_FPSMoreTemplates")
instantiation
  multiset :: (preorder) order
  less_eq_multiset == less_eq :: 'a multiset => 'a multiset => bool
  less_multiset == less :: 'a multiset => 'a multiset => bool
### theory "HOL-Number_Theory.Fib"
### 0.247s elapsed time, 0.971s cpu time, 0.152s GC time
instantiation
  multiset :: (preorder) ordered_ab_semigroup_add
Proofs for inductive predicate(s) "pw_leq"
  Proving monotonicity ...
locale Complete_Lattice.complete_lattice
  fixes L :: "('a, 'b) gorder_scheme"  (structure)
  assumes "complete_lattice L"
locale Complete_Lattice.complete_lattice
  fixes L :: "('a, 'b) gorder_scheme"  (structure)
  assumes "complete_lattice L"
locale weak_complete_lattice
  fixes L :: "('a, 'b) gorder_scheme"  (structure)
  assumes "weak_complete_lattice L"
Found termination order: "(%p. length (fst p)) <*mlex*> {}"
instantiation
  multiset :: (equal) equal
  equal_multiset == equal_class.equal :: 'a multiset => 'a multiset => bool
### theory "HOL-Algebra.Complete_Lattice"
### 0.607s elapsed time, 2.171s cpu time, 0.301s GC time
Loading theory "HOL-Algebra.Group" (required by "Draft.Bernoulli_FPSMoreTemplates" via "Draft.Bernoulli_FPS" via "HOL-Number_Theory.Number_Theory" via "HOL-Number_Theory.Residues" via "HOL-Algebra.Multiplicative_Group")
instantiation
  multiset :: (random) random
  random_multiset == random_class.random ::
    natural
    => natural * natural
       => ('a multiset * (unit => term)) * natural * natural
instantiation
  multiset :: (full_exhaustive) full_exhaustive
  full_exhaustive_multiset == full_exhaustive_class.full_exhaustive ::
    ('a multiset * (unit => term) => (bool * term list) option)
    => natural => (bool * term list) option
Proofs for inductive predicate(s) "pred_mset"
  Proving monotonicity ...
Proofs for inductive predicate(s) "rel_mset'"
  Proving monotonicity ...
### theory "HOL-Library.Multiset"
### 3.815s elapsed time, 14.220s cpu time, 3.330s GC time
Loading theory "HOL-Computational_Algebra.Factorial_Ring" (required by "Draft.Bernoulli_FPSMoreTemplates" via "Draft.Bernoulli_FPS" via "HOL-Computational_Algebra.Computational_Algebra" via "HOL-Computational_Algebra.Euclidean_Algorithm")
locale Group.monoid
  fixes G :: "('a, 'b) monoid_scheme"  (structure)
  assumes "Group.monoid G"
val eqpattern =
   Pattern
    (
       Const ("HOL.Trueprop", "bool => prop") $
         (Const ("HOL.eq", "?'a => ?'a => bool") $
           Var (("_dummy_", 1), "?'a") $ Var (("_dummy_", 2), "?'a"))
       ):
   term Find_Theorems.criterion
val badeqpattern = Pattern (Const ("Pure.eq", "?'a => ?'a => prop")):
   term Find_Theorems.criterion
val undefpattern =
   Pattern
    (
       Const ("HOL.Trueprop", "bool => prop") $
         (Const ("HOL.eq", "?'a => ?'a => bool") $
           Var (("_dummy_", 1), "?'a") $ Const ("HOL.undefined", "?'a"))
       ):
   term Find_Theorems.criterion
val thmpattern =
   Pattern
    (Const ("HOL.Trueprop", "bool => prop") $ Var (("_dummy_", 1), "bool")):
   term Find_Theorems.criterion
val badnames =
   ["*nitpick*", "*Nitpick*", "*full_exhaustive*", "*_def*", "Enum.finite*",
    "*Quickcheck*", "ATP*", "*Nunchaku*", "*Code*", "*BNF*", "*SMT*",
    "*.*.*"]:
   string list
val unwanted_names =
   [(false, Name "*nitpick*"), (false, Name "*Nitpick*"),
    (false, Name "*full_exhaustive*"), (false, Name "*_def*"),
    (false, Name "Enum.finite*"), (false, Name "*Quickcheck*"),
    (false, Name "ATP*"), (false, Name "*Nunchaku*"),
    (false, Name "*Code*"), (false, Name "*BNF*"), (false, Name "*SMT*"),
    (false, Name "*.*.*")]:
   (bool * term Find_Theorems.criterion) list
val has_vars = fn: term -> bool
val get_all_eqs = fn: string -> Proof.context -> (string * thm) list
val get_all_thms = fn: string -> Proof.context -> (string * thm) list
val get_noneq_thms = fn: string -> Proof.context -> (string * thm) list
val template_eqs = fn:
   string -> Proof.context -> (string * thm * template) list
val template_thms = fn:
   string -> Proof.context -> (string * thm * template) list
### theory "Draft.ExtrEqs"
### 0.604s elapsed time, 1.965s cpu time, 0.293s GC time
locale Group.group
  fixes G :: "('a, 'b) monoid_scheme"  (structure)
  assumes "Group.group G"
overloading
  nat_pow \<equiv> pow :: ('a, 'b) monoid_scheme => 'a => nat => 'a
overloading
  int_pow \<equiv> pow :: ('a, 'b) monoid_scheme => 'a => int => 'a
locale submonoid
  fixes H :: "'a set"
    and G :: "('a, 'b) monoid_scheme"  (structure)
  assumes "submonoid H G"
locale subgroup
  fixes H :: "'a set"
    and G :: "('a, 'b) monoid_scheme"  (structure)
  assumes "subgroup H G"
locale group_hom
  fixes G :: "('a, 'b) monoid_scheme"  (structure)
    and H :: "('c, 'd) monoid_scheme"  (structure)
    and h :: "'a => 'c"
  assumes "group_hom G H h"
locale Group.comm_monoid
  fixes G :: "('a, 'b) monoid_scheme"  (structure)
  assumes "Group.comm_monoid G"
class normalization_semidom = algebraic_semidom +
  semidom_divide_unit_factor +
  fixes normalize :: "'a => 'a"
  assumes
    "unit_factor_mult_normalize": "!!a. unit_factor a * normalize a = a"
    and "normalize_0": "normalize (0::'a) = (0::'a)"
locale comm_group
  fixes G :: "('a, 'b) monoid_scheme"  (structure)
  assumes "comm_group G"
### theory "HOL-Algebra.Group"
### 1.276s elapsed time, 3.104s cpu time, 0.487s GC time
Loading theory "HOL-Algebra.Coset" (required by "Draft.Bernoulli_FPSMoreTemplates" via "Draft.Bernoulli_FPS" via "HOL-Number_Theory.Number_Theory" via "HOL-Number_Theory.Residues" via "HOL-Algebra.Multiplicative_Group")
Loading theory "HOL-Algebra.FiniteProduct" (required by "Draft.Bernoulli_FPSMoreTemplates" via "Draft.Bernoulli_FPS" via "HOL-Number_Theory.Number_Theory" via "HOL-Number_Theory.Residues" via "HOL-Algebra.Multiplicative_Group" via "HOL-Algebra.UnivPoly" via "HOL-Algebra.Module" via "HOL-Algebra.Ring")
Proofs for inductive predicate(s) "foldSetDp"
  Proving monotonicity ...
class semiring_gcd = gcd + normalization_semidom +
  assumes "gcd_dvd1": "!!a b. gcd a b dvd a"
    and "gcd_dvd2": "!!a b. gcd a b dvd b"
    and "gcd_greatest": "!!c a b. [| c dvd a; c dvd b |] ==> c dvd gcd a b"
    and "normalize_gcd": "!!a b. normalize (gcd a b) = gcd a b"
    and "lcm_gcd": "!!a b. lcm a b = normalize (a * b div gcd a b)"
locale normal
  fixes H :: "'a set"
    and G :: "('a, 'b) monoid_scheme"  (structure)
  assumes "normal H G"
locale LCD
  fixes B :: "'b set"
    and D :: "'a set"
    and f :: "'b => 'a => 'a"  (infixl \<open>\<cdot>\<close> 70)
  assumes "LCD B D (\<cdot>)"
locale ACeD
  fixes D :: "'a set"
    and f :: "'a => 'a => 'a"  (infixl \<open>\<cdot>\<close> 70)
    and e :: "'a"
  assumes "ACeD D (\<cdot>) e"
locale Group.comm_monoid
  fixes G :: "('a, 'b) monoid_scheme"  (structure)
  assumes "Group.comm_monoid G"
locale Group.comm_monoid
  fixes G :: "('a, 'b) monoid_scheme"  (structure)
  assumes "Group.comm_monoid G"
### theory "HOL-Algebra.FiniteProduct"
### 0.399s elapsed time, 1.222s cpu time, 0.145s GC time
Loading theory "HOL-Algebra.Ring" (required by "Draft.Bernoulli_FPSMoreTemplates" via "Draft.Bernoulli_FPS" via "HOL-Number_Theory.Number_Theory" via "HOL-Number_Theory.Residues" via "HOL-Algebra.Multiplicative_Group" via "HOL-Algebra.UnivPoly" via "HOL-Algebra.Module")
### Ambiguous input (line 611 of "~~/src/HOL/Algebra/Coset.thy") produces 2 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("\<^fixed>r_congruent_indexed" ("_index" ("_position" G))
###       ("_position" H))
###     ("_Coll" ("_pattern" ("_position" x) ("_position" y))
###       ("\<^const>HOL.conj"
###         ("\<^const>Set.member" ("_position" x)
###           ("_applC" ("_position" carrier) ("_position" G)))
###         ("\<^const>HOL.conj"
###           ("\<^const>Set.member" ("_position" y)
###             ("_applC" ("_position" carrier) ("_position" G)))
###           ("\<^const>Set.member"
###             ("\<^const>Group.monoid.mult_indexed"
###               ("\<^const>Group.m_inv_indexed" ("_index" ("_position" G))
###                 ("_position" x))
###               ("_index" ("_position" G)) ("_position" y))
###             ("_position" H)))))))
### ("\<^const>HOL.Trueprop"
###   ("\<^fixed>r_congruent_indexed" ("_index" ("_position" G))
###     ("\<^const>HOL.eq" ("_position" H)
###       ("_Coll" ("_pattern" ("_position" x) ("_position" y))
###         ("\<^const>HOL.conj"
###           ("\<^const>Set.member" ("_position" x)
###             ("_applC" ("_position" carrier) ("_position" G)))
###           ("\<^const>HOL.conj"
###             ("\<^const>Set.member" ("_position" y)
###               ("_applC" ("_position" carrier) ("_position" G)))
###             ("\<^const>Set.member"
###               ("\<^const>Group.monoid.mult_indexed"
###                 ("\<^const>Group.m_inv_indexed" ("_index" ("_position" G))
###                   ("_position" x))
###                 ("_index" ("_position" G)) ("_position" y))
###               ("_position" H))))))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
class factorial_semiring = normalization_semidom +
  assumes
    "prime_factorization_exists":
      "!!x. x ~= (0::'a) ==>
            EX A. (ALL x. x :# A --> prime_elem x) &
                  normalize (\<Prod>\<^sub># A) = normalize x"
locale abelian_monoid
  fixes G :: "('a, 'b) ring_scheme"  (structure)
  assumes "abelian_monoid G"
locale abelian_group
  fixes G :: "('a, 'b) ring_scheme"  (structure)
  assumes "abelian_group G"
### Cannot skip proof of schematic goal statement
locale abelian_monoid
  fixes G :: "('a, 'b) ring_scheme"  (structure)
  assumes "abelian_monoid G"
### Cannot skip proof of schematic goal statement
class factorial_semiring = normalization_semidom +
  assumes
    "prime_factorization_exists":
      "!!x. x ~= (0::'a) ==>
            EX A. (ALL x. x :# A --> prime_elem x) &
                  normalize (\<Prod>\<^sub># A) = normalize x"
locale abelian_monoid
  fixes G :: "('a, 'b) ring_scheme"  (structure)
  assumes "abelian_monoid G"
### Cannot skip proof of schematic goal statement
locale abelian_group
  fixes G :: "('a, 'b) ring_scheme"  (structure)
  assumes "abelian_group G"
### Cannot skip proof of schematic goal statement
locale Ring.semiring
  fixes R :: "('a, 'b) ring_scheme"  (structure)
  assumes "semiring R"
### theory "HOL-Algebra.Coset"
### 1.024s elapsed time, 3.128s cpu time, 0.346s GC time
Loading theory "HOL-Algebra.Generated_Groups" (required by "Draft.Bernoulli_FPSMoreTemplates" via "Draft.Bernoulli_FPS" via "HOL-Number_Theory.Number_Theory" via "HOL-Number_Theory.Residues" via "HOL-Algebra.Multiplicative_Group")
Proofs for inductive predicate(s) "generatep"
  Proving monotonicity ...
locale Ring.ring
  fixes R :: "('a, 'b) ring_scheme"  (structure)
  assumes "ring R"
locale cring
  fixes R :: "('a, 'b) ring_scheme"  (structure)
  assumes "cring R"
locale domain
  fixes R :: "('a, 'b) ring_scheme"  (structure)
  assumes "domain R"
locale Ring.field
  fixes R :: "('a, 'b) ring_scheme"  (structure)
  assumes "field R"
locale Ring.ring
  fixes R :: "('a, 'b) ring_scheme"  (structure)
  assumes "ring R"
carrier (| carrier = ?carrier, ... = ?more |) = ?carrier
partial_object.more (| carrier = ?carrier, ... = ?more |) = ?more
carrier_update ?carrier' (| carrier = ?carrier, ... = ?more |) =
(| carrier = ?carrier' ?carrier, ... = ?more |)
partial_object.more_update ?more' (| carrier = ?carrier, ... = ?more |) =
(| carrier = ?carrier, ... = ?more' ?more |)
(\<otimes>\<^bsub>(| carrier = ?carrier, mult = ?mult, one = ?one, ... = ?more |)\<^esub>) =
?mult
\<one>\<^bsub>(| carrier = ?carrier, mult = ?mult, one = ?one, ... = ?more |)\<^esub> =
?one
monoid.more
 (| carrier = ?carrier, mult = ?mult, one = ?one, ... = ?more |) =
?more
mult_update ?mult'
 (| carrier = ?carrier, mult = ?mult, one = ?one, ... = ?more |) =
(| carrier = ?carrier, mult = ?mult' ?mult, one = ?one, ... = ?more |)
one_update ?one'
 (| carrier = ?carrier, mult = ?mult, one = ?one, ... = ?more |) =
(| carrier = ?carrier, mult = ?mult, one = ?one' ?one, ... = ?more |)
monoid.more_update ?more'
 (| carrier = ?carrier, mult = ?mult, one = ?one, ... = ?more |) =
(| carrier = ?carrier, mult = ?mult, one = ?one, ... = ?more' ?more |)
locale Ring.ring
  fixes R :: "('a, 'b) ring_scheme"  (structure)
  assumes "ring R"
### ML warning (line 44 of "~~/src/HOL/Algebra/ringsimp.ML"):
### Value identifier (s) has not been referenced.
### ML warning (line 47 of "~~/src/HOL/Algebra/ringsimp.ML"):
### Matches are not exhaustive.
signature RINGSIMP =
  sig
    val add_struct: string * term list -> attribute
    val algebra_tac: Proof.context -> int -> tactic
    val del_struct: string * term list -> attribute
    val print_structures: Proof.context -> unit
  end
structure Ringsimp: RINGSIMP
### theory "HOL-Algebra.Generated_Groups"
### 0.633s elapsed time, 1.938s cpu time, 0.228s GC time
Loading theory "HOL-Algebra.Elementary_Groups" (required by "Draft.Bernoulli_FPSMoreTemplates" via "Draft.Bernoulli_FPS" via "HOL-Number_Theory.Number_Theory" via "HOL-Number_Theory.Residues" via "HOL-Algebra.Multiplicative_Group")
locale group_disjoint_sum
  fixes G :: "('a, 'b) monoid_scheme"  (structure)
    and A :: "'a set"
    and B :: "'a set"
  assumes "group_disjoint_sum G A B"
locale Ring.semiring
  fixes R :: "('a, 'b) ring_scheme"  (structure)
  assumes "semiring R"
locale domain
  fixes R :: "('a, 'b) ring_scheme"  (structure)
  assumes "domain R"
### theory "HOL-Algebra.Elementary_Groups"
### 0.510s elapsed time, 1.551s cpu time, 0.150s GC time
class factorial_semiring_gcd = factorial_semiring + Gcd +
  assumes "gcd_eq_gcd_factorial": "!!a b. gcd a b = gcd_factorial a b"
    and "lcm_eq_lcm_factorial": "!!a b. lcm a b = lcm_factorial a b"
    and "Gcd_eq_Gcd_factorial": "!!A. Gcd A = Gcd_factorial A"
    and "Lcm_eq_Lcm_factorial": "!!A. Lcm A = Lcm_factorial A"
locale ring_hom_cring
  fixes R :: "('a, 'b) ring_scheme"  (structure)
    and S :: "('c, 'd) ring_scheme"  (structure)
    and h :: "'a => 'c"
  assumes "ring_hom_cring R S h"
### theory "HOL-Algebra.Ring"
### 2.378s elapsed time, 6.676s cpu time, 0.658s GC time
Loading theory "HOL-Algebra.AbelCoset" (required by "Draft.Bernoulli_FPSMoreTemplates" via "Draft.Bernoulli_FPS" via "HOL-Number_Theory.Number_Theory" via "HOL-Number_Theory.Residues" via "HOL-Algebra.Multiplicative_Group" via "HOL-Algebra.UnivPoly" via "HOL-Algebra.RingHom" via "HOL-Algebra.Ideal")
Loading theory "HOL-Algebra.Module" (required by "Draft.Bernoulli_FPSMoreTemplates" via "Draft.Bernoulli_FPS" via "HOL-Number_Theory.Number_Theory" via "HOL-Number_Theory.Residues" via "HOL-Algebra.Multiplicative_Group" via "HOL-Algebra.UnivPoly")
locale module
  fixes R :: "('a, 'b) ring_scheme"  (structure)
    and M :: "('a, 'c, 'd) module_scheme"  (structure)
  assumes "module R M"
locale abelian_group_hom
  fixes G :: "('a, 'b) ring_scheme"  (structure)
    and H :: "('c, 'd) ring_scheme"  (structure)
    and h :: "'a => 'c"
  assumes "abelian_group_hom G H h"
### Cannot skip proof of schematic goal statement
locale abelian_group
  fixes G :: "('a, 'b) ring_scheme"  (structure)
  assumes "abelian_group G"
[| ?M <= carrier G; ?g : carrier G; ?h : carrier G |]
==> ?M #>\<^bsub>add_monoid G\<^esub> ?g #>\<^bsub>add_monoid G\<^esub> ?h =
    ?M #>\<^bsub>add_monoid G\<^esub> ?g \<oplus> ?h
[| abelian_group ?G; ?M <= carrier ?G; ?g : carrier ?G; ?h : carrier ?G |]
==> ?M +>\<^bsub>?G\<^esub> ?g +>\<^bsub>?G\<^esub> ?h =
    ?M +>\<^bsub>?G\<^esub> ?g \<oplus>\<^bsub>?G\<^esub> ?h
locale algebra
  fixes R :: "('a, 'b) ring_scheme"  (structure)
    and M :: "('a, 'c, 'd) module_scheme"  (structure)
  assumes "algebra R M"
locale additive_subgroup
  fixes H :: "'a set"
    and G :: "('a, 'b) ring_scheme"  (structure)
  assumes "additive_subgroup H G"
locale abelian_subgroup
  fixes H :: "'a set"
    and G :: "('a, 'b) ring_scheme"  (structure)
  assumes "abelian_subgroup H G"
locale submodule
  fixes H :: "'c set"
    and R :: "('a, 'b) ring_scheme"
    and M :: "('a, 'c, 'd) module_scheme"  (structure)
  assumes "submodule H R M"
### theory "HOL-Algebra.Module"
### 1.408s elapsed time, 4.297s cpu time, 0.420s GC time
### theory "HOL-Computational_Algebra.Factorial_Ring"
### 5.829s elapsed time, 15.790s cpu time, 1.648s GC time
Loading theory "HOL-Computational_Algebra.Euclidean_Algorithm" (required by "Draft.Bernoulli_FPSMoreTemplates" via "Draft.Bernoulli_FPS" via "HOL-Computational_Algebra.Computational_Algebra")
Loading theory "HOL-Computational_Algebra.Polynomial" (required by "Draft.Bernoulli_FPSMoreTemplates" via "Draft.Bernoulli_FPS" via "HOL-Computational_Algebra.Computational_Algebra" via "HOL-Computational_Algebra.Formal_Laurent_Series" via "HOL-Computational_Algebra.Polynomial_FPS")
### theory "HOL-Algebra.AbelCoset"
### 2.531s elapsed time, 7.223s cpu time, 0.676s GC time
Loading theory "HOL-Algebra.Ideal" (required by "Draft.Bernoulli_FPSMoreTemplates" via "Draft.Bernoulli_FPS" via "HOL-Number_Theory.Number_Theory" via "HOL-Number_Theory.Residues" via "HOL-Algebra.Multiplicative_Group" via "HOL-Algebra.UnivPoly" via "HOL-Algebra.RingHom")
locale ideal
  fixes I :: "'a set"
    and R :: "('a, 'b) ring_scheme"  (structure)
  assumes "ideal I R"
locale principalideal
  fixes I :: "'a set"
    and R :: "('a, 'b) ring_scheme"  (structure)
  assumes "principalideal I R"
instantiation
  poly :: (zero) zero
  zero_poly == zero_class.zero :: 'a poly
locale maximalideal
  fixes I :: "'a set"
    and R :: "('a, 'b) ring_scheme"  (structure)
  assumes "maximalideal I R"
consts
  Poly :: "'a list => 'a poly"
instantiation
  poly :: ({zero,equal}) equal
  equal_poly == equal_class.equal :: 'a poly => 'a poly => bool
locale primeideal
  fixes I :: "'a set"
    and R :: "('a, 'b) ring_scheme"  (structure)
  assumes "primeideal I R"
instantiation
  poly :: (comm_monoid_add) comm_monoid_add
  plus_poly == plus :: 'a poly => 'a poly => 'a poly
instantiation
  poly :: (cancel_comm_monoid_add) cancel_comm_monoid_add
  minus_poly == minus :: 'a poly => 'a poly => 'a poly
instantiation
  poly :: (ab_group_add) ab_group_add
  uminus_poly == uminus :: 'a poly => 'a poly
Found termination order: "(%p. length (snd p)) <*mlex*> {}"
instantiation
  poly :: (comm_semiring_0) comm_semiring_0
  times_poly == times :: 'a poly => 'a poly => 'a poly
instantiation
  poly :: (comm_semiring_1) comm_semiring_1
  one_poly == one_class.one :: 'a poly
instantiation
  poly :: (linordered_idom) linordered_idom
  sgn_poly == sgn :: 'a poly => 'a poly
  abs_poly == abs :: 'a poly => 'a poly
  less_eq_poly == less_eq :: 'a poly => 'a poly => bool
  less_poly == less :: 'a poly => 'a poly => bool
class euclidean_semiring_gcd = normalization_euclidean_semiring + Gcd +
  assumes "gcd_eucl": "normalization_euclidean_semiring_class.gcd = gcd"
    and "lcm_eucl": "normalization_euclidean_semiring_class.lcm = lcm"
  assumes "Gcd_eucl": "normalization_euclidean_semiring_class.Gcd = Gcd"
    and "Lcm_eucl": "normalization_euclidean_semiring_class.Lcm = Lcm"
Found termination order: "(%p. length (snd p)) <*mlex*> {}"
### theory "HOL-Algebra.Ideal"
### 2.201s elapsed time, 6.742s cpu time, 0.779s GC time
Loading theory "HOL-Algebra.RingHom" (required by "Draft.Bernoulli_FPSMoreTemplates" via "Draft.Bernoulli_FPS" via "HOL-Number_Theory.Number_Theory" via "HOL-Number_Theory.Residues" via "HOL-Algebra.Multiplicative_Group" via "HOL-Algebra.UnivPoly")
Proofs for inductive predicate(s) "algebraic_int"
  Proving monotonicity ...
instantiation
  poly :: (idom_divide) idom_divide
  divide_poly == divide :: 'a poly => 'a poly => 'a poly
locale ring_hom_ring
  fixes R :: "('a, 'b) ring_scheme"  (structure)
    and S :: "('c, 'd) ring_scheme"  (structure)
    and h :: "'a => 'c"
  assumes "ring_hom_ring R S h"
Found termination order:
  "(%p. size (snd (snd (snd (snd (snd p)))))) <*mlex*> {}"
Found termination order:
  "(%p. size (snd (snd (snd (snd (snd p)))))) <*mlex*> {}"
instantiation
  poly :: ({idom_divide,semidom_divide_unit_factor}) normalization_semidom
  normalize_poly == normalize :: 'a poly => 'a poly
  unit_factor_poly == unit_factor :: 'a poly => 'a poly
### theory "HOL-Algebra.RingHom"
### 0.967s elapsed time, 2.986s cpu time, 0.365s GC time
Loading theory "HOL-Algebra.UnivPoly" (required by "Draft.Bernoulli_FPSMoreTemplates" via "Draft.Bernoulli_FPS" via "HOL-Number_Theory.Number_Theory" via "HOL-Number_Theory.Residues" via "HOL-Algebra.Multiplicative_Group")
locale bound
  fixes z :: "'a"
    and n :: "nat"
    and f :: "nat => 'a"
  assumes "bound z n f"
locale Ring.ring
  fixes R :: "('a, 'b) ring_scheme"  (structure)
  assumes "ring R"
locale UP
  fixes R :: "('a, 'b) ring_scheme"  (structure)
    and P :: "('a, nat => 'a) up_ring"  (structure)
  defines "P == UP R"
locale UP_ring
  fixes R :: "('a, 'b) ring_scheme"  (structure)
    and P :: "('a, nat => 'a) up_ring"  (structure)
  assumes "UP_ring R"
  defines "P == UP R"
class field_unit_factor = field + unit_factor +
  assumes "unit_factor_field": "unit_factor = id"
locale UP_cring
  fixes R :: "('a, 'b) ring_scheme"  (structure)
    and P :: "('a, nat => 'a) up_ring"  (structure)
  assumes "UP_cring R"
  defines "P == UP R"
locale UP_domain
  fixes R :: "('a, 'b) ring_scheme"  (structure)
    and P :: "('a, nat => 'a) up_ring"  (structure)
  assumes "UP_domain R"
  defines "P == UP R"
locale UP
  fixes R :: "('a, 'b) ring_scheme"  (structure)
    and P :: "('a, nat => 'a) up_ring"  (structure)
  defines "P == UP R"
Proofs for inductive predicate(s) "eucl_rel_poly"
  Proving monotonicity ...
locale UP_ring
  fixes R :: "('a, 'b) ring_scheme"  (structure)
    and P :: "('a, nat => 'a) up_ring"  (structure)
  assumes "UP_ring R"
  defines "P == UP R"
instantiation
  poly :: (field) semidom_modulo
  modulo_poly == modulo :: 'a poly => 'a poly => 'a poly
locale UP_ring
  fixes R :: "('a, 'b) ring_scheme"  (structure)
    and P :: "('a, nat => 'a) up_ring"  (structure)
  assumes "UP_ring R"
  defines "P == UP R"
locale UP_ring
  fixes R :: "('a, 'b) ring_scheme"  (structure)
    and P :: "('a, nat => 'a) up_ring"  (structure)
  assumes "UP_ring R"
  defines "P == UP R"
Found termination order: "(%p. length (snd p)) <*mlex*> {}"
locale UP_cring
  fixes R :: "('a, 'b) ring_scheme"  (structure)
    and P :: "('a, nat => 'a) up_ring"  (structure)
  assumes "UP_cring R"
  defines "P == UP R"
locale UP_ring
  fixes R :: "('a, 'b) ring_scheme"  (structure)
    and P :: "('a, nat => 'a) up_ring"  (structure)
  assumes "UP_ring R"
  defines "P == UP R"
Found termination order: "(%p. size (snd (snd (snd (snd p))))) <*mlex*> {}"
Found termination order: "(%p. size (snd (snd (snd p)))) <*mlex*> {}"
Found termination order: "(%p. size (snd (snd (snd p)))) <*mlex*> {}"
locale UP_ring
  fixes R :: "('a, 'b) ring_scheme"  (structure)
    and P :: "('a, nat => 'a) up_ring"  (structure)
  assumes "UP_ring R"
  defines "P == UP R"
Found termination order: "(%p. size (snd (snd p))) <*mlex*> {}"
Found termination order: "(%p. size (snd (snd (snd (snd p))))) <*mlex*> {}"
locale UP_ring
  fixes R :: "('a, 'b) ring_scheme"  (structure)
    and P :: "('a, nat => 'a) up_ring"  (structure)
  assumes "UP_ring R"
  defines "P == UP R"
### theory "HOL-Computational_Algebra.Polynomial"
### 6.925s elapsed time, 21.218s cpu time, 2.230s GC time
Loading theory "HOL-Computational_Algebra.Fundamental_Theorem_Algebra" (required by "Draft.Bernoulli_FPSMoreTemplates" via "Draft.Bernoulli_FPS" via "HOL-Computational_Algebra.Computational_Algebra")
locale UP_ring
  fixes R :: "('a, 'b) ring_scheme"  (structure)
    and P :: "('a, nat => 'a) up_ring"  (structure)
  assumes "UP_ring R"
  defines "P == UP R"
### theory "HOL-Computational_Algebra.Fundamental_Theorem_Algebra"
### 0.391s elapsed time, 1.216s cpu time, 0.247s GC time
locale UP_domain
  fixes R :: "('a, 'b) ring_scheme"  (structure)
    and P :: "('a, nat => 'a) up_ring"  (structure)
  assumes "UP_domain R"
  defines "P == UP R"
locale UP_ring
  fixes R :: "('a, 'b) ring_scheme"  (structure)
    and P :: "('a, nat => 'a) up_ring"  (structure)
  assumes "UP_ring R"
  defines "P == UP R"
locale UP_domain
  fixes R :: "('a, 'b) ring_scheme"  (structure)
    and P :: "('a, nat => 'a) up_ring"  (structure)
  assumes "UP_domain R"
  defines "P == UP R"
locale UP_ring
  fixes R :: "('a, 'b) ring_scheme"  (structure)
    and P :: "('a, nat => 'a) up_ring"  (structure)
  assumes "UP_ring R"
  defines "P == UP R"
locale UP_domain
  fixes R :: "('a, 'b) ring_scheme"  (structure)
    and P :: "('a, nat => 'a) up_ring"  (structure)
  assumes "UP_domain R"
  defines "P == UP R"
locale Ring.ring
  fixes R :: "('a, 'b) ring_scheme"  (structure)
  assumes "ring R"
locale UP
  fixes R :: "('a, 'b) ring_scheme"  (structure)
    and P :: "('a, nat => 'a) up_ring"  (structure)
  defines "P == UP R"
locale UP_pre_univ_prop
  fixes R :: "('a, 'b) ring_scheme"  (structure)
    and S :: "('c, 'd) ring_scheme"  (structure)
    and h :: "'a => 'c"
    and P :: "('a, nat => 'a) up_ring"  (structure)
  assumes "UP_pre_univ_prop R S h"
  defines "P == UP R"
locale UP_univ_prop
  fixes R :: "('a, 'b) ring_scheme"  (structure)
    and S :: "('c, 'd) ring_scheme"  (structure)
    and h :: "'a => 'c"
    and P :: "('a, nat => 'a) up_ring"  (structure)
    and s :: "'c"
    and Eval :: "(nat => 'a) => 'c"
  assumes "UP_univ_prop R S h s"
  defines "P == UP R"
    and "Eval == eval R S h s"
locale UP_pre_univ_prop
  fixes R :: "('a, 'b) ring_scheme"  (structure)
    and S :: "('c, 'd) ring_scheme"  (structure)
    and h :: "'a => 'c"
    and P :: "('a, nat => 'a) up_ring"  (structure)
  assumes "UP_pre_univ_prop R S h"
  defines "P == UP R"
### theory "HOL-Computational_Algebra.Euclidean_Algorithm"
### 10.526s elapsed time, 29.358s cpu time, 3.355s GC time
Loading theory "HOL-Computational_Algebra.Normalized_Fraction" (required by "Draft.Bernoulli_FPSMoreTemplates" via "Draft.Bernoulli_FPS" via "HOL-Computational_Algebra.Computational_Algebra")
Loading theory "HOL-Computational_Algebra.Primes" (required by "Draft.Bernoulli_FPSMoreTemplates" via "Draft.Bernoulli_FPS" via "HOL-Computational_Algebra.Computational_Algebra" via "HOL-Computational_Algebra.Nth_Powers")
Loading theory "HOL-Computational_Algebra.Formal_Power_Series" (required by "Draft.Bernoulli_FPSMoreTemplates" via "Draft.Bernoulli_FPS" via "HOL-Computational_Algebra.Computational_Algebra" via "HOL-Computational_Algebra.Formal_Laurent_Series" via "HOL-Computational_Algebra.Polynomial_FPS")
### theory "HOL-Computational_Algebra.Primes"
### 1.619s elapsed time, 5.894s cpu time, 4.470s GC time
Loading theory "HOL-Computational_Algebra.Nth_Powers" (required by "Draft.Bernoulli_FPSMoreTemplates" via "Draft.Bernoulli_FPS" via "HOL-Computational_Algebra.Computational_Algebra")
locale fract_as_normalized_quot
### theory "HOL-Computational_Algebra.Nth_Powers"
### 0.305s elapsed time, 1.204s cpu time, 0.119s GC time
Loading theory "HOL-Computational_Algebra.Squarefree" (required by "Draft.Bernoulli_FPSMoreTemplates" via "Draft.Bernoulli_FPS" via "HOL-Computational_Algebra.Computational_Algebra")
### theory "HOL-Computational_Algebra.Normalized_Fraction"
### 1.960s elapsed time, 7.228s cpu time, 4.659s GC time
Loading theory "HOL-Number_Theory.Cong" (required by "Draft.Bernoulli_FPSMoreTemplates" via "Draft.Bernoulli_FPS" via "HOL-Number_Theory.Number_Theory" via "HOL-Number_Theory.Residues")
instantiation
  fps :: (zero) zero
  zero_fps == zero_class.zero :: 'a fps
instantiation
  fps :: ({one,zero}) one
  one_fps == one_class.one :: 'a fps
instantiation
  fps :: (plus) plus
  plus_fps == plus :: 'a fps => 'a fps => 'a fps
instantiation
  fps :: (minus) minus
  minus_fps == minus :: 'a fps => 'a fps => 'a fps
instantiation
  fps :: (uminus) uminus
  uminus_fps == uminus :: 'a fps => 'a fps
instantiation
  fps :: ({comm_monoid_add,times}) times
  times_fps == times :: 'a fps => 'a fps => 'a fps
### theory "HOL-Computational_Algebra.Squarefree"
### 0.275s elapsed time, 1.087s cpu time, 0.159s GC time
Loading theory "HOL-Number_Theory.Eratosthenes" (required by "Draft.Bernoulli_FPSMoreTemplates" via "Draft.Bernoulli_FPS" via "HOL-Number_Theory.Number_Theory")
class unique_euclidean_semiring = euclidean_semiring_cancel +
  fixes division_segment :: "'a => 'a"
  assumes
    "euclidean_size_mult":
      "!!a b. euclidean_size (a * b) = euclidean_size a * euclidean_size b"
  assumes "is_unit_division_segment": "!!a. is_unit (division_segment a)"
    and
    "division_segment_mult":
      "!!a b.
          [| a ~= (0::'a); b ~= (0::'a) |]
          ==> division_segment (a * b) =
              division_segment a * division_segment b"
    and
    "division_segment_mod":
      "!!b a.
          [| b ~= (0::'a); ~ b dvd a |]
          ==> division_segment (a mod b) = division_segment b"
  assumes
    "div_bounded":
      "!!b r q.
          [| b ~= (0::'a); division_segment r = division_segment b;
             euclidean_size r < euclidean_size b |]
          ==> (q * b + r) div b = q"
Found termination order: "(%p. length (snd p)) <*mlex*> {}"
### theory "HOL-Number_Theory.Eratosthenes"
### 0.356s elapsed time, 1.397s cpu time, 0.126s GC time
Loading theory "HOL-Computational_Algebra.Polynomial_Factorial" (required by "Draft.Bernoulli_FPSMoreTemplates" via "Draft.Bernoulli_FPS" via "HOL-Computational_Algebra.Computational_Algebra")
instantiation
  fps :: (zero) unit_factor
  unit_factor_fps == unit_factor :: 'a fps => 'a fps
instantiation
  fps :: ({minus,zero}) dist
  dist_fps == dist :: 'a fps => 'a fps => real
instantiation
  fps :: (group_add) metric_space
  uniformity_fps == uniformity :: ('a fps * 'a fps) filter
  open_fps == open :: 'a fps set => bool
Found termination order: "(%p. size (snd (snd p))) <*mlex*> {}"
locale UP_pre_univ_prop
  fixes R :: "('a, 'b) ring_scheme"  (structure)
    and S :: "('c, 'd) ring_scheme"  (structure)
    and h :: "'a => 'c"
    and P :: "('a, nat => 'a) up_ring"  (structure)
  assumes "UP_pre_univ_prop R S h"
  defines "P == UP R"
locale Group.monoid
  fixes G :: "('a, 'b) monoid_scheme"  (structure)
  assumes "Group.monoid G"
### theory "HOL-Number_Theory.Cong"
### 1.378s elapsed time, 5.434s cpu time, 0.626s GC time
Loading theory "HOL-Number_Theory.Mod_Exp" (required by "Draft.Bernoulli_FPSMoreTemplates" via "Draft.Bernoulli_FPS" via "HOL-Number_Theory.Number_Theory")
Found termination order: "(%p. size (snd (snd p))) <*mlex*> {}"
instantiation
  fps :: ({inverse,comm_monoid_add,times,uminus}) inverse
  inverse_fps == inverse :: 'a fps => 'a fps
  divide_fps == divide :: 'a fps => 'a fps => 'a fps
### Cannot skip proof of schematic goal statement
locale UP_ring
  fixes R :: "('a, 'b) ring_scheme"  (structure)
    and P :: "('a, nat => 'a) up_ring"  (structure)
  assumes "UP_ring R"
  defines "P == UP R"
class euclidean_semiring_cancel = euclidean_semiring +
  assumes
    "div_mult_self1":
      "!!b a c. b ~= (0::'a) ==> (a + c * b) div b = c + a div b"
    and
    "div_mult_mult1":
      "!!c a b. c ~= (0::'a) ==> c * a div (c * b) = a div b"
instantiation
  poly :: ({factorial_ring_gcd,semiring_gcd_mult_normalize})
    factorial_ring_gcd
  Gcd_poly == Gcd :: 'a poly set => 'a poly
  Lcm_poly == Lcm :: 'a poly set => 'a poly
  gcd_poly == gcd :: 'a poly => 'a poly => 'a poly
  lcm_poly == lcm :: 'a poly => 'a poly => 'a poly
locale UP_cring
  fixes R :: "('a, 'b) ring_scheme"  (structure)
    and P :: "('a, nat => 'a) up_ring"  (structure)
  assumes "UP_cring R"
  defines "P == UP R"
### theory "HOL-Number_Theory.Mod_Exp"
### 0.766s elapsed time, 3.016s cpu time, 0.355s GC time
Loading theory "HOL-Number_Theory.Prime_Powers" (required by "Draft.Bernoulli_FPSMoreTemplates" via "Draft.Bernoulli_FPS" via "HOL-Number_Theory.Number_Theory")
instantiation
  poly :: ({factorial_ring_gcd,field,semiring_gcd_mult_normalize})
    {normalization_euclidean_semiring,unique_euclidean_ring}
  division_segment_poly == division_segment :: 'a poly => 'a poly
  euclidean_size_poly == euclidean_size :: 'a poly => nat
instantiation
  fps :: ({inverse,uminus,comm_semiring_1}) modulo
  modulo_fps == modulo :: 'a fps => 'a fps => 'a fps
instantiation
  fps :: (field) normalization_semidom_multiplicative
  normalize_fps == normalize :: 'a fps => 'a fps
instantiation
  fps :: (field) euclidean_ring_cancel
  euclidean_size_fps == euclidean_size :: 'a fps => nat
instantiation
  fps :: (field) euclidean_ring_gcd
  Gcd_fps == Gcd :: 'a fps set => 'a fps
  Lcm_fps == Lcm :: 'a fps set => 'a fps
  gcd_fps == gcd :: 'a fps => 'a fps => 'a fps
  lcm_fps == lcm :: 'a fps => 'a fps => 'a fps
### theory "HOL-Computational_Algebra.Polynomial_Factorial"
### 1.754s elapsed time, 6.904s cpu time, 0.784s GC time
Loading theory "HOL-Number_Theory.Totient" (required by "Draft.Bernoulli_FPSMoreTemplates" via "Draft.Bernoulli_FPS" via "HOL-Number_Theory.Number_Theory" via "HOL-Number_Theory.Residues")
locale UP_cring
  fixes R :: "('a, 'b) ring_scheme"  (structure)
    and P :: "('a, nat => 'a) up_ring"  (structure)
  assumes "UP_cring R"
  defines "P == UP R"
Found termination order: "(%p. size (fst p)) <*mlex*> {}"
consts
  totient_naive :: "nat => nat => nat => nat"
### theory "HOL-Number_Theory.Totient"
### 0.733s elapsed time, 2.881s cpu time, 0.425s GC time
### theory "HOL-Number_Theory.Prime_Powers"
### 1.090s elapsed time, 4.249s cpu time, 0.609s GC time
Found termination order: "(%p. size (snd p)) <*mlex*> {}"
Found termination order: "(%p. size (snd (snd p))) <*mlex*> {}"
### theory "HOL-Algebra.UnivPoly"
### 12.379s elapsed time, 38.652s cpu time, 8.381s GC time
Loading theory "HOL-Algebra.Multiplicative_Group" (required by "Draft.Bernoulli_FPSMoreTemplates" via "Draft.Bernoulli_FPS" via "HOL-Number_Theory.Number_Theory" via "HOL-Number_Theory.Residues")
bundle fps_notation
### theory "HOL-Computational_Algebra.Formal_Power_Series"
### 5.969s elapsed time, 21.707s cpu time, 6.478s GC time
Loading theory "HOL-Computational_Algebra.Polynomial_FPS" (required by "Draft.Bernoulli_FPSMoreTemplates" via "Draft.Bernoulli_FPS" via "HOL-Computational_Algebra.Computational_Algebra" via "HOL-Computational_Algebra.Formal_Laurent_Series")
locale UP_ring
  fixes R :: "('a, 'b) ring_scheme"  (structure)
    and P :: "('a, nat => 'a) up_ring"  (structure)
  assumes "UP_ring R"
  defines "P == UP R"
signature POLY_FPS =
  sig
    val eq_conv: conv
    val eq_simproc: cterm -> thm option
    val reify_conv: conv
  end
structure Poly_Fps:
  sig
    val const_binop_conv: string -> conv -> cterm -> thm
    val eq_conv: cterm -> thm
    val eq_simproc: cterm -> thm option
    val reify_conv: conv
  end
consts
  prefix_length_aux :: "('a => bool) => nat => 'a list => nat"
### theory "HOL-Computational_Algebra.Polynomial_FPS"
### 0.445s elapsed time, 0.926s cpu time, 0.088s GC time
Loading theory "HOL-Computational_Algebra.Formal_Laurent_Series" (required by "Draft.Bernoulli_FPSMoreTemplates" via "Draft.Bernoulli_FPS" via "HOL-Computational_Algebra.Computational_Algebra")
locale UP_cring
  fixes R :: "('a, 'b) ring_scheme"  (structure)
    and P :: "('a, nat => 'a) up_ring"  (structure)
  assumes "UP_cring R"
  defines "P == UP R"
locale Group.group
  fixes G :: "('a, 'b) monoid_scheme"  (structure)
  assumes "Group.group G"
instantiation
  fls :: (zero) zero
  zero_fls == zero_class.zero :: 'a fls
instantiation
  fls :: ({one,zero}) one
  one_fls == one_class.one :: 'a fls
instantiation
  fls :: (monoid_add) plus
  plus_fls == plus :: 'a fls => 'a fls => 'a fls
instantiation
  fls :: (group_add) minus
  minus_fls == minus :: 'a fls => 'a fls => 'a fls
instantiation
  fls :: (group_add) uminus
  uminus_fls == uminus :: 'a fls => 'a fls
locale Ring.field
  fixes R :: "('a, 'b) ring_scheme"  (structure)
  assumes "field R"
instantiation
  fls :: ({comm_monoid_add,times}) times
  times_fls == times :: 'a fls => 'a fls => 'a fls
locale UP_cring
  fixes R :: "('a, 'b) ring_scheme"  (structure)
    and P :: "('a, nat => 'a) up_ring"  (structure)
  assumes "UP_cring R"
  defines "P == UP R"
instantiation
  fls :: ({inverse,comm_monoid_add,times,uminus}) inverse
  inverse_fls == inverse :: 'a fls => 'a fls
  divide_fls == divide :: 'a fls => 'a fls => 'a fls
locale UP_domain
  fixes R :: "('a, 'b) ring_scheme"  (structure)
    and P :: "('a, nat => 'a) up_ring"  (structure)
  assumes "UP_domain R"
  defines "P == UP R"
locale Ring.field
  fixes R :: "('a, 'b) ring_scheme"  (structure)
  assumes "field R"
### theory "HOL-Algebra.Multiplicative_Group"
### 2.342s elapsed time, 5.380s cpu time, 0.925s GC time
Loading theory "HOL-Number_Theory.Residues" (required by "Draft.Bernoulli_FPSMoreTemplates" via "Draft.Bernoulli_FPS" via "HOL-Number_Theory.Number_Theory")
instantiation
  fls :: (group_add) metric_space
  dist_fls == dist :: 'a fls => 'a fls => real
  uniformity_fls == uniformity :: ('a fls * 'a fls) filter
  open_fls == open :: 'a fls set => bool
locale residues
  fixes m :: "int"
    and R :: "int ring"  (structure)
  assumes "residues m"
  defines "R == residue_ring m"
bundle fls_notation
### theory "HOL-Computational_Algebra.Formal_Laurent_Series"
### 3.156s elapsed time, 8.645s cpu time, 5.228s GC time
Loading theory "HOL-Computational_Algebra.Computational_Algebra" (required by "Draft.Bernoulli_FPSMoreTemplates" via "Draft.Bernoulli_FPS")
locale residues
  fixes m :: "int"
    and R :: "int ring"  (structure)
  assumes "residues m"
  defines "R == residue_ring m"
locale residues_prime
  fixes p :: "nat"
    and R :: "int ring"  (structure)
  assumes "residues_prime p"
  defines "R == residue_ring (int p)"
locale residues_prime
  fixes p :: "nat"
    and R :: "int ring"  (structure)
  assumes "residues_prime p"
  defines "R == residue_ring (int p)"
### theory "HOL-Number_Theory.Residues"
### 2.787s elapsed time, 7.747s cpu time, 4.821s GC time
Loading theory "HOL-Number_Theory.Euler_Criterion" (required by "Draft.Bernoulli_FPSMoreTemplates" via "Draft.Bernoulli_FPS" via "HOL-Number_Theory.Number_Theory" via "HOL-Number_Theory.Quadratic_Reciprocity" via "HOL-Number_Theory.Gauss")
Loading theory "HOL-Number_Theory.Pocklington" (required by "Draft.Bernoulli_FPSMoreTemplates" via "Draft.Bernoulli_FPS" via "HOL-Number_Theory.Number_Theory")
### theory "HOL-Number_Theory.Euler_Criterion"
### 0.130s elapsed time, 0.395s cpu time, 0.056s GC time
Loading theory "HOL-Number_Theory.Gauss" (required by "Draft.Bernoulli_FPSMoreTemplates" via "Draft.Bernoulli_FPS" via "HOL-Number_Theory.Number_Theory" via "HOL-Number_Theory.Quadratic_Reciprocity")
### theory "HOL-Computational_Algebra.Computational_Algebra"
### 1.101s elapsed time, 2.410s cpu time, 0.173s GC time
locale GAUSS
  fixes p :: "nat"
    and a :: "int"
  assumes "GAUSS p a"
### theory "HOL-Number_Theory.Pocklington"
### 0.286s elapsed time, 0.754s cpu time, 0.152s GC time
Loading theory "HOL-Number_Theory.Residue_Primitive_Roots" (required by "Draft.Bernoulli_FPSMoreTemplates" via "Draft.Bernoulli_FPS" via "HOL-Number_Theory.Number_Theory")
### theory "HOL-Number_Theory.Gauss"
### 0.191s elapsed time, 0.439s cpu time, 0.096s GC time
Loading theory "HOL-Number_Theory.Quadratic_Reciprocity" (required by "Draft.Bernoulli_FPSMoreTemplates" via "Draft.Bernoulli_FPS" via "HOL-Number_Theory.Number_Theory")
Proofs for inductive predicate(s) "residue_primroot"
  Proving monotonicity ...
locale QR
  fixes p :: "nat"
    and q :: "nat"
  assumes "QR p q"
### theory "HOL-Number_Theory.Residue_Primitive_Roots"
### 0.241s elapsed time, 0.517s cpu time, 0.076s GC time
### theory "HOL-Number_Theory.Quadratic_Reciprocity"
### 0.291s elapsed time, 0.555s cpu time, 0.076s GC time
Loading theory "HOL-Number_Theory.Number_Theory" (required by "Draft.Bernoulli_FPSMoreTemplates" via "Draft.Bernoulli_FPS")
### theory "HOL-Number_Theory.Number_Theory"
### 1.017s elapsed time, 1.092s cpu time, 0.102s GC time
Loading theory "Draft.Bernoulli_FPS" (required by "Draft.Bernoulli_FPSMoreTemplates")
class factorial_semiring = normalization_semidom +
  assumes
    "prime_factorization_exists":
      "!!x. x ~= (0::'a) ==>
            EX A. (ALL x. x :# A --> prime_elem x) &
                  normalize (\<Prod>\<^sub># A) = normalize x"
class semiring_gcd = gcd + normalization_semidom +
  assumes "gcd_dvd1": "!!a b. gcd a b dvd a"
    and "gcd_dvd2": "!!a b. gcd a b dvd b"
    and "gcd_greatest": "!!c a b. [| c dvd a; c dvd b |] ==> c dvd gcd a b"
    and "normalize_gcd": "!!a b. normalize (gcd a b) = gcd a b"
    and "lcm_gcd": "!!a b. lcm a b = normalize (a * b div gcd a b)"
Found termination order: "(%p. size (fst (snd p))) <*mlex*> {}"
Found termination order: "(%p. length (snd p)) <*mlex*> {}"
### theory "Draft.Bernoulli_FPS"
### 1.677s elapsed time, 1.821s cpu time, 0.199s GC time
Loading theory "Draft.Bernoulli_FPSMoreTemplates"
val templateLemmas =
   [("Bernoulli_FPS.squarefree_bernoulli_denom",
     "squarefree (bernoulli_denom ?n)",
     template_predicate
      (
         template_app
          (template_hole 1, template_app (template_hole 0, template_var 0))
         )),
    ("Bernoulli_FPS.bernoulli_denom_pos", "0 < bernoulli_denom ?n",
     template_inequation
      (less_than, template_hole 1,
       template_app (template_hole 0, template_var 0))),
    ("Bernoulli_FPS.bernoulli_denom_nonzero", "bernoulli_denom ?n ~= 0",
     template_negation
      (
         template_equation
          (template_app (template_hole 1, template_var 0), template_hole 0)
         )),
    ("Bernoulli_FPS.gen_akiyama_tanigawa_0",
     "gen_akiyama_tanigawa ?f 0 = ?f",
     template_equation
      (template_app
        (template_app (template_hole 1, template_var 0), template_hole 0),
       template_var 0)),
    ("Bernoulli_FPS.fps_XD'_1", "fps_XD' ?a 1 = 0",
     template_equation
      (template_app
        (template_app (template_hole 2, template_var 0), template_hole 1),
       template_hole 0)),
    ("Bernoulli_FPS.fps_XD'_0", "fps_XD' ?a 0 = 0",
     template_equation
      (template_app
        (template_app (template_hole 1, template_var 0), template_hole 0),
       template_hole 0)),
    ("Bernoulli_FPS.bernoulli'_conv_akiyama_tanigawa",
     "bernoulli' ?n = akiyama_tanigawa ?n 0",
     template_equation
      (template_app (template_hole 2, template_var 0),
       template_app
        (template_app (template_hole 1, template_var 0), template_hole 0))),
    ("Bernoulli_FPS.bernoulli_odd_numeral_eq_0",
     "bernoulli (numeral (num.Bit1 ?n)) = 0",
     template_equation
      (template_app
        (template_hole 3,
         template_app
          (template_hole 2,
           template_app (template_hole 1, template_var 0))),
       template_hole 0)),
    ("Bernoulli_FPS.bernoulli'_odd_numeral_eq_0",
     "bernoulli' (numeral (num.Bit1 ?n)) = 0",
     template_equation
      (template_app
        (template_hole 3,
         template_app
          (template_hole 2,
           template_app (template_hole 1, template_var 0))),
       template_hole 0)),
    ("Bernoulli_FPS.fps_XD'_fps_of_int", "fps_XD' ?a (of_int ?b) = 0",
     template_equation
      (template_app
        (template_app (template_hole 2, template_var 1),
         template_app (template_hole 1, template_var 0)),
       template_hole 0)),
    ("Bernoulli_FPS.fps_XD'_fps_const", "fps_XD' ?a (fps_const ?b) = 0",
     template_equation
      (template_app
        (template_app (template_hole 2, template_var 1),
         template_app (template_hole 1, template_var 0)),
       template_hole 0)),
    ("Bernoulli_FPS.fps_XD'_fps_of_nat", "fps_XD' ?a (of_nat ?b) = 0",
     template_equation
      (template_app
        (template_app (template_hole 2, template_var 1),
         template_app (template_hole 1, template_var 0)),
       template_hole 0)),
    ("Bernoulli_FPS.fps_XD'_fps_numeral", "fps_XD' ?a (numeral ?b) = 0",
     template_equation
      (template_app
        (template_app (template_hole 2, template_var 1),
         template_app (template_hole 1, template_var 0)),
       template_hole 0)),
    ("Bernoulli_FPS.coprime_bernoulli_num_denom",
     "coprime (bernoulli_num ?n) (int (bernoulli_denom ?n))",
     template_predicate
      (
         template_app
          (template_app
            (template_hole 3,
             template_app (template_hole 2, template_var 0)),
           template_app
            (template_hole 1,
             template_app (template_hole 0, template_var 0)))
         )),
    ("Bernoulli_FPS.length_akiyama_tanigawa_step_aux",
     "length (akiyama_tanigawa_step_aux ?m ?xs) = length ?xs - 1",
     template_equation
      (template_app
        (template_hole 3,
         template_app
          (template_app (template_hole 2, template_var 1), template_var 0)),
       template_app
        (template_app
          (template_hole 1, template_app (template_hole 3, template_var 0)),
         template_hole 0))),
    ("Bernoulli_FPS.length_akiyama_tanigawa_row",
     "length (akiyama_tanigawa_row ?n ?l ?u) = ?u - ?l",
     template_equation
      (template_app
        (template_hole 2,
         template_app
          (template_app
            (template_app (template_hole 1, template_var 2),
             template_var 1),
           template_var 0)),
       template_app
        (template_app (template_hole 0, template_var 0), template_var 1))),
    ("Bernoulli_FPS.eval_bernpoly",
     "fact (numeral ?k) = numeral ?k * fact (pred_numeral ?k)",
     template_equation
      (template_app
        (template_hole 4, template_app (template_hole 3, template_var 0)),
       template_app
        (template_app
          (template_hole 2, template_app (template_hole 1, template_var 0)),
         template_app
          (template_hole 4,
           template_app (template_hole 0, template_var 0))))),
    ("Bernoulli_FPS.fps_nth_bernoulli'_fps",
     "bernoulli'_fps $ ?n = of_real (bernoulli' ?n) / fact ?n",
     template_equation
      (template_app
        (template_app (template_hole 5, template_hole 4), template_var 0),
       template_app
        (template_app
          (template_hole 3,
           template_app
            (template_hole 2,
             template_app (template_hole 1, template_var 0))),
         template_app (template_hole 0, template_var 0)))),
    ("Bernoulli_FPS.fps_nth_bernoulli_fps",
     "bernoulli_fps $ ?n = of_real (bernoulli ?n) / fact ?n",
     template_equation
      (template_app
        (template_app (template_hole 5, template_hole 4), template_var 0),
       template_app
        (template_app
          (template_hole 3,
           template_app
            (template_hole 2,
             template_app (template_hole 1, template_var 0))),
         template_app (template_hole 0, template_var 0)))),
    ("Bernoulli_FPS.Stirling_n_0",
     "Stirling ?n 0 = (if ?n = 0 then 1 else 0)",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 3, template_var 0),
              template_hole 2)
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_app
                (template_hole 1,
                 template_app
                  (template_app (template_hole 4, template_var 0),
                   template_hole 2)),
               template_hole 0),
             template_hole 2)
           ))),
    ("Bernoulli_FPS.length_gen_akiyama_tanigawa_row",
     "length (gen_akiyama_tanigawa_row ?f ?n ?l ?u) = ?u - ?l",
     template_equation
      (template_app
        (template_hole 2,
         template_app
          (template_app
            (template_app
              (template_app (template_hole 1, template_var 3),
               template_var 2),
             template_var 1),
           template_var 0)),
       template_app
        (template_app (template_hole 0, template_var 0), template_var 1))),
    ("Bernoulli_FPS.eval_bernpoly",
     "{..numeral ?k} = insert (numeral ?k) {..pred_numeral ?k}",
     template_equation
      (template_app
        (template_hole 3, template_app (template_hole 2, template_var 0)),
       template_app
        (template_app
          (template_hole 1, template_app (template_hole 2, template_var 0)),
         template_app
          (template_hole 3,
           template_app (template_hole 0, template_var 0))))),
    ("Bernoulli_FPS.akiyama_tanigawa_row_eq_Nil_iff",
     "(akiyama_tanigawa_row ?n ?l ?u = []) = (?u <= ?l)",
     template_equation
      (template_app
        (template_app
          (template_hole 3,
           template_app
            (template_app
              (template_app (template_hole 2, template_var 2),
               template_var 1),
             template_var 0)),
         template_hole 1),
       template_app
        (template_app (template_hole 0, template_var 0), template_var 1))),
    ("Bernoulli_FPS.bernoulli_conv_num_denom",
     "bernoulli ?n =
      real_of_int (bernoulli_num ?n) / real (bernoulli_denom ?n)",
     template_equation
      (template_app (template_hole 5, template_var 0),
       template_app
        (template_app
          (template_hole 4,
           template_app
            (template_hole 3,
             template_app (template_hole 2, template_var 0))),
         template_app
          (template_hole 1,
           template_app (template_hole 0, template_var 0))))),
    ("Bernoulli_FPS.akiyama_tanigawa_code",
     "akiyama_tanigawa ?n ?k = hd (akiyama_tanigawa_row ?n ?k (Suc ?k))",
     template_equation
      (template_app
        (template_app (template_hole 3, template_var 1), template_var 0),
       template_app
        (template_hole 2,
         template_app
          (template_app
            (template_app (template_hole 1, template_var 1),
             template_var 0),
           template_app (template_hole 0, template_var 0))))),
    ("Bernoulli_FPS.gen_akiyama_tanigawa_row_eq_Nil_iff",
     "(gen_akiyama_tanigawa_row ?f ?n ?l ?u = []) = (?u <= ?l)",
     template_equation
      (template_app
        (template_app
          (template_hole 3,
           template_app
            (template_app
              (template_app
                (template_app (template_hole 2, template_var 3),
                 template_var 2),
               template_var 1),
             template_var 0)),
         template_hole 1),
       template_app
        (template_app (template_hole 0, template_var 0), template_var 1))),
    ("Bernoulli_FPS.gen_akiyama_tanigawa_row_0",
     "gen_akiyama_tanigawa_row ?f 0 ?l ?u = map ?f [?l..<?u]",
     template_equation
      (template_app
        (template_app
          (template_app
            (template_app (template_hole 3, template_var 2),
             template_hole 2),
           template_var 1),
         template_var 0),
       template_app
        (template_app (template_hole 1, template_var 2),
         template_app
          (template_app (template_hole 0, template_var 1),
           template_var 0)))),
    ("Bernoulli_FPS.akiyama_tanigawa_step_aux_eq_Nil_iff",
     "(akiyama_tanigawa_step_aux ?m ?xs = []) = (length ?xs < 2)",
     template_equation
      (template_app
        (template_app
          (template_hole 7,
           template_app
            (template_app (template_hole 6, template_var 1),
             template_var 0)),
         template_hole 5),
       template_app
        (template_app
          (template_hole 4, template_app (template_hole 3, template_var 0)),
         template_app
          (template_hole 2,
           template_app (template_hole 1, template_hole 0))))),
    ("Bernoulli_FPS.gen_akiyama_tanigawa_code",
     "gen_akiyama_tanigawa ?f ?n ?k =
      hd (gen_akiyama_tanigawa_row ?f ?n ?k (Suc ?k))",
     template_equation
      (template_app
        (template_app
          (template_app (template_hole 3, template_var 2), template_var 1),
         template_var 0),
       template_app
        (template_hole 2,
         template_app
          (template_app
            (template_app
              (template_app (template_hole 1, template_var 2),
               template_var 1),
             template_var 0),
           template_app (template_hole 0, template_var 0))))),
    ("Bernoulli_FPS.Stirling_fps_nth",
     "Stirling_fps ?m $ ?n = real (Stirling ?n ?m) / fact ?n",
     template_equation
      (template_app
        (template_app
          (template_hole 5, template_app (template_hole 4, template_var 1)),
         template_var 0),
       template_app
        (template_app
          (template_hole 3,
           template_app
            (template_hole 2,
             template_app
              (template_app (template_hole 1, template_var 0),
               template_var 1))),
         template_app (template_hole 0, template_var 0)))),
    ("Bernoulli_FPS.Stirling_fps_altdef",
     "Stirling_fps ?m = Abs_fps (%n. real (Stirling n ?m) / fact n)",
     template_equation
      (template_app (template_hole 5, template_var 0),
       template_app (template_hole 4, t_empty))),
    ("Bernoulli_FPS.Ints_real_of_nat_divide",
     "?b dvd ?a ==> real ?a / real ?b : \<int>",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 4, template_var 1),
              template_var 0)
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 3,
               template_app
                (template_app
                  (template_hole 2,
                   template_app (template_hole 1, template_var 0)),
                 template_app (template_hole 1, template_var 1))),
             template_hole 0)
           ))),
    ("Bernoulli_FPS.bernoulli_conv_akiyama_tanigawa",
     "bernoulli ?n = akiyama_tanigawa ?n 0 - (if ?n = 1 then 1 else 0)",
     template_implication
      ([template_predicate
         (template_app (template_hole 8, template_var 0))],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 7,
               template_app
                (template_app (template_hole 6, template_var 0),
                 template_hole 5)),
             template_app
              (template_app
                (template_app
                  (template_hole 4,
                   template_app
                    (template_app (template_hole 3, template_var 0),
                     template_hole 2)),
                 template_hole 1),
               template_hole 0))
           ))),
    ("Bernoulli_FPS.fps_XD'_minus",
     "fps_XD' ?a (?b - ?c) = fps_XD' ?a ?b - fps_XD' ?a ?c",
     template_equation
      (template_app
        (template_app (template_hole 1, template_var 2),
         template_app
          (template_app (template_hole 0, template_var 1), template_var 0)),
       template_app
        (template_app
          (template_hole 0,
           template_app
            (template_app (template_hole 1, template_var 2),
             template_var 1)),
         template_app
          (template_app (template_hole 1, template_var 2),
           template_var 0)))),
    ("Bernoulli_FPS.fps_XD'_add",
     "fps_XD' ?a (?b + ?c) = fps_XD' ?a ?b + fps_XD' ?a ?c",
     template_equation
      (template_app
        (template_app (template_hole 1, template_var 2),
         template_app
          (template_app (template_hole 0, template_var 1), template_var 0)),
       template_app
        (template_app
          (template_hole 0,
           template_app
            (template_app (template_hole 1, template_var 2),
             template_var 1)),
         template_app
          (template_app (template_hole 1, template_var 2),
           template_var 0)))),
    ("Bernoulli_FPS.fps_XD'_sum",
     "fps_XD' ?a (sum ?f ?A) = (SUM x:?A. fps_XD' ?a (?f x))",
     template_equation
      (template_app
        (template_app (template_hole 1, template_var 2),
         template_app
          (template_app (template_hole 0, template_var 1), template_var 0)),
       template_app
        (template_app (template_hole 0, t_empty), template_var 0))),
    ("Bernoulli_FPS.AT_fps_Suc",
     "??.Bernoulli_FPS.AT_fps ?f (Suc ?n) =
      (fps_X - 1) * fps_deriv (??.Bernoulli_FPS.AT_fps ?f ?n)",
     template_equation
      (template_app
        (template_app (template_hole 6, template_var 1),
         template_app (template_hole 5, template_var 0)),
       template_app
        (template_app
          (template_hole 4,
           template_app
            (template_app (template_hole 3, template_hole 2),
             template_hole 1)),
         template_app
          (template_hole 0,
           template_app
            (template_app (template_hole 6, template_var 1),
             template_var 0))))),
    ("Bernoulli_FPS.cong_int",
     "[?a = ?b] (mod ?m) ==> [int ?a = int ?b] (mod int ?m)",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app (template_hole 2, template_var 2),
                template_var 1),
              template_var 0)
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_app
                (template_hole 1,
                 template_app (template_hole 0, template_var 2)),
               template_app (template_hole 0, template_var 1)),
             template_app (template_hole 0, template_var 0))
           ))),
    ("Bernoulli_FPS.akiyama_tanigawa_row_0",
     "akiyama_tanigawa_row 0 ?l ?u =
      map (%n. inverse (real (Suc n))) [?l..<?u]",
     template_equation
      (template_app
        (template_app
          (template_app (template_hole 6, template_hole 5), template_var 1),
         template_var 0),
       template_app
        (template_app (template_hole 4, t_empty),
         template_app
          (template_app (template_hole 0, template_var 1),
           template_var 0)))),
    ("Bernoulli_FPS.akiyama_tanigawa_row_Suc",
     "akiyama_tanigawa_row (Suc ?n) ?l ?u =
      akiyama_tanigawa_step_aux (Suc ?l)
       (akiyama_tanigawa_row ?n ?l (Suc ?u))",
     template_equation
      (template_app
        (template_app
          (template_app
            (template_hole 2,
             template_app (template_hole 1, template_var 2)),
           template_var 1),
         template_var 0),
       template_app
        (template_app
          (template_hole 0, template_app (template_hole 1, template_var 1)),
         template_app
          (template_app
            (template_app (template_hole 2, template_var 2),
             template_var 1),
           template_app (template_hole 1, template_var 0))))),
    ("Bernoulli_FPS.bernoulli_denom_dvd",
     "bernoulli_denom ?n dvd 2 * (2 ^ ?n - 1)",
     template_predicate
      (
         template_app
          (template_app
            (template_hole 8,
             template_app (template_hole 7, template_var 0)),
           template_app
            (template_app
              (template_hole 6,
               template_app
                (template_hole 5,
                 template_app (template_hole 4, template_hole 3))),
             template_app
              (template_app
                (template_hole 2,
                 template_app
                  (template_app
                    (template_hole 1,
                     template_app
                      (template_hole 5,
                       template_app (template_hole 4, template_hole 3))),
                   template_var 0)),
               template_hole 0)))
         )),
    ("Bernoulli_FPS.akiyama_tanigawa_row_numeral",
     "akiyama_tanigawa_row (numeral ?n) ?l ?u =
      akiyama_tanigawa_step_aux (Suc ?l)
       (akiyama_tanigawa_row (pred_numeral ?n) ?l (Suc ?u))",
     template_equation
      (template_app
        (template_app
          (template_app
            (template_hole 4,
             template_app (template_hole 3, template_var 2)),
           template_var 1),
         template_var 0),
       template_app
        (template_app
          (template_hole 2, template_app (template_hole 1, template_var 1)),
         template_app
          (template_app
            (template_app
              (template_hole 4,
               template_app (template_hole 0, template_var 2)),
             template_var 1),
           template_app (template_hole 1, template_var 0))))),
    ("Bernoulli_FPS.eval_bernpoly",
     "?i < ?j ==> [?i..<?j] = ?i # [Suc ?i..<?j]",
     template_implication
      ([template_inequation (less_than, template_var 1, template_var 0)],
       template_equation
        (template_app
          (template_app (template_hole 2, template_var 1), template_var 0),
         template_app
          (template_app (template_hole 1, template_var 1),
           template_app
            (template_app
              (template_hole 2,
               template_app (template_hole 0, template_var 1)),
             template_var 0))))),
    ("Bernoulli_FPS.eval_bernpoly",
     "?p ^ ?m = (if ?m = 0 then 1::?'a else ?p * ?p ^ (?m - 1))",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 7, template_var 1),
              template_var 0)
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_app
                (template_hole 6,
                 template_app
                  (template_app (template_hole 5, template_var 0),
                   template_hole 4)),
               template_hole 3),
             template_app
              (template_app (template_hole 2, template_var 1),
               template_app
                (template_app (template_hole 7, template_var 1),
                 template_app
                  (template_app (template_hole 1, template_var 0),
                   template_hole 0))))
           ))),
    ("Bernoulli_FPS.gen_akiyama_tanigawa_row_Suc",
     "gen_akiyama_tanigawa_row ?f (Suc ?n) ?l ?u =
      akiyama_tanigawa_step_aux (Suc ?l)
       (gen_akiyama_tanigawa_row ?f ?n ?l (Suc ?u))",
     template_equation
      (template_app
        (template_app
          (template_app
            (template_app (template_hole 2, template_var 3),
             template_app (template_hole 1, template_var 2)),
           template_var 1),
         template_var 0),
       template_app
        (template_app
          (template_hole 0, template_app (template_hole 1, template_var 1)),
         template_app
          (template_app
            (template_app
              (template_app (template_hole 2, template_var 3),
               template_var 2),
             template_var 1),
           template_app (template_hole 1, template_var 0))))),
    ("Bernoulli_FPS.finite_bernoulli_denom_set",
     "0 < ?n ==> finite {p. prime p & p - 1 dvd ?n}",
     template_implication
      ([template_inequation (less_than, template_hole 7, template_var 0)],
       template_predicate
        (
           template_app
            (template_hole 6, template_app (template_hole 5, t_empty))
           ))),
    ("Bernoulli_FPS.gen_akiyama_tanigawa_row_numeral",
     "gen_akiyama_tanigawa_row ?f (numeral ?n) ?l ?u =
      akiyama_tanigawa_step_aux (Suc ?l)
       (gen_akiyama_tanigawa_row ?f (pred_numeral ?n) ?l (Suc ?u))",
     template_equation
      (template_app
        (template_app
          (template_app
            (template_app (template_hole 4, template_var 3),
             template_app (template_hole 3, template_var 2)),
           template_var 1),
         template_var 0),
       template_app
        (template_app
          (template_hole 2, template_app (template_hole 1, template_var 1)),
         template_app
          (template_app
            (template_app
              (template_app (template_hole 4, template_var 3),
               template_app (template_hole 0, template_var 2)),
             template_var 1),
           template_app (template_hole 1, template_var 0))))),
    ("Bernoulli_FPS.fps_XD'_prod",
     "fps_XD' ?a (?b * ?c) = fps_XD' ?a ?b * ?c + ?b * fps_XD' ?a ?c",
     template_equation
      (template_app
        (template_app (template_hole 2, template_var 2),
         template_app
          (template_app (template_hole 1, template_var 1), template_var 0)),
       template_app
        (template_app
          (template_hole 0,
           template_app
            (template_app
              (template_hole 1,
               template_app
                (template_app (template_hole 2, template_var 2),
                 template_var 1)),
             template_var 0)),
         template_app
          (template_app (template_hole 1, template_var 1),
           template_app
            (template_app (template_hole 2, template_var 2),
             template_var 0))))),
    ("Bernoulli_FPS.sum_Stirling_binomial",
     "Stirling (Suc ?n) (Suc ?m) =
      (SUM i = 0..?n. Stirling i ?m * (?n choose i))",
     template_equation
      (template_app
        (template_app
          (template_hole 6, template_app (template_hole 5, template_var 1)),
         template_app (template_hole 5, template_var 0)),
       template_app
        (template_app (template_hole 4, t_empty),
         template_app
          (template_app (template_hole 1, template_hole 0),
           template_var 1)))),
    ("Bernoulli_FPS.fps_XD'_power",
     "fps_XD' ?a (?b ^ ?n) = of_nat ?n * ?b ^ (?n - 1) * fps_XD' ?a ?b",
     template_equation
      (template_app
        (template_app (template_hole 5, template_var 2),
         template_app
          (template_app (template_hole 4, template_var 1), template_var 0)),
       template_app
        (template_app
          (template_hole 3,
           template_app
            (template_app
              (template_hole 3,
               template_app (template_hole 2, template_var 0)),
             template_app
              (template_app (template_hole 4, template_var 1),
               template_app
                (template_app (template_hole 1, template_var 0),
                 template_hole 0)))),
         template_app
          (template_app (template_hole 5, template_var 2),
           template_var 1)))),
    ("Bernoulli_FPS.fps_XD'_power_Suc",
     "fps_XD' ?a (?b ^ Suc ?n) = of_nat (Suc ?n) * ?b ^ ?n * fps_XD' ?a ?b",
     template_equation
      (template_app
        (template_app (template_hole 4, template_var 2),
         template_app
          (template_app (template_hole 3, template_var 1),
           template_app (template_hole 2, template_var 0))),
       template_app
        (template_app
          (template_hole 1,
           template_app
            (template_app
              (template_hole 1,
               template_app
                (template_hole 0,
                 template_app (template_hole 2, template_var 0))),
             template_app
              (template_app (template_hole 3, template_var 1),
               template_var 0))),
         template_app
          (template_app (template_hole 4, template_var 2),
           template_var 1)))),
    ("Bernoulli_FPS.sum_in_Ints",
     "(!!x. x : ?A ==> ?f x : \<int>) ==> sum ?f ?A : \<int>",
     template_implication
      ([template_predicate (template_app (template_hole 5, t_empty))],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 2,
               template_app
                (template_app (template_hole 0, template_var 0),
                 template_var 1)),
             template_hole 1)
           ))),
    ("Bernoulli_FPS.bernoulli_denom_odd",
     "[| ?n ~= 1; odd ?n |] ==> bernoulli_denom ?n = 1",
     template_implication
      ([template_negation
         (template_equation (template_var 0, template_hole 5)),
        template_negation
         (
            template_predicate
             (
                template_app
                 (template_app
                   (template_hole 4,
                    template_app
                     (template_hole 3,
                      template_app (template_hole 2, template_hole 1))),
                  template_var 0)
                )
            )],
       template_equation
        (template_app (template_hole 0, template_var 0), template_hole 5))),
    ("Bernoulli_FPS.bernoulli_odd_eq_0",
     "[| ?n ~= 1; odd ?n |] ==> bernoulli ?n = 0",
     template_implication
      ([template_negation
         (template_equation (template_var 0, template_hole 7)),
        template_negation
         (
            template_predicate
             (
                template_app
                 (template_app
                   (template_hole 6,
                    template_app
                     (template_hole 5,
                      template_app (template_hole 4, template_hole 3))),
                  template_var 0)
                )
            )],
       template_equation
        (template_app (template_hole 1, template_var 0), template_hole 0))),
    ("Bernoulli_FPS.bernoulli'_odd_eq_0",
     "[| ?n ~= 1; odd ?n |] ==> bernoulli' ?n = 0",
     template_implication
      ([template_negation
         (template_equation (template_var 0, template_hole 7)),
        template_negation
         (
            template_predicate
             (
                template_app
                 (template_app
                   (template_hole 6,
                    template_app
                     (template_hole 5,
                      template_app (template_hole 4, template_hole 3))),
                  template_var 0)
                )
            )],
       template_equation
        (template_app (template_hole 1, template_var 0), template_hole 0))),
    ("Bernoulli_FPS.Stirling_fps_aux",
     "(fps_exp 1 - 1) ^ ?m $ ?n * fact ?n =
      fact ?m * real (Stirling ?n ?m)",
     template_equation
      (template_app
        (template_app
          (template_hole 9,
           template_app
            (template_app
              (template_hole 8,
               template_app
                (template_app
                  (template_hole 7,
                   template_app
                    (template_app
                      (template_hole 6,
                       template_app (template_hole 5, template_hole 4)),
                     template_hole 3)),
                 template_var 1)),
             template_var 0)),
         template_app (template_hole 2, template_var 0)),
       template_app
        (template_app
          (template_hole 9, template_app (template_hole 2, template_var 1)),
         template_app
          (template_hole 1,
           template_app
            (template_app (template_hole 0, template_var 0),
             template_var 1))))),
    ("Bernoulli_FPS.bernoulli_bound",
     "0 < ?n ==> bernoulli_denom ?n <= 2 * (2 ^ ?n - 1)",
     template_implication
      ([template_inequation (less_than, template_hole 9, template_var 0)],
       template_inequation
        (less_equals, template_app (template_hole 7, template_var 0),
         template_app
          (template_app
            (template_hole 6,
             template_app
              (template_hole 5,
               template_app (template_hole 4, template_hole 3))),
           template_app
            (template_app
              (template_hole 2,
               template_app
                (template_app
                  (template_hole 1,
                   template_app
                    (template_hole 5,
                     template_app (template_hole 4, template_hole 3))),
                 template_var 0)),
             template_hole 0))))),
    ("Bernoulli_FPS.nth_akiyama_tanigawa_row",
     "?i < ?u - ?l ==>
      akiyama_tanigawa_row ?n ?l ?u ! ?i = akiyama_tanigawa ?n (?i + ?l)",
     template_implication
      ([template_inequation
         (less_than, template_var 3,
          template_app
           (template_app (template_hole 5, template_var 2),
            template_var 1))],
       template_equation
        (template_app
          (template_app
            (template_hole 3,
             template_app
              (template_app
                (template_app (template_hole 2, template_var 0),
                 template_var 1),
               template_var 2)),
           template_var 3),
         template_app
          (template_app (template_hole 1, template_var 0),
           template_app
            (template_app (template_hole 0, template_var 3),
             template_var 1))))),
    ("Bernoulli_FPS.six_divides_bernoulli_denom",
     "[| even ?n; 0 < ?n |] ==> 6 dvd bernoulli_denom ?n",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_hole 7,
                template_app
                 (template_hole 6,
                  template_app (template_hole 5, template_hole 4))),
              template_var 0)
            ),
        template_inequation (less_than, template_hole 2, template_var 0)],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 7,
               template_app
                (template_hole 6,
                 template_app
                  (template_hole 5,
                   template_app (template_hole 1, template_hole 4)))),
             template_app (template_hole 0, template_var 0))
           ))),
    ("Bernoulli_FPS.AT_fps_0_nth",
     "??.Bernoulli_FPS.AT_fps ?f 0 $ ?n =
      (if ?n = 0 then - ?f 0 else ?f (?n - 1) - ?f ?n)",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_hole 8,
                template_app
                 (template_app (template_hole 7, template_var 1),
                  template_hole 6)),
              template_var 0)
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_app
                (template_hole 5,
                 template_app
                  (template_app (template_hole 4, template_var 0),
                   template_hole 6)),
               template_app
                (template_hole 3,
                 template_app (template_var 1, template_hole 6))),
             template_app
              (template_app
                (template_hole 2,
                 template_app
                  (template_var 1,
                   template_app
                    (template_app (template_hole 1, template_var 0),
                     template_hole 0))),
               template_app (template_var 1, template_var 0)))
           ))),
    ("Bernoulli_FPS.gen_akiyama_tanigawa_fps",
     "Abs_fps (%n. gen_akiyama_tanigawa ?f n 0 / fact n) =
      fps_exp 1 * (Abs_fps ?f oo 1 - fps_exp 1)",
     template_equation
      (template_app (template_hole 10, t_empty),
       template_app
        (template_app
          (template_hole 5,
           template_app (template_hole 4, template_hole 3)),
         template_app
          (template_app
            (template_hole 2,
             template_app (template_hole 10, template_var 0)),
           template_app
            (template_app (template_hole 1, template_hole 0),
             template_app (template_hole 4, template_hole 3)))))),
    ("Bernoulli_FPS.eval_bernpoly",
     "?k <= ?n ==>
      of_nat (?n choose ?k) = fact ?n / (fact ?k * fact (?n - ?k))",
     template_implication
      ([template_inequation (less_equals, template_var 1, template_var 0)],
       template_equation
        (template_app
          (template_hole 5,
           template_app
            (template_app (template_hole 4, template_var 0),
             template_var 1)),
         template_app
          (template_app
            (template_hole 3,
             template_app (template_hole 2, template_var 0)),
           template_app
            (template_app
              (template_hole 1,
               template_app (template_hole 2, template_var 1)),
             template_app
              (template_hole 2,
               template_app
                (template_app (template_hole 0, template_var 0),
                 template_var 1))))))),
    ("Bernoulli_FPS.nth_gen_akiyama_tanigawa_row",
     "?i < ?u - ?l ==>
      gen_akiyama_tanigawa_row ?f ?n ?l ?u ! ?i =
      gen_akiyama_tanigawa ?f ?n (?i + ?l)",
     template_implication
      ([template_inequation
         (less_than, template_var 4,
          template_app
           (template_app (template_hole 5, template_var 3),
            template_var 2))],
       template_equation
        (template_app
          (template_app
            (template_hole 3,
             template_app
              (template_app
                (template_app
                  (template_app (template_hole 2, template_var 1),
                   template_var 0),
                 template_var 2),
               template_var 3)),
           template_var 4),
         template_app
          (template_app
            (template_app (template_hole 1, template_var 1),
             template_var 0),
           template_app
            (template_app (template_hole 0, template_var 4),
             template_var 2))))),
    ("Bernoulli_FPS.eval_bernpoly",
     "bernpoly ?n =
      (%x. SUM k<=?n.
           of_nat (?n choose k) * of_real (bernoulli k) * x ^ (?n - k))",
     template_equation
      (template_app (template_hole 9, template_var 0), t_empty)),
    ("Bernoulli_FPS.bernoulli_conv_Stirling",
     "bernoulli ?n =
      (SUM k<=?n.
       (- 1) ^ k * fact k / real (k + 1) * real (Stirling ?n k))",
     template_equation
      (template_app (template_hole 12, template_var 0),
       template_app
        (template_app (template_hole 11, t_empty),
         template_app (template_hole 0, template_var 0)))),
    ("Bernoulli_FPS.bernoulli_denom_correct",
     "(!!a. [| coprime a (int (bernoulli_denom ?m));
               bernoulli ?m = real_of_int a / real (bernoulli_denom ?m) |]
            ==> ?thesis) ==>
      ?thesis",
     template_implication
      ([template_predicate (template_app (template_hole 9, t_empty))],
       template_predicate (template_var 0))),
    ("Bernoulli_FPS.gen_akiyama_tanigawa_n_0",
     "gen_akiyama_tanigawa ?f ?n 0 =
      (SUM k<=?n.
       (- 1) ^ k * fact k * real (Stirling (Suc ?n) (Suc k)) * ?f k)",
     template_equation
      (template_app
        (template_app
          (template_app (template_hole 11, template_var 1), template_var 0),
         template_hole 10),
       template_app
        (template_app (template_hole 9, t_empty),
         template_app (template_hole 0, template_var 0)))),
    ("Bernoulli_FPS.AT_fps_altdef",
     "??.Bernoulli_FPS.AT_fps ?f ?n =
      (SUM m<=?n.
       fps_const (real (Stirling ?n m)) * (fps_X - 1) ^ m *
       (fps_deriv ^^ m) (??.Bernoulli_FPS.AT_fps ?f 0))",
     template_equation
      (template_app
        (template_app (template_hole 13, template_var 1), template_var 0),
       template_app
        (template_app (template_hole 12, t_empty),
         template_app (template_hole 0, template_var 0)))),
    ("Bernoulli_FPS.bernoulli_denom_prime_nonprime",
     "[| prime ?p; ~ prime (2 * ?p + 1) |]
      ==> bernoulli_denom (2 * ?p) = 6",
     template_implication
      ([template_predicate
         (template_app (template_hole 10, template_var 0)),
        template_negation
         (
            template_predicate
             (
                template_app
                 (template_hole 10,
                  template_app
                   (template_app
                     (template_hole 8,
                      template_app
                       (template_app
                         (template_hole 7,
                          template_app
                           (template_hole 6,
                            template_app
                             (template_hole 5, template_hole 4))),
                        template_var 0)),
                    template_hole 3))
                )
            )],
       template_equation
        (template_app
          (template_hole 1,
           template_app
            (template_app
              (template_hole 7,
               template_app
                (template_hole 6,
                 template_app (template_hole 5, template_hole 4))),
             template_var 0)),
         template_app
          (template_hole 6,
           template_app
            (template_hole 5,
             template_app (template_hole 0, template_hole 4)))))),
    ("Bernoulli_FPS.nth_akiyama_tanigawa_step_aux",
     "?n < length ?xs - 1 ==>
      akiyama_tanigawa_step_aux ?m ?xs ! ?n =
      real (?m + ?n) * (?xs ! ?n - ?xs ! Suc ?n)",
     template_implication
      ([template_inequation
         (less_than, template_var 2,
          template_app
           (template_app
             (template_hole 10,
              template_app (template_hole 9, template_var 1)),
            template_hole 8))],
       template_equation
        (template_app
          (template_app
            (template_hole 6,
             template_app
              (template_app (template_hole 5, template_var 0),
               template_var 1)),
           template_var 2),
         template_app
          (template_app
            (template_hole 4,
             template_app
              (template_hole 3,
               template_app
                (template_app (template_hole 2, template_var 0),
                 template_var 2))),
           template_app
            (template_app
              (template_hole 1,
               template_app
                (template_app (template_hole 6, template_var 1),
                 template_var 2)),
             template_app
              (template_app (template_hole 6, template_var 1),
               template_app (template_hole 0, template_var 2))))))),
    ("Bernoulli_FPS.bernoulli_denom_prime_nonprime",
     "[| prime ?p; ~ prime (2 * ?p + 1) |]
      ==> [bernoulli_num (2 * ?p) = 1] (mod 6)",
     template_implication
      ([template_predicate
         (template_app (template_hole 12, template_var 0)),
        template_negation
         (
            template_predicate
             (
                template_app
                 (template_hole 12,
                  template_app
                   (template_app
                     (template_hole 10,
                      template_app
                       (template_app
                         (template_hole 9,
                          template_app
                           (template_hole 8,
                            template_app
                             (template_hole 7, template_hole 6))),
                        template_var 0)),
                    template_hole 5))
                )
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_app
                (template_hole 4,
                 template_app
                  (template_hole 3,
                   template_app
                    (template_app
                      (template_hole 9,
                       template_app
                        (template_hole 8,
                         template_app (template_hole 7, template_hole 6))),
                     template_var 0))),
               template_hole 2),
             template_app
              (template_hole 1,
               template_app
                (template_hole 7,
                 template_app (template_hole 0, template_hole 6))))
           ))),
    ("Bernoulli_FPS.bernoulli'_code",
     "bernoulli' ?n =
      (if ?n = 0 then 1
       else if ?n = 1 then 1 / 2
            else if odd ?n then 0 else akiyama_tanigawa ?n 0)",
     template_implication
      ([template_predicate
         (template_app (template_hole 14, template_var 0))],
       template_predicate
        (
           template_app
            (template_app
              (template_app
                (template_hole 13,
                 template_app
                  (template_app (template_hole 12, template_var 0),
                   template_hole 11)),
               template_hole 10),
             template_app
              (template_app
                (template_app
                  (template_hole 13,
                   template_app
                    (template_app (template_hole 12, template_var 0),
                     template_hole 9)),
                 template_app
                  (template_app (template_hole 8, template_hole 10),
                   template_app
                    (template_hole 7,
                     template_app (template_hole 6, template_hole 5)))),
               template_app
                (template_app
                  (template_app
                    (template_hole 13,
                     template_app
                      (template_hole 4,
                       template_app
                        (template_app
                          (template_hole 3,
                           template_app
                            (template_hole 2,
                             template_app
                              (template_hole 6, template_hole 5))),
                         template_var 0))),
                   template_hole 1),
                 template_app
                  (template_app (template_hole 0, template_var 0),
                   template_hole 11))))
           ))),
    ("Bernoulli_FPS.Stirling_closed_form",
     "real (Stirling ?n ?k) =
      (SUM j<=?k. (- 1) ^ (?k - j) * real (?k choose j) * real j ^ ?n) /
      fact ?k",
     template_equation
      (template_app
        (template_hole 11,
         template_app
          (template_app (template_hole 10, template_var 1),
           template_var 0)),
       template_app
        (template_app
          (template_hole 9,
           template_app
            (template_app (template_hole 8, t_empty),
             template_app (template_hole 1, template_var 0))),
         template_app (template_hole 0, template_var 0)))),
    ("Bernoulli_FPS.bernoulli_denom_even",
     "[| 0 < ?n; even ?n |]
      ==> bernoulli_denom ?n = \<Prod>{p. prime p & p - 1 dvd ?n}",
     template_implication
      ([template_inequation (less_than, template_hole 12, template_var 0),
        template_predicate
         (
            template_app
             (template_app
               (template_hole 11,
                template_app
                 (template_hole 10,
                  template_app (template_hole 9, template_hole 8))),
              template_var 0)
            )],
       template_equation
        (template_app (template_hole 6, template_var 0),
         template_app
          (template_app (template_hole 5, t_empty),
           template_app (template_hole 4, t_empty))))),
    ("Bernoulli_FPS.bernoulli_altdef",
     "bernoulli ?n =
      (SUM m<=?n.
       SUM k<=m.
       (- 1) ^ k * real (m choose k) * real k ^ ?n / real (Suc m))",
     template_equation
      (template_app (template_hole 10, template_var 0),
       template_app
        (template_app (template_hole 9, t_empty),
         template_app (template_hole 0, template_var 0)))),
    ("Bernoulli_FPS.bernoulli_code",
     "bernoulli ?n =
      (if ?n = 0 then 1
       else if ?n = 1 then - 1 / 2
            else if odd ?n then 0 else akiyama_tanigawa ?n 0)",
     template_implication
      ([template_predicate
         (template_app (template_hole 15, template_var 0))],
       template_predicate
        (
           template_app
            (template_app
              (template_app
                (template_hole 14,
                 template_app
                  (template_app (template_hole 13, template_var 0),
                   template_hole 12)),
               template_hole 11),
             template_app
              (template_app
                (template_app
                  (template_hole 14,
                   template_app
                    (template_app (template_hole 13, template_var 0),
                     template_hole 10)),
                 template_app
                  (template_app
                    (template_hole 9,
                     template_app (template_hole 8, template_hole 11)),
                   template_app
                    (template_hole 7,
                     template_app (template_hole 6, template_hole 5)))),
               template_app
                (template_app
                  (template_app
                    (template_hole 14,
                     template_app
                      (template_hole 4,
                       template_app
                        (template_app
                          (template_hole 3,
                           template_app
                            (template_hole 2,
                             template_app
                              (template_hole 6, template_hole 5))),
                         template_var 0))),
                   template_hole 1),
                 template_app
                  (template_app (template_hole 0, template_var 0),
                   template_hole 12))))
           ))),
    ("Bernoulli_FPS.fps_XD'_funpow_affine",
     "fps_deriv ?G = 1 ==>
      (fps_XD' ?G ^^ ?n) ?H =
      (SUM m<=?n.
       fps_const (real (Stirling ?n m)) * ?G ^ m * (fps_deriv ^^ m) ?H)",
     template_implication
      ([template_equation
         (template_app (template_hole 10, template_var 2),
          template_hole 9)],
       template_equation
        (template_app
          (template_app
            (template_app (template_hole 8, template_var 1),
             template_app (template_hole 7, template_var 2)),
           template_var 0),
         template_app
          (template_app (template_hole 6, t_empty),
           template_app (template_hole 0, template_var 1))))),
    ("Bernoulli_FPS.bernoulli_denom_prime_nonprime",
     "[| prime ?p; ~ prime (2 * ?p + 1) |]
      ==> bernoulli (2 * ?p) - 1 / 6 : \<int>",
     template_implication
      ([template_predicate
         (template_app (template_hole 15, template_var 0)),
        template_negation
         (
            template_predicate
             (
                template_app
                 (template_hole 15,
                  template_app
                   (template_app
                     (template_hole 13,
                      template_app
                       (template_app
                         (template_hole 12,
                          template_app
                           (template_hole 11,
                            template_app
                             (template_hole 10, template_hole 9))),
                        template_var 0)),
                    template_hole 8))
                )
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 7,
               template_app
                (template_app
                  (template_hole 6,
                   template_app
                    (template_hole 5,
                     template_app
                      (template_app
                        (template_hole 12,
                         template_app
                          (template_hole 11,
                           template_app
                            (template_hole 10, template_hole 9))),
                       template_var 0))),
                 template_app
                  (template_app (template_hole 4, template_hole 3),
                   template_app
                    (template_hole 2,
                     template_app
                      (template_hole 10,
                       template_app (template_hole 1, template_hole 9)))))),
             template_hole 0)
           ))),
    ("Bernoulli_FPS.product_dvd_fact",
     "[| 1 < ?a; 1 < ?b; ?a = ?b --> 2 < ?a |]
      ==> ?a * ?b dvd fact (?a * ?b - 1)",
     template_implication
      ([template_inequation (less_than, template_hole 9, template_var 1),
        template_inequation (less_than, template_hole 9, template_var 0),
        template_predicate
         (
            template_app
             (template_app
               (template_hole 8,
                template_app
                 (template_app (template_hole 7, template_var 1),
                  template_var 0)),
              template_app
               (template_app
                 (template_hole 10,
                  template_app
                   (template_hole 6,
                    template_app (template_hole 5, template_hole 4))),
                template_var 1))
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 3,
               template_app
                (template_app (template_hole 2, template_var 1),
                 template_var 0)),
             template_app
              (template_hole 1,
               template_app
                (template_app
                  (template_hole 0,
                   template_app
                    (template_app (template_hole 2, template_var 1),
                     template_var 0)),
                 template_hole 9)))
           ))),
    ("Bernoulli_FPS.eval_bernoulli'",
     "bernoulli' (numeral ?n) =
      (if numeral ?n = 0 then 1
       else if numeral ?n = 1 then 1 / 2
            else if odd (numeral ?n) then 0
                 else akiyama_tanigawa (numeral ?n) 0)",
     template_implication
      ([template_predicate
         (
            template_app
             (template_hole 14,
              template_app (template_hole 13, template_var 0))
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_app
                (template_hole 12,
                 template_app
                  (template_app
                    (template_hole 11,
                     template_app (template_hole 13, template_var 0)),
                   template_hole 10)),
               template_hole 9),
             template_app
              (template_app
                (template_app
                  (template_hole 12,
                   template_app
                    (template_app
                      (template_hole 11,
                       template_app (template_hole 13, template_var 0)),
                     template_hole 8)),
                 template_app
                  (template_app (template_hole 7, template_hole 9),
                   template_app
                    (template_hole 6,
                     template_app (template_hole 5, template_hole 4)))),
               template_app
                (template_app
                  (template_app
                    (template_hole 12,
                     template_app
                      (template_hole 3,
                       template_app
                        (template_app
                          (template_hole 2,
                           template_app
                            (template_hole 13,
                             template_app
                              (template_hole 5, template_hole 4))),
                         template_app (template_hole 13, template_var 0)))),
                   template_hole 1),
                 template_app
                  (template_app
                    (template_hole 0,
                     template_app (template_hole 13, template_var 0)),
                   template_hole 10))))
           ))),
    ("Bernoulli_FPS.Rats_int_div_natE",
     "[| ?x : \<rat>;
         !!m n.
            [| 0 < n; ?x = of_int m / of_nat n; coprime m (int n) |]
            ==> ?thesis |]
      ==> ?thesis",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 11, template_var 1),
              template_hole 10)
            ),
        template_predicate (template_app (template_hole 9, t_empty))],
       template_predicate (template_var 0))),
    ("Bernoulli_FPS.bernoulli_denom_code",
     "bernoulli_denom ?n =
      (if ?n = 1 then 2
       else if ?n = 0 | odd ?n then 1
            else prod_list
                  (filter (%p. p - 1 dvd ?n) (primes_upto (?n + 1))))",
     template_implication
      ([template_predicate
         (template_app (template_hole 14, template_var 0))],
       template_predicate
        (
           template_app
            (template_app
              (template_app
                (template_hole 13,
                 template_app
                  (template_app (template_hole 15, template_var 0),
                   template_hole 12)),
               template_app
                (template_hole 11,
                 template_app (template_hole 10, template_hole 9))),
             template_app
              (template_app
                (template_app
                  (template_hole 13,
                   template_app
                    (template_app
                      (template_hole 8,
                       template_app
                        (template_app (template_hole 15, template_var 0),
                         template_hole 7)),
                     template_app
                      (template_hole 6,
                       template_app
                        (template_app
                          (template_hole 5,
                           template_app
                            (template_hole 11,
                             template_app
                              (template_hole 10, template_hole 9))),
                         template_var 0)))),
                 template_hole 12),
               template_app
                (template_hole 4,
                 template_app
                  (template_app (template_hole 3, t_empty),
                   template_app
                    (template_hole 1,
                     template_app
                      (template_app (template_hole 0, template_var 0),
                       template_hole 12))))))
           ))),
    ("Bernoulli_FPS.eval_bernpoly",
     "bernoulli (numeral ?n) =
      (if numeral ?n = 0 then 1
       else if numeral ?n = 1 then - 1 / 2
            else if odd (numeral ?n) then 0
                 else akiyama_tanigawa (numeral ?n) 0)",
     template_implication
      ([template_predicate
         (
            template_app
             (template_hole 15,
              template_app (template_hole 14, template_var 0))
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_app
                (template_hole 13,
                 template_app
                  (template_app
                    (template_hole 12,
                     template_app (template_hole 14, template_var 0)),
                   template_hole 11)),
               template_hole 10),
             template_app
              (template_app
                (template_app
                  (template_hole 13,
                   template_app
                    (template_app
                      (template_hole 12,
                       template_app (template_hole 14, template_var 0)),
                     template_hole 9)),
                 template_app
                  (template_app
                    (template_hole 8,
                     template_app (template_hole 7, template_hole 10)),
                   template_app
                    (template_hole 6,
                     template_app (template_hole 5, template_hole 4)))),
               template_app
                (template_app
                  (template_app
                    (template_hole 13,
                     template_app
                      (template_hole 3,
                       template_app
                        (template_app
                          (template_hole 2,
                           template_app
                            (template_hole 14,
                             template_app
                              (template_hole 5, template_hole 4))),
                         template_app (template_hole 14, template_var 0)))),
                   template_hole 1),
                 template_app
                  (template_app
                    (template_hole 0,
                     template_app (template_hole 14, template_var 0)),
                   template_hole 11))))
           ))),
    ("Bernoulli_FPS.vonStaudt_Clausen",
     "0 < ?n ==>
      bernoulli (2 * ?n) + (SUM p | prime p & p - 1 dvd 2 * ?n. 1 / real p)
      : \<int>",
     template_implication
      ([template_inequation (less_than, template_hole 18, template_var 0)],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 17,
               template_app
                (template_app
                  (template_hole 16,
                   template_app
                    (template_hole 15,
                     template_app
                      (template_app
                        (template_hole 14,
                         template_app
                          (template_hole 13,
                           template_app
                            (template_hole 12, template_hole 11))),
                       template_var 0))),
                 template_app
                  (template_app (template_hole 10, t_empty),
                   template_app (template_hole 6, t_empty)))),
             template_hole 0)
           ))),
    ("Bernoulli_FPS.composite_imp_factors_nat",
     "[| 1 < ?m; ~ prime ?m |]
      ==> EX n k. ?m = n * k & 1 < n & n < ?m & 1 < k & k < ?m",
     template_implication
      ([template_inequation (less_than, template_hole 6, template_var 0),
        template_negation
         (
            template_predicate
             (template_app (template_hole 4, template_var 0))
            )],
       template_predicate (template_app (template_hole 3, t_empty)))),
    ("Bernoulli_FPS.sum_prime_inverses_fraction_coprime",
     "[| finite ?A; !!x. x : ?A ==> prime (?f x); inj_on ?f ?A |]
      ==> coprime (SUM x:?A. prod ?f (?A - {x})) (prod ?f ?A)",
     template_implication
      ([template_predicate
         (template_app (template_hole 10, template_var 1)),
        template_predicate (template_app (template_hole 9, t_empty)),
        template_predicate
         (
            template_app
             (template_app (template_hole 6, template_var 0),
              template_var 1)
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 5,
               template_app
                (template_app (template_hole 4, t_empty), template_var 1)),
             template_app
              (template_app (template_hole 3, t_empty), template_var 1))
           ))),
    ("Bernoulli_FPS.sum_inverses_conv_fraction",
     "[| !!x. x : ?A ==> ?f x ~= (0::?'b); finite ?A |]
      ==> (SUM x:?A. (1::?'b) / ?f x) =
          (SUM x:?A. prod ?f (?A - {x})) / prod ?f ?A",
     template_implication
      ([template_predicate (template_app (template_hole 13, t_empty)),
        template_predicate
         (template_app (template_hole 7, template_var 1))],
       template_equation
        (template_app
          (template_app (template_hole 6, t_empty), template_var 1),
         template_app
          (template_app
            (template_hole 5,
             template_app
              (template_app (template_hole 6, t_empty), template_var 1)),
           template_app
            (template_app (template_hole 3, t_empty), template_var 1))))),
    ("Bernoulli_FPS.vonStaudt_Clausen_lemma",
     "[| 0 < ?n; prime ?p |]
      ==> [SUM m<?p.
           (- 1) ^ m * int (?p - 1 choose m) *
           int m ^
           (2 * ?n) = if ?p - 1 dvd 2 * ?n then - 1 else 0] (mod int ?p)",
     template_implication
      ([template_inequation (less_than, template_hole 19, template_var 1),
        template_predicate
         (template_app (template_hole 18, template_var 0))],
       template_predicate
        (
           template_app
            (template_app
              (template_app
                (template_hole 17,
                 template_app
                  (template_app (template_hole 16, t_empty),
                   template_app (template_hole 3, template_var 0))),
               template_app
                (template_app
                  (template_app
                    (template_hole 2,
                     template_app
                      (template_app
                        (template_hole 1,
                         template_app
                          (template_app (template_hole 9, template_var 0),
                           template_hole 8)),
                       template_app
                        (template_app
                          (template_hole 7,
                           template_app
                            (template_hole 6,
                             template_app
                              (template_hole 5, template_hole 4))),
                         template_var 1))),
                   template_app (template_hole 13, template_hole 12)),
                 template_hole 0)),
             template_app (template_hole 11, template_var 0))
           )))]:
   (string * thm * template) list
### theory "Draft.Bernoulli_FPSMoreTemplates"
### 0.775s elapsed time, 1.135s cpu time, 0.124s GC time
val it = (): unit
