   [("Root_Balanced_Tree.size_tree",
     "Root_Balanced_Tree.size_tree ?t = size ?t",
     template_equation
      (template_app (template_hole 1, template_var 0),
       template_app (template_hole 0, template_var 0))),
    ("Root_Balanced_Tree.T_inorder2_Leaf",
     "T_inorder2 \<langle>\<rangle> ?xs = 1",
     template_equation
      (template_app
        (template_app (template_hole 2, template_hole 1), template_var 0),
       template_hole 0)),
    ("Root_Balanced_Tree.inorder2_Leaf",
     "Root_Balanced_Tree.inorder2 \<langle>\<rangle> ?xs = ?xs",
     template_equation
      (template_app
        (template_app (template_hole 1, template_hole 0), template_var 0),
       template_var 0)),
    ("Root_Balanced_Tree.inorder2",
     "Root_Balanced_Tree.inorder2 ?t ?xs = Tree.inorder2 ?t ?xs",
     template_equation
      (template_app
        (template_app (template_hole 1, template_var 1), template_var 0),
       template_app
        (template_app (template_hole 0, template_var 1), template_var 0))),
    ("Root_Balanced_Tree.bal_list",
     "Root_Balanced_Tree.bal_list ?n ?xs = Balance.bal_list ?n ?xs",
     template_equation
      (template_app
        (template_app (template_hole 1, template_var 1), template_var 0),
       template_app
        (template_app (template_hole 0, template_var 1), template_var 0))),
    ("Root_Balanced_Tree.bal_tree",
     "Root_Balanced_Tree.bal_tree ?n ?t = Balance.bal_tree ?n ?t",
     template_equation
      (template_app
        (template_app (template_hole 1, template_var 1), template_var 0),
       template_app
        (template_app (template_hole 0, template_var 1), template_var 0))),
    ("Root_Balanced_Tree.bal_simps",
     "bal 0 ?xs = (\<langle>\<rangle>, ?xs)",
     template_equation
      (template_app
        (template_app (template_hole 3, template_hole 2), template_var 0),
       template_app
        (template_app (template_hole 1, template_hole 0), template_var 0))),
    ("Root_Balanced_Tree.bal_eq", "bal ?n ?xs = Balance.bal ?n ?xs",
     template_equation
      (template_app
        (template_app (template_hole 1, template_var 1), template_var 0),
       template_app
        (template_app (template_hole 0, template_var 1), template_var 0))),
    ("Root_Balanced_Tree.bal_tm_simps",
     "bal_tm 0 ?xs =1 return (\<langle>\<rangle>, ?xs)",
     template_equation
      (template_app
        (template_app (template_hole 6, template_hole 5), template_var 0),
       template_app
        (template_app
          (template_hole 4,
           template_app
            (template_hole 3,
             template_app
              (template_app (template_hole 2, template_hole 1),
               template_var 0))),
         template_hole 0))),
    ("Root_Balanced_Tree.T_size_tree", "T_size_tree ?t = 2 * size ?t + 1",
     template_equation
      (template_app (template_hole 7, template_var 0),
       template_app
        (template_app
          (template_hole 6,
           template_app
            (template_app
              (template_hole 5,
               template_app
                (template_hole 4,
                 template_app (template_hole 3, template_hole 2))),
             template_app (template_hole 1, template_var 0))),
         template_hole 0))),
    ("Root_Balanced_Tree.T_bal", "T_bal ?n ?xs = 2 * ?n + 1",
     template_equation
      (template_app
        (template_app (template_hole 6, template_var 1), template_var 0),
       template_app
        (template_app
          (template_hole 5,
           template_app
            (template_app
              (template_hole 4,
               template_app
                (template_hole 3,
                 template_app (template_hole 2, template_hole 1))),
             template_var 1)),
         template_hole 0))),
    ("Root_Balanced_Tree.T_inorder2", "T_inorder2 ?t ?xs = 2 * size ?t + 1",
     template_equation
      (template_app
        (template_app (template_hole 7, template_var 1), template_var 0),
       template_app
        (template_app
          (template_hole 6,
           template_app
            (template_app
              (template_hole 5,
               template_app
                (template_hole 4,
                 template_app (template_hole 3, template_hole 2))),
             template_app (template_hole 1, template_var 1))),
         template_hole 0))),
    ("Root_Balanced_Tree.T_size_tree_Node",
     "T_size_tree \<langle>?l, ?x, ?r\<rangle> =
      T_size_tree ?l + T_size_tree ?r + 1",
     template_equation
      (template_app
        (template_hole 3,
         template_app
          (template_app
            (template_app (template_hole 2, template_var 2),
             template_var 1),
           template_var 0)),
       template_app
        (template_app
          (template_hole 1,
           template_app
            (template_app
              (template_hole 1,
               template_app (template_hole 3, template_var 2)),
             template_app (template_hole 3, template_var 0))),
         template_hole 0))),
    ("Root_Balanced_Tree.T_split_min_Node",
     "T_split_min \<langle>?l, ?x, ?r\<rangle> =
      (if ?l = \<langle>\<rangle> then 1 else T_split_min ?l + 1)",
     template_implication
      ([template_predicate
         (
            template_app
             (template_hole 6,
              template_app
               (template_app
                 (template_app (template_hole 5, template_var 2),
                  template_var 1),
                template_var 0))
            )],
       template_dunno)),
    ("Root_Balanced_Tree.inorder2_Node",
     "Root_Balanced_Tree.inorder2 \<langle>?l, ?x, ?r\<rangle> ?xs =
      (let rs = Root_Balanced_Tree.inorder2 ?r ?xs
       in Root_Balanced_Tree.inorder2 ?l (?x # rs))",
     template_equation
      (template_app
        (template_app
          (template_hole 3,
           template_app
            (template_app
              (template_app (template_hole 2, template_var 3),
               template_var 2),
             template_var 1)),
         template_var 0),
       template_app
        (template_app
          (template_hole 1,
           template_app
            (template_app (template_hole 3, template_var 1),
             template_var 0)),
         t_empty))),
    ("Root_Balanced_Tree.size_tree_Node",
     "Root_Balanced_Tree.size_tree \<langle>?l, ?x, ?r\<rangle> =
      (let m = Root_Balanced_Tree.size_tree ?l;
           n = Root_Balanced_Tree.size_tree ?r
       in m + n + 1)",
     template_equation
      (template_app
        (template_hole 4,
         template_app
          (template_app
            (template_app (template_hole 3, template_var 2),
             template_var 1),
           template_var 0)),
       template_app
        (template_app
          (template_hole 2, template_app (template_hole 4, template_var 2)),
         t_empty))),
    ("Root_Balanced_Tree.T_inorder2_Node",
     "T_inorder2 \<langle>?l, ?x, ?r\<rangle> ?xs =
      T_inorder2 ?r ?xs +
      T_inorder2 ?l (?x # Root_Balanced_Tree.inorder2 ?r ?xs) +
      1",
     template_equation
      (template_app
        (template_app
          (template_hole 5,
           template_app
            (template_app
              (template_app (template_hole 4, template_var 3),
               template_var 2),
             template_var 1)),
         template_var 0),
       template_app
        (template_app
          (template_hole 3,
           template_app
            (template_app
              (template_hole 3,
               template_app
                (template_app (template_hole 5, template_var 1),
                 template_var 0)),
             template_app
              (template_app (template_hole 5, template_var 3),
               template_app
                (template_app (template_hole 2, template_var 2),
                 template_app
                  (template_app (template_hole 1, template_var 1),
                   template_var 0))))),
         template_hole 0))),
    ("Root_Balanced_Tree.split_min_Node",
     "Root_Balanced_Tree.split_min \<langle>?l, ?x, ?r\<rangle> =
      (if ?l = \<langle>\<rangle> then (?x, ?r)
       else let (y, l') = Root_Balanced_Tree.split_min ?l
            in (y, \<langle>l', ?x, ?r\<rangle>))",
     template_implication
      ([template_predicate
         (
            template_app
             (template_hole 7,
              template_app
               (template_app
                 (template_app (template_hole 6, template_var 2),
                  template_var 1),
                template_var 0))
            )],
       template_dunno))]
