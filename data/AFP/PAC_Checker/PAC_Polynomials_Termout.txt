Loading theory "Draft.Finite_Map_Multiset" (required by "Draft.PAC_Polynomials_TermTemplates" via "Draft.PAC_Polynomials_Term" via "Draft.PAC_Polynomials")
Loading theory "HOL-Library.Set_Algebras" (required by "Draft.PAC_Polynomials_TermTemplates" via "Draft.ExtrEqs" via "HOL-Library.BigO")
Loading theory "HOL-Library.Tree" (required by "Draft.PAC_Polynomials_TermTemplates" via "Draft.ExtrEqs" via "Draft.Templates")
Loading theory "HOL-Library.Stream" (required by "Draft.PAC_Polynomials_TermTemplates" via "Draft.ExtrEqs")
instantiation
  set :: (plus) plus
  plus_set == plus :: 'a set => 'a set => 'a set
instantiation
  set :: (times) times
  times_set == times :: 'a set => 'a set => 'a set
instantiation
  set :: (zero) zero
  zero_set == zero_class.zero :: 'a set
instantiation
  set :: (one) one
  one_set == one_class.one :: 'a set
### theory "HOL-Library.Set_Algebras"
### 0.218s elapsed time, 0.865s cpu time, 0.061s GC time
Loading theory "HOL-Library.BigO" (required by "Draft.PAC_Polynomials_TermTemplates" via "Draft.ExtrEqs")
### theory "Draft.Finite_Map_Multiset"
### 0.422s elapsed time, 1.642s cpu time, 0.155s GC time
Loading theory "Draft.PAC_More_Poly" (required by "Draft.PAC_Polynomials_TermTemplates" via "Draft.PAC_Polynomials_Term" via "Draft.PAC_Polynomials" via "Draft.PAC_Specification")
consts
  shift :: "'a list => 'a stream => 'a stream"
Proofs for coinductive predicate(s) "streamsp"
  Proving monotonicity ...
consts
  snth :: "'a stream => nat => 'a"
consts
  stake :: "nat => 'a stream => 'a list"
consts
  left :: "'a tree => 'a tree"
consts
  sdrop :: "nat => 'a stream => 'a stream"
consts
  right :: "'a tree => 'a tree"
consts
  sfilter :: "('a => bool) => 'a stream => 'a stream"
Found termination order: "size <*mlex*> {}"
consts
  cycle :: "'a list => 'a stream"
Found termination order: "size <*mlex*> {}"
consts
  siterate :: "('a => 'a) => 'a => 'a stream"
consts
  flat :: "'a list stream => 'a stream"
Found termination order: "size <*mlex*> {}"
class height = type +
  fixes height :: "'a => nat"
instantiation
  tree :: (type) height
  height_tree == height :: 'a tree => nat
consts
  sinterleave :: "'a stream => 'a stream => 'a stream"
consts
  szip :: "'a stream => 'b stream => ('a * 'b) stream"
Found termination order: "size <*mlex*> {}"
consts
  smap2 :: "('a => 'b => 'c) => 'a stream => 'b stream => 'c stream"
### theory "HOL-Library.Stream"
### 0.935s elapsed time, 3.548s cpu time, 0.405s GC time
Found termination order: "size <*mlex*> {}"
### theory "HOL-Library.BigO"
### 0.956s elapsed time, 3.450s cpu time, 0.869s GC time
Found termination order: "size <*mlex*> {}"
Found termination order: "size <*mlex*> {}"
Found termination order: "size <*mlex*> {}"
"(x', u, lookup u x', A)"
  :: "'a * ('a \<Rightarrow>\<^sub>0 'b) * 'b * 'c"
Found termination order: "size <*mlex*> {}"
Found termination order: "size <*mlex*> {}"
Found termination order: "(%p. size (fst p)) <*mlex*> {}"
### theory "Draft.PAC_More_Poly"
### 1.146s elapsed time, 3.505s cpu time, 0.908s GC time
Loading theory "Draft.PAC_Specification" (required by "Draft.PAC_Polynomials_TermTemplates" via "Draft.PAC_Polynomials_Term" via "Draft.PAC_Polynomials")
Found termination order: "size <*mlex*> {}"
Found termination order: "(%p. size (snd p)) <*mlex*> {}"
Proofs for inductive predicate(s) "PAC_Format"
  Proving monotonicity ...
### theory "Draft.PAC_Specification"
### 0.249s elapsed time, 0.515s cpu time, 0.067s GC time
Loading theory "Draft.PAC_Polynomials" (required by "Draft.PAC_Polynomials_TermTemplates" via "Draft.PAC_Polynomials_Term")
Found termination order: "size <*mlex*> {}"
### theory "HOL-Library.Tree"
### 2.101s elapsed time, 6.254s cpu time, 1.202s GC time
Loading theory "Draft.Templates" (required by "Draft.PAC_Polynomials_TermTemplates" via "Draft.ExtrEqs")
datatype template_term
=
     t_empty
   | template_app of template_term * template_term
   | template_hole of int
   | template_var of int
datatype sign
= equals | greater_equals | greater_than | less_equals | less_than
datatype template
=
     template_bimplication of template * template
   | template_dunno
   | template_equation of template_term * template_term
   | template_implication of template list * template
   | template_inequation of sign * template_term * template_term
   | template_negation of template
   | template_predicate of template_term
constructor t_empty: template_term
constructor template_app: template_term * template_term -> template_term
constructor template_hole: int -> template_term
constructor template_var: int -> template_term
constructor equals: sign
constructor greater_equals: sign
constructor greater_than: sign
constructor less_equals: sign
constructor less_than: sign
constructor template_bimplication: template * template -> template
constructor template_dunno: template
constructor template_equation: template_term * template_term -> template
constructor template_implication: template list * template -> template
constructor template_inequation:
   sign * template_term * template_term -> template
constructor template_negation: template -> template
constructor template_predicate: template_term -> template
val vfs = fn: term -> (indexname * typ) list * (string * typ) list
val indexOf = fn: ''a list -> ''a -> int -> int
val has_eq = fn: term -> bool
val term2template = fn:
   (indexname * typ) list -> (string * typ) list -> term -> template_term
val lemma2predicate = fn: term -> term -> template
val makeTemplatewithContext = fn: term -> term -> template
val lemma2template = fn: term -> template
val thm2template = fn: thm -> template
val tterm2string = fn: template_term -> string
val template2string = fn: template -> string
val t = "height ?t <= size ?t": thm
val th =
   Const ("HOL.Trueprop", "bool => prop") $
     (Const ("Orderings.ord_class.less_eq", "nat => nat => bool") $
       (Const ("Tree.height_class.height", "?'a tree => nat") $
         Var (("t", 0), "?'a tree")) $
       (Const ("Nat.size_class.size", "?'a tree => nat") $
         Var (("t", 0), "?'a tree"))):
   term
### theory "Draft.Templates"
### 0.055s elapsed time, 0.130s cpu time, 0.000s GC time
Loading theory "Draft.ExtrEqs" (required by "Draft.PAC_Polynomials_TermTemplates")
Proofs for inductive predicate(s) "add_poly_p"
  Proving monotonicity ...
Proofs for inductive predicate(s) "mult_poly_p"
  Proving monotonicity ...
Proofs for inductive predicate(s) "normalize_poly_p"
  Proving monotonicity ...
locale poly_embed
  fixes \<phi> :: "char list => nat"
  assumes "poly_embed \<phi>"
locale poly_embed_bij
  fixes \<phi> :: "char list => nat"
    and V :: "char list set"
    and N :: "nat set"
  assumes "poly_embed_bij \<phi> V N"
### theory "Draft.PAC_Polynomials"
### 1.048s elapsed time, 2.461s cpu time, 0.917s GC time
Loading theory "Draft.PAC_Polynomials_Term" (required by "Draft.PAC_Polynomials_TermTemplates")
val eqpattern =
   Pattern
    (
       Const ("HOL.Trueprop", "bool => prop") $
         (Const ("HOL.eq", "?'a => ?'a => bool") $
           Var (("_dummy_", 1), "?'a") $ Var (("_dummy_", 2), "?'a"))
       ):
   term Find_Theorems.criterion
val badeqpattern = Pattern (Const ("Pure.eq", "?'a => ?'a => prop")):
   term Find_Theorems.criterion
val undefpattern =
   Pattern
    (
       Const ("HOL.Trueprop", "bool => prop") $
         (Const ("HOL.eq", "?'a => ?'a => bool") $
           Var (("_dummy_", 1), "?'a") $ Const ("HOL.undefined", "?'a"))
       ):
   term Find_Theorems.criterion
val thmpattern =
   Pattern
    (Const ("HOL.Trueprop", "bool => prop") $ Var (("_dummy_", 1), "bool")):
   term Find_Theorems.criterion
val badnames =
   ["*nitpick*", "*Nitpick*", "*full_exhaustive*", "*_def*", "Enum.finite*",
    "*Quickcheck*", "ATP*", "*Nunchaku*", "*Code*", "*BNF*", "*SMT*",
    "*.*.*"]:
   string list
val unwanted_names =
   [(false, Name "*nitpick*"), (false, Name "*Nitpick*"),
    (false, Name "*full_exhaustive*"), (false, Name "*_def*"),
    (false, Name "Enum.finite*"), (false, Name "*Quickcheck*"),
    (false, Name "ATP*"), (false, Name "*Nunchaku*"),
    (false, Name "*Code*"), (false, Name "*BNF*"), (false, Name "*SMT*"),
    (false, Name "*.*.*")]:
   (bool * term Find_Theorems.criterion) list
val has_vars = fn: term -> bool
val get_all_eqs = fn: string -> Proof.context -> (string * thm) list
val get_all_thms = fn: string -> Proof.context -> (string * thm) list
val get_noneq_thms = fn: string -> Proof.context -> (string * thm) list
val template_eqs = fn:
   string -> Proof.context -> (string * thm * template) list
val template_thms = fn:
   string -> Proof.context -> (string * thm * template) list
### theory "Draft.ExtrEqs"
### 0.779s elapsed time, 1.893s cpu time, 0.846s GC time
### Partially applied constant "PAC_Polynomials_Term.less_eq_char" on left hand side of equation, in theorem:
### linorder.Min less_eq_char (set (?x # ?xs)) == fold char.min ?xs ?x
### Partially applied constant "PAC_Polynomials_Term.less_eq_char" on left hand side of equation, in theorem:
### linorder.Max less_eq_char (set (?x # ?xs)) == fold char.max ?xs ?x
### Partially applied constant "PAC_Polynomials_Term.less_eq_char" on left hand side of equation, in theorem:
### char.sorted [] == True
### Partially applied constant "PAC_Polynomials_Term.less_eq_char" on left hand side of equation, in theorem:
### char.sorted [?x] == True
### Partially applied constant "PAC_Polynomials_Term.less_eq_char" on left hand side of equation, in theorem:
### char.sorted (?x # ?y # ?zs) == less_eq_char ?x ?y & char.sorted (?y # ?zs)
### Partially applied constant "PAC_Polynomials_Term.less_eq_char" on left hand side of equation, in theorem:
### char.sorted_list_of_set (set ?xs) == char.sort (remdups ?xs)
### Partially applied constant "PAC_Polynomials_Term.less_char" on left hand side of equation, in theorem:
### char.part ?f ?pivot [] == ([], [], [])
### Partially applied constant "PAC_Polynomials_Term.less_char" on left hand side of equation, in theorem:
### char.part ?f ?pivot (?x # ?xs) ==
### let (lts, eqs, gts) = char.part ?f ?pivot ?xs; x' = ?f ?x
### in if less_char x' ?pivot then (?x # lts, eqs, gts)
###    else if less_char ?pivot x' then (lts, eqs, ?x # gts)
###         else (lts, ?x # eqs, gts)
### Partially applied constant "PAC_Polynomials_Term.less_eq_char" on left hand side of equation, in theorem:
### char.sort_key ?f ?xs ==
### case ?xs of [] => [] | [x] => ?xs
### | [x, y] => if less_eq_char (?f x) (?f y) then ?xs else [y, x]
### | x # y # ab # list =>
###     let (lts, eqs, gts) = char.part ?f (?f (?xs ! (length ?xs div 2))) ?xs
###     in char.sort_key ?f lts @ eqs @ char.sort_key ?f gts
### Partially applied constant "PAC_Polynomials_Term.less_eq_char" on left hand side of equation, in theorem:
### char.quicksort [] == []
### Partially applied constant "PAC_Polynomials_Term.less_eq_char" on left hand side of equation, in theorem:
### char.quicksort (?x # ?xs) ==
### char.quicksort (filter (%y. less_char y ?x) ?xs) @
### [?x] @ char.quicksort (filter (less_eq_char ?x) ?xs)
### theory "Draft.PAC_Polynomials_Term"
### 1.482s elapsed time, 1.710s cpu time, 0.215s GC time
Loading theory "Draft.PAC_Polynomials_TermTemplates"
val templateLemmas =
   [("PAC_Polynomials_Term.term_poly_list_relD",
     "(?xs, ?ys) : term_poly_list_rel ==> distinct ?xs",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_hole 3,
                template_app
                 (template_app (template_hole 2, template_var 1),
                  template_var 0)),
              template_hole 1)
            )],
       template_predicate
        (template_app (template_hole 0, template_var 1)))),
    ("PAC_Polynomials_Term.fully_unsorted_poly_list_rel_empty_iff",
     "(([], ?p') : fully_unsorted_poly_list_rel ?R) = (?p' = {#})",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_hole 5,
                template_app
                 (template_app (template_hole 4, template_hole 3),
                  template_var 1)),
              template_app (template_hole 2, template_var 0))
            )],
       template_equation (template_var 1, template_hole 0))),
    ("PAC_Polynomials_Term.poly_list_rel_with0_empty_iff",
     "(([], ?p') : poly_list_rel_with0 ?R) = (?p' = {#})",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_hole 5,
                template_app
                 (template_app (template_hole 4, template_hole 3),
                  template_var 1)),
              template_app (template_hole 2, template_var 0))
            )],
       template_equation (template_var 1, template_hole 0))),
    ("PAC_Polynomials_Term.fully_unsorted_poly_list_rel_empty_iff",
     "((?p, {#}) : fully_unsorted_poly_list_rel ?R) = (?p = [])",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_hole 5,
                template_app
                 (template_app (template_hole 4, template_var 1),
                  template_hole 3)),
              template_app (template_hole 2, template_var 0))
            )],
       template_equation (template_var 1, template_hole 0))),
    ("PAC_Polynomials_Term.poly_list_rel_with0_empty_iff",
     "((?p, {#}) : poly_list_rel_with0 ?R) = (?p = [])",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_hole 5,
                template_app
                 (template_app (template_hole 4, template_var 1),
                  template_hole 3)),
              template_app (template_hole 2, template_var 0))
            )],
       template_equation (template_var 1, template_hole 0))),
    ("PAC_Polynomials_Term.sorted_poly_list_rel_empty_l",
     "(([], ?s') : sorted_poly_list_rel_wrt ?S ?T) = (?s' = {#})",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_hole 5,
                template_app
                 (template_app (template_hole 4, template_hole 3),
                  template_var 2)),
              template_app
               (template_app (template_hole 2, template_var 1),
                template_var 0))
            )],
       template_equation (template_var 2, template_hole 0))),
    ("PAC_Polynomials_Term.term_poly_list_relD",
     "(?xs, ?ys) : term_poly_list_rel ==> ?ys = mset ?xs",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_hole 4,
                template_app
                 (template_app (template_hole 3, template_var 1),
                  template_var 0)),
              template_hole 2)
            )],
       template_equation
        (template_var 0, template_app (template_hole 0, template_var 1)))),
    ("PAC_Polynomials_Term.term_poly_list_relD",
     "(?xs, ?ys) : term_poly_list_rel ==> sorted_wrt var_order ?xs",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_hole 5,
                template_app
                 (template_app (template_hole 4, template_var 1),
                  template_var 0)),
              template_hole 3)
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 2,
               template_app (template_hole 1, template_hole 0)),
             template_var 1)
           ))),
    ("PAC_Polynomials_Term.term_poly_list_relD",
     "(?xs, ?ys) : term_poly_list_rel ==>
      sorted_wrt (rel2p (Id Un var_order_rel)) ?xs",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_hole 7,
                template_app
                 (template_app (template_hole 6, template_var 1),
                  template_var 0)),
              template_hole 5)
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 4,
               template_app
                (template_hole 3,
                 template_app
                  (template_app (template_hole 2, template_hole 1),
                   template_hole 0))),
             template_var 1)
           ))),
    ("PAC_Polynomials_Term.fref_to_Down_curry_left",
     "[| (uncurry ?f, ?g)
         : [?P]\<^sub>f ?A \<rightarrow> \<langle>?B\<rangle>nres_rel;
         ?P ?x'; ((?a, ?b), ?x') : ?A |]
      ==> ?f ?a ?b <= \<Down> ?B (?g ?x')",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_hole 10,
                template_app
                 (template_app
                   (template_hole 9,
                    template_app (template_hole 8, template_var 7)),
                  template_var 6)),
              template_app
               (template_app
                 (template_app (template_hole 7, template_var 5),
                  template_var 4),
                template_app
                 (template_app (template_hole 6, template_hole 5),
                  template_var 3)))
            ),
        template_predicate (template_app (template_var 5, template_var 2)),
        template_predicate
         (
            template_app
             (template_app
               (template_hole 4,
                template_app
                 (template_app
                   (template_hole 3,
                    template_app
                     (template_app (template_hole 2, template_var 1),
                      template_var 0)),
                  template_var 2)),
              template_var 4)
            )],
       template_inequation
        (less_equals,
         template_app
          (template_app (template_var 7, template_var 1), template_var 0),
         template_app
          (template_app (template_hole 0, template_var 3),
           template_app (template_var 6, template_var 2))))),
    ("PAC_Polynomials_Term.fref_to_Down_curry_right",
     "[| (?f, uncurry ?g)
         : [?P]\<^sub>f ?A \<rightarrow> \<langle>?B\<rangle>nres_rel;
         ?P (?a, ?b); (?x', ?a, ?b) : ?A |]
      ==> ?f ?x' <= \<Down> ?B (?g ?a ?b)",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_hole 10,
                template_app
                 (template_app (template_hole 9, template_var 7),
                  template_app (template_hole 8, template_var 6))),
              template_app
               (template_app
                 (template_app (template_hole 7, template_var 5),
                  template_var 4),
                template_app
                 (template_app (template_hole 6, template_hole 5),
                  template_var 3)))
            ),
        template_predicate
         (
            template_app
             (template_var 5,
              template_app
               (template_app (template_hole 4, template_var 2),
                template_var 1))
            ),
        template_predicate
         (
            template_app
             (template_app
               (template_hole 3,
                template_app
                 (template_app (template_hole 2, template_var 0),
                  template_app
                   (template_app (template_hole 4, template_var 2),
                    template_var 1))),
              template_var 4)
            )],
       template_inequation
        (less_equals, template_app (template_var 7, template_var 0),
         template_app
          (template_app (template_hole 0, template_var 3),
           template_app
            (template_app (template_var 6, template_var 2),
             template_var 1)))))]:
   (string * thm * template) list
### theory "Draft.PAC_Polynomials_TermTemplates"
### 1.697s elapsed time, 2.769s cpu time, 1.119s GC time
val it = (): unit
