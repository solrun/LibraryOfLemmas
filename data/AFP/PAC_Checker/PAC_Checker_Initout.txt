Loading theory "Draft.PAC_Misc" (required by "Draft.PAC_Checker_InitTemplates" via "Draft.PAC_Checker_Init" via "Draft.PAC_Checker")
Loading theory "HOL-Library.Tree" (required by "Draft.PAC_Checker_InitTemplates" via "Draft.ExtrEqs" via "Draft.Templates")
Loading theory "HOL-Library.Set_Algebras" (required by "Draft.PAC_Checker_InitTemplates" via "Draft.ExtrEqs" via "HOL-Library.BigO")
Loading theory "HOL-Library.Stream" (required by "Draft.PAC_Checker_InitTemplates" via "Draft.ExtrEqs")
instantiation
  set :: (plus) plus
  plus_set == plus :: 'a set => 'a set => 'a set
instantiation
  set :: (times) times
  times_set == times :: 'a set => 'a set => 'a set
### theory "Draft.PAC_Misc"
### 0.049s elapsed time, 0.222s cpu time, 0.000s GC time
Loading theory "Draft.Finite_Map_Multiset" (required by "Draft.PAC_Checker_InitTemplates" via "Draft.PAC_Checker_Init" via "Draft.PAC_Checker" via "Draft.PAC_Polynomials_Operations" via "Draft.PAC_Polynomials_Term" via "Draft.PAC_Polynomials")
instantiation
  set :: (zero) zero
  zero_set == zero_class.zero :: 'a set
instantiation
  set :: (one) one
  one_set == one_class.one :: 'a set
### theory "HOL-Library.Set_Algebras"
### 0.235s elapsed time, 0.937s cpu time, 0.055s GC time
Loading theory "HOL-Library.BigO" (required by "Draft.PAC_Checker_InitTemplates" via "Draft.ExtrEqs")
consts
  shift :: "'a list => 'a stream => 'a stream"
Proofs for coinductive predicate(s) "streamsp"
  Proving monotonicity ...
### theory "Draft.Finite_Map_Multiset"
### 0.473s elapsed time, 1.757s cpu time, 0.224s GC time
Loading theory "Draft.PAC_More_Poly" (required by "Draft.PAC_Checker_InitTemplates" via "Draft.PAC_Checker_Init" via "Draft.PAC_Checker" via "Draft.PAC_Polynomials_Operations" via "Draft.PAC_Polynomials_Term" via "Draft.PAC_Polynomials" via "Draft.PAC_Specification")
consts
  snth :: "'a stream => nat => 'a"
consts
  stake :: "nat => 'a stream => 'a list"
consts
  sdrop :: "nat => 'a stream => 'a stream"
consts
  left :: "'a tree => 'a tree"
consts
  right :: "'a tree => 'a tree"
consts
  sfilter :: "('a => bool) => 'a stream => 'a stream"
consts
  cycle :: "'a list => 'a stream"
Found termination order: "size <*mlex*> {}"
consts
  siterate :: "('a => 'a) => 'a => 'a stream"
Found termination order: "size <*mlex*> {}"
consts
  flat :: "'a list stream => 'a stream"
Found termination order: "size <*mlex*> {}"
consts
  sinterleave :: "'a stream => 'a stream => 'a stream"
consts
  szip :: "'a stream => 'b stream => ('a * 'b) stream"
class height = type +
  fixes height :: "'a => nat"
instantiation
  tree :: (type) height
  height_tree == height :: 'a tree => nat
consts
  smap2 :: "('a => 'b => 'c) => 'a stream => 'b stream => 'c stream"
### theory "HOL-Library.Stream"
### 0.914s elapsed time, 3.473s cpu time, 0.408s GC time
Loading theory "Draft.PAC_Map_Rel" (required by "Draft.PAC_Checker_InitTemplates" via "Draft.PAC_Checker_Init" via "Draft.PAC_Checker")
Found termination order: "size <*mlex*> {}"
Found termination order: "size <*mlex*> {}"
Found termination order: "size <*mlex*> {}"
### theory "HOL-Library.BigO"
### 0.985s elapsed time, 3.622s cpu time, 0.887s GC time
Loading theory "Draft.WB_Sort" (required by "Draft.PAC_Checker_InitTemplates" via "Draft.PAC_Checker_Init")
Found termination order: "size <*mlex*> {}"
Found termination order: "size <*mlex*> {}"
Found termination order: "size <*mlex*> {}"
Found termination order: "size <*mlex*> {}"
op_fmap_empty ::\<^sub>i TYPE((?'a, ?'b) f_map)
mop_fmap_empty ::\<^sub>i TYPE((?'a, ?'b) f_map nres)
Found termination order: "(%p. size (fst p)) <*mlex*> {}"
op_fmap_is_empty ::\<^sub>i TYPE((?'a, ?'b) f_map => bool)
mop_fmap_is_empty ::\<^sub>i TYPE((?'a, ?'b) f_map => bool nres)
Found termination order: "size <*mlex*> {}"
op_fmap_update ::\<^sub>i
TYPE(?'a => ?'b => (?'a, ?'b) f_map => (?'a, ?'b) f_map)
### theory "Draft.PAC_More_Poly"
### 1.178s elapsed time, 4.352s cpu time, 0.934s GC time
Loading theory "Draft.PAC_Specification" (required by "Draft.PAC_Checker_InitTemplates" via "Draft.PAC_Checker_Init" via "Draft.PAC_Checker" via "Draft.PAC_Polynomials_Operations" via "Draft.PAC_Polynomials_Term" via "Draft.PAC_Polynomials")
mop_fmap_update ::\<^sub>i
TYPE(?'a => ?'b => (?'a, ?'b) f_map => (?'a, ?'b) f_map nres)
Found termination order: "(%p. size (snd p)) <*mlex*> {}"
op_fmap_delete ::\<^sub>i TYPE(?'a => (?'a, ?'b) f_map => (?'a, ?'b) f_map)
mop_fmap_delete ::\<^sub>i
TYPE(?'a => (?'a, ?'b) f_map => (?'a, ?'b) f_map nres)
Proofs for inductive predicate(s) "PAC_Format"
  Proving monotonicity ...
op_fmap_lookup ::\<^sub>i TYPE((?'a, ?'b) f_map => ?'a => ?'b option)
mop_fmap_lookup ::\<^sub>i TYPE((?'a, ?'b) f_map => ?'a => ?'b option nres)
### theory "Draft.PAC_Specification"
### 0.556s elapsed time, 2.041s cpu time, 1.024s GC time
Loading theory "Draft.PAC_Polynomials" (required by "Draft.PAC_Checker_InitTemplates" via "Draft.PAC_Checker_Init" via "Draft.PAC_Checker" via "Draft.PAC_Polynomials_Operations" via "Draft.PAC_Polynomials_Term")
op_fmap_contains_key ::\<^sub>i TYPE(?'a => (?'a, ?'b) f_map => bool)
mop_fmap_contains_key ::\<^sub>i TYPE(?'a => (?'a, ?'b) f_map => bool nres)
Found termination order: "size <*mlex*> {}"
### theory "HOL-Library.Tree"
### 2.620s elapsed time, 9.712s cpu time, 2.435s GC time
Loading theory "Draft.Templates" (required by "Draft.PAC_Checker_InitTemplates" via "Draft.ExtrEqs")
datatype template_term
=
     t_empty
   | template_app of template_term * template_term
   | template_hole of int
   | template_var of int
datatype sign
= equals | greater_equals | greater_than | less_equals | less_than
datatype template
=
     template_bimplication of template * template
   | template_dunno
   | template_equation of template_term * template_term
   | template_implication of template list * template
   | template_inequation of sign * template_term * template_term
   | template_negation of template
   | template_predicate of template_term
constructor t_empty: template_term
constructor template_app: template_term * template_term -> template_term
constructor template_hole: int -> template_term
constructor template_var: int -> template_term
constructor equals: sign
constructor greater_equals: sign
constructor greater_than: sign
constructor less_equals: sign
constructor less_than: sign
constructor template_bimplication: template * template -> template
constructor template_dunno: template
constructor template_equation: template_term * template_term -> template
constructor template_implication: template list * template -> template
constructor template_inequation:
   sign * template_term * template_term -> template
constructor template_negation: template -> template
constructor template_predicate: template_term -> template
val vfs = fn: term -> (indexname * typ) list * (string * typ) list
val indexOf = fn: ''a list -> ''a -> int -> int
val has_eq = fn: term -> bool
val term2template = fn:
   (indexname * typ) list -> (string * typ) list -> term -> template_term
val lemma2predicate = fn: term -> term -> template
val makeTemplatewithContext = fn: term -> term -> template
val lemma2template = fn: term -> template
val thm2template = fn: thm -> template
val tterm2string = fn: template_term -> string
val template2string = fn: template -> string
val t = "height ?t <= size ?t": thm
val th =
   Const ("HOL.Trueprop", "bool => prop") $
     (Const ("Orderings.ord_class.less_eq", "nat => nat => bool") $
       (Const ("Tree.height_class.height", "?'a tree => nat") $
         Var (("t", 0), "?'a tree")) $
       (Const ("Nat.size_class.size", "?'a tree => nat") $
         Var (("t", 0), "?'a tree"))):
   term
### theory "Draft.Templates"
### 0.057s elapsed time, 0.226s cpu time, 0.000s GC time
Loading theory "Draft.ExtrEqs" (required by "Draft.PAC_Checker_InitTemplates")
### theory "Draft.WB_Sort"
### 1.577s elapsed time, 5.818s cpu time, 1.565s GC time
Loading theory "Draft.PAC_Checker_Specification" (required by "Draft.PAC_Checker_InitTemplates" via "Draft.PAC_Checker_Init" via "Draft.PAC_Checker" via "Draft.PAC_Polynomials_Operations")
### theory "Draft.PAC_Map_Rel"
### 1.917s elapsed time, 7.034s cpu time, 2.098s GC time
"(x', u, lookup u x', A)"
  :: "'a * ('a \<Rightarrow>\<^sub>0 'b) * 'b * 'c"
Proofs for inductive predicate(s) "add_poly_p"
  Proving monotonicity ...
Proofs for inductive predicate(s) "mult_poly_p"
  Proving monotonicity ...
Proofs for inductive predicate(s) "normalize_poly_p"
  Proving monotonicity ...
locale poly_embed
  fixes \<phi> :: "char list => nat"
  assumes "poly_embed \<phi>"
locale poly_embed_bij
  fixes \<phi> :: "char list => nat"
    and V :: "char list set"
    and N :: "nat set"
  assumes "poly_embed_bij \<phi> V N"
### theory "Draft.PAC_Polynomials"
### 1.214s elapsed time, 4.237s cpu time, 1.420s GC time
Loading theory "Draft.PAC_Polynomials_Term" (required by "Draft.PAC_Checker_InitTemplates" via "Draft.PAC_Checker_Init" via "Draft.PAC_Checker" via "Draft.PAC_Polynomials_Operations")
val eqpattern =
   Pattern
    (
       Const ("HOL.Trueprop", "bool => prop") $
         (Const ("HOL.eq", "?'a => ?'a => bool") $
           Var (("_dummy_", 1), "?'a") $ Var (("_dummy_", 2), "?'a"))
       ):
   term Find_Theorems.criterion
val badeqpattern = Pattern (Const ("Pure.eq", "?'a => ?'a => prop")):
   term Find_Theorems.criterion
val undefpattern =
   Pattern
    (
       Const ("HOL.Trueprop", "bool => prop") $
         (Const ("HOL.eq", "?'a => ?'a => bool") $
           Var (("_dummy_", 1), "?'a") $ Const ("HOL.undefined", "?'a"))
       ):
   term Find_Theorems.criterion
val thmpattern =
   Pattern
    (Const ("HOL.Trueprop", "bool => prop") $ Var (("_dummy_", 1), "bool")):
   term Find_Theorems.criterion
val badnames =
   ["*nitpick*", "*Nitpick*", "*full_exhaustive*", "*_def*", "Enum.finite*",
    "*Quickcheck*", "ATP*", "*Nunchaku*", "*Code*", "*BNF*", "*SMT*",
    "*.*.*"]:
   string list
val unwanted_names =
   [(false, Name "*nitpick*"), (false, Name "*Nitpick*"),
    (false, Name "*full_exhaustive*"), (false, Name "*_def*"),
    (false, Name "Enum.finite*"), (false, Name "*Quickcheck*"),
    (false, Name "ATP*"), (false, Name "*Nunchaku*"),
    (false, Name "*Code*"), (false, Name "*BNF*"), (false, Name "*SMT*"),
    (false, Name "*.*.*")]:
   (bool * term Find_Theorems.criterion) list
val has_vars = fn: term -> bool
val get_all_eqs = fn: string -> Proof.context -> (string * thm) list
val get_all_thms = fn: string -> Proof.context -> (string * thm) list
val get_noneq_thms = fn: string -> Proof.context -> (string * thm) list
val template_eqs = fn:
   string -> Proof.context -> (string * thm * template) list
val template_thms = fn:
   string -> Proof.context -> (string * thm * template) list
### theory "Draft.ExtrEqs"
### 0.893s elapsed time, 2.982s cpu time, 1.221s GC time
### Partially applied constant "PAC_Polynomials_Term.less_eq_char" on left hand side of equation, in theorem:
### linorder.Min less_eq_char (set (?x # ?xs)) == fold char.min ?xs ?x
### Partially applied constant "PAC_Polynomials_Term.less_eq_char" on left hand side of equation, in theorem:
### linorder.Max less_eq_char (set (?x # ?xs)) == fold char.max ?xs ?x
### Partially applied constant "PAC_Polynomials_Term.less_eq_char" on left hand side of equation, in theorem:
### char.sorted [] == True
### Partially applied constant "PAC_Polynomials_Term.less_eq_char" on left hand side of equation, in theorem:
### char.sorted [?x] == True
### Partially applied constant "PAC_Polynomials_Term.less_eq_char" on left hand side of equation, in theorem:
### char.sorted (?x # ?y # ?zs) == less_eq_char ?x ?y & char.sorted (?y # ?zs)
### Partially applied constant "PAC_Polynomials_Term.less_eq_char" on left hand side of equation, in theorem:
### char.sorted_list_of_set (set ?xs) == char.sort (remdups ?xs)
### Partially applied constant "PAC_Polynomials_Term.less_char" on left hand side of equation, in theorem:
### char.part ?f ?pivot [] == ([], [], [])
### Partially applied constant "PAC_Polynomials_Term.less_char" on left hand side of equation, in theorem:
### char.part ?f ?pivot (?x # ?xs) ==
### let (lts, eqs, gts) = char.part ?f ?pivot ?xs; x' = ?f ?x
### in if less_char x' ?pivot then (?x # lts, eqs, gts)
###    else if less_char ?pivot x' then (lts, eqs, ?x # gts)
###         else (lts, ?x # eqs, gts)
### Partially applied constant "PAC_Polynomials_Term.less_eq_char" on left hand side of equation, in theorem:
### char.sort_key ?f ?xs ==
### case ?xs of [] => [] | [x] => ?xs
### | [x, y] => if less_eq_char (?f x) (?f y) then ?xs else [y, x]
### | x # y # ab # list =>
###     let (lts, eqs, gts) = char.part ?f (?f (?xs ! (length ?xs div 2))) ?xs
###     in char.sort_key ?f lts @ eqs @ char.sort_key ?f gts
### Partially applied constant "PAC_Polynomials_Term.less_eq_char" on left hand side of equation, in theorem:
### char.quicksort [] == []
### Partially applied constant "PAC_Polynomials_Term.less_eq_char" on left hand side of equation, in theorem:
### char.quicksort (?x # ?xs) ==
### char.quicksort (filter (%y. less_char y ?x) ?xs) @
### [?x] @ char.quicksort (filter (less_eq_char ?x) ?xs)
### theory "Draft.PAC_Polynomials_Term"
### 1.689s elapsed time, 3.599s cpu time, 0.471s GC time
Found termination order: "{}"
### theory "Draft.PAC_Checker_Specification"
### 4.262s elapsed time, 7.899s cpu time, 1.897s GC time
Loading theory "Draft.PAC_Polynomials_Operations" (required by "Draft.PAC_Checker_InitTemplates" via "Draft.PAC_Checker_Init" via "Draft.PAC_Checker")
Found termination order:
  "(%p. size_list (%p. (nat o abs) (snd p)) (snd p)) <*mlex*>
   (%p. size_list (%p. (nat o abs) (snd p)) (fst p)) <*mlex*> {}"
Found termination order:
  "(%p. size_list (size_list size) (snd p)) <*mlex*>
   (%p. size_list (size_list size) (fst p)) <*mlex*> {}"
### Ambiguous input (line 414 of "$AFP/PAC_Checker/PAC_Polynomials_Operations.thy") produces 4 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Set.member"
###     ("_tuple" ("_position" mult_monoms)
###       ("_tuple_arg"
###         ("_lambda" ("_pttrns" ("_position" a) ("_position" b))
###           ("_applC" ("_position" remdups_mset)
###             ("\<^const>Groups.plus_class.plus" ("_position" a)
###               ("_position" b))))))
###     ("\<^const>FuncSet.funcset" ("_position" term_poly_list_rel)
###       ("\<^const>FuncSet.funcset" ("_position" term_poly_list_rel)
###         ("_position" term_poly_list_rel)))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Set.member"
###     ("_tuple" ("_position" mult_monoms)
###       ("_tuple_arg"
###         ("_lambda" ("_pttrns" ("_position" a) ("_position" b))
###           ("_applC" ("_position" remdups_mset)
###             ("\<^const>Groups.plus_class.plus" ("_position" a)
###               ("_position" b))))))
###     ("\<^const>Relators.fun_rel_syn" ("_position" term_poly_list_rel)
###       ("\<^const>FuncSet.funcset" ("_position" term_poly_list_rel)
###         ("_position" term_poly_list_rel)))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Set.member"
###     ("_tuple" ("_position" mult_monoms)
###       ("_tuple_arg"
###         ("_lambda" ("_pttrns" ("_position" a) ("_position" b))
###           ("_applC" ("_position" remdups_mset)
###             ("\<^const>Groups.plus_class.plus" ("_position" a)
###               ("_position" b))))))
###     ("\<^const>FuncSet.funcset" ("_position" term_poly_list_rel)
###       ("\<^const>Relators.fun_rel_syn" ("_position" term_poly_list_rel)
###         ("_position" term_poly_list_rel)))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Set.member"
###     ("_tuple" ("_position" mult_monoms)
###       ("_tuple_arg"
###         ("_lambda" ("_pttrns" ("_position" a) ("_position" b))
###           ("_applC" ("_position" remdups_mset)
###             ("\<^const>Groups.plus_class.plus" ("_position" a)
###               ("_position" b))))))
###     ("\<^const>Relators.fun_rel_syn" ("_position" term_poly_list_rel)
###       ("\<^const>Relators.fun_rel_syn" ("_position" term_poly_list_rel)
###         ("_position" term_poly_list_rel)))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
Found termination order: "(%p. length (snd (snd p))) <*mlex*> {}"
Found termination order: "size_list (%p. (nat o abs) (snd p)) <*mlex*> {}"
Found termination order: "size_list (%p. (nat o abs) (snd p)) <*mlex*> {}"
Found termination order: "length <*mlex*> {}"
locale poly_embed
  fixes \<phi> :: "char list => nat"
  assumes "poly_embed \<phi>"
### theory "Draft.PAC_Polynomials_Operations"
### 3.564s elapsed time, 3.891s cpu time, 0.417s GC time
Loading theory "Draft.PAC_Checker" (required by "Draft.PAC_Checker_InitTemplates" via "Draft.PAC_Checker_Init")
Found termination order: "{}"
Found termination order: "{}"
Found termination order: "{}"
consts
  insort_key_rel :: "('b => 'b => bool) => 'b => 'b list => 'b list"
locale poly_embed
  fixes \<phi> :: "char list => nat"
  assumes "poly_embed \<phi>"
See theory exports
locale poly_embed
  fixes \<phi> :: "char list => nat"
  assumes "poly_embed \<phi>"
"normalize_poly_spec"
  :: "int mpoly => int mpoly nres"
(?p, ?p') : fully_unsorted_poly_rel O mset_poly_rel ==>
full_normalize_poly ?p
<= \<Down> (sorted_poly_rel O mset_poly_rel) (normalize_poly_spec ?p')
### theory "Draft.PAC_Checker"
### 5.287s elapsed time, 6.604s cpu time, 0.712s GC time
Loading theory "Draft.PAC_Checker_Relation" (required by "Draft.PAC_Checker_InitTemplates" via "Draft.PAC_Checker_Init")
instantiation
  uint32 :: hashable
  hashcode_uint32 == hashcode :: uint32 => uint32
  def_hashmap_size_uint32 == def_hashmap_size :: uint32 itself => nat
instantiation
  uint64 :: hashable
  hashcode_uint64 == hashcode :: uint64 => uint32
  def_hashmap_size_uint64 == def_hashmap_size :: uint64 itself => nat
### Ambiguous input (line 83 of "$AFP/PAC_Checker/PAC_Checker_Relation.thy") produces 4 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Set.member"
###     ("_tuple" ("\<^const>HOL.eq") ("_tuple_arg" ("\<^const>HOL.eq")))
###     ("\<^const>FuncSet.funcset" ("_position" string_rel)
###       ("\<^const>FuncSet.funcset" ("_position" string_rel)
###         ("_position" bool_rel)))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Set.member"
###     ("_tuple" ("\<^const>HOL.eq") ("_tuple_arg" ("\<^const>HOL.eq")))
###     ("\<^const>Relators.fun_rel_syn" ("_position" string_rel)
###       ("\<^const>FuncSet.funcset" ("_position" string_rel)
###         ("_position" bool_rel)))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Set.member"
###     ("_tuple" ("\<^const>HOL.eq") ("_tuple_arg" ("\<^const>HOL.eq")))
###     ("\<^const>FuncSet.funcset" ("_position" string_rel)
###       ("\<^const>Relators.fun_rel_syn" ("_position" string_rel)
###         ("_position" bool_rel)))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Set.member"
###     ("_tuple" ("\<^const>HOL.eq") ("_tuple_arg" ("\<^const>HOL.eq")))
###     ("\<^const>Relators.fun_rel_syn" ("_position" string_rel)
###       ("\<^const>Relators.fun_rel_syn" ("_position" string_rel)
###         ("_position" bool_rel)))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
instantiation
  char :: linorder
  less_eq_char == less_eq :: char => char => bool
  less_char == less :: char => char => bool
instantiation
  list :: (linorder) linorder
  less_eq_list == less_eq :: 'a list => 'a list => bool
  less_list == less :: 'a list => 'a list => bool
### Ambiguous input (line 338 of "$AFP/PAC_Checker/PAC_Checker_Relation.thy") produces 4 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Set.member"
###     ("_tuple" ("\<^const>Orderings.ord_class.less")
###       ("_tuple_arg" ("\<^const>Orderings.ord_class.less")))
###     ("\<^const>FuncSet.funcset"
###       ("_rel_APP" ("_position" string_rel) ("_position" list_rel))
###       ("\<^const>FuncSet.funcset"
###         ("_rel_APP" ("_position" string_rel) ("_position" list_rel))
###         ("_position" bool_rel)))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Set.member"
###     ("_tuple" ("\<^const>Orderings.ord_class.less")
###       ("_tuple_arg" ("\<^const>Orderings.ord_class.less")))
###     ("\<^const>Relators.fun_rel_syn"
###       ("_rel_APP" ("_position" string_rel) ("_position" list_rel))
###       ("\<^const>FuncSet.funcset"
###         ("_rel_APP" ("_position" string_rel) ("_position" list_rel))
###         ("_position" bool_rel)))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Set.member"
###     ("_tuple" ("\<^const>Orderings.ord_class.less")
###       ("_tuple_arg" ("\<^const>Orderings.ord_class.less")))
###     ("\<^const>FuncSet.funcset"
###       ("_rel_APP" ("_position" string_rel) ("_position" list_rel))
###       ("\<^const>Relators.fun_rel_syn"
###         ("_rel_APP" ("_position" string_rel) ("_position" list_rel))
###         ("_position" bool_rel)))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Set.member"
###     ("_tuple" ("\<^const>Orderings.ord_class.less")
###       ("_tuple_arg" ("\<^const>Orderings.ord_class.less")))
###     ("\<^const>Relators.fun_rel_syn"
###       ("_rel_APP" ("_position" string_rel) ("_position" list_rel))
###       ("\<^const>Relators.fun_rel_syn"
###         ("_rel_APP" ("_position" string_rel) ("_position" list_rel))
###         ("_position" bool_rel)))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 344 of "$AFP/PAC_Checker/PAC_Checker_Relation.thy") produces 4 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Set.member"
###     ("_tuple" ("_position" remove1) ("_tuple_arg" ("_position" remove1)))
###     ("\<^const>FuncSet.funcset" ("_position" R)
###       ("\<^const>FuncSet.funcset"
###         ("_rel_APP" ("_position" R) ("_position" list_rel))
###         ("_rel_APP" ("_position" R) ("_position" list_rel))))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Set.member"
###     ("_tuple" ("_position" remove1) ("_tuple_arg" ("_position" remove1)))
###     ("\<^const>Relators.fun_rel_syn" ("_position" R)
###       ("\<^const>FuncSet.funcset"
###         ("_rel_APP" ("_position" R) ("_position" list_rel))
###         ("_rel_APP" ("_position" R) ("_position" list_rel))))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Set.member"
###     ("_tuple" ("_position" remove1) ("_tuple_arg" ("_position" remove1)))
###     ("\<^const>FuncSet.funcset" ("_position" R)
###       ("\<^const>Relators.fun_rel_syn"
###         ("_rel_APP" ("_position" R) ("_position" list_rel))
###         ("_rel_APP" ("_position" R) ("_position" list_rel))))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Set.member"
###     ("_tuple" ("_position" remove1) ("_tuple_arg" ("_position" remove1)))
###     ("\<^const>Relators.fun_rel_syn" ("_position" R)
###       ("\<^const>Relators.fun_rel_syn"
###         ("_rel_APP" ("_position" R) ("_position" list_rel))
###         ("_rel_APP" ("_position" R) ("_position" list_rel))))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
instantiation
  pac_step :: (heap, heap, heap) heap
### theory "Draft.PAC_Checker_Relation"
### 0.913s elapsed time, 0.986s cpu time, 0.098s GC time
Loading theory "Draft.PAC_Checker_Init" (required by "Draft.PAC_Checker_InitTemplates")
Found termination order:
  "(%p. length (snd (snd p))) <*mlex*>
   (%p. length (fst (snd p))) <*mlex*> {}"
### Ambiguous input (line 46 of "$AFP/PAC_Checker/PAC_Checker_Init.thy") produces 4 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("_applC" ("_position" msort)
###       ("_cargs" ("_position" f) ("_position" xs)))
###     ("_applC" ("_position" merge)
###       ("_cargs" ("_position" f)
###         ("_cargs"
###           ("_applC" ("_position" msort)
###             ("_cargs" ("_position" f)
###               ("_applC" ("_position" take)
###                 ("_cargs"
###                   ("\<^const>MPoly_Type.div"
###                     ("_applC" ("_position" size) ("_position" xs))
###                     ("_Numeral" ("_constify" ("_position" 2))))
###                   ("_position" xs)))))
###           ("_applC" ("_position" msort)
###             ("_cargs" ("_position" f)
###               ("_applC" ("_position" drop)
###                 ("_cargs"
###                   ("\<^const>Rings.divide_class.divide"
###                     ("_applC" ("_position" size) ("_position" xs))
###                     ("_Numeral" ("_constify" ("_position" 2))))
###                   ("_position" xs))))))))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("_applC" ("_position" msort)
###       ("_cargs" ("_position" f) ("_position" xs)))
###     ("_applC" ("_position" merge)
###       ("_cargs" ("_position" f)
###         ("_cargs"
###           ("_applC" ("_position" msort)
###             ("_cargs" ("_position" f)
###               ("_applC" ("_position" take)
###                 ("_cargs"
###                   ("\<^const>Rings.divide_class.divide"
###                     ("_applC" ("_position" size) ("_position" xs))
###                     ("_Numeral" ("_constify" ("_position" 2))))
###                   ("_position" xs)))))
###           ("_applC" ("_position" msort)
###             ("_cargs" ("_position" f)
###               ("_applC" ("_position" drop)
###                 ("_cargs"
###                   ("\<^const>Rings.divide_class.divide"
###                     ("_applC" ("_position" size) ("_position" xs))
###                     ("_Numeral" ("_constify" ("_position" 2))))
###                   ("_position" xs))))))))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("_applC" ("_position" msort)
###       ("_cargs" ("_position" f) ("_position" xs)))
###     ("_applC" ("_position" merge)
###       ("_cargs" ("_position" f)
###         ("_cargs"
###           ("_applC" ("_position" msort)
###             ("_cargs" ("_position" f)
###               ("_applC" ("_position" take)
###                 ("_cargs"
###                   ("\<^const>MPoly_Type.div"
###                     ("_applC" ("_position" size) ("_position" xs))
###                     ("_Numeral" ("_constify" ("_position" 2))))
###                   ("_position" xs)))))
###           ("_applC" ("_position" msort)
###             ("_cargs" ("_position" f)
###               ("_applC" ("_position" drop)
###                 ("_cargs"
###                   ("\<^const>MPoly_Type.div"
###                     ("_applC" ("_position" size) ("_position" xs))
###                     ("_Numeral" ("_constify" ("_position" 2))))
###                   ("_position" xs))))))))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("_applC" ("_position" msort)
###       ("_cargs" ("_position" f) ("_position" xs)))
###     ("_applC" ("_position" merge)
###       ("_cargs" ("_position" f)
###         ("_cargs"
###           ("_applC" ("_position" msort)
###             ("_cargs" ("_position" f)
###               ("_applC" ("_position" take)
###                 ("_cargs"
###                   ("\<^const>Rings.divide_class.divide"
###                     ("_applC" ("_position" size) ("_position" xs))
###                     ("_Numeral" ("_constify" ("_position" 2))))
###                   ("_position" xs)))))
###           ("_applC" ("_position" msort)
###             ("_cargs" ("_position" f)
###               ("_applC" ("_position" drop)
###                 ("_cargs"
###                   ("\<^const>MPoly_Type.div"
###                     ("_applC" ("_position" size) ("_position" xs))
###                     ("_Numeral" ("_constify" ("_position" 2))))
###                   ("_position" xs))))))))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
Found termination order: "(%p. length (snd p)) <*mlex*> {}"
Found termination order: "{}"
### Ambiguous input (line 68 of "$AFP/PAC_Checker/PAC_Checker_Init.thy") produces 4 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("_applC" ("_position" msort2)
###       ("_cargs" ("_position" f) ("_position" xs)))
###     ("_applC" ("_position" merge)
###       ("_cargs" ("_position" f)
###         ("_cargs"
###           ("_applC" ("_position" msort)
###             ("_cargs" ("_position" f)
###               ("_applC" ("_position" take)
###                 ("_cargs"
###                   ("\<^const>MPoly_Type.div"
###                     ("_applC" ("_position" size) ("_position" xs))
###                     ("_Numeral" ("_constify" ("_position" 2))))
###                   ("_position" xs)))))
###           ("_applC" ("_position" msort)
###             ("_cargs" ("_position" f)
###               ("_applC" ("_position" drop)
###                 ("_cargs"
###                   ("\<^const>Rings.divide_class.divide"
###                     ("_applC" ("_position" size) ("_position" xs))
###                     ("_Numeral" ("_constify" ("_position" 2))))
###                   ("_position" xs))))))))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("_applC" ("_position" msort2)
###       ("_cargs" ("_position" f) ("_position" xs)))
###     ("_applC" ("_position" merge)
###       ("_cargs" ("_position" f)
###         ("_cargs"
###           ("_applC" ("_position" msort)
###             ("_cargs" ("_position" f)
###               ("_applC" ("_position" take)
###                 ("_cargs"
###                   ("\<^const>Rings.divide_class.divide"
###                     ("_applC" ("_position" size) ("_position" xs))
###                     ("_Numeral" ("_constify" ("_position" 2))))
###                   ("_position" xs)))))
###           ("_applC" ("_position" msort)
###             ("_cargs" ("_position" f)
###               ("_applC" ("_position" drop)
###                 ("_cargs"
###                   ("\<^const>Rings.divide_class.divide"
###                     ("_applC" ("_position" size) ("_position" xs))
###                     ("_Numeral" ("_constify" ("_position" 2))))
###                   ("_position" xs))))))))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("_applC" ("_position" msort2)
###       ("_cargs" ("_position" f) ("_position" xs)))
###     ("_applC" ("_position" merge)
###       ("_cargs" ("_position" f)
###         ("_cargs"
###           ("_applC" ("_position" msort)
###             ("_cargs" ("_position" f)
###               ("_applC" ("_position" take)
###                 ("_cargs"
###                   ("\<^const>MPoly_Type.div"
###                     ("_applC" ("_position" size) ("_position" xs))
###                     ("_Numeral" ("_constify" ("_position" 2))))
###                   ("_position" xs)))))
###           ("_applC" ("_position" msort)
###             ("_cargs" ("_position" f)
###               ("_applC" ("_position" drop)
###                 ("_cargs"
###                   ("\<^const>MPoly_Type.div"
###                     ("_applC" ("_position" size) ("_position" xs))
###                     ("_Numeral" ("_constify" ("_position" 2))))
###                   ("_position" xs))))))))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("_applC" ("_position" msort2)
###       ("_cargs" ("_position" f) ("_position" xs)))
###     ("_applC" ("_position" merge)
###       ("_cargs" ("_position" f)
###         ("_cargs"
###           ("_applC" ("_position" msort)
###             ("_cargs" ("_position" f)
###               ("_applC" ("_position" take)
###                 ("_cargs"
###                   ("\<^const>Rings.divide_class.divide"
###                     ("_applC" ("_position" size) ("_position" xs))
###                     ("_Numeral" ("_constify" ("_position" 2))))
###                   ("_position" xs)))))
###           ("_applC" ("_position" msort)
###             ("_cargs" ("_position" f)
###               ("_applC" ("_position" drop)
###                 ("_cargs"
###                   ("\<^const>MPoly_Type.div"
###                     ("_applC" ("_position" size) ("_position" xs))
###                     ("_Numeral" ("_constify" ("_position" 2))))
###                   ("_position" xs))))))))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
Found termination order: "{}"
### Cannot skip proof of schematic goal statement
merge_coeffs_impl ==
heap.fixp_fun
 (%cf px.
     case px of [] => return [] | [(a1, a2)] => return px
     | (a1, a2) # (a1a, a2a) # l'a =>
         if a1 = a1a
         then if a2 + a2a ~= 0 then cf (op_list_prepend (a1, a2 + a2a) l'a)
              else cf l'a
         else cf (op_list_prepend (a1a, a2a) l'a) >>=
              (%x'c. return (op_list_prepend (a1, a2) x'c)))
(merge_coeffs_impl, RETURN o merge_coeffs)
: poly_assn\<^sup>d \<rightarrow>\<^sub>a poly_assn
"partition_between_ref"
  :: "('a => 'a => bool)
      => ('b => 'a) => nat => nat => 'b list => ('b list * nat) nres"
### Ambiguous input (line 280 of "$AFP/PAC_Checker/PAC_Checker_Init.thy") produces 4 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("_applC" ("_position" msort_poly_impl) ("_position" xs))
###     ("_case_syntax" ("_position" xs)
###       ("_case2"
###         ("_case1" ("\<^const>List.list.Nil") ("\<^const>List.list.Nil"))
###         ("_case2"
###           ("_case1" ("_list" ("_position" a)) ("_list" ("_position" a)))
###           ("_case2"
###             ("_case1" ("_list" ("_args" ("_position" a) ("_position" b)))
###               ("\<^const>HOL.If"
###                 ("\<^const>Orderings.ord_class.less_eq"
###                   ("_applC" ("_position" fst) ("_position" a))
###                   ("_applC" ("_position" fst) ("_position" b)))
###                 ("_list" ("_args" ("_position" a) ("_position" b)))
###                 ("_list" ("_args" ("_position" b) ("_position" a)))))
###             ("_case1" ("_position" xs)
###               ("_applC" ("_position" merge_poly)
###                 ("_cargs"
###                   ("_applC" ("_position" msort_poly_impl)
###                     ("_applC" ("_position" take)
###                       ("_cargs"
###                         ("\<^const>MPoly_Type.div"
###                           ("_applC" ("_position" length) ("_position" xs))
###                           ("_Numeral" ("_constify" ("_position" 2))))
###                         ("_position" xs))))
###                   ("_applC" ("_position" msort_poly_impl)
###                     ("_applC" ("_position" drop)
###                       ("_cargs"
###                         ("\<^const>Rings.divide_class.divide"
###                           ("_applC" ("_position" length) ("_position" xs))
###                           ("_Numeral" ("_constify" ("_position" 2))))
###                         ("_position" xs)))))))))))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("_applC" ("_position" msort_poly_impl) ("_position" xs))
###     ("_case_syntax" ("_position" xs)
###       ("_case2"
###         ("_case1" ("\<^const>List.list.Nil") ("\<^const>List.list.Nil"))
###         ("_case2"
###           ("_case1" ("_list" ("_position" a)) ("_list" ("_position" a)))
###           ("_case2"
###             ("_case1" ("_list" ("_args" ("_position" a) ("_position" b)))
###               ("\<^const>HOL.If"
###                 ("\<^const>Orderings.ord_class.less_eq"
###                   ("_applC" ("_position" fst) ("_position" a))
###                   ("_applC" ("_position" fst) ("_position" b)))
###                 ("_list" ("_args" ("_position" a) ("_position" b)))
###                 ("_list" ("_args" ("_position" b) ("_position" a)))))
###             ("_case1" ("_position" xs)
###               ("_applC" ("_position" merge_poly)
###                 ("_cargs"
###                   ("_applC" ("_position" msort_poly_impl)
###                     ("_applC" ("_position" take)
###                       ("_cargs"
###                         ("\<^const>Rings.divide_class.divide"
###                           ("_applC" ("_position" length) ("_position" xs))
###                           ("_Numeral" ("_constify" ("_position" 2))))
###                         ("_position" xs))))
###                   ("_applC" ("_position" msort_poly_impl)
###                     ("_applC" ("_position" drop)
###                       ("_cargs"
###                         ("\<^const>Rings.divide_class.divide"
###                           ("_applC" ("_position" length) ("_position" xs))
###                           ("_Numeral" ("_constify" ("_position" 2))))
###                         ("_position" xs)))))))))))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("_applC" ("_position" msort_poly_impl) ("_position" xs))
###     ("_case_syntax" ("_position" xs)
###       ("_case2"
###         ("_case1" ("\<^const>List.list.Nil") ("\<^const>List.list.Nil"))
###         ("_case2"
###           ("_case1" ("_list" ("_position" a)) ("_list" ("_position" a)))
###           ("_case2"
###             ("_case1" ("_list" ("_args" ("_position" a) ("_position" b)))
###               ("\<^const>HOL.If"
###                 ("\<^const>Orderings.ord_class.less_eq"
###                   ("_applC" ("_position" fst) ("_position" a))
###                   ("_applC" ("_position" fst) ("_position" b)))
###                 ("_list" ("_args" ("_position" a) ("_position" b)))
###                 ("_list" ("_args" ("_position" b) ("_position" a)))))
###             ("_case1" ("_position" xs)
###               ("_applC" ("_position" merge_poly)
###                 ("_cargs"
###                   ("_applC" ("_position" msort_poly_impl)
###                     ("_applC" ("_position" take)
###                       ("_cargs"
###                         ("\<^const>MPoly_Type.div"
###                           ("_applC" ("_position" length) ("_position" xs))
###                           ("_Numeral" ("_constify" ("_position" 2))))
###                         ("_position" xs))))
###                   ("_applC" ("_position" msort_poly_impl)
###                     ("_applC" ("_position" drop)
###                       ("_cargs"
###                         ("\<^const>MPoly_Type.div"
###                           ("_applC" ("_position" length) ("_position" xs))
###                           ("_Numeral" ("_constify" ("_position" 2))))
###                         ("_position" xs)))))))))))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("_applC" ("_position" msort_poly_impl) ("_position" xs))
###     ("_case_syntax" ("_position" xs)
###       ("_case2"
###         ("_case1" ("\<^const>List.list.Nil") ("\<^const>List.list.Nil"))
###         ("_case2"
###           ("_case1" ("_list" ("_position" a)) ("_list" ("_position" a)))
###           ("_case2"
###             ("_case1" ("_list" ("_args" ("_position" a) ("_position" b)))
###               ("\<^const>HOL.If"
###                 ("\<^const>Orderings.ord_class.less_eq"
###                   ("_applC" ("_position" fst) ("_position" a))
###                   ("_applC" ("_position" fst) ("_position" b)))
###                 ("_list" ("_args" ("_position" a) ("_position" b)))
###                 ("_list" ("_args" ("_position" b) ("_position" a)))))
###             ("_case1" ("_position" xs)
###               ("_applC" ("_position" merge_poly)
###                 ("_cargs"
###                   ("_applC" ("_position" msort_poly_impl)
###                     ("_applC" ("_position" take)
###                       ("_cargs"
###                         ("\<^const>Rings.divide_class.divide"
###                           ("_applC" ("_position" length) ("_position" xs))
###                           ("_Numeral" ("_constify" ("_position" 2))))
###                         ("_position" xs))))
###                   ("_applC" ("_position" msort_poly_impl)
###                     ("_applC" ("_position" drop)
###                       ("_cargs"
###                         ("\<^const>MPoly_Type.div"
###                           ("_applC" ("_position" length) ("_position" xs))
###                           ("_Numeral" ("_constify" ("_position" 2))))
###                         ("_position" xs)))))))))))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
Found termination order: "(%p. length (snd p)) <*mlex*> {}"
### Ambiguous input (line 369 of "$AFP/PAC_Checker/PAC_Checker_Init.thy") produces 4 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Set.member"
###     ("_tuple" ("\<^const>Orderings.ord_class.less")
###       ("_tuple_arg" ("_position" var_order')))
###     ("\<^const>FuncSet.funcset" ("_position" string_rel)
###       ("\<^const>FuncSet.funcset" ("_position" string_rel)
###         ("_position" bool_rel)))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Set.member"
###     ("_tuple" ("\<^const>Orderings.ord_class.less")
###       ("_tuple_arg" ("_position" var_order')))
###     ("\<^const>Relators.fun_rel_syn" ("_position" string_rel)
###       ("\<^const>FuncSet.funcset" ("_position" string_rel)
###         ("_position" bool_rel)))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Set.member"
###     ("_tuple" ("\<^const>Orderings.ord_class.less")
###       ("_tuple_arg" ("_position" var_order')))
###     ("\<^const>FuncSet.funcset" ("_position" string_rel)
###       ("\<^const>Relators.fun_rel_syn" ("_position" string_rel)
###         ("_position" bool_rel)))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Set.member"
###     ("_tuple" ("\<^const>Orderings.ord_class.less")
###       ("_tuple_arg" ("_position" var_order')))
###     ("\<^const>Relators.fun_rel_syn" ("_position" string_rel)
###       ("\<^const>Relators.fun_rel_syn" ("_position" string_rel)
###         ("_position" bool_rel)))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 379 of "$AFP/PAC_Checker/PAC_Checker_Init.thy") produces 4 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Set.member"
###     ("_tuple" ("\<^const>Orderings.ord_class.less_eq")
###       ("_tuple_arg" ("\<^const>Orderings.ord_class.less_eq")))
###     ("\<^const>FuncSet.funcset" ("_position" monom_rel)
###       ("\<^const>FuncSet.funcset" ("_position" monom_rel)
###         ("_position" bool_rel)))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Set.member"
###     ("_tuple" ("\<^const>Orderings.ord_class.less_eq")
###       ("_tuple_arg" ("\<^const>Orderings.ord_class.less_eq")))
###     ("\<^const>Relators.fun_rel_syn" ("_position" monom_rel)
###       ("\<^const>FuncSet.funcset" ("_position" monom_rel)
###         ("_position" bool_rel)))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Set.member"
###     ("_tuple" ("\<^const>Orderings.ord_class.less_eq")
###       ("_tuple_arg" ("\<^const>Orderings.ord_class.less_eq")))
###     ("\<^const>FuncSet.funcset" ("_position" monom_rel)
###       ("\<^const>Relators.fun_rel_syn" ("_position" monom_rel)
###         ("_position" bool_rel)))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Set.member"
###     ("_tuple" ("\<^const>Orderings.ord_class.less_eq")
###       ("_tuple_arg" ("\<^const>Orderings.ord_class.less_eq")))
###     ("\<^const>Relators.fun_rel_syn" ("_position" monom_rel)
###       ("\<^const>Relators.fun_rel_syn" ("_position" monom_rel)
###         ("_position" bool_rel)))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 384 of "$AFP/PAC_Checker/PAC_Checker_Init.thy") produces 4 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Set.member"
###     ("_tuple" ("\<^const>Orderings.ord_class.less")
###       ("_tuple_arg" ("\<^const>Orderings.ord_class.less")))
###     ("\<^const>FuncSet.funcset" ("_position" string_rel)
###       ("\<^const>FuncSet.funcset" ("_position" string_rel)
###         ("_position" bool_rel)))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Set.member"
###     ("_tuple" ("\<^const>Orderings.ord_class.less")
###       ("_tuple_arg" ("\<^const>Orderings.ord_class.less")))
###     ("\<^const>Relators.fun_rel_syn" ("_position" string_rel)
###       ("\<^const>FuncSet.funcset" ("_position" string_rel)
###         ("_position" bool_rel)))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Set.member"
###     ("_tuple" ("\<^const>Orderings.ord_class.less")
###       ("_tuple_arg" ("\<^const>Orderings.ord_class.less")))
###     ("\<^const>FuncSet.funcset" ("_position" string_rel)
###       ("\<^const>Relators.fun_rel_syn" ("_position" string_rel)
###         ("_position" bool_rel)))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Set.member"
###     ("_tuple" ("\<^const>Orderings.ord_class.less")
###       ("_tuple_arg" ("\<^const>Orderings.ord_class.less")))
###     ("\<^const>Relators.fun_rel_syn" ("_position" string_rel)
###       ("\<^const>Relators.fun_rel_syn" ("_position" string_rel)
###         ("_position" bool_rel)))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 410 of "$AFP/PAC_Checker/PAC_Checker_Init.thy") produces 4 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Set.member"
###     ("_tuple" ("\<^const>Orderings.ord_class.less_eq")
###       ("_tuple_arg" ("\<^const>Orderings.ord_class.less_eq")))
###     ("\<^const>FuncSet.funcset" ("_position" string_rel)
###       ("\<^const>FuncSet.funcset" ("_position" string_rel)
###         ("_position" bool_rel)))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Set.member"
###     ("_tuple" ("\<^const>Orderings.ord_class.less_eq")
###       ("_tuple_arg" ("\<^const>Orderings.ord_class.less_eq")))
###     ("\<^const>Relators.fun_rel_syn" ("_position" string_rel)
###       ("\<^const>FuncSet.funcset" ("_position" string_rel)
###         ("_position" bool_rel)))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Set.member"
###     ("_tuple" ("\<^const>Orderings.ord_class.less_eq")
###       ("_tuple_arg" ("\<^const>Orderings.ord_class.less_eq")))
###     ("\<^const>FuncSet.funcset" ("_position" string_rel)
###       ("\<^const>Relators.fun_rel_syn" ("_position" string_rel)
###         ("_position" bool_rel)))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Set.member"
###     ("_tuple" ("\<^const>Orderings.ord_class.less_eq")
###       ("_tuple_arg" ("\<^const>Orderings.ord_class.less_eq")))
###     ("\<^const>Relators.fun_rel_syn" ("_position" string_rel)
###       ("\<^const>Relators.fun_rel_syn" ("_position" string_rel)
###         ("_position" bool_rel)))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
lexord_eq ::\<^sub>i TYPE(?'a list => ?'a list => bool)
### Cannot skip proof of schematic goal statement
lexord_eq_term ==
%ai bi.
   heap.fixp_fun
    (%cf (a1, a2).
        case a1 of [] => return True
        | x'a # l' =>
            case a2 of [] => return False
            | x'b # l'a =>
                if x'a < x'b then return True
                else if x'a = x'b then cf (l', l'a) else return False)
    (ai, bi)
(uncurry lexord_eq_term, uncurry (RETURN \<circ>\<circ> lexord_eq))
: monom_assn\<^sup>k *\<^sub>a
  monom_assn\<^sup>k \<rightarrow>\<^sub>a bool_assn
### Ambiguous input (line 449 of "$AFP/PAC_Checker/PAC_Checker_Init.thy") produces 4 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("\<^const>Fun.comp" ("_position" RETURN)
###       ("_applC" ("_position" msort) ("_position" f)))
###     ("_applC" ("\<^const>RefineG_Recursion.RECT")
###       ("_lambda" ("_pttrns" ("_position" g) ("_position" xs))
###         ("_case_syntax" ("_position" xs)
###           ("_case2"
###             ("_case1" ("\<^const>List.list.Nil")
###               ("_applC" ("_position" RETURN) ("\<^const>List.list.Nil")))
###             ("_case2"
###               ("_case1" ("_list" ("_position" x))
###                 ("_applC" ("_position" RETURN) ("_list" ("_position" x))))
###               ("_case1" ("\<^const>Pure.dummy_pattern")
###                 ("_do_block"
###                   ("_do_cons"
###                     ("_do_bind" ("_position" a)
###                       ("_applC" ("_position" g)
###                         ("_applC" ("_position" take)
###                           ("_cargs"
###                             ("\<^const>MPoly_Type.div"
###                               ("_applC" ("_position" size) ("_position" xs))
###                               ("_Numeral" ("_constify" ("_position" 2))))
###                             ("_position" xs)))))
###                     ("_do_cons"
###                       ("_do_bind" ("_position" b)
###                         ("_applC" ("_position" g)
###                           ("_applC" ("_position" drop)
###                             ("_cargs"
###                               ("\<^const>MPoly_Type.div"
###                                 ("_applC" ("_position" size)
###                                   ("_position" xs))
###                                 ("_Numeral" ("_constify" ("_position" 2))))
###                               ("_position" xs)))))
###                       ("_do_final"
###                         ("_applC" ("_position" RETURN)
###                           ("_applC" ("_position" merge)
###                             ("_cargs" ("_position" f)
###                               ("_cargs" ("_position" a)
###                                 ("_position" b)))))))))))))))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("\<^const>Fun.comp" ("_position" RETURN)
###       ("_applC" ("_position" msort) ("_position" f)))
###     ("_applC" ("\<^const>RefineG_Recursion.RECT")
###       ("_lambda" ("_pttrns" ("_position" g) ("_position" xs))
###         ("_case_syntax" ("_position" xs)
###           ("_case2"
###             ("_case1" ("\<^const>List.list.Nil")
###               ("_applC" ("_position" RETURN) ("\<^const>List.list.Nil")))
###             ("_case2"
###               ("_case1" ("_list" ("_position" x))
###                 ("_applC" ("_position" RETURN) ("_list" ("_position" x))))
###               ("_case1" ("\<^const>Pure.dummy_pattern")
###                 ("_do_block"
###                   ("_do_cons"
###                     ("_do_bind" ("_position" a)
###                       ("_applC" ("_position" g)
###                         ("_applC" ("_position" take)
###                           ("_cargs"
###                             ("\<^const>Rings.divide_class.divide"
###                               ("_applC" ("_position" size) ("_position" xs))
###                               ("_Numeral" ("_constify" ("_position" 2))))
###                             ("_position" xs)))))
###                     ("_do_cons"
###                       ("_do_bind" ("_position" b)
###                         ("_applC" ("_position" g)
###                           ("_applC" ("_position" drop)
###                             ("_cargs"
###                               ("\<^const>MPoly_Type.div"
###                                 ("_applC" ("_position" size)
###                                   ("_position" xs))
###                                 ("_Numeral" ("_constify" ("_position" 2))))
###                               ("_position" xs)))))
###                       ("_do_final"
###                         ("_applC" ("_position" RETURN)
###                           ("_applC" ("_position" merge)
###                             ("_cargs" ("_position" f)
###                               ("_cargs" ("_position" a)
###                                 ("_position" b)))))))))))))))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("\<^const>Fun.comp" ("_position" RETURN)
###       ("_applC" ("_position" msort) ("_position" f)))
###     ("_applC" ("\<^const>RefineG_Recursion.RECT")
###       ("_lambda" ("_pttrns" ("_position" g) ("_position" xs))
###         ("_case_syntax" ("_position" xs)
###           ("_case2"
###             ("_case1" ("\<^const>List.list.Nil")
###               ("_applC" ("_position" RETURN) ("\<^const>List.list.Nil")))
###             ("_case2"
###               ("_case1" ("_list" ("_position" x))
###                 ("_applC" ("_position" RETURN) ("_list" ("_position" x))))
###               ("_case1" ("\<^const>Pure.dummy_pattern")
###                 ("_do_block"
###                   ("_do_cons"
###                     ("_do_bind" ("_position" a)
###                       ("_applC" ("_position" g)
###                         ("_applC" ("_position" take)
###                           ("_cargs"
###                             ("\<^const>MPoly_Type.div"
###                               ("_applC" ("_position" size) ("_position" xs))
###                               ("_Numeral" ("_constify" ("_position" 2))))
###                             ("_position" xs)))))
###                     ("_do_cons"
###                       ("_do_bind" ("_position" b)
###                         ("_applC" ("_position" g)
###                           ("_applC" ("_position" drop)
###                             ("_cargs"
###                               ("\<^const>Rings.divide_class.divide"
###                                 ("_applC" ("_position" size)
###                                   ("_position" xs))
###                                 ("_Numeral" ("_constify" ("_position" 2))))
###                               ("_position" xs)))))
###                       ("_do_final"
###                         ("_applC" ("_position" RETURN)
###                           ("_applC" ("_position" merge)
###                             ("_cargs" ("_position" f)
###                               ("_cargs" ("_position" a)
###                                 ("_position" b)))))))))))))))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("\<^const>Fun.comp" ("_position" RETURN)
###       ("_applC" ("_position" msort) ("_position" f)))
###     ("_applC" ("\<^const>RefineG_Recursion.RECT")
###       ("_lambda" ("_pttrns" ("_position" g) ("_position" xs))
###         ("_case_syntax" ("_position" xs)
###           ("_case2"
###             ("_case1" ("\<^const>List.list.Nil")
###               ("_applC" ("_position" RETURN) ("\<^const>List.list.Nil")))
###             ("_case2"
###               ("_case1" ("_list" ("_position" x))
###                 ("_applC" ("_position" RETURN) ("_list" ("_position" x))))
###               ("_case1" ("\<^const>Pure.dummy_pattern")
###                 ("_do_block"
###                   ("_do_cons"
###                     ("_do_bind" ("_position" a)
###                       ("_applC" ("_position" g)
###                         ("_applC" ("_position" take)
###                           ("_cargs"
###                             ("\<^const>Rings.divide_class.divide"
###                               ("_applC" ("_position" size) ("_position" xs))
###                               ("_Numeral" ("_constify" ("_position" 2))))
###                             ("_position" xs)))))
###                     ("_do_cons"
###                       ("_do_bind" ("_position" b)
###                         ("_applC" ("_position" g)
###                           ("_applC" ("_position" drop)
###                             ("_cargs"
###                               ("\<^const>Rings.divide_class.divide"
###                                 ("_applC" ("_position" size)
###                                   ("_position" xs))
###                                 ("_Numeral" ("_constify" ("_position" 2))))
###                               ("_position" xs)))))
###                       ("_do_final"
###                         ("_applC" ("_position" RETURN)
###                           ("_applC" ("_position" merge)
###                             ("_cargs" ("_position" f)
###                               ("_cargs" ("_position" a)
###                                 ("_position" b)))))))))))))))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 504 of "$AFP/PAC_Checker/PAC_Checker_Init.thy") produces 4 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Set.member"
###     ("_tuple" ("_position" merge_poly)
###       ("_tuple_arg" ("_position" merge_poly)))
###     ("\<^const>FuncSet.funcset" ("_position" poly_rel)
###       ("\<^const>FuncSet.funcset" ("_position" poly_rel)
###         ("_position" poly_rel)))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Set.member"
###     ("_tuple" ("_position" merge_poly)
###       ("_tuple_arg" ("_position" merge_poly)))
###     ("\<^const>Relators.fun_rel_syn" ("_position" poly_rel)
###       ("\<^const>FuncSet.funcset" ("_position" poly_rel)
###         ("_position" poly_rel)))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Set.member"
###     ("_tuple" ("_position" merge_poly)
###       ("_tuple_arg" ("_position" merge_poly)))
###     ("\<^const>FuncSet.funcset" ("_position" poly_rel)
###       ("\<^const>Relators.fun_rel_syn" ("_position" poly_rel)
###         ("_position" poly_rel)))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Set.member"
###     ("_tuple" ("_position" merge_poly)
###       ("_tuple_arg" ("_position" merge_poly)))
###     ("\<^const>Relators.fun_rel_syn" ("_position" poly_rel)
###       ("\<^const>Relators.fun_rel_syn" ("_position" poly_rel)
###         ("_position" poly_rel)))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 543 of "$AFP/PAC_Checker/PAC_Checker_Init.thy") produces 2 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Set.member"
###     ("_tuple" ("_position" msort_poly_impl)
###       ("_tuple_arg" ("_position" merge_sort_poly)))
###     ("\<^const>FuncSet.funcset" ("_position" poly_rel)
###       ("_position" poly_rel))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Set.member"
###     ("_tuple" ("_position" msort_poly_impl)
###       ("_tuple_arg" ("_position" merge_sort_poly)))
###     ("\<^const>Relators.fun_rel_syn" ("_position" poly_rel)
###       ("_position" poly_rel))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Cannot skip proof of schematic goal statement
partition_main_poly_impl ==
%ai bia bi.
   let x' = fst (op_list_get bi bia)
   in heap_WHILET (%(a1, a1a, a2a). return (a1a < bia))
       (%(a1, a1a, a2a).
           return
            (if fst (op_list_get a2a a1a) = x' |
                fst (op_list_get a2a a1a) < x'
             then (a1 + 1, a1a + 1, op_list_swap a2a a1 a1a)
             else (a1, a1a + 1, a2a)))
       (ai, ai, bi) >>=
      (%(a1, a1a, a2a). return (op_list_swap a2a a1 bia, a1))
(uncurry2 partition_main_poly_impl, uncurry2 partition_main_poly)
: nat_assn\<^sup>k *\<^sub>a nat_assn\<^sup>k *\<^sub>a
  poly_assn\<^sup>k \<rightarrow>\<^sub>a poly_assn \<times>\<^sub>a
    nat_assn
### Cannot skip proof of schematic goal statement
linarith_split_limit exceeded (current value is 9)
linarith_split_limit exceeded (current value is 9)
linarith_split_limit exceeded (current value is 9)
linarith_split_limit exceeded (current value is 9)
linarith_split_limit exceeded (current value is 9)
linarith_split_limit exceeded (current value is 9)
linarith_split_limit exceeded (current value is 9)
linarith_split_limit exceeded (current value is 9)
linarith_split_limit exceeded (current value is 9)
linarith_split_limit exceeded (current value is 9)
linarith_split_limit exceeded (current value is 9)
linarith_split_limit exceeded (current value is 9)
linarith_split_limit exceeded (current value is 9)
linarith_split_limit exceeded (current value is 9)
linarith_split_limit exceeded (current value is 9)
linarith_split_limit exceeded (current value is 9)
linarith_split_limit exceeded (current value is 9)
linarith_split_limit exceeded (current value is 9)
linarith_split_limit exceeded (current value is 9)
linarith_split_limit exceeded (current value is 9)
linarith_split_limit exceeded (current value is 9)
linarith_split_limit exceeded (current value is 9)
linarith_split_limit exceeded (current value is 9)
linarith_split_limit exceeded (current value is 9)
linarith_split_limit exceeded (current value is 9)
linarith_split_limit exceeded (current value is 9)
linarith_split_limit exceeded (current value is 9)
linarith_split_limit exceeded (current value is 9)
linarith_split_limit exceeded (current value is 9)
linarith_split_limit exceeded (current value is 9)
linarith_split_limit exceeded (current value is 9)
linarith_split_limit exceeded (current value is 9)
linarith_split_limit exceeded (current value is 9)
linarith_split_limit exceeded (current value is 9)
linarith_split_limit exceeded (current value is 9)
linarith_split_limit exceeded (current value is 9)
linarith_split_limit exceeded (current value is 9)
linarith_split_limit exceeded (current value is 9)
linarith_split_limit exceeded (current value is 9)
linarith_split_limit exceeded (current value is 9)
linarith_split_limit exceeded (current value is 9)
linarith_split_limit exceeded (current value is 9)
linarith_split_limit exceeded (current value is 9)
linarith_split_limit exceeded (current value is 9)
linarith_split_limit exceeded (current value is 9)
linarith_split_limit exceeded (current value is 9)
linarith_split_limit exceeded (current value is 9)
linarith_split_limit exceeded (current value is 9)
linarith_split_limit exceeded (current value is 9)
linarith_split_limit exceeded (current value is 9)
linarith_split_limit exceeded (current value is 9)
linarith_split_limit exceeded (current value is 9)
linarith_split_limit exceeded (current value is 9)
linarith_split_limit exceeded (current value is 9)
linarith_split_limit exceeded (current value is 9)
linarith_split_limit exceeded (current value is 9)
linarith_split_limit exceeded (current value is 9)
linarith_split_limit exceeded (current value is 9)
linarith_split_limit exceeded (current value is 9)
linarith_split_limit exceeded (current value is 9)
linarith_split_limit exceeded (current value is 9)
linarith_split_limit exceeded (current value is 9)
linarith_split_limit exceeded (current value is 9)
linarith_split_limit exceeded (current value is 9)
linarith_split_limit exceeded (current value is 9)
linarith_split_limit exceeded (current value is 9)
linarith_split_limit exceeded (current value is 9)
linarith_split_limit exceeded (current value is 9)
linarith_split_limit exceeded (current value is 9)
linarith_split_limit exceeded (current value is 9)
linarith_split_limit exceeded (current value is 9)
linarith_split_limit exceeded (current value is 9)
linarith_split_limit exceeded (current value is 9)
linarith_split_limit exceeded (current value is 9)
linarith_split_limit exceeded (current value is 9)
linarith_split_limit exceeded (current value is 9)
linarith_split_limit exceeded (current value is 9)
linarith_split_limit exceeded (current value is 9)
linarith_split_limit exceeded (current value is 9)
linarith_split_limit exceeded (current value is 9)
linarith_split_limit exceeded (current value is 9)
linarith_split_limit exceeded (current value is 9)
linarith_split_limit exceeded (current value is 9)
linarith_split_limit exceeded (current value is 9)
linarith_split_limit exceeded (current value is 9)
linarith_split_limit exceeded (current value is 9)
linarith_split_limit exceeded (current value is 9)
linarith_split_limit exceeded (current value is 9)
linarith_split_limit exceeded (current value is 9)
partition_between_poly_impl ==
%ai bia bi.
   (let x'b = ai + (bia - ai) div 2; x'd = fst (op_list_get bi ai);
        x'f = fst (op_list_get bi x'b); x'h = fst (op_list_get bi bia)
    in return
        (if x'd <= x'f & x'f <= x'h | x'h <= x'f & x'f <= x'd then x'b
         else if x'd <= x'h & x'h <= x'f | x'f <= x'h & x'h <= x'd then bia
              else ai)) >>=
   (%x'. partition_main_poly_impl ai bia (op_list_swap bi x' bia))
(uncurry2 partition_between_poly_impl, uncurry2 partition_between_poly)
: nat_assn\<^sup>k *\<^sub>a nat_assn\<^sup>k *\<^sub>a
  poly_assn\<^sup>k \<rightarrow>\<^sub>a poly_assn \<times>\<^sub>a
    nat_assn
### Cannot skip proof of schematic goal statement
quicksort_poly_impl ==
%ai bia bi.
   heap.fixp_fun
    (%cf (a1, a1a, a2a).
        partition_between_poly_impl a1 a1a a2a >>=
        (%(a1b, a2b).
            (if a2b - 1 <= a1 then return a1b
             else cf (a1, a2b - 1, a1b)) >>=
            (%x'b. if a1a <= a2b + 1 then return x'b
                   else cf (a2b + 1, a1a, x'b))))
    (ai, bia, bi)
(uncurry2 quicksort_poly_impl, uncurry2 quicksort_poly)
: nat_assn\<^sup>k *\<^sub>a nat_assn\<^sup>k *\<^sub>a
  poly_assn\<^sup>k \<rightarrow>\<^sub>a poly_assn
quicksort_poly ::\<^sub>i
TYPE(nat
     => nat
        => (char list list * int) list => (char list list * int) list nres)
### Cannot skip proof of schematic goal statement
full_quicksort_poly_impl ==
%xi. if op_list_is_empty xi then return xi
     else quicksort_poly_impl 0 (op_list_length xi - 1) xi
(full_quicksort_poly_impl, full_quicksort_poly)
: poly_assn\<^sup>k \<rightarrow>\<^sub>a poly_assn
### Cannot skip proof of schematic goal statement
normalize_poly_impl == %xi. merge_coeffs_impl (msort_poly_impl xi)
(normalize_poly_impl, PAC_Polynomials_Operations.normalize_poly)
: poly_assn\<^sup>k \<rightarrow>\<^sub>a poly_assn
### Cannot skip proof of schematic goal statement
partition_main_vars_impl ==
%ai bia bi.
   heap_WHILET (%(a1, a1a, a2a). return (a1a < bia))
    (%(a1, a1a, a2a).
        return
         (if op_list_get a2a a1a <= op_list_get bi bia
          then (a1 + 1, a1a + 1, op_list_swap a2a a1 a1a)
          else (a1, a1a + 1, a2a)))
    (ai, ai, bi) >>=
   (%(a1, a1a, a2a). return (op_list_swap a2a a1 bia, a1))
(uncurry2 partition_main_vars_impl, uncurry2 partition_main_vars)
: nat_assn\<^sup>k *\<^sub>a nat_assn\<^sup>k *\<^sub>a
  monom_assn\<^sup>k \<rightarrow>\<^sub>a monom_assn \<times>\<^sub>a
     nat_assn
### Cannot skip proof of schematic goal statement
linarith_split_limit exceeded (current value is 9)
linarith_split_limit exceeded (current value is 9)
linarith_split_limit exceeded (current value is 9)
linarith_split_limit exceeded (current value is 9)
linarith_split_limit exceeded (current value is 9)
linarith_split_limit exceeded (current value is 9)
linarith_split_limit exceeded (current value is 9)
linarith_split_limit exceeded (current value is 9)
linarith_split_limit exceeded (current value is 9)
linarith_split_limit exceeded (current value is 9)
linarith_split_limit exceeded (current value is 9)
linarith_split_limit exceeded (current value is 9)
linarith_split_limit exceeded (current value is 9)
linarith_split_limit exceeded (current value is 9)
linarith_split_limit exceeded (current value is 9)
linarith_split_limit exceeded (current value is 9)
linarith_split_limit exceeded (current value is 9)
linarith_split_limit exceeded (current value is 9)
linarith_split_limit exceeded (current value is 9)
linarith_split_limit exceeded (current value is 9)
linarith_split_limit exceeded (current value is 9)
linarith_split_limit exceeded (current value is 9)
linarith_split_limit exceeded (current value is 9)
linarith_split_limit exceeded (current value is 9)
linarith_split_limit exceeded (current value is 9)
linarith_split_limit exceeded (current value is 9)
linarith_split_limit exceeded (current value is 9)
linarith_split_limit exceeded (current value is 9)
linarith_split_limit exceeded (current value is 9)
linarith_split_limit exceeded (current value is 9)
linarith_split_limit exceeded (current value is 9)
linarith_split_limit exceeded (current value is 9)
linarith_split_limit exceeded (current value is 9)
linarith_split_limit exceeded (current value is 9)
linarith_split_limit exceeded (current value is 9)
linarith_split_limit exceeded (current value is 9)
linarith_split_limit exceeded (current value is 9)
linarith_split_limit exceeded (current value is 9)
linarith_split_limit exceeded (current value is 9)
linarith_split_limit exceeded (current value is 9)
linarith_split_limit exceeded (current value is 9)
linarith_split_limit exceeded (current value is 9)
linarith_split_limit exceeded (current value is 9)
linarith_split_limit exceeded (current value is 9)
linarith_split_limit exceeded (current value is 9)
linarith_split_limit exceeded (current value is 9)
linarith_split_limit exceeded (current value is 9)
linarith_split_limit exceeded (current value is 9)
linarith_split_limit exceeded (current value is 9)
linarith_split_limit exceeded (current value is 9)
linarith_split_limit exceeded (current value is 9)
linarith_split_limit exceeded (current value is 9)
linarith_split_limit exceeded (current value is 9)
linarith_split_limit exceeded (current value is 9)
linarith_split_limit exceeded (current value is 9)
linarith_split_limit exceeded (current value is 9)
linarith_split_limit exceeded (current value is 9)
linarith_split_limit exceeded (current value is 9)
linarith_split_limit exceeded (current value is 9)
linarith_split_limit exceeded (current value is 9)
linarith_split_limit exceeded (current value is 9)
linarith_split_limit exceeded (current value is 9)
linarith_split_limit exceeded (current value is 9)
linarith_split_limit exceeded (current value is 9)
linarith_split_limit exceeded (current value is 9)
linarith_split_limit exceeded (current value is 9)
linarith_split_limit exceeded (current value is 9)
linarith_split_limit exceeded (current value is 9)
linarith_split_limit exceeded (current value is 9)
linarith_split_limit exceeded (current value is 9)
linarith_split_limit exceeded (current value is 9)
linarith_split_limit exceeded (current value is 9)
linarith_split_limit exceeded (current value is 9)
linarith_split_limit exceeded (current value is 9)
linarith_split_limit exceeded (current value is 9)
linarith_split_limit exceeded (current value is 9)
linarith_split_limit exceeded (current value is 9)
linarith_split_limit exceeded (current value is 9)
linarith_split_limit exceeded (current value is 9)
linarith_split_limit exceeded (current value is 9)
linarith_split_limit exceeded (current value is 9)
linarith_split_limit exceeded (current value is 9)
partition_between_vars_impl ==
%ai bia bi.
   (let x'b = ai + (bia - ai) div 2; x'd = op_list_get bi ai;
        x'f = op_list_get bi x'b; x'h = op_list_get bi bia
    in return
        (if x'd <= x'f & x'f <= x'h | x'h <= x'f & x'f <= x'd then x'b
         else if x'd <= x'h & x'h <= x'f | x'f <= x'h & x'h <= x'd then bia
              else ai)) >>=
   (%x'. partition_main_vars_impl ai bia (op_list_swap bi x' bia))
(uncurry2 partition_between_vars_impl, uncurry2 partition_between_vars)
: nat_assn\<^sup>k *\<^sub>a nat_assn\<^sup>k *\<^sub>a
  monom_assn\<^sup>k \<rightarrow>\<^sub>a monom_assn \<times>\<^sub>a
     nat_assn
### Cannot skip proof of schematic goal statement
quicksort_vars_impl ==
%ai bia bi.
   heap.fixp_fun
    (%cf (a1, a1a, a2a).
        partition_between_vars_impl a1 a1a a2a >>=
        (%(a1b, a2b).
            (if a2b - 1 <= a1 then return a1b
             else cf (a1, a2b - 1, a1b)) >>=
            (%x'b. if a1a <= a2b + 1 then return x'b
                   else cf (a2b + 1, a1a, x'b))))
    (ai, bia, bi)
(uncurry2 quicksort_vars_impl, uncurry2 quicksort_vars)
: nat_assn\<^sup>k *\<^sub>a nat_assn\<^sup>k *\<^sub>a
  monom_assn\<^sup>k \<rightarrow>\<^sub>a monom_assn
quicksort_vars ::\<^sub>i
TYPE(nat => nat => char list list => char list list nres)
### Cannot skip proof of schematic goal statement
full_quicksort_vars_impl ==
%xi. if op_list_is_empty xi then return xi
     else quicksort_vars_impl 0 (op_list_length xi - 1) xi
(full_quicksort_vars_impl, full_quicksort_vars)
: monom_assn\<^sup>k \<rightarrow>\<^sub>a monom_assn
### Ambiguous input (line 766 of "$AFP/PAC_Checker/PAC_Checker_Init.thy") produces 4 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Set.member"
###     ("_tuple" ("_position" merge_monoms)
###       ("_tuple_arg" ("_position" merge_monoms)))
###     ("\<^const>FuncSet.funcset" ("_position" monom_rel)
###       ("\<^const>FuncSet.funcset" ("_position" monom_rel)
###         ("_position" monom_rel)))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Set.member"
###     ("_tuple" ("_position" merge_monoms)
###       ("_tuple_arg" ("_position" merge_monoms)))
###     ("\<^const>Relators.fun_rel_syn" ("_position" monom_rel)
###       ("\<^const>FuncSet.funcset" ("_position" monom_rel)
###         ("_position" monom_rel)))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Set.member"
###     ("_tuple" ("_position" merge_monoms)
###       ("_tuple_arg" ("_position" merge_monoms)))
###     ("\<^const>FuncSet.funcset" ("_position" monom_rel)
###       ("\<^const>Relators.fun_rel_syn" ("_position" monom_rel)
###         ("_position" monom_rel)))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Set.member"
###     ("_tuple" ("_position" merge_monoms)
###       ("_tuple_arg" ("_position" merge_monoms)))
###     ("\<^const>Relators.fun_rel_syn" ("_position" monom_rel)
###       ("\<^const>Relators.fun_rel_syn" ("_position" monom_rel)
###         ("_position" monom_rel)))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 793 of "$AFP/PAC_Checker/PAC_Checker_Init.thy") produces 2 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Set.member"
###     ("_tuple" ("_position" msort_monoms_impl)
###       ("_tuple_arg" ("_position" merge_monoms_poly)))
###     ("\<^const>FuncSet.funcset" ("_position" monom_rel)
###       ("_position" monom_rel))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Set.member"
###     ("_tuple" ("_position" msort_monoms_impl)
###       ("_tuple_arg" ("_position" merge_monoms_poly)))
###     ("\<^const>Relators.fun_rel_syn" ("_position" monom_rel)
###       ("_position" monom_rel))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
sort_coeff ::\<^sub>i TYPE(char list list => char list list nres)
### Cannot skip proof of schematic goal statement
sort_all_coeffs_impl ==
%xi. imp_nfoldli xi (%\<sigma>. return True)
      (%xb \<sigma>.
          return
           (case xb of
            (a1, a2) =>
              op_list_prepend (msort_monoms_impl a1, a2) \<sigma>))
      []
(sort_all_coeffs_impl, sort_all_coeffs)
: poly_assn\<^sup>k \<rightarrow>\<^sub>a poly_assn
### Cannot skip proof of schematic goal statement
merge_coeffs0_impl ==
heap.fixp_fun
 (%cf. case_list (return [])
        (%x' l'.
            case x' of
            (a1, a2) =>
              case l' of
              [] =>
                return
                 (if snd (a1, a2) = 0 then []
                  else op_list_prepend (a1, a2) [])
              | (a1a, a2a) # l'a =>
                  if a1 = a1a
                  then if a2 + a2a ~= 0
                       then cf (op_list_prepend (a1, a2 + a2a) l'a)
                       else cf l'a
                  else if a2 = 0 then cf (op_list_prepend (a1a, a2a) l'a)
                       else cf (op_list_prepend (a1a, a2a) l'a) >>=
                            (%x'd. return (op_list_prepend (a1, a2) x'd))))
(merge_coeffs0_impl, RETURN o merge_coeffs0)
: poly_assn\<^sup>k \<rightarrow>\<^sub>a poly_assn
### Cannot skip proof of schematic goal statement
fully_normalize_poly_impl ==
%xi. sort_all_coeffs_impl xi >>=
     (%x'. merge_coeffs0_impl (msort_poly_impl x'))
(fully_normalize_poly_impl, full_normalize_poly)
: poly_assn\<^sup>k \<rightarrow>\<^sub>a poly_assn
### theory "Draft.PAC_Checker_Init"
### 10.148s elapsed time, 10.689s cpu time, 0.702s GC time
Loading theory "Draft.PAC_Checker_InitTemplates"
val templateLemmas =
   [("PAC_Checker_Init.msort_msort2", "msort (<=) ?xs = msort2 (<=) ?xs",
     template_equation
      (template_app
        (template_app (template_hole 2, template_hole 1), template_var 0),
       template_app
        (template_app (template_hole 0, template_hole 1), template_var 0))),
    ("PAC_Checker_Init.mset_msort", "mset (msort ?f ?xs) = mset ?xs",
     template_equation
      (template_app
        (template_hole 1,
         template_app
          (template_app (template_hole 0, template_var 1), template_var 0)),
       template_app (template_hole 1, template_var 0))),
    ("PAC_Checker_Init.down_eq_id_list_rel",
     "\<Down> (\<langle>Id\<rangle>list_rel) ?x = ?x",
     template_equation
      (template_app
        (template_app
          (template_hole 3,
           template_app
            (template_app (template_hole 2, template_hole 1),
             template_hole 0)),
         template_var 0),
       template_var 0)),
    ("PAC_Checker_Init.var_order_rel''",
     "((?x, ?y) : var_order_rel) = (?x < ?y)",
     template_equation
      (template_app
        (template_app
          (template_hole 3,
           template_app
            (template_app (template_hole 2, template_var 1),
             template_var 0)),
         template_hole 1),
       template_app
        (template_app (template_hole 0, template_var 1), template_var 0))),
    ("PAC_Checker_Init.var_order_rel_var_order",
     "((?x, ?y) : var_order_rel) = var_order ?x ?y",
     template_equation
      (template_app
        (template_app
          (template_hole 3,
           template_app
            (template_app (template_hole 2, template_var 1),
             template_var 0)),
         template_hole 1),
       template_app
        (template_app
          (template_app (template_hole 0, template_hole 1), template_var 1),
         template_var 0))),
    ("PAC_Checker_Init.set_merge",
     "set (PAC_Checker_Init.merge ?f ?xs ?ys) = set ?xs Un set ?ys",
     template_equation
      (template_app
        (template_hole 2,
         template_app
          (template_app
            (template_app (template_hole 1, template_var 2),
             template_var 1),
           template_var 0)),
       template_app
        (template_app
          (template_hole 0, template_app (template_hole 2, template_var 1)),
         template_app (template_hole 2, template_var 0)))),
    ("PAC_Checker_Init.mset_merge",
     "mset (PAC_Checker_Init.merge ?f ?xs ?ys) = mset ?xs + mset ?ys",
     template_equation
      (template_app
        (template_hole 2,
         template_app
          (template_app
            (template_app (template_hole 1, template_var 2),
             template_var 1),
           template_var 0)),
       template_app
        (template_app
          (template_hole 0, template_app (template_hole 2, template_var 1)),
         template_app (template_hole 2, template_var 0)))),
    ("PAC_Checker_Init.hn_invalid_recover",
     "is_pure ?R ==> invalid_assn ?R = (%x y. ?R x y * true)",
     template_implication
      ([template_predicate
         (template_app (template_hole 4, template_var 0))],
       template_equation
        (template_app (template_hole 2, template_var 0), t_empty))),
    ("PAC_Checker_Init.hn_invalid_recover",
     "is_pure ?R ==> hn_invalid ?R = (%x y. ?R x y * true)",
     template_implication
      ([template_predicate
         (template_app (template_hole 5, template_var 0))],
       template_equation
        (template_app
          (template_hole 3, template_app (template_hole 2, template_var 0)),
         t_empty))),
    ("PAC_Checker_Init.step_rewrite_pure",
     "pure (p2rel (\<langle>?K, ?V, ?R\<rangle>pac_step_rel_raw)) =
      pac_step_rel_assn (pure ?K) (pure ?V) (pure ?R)",
     template_equation
      (template_app
        (template_hole 9,
         template_app
          (template_hole 8,
           template_app
            (template_app
              (template_hole 7,
               template_app
                (template_app
                  (template_hole 6,
                   template_app
                    (template_app (template_hole 5, template_hole 4),
                     template_var 2)),
                 template_var 1)),
             template_var 0))),
       template_app
        (template_app
          (template_app
            (template_hole 3,
             template_app (template_hole 2, template_var 2)),
           template_app (template_hole 1, template_var 1)),
         template_app (template_hole 0, template_var 0)))),
    ("PAC_Checker_Init.safe_pac_step_rel_assn",
     "[| is_pure ?K; is_pure ?V; is_pure ?R |]
      ==> is_pure (pac_step_rel_assn ?K ?V ?R)",
     template_implication
      ([template_predicate (template_app (template_hole 4, template_var 2)),
        template_predicate (template_app (template_hole 3, template_var 1)),
        template_predicate
         (template_app (template_hole 2, template_var 0))],
       template_predicate
        (
           template_app
            (template_hole 1,
             template_app
              (template_app
                (template_app (template_hole 0, template_var 2),
                 template_var 1),
               template_var 0))
           ))),
    ("PAC_Checker_Init.string_rel_order_map",
     "[| (?x, ?a) : string_rel; (?y, ?aa) : string_rel |]
      ==> (?x <= ?y) = (?a <= ?aa)",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_hole 5,
                template_app
                 (template_app (template_hole 4, template_var 3),
                  template_var 2)),
              template_hole 3)
            ),
        template_predicate
         (
            template_app
             (template_app
               (template_hole 5,
                template_app
                 (template_app (template_hole 4, template_var 1),
                  template_var 0)),
              template_hole 3)
            )],
       template_equation
        (template_app
          (template_app (template_hole 1, template_var 3), template_var 1),
         template_app
          (template_app (template_hole 0, template_var 2),
           template_var 0)))),
    ("PAC_Checker_Init.total_on_lexord_less_than_char_linear2",
     "?xs ~= ?ys ==>
      ((?xs, ?ys) ~: lexord less_than_char) =
      ((?ys, ?xs) : lexord less_than_char)",
     template_implication
      ([template_negation
         (template_equation (template_var 1, template_var 0))],
       template_equation
        (template_app
          (template_hole 7,
           template_app
            (template_app
              (template_hole 4,
               template_app
                (template_app (template_hole 3, template_var 1),
                 template_var 0)),
             template_app
              (template_hole 2,
               template_app (template_hole 1, template_hole 0)))),
         template_app
          (template_app
            (template_hole 4,
             template_app
              (template_app (template_hole 3, template_var 0),
               template_var 1)),
           template_app
            (template_hole 2,
             template_app (template_hole 1, template_hole 0)))))),
    ("PAC_Checker_Init.sorted_msort",
     "[| transp ?f; !!x y. ?f x y | ?f y x |]
      ==> sorted_wrt ?f (msort ?f ?xs)",
     template_implication
      ([template_predicate (template_app (template_hole 4, template_var 1)),
        template_predicate (template_app (template_hole 3, t_empty))],
       template_predicate
        (
           template_app
            (template_app (template_hole 1, template_var 1),
             template_app
              (template_app (template_hole 0, template_var 1),
               template_var 0))
           ))),
    ("PAC_Checker_Init.term_order_rel_trans",
     "[| (?a, ?aa) : term_order_rel; (?aa, ?ab) : term_order_rel |]
      ==> (?a, ?ab) : term_order_rel",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_hole 3,
                template_app
                 (template_app (template_hole 2, template_var 2),
                  template_var 1)),
              template_app (template_hole 1, template_hole 0))
            ),
        template_predicate
         (
            template_app
             (template_app
               (template_hole 3,
                template_app
                 (template_app (template_hole 2, template_var 1),
                  template_var 0)),
              template_app (template_hole 1, template_hole 0))
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 3,
               template_app
                (template_app (template_hole 2, template_var 2),
                 template_var 0)),
             template_app (template_hole 1, template_hole 0))
           ))),
    ("PAC_Checker_Init.list_rel_dropD",
     "[| (?a, ?b) : \<langle>?R\<rangle>list_rel; (?n, ?n') : nat_rel |]
      ==> (drop ?n ?a, drop ?n' ?b) : \<langle>?R\<rangle>list_rel",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_hole 8,
                template_app
                 (template_app (template_hole 7, template_var 4),
                  template_var 3)),
              template_app
               (template_app (template_hole 6, template_hole 5),
                template_var 2))
            ),
        template_predicate
         (
            template_app
             (template_app
               (template_hole 4,
                template_app
                 (template_app (template_hole 3, template_var 1),
                  template_var 0)),
              template_hole 2)
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 8,
               template_app
                (template_app
                  (template_hole 7,
                   template_app
                    (template_app (template_hole 1, template_var 1),
                     template_var 4)),
                 template_app
                  (template_app (template_hole 0, template_var 0),
                   template_var 3))),
             template_app
              (template_app (template_hole 6, template_hole 5),
               template_var 2))
           ))),
    ("PAC_Checker_Init.list_rel_takeD",
     "[| (?a, ?b) : \<langle>?R\<rangle>list_rel; (?n, ?n') : nat_rel |]
      ==> (take ?n ?a, take ?n' ?b) : \<langle>?R\<rangle>list_rel",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_hole 8,
                template_app
                 (template_app (template_hole 7, template_var 4),
                  template_var 3)),
              template_app
               (template_app (template_hole 6, template_hole 5),
                template_var 2))
            ),
        template_predicate
         (
            template_app
             (template_app
               (template_hole 4,
                template_app
                 (template_app (template_hole 3, template_var 1),
                  template_var 0)),
              template_hole 2)
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 8,
               template_app
                (template_app
                  (template_hole 7,
                   template_app
                    (template_app (template_hole 1, template_var 1),
                     template_var 4)),
                 template_app
                  (template_app (template_hole 0, template_var 0),
                   template_var 3))),
             template_app
              (template_app (template_hole 6, template_hole 5),
               template_var 2))
           ))),
    ("PAC_Checker_Init.merge_monoms_merge_monoms2",
     "[| (?a, ?b) : monom_rel; (?a', ?b') : monom_rel |]
      ==> (merge_monoms ?a ?a', merge_monoms ?b ?b') : monom_rel",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_hole 6,
                template_app
                 (template_app (template_hole 5, template_var 3),
                  template_var 2)),
              template_app
               (template_app (template_hole 4, template_hole 3),
                template_hole 2))
            ),
        template_predicate
         (
            template_app
             (template_app
               (template_hole 6,
                template_app
                 (template_app (template_hole 5, template_var 1),
                  template_var 0)),
              template_app
               (template_app (template_hole 4, template_hole 3),
                template_hole 2))
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 6,
               template_app
                (template_app
                  (template_hole 5,
                   template_app
                    (template_app (template_hole 1, template_var 3),
                     template_var 1)),
                 template_app
                  (template_app (template_hole 0, template_var 2),
                   template_var 0))),
             template_app
              (template_app (template_hole 4, template_hole 3),
               template_hole 2))
           ))),
    ("PAC_Checker_Init.WTF_RF_recover",
     "hn_ctxt
       (invalid_assn monom_assn \<times>\<^sub>a invalid_assn int_assn) ?xb
       ?x'a \<or>\<^sub>A
      hn_ctxt monomial_assn ?xb ?x'a \<Longrightarrow>\<^sub>t
      hn_ctxt monomial_assn ?xb ?x'a",
     template_predicate
      (
         template_app
          (template_app
            (template_hole 10,
             template_app
              (template_app
                (template_hole 9,
                 template_app
                  (template_app
                    (template_app
                      (template_hole 8,
                       template_app
                        (template_app
                          (template_hole 7,
                           template_app
                            (template_hole 6,
                             template_app
                              (template_hole 5,
                               template_app
                                (template_hole 4, template_hole 3)))),
                         template_app
                          (template_hole 2,
                           template_app
                            (template_hole 1, template_hole 0)))),
                     template_var 1),
                   template_var 0)),
               template_app
                (template_app
                  (template_app
                    (template_hole 8,
                     template_app
                      (template_app
                        (template_hole 7,
                         template_app
                          (template_hole 5,
                           template_app
                            (template_hole 4, template_hole 3))),
                       template_app (template_hole 1, template_hole 0))),
                   template_var 1),
                 template_var 0))),
           template_app
            (template_app
              (template_app
                (template_hole 8,
                 template_app
                  (template_app
                    (template_hole 7,
                     template_app
                      (template_hole 5,
                       template_app (template_hole 4, template_hole 3))),
                   template_app (template_hole 1, template_hole 0))),
               template_var 1),
             template_var 0))
         )),
    ("PAC_Checker_Init.sorted_merge",
     "[| transp ?f; !!x y. ?f x y | ?f y x |]
      ==> sorted_wrt ?f (PAC_Checker_Init.merge ?f ?xs ?ys) =
          (sorted_wrt ?f ?xs & sorted_wrt ?f ?ys)",
     template_implication
      ([template_predicate (template_app (template_hole 6, template_var 2)),
        template_predicate (template_app (template_hole 5, t_empty))],
       template_equation
        (template_app
          (template_app (template_hole 2, template_var 2),
           template_app
            (template_app
              (template_app (template_hole 1, template_var 2),
               template_var 1),
             template_var 0)),
         template_app
          (template_app
            (template_hole 0,
             template_app
              (template_app (template_hole 2, template_var 2),
               template_var 1)),
           template_app
            (template_app (template_hole 2, template_var 2),
             template_var 0))))),
    ("PAC_Checker_Init.var_order_string_le",
     "hn_refine (hn_val string_rel ?x'6 ?x6 * hn_val string_rel ?x'a6 ?xa6)
       (return (?x6 < ?xa6))
       (hn_val string_rel ?x'6 ?x6 * hn_val string_rel ?x'a6 ?xa6) bool_assn
       (RETURN $ (var_order' $ ?x'6 $ ?x'a6))",
     template_predicate
      (
         template_app
          (template_app
            (template_app
              (template_app
                (template_app
                  (template_hole 13,
                   template_app
                    (template_app
                      (template_hole 12,
                       template_app
                        (template_app
                          (template_app
                            (template_hole 11,
                             template_app
                              (template_hole 10, template_hole 9)),
                           template_var 3),
                         template_var 2)),
                     template_app
                      (template_app
                        (template_app
                          (template_hole 11,
                           template_app
                            (template_hole 10, template_hole 9)),
                         template_var 1),
                       template_var 0))),
                 template_app
                  (template_hole 8,
                   template_app
                    (template_app (template_hole 7, template_var 2),
                     template_var 0))),
               template_app
                (template_app
                  (template_hole 12,
                   template_app
                    (template_app
                      (template_app
                        (template_hole 11,
                         template_app (template_hole 10, template_hole 9)),
                       template_var 3),
                     template_var 2)),
                 template_app
                  (template_app
                    (template_app
                      (template_hole 11,
                       template_app (template_hole 10, template_hole 9)),
                     template_var 1),
                   template_var 0))),
             template_app (template_hole 6, template_hole 5)),
           template_app
            (template_app (template_hole 4, template_hole 3),
             template_app
              (template_app
                (template_hole 2,
                 template_app
                  (template_app (template_hole 1, template_hole 0),
                   template_var 3)),
               template_var 1)))
         )),
    ("PAC_Checker_Init.merge_sort_poly",
     "hn_refine (hn_ctxt poly_assn ?x'5 ?x5) (return (msort_poly_impl ?x5))
       (hn_ctxt poly_assn ?x'5 ?x5) poly_assn
       (RETURN $ (merge_sort_poly $ ?x'5))",
     template_predicate
      (
         template_app
          (template_app
            (template_app
              (template_app
                (template_app
                  (template_hole 14,
                   template_app
                    (template_app
                      (template_app
                        (template_hole 13,
                         template_app
                          (template_hole 12,
                           template_app
                            (template_app
                              (template_hole 11,
                               template_app
                                (template_hole 10,
                                 template_app
                                  (template_hole 9, template_hole 8))),
                             template_app
                              (template_hole 7, template_hole 6)))),
                       template_var 1),
                     template_var 0)),
                 template_app
                  (template_hole 5,
                   template_app (template_hole 4, template_var 0))),
               template_app
                (template_app
                  (template_app
                    (template_hole 13,
                     template_app
                      (template_hole 12,
                       template_app
                        (template_app
                          (template_hole 11,
                           template_app
                            (template_hole 10,
                             template_app
                              (template_hole 9, template_hole 8))),
                         template_app (template_hole 7, template_hole 6)))),
                   template_var 1),
                 template_var 0)),
             template_app
              (template_hole 12,
               template_app
                (template_app
                  (template_hole 11,
                   template_app
                    (template_hole 10,
                     template_app (template_hole 9, template_hole 8))),
                 template_app (template_hole 7, template_hole 6)))),
           template_app
            (template_app (template_hole 3, template_hole 2),
             template_app
              (template_app (template_hole 1, template_hole 0),
               template_var 1)))
         )),
    ("PAC_Checker_Init.monomial_rel_order_map",
     "[| (?x, ?a, ?b) : monomial_rel; (?y, ?aa, ?bb) : monomial_rel |]
      ==> (fst ?x <= fst ?y) = (?a <= ?aa)",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_hole 13,
                template_app
                 (template_app (template_hole 12, template_var 5),
                  template_app
                   (template_app (template_hole 11, template_var 4),
                    template_var 3))),
              template_app
               (template_app
                 (template_hole 10,
                  template_app
                   (template_app (template_hole 9, template_hole 8),
                    template_app
                     (template_app (template_hole 7, template_hole 6),
                      template_hole 5))),
                template_hole 4))
            ),
        template_predicate
         (
            template_app
             (template_app
               (template_hole 13,
                template_app
                 (template_app (template_hole 12, template_var 2),
                  template_app
                   (template_app (template_hole 11, template_var 1),
                    template_var 0))),
              template_app
               (template_app
                 (template_hole 10,
                  template_app
                   (template_app (template_hole 9, template_hole 8),
                    template_app
                     (template_app (template_hole 7, template_hole 6),
                      template_hole 5))),
                template_hole 4))
            )],
       template_equation
        (template_app
          (template_app
            (template_hole 2,
             template_app (template_hole 1, template_var 5)),
           template_app (template_hole 1, template_var 2)),
         template_app
          (template_app (template_hole 0, template_var 4),
           template_var 1)))),
    ("PAC_Checker_Init.string_trans",
     "[| (?xa, ?ya) : lexord {(x, y). x < y};
         (?ya, ?z) : lexord {(x, y). x < y} |]
      ==> (?xa, ?z) : lexord {(x, y). x < y}",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_hole 5,
                template_app
                 (template_app (template_hole 4, template_var 2),
                  template_var 1)),
              template_app
               (template_hole 3,
                template_app
                 (template_hole 2,
                  template_app (template_hole 1, t_empty))))
            ),
        template_predicate
         (
            template_app
             (template_app
               (template_hole 5,
                template_app
                 (template_app (template_hole 4, template_var 1),
                  template_var 0)),
              template_app
               (template_hole 3,
                template_app
                 (template_hole 2,
                  template_app (template_hole 1, t_empty))))
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 5,
               template_app
                (template_app (template_hole 4, template_var 2),
                 template_var 0)),
             template_app
              (template_hole 3,
               template_app
                (template_hole 2, template_app (template_hole 1, t_empty))))
           ))),
    ("PAC_Checker_Init.string_list_trans",
     "[| (?xa, ?ya) : lexord (lexord {(x, y). x < y});
         (?ya, ?z) : lexord (lexord {(x, y). x < y}) |]
      ==> (?xa, ?z) : lexord (lexord {(x, y). x < y})",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_hole 6,
                template_app
                 (template_app (template_hole 5, template_var 2),
                  template_var 1)),
              template_app
               (template_hole 4,
                template_app
                 (template_hole 3,
                  template_app
                   (template_hole 2,
                    template_app (template_hole 1, t_empty)))))
            ),
        template_predicate
         (
            template_app
             (template_app
               (template_hole 6,
                template_app
                 (template_app (template_hole 5, template_var 1),
                  template_var 0)),
              template_app
               (template_hole 4,
                template_app
                 (template_hole 3,
                  template_app
                   (template_hole 2,
                    template_app (template_hole 1, t_empty)))))
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 6,
               template_app
                (template_app (template_hole 5, template_var 2),
                 template_var 0)),
             template_app
              (template_hole 4,
               template_app
                (template_hole 3,
                 template_app
                  (template_hole 2,
                   template_app (template_hole 1, t_empty)))))
           ))),
    ("PAC_Checker_Init.merge_poly_merge_poly2",
     "[| (?a, ?b) : poly_rel; (?a', ?b') : poly_rel |]
      ==> (merge_poly ?a ?a', merge_poly ?b ?b') : poly_rel",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_hole 12,
                template_app
                 (template_app (template_hole 11, template_var 3),
                  template_var 2)),
              template_app
               (template_app (template_hole 10, template_hole 9),
                template_app
                 (template_app
                   (template_hole 8,
                    template_app
                     (template_app (template_hole 7, template_hole 6),
                      template_app
                       (template_app (template_hole 5, template_hole 4),
                        template_hole 3))),
                  template_hole 2)))
            ),
        template_predicate
         (
            template_app
             (template_app
               (template_hole 12,
                template_app
                 (template_app (template_hole 11, template_var 1),
                  template_var 0)),
              template_app
               (template_app (template_hole 10, template_hole 9),
                template_app
                 (template_app
                   (template_hole 8,
                    template_app
                     (template_app (template_hole 7, template_hole 6),
                      template_app
                       (template_app (template_hole 5, template_hole 4),
                        template_hole 3))),
                  template_hole 2)))
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 12,
               template_app
                (template_app
                  (template_hole 11,
                   template_app
                    (template_app (template_hole 1, template_var 3),
                     template_var 1)),
                 template_app
                  (template_app (template_hole 0, template_var 2),
                   template_var 0))),
             template_app
              (template_app (template_hole 10, template_hole 9),
               template_app
                (template_app
                  (template_hole 8,
                   template_app
                    (template_app (template_hole 7, template_hole 6),
                     template_app
                      (template_app (template_hole 5, template_hole 4),
                       template_hole 3))),
                 template_hole 2)))
           ))),
    ("PAC_Checker_Init.WTF_RF",
     "hn_ctxt
       (invalid_assn monom_assn \<times>\<^sub>a invalid_assn int_assn) ?xa
       ?x' *
      (hn_ctxt poly_assn ?l ?l' *
       hn_invalid poly_assn ?ax ?px) \<Longrightarrow>\<^sub>t
      hn_ctxt monomial_assn ?xa ?x' * hn_ctxt poly_assn ?l ?l' *
      hn_ctxt poly_assn ?ax ?px *
      emp",
     template_predicate
      (
         template_app
          (template_app
            (template_hole 14,
             template_app
              (template_app
                (template_hole 13,
                 template_app
                  (template_app
                    (template_app
                      (template_hole 12,
                       template_app
                        (template_app
                          (template_hole 11,
                           template_app
                            (template_hole 10,
                             template_app
                              (template_hole 9,
                               template_app
                                (template_hole 8, template_hole 7)))),
                         template_app
                          (template_hole 6,
                           template_app
                            (template_hole 5, template_hole 4)))),
                     template_var 5),
                   template_var 4)),
               template_app
                (template_app
                  (template_hole 13,
                   template_app
                    (template_app
                      (template_app
                        (template_hole 3,
                         template_app
                          (template_hole 2,
                           template_app
                            (template_app
                              (template_hole 11,
                               template_app
                                (template_hole 9,
                                 template_app
                                  (template_hole 8, template_hole 7))),
                             template_app
                              (template_hole 5, template_hole 4)))),
                       template_var 3),
                     template_var 2)),
                 template_app
                  (template_app
                    (template_app
                      (template_hole 3,
                       template_app
                        (template_hole 1,
                         template_app
                          (template_hole 2,
                           template_app
                            (template_app
                              (template_hole 11,
                               template_app
                                (template_hole 9,
                                 template_app
                                  (template_hole 8, template_hole 7))),
                             template_app
                              (template_hole 5, template_hole 4))))),
                     template_var 1),
                   template_var 0)))),
           template_app
            (template_app
              (template_hole 13,
               template_app
                (template_app
                  (template_hole 13,
                   template_app
                    (template_app
                      (template_hole 13,
                       template_app
                        (template_app
                          (template_app
                            (template_hole 12,
                             template_app
                              (template_app
                                (template_hole 11,
                                 template_app
                                  (template_hole 9,
                                   template_app
                                    (template_hole 8, template_hole 7))),
                               template_app
                                (template_hole 5, template_hole 4))),
                           template_var 5),
                         template_var 4)),
                     template_app
                      (template_app
                        (template_app
                          (template_hole 3,
                           template_app
                            (template_hole 2,
                             template_app
                              (template_app
                                (template_hole 11,
                                 template_app
                                  (template_hole 9,
                                   template_app
                                    (template_hole 8, template_hole 7))),
                               template_app
                                (template_hole 5, template_hole 4)))),
                         template_var 3),
                       template_var 2))),
                 template_app
                  (template_app
                    (template_app
                      (template_hole 3,
                       template_app
                        (template_hole 2,
                         template_app
                          (template_app
                            (template_hole 11,
                             template_app
                              (template_hole 9,
                               template_app
                                (template_hole 8, template_hole 7))),
                           template_app
                            (template_hole 5, template_hole 4)))),
                     template_var 1),
                   template_var 0))),
             template_hole 0))
         )),
    ("PAC_Checker_Init.WTF_RF",
     "hn_ctxt
       (invalid_assn monom_assn \<times>\<^sub>a invalid_assn int_assn) ?xb
       ?x'a *
      (hn_invalid poly_assn ?la ?l'a * hn_invalid int_assn ?a2' ?a2.0 *
       hn_invalid monom_assn ?a1' ?a1.0 *
       hn_invalid poly_assn ?l ?l' *
       hn_invalid monomial_assn ?xa ?x' *
       hn_invalid poly_assn ?ax ?px) \<Longrightarrow>\<^sub>t
      hn_ctxt monomial_assn ?xb ?x'a * hn_ctxt poly_assn ?la ?l'a *
      hn_ctxt poly_assn ?l ?l' *
      (hn_invalid int_assn ?a2' ?a2.0 * hn_invalid monom_assn ?a1' ?a1.0 *
       hn_invalid monomial_assn ?xa ?x' *
       hn_invalid poly_assn ?ax ?px)",
     template_predicate
      (
         template_app
          (template_app
            (template_hole 16,
             template_app
              (template_app
                (template_hole 15,
                 template_app
                  (template_app
                    (template_app
                      (template_hole 14,
                       template_app
                        (template_app
                          (template_hole 13,
                           template_app
                            (template_hole 12,
                             template_app
                              (template_hole 11,
                               template_app
                                (template_hole 10, template_hole 9)))),
                         template_app
                          (template_hole 8,
                           template_app
                            (template_hole 7, template_hole 6)))),
                     template_var 13),
                   template_var 12)),
               template_app
                (template_app
                  (template_hole 15,
                   template_app
                    (template_app
                      (template_hole 15,
                       template_app
                        (template_app
                          (template_hole 15,
                           template_app
                            (template_app
                              (template_hole 15,
                               template_app
                                (template_app
                                  (template_hole 15,
                                   template_app
                                    (template_app
(template_app
  (template_hole 5,
   template_app
    (template_hole 4,
     template_app
      (template_hole 3,
       template_app
        (template_app
          (template_hole 13,
           template_app
            (template_hole 11,
             template_app (template_hole 10, template_hole 9))),
         template_app (template_hole 7, template_hole 6))))),
 template_var 11),
                                     template_var 10)),
                                 template_app
                                  (template_app
                                    (template_app
(template_hole 2,
 template_app
  (template_hole 8, template_app (template_hole 7, template_hole 6))),
                                     template_var 9),
                                   template_var 8))),
                             template_app
                              (template_app
                                (template_app
                                  (template_hole 1,
                                   template_app
                                    (template_hole 12,
                                     template_app
(template_hole 11, template_app (template_hole 10, template_hole 9)))),
                                 template_var 7),
                               template_var 6))),
                         template_app
                          (template_app
                            (template_app
                              (template_hole 5,
                               template_app
                                (template_hole 4,
                                 template_app
                                  (template_hole 3,
                                   template_app
                                    (template_app
(template_hole 13,
 template_app
  (template_hole 11, template_app (template_hole 10, template_hole 9))),
                                     template_app
(template_hole 7, template_hole 6))))),
                             template_var 5),
                           template_var 4))),
                     template_app
                      (template_app
                        (template_app
                          (template_hole 14,
                           template_app
                            (template_hole 0,
                             template_app
                              (template_app
                                (template_hole 13,
                                 template_app
                                  (template_hole 11,
                                   template_app
                                    (template_hole 10, template_hole 9))),
                               template_app
                                (template_hole 7, template_hole 6)))),
                         template_var 3),
                       template_var 2))),
                 template_app
                  (template_app
                    (template_app
                      (template_hole 5,
                       template_app
                        (template_hole 4,
                         template_app
                          (template_hole 3,
                           template_app
                            (template_app
                              (template_hole 13,
                               template_app
                                (template_hole 11,
                                 template_app
                                  (template_hole 10, template_hole 9))),
                             template_app
                              (template_hole 7, template_hole 6))))),
                     template_var 1),
                   template_var 0)))),
           template_app
            (template_app
              (template_hole 15,
               template_app
                (template_app
                  (template_hole 15,
                   template_app
                    (template_app
                      (template_hole 15,
                       template_app
                        (template_app
                          (template_app
                            (template_hole 14,
                             template_app
                              (template_app
                                (template_hole 13,
                                 template_app
                                  (template_hole 11,
                                   template_app
                                    (template_hole 10, template_hole 9))),
                               template_app
                                (template_hole 7, template_hole 6))),
                           template_var 13),
                         template_var 12)),
                     template_app
                      (template_app
                        (template_app
                          (template_hole 5,
                           template_app
                            (template_hole 3,
                             template_app
                              (template_app
                                (template_hole 13,
                                 template_app
                                  (template_hole 11,
                                   template_app
                                    (template_hole 10, template_hole 9))),
                               template_app
                                (template_hole 7, template_hole 6)))),
                         template_var 11),
                       template_var 10))),
                 template_app
                  (template_app
                    (template_app
                      (template_hole 5,
                       template_app
                        (template_hole 3,
                         template_app
                          (template_app
                            (template_hole 13,
                             template_app
                              (template_hole 11,
                               template_app
                                (template_hole 10, template_hole 9))),
                           template_app
                            (template_hole 7, template_hole 6)))),
                     template_var 5),
                   template_var 4))),
             template_app
              (template_app
                (template_hole 15,
                 template_app
                  (template_app
                    (template_hole 15,
                     template_app
                      (template_app
                        (template_hole 15,
                         template_app
                          (template_app
                            (template_app
                              (template_hole 2,
                               template_app
                                (template_hole 8,
                                 template_app
                                  (template_hole 7, template_hole 6))),
                             template_var 9),
                           template_var 8)),
                       template_app
                        (template_app
                          (template_app
                            (template_hole 1,
                             template_app
                              (template_hole 12,
                               template_app
                                (template_hole 11,
                                 template_app
                                  (template_hole 10, template_hole 9)))),
                           template_var 7),
                         template_var 6))),
                   template_app
                    (template_app
                      (template_app
                        (template_hole 14,
                         template_app
                          (template_hole 0,
                           template_app
                            (template_app
                              (template_hole 13,
                               template_app
                                (template_hole 11,
                                 template_app
                                  (template_hole 10, template_hole 9))),
                             template_app
                              (template_hole 7, template_hole 6)))),
                       template_var 3),
                     template_var 2))),
               template_app
                (template_app
                  (template_app
                    (template_hole 5,
                     template_app
                      (template_hole 4,
                       template_app
                        (template_hole 3,
                         template_app
                          (template_app
                            (template_hole 13,
                             template_app
                              (template_hole 11,
                               template_app
                                (template_hole 10, template_hole 9))),
                           template_app
                            (template_hole 7, template_hole 6))))),
                   template_var 1),
                 template_var 0))))
         ))]:
   (string * thm * template) list
### theory "Draft.PAC_Checker_InitTemplates"
### 1.776s elapsed time, 2.244s cpu time, 0.283s GC time
val it = (): unit
