Loading theory "Draft.PAC_Misc" (required by "Draft.PAC_Checker_RelationTemplates" via "Draft.PAC_Checker_Relation" via "Draft.PAC_Checker")
Loading theory "HOL-Library.Set_Algebras" (required by "Draft.PAC_Checker_RelationTemplates" via "Draft.ExtrEqs" via "HOL-Library.BigO")
Loading theory "HOL-Library.Stream" (required by "Draft.PAC_Checker_RelationTemplates" via "Draft.ExtrEqs")
Loading theory "HOL-Library.Tree" (required by "Draft.PAC_Checker_RelationTemplates" via "Draft.ExtrEqs" via "Draft.Templates")
instantiation
  set :: (plus) plus
  plus_set == plus :: 'a set => 'a set => 'a set
instantiation
  set :: (times) times
  times_set == times :: 'a set => 'a set => 'a set
### theory "Draft.PAC_Misc"
### 0.045s elapsed time, 0.205s cpu time, 0.000s GC time
Loading theory "Draft.Finite_Map_Multiset" (required by "Draft.PAC_Checker_RelationTemplates" via "Draft.PAC_Checker_Relation" via "Draft.PAC_Checker" via "Draft.PAC_Polynomials_Operations" via "Draft.PAC_Polynomials_Term" via "Draft.PAC_Polynomials")
instantiation
  set :: (zero) zero
  zero_set == zero_class.zero :: 'a set
instantiation
  set :: (one) one
  one_set == one_class.one :: 'a set
### theory "HOL-Library.Set_Algebras"
### 0.292s elapsed time, 1.147s cpu time, 0.059s GC time
Loading theory "HOL-Library.BigO" (required by "Draft.PAC_Checker_RelationTemplates" via "Draft.ExtrEqs")
consts
  shift :: "'a list => 'a stream => 'a stream"
Proofs for coinductive predicate(s) "streamsp"
  Proving monotonicity ...
consts
  snth :: "'a stream => nat => 'a"
### theory "Draft.Finite_Map_Multiset"
### 0.483s elapsed time, 1.809s cpu time, 0.244s GC time
Loading theory "Draft.PAC_More_Poly" (required by "Draft.PAC_Checker_RelationTemplates" via "Draft.PAC_Checker_Relation" via "Draft.PAC_Checker" via "Draft.PAC_Polynomials_Operations" via "Draft.PAC_Polynomials_Term" via "Draft.PAC_Polynomials" via "Draft.PAC_Specification")
consts
  stake :: "nat => 'a stream => 'a list"
consts
  left :: "'a tree => 'a tree"
consts
  sdrop :: "nat => 'a stream => 'a stream"
consts
  right :: "'a tree => 'a tree"
Found termination order: "size <*mlex*> {}"
consts
  sfilter :: "('a => bool) => 'a stream => 'a stream"
consts
  cycle :: "'a list => 'a stream"
Found termination order: "size <*mlex*> {}"
consts
  siterate :: "('a => 'a) => 'a => 'a stream"
Found termination order: "size <*mlex*> {}"
consts
  flat :: "'a list stream => 'a stream"
class height = type +
  fixes height :: "'a => nat"
instantiation
  tree :: (type) height
  height_tree == height :: 'a tree => nat
consts
  sinterleave :: "'a stream => 'a stream => 'a stream"
consts
  szip :: "'a stream => 'b stream => ('a * 'b) stream"
Found termination order: "size <*mlex*> {}"
consts
  smap2 :: "('a => 'b => 'c) => 'a stream => 'b stream => 'c stream"
### theory "HOL-Library.Stream"
### 0.904s elapsed time, 3.432s cpu time, 0.459s GC time
Loading theory "Draft.PAC_Map_Rel" (required by "Draft.PAC_Checker_RelationTemplates" via "Draft.PAC_Checker_Relation" via "Draft.PAC_Checker")
Found termination order: "size <*mlex*> {}"
Found termination order: "size <*mlex*> {}"
Found termination order: "size <*mlex*> {}"
### theory "HOL-Library.BigO"
### 0.974s elapsed time, 3.625s cpu time, 0.949s GC time
Loading theory "Draft.WB_Sort" (required by "Draft.PAC_Checker_RelationTemplates" via "Draft.PAC_Checker_Relation")
Found termination order: "size <*mlex*> {}"
Found termination order: "size <*mlex*> {}"
Found termination order: "size <*mlex*> {}"
Found termination order: "(%p. size (fst p)) <*mlex*> {}"
op_fmap_empty ::\<^sub>i TYPE((?'a, ?'b) f_map)
mop_fmap_empty ::\<^sub>i TYPE((?'a, ?'b) f_map nres)
Found termination order: "size <*mlex*> {}"
op_fmap_is_empty ::\<^sub>i TYPE((?'a, ?'b) f_map => bool)
mop_fmap_is_empty ::\<^sub>i TYPE((?'a, ?'b) f_map => bool nres)
op_fmap_update ::\<^sub>i
TYPE(?'a => ?'b => (?'a, ?'b) f_map => (?'a, ?'b) f_map)
Found termination order: "(%p. size (snd p)) <*mlex*> {}"
mop_fmap_update ::\<^sub>i
TYPE(?'a => ?'b => (?'a, ?'b) f_map => (?'a, ?'b) f_map nres)
### theory "Draft.PAC_More_Poly"
### 1.174s elapsed time, 4.371s cpu time, 1.048s GC time
Loading theory "Draft.PAC_Specification" (required by "Draft.PAC_Checker_RelationTemplates" via "Draft.PAC_Checker_Relation" via "Draft.PAC_Checker" via "Draft.PAC_Polynomials_Operations" via "Draft.PAC_Polynomials_Term" via "Draft.PAC_Polynomials")
op_fmap_delete ::\<^sub>i TYPE(?'a => (?'a, ?'b) f_map => (?'a, ?'b) f_map)
mop_fmap_delete ::\<^sub>i
TYPE(?'a => (?'a, ?'b) f_map => (?'a, ?'b) f_map nres)
Proofs for inductive predicate(s) "PAC_Format"
  Proving monotonicity ...
op_fmap_lookup ::\<^sub>i TYPE((?'a, ?'b) f_map => ?'a => ?'b option)
mop_fmap_lookup ::\<^sub>i TYPE((?'a, ?'b) f_map => ?'a => ?'b option nres)
Found termination order: "size <*mlex*> {}"
op_fmap_contains_key ::\<^sub>i TYPE(?'a => (?'a, ?'b) f_map => bool)
### theory "Draft.PAC_Specification"
### 0.327s elapsed time, 1.186s cpu time, 0.210s GC time
Loading theory "Draft.PAC_Polynomials" (required by "Draft.PAC_Checker_RelationTemplates" via "Draft.PAC_Checker_Relation" via "Draft.PAC_Checker" via "Draft.PAC_Polynomials_Operations" via "Draft.PAC_Polynomials_Term")
mop_fmap_contains_key ::\<^sub>i TYPE(?'a => (?'a, ?'b) f_map => bool nres)
### theory "HOL-Library.Tree"
### 2.444s elapsed time, 9.067s cpu time, 2.284s GC time
Loading theory "Draft.Templates" (required by "Draft.PAC_Checker_RelationTemplates" via "Draft.ExtrEqs")
datatype template_term
=
     t_empty
   | template_app of template_term * template_term
   | template_hole of int
   | template_var of int
datatype sign
= equals | greater_equals | greater_than | less_equals | less_than
datatype template
=
     template_bimplication of template * template
   | template_dunno
   | template_equation of template_term * template_term
   | template_implication of template list * template
   | template_inequation of sign * template_term * template_term
   | template_negation of template
   | template_predicate of template_term
constructor t_empty: template_term
constructor template_app: template_term * template_term -> template_term
constructor template_hole: int -> template_term
constructor template_var: int -> template_term
constructor equals: sign
constructor greater_equals: sign
constructor greater_than: sign
constructor less_equals: sign
constructor less_than: sign
constructor template_bimplication: template * template -> template
constructor template_dunno: template
constructor template_equation: template_term * template_term -> template
constructor template_implication: template list * template -> template
constructor template_inequation:
   sign * template_term * template_term -> template
constructor template_negation: template -> template
constructor template_predicate: template_term -> template
val vfs = fn: term -> (indexname * typ) list * (string * typ) list
val indexOf = fn: ''a list -> ''a -> int -> int
val has_eq = fn: term -> bool
val term2template = fn:
   (indexname * typ) list -> (string * typ) list -> term -> template_term
val lemma2predicate = fn: term -> term -> template
val makeTemplatewithContext = fn: term -> term -> template
val lemma2template = fn: term -> template
val thm2template = fn: thm -> template
val tterm2string = fn: template_term -> string
val template2string = fn: template -> string
val t = "height ?t <= size ?t": thm
val th =
   Const ("HOL.Trueprop", "bool => prop") $
     (Const ("Orderings.ord_class.less_eq", "nat => nat => bool") $
       (Const ("Tree.height_class.height", "?'a tree => nat") $
         Var (("t", 0), "?'a tree")) $
       (Const ("Nat.size_class.size", "?'a tree => nat") $
         Var (("t", 0), "?'a tree"))):
   term
### theory "Draft.Templates"
### 0.077s elapsed time, 0.305s cpu time, 0.000s GC time
Loading theory "Draft.ExtrEqs" (required by "Draft.PAC_Checker_RelationTemplates")
### theory "Draft.PAC_Map_Rel"
### 1.918s elapsed time, 7.042s cpu time, 2.026s GC time
Loading theory "Draft.PAC_Checker_Specification" (required by "Draft.PAC_Checker_RelationTemplates" via "Draft.PAC_Checker_Relation" via "Draft.PAC_Checker" via "Draft.PAC_Polynomials_Operations")
### theory "Draft.WB_Sort"
### 1.605s elapsed time, 5.901s cpu time, 1.457s GC time
"(x', u, lookup u x', A)"
  :: "'a * ('a \<Rightarrow>\<^sub>0 'b) * 'b * 'c"
Proofs for inductive predicate(s) "add_poly_p"
  Proving monotonicity ...
Proofs for inductive predicate(s) "mult_poly_p"
  Proving monotonicity ...
Proofs for inductive predicate(s) "normalize_poly_p"
  Proving monotonicity ...
locale poly_embed
  fixes \<phi> :: "char list => nat"
  assumes "poly_embed \<phi>"
val eqpattern =
   Pattern
    (
       Const ("HOL.Trueprop", "bool => prop") $
         (Const ("HOL.eq", "?'a => ?'a => bool") $
           Var (("_dummy_", 1), "?'a") $ Var (("_dummy_", 2), "?'a"))
       ):
   term Find_Theorems.criterion
val badeqpattern = Pattern (Const ("Pure.eq", "?'a => ?'a => prop")):
   term Find_Theorems.criterion
val undefpattern =
   Pattern
    (
       Const ("HOL.Trueprop", "bool => prop") $
         (Const ("HOL.eq", "?'a => ?'a => bool") $
           Var (("_dummy_", 1), "?'a") $ Const ("HOL.undefined", "?'a"))
       ):
   term Find_Theorems.criterion
val thmpattern =
   Pattern
    (Const ("HOL.Trueprop", "bool => prop") $ Var (("_dummy_", 1), "bool")):
   term Find_Theorems.criterion
val badnames =
   ["*nitpick*", "*Nitpick*", "*full_exhaustive*", "*_def*", "Enum.finite*",
    "*Quickcheck*", "ATP*", "*Nunchaku*", "*Code*", "*BNF*", "*SMT*",
    "*.*.*"]:
   string list
val unwanted_names =
   [(false, Name "*nitpick*"), (false, Name "*Nitpick*"),
    (false, Name "*full_exhaustive*"), (false, Name "*_def*"),
    (false, Name "Enum.finite*"), (false, Name "*Quickcheck*"),
    (false, Name "ATP*"), (false, Name "*Nunchaku*"),
    (false, Name "*Code*"), (false, Name "*BNF*"), (false, Name "*SMT*"),
    (false, Name "*.*.*")]:
   (bool * term Find_Theorems.criterion) list
val has_vars = fn: term -> bool
val get_all_eqs = fn: string -> Proof.context -> (string * thm) list
val get_all_thms = fn: string -> Proof.context -> (string * thm) list
val get_noneq_thms = fn: string -> Proof.context -> (string * thm) list
val template_eqs = fn:
   string -> Proof.context -> (string * thm * template) list
val template_thms = fn:
   string -> Proof.context -> (string * thm * template) list
### theory "Draft.ExtrEqs"
### 0.765s elapsed time, 2.617s cpu time, 0.398s GC time
locale poly_embed_bij
  fixes \<phi> :: "char list => nat"
    and V :: "char list set"
    and N :: "nat set"
  assumes "poly_embed_bij \<phi> V N"
### theory "Draft.PAC_Polynomials"
### 1.261s elapsed time, 4.400s cpu time, 1.181s GC time
Loading theory "Draft.PAC_Polynomials_Term" (required by "Draft.PAC_Checker_RelationTemplates" via "Draft.PAC_Checker_Relation" via "Draft.PAC_Checker" via "Draft.PAC_Polynomials_Operations")
### Partially applied constant "PAC_Polynomials_Term.less_eq_char" on left hand side of equation, in theorem:
### linorder.Min less_eq_char (set (?x # ?xs)) == fold char.min ?xs ?x
### Partially applied constant "PAC_Polynomials_Term.less_eq_char" on left hand side of equation, in theorem:
### linorder.Max less_eq_char (set (?x # ?xs)) == fold char.max ?xs ?x
### Partially applied constant "PAC_Polynomials_Term.less_eq_char" on left hand side of equation, in theorem:
### char.sorted [] == True
### Partially applied constant "PAC_Polynomials_Term.less_eq_char" on left hand side of equation, in theorem:
### char.sorted [?x] == True
### Partially applied constant "PAC_Polynomials_Term.less_eq_char" on left hand side of equation, in theorem:
### char.sorted (?x # ?y # ?zs) == less_eq_char ?x ?y & char.sorted (?y # ?zs)
### Partially applied constant "PAC_Polynomials_Term.less_eq_char" on left hand side of equation, in theorem:
### char.sorted_list_of_set (set ?xs) == char.sort (remdups ?xs)
### Partially applied constant "PAC_Polynomials_Term.less_char" on left hand side of equation, in theorem:
### char.part ?f ?pivot [] == ([], [], [])
### Partially applied constant "PAC_Polynomials_Term.less_char" on left hand side of equation, in theorem:
### char.part ?f ?pivot (?x # ?xs) ==
### let (lts, eqs, gts) = char.part ?f ?pivot ?xs; x' = ?f ?x
### in if less_char x' ?pivot then (?x # lts, eqs, gts)
###    else if less_char ?pivot x' then (lts, eqs, ?x # gts)
###         else (lts, ?x # eqs, gts)
### Partially applied constant "PAC_Polynomials_Term.less_eq_char" on left hand side of equation, in theorem:
### char.sort_key ?f ?xs ==
### case ?xs of [] => [] | [x] => ?xs
### | [x, y] => if less_eq_char (?f x) (?f y) then ?xs else [y, x]
### | x # y # ab # list =>
###     let (lts, eqs, gts) = char.part ?f (?f (?xs ! (length ?xs div 2))) ?xs
###     in char.sort_key ?f lts @ eqs @ char.sort_key ?f gts
### Partially applied constant "PAC_Polynomials_Term.less_eq_char" on left hand side of equation, in theorem:
### char.quicksort [] == []
### Partially applied constant "PAC_Polynomials_Term.less_eq_char" on left hand side of equation, in theorem:
### char.quicksort (?x # ?xs) ==
### char.quicksort (filter (%y. less_char y ?x) ?xs) @
### [?x] @ char.quicksort (filter (less_eq_char ?x) ?xs)
### theory "Draft.PAC_Polynomials_Term"
### 1.657s elapsed time, 3.425s cpu time, 0.460s GC time
Found termination order: "{}"
### theory "Draft.PAC_Checker_Specification"
### 4.107s elapsed time, 7.110s cpu time, 0.966s GC time
Loading theory "Draft.PAC_Polynomials_Operations" (required by "Draft.PAC_Checker_RelationTemplates" via "Draft.PAC_Checker_Relation" via "Draft.PAC_Checker")
Found termination order:
  "(%p. size_list (%p. (nat o abs) (snd p)) (snd p)) <*mlex*>
   (%p. size_list (%p. (nat o abs) (snd p)) (fst p)) <*mlex*> {}"
Found termination order:
  "(%p. size_list (size_list size) (snd p)) <*mlex*>
   (%p. size_list (size_list size) (fst p)) <*mlex*> {}"
### Ambiguous input (line 414 of "$AFP/PAC_Checker/PAC_Polynomials_Operations.thy") produces 4 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Set.member"
###     ("_tuple" ("_position" mult_monoms)
###       ("_tuple_arg"
###         ("_lambda" ("_pttrns" ("_position" a) ("_position" b))
###           ("_applC" ("_position" remdups_mset)
###             ("\<^const>Groups.plus_class.plus" ("_position" a)
###               ("_position" b))))))
###     ("\<^const>FuncSet.funcset" ("_position" term_poly_list_rel)
###       ("\<^const>FuncSet.funcset" ("_position" term_poly_list_rel)
###         ("_position" term_poly_list_rel)))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Set.member"
###     ("_tuple" ("_position" mult_monoms)
###       ("_tuple_arg"
###         ("_lambda" ("_pttrns" ("_position" a) ("_position" b))
###           ("_applC" ("_position" remdups_mset)
###             ("\<^const>Groups.plus_class.plus" ("_position" a)
###               ("_position" b))))))
###     ("\<^const>Relators.fun_rel_syn" ("_position" term_poly_list_rel)
###       ("\<^const>FuncSet.funcset" ("_position" term_poly_list_rel)
###         ("_position" term_poly_list_rel)))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Set.member"
###     ("_tuple" ("_position" mult_monoms)
###       ("_tuple_arg"
###         ("_lambda" ("_pttrns" ("_position" a) ("_position" b))
###           ("_applC" ("_position" remdups_mset)
###             ("\<^const>Groups.plus_class.plus" ("_position" a)
###               ("_position" b))))))
###     ("\<^const>FuncSet.funcset" ("_position" term_poly_list_rel)
###       ("\<^const>Relators.fun_rel_syn" ("_position" term_poly_list_rel)
###         ("_position" term_poly_list_rel)))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Set.member"
###     ("_tuple" ("_position" mult_monoms)
###       ("_tuple_arg"
###         ("_lambda" ("_pttrns" ("_position" a) ("_position" b))
###           ("_applC" ("_position" remdups_mset)
###             ("\<^const>Groups.plus_class.plus" ("_position" a)
###               ("_position" b))))))
###     ("\<^const>Relators.fun_rel_syn" ("_position" term_poly_list_rel)
###       ("\<^const>Relators.fun_rel_syn" ("_position" term_poly_list_rel)
###         ("_position" term_poly_list_rel)))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
Found termination order: "(%p. length (snd (snd p))) <*mlex*> {}"
Found termination order: "size_list (%p. (nat o abs) (snd p)) <*mlex*> {}"
Found termination order: "size_list (%p. (nat o abs) (snd p)) <*mlex*> {}"
Found termination order: "length <*mlex*> {}"
locale poly_embed
  fixes \<phi> :: "char list => nat"
  assumes "poly_embed \<phi>"
### theory "Draft.PAC_Polynomials_Operations"
### 3.573s elapsed time, 3.869s cpu time, 0.460s GC time
Loading theory "Draft.PAC_Checker" (required by "Draft.PAC_Checker_RelationTemplates" via "Draft.PAC_Checker_Relation")
Found termination order: "{}"
Found termination order: "{}"
Found termination order: "{}"
consts
  insort_key_rel :: "('b => 'b => bool) => 'b => 'b list => 'b list"
locale poly_embed
  fixes \<phi> :: "char list => nat"
  assumes "poly_embed \<phi>"
See theory exports
locale poly_embed
  fixes \<phi> :: "char list => nat"
  assumes "poly_embed \<phi>"
"normalize_poly_spec"
  :: "int mpoly => int mpoly nres"
(?p, ?p') : fully_unsorted_poly_rel O mset_poly_rel ==>
full_normalize_poly ?p
<= \<Down> (sorted_poly_rel O mset_poly_rel) (normalize_poly_spec ?p')
### theory "Draft.PAC_Checker"
### 5.114s elapsed time, 6.401s cpu time, 0.862s GC time
Loading theory "Draft.PAC_Checker_Relation" (required by "Draft.PAC_Checker_RelationTemplates")
instantiation
  uint32 :: hashable
  hashcode_uint32 == hashcode :: uint32 => uint32
  def_hashmap_size_uint32 == def_hashmap_size :: uint32 itself => nat
instantiation
  uint64 :: hashable
  hashcode_uint64 == hashcode :: uint64 => uint32
  def_hashmap_size_uint64 == def_hashmap_size :: uint64 itself => nat
### Ambiguous input (line 83 of "$AFP/PAC_Checker/PAC_Checker_Relation.thy") produces 4 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Set.member"
###     ("_tuple" ("\<^const>HOL.eq") ("_tuple_arg" ("\<^const>HOL.eq")))
###     ("\<^const>FuncSet.funcset" ("_position" string_rel)
###       ("\<^const>FuncSet.funcset" ("_position" string_rel)
###         ("_position" bool_rel)))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Set.member"
###     ("_tuple" ("\<^const>HOL.eq") ("_tuple_arg" ("\<^const>HOL.eq")))
###     ("\<^const>Relators.fun_rel_syn" ("_position" string_rel)
###       ("\<^const>FuncSet.funcset" ("_position" string_rel)
###         ("_position" bool_rel)))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Set.member"
###     ("_tuple" ("\<^const>HOL.eq") ("_tuple_arg" ("\<^const>HOL.eq")))
###     ("\<^const>FuncSet.funcset" ("_position" string_rel)
###       ("\<^const>Relators.fun_rel_syn" ("_position" string_rel)
###         ("_position" bool_rel)))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Set.member"
###     ("_tuple" ("\<^const>HOL.eq") ("_tuple_arg" ("\<^const>HOL.eq")))
###     ("\<^const>Relators.fun_rel_syn" ("_position" string_rel)
###       ("\<^const>Relators.fun_rel_syn" ("_position" string_rel)
###         ("_position" bool_rel)))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
instantiation
  char :: linorder
  less_eq_char == less_eq :: char => char => bool
  less_char == less :: char => char => bool
instantiation
  list :: (linorder) linorder
  less_eq_list == less_eq :: 'a list => 'a list => bool
  less_list == less :: 'a list => 'a list => bool
### Ambiguous input (line 338 of "$AFP/PAC_Checker/PAC_Checker_Relation.thy") produces 4 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Set.member"
###     ("_tuple" ("\<^const>Orderings.ord_class.less")
###       ("_tuple_arg" ("\<^const>Orderings.ord_class.less")))
###     ("\<^const>FuncSet.funcset"
###       ("_rel_APP" ("_position" string_rel) ("_position" list_rel))
###       ("\<^const>FuncSet.funcset"
###         ("_rel_APP" ("_position" string_rel) ("_position" list_rel))
###         ("_position" bool_rel)))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Set.member"
###     ("_tuple" ("\<^const>Orderings.ord_class.less")
###       ("_tuple_arg" ("\<^const>Orderings.ord_class.less")))
###     ("\<^const>Relators.fun_rel_syn"
###       ("_rel_APP" ("_position" string_rel) ("_position" list_rel))
###       ("\<^const>FuncSet.funcset"
###         ("_rel_APP" ("_position" string_rel) ("_position" list_rel))
###         ("_position" bool_rel)))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Set.member"
###     ("_tuple" ("\<^const>Orderings.ord_class.less")
###       ("_tuple_arg" ("\<^const>Orderings.ord_class.less")))
###     ("\<^const>FuncSet.funcset"
###       ("_rel_APP" ("_position" string_rel) ("_position" list_rel))
###       ("\<^const>Relators.fun_rel_syn"
###         ("_rel_APP" ("_position" string_rel) ("_position" list_rel))
###         ("_position" bool_rel)))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Set.member"
###     ("_tuple" ("\<^const>Orderings.ord_class.less")
###       ("_tuple_arg" ("\<^const>Orderings.ord_class.less")))
###     ("\<^const>Relators.fun_rel_syn"
###       ("_rel_APP" ("_position" string_rel) ("_position" list_rel))
###       ("\<^const>Relators.fun_rel_syn"
###         ("_rel_APP" ("_position" string_rel) ("_position" list_rel))
###         ("_position" bool_rel)))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 344 of "$AFP/PAC_Checker/PAC_Checker_Relation.thy") produces 4 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Set.member"
###     ("_tuple" ("_position" remove1) ("_tuple_arg" ("_position" remove1)))
###     ("\<^const>FuncSet.funcset" ("_position" R)
###       ("\<^const>FuncSet.funcset"
###         ("_rel_APP" ("_position" R) ("_position" list_rel))
###         ("_rel_APP" ("_position" R) ("_position" list_rel))))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Set.member"
###     ("_tuple" ("_position" remove1) ("_tuple_arg" ("_position" remove1)))
###     ("\<^const>Relators.fun_rel_syn" ("_position" R)
###       ("\<^const>FuncSet.funcset"
###         ("_rel_APP" ("_position" R) ("_position" list_rel))
###         ("_rel_APP" ("_position" R) ("_position" list_rel))))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Set.member"
###     ("_tuple" ("_position" remove1) ("_tuple_arg" ("_position" remove1)))
###     ("\<^const>FuncSet.funcset" ("_position" R)
###       ("\<^const>Relators.fun_rel_syn"
###         ("_rel_APP" ("_position" R) ("_position" list_rel))
###         ("_rel_APP" ("_position" R) ("_position" list_rel))))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Set.member"
###     ("_tuple" ("_position" remove1) ("_tuple_arg" ("_position" remove1)))
###     ("\<^const>Relators.fun_rel_syn" ("_position" R)
###       ("\<^const>Relators.fun_rel_syn"
###         ("_rel_APP" ("_position" R) ("_position" list_rel))
###         ("_rel_APP" ("_position" R) ("_position" list_rel))))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
instantiation
  pac_step :: (heap, heap, heap) heap
### theory "Draft.PAC_Checker_Relation"
### 0.854s elapsed time, 0.897s cpu time, 0.073s GC time
Loading theory "Draft.PAC_Checker_RelationTemplates"
val templateLemmas =
   [("PAC_Checker_Relation.word_nat_of_uint64_Rep_inject",
     "(nat_of_uint64 ?ai = nat_of_uint64 ?bi) = (?ai = ?bi)",
     template_bimplication
      (template_equation
        (template_app (template_hole 1, template_var 1),
         template_app (template_hole 1, template_var 0)),
       template_equation (template_var 1, template_var 0))),
    ("PAC_Checker_Relation.string_rel_string_assn",
     "\<up> ((?c, ?a) : string_rel) = string_assn ?a ?c",
     template_equation
      (template_app
        (template_hole 4,
         template_app
          (template_app
            (template_hole 3,
             template_app
              (template_app (template_hole 2, template_var 1),
               template_var 0)),
           template_hole 1)),
       template_app
        (template_app
          (template_app (template_hole 0, template_hole 1), template_var 0),
         template_var 1))),
    ("PAC_Checker_Relation.less_upper_bintrunc_id",
     "[| ?n < 2 ^ ?b; 0 <= ?n |] ==> take_bit ?b ?n = ?n",
     template_implication
      ([template_inequation
         (less_than, template_var 1,
          template_app
           (template_app
             (template_hole 7,
              template_app
               (template_hole 6,
                template_app (template_hole 5, template_hole 4))),
            template_var 0)),
        template_inequation (less_equals, template_hole 2, template_var 1)],
       template_equation
        (template_app
          (template_app (template_hole 0, template_var 0), template_var 1),
         template_var 1))),
    ("PAC_Checker_Relation.nat_of_uint64_uint64_of_nat_id",
     "?n < 2 ^ 64 ==> nat_of_uint64 (uint64_of_nat ?n) = ?n",
     template_implication
      ([template_inequation
         (less_than, template_var 0,
          template_app
           (template_app
             (template_hole 6,
              template_app
               (template_hole 5,
                template_app (template_hole 4, template_hole 3))),
            template_app
             (template_hole 5,
              template_app
               (template_hole 4,
                template_app
                 (template_hole 4,
                  template_app
                   (template_hole 4,
                    template_app
                     (template_hole 4,
                      template_app
                       (template_hole 4,
                        template_app
                         (template_hole 4, template_hole 3)))))))))],
       template_equation
        (template_app
          (template_hole 1, template_app (template_hole 0, template_var 0)),
         template_var 0))),
    ("PAC_Checker_Relation.list_rel_list_rel_order_iff",
     "[| (?a, ?b) : monom_rel; (?a', ?b') : monom_rel |]
      ==> (?a < ?a') = (?b < ?b')",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_hole 7,
                template_app
                 (template_app (template_hole 6, template_var 3),
                  template_var 2)),
              template_app
               (template_app (template_hole 5, template_hole 4),
                template_hole 3))
            ),
        template_predicate
         (
            template_app
             (template_app
               (template_hole 7,
                template_app
                 (template_app (template_hole 6, template_var 1),
                  template_var 0)),
              template_app
               (template_app (template_hole 5, template_hole 4),
                template_hole 3))
            )],
       template_equation
        (template_app
          (template_app (template_hole 1, template_var 3), template_var 1),
         template_app
          (template_app (template_hole 0, template_var 2),
           template_var 0)))),
    ("PAC_Checker_Relation.eq_string_eq_hnr",
     "hn_refine (hn_val string_rel ?x'6 ?x6 * hn_val string_rel ?x'a6 ?xa6)
       (return (?x6 = ?xa6))
       (hn_val string_rel ?x'6 ?x6 * hn_val string_rel ?x'a6 ?xa6) bool_assn
       (RETURN $ ((=) $ ?x'6 $ ?x'a6))",
     template_predicate
      (
         template_app
          (template_app
            (template_app
              (template_app
                (template_app
                  (template_hole 13,
                   template_app
                    (template_app
                      (template_hole 12,
                       template_app
                        (template_app
                          (template_app
                            (template_hole 11,
                             template_app
                              (template_hole 10, template_hole 9)),
                           template_var 3),
                         template_var 2)),
                     template_app
                      (template_app
                        (template_app
                          (template_hole 11,
                           template_app
                            (template_hole 10, template_hole 9)),
                         template_var 1),
                       template_var 0))),
                 template_app
                  (template_hole 8,
                   template_app
                    (template_app (template_hole 7, template_var 2),
                     template_var 0))),
               template_app
                (template_app
                  (template_hole 12,
                   template_app
                    (template_app
                      (template_app
                        (template_hole 11,
                         template_app (template_hole 10, template_hole 9)),
                       template_var 3),
                     template_var 2)),
                 template_app
                  (template_app
                    (template_app
                      (template_hole 11,
                       template_app (template_hole 10, template_hole 9)),
                     template_var 1),
                   template_var 0))),
             template_app (template_hole 6, template_hole 5)),
           template_app
            (template_app (template_hole 4, template_hole 3),
             template_app
              (template_app
                (template_hole 2,
                 template_app
                  (template_app (template_hole 1, template_hole 0),
                   template_var 3)),
               template_var 1)))
         )),
    ("PAC_Checker_Relation.string_rel_le",
     "hn_refine
       (hn_ctxt monom_assn ?x'6 ?x6 * hn_ctxt monom_assn ?x'a6 ?xa6)
       (return (?x6 < ?xa6))
       (hn_ctxt monom_assn ?x'6 ?x6 * hn_ctxt monom_assn ?x'a6 ?xa6)
       bool_assn (RETURN $ ((<) $ ?x'6 $ ?x'a6))",
     template_predicate
      (
         template_app
          (template_app
            (template_app
              (template_app
                (template_app
                  (template_hole 14,
                   template_app
                    (template_app
                      (template_hole 13,
                       template_app
                        (template_app
                          (template_app
                            (template_hole 12,
                             template_app
                              (template_hole 11,
                               template_app
                                (template_hole 10, template_hole 9))),
                           template_var 3),
                         template_var 2)),
                     template_app
                      (template_app
                        (template_app
                          (template_hole 12,
                           template_app
                            (template_hole 11,
                             template_app
                              (template_hole 10, template_hole 9))),
                         template_var 1),
                       template_var 0))),
                 template_app
                  (template_hole 8,
                   template_app
                    (template_app (template_hole 7, template_var 2),
                     template_var 0))),
               template_app
                (template_app
                  (template_hole 13,
                   template_app
                    (template_app
                      (template_app
                        (template_hole 12,
                         template_app
                          (template_hole 11,
                           template_app
                            (template_hole 10, template_hole 9))),
                       template_var 3),
                     template_var 2)),
                 template_app
                  (template_app
                    (template_app
                      (template_hole 12,
                       template_app
                        (template_hole 11,
                         template_app (template_hole 10, template_hole 9))),
                     template_var 1),
                   template_var 0))),
             template_app (template_hole 6, template_hole 5)),
           template_app
            (template_app (template_hole 4, template_hole 3),
             template_app
              (template_app
                (template_hole 2,
                 template_app
                  (template_app (template_hole 1, template_hole 0),
                   template_var 3)),
               template_var 1)))
         ))]:
   (string * thm * template) list
### theory "Draft.PAC_Checker_RelationTemplates"
### 2.186s elapsed time, 3.793s cpu time, 1.992s GC time
val it = (): unit
