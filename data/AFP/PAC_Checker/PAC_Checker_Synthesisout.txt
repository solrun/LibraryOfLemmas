Loading theory "Draft.PAC_Version" (required by "Draft.PAC_Checker_SynthesisTemplates" via "Draft.PAC_Checker_Synthesis")
Loading theory "Draft.PAC_Misc" (required by "Draft.PAC_Checker_SynthesisTemplates" via "Draft.PAC_Checker_Synthesis" via "Draft.PAC_Checker")
Loading theory "HOL-Library.Stream" (required by "Draft.PAC_Checker_SynthesisTemplates" via "Draft.ExtrEqs")
Loading theory "HOL-Library.Set_Algebras" (required by "Draft.PAC_Checker_SynthesisTemplates" via "Draft.ExtrEqs" via "HOL-Library.BigO")
### theory "Draft.PAC_Version"
### 0.030s elapsed time, 0.146s cpu time, 0.000s GC time
Loading theory "HOL-Library.Tree" (required by "Draft.PAC_Checker_SynthesisTemplates" via "Draft.ExtrEqs" via "Draft.Templates")
instantiation
  set :: (plus) plus
  plus_set == plus :: 'a set => 'a set => 'a set
### theory "Draft.PAC_Misc"
### 0.036s elapsed time, 0.176s cpu time, 0.000s GC time
Loading theory "Draft.Finite_Map_Multiset" (required by "Draft.PAC_Checker_SynthesisTemplates" via "Draft.PAC_Checker_Synthesis" via "Draft.PAC_Checker" via "Draft.PAC_Polynomials_Operations" via "Draft.PAC_Polynomials_Term" via "Draft.PAC_Polynomials")
instantiation
  set :: (times) times
  times_set == times :: 'a set => 'a set => 'a set
instantiation
  set :: (zero) zero
  zero_set == zero_class.zero :: 'a set
instantiation
  set :: (one) one
  one_set == one_class.one :: 'a set
### theory "HOL-Library.Set_Algebras"
### 0.299s elapsed time, 1.189s cpu time, 0.056s GC time
Loading theory "HOL-Library.BigO" (required by "Draft.PAC_Checker_SynthesisTemplates" via "Draft.ExtrEqs")
consts
  shift :: "'a list => 'a stream => 'a stream"
Proofs for coinductive predicate(s) "streamsp"
  Proving monotonicity ...
### theory "Draft.Finite_Map_Multiset"
### 0.430s elapsed time, 1.634s cpu time, 0.168s GC time
Loading theory "Draft.More_Loops" (required by "Draft.PAC_Checker_SynthesisTemplates" via "Draft.PAC_Checker_Synthesis")
consts
  snth :: "'a stream => nat => 'a"
consts
  stake :: "nat => 'a stream => 'a list"
consts
  sdrop :: "nat => 'a stream => 'a stream"
consts
  sfilter :: "('a => bool) => 'a stream => 'a stream"
consts
  left :: "'a tree => 'a tree"
consts
  right :: "'a tree => 'a tree"
consts
  cycle :: "'a list => 'a stream"
consts
  siterate :: "('a => 'a) => 'a => 'a stream"
Found termination order: "size <*mlex*> {}"
### theory "Draft.More_Loops"
### 0.278s elapsed time, 1.040s cpu time, 0.139s GC time
Loading theory "Draft.PAC_More_Poly" (required by "Draft.PAC_Checker_SynthesisTemplates" via "Draft.PAC_Checker_Synthesis" via "Draft.PAC_Checker" via "Draft.PAC_Polynomials_Operations" via "Draft.PAC_Polynomials_Term" via "Draft.PAC_Polynomials" via "Draft.PAC_Specification")
consts
  flat :: "'a list stream => 'a stream"
Found termination order: "size <*mlex*> {}"
consts
  sinterleave :: "'a stream => 'a stream => 'a stream"
consts
  szip :: "'a stream => 'b stream => ('a * 'b) stream"
Found termination order: "size <*mlex*> {}"
consts
  smap2 :: "('a => 'b => 'c) => 'a stream => 'b stream => 'c stream"
class height = type +
  fixes height :: "'a => nat"
instantiation
  tree :: (type) height
  height_tree == height :: 'a tree => nat
### theory "HOL-Library.Stream"
### 0.919s elapsed time, 3.496s cpu time, 0.394s GC time
Loading theory "Draft.PAC_Map_Rel" (required by "Draft.PAC_Checker_SynthesisTemplates" via "Draft.PAC_Checker_Synthesis" via "Draft.PAC_Checker")
Found termination order: "size <*mlex*> {}"
Found termination order: "size <*mlex*> {}"
Found termination order: "size <*mlex*> {}"
### theory "HOL-Library.BigO"
### 1.007s elapsed time, 3.688s cpu time, 0.933s GC time
Loading theory "Draft.WB_Sort" (required by "Draft.PAC_Checker_SynthesisTemplates" via "Draft.PAC_Checker_Synthesis")
Found termination order: "size <*mlex*> {}"
Found termination order: "size <*mlex*> {}"
Found termination order: "size <*mlex*> {}"
Found termination order: "size <*mlex*> {}"
op_fmap_empty ::\<^sub>i TYPE((?'a, ?'b) f_map)
mop_fmap_empty ::\<^sub>i TYPE((?'a, ?'b) f_map nres)
Found termination order: "(%p. size (fst p)) <*mlex*> {}"
op_fmap_is_empty ::\<^sub>i TYPE((?'a, ?'b) f_map => bool)
mop_fmap_is_empty ::\<^sub>i TYPE((?'a, ?'b) f_map => bool nres)
Found termination order: "size <*mlex*> {}"
op_fmap_update ::\<^sub>i
TYPE(?'a => ?'b => (?'a, ?'b) f_map => (?'a, ?'b) f_map)
mop_fmap_update ::\<^sub>i
TYPE(?'a => ?'b => (?'a, ?'b) f_map => (?'a, ?'b) f_map nres)
Found termination order: "(%p. size (snd p)) <*mlex*> {}"
op_fmap_delete ::\<^sub>i TYPE(?'a => (?'a, ?'b) f_map => (?'a, ?'b) f_map)
mop_fmap_delete ::\<^sub>i
TYPE(?'a => (?'a, ?'b) f_map => (?'a, ?'b) f_map nres)
### theory "Draft.PAC_More_Poly"
### 1.176s elapsed time, 4.321s cpu time, 1.006s GC time
Loading theory "Draft.PAC_Specification" (required by "Draft.PAC_Checker_SynthesisTemplates" via "Draft.PAC_Checker_Synthesis" via "Draft.PAC_Checker" via "Draft.PAC_Polynomials_Operations" via "Draft.PAC_Polynomials_Term" via "Draft.PAC_Polynomials")
op_fmap_lookup ::\<^sub>i TYPE((?'a, ?'b) f_map => ?'a => ?'b option)
mop_fmap_lookup ::\<^sub>i TYPE((?'a, ?'b) f_map => ?'a => ?'b option nres)
op_fmap_contains_key ::\<^sub>i TYPE(?'a => (?'a, ?'b) f_map => bool)
mop_fmap_contains_key ::\<^sub>i TYPE(?'a => (?'a, ?'b) f_map => bool nres)
Proofs for inductive predicate(s) "PAC_Format"
  Proving monotonicity ...
Found termination order: "size <*mlex*> {}"
### theory "Draft.PAC_Specification"
### 0.548s elapsed time, 1.984s cpu time, 0.871s GC time
Loading theory "Draft.PAC_Polynomials" (required by "Draft.PAC_Checker_SynthesisTemplates" via "Draft.PAC_Checker_Synthesis" via "Draft.PAC_Checker" via "Draft.PAC_Polynomials_Operations" via "Draft.PAC_Polynomials_Term")
### theory "HOL-Library.Tree"
### 2.575s elapsed time, 9.512s cpu time, 2.306s GC time
Loading theory "Draft.Templates" (required by "Draft.PAC_Checker_SynthesisTemplates" via "Draft.ExtrEqs")
datatype template_term
=
     t_empty
   | template_app of template_term * template_term
   | template_hole of int
   | template_var of int
datatype sign
= equals | greater_equals | greater_than | less_equals | less_than
datatype template
=
     template_bimplication of template * template
   | template_dunno
   | template_equation of template_term * template_term
   | template_implication of template list * template
   | template_inequation of sign * template_term * template_term
   | template_negation of template
   | template_predicate of template_term
constructor t_empty: template_term
constructor template_app: template_term * template_term -> template_term
constructor template_hole: int -> template_term
constructor template_var: int -> template_term
constructor equals: sign
constructor greater_equals: sign
constructor greater_than: sign
constructor less_equals: sign
constructor less_than: sign
constructor template_bimplication: template * template -> template
constructor template_dunno: template
constructor template_equation: template_term * template_term -> template
constructor template_implication: template list * template -> template
constructor template_inequation:
   sign * template_term * template_term -> template
constructor template_negation: template -> template
constructor template_predicate: template_term -> template
val vfs = fn: term -> (indexname * typ) list * (string * typ) list
val indexOf = fn: ''a list -> ''a -> int -> int
val has_eq = fn: term -> bool
val term2template = fn:
   (indexname * typ) list -> (string * typ) list -> term -> template_term
val lemma2predicate = fn: term -> term -> template
val makeTemplatewithContext = fn: term -> term -> template
val lemma2template = fn: term -> template
val thm2template = fn: thm -> template
val tterm2string = fn: template_term -> string
val template2string = fn: template -> string
val t = "height ?t <= size ?t": thm
val th =
   Const ("HOL.Trueprop", "bool => prop") $
     (Const ("Orderings.ord_class.less_eq", "nat => nat => bool") $
       (Const ("Tree.height_class.height", "?'a tree => nat") $
         Var (("t", 0), "?'a tree")) $
       (Const ("Nat.size_class.size", "?'a tree => nat") $
         Var (("t", 0), "?'a tree"))):
   term
### theory "Draft.Templates"
### 0.089s elapsed time, 0.311s cpu time, 0.089s GC time
Loading theory "Draft.ExtrEqs" (required by "Draft.PAC_Checker_SynthesisTemplates")
### theory "Draft.PAC_Map_Rel"
### 1.933s elapsed time, 7.059s cpu time, 2.069s GC time
Loading theory "Draft.PAC_Checker_Specification" (required by "Draft.PAC_Checker_SynthesisTemplates" via "Draft.PAC_Checker_Synthesis" via "Draft.PAC_Checker" via "Draft.PAC_Polynomials_Operations")
### theory "Draft.WB_Sort"
### 1.560s elapsed time, 5.745s cpu time, 1.474s GC time
"(x', u, lookup u x', A)"
  :: "'a * ('a \<Rightarrow>\<^sub>0 'b) * 'b * 'c"
Proofs for inductive predicate(s) "add_poly_p"
  Proving monotonicity ...
Proofs for inductive predicate(s) "mult_poly_p"
  Proving monotonicity ...
Proofs for inductive predicate(s) "normalize_poly_p"
  Proving monotonicity ...
locale poly_embed
  fixes \<phi> :: "char list => nat"
  assumes "poly_embed \<phi>"
val eqpattern =
   Pattern
    (
       Const ("HOL.Trueprop", "bool => prop") $
         (Const ("HOL.eq", "?'a => ?'a => bool") $
           Var (("_dummy_", 1), "?'a") $ Var (("_dummy_", 2), "?'a"))
       ):
   term Find_Theorems.criterion
val badeqpattern = Pattern (Const ("Pure.eq", "?'a => ?'a => prop")):
   term Find_Theorems.criterion
val undefpattern =
   Pattern
    (
       Const ("HOL.Trueprop", "bool => prop") $
         (Const ("HOL.eq", "?'a => ?'a => bool") $
           Var (("_dummy_", 1), "?'a") $ Const ("HOL.undefined", "?'a"))
       ):
   term Find_Theorems.criterion
val thmpattern =
   Pattern
    (Const ("HOL.Trueprop", "bool => prop") $ Var (("_dummy_", 1), "bool")):
   term Find_Theorems.criterion
val badnames =
   ["*nitpick*", "*Nitpick*", "*full_exhaustive*", "*_def*", "Enum.finite*",
    "*Quickcheck*", "ATP*", "*Nunchaku*", "*Code*", "*BNF*", "*SMT*",
    "*.*.*"]:
   string list
val unwanted_names =
   [(false, Name "*nitpick*"), (false, Name "*Nitpick*"),
    (false, Name "*full_exhaustive*"), (false, Name "*_def*"),
    (false, Name "Enum.finite*"), (false, Name "*Quickcheck*"),
    (false, Name "ATP*"), (false, Name "*Nunchaku*"),
    (false, Name "*Code*"), (false, Name "*BNF*"), (false, Name "*SMT*"),
    (false, Name "*.*.*")]:
   (bool * term Find_Theorems.criterion) list
val has_vars = fn: term -> bool
val get_all_eqs = fn: string -> Proof.context -> (string * thm) list
val get_all_thms = fn: string -> Proof.context -> (string * thm) list
val get_noneq_thms = fn: string -> Proof.context -> (string * thm) list
val template_eqs = fn:
   string -> Proof.context -> (string * thm * template) list
val template_thms = fn:
   string -> Proof.context -> (string * thm * template) list
### theory "Draft.ExtrEqs"
### 0.948s elapsed time, 3.209s cpu time, 1.263s GC time
locale poly_embed_bij
  fixes \<phi> :: "char list => nat"
    and V :: "char list set"
    and N :: "nat set"
  assumes "poly_embed_bij \<phi> V N"
### theory "Draft.PAC_Polynomials"
### 1.265s elapsed time, 4.191s cpu time, 1.474s GC time
Loading theory "Draft.PAC_Polynomials_Term" (required by "Draft.PAC_Checker_SynthesisTemplates" via "Draft.PAC_Checker_Synthesis" via "Draft.PAC_Checker" via "Draft.PAC_Polynomials_Operations")
### Partially applied constant "PAC_Polynomials_Term.less_eq_char" on left hand side of equation, in theorem:
### linorder.Min less_eq_char (set (?x # ?xs)) == fold char.min ?xs ?x
### Partially applied constant "PAC_Polynomials_Term.less_eq_char" on left hand side of equation, in theorem:
### linorder.Max less_eq_char (set (?x # ?xs)) == fold char.max ?xs ?x
### Partially applied constant "PAC_Polynomials_Term.less_eq_char" on left hand side of equation, in theorem:
### char.sorted [] == True
### Partially applied constant "PAC_Polynomials_Term.less_eq_char" on left hand side of equation, in theorem:
### char.sorted [?x] == True
### Partially applied constant "PAC_Polynomials_Term.less_eq_char" on left hand side of equation, in theorem:
### char.sorted (?x # ?y # ?zs) == less_eq_char ?x ?y & char.sorted (?y # ?zs)
### Partially applied constant "PAC_Polynomials_Term.less_eq_char" on left hand side of equation, in theorem:
### char.sorted_list_of_set (set ?xs) == char.sort (remdups ?xs)
### Partially applied constant "PAC_Polynomials_Term.less_char" on left hand side of equation, in theorem:
### char.part ?f ?pivot [] == ([], [], [])
### Partially applied constant "PAC_Polynomials_Term.less_char" on left hand side of equation, in theorem:
### char.part ?f ?pivot (?x # ?xs) ==
### let (lts, eqs, gts) = char.part ?f ?pivot ?xs; x' = ?f ?x
### in if less_char x' ?pivot then (?x # lts, eqs, gts)
###    else if less_char ?pivot x' then (lts, eqs, ?x # gts)
###         else (lts, ?x # eqs, gts)
### Partially applied constant "PAC_Polynomials_Term.less_eq_char" on left hand side of equation, in theorem:
### char.sort_key ?f ?xs ==
### case ?xs of [] => [] | [x] => ?xs
### | [x, y] => if less_eq_char (?f x) (?f y) then ?xs else [y, x]
### | x # y # ab # list =>
###     let (lts, eqs, gts) = char.part ?f (?f (?xs ! (length ?xs div 2))) ?xs
###     in char.sort_key ?f lts @ eqs @ char.sort_key ?f gts
### Partially applied constant "PAC_Polynomials_Term.less_eq_char" on left hand side of equation, in theorem:
### char.quicksort [] == []
### Partially applied constant "PAC_Polynomials_Term.less_eq_char" on left hand side of equation, in theorem:
### char.quicksort (?x # ?xs) ==
### char.quicksort (filter (%y. less_char y ?x) ?xs) @
### [?x] @ char.quicksort (filter (less_eq_char ?x) ?xs)
### theory "Draft.PAC_Polynomials_Term"
### 1.696s elapsed time, 3.538s cpu time, 0.480s GC time
Found termination order: "{}"
### theory "Draft.PAC_Checker_Specification"
### 4.503s elapsed time, 8.451s cpu time, 1.944s GC time
Loading theory "Draft.PAC_Polynomials_Operations" (required by "Draft.PAC_Checker_SynthesisTemplates" via "Draft.PAC_Checker_Synthesis" via "Draft.PAC_Checker")
Found termination order:
  "(%p. size_list (%p. (nat o abs) (snd p)) (snd p)) <*mlex*>
   (%p. size_list (%p. (nat o abs) (snd p)) (fst p)) <*mlex*> {}"
Found termination order:
  "(%p. size_list (size_list size) (snd p)) <*mlex*>
   (%p. size_list (size_list size) (fst p)) <*mlex*> {}"
### Ambiguous input (line 414 of "$AFP/PAC_Checker/PAC_Polynomials_Operations.thy") produces 4 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Set.member"
###     ("_tuple" ("_position" mult_monoms)
###       ("_tuple_arg"
###         ("_lambda" ("_pttrns" ("_position" a) ("_position" b))
###           ("_applC" ("_position" remdups_mset)
###             ("\<^const>Groups.plus_class.plus" ("_position" a)
###               ("_position" b))))))
###     ("\<^const>FuncSet.funcset" ("_position" term_poly_list_rel)
###       ("\<^const>FuncSet.funcset" ("_position" term_poly_list_rel)
###         ("_position" term_poly_list_rel)))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Set.member"
###     ("_tuple" ("_position" mult_monoms)
###       ("_tuple_arg"
###         ("_lambda" ("_pttrns" ("_position" a) ("_position" b))
###           ("_applC" ("_position" remdups_mset)
###             ("\<^const>Groups.plus_class.plus" ("_position" a)
###               ("_position" b))))))
###     ("\<^const>Relators.fun_rel_syn" ("_position" term_poly_list_rel)
###       ("\<^const>FuncSet.funcset" ("_position" term_poly_list_rel)
###         ("_position" term_poly_list_rel)))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Set.member"
###     ("_tuple" ("_position" mult_monoms)
###       ("_tuple_arg"
###         ("_lambda" ("_pttrns" ("_position" a) ("_position" b))
###           ("_applC" ("_position" remdups_mset)
###             ("\<^const>Groups.plus_class.plus" ("_position" a)
###               ("_position" b))))))
###     ("\<^const>FuncSet.funcset" ("_position" term_poly_list_rel)
###       ("\<^const>Relators.fun_rel_syn" ("_position" term_poly_list_rel)
###         ("_position" term_poly_list_rel)))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Set.member"
###     ("_tuple" ("_position" mult_monoms)
###       ("_tuple_arg"
###         ("_lambda" ("_pttrns" ("_position" a) ("_position" b))
###           ("_applC" ("_position" remdups_mset)
###             ("\<^const>Groups.plus_class.plus" ("_position" a)
###               ("_position" b))))))
###     ("\<^const>Relators.fun_rel_syn" ("_position" term_poly_list_rel)
###       ("\<^const>Relators.fun_rel_syn" ("_position" term_poly_list_rel)
###         ("_position" term_poly_list_rel)))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
Found termination order: "(%p. length (snd (snd p))) <*mlex*> {}"
Found termination order: "size_list (%p. (nat o abs) (snd p)) <*mlex*> {}"
Found termination order: "size_list (%p. (nat o abs) (snd p)) <*mlex*> {}"
Found termination order: "length <*mlex*> {}"
locale poly_embed
  fixes \<phi> :: "char list => nat"
  assumes "poly_embed \<phi>"
### theory "Draft.PAC_Polynomials_Operations"
### 3.858s elapsed time, 4.191s cpu time, 0.419s GC time
Loading theory "Draft.PAC_Checker" (required by "Draft.PAC_Checker_SynthesisTemplates" via "Draft.PAC_Checker_Synthesis")
Found termination order: "{}"
Found termination order: "{}"
Found termination order: "{}"
consts
  insort_key_rel :: "('b => 'b => bool) => 'b => 'b list => 'b list"
locale poly_embed
  fixes \<phi> :: "char list => nat"
  assumes "poly_embed \<phi>"
See theory exports
locale poly_embed
  fixes \<phi> :: "char list => nat"
  assumes "poly_embed \<phi>"
"normalize_poly_spec"
  :: "int mpoly => int mpoly nres"
(?p, ?p') : fully_unsorted_poly_rel O mset_poly_rel ==>
full_normalize_poly ?p
<= \<Down> (sorted_poly_rel O mset_poly_rel) (normalize_poly_spec ?p')
### theory "Draft.PAC_Checker"
### 5.307s elapsed time, 6.632s cpu time, 0.695s GC time
Loading theory "Draft.PAC_Checker_Relation" (required by "Draft.PAC_Checker_SynthesisTemplates" via "Draft.PAC_Checker_Synthesis")
instantiation
  uint32 :: hashable
  hashcode_uint32 == hashcode :: uint32 => uint32
  def_hashmap_size_uint32 == def_hashmap_size :: uint32 itself => nat
instantiation
  uint64 :: hashable
  hashcode_uint64 == hashcode :: uint64 => uint32
  def_hashmap_size_uint64 == def_hashmap_size :: uint64 itself => nat
### Ambiguous input (line 83 of "$AFP/PAC_Checker/PAC_Checker_Relation.thy") produces 4 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Set.member"
###     ("_tuple" ("\<^const>HOL.eq") ("_tuple_arg" ("\<^const>HOL.eq")))
###     ("\<^const>FuncSet.funcset" ("_position" string_rel)
###       ("\<^const>FuncSet.funcset" ("_position" string_rel)
###         ("_position" bool_rel)))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Set.member"
###     ("_tuple" ("\<^const>HOL.eq") ("_tuple_arg" ("\<^const>HOL.eq")))
###     ("\<^const>Relators.fun_rel_syn" ("_position" string_rel)
###       ("\<^const>FuncSet.funcset" ("_position" string_rel)
###         ("_position" bool_rel)))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Set.member"
###     ("_tuple" ("\<^const>HOL.eq") ("_tuple_arg" ("\<^const>HOL.eq")))
###     ("\<^const>FuncSet.funcset" ("_position" string_rel)
###       ("\<^const>Relators.fun_rel_syn" ("_position" string_rel)
###         ("_position" bool_rel)))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Set.member"
###     ("_tuple" ("\<^const>HOL.eq") ("_tuple_arg" ("\<^const>HOL.eq")))
###     ("\<^const>Relators.fun_rel_syn" ("_position" string_rel)
###       ("\<^const>Relators.fun_rel_syn" ("_position" string_rel)
###         ("_position" bool_rel)))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
instantiation
  char :: linorder
  less_eq_char == less_eq :: char => char => bool
  less_char == less :: char => char => bool
instantiation
  list :: (linorder) linorder
  less_eq_list == less_eq :: 'a list => 'a list => bool
  less_list == less :: 'a list => 'a list => bool
### Ambiguous input (line 338 of "$AFP/PAC_Checker/PAC_Checker_Relation.thy") produces 4 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Set.member"
###     ("_tuple" ("\<^const>Orderings.ord_class.less")
###       ("_tuple_arg" ("\<^const>Orderings.ord_class.less")))
###     ("\<^const>FuncSet.funcset"
###       ("_rel_APP" ("_position" string_rel) ("_position" list_rel))
###       ("\<^const>FuncSet.funcset"
###         ("_rel_APP" ("_position" string_rel) ("_position" list_rel))
###         ("_position" bool_rel)))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Set.member"
###     ("_tuple" ("\<^const>Orderings.ord_class.less")
###       ("_tuple_arg" ("\<^const>Orderings.ord_class.less")))
###     ("\<^const>Relators.fun_rel_syn"
###       ("_rel_APP" ("_position" string_rel) ("_position" list_rel))
###       ("\<^const>FuncSet.funcset"
###         ("_rel_APP" ("_position" string_rel) ("_position" list_rel))
###         ("_position" bool_rel)))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Set.member"
###     ("_tuple" ("\<^const>Orderings.ord_class.less")
###       ("_tuple_arg" ("\<^const>Orderings.ord_class.less")))
###     ("\<^const>FuncSet.funcset"
###       ("_rel_APP" ("_position" string_rel) ("_position" list_rel))
###       ("\<^const>Relators.fun_rel_syn"
###         ("_rel_APP" ("_position" string_rel) ("_position" list_rel))
###         ("_position" bool_rel)))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Set.member"
###     ("_tuple" ("\<^const>Orderings.ord_class.less")
###       ("_tuple_arg" ("\<^const>Orderings.ord_class.less")))
###     ("\<^const>Relators.fun_rel_syn"
###       ("_rel_APP" ("_position" string_rel) ("_position" list_rel))
###       ("\<^const>Relators.fun_rel_syn"
###         ("_rel_APP" ("_position" string_rel) ("_position" list_rel))
###         ("_position" bool_rel)))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 344 of "$AFP/PAC_Checker/PAC_Checker_Relation.thy") produces 4 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Set.member"
###     ("_tuple" ("_position" remove1) ("_tuple_arg" ("_position" remove1)))
###     ("\<^const>FuncSet.funcset" ("_position" R)
###       ("\<^const>FuncSet.funcset"
###         ("_rel_APP" ("_position" R) ("_position" list_rel))
###         ("_rel_APP" ("_position" R) ("_position" list_rel))))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Set.member"
###     ("_tuple" ("_position" remove1) ("_tuple_arg" ("_position" remove1)))
###     ("\<^const>Relators.fun_rel_syn" ("_position" R)
###       ("\<^const>FuncSet.funcset"
###         ("_rel_APP" ("_position" R) ("_position" list_rel))
###         ("_rel_APP" ("_position" R) ("_position" list_rel))))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Set.member"
###     ("_tuple" ("_position" remove1) ("_tuple_arg" ("_position" remove1)))
###     ("\<^const>FuncSet.funcset" ("_position" R)
###       ("\<^const>Relators.fun_rel_syn"
###         ("_rel_APP" ("_position" R) ("_position" list_rel))
###         ("_rel_APP" ("_position" R) ("_position" list_rel))))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Set.member"
###     ("_tuple" ("_position" remove1) ("_tuple_arg" ("_position" remove1)))
###     ("\<^const>Relators.fun_rel_syn" ("_position" R)
###       ("\<^const>Relators.fun_rel_syn"
###         ("_rel_APP" ("_position" R) ("_position" list_rel))
###         ("_rel_APP" ("_position" R) ("_position" list_rel))))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
instantiation
  pac_step :: (heap, heap, heap) heap
### theory "Draft.PAC_Checker_Relation"
### 0.879s elapsed time, 0.884s cpu time, 0.000s GC time
Loading theory "Draft.PAC_Checker_Init" (required by "Draft.PAC_Checker_SynthesisTemplates" via "Draft.PAC_Checker_Synthesis")
Found termination order:
  "(%p. length (snd (snd p))) <*mlex*>
   (%p. length (fst (snd p))) <*mlex*> {}"
### Ambiguous input (line 46 of "$AFP/PAC_Checker/PAC_Checker_Init.thy") produces 4 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("_applC" ("_position" msort)
###       ("_cargs" ("_position" f) ("_position" xs)))
###     ("_applC" ("_position" merge)
###       ("_cargs" ("_position" f)
###         ("_cargs"
###           ("_applC" ("_position" msort)
###             ("_cargs" ("_position" f)
###               ("_applC" ("_position" take)
###                 ("_cargs"
###                   ("\<^const>MPoly_Type.div"
###                     ("_applC" ("_position" size) ("_position" xs))
###                     ("_Numeral" ("_constify" ("_position" 2))))
###                   ("_position" xs)))))
###           ("_applC" ("_position" msort)
###             ("_cargs" ("_position" f)
###               ("_applC" ("_position" drop)
###                 ("_cargs"
###                   ("\<^const>Rings.divide_class.divide"
###                     ("_applC" ("_position" size) ("_position" xs))
###                     ("_Numeral" ("_constify" ("_position" 2))))
###                   ("_position" xs))))))))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("_applC" ("_position" msort)
###       ("_cargs" ("_position" f) ("_position" xs)))
###     ("_applC" ("_position" merge)
###       ("_cargs" ("_position" f)
###         ("_cargs"
###           ("_applC" ("_position" msort)
###             ("_cargs" ("_position" f)
###               ("_applC" ("_position" take)
###                 ("_cargs"
###                   ("\<^const>Rings.divide_class.divide"
###                     ("_applC" ("_position" size) ("_position" xs))
###                     ("_Numeral" ("_constify" ("_position" 2))))
###                   ("_position" xs)))))
###           ("_applC" ("_position" msort)
###             ("_cargs" ("_position" f)
###               ("_applC" ("_position" drop)
###                 ("_cargs"
###                   ("\<^const>Rings.divide_class.divide"
###                     ("_applC" ("_position" size) ("_position" xs))
###                     ("_Numeral" ("_constify" ("_position" 2))))
###                   ("_position" xs))))))))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("_applC" ("_position" msort)
###       ("_cargs" ("_position" f) ("_position" xs)))
###     ("_applC" ("_position" merge)
###       ("_cargs" ("_position" f)
###         ("_cargs"
###           ("_applC" ("_position" msort)
###             ("_cargs" ("_position" f)
###               ("_applC" ("_position" take)
###                 ("_cargs"
###                   ("\<^const>MPoly_Type.div"
###                     ("_applC" ("_position" size) ("_position" xs))
###                     ("_Numeral" ("_constify" ("_position" 2))))
###                   ("_position" xs)))))
###           ("_applC" ("_position" msort)
###             ("_cargs" ("_position" f)
###               ("_applC" ("_position" drop)
###                 ("_cargs"
###                   ("\<^const>MPoly_Type.div"
###                     ("_applC" ("_position" size) ("_position" xs))
###                     ("_Numeral" ("_constify" ("_position" 2))))
###                   ("_position" xs))))))))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("_applC" ("_position" msort)
###       ("_cargs" ("_position" f) ("_position" xs)))
###     ("_applC" ("_position" merge)
###       ("_cargs" ("_position" f)
###         ("_cargs"
###           ("_applC" ("_position" msort)
###             ("_cargs" ("_position" f)
###               ("_applC" ("_position" take)
###                 ("_cargs"
###                   ("\<^const>Rings.divide_class.divide"
###                     ("_applC" ("_position" size) ("_position" xs))
###                     ("_Numeral" ("_constify" ("_position" 2))))
###                   ("_position" xs)))))
###           ("_applC" ("_position" msort)
###             ("_cargs" ("_position" f)
###               ("_applC" ("_position" drop)
###                 ("_cargs"
###                   ("\<^const>MPoly_Type.div"
###                     ("_applC" ("_position" size) ("_position" xs))
###                     ("_Numeral" ("_constify" ("_position" 2))))
###                   ("_position" xs))))))))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
Found termination order: "(%p. length (snd p)) <*mlex*> {}"
Found termination order: "{}"
### Ambiguous input (line 68 of "$AFP/PAC_Checker/PAC_Checker_Init.thy") produces 4 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("_applC" ("_position" msort2)
###       ("_cargs" ("_position" f) ("_position" xs)))
###     ("_applC" ("_position" merge)
###       ("_cargs" ("_position" f)
###         ("_cargs"
###           ("_applC" ("_position" msort)
###             ("_cargs" ("_position" f)
###               ("_applC" ("_position" take)
###                 ("_cargs"
###                   ("\<^const>MPoly_Type.div"
###                     ("_applC" ("_position" size) ("_position" xs))
###                     ("_Numeral" ("_constify" ("_position" 2))))
###                   ("_position" xs)))))
###           ("_applC" ("_position" msort)
###             ("_cargs" ("_position" f)
###               ("_applC" ("_position" drop)
###                 ("_cargs"
###                   ("\<^const>Rings.divide_class.divide"
###                     ("_applC" ("_position" size) ("_position" xs))
###                     ("_Numeral" ("_constify" ("_position" 2))))
###                   ("_position" xs))))))))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("_applC" ("_position" msort2)
###       ("_cargs" ("_position" f) ("_position" xs)))
###     ("_applC" ("_position" merge)
###       ("_cargs" ("_position" f)
###         ("_cargs"
###           ("_applC" ("_position" msort)
###             ("_cargs" ("_position" f)
###               ("_applC" ("_position" take)
###                 ("_cargs"
###                   ("\<^const>Rings.divide_class.divide"
###                     ("_applC" ("_position" size) ("_position" xs))
###                     ("_Numeral" ("_constify" ("_position" 2))))
###                   ("_position" xs)))))
###           ("_applC" ("_position" msort)
###             ("_cargs" ("_position" f)
###               ("_applC" ("_position" drop)
###                 ("_cargs"
###                   ("\<^const>Rings.divide_class.divide"
###                     ("_applC" ("_position" size) ("_position" xs))
###                     ("_Numeral" ("_constify" ("_position" 2))))
###                   ("_position" xs))))))))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("_applC" ("_position" msort2)
###       ("_cargs" ("_position" f) ("_position" xs)))
###     ("_applC" ("_position" merge)
###       ("_cargs" ("_position" f)
###         ("_cargs"
###           ("_applC" ("_position" msort)
###             ("_cargs" ("_position" f)
###               ("_applC" ("_position" take)
###                 ("_cargs"
###                   ("\<^const>MPoly_Type.div"
###                     ("_applC" ("_position" size) ("_position" xs))
###                     ("_Numeral" ("_constify" ("_position" 2))))
###                   ("_position" xs)))))
###           ("_applC" ("_position" msort)
###             ("_cargs" ("_position" f)
###               ("_applC" ("_position" drop)
###                 ("_cargs"
###                   ("\<^const>MPoly_Type.div"
###                     ("_applC" ("_position" size) ("_position" xs))
###                     ("_Numeral" ("_constify" ("_position" 2))))
###                   ("_position" xs))))))))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("_applC" ("_position" msort2)
###       ("_cargs" ("_position" f) ("_position" xs)))
###     ("_applC" ("_position" merge)
###       ("_cargs" ("_position" f)
###         ("_cargs"
###           ("_applC" ("_position" msort)
###             ("_cargs" ("_position" f)
###               ("_applC" ("_position" take)
###                 ("_cargs"
###                   ("\<^const>Rings.divide_class.divide"
###                     ("_applC" ("_position" size) ("_position" xs))
###                     ("_Numeral" ("_constify" ("_position" 2))))
###                   ("_position" xs)))))
###           ("_applC" ("_position" msort)
###             ("_cargs" ("_position" f)
###               ("_applC" ("_position" drop)
###                 ("_cargs"
###                   ("\<^const>MPoly_Type.div"
###                     ("_applC" ("_position" size) ("_position" xs))
###                     ("_Numeral" ("_constify" ("_position" 2))))
###                   ("_position" xs))))))))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
Found termination order: "{}"
### Cannot skip proof of schematic goal statement
merge_coeffs_impl ==
heap.fixp_fun
 (%cf px.
     case px of [] => return [] | [(a1, a2)] => return px
     | (a1, a2) # (a1a, a2a) # l'a =>
         if a1 = a1a
         then if a2 + a2a ~= 0 then cf (op_list_prepend (a1, a2 + a2a) l'a)
              else cf l'a
         else cf (op_list_prepend (a1a, a2a) l'a) >>=
              (%x'c. return (op_list_prepend (a1, a2) x'c)))
(merge_coeffs_impl, RETURN o merge_coeffs)
: poly_assn\<^sup>d \<rightarrow>\<^sub>a poly_assn
"partition_between_ref"
  :: "('a => 'a => bool)
      => ('b => 'a) => nat => nat => 'b list => ('b list * nat) nres"
### Ambiguous input (line 280 of "$AFP/PAC_Checker/PAC_Checker_Init.thy") produces 4 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("_applC" ("_position" msort_poly_impl) ("_position" xs))
###     ("_case_syntax" ("_position" xs)
###       ("_case2"
###         ("_case1" ("\<^const>List.list.Nil") ("\<^const>List.list.Nil"))
###         ("_case2"
###           ("_case1" ("_list" ("_position" a)) ("_list" ("_position" a)))
###           ("_case2"
###             ("_case1" ("_list" ("_args" ("_position" a) ("_position" b)))
###               ("\<^const>HOL.If"
###                 ("\<^const>Orderings.ord_class.less_eq"
###                   ("_applC" ("_position" fst) ("_position" a))
###                   ("_applC" ("_position" fst) ("_position" b)))
###                 ("_list" ("_args" ("_position" a) ("_position" b)))
###                 ("_list" ("_args" ("_position" b) ("_position" a)))))
###             ("_case1" ("_position" xs)
###               ("_applC" ("_position" merge_poly)
###                 ("_cargs"
###                   ("_applC" ("_position" msort_poly_impl)
###                     ("_applC" ("_position" take)
###                       ("_cargs"
###                         ("\<^const>MPoly_Type.div"
###                           ("_applC" ("_position" length) ("_position" xs))
###                           ("_Numeral" ("_constify" ("_position" 2))))
###                         ("_position" xs))))
###                   ("_applC" ("_position" msort_poly_impl)
###                     ("_applC" ("_position" drop)
###                       ("_cargs"
###                         ("\<^const>Rings.divide_class.divide"
###                           ("_applC" ("_position" length) ("_position" xs))
###                           ("_Numeral" ("_constify" ("_position" 2))))
###                         ("_position" xs)))))))))))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("_applC" ("_position" msort_poly_impl) ("_position" xs))
###     ("_case_syntax" ("_position" xs)
###       ("_case2"
###         ("_case1" ("\<^const>List.list.Nil") ("\<^const>List.list.Nil"))
###         ("_case2"
###           ("_case1" ("_list" ("_position" a)) ("_list" ("_position" a)))
###           ("_case2"
###             ("_case1" ("_list" ("_args" ("_position" a) ("_position" b)))
###               ("\<^const>HOL.If"
###                 ("\<^const>Orderings.ord_class.less_eq"
###                   ("_applC" ("_position" fst) ("_position" a))
###                   ("_applC" ("_position" fst) ("_position" b)))
###                 ("_list" ("_args" ("_position" a) ("_position" b)))
###                 ("_list" ("_args" ("_position" b) ("_position" a)))))
###             ("_case1" ("_position" xs)
###               ("_applC" ("_position" merge_poly)
###                 ("_cargs"
###                   ("_applC" ("_position" msort_poly_impl)
###                     ("_applC" ("_position" take)
###                       ("_cargs"
###                         ("\<^const>Rings.divide_class.divide"
###                           ("_applC" ("_position" length) ("_position" xs))
###                           ("_Numeral" ("_constify" ("_position" 2))))
###                         ("_position" xs))))
###                   ("_applC" ("_position" msort_poly_impl)
###                     ("_applC" ("_position" drop)
###                       ("_cargs"
###                         ("\<^const>Rings.divide_class.divide"
###                           ("_applC" ("_position" length) ("_position" xs))
###                           ("_Numeral" ("_constify" ("_position" 2))))
###                         ("_position" xs)))))))))))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("_applC" ("_position" msort_poly_impl) ("_position" xs))
###     ("_case_syntax" ("_position" xs)
###       ("_case2"
###         ("_case1" ("\<^const>List.list.Nil") ("\<^const>List.list.Nil"))
###         ("_case2"
###           ("_case1" ("_list" ("_position" a)) ("_list" ("_position" a)))
###           ("_case2"
###             ("_case1" ("_list" ("_args" ("_position" a) ("_position" b)))
###               ("\<^const>HOL.If"
###                 ("\<^const>Orderings.ord_class.less_eq"
###                   ("_applC" ("_position" fst) ("_position" a))
###                   ("_applC" ("_position" fst) ("_position" b)))
###                 ("_list" ("_args" ("_position" a) ("_position" b)))
###                 ("_list" ("_args" ("_position" b) ("_position" a)))))
###             ("_case1" ("_position" xs)
###               ("_applC" ("_position" merge_poly)
###                 ("_cargs"
###                   ("_applC" ("_position" msort_poly_impl)
###                     ("_applC" ("_position" take)
###                       ("_cargs"
###                         ("\<^const>MPoly_Type.div"
###                           ("_applC" ("_position" length) ("_position" xs))
###                           ("_Numeral" ("_constify" ("_position" 2))))
###                         ("_position" xs))))
###                   ("_applC" ("_position" msort_poly_impl)
###                     ("_applC" ("_position" drop)
###                       ("_cargs"
###                         ("\<^const>MPoly_Type.div"
###                           ("_applC" ("_position" length) ("_position" xs))
###                           ("_Numeral" ("_constify" ("_position" 2))))
###                         ("_position" xs)))))))))))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("_applC" ("_position" msort_poly_impl) ("_position" xs))
###     ("_case_syntax" ("_position" xs)
###       ("_case2"
###         ("_case1" ("\<^const>List.list.Nil") ("\<^const>List.list.Nil"))
###         ("_case2"
###           ("_case1" ("_list" ("_position" a)) ("_list" ("_position" a)))
###           ("_case2"
###             ("_case1" ("_list" ("_args" ("_position" a) ("_position" b)))
###               ("\<^const>HOL.If"
###                 ("\<^const>Orderings.ord_class.less_eq"
###                   ("_applC" ("_position" fst) ("_position" a))
###                   ("_applC" ("_position" fst) ("_position" b)))
###                 ("_list" ("_args" ("_position" a) ("_position" b)))
###                 ("_list" ("_args" ("_position" b) ("_position" a)))))
###             ("_case1" ("_position" xs)
###               ("_applC" ("_position" merge_poly)
###                 ("_cargs"
###                   ("_applC" ("_position" msort_poly_impl)
###                     ("_applC" ("_position" take)
###                       ("_cargs"
###                         ("\<^const>Rings.divide_class.divide"
###                           ("_applC" ("_position" length) ("_position" xs))
###                           ("_Numeral" ("_constify" ("_position" 2))))
###                         ("_position" xs))))
###                   ("_applC" ("_position" msort_poly_impl)
###                     ("_applC" ("_position" drop)
###                       ("_cargs"
###                         ("\<^const>MPoly_Type.div"
###                           ("_applC" ("_position" length) ("_position" xs))
###                           ("_Numeral" ("_constify" ("_position" 2))))
###                         ("_position" xs)))))))))))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
Found termination order: "(%p. length (snd p)) <*mlex*> {}"
### Ambiguous input (line 369 of "$AFP/PAC_Checker/PAC_Checker_Init.thy") produces 4 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Set.member"
###     ("_tuple" ("\<^const>Orderings.ord_class.less")
###       ("_tuple_arg" ("_position" var_order')))
###     ("\<^const>FuncSet.funcset" ("_position" string_rel)
###       ("\<^const>FuncSet.funcset" ("_position" string_rel)
###         ("_position" bool_rel)))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Set.member"
###     ("_tuple" ("\<^const>Orderings.ord_class.less")
###       ("_tuple_arg" ("_position" var_order')))
###     ("\<^const>Relators.fun_rel_syn" ("_position" string_rel)
###       ("\<^const>FuncSet.funcset" ("_position" string_rel)
###         ("_position" bool_rel)))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Set.member"
###     ("_tuple" ("\<^const>Orderings.ord_class.less")
###       ("_tuple_arg" ("_position" var_order')))
###     ("\<^const>FuncSet.funcset" ("_position" string_rel)
###       ("\<^const>Relators.fun_rel_syn" ("_position" string_rel)
###         ("_position" bool_rel)))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Set.member"
###     ("_tuple" ("\<^const>Orderings.ord_class.less")
###       ("_tuple_arg" ("_position" var_order')))
###     ("\<^const>Relators.fun_rel_syn" ("_position" string_rel)
###       ("\<^const>Relators.fun_rel_syn" ("_position" string_rel)
###         ("_position" bool_rel)))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 379 of "$AFP/PAC_Checker/PAC_Checker_Init.thy") produces 4 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Set.member"
###     ("_tuple" ("\<^const>Orderings.ord_class.less_eq")
###       ("_tuple_arg" ("\<^const>Orderings.ord_class.less_eq")))
###     ("\<^const>FuncSet.funcset" ("_position" monom_rel)
###       ("\<^const>FuncSet.funcset" ("_position" monom_rel)
###         ("_position" bool_rel)))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Set.member"
###     ("_tuple" ("\<^const>Orderings.ord_class.less_eq")
###       ("_tuple_arg" ("\<^const>Orderings.ord_class.less_eq")))
###     ("\<^const>Relators.fun_rel_syn" ("_position" monom_rel)
###       ("\<^const>FuncSet.funcset" ("_position" monom_rel)
###         ("_position" bool_rel)))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Set.member"
###     ("_tuple" ("\<^const>Orderings.ord_class.less_eq")
###       ("_tuple_arg" ("\<^const>Orderings.ord_class.less_eq")))
###     ("\<^const>FuncSet.funcset" ("_position" monom_rel)
###       ("\<^const>Relators.fun_rel_syn" ("_position" monom_rel)
###         ("_position" bool_rel)))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Set.member"
###     ("_tuple" ("\<^const>Orderings.ord_class.less_eq")
###       ("_tuple_arg" ("\<^const>Orderings.ord_class.less_eq")))
###     ("\<^const>Relators.fun_rel_syn" ("_position" monom_rel)
###       ("\<^const>Relators.fun_rel_syn" ("_position" monom_rel)
###         ("_position" bool_rel)))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 384 of "$AFP/PAC_Checker/PAC_Checker_Init.thy") produces 4 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Set.member"
###     ("_tuple" ("\<^const>Orderings.ord_class.less")
###       ("_tuple_arg" ("\<^const>Orderings.ord_class.less")))
###     ("\<^const>FuncSet.funcset" ("_position" string_rel)
###       ("\<^const>FuncSet.funcset" ("_position" string_rel)
###         ("_position" bool_rel)))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Set.member"
###     ("_tuple" ("\<^const>Orderings.ord_class.less")
###       ("_tuple_arg" ("\<^const>Orderings.ord_class.less")))
###     ("\<^const>Relators.fun_rel_syn" ("_position" string_rel)
###       ("\<^const>FuncSet.funcset" ("_position" string_rel)
###         ("_position" bool_rel)))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Set.member"
###     ("_tuple" ("\<^const>Orderings.ord_class.less")
###       ("_tuple_arg" ("\<^const>Orderings.ord_class.less")))
###     ("\<^const>FuncSet.funcset" ("_position" string_rel)
###       ("\<^const>Relators.fun_rel_syn" ("_position" string_rel)
###         ("_position" bool_rel)))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Set.member"
###     ("_tuple" ("\<^const>Orderings.ord_class.less")
###       ("_tuple_arg" ("\<^const>Orderings.ord_class.less")))
###     ("\<^const>Relators.fun_rel_syn" ("_position" string_rel)
###       ("\<^const>Relators.fun_rel_syn" ("_position" string_rel)
###         ("_position" bool_rel)))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 410 of "$AFP/PAC_Checker/PAC_Checker_Init.thy") produces 4 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Set.member"
###     ("_tuple" ("\<^const>Orderings.ord_class.less_eq")
###       ("_tuple_arg" ("\<^const>Orderings.ord_class.less_eq")))
###     ("\<^const>FuncSet.funcset" ("_position" string_rel)
###       ("\<^const>FuncSet.funcset" ("_position" string_rel)
###         ("_position" bool_rel)))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Set.member"
###     ("_tuple" ("\<^const>Orderings.ord_class.less_eq")
###       ("_tuple_arg" ("\<^const>Orderings.ord_class.less_eq")))
###     ("\<^const>Relators.fun_rel_syn" ("_position" string_rel)
###       ("\<^const>FuncSet.funcset" ("_position" string_rel)
###         ("_position" bool_rel)))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Set.member"
###     ("_tuple" ("\<^const>Orderings.ord_class.less_eq")
###       ("_tuple_arg" ("\<^const>Orderings.ord_class.less_eq")))
###     ("\<^const>FuncSet.funcset" ("_position" string_rel)
###       ("\<^const>Relators.fun_rel_syn" ("_position" string_rel)
###         ("_position" bool_rel)))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Set.member"
###     ("_tuple" ("\<^const>Orderings.ord_class.less_eq")
###       ("_tuple_arg" ("\<^const>Orderings.ord_class.less_eq")))
###     ("\<^const>Relators.fun_rel_syn" ("_position" string_rel)
###       ("\<^const>Relators.fun_rel_syn" ("_position" string_rel)
###         ("_position" bool_rel)))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
lexord_eq ::\<^sub>i TYPE(?'a list => ?'a list => bool)
### Cannot skip proof of schematic goal statement
lexord_eq_term ==
%ai bi.
   heap.fixp_fun
    (%cf (a1, a2).
        case a1 of [] => return True
        | x'a # l' =>
            case a2 of [] => return False
            | x'b # l'a =>
                if x'a < x'b then return True
                else if x'a = x'b then cf (l', l'a) else return False)
    (ai, bi)
(uncurry lexord_eq_term, uncurry (RETURN \<circ>\<circ> lexord_eq))
: monom_assn\<^sup>k *\<^sub>a
  monom_assn\<^sup>k \<rightarrow>\<^sub>a bool_assn
### Ambiguous input (line 449 of "$AFP/PAC_Checker/PAC_Checker_Init.thy") produces 4 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("\<^const>Fun.comp" ("_position" RETURN)
###       ("_applC" ("_position" msort) ("_position" f)))
###     ("_applC" ("\<^const>RefineG_Recursion.RECT")
###       ("_lambda" ("_pttrns" ("_position" g) ("_position" xs))
###         ("_case_syntax" ("_position" xs)
###           ("_case2"
###             ("_case1" ("\<^const>List.list.Nil")
###               ("_applC" ("_position" RETURN) ("\<^const>List.list.Nil")))
###             ("_case2"
###               ("_case1" ("_list" ("_position" x))
###                 ("_applC" ("_position" RETURN) ("_list" ("_position" x))))
###               ("_case1" ("\<^const>Pure.dummy_pattern")
###                 ("_do_block"
###                   ("_do_cons"
###                     ("_do_bind" ("_position" a)
###                       ("_applC" ("_position" g)
###                         ("_applC" ("_position" take)
###                           ("_cargs"
###                             ("\<^const>MPoly_Type.div"
###                               ("_applC" ("_position" size) ("_position" xs))
###                               ("_Numeral" ("_constify" ("_position" 2))))
###                             ("_position" xs)))))
###                     ("_do_cons"
###                       ("_do_bind" ("_position" b)
###                         ("_applC" ("_position" g)
###                           ("_applC" ("_position" drop)
###                             ("_cargs"
###                               ("\<^const>MPoly_Type.div"
###                                 ("_applC" ("_position" size)
###                                   ("_position" xs))
###                                 ("_Numeral" ("_constify" ("_position" 2))))
###                               ("_position" xs)))))
###                       ("_do_final"
###                         ("_applC" ("_position" RETURN)
###                           ("_applC" ("_position" merge)
###                             ("_cargs" ("_position" f)
###                               ("_cargs" ("_position" a)
###                                 ("_position" b)))))))))))))))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("\<^const>Fun.comp" ("_position" RETURN)
###       ("_applC" ("_position" msort) ("_position" f)))
###     ("_applC" ("\<^const>RefineG_Recursion.RECT")
###       ("_lambda" ("_pttrns" ("_position" g) ("_position" xs))
###         ("_case_syntax" ("_position" xs)
###           ("_case2"
###             ("_case1" ("\<^const>List.list.Nil")
###               ("_applC" ("_position" RETURN) ("\<^const>List.list.Nil")))
###             ("_case2"
###               ("_case1" ("_list" ("_position" x))
###                 ("_applC" ("_position" RETURN) ("_list" ("_position" x))))
###               ("_case1" ("\<^const>Pure.dummy_pattern")
###                 ("_do_block"
###                   ("_do_cons"
###                     ("_do_bind" ("_position" a)
###                       ("_applC" ("_position" g)
###                         ("_applC" ("_position" take)
###                           ("_cargs"
###                             ("\<^const>Rings.divide_class.divide"
###                               ("_applC" ("_position" size) ("_position" xs))
###                               ("_Numeral" ("_constify" ("_position" 2))))
###                             ("_position" xs)))))
###                     ("_do_cons"
###                       ("_do_bind" ("_position" b)
###                         ("_applC" ("_position" g)
###                           ("_applC" ("_position" drop)
###                             ("_cargs"
###                               ("\<^const>MPoly_Type.div"
###                                 ("_applC" ("_position" size)
###                                   ("_position" xs))
###                                 ("_Numeral" ("_constify" ("_position" 2))))
###                               ("_position" xs)))))
###                       ("_do_final"
###                         ("_applC" ("_position" RETURN)
###                           ("_applC" ("_position" merge)
###                             ("_cargs" ("_position" f)
###                               ("_cargs" ("_position" a)
###                                 ("_position" b)))))))))))))))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("\<^const>Fun.comp" ("_position" RETURN)
###       ("_applC" ("_position" msort) ("_position" f)))
###     ("_applC" ("\<^const>RefineG_Recursion.RECT")
###       ("_lambda" ("_pttrns" ("_position" g) ("_position" xs))
###         ("_case_syntax" ("_position" xs)
###           ("_case2"
###             ("_case1" ("\<^const>List.list.Nil")
###               ("_applC" ("_position" RETURN) ("\<^const>List.list.Nil")))
###             ("_case2"
###               ("_case1" ("_list" ("_position" x))
###                 ("_applC" ("_position" RETURN) ("_list" ("_position" x))))
###               ("_case1" ("\<^const>Pure.dummy_pattern")
###                 ("_do_block"
###                   ("_do_cons"
###                     ("_do_bind" ("_position" a)
###                       ("_applC" ("_position" g)
###                         ("_applC" ("_position" take)
###                           ("_cargs"
###                             ("\<^const>MPoly_Type.div"
###                               ("_applC" ("_position" size) ("_position" xs))
###                               ("_Numeral" ("_constify" ("_position" 2))))
###                             ("_position" xs)))))
###                     ("_do_cons"
###                       ("_do_bind" ("_position" b)
###                         ("_applC" ("_position" g)
###                           ("_applC" ("_position" drop)
###                             ("_cargs"
###                               ("\<^const>Rings.divide_class.divide"
###                                 ("_applC" ("_position" size)
###                                   ("_position" xs))
###                                 ("_Numeral" ("_constify" ("_position" 2))))
###                               ("_position" xs)))))
###                       ("_do_final"
###                         ("_applC" ("_position" RETURN)
###                           ("_applC" ("_position" merge)
###                             ("_cargs" ("_position" f)
###                               ("_cargs" ("_position" a)
###                                 ("_position" b)))))))))))))))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("\<^const>Fun.comp" ("_position" RETURN)
###       ("_applC" ("_position" msort) ("_position" f)))
###     ("_applC" ("\<^const>RefineG_Recursion.RECT")
###       ("_lambda" ("_pttrns" ("_position" g) ("_position" xs))
###         ("_case_syntax" ("_position" xs)
###           ("_case2"
###             ("_case1" ("\<^const>List.list.Nil")
###               ("_applC" ("_position" RETURN) ("\<^const>List.list.Nil")))
###             ("_case2"
###               ("_case1" ("_list" ("_position" x))
###                 ("_applC" ("_position" RETURN) ("_list" ("_position" x))))
###               ("_case1" ("\<^const>Pure.dummy_pattern")
###                 ("_do_block"
###                   ("_do_cons"
###                     ("_do_bind" ("_position" a)
###                       ("_applC" ("_position" g)
###                         ("_applC" ("_position" take)
###                           ("_cargs"
###                             ("\<^const>Rings.divide_class.divide"
###                               ("_applC" ("_position" size) ("_position" xs))
###                               ("_Numeral" ("_constify" ("_position" 2))))
###                             ("_position" xs)))))
###                     ("_do_cons"
###                       ("_do_bind" ("_position" b)
###                         ("_applC" ("_position" g)
###                           ("_applC" ("_position" drop)
###                             ("_cargs"
###                               ("\<^const>Rings.divide_class.divide"
###                                 ("_applC" ("_position" size)
###                                   ("_position" xs))
###                                 ("_Numeral" ("_constify" ("_position" 2))))
###                               ("_position" xs)))))
###                       ("_do_final"
###                         ("_applC" ("_position" RETURN)
###                           ("_applC" ("_position" merge)
###                             ("_cargs" ("_position" f)
###                               ("_cargs" ("_position" a)
###                                 ("_position" b)))))))))))))))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 504 of "$AFP/PAC_Checker/PAC_Checker_Init.thy") produces 4 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Set.member"
###     ("_tuple" ("_position" merge_poly)
###       ("_tuple_arg" ("_position" merge_poly)))
###     ("\<^const>FuncSet.funcset" ("_position" poly_rel)
###       ("\<^const>FuncSet.funcset" ("_position" poly_rel)
###         ("_position" poly_rel)))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Set.member"
###     ("_tuple" ("_position" merge_poly)
###       ("_tuple_arg" ("_position" merge_poly)))
###     ("\<^const>Relators.fun_rel_syn" ("_position" poly_rel)
###       ("\<^const>FuncSet.funcset" ("_position" poly_rel)
###         ("_position" poly_rel)))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Set.member"
###     ("_tuple" ("_position" merge_poly)
###       ("_tuple_arg" ("_position" merge_poly)))
###     ("\<^const>FuncSet.funcset" ("_position" poly_rel)
###       ("\<^const>Relators.fun_rel_syn" ("_position" poly_rel)
###         ("_position" poly_rel)))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Set.member"
###     ("_tuple" ("_position" merge_poly)
###       ("_tuple_arg" ("_position" merge_poly)))
###     ("\<^const>Relators.fun_rel_syn" ("_position" poly_rel)
###       ("\<^const>Relators.fun_rel_syn" ("_position" poly_rel)
###         ("_position" poly_rel)))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 543 of "$AFP/PAC_Checker/PAC_Checker_Init.thy") produces 2 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Set.member"
###     ("_tuple" ("_position" msort_poly_impl)
###       ("_tuple_arg" ("_position" merge_sort_poly)))
###     ("\<^const>FuncSet.funcset" ("_position" poly_rel)
###       ("_position" poly_rel))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Set.member"
###     ("_tuple" ("_position" msort_poly_impl)
###       ("_tuple_arg" ("_position" merge_sort_poly)))
###     ("\<^const>Relators.fun_rel_syn" ("_position" poly_rel)
###       ("_position" poly_rel))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Cannot skip proof of schematic goal statement
partition_main_poly_impl ==
%ai bia bi.
   let x' = fst (op_list_get bi bia)
   in heap_WHILET (%(a1, a1a, a2a). return (a1a < bia))
       (%(a1, a1a, a2a).
           return
            (if fst (op_list_get a2a a1a) = x' |
                fst (op_list_get a2a a1a) < x'
             then (a1 + 1, a1a + 1, op_list_swap a2a a1 a1a)
             else (a1, a1a + 1, a2a)))
       (ai, ai, bi) >>=
      (%(a1, a1a, a2a). return (op_list_swap a2a a1 bia, a1))
(uncurry2 partition_main_poly_impl, uncurry2 partition_main_poly)
: nat_assn\<^sup>k *\<^sub>a nat_assn\<^sup>k *\<^sub>a
  poly_assn\<^sup>k \<rightarrow>\<^sub>a poly_assn \<times>\<^sub>a
    nat_assn
### Cannot skip proof of schematic goal statement
linarith_split_limit exceeded (current value is 9)
linarith_split_limit exceeded (current value is 9)
linarith_split_limit exceeded (current value is 9)
linarith_split_limit exceeded (current value is 9)
linarith_split_limit exceeded (current value is 9)
linarith_split_limit exceeded (current value is 9)
linarith_split_limit exceeded (current value is 9)
linarith_split_limit exceeded (current value is 9)
linarith_split_limit exceeded (current value is 9)
linarith_split_limit exceeded (current value is 9)
linarith_split_limit exceeded (current value is 9)
linarith_split_limit exceeded (current value is 9)
linarith_split_limit exceeded (current value is 9)
linarith_split_limit exceeded (current value is 9)
linarith_split_limit exceeded (current value is 9)
linarith_split_limit exceeded (current value is 9)
linarith_split_limit exceeded (current value is 9)
linarith_split_limit exceeded (current value is 9)
linarith_split_limit exceeded (current value is 9)
linarith_split_limit exceeded (current value is 9)
linarith_split_limit exceeded (current value is 9)
linarith_split_limit exceeded (current value is 9)
linarith_split_limit exceeded (current value is 9)
linarith_split_limit exceeded (current value is 9)
linarith_split_limit exceeded (current value is 9)
linarith_split_limit exceeded (current value is 9)
linarith_split_limit exceeded (current value is 9)
linarith_split_limit exceeded (current value is 9)
linarith_split_limit exceeded (current value is 9)
linarith_split_limit exceeded (current value is 9)
linarith_split_limit exceeded (current value is 9)
linarith_split_limit exceeded (current value is 9)
linarith_split_limit exceeded (current value is 9)
linarith_split_limit exceeded (current value is 9)
linarith_split_limit exceeded (current value is 9)
linarith_split_limit exceeded (current value is 9)
linarith_split_limit exceeded (current value is 9)
linarith_split_limit exceeded (current value is 9)
linarith_split_limit exceeded (current value is 9)
linarith_split_limit exceeded (current value is 9)
linarith_split_limit exceeded (current value is 9)
linarith_split_limit exceeded (current value is 9)
linarith_split_limit exceeded (current value is 9)
linarith_split_limit exceeded (current value is 9)
linarith_split_limit exceeded (current value is 9)
linarith_split_limit exceeded (current value is 9)
linarith_split_limit exceeded (current value is 9)
linarith_split_limit exceeded (current value is 9)
linarith_split_limit exceeded (current value is 9)
linarith_split_limit exceeded (current value is 9)
linarith_split_limit exceeded (current value is 9)
linarith_split_limit exceeded (current value is 9)
linarith_split_limit exceeded (current value is 9)
linarith_split_limit exceeded (current value is 9)
linarith_split_limit exceeded (current value is 9)
linarith_split_limit exceeded (current value is 9)
linarith_split_limit exceeded (current value is 9)
linarith_split_limit exceeded (current value is 9)
linarith_split_limit exceeded (current value is 9)
linarith_split_limit exceeded (current value is 9)
linarith_split_limit exceeded (current value is 9)
linarith_split_limit exceeded (current value is 9)
linarith_split_limit exceeded (current value is 9)
linarith_split_limit exceeded (current value is 9)
linarith_split_limit exceeded (current value is 9)
linarith_split_limit exceeded (current value is 9)
linarith_split_limit exceeded (current value is 9)
linarith_split_limit exceeded (current value is 9)
linarith_split_limit exceeded (current value is 9)
linarith_split_limit exceeded (current value is 9)
linarith_split_limit exceeded (current value is 9)
linarith_split_limit exceeded (current value is 9)
linarith_split_limit exceeded (current value is 9)
linarith_split_limit exceeded (current value is 9)
linarith_split_limit exceeded (current value is 9)
linarith_split_limit exceeded (current value is 9)
linarith_split_limit exceeded (current value is 9)
linarith_split_limit exceeded (current value is 9)
linarith_split_limit exceeded (current value is 9)
linarith_split_limit exceeded (current value is 9)
linarith_split_limit exceeded (current value is 9)
linarith_split_limit exceeded (current value is 9)
linarith_split_limit exceeded (current value is 9)
linarith_split_limit exceeded (current value is 9)
linarith_split_limit exceeded (current value is 9)
linarith_split_limit exceeded (current value is 9)
linarith_split_limit exceeded (current value is 9)
linarith_split_limit exceeded (current value is 9)
linarith_split_limit exceeded (current value is 9)
partition_between_poly_impl ==
%ai bia bi.
   (let x'b = ai + (bia - ai) div 2; x'd = fst (op_list_get bi ai);
        x'f = fst (op_list_get bi x'b); x'h = fst (op_list_get bi bia)
    in return
        (if x'd <= x'f & x'f <= x'h | x'h <= x'f & x'f <= x'd then x'b
         else if x'd <= x'h & x'h <= x'f | x'f <= x'h & x'h <= x'd then bia
              else ai)) >>=
   (%x'. partition_main_poly_impl ai bia (op_list_swap bi x' bia))
(uncurry2 partition_between_poly_impl, uncurry2 partition_between_poly)
: nat_assn\<^sup>k *\<^sub>a nat_assn\<^sup>k *\<^sub>a
  poly_assn\<^sup>k \<rightarrow>\<^sub>a poly_assn \<times>\<^sub>a
    nat_assn
### Cannot skip proof of schematic goal statement
quicksort_poly_impl ==
%ai bia bi.
   heap.fixp_fun
    (%cf (a1, a1a, a2a).
        partition_between_poly_impl a1 a1a a2a >>=
        (%(a1b, a2b).
            (if a2b - 1 <= a1 then return a1b
             else cf (a1, a2b - 1, a1b)) >>=
            (%x'b. if a1a <= a2b + 1 then return x'b
                   else cf (a2b + 1, a1a, x'b))))
    (ai, bia, bi)
(uncurry2 quicksort_poly_impl, uncurry2 quicksort_poly)
: nat_assn\<^sup>k *\<^sub>a nat_assn\<^sup>k *\<^sub>a
  poly_assn\<^sup>k \<rightarrow>\<^sub>a poly_assn
quicksort_poly ::\<^sub>i
TYPE(nat
     => nat
        => (char list list * int) list => (char list list * int) list nres)
### Cannot skip proof of schematic goal statement
full_quicksort_poly_impl ==
%xi. if op_list_is_empty xi then return xi
     else quicksort_poly_impl 0 (op_list_length xi - 1) xi
(full_quicksort_poly_impl, full_quicksort_poly)
: poly_assn\<^sup>k \<rightarrow>\<^sub>a poly_assn
### Cannot skip proof of schematic goal statement
normalize_poly_impl == %xi. merge_coeffs_impl (msort_poly_impl xi)
(normalize_poly_impl, PAC_Polynomials_Operations.normalize_poly)
: poly_assn\<^sup>k \<rightarrow>\<^sub>a poly_assn
### Cannot skip proof of schematic goal statement
partition_main_vars_impl ==
%ai bia bi.
   heap_WHILET (%(a1, a1a, a2a). return (a1a < bia))
    (%(a1, a1a, a2a).
        return
         (if op_list_get a2a a1a <= op_list_get bi bia
          then (a1 + 1, a1a + 1, op_list_swap a2a a1 a1a)
          else (a1, a1a + 1, a2a)))
    (ai, ai, bi) >>=
   (%(a1, a1a, a2a). return (op_list_swap a2a a1 bia, a1))
(uncurry2 partition_main_vars_impl, uncurry2 partition_main_vars)
: nat_assn\<^sup>k *\<^sub>a nat_assn\<^sup>k *\<^sub>a
  monom_assn\<^sup>k \<rightarrow>\<^sub>a monom_assn \<times>\<^sub>a
     nat_assn
### Cannot skip proof of schematic goal statement
linarith_split_limit exceeded (current value is 9)
linarith_split_limit exceeded (current value is 9)
linarith_split_limit exceeded (current value is 9)
linarith_split_limit exceeded (current value is 9)
linarith_split_limit exceeded (current value is 9)
linarith_split_limit exceeded (current value is 9)
linarith_split_limit exceeded (current value is 9)
linarith_split_limit exceeded (current value is 9)
linarith_split_limit exceeded (current value is 9)
linarith_split_limit exceeded (current value is 9)
linarith_split_limit exceeded (current value is 9)
linarith_split_limit exceeded (current value is 9)
linarith_split_limit exceeded (current value is 9)
linarith_split_limit exceeded (current value is 9)
linarith_split_limit exceeded (current value is 9)
linarith_split_limit exceeded (current value is 9)
linarith_split_limit exceeded (current value is 9)
linarith_split_limit exceeded (current value is 9)
linarith_split_limit exceeded (current value is 9)
linarith_split_limit exceeded (current value is 9)
linarith_split_limit exceeded (current value is 9)
linarith_split_limit exceeded (current value is 9)
linarith_split_limit exceeded (current value is 9)
linarith_split_limit exceeded (current value is 9)
linarith_split_limit exceeded (current value is 9)
linarith_split_limit exceeded (current value is 9)
linarith_split_limit exceeded (current value is 9)
linarith_split_limit exceeded (current value is 9)
linarith_split_limit exceeded (current value is 9)
linarith_split_limit exceeded (current value is 9)
linarith_split_limit exceeded (current value is 9)
linarith_split_limit exceeded (current value is 9)
linarith_split_limit exceeded (current value is 9)
linarith_split_limit exceeded (current value is 9)
linarith_split_limit exceeded (current value is 9)
linarith_split_limit exceeded (current value is 9)
linarith_split_limit exceeded (current value is 9)
linarith_split_limit exceeded (current value is 9)
linarith_split_limit exceeded (current value is 9)
linarith_split_limit exceeded (current value is 9)
linarith_split_limit exceeded (current value is 9)
linarith_split_limit exceeded (current value is 9)
linarith_split_limit exceeded (current value is 9)
linarith_split_limit exceeded (current value is 9)
linarith_split_limit exceeded (current value is 9)
linarith_split_limit exceeded (current value is 9)
linarith_split_limit exceeded (current value is 9)
linarith_split_limit exceeded (current value is 9)
linarith_split_limit exceeded (current value is 9)
linarith_split_limit exceeded (current value is 9)
linarith_split_limit exceeded (current value is 9)
linarith_split_limit exceeded (current value is 9)
linarith_split_limit exceeded (current value is 9)
linarith_split_limit exceeded (current value is 9)
linarith_split_limit exceeded (current value is 9)
linarith_split_limit exceeded (current value is 9)
linarith_split_limit exceeded (current value is 9)
linarith_split_limit exceeded (current value is 9)
linarith_split_limit exceeded (current value is 9)
linarith_split_limit exceeded (current value is 9)
linarith_split_limit exceeded (current value is 9)
linarith_split_limit exceeded (current value is 9)
linarith_split_limit exceeded (current value is 9)
linarith_split_limit exceeded (current value is 9)
linarith_split_limit exceeded (current value is 9)
linarith_split_limit exceeded (current value is 9)
linarith_split_limit exceeded (current value is 9)
linarith_split_limit exceeded (current value is 9)
linarith_split_limit exceeded (current value is 9)
linarith_split_limit exceeded (current value is 9)
linarith_split_limit exceeded (current value is 9)
linarith_split_limit exceeded (current value is 9)
linarith_split_limit exceeded (current value is 9)
linarith_split_limit exceeded (current value is 9)
linarith_split_limit exceeded (current value is 9)
linarith_split_limit exceeded (current value is 9)
linarith_split_limit exceeded (current value is 9)
linarith_split_limit exceeded (current value is 9)
linarith_split_limit exceeded (current value is 9)
linarith_split_limit exceeded (current value is 9)
linarith_split_limit exceeded (current value is 9)
linarith_split_limit exceeded (current value is 9)
partition_between_vars_impl ==
%ai bia bi.
   (let x'b = ai + (bia - ai) div 2; x'd = op_list_get bi ai;
        x'f = op_list_get bi x'b; x'h = op_list_get bi bia
    in return
        (if x'd <= x'f & x'f <= x'h | x'h <= x'f & x'f <= x'd then x'b
         else if x'd <= x'h & x'h <= x'f | x'f <= x'h & x'h <= x'd then bia
              else ai)) >>=
   (%x'. partition_main_vars_impl ai bia (op_list_swap bi x' bia))
(uncurry2 partition_between_vars_impl, uncurry2 partition_between_vars)
: nat_assn\<^sup>k *\<^sub>a nat_assn\<^sup>k *\<^sub>a
  monom_assn\<^sup>k \<rightarrow>\<^sub>a monom_assn \<times>\<^sub>a
     nat_assn
### Cannot skip proof of schematic goal statement
quicksort_vars_impl ==
%ai bia bi.
   heap.fixp_fun
    (%cf (a1, a1a, a2a).
        partition_between_vars_impl a1 a1a a2a >>=
        (%(a1b, a2b).
            (if a2b - 1 <= a1 then return a1b
             else cf (a1, a2b - 1, a1b)) >>=
            (%x'b. if a1a <= a2b + 1 then return x'b
                   else cf (a2b + 1, a1a, x'b))))
    (ai, bia, bi)
(uncurry2 quicksort_vars_impl, uncurry2 quicksort_vars)
: nat_assn\<^sup>k *\<^sub>a nat_assn\<^sup>k *\<^sub>a
  monom_assn\<^sup>k \<rightarrow>\<^sub>a monom_assn
quicksort_vars ::\<^sub>i
TYPE(nat => nat => char list list => char list list nres)
### Cannot skip proof of schematic goal statement
full_quicksort_vars_impl ==
%xi. if op_list_is_empty xi then return xi
     else quicksort_vars_impl 0 (op_list_length xi - 1) xi
(full_quicksort_vars_impl, full_quicksort_vars)
: monom_assn\<^sup>k \<rightarrow>\<^sub>a monom_assn
### Ambiguous input (line 766 of "$AFP/PAC_Checker/PAC_Checker_Init.thy") produces 4 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Set.member"
###     ("_tuple" ("_position" merge_monoms)
###       ("_tuple_arg" ("_position" merge_monoms)))
###     ("\<^const>FuncSet.funcset" ("_position" monom_rel)
###       ("\<^const>FuncSet.funcset" ("_position" monom_rel)
###         ("_position" monom_rel)))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Set.member"
###     ("_tuple" ("_position" merge_monoms)
###       ("_tuple_arg" ("_position" merge_monoms)))
###     ("\<^const>Relators.fun_rel_syn" ("_position" monom_rel)
###       ("\<^const>FuncSet.funcset" ("_position" monom_rel)
###         ("_position" monom_rel)))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Set.member"
###     ("_tuple" ("_position" merge_monoms)
###       ("_tuple_arg" ("_position" merge_monoms)))
###     ("\<^const>FuncSet.funcset" ("_position" monom_rel)
###       ("\<^const>Relators.fun_rel_syn" ("_position" monom_rel)
###         ("_position" monom_rel)))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Set.member"
###     ("_tuple" ("_position" merge_monoms)
###       ("_tuple_arg" ("_position" merge_monoms)))
###     ("\<^const>Relators.fun_rel_syn" ("_position" monom_rel)
###       ("\<^const>Relators.fun_rel_syn" ("_position" monom_rel)
###         ("_position" monom_rel)))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 793 of "$AFP/PAC_Checker/PAC_Checker_Init.thy") produces 2 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Set.member"
###     ("_tuple" ("_position" msort_monoms_impl)
###       ("_tuple_arg" ("_position" merge_monoms_poly)))
###     ("\<^const>FuncSet.funcset" ("_position" monom_rel)
###       ("_position" monom_rel))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Set.member"
###     ("_tuple" ("_position" msort_monoms_impl)
###       ("_tuple_arg" ("_position" merge_monoms_poly)))
###     ("\<^const>Relators.fun_rel_syn" ("_position" monom_rel)
###       ("_position" monom_rel))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
sort_coeff ::\<^sub>i TYPE(char list list => char list list nres)
### Cannot skip proof of schematic goal statement
sort_all_coeffs_impl ==
%xi. imp_nfoldli xi (%\<sigma>. return True)
      (%xb \<sigma>.
          return
           (case xb of
            (a1, a2) =>
              op_list_prepend (msort_monoms_impl a1, a2) \<sigma>))
      []
(sort_all_coeffs_impl, sort_all_coeffs)
: poly_assn\<^sup>k \<rightarrow>\<^sub>a poly_assn
### Cannot skip proof of schematic goal statement
merge_coeffs0_impl ==
heap.fixp_fun
 (%cf. case_list (return [])
        (%x' l'.
            case x' of
            (a1, a2) =>
              case l' of
              [] =>
                return
                 (if snd (a1, a2) = 0 then []
                  else op_list_prepend (a1, a2) [])
              | (a1a, a2a) # l'a =>
                  if a1 = a1a
                  then if a2 + a2a ~= 0
                       then cf (op_list_prepend (a1, a2 + a2a) l'a)
                       else cf l'a
                  else if a2 = 0 then cf (op_list_prepend (a1a, a2a) l'a)
                       else cf (op_list_prepend (a1a, a2a) l'a) >>=
                            (%x'd. return (op_list_prepend (a1, a2) x'd))))
(merge_coeffs0_impl, RETURN o merge_coeffs0)
: poly_assn\<^sup>k \<rightarrow>\<^sub>a poly_assn
### Cannot skip proof of schematic goal statement
fully_normalize_poly_impl ==
%xi. sort_all_coeffs_impl xi >>=
     (%x'. merge_coeffs0_impl (msort_poly_impl x'))
(fully_normalize_poly_impl, full_normalize_poly)
: poly_assn\<^sup>k \<rightarrow>\<^sub>a poly_assn
### theory "Draft.PAC_Checker_Init"
### 10.178s elapsed time, 10.802s cpu time, 0.847s GC time
Loading theory "Draft.PAC_Checker_Synthesis" (required by "Draft.PAC_Checker_SynthesisTemplates")
Found termination order: "(%p. length (fst p)) <*mlex*> {}"
Found termination order:
  "(%p. size_list (%p. length (fst p)) (fst p)) <*mlex*> {}"
### Cannot skip proof of schematic goal statement
vars_of_monom_in_impl ==
%ai bi.
   imp_nfoldli ai (%\<sigma>. return True)
    (%xa \<sigma>. hs_memb xa bi >>= (%x'b. return (\<sigma> & x'b))) True
(uncurry vars_of_monom_in_impl,
 uncurry (RETURN \<circ>\<circ> vars_of_monom_in))
: monom_assn\<^sup>k *\<^sub>a
  (hs.assn string_assn)\<^sup>k \<rightarrow>\<^sub>a bool_assn
### Cannot skip proof of schematic goal statement
vars_of_poly_in_impl ==
%ai bi.
   imp_nfoldli ai (%\<sigma>. return True)
    (%xa \<sigma>.
        case xa of
        (a1, a2) =>
          vars_of_monom_in_impl a1 bi >>= (%x'b. return (\<sigma> & x'b)))
    True
(uncurry vars_of_poly_in_impl,
 uncurry (RETURN \<circ>\<circ> vars_of_poly_in))
: poly_assn\<^sup>k *\<^sub>a
  (hs.assn string_assn)\<^sup>k \<rightarrow>\<^sub>a bool_assn
### Cannot skip proof of schematic goal statement
union_vars_monom_impl == %ai. imp_nfoldli ai (%\<sigma>. return True) hs_ins
(uncurry union_vars_monom_impl,
 uncurry (RETURN \<circ>\<circ> union_vars_monom))
: monom_assn\<^sup>k *\<^sub>a
  (hs.assn string_assn)\<^sup>d \<rightarrow>\<^sub>a hs.assn string_assn
### Cannot skip proof of schematic goal statement
union_vars_poly_impl ==
%ai. imp_nfoldli ai (%\<sigma>. return True)
      (%x \<sigma>. case x of (a1, a2) => union_vars_monom_impl a1 \<sigma>)
(uncurry union_vars_poly_impl,
 uncurry (RETURN \<circ>\<circ> union_vars_poly))
: poly_assn\<^sup>k *\<^sub>a
  (hs.assn string_assn)\<^sup>d \<rightarrow>\<^sub>a hs.assn string_assn
Found termination order: "{}"
### Ignoring duplicate rewrite rule:
### status_assn ?uw1 CFOUND (CFAILED ?v1) == false
### Ignoring duplicate rewrite rule:
### status_assn ?uw1 (CFAILED ?v1) CFOUND == false
### Cannot skip proof of schematic goal statement
add_poly_impl ==
heap.fixp_fun
 (%cf (a1, a2).
     case a1 of
     [] => return (case a2 of [] => [] | x # xa => op_list_prepend x xa)
     | (a1a, a2a) # l' =>
         case a2 of [] => return (op_list_prepend (a1a, a2a) l')
         | (a1b, a2b) # l'a =>
             if a1a = a1b
             then if a2a + a2b = 0 then cf (l', l'a)
                  else cf (l', l'a) >>=
                       (%x'd. return (op_list_prepend (a1a, a2a + a2b) x'd))
             else if a1a < a1b
                  then cf (l', op_list_prepend (a1b, a2b) l'a) >>=
                       (%x'd. return (op_list_prepend (a1a, a2a) x'd))
                  else cf (op_list_prepend (a1a, a2a) l', l'a) >>=
                       (%x'd. return (op_list_prepend (a1b, a2b) x'd)))
(add_poly_impl, add_poly_l)
: (poly_assn \<times>\<^sub>a
   poly_assn)\<^sup>k \<rightarrow>\<^sub>a poly_assn
mult_monomials ::\<^sub>i
TYPE(char list list * int => char list list * int => char list list * int)
### Cannot skip proof of schematic goal statement
mult_monoms_impl ==
%ai bi.
   heap.fixp_fun
    (%cf (a1, a2).
        case a1 of [] => return a2
        | x'a # l' =>
            case a2 of [] => return a1
            | x'b # l'a =>
                if x'a = x'b
                then cf (l', l'a) >>=
                     (%x'd. return (op_list_prepend x'a x'd))
                else if x'a < x'b
                     then cf (l', op_list_prepend x'b l'a) >>=
                          (%x'e. return (op_list_prepend x'a x'e))
                     else cf (op_list_prepend x'a l', l'a) >>=
                          (%x'e. return (op_list_prepend x'b x'e)))
    (ai, bi)
(uncurry mult_monoms_impl, uncurry (RETURN \<circ>\<circ> mult_monoms))
: monom_assn\<^sup>k *\<^sub>a
  monom_assn\<^sup>k \<rightarrow>\<^sub>a monom_assn
### Cannot skip proof of schematic goal statement
mult_monomials_impl ==
%ai bi.
   case ai of
   (a1, a2) =>
     case bi of
     (a1a, a2a) => mult_monoms_impl a1 a1a >>= (%x'. return (x', a2 * a2a))
(uncurry mult_monomials_impl,
 uncurry (RETURN \<circ>\<circ> mult_monomials))
: monomial_assn\<^sup>k *\<^sub>a
  monomial_assn\<^sup>k \<rightarrow>\<^sub>a monomial_assn
### Cannot skip proof of schematic goal statement
map_append_poly_mult_impl ==
%ai bia.
   heap.fixp_fun
    (%cf. case_list (return bia)
           (%x' l'.
               cf l' >>=
               (%x'a. mult_monomials_impl ai x' >>=
                      (%x'b. return (op_list_prepend x'b x'a)))))
(uncurry2 map_append_poly_mult_impl,
 uncurry2 (RETURN \<circ>\<circ>\<circ> map_append_poly_mult))
: monomial_assn\<^sup>k *\<^sub>a poly_assn\<^sup>k *\<^sub>a
  poly_assn\<^sup>k \<rightarrow>\<^sub>a poly_assn
### Cannot skip proof of schematic goal statement
mult_poly_raw_impl ==
%ai bi.
   imp_nfoldli ai (%\<sigma>. return True)
    (%xa \<sigma>. map_append_poly_mult_impl xa \<sigma> bi) []
(uncurry mult_poly_raw_impl,
 uncurry (RETURN \<circ>\<circ> PAC_Polynomials_Operations.mult_poly_raw))
: poly_assn\<^sup>k *\<^sub>a
  poly_assn\<^sup>k \<rightarrow>\<^sub>a poly_assn
### Cannot skip proof of schematic goal statement
mult_poly_impl == %ai bi. mult_poly_raw_impl ai bi >>= normalize_poly_impl
(uncurry mult_poly_impl, uncurry mult_poly_full)
: poly_assn\<^sup>k *\<^sub>a
  poly_assn\<^sup>k \<rightarrow>\<^sub>a poly_assn
### Ambiguous input (line 289 of "$AFP/PAC_Checker/PAC_Checker_Synthesis.thy") produces 4 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Set.member"
###     ("_tuple" ("\<^const>HOL.eq") ("_tuple_arg" ("\<^const>HOL.eq")))
###     ("\<^const>FuncSet.funcset" ("_position" poly_rel)
###       ("\<^const>FuncSet.funcset" ("_position" poly_rel)
###         ("_position" bool_rel)))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Set.member"
###     ("_tuple" ("\<^const>HOL.eq") ("_tuple_arg" ("\<^const>HOL.eq")))
###     ("\<^const>Relators.fun_rel_syn" ("_position" poly_rel)
###       ("\<^const>FuncSet.funcset" ("_position" poly_rel)
###         ("_position" bool_rel)))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Set.member"
###     ("_tuple" ("\<^const>HOL.eq") ("_tuple_arg" ("\<^const>HOL.eq")))
###     ("\<^const>FuncSet.funcset" ("_position" poly_rel)
###       ("\<^const>Relators.fun_rel_syn" ("_position" poly_rel)
###         ("_position" bool_rel)))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Set.member"
###     ("_tuple" ("\<^const>HOL.eq") ("_tuple_arg" ("\<^const>HOL.eq")))
###     ("\<^const>Relators.fun_rel_syn" ("_position" poly_rel)
###       ("\<^const>Relators.fun_rel_syn" ("_position" poly_rel)
###         ("_position" bool_rel)))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Cannot skip proof of schematic goal statement
weak_equality_l_impl == %ai bi. return (ai = bi)
(uncurry weak_equality_l_impl, uncurry weak_equality_l)
: poly_assn\<^sup>k *\<^sub>a
  poly_assn\<^sup>k \<rightarrow>\<^sub>a bool_assn
add_poly_l ::\<^sub>i
TYPE((char list list * int) list * (char list list * int) list
     => (char list list * int) list nres)
mult_poly_full ::\<^sub>i
TYPE((char list list * int) list
     => (char list list * int) list => (char list list * int) list nres)
### Ambiguous input (line 314 of "$AFP/PAC_Checker/PAC_Checker_Synthesis.thy") produces 2 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Set.member"
###     ("_tuple" ("_position" show_nat) ("_tuple_arg" ("_position" show_nat)))
###     ("\<^const>FuncSet.funcset" ("_position" nat_rel)
###       ("_rel_APP" ("_position" Id) ("_position" list_rel)))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Set.member"
###     ("_tuple" ("_position" show_nat) ("_tuple_arg" ("_position" show_nat)))
###     ("\<^const>Relators.fun_rel_syn" ("_position" nat_rel)
###       ("_rel_APP" ("_position" Id) ("_position" list_rel)))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Cannot skip proof of schematic goal statement
check_addition_l_impl ==
%ai bie bid bic bib bia bi.
   hm_lookup bic bie >>=
   (%x. hm_lookup bib bie >>=
        (%xa. hm_lookup bia bie >>=
              (%xb. vars_of_poly_in_impl bi bid >>=
                    (%xc. if ~ (~ is_None x &
                                ~ is_None xa & ~ ~ is_None xb & xc)
                          then hm_lookup bic bie >>=
                               (%x. hm_lookup bib bie >>=
                                    (%xa.
  hm_lookup bia bie >>=
  (%xb. return
         (error_msg (nat_of_uint64 bia)
           (op_list_concat
             (if ~ ~ is_None x
              then (error_msg_notin_dom o nat_of_uint64) bic else [])
             (op_list_concat
               (if ~ ~ is_None xa
                then (error_msg_notin_dom o nat_of_uint64) bic else [])
               (if ~ is_None xb
                then (error_msg_reused_dom o nat_of_uint64) bic
                else [])))))))
                          else hm_lookup bic bie >>=
                               (%x. let x'c = the x
                                    in hm_lookup bib bie >>=
 (%x. let x'e = the x
      in add_poly_impl (x'c, x'e) >>=
         (%x'g. weak_equality_l_impl x'g bi >>=
                (%x'h. weak_equality_l_impl bi ai >>=
                       (%x'i. return
                               (if x'h then if x'i then CFOUND else CSUCCESS
                                else error_msg (nat_of_uint64 bia)
(error_msg_not_equal_dom x'c x'e x'g bi)))))))))))
(uncurry2 (uncurry2 (uncurry2 check_addition_l_impl)),
 uncurry2 (uncurry2 (uncurry2 check_addition_l)))
: poly_assn\<^sup>k *\<^sub>a polys_assn\<^sup>k *\<^sub>a
  (hs.assn string_assn)\<^sup>k *\<^sub>a
  uint64_nat_assn\<^sup>k *\<^sub>a
  uint64_nat_assn\<^sup>k *\<^sub>a
  uint64_nat_assn\<^sup>k *\<^sub>a
  poly_assn\<^sup>k \<rightarrow>\<^sub>a status_assn raw_string_assn
check_mult_l_dom_err ::\<^sub>i
TYPE(bool => nat => bool => nat => char list nres)
### Cannot skip proof of schematic goal statement
check_mult_l_impl ==
%ai bie bid bic bib bia bi.
   hm_lookup bic bie >>=
   (%x. hm_lookup bia bie >>=
        (%xa. vars_of_poly_in_impl bib bid >>=
              (%xb. vars_of_poly_in_impl bi bid >>=
                    (%xc. if ~ (~ is_None x & ~ ~ is_None xa & xb & xc)
                          then hm_lookup bic bie >>=
                               (%x. hm_lookup bia bie >>=
                                    (%xa.
  return
   (error_msg (nat_of_uint64 bia)
     (check_mult_l_dom_err_impl (~ ~ is_None x) bic (~ is_None xa) bia))))
                          else hm_lookup bic bie >>=
                               (%x. let x'c = the x
                                    in mult_poly_impl x'c bib >>=
 (%x'e. weak_equality_l_impl x'e bi >>=
        (%x'f. weak_equality_l_impl bi ai >>=
               (%x'g. return
                       (if x'f then if x'g then CFOUND else CSUCCESS
                        else error_msg (nat_of_uint64 bia)
                              (check_mult_l_mult_err_impl x'c bib x'e
                                bi))))))))))
(uncurry2 (uncurry2 (uncurry2 check_mult_l_impl)),
 uncurry2 (uncurry2 (uncurry2 check_mult_l)))
: poly_assn\<^sup>k *\<^sub>a polys_assn\<^sup>k *\<^sub>a
  (hs.assn string_assn)\<^sup>k *\<^sub>a
  uint64_nat_assn\<^sup>k *\<^sub>a
  poly_assn\<^sup>k *\<^sub>a
  uint64_nat_assn\<^sup>k *\<^sub>a
  poly_assn\<^sup>k \<rightarrow>\<^sub>a status_assn raw_string_assn
check_extension_l_dom_err ::\<^sub>i TYPE(nat => char list nres)
fmlookup' ::\<^sub>i TYPE(?'a => (?'a, ?'b) fmap => ?'b option)
check_extension_l_side_cond_err ::\<^sub>i
TYPE(char list
     => (char list list * int) list
        => (char list list * int) list
           => (char list list * int) list => char list nres)
check_extension_l_no_new_var_err ::\<^sub>i
TYPE((char list list * int) list => char list nres)
check_extension_l_new_var_multiple_err ::\<^sub>i
TYPE(char list => (char list list * int) list => char list nres)
uminus_poly ::\<^sub>i
TYPE((char list list * int) list => (char list list * int) list)
### Ambiguous input (line 471 of "$AFP/PAC_Checker/PAC_Checker_Synthesis.thy") produces 2 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Set.member"
###     ("_tuple"
###       ("_applC" ("_position" map)
###         ("_lambda" ("_pattern" ("_position" a) ("_position" b))
###           ("_tuple" ("_position" a)
###             ("_tuple_arg"
###               ("\<^const>Groups.uminus_class.uminus" ("_position" b))))))
###       ("_tuple_arg" ("_position" uminus_poly)))
###     ("\<^const>FuncSet.funcset" ("_position" poly_rel)
###       ("_position" poly_rel))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Set.member"
###     ("_tuple"
###       ("_applC" ("_position" map)
###         ("_lambda" ("_pattern" ("_position" a) ("_position" b))
###           ("_tuple" ("_position" a)
###             ("_tuple_arg"
###               ("\<^const>Groups.uminus_class.uminus" ("_position" b))))))
###       ("_tuple_arg" ("_position" uminus_poly)))
###     ("\<^const>Relators.fun_rel_syn" ("_position" poly_rel)
###       ("_position" poly_rel))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
vars_of_poly_in ::\<^sub>i TYPE((?'a list * ?'b) list => ?'a set => bool)
weak_equality_l ::\<^sub>i
TYPE((char list list * int) list
     => (char list list * int) list => bool nres)
### Cannot skip proof of schematic goal statement
check_extension_l_impl ==
%ai bid bic bib bia bi.
   hm_lookup bib bid >>=
   (%x. hs_memb bia bic >>=
        (%xa. if ~ (is_None x &
                    ~ xa &
                    op_list_contains (op_list_prepend bia [], - 1) bi)
              then return
                    (error_msg (nat_of_uint64 bib)
                      (check_ext_l_dom_err_impl bib))
              else let x'c = remove1 (op_list_prepend bia [], - 1) bi
                   in vars_of_poly_in_impl x'c bic >>=
                      (%x'e. if ~ x'e
                             then return
                                   (error_msg (nat_of_uint64 bib)
                                     (check_extension_l_new_var_multiple_err_impl
 bia x'c))
                             else mult_poly_impl x'c x'c >>=
                                  (%x'h.
let x'i = map (%(a, b). (a, - b)) x'c
in add_poly_impl (x'h, x'i) >>=
   (%x'k. weak_equality_l_impl x'k [] >>=
          (%x'l. return
                  (if x'l then CSUCCESS
                   else error_msg (nat_of_uint64 bib)
                         (check_extension_l_side_cond_err_impl bia bi x'i
                           x'k))))))))
(uncurry2 (uncurry2 (uncurry check_extension_l_impl)),
 uncurry2 (uncurry2 (uncurry check_extension_l)))
: poly_assn\<^sup>k *\<^sub>a polys_assn\<^sup>k *\<^sub>a
  (hs.assn string_assn)\<^sup>k *\<^sub>a
  uint64_nat_assn\<^sup>k *\<^sub>a
  string_assn\<^sup>k *\<^sub>a
  poly_assn\<^sup>k \<rightarrow>\<^sub>a status_assn raw_string_assn
### Cannot skip proof of schematic goal statement
check_del_l_impl == %ai bia bi. return CSUCCESS
(uncurry2 check_del_l_impl, uncurry2 check_del_l)
: poly_assn\<^sup>k *\<^sub>a polys_assn\<^sup>k *\<^sub>a
  uint64_nat_assn\<^sup>k \<rightarrow>\<^sub>a status_assn raw_string_assn
PAC_Polynomials_Operations.normalize_poly ::\<^sub>i
TYPE((char list list * int) list => (char list list * int) list nres)
pac_src1 ::\<^sub>i TYPE((?'a, ?'b, ?'c) pac_step => ?'c)
pac_src2 ::\<^sub>i TYPE((?'a, ?'b, ?'c) pac_step => ?'c)
new_id ::\<^sub>i TYPE((?'a, ?'b, ?'c) pac_step => ?'c)
pac_mult ::\<^sub>i TYPE((?'a, ?'b, ?'c) pac_step => ?'a)
case_pac_step ::\<^sub>i
TYPE((?'a => ?'a => ?'a => ?'b => ?'c)
     => (?'a => ?'b => ?'a => ?'b => ?'c)
        => (?'a => ?'d => ?'b => ?'c)
           => (?'a => ?'c) => (?'b, ?'d, ?'a) pac_step => ?'c)
check_mult_l ::\<^sub>i
TYPE((char list list * int) list
     => (nat, (char list list * int) list) fmap
        => char list set
           => nat
              => (char list list * int) list
                 => nat
                    => (char list list * int) list
                       => char list code_status nres)
check_addition_l ::\<^sub>i
TYPE((char list list * int) list
     => (nat, (char list list * int) list) fmap
        => char list set
           => nat
              => nat
                 => nat
                    => (char list list * int) list
                       => char list code_status nres)
check_del_l ::\<^sub>i TYPE(?'a => ?'b => nat => char list code_status nres)
check_extension_l ::\<^sub>i
TYPE(?'a
     => (nat, ?'b) fmap
        => char list set
           => nat
              => char list
                 => (char list list * int) list
                    => char list code_status nres)
is_cfailed ::\<^sub>i TYPE(?'a code_status => bool)
is_Del ::\<^sub>i TYPE((?'a, ?'b, ?'c) pac_step => bool)
merge_cstatus ::\<^sub>i
TYPE(?'a code_status => ?'a code_status => ?'a code_status)
full_normalize_poly ::\<^sub>i
TYPE((char list list * int) list => (char list list * int) list nres)
new_var ::\<^sub>i TYPE((?'a, ?'b, ?'c) pac_step => ?'b)
is_Add ::\<^sub>i TYPE((?'a, ?'b, ?'c) pac_step => bool)
### Cannot skip proof of schematic goal statement
check_step_impl ==
%ai bic bib bia bi.
   if is_Add bi
   then fully_normalize_poly_impl (pac_res bi) >>=
        (%x'a. check_addition_l_impl ai bia bib (pac_src1 bi) (pac_src2 bi)
                (new_id bi) x'a >>=
               (%x'b. if ~ is_cfailed x'b
                      then hm_update (new_id bi) x'a bia >>=
                           (%x. return (merge_cstatus bic x'b, bib, x))
                      else return (x'b, bib, bia)))
   else if is_Mult bi
        then fully_normalize_poly_impl (pac_res bi) >>=
             (%x'b. fully_normalize_poly_impl (pac_mult bi) >>=
                    (%x'c. check_mult_l_impl ai bia bib (pac_src1 bi) x'c
                            (new_id bi) x'b >>=
                           (%x'd. if ~ is_cfailed x'd
                                  then hm_update (new_id bi) x'b bia >>=
 (%x. return (merge_cstatus bic x'd, bib, x))
                                  else return (x'd, bib, bia))))
        else if is_Extension bi
             then fully_normalize_poly_impl
                   (op_list_prepend (op_list_prepend (new_var bi) [], - 1)
                     (pac_res bi)) >>=
                  (%x'c. check_extension_l_impl ai bia bib (new_id bi)
                          (new_var bi) x'c >>=
                         (%x'd. if ~ is_cfailed x'd
                                then hs_ins (new_var bi) bib >>=
                                     (%x.
   hm_update (new_id bi) x'c bia >>= (%xa. return (bic, x, xa)))
                                else return (x'd, bib, bia)))
             else check_del_l_impl ai bia (pac_src1 bi) >>=
                  (%x'c. if ~ is_cfailed x'c
                         then hm_delete (pac_src1 bi) bia >>=
                              (%x. return (merge_cstatus bic x'c, bib, x))
                         else return (x'c, bib, bia))
(uncurry2 (uncurry2 check_step_impl),
 uncurry2 (uncurry2 PAC_checker_l_step'))
: poly_assn\<^sup>k *\<^sub>a
  (status_assn raw_string_assn)\<^sup>d *\<^sub>a
  (hs.assn string_assn)\<^sup>d *\<^sub>a
  polys_assn\<^sup>d *\<^sub>a
  (pac_step_rel_assn uint64_nat_assn poly_assn
    string_assn)\<^sup>d \<rightarrow>\<^sub>a status_assn
          raw_string_assn \<times>\<^sub>a
         hs.assn string_assn \<times>\<^sub>a polys_assn
PAC_checker_l_step ::\<^sub>i
TYPE((char list list * int) list
     => char list code_status *
        char list set * (nat, (char list list * int) list) fmap
        => ((char list list * int) list, char list, nat) pac_step
           => (char list code_status *
               char list set *
               (nat, (char list list * int) list) fmap) nres)
PAC_checker_l_step' ::\<^sub>i
TYPE((char list list * int) list
     => char list code_status
        => char list set
           => (nat, (char list list * int) list) fmap
              => ((char list list * int) list, char list, nat) pac_step
                 => (char list code_status *
                     char list set *
                     (nat, (char list list * int) list) fmap) nres)
fully_normalize_poly_impl ::\<^sub>i
TYPE((String.literal list * int) list
     => (String.literal list * int) list Heap)
### Cannot skip proof of schematic goal statement
PAC_checker_l_impl ==
%ai bic bib bia bi.
   heap_WHILET
    (%(a1, a2).
        return
         (case a1 of
          (a1a, a2a) => ~ is_cfailed a1a & ~ op_list_is_empty a2))
    (%(a1, a2).
        (case a1 of
         (a1a, a1b, a2b) =>
           check_step_impl ai a1a a1b a2b (op_list_hd a2)) >>=
        (%x'b. return (x'b, op_list_tl a2)))
    ((bia, bic, bib), bi) >>=
   (%(a1, a2). return a1)
(uncurry2 (uncurry2 PAC_checker_l_impl), uncurry2 (uncurry2 PAC_checker_l'))
: poly_assn\<^sup>k *\<^sub>a (hs.assn string_assn)\<^sup>d *\<^sub>a
  polys_assn\<^sup>d *\<^sub>a
  (status_assn raw_string_assn)\<^sup>d *\<^sub>a
  (list_assn
    (pac_step_rel_assn uint64_nat_assn poly_assn
      string_assn))\<^sup>k \<rightarrow>\<^sub>a status_assn
             raw_string_assn \<times>\<^sub>a
            hs.assn string_assn \<times>\<^sub>a polys_assn
upper_bound_on_dom ::\<^sub>i TYPE((?'a, ?'b) fmap => ?'a nres)
op_fmap_empty ::\<^sub>i TYPE((?'a, ?'b) fmap)
### Cannot skip proof of schematic goal statement
remap_polys_l_impl ==
%ai bia bi.
   Array.len bi >>=
   (%x'. if 18446744073709551616 <= x'
         then hm_new >>=
              (%x. return (error_msg 0 remap_polys_l_dom_err_impl, bia, x))
         else hm_new >>=
              (%x. heap_WHILET (%(a1, a2). return (a1 < x' & True))
                    (%(a1, a2).
                        (case a2 of
                         (a1a, a1b, a2b) =>
                           iam_lookup a1 bi >>=
                           (%x. if ~ is_None x
                                then iam_lookup a1 bi >>=
                                     (%x.
   fully_normalize_poly_impl (the x) >>=
   (%x'd. weak_equality_l_impl x'd ai >>=
          (%x'e. iam_lookup a1 bi >>=
                 (%x. union_vars_poly_impl (the x) a1b >>=
                      (%x'f. hm_update (uint64_of_nat a1) x'd a2b >>=
                             (%x. return (a1a | x'e, x'f, x)))))))
                                else return (a1a, a1b, a2b))) >>=
                        (%x'c. return (a1 + 1, x'c)))
                    (0, False, bia, x) >>=
                   (%x. return
                         (case case x of (a1, b) => b of
                          (a1, a1a, a2a) =>
                            (if a1 then CFOUND else CSUCCESS, a1a, a2a)))))
(uncurry2 remap_polys_l_impl, uncurry2 remap_polys_l2)
: poly_assn\<^sup>k *\<^sub>a (hs.assn string_assn)\<^sup>d *\<^sub>a
  polys_assn_input\<^sup>d \<rightarrow>\<^sub>a status_assn
            raw_string_assn \<times>\<^sub>a
           hs.assn string_assn \<times>\<^sub>a polys_assn
remap_polys_l ::\<^sub>i
TYPE((char list list * int) list
     => char list set
        => (nat, (char list list * int) list) fmap
           => (char list code_status *
               char list set *
               (nat, (char list list * int) list) fmap) nres)
### Cannot skip proof of schematic goal statement
full_checker_l_impl ==
%ai bia bi.
   fully_normalize_poly_impl ai >>=
   (%x'. hs_new >>=
         (%x. remap_polys_l_impl x' x bia >>=
              (%(a1, a1a, a2a).
                  if is_cfailed a1 then return (a1, a1a, a2a)
                  else union_vars_poly_impl ai a1a >>=
                       (%x'c. case (x'c, a2a) of
                              (a1b, a2b) =>
                                PAC_checker_l_impl x' a1b a2b a1 bi))))
(uncurry2 full_checker_l_impl, uncurry2 full_checker_l)
: poly_assn\<^sup>k *\<^sub>a polys_assn_input\<^sup>d *\<^sub>a
  (list_assn
    (pac_step_rel_assn uint64_nat_assn poly_assn
      string_assn))\<^sup>k \<rightarrow>\<^sub>a status_assn
             raw_string_assn \<times>\<^sub>a
            hs.assn string_assn \<times>\<^sub>a polys_assn
### Cannot skip proof of schematic goal statement
PAC_update_impl == iam_update
(uncurry2 PAC_update_impl, uncurry2 (RETURN \<circ>\<circ>\<circ> fmupd))
: nat_assn\<^sup>k *\<^sub>a poly_assn\<^sup>k *\<^sub>a
  polys_assn_input\<^sup>d \<rightarrow>\<^sub>a polys_assn_input
### Cannot skip proof of schematic goal statement
PAC_empty_impl == iam_new
(uncurry0 PAC_empty_impl, uncurry0 (RETURN fmempty))
: unit_assn\<^sup>k \<rightarrow>\<^sub>a polys_assn_input
### Cannot skip proof of schematic goal statement
empty_vars_impl == hs_new
(uncurry0 empty_vars_impl, uncurry0 (RETURN {}))
: unit_assn\<^sup>k \<rightarrow>\<^sub>a hs.assn string_assn
### Code generator: dropping subsumed code equation
### hashcode ?s == hashcode (map char_of (unsafe_asciis_of_literal ?s))
See theory exports
locale poly_embed
  fixes \<phi> :: "char list => nat"
  assumes "poly_embed \<phi>"
### theory "Draft.PAC_Checker_Synthesis"
### 13.398s elapsed time, 14.027s cpu time, 0.944s GC time
Loading theory "Draft.PAC_Checker_SynthesisTemplates"
val templateLemmas =
   [("PAC_Checker_Synthesis.status_assn_pure_conv",
     "status_assn id_assn ?a ?b = id_assn ?a ?b",
     template_equation
      (template_app
        (template_app
          (template_app
            (template_hole 4,
             template_app (template_hole 3, template_hole 2)),
           template_var 1),
         template_var 0),
       template_app
        (template_app
          (template_app (template_hole 1, template_hole 0), template_var 1),
         template_var 0))),
    ("PAC_Checker_Synthesis.FOUND_hnr",
     "(uncurry0 (return CFOUND), uncurry0 (RETURN CFOUND))
      : unit_assn\<^sup>k \<rightarrow>\<^sub>a status_assn ?R",
     template_predicate
      (
         template_app
          (template_app
            (template_hole 13,
             template_app
              (template_app
                (template_hole 12,
                 template_app
                  (template_hole 11,
                   template_app (template_hole 10, template_hole 9))),
               template_app
                (template_hole 8,
                 template_app (template_hole 7, template_hole 6)))),
           template_app
            (template_app
              (template_app (template_hole 5, t_empty),
               template_app
                (template_app
                  (template_hole 3,
                   template_app (template_hole 2, template_hole 1)),
                 template_hole 4)),
             template_app (template_hole 0, template_var 0)))
         )),
    ("PAC_Checker_Synthesis.SUCCESS_hnr",
     "(uncurry0 (return CSUCCESS), uncurry0 (RETURN CSUCCESS))
      : unit_assn\<^sup>k \<rightarrow>\<^sub>a status_assn ?R",
     template_predicate
      (
         template_app
          (template_app
            (template_hole 13,
             template_app
              (template_app
                (template_hole 12,
                 template_app
                  (template_hole 11,
                   template_app (template_hole 10, template_hole 9))),
               template_app
                (template_hole 8,
                 template_app (template_hole 7, template_hole 6)))),
           template_app
            (template_app
              (template_app (template_hole 5, t_empty),
               template_app
                (template_app
                  (template_hole 3,
                   template_app (template_hole 2, template_hole 1)),
                 template_hole 4)),
             template_app (template_hole 0, template_var 0)))
         )),
    ("PAC_Checker_Synthesis.is_Mult_lastI",
     "[| ~ is_Add ?b; ~ is_Mult ?b; ~ is_Extension ?b |] ==> is_Del ?b",
     template_implication
      ([template_negation
         (
            template_predicate
             (template_app (template_hole 3, template_var 0))
            ),
        template_negation
         (
            template_predicate
             (template_app (template_hole 2, template_var 0))
            ),
        template_negation
         (
            template_predicate
             (template_app (template_hole 1, template_var 0))
            )],
       template_predicate
        (template_app (template_hole 0, template_var 0)))),
    ("PAC_Checker_Synthesis.is_cfailed_hnr",
     "CONSTRAINT is_pure ?R ==>
      (return o is_cfailed, RETURN o is_cfailed)
      : (status_assn ?R)\<^sup>k \<rightarrow>\<^sub>a bool_assn",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 15, template_hole 14),
              template_var 0)
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 13,
               template_app
                (template_app
                  (template_hole 12,
                   template_app
                    (template_app (template_hole 11, template_hole 10),
                     template_hole 9)),
                 template_app
                  (template_app (template_hole 8, template_hole 7),
                   template_hole 6))),
             template_app
              (template_app
                (template_app (template_hole 5, t_empty),
                 template_app
                  (template_app
                    (template_hole 3,
                     template_app (template_hole 2, template_var 0)),
                   template_hole 4)),
               template_app (template_hole 1, template_hole 0)))
           ))),
    ("PAC_Checker_Synthesis.is_success_hnr",
     "CONSTRAINT is_pure ?R ==>
      (return o is_cfound, RETURN o is_cfound)
      : (status_assn ?R)\<^sup>k \<rightarrow>\<^sub>a bool_assn",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 15, template_hole 14),
              template_var 0)
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 13,
               template_app
                (template_app
                  (template_hole 12,
                   template_app
                    (template_app (template_hole 11, template_hole 10),
                     template_hole 9)),
                 template_app
                  (template_app (template_hole 8, template_hole 7),
                   template_hole 6))),
             template_app
              (template_app
                (template_app (template_hole 5, t_empty),
                 template_app
                  (template_app
                    (template_hole 3,
                     template_app (template_hole 2, template_var 0)),
                   template_hole 4)),
               template_app (template_hole 1, template_hole 0)))
           ))),
    ("PAC_Checker_Synthesis.is_AddD_import",
     "[| CONSTRAINT is_pure ?K; CONSTRAINT is_pure ?V |]
      ==> (return o is_Add, RETURN o is_Add)
          : (pac_step_rel_assn ?K ?V
              ?R)\<^sup>k \<rightarrow>\<^sub>a bool_assn",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 17, template_hole 16),
              template_var 2)
            ),
        template_predicate
         (
            template_app
             (template_app (template_hole 15, template_hole 14),
              template_var 1)
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 13,
               template_app
                (template_app
                  (template_hole 12,
                   template_app
                    (template_app (template_hole 11, template_hole 10),
                     template_hole 9)),
                 template_app
                  (template_app (template_hole 8, template_hole 7),
                   template_hole 6))),
             template_app
              (template_app
                (template_app (template_hole 5, t_empty),
                 template_app
                  (template_app
                    (template_hole 3,
                     template_app
                      (template_app
                        (template_app (template_hole 2, template_var 2),
                         template_var 1),
                       template_var 0)),
                   template_hole 4)),
               template_app (template_hole 1, template_hole 0)))
           ))),
    ("PAC_Checker_Synthesis.is_AddD_import",
     "[| CONSTRAINT is_pure ?K; CONSTRAINT is_pure ?V |]
      ==> (return o is_Del, RETURN o is_Del)
          : (pac_step_rel_assn ?K ?V
              ?R)\<^sup>k \<rightarrow>\<^sub>a bool_assn",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 17, template_hole 16),
              template_var 2)
            ),
        template_predicate
         (
            template_app
             (template_app (template_hole 15, template_hole 14),
              template_var 1)
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 13,
               template_app
                (template_app
                  (template_hole 12,
                   template_app
                    (template_app (template_hole 11, template_hole 10),
                     template_hole 9)),
                 template_app
                  (template_app (template_hole 8, template_hole 7),
                   template_hole 6))),
             template_app
              (template_app
                (template_app (template_hole 5, t_empty),
                 template_app
                  (template_app
                    (template_hole 3,
                     template_app
                      (template_app
                        (template_app (template_hole 2, template_var 2),
                         template_var 1),
                       template_var 0)),
                   template_hole 4)),
               template_app (template_hole 1, template_hole 0)))
           ))),
    ("PAC_Checker_Synthesis.is_AddD_import",
     "[| CONSTRAINT is_pure ?K; CONSTRAINT is_pure ?V |]
      ==> (return o is_Extension, RETURN o is_Extension)
          : (pac_step_rel_assn ?K ?V
              ?R)\<^sup>k \<rightarrow>\<^sub>a bool_assn",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 17, template_hole 16),
              template_var 2)
            ),
        template_predicate
         (
            template_app
             (template_app (template_hole 15, template_hole 14),
              template_var 1)
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 13,
               template_app
                (template_app
                  (template_hole 12,
                   template_app
                    (template_app (template_hole 11, template_hole 10),
                     template_hole 9)),
                 template_app
                  (template_app (template_hole 8, template_hole 7),
                   template_hole 6))),
             template_app
              (template_app
                (template_app (template_hole 5, t_empty),
                 template_app
                  (template_app
                    (template_hole 3,
                     template_app
                      (template_app
                        (template_app (template_hole 2, template_var 2),
                         template_var 1),
                       template_var 0)),
                   template_hole 4)),
               template_app (template_hole 1, template_hole 0)))
           ))),
    ("PAC_Checker_Synthesis.is_AddD_import",
     "[| CONSTRAINT is_pure ?K; CONSTRAINT is_pure ?V |]
      ==> (return o is_Mult, RETURN o is_Mult)
          : (pac_step_rel_assn ?K ?V
              ?R)\<^sup>k \<rightarrow>\<^sub>a bool_assn",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 17, template_hole 16),
              template_var 2)
            ),
        template_predicate
         (
            template_app
             (template_app (template_hole 15, template_hole 14),
              template_var 1)
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 13,
               template_app
                (template_app
                  (template_hole 12,
                   template_app
                    (template_app (template_hole 11, template_hole 10),
                     template_hole 9)),
                 template_app
                  (template_app (template_hole 8, template_hole 7),
                   template_hole 6))),
             template_app
              (template_app
                (template_app (template_hole 5, t_empty),
                 template_app
                  (template_app
                    (template_hole 3,
                     template_app
                      (template_app
                        (template_app (template_hole 2, template_var 2),
                         template_var 1),
                       template_var 0)),
                   template_hole 4)),
               template_app (template_hole 1, template_hole 0)))
           ))),
    ("PAC_Checker_Synthesis.merge_cstatus_hnr",
     "CONSTRAINT is_pure ?R ==>
      (uncurry (return \<circ>\<circ> merge_cstatus),
       uncurry (RETURN \<circ>\<circ> merge_cstatus))
      : (status_assn ?R)\<^sup>k *\<^sub>a
        (status_assn ?R)\<^sup>k \<rightarrow>\<^sub>a status_assn ?R",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 16, template_hole 15),
              template_var 0)
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 14,
               template_app
                (template_app
                  (template_hole 13,
                   template_app (template_hole 12, t_empty)),
                 template_app (template_hole 8, t_empty))),
             template_app
              (template_app
                (template_app (template_hole 4, t_empty),
                 template_app
                  (template_app
                    (template_hole 2,
                     template_app
                      (template_app
                        (template_hole 1,
                         template_app (template_hole 0, template_var 0)),
                       template_hole 3)),
                   template_app
                    (template_app
                      (template_hole 1,
                       template_app (template_hole 0, template_var 0)),
                     template_hole 3))),
               template_app (template_hole 0, template_var 0)))
           ))),
    ("PAC_Checker_Synthesis.is_AddD_import",
     "[| CONSTRAINT is_pure ?K; CONSTRAINT is_pure ?V |]
      ==> (return o new_id, RETURN o new_id)
          : [%x. is_Add x |
                 is_Mult x |
                 is_Extension
                  x]\<^sub>a (pac_step_rel_assn ?K ?V
                               ?R)\<^sup>k \<rightarrow> ?K",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 19, template_hole 18),
              template_var 2)
            ),
        template_predicate
         (
            template_app
             (template_app (template_hole 17, template_hole 16),
              template_var 1)
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 15,
               template_app
                (template_app
                  (template_hole 14,
                   template_app
                    (template_app (template_hole 13, template_hole 12),
                     template_hole 11)),
                 template_app
                  (template_app (template_hole 10, template_hole 9),
                   template_hole 8))),
             template_app
              (template_app
                (template_app (template_hole 7, t_empty),
                 template_app
                  (template_app
                    (template_hole 2,
                     template_app
                      (template_app
                        (template_app (template_hole 1, template_var 2),
                         template_var 1),
                       template_var 0)),
                   template_hole 0)),
               template_var 2))
           ))),
    ("PAC_Checker_Synthesis.is_AddD_import",
     "[| CONSTRAINT is_pure ?K; CONSTRAINT is_pure ?V |]
      ==> (return o pac_src1, RETURN o pac_src1)
          : [%x. is_Add x |
                 is_Mult x |
                 is_Del
                  x]\<^sub>a (pac_step_rel_assn ?K ?V
                               ?R)\<^sup>k \<rightarrow> ?K",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 19, template_hole 18),
              template_var 2)
            ),
        template_predicate
         (
            template_app
             (template_app (template_hole 17, template_hole 16),
              template_var 1)
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 15,
               template_app
                (template_app
                  (template_hole 14,
                   template_app
                    (template_app (template_hole 13, template_hole 12),
                     template_hole 11)),
                 template_app
                  (template_app (template_hole 10, template_hole 9),
                   template_hole 8))),
             template_app
              (template_app
                (template_app (template_hole 7, t_empty),
                 template_app
                  (template_app
                    (template_hole 2,
                     template_app
                      (template_app
                        (template_app (template_hole 1, template_var 2),
                         template_var 1),
                       template_var 0)),
                   template_hole 0)),
               template_var 2))
           ))),
    ("PAC_Checker_Synthesis.is_AddD_import",
     "[| CONSTRAINT is_pure ?K; CONSTRAINT is_pure ?V |]
      ==> (return o pac_res, RETURN o pac_res)
          : [%x. is_Add x |
                 is_Mult x |
                 is_Extension
                  x]\<^sub>a (pac_step_rel_assn ?K ?V
                               ?R)\<^sup>k \<rightarrow> ?V",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 19, template_hole 18),
              template_var 2)
            ),
        template_predicate
         (
            template_app
             (template_app (template_hole 17, template_hole 16),
              template_var 1)
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 15,
               template_app
                (template_app
                  (template_hole 14,
                   template_app
                    (template_app (template_hole 13, template_hole 12),
                     template_hole 11)),
                 template_app
                  (template_app (template_hole 10, template_hole 9),
                   template_hole 8))),
             template_app
              (template_app
                (template_app (template_hole 7, t_empty),
                 template_app
                  (template_app
                    (template_hole 2,
                     template_app
                      (template_app
                        (template_app (template_hole 1, template_var 2),
                         template_var 1),
                       template_var 0)),
                   template_hole 0)),
               template_var 1))
           ))),
    ("PAC_Checker_Synthesis.eq_poly_rel_eq",
     "hn_refine (hn_ctxt poly_assn ?x'6 ?x6 * hn_ctxt poly_assn ?x'a6 ?xa6)
       (return (?x6 = ?xa6))
       (hn_ctxt poly_assn ?x'6 ?x6 * hn_ctxt poly_assn ?x'a6 ?xa6) bool_assn
       (RETURN $ ((=) $ ?x'6 $ ?x'a6))",
     template_predicate
      (
         template_app
          (template_app
            (template_app
              (template_app
                (template_app
                  (template_hole 18,
                   template_app
                    (template_app
                      (template_hole 17,
                       template_app
                        (template_app
                          (template_app
                            (template_hole 16,
                             template_app
                              (template_hole 15,
                               template_app
                                (template_app
                                  (template_hole 14,
                                   template_app
                                    (template_hole 13,
                                     template_app
(template_hole 12, template_hole 11))),
                                 template_app
                                  (template_hole 10, template_hole 9)))),
                           template_var 3),
                         template_var 2)),
                     template_app
                      (template_app
                        (template_app
                          (template_hole 16,
                           template_app
                            (template_hole 15,
                             template_app
                              (template_app
                                (template_hole 14,
                                 template_app
                                  (template_hole 13,
                                   template_app
                                    (template_hole 12, template_hole 11))),
                               template_app
                                (template_hole 10, template_hole 9)))),
                         template_var 1),
                       template_var 0))),
                 template_app
                  (template_hole 8,
                   template_app
                    (template_app (template_hole 7, template_var 2),
                     template_var 0))),
               template_app
                (template_app
                  (template_hole 17,
                   template_app
                    (template_app
                      (template_app
                        (template_hole 16,
                         template_app
                          (template_hole 15,
                           template_app
                            (template_app
                              (template_hole 14,
                               template_app
                                (template_hole 13,
                                 template_app
                                  (template_hole 12, template_hole 11))),
                             template_app
                              (template_hole 10, template_hole 9)))),
                       template_var 3),
                     template_var 2)),
                 template_app
                  (template_app
                    (template_app
                      (template_hole 16,
                       template_app
                        (template_hole 15,
                         template_app
                          (template_app
                            (template_hole 14,
                             template_app
                              (template_hole 13,
                               template_app
                                (template_hole 12, template_hole 11))),
                           template_app
                            (template_hole 10, template_hole 9)))),
                     template_var 1),
                   template_var 0))),
             template_app (template_hole 6, template_hole 5)),
           template_app
            (template_app (template_hole 4, template_hole 3),
             template_app
              (template_app
                (template_hole 2,
                 template_app
                  (template_app (template_hole 1, template_hole 0),
                   template_var 3)),
               template_var 1)))
         ))]:
   (string * thm * template) list
### theory "Draft.PAC_Checker_SynthesisTemplates"
### 1.736s elapsed time, 2.190s cpu time, 0.277s GC time
val it = (): unit
