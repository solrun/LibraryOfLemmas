Loading theory "HOL-Library.Stream" (required by "Draft.Finite_Map_MultisetTemplates" via "Draft.ExtrEqs")
Loading theory "HOL-Library.Set_Algebras" (required by "Draft.Finite_Map_MultisetTemplates" via "Draft.ExtrEqs" via "HOL-Library.BigO")
Loading theory "Draft.Finite_Map_Multiset" (required by "Draft.Finite_Map_MultisetTemplates")
Loading theory "HOL-Library.Tree" (required by "Draft.Finite_Map_MultisetTemplates" via "Draft.ExtrEqs" via "Draft.Templates")
instantiation
  set :: (plus) plus
  plus_set == plus :: 'a set => 'a set => 'a set
instantiation
  set :: (times) times
  times_set == times :: 'a set => 'a set => 'a set
instantiation
  set :: (zero) zero
  zero_set == zero_class.zero :: 'a set
instantiation
  set :: (one) one
  one_set == one_class.one :: 'a set
### theory "HOL-Library.Set_Algebras"
### 0.215s elapsed time, 0.843s cpu time, 0.066s GC time
Loading theory "HOL-Library.BigO" (required by "Draft.Finite_Map_MultisetTemplates" via "Draft.ExtrEqs")
consts
  shift :: "'a list => 'a stream => 'a stream"
Proofs for coinductive predicate(s) "streamsp"
  Proving monotonicity ...
### theory "Draft.Finite_Map_Multiset"
### 0.453s elapsed time, 1.746s cpu time, 0.175s GC time
consts
  snth :: "'a stream => nat => 'a"
consts
  stake :: "nat => 'a stream => 'a list"
consts
  sdrop :: "nat => 'a stream => 'a stream"
consts
  left :: "'a tree => 'a tree"
consts
  sfilter :: "('a => bool) => 'a stream => 'a stream"
consts
  right :: "'a tree => 'a tree"
consts
  cycle :: "'a list => 'a stream"
Found termination order: "size <*mlex*> {}"
consts
  siterate :: "('a => 'a) => 'a => 'a stream"
consts
  flat :: "'a list stream => 'a stream"
Found termination order: "size <*mlex*> {}"
consts
  sinterleave :: "'a stream => 'a stream => 'a stream"
Found termination order: "size <*mlex*> {}"
consts
  szip :: "'a stream => 'b stream => ('a * 'b) stream"
class height = type +
  fixes height :: "'a => nat"
instantiation
  tree :: (type) height
  height_tree == height :: 'a tree => nat
consts
  smap2 :: "('a => 'b => 'c) => 'a stream => 'b stream => 'c stream"
### theory "HOL-Library.Stream"
### 0.834s elapsed time, 2.870s cpu time, 0.310s GC time
Found termination order: "size <*mlex*> {}"
Found termination order: "size <*mlex*> {}"
### theory "HOL-Library.BigO"
### 0.762s elapsed time, 2.337s cpu time, 0.339s GC time
Found termination order: "size <*mlex*> {}"
Found termination order: "size <*mlex*> {}"
Found termination order: "size <*mlex*> {}"
Found termination order: "size <*mlex*> {}"
Found termination order: "size <*mlex*> {}"
Found termination order: "(%p. size (fst p)) <*mlex*> {}"
Found termination order: "size <*mlex*> {}"
Found termination order: "(%p. size (snd p)) <*mlex*> {}"
Found termination order: "size <*mlex*> {}"
### theory "HOL-Library.Tree"
### 1.985s elapsed time, 4.602s cpu time, 0.968s GC time
Loading theory "Draft.Templates" (required by "Draft.Finite_Map_MultisetTemplates" via "Draft.ExtrEqs")
datatype template_term
=
     t_empty
   | template_app of template_term * template_term
   | template_hole of int
   | template_var of int
datatype sign
= equals | greater_equals | greater_than | less_equals | less_than
datatype template
=
     template_bimplication of template * template
   | template_dunno
   | template_equation of template_term * template_term
   | template_implication of template list * template
   | template_inequation of sign * template_term * template_term
   | template_negation of template
   | template_predicate of template_term
constructor t_empty: template_term
constructor template_app: template_term * template_term -> template_term
constructor template_hole: int -> template_term
constructor template_var: int -> template_term
constructor equals: sign
constructor greater_equals: sign
constructor greater_than: sign
constructor less_equals: sign
constructor less_than: sign
constructor template_bimplication: template * template -> template
constructor template_dunno: template
constructor template_equation: template_term * template_term -> template
constructor template_implication: template list * template -> template
constructor template_inequation:
   sign * template_term * template_term -> template
constructor template_negation: template -> template
constructor template_predicate: template_term -> template
val vfs = fn: term -> (indexname * typ) list * (string * typ) list
val indexOf = fn: ''a list -> ''a -> int -> int
val has_eq = fn: term -> bool
val term2template = fn:
   (indexname * typ) list -> (string * typ) list -> term -> template_term
val lemma2predicate = fn: term -> term -> template
val makeTemplatewithContext = fn: term -> term -> template
val lemma2template = fn: term -> template
val thm2template = fn: thm -> template
val tterm2string = fn: template_term -> string
val template2string = fn: template -> string
val t = "height ?t <= size ?t": thm
val th =
   Const ("HOL.Trueprop", "bool => prop") $
     (Const ("Orderings.ord_class.less_eq", "nat => nat => bool") $
       (Const ("Tree.height_class.height", "?'a tree => nat") $
         Var (("t", 0), "?'a tree")) $
       (Const ("Nat.size_class.size", "?'a tree => nat") $
         Var (("t", 0), "?'a tree"))):
   term
### theory "Draft.Templates"
### 0.050s elapsed time, 0.067s cpu time, 0.000s GC time
Loading theory "Draft.ExtrEqs" (required by "Draft.Finite_Map_MultisetTemplates")
val eqpattern =
   Pattern
    (
       Const ("HOL.Trueprop", "bool => prop") $
         (Const ("HOL.eq", "?'a => ?'a => bool") $
           Var (("_dummy_", 1), "?'a") $ Var (("_dummy_", 2), "?'a"))
       ):
   term Find_Theorems.criterion
val badeqpattern = Pattern (Const ("Pure.eq", "?'a => ?'a => prop")):
   term Find_Theorems.criterion
val undefpattern =
   Pattern
    (
       Const ("HOL.Trueprop", "bool => prop") $
         (Const ("HOL.eq", "?'a => ?'a => bool") $
           Var (("_dummy_", 1), "?'a") $ Const ("HOL.undefined", "?'a"))
       ):
   term Find_Theorems.criterion
val thmpattern =
   Pattern
    (Const ("HOL.Trueprop", "bool => prop") $ Var (("_dummy_", 1), "bool")):
   term Find_Theorems.criterion
val badnames =
   ["*nitpick*", "*Nitpick*", "*full_exhaustive*", "*_def*", "Enum.finite*",
    "*Quickcheck*", "ATP*", "*Nunchaku*", "*Code*", "*BNF*", "*SMT*",
    "*.*.*"]:
   string list
val unwanted_names =
   [(false, Name "*nitpick*"), (false, Name "*Nitpick*"),
    (false, Name "*full_exhaustive*"), (false, Name "*_def*"),
    (false, Name "Enum.finite*"), (false, Name "*Quickcheck*"),
    (false, Name "ATP*"), (false, Name "*Nunchaku*"),
    (false, Name "*Code*"), (false, Name "*BNF*"), (false, Name "*SMT*"),
    (false, Name "*.*.*")]:
   (bool * term Find_Theorems.criterion) list
val has_vars = fn: term -> bool
val get_all_eqs = fn: string -> Proof.context -> (string * thm) list
val get_all_thms = fn: string -> Proof.context -> (string * thm) list
val get_noneq_thms = fn: string -> Proof.context -> (string * thm) list
val template_eqs = fn:
   string -> Proof.context -> (string * thm * template) list
val template_thms = fn:
   string -> Proof.context -> (string * thm * template) list
### theory "Draft.ExtrEqs"
### 0.490s elapsed time, 0.543s cpu time, 0.074s GC time
Loading theory "Draft.Finite_Map_MultisetTemplates"
val templateLemmas =
   [("Finite_Map_Multiset.distinct_mset_dom", "distinct_mset (dom_m ?N)",
     template_predicate
      (
         template_app
          (template_hole 1, template_app (template_hole 0, template_var 0))
         )),
    ("Finite_Map_Multiset.fset_mset_mset_fset",
     "fset_mset (mset_fset ?N) = ?N",
     template_equation
      (template_app
        (template_hole 2,
         template_app
          (template_hole 1,
           template_app (template_hole 0, template_var 0))),
       template_var 0)),
    ("Finite_Map_Multiset.mset_fset_fset_mset",
     "mset_fset (fset_mset ?N) = remdups_mset ?N",
     template_equation
      (template_app
        (template_hole 3,
         template_app
          (template_hole 2,
           template_app (template_hole 1, template_var 0))),
       template_app (template_hole 0, template_var 0))),
    ("Finite_Map_Multiset.dom_m_empty_iff",
     "(dom_m ?NU = {#}) = (?NU = fmempty)",
     template_bimplication
      (template_equation
        (template_app (template_hole 3, template_var 0), template_hole 2),
       template_equation (template_var 0, template_hole 0))),
    ("Finite_Map_Multiset.in_fset_mset_mset",
     "(?x |\<in>| fset_mset ?N) = (?x :# ?N)",
     template_equation
      (template_app
        (template_app (template_hole 3, template_var 1),
         template_app (template_hole 2, template_var 0)),
       template_app
        (template_app (template_hole 1, template_var 1),
         template_app (template_hole 0, template_var 0)))),
    ("Finite_Map_Multiset.in_mset_fset_fmember",
     "(?x :# mset_fset ?N) = (?x |\<in>| ?N)",
     template_equation
      (template_app
        (template_app (template_hole 4, template_var 1),
         template_app
          (template_hole 3,
           template_app
            (template_hole 2,
             template_app (template_hole 1, template_var 0)))),
       template_app
        (template_app (template_hole 0, template_var 1), template_var 0))),
    ("Finite_Map_Multiset.fset_fmdom_fmrestrict_set",
     "fset (fmdom (fmrestrict_set ?xs ?N)) = fset (fmdom ?N) Int ?xs",
     template_equation
      (template_app
        (template_hole 3,
         template_app
          (template_hole 2,
           template_app
            (template_app (template_hole 1, template_var 1),
             template_var 0))),
       template_app
        (template_app
          (template_hole 0,
           template_app
            (template_hole 3,
             template_app (template_hole 2, template_var 0))),
         template_var 1))),
    ("Finite_Map_Multiset.dom_m_fmdrop",
     "dom_m (fmdrop ?C ?N) = remove1_mset ?C (dom_m ?N)",
     template_equation
      (template_app
        (template_hole 4,
         template_app
          (template_app (template_hole 3, template_var 1), template_var 0)),
       template_app
        (template_app
          (template_hole 2, template_app (template_hole 4, template_var 0)),
         template_app
          (template_app (template_hole 1, template_var 1),
           template_hole 0)))),
    ("Finite_Map_Multiset.dom_m_fmrestrict_set'",
     "dom_m (fmrestrict_set ?xs ?N) =
      mset_set (?xs Int set_mset (dom_m ?N))",
     template_equation
      (template_app
        (template_hole 4,
         template_app
          (template_app (template_hole 3, template_var 1), template_var 0)),
       template_app
        (template_hole 2,
         template_app
          (template_app (template_hole 1, template_var 1),
           template_app
            (template_hole 0,
             template_app (template_hole 4, template_var 0)))))),
    ("Finite_Map_Multiset.dom_m_fmrestrict_set",
     "dom_m (fmrestrict_set (set ?xs) ?N) = mset ?xs \<inter># dom_m ?N",
     template_equation
      (template_app
        (template_hole 4,
         template_app
          (template_app
            (template_hole 3,
             template_app (template_hole 2, template_var 1)),
           template_var 0)),
       template_app
        (template_app
          (template_hole 1, template_app (template_hole 0, template_var 1)),
         template_app (template_hole 4, template_var 0)))),
    ("Finite_Map_Multiset.in_dom_m_lookup_iff",
     "(?C :# dom_m ?N') = (fmlookup ?N' ?C ~= None)",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 6, template_var 1),
              template_app
               (template_hole 5,
                template_app (template_hole 4, template_var 0)))
            )],
       template_negation
        (
           template_equation
            (template_app
              (template_app (template_hole 1, template_var 0),
               template_var 1),
             template_hole 0)
           ))),
    ("Finite_Map_Multiset.fmlookup_restrict_set_id",
     "fset (fmdom ?N) <= ?A ==> fmrestrict_set ?A ?N = ?N",
     template_implication
      ([template_inequation
         (less_equals,
          template_app
           (template_hole 3,
            template_app (template_hole 2, template_var 1)),
          template_var 0)],
       template_equation
        (template_app
          (template_app (template_hole 0, template_var 0), template_var 1),
         template_var 1))),
    ("Finite_Map_Multiset.fmlookup_restrict_set_id'",
     "set_mset (dom_m ?N) <= ?A ==> fmrestrict_set ?A ?N = ?N",
     template_implication
      ([template_inequation
         (less_equals,
          template_app
           (template_hole 3,
            template_app (template_hole 2, template_var 1)),
          template_var 0)],
       template_equation
        (template_app
          (template_app (template_hole 0, template_var 0), template_var 1),
         template_var 1))),
    ("Finite_Map_Multiset.indom_mI",
     "fmlookup ?m ?x = Some ?y ==> ?x :# dom_m ?m",
     template_implication
      ([template_equation
         (template_app
           (template_app (template_hole 4, template_var 2), template_var 1),
          template_app (template_hole 3, template_var 0))],
       template_predicate
        (
           template_app
            (template_app (template_hole 2, template_var 1),
             template_app
              (template_hole 1,
               template_app (template_hole 0, template_var 2)))
           ))),
    ("Finite_Map_Multiset.dom_m_fmdrop_All",
     "dom_m (fmdrop ?C ?N) = removeAll_mset ?C (dom_m ?N)",
     template_equation
      (template_app
        (template_hole 4,
         template_app
          (template_app (template_hole 3, template_var 1), template_var 0)),
       template_app
        (template_app
          (template_hole 2, template_app (template_hole 4, template_var 0)),
         template_app
          (template_app
            (template_hole 1,
             template_app
              (template_app
                (template_hole 0,
                 template_app (template_hole 4, template_var 0)),
               template_var 1)),
           template_var 1)))),
    ("Finite_Map_Multiset.dom_m_fmupd",
     "dom_m (fmupd ?k ?C ?N) = add_mset ?k (remove1_mset ?k (dom_m ?N))",
     template_equation
      (template_app
        (template_hole 4,
         template_app
          (template_app
            (template_app (template_hole 3, template_var 2),
             template_var 1),
           template_var 0)),
       template_app
        (template_app (template_hole 2, template_var 2),
         template_app
          (template_app
            (template_hole 1,
             template_app (template_hole 4, template_var 0)),
           template_app
            (template_app (template_hole 2, template_var 2),
             template_hole 0))))),
    ("Finite_Map_Multiset.in_dom_in_ran_m",
     "?i :# dom_m ?N ==> the (fmlookup ?N ?i) :# ran_m ?N",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 7, template_var 1),
              template_app
               (template_hole 6,
                template_app (template_hole 5, template_var 0)))
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 4,
               template_app
                (template_hole 3,
                 template_app
                  (template_app (template_hole 2, template_var 0),
                   template_var 1))),
             template_app
              (template_hole 1,
               template_app (template_hole 0, template_var 0)))
           ))),
    ("Finite_Map_Multiset.ran_m_fmdrop_notin",
     "?C ~:# dom_m ?N ==> ran_m (fmdrop ?C ?N) = ran_m ?N",
     template_implication
      ([template_negation
         (
            template_predicate
             (
                template_app
                 (template_app (template_hole 5, template_var 1),
                  template_app
                   (template_hole 4,
                    template_app (template_hole 3, template_var 0)))
                )
            )],
       template_equation
        (template_app
          (template_hole 1,
           template_app
            (template_app (template_hole 0, template_var 1),
             template_var 0)),
         template_app (template_hole 1, template_var 0)))),
    ("Finite_Map_Multiset.fmrestrict_set_fmupd",
     "?a ~: ?xs ==>
      fmrestrict_set ?xs (fmupd ?a ?C ?N) = fmrestrict_set ?xs ?N",
     template_implication
      ([template_negation
         (
            template_predicate
             (
                template_app
                 (template_app (template_hole 3, template_var 3),
                  template_var 2)
                )
            )],
       template_equation
        (template_app
          (template_app (template_hole 1, template_var 2),
           template_app
            (template_app
              (template_app (template_hole 0, template_var 3),
               template_var 1),
             template_var 0)),
         template_app
          (template_app (template_hole 1, template_var 2),
           template_var 0)))),
    ("Finite_Map_Multiset.fmupd_same",
     "?x1.0 :# dom_m ?x1aa ==>
      fmupd ?x1.0 (the (fmlookup ?x1aa ?x1.0)) ?x1aa = ?x1aa",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 6, template_var 1),
              template_app
               (template_hole 5,
                template_app (template_hole 4, template_var 0)))
            )],
       template_equation
        (template_app
          (template_app
            (template_app (template_hole 2, template_var 1),
             template_app
              (template_hole 1,
               template_app
                (template_app (template_hole 0, template_var 0),
                 template_var 1))),
           template_var 0),
         template_var 0))),
    ("Finite_Map_Multiset.fmupd_fmdrop_id",
     "?k |\<in>| fmdom ?N' ==>
      fmupd ?k (the (fmlookup ?N' ?k)) (fmdrop ?k ?N') = ?N'",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 6, template_var 1),
              template_app (template_hole 5, template_var 0))
            )],
       template_equation
        (template_app
          (template_app
            (template_app (template_hole 3, template_var 1),
             template_app
              (template_hole 2,
               template_app
                (template_app (template_hole 1, template_var 0),
                 template_var 1))),
           template_app
            (template_app (template_hole 0, template_var 1),
             template_var 0)),
         template_var 0))),
    ("Finite_Map_Multiset.fmrestrict_set_insert_notin",
     "?xa ~: fset (fmdom ?N) ==>
      fmrestrict_set (insert ?xa ?l1.0) ?N = fmrestrict_set ?l1.0 ?N",
     template_implication
      ([template_negation
         (
            template_predicate
             (
                template_app
                 (template_app (template_hole 5, template_var 2),
                  template_app
                   (template_hole 4,
                    template_app (template_hole 3, template_var 1)))
                )
            )],
       template_equation
        (template_app
          (template_app
            (template_hole 1,
             template_app
              (template_app (template_hole 0, template_var 2),
               template_var 0)),
           template_var 1),
         template_app
          (template_app (template_hole 1, template_var 0),
           template_var 1)))),
    ("Finite_Map_Multiset.fmrestrict_set_insert_notin_dom_m",
     "?xa ~:# dom_m ?N ==>
      fmrestrict_set (insert ?xa ?l1.0) ?N = fmrestrict_set ?l1.0 ?N",
     template_implication
      ([template_negation
         (
            template_predicate
             (
                template_app
                 (template_app (template_hole 5, template_var 2),
                  template_app
                   (template_hole 4,
                    template_app (template_hole 3, template_var 1)))
                )
            )],
       template_equation
        (template_app
          (template_app
            (template_hole 1,
             template_app
              (template_app (template_hole 0, template_var 2),
               template_var 0)),
           template_var 1),
         template_app
          (template_app (template_hole 1, template_var 0),
           template_var 1)))),
    ("Finite_Map_Multiset.fmrestrict_set_fmupd",
     "?a : ?xs ==>
      fmrestrict_set ?xs (fmupd ?a ?C ?N) =
      fmupd ?a ?C (fmrestrict_set ?xs ?N)",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 3, template_var 3),
              template_var 2)
            )],
       template_equation
        (template_app
          (template_app (template_hole 1, template_var 2),
           template_app
            (template_app
              (template_app (template_hole 0, template_var 3),
               template_var 1),
             template_var 0)),
         template_app
          (template_app
            (template_app (template_hole 0, template_var 3),
             template_var 1),
           template_app
            (template_app (template_hole 1, template_var 2),
             template_var 0))))),
    ("Finite_Map_Multiset.ran_m_mapsto_upd_notin",
     "?C ~:# dom_m ?N ==>
      ran_m (fmupd ?C ?C' ?N) = add_mset ?C' (ran_m ?N)",
     template_implication
      ([template_negation
         (
            template_predicate
             (
                template_app
                 (template_app (template_hole 6, template_var 2),
                  template_app
                   (template_hole 5,
                    template_app (template_hole 4, template_var 1)))
                )
            )],
       template_equation
        (template_app
          (template_hole 2,
           template_app
            (template_app
              (template_app (template_hole 1, template_var 2),
               template_var 0),
             template_var 1)),
         template_app
          (template_app (template_hole 0, template_var 0),
           template_app (template_hole 2, template_var 1))))),
    ("Finite_Map_Multiset.ran_m_fmdrop",
     "?C :# dom_m ?N ==>
      ran_m (fmdrop ?C ?N) =
      remove1_mset (the (fmlookup ?N ?C)) (ran_m ?N)",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 10, template_var 1),
              template_app
               (template_hole 9,
                template_app (template_hole 8, template_var 0)))
            )],
       template_equation
        (template_app
          (template_hole 6,
           template_app
            (template_app (template_hole 5, template_var 1),
             template_var 0)),
         template_app
          (template_app
            (template_hole 4,
             template_app (template_hole 6, template_var 0)),
           template_app
            (template_app
              (template_hole 3,
               template_app
                (template_hole 2,
                 template_app
                  (template_app (template_hole 1, template_var 0),
                   template_var 1))),
             template_hole 0))))),
    ("Finite_Map_Multiset.ran_m_fmdrop_If",
     "ran_m (fmdrop ?C ?N) =
      (if ?C :# dom_m ?N then remove1_mset (the (fmlookup ?N ?C)) (ran_m ?N)
       else ran_m ?N)",
     template_equation
      (template_app
        (template_hole 10,
         template_app
          (template_app (template_hole 9, template_var 1), template_var 0)),
       template_app
        (template_app
          (template_app
            (template_hole 8,
             template_app
              (template_app (template_hole 7, template_var 1),
               template_app
                (template_hole 6,
                 template_app (template_hole 5, template_var 0)))),
           template_app
            (template_app
              (template_hole 4,
               template_app (template_hole 10, template_var 0)),
             template_app
              (template_app
                (template_hole 3,
                 template_app
                  (template_hole 2,
                   template_app
                    (template_app (template_hole 1, template_var 0),
                     template_var 1))),
               template_hole 0))),
         template_app (template_hole 10, template_var 0)))),
    ("Finite_Map_Multiset.fmrestrict_set_insert_in",
     "?xa : fset (fmdom ?N) ==>
      fmrestrict_set (insert ?xa ?l1.0) ?N =
      fmupd ?xa (the (fmlookup ?N ?xa)) (fmrestrict_set ?l1.0 ?N)",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 8, template_var 2),
              template_app
               (template_hole 7,
                template_app (template_hole 6, template_var 1)))
            )],
       template_equation
        (template_app
          (template_app
            (template_hole 4,
             template_app
              (template_app (template_hole 3, template_var 2),
               template_var 0)),
           template_var 1),
         template_app
          (template_app
            (template_app (template_hole 2, template_var 2),
             template_app
              (template_hole 1,
               template_app
                (template_app (template_hole 0, template_var 1),
                 template_var 2))),
           template_app
            (template_app (template_hole 4, template_var 0),
             template_var 1))))),
    ("Finite_Map_Multiset.fmrestrict_set_insert_in_dom_m",
     "?xa :# dom_m ?N ==>
      fmrestrict_set (insert ?xa ?l1.0) ?N =
      fmupd ?xa (the (fmlookup ?N ?xa)) (fmrestrict_set ?l1.0 ?N)",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 8, template_var 2),
              template_app
               (template_hole 7,
                template_app (template_hole 6, template_var 1)))
            )],
       template_equation
        (template_app
          (template_app
            (template_hole 4,
             template_app
              (template_app (template_hole 3, template_var 2),
               template_var 0)),
           template_var 1),
         template_app
          (template_app
            (template_app (template_hole 2, template_var 2),
             template_app
              (template_hole 1,
               template_app
                (template_app (template_hole 0, template_var 1),
                 template_var 2))),
           template_app
            (template_app (template_hole 4, template_var 0),
             template_var 1))))),
    ("Finite_Map_Multiset.ran_m_mapsto_upd",
     "?C :# dom_m ?N ==>
      ran_m (fmupd ?C ?C' ?N) =
      add_mset ?C' (remove1_mset (the (fmlookup ?N ?C)) (ran_m ?N))",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 10, template_var 2),
              template_app
               (template_hole 9,
                template_app (template_hole 8, template_var 1)))
            )],
       template_equation
        (template_app
          (template_hole 6,
           template_app
            (template_app
              (template_app (template_hole 5, template_var 2),
               template_var 0),
             template_var 1)),
         template_app
          (template_app (template_hole 4, template_var 0),
           template_app
            (template_app
              (template_hole 3,
               template_app (template_hole 6, template_var 1)),
             template_app
              (template_app
                (template_hole 4,
                 template_app
                  (template_hole 2,
                   template_app
                    (template_app (template_hole 1, template_var 1),
                     template_var 2))),
               template_hole 0)))))),
    ("Finite_Map_Multiset.image_mset_If_eq_notin",
     "?C ~:# ?A ==>
      {#?f (if x = ?C then ?a x else ?b x). x :# ?A#} =
      {#?f (?b x). x :# ?A#}",
     template_implication
      ([template_negation
         (
            template_predicate
             (
                template_app
                 (template_app (template_hole 5, template_var 4),
                  template_app (template_hole 4, template_var 3))
                )
            )],
       template_equation
        (template_app
          (template_app (template_hole 2, t_empty), template_var 3),
         template_app
          (template_app (template_hole 2, t_empty), template_var 3)))),
    ("Finite_Map_Multiset.fmap_ext_fmdom",
     "[| fmdom ?N = fmdom ?N';
         !!x. x |\<in>| fmdom ?N ==> fmlookup ?N x = fmlookup ?N' x |]
      ==> ?N = ?N'",
     template_implication
      ([template_equation
         (template_app (template_hole 5, template_var 1),
          template_app (template_hole 5, template_var 0)),
        template_predicate (template_app (template_hole 4, t_empty))],
       template_equation (template_var 1, template_var 0))),
    ("Finite_Map_Multiset.filter_mset_cong2",
     "[| !!x. x :# ?M ==> ?f x = ?g x; ?M = ?N |]
      ==> filter_mset ?f ?M = filter_mset ?g ?N",
     template_implication
      ([template_predicate (template_app (template_hole 6, t_empty)),
        template_equation (template_var 3, template_var 0)],
       template_equation
        (template_app
          (template_app (template_hole 0, template_var 2), template_var 3),
         template_app
          (template_app (template_hole 0, template_var 1),
           template_var 0)))),
    ("Finite_Map_Multiset.fm_member_split",
     "?k |\<in>| fmdom ?N' ==>
      EX N'' v.
         ?N' = fmupd ?k v N'' &
         the (fmlookup ?N' ?k) = v & ?k |\<notin>| fmdom N''",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 10, template_var 1),
              template_app (template_hole 9, template_var 0))
            )],
       template_predicate (template_app (template_hole 8, t_empty))))]:
   (string * thm * template) list
### theory "Draft.Finite_Map_MultisetTemplates"
### 0.400s elapsed time, 0.499s cpu time, 0.000s GC time
val it = (): unit
