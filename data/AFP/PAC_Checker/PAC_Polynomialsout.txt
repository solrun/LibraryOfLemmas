Loading theory "HOL-Library.Stream" (required by "Draft.PAC_PolynomialsTemplates" via "Draft.ExtrEqs")
Loading theory "HOL-Library.Tree" (required by "Draft.PAC_PolynomialsTemplates" via "Draft.ExtrEqs" via "Draft.Templates")
Loading theory "Draft.Finite_Map_Multiset" (required by "Draft.PAC_PolynomialsTemplates" via "Draft.PAC_Polynomials")
Loading theory "HOL-Library.Set_Algebras" (required by "Draft.PAC_PolynomialsTemplates" via "Draft.ExtrEqs" via "HOL-Library.BigO")
instantiation
  set :: (plus) plus
  plus_set == plus :: 'a set => 'a set => 'a set
instantiation
  set :: (times) times
  times_set == times :: 'a set => 'a set => 'a set
instantiation
  set :: (zero) zero
  zero_set == zero_class.zero :: 'a set
instantiation
  set :: (one) one
  one_set == one_class.one :: 'a set
### theory "HOL-Library.Set_Algebras"
### 0.239s elapsed time, 0.941s cpu time, 0.063s GC time
Loading theory "HOL-Library.BigO" (required by "Draft.PAC_PolynomialsTemplates" via "Draft.ExtrEqs")
consts
  shift :: "'a list => 'a stream => 'a stream"
### theory "Draft.Finite_Map_Multiset"
### 0.447s elapsed time, 1.738s cpu time, 0.175s GC time
Loading theory "Draft.PAC_More_Poly" (required by "Draft.PAC_PolynomialsTemplates" via "Draft.PAC_Polynomials" via "Draft.PAC_Specification")
Proofs for coinductive predicate(s) "streamsp"
  Proving monotonicity ...
consts
  snth :: "'a stream => nat => 'a"
consts
  stake :: "nat => 'a stream => 'a list"
consts
  sdrop :: "nat => 'a stream => 'a stream"
consts
  left :: "'a tree => 'a tree"
consts
  right :: "'a tree => 'a tree"
consts
  sfilter :: "('a => bool) => 'a stream => 'a stream"
Found termination order: "size <*mlex*> {}"
consts
  cycle :: "'a list => 'a stream"
consts
  siterate :: "('a => 'a) => 'a => 'a stream"
Found termination order: "size <*mlex*> {}"
consts
  flat :: "'a list stream => 'a stream"
Found termination order: "size <*mlex*> {}"
consts
  sinterleave :: "'a stream => 'a stream => 'a stream"
class height = type +
  fixes height :: "'a => nat"
instantiation
  tree :: (type) height
  height_tree == height :: 'a tree => nat
consts
  szip :: "'a stream => 'b stream => ('a * 'b) stream"
consts
  smap2 :: "('a => 'b => 'c) => 'a stream => 'b stream => 'c stream"
Found termination order: "size <*mlex*> {}"
### theory "HOL-Library.Stream"
### 0.918s elapsed time, 3.491s cpu time, 0.444s GC time
Found termination order: "size <*mlex*> {}"
Found termination order: "size <*mlex*> {}"
### theory "HOL-Library.BigO"
### 1.011s elapsed time, 3.584s cpu time, 0.949s GC time
Found termination order: "size <*mlex*> {}"
Found termination order: "size <*mlex*> {}"
Found termination order: "size <*mlex*> {}"
"(x', u, lookup u x', A)"
  :: "'a * ('a \<Rightarrow>\<^sub>0 'b) * 'b * 'c"
Found termination order: "size <*mlex*> {}"
Found termination order: "(%p. size (fst p)) <*mlex*> {}"
Found termination order: "size <*mlex*> {}"
### theory "Draft.PAC_More_Poly"
### 1.174s elapsed time, 3.588s cpu time, 0.972s GC time
Loading theory "Draft.PAC_Specification" (required by "Draft.PAC_PolynomialsTemplates" via "Draft.PAC_Polynomials")
Found termination order: "(%p. size (snd p)) <*mlex*> {}"
Proofs for inductive predicate(s) "PAC_Format"
  Proving monotonicity ...
### theory "Draft.PAC_Specification"
### 0.259s elapsed time, 0.539s cpu time, 0.074s GC time
Loading theory "Draft.PAC_Polynomials" (required by "Draft.PAC_PolynomialsTemplates")
Found termination order: "size <*mlex*> {}"
### theory "HOL-Library.Tree"
### 2.135s elapsed time, 6.396s cpu time, 1.296s GC time
Loading theory "Draft.Templates" (required by "Draft.PAC_PolynomialsTemplates" via "Draft.ExtrEqs")
datatype template_term
=
     t_empty
   | template_app of template_term * template_term
   | template_hole of int
   | template_var of int
datatype sign
= equals | greater_equals | greater_than | less_equals | less_than
datatype template
=
     template_bimplication of template * template
   | template_dunno
   | template_equation of template_term * template_term
   | template_implication of template list * template
   | template_inequation of sign * template_term * template_term
   | template_negation of template
   | template_predicate of template_term
constructor t_empty: template_term
constructor template_app: template_term * template_term -> template_term
constructor template_hole: int -> template_term
constructor template_var: int -> template_term
constructor equals: sign
constructor greater_equals: sign
constructor greater_than: sign
constructor less_equals: sign
constructor less_than: sign
constructor template_bimplication: template * template -> template
constructor template_dunno: template
constructor template_equation: template_term * template_term -> template
constructor template_implication: template list * template -> template
constructor template_inequation:
   sign * template_term * template_term -> template
constructor template_negation: template -> template
constructor template_predicate: template_term -> template
val vfs = fn: term -> (indexname * typ) list * (string * typ) list
val indexOf = fn: ''a list -> ''a -> int -> int
val has_eq = fn: term -> bool
val term2template = fn:
   (indexname * typ) list -> (string * typ) list -> term -> template_term
val lemma2predicate = fn: term -> term -> template
val makeTemplatewithContext = fn: term -> term -> template
val lemma2template = fn: term -> template
val thm2template = fn: thm -> template
val tterm2string = fn: template_term -> string
val template2string = fn: template -> string
val t = "height ?t <= size ?t": thm
val th =
   Const ("HOL.Trueprop", "bool => prop") $
     (Const ("Orderings.ord_class.less_eq", "nat => nat => bool") $
       (Const ("Tree.height_class.height", "?'a tree => nat") $
         Var (("t", 0), "?'a tree")) $
       (Const ("Nat.size_class.size", "?'a tree => nat") $
         Var (("t", 0), "?'a tree"))):
   term
### theory "Draft.Templates"
### 0.054s elapsed time, 0.123s cpu time, 0.000s GC time
Loading theory "Draft.ExtrEqs" (required by "Draft.PAC_PolynomialsTemplates")
Proofs for inductive predicate(s) "add_poly_p"
  Proving monotonicity ...
Proofs for inductive predicate(s) "mult_poly_p"
  Proving monotonicity ...
Proofs for inductive predicate(s) "normalize_poly_p"
  Proving monotonicity ...
locale poly_embed
  fixes \<phi> :: "char list => nat"
  assumes "poly_embed \<phi>"
locale poly_embed_bij
  fixes \<phi> :: "char list => nat"
    and V :: "char list set"
    and N :: "nat set"
  assumes "poly_embed_bij \<phi> V N"
### theory "Draft.PAC_Polynomials"
### 1.081s elapsed time, 2.568s cpu time, 1.007s GC time
val eqpattern =
   Pattern
    (
       Const ("HOL.Trueprop", "bool => prop") $
         (Const ("HOL.eq", "?'a => ?'a => bool") $
           Var (("_dummy_", 1), "?'a") $ Var (("_dummy_", 2), "?'a"))
       ):
   term Find_Theorems.criterion
val badeqpattern = Pattern (Const ("Pure.eq", "?'a => ?'a => prop")):
   term Find_Theorems.criterion
val undefpattern =
   Pattern
    (
       Const ("HOL.Trueprop", "bool => prop") $
         (Const ("HOL.eq", "?'a => ?'a => bool") $
           Var (("_dummy_", 1), "?'a") $ Const ("HOL.undefined", "?'a"))
       ):
   term Find_Theorems.criterion
val thmpattern =
   Pattern
    (Const ("HOL.Trueprop", "bool => prop") $ Var (("_dummy_", 1), "bool")):
   term Find_Theorems.criterion
val badnames =
   ["*nitpick*", "*Nitpick*", "*full_exhaustive*", "*_def*", "Enum.finite*",
    "*Quickcheck*", "ATP*", "*Nunchaku*", "*Code*", "*BNF*", "*SMT*",
    "*.*.*"]:
   string list
val unwanted_names =
   [(false, Name "*nitpick*"), (false, Name "*Nitpick*"),
    (false, Name "*full_exhaustive*"), (false, Name "*_def*"),
    (false, Name "Enum.finite*"), (false, Name "*Quickcheck*"),
    (false, Name "ATP*"), (false, Name "*Nunchaku*"),
    (false, Name "*Code*"), (false, Name "*BNF*"), (false, Name "*SMT*"),
    (false, Name "*.*.*")]:
   (bool * term Find_Theorems.criterion) list
val has_vars = fn: term -> bool
val get_all_eqs = fn: string -> Proof.context -> (string * thm) list
val get_all_thms = fn: string -> Proof.context -> (string * thm) list
val get_noneq_thms = fn: string -> Proof.context -> (string * thm) list
val template_eqs = fn:
   string -> Proof.context -> (string * thm * template) list
val template_thms = fn:
   string -> Proof.context -> (string * thm * template) list
### theory "Draft.ExtrEqs"
### 0.828s elapsed time, 1.989s cpu time, 0.931s GC time
Loading theory "Draft.PAC_PolynomialsTemplates"
val templateLemmas =
   [("PAC_Polynomials.normalized_poly_normalize_poly",
     "normalized_poly (normalize_poly ?p)",
     template_predicate
      (
         template_app
          (template_hole 1, template_app (template_hole 0, template_var 0))
         )),
    ("PAC_Polynomials.comp_comp_fun_commute",
     "comp_fun_commute (add_to_coefficient o ?g)",
     template_predicate
      (
         template_app
          (template_hole 2,
           template_app
            (template_app (template_hole 1, template_hole 0),
             template_var 0))
         )),
    ("PAC_Polynomials.comp_comp_fun_commute_on",
     "comp_fun_commute_on ?R (add_to_coefficient o ?g)",
     template_predicate
      (
         template_app
          (template_app (template_hole 2, template_var 1),
           template_app
            (template_app (template_hole 1, template_hole 0),
             template_var 0))
         )),
    ("PAC_Polynomials.mult_poly_by_monom_simps",
     "mult_poly_by_monom ?t {#} = {#}",
     template_equation
      (template_app
        (template_app (template_hole 1, template_var 0), template_hole 0),
       template_hole 0)),
    ("PAC_Polynomials.ffold_empty", "ffold ?f ?z {||} = ?z",
     template_equation
      (template_app
        (template_app
          (template_app (template_hole 1, template_var 1), template_var 0),
         template_hole 0),
       template_var 0)),
    ("PAC_Polynomials.comp_fun_commute_funpow",
     "comp_fun_commute (%x. add_to_coefficient x ^^ ?g x)",
     template_predicate (template_app (template_hole 2, t_empty))),
    ("PAC_Polynomials.comp_fun_commute_on_funpow",
     "comp_fun_commute_on UNIV (%x. add_to_coefficient x ^^ ?g x)",
     template_predicate
      (
         template_app
          (template_app (template_hole 3, template_hole 2), t_empty)
         )),
    ("PAC_Polynomials.fold_graph_finite",
     "fold_graph add_to_coefficient ?z ?A ?y ==> finite ?A",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_app (template_hole 2, template_hole 1),
                  template_var 2),
                template_var 1),
              template_var 0)
            )],
       template_predicate
        (template_app (template_hole 0, template_var 1)))),
    ("PAC_Polynomials.fold_mset_single",
     "fold_mset add_to_coefficient ?s {#?x#} = add_to_coefficient ?x ?s",
     template_equation
      (template_app
        (template_app
          (template_app (template_hole 3, template_hole 2), template_var 1),
         template_app
          (template_app (template_hole 1, template_var 0),
           template_hole 0)),
       template_app
        (template_app (template_hole 2, template_var 0), template_var 1))),
    ("PAC_Polynomials.comp_fun_commute",
     "add_to_coefficient ?y o add_to_coefficient ?x =
      add_to_coefficient ?x o add_to_coefficient ?y",
     template_equation
      (template_app
        (template_app
          (template_hole 1, template_app (template_hole 0, template_var 1)),
         template_app (template_hole 0, template_var 0)),
       template_app
        (template_app
          (template_hole 1, template_app (template_hole 0, template_var 0)),
         template_app (template_hole 0, template_var 1)))),
    ("PAC_Polynomials.fold_set_fold_remdups",
     "Finite_Set.fold add_to_coefficient ?y (set ?xs) =
      fold add_to_coefficient (remdups ?xs) ?y",
     template_equation
      (template_app
        (template_app
          (template_app (template_hole 4, template_hole 3), template_var 1),
         template_app (template_hole 2, template_var 0)),
       template_app
        (template_app
          (template_app (template_hole 1, template_hole 3),
           template_app (template_hole 0, template_var 0)),
         template_var 1))),
    ("PAC_Polynomials.fun_left_comm",
     "add_to_coefficient ?y (add_to_coefficient ?x ?z) =
      add_to_coefficient ?x (add_to_coefficient ?y ?z)",
     template_equation
      (template_app
        (template_app (template_hole 0, template_var 2),
         template_app
          (template_app (template_hole 0, template_var 1), template_var 0)),
       template_app
        (template_app (template_hole 0, template_var 1),
         template_app
          (template_app (template_hole 0, template_var 2),
           template_var 0)))),
    ("PAC_Polynomials.normalized_poly_mono",
     "[| normalized_poly ?B; ?A <=# ?B |] ==> normalized_poly ?A",
     template_implication
      ([template_predicate (template_app (template_hole 1, template_var 1)),
        template_predicate
         (
            template_app
             (template_app (template_hole 0, template_var 0),
              template_var 1)
            )],
       template_predicate
        (template_app (template_hole 1, template_var 0)))),
    ("PAC_Polynomials.fold_graph_fold",
     "finite ?A ==>
      fold_graph add_to_coefficient ?z ?A
       (Finite_Set.fold add_to_coefficient ?z ?A)",
     template_implication
      ([template_predicate
         (template_app (template_hole 3, template_var 1))],
       template_predicate
        (
           template_app
            (template_app
              (template_app
                (template_app (template_hole 2, template_hole 1),
                 template_var 0),
               template_var 1),
             template_app
              (template_app
                (template_app (template_hole 0, template_hole 1),
                 template_var 0),
               template_var 1))
           ))),
    ("PAC_Polynomials.mult_poly_by_monom_simps",
     "mult_poly_by_monom ?t (?ps + ?qs) =
      mult_poly_by_monom ?t ?ps + mult_poly_by_monom ?t ?qs",
     template_equation
      (template_app
        (template_app (template_hole 1, template_var 2),
         template_app
          (template_app (template_hole 0, template_var 1), template_var 0)),
       template_app
        (template_app
          (template_hole 0,
           template_app
            (template_app (template_hole 1, template_var 2),
             template_var 1)),
         template_app
          (template_app (template_hole 1, template_var 2),
           template_var 0)))),
    ("PAC_Polynomials.fold_mset_add_mset",
     "fold_mset add_to_coefficient ?s (add_mset ?x ?M) =
      add_to_coefficient ?x (fold_mset add_to_coefficient ?s ?M)",
     template_equation
      (template_app
        (template_app
          (template_app (template_hole 2, template_hole 1), template_var 2),
         template_app
          (template_app (template_hole 0, template_var 1), template_var 0)),
       template_app
        (template_app (template_hole 1, template_var 1),
         template_app
          (template_app
            (template_app (template_hole 2, template_hole 1),
             template_var 2),
           template_var 0)))),
    ("PAC_Polynomials.ffold_fun_left_comm",
     "add_to_coefficient ?x (ffold add_to_coefficient ?z ?A) =
      ffold add_to_coefficient (add_to_coefficient ?x ?z) ?A",
     template_equation
      (template_app
        (template_app (template_hole 1, template_var 2),
         template_app
          (template_app
            (template_app (template_hole 0, template_hole 1),
             template_var 1),
           template_var 0)),
       template_app
        (template_app
          (template_app (template_hole 0, template_hole 1),
           template_app
            (template_app (template_hole 1, template_var 2),
             template_var 1)),
         template_var 0))),
    ("PAC_Polynomials.fold_mset_fun_left_comm",
     "add_to_coefficient ?x (fold_mset add_to_coefficient ?s ?M) =
      fold_mset add_to_coefficient (add_to_coefficient ?x ?s) ?M",
     template_equation
      (template_app
        (template_app (template_hole 1, template_var 2),
         template_app
          (template_app
            (template_app (template_hole 0, template_hole 1),
             template_var 1),
           template_var 0)),
       template_app
        (template_app
          (template_app (template_hole 0, template_hole 1),
           template_app
            (template_app (template_hole 1, template_var 2),
             template_var 1)),
         template_var 0))),
    ("PAC_Polynomials.fold_equality",
     "fold_graph add_to_coefficient ?z ?A ?y ==>
      Finite_Set.fold add_to_coefficient ?z ?A = ?y",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_app (template_hole 3, template_hole 2),
                  template_var 2),
                template_var 1),
              template_var 0)
            )],
       template_equation
        (template_app
          (template_app
            (template_app (template_hole 0, template_hole 2),
             template_var 2),
           template_var 1),
         template_var 0))),
    ("PAC_Polynomials.fold_mset_union",
     "fold_mset add_to_coefficient ?s (?M + ?N) =
      fold_mset add_to_coefficient (fold_mset add_to_coefficient ?s ?M) ?N",
     template_equation
      (template_app
        (template_app
          (template_app (template_hole 2, template_hole 1), template_var 2),
         template_app
          (template_app (template_hole 0, template_var 1), template_var 0)),
       template_app
        (template_app
          (template_app (template_hole 2, template_hole 1),
           template_app
            (template_app
              (template_app (template_hole 2, template_hole 1),
               template_var 2),
             template_var 1)),
         template_var 0))),
    ("PAC_Polynomials.add_poly_p_empty_l",
     "add_poly_p^** (?p, ?q, ?r) ({#}, ?q, ?p + ?r)",
     template_predicate
      (
         template_app
          (template_app
            (template_app (template_hole 5, template_hole 4),
             template_app
              (template_app (template_hole 3, template_var 2),
               template_app
                (template_app (template_hole 2, template_var 1),
                 template_var 0))),
           template_app
            (template_app (template_hole 3, template_hole 1),
             template_app
              (template_app (template_hole 2, template_var 1),
               template_app
                (template_app (template_hole 0, template_var 2),
                 template_var 0))))
         )),
    ("PAC_Polynomials.add_poly_p_empty_r",
     "add_poly_p^** (?p, ?q, ?r) (?p, {#}, ?q + ?r)",
     template_predicate
      (
         template_app
          (template_app
            (template_app (template_hole 5, template_hole 4),
             template_app
              (template_app (template_hole 3, template_var 2),
               template_app
                (template_app (template_hole 2, template_var 1),
                 template_var 0))),
           template_app
            (template_app (template_hole 3, template_var 2),
             template_app
              (template_app (template_hole 2, template_hole 1),
               template_app
                (template_app (template_hole 0, template_var 1),
                 template_var 0))))
         )),
    ("PAC_Polynomials.commute_left_comp",
     "add_to_coefficient ?y o (add_to_coefficient ?x o ?g) =
      add_to_coefficient ?x o (add_to_coefficient ?y o ?g)",
     template_equation
      (template_app
        (template_app
          (template_hole 1, template_app (template_hole 0, template_var 2)),
         template_app
          (template_app
            (template_hole 1,
             template_app (template_hole 0, template_var 1)),
           template_var 0)),
       template_app
        (template_app
          (template_hole 1, template_app (template_hole 0, template_var 1)),
         template_app
          (template_app
            (template_hole 1,
             template_app (template_hole 0, template_var 2)),
           template_var 0)))),
    ("PAC_Polynomials.ffold_finsert_fremove",
     "ffold add_to_coefficient ?z (finsert ?x ?A) =
      add_to_coefficient ?x (ffold add_to_coefficient ?z (?A |-| {|?x|}))",
     template_equation
      (template_app
        (template_app
          (template_app (template_hole 4, template_hole 3), template_var 2),
         template_app
          (template_app (template_hole 2, template_var 1), template_var 0)),
       template_app
        (template_app (template_hole 3, template_var 1),
         template_app
          (template_app
            (template_app (template_hole 4, template_hole 3),
             template_var 2),
           template_app
            (template_app (template_hole 1, template_var 0),
             template_app
              (template_app (template_hole 2, template_var 1),
               template_hole 0)))))),
    ("PAC_Polynomials.fold_fun_left_comm",
     "finite ?A ==>
      add_to_coefficient ?x (Finite_Set.fold add_to_coefficient ?z ?A) =
      Finite_Set.fold add_to_coefficient (add_to_coefficient ?x ?z) ?A",
     template_implication
      ([template_predicate
         (template_app (template_hole 3, template_var 2))],
       template_equation
        (template_app
          (template_app (template_hole 1, template_var 1),
           template_app
            (template_app
              (template_app (template_hole 0, template_hole 1),
               template_var 0),
             template_var 2)),
         template_app
          (template_app
            (template_app (template_hole 0, template_hole 1),
             template_app
              (template_app (template_hole 1, template_var 1),
               template_var 0)),
           template_var 2)))),
    ("PAC_Polynomials.fold_graph_determ",
     "[| fold_graph add_to_coefficient ?z ?A ?x;
         fold_graph add_to_coefficient ?z ?A ?y |]
      ==> ?y = ?x",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_app (template_hole 2, template_hole 1),
                  template_var 3),
                template_var 2),
              template_var 1)
            ),
        template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_app (template_hole 2, template_hole 1),
                  template_var 3),
                template_var 2),
              template_var 0)
            )],
       template_equation (template_var 0, template_var 1))),
    ("PAC_Polynomials.ffold_finsert2",
     "?x |\<notin>| ?A ==>
      ffold add_to_coefficient ?z (finsert ?x ?A) =
      ffold add_to_coefficient (add_to_coefficient ?x ?z) ?A",
     template_implication
      ([template_negation
         (
            template_predicate
             (
                template_app
                 (template_app (template_hole 4, template_var 2),
                  template_var 1)
                )
            )],
       template_equation
        (template_app
          (template_app
            (template_app (template_hole 2, template_hole 1),
             template_var 0),
           template_app
            (template_app (template_hole 0, template_var 2),
             template_var 1)),
         template_app
          (template_app
            (template_app (template_hole 2, template_hole 1),
             template_app
              (template_app (template_hole 1, template_var 2),
               template_var 0)),
           template_var 1)))),
    ("PAC_Polynomials.ffold_finsert",
     "?x |\<notin>| ?A ==>
      ffold add_to_coefficient ?z (finsert ?x ?A) =
      add_to_coefficient ?x (ffold add_to_coefficient ?z ?A)",
     template_implication
      ([template_negation
         (
            template_predicate
             (
                template_app
                 (template_app (template_hole 4, template_var 2),
                  template_var 1)
                )
            )],
       template_equation
        (template_app
          (template_app
            (template_app (template_hole 2, template_hole 1),
             template_var 0),
           template_app
            (template_app (template_hole 0, template_var 2),
             template_var 1)),
         template_app
          (template_app (template_hole 1, template_var 2),
           template_app
            (template_app
              (template_app (template_hole 2, template_hole 1),
               template_var 0),
             template_var 1))))),
    ("PAC_Polynomials.ffold_rec",
     "?x |\<in>| ?A ==>
      ffold add_to_coefficient ?z ?A =
      add_to_coefficient ?x (ffold add_to_coefficient ?z (?A |-| {|?x|}))",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 6, template_var 2),
              template_var 1)
            )],
       template_equation
        (template_app
          (template_app
            (template_app (template_hole 4, template_hole 3),
             template_var 0),
           template_var 1),
         template_app
          (template_app (template_hole 3, template_var 2),
           template_app
            (template_app
              (template_app (template_hole 4, template_hole 3),
               template_var 0),
             template_app
              (template_app (template_hole 2, template_var 1),
               template_app
                (template_app (template_hole 1, template_var 2),
                 template_hole 0))))))),
    ("PAC_Polynomials.mult_poly_by_monom_simps",
     "mult_poly_by_monom ?a (add_mset ?p ?ps) =
      add_mset (fst ?a + fst ?p, snd ?a * snd ?p)
       (mult_poly_by_monom ?a ?ps)",
     template_equation
      (template_app
        (template_app (template_hole 6, template_var 2),
         template_app
          (template_app (template_hole 5, template_var 1), template_var 0)),
       template_app
        (template_app
          (template_hole 5,
           template_app
            (template_app
              (template_hole 4,
               template_app
                (template_app
                  (template_hole 3,
                   template_app (template_hole 2, template_var 2)),
                 template_app (template_hole 2, template_var 1))),
             template_app
              (template_app
                (template_hole 1,
                 template_app (template_hole 0, template_var 2)),
               template_app (template_hole 0, template_var 1)))),
         template_app
          (template_app (template_hole 6, template_var 2),
           template_var 0)))),
    ("PAC_Polynomials.fold_insert_remove",
     "finite ?A ==>
      Finite_Set.fold add_to_coefficient ?z (insert ?x ?A) =
      add_to_coefficient ?x
       (Finite_Set.fold add_to_coefficient ?z (?A - {?x}))",
     template_implication
      ([template_predicate
         (template_app (template_hole 6, template_var 2))],
       template_equation
        (template_app
          (template_app
            (template_app (template_hole 4, template_hole 3),
             template_var 1),
           template_app
            (template_app (template_hole 2, template_var 0),
             template_var 2)),
         template_app
          (template_app (template_hole 3, template_var 0),
           template_app
            (template_app
              (template_app (template_hole 4, template_hole 3),
               template_var 1),
             template_app
              (template_app (template_hole 1, template_var 2),
               template_app
                (template_app (template_hole 2, template_var 0),
                 template_hole 0))))))),
    ("PAC_Polynomials.normalized_poly_simps",
     "normalized_poly (add_mset ?t ?p) =
      (snd ?t ~= 0 & fst ?t ~:# fst `# ?p & normalized_poly ?p)",
     template_implication
      ([template_predicate
         (
            template_app
             (template_hole 10,
              template_app
               (template_app (template_hole 9, template_var 1),
                template_var 0))
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 8,
               template_app
                (template_hole 7,
                 template_app
                  (template_app
                    (template_hole 6,
                     template_app (template_hole 5, template_var 1)),
                   template_hole 4))),
             template_app
              (template_app
                (template_hole 8,
                 template_app
                  (template_hole 7,
                   template_app
                    (template_app
                      (template_hole 3,
                       template_app (template_hole 2, template_var 1)),
                     template_app
                      (template_hole 1,
                       template_app
                        (template_app (template_hole 0, template_hole 2),
                         template_var 0))))),
               template_app (template_hole 10, template_var 0)))
           ))),
    ("PAC_Polynomials.add_poly_p_sym",
     "add_poly_p (?p, ?q, ?r) (?p', ?q', ?r') =
      add_poly_p (?q, ?p, ?r) (?q', ?p', ?r')",
     template_equation
      (template_app
        (template_app
          (template_hole 2,
           template_app
            (template_app (template_hole 1, template_var 5),
             template_app
              (template_app (template_hole 0, template_var 4),
               template_var 3))),
         template_app
          (template_app (template_hole 1, template_var 2),
           template_app
            (template_app (template_hole 0, template_var 1),
             template_var 0))),
       template_app
        (template_app
          (template_hole 2,
           template_app
            (template_app (template_hole 1, template_var 4),
             template_app
              (template_app (template_hole 0, template_var 5),
               template_var 3))),
         template_app
          (template_app (template_hole 1, template_var 1),
           template_app
            (template_app (template_hole 0, template_var 2),
             template_var 0))))),
    ("PAC_Polynomials.fold_insert2",
     "[| finite ?A; ?x ~: ?A |]
      ==> Finite_Set.fold add_to_coefficient ?z (insert ?x ?A) =
          Finite_Set.fold add_to_coefficient (add_to_coefficient ?x ?z) ?A",
     template_implication
      ([template_predicate (template_app (template_hole 6, template_var 2)),
        template_negation
         (
            template_predicate
             (
                template_app
                 (template_app (template_hole 4, template_var 1),
                  template_var 2)
                )
            )],
       template_equation
        (template_app
          (template_app
            (template_app (template_hole 2, template_hole 1),
             template_var 0),
           template_app
            (template_app (template_hole 0, template_var 1),
             template_var 2)),
         template_app
          (template_app
            (template_app (template_hole 2, template_hole 1),
             template_app
              (template_app (template_hole 1, template_var 1),
               template_var 0)),
           template_var 2)))),
    ("PAC_Polynomials.fold_insert",
     "[| finite ?A; ?x ~: ?A |]
      ==> Finite_Set.fold add_to_coefficient ?z (insert ?x ?A) =
          add_to_coefficient ?x (Finite_Set.fold add_to_coefficient ?z ?A)",
     template_implication
      ([template_predicate (template_app (template_hole 6, template_var 2)),
        template_negation
         (
            template_predicate
             (
                template_app
                 (template_app (template_hole 4, template_var 1),
                  template_var 2)
                )
            )],
       template_equation
        (template_app
          (template_app
            (template_app (template_hole 2, template_hole 1),
             template_var 0),
           template_app
            (template_app (template_hole 0, template_var 1),
             template_var 2)),
         template_app
          (template_app (template_hole 1, template_var 1),
           template_app
            (template_app
              (template_app (template_hole 2, template_hole 1),
               template_var 0),
             template_var 2))))),
    ("PAC_Polynomials.fold_rec",
     "[| finite ?A; ?x : ?A |]
      ==> Finite_Set.fold add_to_coefficient ?z ?A =
          add_to_coefficient ?x
           (Finite_Set.fold add_to_coefficient ?z (?A - {?x}))",
     template_implication
      ([template_predicate (template_app (template_hole 7, template_var 2)),
        template_predicate
         (
            template_app
             (template_app (template_hole 6, template_var 1),
              template_var 2)
            )],
       template_equation
        (template_app
          (template_app
            (template_app (template_hole 4, template_hole 3),
             template_var 0),
           template_var 2),
         template_app
          (template_app (template_hole 3, template_var 1),
           template_app
            (template_app
              (template_app (template_hole 4, template_hole 3),
               template_var 0),
             template_app
              (template_app (template_hole 2, template_var 2),
               template_app
                (template_app (template_hole 1, template_var 1),
                 template_hole 0))))))),
    ("PAC_Polynomials.wf_if_measure_in_wf",
     "[| wf ?R; !!a b. (a, b) : ?S ==> (?\<nu> a, ?\<nu> b) : ?R |]
      ==> wf ?S",
     template_implication
      ([template_predicate (template_app (template_hole 6, template_var 2)),
        template_predicate (template_app (template_hole 5, t_empty))],
       template_predicate
        (template_app (template_hole 0, template_var 1)))),
    ("PAC_Polynomials.fold_graph_insertE_aux",
     "[| fold_graph add_to_coefficient ?z ?A ?y; ?a : ?A |]
      ==> EX y'.
             ?y = add_to_coefficient ?a y' &
             fold_graph add_to_coefficient ?z (?A - {?a}) y'",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_app (template_hole 8, template_hole 7),
                  template_var 3),
                template_var 2),
              template_var 1)
            ),
        template_predicate
         (
            template_app
             (template_app (template_hole 6, template_var 0),
              template_var 2)
            )],
       template_predicate (template_app (template_hole 5, t_empty)))),
    ("PAC_Polynomials.fold_set_union_disj",
     "[| finite ?A; finite ?B; ?A Int ?B = {} |]
      ==> Finite_Set.fold add_to_coefficient ?z (?A Un ?B) =
          Finite_Set.fold add_to_coefficient
           (Finite_Set.fold add_to_coefficient ?z ?A) ?B",
     template_implication
      ([template_predicate (template_app (template_hole 7, template_var 2)),
        template_predicate (template_app (template_hole 7, template_var 1)),
        template_equation
         (template_app
           (template_app (template_hole 5, template_var 2), template_var 1),
          template_hole 4)],
       template_equation
        (template_app
          (template_app
            (template_app (template_hole 2, template_hole 1),
             template_var 0),
           template_app
            (template_app (template_hole 0, template_var 2),
             template_var 1)),
         template_app
          (template_app
            (template_app (template_hole 2, template_hole 1),
             template_app
              (template_app
                (template_app (template_hole 2, template_hole 1),
                 template_var 0),
               template_var 2)),
           template_var 1)))),
    ("PAC_Polynomials.fold_mset_fusion",
     "[| comp_fun_commute ?g;
         !!x y. ?h (?g x y) = add_to_coefficient x (?h y) |]
      ==> ?h (fold_mset ?g ?w ?A) =
          fold_mset add_to_coefficient (?h ?w) ?A",
     template_implication
      ([template_predicate (template_app (template_hole 6, template_var 3)),
        template_predicate (template_app (template_hole 5, t_empty))],
       template_equation
        (template_app
          (template_var 2,
           template_app
            (template_app
              (template_app (template_hole 1, template_var 3),
               template_var 1),
             template_var 0)),
         template_app
          (template_app
            (template_app (template_hole 0, template_hole 2),
             template_app (template_var 2, template_var 1)),
           template_var 0)))),
    ("PAC_Polynomials.add_to_coefficient_simps",
     "?n + \<Sum>\<^sub># (snd `# {#(a', uu_) :# ?b. a' = ?a#}) = 0 ==>
      add_to_coefficient (?a, ?n) ?b = {#(a', uu_) :# ?b. a' ~= ?a#}",
     template_implication
      ([template_equation
         (template_app
           (template_app (template_hole 11, template_var 2),
            template_app
             (template_hole 10,
              template_app
               (template_app (template_hole 9, template_hole 8),
                template_app
                 (template_app
                   (template_hole 7,
                    template_app (template_hole 6, t_empty)),
                  template_var 0)))),
          template_hole 4)],
       template_equation
        (template_app
          (template_app
            (template_hole 2,
             template_app
              (template_app (template_hole 1, template_var 1),
               template_var 2)),
           template_var 0),
         template_app
          (template_app
            (template_hole 7, template_app (template_hole 6, t_empty)),
           template_var 0)))),
    ("PAC_Polynomials.fold_graph_insertE",
     "[| fold_graph add_to_coefficient ?z (insert ?x ?A) ?v; ?x ~: ?A;
         !!y. [| ?v = add_to_coefficient ?x y;
                 fold_graph add_to_coefficient ?z ?A y |]
              ==> ?thesis |]
      ==> ?thesis",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_app (template_hole 6, template_hole 5),
                  template_var 4),
                template_app
                 (template_app (template_hole 4, template_var 3),
                  template_var 2)),
              template_var 1)
            ),
        template_negation
         (
            template_predicate
             (
                template_app
                 (template_app (template_hole 2, template_var 3),
                  template_var 2)
                )
            ),
        template_predicate (template_app (template_hole 1, t_empty))],
       template_predicate (template_var 0))),
    ("PAC_Polynomials.mult_poly_p_induct",
     "[| mult_poly_p ?q (?x1a, ?x1b) (?x2a, ?x2b);
         !!xs n p r.
            ?P (add_mset (xs, n) p) r p
             ({#(remdups_mset (xs + ys), n * m). (ys, m) :# ?q#} + r) |]
      ==> ?P ?x1a ?x1b ?x2a ?x2b",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app (template_hole 12, template_var 5),
                template_app
                 (template_app (template_hole 11, template_var 4),
                  template_var 3)),
              template_app
               (template_app (template_hole 11, template_var 2),
                template_var 1))
            ),
        template_predicate (template_app (template_hole 10, t_empty))],
       template_predicate
        (
           template_app
            (template_app
              (template_app
                (template_app (template_var 0, template_var 4),
                 template_var 3),
               template_var 2),
             template_var 1)
           ))),
    ("PAC_Polynomials.add_to_coefficient_simps_If",
     "add_to_coefficient (?a, ?n) ?b =
      {#(a', uu_) :# ?b. a' ~= ?a#} +
      (if ?n + \<Sum>\<^sub># (snd `# {#(a', uu_) :# ?b. a' = ?a#}) = 0
       then {#}
       else {#(?a,
               ?n +
               \<Sum>\<^sub># (snd `# {#(a', uu_) :# ?b. a' = ?a#}))#})",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_hole 15,
                template_app
                 (template_app (template_hole 14, template_var 2),
                  template_var 1)),
              template_var 0)
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 13,
               template_app
                (template_app
                  (template_hole 12,
                   template_app (template_hole 11, t_empty)),
                 template_var 0)),
             template_app
              (template_app
                (template_app
                  (template_hole 8,
                   template_app
                    (template_app
                      (template_hole 7,
                       template_app
                        (template_app (template_hole 6, template_var 1),
                         template_app
                          (template_hole 5,
                           template_app
                            (template_app
                              (template_hole 4, template_hole 3),
                             template_app
                              (template_app
                                (template_hole 12,
                                 template_app (template_hole 11, t_empty)),
                               template_var 0))))),
                     template_hole 2)),
                 template_hole 1),
               template_app
                (template_app
                  (template_hole 0,
                   template_app
                    (template_app (template_hole 14, template_var 2),
                     template_app
                      (template_app (template_hole 6, template_var 1),
                       template_app
                        (template_hole 5,
                         template_app
                          (template_app (template_hole 4, template_hole 3),
                           template_app
                            (template_app
                              (template_hole 12,
                               template_app (template_hole 11, t_empty)),
                             template_var 0)))))),
                 template_hole 1)))
           ))),
    ("PAC_Polynomials.lexn_n",
     "0 < ?n ==>
      ((?x # ?xs, ?y # ?ys) : lexn ?r ?n) =
      ((length ?xs = ?n - 1 & length ?ys = ?n - 1) &
       ((?x, ?y) : ?r | ?x = ?y & (?xs, ?ys) : lexn ?r (?n - 1)))",
     template_implication
      ([template_inequation (less_than, template_hole 14, template_var 5)],
       template_implication
        ([template_predicate
           (
              template_app
               (template_app
                 (template_hole 12,
                  template_app
                   (template_app
                     (template_hole 11,
                      template_app
                       (template_app (template_hole 10, template_var 4),
                        template_var 3)),
                    template_app
                     (template_app (template_hole 10, template_var 2),
                      template_var 1))),
                template_app
                 (template_app (template_hole 9, template_var 0),
                  template_var 5))
              )],
         template_predicate
          (
             template_app
              (template_app
                (template_hole 8,
                 template_app
                  (template_app
                    (template_hole 8,
                     template_app
                      (template_app
                        (template_hole 7,
                         template_app (template_hole 6, template_var 3)),
                       template_app
                        (template_app (template_hole 5, template_var 5),
                         template_hole 4))),
                   template_app
                    (template_app
                      (template_hole 7,
                       template_app (template_hole 6, template_var 1)),
                     template_app
                      (template_app (template_hole 5, template_var 5),
                       template_hole 4)))),
               template_app
                (template_app
                  (template_hole 3,
                   template_app
                    (template_app
                      (template_hole 2,
                       template_app
                        (template_app (template_hole 1, template_var 4),
                         template_var 2)),
                     template_var 0)),
                 template_app
                  (template_app
                    (template_hole 8,
                     template_app
                      (template_app (template_hole 0, template_var 4),
                       template_var 2)),
                   template_app
                    (template_app
                      (template_hole 12,
                       template_app
                        (template_app (template_hole 11, template_var 3),
                         template_var 1)),
                     template_app
                      (template_app (template_hole 9, template_var 0),
                       template_app
                        (template_app (template_hole 5, template_var 5),
                         template_hole 4))))))
             )))),
    ("PAC_Polynomials.add_to_coefficient_simps",
     "?n + \<Sum>\<^sub># (snd `# {#(a', uu_) :# ?b. a' = ?a#}) ~= 0 ==>
      add_to_coefficient (?a, ?n) ?b =
      {#(a', uu_) :# ?b. a' ~= ?a#} +
      {#(?a, ?n + \<Sum>\<^sub># (snd `# {#(a', uu_) :# ?b. a' = ?a#}))#}",
     template_implication
      ([template_negation
         (
            template_equation
             (template_app
               (template_app (template_hole 13, template_var 2),
                template_app
                 (template_hole 12,
                  template_app
                   (template_app (template_hole 11, template_hole 10),
                    template_app
                     (template_app
                       (template_hole 9,
                        template_app (template_hole 8, t_empty)),
                      template_var 0)))),
              template_hole 6)
            )],
       template_equation
        (template_app
          (template_app
            (template_hole 4,
             template_app
              (template_app (template_hole 3, template_var 1),
               template_var 2)),
           template_var 0),
         template_app
          (template_app
            (template_hole 2,
             template_app
              (template_app
                (template_hole 9, template_app (template_hole 8, t_empty)),
               template_var 0)),
           template_app
            (template_app
              (template_hole 1,
               template_app
                (template_app (template_hole 3, template_var 1),
                 template_app
                  (template_app (template_hole 13, template_var 2),
                   template_app
                    (template_hole 12,
                     template_app
                      (template_app (template_hole 11, template_hole 10),
                       template_app
                        (template_app
                          (template_hole 9,
                           template_app (template_hole 8, t_empty)),
                         template_var 0)))))),
             template_hole 0))))),
    ("PAC_Polynomials.add_poly_p_induct",
     "[| add_poly_p (?x1a, ?x1b, ?x1c) (?x2a, ?x2b, ?x2c);
         !!p a b q r. ?P p (add_mset (a, b) q) r p q (add_mset (a, b) r);
         !!a b p q r. ?P (add_mset (a, b) p) q r p q (add_mset (a, b) r);
         !!x n p q m r.
            ?P (add_mset (x, n) p) q (add_mset (x, m) r) p q
             (add_mset (x, n + m) r);
         !!p x n q m r.
            ?P p (add_mset (x, n) q) (add_mset (x, m) r) p q
             (add_mset (x, n + m) r);
         !!p q x r. ?P p q (add_mset (x, 0) r) p q r |]
      ==> ?P ?x1a ?x1b ?x1c ?x2a ?x2b ?x2c",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_hole 9,
                template_app
                 (template_app (template_hole 8, template_var 6),
                  template_app
                   (template_app (template_hole 7, template_var 5),
                    template_var 4))),
              template_app
               (template_app (template_hole 8, template_var 3),
                template_app
                 (template_app (template_hole 7, template_var 2),
                  template_var 1)))
            ),
        template_predicate (template_app (template_hole 6, t_empty)),
        template_predicate (template_app (template_hole 5, t_empty)),
        template_predicate (template_app (template_hole 5, t_empty)),
        template_predicate (template_app (template_hole 6, t_empty)),
        template_predicate (template_app (template_hole 6, t_empty))],
       template_predicate
        (
           template_app
            (template_app
              (template_app
                (template_app
                  (template_app
                    (template_app (template_var 0, template_var 6),
                     template_var 5),
                   template_var 4),
                 template_var 3),
               template_var 2),
             template_var 1)
           ))),
    ("PAC_Polynomials.add_poly_pE",
     "[| add_poly_p ?S ?T;
         !!p x q r.
            [| ?S = (p, add_mset x q, r); ?T = (p, q, add_mset x r) |]
            ==> ?P;
         !!x p q r.
            [| ?S = (add_mset x p, q, r); ?T = (p, q, add_mset x r) |]
            ==> ?P;
         !!x n p q m r.
            [| ?S = (add_mset (x, n) p, q, add_mset (x, m) r);
               ?T = (p, q, add_mset (x, n + m) r) |]
            ==> ?P;
         !!p x n q m r.
            [| ?S = (p, add_mset (x, n) q, add_mset (x, m) r);
               ?T = (p, q, add_mset (x, n + m) r) |]
            ==> ?P;
         !!p q x r.
            [| ?S = (p, q, add_mset (x, 0) r); ?T = (p, q, r) |] ==> ?P |]
      ==> ?P",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 11, template_var 2),
              template_var 1)
            ),
        template_predicate (template_app (template_hole 10, t_empty)),
        template_predicate (template_app (template_hole 9, t_empty)),
        template_predicate (template_app (template_hole 4, t_empty)),
        template_predicate (template_app (template_hole 10, t_empty)),
        template_predicate (template_app (template_hole 10, t_empty))],
       template_predicate (template_var 0)))]:
   (string * thm * template) list
### theory "Draft.PAC_PolynomialsTemplates"
### 0.775s elapsed time, 1.024s cpu time, 0.158s GC time
val it = (): unit
