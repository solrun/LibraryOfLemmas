Loading theory "Draft.Markov_Models_Auxiliary" (required by "Draft.Continuous_Time_Markov_ChainTemplates" via "Draft.Continuous_Time_Markov_Chain" via "Draft.Discrete_Time_Markov_Process")
Loading theory "HOL-Library.Function_Algebras" (required by "Draft.Continuous_Time_Markov_ChainTemplates" via "Draft.ExtrEqs" via "HOL-Library.BigO")
Loading theory "Draft.Templates" (required by "Draft.Continuous_Time_Markov_ChainTemplates" via "Draft.ExtrEqs")
instantiation
  fun :: (type, plus) plus
  plus_fun == plus :: ('a => 'b) => ('a => 'b) => 'a => 'b
instantiation
  fun :: (type, zero) zero
  zero_fun == zero_class.zero :: 'a => 'b
instantiation
  fun :: (type, times) times
  times_fun == times :: ('a => 'b) => ('a => 'b) => 'a => 'b
instantiation
  fun :: (type, one) one
  one_fun == one_class.one :: 'a => 'b
datatype template_term
=
     t_empty
   | template_app of template_term * template_term
   | template_hole of int
   | template_var of int
datatype sign
= equals | greater_equals | greater_than | less_equals | less_than
datatype template
=
     template_bimplication of template * template
   | template_dunno
   | template_equation of template_term * template_term
   | template_implication of template list * template
   | template_inequation of sign * template_term * template_term
   | template_negation of template
   | template_predicate of template_term
constructor t_empty: template_term
constructor template_app: template_term * template_term -> template_term
constructor template_hole: int -> template_term
constructor template_var: int -> template_term
constructor equals: sign
constructor greater_equals: sign
constructor greater_than: sign
constructor less_equals: sign
constructor less_than: sign
constructor template_bimplication: template * template -> template
constructor template_dunno: template
constructor template_equation: template_term * template_term -> template
constructor template_implication: template list * template -> template
constructor template_inequation:
   sign * template_term * template_term -> template
constructor template_negation: template -> template
constructor template_predicate: template_term -> template
val vfs = fn: term -> (indexname * typ) list * (string * typ) list
val indexOf = fn: ''a list -> ''a -> int -> int
val has_eq = fn: term -> bool
val term2template = fn:
   (indexname * typ) list -> (string * typ) list -> term -> template_term
val lemma2predicate = fn: term -> term -> template
val makeTemplatewithContext = fn: term -> term -> template
val lemma2template = fn: term -> template
val thm2template = fn: thm -> template
val tterm2string = fn: template_term -> string
val template2string = fn: template -> string
val t = "height ?t <= size ?t": thm
val th =
   Const ("HOL.Trueprop", "bool => prop") $
     (Const ("Orderings.ord_class.less_eq", "nat => nat => bool") $
       (Const ("Tree.height_class.height", "?'a tree => nat") $
         Var (("t", 0), "?'a tree")) $
       (Const ("Nat.size_class.size", "?'a tree => nat") $
         Var (("t", 0), "?'a tree"))):
   term
### theory "Draft.Templates"
### 0.074s elapsed time, 0.260s cpu time, 0.000s GC time
### theory "HOL-Library.Function_Algebras"
### 0.114s elapsed time, 0.339s cpu time, 0.000s GC time
Loading theory "HOL-Library.BigO" (required by "Draft.Continuous_Time_Markov_ChainTemplates" via "Draft.ExtrEqs")
class order = preorder +
  assumes "order_antisym": "!!x y. [| x <= y; y <= x |] ==> x = y"
class linorder = order +
  assumes "linear": "!!x y. x <= y | y <= x"
### theory "HOL-Library.BigO"
### 0.582s elapsed time, 1.187s cpu time, 0.048s GC time
Loading theory "Draft.ExtrEqs" (required by "Draft.Continuous_Time_Markov_ChainTemplates")
val eqpattern =
   Pattern
    (
       Const ("HOL.Trueprop", "bool => prop") $
         (Const ("HOL.eq", "?'a => ?'a => bool") $
           Var (("_dummy_", 1), "?'a") $ Var (("_dummy_", 2), "?'a"))
       ):
   term Find_Theorems.criterion
val badeqpattern = Pattern (Const ("Pure.eq", "?'a => ?'a => prop")):
   term Find_Theorems.criterion
val undefpattern =
   Pattern
    (
       Const ("HOL.Trueprop", "bool => prop") $
         (Const ("HOL.eq", "?'a => ?'a => bool") $
           Var (("_dummy_", 1), "?'a") $ Const ("HOL.undefined", "?'a"))
       ):
   term Find_Theorems.criterion
val thmpattern =
   Pattern
    (Const ("HOL.Trueprop", "bool => prop") $ Var (("_dummy_", 1), "bool")):
   term Find_Theorems.criterion
val badnames =
   ["*nitpick*", "*Nitpick*", "*full_exhaustive*", "*_def*", "Enum.finite*",
    "*Quickcheck*", "ATP*", "*Nunchaku*", "*Code*", "*BNF*", "*SMT*",
    "*.*.*"]:
   string list
val unwanted_names =
   [(false, Name "*nitpick*"), (false, Name "*Nitpick*"),
    (false, Name "*full_exhaustive*"), (false, Name "*_def*"),
    (false, Name "Enum.finite*"), (false, Name "*Quickcheck*"),
    (false, Name "ATP*"), (false, Name "*Nunchaku*"),
    (false, Name "*Code*"), (false, Name "*BNF*"), (false, Name "*SMT*"),
    (false, Name "*.*.*")]:
   (bool * term Find_Theorems.criterion) list
val has_vars = fn: term -> bool
val get_all_eqs = fn: string -> Proof.context -> (string * thm) list
val get_all_thms = fn: string -> Proof.context -> (string * thm) list
val get_noneq_thms = fn: string -> Proof.context -> (string * thm) list
val template_eqs = fn:
   string -> Proof.context -> (string * thm * template) list
val template_thms = fn:
   string -> Proof.context -> (string * thm * template) list
### theory "Draft.ExtrEqs"
### 0.501s elapsed time, 1.043s cpu time, 0.119s GC time
consts
  eexp :: "ereal => ennreal"
### theory "Draft.Markov_Models_Auxiliary"
### 1.524s elapsed time, 2.958s cpu time, 0.250s GC time
Loading theory "Draft.Discrete_Time_Markov_Chain" (required by "Draft.Continuous_Time_Markov_ChainTemplates" via "Draft.Continuous_Time_Markov_Chain")
Loading theory "Draft.Discrete_Time_Markov_Process" (required by "Draft.Continuous_Time_Markov_ChainTemplates" via "Draft.Continuous_Time_Markov_Chain")
locale discrete_Markov_process
  fixes M :: "'a measure"
    and K :: "'a => 'a measure"
  assumes "discrete_Markov_process M K"
locale MC_syntax
  fixes K :: "'s => 's pmf"
Proofs for coinductive predicate(s) "enabled"
  Proving monotonicity ...
consts
  force_enabled :: "'s => 's stream => 's stream"
consts
  walk :: "'s => ('s => 's) stream => 's stream"
locale discrete_Markov_process
  fixes M :: "'a measure"
    and K :: "'a => 'a measure"
  assumes "discrete_Markov_process M K"
### theory "Draft.Discrete_Time_Markov_Process"
### 0.241s elapsed time, 0.511s cpu time, 0.061s GC time
locale MC_with_rewards
  fixes K :: "'s => 's pmf"
    and \<iota> :: "'s => 's => ennreal"
    and \<rho> :: "'s => ennreal"
  assumes "MC_with_rewards \<iota> \<rho>"
locale MC_pair
  fixes K1 :: "'a => 'a pmf"
    and K2 :: "'b => 'b pmf"
### theory "Draft.Discrete_Time_Markov_Chain"
### 1.058s elapsed time, 1.583s cpu time, 0.467s GC time
Loading theory "Draft.Continuous_Time_Markov_Chain" (required by "Draft.Continuous_Time_Markov_ChainTemplates")
consts
  merge_at ::
    "(real * 'a) stream => real => (real * 'a) stream => (real * 'a) stream"
locale transition_rates
  fixes R :: "'a => 'a => real"
  assumes "transition_rates R"
Proofs for inductive predicate(s) "trace_in"
  Proving monotonicity ...
Proofs for coinductive predicate(s) "wf_times"
  Proving monotonicity ...
### theory "Draft.Continuous_Time_Markov_Chain"
### 0.895s elapsed time, 0.958s cpu time, 0.097s GC time
Loading theory "Draft.Continuous_Time_Markov_ChainTemplates"
val templateLemmas =
   [("Continuous_Time_Markov_Chain.space_exponential",
     "space (exponential ?l) = UNIV",
     template_equation
      (template_app
        (template_hole 2, template_app (template_hole 1, template_var 0)),
       template_hole 0)),
    ("Continuous_Time_Markov_Chain.sets_exponential",
     "sets (exponential ?l) = sets borel",
     template_equation
      (template_app
        (template_hole 2, template_app (template_hole 1, template_var 0)),
       template_app (template_hole 2, template_hole 0))),
    ("Continuous_Time_Markov_Chain.prob_space_exponential",
     "0 < ?l ==> prob_space (exponential ?l)",
     template_implication
      ([template_inequation (less_than, template_hole 2, template_var 0)],
       template_predicate
        (
           template_app
            (template_hole 1,
             template_app (template_hole 0, template_var 0))
           ))),
    ("Continuous_Time_Markov_Chain.AE_exponential",
     "0 < ?l ==> almost_everywhere (exponential ?l) ((<) 0)",
     template_implication
      ([template_inequation (less_than, template_hole 3, template_var 0)],
       template_predicate
        (
           template_app
            (template_app (template_hole 2, t_empty),
             template_app
              (template_hole 1,
               template_app (template_hole 0, template_var 0)))
           ))),
    ("Continuous_Time_Markov_Chain.trace_at_simp",
     "trace_at ?s ((?t', ?s') ## ?\<omega>) ?j =
      (if ?t' <= ?j then trace_at ?s' ?\<omega> ?j else ?s)",
     template_equation
      (template_app
        (template_app
          (template_app (template_hole 4, template_var 4),
           template_app
            (template_app
              (template_hole 3,
               template_app
                (template_app (template_hole 2, template_var 3),
                 template_var 2)),
             template_var 1)),
         template_var 0),
       template_app
        (template_app
          (template_app
            (template_hole 1,
             template_app
              (template_app (template_hole 0, template_var 3),
               template_var 0)),
           template_app
            (template_app
              (template_app (template_hole 4, template_var 2),
               template_var 1),
             template_var 0)),
         template_var 4))),
    ("Continuous_Time_Markov_Chain.exponential_eq_stretch",
     "0 < ?l ==>
      exponential ?l = distr (exponential 1) borel ((*) (1 / ?l))",
     template_implication
      ([template_inequation (less_than, template_hole 7, template_var 0)],
       template_equation
        (template_app (template_hole 5, template_var 0),
         template_app
          (template_app
            (template_app
              (template_hole 4,
               template_app (template_hole 5, template_hole 3)),
             template_hole 2),
           t_empty)))),
    ("Continuous_Time_Markov_Chain.merge_at_simp",
     "merge_at (?x ## ?\<omega>) ?j ?\<omega>' =
      (if fst ?x <= ?j then ?x ## merge_at ?\<omega> ?j ?\<omega>'
       else ?\<omega>')",
     template_equation
      (template_app
        (template_app
          (template_app
            (template_hole 4,
             template_app
              (template_app (template_hole 3, template_var 3),
               template_var 2)),
           template_var 1),
         template_var 0),
       template_app
        (template_app
          (template_app
            (template_hole 2,
             template_app
              (template_app
                (template_hole 1,
                 template_app (template_hole 0, template_var 3)),
               template_var 1)),
           template_app
            (template_app (template_hole 3, template_var 3),
             template_app
              (template_app
                (template_app (template_hole 4, template_var 2),
                 template_var 1),
               template_var 0))),
         template_var 0))),
    ("Continuous_Time_Markov_Chain.emeasure_exponential_Ioi_cutoff",
     "0 < ?l ==>
      emeasure (exponential ?l) {?x<..} = ennreal (exp (- max 0 ?x * ?l))",
     template_implication
      ([template_inequation (less_than, template_hole 9, template_var 1)],
       template_equation
        (template_app
          (template_app
            (template_hole 7,
             template_app (template_hole 6, template_var 1)),
           template_app (template_hole 5, template_var 0)),
         template_app
          (template_hole 4,
           template_app
            (template_hole 3,
             template_app
              (template_app
                (template_hole 2,
                 template_app
                  (template_hole 1,
                   template_app
                    (template_app (template_hole 0, template_hole 9),
                     template_var 0))),
               template_var 1)))))),
    ("Continuous_Time_Markov_Chain.trace_at_shift",
     "trace_at ?s (smap (%(t, s'). (t + ?t', s')) ?\<omega>) ?t =
      trace_at ?s ?\<omega> (?t - ?t')",
     template_equation
      (template_app
        (template_app
          (template_app (template_hole 5, template_var 3),
           template_app
            (template_app
              (template_hole 4, template_app (template_hole 3, t_empty)),
             template_var 1)),
         template_var 0),
       template_app
        (template_app
          (template_app (template_hole 5, template_var 3), template_var 1),
         template_app
          (template_app (template_hole 0, template_var 0),
           template_var 2)))),
    ("Continuous_Time_Markov_Chain.uniform_measure_exponential",
     "[| 0 < ?l; 0 <= ?t |]
      ==> uniform_measure (exponential ?l) {?t<..} =
          distr (exponential ?l) borel ((+) ?t)",
     template_implication
      ([template_inequation (less_than, template_hole 8, template_var 1),
        template_inequation (less_equals, template_hole 8, template_var 0)],
       template_equation
        (template_app
          (template_app
            (template_hole 5,
             template_app (template_hole 4, template_var 1)),
           template_app (template_hole 3, template_var 0)),
         template_app
          (template_app
            (template_app
              (template_hole 2,
               template_app (template_hole 4, template_var 1)),
             template_hole 1),
           template_app (template_hole 0, template_var 0))))),
    ("Continuous_Time_Markov_Chain.emeasure_exponential_Ioi",
     "[| 0 < ?l; 0 <= ?x |]
      ==> emeasure (exponential ?l) {?x<..} = ennreal (exp (- ?x * ?l))",
     template_implication
      ([template_inequation (less_than, template_hole 9, template_var 1),
        template_inequation (less_equals, template_hole 9, template_var 0)],
       template_equation
        (template_app
          (template_app
            (template_hole 6,
             template_app (template_hole 5, template_var 1)),
           template_app (template_hole 4, template_var 0)),
         template_app
          (template_hole 3,
           template_app
            (template_hole 2,
             template_app
              (template_app
                (template_hole 1,
                 template_app (template_hole 0, template_var 0)),
               template_var 1)))))),
    ("Continuous_Time_Markov_Chain.trace_at_eq",
     "trace_at ?s ?\<omega> ?j =
      (case sfirst (%x. ?j < fst (shd x)) ?\<omega> of
       enat i => (?s ## smap snd ?\<omega>) !! i)",
     template_equation
      (template_app
        (template_app
          (template_app (template_hole 10, template_var 2), template_var 1),
         template_var 0),
       template_app
        (template_app
          (template_app (template_hole 9, t_empty), template_hole 4),
         template_app
          (template_app (template_hole 3, t_empty), template_var 1)))),
    ("Continuous_Time_Markov_Chain.AE_PiM_exponential_suminf_infty",
     "[| !!n. 0 < ?R n; (\<Sum>n. ennreal (1 / ?R n)) = \<top> |]
      ==> AE \<omega> in Pi\<^sub>M UNIV
                          (%n. exponential
                                (?R n)). (\<Sum>n. ereal (\<omega> n)) =
   \<infinity>",
     template_implication
      ([template_predicate (template_app (template_hole 18, t_empty)),
        template_equation
         (template_app (template_hole 13, t_empty), template_hole 9)],
       template_predicate
        (
           template_app
            (template_app (template_hole 8, t_empty),
             template_app
              (template_hole 3,
               template_app
                (template_app (template_hole 2, template_hole 1), t_empty)))
           ))),
    ("Continuous_Time_Markov_Chain.emeasure_PiM_exponential_Ioi_sequence",
     "[| summable ?R; !!i. 0 < ?R i; 0 <= ?x |]
      ==> emeasure (Pi\<^sub>M UNIV (%i. exponential (?R i)))
           (UNIV \<rightarrow> {?x<..}) =
          ennreal (exp (- ?x * suminf ?R))",
     template_implication
      ([template_predicate
         (template_app (template_hole 16, template_var 1)),
        template_predicate (template_app (template_hole 15, t_empty)),
        template_inequation
         (less_equals, template_hole 13, template_var 0)],
       template_equation
        (template_app
          (template_app
            (template_hole 10,
             template_app
              (template_app (template_hole 9, template_hole 8), t_empty)),
           template_app
            (template_app (template_hole 6, template_hole 8), t_empty)),
         template_app
          (template_hole 4,
           template_app
            (template_hole 3,
             template_app
              (template_app
                (template_hole 2,
                 template_app (template_hole 1, template_var 0)),
               template_app (template_hole 0, template_var 1))))))),
    ("Continuous_Time_Markov_Chain.emeasure_PiM_exponential_Ioi_finite",
     "[| ?J <= ?I; finite ?J; !!i. i : ?I ==> 0 < ?R i; 0 <= ?x |]
      ==> emeasure (Pi\<^sub>M ?I (%i. exponential (?R i)))
           (prod_emb ?I (%i. exponential (?R i)) ?J
             (?J \<rightarrow>\<^sub>E {?x<..})) =
          ennreal (exp (- ?x * sum ?R ?J))",
     template_implication
      ([template_inequation (less_equals, template_var 3, template_var 2),
        template_predicate
         (template_app (template_hole 17, template_var 3)),
        template_predicate (template_app (template_hole 16, t_empty)),
        template_inequation
         (less_equals, template_hole 13, template_var 0)],
       template_equation
        (template_app
          (template_app
            (template_hole 10,
             template_app
              (template_app (template_hole 9, template_var 2), t_empty)),
           template_app
            (template_app
              (template_app
                (template_app (template_hole 7, template_var 2), t_empty),
               template_var 3),
             template_app
              (template_app (template_hole 6, template_var 3), t_empty))),
         template_app
          (template_hole 4,
           template_app
            (template_hole 3,
             template_app
              (template_app
                (template_hole 2,
                 template_app (template_hole 1, template_var 0)),
               template_app
                (template_app (template_hole 0, t_empty),
                 template_var 3))))))),
    ("Continuous_Time_Markov_Chain.emeasure_PiM_exponential_Ioi_countable",
     "[| ?J <= ?I; countable ?J; !!i. i : ?I ==> 0 < ?R i; 0 <= ?x;
         integrable (count_space ?J) ?R |]
      ==> emeasure (Pi\<^sub>M ?I (%i. exponential (?R i)))
           (prod_emb ?I (%i. exponential (?R i)) ?J
             (?J \<rightarrow>\<^sub>E {?x<..})) =
          ennreal (exp (- ?x * integral\<^sup>L (count_space ?J) ?R))",
     template_implication
      ([template_inequation (less_equals, template_var 3, template_var 2),
        template_predicate
         (template_app (template_hole 19, template_var 3)),
        template_predicate (template_app (template_hole 18, t_empty)),
        template_inequation (less_equals, template_hole 15, template_var 0),
        template_predicate
         (
            template_app
             (template_app
               (template_hole 13,
                template_app (template_hole 12, template_var 3)),
              template_var 1)
            )],
       template_equation
        (template_app
          (template_app
            (template_hole 10,
             template_app
              (template_app (template_hole 9, template_var 2), t_empty)),
           template_app
            (template_app
              (template_app
                (template_app (template_hole 7, template_var 2), t_empty),
               template_var 3),
             template_app
              (template_app (template_hole 6, template_var 3), t_empty))),
         template_app
          (template_hole 4,
           template_app
            (template_hole 3,
             template_app
              (template_app
                (template_hole 2,
                 template_app (template_hole 1, template_var 0)),
               template_app
                (template_app
                  (template_hole 0,
                   template_app (template_hole 12, template_var 3)),
                 t_empty)))))))]:
   (string * thm * template) list
### theory "Draft.Continuous_Time_Markov_ChainTemplates"
### 1.359s elapsed time, 2.055s cpu time, 0.736s GC time
val it = (): unit
