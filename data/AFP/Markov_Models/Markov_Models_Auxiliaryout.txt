Loading theory "HOL-Library.Function_Algebras" (required by "Draft.Markov_Models_AuxiliaryTemplates" via "Draft.ExtrEqs" via "HOL-Library.BigO")
Loading theory "Draft.Templates" (required by "Draft.Markov_Models_AuxiliaryTemplates" via "Draft.ExtrEqs")
Loading theory "Draft.Markov_Models_Auxiliary" (required by "Draft.Markov_Models_AuxiliaryTemplates")
instantiation
  fun :: (type, plus) plus
  plus_fun == plus :: ('a => 'b) => ('a => 'b) => 'a => 'b
instantiation
  fun :: (type, zero) zero
  zero_fun == zero_class.zero :: 'a => 'b
instantiation
  fun :: (type, times) times
  times_fun == times :: ('a => 'b) => ('a => 'b) => 'a => 'b
instantiation
  fun :: (type, one) one
  one_fun == one_class.one :: 'a => 'b
datatype template_term
=
     t_empty
   | template_app of template_term * template_term
   | template_hole of int
   | template_var of int
datatype sign
= equals | greater_equals | greater_than | less_equals | less_than
datatype template
=
     template_bimplication of template * template
   | template_dunno
   | template_equation of template_term * template_term
   | template_implication of template list * template
   | template_inequation of sign * template_term * template_term
   | template_negation of template
   | template_predicate of template_term
constructor t_empty: template_term
constructor template_app: template_term * template_term -> template_term
constructor template_hole: int -> template_term
constructor template_var: int -> template_term
constructor equals: sign
constructor greater_equals: sign
constructor greater_than: sign
constructor less_equals: sign
constructor less_than: sign
constructor template_bimplication: template * template -> template
constructor template_dunno: template
constructor template_equation: template_term * template_term -> template
constructor template_implication: template list * template -> template
constructor template_inequation:
   sign * template_term * template_term -> template
constructor template_negation: template -> template
constructor template_predicate: template_term -> template
val vfs = fn: term -> (indexname * typ) list * (string * typ) list
val indexOf = fn: ''a list -> ''a -> int -> int
val has_eq = fn: term -> bool
val term2template = fn:
   (indexname * typ) list -> (string * typ) list -> term -> template_term
val lemma2predicate = fn: term -> term -> template
val makeTemplatewithContext = fn: term -> term -> template
val lemma2template = fn: term -> template
val thm2template = fn: thm -> template
val tterm2string = fn: template_term -> string
val template2string = fn: template -> string
val t = "height ?t <= size ?t": thm
val th =
   Const ("HOL.Trueprop", "bool => prop") $
     (Const ("Orderings.ord_class.less_eq", "nat => nat => bool") $
       (Const ("Tree.height_class.height", "?'a tree => nat") $
         Var (("t", 0), "?'a tree")) $
       (Const ("Nat.size_class.size", "?'a tree => nat") $
         Var (("t", 0), "?'a tree"))):
   term
### theory "Draft.Templates"
### 0.070s elapsed time, 0.244s cpu time, 0.000s GC time
### theory "HOL-Library.Function_Algebras"
### 0.113s elapsed time, 0.328s cpu time, 0.000s GC time
Loading theory "HOL-Library.BigO" (required by "Draft.Markov_Models_AuxiliaryTemplates" via "Draft.ExtrEqs")
class order = preorder +
  assumes "order_antisym": "!!x y. [| x <= y; y <= x |] ==> x = y"
class linorder = order +
  assumes "linear": "!!x y. x <= y | y <= x"
### theory "HOL-Library.BigO"
### 0.594s elapsed time, 1.208s cpu time, 0.046s GC time
Loading theory "Draft.ExtrEqs" (required by "Draft.Markov_Models_AuxiliaryTemplates")
val eqpattern =
   Pattern
    (
       Const ("HOL.Trueprop", "bool => prop") $
         (Const ("HOL.eq", "?'a => ?'a => bool") $
           Var (("_dummy_", 1), "?'a") $ Var (("_dummy_", 2), "?'a"))
       ):
   term Find_Theorems.criterion
val badeqpattern = Pattern (Const ("Pure.eq", "?'a => ?'a => prop")):
   term Find_Theorems.criterion
val undefpattern =
   Pattern
    (
       Const ("HOL.Trueprop", "bool => prop") $
         (Const ("HOL.eq", "?'a => ?'a => bool") $
           Var (("_dummy_", 1), "?'a") $ Const ("HOL.undefined", "?'a"))
       ):
   term Find_Theorems.criterion
val thmpattern =
   Pattern
    (Const ("HOL.Trueprop", "bool => prop") $ Var (("_dummy_", 1), "bool")):
   term Find_Theorems.criterion
val badnames =
   ["*nitpick*", "*Nitpick*", "*full_exhaustive*", "*_def*", "Enum.finite*",
    "*Quickcheck*", "ATP*", "*Nunchaku*", "*Code*", "*BNF*", "*SMT*",
    "*.*.*"]:
   string list
val unwanted_names =
   [(false, Name "*nitpick*"), (false, Name "*Nitpick*"),
    (false, Name "*full_exhaustive*"), (false, Name "*_def*"),
    (false, Name "Enum.finite*"), (false, Name "*Quickcheck*"),
    (false, Name "ATP*"), (false, Name "*Nunchaku*"),
    (false, Name "*Code*"), (false, Name "*BNF*"), (false, Name "*SMT*"),
    (false, Name "*.*.*")]:
   (bool * term Find_Theorems.criterion) list
val has_vars = fn: term -> bool
val get_all_eqs = fn: string -> Proof.context -> (string * thm) list
val get_all_thms = fn: string -> Proof.context -> (string * thm) list
val get_noneq_thms = fn: string -> Proof.context -> (string * thm) list
val template_eqs = fn:
   string -> Proof.context -> (string * thm * template) list
val template_thms = fn:
   string -> Proof.context -> (string * thm * template) list
### theory "Draft.ExtrEqs"
### 0.518s elapsed time, 1.077s cpu time, 0.122s GC time
consts
  eexp :: "ereal => ennreal"
### theory "Draft.Markov_Models_Auxiliary"
### 1.537s elapsed time, 2.985s cpu time, 0.244s GC time
Loading theory "Draft.Markov_Models_AuxiliaryTemplates"
val templateLemmas =
   [("Markov_Models_Auxiliary.inverse_inverse_ennreal",
     "inverse (inverse ?x) = ?x",
     template_equation
      (template_app
        (template_hole 0, template_app (template_hole 0, template_var 0)),
       template_var 0)),
    ("Markov_Models_Auxiliary.convergent_minus_iff_ereal",
     "convergent (%x. - ?f x) = convergent ?f",
     template_equation
      (template_app (template_hole 1, t_empty),
       template_app (template_hole 1, template_var 0))),
    ("Markov_Models_Auxiliary.exp_eq_0_iff",
     "(eexp ?x = 0) = (?x = - \<infinity>)",
     template_bimplication
      (template_equation
        (template_app (template_hole 4, template_var 0), template_hole 3),
       template_equation
        (template_var 0, template_app (template_hole 1, template_hole 0)))),
    ("Markov_Models_Auxiliary.eexp_inj", "(eexp ?x = eexp ?y) = (?x = ?y)",
     template_bimplication
      (template_equation
        (template_app (template_hole 1, template_var 1),
         template_app (template_hole 1, template_var 0)),
       template_equation (template_var 1, template_var 0))),
    ("Markov_Models_Auxiliary.eexp_strict_mono",
     "(eexp ?x < eexp ?y) = (?x < ?y)",
     template_equation
      (template_app
        (template_app
          (template_hole 2, template_app (template_hole 1, template_var 1)),
         template_app (template_hole 1, template_var 0)),
       template_app
        (template_app (template_hole 0, template_var 1), template_var 0))),
    ("Markov_Models_Auxiliary.ennreal_inverse_le",
     "(inverse ?x <= inverse ?y) = (?y <= ?x)",
     template_equation
      (template_app
        (template_app
          (template_hole 1, template_app (template_hole 0, template_var 1)),
         template_app (template_hole 0, template_var 0)),
       template_app
        (template_app (template_hole 1, template_var 0), template_var 1))),
    ("Markov_Models_Auxiliary.eexp_mono",
     "(eexp ?x <= eexp ?y) = (?x <= ?y)",
     template_equation
      (template_app
        (template_app
          (template_hole 2, template_app (template_hole 1, template_var 1)),
         template_app (template_hole 1, template_var 0)),
       template_app
        (template_app (template_hole 0, template_var 1), template_var 0))),
    ("Markov_Models_Auxiliary.inf_continuous_nxt",
     "inf_continuous ?P ==> inf_continuous (%x. nxt (?P x) ?\<omega>)",
     template_implication
      ([template_predicate
         (template_app (template_hole 2, template_var 1))],
       template_predicate (template_app (template_hole 1, t_empty)))),
    ("Markov_Models_Auxiliary.sup_continuous_nxt",
     "sup_continuous ?P ==> sup_continuous (%x. nxt (?P x) ?\<omega>)",
     template_implication
      ([template_predicate
         (template_app (template_hole 2, template_var 1))],
       template_predicate (template_app (template_hole 1, t_empty)))),
    ("Markov_Models_Auxiliary.continuous_on_eexp",
     "continuous_on ?A ?f ==> continuous_on ?A (%x. eexp (?f x))",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 2, template_var 1),
              template_var 0)
            )],
       template_predicate
        (
           template_app
            (template_app (template_hole 1, template_var 1), t_empty)
           ))),
    ("Markov_Models_Auxiliary.lfp_arg",
     "(%t. lfp (?F t)) = lfp (%x t. ?F t (x t))",
     template_equation (t_empty, template_app (template_hole 0, t_empty))),
    ("Markov_Models_Auxiliary.lfp_upperbound",
     "(!!y. ?x <= ?f y) ==> ?x <= lfp ?f",
     template_implication
      ([template_predicate (template_app (template_hole 3, t_empty))],
       template_inequation
        (less_equals, template_var 1,
         template_app (template_hole 0, template_var 0)))),
    ("Markov_Models_Auxiliary.all_Suc_split",
     "(ALL i. ?P i) = (?P 0 & (ALL i. ?P (Suc i)))",
     template_equation
      (template_app (template_hole 3, t_empty),
       template_app
        (template_app
          (template_hole 2, template_app (template_var 0, template_hole 1)),
         template_app (template_hole 3, t_empty)))),
    ("Markov_Models_Auxiliary.scount_eq_emeasure",
     "ennreal_of_enat (scount ?P ?\<omega>) =
      emeasure (count_space UNIV) {i. ?P (sdrop i ?\<omega>)}",
     template_equation
      (template_app
        (template_hole 6,
         template_app
          (template_app (template_hole 5, template_var 1), template_var 0)),
       template_app
        (template_app
          (template_hole 4,
           template_app (template_hole 3, template_hole 2)),
         template_app (template_hole 1, t_empty)))),
    ("Markov_Models_Auxiliary.sum_Pinfty",
     "(sum ?f ?I = \<infinity>) =
      (finite ?I & (EX i:?I. ?f i = \<infinity>))",
     template_equation
      (template_app
        (template_app
          (template_hole 5,
           template_app
            (template_app (template_hole 4, template_var 1),
             template_var 0)),
         template_hole 3),
       template_app
        (template_app
          (template_hole 2, template_app (template_hole 1, template_var 0)),
         template_app
          (template_app (template_hole 0, template_var 0), t_empty)))),
    ("Markov_Models_Auxiliary.tendsto_eexp",
     "(?f \<longlongrightarrow> ?x) ?F ==>
      ((%x. eexp (?f x)) \<longlongrightarrow> eexp ?x) ?F",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app (template_hole 4, template_var 2),
                template_app (template_hole 3, template_var 1)),
              template_var 0)
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_app (template_hole 2, t_empty),
               template_app
                (template_hole 0,
                 template_app (template_hole 1, template_var 1))),
             template_var 0)
           ))),
    ("Markov_Models_Auxiliary.mcont2mcont_ennreal_of_enat",
     "mcont ?lub ?ord Sup (<=) ?f ==>
      mcont ?lub ?ord Sup (<=) (%x. ennreal_of_enat (?f x))",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_app
                   (template_app (template_hole 6, template_var 2),
                    template_var 1),
                  template_hole 5),
                template_hole 4),
              template_var 0)
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_app
                (template_app
                  (template_app (template_hole 3, template_var 2),
                   template_var 1),
                 template_hole 2),
               template_hole 1),
             t_empty)
           ))),
    ("Markov_Models_Auxiliary.measurable_scount",
     "Measurable.pred (stream_space ?M) ?P ==>
      scount ?P : stream_space ?M \<rightarrow>\<^sub>M count_space UNIV",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 9, template_var 1),
              template_app
               (template_app
                 (template_hole 8,
                  template_app (template_hole 7, template_var 0)),
                template_app (template_hole 6, template_hole 5)))
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 4,
               template_app (template_hole 3, template_var 1)),
             template_app
              (template_app
                (template_hole 2,
                 template_app (template_hole 7, template_var 0)),
               template_app (template_hole 1, template_hole 0)))
           ))),
    ("Markov_Models_Auxiliary.measurable_sfirst",
     "Measurable.pred (stream_space ?M) ?P ==>
      sfirst ?P : stream_space ?M \<rightarrow>\<^sub>M count_space UNIV",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 9, template_var 1),
              template_app
               (template_app
                 (template_hole 8,
                  template_app (template_hole 7, template_var 0)),
                template_app (template_hole 6, template_hole 5)))
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 4,
               template_app (template_hole 3, template_var 1)),
             template_app
              (template_app
                (template_hole 2,
                 template_app (template_hole 7, template_var 0)),
               template_app (template_hole 1, template_hole 0)))
           ))),
    ("Markov_Models_Auxiliary.summable_iff_convergent_prod",
     "(!!i. 0 <= ?p i) ==>
      summable ?p = convergent (%n. PROD i<n. ?p i + 1)",
     template_implication
      ([template_predicate (template_app (template_hole 10, t_empty))],
       template_equation
        (template_app (template_hole 5, template_var 0),
         template_app (template_hole 4, t_empty)))),
    ("Markov_Models_Auxiliary.lfp_pair",
     "lfp (%f (a, b). ?F (%a b. f (a, b)) a b) (?a, ?b) = lfp ?F ?a ?b",
     template_equation
      (template_app
        (template_app (template_hole 3, t_empty),
         template_app
          (template_app (template_hole 1, template_var 1), template_var 0)),
       template_app
        (template_app
          (template_app (template_hole 0, template_var 2), template_var 1),
         template_var 0))),
    ("Markov_Models_Auxiliary.inf_continuous_suntil_disj",
     "[| inf_continuous ?Q; !!x \<omega>. ~ (?P \<omega> & ?Q x \<omega>) |]
      ==> inf_continuous (%x. ?P suntil ?Q x)",
     template_implication
      ([template_predicate (template_app (template_hole 5, template_var 1)),
        template_predicate (template_app (template_hole 4, t_empty))],
       template_predicate (template_app (template_hole 5, t_empty)))),
    ("Markov_Models_Auxiliary.summable_minus_ereal",
     "[| ~ {- \<infinity>, \<infinity>} <= range ?f; summable ?f |]
      ==> summable (%n. - ?f n)",
     template_implication
      ([template_negation
         (
            template_inequation
             (less_equals,
              template_app
               (template_app
                 (template_hole 6,
                  template_app (template_hole 5, template_hole 4)),
                template_app
                 (template_app (template_hole 6, template_hole 4),
                  template_hole 3)),
              template_app
               (template_app (template_hole 2, template_var 0),
                template_hole 1))
            ),
        template_predicate (template_app (template_hole 0, t_empty))],
       template_predicate (template_app (template_hole 0, t_empty)))),
    ("Markov_Models_Auxiliary.sums_minus_ereal",
     "[| ~ {- \<infinity>, \<infinity>} <= range ?f; (%n. - ?f n) sums ?x |]
      ==> ?f sums - ?x",
     template_implication
      ([template_negation
         (
            template_inequation
             (less_equals,
              template_app
               (template_app
                 (template_hole 6,
                  template_app (template_hole 5, template_hole 4)),
                template_app
                 (template_app (template_hole 6, template_hole 4),
                  template_hole 3)),
              template_app
               (template_app (template_hole 2, template_var 1),
                template_hole 1))
            ),
        template_predicate
         (
            template_app
             (template_app (template_hole 0, t_empty), template_var 0)
            )],
       template_predicate
        (
           template_app
            (template_app (template_hole 0, template_var 1),
             template_app (template_hole 5, template_var 0))
           ))),
    ("Markov_Models_Auxiliary.setsum_negf_ereal",
     "~ {- \<infinity>, \<infinity>} <= ?f ` ?I ==>
      (SUM i:?I. - ?f i) = - sum ?f ?I",
     template_implication
      ([template_negation
         (
            template_inequation
             (less_equals,
              template_app
               (template_app
                 (template_hole 6,
                  template_app (template_hole 5, template_hole 4)),
                template_app
                 (template_app (template_hole 6, template_hole 4),
                  template_hole 3)),
              template_app
               (template_app (template_hole 2, template_var 1),
                template_var 0))
            )],
       template_equation
        (template_app
          (template_app (template_hole 0, t_empty), template_var 0),
         template_app
          (template_hole 5,
           template_app
            (template_app (template_hole 0, t_empty), template_var 0))))),
    ("Markov_Models_Auxiliary.suminf_minus_ereal",
     "[| ~ {- \<infinity>, \<infinity>} <= range ?f; summable ?f |]
      ==> (\<Sum>n. - ?f n) = - suminf ?f",
     template_implication
      ([template_negation
         (
            template_inequation
             (less_equals,
              template_app
               (template_app
                 (template_hole 8,
                  template_app (template_hole 7, template_hole 6)),
                template_app
                 (template_app (template_hole 8, template_hole 6),
                  template_hole 5)),
              template_app
               (template_app (template_hole 4, template_var 0),
                template_hole 3))
            ),
        template_predicate
         (template_app (template_hole 2, template_var 0))],
       template_equation
        (template_app (template_hole 0, t_empty),
         template_app
          (template_hole 7,
           template_app (template_hole 0, template_var 0))))),
    ("Markov_Models_Auxiliary.sum_Minfty",
     "(sum ?f ?I = - \<infinity>) =
      (finite ?I &
       ~ (EX i:?I. ?f i = \<infinity>) & (EX i:?I. ?f i = - \<infinity>))",
     template_equation
      (template_app
        (template_app
          (template_hole 7,
           template_app
            (template_app (template_hole 6, template_var 1),
             template_var 0)),
         template_app (template_hole 5, template_hole 4)),
       template_app
        (template_app
          (template_hole 3, template_app (template_hole 2, template_var 0)),
         template_app
          (template_app
            (template_hole 3,
             template_app
              (template_hole 1,
               template_app
                (template_app (template_hole 0, template_var 0), t_empty))),
           template_app
            (template_app (template_hole 0, template_var 0), t_empty))))),
    ("Markov_Models_Auxiliary.withI",
     "[| (!!x. ~ ?P x) ==> ?Q ?d; !!x. ?P x ==> ?Q (?f x) |]
      ==> ?Q (with ?P ?f ?d)",
     template_implication
      ([template_implication
         ([template_predicate (template_app (template_hole 3, t_empty))],
          template_predicate
           (template_app (template_var 2, template_var 1))),
        template_predicate (template_app (template_hole 3, t_empty))],
       template_predicate
        (
           template_app
            (template_var 2,
             template_app
              (template_app
                (template_app (template_hole 0, template_var 3),
                 template_var 0),
               template_var 1))
           ))),
    ("Markov_Models_Auxiliary.sum_plus_one_le_prod_plus_one",
     "(!!i. i : ?I ==> (0::?'b) <= ?p i) ==>
      sum ?p ?I + (1::?'b) <= (PROD i:?I. ?p i + (1::?'b))",
     template_implication
      ([template_predicate (template_app (template_hole 8, t_empty))],
       template_inequation
        (less_equals,
         template_app
          (template_app
            (template_hole 3,
             template_app
              (template_app (template_hole 2, t_empty), template_var 1)),
           template_hole 1),
         template_app
          (template_app (template_hole 0, t_empty), template_var 1)))),
    ("Markov_Models_Auxiliary.minus_add_eq_ereal",
     "~ (?a = \<infinity> & ?b = - \<infinity> |
         ?a = - \<infinity> & ?b = \<infinity>) ==>
      - (?a + ?b) = - ?a - ?b",
     template_implication
      ([template_negation
         (
            template_predicate
             (
                template_app
                 (template_app
                   (template_hole 6,
                    template_app
                     (template_app
                       (template_hole 5,
                        template_app
                         (template_app (template_hole 4, template_var 1),
                          template_hole 3)),
                      template_app
                       (template_app (template_hole 4, template_var 0),
                        template_app (template_hole 2, template_hole 3)))),
                  template_app
                   (template_app
                     (template_hole 5,
                      template_app
                       (template_app (template_hole 4, template_var 1),
                        template_app (template_hole 2, template_hole 3))),
                    template_app
                     (template_app (template_hole 4, template_var 0),
                      template_hole 3)))
                )
            )],
       template_equation
        (template_app
          (template_hole 2,
           template_app
            (template_app (template_hole 1, template_var 1),
             template_var 0)),
         template_app
          (template_app
            (template_hole 0,
             template_app (template_hole 2, template_var 1)),
           template_var 0)))),
    ("Markov_Models_Auxiliary.prod_add_distrib",
     "finite ?I ==>
      (PROD i:?I. ?f i + ?g i) =
      (SUM J:Pow ?I. prod ?f J * prod ?g (?I - J))",
     template_implication
      ([template_predicate
         (template_app (template_hole 7, template_var 2))],
       template_equation
        (template_app
          (template_app (template_hole 5, t_empty), template_var 2),
         template_app
          (template_app (template_hole 3, t_empty),
           template_app (template_hole 0, template_var 2))))),
    ("Markov_Models_Auxiliary.eexp_add",
     "~ (?x = \<infinity> & ?y = - \<infinity> |
         ?x = - \<infinity> & ?y = \<infinity>) ==>
      eexp (?x + ?y) = eexp ?x * eexp ?y",
     template_implication
      ([template_negation
         (
            template_predicate
             (
                template_app
                 (template_app
                   (template_hole 8,
                    template_app
                     (template_app
                       (template_hole 7,
                        template_app
                         (template_app (template_hole 6, template_var 1),
                          template_hole 5)),
                      template_app
                       (template_app (template_hole 6, template_var 0),
                        template_app (template_hole 4, template_hole 5)))),
                  template_app
                   (template_app
                     (template_hole 7,
                      template_app
                       (template_app (template_hole 6, template_var 1),
                        template_app (template_hole 4, template_hole 5))),
                    template_app
                     (template_app (template_hole 6, template_var 0),
                      template_hole 5)))
                )
            )],
       template_equation
        (template_app
          (template_hole 2,
           template_app
            (template_app (template_hole 1, template_var 1),
             template_var 0)),
         template_app
          (template_app
            (template_hole 0,
             template_app (template_hole 2, template_var 1)),
           template_app (template_hole 2, template_var 0))))),
    ("Markov_Models_Auxiliary.measurable_sfirst2",
     "Measurable.pred (?N \<Otimes>\<^sub>M stream_space ?M)
       (%(x, \<omega>). ?P x \<omega>) ==>
      (%(x, \<omega>). sfirst (?P x) \<omega>)
      : ?N \<Otimes>\<^sub>M stream_space ?M \<rightarrow>\<^sub>M
        count_space UNIV",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_hole 12, template_app (template_hole 11, t_empty)),
              template_app
               (template_app
                 (template_hole 10,
                  template_app
                   (template_app (template_hole 9, template_var 1),
                    template_app (template_hole 8, template_var 0))),
                template_app (template_hole 7, template_hole 6)))
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 5, template_app (template_hole 4, t_empty)),
             template_app
              (template_app
                (template_hole 2,
                 template_app
                  (template_app (template_hole 9, template_var 1),
                   template_app (template_hole 8, template_var 0))),
               template_app (template_hole 1, template_hole 0)))
           ))),
    ("Markov_Models_Auxiliary.eexp_sum",
     "~ (EX i:?I. EX j:?I. ?f i = - \<infinity> & ?f j = \<infinity>) ==>
      eexp (sum ?f ?I) = (PROD i:?I. eexp (?f i))",
     template_implication
      ([template_negation
         (
            template_predicate
             (
                template_app
                 (template_app (template_hole 8, template_var 1), t_empty)
                )
            )],
       template_equation
        (template_app
          (template_hole 2,
           template_app
            (template_app (template_hole 1, t_empty), template_var 1)),
         template_app
          (template_app (template_hole 0, t_empty), template_var 1)))),
    ("Markov_Models_Auxiliary.nn_integral_stretch",
     "[| ?f : borel_measurable borel; ?c ~= 0 |]
      ==> \<integral>\<^sup>+ x. ?f (?c * x) \<partial>lborel =
          ennreal (1 / \<bar>?c\<bar>) * integral\<^sup>N lborel ?f",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 15, template_var 1),
              template_app
               (template_app (template_hole 14, template_hole 13),
                template_hole 12))
            ),
        template_negation
         (template_equation (template_var 0, template_hole 9))],
       template_equation
        (template_app
          (template_app (template_hole 7, template_hole 6), t_empty),
         template_app
          (template_app
            (template_hole 4,
             template_app
              (template_hole 3,
               template_app
                (template_app (template_hole 2, template_hole 1),
                 template_app (template_hole 0, template_var 0)))),
           template_app
            (template_app (template_hole 7, template_hole 6), t_empty))))),
    ("Markov_Models_Auxiliary.eexp_suminf",
     "[| ~ {- \<infinity>, \<infinity>} <= range ?f; summable ?f |]
      ==> (%n. PROD i<n. eexp (?f i))
          \<longlonglongrightarrow> eexp (\<Sum>i. ?f i)",
     template_implication
      ([template_negation
         (
            template_inequation
             (less_equals,
              template_app
               (template_app
                 (template_hole 13,
                  template_app (template_hole 12, template_hole 11)),
                template_app
                 (template_app (template_hole 13, template_hole 11),
                  template_hole 10)),
              template_app
               (template_app (template_hole 9, template_var 0),
                template_hole 8))
            ),
        template_predicate
         (template_app (template_hole 7, template_var 0))],
       template_predicate
        (
           template_app
            (template_app
              (template_app (template_hole 6, t_empty),
               template_app
                (template_hole 2,
                 template_app
                  (template_hole 4,
                   template_app (template_hole 1, t_empty)))),
             template_hole 0)
           ))),
    ("Markov_Models_Auxiliary.continuous_onI_antimono",
     "[| open (?f ` ?A);
         !!x y. [| x : ?A; y : ?A; x <= y |] ==> ?f y <= ?f x |]
      ==> continuous_on ?A ?f",
     template_implication
      ([template_predicate
         (
            template_app
             (template_hole 6,
              template_app
               (template_app (template_hole 5, template_var 1),
                template_var 0))
            ),
        template_predicate (template_app (template_hole 4, t_empty))],
       template_predicate
        (
           template_app
            (template_app (template_hole 0, template_var 0), template_var 1)
           ))),
    ("Markov_Models_Auxiliary.measurable_sfirst2'",
     "[| ?f : ?N \<rightarrow>\<^sub>M stream_space ?M;
         Measurable.pred (?N \<Otimes>\<^sub>M stream_space ?M)
          (%x. ?P (fst x) (snd x)) |]
      ==> (%x. sfirst (?P x) (?f x))
          : ?N \<rightarrow>\<^sub>M count_space UNIV",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 14, template_var 3),
              template_app
               (template_app (template_hole 13, template_var 2),
                template_app (template_hole 12, template_var 1)))
            ),
        template_predicate
         (
            template_app
             (template_app (template_hole 11, t_empty),
              template_app
               (template_app
                 (template_hole 8,
                  template_app
                   (template_app (template_hole 7, template_var 2),
                    template_app (template_hole 12, template_var 1))),
                template_app (template_hole 6, template_hole 5)))
            )],
       template_predicate
        (
           template_app
            (template_app (template_hole 4, t_empty),
             template_app
              (template_app (template_hole 2, template_var 2),
               template_app (template_hole 1, template_hole 0)))
           ))),
    ("Markov_Models_Auxiliary.prod_sum_distrib",
     "[| finite ?I; !!i. i : ?I ==> finite (?J i) |]
      ==> (PROD i:?I. sum (?f i) (?J i)) =
          (SUM m:Pi\<^sub>E ?I ?J. PROD i:?I. ?f i (m i))",
     template_implication
      ([template_predicate (template_app (template_hole 8, template_var 2)),
        template_predicate (template_app (template_hole 7, t_empty))],
       template_equation
        (template_app
          (template_app (template_hole 3, t_empty), template_var 2),
         template_app
          (template_app (template_hole 1, t_empty),
           template_app
            (template_app (template_hole 0, template_var 2),
             template_var 1))))),
    ("Markov_Models_Auxiliary.unique_les",
     "[| ?s : ?S; (UN s:?S. set_pmf (?K s)) <= ?S Un ?N;
         !!s. s : ?S ==> integrable (measure_pmf (?K s)) ?l1.0;
         !!s. s : ?S ==> integrable (measure_pmf (?K s)) ?l2.0;
         !!s. s : ?S ==> EX t:?N. (s, t) : (SIGMA x:UNIV. set_pmf (?K x))^*;
         !!s. s : ?S ==>
              ?l1.0 s = measure_pmf.expectation (?K s) ?l1.0 + ?c s;
         !!s. s : ?S ==>
              ?l2.0 s = measure_pmf.expectation (?K s) ?l2.0 + ?c s;
         !!s. s : ?N ==> ?l2.0 s = ?l1.0 s;
         finite ((%x. ?l2.0 x - ?l1.0 x) ` (?S Un ?N)) |]
      ==> ?l2.0 ?s = ?l1.0 ?s",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 20, template_var 6),
              template_var 5)
            ),
        template_inequation
         (less_equals,
          template_app
           (template_hole 18,
            template_app
             (template_app (template_hole 17, t_empty), template_var 5)),
          template_app
           (template_app (template_hole 15, template_var 5),
            template_var 3)),
        template_predicate (template_app (template_hole 14, t_empty)),
        template_predicate (template_app (template_hole 14, t_empty)),
        template_predicate (template_app (template_hole 14, t_empty)),
        template_predicate (template_app (template_hole 14, t_empty)),
        template_predicate (template_app (template_hole 14, t_empty)),
        template_predicate (template_app (template_hole 14, t_empty)),
        template_predicate
         (
            template_app
             (template_hole 2,
              template_app
               (template_app (template_hole 1, t_empty),
                template_app
                 (template_app (template_hole 15, template_var 5),
                  template_var 3)))
            )],
       template_equation
        (template_app (template_var 1, template_var 6),
         template_app (template_var 2, template_var 6)))),
    ("Markov_Models_Auxiliary.mono_les",
     "[| ?s : ?S; (UN s:?S. set_pmf (?K s)) <= ?S Un ?N;
         !!s. s : ?S ==> integrable (measure_pmf (?K s)) ?l1.0;
         !!s. s : ?S ==> integrable (measure_pmf (?K s)) ?l2.0;
         !!s. s : ?S ==> EX t:?N. (s, t) : (SIGMA x:UNIV. set_pmf (?K x))^*;
         !!s. s : ?S ==>
              measure_pmf.expectation (?K s) ?l1.0 + ?c s <= ?l1.0 s;
         !!s. s : ?S ==>
              ?l2.0 s <= measure_pmf.expectation (?K s) ?l2.0 + ?c s;
         !!s. s : ?N ==> ?l2.0 s <= ?l1.0 s;
         finite ((%x. ?l2.0 x - ?l1.0 x) ` (?S Un ?N)) |]
      ==> ?l2.0 ?s <= ?l1.0 ?s",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 20, template_var 6),
              template_var 5)
            ),
        template_inequation
         (less_equals,
          template_app
           (template_hole 18,
            template_app
             (template_app (template_hole 17, t_empty), template_var 5)),
          template_app
           (template_app (template_hole 15, template_var 5),
            template_var 3)),
        template_predicate (template_app (template_hole 14, t_empty)),
        template_predicate (template_app (template_hole 14, t_empty)),
        template_predicate (template_app (template_hole 14, t_empty)),
        template_predicate (template_app (template_hole 14, t_empty)),
        template_predicate (template_app (template_hole 14, t_empty)),
        template_predicate (template_app (template_hole 14, t_empty)),
        template_predicate
         (
            template_app
             (template_hole 2,
              template_app
               (template_app (template_hole 1, t_empty),
                template_app
                 (template_app (template_hole 15, template_var 5),
                  template_var 3)))
            )],
       template_inequation
        (less_equals, template_app (template_var 1, template_var 6),
         template_app (template_var 2, template_var 6))))]:
   (string * thm * template) list
### theory "Draft.Markov_Models_AuxiliaryTemplates"
### 1.403s elapsed time, 2.018s cpu time, 0.584s GC time
val it = (): unit
