Loading theory "Draft.Markov_Models_Auxiliary" (required by "Draft.Discrete_Time_Markov_ProcessTemplates" via "Draft.Discrete_Time_Markov_Process")
Loading theory "HOL-Library.Function_Algebras" (required by "Draft.Discrete_Time_Markov_ProcessTemplates" via "Draft.ExtrEqs" via "HOL-Library.BigO")
Loading theory "Draft.Templates" (required by "Draft.Discrete_Time_Markov_ProcessTemplates" via "Draft.ExtrEqs")
instantiation
  fun :: (type, plus) plus
  plus_fun == plus :: ('a => 'b) => ('a => 'b) => 'a => 'b
instantiation
  fun :: (type, zero) zero
  zero_fun == zero_class.zero :: 'a => 'b
instantiation
  fun :: (type, times) times
  times_fun == times :: ('a => 'b) => ('a => 'b) => 'a => 'b
instantiation
  fun :: (type, one) one
  one_fun == one_class.one :: 'a => 'b
datatype template_term
=
     t_empty
   | template_app of template_term * template_term
   | template_hole of int
   | template_var of int
datatype sign
= equals | greater_equals | greater_than | less_equals | less_than
datatype template
=
     template_bimplication of template * template
   | template_dunno
   | template_equation of template_term * template_term
   | template_implication of template list * template
   | template_inequation of sign * template_term * template_term
   | template_negation of template
   | template_predicate of template_term
constructor t_empty: template_term
constructor template_app: template_term * template_term -> template_term
constructor template_hole: int -> template_term
constructor template_var: int -> template_term
constructor equals: sign
constructor greater_equals: sign
constructor greater_than: sign
constructor less_equals: sign
constructor less_than: sign
constructor template_bimplication: template * template -> template
constructor template_dunno: template
constructor template_equation: template_term * template_term -> template
constructor template_implication: template list * template -> template
constructor template_inequation:
   sign * template_term * template_term -> template
constructor template_negation: template -> template
constructor template_predicate: template_term -> template
val vfs = fn: term -> (indexname * typ) list * (string * typ) list
val indexOf = fn: ''a list -> ''a -> int -> int
val has_eq = fn: term -> bool
val term2template = fn:
   (indexname * typ) list -> (string * typ) list -> term -> template_term
val lemma2predicate = fn: term -> term -> template
val makeTemplatewithContext = fn: term -> term -> template
val lemma2template = fn: term -> template
val thm2template = fn: thm -> template
val tterm2string = fn: template_term -> string
val template2string = fn: template -> string
val t = "height ?t <= size ?t": thm
val th =
   Const ("HOL.Trueprop", "bool => prop") $
     (Const ("Orderings.ord_class.less_eq", "nat => nat => bool") $
       (Const ("Tree.height_class.height", "?'a tree => nat") $
         Var (("t", 0), "?'a tree")) $
       (Const ("Nat.size_class.size", "?'a tree => nat") $
         Var (("t", 0), "?'a tree"))):
   term
### theory "Draft.Templates"
### 0.085s elapsed time, 0.297s cpu time, 0.000s GC time
### theory "HOL-Library.Function_Algebras"
### 0.122s elapsed time, 0.370s cpu time, 0.000s GC time
Loading theory "HOL-Library.BigO" (required by "Draft.Discrete_Time_Markov_ProcessTemplates" via "Draft.ExtrEqs")
class order = preorder +
  assumes "order_antisym": "!!x y. [| x <= y; y <= x |] ==> x = y"
class linorder = order +
  assumes "linear": "!!x y. x <= y | y <= x"
### theory "HOL-Library.BigO"
### 0.585s elapsed time, 1.192s cpu time, 0.047s GC time
Loading theory "Draft.ExtrEqs" (required by "Draft.Discrete_Time_Markov_ProcessTemplates")
val eqpattern =
   Pattern
    (
       Const ("HOL.Trueprop", "bool => prop") $
         (Const ("HOL.eq", "?'a => ?'a => bool") $
           Var (("_dummy_", 1), "?'a") $ Var (("_dummy_", 2), "?'a"))
       ):
   term Find_Theorems.criterion
val badeqpattern = Pattern (Const ("Pure.eq", "?'a => ?'a => prop")):
   term Find_Theorems.criterion
val undefpattern =
   Pattern
    (
       Const ("HOL.Trueprop", "bool => prop") $
         (Const ("HOL.eq", "?'a => ?'a => bool") $
           Var (("_dummy_", 1), "?'a") $ Const ("HOL.undefined", "?'a"))
       ):
   term Find_Theorems.criterion
val thmpattern =
   Pattern
    (Const ("HOL.Trueprop", "bool => prop") $ Var (("_dummy_", 1), "bool")):
   term Find_Theorems.criterion
val badnames =
   ["*nitpick*", "*Nitpick*", "*full_exhaustive*", "*_def*", "Enum.finite*",
    "*Quickcheck*", "ATP*", "*Nunchaku*", "*Code*", "*BNF*", "*SMT*",
    "*.*.*"]:
   string list
val unwanted_names =
   [(false, Name "*nitpick*"), (false, Name "*Nitpick*"),
    (false, Name "*full_exhaustive*"), (false, Name "*_def*"),
    (false, Name "Enum.finite*"), (false, Name "*Quickcheck*"),
    (false, Name "ATP*"), (false, Name "*Nunchaku*"),
    (false, Name "*Code*"), (false, Name "*BNF*"), (false, Name "*SMT*"),
    (false, Name "*.*.*")]:
   (bool * term Find_Theorems.criterion) list
val has_vars = fn: term -> bool
val get_all_eqs = fn: string -> Proof.context -> (string * thm) list
val get_all_thms = fn: string -> Proof.context -> (string * thm) list
val get_noneq_thms = fn: string -> Proof.context -> (string * thm) list
val template_eqs = fn:
   string -> Proof.context -> (string * thm * template) list
val template_thms = fn:
   string -> Proof.context -> (string * thm * template) list
### theory "Draft.ExtrEqs"
### 0.503s elapsed time, 1.044s cpu time, 0.119s GC time
consts
  eexp :: "ereal => ennreal"
### theory "Draft.Markov_Models_Auxiliary"
### 1.521s elapsed time, 2.976s cpu time, 0.236s GC time
Loading theory "Draft.Discrete_Time_Markov_Process" (required by "Draft.Discrete_Time_Markov_ProcessTemplates")
locale discrete_Markov_process
  fixes M :: "'a measure"
    and K :: "'a => 'a measure"
  assumes "discrete_Markov_process M K"
locale discrete_Markov_process
  fixes M :: "'a measure"
    and K :: "'a => 'a measure"
  assumes "discrete_Markov_process M K"
### theory "Draft.Discrete_Time_Markov_Process"
### 0.198s elapsed time, 0.207s cpu time, 0.000s GC time
Loading theory "Draft.Discrete_Time_Markov_ProcessTemplates"
val templateLemmas =
   [("Discrete_Time_Markov_Process.space_stream_filtration",
     "space (stream_filtration ?M ?n) = space (stream_space ?M)",
     template_equation
      (template_app
        (template_hole 2,
         template_app
          (template_app (template_hole 1, template_var 1), template_var 0)),
       template_app
        (template_hole 2, template_app (template_hole 0, template_var 1)))),
    ("Discrete_Time_Markov_Process.sets_stream_filteration_le_stream_space",
     "sets (stream_filtration ?M ?n) <= sets (stream_space ?M)",
     template_inequation
      (less_equals,
       template_app
        (template_hole 2,
         template_app
          (template_app (template_hole 1, template_var 1), template_var 0)),
       template_app
        (template_hole 2, template_app (template_hole 0, template_var 1)))),
    ("Discrete_Time_Markov_Process.measurable_stopping_time_stream",
     "stopping_time (stream_filtration ?M) ?T ==>
      ?T : stream_space ?M \<rightarrow>\<^sub>M count_space UNIV",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_hole 6,
                template_app (template_hole 5, template_var 1)),
              template_var 0)
            )],
       template_predicate
        (
           template_app
            (template_app (template_hole 4, template_var 0),
             template_app
              (template_app
                (template_hole 3,
                 template_app (template_hole 2, template_var 1)),
               template_app (template_hole 1, template_hole 0)))
           ))),
    ("Discrete_Time_Markov_Process.measurable_stream_filtration1",
     "enat ?i <= ?n ==>
      (%\<omega>. \<omega> !! ?i)
      : stream_filtration ?M ?n \<rightarrow>\<^sub>M ?M",
     template_implication
      ([template_inequation
         (less_equals, template_app (template_hole 4, template_var 2),
          template_var 1)],
       template_predicate
        (
           template_app
            (template_app (template_hole 3, t_empty),
             template_app
              (template_app
                (template_hole 1,
                 template_app
                  (template_app (template_hole 0, template_var 0),
                   template_var 1)),
               template_var 0))
           ))),
    ("Discrete_Time_Markov_Process.measurable_stopping_time_All_eq_0",
     "stopping_time (stream_filtration ?M) ?T ==>
      {x: space ?M. ALL \<omega>:streams (space ?M). ?T (x ## \<omega>) = 0}
      : sets ?M",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_hole 12,
                template_app (template_hole 11, template_var 1)),
              template_var 0)
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 10, template_app (template_hole 9, t_empty)),
             template_app (template_hole 0, template_var 1))
           ))),
    ("Discrete_Time_Markov_Process.distr_cong_simp",
     "[| ?M = ?K; sets ?N = sets ?L;
         !!x. x : space ?M =simp=> ?f x = ?g x |]
      ==> distr ?M ?N ?f = distr ?K ?L ?g",
     template_implication
      ([template_equation (template_var 5, template_var 4),
        template_equation
         (template_app (template_hole 7, template_var 3),
          template_app (template_hole 7, template_var 2)),
        template_predicate (template_app (template_hole 6, t_empty))],
       template_equation
        (template_app
          (template_app
            (template_app (template_hole 0, template_var 5),
             template_var 3),
           template_var 1),
         template_app
          (template_app
            (template_app (template_hole 0, template_var 4),
             template_var 2),
           template_var 0)))),
    ("Discrete_Time_Markov_Process.stopping_time_epred_SCons",
     "[| stopping_time (stream_filtration ?M) ?T; ?x : space ?M;
         ?\<omega> : streams (space ?M); 0 < ?T (?x ## ?\<omega>) |]
      ==> stopping_time (stream_filtration ?M)
           (%\<omega>. epred (?T (?x ## \<omega>)))",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_hole 9,
                template_app (template_hole 8, template_var 3)),
              template_var 2)
            ),
        template_predicate
         (
            template_app
             (template_app (template_hole 7, template_var 1),
              template_app (template_hole 6, template_var 3))
            ),
        template_predicate
         (
            template_app
             (template_app (template_hole 5, template_var 0),
              template_app
               (template_hole 4,
                template_app (template_hole 6, template_var 3)))
            ),
        template_inequation
         (less_than, template_hole 2,
          template_app
           (template_var 2,
            template_app
             (template_app (template_hole 1, template_var 1),
              template_var 0)))],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 9,
               template_app (template_hole 8, template_var 3)),
             t_empty)
           ))),
    ("Discrete_Time_Markov_Process.measurable_stream_filtration2",
     "[| ?f : space ?N \<rightarrow> streams (space ?M);
         !!i. enat i <= ?n ==>
              (%x. ?f x !! i) : ?N \<rightarrow>\<^sub>M ?M |]
      ==> ?f : ?N \<rightarrow>\<^sub>M stream_filtration ?M ?n",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 12, template_var 3),
              template_app
               (template_app
                 (template_hole 11,
                  template_app (template_hole 10, template_var 2)),
                t_empty))
            ),
        template_predicate (template_app (template_hole 7, t_empty))],
       template_predicate
        (
           template_app
            (template_app (template_hole 12, template_var 3),
             template_app
              (template_app (template_hole 1, template_var 2),
               template_app
                (template_app (template_hole 0, template_var 1),
                 template_var 0)))
           ))),
    ("Discrete_Time_Markov_Process.stopping_time_0",
     "[| stopping_time (stream_filtration ?M) ?T; ?x : space ?M;
         ?\<omega> : streams (space ?M); 0 < ?T (?x ## ?\<omega>);
         ?\<omega>' : streams (space ?M) |]
      ==> 0 < ?T (?x ## ?\<omega>')",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_hole 8,
                template_app (template_hole 7, template_var 4)),
              template_var 3)
            ),
        template_predicate
         (
            template_app
             (template_app (template_hole 6, template_var 2),
              template_app (template_hole 5, template_var 4))
            ),
        template_predicate
         (
            template_app
             (template_app (template_hole 4, template_var 1),
              template_app
               (template_hole 3,
                template_app (template_hole 5, template_var 4)))
            ),
        template_inequation
         (less_than, template_hole 1,
          template_app
           (template_var 3,
            template_app
             (template_app (template_hole 0, template_var 2),
              template_var 1))),
        template_predicate
         (
            template_app
             (template_app (template_hole 4, template_var 0),
              template_app
               (template_hole 3,
                template_app (template_hole 5, template_var 4)))
            )],
       template_inequation
        (less_than, template_hole 1,
         template_app
          (template_var 3,
           template_app
            (template_app (template_hole 0, template_var 2),
             template_var 0))))),
    ("Discrete_Time_Markov_Process.measure_eqI_PiM_sequence",
     "[| sets ?P = sets (Pi\<^sub>M UNIV ?M);
         sets ?Q = sets (Pi\<^sub>M UNIV ?M);
         !!A n.
            (!!i. A i : sets (?M i)) ==>
            emeasure ?P (prod_emb UNIV ?M {..n} (Pi\<^sub>E {..n} A)) =
            emeasure ?Q (prod_emb UNIV ?M {..n} (Pi\<^sub>E {..n} A));
         finite_measure ?P |]
      ==> ?P = ?Q",
     template_implication
      ([template_equation
         (template_app (template_hole 13, template_var 2),
          template_app
           (template_hole 13,
            template_app
             (template_app (template_hole 12, template_hole 11),
              template_var 1))),
        template_equation
         (template_app (template_hole 13, template_var 0),
          template_app
           (template_hole 13,
            template_app
             (template_app (template_hole 12, template_hole 11),
              template_var 1))),
        template_predicate (template_app (template_hole 10, t_empty)),
        template_predicate
         (template_app (template_hole 1, template_var 2))],
       template_equation (template_var 2, template_var 0)))]:
   (string * thm * template) list
### theory "Draft.Discrete_Time_Markov_ProcessTemplates"
### 1.347s elapsed time, 1.945s cpu time, 0.551s GC time
val it = (): unit
