Loading theory "Draft.Markov_Models_Auxiliary" (required by "Draft.MDP_Reachability_ProblemTemplates" via "Draft.MDP_Reachability_Problem" via "Draft.Markov_Decision_Process" via "Draft.Discrete_Time_Markov_Chain")
Loading theory "HOL-Library.Function_Algebras" (required by "Draft.MDP_Reachability_ProblemTemplates" via "Draft.ExtrEqs" via "HOL-Library.BigO")
Loading theory "Draft.Templates" (required by "Draft.MDP_Reachability_ProblemTemplates" via "Draft.ExtrEqs")
instantiation
  fun :: (type, plus) plus
  plus_fun == plus :: ('a => 'b) => ('a => 'b) => 'a => 'b
instantiation
  fun :: (type, zero) zero
  zero_fun == zero_class.zero :: 'a => 'b
instantiation
  fun :: (type, times) times
  times_fun == times :: ('a => 'b) => ('a => 'b) => 'a => 'b
instantiation
  fun :: (type, one) one
  one_fun == one_class.one :: 'a => 'b
datatype template_term
=
     t_empty
   | template_app of template_term * template_term
   | template_hole of int
   | template_var of int
datatype sign
= equals | greater_equals | greater_than | less_equals | less_than
datatype template
=
     template_bimplication of template * template
   | template_dunno
   | template_equation of template_term * template_term
   | template_implication of template list * template
   | template_inequation of sign * template_term * template_term
   | template_negation of template
   | template_predicate of template_term
constructor t_empty: template_term
constructor template_app: template_term * template_term -> template_term
constructor template_hole: int -> template_term
constructor template_var: int -> template_term
constructor equals: sign
constructor greater_equals: sign
constructor greater_than: sign
constructor less_equals: sign
constructor less_than: sign
constructor template_bimplication: template * template -> template
constructor template_dunno: template
constructor template_equation: template_term * template_term -> template
constructor template_implication: template list * template -> template
constructor template_inequation:
   sign * template_term * template_term -> template
constructor template_negation: template -> template
constructor template_predicate: template_term -> template
val vfs = fn: term -> (indexname * typ) list * (string * typ) list
val indexOf = fn: ''a list -> ''a -> int -> int
val has_eq = fn: term -> bool
val term2template = fn:
   (indexname * typ) list -> (string * typ) list -> term -> template_term
val lemma2predicate = fn: term -> term -> template
val makeTemplatewithContext = fn: term -> term -> template
val lemma2template = fn: term -> template
val thm2template = fn: thm -> template
val tterm2string = fn: template_term -> string
val template2string = fn: template -> string
val t = "height ?t <= size ?t": thm
val th =
   Const ("HOL.Trueprop", "bool => prop") $
     (Const ("Orderings.ord_class.less_eq", "nat => nat => bool") $
       (Const ("Tree.height_class.height", "?'a tree => nat") $
         Var (("t", 0), "?'a tree")) $
       (Const ("Nat.size_class.size", "?'a tree => nat") $
         Var (("t", 0), "?'a tree"))):
   term
### theory "Draft.Templates"
### 0.087s elapsed time, 0.294s cpu time, 0.000s GC time
### theory "HOL-Library.Function_Algebras"
### 0.123s elapsed time, 0.364s cpu time, 0.000s GC time
Loading theory "HOL-Library.BigO" (required by "Draft.MDP_Reachability_ProblemTemplates" via "Draft.ExtrEqs")
class order = preorder +
  assumes "order_antisym": "!!x y. [| x <= y; y <= x |] ==> x = y"
class linorder = order +
  assumes "linear": "!!x y. x <= y | y <= x"
### theory "HOL-Library.BigO"
### 0.589s elapsed time, 1.205s cpu time, 0.056s GC time
Loading theory "Draft.ExtrEqs" (required by "Draft.MDP_Reachability_ProblemTemplates")
val eqpattern =
   Pattern
    (
       Const ("HOL.Trueprop", "bool => prop") $
         (Const ("HOL.eq", "?'a => ?'a => bool") $
           Var (("_dummy_", 1), "?'a") $ Var (("_dummy_", 2), "?'a"))
       ):
   term Find_Theorems.criterion
val badeqpattern = Pattern (Const ("Pure.eq", "?'a => ?'a => prop")):
   term Find_Theorems.criterion
val undefpattern =
   Pattern
    (
       Const ("HOL.Trueprop", "bool => prop") $
         (Const ("HOL.eq", "?'a => ?'a => bool") $
           Var (("_dummy_", 1), "?'a") $ Const ("HOL.undefined", "?'a"))
       ):
   term Find_Theorems.criterion
val thmpattern =
   Pattern
    (Const ("HOL.Trueprop", "bool => prop") $ Var (("_dummy_", 1), "bool")):
   term Find_Theorems.criterion
val badnames =
   ["*nitpick*", "*Nitpick*", "*full_exhaustive*", "*_def*", "Enum.finite*",
    "*Quickcheck*", "ATP*", "*Nunchaku*", "*Code*", "*BNF*", "*SMT*",
    "*.*.*"]:
   string list
val unwanted_names =
   [(false, Name "*nitpick*"), (false, Name "*Nitpick*"),
    (false, Name "*full_exhaustive*"), (false, Name "*_def*"),
    (false, Name "Enum.finite*"), (false, Name "*Quickcheck*"),
    (false, Name "ATP*"), (false, Name "*Nunchaku*"),
    (false, Name "*Code*"), (false, Name "*BNF*"), (false, Name "*SMT*"),
    (false, Name "*.*.*")]:
   (bool * term Find_Theorems.criterion) list
val has_vars = fn: term -> bool
val get_all_eqs = fn: string -> Proof.context -> (string * thm) list
val get_all_thms = fn: string -> Proof.context -> (string * thm) list
val get_noneq_thms = fn: string -> Proof.context -> (string * thm) list
val template_eqs = fn:
   string -> Proof.context -> (string * thm * template) list
val template_thms = fn:
   string -> Proof.context -> (string * thm * template) list
### theory "Draft.ExtrEqs"
### 0.510s elapsed time, 1.068s cpu time, 0.142s GC time
consts
  eexp :: "ereal => ennreal"
### theory "Draft.Markov_Models_Auxiliary"
### 1.560s elapsed time, 3.040s cpu time, 0.282s GC time
Loading theory "Draft.Discrete_Time_Markov_Chain" (required by "Draft.MDP_Reachability_ProblemTemplates" via "Draft.MDP_Reachability_Problem" via "Draft.Markov_Decision_Process")
locale MC_syntax
  fixes K :: "'s => 's pmf"
Proofs for coinductive predicate(s) "enabled"
  Proving monotonicity ...
consts
  force_enabled :: "'s => 's stream => 's stream"
consts
  walk :: "'s => ('s => 's) stream => 's stream"
locale MC_with_rewards
  fixes K :: "'s => 's pmf"
    and \<iota> :: "'s => 's => ennreal"
    and \<rho> :: "'s => ennreal"
  assumes "MC_with_rewards \<iota> \<rho>"
locale MC_pair
  fixes K1 :: "'a => 'a pmf"
    and K2 :: "'b => 'b pmf"
### theory "Draft.Discrete_Time_Markov_Chain"
### 1.086s elapsed time, 1.471s cpu time, 0.557s GC time
Loading theory "Draft.Markov_Decision_Process" (required by "Draft.MDP_Reachability_ProblemTemplates" via "Draft.MDP_Reachability_Problem")
Proofs for coinductive predicate(s) "eq_scheduler"
  Proving monotonicity ...
### Generation of a parametrized correspondence relation failed.
### Reason:  No relator for the type "Markov_Decision_Process.scheduler" found.
Proofs for coinductive predicate(s) "rel_cfg"
  Proving monotonicity ...
locale Markov_Decision_Process
  fixes K :: "'s => 's pmf set"
  assumes "Markov_Decision_Process K"
Proofs for coinductive predicate(s) "cfg_onp"
  Proving monotonicity ...
locale Finite_Markov_Decision_Process
  fixes K :: "'s => 's pmf set"
    and S :: "'s set"
  assumes "Finite_Markov_Decision_Process K S"
### theory "Draft.Markov_Decision_Process"
### 1.409s elapsed time, 1.490s cpu time, 0.121s GC time
Loading theory "Draft.MDP_Reachability_Problem" (required by "Draft.MDP_Reachability_ProblemTemplates")
Proofs for inductive predicate(s) "directed_towardsp"
  Proving monotonicity ...
locale Reachability_Problem
  fixes K :: "'s => 's pmf set"
    and S :: "'s set"
    and S1 :: "'s set"
    and S2 :: "'s set"
  assumes "Reachability_Problem K S S1 S2"
### theory "Draft.MDP_Reachability_Problem"
### 0.546s elapsed time, 0.615s cpu time, 0.105s GC time
Loading theory "Draft.MDP_Reachability_ProblemTemplates"
val templateLemmas =
   [("MDP_Reachability_Problem.directed_eq_rtrancl_Image",
     "directed_towards ?A ?r = (?r^*)^-1 `` ?A",
     template_equation
      (template_app
        (template_app (template_hole 3, template_var 1), template_var 0),
       template_app
        (template_app
          (template_hole 2,
           template_app
            (template_hole 1,
             template_app (template_hole 0, template_var 0))),
         template_var 1))),
    ("MDP_Reachability_Problem.directed_eq_rtrancl",
     "(?x : directed_towards ?A ?r) = (EX a:?A. (?x, a) : ?r^*)",
     template_equation
      (template_app
        (template_app (template_hole 5, template_var 2),
         template_app
          (template_app (template_hole 4, template_var 1), template_var 0)),
       template_app
        (template_app (template_hole 3, template_var 1), t_empty))),
    ("MDP_Reachability_Problem.directed_towards_mono",
     "[| ?s : directed_towards ?A ?F; ?F <= ?G |]
      ==> ?s : directed_towards ?A ?G",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 2, template_var 3),
              template_app
               (template_app (template_hole 1, template_var 2),
                template_var 1))
            ),
        template_inequation (less_equals, template_var 1, template_var 0)],
       template_predicate
        (
           template_app
            (template_app (template_hole 2, template_var 3),
             template_app
              (template_app (template_hole 1, template_var 2),
               template_var 0))
           ))),
    ("MDP_Reachability_Problem.directed_towardsp_directed_towards_eq",
     "directed_towardsp (%x. x : ?A) (%x xa. (x, xa) : ?r) =
      (%x. x : directed_towards ?A ?r)",
     template_equation
      (template_app (template_app (template_hole 4, t_empty), t_empty),
       t_empty))]:
   (string * thm * template) list
### theory "Draft.MDP_Reachability_ProblemTemplates"
### 1.484s elapsed time, 2.218s cpu time, 0.769s GC time
val it = (): unit
