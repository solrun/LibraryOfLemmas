Loading theory "HOL-Library.Function_Algebras" (required by "Draft.PGCLTemplates" via "Draft.ExtrEqs" via "HOL-Library.BigO")
Loading theory "Draft.Templates" (required by "Draft.PGCLTemplates" via "Draft.ExtrEqs")
Loading theory "Draft.Markov_Models_Auxiliary" (required by "Draft.PGCLTemplates" via "Draft.PGCL" via "Draft.Markov_Decision_Process" via "Draft.Discrete_Time_Markov_Chain")
instantiation
  fun :: (type, plus) plus
  plus_fun == plus :: ('a => 'b) => ('a => 'b) => 'a => 'b
instantiation
  fun :: (type, zero) zero
  zero_fun == zero_class.zero :: 'a => 'b
instantiation
  fun :: (type, times) times
  times_fun == times :: ('a => 'b) => ('a => 'b) => 'a => 'b
instantiation
  fun :: (type, one) one
  one_fun == one_class.one :: 'a => 'b
datatype template_term
=
     t_empty
   | template_app of template_term * template_term
   | template_hole of int
   | template_var of int
datatype sign
= equals | greater_equals | greater_than | less_equals | less_than
datatype template
=
     template_bimplication of template * template
   | template_dunno
   | template_equation of template_term * template_term
   | template_implication of template list * template
   | template_inequation of sign * template_term * template_term
   | template_negation of template
   | template_predicate of template_term
constructor t_empty: template_term
constructor template_app: template_term * template_term -> template_term
constructor template_hole: int -> template_term
constructor template_var: int -> template_term
constructor equals: sign
constructor greater_equals: sign
constructor greater_than: sign
constructor less_equals: sign
constructor less_than: sign
constructor template_bimplication: template * template -> template
constructor template_dunno: template
constructor template_equation: template_term * template_term -> template
constructor template_implication: template list * template -> template
constructor template_inequation:
   sign * template_term * template_term -> template
constructor template_negation: template -> template
constructor template_predicate: template_term -> template
val vfs = fn: term -> (indexname * typ) list * (string * typ) list
val indexOf = fn: ''a list -> ''a -> int -> int
val has_eq = fn: term -> bool
val term2template = fn:
   (indexname * typ) list -> (string * typ) list -> term -> template_term
val lemma2predicate = fn: term -> term -> template
val makeTemplatewithContext = fn: term -> term -> template
val lemma2template = fn: term -> template
val thm2template = fn: thm -> template
val tterm2string = fn: template_term -> string
val template2string = fn: template -> string
val t = "height ?t <= size ?t": thm
val th =
   Const ("HOL.Trueprop", "bool => prop") $
     (Const ("Orderings.ord_class.less_eq", "nat => nat => bool") $
       (Const ("Tree.height_class.height", "?'a tree => nat") $
         Var (("t", 0), "?'a tree")) $
       (Const ("Nat.size_class.size", "?'a tree => nat") $
         Var (("t", 0), "?'a tree"))):
   term
### theory "Draft.Templates"
### 0.068s elapsed time, 0.237s cpu time, 0.000s GC time
### theory "HOL-Library.Function_Algebras"
### 0.108s elapsed time, 0.315s cpu time, 0.000s GC time
Loading theory "HOL-Library.BigO" (required by "Draft.PGCLTemplates" via "Draft.ExtrEqs")
class order = preorder +
  assumes "order_antisym": "!!x y. [| x <= y; y <= x |] ==> x = y"
class linorder = order +
  assumes "linear": "!!x y. x <= y | y <= x"
### theory "HOL-Library.BigO"
### 0.595s elapsed time, 1.210s cpu time, 0.046s GC time
Loading theory "Draft.ExtrEqs" (required by "Draft.PGCLTemplates")
val eqpattern =
   Pattern
    (
       Const ("HOL.Trueprop", "bool => prop") $
         (Const ("HOL.eq", "?'a => ?'a => bool") $
           Var (("_dummy_", 1), "?'a") $ Var (("_dummy_", 2), "?'a"))
       ):
   term Find_Theorems.criterion
val badeqpattern = Pattern (Const ("Pure.eq", "?'a => ?'a => prop")):
   term Find_Theorems.criterion
val undefpattern =
   Pattern
    (
       Const ("HOL.Trueprop", "bool => prop") $
         (Const ("HOL.eq", "?'a => ?'a => bool") $
           Var (("_dummy_", 1), "?'a") $ Const ("HOL.undefined", "?'a"))
       ):
   term Find_Theorems.criterion
val thmpattern =
   Pattern
    (Const ("HOL.Trueprop", "bool => prop") $ Var (("_dummy_", 1), "bool")):
   term Find_Theorems.criterion
val badnames =
   ["*nitpick*", "*Nitpick*", "*full_exhaustive*", "*_def*", "Enum.finite*",
    "*Quickcheck*", "ATP*", "*Nunchaku*", "*Code*", "*BNF*", "*SMT*",
    "*.*.*"]:
   string list
val unwanted_names =
   [(false, Name "*nitpick*"), (false, Name "*Nitpick*"),
    (false, Name "*full_exhaustive*"), (false, Name "*_def*"),
    (false, Name "Enum.finite*"), (false, Name "*Quickcheck*"),
    (false, Name "ATP*"), (false, Name "*Nunchaku*"),
    (false, Name "*Code*"), (false, Name "*BNF*"), (false, Name "*SMT*"),
    (false, Name "*.*.*")]:
   (bool * term Find_Theorems.criterion) list
val has_vars = fn: term -> bool
val get_all_eqs = fn: string -> Proof.context -> (string * thm) list
val get_all_thms = fn: string -> Proof.context -> (string * thm) list
val get_noneq_thms = fn: string -> Proof.context -> (string * thm) list
val template_eqs = fn:
   string -> Proof.context -> (string * thm * template) list
val template_thms = fn:
   string -> Proof.context -> (string * thm * template) list
### theory "Draft.ExtrEqs"
### 0.516s elapsed time, 1.072s cpu time, 0.124s GC time
consts
  eexp :: "ereal => ennreal"
### theory "Draft.Markov_Models_Auxiliary"
### 1.540s elapsed time, 2.973s cpu time, 0.243s GC time
Loading theory "Draft.Discrete_Time_Markov_Chain" (required by "Draft.PGCLTemplates" via "Draft.PGCL" via "Draft.Markov_Decision_Process")
locale MC_syntax
  fixes K :: "'s => 's pmf"
Proofs for coinductive predicate(s) "enabled"
  Proving monotonicity ...
consts
  force_enabled :: "'s => 's stream => 's stream"
consts
  walk :: "'s => ('s => 's) stream => 's stream"
locale MC_with_rewards
  fixes K :: "'s => 's pmf"
    and \<iota> :: "'s => 's => ennreal"
    and \<rho> :: "'s => ennreal"
  assumes "MC_with_rewards \<iota> \<rho>"
locale MC_pair
  fixes K1 :: "'a => 'a pmf"
    and K2 :: "'b => 'b pmf"
### theory "Draft.Discrete_Time_Markov_Chain"
### 1.016s elapsed time, 1.341s cpu time, 0.481s GC time
Loading theory "Draft.Markov_Decision_Process" (required by "Draft.PGCLTemplates" via "Draft.PGCL")
Proofs for coinductive predicate(s) "eq_scheduler"
  Proving monotonicity ...
### Generation of a parametrized correspondence relation failed.
### Reason:  No relator for the type "Markov_Decision_Process.scheduler" found.
Proofs for coinductive predicate(s) "rel_cfg"
  Proving monotonicity ...
locale Markov_Decision_Process
  fixes K :: "'s => 's pmf set"
  assumes "Markov_Decision_Process K"
Proofs for coinductive predicate(s) "cfg_onp"
  Proving monotonicity ...
locale Finite_Markov_Decision_Process
  fixes K :: "'s => 's pmf set"
    and S :: "'s set"
  assumes "Finite_Markov_Decision_Process K S"
### theory "Draft.Markov_Decision_Process"
### 1.317s elapsed time, 1.371s cpu time, 0.085s GC time
Loading theory "Draft.PGCL" (required by "Draft.PGCLTemplates")
consts
  wp :: "'s pgcl => ('s => ennreal) => 's => ennreal"
Found termination order: "(%p. size (fst p)) <*mlex*> {}"
### theory "Draft.PGCL"
### 1.572s elapsed time, 1.724s cpu time, 0.180s GC time
Loading theory "Draft.PGCLTemplates"
val templateLemmas =
   [("PGCL.step_finite", "finite (step ?x)",
     template_predicate
      (
         template_app
          (template_hole 1, template_app (template_hole 0, template_var 0))
         )),
    ("PGCL.continuous_rF", "sup_continuous (rF ?f)",
     template_predicate
      (
         template_app
          (template_hole 1, template_app (template_hole 0, template_var 0))
         )),
    ("PGCL.wp_mono", "mono (wp ?c)",
     template_predicate
      (
         template_app
          (template_hole 1, template_app (template_hole 0, template_var 0))
         )),
    ("PGCL.mono_rF", "mono (rF ?f)",
     template_predicate
      (
         template_app
          (template_hole 1, template_app (template_hole 0, template_var 0))
         )),
    ("PGCL.step_non_empty", "step ?x ~= {}",
     template_negation
      (
         template_equation
          (template_app (template_hole 1, template_var 0), template_hole 0)
         )),
    ("PGCL.measurable_r", "r ?f : borel_measurable step.St",
     template_predicate
      (
         template_app
          (template_app
            (template_hole 7,
             template_app
              (template_hole 6,
               template_app (template_hole 5, template_var 0))),
           template_app
            (template_app
              (template_hole 4,
               template_app
                (template_hole 3,
                 template_app (template_hole 2, template_hole 1))),
             template_hole 0))
         )),
    ("PGCL.E_inf_Skip", "step.E_inf (Skip, ?s) (r ?f) = ?f ?s",
     template_equation
      (template_app
        (template_app
          (template_app (template_hole 5, template_hole 4),
           template_app
            (template_app (template_hole 3, template_hole 2),
             template_var 1)),
         template_app
          (template_hole 1,
           template_app (template_hole 0, template_var 0))),
       template_app (template_var 0, template_var 1))),
    ("PGCL.E_inf_r_eq_wp", "step.E_inf (?c, ?s) (r ?f) = wp ?c ?f ?s",
     template_equation
      (template_app
        (template_app
          (template_app (template_hole 5, template_hole 4),
           template_app
            (template_app (template_hole 3, template_var 2),
             template_var 1)),
         template_app
          (template_hole 2,
           template_app (template_hole 1, template_var 0))),
       template_app
        (template_app
          (template_app (template_hole 0, template_var 2), template_var 0),
         template_var 1))),
    ("PGCL.mono_r", "?F <= ?G ==> r ?F ?\<omega> <= r ?G ?\<omega>",
     template_implication
      ([template_inequation (less_equals, template_var 2, template_var 1)],
       template_inequation
        (less_equals,
         template_app
          (template_app
            (template_hole 1,
             template_app (template_hole 0, template_var 2)),
           template_var 0),
         template_app
          (template_app
            (template_hole 1,
             template_app (template_hole 0, template_var 1)),
           template_var 0)))),
    ("PGCL.measurable_rF",
     "?F : borel_measurable step.St ==>
      rF ?f ?F : borel_measurable step.St",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 6, template_var 1),
              template_app
               (template_app
                 (template_hole 5,
                  template_app
                   (template_hole 4,
                    template_app (template_hole 3, template_hole 2))),
                template_hole 1))
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 6,
               template_app
                (template_app (template_hole 0, template_var 0),
                 template_var 1)),
             template_app
              (template_app
                (template_hole 5,
                 template_app
                  (template_hole 4,
                   template_app (template_hole 3, template_hole 2))),
               template_hole 1))
           ))),
    ("PGCL.r_unfold",
     "r ?f ?\<omega> =
      (if fst (shd ?\<omega>) = Skip then ?f (snd (shd ?\<omega>))
       else r ?f (stl ?\<omega>))",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_hole 8,
                template_app (template_hole 7, template_var 1)),
              template_var 0)
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_app
                (template_hole 6,
                 template_app
                  (template_app
                    (template_hole 5,
                     template_app
                      (template_hole 4,
                       template_app (template_hole 3, template_var 0))),
                   template_hole 2)),
               template_app
                (template_var 1,
                 template_app
                  (template_hole 1,
                   template_app (template_hole 3, template_var 0)))),
             template_app
              (template_app
                (template_hole 8,
                 template_app (template_hole 7, template_var 1)),
               template_app (template_hole 0, template_var 0)))
           ))),
    ("PGCL.mono_r'",
     "mono
       (%F s. \<Sqinter>D\<in>step s.
                 \<integral>\<^sup>+ t.
(if fst t = Skip then ?f (snd t) else F t)
                                    \<partial>measure_pmf D)",
     template_predicate (template_app (template_hole 10, t_empty))),
    ("PGCL.E_inf_While",
     "step.E_inf (While ?g ?c, ?s) (r ?f) =
      lfp (%F s. if ?g s then step.E_inf (?c, s) (r F) else ?f s) ?s",
     template_equation
      (template_app
        (template_app
          (template_app (template_hole 7, template_hole 6),
           template_app
            (template_app
              (template_hole 5,
               template_app
                (template_app (template_hole 4, template_var 3),
                 template_var 2)),
             template_var 1)),
         template_app
          (template_hole 3,
           template_app (template_hole 2, template_var 0))),
       template_app
        (template_app (template_hole 1, t_empty), template_var 1))),
    ("PGCL.E_inf_r_unfold",
     "step.E_inf ?s (r ?f) =
      (\<Sqinter>D\<in>step ?s.
          \<integral>\<^sup>+ t. (if fst t = Skip then ?f (snd t)
                                  else step.E_inf t (r ?f))
                             \<partial>measure_pmf D)",
     template_equation
      (template_app
        (template_app
          (template_app (template_hole 12, template_hole 11),
           template_var 1),
         template_app
          (template_hole 10,
           template_app (template_hole 9, template_var 0))),
       template_app
        (template_hole 8,
         template_app
          (template_app (template_hole 7, t_empty),
           template_app (template_hole 11, template_var 1))))),
    ("PGCL.E_inf_r",
     "step.E_inf ?s (r ?f) =
      lfp (%F s. \<Sqinter>D\<in>step s.
                    \<integral>\<^sup>+ t.
   (if fst t = Skip then ?f (snd t) else F t)
 \<partial>measure_pmf D)
       ?s",
     template_equation
      (template_app
        (template_app
          (template_app (template_hole 13, template_hole 12),
           template_var 1),
         template_app
          (template_hole 11,
           template_app (template_hole 10, template_var 0))),
       template_app
        (template_app (template_hole 9, t_empty), template_var 1))),
    ("PGCL.E_inf_Seq",
     "(!!x. 0 <= ?f x) ==>
      step.E_inf (Seq ?a ?b, ?s) (r ?f) =
      step.E_inf (?a, ?s) (r (%s. step.E_inf (?b, s) (r ?f)))",
     template_implication
      ([template_predicate (template_app (template_hole 10, t_empty))],
       template_equation
        (template_app
          (template_app
            (template_app (template_hole 5, template_hole 4),
             template_app
              (template_app
                (template_hole 3,
                 template_app
                  (template_app (template_hole 2, template_var 2),
                   template_var 1)),
               template_var 0)),
           template_app
            (template_hole 1,
             template_app (template_hole 0, template_var 3))),
         template_app
          (template_app
            (template_app (template_hole 5, template_hole 4),
             template_app
              (template_app (template_hole 3, template_var 2),
               template_var 0)),
           template_app
            (template_hole 1, template_app (template_hole 0, t_empty)))))),
    ("PGCL.E_inf_r_induct",
     "[| ?P ?s ?y;
         !!F s y.
            [| ?P s y; !!s y. ?P s y ==> F s <= y;
               !!s. F s <= step.E_inf s (r ?f) |]
            ==> (\<Sqinter>D\<in>step s.
                    \<integral>\<^sup>+ t.
   (if fst t = Skip then ?f (snd t) else F t)
 \<partial>measure_pmf D)
                <= y |]
      ==> step.E_inf ?s (r ?f) <= ?y",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_var 3, template_var 2), template_var 1)
            ),
        template_predicate (template_app (template_hole 16, t_empty))],
       template_inequation
        (less_equals,
         template_app
          (template_app
            (template_app (template_hole 12, template_hole 11),
             template_var 2),
           template_app
            (template_hole 10,
             template_app (template_hole 9, template_var 0))),
         template_var 1)))]:
   (string * thm * template) list
### theory "Draft.PGCLTemplates"
### 1.551s elapsed time, 2.476s cpu time, 0.808s GC time
val it = (): unit
