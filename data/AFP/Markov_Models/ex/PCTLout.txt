Loading theory "HOL-Library.Function_Algebras" (required by "Draft.PCTLTemplates" via "Draft.ExtrEqs" via "HOL-Library.BigO")
Loading theory "Draft.Markov_Models_Auxiliary" (required by "Draft.PCTLTemplates" via "Draft.PCTL" via "Draft.Discrete_Time_Markov_Chain")
Loading theory "Draft.Templates" (required by "Draft.PCTLTemplates" via "Draft.ExtrEqs")
instantiation
  fun :: (type, plus) plus
  plus_fun == plus :: ('a => 'b) => ('a => 'b) => 'a => 'b
instantiation
  fun :: (type, zero) zero
  zero_fun == zero_class.zero :: 'a => 'b
instantiation
  fun :: (type, times) times
  times_fun == times :: ('a => 'b) => ('a => 'b) => 'a => 'b
instantiation
  fun :: (type, one) one
  one_fun == one_class.one :: 'a => 'b
datatype template_term
=
     t_empty
   | template_app of template_term * template_term
   | template_hole of int
   | template_var of int
datatype sign
= equals | greater_equals | greater_than | less_equals | less_than
datatype template
=
     template_bimplication of template * template
   | template_dunno
   | template_equation of template_term * template_term
   | template_implication of template list * template
   | template_inequation of sign * template_term * template_term
   | template_negation of template
   | template_predicate of template_term
constructor t_empty: template_term
constructor template_app: template_term * template_term -> template_term
constructor template_hole: int -> template_term
constructor template_var: int -> template_term
constructor equals: sign
constructor greater_equals: sign
constructor greater_than: sign
constructor less_equals: sign
constructor less_than: sign
constructor template_bimplication: template * template -> template
constructor template_dunno: template
constructor template_equation: template_term * template_term -> template
constructor template_implication: template list * template -> template
constructor template_inequation:
   sign * template_term * template_term -> template
constructor template_negation: template -> template
constructor template_predicate: template_term -> template
val vfs = fn: term -> (indexname * typ) list * (string * typ) list
val indexOf = fn: ''a list -> ''a -> int -> int
val has_eq = fn: term -> bool
val term2template = fn:
   (indexname * typ) list -> (string * typ) list -> term -> template_term
val lemma2predicate = fn: term -> term -> template
val makeTemplatewithContext = fn: term -> term -> template
val lemma2template = fn: term -> template
val thm2template = fn: thm -> template
val tterm2string = fn: template_term -> string
val template2string = fn: template -> string
val t = "height ?t <= size ?t": thm
val th =
   Const ("HOL.Trueprop", "bool => prop") $
     (Const ("Orderings.ord_class.less_eq", "nat => nat => bool") $
       (Const ("Tree.height_class.height", "?'a tree => nat") $
         Var (("t", 0), "?'a tree")) $
       (Const ("Nat.size_class.size", "?'a tree => nat") $
         Var (("t", 0), "?'a tree"))):
   term
### theory "Draft.Templates"
### 0.071s elapsed time, 0.257s cpu time, 0.000s GC time
### theory "HOL-Library.Function_Algebras"
### 0.114s elapsed time, 0.342s cpu time, 0.000s GC time
Loading theory "HOL-Library.BigO" (required by "Draft.PCTLTemplates" via "Draft.ExtrEqs")
class order = preorder +
  assumes "order_antisym": "!!x y. [| x <= y; y <= x |] ==> x = y"
class linorder = order +
  assumes "linear": "!!x y. x <= y | y <= x"
### theory "HOL-Library.BigO"
### 0.622s elapsed time, 1.271s cpu time, 0.095s GC time
Loading theory "Draft.ExtrEqs" (required by "Draft.PCTLTemplates")
val eqpattern =
   Pattern
    (
       Const ("HOL.Trueprop", "bool => prop") $
         (Const ("HOL.eq", "?'a => ?'a => bool") $
           Var (("_dummy_", 1), "?'a") $ Var (("_dummy_", 2), "?'a"))
       ):
   term Find_Theorems.criterion
val badeqpattern = Pattern (Const ("Pure.eq", "?'a => ?'a => prop")):
   term Find_Theorems.criterion
val undefpattern =
   Pattern
    (
       Const ("HOL.Trueprop", "bool => prop") $
         (Const ("HOL.eq", "?'a => ?'a => bool") $
           Var (("_dummy_", 1), "?'a") $ Const ("HOL.undefined", "?'a"))
       ):
   term Find_Theorems.criterion
val thmpattern =
   Pattern
    (Const ("HOL.Trueprop", "bool => prop") $ Var (("_dummy_", 1), "bool")):
   term Find_Theorems.criterion
val badnames =
   ["*nitpick*", "*Nitpick*", "*full_exhaustive*", "*_def*", "Enum.finite*",
    "*Quickcheck*", "ATP*", "*Nunchaku*", "*Code*", "*BNF*", "*SMT*",
    "*.*.*"]:
   string list
val unwanted_names =
   [(false, Name "*nitpick*"), (false, Name "*Nitpick*"),
    (false, Name "*full_exhaustive*"), (false, Name "*_def*"),
    (false, Name "Enum.finite*"), (false, Name "*Quickcheck*"),
    (false, Name "ATP*"), (false, Name "*Nunchaku*"),
    (false, Name "*Code*"), (false, Name "*BNF*"), (false, Name "*SMT*"),
    (false, Name "*.*.*")]:
   (bool * term Find_Theorems.criterion) list
val has_vars = fn: term -> bool
val get_all_eqs = fn: string -> Proof.context -> (string * thm) list
val get_all_thms = fn: string -> Proof.context -> (string * thm) list
val get_noneq_thms = fn: string -> Proof.context -> (string * thm) list
val template_eqs = fn:
   string -> Proof.context -> (string * thm * template) list
val template_thms = fn:
   string -> Proof.context -> (string * thm * template) list
### theory "Draft.ExtrEqs"
### 0.509s elapsed time, 1.054s cpu time, 0.119s GC time
consts
  eexp :: "ereal => ennreal"
### theory "Draft.Markov_Models_Auxiliary"
### 1.566s elapsed time, 3.012s cpu time, 0.239s GC time
Loading theory "Draft.Discrete_Time_Markov_Chain" (required by "Draft.PCTLTemplates" via "Draft.PCTL")
locale MC_syntax
  fixes K :: "'s => 's pmf"
Proofs for coinductive predicate(s) "enabled"
  Proving monotonicity ...
consts
  force_enabled :: "'s => 's stream => 's stream"
consts
  walk :: "'s => ('s => 's) stream => 's stream"
locale MC_with_rewards
  fixes K :: "'s => 's pmf"
    and \<iota> :: "'s => 's => ennreal"
    and \<rho> :: "'s => ennreal"
  assumes "MC_with_rewards \<iota> \<rho>"
locale MC_pair
  fixes K1 :: "'a => 'a pmf"
    and K2 :: "'b => 'b pmf"
### theory "Draft.Discrete_Time_Markov_Chain"
### 1.012s elapsed time, 1.328s cpu time, 0.471s GC time
Loading theory "Draft.PCTL" (required by "Draft.PCTLTemplates")
locale Finite_DTMC
  fixes K :: "'s => 's pmf"
    and S :: "'s set"
    and \<rho> :: "'s => real"
    and \<iota> :: "'s => 's => real"
  assumes "Finite_DTMC K S \<rho> \<iota>"
consts
  bound_until ::
    "nat => ('a stream => bool) => ('a stream => bool) => 'a stream => bool"
consts
  inrealrel :: "realrel => 'a => 'a => bool"
locale Finite_DTMC
  fixes K :: "'s => 's pmf"
    and S :: "'s set"
    and \<rho> :: "'s => real"
    and \<iota> :: "'s => 's => real"
  assumes "Finite_DTMC K S \<rho> \<iota>"
consts
  svalid :: "'s sform => 's set"
  pvalid :: "'s pform => 's stream => bool"
  reward :: "'s eform => 's stream => ennreal"
Found termination order: "(%p. size (fst (snd p))) <*mlex*> {}"
Found termination order: "(%p. size (snd p)) <*mlex*> {}"
Found termination order: "(%p. size (snd p)) <*mlex*> {}"
Found termination order: "size <*mlex*> {}"
### Ignoring duplicate rewrite rule:
### emeasure (T ?s1) (space (stream_space (count_space UNIV))) == 1
### theory "Draft.PCTL"
### 4.348s elapsed time, 5.055s cpu time, 0.953s GC time
Loading theory "Draft.PCTLTemplates"
val templateLemmas =
   [("PCTL.measurable_bound_until",
     "[| Measurable.pred (stream_space ?M) ?\<phi>;
         Measurable.pred (stream_space ?M) ?\<psi> |]
      ==> Measurable.pred (stream_space ?M)
           (bound_until ?n ?\<phi> ?\<psi>)",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 5, template_var 3),
              template_app
               (template_app
                 (template_hole 4,
                  template_app (template_hole 3, template_var 2)),
                template_app (template_hole 2, template_hole 1)))
            ),
        template_predicate
         (
            template_app
             (template_app (template_hole 5, template_var 1),
              template_app
               (template_app
                 (template_hole 4,
                  template_app (template_hole 3, template_var 2)),
                template_app (template_hole 2, template_hole 1)))
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 5,
               template_app
                (template_app
                  (template_app (template_hole 0, template_var 0),
                   template_var 3),
                 template_var 1)),
             template_app
              (template_app
                (template_hole 4,
                 template_app (template_hole 3, template_var 2)),
               template_app (template_hole 2, template_hole 1)))
           )))]:
   (string * thm * template) list
### theory "Draft.PCTLTemplates"
### 1.288s elapsed time, 1.650s cpu time, 0.202s GC time
val it = (): unit
