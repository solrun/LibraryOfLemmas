Loading theory "Draft.Markov_Models_Auxiliary" (required by "Draft.Markov_Decision_ProcessTemplates" via "Draft.Markov_Decision_Process" via "Draft.Discrete_Time_Markov_Chain")
Loading theory "HOL-Library.Function_Algebras" (required by "Draft.Markov_Decision_ProcessTemplates" via "Draft.ExtrEqs" via "HOL-Library.BigO")
Loading theory "Draft.Templates" (required by "Draft.Markov_Decision_ProcessTemplates" via "Draft.ExtrEqs")
instantiation
  fun :: (type, plus) plus
  plus_fun == plus :: ('a => 'b) => ('a => 'b) => 'a => 'b
instantiation
  fun :: (type, zero) zero
  zero_fun == zero_class.zero :: 'a => 'b
instantiation
  fun :: (type, times) times
  times_fun == times :: ('a => 'b) => ('a => 'b) => 'a => 'b
instantiation
  fun :: (type, one) one
  one_fun == one_class.one :: 'a => 'b
datatype template_term
=
     t_empty
   | template_app of template_term * template_term
   | template_hole of int
   | template_var of int
datatype sign
= equals | greater_equals | greater_than | less_equals | less_than
datatype template
=
     template_bimplication of template * template
   | template_dunno
   | template_equation of template_term * template_term
   | template_implication of template list * template
   | template_inequation of sign * template_term * template_term
   | template_negation of template
   | template_predicate of template_term
constructor t_empty: template_term
constructor template_app: template_term * template_term -> template_term
constructor template_hole: int -> template_term
constructor template_var: int -> template_term
constructor equals: sign
constructor greater_equals: sign
constructor greater_than: sign
constructor less_equals: sign
constructor less_than: sign
constructor template_bimplication: template * template -> template
constructor template_dunno: template
constructor template_equation: template_term * template_term -> template
constructor template_implication: template list * template -> template
constructor template_inequation:
   sign * template_term * template_term -> template
constructor template_negation: template -> template
constructor template_predicate: template_term -> template
val vfs = fn: term -> (indexname * typ) list * (string * typ) list
val indexOf = fn: ''a list -> ''a -> int -> int
val has_eq = fn: term -> bool
val term2template = fn:
   (indexname * typ) list -> (string * typ) list -> term -> template_term
val lemma2predicate = fn: term -> term -> template
val makeTemplatewithContext = fn: term -> term -> template
val lemma2template = fn: term -> template
val thm2template = fn: thm -> template
val tterm2string = fn: template_term -> string
val template2string = fn: template -> string
val t = "height ?t <= size ?t": thm
val th =
   Const ("HOL.Trueprop", "bool => prop") $
     (Const ("Orderings.ord_class.less_eq", "nat => nat => bool") $
       (Const ("Tree.height_class.height", "?'a tree => nat") $
         Var (("t", 0), "?'a tree")) $
       (Const ("Nat.size_class.size", "?'a tree => nat") $
         Var (("t", 0), "?'a tree"))):
   term
### theory "Draft.Templates"
### 0.069s elapsed time, 0.239s cpu time, 0.000s GC time
### theory "HOL-Library.Function_Algebras"
### 0.106s elapsed time, 0.313s cpu time, 0.000s GC time
Loading theory "HOL-Library.BigO" (required by "Draft.Markov_Decision_ProcessTemplates" via "Draft.ExtrEqs")
class order = preorder +
  assumes "order_antisym": "!!x y. [| x <= y; y <= x |] ==> x = y"
class linorder = order +
  assumes "linear": "!!x y. x <= y | y <= x"
### theory "HOL-Library.BigO"
### 0.614s elapsed time, 1.263s cpu time, 0.108s GC time
Loading theory "Draft.ExtrEqs" (required by "Draft.Markov_Decision_ProcessTemplates")
val eqpattern =
   Pattern
    (
       Const ("HOL.Trueprop", "bool => prop") $
         (Const ("HOL.eq", "?'a => ?'a => bool") $
           Var (("_dummy_", 1), "?'a") $ Var (("_dummy_", 2), "?'a"))
       ):
   term Find_Theorems.criterion
val badeqpattern = Pattern (Const ("Pure.eq", "?'a => ?'a => prop")):
   term Find_Theorems.criterion
val undefpattern =
   Pattern
    (
       Const ("HOL.Trueprop", "bool => prop") $
         (Const ("HOL.eq", "?'a => ?'a => bool") $
           Var (("_dummy_", 1), "?'a") $ Const ("HOL.undefined", "?'a"))
       ):
   term Find_Theorems.criterion
val thmpattern =
   Pattern
    (Const ("HOL.Trueprop", "bool => prop") $ Var (("_dummy_", 1), "bool")):
   term Find_Theorems.criterion
val badnames =
   ["*nitpick*", "*Nitpick*", "*full_exhaustive*", "*_def*", "Enum.finite*",
    "*Quickcheck*", "ATP*", "*Nunchaku*", "*Code*", "*BNF*", "*SMT*",
    "*.*.*"]:
   string list
val unwanted_names =
   [(false, Name "*nitpick*"), (false, Name "*Nitpick*"),
    (false, Name "*full_exhaustive*"), (false, Name "*_def*"),
    (false, Name "Enum.finite*"), (false, Name "*Quickcheck*"),
    (false, Name "ATP*"), (false, Name "*Nunchaku*"),
    (false, Name "*Code*"), (false, Name "*BNF*"), (false, Name "*SMT*"),
    (false, Name "*.*.*")]:
   (bool * term Find_Theorems.criterion) list
val has_vars = fn: term -> bool
val get_all_eqs = fn: string -> Proof.context -> (string * thm) list
val get_all_thms = fn: string -> Proof.context -> (string * thm) list
val get_noneq_thms = fn: string -> Proof.context -> (string * thm) list
val template_eqs = fn:
   string -> Proof.context -> (string * thm * template) list
val template_thms = fn:
   string -> Proof.context -> (string * thm * template) list
### theory "Draft.ExtrEqs"
### 0.524s elapsed time, 1.098s cpu time, 0.142s GC time
consts
  eexp :: "ereal => ennreal"
### theory "Draft.Markov_Models_Auxiliary"
### 1.568s elapsed time, 3.030s cpu time, 0.279s GC time
Loading theory "Draft.Discrete_Time_Markov_Chain" (required by "Draft.Markov_Decision_ProcessTemplates" via "Draft.Markov_Decision_Process")
locale MC_syntax
  fixes K :: "'s => 's pmf"
Proofs for coinductive predicate(s) "enabled"
  Proving monotonicity ...
consts
  force_enabled :: "'s => 's stream => 's stream"
consts
  walk :: "'s => ('s => 's) stream => 's stream"
locale MC_with_rewards
  fixes K :: "'s => 's pmf"
    and \<iota> :: "'s => 's => ennreal"
    and \<rho> :: "'s => ennreal"
  assumes "MC_with_rewards \<iota> \<rho>"
locale MC_pair
  fixes K1 :: "'a => 'a pmf"
    and K2 :: "'b => 'b pmf"
### theory "Draft.Discrete_Time_Markov_Chain"
### 1.073s elapsed time, 1.426s cpu time, 0.518s GC time
Loading theory "Draft.Markov_Decision_Process" (required by "Draft.Markov_Decision_ProcessTemplates")
Proofs for coinductive predicate(s) "eq_scheduler"
  Proving monotonicity ...
### Generation of a parametrized correspondence relation failed.
### Reason:  No relator for the type "Markov_Decision_Process.scheduler" found.
Proofs for coinductive predicate(s) "rel_cfg"
  Proving monotonicity ...
locale Markov_Decision_Process
  fixes K :: "'s => 's pmf set"
  assumes "Markov_Decision_Process K"
Proofs for coinductive predicate(s) "cfg_onp"
  Proving monotonicity ...
locale Finite_Markov_Decision_Process
  fixes K :: "'s => 's pmf set"
    and S :: "'s set"
  assumes "Finite_Markov_Decision_Process K S"
### theory "Draft.Markov_Decision_Process"
### 1.393s elapsed time, 1.456s cpu time, 0.095s GC time
Loading theory "Draft.Markov_Decision_ProcessTemplates"
val templateLemmas =
   [("Markov_Decision_Process.eq_scheduler_refl", "eq_scheduler ?sc ?sc",
     template_predicate
      (
         template_app
          (template_app (template_hole 0, template_var 0), template_var 0)
         )),
    ("Markov_Decision_Process.state_cont", "state (cont ?cfg ?s) = ?s",
     template_equation
      (template_app
        (template_hole 1,
         template_app
          (template_app (template_hole 0, template_var 1), template_var 0)),
       template_var 0)),
    ("Markov_Decision_Process.state_memoryless_on",
     "state (memoryless_on ?f ?s) = ?s",
     template_equation
      (template_app
        (template_hole 1,
         template_app
          (template_app (template_hole 0, template_var 1), template_var 0)),
       template_var 0)),
    ("Markov_Decision_Process.state_Cfg", "state (Cfg ?s ?d' ?c') = ?s",
     template_equation
      (template_app
        (template_hole 1,
         template_app
          (template_app
            (template_app (template_hole 0, template_var 2),
             template_var 1),
           template_var 0)),
       template_var 2)),
    ("Markov_Decision_Process.action_memoryless_on",
     "action (memoryless_on ?f ?s) = ?f ?s",
     template_equation
      (template_app
        (template_hole 1,
         template_app
          (template_app (template_hole 0, template_var 1), template_var 0)),
       template_app (template_var 1, template_var 0))),
    ("Markov_Decision_Process.action_Cfg", "action (Cfg ?s ?d' ?c') = ?d'",
     template_equation
      (template_app
        (template_hole 1,
         template_app
          (template_app
            (template_app (template_hole 0, template_var 2),
             template_var 1),
           template_var 0)),
       template_var 1)),
    ("Markov_Decision_Process.state_cfg_corec",
     "state (cfg_corec ?s ?d ?c ?x) = ?s",
     template_equation
      (template_app
        (template_hole 1,
         template_app
          (template_app
            (template_app
              (template_app (template_hole 0, template_var 3),
               template_var 2),
             template_var 1),
           template_var 0)),
       template_var 3)),
    ("Markov_Decision_Process.rel_cfg_eq",
     "rel_cfg (=) ?cfg1.0 ?cfg2.0 = (?cfg1.0 = ?cfg2.0)",
     template_bimplication
      (template_predicate
        (
           template_app
            (template_app
              (template_app (template_hole 2, template_hole 1),
               template_var 1),
             template_var 0)
           ),
       template_equation (template_var 1, template_var 0))),
    ("Markov_Decision_Process.action_cfg_corec",
     "action (cfg_corec ?s ?d ?c ?x) = ?d ?x",
     template_equation
      (template_app
        (template_hole 1,
         template_app
          (template_app
            (template_app
              (template_app (template_hole 0, template_var 3),
               template_var 2),
             template_var 1),
           template_var 0)),
       template_app (template_var 2, template_var 0))),
    ("Markov_Decision_Process.set_K_cfg",
     "set_pmf (K_cfg ?cfg) = cont ?cfg ` set_pmf (action ?cfg)",
     template_equation
      (template_app
        (template_hole 5, template_app (template_hole 4, template_var 0)),
       template_app
        (template_app
          (template_hole 3, template_app (template_hole 2, template_var 0)),
         template_app
          (template_hole 1,
           template_app (template_hole 0, template_var 0))))),
    ("Markov_Decision_Process.some_elem_ne",
     "?s ~= {} ==> some_elem ?s : ?s",
     template_implication
      ([template_negation
         (template_equation (template_var 0, template_hole 2))],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 1,
               template_app (template_hole 0, template_var 0)),
             template_var 0)
           ))),
    ("Markov_Decision_Process.rel_cfg_state",
     "rel_cfg ?P ?cfg1.0 ?cfg2.0 ==> ?P (state ?cfg1.0) (state ?cfg2.0)",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app (template_hole 2, template_var 2),
                template_var 1),
              template_var 0)
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_var 2,
               template_app (template_hole 1, template_var 1)),
             template_app (template_hole 0, template_var 0))
           ))),
    ("Markov_Decision_Process.rel_cfg_action",
     "rel_cfg ?P ?cfg1.0 ?cfg2.0 ==>
      rel_pmf ?P (action ?cfg1.0) (action ?cfg2.0)",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app (template_hole 3, template_var 2),
                template_var 1),
              template_var 0)
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_app (template_hole 2, template_var 2),
               template_app (template_hole 1, template_var 1)),
             template_app (template_hole 0, template_var 0))
           ))),
    ("Markov_Decision_Process.equivp_rel_prod",
     "[| equivp ?R; equivp ?Q |] ==> equivp (rel_prod ?R ?Q)",
     template_implication
      ([template_predicate (template_app (template_hole 3, template_var 1)),
        template_predicate
         (template_app (template_hole 2, template_var 0))],
       template_predicate
        (
           template_app
            (template_hole 1,
             template_app
              (template_app (template_hole 0, template_var 1),
               template_var 0))
           ))),
    ("Markov_Decision_Process.cont_memoryless_on",
     "?t : set_pmf (?f ?s) ==>
      cont (memoryless_on ?f ?s) ?t = memoryless_on ?f ?t",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 4, template_var 2),
              template_app
               (template_hole 3,
                template_app (template_var 1, template_var 0)))
            )],
       template_equation
        (template_app
          (template_app
            (template_hole 1,
             template_app
              (template_app (template_hole 0, template_var 1),
               template_var 0)),
           template_var 2),
         template_app
          (template_app (template_hole 0, template_var 1),
           template_var 2)))),
    ("Markov_Decision_Process.nn_integral_K_cfg",
     "integral\<^sup>N (measure_pmf (K_cfg ?cfg)) ?f =
      \<integral>\<^sup>+ s. ?f (cont ?cfg s)
                         \<partial>measure_pmf (action ?cfg)",
     template_equation
      (template_app
        (template_app
          (template_hole 6,
           template_app
            (template_hole 5,
             template_app (template_hole 4, template_var 1))),
         t_empty),
       template_app
        (template_app
          (template_hole 3,
           template_app
            (template_hole 2,
             template_app (template_hole 1, template_var 1))),
         t_empty))),
    ("Markov_Decision_Process.rel_cfg_cont",
     "rel_cfg ?P ?cfg1.0 ?cfg2.0 ==>
      rel_pmf (%s t. rel_cfg ?P (cont ?cfg1.0 s) (cont ?cfg2.0 t))
       (action ?cfg1.0) (action ?cfg2.0)",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app (template_hole 5, template_var 2),
                template_var 1),
              template_var 0)
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_app (template_hole 4, t_empty),
               template_app (template_hole 1, template_var 1)),
             template_app (template_hole 0, template_var 0))
           ))),
    ("Markov_Decision_Process.cont_cfg_corec",
     "?t : set_pmf (?d ?x) ==>
      cont (cfg_corec ?s ?d ?c ?x) ?t = cfg_corec ?t ?d ?c (?c ?x ?t)",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 4, template_var 4),
              template_app
               (template_hole 3,
                template_app (template_var 3, template_var 2)))
            )],
       template_equation
        (template_app
          (template_app
            (template_hole 1,
             template_app
              (template_app
                (template_app
                  (template_app (template_hole 0, template_var 1),
                   template_var 3),
                 template_var 0),
               template_var 2)),
           template_var 4),
         template_app
          (template_app
            (template_app
              (template_app (template_hole 0, template_var 4),
               template_var 3),
             template_var 0),
           template_app
            (template_app (template_var 0, template_var 2),
             template_var 4))))),
    ("Markov_Decision_Process.cont_Cfg",
     "[| ?t : set_pmf ?d'; state (?c' ?t) = ?t |]
      ==> cont (Cfg ?s ?d' ?c') ?t = ?c' ?t",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 6, template_var 3),
              template_app (template_hole 5, template_var 2))
            ),
        template_equation
         (template_app
           (template_hole 3, template_app (template_var 1, template_var 3)),
          template_var 3)],
       template_equation
        (template_app
          (template_app
            (template_hole 1,
             template_app
              (template_app
                (template_app (template_hole 0, template_var 0),
                 template_var 2),
               template_var 1)),
           template_var 3),
         template_app (template_var 1, template_var 3)))),
    ("Markov_Decision_Process.cfg_coinduct",
     "[| ?X ?c ?d; !!c d. ?X c d ==> state c = state d;
         !!c d. ?X c d ==> action c = action d;
         !!c d t.
            [| ?X c d; t : set_pmf (action c) |]
            ==> ?X (cont c t) (cont d t) |]
      ==> ?c = ?d",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_var 2, template_var 1), template_var 0)
            ),
        template_predicate (template_app (template_hole 9, t_empty)),
        template_predicate (template_app (template_hole 9, t_empty)),
        template_predicate (template_app (template_hole 9, t_empty))],
       template_equation (template_var 1, template_var 0)))]:
   (string * thm * template) list
### theory "Draft.Markov_Decision_ProcessTemplates"
### 1.455s elapsed time, 2.206s cpu time, 0.809s GC time
val it = (): unit
