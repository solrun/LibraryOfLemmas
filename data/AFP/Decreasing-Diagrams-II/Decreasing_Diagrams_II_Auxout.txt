Loading theory "HOL-Library.Cancellation" (required by "Draft.Decreasing_Diagrams_II_AuxMoreTemplates" via "Draft.Decreasing_Diagrams_II_Aux" via "Well_Quasi_Orders.Multiset_Extension" via "HOL-Library.Multiset")
Loading theory "HOL-Library.FuncSet" (required by "Draft.Decreasing_Diagrams_II_AuxMoreTemplates" via "Draft.Decreasing_Diagrams_II_Aux" via "Well_Quasi_Orders.Well_Quasi_Orders" via "Well_Quasi_Orders.Almost_Full_Relations" via "Well_Quasi_Orders.Minimal_Bad_Sequences" via "Well_Quasi_Orders.Almost_Full" via "HOL-Library.Ramsey")
Loading theory "HOL-Library.Function_Algebras" (required by "Draft.Decreasing_Diagrams_II_AuxMoreTemplates" via "Draft.ExtrEqs" via "HOL-Library.BigO")
Loading theory "HOL-Library.Infinite_Set" (required by "Draft.Decreasing_Diagrams_II_AuxMoreTemplates" via "Draft.Decreasing_Diagrams_II_Aux" via "Well_Quasi_Orders.Well_Quasi_Orders" via "Well_Quasi_Orders.Almost_Full_Relations" via "Well_Quasi_Orders.Minimal_Bad_Sequences" via "Well_Quasi_Orders.Almost_Full" via "HOL-Library.Ramsey")
instantiation
  fun :: (type, plus) plus
  plus_fun == plus :: ('a => 'b) => ('a => 'b) => 'a => 'b
instantiation
  fun :: (type, zero) zero
  zero_fun == zero_class.zero :: 'a => 'b
instantiation
  fun :: (type, times) times
  times_fun == times :: ('a => 'b) => ('a => 'b) => 'a => 'b
instantiation
  fun :: (type, one) one
  one_fun == one_class.one :: 'a => 'b
### theory "HOL-Library.Function_Algebras"
### 0.137s elapsed time, 0.566s cpu time, 0.021s GC time
Loading theory "HOL-Library.Nat_Bijection" (required by "Draft.Decreasing_Diagrams_II_AuxMoreTemplates" via "Draft.ExtrEqs" via "HOL-Library.Stream")
consts
  enumerate :: "'a set => nat => 'a"
Found termination order: "(%p. size (snd p)) <*mlex*> {}"
signature CANCEL = sig val proc: Proof.context -> cterm -> thm option end
functor Cancel_Fun (Data: CANCEL_NUMERALS_DATA): CANCEL
### theory "HOL-Library.Infinite_Set"
### 0.327s elapsed time, 1.308s cpu time, 0.109s GC time
Loading theory "Abstract-Rewriting.Seq" (required by "Draft.Decreasing_Diagrams_II_AuxMoreTemplates" via "Draft.Decreasing_Diagrams_II_Aux" via "Well_Quasi_Orders.Well_Quasi_Orders" via "Well_Quasi_Orders.Almost_Full_Relations" via "Well_Quasi_Orders.Minimal_Bad_Sequences" via "Well_Quasi_Orders.Almost_Full")
signature CANCEL_DATA =
  sig
    val dest_coeff: term -> int * term
    val dest_sum: term -> term list
    val find_first_coeff: term -> term list -> int * term list
    val mk_coeff: int * term -> term
    val mk_sum: typ -> term list -> term
    val norm_ss1: simpset
    val norm_ss2: simpset
    val norm_tac: Proof.context -> tactic
    val numeral_simp_tac: Proof.context -> tactic
    val prove_conv:
       tactic list -> Proof.context -> thm list -> term * term -> thm option
    val simplify_meta_eq: Proof.context -> thm -> thm
    val trans_tac: Proof.context -> thm option -> tactic
  end
structure Cancel_Data: CANCEL_DATA
Found termination order: "size_list size <*mlex*> {}"
### theory "HOL-Library.FuncSet"
### 0.428s elapsed time, 1.698s cpu time, 0.200s GC time
Loading theory "HOL-Library.Ramsey" (required by "Draft.Decreasing_Diagrams_II_AuxMoreTemplates" via "Draft.Decreasing_Diagrams_II_Aux" via "Well_Quasi_Orders.Well_Quasi_Orders" via "Well_Quasi_Orders.Almost_Full_Relations" via "Well_Quasi_Orders.Minimal_Bad_Sequences" via "Well_Quasi_Orders.Almost_Full")
locale infinitely_many
  fixes p :: "nat => bool"
  assumes "infinitely_many p"
signature CANCEL_SIMPROCS =
  sig
    val diff_cancel: Proof.context -> cterm -> thm option
    val eq_cancel: Proof.context -> cterm -> thm option
    val less_cancel: Proof.context -> cterm -> thm option
    val less_eq_cancel: Proof.context -> cterm -> thm option
  end
structure Cancel_Simprocs: CANCEL_SIMPROCS
### theory "HOL-Library.Cancellation"
### 0.459s elapsed time, 1.827s cpu time, 0.200s GC time
Loading theory "HOL-Library.Multiset" (required by "Draft.Decreasing_Diagrams_II_AuxMoreTemplates" via "Draft.Decreasing_Diagrams_II_Aux" via "Well_Quasi_Orders.Multiset_Extension")
Found termination order: "size <*mlex*> {}"
### theory "HOL-Library.Nat_Bijection"
### 0.366s elapsed time, 1.440s cpu time, 0.179s GC time
Loading theory "HOL-Library.Stream" (required by "Draft.Decreasing_Diagrams_II_AuxMoreTemplates" via "Draft.ExtrEqs")
Found termination order: "(%p. size (snd p)) <*mlex*> {}"
instantiation
  multiset :: (type) cancel_comm_monoid_add
  zero_multiset == zero_class.zero :: 'a multiset
  minus_multiset == minus :: 'a multiset => 'a multiset => 'a multiset
  plus_multiset == plus :: 'a multiset => 'a multiset => 'a multiset
Found termination order: "(%p. size (snd p)) <*mlex*> {}"
### theory "Abstract-Rewriting.Seq"
### 0.389s elapsed time, 1.527s cpu time, 0.216s GC time
Loading theory "HOL-Library.Set_Algebras" (required by "Draft.Decreasing_Diagrams_II_AuxMoreTemplates" via "Draft.ExtrEqs" via "HOL-Library.BigO")
instantiation
  set :: (plus) plus
  plus_set == plus :: 'a set => 'a set => 'a set
instantiation
  set :: (times) times
  times_set == times :: 'a set => 'a set => 'a set
instantiation
  set :: (zero) zero
  zero_set == zero_class.zero :: 'a set
instantiation
  set :: (one) one
  one_set == one_class.one :: 'a set
consts
  choice :: "('a => bool) => ('a * 'a) set => nat => 'a"
### theory "HOL-Library.Ramsey"
### 0.463s elapsed time, 1.813s cpu time, 0.284s GC time
Loading theory "HOL-Library.Sublist" (required by "Draft.Decreasing_Diagrams_II_AuxMoreTemplates" via "Draft.Decreasing_Diagrams_II_Aux" via "Well_Quasi_Orders.Well_Quasi_Orders" via "Well_Quasi_Orders.Almost_Full_Relations" via "Well_Quasi_Orders.Minimal_Bad_Sequences" via "Well_Quasi_Orders.Almost_Full")
### theory "HOL-Library.Set_Algebras"
### 0.449s elapsed time, 1.609s cpu time, 0.740s GC time
Loading theory "HOL-Library.Tree" (required by "Draft.Decreasing_Diagrams_II_AuxMoreTemplates" via "Draft.ExtrEqs" via "Draft.Templates")
consts
  shift :: "'a list => 'a stream => 'a stream"
Proofs for coinductive predicate(s) "streamsp"
  Proving monotonicity ...
consts
  snth :: "'a stream => nat => 'a"
consts
  stake :: "nat => 'a stream => 'a list"
consts
  sdrop :: "nat => 'a stream => 'a stream"
consts
  sfilter :: "('a => bool) => 'a stream => 'a stream"
consts
  prefixes :: "'a list => 'a list list"
consts
  cycle :: "'a list => 'a stream"
### Partially applied constant "Multiset.inter_mset" on left hand side of equation, in theorem:
### semilattice_inf.Inf_fin (\<inter>#) (set (?x # ?xs)) ==
### fold (\<inter>#) ?xs ?x
consts
  siterate :: "('a => 'a) => 'a => 'a stream"
### Partially applied constant "Multiset.union_mset" on left hand side of equation, in theorem:
### semilattice_sup.Sup_fin (\<union>#) (set (?x # ?xs)) ==
### fold (\<union>#) ?xs ?x
consts
  flat :: "'a list stream => 'a stream"
Found termination order: "(%p. length (snd p)) <*mlex*> {}"
consts
  sinterleave :: "'a stream => 'a stream => 'a stream"
consts
  szip :: "'a stream => 'b stream => ('a * 'b) stream"
consts
  smap2 :: "('a => 'b => 'c) => 'a stream => 'b stream => 'c stream"
### theory "HOL-Library.Stream"
### 1.220s elapsed time, 4.635s cpu time, 1.150s GC time
Loading theory "HOL-Library.While_Combinator" (required by "Draft.Decreasing_Diagrams_II_AuxMoreTemplates" via "Draft.Decreasing_Diagrams_II_Aux" via "Well_Quasi_Orders.Well_Quasi_Orders" via "Well_Quasi_Orders.Almost_Full_Relations" via "Well_Quasi_Orders.Minimal_Bad_Sequences" via "Well_Quasi_Orders.Almost_Full" via "Regular-Sets.Regexp_Method" via "Regular-Sets.Equivalence_Checking")
consts
  left :: "'a tree => 'a tree"
consts
  right :: "'a tree => 'a tree"
signature MULTISET_SIMPROCS =
  sig
    val subset_cancel_msets: Proof.context -> cterm -> thm option
    val subseteq_cancel_msets: Proof.context -> cterm -> thm option
  end
structure Multiset_Simprocs: MULTISET_SIMPROCS
instantiation
  multiset :: (type) Inf
  Inf_multiset == Inf :: 'a multiset set => 'a multiset
Found termination order: "size <*mlex*> {}"
instantiation
  multiset :: (type) Sup
  Sup_multiset == Sup :: 'a multiset set => 'a multiset
Found termination order: "size <*mlex*> {}"
Found termination order: "{}"
consts
  suffixes :: "'a list => 'a list list"
Found termination order: "size <*mlex*> {}"
Proofs for inductive predicate(s) "list_emb"
  Proving monotonicity ...
instantiation
  multiset :: (type) size
  size_multiset == size :: 'a multiset => nat
Found termination order: "{}"
class height = type +
  fixes height :: "'a => nat"
instantiation
  tree :: (type) height
  height_tree == height :: 'a tree => nat
Found termination order: "size <*mlex*> {}"
locale comp_fun_commute
  fixes f :: "'a => 'b => 'b"
  assumes "comp_fun_commute f"
Found termination order: "{}"
### theory "HOL-Library.While_Combinator"
### 0.470s elapsed time, 1.841s cpu time, 0.232s GC time
Loading theory "HOL-Library.BigO" (required by "Draft.Decreasing_Diagrams_II_AuxMoreTemplates" via "Draft.ExtrEqs")
Found termination order: "size <*mlex*> {}"
consts
  mset :: "'a list => 'a multiset"
Found termination order: "size <*mlex*> {}"
Found termination order: "size <*mlex*> {}"
Found termination order: "size <*mlex*> {}"
class linorder = order +
  assumes "linear": "!!x y. x <= y | y <= x"
Found termination order: "size <*mlex*> {}"
Found termination order: "size <*mlex*> {}"
locale comm_monoid_mset
  fixes f :: "'a => 'a => 'a"  (infixl \<open>\<^bold>*\<close> 70)
    and z :: "'a"  (\<open>\<^bold>1\<close>)
  assumes "comm_monoid_mset (\<^bold>*) \<^bold>1"
consts
  sublists :: "'a list => 'a list list"
Found termination order: "(%p. size (fst p)) <*mlex*> {}"
### theory "HOL-Library.Sublist"
### 1.619s elapsed time, 6.344s cpu time, 0.800s GC time
Loading theory "Open_Induction.Restricted_Predicates" (required by "Draft.Decreasing_Diagrams_II_AuxMoreTemplates" via "Draft.Decreasing_Diagrams_II_Aux" via "Well_Quasi_Orders.Multiset_Extension")
class comm_monoid_add = ab_semigroup_add + monoid_add +
  assumes "add_0": "!!a. (0::'a) + a = a"
Found termination order: "size <*mlex*> {}"
class comm_monoid_add = ab_semigroup_add + monoid_add +
  assumes "add_0": "!!a. (0::'a) + a = a"
Found termination order: "(%p. size (snd p)) <*mlex*> {}"
class canonically_ordered_monoid_add = ordered_comm_monoid_add +
  assumes "le_iff_add": "!!a b. (a <= b) = (EX c. b = a + c)"
Proofs for inductive predicate(s) "accessible_on"
  Proving monotonicity ...
### theory "Open_Induction.Restricted_Predicates"
### 0.414s elapsed time, 1.620s cpu time, 0.235s GC time
Loading theory "Regular-Sets.Regular_Set" (required by "Draft.Decreasing_Diagrams_II_AuxMoreTemplates" via "Draft.Decreasing_Diagrams_II_Aux" via "Well_Quasi_Orders.Well_Quasi_Orders" via "Well_Quasi_Orders.Almost_Full_Relations" via "Well_Quasi_Orders.Minimal_Bad_Sequences" via "Well_Quasi_Orders.Almost_Full" via "Regular-Sets.Regexp_Method" via "Regular-Sets.Equivalence_Checking" via "Regular-Sets.NDerivative" via "Regular-Sets.Regular_Exp")
class comm_monoid_mult = ab_semigroup_mult + monoid_mult + dvd +
  assumes "mult_1": "!!a. (1::'a) * a = a"
Found termination order: "size <*mlex*> {}"
### theory "HOL-Library.BigO"
### 0.965s elapsed time, 3.770s cpu time, 0.518s GC time
Loading theory "Well_Quasi_Orders.Infinite_Sequences" (required by "Draft.Decreasing_Diagrams_II_AuxMoreTemplates" via "Draft.Decreasing_Diagrams_II_Aux" via "Well_Quasi_Orders.Well_Quasi_Orders" via "Well_Quasi_Orders.Almost_Full_Relations" via "Well_Quasi_Orders.Minimal_Bad_Sequences" via "Well_Quasi_Orders.Almost_Full")
overloading
  lang_pow \<equiv> compow :: nat => 'a list set => 'a list set
consts
  lang_pow :: "nat => 'a list set => 'a list set"
### theory "Well_Quasi_Orders.Infinite_Sequences"
### 0.106s elapsed time, 0.414s cpu time, 0.060s GC time
Loading theory "Well_Quasi_Orders.Minimal_Elements" (required by "Draft.Decreasing_Diagrams_II_AuxMoreTemplates" via "Draft.Decreasing_Diagrams_II_Aux" via "Well_Quasi_Orders.Well_Quasi_Orders" via "Well_Quasi_Orders.Almost_Full_Relations" via "Well_Quasi_Orders.Minimal_Bad_Sequences")
### theory "HOL-Library.Tree"
### 2.195s elapsed time, 8.590s cpu time, 1.164s GC time
Loading theory "Draft.Templates" (required by "Draft.Decreasing_Diagrams_II_AuxMoreTemplates" via "Draft.ExtrEqs")
### theory "Regular-Sets.Regular_Set"
### 0.264s elapsed time, 1.034s cpu time, 0.128s GC time
Loading theory "Regular-Sets.Regular_Exp" (required by "Draft.Decreasing_Diagrams_II_AuxMoreTemplates" via "Draft.Decreasing_Diagrams_II_Aux" via "Well_Quasi_Orders.Well_Quasi_Orders" via "Well_Quasi_Orders.Almost_Full_Relations" via "Well_Quasi_Orders.Minimal_Bad_Sequences" via "Well_Quasi_Orders.Almost_Full" via "Regular-Sets.Regexp_Method" via "Regular-Sets.Equivalence_Checking" via "Regular-Sets.NDerivative")
locale minimal_element
  fixes P :: "'a => 'a => bool"
    and A :: "'a set"
  assumes "minimal_element P A"
datatype template_term
=
     t_empty
   | template_app of template_term * template_term
   | template_hole of int
   | template_var of int
datatype sign
= equals | greater_equals | greater_than | less_equals | less_than
datatype template
=
     template_bimplication of template * template
   | template_dunno
   | template_equation of template_term * template_term
   | template_implication of template list * template
   | template_inequation of sign * template_term * template_term
   | template_negation of template
   | template_predicate of template_term
constructor t_empty: template_term
constructor template_app: template_term * template_term -> template_term
constructor template_hole: int -> template_term
constructor template_var: int -> template_term
constructor equals: sign
constructor greater_equals: sign
constructor greater_than: sign
constructor less_equals: sign
constructor less_than: sign
constructor template_bimplication: template * template -> template
constructor template_dunno: template
constructor template_equation: template_term * template_term -> template
constructor template_implication: template list * template -> template
constructor template_inequation:
   sign * template_term * template_term -> template
constructor template_negation: template -> template
constructor template_predicate: template_term -> template
val vfs = fn: term -> (indexname * typ) list * (string * typ) list
val indexOf = fn: ''a list -> ''a -> int -> int
val has_eq = fn: term -> bool
val term2template = fn:
   (indexname * typ) list -> (string * typ) list -> term -> template_term
val lemma2predicate = fn: term -> term -> template
val makeTemplatewithContext = fn: term -> term -> template
val lemma2template = fn: term -> template
val thm2template = fn: thm -> template
val tterm2string = fn: template_term -> string
val template2string = fn: template -> string
val t = "height ?t <= size ?t": thm
val th =
   Const ("HOL.Trueprop", "bool => prop") $
     (Const ("Orderings.ord_class.less_eq", "nat => nat => bool") $
       (Const ("Tree.height_class.height", "?'a tree => nat") $
         Var (("t", 0), "?'a tree")) $
       (Const ("Nat.size_class.size", "?'a tree => nat") $
         Var (("t", 0), "?'a tree"))):
   term
### theory "Draft.Templates"
### 0.069s elapsed time, 0.285s cpu time, 0.000s GC time
Loading theory "Draft.ExtrEqs" (required by "Draft.Decreasing_Diagrams_II_AuxMoreTemplates")
Found termination order: "(%p. size (snd p)) <*mlex*> {}"
### theory "Well_Quasi_Orders.Minimal_Elements"
### 0.286s elapsed time, 1.106s cpu time, 0.194s GC time
Loading theory "Well_Quasi_Orders.Least_Enum" (required by "Draft.Decreasing_Diagrams_II_AuxMoreTemplates" via "Draft.Decreasing_Diagrams_II_Aux" via "Well_Quasi_Orders.Well_Quasi_Orders" via "Well_Quasi_Orders.Almost_Full_Relations" via "Well_Quasi_Orders.Minimal_Bad_Sequences" via "Well_Quasi_Orders.Almost_Full")
locale infinitely_many1
  fixes P :: "'a => bool"
  assumes "infinitely_many1 P"
### Additional type variable(s) in specification of "enum_rel": 'a
### Additional type variable(s) in specification of "enum_dom": 'a
Found termination order: "size <*mlex*> {}"
locale infinitely_many2
  fixes P :: "'a => 'a => bool"
    and N :: "'a"
  assumes "infinitely_many2 P N"
### Additional type variable(s) in specification of "enumchain_rel": 'a
### Additional type variable(s) in specification of "enumchain_dom": 'a
Found termination order: "size <*mlex*> {}"
### theory "Well_Quasi_Orders.Least_Enum"
### 0.555s elapsed time, 2.009s cpu time, 1.316s GC time
class linorder = order +
  assumes "linear": "!!x y. x <= y | y <= x"
instantiation
  multiset :: (preorder) order
  less_eq_multiset == less_eq :: 'a multiset => 'a multiset => bool
  less_multiset == less :: 'a multiset => 'a multiset => bool
instantiation
  multiset :: (preorder) ordered_ab_semigroup_add
Proofs for inductive predicate(s) "pw_leq"
  Proving monotonicity ...
val eqpattern =
   Pattern
    (
       Const ("HOL.Trueprop", "bool => prop") $
         (Const ("HOL.eq", "?'a => ?'a => bool") $
           Var (("_dummy_", 1), "?'a") $ Var (("_dummy_", 2), "?'a"))
       ):
   term Find_Theorems.criterion
val badeqpattern = Pattern (Const ("Pure.eq", "?'a => ?'a => prop")):
   term Find_Theorems.criterion
val undefpattern =
   Pattern
    (
       Const ("HOL.Trueprop", "bool => prop") $
         (Const ("HOL.eq", "?'a => ?'a => bool") $
           Var (("_dummy_", 1), "?'a") $ Const ("HOL.undefined", "?'a"))
       ):
   term Find_Theorems.criterion
val thmpattern =
   Pattern
    (Const ("HOL.Trueprop", "bool => prop") $ Var (("_dummy_", 1), "bool")):
   term Find_Theorems.criterion
val badnames =
   ["*nitpick*", "*Nitpick*", "*full_exhaustive*", "*_def*", "Enum.finite*",
    "*Quickcheck*", "ATP*", "*Nunchaku*", "*Code*", "*BNF*", "*SMT*",
    "*.*.*"]:
   string list
val unwanted_names =
   [(false, Name "*nitpick*"), (false, Name "*Nitpick*"),
    (false, Name "*full_exhaustive*"), (false, Name "*_def*"),
    (false, Name "Enum.finite*"), (false, Name "*Quickcheck*"),
    (false, Name "ATP*"), (false, Name "*Nunchaku*"),
    (false, Name "*Code*"), (false, Name "*BNF*"), (false, Name "*SMT*"),
    (false, Name "*.*.*")]:
   (bool * term Find_Theorems.criterion) list
val has_vars = fn: term -> bool
val get_all_eqs = fn: string -> Proof.context -> (string * thm) list
val get_all_thms = fn: string -> Proof.context -> (string * thm) list
val get_noneq_thms = fn: string -> Proof.context -> (string * thm) list
val template_eqs = fn:
   string -> Proof.context -> (string * thm * template) list
val template_thms = fn:
   string -> Proof.context -> (string * thm * template) list
### theory "Draft.ExtrEqs"
### 1.066s elapsed time, 3.669s cpu time, 1.571s GC time
Found termination order: "(%p. length (fst p)) <*mlex*> {}"
instantiation
  multiset :: (equal) equal
  equal_multiset == equal_class.equal :: 'a multiset => 'a multiset => bool
instantiation
  multiset :: (random) random
  random_multiset == random_class.random ::
    natural
    => natural * natural
       => ('a multiset * (unit => term)) * natural * natural
instantiation
  multiset :: (full_exhaustive) full_exhaustive
  full_exhaustive_multiset == full_exhaustive_class.full_exhaustive ::
    ('a multiset * (unit => term) => (bool * term list) option)
    => natural => (bool * term list) option
Proofs for inductive predicate(s) "pred_mset"
  Proving monotonicity ...
Proofs for inductive predicate(s) "rel_mset'"
consts
  lang :: "'a rexp => 'a list set"
  Proving monotonicity ...
consts
  nullable :: "'a rexp => bool"
consts
  rexp_empty :: "'a rexp => bool"
instantiation
  rexp :: (order) order
  less_eq_rexp == less_eq :: 'a rexp => 'a rexp => bool
  less_rexp == less :: 'a rexp => 'a rexp => bool
### theory "HOL-Library.Multiset"
### 4.425s elapsed time, 15.943s cpu time, 3.685s GC time
Loading theory "Well_Quasi_Orders.Multiset_Extension" (required by "Draft.Decreasing_Diagrams_II_AuxMoreTemplates" via "Draft.Decreasing_Diagrams_II_Aux")
mult1 ?r =
{(N, M).
 EX a M0 K.
    M = add_mset a M0 & N = M0 + K & (ALL b. b :# K --> (b, a) : ?r)}
### theory "Well_Quasi_Orders.Multiset_Extension"
### 0.798s elapsed time, 2.557s cpu time, 1.460s GC time
Found termination order: "(%p. size (snd p)) <*mlex*> {}"
instantiation
  rexp :: (linorder) linorder
### theory "Regular-Sets.Regular_Exp"
### 2.768s elapsed time, 7.783s cpu time, 3.242s GC time
Loading theory "Regular-Sets.NDerivative" (required by "Draft.Decreasing_Diagrams_II_AuxMoreTemplates" via "Draft.Decreasing_Diagrams_II_Aux" via "Well_Quasi_Orders.Well_Quasi_Orders" via "Well_Quasi_Orders.Almost_Full_Relations" via "Well_Quasi_Orders.Minimal_Bad_Sequences" via "Well_Quasi_Orders.Almost_Full" via "Regular-Sets.Regexp_Method" via "Regular-Sets.Equivalence_Checking")
Loading theory "Regular-Sets.Relation_Interpretation" (required by "Draft.Decreasing_Diagrams_II_AuxMoreTemplates" via "Draft.Decreasing_Diagrams_II_Aux" via "Well_Quasi_Orders.Well_Quasi_Orders" via "Well_Quasi_Orders.Almost_Full_Relations" via "Well_Quasi_Orders.Minimal_Bad_Sequences" via "Well_Quasi_Orders.Almost_Full" via "Regular-Sets.Regexp_Method")
consts
  rel :: "('a => ('b * 'b) set) => 'a rexp => ('b * 'b) set"
consts
  word_rel :: "('a => ('b * 'b) set) => 'a list => ('b * 'b) set"
### theory "Regular-Sets.Relation_Interpretation"
### 0.047s elapsed time, 0.102s cpu time, 0.000s GC time
Found termination order:
  "(%p. size (fst p)) <*mlex*> (%p. size (snd p)) <*mlex*> {}"
Found termination order: "(%p. size (fst p)) <*mlex*> {}"
consts
  norm :: "'a rexp => 'a rexp"
consts
  nderiv :: "'a => 'a rexp => 'a rexp"
### theory "Regular-Sets.NDerivative"
### 1.690s elapsed time, 2.377s cpu time, 0.196s GC time
Loading theory "Regular-Sets.Equivalence_Checking" (required by "Draft.Decreasing_Diagrams_II_AuxMoreTemplates" via "Draft.Decreasing_Diagrams_II_Aux" via "Well_Quasi_Orders.Well_Quasi_Orders" via "Well_Quasi_Orders.Almost_Full_Relations" via "Well_Quasi_Orders.Minimal_Bad_Sequences" via "Well_Quasi_Orders.Almost_Full" via "Regular-Sets.Regexp_Method")
Proofs for coinductive predicate(s) "bisimilar"
  Proving monotonicity ...
consts
  add_atoms :: "'a rexp => 'a list => 'a list"
### theory "Regular-Sets.Equivalence_Checking"
### 0.185s elapsed time, 0.215s cpu time, 0.035s GC time
Loading theory "Regular-Sets.Regexp_Method" (required by "Draft.Decreasing_Diagrams_II_AuxMoreTemplates" via "Draft.Decreasing_Diagrams_II_Aux" via "Well_Quasi_Orders.Well_Quasi_Orders" via "Well_Quasi_Orders.Almost_Full_Relations" via "Well_Quasi_Orders.Minimal_Bad_Sequences" via "Well_Quasi_Orders.Almost_Full")
consts
  rel_of_regexp :: "('a * 'a) set list => nat rexp => ('a * 'a) set"
consts
  rel_eq :: "nat rexp * nat rexp => ('a * 'a) set list => bool"
val regexp_conv = fn: Proof.context -> conv
### theory "Regular-Sets.Regexp_Method"
### 0.430s elapsed time, 0.463s cpu time, 0.047s GC time
Loading theory "Well_Quasi_Orders.Almost_Full" (required by "Draft.Decreasing_Diagrams_II_AuxMoreTemplates" via "Draft.Decreasing_Diagrams_II_Aux" via "Well_Quasi_Orders.Well_Quasi_Orders" via "Well_Quasi_Orders.Almost_Full_Relations" via "Well_Quasi_Orders.Minimal_Bad_Sequences")
Proofs for inductive predicate(s) "af"
  Proving monotonicity ...
Found termination order: "(%p. size (snd (snd p))) <*mlex*> {}"
### theory "Well_Quasi_Orders.Almost_Full"
### 0.718s elapsed time, 0.758s cpu time, 0.053s GC time
Loading theory "Well_Quasi_Orders.Minimal_Bad_Sequences" (required by "Draft.Decreasing_Diagrams_II_AuxMoreTemplates" via "Draft.Decreasing_Diagrams_II_Aux" via "Well_Quasi_Orders.Well_Quasi_Orders" via "Well_Quasi_Orders.Almost_Full_Relations")
locale mbs
  fixes A :: "'a set"
### Cannot skip proof of schematic goal statement
### theory "Well_Quasi_Orders.Minimal_Bad_Sequences"
### 0.192s elapsed time, 0.192s cpu time, 0.000s GC time
Loading theory "Well_Quasi_Orders.Almost_Full_Relations" (required by "Draft.Decreasing_Diagrams_II_AuxMoreTemplates" via "Draft.Decreasing_Diagrams_II_Aux" via "Well_Quasi_Orders.Well_Quasi_Orders")
Found termination order: "{}"
Found termination order: "{}"
### theory "Well_Quasi_Orders.Almost_Full_Relations"
### 0.244s elapsed time, 0.252s cpu time, 0.000s GC time
Loading theory "Well_Quasi_Orders.Well_Quasi_Orders" (required by "Draft.Decreasing_Diagrams_II_AuxMoreTemplates" via "Draft.Decreasing_Diagrams_II_Aux")
class wqo = preorder +
  assumes "good": "!!f. good (<=) f"
### theory "Well_Quasi_Orders.Well_Quasi_Orders"
### 0.206s elapsed time, 0.279s cpu time, 0.100s GC time
Loading theory "Draft.Decreasing_Diagrams_II_Aux" (required by "Draft.Decreasing_Diagrams_II_AuxMoreTemplates")
class complete_lattice = ccpo + conditionally_complete_lattice +
  bounded_lattice +
  assumes "Inf_lower": "!!x A. x : A ==> Inf A <= x"
    and "Inf_greatest": "!!A z. (!!x. x : A ==> z <= x) ==> z <= Inf A"
    and "Sup_upper": "!!x A. x : A ==> x <= Sup A"
    and "Sup_least": "!!A z. (!!x. x : A ==> x <= z) ==> Sup A <= z"
    and "Inf_empty": "Inf {} = top"
    and "Sup_empty": "Sup {} = bot"
Found termination order: "length <*mlex*> {}"
### theory "Draft.Decreasing_Diagrams_II_Aux"
### 0.392s elapsed time, 0.453s cpu time, 0.083s GC time
Loading theory "Draft.Decreasing_Diagrams_II_AuxMoreTemplates"
val templateLemmas =
   [("Decreasing_Diagrams_II_Aux.mono_lex2", "mono ((<*lex*>) ?r)",
     template_predicate
      (
         template_app
          (template_hole 1, template_app (template_hole 0, template_var 0))
         )),
    ("Decreasing_Diagrams_II_Aux.trans_mult", "trans (mult ?R)",
     template_predicate
      (
         template_app
          (template_hole 1, template_app (template_hole 0, template_var 0))
         )),
    ("Decreasing_Diagrams_II_Aux.converse_inward", "(?r^-1)^-1 = ?r",
     template_equation
      (template_app
        (template_hole 1, template_app (template_hole 0, template_var 0)),
       template_var 0)),
    ("Decreasing_Diagrams_II_Aux.mono_lex1", "mono (%r. r <*lex*> ?s)",
     template_predicate (template_app (template_hole 1, t_empty))),
    ("Decreasing_Diagrams_II_Aux.mult_empty", "(?M, {#}) ~: mult ?R",
     template_negation
      (
         template_predicate
          (
             template_app
              (template_app
                (template_hole 3,
                 template_app
                  (template_app (template_hole 2, template_var 1),
                   template_hole 1)),
               template_app (template_hole 0, template_var 0))
             )
         )),
    ("Decreasing_Diagrams_II_Aux.converse_inward", "(?r^*)^-1 = (?r^-1)^*",
     template_equation
      (template_app
        (template_hole 1, template_app (template_hole 0, template_var 0)),
       template_app
        (template_hole 0, template_app (template_hole 1, template_var 0)))),
    ("Decreasing_Diagrams_II_Aux.list_splits_empty",
     "(list_splits ?xs = []) = (?xs = [])",
     template_bimplication
      (template_equation
        (template_app (template_hole 3, template_var 0), template_hole 2),
       template_equation (template_var 0, template_hole 0))),
    ("Decreasing_Diagrams_II_Aux.order_asym",
     "trans ?R ==> asym ?R = irrefl ?R",
     template_implication
      ([template_predicate
         (template_app (template_hole 3, template_var 0))],
       template_equation
        (template_app (template_hole 1, template_var 0),
         template_app (template_hole 0, template_var 0)))),
    ("Decreasing_Diagrams_II_Aux.converse_inward",
     "(?r Un ?s)^-1 = ?r^-1 Un ?s^-1",
     template_equation
      (template_app
        (template_hole 2,
         template_app
          (template_app (template_hole 1, template_var 1), template_var 0)),
       template_app
        (template_app
          (template_hole 0, template_app (template_hole 2, template_var 1)),
         template_app (template_hole 2, template_var 0)))),
    ("Decreasing_Diagrams_II_Aux.converse_inward",
     "(?r O ?s)^-1 = ?s^-1 O ?r^-1",
     template_equation
      (template_app
        (template_hole 4,
         template_app
          (template_app (template_hole 3, template_var 1), template_var 0)),
       template_app
        (template_app
          (template_hole 2, template_app (template_hole 1, template_var 0)),
         template_app (template_hole 0, template_var 1)))),
    ("Decreasing_Diagrams_II_Aux.empty_mult",
     "(({#}, ?N) : mult ?R) = (?N ~= {#})",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_hole 5,
                template_app
                 (template_app (template_hole 4, template_hole 3),
                  template_var 1)),
              template_app (template_hole 2, template_var 0))
            )],
       template_negation
        (template_equation (template_var 1, template_hole 3)))),
    ("Decreasing_Diagrams_II_Aux.strict_order_mult",
     "[| irrefl ?R; trans ?R |] ==> irrefl (mult ?R)",
     template_implication
      ([template_predicate (template_app (template_hole 3, template_var 0)),
        template_predicate
         (template_app (template_hole 2, template_var 0))],
       template_predicate
        (
           template_app
            (template_hole 1,
             template_app (template_hole 0, template_var 0))
           ))),
    ("Decreasing_Diagrams_II_Aux.strict_order_mult",
     "[| irrefl ?R; trans ?R |] ==> trans (mult ?R)",
     template_implication
      ([template_predicate (template_app (template_hole 3, template_var 0)),
        template_predicate
         (template_app (template_hole 2, template_var 0))],
       template_predicate
        (
           template_app
            (template_hole 1,
             template_app (template_hole 0, template_var 0))
           ))),
    ("Decreasing_Diagrams_II_Aux.wf_iff_wfp_on",
     "wf ?p = wfp_on (%a b. (a, b) : ?p) UNIV",
     template_equation
      (template_app (template_hole 4, template_var 0),
       template_app
        (template_app (template_hole 3, t_empty), template_hole 0))),
    ("Decreasing_Diagrams_II_Aux.irrefl_lex_prod",
     "[| irrefl ?R; irrefl ?S |] ==> irrefl (?R <*lex*> ?S)",
     template_implication
      ([template_predicate (template_app (template_hole 3, template_var 1)),
        template_predicate
         (template_app (template_hole 2, template_var 0))],
       template_predicate
        (
           template_app
            (template_hole 1,
             template_app
              (template_app (template_hole 0, template_var 1),
               template_var 0))
           ))),
    ("Decreasing_Diagrams_II_Aux.converse_inward",
     "(\<Union> (?r ` ?S))^-1 = (UN x:?S. (?r x)^-1)",
     template_equation
      (template_app
        (template_hole 4,
         template_app
          (template_hole 3,
           template_app
            (template_app (template_hole 2, template_var 1),
             template_var 0))),
       template_app
        (template_hole 1,
         template_app
          (template_app (template_hole 0, t_empty), template_var 0)))),
    ("Decreasing_Diagrams_II_Aux.well_order_implies_wqo",
     "well_order ?r ==> wqo_on (%a b. (a, b) : ?r) UNIV",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 4, template_hole 3),
              template_var 0)
            )],
       template_predicate
        (
           template_app
            (template_app (template_hole 2, t_empty), template_hole 3)
           ))),
    ("Decreasing_Diagrams_II_Aux.elem_list_splits_elem",
     "(?xs, ?y, ?ys) : set (list_splits ?zs) ==> ?y : set ?zs",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_hole 6,
                template_app
                 (template_app (template_hole 5, template_var 3),
                  template_app
                   (template_app (template_hole 4, template_var 2),
                    template_var 1))),
              template_app
               (template_hole 3,
                template_app (template_hole 2, template_var 0)))
            )],
       template_predicate
        (
           template_app
            (template_app (template_hole 1, template_var 2),
             template_app (template_hole 0, template_var 0))
           ))),
    ("Decreasing_Diagrams_II_Aux.elem_list_splits_length",
     "(?ys, ?y, ?zs) : set (list_splits ?xs) ==> length ?ys < length ?xs",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_hole 6,
                template_app
                 (template_app (template_hole 5, template_var 3),
                  template_app
                   (template_app (template_hole 4, template_var 2),
                    template_var 1))),
              template_app
               (template_hole 3,
                template_app (template_hole 2, template_var 0)))
            )],
       template_inequation
        (less_than, template_app (template_hole 0, template_var 3),
         template_app (template_hole 0, template_var 0)))),
    ("Decreasing_Diagrams_II_Aux.elem_list_splits_length",
     "(?ys, ?y, ?zs) : set (list_splits ?xs) ==> length ?zs < length ?xs",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_hole 6,
                template_app
                 (template_app (template_hole 5, template_var 3),
                  template_app
                   (template_app (template_hole 4, template_var 2),
                    template_var 1))),
              template_app
               (template_hole 3,
                template_app (template_hole 2, template_var 0)))
            )],
       template_inequation
        (less_than, template_app (template_hole 0, template_var 1),
         template_app (template_hole 0, template_var 0)))),
    ("Decreasing_Diagrams_II_Aux.mult_singleton",
     "(?x, ?y) : ?r ==> (add_mset ?x ?M, add_mset ?y ?M) : mult ?r",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_hole 5,
                template_app
                 (template_app (template_hole 4, template_var 3),
                  template_var 2)),
              template_var 1)
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 3,
               template_app
                (template_app
                  (template_hole 2,
                   template_app
                    (template_app (template_hole 1, template_var 3),
                     template_var 0)),
                 template_app
                  (template_app (template_hole 1, template_var 2),
                   template_var 0))),
             template_app (template_hole 0, template_var 1))
           ))),
    ("Decreasing_Diagrams_II_Aux.mulex_iff_mult",
     "mulex ?r ?M ?N = ((?M, ?N) : mult {(M, N). ?r M N})",
     template_equation
      (template_app
        (template_app
          (template_app
            (template_app (template_hole 6, template_var 2),
             template_hole 5),
           template_var 1),
         template_var 0),
       template_app
        (template_app
          (template_hole 4,
           template_app
            (template_app (template_hole 3, template_var 1),
             template_var 0)),
         template_app
          (template_hole 2,
           template_app
            (template_hole 1, template_app (template_hole 0, t_empty)))))),
    ("Decreasing_Diagrams_II_Aux.mult_on_union",
     "(?M, ?N) : mult ?r ==> (?K + ?M, ?K + ?N) : mult ?r",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_hole 3,
                template_app
                 (template_app (template_hole 2, template_var 3),
                  template_var 2)),
              template_app (template_hole 1, template_var 1))
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 3,
               template_app
                (template_app
                  (template_hole 2,
                   template_app
                    (template_app (template_hole 0, template_var 0),
                     template_var 3)),
                 template_app
                  (template_app (template_hole 0, template_var 0),
                   template_var 2))),
             template_app (template_hole 1, template_var 1))
           ))),
    ("Decreasing_Diagrams_II_Aux.mult_on_union'",
     "(?M, ?N) : mult ?r ==> (?M + ?K, ?N + ?K) : mult ?r",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_hole 3,
                template_app
                 (template_app (template_hole 2, template_var 3),
                  template_var 2)),
              template_app (template_hole 1, template_var 1))
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 3,
               template_app
                (template_app
                  (template_hole 2,
                   template_app
                    (template_app (template_hole 0, template_var 3),
                     template_var 0)),
                 template_app
                  (template_app (template_hole 0, template_var 2),
                   template_var 0))),
             template_app (template_hole 1, template_var 1))
           ))),
    ("Decreasing_Diagrams_II_Aux.mult_on_add_mset",
     "(?M, ?N) : mult ?r ==> (add_mset ?k ?M, add_mset ?k ?N) : mult ?r",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_hole 3,
                template_app
                 (template_app (template_hole 2, template_var 3),
                  template_var 2)),
              template_app (template_hole 1, template_var 1))
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 3,
               template_app
                (template_app
                  (template_hole 2,
                   template_app
                    (template_app (template_hole 0, template_var 0),
                     template_var 3)),
                 template_app
                  (template_app (template_hole 0, template_var 0),
                   template_var 2))),
             template_app (template_hole 1, template_var 1))
           ))),
    ("Decreasing_Diagrams_II_Aux.list_splits_rev",
     "list_splits (rev ?xs) =
      map (%(xs, x, ys). (rev ys, x, rev xs)) (rev (list_splits ?xs))",
     template_equation
      (template_app
        (template_hole 7, template_app (template_hole 6, template_var 0)),
       template_app
        (template_app
          (template_hole 5, template_app (template_hole 4, t_empty)),
         template_app
          (template_hole 0,
           template_app (template_hole 7, template_var 0))))),
    ("Decreasing_Diagrams_II_Aux.elem_list_splits_append",
     "(?ys, ?y, ?zs) : set (list_splits ?xs) ==> ?ys @ [?y] @ ?zs = ?xs",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_hole 8,
                template_app
                 (template_app (template_hole 7, template_var 3),
                  template_app
                   (template_app (template_hole 6, template_var 2),
                    template_var 1))),
              template_app
               (template_hole 5,
                template_app (template_hole 4, template_var 0)))
            )],
       template_equation
        (template_app
          (template_app (template_hole 2, template_var 3),
           template_app
            (template_app
              (template_hole 2,
               template_app
                (template_app (template_hole 1, template_var 2),
                 template_hole 0)),
             template_var 1)),
         template_var 0))),
    ("Decreasing_Diagrams_II_Aux.asymI2",
     "(!!a b. (a, b) : ?R ==> (b, a) ~: ?R) ==> asym ?R",
     template_implication
      ([template_predicate (template_app (template_hole 5, t_empty))],
       template_predicate
        (template_app (template_hole 0, template_var 0)))),
    ("Decreasing_Diagrams_II_Aux.list_splits_map",
     "list_splits (map ?f ?xs) =
      map (%(xs, x, ys). (map ?f xs, ?f x, map ?f ys)) (list_splits ?xs)",
     template_equation
      (template_app
        (template_hole 7,
         template_app
          (template_app (template_hole 6, template_var 1), template_var 0)),
       template_app
        (template_app
          (template_hole 5, template_app (template_hole 4, t_empty)),
         template_app (template_hole 0, template_var 0)))),
    ("Decreasing_Diagrams_II_Aux.strict_order_strict",
     "strict_order ?q ==>
      (%x y. (x, y) : ?q^= & (y, x) ~: ?q^=) = (%a b. (a, b) : ?q)",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_hole 8,
                template_app (template_hole 7, template_var 0)),
              template_app (template_hole 6, template_var 0))
            )],
       template_equation (t_empty, t_empty))),
    ("Decreasing_Diagrams_II_Aux.list_splits_append",
     "list_splits (?xs @ ?ys) =
      map (%(xs', x', ys'). (xs', x', ys' @ ?ys)) (list_splits ?xs) @
      map (%(xs', x', ys'). (?xs @ xs', x', ys')) (list_splits ?ys)",
     template_equation
      (template_app
        (template_hole 7,
         template_app
          (template_app (template_hole 6, template_var 1), template_var 0)),
       template_app
        (template_app
          (template_hole 5,
           template_app
            (template_app
              (template_hole 4, template_app (template_hole 3, t_empty)),
             template_app (template_hole 7, template_var 1))),
         template_app
          (template_app
            (template_hole 4, template_app (template_hole 3, t_empty)),
           template_app (template_hole 7, template_var 0))))),
    ("Decreasing_Diagrams_II_Aux.multI",
     "[| trans ?r; ?M = ?I + ?K; ?N = ?I + ?J; ?J ~= {#};
         \<forall>k:#?K. \<exists>j:#?J. (k, j) : ?r |]
      ==> (?M, ?N) : mult ?r",
     template_implication
      ([template_predicate
         (template_app (template_hole 12, template_var 5)),
        template_equation
         (template_var 4,
          template_app
           (template_app (template_hole 10, template_var 3),
            template_var 2)),
        template_equation
         (template_var 1,
          template_app
           (template_app (template_hole 10, template_var 3),
            template_var 0)),
        template_negation
         (template_equation (template_var 0, template_hole 8)),
        template_predicate
         (
            template_app
             (template_app
               (template_hole 7,
                template_app (template_hole 6, template_var 2)),
              t_empty)
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 2,
               template_app
                (template_app (template_hole 1, template_var 4),
                 template_var 1)),
             template_app (template_hole 0, template_var 5))
           ))),
    ("Decreasing_Diagrams_II_Aux.multE",
     "[| trans ?r; (?M, ?N) : mult ?r;
         !!I J K.
            [| ?M = I + K; ?N = I + J; J ~= {#};
               \<forall>k:#K. \<exists>j:#J. (k, j) : ?r |]
            ==> ?thesis |]
      ==> ?thesis",
     template_implication
      ([template_predicate
         (template_app (template_hole 13, template_var 3)),
        template_predicate
         (
            template_app
             (template_app
               (template_hole 12,
                template_app
                 (template_app (template_hole 11, template_var 2),
                  template_var 1)),
              template_app (template_hole 10, template_var 3))
            ),
        template_predicate (template_app (template_hole 9, t_empty))],
       template_predicate (template_var 0))),
    ("Decreasing_Diagrams_II_Aux.mult_of_image_mset",
     "[| trans ?R; trans ?R';
         !!x y. [| x :# ?N; y :# ?M; (x, y) : ?R |] ==> (?f x, ?f y) : ?R';
         (?N, ?M) : mult ?R |]
      ==> (image_mset ?f ?N, image_mset ?f ?M) : mult ?R'",
     template_implication
      ([template_predicate
         (template_app (template_hole 15, template_var 4)),
        template_predicate
         (template_app (template_hole 14, template_var 3)),
        template_predicate (template_app (template_hole 13, t_empty)),
        template_predicate
         (
            template_app
             (template_app
               (template_hole 6,
                template_app
                 (template_app (template_hole 5, template_var 2),
                  template_var 1)),
              template_app (template_hole 4, template_var 4))
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 3,
               template_app
                (template_app
                  (template_hole 2,
                   template_app
                    (template_app (template_hole 1, template_var 0),
                     template_var 2)),
                 template_app
                  (template_app (template_hole 1, template_var 0),
                   template_var 1))),
             template_app (template_hole 0, template_var 3))
           )))]:
   (string * thm * template) list
### theory "Draft.Decreasing_Diagrams_II_AuxMoreTemplates"
### 0.406s elapsed time, 0.581s cpu time, 0.000s GC time
val it = (): unit
