Loading theory "Draft.Templates" (required by "Draft.List_BitsTemplates" via "Draft.ExtrEqs")
Loading theory "Draft.Misc_CryptHOL" (required by "Draft.List_BitsTemplates" via "Draft.List_Bits")
Loading theory "HOL-Library.BigO" (required by "Draft.List_BitsTemplates" via "Draft.ExtrEqs")
datatype template_term
=
     t_empty
   | template_app of template_term * template_term
   | template_hole of int
   | template_var of int
datatype sign
= equals | greater_equals | greater_than | less_equals | less_than
datatype template
=
     template_bimplication of template * template
   | template_dunno
   | template_equation of template_term * template_term
   | template_implication of template list * template
   | template_inequation of sign * template_term * template_term
   | template_negation of template
   | template_predicate of template_term
constructor t_empty: template_term
constructor template_app: template_term * template_term -> template_term
constructor template_hole: int -> template_term
constructor template_var: int -> template_term
constructor equals: sign
constructor greater_equals: sign
constructor greater_than: sign
constructor less_equals: sign
constructor less_than: sign
constructor template_bimplication: template * template -> template
constructor template_dunno: template
constructor template_equation: template_term * template_term -> template
constructor template_implication: template list * template -> template
constructor template_inequation:
   sign * template_term * template_term -> template
constructor template_negation: template -> template
constructor template_predicate: template_term -> template
val vfs = fn: term -> (indexname * typ) list * (string * typ) list
val indexOf = fn: ''a list -> ''a -> int -> int
val has_eq = fn: term -> bool
val term2template = fn:
   (indexname * typ) list -> (string * typ) list -> term -> template_term
val lemma2predicate = fn: term -> term -> template
val makeTemplatewithContext = fn: term -> term -> template
val lemma2template = fn: term -> template
val thm2template = fn: thm -> template
val tterm2string = fn: template_term -> string
val template2string = fn: template -> string
val t = "height ?t <= size ?t": thm
val th =
   Const ("HOL.Trueprop", "bool => prop") $
     (Const ("Orderings.ord_class.less_eq", "nat => nat => bool") $
       (Const ("Tree.height_class.height", "?'a tree => nat") $
         Var (("t", 0), "?'a tree")) $
       (Const ("Nat.size_class.size", "?'a tree => nat") $
         Var (("t", 0), "?'a tree"))):
   term
### theory "Draft.Templates"
### 0.069s elapsed time, 0.243s cpu time, 0.000s GC time
### theory "HOL-Library.BigO"
### 0.646s elapsed time, 1.412s cpu time, 0.092s GC time
Loading theory "Draft.ExtrEqs" (required by "Draft.List_BitsTemplates")
val eqpattern =
   Pattern
    (
       Const ("HOL.Trueprop", "bool => prop") $
         (Const ("HOL.eq", "?'a => ?'a => bool") $
           Var (("_dummy_", 1), "?'a") $ Var (("_dummy_", 2), "?'a"))
       ):
   term Find_Theorems.criterion
val badeqpattern = Pattern (Const ("Pure.eq", "?'a => ?'a => prop")):
   term Find_Theorems.criterion
val undefpattern =
   Pattern
    (
       Const ("HOL.Trueprop", "bool => prop") $
         (Const ("HOL.eq", "?'a => ?'a => bool") $
           Var (("_dummy_", 1), "?'a") $ Const ("HOL.undefined", "?'a"))
       ):
   term Find_Theorems.criterion
val thmpattern =
   Pattern
    (Const ("HOL.Trueprop", "bool => prop") $ Var (("_dummy_", 1), "bool")):
   term Find_Theorems.criterion
val badnames =
   ["*nitpick*", "*Nitpick*", "*full_exhaustive*", "*_def*", "Enum.finite*",
    "*Quickcheck*", "ATP*", "*Nunchaku*", "*Code*", "*BNF*", "*SMT*",
    "*.*.*"]:
   string list
val unwanted_names =
   [(false, Name "*nitpick*"), (false, Name "*Nitpick*"),
    (false, Name "*full_exhaustive*"), (false, Name "*_def*"),
    (false, Name "Enum.finite*"), (false, Name "*Quickcheck*"),
    (false, Name "ATP*"), (false, Name "*Nunchaku*"),
    (false, Name "*Code*"), (false, Name "*BNF*"), (false, Name "*SMT*"),
    (false, Name "*.*.*")]:
   (bool * term Find_Theorems.criterion) list
val has_vars = fn: term -> bool
val get_all_eqs = fn: string -> Proof.context -> (string * thm) list
val get_all_thms = fn: string -> Proof.context -> (string * thm) list
val get_noneq_thms = fn: string -> Proof.context -> (string * thm) list
val template_eqs = fn:
   string -> Proof.context -> (string * thm * template) list
val template_thms = fn:
   string -> Proof.context -> (string * thm * template) list
### theory "Draft.ExtrEqs"
### 0.494s elapsed time, 1.016s cpu time, 0.077s GC time
Proofs for inductive predicate(s) "Imagep"
  Proving monotonicity ...
specification
  relcompp_witness1: (?A OO ?B) (fst ?xy) (snd ?xy) ==> ?A (fst ?xy) (relcompp_witness ?A ?B ?xy)
  relcompp_witness2: (?A OO ?B) (fst ?xy) (snd ?xy) ==> ?B (relcompp_witness ?A ?B ?xy) (snd ?xy)
Found termination order: "{}"
Found termination order: "{}"
Found termination order: "{}"
Found termination order: "{}"
Found termination order: "{}"
consts
  assert_option :: "bool => unit option"
consts
  sup_option :: "'a option => 'a option => 'a option"
consts
  enforce_option :: "('a => bool) => 'a option => 'a option"
### Ignoring duplicate rewrite rule:
### real ?n1 <= 1 == ?n1 <= 1
Proofs for inductive predicate(s) "finite_chains"
  Proving monotonicity ...
locale partial_function_definitions
  fixes leq :: "'a => 'a => bool"
    and lub :: "'a set => 'a"
  assumes "partial_function_definitions leq lub"
Proofs for inductive predicate(s) "nlistsp"
  Proving monotonicity ...
consts
  sprefix :: "'a list => 'a stream => bool"
locale monad_fail_hom
  fixes return1 :: "'a => 'm1"
    and bind1 :: "'m1 => ('a => 'm1) => 'm1"
    and fail1 :: "'m1"
    and return2 :: "'a => 'm2"
    and bind2 :: "'m2 => ('a => 'm2) => 'm2"
    and fail2 :: "'m2"
    and h :: "'m1 => 'm2"
  assumes "monad_fail_hom return1 bind1 fail1 return2 bind2 fail2 h"
specification
  set_rel_witness_pmf': rel_pmf ?A (fst ?xy) (snd ?xy) ==>
set_pmf (rel_witness_pmf ?A ?xy) <= {(a, b). ?A a b}
  map1_rel_witness_pmf': rel_pmf ?A (fst ?xy) (snd ?xy) ==>
map_pmf fst (rel_witness_pmf ?A ?xy) = fst ?xy
  map2_rel_witness_pmf': rel_pmf ?A (fst ?xy) (snd ?xy) ==>
map_pmf snd (rel_witness_pmf ?A ?xy) = snd ?xy
locale option_to_spmf
locale option_le_spmf
### theory "Draft.Misc_CryptHOL"
### 4.507s elapsed time, 6.152s cpu time, 0.777s GC time
Loading theory "Draft.List_Bits" (required by "Draft.List_BitsTemplates")
### theory "Draft.List_Bits"
### 0.108s elapsed time, 0.146s cpu time, 0.039s GC time
Loading theory "Draft.List_BitsTemplates"
val templateLemmas =
   [("List_Bits.bot_xor", "\<bottom> \<oplus> ?x = ?x",
     template_equation
      (template_app
        (template_app (template_hole 1, template_hole 0), template_var 0),
       template_var 0)),
    ("List_Bits.xor_bot", "?x \<oplus> \<bottom> = ?x",
     template_equation
      (template_app
        (template_app (template_hole 1, template_var 0), template_hole 0),
       template_var 0)),
    ("List_Bits.xor_inverse", "?x \<oplus> ?x = \<bottom>",
     template_equation
      (template_app
        (template_app (template_hole 1, template_var 0), template_var 0),
       template_hole 0)),
    ("List_Bits.top_xor", "\<top> \<oplus> ?x = - ?x",
     template_equation
      (template_app
        (template_app (template_hole 2, template_hole 1), template_var 0),
       template_app (template_hole 0, template_var 0))),
    ("List_Bits.xor_top", "?x \<oplus> \<top> = - ?x",
     template_equation
      (template_app
        (template_app (template_hole 2, template_var 0), template_hole 1),
       template_app (template_hole 0, template_var 0))),
    ("List_Bits.xor_commute", "?x \<oplus> ?y = ?y \<oplus> ?x",
     template_equation
      (template_app
        (template_app (template_hole 0, template_var 1), template_var 0),
       template_app
        (template_app (template_hole 0, template_var 0), template_var 1))),
    ("List_Bits.xor_left_inverse", "?x \<oplus> ?x \<oplus> ?y = ?y",
     template_equation
      (template_app
        (template_app (template_hole 0, template_var 1),
         template_app
          (template_app (template_hole 0, template_var 1), template_var 0)),
       template_var 0)),
    ("List_Bits.xor_list_commute",
     "?xs [\<oplus>] ?ys = ?ys [\<oplus>] ?xs",
     template_equation
      (template_app
        (template_app (template_hole 0, template_var 1), template_var 0),
       template_app
        (template_app (template_hole 0, template_var 0), template_var 1))),
    ("List_Bits.xor_list_inverse",
     "?xs [\<oplus>] ?xs = replicate (length ?xs) \<bottom>",
     template_equation
      (template_app
        (template_app (template_hole 3, template_var 0), template_var 0),
       template_app
        (template_app
          (template_hole 2, template_app (template_hole 1, template_var 0)),
         template_hole 0))),
    ("List_Bits.length_xor_list",
     "length (?xs [\<oplus>] ?ys) = min (length ?xs) (length ?ys)",
     template_equation
      (template_app
        (template_hole 2,
         template_app
          (template_app (template_hole 1, template_var 1), template_var 0)),
       template_app
        (template_app
          (template_hole 0, template_app (template_hole 2, template_var 1)),
         template_app (template_hole 2, template_var 0)))),
    ("List_Bits.xor_left_commute",
     "?x \<oplus> ?y \<oplus> ?z = ?y \<oplus> ?x \<oplus> ?z",
     template_equation
      (template_app
        (template_app (template_hole 0, template_var 2),
         template_app
          (template_app (template_hole 0, template_var 1), template_var 0)),
       template_app
        (template_app (template_hole 0, template_var 1),
         template_app
          (template_app (template_hole 0, template_var 2),
           template_var 0)))),
    ("List_Bits.xor_assoc",
     "(?x \<oplus> ?y) \<oplus> ?z = ?x \<oplus> ?y \<oplus> ?z",
     template_equation
      (template_app
        (template_app
          (template_hole 0,
           template_app
            (template_app (template_hole 0, template_var 2),
             template_var 1)),
         template_var 0),
       template_app
        (template_app (template_hole 0, template_var 2),
         template_app
          (template_app (template_hole 0, template_var 1),
           template_var 0)))),
    ("List_Bits.xor_list_left_commute",
     "?xs [\<oplus>] ?ys [\<oplus>] ?zs =
      ?ys [\<oplus>] ?xs [\<oplus>] ?zs",
     template_equation
      (template_app
        (template_app (template_hole 0, template_var 2),
         template_app
          (template_app (template_hole 0, template_var 1), template_var 0)),
       template_app
        (template_app (template_hole 0, template_var 1),
         template_app
          (template_app (template_hole 0, template_var 2),
           template_var 0)))),
    ("List_Bits.xor_list_assoc",
     "(?xs [\<oplus>] ?ys) [\<oplus>] ?zs =
      ?xs [\<oplus>] ?ys [\<oplus>] ?zs",
     template_equation
      (template_app
        (template_app
          (template_hole 0,
           template_app
            (template_app (template_hole 0, template_var 2),
             template_var 1)),
         template_var 0),
       template_app
        (template_app (template_hole 0, template_var 2),
         template_app
          (template_app (template_hole 0, template_var 1),
           template_var 0)))),
    ("List_Bits.inj_on_xor_list_nlists",
     "?n <= length ?xs ==> inj_on (([\<oplus>]) ?xs) (nlists UNIV ?n)",
     template_implication
      ([template_inequation
         (less_equals, template_var 1,
          template_app (template_hole 4, template_var 0))],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 3,
               template_app (template_hole 2, template_var 0)),
             template_app
              (template_app (template_hole 1, template_hole 0),
               template_var 1))
           ))),
    ("List_Bits.xor_list_left_inverse",
     "length ?ys <= length ?xs ==> ?xs [\<oplus>] ?xs [\<oplus>] ?ys = ?ys",
     template_implication
      ([template_inequation
         (less_equals, template_app (template_hole 2, template_var 1),
          template_app (template_hole 2, template_var 0))],
       template_equation
        (template_app
          (template_app (template_hole 0, template_var 0),
           template_app
            (template_app (template_hole 0, template_var 0),
             template_var 1)),
         template_var 1))),
    ("List_Bits.xor_replicate_bot_right",
     "[| length ?xs <= ?n; ?x = \<bottom> |]
      ==> ?xs [\<oplus>] replicate ?n ?x = ?xs",
     template_implication
      ([template_inequation
         (less_equals, template_app (template_hole 5, template_var 2),
          template_var 1),
        template_equation (template_var 0, template_hole 3)],
       template_equation
        (template_app
          (template_app (template_hole 1, template_var 2),
           template_app
            (template_app (template_hole 0, template_var 1),
             template_var 0)),
         template_var 2))),
    ("List_Bits.xor_replicate_bot_left",
     "[| length ?xs <= ?n; ?x = \<bottom> |]
      ==> replicate ?n ?x [\<oplus>] ?xs = ?xs",
     template_implication
      ([template_inequation
         (less_equals, template_app (template_hole 5, template_var 2),
          template_var 1),
        template_equation (template_var 0, template_hole 3)],
       template_equation
        (template_app
          (template_app
            (template_hole 1,
             template_app
              (template_app (template_hole 0, template_var 1),
               template_var 0)),
           template_var 2),
         template_var 2))),
    ("List_Bits.one_time_pad",
     "?n <= length ?xs ==>
      map_spmf (([\<oplus>]) ?xs) (spmf_of_set (nlists UNIV ?n)) =
      spmf_of_set (nlists UNIV ?n)",
     template_implication
      ([template_inequation
         (less_equals, template_var 1,
          template_app (template_hole 7, template_var 0))],
       template_equation
        (template_app
          (template_app
            (template_hole 5,
             template_app
              (template_hole 4,
               template_app (template_hole 3, template_var 0))),
           template_app
            (template_hole 2,
             template_app
              (template_app (template_hole 1, template_hole 0),
               template_var 1))),
         template_app
          (template_hole 2,
           template_app
            (template_app (template_hole 1, template_hole 0),
             template_var 1))))),
    ("List_Bits.xor_list_unfold",
     "?xs [\<oplus>] ?ys =
      (case ?xs of [] => []
       | x # xs' =>
           case ?ys of [] => []
           | y # ys' => x \<oplus> y # xs' [\<oplus>] ys')",
     template_equation
      (template_app
        (template_app (template_hole 4, template_var 1), template_var 0),
       template_app
        (template_app
          (template_app (template_hole 3, template_hole 2), t_empty),
         template_var 1)))]:
   (string * thm * template) list
### theory "Draft.List_BitsTemplates"
### 1.583s elapsed time, 2.313s cpu time, 0.752s GC time
val it = (): unit
