Loading theory "Draft.Negligible" (required by "Draft.NegligibleTemplates")
Loading theory "Draft.Templates" (required by "Draft.NegligibleTemplates" via "Draft.ExtrEqs")
Loading theory "HOL-Library.BigO" (required by "Draft.NegligibleTemplates" via "Draft.ExtrEqs")
datatype template_term
=
     t_empty
   | template_app of template_term * template_term
   | template_hole of int
   | template_var of int
datatype sign
= equals | greater_equals | greater_than | less_equals | less_than
datatype template
=
     template_bimplication of template * template
   | template_dunno
   | template_equation of template_term * template_term
   | template_implication of template list * template
   | template_inequation of sign * template_term * template_term
   | template_negation of template
   | template_predicate of template_term
constructor t_empty: template_term
constructor template_app: template_term * template_term -> template_term
constructor template_hole: int -> template_term
constructor template_var: int -> template_term
constructor equals: sign
constructor greater_equals: sign
constructor greater_than: sign
constructor less_equals: sign
constructor less_than: sign
constructor template_bimplication: template * template -> template
constructor template_dunno: template
constructor template_equation: template_term * template_term -> template
constructor template_implication: template list * template -> template
constructor template_inequation:
   sign * template_term * template_term -> template
constructor template_negation: template -> template
constructor template_predicate: template_term -> template
val vfs = fn: term -> (indexname * typ) list * (string * typ) list
val indexOf = fn: ''a list -> ''a -> int -> int
val has_eq = fn: term -> bool
val term2template = fn:
   (indexname * typ) list -> (string * typ) list -> term -> template_term
val lemma2predicate = fn: term -> term -> template
val makeTemplatewithContext = fn: term -> term -> template
val lemma2template = fn: term -> template
val thm2template = fn: thm -> template
val tterm2string = fn: template_term -> string
val template2string = fn: template -> string
val t = "height ?t <= size ?t": thm
val th =
   Const ("HOL.Trueprop", "bool => prop") $
     (Const ("Orderings.ord_class.less_eq", "nat => nat => bool") $
       (Const ("Tree.height_class.height", "?'a tree => nat") $
         Var (("t", 0), "?'a tree")) $
       (Const ("Nat.size_class.size", "?'a tree => nat") $
         Var (("t", 0), "?'a tree"))):
   term
### theory "Draft.Templates"
### 0.067s elapsed time, 0.228s cpu time, 0.000s GC time
Proofs for inductive predicate(s) "polynomial"
  Proving monotonicity ...
### theory "Draft.Negligible"
### 0.236s elapsed time, 0.575s cpu time, 0.028s GC time
### theory "HOL-Library.BigO"
### 0.596s elapsed time, 0.913s cpu time, 0.028s GC time
Loading theory "Draft.ExtrEqs" (required by "Draft.NegligibleTemplates")
val eqpattern =
   Pattern
    (
       Const ("HOL.Trueprop", "bool => prop") $
         (Const ("HOL.eq", "?'a => ?'a => bool") $
           Var (("_dummy_", 1), "?'a") $ Var (("_dummy_", 2), "?'a"))
       ):
   term Find_Theorems.criterion
val badeqpattern = Pattern (Const ("Pure.eq", "?'a => ?'a => prop")):
   term Find_Theorems.criterion
val undefpattern =
   Pattern
    (
       Const ("HOL.Trueprop", "bool => prop") $
         (Const ("HOL.eq", "?'a => ?'a => bool") $
           Var (("_dummy_", 1), "?'a") $ Const ("HOL.undefined", "?'a"))
       ):
   term Find_Theorems.criterion
val thmpattern =
   Pattern
    (Const ("HOL.Trueprop", "bool => prop") $ Var (("_dummy_", 1), "bool")):
   term Find_Theorems.criterion
val badnames =
   ["*nitpick*", "*Nitpick*", "*full_exhaustive*", "*_def*", "Enum.finite*",
    "*Quickcheck*", "ATP*", "*Nunchaku*", "*Code*", "*BNF*", "*SMT*",
    "*.*.*"]:
   string list
val unwanted_names =
   [(false, Name "*nitpick*"), (false, Name "*Nitpick*"),
    (false, Name "*full_exhaustive*"), (false, Name "*_def*"),
    (false, Name "Enum.finite*"), (false, Name "*Quickcheck*"),
    (false, Name "ATP*"), (false, Name "*Nunchaku*"),
    (false, Name "*Code*"), (false, Name "*BNF*"), (false, Name "*SMT*"),
    (false, Name "*.*.*")]:
   (bool * term Find_Theorems.criterion) list
val has_vars = fn: term -> bool
val get_all_eqs = fn: string -> Proof.context -> (string * thm) list
val get_all_thms = fn: string -> Proof.context -> (string * thm) list
val get_noneq_thms = fn: string -> Proof.context -> (string * thm) list
val template_eqs = fn:
   string -> Proof.context -> (string * thm * template) list
val template_thms = fn:
   string -> Proof.context -> (string * thm * template) list
### theory "Draft.ExtrEqs"
### 0.472s elapsed time, 0.537s cpu time, 0.095s GC time
Loading theory "Draft.NegligibleTemplates"
val templateLemmas =
   [("Negligible.negligible_const_iff", "negligible (%_. ?c) = (?c = 0)",
     template_implication
      ([template_predicate (template_app (template_hole 2, t_empty))],
       template_equation (template_var 0, template_hole 0))),
    ("Negligible.negligible_abs",
     "negligible (%x. \<bar>?f x\<bar>) = negligible ?f",
     template_equation
      (template_app (template_hole 1, t_empty),
       template_app (template_hole 1, template_var 0))),
    ("Negligible.negligible_uminus",
     "negligible (%\<eta>. - ?f \<eta>) = negligible ?f",
     template_equation
      (template_app (template_hole 1, t_empty),
       template_app (template_hole 1, template_var 0))),
    ("Negligible.negligible_absI",
     "negligible ?f ==> negligible (%x. \<bar>?f x\<bar>)",
     template_implication
      ([template_predicate
         (template_app (template_hole 1, template_var 0))],
       template_predicate (template_app (template_hole 1, t_empty)))),
    ("Negligible.negligible_uminusI",
     "negligible ?f ==> negligible (%\<eta>. - ?f \<eta>)",
     template_implication
      ([template_predicate
         (template_app (template_hole 1, template_var 0))],
       template_predicate (template_app (template_hole 1, t_empty)))),
    ("Negligible.negligible_powerI",
     "\<bar>?k\<bar> < 1 ==> negligible ((^) ?k)",
     template_implication
      ([template_inequation
         (less_than, template_app (template_hole 3, template_var 0),
          template_hole 2)],
       template_predicate (template_app (template_hole 1, t_empty)))),
    ("Negligible.negligible_cmult",
     "negligible (%\<eta>. ?c * ?f \<eta>) = (negligible ?f | ?c = 0)",
     template_implication
      ([template_predicate (template_app (template_hole 4, t_empty))],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 2,
               template_app (template_hole 4, template_var 0)),
             template_app
              (template_app (template_hole 1, template_var 1),
               template_hole 0))
           ))),
    ("Negligible.negligible_multc",
     "negligible (%\<eta>. ?f \<eta> * ?c) = (negligible ?f | ?c = 0)",
     template_implication
      ([template_predicate (template_app (template_hole 4, t_empty))],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 2,
               template_app (template_hole 4, template_var 1)),
             template_app
              (template_app (template_hole 1, template_var 0),
               template_hole 0))
           ))),
    ("Negligible.negligible_inverse_powerI",
     "1 < \<bar>?k\<bar> ==> negligible (%\<eta>. 1 / ?k ^ \<eta>)",
     template_implication
      ([template_inequation
         (less_than, template_hole 4,
          template_app (template_hole 3, template_var 0))],
       template_predicate (template_app (template_hole 2, t_empty)))),
    ("Negligible.negligible_mono",
     "[| negligible ?g; ?f : O(?g) |] ==> negligible ?f",
     template_implication
      ([template_predicate (template_app (template_hole 3, template_var 1)),
        template_predicate
         (
            template_app
             (template_app (template_hole 2, template_var 0),
              template_app
               (template_app (template_hole 1, template_hole 0),
                template_var 1))
            )],
       template_predicate
        (template_app (template_hole 3, template_var 0)))),
    ("Negligible.negligibleD_real",
     "negligible ?f ==> ?f : o(%x. inverse (real x powr ?c))",
     template_implication
      ([template_predicate
         (template_app (template_hole 6, template_var 1))],
       template_predicate
        (
           template_app
            (template_app (template_hole 5, template_var 1),
             template_app
              (template_app (template_hole 4, template_hole 3), t_empty))
           ))),
    ("Negligible.negligible_minus",
     "[| negligible ?f; negligible ?g |]
      ==> negligible (%\<eta>. ?f \<eta> - ?g \<eta>)",
     template_implication
      ([template_predicate (template_app (template_hole 1, template_var 1)),
        template_predicate
         (template_app (template_hole 1, template_var 0))],
       template_predicate (template_app (template_hole 1, t_empty)))),
    ("Negligible.negligible_plus",
     "[| negligible ?f; negligible ?g |]
      ==> negligible (%\<eta>. ?f \<eta> + ?g \<eta>)",
     template_implication
      ([template_predicate (template_app (template_hole 1, template_var 1)),
        template_predicate
         (template_app (template_hole 1, template_var 0))],
       template_predicate (template_app (template_hole 1, t_empty)))),
    ("Negligible.negligible_times",
     "[| negligible ?f; negligible ?g |]
      ==> negligible (%\<eta>. ?f \<eta> * ?g \<eta>)",
     template_implication
      ([template_predicate (template_app (template_hole 1, template_var 1)),
        template_predicate
         (template_app (template_hole 1, template_var 0))],
       template_predicate (template_app (template_hole 1, t_empty)))),
    ("Negligible.negligible_times_polynomial",
     "[| negligible ?f; polynomial ?g |] ==> negligible (%x. ?f x * ?g x)",
     template_implication
      ([template_predicate (template_app (template_hole 2, template_var 1)),
        template_predicate
         (template_app (template_hole 1, template_var 0))],
       template_predicate (template_app (template_hole 2, t_empty)))),
    ("Negligible.negligible_power",
     "[| negligible ?f; 0 < ?n |] ==> negligible (%\<eta>. ?f \<eta> ^ ?n)",
     template_implication
      ([template_predicate (template_app (template_hole 3, template_var 1)),
        template_inequation (less_than, template_hole 1, template_var 0)],
       template_predicate (template_app (template_hole 3, t_empty)))),
    ("Negligible.negligible_polynomial_times",
     "[| polynomial ?f; negligible ?g |] ==> negligible (%x. ?f x * ?g x)",
     template_implication
      ([template_predicate (template_app (template_hole 2, template_var 1)),
        template_predicate
         (template_app (template_hole 1, template_var 0))],
       template_predicate (template_app (template_hole 1, t_empty)))),
    ("Negligible.negligible_cmultI",
     "(?c ~= 0 ==> negligible ?f) ==> negligible (%\<eta>. ?c * ?f \<eta>)",
     template_implication
      ([template_implication
         ([template_negation
            (template_equation (template_var 1, template_hole 2))],
          template_predicate
           (template_app (template_hole 1, template_var 0)))],
       template_predicate (template_app (template_hole 1, t_empty)))),
    ("Negligible.negligible_multcI",
     "(?c ~= 0 ==> negligible ?f) ==> negligible (%\<eta>. ?f \<eta> * ?c)",
     template_implication
      ([template_implication
         ([template_negation
            (template_equation (template_var 1, template_hole 2))],
          template_predicate
           (template_app (template_hole 1, template_var 0)))],
       template_predicate (template_app (template_hole 1, t_empty)))),
    ("Negligible.negligible_powr",
     "[| negligible ?f; 0 < ?p |]
      ==> negligible (%x. \<bar>?f x\<bar> powr ?p)",
     template_implication
      ([template_predicate (template_app (template_hole 4, template_var 1)),
        template_inequation (less_than, template_hole 2, template_var 0)],
       template_predicate (template_app (template_hole 4, t_empty)))),
    ("Negligible.negligible_le",
     "[| negligible ?g; !!\<eta>. \<bar>?f \<eta>\<bar> <= ?g \<eta> |]
      ==> negligible ?f",
     template_implication
      ([template_predicate (template_app (template_hole 3, template_var 1)),
        template_predicate (template_app (template_hole 2, t_empty))],
       template_predicate
        (template_app (template_hole 3, template_var 0)))),
    ("Negligible.negligible_powrI",
     "[| 0 <= ?k; ?k < 1 |] ==> negligible (%x. ?k powr real x)",
     template_implication
      ([template_inequation (less_equals, template_hole 5, template_var 0),
        template_inequation (less_than, template_var 0, template_hole 3)],
       template_predicate (template_app (template_hole 2, t_empty)))),
    ("Negligible.negligibleD",
     "[| negligible ?f; 0 < ?c |] ==> ?f : o(%x. inverse (real x powr ?c))",
     template_implication
      ([template_predicate (template_app (template_hole 8, template_var 1)),
        template_inequation (less_than, template_hole 6, template_var 0)],
       template_predicate
        (
           template_app
            (template_app (template_hole 5, template_var 1),
             template_app
              (template_app (template_hole 4, template_hole 3), t_empty))
           ))),
    ("Negligible.negligibleI",
     "(!!c. 0 < c ==> ?f : o(%x. inverse (real x powr c))) ==>
      negligible ?f",
     template_implication
      ([template_predicate (template_app (template_hole 10, t_empty))],
       template_predicate
        (template_app (template_hole 0, template_var 0)))),
    ("Negligible.negligible_times_poly",
     "[| negligible ?f; ?g : O(%x. real x powr ?n) |]
      ==> negligible (%x. ?f x * ?g x)",
     template_implication
      ([template_predicate (template_app (template_hole 6, template_var 2)),
        template_predicate
         (
            template_app
             (template_app (template_hole 5, template_var 1),
              template_app
               (template_app (template_hole 4, template_hole 3), t_empty))
            )],
       template_predicate (template_app (template_hole 6, t_empty)))),
    ("Negligible.negligible_poly_times",
     "[| ?f : O(%x. real x powr ?n); negligible ?g |]
      ==> negligible (%x. ?f x * ?g x)",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 6, template_var 2),
              template_app
               (template_app (template_hole 5, template_hole 4), t_empty))
            ),
        template_predicate
         (template_app (template_hole 1, template_var 0))],
       template_predicate (template_app (template_hole 1, t_empty)))),
    ("Negligible.negligible_divide_polynomial1",
     "[| polynomial (%x. real (?f x));
         negligible (%\<eta>. 1 / ?g \<eta>) |]
      ==> negligible (%\<eta>. real (?f \<eta>) / ?g \<eta>)",
     template_implication
      ([template_predicate (template_app (template_hole 4, t_empty)),
        template_predicate (template_app (template_hole 2, t_empty))],
       template_predicate (template_app (template_hole 2, t_empty)))),
    ("Negligible.negligible_divide_poly1",
     "[| (%x. real (?f x)) : O(%x. real x powr ?n);
         negligible (%\<eta>. 1 / ?g \<eta>) |]
      ==> negligible (%\<eta>. real (?f \<eta>) / ?g \<eta>)",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 7, t_empty),
              template_app
               (template_app (template_hole 5, template_hole 4), t_empty))
            ),
        template_predicate (template_app (template_hole 2, t_empty))],
       template_predicate (template_app (template_hole 2, t_empty))))]:
   (string * thm * template) list
### theory "Draft.NegligibleTemplates"
### 0.388s elapsed time, 0.551s cpu time, 0.088s GC time
val it = (): unit
