   [("List_Bits.bot_xor", "\<bottom> \<oplus> ?x = ?x",
     template_equation
      (template_app
        (template_app (template_hole 1, template_hole 0), template_var 0),
       template_var 0)),
    ("List_Bits.xor_bot", "?x \<oplus> \<bottom> = ?x",
     template_equation
      (template_app
        (template_app (template_hole 1, template_var 0), template_hole 0),
       template_var 0)),
    ("List_Bits.xor_inverse", "?x \<oplus> ?x = \<bottom>",
     template_equation
      (template_app
        (template_app (template_hole 1, template_var 0), template_var 0),
       template_hole 0)),
    ("List_Bits.top_xor", "\<top> \<oplus> ?x = - ?x",
     template_equation
      (template_app
        (template_app (template_hole 2, template_hole 1), template_var 0),
       template_app (template_hole 0, template_var 0))),
    ("List_Bits.xor_top", "?x \<oplus> \<top> = - ?x",
     template_equation
      (template_app
        (template_app (template_hole 2, template_var 0), template_hole 1),
       template_app (template_hole 0, template_var 0))),
    ("List_Bits.xor_commute", "?x \<oplus> ?y = ?y \<oplus> ?x",
     template_equation
      (template_app
        (template_app (template_hole 0, template_var 1), template_var 0),
       template_app
        (template_app (template_hole 0, template_var 0), template_var 1))),
    ("List_Bits.xor_left_inverse", "?x \<oplus> ?x \<oplus> ?y = ?y",
     template_equation
      (template_app
        (template_app (template_hole 0, template_var 1),
         template_app
          (template_app (template_hole 0, template_var 1), template_var 0)),
       template_var 0)),
    ("List_Bits.xor_list_commute",
     "?xs [\<oplus>] ?ys = ?ys [\<oplus>] ?xs",
     template_equation
      (template_app
        (template_app (template_hole 0, template_var 1), template_var 0),
       template_app
        (template_app (template_hole 0, template_var 0), template_var 1))),
    ("List_Bits.xor_list_inverse",
     "?xs [\<oplus>] ?xs = replicate (length ?xs) \<bottom>",
     template_equation
      (template_app
        (template_app (template_hole 3, template_var 0), template_var 0),
       template_app
        (template_app
          (template_hole 2, template_app (template_hole 1, template_var 0)),
         template_hole 0))),
    ("List_Bits.length_xor_list",
     "length (?xs [\<oplus>] ?ys) = min (length ?xs) (length ?ys)",
     template_equation
      (template_app
        (template_hole 2,
         template_app
          (template_app (template_hole 1, template_var 1), template_var 0)),
       template_app
        (template_app
          (template_hole 0, template_app (template_hole 2, template_var 1)),
         template_app (template_hole 2, template_var 0)))),
    ("List_Bits.xor_left_commute",
     "?x \<oplus> ?y \<oplus> ?z = ?y \<oplus> ?x \<oplus> ?z",
     template_equation
      (template_app
        (template_app (template_hole 0, template_var 2),
         template_app
          (template_app (template_hole 0, template_var 1), template_var 0)),
       template_app
        (template_app (template_hole 0, template_var 1),
         template_app
          (template_app (template_hole 0, template_var 2),
           template_var 0)))),
    ("List_Bits.xor_assoc",
     "(?x \<oplus> ?y) \<oplus> ?z = ?x \<oplus> ?y \<oplus> ?z",
     template_equation
      (template_app
        (template_app
          (template_hole 0,
           template_app
            (template_app (template_hole 0, template_var 2),
             template_var 1)),
         template_var 0),
       template_app
        (template_app (template_hole 0, template_var 2),
         template_app
          (template_app (template_hole 0, template_var 1),
           template_var 0)))),
    ("List_Bits.xor_list_left_commute",
     "?xs [\<oplus>] ?ys [\<oplus>] ?zs =
      ?ys [\<oplus>] ?xs [\<oplus>] ?zs",
     template_equation
      (template_app
        (template_app (template_hole 0, template_var 2),
         template_app
          (template_app (template_hole 0, template_var 1), template_var 0)),
       template_app
        (template_app (template_hole 0, template_var 1),
         template_app
          (template_app (template_hole 0, template_var 2),
           template_var 0)))),
    ("List_Bits.xor_list_assoc",
     "(?xs [\<oplus>] ?ys) [\<oplus>] ?zs =
      ?xs [\<oplus>] ?ys [\<oplus>] ?zs",
     template_equation
      (template_app
        (template_app
          (template_hole 0,
           template_app
            (template_app (template_hole 0, template_var 2),
             template_var 1)),
         template_var 0),
       template_app
        (template_app (template_hole 0, template_var 2),
         template_app
          (template_app (template_hole 0, template_var 1),
           template_var 0)))),
    ("List_Bits.inj_on_xor_list_nlists",
     "?n <= length ?xs ==> inj_on (([\<oplus>]) ?xs) (nlists UNIV ?n)",
     template_implication
      ([template_inequation
         (less_equals, template_var 1,
          template_app (template_hole 4, template_var 0))],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 3,
               template_app (template_hole 2, template_var 0)),
             template_app
              (template_app (template_hole 1, template_hole 0),
               template_var 1))
           ))),
    ("List_Bits.xor_list_left_inverse",
     "length ?ys <= length ?xs ==> ?xs [\<oplus>] ?xs [\<oplus>] ?ys = ?ys",
     template_implication
      ([template_inequation
         (less_equals, template_app (template_hole 2, template_var 1),
          template_app (template_hole 2, template_var 0))],
       template_equation
        (template_app
          (template_app (template_hole 0, template_var 0),
           template_app
            (template_app (template_hole 0, template_var 0),
             template_var 1)),
         template_var 1))),
    ("List_Bits.xor_replicate_bot_right",
     "[| length ?xs <= ?n; ?x = \<bottom> |]
      ==> ?xs [\<oplus>] replicate ?n ?x = ?xs",
     template_implication
      ([template_inequation
         (less_equals, template_app (template_hole 5, template_var 2),
          template_var 1),
        template_equation (template_var 0, template_hole 3)],
       template_equation
        (template_app
          (template_app (template_hole 1, template_var 2),
           template_app
            (template_app (template_hole 0, template_var 1),
             template_var 0)),
         template_var 2))),
    ("List_Bits.xor_replicate_bot_left",
     "[| length ?xs <= ?n; ?x = \<bottom> |]
      ==> replicate ?n ?x [\<oplus>] ?xs = ?xs",
     template_implication
      ([template_inequation
         (less_equals, template_app (template_hole 5, template_var 2),
          template_var 1),
        template_equation (template_var 0, template_hole 3)],
       template_equation
        (template_app
          (template_app
            (template_hole 1,
             template_app
              (template_app (template_hole 0, template_var 1),
               template_var 0)),
           template_var 2),
         template_var 2))),
    ("List_Bits.one_time_pad",
     "?n <= length ?xs ==>
      map_spmf (([\<oplus>]) ?xs) (spmf_of_set (nlists UNIV ?n)) =
      spmf_of_set (nlists UNIV ?n)",
     template_implication
      ([template_inequation
         (less_equals, template_var 1,
          template_app (template_hole 7, template_var 0))],
       template_equation
        (template_app
          (template_app
            (template_hole 5,
             template_app
              (template_hole 4,
               template_app (template_hole 3, template_var 0))),
           template_app
            (template_hole 2,
             template_app
              (template_app (template_hole 1, template_hole 0),
               template_var 1))),
         template_app
          (template_hole 2,
           template_app
            (template_app (template_hole 1, template_hole 0),
             template_var 1))))),
    ("List_Bits.xor_list_unfold",
     "?xs [\<oplus>] ?ys =
      (case ?xs of [] => []
       | x # xs' =>
           case ?ys of [] => []
           | y # ys' => x \<oplus> y # xs' [\<oplus>] ys')",
     template_equation
      (template_app
        (template_app (template_hole 4, template_var 1), template_var 0),
       template_app
        (template_app
          (template_app (template_hole 3, template_hole 2), t_empty),
         template_var 1)))]
