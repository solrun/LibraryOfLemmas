Loading theory "Draft.Templates" (required by "Draft.GeneratTemplates" via "Draft.ExtrEqs")
Loading theory "HOL-Library.BigO" (required by "Draft.GeneratTemplates" via "Draft.ExtrEqs")
Loading theory "Draft.Misc_CryptHOL" (required by "Draft.GeneratTemplates" via "Draft.Generat")
datatype template_term
=
     t_empty
   | template_app of template_term * template_term
   | template_hole of int
   | template_var of int
datatype sign
= equals | greater_equals | greater_than | less_equals | less_than
datatype template
=
     template_bimplication of template * template
   | template_dunno
   | template_equation of template_term * template_term
   | template_implication of template list * template
   | template_inequation of sign * template_term * template_term
   | template_negation of template
   | template_predicate of template_term
constructor t_empty: template_term
constructor template_app: template_term * template_term -> template_term
constructor template_hole: int -> template_term
constructor template_var: int -> template_term
constructor equals: sign
constructor greater_equals: sign
constructor greater_than: sign
constructor less_equals: sign
constructor less_than: sign
constructor template_bimplication: template * template -> template
constructor template_dunno: template
constructor template_equation: template_term * template_term -> template
constructor template_implication: template list * template -> template
constructor template_inequation:
   sign * template_term * template_term -> template
constructor template_negation: template -> template
constructor template_predicate: template_term -> template
val vfs = fn: term -> (indexname * typ) list * (string * typ) list
val indexOf = fn: ''a list -> ''a -> int -> int
val has_eq = fn: term -> bool
val term2template = fn:
   (indexname * typ) list -> (string * typ) list -> term -> template_term
val lemma2predicate = fn: term -> term -> template
val makeTemplatewithContext = fn: term -> term -> template
val lemma2template = fn: term -> template
val thm2template = fn: thm -> template
val tterm2string = fn: template_term -> string
val template2string = fn: template -> string
val t = "height ?t <= size ?t": thm
val th =
   Const ("HOL.Trueprop", "bool => prop") $
     (Const ("Orderings.ord_class.less_eq", "nat => nat => bool") $
       (Const ("Tree.height_class.height", "?'a tree => nat") $
         Var (("t", 0), "?'a tree")) $
       (Const ("Nat.size_class.size", "?'a tree => nat") $
         Var (("t", 0), "?'a tree"))):
   term
### theory "Draft.Templates"
### 0.070s elapsed time, 0.245s cpu time, 0.000s GC time
### theory "HOL-Library.BigO"
### 0.730s elapsed time, 1.577s cpu time, 0.099s GC time
Loading theory "Draft.ExtrEqs" (required by "Draft.GeneratTemplates")
val eqpattern =
   Pattern
    (
       Const ("HOL.Trueprop", "bool => prop") $
         (Const ("HOL.eq", "?'a => ?'a => bool") $
           Var (("_dummy_", 1), "?'a") $ Var (("_dummy_", 2), "?'a"))
       ):
   term Find_Theorems.criterion
val badeqpattern = Pattern (Const ("Pure.eq", "?'a => ?'a => prop")):
   term Find_Theorems.criterion
val undefpattern =
   Pattern
    (
       Const ("HOL.Trueprop", "bool => prop") $
         (Const ("HOL.eq", "?'a => ?'a => bool") $
           Var (("_dummy_", 1), "?'a") $ Const ("HOL.undefined", "?'a"))
       ):
   term Find_Theorems.criterion
val thmpattern =
   Pattern
    (Const ("HOL.Trueprop", "bool => prop") $ Var (("_dummy_", 1), "bool")):
   term Find_Theorems.criterion
val badnames =
   ["*nitpick*", "*Nitpick*", "*full_exhaustive*", "*_def*", "Enum.finite*",
    "*Quickcheck*", "ATP*", "*Nunchaku*", "*Code*", "*BNF*", "*SMT*",
    "*.*.*"]:
   string list
val unwanted_names =
   [(false, Name "*nitpick*"), (false, Name "*Nitpick*"),
    (false, Name "*full_exhaustive*"), (false, Name "*_def*"),
    (false, Name "Enum.finite*"), (false, Name "*Quickcheck*"),
    (false, Name "ATP*"), (false, Name "*Nunchaku*"),
    (false, Name "*Code*"), (false, Name "*BNF*"), (false, Name "*SMT*"),
    (false, Name "*.*.*")]:
   (bool * term Find_Theorems.criterion) list
val has_vars = fn: term -> bool
val get_all_eqs = fn: string -> Proof.context -> (string * thm) list
val get_all_thms = fn: string -> Proof.context -> (string * thm) list
val get_noneq_thms = fn: string -> Proof.context -> (string * thm) list
val template_eqs = fn:
   string -> Proof.context -> (string * thm * template) list
val template_thms = fn:
   string -> Proof.context -> (string * thm * template) list
### theory "Draft.ExtrEqs"
### 0.541s elapsed time, 1.104s cpu time, 0.073s GC time
Proofs for inductive predicate(s) "Imagep"
  Proving monotonicity ...
specification
  relcompp_witness1: (?A OO ?B) (fst ?xy) (snd ?xy) ==> ?A (fst ?xy) (relcompp_witness ?A ?B ?xy)
  relcompp_witness2: (?A OO ?B) (fst ?xy) (snd ?xy) ==> ?B (relcompp_witness ?A ?B ?xy) (snd ?xy)
Found termination order: "{}"
Found termination order: "{}"
Found termination order: "{}"
Found termination order: "{}"
Found termination order: "{}"
consts
  assert_option :: "bool => unit option"
consts
  sup_option :: "'a option => 'a option => 'a option"
consts
  enforce_option :: "('a => bool) => 'a option => 'a option"
### Ignoring duplicate rewrite rule:
### real ?n1 <= 1 == ?n1 <= 1
Proofs for inductive predicate(s) "finite_chains"
  Proving monotonicity ...
locale partial_function_definitions
  fixes leq :: "'a => 'a => bool"
    and lub :: "'a set => 'a"
  assumes "partial_function_definitions leq lub"
Proofs for inductive predicate(s) "nlistsp"
  Proving monotonicity ...
consts
  sprefix :: "'a list => 'a stream => bool"
locale monad_fail_hom
  fixes return1 :: "'a => 'm1"
    and bind1 :: "'m1 => ('a => 'm1) => 'm1"
    and fail1 :: "'m1"
    and return2 :: "'a => 'm2"
    and bind2 :: "'m2 => ('a => 'm2) => 'm2"
    and fail2 :: "'m2"
    and h :: "'m1 => 'm2"
  assumes "monad_fail_hom return1 bind1 fail1 return2 bind2 fail2 h"
specification
  set_rel_witness_pmf': rel_pmf ?A (fst ?xy) (snd ?xy) ==>
set_pmf (rel_witness_pmf ?A ?xy) <= {(a, b). ?A a b}
  map1_rel_witness_pmf': rel_pmf ?A (fst ?xy) (snd ?xy) ==>
map_pmf fst (rel_witness_pmf ?A ?xy) = fst ?xy
  map2_rel_witness_pmf': rel_pmf ?A (fst ?xy) (snd ?xy) ==>
map_pmf snd (rel_witness_pmf ?A ?xy) = snd ?xy
locale option_to_spmf
locale option_le_spmf
### theory "Draft.Misc_CryptHOL"
### 4.912s elapsed time, 6.703s cpu time, 0.836s GC time
Loading theory "Draft.Generat" (required by "Draft.GeneratTemplates")
Found termination order: "{}"
### Missing patterns in function definition:
### !!vb vc v. rel_witness_generat (IO vb vc, Pure v) = undefined
### !!va vb vc. rel_witness_generat (Pure va, IO vb vc) = undefined
Found termination order: "{}"
### theory "Draft.Generat"
### 1.388s elapsed time, 1.890s cpu time, 0.690s GC time
Loading theory "Draft.GeneratTemplates"
val templateLemmas =
   [("Generat.countable_generat_outs", "countable (generat_outs ?generat)",
     template_predicate
      (
         template_app
          (template_hole 1, template_app (template_hole 0, template_var 0))
         )),
    ("Generat.finite_generat_outs", "finite (generat_outs ?generat)",
     template_predicate
      (
         template_app
          (template_hole 1, template_app (template_hole 0, template_var 0))
         )),
    ("Generat.dest_IO_eq_None_iff",
     "(dest_IO ?generat = None) = is_Pure ?generat",
     template_equation
      (template_app
        (template_app
          (template_hole 3, template_app (template_hole 2, template_var 0)),
         template_hole 1),
       template_app (template_hole 0, template_var 0))),
    ("Generat.is_Pure_map_generat",
     "is_Pure (map_generat ?f ?g ?h ?x) = is_Pure ?x",
     template_equation
      (template_app
        (template_hole 2,
         template_app
          (template_app
            (template_app
              (template_app (template_hole 1, template_var 3),
               template_var 2),
             template_var 1),
           template_var 0)),
       template_app (template_hole 0, template_var 0))),
    ("Generat.continuation_in_generat_conts",
     "~ is_Pure ?r ==> continuation ?r : generat_conts ?r",
     template_implication
      ([template_negation
         (
            template_predicate
             (template_app (template_hole 3, template_var 0))
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 2,
               template_app (template_hole 1, template_var 0)),
             template_app (template_hole 0, template_var 0))
           ))),
    ("Generat.is_Pure_generat_lub",
     "is_Pure (generat_lub ?lub1.0 ?lub2.0 ?lub3.0 ?A) =
      (EX x:?A. is_Pure x)",
     template_equation
      (template_app
        (template_hole 3,
         template_app
          (template_app
            (template_app
              (template_app (template_hole 2, template_var 3),
               template_var 2),
             template_var 1),
           template_var 0)),
       template_app
        (template_app (template_hole 1, template_var 0), t_empty))),
    ("Generat.IO_code_cong", "?out = ?out' ==> IO ?out ?c = IO ?out' ?c",
     template_implication
      ([template_equation (template_var 2, template_var 1)],
       template_equation
        (template_app
          (template_app (template_hole 0, template_var 2), template_var 0),
         template_app
          (template_app (template_hole 0, template_var 1),
           template_var 0)))),
    ("Generat.not_is_Pure_conv",
     "(~ is_Pure ?r) = (EX out c. ?r = IO out c)",
     template_equation
      (template_app
        (template_hole 5, template_app (template_hole 4, template_var 0)),
       template_app (template_hole 3, t_empty))),
    ("Generat.dest_IO_eq_Some_iff",
     "(dest_IO ?generat = Some (?out, ?c)) = (?generat = IO ?out ?c)",
     template_bimplication
      (template_equation
        (template_app (template_hole 4, template_var 2),
         template_app
          (template_hole 3,
           template_app
            (template_app (template_hole 2, template_var 1),
             template_var 0))),
       template_equation
        (template_var 2,
         template_app
          (template_app (template_hole 0, template_var 1),
           template_var 0)))),
    ("Generat.rel_generat_is_PureD",
     "rel_generat ?A ?Out ?R ?x ?y ==> is_Pure ?x = is_Pure ?y",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_app
                   (template_app (template_hole 3, template_var 4),
                    template_var 3),
                  template_var 2),
                template_var 1),
              template_var 0)
            )],
       template_equation
        (template_app (template_hole 1, template_var 1),
         template_app (template_hole 0, template_var 0)))),
    ("Generat.reflp_rel_generat",
     "reflp (rel_generat ?A ?B ?C) = (reflp ?A & reflp ?B & reflp ?C)",
     template_equation
      (template_app
        (template_hole 5,
         template_app
          (template_app
            (template_app (template_hole 4, template_var 2),
             template_var 1),
           template_var 0)),
       template_app
        (template_app
          (template_hole 3, template_app (template_hole 2, template_var 2)),
         template_app
          (template_app
            (template_hole 3,
             template_app (template_hole 1, template_var 1)),
           template_app (template_hole 0, template_var 0))))),
    ("Generat.result_map_generat",
     "is_Pure ?x ==>
      generat.result (map_generat ?f ?g ?h ?x) = ?f (generat.result ?x)",
     template_implication
      ([template_predicate
         (template_app (template_hole 4, template_var 3))],
       template_equation
        (template_app
          (template_hole 2,
           template_app
            (template_app
              (template_app
                (template_app (template_hole 1, template_var 2),
                 template_var 1),
               template_var 0),
             template_var 3)),
         template_app
          (template_var 2,
           template_app (template_hole 0, template_var 3))))),
    ("Generat.continuation_map_generat",
     "~ is_Pure ?x ==>
      continuation (map_generat ?f ?g ?h ?x) = ?h (continuation ?x)",
     template_implication
      ([template_negation
         (
            template_predicate
             (template_app (template_hole 4, template_var 3))
            )],
       template_equation
        (template_app
          (template_hole 2,
           template_app
            (template_app
              (template_app
                (template_app (template_hole 1, template_var 2),
                 template_var 1),
               template_var 0),
             template_var 3)),
         template_app
          (template_var 0,
           template_app (template_hole 0, template_var 3))))),
    ("Generat.output_map_generat",
     "~ is_Pure ?x ==>
      generat.output (map_generat ?f ?g ?h ?x) = ?g (generat.output ?x)",
     template_implication
      ([template_negation
         (
            template_predicate
             (template_app (template_hole 4, template_var 3))
            )],
       template_equation
        (template_app
          (template_hole 2,
           template_app
            (template_app
              (template_app
                (template_app (template_hole 1, template_var 2),
                 template_var 1),
               template_var 0),
             template_var 3)),
         template_app
          (template_var 1,
           template_app (template_hole 0, template_var 3))))),
    ("Generat.is_PureE",
     "[| is_Pure ?generat; !!x. ?generat = Pure x ==> ?thesis |]
      ==> ?thesis",
     template_implication
      ([template_predicate (template_app (template_hole 3, template_var 1)),
        template_predicate (template_app (template_hole 2, t_empty))],
       template_predicate (template_var 0))),
    ("Generat.transp_rel_generatI",
     "[| transp ?A; transp ?B; transp ?C |]
      ==> transp (rel_generat ?A ?B ?C)",
     template_implication
      ([template_predicate (template_app (template_hole 4, template_var 2)),
        template_predicate (template_app (template_hole 3, template_var 1)),
        template_predicate
         (template_app (template_hole 2, template_var 0))],
       template_predicate
        (
           template_app
            (template_hole 1,
             template_app
              (template_app
                (template_app (template_hole 0, template_var 2),
                 template_var 1),
               template_var 0))
           ))),
    ("Generat.rel_generat_Pure1",
     "rel_generat ?A ?B ?C (Pure ?x) = (%r. EX y. r = Pure y & ?A ?x y)",
     template_equation
      (template_app
        (template_app
          (template_app
            (template_app (template_hole 5, template_var 3),
             template_var 2),
           template_var 1),
         template_app (template_hole 4, template_var 0)),
       t_empty)),
    ("Generat.map1_rel_witness_generat",
     "rel_generat ?A ?C ?R ?x ?y ==>
      map_generat fst fst fst (rel_witness_generat (?x, ?y)) = ?x",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_app
                   (template_app (template_hole 7, template_var 4),
                    template_var 3),
                  template_var 2),
                template_var 1),
              template_var 0)
            )],
       template_equation
        (template_app
          (template_app
            (template_app
              (template_app (template_hole 5, template_hole 4),
               template_hole 3),
             template_hole 2),
           template_app
            (template_hole 1,
             template_app
              (template_app (template_hole 0, template_var 1),
               template_var 0))),
         template_var 1))),
    ("Generat.map2_rel_witness_generat",
     "rel_generat ?A ?C ?R ?x ?y ==>
      map_generat snd snd snd (rel_witness_generat (?x, ?y)) = ?y",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_app
                   (template_app (template_hole 7, template_var 4),
                    template_var 3),
                  template_var 2),
                template_var 1),
              template_var 0)
            )],
       template_equation
        (template_app
          (template_app
            (template_app
              (template_app (template_hole 5, template_hole 4),
               template_hole 3),
             template_hole 2),
           template_app
            (template_hole 1,
             template_app
              (template_app (template_hole 0, template_var 1),
               template_var 0))),
         template_var 0))),
    ("Generat.case_map_generat",
     "(case map_generat ?a ?b ?d ?r of Pure x => pure x
       | IO x xa => ?io x xa) =
      (case ?r of Pure x => (pure o ?a) x
       | IO out x => (?io (?b out) o ?d) x)",
     template_equation
      (template_app
        (template_app
          (template_app (template_hole 5, template_hole 4), template_var 4),
         template_app
          (template_app
            (template_app
              (template_app (template_hole 3, template_var 3),
               template_var 2),
             template_var 1),
           template_var 0)),
       template_app
        (template_app
          (template_app
            (template_hole 2,
             template_app
              (template_app (template_hole 1, template_hole 4),
               template_var 3)),
           t_empty),
         template_var 0))),
    ("Generat.rel_generat_inf",
     "rel_generat ?A ?B ?C \<sqinter> rel_generat ?A' ?B' ?C' =
      rel_generat (?A \<sqinter> ?A') (?B \<sqinter> ?B')
       (?C \<sqinter> ?C')",
     template_equation
      (template_app
        (template_app
          (template_hole 4,
           template_app
            (template_app
              (template_app (template_hole 3, template_var 5),
               template_var 4),
             template_var 3)),
         template_app
          (template_app
            (template_app (template_hole 3, template_var 2),
             template_var 1),
           template_var 0)),
       template_app
        (template_app
          (template_app
            (template_hole 3,
             template_app
              (template_app (template_hole 2, template_var 5),
               template_var 2)),
           template_app
            (template_app (template_hole 1, template_var 4),
             template_var 1)),
         template_app
          (template_app (template_hole 0, template_var 3),
           template_var 0)))),
    ("Generat.Pure_eq_map_generat",
     "(Pure ?x = map_generat ?f ?g ?h ?generat) =
      (EX x'. ?generat = Pure x' & ?x = ?f x')",
     template_equation
      (template_app
        (template_app
          (template_hole 7, template_app (template_hole 6, template_var 4)),
         template_app
          (template_app
            (template_app
              (template_app (template_hole 5, template_var 3),
               template_var 2),
             template_var 1),
           template_var 0)),
       template_app (template_hole 4, t_empty))),
    ("Generat.map_generat_eq_Pure",
     "(map_generat ?f ?g ?h ?generat = Pure ?x) =
      (EX x'. ?generat = Pure x' & ?x = ?f x')",
     template_equation
      (template_app
        (template_app
          (template_hole 7,
           template_app
            (template_app
              (template_app
                (template_app (template_hole 6, template_var 4),
                 template_var 3),
               template_var 2),
             template_var 1)),
         template_app (template_hole 5, template_var 0)),
       template_app (template_hole 4, t_empty))),
    ("Generat.not_is_PureE",
     "[| ~ is_Pure ?generat; !!out c. ?generat = IO out c ==> ?thesis |]
      ==> ?thesis",
     template_implication
      ([template_negation
         (
            template_predicate
             (template_app (template_hole 4, template_var 1))
            ),
        template_predicate (template_app (template_hole 3, t_empty))],
       template_predicate (template_var 0))),
    ("Generat.rel_generat_resultD",
     "[| rel_generat ?A ?Out ?R ?x ?y; is_Pure ?x | is_Pure ?y |]
      ==> ?A (generat.result ?x) (generat.result ?y)",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_app
                   (template_app (template_hole 5, template_var 4),
                    template_var 3),
                  template_var 2),
                template_var 1),
              template_var 0)
            ),
        template_predicate
         (
            template_app
             (template_app
               (template_hole 4,
                template_app (template_hole 3, template_var 1)),
              template_app (template_hole 2, template_var 0))
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_var 4,
               template_app (template_hole 1, template_var 1)),
             template_app (template_hole 0, template_var 0))
           ))),
    ("Generat.map_generat_lub",
     "map_generat ?f ?g ?h (generat_lub ?lub1.0 ?lub2.0 ?lub3.0 ?A) =
      generat_lub (?f o ?lub1.0) (?g o ?lub2.0) (?h o ?lub3.0) ?A",
     template_equation
      (template_app
        (template_app
          (template_app
            (template_app (template_hole 5, template_var 6),
             template_var 5),
           template_var 4),
         template_app
          (template_app
            (template_app
              (template_app (template_hole 4, template_var 3),
               template_var 2),
             template_var 1),
           template_var 0)),
       template_app
        (template_app
          (template_app
            (template_app
              (template_hole 3,
               template_app
                (template_app (template_hole 2, template_var 6),
                 template_var 3)),
             template_app
              (template_app (template_hole 1, template_var 5),
               template_var 2)),
           template_app
            (template_app (template_hole 0, template_var 4),
             template_var 1)),
         template_var 0))),
    ("Generat.pures_rel_witness_generat",
     "rel_generat ?A ?C ?R ?x ?y ==>
      generat_pures (rel_witness_generat (?x, ?y)) <= {(a, b). ?A a b}",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_app
                   (template_app (template_hole 6, template_var 4),
                    template_var 3),
                  template_var 2),
                template_var 1),
              template_var 0)
            )],
       template_inequation
        (less_equals,
         template_app
          (template_hole 4,
           template_app
            (template_hole 3,
             template_app
              (template_app (template_hole 2, template_var 1),
               template_var 0))),
         template_app
          (template_hole 1, template_app (template_hole 0, t_empty))))),
    ("Generat.outs_rel_witness_generat",
     "rel_generat ?A ?C ?R ?x ?y ==>
      generat_outs (rel_witness_generat (?x, ?y)) <= {(c, d). ?C c d}",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_app
                   (template_app (template_hole 6, template_var 4),
                    template_var 3),
                  template_var 2),
                template_var 1),
              template_var 0)
            )],
       template_inequation
        (less_equals,
         template_app
          (template_hole 4,
           template_app
            (template_hole 3,
             template_app
              (template_app (template_hole 2, template_var 1),
               template_var 0))),
         template_app
          (template_hole 1, template_app (template_hole 0, t_empty))))),
    ("Generat.conts_rel_witness_generat",
     "rel_generat ?A ?C ?R ?x ?y ==>
      generat_conts (rel_witness_generat (?x, ?y)) <= {(e, f). ?R e f}",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_app
                   (template_app (template_hole 6, template_var 4),
                    template_var 3),
                  template_var 2),
                template_var 1),
              template_var 0)
            )],
       template_inequation
        (less_equals,
         template_app
          (template_hole 4,
           template_app
            (template_hole 3,
             template_app
              (template_app (template_hole 2, template_var 1),
               template_var 0))),
         template_app
          (template_hole 1, template_app (template_hole 0, t_empty))))),
    ("Generat.rel_generat_outputD",
     "[| rel_generat ?A ?Out ?R ?x ?y; ~ is_Pure ?x | ~ is_Pure ?y |]
      ==> ?Out (generat.output ?x) (generat.output ?y)",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_app
                   (template_app (template_hole 6, template_var 4),
                    template_var 3),
                  template_var 2),
                template_var 1),
              template_var 0)
            ),
        template_predicate
         (
            template_app
             (template_app
               (template_hole 5,
                template_app
                 (template_hole 4,
                  template_app (template_hole 3, template_var 1))),
              template_app
               (template_hole 4,
                template_app (template_hole 2, template_var 0)))
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_var 3,
               template_app (template_hole 1, template_var 1)),
             template_app (template_hole 0, template_var 0))
           ))),
    ("Generat.rel_generat_continuationD",
     "[| rel_generat ?A ?Out ?R ?x ?y; ~ is_Pure ?x | ~ is_Pure ?y |]
      ==> ?R (continuation ?x) (continuation ?y)",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_app
                   (template_app (template_hole 6, template_var 4),
                    template_var 3),
                  template_var 2),
                template_var 1),
              template_var 0)
            ),
        template_predicate
         (
            template_app
             (template_app
               (template_hole 5,
                template_app
                 (template_hole 4,
                  template_app (template_hole 3, template_var 1))),
              template_app
               (template_hole 4,
                template_app (template_hole 2, template_var 0)))
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_var 2,
               template_app (template_hole 1, template_var 1)),
             template_app (template_hole 0, template_var 0))
           ))),
    ("Generat.result_generat_lub",
     "EX x:?A. is_Pure x ==>
      generat.result (generat_lub ?lub1.0 ?lub2.0 ?lub3.0 ?A) =
      ?lub1.0 (generat.result ` (?A Int {f. is_Pure f}))",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 8, template_var 3), t_empty)
            )],
       template_equation
        (template_app
          (template_hole 5,
           template_app
            (template_app
              (template_app
                (template_app (template_hole 4, template_var 2),
                 template_var 1),
               template_var 0),
             template_var 3)),
         template_app
          (template_var 2,
           template_app
            (template_app (template_hole 3, template_hole 2),
             template_app
              (template_app (template_hole 1, template_var 3),
               template_app (template_hole 0, t_empty))))))),
    ("Generat.generat_lub_map",
     "generat_lub ?lub1.0 ?lub2.0 ?lub3.0 (map_generat ?f ?g ?h ` ?A) =
      generat_lub (?lub1.0 o (`) ?f) (?lub2.0 o (`) ?g) (?lub3.0 o (`) ?h)
       ?A",
     template_equation
      (template_app
        (template_app
          (template_app
            (template_app (template_hole 9, template_var 6),
             template_var 5),
           template_var 4),
         template_app
          (template_app
            (template_hole 8,
             template_app
              (template_app
                (template_app (template_hole 7, template_var 3),
                 template_var 2),
               template_var 1)),
           template_var 0)),
       template_app
        (template_app
          (template_app
            (template_app
              (template_hole 6,
               template_app
                (template_app (template_hole 5, template_var 6),
                 template_app (template_hole 4, template_var 3))),
             template_app
              (template_app (template_hole 3, template_var 5),
               template_app (template_hole 2, template_var 2))),
           template_app
            (template_app (template_hole 1, template_var 4),
             template_app (template_hole 0, template_var 1))),
         template_var 0))),
    ("Generat.continuation_generat_lub",
     "ALL x:?A. ~ is_Pure x ==>
      continuation (generat_lub ?lub1.0 ?lub2.0 ?lub3.0 ?A) =
      ?lub3.0 (continuation ` (?A Int {f. ~ is_Pure f}))",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 9, template_var 3), t_empty)
            )],
       template_equation
        (template_app
          (template_hole 5,
           template_app
            (template_app
              (template_app
                (template_app (template_hole 4, template_var 2),
                 template_var 1),
               template_var 0),
             template_var 3)),
         template_app
          (template_var 0,
           template_app
            (template_app (template_hole 3, template_hole 2),
             template_app
              (template_app (template_hole 1, template_var 3),
               template_app (template_hole 0, t_empty))))))),
    ("Generat.output_generat_lub",
     "ALL x:?A. ~ is_Pure x ==>
      generat.output (generat_lub ?lub1.0 ?lub2.0 ?lub3.0 ?A) =
      ?lub2.0 (generat.output ` (?A Int {f. ~ is_Pure f}))",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 9, template_var 3), t_empty)
            )],
       template_equation
        (template_app
          (template_hole 5,
           template_app
            (template_app
              (template_app
                (template_app (template_hole 4, template_var 2),
                 template_var 1),
               template_var 0),
             template_var 3)),
         template_app
          (template_var 1,
           template_app
            (template_app (template_hole 3, template_hole 2),
             template_app
              (template_app (template_hole 1, template_var 3),
               template_app (template_hole 0, t_empty))))))),
    ("Generat.rel_generat_IO1",
     "rel_generat ?A ?B ?C (IO ?out ?c) =
      (%r. EX out' c'. r = IO out' c' & ?B ?out out' & ?C ?c c')",
     template_equation
      (template_app
        (template_app
          (template_app
            (template_app (template_hole 6, template_var 4),
             template_var 3),
           template_var 2),
         template_app
          (template_app (template_hole 5, template_var 1), template_var 0)),
       t_empty)),
    ("Generat.IO_eq_map_generat",
     "(IO ?out ?c = map_generat ?f ?g ?h ?generat) =
      (EX out' c'. ?generat = IO out' c' & ?out = ?g out' & ?c = ?h c')",
     template_equation
      (template_app
        (template_app
          (template_hole 9,
           template_app
            (template_app (template_hole 8, template_var 5),
             template_var 4)),
         template_app
          (template_app
            (template_app
              (template_app (template_hole 7, template_var 3),
               template_var 2),
             template_var 1),
           template_var 0)),
       template_app (template_hole 6, t_empty))),
    ("Generat.map_generat_eq_IO",
     "(map_generat ?f ?g ?h ?generat = IO ?out ?c) =
      (EX out' c'. ?generat = IO out' c' & ?out = ?g out' & ?c = ?h c')",
     template_equation
      (template_app
        (template_app
          (template_hole 9,
           template_app
            (template_app
              (template_app
                (template_app (template_hole 8, template_var 5),
                 template_var 4),
               template_var 3),
             template_var 2)),
         template_app
          (template_app (template_hole 7, template_var 1), template_var 0)),
       template_app (template_hole 6, t_empty))),
    ("Generat.rel_generat_same",
     "rel_generat ?A ?B ?C ?r ?r =
      ((ALL x:generat_pures ?r. ?A x x) &
       (ALL out:generat_outs ?r. ?B out out) &
       (ALL c:generat_conts ?r. ?C c c))",
     template_equation
      (template_app
        (template_app
          (template_app
            (template_app
              (template_app (template_hole 7, template_var 3),
               template_var 2),
             template_var 1),
           template_var 0),
         template_var 0),
       template_app
        (template_app
          (template_hole 6,
           template_app
            (template_app
              (template_hole 5,
               template_app (template_hole 4, template_var 0)),
             t_empty)),
         template_app
          (template_app
            (template_hole 6,
             template_app
              (template_app
                (template_hole 3,
                 template_app (template_hole 2, template_var 0)),
               t_empty)),
           template_app
            (template_app
              (template_hole 1,
               template_app (template_hole 0, template_var 0)),
             t_empty))))),
    ("Generat.rel_generatD'",
     "rel_generat ?A ?Out ?R ?x ?y ==>
      is_Pure ?x = is_Pure ?y &
      (is_Pure ?x -->
       is_Pure ?y --> ?A (generat.result ?x) (generat.result ?y)) &
      (~ is_Pure ?x -->
       ~ is_Pure ?y -->
       ?Out (generat.output ?x) (generat.output ?y) &
       ?R (continuation ?x) (continuation ?y))",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_app
                   (template_app (template_hole 12, template_var 4),
                    template_var 3),
                  template_var 2),
                template_var 1),
              template_var 0)
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 11,
               template_app
                (template_app
                  (template_hole 10,
                   template_app (template_hole 9, template_var 1)),
                 template_app (template_hole 8, template_var 0))),
             template_app
              (template_app
                (template_hole 11,
                 template_app
                  (template_app
                    (template_hole 7,
                     template_app (template_hole 9, template_var 1)),
                   template_app
                    (template_app
                      (template_hole 7,
                       template_app (template_hole 8, template_var 0)),
                     template_app
                      (template_app
                        (template_var 4,
                         template_app (template_hole 6, template_var 1)),
                       template_app (template_hole 5, template_var 0))))),
               template_app
                (template_app
                  (template_hole 7,
                   template_app
                    (template_hole 4,
                     template_app (template_hole 9, template_var 1))),
                 template_app
                  (template_app
                    (template_hole 7,
                     template_app
                      (template_hole 4,
                       template_app (template_hole 8, template_var 0))),
                   template_app
                    (template_app
                      (template_hole 11,
                       template_app
                        (template_app
                          (template_var 3,
                           template_app (template_hole 3, template_var 1)),
                         template_app (template_hole 2, template_var 0))),
                     template_app
                      (template_app
                        (template_var 2,
                         template_app (template_hole 1, template_var 1)),
                       template_app (template_hole 0, template_var 0)))))))
           ))),
    ("Generat.rel_generat_reflI",
     "[| !!y. y : generat_pures ?x ==> ?A y y;
         !!out. out : generat_outs ?x ==> ?B out out;
         !!cont. cont : generat_conts ?x ==> ?C cont cont |]
      ==> rel_generat ?A ?B ?C ?x ?x",
     template_implication
      ([template_predicate (template_app (template_hole 10, t_empty)),
        template_predicate (template_app (template_hole 6, t_empty)),
        template_predicate (template_app (template_hole 3, t_empty))],
       template_predicate
        (
           template_app
            (template_app
              (template_app
                (template_app
                  (template_app (template_hole 0, template_var 2),
                   template_var 1),
                 template_var 0),
               template_var 3),
             template_var 3)
           ))),
    ("Generat.rel_witness_generat1",
     "rel_generat ?A ?C ?R ?x ?y ==>
      rel_generat (%a (a', b). a = a' & ?A a' b)
       (%c (c', d). c = c' & ?C c' d) (%r (r', s). r = r' & ?R r' s) ?x
       (rel_witness_generat (?x, ?y))",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_app
                   (template_app (template_hole 10, template_var 4),
                    template_var 3),
                  template_var 2),
                template_var 1),
              template_var 0)
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_app
                (template_app
                  (template_app (template_hole 9, t_empty), t_empty),
                 t_empty),
               template_var 1),
             template_app
              (template_hole 1,
               template_app
                (template_app (template_hole 0, template_var 1),
                 template_var 0)))
           ))),
    ("Generat.rel_witness_generat2",
     "rel_generat ?A ?C ?R ?x ?y ==>
      rel_generat (%(a, b') b. b = b' & ?A a b')
       (%(c, d') d. d = d' & ?C c d') (%(r, s') s. s = s' & ?R r s')
       (rel_witness_generat (?x, ?y)) ?y",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_app
                   (template_app (template_hole 10, template_var 4),
                    template_var 3),
                  template_var 2),
                template_var 1),
              template_var 0)
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_app
                (template_app
                  (template_app
                    (template_hole 9,
                     template_app (template_hole 8, t_empty)),
                   template_app (template_hole 5, t_empty)),
                 template_app (template_hole 3, t_empty)),
               template_app
                (template_hole 1,
                 template_app
                  (template_app (template_hole 0, template_var 1),
                   template_var 0))),
             template_var 0)
           ))),
    ("Generat.rel_generatI",
     "[| is_Pure ?x = is_Pure ?y;
         [| is_Pure ?x; is_Pure ?y |]
         ==> ?A (generat.result ?x) (generat.result ?y);
         [| ~ is_Pure ?x; ~ is_Pure ?y |]
         ==> ?Out (generat.output ?x) (generat.output ?y) &
             ?R (continuation ?x) (continuation ?y) |]
      ==> rel_generat ?A ?Out ?R ?x ?y",
     template_implication
      ([template_equation
         (template_app (template_hole 10, template_var 4),
          template_app (template_hole 9, template_var 3)),
        template_implication
         ([template_predicate
            (template_app (template_hole 10, template_var 4))],
          template_implication
           ([template_predicate
              (template_app (template_hole 9, template_var 3))],
            template_predicate
             (
                template_app
                 (template_app
                   (template_var 2,
                    template_app (template_hole 8, template_var 4)),
                  template_app (template_hole 7, template_var 3))
                ))),
        template_implication
         ([template_negation
            (
               template_predicate
                (template_app (template_hole 10, template_var 4))
               )],
          template_implication
           ([template_negation
              (
                 template_predicate
                  (template_app (template_hole 9, template_var 3))
                 )],
            template_predicate
             (
                template_app
                 (template_app
                   (template_hole 5,
                    template_app
                     (template_app
                       (template_var 1,
                        template_app (template_hole 4, template_var 4)),
                      template_app (template_hole 3, template_var 3))),
                  template_app
                   (template_app
                     (template_var 0,
                      template_app (template_hole 2, template_var 4)),
                    template_app (template_hole 1, template_var 3)))
                )))],
       template_predicate
        (
           template_app
            (template_app
              (template_app
                (template_app
                  (template_app (template_hole 0, template_var 2),
                   template_var 1),
                 template_var 0),
               template_var 4),
             template_var 3)
           ))),
    ("Generat.rel_generat_mono'",
     "[| !!x y. ?A x y --> ?A' x y; !!x y. ?B x y --> ?B' x y;
         !!x y. ?C x y --> ?C' x y |]
      ==> rel_generat ?A ?B ?C ?x ?y --> rel_generat ?A' ?B' ?C' ?x ?y",
     template_implication
      ([template_predicate (template_app (template_hole 8, t_empty)),
        template_predicate (template_app (template_hole 4, t_empty)),
        template_predicate (template_app (template_hole 2, t_empty))],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 5,
               template_app
                (template_app
                  (template_app
                    (template_app
                      (template_app (template_hole 0, template_var 7),
                       template_var 5),
                     template_var 3),
                   template_var 1),
                 template_var 0)),
             template_app
              (template_app
                (template_app
                  (template_app
                    (template_app (template_hole 0, template_var 6),
                     template_var 4),
                   template_var 2),
                 template_var 1),
               template_var 0))
           ))),
    ("Generat.rel_generat_mono",
     "[| rel_generat ?A ?B ?C ?x ?y; !!x y. ?A x y ==> ?A' x y;
         !!x y. ?B x y ==> ?B' x y; !!x y. ?C x y ==> ?C' x y |]
      ==> rel_generat ?A' ?B' ?C' ?x ?y",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_app
                   (template_app (template_hole 6, template_var 7),
                    template_var 6),
                  template_var 5),
                template_var 4),
              template_var 3)
            ),
        template_predicate (template_app (template_hole 5, t_empty)),
        template_predicate (template_app (template_hole 3, t_empty)),
        template_predicate (template_app (template_hole 1, t_empty))],
       template_predicate
        (
           template_app
            (template_app
              (template_app
                (template_app
                  (template_app (template_hole 6, template_var 2),
                   template_var 1),
                 template_var 0),
               template_var 4),
             template_var 3)
           )))]:
   (string * thm * template) list
### theory "Draft.GeneratTemplates"
### 1.781s elapsed time, 2.185s cpu time, 0.233s GC time
val it = (): unit
