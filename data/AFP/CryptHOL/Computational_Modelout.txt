Loading theory "Draft.Partial_Function_Set" (required by "Draft.Computational_ModelTemplates" via "Draft.Computational_Model" via "Draft.Generative_Probabilistic_Value" via "Draft.Resumption")
Loading theory "HOL-Library.BigO" (required by "Draft.Computational_ModelTemplates" via "Draft.ExtrEqs")
Loading theory "Draft.Templates" (required by "Draft.Computational_ModelTemplates" via "Draft.ExtrEqs")
Loading theory "Draft.Misc_CryptHOL" (required by "Draft.Computational_ModelTemplates" via "Draft.Computational_Model" via "Draft.Generative_Probabilistic_Value" via "Draft.Resumption")
datatype template_term
=
     t_empty
   | template_app of template_term * template_term
   | template_hole of int
   | template_var of int
datatype sign
= equals | greater_equals | greater_than | less_equals | less_than
datatype template
=
     template_bimplication of template * template
   | template_dunno
   | template_equation of template_term * template_term
   | template_implication of template list * template
   | template_inequation of sign * template_term * template_term
   | template_negation of template
   | template_predicate of template_term
constructor t_empty: template_term
constructor template_app: template_term * template_term -> template_term
constructor template_hole: int -> template_term
constructor template_var: int -> template_term
constructor equals: sign
constructor greater_equals: sign
constructor greater_than: sign
constructor less_equals: sign
constructor less_than: sign
constructor template_bimplication: template * template -> template
constructor template_dunno: template
constructor template_equation: template_term * template_term -> template
constructor template_implication: template list * template -> template
constructor template_inequation:
   sign * template_term * template_term -> template
constructor template_negation: template -> template
constructor template_predicate: template_term -> template
val vfs = fn: term -> (indexname * typ) list * (string * typ) list
val indexOf = fn: ''a list -> ''a -> int -> int
val has_eq = fn: term -> bool
val term2template = fn:
   (indexname * typ) list -> (string * typ) list -> term -> template_term
val lemma2predicate = fn: term -> term -> template
val makeTemplatewithContext = fn: term -> term -> template
val lemma2template = fn: term -> template
val thm2template = fn: thm -> template
val tterm2string = fn: template_term -> string
val template2string = fn: template -> string
val t = "height ?t <= size ?t": thm
val th =
   Const ("HOL.Trueprop", "bool => prop") $
     (Const ("Orderings.ord_class.less_eq", "nat => nat => bool") $
       (Const ("Tree.height_class.height", "?'a tree => nat") $
         Var (("t", 0), "?'a tree")) $
       (Const ("Nat.size_class.size", "?'a tree => nat") $
         Var (("t", 0), "?'a tree"))):
   term
### theory "Draft.Templates"
### 0.111s elapsed time, 0.441s cpu time, 0.043s GC time
### theory "Draft.Partial_Function_Set"
### 0.244s elapsed time, 0.833s cpu time, 0.043s GC time
### theory "HOL-Library.BigO"
### 0.622s elapsed time, 1.601s cpu time, 0.079s GC time
Loading theory "Draft.ExtrEqs" (required by "Draft.Computational_ModelTemplates")
val eqpattern =
   Pattern
    (
       Const ("HOL.Trueprop", "bool => prop") $
         (Const ("HOL.eq", "?'a => ?'a => bool") $
           Var (("_dummy_", 1), "?'a") $ Var (("_dummy_", 2), "?'a"))
       ):
   term Find_Theorems.criterion
val badeqpattern = Pattern (Const ("Pure.eq", "?'a => ?'a => prop")):
   term Find_Theorems.criterion
val undefpattern =
   Pattern
    (
       Const ("HOL.Trueprop", "bool => prop") $
         (Const ("HOL.eq", "?'a => ?'a => bool") $
           Var (("_dummy_", 1), "?'a") $ Const ("HOL.undefined", "?'a"))
       ):
   term Find_Theorems.criterion
val thmpattern =
   Pattern
    (Const ("HOL.Trueprop", "bool => prop") $ Var (("_dummy_", 1), "bool")):
   term Find_Theorems.criterion
val badnames =
   ["*nitpick*", "*Nitpick*", "*full_exhaustive*", "*_def*", "Enum.finite*",
    "*Quickcheck*", "ATP*", "*Nunchaku*", "*Code*", "*BNF*", "*SMT*",
    "*.*.*"]:
   string list
val unwanted_names =
   [(false, Name "*nitpick*"), (false, Name "*Nitpick*"),
    (false, Name "*full_exhaustive*"), (false, Name "*_def*"),
    (false, Name "Enum.finite*"), (false, Name "*Quickcheck*"),
    (false, Name "ATP*"), (false, Name "*Nunchaku*"),
    (false, Name "*Code*"), (false, Name "*BNF*"), (false, Name "*SMT*"),
    (false, Name "*.*.*")]:
   (bool * term Find_Theorems.criterion) list
val has_vars = fn: term -> bool
val get_all_eqs = fn: string -> Proof.context -> (string * thm) list
val get_all_thms = fn: string -> Proof.context -> (string * thm) list
val get_noneq_thms = fn: string -> Proof.context -> (string * thm) list
val template_eqs = fn:
   string -> Proof.context -> (string * thm * template) list
val template_thms = fn:
   string -> Proof.context -> (string * thm * template) list
### theory "Draft.ExtrEqs"
### 0.495s elapsed time, 1.020s cpu time, 0.084s GC time
Proofs for inductive predicate(s) "Imagep"
  Proving monotonicity ...
specification
  relcompp_witness1: (?A OO ?B) (fst ?xy) (snd ?xy) ==> ?A (fst ?xy) (relcompp_witness ?A ?B ?xy)
  relcompp_witness2: (?A OO ?B) (fst ?xy) (snd ?xy) ==> ?B (relcompp_witness ?A ?B ?xy) (snd ?xy)
Found termination order: "{}"
Found termination order: "{}"
Found termination order: "{}"
Found termination order: "{}"
Found termination order: "{}"
consts
  assert_option :: "bool => unit option"
consts
  sup_option :: "'a option => 'a option => 'a option"
consts
  enforce_option :: "('a => bool) => 'a option => 'a option"
### Ignoring duplicate rewrite rule:
### real ?n1 <= 1 == ?n1 <= 1
Proofs for inductive predicate(s) "finite_chains"
  Proving monotonicity ...
locale partial_function_definitions
  fixes leq :: "'a => 'a => bool"
    and lub :: "'a set => 'a"
  assumes "partial_function_definitions leq lub"
Proofs for inductive predicate(s) "nlistsp"
  Proving monotonicity ...
consts
  sprefix :: "'a list => 'a stream => bool"
locale monad_fail_hom
  fixes return1 :: "'a => 'm1"
    and bind1 :: "'m1 => ('a => 'm1) => 'm1"
    and fail1 :: "'m1"
    and return2 :: "'a => 'm2"
    and bind2 :: "'m2 => ('a => 'm2) => 'm2"
    and fail2 :: "'m2"
    and h :: "'m1 => 'm2"
  assumes "monad_fail_hom return1 bind1 fail1 return2 bind2 fail2 h"
specification
  set_rel_witness_pmf': rel_pmf ?A (fst ?xy) (snd ?xy) ==>
set_pmf (rel_witness_pmf ?A ?xy) <= {(a, b). ?A a b}
  map1_rel_witness_pmf': rel_pmf ?A (fst ?xy) (snd ?xy) ==>
map_pmf fst (rel_witness_pmf ?A ?xy) = fst ?xy
  map2_rel_witness_pmf': rel_pmf ?A (fst ?xy) (snd ?xy) ==>
map_pmf snd (rel_witness_pmf ?A ?xy) = snd ?xy
locale option_to_spmf
locale option_le_spmf
### theory "Draft.Misc_CryptHOL"
### 4.581s elapsed time, 6.431s cpu time, 0.809s GC time
Loading theory "Draft.Generat" (required by "Draft.Computational_ModelTemplates" via "Draft.Computational_Model" via "Draft.Generative_Probabilistic_Value")
Loading theory "Draft.Resumption" (required by "Draft.Computational_ModelTemplates" via "Draft.Computational_Model" via "Draft.Generative_Probabilistic_Value")
Found termination order: "{}"
### Missing patterns in function definition:
### !!vb vc v. rel_witness_generat (IO vb vc, Pure v) = undefined
### !!va vb vc. rel_witness_generat (Pure va, IO vb vc) = undefined
consts
  bind_resumption ::
    "('a, 'out, 'in) Resumption.resumption
     => ('a => ('b, 'out, 'in) Resumption.resumption)
        => ('b, 'out, 'in) Resumption.resumption"
Found termination order: "{}"
### theory "Draft.Generat"
### 1.514s elapsed time, 3.321s cpu time, 0.824s GC time
consts
  ensure :: "bool => (unit, 'out, 'in) Resumption.resumption"
Proofs for coinductive predicate(s) "resumption_ord"
  Proving monotonicity ...
consts
  resumption_lub ::
    "('a, 'out, 'in) Resumption.resumption set
     => ('a, 'out, 'in) Resumption.resumption"
### Cannot skip proof of schematic goal statement
### theory "Draft.Resumption"
### 1.831s elapsed time, 3.636s cpu time, 0.824s GC time
Loading theory "Draft.Generative_Probabilistic_Value" (required by "Draft.Computational_ModelTemplates" via "Draft.Computational_Model")
"('a, 'out, 'in) rpv"
consts
  map_gpv' ::
    "('a => 'b)
     => ('out => 'out')
        => ('ret' => 'ret)
           => ('a, 'out, 'ret) gpv => ('b, 'out', 'ret') gpv"
Proofs for coinductive predicate(s) "rel_gpv''"
  Proving monotonicity ...
consts
  Done :: "'a => ('a, 'out, 'in) gpv"
consts
  Pause :: "'out => ('a, 'out, 'in) rpv => ('a, 'out, 'in) gpv"
consts
  lift_spmf :: "'a spmf => ('a, 'out, 'in) gpv"
consts
  bind_gpv ::
    "('a, 'out, 'in) gpv
     => ('a => ('b, 'out, 'in) gpv) => ('b, 'out, 'in) gpv"
locale spmf_to_gpv
locale option_to_gpv
locale option_le_gpv
consts
  lift_resumption ::
    "('a, 'out, 'in) Resumption.resumption => ('a, 'out, 'in) gpv"
### Ambiguous input (line 1428 of "$AFP/CryptHOL/Generative_Probabilistic_Value.thy") produces 2 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("_applC" ("_position" the_gpv)
###       ("\<^const>SPMF.try_spmf" ("_position" gpv) ("_position" gpv')))
###     ("_applC" ("_position" map_spmf)
###       ("_cargs"
###         ("_applC" ("_position" map_generat)
###           ("_cargs" ("_position" id)
###             ("_cargs" ("_position" id)
###               ("_lambda" ("_pttrns" ("_position" c) ("_position" input))
###                 ("_case_syntax"
###                   ("_applC" ("_position" c) ("_position" input))
###                   ("_case2"
###                     ("_case1" ("_applC" ("_position" Inl) ("_position" gpv))
###                       ("_applC" ("_position" try_gpv)
###                         ("_cargs" ("_position" gpv) ("_position" gpv'))))
###                     ("_case1"
###                       ("_applC" ("_position" Inr) ("_position" gpv'))
###                       ("_position" gpv'))))))))
###         ("_applC" ("_position" try_spmf)
###           ("_cargs"
###             ("_applC" ("_position" map_spmf)
###               ("_cargs"
###                 ("_applC" ("_position" map_generat)
###                   ("_cargs" ("_position" id)
###                     ("_cargs" ("_position" id)
###                       ("_applC" ("_position" map_fun)
###                         ("_cargs" ("_position" id) ("_position" Inl))))))
###                 ("_applC" ("_position" the_gpv) ("_position" gpv))))
###             ("_applC" ("_position" map_spmf)
###               ("_cargs"
###                 ("_applC" ("_position" map_generat)
###                   ("_cargs" ("_position" id)
###                     ("_cargs" ("_position" id)
###                       ("_applC" ("_position" map_fun)
###                         ("_cargs" ("_position" id) ("_position" Inr))))))
###                 ("_applC" ("_position" the_gpv) ("_position" gpv'))))))))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("_applC" ("_position" the_gpv)
###       ("\<^fixed>try_gpv" ("_position" gpv) ("_position" gpv')))
###     ("_applC" ("_position" map_spmf)
###       ("_cargs"
###         ("_applC" ("_position" map_generat)
###           ("_cargs" ("_position" id)
###             ("_cargs" ("_position" id)
###               ("_lambda" ("_pttrns" ("_position" c) ("_position" input))
###                 ("_case_syntax"
###                   ("_applC" ("_position" c) ("_position" input))
###                   ("_case2"
###                     ("_case1" ("_applC" ("_position" Inl) ("_position" gpv))
###                       ("_applC" ("_position" try_gpv)
###                         ("_cargs" ("_position" gpv) ("_position" gpv'))))
###                     ("_case1"
###                       ("_applC" ("_position" Inr) ("_position" gpv'))
###                       ("_position" gpv'))))))))
###         ("_applC" ("_position" try_spmf)
###           ("_cargs"
###             ("_applC" ("_position" map_spmf)
###               ("_cargs"
###                 ("_applC" ("_position" map_generat)
###                   ("_cargs" ("_position" id)
###                     ("_cargs" ("_position" id)
###                       ("_applC" ("_position" map_fun)
###                         ("_cargs" ("_position" id) ("_position" Inl))))))
###                 ("_applC" ("_position" the_gpv) ("_position" gpv))))
###             ("_applC" ("_position" map_spmf)
###               ("_cargs"
###                 ("_applC" ("_position" map_generat)
###                   ("_cargs" ("_position" id)
###                     ("_cargs" ("_position" id)
###                       ("_applC" ("_position" map_fun)
###                         ("_cargs" ("_position" id) ("_position" Inr))))))
###                 ("_applC" ("_position" the_gpv) ("_position" gpv'))))))))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
consts
  try_gpv ::
    "('a, 'call, 'ret) gpv
     => ('a, 'call, 'ret) gpv => ('a, 'call, 'ret) gpv"
### Ambiguous input (line 1434 of "$AFP/CryptHOL/Generative_Probabilistic_Value.thy") produces 8 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("_applC" ("_position" the_gpv)
###       ("\<^const>SPMF.try_spmf" ("_position" gpv) ("_position" gpv')))
###     ("\<^const>Generative_Probabilistic_Value.try_gpv"
###       ("_applC" ("_position" map_spmf)
###         ("_cargs"
###           ("_applC" ("_position" map_generat)
###             ("_cargs" ("_position" id)
###               ("_cargs" ("_position" id)
###                 ("_lambda" ("_pttrns" ("_position" c) ("_position" input))
###                   ("\<^const>SPMF.try_spmf"
###                     ("_applC" ("_position" c) ("_position" input))
###                     ("_position" gpv'))))))
###           ("_applC" ("_position" the_gpv) ("_position" gpv))))
###       ("_applC" ("_position" the_gpv) ("_position" gpv')))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("_applC" ("_position" the_gpv)
###       ("\<^const>Generative_Probabilistic_Value.try_gpv" ("_position" gpv)
###         ("_position" gpv')))
###     ("\<^const>Generative_Probabilistic_Value.try_gpv"
###       ("_applC" ("_position" map_spmf)
###         ("_cargs"
###           ("_applC" ("_position" map_generat)
###             ("_cargs" ("_position" id)
###               ("_cargs" ("_position" id)
###                 ("_lambda" ("_pttrns" ("_position" c) ("_position" input))
###                   ("\<^const>SPMF.try_spmf"
###                     ("_applC" ("_position" c) ("_position" input))
###                     ("_position" gpv'))))))
###           ("_applC" ("_position" the_gpv) ("_position" gpv))))
###       ("_applC" ("_position" the_gpv) ("_position" gpv')))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("_applC" ("_position" the_gpv)
###       ("\<^const>SPMF.try_spmf" ("_position" gpv) ("_position" gpv')))
###     ("\<^const>SPMF.try_spmf"
###       ("_applC" ("_position" map_spmf)
###         ("_cargs"
###           ("_applC" ("_position" map_generat)
###             ("_cargs" ("_position" id)
###               ("_cargs" ("_position" id)
###                 ("_lambda" ("_pttrns" ("_position" c) ("_position" input))
###                   ("\<^const>SPMF.try_spmf"
###                     ("_applC" ("_position" c) ("_position" input))
###                     ("_position" gpv'))))))
###           ("_applC" ("_position" the_gpv) ("_position" gpv))))
###       ("_applC" ("_position" the_gpv) ("_position" gpv')))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("_applC" ("_position" the_gpv)
###       ("\<^const>Generative_Probabilistic_Value.try_gpv" ("_position" gpv)
###         ("_position" gpv')))
###     ("\<^const>SPMF.try_spmf"
###       ("_applC" ("_position" map_spmf)
###         ("_cargs"
###           ("_applC" ("_position" map_generat)
###             ("_cargs" ("_position" id)
###               ("_cargs" ("_position" id)
###                 ("_lambda" ("_pttrns" ("_position" c) ("_position" input))
###                   ("\<^const>SPMF.try_spmf"
###                     ("_applC" ("_position" c) ("_position" input))
###                     ("_position" gpv'))))))
###           ("_applC" ("_position" the_gpv) ("_position" gpv))))
###       ("_applC" ("_position" the_gpv) ("_position" gpv')))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("_applC" ("_position" the_gpv)
###       ("\<^const>SPMF.try_spmf" ("_position" gpv) ("_position" gpv')))
###     ("\<^const>Generative_Probabilistic_Value.try_gpv"
###       ("_applC" ("_position" map_spmf)
###         ("_cargs"
###           ("_applC" ("_position" map_generat)
###             ("_cargs" ("_position" id)
###               ("_cargs" ("_position" id)
###                 ("_lambda" ("_pttrns" ("_position" c) ("_position" input))
###                   ("\<^const>Generative_Probabilistic_Value.try_gpv"
###                     ("_applC" ("_position" c) ("_position" input))
###                     ("_position" gpv'))))))
###           ("_applC" ("_position" the_gpv) ("_position" gpv))))
###       ("_applC" ("_position" the_gpv) ("_position" gpv')))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("_applC" ("_position" the_gpv)
###       ("\<^const>Generative_Probabilistic_Value.try_gpv" ("_position" gpv)
###         ("_position" gpv')))
###     ("\<^const>Generative_Probabilistic_Value.try_gpv"
###       ("_applC" ("_position" map_spmf)
###         ("_cargs"
###           ("_applC" ("_position" map_generat)
###             ("_cargs" ("_position" id)
###               ("_cargs" ("_position" id)
###                 ("_lambda" ("_pttrns" ("_position" c) ("_position" input))
###                   ("\<^const>Generative_Probabilistic_Value.try_gpv"
###                     ("_applC" ("_position" c) ("_position" input))
###                     ("_position" gpv'))))))
###           ("_applC" ("_position" the_gpv) ("_position" gpv))))
###       ("_applC" ("_position" the_gpv) ("_position" gpv')))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("_applC" ("_position" the_gpv)
###       ("\<^const>SPMF.try_spmf" ("_position" gpv) ("_position" gpv')))
###     ("\<^const>SPMF.try_spmf"
###       ("_applC" ("_position" map_spmf)
###         ("_cargs"
###           ("_applC" ("_position" map_generat)
###             ("_cargs" ("_position" id)
###               ("_cargs" ("_position" id)
###                 ("_lambda" ("_pttrns" ("_position" c) ("_position" input))
###                   ("\<^const>Generative_Probabilistic_Value.try_gpv"
###                     ("_applC" ("_position" c) ("_position" input))
###                     ("_position" gpv'))))))
###           ("_applC" ("_position" the_gpv) ("_position" gpv))))
###       ("_applC" ("_position" the_gpv) ("_position" gpv')))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("_applC" ("_position" the_gpv)
###       ("\<^const>Generative_Probabilistic_Value.try_gpv" ("_position" gpv)
###         ("_position" gpv')))
###     ("\<^const>SPMF.try_spmf"
###       ("_applC" ("_position" map_spmf)
###         ("_cargs"
###           ("_applC" ("_position" map_generat)
###             ("_cargs" ("_position" id)
###               ("_cargs" ("_position" id)
###                 ("_lambda" ("_pttrns" ("_position" c) ("_position" input))
###                   ("\<^const>Generative_Probabilistic_Value.try_gpv"
###                     ("_applC" ("_position" c) ("_position" input))
###                     ("_position" gpv'))))))
###           ("_applC" ("_position" the_gpv) ("_position" gpv))))
###       ("_applC" ("_position" the_gpv) ("_position" gpv')))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 1438 of "$AFP/CryptHOL/Generative_Probabilistic_Value.thy") produces 2 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("\<^const>Generative_Probabilistic_Value.try_gpv"
###       ("_applC" ("_position" Done) ("_position" x)) ("_position" gpv'))
###     ("_applC" ("_position" Done) ("_position" x))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("\<^const>SPMF.try_spmf" ("_applC" ("_position" Done) ("_position" x))
###       ("_position" gpv'))
###     ("_applC" ("_position" Done) ("_position" x))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 1441 of "$AFP/CryptHOL/Generative_Probabilistic_Value.thy") produces 2 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("\<^const>Generative_Probabilistic_Value.try_gpv" ("_position" Fail)
###       ("_position" gpv'))
###     ("_position" gpv')))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("\<^const>SPMF.try_spmf" ("_position" Fail) ("_position" gpv'))
###     ("_position" gpv')))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 1444 of "$AFP/CryptHOL/Generative_Probabilistic_Value.thy") produces 4 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("\<^const>Generative_Probabilistic_Value.try_gpv"
###       ("_applC" ("_position" Pause)
###         ("_cargs" ("_position" out) ("_position" c)))
###       ("_position" gpv'))
###     ("_applC" ("_position" Pause)
###       ("_cargs" ("_position" out)
###         ("_lambda" ("_position" input)
###           ("\<^const>SPMF.try_spmf"
###             ("_applC" ("_position" c) ("_position" input))
###             ("_position" gpv')))))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("\<^const>SPMF.try_spmf"
###       ("_applC" ("_position" Pause)
###         ("_cargs" ("_position" out) ("_position" c)))
###       ("_position" gpv'))
###     ("_applC" ("_position" Pause)
###       ("_cargs" ("_position" out)
###         ("_lambda" ("_position" input)
###           ("\<^const>SPMF.try_spmf"
###             ("_applC" ("_position" c) ("_position" input))
###             ("_position" gpv')))))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("\<^const>Generative_Probabilistic_Value.try_gpv"
###       ("_applC" ("_position" Pause)
###         ("_cargs" ("_position" out) ("_position" c)))
###       ("_position" gpv'))
###     ("_applC" ("_position" Pause)
###       ("_cargs" ("_position" out)
###         ("_lambda" ("_position" input)
###           ("\<^const>Generative_Probabilistic_Value.try_gpv"
###             ("_applC" ("_position" c) ("_position" input))
###             ("_position" gpv')))))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("\<^const>SPMF.try_spmf"
###       ("_applC" ("_position" Pause)
###         ("_cargs" ("_position" out) ("_position" c)))
###       ("_position" gpv'))
###     ("_applC" ("_position" Pause)
###       ("_cargs" ("_position" out)
###         ("_lambda" ("_position" input)
###           ("\<^const>Generative_Probabilistic_Value.try_gpv"
###             ("_applC" ("_position" c) ("_position" input))
###             ("_position" gpv')))))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 1447 of "$AFP/CryptHOL/Generative_Probabilistic_Value.thy") produces 2 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("\<^const>Generative_Probabilistic_Value.try_gpv" ("_position" gpv)
###       ("_position" Fail))
###     ("_position" gpv)))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("\<^const>SPMF.try_spmf" ("_position" gpv) ("_position" Fail))
###     ("_position" gpv)))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 1451 of "$AFP/CryptHOL/Generative_Probabilistic_Value.thy") produces 4 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("_applC" ("_position" lift_spmf)
###       ("\<^const>SPMF.try_spmf" ("_position" p) ("_position" q)))
###     ("\<^const>Generative_Probabilistic_Value.try_gpv"
###       ("_applC" ("_position" lift_spmf) ("_position" p))
###       ("_applC" ("_position" lift_spmf) ("_position" q)))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("_applC" ("_position" lift_spmf)
###       ("\<^const>Generative_Probabilistic_Value.try_gpv" ("_position" p)
###         ("_position" q)))
###     ("\<^const>Generative_Probabilistic_Value.try_gpv"
###       ("_applC" ("_position" lift_spmf) ("_position" p))
###       ("_applC" ("_position" lift_spmf) ("_position" q)))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("_applC" ("_position" lift_spmf)
###       ("\<^const>SPMF.try_spmf" ("_position" p) ("_position" q)))
###     ("\<^const>SPMF.try_spmf"
###       ("_applC" ("_position" lift_spmf) ("_position" p))
###       ("_applC" ("_position" lift_spmf) ("_position" q)))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("_applC" ("_position" lift_spmf)
###       ("\<^const>Generative_Probabilistic_Value.try_gpv" ("_position" p)
###         ("_position" q)))
###     ("\<^const>SPMF.try_spmf"
###       ("_applC" ("_position" lift_spmf) ("_position" p))
###       ("_applC" ("_position" lift_spmf) ("_position" q)))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 1454 of "$AFP/CryptHOL/Generative_Probabilistic_Value.thy") produces 2 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("\<^const>Generative_Probabilistic_Value.try_gpv"
###       ("_applC" ("_position" assert_gpv) ("_position" b))
###       ("_position" gpv'))
###     ("\<^const>HOL.If" ("_position" b)
###       ("_applC" ("_position" Done) ("\<^const>Product_Type.Unity"))
###       ("_position" gpv'))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("\<^const>SPMF.try_spmf"
###       ("_applC" ("_position" assert_gpv) ("_position" b))
###       ("_position" gpv'))
###     ("\<^const>HOL.If" ("_position" b)
###       ("_applC" ("_position" Done) ("\<^const>Product_Type.Unity"))
###       ("_position" gpv'))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 1469 of "$AFP/CryptHOL/Generative_Probabilistic_Value.thy") produces 4 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("_applC" ("_position" map_gpv)
###       ("_cargs" ("_position" f)
###         ("_cargs" ("_position" g)
###           ("\<^const>SPMF.try_spmf" ("_position" gpv) ("_position" gpv')))))
###     ("\<^const>Generative_Probabilistic_Value.try_gpv"
###       ("_applC" ("_position" map_gpv)
###         ("_cargs" ("_position" f)
###           ("_cargs" ("_position" g) ("_position" gpv))))
###       ("_applC" ("_position" map_gpv)
###         ("_cargs" ("_position" f)
###           ("_cargs" ("_position" g) ("_position" gpv')))))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("_applC" ("_position" map_gpv)
###       ("_cargs" ("_position" f)
###         ("_cargs" ("_position" g)
###           ("\<^const>Generative_Probabilistic_Value.try_gpv"
###             ("_position" gpv) ("_position" gpv')))))
###     ("\<^const>Generative_Probabilistic_Value.try_gpv"
###       ("_applC" ("_position" map_gpv)
###         ("_cargs" ("_position" f)
###           ("_cargs" ("_position" g) ("_position" gpv))))
###       ("_applC" ("_position" map_gpv)
###         ("_cargs" ("_position" f)
###           ("_cargs" ("_position" g) ("_position" gpv')))))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("_applC" ("_position" map_gpv)
###       ("_cargs" ("_position" f)
###         ("_cargs" ("_position" g)
###           ("\<^const>SPMF.try_spmf" ("_position" gpv) ("_position" gpv')))))
###     ("\<^const>SPMF.try_spmf"
###       ("_applC" ("_position" map_gpv)
###         ("_cargs" ("_position" f)
###           ("_cargs" ("_position" g) ("_position" gpv))))
###       ("_applC" ("_position" map_gpv)
###         ("_cargs" ("_position" f)
###           ("_cargs" ("_position" g) ("_position" gpv')))))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("_applC" ("_position" map_gpv)
###       ("_cargs" ("_position" f)
###         ("_cargs" ("_position" g)
###           ("\<^const>Generative_Probabilistic_Value.try_gpv"
###             ("_position" gpv) ("_position" gpv')))))
###     ("\<^const>SPMF.try_spmf"
###       ("_applC" ("_position" map_gpv)
###         ("_cargs" ("_position" f)
###           ("_cargs" ("_position" g) ("_position" gpv))))
###       ("_applC" ("_position" map_gpv)
###         ("_cargs" ("_position" f)
###           ("_cargs" ("_position" g) ("_position" gpv')))))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 1472 of "$AFP/CryptHOL/Generative_Probabilistic_Value.thy") produces 4 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("_applC" ("_position" map_gpv')
###       ("_cargs" ("_position" f)
###         ("_cargs" ("_position" g)
###           ("_cargs" ("_position" h)
###             ("\<^const>SPMF.try_spmf" ("_position" gpv)
###               ("_position" gpv'))))))
###     ("\<^const>Generative_Probabilistic_Value.try_gpv"
###       ("_applC" ("_position" map_gpv')
###         ("_cargs" ("_position" f)
###           ("_cargs" ("_position" g)
###             ("_cargs" ("_position" h) ("_position" gpv)))))
###       ("_applC" ("_position" map_gpv')
###         ("_cargs" ("_position" f)
###           ("_cargs" ("_position" g)
###             ("_cargs" ("_position" h) ("_position" gpv'))))))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("_applC" ("_position" map_gpv')
###       ("_cargs" ("_position" f)
###         ("_cargs" ("_position" g)
###           ("_cargs" ("_position" h)
###             ("\<^const>Generative_Probabilistic_Value.try_gpv"
###               ("_position" gpv) ("_position" gpv'))))))
###     ("\<^const>Generative_Probabilistic_Value.try_gpv"
###       ("_applC" ("_position" map_gpv')
###         ("_cargs" ("_position" f)
###           ("_cargs" ("_position" g)
###             ("_cargs" ("_position" h) ("_position" gpv)))))
###       ("_applC" ("_position" map_gpv')
###         ("_cargs" ("_position" f)
###           ("_cargs" ("_position" g)
###             ("_cargs" ("_position" h) ("_position" gpv'))))))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("_applC" ("_position" map_gpv')
###       ("_cargs" ("_position" f)
###         ("_cargs" ("_position" g)
###           ("_cargs" ("_position" h)
###             ("\<^const>SPMF.try_spmf" ("_position" gpv)
###               ("_position" gpv'))))))
###     ("\<^const>SPMF.try_spmf"
###       ("_applC" ("_position" map_gpv')
###         ("_cargs" ("_position" f)
###           ("_cargs" ("_position" g)
###             ("_cargs" ("_position" h) ("_position" gpv)))))
###       ("_applC" ("_position" map_gpv')
###         ("_cargs" ("_position" f)
###           ("_cargs" ("_position" g)
###             ("_cargs" ("_position" h) ("_position" gpv'))))))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("_applC" ("_position" map_gpv')
###       ("_cargs" ("_position" f)
###         ("_cargs" ("_position" g)
###           ("_cargs" ("_position" h)
###             ("\<^const>Generative_Probabilistic_Value.try_gpv"
###               ("_position" gpv) ("_position" gpv'))))))
###     ("\<^const>SPMF.try_spmf"
###       ("_applC" ("_position" map_gpv')
###         ("_cargs" ("_position" f)
###           ("_cargs" ("_position" g)
###             ("_cargs" ("_position" h) ("_position" gpv)))))
###       ("_applC" ("_position" map_gpv')
###         ("_cargs" ("_position" f)
###           ("_cargs" ("_position" g)
###             ("_cargs" ("_position" h) ("_position" gpv'))))))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 1477 of "$AFP/CryptHOL/Generative_Probabilistic_Value.thy") produces 4 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("\<^const>Generative_Probabilistic_Value.try_gpv"
###       ("\<^const>Monad_Syntax.bind"
###         ("_applC" ("_position" assert_gpv) ("_position" b)) ("_position" f))
###       ("_position" gpv))
###     ("\<^const>HOL.If" ("_position" b)
###       ("\<^const>SPMF.try_spmf"
###         ("_applC" ("_position" f) ("\<^const>Product_Type.Unity"))
###         ("_position" gpv))
###       ("_position" gpv))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("\<^const>SPMF.try_spmf"
###       ("\<^const>Monad_Syntax.bind"
###         ("_applC" ("_position" assert_gpv) ("_position" b)) ("_position" f))
###       ("_position" gpv))
###     ("\<^const>HOL.If" ("_position" b)
###       ("\<^const>SPMF.try_spmf"
###         ("_applC" ("_position" f) ("\<^const>Product_Type.Unity"))
###         ("_position" gpv))
###       ("_position" gpv))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("\<^const>Generative_Probabilistic_Value.try_gpv"
###       ("\<^const>Monad_Syntax.bind"
###         ("_applC" ("_position" assert_gpv) ("_position" b)) ("_position" f))
###       ("_position" gpv))
###     ("\<^const>HOL.If" ("_position" b)
###       ("\<^const>Generative_Probabilistic_Value.try_gpv"
###         ("_applC" ("_position" f) ("\<^const>Product_Type.Unity"))
###         ("_position" gpv))
###       ("_position" gpv))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("\<^const>SPMF.try_spmf"
###       ("\<^const>Monad_Syntax.bind"
###         ("_applC" ("_position" assert_gpv) ("_position" b)) ("_position" f))
###       ("_position" gpv))
###     ("\<^const>HOL.If" ("_position" b)
###       ("\<^const>Generative_Probabilistic_Value.try_gpv"
###         ("_applC" ("_position" f) ("\<^const>Product_Type.Unity"))
###         ("_position" gpv))
###       ("_position" gpv))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
Proofs for coinductive predicate(s) "ord_gpv"
  Proving monotonicity ...
Proofs for inductive predicate(s) "interaction_bounded_by"
  Proving monotonicity ...
instantiation
  \<I> :: (type, type) order
  less_eq_\<I> == less_eq :: ('a, 'b) \<I> => ('a, 'b) \<I> => bool
  less_\<I> == less :: ('a, 'b) \<I> => ('a, 'b) \<I> => bool
instantiation
  \<I> :: (type, type) order_bot
  bot_\<I> == bot :: ('a, 'b) \<I>
Proofs for inductive predicate(s) "resultsp_gpv"
  Proving monotonicity ...
Proofs for inductive predicate(s) "outsp_gpv"
  Proving monotonicity ...
Proofs for inductive predicate(s) "pred_gpv'"
  Proving monotonicity ...
Proofs for coinductive predicate(s) "WT_gpv"
  Proving monotonicity ...
Proofs for inductive predicate(s) "sub_gpvsp"
  Proving monotonicity ...
### Ambiguous input (line 3300 of "$AFP/CryptHOL/Generative_Probabilistic_Value.thy") produces 2 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("_applC" ("_position" results_gpv)
###       ("_cargs" ("_position" \<I>)
###         ("\<^const>SPMF.try_spmf" ("_position" gpv) ("_position" gpv'))))
###     ("\<^const>Set.union"
###       ("_applC" ("_position" results_gpv)
###         ("_cargs" ("_position" \<I>) ("_position" gpv)))
###       ("\<^const>HOL.If"
###         ("_applC" ("_position" colossless_gpv)
###           ("_cargs" ("_position" \<I>) ("_position" gpv)))
###         ("\<^const>Set.empty")
###         ("_applC" ("_position" results_gpv)
###           ("_cargs" ("_position" \<I>) ("_position" gpv')))))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("_applC" ("_position" results_gpv)
###       ("_cargs" ("_position" \<I>)
###         ("\<^const>Generative_Probabilistic_Value.try_gpv" ("_position" gpv)
###           ("_position" gpv'))))
###     ("\<^const>Set.union"
###       ("_applC" ("_position" results_gpv)
###         ("_cargs" ("_position" \<I>) ("_position" gpv)))
###       ("\<^const>HOL.If"
###         ("_applC" ("_position" colossless_gpv)
###           ("_cargs" ("_position" \<I>) ("_position" gpv)))
###         ("\<^const>Set.empty")
###         ("_applC" ("_position" results_gpv)
###           ("_cargs" ("_position" \<I>) ("_position" gpv')))))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 3348 of "$AFP/CryptHOL/Generative_Probabilistic_Value.thy") produces 2 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("_applC" ("_position" results'_gpv)
###       ("\<^const>SPMF.try_spmf" ("_position" gpv) ("_position" gpv')))
###     ("\<^const>Set.union"
###       ("_applC" ("_position" results'_gpv) ("_position" gpv))
###       ("\<^const>HOL.If"
###         ("_applC" ("_position" colossless_gpv)
###           ("_cargs" ("_position" \<I>_full) ("_position" gpv)))
###         ("\<^const>Set.empty")
###         ("_applC" ("_position" results'_gpv) ("_position" gpv'))))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("_applC" ("_position" results'_gpv)
###       ("\<^const>Generative_Probabilistic_Value.try_gpv" ("_position" gpv)
###         ("_position" gpv')))
###     ("\<^const>Set.union"
###       ("_applC" ("_position" results'_gpv) ("_position" gpv))
###       ("\<^const>HOL.If"
###         ("_applC" ("_position" colossless_gpv)
###           ("_cargs" ("_position" \<I>_full) ("_position" gpv)))
###         ("\<^const>Set.empty")
###         ("_applC" ("_position" results'_gpv) ("_position" gpv'))))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 3353 of "$AFP/CryptHOL/Generative_Probabilistic_Value.thy") produces 2 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("_applC" ("_position" outs'_gpv)
###       ("\<^const>SPMF.try_spmf" ("_position" gpv) ("_position" gpv')))
###     ("\<^const>Set.union"
###       ("_applC" ("_position" outs'_gpv) ("_position" gpv))
###       ("\<^const>HOL.If"
###         ("_applC" ("_position" colossless_gpv)
###           ("_cargs" ("_position" \<I>_full) ("_position" gpv)))
###         ("\<^const>Set.empty")
###         ("_applC" ("_position" outs'_gpv) ("_position" gpv'))))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("_applC" ("_position" outs'_gpv)
###       ("\<^const>Generative_Probabilistic_Value.try_gpv" ("_position" gpv)
###         ("_position" gpv')))
###     ("\<^const>Set.union"
###       ("_applC" ("_position" outs'_gpv) ("_position" gpv))
###       ("\<^const>HOL.If"
###         ("_applC" ("_position" colossless_gpv)
###           ("_cargs" ("_position" \<I>_full) ("_position" gpv)))
###         ("\<^const>Set.empty")
###         ("_applC" ("_position" outs'_gpv) ("_position" gpv'))))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 3476 of "$AFP/CryptHOL/Generative_Probabilistic_Value.thy") produces 2 parse trees:
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("_applC" ("_position" gen_lossless_gpv)
###       ("_cargs" ("_position" b)
###         ("_cargs" ("_position" \<I>_full) ("_position" gpv)))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>HOL.eq"
###       ("\<^const>SPMF.try_spmf" ("_position" gpv) ("_position" gpv'))
###       ("_position" gpv))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("_applC" ("_position" gen_lossless_gpv)
###       ("_cargs" ("_position" b)
###         ("_cargs" ("_position" \<I>_full) ("_position" gpv)))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>HOL.eq"
###       ("\<^const>Generative_Probabilistic_Value.try_gpv" ("_position" gpv)
###         ("_position" gpv'))
###       ("_position" gpv))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 3490 of "$AFP/CryptHOL/Generative_Probabilistic_Value.thy") produces 4 parse trees:
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("_applC" ("_position" gen_lossless_gpv)
###       ("_cargs" ("_position" b)
###         ("_cargs" ("_position" \<I>_full) ("_position" gpv)))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>HOL.eq"
###       ("\<^const>Generative_Probabilistic_Value.try_gpv"
###         ("_applC" ("_position" bind_gpv)
###           ("_cargs" ("_position" gpv) ("_position" f)))
###         ("_position" gpv'))
###       ("_applC" ("_position" bind_gpv)
###         ("_cargs" ("_position" gpv)
###           ("_lambda" ("_position" x)
###             ("\<^const>SPMF.try_spmf"
###               ("_applC" ("_position" f) ("_position" x))
###               ("_position" gpv'))))))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("_applC" ("_position" gen_lossless_gpv)
###       ("_cargs" ("_position" b)
###         ("_cargs" ("_position" \<I>_full) ("_position" gpv)))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>HOL.eq"
###       ("\<^const>SPMF.try_spmf"
###         ("_applC" ("_position" bind_gpv)
###           ("_cargs" ("_position" gpv) ("_position" f)))
###         ("_position" gpv'))
###       ("_applC" ("_position" bind_gpv)
###         ("_cargs" ("_position" gpv)
###           ("_lambda" ("_position" x)
###             ("\<^const>SPMF.try_spmf"
###               ("_applC" ("_position" f) ("_position" x))
###               ("_position" gpv'))))))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("_applC" ("_position" gen_lossless_gpv)
###       ("_cargs" ("_position" b)
###         ("_cargs" ("_position" \<I>_full) ("_position" gpv)))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>HOL.eq"
###       ("\<^const>Generative_Probabilistic_Value.try_gpv"
###         ("_applC" ("_position" bind_gpv)
###           ("_cargs" ("_position" gpv) ("_position" f)))
###         ("_position" gpv'))
###       ("_applC" ("_position" bind_gpv)
###         ("_cargs" ("_position" gpv)
###           ("_lambda" ("_position" x)
###             ("\<^const>Generative_Probabilistic_Value.try_gpv"
###               ("_applC" ("_position" f) ("_position" x))
###               ("_position" gpv'))))))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("_applC" ("_position" gen_lossless_gpv)
###       ("_cargs" ("_position" b)
###         ("_cargs" ("_position" \<I>_full) ("_position" gpv)))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>HOL.eq"
###       ("\<^const>SPMF.try_spmf"
###         ("_applC" ("_position" bind_gpv)
###           ("_cargs" ("_position" gpv) ("_position" f)))
###         ("_position" gpv'))
###       ("_applC" ("_position" bind_gpv)
###         ("_cargs" ("_position" gpv)
###           ("_lambda" ("_position" x)
###             ("\<^const>Generative_Probabilistic_Value.try_gpv"
###               ("_applC" ("_position" f) ("_position" x))
###               ("_position" gpv'))))))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
consts
  mk_lossless_gpv :: "('a, 'b, 'c) gpv => ('a, 'b, 'c) gpv"
### Ambiguous input (line 3541 of "$AFP/CryptHOL/Generative_Probabilistic_Value.thy") produces 2 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq" ("_applC" ("_position" catch_gpv) ("_position" gpv))
###     ("\<^const>Generative_Probabilistic_Value.try_gpv"
###       ("_applC" ("_position" map_gpv)
###         ("_cargs" ("_position" Some)
###           ("_cargs" ("_position" id) ("_position" gpv))))
###       ("_applC" ("_position" Done) ("_position" None)))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq" ("_applC" ("_position" catch_gpv) ("_position" gpv))
###     ("\<^const>SPMF.try_spmf"
###       ("_applC" ("_position" map_gpv)
###         ("_cargs" ("_position" Some)
###           ("_cargs" ("_position" id) ("_position" gpv))))
###       ("_applC" ("_position" Done) ("_position" None)))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 3559 of "$AFP/CryptHOL/Generative_Probabilistic_Value.thy") produces 2 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("_applC" ("_position" the_gpv)
###       ("_applC" ("_position" catch_gpv) ("_position" gpv)))
###     ("\<^const>Generative_Probabilistic_Value.try_gpv"
###       ("_applC" ("_position" map_spmf)
###         ("_cargs"
###           ("_applC" ("_position" map_generat)
###             ("_cargs" ("_position" Some)
###               ("_cargs" ("_position" id)
###                 ("_lambda" ("_pttrns" ("_position" rpv) ("_position" input))
###                   ("_applC" ("_position" catch_gpv)
###                     ("_applC" ("_position" rpv) ("_position" input)))))))
###           ("_applC" ("_position" the_gpv) ("_position" gpv))))
###       ("_applC" ("_position" return_spmf)
###         ("_applC" ("_position" Pure) ("_position" None))))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("_applC" ("_position" the_gpv)
###       ("_applC" ("_position" catch_gpv) ("_position" gpv)))
###     ("\<^const>SPMF.try_spmf"
###       ("_applC" ("_position" map_spmf)
###         ("_cargs"
###           ("_applC" ("_position" map_generat)
###             ("_cargs" ("_position" Some)
###               ("_cargs" ("_position" id)
###                 ("_lambda" ("_pttrns" ("_position" rpv) ("_position" input))
###                   ("_applC" ("_position" catch_gpv)
###                     ("_applC" ("_position" rpv) ("_position" input)))))))
###           ("_applC" ("_position" the_gpv) ("_position" gpv))))
###       ("_applC" ("_position" return_spmf)
###         ("_applC" ("_position" Pure) ("_position" None))))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
consts
  inline_aux ::
    "('a, 'call, 'ret) gpv * 's +
     ('a, 'call, 'ret) rpv * ('ret * 's, 'call', 'ret') gpv
     => ('a * 's, 'call', 'ret') gpv"
locale raw_converter_invariant
  fixes \<I> :: "('call, 'ret) \<I>"
    and \<I>' :: "('call', 'ret') \<I>"
    and callee :: "'s => 'call => ('ret * 's, 'call', 'ret') gpv"
    and I :: "'s => bool"
  assumes "raw_converter_invariant \<I> \<I>' callee I"
locale raw_converter_invariant
  fixes \<I> :: "('call, 'ret) \<I>"
    and \<I>' :: "('call', 'ret') \<I>"
    and callee :: "'s => 'call => ('ret * 's, 'call', 'ret') gpv"
    and I :: "'s => bool"
  assumes "raw_converter_invariant \<I> \<I>' callee I"
Proofs for inductive predicate(s) "WT_callee"
  Proving monotonicity ...
locale callee_invariant_on_base
  fixes callee :: "'s => 'a => ('b * 's) spmf"
    and I :: "'s => bool"
    and \<I> :: "('a, 'b) \<I>"
locale callee_invariant_on
  fixes callee :: "'s => 'a => ('b * 's) spmf"
    and I :: "'s => bool"
    and \<I> :: "('a, 'b) \<I>"
  assumes "callee_invariant_on callee I \<I>"
consts
  restrict_gpv :: "('a, 'out, 'in) gpv => ('a, 'out, 'in) gpv"
consts
  enforce_\<I>_gpv ::
    "('out, 'in) \<I> => ('a, 'out, 'in) gpv => ('a, 'out, 'in) gpv"
Proofs for inductive predicate(s) "finite_gpv"
  Proving monotonicity ...
### Ambiguous input (line 5702 of "$AFP/CryptHOL/Generative_Probabilistic_Value.thy") produces 2 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.iff"
###     ("_applC" ("_position" finite_gpv)
###       ("_cargs" ("_position" \<I>)
###         ("\<^const>SPMF.try_spmf" ("_position" gpv) ("_position" gpv'))))
###     ("\<^const>HOL.conj"
###       ("_applC" ("_position" finite_gpv)
###         ("_cargs" ("_position" \<I>) ("_position" gpv)))
###       ("\<^const>HOL.disj"
###         ("_applC" ("_position" colossless_gpv)
###           ("_cargs" ("_position" \<I>) ("_position" gpv)))
###         ("_applC" ("_position" finite_gpv)
###           ("_cargs" ("_position" \<I>) ("_position" gpv')))))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.iff"
###     ("_applC" ("_position" finite_gpv)
###       ("_cargs" ("_position" \<I>)
###         ("\<^const>Generative_Probabilistic_Value.try_gpv" ("_position" gpv)
###           ("_position" gpv'))))
###     ("\<^const>HOL.conj"
###       ("_applC" ("_position" finite_gpv)
###         ("_cargs" ("_position" \<I>) ("_position" gpv)))
###       ("\<^const>HOL.disj"
###         ("_applC" ("_position" colossless_gpv)
###           ("_cargs" ("_position" \<I>) ("_position" gpv)))
###         ("_applC" ("_position" finite_gpv)
###           ("_cargs" ("_position" \<I>) ("_position" gpv')))))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 5781 of "$AFP/CryptHOL/Generative_Probabilistic_Value.thy") produces 2 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.iff"
###     ("_applC" ("_position" colossless_gpv)
###       ("_cargs" ("_position" \<I>)
###         ("\<^const>SPMF.try_spmf" ("_position" gpv) ("_position" gpv'))))
###     ("\<^const>HOL.disj"
###       ("_applC" ("_position" colossless_gpv)
###         ("_cargs" ("_position" \<I>) ("_position" gpv)))
###       ("_applC" ("_position" colossless_gpv)
###         ("_cargs" ("_position" \<I>) ("_position" gpv'))))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.iff"
###     ("_applC" ("_position" colossless_gpv)
###       ("_cargs" ("_position" \<I>)
###         ("\<^const>Generative_Probabilistic_Value.try_gpv" ("_position" gpv)
###           ("_position" gpv'))))
###     ("\<^const>HOL.disj"
###       ("_applC" ("_position" colossless_gpv)
###         ("_cargs" ("_position" \<I>) ("_position" gpv)))
###       ("_applC" ("_position" colossless_gpv)
###         ("_cargs" ("_position" \<I>) ("_position" gpv'))))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 5828 of "$AFP/CryptHOL/Generative_Probabilistic_Value.thy") produces 2 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.iff"
###     ("_applC" ("_position" lossless_gpv)
###       ("_cargs" ("_position" \<I>)
###         ("\<^const>SPMF.try_spmf" ("_position" gpv) ("_position" gpv'))))
###     ("\<^const>HOL.conj"
###       ("_applC" ("_position" finite_gpv)
###         ("_cargs" ("_position" \<I>) ("_position" gpv)))
###       ("\<^const>HOL.disj"
###         ("_applC" ("_position" lossless_gpv)
###           ("_cargs" ("_position" \<I>) ("_position" gpv)))
###         ("_applC" ("_position" lossless_gpv)
###           ("_cargs" ("_position" \<I>) ("_position" gpv')))))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.iff"
###     ("_applC" ("_position" lossless_gpv)
###       ("_cargs" ("_position" \<I>)
###         ("\<^const>Generative_Probabilistic_Value.try_gpv" ("_position" gpv)
###           ("_position" gpv'))))
###     ("\<^const>HOL.conj"
###       ("_applC" ("_position" finite_gpv)
###         ("_cargs" ("_position" \<I>) ("_position" gpv)))
###       ("\<^const>HOL.disj"
###         ("_applC" ("_position" lossless_gpv)
###           ("_cargs" ("_position" \<I>) ("_position" gpv)))
###         ("_applC" ("_position" lossless_gpv)
###           ("_cargs" ("_position" \<I>) ("_position" gpv')))))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
locale callee_invariant_on
  fixes callee :: "'s => 'a => ('b * 's) spmf"
    and I :: "'s => bool"
    and \<I> :: "('a, 'b) \<I>"
  assumes "callee_invariant_on callee I \<I>"
### theory "Draft.Generative_Probabilistic_Value"
### 7.542s elapsed time, 8.133s cpu time, 0.906s GC time
Loading theory "Draft.Computational_Model" (required by "Draft.Computational_ModelTemplates")
"('\<sigma>, 'call, 'ret) oracle"
consts
  plus_oracle :: "'a + 'c => (('b + 'd) * 's) spmf"
consts
  plus_oracle_stop :: "'a + 'c => (('b + 'd) option * 's) spmf"
Found termination order: "{}"
### Ambiguous input (line 417 of "$AFP/CryptHOL/Computational_Model.thy") produces 2 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("_applC" ("_position" callee_invariant)
###     ("_cargs"
###       ("\<^const>Computational_Model.extend_state_oracle2"
###         ("_position" oracle))
###       ("_lambda" ("_pattern" ("_position" s) ("_position" s'))
###         ("_applC" ("_position" I) ("_position" s'))))))
### ("\<^const>HOL.Trueprop"
###   ("_applC" ("_position" callee_invariant)
###     ("_cargs" ("_position" oracle)
###       ("\<^const>Computational_Model.extend_state_oracle"
###         ("_lambda" ("_pattern" ("_position" s) ("_position" s'))
###           ("_applC" ("_position" I) ("_position" s')))))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 421 of "$AFP/CryptHOL/Computational_Model.thy") produces 2 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("_applC" ("_position" callee_invariant)
###     ("_cargs"
###       ("\<^const>Computational_Model.extend_state_oracle2"
###         ("_position" oracle))
###       ("_lambda" ("_position" s)
###         ("_applC" ("_position" I)
###           ("_applC" ("_position" snd) ("_position" s)))))))
### ("\<^const>HOL.Trueprop"
###   ("_applC" ("_position" callee_invariant)
###     ("_cargs" ("_position" oracle)
###       ("\<^const>Computational_Model.extend_state_oracle"
###         ("_lambda" ("_position" s)
###           ("_applC" ("_position" I)
###             ("_applC" ("_position" snd) ("_position" s))))))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
consts
  plus_intercept :: "'s => 'x1 + 'x2 => (('y1 + 'y2) * 's, 'call, 'ret) gpv"
consts
  plus_intercept_stop ::
    "'s => 'x1 + 'x2 => (('y1 + 'y2) option * 's, 'call, 'ret) gpv"
consts
  left_gpv :: "('a, 'out, 'in) gpv => ('a, 'out + 'out', 'in + 'in') gpv"
consts
  right_gpv :: "('a, 'out, 'in) gpv => ('a, 'out' + 'out, 'in' + 'in) gpv"
Found termination order: "{}"
### theory "Draft.Computational_Model"
### 1.277s elapsed time, 1.425s cpu time, 0.217s GC time
Loading theory "Draft.Computational_ModelTemplates"
val templateLemmas =
   [("Computational_Model.results'_gpv_left_gpv",
     "results'_gpv (left_gpv ?gpv) = results'_gpv ?gpv",
     template_equation
      (template_app
        (template_hole 2, template_app (template_hole 1, template_var 0)),
       template_app (template_hole 0, template_var 0))),
    ("Computational_Model.results'_gpv_right_gpv",
     "results'_gpv (right_gpv ?gpv) = results'_gpv ?gpv",
     template_equation
      (template_app
        (template_hole 2, template_app (template_hole 1, template_var 0)),
       template_app (template_hole 0, template_var 0))),
    ("Computational_Model.left_gpv_Done",
     "left_gpv (Generative_Probabilistic_Value.Done ?x) =
      Generative_Probabilistic_Value.Done ?x",
     template_equation
      (template_app
        (template_hole 2, template_app (template_hole 1, template_var 0)),
       template_app (template_hole 0, template_var 0))),
    ("Computational_Model.right_gpv_Done",
     "right_gpv (Generative_Probabilistic_Value.Done ?x) =
      Generative_Probabilistic_Value.Done ?x",
     template_equation
      (template_app
        (template_hole 2, template_app (template_hole 1, template_var 0)),
       template_app (template_hole 0, template_var 0))),
    ("Computational_Model.vimage_Inl_image_Inr", "Inl -` Inr ` ?A = {}",
     template_equation
      (template_app
        (template_app (template_hole 4, template_hole 3),
         template_app
          (template_app (template_hole 2, template_hole 1),
           template_var 0)),
       template_hole 0)),
    ("Computational_Model.vimage_Inl_Plus", "Inl -` (?A <+> ?B) = ?A",
     template_equation
      (template_app
        (template_app (template_hole 2, template_hole 1),
         template_app
          (template_app (template_hole 0, template_var 1), template_var 0)),
       template_var 1)),
    ("Computational_Model.vimage_Inr_Plus", "Inr -` (?A <+> ?B) = ?B",
     template_equation
      (template_app
        (template_app (template_hole 2, template_hole 1),
         template_app
          (template_app (template_hole 0, template_var 1), template_var 0)),
       template_var 0)),
    ("Computational_Model.vimage_Inr_image_Inl", "Inr -` Inl ` ?A = {}",
     template_equation
      (template_app
        (template_app (template_hole 4, template_hole 3),
         template_app
          (template_app (template_hole 2, template_hole 1),
           template_var 0)),
       template_hole 0)),
    ("Computational_Model.callee_invariant_extend_state_oracle_const'",
     "callee_invariant \<dagger>?oracle (%s. ?I (fst s))",
     template_predicate
      (
         template_app
          (template_app
            (template_app
              (template_hole 3,
               template_app (template_hole 2, template_var 1)),
             t_empty),
           template_hole 0)
         )),
    ("Computational_Model.callee_invariant_extend_state_oracle2_const'",
     "callee_invariant ?oracle\<dagger> (%s. ?I (snd s))",
     template_predicate
      (
         template_app
          (template_app
            (template_app
              (template_hole 3,
               template_app (template_hole 2, template_var 1)),
             t_empty),
           template_hole 0)
         )),
    ("Computational_Model.callee_invariant_extend_state_oracle_const",
     "callee_invariant \<dagger>?oracle (%(s', s). ?I s')",
     template_predicate
      (
         template_app
          (template_app
            (template_app
              (template_hole 3,
               template_app (template_hole 2, template_var 1)),
             template_app (template_hole 1, t_empty)),
           template_hole 0)
         )),
    ("Computational_Model.callee_invariant_extend_state_oracle2_const",
     "callee_invariant ?oracle\<dagger> (%(s, s'). ?I s')",
     template_predicate
      (
         template_app
          (template_app
            (template_app
              (template_hole 3,
               template_app (template_hole 2, template_var 1)),
             template_app (template_hole 1, t_empty)),
           template_hole 0)
         )),
    ("Computational_Model.parallel_oracle_conv_plus_oracle",
     "parallel_oracle ?oracle1.0 ?oracle2.0 =
      ?oracle1.0\<dagger> \<oplus>\<^sub>O \<dagger>?oracle2.0",
     template_equation
      (template_app
        (template_app (template_hole 3, template_var 1), template_var 0),
       template_app
        (template_app
          (template_hole 2, template_app (template_hole 1, template_var 1)),
         template_app (template_hole 0, template_var 0)))),
    ("Computational_Model.extend_state_oracle_plus_oracle",
     "\<dagger>(?oracle1.0 \<oplus>\<^sub>O ?oracle2.0) =
      \<dagger>?oracle1.0 \<oplus>\<^sub>O \<dagger>?oracle2.0",
     template_equation
      (template_app
        (template_hole 4,
         template_app
          (template_app (template_hole 3, template_var 1), template_var 0)),
       template_app
        (template_app
          (template_hole 2, template_app (template_hole 1, template_var 1)),
         template_app (template_hole 0, template_var 0)))),
    ("Computational_Model.extend_state_oracle2_plus_oracle",
     "(?oracle1.0 \<oplus>\<^sub>O ?oracle2.0)\<dagger> =
      ?oracle1.0\<dagger> \<oplus>\<^sub>O ?oracle2.0\<dagger>",
     template_equation
      (template_app
        (template_hole 4,
         template_app
          (template_app (template_hole 3, template_var 1), template_var 0)),
       template_app
        (template_app
          (template_hole 2, template_app (template_hole 1, template_var 1)),
         template_app (template_hole 0, template_var 0)))),
    ("Computational_Model.results_gpv_left_gpv",
     "results_gpv (?\<I>1.0 \<oplus>\<^sub>\<I> ?\<I>2.0) (left_gpv ?gpv) =
      results_gpv ?\<I>1.0 ?gpv",
     template_equation
      (template_app
        (template_app
          (template_hole 3,
           template_app
            (template_app (template_hole 2, template_var 2),
             template_var 1)),
         template_app (template_hole 1, template_var 0)),
       template_app
        (template_app (template_hole 0, template_var 2), template_var 0))),
    ("Computational_Model.results_gpv_right_gpv",
     "results_gpv (?\<I>1.0 \<oplus>\<^sub>\<I> ?\<I>2.0) (right_gpv ?gpv) =
      results_gpv ?\<I>2.0 ?gpv",
     template_equation
      (template_app
        (template_app
          (template_hole 3,
           template_app
            (template_app (template_hole 2, template_var 2),
             template_var 1)),
         template_app (template_hole 1, template_var 0)),
       template_app
        (template_app (template_hole 0, template_var 1), template_var 0))),
    ("Computational_Model.outs_plus_\<I>",
     "outs_\<I> (?\<I>l \<oplus>\<^sub>\<I> ?\<I>r) =
      outs_\<I> ?\<I>l <+> outs_\<I> ?\<I>r",
     template_equation
      (template_app
        (template_hole 4,
         template_app
          (template_app (template_hole 3, template_var 1), template_var 0)),
       template_app
        (template_app
          (template_hole 2, template_app (template_hole 1, template_var 1)),
         template_app (template_hole 0, template_var 0)))),
    ("Computational_Model.\<I>_trivial_plus_\<I>",
     "\<I>_trivial (?\<I>\<^sub>1 \<oplus>\<^sub>\<I> ?\<I>\<^sub>2) =
      (\<I>_trivial ?\<I>\<^sub>1 & \<I>_trivial ?\<I>\<^sub>2)",
     template_equation
      (template_app
        (template_hole 4,
         template_app
          (template_app (template_hole 3, template_var 1), template_var 0)),
       template_app
        (template_app
          (template_hole 2, template_app (template_hole 1, template_var 1)),
         template_app (template_hole 0, template_var 0)))),
    ("Computational_Model.rsuml_lsumr_right_gpv",
     "map_gpv' id rsuml lsumr (right_gpv ?gpv) =
      right_gpv (right_gpv ?gpv)",
     template_equation
      (template_app
        (template_app
          (template_app
            (template_app (template_hole 6, template_hole 5),
             template_hole 4),
           template_hole 3),
         template_app (template_hole 2, template_var 0)),
       template_app
        (template_hole 1, template_app (template_hole 0, template_var 0)))),
    ("Computational_Model.rsuml_lsumr_left_gpv_left_gpv",
     "map_gpv' id rsuml lsumr (left_gpv (left_gpv ?gpv)) = left_gpv ?gpv",
     template_equation
      (template_app
        (template_app
          (template_app
            (template_app (template_hole 6, template_hole 5),
             template_hole 4),
           template_hole 3),
         template_app
          (template_hole 2,
           template_app (template_hole 1, template_var 0))),
       template_app (template_hole 0, template_var 0))),
    ("Computational_Model.lsumr_rsuml_left_gpv",
     "map_gpv' id lsumr rsuml (left_gpv ?gpv) = left_gpv (left_gpv ?gpv)",
     template_equation
      (template_app
        (template_app
          (template_app
            (template_app (template_hole 6, template_hole 5),
             template_hole 4),
           template_hole 3),
         template_app (template_hole 2, template_var 0)),
       template_app
        (template_hole 1, template_app (template_hole 0, template_var 0)))),
    ("Computational_Model.lsumr_rsuml_right_gpv_right_gpv",
     "map_gpv' id lsumr rsuml (right_gpv (right_gpv ?gpv)) =
      right_gpv ?gpv",
     template_equation
      (template_app
        (template_app
          (template_app
            (template_app (template_hole 6, template_hole 5),
             template_hole 4),
           template_hole 3),
         template_app
          (template_hole 2,
           template_app (template_hole 1, template_var 0))),
       template_app (template_hole 0, template_var 0))),
    ("Computational_Model.right_gpv_parametric",
     "rel_fun (rel_gpv ?R5.0 ?R4.0) (rel_gpv ?R5.0 (rel_sum ?R2.0 ?R4.0))
       right_gpv right_gpv",
     template_predicate
      (
         template_app
          (template_app
            (template_app
              (template_app
                (template_hole 5,
                 template_app
                  (template_app (template_hole 4, template_var 2),
                   template_var 1)),
               template_app
                (template_app (template_hole 3, template_var 2),
                 template_app
                  (template_app (template_hole 2, template_var 0),
                   template_var 1))),
             template_hole 1),
           template_hole 0)
         )),
    ("Computational_Model.left_gpv_parametric",
     "rel_fun (rel_gpv ?R5.0 ?R4.0) (rel_gpv ?R5.0 (rel_sum ?R4.0 ?R2.0))
       left_gpv left_gpv",
     template_predicate
      (
         template_app
          (template_app
            (template_app
              (template_app
                (template_hole 5,
                 template_app
                  (template_app (template_hole 4, template_var 2),
                   template_var 1)),
               template_app
                (template_app (template_hole 3, template_var 2),
                 template_app
                  (template_app (template_hole 2, template_var 1),
                   template_var 0))),
             template_hole 1),
           template_hole 0)
         )),
    ("Computational_Model.lift_state_oracle_compose",
     "lift_state_oracle ?F (lift_state_oracle ?G ?oracle) =
      lift_state_oracle (?F o ?G) ?oracle",
     template_equation
      (template_app
        (template_app (template_hole 3, template_var 2),
         template_app
          (template_app (template_hole 2, template_var 1), template_var 0)),
       template_app
        (template_app
          (template_hole 1,
           template_app
            (template_app (template_hole 0, template_var 2),
             template_var 1)),
         template_var 0))),
    ("Computational_Model.left_gpv_bind_gpv",
     "left_gpv (?gpv >>= ?f) = left_gpv ?gpv >>= left_gpv o ?f",
     template_equation
      (template_app
        (template_hole 4,
         template_app
          (template_app (template_hole 3, template_var 1), template_var 0)),
       template_app
        (template_app
          (template_hole 2, template_app (template_hole 1, template_var 1)),
         template_app
          (template_app (template_hole 0, template_hole 4),
           template_var 0)))),
    ("Computational_Model.right_gpv_bind_gpv",
     "right_gpv (?gpv >>= ?f) = right_gpv ?gpv >>= right_gpv o ?f",
     template_equation
      (template_app
        (template_hole 4,
         template_app
          (template_app (template_hole 3, template_var 1), template_var 0)),
       template_app
        (template_app
          (template_hole 2, template_app (template_hole 1, template_var 1)),
         template_app
          (template_app (template_hole 0, template_hole 4),
           template_var 0)))),
    ("Computational_Model.rsuml_lsumr_left_gpv_right_gpv",
     "map_gpv' id rsuml lsumr (left_gpv (right_gpv ?gpv)) =
      right_gpv (left_gpv ?gpv)",
     template_equation
      (template_app
        (template_app
          (template_app
            (template_app (template_hole 7, template_hole 6),
             template_hole 5),
           template_hole 4),
         template_app
          (template_hole 3,
           template_app (template_hole 2, template_var 0))),
       template_app
        (template_hole 1, template_app (template_hole 0, template_var 0)))),
    ("Computational_Model.lsumr_rsuml_right_gpv_left_gpv",
     "map_gpv' id lsumr rsuml (right_gpv (left_gpv ?gpv)) =
      left_gpv (right_gpv ?gpv)",
     template_equation
      (template_app
        (template_app
          (template_app
            (template_app (template_hole 7, template_hole 6),
             template_hole 5),
           template_hole 4),
         template_app
          (template_hole 3,
           template_app (template_hole 2, template_var 0))),
       template_app
        (template_hole 1, template_app (template_hole 0, template_var 0)))),
    ("Computational_Model.WT_gpv_left_gpv",
     "?\<I>1.0 \<turnstile>g ?gpv \<surd> ==>
      ?\<I>1.0 \<oplus>\<^sub>\<I> ?\<I>2.0
      \<turnstile>g left_gpv ?gpv \<surd>",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 3, template_var 2),
              template_var 1)
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 2,
               template_app
                (template_app (template_hole 1, template_var 2),
                 template_var 0)),
             template_app (template_hole 0, template_var 1))
           ))),
    ("Computational_Model.WT_gpv_right_gpv",
     "?\<I>2.0 \<turnstile>g ?gpv \<surd> ==>
      ?\<I>1.0 \<oplus>\<^sub>\<I> ?\<I>2.0
      \<turnstile>g right_gpv ?gpv \<surd>",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 3, template_var 2),
              template_var 1)
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 2,
               template_app
                (template_app (template_hole 1, template_var 0),
                 template_var 2)),
             template_app (template_hole 0, template_var 1))
           ))),
    ("Computational_Model.responses_plus_\<I>_Inl",
     "responses_\<I> (?\<I>l \<oplus>\<^sub>\<I> ?\<I>r) (Inl ?x) =
      Inl ` responses_\<I> ?\<I>l ?x",
     template_equation
      (template_app
        (template_app
          (template_hole 5,
           template_app
            (template_app (template_hole 4, template_var 2),
             template_var 1)),
         template_app (template_hole 3, template_var 0)),
       template_app
        (template_app (template_hole 2, template_hole 1),
         template_app
          (template_app (template_hole 0, template_var 2),
           template_var 0)))),
    ("Computational_Model.responses_plus_\<I>_Inr",
     "responses_\<I> (?\<I>l \<oplus>\<^sub>\<I> ?\<I>r) (Inr ?y) =
      Inr ` responses_\<I> ?\<I>r ?y",
     template_equation
      (template_app
        (template_app
          (template_hole 5,
           template_app
            (template_app (template_hole 4, template_var 2),
             template_var 1)),
         template_app (template_hole 3, template_var 0)),
       template_app
        (template_app (template_hole 2, template_hole 1),
         template_app
          (template_app (template_hole 0, template_var 1),
           template_var 0)))),
    ("Computational_Model.exec_gpv_plus_oracle_left",
     "exec_gpv (?oracle1.0 \<oplus>\<^sub>O ?oracle2.0) (left_gpv ?gpv) ?s =
      exec_gpv ?oracle1.0 ?gpv ?s",
     template_equation
      (template_app
        (template_app
          (template_app
            (template_hole 3,
             template_app
              (template_app (template_hole 2, template_var 3),
               template_var 2)),
           template_app (template_hole 1, template_var 1)),
         template_var 0),
       template_app
        (template_app
          (template_app (template_hole 0, template_var 3), template_var 1),
         template_var 0))),
    ("Computational_Model.exec_gpv_plus_oracle_right",
     "exec_gpv (?oracle1.0 \<oplus>\<^sub>O ?oracle2.0) (right_gpv ?gpv)
       ?s =
      exec_gpv ?oracle2.0 ?gpv ?s",
     template_equation
      (template_app
        (template_app
          (template_app
            (template_hole 3,
             template_app
              (template_app (template_hole 2, template_var 3),
               template_var 2)),
           template_app (template_hole 1, template_var 1)),
         template_var 0),
       template_app
        (template_app
          (template_app (template_hole 0, template_var 2), template_var 1),
         template_var 0))),
    ("Computational_Model.lift_stop_oracle_apply",
     "lift_stop_oracle ?oracle ?s ?x =
      map_spmf (apfst Some) (?oracle ?s ?x)",
     template_equation
      (template_app
        (template_app
          (template_app (template_hole 4, template_var 2), template_var 1),
         template_var 0),
       template_app
        (template_app
          (template_hole 3,
           template_app
            (template_hole 2,
             template_app (template_hole 1, template_hole 0))),
         template_app
          (template_app (template_var 2, template_var 1),
           template_var 0)))),
    ("Computational_Model.left_gpv_map",
     "left_gpv (map_gpv ?f ?g ?gpv) =
      map_gpv ?f (map_sum ?g ?h) (left_gpv ?gpv)",
     template_equation
      (template_app
        (template_hole 4,
         template_app
          (template_app
            (template_app (template_hole 3, template_var 3),
             template_var 2),
           template_var 1)),
       template_app
        (template_app
          (template_app (template_hole 2, template_var 3),
           template_app
            (template_app (template_hole 1, template_var 2),
             template_var 0)),
         template_app (template_hole 0, template_var 1)))),
    ("Computational_Model.right_gpv_map",
     "right_gpv (map_gpv ?f ?g ?gpv) =
      map_gpv ?f (map_sum ?h ?g) (right_gpv ?gpv)",
     template_equation
      (template_app
        (template_hole 4,
         template_app
          (template_app
            (template_app (template_hole 3, template_var 3),
             template_var 2),
           template_var 1)),
       template_app
        (template_app
          (template_app (template_hole 2, template_var 3),
           template_app
            (template_app (template_hole 1, template_var 0),
             template_var 2)),
         template_app (template_hole 0, template_var 1)))),
    ("Computational_Model.WT_plus_oracleD1",
     "?\<I>l \<oplus>\<^sub>\<I> ?\<I>r \<turnstile>c
      (?left \<oplus>\<^sub>O ?right) ?s \<surd> ==>
      ?\<I>l \<turnstile>c ?left ?s \<surd>",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_hole 3,
                template_app
                 (template_app (template_hole 2, template_var 4),
                  template_var 3)),
              template_app
               (template_app
                 (template_app (template_hole 1, template_var 2),
                  template_var 1),
                template_var 0))
            )],
       template_predicate
        (
           template_app
            (template_app (template_hole 0, template_var 4),
             template_app (template_var 2, template_var 0))
           ))),
    ("Computational_Model.WT_plus_oracleD2",
     "?\<I>l \<oplus>\<^sub>\<I> ?\<I>r \<turnstile>c
      (?left \<oplus>\<^sub>O ?right) ?s \<surd> ==>
      ?\<I>r \<turnstile>c ?right ?s \<surd>",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_hole 3,
                template_app
                 (template_app (template_hole 2, template_var 4),
                  template_var 3)),
              template_app
               (template_app
                 (template_app (template_hole 1, template_var 2),
                  template_var 1),
                template_var 0))
            )],
       template_predicate
        (
           template_app
            (template_app (template_hole 0, template_var 3),
             template_app (template_var 1, template_var 0))
           ))),
    ("Computational_Model.left_gpv_parametric'",
     "rel_fun (rel_gpv'' ?A ?C ?R)
       (rel_gpv'' ?A (rel_sum ?C ?C') (rel_sum ?R ?R')) left_gpv left_gpv",
     template_predicate
      (
         template_app
          (template_app
            (template_app
              (template_app
                (template_hole 6,
                 template_app
                  (template_app
                    (template_app (template_hole 5, template_var 4),
                     template_var 3),
                   template_var 2)),
               template_app
                (template_app
                  (template_app (template_hole 4, template_var 4),
                   template_app
                    (template_app (template_hole 3, template_var 3),
                     template_var 1)),
                 template_app
                  (template_app (template_hole 2, template_var 2),
                   template_var 0))),
             template_hole 1),
           template_hole 0)
         )),
    ("Computational_Model.right_gpv_parametric'",
     "rel_fun (rel_gpv'' ?A ?C' ?R')
       (rel_gpv'' ?A (rel_sum ?C ?C') (rel_sum ?R ?R')) right_gpv
       right_gpv",
     template_predicate
      (
         template_app
          (template_app
            (template_app
              (template_app
                (template_hole 6,
                 template_app
                  (template_app
                    (template_app (template_hole 5, template_var 4),
                     template_var 3),
                   template_var 2)),
               template_app
                (template_app
                  (template_app (template_hole 4, template_var 4),
                   template_app
                    (template_app (template_hole 3, template_var 1),
                     template_var 3)),
                 template_app
                  (template_app (template_hole 2, template_var 0),
                   template_var 2))),
             template_hole 1),
           template_hole 0)
         )),
    ("Computational_Model.rprodl_extend_state_oracle",
     "map_fun rprodl (map_fun id (map_spmf (map_prod id lprodr)))
       \<dagger>\<dagger>?oracle =
      \<dagger>?oracle",
     template_equation
      (template_app
        (template_app
          (template_app (template_hole 11, template_hole 10),
           template_app
            (template_app (template_hole 9, template_hole 8),
             template_app
              (template_hole 7,
               template_app
                (template_hole 6,
                 template_app
                  (template_app (template_hole 5, template_hole 4),
                   template_hole 3))))),
         template_app
          (template_hole 2,
           template_app (template_hole 1, template_var 0))),
       template_app (template_hole 0, template_var 0))),
    ("Computational_Model.lossless_family_oracle",
     "lossless_spmf (family_oracle ?f ?s ?ix) =
      lossless_spmf (?f (fst ?ix) (?s (fst ?ix)) (snd ?ix))",
     template_equation
      (template_app
        (template_hole 4,
         template_app
          (template_app
            (template_app (template_hole 3, template_var 2),
             template_var 1),
           template_var 0)),
       template_app
        (template_hole 2,
         template_app
          (template_app
            (template_app
              (template_var 2,
               template_app (template_hole 1, template_var 0)),
             template_app
              (template_var 1,
               template_app (template_hole 1, template_var 0))),
           template_app (template_hole 0, template_var 0))))),
    ("Computational_Model.le_plus_\<I>_iff",
     "(?\<I>1.0 \<oplus>\<^sub>\<I> ?\<I>2.0
       <= ?\<I>1' \<oplus>\<^sub>\<I> ?\<I>2') =
      (?\<I>1.0 <= ?\<I>1' & ?\<I>2.0 <= ?\<I>2')",
     template_equation
      (template_app
        (template_app
          (template_hole 4,
           template_app
            (template_app (template_hole 3, template_var 3),
             template_var 2)),
         template_app
          (template_app (template_hole 3, template_var 1), template_var 0)),
       template_app
        (template_app
          (template_hole 2,
           template_app
            (template_app (template_hole 1, template_var 3),
             template_var 1)),
         template_app
          (template_app (template_hole 0, template_var 2),
           template_var 0)))),
    ("Computational_Model.left_gpv_inline",
     "left_gpv (inline ?callee ?gpv ?s) =
      inline (%s q. left_gpv (?callee s q)) ?gpv ?s",
     template_equation
      (template_app
        (template_hole 3,
         template_app
          (template_app
            (template_app (template_hole 2, template_var 2),
             template_var 1),
           template_var 0)),
       template_app
        (template_app
          (template_app (template_hole 1, t_empty), template_var 1),
         template_var 0))),
    ("Computational_Model.right_gpv_inline",
     "right_gpv (inline ?callee ?gpv ?s) =
      inline (%s q. right_gpv (?callee s q)) ?gpv ?s",
     template_equation
      (template_app
        (template_hole 3,
         template_app
          (template_app
            (template_app (template_hole 2, template_var 2),
             template_var 1),
           template_var 0)),
       template_app
        (template_app
          (template_app (template_hole 1, t_empty), template_var 1),
         template_var 0))),
    ("Computational_Model.\<I>_full_le_plus_\<I>",
     "[| \<I>_full <= ?\<I>1.0; \<I>_full <= ?\<I>2.0 |]
      ==> \<I>_full <= ?\<I>1.0 \<oplus>\<^sub>\<I> ?\<I>2.0",
     template_implication
      ([template_inequation (less_equals, template_hole 5, template_var 1),
        template_inequation (less_equals, template_hole 3, template_var 0)],
       template_inequation
        (less_equals, template_hole 1,
         template_app
          (template_app (template_hole 0, template_var 1),
           template_var 0)))),
    ("Computational_Model.callee_invariant_plus_oracle",
     "callee_invariant (?left \<oplus>\<^sub>O ?right) ?I =
      (callee_invariant ?left ?I & callee_invariant ?right ?I)",
     template_equation
      (template_app
        (template_app
          (template_app
            (template_hole 7,
             template_app
              (template_app (template_hole 6, template_var 2),
               template_var 1)),
           template_var 0),
         template_hole 5),
       template_app
        (template_app
          (template_hole 4,
           template_app
            (template_app
              (template_app (template_hole 3, template_var 2),
               template_var 0),
             template_hole 2)),
         template_app
          (template_app
            (template_app (template_hole 1, template_var 1),
             template_var 0),
           template_hole 0)))),
    ("Computational_Model.plus_\<I>_parametric",
     "rel_fun (rel_\<I> ?C ?R)
       (rel_fun (rel_\<I> ?C' ?R')
         (rel_\<I> (rel_sum ?C ?C') (rel_sum ?R ?R')))
       (\<oplus>\<^sub>\<I>) (\<oplus>\<^sub>\<I>)",
     template_predicate
      (
         template_app
          (template_app
            (template_app
              (template_app
                (template_hole 8,
                 template_app
                  (template_app (template_hole 7, template_var 3),
                   template_var 2)),
               template_app
                (template_app
                  (template_hole 6,
                   template_app
                    (template_app (template_hole 5, template_var 1),
                     template_var 0)),
                 template_app
                  (template_app
                    (template_hole 4,
                     template_app
                      (template_app (template_hole 3, template_var 3),
                       template_var 1)),
                   template_app
                    (template_app (template_hole 2, template_var 2),
                     template_var 0)))),
             template_hole 1),
           template_hole 0)
         )),
    ("Computational_Model.left_gpv_Inl_transfer",
     "rel_gpv'' (=) (%l r. l = Inl r) (%l r. l = Inl r) (left_gpv ?gpv)
       ?gpv",
     template_predicate
      (
         template_app
          (template_app
            (template_app
              (template_app
                (template_app (template_hole 6, template_hole 5), t_empty),
               t_empty),
             template_app (template_hole 0, template_var 0)),
           template_var 0)
         )),
    ("Computational_Model.right_gpv_Inr_transfer",
     "rel_gpv'' (=) (%l r. l = Inr r) (%l r. l = Inr r) (right_gpv ?gpv)
       ?gpv",
     template_predicate
      (
         template_app
          (template_app
            (template_app
              (template_app
                (template_app (template_hole 6, template_hole 5), t_empty),
               t_empty),
             template_app (template_hole 0, template_var 0)),
           template_var 0)
         )),
    ("Computational_Model.left_gpv_Pause",
     "left_gpv (Generative_Probabilistic_Value.Pause ?x ?rpv) =
      Generative_Probabilistic_Value.Pause (Inl ?x) (left_rpv ?rpv)",
     template_equation
      (template_app
        (template_hole 5,
         template_app
          (template_app (template_hole 4, template_var 1), template_var 0)),
       template_app
        (template_app
          (template_hole 3, template_app (template_hole 2, template_var 1)),
         t_empty))),
    ("Computational_Model.right_gpv_Pause",
     "right_gpv (Generative_Probabilistic_Value.Pause ?x ?rpv) =
      Generative_Probabilistic_Value.Pause (Inr ?x) (right_rpv ?rpv)",
     template_equation
      (template_app
        (template_hole 5,
         template_app
          (template_app (template_hole 4, template_var 1), template_var 0)),
       template_app
        (template_app
          (template_hole 3, template_app (template_hole 2, template_var 1)),
         t_empty))),
    ("Computational_Model.plus_\<I>_mono",
     "[| ?\<I>1.0 <= ?\<I>1'; ?\<I>2.0 <= ?\<I>2' |]
      ==> ?\<I>1.0 \<oplus>\<^sub>\<I> ?\<I>2.0
          <= ?\<I>1' \<oplus>\<^sub>\<I> ?\<I>2'",
     template_implication
      ([template_inequation (less_equals, template_var 3, template_var 2),
        template_inequation (less_equals, template_var 1, template_var 0)],
       template_inequation
        (less_equals,
         template_app
          (template_app (template_hole 0, template_var 3), template_var 1),
         template_app
          (template_app (template_hole 0, template_var 2),
           template_var 0)))),
    ("Computational_Model.WT_plus_oracle_iff",
     "?\<I>l \<oplus>\<^sub>\<I> ?\<I>r \<turnstile>c
      (?left \<oplus>\<^sub>O ?right) ?s \<surd> =
      (?\<I>l \<turnstile>c ?left ?s \<surd> & ?\<I>r \<turnstile>c
       ?right ?s \<surd>)",
     template_equation
      (template_app
        (template_app
          (template_hole 5,
           template_app
            (template_app (template_hole 4, template_var 4),
             template_var 3)),
         template_app
          (template_app
            (template_app (template_hole 3, template_var 2),
             template_var 1),
           template_var 0)),
       template_app
        (template_app
          (template_hole 2,
           template_app
            (template_app (template_hole 1, template_var 4),
             template_app (template_var 2, template_var 0))),
         template_app
          (template_app (template_hole 0, template_var 3),
           template_app (template_var 1, template_var 0))))),
    ("Computational_Model.callee_invariant_on_plus_oracle",
     "callee_invariant_on (?left \<oplus>\<^sub>O ?right) ?I
       (?\<I>l \<oplus>\<^sub>\<I> ?\<I>r) =
      (callee_invariant_on ?left ?I ?\<I>l &
       callee_invariant_on ?right ?I ?\<I>r)",
     template_equation
      (template_app
        (template_app
          (template_app
            (template_hole 5,
             template_app
              (template_app (template_hole 4, template_var 4),
               template_var 3)),
           template_var 2),
         template_app
          (template_app (template_hole 3, template_var 1), template_var 0)),
       template_app
        (template_app
          (template_hole 2,
           template_app
            (template_app
              (template_app (template_hole 1, template_var 4),
               template_var 2),
             template_var 1)),
         template_app
          (template_app
            (template_app (template_hole 0, template_var 3),
             template_var 2),
           template_var 0)))),
    ("Computational_Model.family_oracle_apply",
     "family_oracle ?f ?s (?i, ?x) =
      map_spmf (apsnd (fun_upd ?s ?i)) (?f ?i (?s ?i) ?x)",
     template_equation
      (template_app
        (template_app
          (template_app (template_hole 5, template_var 3), template_var 2),
         template_app
          (template_app (template_hole 4, template_var 1), template_var 0)),
       template_app
        (template_app
          (template_hole 3,
           template_app
            (template_hole 2,
             template_app
              (template_hole 1,
               template_app
                (template_app (template_hole 0, template_var 2),
                 template_var 1)))),
         template_app
          (template_app
            (template_app (template_var 3, template_var 1),
             template_app (template_var 2, template_var 1)),
           template_var 0)))),
    ("Computational_Model.stateless_callee_parametric'",
     "rel_fun (rel_fun ?A (rel_gpv'' ?B ?C ?R))
       (rel_fun ?S (rel_fun ?A (rel_gpv'' (rel_prod ?B ?S) ?C ?R)))
       stateless_callee stateless_callee",
     template_predicate
      (
         template_app
          (template_app
            (template_app
              (template_app
                (template_hole 8,
                 template_app
                  (template_app (template_hole 7, template_var 4),
                   template_app
                    (template_app
                      (template_app (template_hole 6, template_var 3),
                       template_var 2),
                     template_var 1))),
               template_app
                (template_app (template_hole 5, template_var 0),
                 template_app
                  (template_app (template_hole 4, template_var 4),
                   template_app
                    (template_app
                      (template_app
                        (template_hole 3,
                         template_app
                          (template_app (template_hole 2, template_var 3),
                           template_var 0)),
                       template_var 2),
                     template_var 1)))),
             template_hole 1),
           template_hole 0)
         )),
    ("Computational_Model.map_gpv'_map_gpv_swap",
     "map_gpv' ?f ?g ?h (map_gpv ?f' id ?gpv) =
      map_gpv (?f o ?f') id (map_gpv' id ?g ?h ?gpv)",
     template_equation
      (template_app
        (template_app
          (template_app
            (template_app (template_hole 7, template_var 4),
             template_var 3),
           template_var 2),
         template_app
          (template_app
            (template_app (template_hole 6, template_var 1),
             template_hole 5),
           template_var 0)),
       template_app
        (template_app
          (template_app
            (template_hole 4,
             template_app
              (template_app (template_hole 3, template_var 4),
               template_var 1)),
           template_hole 2),
         template_app
          (template_app
            (template_app
              (template_app (template_hole 1, template_hole 0),
               template_var 3),
             template_var 2),
           template_var 0)))),
    ("Computational_Model.map_lsumr_plus_oracle",
     "map_fun id (map_fun lsumr (map_spmf (map_prod rsuml id)))
       ((?oracle1.0 \<oplus>\<^sub>O ?oracle2.0) \<oplus>\<^sub>O
        ?oracle3.0) =
      ?oracle1.0 \<oplus>\<^sub>O (?oracle2.0 \<oplus>\<^sub>O ?oracle3.0)",
     template_equation
      (template_app
        (template_app
          (template_app (template_hole 11, template_hole 10),
           template_app
            (template_app (template_hole 9, template_hole 8),
             template_app
              (template_hole 7,
               template_app
                (template_hole 6,
                 template_app
                  (template_app (template_hole 5, template_hole 4),
                   template_hole 10))))),
         template_app
          (template_app
            (template_hole 3,
             template_app
              (template_app (template_hole 2, template_var 2),
               template_var 1)),
           template_var 0)),
       template_app
        (template_app (template_hole 1, template_var 2),
         template_app
          (template_app (template_hole 0, template_var 1),
           template_var 0)))),
    ("Computational_Model.map_rsuml_plus_oracle",
     "map_fun id (map_fun rsuml (map_spmf (map_prod lsumr id)))
       (?oracle1.0 \<oplus>\<^sub>O
        (?oracle2.0 \<oplus>\<^sub>O ?oracle3.0)) =
      (?oracle1.0 \<oplus>\<^sub>O ?oracle2.0) \<oplus>\<^sub>O ?oracle3.0",
     template_equation
      (template_app
        (template_app
          (template_app (template_hole 11, template_hole 10),
           template_app
            (template_app (template_hole 9, template_hole 8),
             template_app
              (template_hole 7,
               template_app
                (template_hole 6,
                 template_app
                  (template_app (template_hole 5, template_hole 4),
                   template_hole 10))))),
         template_app
          (template_app (template_hole 3, template_var 2),
           template_app
            (template_app (template_hole 2, template_var 1),
             template_var 0))),
       template_app
        (template_app
          (template_hole 1,
           template_app
            (template_app (template_hole 0, template_var 2),
             template_var 1)),
         template_var 0))),
    ("Computational_Model.extend_state_oracle_simps",
     "\<dagger>?callee (?s', ?s) ?x =
      map_spmf (%(y, s). (y, ?s', s)) (?callee ?s ?x)",
     template_equation
      (template_app
        (template_app
          (template_app (template_hole 5, template_var 3),
           template_app
            (template_app (template_hole 4, template_var 2),
             template_var 1)),
         template_var 0),
       template_app
        (template_app
          (template_hole 3,
           template_app
            (template_hole 2, template_app (template_hole 1, t_empty))),
         template_app
          (template_app (template_var 3, template_var 1),
           template_var 0)))),
    ("Computational_Model.extend_state_oracle2_simps",
     "?callee\<dagger> (?s, ?s') ?x =
      map_spmf (%(y, s). (y, s, ?s')) (?callee ?s ?x)",
     template_equation
      (template_app
        (template_app
          (template_app (template_hole 5, template_var 3),
           template_app
            (template_app (template_hole 4, template_var 2),
             template_var 1)),
         template_var 0),
       template_app
        (template_app
          (template_hole 3,
           template_app
            (template_hole 2, template_app (template_hole 1, t_empty))),
         template_app
          (template_app (template_var 3, template_var 2),
           template_var 0)))),
    ("Computational_Model.map_\<I>_plus_\<I>",
     "map_\<I> (map_sum ?f1.0 ?f2.0) (map_sum ?g1.0 ?g2.0)
       (?\<I>1.0 \<oplus>\<^sub>\<I> ?\<I>2.0) =
      map_\<I> ?f1.0 ?g1.0 ?\<I>1.0 \<oplus>\<^sub>\<I>
      map_\<I> ?f2.0 ?g2.0 ?\<I>2.0",
     template_equation
      (template_app
        (template_app
          (template_app
            (template_hole 6,
             template_app
              (template_app (template_hole 5, template_var 5),
               template_var 4)),
           template_app
            (template_app (template_hole 4, template_var 3),
             template_var 2)),
         template_app
          (template_app (template_hole 3, template_var 1), template_var 0)),
       template_app
        (template_app
          (template_hole 2,
           template_app
            (template_app
              (template_app (template_hole 1, template_var 5),
               template_var 3),
             template_var 1)),
         template_app
          (template_app
            (template_app (template_hole 0, template_var 4),
             template_var 2),
           template_var 0)))),
    ("Computational_Model.WT_plus_oracleI",
     "[| ?\<I>l \<turnstile>c ?left ?s \<surd>;
         ?\<I>r \<turnstile>c ?right ?s \<surd> |]
      ==> ?\<I>l \<oplus>\<^sub>\<I> ?\<I>r \<turnstile>c
          (?left \<oplus>\<^sub>O ?right) ?s \<surd>",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 4, template_var 4),
              template_app (template_var 3, template_var 2))
            ),
        template_predicate
         (
            template_app
             (template_app (template_hole 3, template_var 1),
              template_app (template_var 0, template_var 2))
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 2,
               template_app
                (template_app (template_hole 1, template_var 4),
                 template_var 1)),
             template_app
              (template_app
                (template_app (template_hole 0, template_var 3),
                 template_var 0),
               template_var 2))
           ))),
    ("Computational_Model.WT_parallel_oracle",
     "[| ?\<I>l \<turnstile>c ?left ?sl \<surd>;
         ?\<I>r \<turnstile>c ?right ?sr \<surd> |]
      ==> ?\<I>l \<oplus>\<^sub>\<I> ?\<I>r \<turnstile>c
          parallel_oracle ?left ?right (?sl, ?sr) \<surd>",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 5, template_var 5),
              template_app (template_var 4, template_var 3))
            ),
        template_predicate
         (
            template_app
             (template_app (template_hole 4, template_var 2),
              template_app (template_var 1, template_var 0))
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 3,
               template_app
                (template_app (template_hole 2, template_var 5),
                 template_var 2)),
             template_app
              (template_app
                (template_app (template_hole 1, template_var 4),
                 template_var 1),
               template_app
                (template_app (template_hole 0, template_var 3),
                 template_var 0)))
           ))),
    ("Computational_Model.callee_invariant_parallel_oracleI",
     "[| callee_invariant_on ?left ?Il ?\<I>l;
         callee_invariant_on ?right ?Ir ?\<I>r |]
      ==> callee_invariant_on (parallel_oracle ?left ?right)
           (pred_prod ?Il ?Ir) (?\<I>l \<oplus>\<^sub>\<I> ?\<I>r)",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app (template_hole 5, template_var 5),
                template_var 4),
              template_var 3)
            ),
        template_predicate
         (
            template_app
             (template_app
               (template_app (template_hole 4, template_var 2),
                template_var 1),
              template_var 0)
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_app
                (template_hole 3,
                 template_app
                  (template_app (template_hole 2, template_var 5),
                   template_var 2)),
               template_app
                (template_app (template_hole 1, template_var 4),
                 template_var 1)),
             template_app
              (template_app (template_hole 0, template_var 3),
               template_var 0))
           ))),
    ("Computational_Model.lift_stop_oracle_transfer",
     "rel_fun (rel_fun ?S (rel_fun ?C (rel_spmf (rel_prod ?R ?S))))
       (rel_fun ?S (rel_fun ?C (rel_spmf (rel_prod (pcr_Some ?R) ?S))))
       (%x. x) lift_stop_oracle",
     template_predicate
      (
         template_app
          (template_app
            (template_app
              (template_app
                (template_hole 12,
                 template_app
                  (template_app (template_hole 11, template_var 2),
                   template_app
                    (template_app (template_hole 10, template_var 1),
                     template_app
                      (template_hole 9,
                       template_app
                        (template_hole 8,
                         template_app
                          (template_app (template_hole 7, template_var 0),
                           template_var 2)))))),
               template_app
                (template_app (template_hole 6, template_var 2),
                 template_app
                  (template_app (template_hole 5, template_var 1),
                   template_app
                    (template_hole 4,
                     template_app
                      (template_hole 3,
                       template_app
                        (template_app
                          (template_hole 2,
                           template_app (template_hole 1, template_var 0)),
                         template_var 2)))))),
             t_empty),
           template_hole 0)
         )),
    ("Computational_Model.lift_state_oracle_simps",
     "lift_state_oracle ?F ?oracle (?t, ?s') ?a =
      map_spmf rprodl
       (?F (map_fun (Pair ?t) (map_fun id (map_spmf lprodr)) ?oracle) ?s'
         ?a)",
     template_equation
      (template_app
        (template_app
          (template_app
            (template_app (template_hole 11, template_var 4),
             template_var 3),
           template_app
            (template_app (template_hole 10, template_var 2),
             template_var 1)),
         template_var 0),
       template_app
        (template_app
          (template_hole 9,
           template_app (template_hole 8, template_hole 7)),
         template_app
          (template_app
            (template_app
              (template_var 4,
               template_app
                (template_app
                  (template_app
                    (template_hole 6,
                     template_app (template_hole 5, template_var 2)),
                   template_app
                    (template_app (template_hole 4, template_hole 3),
                     template_app
                      (template_hole 2,
                       template_app (template_hole 1, template_hole 0)))),
                 template_var 3)),
             template_var 1),
           template_var 0)))),
    ("Computational_Model.extend_state_oracle_transfer",
     "rel_fun (rel_fun ?S (rel_fun ?C (rel_spmf (rel_prod ?R ?S))))
       (rel_fun (rel_prod2 ?S)
         (rel_fun ?C (rel_spmf (rel_prod ?R (rel_prod2 ?S)))))
       (%oracle. oracle) extend_state_oracle",
     template_predicate
      (
         template_app
          (template_app
            (template_app
              (template_app
                (template_hole 12,
                 template_app
                  (template_app (template_hole 11, template_var 2),
                   template_app
                    (template_app (template_hole 10, template_var 1),
                     template_app
                      (template_hole 9,
                       template_app
                        (template_hole 8,
                         template_app
                          (template_app (template_hole 7, template_var 0),
                           template_var 2)))))),
               template_app
                (template_app
                  (template_hole 6,
                   template_app (template_hole 5, template_var 2)),
                 template_app
                  (template_app (template_hole 4, template_var 1),
                   template_app
                    (template_hole 3,
                     template_app
                      (template_hole 2,
                       template_app
                        (template_app (template_hole 1, template_var 0),
                         template_app
                          (template_hole 5, template_var 2))))))),
             t_empty),
           template_hole 0)
         )),
    ("Computational_Model.extend_state_oracle2_parametric",
     "rel_fun (rel_fun ?S (rel_fun ?C (rel_spmf (rel_prod ?R ?S))))
       (rel_fun (rel_prod ?S ?S')
         (rel_fun ?C (rel_spmf (rel_prod ?R (rel_prod ?S ?S')))))
       extend_state_oracle2 extend_state_oracle2",
     template_predicate
      (
         template_app
          (template_app
            (template_app
              (template_app
                (template_hole 13,
                 template_app
                  (template_app (template_hole 12, template_var 3),
                   template_app
                    (template_app (template_hole 11, template_var 2),
                     template_app
                      (template_hole 10,
                       template_app
                        (template_hole 9,
                         template_app
                          (template_app (template_hole 8, template_var 1),
                           template_var 3)))))),
               template_app
                (template_app
                  (template_hole 7,
                   template_app
                    (template_app (template_hole 6, template_var 3),
                     template_var 0)),
                 template_app
                  (template_app (template_hole 5, template_var 2),
                   template_app
                    (template_hole 4,
                     template_app
                      (template_hole 3,
                       template_app
                        (template_app (template_hole 2, template_var 1),
                         template_app
                          (template_app (template_hole 6, template_var 3),
                           template_var 0))))))),
             template_hole 1),
           template_hole 0)
         )),
    ("Computational_Model.extend_state_oracle_parametric",
     "rel_fun (rel_fun ?S (rel_fun ?C (rel_spmf (rel_prod ?R ?S))))
       (rel_fun (rel_prod ?S' ?S)
         (rel_fun ?C (rel_spmf (rel_prod ?R (rel_prod ?S' ?S)))))
       extend_state_oracle extend_state_oracle",
     template_predicate
      (
         template_app
          (template_app
            (template_app
              (template_app
                (template_hole 13,
                 template_app
                  (template_app (template_hole 12, template_var 3),
                   template_app
                    (template_app (template_hole 11, template_var 2),
                     template_app
                      (template_hole 10,
                       template_app
                        (template_hole 9,
                         template_app
                          (template_app (template_hole 8, template_var 1),
                           template_var 3)))))),
               template_app
                (template_app
                  (template_hole 7,
                   template_app
                    (template_app (template_hole 6, template_var 0),
                     template_var 3)),
                 template_app
                  (template_app (template_hole 5, template_var 2),
                   template_app
                    (template_hole 4,
                     template_app
                      (template_hole 3,
                       template_app
                        (template_app (template_hole 2, template_var 1),
                         template_app
                          (template_app (template_hole 6, template_var 0),
                           template_var 3))))))),
             template_hole 1),
           template_hole 0)
         )),
    ("Computational_Model.in_set_spmf_extend_state_oracle",
     "(?x : set_spmf (\<dagger>?oracle ?s ?y)) =
      (fst (snd ?x) = fst ?s &
       (fst ?x, snd (snd ?x)) : set_spmf (?oracle (snd ?s) ?y))",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 11, template_var 3),
              template_app
               (template_hole 10,
                template_app
                 (template_app
                   (template_app (template_hole 9, template_var 2),
                    template_var 1),
                  template_var 0)))
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 8,
               template_app
                (template_app
                  (template_hole 7,
                   template_app
                    (template_hole 6,
                     template_app (template_hole 5, template_var 3))),
                 template_app (template_hole 6, template_var 1))),
             template_app
              (template_app
                (template_hole 4,
                 template_app
                  (template_app
                    (template_hole 3,
                     template_app (template_hole 2, template_var 3)),
                   template_app
                    (template_hole 1,
                     template_app (template_hole 5, template_var 3)))),
               template_app
                (template_hole 0,
                 template_app
                  (template_app
                    (template_var 2,
                     template_app (template_hole 1, template_var 1)),
                   template_var 0))))
           ))),
    ("Computational_Model.lossless_parallel_oracle",
     "lossless_spmf (parallel_oracle ?left ?right ?s12.0 ?xy) =
      ((ALL x. ?xy = Inl x --> lossless_spmf (?left (fst ?s12.0) x)) &
       (ALL y. ?xy = Inr y --> lossless_spmf (?right (snd ?s12.0) y)))",
     template_equation
      (template_app
        (template_hole 12,
         template_app
          (template_app
            (template_app
              (template_app (template_hole 11, template_var 3),
               template_var 2),
             template_var 1),
           template_var 0)),
       template_app
        (template_app
          (template_hole 10, template_app (template_hole 9, t_empty)),
         template_app (template_hole 3, t_empty)))),
    ("Computational_Model.inline1_left_gpv",
     "inline1 (%s q. left_gpv (?callee s q)) ?gpv ?s =
      map_spmf (map_sum id (map_prod Inl (map_prod left_rpv id)))
       (inline1 ?callee ?gpv ?s)",
     template_equation
      (template_app
        (template_app
          (template_app (template_hole 12, t_empty), template_var 1),
         template_var 0),
       template_app
        (template_app
          (template_hole 10,
           template_app
            (template_hole 9,
             template_app
              (template_app (template_hole 8, template_hole 7),
               template_app
                (template_app (template_hole 6, template_hole 5),
                 template_app
                  (template_app (template_hole 4, t_empty),
                   template_hole 1))))),
         template_app
          (template_app
            (template_app (template_hole 0, template_var 2),
             template_var 1),
           template_var 0)))),
    ("Computational_Model.inline1_right_gpv",
     "inline1 (%s q. right_gpv (?callee s q)) ?gpv ?s =
      map_spmf (map_sum id (map_prod Inr (map_prod right_rpv id)))
       (inline1 ?callee ?gpv ?s)",
     template_equation
      (template_app
        (template_app
          (template_app (template_hole 12, t_empty), template_var 1),
         template_var 0),
       template_app
        (template_app
          (template_hole 10,
           template_app
            (template_hole 9,
             template_app
              (template_app (template_hole 8, template_hole 7),
               template_app
                (template_app (template_hole 6, template_hole 5),
                 template_app
                  (template_app (template_hole 4, t_empty),
                   template_hole 1))))),
         template_app
          (template_app
            (template_app (template_hole 0, template_var 2),
             template_var 1),
           template_var 0)))),
    ("Computational_Model.lift_state_oracle_extend_state_oracle",
     "(!!B. Transfer.Rel
             (rel_fun
               (rel_fun (=) (rel_fun (=) (rel_spmf (rel_prod B (=)))))
               (rel_fun (=) (rel_fun (=) (rel_spmf (rel_prod B (=))))))
             ?G ?F) ==>
      lift_state_oracle ?F \<dagger>?oracle = \<dagger>(?G ?oracle)",
     template_implication
      ([template_predicate (template_app (template_hole 20, t_empty))],
       template_equation
        (template_app
          (template_app (template_hole 2, template_var 1),
           template_app (template_hole 1, template_var 0)),
         template_app
          (template_hole 0,
           template_app (template_var 2, template_var 0))))),
    ("Computational_Model.lossless_plus_oracleI",
     "[| !!a. ?x = Inl a ==> lossless_spmf (?left ?s a);
         !!b. ?x = Inr b ==> lossless_spmf (?right ?s b) |]
      ==> lossless_spmf ((?left \<oplus>\<^sub>O ?right) ?s ?x)",
     template_implication
      ([template_predicate (template_app (template_hole 9, t_empty)),
        template_predicate (template_app (template_hole 4, t_empty))],
       template_predicate
        (
           template_app
            (template_hole 1,
             template_app
              (template_app
                (template_app
                  (template_app (template_hole 0, template_var 2),
                   template_var 0),
                 template_var 1),
               template_var 3))
           ))),
    ("Computational_Model.lossless_plus_oracle_stopI",
     "[| !!a. ?x = Inl a ==> lossless_spmf (?left ?s a);
         !!b. ?x = Inr b ==> lossless_spmf (?right ?s b) |]
      ==> lossless_spmf ((?left \<oplus>\<^sub>O\<^sup>S ?right) ?s ?x)",
     template_implication
      ([template_predicate (template_app (template_hole 9, t_empty)),
        template_predicate (template_app (template_hole 4, t_empty))],
       template_predicate
        (
           template_app
            (template_hole 1,
             template_app
              (template_app
                (template_app
                  (template_app (template_hole 0, template_var 2),
                   template_var 0),
                 template_var 1),
               template_var 3))
           ))),
    ("Computational_Model.plus_intercept_parametric",
     "rel_fun (rel_fun ?S (rel_fun ?X1.0 (rel_gpv (rel_prod ?Y1.0 ?S) ?C)))
       (rel_fun
         (rel_fun ?S (rel_fun ?X2.0 (rel_gpv (rel_prod ?Y2.0 ?S) ?C)))
         (rel_fun ?S
           (rel_fun (rel_sum ?X1.0 ?X2.0)
             (rel_gpv (rel_prod (rel_sum ?Y1.0 ?Y2.0) ?S) ?C))))
       plus_intercept plus_intercept",
     template_predicate
      (
         template_app
          (template_app
            (template_app
              (template_app
                (template_hole 17,
                 template_app
                  (template_app (template_hole 16, template_var 5),
                   template_app
                    (template_app (template_hole 15, template_var 4),
                     template_app
                      (template_app
                        (template_hole 14,
                         template_app
                          (template_app (template_hole 13, template_var 3),
                           template_var 5)),
                       template_var 2)))),
               template_app
                (template_app
                  (template_hole 12,
                   template_app
                    (template_app (template_hole 11, template_var 5),
                     template_app
                      (template_app (template_hole 10, template_var 1),
                       template_app
                        (template_app
                          (template_hole 9,
                           template_app
                            (template_app (template_hole 8, template_var 0),
                             template_var 5)),
                         template_var 2)))),
                 template_app
                  (template_app (template_hole 7, template_var 5),
                   template_app
                    (template_app
                      (template_hole 6,
                       template_app
                        (template_app (template_hole 5, template_var 4),
                         template_var 1)),
                     template_app
                      (template_app
                        (template_hole 4,
                         template_app
                          (template_app
                            (template_hole 3,
                             template_app
                              (template_app
                                (template_hole 2, template_var 3),
                               template_var 0)),
                           template_var 5)),
                       template_var 2))))),
             template_hole 1),
           template_hole 0)
         )),
    ("Computational_Model.plus_oracle_parametric",
     "rel_fun (rel_fun ?S (rel_fun ?A (rel_spmf (rel_prod ?B ?S))))
       (rel_fun (rel_fun ?S (rel_fun ?C (rel_spmf (rel_prod ?D ?S))))
         (rel_fun ?S
           (rel_fun (rel_sum ?A ?C)
             (rel_spmf (rel_prod (rel_sum ?B ?D) ?S)))))
       (\<oplus>\<^sub>O) (\<oplus>\<^sub>O)",
     template_predicate
      (
         template_app
          (template_app
            (template_app
              (template_app
                (template_hole 20,
                 template_app
                  (template_app (template_hole 19, template_var 4),
                   template_app
                    (template_app (template_hole 18, template_var 3),
                     template_app
                      (template_hole 17,
                       template_app
                        (template_hole 16,
                         template_app
                          (template_app (template_hole 15, template_var 2),
                           template_var 4)))))),
               template_app
                (template_app
                  (template_hole 14,
                   template_app
                    (template_app (template_hole 13, template_var 4),
                     template_app
                      (template_app (template_hole 12, template_var 1),
                       template_app
                        (template_hole 11,
                         template_app
                          (template_hole 10,
                           template_app
                            (template_app (template_hole 9, template_var 0),
                             template_var 4)))))),
                 template_app
                  (template_app (template_hole 8, template_var 4),
                   template_app
                    (template_app
                      (template_hole 7,
                       template_app
                        (template_app (template_hole 6, template_var 3),
                         template_var 1)),
                     template_app
                      (template_hole 5,
                       template_app
                        (template_hole 4,
                         template_app
                          (template_app
                            (template_hole 3,
                             template_app
                              (template_app
                                (template_hole 2, template_var 2),
                               template_var 0)),
                           template_var 4))))))),
             template_hole 1),
           template_hole 0)
         )),
    ("Computational_Model.parallel_oracle_parametric",
     "rel_fun
       (rel_fun ?S1.0 (rel_fun ?CALL1.0 (rel_spmf (rel_prod (=) ?S1.0))))
       (rel_fun
         (rel_fun ?S2.0 (rel_fun ?CALL2.0 (rel_spmf (rel_prod (=) ?S2.0))))
         (rel_fun (rel_prod ?S1.0 ?S2.0)
           (rel_fun (rel_sum ?CALL1.0 ?CALL2.0)
             (rel_spmf (rel_prod (=) (rel_prod ?S1.0 ?S2.0))))))
       parallel_oracle parallel_oracle",
     template_predicate
      (
         template_app
          (template_app
            (template_app
              (template_app
                (template_hole 23,
                 template_app
                  (template_app (template_hole 22, template_var 3),
                   template_app
                    (template_app (template_hole 21, template_var 2),
                     template_app
                      (template_hole 20,
                       template_app
                        (template_hole 19,
                         template_app
                          (template_app
                            (template_hole 18, template_hole 17),
                           template_var 3)))))),
               template_app
                (template_app
                  (template_hole 16,
                   template_app
                    (template_app (template_hole 15, template_var 1),
                     template_app
                      (template_app (template_hole 14, template_var 0),
                       template_app
                        (template_hole 13,
                         template_app
                          (template_hole 12,
                           template_app
                            (template_app
                              (template_hole 11, template_hole 10),
                             template_var 1)))))),
                 template_app
                  (template_app
                    (template_hole 9,
                     template_app
                      (template_app (template_hole 8, template_var 3),
                       template_var 1)),
                   template_app
                    (template_app
                      (template_hole 7,
                       template_app
                        (template_app (template_hole 6, template_var 2),
                         template_var 0)),
                     template_app
                      (template_hole 5,
                       template_app
                        (template_hole 4,
                         template_app
                          (template_app (template_hole 3, template_hole 2),
                           template_app
                            (template_app (template_hole 8, template_var 3),
                             template_var 1)))))))),
             template_hole 1),
           template_hole 0)
         )),
    ("Computational_Model.plus_intercept_stop_parametric",
     "rel_fun
       (rel_fun ?S
         (rel_fun ?X1.0 (rel_gpv (rel_prod (rel_option ?Y1.0) ?S) ?C)))
       (rel_fun
         (rel_fun ?S
           (rel_fun ?X2.0 (rel_gpv (rel_prod (rel_option ?Y2.0) ?S) ?C)))
         (rel_fun ?S
           (rel_fun (rel_sum ?X1.0 ?X2.0)
             (rel_gpv (rel_prod (rel_option (rel_sum ?Y1.0 ?Y2.0)) ?S)
               ?C))))
       plus_intercept_stop plus_intercept_stop",
     template_predicate
      (
         template_app
          (template_app
            (template_app
              (template_app
                (template_hole 20,
                 template_app
                  (template_app (template_hole 19, template_var 5),
                   template_app
                    (template_app (template_hole 18, template_var 4),
                     template_app
                      (template_app
                        (template_hole 17,
                         template_app
                          (template_app
                            (template_hole 16,
                             template_app
                              (template_hole 15, template_var 3)),
                           template_var 5)),
                       template_var 2)))),
               template_app
                (template_app
                  (template_hole 14,
                   template_app
                    (template_app (template_hole 13, template_var 5),
                     template_app
                      (template_app (template_hole 12, template_var 1),
                       template_app
                        (template_app
                          (template_hole 11,
                           template_app
                            (template_app
                              (template_hole 10,
                               template_app
                                (template_hole 9, template_var 0)),
                             template_var 5)),
                         template_var 2)))),
                 template_app
                  (template_app (template_hole 8, template_var 5),
                   template_app
                    (template_app
                      (template_hole 7,
                       template_app
                        (template_app (template_hole 6, template_var 4),
                         template_var 1)),
                     template_app
                      (template_app
                        (template_hole 5,
                         template_app
                          (template_app
                            (template_hole 4,
                             template_app
                              (template_hole 3,
                               template_app
                                (template_app
                                  (template_hole 2, template_var 3),
                                 template_var 0))),
                           template_var 5)),
                       template_var 2))))),
             template_hole 1),
           template_hole 0)
         )),
    ("Computational_Model.map_sum_plus_oracle",
     "map_fun id
       (map_fun (map_sum ?f ?g) (map_spmf (map_prod (map_sum ?h ?k) id)))
       (?oracle1.0 \<oplus>\<^sub>O ?oracle2.0) =
      map_fun id (map_fun ?f (map_spmf (map_prod ?h id)))
       ?oracle1.0 \<oplus>\<^sub>O
      map_fun id (map_fun ?g (map_spmf (map_prod ?k id))) ?oracle2.0",
     template_equation
      (template_app
        (template_app
          (template_app (template_hole 19, template_hole 18),
           template_app
            (template_app
              (template_hole 17,
               template_app
                (template_app (template_hole 16, template_var 5),
                 template_var 4)),
             template_app
              (template_hole 15,
               template_app
                (template_hole 14,
                 template_app
                  (template_app
                    (template_hole 13,
                     template_app
                      (template_app (template_hole 12, template_var 3),
                       template_var 2)),
                   template_hole 18))))),
         template_app
          (template_app (template_hole 11, template_var 1),
           template_var 0)),
       template_app
        (template_app
          (template_hole 10,
           template_app
            (template_app
              (template_app (template_hole 9, template_hole 18),
               template_app
                (template_app (template_hole 8, template_var 5),
                 template_app
                  (template_hole 7,
                   template_app
                    (template_hole 6,
                     template_app
                      (template_app (template_hole 5, template_var 3),
                       template_hole 18))))),
             template_var 1)),
         template_app
          (template_app
            (template_app (template_hole 4, template_hole 18),
             template_app
              (template_app (template_hole 3, template_var 4),
               template_app
                (template_hole 2,
                 template_app
                  (template_hole 1,
                   template_app
                    (template_app (template_hole 0, template_var 2),
                     template_hole 18))))),
           template_var 0)))),
    ("Computational_Model.map_sum_parallel_oracle",
     "map_fun id
       (map_fun (map_sum ?f ?g) (map_spmf (map_prod (map_sum ?h ?k) id)))
       (parallel_oracle ?oracle1.0 ?oracle2.0) =
      parallel_oracle
       (map_fun id (map_fun ?f (map_spmf (map_prod ?h id))) ?oracle1.0)
       (map_fun id (map_fun ?g (map_spmf (map_prod ?k id))) ?oracle2.0)",
     template_equation
      (template_app
        (template_app
          (template_app (template_hole 21, template_hole 20),
           template_app
            (template_app
              (template_hole 19,
               template_app
                (template_app (template_hole 18, template_var 5),
                 template_var 4)),
             template_app
              (template_hole 17,
               template_app
                (template_hole 16,
                 template_app
                  (template_app
                    (template_hole 15,
                     template_app
                      (template_app (template_hole 14, template_var 3),
                       template_var 2)),
                   template_hole 20))))),
         template_app
          (template_app (template_hole 13, template_var 1),
           template_var 0)),
       template_app
        (template_app
          (template_hole 12,
           template_app
            (template_app
              (template_app (template_hole 11, template_hole 10),
               template_app
                (template_app (template_hole 9, template_var 5),
                 template_app
                  (template_hole 8,
                   template_app
                    (template_hole 7,
                     template_app
                      (template_app (template_hole 6, template_var 3),
                       template_hole 10))))),
             template_var 1)),
         template_app
          (template_app
            (template_app (template_hole 5, template_hole 4),
             template_app
              (template_app (template_hole 3, template_var 4),
               template_app
                (template_hole 2,
                 template_app
                  (template_hole 1,
                   template_app
                    (template_app (template_hole 0, template_var 2),
                     template_hole 4))))),
           template_var 0)))),
    ("Computational_Model.plus_oracle_split",
     "?P ((?left \<oplus>\<^sub>O ?right) ?s ?lr) =
      ((ALL x. ?lr = Inl x --> ?P (map_spmf (apfst Inl) (?left ?s x))) &
       (ALL y. ?lr = Inr y --> ?P (map_spmf (apfst Inr) (?right ?s y))))",
     template_equation
      (template_app
        (template_var 4,
         template_app
          (template_app
            (template_app
              (template_app (template_hole 15, template_var 3),
               template_var 2),
             template_var 1),
           template_var 0)),
       template_app
        (template_app
          (template_hole 14, template_app (template_hole 13, t_empty)),
         template_app (template_hole 5, t_empty)))),
    ("Computational_Model.plus_oracle_stop_split",
     "?P ((?left \<oplus>\<^sub>O\<^sup>S ?right) ?s ?lr) =
      ((ALL x.
           ?lr = Inl x -->
           ?P (map_spmf (apfst (map_option Inl)) (?left ?s x))) &
       (ALL y.
           ?lr = Inr y -->
           ?P (map_spmf (apfst (map_option Inr)) (?right ?s y))))",
     template_equation
      (template_app
        (template_var 4,
         template_app
          (template_app
            (template_app
              (template_app (template_hole 17, template_var 3),
               template_var 2),
             template_var 1),
           template_var 0)),
       template_app
        (template_app
          (template_hole 16, template_app (template_hole 15, t_empty)),
         template_app (template_hole 6, t_empty)))),
    ("Computational_Model.plus_oracle_split_asm",
     "?P ((?left \<oplus>\<^sub>O ?right) ?s ?lr) =
      (~ ((EX x. ?lr = Inl x & ~ ?P (map_spmf (apfst Inl) (?left ?s x))) |
          (EX y. ?lr = Inr y &
                 ~ ?P (map_spmf (apfst Inr) (?right ?s y)))))",
     template_equation
      (template_app
        (template_var 4,
         template_app
          (template_app
            (template_app
              (template_app (template_hole 16, template_var 3),
               template_var 2),
             template_var 1),
           template_var 0)),
       template_app
        (template_hole 15,
         template_app
          (template_app
            (template_hole 14, template_app (template_hole 13, t_empty)),
           template_app (template_hole 5, t_empty))))),
    ("Computational_Model.plus_oracle_stop_split_asm",
     "?P ((?left \<oplus>\<^sub>O\<^sup>S ?right) ?s ?lr) =
      (~ ((EX x. ?lr = Inl x &
                 ~ ?P (map_spmf (apfst (map_option Inl)) (?left ?s x))) |
          (EX y. ?lr = Inr y &
                 ~ ?P (map_spmf (apfst (map_option Inr)) (?right ?s y)))))",
     template_equation
      (template_app
        (template_var 4,
         template_app
          (template_app
            (template_app
              (template_app (template_hole 18, template_var 3),
               template_var 2),
             template_var 1),
           template_var 0)),
       template_app
        (template_hole 17,
         template_app
          (template_app
            (template_hole 16, template_app (template_hole 15, t_empty)),
           template_app (template_hole 6, t_empty))))),
    ("Computational_Model.interaction_bounded_by_plus_intercept",
     "[| !!x'. ?x = Inl x' ==>
               interaction_bounded_by ?P (?left ?s x') (?n x');
         !!y. ?x = Inr y ==>
              interaction_bounded_by ?P (?right ?s y) (?m y) |]
      ==> interaction_bounded_by ?P (plus_intercept ?left ?right ?s ?x)
           (case ?x of Inl x => ?n x | Inr y => ?m y)",
     template_implication
      ([template_predicate (template_app (template_hole 10, t_empty)),
        template_predicate (template_app (template_hole 5, t_empty))],
       template_predicate
        (
           template_app
            (template_app
              (template_app (template_hole 2, template_var 5),
               template_app
                (template_app
                  (template_app
                    (template_app (template_hole 1, template_var 4),
                     template_var 1),
                   template_var 3),
                 template_var 6)),
             template_app
              (template_app
                (template_app (template_hole 0, t_empty), t_empty),
               template_var 6))
           ))),
    ("Computational_Model.lift_state_oracle_parametric",
     "rel_fun
       (rel_fun
         (rel_fun ?S (rel_fun ?A (rel_spmf (rel_prod (rel_prod ?B ?T) ?S))))
         (rel_fun ?S'
           (rel_fun ?A (rel_spmf (rel_prod (rel_prod ?B ?T) ?S')))))
       (rel_fun
         (rel_fun (rel_prod ?T ?S)
           (rel_fun ?A (rel_spmf (rel_prod ?B (rel_prod ?T ?S)))))
         (rel_fun (rel_prod ?T ?S')
           (rel_fun ?A (rel_spmf (rel_prod ?B (rel_prod ?T ?S'))))))
       lift_state_oracle lift_state_oracle",
     template_predicate
      (
         template_app
          (template_app
            (template_app
              (template_app
                (template_hole 27,
                 template_app
                  (template_app
                    (template_hole 26,
                     template_app
                      (template_app (template_hole 25, template_var 4),
                       template_app
                        (template_app (template_hole 24, template_var 3),
                         template_app
                          (template_hole 23,
                           template_app
                            (template_hole 22,
                             template_app
                              (template_app
                                (template_hole 21,
                                 template_app
                                  (template_app
                                    (template_hole 20, template_var 2),
                                   template_var 1)),
                               template_var 4)))))),
                   template_app
                    (template_app (template_hole 19, template_var 0),
                     template_app
                      (template_app (template_hole 18, template_var 3),
                       template_app
                        (template_hole 17,
                         template_app
                          (template_hole 16,
                           template_app
                            (template_app
                              (template_hole 15,
                               template_app
                                (template_app
                                  (template_hole 20, template_var 2),
                                 template_var 1)),
                             template_var 0))))))),
               template_app
                (template_app
                  (template_hole 14,
                   template_app
                    (template_app
                      (template_hole 13,
                       template_app
                        (template_app (template_hole 12, template_var 1),
                         template_var 4)),
                     template_app
                      (template_app (template_hole 11, template_var 3),
                       template_app
                        (template_hole 10,
                         template_app
                          (template_hole 9,
                           template_app
                            (template_app (template_hole 8, template_var 2),
                             template_app
                              (template_app
                                (template_hole 12, template_var 1),
                               template_var 4))))))),
                 template_app
                  (template_app
                    (template_hole 7,
                     template_app
                      (template_app (template_hole 6, template_var 1),
                       template_var 0)),
                   template_app
                    (template_app (template_hole 5, template_var 3),
                     template_app
                      (template_hole 4,
                       template_app
                        (template_hole 3,
                         template_app
                          (template_app (template_hole 2, template_var 2),
                           template_app
                            (template_app (template_hole 6, template_var 1),
                             template_var 0)))))))),
             template_hole 1),
           template_hole 0)
         )),
    ("Computational_Model.parallel_oracle_split",
     "?P (parallel_oracle ?left ?right ?s1s2.0 ?lr) =
      ((ALL s1 s2 x.
           ?s1s2.0 = (s1, s2) -->
           ?lr = Inl x -->
           ?P (map_spmf (map_prod Inl (%s1'. (s1', s2))) (?left s1 x))) &
       (ALL s1 s2 y.
           ?s1s2.0 = (s1, s2) -->
           ?lr = Inr y -->
           ?P (map_spmf (map_prod Inr (Pair s1)) (?right s2 y))))",
     template_equation
      (template_app
        (template_var 4,
         template_app
          (template_app
            (template_app
              (template_app (template_hole 19, template_var 3),
               template_var 2),
             template_var 1),
           template_var 0)),
       template_app
        (template_app
          (template_hole 18, template_app (template_hole 17, t_empty)),
         template_app (template_hole 17, t_empty)))),
    ("Computational_Model.parallel_oracle_split_asm",
     "?P (parallel_oracle ?left ?right ?s1s2.0 ?lr) =
      (~ ((EX s1 s2 x.
              ?s1s2.0 = (s1, s2) &
              ?lr = Inl x &
              ~ ?P (map_spmf (map_prod Inl (%s1'. (s1', s2)))
                     (?left s1 x))) |
          (EX s1 s2 y.
              ?s1s2.0 = (s1, s2) &
              ?lr = Inr y &
              ~ ?P (map_spmf (map_prod Inr (Pair s1)) (?right s2 y)))))",
     template_equation
      (template_app
        (template_var 4,
         template_app
          (template_app
            (template_app
              (template_app (template_hole 20, template_var 3),
               template_var 2),
             template_var 1),
           template_var 0)),
       template_app
        (template_hole 19,
         template_app
          (template_app
            (template_hole 18, template_app (template_hole 17, t_empty)),
           template_app (template_hole 17, t_empty))))),
    ("Computational_Model.rel_spmf_plus_oracle",
     "[| !!q1' q2'.
            [| ?q1.0 = Inl q1'; ?q2.0 = Inl q2' |]
            ==> rel_spmf (rel_prod ?B ?S) (?left1.0 ?s1.0 q1')
                 (?left2.0 ?s2.0 q2');
         !!q1' q2'.
            [| ?q1.0 = Inr q1'; ?q2.0 = Inr q2' |]
            ==> rel_spmf (rel_prod ?D ?S) (?right1.0 ?s1.0 q1')
                 (?right2.0 ?s2.0 q2');
         ?S ?s1.0 ?s2.0; rel_sum ?A ?C ?q1.0 ?q2.0 |]
      ==> rel_spmf (rel_prod (rel_sum ?B ?D) ?S)
           ((?left1.0 \<oplus>\<^sub>O ?right1.0) ?s1.0 ?q1.0)
           ((?left2.0 \<oplus>\<^sub>O ?right2.0) ?s2.0 ?q2.0)",
     template_implication
      ([template_predicate (template_app (template_hole 23, t_empty)),
        template_predicate (template_app (template_hole 13, t_empty)),
        template_predicate
         (
            template_app
             (template_app (template_var 9, template_var 7), template_var 5)
            ),
        template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_app (template_hole 6, template_var 1),
                  template_var 0),
                template_var 12),
              template_var 11)
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_app
                (template_hole 5,
                 template_app
                  (template_hole 4,
                   template_app
                    (template_app
                      (template_hole 3,
                       template_app
                        (template_app (template_hole 2, template_var 10),
                         template_var 4)),
                     template_var 9))),
               template_app
                (template_app
                  (template_app
                    (template_app (template_hole 1, template_var 8),
                     template_var 3),
                   template_var 7),
                 template_var 12)),
             template_app
              (template_app
                (template_app
                  (template_app (template_hole 0, template_var 6),
                   template_var 2),
                 template_var 5),
               template_var 11))
           )))]:
   (string * thm * template) list
### theory "Draft.Computational_ModelTemplates"
### 2.166s elapsed time, 3.393s cpu time, 1.450s GC time
val it = (): unit
