Loading theory "Draft.Partial_Function_Set" (required by "Draft.Partial_Function_SetTemplates")
Loading theory "HOL-Library.BigO" (required by "Draft.Partial_Function_SetTemplates" via "Draft.ExtrEqs")
Loading theory "Draft.Templates" (required by "Draft.Partial_Function_SetTemplates" via "Draft.ExtrEqs")
datatype template_term
=
     t_empty
   | template_app of template_term * template_term
   | template_hole of int
   | template_var of int
datatype sign
= equals | greater_equals | greater_than | less_equals | less_than
datatype template
=
     template_bimplication of template * template
   | template_dunno
   | template_equation of template_term * template_term
   | template_implication of template list * template
   | template_inequation of sign * template_term * template_term
   | template_negation of template
   | template_predicate of template_term
constructor t_empty: template_term
constructor template_app: template_term * template_term -> template_term
constructor template_hole: int -> template_term
constructor template_var: int -> template_term
constructor equals: sign
constructor greater_equals: sign
constructor greater_than: sign
constructor less_equals: sign
constructor less_than: sign
constructor template_bimplication: template * template -> template
constructor template_dunno: template
constructor template_equation: template_term * template_term -> template
constructor template_implication: template list * template -> template
constructor template_inequation:
   sign * template_term * template_term -> template
constructor template_negation: template -> template
constructor template_predicate: template_term -> template
val vfs = fn: term -> (indexname * typ) list * (string * typ) list
val indexOf = fn: ''a list -> ''a -> int -> int
val has_eq = fn: term -> bool
val term2template = fn:
   (indexname * typ) list -> (string * typ) list -> term -> template_term
val lemma2predicate = fn: term -> term -> template
val makeTemplatewithContext = fn: term -> term -> template
val lemma2template = fn: term -> template
val thm2template = fn: thm -> template
val tterm2string = fn: template_term -> string
val template2string = fn: template -> string
val t = "height ?t <= size ?t": thm
val th =
   Const ("HOL.Trueprop", "bool => prop") $
     (Const ("Orderings.ord_class.less_eq", "nat => nat => bool") $
       (Const ("Tree.height_class.height", "?'a tree => nat") $
         Var (("t", 0), "?'a tree")) $
       (Const ("Nat.size_class.size", "?'a tree => nat") $
         Var (("t", 0), "?'a tree"))):
   term
### theory "Draft.Templates"
### 0.068s elapsed time, 0.242s cpu time, 0.000s GC time
### theory "Draft.Partial_Function_Set"
### 0.245s elapsed time, 0.588s cpu time, 0.030s GC time
### theory "HOL-Library.BigO"
### 0.682s elapsed time, 1.066s cpu time, 0.093s GC time
Loading theory "Draft.ExtrEqs" (required by "Draft.Partial_Function_SetTemplates")
val eqpattern =
   Pattern
    (
       Const ("HOL.Trueprop", "bool => prop") $
         (Const ("HOL.eq", "?'a => ?'a => bool") $
           Var (("_dummy_", 1), "?'a") $ Var (("_dummy_", 2), "?'a"))
       ):
   term Find_Theorems.criterion
val badeqpattern = Pattern (Const ("Pure.eq", "?'a => ?'a => prop")):
   term Find_Theorems.criterion
val undefpattern =
   Pattern
    (
       Const ("HOL.Trueprop", "bool => prop") $
         (Const ("HOL.eq", "?'a => ?'a => bool") $
           Var (("_dummy_", 1), "?'a") $ Const ("HOL.undefined", "?'a"))
       ):
   term Find_Theorems.criterion
val thmpattern =
   Pattern
    (Const ("HOL.Trueprop", "bool => prop") $ Var (("_dummy_", 1), "bool")):
   term Find_Theorems.criterion
val badnames =
   ["*nitpick*", "*Nitpick*", "*full_exhaustive*", "*_def*", "Enum.finite*",
    "*Quickcheck*", "ATP*", "*Nunchaku*", "*Code*", "*BNF*", "*SMT*",
    "*.*.*"]:
   string list
val unwanted_names =
   [(false, Name "*nitpick*"), (false, Name "*Nitpick*"),
    (false, Name "*full_exhaustive*"), (false, Name "*_def*"),
    (false, Name "Enum.finite*"), (false, Name "*Quickcheck*"),
    (false, Name "ATP*"), (false, Name "*Nunchaku*"),
    (false, Name "*Code*"), (false, Name "*BNF*"), (false, Name "*SMT*"),
    (false, Name "*.*.*")]:
   (bool * term Find_Theorems.criterion) list
val has_vars = fn: term -> bool
val get_all_eqs = fn: string -> Proof.context -> (string * thm) list
val get_all_thms = fn: string -> Proof.context -> (string * thm) list
val get_noneq_thms = fn: string -> Proof.context -> (string * thm) list
val template_eqs = fn:
   string -> Proof.context -> (string * thm * template) list
val template_thms = fn:
   string -> Proof.context -> (string * thm * template) list
### theory "Draft.ExtrEqs"
### 0.464s elapsed time, 0.464s cpu time, 0.000s GC time
Loading theory "Draft.Partial_Function_SetTemplates"
val templateLemmas =
   [("Partial_Function_Set.Diff_mono1",
     "monotone set.le_fun (<=) ?A ==>
      monotone set.le_fun (<=) (%f. ?A f - ?X)",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_hole 4,
                  template_app (template_hole 3, template_hole 2)),
                template_hole 1),
              template_var 1)
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_app
                (template_hole 4,
                 template_app (template_hole 3, template_hole 2)),
               template_hole 1),
             t_empty)
           ))),
    ("Partial_Function_Set.image_mono",
     "monotone set.le_fun (<=) ?A ==>
      monotone set.le_fun (<=) (%f. ?g ` ?A f)",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_hole 4,
                  template_app (template_hole 3, template_hole 2)),
                template_hole 1),
              template_var 1)
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_app
                (template_hole 4,
                 template_app (template_hole 3, template_hole 2)),
               template_hole 1),
             t_empty)
           ))),
    ("Partial_Function_Set.insert_mono",
     "monotone set.le_fun (<=) ?A ==>
      monotone set.le_fun (<=) (%f. insert ?x (?A f))",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_hole 4,
                  template_app (template_hole 3, template_hole 2)),
                template_hole 1),
              template_var 1)
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_app
                (template_hole 4,
                 template_app (template_hole 3, template_hole 2)),
               template_hole 1),
             t_empty)
           ))),
    ("Partial_Function_Set.vimage_mono",
     "monotone set.le_fun (<=) ?A ==>
      monotone set.le_fun (<=) (%f. ?g -` ?A f)",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_hole 4,
                  template_app (template_hole 3, template_hole 2)),
                template_hole 1),
              template_var 1)
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_app
                (template_hole 4,
                 template_app (template_hole 3, template_hole 2)),
               template_hole 1),
             t_empty)
           ))),
    ("Partial_Function_Set.set_admissible",
     "set.admissible (%f. ALL x y. y : f x --> ?P x y)",
     template_predicate
      (
         template_app
          (template_app
            (template_app
              (template_hole 8, template_app (template_hole 7, t_empty)),
             template_app (template_hole 5, template_hole 4)),
           t_empty)
         )),
    ("Partial_Function_Set.coset_admissible",
     "coset.admissible (%f. ALL x y. ?P x y --> y : f x)",
     template_predicate
      (
         template_app
          (template_app
            (template_app
              (template_hole 8, template_app (template_hole 7, t_empty)),
             template_app (template_hole 5, t_empty)),
           t_empty)
         )),
    ("Partial_Function_Set.Int_mono",
     "[| monotone set.le_fun (<=) ?A; monotone set.le_fun (<=) ?B |]
      ==> monotone set.le_fun (<=) (%f. ?A f Int ?B f)",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_hole 4,
                  template_app (template_hole 3, template_hole 2)),
                template_hole 1),
              template_var 1)
            ),
        template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_hole 4,
                  template_app (template_hole 3, template_hole 2)),
                template_hole 1),
              template_var 0)
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_app
                (template_hole 4,
                 template_app (template_hole 3, template_hole 2)),
               template_hole 1),
             t_empty)
           ))),
    ("Partial_Function_Set.Un_mono",
     "[| monotone set.le_fun (<=) ?A; monotone set.le_fun (<=) ?B |]
      ==> monotone set.le_fun (<=) (%f. ?A f Un ?B f)",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_hole 4,
                  template_app (template_hole 3, template_hole 2)),
                template_hole 1),
              template_var 1)
            ),
        template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_hole 4,
                  template_app (template_hole 3, template_hole 2)),
                template_hole 1),
              template_var 0)
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_app
                (template_hole 4,
                 template_app (template_hole 3, template_hole 2)),
               template_hole 1),
             t_empty)
           ))),
    ("Partial_Function_Set.gfp_eq_fixp",
     "monotone (%x y. y <= x) (%x y. y <= x) ?f ==>
      gfp ?f = ccpo.fixp Inf (%x y. y <= x) ?f",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app (template_hole 5, t_empty), t_empty),
              template_var 0)
            )],
       template_equation
        (template_app (template_hole 2, template_var 0),
         template_app
          (template_app
            (template_app (template_hole 1, template_hole 0), t_empty),
           template_var 0)))),
    ("Partial_Function_Set.set_bind_mono",
     "[| monotone set.le_fun (<=) ?B;
         !!y. monotone set.le_fun (<=) (?C y) |]
      ==> monotone set.le_fun (<=) (%f. Set.bind (?B f) (%y. ?C y f))",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_hole 7,
                  template_app (template_hole 6, template_hole 5)),
                template_hole 4),
              template_var 1)
            ),
        template_predicate (template_app (template_hole 3, t_empty))],
       template_predicate
        (
           template_app
            (template_app
              (template_app
                (template_hole 2,
                 template_app (template_hole 6, template_hole 5)),
               template_hole 1),
             t_empty)
           ))),
    ("Partial_Function_Set.insert_mono'",
     "monotone coset.le_fun (%x y. y <= x) ?A ==>
      monotone coset.le_fun (%x y. y <= x) (%f. insert ?x (?A f))",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_hole 4, template_app (template_hole 3, t_empty)),
                t_empty),
              template_var 1)
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_app
                (template_hole 4, template_app (template_hole 3, t_empty)),
               t_empty),
             t_empty)
           ))),
    ("Partial_Function_Set.UNION_mono",
     "[| monotone set.le_fun (<=) ?B;
         !!y. monotone set.le_fun (<=) (?C y) |]
      ==> monotone set.le_fun (<=) (%f. UN y:?B f. ?C y f)",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_hole 8,
                  template_app (template_hole 7, template_hole 6)),
                template_hole 5),
              template_var 1)
            ),
        template_predicate (template_app (template_hole 4, t_empty))],
       template_predicate
        (
           template_app
            (template_app
              (template_app
                (template_hole 3,
                 template_app (template_hole 7, template_hole 6)),
               template_hole 2),
             t_empty)
           ))),
    ("Partial_Function_Set.test2_coinduct",
     "[| ?P ?x ?y;
         !!x y.
            ?P x y ==>
            y = x |
            ?P (Suc x) y | y : ??.Partial_Function_Set.test2 (Suc x) |]
      ==> ?y : ??.Partial_Function_Set.test2 ?x",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_var 2, template_var 1), template_var 0)
            ),
        template_predicate (template_app (template_hole 5, t_empty))],
       template_predicate
        (
           template_app
            (template_app (template_hole 1, template_var 0),
             template_app (template_hole 0, template_var 1))
           ))),
    ("Partial_Function_Set.Int_mono'",
     "[| monotone coset.le_fun (%x y. y <= x) ?A;
         monotone coset.le_fun (%x y. y <= x) ?B |]
      ==> monotone coset.le_fun (%x y. y <= x) (%f. ?A f Int ?B f)",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_hole 4, template_app (template_hole 3, t_empty)),
                t_empty),
              template_var 1)
            ),
        template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_hole 4, template_app (template_hole 3, t_empty)),
                t_empty),
              template_var 0)
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_app
                (template_hole 4, template_app (template_hole 3, t_empty)),
               t_empty),
             t_empty)
           ))),
    ("Partial_Function_Set.Un_mono'",
     "[| monotone coset.le_fun (%x y. y <= x) ?A;
         monotone coset.le_fun (%x y. y <= x) ?B |]
      ==> monotone coset.le_fun (%x y. y <= x) (%f. ?A f Un ?B f)",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_hole 4, template_app (template_hole 3, t_empty)),
                t_empty),
              template_var 1)
            ),
        template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_hole 4, template_app (template_hole 3, t_empty)),
                t_empty),
              template_var 0)
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_app
                (template_hole 4, template_app (template_hole 3, t_empty)),
               t_empty),
             t_empty)
           ))),
    ("Partial_Function_Set.set_bind_mono'",
     "[| monotone coset.le_fun (%x y. y <= x) ?B;
         !!y. monotone coset.le_fun (%x y. y <= x) (?C y) |]
      ==> monotone coset.le_fun (%x y. y <= x)
           (%f. Set.bind (?B f) (%y. ?C y f))",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_hole 7, template_app (template_hole 6, t_empty)),
                t_empty),
              template_var 1)
            ),
        template_predicate (template_app (template_hole 3, t_empty))],
       template_predicate
        (
           template_app
            (template_app
              (template_app
                (template_hole 2, template_app (template_hole 6, t_empty)),
               t_empty),
             t_empty)
           ))),
    ("Partial_Function_Set.UNION_mono'",
     "[| monotone coset.le_fun (%x y. y <= x) ?B;
         !!y. monotone coset.le_fun (%x y. y <= x) (?C y) |]
      ==> monotone coset.le_fun (%x y. y <= x) (%f. UN y:?B f. ?C y f)",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_hole 8, template_app (template_hole 7, t_empty)),
                t_empty),
              template_var 1)
            ),
        template_predicate (template_app (template_hole 4, t_empty))],
       template_predicate
        (
           template_app
            (template_app
              (template_app
                (template_hole 3, template_app (template_hole 7, t_empty)),
               t_empty),
             t_empty)
           )))]:
   (string * thm * template) list
### theory "Draft.Partial_Function_SetTemplates"
### 0.302s elapsed time, 0.439s cpu time, 0.068s GC time
val it = (): unit
