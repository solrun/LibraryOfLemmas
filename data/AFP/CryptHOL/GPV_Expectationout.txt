Loading theory "Draft.Partial_Function_Set" (required by "Draft.GPV_ExpectationTemplates" via "Draft.GPV_Expectation" via "Draft.Computational_Model" via "Draft.Generative_Probabilistic_Value" via "Draft.Resumption")
Loading theory "Draft.Templates" (required by "Draft.GPV_ExpectationTemplates" via "Draft.ExtrEqs")
Loading theory "HOL-Library.BigO" (required by "Draft.GPV_ExpectationTemplates" via "Draft.ExtrEqs")
Loading theory "Draft.Misc_CryptHOL" (required by "Draft.GPV_ExpectationTemplates" via "Draft.GPV_Expectation" via "Draft.Computational_Model" via "Draft.Generative_Probabilistic_Value" via "Draft.Resumption")
datatype template_term
=
     t_empty
   | template_app of template_term * template_term
   | template_hole of int
   | template_var of int
datatype sign
= equals | greater_equals | greater_than | less_equals | less_than
datatype template
=
     template_bimplication of template * template
   | template_dunno
   | template_equation of template_term * template_term
   | template_implication of template list * template
   | template_inequation of sign * template_term * template_term
   | template_negation of template
   | template_predicate of template_term
constructor t_empty: template_term
constructor template_app: template_term * template_term -> template_term
constructor template_hole: int -> template_term
constructor template_var: int -> template_term
constructor equals: sign
constructor greater_equals: sign
constructor greater_than: sign
constructor less_equals: sign
constructor less_than: sign
constructor template_bimplication: template * template -> template
constructor template_dunno: template
constructor template_equation: template_term * template_term -> template
constructor template_implication: template list * template -> template
constructor template_inequation:
   sign * template_term * template_term -> template
constructor template_negation: template -> template
constructor template_predicate: template_term -> template
val vfs = fn: term -> (indexname * typ) list * (string * typ) list
val indexOf = fn: ''a list -> ''a -> int -> int
val has_eq = fn: term -> bool
val term2template = fn:
   (indexname * typ) list -> (string * typ) list -> term -> template_term
val lemma2predicate = fn: term -> term -> template
val makeTemplatewithContext = fn: term -> term -> template
val lemma2template = fn: term -> template
val thm2template = fn: thm -> template
val tterm2string = fn: template_term -> string
val template2string = fn: template -> string
val t = "height ?t <= size ?t": thm
val th =
   Const ("HOL.Trueprop", "bool => prop") $
     (Const ("Orderings.ord_class.less_eq", "nat => nat => bool") $
       (Const ("Tree.height_class.height", "?'a tree => nat") $
         Var (("t", 0), "?'a tree")) $
       (Const ("Nat.size_class.size", "?'a tree => nat") $
         Var (("t", 0), "?'a tree"))):
   term
### theory "Draft.Templates"
### 0.074s elapsed time, 0.332s cpu time, 0.000s GC time
### theory "Draft.Partial_Function_Set"
### 0.224s elapsed time, 0.769s cpu time, 0.035s GC time
### theory "HOL-Library.BigO"
### 0.609s elapsed time, 1.542s cpu time, 0.069s GC time
Loading theory "Draft.ExtrEqs" (required by "Draft.GPV_ExpectationTemplates")
val eqpattern =
   Pattern
    (
       Const ("HOL.Trueprop", "bool => prop") $
         (Const ("HOL.eq", "?'a => ?'a => bool") $
           Var (("_dummy_", 1), "?'a") $ Var (("_dummy_", 2), "?'a"))
       ):
   term Find_Theorems.criterion
val badeqpattern = Pattern (Const ("Pure.eq", "?'a => ?'a => prop")):
   term Find_Theorems.criterion
val undefpattern =
   Pattern
    (
       Const ("HOL.Trueprop", "bool => prop") $
         (Const ("HOL.eq", "?'a => ?'a => bool") $
           Var (("_dummy_", 1), "?'a") $ Const ("HOL.undefined", "?'a"))
       ):
   term Find_Theorems.criterion
val thmpattern =
   Pattern
    (Const ("HOL.Trueprop", "bool => prop") $ Var (("_dummy_", 1), "bool")):
   term Find_Theorems.criterion
val badnames =
   ["*nitpick*", "*Nitpick*", "*full_exhaustive*", "*_def*", "Enum.finite*",
    "*Quickcheck*", "ATP*", "*Nunchaku*", "*Code*", "*BNF*", "*SMT*",
    "*.*.*"]:
   string list
val unwanted_names =
   [(false, Name "*nitpick*"), (false, Name "*Nitpick*"),
    (false, Name "*full_exhaustive*"), (false, Name "*_def*"),
    (false, Name "Enum.finite*"), (false, Name "*Quickcheck*"),
    (false, Name "ATP*"), (false, Name "*Nunchaku*"),
    (false, Name "*Code*"), (false, Name "*BNF*"), (false, Name "*SMT*"),
    (false, Name "*.*.*")]:
   (bool * term Find_Theorems.criterion) list
val has_vars = fn: term -> bool
val get_all_eqs = fn: string -> Proof.context -> (string * thm) list
val get_all_thms = fn: string -> Proof.context -> (string * thm) list
val get_noneq_thms = fn: string -> Proof.context -> (string * thm) list
val template_eqs = fn:
   string -> Proof.context -> (string * thm * template) list
val template_thms = fn:
   string -> Proof.context -> (string * thm * template) list
### theory "Draft.ExtrEqs"
### 0.510s elapsed time, 1.050s cpu time, 0.084s GC time
Proofs for inductive predicate(s) "Imagep"
  Proving monotonicity ...
specification
  relcompp_witness1: (?A OO ?B) (fst ?xy) (snd ?xy) ==> ?A (fst ?xy) (relcompp_witness ?A ?B ?xy)
  relcompp_witness2: (?A OO ?B) (fst ?xy) (snd ?xy) ==> ?B (relcompp_witness ?A ?B ?xy) (snd ?xy)
Found termination order: "{}"
Found termination order: "{}"
Found termination order: "{}"
Found termination order: "{}"
Found termination order: "{}"
consts
  assert_option :: "bool => unit option"
consts
  sup_option :: "'a option => 'a option => 'a option"
consts
  enforce_option :: "('a => bool) => 'a option => 'a option"
### Ignoring duplicate rewrite rule:
### real ?n1 <= 1 == ?n1 <= 1
Proofs for inductive predicate(s) "finite_chains"
  Proving monotonicity ...
locale partial_function_definitions
  fixes leq :: "'a => 'a => bool"
    and lub :: "'a set => 'a"
  assumes "partial_function_definitions leq lub"
Proofs for inductive predicate(s) "nlistsp"
  Proving monotonicity ...
consts
  sprefix :: "'a list => 'a stream => bool"
locale monad_fail_hom
  fixes return1 :: "'a => 'm1"
    and bind1 :: "'m1 => ('a => 'm1) => 'm1"
    and fail1 :: "'m1"
    and return2 :: "'a => 'm2"
    and bind2 :: "'m2 => ('a => 'm2) => 'm2"
    and fail2 :: "'m2"
    and h :: "'m1 => 'm2"
  assumes "monad_fail_hom return1 bind1 fail1 return2 bind2 fail2 h"
specification
  set_rel_witness_pmf': rel_pmf ?A (fst ?xy) (snd ?xy) ==>
set_pmf (rel_witness_pmf ?A ?xy) <= {(a, b). ?A a b}
  map1_rel_witness_pmf': rel_pmf ?A (fst ?xy) (snd ?xy) ==>
map_pmf fst (rel_witness_pmf ?A ?xy) = fst ?xy
  map2_rel_witness_pmf': rel_pmf ?A (fst ?xy) (snd ?xy) ==>
map_pmf snd (rel_witness_pmf ?A ?xy) = snd ?xy
locale option_to_spmf
locale option_le_spmf
### theory "Draft.Misc_CryptHOL"
### 4.562s elapsed time, 6.364s cpu time, 0.808s GC time
Loading theory "Draft.Generat" (required by "Draft.GPV_ExpectationTemplates" via "Draft.GPV_Expectation" via "Draft.Computational_Model" via "Draft.Generative_Probabilistic_Value")
Loading theory "Draft.Resumption" (required by "Draft.GPV_ExpectationTemplates" via "Draft.GPV_Expectation" via "Draft.Computational_Model" via "Draft.Generative_Probabilistic_Value")
Found termination order: "{}"
### Missing patterns in function definition:
### !!vb vc v. rel_witness_generat (IO vb vc, Pure v) = undefined
### !!va vb vc. rel_witness_generat (Pure va, IO vb vc) = undefined
consts
  bind_resumption ::
    "('a, 'out, 'in) Resumption.resumption
     => ('a => ('b, 'out, 'in) Resumption.resumption)
        => ('b, 'out, 'in) Resumption.resumption"
Found termination order: "{}"
### theory "Draft.Generat"
### 1.481s elapsed time, 3.251s cpu time, 0.783s GC time
consts
  ensure :: "bool => (unit, 'out, 'in) Resumption.resumption"
Proofs for coinductive predicate(s) "resumption_ord"
  Proving monotonicity ...
consts
  resumption_lub ::
    "('a, 'out, 'in) Resumption.resumption set
     => ('a, 'out, 'in) Resumption.resumption"
### Cannot skip proof of schematic goal statement
### theory "Draft.Resumption"
### 1.868s elapsed time, 3.659s cpu time, 0.836s GC time
Loading theory "Draft.Generative_Probabilistic_Value" (required by "Draft.GPV_ExpectationTemplates" via "Draft.GPV_Expectation" via "Draft.Computational_Model")
"('a, 'out, 'in) rpv"
consts
  map_gpv' ::
    "('a => 'b)
     => ('out => 'out')
        => ('ret' => 'ret)
           => ('a, 'out, 'ret) gpv => ('b, 'out', 'ret') gpv"
Proofs for coinductive predicate(s) "rel_gpv''"
  Proving monotonicity ...
consts
  Done :: "'a => ('a, 'out, 'in) gpv"
consts
  Pause :: "'out => ('a, 'out, 'in) rpv => ('a, 'out, 'in) gpv"
consts
  lift_spmf :: "'a spmf => ('a, 'out, 'in) gpv"
consts
  bind_gpv ::
    "('a, 'out, 'in) gpv
     => ('a => ('b, 'out, 'in) gpv) => ('b, 'out, 'in) gpv"
locale spmf_to_gpv
locale option_to_gpv
locale option_le_gpv
consts
  lift_resumption ::
    "('a, 'out, 'in) Resumption.resumption => ('a, 'out, 'in) gpv"
### Ambiguous input (line 1428 of "$AFP/CryptHOL/Generative_Probabilistic_Value.thy") produces 2 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("_applC" ("_position" the_gpv)
###       ("\<^const>SPMF.try_spmf" ("_position" gpv) ("_position" gpv')))
###     ("_applC" ("_position" map_spmf)
###       ("_cargs"
###         ("_applC" ("_position" map_generat)
###           ("_cargs" ("_position" id)
###             ("_cargs" ("_position" id)
###               ("_lambda" ("_pttrns" ("_position" c) ("_position" input))
###                 ("_case_syntax"
###                   ("_applC" ("_position" c) ("_position" input))
###                   ("_case2"
###                     ("_case1" ("_applC" ("_position" Inl) ("_position" gpv))
###                       ("_applC" ("_position" try_gpv)
###                         ("_cargs" ("_position" gpv) ("_position" gpv'))))
###                     ("_case1"
###                       ("_applC" ("_position" Inr) ("_position" gpv'))
###                       ("_position" gpv'))))))))
###         ("_applC" ("_position" try_spmf)
###           ("_cargs"
###             ("_applC" ("_position" map_spmf)
###               ("_cargs"
###                 ("_applC" ("_position" map_generat)
###                   ("_cargs" ("_position" id)
###                     ("_cargs" ("_position" id)
###                       ("_applC" ("_position" map_fun)
###                         ("_cargs" ("_position" id) ("_position" Inl))))))
###                 ("_applC" ("_position" the_gpv) ("_position" gpv))))
###             ("_applC" ("_position" map_spmf)
###               ("_cargs"
###                 ("_applC" ("_position" map_generat)
###                   ("_cargs" ("_position" id)
###                     ("_cargs" ("_position" id)
###                       ("_applC" ("_position" map_fun)
###                         ("_cargs" ("_position" id) ("_position" Inr))))))
###                 ("_applC" ("_position" the_gpv) ("_position" gpv'))))))))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("_applC" ("_position" the_gpv)
###       ("\<^fixed>try_gpv" ("_position" gpv) ("_position" gpv')))
###     ("_applC" ("_position" map_spmf)
###       ("_cargs"
###         ("_applC" ("_position" map_generat)
###           ("_cargs" ("_position" id)
###             ("_cargs" ("_position" id)
###               ("_lambda" ("_pttrns" ("_position" c) ("_position" input))
###                 ("_case_syntax"
###                   ("_applC" ("_position" c) ("_position" input))
###                   ("_case2"
###                     ("_case1" ("_applC" ("_position" Inl) ("_position" gpv))
###                       ("_applC" ("_position" try_gpv)
###                         ("_cargs" ("_position" gpv) ("_position" gpv'))))
###                     ("_case1"
###                       ("_applC" ("_position" Inr) ("_position" gpv'))
###                       ("_position" gpv'))))))))
###         ("_applC" ("_position" try_spmf)
###           ("_cargs"
###             ("_applC" ("_position" map_spmf)
###               ("_cargs"
###                 ("_applC" ("_position" map_generat)
###                   ("_cargs" ("_position" id)
###                     ("_cargs" ("_position" id)
###                       ("_applC" ("_position" map_fun)
###                         ("_cargs" ("_position" id) ("_position" Inl))))))
###                 ("_applC" ("_position" the_gpv) ("_position" gpv))))
###             ("_applC" ("_position" map_spmf)
###               ("_cargs"
###                 ("_applC" ("_position" map_generat)
###                   ("_cargs" ("_position" id)
###                     ("_cargs" ("_position" id)
###                       ("_applC" ("_position" map_fun)
###                         ("_cargs" ("_position" id) ("_position" Inr))))))
###                 ("_applC" ("_position" the_gpv) ("_position" gpv'))))))))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
consts
  try_gpv ::
    "('a, 'call, 'ret) gpv
     => ('a, 'call, 'ret) gpv => ('a, 'call, 'ret) gpv"
### Ambiguous input (line 1434 of "$AFP/CryptHOL/Generative_Probabilistic_Value.thy") produces 8 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("_applC" ("_position" the_gpv)
###       ("\<^const>SPMF.try_spmf" ("_position" gpv) ("_position" gpv')))
###     ("\<^const>Generative_Probabilistic_Value.try_gpv"
###       ("_applC" ("_position" map_spmf)
###         ("_cargs"
###           ("_applC" ("_position" map_generat)
###             ("_cargs" ("_position" id)
###               ("_cargs" ("_position" id)
###                 ("_lambda" ("_pttrns" ("_position" c) ("_position" input))
###                   ("\<^const>SPMF.try_spmf"
###                     ("_applC" ("_position" c) ("_position" input))
###                     ("_position" gpv'))))))
###           ("_applC" ("_position" the_gpv) ("_position" gpv))))
###       ("_applC" ("_position" the_gpv) ("_position" gpv')))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("_applC" ("_position" the_gpv)
###       ("\<^const>Generative_Probabilistic_Value.try_gpv" ("_position" gpv)
###         ("_position" gpv')))
###     ("\<^const>Generative_Probabilistic_Value.try_gpv"
###       ("_applC" ("_position" map_spmf)
###         ("_cargs"
###           ("_applC" ("_position" map_generat)
###             ("_cargs" ("_position" id)
###               ("_cargs" ("_position" id)
###                 ("_lambda" ("_pttrns" ("_position" c) ("_position" input))
###                   ("\<^const>SPMF.try_spmf"
###                     ("_applC" ("_position" c) ("_position" input))
###                     ("_position" gpv'))))))
###           ("_applC" ("_position" the_gpv) ("_position" gpv))))
###       ("_applC" ("_position" the_gpv) ("_position" gpv')))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("_applC" ("_position" the_gpv)
###       ("\<^const>SPMF.try_spmf" ("_position" gpv) ("_position" gpv')))
###     ("\<^const>SPMF.try_spmf"
###       ("_applC" ("_position" map_spmf)
###         ("_cargs"
###           ("_applC" ("_position" map_generat)
###             ("_cargs" ("_position" id)
###               ("_cargs" ("_position" id)
###                 ("_lambda" ("_pttrns" ("_position" c) ("_position" input))
###                   ("\<^const>SPMF.try_spmf"
###                     ("_applC" ("_position" c) ("_position" input))
###                     ("_position" gpv'))))))
###           ("_applC" ("_position" the_gpv) ("_position" gpv))))
###       ("_applC" ("_position" the_gpv) ("_position" gpv')))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("_applC" ("_position" the_gpv)
###       ("\<^const>Generative_Probabilistic_Value.try_gpv" ("_position" gpv)
###         ("_position" gpv')))
###     ("\<^const>SPMF.try_spmf"
###       ("_applC" ("_position" map_spmf)
###         ("_cargs"
###           ("_applC" ("_position" map_generat)
###             ("_cargs" ("_position" id)
###               ("_cargs" ("_position" id)
###                 ("_lambda" ("_pttrns" ("_position" c) ("_position" input))
###                   ("\<^const>SPMF.try_spmf"
###                     ("_applC" ("_position" c) ("_position" input))
###                     ("_position" gpv'))))))
###           ("_applC" ("_position" the_gpv) ("_position" gpv))))
###       ("_applC" ("_position" the_gpv) ("_position" gpv')))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("_applC" ("_position" the_gpv)
###       ("\<^const>SPMF.try_spmf" ("_position" gpv) ("_position" gpv')))
###     ("\<^const>Generative_Probabilistic_Value.try_gpv"
###       ("_applC" ("_position" map_spmf)
###         ("_cargs"
###           ("_applC" ("_position" map_generat)
###             ("_cargs" ("_position" id)
###               ("_cargs" ("_position" id)
###                 ("_lambda" ("_pttrns" ("_position" c) ("_position" input))
###                   ("\<^const>Generative_Probabilistic_Value.try_gpv"
###                     ("_applC" ("_position" c) ("_position" input))
###                     ("_position" gpv'))))))
###           ("_applC" ("_position" the_gpv) ("_position" gpv))))
###       ("_applC" ("_position" the_gpv) ("_position" gpv')))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("_applC" ("_position" the_gpv)
###       ("\<^const>Generative_Probabilistic_Value.try_gpv" ("_position" gpv)
###         ("_position" gpv')))
###     ("\<^const>Generative_Probabilistic_Value.try_gpv"
###       ("_applC" ("_position" map_spmf)
###         ("_cargs"
###           ("_applC" ("_position" map_generat)
###             ("_cargs" ("_position" id)
###               ("_cargs" ("_position" id)
###                 ("_lambda" ("_pttrns" ("_position" c) ("_position" input))
###                   ("\<^const>Generative_Probabilistic_Value.try_gpv"
###                     ("_applC" ("_position" c) ("_position" input))
###                     ("_position" gpv'))))))
###           ("_applC" ("_position" the_gpv) ("_position" gpv))))
###       ("_applC" ("_position" the_gpv) ("_position" gpv')))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("_applC" ("_position" the_gpv)
###       ("\<^const>SPMF.try_spmf" ("_position" gpv) ("_position" gpv')))
###     ("\<^const>SPMF.try_spmf"
###       ("_applC" ("_position" map_spmf)
###         ("_cargs"
###           ("_applC" ("_position" map_generat)
###             ("_cargs" ("_position" id)
###               ("_cargs" ("_position" id)
###                 ("_lambda" ("_pttrns" ("_position" c) ("_position" input))
###                   ("\<^const>Generative_Probabilistic_Value.try_gpv"
###                     ("_applC" ("_position" c) ("_position" input))
###                     ("_position" gpv'))))))
###           ("_applC" ("_position" the_gpv) ("_position" gpv))))
###       ("_applC" ("_position" the_gpv) ("_position" gpv')))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("_applC" ("_position" the_gpv)
###       ("\<^const>Generative_Probabilistic_Value.try_gpv" ("_position" gpv)
###         ("_position" gpv')))
###     ("\<^const>SPMF.try_spmf"
###       ("_applC" ("_position" map_spmf)
###         ("_cargs"
###           ("_applC" ("_position" map_generat)
###             ("_cargs" ("_position" id)
###               ("_cargs" ("_position" id)
###                 ("_lambda" ("_pttrns" ("_position" c) ("_position" input))
###                   ("\<^const>Generative_Probabilistic_Value.try_gpv"
###                     ("_applC" ("_position" c) ("_position" input))
###                     ("_position" gpv'))))))
###           ("_applC" ("_position" the_gpv) ("_position" gpv))))
###       ("_applC" ("_position" the_gpv) ("_position" gpv')))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 1438 of "$AFP/CryptHOL/Generative_Probabilistic_Value.thy") produces 2 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("\<^const>Generative_Probabilistic_Value.try_gpv"
###       ("_applC" ("_position" Done) ("_position" x)) ("_position" gpv'))
###     ("_applC" ("_position" Done) ("_position" x))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("\<^const>SPMF.try_spmf" ("_applC" ("_position" Done) ("_position" x))
###       ("_position" gpv'))
###     ("_applC" ("_position" Done) ("_position" x))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 1441 of "$AFP/CryptHOL/Generative_Probabilistic_Value.thy") produces 2 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("\<^const>Generative_Probabilistic_Value.try_gpv" ("_position" Fail)
###       ("_position" gpv'))
###     ("_position" gpv')))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("\<^const>SPMF.try_spmf" ("_position" Fail) ("_position" gpv'))
###     ("_position" gpv')))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 1444 of "$AFP/CryptHOL/Generative_Probabilistic_Value.thy") produces 4 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("\<^const>Generative_Probabilistic_Value.try_gpv"
###       ("_applC" ("_position" Pause)
###         ("_cargs" ("_position" out) ("_position" c)))
###       ("_position" gpv'))
###     ("_applC" ("_position" Pause)
###       ("_cargs" ("_position" out)
###         ("_lambda" ("_position" input)
###           ("\<^const>SPMF.try_spmf"
###             ("_applC" ("_position" c) ("_position" input))
###             ("_position" gpv')))))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("\<^const>SPMF.try_spmf"
###       ("_applC" ("_position" Pause)
###         ("_cargs" ("_position" out) ("_position" c)))
###       ("_position" gpv'))
###     ("_applC" ("_position" Pause)
###       ("_cargs" ("_position" out)
###         ("_lambda" ("_position" input)
###           ("\<^const>SPMF.try_spmf"
###             ("_applC" ("_position" c) ("_position" input))
###             ("_position" gpv')))))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("\<^const>Generative_Probabilistic_Value.try_gpv"
###       ("_applC" ("_position" Pause)
###         ("_cargs" ("_position" out) ("_position" c)))
###       ("_position" gpv'))
###     ("_applC" ("_position" Pause)
###       ("_cargs" ("_position" out)
###         ("_lambda" ("_position" input)
###           ("\<^const>Generative_Probabilistic_Value.try_gpv"
###             ("_applC" ("_position" c) ("_position" input))
###             ("_position" gpv')))))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("\<^const>SPMF.try_spmf"
###       ("_applC" ("_position" Pause)
###         ("_cargs" ("_position" out) ("_position" c)))
###       ("_position" gpv'))
###     ("_applC" ("_position" Pause)
###       ("_cargs" ("_position" out)
###         ("_lambda" ("_position" input)
###           ("\<^const>Generative_Probabilistic_Value.try_gpv"
###             ("_applC" ("_position" c) ("_position" input))
###             ("_position" gpv')))))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 1447 of "$AFP/CryptHOL/Generative_Probabilistic_Value.thy") produces 2 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("\<^const>Generative_Probabilistic_Value.try_gpv" ("_position" gpv)
###       ("_position" Fail))
###     ("_position" gpv)))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("\<^const>SPMF.try_spmf" ("_position" gpv) ("_position" Fail))
###     ("_position" gpv)))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 1451 of "$AFP/CryptHOL/Generative_Probabilistic_Value.thy") produces 4 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("_applC" ("_position" lift_spmf)
###       ("\<^const>SPMF.try_spmf" ("_position" p) ("_position" q)))
###     ("\<^const>Generative_Probabilistic_Value.try_gpv"
###       ("_applC" ("_position" lift_spmf) ("_position" p))
###       ("_applC" ("_position" lift_spmf) ("_position" q)))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("_applC" ("_position" lift_spmf)
###       ("\<^const>Generative_Probabilistic_Value.try_gpv" ("_position" p)
###         ("_position" q)))
###     ("\<^const>Generative_Probabilistic_Value.try_gpv"
###       ("_applC" ("_position" lift_spmf) ("_position" p))
###       ("_applC" ("_position" lift_spmf) ("_position" q)))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("_applC" ("_position" lift_spmf)
###       ("\<^const>SPMF.try_spmf" ("_position" p) ("_position" q)))
###     ("\<^const>SPMF.try_spmf"
###       ("_applC" ("_position" lift_spmf) ("_position" p))
###       ("_applC" ("_position" lift_spmf) ("_position" q)))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("_applC" ("_position" lift_spmf)
###       ("\<^const>Generative_Probabilistic_Value.try_gpv" ("_position" p)
###         ("_position" q)))
###     ("\<^const>SPMF.try_spmf"
###       ("_applC" ("_position" lift_spmf) ("_position" p))
###       ("_applC" ("_position" lift_spmf) ("_position" q)))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 1454 of "$AFP/CryptHOL/Generative_Probabilistic_Value.thy") produces 2 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("\<^const>Generative_Probabilistic_Value.try_gpv"
###       ("_applC" ("_position" assert_gpv) ("_position" b))
###       ("_position" gpv'))
###     ("\<^const>HOL.If" ("_position" b)
###       ("_applC" ("_position" Done) ("\<^const>Product_Type.Unity"))
###       ("_position" gpv'))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("\<^const>SPMF.try_spmf"
###       ("_applC" ("_position" assert_gpv) ("_position" b))
###       ("_position" gpv'))
###     ("\<^const>HOL.If" ("_position" b)
###       ("_applC" ("_position" Done) ("\<^const>Product_Type.Unity"))
###       ("_position" gpv'))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 1469 of "$AFP/CryptHOL/Generative_Probabilistic_Value.thy") produces 4 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("_applC" ("_position" map_gpv)
###       ("_cargs" ("_position" f)
###         ("_cargs" ("_position" g)
###           ("\<^const>SPMF.try_spmf" ("_position" gpv) ("_position" gpv')))))
###     ("\<^const>Generative_Probabilistic_Value.try_gpv"
###       ("_applC" ("_position" map_gpv)
###         ("_cargs" ("_position" f)
###           ("_cargs" ("_position" g) ("_position" gpv))))
###       ("_applC" ("_position" map_gpv)
###         ("_cargs" ("_position" f)
###           ("_cargs" ("_position" g) ("_position" gpv')))))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("_applC" ("_position" map_gpv)
###       ("_cargs" ("_position" f)
###         ("_cargs" ("_position" g)
###           ("\<^const>Generative_Probabilistic_Value.try_gpv"
###             ("_position" gpv) ("_position" gpv')))))
###     ("\<^const>Generative_Probabilistic_Value.try_gpv"
###       ("_applC" ("_position" map_gpv)
###         ("_cargs" ("_position" f)
###           ("_cargs" ("_position" g) ("_position" gpv))))
###       ("_applC" ("_position" map_gpv)
###         ("_cargs" ("_position" f)
###           ("_cargs" ("_position" g) ("_position" gpv')))))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("_applC" ("_position" map_gpv)
###       ("_cargs" ("_position" f)
###         ("_cargs" ("_position" g)
###           ("\<^const>SPMF.try_spmf" ("_position" gpv) ("_position" gpv')))))
###     ("\<^const>SPMF.try_spmf"
###       ("_applC" ("_position" map_gpv)
###         ("_cargs" ("_position" f)
###           ("_cargs" ("_position" g) ("_position" gpv))))
###       ("_applC" ("_position" map_gpv)
###         ("_cargs" ("_position" f)
###           ("_cargs" ("_position" g) ("_position" gpv')))))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("_applC" ("_position" map_gpv)
###       ("_cargs" ("_position" f)
###         ("_cargs" ("_position" g)
###           ("\<^const>Generative_Probabilistic_Value.try_gpv"
###             ("_position" gpv) ("_position" gpv')))))
###     ("\<^const>SPMF.try_spmf"
###       ("_applC" ("_position" map_gpv)
###         ("_cargs" ("_position" f)
###           ("_cargs" ("_position" g) ("_position" gpv))))
###       ("_applC" ("_position" map_gpv)
###         ("_cargs" ("_position" f)
###           ("_cargs" ("_position" g) ("_position" gpv')))))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 1472 of "$AFP/CryptHOL/Generative_Probabilistic_Value.thy") produces 4 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("_applC" ("_position" map_gpv')
###       ("_cargs" ("_position" f)
###         ("_cargs" ("_position" g)
###           ("_cargs" ("_position" h)
###             ("\<^const>SPMF.try_spmf" ("_position" gpv)
###               ("_position" gpv'))))))
###     ("\<^const>Generative_Probabilistic_Value.try_gpv"
###       ("_applC" ("_position" map_gpv')
###         ("_cargs" ("_position" f)
###           ("_cargs" ("_position" g)
###             ("_cargs" ("_position" h) ("_position" gpv)))))
###       ("_applC" ("_position" map_gpv')
###         ("_cargs" ("_position" f)
###           ("_cargs" ("_position" g)
###             ("_cargs" ("_position" h) ("_position" gpv'))))))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("_applC" ("_position" map_gpv')
###       ("_cargs" ("_position" f)
###         ("_cargs" ("_position" g)
###           ("_cargs" ("_position" h)
###             ("\<^const>Generative_Probabilistic_Value.try_gpv"
###               ("_position" gpv) ("_position" gpv'))))))
###     ("\<^const>Generative_Probabilistic_Value.try_gpv"
###       ("_applC" ("_position" map_gpv')
###         ("_cargs" ("_position" f)
###           ("_cargs" ("_position" g)
###             ("_cargs" ("_position" h) ("_position" gpv)))))
###       ("_applC" ("_position" map_gpv')
###         ("_cargs" ("_position" f)
###           ("_cargs" ("_position" g)
###             ("_cargs" ("_position" h) ("_position" gpv'))))))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("_applC" ("_position" map_gpv')
###       ("_cargs" ("_position" f)
###         ("_cargs" ("_position" g)
###           ("_cargs" ("_position" h)
###             ("\<^const>SPMF.try_spmf" ("_position" gpv)
###               ("_position" gpv'))))))
###     ("\<^const>SPMF.try_spmf"
###       ("_applC" ("_position" map_gpv')
###         ("_cargs" ("_position" f)
###           ("_cargs" ("_position" g)
###             ("_cargs" ("_position" h) ("_position" gpv)))))
###       ("_applC" ("_position" map_gpv')
###         ("_cargs" ("_position" f)
###           ("_cargs" ("_position" g)
###             ("_cargs" ("_position" h) ("_position" gpv'))))))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("_applC" ("_position" map_gpv')
###       ("_cargs" ("_position" f)
###         ("_cargs" ("_position" g)
###           ("_cargs" ("_position" h)
###             ("\<^const>Generative_Probabilistic_Value.try_gpv"
###               ("_position" gpv) ("_position" gpv'))))))
###     ("\<^const>SPMF.try_spmf"
###       ("_applC" ("_position" map_gpv')
###         ("_cargs" ("_position" f)
###           ("_cargs" ("_position" g)
###             ("_cargs" ("_position" h) ("_position" gpv)))))
###       ("_applC" ("_position" map_gpv')
###         ("_cargs" ("_position" f)
###           ("_cargs" ("_position" g)
###             ("_cargs" ("_position" h) ("_position" gpv'))))))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 1477 of "$AFP/CryptHOL/Generative_Probabilistic_Value.thy") produces 4 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("\<^const>Generative_Probabilistic_Value.try_gpv"
###       ("\<^const>Monad_Syntax.bind"
###         ("_applC" ("_position" assert_gpv) ("_position" b)) ("_position" f))
###       ("_position" gpv))
###     ("\<^const>HOL.If" ("_position" b)
###       ("\<^const>SPMF.try_spmf"
###         ("_applC" ("_position" f) ("\<^const>Product_Type.Unity"))
###         ("_position" gpv))
###       ("_position" gpv))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("\<^const>SPMF.try_spmf"
###       ("\<^const>Monad_Syntax.bind"
###         ("_applC" ("_position" assert_gpv) ("_position" b)) ("_position" f))
###       ("_position" gpv))
###     ("\<^const>HOL.If" ("_position" b)
###       ("\<^const>SPMF.try_spmf"
###         ("_applC" ("_position" f) ("\<^const>Product_Type.Unity"))
###         ("_position" gpv))
###       ("_position" gpv))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("\<^const>Generative_Probabilistic_Value.try_gpv"
###       ("\<^const>Monad_Syntax.bind"
###         ("_applC" ("_position" assert_gpv) ("_position" b)) ("_position" f))
###       ("_position" gpv))
###     ("\<^const>HOL.If" ("_position" b)
###       ("\<^const>Generative_Probabilistic_Value.try_gpv"
###         ("_applC" ("_position" f) ("\<^const>Product_Type.Unity"))
###         ("_position" gpv))
###       ("_position" gpv))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("\<^const>SPMF.try_spmf"
###       ("\<^const>Monad_Syntax.bind"
###         ("_applC" ("_position" assert_gpv) ("_position" b)) ("_position" f))
###       ("_position" gpv))
###     ("\<^const>HOL.If" ("_position" b)
###       ("\<^const>Generative_Probabilistic_Value.try_gpv"
###         ("_applC" ("_position" f) ("\<^const>Product_Type.Unity"))
###         ("_position" gpv))
###       ("_position" gpv))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
Proofs for coinductive predicate(s) "ord_gpv"
  Proving monotonicity ...
Proofs for inductive predicate(s) "interaction_bounded_by"
  Proving monotonicity ...
instantiation
  \<I> :: (type, type) order
  less_eq_\<I> == less_eq :: ('a, 'b) \<I> => ('a, 'b) \<I> => bool
  less_\<I> == less :: ('a, 'b) \<I> => ('a, 'b) \<I> => bool
instantiation
  \<I> :: (type, type) order_bot
  bot_\<I> == bot :: ('a, 'b) \<I>
Proofs for inductive predicate(s) "resultsp_gpv"
  Proving monotonicity ...
Proofs for inductive predicate(s) "outsp_gpv"
  Proving monotonicity ...
Proofs for inductive predicate(s) "pred_gpv'"
  Proving monotonicity ...
Proofs for coinductive predicate(s) "WT_gpv"
  Proving monotonicity ...
Proofs for inductive predicate(s) "sub_gpvsp"
  Proving monotonicity ...
### Ambiguous input (line 3300 of "$AFP/CryptHOL/Generative_Probabilistic_Value.thy") produces 2 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("_applC" ("_position" results_gpv)
###       ("_cargs" ("_position" \<I>)
###         ("\<^const>SPMF.try_spmf" ("_position" gpv) ("_position" gpv'))))
###     ("\<^const>Set.union"
###       ("_applC" ("_position" results_gpv)
###         ("_cargs" ("_position" \<I>) ("_position" gpv)))
###       ("\<^const>HOL.If"
###         ("_applC" ("_position" colossless_gpv)
###           ("_cargs" ("_position" \<I>) ("_position" gpv)))
###         ("\<^const>Set.empty")
###         ("_applC" ("_position" results_gpv)
###           ("_cargs" ("_position" \<I>) ("_position" gpv')))))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("_applC" ("_position" results_gpv)
###       ("_cargs" ("_position" \<I>)
###         ("\<^const>Generative_Probabilistic_Value.try_gpv" ("_position" gpv)
###           ("_position" gpv'))))
###     ("\<^const>Set.union"
###       ("_applC" ("_position" results_gpv)
###         ("_cargs" ("_position" \<I>) ("_position" gpv)))
###       ("\<^const>HOL.If"
###         ("_applC" ("_position" colossless_gpv)
###           ("_cargs" ("_position" \<I>) ("_position" gpv)))
###         ("\<^const>Set.empty")
###         ("_applC" ("_position" results_gpv)
###           ("_cargs" ("_position" \<I>) ("_position" gpv')))))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 3348 of "$AFP/CryptHOL/Generative_Probabilistic_Value.thy") produces 2 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("_applC" ("_position" results'_gpv)
###       ("\<^const>SPMF.try_spmf" ("_position" gpv) ("_position" gpv')))
###     ("\<^const>Set.union"
###       ("_applC" ("_position" results'_gpv) ("_position" gpv))
###       ("\<^const>HOL.If"
###         ("_applC" ("_position" colossless_gpv)
###           ("_cargs" ("_position" \<I>_full) ("_position" gpv)))
###         ("\<^const>Set.empty")
###         ("_applC" ("_position" results'_gpv) ("_position" gpv'))))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("_applC" ("_position" results'_gpv)
###       ("\<^const>Generative_Probabilistic_Value.try_gpv" ("_position" gpv)
###         ("_position" gpv')))
###     ("\<^const>Set.union"
###       ("_applC" ("_position" results'_gpv) ("_position" gpv))
###       ("\<^const>HOL.If"
###         ("_applC" ("_position" colossless_gpv)
###           ("_cargs" ("_position" \<I>_full) ("_position" gpv)))
###         ("\<^const>Set.empty")
###         ("_applC" ("_position" results'_gpv) ("_position" gpv'))))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 3353 of "$AFP/CryptHOL/Generative_Probabilistic_Value.thy") produces 2 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("_applC" ("_position" outs'_gpv)
###       ("\<^const>SPMF.try_spmf" ("_position" gpv) ("_position" gpv')))
###     ("\<^const>Set.union"
###       ("_applC" ("_position" outs'_gpv) ("_position" gpv))
###       ("\<^const>HOL.If"
###         ("_applC" ("_position" colossless_gpv)
###           ("_cargs" ("_position" \<I>_full) ("_position" gpv)))
###         ("\<^const>Set.empty")
###         ("_applC" ("_position" outs'_gpv) ("_position" gpv'))))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("_applC" ("_position" outs'_gpv)
###       ("\<^const>Generative_Probabilistic_Value.try_gpv" ("_position" gpv)
###         ("_position" gpv')))
###     ("\<^const>Set.union"
###       ("_applC" ("_position" outs'_gpv) ("_position" gpv))
###       ("\<^const>HOL.If"
###         ("_applC" ("_position" colossless_gpv)
###           ("_cargs" ("_position" \<I>_full) ("_position" gpv)))
###         ("\<^const>Set.empty")
###         ("_applC" ("_position" outs'_gpv) ("_position" gpv'))))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 3476 of "$AFP/CryptHOL/Generative_Probabilistic_Value.thy") produces 2 parse trees:
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("_applC" ("_position" gen_lossless_gpv)
###       ("_cargs" ("_position" b)
###         ("_cargs" ("_position" \<I>_full) ("_position" gpv)))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>HOL.eq"
###       ("\<^const>SPMF.try_spmf" ("_position" gpv) ("_position" gpv'))
###       ("_position" gpv))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("_applC" ("_position" gen_lossless_gpv)
###       ("_cargs" ("_position" b)
###         ("_cargs" ("_position" \<I>_full) ("_position" gpv)))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>HOL.eq"
###       ("\<^const>Generative_Probabilistic_Value.try_gpv" ("_position" gpv)
###         ("_position" gpv'))
###       ("_position" gpv))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 3490 of "$AFP/CryptHOL/Generative_Probabilistic_Value.thy") produces 4 parse trees:
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("_applC" ("_position" gen_lossless_gpv)
###       ("_cargs" ("_position" b)
###         ("_cargs" ("_position" \<I>_full) ("_position" gpv)))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>HOL.eq"
###       ("\<^const>Generative_Probabilistic_Value.try_gpv"
###         ("_applC" ("_position" bind_gpv)
###           ("_cargs" ("_position" gpv) ("_position" f)))
###         ("_position" gpv'))
###       ("_applC" ("_position" bind_gpv)
###         ("_cargs" ("_position" gpv)
###           ("_lambda" ("_position" x)
###             ("\<^const>SPMF.try_spmf"
###               ("_applC" ("_position" f) ("_position" x))
###               ("_position" gpv'))))))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("_applC" ("_position" gen_lossless_gpv)
###       ("_cargs" ("_position" b)
###         ("_cargs" ("_position" \<I>_full) ("_position" gpv)))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>HOL.eq"
###       ("\<^const>SPMF.try_spmf"
###         ("_applC" ("_position" bind_gpv)
###           ("_cargs" ("_position" gpv) ("_position" f)))
###         ("_position" gpv'))
###       ("_applC" ("_position" bind_gpv)
###         ("_cargs" ("_position" gpv)
###           ("_lambda" ("_position" x)
###             ("\<^const>SPMF.try_spmf"
###               ("_applC" ("_position" f) ("_position" x))
###               ("_position" gpv'))))))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("_applC" ("_position" gen_lossless_gpv)
###       ("_cargs" ("_position" b)
###         ("_cargs" ("_position" \<I>_full) ("_position" gpv)))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>HOL.eq"
###       ("\<^const>Generative_Probabilistic_Value.try_gpv"
###         ("_applC" ("_position" bind_gpv)
###           ("_cargs" ("_position" gpv) ("_position" f)))
###         ("_position" gpv'))
###       ("_applC" ("_position" bind_gpv)
###         ("_cargs" ("_position" gpv)
###           ("_lambda" ("_position" x)
###             ("\<^const>Generative_Probabilistic_Value.try_gpv"
###               ("_applC" ("_position" f) ("_position" x))
###               ("_position" gpv'))))))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("_applC" ("_position" gen_lossless_gpv)
###       ("_cargs" ("_position" b)
###         ("_cargs" ("_position" \<I>_full) ("_position" gpv)))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>HOL.eq"
###       ("\<^const>SPMF.try_spmf"
###         ("_applC" ("_position" bind_gpv)
###           ("_cargs" ("_position" gpv) ("_position" f)))
###         ("_position" gpv'))
###       ("_applC" ("_position" bind_gpv)
###         ("_cargs" ("_position" gpv)
###           ("_lambda" ("_position" x)
###             ("\<^const>Generative_Probabilistic_Value.try_gpv"
###               ("_applC" ("_position" f) ("_position" x))
###               ("_position" gpv'))))))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
consts
  mk_lossless_gpv :: "('a, 'b, 'c) gpv => ('a, 'b, 'c) gpv"
### Ambiguous input (line 3541 of "$AFP/CryptHOL/Generative_Probabilistic_Value.thy") produces 2 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq" ("_applC" ("_position" catch_gpv) ("_position" gpv))
###     ("\<^const>Generative_Probabilistic_Value.try_gpv"
###       ("_applC" ("_position" map_gpv)
###         ("_cargs" ("_position" Some)
###           ("_cargs" ("_position" id) ("_position" gpv))))
###       ("_applC" ("_position" Done) ("_position" None)))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq" ("_applC" ("_position" catch_gpv) ("_position" gpv))
###     ("\<^const>SPMF.try_spmf"
###       ("_applC" ("_position" map_gpv)
###         ("_cargs" ("_position" Some)
###           ("_cargs" ("_position" id) ("_position" gpv))))
###       ("_applC" ("_position" Done) ("_position" None)))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 3559 of "$AFP/CryptHOL/Generative_Probabilistic_Value.thy") produces 2 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("_applC" ("_position" the_gpv)
###       ("_applC" ("_position" catch_gpv) ("_position" gpv)))
###     ("\<^const>Generative_Probabilistic_Value.try_gpv"
###       ("_applC" ("_position" map_spmf)
###         ("_cargs"
###           ("_applC" ("_position" map_generat)
###             ("_cargs" ("_position" Some)
###               ("_cargs" ("_position" id)
###                 ("_lambda" ("_pttrns" ("_position" rpv) ("_position" input))
###                   ("_applC" ("_position" catch_gpv)
###                     ("_applC" ("_position" rpv) ("_position" input)))))))
###           ("_applC" ("_position" the_gpv) ("_position" gpv))))
###       ("_applC" ("_position" return_spmf)
###         ("_applC" ("_position" Pure) ("_position" None))))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("_applC" ("_position" the_gpv)
###       ("_applC" ("_position" catch_gpv) ("_position" gpv)))
###     ("\<^const>SPMF.try_spmf"
###       ("_applC" ("_position" map_spmf)
###         ("_cargs"
###           ("_applC" ("_position" map_generat)
###             ("_cargs" ("_position" Some)
###               ("_cargs" ("_position" id)
###                 ("_lambda" ("_pttrns" ("_position" rpv) ("_position" input))
###                   ("_applC" ("_position" catch_gpv)
###                     ("_applC" ("_position" rpv) ("_position" input)))))))
###           ("_applC" ("_position" the_gpv) ("_position" gpv))))
###       ("_applC" ("_position" return_spmf)
###         ("_applC" ("_position" Pure) ("_position" None))))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
consts
  inline_aux ::
    "('a, 'call, 'ret) gpv * 's +
     ('a, 'call, 'ret) rpv * ('ret * 's, 'call', 'ret') gpv
     => ('a * 's, 'call', 'ret') gpv"
locale raw_converter_invariant
  fixes \<I> :: "('call, 'ret) \<I>"
    and \<I>' :: "('call', 'ret') \<I>"
    and callee :: "'s => 'call => ('ret * 's, 'call', 'ret') gpv"
    and I :: "'s => bool"
  assumes "raw_converter_invariant \<I> \<I>' callee I"
locale raw_converter_invariant
  fixes \<I> :: "('call, 'ret) \<I>"
    and \<I>' :: "('call', 'ret') \<I>"
    and callee :: "'s => 'call => ('ret * 's, 'call', 'ret') gpv"
    and I :: "'s => bool"
  assumes "raw_converter_invariant \<I> \<I>' callee I"
Proofs for inductive predicate(s) "WT_callee"
  Proving monotonicity ...
locale callee_invariant_on_base
  fixes callee :: "'s => 'a => ('b * 's) spmf"
    and I :: "'s => bool"
    and \<I> :: "('a, 'b) \<I>"
locale callee_invariant_on
  fixes callee :: "'s => 'a => ('b * 's) spmf"
    and I :: "'s => bool"
    and \<I> :: "('a, 'b) \<I>"
  assumes "callee_invariant_on callee I \<I>"
consts
  restrict_gpv :: "('a, 'out, 'in) gpv => ('a, 'out, 'in) gpv"
consts
  enforce_\<I>_gpv ::
    "('out, 'in) \<I> => ('a, 'out, 'in) gpv => ('a, 'out, 'in) gpv"
Proofs for inductive predicate(s) "finite_gpv"
  Proving monotonicity ...
### Ambiguous input (line 5702 of "$AFP/CryptHOL/Generative_Probabilistic_Value.thy") produces 2 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.iff"
###     ("_applC" ("_position" finite_gpv)
###       ("_cargs" ("_position" \<I>)
###         ("\<^const>SPMF.try_spmf" ("_position" gpv) ("_position" gpv'))))
###     ("\<^const>HOL.conj"
###       ("_applC" ("_position" finite_gpv)
###         ("_cargs" ("_position" \<I>) ("_position" gpv)))
###       ("\<^const>HOL.disj"
###         ("_applC" ("_position" colossless_gpv)
###           ("_cargs" ("_position" \<I>) ("_position" gpv)))
###         ("_applC" ("_position" finite_gpv)
###           ("_cargs" ("_position" \<I>) ("_position" gpv')))))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.iff"
###     ("_applC" ("_position" finite_gpv)
###       ("_cargs" ("_position" \<I>)
###         ("\<^const>Generative_Probabilistic_Value.try_gpv" ("_position" gpv)
###           ("_position" gpv'))))
###     ("\<^const>HOL.conj"
###       ("_applC" ("_position" finite_gpv)
###         ("_cargs" ("_position" \<I>) ("_position" gpv)))
###       ("\<^const>HOL.disj"
###         ("_applC" ("_position" colossless_gpv)
###           ("_cargs" ("_position" \<I>) ("_position" gpv)))
###         ("_applC" ("_position" finite_gpv)
###           ("_cargs" ("_position" \<I>) ("_position" gpv')))))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 5781 of "$AFP/CryptHOL/Generative_Probabilistic_Value.thy") produces 2 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.iff"
###     ("_applC" ("_position" colossless_gpv)
###       ("_cargs" ("_position" \<I>)
###         ("\<^const>SPMF.try_spmf" ("_position" gpv) ("_position" gpv'))))
###     ("\<^const>HOL.disj"
###       ("_applC" ("_position" colossless_gpv)
###         ("_cargs" ("_position" \<I>) ("_position" gpv)))
###       ("_applC" ("_position" colossless_gpv)
###         ("_cargs" ("_position" \<I>) ("_position" gpv'))))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.iff"
###     ("_applC" ("_position" colossless_gpv)
###       ("_cargs" ("_position" \<I>)
###         ("\<^const>Generative_Probabilistic_Value.try_gpv" ("_position" gpv)
###           ("_position" gpv'))))
###     ("\<^const>HOL.disj"
###       ("_applC" ("_position" colossless_gpv)
###         ("_cargs" ("_position" \<I>) ("_position" gpv)))
###       ("_applC" ("_position" colossless_gpv)
###         ("_cargs" ("_position" \<I>) ("_position" gpv'))))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 5828 of "$AFP/CryptHOL/Generative_Probabilistic_Value.thy") produces 2 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.iff"
###     ("_applC" ("_position" lossless_gpv)
###       ("_cargs" ("_position" \<I>)
###         ("\<^const>SPMF.try_spmf" ("_position" gpv) ("_position" gpv'))))
###     ("\<^const>HOL.conj"
###       ("_applC" ("_position" finite_gpv)
###         ("_cargs" ("_position" \<I>) ("_position" gpv)))
###       ("\<^const>HOL.disj"
###         ("_applC" ("_position" lossless_gpv)
###           ("_cargs" ("_position" \<I>) ("_position" gpv)))
###         ("_applC" ("_position" lossless_gpv)
###           ("_cargs" ("_position" \<I>) ("_position" gpv')))))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.iff"
###     ("_applC" ("_position" lossless_gpv)
###       ("_cargs" ("_position" \<I>)
###         ("\<^const>Generative_Probabilistic_Value.try_gpv" ("_position" gpv)
###           ("_position" gpv'))))
###     ("\<^const>HOL.conj"
###       ("_applC" ("_position" finite_gpv)
###         ("_cargs" ("_position" \<I>) ("_position" gpv)))
###       ("\<^const>HOL.disj"
###         ("_applC" ("_position" lossless_gpv)
###           ("_cargs" ("_position" \<I>) ("_position" gpv)))
###         ("_applC" ("_position" lossless_gpv)
###           ("_cargs" ("_position" \<I>) ("_position" gpv')))))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
locale callee_invariant_on
  fixes callee :: "'s => 'a => ('b * 's) spmf"
    and I :: "'s => bool"
    and \<I> :: "('a, 'b) \<I>"
  assumes "callee_invariant_on callee I \<I>"
### theory "Draft.Generative_Probabilistic_Value"
### 7.468s elapsed time, 7.982s cpu time, 0.821s GC time
Loading theory "Draft.Computational_Model" (required by "Draft.GPV_ExpectationTemplates" via "Draft.GPV_Expectation")
"('\<sigma>, 'call, 'ret) oracle"
consts
  plus_oracle :: "'a + 'c => (('b + 'd) * 's) spmf"
consts
  plus_oracle_stop :: "'a + 'c => (('b + 'd) option * 's) spmf"
Found termination order: "{}"
### Ambiguous input (line 417 of "$AFP/CryptHOL/Computational_Model.thy") produces 2 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("_applC" ("_position" callee_invariant)
###     ("_cargs"
###       ("\<^const>Computational_Model.extend_state_oracle2"
###         ("_position" oracle))
###       ("_lambda" ("_pattern" ("_position" s) ("_position" s'))
###         ("_applC" ("_position" I) ("_position" s'))))))
### ("\<^const>HOL.Trueprop"
###   ("_applC" ("_position" callee_invariant)
###     ("_cargs" ("_position" oracle)
###       ("\<^const>Computational_Model.extend_state_oracle"
###         ("_lambda" ("_pattern" ("_position" s) ("_position" s'))
###           ("_applC" ("_position" I) ("_position" s')))))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 421 of "$AFP/CryptHOL/Computational_Model.thy") produces 2 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("_applC" ("_position" callee_invariant)
###     ("_cargs"
###       ("\<^const>Computational_Model.extend_state_oracle2"
###         ("_position" oracle))
###       ("_lambda" ("_position" s)
###         ("_applC" ("_position" I)
###           ("_applC" ("_position" snd) ("_position" s)))))))
### ("\<^const>HOL.Trueprop"
###   ("_applC" ("_position" callee_invariant)
###     ("_cargs" ("_position" oracle)
###       ("\<^const>Computational_Model.extend_state_oracle"
###         ("_lambda" ("_position" s)
###           ("_applC" ("_position" I)
###             ("_applC" ("_position" snd) ("_position" s))))))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
consts
  plus_intercept :: "'s => 'x1 + 'x2 => (('y1 + 'y2) * 's, 'call, 'ret) gpv"
consts
  plus_intercept_stop ::
    "'s => 'x1 + 'x2 => (('y1 + 'y2) option * 's, 'call, 'ret) gpv"
consts
  left_gpv :: "('a, 'out, 'in) gpv => ('a, 'out + 'out', 'in + 'in') gpv"
consts
  right_gpv :: "('a, 'out, 'in) gpv => ('a, 'out' + 'out, 'in' + 'in) gpv"
Found termination order: "{}"
### theory "Draft.Computational_Model"
### 1.174s elapsed time, 1.274s cpu time, 0.153s GC time
Loading theory "Draft.GPV_Expectation" (required by "Draft.GPV_ExpectationTemplates")
locale raw_converter_invariant
  fixes \<I> :: "('call, 'ret) \<I>"
    and \<I>' :: "('call', 'ret') \<I>"
    and callee :: "'s => 'call => ('ret * 's, 'call', 'ret') gpv"
    and I :: "'s => bool"
  assumes "raw_converter_invariant \<I> \<I>' callee I"
locale callee_invariant_on
  fixes callee :: "'s => 'a => ('b * 's) spmf"
    and I :: "'s => bool"
    and \<I> :: "('a, 'b) \<I>"
  assumes "callee_invariant_on callee I \<I>"
### theory "Draft.GPV_Expectation"
### 0.483s elapsed time, 0.546s cpu time, 0.099s GC time
Loading theory "Draft.GPV_ExpectationTemplates"
val templateLemmas =
   [("GPV_Expectation.pgen_lossless_gpv_Done",
     "pgen_lossless_gpv ?fail ?\<I>
       (Generative_Probabilistic_Value.Done ?x)",
     template_predicate
      (
         template_app
          (template_app
            (template_app (template_hole 1, template_var 2),
             template_var 1),
           template_app (template_hole 0, template_var 0))
         )),
    ("GPV_Expectation.weight_gpv_Fail", "weight_gpv ?\<I> Fail = 0",
     template_equation
      (template_app
        (template_app (template_hole 2, template_var 0), template_hole 1),
       template_hole 0)),
    ("GPV_Expectation.weight_gpv_nonneg", "0 <= weight_gpv ?\<I> ?gpv",
     template_inequation
      (less_equals, template_hole 1,
       template_app
        (template_app (template_hole 0, template_var 1), template_var 0))),
    ("GPV_Expectation.weight_gpv_Done",
     "weight_gpv ?\<I> (Generative_Probabilistic_Value.Done ?x) = 1",
     template_equation
      (template_app
        (template_app (template_hole 2, template_var 1),
         template_app (template_hole 1, template_var 0)),
       template_hole 0)),
    ("GPV_Expectation.monotone_ennreal_add1",
     "monotone (<=) (<=) (%x. x + ?y)",
     template_predicate
      (
         template_app
          (template_app
            (template_app (template_hole 2, template_hole 1),
             template_hole 1),
           t_empty)
         )),
    ("GPV_Expectation.monotone_ennreal_add2", "monotone (<=) (<=) ((+) ?x)",
     template_predicate
      (
         template_app
          (template_app
            (template_app (template_hole 2, template_hole 1),
             template_hole 1),
           t_empty)
         )),
    ("GPV_Expectation.monotone_times_ennreal1",
     "monotone (<=) (<=) (%x. x * ?y)",
     template_predicate
      (
         template_app
          (template_app
            (template_app (template_hole 2, template_hole 1),
             template_hole 1),
           t_empty)
         )),
    ("GPV_Expectation.monotone_times_ennreal2",
     "monotone (<=) (<=) ((*) ?y)",
     template_predicate
      (
         template_app
          (template_app
            (template_app (template_hole 2, template_hole 1),
             template_hole 1),
           t_empty)
         )),
    ("GPV_Expectation.expectation_gpv_Fail",
     "expectation_gpv ?fail ?\<I> ?f Fail = ?fail",
     template_equation
      (template_app
        (template_app
          (template_app
            (template_app (template_hole 1, template_var 2),
             template_var 1),
           template_var 0),
         template_hole 0),
       template_var 2)),
    ("GPV_Expectation.pgen_lossless_gpv_Fail",
     "pgen_lossless_gpv ?fail ?\<I> Fail = (?fail = 1)",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app (template_hole 3, template_var 1),
                template_var 0),
              template_hole 2)
            )],
       template_equation (template_var 1, template_hole 0))),
    ("GPV_Expectation.mcont_times_ennreal2",
     "mcont Sup (<=) Sup (<=) (%y. y * ?x)",
     template_predicate
      (
         template_app
          (template_app
            (template_app
              (template_app
                (template_app (template_hole 3, template_hole 2),
                 template_hole 1),
               template_hole 2),
             template_hole 1),
           t_empty)
         )),
    ("GPV_Expectation.mcont_times_ennreal1",
     "mcont Sup (<=) Sup (<=) ((*) ?x)",
     template_predicate
      (
         template_app
          (template_app
            (template_app
              (template_app
                (template_app (template_hole 3, template_hole 2),
                 template_hole 1),
               template_hole 2),
             template_hole 1),
           t_empty)
         )),
    ("GPV_Expectation.expectation_gpv_Done",
     "expectation_gpv ?fail ?\<I> ?f
       (Generative_Probabilistic_Value.Done ?x) =
      ?f ?x",
     template_equation
      (template_app
        (template_app
          (template_app
            (template_app (template_hole 1, template_var 3),
             template_var 2),
           template_var 1),
         template_app (template_hole 0, template_var 0)),
       template_app (template_var 1, template_var 0))),
    ("GPV_Expectation.monotone_nn_integral_spmf",
     "monotone (ord_spmf (=)) (<=)
       (%p. integral\<^sup>N (measure_spmf p) ?f)",
     template_predicate
      (
         template_app
          (template_app
            (template_app
              (template_hole 6,
               template_app
                (template_hole 5,
                 template_app (template_hole 4, template_hole 3))),
             template_hole 2),
           t_empty)
         )),
    ("GPV_Expectation.pmf_map_spmf_None",
     "pmf (map_spmf ?f ?p) None = pmf ?p None",
     template_equation
      (template_app
        (template_app
          (template_hole 5,
           template_app
            (template_app
              (template_hole 4,
               template_app (template_hole 3, template_var 1)),
             template_var 0)),
         template_hole 2),
       template_app
        (template_app (template_hole 1, template_var 0), template_hole 0))),
    ("GPV_Expectation.weight_gpv_le_1",
     "?\<I> \<turnstile>g ?gpv \<surd> ==> weight_gpv ?\<I> ?gpv <= 1",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 3, template_var 1),
              template_var 0)
            )],
       template_inequation
        (less_equals,
         template_app
          (template_app (template_hole 1, template_var 1), template_var 0),
         template_hole 0))),
    ("GPV_Expectation.ennreal_leI",
     "?x <= enn2real ?y ==> ennreal ?x <= ?y",
     template_implication
      ([template_inequation
         (less_equals, template_var 1,
          template_app (template_hole 2, template_var 0))],
       template_inequation
        (less_equals, template_app (template_hole 0, template_var 1),
         template_var 0))),
    ("GPV_Expectation.nn_integral_spmf_parametric",
     "rel_fun (rel_spmf ?A) (rel_fun (rel_fun ?A (=)) (=)) nn_integral_spmf
       nn_integral_spmf",
     template_predicate
      (
         template_app
          (template_app
            (template_app
              (template_app
                (template_hole 7,
                 template_app
                  (template_hole 6,
                   template_app (template_hole 5, template_var 0))),
               template_app
                (template_app
                  (template_hole 4,
                   template_app
                    (template_app (template_hole 3, template_var 0),
                     template_hole 2)),
                 template_hole 2)),
             template_hole 1),
           template_hole 0)
         )),
    ("GPV_Expectation.weight_spmf'_parametric",
     "rel_fun (rel_spmf ?A) (=) ??.GPV_Expectation.weight_spmf'
       ??.GPV_Expectation.weight_spmf'",
     template_predicate
      (
         template_app
          (template_app
            (template_app
              (template_app
                (template_hole 5,
                 template_app
                  (template_hole 4,
                   template_app (template_hole 3, template_var 0))),
               template_hole 2),
             t_empty),
           t_empty)
         )),
    ("GPV_Expectation.weight_gpv_lift_spmf",
     "weight_gpv ?\<I> (lift_spmf ?p) = weight_spmf ?p",
     template_equation
      (template_app
        (template_app (template_hole 4, template_var 1),
         template_app (template_hole 3, template_var 0)),
       template_app
        (template_app
          (template_hole 2, template_app (template_hole 1, template_var 0)),
         template_app
          (template_hole 0,
           template_app (template_hole 1, template_var 0))))),
    ("GPV_Expectation.cont_nn_integral_spmf",
     "cont lub_spmf (ord_spmf (=)) Sup (<=)
       (%p. integral\<^sup>N (measure_spmf p) ?f)",
     template_predicate
      (
         template_app
          (template_app
            (template_app
              (template_app
                (template_app (template_hole 8, template_hole 7),
                 template_app
                  (template_hole 6,
                   template_app (template_hole 5, template_hole 4))),
               template_hole 3),
             template_hole 2),
           t_empty)
         )),
    ("GPV_Expectation.mcont_nn_integral_spmf",
     "mcont lub_spmf (ord_spmf (=)) Sup (<=)
       (%p. integral\<^sup>N (measure_spmf p) ?f)",
     template_predicate
      (
         template_app
          (template_app
            (template_app
              (template_app
                (template_app (template_hole 8, template_hole 7),
                 template_app
                  (template_hole 6,
                   template_app (template_hole 5, template_hole 4))),
               template_hole 3),
             template_hole 2),
           t_empty)
         )),
    ("GPV_Expectation.pgen_lossless_gpv_lift_spmf",
     "pgen_lossless_gpv ?fail ?\<I> (lift_spmf ?p) =
      (lossless_spmf ?p | ?fail = 1)",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app (template_hole 5, template_var 2),
                template_var 1),
              template_app (template_hole 4, template_var 0))
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 3,
               template_app (template_hole 2, template_var 0)),
             template_app
              (template_app (template_hole 1, template_var 2),
               template_hole 0))
           ))),
    ("GPV_Expectation.pgen_lossless_gpv_map_gpv_id",
     "pgen_lossless_gpv ?fail ?\<I> (map_gpv ?f id ?gpv) =
      pgen_lossless_gpv ?fail ?\<I> ?gpv",
     template_equation
      (template_app
        (template_app
          (template_app (template_hole 3, template_var 3), template_var 2),
         template_app
          (template_app
            (template_app (template_hole 2, template_var 1),
             template_hole 1),
           template_var 0)),
       template_app
        (template_app
          (template_app (template_hole 0, template_var 3), template_var 2),
         template_var 0))),
    ("GPV_Expectation.pgen_lossless_left_gpv",
     "pgen_lossless_gpv ?fail (?\<I> \<oplus>\<^sub>\<I> ?\<I>')
       (left_gpv ?gpv) =
      pgen_lossless_gpv ?fail ?\<I> ?gpv",
     template_equation
      (template_app
        (template_app
          (template_app (template_hole 3, template_var 3),
           template_app
            (template_app (template_hole 2, template_var 2),
             template_var 1)),
         template_app (template_hole 1, template_var 0)),
       template_app
        (template_app
          (template_app (template_hole 0, template_var 3), template_var 2),
         template_var 0))),
    ("GPV_Expectation.pgen_lossless_right_gpv",
     "pgen_lossless_gpv ?fail (?\<I> \<oplus>\<^sub>\<I> ?\<I>')
       (right_gpv ?gpv) =
      pgen_lossless_gpv ?fail ?\<I>' ?gpv",
     template_equation
      (template_app
        (template_app
          (template_app (template_hole 3, template_var 3),
           template_app
            (template_app (template_hole 2, template_var 2),
             template_var 1)),
         template_app (template_hole 1, template_var 0)),
       template_app
        (template_app
          (template_app (template_hole 0, template_var 3), template_var 1),
         template_var 0))),
    ("GPV_Expectation.pgen_lossless_gpv_parametric",
     "rel_fun (=) (rel_fun (rel_\<I> ?C (=)) (rel_fun (rel_gpv ?A ?C) (=)))
       pgen_lossless_gpv pgen_lossless_gpv",
     template_predicate
      (
         template_app
          (template_app
            (template_app
              (template_app (template_hole 9, template_hole 8),
               template_app
                (template_app
                  (template_hole 7,
                   template_app
                    (template_app (template_hole 6, template_var 1),
                     template_hole 5)),
                 template_app
                  (template_app
                    (template_hole 4,
                     template_app
                      (template_app (template_hole 3, template_var 0),
                       template_var 1)),
                   template_hole 2))),
             template_hole 1),
           template_hole 0)
         )),
    ("GPV_Expectation.pgen_lossless_gpv_parametric'",
     "rel_fun (=)
       (rel_fun (rel_\<I> ?C ?R) (rel_fun (rel_gpv'' ?A ?C ?R) (=)))
       pgen_lossless_gpv pgen_lossless_gpv",
     template_predicate
      (
         template_app
          (template_app
            (template_app
              (template_app (template_hole 8, template_hole 7),
               template_app
                (template_app
                  (template_hole 6,
                   template_app
                    (template_app (template_hole 5, template_var 2),
                     template_var 1)),
                 template_app
                  (template_app
                    (template_hole 4,
                     template_app
                      (template_app
                        (template_app (template_hole 3, template_var 0),
                         template_var 2),
                       template_var 1)),
                   template_hole 2))),
             template_hole 1),
           template_hole 0)
         )),
    ("GPV_Expectation.expectation_left_gpv",
     "expectation_gpv ?fail (?\<I> \<oplus>\<^sub>\<I> ?\<I>') ?f
       (left_gpv ?gpv) =
      expectation_gpv ?fail ?\<I> ?f ?gpv",
     template_equation
      (template_app
        (template_app
          (template_app
            (template_app (template_hole 3, template_var 4),
             template_app
              (template_app (template_hole 2, template_var 3),
               template_var 2)),
           template_var 1),
         template_app (template_hole 1, template_var 0)),
       template_app
        (template_app
          (template_app
            (template_app (template_hole 0, template_var 4),
             template_var 3),
           template_var 1),
         template_var 0))),
    ("GPV_Expectation.expectation_right_gpv",
     "expectation_gpv ?fail (?\<I> \<oplus>\<^sub>\<I> ?\<I>') ?f
       (right_gpv ?gpv) =
      expectation_gpv ?fail ?\<I>' ?f ?gpv",
     template_equation
      (template_app
        (template_app
          (template_app
            (template_app (template_hole 3, template_var 4),
             template_app
              (template_app (template_hole 2, template_var 3),
               template_var 2)),
           template_var 1),
         template_app (template_hole 1, template_var 0)),
       template_app
        (template_app
          (template_app
            (template_app (template_hole 0, template_var 4),
             template_var 2),
           template_var 1),
         template_var 0))),
    ("GPV_Expectation.expectation_gpv_top_pfinite",
     "pfinite_gpv ?\<I> ?gpv ==>
      expectation_gpv \<top> ?\<I> (%_. \<top>) ?gpv = \<top>",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app (template_hole 4, template_hole 3),
                template_var 1),
              template_var 0)
            )],
       template_equation
        (template_app
          (template_app
            (template_app
              (template_app (template_hole 1, template_hole 0),
               template_var 1),
             t_empty),
           template_var 0),
         template_hole 0))),
    ("GPV_Expectation.pgen_lossless_gpvD",
     "pgen_lossless_gpv ?fail ?\<I> ?gpv ==>
      expectation_gpv ?fail ?\<I> (%_. 1) ?gpv = 1",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app (template_hole 3, template_var 2),
                template_var 1),
              template_var 0)
            )],
       template_equation
        (template_app
          (template_app
            (template_app
              (template_app (template_hole 1, template_var 2),
               template_var 1),
             t_empty),
           template_var 0),
         template_hole 0))),
    ("GPV_Expectation.pgen_lossless_gpvI",
     "expectation_gpv ?fail ?\<I> (%_. 1) ?gpv = 1 ==>
      pgen_lossless_gpv ?fail ?\<I> ?gpv",
     template_implication
      ([template_equation
         (template_app
           (template_app
             (template_app
               (template_app (template_hole 2, template_var 2),
                template_var 1),
              t_empty),
            template_var 0),
          template_hole 1)],
       template_predicate
        (
           template_app
            (template_app
              (template_app (template_hole 0, template_var 2),
               template_var 1),
             template_var 0)
           ))),
    ("GPV_Expectation.finite_imp_pfinite_gpv",
     "[| finite_gpv ?\<I> ?gpv; ?\<I> \<turnstile>g ?gpv \<surd> |]
      ==> pfinite_gpv ?\<I> ?gpv",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 3, template_var 1),
              template_var 0)
            ),
        template_predicate
         (
            template_app
             (template_app (template_hole 2, template_var 1),
              template_var 0)
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_app (template_hole 1, template_hole 0),
               template_var 1),
             template_var 0)
           ))),
    ("GPV_Expectation.plossless_gpv_lossless_spmfD",
     "[| plossless_gpv ?\<I> ?gpv; ?\<I> \<turnstile>g ?gpv \<surd> |]
      ==> lossless_spmf (the_gpv ?gpv)",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app (template_hole 4, template_hole 3),
                template_var 1),
              template_var 0)
            ),
        template_predicate
         (
            template_app
             (template_app (template_hole 2, template_var 1),
              template_var 0)
            )],
       template_predicate
        (
           template_app
            (template_hole 1,
             template_app (template_hole 0, template_var 0))
           ))),
    ("GPV_Expectation.expectation_gpv_const_le",
     "?\<I> \<turnstile>g ?gpv \<surd> ==>
      expectation_gpv ?fail ?\<I> (%_. ?c) ?gpv <= max ?c ?fail",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 3, template_var 3),
              template_var 2)
            )],
       template_inequation
        (less_equals,
         template_app
          (template_app
            (template_app
              (template_app (template_hole 1, template_var 1),
               template_var 3),
             t_empty),
           template_var 2),
         template_app
          (template_app (template_hole 0, template_var 0),
           template_var 1)))),
    ("GPV_Expectation.ennreal_mult_le_self2I",
     "(0 < ?y ==> ?x <= 1) ==> ?x * ?y <= ?y",
     template_implication
      ([template_implication
         ([template_inequation
            (less_than, template_hole 3, template_var 1)],
          template_inequation
           (less_equals, template_var 0, template_hole 1))],
       template_inequation
        (less_equals,
         template_app
          (template_app (template_hole 0, template_var 0), template_var 1),
         template_var 1))),
    ("GPV_Expectation.lossless_imp_plossless_gpv",
     "[| lossless_gpv ?\<I> ?gpv; ?\<I> \<turnstile>g ?gpv \<surd> |]
      ==> plossless_gpv ?\<I> ?gpv",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app (template_hole 4, template_hole 3),
                template_var 1),
              template_var 0)
            ),
        template_predicate
         (
            template_app
             (template_app (template_hole 2, template_var 1),
              template_var 0)
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_app (template_hole 1, template_hole 0),
               template_var 1),
             template_var 0)
           ))),
    ("GPV_Expectation.plossless_gpv_map_gpv'",
     "pgen_lossless_gpv ?b ?\<I> (map_gpv' ?f ?g ?h ?gpv) =
      pgen_lossless_gpv ?b (map_\<I> ?g ?h ?\<I>) ?gpv",
     template_equation
      (template_app
        (template_app
          (template_app (template_hole 3, template_var 5), template_var 4),
         template_app
          (template_app
            (template_app
              (template_app (template_hole 2, template_var 3),
               template_var 2),
             template_var 1),
           template_var 0)),
       template_app
        (template_app
          (template_app (template_hole 1, template_var 5),
           template_app
            (template_app
              (template_app (template_hole 0, template_var 2),
               template_var 1),
             template_var 4)),
         template_var 0))),
    ("GPV_Expectation.enn2real_leD",
     "[| enn2real ?x < ?y; ?x ~= \<top> |] ==> ?x < ennreal ?y",
     template_implication
      ([template_inequation
         (less_than, template_app (template_hole 5, template_var 1),
          template_var 0),
        template_negation
         (template_equation (template_var 1, template_hole 2))],
       template_inequation
        (less_than, template_var 1,
         template_app (template_hole 0, template_var 0)))),
    ("GPV_Expectation.expectation_gpv_parametric",
     "rel_fun (=)
       (rel_fun (rel_\<I> ?C (=))
         (rel_fun (rel_fun ?A (=)) (rel_fun (rel_gpv ?A ?C) (=))))
       expectation_gpv expectation_gpv",
     template_predicate
      (
         template_app
          (template_app
            (template_app
              (template_app (template_hole 10, template_hole 9),
               template_app
                (template_app
                  (template_hole 8,
                   template_app
                    (template_app (template_hole 7, template_var 1),
                     template_hole 6)),
                 template_app
                  (template_app
                    (template_hole 5,
                     template_app
                      (template_app (template_hole 4, template_var 0),
                       template_hole 9)),
                   template_app
                    (template_app
                      (template_hole 3,
                       template_app
                        (template_app (template_hole 2, template_var 0),
                         template_var 1)),
                     template_hole 9)))),
             template_hole 1),
           template_hole 0)
         )),
    ("GPV_Expectation.expectation_gpv_try_gpv",
     "expectation_gpv ?fail ?\<I> ?f (TRY ?gpv ELSE ?gpv') =
      expectation_gpv (expectation_gpv ?fail ?\<I> ?f ?gpv') ?\<I> ?f ?gpv",
     template_equation
      (template_app
        (template_app
          (template_app
            (template_app (template_hole 1, template_var 4),
             template_var 3),
           template_var 2),
         template_app
          (template_app (template_hole 0, template_var 1), template_var 0)),
       template_app
        (template_app
          (template_app
            (template_app
              (template_hole 1,
               template_app
                (template_app
                  (template_app
                    (template_app (template_hole 1, template_var 4),
                     template_var 3),
                   template_var 2),
                 template_var 0)),
             template_var 3),
           template_var 2),
         template_var 1))),
    ("GPV_Expectation.expectation_gpv_cong_fail",
     "colossless_gpv ?\<I> ?gpv ==>
      expectation_gpv ?fail ?\<I> ?f ?gpv =
      expectation_gpv ?fail' ?\<I> ?f ?gpv",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app (template_hole 3, template_hole 2),
                template_var 4),
              template_var 3)
            )],
       template_equation
        (template_app
          (template_app
            (template_app
              (template_app (template_hole 0, template_var 2),
               template_var 4),
             template_var 1),
           template_var 3),
         template_app
          (template_app
            (template_app
              (template_app (template_hole 0, template_var 0),
               template_var 4),
             template_var 1),
           template_var 3)))),
    ("GPV_Expectation.expectation_gpv_parametric'",
     "rel_fun (=)
       (rel_fun (rel_\<I> ?C ?R)
         (rel_fun (rel_fun ?A (=)) (rel_fun (rel_gpv'' ?A ?C ?R) (=))))
       expectation_gpv expectation_gpv",
     template_predicate
      (
         template_app
          (template_app
            (template_app
              (template_app (template_hole 9, template_hole 8),
               template_app
                (template_app
                  (template_hole 7,
                   template_app
                    (template_app (template_hole 6, template_var 2),
                     template_var 1)),
                 template_app
                  (template_app
                    (template_hole 5,
                     template_app
                      (template_app (template_hole 4, template_var 0),
                       template_hole 8)),
                   template_app
                    (template_app
                      (template_hole 3,
                       template_app
                        (template_app
                          (template_app (template_hole 2, template_var 0),
                           template_var 2),
                         template_var 1)),
                     template_hole 8)))),
             template_hole 1),
           template_hole 0)
         )),
    ("GPV_Expectation.expectation_gpv_bind",
     "expectation_gpv ?fail ?\<I> ?f (?gpv >>= ?g) =
      expectation_gpv ?fail ?\<I> (expectation_gpv ?fail ?\<I> ?f o ?g)
       ?gpv",
     template_equation
      (template_app
        (template_app
          (template_app
            (template_app (template_hole 3, template_var 4),
             template_var 3),
           template_var 2),
         template_app
          (template_app (template_hole 2, template_var 1), template_var 0)),
       template_app
        (template_app
          (template_app
            (template_app (template_hole 1, template_var 4),
             template_var 3),
           template_app
            (template_app
              (template_hole 0,
               template_app
                (template_app
                  (template_app (template_hole 3, template_var 4),
                   template_var 3),
                 template_var 2)),
             template_var 0)),
         template_var 1))),
    ("GPV_Expectation.expectation_gpv_restrict_gpv",
     "?\<I> \<turnstile>g ?gpv \<surd> ==>
      expectation_gpv ?fail ?\<I> ?f (restrict_gpv ?\<I> ?gpv) =
      expectation_gpv ?fail ?\<I> ?f ?gpv",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 3, template_var 3),
              template_var 2)
            )],
       template_equation
        (template_app
          (template_app
            (template_app
              (template_app (template_hole 1, template_var 1),
               template_var 3),
             template_var 0),
           template_app
            (template_app (template_hole 0, template_var 3),
             template_var 2)),
         template_app
          (template_app
            (template_app
              (template_app (template_hole 1, template_var 1),
               template_var 3),
             template_var 0),
           template_var 2)))),
    ("GPV_Expectation.plossless_iff_colossless_pfinite",
     "?\<I> \<turnstile>g ?gpv \<surd> ==>
      plossless_gpv ?\<I> ?gpv =
      (colossless_gpv ?\<I> ?gpv & pfinite_gpv ?\<I> ?gpv)",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 7, template_var 1),
              template_var 0)
            )],
       template_equation
        (template_app
          (template_app
            (template_app (template_hole 5, template_hole 4),
             template_var 1),
           template_var 0),
         template_app
          (template_app
            (template_hole 3,
             template_app
              (template_app
                (template_app (template_hole 2, template_hole 1),
                 template_var 1),
               template_var 0)),
           template_app
            (template_app
              (template_app (template_hole 5, template_hole 0),
               template_var 1),
             template_var 0))))),
    ("GPV_Expectation.mono2mono_nn_integral_spmf",
     "monotone ?orda (ord_spmf (=)) ?t ==>
      monotone ?orda (<=) (%x. integral\<^sup>N (measure_spmf (?t x)) ?f1)",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app (template_hole 7, template_var 2),
                template_app
                 (template_hole 6,
                  template_app (template_hole 5, template_hole 4))),
              t_empty)
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_app (template_hole 3, template_var 2),
               template_hole 2),
             t_empty)
           ))),
    ("GPV_Expectation.expectation_gpv_no_results",
     "[| results_gpv ?\<I> ?gpv = {}; ?\<I> \<turnstile>g ?gpv \<surd> |]
      ==> expectation_gpv 0 ?\<I> ?f ?gpv = 0",
     template_implication
      ([template_equation
         (template_app
           (template_app (template_hole 5, template_var 2), template_var 1),
          template_hole 4),
        template_predicate
         (
            template_app
             (template_app (template_hole 3, template_var 2),
              template_var 1)
            )],
       template_equation
        (template_app
          (template_app
            (template_app
              (template_app (template_hole 1, template_hole 0),
               template_var 2),
             template_var 0),
           template_var 1),
         template_hole 0))),
    ("GPV_Expectation.expectation_gpv_lift_spmf",
     "expectation_gpv ?fail ?\<I> ?f (lift_spmf ?p) =
      integral\<^sup>N (measure_spmf ?p) ?f +
      ?fail * ennreal (pmf ?p None)",
     template_equation
      (template_app
        (template_app
          (template_app
            (template_app (template_hole 8, template_var 3),
             template_var 2),
           template_var 1),
         template_app (template_hole 7, template_var 0)),
       template_app
        (template_app
          (template_hole 6,
           template_app
            (template_app
              (template_hole 5,
               template_app (template_hole 4, template_var 0)),
             t_empty)),
         template_app
          (template_app (template_hole 3, template_var 3),
           template_app
            (template_hole 2,
             template_app
              (template_app (template_hole 1, template_var 0),
               template_hole 0)))))),
    ("GPV_Expectation.expectation_gpv_Pause",
     "expectation_gpv ?fail ?\<I> ?f
       (Generative_Probabilistic_Value.Pause ?out ?c) =
      (\<Sqinter>r\<in>responses_\<I> ?\<I> ?out.
          expectation_gpv ?fail ?\<I> ?f (?c r))",
     template_equation
      (template_app
        (template_app
          (template_app
            (template_app (template_hole 4, template_var 4),
             template_var 3),
           template_var 2),
         template_app
          (template_app (template_hole 3, template_var 1), template_var 0)),
       template_app
        (template_hole 2,
         template_app
          (template_app (template_hole 1, t_empty),
           template_app
            (template_app (template_hole 0, template_var 3),
             template_var 1))))),
    ("GPV_Expectation.expectation_gpv_map_gpv'",
     "expectation_gpv ?fail ?\<I> ?f (map_gpv' ?g ?h ?k ?gpv) =
      expectation_gpv ?fail (map_\<I> ?h ?k ?\<I>) (?f o ?g) ?gpv",
     template_equation
      (template_app
        (template_app
          (template_app
            (template_app (template_hole 4, template_var 6),
             template_var 5),
           template_var 4),
         template_app
          (template_app
            (template_app
              (template_app (template_hole 3, template_var 3),
               template_var 2),
             template_var 1),
           template_var 0)),
       template_app
        (template_app
          (template_app
            (template_app (template_hole 2, template_var 6),
             template_app
              (template_app
                (template_app (template_hole 1, template_var 2),
                 template_var 1),
               template_var 5)),
           template_app
            (template_app (template_hole 0, template_var 4),
             template_var 3)),
         template_var 0))),
    ("GPV_Expectation.le_enn2realI",
     "[| ennreal ?x <= ?y; ?y = \<top> ==> ?x <= 0 |]
      ==> ?x <= enn2real ?y",
     template_implication
      ([template_inequation
         (less_equals, template_app (template_hole 5, template_var 1),
          template_var 0),
        template_implication
         ([template_equation (template_var 0, template_hole 3)],
          template_inequation
           (less_equals, template_var 1, template_hole 1))],
       template_inequation
        (less_equals, template_var 1,
         template_app (template_hole 0, template_var 0)))),
    ("GPV_Expectation.pfinite_gpv_mono",
     "[| pfinite_gpv ?\<I> ?gpv; ?\<I> <= ?\<I>';
         ?\<I> \<turnstile>g ?gpv \<surd> |]
      ==> pfinite_gpv ?\<I>' ?gpv",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app (template_hole 3, template_hole 2),
                template_var 2),
              template_var 1)
            ),
        template_inequation (less_equals, template_var 2, template_var 0),
        template_predicate
         (
            template_app
             (template_app (template_hole 0, template_var 2),
              template_var 1)
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_app (template_hole 3, template_hole 2),
               template_var 0),
             template_var 1)
           ))),
    ("GPV_Expectation.plossless_gpv_mono",
     "[| plossless_gpv ?\<I> ?gpv; ?\<I> <= ?\<I>';
         ?\<I> \<turnstile>g ?gpv \<surd> |]
      ==> plossless_gpv ?\<I>' ?gpv",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app (template_hole 3, template_hole 2),
                template_var 2),
              template_var 1)
            ),
        template_inequation (less_equals, template_var 2, template_var 0),
        template_predicate
         (
            template_app
             (template_app (template_hole 0, template_var 2),
              template_var 1)
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_app (template_hole 3, template_hole 2),
               template_var 0),
             template_var 1)
           ))),
    ("GPV_Expectation.nn_integral_try_spmf",
     "integral\<^sup>N (measure_spmf (TRY ?p ELSE ?q)) ?f =
      integral\<^sup>N (measure_spmf ?p) ?f +
      integral\<^sup>N (measure_spmf ?q) ?f * ennreal (pmf ?p None)",
     template_equation
      (template_app
        (template_app
          (template_hole 7,
           template_app
            (template_hole 6,
             template_app
              (template_app (template_hole 5, template_var 2),
               template_var 1))),
         template_var 0),
       template_app
        (template_app
          (template_hole 4,
           template_app
            (template_app
              (template_hole 7,
               template_app (template_hole 6, template_var 2)),
             template_var 0)),
         template_app
          (template_app
            (template_hole 3,
             template_app
              (template_app
                (template_hole 7,
                 template_app (template_hole 6, template_var 1)),
               template_var 0)),
           template_app
            (template_hole 2,
             template_app
              (template_app (template_hole 1, template_var 2),
               template_hole 0)))))),
    ("GPV_Expectation.nn_integral_mono_lfp",
     "(!!x. lfp.mono_body (%f. ?F f x)) ==>
      lfp.mono_body (%f. integral\<^sup>N ?M (?F f))",
     template_implication
      ([template_predicate (template_app (template_hole 5, t_empty))],
       template_predicate
        (
           template_app
            (template_app
              (template_app
                (template_hole 3,
                 template_app (template_hole 2, template_hole 1)),
               template_hole 1),
             t_empty)
           ))),
    ("GPV_Expectation.expectation_gpv_mono",
     "[| ?fail <= ?fail'; ?f <= ?g |]
      ==> expectation_gpv ?fail ?\<I> ?f ?gpv
          <= expectation_gpv ?fail' ?\<I> ?g ?gpv",
     template_implication
      ([template_inequation (less_equals, template_var 5, template_var 4),
        template_inequation (less_equals, template_var 3, template_var 2)],
       template_inequation
        (less_equals,
         template_app
          (template_app
            (template_app
              (template_app (template_hole 0, template_var 5),
               template_var 1),
             template_var 3),
           template_var 0),
         template_app
          (template_app
            (template_app
              (template_app (template_hole 0, template_var 4),
               template_var 1),
             template_var 2),
           template_var 0)))),
    ("GPV_Expectation.expectation_gpv_\<I>_mono",
     "[| ?\<I> <= ?\<I>'; ?\<I> \<turnstile>g ?gpv \<surd> |]
      ==> expectation_gpv ?fail ?\<I> ?f ?gpv
          <= expectation_gpv ?fail ?\<I>' ?f ?gpv",
     template_implication
      ([template_inequation (less_equals, template_var 4, template_var 3),
        template_predicate
         (
            template_app
             (template_app (template_hole 2, template_var 4),
              template_var 2)
            )],
       template_inequation
        (less_equals,
         template_app
          (template_app
            (template_app
              (template_app (template_hole 0, template_var 1),
               template_var 4),
             template_var 0),
           template_var 2),
         template_app
          (template_app
            (template_app
              (template_app (template_hole 0, template_var 1),
               template_var 3),
             template_var 0),
           template_var 2)))),
    ("GPV_Expectation.pfinite_INF_le_expectation_gpv",
     "pfinite_gpv ?\<I> ?gpv ==>
      min (\<Sqinter> (?f ` results_gpv ?\<I> ?gpv)) ?fail
      <= expectation_gpv ?fail ?\<I> ?f ?gpv",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app (template_hole 7, template_hole 6),
                template_var 3),
              template_var 2)
            )],
       template_inequation
        (less_equals,
         template_app
          (template_app
            (template_hole 4,
             template_app
              (template_hole 3,
               template_app
                (template_app (template_hole 2, t_empty),
                 template_app
                  (template_app (template_hole 1, template_var 3),
                   template_var 2)))),
           template_var 0),
         template_app
          (template_app
            (template_app
              (template_app (template_hole 0, template_var 0),
               template_var 3),
             template_var 1),
           template_var 2)))),
    ("GPV_Expectation.INF_UNION",
     "\<Sqinter> (?f ` \<Union> (?B ` ?A)) =
      (\<Sqinter>x\<in>?A. \<Sqinter> (?f ` ?B x))",
     template_equation
      (template_app
        (template_hole 4,
         template_app
          (template_app (template_hole 3, t_empty),
           template_app
            (template_hole 2,
             template_app
              (template_app (template_hole 1, t_empty), template_var 0)))),
       template_app
        (template_hole 4,
         template_app
          (template_app (template_hole 0, t_empty), template_var 0)))),
    ("GPV_Expectation.mcont2mcont_nn_integral_spmf",
     "mcont ?lub ?ord lub_spmf (ord_spmf (=)) ?t ==>
      mcont ?lub ?ord Sup (<=)
       (%x. integral\<^sup>N (measure_spmf (?t x)) ?f1)",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_app
                   (template_app (template_hole 9, template_var 3),
                    template_var 2),
                  template_hole 8),
                template_app
                 (template_hole 7,
                  template_app (template_hole 6, template_hole 5))),
              t_empty)
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_app
                (template_app
                  (template_app (template_hole 4, template_var 3),
                   template_var 2),
                 template_hole 3),
               template_hole 2),
             t_empty)
           ))),
    ("GPV_Expectation.ereal_INF_cmult",
     "0 < ?c ==>
      (\<Sqinter>i\<in>?I. ereal ?c * ?f i) =
      ereal ?c * \<Sqinter> (?f ` ?I)",
     template_implication
      ([template_inequation (less_than, template_hole 5, template_var 2)],
       template_equation
        (template_app
          (template_hole 3,
           template_app
            (template_app (template_hole 2, t_empty), template_var 0)),
         template_app
          (template_app
            (template_hole 1,
             template_app (template_hole 0, template_var 2)),
           template_app
            (template_hole 3,
             template_app
              (template_app (template_hole 2, t_empty),
               template_var 0)))))),
    ("GPV_Expectation.ereal_INF_multc",
     "0 < ?c ==>
      (\<Sqinter>i\<in>?I. ?f i * ereal ?c) =
      \<Sqinter> (?f ` ?I) * ereal ?c",
     template_implication
      ([template_inequation (less_than, template_hole 5, template_var 2)],
       template_equation
        (template_app
          (template_hole 3,
           template_app
            (template_app (template_hole 2, t_empty), template_var 0)),
         template_app
          (template_app
            (template_hole 1,
             template_app
              (template_hole 3,
               template_app
                (template_app (template_hole 2, t_empty), template_var 0))),
           template_app (template_hole 0, template_var 2))))),
    ("GPV_Expectation.INF_mono_lfp",
     "(!!x. lfp.mono_body (%f. ?F f x)) ==>
      lfp.mono_body (%f. \<Sqinter> (?F f ` ?M))",
     template_implication
      ([template_predicate (template_app (template_hole 6, t_empty))],
       template_predicate
        (
           template_app
            (template_app
              (template_app
                (template_hole 4,
                 template_app (template_hole 3, template_hole 2)),
               template_hole 2),
             t_empty)
           ))),
    ("GPV_Expectation.ennreal_add_partial_function_mono",
     "[| monotone (fun_ord (<=)) (<=) ?f; monotone (fun_ord (<=)) (<=) ?g |]
      ==> monotone (fun_ord (<=)) (<=) (%x. ?f x + ?g x)",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_hole 4,
                  template_app (template_hole 3, template_hole 2)),
                template_hole 1),
              template_var 1)
            ),
        template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_hole 4,
                  template_app (template_hole 3, template_hole 2)),
                template_hole 1),
              template_var 0)
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_app
                (template_hole 4,
                 template_app (template_hole 3, template_hole 2)),
               template_hole 1),
             t_empty)
           ))),
    ("GPV_Expectation.nn_integral_mono2mono",
     "(!!x. x : space ?M ==> monotone ?ord (<=) (%f. ?F f x)) ==>
      monotone ?ord (<=) (%f. integral\<^sup>N ?M (?F f))",
     template_implication
      ([template_predicate (template_app (template_hole 6, t_empty))],
       template_predicate
        (
           template_app
            (template_app
              (template_app (template_hole 2, template_var 1),
               template_hole 1),
             t_empty)
           ))),
    ("GPV_Expectation.plossless_INF_le_expectation_gpv",
     "[| plossless_gpv ?\<I> ?gpv; ?\<I> \<turnstile>g ?gpv \<surd> |]
      ==> \<Sqinter> (?f ` results_gpv ?\<I> ?gpv)
          <= expectation_gpv ?fail ?\<I> ?f ?gpv",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app (template_hole 7, template_hole 6),
                template_var 3),
              template_var 2)
            ),
        template_predicate
         (
            template_app
             (template_app (template_hole 5, template_var 3),
              template_var 2)
            )],
       template_inequation
        (less_equals,
         template_app
          (template_hole 3,
           template_app
            (template_app (template_hole 2, t_empty),
             template_app
              (template_app (template_hole 1, template_var 3),
               template_var 2))),
         template_app
          (template_app
            (template_app
              (template_app (template_hole 0, template_var 0),
               template_var 3),
             template_var 1),
           template_var 2)))),
    ("GPV_Expectation.mono2mono_ennreal_add",
     "[| monotone ?orda (<=) ?t; monotone ?orda (<=) ?t' |]
      ==> monotone ?orda (<=) (%x. ?t x + ?t' x)",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app (template_hole 2, template_var 2),
                template_hole 1),
              t_empty)
            ),
        template_predicate
         (
            template_app
             (template_app
               (template_app (template_hole 2, template_var 2),
                template_hole 1),
              t_empty)
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_app (template_hole 2, template_var 2),
               template_hole 1),
             t_empty)
           ))),
    ("GPV_Expectation.mono2mono_times_ennreal",
     "[| monotone ?orda (<=) ?t; monotone ?orda (<=) ?t' |]
      ==> monotone ?orda (<=) (%x. ?t x * ?t' x)",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app (template_hole 2, template_var 2),
                template_hole 1),
              t_empty)
            ),
        template_predicate
         (
            template_app
             (template_app
               (template_app (template_hole 2, template_var 2),
                template_hole 1),
              t_empty)
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_app (template_hole 2, template_var 2),
               template_hole 1),
             t_empty)
           ))),
    ("GPV_Expectation.pgen_lossless_gpv_mono",
     "[| pgen_lossless_gpv ?fail ?\<I> ?gpv; ?\<I> <= ?\<I>';
         ?\<I> \<turnstile>g ?gpv \<surd>; ?fail <= 1 |]
      ==> pgen_lossless_gpv ?fail ?\<I>' ?gpv",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app (template_hole 4, template_var 3),
                template_var 2),
              template_var 1)
            ),
        template_inequation (less_equals, template_var 2, template_var 0),
        template_predicate
         (
            template_app
             (template_app (template_hole 2, template_var 2),
              template_var 1)
            ),
        template_inequation (less_equals, template_var 3, template_hole 0)],
       template_predicate
        (
           template_app
            (template_app
              (template_app (template_hole 4, template_var 3),
               template_var 0),
             template_var 1)
           ))),
    ("GPV_Expectation.plossless_gpv_mk_lossless_gpv",
     "[| plossless_gpv ?\<I> ?gpv; ?\<I> \<turnstile>g ?gpv \<surd>;
         outs_\<I> ?\<I> = outs_\<I> ?\<I>' |]
      ==> plossless_gpv ?\<I>'
           (mk_lossless_gpv (responses_\<I> ?\<I>) ?x ?gpv)",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app (template_hole 6, template_hole 5),
                template_var 3),
              template_var 2)
            ),
        template_predicate
         (
            template_app
             (template_app (template_hole 4, template_var 3),
              template_var 2)
            ),
        template_equation
         (template_app (template_hole 2, template_var 3),
          template_app (template_hole 2, template_var 1))],
       template_predicate
        (
           template_app
            (template_app
              (template_app (template_hole 6, template_hole 5),
               template_var 1),
             template_app
              (template_app
                (template_app
                  (template_hole 1,
                   template_app (template_hole 0, template_var 3)),
                 template_var 0),
               template_var 2))
           ))),
    ("GPV_Expectation.weight_spmf_mcont2mcont",
     "mcont ?lub ?ord lub_spmf (ord_spmf (=)) ?t ==>
      mcont ?lub ?ord Sup (<=) (%x. ennreal (weight_spmf (?t x)))",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_app
                   (template_app (template_hole 11, template_var 2),
                    template_var 1),
                  template_hole 10),
                template_app
                 (template_hole 9,
                  template_app (template_hole 8, template_hole 7))),
              t_empty)
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_app
                (template_app
                  (template_app (template_hole 6, template_var 2),
                   template_var 1),
                 template_hole 5),
               template_hole 4),
             t_empty)
           ))),
    ("GPV_Expectation.pgen_lossless_gpv_bindI",
     "[| pgen_lossless_gpv ?fail ?\<I> ?gpv;
         !!x. x : results_gpv ?\<I> ?gpv ==>
              pgen_lossless_gpv ?fail ?\<I> (?f x) |]
      ==> pgen_lossless_gpv ?fail ?\<I> (?gpv >>= ?f)",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app (template_hole 5, template_var 3),
                template_var 2),
              template_var 1)
            ),
        template_predicate (template_app (template_hole 4, t_empty))],
       template_predicate
        (
           template_app
            (template_app
              (template_app (template_hole 1, template_var 3),
               template_var 2),
             template_app
              (template_app (template_hole 0, template_var 1),
               template_var 0))
           ))),
    ("GPV_Expectation.pgen_lossless_gpv_PauseI",
     "[| ?out : outs_\<I> ?\<I>;
         !!r. r : responses_\<I> ?\<I> ?out ==>
              pgen_lossless_gpv ?fail ?\<I> (?c r) |]
      ==> pgen_lossless_gpv ?fail ?\<I>
           (Generative_Probabilistic_Value.Pause ?out ?c)",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 6, template_var 3),
              template_app (template_hole 5, template_var 2))
            ),
        template_predicate (template_app (template_hole 4, t_empty))],
       template_predicate
        (
           template_app
            (template_app
              (template_app (template_hole 1, template_var 1),
               template_var 2),
             template_app
              (template_app (template_hole 0, template_var 3),
               template_var 0))
           ))),
    ("GPV_Expectation.expectation_gpv_mk_lossless_gpv",
     "[| ?\<I>' \<turnstile>g ?gpv \<surd>;
         outs_\<I> ?\<I> = outs_\<I> ?\<I>' |]
      ==> expectation_gpv 0 ?\<I>' (%_. ?y) ?gpv
          <= expectation_gpv 0 ?\<I> (%_. ?y)
              (mk_lossless_gpv (responses_\<I> ?\<I>') ?x ?gpv)",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 7, template_var 4),
              template_var 3)
            ),
        template_equation
         (template_app (template_hole 5, template_var 2),
          template_app (template_hole 5, template_var 4))],
       template_inequation
        (less_equals,
         template_app
          (template_app
            (template_app
              (template_app (template_hole 3, template_hole 2),
               template_var 4),
             t_empty),
           template_var 3),
         template_app
          (template_app
            (template_app
              (template_app (template_hole 3, template_hole 2),
               template_var 2),
             t_empty),
           template_app
            (template_app
              (template_app
                (template_hole 1,
                 template_app (template_hole 0, template_var 4)),
               template_var 0),
             template_var 3))))),
    ("GPV_Expectation.expectation_gpv_cmult",
     "[| 0 < ?c; ?c ~= \<top> |]
      ==> ?c * expectation_gpv ?fail ?\<I> ?f ?gpv =
          expectation_gpv (?c * ?fail) ?\<I> (%x. ?c * ?f x) ?gpv",
     template_implication
      ([template_inequation (less_than, template_hole 5, template_var 4),
        template_negation
         (template_equation (template_var 4, template_hole 2))],
       template_equation
        (template_app
          (template_app (template_hole 1, template_var 4),
           template_app
            (template_app
              (template_app
                (template_app (template_hole 0, template_var 3),
                 template_var 2),
               template_var 1),
             template_var 0)),
         template_app
          (template_app
            (template_app
              (template_app
                (template_hole 0,
                 template_app
                  (template_app (template_hole 1, template_var 4),
                   template_var 3)),
               template_var 2),
             t_empty),
           template_var 0)))),
    ("GPV_Expectation.enn2real_INF",
     "[| ?A ~= {}; ALL x:?A. ?f x < \<top> |]
      ==> enn2real (\<Sqinter> (?f ` ?A)) =
          (\<Sqinter>x\<in>?A. enn2real (?f x))",
     template_implication
      ([template_negation
         (template_equation (template_var 1, template_hole 9)),
        template_predicate
         (
            template_app
             (template_app (template_hole 8, template_var 1), t_empty)
            )],
       template_equation
        (template_app
          (template_hole 4,
           template_app
            (template_hole 3,
             template_app
              (template_app (template_hole 2, t_empty), template_var 1))),
         template_app
          (template_hole 1,
           template_app
            (template_app (template_hole 0, t_empty), template_var 1))))),
    ("GPV_Expectation.mcont2mcont_times_ennreal",
     "[| mcont ?lub ?ord Sup (<=) ?f; mcont ?lub ?ord Sup (<=) ?g |]
      ==> mcont ?lub ?ord Sup (<=) (%x. ?f x * ?g x)",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_app
                   (template_app (template_hole 3, template_var 3),
                    template_var 2),
                  template_hole 2),
                template_hole 1),
              t_empty)
            ),
        template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_app
                   (template_app (template_hole 3, template_var 3),
                    template_var 2),
                  template_hole 2),
                template_hole 1),
              t_empty)
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_app
                (template_app
                  (template_app (template_hole 3, template_var 3),
                   template_var 2),
                 template_hole 2),
               template_hole 1),
             t_empty)
           ))),
    ("GPV_Expectation.pfinite_gpv_ContD",
     "[| pfinite_gpv ?\<I> ?gpv; IO ?out ?c : set_spmf (the_gpv ?gpv);
         ?input : responses_\<I> ?\<I> ?out;
         ?\<I> \<turnstile>g ?gpv \<surd> |]
      ==> pfinite_gpv ?\<I> (?c ?input)",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app (template_hole 8, template_hole 7),
                template_var 4),
              template_var 3)
            ),
        template_predicate
         (
            template_app
             (template_app
               (template_hole 6,
                template_app
                 (template_app (template_hole 5, template_var 2),
                  template_var 1)),
              template_app
               (template_hole 4,
                template_app (template_hole 3, template_var 3)))
            ),
        template_predicate
         (
            template_app
             (template_app (template_hole 2, template_var 0),
              template_app
               (template_app (template_hole 1, template_var 4),
                template_var 2))
            ),
        template_predicate
         (
            template_app
             (template_app (template_hole 0, template_var 4),
              template_var 3)
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_app (template_hole 8, template_hole 7),
               template_var 4),
             template_app (template_var 1, template_var 0))
           ))),
    ("GPV_Expectation.plossless_gpv_ContD",
     "[| plossless_gpv ?\<I> ?gpv; IO ?out ?c : set_spmf (the_gpv ?gpv);
         ?input : responses_\<I> ?\<I> ?out;
         ?\<I> \<turnstile>g ?gpv \<surd> |]
      ==> plossless_gpv ?\<I> (?c ?input)",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app (template_hole 8, template_hole 7),
                template_var 4),
              template_var 3)
            ),
        template_predicate
         (
            template_app
             (template_app
               (template_hole 6,
                template_app
                 (template_app (template_hole 5, template_var 2),
                  template_var 1)),
              template_app
               (template_hole 4,
                template_app (template_hole 3, template_var 3)))
            ),
        template_predicate
         (
            template_app
             (template_app (template_hole 2, template_var 0),
              template_app
               (template_app (template_hole 1, template_var 4),
                template_var 2))
            ),
        template_predicate
         (
            template_app
             (template_app (template_hole 0, template_var 4),
              template_var 3)
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_app (template_hole 8, template_hole 7),
               template_var 4),
             template_app (template_var 1, template_var 0))
           ))),
    ("GPV_Expectation.weight_gpv_Pause",
     "(!!r. r : responses_\<I> ?\<I> ?out ==>
            ?\<I> \<turnstile>g ?c r \<surd>) ==>
      weight_gpv ?\<I> (Generative_Probabilistic_Value.Pause ?out ?c) =
      (if ?out : outs_\<I> ?\<I>
       then \<Sqinter>r\<in>responses_\<I> ?\<I> ?out.
               weight_gpv ?\<I> (?c r)
       else 0)",
     template_implication
      ([template_predicate (template_app (template_hole 13, t_empty))],
       template_equation
        (template_app
          (template_app (template_hole 7, template_var 2),
           template_app
            (template_app (template_hole 6, template_var 1),
             template_var 0)),
         template_app
          (template_app
            (template_app
              (template_hole 5,
               template_app
                (template_app (template_hole 4, template_var 1),
                 template_app (template_hole 3, template_var 2))),
             template_app
              (template_hole 2,
               template_app
                (template_app (template_hole 1, t_empty),
                 template_app
                  (template_app (template_hole 10, template_var 2),
                   template_var 1)))),
           template_hole 0)))),
    ("GPV_Expectation.expectation_gpv_mono_strong",
     "[| ~ colossless_gpv ?\<I> ?gpv ==> ?fail <= ?fail';
         !!x. x : results_gpv ?\<I> ?gpv ==> ?f x <= ?g x |]
      ==> expectation_gpv ?fail ?\<I> ?f ?gpv
          <= expectation_gpv ?fail' ?\<I> ?g ?gpv",
     template_implication
      ([template_implication
         ([template_negation
            (
               template_predicate
                (
                   template_app
                    (template_app
                      (template_app (template_hole 6, template_hole 5),
                       template_var 5),
                     template_var 4)
                   )
               )],
          template_inequation
           (less_equals, template_var 3, template_var 2)),
        template_predicate (template_app (template_hole 3, t_empty))],
       template_inequation
        (less_equals,
         template_app
          (template_app
            (template_app
              (template_app (template_hole 0, template_var 3),
               template_var 5),
             template_var 1),
           template_var 4),
         template_app
          (template_app
            (template_app
              (template_app (template_hole 0, template_var 2),
               template_var 5),
             template_var 0),
           template_var 4)))),
    ("GPV_Expectation.expectation_gpv_cong",
     "[| ?fail = ?fail'; ?\<I> = ?\<I>'; ?gpv = ?gpv';
         !!x. x : results_gpv ?\<I>' ?gpv' ==> ?f x = ?g x |]
      ==> expectation_gpv ?fail ?\<I> ?f ?gpv =
          expectation_gpv ?fail' ?\<I>' ?g ?gpv'",
     template_implication
      ([template_equation (template_var 7, template_var 6),
        template_equation (template_var 5, template_var 4),
        template_equation (template_var 3, template_var 2),
        template_predicate (template_app (template_hole 3, t_empty))],
       template_equation
        (template_app
          (template_app
            (template_app
              (template_app (template_hole 0, template_var 7),
               template_var 5),
             template_var 1),
           template_var 3),
         template_app
          (template_app
            (template_app
              (template_app (template_hole 0, template_var 6),
               template_var 4),
             template_var 0),
           template_var 2)))),
    ("GPV_Expectation.weight_exec_gpv",
     "[| !!s x. x : outs_\<I> ?\<I> ==> lossless_spmf (?callee s x);
         ?\<I> \<turnstile>g ?gpv \<surd>;
         !!s. ?\<I> \<turnstile>c ?callee s \<surd> |]
      ==> weight_gpv ?\<I> ?gpv <= weight_spmf (exec_gpv ?callee ?gpv ?s)",
     template_implication
      ([template_predicate (template_app (template_hole 13, t_empty)),
        template_predicate
         (
            template_app
             (template_app (template_hole 7, template_var 3),
              template_var 1)
            ),
        template_predicate (template_app (template_hole 13, t_empty))],
       template_inequation
        (less_equals,
         template_app
          (template_app (template_hole 4, template_var 3), template_var 1),
         template_app
          (template_app
            (template_hole 3,
             template_app
              (template_hole 2,
               template_app
                (template_app
                  (template_app (template_hole 1, template_var 2),
                   template_var 1),
                 template_var 0))),
           template_app
            (template_hole 0,
             template_app
              (template_hole 2,
               template_app
                (template_app
                  (template_app (template_hole 1, template_var 2),
                   template_var 1),
                 template_var 0))))))),
    ("GPV_Expectation.expectation_gpv_le_exec_gpv",
     "[| !!s x. x : outs_\<I> ?\<I> ==> lossless_spmf (?callee s x);
         ?\<I> \<turnstile>g ?gpv \<surd>;
         !!s. ?\<I> \<turnstile>c ?callee s \<surd> |]
      ==> expectation_gpv 0 ?\<I> ?f ?gpv
          <= \<integral>\<^sup>+ (x, s). ?f x
                                \<partial>measure_spmf
     (exec_gpv ?callee ?gpv ?s)",
     template_implication
      ([template_predicate (template_app (template_hole 14, t_empty)),
        template_predicate
         (
            template_app
             (template_app (template_hole 8, template_var 4),
              template_var 2)
            ),
        template_predicate (template_app (template_hole 14, t_empty))],
       template_inequation
        (less_equals,
         template_app
          (template_app
            (template_app
              (template_app (template_hole 5, template_hole 4),
               template_var 4),
             template_var 1),
           template_var 2),
         template_app
          (template_app
            (template_hole 3,
             template_app
              (template_hole 2,
               template_app
                (template_app
                  (template_app (template_hole 1, template_var 3),
                   template_var 2),
                 template_var 0))),
           template_app (template_hole 0, t_empty))))),
    ("GPV_Expectation.plossless_exec_gpv",
     "[| plossless_gpv ?\<I> ?gpv; ?\<I> \<turnstile>g ?gpv \<surd>;
         !!s x. x : outs_\<I> ?\<I> ==> lossless_spmf (?callee s x);
         !!s x.
            x : outs_\<I> ?\<I> ==>
            set_spmf (?callee s x)
            <= responses_\<I> ?\<I> x \<times> UNIV |]
      ==> lossless_spmf (exec_gpv ?callee ?gpv ?s)",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app (template_hole 14, template_hole 13),
                template_var 3),
              template_var 2)
            ),
        template_predicate
         (
            template_app
             (template_app (template_hole 12, template_var 3),
              template_var 2)
            ),
        template_predicate (template_app (template_hole 11, t_empty)),
        template_predicate (template_app (template_hole 11, t_empty))],
       template_predicate
        (
           template_app
            (template_hole 1,
             template_app
              (template_app
                (template_app (template_hole 0, template_var 1),
                 template_var 2),
               template_var 0))
           ))),
    ("GPV_Expectation.INF_mult_left_ennreal",
     "[| ?I = {} ==> ?c ~= 0;
         [| ?c = \<top>; EX i:?I. 0 < ?f i |]
         ==> EX p>0. ALL i:?I. p <= ?f i |]
      ==> ?c * \<Sqinter> (?f ` ?I) = (\<Sqinter>i\<in>?I. ?c * ?f i)",
     template_implication
      ([template_implication
         ([template_equation (template_var 2, template_hole 13)],
          template_negation
           (template_equation (template_var 1, template_hole 10))),
        template_implication
         ([template_equation (template_var 1, template_hole 9)],
          template_implication
           ([template_predicate
              (
                 template_app
                  (template_app (template_hole 8, template_var 2), t_empty)
                 )],
            template_predicate (template_app (template_hole 6, t_empty))))],
       template_equation
        (template_app
          (template_app (template_hole 2, template_var 1),
           template_app
            (template_hole 1,
             template_app
              (template_app (template_hole 0, t_empty), template_var 2))),
         template_app
          (template_hole 1,
           template_app
            (template_app (template_hole 0, t_empty), template_var 2))))),
    ("GPV_Expectation.expectation_gpv_fixp_induct",
     "[| lfp.admissible ?P; ?P (%_. 0);
         !!expectation_gpv'.
            [| !!gpv.
                  expectation_gpv' gpv
                  <= expectation_gpv ?fail ?\<I> ?f gpv;
               ?P expectation_gpv' |]
            ==> ?P (%gpv. \<integral>\<^sup>+ generat.
         (case generat of Pure x => ?f x
          | IO out c =>
              \<Sqinter>r\<in>responses_\<I> ?\<I> out.
                 expectation_gpv' (c r))
       \<partial>measure_spmf (the_gpv gpv) +
                          ?fail * ennreal (pmf (the_gpv gpv) None)) |]
      ==> ?P (expectation_gpv ?fail ?\<I> ?f)",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_hole 20,
                  template_app (template_hole 19, template_hole 18)),
                template_app (template_hole 17, template_hole 16)),
              template_var 3)
            ),
        template_predicate (template_app (template_var 3, t_empty)),
        template_predicate (template_app (template_hole 14, t_empty))],
       template_predicate
        (
           template_app
            (template_var 3,
             template_app
              (template_app
                (template_app (template_hole 12, template_var 2),
                 template_var 1),
               template_var 0))
           ))),
    ("GPV_Expectation.plossless_inline",
     "[| plossless_gpv ?\<I> ?gpv; ?\<I> \<turnstile>g ?gpv \<surd>;
         !!s x. x : outs_\<I> ?\<I> ==> plossless_gpv ?\<I>' (?callee s x);
         !!s x.
            x : outs_\<I> ?\<I> ==>
            results_gpv ?\<I>' (?callee s x)
            <= responses_\<I> ?\<I> x \<times> UNIV;
         !!s x.
            x : outs_\<I> ?\<I> ==>
            ?\<I>' \<turnstile>g ?callee s x \<surd> |]
      ==> plossless_gpv ?\<I>' (inline ?callee ?gpv ?s)",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app (template_hole 15, template_hole 14),
                template_var 4),
              template_var 3)
            ),
        template_predicate
         (
            template_app
             (template_app (template_hole 13, template_var 4),
              template_var 3)
            ),
        template_predicate (template_app (template_hole 12, t_empty)),
        template_predicate (template_app (template_hole 12, t_empty)),
        template_predicate (template_app (template_hole 12, t_empty))],
       template_predicate
        (
           template_app
            (template_app
              (template_app (template_hole 1, template_hole 14),
               template_var 2),
             template_app
              (template_app
                (template_app (template_hole 0, template_var 1),
                 template_var 3),
               template_var 0))
           ))),
    ("GPV_Expectation.expectation_gpv_le_inline",
     "[| !!s x. x : outs_\<I> ?\<I> ==> plossless_gpv ?\<I>' (?callee s x);
         !!s x.
            x : outs_\<I> ?\<I> ==>
            results_gpv ?\<I>' (?callee s x)
            <= responses_\<I> ?\<I> x \<times> UNIV;
         ?\<I> \<turnstile>g ?gpv \<surd>;
         !!s x.
            x : outs_\<I> ?\<I> ==>
            ?\<I>' \<turnstile>g ?callee s x \<surd> |]
      ==> expectation_gpv 0 ?\<I> ?f ?gpv
          <= expectation_gpv 0 ?\<I>' (%(x, s). ?f x)
              (inline ?callee ?gpv ?s)",
     template_implication
      ([template_predicate (template_app (template_hole 18, t_empty)),
        template_predicate (template_app (template_hole 18, t_empty)),
        template_predicate
         (
            template_app
             (template_app (template_hole 6, template_var 5),
              template_var 2)
            ),
        template_predicate (template_app (template_hole 18, t_empty))],
       template_inequation
        (less_equals,
         template_app
          (template_app
            (template_app
              (template_app (template_hole 3, template_hole 12),
               template_var 5),
             template_var 1),
           template_var 2),
         template_app
          (template_app
            (template_app
              (template_app (template_hole 2, template_hole 12),
               template_var 4),
             template_app (template_hole 1, t_empty)),
           template_app
            (template_app
              (template_app (template_hole 0, template_var 3),
               template_var 2),
             template_var 0)))))]:
   (string * thm * template) list
### theory "Draft.GPV_ExpectationTemplates"
### 2.030s elapsed time, 3.250s cpu time, 1.449s GC time
val it = (): unit
