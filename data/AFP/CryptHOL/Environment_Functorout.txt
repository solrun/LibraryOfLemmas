Loading theory "Draft.Environment_Functor" (required by "Draft.Environment_FunctorTemplates")
Loading theory "HOL-Library.BigO" (required by "Draft.Environment_FunctorTemplates" via "Draft.ExtrEqs")
Loading theory "Draft.Templates" (required by "Draft.Environment_FunctorTemplates" via "Draft.ExtrEqs")
datatype template_term
=
     t_empty
   | template_app of template_term * template_term
   | template_hole of int
   | template_var of int
datatype sign
= equals | greater_equals | greater_than | less_equals | less_than
datatype template
=
     template_bimplication of template * template
   | template_dunno
   | template_equation of template_term * template_term
   | template_implication of template list * template
   | template_inequation of sign * template_term * template_term
   | template_negation of template
   | template_predicate of template_term
constructor t_empty: template_term
constructor template_app: template_term * template_term -> template_term
constructor template_hole: int -> template_term
constructor template_var: int -> template_term
constructor equals: sign
constructor greater_equals: sign
constructor greater_than: sign
constructor less_equals: sign
constructor less_than: sign
constructor template_bimplication: template * template -> template
constructor template_dunno: template
constructor template_equation: template_term * template_term -> template
constructor template_implication: template list * template -> template
constructor template_inequation:
   sign * template_term * template_term -> template
constructor template_negation: template -> template
constructor template_predicate: template_term -> template
val vfs = fn: term -> (indexname * typ) list * (string * typ) list
val indexOf = fn: ''a list -> ''a -> int -> int
val has_eq = fn: term -> bool
val term2template = fn:
   (indexname * typ) list -> (string * typ) list -> term -> template_term
val lemma2predicate = fn: term -> term -> template
val makeTemplatewithContext = fn: term -> term -> template
val lemma2template = fn: term -> template
val thm2template = fn: thm -> template
val tterm2string = fn: template_term -> string
val template2string = fn: template -> string
val t = "height ?t <= size ?t": thm
val th =
   Const ("HOL.Trueprop", "bool => prop") $
     (Const ("Orderings.ord_class.less_eq", "nat => nat => bool") $
       (Const ("Tree.height_class.height", "?'a tree => nat") $
         Var (("t", 0), "?'a tree")) $
       (Const ("Nat.size_class.size", "?'a tree => nat") $
         Var (("t", 0), "?'a tree"))):
   term
### theory "Draft.Templates"
### 0.071s elapsed time, 0.238s cpu time, 0.000s GC time
### theory "Draft.Environment_Functor"
### 0.087s elapsed time, 0.275s cpu time, 0.000s GC time
### theory "HOL-Library.BigO"
### 0.612s elapsed time, 0.791s cpu time, 0.027s GC time
Loading theory "Draft.ExtrEqs" (required by "Draft.Environment_FunctorTemplates")
val eqpattern =
   Pattern
    (
       Const ("HOL.Trueprop", "bool => prop") $
         (Const ("HOL.eq", "?'a => ?'a => bool") $
           Var (("_dummy_", 1), "?'a") $ Var (("_dummy_", 2), "?'a"))
       ):
   term Find_Theorems.criterion
val badeqpattern = Pattern (Const ("Pure.eq", "?'a => ?'a => prop")):
   term Find_Theorems.criterion
val undefpattern =
   Pattern
    (
       Const ("HOL.Trueprop", "bool => prop") $
         (Const ("HOL.eq", "?'a => ?'a => bool") $
           Var (("_dummy_", 1), "?'a") $ Const ("HOL.undefined", "?'a"))
       ):
   term Find_Theorems.criterion
val thmpattern =
   Pattern
    (Const ("HOL.Trueprop", "bool => prop") $ Var (("_dummy_", 1), "bool")):
   term Find_Theorems.criterion
val badnames =
   ["*nitpick*", "*Nitpick*", "*full_exhaustive*", "*_def*", "Enum.finite*",
    "*Quickcheck*", "ATP*", "*Nunchaku*", "*Code*", "*BNF*", "*SMT*",
    "*.*.*"]:
   string list
val unwanted_names =
   [(false, Name "*nitpick*"), (false, Name "*Nitpick*"),
    (false, Name "*full_exhaustive*"), (false, Name "*_def*"),
    (false, Name "Enum.finite*"), (false, Name "*Quickcheck*"),
    (false, Name "ATP*"), (false, Name "*Nunchaku*"),
    (false, Name "*Code*"), (false, Name "*BNF*"), (false, Name "*SMT*"),
    (false, Name "*.*.*")]:
   (bool * term Find_Theorems.criterion) list
val has_vars = fn: term -> bool
val get_all_eqs = fn: string -> Proof.context -> (string * thm) list
val get_all_thms = fn: string -> Proof.context -> (string * thm) list
val get_noneq_thms = fn: string -> Proof.context -> (string * thm) list
val template_eqs = fn:
   string -> Proof.context -> (string * thm * template) list
val template_thms = fn:
   string -> Proof.context -> (string * thm * template) list
### theory "Draft.ExtrEqs"
### 0.523s elapsed time, 0.576s cpu time, 0.078s GC time
Loading theory "Draft.Environment_FunctorTemplates"
val templateLemmas =
   [("Environment_Functor.const_apply", "pure ?x ?i = ?x",
     template_equation
      (template_app
        (template_app (template_hole 0, template_var 1), template_var 0),
       template_var 1)),
    ("Environment_Functor.all_envirD", "all_envir ?p ==> ?p ?x",
     template_implication
      ([template_predicate
         (template_app (template_hole 0, template_var 1))],
       template_predicate (template_app (template_var 1, template_var 0)))),
    ("Environment_Functor.pred_envirD", "pred_envir ?p ?f ==> ?p (?f ?x)",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 0, template_var 2),
              template_var 1)
            )],
       template_predicate
        (
           template_app
            (template_var 2, template_app (template_var 1, template_var 0))
           ))),
    ("Environment_Functor.all_envirI", "(!!x. ?p x) ==> all_envir ?p",
     template_implication
      ([template_predicate (template_app (template_hole 2, t_empty))],
       template_predicate
        (template_app (template_hole 0, template_var 0)))),
    ("Environment_Functor.ap_envir_apply",
     "Applicative.ap ?f ?x ?i = ?f ?i (?x ?i)",
     template_equation
      (template_app
        (template_app
          (template_app (template_hole 0, template_var 2), template_var 1),
         template_var 0),
       template_app
        (template_app (template_var 2, template_var 0),
         template_app (template_var 1, template_var 0)))),
    ("Environment_Functor.pred_envir_conv",
     "pred_envir ?p ?f = (ALL x. ?p (?f x))",
     template_equation
      (template_app
        (template_app (template_hole 1, template_var 1), template_var 0),
       template_app (template_hole 0, t_empty))),
    ("Environment_Functor.pred_envirI",
     "(!!x. ?p (?f x)) ==> pred_envir ?p ?f",
     template_implication
      ([template_predicate (template_app (template_hole 2, t_empty))],
       template_predicate
        (
           template_app
            (template_app (template_hole 0, template_var 1), template_var 0)
           ))),
    ("Environment_Functor.rel_envirD",
     "rel_envir ?p ?f ?g ==> ?p (?f ?x) (?g ?x)",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app (template_hole 0, template_var 3),
                template_var 2),
              template_var 1)
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_var 3,
               template_app (template_var 2, template_var 0)),
             template_app (template_var 1, template_var 0))
           ))),
    ("Environment_Functor.rel_envir_conv",
     "rel_envir ?p ?f ?g = (ALL x. ?p (?f x) (?g x))",
     template_equation
      (template_app
        (template_app
          (template_app (template_hole 1, template_var 2), template_var 1),
         template_var 0),
       template_app (template_hole 0, t_empty))),
    ("Environment_Functor.all_envirE",
     "[| all_envir ?p; ?p ?x ==> ?thesis |] ==> ?thesis",
     template_implication
      ([template_predicate (template_app (template_hole 0, template_var 2)),
        template_implication
         ([template_predicate
            (template_app (template_var 2, template_var 1))],
          template_predicate (template_var 0))],
       template_predicate (template_var 0))),
    ("Environment_Functor.rel_envirI",
     "(!!x. ?p (?f x) (?g x)) ==> rel_envir ?p ?f ?g",
     template_implication
      ([template_predicate (template_app (template_hole 2, t_empty))],
       template_predicate
        (
           template_app
            (template_app
              (template_app (template_hole 0, template_var 2),
               template_var 1),
             template_var 0)
           ))),
    ("Environment_Functor.pred_envirE",
     "[| pred_envir ?p ?f; ?p (?f ?x) ==> ?thesis |] ==> ?thesis",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 0, template_var 3),
              template_var 2)
            ),
        template_implication
         ([template_predicate
            (
               template_app
                (template_var 3,
                 template_app (template_var 2, template_var 1))
               )],
          template_predicate (template_var 0))],
       template_predicate (template_var 0))),
    ("Environment_Functor.rel_envirE",
     "[| rel_envir ?p ?f ?g; ?p (?f ?x) (?g ?x) ==> ?thesis |] ==> ?thesis",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app (template_hole 0, template_var 4),
                template_var 3),
              template_var 2)
            ),
        template_implication
         ([template_predicate
            (
               template_app
                (template_app
                  (template_var 4,
                   template_app (template_var 3, template_var 1)),
                 template_app (template_var 2, template_var 1))
               )],
          template_predicate (template_var 0))],
       template_predicate (template_var 0))),
    ("Environment_Functor.pred_envir_mono",
     "[| pred_envir ?p ?f; !!x. ?p (?f x) ==> ?q (?g x) |]
      ==> pred_envir ?q ?g",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 2, template_var 3),
              template_var 2)
            ),
        template_predicate (template_app (template_hole 1, t_empty))],
       template_predicate
        (
           template_app
            (template_app (template_hole 0, template_var 1), template_var 0)
           ))),
    ("Environment_Functor.rel_envir_mono1",
     "[| pred_envir ?p ?f; !!x. ?p (?f x) ==> ?q (?f' x) (?g' x) |]
      ==> rel_envir ?q ?f' ?g'",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 2, template_var 4),
              template_var 3)
            ),
        template_predicate (template_app (template_hole 1, t_empty))],
       template_predicate
        (
           template_app
            (template_app
              (template_app (template_hole 0, template_var 2),
               template_var 1),
             template_var 0)
           ))),
    ("Environment_Functor.pred_envir_mono2",
     "[| rel_envir ?p ?f ?g; !!x. ?p (?f x) (?g x) ==> ?q (?f' x) |]
      ==> pred_envir ?q ?f'",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app (template_hole 2, template_var 4),
                template_var 3),
              template_var 2)
            ),
        template_predicate (template_app (template_hole 1, t_empty))],
       template_predicate
        (
           template_app
            (template_app (template_hole 0, template_var 1), template_var 0)
           ))),
    ("Environment_Functor.rel_envir_mono",
     "[| rel_envir ?p ?f ?g; !!x. ?p (?f x) (?g x) ==> ?q (?f' x) (?g' x) |]
      ==> rel_envir ?q ?f' ?g'",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app (template_hole 2, template_var 5),
                template_var 4),
              template_var 3)
            ),
        template_predicate (template_app (template_hole 1, t_empty))],
       template_predicate
        (
           template_app
            (template_app
              (template_app (template_hole 0, template_var 2),
               template_var 1),
             template_var 0)
           )))]:
   (string * thm * template) list
### theory "Draft.Environment_FunctorTemplates"
### 0.271s elapsed time, 0.361s cpu time, 0.000s GC time
val it = (): unit
