   [("Miscellaneous.finite_columns", "finite (columns ?A)",
     template_predicate
      (
         template_app
          (template_hole 1, template_app (template_hole 0, template_var 0))
         )),
    ("Miscellaneous.finite_rows", "finite (rows ?A)",
     template_predicate
      (
         template_app
          (template_hole 1, template_app (template_hole 0, template_var 0))
         )),
    ("Miscellaneous.ncols_not_0", "0 ~= ncols ?A",
     template_negation
      (
         template_equation
          (template_hole 1, template_app (template_hole 0, template_var 0))
         )),
    ("Miscellaneous.nrows_not_0", "0 ~= nrows ?A",
     template_negation
      (
         template_equation
          (template_hole 1, template_app (template_hole 0, template_var 0))
         )),
    ("Miscellaneous.ncols_transpose",
     "ncols (Finite_Cartesian_Product.transpose ?A) = nrows ?A",
     template_equation
      (template_app
        (template_hole 2, template_app (template_hole 1, template_var 0)),
       template_app (template_hole 0, template_var 0))),
    ("Miscellaneous.nrows_transpose",
     "nrows (Finite_Cartesian_Product.transpose ?A) = ncols ?A",
     template_equation
      (template_app
        (template_hole 2, template_app (template_hole 1, template_var 0)),
       template_app (template_hole 0, template_var 0))),
    ("Miscellaneous.basis_finite", "is_basis ?B ==> finite ?B",
     template_implication
      ([template_predicate
         (template_app (template_hole 1, template_var 0))],
       template_predicate
        (template_app (template_hole 0, template_var 0)))),
    ("Miscellaneous.transpose_zero",
     "(Finite_Cartesian_Product.transpose ?A = 0) = (?A = 0)",
     template_bimplication
      (template_equation
        (template_app (template_hole 3, template_var 0), template_hole 2),
       template_equation (template_var 0, template_hole 0))),
    ("Miscellaneous.transpose_vector",
     "?x v* ?A = Finite_Cartesian_Product.transpose ?A *v ?x",
     template_equation
      (template_app
        (template_app (template_hole 2, template_var 1), template_var 0),
       template_app
        (template_app
          (template_hole 1, template_app (template_hole 0, template_var 0)),
         template_var 1))),
    ("Miscellaneous.transpose_scalar",
     "Finite_Cartesian_Product.transpose (?k *k ?A) =
      ?k *k Finite_Cartesian_Product.transpose ?A",
     template_equation
      (template_app
        (template_hole 2,
         template_app
          (template_app (template_hole 1, template_var 1), template_var 0)),
       template_app
        (template_app (template_hole 0, template_var 1),
         template_app (template_hole 2, template_var 0)))),
    ("Miscellaneous.card_finite", "card ?S = CARD(?'n) ==> finite ?S",
     template_implication
      ([template_equation
         (template_app (template_hole 3, template_var 0),
          template_app (template_hole 2, template_hole 1))],
       template_predicate
        (template_app (template_hole 0, template_var 0)))),
    ("Miscellaneous.vector_scalar_matrix_ac",
     "?x v* (?k *k ?A) = ?k *s (?x v* ?A)",
     template_equation
      (template_app
        (template_app (template_hole 2, template_var 2),
         template_app
          (template_app (template_hole 1, template_var 1), template_var 0)),
       template_app
        (template_app (template_hole 0, template_var 1),
         template_app
          (template_app (template_hole 2, template_var 2),
           template_var 0)))),
    ("Miscellaneous.matrix_scalar_vector_ac",
     "?A *v (?k *s ?v) = ?k *k ?A *v ?v",
     template_equation
      (template_app
        (template_app (template_hole 2, template_var 2),
         template_app
          (template_app (template_hole 1, template_var 1), template_var 0)),
       template_app
        (template_app
          (template_hole 2,
           template_app
            (template_app (template_hole 0, template_var 1),
             template_var 2)),
         template_var 0))),
    ("Miscellaneous.scalar_matrix_vector_assoc",
     "?k *s (?A *v ?v) = ?k *k ?A *v ?v",
     template_equation
      (template_app
        (template_app (template_hole 2, template_var 2),
         template_app
          (template_app (template_hole 1, template_var 1), template_var 0)),
       template_app
        (template_app
          (template_hole 1,
           template_app
            (template_app (template_hole 0, template_var 2),
             template_var 1)),
         template_var 0))),
    ("Miscellaneous.column_matrix_matrix_mult",
     "column ?i (?P ** ?A) = ?P *v column ?i ?A",
     template_equation
      (template_app
        (template_app (template_hole 3, template_var 2),
         template_app
          (template_app (template_hole 2, template_var 1), template_var 0)),
       template_app
        (template_app (template_hole 1, template_var 1),
         template_app
          (template_app (template_hole 0, template_var 2),
           template_var 0)))),
    ("Miscellaneous.row_matrix_matrix_mult'",
     "row ?i ?P v* ?A = row ?i (?P ** ?A)",
     template_equation
      (template_app
        (template_app
          (template_hole 3,
           template_app
            (template_app (template_hole 2, template_var 2),
             template_var 1)),
         template_var 0),
       template_app
        (template_app (template_hole 1, template_var 2),
         template_app
          (template_app (template_hole 0, template_var 1),
           template_var 0)))),
    ("Miscellaneous.row_matrix_matrix_mult",
     "?P $ ?i v* ?A = (?P ** ?A) $ ?i",
     template_equation
      (template_app
        (template_app
          (template_hole 3,
           template_app
            (template_app (template_hole 2, template_var 2),
             template_var 1)),
         template_var 0),
       template_app
        (template_app
          (template_hole 1,
           template_app
            (template_app (template_hole 0, template_var 2),
             template_var 0)),
         template_var 1))),
    ("Miscellaneous.matrix_inv_left",
     "invertible ?M ==> matrix_inv ?M ** ?M = mat (1::?'a)",
     template_implication
      ([template_predicate
         (template_app (template_hole 5, template_var 0))],
       template_equation
        (template_app
          (template_app
            (template_hole 3,
             template_app (template_hole 2, template_var 0)),
           template_var 0),
         template_app (template_hole 1, template_hole 0)))),
    ("Miscellaneous.matrix_inv_right",
     "invertible ?M ==> ?M ** matrix_inv ?M = mat (1::?'a)",
     template_implication
      ([template_predicate
         (template_app (template_hole 5, template_var 0))],
       template_equation
        (template_app
          (template_app (template_hole 3, template_var 0),
           template_app (template_hole 2, template_var 0)),
         template_app (template_hole 1, template_hole 0)))),
    ("Miscellaneous.independent_is_basis",
     "(vec.independent ?B & card ?B = CARD(?'n)) = is_basis ?B",
     template_equation
      (template_app
        (template_app
          (template_hole 8,
           template_app
            (template_hole 7,
             template_app
              (template_app (template_hole 6, template_hole 5),
               template_var 0))),
         template_app
          (template_app
            (template_hole 4,
             template_app (template_hole 3, template_var 0)),
           template_app (template_hole 2, template_hole 1))),
       template_app (template_hole 0, template_var 0))),
    ("Miscellaneous.matrix_vmult_column_sum",
     "EX f. ?A *v ?x = (SUM y:columns ?A. f y *s y)",
     template_predicate (template_app (template_hole 5, t_empty))),
    ("Miscellaneous.snd_if_conv",
     "snd (if ?P then (?A, ?B) else (?C, ?D)) = (if ?P then ?B else ?D)",
     template_equation
      (template_app
        (template_hole 3,
         template_app
          (template_app
            (template_app (template_hole 2, template_var 4),
             template_app
              (template_app (template_hole 1, template_var 3),
               template_var 2)),
           template_app
            (template_app (template_hole 1, template_var 1),
             template_var 0))),
       template_app
        (template_app
          (template_app (template_hole 0, template_var 4), template_var 2),
         template_var 0))),
    ("Miscellaneous.matrix_matrix_mult_inner_mult",
     "(?A ** ?B) $ ?i $ ?j = row ?i ?A \<bullet> column ?j ?B",
     template_equation
      (template_app
        (template_app
          (template_hole 5,
           template_app
            (template_app
              (template_hole 4,
               template_app
                (template_app (template_hole 3, template_var 3),
                 template_var 2)),
             template_var 1)),
         template_var 0),
       template_app
        (template_app
          (template_hole 2,
           template_app
            (template_app (template_hole 1, template_var 1),
             template_var 3)),
         template_app
          (template_app (template_hole 0, template_var 0),
           template_var 2)))),
    ("Miscellaneous.matrix_vector_mult_zero_eq",
     "invertible ?P ==> (?P ** ?A *v ?x = 0) = (?A *v ?x = 0)",
     template_implication
      ([template_predicate
         (template_app (template_hole 8, template_var 2))],
       template_bimplication
        (template_equation
          (template_app
            (template_app
              (template_hole 5,
               template_app
                (template_app (template_hole 4, template_var 2),
                 template_var 1)),
             template_var 0),
           template_hole 3),
         template_equation
          (template_app
            (template_app (template_hole 1, template_var 1),
             template_var 0),
           template_hole 0)))),
    ("Miscellaneous.independent_image_matrix_vector_mult",
     "[| vec.independent ?B; invertible ?P |]
      ==> vec.independent ((*v) ?P ` ?B)",
     template_implication
      ([template_negation
         (
            template_predicate
             (
                template_app
                 (template_app (template_hole 6, template_hole 5),
                  template_var 1)
                )
            ),
        template_predicate
         (template_app (template_hole 4, template_var 0))],
       template_negation
        (
           template_predicate
            (
               template_app
                (template_app (template_hole 3, template_hole 2),
                 template_app
                  (template_app
                    (template_hole 1,
                     template_app (template_hole 0, template_var 0)),
                   template_var 1))
               )
           ))),
    ("Miscellaneous.independent_preimage_matrix_vector_mult",
     "[| vec.independent ((*v) ?P ` ?B); invertible ?P |]
      ==> vec.independent ?B",
     template_implication
      ([template_negation
         (
            template_predicate
             (
                template_app
                 (template_app (template_hole 4, template_hole 3),
                  template_app
                   (template_app
                     (template_hole 2,
                      template_app (template_hole 1, template_var 1)),
                    template_var 0))
                )
            ),
        template_predicate
         (template_app (template_hole 0, template_var 1))],
       template_negation
        (
           template_predicate
            (
               template_app
                (template_app (template_hole 4, template_hole 3),
                 template_var 0)
               )
           ))),
    ("Miscellaneous.matrix_inv_unique",
     "[| ?A ** ?B = mat (1::?'a); ?B ** ?A = mat (1::?'a) |]
      ==> matrix_inv ?A = ?B",
     template_implication
      ([template_equation
         (template_app
           (template_app (template_hole 3, template_var 1), template_var 0),
          template_app (template_hole 2, template_hole 1)),
        template_equation
         (template_app
           (template_app (template_hole 3, template_var 0), template_var 1),
          template_app (template_hole 2, template_hole 1))],
       template_equation
        (template_app (template_hole 0, template_var 1), template_var 0)))]
