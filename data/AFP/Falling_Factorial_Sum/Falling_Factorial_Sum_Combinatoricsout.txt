Loading theory "HOL-Eisbach.Eisbach" (required by "Draft.Falling_Factorial_Sum_CombinatoricsMoreTemplates" via "Draft.Falling_Factorial_Sum_Combinatorics" via "Card_Partitions.Injectivity_Solver")
Loading theory "HOL-Combinatorics.Stirling" (required by "Draft.Falling_Factorial_Sum_CombinatoricsMoreTemplates" via "Draft.Falling_Factorial_Sum_Combinatorics" via "Discrete_Summation.Factorials")
Loading theory "HOL-Library.Adhoc_Overloading" (required by "Draft.Falling_Factorial_Sum_CombinatoricsMoreTemplates" via "Draft.Falling_Factorial_Sum_Combinatorics" via "Card_Partitions.Injectivity_Solver" via "HOL-Library.Monad_Syntax")
Loading theory "HOL-Library.FuncSet" (required by "Draft.Falling_Factorial_Sum_CombinatoricsMoreTemplates" via "Draft.Falling_Factorial_Sum_Combinatorics" via "Card_Partitions.Injectivity_Solver" via "HOL-Library.Disjoint_Sets")
signature PARSE_TOOLS =
  sig
    val is_real_val: ('a, 'b) parse_val -> bool
    val name_term: (term, string) parse_val parser
    val parse_term_val: 'a parser -> (term, 'a) parse_val parser
    val parse_thm_val: 'a parser -> (thm, 'a) parse_val parser
    datatype ('a, 'b) parse_val
    = Parse_Val of 'b * ('a -> unit) | Real_Val of 'a
    val parse_val_cases:
       ('a -> 'b) -> ('b, 'a) parse_val -> 'b * ('b -> unit)
    val the_parse_fun: ('a, 'b) parse_val -> 'a -> unit
    val the_parse_val: ('a, 'b) parse_val -> 'b
    val the_real_val: ('a, 'b) parse_val -> 'a
  end
structure Parse_Tools: PARSE_TOOLS
signature METHOD_CLOSURE =
  sig
    val apply_method:
       Proof.context ->
         string ->
           term list ->
             thm list list ->
               (Proof.context -> Method.method) list ->
                 Proof.context -> thm list -> context_tactic
    val method:
       binding ->
         (binding * typ option * mixfix) list ->
           binding list ->
             binding list ->
               binding list ->
                 Token.src -> local_theory -> string * local_theory
    val method_cmd:
       binding ->
         (binding * string option * mixfix) list ->
           binding list ->
             binding list ->
               binding list ->
                 Token.src -> local_theory -> string * local_theory
  end
structure Method_Closure: METHOD_CLOSURE
signature ADHOC_OVERLOADING =
  sig
    val generic_add_overloaded: string -> Context.generic -> Context.generic
    val generic_add_variant:
       string -> term -> Context.generic -> Context.generic
    val generic_remove_overloaded:
       string -> Context.generic -> Context.generic
    val generic_remove_variant:
       string -> term -> Context.generic -> Context.generic
    val is_overloaded: Proof.context -> string -> bool
    val show_variants: bool Config.T
  end
structure Adhoc_Overloading: ADHOC_OVERLOADING
### theory "HOL-Library.Adhoc_Overloading"
### 0.100s elapsed time, 0.377s cpu time, 0.029s GC time
Loading theory "HOL-Library.Monad_Syntax" (required by "Draft.Falling_Factorial_Sum_CombinatoricsMoreTemplates" via "Draft.Falling_Factorial_Sum_Combinatorics" via "Card_Partitions.Injectivity_Solver")
Found termination order:
  "(%p. size (snd p)) <*mlex*> (%p. size (fst p)) <*mlex*> {}"
### theory "HOL-Library.Monad_Syntax"
### 0.046s elapsed time, 0.181s cpu time, 0.000s GC time
Loading theory "HOL-Library.Function_Algebras" (required by "Draft.Falling_Factorial_Sum_CombinatoricsMoreTemplates" via "Draft.ExtrEqs" via "HOL-Library.BigO")
structure Eisbach_Rule_Insts: sig end
Found termination order:
  "(%p. size (snd p)) <*mlex*> (%p. size (fst p)) <*mlex*> {}"
instantiation
  fun :: (type, plus) plus
  plus_fun == plus :: ('a => 'b) => ('a => 'b) => 'a => 'b
instantiation
  fun :: (type, zero) zero
  zero_fun == zero_class.zero :: 'a => 'b
instantiation
  fun :: (type, times) times
  times_fun == times :: ('a => 'b) => ('a => 'b) => 'a => 'b
instantiation
  fun :: (type, one) one
  one_fun == one_class.one :: 'a => 'b
consts
  stirling_row_aux :: "'a => 'a => 'a list => 'a list"
### theory "HOL-Combinatorics.Stirling"
### 0.270s elapsed time, 1.048s cpu time, 0.098s GC time
Loading theory "HOL-Library.Nat_Bijection" (required by "Draft.Falling_Factorial_Sum_CombinatoricsMoreTemplates" via "Draft.ExtrEqs" via "HOL-Library.Stream")
### theory "HOL-Library.Function_Algebras"
### 0.165s elapsed time, 0.642s cpu time, 0.069s GC time
Loading theory "HOL-Library.Set_Algebras" (required by "Draft.Falling_Factorial_Sum_CombinatoricsMoreTemplates" via "Draft.ExtrEqs" via "HOL-Library.BigO")
Found termination order: "(%p. size (snd p)) <*mlex*> {}"
instantiation
  set :: (plus) plus
  plus_set == plus :: 'a set => 'a set => 'a set
### ML warning (line 170 of "~~/src/HOL/Eisbach/match_method.ML"):
### Pattern is not exhaustive.
### ML warning (line 187 of "~~/src/HOL/Eisbach/match_method.ML"):
### Pattern is not exhaustive.
### ML warning (line 309 of "~~/src/HOL/Eisbach/match_method.ML"):
### Pattern is not exhaustive.
signature MATCH_METHOD =
  sig
    val focus_params: Proof.context -> term list
    val focus_schematics: Proof.context -> Envir.tenv
  end
structure Match_Method: MATCH_METHOD
instantiation
  set :: (times) times
  times_set == times :: 'a set => 'a set => 'a set
instantiation
  set :: (zero) zero
  zero_set == zero_class.zero :: 'a set
val method_evaluate = fn: Method.text -> Proof.context -> thm list -> tactic
instantiation
  set :: (one) one
  one_set == one_class.one :: 'a set
### theory "HOL-Eisbach.Eisbach"
### 0.425s elapsed time, 1.657s cpu time, 0.166s GC time
Loading theory "HOL-Library.Tree" (required by "Draft.Falling_Factorial_Sum_CombinatoricsMoreTemplates" via "Draft.ExtrEqs" via "Draft.Templates")
Found termination order: "size_list size <*mlex*> {}"
### theory "HOL-Library.FuncSet"
### 0.472s elapsed time, 1.885s cpu time, 0.166s GC time
Loading theory "HOL-Library.Disjoint_Sets" (required by "Draft.Falling_Factorial_Sum_CombinatoricsMoreTemplates" via "Draft.Falling_Factorial_Sum_Combinatorics" via "Card_Partitions.Injectivity_Solver")
### theory "HOL-Library.Set_Algebras"
### 0.228s elapsed time, 0.931s cpu time, 0.151s GC time
Loading theory "Discrete_Summation.Factorials" (required by "Draft.Falling_Factorial_Sum_CombinatoricsMoreTemplates" via "Draft.Falling_Factorial_Sum_Combinatorics")
### theory "HOL-Library.Nat_Bijection"
### 0.298s elapsed time, 1.204s cpu time, 0.151s GC time
Loading theory "HOL-Library.Stream" (required by "Draft.Falling_Factorial_Sum_CombinatoricsMoreTemplates" via "Draft.ExtrEqs")
locale comm_monoid_set
  fixes f :: "'a => 'a => 'a"  (infixl \<open>\<^bold>*\<close> 70)
    and z :: "'a"  (\<open>\<^bold>1\<close>)
  assumes "comm_monoid_set (\<^bold>*) \<^bold>1"
### theory "HOL-Library.Disjoint_Sets"
### 0.283s elapsed time, 1.110s cpu time, 0.186s GC time
Loading theory "Card_Partitions.Injectivity_Solver" (required by "Draft.Falling_Factorial_Sum_CombinatoricsMoreTemplates" via "Draft.Falling_Factorial_Sum_Combinatorics")
### theory "Discrete_Summation.Factorials"
### 0.306s elapsed time, 1.204s cpu time, 0.104s GC time
Loading theory "HOL-Library.BigO" (required by "Draft.Falling_Factorial_Sum_CombinatoricsMoreTemplates" via "Draft.ExtrEqs")
consts
  left :: "'a tree => 'a tree"
consts
  right :: "'a tree => 'a tree"
consts
  shift :: "'a list => 'a stream => 'a stream"
Proofs for coinductive predicate(s) "streamsp"
  Proving monotonicity ...
Found termination order: "size <*mlex*> {}"
consts
  snth :: "'a stream => nat => 'a"
Found termination order: "size <*mlex*> {}"
consts
  stake :: "nat => 'a stream => 'a list"
consts
  sdrop :: "nat => 'a stream => 'a stream"
### theory "Card_Partitions.Injectivity_Solver"
### 0.589s elapsed time, 2.129s cpu time, 0.613s GC time
Loading theory "Draft.Falling_Factorial_Sum_Combinatorics" (required by "Draft.Falling_Factorial_Sum_CombinatoricsMoreTemplates")
Found termination order: "size <*mlex*> {}"
consts
  sfilter :: "('a => bool) => 'a stream => 'a stream"
class height = type +
  fixes height :: "'a => nat"
instantiation
  tree :: (type) height
  height_tree == height :: 'a tree => nat
consts
  cycle :: "'a list => 'a stream"
Found termination order: "size <*mlex*> {}"
consts
  siterate :: "('a => 'a) => 'a => 'a stream"
consts
  flat :: "'a list stream => 'a stream"
Found termination order: "size <*mlex*> {}"
consts
  sinterleave :: "'a stream => 'a stream => 'a stream"
Found termination order: "size <*mlex*> {}"
consts
  szip :: "'a stream => 'b stream => ('a * 'b) stream"
consts
  smap2 :: "('a => 'b => 'c) => 'a stream => 'b stream => 'c stream"
Proofs for inductive predicate(s) "interleavings"
  Proving monotonicity ...
### theory "HOL-Library.Stream"
### 1.127s elapsed time, 4.256s cpu time, 0.878s GC time
Found termination order: "size <*mlex*> {}"
Found termination order: "size <*mlex*> {}"
### theory "Draft.Falling_Factorial_Sum_Combinatorics"
### 0.470s elapsed time, 1.770s cpu time, 0.263s GC time
Found termination order: "size <*mlex*> {}"
### theory "HOL-Library.BigO"
### 1.025s elapsed time, 3.670s cpu time, 0.875s GC time
Found termination order: "size <*mlex*> {}"
Found termination order: "(%p. size (fst p)) <*mlex*> {}"
Found termination order: "size <*mlex*> {}"
Found termination order: "(%p. size (snd p)) <*mlex*> {}"
Found termination order: "size <*mlex*> {}"
### theory "HOL-Library.Tree"
### 1.994s elapsed time, 6.046s cpu time, 1.197s GC time
Loading theory "Draft.Templates" (required by "Draft.Falling_Factorial_Sum_CombinatoricsMoreTemplates" via "Draft.ExtrEqs")
datatype template_term
=
     t_empty
   | template_app of template_term * template_term
   | template_hole of int
   | template_var of int
datatype sign
= equals | greater_equals | greater_than | less_equals | less_than
datatype template
=
     template_bimplication of template * template
   | template_dunno
   | template_equation of template_term * template_term
   | template_implication of template list * template
   | template_inequation of sign * template_term * template_term
   | template_negation of template
   | template_predicate of template_term
constructor t_empty: template_term
constructor template_app: template_term * template_term -> template_term
constructor template_hole: int -> template_term
constructor template_var: int -> template_term
constructor equals: sign
constructor greater_equals: sign
constructor greater_than: sign
constructor less_equals: sign
constructor less_than: sign
constructor template_bimplication: template * template -> template
constructor template_dunno: template
constructor template_equation: template_term * template_term -> template
constructor template_implication: template list * template -> template
constructor template_inequation:
   sign * template_term * template_term -> template
constructor template_negation: template -> template
constructor template_predicate: template_term -> template
val vfs = fn: term -> (indexname * typ) list * (string * typ) list
val indexOf = fn: ''a list -> ''a -> int -> int
val has_eq = fn: term -> bool
val term2template = fn:
   (indexname * typ) list -> (string * typ) list -> term -> template_term
val lemma2predicate = fn: term -> term -> template
val makeTemplatewithContext = fn: term -> term -> template
val lemma2template = fn: term -> template
val thm2template = fn: thm -> template
val tterm2string = fn: template_term -> string
val template2string = fn: template -> string
val t = "height ?t <= size ?t": thm
val th =
   Const ("HOL.Trueprop", "bool => prop") $
     (Const ("Orderings.ord_class.less_eq", "nat => nat => bool") $
       (Const ("Tree.height_class.height", "?'a tree => nat") $
         Var (("t", 0), "?'a tree")) $
       (Const ("Nat.size_class.size", "?'a tree => nat") $
         Var (("t", 0), "?'a tree"))):
   term
### theory "Draft.Templates"
### 0.047s elapsed time, 0.064s cpu time, 0.000s GC time
Loading theory "Draft.ExtrEqs" (required by "Draft.Falling_Factorial_Sum_CombinatoricsMoreTemplates")
val eqpattern =
   Pattern
    (
       Const ("HOL.Trueprop", "bool => prop") $
         (Const ("HOL.eq", "?'a => ?'a => bool") $
           Var (("_dummy_", 1), "?'a") $ Var (("_dummy_", 2), "?'a"))
       ):
   term Find_Theorems.criterion
val badeqpattern = Pattern (Const ("Pure.eq", "?'a => ?'a => prop")):
   term Find_Theorems.criterion
val undefpattern =
   Pattern
    (
       Const ("HOL.Trueprop", "bool => prop") $
         (Const ("HOL.eq", "?'a => ?'a => bool") $
           Var (("_dummy_", 1), "?'a") $ Const ("HOL.undefined", "?'a"))
       ):
   term Find_Theorems.criterion
val thmpattern =
   Pattern
    (Const ("HOL.Trueprop", "bool => prop") $ Var (("_dummy_", 1), "bool")):
   term Find_Theorems.criterion
val badnames =
   ["*nitpick*", "*Nitpick*", "*full_exhaustive*", "*_def*", "Enum.finite*",
    "*Quickcheck*", "ATP*", "*Nunchaku*", "*Code*", "*BNF*", "*SMT*",
    "*.*.*"]:
   string list
val unwanted_names =
   [(false, Name "*nitpick*"), (false, Name "*Nitpick*"),
    (false, Name "*full_exhaustive*"), (false, Name "*_def*"),
    (false, Name "Enum.finite*"), (false, Name "*Quickcheck*"),
    (false, Name "ATP*"), (false, Name "*Nunchaku*"),
    (false, Name "*Code*"), (false, Name "*BNF*"), (false, Name "*SMT*"),
    (false, Name "*.*.*")]:
   (bool * term Find_Theorems.criterion) list
val has_vars = fn: term -> bool
val get_all_eqs = fn: string -> Proof.context -> (string * thm) list
val get_all_thms = fn: string -> Proof.context -> (string * thm) list
val get_noneq_thms = fn: string -> Proof.context -> (string * thm) list
val template_eqs = fn:
   string -> Proof.context -> (string * thm * template) list
val template_thms = fn:
   string -> Proof.context -> (string * thm * template) list
### theory "Draft.ExtrEqs"
### 0.476s elapsed time, 0.531s cpu time, 0.069s GC time
Loading theory "Draft.Falling_Factorial_Sum_CombinatoricsMoreTemplates"
val templateLemmas =
   [("Falling_Factorial_Sum_Combinatorics.finite_interleavings",
     "finite {zs. interleavings ?xs ?ys zs}",
     template_predicate
      (
         template_app
          (template_hole 2, template_app (template_hole 1, t_empty))
         )),
    ("Falling_Factorial_Sum_Combinatorics.interleaving_Nil_iff1",
     "interleavings [] ?ys ?zs = (?ys = ?zs)",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app (template_hole 2, template_hole 1),
                template_var 1),
              template_var 0)
            )],
       template_equation (template_var 1, template_var 0))),
    ("Falling_Factorial_Sum_Combinatorics.interleaving_Nil_iff2",
     "interleavings ?xs [] ?zs = (?xs = ?zs)",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app (template_hole 2, template_var 1),
                template_hole 1),
              template_var 0)
            )],
       template_equation (template_var 1, template_var 0))),
    ("Falling_Factorial_Sum_Combinatorics.interleavings_length",
     "interleavings ?xs ?ys ?zs ==> length ?xs + length ?ys = length ?zs",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app (template_hole 3, template_var 2),
                template_var 1),
              template_var 0)
            )],
       template_equation
        (template_app
          (template_app
            (template_hole 1,
             template_app (template_hole 0, template_var 2)),
           template_app (template_hole 0, template_var 1)),
         template_app (template_hole 0, template_var 0)))),
    ("Falling_Factorial_Sum_Combinatorics.interleavings_set",
     "interleavings ?xs ?ys ?zs ==> set ?xs Un set ?ys = set ?zs",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app (template_hole 3, template_var 2),
                template_var 1),
              template_var 0)
            )],
       template_equation
        (template_app
          (template_app
            (template_hole 1,
             template_app (template_hole 0, template_var 2)),
           template_app (template_hole 0, template_var 1)),
         template_app (template_hole 0, template_var 0)))),
    ("Falling_Factorial_Sum_Combinatorics.interleaving_Nil_implies_eq1",
     "[| interleavings ?xs ?ys ?zs; ?xs = [] |] ==> ?ys = ?zs",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app (template_hole 2, template_var 2),
                template_var 1),
              template_var 0)
            ),
        template_equation (template_var 2, template_hole 0)],
       template_equation (template_var 1, template_var 0))),
    ("Falling_Factorial_Sum_Combinatorics.interleaving_Nil_implies_eq2",
     "[| interleavings ?xs ?ys ?zs; ?ys = [] |] ==> ?xs = ?zs",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app (template_hole 2, template_var 2),
                template_var 1),
              template_var 0)
            ),
        template_equation (template_var 1, template_hole 0)],
       template_equation (template_var 2, template_var 0))),
    ("Falling_Factorial_Sum_Combinatorics.interleavings_distinct",
     "interleavings ?xs ?ys ?zs ==>
      (distinct ?xs & distinct ?ys & set ?xs Int set ?ys = {}) =
      distinct ?zs",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app (template_hole 7, template_var 2),
                template_var 1),
              template_var 0)
            )],
       template_equation
        (template_app
          (template_app
            (template_hole 5,
             template_app (template_hole 4, template_var 2)),
           template_app
            (template_app
              (template_hole 5,
               template_app (template_hole 4, template_var 1)),
             template_app
              (template_app
                (template_hole 3,
                 template_app
                  (template_app
                    (template_hole 2,
                     template_app (template_hole 1, template_var 2)),
                   template_app (template_hole 1, template_var 1))),
               template_hole 0))),
         template_app (template_hole 4, template_var 0)))),
    ("Falling_Factorial_Sum_Combinatorics.card_lists_distinct_length_eq",
     "finite ?A ==>
      card {xs. length xs = ?n & distinct xs & set xs <= ?A} =
      ffact ?n (card ?A)",
     template_implication
      ([template_predicate
         (template_app (template_hole 10, template_var 1))],
       template_equation
        (template_app
          (template_hole 8, template_app (template_hole 7, t_empty)),
         template_app
          (template_app (template_hole 1, template_var 0),
           template_app (template_hole 0, template_var 1))))),
    ("Falling_Factorial_Sum_Combinatorics.card_interleavings",
     "set ?xs Int set ?ys = {} ==>
      card {zs. interleavings ?xs ?ys zs} =
      length ?xs + length ?ys choose length ?xs",
     template_implication
      ([template_equation
         (template_app
           (template_app
             (template_hole 9,
              template_app (template_hole 8, template_var 1)),
            template_app (template_hole 8, template_var 0)),
          template_hole 7)],
       template_equation
        (template_app
          (template_hole 5, template_app (template_hole 4, t_empty)),
         template_app
          (template_app
            (template_hole 2,
             template_app
              (template_app
                (template_hole 1,
                 template_app (template_hole 0, template_var 1)),
               template_app (template_hole 0, template_var 0))),
           template_app (template_hole 0, template_var 1))))),
    ("Falling_Factorial_Sum_Combinatorics.interleavings_filter_eq1",
     "[| interleavings ?xs ?ys ?zs;
         (ALL x:set ?xs. ?P x) & (ALL y:set ?ys. ~ ?P y) |]
      ==> filter ?P ?zs = ?xs",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app (template_hole 6, template_var 3),
                template_var 2),
              template_var 1)
            ),
        template_predicate
         (
            template_app
             (template_app
               (template_hole 5,
                template_app
                 (template_app
                   (template_hole 4,
                    template_app (template_hole 3, template_var 3)),
                  t_empty)),
              template_app
               (template_app
                 (template_hole 4,
                  template_app (template_hole 3, template_var 2)),
                t_empty))
            )],
       template_equation
        (template_app
          (template_app (template_hole 0, template_var 0), template_var 1),
         template_var 3))),
    ("Falling_Factorial_Sum_Combinatorics.interleavings_filter_eq2",
     "[| interleavings ?xs ?ys ?zs;
         (ALL x:set ?xs. ~ ?P x) & (ALL y:set ?ys. ?P y) |]
      ==> filter ?P ?zs = ?ys",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app (template_hole 6, template_var 3),
                template_var 2),
              template_var 1)
            ),
        template_predicate
         (
            template_app
             (template_app
               (template_hole 5,
                template_app
                 (template_app
                   (template_hole 4,
                    template_app (template_hole 3, template_var 3)),
                  t_empty)),
              template_app
               (template_app
                 (template_hole 4,
                  template_app (template_hole 3, template_var 2)),
                t_empty))
            )],
       template_equation
        (template_app
          (template_app (template_hole 0, template_var 0), template_var 1),
         template_var 2))),
    ("Falling_Factorial_Sum_Combinatorics.interleavings_filter",
     "[| ?X Int ?Y = {}; set ?zs <= ?X Un ?Y |]
      ==> interleavings (filter (%z. z : ?X) ?zs) (filter (%z. z : ?Y) ?zs)
           ?zs",
     template_implication
      ([template_equation
         (template_app
           (template_app (template_hole 7, template_var 2), template_var 1),
          template_hole 6),
        template_inequation
         (less_equals, template_app (template_hole 4, template_var 0),
          template_app
           (template_app (template_hole 3, template_var 2),
            template_var 1))],
       template_predicate
        (
           template_app
            (template_app
              (template_app
                (template_hole 2,
                 template_app
                  (template_app (template_hole 1, t_empty),
                   template_var 0)),
               template_app
                (template_app (template_hole 1, t_empty), template_var 0)),
             template_var 0)
           ))),
    ("Falling_Factorial_Sum_Combinatorics.interleavings_inject",
     "[| (set ?xs Un set ?xs') Int (set ?ys Un set ?ys') = {};
         interleavings ?xs ?ys ?zs; interleavings ?xs' ?ys' ?zs';
         ?zs = ?zs' |]
      ==> ?xs = ?xs'",
     template_implication
      ([template_equation
         (template_app
           (template_app
             (template_hole 5,
              template_app
               (template_app
                 (template_hole 4,
                  template_app (template_hole 3, template_var 5)),
                template_app (template_hole 3, template_var 4))),
            template_app
             (template_app
               (template_hole 4,
                template_app (template_hole 3, template_var 3)),
              template_app (template_hole 3, template_var 2))),
          template_hole 2),
        template_predicate
         (
            template_app
             (template_app
               (template_app (template_hole 1, template_var 5),
                template_var 3),
              template_var 1)
            ),
        template_predicate
         (
            template_app
             (template_app
               (template_app (template_hole 1, template_var 4),
                template_var 2),
              template_var 0)
            ),
        template_equation (template_var 1, template_var 0)],
       template_equation (template_var 5, template_var 4))),
    ("Falling_Factorial_Sum_Combinatorics.interleavings_inject",
     "[| (set ?xs Un set ?xs') Int (set ?ys Un set ?ys') = {};
         interleavings ?xs ?ys ?zs; interleavings ?xs' ?ys' ?zs';
         ?zs = ?zs' |]
      ==> ?ys = ?ys'",
     template_implication
      ([template_equation
         (template_app
           (template_app
             (template_hole 5,
              template_app
               (template_app
                 (template_hole 4,
                  template_app (template_hole 3, template_var 5)),
                template_app (template_hole 3, template_var 4))),
            template_app
             (template_app
               (template_hole 4,
                template_app (template_hole 3, template_var 3)),
              template_app (template_hole 3, template_var 2))),
          template_hole 2),
        template_predicate
         (
            template_app
             (template_app
               (template_app (template_hole 1, template_var 5),
                template_var 3),
              template_var 1)
            ),
        template_predicate
         (
            template_app
             (template_app
               (template_app (template_hole 1, template_var 4),
                template_var 2),
              template_var 0)
            ),
        template_equation (template_var 1, template_var 0)],
       template_equation (template_var 3, template_var 2))),
    ("Falling_Factorial_Sum_Combinatorics.interleavings_Cons",
     "{zs. interleavings (?x # ?xs) (?y # ?ys) zs} =
      {?x # zs |zs. interleavings ?xs (?y # ?ys) zs} Un
      {?y # zs |zs. interleavings (?x # ?xs) ?ys zs}",
     template_equation
      (template_app (template_hole 6, t_empty),
       template_app
        (template_app
          (template_hole 3, template_app (template_hole 6, t_empty)),
         template_app (template_hole 6, t_empty)))),
    ("Falling_Factorial_Sum_Combinatorics.two_mutual_lists_induction",
     "[| !!ys. ?P [] ys; !!xs. ?P xs [];
         !!x xs y ys.
            [| ?P xs (y # ys); ?P (x # xs) ys |] ==> ?P (x # xs) (y # ys) |]
      ==> ?P ?xs ?ys",
     template_implication
      ([template_predicate (template_app (template_hole 8, t_empty)),
        template_predicate (template_app (template_hole 5, t_empty)),
        template_predicate (template_app (template_hole 3, t_empty))],
       template_predicate
        (
           template_app
            (template_app (template_var 2, template_var 1), template_var 0)
           ))),
    ("Falling_Factorial_Sum_Combinatorics.card_lists_distinct_length_eq_union",
     "[| finite ?X; finite ?Y; ?X Int ?Y = {} |]
      ==> card {zs. length zs = ?n & distinct zs & set zs <= ?X Un ?Y} =
          (SUM k = 0..?n.
           (?n choose k) * ffact k (card ?X) * ffact (?n - k) (card ?Y))",
     template_implication
      ([template_predicate
         (template_app (template_hole 20, template_var 2)),
        template_predicate
         (template_app (template_hole 20, template_var 1)),
        template_equation
         (template_app
           (template_app (template_hole 18, template_var 2),
            template_var 1),
          template_hole 17)],
       template_equation
        (template_app
          (template_hole 15, template_app (template_hole 14, t_empty)),
         template_app
          (template_app (template_hole 7, t_empty),
           template_app
            (template_app (template_hole 1, template_hole 0),
             template_var 0))))),
    ("Falling_Factorial_Sum_Combinatorics.lists_distinct_union_by_interleavings",
     "?X Int ?Y = {} ==>
      {zs. length zs = ?n & distinct zs & set zs <= ?X Un ?Y} =
      {0..?n} >>=
      (%k. {xs. length xs = k & distinct xs & set xs <= ?X} >>=
           (%xs. {ys. length ys = ?n - k & distinct ys & set ys <= ?Y} >>=
                 (%ys. {zs. interleavings xs ys zs})))",
     template_implication
      ([template_equation
         (template_app
           (template_app (template_hole 16, template_var 2),
            template_var 1),
          template_hole 15)],
       template_equation
        (template_app (template_hole 13, t_empty),
         template_app
          (template_app
            (template_hole 5,
             template_app
              (template_app (template_hole 4, template_hole 3),
               template_var 0)),
           t_empty)))),
    ("Falling_Factorial_Sum_Combinatorics.injectivity",
     "[| ?X Int ?Y = {}; ?k : {0..?n} & ?k' : {0..?n};
         (length ?xs = ?k & distinct ?xs & set ?xs <= ?X) &
         length ?xs' = ?k' & distinct ?xs' & set ?xs' <= ?X;
         (length ?ys = ?n - ?k & distinct ?ys & set ?ys <= ?Y) &
         length ?ys' = ?n - ?k' & distinct ?ys' & set ?ys' <= ?Y;
         interleavings ?xs ?ys ?zs & interleavings ?xs' ?ys' ?zs';
         ?zs = ?zs' |]
      ==> ?k = ?k'",
     template_implication
      ([template_equation
         (template_app
           (template_app (template_hole 13, template_var 10),
            template_var 9),
          template_hole 12),
        template_predicate
         (
            template_app
             (template_app
               (template_hole 11,
                template_app
                 (template_app (template_hole 10, template_var 8),
                  template_app
                   (template_app (template_hole 9, template_hole 8),
                    template_var 7))),
              template_app
               (template_app (template_hole 10, template_var 6),
                template_app
                 (template_app (template_hole 9, template_hole 8),
                  template_var 7)))
            ),
        template_predicate
         (
            template_app
             (template_app
               (template_hole 11,
                template_app
                 (template_app
                   (template_hole 11,
                    template_app
                     (template_app
                       (template_hole 7,
                        template_app (template_hole 6, template_var 5)),
                      template_var 8)),
                  template_app
                   (template_app
                     (template_hole 11,
                      template_app (template_hole 5, template_var 5)),
                    template_app
                     (template_app
                       (template_hole 4,
                        template_app (template_hole 3, template_var 5)),
                      template_var 10)))),
              template_app
               (template_app
                 (template_hole 11,
                  template_app
                   (template_app
                     (template_hole 7,
                      template_app (template_hole 6, template_var 4)),
                    template_var 6)),
                template_app
                 (template_app
                   (template_hole 11,
                    template_app (template_hole 5, template_var 4)),
                  template_app
                   (template_app
                     (template_hole 4,
                      template_app (template_hole 3, template_var 4)),
                    template_var 10))))
            ),
        template_predicate
         (
            template_app
             (template_app
               (template_hole 11,
                template_app
                 (template_app
                   (template_hole 11,
                    template_app
                     (template_app
                       (template_hole 7,
                        template_app (template_hole 6, template_var 3)),
                      template_app
                       (template_app (template_hole 2, template_var 7),
                        template_var 8))),
                  template_app
                   (template_app
                     (template_hole 11,
                      template_app (template_hole 5, template_var 3)),
                    template_app
                     (template_app
                       (template_hole 4,
                        template_app (template_hole 3, template_var 3)),
                      template_var 9)))),
              template_app
               (template_app
                 (template_hole 11,
                  template_app
                   (template_app
                     (template_hole 7,
                      template_app (template_hole 6, template_var 2)),
                    template_app
                     (template_app (template_hole 2, template_var 7),
                      template_var 6))),
                template_app
                 (template_app
                   (template_hole 11,
                    template_app (template_hole 5, template_var 2)),
                  template_app
                   (template_app
                     (template_hole 4,
                      template_app (template_hole 3, template_var 2)),
                    template_var 9))))
            ),
        template_predicate
         (
            template_app
             (template_app
               (template_hole 11,
                template_app
                 (template_app
                   (template_app (template_hole 1, template_var 5),
                    template_var 3),
                  template_var 1)),
              template_app
               (template_app
                 (template_app (template_hole 1, template_var 4),
                  template_var 2),
                template_var 0))
            ),
        template_equation (template_var 1, template_var 0)],
       template_equation (template_var 8, template_var 6))),
    ("Falling_Factorial_Sum_Combinatorics.injectivity",
     "[| ?X Int ?Y = {}; ?k : {0..?n} & ?k' : {0..?n};
         (length ?xs = ?k & distinct ?xs & set ?xs <= ?X) &
         length ?xs' = ?k' & distinct ?xs' & set ?xs' <= ?X;
         (length ?ys = ?n - ?k & distinct ?ys & set ?ys <= ?Y) &
         length ?ys' = ?n - ?k' & distinct ?ys' & set ?ys' <= ?Y;
         interleavings ?xs ?ys ?zs & interleavings ?xs' ?ys' ?zs';
         ?zs = ?zs' |]
      ==> ?xs = ?xs'",
     template_implication
      ([template_equation
         (template_app
           (template_app (template_hole 13, template_var 10),
            template_var 9),
          template_hole 12),
        template_predicate
         (
            template_app
             (template_app
               (template_hole 11,
                template_app
                 (template_app (template_hole 10, template_var 8),
                  template_app
                   (template_app (template_hole 9, template_hole 8),
                    template_var 7))),
              template_app
               (template_app (template_hole 10, template_var 6),
                template_app
                 (template_app (template_hole 9, template_hole 8),
                  template_var 7)))
            ),
        template_predicate
         (
            template_app
             (template_app
               (template_hole 11,
                template_app
                 (template_app
                   (template_hole 11,
                    template_app
                     (template_app
                       (template_hole 7,
                        template_app (template_hole 6, template_var 5)),
                      template_var 8)),
                  template_app
                   (template_app
                     (template_hole 11,
                      template_app (template_hole 5, template_var 5)),
                    template_app
                     (template_app
                       (template_hole 4,
                        template_app (template_hole 3, template_var 5)),
                      template_var 10)))),
              template_app
               (template_app
                 (template_hole 11,
                  template_app
                   (template_app
                     (template_hole 7,
                      template_app (template_hole 6, template_var 4)),
                    template_var 6)),
                template_app
                 (template_app
                   (template_hole 11,
                    template_app (template_hole 5, template_var 4)),
                  template_app
                   (template_app
                     (template_hole 4,
                      template_app (template_hole 3, template_var 4)),
                    template_var 10))))
            ),
        template_predicate
         (
            template_app
             (template_app
               (template_hole 11,
                template_app
                 (template_app
                   (template_hole 11,
                    template_app
                     (template_app
                       (template_hole 7,
                        template_app (template_hole 6, template_var 3)),
                      template_app
                       (template_app (template_hole 2, template_var 7),
                        template_var 8))),
                  template_app
                   (template_app
                     (template_hole 11,
                      template_app (template_hole 5, template_var 3)),
                    template_app
                     (template_app
                       (template_hole 4,
                        template_app (template_hole 3, template_var 3)),
                      template_var 9)))),
              template_app
               (template_app
                 (template_hole 11,
                  template_app
                   (template_app
                     (template_hole 7,
                      template_app (template_hole 6, template_var 2)),
                    template_app
                     (template_app (template_hole 2, template_var 7),
                      template_var 6))),
                template_app
                 (template_app
                   (template_hole 11,
                    template_app (template_hole 5, template_var 2)),
                  template_app
                   (template_app
                     (template_hole 4,
                      template_app (template_hole 3, template_var 2)),
                    template_var 9))))
            ),
        template_predicate
         (
            template_app
             (template_app
               (template_hole 11,
                template_app
                 (template_app
                   (template_app (template_hole 1, template_var 5),
                    template_var 3),
                  template_var 1)),
              template_app
               (template_app
                 (template_app (template_hole 1, template_var 4),
                  template_var 2),
                template_var 0))
            ),
        template_equation (template_var 1, template_var 0)],
       template_equation (template_var 5, template_var 4))),
    ("Falling_Factorial_Sum_Combinatorics.injectivity",
     "[| ?X Int ?Y = {}; ?k : {0..?n} & ?k' : {0..?n};
         (length ?xs = ?k & distinct ?xs & set ?xs <= ?X) &
         length ?xs' = ?k' & distinct ?xs' & set ?xs' <= ?X;
         (length ?ys = ?n - ?k & distinct ?ys & set ?ys <= ?Y) &
         length ?ys' = ?n - ?k' & distinct ?ys' & set ?ys' <= ?Y;
         interleavings ?xs ?ys ?zs & interleavings ?xs' ?ys' ?zs';
         ?zs = ?zs' |]
      ==> ?ys = ?ys'",
     template_implication
      ([template_equation
         (template_app
           (template_app (template_hole 13, template_var 10),
            template_var 9),
          template_hole 12),
        template_predicate
         (
            template_app
             (template_app
               (template_hole 11,
                template_app
                 (template_app (template_hole 10, template_var 8),
                  template_app
                   (template_app (template_hole 9, template_hole 8),
                    template_var 7))),
              template_app
               (template_app (template_hole 10, template_var 6),
                template_app
                 (template_app (template_hole 9, template_hole 8),
                  template_var 7)))
            ),
        template_predicate
         (
            template_app
             (template_app
               (template_hole 11,
                template_app
                 (template_app
                   (template_hole 11,
                    template_app
                     (template_app
                       (template_hole 7,
                        template_app (template_hole 6, template_var 5)),
                      template_var 8)),
                  template_app
                   (template_app
                     (template_hole 11,
                      template_app (template_hole 5, template_var 5)),
                    template_app
                     (template_app
                       (template_hole 4,
                        template_app (template_hole 3, template_var 5)),
                      template_var 10)))),
              template_app
               (template_app
                 (template_hole 11,
                  template_app
                   (template_app
                     (template_hole 7,
                      template_app (template_hole 6, template_var 4)),
                    template_var 6)),
                template_app
                 (template_app
                   (template_hole 11,
                    template_app (template_hole 5, template_var 4)),
                  template_app
                   (template_app
                     (template_hole 4,
                      template_app (template_hole 3, template_var 4)),
                    template_var 10))))
            ),
        template_predicate
         (
            template_app
             (template_app
               (template_hole 11,
                template_app
                 (template_app
                   (template_hole 11,
                    template_app
                     (template_app
                       (template_hole 7,
                        template_app (template_hole 6, template_var 3)),
                      template_app
                       (template_app (template_hole 2, template_var 7),
                        template_var 8))),
                  template_app
                   (template_app
                     (template_hole 11,
                      template_app (template_hole 5, template_var 3)),
                    template_app
                     (template_app
                       (template_hole 4,
                        template_app (template_hole 3, template_var 3)),
                      template_var 9)))),
              template_app
               (template_app
                 (template_hole 11,
                  template_app
                   (template_app
                     (template_hole 7,
                      template_app (template_hole 6, template_var 2)),
                    template_app
                     (template_app (template_hole 2, template_var 7),
                      template_var 6))),
                template_app
                 (template_app
                   (template_hole 11,
                    template_app (template_hole 5, template_var 2)),
                  template_app
                   (template_app
                     (template_hole 4,
                      template_app (template_hole 3, template_var 2)),
                    template_var 9))))
            ),
        template_predicate
         (
            template_app
             (template_app
               (template_hole 11,
                template_app
                 (template_app
                   (template_app (template_hole 1, template_var 5),
                    template_var 3),
                  template_var 1)),
              template_app
               (template_app
                 (template_app (template_hole 1, template_var 4),
                  template_var 2),
                template_var 0))
            ),
        template_equation (template_var 1, template_var 0)],
       template_equation (template_var 3, template_var 2)))]:
   (string * thm * template) list
### theory "Draft.Falling_Factorial_Sum_CombinatoricsMoreTemplates"
### 0.315s elapsed time, 0.388s cpu time, 0.000s GC time
val it = (): unit
