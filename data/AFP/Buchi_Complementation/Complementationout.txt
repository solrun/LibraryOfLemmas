Loading theory "Draft.Alternate" (required by "Draft.ComplementationMoreTemplates" via "Draft.Complementation" via "Draft.Ranking")
Loading theory "HOL-Library.Adhoc_Overloading" (required by "Draft.ComplementationMoreTemplates" via "Draft.Complementation" via "Transition_Systems_and_Automata.Maps" via "Transition_Systems_and_Automata.Sequence_Zip" via "Transition_Systems_and_Automata.Sequence_LTL" via "Transition_Systems_and_Automata.Sequence" via "HOL-Library.Monad_Syntax")
Loading theory "HOL-Library.Function_Algebras" (required by "Draft.ComplementationMoreTemplates" via "Draft.ExtrEqs" via "HOL-Library.BigO")
Loading theory "HOL-Library.Infinite_Set" (required by "Draft.ComplementationMoreTemplates" via "Draft.Complementation" via "Transition_Systems_and_Automata.Maps" via "Transition_Systems_and_Automata.Sequence_Zip" via "Transition_Systems_and_Automata.Sequence_LTL" via "HOL-Library.Linear_Temporal_Logic_on_Streams" via "HOL-Library.Extended_Nat" via "HOL-Library.Order_Continuity" via "HOL-Library.Countable_Complete_Lattices" via "HOL-Library.Countable_Set")
instantiation
  fun :: (type, plus) plus
  plus_fun == plus :: ('a => 'b) => ('a => 'b) => 'a => 'b
consts
  alternate :: "('a => 'a) => ('a => 'a) => nat => 'a => 'a"
instantiation
  fun :: (type, zero) zero
  zero_fun == zero_class.zero :: 'a => 'b
### theory "Draft.Alternate"
### 0.049s elapsed time, 0.225s cpu time, 0.000s GC time
Loading theory "HOL-Library.Nat_Bijection" (required by "Draft.ComplementationMoreTemplates" via "Draft.ExtrEqs" via "HOL-Library.Stream")
instantiation
  fun :: (type, times) times
  times_fun == times :: ('a => 'b) => ('a => 'b) => 'a => 'b
instantiation
  fun :: (type, one) one
  one_fun == one_class.one :: 'a => 'b
signature ADHOC_OVERLOADING =
  sig
    val generic_add_overloaded: string -> Context.generic -> Context.generic
    val generic_add_variant:
       string -> term -> Context.generic -> Context.generic
    val generic_remove_overloaded:
       string -> Context.generic -> Context.generic
    val generic_remove_variant:
       string -> term -> Context.generic -> Context.generic
    val is_overloaded: Proof.context -> string -> bool
    val show_variants: bool Config.T
  end
structure Adhoc_Overloading: ADHOC_OVERLOADING
### theory "HOL-Library.Adhoc_Overloading"
### 0.119s elapsed time, 0.490s cpu time, 0.035s GC time
Loading theory "HOL-Library.Monad_Syntax" (required by "Draft.ComplementationMoreTemplates" via "Draft.Complementation" via "Transition_Systems_and_Automata.Maps" via "Transition_Systems_and_Automata.Sequence_Zip" via "Transition_Systems_and_Automata.Sequence_LTL" via "Transition_Systems_and_Automata.Sequence")
### theory "HOL-Library.Monad_Syntax"
### 0.033s elapsed time, 0.128s cpu time, 0.000s GC time
Loading theory "HOL-Library.Old_Datatype" (required by "Draft.ComplementationMoreTemplates" via "Draft.Complementation" via "Transition_Systems_and_Automata.Maps" via "Transition_Systems_and_Automata.Sequence_Zip" via "Transition_Systems_and_Automata.Sequence_LTL" via "HOL-Library.Linear_Temporal_Logic_on_Streams" via "HOL-Library.Extended_Nat" via "HOL-Library.Countable")
### theory "HOL-Library.Function_Algebras"
### 0.154s elapsed time, 0.622s cpu time, 0.035s GC time
Loading theory "HOL-Library.Set_Algebras" (required by "Draft.ComplementationMoreTemplates" via "Draft.ExtrEqs" via "HOL-Library.BigO")
Found termination order: "(%p. size (snd p)) <*mlex*> {}"
instantiation
  set :: (plus) plus
  plus_set == plus :: 'a set => 'a set => 'a set
instantiation
  set :: (times) times
  times_set == times :: 'a set => 'a set => 'a set
instantiation
  set :: (zero) zero
  zero_set == zero_class.zero :: 'a set
instantiation
  set :: (one) one
  one_set == one_class.one :: 'a set
consts
  enumerate :: "'a set => nat => 'a"
Found termination order: "size_list size <*mlex*> {}"
### theory "HOL-Library.Infinite_Set"
### 0.346s elapsed time, 1.378s cpu time, 0.105s GC time
Loading theory "HOL-Library.Sublist" (required by "Draft.ComplementationMoreTemplates" via "Draft.Complementation" via "Transition_Systems_and_Automata.Maps" via "Transition_Systems_and_Automata.Sequence_Zip" via "Transition_Systems_and_Automata.Sequence_LTL" via "HOL-Library.Linear_Temporal_Logic_on_Streams")
### theory "HOL-Library.Nat_Bijection"
### 0.326s elapsed time, 1.281s cpu time, 0.105s GC time
Loading theory "HOL-Library.Stream" (required by "Draft.ComplementationMoreTemplates" via "Draft.ExtrEqs")
### theory "HOL-Library.Set_Algebras"
### 0.224s elapsed time, 0.900s cpu time, 0.070s GC time
Loading theory "HOL-Library.Tree" (required by "Draft.ComplementationMoreTemplates" via "Draft.ExtrEqs" via "Draft.Templates")
signature OLD_DATATYPE =
  sig
    val check_specs: spec list -> theory -> spec list * Proof.context
    type config = {quiet: bool, strict: bool}
    val default_config: config
    type descr =
       (int * (string * dtyp list * (string * dtyp list) list)) list
    val distinct_lemma: thm
    datatype dtyp
    = DtRec of int | DtTFree of string * sort | DtType of string * dtyp list
    type info =
       {case_cong: thm,
        case_cong_weak: thm,
        case_name: string,
        case_rewrites: thm list,
        descr: descr,
        distinct: thm list,
        exhaust: thm,
        index: int,
        induct: thm,
        inducts: thm list,
        inject: thm list,
        nchotomy: thm,
        rec_names: string list,
        rec_rewrites: thm list, split: thm, split_asm: thm}
    val read_specs: spec_cmd list -> theory -> spec list * Proof.context
    type spec =
       (binding * (string * sort) list * mixfix) *
       (binding * typ list * mixfix) list
    type spec_cmd =
       (binding * (string * string option) list * mixfix) *
       (binding * string list * mixfix) list
  end
structure Old_Datatype: OLD_DATATYPE
### theory "HOL-Library.Old_Datatype"
### 0.393s elapsed time, 1.551s cpu time, 0.158s GC time
Loading theory "HOL-Library.Countable" (required by "Draft.ComplementationMoreTemplates" via "Draft.Complementation" via "Transition_Systems_and_Automata.Maps" via "Transition_Systems_and_Automata.Sequence_Zip" via "Transition_Systems_and_Automata.Sequence_LTL" via "HOL-Library.Linear_Temporal_Logic_on_Streams" via "HOL-Library.Extended_Nat")
consts
  prefixes :: "'a list => 'a list list"
consts
  shift :: "'a list => 'a stream => 'a stream"
Found termination order: "(%p. length (snd p)) <*mlex*> {}"
Proofs for coinductive predicate(s) "streamsp"
  Proving monotonicity ...
consts
  snth :: "'a stream => nat => 'a"
consts
  stake :: "nat => 'a stream => 'a list"
consts
  left :: "'a tree => 'a tree"
consts
  sdrop :: "nat => 'a stream => 'a stream"
consts
  right :: "'a tree => 'a tree"
### Additional type variable(s) in locale specification "countable": 'a
Found termination order: "size <*mlex*> {}"
consts
  sfilter :: "('a => bool) => 'a stream => 'a stream"
class countable = type +
  assumes "ex_inj": "EX to_nat. inj to_nat"
consts
  cycle :: "'a list => 'a stream"
Found termination order: "size <*mlex*> {}"
consts
  siterate :: "('a => 'a) => 'a => 'a stream"
consts
  suffixes :: "'a list => 'a list list"
consts
  flat :: "'a list stream => 'a stream"
Found termination order: "size <*mlex*> {}"
class height = type +
  fixes height :: "'a => nat"
instantiation
  tree :: (type) height
  height_tree == height :: 'a tree => nat
Proofs for inductive predicate(s) "list_emb"
  Proving monotonicity ...
consts
  sinterleave :: "'a stream => 'a stream => 'a stream"
Proofs for inductive predicate(s) "finite_item"
  Proving monotonicity ...
consts
  szip :: "'a stream => 'b stream => ('a * 'b) stream"
Found termination order: "size <*mlex*> {}"
consts
  smap2 :: "('a => 'b => 'c) => 'a stream => 'b stream => 'c stream"
### theory "HOL-Library.Stream"
### 1.098s elapsed time, 4.143s cpu time, 0.904s GC time
Loading theory "HOL-Library.BigO" (required by "Draft.ComplementationMoreTemplates" via "Draft.ExtrEqs")
Found termination order: "size <*mlex*> {}"
val old_countable_datatype_tac = fn: Proof.context -> int -> tactic
Found termination order: "size <*mlex*> {}"
### ML warning (line 93 of "~~/src/HOL/Tools/BNF/bnf_lfp_countable.ML"):
### Pattern is not exhaustive.
### ML warning (line 139 of "~~/src/HOL/Tools/BNF/bnf_lfp_countable.ML"):
### Pattern is not exhaustive.
### ML warning (line 143 of "~~/src/HOL/Tools/BNF/bnf_lfp_countable.ML"):
### Matches are not exhaustive.
### ML warning (line 145 of "~~/src/HOL/Tools/BNF/bnf_lfp_countable.ML"):
### Matches are not exhaustive.
### ML warning (line 156 of "~~/src/HOL/Tools/BNF/bnf_lfp_countable.ML"):
### Pattern is not exhaustive.
signature BNF_LFP_COUNTABLE =
  sig
    val countable_datatype_tac: Proof.context -> tactic
    val derive_encode_injectives_thms:
       Proof.context -> string list -> thm list
  end
structure BNF_LFP_Countable: BNF_LFP_COUNTABLE
val countable_datatype_tac = fn: Proof.context -> thm -> thm Seq.seq
val countable_tac = fn: Proof.context -> int -> tactic
Found termination order: "size <*mlex*> {}"
Found termination order: "size <*mlex*> {}"
Found termination order: "size <*mlex*> {}"
Found termination order: "size <*mlex*> {}"
### theory "HOL-Library.Countable"
### 1.391s elapsed time, 5.294s cpu time, 1.066s GC time
Loading theory "HOL-Library.Countable_Set" (required by "Draft.ComplementationMoreTemplates" via "Draft.Complementation" via "Transition_Systems_and_Automata.Maps" via "Transition_Systems_and_Automata.Sequence_Zip" via "Transition_Systems_and_Automata.Sequence_LTL" via "HOL-Library.Linear_Temporal_Logic_on_Streams" via "HOL-Library.Extended_Nat" via "HOL-Library.Order_Continuity" via "HOL-Library.Countable_Complete_Lattices")
consts
  sublists :: "'a list => 'a list list"
Found termination order: "(%p. size (fst p)) <*mlex*> {}"
### theory "HOL-Library.Sublist"
### 1.661s elapsed time, 6.366s cpu time, 1.153s GC time
Loading theory "Transition_Systems_and_Automata.Basic" (required by "Draft.ComplementationMoreTemplates" via "Draft.Complementation" via "Transition_Systems_and_Automata.Maps" via "Transition_Systems_and_Automata.Sequence_Zip" via "Transition_Systems_and_Automata.Sequence_LTL" via "Transition_Systems_and_Automata.Sequence")
Found termination order: "size <*mlex*> {}"
### theory "Transition_Systems_and_Automata.Basic"
### 0.065s elapsed time, 0.250s cpu time, 0.071s GC time
Loading theory "Transition_Systems_and_Automata.Sequence" (required by "Draft.ComplementationMoreTemplates" via "Draft.Complementation" via "Transition_Systems_and_Automata.Maps" via "Transition_Systems_and_Automata.Sequence_Zip" via "Transition_Systems_and_Automata.Sequence_LTL")
Found termination order: "(%p. size (snd p)) <*mlex*> {}"
locale comm_monoid_set
  fixes f :: "'a => 'a => 'a"  (infixl \<open>\<^bold>*\<close> 70)
    and z :: "'a"  (\<open>\<^bold>1\<close>)
  assumes "comm_monoid_set (\<^bold>*) \<^bold>1"
### theory "HOL-Library.BigO"
### 0.880s elapsed time, 3.464s cpu time, 0.429s GC time
[| inj_on ?f ?A; ?B <= ?A |] ==> inj_on ?f ?B
[| inj_on ?f ?B; ?A <= ?B |] ==> inj_on ?f ?A
### theory "HOL-Library.Countable_Set"
### 0.773s elapsed time, 2.838s cpu time, 1.137s GC time
Loading theory "HOL-Library.Countable_Complete_Lattices" (required by "Draft.ComplementationMoreTemplates" via "Draft.Complementation" via "Transition_Systems_and_Automata.Maps" via "Transition_Systems_and_Automata.Sequence_Zip" via "Transition_Systems_and_Automata.Sequence_LTL" via "HOL-Library.Linear_Temporal_Logic_on_Streams" via "HOL-Library.Extended_Nat" via "HOL-Library.Order_Continuity")
Found termination order: "size <*mlex*> {}"
### theory "HOL-Library.Tree"
### 2.558s elapsed time, 9.518s cpu time, 2.396s GC time
Loading theory "Draft.Templates" (required by "Draft.ComplementationMoreTemplates" via "Draft.ExtrEqs")
consts
  scan :: "('a => 'b => 'b) => 'a list => 'b => 'b list"
datatype template_term
=
     t_empty
   | template_app of template_term * template_term
   | template_hole of int
   | template_var of int
datatype sign
= equals | greater_equals | greater_than | less_equals | less_than
datatype template
=
     template_bimplication of template * template
   | template_dunno
   | template_equation of template_term * template_term
   | template_implication of template list * template
   | template_inequation of sign * template_term * template_term
   | template_negation of template
   | template_predicate of template_term
constructor t_empty: template_term
constructor template_app: template_term * template_term -> template_term
constructor template_hole: int -> template_term
constructor template_var: int -> template_term
constructor equals: sign
constructor greater_equals: sign
constructor greater_than: sign
constructor less_equals: sign
constructor less_than: sign
constructor template_bimplication: template * template -> template
constructor template_dunno: template
constructor template_equation: template_term * template_term -> template
constructor template_implication: template list * template -> template
constructor template_inequation:
   sign * template_term * template_term -> template
constructor template_negation: template -> template
constructor template_predicate: template_term -> template
val vfs = fn: term -> (indexname * typ) list * (string * typ) list
val indexOf = fn: ''a list -> ''a -> int -> int
val has_eq = fn: term -> bool
val term2template = fn:
   (indexname * typ) list -> (string * typ) list -> term -> template_term
val lemma2predicate = fn: term -> term -> template
val makeTemplatewithContext = fn: term -> term -> template
val lemma2template = fn: term -> template
val thm2template = fn: thm -> template
val tterm2string = fn: template_term -> string
val template2string = fn: template -> string
val t = "height ?t <= size ?t": thm
val th =
   Const ("HOL.Trueprop", "bool => prop") $
     (Const ("Orderings.ord_class.less_eq", "nat => nat => bool") $
       (Const ("Tree.height_class.height", "?'a tree => nat") $
         Var (("t", 0), "?'a tree")) $
       (Const ("Nat.size_class.size", "?'a tree => nat") $
         Var (("t", 0), "?'a tree"))):
   term
### theory "Draft.Templates"
### 0.057s elapsed time, 0.201s cpu time, 0.000s GC time
Loading theory "Draft.ExtrEqs" (required by "Draft.ComplementationMoreTemplates")
consts
  sscan :: "('a => 'b => 'b) => 'a stream => 'b => 'b stream"
consts
  stranspose :: "'a stream list => 'a list stream"
Proofs for coinductive predicate(s) "sdistinct"
  Proving monotonicity ...
Proofs for coinductive predicate(s) "sascending"
  Proving monotonicity ...
class countable_complete_lattice = Inf + Sup + lattice + bot + top +
  assumes "ccInf_lower": "!!A x. [| countable A; x : A |] ==> Inf A <= x"
  assumes
    "ccInf_greatest":
      "!!A z. [| countable A; !!x. x : A ==> z <= x |] ==> z <= Inf A"
  assumes "ccSup_upper": "!!A x. [| countable A; x : A |] ==> x <= Sup A"
  assumes
    "ccSup_least":
      "!!A z. [| countable A; !!x. x : A ==> x <= z |] ==> Sup A <= z"
  assumes "ccInf_empty": "Inf {} = top"
  assumes "ccSup_empty": "Sup {} = bot"
Proofs for coinductive predicate(s) "sdescending"
  Proving monotonicity ...
### theory "Transition_Systems_and_Automata.Sequence"
### 1.167s elapsed time, 3.963s cpu time, 1.234s GC time
Loading theory "Transition_Systems_and_Automata.Transition_System" (required by "Draft.ComplementationMoreTemplates" via "Draft.Complementation" via "Draft.Ranking" via "Draft.Graph" via "Transition_Systems_and_Automata.NBA" via "Transition_Systems_and_Automata.Nondeterministic")
locale transition_system_universal
  fixes execute :: "'transition => 'state => 'state"
locale transition_system
  fixes execute :: "'transition => 'state => 'state"
    and enabled :: "'transition => 'state => bool"
Proofs for inductive predicate(s) "path"
  Proving monotonicity ...
Proofs for coinductive predicate(s) "run"
  Proving monotonicity ...
Proofs for inductive predicate(s) "reachablep"
  Proving monotonicity ...
locale transition_system_initial
  fixes execute :: "'transition => 'state => 'state"
    and enabled :: "'transition => 'state => bool"
    and initial :: "'state => bool"
Proofs for inductive predicate(s) "nodesp"
  Proving monotonicity ...
### theory "Transition_Systems_and_Automata.Transition_System"
### 0.254s elapsed time, 0.779s cpu time, 0.075s GC time
val eqpattern =
   Pattern
    (
       Const ("HOL.Trueprop", "bool => prop") $
         (Const ("HOL.eq", "?'a => ?'a => bool") $
           Var (("_dummy_", 1), "?'a") $ Var (("_dummy_", 2), "?'a"))
       ):
   term Find_Theorems.criterion
val badeqpattern = Pattern (Const ("Pure.eq", "?'a => ?'a => prop")):
   term Find_Theorems.criterion
val undefpattern =
   Pattern
    (
       Const ("HOL.Trueprop", "bool => prop") $
         (Const ("HOL.eq", "?'a => ?'a => bool") $
           Var (("_dummy_", 1), "?'a") $ Const ("HOL.undefined", "?'a"))
       ):
   term Find_Theorems.criterion
val thmpattern =
   Pattern
    (Const ("HOL.Trueprop", "bool => prop") $ Var (("_dummy_", 1), "bool")):
   term Find_Theorems.criterion
val badnames =
   ["*nitpick*", "*Nitpick*", "*full_exhaustive*", "*_def*", "Enum.finite*",
    "*Quickcheck*", "ATP*", "*Nunchaku*", "*Code*", "*BNF*", "*SMT*",
    "*.*.*"]:
   string list
val unwanted_names =
   [(false, Name "*nitpick*"), (false, Name "*Nitpick*"),
    (false, Name "*full_exhaustive*"), (false, Name "*_def*"),
    (false, Name "Enum.finite*"), (false, Name "*Quickcheck*"),
    (false, Name "ATP*"), (false, Name "*Nunchaku*"),
    (false, Name "*Code*"), (false, Name "*BNF*"), (false, Name "*SMT*"),
    (false, Name "*.*.*")]:
   (bool * term Find_Theorems.criterion) list
val has_vars = fn: term -> bool
val get_all_eqs = fn: string -> Proof.context -> (string * thm) list
val get_all_thms = fn: string -> Proof.context -> (string * thm) list
val get_noneq_thms = fn: string -> Proof.context -> (string * thm) list
val template_eqs = fn:
   string -> Proof.context -> (string * thm * template) list
val template_thms = fn:
   string -> Proof.context -> (string * thm * template) list
### theory "Draft.ExtrEqs"
### 0.637s elapsed time, 1.842s cpu time, 0.181s GC time
class countable_complete_distrib_lattice = countable_complete_lattice +
  assumes
    "sup_ccInf": "!!B a. countable B ==> sup a (Inf B) = Inf (sup a ` B)"
  assumes
    "inf_ccSup": "!!B a. countable B ==> inf a (Sup B) = Sup (inf a ` B)"
### theory "HOL-Library.Countable_Complete_Lattices"
### 1.692s elapsed time, 3.536s cpu time, 0.312s GC time
Loading theory "HOL-Library.Order_Continuity" (required by "Draft.ComplementationMoreTemplates" via "Draft.Complementation" via "Transition_Systems_and_Automata.Maps" via "Transition_Systems_and_Automata.Sequence_Zip" via "Transition_Systems_and_Automata.Sequence_LTL" via "HOL-Library.Linear_Temporal_Logic_on_Streams" via "HOL-Library.Extended_Nat")
### theory "HOL-Library.Order_Continuity"
### 0.384s elapsed time, 0.435s cpu time, 0.046s GC time
Loading theory "HOL-Library.Extended_Nat" (required by "Draft.ComplementationMoreTemplates" via "Draft.Complementation" via "Transition_Systems_and_Automata.Maps" via "Transition_Systems_and_Automata.Sequence_Zip" via "Transition_Systems_and_Automata.Sequence_LTL" via "HOL-Library.Linear_Temporal_Logic_on_Streams")
class infinity = type +
  fixes infinity :: "'a"
instantiation
  enat :: infinity
  infinity_enat == infinity :: enat
Proofs for inductive predicate(s) "rec_set_enat"
### No equation for constructor "Extended_Nat.infinity_class.infinity"
### in definition of function "the_enat"
consts
  the_enat :: "enat => nat"
instantiation
  enat :: zero_neq_one
  one_enat == one_class.one :: enat
  zero_enat == zero_class.zero :: enat
instantiation
  enat :: comm_monoid_add
  plus_enat == plus :: enat => enat => enat
instantiation
  enat :: {comm_semiring_1,semiring_no_zero_divisors}
  times_enat == times :: enat => enat => enat
instantiation
  enat :: minus
  minus_enat == minus :: enat => enat => enat
instantiation
  enat :: linordered_ab_semigroup_add
  less_eq_enat == less_eq :: enat => enat => bool
  less_enat == less :: enat => enat => bool
instantiation
  enat :: {order_bot,order_top}
  top_enat == top :: enat
  bot_enat == bot :: enat
structure Cancel_Enat_Common:
  sig
    val dest_sum: term -> term list
    val dest_summing: term * term list -> term list
    val find_first: term -> term list -> term list
    val find_first_t: term list -> term -> term list -> term list
    val mk_eq: term * term -> term
    val mk_sum: typ -> term list -> term
    val norm_ss: simpset
    val norm_tac: Proof.context -> tactic
    val simplify_meta_eq: Proof.context -> thm -> thm -> thm
    val trans_tac: Proof.context -> thm option -> tactic
  end
structure Eq_Enat_Cancel:
  sig val proc: Proof.context -> term -> thm option end
structure Le_Enat_Cancel:
  sig val proc: Proof.context -> term -> thm option end
structure Less_Enat_Cancel:
  sig val proc: Proof.context -> term -> thm option end
instantiation
  enat :: complete_lattice
  Inf_enat == Inf :: enat set => enat
  Sup_enat == Sup :: enat set => enat
  sup_enat == sup :: enat => enat => enat
  inf_enat == inf :: enat => enat => enat
### theory "HOL-Library.Extended_Nat"
### 0.462s elapsed time, 0.521s cpu time, 0.080s GC time
Loading theory "HOL-Library.Linear_Temporal_Logic_on_Streams" (required by "Draft.ComplementationMoreTemplates" via "Draft.Complementation" via "Transition_Systems_and_Automata.Maps" via "Transition_Systems_and_Automata.Sequence_Zip" via "Transition_Systems_and_Automata.Sequence_LTL")
Found termination order: "{}"
Found termination order: "{}"
Proofs for inductive predicate(s) "ev"
  Proving monotonicity ...
Proofs for coinductive predicate(s) "alw"
  Proving monotonicity ...
Proofs for coinductive predicate(s) "UNTIL"
  Proving monotonicity ...
Proofs for inductive predicate(s) "ev_at"
  Proving monotonicity ...
Proofs for inductive predicate(s) "suntil"
  Proving monotonicity ...
### theory "HOL-Library.Linear_Temporal_Logic_on_Streams"
### 1.085s elapsed time, 1.924s cpu time, 1.159s GC time
Loading theory "Transition_Systems_and_Automata.Sequence_LTL" (required by "Draft.ComplementationMoreTemplates" via "Draft.Complementation" via "Transition_Systems_and_Automata.Maps" via "Transition_Systems_and_Automata.Sequence_Zip")
### theory "Transition_Systems_and_Automata.Sequence_LTL"
### 0.467s elapsed time, 0.556s cpu time, 0.113s GC time
Loading theory "Transition_Systems_and_Automata.Acceptance" (required by "Draft.ComplementationMoreTemplates" via "Draft.Complementation" via "Draft.Ranking" via "Draft.Graph" via "Transition_Systems_and_Automata.NBA" via "Transition_Systems_and_Automata.Nondeterministic" via "Transition_Systems_and_Automata.Degeneralization")
Loading theory "Transition_Systems_and_Automata.Sequence_Zip" (required by "Draft.ComplementationMoreTemplates" via "Draft.Complementation" via "Transition_Systems_and_Automata.Maps")
Loading theory "Transition_Systems_and_Automata.Transition_System_Construction" (required by "Draft.ComplementationMoreTemplates" via "Draft.Complementation" via "Draft.Ranking" via "Draft.Graph" via "Transition_Systems_and_Automata.NBA" via "Transition_Systems_and_Automata.Nondeterministic")
Loading theory "Transition_Systems_and_Automata.Transition_System_Extra" (required by "Draft.ComplementationMoreTemplates" via "Draft.Complementation" via "Draft.Ranking" via "Draft.Graph" via "Transition_Systems_and_Automata.NBA" via "Transition_Systems_and_Automata.Nondeterministic")
### theory "Transition_Systems_and_Automata.Acceptance"
### 0.061s elapsed time, 0.239s cpu time, 0.000s GC time
### theory "Transition_Systems_and_Automata.Sequence_Zip"
### 0.123s elapsed time, 0.428s cpu time, 0.000s GC time
Loading theory "Transition_Systems_and_Automata.Degeneralization" (required by "Draft.ComplementationMoreTemplates" via "Draft.Complementation" via "Draft.Ranking" via "Draft.Graph" via "Transition_Systems_and_Automata.NBA" via "Transition_Systems_and_Automata.Nondeterministic")
Loading theory "Transition_Systems_and_Automata.Maps" (required by "Draft.ComplementationMoreTemplates" via "Draft.Complementation")
locale transition_system
  fixes execute :: "'transition => 'state => 'state"
    and enabled :: "'transition => 'state => bool"
### theory "Transition_Systems_and_Automata.Maps"
### 0.078s elapsed time, 0.316s cpu time, 0.000s GC time
locale transition_system
  fixes execute :: "'transition => 'state => 'state"
    and enabled :: "'transition => 'state => bool"
### theory "Transition_Systems_and_Automata.Transition_System_Construction"
### 0.275s elapsed time, 0.988s cpu time, 0.092s GC time
locale transition_system_initial
  fixes execute :: "'transition => 'state => 'state"
    and enabled :: "'transition => 'state => bool"
    and initial :: "'state => bool"
### theory "Transition_Systems_and_Automata.Transition_System_Extra"
### 0.288s elapsed time, 1.014s cpu time, 0.092s GC time
### theory "Transition_Systems_and_Automata.Degeneralization"
### 0.229s elapsed time, 0.639s cpu time, 0.092s GC time
Loading theory "Transition_Systems_and_Automata.Nondeterministic" (required by "Draft.ComplementationMoreTemplates" via "Draft.Complementation" via "Draft.Ranking" via "Draft.Graph" via "Transition_Systems_and_Automata.NBA")
locale automaton
  fixes
    automaton ::
      "'label set
       => 'state set
          => ('label => 'state => 'state set) => 'condition => 'automaton"
    and alphabet :: "'automaton => 'label set"
    and initial :: "'automaton => 'state set"
    and transition :: "'automaton => 'label => 'state => 'state set"
    and condition :: "'automaton => 'condition"
  assumes "automaton automaton alphabet initial transition condition"
locale automaton_path
  fixes
    automaton ::
      "'label set
       => 'state set
          => ('label => 'state => 'state set) => 'condition => 'automaton"
    and alphabet :: "'automaton => 'label set"
    and initial :: "'automaton => 'state set"
    and transition :: "'automaton => 'label => 'state => 'state set"
    and condition :: "'automaton => 'condition"
    and test :: "'condition => 'label list => 'state list => 'state => bool"
  assumes "automaton_path automaton alphabet initial transition condition"
locale automaton_run
  fixes
    automaton ::
      "'label set
       => 'state set
          => ('label => 'state => 'state set) => 'condition => 'automaton"
    and alphabet :: "'automaton => 'label set"
    and initial :: "'automaton => 'state set"
    and transition :: "'automaton => 'label => 'state => 'state set"
    and condition :: "'automaton => 'condition"
    and
    test :: "'condition => 'label stream => 'state stream => 'state => bool"
  assumes "automaton_run automaton alphabet initial transition condition"
locale automaton_degeneralization
  fixes
    automaton\<^sub>1 ::
      "'label set
       => 'state set
          => ('label => 'state => 'state set)
             => ('item => bool) list => 'automaton\<^sub>1"
    and alphabet\<^sub>1 :: "'automaton\<^sub>1 => 'label set"
    and initial\<^sub>1 :: "'automaton\<^sub>1 => 'state set"
    and
    transition\<^sub>1 ::
      "'automaton\<^sub>1 => 'label => 'state => 'state set"
    and condition\<^sub>1 :: "'automaton\<^sub>1 => ('item => bool) list"
    and
    automaton\<^sub>2 ::
      "'label set
       => ('state * nat) set
          => ('label => 'state * nat => ('state * nat) set)
             => ('item_degen => bool) => 'automaton\<^sub>2"
    and alphabet\<^sub>2 :: "'automaton\<^sub>2 => 'label set"
    and initial\<^sub>2 :: "'automaton\<^sub>2 => ('state * nat) set"
    and
    transition\<^sub>2 ::
      "'automaton\<^sub>2 => 'label => 'state * nat => ('state * nat) set"
    and condition\<^sub>2 :: "'automaton\<^sub>2 => 'item_degen => bool"
    and item :: "'state * 'label * 'state => 'item"
    and translate :: "'item_degen => 'item * nat"
  assumes
    "automaton_degeneralization automaton\<^sub>1 alphabet\<^sub>1
      initial\<^sub>1 transition\<^sub>1 condition\<^sub>1 automaton\<^sub>2
      alphabet\<^sub>2 initial\<^sub>2 transition\<^sub>2 condition\<^sub>2"
locale automaton_degeneralization_run
  fixes
    automaton\<^sub>1 ::
      "'a set => 'b set => ('a => 'b => 'b set) => ('c => bool) list => 'd"
    and alphabet\<^sub>1 :: "'d => 'a set"
    and initial\<^sub>1 :: "'d => 'b set"
    and transition\<^sub>1 :: "'d => 'a => 'b => 'b set"
    and condition\<^sub>1 :: "'d => ('c => bool) list"
    and
    test\<^sub>1 ::
      "('c => bool) list => 'a stream => 'b stream => 'b => bool"
    and
    automaton\<^sub>2 ::
      "'a set
       => ('b * nat) set
          => ('a => 'b * nat => ('b * nat) set) => ('e => bool) => 'f"
    and alphabet\<^sub>2 :: "'f => 'a set"
    and initial\<^sub>2 :: "'f => ('b * nat) set"
    and transition\<^sub>2 :: "'f => 'a => 'b * nat => ('b * nat) set"
    and condition\<^sub>2 :: "'f => 'e => bool"
    and
    test\<^sub>2 ::
      "('e => bool) => 'a stream => ('b * nat) stream => 'b * nat => bool"
    and item :: "'b * 'a * 'b => 'c"
    and translate :: "'e => 'c * nat"
  assumes
    "automaton_degeneralization_run automaton\<^sub>1 alphabet\<^sub>1
      initial\<^sub>1 transition\<^sub>1 condition\<^sub>1 test\<^sub>1
      automaton\<^sub>2 alphabet\<^sub>2 initial\<^sub>2 transition\<^sub>2
      condition\<^sub>2 test\<^sub>2 item translate"
locale automaton_product
  fixes
    automaton\<^sub>1 ::
      "'label set
       => 'state\<^sub>1 set
          => ('label => 'state\<^sub>1 => 'state\<^sub>1 set)
             => 'condition\<^sub>1 => 'automaton\<^sub>1"
    and alphabet\<^sub>1 :: "'automaton\<^sub>1 => 'label set"
    and initial\<^sub>1 :: "'automaton\<^sub>1 => 'state\<^sub>1 set"
    and
    transition\<^sub>1 ::
      "'automaton\<^sub>1 => 'label => 'state\<^sub>1 => 'state\<^sub>1 set"
    and condition\<^sub>1 :: "'automaton\<^sub>1 => 'condition\<^sub>1"
    and
    automaton\<^sub>2 ::
      "'label set
       => 'state\<^sub>2 set
          => ('label => 'state\<^sub>2 => 'state\<^sub>2 set)
             => 'condition\<^sub>2 => 'automaton\<^sub>2"
    and alphabet\<^sub>2 :: "'automaton\<^sub>2 => 'label set"
    and initial\<^sub>2 :: "'automaton\<^sub>2 => 'state\<^sub>2 set"
    and
    transition\<^sub>2 ::
      "'automaton\<^sub>2 => 'label => 'state\<^sub>2 => 'state\<^sub>2 set"
    and condition\<^sub>2 :: "'automaton\<^sub>2 => 'condition\<^sub>2"
    and
    automaton\<^sub>3 ::
      "'label set
       => ('state\<^sub>1 * 'state\<^sub>2) set
          => ('label
              => 'state\<^sub>1 * 'state\<^sub>2
                 => ('state\<^sub>1 * 'state\<^sub>2) set)
             => 'condition\<^sub>3 => 'automaton\<^sub>3"
    and alphabet\<^sub>3 :: "'automaton\<^sub>3 => 'label set"
    and
    initial\<^sub>3 ::
      "'automaton\<^sub>3 => ('state\<^sub>1 * 'state\<^sub>2) set"
    and
    transition\<^sub>3 ::
      "'automaton\<^sub>3
       => 'label
          => 'state\<^sub>1 * 'state\<^sub>2
             => ('state\<^sub>1 * 'state\<^sub>2) set"
    and condition\<^sub>3 :: "'automaton\<^sub>3 => 'condition\<^sub>3"
    and
    condition ::
      "'condition\<^sub>1 => 'condition\<^sub>2 => 'condition\<^sub>3"
  assumes
    "automaton_product automaton\<^sub>1 alphabet\<^sub>1 initial\<^sub>1
      transition\<^sub>1 condition\<^sub>1 automaton\<^sub>2
      alphabet\<^sub>2 initial\<^sub>2 transition\<^sub>2 condition\<^sub>2
      automaton\<^sub>3 alphabet\<^sub>3 initial\<^sub>3 transition\<^sub>3
      condition\<^sub>3"
locale automaton_intersection_path
  fixes
    automaton\<^sub>1 ::
      "'a set => 'b set => ('a => 'b => 'b set) => 'c => 'd"
    and alphabet\<^sub>1 :: "'d => 'a set"
    and initial\<^sub>1 :: "'d => 'b set"
    and transition\<^sub>1 :: "'d => 'a => 'b => 'b set"
    and condition\<^sub>1 :: "'d => 'c"
    and test\<^sub>1 :: "'c => 'a list => 'b list => 'b => bool"
    and
    automaton\<^sub>2 ::
      "'a set => 'e set => ('a => 'e => 'e set) => 'f => 'g"
    and alphabet\<^sub>2 :: "'g => 'a set"
    and initial\<^sub>2 :: "'g => 'e set"
    and transition\<^sub>2 :: "'g => 'a => 'e => 'e set"
    and condition\<^sub>2 :: "'g => 'f"
    and test\<^sub>2 :: "'f => 'a list => 'e list => 'e => bool"
    and
    automaton\<^sub>3 ::
      "'a set
       => ('b * 'e) set => ('a => 'b * 'e => ('b * 'e) set) => 'h => 'i"
    and alphabet\<^sub>3 :: "'i => 'a set"
    and initial\<^sub>3 :: "'i => ('b * 'e) set"
    and transition\<^sub>3 :: "'i => 'a => 'b * 'e => ('b * 'e) set"
    and condition\<^sub>3 :: "'i => 'h"
    and test\<^sub>3 :: "'h => 'a list => ('b * 'e) list => 'b * 'e => bool"
    and condition :: "'c => 'f => 'h"
  assumes
    "automaton_intersection_path automaton\<^sub>1 alphabet\<^sub>1
      initial\<^sub>1 transition\<^sub>1 condition\<^sub>1 test\<^sub>1
      automaton\<^sub>2 alphabet\<^sub>2 initial\<^sub>2 transition\<^sub>2
      condition\<^sub>2 test\<^sub>2 automaton\<^sub>3 alphabet\<^sub>3
      initial\<^sub>3 transition\<^sub>3 condition\<^sub>3 test\<^sub>3
      condition"
locale automaton_intersection_run
  fixes
    automaton\<^sub>1 ::
      "'a set => 'b set => ('a => 'b => 'b set) => 'c => 'd"
    and alphabet\<^sub>1 :: "'d => 'a set"
    and initial\<^sub>1 :: "'d => 'b set"
    and transition\<^sub>1 :: "'d => 'a => 'b => 'b set"
    and condition\<^sub>1 :: "'d => 'c"
    and test\<^sub>1 :: "'c => 'a stream => 'b stream => 'b => bool"
    and
    automaton\<^sub>2 ::
      "'a set => 'e set => ('a => 'e => 'e set) => 'f => 'g"
    and alphabet\<^sub>2 :: "'g => 'a set"
    and initial\<^sub>2 :: "'g => 'e set"
    and transition\<^sub>2 :: "'g => 'a => 'e => 'e set"
    and condition\<^sub>2 :: "'g => 'f"
    and test\<^sub>2 :: "'f => 'a stream => 'e stream => 'e => bool"
    and
    automaton\<^sub>3 ::
      "'a set
       => ('b * 'e) set => ('a => 'b * 'e => ('b * 'e) set) => 'h => 'i"
    and alphabet\<^sub>3 :: "'i => 'a set"
    and initial\<^sub>3 :: "'i => ('b * 'e) set"
    and transition\<^sub>3 :: "'i => 'a => 'b * 'e => ('b * 'e) set"
    and condition\<^sub>3 :: "'i => 'h"
    and
    test\<^sub>3 :: "'h => 'a stream => ('b * 'e) stream => 'b * 'e => bool"
    and condition :: "'c => 'f => 'h"
  assumes
    "automaton_intersection_run automaton\<^sub>1 alphabet\<^sub>1
      initial\<^sub>1 transition\<^sub>1 condition\<^sub>1 test\<^sub>1
      automaton\<^sub>2 alphabet\<^sub>2 initial\<^sub>2 transition\<^sub>2
      condition\<^sub>2 test\<^sub>2 automaton\<^sub>3 alphabet\<^sub>3
      initial\<^sub>3 transition\<^sub>3 condition\<^sub>3 test\<^sub>3
      condition"
locale automaton_sum
  fixes
    automaton\<^sub>1 ::
      "'label set
       => 'state\<^sub>1 set
          => ('label => 'state\<^sub>1 => 'state\<^sub>1 set)
             => 'condition\<^sub>1 => 'automaton\<^sub>1"
    and alphabet\<^sub>1 :: "'automaton\<^sub>1 => 'label set"
    and initial\<^sub>1 :: "'automaton\<^sub>1 => 'state\<^sub>1 set"
    and
    transition\<^sub>1 ::
      "'automaton\<^sub>1 => 'label => 'state\<^sub>1 => 'state\<^sub>1 set"
    and condition\<^sub>1 :: "'automaton\<^sub>1 => 'condition\<^sub>1"
    and
    automaton\<^sub>2 ::
      "'label set
       => 'state\<^sub>2 set
          => ('label => 'state\<^sub>2 => 'state\<^sub>2 set)
             => 'condition\<^sub>2 => 'automaton\<^sub>2"
    and alphabet\<^sub>2 :: "'automaton\<^sub>2 => 'label set"
    and initial\<^sub>2 :: "'automaton\<^sub>2 => 'state\<^sub>2 set"
    and
    transition\<^sub>2 ::
      "'automaton\<^sub>2 => 'label => 'state\<^sub>2 => 'state\<^sub>2 set"
    and condition\<^sub>2 :: "'automaton\<^sub>2 => 'condition\<^sub>2"
    and
    automaton\<^sub>3 ::
      "'label set
       => ('state\<^sub>1 + 'state\<^sub>2) set
          => ('label
              => 'state\<^sub>1 + 'state\<^sub>2
                 => ('state\<^sub>1 + 'state\<^sub>2) set)
             => 'condition\<^sub>3 => 'automaton\<^sub>3"
    and alphabet\<^sub>3 :: "'automaton\<^sub>3 => 'label set"
    and
    initial\<^sub>3 ::
      "'automaton\<^sub>3 => ('state\<^sub>1 + 'state\<^sub>2) set"
    and
    transition\<^sub>3 ::
      "'automaton\<^sub>3
       => 'label
          => 'state\<^sub>1 + 'state\<^sub>2
             => ('state\<^sub>1 + 'state\<^sub>2) set"
    and condition\<^sub>3 :: "'automaton\<^sub>3 => 'condition\<^sub>3"
    and
    condition ::
      "'condition\<^sub>1 => 'condition\<^sub>2 => 'condition\<^sub>3"
  assumes
    "automaton_sum automaton\<^sub>1 alphabet\<^sub>1 initial\<^sub>1
      transition\<^sub>1 condition\<^sub>1 automaton\<^sub>2
      alphabet\<^sub>2 initial\<^sub>2 transition\<^sub>2 condition\<^sub>2
      automaton\<^sub>3 alphabet\<^sub>3 initial\<^sub>3 transition\<^sub>3
      condition\<^sub>3"
locale automaton_union_path
  fixes
    automaton\<^sub>1 ::
      "'a set => 'b set => ('a => 'b => 'b set) => 'c => 'd"
    and alphabet\<^sub>1 :: "'d => 'a set"
    and initial\<^sub>1 :: "'d => 'b set"
    and transition\<^sub>1 :: "'d => 'a => 'b => 'b set"
    and condition\<^sub>1 :: "'d => 'c"
    and test\<^sub>1 :: "'c => 'a list => 'b list => 'b => bool"
    and
    automaton\<^sub>2 ::
      "'a set => 'e set => ('a => 'e => 'e set) => 'f => 'g"
    and alphabet\<^sub>2 :: "'g => 'a set"
    and initial\<^sub>2 :: "'g => 'e set"
    and transition\<^sub>2 :: "'g => 'a => 'e => 'e set"
    and condition\<^sub>2 :: "'g => 'f"
    and test\<^sub>2 :: "'f => 'a list => 'e list => 'e => bool"
    and
    automaton\<^sub>3 ::
      "'a set
       => ('b + 'e) set => ('a => 'b + 'e => ('b + 'e) set) => 'h => 'i"
    and alphabet\<^sub>3 :: "'i => 'a set"
    and initial\<^sub>3 :: "'i => ('b + 'e) set"
    and transition\<^sub>3 :: "'i => 'a => 'b + 'e => ('b + 'e) set"
    and condition\<^sub>3 :: "'i => 'h"
    and test\<^sub>3 :: "'h => 'a list => ('b + 'e) list => 'b + 'e => bool"
    and condition :: "'c => 'f => 'h"
  assumes
    "automaton_union_path automaton\<^sub>1 alphabet\<^sub>1 initial\<^sub>1
      transition\<^sub>1 condition\<^sub>1 test\<^sub>1 automaton\<^sub>2
      alphabet\<^sub>2 initial\<^sub>2 transition\<^sub>2 condition\<^sub>2
      test\<^sub>2 automaton\<^sub>3 alphabet\<^sub>3 initial\<^sub>3
      transition\<^sub>3 condition\<^sub>3 test\<^sub>3 condition"
locale automaton_union_run
  fixes
    automaton\<^sub>1 ::
      "'a set => 'b set => ('a => 'b => 'b set) => 'c => 'd"
    and alphabet\<^sub>1 :: "'d => 'a set"
    and initial\<^sub>1 :: "'d => 'b set"
    and transition\<^sub>1 :: "'d => 'a => 'b => 'b set"
    and condition\<^sub>1 :: "'d => 'c"
    and test\<^sub>1 :: "'c => 'a stream => 'b stream => 'b => bool"
    and
    automaton\<^sub>2 ::
      "'a set => 'e set => ('a => 'e => 'e set) => 'f => 'g"
    and alphabet\<^sub>2 :: "'g => 'a set"
    and initial\<^sub>2 :: "'g => 'e set"
    and transition\<^sub>2 :: "'g => 'a => 'e => 'e set"
    and condition\<^sub>2 :: "'g => 'f"
    and test\<^sub>2 :: "'f => 'a stream => 'e stream => 'e => bool"
    and
    automaton\<^sub>3 ::
      "'a set
       => ('b + 'e) set => ('a => 'b + 'e => ('b + 'e) set) => 'h => 'i"
    and alphabet\<^sub>3 :: "'i => 'a set"
    and initial\<^sub>3 :: "'i => ('b + 'e) set"
    and transition\<^sub>3 :: "'i => 'a => 'b + 'e => ('b + 'e) set"
    and condition\<^sub>3 :: "'i => 'h"
    and
    test\<^sub>3 :: "'h => 'a stream => ('b + 'e) stream => 'b + 'e => bool"
    and condition :: "'c => 'f => 'h"
  assumes
    "automaton_union_run automaton\<^sub>1 alphabet\<^sub>1 initial\<^sub>1
      transition\<^sub>1 condition\<^sub>1 test\<^sub>1 automaton\<^sub>2
      alphabet\<^sub>2 initial\<^sub>2 transition\<^sub>2 condition\<^sub>2
      test\<^sub>2 automaton\<^sub>3 alphabet\<^sub>3 initial\<^sub>3
      transition\<^sub>3 condition\<^sub>3 test\<^sub>3 condition"
locale automaton_product_list
  fixes
    automaton\<^sub>1 ::
      "'label set
       => 'state set
          => ('label => 'state => 'state set)
             => 'condition\<^sub>1 => 'automaton\<^sub>1"
    and alphabet\<^sub>1 :: "'automaton\<^sub>1 => 'label set"
    and initial\<^sub>1 :: "'automaton\<^sub>1 => 'state set"
    and
    transition\<^sub>1 ::
      "'automaton\<^sub>1 => 'label => 'state => 'state set"
    and condition\<^sub>1 :: "'automaton\<^sub>1 => 'condition\<^sub>1"
    and
    automaton\<^sub>2 ::
      "'label set
       => 'state list set
          => ('label => 'state list => 'state list set)
             => 'condition\<^sub>2 => 'automaton\<^sub>2"
    and alphabet\<^sub>2 :: "'automaton\<^sub>2 => 'label set"
    and initial\<^sub>2 :: "'automaton\<^sub>2 => 'state list set"
    and
    transition\<^sub>2 ::
      "'automaton\<^sub>2 => 'label => 'state list => 'state list set"
    and condition\<^sub>2 :: "'automaton\<^sub>2 => 'condition\<^sub>2"
    and condition :: "'condition\<^sub>1 list => 'condition\<^sub>2"
  assumes
    "automaton_product_list automaton\<^sub>1 alphabet\<^sub>1
      initial\<^sub>1 transition\<^sub>1 condition\<^sub>1 automaton\<^sub>2
      alphabet\<^sub>2 initial\<^sub>2 transition\<^sub>2 condition\<^sub>2"
locale automaton_intersection_list_run
  fixes
    automaton\<^sub>1 ::
      "'a set => 'b set => ('a => 'b => 'b set) => 'c => 'd"
    and alphabet\<^sub>1 :: "'d => 'a set"
    and initial\<^sub>1 :: "'d => 'b set"
    and transition\<^sub>1 :: "'d => 'a => 'b => 'b set"
    and condition\<^sub>1 :: "'d => 'c"
    and test\<^sub>1 :: "'c => 'a stream => 'b stream => 'b => bool"
    and
    automaton\<^sub>2 ::
      "'a set => 'b list set => ('a => 'b list => 'b list set) => 'e => 'f"
    and alphabet\<^sub>2 :: "'f => 'a set"
    and initial\<^sub>2 :: "'f => 'b list set"
    and transition\<^sub>2 :: "'f => 'a => 'b list => 'b list set"
    and condition\<^sub>2 :: "'f => 'e"
    and
    test\<^sub>2 :: "'e => 'a stream => 'b list stream => 'b list => bool"
    and condition :: "'c list => 'e"
  assumes
    "automaton_intersection_list_run automaton\<^sub>1 alphabet\<^sub>1
      initial\<^sub>1 transition\<^sub>1 condition\<^sub>1 test\<^sub>1
      automaton\<^sub>2 alphabet\<^sub>2 initial\<^sub>2 transition\<^sub>2
      condition\<^sub>2 test\<^sub>2 condition"
locale automaton_sum_list
  fixes
    automaton\<^sub>1 ::
      "'label set
       => 'state set
          => ('label => 'state => 'state set)
             => 'condition\<^sub>1 => 'automaton\<^sub>1"
    and alphabet\<^sub>1 :: "'automaton\<^sub>1 => 'label set"
    and initial\<^sub>1 :: "'automaton\<^sub>1 => 'state set"
    and
    transition\<^sub>1 ::
      "'automaton\<^sub>1 => 'label => 'state => 'state set"
    and condition\<^sub>1 :: "'automaton\<^sub>1 => 'condition\<^sub>1"
    and
    automaton\<^sub>2 ::
      "'label set
       => (nat * 'state) set
          => ('label => nat * 'state => (nat * 'state) set)
             => 'condition\<^sub>2 => 'automaton\<^sub>2"
    and alphabet\<^sub>2 :: "'automaton\<^sub>2 => 'label set"
    and initial\<^sub>2 :: "'automaton\<^sub>2 => (nat * 'state) set"
    and
    transition\<^sub>2 ::
      "'automaton\<^sub>2 => 'label => nat * 'state => (nat * 'state) set"
    and condition\<^sub>2 :: "'automaton\<^sub>2 => 'condition\<^sub>2"
    and condition :: "'condition\<^sub>1 list => 'condition\<^sub>2"
  assumes
    "automaton_sum_list automaton\<^sub>1 alphabet\<^sub>1 initial\<^sub>1
      transition\<^sub>1 condition\<^sub>1 automaton\<^sub>2
      alphabet\<^sub>2 initial\<^sub>2 transition\<^sub>2 condition\<^sub>2"
locale automaton_union_list_run
  fixes
    automaton\<^sub>1 ::
      "'a set => 'b set => ('a => 'b => 'b set) => 'c => 'd"
    and alphabet\<^sub>1 :: "'d => 'a set"
    and initial\<^sub>1 :: "'d => 'b set"
    and transition\<^sub>1 :: "'d => 'a => 'b => 'b set"
    and condition\<^sub>1 :: "'d => 'c"
    and test\<^sub>1 :: "'c => 'a stream => 'b stream => 'b => bool"
    and
    automaton\<^sub>2 ::
      "'a set
       => (nat * 'b) set => ('a => nat * 'b => (nat * 'b) set) => 'e => 'f"
    and alphabet\<^sub>2 :: "'f => 'a set"
    and initial\<^sub>2 :: "'f => (nat * 'b) set"
    and transition\<^sub>2 :: "'f => 'a => nat * 'b => (nat * 'b) set"
    and condition\<^sub>2 :: "'f => 'e"
    and
    test\<^sub>2 ::
      "'e => 'a stream => (nat * 'b) stream => nat * 'b => bool"
    and condition :: "'c list => 'e"
  assumes
    "automaton_union_list_run automaton\<^sub>1 alphabet\<^sub>1
      initial\<^sub>1 transition\<^sub>1 condition\<^sub>1 test\<^sub>1
      automaton\<^sub>2 alphabet\<^sub>2 initial\<^sub>2 transition\<^sub>2
      condition\<^sub>2 test\<^sub>2 condition"
### theory "Transition_Systems_and_Automata.Nondeterministic"
### 6.002s elapsed time, 6.451s cpu time, 0.599s GC time
Loading theory "Transition_Systems_and_Automata.NBA" (required by "Draft.ComplementationMoreTemplates" via "Draft.Complementation" via "Draft.Ranking" via "Draft.Graph")
instantiation
  nba :: (type, type) order
  less_eq_nba == less_eq :: ('a, 'b) nba => ('a, 'b) nba => bool
  less_nba == less :: ('a, 'b) nba => ('a, 'b) nba => bool
### theory "Transition_Systems_and_Automata.NBA"
### 0.715s elapsed time, 0.775s cpu time, 0.078s GC time
Loading theory "Draft.Graph" (required by "Draft.ComplementationMoreTemplates" via "Draft.Complementation" via "Draft.Ranking")
### theory "Draft.Graph"
### 0.336s elapsed time, 0.420s cpu time, 0.089s GC time
Loading theory "Draft.Ranking" (required by "Draft.ComplementationMoreTemplates" via "Draft.Complementation")
### theory "Draft.Ranking"
### 0.496s elapsed time, 0.614s cpu time, 0.147s GC time
Loading theory "Draft.Complementation" (required by "Draft.ComplementationMoreTemplates")
### theory "Draft.Complementation"
### 0.315s elapsed time, 0.316s cpu time, 0.000s GC time
Loading theory "Draft.ComplementationMoreTemplates"
val templateLemmas =
   [("Complementation.reach_0", "reach ?A ?w 0 = initial ?A",
     template_equation
      (template_app
        (template_app
          (template_app (template_hole 2, template_var 1), template_var 0),
         template_hole 1),
       template_app (template_hole 0, template_var 1))),
    ("Complementation.reach_nodes", "reach ?A ?w ?i <= nodes ?A",
     template_inequation
      (less_equals,
       template_app
        (template_app
          (template_app (template_hole 1, template_var 2), template_var 1),
         template_var 0),
       template_app (template_hole 0, template_var 2))),
    ("Complementation.complement_finite",
     "finite (nodes ?A) ==> finite (nodes (complement ?A))",
     template_implication
      ([template_predicate
         (
            template_app
             (template_hole 4,
              template_app (template_hole 3, template_var 0))
            )],
       template_predicate
        (
           template_app
            (template_hole 2,
             template_app
              (template_hole 1,
               template_app (template_hole 0, template_var 0)))
           ))),
    ("Complementation.states_nodes",
     "?fP : nodes (complement ?A) ==> snd ?fP <= nodes ?A",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 5, template_var 1),
              template_app
               (template_hole 4,
                template_app (template_hole 3, template_var 0)))
            )],
       template_inequation
        (less_equals, template_app (template_hole 1, template_var 1),
         template_app (template_hole 0, template_var 0)))),
    ("Complementation.dom_nodes",
     "?fP : nodes (complement ?A) ==> dom (fst ?fP) <= nodes ?A",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 6, template_var 1),
              template_app
               (template_hole 5,
                template_app (template_hole 4, template_var 0)))
            )],
       template_inequation
        (less_equals,
         template_app
          (template_hole 2, template_app (template_hole 1, template_var 1)),
         template_app (template_hole 0, template_var 0)))),
    ("Complementation.reach_gunodes",
     "{?i} \<times> reach ?A ?w ?i <= gunodes ?A ?w",
     template_inequation
      (less_equals,
       template_app
        (template_app
          (template_hole 5,
           template_app
            (template_app (template_hole 4, template_var 2),
             template_hole 3)),
         t_empty),
       template_app
        (template_app
          (template_app (template_hole 1, template_var 1), template_var 0),
         template_hole 0))),
    ("Complementation.complement_language",
     "finite (nodes ?A) ==>
      language (complement ?A) = streams (alphabet ?A) - language ?A",
     template_implication
      ([template_predicate
         (
            template_app
             (template_hole 8,
              template_app (template_hole 7, template_var 0))
            )],
       template_equation
        (template_app
          (template_hole 5, template_app (template_hole 4, template_var 0)),
         template_app
          (template_app
            (template_hole 3,
             template_app
              (template_hole 2,
               template_app (template_hole 1, template_var 0))),
           template_app (template_hole 0, template_var 0))))),
    ("Complementation.reach_Suc_empty",
     "?w !! ?n ~: alphabet ?A ==> reach ?A ?w (Suc ?n) = {}",
     template_implication
      ([template_negation
         (
            template_predicate
             (
                template_app
                 (template_app
                   (template_hole 6,
                    template_app
                     (template_app (template_hole 5, template_var 2),
                      template_var 1)),
                  template_app (template_hole 4, template_var 0))
                )
            )],
       template_equation
        (template_app
          (template_app
            (template_app (template_hole 2, template_var 0),
             template_var 2),
           template_app (template_hole 1, template_var 1)),
         template_hole 0))),
    ("Complementation.complement_ranking",
     "[| ?w : language (complement ?A); !!f. ranking ?A ?w f ==> ?thesis |]
      ==> ?thesis",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 4, template_var 2),
              template_app
               (template_hole 3,
                template_app (template_hole 2, template_var 1)))
            ),
        template_predicate (template_app (template_hole 1, t_empty))],
       template_predicate (template_var 0))),
    ("Complementation.ran_nodes",
     "?fP : nodes (complement ?A) ==>
      ran (fst ?fP) <= {0..2 * card (nodes ?A)}",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 13, template_var 1),
              template_app
               (template_hole 12,
                template_app (template_hole 11, template_var 0)))
            )],
       template_inequation
        (less_equals,
         template_app
          (template_hole 9, template_app (template_hole 8, template_var 1)),
         template_app
          (template_app (template_hole 7, template_hole 6),
           template_app
            (template_app
              (template_hole 5,
               template_app
                (template_hole 4,
                 template_app (template_hole 3, template_hole 2))),
             template_app
              (template_hole 1,
               template_app (template_hole 0, template_var 0))))))),
    ("Complementation.ranking_complement",
     "[| finite (nodes ?A); ?w : streams (alphabet ?A); ranking ?A ?w ?f |]
      ==> ?w : language (complement ?A)",
     template_implication
      ([template_predicate
         (
            template_app
             (template_hole 7,
              template_app (template_hole 6, template_var 2))
            ),
        template_predicate
         (
            template_app
             (template_app (template_hole 5, template_var 1),
              template_app
               (template_hole 4,
                template_app (template_hole 3, template_var 2)))
            ),
        template_predicate
         (
            template_app
             (template_app
               (template_app (template_hole 2, template_var 2),
                template_var 1),
              template_var 0)
            )],
       template_predicate
        (
           template_app
            (template_app (template_hole 5, template_var 1),
             template_app
              (template_hole 1,
               template_app (template_hole 0, template_var 2)))
           ))),
    ("Complementation.reach_Suc",
     "reach ?A ?w (Suc ?n) =
      (if ?w !! ?n : alphabet ?A
       then \<Union> (transition ?A (?w !! ?n) ` reach ?A ?w ?n) else {})",
     template_equation
      (template_app
        (template_app
          (template_app (template_hole 9, template_var 2), template_var 1),
         template_app (template_hole 8, template_var 0)),
       template_app
        (template_app
          (template_app
            (template_hole 7,
             template_app
              (template_app
                (template_hole 6,
                 template_app
                  (template_app (template_hole 5, template_var 1),
                   template_var 0)),
               template_app (template_hole 4, template_var 2))),
           template_app
            (template_hole 3,
             template_app
              (template_app
                (template_hole 2,
                 template_app
                  (template_app (template_hole 1, template_var 2),
                   template_app
                    (template_app (template_hole 5, template_var 1),
                     template_var 0))),
               template_app
                (template_app
                  (template_app (template_hole 9, template_var 2),
                   template_var 1),
                 template_var 0)))),
         template_hole 0))),
    ("Complementation.reach_Suc_succ",
     "?w !! ?n : alphabet ?A ==>
      reach ?A ?w (Suc ?n) =
      \<Union> (transition ?A (?w !! ?n) ` reach ?A ?w ?n)",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_hole 8,
                template_app
                 (template_app (template_hole 7, template_var 2),
                  template_var 1)),
              template_app (template_hole 6, template_var 0))
            )],
       template_equation
        (template_app
          (template_app
            (template_app (template_hole 4, template_var 0),
             template_var 2),
           template_app (template_hole 3, template_var 1)),
         template_app
          (template_hole 2,
           template_app
            (template_app
              (template_hole 1,
               template_app
                (template_app (template_hole 0, template_var 0),
                 template_app
                  (template_app (template_hole 7, template_var 2),
                   template_var 1))),
             template_app
              (template_app
                (template_app (template_hole 4, template_var 0),
                 template_var 2),
               template_var 1)))))),
    ("Complementation.complement_trace_snth",
     "[| run (complement ?A) (?w ||| ?r) ?p;
         [| fst ((?p ## trace (?w ||| ?r) ?p) !! Suc ?k)
            : lr_succ ?A (?w !! ?k)
               (fst ((?p ## trace (?w ||| ?r) ?p) !! ?k));
            snd ((?p ## trace (?w ||| ?r) ?p) !! Suc ?k) =
            st_succ ?A (?w !! ?k)
             (fst ((?p ## trace (?w ||| ?r) ?p) !! Suc ?k))
             (snd ((?p ## trace (?w ||| ?r) ?p) !! ?k)) |]
         ==> ?thesis |]
      ==> ?thesis",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_hole 14,
                  template_app (template_hole 13, template_var 5)),
                template_app
                 (template_app (template_hole 12, template_var 4),
                  template_var 3)),
              template_var 2)
            ),
        template_implication
         ([template_predicate
            (
               template_app
                (template_app
                  (template_hole 11,
                   template_app
                    (template_hole 10,
                     template_app
                      (template_app
                        (template_hole 9,
                         template_app
                          (template_app (template_hole 8, template_var 2),
                           template_app
                            (template_app
                              (template_app (template_hole 7, t_empty),
                               template_app
                                (template_app
                                  (template_hole 12, template_var 4),
                                 template_var 3)),
                             template_var 2))),
                       template_app (template_hole 5, template_var 1)))),
                 template_app
                  (template_app
                    (template_app (template_hole 4, template_var 5),
                     template_app
                      (template_app (template_hole 3, template_var 4),
                       template_var 1)),
                   template_app
                    (template_hole 10,
                     template_app
                      (template_app
                        (template_hole 9,
                         template_app
                          (template_app (template_hole 8, template_var 2),
                           template_app
                            (template_app
                              (template_app (template_hole 7, t_empty),
                               template_app
                                (template_app
                                  (template_hole 12, template_var 4),
                                 template_var 3)),
                             template_var 2))),
                       template_var 1))))
               )],
          template_implication
           ([template_equation
              (template_app
                (template_hole 1,
                 template_app
                  (template_app
                    (template_hole 9,
                     template_app
                      (template_app (template_hole 8, template_var 2),
                       template_app
                        (template_app
                          (template_app (template_hole 7, t_empty),
                           template_app
                            (template_app
                              (template_hole 12, template_var 4),
                             template_var 3)),
                         template_var 2))),
                   template_app (template_hole 5, template_var 1))),
               template_app
                (template_app
                  (template_app
                    (template_app (template_hole 0, template_var 5),
                     template_app
                      (template_app (template_hole 3, template_var 4),
                       template_var 1)),
                   template_app
                    (template_hole 10,
                     template_app
                      (template_app
                        (template_hole 9,
                         template_app
                          (template_app (template_hole 8, template_var 2),
                           template_app
                            (template_app
                              (template_app (template_hole 7, t_empty),
                               template_app
                                (template_app
                                  (template_hole 12, template_var 4),
                                 template_var 3)),
                             template_var 2))),
                       template_app (template_hole 5, template_var 1)))),
                 template_app
                  (template_hole 1,
                   template_app
                    (template_app
                      (template_hole 9,
                       template_app
                        (template_app (template_hole 8, template_var 2),
                         template_app
                          (template_app
                            (template_app (template_hole 7, t_empty),
                             template_app
                              (template_app
                                (template_hole 12, template_var 4),
                               template_var 3)),
                           template_var 2))),
                     template_var 1))))],
            template_predicate (template_var 0)))],
       template_predicate (template_var 0)))]:
   (string * thm * template) list
### theory "Draft.ComplementationMoreTemplates"
### 0.412s elapsed time, 0.557s cpu time, 0.000s GC time
val it = (): unit
