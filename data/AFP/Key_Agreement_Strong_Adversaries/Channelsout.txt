Loading theory "Draft.Messages" (required by "Draft.ChannelsTemplates" via "Draft.Channels" via "Draft.Message_derivation")
Loading theory "HOL-Library.Function_Algebras" (required by "Draft.ChannelsTemplates" via "Draft.ExtrEqs" via "HOL-Library.BigO")
Loading theory "HOL-Library.Nat_Bijection" (required by "Draft.ChannelsTemplates" via "Draft.ExtrEqs" via "HOL-Library.Stream")
Loading theory "HOL-Library.Set_Algebras" (required by "Draft.ChannelsTemplates" via "Draft.ExtrEqs" via "HOL-Library.BigO")
instantiation
  set :: (plus) plus
  plus_set == plus :: 'a set => 'a set => 'a set
instantiation
  fun :: (type, plus) plus
  plus_fun == plus :: ('a => 'b) => ('a => 'b) => 'a => 'b
instantiation
  set :: (times) times
  times_set == times :: 'a set => 'a set => 'a set
instantiation
  fun :: (type, zero) zero
  zero_fun == zero_class.zero :: 'a => 'b
instantiation
  set :: (zero) zero
  zero_set == zero_class.zero :: 'a set
instantiation
  fun :: (type, times) times
  times_fun == times :: ('a => 'b) => ('a => 'b) => 'a => 'b
instantiation
  set :: (one) one
  one_set == one_class.one :: 'a set
instantiation
  fun :: (type, one) one
  one_fun == one_class.one :: 'a => 'b
Found termination order: "(%p. size (snd p)) <*mlex*> {}"
### theory "HOL-Library.Function_Algebras"
### 0.156s elapsed time, 0.630s cpu time, 0.043s GC time
Loading theory "HOL-Library.Tree" (required by "Draft.ChannelsTemplates" via "Draft.ExtrEqs" via "Draft.Templates")
### theory "HOL-Library.Set_Algebras"
### 0.200s elapsed time, 0.812s cpu time, 0.043s GC time
Loading theory "HOL-Library.BigO" (required by "Draft.ChannelsTemplates" via "Draft.ExtrEqs")
Found termination order: "size_list size <*mlex*> {}"
### theory "HOL-Library.Nat_Bijection"
### 0.374s elapsed time, 1.486s cpu time, 0.122s GC time
Loading theory "HOL-Library.Stream" (required by "Draft.ChannelsTemplates" via "Draft.ExtrEqs")
Found termination order: "{}"
Found termination order: "{}"
consts
  left :: "'a tree => 'a tree"
consts
  right :: "'a tree => 'a tree"
Found termination order: "size <*mlex*> {}"
consts
  shift :: "'a list => 'a stream => 'a stream"
Proofs for coinductive predicate(s) "streamsp"
  Proving monotonicity ...
Found termination order: "size <*mlex*> {}"
consts
  snth :: "'a stream => nat => 'a"
Found termination order: "size <*mlex*> {}"
consts
  stake :: "nat => 'a stream => 'a list"
consts
  sdrop :: "nat => 'a stream => 'a stream"
class height = type +
  fixes height :: "'a => nat"
instantiation
  tree :: (type) height
  height_tree == height :: 'a tree => nat
consts
  sfilter :: "('a => bool) => 'a stream => 'a stream"
consts
  cycle :: "'a list => 'a stream"
Found termination order: "size <*mlex*> {}"
### theory "HOL-Library.BigO"
### 1.015s elapsed time, 3.805s cpu time, 0.882s GC time
consts
  siterate :: "('a => 'a) => 'a => 'a stream"
Found termination order: "size <*mlex*> {}"
consts
  flat :: "'a list stream => 'a stream"
Found termination order: "size <*mlex*> {}"
consts
  sinterleave :: "'a stream => 'a stream => 'a stream"
consts
  szip :: "'a stream => 'b stream => ('a * 'b) stream"
consts
  smap2 :: "('a => 'b => 'c) => 'a stream => 'b stream => 'c stream"
Found termination order: "size <*mlex*> {}"
### theory "HOL-Library.Stream"
### 1.063s elapsed time, 3.804s cpu time, 0.843s GC time
Found termination order: "size <*mlex*> {}"
Found termination order: "size <*mlex*> {}"
Found termination order: "size <*mlex*> {}"
Found termination order: "(%p. size (fst p)) <*mlex*> {}"
Found termination order: "size <*mlex*> {}"
Found termination order: "(%p. size (snd p)) <*mlex*> {}"
Found termination order: "size <*mlex*> {}"
### theory "HOL-Library.Tree"
### 2.001s elapsed time, 6.203s cpu time, 1.131s GC time
Loading theory "Draft.Templates" (required by "Draft.ChannelsTemplates" via "Draft.ExtrEqs")
datatype template_term
=
     t_empty
   | template_app of template_term * template_term
   | template_hole of int
   | template_var of int
datatype sign
= equals | greater_equals | greater_than | less_equals | less_than
datatype template
=
     template_bimplication of template * template
   | template_dunno
   | template_equation of template_term * template_term
   | template_implication of template list * template
   | template_inequation of sign * template_term * template_term
   | template_negation of template
   | template_predicate of template_term
constructor t_empty: template_term
constructor template_app: template_term * template_term -> template_term
constructor template_hole: int -> template_term
constructor template_var: int -> template_term
constructor equals: sign
constructor greater_equals: sign
constructor greater_than: sign
constructor less_equals: sign
constructor less_than: sign
constructor template_bimplication: template * template -> template
constructor template_dunno: template
constructor template_equation: template_term * template_term -> template
constructor template_implication: template list * template -> template
constructor template_inequation:
   sign * template_term * template_term -> template
constructor template_negation: template -> template
constructor template_predicate: template_term -> template
val vfs = fn: term -> (indexname * typ) list * (string * typ) list
val indexOf = fn: ''a list -> ''a -> int -> int
val has_eq = fn: term -> bool
val term2template = fn:
   (indexname * typ) list -> (string * typ) list -> term -> template_term
val lemma2predicate = fn: term -> term -> template
val makeTemplatewithContext = fn: term -> term -> template
val lemma2template = fn: term -> template
val thm2template = fn: thm -> template
val tterm2string = fn: template_term -> string
val template2string = fn: template -> string
val t = "height ?t <= size ?t": thm
val th =
   Const ("HOL.Trueprop", "bool => prop") $
     (Const ("Orderings.ord_class.less_eq", "nat => nat => bool") $
       (Const ("Tree.height_class.height", "?'a tree => nat") $
         Var (("t", 0), "?'a tree")) $
       (Const ("Nat.size_class.size", "?'a tree => nat") $
         Var (("t", 0), "?'a tree"))):
   term
### theory "Draft.Templates"
### 0.053s elapsed time, 0.105s cpu time, 0.000s GC time
Loading theory "Draft.ExtrEqs" (required by "Draft.ChannelsTemplates")
Found termination order: "{}"
Proofs for inductive predicate(s) "eq"
  Proving monotonicity ...
val eqpattern =
   Pattern
    (
       Const ("HOL.Trueprop", "bool => prop") $
         (Const ("HOL.eq", "?'a => ?'a => bool") $
           Var (("_dummy_", 1), "?'a") $ Var (("_dummy_", 2), "?'a"))
       ):
   term Find_Theorems.criterion
val badeqpattern = Pattern (Const ("Pure.eq", "?'a => ?'a => prop")):
   term Find_Theorems.criterion
val undefpattern =
   Pattern
    (
       Const ("HOL.Trueprop", "bool => prop") $
         (Const ("HOL.eq", "?'a => ?'a => bool") $
           Var (("_dummy_", 1), "?'a") $ Const ("HOL.undefined", "?'a"))
       ):
   term Find_Theorems.criterion
val thmpattern =
   Pattern
    (Const ("HOL.Trueprop", "bool => prop") $ Var (("_dummy_", 1), "bool")):
   term Find_Theorems.criterion
val badnames =
   ["*nitpick*", "*Nitpick*", "*full_exhaustive*", "*_def*", "Enum.finite*",
    "*Quickcheck*", "ATP*", "*Nunchaku*", "*Code*", "*BNF*", "*SMT*",
    "*.*.*"]:
   string list
val unwanted_names =
   [(false, Name "*nitpick*"), (false, Name "*Nitpick*"),
    (false, Name "*full_exhaustive*"), (false, Name "*_def*"),
    (false, Name "Enum.finite*"), (false, Name "*Quickcheck*"),
    (false, Name "ATP*"), (false, Name "*Nunchaku*"),
    (false, Name "*Code*"), (false, Name "*BNF*"), (false, Name "*SMT*"),
    (false, Name "*.*.*")]:
   (bool * term Find_Theorems.criterion) list
val has_vars = fn: term -> bool
val get_all_eqs = fn: string -> Proof.context -> (string * thm) list
val get_all_thms = fn: string -> Proof.context -> (string * thm) list
val get_noneq_thms = fn: string -> Proof.context -> (string * thm) list
val template_eqs = fn:
   string -> Proof.context -> (string * thm * template) list
val template_thms = fn:
   string -> Proof.context -> (string * thm * template) list
### theory "Draft.ExtrEqs"
### 0.765s elapsed time, 1.869s cpu time, 0.826s GC time
### theory "Draft.Messages"
### 3.279s elapsed time, 9.165s cpu time, 2.066s GC time
Loading theory "Draft.Message_derivation" (required by "Draft.ChannelsTemplates" via "Draft.Channels")
Proofs for inductive predicate(s) "synthp"
  Proving monotonicity ...
Proofs for inductive predicate(s) "analzp"
  Proving monotonicity ...
[| ?x : analz ?H; !!X. X : ?H ==> ?P X;
   !!X Y.
      [| \<langle>X, Y\<rangle> : analz ?H; ?P \<langle>X, Y\<rangle> |]
      ==> ?P X;
   !!X Y.
      [| \<langle>X, Y\<rangle> : analz ?H; ?P \<langle>X, Y\<rangle> |]
      ==> ?P Y;
   !!X Y.
      [| Enc X Y : analz ?H; ?P (Enc X Y);
         Y : synth (analz ?H Int Collect ?P) |]
      ==> ?P X;
   !!X Y.
      [| Aenc X (pubK Y) : analz ?H; ?P (Aenc X (pubK Y));
         priK Y : analz ?H; ?P (priK Y) |]
      ==> ?P X;
   !!X Y.
      [| Aenc X (epubK Y) : analz ?H; ?P (Aenc X (epubK Y));
         epriK Y : synth (analz ?H Int Collect ?P) |]
      ==> ?P X;
   !!X Y.
      [| Sign X (priK Y) : analz ?H; ?P (Sign X (priK Y));
         pubK Y : analz ?H; ?P (pubK Y) |]
      ==> ?P X |]
==> ?P ?x
Proofs for inductive predicate(s) "partsp"
  Proving monotonicity ...
### theory "Draft.Message_derivation"
### 0.554s elapsed time, 0.597s cpu time, 0.039s GC time
Loading theory "Draft.Channels" (required by "Draft.ChannelsTemplates")
Proofs for inductive predicate(s) "extrp"
  Proving monotonicity ...
Proofs for inductive predicate(s) "fakep"
  Proving monotonicity ...
### theory "Draft.Channels"
### 0.391s elapsed time, 0.437s cpu time, 0.064s GC time
Loading theory "Draft.ChannelsTemplates"
val templateLemmas =
   [("Channels.extr_empty_chan", "extr ?bad ?IK {} = ?IK",
     template_equation
      (template_app
        (template_app
          (template_app (template_hole 1, template_var 1), template_var 0),
         template_hole 0),
       template_var 0)),
    ("Channels.IK_subset_extr", "?IK <= extr ?bad ?IK ?chan",
     template_inequation
      (less_equals, template_var 2,
       template_app
        (template_app
          (template_app (template_hole 0, template_var 1), template_var 2),
         template_var 0))),
    ("Channels.chan_subset_fake", "?chan <= fake ?bad ?IK ?chan",
     template_inequation
      (less_equals, template_var 2,
       template_app
        (template_app
          (template_app (template_hole 0, template_var 1), template_var 0),
         template_var 2))),
    ("Channels.dy_fake_msg_empty", "dy_fake_msg ?bad {} {} = synth {}",
     template_equation
      (template_app
        (template_app
          (template_app (template_hole 3, template_var 0), template_hole 2),
         template_hole 1),
       template_app (template_hole 0, template_hole 2))),
    ("Channels.extr_subset_dy_fake_msg",
     "extr ?bad ?IK ?chan <= dy_fake_msg ?bad ?IK ?chan",
     template_inequation
      (less_equals,
       template_app
        (template_app
          (template_app (template_hole 1, template_var 2), template_var 1),
         template_var 0),
       template_app
        (template_app
          (template_app (template_hole 0, template_var 2), template_var 1),
         template_var 0))),
    ("Channels.fake_intros", "?M : ?chan ==> ?M : fake ?bad ?IK ?chan",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 1, template_var 3),
              template_var 2)
            )],
       template_predicate
        (
           template_app
            (template_app (template_hole 1, template_var 3),
             template_app
              (template_app
                (template_app (template_hole 0, template_var 1),
                 template_var 0),
               template_var 2))
           ))),
    ("Channels.extr_insert_IK_eq",
     "extr ?bad (insert ?X ?IK) ?CH = insert ?X (extr ?bad ?IK ?CH)",
     template_equation
      (template_app
        (template_app
          (template_app (template_hole 1, template_var 3),
           template_app
            (template_app (template_hole 0, template_var 2),
             template_var 1)),
         template_var 0),
       template_app
        (template_app (template_hole 0, template_var 2),
         template_app
          (template_app
            (template_app (template_hole 1, template_var 3),
             template_var 1),
           template_var 0)))),
    ("Channels.dy_fake_msg_mono_ik",
     "?G <= ?H ==> dy_fake_msg ?bad ?G ?C <= dy_fake_msg ?bad ?H ?C",
     template_implication
      ([template_inequation (less_equals, template_var 3, template_var 2)],
       template_inequation
        (less_equals,
         template_app
          (template_app
            (template_app (template_hole 0, template_var 1),
             template_var 3),
           template_var 0),
         template_app
          (template_app
            (template_app (template_hole 0, template_var 1),
             template_var 2),
           template_var 0)))),
    ("Channels.fake_mono_ik",
     "?IK <= ?IK' ==> fake ?bad ?IK ?chan <= fake ?bad ?IK' ?chan",
     template_implication
      ([template_inequation (less_equals, template_var 3, template_var 2)],
       template_inequation
        (less_equals,
         template_app
          (template_app
            (template_app (template_hole 0, template_var 1),
             template_var 3),
           template_var 0),
         template_app
          (template_app
            (template_app (template_hole 0, template_var 1),
             template_var 2),
           template_var 0)))),
    ("Channels.extr_mono_IK",
     "?IK1.0 <= ?IK2.0 ==> extr ?bad ?IK1.0 ?H <= extr ?bad ?IK2.0 ?H",
     template_implication
      ([template_inequation (less_equals, template_var 3, template_var 2)],
       template_inequation
        (less_equals,
         template_app
          (template_app
            (template_app (template_hole 0, template_var 1),
             template_var 3),
           template_var 0),
         template_app
          (template_app
            (template_app (template_hole 0, template_var 1),
             template_var 2),
           template_var 0)))),
    ("Channels.dy_fake_chan_mono_ik",
     "?T <= ?T' ==> dy_fake_chan ?bad ?T ?C <= dy_fake_chan ?bad ?T' ?C",
     template_implication
      ([template_inequation (less_equals, template_var 3, template_var 2)],
       template_inequation
        (less_equals,
         template_app
          (template_app
            (template_app (template_hole 0, template_var 1),
             template_var 3),
           template_var 0),
         template_app
          (template_app
            (template_app (template_hole 0, template_var 1),
             template_var 2),
           template_var 0)))),
    ("Channels.dy_fake_chan_mono_chan",
     "?C <= ?C' ==> dy_fake_chan ?bad ?T ?C <= dy_fake_chan ?bad ?T ?C'",
     template_implication
      ([template_inequation (less_equals, template_var 3, template_var 2)],
       template_inequation
        (less_equals,
         template_app
          (template_app
            (template_app (template_hole 0, template_var 1),
             template_var 0),
           template_var 3),
         template_app
          (template_app
            (template_app (template_hole 0, template_var 1),
             template_var 0),
           template_var 2)))),
    ("Channels.dy_fake_msg_mono_chan",
     "?G <= ?H ==> dy_fake_msg ?bad ?I ?G <= dy_fake_msg ?bad ?I ?H",
     template_implication
      ([template_inequation (less_equals, template_var 3, template_var 2)],
       template_inequation
        (less_equals,
         template_app
          (template_app
            (template_app (template_hole 0, template_var 1),
             template_var 0),
           template_var 3),
         template_app
          (template_app
            (template_app (template_hole 0, template_var 1),
             template_var 0),
           template_var 2)))),
    ("Channels.extr_mono_chan",
     "?G <= ?H ==> extr ?bad ?IK ?G <= extr ?bad ?IK ?H",
     template_implication
      ([template_inequation (less_equals, template_var 3, template_var 2)],
       template_inequation
        (less_equals,
         template_app
          (template_app
            (template_app (template_hole 0, template_var 1),
             template_var 0),
           template_var 3),
         template_app
          (template_app
            (template_app (template_hole 0, template_var 1),
             template_var 0),
           template_var 2)))),
    ("Channels.fake_mono_chan",
     "?chan <= ?chan' ==> fake ?bad ?IK ?chan <= fake ?bad ?IK ?chan'",
     template_implication
      ([template_inequation (less_equals, template_var 3, template_var 2)],
       template_inequation
        (less_equals,
         template_app
          (template_app
            (template_app (template_hole 0, template_var 1),
             template_var 0),
           template_var 3),
         template_app
          (template_app
            (template_app (template_hole 0, template_var 1),
             template_var 0),
           template_var 2)))),
    ("Channels.dy_fake_msg_mono_bad",
     "?bad <= ?bad' ==> dy_fake_msg ?bad ?I ?C <= dy_fake_msg ?bad' ?I ?C",
     template_implication
      ([template_inequation (less_equals, template_var 3, template_var 2)],
       template_inequation
        (less_equals,
         template_app
          (template_app
            (template_app (template_hole 0, template_var 3),
             template_var 1),
           template_var 0),
         template_app
          (template_app
            (template_app (template_hole 0, template_var 2),
             template_var 1),
           template_var 0)))),
    ("Channels.extr_mono_bad",
     "?bad <= ?bad' ==> extr ?bad ?IK ?H <= extr ?bad' ?IK ?H",
     template_implication
      ([template_inequation (less_equals, template_var 3, template_var 2)],
       template_inequation
        (less_equals,
         template_app
          (template_app
            (template_app (template_hole 0, template_var 3),
             template_var 1),
           template_var 0),
         template_app
          (template_app
            (template_app (template_hole 0, template_var 2),
             template_var 1),
           template_var 0)))),
    ("Channels.dy_fake_chan_mono_bad",
     "?bad <= ?bad' ==>
      dy_fake_chan ?bad ?I ?C <= dy_fake_chan ?bad' ?I ?C",
     template_implication
      ([template_inequation (less_equals, template_var 3, template_var 2)],
       template_inequation
        (less_equals,
         template_app
          (template_app
            (template_app (template_hole 0, template_var 3),
             template_var 1),
           template_var 0),
         template_app
          (template_app
            (template_app (template_hole 0, template_var 2),
             template_var 1),
           template_var 0)))),
    ("Channels.fake_mono_bad",
     "?bad <= ?bad' ==> fake ?bad ?IK ?chan <= fake ?bad' ?IK ?chan",
     template_implication
      ([template_inequation (less_equals, template_var 3, template_var 2)],
       template_inequation
        (less_equals,
         template_app
          (template_app
            (template_app (template_hole 0, template_var 3),
             template_var 1),
           template_var 0),
         template_app
          (template_app
            (template_app (template_hole 0, template_var 2),
             template_var 1),
           template_var 0)))),
    ("Channels.dy_fake_msg_subset_synth_analz",
     "extr ?bad ?IK ?chan <= ?T ==>
      dy_fake_msg ?bad ?IK ?chan <= synth (analz ?T)",
     template_implication
      ([template_inequation
         (less_equals,
          template_app
           (template_app
             (template_app (template_hole 3, template_var 3),
              template_var 2),
            template_var 1),
          template_var 0)],
       template_inequation
        (less_equals,
         template_app
          (template_app
            (template_app (template_hole 2, template_var 3),
             template_var 2),
           template_var 1),
         template_app
          (template_hole 1,
           template_app (template_hole 0, template_var 0))))),
    ("Channels.dy_fake_msg_insert",
     "?M : dy_fake_msg ?bad ?I ?C ==>
      ?M : dy_fake_msg ?bad ?I (insert ?X ?C)",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 2, template_var 4),
              template_app
               (template_app
                 (template_app (template_hole 1, template_var 3),
                  template_var 2),
                template_var 1))
            )],
       template_predicate
        (
           template_app
            (template_app (template_hole 2, template_var 4),
             template_app
              (template_app
                (template_app (template_hole 1, template_var 3),
                 template_var 2),
               template_app
                (template_app (template_hole 0, template_var 0),
                 template_var 1)))
           ))),
    ("Channels.extr_insert",
     "?M : extr ?bad ?IK ?H ==> ?M : extr ?bad ?IK (insert ?C ?H)",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 2, template_var 4),
              template_app
               (template_app
                 (template_app (template_hole 1, template_var 3),
                  template_var 2),
                template_var 1))
            )],
       template_predicate
        (
           template_app
            (template_app (template_hole 2, template_var 4),
             template_app
              (template_app
                (template_app (template_hole 1, template_var 3),
                 template_var 2),
               template_app
                (template_app (template_hole 0, template_var 0),
                 template_var 1)))
           ))),
    ("Channels.extr_insert_chan_eq",
     "extr ?bad ?IK (insert ?X ?CH) =
      extr ?bad ?IK {?X} Un extr ?bad ?IK ?CH",
     template_equation
      (template_app
        (template_app
          (template_app (template_hole 3, template_var 3), template_var 2),
         template_app
          (template_app (template_hole 2, template_var 1), template_var 0)),
       template_app
        (template_app
          (template_hole 1,
           template_app
            (template_app
              (template_app (template_hole 3, template_var 3),
               template_var 2),
             template_app
              (template_app (template_hole 2, template_var 1),
               template_hole 0))),
         template_app
          (template_app
            (template_app (template_hole 3, template_var 3),
             template_var 2),
           template_var 0)))),
    ("Channels.synth_analz_insert_dy_fake_msg",
     "?M : dy_fake_msg ?bad ?IK ?CH ==>
      synth (analz (insert ?M ?IK)) <= dy_fake_msg ?bad ?IK ?CH",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 5, template_var 3),
              template_app
               (template_app
                 (template_app (template_hole 4, template_var 2),
                  template_var 1),
                template_var 0))
            )],
       template_inequation
        (less_equals,
         template_app
          (template_hole 2,
           template_app
            (template_hole 1,
             template_app
              (template_app (template_hole 0, template_var 3),
               template_var 1))),
         template_app
          (template_app
            (template_app (template_hole 4, template_var 2),
             template_var 1),
           template_var 0)))),
    ("Channels.dy_fake_msg_extr",
     "extr ?bad ?ik ?chan <= synth (analz ?X) ==>
      dy_fake_msg ?bad ?ik ?chan <= synth (analz ?X)",
     template_implication
      ([template_inequation
         (less_equals,
          template_app
           (template_app
             (template_app (template_hole 3, template_var 3),
              template_var 2),
            template_var 1),
          template_app
           (template_hole 2,
            template_app (template_hole 1, template_var 0)))],
       template_inequation
        (less_equals,
         template_app
          (template_app
            (template_app (template_hole 0, template_var 3),
             template_var 2),
           template_var 1),
         template_app
          (template_hole 2,
           template_app (template_hole 1, template_var 0))))),
    ("Channels.dy_fake_msg_insert_dy_fake_msg",
     "?M : dy_fake_msg ?bad ?IK ?CH ==>
      dy_fake_msg ?bad (insert ?M ?IK) ?CH <= dy_fake_msg ?bad ?IK ?CH",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 3, template_var 3),
              template_app
               (template_app
                 (template_app (template_hole 2, template_var 2),
                  template_var 1),
                template_var 0))
            )],
       template_inequation
        (less_equals,
         template_app
          (template_app
            (template_app (template_hole 2, template_var 2),
             template_app
              (template_app (template_hole 0, template_var 3),
               template_var 1)),
           template_var 0),
         template_app
          (template_app
            (template_app (template_hole 2, template_var 2),
             template_var 1),
           template_var 0)))),
    ("Channels.extr_insert_dy_fake_msg",
     "?M : dy_fake_msg ?bad ?IK ?CH ==>
      extr ?bad (insert ?M ?IK) ?CH <= dy_fake_msg ?bad ?IK ?CH",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 4, template_var 3),
              template_app
               (template_app
                 (template_app (template_hole 3, template_var 2),
                  template_var 1),
                template_var 0))
            )],
       template_inequation
        (less_equals,
         template_app
          (template_app
            (template_app (template_hole 1, template_var 2),
             template_app
              (template_app (template_hole 0, template_var 3),
               template_var 1)),
           template_var 0),
         template_app
          (template_app
            (template_app (template_hole 3, template_var 2),
             template_var 1),
           template_var 0)))),
    ("Channels.dy_fake_chan_extr_insert",
     "?M : dy_fake_chan ?bad ?IK ?CH ==>
      extr ?bad ?IK (insert ?M ?CH) <= dy_fake_msg ?bad ?IK ?CH",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 5, template_var 3),
              template_app
               (template_app
                 (template_app (template_hole 4, template_var 2),
                  template_var 1),
                template_var 0))
            )],
       template_inequation
        (less_equals,
         template_app
          (template_app
            (template_app (template_hole 2, template_var 2),
             template_var 1),
           template_app
            (template_app (template_hole 1, template_var 3),
             template_var 0)),
         template_app
          (template_app
            (template_app (template_hole 0, template_var 2),
             template_var 1),
           template_var 0)))),
    ("Channels.dy_fake_msg_monotone_ik",
     "[| ?c : dy_fake_msg ?bad ?G ?C; ?G <= ?H |]
      ==> ?c : dy_fake_msg ?bad ?H ?C",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 2, template_var 4),
              template_app
               (template_app
                 (template_app (template_hole 1, template_var 3),
                  template_var 2),
                template_var 1))
            ),
        template_inequation (less_equals, template_var 2, template_var 0)],
       template_predicate
        (
           template_app
            (template_app (template_hole 2, template_var 4),
             template_app
              (template_app
                (template_app (template_hole 1, template_var 3),
                 template_var 0),
               template_var 1))
           ))),
    ("Channels.dy_fake_msg_monotone_bad",
     "[| ?c : dy_fake_msg ?bad ?I ?C; ?bad <= ?bad' |]
      ==> ?c : dy_fake_msg ?bad' ?I ?C",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 2, template_var 4),
              template_app
               (template_app
                 (template_app (template_hole 1, template_var 3),
                  template_var 2),
                template_var 1))
            ),
        template_inequation (less_equals, template_var 3, template_var 0)],
       template_predicate
        (
           template_app
            (template_app (template_hole 2, template_var 4),
             template_app
              (template_app
                (template_app (template_hole 1, template_var 0),
                 template_var 2),
               template_var 1))
           ))),
    ("Channels.dy_fake_msg_monotone_chan",
     "[| ?c : dy_fake_msg ?bad ?I ?G; ?G <= ?H |]
      ==> ?c : dy_fake_msg ?bad ?I ?H",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 2, template_var 4),
              template_app
               (template_app
                 (template_app (template_hole 1, template_var 3),
                  template_var 2),
                template_var 1))
            ),
        template_inequation (less_equals, template_var 1, template_var 0)],
       template_predicate
        (
           template_app
            (template_app (template_hole 2, template_var 4),
             template_app
              (template_app
                (template_app (template_hole 1, template_var 3),
                 template_var 2),
               template_var 0))
           ))),
    ("Channels.extr_monotone_chan",
     "[| ?c : extr ?bad ?IK ?G; ?G <= ?H |] ==> ?c : extr ?bad ?IK ?H",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 2, template_var 4),
              template_app
               (template_app
                 (template_app (template_hole 1, template_var 3),
                  template_var 2),
                template_var 1))
            ),
        template_inequation (less_equals, template_var 1, template_var 0)],
       template_predicate
        (
           template_app
            (template_app (template_hole 2, template_var 4),
             template_app
              (template_app
                (template_app (template_hole 1, template_var 3),
                 template_var 2),
               template_var 0))
           ))),
    ("Channels.extr_monotone_bad",
     "[| ?c : extr ?bad ?IK ?H; ?bad <= ?bad' |]
      ==> ?c : extr ?bad' ?IK ?H",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 2, template_var 4),
              template_app
               (template_app
                 (template_app (template_hole 1, template_var 3),
                  template_var 2),
                template_var 1))
            ),
        template_inequation (less_equals, template_var 3, template_var 0)],
       template_predicate
        (
           template_app
            (template_app (template_hole 2, template_var 4),
             template_app
              (template_app
                (template_app (template_hole 1, template_var 0),
                 template_var 2),
               template_var 1))
           ))),
    ("Channels.extr_monotone_IK",
     "[| ?c : extr ?bad ?IK1.0 ?H; ?IK1.0 <= ?IK2.0 |]
      ==> ?c : extr ?bad ?IK2.0 ?H",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 2, template_var 4),
              template_app
               (template_app
                 (template_app (template_hole 1, template_var 3),
                  template_var 2),
                template_var 1))
            ),
        template_inequation (less_equals, template_var 2, template_var 0)],
       template_predicate
        (
           template_app
            (template_app (template_hole 2, template_var 4),
             template_app
              (template_app
                (template_app (template_hole 1, template_var 3),
                 template_var 0),
               template_var 1))
           ))),
    ("Channels.dy_fake_chan_monotone_bad",
     "[| ?c : dy_fake_chan ?bad ?I ?C; ?bad <= ?bad' |]
      ==> ?c : dy_fake_chan ?bad' ?I ?C",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 2, template_var 4),
              template_app
               (template_app
                 (template_app (template_hole 1, template_var 3),
                  template_var 2),
                template_var 1))
            ),
        template_inequation (less_equals, template_var 3, template_var 0)],
       template_predicate
        (
           template_app
            (template_app (template_hole 2, template_var 4),
             template_app
              (template_app
                (template_app (template_hole 1, template_var 0),
                 template_var 2),
               template_var 1))
           ))),
    ("Channels.dy_fake_chan_monotone_ik",
     "[| ?c : dy_fake_chan ?bad ?T ?C; ?T <= ?T' |]
      ==> ?c : dy_fake_chan ?bad ?T' ?C",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 2, template_var 4),
              template_app
               (template_app
                 (template_app (template_hole 1, template_var 3),
                  template_var 2),
                template_var 1))
            ),
        template_inequation (less_equals, template_var 2, template_var 0)],
       template_predicate
        (
           template_app
            (template_app (template_hole 2, template_var 4),
             template_app
              (template_app
                (template_app (template_hole 1, template_var 3),
                 template_var 0),
               template_var 1))
           ))),
    ("Channels.dy_fake_chan_monotone_chan",
     "[| ?c : dy_fake_chan ?bad ?T ?C; ?C <= ?C' |]
      ==> ?c : dy_fake_chan ?bad ?T ?C'",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 2, template_var 4),
              template_app
               (template_app
                 (template_app (template_hole 1, template_var 3),
                  template_var 2),
                template_var 1))
            ),
        template_inequation (less_equals, template_var 1, template_var 0)],
       template_predicate
        (
           template_app
            (template_app (template_hole 2, template_var 4),
             template_app
              (template_app
                (template_app (template_hole 1, template_var 3),
                 template_var 2),
               template_var 0))
           ))),
    ("Channels.fake_monotone_ik",
     "[| ?c : fake ?bad ?IK ?chan; ?IK <= ?IK' |]
      ==> ?c : fake ?bad ?IK' ?chan",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 2, template_var 4),
              template_app
               (template_app
                 (template_app (template_hole 1, template_var 3),
                  template_var 2),
                template_var 1))
            ),
        template_inequation (less_equals, template_var 2, template_var 0)],
       template_predicate
        (
           template_app
            (template_app (template_hole 2, template_var 4),
             template_app
              (template_app
                (template_app (template_hole 1, template_var 3),
                 template_var 0),
               template_var 1))
           ))),
    ("Channels.fake_monotone_chan",
     "[| ?c : fake ?bad ?IK ?chan; ?chan <= ?chan' |]
      ==> ?c : fake ?bad ?IK ?chan'",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 2, template_var 4),
              template_app
               (template_app
                 (template_app (template_hole 1, template_var 3),
                  template_var 2),
                template_var 1))
            ),
        template_inequation (less_equals, template_var 1, template_var 0)],
       template_predicate
        (
           template_app
            (template_app (template_hole 2, template_var 4),
             template_app
              (template_app
                (template_app (template_hole 1, template_var 3),
                 template_var 2),
               template_var 0))
           ))),
    ("Channels.fake_monotone_bad",
     "[| ?c : fake ?bad ?IK ?chan; ?bad <= ?bad' |]
      ==> ?c : fake ?bad' ?IK ?chan",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 2, template_var 4),
              template_app
               (template_app
                 (template_app (template_hole 1, template_var 3),
                  template_var 2),
                template_var 1))
            ),
        template_inequation (less_equals, template_var 3, template_var 0)],
       template_predicate
        (
           template_app
            (template_app (template_hole 2, template_var 4),
             template_app
              (template_app
                (template_app (template_hole 1, template_var 0),
                 template_var 2),
               template_var 1))
           ))),
    ("Channels.extrp_extr_eq",
     "extrp (%x. x : ?bad) (%x. x : ?IK) (%x. x : ?H) =
      (%x. x : extr ?bad ?IK ?H)",
     template_equation
      (template_app
        (template_app (template_app (template_hole 4, t_empty), t_empty),
         t_empty),
       t_empty)),
    ("Channels.fakep_fake_eq",
     "fakep (%x. x : ?bad) (%x. x : ?IK) (%x. x : ?chan) =
      (%x. x : fake ?bad ?IK ?chan)",
     template_equation
      (template_app
        (template_app (template_app (template_hole 4, t_empty), t_empty),
         t_empty),
       t_empty)),
    ("Channels.extr_fake",
     "?X : fake ?bad ?IK ?chan ==>
      extr ?bad ?IK' {?X} <= ?IK Un extr ?bad ?IK' ?chan",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 6, template_var 4),
              template_app
               (template_app
                 (template_app (template_hole 5, template_var 3),
                  template_var 2),
                template_var 1))
            )],
       template_inequation
        (less_equals,
         template_app
          (template_app
            (template_app (template_hole 3, template_var 3),
             template_var 0),
           template_app
            (template_app (template_hole 2, template_var 4),
             template_hole 1)),
         template_app
          (template_app (template_hole 0, template_var 2),
           template_app
            (template_app
              (template_app (template_hole 3, template_var 3),
               template_var 0),
             template_var 1))))),
    ("Channels.dy_fake_msg_insert_chan",
     "?x = insec | ?x = auth ==>
      ?M : dy_fake_msg ?bad ?IK (insert (Chan ?x ?A ?B ?M) ?CH)",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_hole 7,
                template_app
                 (template_app (template_hole 6, template_var 6),
                  template_hole 5)),
              template_app
               (template_app (template_hole 6, template_var 6),
                template_hole 4))
            )],
       template_predicate
        (
           template_app
            (template_app (template_hole 3, template_var 5),
             template_app
              (template_app
                (template_app (template_hole 2, template_var 4),
                 template_var 3),
               template_app
                (template_app
                  (template_hole 1,
                   template_app
                    (template_app
                      (template_app
                        (template_app (template_hole 0, template_var 6),
                         template_var 2),
                       template_var 1),
                     template_var 5)),
                 template_var 0)))
           ))),
    ("Channels.dy_fake_chan_subset",
     "?CH <= fake ?bad (dy_fake_msg ?bad ?IK ?CH) ?CH' ==>
      dy_fake_chan ?bad ?IK ?CH
      <= fake ?bad (dy_fake_msg ?bad ?IK ?CH) ?CH'",
     template_implication
      ([template_inequation
         (less_equals, template_var 3,
          template_app
           (template_app
             (template_app (template_hole 2, template_var 2),
              template_app
               (template_app
                 (template_app (template_hole 1, template_var 2),
                  template_var 1),
                template_var 3)),
            template_var 0))],
       template_inequation
        (less_equals,
         template_app
          (template_app
            (template_app (template_hole 0, template_var 2),
             template_var 1),
           template_var 3),
         template_app
          (template_app
            (template_app (template_hole 2, template_var 2),
             template_app
              (template_app
                (template_app (template_hole 1, template_var 2),
                 template_var 1),
               template_var 3)),
           template_var 0)))),
    ("Channels.fake_parts_extr_insert",
     "?X : fake ?bad ?IK ?CH ==>
      parts (extr ?bad ?IK' (insert ?X ?CH))
      <= parts (extr ?bad ?IK' ?CH) Un parts ?IK",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 6, template_var 4),
              template_app
               (template_app
                 (template_app (template_hole 5, template_var 3),
                  template_var 2),
                template_var 1))
            )],
       template_inequation
        (less_equals,
         template_app
          (template_hole 3,
           template_app
            (template_app
              (template_app (template_hole 2, template_var 3),
               template_var 0),
             template_app
              (template_app (template_hole 1, template_var 4),
               template_var 1))),
         template_app
          (template_app
            (template_hole 0,
             template_app
              (template_hole 3,
               template_app
                (template_app
                  (template_app (template_hole 2, template_var 3),
                   template_var 0),
                 template_var 1))),
           template_app (template_hole 3, template_var 2))))),
    ("Channels.fake_parts_extr_singleton",
     "?X : fake ?bad ?IK ?chan ==>
      parts (extr ?bad ?IK' {?X})
      <= parts ?IK Un parts (extr ?bad ?IK' ?chan)",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 7, template_var 4),
              template_app
               (template_app
                 (template_app (template_hole 6, template_var 3),
                  template_var 2),
                template_var 1))
            )],
       template_inequation
        (less_equals,
         template_app
          (template_hole 4,
           template_app
            (template_app
              (template_app (template_hole 3, template_var 3),
               template_var 0),
             template_app
              (template_app (template_hole 2, template_var 4),
               template_hole 1))),
         template_app
          (template_app
            (template_hole 0,
             template_app (template_hole 4, template_var 2)),
           template_app
            (template_hole 4,
             template_app
              (template_app
                (template_app (template_hole 3, template_var 3),
                 template_var 0),
               template_var 1)))))),
    ("Channels.dy_fake_msg_mono",
     "[| ?b <= ?b'; ?I <= ?I'; ?C <= ?C' |]
      ==> dy_fake_msg ?b ?I ?C <= dy_fake_msg ?b' ?I' ?C'",
     template_implication
      ([template_inequation (less_equals, template_var 5, template_var 4),
        template_inequation (less_equals, template_var 3, template_var 2),
        template_inequation (less_equals, template_var 1, template_var 0)],
       template_inequation
        (less_equals,
         template_app
          (template_app
            (template_app (template_hole 0, template_var 5),
             template_var 3),
           template_var 1),
         template_app
          (template_app
            (template_app (template_hole 0, template_var 4),
             template_var 2),
           template_var 0)))),
    ("Channels.extr_mono",
     "[| ?b <= ?b'; ?I <= ?I'; ?C <= ?C' |]
      ==> extr ?b ?I ?C <= extr ?b' ?I' ?C'",
     template_implication
      ([template_inequation (less_equals, template_var 5, template_var 4),
        template_inequation (less_equals, template_var 3, template_var 2),
        template_inequation (less_equals, template_var 1, template_var 0)],
       template_inequation
        (less_equals,
         template_app
          (template_app
            (template_app (template_hole 0, template_var 5),
             template_var 3),
           template_var 1),
         template_app
          (template_app
            (template_app (template_hole 0, template_var 4),
             template_var 2),
           template_var 0)))),
    ("Channels.dy_fake_chan_mono",
     "[| ?b <= ?b'; ?I <= ?I'; ?C <= ?C' |]
      ==> dy_fake_chan ?b ?I ?C <= dy_fake_chan ?b' ?I' ?C'",
     template_implication
      ([template_inequation (less_equals, template_var 5, template_var 4),
        template_inequation (less_equals, template_var 3, template_var 2),
        template_inequation (less_equals, template_var 1, template_var 0)],
       template_inequation
        (less_equals,
         template_app
          (template_app
            (template_app (template_hole 0, template_var 5),
             template_var 3),
           template_var 1),
         template_app
          (template_app
            (template_app (template_hole 0, template_var 4),
             template_var 2),
           template_var 0)))),
    ("Channels.fake_mono",
     "[| ?bad <= ?bad'; ?IK <= ?IK'; ?chan <= ?chan' |]
      ==> fake ?bad ?IK ?chan <= fake ?bad' ?IK' ?chan'",
     template_implication
      ([template_inequation (less_equals, template_var 5, template_var 4),
        template_inequation (less_equals, template_var 3, template_var 2),
        template_inequation (less_equals, template_var 1, template_var 0)],
       template_inequation
        (less_equals,
         template_app
          (template_app
            (template_app (template_hole 0, template_var 5),
             template_var 3),
           template_var 1),
         template_app
          (template_app
            (template_app (template_hole 0, template_var 4),
             template_var 2),
           template_var 0)))),
    ("Channels.dy_fake_chan_insert_chan",
     "?x = insec | ?x = auth ==>
      Chan ?x ?A ?B ?M
      : dy_fake_chan ?bad ?IK (insert (Chan ?x ?A ?B ?M) ?CH)",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_hole 7,
                template_app
                 (template_app (template_hole 6, template_var 6),
                  template_hole 5)),
              template_app
               (template_app (template_hole 6, template_var 6),
                template_hole 4))
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 3,
               template_app
                (template_app
                  (template_app
                    (template_app (template_hole 2, template_var 6),
                     template_var 5),
                   template_var 4),
                 template_var 3)),
             template_app
              (template_app
                (template_app (template_hole 1, template_var 2),
                 template_var 1),
               template_app
                (template_app
                  (template_hole 0,
                   template_app
                    (template_app
                      (template_app
                        (template_app (template_hole 2, template_var 6),
                         template_var 5),
                       template_var 4),
                     template_var 3)),
                 template_var 0)))
           ))),
    ("Channels.dy_fake_chan_extr_insert_parts",
     "?M : dy_fake_chan ?bad ?IK ?CH ==>
      parts (extr ?bad ?IK (insert ?M ?CH))
      <= parts (extr ?bad ?IK ?CH) Un dy_fake_msg ?bad ?IK ?CH",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 7, template_var 3),
              template_app
               (template_app
                 (template_app (template_hole 6, template_var 2),
                  template_var 1),
                template_var 0))
            )],
       template_inequation
        (less_equals,
         template_app
          (template_hole 4,
           template_app
            (template_app
              (template_app (template_hole 3, template_var 2),
               template_var 1),
             template_app
              (template_app (template_hole 2, template_var 3),
               template_var 0))),
         template_app
          (template_app
            (template_hole 1,
             template_app
              (template_hole 4,
               template_app
                (template_app
                  (template_app (template_hole 3, template_var 2),
                   template_var 1),
                 template_var 0))),
           template_app
            (template_app
              (template_app (template_hole 0, template_var 2),
               template_var 1),
             template_var 0))))),
    ("Channels.extr_fake_2",
     "[| ?c : extr ?bad ?IK' {?X}; ?X : fake ?bad ?IK ?chan |]
      ==> ?c : ?IK Un extr ?bad ?IK' ?chan",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 6, template_var 5),
              template_app
               (template_app
                 (template_app (template_hole 5, template_var 4),
                  template_var 3),
                template_app
                 (template_app (template_hole 4, template_var 2),
                  template_hole 3)))
            ),
        template_predicate
         (
            template_app
             (template_app (template_hole 2, template_var 2),
              template_app
               (template_app
                 (template_app (template_hole 1, template_var 4),
                  template_var 1),
                template_var 0))
            )],
       template_predicate
        (
           template_app
            (template_app (template_hole 6, template_var 5),
             template_app
              (template_app (template_hole 0, template_var 1),
               template_app
                (template_app
                  (template_app (template_hole 5, template_var 4),
                   template_var 3),
                 template_var 0)))
           ))),
    ("Channels.extr_insert_Confid",
     "[| ?A ~: ?bad; ?B ~: ?bad |]
      ==> extr ?bad ?IK (insert (Confid ?A ?B ?X) ?CH) = extr ?bad ?IK ?CH",
     template_implication
      ([template_negation
         (
            template_predicate
             (
                template_app
                 (template_app (template_hole 5, template_var 5),
                  template_var 4)
                )
            ),
        template_negation
         (
            template_predicate
             (
                template_app
                 (template_app (template_hole 5, template_var 3),
                  template_var 4)
                )
            )],
       template_equation
        (template_app
          (template_app
            (template_app (template_hole 3, template_var 4),
             template_var 2),
           template_app
            (template_app
              (template_hole 2,
               template_app
                (template_app
                  (template_app
                    (template_app (template_hole 1, template_hole 0),
                     template_var 5),
                   template_var 3),
                 template_var 1)),
             template_var 0)),
         template_app
          (template_app
            (template_app (template_hole 3, template_var 4),
             template_var 2),
           template_var 0)))),
    ("Channels.Fake_insert_dy_fake_msg",
     "[| ?M : dy_fake_msg ?bad ?IK ?CH;
         extr ?bad ?IK ?CH <= synth (analz ?X) |]
      ==> synth (analz (insert ?M ?IK)) <= synth (analz ?X)",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 6, template_var 4),
              template_app
               (template_app
                 (template_app (template_hole 5, template_var 3),
                  template_var 2),
                template_var 1))
            ),
        template_inequation
         (less_equals,
          template_app
           (template_app
             (template_app (template_hole 3, template_var 3),
              template_var 2),
            template_var 1),
          template_app
           (template_hole 2,
            template_app (template_hole 1, template_var 0)))],
       template_inequation
        (less_equals,
         template_app
          (template_hole 2,
           template_app
            (template_hole 1,
             template_app
              (template_app (template_hole 0, template_var 4),
               template_var 2))),
         template_app
          (template_hole 2,
           template_app (template_hole 1, template_var 0))))),
    ("Channels.fake_synth_analz_extr",
     "?X : fake ?bad (synth (analz (extr ?bad ?IK ?CH))) ?CH ==>
      synth (analz (extr ?bad ?IK (insert ?X ?CH))) =
      synth (analz (extr ?bad ?IK ?CH))",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 6, template_var 3),
              template_app
               (template_app
                 (template_app (template_hole 5, template_var 2),
                  template_app
                   (template_hole 4,
                    template_app
                     (template_hole 3,
                      template_app
                       (template_app
                         (template_app (template_hole 2, template_var 2),
                          template_var 1),
                        template_var 0)))),
                template_var 0))
            )],
       template_equation
        (template_app
          (template_hole 4,
           template_app
            (template_hole 3,
             template_app
              (template_app
                (template_app (template_hole 2, template_var 2),
                 template_var 1),
               template_app
                (template_app (template_hole 0, template_var 3),
                 template_var 0)))),
         template_app
          (template_hole 4,
           template_app
            (template_hole 3,
             template_app
              (template_app
                (template_app (template_hole 2, template_var 2),
                 template_var 1),
               template_var 0)))))),
    ("Channels.fake_parts_extr_singleton_2",
     "[| ?c : parts (extr ?bad ?IK' {?X}); ?X : fake ?bad ?IK ?chan |]
      ==> ?c : parts ?IK Un parts (extr ?bad ?IK' ?chan)",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 7, template_var 5),
              template_app
               (template_hole 6,
                template_app
                 (template_app
                   (template_app (template_hole 5, template_var 4),
                    template_var 3),
                  template_app
                   (template_app (template_hole 4, template_var 2),
                    template_hole 3))))
            ),
        template_predicate
         (
            template_app
             (template_app (template_hole 2, template_var 2),
              template_app
               (template_app
                 (template_app (template_hole 1, template_var 4),
                  template_var 1),
                template_var 0))
            )],
       template_predicate
        (
           template_app
            (template_app (template_hole 7, template_var 5),
             template_app
              (template_app
                (template_hole 0,
                 template_app (template_hole 6, template_var 1)),
               template_app
                (template_hole 6,
                 template_app
                  (template_app
                    (template_app (template_hole 5, template_var 4),
                     template_var 3),
                   template_var 0))))
           ))),
    ("Channels.dy_fake_msg_monotone",
     "[| ?c : dy_fake_msg ?b ?I ?C; ?b <= ?b'; ?I <= ?I'; ?C <= ?C' |]
      ==> ?c : dy_fake_msg ?b' ?I' ?C'",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 4, template_var 6),
              template_app
               (template_app
                 (template_app (template_hole 3, template_var 5),
                  template_var 4),
                template_var 3))
            ),
        template_inequation (less_equals, template_var 5, template_var 2),
        template_inequation (less_equals, template_var 4, template_var 1),
        template_inequation (less_equals, template_var 3, template_var 0)],
       template_predicate
        (
           template_app
            (template_app (template_hole 4, template_var 6),
             template_app
              (template_app
                (template_app (template_hole 3, template_var 2),
                 template_var 1),
               template_var 0))
           ))),
    ("Channels.extr_monotone",
     "[| ?c : extr ?b ?I ?C; ?b <= ?b'; ?I <= ?I'; ?C <= ?C' |]
      ==> ?c : extr ?b' ?I' ?C'",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 4, template_var 6),
              template_app
               (template_app
                 (template_app (template_hole 3, template_var 5),
                  template_var 4),
                template_var 3))
            ),
        template_inequation (less_equals, template_var 5, template_var 2),
        template_inequation (less_equals, template_var 4, template_var 1),
        template_inequation (less_equals, template_var 3, template_var 0)],
       template_predicate
        (
           template_app
            (template_app (template_hole 4, template_var 6),
             template_app
              (template_app
                (template_app (template_hole 3, template_var 2),
                 template_var 1),
               template_var 0))
           ))),
    ("Channels.dy_fake_chan_monotone",
     "[| ?c : dy_fake_chan ?b ?I ?C; ?b <= ?b'; ?I <= ?I'; ?C <= ?C' |]
      ==> ?c : dy_fake_chan ?b' ?I' ?C'",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 4, template_var 6),
              template_app
               (template_app
                 (template_app (template_hole 3, template_var 5),
                  template_var 4),
                template_var 3))
            ),
        template_inequation (less_equals, template_var 5, template_var 2),
        template_inequation (less_equals, template_var 4, template_var 1),
        template_inequation (less_equals, template_var 3, template_var 0)],
       template_predicate
        (
           template_app
            (template_app (template_hole 4, template_var 6),
             template_app
              (template_app
                (template_app (template_hole 3, template_var 2),
                 template_var 1),
               template_var 0))
           ))),
    ("Channels.fake_monotone",
     "[| ?c : fake ?bad ?IK ?chan; ?bad <= ?bad'; ?IK <= ?IK';
         ?chan <= ?chan' |]
      ==> ?c : fake ?bad' ?IK' ?chan'",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 4, template_var 6),
              template_app
               (template_app
                 (template_app (template_hole 3, template_var 5),
                  template_var 4),
                template_var 3))
            ),
        template_inequation (less_equals, template_var 5, template_var 2),
        template_inequation (less_equals, template_var 4, template_var 1),
        template_inequation (less_equals, template_var 3, template_var 0)],
       template_predicate
        (
           template_app
            (template_app (template_hole 4, template_var 6),
             template_app
              (template_app
                (template_app (template_hole 3, template_var 2),
                 template_var 1),
               template_var 0))
           ))),
    ("Channels.dy_fake_chan_mono2",
     "[| extr ?bad ?IK ?chan <= synth (analz ?y);
         ?chan <= fake ?bad (synth (analz ?y)) ?z |]
      ==> dy_fake_chan ?bad ?IK ?chan <= fake ?bad (synth (analz ?y)) ?z",
     template_implication
      ([template_inequation
         (less_equals,
          template_app
           (template_app
             (template_app (template_hole 5, template_var 4),
              template_var 3),
            template_var 2),
          template_app
           (template_hole 4,
            template_app (template_hole 3, template_var 1))),
        template_inequation
         (less_equals, template_var 2,
          template_app
           (template_app
             (template_app (template_hole 1, template_var 4),
              template_app
               (template_hole 4,
                template_app (template_hole 3, template_var 1))),
            template_var 0))],
       template_inequation
        (less_equals,
         template_app
          (template_app
            (template_app (template_hole 0, template_var 4),
             template_var 3),
           template_var 2),
         template_app
          (template_app
            (template_app (template_hole 1, template_var 4),
             template_app
              (template_hole 4,
               template_app (template_hole 3, template_var 1))),
           template_var 0)))),
    ("Channels.fake_intros",
     "[| ?M : ?IK; ?c = insec | ?c = confid | ?A : ?bad | ?B : ?bad |]
      ==> Chan ?c ?A ?B ?M : fake ?bad ?IK ?chan",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 8, template_var 6),
              template_var 5)
            ),
        template_predicate
         (
            template_app
             (template_app
               (template_hole 7,
                template_app
                 (template_app (template_hole 6, template_var 4),
                  template_hole 5)),
              template_app
               (template_app
                 (template_hole 7,
                  template_app
                   (template_app (template_hole 6, template_var 4),
                    template_hole 4)),
                template_app
                 (template_app
                   (template_hole 7,
                    template_app
                     (template_app (template_hole 3, template_var 3),
                      template_var 2)),
                  template_app
                   (template_app (template_hole 3, template_var 1),
                    template_var 2))))
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 2,
               template_app
                (template_app
                  (template_app
                    (template_app (template_hole 1, template_var 4),
                     template_var 3),
                   template_var 1),
                 template_var 6)),
             template_app
              (template_app
                (template_app (template_hole 0, template_var 2),
                 template_var 5),
               template_var 0))
           ))),
    ("Channels.extr_insert_Chan",
     "extr ?bad ?IK (insert (Chan ?c ?A ?B ?M) ?H) =
      (if ?c = insec | ?c = auth | ?A : ?bad | ?B : ?bad
       then insert ?M (extr ?bad ?IK ?H) else extr ?bad ?IK ?H)",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app (template_hole 9, template_var 6),
                template_var 5),
              template_app
               (template_app
                 (template_hole 8,
                  template_app
                   (template_app
                     (template_app
                       (template_app (template_hole 7, template_var 4),
                        template_var 3),
                      template_var 2),
                    template_var 1)),
                template_var 0))
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_app
                (template_hole 6,
                 template_app
                  (template_app
                    (template_hole 5,
                     template_app
                      (template_app (template_hole 4, template_var 4),
                       template_hole 3)),
                   template_app
                    (template_app
                      (template_hole 5,
                       template_app
                        (template_app (template_hole 4, template_var 4),
                         template_hole 2)),
                     template_app
                      (template_app
                        (template_hole 5,
                         template_app
                          (template_app (template_hole 1, template_var 3),
                           template_var 6)),
                       template_app
                        (template_app (template_hole 1, template_var 2),
                         template_var 6))))),
               template_app
                (template_app (template_hole 0, template_var 1),
                 template_app
                  (template_app
                    (template_app (template_hole 9, template_var 6),
                     template_var 5),
                   template_var 0))),
             template_app
              (template_app
                (template_app (template_hole 9, template_var 6),
                 template_var 5),
               template_var 0))
           ))),
    ("Channels.extr_insert_bad",
     "extr (insert ?A ?bad) ?IK ?CH
      <= extr ?bad ?IK ?CH Un
         {M. EX B. Confid ?A B M : ?CH |
                   Confid B ?A M : ?CH |
                   Secure ?A B M : ?CH | Secure B ?A M : ?CH}",
     template_inequation
      (less_equals,
       template_app
        (template_app
          (template_app
            (template_hole 9,
             template_app
              (template_app (template_hole 8, template_var 3),
               template_var 2)),
           template_var 1),
         template_var 0),
       template_app
        (template_app
          (template_hole 7,
           template_app
            (template_app
              (template_app (template_hole 9, template_var 2),
               template_var 1),
             template_var 0)),
         template_app (template_hole 6, t_empty))))]:
   (string * thm * template) list
### theory "Draft.ChannelsTemplates"
### 0.421s elapsed time, 0.590s cpu time, 0.078s GC time
val it = (): unit
