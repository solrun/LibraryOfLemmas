Loading theory "Draft.Infra" (required by "Draft.pfslvl1Templates" via "Draft.pfslvl1" via "Draft.Secrecy" via "Draft.Refinement")
Loading theory "Draft.Messages" (required by "Draft.pfslvl1Templates" via "Draft.pfslvl1" via "Draft.Runs")
Loading theory "HOL-Library.Function_Algebras" (required by "Draft.pfslvl1Templates" via "Draft.ExtrEqs" via "HOL-Library.BigO")
Loading theory "HOL-Library.Nat_Bijection" (required by "Draft.pfslvl1Templates" via "Draft.ExtrEqs" via "HOL-Library.Stream")
instantiation
  fun :: (type, plus) plus
  plus_fun == plus :: ('a => 'b) => ('a => 'b) => 'a => 'b
instantiation
  fun :: (type, zero) zero
  zero_fun == zero_class.zero :: 'a => 'b
instantiation
  fun :: (type, times) times
  times_fun == times :: ('a => 'b) => ('a => 'b) => 'a => 'b
instantiation
  fun :: (type, one) one
  one_fun == one_class.one :: 'a => 'b
### theory "Draft.Infra"
### 0.058s elapsed time, 0.251s cpu time, 0.000s GC time
Loading theory "Draft.Refinement" (required by "Draft.pfslvl1Templates" via "Draft.pfslvl1" via "Draft.Secrecy")
Found termination order: "(%p. size (snd p)) <*mlex*> {}"
### theory "HOL-Library.Function_Algebras"
### 0.094s elapsed time, 0.400s cpu time, 0.000s GC time
Loading theory "HOL-Library.Set_Algebras" (required by "Draft.pfslvl1Templates" via "Draft.ExtrEqs" via "HOL-Library.BigO")
instantiation
  set :: (plus) plus
  plus_set == plus :: 'a set => 'a set => 'a set
instantiation
  set :: (times) times
  times_set == times :: 'a set => 'a set => 'a set
instantiation
  set :: (zero) zero
  zero_set == zero_class.zero :: 'a set
instantiation
  set :: (one) one
  one_set == one_class.one :: 'a set
Found termination order: "size_list size <*mlex*> {}"
Proofs for inductive predicate(s) "reachp"
  Proving monotonicity ...
### theory "HOL-Library.Nat_Bijection"
### 0.300s elapsed time, 1.203s cpu time, 0.083s GC time
Loading theory "HOL-Library.Stream" (required by "Draft.pfslvl1Templates" via "Draft.ExtrEqs")
### theory "HOL-Library.Set_Algebras"
### 0.204s elapsed time, 0.800s cpu time, 0.083s GC time
Loading theory "HOL-Library.Tree" (required by "Draft.pfslvl1Templates" via "Draft.ExtrEqs" via "Draft.Templates")
Proofs for inductive predicate(s) "behp"
  Proving monotonicity ...
Found termination order: "{}"
Found termination order: "{}"
consts
  shift :: "'a list => 'a stream => 'a stream"
Proofs for coinductive predicate(s) "streamsp"
  Proving monotonicity ...
consts
  snth :: "'a stream => nat => 'a"
consts
  stake :: "nat => 'a stream => 'a list"
consts
  sdrop :: "nat => 'a stream => 'a stream"
consts
  left :: "'a tree => 'a tree"
consts
  right :: "'a tree => 'a tree"
Proofs for inductive predicate(s) "seq_liftp"
  Proving monotonicity ...
consts
  sfilter :: "('a => bool) => 'a stream => 'a stream"
Found termination order: "size <*mlex*> {}"
consts
  cycle :: "'a list => 'a stream"
Found termination order: "size <*mlex*> {}"
consts
  siterate :: "('a => 'a) => 'a => 'a stream"
consts
  flat :: "'a list stream => 'a stream"
### theory "Draft.Refinement"
### 1.157s elapsed time, 4.408s cpu time, 0.832s GC time
Loading theory "HOL-Library.BigO" (required by "Draft.pfslvl1Templates" via "Draft.ExtrEqs")
Found termination order: "size <*mlex*> {}"
class height = type +
  fixes height :: "'a => nat"
instantiation
  tree :: (type) height
  height_tree == height :: 'a tree => nat
consts
  sinterleave :: "'a stream => 'a stream => 'a stream"
consts
  szip :: "'a stream => 'b stream => ('a * 'b) stream"
consts
  smap2 :: "('a => 'b => 'c) => 'a stream => 'b stream => 'c stream"
Found termination order: "size <*mlex*> {}"
### theory "HOL-Library.Stream"
### 1.087s elapsed time, 4.123s cpu time, 0.835s GC time
Found termination order: "size <*mlex*> {}"
Found termination order: "size <*mlex*> {}"
Found termination order: "size <*mlex*> {}"
Found termination order: "size <*mlex*> {}"
Found termination order: "size <*mlex*> {}"
Found termination order: "size <*mlex*> {}"
Found termination order: "(%p. size (fst p)) <*mlex*> {}"
Found termination order: "size <*mlex*> {}"
Found termination order: "(%p. size (snd p)) <*mlex*> {}"
### theory "HOL-Library.BigO"
### 0.786s elapsed time, 2.548s cpu time, 0.239s GC time
Found termination order: "size <*mlex*> {}"
### theory "HOL-Library.Tree"
### 2.293s elapsed time, 7.517s cpu time, 1.820s GC time
Loading theory "Draft.Templates" (required by "Draft.pfslvl1Templates" via "Draft.ExtrEqs")
datatype template_term
=
     t_empty
   | template_app of template_term * template_term
   | template_hole of int
   | template_var of int
datatype sign
= equals | greater_equals | greater_than | less_equals | less_than
datatype template
=
     template_bimplication of template * template
   | template_dunno
   | template_equation of template_term * template_term
   | template_implication of template list * template
   | template_inequation of sign * template_term * template_term
   | template_negation of template
   | template_predicate of template_term
constructor t_empty: template_term
constructor template_app: template_term * template_term -> template_term
constructor template_hole: int -> template_term
constructor template_var: int -> template_term
constructor equals: sign
constructor greater_equals: sign
constructor greater_than: sign
constructor less_equals: sign
constructor less_than: sign
constructor template_bimplication: template * template -> template
constructor template_dunno: template
constructor template_equation: template_term * template_term -> template
constructor template_implication: template list * template -> template
constructor template_inequation:
   sign * template_term * template_term -> template
constructor template_negation: template -> template
constructor template_predicate: template_term -> template
val vfs = fn: term -> (indexname * typ) list * (string * typ) list
val indexOf = fn: ''a list -> ''a -> int -> int
val has_eq = fn: term -> bool
val term2template = fn:
   (indexname * typ) list -> (string * typ) list -> term -> template_term
val lemma2predicate = fn: term -> term -> template
val makeTemplatewithContext = fn: term -> term -> template
val lemma2template = fn: term -> template
val thm2template = fn: thm -> template
val tterm2string = fn: template_term -> string
val template2string = fn: template -> string
val t = "height ?t <= size ?t": thm
val th =
   Const ("HOL.Trueprop", "bool => prop") $
     (Const ("Orderings.ord_class.less_eq", "nat => nat => bool") $
       (Const ("Tree.height_class.height", "?'a tree => nat") $
         Var (("t", 0), "?'a tree")) $
       (Const ("Nat.size_class.size", "?'a tree => nat") $
         Var (("t", 0), "?'a tree"))):
   term
### theory "Draft.Templates"
### 0.069s elapsed time, 0.138s cpu time, 0.000s GC time
Loading theory "Draft.ExtrEqs" (required by "Draft.pfslvl1Templates")
Found termination order: "{}"
Proofs for inductive predicate(s) "eq"
  Proving monotonicity ...
val eqpattern =
   Pattern
    (
       Const ("HOL.Trueprop", "bool => prop") $
         (Const ("HOL.eq", "?'a => ?'a => bool") $
           Var (("_dummy_", 1), "?'a") $ Var (("_dummy_", 2), "?'a"))
       ):
   term Find_Theorems.criterion
val badeqpattern = Pattern (Const ("Pure.eq", "?'a => ?'a => prop")):
   term Find_Theorems.criterion
val undefpattern =
   Pattern
    (
       Const ("HOL.Trueprop", "bool => prop") $
         (Const ("HOL.eq", "?'a => ?'a => bool") $
           Var (("_dummy_", 1), "?'a") $ Const ("HOL.undefined", "?'a"))
       ):
   term Find_Theorems.criterion
val thmpattern =
   Pattern
    (Const ("HOL.Trueprop", "bool => prop") $ Var (("_dummy_", 1), "bool")):
   term Find_Theorems.criterion
val badnames =
   ["*nitpick*", "*Nitpick*", "*full_exhaustive*", "*_def*", "Enum.finite*",
    "*Quickcheck*", "ATP*", "*Nunchaku*", "*Code*", "*BNF*", "*SMT*",
    "*.*.*"]:
   string list
val unwanted_names =
   [(false, Name "*nitpick*"), (false, Name "*Nitpick*"),
    (false, Name "*full_exhaustive*"), (false, Name "*_def*"),
    (false, Name "Enum.finite*"), (false, Name "*Quickcheck*"),
    (false, Name "ATP*"), (false, Name "*Nunchaku*"),
    (false, Name "*Code*"), (false, Name "*BNF*"), (false, Name "*SMT*"),
    (false, Name "*.*.*")]:
   (bool * term Find_Theorems.criterion) list
val has_vars = fn: term -> bool
val get_all_eqs = fn: string -> Proof.context -> (string * thm) list
val get_all_thms = fn: string -> Proof.context -> (string * thm) list
val get_noneq_thms = fn: string -> Proof.context -> (string * thm) list
val template_eqs = fn:
   string -> Proof.context -> (string * thm * template) list
val template_thms = fn:
   string -> Proof.context -> (string * thm * template) list
### theory "Draft.ExtrEqs"
### 0.549s elapsed time, 1.165s cpu time, 0.128s GC time
### theory "Draft.Messages"
### 3.321s elapsed time, 10.188s cpu time, 2.089s GC time
Loading theory "Draft.AuthenticationN" (required by "Draft.pfslvl1Templates" via "Draft.pfslvl1" via "Draft.AuthenticationI")
Loading theory "Draft.Runs" (required by "Draft.pfslvl1Templates" via "Draft.pfslvl1")
Loading theory "Draft.Message_derivation" (required by "Draft.pfslvl1Templates" via "Draft.pfslvl1" via "Draft.Secrecy" via "Draft.IK")
Proofs for inductive predicate(s) "synthp"
  Proving monotonicity ...
Proofs for inductive predicate(s) "analzp"
  Proving monotonicity ...
[| ?x : analz ?H; !!X. X : ?H ==> ?P X;
   !!X Y.
      [| \<langle>X, Y\<rangle> : analz ?H; ?P \<langle>X, Y\<rangle> |]
      ==> ?P X;
   !!X Y.
      [| \<langle>X, Y\<rangle> : analz ?H; ?P \<langle>X, Y\<rangle> |]
      ==> ?P Y;
   !!X Y.
      [| Enc X Y : analz ?H; ?P (Enc X Y);
         Y : synth (analz ?H Int Collect ?P) |]
      ==> ?P X;
   !!X Y.
      [| Aenc X (pubK Y) : analz ?H; ?P (Aenc X (pubK Y));
         priK Y : analz ?H; ?P (priK Y) |]
      ==> ?P X;
   !!X Y.
      [| Aenc X (epubK Y) : analz ?H; ?P (Aenc X (epubK Y));
         epriK Y : synth (analz ?H Int Collect ?P) |]
      ==> ?P X;
   !!X Y.
      [| Sign X (priK Y) : analz ?H; ?P (Sign X (priK Y));
         pubK Y : analz ?H; ?P (pubK Y) |]
      ==> ?P X |]
==> ?P ?x
Found termination order: "{}"
Proofs for inductive predicate(s) "partsp"
  Proving monotonicity ...
### theory "Draft.AuthenticationN"
### 0.674s elapsed time, 2.063s cpu time, 0.173s GC time
Loading theory "Draft.AuthenticationI" (required by "Draft.pfslvl1Templates" via "Draft.pfslvl1")
Found termination order: "{}"
### theory "Draft.Message_derivation"
### 0.697s elapsed time, 2.133s cpu time, 0.173s GC time
Loading theory "Draft.IK" (required by "Draft.pfslvl1Templates" via "Draft.pfslvl1" via "Draft.Secrecy")
Loading theory "Draft.Payloads" (required by "Draft.pfslvl1Templates" via "Draft.pfslvl1")
Proofs for inductive predicate(s) "cpayloadp"
Found termination order: "{}"
  Proving monotonicity ...
### theory "Draft.AuthenticationI"
### 0.084s elapsed time, 0.310s cpu time, 0.000s GC time
### theory "Draft.Runs"
### 0.761s elapsed time, 2.387s cpu time, 0.173s GC time
### theory "Draft.IK"
### 0.148s elapsed time, 0.462s cpu time, 0.086s GC time
Loading theory "Draft.Secrecy" (required by "Draft.pfslvl1Templates" via "Draft.pfslvl1")
### theory "Draft.Payloads"
### 0.731s elapsed time, 2.022s cpu time, 1.080s GC time
### theory "Draft.Secrecy"
### 0.650s elapsed time, 1.646s cpu time, 0.994s GC time
Loading theory "Draft.pfslvl1" (required by "Draft.pfslvl1Templates")
Found termination order: "{}"
specification
  guessed_frame_dom_spec: dom (guessed_frame ?R) = domain (role (guessed_runs ?R))
  guessed_frame_payload_spec: guessed_frame ?R ?x = Some ?y ==> ?y : payload
  guessed_frame_Init_xpkE: role (guessed_runs ?R) = Init ==>
guessed_frame ?R xpkE = Some (epubKF (?R $ kE))
  guessed_frame_Init_xskE: role (guessed_runs ?R) = Init ==>
guessed_frame ?R xskE = Some (epriKF (?R $ kE))
  guessed_frame_Resp_xsk: role (guessed_runs ?R) = Resp ==>
guessed_frame ?R xsk = Some (NonceF (?R $ sk))
### theory "Draft.pfslvl1"
### 0.690s elapsed time, 0.727s cpu time, 0.050s GC time
Loading theory "Draft.pfslvl1Templates"
val templateLemmas =
   [("pfslvl1.l1_learn_refines_a0_ia_skip",
     "{R01ia} Id, l1_learn ?m {> R01ia}",
     template_predicate
      (
         template_app
          (template_app
            (template_app
              (template_app (template_hole 3, template_hole 2),
               template_hole 1),
             template_app (template_hole 0, template_var 0)),
           template_hole 2)
         )),
    ("pfslvl1.l1_learn_refines_learn",
     "{R01s} s0_learn ?m, l1_learn ?m {> R01s}",
     template_predicate
      (
         template_app
          (template_app
            (template_app
              (template_app (template_hole 3, template_hole 2),
               template_app (template_hole 1, template_var 0)),
             template_app (template_hole 0, template_var 0)),
           template_hole 2)
         )),
    ("pfslvl1.guessed_frame_dom_spec",
     "dom (guessed_frame ?R) = domain (role (guessed_runs ?R))",
     template_equation
      (template_app
        (template_hole 4, template_app (template_hole 3, template_var 0)),
       template_app
        (template_hole 2,
         template_app
          (template_hole 1,
           template_app (template_hole 0, template_var 0))))),
    ("pfslvl1.l1_step1_refines_skip",
     "{R01s} Id, l1_step1 ?Ra ?A ?B {> R01s}",
     template_predicate
      (
         template_app
          (template_app
            (template_app
              (template_app (template_hole 3, template_hole 2),
               template_hole 1),
             template_app
              (template_app
                (template_app (template_hole 0, template_var 2),
                 template_var 1),
               template_var 0)),
           template_hole 2)
         )),
    ("pfslvl1.l1_step1_refines_a0i_skip",
     "{R01ia} Id, l1_step1 ?Ra ?A ?B {> R01ia}",
     template_predicate
      (
         template_app
          (template_app
            (template_app
              (template_app (template_hole 3, template_hole 2),
               template_hole 1),
             template_app
              (template_app
                (template_app (template_hole 0, template_var 2),
                 template_var 1),
               template_var 0)),
           template_hole 2)
         )),
    ("pfslvl1.guessed_frame_payload_spec",
     "guessed_frame ?R ?x = Some ?y ==> ?y : payload",
     template_implication
      ([template_equation
         (template_app
           (template_app (template_hole 3, template_var 2), template_var 1),
          template_app (template_hole 2, template_var 0))],
       template_predicate
        (
           template_app
            (template_app (template_hole 1, template_var 0),
             template_hole 0)
           ))),
    ("pfslvl1.l1_step3_refines_add_secret_skip",
     "{R01s} (s0_add_secret ?K)^=, l1_step3 ?Ra ?A ?B ?K {> R01s}",
     template_predicate
      (
         template_app
          (template_app
            (template_app
              (template_app (template_hole 5, template_hole 4),
               template_app
                (template_app
                  (template_hole 3,
                   template_app (template_hole 2, template_var 3)),
                 template_hole 1)),
             template_app
              (template_app
                (template_app
                  (template_app (template_hole 0, template_var 2),
                   template_var 1),
                 template_var 0),
               template_var 3)),
           template_hole 4)
         )),
    ("pfslvl1.run_ended_not_None",
     "[| run_ended ?R; ?R = None |] ==> False",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 7, template_var 0),
              template_app
               (template_hole 6,
                template_app
                 (template_hole 5,
                  template_app (template_hole 4, template_hole 3))))
            ),
        template_equation (template_var 0, template_hole 1)],
       template_predicate (template_hole 0))),
    ("pfslvl1.l1_step2_refines_add_secret_skip",
     "{R01s} (s0_add_secret
               (NonceF (?Rb $ sk)))^=, l1_step2 ?Rb ?A ?B ?KE {> R01s}",
     template_predicate
      (
         template_app
          (template_app
            (template_app
              (template_app (template_hole 9, template_hole 8),
               template_app
                (template_app
                  (template_hole 7,
                   template_app
                    (template_hole 6,
                     template_app
                      (template_hole 5,
                       template_app
                        (template_hole 4,
                         template_app
                          (template_app (template_hole 3, template_var 3),
                           template_hole 2))))),
                 template_hole 1)),
             template_app
              (template_app
                (template_app
                  (template_app (template_hole 0, template_var 3),
                   template_var 2),
                 template_var 1),
               template_var 0)),
           template_hole 8)
         )),
    ("pfslvl1.can_signal_trans",
     "[| can_signal ?s' ?A ?B; (?s, ?s') : TS.trans l1 |]
      ==> can_signal ?s ?A ?B",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app (template_hole 4, template_var 3),
                template_var 2),
              template_var 1)
            ),
        template_predicate
         (
            template_app
             (template_app
               (template_hole 3,
                template_app
                 (template_app (template_hole 2, template_var 0),
                  template_var 3)),
              template_app (template_hole 1, template_hole 0))
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_app (template_hole 4, template_var 0),
               template_var 2),
             template_var 1)
           ))),
    ("pfslvl1.guessed_frame_Init_xpkE",
     "role (guessed_runs ?R) = Init ==>
      guessed_frame ?R xpkE = Some (epubKF (?R $ kE))",
     template_implication
      ([template_equation
         (template_app
           (template_hole 12,
            template_app (template_hole 11, template_var 0)),
          template_hole 10)],
       template_equation
        (template_app
          (template_app (template_hole 8, template_var 0),
           template_app (template_hole 7, template_hole 6)),
         template_app
          (template_hole 5,
           template_app
            (template_hole 4,
             template_app
              (template_hole 3,
               template_app
                (template_hole 2,
                 template_app
                  (template_app (template_hole 1, template_var 0),
                   template_hole 0)))))))),
    ("pfslvl1.l1_step2_refines_a0i_running_skip",
     "{R01ia} (a0i_running ?A ?B
                \<langle>?KE,
                  NonceF
                   (?Rb $
                    sk)\<rangle>)^=, l1_step2 ?Rb ?A ?B ?KE {> R01ia}",
     template_predicate
      (
         template_app
          (template_app
            (template_app
              (template_app (template_hole 10, template_hole 9),
               template_app
                (template_app
                  (template_hole 8,
                   template_app
                    (template_app
                      (template_app (template_hole 7, template_var 3),
                       template_var 2),
                     template_app
                      (template_app (template_hole 6, template_var 1),
                       template_app
                        (template_hole 5,
                         template_app
                          (template_hole 4,
                           template_app
                            (template_app (template_hole 3, template_var 0),
                             template_hole 2)))))),
                 template_hole 1)),
             template_app
              (template_app
                (template_app
                  (template_app (template_hole 0, template_var 0),
                   template_var 3),
                 template_var 2),
               template_var 1)),
           template_hole 9)
         )),
    ("pfslvl1.guessed_frame_Resp_xsk",
     "role (guessed_runs ?R) = Resp ==>
      guessed_frame ?R xsk = Some (NonceF (?R $ sk))",
     template_implication
      ([template_equation
         (template_app
           (template_hole 13,
            template_app (template_hole 12, template_var 0)),
          template_hole 11)],
       template_equation
        (template_app
          (template_app (template_hole 9, template_var 0),
           template_app
            (template_hole 8,
             template_app
              (template_hole 7,
               template_app (template_hole 6, template_hole 5)))),
         template_app
          (template_hole 4,
           template_app
            (template_hole 3,
             template_app
              (template_hole 2,
               template_app
                (template_app (template_hole 1, template_var 0),
                 template_hole 0))))))),
    ("pfslvl1.guessed_frame_Init_xskE",
     "role (guessed_runs ?R) = Init ==>
      guessed_frame ?R xskE = Some (epriKF (?R $ kE))",
     template_implication
      ([template_equation
         (template_app
           (template_hole 14,
            template_app (template_hole 13, template_var 0)),
          template_hole 12)],
       template_equation
        (template_app
          (template_app (template_hole 10, template_var 0),
           template_app
            (template_hole 9,
             template_app
              (template_hole 8,
               template_app (template_hole 7, template_hole 6)))),
         template_app
          (template_hole 5,
           template_app
            (template_hole 4,
             template_app
              (template_hole 3,
               template_app
                (template_hole 2,
                 template_app
                  (template_app (template_hole 1, template_var 0),
                   template_hole 0)))))))),
    ("pfslvl1.l1_iagreementI",
     "(!!A B N.
          l1_state.signals ?x (Commit A B N)
          <= l1_state.signals ?x (Running A B N)) ==>
      ?x : l1_iagreement",
     template_implication
      ([template_predicate (template_app (template_hole 8, t_empty))],
       template_predicate
        (
           template_app
            (template_app (template_hole 1, template_var 0),
             template_hole 0)
           ))),
    ("pfslvl1.l1_step3_refines_a0i_commit_skip",
     "{R01ia Int
       UNIV \<times>
       l1_inv3} (a0i_commit ?A ?B
                  \<langle>epubKF (?Ra $ kE),
                    ?K\<rangle>)^=, l1_step3 ?Ra ?A ?B ?K {> R01ia}",
     template_predicate
      (
         template_app
          (template_app
            (template_app
              (template_app
                (template_hole 15,
                 template_app
                  (template_app (template_hole 14, template_hole 13),
                   template_app
                    (template_app (template_hole 12, template_hole 11),
                     t_empty))),
               template_app
                (template_app
                  (template_hole 9,
                   template_app
                    (template_app
                      (template_app (template_hole 8, template_var 3),
                       template_var 2),
                     template_app
                      (template_app
                        (template_hole 7,
                         template_app
                          (template_hole 6,
                           template_app
                            (template_hole 5,
                             template_app
                              (template_hole 4,
                               template_app
                                (template_app
                                  (template_hole 3, template_var 1),
                                 template_hole 2))))),
                       template_var 0))),
                 template_hole 1)),
             template_app
              (template_app
                (template_app
                  (template_app (template_hole 0, template_var 1),
                   template_var 3),
                 template_var 2),
               template_var 0)),
           template_hole 13)
         )),
    ("pfslvl1.run_ended_trans",
     "[| run_ended (progress ?s ?R); (?s, ?s') : TS.trans l1 |]
      ==> run_ended (progress ?s' ?R)",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_hole 9,
                template_app
                 (template_app (template_hole 8, template_var 2),
                  template_var 1)),
              template_app
               (template_hole 7,
                template_app
                 (template_hole 6,
                  template_app (template_hole 5, template_hole 4))))
            ),
        template_predicate
         (
            template_app
             (template_app
               (template_hole 3,
                template_app
                 (template_app (template_hole 2, template_var 2),
                  template_var 0)),
              template_app (template_hole 1, template_hole 0))
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 9,
               template_app
                (template_app (template_hole 8, template_var 0),
                 template_var 1)),
             template_app
              (template_hole 7,
               template_app
                (template_hole 6,
                 template_app (template_hole 5, template_hole 4))))
           ))),
    ("pfslvl1.l1_iagreementE",
     "[| ?x : l1_iagreement;
         (!!A B N.
             l1_state.signals ?x (Commit A B N)
             <= l1_state.signals ?x (Running A B N)) ==>
         PROP ?W |]
      ==> PROP ?W",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 7, template_var 1),
              template_hole 6)
            ),
        template_implication
         ([template_predicate (template_app (template_hole 5, t_empty))],
          template_predicate (template_var 0))],
       template_predicate (template_var 0))),
    ("pfslvl1.l1_inv1D",
     "[| 0 < l1_state.signals ?x
              (Commit ?A ?B \<langle>epubKF (?Ra $ kE), ?K\<rangle>);
         ?x : l1_inv1 |]
      ==> guessed_runs ?Ra = (| role = Init, owner = ?A, partner = ?B |) &
          progress ?x ?Ra = Some {xpkE, xskE, xsk} &
          guessed_frame ?Ra xsk = Some ?K",
     template_implication
      ([template_inequation
         (less_than, template_hole 29,
          template_app
           (template_app (template_hole 28, template_var 4),
            template_app
             (template_app
               (template_app (template_hole 27, template_var 3),
                template_var 2),
              template_app
               (template_app
                 (template_hole 26,
                  template_app
                   (template_hole 25,
                    template_app
                     (template_hole 24,
                      template_app
                       (template_hole 23,
                        template_app
                         (template_app (template_hole 22, template_var 1),
                          template_hole 21))))),
                template_var 0)))),
        template_predicate
         (
            template_app
             (template_app (template_hole 20, template_var 4),
              template_hole 19)
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 18,
               template_app
                (template_app
                  (template_hole 17,
                   template_app (template_hole 16, template_var 1)),
                 template_app
                  (template_app
                    (template_app
                      (template_app (template_hole 15, template_hole 14),
                       template_var 3),
                     template_var 2),
                   template_hole 13))),
             template_app
              (template_app
                (template_hole 18,
                 template_app
                  (template_app
                    (template_hole 12,
                     template_app
                      (template_app (template_hole 11, template_var 4),
                       template_var 1)),
                   template_app
                    (template_hole 10,
                     template_app
                      (template_app
                        (template_hole 9,
                         template_app (template_hole 8, template_hole 29)),
                       template_app
                        (template_app
                          (template_hole 9,
                           template_app
                            (template_hole 8,
                             template_app
                              (template_hole 7,
                               template_app
                                (template_hole 6, template_hole 5)))),
                         template_app
                          (template_app
                            (template_hole 9,
                             template_app
                              (template_hole 8,
                               template_app
                                (template_hole 7,
                                 template_app
                                  (template_hole 4, template_hole 5)))),
                           template_hole 3)))))),
               template_app
                (template_app
                  (template_hole 2,
                   template_app
                    (template_app (template_hole 1, template_var 1),
                     template_app
                      (template_hole 8,
                       template_app
                        (template_hole 7,
                         template_app
                          (template_hole 4, template_hole 5))))),
                 template_app (template_hole 0, template_var 0))))
           ))),
    ("pfslvl1.l1_inv2D",
     "[| guessed_runs ?Rb = (| role = Resp, owner = ?B, partner = ?A |);
         progress ?x ?Rb = Some {xpkE, xsk};
         guessed_frame ?Rb xpkE = Some ?KE; can_signal ?x ?A ?B;
         ?x : l1_inv2 |]
      ==> 0 < l1_state.signals ?x
               (Running ?A ?B \<langle>?KE, NonceF (?Rb $ sk)\<rangle>)",
     template_implication
      ([template_equation
         (template_app (template_hole 27, template_var 4),
          template_app
           (template_app
             (template_app
               (template_app (template_hole 26, template_hole 25),
                template_var 3),
              template_var 2),
            template_hole 24)),
        template_equation
         (template_app
           (template_app (template_hole 22, template_var 1),
            template_var 4),
          template_app
           (template_hole 21,
            template_app
             (template_app
               (template_hole 20,
                template_app (template_hole 19, template_hole 18)),
              template_app
               (template_app
                 (template_hole 20,
                  template_app
                   (template_hole 19,
                    template_app
                     (template_hole 17,
                      template_app (template_hole 16, template_hole 15)))),
                template_hole 14)))),
        template_equation
         (template_app
           (template_app (template_hole 12, template_var 4),
            template_app (template_hole 19, template_hole 18)),
          template_app (template_hole 11, template_var 0)),
        template_predicate
         (
            template_app
             (template_app
               (template_app (template_hole 10, template_var 1),
                template_var 2),
              template_var 3)
            ),
        template_predicate
         (
            template_app
             (template_app (template_hole 9, template_var 1),
              template_hole 8)
            )],
       template_inequation
        (less_than, template_hole 18,
         template_app
          (template_app (template_hole 6, template_var 1),
           template_app
            (template_app
              (template_app (template_hole 5, template_var 2),
               template_var 3),
             template_app
              (template_app (template_hole 4, template_var 0),
               template_app
                (template_hole 3,
                 template_app
                  (template_hole 2,
                   template_app
                    (template_app (template_hole 1, template_var 4),
                     template_hole 0))))))))),
    ("pfslvl1.l1_inv2I",
     "(!!KE A B Rb.
          [| guessed_runs Rb = (| role = Resp, owner = B, partner = A |);
             progress ?x Rb = Some {xpkE, xsk};
             guessed_frame Rb xpkE = Some KE; can_signal ?x A B |]
          ==> 0 < l1_state.signals ?x
                   (Running A B \<langle>KE, NonceF (Rb $ sk)\<rangle>)) ==>
      ?x : l1_inv2",
     template_implication
      ([template_predicate (template_app (template_hole 32, t_empty))],
       template_predicate
        (
           template_app
            (template_app (template_hole 1, template_var 0),
             template_hole 0)
           ))),
    ("pfslvl1.l1_inv1I",
     "(!!Ra A B K.
          0 < l1_state.signals ?x
               (Commit A B \<langle>epubKF (Ra $ kE), K\<rangle>) ==>
          guessed_runs Ra = (| role = Init, owner = A, partner = B |) &
          progress ?x Ra = Some {xpkE, xskE, xsk} &
          guessed_frame Ra xsk = Some K) ==>
      ?x : l1_inv1",
     template_implication
      ([template_predicate (template_app (template_hole 34, t_empty))],
       template_predicate
        (
           template_app
            (template_app (template_hole 1, template_var 0),
             template_hole 0)
           ))),
    ("pfslvl1.l1_inv1E",
     "[| ?x : l1_inv1;
         (!!Ra A B K.
             0 < l1_state.signals ?x
                  (Commit A B \<langle>epubKF (Ra $ kE), K\<rangle>) ==>
             guessed_runs Ra = (| role = Init, owner = A, partner = B |) &
             progress ?x Ra = Some {xpkE, xskE, xsk} &
             guessed_frame Ra xsk = Some K) ==>
         PROP ?W |]
      ==> PROP ?W",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 33, template_var 1),
              template_hole 32)
            ),
        template_implication
         ([template_predicate (template_app (template_hole 31, t_empty))],
          template_predicate (template_var 0))],
       template_predicate (template_var 0))),
    ("pfslvl1.l1_inv2E",
     "[| ?x : l1_inv2;
         (!!KE A B Rb.
             [| guessed_runs Rb = (| role = Resp, owner = B, partner = A |);
                progress ?x Rb = Some {xpkE, xsk};
                guessed_frame Rb xpkE = Some KE; can_signal ?x A B |]
             ==> 0 < l1_state.signals ?x
                      (Running A B
                        \<langle>KE, NonceF (Rb $ sk)\<rangle>)) ==>
         PROP ?W |]
      ==> PROP ?W",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 31, template_var 1),
              template_hole 30)
            ),
        template_implication
         ([template_predicate (template_app (template_hole 29, t_empty))],
          template_predicate (template_var 0))],
       template_predicate (template_var 0))),
    ("pfslvl1.l1_inv3D",
     "[| guessed_runs ?Rb = (| role = Resp, owner = ?B, partner = ?A |);
         progress ?x ?Rb = Some {xpkE, xsk};
         guessed_frame ?Rb xpkE = Some (epubKF (?Ra $ kE));
         guessed_runs ?Ra = (| role = Init, owner = ?A, partner = ?B |);
         progress ?x ?Ra = Some {xpkE, xskE}; can_signal ?x ?A ?B;
         ?x : l1_inv3 |]
      ==> l1_state.signals ?x
           (Commit ?A ?B
             \<langle>epubKF (?Ra $ kE), NonceF (?Rb $ sk)\<rangle>)
          < l1_state.signals ?x
             (Running ?A ?B
               \<langle>epubKF (?Ra $ kE), NonceF (?Rb $ sk)\<rangle>)",
     template_implication
      ([template_equation
         (template_app (template_hole 33, template_var 4),
          template_app
           (template_app
             (template_app
               (template_app (template_hole 32, template_hole 31),
                template_var 3),
              template_var 2),
            template_hole 30)),
        template_equation
         (template_app
           (template_app (template_hole 28, template_var 1),
            template_var 4),
          template_app
           (template_hole 27,
            template_app
             (template_app
               (template_hole 26,
                template_app (template_hole 25, template_hole 24)),
              template_app
               (template_app
                 (template_hole 26,
                  template_app
                   (template_hole 25,
                    template_app
                     (template_hole 23,
                      template_app (template_hole 22, template_hole 21)))),
                template_hole 20)))),
        template_equation
         (template_app
           (template_app (template_hole 18, template_var 4),
            template_app (template_hole 25, template_hole 24)),
          template_app
           (template_hole 17,
            template_app
             (template_hole 16,
              template_app
               (template_hole 15,
                template_app
                 (template_hole 14,
                  template_app
                   (template_app (template_hole 13, template_var 0),
                    template_hole 12)))))),
        template_equation
         (template_app (template_hole 33, template_var 0),
          template_app
           (template_app
             (template_app
               (template_app (template_hole 32, template_hole 11),
                template_var 2),
              template_var 3),
            template_hole 30)),
        template_equation
         (template_app
           (template_app (template_hole 28, template_var 1),
            template_var 0),
          template_app
           (template_hole 27,
            template_app
             (template_app
               (template_hole 26,
                template_app (template_hole 25, template_hole 24)),
              template_app
               (template_app
                 (template_hole 26,
                  template_app
                   (template_hole 25,
                    template_app
                     (template_hole 23,
                      template_app (template_hole 10, template_hole 21)))),
                template_hole 20)))),
        template_predicate
         (
            template_app
             (template_app
               (template_app (template_hole 9, template_var 1),
                template_var 2),
              template_var 3)
            ),
        template_predicate
         (
            template_app
             (template_app (template_hole 8, template_var 1),
              template_hole 7)
            )],
       template_inequation
        (less_than,
         template_app
          (template_app (template_hole 5, template_var 1),
           template_app
            (template_app
              (template_app (template_hole 4, template_var 2),
               template_var 3),
             template_app
              (template_app
                (template_hole 3,
                 template_app
                  (template_hole 16,
                   template_app
                    (template_hole 15,
                     template_app
                      (template_hole 14,
                       template_app
                        (template_app (template_hole 13, template_var 0),
                         template_hole 12))))),
               template_app
                (template_hole 2,
                 template_app
                  (template_hole 14,
                   template_app
                    (template_app (template_hole 13, template_var 4),
                     template_hole 1)))))),
         template_app
          (template_app (template_hole 5, template_var 1),
           template_app
            (template_app
              (template_app (template_hole 0, template_var 2),
               template_var 3),
             template_app
              (template_app
                (template_hole 3,
                 template_app
                  (template_hole 16,
                   template_app
                    (template_hole 15,
                     template_app
                      (template_hole 14,
                       template_app
                        (template_app (template_hole 13, template_var 0),
                         template_hole 12))))),
               template_app
                (template_hole 2,
                 template_app
                  (template_hole 14,
                   template_app
                    (template_app (template_hole 13, template_var 4),
                     template_hole 1))))))))),
    ("pfslvl1.l1_inv3I",
     "(!!A B Rb Ra.
          [| guessed_runs Rb = (| role = Resp, owner = B, partner = A |);
             progress ?x Rb = Some {xpkE, xsk};
             guessed_frame Rb xpkE = Some (epubKF (Ra $ kE));
             guessed_runs Ra = (| role = Init, owner = A, partner = B |);
             progress ?x Ra = Some {xpkE, xskE}; can_signal ?x A B |]
          ==> l1_state.signals ?x
               (Commit A B
                 \<langle>epubKF (Ra $ kE), NonceF (Rb $ sk)\<rangle>)
              < l1_state.signals ?x
                 (Running A B
                   \<langle>epubKF (Ra $ kE),
                     NonceF (Rb $ sk)\<rangle>)) ==>
      ?x : l1_inv3",
     template_implication
      ([template_predicate (template_app (template_hole 37, t_empty))],
       template_predicate
        (
           template_app
            (template_app (template_hole 1, template_var 0),
             template_hole 0)
           ))),
    ("pfslvl1.l1_inv3E",
     "[| ?x : l1_inv3;
         (!!A B Rb Ra.
             [| guessed_runs Rb = (| role = Resp, owner = B, partner = A |);
                progress ?x Rb = Some {xpkE, xsk};
                guessed_frame Rb xpkE = Some (epubKF (Ra $ kE));
                guessed_runs Ra = (| role = Init, owner = A, partner = B |);
                progress ?x Ra = Some {xpkE, xskE}; can_signal ?x A B |]
             ==> l1_state.signals ?x
                  (Commit A B
                    \<langle>epubKF (Ra $ kE), NonceF (Rb $ sk)\<rangle>)
                 < l1_state.signals ?x
                    (Running A B
                      \<langle>epubKF (Ra $ kE),
                        NonceF (Rb $ sk)\<rangle>)) ==>
         PROP ?W |]
      ==> PROP ?W",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 36, template_var 1),
              template_hole 35)
            ),
        template_implication
         ([template_predicate (template_app (template_hole 34, t_empty))],
          template_predicate (template_var 0))],
       template_predicate (template_var 0)))]:
   (string * thm * template) list
### theory "Draft.pfslvl1Templates"
### 0.485s elapsed time, 0.677s cpu time, 0.065s GC time
val it = (): unit
