Loading theory "Draft.Messages" (required by "Draft.ImplemTemplates" via "Draft.Implem" via "Draft.Channels" via "Draft.Message_derivation")
Loading theory "HOL-Library.Function_Algebras" (required by "Draft.ImplemTemplates" via "Draft.ExtrEqs" via "HOL-Library.BigO")
Loading theory "HOL-Library.Nat_Bijection" (required by "Draft.ImplemTemplates" via "Draft.ExtrEqs" via "HOL-Library.Stream")
Loading theory "HOL-Library.Set_Algebras" (required by "Draft.ImplemTemplates" via "Draft.ExtrEqs" via "HOL-Library.BigO")
instantiation
  fun :: (type, plus) plus
  plus_fun == plus :: ('a => 'b) => ('a => 'b) => 'a => 'b
instantiation
  set :: (plus) plus
  plus_set == plus :: 'a set => 'a set => 'a set
instantiation
  fun :: (type, zero) zero
  zero_fun == zero_class.zero :: 'a => 'b
instantiation
  set :: (times) times
  times_set == times :: 'a set => 'a set => 'a set
instantiation
  fun :: (type, times) times
  times_fun == times :: ('a => 'b) => ('a => 'b) => 'a => 'b
instantiation
  set :: (zero) zero
  zero_set == zero_class.zero :: 'a set
instantiation
  fun :: (type, one) one
  one_fun == one_class.one :: 'a => 'b
instantiation
  set :: (one) one
  one_set == one_class.one :: 'a set
Found termination order: "(%p. size (snd p)) <*mlex*> {}"
### theory "HOL-Library.Function_Algebras"
### 0.099s elapsed time, 0.423s cpu time, 0.000s GC time
Loading theory "HOL-Library.Tree" (required by "Draft.ImplemTemplates" via "Draft.ExtrEqs" via "Draft.Templates")
Found termination order: "size_list size <*mlex*> {}"
### theory "HOL-Library.Set_Algebras"
### 0.242s elapsed time, 0.974s cpu time, 0.079s GC time
Loading theory "HOL-Library.BigO" (required by "Draft.ImplemTemplates" via "Draft.ExtrEqs")
### theory "HOL-Library.Nat_Bijection"
### 0.293s elapsed time, 1.175s cpu time, 0.079s GC time
Loading theory "HOL-Library.Stream" (required by "Draft.ImplemTemplates" via "Draft.ExtrEqs")
Found termination order: "{}"
Found termination order: "{}"
consts
  left :: "'a tree => 'a tree"
consts
  right :: "'a tree => 'a tree"
Found termination order: "size <*mlex*> {}"
consts
  shift :: "'a list => 'a stream => 'a stream"
Proofs for coinductive predicate(s) "streamsp"
  Proving monotonicity ...
Found termination order: "size <*mlex*> {}"
Found termination order: "size <*mlex*> {}"
consts
  snth :: "'a stream => nat => 'a"
consts
  stake :: "nat => 'a stream => 'a list"
consts
  sdrop :: "nat => 'a stream => 'a stream"
class height = type +
  fixes height :: "'a => nat"
instantiation
  tree :: (type) height
  height_tree == height :: 'a tree => nat
consts
  sfilter :: "('a => bool) => 'a stream => 'a stream"
Found termination order: "size <*mlex*> {}"
consts
  cycle :: "'a list => 'a stream"
Found termination order: "size <*mlex*> {}"
consts
  siterate :: "('a => 'a) => 'a => 'a stream"
consts
  flat :: "'a list stream => 'a stream"
Found termination order: "size <*mlex*> {}"
### theory "HOL-Library.BigO"
### 0.999s elapsed time, 3.805s cpu time, 0.849s GC time
consts
  sinterleave :: "'a stream => 'a stream => 'a stream"
consts
  szip :: "'a stream => 'b stream => ('a * 'b) stream"
Found termination order: "size <*mlex*> {}"
consts
  smap2 :: "('a => 'b => 'c) => 'a stream => 'b stream => 'c stream"
### theory "HOL-Library.Stream"
### 1.116s elapsed time, 4.124s cpu time, 0.932s GC time
Found termination order: "size <*mlex*> {}"
Found termination order: "size <*mlex*> {}"
Found termination order: "size <*mlex*> {}"
Found termination order: "(%p. size (fst p)) <*mlex*> {}"
Found termination order: "size <*mlex*> {}"
Found termination order: "(%p. size (snd p)) <*mlex*> {}"
Found termination order: "size <*mlex*> {}"
### theory "HOL-Library.Tree"
### 1.972s elapsed time, 6.277s cpu time, 1.153s GC time
Loading theory "Draft.Templates" (required by "Draft.ImplemTemplates" via "Draft.ExtrEqs")
datatype template_term
=
     t_empty
   | template_app of template_term * template_term
   | template_hole of int
   | template_var of int
datatype sign
= equals | greater_equals | greater_than | less_equals | less_than
datatype template
=
     template_bimplication of template * template
   | template_dunno
   | template_equation of template_term * template_term
   | template_implication of template list * template
   | template_inequation of sign * template_term * template_term
   | template_negation of template
   | template_predicate of template_term
constructor t_empty: template_term
constructor template_app: template_term * template_term -> template_term
constructor template_hole: int -> template_term
constructor template_var: int -> template_term
constructor equals: sign
constructor greater_equals: sign
constructor greater_than: sign
constructor less_equals: sign
constructor less_than: sign
constructor template_bimplication: template * template -> template
constructor template_dunno: template
constructor template_equation: template_term * template_term -> template
constructor template_implication: template list * template -> template
constructor template_inequation:
   sign * template_term * template_term -> template
constructor template_negation: template -> template
constructor template_predicate: template_term -> template
val vfs = fn: term -> (indexname * typ) list * (string * typ) list
val indexOf = fn: ''a list -> ''a -> int -> int
val has_eq = fn: term -> bool
val term2template = fn:
   (indexname * typ) list -> (string * typ) list -> term -> template_term
val lemma2predicate = fn: term -> term -> template
val makeTemplatewithContext = fn: term -> term -> template
val lemma2template = fn: term -> template
val thm2template = fn: thm -> template
val tterm2string = fn: template_term -> string
val template2string = fn: template -> string
val t = "height ?t <= size ?t": thm
val th =
   Const ("HOL.Trueprop", "bool => prop") $
     (Const ("Orderings.ord_class.less_eq", "nat => nat => bool") $
       (Const ("Tree.height_class.height", "?'a tree => nat") $
         Var (("t", 0), "?'a tree")) $
       (Const ("Nat.size_class.size", "?'a tree => nat") $
         Var (("t", 0), "?'a tree"))):
   term
### theory "Draft.Templates"
### 0.070s elapsed time, 0.165s cpu time, 0.057s GC time
Loading theory "Draft.ExtrEqs" (required by "Draft.ImplemTemplates")
Found termination order: "{}"
Proofs for inductive predicate(s) "eq"
  Proving monotonicity ...
val eqpattern =
   Pattern
    (
       Const ("HOL.Trueprop", "bool => prop") $
         (Const ("HOL.eq", "?'a => ?'a => bool") $
           Var (("_dummy_", 1), "?'a") $ Var (("_dummy_", 2), "?'a"))
       ):
   term Find_Theorems.criterion
val badeqpattern = Pattern (Const ("Pure.eq", "?'a => ?'a => prop")):
   term Find_Theorems.criterion
val undefpattern =
   Pattern
    (
       Const ("HOL.Trueprop", "bool => prop") $
         (Const ("HOL.eq", "?'a => ?'a => bool") $
           Var (("_dummy_", 1), "?'a") $ Const ("HOL.undefined", "?'a"))
       ):
   term Find_Theorems.criterion
val thmpattern =
   Pattern
    (Const ("HOL.Trueprop", "bool => prop") $ Var (("_dummy_", 1), "bool")):
   term Find_Theorems.criterion
val badnames =
   ["*nitpick*", "*Nitpick*", "*full_exhaustive*", "*_def*", "Enum.finite*",
    "*Quickcheck*", "ATP*", "*Nunchaku*", "*Code*", "*BNF*", "*SMT*",
    "*.*.*"]:
   string list
val unwanted_names =
   [(false, Name "*nitpick*"), (false, Name "*Nitpick*"),
    (false, Name "*full_exhaustive*"), (false, Name "*_def*"),
    (false, Name "Enum.finite*"), (false, Name "*Quickcheck*"),
    (false, Name "ATP*"), (false, Name "*Nunchaku*"),
    (false, Name "*Code*"), (false, Name "*BNF*"), (false, Name "*SMT*"),
    (false, Name "*.*.*")]:
   (bool * term Find_Theorems.criterion) list
val has_vars = fn: term -> bool
val get_all_eqs = fn: string -> Proof.context -> (string * thm) list
val get_all_thms = fn: string -> Proof.context -> (string * thm) list
val get_noneq_thms = fn: string -> Proof.context -> (string * thm) list
val template_eqs = fn:
   string -> Proof.context -> (string * thm * template) list
val template_thms = fn:
   string -> Proof.context -> (string * thm * template) list
### theory "Draft.ExtrEqs"
### 0.539s elapsed time, 1.149s cpu time, 0.127s GC time
### theory "Draft.Messages"
### 2.938s elapsed time, 8.275s cpu time, 1.337s GC time
Loading theory "Draft.Message_derivation" (required by "Draft.ImplemTemplates" via "Draft.Implem" via "Draft.Channels")
Proofs for inductive predicate(s) "synthp"
  Proving monotonicity ...
Proofs for inductive predicate(s) "analzp"
  Proving monotonicity ...
[| ?x : analz ?H; !!X. X : ?H ==> ?P X;
   !!X Y.
      [| \<langle>X, Y\<rangle> : analz ?H; ?P \<langle>X, Y\<rangle> |]
      ==> ?P X;
   !!X Y.
      [| \<langle>X, Y\<rangle> : analz ?H; ?P \<langle>X, Y\<rangle> |]
      ==> ?P Y;
   !!X Y.
      [| Enc X Y : analz ?H; ?P (Enc X Y);
         Y : synth (analz ?H Int Collect ?P) |]
      ==> ?P X;
   !!X Y.
      [| Aenc X (pubK Y) : analz ?H; ?P (Aenc X (pubK Y));
         priK Y : analz ?H; ?P (priK Y) |]
      ==> ?P X;
   !!X Y.
      [| Aenc X (epubK Y) : analz ?H; ?P (Aenc X (epubK Y));
         epriK Y : synth (analz ?H Int Collect ?P) |]
      ==> ?P X;
   !!X Y.
      [| Sign X (priK Y) : analz ?H; ?P (Sign X (priK Y));
         pubK Y : analz ?H; ?P (pubK Y) |]
      ==> ?P X |]
==> ?P ?x
Proofs for inductive predicate(s) "partsp"
  Proving monotonicity ...
### theory "Draft.Message_derivation"
### 0.781s elapsed time, 1.315s cpu time, 0.736s GC time
Loading theory "Draft.Channels" (required by "Draft.ImplemTemplates" via "Draft.Implem")
Loading theory "Draft.Payloads" (required by "Draft.ImplemTemplates" via "Draft.Implem")
Proofs for inductive predicate(s) "cpayloadp"
  Proving monotonicity ...
Proofs for inductive predicate(s) "extrp"
  Proving monotonicity ...
Proofs for inductive predicate(s) "fakep"
  Proving monotonicity ...
### theory "Draft.Payloads"
### 0.407s elapsed time, 0.864s cpu time, 0.115s GC time
### theory "Draft.Channels"
### 0.436s elapsed time, 0.899s cpu time, 0.115s GC time
Loading theory "Draft.Implem" (required by "Draft.ImplemTemplates")
locale basic_implem
  fixes implem :: "chan => msg"
locale semivalid_implem
  fixes implem :: "chan => msg"
  assumes "semivalid_implem implem"
locale valid_implem
  fixes implem :: "chan => msg"
  assumes "valid_implem implem"
### theory "Draft.Implem"
### 0.218s elapsed time, 0.219s cpu time, 0.000s GC time
Loading theory "Draft.ImplemTemplates"
val templateLemmas = []: (string * thm * template) list
### theory "Draft.ImplemTemplates"
### 0.387s elapsed time, 0.555s cpu time, 0.061s GC time
val it = (): unit
