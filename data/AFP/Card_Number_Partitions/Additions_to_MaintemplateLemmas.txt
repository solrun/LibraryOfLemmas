   [("Additions_to_Main.sum_mset_sum_count",
     "\<Sum>\<^sub># ?M = (SUM i:set_mset ?M. count ?M i * i)",
     template_equation
      (template_app (template_hole 4, template_var 0),
       template_app
        (template_app (template_hole 3, t_empty),
         template_app (template_hole 0, template_var 0)))),
    ("Additions_to_Main.set_mset_Abs_multiset",
     "finite {x. 0 < ?f x} ==> set_mset (Abs_multiset ?f) = {x. 0 < ?f x}",
     template_implication
      ([template_predicate
         (
            template_app
             (template_hole 6, template_app (template_hole 5, t_empty))
            )],
       template_equation
        (template_app
          (template_hole 1, template_app (template_hole 0, template_var 0)),
         template_app (template_hole 5, t_empty)))),
    ("Additions_to_Main.bound_domain_and_range_impl_finitely_many_functions",
     "finite {f. (ALL i. f i <= ?n) & (ALL i>=?m. f i = 0)}",
     template_predicate
      (
         template_app
          (template_hole 7, template_app (template_hole 6, t_empty))
         )),
    ("Additions_to_Main.sum_atMost_remove_nat",
     "?k <= ?n ==> sum ?f {..?n} = ?f ?k + sum ?f ({..?n} - {?k})",
     template_implication
      ([template_inequation (less_equals, template_var 2, template_var 1)],
       template_equation
        (template_app
          (template_app (template_hole 5, t_empty),
           template_app (template_hole 4, template_var 1)),
         template_app
          (template_app
            (template_hole 3,
             template_app (template_var 0, template_var 2)),
           template_app
            (template_app (template_hole 5, t_empty),
             template_app
              (template_app
                (template_hole 2,
                 template_app (template_hole 4, template_var 1)),
               template_app
                (template_app (template_hole 1, template_var 2),
                 template_hole 0))))))),
    ("Additions_to_Main.sum_mset_eq_sum_on_supersets",
     "[| finite ?A; set_mset ?M <= ?A |]
      ==> (SUM i:set_mset ?M. count ?M i * i) = (SUM i:?A. count ?M i * i)",
     template_implication
      ([template_predicate (template_app (template_hole 6, template_var 1)),
        template_inequation
         (less_equals, template_app (template_hole 4, template_var 0),
          template_var 1)],
       template_equation
        (template_app
          (template_app (template_hole 2, t_empty),
           template_app (template_hole 4, template_var 0)),
         template_app
          (template_app (template_hole 2, t_empty), template_var 1))))]
