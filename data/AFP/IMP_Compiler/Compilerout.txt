Loading theory "HOL-IMP.AExp" (required by "Draft.CompilerMoreTemplates" via "Draft.Compiler" via "HOL-IMP.BExp")
Loading theory "HOL-IMP.Star" (required by "Draft.CompilerMoreTemplates" via "Draft.Compiler")
Loading theory "HOL-Library.Function_Algebras" (required by "Draft.CompilerMoreTemplates" via "Draft.ExtrEqs" via "HOL-Library.BigO")
Loading theory "HOL-Library.Nat_Bijection" (required by "Draft.CompilerMoreTemplates" via "Draft.ExtrEqs" via "HOL-Library.Stream")
Proofs for inductive predicate(s) "star"
instantiation
  fun :: (type, plus) plus
  plus_fun == plus :: ('a => 'b) => ('a => 'b) => 'a => 'b
  Proving monotonicity ...
instantiation
  fun :: (type, zero) zero
  zero_fun == zero_class.zero :: 'a => 'b
instantiation
  fun :: (type, times) times
  times_fun == times :: ('a => 'b) => ('a => 'b) => 'a => 'b
instantiation
  fun :: (type, one) one
  one_fun == one_class.one :: 'a => 'b
Found termination order: "(%p. size (snd p)) <*mlex*> {}"
### theory "HOL-IMP.Star"
### 0.130s elapsed time, 0.544s cpu time, 0.036s GC time
Loading theory "HOL-Library.Set_Algebras" (required by "Draft.CompilerMoreTemplates" via "Draft.ExtrEqs" via "HOL-Library.BigO")
### theory "HOL-Library.Function_Algebras"
### 0.131s elapsed time, 0.551s cpu time, 0.036s GC time
Loading theory "HOL-Library.Tree" (required by "Draft.CompilerMoreTemplates" via "Draft.ExtrEqs" via "Draft.Templates")
instantiation
  set :: (plus) plus
  plus_set == plus :: 'a set => 'a set => 'a set
instantiation
  set :: (times) times
  times_set == times :: 'a set => 'a set => 'a set
instantiation
  set :: (zero) zero
  zero_set == zero_class.zero :: 'a set
instantiation
  set :: (one) one
  one_set == one_class.one :: 'a set
Found termination order: "size_list size <*mlex*> {}"
### theory "HOL-Library.Nat_Bijection"
### 0.321s elapsed time, 1.290s cpu time, 0.117s GC time
Loading theory "HOL-Library.Stream" (required by "Draft.CompilerMoreTemplates" via "Draft.ExtrEqs")
### theory "HOL-Library.Set_Algebras"
### 0.217s elapsed time, 0.849s cpu time, 0.081s GC time
Loading theory "HOL-Library.BigO" (required by "Draft.CompilerMoreTemplates" via "Draft.ExtrEqs")
Found termination order: "(%p. size (fst p)) <*mlex*> {}"
Found termination order: "size <*mlex*> {}"
consts
  left :: "'a tree => 'a tree"
consts
  right :: "'a tree => 'a tree"
consts
  shift :: "'a list => 'a stream => 'a stream"
Proofs for coinductive predicate(s) "streamsp"
  Proving monotonicity ...
Found termination order: "size <*mlex*> {}"
consts
  snth :: "'a stream => nat => 'a"
Found termination order: "size <*mlex*> {}"
Found termination order: "{}"
consts
  stake :: "nat => 'a stream => 'a list"
consts
  sdrop :: "nat => 'a stream => 'a stream"
Found termination order: "size <*mlex*> {}"
Found termination order: "size <*mlex*> {}"
### theory "HOL-IMP.AExp"
### 0.945s elapsed time, 3.760s cpu time, 0.305s GC time
Loading theory "HOL-IMP.BExp" (required by "Draft.CompilerMoreTemplates" via "Draft.Compiler")
consts
  sfilter :: "('a => bool) => 'a stream => 'a stream"
class height = type +
  fixes height :: "'a => nat"
instantiation
  tree :: (type) height
  height_tree == height :: 'a tree => nat
consts
  cycle :: "'a list => 'a stream"
consts
  siterate :: "('a => 'a) => 'a => 'a stream"
Found termination order: "size <*mlex*> {}"
consts
  flat :: "'a list stream => 'a stream"
Found termination order: "size <*mlex*> {}"
consts
  sinterleave :: "'a stream => 'a stream => 'a stream"
consts
  szip :: "'a stream => 'b stream => ('a * 'b) stream"
Found termination order: "size <*mlex*> {}"
### theory "HOL-Library.BigO"
### 1.023s elapsed time, 3.870s cpu time, 0.816s GC time
consts
  smap2 :: "('a => 'b => 'c) => 'a stream => 'b stream => 'c stream"
### theory "HOL-Library.Stream"
### 1.106s elapsed time, 4.180s cpu time, 0.857s GC time
Found termination order: "size <*mlex*> {}"
"12"
  :: "int"
Found termination order: "size <*mlex*> {}"
"12"
  :: "int"
Found termination order: "size <*mlex*> {}"
"12"
  :: "int"
Found termination order: "size <*mlex*> {}"
"5"
  :: "int"
Found termination order: "(%p. size (fst p)) <*mlex*> {}"
Found termination order: "(%p. size (fst p)) <*mlex*> {}"
Found termination order: "size <*mlex*> {}"
Found termination order: "{}"
"V ''x''"
  :: "aexp"
Found termination order: "(%p. size (snd p)) <*mlex*> {}"
"True"
  :: "bool"
Found termination order: "size <*mlex*> {}"
Found termination order: "{}"
Found termination order: "{}"
### theory "HOL-Library.Tree"
### 2.154s elapsed time, 7.638s cpu time, 1.108s GC time
Loading theory "Draft.Templates" (required by "Draft.CompilerMoreTemplates" via "Draft.ExtrEqs")
Found termination order: "size <*mlex*> {}"
### theory "HOL-IMP.BExp"
### 1.390s elapsed time, 4.567s cpu time, 0.896s GC time
Loading theory "Draft.Compiler" (required by "Draft.CompilerMoreTemplates")
datatype template_term
=
     t_empty
   | template_app of template_term * template_term
   | template_hole of int
   | template_var of int
datatype sign
= equals | greater_equals | greater_than | less_equals | less_than
datatype template
=
     template_bimplication of template * template
   | template_dunno
   | template_equation of template_term * template_term
   | template_implication of template list * template
   | template_inequation of sign * template_term * template_term
   | template_negation of template
   | template_predicate of template_term
constructor t_empty: template_term
constructor template_app: template_term * template_term -> template_term
constructor template_hole: int -> template_term
constructor template_var: int -> template_term
constructor equals: sign
constructor greater_equals: sign
constructor greater_than: sign
constructor less_equals: sign
constructor less_than: sign
constructor template_bimplication: template * template -> template
constructor template_dunno: template
constructor template_equation: template_term * template_term -> template
constructor template_implication: template list * template -> template
constructor template_inequation:
   sign * template_term * template_term -> template
constructor template_negation: template -> template
constructor template_predicate: template_term -> template
val vfs = fn: term -> (indexname * typ) list * (string * typ) list
val indexOf = fn: ''a list -> ''a -> int -> int
val has_eq = fn: term -> bool
val term2template = fn:
   (indexname * typ) list -> (string * typ) list -> term -> template_term
val lemma2predicate = fn: term -> term -> template
val makeTemplatewithContext = fn: term -> term -> template
val lemma2template = fn: term -> template
val thm2template = fn: thm -> template
val tterm2string = fn: template_term -> string
val template2string = fn: template -> string
val t = "height ?t <= size ?t": thm
val th =
   Const ("HOL.Trueprop", "bool => prop") $
     (Const ("Orderings.ord_class.less_eq", "nat => nat => bool") $
       (Const ("Tree.height_class.height", "?'a tree => nat") $
         Var (("t", 0), "?'a tree")) $
       (Const ("Nat.size_class.size", "?'a tree => nat") $
         Var (("t", 0), "?'a tree"))):
   term
### theory "Draft.Templates"
### 0.074s elapsed time, 0.245s cpu time, 0.056s GC time
Loading theory "Draft.ExtrEqs" (required by "Draft.CompilerMoreTemplates")
"Bc False"
  :: "bexp"
"bsimp b"
  :: "bexp"
val eqpattern =
   Pattern
    (
       Const ("HOL.Trueprop", "bool => prop") $
         (Const ("HOL.eq", "?'a => ?'a => bool") $
           Var (("_dummy_", 1), "?'a") $ Var (("_dummy_", 2), "?'a"))
       ):
   term Find_Theorems.criterion
val badeqpattern = Pattern (Const ("Pure.eq", "?'a => ?'a => prop")):
   term Find_Theorems.criterion
val undefpattern =
   Pattern
    (
       Const ("HOL.Trueprop", "bool => prop") $
         (Const ("HOL.eq", "?'a => ?'a => bool") $
           Var (("_dummy_", 1), "?'a") $ Const ("HOL.undefined", "?'a"))
       ):
   term Find_Theorems.criterion
val thmpattern =
   Pattern
    (Const ("HOL.Trueprop", "bool => prop") $ Var (("_dummy_", 1), "bool")):
   term Find_Theorems.criterion
val badnames =
   ["*nitpick*", "*Nitpick*", "*full_exhaustive*", "*_def*", "Enum.finite*",
    "*Quickcheck*", "ATP*", "*Nunchaku*", "*Code*", "*BNF*", "*SMT*",
    "*.*.*"]:
   string list
val unwanted_names =
   [(false, Name "*nitpick*"), (false, Name "*Nitpick*"),
    (false, Name "*full_exhaustive*"), (false, Name "*_def*"),
    (false, Name "Enum.finite*"), (false, Name "*Quickcheck*"),
    (false, Name "ATP*"), (false, Name "*Nunchaku*"),
    (false, Name "*Code*"), (false, Name "*BNF*"), (false, Name "*SMT*"),
    (false, Name "*.*.*")]:
   (bool * term Find_Theorems.criterion) list
val has_vars = fn: term -> bool
val get_all_eqs = fn: string -> Proof.context -> (string * thm) list
val get_all_thms = fn: string -> Proof.context -> (string * thm) list
val get_noneq_thms = fn: string -> Proof.context -> (string * thm) list
val template_eqs = fn:
   string -> Proof.context -> (string * thm * template) list
val template_thms = fn:
   string -> Proof.context -> (string * thm * template) list
### theory "Draft.ExtrEqs"
### 0.612s elapsed time, 1.799s cpu time, 0.172s GC time
Proofs for inductive predicate(s) "big_step"
  Proving monotonicity ...
consts
  inth :: "'a list => int => 'a"
Proofs for inductive predicate(s) "iexec"
  Proving monotonicity ...
consts
  acomp :: "aexp => instr list"
Found termination order: "(%p. size (fst p)) <*mlex*> {}"
consts
  ccomp :: "com => instr list"
### theory "Draft.Compiler"
### 1.743s elapsed time, 3.124s cpu time, 0.290s GC time
Loading theory "Draft.CompilerMoreTemplates"
val templateLemmas =
   [("Compiler.Suc_lessI2", "[| ?m < ?n; ?m ~= ?n - 1 |] ==> Suc ?m < ?n",
     template_implication
      ([template_inequation (less_than, template_var 1, template_var 0),
        template_negation
         (
            template_equation
             (template_var 1,
              template_app
               (template_app (template_hole 2, template_var 0),
                template_hole 1))
            )],
       template_inequation
        (less_than, template_app (template_hole 0, template_var 1),
         template_var 0))),
    ("Compiler.impCE2",
     "[| ?P --> ?Q; ~ ?P ==> ?R; [| ?P; ?Q |] ==> ?R |] ==> ?R",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 1, template_var 2),
              template_var 1)
            ),
        template_implication
         ([template_negation (template_predicate (template_var 2))],
          template_predicate (template_var 0)),
        template_implication
         ([template_predicate (template_var 2)],
          template_implication
           ([template_predicate (template_var 1)],
            template_predicate (template_var 0)))],
       template_predicate (template_var 0))),
    ("Compiler.inth_append",
     "0 <= ?i ==>
      (?xs @ ?ys) !! ?i =
      (if ?i < size ?xs then ?xs !! ?i else ?ys !! (?i - size ?xs))",
     template_implication
      ([template_inequation (less_equals, template_hole 8, template_var 2)],
       template_equation
        (template_app
          (template_app
            (template_hole 6,
             template_app
              (template_app (template_hole 5, template_var 1),
               template_var 0)),
           template_var 2),
         template_app
          (template_app
            (template_app
              (template_hole 4,
               template_app
                (template_app (template_hole 3, template_var 2),
                 template_app
                  (template_hole 2,
                   template_app (template_hole 1, template_var 1)))),
             template_app
              (template_app (template_hole 6, template_var 1),
               template_var 2)),
           template_app
            (template_app (template_hole 6, template_var 0),
             template_app
              (template_app (template_hole 0, template_var 2),
               template_app
                (template_hole 2,
                 template_app (template_hole 1, template_var 1)))))))),
    ("Compiler.JmpE",
     "[| (JMP ?i, ?pc, ?s, ?stk) \<mapsto> ?cf;
         ?cf = (?pc + ?i + 1, ?s, ?stk) ==> ?P |]
      ==> ?P",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_hole 7,
                template_app
                 (template_app
                   (template_hole 6,
                    template_app (template_hole 5, template_var 5)),
                  template_app
                   (template_app (template_hole 4, template_var 4),
                    template_app
                     (template_app (template_hole 3, template_var 3),
                      template_var 2)))),
              template_var 1)
            ),
        template_implication
         ([template_equation
            (template_var 1,
             template_app
              (template_app
                (template_hole 4,
                 template_app
                  (template_app
                    (template_hole 1,
                     template_app
                      (template_app (template_hole 1, template_var 4),
                       template_var 5)),
                   template_hole 0)),
               template_app
                (template_app (template_hole 3, template_var 3),
                 template_var 2)))],
          template_predicate (template_var 0))],
       template_predicate (template_var 0))),
    ("Compiler.LoadIE",
     "[| (LOADI ?i, ?pc, ?s, ?stk) \<mapsto> ?cf;
         ?cf = (?pc + 1, ?s, ?i # ?stk) ==> ?P |]
      ==> ?P",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_hole 8,
                template_app
                 (template_app
                   (template_hole 7,
                    template_app (template_hole 6, template_var 5)),
                  template_app
                   (template_app (template_hole 5, template_var 4),
                    template_app
                     (template_app (template_hole 4, template_var 3),
                      template_var 2)))),
              template_var 1)
            ),
        template_implication
         ([template_equation
            (template_var 1,
             template_app
              (template_app
                (template_hole 5,
                 template_app
                  (template_app (template_hole 2, template_var 4),
                   template_hole 1)),
               template_app
                (template_app (template_hole 4, template_var 3),
                 template_app
                  (template_app (template_hole 0, template_var 5),
                   template_var 2))))],
          template_predicate (template_var 0))],
       template_predicate (template_var 0))),
    ("Compiler.LoadE",
     "[| (LOAD ?x, ?pc, ?s, ?stk) \<mapsto> ?cf;
         ?cf = (?pc + 1, ?s, ?s ?x # ?stk) ==> ?P |]
      ==> ?P",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_hole 8,
                template_app
                 (template_app
                   (template_hole 7,
                    template_app (template_hole 6, template_var 5)),
                  template_app
                   (template_app (template_hole 5, template_var 4),
                    template_app
                     (template_app (template_hole 4, template_var 3),
                      template_var 2)))),
              template_var 1)
            ),
        template_implication
         ([template_equation
            (template_var 1,
             template_app
              (template_app
                (template_hole 5,
                 template_app
                  (template_app (template_hole 2, template_var 4),
                   template_hole 1)),
               template_app
                (template_app (template_hole 4, template_var 3),
                 template_app
                  (template_app
                    (template_hole 0,
                     template_app (template_var 3, template_var 5)),
                   template_var 2))))],
          template_predicate (template_var 0))],
       template_predicate (template_var 0))),
    ("Compiler.StoreE",
     "[| (STORE ?x, ?pc, ?s, ?stk) \<mapsto> ?cf;
         ?cf = (?pc + 1, ?s(?x := hd ?stk), tl ?stk) ==> ?P |]
      ==> ?P",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_hole 10,
                template_app
                 (template_app
                   (template_hole 9,
                    template_app (template_hole 8, template_var 5)),
                  template_app
                   (template_app (template_hole 7, template_var 4),
                    template_app
                     (template_app (template_hole 6, template_var 3),
                      template_var 2)))),
              template_var 1)
            ),
        template_implication
         ([template_equation
            (template_var 1,
             template_app
              (template_app
                (template_hole 7,
                 template_app
                  (template_app (template_hole 4, template_var 4),
                   template_hole 3)),
               template_app
                (template_app
                  (template_hole 6,
                   template_app
                    (template_app
                      (template_app (template_hole 2, template_var 3),
                       template_var 5),
                     template_app (template_hole 1, template_var 2))),
                 template_app (template_hole 0, template_var 2))))],
          template_predicate (template_var 0))],
       template_predicate (template_var 0))),
    ("Compiler.AddE",
     "[| (ADD, ?pc, ?s, ?stk) \<mapsto> ?cf;
         ?cf = (?pc + 1, ?s, (hd2 ?stk + hd ?stk) # tl2 ?stk) ==> ?P |]
      ==> ?P",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_hole 10,
                template_app
                 (template_app (template_hole 9, template_hole 8),
                  template_app
                   (template_app (template_hole 7, template_var 4),
                    template_app
                     (template_app (template_hole 6, template_var 3),
                      template_var 2)))),
              template_var 1)
            ),
        template_implication
         ([template_equation
            (template_var 1,
             template_app
              (template_app
                (template_hole 7,
                 template_app
                  (template_app (template_hole 4, template_var 4),
                   template_hole 3)),
               template_app
                (template_app (template_hole 6, template_var 3),
                 template_app
                  (template_app
                    (template_hole 2,
                     template_app
                      (template_app
                        (template_hole 4,
                         template_app
                          (template_hole 1,
                           template_app (template_hole 0, template_var 2))),
                       template_app (template_hole 1, template_var 2))),
                   template_app
                    (template_hole 0,
                     template_app (template_hole 0, template_var 2))))))],
          template_predicate (template_var 0))],
       template_predicate (template_var 0))),
    ("Compiler.JmpNdE",
     "[| (JMPND ?i, ?pc, ?s, ?stk) \<mapsto> ?cf;
         ?cf = (?pc + ?i + 1, ?s, ?stk) ==> ?P;
         ?cf = (?pc + 1, ?s, ?stk) ==> ?P |]
      ==> ?P",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_hole 7,
                template_app
                 (template_app
                   (template_hole 6,
                    template_app (template_hole 5, template_var 5)),
                  template_app
                   (template_app (template_hole 4, template_var 4),
                    template_app
                     (template_app (template_hole 3, template_var 3),
                      template_var 2)))),
              template_var 1)
            ),
        template_implication
         ([template_equation
            (template_var 1,
             template_app
              (template_app
                (template_hole 4,
                 template_app
                  (template_app
                    (template_hole 1,
                     template_app
                      (template_app (template_hole 1, template_var 4),
                       template_var 5)),
                   template_hole 0)),
               template_app
                (template_app (template_hole 3, template_var 3),
                 template_var 2)))],
          template_predicate (template_var 0)),
        template_implication
         ([template_equation
            (template_var 1,
             template_app
              (template_app
                (template_hole 4,
                 template_app
                  (template_app (template_hole 1, template_var 4),
                   template_hole 0)),
               template_app
                (template_app (template_hole 3, template_var 3),
                 template_var 2)))],
          template_predicate (template_var 0))],
       template_predicate (template_var 0))),
    ("Compiler.JmpGeE",
     "[| (JMPGE ?i, ?pc, ?s, ?stk) \<mapsto> ?cf;
         [| ?cf = (?pc + ?i + 1, ?s, tl2 ?stk); hd ?stk <= hd2 ?stk |]
         ==> ?P;
         [| ?cf = (?pc + 1, ?s, tl2 ?stk); hd2 ?stk < hd ?stk |] ==> ?P |]
      ==> ?P",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_hole 11,
                template_app
                 (template_app
                   (template_hole 10,
                    template_app (template_hole 9, template_var 5)),
                  template_app
                   (template_app (template_hole 8, template_var 4),
                    template_app
                     (template_app (template_hole 7, template_var 3),
                      template_var 2)))),
              template_var 1)
            ),
        template_implication
         ([template_equation
            (template_var 1,
             template_app
              (template_app
                (template_hole 8,
                 template_app
                  (template_app
                    (template_hole 5,
                     template_app
                      (template_app (template_hole 5, template_var 4),
                       template_var 5)),
                   template_hole 4)),
               template_app
                (template_app (template_hole 7, template_var 3),
                 template_app
                  (template_hole 3,
                   template_app (template_hole 3, template_var 2)))))],
          template_implication
           ([template_inequation
              (less_equals, template_app (template_hole 1, template_var 2),
               template_app
                (template_hole 1,
                 template_app (template_hole 3, template_var 2)))],
            template_predicate (template_var 0))),
        template_implication
         ([template_equation
            (template_var 1,
             template_app
              (template_app
                (template_hole 8,
                 template_app
                  (template_app (template_hole 5, template_var 4),
                   template_hole 4)),
               template_app
                (template_app (template_hole 7, template_var 3),
                 template_app
                  (template_hole 3,
                   template_app (template_hole 3, template_var 2)))))],
          template_implication
           ([template_inequation
              (less_than,
               template_app
                (template_hole 1,
                 template_app (template_hole 3, template_var 2)),
               template_app (template_hole 1, template_var 2))],
            template_predicate (template_var 0)))],
       template_predicate (template_var 0))),
    ("Compiler.JmpLessE",
     "[| (JMPLESS ?i, ?pc, ?s, ?stk) \<mapsto> ?cf;
         [| ?cf = (?pc + ?i + 1, ?s, tl2 ?stk); hd2 ?stk < hd ?stk |]
         ==> ?P;
         [| ?cf = (?pc + 1, ?s, tl2 ?stk); hd ?stk <= hd2 ?stk |] ==> ?P |]
      ==> ?P",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_hole 11,
                template_app
                 (template_app
                   (template_hole 10,
                    template_app (template_hole 9, template_var 5)),
                  template_app
                   (template_app (template_hole 8, template_var 4),
                    template_app
                     (template_app (template_hole 7, template_var 3),
                      template_var 2)))),
              template_var 1)
            ),
        template_implication
         ([template_equation
            (template_var 1,
             template_app
              (template_app
                (template_hole 8,
                 template_app
                  (template_app
                    (template_hole 5,
                     template_app
                      (template_app (template_hole 5, template_var 4),
                       template_var 5)),
                   template_hole 4)),
               template_app
                (template_app (template_hole 7, template_var 3),
                 template_app
                  (template_hole 3,
                   template_app (template_hole 3, template_var 2)))))],
          template_implication
           ([template_inequation
              (less_than,
               template_app
                (template_hole 1,
                 template_app (template_hole 3, template_var 2)),
               template_app (template_hole 1, template_var 2))],
            template_predicate (template_var 0))),
        template_implication
         ([template_equation
            (template_var 1,
             template_app
              (template_app
                (template_hole 8,
                 template_app
                  (template_app (template_hole 5, template_var 4),
                   template_hole 4)),
               template_app
                (template_app (template_hole 7, template_var 3),
                 template_app
                  (template_hole 3,
                   template_app (template_hole 3, template_var 2)))))],
          template_implication
           ([template_inequation
              (less_equals, template_app (template_hole 1, template_var 2),
               template_app
                (template_hole 1,
                 template_app (template_hole 3, template_var 2)))],
            template_predicate (template_var 0)))],
       template_predicate (template_var 0)))]:
   (string * thm * template) list
### theory "Draft.CompilerMoreTemplates"
### 0.351s elapsed time, 0.523s cpu time, 0.026s GC time
val it = (): unit
