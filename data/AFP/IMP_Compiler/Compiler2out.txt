Loading theory "HOL-IMP.AExp" (required by "Draft.Compiler2MoreTemplates" via "Draft.Compiler2" via "Draft.Compiler" via "HOL-IMP.BExp")
Loading theory "HOL-IMP.Star" (required by "Draft.Compiler2MoreTemplates" via "Draft.Compiler2" via "Draft.Compiler")
Loading theory "HOL-Library.Nat_Bijection" (required by "Draft.Compiler2MoreTemplates" via "Draft.ExtrEqs" via "HOL-Library.Stream")
Loading theory "HOL-Library.Function_Algebras" (required by "Draft.Compiler2MoreTemplates" via "Draft.ExtrEqs" via "HOL-Library.BigO")
instantiation
  fun :: (type, plus) plus
  plus_fun == plus :: ('a => 'b) => ('a => 'b) => 'a => 'b
Proofs for inductive predicate(s) "star"
instantiation
  fun :: (type, zero) zero
  zero_fun == zero_class.zero :: 'a => 'b
  Proving monotonicity ...
instantiation
  fun :: (type, times) times
  times_fun == times :: ('a => 'b) => ('a => 'b) => 'a => 'b
instantiation
  fun :: (type, one) one
  one_fun == one_class.one :: 'a => 'b
Found termination order: "(%p. size (snd p)) <*mlex*> {}"
### theory "HOL-Library.Function_Algebras"
### 0.121s elapsed time, 0.491s cpu time, 0.043s GC time
Loading theory "HOL-Library.Set_Algebras" (required by "Draft.Compiler2MoreTemplates" via "Draft.ExtrEqs" via "HOL-Library.BigO")
instantiation
  set :: (plus) plus
  plus_set == plus :: 'a set => 'a set => 'a set
### theory "HOL-IMP.Star"
### 0.149s elapsed time, 0.610s cpu time, 0.043s GC time
Loading theory "HOL-Library.Tree" (required by "Draft.Compiler2MoreTemplates" via "Draft.ExtrEqs" via "Draft.Templates")
instantiation
  set :: (times) times
  times_set == times :: 'a set => 'a set => 'a set
instantiation
  set :: (zero) zero
  zero_set == zero_class.zero :: 'a set
instantiation
  set :: (one) one
  one_set == one_class.one :: 'a set
Found termination order: "size_list size <*mlex*> {}"
### theory "HOL-Library.Set_Algebras"
### 0.199s elapsed time, 0.787s cpu time, 0.065s GC time
Loading theory "HOL-Library.BigO" (required by "Draft.Compiler2MoreTemplates" via "Draft.ExtrEqs")
### theory "HOL-Library.Nat_Bijection"
### 0.333s elapsed time, 1.331s cpu time, 0.108s GC time
Loading theory "HOL-Library.Stream" (required by "Draft.Compiler2MoreTemplates" via "Draft.ExtrEqs")
Found termination order: "(%p. size (fst p)) <*mlex*> {}"
Found termination order: "size <*mlex*> {}"
consts
  left :: "'a tree => 'a tree"
consts
  right :: "'a tree => 'a tree"
consts
  shift :: "'a list => 'a stream => 'a stream"
Found termination order: "size <*mlex*> {}"
Proofs for coinductive predicate(s) "streamsp"
  Proving monotonicity ...
Found termination order: "{}"
Found termination order: "size <*mlex*> {}"
consts
  snth :: "'a stream => nat => 'a"
Found termination order: "size <*mlex*> {}"
consts
  stake :: "nat => 'a stream => 'a list"
### theory "HOL-IMP.AExp"
### 0.870s elapsed time, 3.450s cpu time, 0.289s GC time
Loading theory "HOL-IMP.BExp" (required by "Draft.Compiler2MoreTemplates" via "Draft.Compiler2" via "Draft.Compiler")
consts
  sdrop :: "nat => 'a stream => 'a stream"
Found termination order: "size <*mlex*> {}"
class height = type +
  fixes height :: "'a => nat"
instantiation
  tree :: (type) height
  height_tree == height :: 'a tree => nat
consts
  sfilter :: "('a => bool) => 'a stream => 'a stream"
consts
  cycle :: "'a list => 'a stream"
Found termination order: "size <*mlex*> {}"
consts
  siterate :: "('a => 'a) => 'a => 'a stream"
consts
  flat :: "'a list stream => 'a stream"
Found termination order: "size <*mlex*> {}"
consts
  sinterleave :: "'a stream => 'a stream => 'a stream"
### theory "HOL-Library.BigO"
### 0.984s elapsed time, 3.712s cpu time, 0.808s GC time
consts
  szip :: "'a stream => 'b stream => ('a * 'b) stream"
Found termination order: "size <*mlex*> {}"
consts
  smap2 :: "('a => 'b => 'c) => 'a stream => 'b stream => 'c stream"
### theory "HOL-Library.Stream"
### 1.068s elapsed time, 4.038s cpu time, 0.846s GC time
Found termination order: "size <*mlex*> {}"
"12"
  :: "int"
Found termination order: "size <*mlex*> {}"
"12"
  :: "int"
"12"
  :: "int"
Found termination order: "size <*mlex*> {}"
Found termination order: "size <*mlex*> {}"
"5"
  :: "int"
Found termination order: "(%p. size (fst p)) <*mlex*> {}"
Found termination order: "(%p. size (fst p)) <*mlex*> {}"
"V ''x''"
  :: "aexp"
Found termination order: "{}"
Found termination order: "size <*mlex*> {}"
"True"
  :: "bool"
Found termination order: "(%p. size (snd p)) <*mlex*> {}"
Found termination order: "{}"
Found termination order: "size <*mlex*> {}"
Found termination order: "{}"
Found termination order: "size <*mlex*> {}"
### theory "HOL-IMP.BExp"
### 1.362s elapsed time, 4.446s cpu time, 0.820s GC time
Loading theory "Draft.Compiler" (required by "Draft.Compiler2MoreTemplates" via "Draft.Compiler2")
### theory "HOL-Library.Tree"
### 2.136s elapsed time, 7.490s cpu time, 1.119s GC time
Loading theory "Draft.Templates" (required by "Draft.Compiler2MoreTemplates" via "Draft.ExtrEqs")
datatype template_term
=
     t_empty
   | template_app of template_term * template_term
   | template_hole of int
   | template_var of int
datatype sign
= equals | greater_equals | greater_than | less_equals | less_than
datatype template
=
     template_bimplication of template * template
   | template_dunno
   | template_equation of template_term * template_term
   | template_implication of template list * template
   | template_inequation of sign * template_term * template_term
   | template_negation of template
   | template_predicate of template_term
constructor t_empty: template_term
constructor template_app: template_term * template_term -> template_term
constructor template_hole: int -> template_term
constructor template_var: int -> template_term
constructor equals: sign
constructor greater_equals: sign
constructor greater_than: sign
constructor less_equals: sign
constructor less_than: sign
constructor template_bimplication: template * template -> template
constructor template_dunno: template
constructor template_equation: template_term * template_term -> template
constructor template_implication: template list * template -> template
constructor template_inequation:
   sign * template_term * template_term -> template
constructor template_negation: template -> template
constructor template_predicate: template_term -> template
val vfs = fn: term -> (indexname * typ) list * (string * typ) list
val indexOf = fn: ''a list -> ''a -> int -> int
val has_eq = fn: term -> bool
val term2template = fn:
   (indexname * typ) list -> (string * typ) list -> term -> template_term
val lemma2predicate = fn: term -> term -> template
val makeTemplatewithContext = fn: term -> term -> template
val lemma2template = fn: term -> template
val thm2template = fn: thm -> template
val tterm2string = fn: template_term -> string
val template2string = fn: template -> string
val t = "height ?t <= size ?t": thm
val th =
   Const ("HOL.Trueprop", "bool => prop") $
     (Const ("Orderings.ord_class.less_eq", "nat => nat => bool") $
       (Const ("Tree.height_class.height", "?'a tree => nat") $
         Var (("t", 0), "?'a tree")) $
       (Const ("Nat.size_class.size", "?'a tree => nat") $
         Var (("t", 0), "?'a tree"))):
   term
### theory "Draft.Templates"
### 0.060s elapsed time, 0.241s cpu time, 0.000s GC time
Loading theory "Draft.ExtrEqs" (required by "Draft.Compiler2MoreTemplates")
"Bc False"
  :: "bexp"
"bsimp b"
  :: "bexp"
val eqpattern =
   Pattern
    (
       Const ("HOL.Trueprop", "bool => prop") $
         (Const ("HOL.eq", "?'a => ?'a => bool") $
           Var (("_dummy_", 1), "?'a") $ Var (("_dummy_", 2), "?'a"))
       ):
   term Find_Theorems.criterion
val badeqpattern = Pattern (Const ("Pure.eq", "?'a => ?'a => prop")):
   term Find_Theorems.criterion
val undefpattern =
   Pattern
    (
       Const ("HOL.Trueprop", "bool => prop") $
         (Const ("HOL.eq", "?'a => ?'a => bool") $
           Var (("_dummy_", 1), "?'a") $ Const ("HOL.undefined", "?'a"))
       ):
   term Find_Theorems.criterion
val thmpattern =
   Pattern
    (Const ("HOL.Trueprop", "bool => prop") $ Var (("_dummy_", 1), "bool")):
   term Find_Theorems.criterion
val badnames =
   ["*nitpick*", "*Nitpick*", "*full_exhaustive*", "*_def*", "Enum.finite*",
    "*Quickcheck*", "ATP*", "*Nunchaku*", "*Code*", "*BNF*", "*SMT*",
    "*.*.*"]:
   string list
val unwanted_names =
   [(false, Name "*nitpick*"), (false, Name "*Nitpick*"),
    (false, Name "*full_exhaustive*"), (false, Name "*_def*"),
    (false, Name "Enum.finite*"), (false, Name "*Quickcheck*"),
    (false, Name "ATP*"), (false, Name "*Nunchaku*"),
    (false, Name "*Code*"), (false, Name "*BNF*"), (false, Name "*SMT*"),
    (false, Name "*.*.*")]:
   (bool * term Find_Theorems.criterion) list
val has_vars = fn: term -> bool
val get_all_eqs = fn: string -> Proof.context -> (string * thm) list
val get_all_thms = fn: string -> Proof.context -> (string * thm) list
val get_noneq_thms = fn: string -> Proof.context -> (string * thm) list
val template_eqs = fn:
   string -> Proof.context -> (string * thm * template) list
val template_thms = fn:
   string -> Proof.context -> (string * thm * template) list
### theory "Draft.ExtrEqs"
### 0.595s elapsed time, 1.531s cpu time, 0.166s GC time
Proofs for inductive predicate(s) "big_step"
  Proving monotonicity ...
consts
  inth :: "'a list => int => 'a"
Proofs for inductive predicate(s) "iexec"
  Proving monotonicity ...
consts
  acomp :: "aexp => instr list"
Found termination order: "(%p. size (fst p)) <*mlex*> {}"
consts
  ccomp :: "com => instr list"
### theory "Draft.Compiler"
### 1.760s elapsed time, 3.131s cpu time, 0.336s GC time
Loading theory "Draft.Compiler2" (required by "Draft.Compiler2MoreTemplates")
Found termination order:
  "(%p. size_list (%p. size_list (nat o abs) (snd (snd p)))
         (snd p)) <*mlex*>
   {}"
### theory "Draft.Compiler2"
### 0.312s elapsed time, 0.331s cpu time, 0.023s GC time
Loading theory "Draft.Compiler2MoreTemplates"
val templateLemmas =
   [("Compiler2.execl_drop",
     "?P \<Turnstile> ?cfs ==> ?P \<Turnstile> drop ?n ?cfs",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 1, template_var 2),
              template_var 1)
            )],
       template_predicate
        (
           template_app
            (template_app (template_hole 1, template_var 2),
             template_app
              (template_app (template_hole 0, template_var 0),
               template_var 1))
           ))),
    ("Compiler2.execl_all_SKIP",
     "[] \<Turnstile> ?cfs\<box> ==>
      cpred SKIP (?cfs ! 0) (?cfs ! (length ?cfs - Suc 0))",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 8, template_hole 7),
              template_var 0)
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_app (template_hole 6, template_hole 5),
               template_app
                (template_app (template_hole 4, template_var 0),
                 template_hole 3)),
             template_app
              (template_app (template_hole 4, template_var 0),
               template_app
                (template_app
                  (template_hole 2,
                   template_app (template_hole 1, template_var 0)),
                 template_app (template_hole 0, template_hole 3))))
           ))),
    ("Compiler2.ccomp_correct",
     "ccomp ?c \<Turnstile> ?cfs\<box> ==>
      cpred ?c (?cfs ! 0) (?cfs ! (length ?cfs - 1))",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_hole 7,
                template_app (template_hole 6, template_var 1)),
              template_var 0)
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_app (template_hole 5, template_var 1),
               template_app
                (template_app (template_hole 4, template_var 0),
                 template_hole 3)),
             template_app
              (template_app (template_hole 4, template_var 0),
               template_app
                (template_app
                  (template_hole 2,
                   template_app (template_hole 1, template_var 0)),
                 template_hole 0)))
           ))),
    ("Compiler2.acomp_correct",
     "acomp ?a \<Turnstile> ?cfs\<box> ==>
      apred ?a (?cfs ! 0) (?cfs ! (length ?cfs - Suc 0))",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_hole 7,
                template_app (template_hole 6, template_var 1)),
              template_var 0)
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_app (template_hole 5, template_var 1),
               template_app
                (template_app (template_hole 4, template_var 0),
                 template_hole 3)),
             template_app
              (template_app (template_hole 4, template_var 0),
               template_app
                (template_app
                  (template_hole 2,
                   template_app (template_hole 1, template_var 0)),
                 template_app (template_hole 0, template_hole 3))))
           ))),
    ("Compiler2.execl_all_V",
     "[LOAD ?x] \<Turnstile> ?cfs\<box> ==>
      apred (V ?x) (?cfs ! 0) (?cfs ! (length ?cfs - Suc 0))",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_hole 10,
                template_app
                 (template_app
                   (template_hole 9,
                    template_app (template_hole 8, template_var 1)),
                  template_hole 7)),
              template_var 0)
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_app
                (template_hole 6,
                 template_app (template_hole 5, template_var 1)),
               template_app
                (template_app (template_hole 4, template_var 0),
                 template_hole 3)),
             template_app
              (template_app (template_hole 4, template_var 0),
               template_app
                (template_app
                  (template_hole 2,
                   template_app (template_hole 1, template_var 0)),
                 template_app (template_hole 0, template_hole 3))))
           ))),
    ("Compiler2.execl_all_N",
     "[LOADI ?i] \<Turnstile> ?cfs\<box> ==>
      apred (N ?i) (?cfs ! 0) (?cfs ! (length ?cfs - Suc 0))",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_hole 10,
                template_app
                 (template_app
                   (template_hole 9,
                    template_app (template_hole 8, template_var 1)),
                  template_hole 7)),
              template_var 0)
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_app
                (template_hole 6,
                 template_app (template_hole 5, template_var 1)),
               template_app
                (template_app (template_hole 4, template_var 0),
                 template_hole 3)),
             template_app
              (template_app (template_hole 4, template_var 0),
               template_app
                (template_app
                  (template_hole 2,
                   template_app (template_hole 1, template_var 0)),
                 template_app (template_hole 0, template_hole 3))))
           ))),
    ("Compiler2.bcomp_correct",
     "[| bcomp ?x \<Turnstile> ?cfs\<box>; 0 <= snd (snd ?x) |]
      ==> bpred ?x (?cfs ! 0) (?cfs ! (length ?cfs - Suc 0))",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_hole 11,
                template_app (template_hole 10, template_var 1)),
              template_var 0)
            ),
        template_inequation
         (less_equals, template_hole 8,
          template_app
           (template_hole 7,
            template_app (template_hole 6, template_var 1)))],
       template_predicate
        (
           template_app
            (template_app
              (template_app (template_hole 5, template_var 1),
               template_app
                (template_app (template_hole 4, template_var 0),
                 template_hole 3)),
             template_app
              (template_app (template_hole 4, template_var 0),
               template_app
                (template_app
                  (template_hole 2,
                   template_app (template_hole 1, template_var 0)),
                 template_app (template_hole 0, template_hole 3))))
           ))),
    ("Compiler2.iexec_offset_aux",
     "?i + 1 - ?j = ?i - ?j + 1 & ?i + ?j - ?k + 1 = ?i - ?k + ?j + 1",
     template_predicate
      (
         template_app
          (template_app
            (template_hole 4,
             template_app
              (template_app
                (template_hole 3,
                 template_app
                  (template_app
                    (template_hole 2,
                     template_app
                      (template_app (template_hole 1, template_var 2),
                       template_hole 0)),
                   template_var 1)),
               template_app
                (template_app
                  (template_hole 1,
                   template_app
                    (template_app (template_hole 2, template_var 2),
                     template_var 1)),
                 template_hole 0))),
           template_app
            (template_app
              (template_hole 3,
               template_app
                (template_app
                  (template_hole 1,
                   template_app
                    (template_app
                      (template_hole 2,
                       template_app
                        (template_app (template_hole 1, template_var 2),
                         template_var 1)),
                     template_var 0)),
                 template_hole 0)),
             template_app
              (template_app
                (template_hole 1,
                 template_app
                  (template_app
                    (template_hole 1,
                     template_app
                      (template_app (template_hole 2, template_var 2),
                       template_var 0)),
                   template_var 1)),
               template_hole 0)))
         )),
    ("Compiler2.exec_execl",
     "?P \<turnstile> ?cf \<rightarrow>* ?cf' ==>
      EX cfs.
         ?P \<Turnstile> cfs & cfs ~= [] & hd cfs = ?cf & last cfs = ?cf'",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_hole 10,
                  template_app (template_hole 9, template_var 2)),
                template_var 1),
              template_var 0)
            )],
       template_predicate (template_app (template_hole 8, t_empty)))),
    ("Compiler2.ccomp_exec",
     "ccomp ?c \<turnstile> (0, ?s, ?stk) \<rightarrow>*
      (size (ccomp ?c), ?s', ?stk') ==>
      (?c, ?s) \<Rightarrow> ?s' & ?stk' = ?stk",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_hole 11,
                  template_app
                   (template_hole 10,
                    template_app (template_hole 9, template_var 4))),
                template_app
                 (template_app (template_hole 8, template_hole 7),
                  template_app
                   (template_app (template_hole 6, template_var 3),
                    template_var 2))),
              template_app
               (template_app
                 (template_hole 8,
                  template_app
                   (template_hole 5,
                    template_app
                     (template_hole 4,
                      template_app (template_hole 9, template_var 4)))),
                template_app
                 (template_app (template_hole 6, template_var 1),
                  template_var 0)))
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 3,
               template_app
                (template_app
                  (template_hole 2,
                   template_app
                    (template_app (template_hole 1, template_var 4),
                     template_var 3)),
                 template_var 1)),
             template_app
              (template_app (template_hole 0, template_var 0),
               template_var 2))
           ))),
    ("Compiler2.execl_last",
     "[| ?P \<Turnstile> ?cfs; ?k < length ?cfs;
         fst (?cfs ! ?k) ~: {0..<size ?P} |]
      ==> length ?cfs - 1 = ?k",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 13, template_var 2),
              template_var 1)
            ),
        template_inequation
         (less_than, template_var 0,
          template_app (template_hole 11, template_var 1)),
        template_negation
         (
            template_predicate
             (
                template_app
                 (template_app
                   (template_hole 9,
                    template_app
                     (template_hole 8,
                      template_app
                       (template_app (template_hole 7, template_var 1),
                        template_var 0))),
                  template_app
                   (template_app (template_hole 6, template_hole 5),
                    template_app
                     (template_hole 4,
                      template_app (template_hole 3, template_var 2))))
                )
            )],
       template_equation
        (template_app
          (template_app
            (template_hole 1,
             template_app (template_hole 11, template_var 1)),
           template_hole 0),
         template_var 0))),
    ("Compiler2.iexec_offset",
     "(?ins, ?pc, ?s, ?stk) \<mapsto> (?pc', ?s', ?stk') ==>
      (?ins, ?pc - ?i, ?s, ?stk) \<mapsto> (?pc' - ?i, ?s', ?stk')",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_hole 4,
                template_app
                 (template_app (template_hole 3, template_var 7),
                  template_app
                   (template_app (template_hole 2, template_var 6),
                    template_app
                     (template_app (template_hole 1, template_var 5),
                      template_var 4)))),
              template_app
               (template_app (template_hole 2, template_var 3),
                template_app
                 (template_app (template_hole 1, template_var 2),
                  template_var 1)))
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 4,
               template_app
                (template_app (template_hole 3, template_var 7),
                 template_app
                  (template_app
                    (template_hole 2,
                     template_app
                      (template_app (template_hole 0, template_var 6),
                       template_var 0)),
                   template_app
                    (template_app (template_hole 1, template_var 5),
                     template_var 4)))),
             template_app
              (template_app
                (template_hole 2,
                 template_app
                  (template_app (template_hole 0, template_var 3),
                   template_var 0)),
               template_app
                (template_app (template_hole 1, template_var 2),
                 template_var 1)))
           ))),
    ("Compiler2.execl_all_Bc",
     "[| if ?v = ?f then [JMP ?i] else [] \<Turnstile> ?cfs\<box>;
         0 <= ?i |]
      ==> bpred (Bc ?v, ?f, ?i) (?cfs ! 0) (?cfs ! (length ?cfs - Suc 0))",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_hole 16,
                template_app
                 (template_app
                   (template_app
                     (template_hole 15,
                      template_app
                       (template_app (template_hole 14, template_var 3),
                        template_var 2)),
                    template_app
                     (template_app
                       (template_hole 13,
                        template_app (template_hole 12, template_var 1)),
                      template_hole 11)),
                  template_hole 11)),
              template_var 0)
            ),
        template_inequation (less_equals, template_hole 9, template_var 1)],
       template_predicate
        (
           template_app
            (template_app
              (template_app
                (template_hole 8,
                 template_app
                  (template_app
                    (template_hole 7,
                     template_app (template_hole 6, template_var 3)),
                   template_app
                    (template_app (template_hole 5, template_var 2),
                     template_var 1))),
               template_app
                (template_app (template_hole 4, template_var 0),
                 template_hole 3)),
             template_app
              (template_app (template_hole 4, template_var 0),
               template_app
                (template_app
                  (template_hole 2,
                   template_app (template_hole 1, template_var 0)),
                 template_app (template_hole 0, template_hole 3))))
           ))),
    ("Compiler2.execl_next",
     "[| ?P \<Turnstile> ?cfs; ?k < length ?cfs; ?k ~= length ?cfs - 1 |]
      ==> (?P !! fst (?cfs ! ?k), ?cfs ! ?k) \<mapsto> ?cfs ! Suc ?k",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 12, template_var 2),
              template_var 1)
            ),
        template_inequation
         (less_than, template_var 0,
          template_app (template_hole 10, template_var 1)),
        template_negation
         (
            template_equation
             (template_var 0,
              template_app
               (template_app
                 (template_hole 7,
                  template_app (template_hole 10, template_var 1)),
                template_hole 6))
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 5,
               template_app
                (template_app
                  (template_hole 4,
                   template_app
                    (template_app (template_hole 3, template_var 2),
                     template_app
                      (template_hole 2,
                       template_app
                        (template_app (template_hole 1, template_var 1),
                         template_var 0)))),
                 template_app
                  (template_app (template_hole 1, template_var 1),
                   template_var 0))),
             template_app
              (template_app (template_hole 1, template_var 1),
               template_app (template_hole 0, template_var 0)))
           ))),
    ("Compiler2.execl_sub",
     "[| ?P @ ?P' @ ?P'' \<Turnstile> ?cfs;
         ALL k:{?m..<?n}.
            size ?P <= fst (?cfs ! k) &
            fst (?cfs ! k) - size ?P < size ?P' |]
      ==> ?P' \<Turnstile> map (off ?P) (drop ?m (take (Suc ?n) ?cfs))",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_hole 17,
                template_app
                 (template_app (template_hole 16, template_var 5),
                  template_app
                   (template_app (template_hole 16, template_var 4),
                    template_var 3))),
              template_var 2)
            ),
        template_predicate
         (
            template_app
             (template_app
               (template_hole 15,
                template_app
                 (template_app (template_hole 14, template_var 1),
                  template_var 0)),
              t_empty)
            )],
       template_predicate
        (
           template_app
            (template_app (template_hole 17, template_var 4),
             template_app
              (template_app (template_hole 5, t_empty),
               template_app
                (template_app (template_hole 2, template_var 1),
                 template_app
                  (template_app
                    (template_hole 1,
                     template_app (template_hole 0, template_var 0)),
                   template_var 2))))
           ))),
    ("Compiler2.while_correct",
     "[| bcomp (?b, False, size (ccomp ?c) + 1) @
         ccomp ?c @
         [JMP (- size (bcomp (?b, False, size (ccomp ?c) + 1)) -
               size (ccomp ?c) -
               1)]
         \<Turnstile> ?cfs\<box>;
         !!cfs.
            ccomp ?c \<Turnstile> cfs\<box> ==>
            cpred ?c (cfs ! 0) (cfs ! (length cfs - Suc 0)) |]
      ==> cpred (WHILE ?b DO ?c) (?cfs ! 0) (?cfs ! (length ?cfs - Suc 0))",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_hole 23,
                template_app
                 (template_app
                   (template_hole 22,
                    template_app
                     (template_hole 21,
                      template_app
                       (template_app (template_hole 20, template_var 2),
                        template_app
                         (template_app (template_hole 19, template_hole 18),
                          template_app
                           (template_app
                             (template_hole 17,
                              template_app
                               (template_hole 16,
                                template_app
                                 (template_hole 15,
                                  template_app
                                   (template_hole 14, template_var 1)))),
                            template_hole 13))))),
                  template_app
                   (template_app
                     (template_hole 22,
                      template_app (template_hole 14, template_var 1)),
                    template_app
                     (template_app
                       (template_hole 12,
                        template_app
                         (template_hole 11,
                          template_app
                           (template_app
                             (template_hole 10,
                              template_app
                               (template_app
                                 (template_hole 10,
                                  template_app
                                   (template_hole 9,
                                    template_app
                                     (template_hole 16,
template_app
 (template_hole 15,
  template_app
   (template_hole 21,
    template_app
     (template_app (template_hole 20, template_var 2),
      template_app
       (template_app (template_hole 19, template_hole 18),
        template_app
         (template_app
           (template_hole 17,
            template_app
             (template_hole 16,
              template_app
               (template_hole 15,
                template_app (template_hole 14, template_var 1)))),
          template_hole 13)))))))),
                                template_app
                                 (template_hole 16,
                                  template_app
                                   (template_hole 15,
                                    template_app
                                     (template_hole 14, template_var 1))))),
                            template_hole 13))),
                      template_hole 8)))),
              template_var 0)
            ),
        template_predicate (template_app (template_hole 7, t_empty))],
       template_predicate
        (
           template_app
            (template_app
              (template_app
                (template_hole 6,
                 template_app
                  (template_app (template_hole 0, template_var 2),
                   template_var 1)),
               template_app
                (template_app (template_hole 5, template_var 0),
                 template_hole 4)),
             template_app
              (template_app (template_hole 5, template_var 0),
               template_app
                (template_app
                  (template_hole 3,
                   template_app (template_hole 2, template_var 0)),
                 template_app (template_hole 1, template_hole 4))))
           ))),
    ("Compiler2.execl_all_sub",
     "[| ?P @ ?P' ?x @ ?P'' \<Turnstile> ?cfs\<box>; ?k < length ?cfs;
         fst (?cfs ! ?k) = size ?P;
         !!cfs.
            ?P' ?x \<Turnstile> cfs\<box> ==>
            ?Q ?x (cfs ! 0) (cfs ! (length cfs - 1)) |]
      ==> EX k'<length ?cfs.
             ?Q ?x (off ?P (?cfs ! ?k)) (off ?P (?cfs ! k'))",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_hole 17,
                template_app
                 (template_app (template_hole 16, template_var 6),
                  template_app
                   (template_app
                     (template_hole 16,
                      template_app (template_var 5, template_var 4)),
                    template_var 3))),
              template_var 2)
            ),
        template_inequation
         (less_than, template_var 1,
          template_app (template_hole 14, template_var 2)),
        template_equation
         (template_app
           (template_hole 12,
            template_app
             (template_app (template_hole 11, template_var 2),
              template_var 1)),
          template_app
           (template_hole 10,
            template_app (template_hole 9, template_var 6))),
        template_predicate (template_app (template_hole 8, t_empty))],
       template_predicate (template_app (template_hole 4, t_empty)))),
    ("Compiler2.acomp_acomp",
     "[| acomp ?a\<^sub>1 @ acomp ?a\<^sub>2 @ ?P \<Turnstile> ?cfs\<box>;
         !!cfs.
            acomp ?a\<^sub>1 \<Turnstile> cfs\<box> ==>
            apred ?a\<^sub>1 (cfs ! 0) (cfs ! (length cfs - 1));
         !!cfs.
            acomp ?a\<^sub>2 \<Turnstile> cfs\<box> ==>
            apred ?a\<^sub>2 (cfs ! 0) (cfs ! (length cfs - 1)) |]
      ==> case ?cfs ! 0 of
          (pc, s, stk) =>
            pc = 0 &
            (EX k<length ?cfs.
                ?cfs ! k =
                (size (acomp ?a\<^sub>1 @ acomp ?a\<^sub>2), s,
                 aval ?a\<^sub>2 s # aval ?a\<^sub>1 s # stk))",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_hole 23,
                template_app
                 (template_app
                   (template_hole 22,
                    template_app (template_hole 21, template_var 3)),
                  template_app
                   (template_app
                     (template_hole 22,
                      template_app (template_hole 21, template_var 2)),
                    template_var 1))),
              template_var 0)
            ),
        template_predicate (template_app (template_hole 20, t_empty)),
        template_predicate (template_app (template_hole 20, t_empty))],
       template_predicate
        (
           template_app
            (template_app (template_hole 13, t_empty),
             template_app
              (template_app (template_hole 18, template_var 0),
               template_hole 17))
           ))),
    ("Compiler2.bcomp_ccomp",
     "[| bcomp (?b, ?f, ?i) @ ccomp ?c @ ?P \<Turnstile> ?cfs\<box>;
         0 <= ?i;
         !!cfs.
            ccomp ?c \<Turnstile> cfs\<box> ==>
            cpred ?c (cfs ! 0) (cfs ! (length cfs - 1)) |]
      ==> case ?cfs ! 0 of
          (pc, s, stk) =>
            pc = 0 &
            (bval ?b s ~= ?f -->
             (EX k<length ?cfs.
                 case ?cfs ! k of
                 (pc', s', stk') =>
                   pc' = size (bcomp (?b, ?f, ?i) @ ccomp ?c) &
                   (?c, s) \<Rightarrow> s' & stk' = stk))",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_hole 29,
                template_app
                 (template_app
                   (template_hole 28,
                    template_app
                     (template_hole 27,
                      template_app
                       (template_app (template_hole 26, template_var 5),
                        template_app
                         (template_app (template_hole 25, template_var 4),
                          template_var 3)))),
                  template_app
                   (template_app
                     (template_hole 28,
                      template_app (template_hole 24, template_var 2)),
                    template_var 1))),
              template_var 0)
            ),
        template_inequation (less_equals, template_hole 22, template_var 3),
        template_predicate (template_app (template_hole 21, t_empty))],
       template_predicate
        (
           template_app
            (template_app (template_hole 14, t_empty),
             template_app
              (template_app (template_hole 19, template_var 0),
               template_hole 18))
           ))),
    ("Compiler2.execl_sub_aux",
     "[| !!m n.
            ALL k:{m..<n}. ?Q ?P' (((?pc, ?s, ?stk) # ?cfs) ! k) ==>
            ?P' \<Turnstile>
            map (off ?P)
             (case m of 0 => (?pc, ?s, ?stk) # take n ?cfs
              | Suc m => ?F ?cfs m n);
         ALL k:{?m..<?n + ?m + length ?cfs'}.
            ?Q ?P' ((?cfs' @ (?pc, ?s, ?stk) # ?cfs) ! (k - ?m)) |]
      ==> ?P' \<Turnstile>
          (?pc - size ?P, ?s, ?stk) # map (off ?P) (take ?n ?cfs)",
     template_implication
      ([template_predicate (template_app (template_hole 20, t_empty)),
        template_predicate
         (
            template_app
             (template_app
               (template_hole 18,
                template_app
                 (template_app (template_hole 17, template_var 2),
                  template_app
                   (template_app
                     (template_hole 3,
                      template_app
                       (template_app (template_hole 3, template_var 1),
                        template_var 2)),
                    template_app (template_hole 2, template_var 0)))),
              t_empty)
            )],
       template_predicate
        (
           template_app
            (template_app (template_hole 12, template_var 9),
             template_app
              (template_app
                (template_hole 15,
                 template_app
                  (template_app
                    (template_hole 14,
                     template_app
                      (template_app (template_hole 10, template_var 8),
                       template_app
                        (template_hole 8,
                         template_app (template_hole 7, template_var 4)))),
                   template_app
                    (template_app (template_hole 13, template_var 7),
                     template_var 6))),
               template_app
                (template_app (template_hole 11, t_empty),
                 template_app
                  (template_app (template_hole 4, template_var 1),
                   template_var 5))))
           ))),
    ("Compiler2.ccomp_ccomp",
     "[| ccomp ?c\<^sub>1 @ ccomp ?c\<^sub>2 \<Turnstile> ?cfs\<box>;
         !!cfs.
            ccomp ?c\<^sub>1 \<Turnstile> cfs\<box> ==>
            cpred ?c\<^sub>1 (cfs ! 0) (cfs ! (length cfs - 1));
         !!cfs.
            ccomp ?c\<^sub>2 \<Turnstile> cfs\<box> ==>
            cpred ?c\<^sub>2 (cfs ! 0) (cfs ! (length cfs - 1)) |]
      ==> case ?cfs ! 0 of
          (pc, s, stk) =>
            pc = 0 &
            (EX k<length ?cfs.
                EX t. case ?cfs ! k of
                      (pc', s', stk') =>
                        pc' = size (ccomp ?c\<^sub>1 @ ccomp ?c\<^sub>2) &
                        (?c\<^sub>1, s) \<Rightarrow> t &
                        (?c\<^sub>2, t) \<Rightarrow> s' & stk' = stk)",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_hole 22,
                template_app
                 (template_app
                   (template_hole 21,
                    template_app (template_hole 20, template_var 2)),
                  template_app (template_hole 20, template_var 1))),
              template_var 0)
            ),
        template_predicate (template_app (template_hole 19, t_empty)),
        template_predicate (template_app (template_hole 19, t_empty))],
       template_predicate
        (
           template_app
            (template_app (template_hole 12, t_empty),
             template_app
              (template_app (template_hole 17, template_var 0),
               template_hole 16))
           ))),
    ("Compiler2.bcomp_bcomp",
     "[| bcomp (?b\<^sub>1, ?f\<^sub>1, ?i\<^sub>1) @
         bcomp (?b\<^sub>2, ?f\<^sub>2, ?i\<^sub>2)
         \<Turnstile> ?cfs\<box>;
         !!cfs.
            bcomp (?b\<^sub>1, ?f\<^sub>1, ?i\<^sub>1) \<Turnstile>
            cfs\<box> ==>
            bpred (?b\<^sub>1, ?f\<^sub>1, ?i\<^sub>1) (cfs ! 0)
             (cfs ! (length cfs - 1));
         !!cfs.
            bcomp (?b\<^sub>2, ?f\<^sub>2, ?i\<^sub>2) \<Turnstile>
            cfs\<box> ==>
            bpred (?b\<^sub>2, ?f\<^sub>2, ?i\<^sub>2) (cfs ! 0)
             (cfs ! (length cfs - 1)) |]
      ==> case ?cfs ! 0 of
          (pc, s, stk) =>
            pc = 0 &
            (bval ?b\<^sub>1 s ~= ?f\<^sub>1 -->
             (EX k<length ?cfs.
                 ?cfs ! k =
                 (size
                   (bcomp (?b\<^sub>1, ?f\<^sub>1, ?i\<^sub>1) @
                    bcomp (?b\<^sub>2, ?f\<^sub>2, ?i\<^sub>2)) +
                  (if bval ?b\<^sub>2 s = ?f\<^sub>2 then ?i\<^sub>2
                   else 0),
                  s, stk)))",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_hole 29,
                template_app
                 (template_app
                   (template_hole 28,
                    template_app
                     (template_hole 27,
                      template_app
                       (template_app (template_hole 26, template_var 6),
                        template_app
                         (template_app (template_hole 25, template_var 5),
                          template_var 4)))),
                  template_app
                   (template_hole 27,
                    template_app
                     (template_app (template_hole 26, template_var 3),
                      template_app
                       (template_app (template_hole 25, template_var 2),
                        template_var 1))))),
              template_var 0)
            ),
        template_predicate (template_app (template_hole 24, t_empty)),
        template_predicate (template_app (template_hole 24, t_empty))],
       template_predicate
        (
           template_app
            (template_app (template_hole 17, t_empty),
             template_app
              (template_app (template_hole 22, template_var 0),
               template_hole 21))
           ))),
    ("Compiler2.execl_all_sub2",
     "[| ?P ?x @ ?P' ?x' @ ?P'' \<Turnstile> ?cfs\<box>;
         !!cfs.
            ?P ?x \<Turnstile> cfs\<box> ==>
            (case cfs ! 0 of
             (pc, s, stk) =>
               %(pc', s', stk').
                  pc' = pc + size (?P ?x) + ?I s &
                  ?Q s s' & stk' = ?F s stk)
             (cfs ! (length cfs - 1));
         !!cfs.
            ?P' ?x' \<Turnstile> cfs\<box> ==>
            (case cfs ! 0 of
             (pc, s, stk) =>
               %(pc', s', stk').
                  pc' = pc + size (?P' ?x') + ?I' s &
                  ?Q' s s' & stk' = ?F' s stk)
             (cfs ! (length cfs - 1));
         ?I (fst (snd (?cfs ! 0))) = 0 |]
      ==> EX k<length ?cfs.
             EX t. (case ?cfs ! 0 of
                    (pc, s, stk) =>
                      %(pc', s', stk').
                         pc = 0 &
                         pc' = size (?P ?x) + size (?P' ?x') + ?I' t &
                         ?Q s t & ?Q' t s' & stk' = ?F' t (?F s stk))
                    (?cfs ! k)",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_hole 23,
                template_app
                 (template_app
                   (template_hole 22,
                    template_app (template_var 11, template_var 10)),
                  template_app
                   (template_app
                     (template_hole 22,
                      template_app (template_var 9, template_var 8)),
                    template_var 7))),
              template_var 6)
            ),
        template_predicate (template_app (template_hole 21, t_empty)),
        template_predicate (template_app (template_hole 21, t_empty)),
        template_equation
         (template_app
           (template_var 5,
            template_app
             (template_hole 5,
              template_app
               (template_hole 4,
                template_app
                 (template_app (template_hole 10, template_var 6),
                  template_hole 9)))),
          template_hole 3)],
       template_predicate (template_app (template_hole 2, t_empty))))]:
   (string * thm * template) list
### theory "Draft.Compiler2MoreTemplates"
### 0.398s elapsed time, 0.546s cpu time, 0.028s GC time
val it = (): unit
