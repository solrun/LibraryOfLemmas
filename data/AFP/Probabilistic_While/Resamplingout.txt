Loading theory "HOL-Library.Function_Algebras" (required by "Draft.ResamplingTemplates" via "Draft.ExtrEqs" via "HOL-Library.BigO")
Loading theory "Draft.While_SPMF" (required by "Draft.ResamplingTemplates" via "Draft.Resampling")
Loading theory "Draft.Templates" (required by "Draft.ResamplingTemplates" via "Draft.ExtrEqs")
instantiation
  fun :: (type, plus) plus
  plus_fun == plus :: ('a => 'b) => ('a => 'b) => 'a => 'b
instantiation
  fun :: (type, zero) zero
  zero_fun == zero_class.zero :: 'a => 'b
instantiation
  fun :: (type, times) times
  times_fun == times :: ('a => 'b) => ('a => 'b) => 'a => 'b
instantiation
  fun :: (type, one) one
  one_fun == one_class.one :: 'a => 'b
datatype template_term
=
     t_empty
   | template_app of template_term * template_term
   | template_hole of int
   | template_var of int
datatype sign
= equals | greater_equals | greater_than | less_equals | less_than
datatype template
=
     template_bimplication of template * template
   | template_dunno
   | template_equation of template_term * template_term
   | template_implication of template list * template
   | template_inequation of sign * template_term * template_term
   | template_negation of template
   | template_predicate of template_term
constructor t_empty: template_term
constructor template_app: template_term * template_term -> template_term
constructor template_hole: int -> template_term
constructor template_var: int -> template_term
constructor equals: sign
constructor greater_equals: sign
constructor greater_than: sign
constructor less_equals: sign
constructor less_than: sign
constructor template_bimplication: template * template -> template
constructor template_dunno: template
constructor template_equation: template_term * template_term -> template
constructor template_implication: template list * template -> template
constructor template_inequation:
   sign * template_term * template_term -> template
constructor template_negation: template -> template
constructor template_predicate: template_term -> template
val vfs = fn: term -> (indexname * typ) list * (string * typ) list
val indexOf = fn: ''a list -> ''a -> int -> int
val has_eq = fn: term -> bool
val term2template = fn:
   (indexname * typ) list -> (string * typ) list -> term -> template_term
val lemma2predicate = fn: term -> term -> template
val makeTemplatewithContext = fn: term -> term -> template
val lemma2template = fn: term -> template
val thm2template = fn: thm -> template
val tterm2string = fn: template_term -> string
val template2string = fn: template -> string
val t = "height ?t <= size ?t": thm
val th =
   Const ("HOL.Trueprop", "bool => prop") $
     (Const ("Orderings.ord_class.less_eq", "nat => nat => bool") $
       (Const ("Tree.height_class.height", "?'a tree => nat") $
         Var (("t", 0), "?'a tree")) $
       (Const ("Nat.size_class.size", "?'a tree => nat") $
         Var (("t", 0), "?'a tree"))):
   term
### theory "Draft.Templates"
### 0.068s elapsed time, 0.238s cpu time, 0.000s GC time
### theory "HOL-Library.Function_Algebras"
### 0.108s elapsed time, 0.313s cpu time, 0.000s GC time
Loading theory "HOL-Library.BigO" (required by "Draft.ResamplingTemplates" via "Draft.ExtrEqs")
Found termination order: "{}"
locale loop_spmf
  fixes guard :: "'a => bool"
    and body :: "'a => 'a spmf"
locale loop_spmf
  fixes guard :: "'a => bool"
    and body :: "'a => 'a spmf"
consts
  iter :: "nat => 'a => 'a spmf"
locale loop_spmf
  fixes guard :: "'a => bool"
    and body :: "'a => 'a spmf"
### theory "Draft.While_SPMF"
### 0.606s elapsed time, 1.330s cpu time, 0.086s GC time
Loading theory "Draft.Resampling" (required by "Draft.ResamplingTemplates")
### theory "Draft.Resampling"
### 0.071s elapsed time, 0.143s cpu time, 0.000s GC time
### theory "HOL-Library.BigO"
### 0.618s elapsed time, 1.220s cpu time, 0.086s GC time
Loading theory "Draft.ExtrEqs" (required by "Draft.ResamplingTemplates")
val eqpattern =
   Pattern
    (
       Const ("HOL.Trueprop", "bool => prop") $
         (Const ("HOL.eq", "?'a => ?'a => bool") $
           Var (("_dummy_", 1), "?'a") $ Var (("_dummy_", 2), "?'a"))
       ):
   term Find_Theorems.criterion
val badeqpattern = Pattern (Const ("Pure.eq", "?'a => ?'a => prop")):
   term Find_Theorems.criterion
val undefpattern =
   Pattern
    (
       Const ("HOL.Trueprop", "bool => prop") $
         (Const ("HOL.eq", "?'a => ?'a => bool") $
           Var (("_dummy_", 1), "?'a") $ Const ("HOL.undefined", "?'a"))
       ):
   term Find_Theorems.criterion
val thmpattern =
   Pattern
    (Const ("HOL.Trueprop", "bool => prop") $ Var (("_dummy_", 1), "bool")):
   term Find_Theorems.criterion
val badnames =
   ["*nitpick*", "*Nitpick*", "*full_exhaustive*", "*_def*", "Enum.finite*",
    "*Quickcheck*", "ATP*", "*Nunchaku*", "*Code*", "*BNF*", "*SMT*",
    "*.*.*"]:
   string list
val unwanted_names =
   [(false, Name "*nitpick*"), (false, Name "*Nitpick*"),
    (false, Name "*full_exhaustive*"), (false, Name "*_def*"),
    (false, Name "Enum.finite*"), (false, Name "*Quickcheck*"),
    (false, Name "ATP*"), (false, Name "*Nunchaku*"),
    (false, Name "*Code*"), (false, Name "*BNF*"), (false, Name "*SMT*"),
    (false, Name "*.*.*")]:
   (bool * term Find_Theorems.criterion) list
val has_vars = fn: term -> bool
val get_all_eqs = fn: string -> Proof.context -> (string * thm) list
val get_all_thms = fn: string -> Proof.context -> (string * thm) list
val get_noneq_thms = fn: string -> Proof.context -> (string * thm) list
val template_eqs = fn:
   string -> Proof.context -> (string * thm * template) list
val template_thms = fn:
   string -> Proof.context -> (string * thm * template) list
### theory "Draft.ExtrEqs"
### 0.489s elapsed time, 0.540s cpu time, 0.076s GC time
Loading theory "Draft.ResamplingTemplates"
val templateLemmas =
   [("Resampling.ord_spmf_lossless",
     "[| ord_spmf (=) ?p ?q; lossless_spmf ?p |] ==> ?p = ?q",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_hole 4,
                  template_app (template_hole 3, template_hole 2)),
                template_var 1),
              template_var 0)
            ),
        template_predicate
         (template_app (template_hole 1, template_var 1))],
       template_equation (template_var 1, template_var 0))),
    ("Resampling.resample_conv_while",
     "resample ?A ?B =
      spmf_of_set ?A >>=
      loop_spmf.while (%x. x ~: ?B) (%_. spmf_of_set ?A)",
     template_equation
      (template_app
        (template_app (template_hole 5, template_var 1), template_var 0),
       template_app
        (template_app
          (template_hole 4, template_app (template_hole 3, template_var 1)),
         template_app (template_app (template_hole 2, t_empty), t_empty)))),
    ("Resampling.B_finite",
     "[| finite ?A; ?B <= ?A; ?B ~= {} |] ==> finite ?B",
     template_implication
      ([template_predicate (template_app (template_hole 4, template_var 1)),
        template_inequation (less_equals, template_var 0, template_var 1),
        template_negation
         (template_equation (template_var 0, template_hole 0))],
       template_predicate
        (template_app (template_hole 4, template_var 0)))),
    ("Resampling.A_nonempty",
     "[| finite ?A; ?B <= ?A; ?B ~= {} |] ==> ?A ~= {}",
     template_implication
      ([template_predicate (template_app (template_hole 4, template_var 1)),
        template_inequation (less_equals, template_var 0, template_var 1),
        template_negation
         (template_equation (template_var 0, template_hole 0))],
       template_negation
        (template_equation (template_var 1, template_hole 0)))),
    ("Resampling.lossless_resample",
     "[| finite ?A; ?B <= ?A; ?B ~= {} |]
      ==> lossless_spmf (resample ?A ?B)",
     template_implication
      ([template_predicate (template_app (template_hole 6, template_var 1)),
        template_inequation (less_equals, template_var 0, template_var 1),
        template_negation
         (template_equation (template_var 0, template_hole 2))],
       template_predicate
        (
           template_app
            (template_hole 1,
             template_app
              (template_app (template_hole 0, template_var 1),
               template_var 0))
           ))),
    ("Resampling.resample_eq_sample",
     "[| finite ?A; ?B <= ?A; ?B ~= {} |]
      ==> resample ?A ?B = spmf_of_set ?B",
     template_implication
      ([template_predicate (template_app (template_hole 7, template_var 1)),
        template_inequation (less_equals, template_var 0, template_var 1),
        template_negation
         (template_equation (template_var 0, template_hole 3))],
       template_equation
        (template_app
          (template_app (template_hole 1, template_var 1), template_var 0),
         template_app (template_hole 0, template_var 0)))),
    ("Resampling.resample_le_sample",
     "[| finite ?A; ?B <= ?A; ?B ~= {} |]
      ==> ord_spmf (=) (resample ?A ?B) (spmf_of_set ?B)",
     template_implication
      ([template_predicate (template_app (template_hole 9, template_var 1)),
        template_inequation (less_equals, template_var 0, template_var 1),
        template_negation
         (template_equation (template_var 0, template_hole 5))],
       template_predicate
        (
           template_app
            (template_app
              (template_app
                (template_hole 4,
                 template_app (template_hole 3, template_hole 2)),
               template_app
                (template_app (template_hole 1, template_var 1),
                 template_var 0)),
             template_app (template_hole 0, template_var 0))
           ))),
    ("Resampling.resample_fixp_induct",
     "[| spmf.admissible (%resample. ?P (curry resample));
         ?P (%resample A. return_pmf None);
         !!B. ?P B ==>
              ?P (%a b. spmf_of_set a >>=
                        (%x. if x : b then return_spmf x else B a b)) |]
      ==> ?P resample",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_hole 16,
                  template_app (template_hole 15, template_hole 14)),
                template_app
                 (template_hole 13,
                  template_app
                   (template_hole 12,
                    template_app (template_hole 11, template_hole 10)))),
              t_empty)
            ),
        template_predicate (template_app (template_var 0, t_empty)),
        template_predicate (template_app (template_hole 6, t_empty))],
       template_predicate
        (template_app (template_var 0, template_hole 0))))]:
   (string * thm * template) list
### theory "Draft.ResamplingTemplates"
### 1.261s elapsed time, 1.586s cpu time, 0.152s GC time
val it = (): unit
