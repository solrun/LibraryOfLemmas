Loading theory "Draft.Bernoulli" (required by "Draft.GeometricTemplates" via "Draft.Geometric")
Loading theory "Draft.While_SPMF" (required by "Draft.GeometricTemplates" via "Draft.Geometric")
Loading theory "HOL-Library.Function_Algebras" (required by "Draft.GeometricTemplates" via "Draft.ExtrEqs" via "HOL-Library.BigO")
Loading theory "Draft.Templates" (required by "Draft.GeometricTemplates" via "Draft.ExtrEqs")
instantiation
  fun :: (type, plus) plus
  plus_fun == plus :: ('a => 'b) => ('a => 'b) => 'a => 'b
instantiation
  fun :: (type, zero) zero
  zero_fun == zero_class.zero :: 'a => 'b
instantiation
  fun :: (type, times) times
  times_fun == times :: ('a => 'b) => ('a => 'b) => 'a => 'b
instantiation
  fun :: (type, one) one
  one_fun == one_class.one :: 'a => 'b
datatype template_term
=
     t_empty
   | template_app of template_term * template_term
   | template_hole of int
   | template_var of int
datatype sign
= equals | greater_equals | greater_than | less_equals | less_than
datatype template
=
     template_bimplication of template * template
   | template_dunno
   | template_equation of template_term * template_term
   | template_implication of template list * template
   | template_inequation of sign * template_term * template_term
   | template_negation of template
   | template_predicate of template_term
constructor t_empty: template_term
constructor template_app: template_term * template_term -> template_term
constructor template_hole: int -> template_term
constructor template_var: int -> template_term
constructor equals: sign
constructor greater_equals: sign
constructor greater_than: sign
constructor less_equals: sign
constructor less_than: sign
constructor template_bimplication: template * template -> template
constructor template_dunno: template
constructor template_equation: template_term * template_term -> template
constructor template_implication: template list * template -> template
constructor template_inequation:
   sign * template_term * template_term -> template
constructor template_negation: template -> template
constructor template_predicate: template_term -> template
val vfs = fn: term -> (indexname * typ) list * (string * typ) list
val indexOf = fn: ''a list -> ''a -> int -> int
val has_eq = fn: term -> bool
val term2template = fn:
   (indexname * typ) list -> (string * typ) list -> term -> template_term
val lemma2predicate = fn: term -> term -> template
val makeTemplatewithContext = fn: term -> term -> template
val lemma2template = fn: term -> template
val thm2template = fn: thm -> template
val tterm2string = fn: template_term -> string
val template2string = fn: template -> string
val t = "height ?t <= size ?t": thm
val th =
   Const ("HOL.Trueprop", "bool => prop") $
     (Const ("Orderings.ord_class.less_eq", "nat => nat => bool") $
       (Const ("Tree.height_class.height", "?'a tree => nat") $
         Var (("t", 0), "?'a tree")) $
       (Const ("Nat.size_class.size", "?'a tree => nat") $
         Var (("t", 0), "?'a tree"))):
   term
### theory "Draft.Templates"
### 0.101s elapsed time, 0.429s cpu time, 0.000s GC time
### theory "Draft.Bernoulli"
### 0.158s elapsed time, 0.586s cpu time, 0.039s GC time
### theory "HOL-Library.Function_Algebras"
### 0.161s elapsed time, 0.592s cpu time, 0.039s GC time
Loading theory "HOL-Library.BigO" (required by "Draft.GeometricTemplates" via "Draft.ExtrEqs")
Found termination order: "{}"
locale loop_spmf
  fixes guard :: "'a => bool"
    and body :: "'a => 'a spmf"
locale loop_spmf
  fixes guard :: "'a => bool"
    and body :: "'a => 'a spmf"
consts
  iter :: "nat => 'a => 'a spmf"
locale loop_spmf
  fixes guard :: "'a => bool"
    and body :: "'a => 'a spmf"
### theory "Draft.While_SPMF"
### 0.679s elapsed time, 1.632s cpu time, 0.097s GC time
Loading theory "Draft.Geometric" (required by "Draft.GeometricTemplates")
### theory "HOL-Library.BigO"
### 0.646s elapsed time, 1.317s cpu time, 0.058s GC time
Loading theory "Draft.ExtrEqs" (required by "Draft.GeometricTemplates")
### theory "Draft.Geometric"
### 0.356s elapsed time, 0.736s cpu time, 0.078s GC time
val eqpattern =
   Pattern
    (
       Const ("HOL.Trueprop", "bool => prop") $
         (Const ("HOL.eq", "?'a => ?'a => bool") $
           Var (("_dummy_", 1), "?'a") $ Var (("_dummy_", 2), "?'a"))
       ):
   term Find_Theorems.criterion
val badeqpattern = Pattern (Const ("Pure.eq", "?'a => ?'a => prop")):
   term Find_Theorems.criterion
val undefpattern =
   Pattern
    (
       Const ("HOL.Trueprop", "bool => prop") $
         (Const ("HOL.eq", "?'a => ?'a => bool") $
           Var (("_dummy_", 1), "?'a") $ Const ("HOL.undefined", "?'a"))
       ):
   term Find_Theorems.criterion
val thmpattern =
   Pattern
    (Const ("HOL.Trueprop", "bool => prop") $ Var (("_dummy_", 1), "bool")):
   term Find_Theorems.criterion
val badnames =
   ["*nitpick*", "*Nitpick*", "*full_exhaustive*", "*_def*", "Enum.finite*",
    "*Quickcheck*", "ATP*", "*Nunchaku*", "*Code*", "*BNF*", "*SMT*",
    "*.*.*"]:
   string list
val unwanted_names =
   [(false, Name "*nitpick*"), (false, Name "*Nitpick*"),
    (false, Name "*full_exhaustive*"), (false, Name "*_def*"),
    (false, Name "Enum.finite*"), (false, Name "*Quickcheck*"),
    (false, Name "ATP*"), (false, Name "*Nunchaku*"),
    (false, Name "*Code*"), (false, Name "*BNF*"), (false, Name "*SMT*"),
    (false, Name "*.*.*")]:
   (bool * term Find_Theorems.criterion) list
val has_vars = fn: term -> bool
val get_all_eqs = fn: string -> Proof.context -> (string * thm) list
val get_all_thms = fn: string -> Proof.context -> (string * thm) list
val get_noneq_thms = fn: string -> Proof.context -> (string * thm) list
val template_eqs = fn:
   string -> Proof.context -> (string * thm * template) list
val template_thms = fn:
   string -> Proof.context -> (string * thm * template) list
### theory "Draft.ExtrEqs"
### 0.508s elapsed time, 0.772s cpu time, 0.078s GC time
Loading theory "Draft.GeometricTemplates"
val templateLemmas =
   [("Geometric.lossless_geometric",
     "lossless_spmf (geometric_spmf ?p) = (0 < ?p)",
     template_equation
      (template_app
        (template_hole 3, template_app (template_hole 2, template_var 0)),
       template_app
        (template_app (template_hole 1, template_hole 0), template_var 0))),
    ("Geometric.spmf_geometric_nonpos",
     "?p <= 0 ==> geometric_spmf ?p = return_pmf None",
     template_implication
      ([template_inequation (less_equals, template_var 0, template_hole 4)],
       template_equation
        (template_app (template_hole 2, template_var 0),
         template_app (template_hole 1, template_hole 0)))),
    ("Geometric.spmf_geometric_ge_1",
     "1 <= ?p ==> geometric_spmf ?p = return_spmf 0",
     template_implication
      ([template_inequation (less_equals, template_hole 5, template_var 0)],
       template_equation
        (template_app (template_hole 3, template_var 0),
         template_app
          (template_hole 2,
           template_app (template_hole 1, template_hole 0))))),
    ("Geometric.spmf_geometric",
     "[| 0 < ?p; ?p < 1 |]
      ==> spmf (geometric_spmf ?p) ?n = (1 - ?p) ^ ?n * ?p",
     template_implication
      ([template_inequation (less_than, template_hole 8, template_var 1),
        template_inequation (less_than, template_var 1, template_hole 7)],
       template_equation
        (template_app
          (template_app
            (template_hole 5,
             template_app (template_hole 4, template_var 1)),
           template_app (template_hole 3, template_var 0)),
         template_app
          (template_app
            (template_hole 2,
             template_app
              (template_app
                (template_hole 1,
                 template_app
                  (template_app (template_hole 0, template_hole 7),
                   template_var 1)),
               template_var 0)),
           template_var 1)))),
    ("Geometric.geometric_spmf_conv_while",
     "geometric_spmf ?p =
      map_spmf snd
       (loop_spmf.while fst
         (%(b, x).
             map_spmf (%b'. (~ b', x + (if b' then 0 else 1)))
              (bernoulli ?p))
         (True, 0))",
     template_equation
      (template_app (template_hole 16, template_var 0),
       template_app
        (template_app
          (template_hole 15,
           template_app (template_hole 14, template_hole 13)),
         template_app
          (template_app
            (template_app (template_hole 12, template_hole 11),
             template_app (template_hole 10, t_empty)),
           template_app
            (template_app (template_hole 7, template_hole 0),
             template_hole 3))))),
    ("Geometric.geometric_spmf_fixp_induct",
     "[| spmf.admissible ?P; ?P (%geometric_spmf. return_pmf None);
         !!geometric_spmf'.
            ?P geometric_spmf' ==>
            ?P (%p. bernoulli p >>=
                    (%b. if b then return_spmf 0
                         else map_spmf ((+) 1) (geometric_spmf' p))) |]
      ==> ?P geometric_spmf",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_hole 19,
                  template_app (template_hole 18, template_hole 17)),
                template_app
                 (template_hole 16,
                  template_app
                   (template_hole 15,
                    template_app (template_hole 14, template_hole 13)))),
              template_var 0)
            ),
        template_predicate (template_app (template_var 0, t_empty)),
        template_predicate (template_app (template_hole 10, t_empty))],
       template_predicate
        (template_app (template_var 0, template_hole 0))))]:
   (string * thm * template) list
### theory "Draft.GeometricTemplates"
### 1.398s elapsed time, 2.033s cpu time, 0.610s GC time
val it = (): unit
