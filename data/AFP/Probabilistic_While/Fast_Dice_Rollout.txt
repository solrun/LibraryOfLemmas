Loading theory "Draft.Bernoulli" (required by "Draft.Fast_Dice_RollTemplates" via "Draft.Fast_Dice_Roll")
Loading theory "Draft.Templates" (required by "Draft.Fast_Dice_RollTemplates" via "Draft.ExtrEqs")
Loading theory "HOL-Library.Function_Algebras" (required by "Draft.Fast_Dice_RollTemplates" via "Draft.ExtrEqs" via "HOL-Library.BigO")
Loading theory "Draft.While_SPMF" (required by "Draft.Fast_Dice_RollTemplates" via "Draft.Fast_Dice_Roll")
instantiation
  fun :: (type, plus) plus
  plus_fun == plus :: ('a => 'b) => ('a => 'b) => 'a => 'b
instantiation
  fun :: (type, zero) zero
  zero_fun == zero_class.zero :: 'a => 'b
instantiation
  fun :: (type, times) times
  times_fun == times :: ('a => 'b) => ('a => 'b) => 'a => 'b
instantiation
  fun :: (type, one) one
  one_fun == one_class.one :: 'a => 'b
datatype template_term
=
     t_empty
   | template_app of template_term * template_term
   | template_hole of int
   | template_var of int
datatype sign
= equals | greater_equals | greater_than | less_equals | less_than
datatype template
=
     template_bimplication of template * template
   | template_dunno
   | template_equation of template_term * template_term
   | template_implication of template list * template
   | template_inequation of sign * template_term * template_term
   | template_negation of template
   | template_predicate of template_term
constructor t_empty: template_term
constructor template_app: template_term * template_term -> template_term
constructor template_hole: int -> template_term
constructor template_var: int -> template_term
constructor equals: sign
constructor greater_equals: sign
constructor greater_than: sign
constructor less_equals: sign
constructor less_than: sign
constructor template_bimplication: template * template -> template
constructor template_dunno: template
constructor template_equation: template_term * template_term -> template
constructor template_implication: template list * template -> template
constructor template_inequation:
   sign * template_term * template_term -> template
constructor template_negation: template -> template
constructor template_predicate: template_term -> template
val vfs = fn: term -> (indexname * typ) list * (string * typ) list
val indexOf = fn: ''a list -> ''a -> int -> int
val has_eq = fn: term -> bool
val term2template = fn:
   (indexname * typ) list -> (string * typ) list -> term -> template_term
val lemma2predicate = fn: term -> term -> template
val makeTemplatewithContext = fn: term -> term -> template
val lemma2template = fn: term -> template
val thm2template = fn: thm -> template
val tterm2string = fn: template_term -> string
val template2string = fn: template -> string
val t = "height ?t <= size ?t": thm
val th =
   Const ("HOL.Trueprop", "bool => prop") $
     (Const ("Orderings.ord_class.less_eq", "nat => nat => bool") $
       (Const ("Tree.height_class.height", "?'a tree => nat") $
         Var (("t", 0), "?'a tree")) $
       (Const ("Nat.size_class.size", "?'a tree => nat") $
         Var (("t", 0), "?'a tree"))):
   term
### theory "Draft.Templates"
### 0.072s elapsed time, 0.331s cpu time, 0.000s GC time
### theory "HOL-Library.Function_Algebras"
### 0.122s elapsed time, 0.474s cpu time, 0.043s GC time
Loading theory "HOL-Library.BigO" (required by "Draft.Fast_Dice_RollTemplates" via "Draft.ExtrEqs")
### theory "Draft.Bernoulli"
### 0.141s elapsed time, 0.540s cpu time, 0.043s GC time
Found termination order: "{}"
locale loop_spmf
  fixes guard :: "'a => bool"
    and body :: "'a => 'a spmf"
locale loop_spmf
  fixes guard :: "'a => bool"
    and body :: "'a => 'a spmf"
consts
  iter :: "nat => 'a => 'a spmf"
locale loop_spmf
  fixes guard :: "'a => bool"
    and body :: "'a => 'a spmf"
### theory "Draft.While_SPMF"
### 0.628s elapsed time, 1.519s cpu time, 0.107s GC time
Loading theory "Draft.Fast_Dice_Roll" (required by "Draft.Fast_Dice_RollTemplates")
### theory "HOL-Library.BigO"
### 0.599s elapsed time, 1.247s cpu time, 0.064s GC time
Loading theory "Draft.ExtrEqs" (required by "Draft.Fast_Dice_RollTemplates")
### theory "Draft.Fast_Dice_Roll"
### 0.402s elapsed time, 0.834s cpu time, 0.087s GC time
val eqpattern =
   Pattern
    (
       Const ("HOL.Trueprop", "bool => prop") $
         (Const ("HOL.eq", "?'a => ?'a => bool") $
           Var (("_dummy_", 1), "?'a") $ Var (("_dummy_", 2), "?'a"))
       ):
   term Find_Theorems.criterion
val badeqpattern = Pattern (Const ("Pure.eq", "?'a => ?'a => prop")):
   term Find_Theorems.criterion
val undefpattern =
   Pattern
    (
       Const ("HOL.Trueprop", "bool => prop") $
         (Const ("HOL.eq", "?'a => ?'a => bool") $
           Var (("_dummy_", 1), "?'a") $ Const ("HOL.undefined", "?'a"))
       ):
   term Find_Theorems.criterion
val thmpattern =
   Pattern
    (Const ("HOL.Trueprop", "bool => prop") $ Var (("_dummy_", 1), "bool")):
   term Find_Theorems.criterion
val badnames =
   ["*nitpick*", "*Nitpick*", "*full_exhaustive*", "*_def*", "Enum.finite*",
    "*Quickcheck*", "ATP*", "*Nunchaku*", "*Code*", "*BNF*", "*SMT*",
    "*.*.*"]:
   string list
val unwanted_names =
   [(false, Name "*nitpick*"), (false, Name "*Nitpick*"),
    (false, Name "*full_exhaustive*"), (false, Name "*_def*"),
    (false, Name "Enum.finite*"), (false, Name "*Quickcheck*"),
    (false, Name "ATP*"), (false, Name "*Nunchaku*"),
    (false, Name "*Code*"), (false, Name "*BNF*"), (false, Name "*SMT*"),
    (false, Name "*.*.*")]:
   (bool * term Find_Theorems.criterion) list
val has_vars = fn: term -> bool
val get_all_eqs = fn: string -> Proof.context -> (string * thm) list
val get_all_thms = fn: string -> Proof.context -> (string * thm) list
val get_noneq_thms = fn: string -> Proof.context -> (string * thm) list
val template_eqs = fn:
   string -> Proof.context -> (string * thm * template) list
val template_thms = fn:
   string -> Proof.context -> (string * thm * template) list
### theory "Draft.ExtrEqs"
### 0.514s elapsed time, 0.900s cpu time, 0.149s GC time
Loading theory "Draft.Fast_Dice_RollTemplates"
val templateLemmas =
   [("Fast_Dice_Roll.fast_dice_roll_alt", "fdr_alt ?n = fast_dice_roll ?n",
     template_equation
      (template_app (template_hole 1, template_var 0),
       template_app (template_hole 0, template_var 0))),
    ("Fast_Dice_Roll.fast_uniform_conv_uniform",
     "fast_uniform ?n = spmf_of_set {..<?n}",
     template_equation
      (template_app (template_hole 2, template_var 0),
       template_app
        (template_hole 1, template_app (template_hole 0, template_var 0)))),
    ("Fast_Dice_Roll.lossless_fast_uniform",
     "lossless_spmf (fast_uniform ?n) = (0 < ?n)",
     template_equation
      (template_app
        (template_hole 3, template_app (template_hole 2, template_var 0)),
       template_app
        (template_app (template_hole 1, template_hole 0), template_var 0))),
    ("Fast_Dice_Roll.fast_dice_roll_0",
     "fast_dice_roll ?n 0 ?c = return_pmf None",
     template_equation
      (template_app
        (template_app
          (template_app (template_hole 3, template_var 1), template_hole 2),
         template_var 0),
       template_app (template_hole 1, template_hole 0))),
    ("Fast_Dice_Roll.lossless_fdr_step",
     "lossless_spmf (fdr_step ?n ?v ?c) = (0 < ?v)",
     template_equation
      (template_app
        (template_hole 3,
         template_app
          (template_app
            (template_app (template_hole 2, template_var 2),
             template_var 1),
           template_var 0)),
       template_app
        (template_app (template_hole 1, template_hole 0), template_var 1))),
    ("Fast_Dice_Roll.fast_dice_roll_n0",
     "?n = 0 ==> fast_dice_roll ?n ?v ?c = return_pmf None",
     template_implication
      ([template_equation (template_var 2, template_hole 4)],
       template_equation
        (template_app
          (template_app
            (template_app (template_hole 2, template_var 2),
             template_var 1),
           template_var 0),
         template_app (template_hole 1, template_hole 0)))),
    ("Fast_Dice_Roll.spmf_fast_uniform",
     "spmf (fast_uniform ?n) ?x = (if ?x < ?n then 1 / real ?n else 0)",
     template_equation
      (template_app
        (template_app
          (template_hole 8, template_app (template_hole 7, template_var 1)),
         template_app (template_hole 6, template_var 0)),
       template_app
        (template_app
          (template_app
            (template_hole 5,
             template_app
              (template_app (template_hole 4, template_var 0),
               template_var 1)),
           template_app
            (template_app (template_hole 3, template_hole 2),
             template_app (template_hole 1, template_var 1))),
         template_hole 0))),
    ("Fast_Dice_Roll.spmf_fast_uniform_ub",
     "spmf (fast_uniform ?n) ?x <= (if ?x < ?n then 1 / real ?n else 0)",
     template_inequation
      (less_equals,
       template_app
        (template_app
          (template_hole 8, template_app (template_hole 7, template_var 1)),
         template_app (template_hole 6, template_var 0)),
       template_app
        (template_app
          (template_app
            (template_hole 5,
             template_app
              (template_app (template_hole 4, template_var 0),
               template_var 1)),
           template_app
            (template_app (template_hole 3, template_hole 2),
             template_app (template_hole 1, template_var 1))),
         template_hole 0))),
    ("Fast_Dice_Roll.lossless_fast_dice_roll",
     "[| ?c < ?v; ?v <= ?n |] ==> lossless_spmf (fast_dice_roll ?n ?v ?c)",
     template_implication
      ([template_inequation (less_than, template_var 2, template_var 1),
        template_inequation (less_equals, template_var 1, template_var 0)],
       template_predicate
        (
           template_app
            (template_hole 1,
             template_app
              (template_app
                (template_app (template_hole 0, template_var 0),
                 template_var 1),
               template_var 2))
           ))),
    ("Fast_Dice_Roll.spmf_fast_dice_roll_ub",
     "0 < ?v ==>
      spmf (pmf_of_set {..<?v} >>= fast_dice_roll ?n ?v) ?x
      <= (if ?x < ?n then 1 / real ?n else 0)",
     template_implication
      ([template_inequation (less_than, template_hole 12, template_var 2)],
       template_inequation
        (less_equals,
         template_app
          (template_app
            (template_hole 10,
             template_app
              (template_app
                (template_hole 9,
                 template_app
                  (template_hole 8,
                   template_app (template_hole 7, template_var 2))),
               template_app
                (template_app (template_hole 6, template_var 1),
                 template_var 2))),
           template_app (template_hole 5, template_var 0)),
         template_app
          (template_app
            (template_app
              (template_hole 4,
               template_app
                (template_app (template_hole 13, template_var 0),
                 template_var 1)),
             template_app
              (template_app (template_hole 3, template_hole 2),
               template_app (template_hole 1, template_var 1))),
           template_hole 0)))),
    ("Fast_Dice_Roll.fast_dice_roll_alt_conv_while",
     "fdr_alt ?n ?v ?c =
      map_spmf snd
       (fdr_step ?n ?v ?c >>=
        loop_spmf.while (%(v, c). ?n <= c)
         (%(v, c). fdr_step ?n (v - ?n) (c - ?n)))",
     template_equation
      (template_app
        (template_app
          (template_app (template_hole 10, template_var 2), template_var 1),
         template_var 0),
       template_app
        (template_app
          (template_hole 9,
           template_app (template_hole 8, template_hole 7)),
         template_app
          (template_app
            (template_hole 6,
             template_app
              (template_app
                (template_app (template_hole 5, template_var 2),
                 template_var 1),
               template_var 0)),
           template_app
            (template_app
              (template_hole 4, template_app (template_hole 3, t_empty)),
             template_app (template_hole 1, t_empty)))))),
    ("Fast_Dice_Roll.sample_bits_fusion2",
     "0 < ?v ==>
      pmf_of_set UNIV >>=
      (%b. pmf_of_set {..<?v} >>=
           (%c. ?f (c + ?v * (if b then 1 else 0)))) =
      pmf_of_set {..<2 * ?v} >>= ?f",
     template_implication
      ([template_inequation (less_than, template_hole 14, template_var 1)],
       template_equation
        (template_app
          (template_app
            (template_hole 12,
             template_app (template_hole 11, template_hole 10)),
           t_empty),
         template_app
          (template_app
            (template_hole 9,
             template_app
              (template_hole 8,
               template_app
                (template_hole 7,
                 template_app
                  (template_app
                    (template_hole 5,
                     template_app
                      (template_hole 2,
                       template_app (template_hole 1, template_hole 0))),
                   template_var 1)))),
           template_var 0)))),
    ("Fast_Dice_Roll.sample_bits_fusion",
     "0 < ?v ==>
      pmf_of_set {..<?v} >>=
      (%c. pmf_of_set UNIV >>= (%b. ?f (2 * c + (if b then 1 else 0)))) =
      pmf_of_set {..<2 * ?v} >>= ?f",
     template_implication
      ([template_inequation (less_than, template_hole 14, template_var 1)],
       template_equation
        (template_app
          (template_app
            (template_hole 12,
             template_app
              (template_hole 11,
               template_app (template_hole 10, template_var 1))),
           t_empty),
         template_app
          (template_app
            (template_hole 12,
             template_app
              (template_hole 11,
               template_app
                (template_hole 10,
                 template_app
                  (template_app
                    (template_hole 5,
                     template_app
                      (template_hole 4,
                       template_app (template_hole 3, template_hole 2))),
                   template_var 1)))),
           template_var 0)))),
    ("Fast_Dice_Roll.fdr_step_unfold",
     "fdr_step ?n ?v ?c =
      (if ?v = 0 then return_pmf None
       else if ?n <= ?v then return_spmf (?v, ?c)
            else coin_spmf >>=
                 (%b. fdr_step ?n (2 * ?v)
                       (2 * ?c + (if b then 1 else 0))))",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app (template_hole 18, template_var 2),
                template_var 1),
              template_var 0)
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_app
                (template_hole 17,
                 template_app
                  (template_app (template_hole 16, template_var 1),
                   template_hole 15)),
               template_app (template_hole 14, template_hole 13)),
             template_app
              (template_app
                (template_app
                  (template_hole 17,
                   template_app
                    (template_app (template_hole 12, template_var 2),
                     template_var 1)),
                 template_app
                  (template_hole 14,
                   template_app
                    (template_hole 11,
                     template_app
                      (template_app (template_hole 10, template_var 1),
                       template_var 0)))),
               template_app
                (template_app
                  (template_hole 9,
                   template_app (template_hole 8, template_hole 7)),
                 t_empty)))
           ))),
    ("Fast_Dice_Roll.fdr_step_induct",
     "(!!v c.
          (!!b. [| v ~= 0; v < ?n |]
                ==> ?P (2 * v)
                     ((2::?'a) * c + (if b then 1::?'a else (0::?'a)))) ==>
          ?P v c) ==>
      ?P ?v ?c",
     template_implication
      ([template_predicate (template_app (template_hole 17, t_empty))],
       template_predicate
        (
           template_app
            (template_app (template_var 2, template_var 1), template_var 0)
           ))),
    ("Fast_Dice_Roll.fast_dice_roll_fixp_induct",
     "[| spmf.admissible (%fast_dice_roll. ?P (curry fast_dice_roll));
         ?P (%v c. return_pmf None);
         !!fdr.
            ?P fdr ==>
            ?P (%v c. if ?n <= v
                      then if c < ?n then return_spmf c
                           else fdr (v - ?n) (c - ?n)
                      else coin_spmf >>=
                           (%b. fdr (2 * v)
                                 (2 * c + (if b then 1 else 0)))) |]
      ==> ?P (fast_dice_roll ?n)",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_hole 27,
                  template_app (template_hole 26, template_hole 25)),
                template_app
                 (template_hole 24,
                  template_app
                   (template_hole 23,
                    template_app (template_hole 22, template_hole 21)))),
              t_empty)
            ),
        template_predicate (template_app (template_var 1, t_empty)),
        template_predicate (template_app (template_hole 17, t_empty))],
       template_predicate
        (
           template_app
            (template_var 1, template_app (template_hole 0, template_var 0))
           )))]:
   (string * thm * template) list
### theory "Draft.Fast_Dice_RollTemplates"
### 1.401s elapsed time, 2.072s cpu time, 0.673s GC time
val it = (): unit
