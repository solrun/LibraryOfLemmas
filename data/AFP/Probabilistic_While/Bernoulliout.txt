Loading theory "HOL-Library.Function_Algebras" (required by "Draft.BernoulliTemplates" via "Draft.ExtrEqs" via "HOL-Library.BigO")
Loading theory "Draft.Bernoulli" (required by "Draft.BernoulliTemplates")
Loading theory "Draft.Templates" (required by "Draft.BernoulliTemplates" via "Draft.ExtrEqs")
instantiation
  fun :: (type, plus) plus
  plus_fun == plus :: ('a => 'b) => ('a => 'b) => 'a => 'b
instantiation
  fun :: (type, zero) zero
  zero_fun == zero_class.zero :: 'a => 'b
instantiation
  fun :: (type, times) times
  times_fun == times :: ('a => 'b) => ('a => 'b) => 'a => 'b
instantiation
  fun :: (type, one) one
  one_fun == one_class.one :: 'a => 'b
datatype template_term
=
     t_empty
   | template_app of template_term * template_term
   | template_hole of int
   | template_var of int
datatype sign
= equals | greater_equals | greater_than | less_equals | less_than
datatype template
=
     template_bimplication of template * template
   | template_dunno
   | template_equation of template_term * template_term
   | template_implication of template list * template
   | template_inequation of sign * template_term * template_term
   | template_negation of template
   | template_predicate of template_term
constructor t_empty: template_term
constructor template_app: template_term * template_term -> template_term
constructor template_hole: int -> template_term
constructor template_var: int -> template_term
constructor equals: sign
constructor greater_equals: sign
constructor greater_than: sign
constructor less_equals: sign
constructor less_than: sign
constructor template_bimplication: template * template -> template
constructor template_dunno: template
constructor template_equation: template_term * template_term -> template
constructor template_implication: template list * template -> template
constructor template_inequation:
   sign * template_term * template_term -> template
constructor template_negation: template -> template
constructor template_predicate: template_term -> template
val vfs = fn: term -> (indexname * typ) list * (string * typ) list
val indexOf = fn: ''a list -> ''a -> int -> int
val has_eq = fn: term -> bool
val term2template = fn:
   (indexname * typ) list -> (string * typ) list -> term -> template_term
val lemma2predicate = fn: term -> term -> template
val makeTemplatewithContext = fn: term -> term -> template
val lemma2template = fn: term -> template
val thm2template = fn: thm -> template
val tterm2string = fn: template_term -> string
val template2string = fn: template -> string
val t = "height ?t <= size ?t": thm
val th =
   Const ("HOL.Trueprop", "bool => prop") $
     (Const ("Orderings.ord_class.less_eq", "nat => nat => bool") $
       (Const ("Tree.height_class.height", "?'a tree => nat") $
         Var (("t", 0), "?'a tree")) $
       (Const ("Nat.size_class.size", "?'a tree => nat") $
         Var (("t", 0), "?'a tree"))):
   term
### theory "Draft.Templates"
### 0.068s elapsed time, 0.248s cpu time, 0.000s GC time
### theory "HOL-Library.Function_Algebras"
### 0.106s elapsed time, 0.324s cpu time, 0.000s GC time
Loading theory "HOL-Library.BigO" (required by "Draft.BernoulliTemplates" via "Draft.ExtrEqs")
### theory "Draft.Bernoulli"
### 0.111s elapsed time, 0.337s cpu time, 0.000s GC time
### theory "HOL-Library.BigO"
### 0.604s elapsed time, 0.644s cpu time, 0.046s GC time
Loading theory "Draft.ExtrEqs" (required by "Draft.BernoulliTemplates")
val eqpattern =
   Pattern
    (
       Const ("HOL.Trueprop", "bool => prop") $
         (Const ("HOL.eq", "?'a => ?'a => bool") $
           Var (("_dummy_", 1), "?'a") $ Var (("_dummy_", 2), "?'a"))
       ):
   term Find_Theorems.criterion
val badeqpattern = Pattern (Const ("Pure.eq", "?'a => ?'a => prop")):
   term Find_Theorems.criterion
val undefpattern =
   Pattern
    (
       Const ("HOL.Trueprop", "bool => prop") $
         (Const ("HOL.eq", "?'a => ?'a => bool") $
           Var (("_dummy_", 1), "?'a") $ Const ("HOL.undefined", "?'a"))
       ):
   term Find_Theorems.criterion
val thmpattern =
   Pattern
    (Const ("HOL.Trueprop", "bool => prop") $ Var (("_dummy_", 1), "bool")):
   term Find_Theorems.criterion
val badnames =
   ["*nitpick*", "*Nitpick*", "*full_exhaustive*", "*_def*", "Enum.finite*",
    "*Quickcheck*", "ATP*", "*Nunchaku*", "*Code*", "*BNF*", "*SMT*",
    "*.*.*"]:
   string list
val unwanted_names =
   [(false, Name "*nitpick*"), (false, Name "*Nitpick*"),
    (false, Name "*full_exhaustive*"), (false, Name "*_def*"),
    (false, Name "Enum.finite*"), (false, Name "*Quickcheck*"),
    (false, Name "ATP*"), (false, Name "*Nunchaku*"),
    (false, Name "*Code*"), (false, Name "*BNF*"), (false, Name "*SMT*"),
    (false, Name "*.*.*")]:
   (bool * term Find_Theorems.criterion) list
val has_vars = fn: term -> bool
val get_all_eqs = fn: string -> Proof.context -> (string * thm) list
val get_all_thms = fn: string -> Proof.context -> (string * thm) list
val get_noneq_thms = fn: string -> Proof.context -> (string * thm) list
val template_eqs = fn:
   string -> Proof.context -> (string * thm * template) list
val template_thms = fn:
   string -> Proof.context -> (string * thm * template) list
### theory "Draft.ExtrEqs"
### 0.491s elapsed time, 0.536s cpu time, 0.067s GC time
Loading theory "Draft.BernoulliTemplates"
val templateLemmas =
   [("Bernoulli.lossless_bernoulli", "lossless_spmf (bernoulli ?p)",
     template_predicate
      (
         template_app
          (template_hole 1, template_app (template_hole 0, template_var 0))
         )),
    ("Bernoulli.zero_lt_num", "(0::?'a) < numeral ?n",
     template_inequation
      (less_than, template_hole 1,
       template_app (template_hole 0, template_var 0))),
    ("Bernoulli.pmf_bernoulli_None", "pmf (bernoulli ?p) None = 0",
     template_equation
      (template_app
        (template_app
          (template_hole 3, template_app (template_hole 2, template_var 0)),
         template_hole 1),
       template_hole 0)),
    ("Bernoulli.bernoulli_eq_bernoulli_pmf",
     "bernoulli ?p = spmf_of_pmf (bernoulli_pmf ?p)",
     template_equation
      (template_app (template_hole 2, template_var 0),
       template_app
        (template_hole 1, template_app (template_hole 0, template_var 0)))),
    ("Bernoulli.ennreal_mult_numeral",
     "ennreal ?x * numeral ?n = ennreal (?x * numeral ?n)",
     template_equation
      (template_app
        (template_app
          (template_hole 4, template_app (template_hole 3, template_var 1)),
         template_app (template_hole 2, template_var 0)),
       template_app
        (template_hole 3,
         template_app
          (template_app (template_hole 1, template_var 1),
           template_app (template_hole 0, template_var 0))))),
    ("Bernoulli.bernoulli_pos",
     "1 <= ?p ==> bernoulli ?p = return_spmf True",
     template_implication
      ([template_inequation (less_equals, template_hole 5, template_var 0)],
       template_equation
        (template_app (template_hole 3, template_var 0),
         template_app
          (template_hole 2,
           template_app (template_hole 1, template_hole 0))))),
    ("Bernoulli.bernoulli_neg",
     "?p <= 0 ==> bernoulli ?p = return_spmf False",
     template_implication
      ([template_inequation (less_equals, template_var 0, template_hole 5)],
       template_equation
        (template_app (template_hole 3, template_var 0),
         template_app
          (template_hole 2,
           template_app (template_hole 1, template_hole 0))))),
    ("Bernoulli.one_plus_ennreal",
     "0 <= ?x ==> 1 + ennreal ?x = ennreal (1 + ?x)",
     template_implication
      ([template_inequation (less_equals, template_hole 6, template_var 0)],
       template_equation
        (template_app
          (template_app (template_hole 4, template_hole 3),
           template_app (template_hole 2, template_var 0)),
         template_app
          (template_hole 2,
           template_app
            (template_app (template_hole 1, template_hole 0),
             template_var 0))))),
    ("Bernoulli.bernoulli_True",
     "[| 0 <= ?p; ?p <= 1 |] ==> spmf (bernoulli ?p) True = ?p",
     template_implication
      ([template_inequation (less_equals, template_hole 6, template_var 0),
        template_inequation (less_equals, template_var 0, template_hole 5)],
       template_equation
        (template_app
          (template_app
            (template_hole 3,
             template_app (template_hole 2, template_var 0)),
           template_app (template_hole 1, template_hole 0)),
         template_var 0))),
    ("Real.Bernoulli_inequality",
     "- 1 <= ?x ==> 1 + real ?n * ?x <= (1 + ?x) ^ ?n",
     template_implication
      ([template_inequation
         (less_equals, template_app (template_hole 5, template_hole 4),
          template_var 1)],
       template_inequation
        (less_equals,
         template_app
          (template_app (template_hole 3, template_hole 4),
           template_app
            (template_app
              (template_hole 2,
               template_app (template_hole 1, template_var 0)),
             template_var 1)),
         template_app
          (template_app
            (template_hole 0,
             template_app
              (template_app (template_hole 3, template_hole 4),
               template_var 1)),
           template_var 0)))),
    ("Real.Bernoulli_inequality_even",
     "even ?n ==> 1 + real ?n * ?x <= (1 + ?x) ^ ?n",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_hole 9,
                template_app
                 (template_hole 8,
                  template_app (template_hole 7, template_hole 6))),
              template_var 1)
            )],
       template_inequation
        (less_equals,
         template_app
          (template_app (template_hole 4, template_hole 3),
           template_app
            (template_app
              (template_hole 2,
               template_app (template_hole 1, template_var 1)),
             template_var 0)),
         template_app
          (template_app
            (template_hole 0,
             template_app
              (template_app (template_hole 4, template_hole 3),
               template_var 0)),
           template_var 1)))),
    ("Bernoulli.bernoulli_False",
     "[| 0 <= ?p; ?p <= 1 |] ==> spmf (bernoulli ?p) False = 1 - ?p",
     template_implication
      ([template_inequation (less_equals, template_hole 7, template_var 0),
        template_inequation (less_equals, template_var 0, template_hole 6)],
       template_equation
        (template_app
          (template_app
            (template_hole 4,
             template_app (template_hole 3, template_var 0)),
           template_app (template_hole 2, template_hole 1)),
         template_app
          (template_app (template_hole 0, template_hole 6),
           template_var 0))))]:
   (string * thm * template) list
### theory "Draft.BernoulliTemplates"
### 1.207s elapsed time, 1.505s cpu time, 0.153s GC time
val it = (): unit
