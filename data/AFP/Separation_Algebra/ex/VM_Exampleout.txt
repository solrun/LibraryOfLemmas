Loading theory "Draft.Map_Extra" (required by "Draft.VM_ExampleTemplates" via "Draft.VM_Example")
Loading theory "Draft.Separation_Algebra" (required by "Draft.VM_ExampleTemplates" via "Draft.VM_Example" via "Draft.Sep_Tactics")
Loading theory "HOL-Library.Function_Algebras" (required by "Draft.VM_ExampleTemplates" via "Draft.ExtrEqs" via "HOL-Library.BigO")
Loading theory "HOL-Library.Nat_Bijection" (required by "Draft.VM_ExampleTemplates" via "Draft.ExtrEqs" via "HOL-Library.Stream")
instantiation
  fun :: (type, plus) plus
  plus_fun == plus :: ('a => 'b) => ('a => 'b) => 'a => 'b
instantiation
  fun :: (type, zero) zero
  zero_fun == zero_class.zero :: 'a => 'b
instantiation
  fun :: (type, times) times
  times_fun == times :: ('a => 'b) => ('a => 'b) => 'a => 'b
instantiation
  fun :: (type, one) one
  one_fun == one_class.one :: 'a => 'b
Found termination order: "(%p. size (snd p)) <*mlex*> {}"
### theory "HOL-Library.Function_Algebras"
### 0.124s elapsed time, 0.508s cpu time, 0.040s GC time
Loading theory "HOL-Library.Set_Algebras" (required by "Draft.VM_ExampleTemplates" via "Draft.ExtrEqs" via "HOL-Library.BigO")
instantiation
  set :: (plus) plus
  plus_set == plus :: 'a set => 'a set => 'a set
instantiation
  set :: (times) times
  times_set == times :: 'a set => 'a set => 'a set
instantiation
  set :: (zero) zero
  zero_set == zero_class.zero :: 'a set
instantiation
  set :: (one) one
  one_set == one_class.one :: 'a set
class pre_sep_algebra = plus + zero +
  fixes sep_disj :: "'a => 'a => bool"
  assumes "sep_disj_zero": "!!x. x ## (0::'a)"
  assumes "sep_disj_commuteI": "!!x y. x ## y ==> y ## x"
  assumes "sep_add_zero": "!!x. x + (0::'a) = x"
  assumes "sep_add_commute": "!!x y. x ## y ==> x + y = y + x"
  assumes
    "sep_add_assoc":
      "!!x y z. [| x ## y; y ## z; x ## z |] ==> x + y + z = x + (y + z)"
Found termination order: "size_list size <*mlex*> {}"
class sep_algebra = pre_sep_algebra +
  assumes "sep_disj_addD1": "!!x y z. [| x ## y + z; y ## z |] ==> x ## y"
  assumes
    "sep_disj_addI1": "!!x y z. [| x ## y + z; y ## z |] ==> x + y ## z"
### theory "HOL-Library.Nat_Bijection"
### 0.315s elapsed time, 1.262s cpu time, 0.111s GC time
Loading theory "HOL-Library.Stream" (required by "Draft.VM_ExampleTemplates" via "Draft.ExtrEqs")
### theory "HOL-Library.Set_Algebras"
### 0.204s elapsed time, 0.803s cpu time, 0.071s GC time
Loading theory "HOL-Library.Tree" (required by "Draft.VM_ExampleTemplates" via "Draft.ExtrEqs" via "Draft.Templates")
### theory "Draft.Map_Extra"
### 0.330s elapsed time, 1.316s cpu time, 0.111s GC time
Loading theory "HOL-Library.BigO" (required by "Draft.VM_ExampleTemplates" via "Draft.ExtrEqs")
### Partially applied constant "Separation_Algebra.sep_algebra_class.sep_conj" on left hand side of equation, in theorem:
### monoid_add.sum_list (\<and>*) \<box> ?xs == foldr (\<and>*) ?xs \<box>
### Partially applied constant "Separation_Algebra.sep_algebra_class.sep_conj" on left hand side of equation, in theorem:
### comm_monoid_add.sum (\<and>*) \<box> ?g (set ?xs) ==
### sep.sum_list (map ?g (remdups ?xs))
class stronger_sep_algebra = pre_sep_algebra +
  assumes
    "sep_add_disj_eq": "!!y z x. y ## z ==> x ## y + z = (x ## y & x ## z)"
consts
  shift :: "'a list => 'a stream => 'a stream"
Proofs for coinductive predicate(s) "streamsp"
  Proving monotonicity ...
consts
  snth :: "'a stream => nat => 'a"
consts
  stake :: "nat => 'a stream => 'a list"
consts
  sdrop :: "nat => 'a stream => 'a stream"
consts
  left :: "'a tree => 'a tree"
consts
  right :: "'a tree => 'a tree"
consts
  sfilter :: "('a => bool) => 'a stream => 'a stream"
Found termination order: "size <*mlex*> {}"
consts
  cycle :: "'a list => 'a stream"
class cancellative_sep_algebra = sep_algebra +
  assumes
    "sep_add_cancelD":
      "!!x z y. [| x + z = y + z; x ## z; y ## z |] ==> x = y"
consts
  siterate :: "('a => 'a) => 'a => 'a stream"
### theory "Draft.Separation_Algebra"
### 0.959s elapsed time, 3.785s cpu time, 0.369s GC time
Loading theory "Draft.Sep_Tactics" (required by "Draft.VM_ExampleTemplates" via "Draft.VM_Example")
Found termination order: "size <*mlex*> {}"
consts
  flat :: "'a list stream => 'a stream"
Found termination order: "size <*mlex*> {}"
consts
  sinterleave :: "'a stream => 'a stream => 'a stream"
### ML warning (line 29 of "$AFP/Separation_Algebra/sep_tactics.ML"):
### Value identifier (Trueprop) has not been referenced.
### ML warning (line 312 of "$AFP/Separation_Algebra/sep_tactics.ML"):
### Value identifier (ctxt') has not been referenced.
### ML warning (line 312 of "$AFP/Separation_Algebra/sep_tactics.ML"):
### Value identifier (vars) has not been referenced.
### ML warning (line 320 of "$AFP/Separation_Algebra/sep_tactics.ML"):
### Value identifier (t) has not been referenced.
structure SepConj:
  sig
    val break_sep_conj: term -> term list
    val is_sep_conj_const: term -> bool
    val is_sep_conj_prop: term -> bool
    val is_sep_conj_term: term -> bool
    val is_sep_true_term: term -> bool
    val sep_conj_ac: thm list
    val sep_conj_impl: thm
    val sep_conj_str: string
    val sep_conj_term: term
  end
structure ListExtra:
  sig
    val index_list: 'a list -> (int * 'a) list
    val init: 'a list -> 'a list
    val nth_to_front: int -> 'a list -> 'a list
    val range: int -> int -> int list
  end
structure FunApp:
  sig
    val app_args_op: (term list -> term list) -> term -> term
    val app_del_last_arg: term -> term
    val fun_app_foldr: term -> string list -> term
    val fun_app_free: term -> string -> term
  end
val mk_sep_select_rule = fn: Proof.context -> bool -> int * int -> thm
val sep_select_asm_tac = fn: Proof.context -> int -> int -> tactic
val sep_select_tac = fn: Proof.context -> int -> int -> tactic
val sep_assm_tac = fn: Proof.context -> (int -> tactic) -> int -> tactic
val sep_concl_tac = fn: Proof.context -> (int -> tactic) -> int -> tactic
val sep_cancel_tac = fn: Proof.context -> (int -> tactic) -> int -> tactic
val sep_atac = fn: Proof.context -> int -> tactic
val sep_subst_tac = fn:
   Proof.context -> int list -> thm list -> int -> tactic
val sep_subst_asm_tac = fn:
   Proof.context -> int list -> thm list -> int -> tactic
val sep_dtac = fn: Proof.context -> thm list -> int -> tactic
val sep_ftac = fn: Proof.context -> thm list -> int -> tactic
val sep_rtac = fn: Proof.context -> thm list -> int -> tactic
class height = type +
  fixes height :: "'a => nat"
instantiation
  tree :: (type) height
  height_tree == height :: 'a tree => nat
consts
  szip :: "'a stream => 'b stream => ('a * 'b) stream"
consts
  smap2 :: "('a => 'b => 'c) => 'a stream => 'b stream => 'c stream"
### theory "HOL-Library.BigO"
### 0.995s elapsed time, 3.837s cpu time, 0.887s GC time
Found termination order: "size <*mlex*> {}"
### theory "HOL-Library.Stream"
### 1.050s elapsed time, 4.028s cpu time, 0.929s GC time
val sep_cancel_smart_tac = fn:
   Proof.context -> (int -> tactic) -> int -> tactic
val sep_cancel_smart_tac_rules = fn:
   Proof.context -> (int -> tactic) list -> int -> tactic
val sep_cancel_syntax = fn: unit context_parser
Found termination order: "size <*mlex*> {}"
### theory "Draft.Sep_Tactics"
### 0.457s elapsed time, 1.606s cpu time, 0.671s GC time
Loading theory "Draft.VM_Example" (required by "Draft.VM_ExampleTemplates")
Found termination order: "size <*mlex*> {}"
Found termination order: "size <*mlex*> {}"
Found termination order: "size <*mlex*> {}"
Found termination order: "size <*mlex*> {}"
Found termination order: "size <*mlex*> {}"
Found termination order: "(%p. size (fst p)) <*mlex*> {}"
Found termination order: "size <*mlex*> {}"
Found termination order: "(%p. size (snd p)) <*mlex*> {}"
Found termination order: "size <*mlex*> {}"
instantiation
  vm_sep_state :: (type, type, type, type) sep_algebra
  sep_disj_vm_sep_state == sep_disj ::
    ('a, 'b, 'c, 'd) vm_sep_state => ('a, 'b, 'c, 'd) vm_sep_state => bool
  plus_vm_sep_state == plus ::
    ('a, 'b, 'c, 'd) vm_sep_state
    => ('a, 'b, 'c, 'd) vm_sep_state => ('a, 'b, 'c, 'd) vm_sep_state
  zero_vm_sep_state == zero_class.zero :: ('a, 'b, 'c, 'd) vm_sep_state
Found termination order: "{}"
Found termination order: "{}"
### theory "HOL-Library.Tree"
### 1.926s elapsed time, 5.850s cpu time, 1.125s GC time
Loading theory "Draft.Templates" (required by "Draft.VM_ExampleTemplates" via "Draft.ExtrEqs")
Found termination order: "{}"
datatype template_term
=
     t_empty
   | template_app of template_term * template_term
   | template_hole of int
   | template_var of int
datatype sign
= equals | greater_equals | greater_than | less_equals | less_than
datatype template
=
     template_bimplication of template * template
   | template_dunno
   | template_equation of template_term * template_term
   | template_implication of template list * template
   | template_inequation of sign * template_term * template_term
   | template_negation of template
   | template_predicate of template_term
constructor t_empty: template_term
constructor template_app: template_term * template_term -> template_term
constructor template_hole: int -> template_term
constructor template_var: int -> template_term
constructor equals: sign
constructor greater_equals: sign
constructor greater_than: sign
constructor less_equals: sign
constructor less_than: sign
constructor template_bimplication: template * template -> template
constructor template_dunno: template
constructor template_equation: template_term * template_term -> template
constructor template_implication: template list * template -> template
constructor template_inequation:
   sign * template_term * template_term -> template
constructor template_negation: template -> template
constructor template_predicate: template_term -> template
val vfs = fn: term -> (indexname * typ) list * (string * typ) list
val indexOf = fn: ''a list -> ''a -> int -> int
val has_eq = fn: term -> bool
val term2template = fn:
   (indexname * typ) list -> (string * typ) list -> term -> template_term
val lemma2predicate = fn: term -> term -> template
val makeTemplatewithContext = fn: term -> term -> template
val lemma2template = fn: term -> template
val thm2template = fn: thm -> template
val tterm2string = fn: template_term -> string
val template2string = fn: template -> string
val t = "height ?t <= size ?t": thm
val th =
   Const ("HOL.Trueprop", "bool => prop") $
     (Const ("Orderings.ord_class.less_eq", "nat => nat => bool") $
       (Const ("Tree.height_class.height", "?'a tree => nat") $
         Var (("t", 0), "?'a tree")) $
       (Const ("Nat.size_class.size", "?'a tree => nat") $
         Var (("t", 0), "?'a tree"))):
   term
### theory "Draft.Templates"
### 0.053s elapsed time, 0.105s cpu time, 0.000s GC time
Loading theory "Draft.ExtrEqs" (required by "Draft.VM_ExampleTemplates")
### theory "Draft.VM_Example"
### 0.894s elapsed time, 1.879s cpu time, 0.196s GC time
val eqpattern =
   Pattern
    (
       Const ("HOL.Trueprop", "bool => prop") $
         (Const ("HOL.eq", "?'a => ?'a => bool") $
           Var (("_dummy_", 1), "?'a") $ Var (("_dummy_", 2), "?'a"))
       ):
   term Find_Theorems.criterion
val badeqpattern = Pattern (Const ("Pure.eq", "?'a => ?'a => prop")):
   term Find_Theorems.criterion
val undefpattern =
   Pattern
    (
       Const ("HOL.Trueprop", "bool => prop") $
         (Const ("HOL.eq", "?'a => ?'a => bool") $
           Var (("_dummy_", 1), "?'a") $ Const ("HOL.undefined", "?'a"))
       ):
   term Find_Theorems.criterion
val thmpattern =
   Pattern
    (Const ("HOL.Trueprop", "bool => prop") $ Var (("_dummy_", 1), "bool")):
   term Find_Theorems.criterion
val badnames =
   ["*nitpick*", "*Nitpick*", "*full_exhaustive*", "*_def*", "Enum.finite*",
    "*Quickcheck*", "ATP*", "*Nunchaku*", "*Code*", "*BNF*", "*SMT*",
    "*.*.*"]:
   string list
val unwanted_names =
   [(false, Name "*nitpick*"), (false, Name "*Nitpick*"),
    (false, Name "*full_exhaustive*"), (false, Name "*_def*"),
    (false, Name "Enum.finite*"), (false, Name "*Quickcheck*"),
    (false, Name "ATP*"), (false, Name "*Nunchaku*"),
    (false, Name "*Code*"), (false, Name "*BNF*"), (false, Name "*SMT*"),
    (false, Name "*.*.*")]:
   (bool * term Find_Theorems.criterion) list
val has_vars = fn: term -> bool
val get_all_eqs = fn: string -> Proof.context -> (string * thm) list
val get_all_thms = fn: string -> Proof.context -> (string * thm) list
val get_noneq_thms = fn: string -> Proof.context -> (string * thm) list
val template_eqs = fn:
   string -> Proof.context -> (string * thm * template) list
val template_thms = fn:
   string -> Proof.context -> (string * thm * template) list
### theory "Draft.ExtrEqs"
### 0.477s elapsed time, 0.561s cpu time, 0.067s GC time
Loading theory "Draft.VM_ExampleTemplates"
val templateLemmas = []: (string * thm * template) list
### theory "Draft.VM_ExampleTemplates"
### 0.349s elapsed time, 0.528s cpu time, 0.069s GC time
val it = (): unit
