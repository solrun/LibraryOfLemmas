Loading theory "Draft.Map_Extra" (required by "Draft.Abstract_Separation_DTemplates" via "Draft.Abstract_Separation_D")
Loading theory "Draft.Separation_Algebra" (required by "Draft.Abstract_Separation_DTemplates" via "Draft.Abstract_Separation_D" via "Draft.Sep_Tactics")
Loading theory "HOL-Library.Function_Algebras" (required by "Draft.Abstract_Separation_DTemplates" via "Draft.ExtrEqs" via "HOL-Library.BigO")
Loading theory "HOL-Library.Nat_Bijection" (required by "Draft.Abstract_Separation_DTemplates" via "Draft.ExtrEqs" via "HOL-Library.Stream")
instantiation
  fun :: (type, plus) plus
  plus_fun == plus :: ('a => 'b) => ('a => 'b) => 'a => 'b
instantiation
  fun :: (type, zero) zero
  zero_fun == zero_class.zero :: 'a => 'b
instantiation
  fun :: (type, times) times
  times_fun == times :: ('a => 'b) => ('a => 'b) => 'a => 'b
instantiation
  fun :: (type, one) one
  one_fun == one_class.one :: 'a => 'b
Found termination order: "(%p. size (snd p)) <*mlex*> {}"
### theory "HOL-Library.Function_Algebras"
### 0.122s elapsed time, 0.511s cpu time, 0.040s GC time
Loading theory "Draft.Types_D" (required by "Draft.Abstract_Separation_DTemplates" via "Draft.Abstract_Separation_D")
class pre_sep_algebra = plus + zero +
  fixes sep_disj :: "'a => 'a => bool"
  assumes "sep_disj_zero": "!!x. x ## (0::'a)"
  assumes "sep_disj_commuteI": "!!x y. x ## y ==> y ## x"
  assumes "sep_add_zero": "!!x. x + (0::'a) = x"
  assumes "sep_add_commute": "!!x y. x ## y ==> x + y = y + x"
  assumes
    "sep_add_assoc":
      "!!x y z. [| x ## y; y ## z; x ## z |] ==> x + y + z = x + (y + z)"
class sep_algebra = pre_sep_algebra +
  assumes "sep_disj_addD1": "!!x y z. [| x ## y + z; y ## z |] ==> x ## y"
  assumes
    "sep_disj_addI1": "!!x y z. [| x ## y + z; y ## z |] ==> x + y ## z"
Found termination order: "size_list size <*mlex*> {}"
### theory "Draft.Map_Extra"
### 0.287s elapsed time, 1.155s cpu time, 0.108s GC time
Loading theory "HOL-Library.Set_Algebras" (required by "Draft.Abstract_Separation_DTemplates" via "Draft.ExtrEqs" via "HOL-Library.BigO")
instantiation
  set :: (plus) plus
  plus_set == plus :: 'a set => 'a set => 'a set
### theory "HOL-Library.Nat_Bijection"
### 0.320s elapsed time, 1.285s cpu time, 0.108s GC time
Loading theory "HOL-Library.Stream" (required by "Draft.Abstract_Separation_DTemplates" via "Draft.ExtrEqs")
instantiation
  set :: (times) times
  times_set == times :: 'a set => 'a set => 'a set
instantiation
  set :: (zero) zero
  zero_set == zero_class.zero :: 'a set
instantiation
  set :: (one) one
  one_set == one_class.one :: 'a set
### theory "HOL-Library.Set_Algebras"
### 0.185s elapsed time, 0.730s cpu time, 0.071s GC time
Loading theory "HOL-Library.Tree" (required by "Draft.Abstract_Separation_DTemplates" via "Draft.ExtrEqs" via "Draft.Templates")
### Partially applied constant "Separation_Algebra.sep_algebra_class.sep_conj" on left hand side of equation, in theorem:
### monoid_add.sum_list (\<and>*) \<box> ?xs == foldr (\<and>*) ?xs \<box>
### Partially applied constant "Separation_Algebra.sep_algebra_class.sep_conj" on left hand side of equation, in theorem:
### comm_monoid_add.sum (\<and>*) \<box> ?g (set ?xs) ==
### sep.sum_list (map ?g (remdups ?xs))
class stronger_sep_algebra = pre_sep_algebra +
  assumes
    "sep_add_disj_eq": "!!y z x. y ## z ==> x ## y + z = (x ## y & x ## z)"
consts
  shift :: "'a list => 'a stream => 'a stream"
Proofs for coinductive predicate(s) "streamsp"
  Proving monotonicity ...
consts
  snth :: "'a stream => nat => 'a"
consts
  stake :: "nat => 'a stream => 'a list"
consts
  sdrop :: "nat => 'a stream => 'a stream"
consts
  sfilter :: "('a => bool) => 'a stream => 'a stream"
class cancellative_sep_algebra = sep_algebra +
  assumes
    "sep_add_cancelD":
      "!!x z y. [| x + z = y + z; x ## z; y ## z |] ==> x = y"
consts
  cycle :: "'a list => 'a stream"
### theory "Draft.Separation_Algebra"
### 1.100s elapsed time, 4.227s cpu time, 0.827s GC time
Loading theory "Draft.Sep_Tactics" (required by "Draft.Abstract_Separation_DTemplates" via "Draft.Abstract_Separation_D")
consts
  siterate :: "('a => 'a) => 'a => 'a stream"
consts
  flat :: "'a list stream => 'a stream"
consts
  left :: "'a tree => 'a tree"
consts
  right :: "'a tree => 'a tree"
### ML warning (line 29 of "$AFP/Separation_Algebra/sep_tactics.ML"):
### Value identifier (Trueprop) has not been referenced.
### ML warning (line 312 of "$AFP/Separation_Algebra/sep_tactics.ML"):
### Value identifier (ctxt') has not been referenced.
### ML warning (line 312 of "$AFP/Separation_Algebra/sep_tactics.ML"):
### Value identifier (vars) has not been referenced.
### ML warning (line 320 of "$AFP/Separation_Algebra/sep_tactics.ML"):
### Value identifier (t) has not been referenced.
structure SepConj:
  sig
    val break_sep_conj: term -> term list
    val is_sep_conj_const: term -> bool
    val is_sep_conj_prop: term -> bool
    val is_sep_conj_term: term -> bool
    val is_sep_true_term: term -> bool
    val sep_conj_ac: thm list
    val sep_conj_impl: thm
    val sep_conj_str: string
    val sep_conj_term: term
  end
structure ListExtra:
  sig
    val index_list: 'a list -> (int * 'a) list
    val init: 'a list -> 'a list
    val nth_to_front: int -> 'a list -> 'a list
    val range: int -> int -> int list
  end
structure FunApp:
  sig
    val app_args_op: (term list -> term list) -> term -> term
    val app_del_last_arg: term -> term
    val fun_app_foldr: term -> string list -> term
    val fun_app_free: term -> string -> term
  end
val mk_sep_select_rule = fn: Proof.context -> bool -> int * int -> thm
val sep_select_asm_tac = fn: Proof.context -> int -> int -> tactic
val sep_select_tac = fn: Proof.context -> int -> int -> tactic
val sep_assm_tac = fn: Proof.context -> (int -> tactic) -> int -> tactic
val sep_concl_tac = fn: Proof.context -> (int -> tactic) -> int -> tactic
val sep_cancel_tac = fn: Proof.context -> (int -> tactic) -> int -> tactic
val sep_atac = fn: Proof.context -> int -> tactic
val sep_subst_tac = fn:
   Proof.context -> int list -> thm list -> int -> tactic
val sep_subst_asm_tac = fn:
   Proof.context -> int list -> thm list -> int -> tactic
val sep_dtac = fn: Proof.context -> thm list -> int -> tactic
val sep_ftac = fn: Proof.context -> thm list -> int -> tactic
val sep_rtac = fn: Proof.context -> thm list -> int -> tactic
consts
  sinterleave :: "'a stream => 'a stream => 'a stream"
consts
  szip :: "'a stream => 'b stream => ('a * 'b) stream"
Found termination order: "size <*mlex*> {}"
consts
  smap2 :: "('a => 'b => 'c) => 'a stream => 'b stream => 'c stream"
### theory "HOL-Library.Stream"
### 1.051s elapsed time, 4.066s cpu time, 0.814s GC time
Loading theory "HOL-Library.BigO" (required by "Draft.Abstract_Separation_DTemplates" via "Draft.ExtrEqs")
Found termination order: "size <*mlex*> {}"
val sep_cancel_smart_tac = fn:
   Proof.context -> (int -> tactic) -> int -> tactic
val sep_cancel_smart_tac_rules = fn:
   Proof.context -> (int -> tactic) list -> int -> tactic
val sep_cancel_syntax = fn: unit context_parser
### theory "Draft.Sep_Tactics"
### 0.341s elapsed time, 1.406s cpu time, 0.094s GC time
Found termination order: "size <*mlex*> {}"
class height = type +
  fixes height :: "'a => nat"
instantiation
  tree :: (type) height
  height_tree == height :: 'a tree => nat
Found termination order: "size <*mlex*> {}"
Found termination order: "size <*mlex*> {}"
Found termination order: "size <*mlex*> {}"
Found termination order: "size <*mlex*> {}"
Found termination order: "size <*mlex*> {}"
Found termination order: "size <*mlex*> {}"
Found termination order: "size <*mlex*> {}"
Found termination order: "(%p. size (fst p)) <*mlex*> {}"
Found termination order: "size <*mlex*> {}"
### theory "HOL-Library.BigO"
### 0.764s elapsed time, 2.397s cpu time, 0.178s GC time
Found termination order: "(%p. size (snd p)) <*mlex*> {}"
Found termination order: "size <*mlex*> {}"
### theory "HOL-Library.Tree"
### 2.051s elapsed time, 6.703s cpu time, 1.024s GC time
Loading theory "Draft.Templates" (required by "Draft.Abstract_Separation_DTemplates" via "Draft.ExtrEqs")
datatype template_term
=
     t_empty
   | template_app of template_term * template_term
   | template_hole of int
   | template_var of int
datatype sign
= equals | greater_equals | greater_than | less_equals | less_than
datatype template
=
     template_bimplication of template * template
   | template_dunno
   | template_equation of template_term * template_term
   | template_implication of template list * template
   | template_inequation of sign * template_term * template_term
   | template_negation of template
   | template_predicate of template_term
constructor t_empty: template_term
constructor template_app: template_term * template_term -> template_term
constructor template_hole: int -> template_term
constructor template_var: int -> template_term
constructor equals: sign
constructor greater_equals: sign
constructor greater_than: sign
constructor less_equals: sign
constructor less_than: sign
constructor template_bimplication: template * template -> template
constructor template_dunno: template
constructor template_equation: template_term * template_term -> template
constructor template_implication: template list * template -> template
constructor template_inequation:
   sign * template_term * template_term -> template
constructor template_negation: template -> template
constructor template_predicate: template_term -> template
val vfs = fn: term -> (indexname * typ) list * (string * typ) list
val indexOf = fn: ''a list -> ''a -> int -> int
val has_eq = fn: term -> bool
val term2template = fn:
   (indexname * typ) list -> (string * typ) list -> term -> template_term
val lemma2predicate = fn: term -> term -> template
val makeTemplatewithContext = fn: term -> term -> template
val lemma2template = fn: term -> template
val thm2template = fn: thm -> template
val tterm2string = fn: template_term -> string
val template2string = fn: template -> string
val t = "height ?t <= size ?t": thm
val th =
   Const ("HOL.Trueprop", "bool => prop") $
     (Const ("Orderings.ord_class.less_eq", "nat => nat => bool") $
       (Const ("Tree.height_class.height", "?'a tree => nat") $
         Var (("t", 0), "?'a tree")) $
       (Const ("Nat.size_class.size", "?'a tree => nat") $
         Var (("t", 0), "?'a tree"))):
   term
### theory "Draft.Templates"
### 0.052s elapsed time, 0.104s cpu time, 0.000s GC time
Loading theory "Draft.ExtrEqs" (required by "Draft.Abstract_Separation_DTemplates")
val eqpattern =
   Pattern
    (
       Const ("HOL.Trueprop", "bool => prop") $
         (Const ("HOL.eq", "?'a => ?'a => bool") $
           Var (("_dummy_", 1), "?'a") $ Var (("_dummy_", 2), "?'a"))
       ):
   term Find_Theorems.criterion
val badeqpattern = Pattern (Const ("Pure.eq", "?'a => ?'a => prop")):
   term Find_Theorems.criterion
val undefpattern =
   Pattern
    (
       Const ("HOL.Trueprop", "bool => prop") $
         (Const ("HOL.eq", "?'a => ?'a => bool") $
           Var (("_dummy_", 1), "?'a") $ Const ("HOL.undefined", "?'a"))
       ):
   term Find_Theorems.criterion
val thmpattern =
   Pattern
    (Const ("HOL.Trueprop", "bool => prop") $ Var (("_dummy_", 1), "bool")):
   term Find_Theorems.criterion
val badnames =
   ["*nitpick*", "*Nitpick*", "*full_exhaustive*", "*_def*", "Enum.finite*",
    "*Quickcheck*", "ATP*", "*Nunchaku*", "*Code*", "*BNF*", "*SMT*",
    "*.*.*"]:
   string list
val unwanted_names =
   [(false, Name "*nitpick*"), (false, Name "*Nitpick*"),
    (false, Name "*full_exhaustive*"), (false, Name "*_def*"),
    (false, Name "Enum.finite*"), (false, Name "*Quickcheck*"),
    (false, Name "ATP*"), (false, Name "*Nunchaku*"),
    (false, Name "*Code*"), (false, Name "*BNF*"), (false, Name "*SMT*"),
    (false, Name "*.*.*")]:
   (bool * term Find_Theorems.criterion) list
val has_vars = fn: term -> bool
val get_all_eqs = fn: string -> Proof.context -> (string * thm) list
val get_all_thms = fn: string -> Proof.context -> (string * thm) list
val get_noneq_thms = fn: string -> Proof.context -> (string * thm) list
val template_eqs = fn:
   string -> Proof.context -> (string * thm * template) list
val template_thms = fn:
   string -> Proof.context -> (string * thm * template) list
### theory "Draft.ExtrEqs"
### 0.550s elapsed time, 1.158s cpu time, 0.143s GC time
### theory "Draft.Types_D"
### 3.236s elapsed time, 9.601s cpu time, 1.305s GC time
Loading theory "Draft.Abstract_Separation_D" (required by "Draft.Abstract_Separation_DTemplates")
consts
  sep_heap :: "sep_state => 32 word => cdl_object option"
consts
  sep_ghost_state :: "sep_state => 32 word => nat option set"
### Ambiguous input (line 213 of "$AFP/Separation_Algebra/ex/capDL/Abstract_Separation_D.thy") produces 2 parse trees:
### ("\<^const>Pure.eq"
###   ("_applC" ("_position" cdl_heap_add)
###     ("_cargs" ("_position" state_a) ("_position" state_b)))
###   ("_lambda" ("_position" obj_id)
###     ("_Let"
###       ("_binds"
###         ("_bind" ("_position" heap_a)
###           ("_applC" ("_position" sep_heap) ("_position" state_a)))
###         ("_binds"
###           ("_bind" ("_position" heap_b)
###             ("_applC" ("_position" sep_heap) ("_position" state_b)))
###           ("_binds"
###             ("_bind" ("_position" gs_a)
###               ("_applC" ("_position" sep_ghost_state)
###                 ("_position" state_a)))
###             ("_bind" ("_position" gs_b)
###               ("_applC" ("_position" sep_ghost_state)
###                 ("_position" state_b))))))
###       ("_case_syntax" ("_applC" ("_position" heap_b) ("_position" obj_id))
###         ("_case2"
###           ("_case1" ("_position" None)
###             ("_applC" ("_position" heap_a) ("_position" obj_id)))
###           ("_case2"
###             ("_case1" ("_applC" ("_position" Some) ("_position" obj_b))
###               ("_case_syntax"
###                 ("_applC" ("_position" heap_a) ("_position" obj_id))
###                 ("_case1" ("_position" None)
###                   ("_applC" ("_position" heap_b) ("_position" obj_id)))))
###             ("_case1" ("_applC" ("_position" Some) ("_position" obj_a))
###               ("_applC" ("_position" Some)
###                 ("_applC" ("_position" object_add)
###                   ("_cargs" ("_position" obj_a)
###                     ("_cargs" ("_position" obj_b)
###                       ("_cargs"
###                         ("_applC" ("_position" gs_a) ("_position" obj_id))
###                         ("_applC" ("_position" gs_b)
###                           ("_position" obj_id))))))))))))))
### ("\<^const>Pure.eq"
###   ("_applC" ("_position" cdl_heap_add)
###     ("_cargs" ("_position" state_a) ("_position" state_b)))
###   ("_lambda" ("_position" obj_id)
###     ("_Let"
###       ("_binds"
###         ("_bind" ("_position" heap_a)
###           ("_applC" ("_position" sep_heap) ("_position" state_a)))
###         ("_binds"
###           ("_bind" ("_position" heap_b)
###             ("_applC" ("_position" sep_heap) ("_position" state_b)))
###           ("_binds"
###             ("_bind" ("_position" gs_a)
###               ("_applC" ("_position" sep_ghost_state)
###                 ("_position" state_a)))
###             ("_bind" ("_position" gs_b)
###               ("_applC" ("_position" sep_ghost_state)
###                 ("_position" state_b))))))
###       ("_case_syntax" ("_applC" ("_position" heap_b) ("_position" obj_id))
###         ("_case2"
###           ("_case1" ("_position" None)
###             ("_applC" ("_position" heap_a) ("_position" obj_id)))
###           ("_case1" ("_applC" ("_position" Some) ("_position" obj_b))
###             ("_case_syntax"
###               ("_applC" ("_position" heap_a) ("_position" obj_id))
###               ("_case2"
###                 ("_case1" ("_position" None)
###                   ("_applC" ("_position" heap_b) ("_position" obj_id)))
###                 ("_case1" ("_applC" ("_position" Some) ("_position" obj_a))
###                   ("_applC" ("_position" Some)
###                     ("_applC" ("_position" object_add)
###                       ("_cargs" ("_position" obj_a)
###                         ("_cargs" ("_position" obj_b)
###                           ("_cargs"
###                             ("_applC" ("_position" gs_a)
###                               ("_position" obj_id))
###                             ("_applC" ("_position" gs_b)
###                               ("_position" obj_id))))))))))))))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
instantiation
  sep_state :: zero
  zero_sep_state == zero_class.zero :: sep_state
instantiation
  sep_state :: stronger_sep_algebra
  sep_disj_sep_state == sep_disj :: sep_state => sep_state => bool
  plus_sep_state == plus :: sep_state => sep_state => sep_state
### theory "Draft.Abstract_Separation_D"
### 1.057s elapsed time, 1.145s cpu time, 0.123s GC time
Loading theory "Draft.Abstract_Separation_DTemplates"
val templateLemmas =
   [("Abstract_Separation_D.add_to_slots_empty",
     "Abstract_Separation_D.add_to_slots Map.empty ?h = ?h",
     template_equation
      (template_app
        (template_app (template_hole 1, t_empty), template_var 0),
       template_var 0)),
    ("Abstract_Separation_D.update_object_slots_id",
     "update_slots (object_slots ?a) ?a = ?a",
     template_equation
      (template_app
        (template_app
          (template_hole 1, template_app (template_hole 0, template_var 0)),
         template_var 0),
       template_var 0)),
    ("Abstract_Separation_D.clean_slots_empty",
     "clean_slots Map.empty ?cmp = Map.empty",
     template_equation
      (template_app
        (template_app (template_hole 1, t_empty), template_var 0),
       t_empty)),
    ("Abstract_Separation_D.slots_of_heap_empty",
     "slots_of_heap Map.empty ?object_id = Map.empty",
     template_equation
      (template_app
        (template_app (template_hole 2, t_empty), template_var 0),
       t_empty)),
    ("Abstract_Separation_D.object_slots_object_clean_fields",
     "object_slots (object_clean_fields ?obj ?cmp) = object_slots ?obj",
     template_equation
      (template_app
        (template_hole 1,
         template_app
          (template_app (template_hole 0, template_var 1), template_var 0)),
       template_app (template_hole 1, template_var 1))),
    ("Abstract_Separation_D.union_intersection1", "?A Int (?A Un ?B) = ?A",
     template_equation
      (template_app
        (template_app (template_hole 1, template_var 1),
         template_app
          (template_app (template_hole 0, template_var 1), template_var 0)),
       template_var 1)),
    ("Abstract_Separation_D.union_intersection2", "?B Int (?A Un ?B) = ?B",
     template_equation
      (template_app
        (template_app (template_hole 1, template_var 1),
         template_app
          (template_app (template_hole 0, template_var 0), template_var 1)),
       template_var 1)),
    ("Abstract_Separation_D.union_intersection", "(?A Un ?B) Int ?A = ?A",
     template_equation
      (template_app
        (template_app
          (template_hole 1,
           template_app
            (template_app (template_hole 0, template_var 1),
             template_var 0)),
         template_var 1),
       template_var 1)),
    ("Abstract_Separation_D.union_intersection", "(?A Un ?B) Int ?B = ?B",
     template_equation
      (template_app
        (template_app
          (template_hole 1,
           template_app
            (template_app (template_hole 0, template_var 1),
             template_var 0)),
         template_var 0),
       template_var 0)),
    ("Abstract_Separation_D.has_slots_object_clean",
     "has_slots (object_clean ?obj ?cmp) = has_slots ?obj",
     template_equation
      (template_app
        (template_hole 1,
         template_app
          (template_app (template_hole 0, template_var 1), template_var 0)),
       template_app (template_hole 1, template_var 1))),
    ("Abstract_Separation_D.has_slots_object_clean_fields",
     "has_slots (object_clean_fields ?obj ?cmp) = has_slots ?obj",
     template_equation
      (template_app
        (template_hole 1,
         template_app
          (template_app (template_hole 0, template_var 1), template_var 0)),
       template_app (template_hole 1, template_var 1))),
    ("Abstract_Separation_D.has_slots_object_clean_slots",
     "has_slots (object_clean_slots ?obj ?cmp) = has_slots ?obj",
     template_equation
      (template_app
        (template_hole 1,
         template_app
          (template_app (template_hole 0, template_var 1), template_var 0)),
       template_app (template_hole 1, template_var 1))),
    ("Abstract_Separation_D.object_type_add_to_slots",
     "object_type (Abstract_Separation_D.add_to_slots ?slots ?x) =
      object_type ?x",
     template_equation
      (template_app
        (template_hole 1,
         template_app
          (template_app (template_hole 0, template_var 1), template_var 0)),
       template_app (template_hole 1, template_var 0))),
    ("Abstract_Separation_D.object_type_object_clean",
     "object_type (object_clean ?x ?cmp) = object_type ?x",
     template_equation
      (template_app
        (template_hole 1,
         template_app
          (template_app (template_hole 0, template_var 1), template_var 0)),
       template_app (template_hole 1, template_var 1))),
    ("Abstract_Separation_D.object_type_object_clean_fields",
     "object_type (object_clean_fields ?x ?cmp) = object_type ?x",
     template_equation
      (template_app
        (template_hole 1,
         template_app
          (template_app (template_hole 0, template_var 1), template_var 0)),
       template_app (template_hole 1, template_var 1))),
    ("Abstract_Separation_D.object_type_object_clean_slots",
     "object_type (object_clean_slots ?x ?cmp) = object_type ?x",
     template_equation
      (template_app
        (template_hole 1,
         template_app
          (template_app (template_hole 0, template_var 1), template_var 0)),
       template_app (template_hole 1, template_var 1))),
    ("Abstract_Separation_D.object_type_update_slots",
     "object_type (update_slots ?slots ?x) = object_type ?x",
     template_equation
      (template_app
        (template_hole 1,
         template_app
          (template_app (template_hole 0, template_var 1), template_var 0)),
       template_app (template_hole 1, template_var 0))),
    ("Abstract_Separation_D.not_conflicting_objects_empty",
     "not_conflicting_objects ?s (SepState Map.empty (%obj_id. {}))
       ?obj_id",
     template_predicate
      (
         template_app
          (template_app
            (template_app (template_hole 3, template_var 1),
             template_app
              (template_app (template_hole 2, t_empty), t_empty)),
           template_var 0)
         )),
    ("Abstract_Separation_D.empty_not_conflicting_objects",
     "not_conflicting_objects (SepState Map.empty (%obj_id. {})) ?s
       ?obj_id",
     template_predicate
      (
         template_app
          (template_app
            (template_app
              (template_hole 3,
               template_app
                (template_app (template_hole 2, t_empty), t_empty)),
             template_var 1),
           template_var 0)
         )),
    ("Abstract_Separation_D.object_slots_object_clean",
     "object_slots (object_clean ?obj ?cmp) =
      clean_slots (object_slots ?obj) ?cmp",
     template_equation
      (template_app
        (template_hole 2,
         template_app
          (template_app (template_hole 1, template_var 1), template_var 0)),
       template_app
        (template_app
          (template_hole 0, template_app (template_hole 2, template_var 1)),
         template_var 0))),
    ("Abstract_Separation_D.object_slots_object_clean_slots",
     "object_slots (object_clean_slots ?obj ?cmp) =
      clean_slots (object_slots ?obj) ?cmp",
     template_equation
      (template_app
        (template_hole 2,
         template_app
          (template_app (template_hole 1, template_var 1), template_var 0)),
       template_app
        (template_app
          (template_hole 0, template_app (template_hole 2, template_var 1)),
         template_var 0))),
    ("Abstract_Separation_D.not_conflicting_objects_comm",
     "not_conflicting_objects ?h1.0 ?h2.0 ?obj =
      not_conflicting_objects ?h2.0 ?h1.0 ?obj",
     template_equation
      (template_app
        (template_app
          (template_app (template_hole 0, template_var 2), template_var 1),
         template_var 0),
       template_app
        (template_app
          (template_app (template_hole 0, template_var 1), template_var 2),
         template_var 0))),
    ("Abstract_Separation_D.object_clean_idem",
     "object_clean (object_clean ?obj ?cmp) ?cmp = object_clean ?obj ?cmp",
     template_equation
      (template_app
        (template_app
          (template_hole 0,
           template_app
            (template_app (template_hole 0, template_var 1),
             template_var 0)),
         template_var 0),
       template_app
        (template_app (template_hole 0, template_var 1), template_var 0))),
    ("Abstract_Separation_D.object_clean_fields_idem",
     "object_clean_fields (object_clean_fields ?obj ?cmp) ?cmp =
      object_clean_fields ?obj ?cmp",
     template_equation
      (template_app
        (template_app
          (template_hole 0,
           template_app
            (template_app (template_hole 0, template_var 1),
             template_var 0)),
         template_var 0),
       template_app
        (template_app (template_hole 0, template_var 1), template_var 0))),
    ("Abstract_Separation_D.object_clean_slots_idem",
     "object_clean_slots (object_clean_slots ?obj ?cmp) ?cmp =
      object_clean_slots ?obj ?cmp",
     template_equation
      (template_app
        (template_app
          (template_hole 0,
           template_app
            (template_app (template_hole 0, template_var 1),
             template_var 0)),
         template_var 0),
       template_app
        (template_app (template_hole 0, template_var 1), template_var 0))),
    ("Abstract_Separation_D.update_slots_object_clean_slots",
     "update_slots ?slots (object_clean_slots ?obj ?cmp) =
      update_slots ?slots ?obj",
     template_equation
      (template_app
        (template_app (template_hole 1, template_var 2),
         template_app
          (template_app (template_hole 0, template_var 1), template_var 0)),
       template_app
        (template_app (template_hole 1, template_var 2), template_var 1))),
    ("Abstract_Separation_D.update_slots_update_slots",
     "update_slots ?slots (update_slots ?slots' ?obj) =
      update_slots ?slots ?obj",
     template_equation
      (template_app
        (template_app (template_hole 0, template_var 2),
         template_app
          (template_app (template_hole 0, template_var 1), template_var 0)),
       template_app
        (template_app (template_hole 0, template_var 2), template_var 0))),
    ("Abstract_Separation_D.the_set_inter",
     "the_set (?A Int ?B) = the_set ?A Int the_set ?B",
     template_equation
      (template_app
        (template_hole 2,
         template_app
          (template_app (template_hole 1, template_var 1), template_var 0)),
       template_app
        (template_app
          (template_hole 0, template_app (template_hole 2, template_var 1)),
         template_app (template_hole 2, template_var 0)))),
    ("Abstract_Separation_D.the_set_union",
     "the_set (?A Un ?B) = the_set ?A Un the_set ?B",
     template_equation
      (template_app
        (template_hole 2,
         template_app
          (template_app (template_hole 1, template_var 1), template_var 0)),
       template_app
        (template_app
          (template_hole 0, template_app (template_hole 2, template_var 1)),
         template_app (template_hole 2, template_var 0)))),
    ("Abstract_Separation_D.object_slots_update_slots",
     "has_slots ?obj ==> object_slots (update_slots ?slots ?obj) = ?slots",
     template_implication
      ([template_predicate
         (template_app (template_hole 3, template_var 1))],
       template_equation
        (template_app
          (template_hole 1,
           template_app
            (template_app (template_hole 0, template_var 0),
             template_var 1)),
         template_var 0))),
    ("Abstract_Separation_D.update_slots_no_slots",
     "~ has_slots ?obj ==> update_slots ?slots ?obj = ?obj",
     template_implication
      ([template_negation
         (
            template_predicate
             (template_app (template_hole 2, template_var 1))
            )],
       template_equation
        (template_app
          (template_app (template_hole 0, template_var 0), template_var 1),
         template_var 1))),
    ("Abstract_Separation_D.object_slots_update_slots_object_clean_fields",
     "object_slots (update_slots ?slots (object_clean_fields ?obj ?cmp)) =
      object_slots (update_slots ?slots ?obj)",
     template_equation
      (template_app
        (template_hole 2,
         template_app
          (template_app (template_hole 1, template_var 2),
           template_app
            (template_app (template_hole 0, template_var 1),
             template_var 0))),
       template_app
        (template_hole 2,
         template_app
          (template_app (template_hole 1, template_var 2),
           template_var 1)))),
    ("Abstract_Separation_D.cdl_heap_add_empty",
     "cdl_heap_add (SepState ?h ?gs) (SepState Map.empty (%obj_id. {})) =
      ?h",
     template_equation
      (template_app
        (template_app
          (template_hole 3,
           template_app
            (template_app (template_hole 2, template_var 1),
             template_var 0)),
         template_app (template_app (template_hole 2, t_empty), t_empty)),
       template_var 1)),
    ("Abstract_Separation_D.empty_cdl_heap_add",
     "cdl_heap_add (SepState Map.empty (%obj_id. {})) (SepState ?h ?gs) =
      ?h",
     template_equation
      (template_app
        (template_app
          (template_hole 3,
           template_app (template_app (template_hole 2, t_empty), t_empty)),
         template_app
          (template_app (template_hole 2, template_var 1), template_var 0)),
       template_var 1)),
    ("Abstract_Separation_D.add_to_slots_twice",
     "Abstract_Separation_D.add_to_slots ?x
       (Abstract_Separation_D.add_to_slots ?y ?a) =
      Abstract_Separation_D.add_to_slots (?x ++ ?y) ?a",
     template_equation
      (template_app
        (template_app (template_hole 1, template_var 2),
         template_app
          (template_app (template_hole 1, template_var 1), template_var 0)),
       template_app
        (template_app
          (template_hole 1,
           template_app
            (template_app (template_hole 0, template_var 2),
             template_var 1)),
         template_var 0))),
    ("Abstract_Separation_D.object_clean_fields_twice",
     "object_clean_fields (object_clean_fields ?obj ?cmp') ?cmp =
      object_clean_fields ?obj (?cmp Int ?cmp')",
     template_equation
      (template_app
        (template_app
          (template_hole 1,
           template_app
            (template_app (template_hole 1, template_var 2),
             template_var 1)),
         template_var 0),
       template_app
        (template_app (template_hole 1, template_var 2),
         template_app
          (template_app (template_hole 0, template_var 0),
           template_var 1)))),
    ("Abstract_Separation_D.object_clean_fields_object_clean_slots",
     "object_clean_fields (object_clean_slots ?obj ?gs) ?gs =
      object_clean_slots (object_clean_fields ?obj ?gs) ?gs",
     template_equation
      (template_app
        (template_app
          (template_hole 1,
           template_app
            (template_app (template_hole 0, template_var 1),
             template_var 0)),
         template_var 0),
       template_app
        (template_app
          (template_hole 0,
           template_app
            (template_app (template_hole 1, template_var 1),
             template_var 0)),
         template_var 0))),
    ("Abstract_Separation_D.object_clean_fields_update_slots",
     "object_clean_fields (update_slots ?slots ?obj) ?cmp =
      update_slots ?slots (object_clean_fields ?obj ?cmp)",
     template_equation
      (template_app
        (template_app
          (template_hole 1,
           template_app
            (template_app (template_hole 0, template_var 2),
             template_var 1)),
         template_var 0),
       template_app
        (template_app (template_hole 0, template_var 2),
         template_app
          (template_app (template_hole 1, template_var 1),
           template_var 0)))),
    ("Abstract_Separation_D.update_slots_add_to_slots_empty",
     "update_slots Map.empty
       (Abstract_Separation_D.add_to_slots ?new ?obj) =
      update_slots Map.empty ?obj",
     template_equation
      (template_app
        (template_app (template_hole 2, t_empty),
         template_app
          (template_app (template_hole 0, template_var 1), template_var 0)),
       template_app
        (template_app (template_hole 2, t_empty), template_var 0))),
    ("Abstract_Separation_D.not_conflicting_objects_empty_object",
     "sep_heap ?x ?obj_id = None ==> not_conflicting_objects ?x ?y ?obj_id",
     template_implication
      ([template_equation
         (template_app
           (template_app (template_hole 2, template_var 2), template_var 1),
          template_hole 1)],
       template_predicate
        (
           template_app
            (template_app
              (template_app (template_hole 0, template_var 2),
               template_var 0),
             template_var 1)
           ))),
    ("Abstract_Separation_D.empty_object_not_conflicting_objects",
     "sep_heap ?y ?obj_id = None ==> not_conflicting_objects ?x ?y ?obj_id",
     template_implication
      ([template_equation
         (template_app
           (template_app (template_hole 2, template_var 2), template_var 1),
          template_hole 1)],
       template_predicate
        (
           template_app
            (template_app
              (template_app (template_hole 0, template_var 0),
               template_var 2),
             template_var 1)
           ))),
    ("Abstract_Separation_D.sep_state_add_comm",
     "sep_state_disj ?x ?y ==> sep_state_add ?x ?y = sep_state_add ?y ?x",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 2, template_var 1),
              template_var 0)
            )],
       template_equation
        (template_app
          (template_app (template_hole 0, template_var 1), template_var 0),
         template_app
          (template_app (template_hole 0, template_var 0),
           template_var 1)))),
    ("Abstract_Separation_D.object_slots_update_slots_empty",
     "~ has_slots ?obj ==>
      object_slots (update_slots ?slots ?obj) = Map.empty",
     template_implication
      ([template_negation
         (
            template_predicate
             (template_app (template_hole 4, template_var 1))
            )],
       template_equation
        (template_app
          (template_hole 2,
           template_app
            (template_app (template_hole 1, template_var 0),
             template_var 1)),
         t_empty))),
    ("Abstract_Separation_D.update_slots_same_object",
     "?a = ?b ==> update_slots ?a ?obj = update_slots ?b ?obj",
     template_implication
      ([template_equation (template_var 2, template_var 1)],
       template_equation
        (template_app
          (template_app (template_hole 0, template_var 2), template_var 0),
         template_app
          (template_app (template_hole 0, template_var 1),
           template_var 0)))),
    ("Abstract_Separation_D.slots_of_heap_empty2",
     "?h ?obj_id = None ==> slots_of_heap ?h ?obj_id = Map.empty",
     template_implication
      ([template_equation
         (template_app (template_var 1, template_var 0), template_hole 3)],
       template_equation
        (template_app
          (template_app (template_hole 1, template_var 1), template_var 0),
         t_empty))),
    ("Abstract_Separation_D.map_add_result_empty1",
     "?a ++ ?b = Map.empty ==> ?a = Map.empty",
     template_implication
      ([template_equation
         (template_app
           (template_app (template_hole 1, template_var 1), template_var 0),
          t_empty)],
       template_equation (template_var 1, t_empty))),
    ("Abstract_Separation_D.map_add_result_empty2",
     "?a ++ ?b = Map.empty ==> ?b = Map.empty",
     template_implication
      ([template_equation
         (template_app
           (template_app (template_hole 1, template_var 1), template_var 0),
          t_empty)],
       template_equation (template_var 0, t_empty))),
    ("Abstract_Separation_D.cdl_heap_add_none1",
     "cdl_heap_add ?x ?y ?obj_id = None ==> sep_heap ?x ?obj_id = None",
     template_implication
      ([template_equation
         (template_app
           (template_app
             (template_app (template_hole 2, template_var 2),
              template_var 1),
            template_var 0),
          template_hole 1)],
       template_equation
        (template_app
          (template_app (template_hole 0, template_var 2), template_var 0),
         template_hole 1))),
    ("Abstract_Separation_D.cdl_heap_add_none2",
     "cdl_heap_add ?x ?y ?obj_id = None ==> sep_heap ?y ?obj_id = None",
     template_implication
      ([template_equation
         (template_app
           (template_app
             (template_app (template_hole 2, template_var 2),
              template_var 1),
            template_var 0),
          template_hole 1)],
       template_equation
        (template_app
          (template_app (template_hole 0, template_var 1), template_var 0),
         template_hole 1))),
    ("Abstract_Separation_D.object_type_has_slots",
     "[| has_slots ?x; object_type ?x = object_type ?y |] ==> has_slots ?y",
     template_implication
      ([template_predicate (template_app (template_hole 2, template_var 1)),
        template_equation
         (template_app (template_hole 0, template_var 1),
          template_app (template_hole 0, template_var 0))],
       template_predicate
        (template_app (template_hole 2, template_var 0)))),
    ("Abstract_Separation_D.restrict_map_disj'",
     "?S Int ?T = {} ==> ?h |` ?S \<bottom> ?h' |` ?T",
     template_implication
      ([template_equation
         (template_app
           (template_app (template_hole 3, template_var 3), template_var 2),
          template_hole 2)],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 1,
               template_app
                (template_app (template_hole 0, template_var 1),
                 template_var 3)),
             template_app
              (template_app (template_hole 0, template_var 0),
               template_var 2))
           ))),
    ("Abstract_Separation_D.the_set_inter_empty",
     "?A Int ?B = {} ==> the_set ?A Int the_set ?B = {}",
     template_implication
      ([template_equation
         (template_app
           (template_app (template_hole 5, template_var 1), template_var 0),
          template_hole 4)],
       template_equation
        (template_app
          (template_app
            (template_hole 2,
             template_app (template_hole 1, template_var 1)),
           template_app (template_hole 1, template_var 0)),
         template_hole 0))),
    ("Abstract_Separation_D.update_slots_of_heap_id",
     "?h ?obj_id = Some ?obj ==>
      update_slots (slots_of_heap ?h ?obj_id) ?obj = ?obj",
     template_implication
      ([template_equation
         (template_app (template_var 2, template_var 1),
          template_app (template_hole 3, template_var 0))],
       template_equation
        (template_app
          (template_app
            (template_hole 1,
             template_app
              (template_app (template_hole 0, template_var 2),
               template_var 1)),
           template_var 0),
         template_var 0))),
    ("Abstract_Separation_D.object_clean_all",
     "object_type ?obj_a = object_type ?obj_b ==>
      object_clean ?obj_b {} = object_clean ?obj_a {}",
     template_implication
      ([template_equation
         (template_app (template_hole 3, template_var 1),
          template_app (template_hole 3, template_var 0))],
       template_equation
        (template_app
          (template_app (template_hole 1, template_var 0), template_hole 0),
         template_app
          (template_app (template_hole 1, template_var 1),
           template_hole 0)))),
    ("Abstract_Separation_D.add_to_slots_assoc",
     "Abstract_Separation_D.add_to_slots ?x
       (Abstract_Separation_D.add_to_slots (?y ++ ?z) ?obj) =
      Abstract_Separation_D.add_to_slots (?x ++ ?y)
       (Abstract_Separation_D.add_to_slots ?z ?obj)",
     template_equation
      (template_app
        (template_app (template_hole 1, template_var 3),
         template_app
          (template_app
            (template_hole 1,
             template_app
              (template_app (template_hole 0, template_var 2),
               template_var 1)),
           template_var 0)),
       template_app
        (template_app
          (template_hole 1,
           template_app
            (template_app (template_hole 0, template_var 3),
             template_var 2)),
         template_app
          (template_app (template_hole 1, template_var 1),
           template_var 0)))),
    ("Abstract_Separation_D.sep_state_add_disjL",
     "[| sep_state_disj ?y ?z; sep_state_disj ?x (sep_state_add ?y ?z) |]
      ==> sep_state_disj ?x ?y",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 1, template_var 2),
              template_var 1)
            ),
        template_predicate
         (
            template_app
             (template_app (template_hole 1, template_var 0),
              template_app
               (template_app (template_hole 0, template_var 2),
                template_var 1))
            )],
       template_predicate
        (
           template_app
            (template_app (template_hole 1, template_var 0), template_var 2)
           ))),
    ("Abstract_Separation_D.sep_state_add_disjR",
     "[| sep_state_disj ?y ?z; sep_state_disj ?x (sep_state_add ?y ?z) |]
      ==> sep_state_disj ?x ?z",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 1, template_var 2),
              template_var 1)
            ),
        template_predicate
         (
            template_app
             (template_app (template_hole 1, template_var 0),
              template_app
               (template_app (template_hole 0, template_var 2),
                template_var 1))
            )],
       template_predicate
        (
           template_app
            (template_app (template_hole 1, template_var 0), template_var 1)
           ))),
    ("Abstract_Separation_D.object_type_object_addL",
     "object_type ?obj = object_type ?obj' ==>
      object_type (object_add ?obj ?obj' ?cmp ?cmp') = object_type ?obj",
     template_implication
      ([template_equation
         (template_app (template_hole 1, template_var 3),
          template_app (template_hole 1, template_var 2))],
       template_equation
        (template_app
          (template_hole 1,
           template_app
            (template_app
              (template_app
                (template_app (template_hole 0, template_var 3),
                 template_var 2),
               template_var 1),
             template_var 0)),
         template_app (template_hole 1, template_var 3)))),
    ("Abstract_Separation_D.object_type_object_addR",
     "object_type ?obj = object_type ?obj' ==>
      object_type (object_add ?obj ?obj' ?cmp ?cmp') = object_type ?obj'",
     template_implication
      ([template_equation
         (template_app (template_hole 1, template_var 3),
          template_app (template_hole 1, template_var 2))],
       template_equation
        (template_app
          (template_hole 1,
           template_app
            (template_app
              (template_app
                (template_app (template_hole 0, template_var 3),
                 template_var 2),
               template_var 1),
             template_var 0)),
         template_app (template_hole 1, template_var 2)))),
    ("Abstract_Separation_D.update_slots_eq",
     "update_slots ?a ?o1.0 = update_slots ?a ?o2.0 ==>
      update_slots ?b ?o1.0 = update_slots ?b ?o2.0",
     template_implication
      ([template_equation
         (template_app
           (template_app (template_hole 0, template_var 3), template_var 2),
          template_app
           (template_app (template_hole 0, template_var 3),
            template_var 1))],
       template_equation
        (template_app
          (template_app (template_hole 0, template_var 0), template_var 2),
         template_app
          (template_app (template_hole 0, template_var 0),
           template_var 1)))),
    ("Abstract_Separation_D.inter_empty_not_both",
     "[| ?x : ?A; ?A Int ?B = {} |] ==> ?x ~: ?B",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 4, template_var 2),
              template_var 1)
            ),
        template_equation
         (template_app
           (template_app (template_hole 2, template_var 1), template_var 0),
          template_hole 1)],
       template_negation
        (
           template_predicate
            (
               template_app
                (template_app (template_hole 4, template_var 2),
                 template_var 0)
               )
           ))),
    ("Abstract_Separation_D.object_slots_add_to_slots",
     "object_type ?y = object_type ?z ==>
      object_slots
       (Abstract_Separation_D.add_to_slots (object_slots ?y) ?z) =
      object_slots ?y ++ object_slots ?z",
     template_implication
      ([template_equation
         (template_app (template_hole 4, template_var 1),
          template_app (template_hole 4, template_var 0))],
       template_equation
        (template_app
          (template_hole 2,
           template_app
            (template_app
              (template_hole 1,
               template_app (template_hole 2, template_var 1)),
             template_var 0)),
         template_app
          (template_app
            (template_hole 0,
             template_app (template_hole 2, template_var 1)),
           template_app (template_hole 2, template_var 0))))),
    ("Abstract_Separation_D.cdl_ghost_state_add_assoc",
     "cdl_ghost_state_add
       (SepState (cdl_heap_add ?x ?y) (cdl_ghost_state_add ?x ?y)) ?z =
      cdl_ghost_state_add ?x
       (SepState (cdl_heap_add ?y ?z) (cdl_ghost_state_add ?y ?z))",
     template_equation
      (template_app
        (template_app
          (template_hole 2,
           template_app
            (template_app
              (template_hole 1,
               template_app
                (template_app (template_hole 0, template_var 2),
                 template_var 1)),
             template_app
              (template_app (template_hole 2, template_var 2),
               template_var 1))),
         template_var 0),
       template_app
        (template_app (template_hole 2, template_var 2),
         template_app
          (template_app
            (template_hole 1,
             template_app
              (template_app (template_hole 0, template_var 1),
               template_var 0)),
           template_app
            (template_app (template_hole 2, template_var 1),
             template_var 0))))),
    ("Abstract_Separation_D.add_to_slots_object_slots",
     "object_type ?y = object_type ?z ==>
      Abstract_Separation_D.add_to_slots
       (object_slots (Abstract_Separation_D.add_to_slots ?x ?y)) ?z =
      Abstract_Separation_D.add_to_slots (?x ++ object_slots ?y) ?z",
     template_implication
      ([template_equation
         (template_app (template_hole 4, template_var 2),
          template_app (template_hole 4, template_var 1))],
       template_equation
        (template_app
          (template_app
            (template_hole 2,
             template_app
              (template_hole 1,
               template_app
                (template_app (template_hole 2, template_var 0),
                 template_var 2))),
           template_var 1),
         template_app
          (template_app
            (template_hole 2,
             template_app
              (template_app (template_hole 0, template_var 0),
               template_app (template_hole 1, template_var 2))),
           template_var 1)))),
    ("Abstract_Separation_D.sep_state_add_disj",
     "[| sep_state_disj ?y ?z; sep_state_disj ?x ?y; sep_state_disj ?x ?z |]
      ==> sep_state_disj ?x (sep_state_add ?y ?z)",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 1, template_var 2),
              template_var 1)
            ),
        template_predicate
         (
            template_app
             (template_app (template_hole 1, template_var 0),
              template_var 2)
            ),
        template_predicate
         (
            template_app
             (template_app (template_hole 1, template_var 0),
              template_var 1)
            )],
       template_predicate
        (
           template_app
            (template_app (template_hole 1, template_var 0),
             template_app
              (template_app (template_hole 0, template_var 2),
               template_var 1))
           ))),
    ("Abstract_Separation_D.map_add_restrict_comm",
     "?S Int ?T = {} ==> ?h |` ?S ++ ?h' |` ?T = ?h' |` ?T ++ ?h |` ?S",
     template_implication
      ([template_equation
         (template_app
           (template_app (template_hole 4, template_var 3), template_var 2),
          template_hole 3)],
       template_equation
        (template_app
          (template_app
            (template_hole 1,
             template_app
              (template_app (template_hole 0, template_var 1),
               template_var 3)),
           template_app
            (template_app (template_hole 0, template_var 0),
             template_var 2)),
         template_app
          (template_app
            (template_hole 1,
             template_app
              (template_app (template_hole 0, template_var 0),
               template_var 2)),
           template_app
            (template_app (template_hole 0, template_var 1),
             template_var 3))))),
    ("Abstract_Separation_D.clean_slots_map_add_comm",
     "?cmps_a Int ?cmps_b = {} ==>
      clean_slots ?slots_a ?cmps_a ++ clean_slots ?slots_b ?cmps_b =
      clean_slots ?slots_b ?cmps_b ++ clean_slots ?slots_a ?cmps_a",
     template_implication
      ([template_equation
         (template_app
           (template_app (template_hole 4, template_var 3), template_var 2),
          template_hole 3)],
       template_equation
        (template_app
          (template_app
            (template_hole 1,
             template_app
              (template_app (template_hole 0, template_var 1),
               template_var 3)),
           template_app
            (template_app (template_hole 0, template_var 0),
             template_var 2)),
         template_app
          (template_app
            (template_hole 1,
             template_app
              (template_app (template_hole 0, template_var 0),
               template_var 2)),
           template_app
            (template_app (template_hole 0, template_var 1),
             template_var 3))))),
    ("Abstract_Separation_D.map_add_emptyE",
     "[| ?a ++ ?b = Map.empty;
         [| ?a = Map.empty; ?b = Map.empty |] ==> ?R |]
      ==> ?R",
     template_implication
      ([template_equation
         (template_app
           (template_app (template_hole 1, template_var 2), template_var 1),
          t_empty),
        template_implication
         ([template_equation (template_var 2, t_empty)],
          template_implication
           ([template_equation (template_var 1, t_empty)],
            template_predicate (template_var 0)))],
       template_predicate (template_var 0))),
    ("Abstract_Separation_D.object_add_comm",
     "[| object_type ?obj_a = object_type ?obj_b;
         ?cmps_a Int ?cmps_b = {} |]
      ==> object_add ?obj_a ?obj_b ?cmps_a ?cmps_b =
          object_add ?obj_b ?obj_a ?cmps_b ?cmps_a",
     template_implication
      ([template_equation
         (template_app (template_hole 5, template_var 3),
          template_app (template_hole 5, template_var 2)),
        template_equation
         (template_app
           (template_app (template_hole 3, template_var 1), template_var 0),
          template_hole 2)],
       template_equation
        (template_app
          (template_app
            (template_app
              (template_app (template_hole 0, template_var 3),
               template_var 2),
             template_var 1),
           template_var 0),
         template_app
          (template_app
            (template_app
              (template_app (template_hole 0, template_var 2),
               template_var 3),
             template_var 0),
           template_var 1)))),
    ("Abstract_Separation_D.add_to_slots_comm",
     "[| object_slots ?y_obj \<bottom> object_slots ?z_obj;
         update_slots Map.empty ?y_obj = update_slots Map.empty ?z_obj |]
      ==> Abstract_Separation_D.add_to_slots (object_slots ?z_obj) ?y_obj =
          Abstract_Separation_D.add_to_slots (object_slots ?y_obj) ?z_obj",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_hole 5,
                template_app (template_hole 4, template_var 1)),
              template_app (template_hole 4, template_var 0))
            ),
        template_equation
         (template_app
           (template_app (template_hole 2, t_empty), template_var 1),
          template_app
           (template_app (template_hole 2, t_empty), template_var 0))],
       template_equation
        (template_app
          (template_app
            (template_hole 0,
             template_app (template_hole 4, template_var 0)),
           template_var 1),
         template_app
          (template_app
            (template_hole 0,
             template_app (template_hole 4, template_var 1)),
           template_var 0)))),
    ("Abstract_Separation_D.update_slots_object_clean",
     "[| None ~: ?cmps; None ~: ?cmps';
         object_type ?obj = object_type ?obj' |]
      ==> update_slots ?slots (object_clean ?obj ?cmps) =
          update_slots ?slots (object_clean ?obj' ?cmps')",
     template_implication
      ([template_negation
         (
            template_predicate
             (
                template_app
                 (template_app (template_hole 6, template_hole 5),
                  template_var 4)
                )
            ),
        template_negation
         (
            template_predicate
             (
                template_app
                 (template_app (template_hole 6, template_hole 5),
                  template_var 3)
                )
            ),
        template_equation
         (template_app (template_hole 3, template_var 2),
          template_app (template_hole 3, template_var 1))],
       template_equation
        (template_app
          (template_app (template_hole 1, template_var 0),
           template_app
            (template_app (template_hole 0, template_var 2),
             template_var 4)),
         template_app
          (template_app (template_hole 1, template_var 0),
           template_app
            (template_app (template_hole 0, template_var 1),
             template_var 3))))),
    ("Abstract_Separation_D.update_slots_object_clean_fields",
     "[| None ~: ?cmps; None ~: ?cmps';
         object_type ?obj = object_type ?obj' |]
      ==> update_slots ?slots (object_clean_fields ?obj ?cmps) =
          update_slots ?slots (object_clean_fields ?obj' ?cmps')",
     template_implication
      ([template_negation
         (
            template_predicate
             (
                template_app
                 (template_app (template_hole 6, template_hole 5),
                  template_var 4)
                )
            ),
        template_negation
         (
            template_predicate
             (
                template_app
                 (template_app (template_hole 6, template_hole 5),
                  template_var 3)
                )
            ),
        template_equation
         (template_app (template_hole 3, template_var 2),
          template_app (template_hole 3, template_var 1))],
       template_equation
        (template_app
          (template_app (template_hole 1, template_var 0),
           template_app
            (template_app (template_hole 0, template_var 2),
             template_var 4)),
         template_app
          (template_app (template_hole 1, template_var 0),
           template_app
            (template_app (template_hole 0, template_var 1),
             template_var 3))))),
    ("Abstract_Separation_D.cdl_heap_add_assoc",
     "[| sep_state_disj ?x ?y; sep_state_disj ?y ?z; sep_state_disj ?x ?z |]
      ==> cdl_heap_add
           (SepState (cdl_heap_add ?x ?y) (cdl_ghost_state_add ?x ?y)) ?z =
          cdl_heap_add ?x
           (SepState (cdl_heap_add ?y ?z) (cdl_ghost_state_add ?y ?z))",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 4, template_var 2),
              template_var 1)
            ),
        template_predicate
         (
            template_app
             (template_app (template_hole 4, template_var 1),
              template_var 0)
            ),
        template_predicate
         (
            template_app
             (template_app (template_hole 4, template_var 2),
              template_var 0)
            )],
       template_equation
        (template_app
          (template_app
            (template_hole 2,
             template_app
              (template_app
                (template_hole 1,
                 template_app
                  (template_app (template_hole 2, template_var 2),
                   template_var 1)),
               template_app
                (template_app (template_hole 0, template_var 2),
                 template_var 1))),
           template_var 0),
         template_app
          (template_app (template_hole 2, template_var 2),
           template_app
            (template_app
              (template_hole 1,
               template_app
                (template_app (template_hole 2, template_var 1),
                 template_var 0)),
             template_app
              (template_app (template_hole 0, template_var 1),
               template_var 0)))))),
    ("Abstract_Separation_D.object_clean_fields_no_slots",
     "[| None ~: ?cmps; None ~: ?cmps';
         object_type ?obj = object_type ?obj'; ~ has_slots ?obj;
         ~ has_slots ?obj' |]
      ==> object_clean_fields ?obj ?cmps =
          object_clean_fields ?obj' ?cmps'",
     template_implication
      ([template_negation
         (
            template_predicate
             (
                template_app
                 (template_app (template_hole 6, template_hole 5),
                  template_var 3)
                )
            ),
        template_negation
         (
            template_predicate
             (
                template_app
                 (template_app (template_hole 6, template_hole 5),
                  template_var 2)
                )
            ),
        template_equation
         (template_app (template_hole 3, template_var 1),
          template_app (template_hole 3, template_var 0)),
        template_negation
         (
            template_predicate
             (template_app (template_hole 2, template_var 1))
            ),
        template_negation
         (
            template_predicate
             (template_app (template_hole 2, template_var 0))
            )],
       template_equation
        (template_app
          (template_app (template_hole 0, template_var 1), template_var 3),
         template_app
          (template_app (template_hole 0, template_var 0),
           template_var 2)))),
    ("Abstract_Separation_D.cdl_heap_add_assoc'",
     "ALL obj_id.
         not_conflicting_objects ?x ?z obj_id &
         not_conflicting_objects ?y ?z obj_id &
         not_conflicting_objects ?x ?z obj_id ==>
      cdl_heap_add
       (SepState (cdl_heap_add ?x ?y) (cdl_ghost_state_add ?x ?y)) ?z =
      cdl_heap_add ?x
       (SepState (cdl_heap_add ?y ?z) (cdl_ghost_state_add ?y ?z))",
     template_implication
      ([template_predicate (template_app (template_hole 6, t_empty))],
       template_equation
        (template_app
          (template_app
            (template_hole 2,
             template_app
              (template_app
                (template_hole 1,
                 template_app
                  (template_app (template_hole 2, template_var 2),
                   template_var 0)),
               template_app
                (template_app (template_hole 0, template_var 2),
                 template_var 0))),
           template_var 1),
         template_app
          (template_app (template_hole 2, template_var 2),
           template_app
            (template_app
              (template_hole 1,
               template_app
                (template_app (template_hole 2, template_var 0),
                 template_var 1)),
             template_app
              (template_app (template_hole 0, template_var 0),
               template_var 1)))))),
    ("Abstract_Separation_D.object_clean_comm",
     "[| object_type ?obj_a = object_type ?obj_b;
         object_slots ?obj_a ++ object_slots ?obj_b =
         object_slots ?obj_b ++ object_slots ?obj_a;
         None ~: ?cmp |]
      ==> object_clean
           (Abstract_Separation_D.add_to_slots (object_slots ?obj_a) ?obj_b)
           ?cmp =
          object_clean
           (Abstract_Separation_D.add_to_slots (object_slots ?obj_b) ?obj_a)
           ?cmp",
     template_implication
      ([template_equation
         (template_app (template_hole 9, template_var 2),
          template_app (template_hole 9, template_var 1)),
        template_equation
         (template_app
           (template_app
             (template_hole 7,
              template_app (template_hole 6, template_var 2)),
            template_app (template_hole 6, template_var 1)),
          template_app
           (template_app
             (template_hole 7,
              template_app (template_hole 6, template_var 1)),
            template_app (template_hole 6, template_var 2))),
        template_negation
         (
            template_predicate
             (
                template_app
                 (template_app (template_hole 4, template_hole 3),
                  template_var 0)
                )
            )],
       template_equation
        (template_app
          (template_app
            (template_hole 1,
             template_app
              (template_app
                (template_hole 0,
                 template_app (template_hole 6, template_var 2)),
               template_var 1)),
           template_var 0),
         template_app
          (template_app
            (template_hole 1,
             template_app
              (template_app
                (template_hole 0,
                 template_app (template_hole 6, template_var 1)),
               template_var 2)),
           template_var 0))))]:
   (string * thm * template) list
### theory "Draft.Abstract_Separation_DTemplates"
### 0.504s elapsed time, 0.658s cpu time, 0.044s GC time
val it = (): unit
