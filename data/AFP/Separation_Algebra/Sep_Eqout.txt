Loading theory "Draft.Separation_Algebra" (required by "Draft.Sep_EqTemplates" via "Draft.Sep_Eq")
Loading theory "Draft.Separation_Algebra_Alt" (required by "Draft.Sep_EqTemplates" via "Draft.Sep_Eq")
Loading theory "HOL-Library.Function_Algebras" (required by "Draft.Sep_EqTemplates" via "Draft.ExtrEqs" via "HOL-Library.BigO")
Loading theory "HOL-Library.Nat_Bijection" (required by "Draft.Sep_EqTemplates" via "Draft.ExtrEqs" via "HOL-Library.Stream")
instantiation
  fun :: (type, plus) plus
  plus_fun == plus :: ('a => 'b) => ('a => 'b) => 'a => 'b
instantiation
  fun :: (type, zero) zero
  zero_fun == zero_class.zero :: 'a => 'b
instantiation
  fun :: (type, times) times
  times_fun == times :: ('a => 'b) => ('a => 'b) => 'a => 'b
instantiation
  fun :: (type, one) one
  one_fun == one_class.one :: 'a => 'b
Found termination order: "(%p. size (snd p)) <*mlex*> {}"
### theory "HOL-Library.Function_Algebras"
### 0.126s elapsed time, 0.507s cpu time, 0.033s GC time
Loading theory "HOL-Library.Set_Algebras" (required by "Draft.Sep_EqTemplates" via "Draft.ExtrEqs" via "HOL-Library.BigO")
class sep_algebra_alt = zero +
  fixes add :: "'a => 'a => 'a option"
  assumes "add_zero": "!!x. x \<oplus> (0::'a) = Some x"
  assumes "add_comm": "!!x y. x \<oplus> y = y \<oplus> x"
  assumes
    "add_assoc":
      "!!a b c.
          lift2 (\<oplus>) a (lift2 (\<oplus>) b c) =
          lift2 (\<oplus>) (lift2 (\<oplus>) a b) c"
class pre_sep_algebra = plus + zero +
  fixes sep_disj :: "'a => 'a => bool"
  assumes "sep_disj_zero": "!!x. x ## (0::'a)"
  assumes "sep_disj_commuteI": "!!x y. x ## y ==> y ## x"
  assumes "sep_add_zero": "!!x. x + (0::'a) = x"
  assumes "sep_add_commute": "!!x y. x ## y ==> x + y = y + x"
  assumes
    "sep_add_assoc":
      "!!x y z. [| x ## y; y ## z; x ## z |] ==> x + y + z = x + (y + z)"
instantiation
  set :: (plus) plus
  plus_set == plus :: 'a set => 'a set => 'a set
instantiation
  set :: (times) times
  times_set == times :: 'a set => 'a set => 'a set
instantiation
  set :: (zero) zero
  zero_set == zero_class.zero :: 'a set
instantiation
  set :: (one) one
  one_set == one_class.one :: 'a set
Found termination order: "size_list size <*mlex*> {}"
class sep_algebra = pre_sep_algebra +
  assumes "sep_disj_addD1": "!!x y z. [| x ## y + z; y ## z |] ==> x ## y"
  assumes
    "sep_disj_addI1": "!!x y z. [| x ## y + z; y ## z |] ==> x + y ## z"
### theory "HOL-Library.Nat_Bijection"
### 0.328s elapsed time, 1.307s cpu time, 0.128s GC time
Loading theory "HOL-Library.Stream" (required by "Draft.Sep_EqTemplates" via "Draft.ExtrEqs")
### theory "HOL-Library.Set_Algebras"
### 0.225s elapsed time, 0.884s cpu time, 0.095s GC time
Loading theory "HOL-Library.Tree" (required by "Draft.Sep_EqTemplates" via "Draft.ExtrEqs" via "Draft.Templates")
### theory "Draft.Separation_Algebra_Alt"
### 0.359s elapsed time, 1.430s cpu time, 0.128s GC time
Loading theory "HOL-Library.BigO" (required by "Draft.Sep_EqTemplates" via "Draft.ExtrEqs")
### Partially applied constant "Separation_Algebra.sep_algebra_class.sep_conj" on left hand side of equation, in theorem:
### monoid_add.sum_list (\<and>*) \<box> ?xs == foldr (\<and>*) ?xs \<box>
### Partially applied constant "Separation_Algebra.sep_algebra_class.sep_conj" on left hand side of equation, in theorem:
### comm_monoid_add.sum (\<and>*) \<box> ?g (set ?xs) ==
### sep.sum_list (map ?g (remdups ?xs))
class stronger_sep_algebra = pre_sep_algebra +
  assumes
    "sep_add_disj_eq": "!!y z x. y ## z ==> x ## y + z = (x ## y & x ## z)"
consts
  shift :: "'a list => 'a stream => 'a stream"
Proofs for coinductive predicate(s) "streamsp"
  Proving monotonicity ...
consts
  snth :: "'a stream => nat => 'a"
consts
  stake :: "nat => 'a stream => 'a list"
consts
  sdrop :: "nat => 'a stream => 'a stream"
consts
  left :: "'a tree => 'a tree"
consts
  right :: "'a tree => 'a tree"
consts
  sfilter :: "('a => bool) => 'a stream => 'a stream"
class cancellative_sep_algebra = sep_algebra +
  assumes
    "sep_add_cancelD":
      "!!x z y. [| x + z = y + z; x ## z; y ## z |] ==> x = y"
consts
  cycle :: "'a list => 'a stream"
Found termination order: "size <*mlex*> {}"
### theory "Draft.Separation_Algebra"
### 1.023s elapsed time, 4.033s cpu time, 0.468s GC time
Loading theory "Draft.Sep_Eq" (required by "Draft.Sep_EqTemplates")
consts
  siterate :: "('a => 'a) => 'a => 'a stream"
Found termination order: "size <*mlex*> {}"
consts
  flat :: "'a list stream => 'a stream"
Found termination order: "size <*mlex*> {}"
consts
  sinterleave :: "'a stream => 'a stream => 'a stream"
consts
  szip :: "'a stream => 'b stream => ('a * 'b) stream"
class height = type +
  fixes height :: "'a => nat"
instantiation
  tree :: (type) height
  height_tree == height :: 'a tree => nat
### theory "HOL-Library.BigO"
### 1.025s elapsed time, 3.964s cpu time, 0.939s GC time
consts
  smap2 :: "('a => 'b => 'c) => 'a stream => 'b stream => 'c stream"
Found termination order: "size <*mlex*> {}"
### theory "HOL-Library.Stream"
### 1.102s elapsed time, 4.249s cpu time, 0.939s GC time
Found termination order: "size <*mlex*> {}"
### Ambiguous input (line 24 of "$AFP/Separation_Algebra/Sep_Eq.thy") produces 2 parse trees:
### ("\<^const>Pure.eq"
###   ("_applC" ("_position" add2) ("_cargs" ("_position" x) ("_position" y)))
###   ("\<^const>HOL.If"
###     ("\<^const>Separation_Algebra.pre_sep_algebra_class.sep_disj"
###       ("_position" x) ("_position" y))
###     ("_applC" ("_position" Some)
###       ("\<^const>Groups.plus_class.plus" ("_position" x) ("_position" y)))
###     ("_position" None)))
### ("\<^const>Pure.eq"
###   ("_applC" ("_position" add2) ("_cargs" ("_position" x) ("_position" y)))
###   ("\<^const>HOL.If"
###     ("\<^const>Separation_Algebra_Alt.sep_algebra_alt_class.disjoint"
###       ("_position" x) ("_position" y))
###     ("_applC" ("_position" Some)
###       ("\<^const>Groups.plus_class.plus" ("_position" x) ("_position" y)))
###     ("_position" None)))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
Found termination order: "size <*mlex*> {}"
Found termination order: "size <*mlex*> {}"
### theory "Draft.Sep_Eq"
### 0.616s elapsed time, 1.968s cpu time, 0.644s GC time
Found termination order: "size <*mlex*> {}"
Found termination order: "size <*mlex*> {}"
Found termination order: "size <*mlex*> {}"
Found termination order: "(%p. size (fst p)) <*mlex*> {}"
Found termination order: "size <*mlex*> {}"
Found termination order: "(%p. size (snd p)) <*mlex*> {}"
Found termination order: "size <*mlex*> {}"
### theory "HOL-Library.Tree"
### 1.932s elapsed time, 5.368s cpu time, 1.107s GC time
Loading theory "Draft.Templates" (required by "Draft.Sep_EqTemplates" via "Draft.ExtrEqs")
datatype template_term
=
     t_empty
   | template_app of template_term * template_term
   | template_hole of int
   | template_var of int
datatype sign
= equals | greater_equals | greater_than | less_equals | less_than
datatype template
=
     template_bimplication of template * template
   | template_dunno
   | template_equation of template_term * template_term
   | template_implication of template list * template
   | template_inequation of sign * template_term * template_term
   | template_negation of template
   | template_predicate of template_term
constructor t_empty: template_term
constructor template_app: template_term * template_term -> template_term
constructor template_hole: int -> template_term
constructor template_var: int -> template_term
constructor equals: sign
constructor greater_equals: sign
constructor greater_than: sign
constructor less_equals: sign
constructor less_than: sign
constructor template_bimplication: template * template -> template
constructor template_dunno: template
constructor template_equation: template_term * template_term -> template
constructor template_implication: template list * template -> template
constructor template_inequation:
   sign * template_term * template_term -> template
constructor template_negation: template -> template
constructor template_predicate: template_term -> template
val vfs = fn: term -> (indexname * typ) list * (string * typ) list
val indexOf = fn: ''a list -> ''a -> int -> int
val has_eq = fn: term -> bool
val term2template = fn:
   (indexname * typ) list -> (string * typ) list -> term -> template_term
val lemma2predicate = fn: term -> term -> template
val makeTemplatewithContext = fn: term -> term -> template
val lemma2template = fn: term -> template
val thm2template = fn: thm -> template
val tterm2string = fn: template_term -> string
val template2string = fn: template -> string
val t = "height ?t <= size ?t": thm
val th =
   Const ("HOL.Trueprop", "bool => prop") $
     (Const ("Orderings.ord_class.less_eq", "nat => nat => bool") $
       (Const ("Tree.height_class.height", "?'a tree => nat") $
         Var (("t", 0), "?'a tree")) $
       (Const ("Nat.size_class.size", "?'a tree => nat") $
         Var (("t", 0), "?'a tree"))):
   term
### theory "Draft.Templates"
### 0.050s elapsed time, 0.065s cpu time, 0.000s GC time
Loading theory "Draft.ExtrEqs" (required by "Draft.Sep_EqTemplates")
val eqpattern =
   Pattern
    (
       Const ("HOL.Trueprop", "bool => prop") $
         (Const ("HOL.eq", "?'a => ?'a => bool") $
           Var (("_dummy_", 1), "?'a") $ Var (("_dummy_", 2), "?'a"))
       ):
   term Find_Theorems.criterion
val badeqpattern = Pattern (Const ("Pure.eq", "?'a => ?'a => prop")):
   term Find_Theorems.criterion
val undefpattern =
   Pattern
    (
       Const ("HOL.Trueprop", "bool => prop") $
         (Const ("HOL.eq", "?'a => ?'a => bool") $
           Var (("_dummy_", 1), "?'a") $ Const ("HOL.undefined", "?'a"))
       ):
   term Find_Theorems.criterion
val thmpattern =
   Pattern
    (Const ("HOL.Trueprop", "bool => prop") $ Var (("_dummy_", 1), "bool")):
   term Find_Theorems.criterion
val badnames =
   ["*nitpick*", "*Nitpick*", "*full_exhaustive*", "*_def*", "Enum.finite*",
    "*Quickcheck*", "ATP*", "*Nunchaku*", "*Code*", "*BNF*", "*SMT*",
    "*.*.*"]:
   string list
val unwanted_names =
   [(false, Name "*nitpick*"), (false, Name "*Nitpick*"),
    (false, Name "*full_exhaustive*"), (false, Name "*_def*"),
    (false, Name "Enum.finite*"), (false, Name "*Quickcheck*"),
    (false, Name "ATP*"), (false, Name "*Nunchaku*"),
    (false, Name "*Code*"), (false, Name "*BNF*"), (false, Name "*SMT*"),
    (false, Name "*.*.*")]:
   (bool * term Find_Theorems.criterion) list
val has_vars = fn: term -> bool
val get_all_eqs = fn: string -> Proof.context -> (string * thm) list
val get_all_thms = fn: string -> Proof.context -> (string * thm) list
val get_noneq_thms = fn: string -> Proof.context -> (string * thm) list
val template_eqs = fn:
   string -> Proof.context -> (string * thm * template) list
val template_thms = fn:
   string -> Proof.context -> (string * thm * template) list
### theory "Draft.ExtrEqs"
### 0.479s elapsed time, 0.526s cpu time, 0.058s GC time
Loading theory "Draft.Sep_EqTemplates"
val templateLemmas =
   [("Sep_Eq.sep_disj_zero'", "?x ## (0::?'a)",
     template_predicate
      (
         template_app
          (template_app (template_hole 1, template_var 0), template_hole 0)
         )),
    ("Sep_Eq.sep_add_zero'", "sep_add' ?x (0::?'a) = ?x",
     template_equation
      (template_app
        (template_app (template_hole 1, template_var 0), template_hole 0),
       template_var 0)),
    ("Sep_Eq.add2_zero", "Sep_Eq.add2 ?x (0::?'a) = Some ?x",
     template_equation
      (template_app
        (template_app (template_hole 2, template_var 0), template_hole 1),
       template_app (template_hole 0, template_var 0))),
    ("Sep_Eq.add2_comm", "Sep_Eq.add2 ?x ?y = Sep_Eq.add2 ?y ?x",
     template_equation
      (template_app
        (template_app (template_hole 0, template_var 1), template_var 0),
       template_app
        (template_app (template_hole 0, template_var 0), template_var 1))),
    ("Sep_Eq.sep_disj_commuteI'", "?x ## ?y ==> ?y ## ?x",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 0, template_var 1),
              template_var 0)
            )],
       template_predicate
        (
           template_app
            (template_app (template_hole 0, template_var 0), template_var 1)
           ))),
    ("Sep_Eq.sep_add_commute'",
     "?x ## ?y ==> sep_add' ?x ?y = sep_add' ?y ?x",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 2, template_var 1),
              template_var 0)
            )],
       template_equation
        (template_app
          (template_app (template_hole 0, template_var 1), template_var 0),
         template_app
          (template_app (template_hole 0, template_var 0),
           template_var 1)))),
    ("Sep_Eq.add2_assoc",
     "total_partial.add2 ?a (total_partial.add2 ?b ?c) =
      total_partial.add2 (total_partial.add2 ?a ?b) ?c",
     template_equation
      (template_app
        (template_app
          (template_app (template_hole 1, template_hole 0), template_var 2),
         template_app
          (template_app
            (template_app (template_hole 1, template_hole 0),
             template_var 1),
           template_var 0)),
       template_app
        (template_app
          (template_app (template_hole 1, template_hole 0),
           template_app
            (template_app
              (template_app (template_hole 1, template_hole 0),
               template_var 2),
             template_var 1)),
         template_var 0))),
    ("Sep_Eq.sep_disj_addD1'",
     "[| ?x ## sep_add' ?y ?z; ?y ## ?z |] ==> ?x ## ?y",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 1, template_var 2),
              template_app
               (template_app (template_hole 0, template_var 1),
                template_var 0))
            ),
        template_predicate
         (
            template_app
             (template_app (template_hole 1, template_var 1),
              template_var 0)
            )],
       template_predicate
        (
           template_app
            (template_app (template_hole 1, template_var 2), template_var 1)
           ))),
    ("Sep_Eq.sep_disj_addI1'",
     "[| ?x ## sep_add' ?y ?z; ?y ## ?z |] ==> sep_add' ?x ?y ## ?z",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 1, template_var 2),
              template_app
               (template_app (template_hole 0, template_var 1),
                template_var 0))
            ),
        template_predicate
         (
            template_app
             (template_app (template_hole 1, template_var 1),
              template_var 0)
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 1,
               template_app
                (template_app (template_hole 0, template_var 2),
                 template_var 1)),
             template_var 0)
           ))),
    ("Sep_Eq.sep_add_assoc'",
     "[| ?x ## ?y; ?y ## ?z; ?x ## ?z |]
      ==> sep_add' (sep_add' ?x ?y) ?z = sep_add' ?x (sep_add' ?y ?z)",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 2, template_var 2),
              template_var 1)
            ),
        template_predicate
         (
            template_app
             (template_app (template_hole 2, template_var 1),
              template_var 0)
            ),
        template_predicate
         (
            template_app
             (template_app (template_hole 2, template_var 2),
              template_var 0)
            )],
       template_equation
        (template_app
          (template_app
            (template_hole 0,
             template_app
              (template_app (template_hole 0, template_var 2),
               template_var 1)),
           template_var 0),
         template_app
          (template_app (template_hole 0, template_var 2),
           template_app
            (template_app (template_hole 0, template_var 1),
             template_var 0)))))]:
   (string * thm * template) list
### theory "Draft.Sep_EqTemplates"
### 0.347s elapsed time, 0.510s cpu time, 0.066s GC time
val it = (): unit
