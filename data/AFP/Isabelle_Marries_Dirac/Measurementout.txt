Loading theory "Draft.Basics" (required by "Draft.MeasurementTemplates" via "Draft.Measurement" via "Draft.Quantum")
Loading theory "Draft.Templates" (required by "Draft.MeasurementTemplates" via "Draft.ExtrEqs")
datatype template_term
=
     t_empty
   | template_app of template_term * template_term
   | template_hole of int
   | template_var of int
datatype sign
= equals | greater_equals | greater_than | less_equals | less_than
datatype template
=
     template_bimplication of template * template
   | template_dunno
   | template_equation of template_term * template_term
   | template_implication of template list * template
   | template_inequation of sign * template_term * template_term
   | template_negation of template
   | template_predicate of template_term
constructor t_empty: template_term
constructor template_app: template_term * template_term -> template_term
constructor template_hole: int -> template_term
constructor template_var: int -> template_term
constructor equals: sign
constructor greater_equals: sign
constructor greater_than: sign
constructor less_equals: sign
constructor less_than: sign
constructor template_bimplication: template * template -> template
constructor template_dunno: template
constructor template_equation: template_term * template_term -> template
constructor template_implication: template list * template -> template
constructor template_inequation:
   sign * template_term * template_term -> template
constructor template_negation: template -> template
constructor template_predicate: template_term -> template
val vfs = fn: term -> (indexname * typ) list * (string * typ) list
val indexOf = fn: ''a list -> ''a -> int -> int
val has_eq = fn: term -> bool
val term2template = fn:
   (indexname * typ) list -> (string * typ) list -> term -> template_term
val lemma2predicate = fn: term -> term -> template
val makeTemplatewithContext = fn: term -> term -> template
val lemma2template = fn: term -> template
val thm2template = fn: thm -> template
val tterm2string = fn: template_term -> string
val template2string = fn: template -> string
val t = "height ?t <= size ?t": thm
val th =
   Const ("HOL.Trueprop", "bool => prop") $
     (Const ("Orderings.ord_class.less_eq", "nat => nat => bool") $
       (Const ("Tree.height_class.height", "?'a tree => nat") $
         Var (("t", 0), "?'a tree")) $
       (Const ("Nat.size_class.size", "?'a tree => nat") $
         Var (("t", 0), "?'a tree"))):
   term
### theory "Draft.Templates"
### 0.065s elapsed time, 0.175s cpu time, 0.000s GC time
Loading theory "Draft.ExtrEqs" (required by "Draft.MeasurementTemplates")
### theory "Draft.Basics"
### 0.169s elapsed time, 0.384s cpu time, 0.048s GC time
Loading theory "Draft.Binary_Nat" (required by "Draft.MeasurementTemplates" via "Draft.Measurement" via "Draft.Quantum")
consts
  bin_rep_aux :: "nat => nat => nat list"
### theory "Draft.Binary_Nat"
### 0.090s elapsed time, 0.178s cpu time, 0.000s GC time
Loading theory "Draft.Quantum" (required by "Draft.MeasurementTemplates" via "Draft.Measurement")
val eqpattern =
   Pattern
    (
       Const ("HOL.Trueprop", "bool => prop") $
         (Const ("HOL.eq", "?'a => ?'a => bool") $
           Var (("_dummy_", 1), "?'a") $ Var (("_dummy_", 2), "?'a"))
       ):
   term Find_Theorems.criterion
val badeqpattern = Pattern (Const ("Pure.eq", "?'a => ?'a => prop")):
   term Find_Theorems.criterion
val undefpattern =
   Pattern
    (
       Const ("HOL.Trueprop", "bool => prop") $
         (Const ("HOL.eq", "?'a => ?'a => bool") $
           Var (("_dummy_", 1), "?'a") $ Const ("HOL.undefined", "?'a"))
       ):
   term Find_Theorems.criterion
val thmpattern =
   Pattern
    (Const ("HOL.Trueprop", "bool => prop") $ Var (("_dummy_", 1), "bool")):
   term Find_Theorems.criterion
val badnames =
   ["*nitpick*", "*Nitpick*", "*full_exhaustive*", "*_def*", "Enum.finite*",
    "*Quickcheck*", "ATP*", "*Nunchaku*", "*Code*", "*BNF*", "*SMT*",
    "*.*.*"]:
   string list
val unwanted_names =
   [(false, Name "*nitpick*"), (false, Name "*Nitpick*"),
    (false, Name "*full_exhaustive*"), (false, Name "*_def*"),
    (false, Name "Enum.finite*"), (false, Name "*Quickcheck*"),
    (false, Name "ATP*"), (false, Name "*Nunchaku*"),
    (false, Name "*Code*"), (false, Name "*BNF*"), (false, Name "*SMT*"),
    (false, Name "*.*.*")]:
   (bool * term Find_Theorems.criterion) list
val has_vars = fn: term -> bool
val get_all_eqs = fn: string -> Proof.context -> (string * thm) list
val get_all_thms = fn: string -> Proof.context -> (string * thm) list
val get_noneq_thms = fn: string -> Proof.context -> (string * thm) list
val template_eqs = fn:
   string -> Proof.context -> (string * thm * template) list
val template_thms = fn:
   string -> Proof.context -> (string * thm * template) list
### theory "Draft.ExtrEqs"
### 0.581s elapsed time, 1.186s cpu time, 0.149s GC time
locale state
  fixes n :: "nat"
    and v :: "complex mat"
  assumes "state n v"
locale gate
  fixes n :: "nat"
    and A :: "complex mat"
  assumes "gate n A"
### Ambiguous input (line 282 of "$AFP/Isabelle_Marries_Dirac/Quantum.thy") produces 2 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("\<^const>Matrix.transpose_mat"
###       ("\<^const>Groups.times_class.times" ("_position" M) ("_position" N)))
###     ("\<^const>Groups.times_class.times"
###       ("\<^const>Matrix.transpose_mat" ("_position" N))
###       ("\<^const>Matrix.transpose_mat" ("_position" M)))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Groups.times_class.times"
###     ("\<^const>Matrix.transpose_mat"
###       ("\<^const>HOL.eq"
###         ("\<^const>Matrix.transpose_mat"
###           ("\<^const>Groups.times_class.times" ("_position" M)
###             ("_position" N)))
###         ("_position" N)))
###     ("\<^const>Matrix.transpose_mat" ("_position" M))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 338 of "$AFP/Isabelle_Marries_Dirac/Quantum.thy") produces 2 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("\<^const>Quantum.dagger"
###       ("\<^const>Groups.times_class.times" ("_position" M) ("_position" N)))
###     ("\<^const>Groups.times_class.times"
###       ("\<^const>Quantum.dagger" ("_position" N))
###       ("\<^const>Quantum.dagger" ("_position" M)))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Groups.times_class.times"
###     ("\<^const>Quantum.dagger"
###       ("\<^const>HOL.eq"
###         ("\<^const>Quantum.dagger"
###           ("\<^const>Groups.times_class.times" ("_position" M)
###             ("_position" N)))
###         ("_position" N)))
###     ("\<^const>Quantum.dagger" ("_position" M))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 1313 of "$AFP/Isabelle_Marries_Dirac/Quantum.thy") produces 2 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Quantum.bip"
###     ("\<^const>HOL.eq"
###       ("\<^const>Quantum.bip" ("_position" i)
###         ("_applC" ("_position" Suc) ("_position" n)) ("_position" j))
###       ("\<^const>Rings.modulo_class.modulo" ("_position" i)
###         ("\<^const>Power.power_class.power"
###           ("_Numeral" ("_constify" ("_position" 2))) ("_position" n))))
###     ("_position" n)
###     ("\<^const>Rings.modulo_class.modulo" ("_position" j)
###       ("\<^const>Power.power_class.power"
###         ("_Numeral" ("_constify" ("_position" 2))) ("_position" n)))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("\<^const>Quantum.bip" ("_position" i)
###       ("_applC" ("_position" Suc) ("_position" n)) ("_position" j))
###     ("\<^const>Quantum.bip"
###       ("\<^const>Rings.modulo_class.modulo" ("_position" i)
###         ("\<^const>Power.power_class.power"
###           ("_Numeral" ("_constify" ("_position" 2))) ("_position" n)))
###       ("_position" n)
###       ("\<^const>Rings.modulo_class.modulo" ("_position" j)
###         ("\<^const>Power.power_class.power"
###           ("_Numeral" ("_constify" ("_position" 2))) ("_position" n))))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### theory "Draft.Quantum"
### 1.061s elapsed time, 1.521s cpu time, 0.199s GC time
Loading theory "Draft.Measurement" (required by "Draft.MeasurementTemplates")
consts
  iter_post_meas0 :: "nat => nat => complex mat => complex mat"
### theory "Draft.Measurement"
### 0.269s elapsed time, 0.332s cpu time, 0.101s GC time
Loading theory "Draft.MeasurementTemplates"
val templateLemmas =
   [("Measurement.prob0_geq_zero", "0 <= prob0 ?n ?v ?i",
     template_inequation
      (less_equals, template_hole 1,
       template_app
        (template_app
          (template_app (template_hole 0, template_var 2), template_var 1),
         template_var 0))),
    ("Measurement.prob1_geq_zero", "0 <= prob1 ?n ?v ?i",
     template_inequation
      (less_equals, template_hole 1,
       template_app
        (template_app
          (template_app (template_hole 0, template_var 2), template_var 1),
         template_var 0))),
    ("Measurement.prob0_leq_one", "state ?n ?v ==> prob0 ?n ?v ?i <= 1",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 3, template_var 2),
              template_var 1)
            )],
       template_inequation
        (less_equals,
         template_app
          (template_app
            (template_app (template_hole 1, template_var 2),
             template_var 1),
           template_var 0),
         template_hole 0))),
    ("Measurement.prob1_leq_one", "state ?n ?v ==> prob1 ?n ?v ?i <= 1",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 3, template_var 2),
              template_var 1)
            )],
       template_inequation
        (less_equals,
         template_app
          (template_app
            (template_app (template_hole 1, template_var 2),
             template_var 1),
           template_var 0),
         template_hole 0))),
    ("Measurement.prob_sum_is_one",
     "state ?n ?v ==> prob1 ?n ?v ?i + prob0 ?n ?v ?i = 1",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 5, template_var 2),
              template_var 1)
            )],
       template_equation
        (template_app
          (template_app
            (template_hole 3,
             template_app
              (template_app
                (template_app (template_hole 2, template_var 2),
                 template_var 1),
               template_var 0)),
           template_app
            (template_app
              (template_app (template_hole 1, template_var 2),
               template_var 1),
             template_var 0)),
         template_hole 0))),
    ("Measurement.prob0_is_prob",
     "state ?n ?v ==> 0 <= prob0 ?n ?v ?i & prob0 ?n ?v ?i <= 1",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 5, template_var 2),
              template_var 1)
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 4,
               template_app
                (template_app (template_hole 3, template_hole 2),
                 template_app
                  (template_app
                    (template_app (template_hole 1, template_var 2),
                     template_var 1),
                   template_var 0))),
             template_app
              (template_app
                (template_hole 3,
                 template_app
                  (template_app
                    (template_app (template_hole 1, template_var 2),
                     template_var 1),
                   template_var 0)),
               template_hole 0))
           ))),
    ("Measurement.prob1_is_prob",
     "state ?n ?v ==> 0 <= prob1 ?n ?v ?i & prob1 ?n ?v ?i <= 1",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 5, template_var 2),
              template_var 1)
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 4,
               template_app
                (template_app (template_hole 3, template_hole 2),
                 template_app
                  (template_app
                    (template_app (template_hole 1, template_var 2),
                     template_var 1),
                   template_var 0))),
             template_app
              (template_app
                (template_hole 3,
                 template_app
                  (template_app
                    (template_app (template_hole 1, template_var 2),
                     template_var 1),
                   template_var 0)),
               template_hole 0))
           ))),
    ("Measurement.post_meas0_is_state",
     "[| state ?n ?v; prob0 ?n ?v ?i ~= 0 |]
      ==> state ?n (post_meas0 ?n ?v ?i)",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 5, template_var 2),
              template_var 1)
            ),
        template_negation
         (
            template_equation
             (template_app
               (template_app
                 (template_app (template_hole 2, template_var 2),
                  template_var 1),
                template_var 0),
              template_hole 1)
            )],
       template_predicate
        (
           template_app
            (template_app (template_hole 5, template_var 2),
             template_app
              (template_app
                (template_app (template_hole 0, template_var 2),
                 template_var 1),
               template_var 0))
           ))),
    ("Measurement.post_meas_1_is_state",
     "[| state ?n ?v; prob1 ?n ?v ?i ~= 0 |]
      ==> state ?n (post_meas1 ?n ?v ?i)",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 5, template_var 2),
              template_var 1)
            ),
        template_negation
         (
            template_equation
             (template_app
               (template_app
                 (template_app (template_hole 2, template_var 2),
                  template_var 1),
                template_var 0),
              template_hole 1)
            )],
       template_predicate
        (
           template_app
            (template_app (template_hole 5, template_var 2),
             template_app
              (template_app
                (template_app (template_hole 0, template_var 2),
                 template_var 1),
               template_var 0))
           ))),
    ("Measurement.select_index_suc_even",
     "[| ?k < 2 ^ ?n; select_index ?n ?i ?k |]
      ==> select_index (Suc ?n) ?i (2 * ?k)",
     template_implication
      ([template_inequation
         (less_than, template_var 2,
          template_app
           (template_app
             (template_hole 6,
              template_app
               (template_hole 5,
                template_app (template_hole 4, template_hole 3))),
            template_var 1)),
        template_predicate
         (
            template_app
             (template_app
               (template_app (template_hole 2, template_var 1),
                template_var 0),
              template_var 2)
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_app
                (template_hole 2,
                 template_app (template_hole 1, template_var 1)),
               template_var 0),
             template_app
              (template_app
                (template_hole 0,
                 template_app
                  (template_hole 5,
                   template_app (template_hole 4, template_hole 3))),
               template_var 2))
           ))),
    ("Measurement.prob0_fst_qubits_eq",
     "prob0_fst_qubits ?n ?v =
      (cmod (?v $$ (0, 0)))\<^sup>2 + (cmod (?v $$ (1, 0)))\<^sup>2",
     template_equation
      (template_app
        (template_app (template_hole 10, template_var 1), template_var 0),
       template_app
        (template_app
          (template_hole 9,
           template_app
            (template_app
              (template_hole 8,
               template_app
                (template_hole 7,
                 template_app
                  (template_app (template_hole 6, template_var 0),
                   template_app
                    (template_app (template_hole 5, template_hole 4),
                     template_hole 4)))),
             template_app
              (template_hole 3,
               template_app (template_hole 2, template_hole 1)))),
         template_app
          (template_app
            (template_hole 8,
             template_app
              (template_hole 7,
               template_app
                (template_app (template_hole 6, template_var 0),
                 template_app
                  (template_app (template_hole 5, template_hole 0),
                   template_hole 4)))),
           template_app
            (template_hole 3,
             template_app (template_hole 2, template_hole 1)))))),
    ("Measurement.select_index_suc_odd",
     "[| ?k <= 2 ^ ?n - 1; select_index ?n ?i ?k |]
      ==> select_index (Suc ?n) ?i (2 * ?k + 1)",
     template_implication
      ([template_inequation
         (less_equals, template_var 2,
          template_app
           (template_app
             (template_hole 9,
              template_app
               (template_app
                 (template_hole 8,
                  template_app
                   (template_hole 7,
                    template_app (template_hole 6, template_hole 5))),
                template_var 1)),
            template_hole 4)),
        template_predicate
         (
            template_app
             (template_app
               (template_app (template_hole 3, template_var 1),
                template_var 0),
              template_var 2)
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_app
                (template_hole 3,
                 template_app (template_hole 2, template_var 1)),
               template_var 0),
             template_app
              (template_app
                (template_hole 1,
                 template_app
                  (template_app
                    (template_hole 0,
                     template_app
                      (template_hole 7,
                       template_app (template_hole 6, template_hole 5))),
                   template_var 2)),
               template_hole 4))
           ))),
    ("Measurement.prob0_bell_snd",
     "?v = |\<beta>\<^sub>0\<^sub>0\<rangle> |
      ?v = |\<beta>\<^sub>0\<^sub>1\<rangle> |
      ?v = |\<beta>\<^sub>1\<^sub>0\<rangle> |
      ?v = |\<beta>\<^sub>1\<^sub>1\<rangle> ==>
      prob0 2 ?v 1 = 1 / 2",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_hole 14,
                template_app
                 (template_app (template_hole 13, template_var 0),
                  template_hole 12)),
              template_app
               (template_app
                 (template_hole 14,
                  template_app
                   (template_app (template_hole 13, template_var 0),
                    template_hole 11)),
                template_app
                 (template_app
                   (template_hole 14,
                    template_app
                     (template_app (template_hole 13, template_var 0),
                      template_hole 10)),
                  template_app
                   (template_app (template_hole 13, template_var 0),
                    template_hole 9))))
            )],
       template_equation
        (template_app
          (template_app
            (template_app
              (template_hole 7,
               template_app
                (template_hole 6,
                 template_app (template_hole 5, template_hole 4))),
             template_var 0),
           template_hole 3),
         template_app
          (template_app (template_hole 2, template_hole 1),
           template_app
            (template_hole 0,
             template_app (template_hole 5, template_hole 4)))))),
    ("Measurement.prob0_bell_fst",
     "?v = |\<beta>\<^sub>0\<^sub>0\<rangle> |
      ?v = |\<beta>\<^sub>0\<^sub>1\<rangle> |
      ?v = |\<beta>\<^sub>1\<^sub>0\<rangle> |
      ?v = |\<beta>\<^sub>1\<^sub>1\<rangle> ==>
      prob0 2 ?v 0 = 1 / 2",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_hole 14,
                template_app
                 (template_app (template_hole 13, template_var 0),
                  template_hole 12)),
              template_app
               (template_app
                 (template_hole 14,
                  template_app
                   (template_app (template_hole 13, template_var 0),
                    template_hole 11)),
                template_app
                 (template_app
                   (template_hole 14,
                    template_app
                     (template_app (template_hole 13, template_var 0),
                      template_hole 10)),
                  template_app
                   (template_app (template_hole 13, template_var 0),
                    template_hole 9))))
            )],
       template_equation
        (template_app
          (template_app
            (template_app
              (template_hole 7,
               template_app
                (template_hole 6,
                 template_app (template_hole 5, template_hole 4))),
             template_var 0),
           template_hole 3),
         template_app
          (template_app (template_hole 2, template_hole 1),
           template_app
            (template_hole 0,
             template_app (template_hole 5, template_hole 4)))))),
    ("Measurement.prob_1_bell_snd",
     "?v = |\<beta>\<^sub>0\<^sub>0\<rangle> |
      ?v = |\<beta>\<^sub>0\<^sub>1\<rangle> |
      ?v = |\<beta>\<^sub>1\<^sub>0\<rangle> |
      ?v = |\<beta>\<^sub>1\<^sub>1\<rangle> ==>
      prob1 2 ?v 1 = 1 / 2",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_hole 14,
                template_app
                 (template_app (template_hole 13, template_var 0),
                  template_hole 12)),
              template_app
               (template_app
                 (template_hole 14,
                  template_app
                   (template_app (template_hole 13, template_var 0),
                    template_hole 11)),
                template_app
                 (template_app
                   (template_hole 14,
                    template_app
                     (template_app (template_hole 13, template_var 0),
                      template_hole 10)),
                  template_app
                   (template_app (template_hole 13, template_var 0),
                    template_hole 9))))
            )],
       template_equation
        (template_app
          (template_app
            (template_app
              (template_hole 7,
               template_app
                (template_hole 6,
                 template_app (template_hole 5, template_hole 4))),
             template_var 0),
           template_hole 3),
         template_app
          (template_app (template_hole 2, template_hole 1),
           template_app
            (template_hole 0,
             template_app (template_hole 5, template_hole 4)))))),
    ("Measurement.prob_1_bell_fst",
     "?v = |\<beta>\<^sub>0\<^sub>0\<rangle> |
      ?v = |\<beta>\<^sub>0\<^sub>1\<rangle> |
      ?v = |\<beta>\<^sub>1\<^sub>0\<rangle> |
      ?v = |\<beta>\<^sub>1\<^sub>1\<rangle> ==>
      prob1 2 ?v 0 = 1 / 2",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_hole 14,
                template_app
                 (template_app (template_hole 13, template_var 0),
                  template_hole 12)),
              template_app
               (template_app
                 (template_hole 14,
                  template_app
                   (template_app (template_hole 13, template_var 0),
                    template_hole 11)),
                template_app
                 (template_app
                   (template_hole 14,
                    template_app
                     (template_app (template_hole 13, template_var 0),
                      template_hole 10)),
                  template_app
                   (template_app (template_hole 13, template_var 0),
                    template_hole 9))))
            )],
       template_equation
        (template_app
          (template_app
            (template_app
              (template_hole 7,
               template_app
                (template_hole 6,
                 template_app (template_hole 5, template_hole 4))),
             template_var 0),
           template_hole 3),
         template_app
          (template_app (template_hole 2, template_hole 1),
           template_app
            (template_hole 0,
             template_app (template_hole 5, template_hole 4)))))),
    ("Measurement.select_index_div_2",
     "[| ?i < 2 ^ (?n + 1); ?j < ?n |]
      ==> select_index ?n ?j (?i div 2) = select_index (?n + 1) ?j ?i",
     template_implication
      ([template_inequation
         (less_than, template_var 2,
          template_app
           (template_app
             (template_hole 8,
              template_app
               (template_hole 7,
                template_app (template_hole 6, template_hole 5))),
            template_app
             (template_app (template_hole 4, template_var 1),
              template_hole 3))),
        template_inequation (less_than, template_var 0, template_var 1)],
       template_equation
        (template_app
          (template_app
            (template_app (template_hole 1, template_var 1),
             template_var 0),
           template_app
            (template_app (template_hole 0, template_var 2),
             template_app
              (template_hole 7,
               template_app (template_hole 6, template_hole 5)))),
         template_app
          (template_app
            (template_app
              (template_hole 1,
               template_app
                (template_app (template_hole 4, template_var 1),
                 template_hole 3)),
             template_var 0),
           template_var 2)))),
    ("Measurement.select_index_with_1",
     "1 <= ?n ==>
      ALL k<2 ^ (?n + 1). 2 <= k --> (EX i<?n. select_index (?n + 1) i k)",
     template_implication
      ([template_inequation
         (less_equals, template_hole 11, template_var 0)],
       template_predicate (template_app (template_hole 10, t_empty)))),
    ("Measurement.prob0_fst_qubits_index",
     "{k |k.
       k < 2 ^ (?n + 1) & (ALL i:{0..<?n}. ~ select_index (?n + 1) i k)} =
      {0, 1}",
     template_equation
      (template_app (template_hole 17, t_empty),
       template_app
        (template_app (template_hole 1, template_hole 4),
         template_app
          (template_app (template_hole 1, template_hole 7),
           template_hole 0)))),
    ("Measurement.select_index_inter",
     "{k |k. select_index ?n ?i k} Int
      {k |k. k < 2 ^ ?n & ~ select_index ?n ?i k} =
      {}",
     template_equation
      (template_app
        (template_app
          (template_hole 12, template_app (template_hole 11, t_empty)),
         template_app (template_hole 11, t_empty)),
       template_hole 0)),
    ("Measurement.select_index_union",
     "{k |k. select_index ?n ?i k} Un
      {k |k. k < 2 ^ ?n & ~ select_index ?n ?i k} =
      {0..<2 ^ ?n}",
     template_equation
      (template_app
        (template_app
          (template_hole 13, template_app (template_hole 12, t_empty)),
         template_app (template_hole 12, t_empty)),
       template_app
        (template_app (template_hole 1, template_hole 0),
         template_app
          (template_app
            (template_hole 6,
             template_app
              (template_hole 5,
               template_app (template_hole 4, template_hole 3))),
           template_var 1)))),
    ("Measurement.outcomes_sum",
     "sum ?f {k |k. select_index ?n ?i k} +
      sum ?f {k |k. k < 2 ^ ?n & ~ select_index ?n ?i k} =
      sum ?f {0..<2 ^ ?n}",
     template_equation
      (template_app
        (template_app
          (template_hole 14,
           template_app
            (template_app (template_hole 13, t_empty),
             template_app (template_hole 12, t_empty))),
         template_app
          (template_app (template_hole 13, t_empty),
           template_app (template_hole 12, t_empty))),
       template_app
        (template_app (template_hole 13, t_empty),
         template_app
          (template_app (template_hole 1, template_hole 0),
           template_app
            (template_app
              (template_hole 6,
               template_app
                (template_hole 5,
                 template_app (template_hole 4, template_hole 3))),
             template_var 1))))),
    ("Measurement.aux_range",
     "[| ?k < 2 ^ (Suc ?n + 1); 2 <= ?k |]
      ==> ?k = 2 |
          ?k = 3 |
          (EX l>=2. l <= 2 ^ (?n + 1) - 1 & (?k = 2 * l | ?k = 2 * l + 1))",
     template_implication
      ([template_inequation
         (less_than, template_var 1,
          template_app
           (template_app
             (template_hole 14,
              template_app
               (template_hole 13,
                template_app (template_hole 12, template_hole 11))),
            template_app
             (template_app
               (template_hole 10,
                template_app (template_hole 9, template_var 0)),
              template_hole 8))),
        template_inequation
         (less_equals,
          template_app
           (template_hole 13,
            template_app (template_hole 12, template_hole 11)),
          template_var 1)],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 6,
               template_app
                (template_app (template_hole 5, template_var 1),
                 template_app
                  (template_hole 13,
                   template_app (template_hole 12, template_hole 11)))),
             template_app
              (template_app
                (template_hole 6,
                 template_app
                  (template_app (template_hole 5, template_var 1),
                   template_app
                    (template_hole 13,
                     template_app (template_hole 4, template_hole 11)))),
               template_app (template_hole 3, t_empty)))
           )))]:
   (string * thm * template) list
### theory "Draft.MeasurementTemplates"
### 0.643s elapsed time, 0.828s cpu time, 0.127s GC time
val it = (): unit
