Loading theory "Draft.Basics" (required by "Draft.TensorTemplates" via "Draft.Tensor" via "Draft.Complex_Vectors" via "Draft.Quantum")
Loading theory "Draft.Templates" (required by "Draft.TensorTemplates" via "Draft.ExtrEqs")
datatype template_term
=
     t_empty
   | template_app of template_term * template_term
   | template_hole of int
   | template_var of int
datatype sign
= equals | greater_equals | greater_than | less_equals | less_than
datatype template
=
     template_bimplication of template * template
   | template_dunno
   | template_equation of template_term * template_term
   | template_implication of template list * template
   | template_inequation of sign * template_term * template_term
   | template_negation of template
   | template_predicate of template_term
constructor t_empty: template_term
constructor template_app: template_term * template_term -> template_term
constructor template_hole: int -> template_term
constructor template_var: int -> template_term
constructor equals: sign
constructor greater_equals: sign
constructor greater_than: sign
constructor less_equals: sign
constructor less_than: sign
constructor template_bimplication: template * template -> template
constructor template_dunno: template
constructor template_equation: template_term * template_term -> template
constructor template_implication: template list * template -> template
constructor template_inequation:
   sign * template_term * template_term -> template
constructor template_negation: template -> template
constructor template_predicate: template_term -> template
val vfs = fn: term -> (indexname * typ) list * (string * typ) list
val indexOf = fn: ''a list -> ''a -> int -> int
val has_eq = fn: term -> bool
val term2template = fn:
   (indexname * typ) list -> (string * typ) list -> term -> template_term
val lemma2predicate = fn: term -> term -> template
val makeTemplatewithContext = fn: term -> term -> template
val lemma2template = fn: term -> template
val thm2template = fn: thm -> template
val tterm2string = fn: template_term -> string
val template2string = fn: template -> string
val t = "height ?t <= size ?t": thm
val th =
   Const ("HOL.Trueprop", "bool => prop") $
     (Const ("Orderings.ord_class.less_eq", "nat => nat => bool") $
       (Const ("Tree.height_class.height", "?'a tree => nat") $
         Var (("t", 0), "?'a tree")) $
       (Const ("Nat.size_class.size", "?'a tree => nat") $
         Var (("t", 0), "?'a tree"))):
   term
### theory "Draft.Templates"
### 0.076s elapsed time, 0.197s cpu time, 0.000s GC time
Loading theory "Draft.ExtrEqs" (required by "Draft.TensorTemplates")
### theory "Draft.Basics"
### 0.157s elapsed time, 0.355s cpu time, 0.043s GC time
Loading theory "Draft.Binary_Nat" (required by "Draft.TensorTemplates" via "Draft.Tensor" via "Draft.Complex_Vectors" via "Draft.Quantum")
consts
  bin_rep_aux :: "nat => nat => nat list"
### theory "Draft.Binary_Nat"
### 0.087s elapsed time, 0.171s cpu time, 0.000s GC time
Loading theory "Draft.Quantum" (required by "Draft.TensorTemplates" via "Draft.Tensor" via "Draft.Complex_Vectors")
val eqpattern =
   Pattern
    (
       Const ("HOL.Trueprop", "bool => prop") $
         (Const ("HOL.eq", "?'a => ?'a => bool") $
           Var (("_dummy_", 1), "?'a") $ Var (("_dummy_", 2), "?'a"))
       ):
   term Find_Theorems.criterion
val badeqpattern = Pattern (Const ("Pure.eq", "?'a => ?'a => prop")):
   term Find_Theorems.criterion
val undefpattern =
   Pattern
    (
       Const ("HOL.Trueprop", "bool => prop") $
         (Const ("HOL.eq", "?'a => ?'a => bool") $
           Var (("_dummy_", 1), "?'a") $ Const ("HOL.undefined", "?'a"))
       ):
   term Find_Theorems.criterion
val thmpattern =
   Pattern
    (Const ("HOL.Trueprop", "bool => prop") $ Var (("_dummy_", 1), "bool")):
   term Find_Theorems.criterion
val badnames =
   ["*nitpick*", "*Nitpick*", "*full_exhaustive*", "*_def*", "Enum.finite*",
    "*Quickcheck*", "ATP*", "*Nunchaku*", "*Code*", "*BNF*", "*SMT*",
    "*.*.*"]:
   string list
val unwanted_names =
   [(false, Name "*nitpick*"), (false, Name "*Nitpick*"),
    (false, Name "*full_exhaustive*"), (false, Name "*_def*"),
    (false, Name "Enum.finite*"), (false, Name "*Quickcheck*"),
    (false, Name "ATP*"), (false, Name "*Nunchaku*"),
    (false, Name "*Code*"), (false, Name "*BNF*"), (false, Name "*SMT*"),
    (false, Name "*.*.*")]:
   (bool * term Find_Theorems.criterion) list
val has_vars = fn: term -> bool
val get_all_eqs = fn: string -> Proof.context -> (string * thm) list
val get_all_thms = fn: string -> Proof.context -> (string * thm) list
val get_noneq_thms = fn: string -> Proof.context -> (string * thm) list
val template_eqs = fn:
   string -> Proof.context -> (string * thm * template) list
val template_thms = fn:
   string -> Proof.context -> (string * thm * template) list
### theory "Draft.ExtrEqs"
### 0.574s elapsed time, 1.159s cpu time, 0.132s GC time
locale state
  fixes n :: "nat"
    and v :: "complex mat"
  assumes "state n v"
locale gate
  fixes n :: "nat"
    and A :: "complex mat"
  assumes "gate n A"
### Ambiguous input (line 282 of "$AFP/Isabelle_Marries_Dirac/Quantum.thy") produces 2 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("\<^const>Matrix.transpose_mat"
###       ("\<^const>Groups.times_class.times" ("_position" M) ("_position" N)))
###     ("\<^const>Groups.times_class.times"
###       ("\<^const>Matrix.transpose_mat" ("_position" N))
###       ("\<^const>Matrix.transpose_mat" ("_position" M)))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Groups.times_class.times"
###     ("\<^const>Matrix.transpose_mat"
###       ("\<^const>HOL.eq"
###         ("\<^const>Matrix.transpose_mat"
###           ("\<^const>Groups.times_class.times" ("_position" M)
###             ("_position" N)))
###         ("_position" N)))
###     ("\<^const>Matrix.transpose_mat" ("_position" M))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 338 of "$AFP/Isabelle_Marries_Dirac/Quantum.thy") produces 2 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("\<^const>Quantum.dagger"
###       ("\<^const>Groups.times_class.times" ("_position" M) ("_position" N)))
###     ("\<^const>Groups.times_class.times"
###       ("\<^const>Quantum.dagger" ("_position" N))
###       ("\<^const>Quantum.dagger" ("_position" M)))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Groups.times_class.times"
###     ("\<^const>Quantum.dagger"
###       ("\<^const>HOL.eq"
###         ("\<^const>Quantum.dagger"
###           ("\<^const>Groups.times_class.times" ("_position" M)
###             ("_position" N)))
###         ("_position" N)))
###     ("\<^const>Quantum.dagger" ("_position" M))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 1313 of "$AFP/Isabelle_Marries_Dirac/Quantum.thy") produces 2 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Quantum.bip"
###     ("\<^const>HOL.eq"
###       ("\<^const>Quantum.bip" ("_position" i)
###         ("_applC" ("_position" Suc) ("_position" n)) ("_position" j))
###       ("\<^const>Rings.modulo_class.modulo" ("_position" i)
###         ("\<^const>Power.power_class.power"
###           ("_Numeral" ("_constify" ("_position" 2))) ("_position" n))))
###     ("_position" n)
###     ("\<^const>Rings.modulo_class.modulo" ("_position" j)
###       ("\<^const>Power.power_class.power"
###         ("_Numeral" ("_constify" ("_position" 2))) ("_position" n)))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("\<^const>Quantum.bip" ("_position" i)
###       ("_applC" ("_position" Suc) ("_position" n)) ("_position" j))
###     ("\<^const>Quantum.bip"
###       ("\<^const>Rings.modulo_class.modulo" ("_position" i)
###         ("\<^const>Power.power_class.power"
###           ("_Numeral" ("_constify" ("_position" 2))) ("_position" n)))
###       ("_position" n)
###       ("\<^const>Rings.modulo_class.modulo" ("_position" j)
###         ("\<^const>Power.power_class.power"
###           ("_Numeral" ("_constify" ("_position" 2))) ("_position" n))))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### theory "Draft.Quantum"
### 1.045s elapsed time, 1.508s cpu time, 0.173s GC time
Loading theory "Draft.Complex_Vectors" (required by "Draft.TensorTemplates" via "Draft.Tensor")
### theory "Draft.Complex_Vectors"
### 0.401s elapsed time, 0.458s cpu time, 0.089s GC time
Loading theory "Draft.Tensor" (required by "Draft.TensorTemplates")
### theory "Draft.Tensor"
### 0.457s elapsed time, 0.504s cpu time, 0.080s GC time
Loading theory "Draft.TensorTemplates"
val templateLemmas =
   [("Tensor.length_mat_to_cols_list",
     "length (mat_to_cols_list ?A) = dim_col ?A",
     template_equation
      (template_app
        (template_hole 2, template_app (template_hole 1, template_var 0)),
       template_app (template_hole 0, template_var 0))),
    ("Tensor.mat_to_cols_list_to_mat",
     "Tensor.mat_of_cols_list (dim_row ?A) (mat_to_cols_list ?A) = ?A",
     template_equation
      (template_app
        (template_app
          (template_hole 2, template_app (template_hole 1, template_var 0)),
         template_app (template_hole 0, template_var 0)),
       template_var 0)),
    ("Tensor.dim_col_tensor_mat",
     "dim_col (?A \<Otimes> ?B) = dim_col ?A * dim_col ?B",
     template_equation
      (template_app
        (template_hole 2,
         template_app
          (template_app (template_hole 1, template_var 1), template_var 0)),
       template_app
        (template_app
          (template_hole 0, template_app (template_hole 2, template_var 1)),
         template_app (template_hole 2, template_var 0)))),
    ("Tensor.dim_row_tensor_mat",
     "dim_row (?A \<Otimes> ?B) = dim_row ?A * dim_row ?B",
     template_equation
      (template_app
        (template_hole 2,
         template_app
          (template_app (template_hole 1, template_var 1), template_var 0)),
       template_app
        (template_app
          (template_hole 0, template_app (template_hole 2, template_var 1)),
         template_app (template_hole 2, template_var 0)))),
    ("Tensor.tensor_mat_is_assoc",
     "?A \<Otimes> (?B \<Otimes> ?C) = ?A \<Otimes> ?B \<Otimes> ?C",
     template_equation
      (template_app
        (template_app (template_hole 0, template_var 2),
         template_app
          (template_app (template_hole 0, template_var 1), template_var 0)),
       template_app
        (template_app
          (template_hole 0,
           template_app
            (template_app (template_hole 0, template_var 2),
             template_var 1)),
         template_var 0))),
    ("Tensor.mat_to_cols_list_is_not_Nil",
     "0 < dim_col ?A ==> mat_to_cols_list ?A ~= []",
     template_implication
      ([template_inequation
         (less_than, template_hole 5,
          template_app (template_hole 4, template_var 0))],
       template_negation
        (
           template_equation
            (template_app (template_hole 1, template_var 0),
             template_hole 0)
           ))),
    ("Tensor.list_to_mat_to_cols_list",
     "Matrix_Legacy.mat ?nr ?nc ?l ==>
      mat_to_cols_list (Tensor.mat_of_cols_list ?nr ?l) = ?l",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app (template_hole 3, template_var 2),
                template_var 1),
              template_var 0)
            )],
       template_equation
        (template_app
          (template_hole 1,
           template_app
            (template_app (template_hole 0, template_var 2),
             template_var 0)),
         template_var 0))),
    ("Tensor.row_length_mat_to_cols_list",
     "0 < dim_col ?A ==>
      mult.row_length (mat_to_cols_list ?A) = dim_row ?A",
     template_implication
      ([template_inequation
         (less_than, template_hole 5,
          template_app (template_hole 4, template_var 0))],
       template_equation
        (template_app
          (template_hole 2, template_app (template_hole 1, template_var 0)),
         template_app (template_hole 0, template_var 0)))),
    ("Tensor.length_row_mat_to_cols_list",
     "?i < dim_row ?A ==>
      length (Matrix_Legacy.row (mat_to_cols_list ?A) ?i) = dim_col ?A",
     template_implication
      ([template_inequation
         (less_than, template_var 1,
          template_app (template_hole 5, template_var 0))],
       template_equation
        (template_app
          (template_hole 3,
           template_app
            (template_app
              (template_hole 2,
               template_app (template_hole 1, template_var 0)),
             template_var 1)),
         template_app (template_hole 0, template_var 0)))),
    ("Tensor.length_col_mat_to_cols_list",
     "?j < dim_col ?A ==>
      length (Matrix_Legacy.col (mat_to_cols_list ?A) ?j) = dim_row ?A",
     template_implication
      ([template_inequation
         (less_than, template_var 1,
          template_app (template_hole 5, template_var 0))],
       template_equation
        (template_app
          (template_hole 3,
           template_app
            (template_app
              (template_hole 2,
               template_app (template_hole 1, template_var 0)),
             template_var 1)),
         template_app (template_hole 0, template_var 0)))),
    ("Tensor.mat_to_cols_list_is_mat",
     "0 < dim_col ?A ==>
      Matrix_Legacy.mat (mult.row_length (mat_to_cols_list ?A))
       (length (mat_to_cols_list ?A)) (mat_to_cols_list ?A)",
     template_implication
      ([template_inequation
         (less_than, template_hole 5,
          template_app (template_hole 4, template_var 0))],
       template_predicate
        (
           template_app
            (template_app
              (template_app
                (template_hole 3,
                 template_app
                  (template_hole 2,
                   template_app (template_hole 1, template_var 0))),
               template_app
                (template_hole 0,
                 template_app (template_hole 1, template_var 0))),
             template_app (template_hole 1, template_var 0))
           ))),
    ("Tensor.Matrix_row_is_Legacy_row",
     "?i < dim_row ?A ==>
      Matrix.row ?A ?i =
      vec_of_list (Matrix_Legacy.row (mat_to_cols_list ?A) ?i)",
     template_implication
      ([template_inequation
         (less_than, template_var 1,
          template_app (template_hole 5, template_var 0))],
       template_equation
        (template_app
          (template_app (template_hole 3, template_var 0), template_var 1),
         template_app
          (template_hole 2,
           template_app
            (template_app
              (template_hole 1,
               template_app (template_hole 0, template_var 0)),
             template_var 1))))),
    ("Tensor.Matrix_col_is_Legacy_col",
     "?j < dim_col ?A ==>
      Matrix.col ?A ?j =
      vec_of_list (Matrix_Legacy.col (mat_to_cols_list ?A) ?j)",
     template_implication
      ([template_inequation
         (less_than, template_var 1,
          template_app (template_hole 5, template_var 0))],
       template_equation
        (template_app
          (template_app (template_hole 3, template_var 0), template_var 1),
         template_app
          (template_hole 2,
           template_app
            (template_app
              (template_hole 1,
               template_app (template_hole 0, template_var 0)),
             template_var 1))))),
    ("Tensor.Legacy_row_is_Matrix_row",
     "?i < mult.row_length ?A ==>
      Matrix_Legacy.row ?A ?i =
      list_of_vec
       (Matrix.row (Tensor.mat_of_cols_list (mult.row_length ?A) ?A) ?i)",
     template_implication
      ([template_inequation
         (less_than, template_var 1,
          template_app (template_hole 5, template_var 0))],
       template_equation
        (template_app
          (template_app (template_hole 3, template_var 0), template_var 1),
         template_app
          (template_hole 2,
           template_app
            (template_app
              (template_hole 1,
               template_app
                (template_app
                  (template_hole 0,
                   template_app (template_hole 5, template_var 0)),
                 template_var 0)),
             template_var 1))))),
    ("Tensor.col_mat_of_cols_list",
     "?j < length ?l ==>
      Matrix.col (Tensor.mat_of_cols_list (length (?l ! ?j)) ?l) ?j =
      vec_of_list (?l ! ?j)",
     template_implication
      ([template_inequation
         (less_than, template_var 1,
          template_app (template_hole 6, template_var 0))],
       template_equation
        (template_app
          (template_app
            (template_hole 4,
             template_app
              (template_app
                (template_hole 3,
                 template_app
                  (template_hole 2,
                   template_app
                    (template_app (template_hole 1, template_var 0),
                     template_var 1))),
               template_var 0)),
           template_var 1),
         template_app
          (template_hole 0,
           template_app
            (template_app (template_hole 1, template_var 0),
             template_var 1))))),
    ("Tensor.scalar_prod_is_Matrix_scalar_prod",
     "length ?u = length ?v ==>
      plus_mult.scalar_product (*) 0 (+) ?u ?v =
      vec_of_list ?u \<bullet> vec_of_list ?v",
     template_implication
      ([template_equation
         (template_app (template_hole 7, template_var 1),
          template_app (template_hole 7, template_var 0))],
       template_equation
        (template_app
          (template_app
            (template_app
              (template_app
                (template_app (template_hole 5, template_hole 4),
                 template_hole 3),
               template_hole 2),
             template_var 1),
           template_var 0),
         template_app
          (template_app
            (template_hole 1,
             template_app (template_hole 0, template_var 1)),
           template_app (template_hole 0, template_var 0))))),
    ("Tensor.length_cols_mat_to_cols_list",
     "?j < dim_col ?A ==>
      length (map (%i. ?A $$ (i, ?j)) [0..<dim_row ?A]) = dim_row ?A",
     template_implication
      ([template_inequation
         (less_than, template_var 1,
          template_app (template_hole 8, template_var 0))],
       template_equation
        (template_app
          (template_hole 6,
           template_app
            (template_app (template_hole 5, t_empty),
             template_app
              (template_app (template_hole 2, template_hole 1),
               template_app (template_hole 0, template_var 0)))),
         template_app (template_hole 0, template_var 0)))),
    ("Tensor.index_mat_of_cols_list",
     "[| ?i < ?nr; ?j < length ?cs |]
      ==> Tensor.mat_of_cols_list ?nr ?cs $$ (?i, ?j) = ?cs ! ?j ! ?i",
     template_implication
      ([template_inequation (less_than, template_var 3, template_var 2),
        template_inequation
         (less_than, template_var 1,
          template_app (template_hole 6, template_var 0))],
       template_equation
        (template_app
          (template_app
            (template_hole 4,
             template_app
              (template_app (template_hole 3, template_var 2),
               template_var 0)),
           template_app
            (template_app (template_hole 2, template_var 3),
             template_var 1)),
         template_app
          (template_app
            (template_hole 1,
             template_app
              (template_app (template_hole 0, template_var 0),
               template_var 1)),
           template_var 3)))),
    ("Tensor.Legacy_col_is_Matrix_col",
     "[| ?j < length ?A; length (?A ! ?j) = mult.row_length ?A |]
      ==> Matrix_Legacy.col ?A ?j =
          list_of_vec
           (Matrix.col (Tensor.mat_of_cols_list (mult.row_length ?A) ?A)
             ?j)",
     template_implication
      ([template_inequation
         (less_than, template_var 1,
          template_app (template_hole 9, template_var 0)),
        template_equation
         (template_app
           (template_hole 7,
            template_app
             (template_app (template_hole 6, template_var 0),
              template_var 1)),
          template_app (template_hole 5, template_var 0))],
       template_equation
        (template_app
          (template_app (template_hole 3, template_var 0), template_var 1),
         template_app
          (template_hole 2,
           template_app
            (template_app
              (template_hole 1,
               template_app
                (template_app
                  (template_hole 0,
                   template_app (template_hole 5, template_var 0)),
                 template_var 0)),
             template_var 1))))),
    ("Tensor.mat_to_cols_list_times_mat",
     "[| dim_col ?A = dim_row ?B; 0 < dim_col ?A |]
      ==> mat_to_cols_list (?A * ?B) =
          mat_mult (mult.row_length (mat_to_cols_list ?A))
           (mat_to_cols_list ?A) (mat_to_cols_list ?B)",
     template_implication
      ([template_equation
         (template_app (template_hole 11, template_var 1),
          template_app (template_hole 10, template_var 0)),
        template_inequation
         (less_than, template_hole 8,
          template_app (template_hole 11, template_var 1))],
       template_equation
        (template_app
          (template_hole 6,
           template_app
            (template_app (template_hole 5, template_var 1),
             template_var 0)),
         template_app
          (template_app
            (template_app
              (template_app
                (template_app
                  (template_app (template_hole 4, template_hole 3),
                   template_hole 2),
                 template_hole 1),
               template_app
                (template_hole 0,
                 template_app (template_hole 6, template_var 1))),
             template_app (template_hole 6, template_var 1)),
           template_app (template_hole 6, template_var 0))))),
    ("Tensor.matrix_mult_to_times_mat",
     "[| 0 < dim_col ?A; 0 < dim_col ?B; dim_col ?A = dim_row ?B |]
      ==> ?A * ?B =
          Tensor.mat_of_cols_list (dim_row ?A)
           (mat_mult (mult.row_length (mat_to_cols_list ?A))
             (mat_to_cols_list ?A) (mat_to_cols_list ?B))",
     template_implication
      ([template_inequation
         (less_than, template_hole 12,
          template_app (template_hole 11, template_var 1)),
        template_inequation
         (less_than, template_hole 12,
          template_app (template_hole 11, template_var 0)),
        template_equation
         (template_app (template_hole 11, template_var 1),
          template_app (template_hole 9, template_var 0))],
       template_equation
        (template_app
          (template_app (template_hole 7, template_var 1), template_var 0),
         template_app
          (template_app
            (template_hole 6,
             template_app (template_hole 9, template_var 1)),
           template_app
            (template_app
              (template_app
                (template_app
                  (template_app
                    (template_app (template_hole 5, template_hole 4),
                     template_hole 3),
                   template_hole 2),
                 template_app
                  (template_hole 1,
                   template_app (template_hole 0, template_var 1))),
               template_app (template_hole 0, template_var 1)),
             template_app (template_hole 0, template_var 0)))))),
    ("Tensor.mult_distr_tensor",
     "[| dim_col ?A = dim_row ?B; dim_col ?C = dim_row ?D; 0 < dim_col ?A;
         0 < dim_col ?B; 0 < dim_col ?C; 0 < dim_col ?D |]
      ==> ?A * ?B \<Otimes> ?C * ?D =
          (?A \<Otimes> ?C) * (?B \<Otimes> ?D)",
     template_implication
      ([template_equation
         (template_app (template_hole 6, template_var 3),
          template_app (template_hole 5, template_var 2)),
        template_equation
         (template_app (template_hole 6, template_var 1),
          template_app (template_hole 5, template_var 0)),
        template_inequation
         (less_than, template_hole 3,
          template_app (template_hole 6, template_var 3)),
        template_inequation
         (less_than, template_hole 3,
          template_app (template_hole 6, template_var 2)),
        template_inequation
         (less_than, template_hole 3,
          template_app (template_hole 6, template_var 1)),
        template_inequation
         (less_than, template_hole 3,
          template_app (template_hole 6, template_var 0))],
       template_equation
        (template_app
          (template_app
            (template_hole 1,
             template_app
              (template_app (template_hole 0, template_var 3),
               template_var 2)),
           template_app
            (template_app (template_hole 0, template_var 1),
             template_var 0)),
         template_app
          (template_app
            (template_hole 0,
             template_app
              (template_app (template_hole 1, template_var 3),
               template_var 1)),
           template_app
            (template_app (template_hole 1, template_var 2),
             template_var 0))))),
    ("Tensor.index_tensor_mat",
     "[| dim_row ?A = ?rA; dim_col ?A = ?cA; dim_row ?B = ?rB;
         dim_col ?B = ?cB; ?i < ?rA * ?rB; ?j < ?cA * ?cB; 0 < ?cA;
         0 < ?cB |]
      ==> (?A \<Otimes> ?B) $$ (?i, ?j) =
          ?A $$ (?i div ?rB, ?j div ?cB) * ?B $$ (?i mod ?rB, ?j mod ?cB)",
     template_implication
      ([template_equation
         (template_app (template_hole 11, template_var 7), template_var 6),
        template_equation
         (template_app (template_hole 10, template_var 7), template_var 5),
        template_equation
         (template_app (template_hole 11, template_var 4), template_var 3),
        template_equation
         (template_app (template_hole 10, template_var 4), template_var 2),
        template_inequation
         (less_than, template_var 1,
          template_app
           (template_app (template_hole 8, template_var 6),
            template_var 3)),
        template_inequation
         (less_than, template_var 0,
          template_app
           (template_app (template_hole 8, template_var 5),
            template_var 2)),
        template_inequation (less_than, template_hole 7, template_var 5),
        template_inequation (less_than, template_hole 7, template_var 2)],
       template_equation
        (template_app
          (template_app
            (template_hole 5,
             template_app
              (template_app (template_hole 4, template_var 7),
               template_var 4)),
           template_app
            (template_app (template_hole 3, template_var 1),
             template_var 0)),
         template_app
          (template_app
            (template_hole 2,
             template_app
              (template_app (template_hole 5, template_var 7),
               template_app
                (template_app
                  (template_hole 3,
                   template_app
                    (template_app (template_hole 1, template_var 1),
                     template_var 3)),
                 template_app
                  (template_app (template_hole 1, template_var 0),
                   template_var 2)))),
           template_app
            (template_app (template_hole 5, template_var 4),
             template_app
              (template_app
                (template_hole 3,
                 template_app
                  (template_app (template_hole 0, template_var 1),
                   template_var 3)),
               template_app
                (template_app (template_hole 0, template_var 0),
                 template_var 2)))))))]:
   (string * thm * template) list
### theory "Draft.TensorTemplates"
### 0.912s elapsed time, 1.475s cpu time, 0.593s GC time
val it = (): unit
