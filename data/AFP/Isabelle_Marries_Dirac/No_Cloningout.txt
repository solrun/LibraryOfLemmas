Loading theory "Draft.Basics" (required by "Draft.No_CloningTemplates" via "Draft.No_Cloning" via "Draft.Quantum")
Loading theory "Draft.Templates" (required by "Draft.No_CloningTemplates" via "Draft.ExtrEqs")
datatype template_term
=
     t_empty
   | template_app of template_term * template_term
   | template_hole of int
   | template_var of int
datatype sign
= equals | greater_equals | greater_than | less_equals | less_than
datatype template
=
     template_bimplication of template * template
   | template_dunno
   | template_equation of template_term * template_term
   | template_implication of template list * template
   | template_inequation of sign * template_term * template_term
   | template_negation of template
   | template_predicate of template_term
constructor t_empty: template_term
constructor template_app: template_term * template_term -> template_term
constructor template_hole: int -> template_term
constructor template_var: int -> template_term
constructor equals: sign
constructor greater_equals: sign
constructor greater_than: sign
constructor less_equals: sign
constructor less_than: sign
constructor template_bimplication: template * template -> template
constructor template_dunno: template
constructor template_equation: template_term * template_term -> template
constructor template_implication: template list * template -> template
constructor template_inequation:
   sign * template_term * template_term -> template
constructor template_negation: template -> template
constructor template_predicate: template_term -> template
val vfs = fn: term -> (indexname * typ) list * (string * typ) list
val indexOf = fn: ''a list -> ''a -> int -> int
val has_eq = fn: term -> bool
val term2template = fn:
   (indexname * typ) list -> (string * typ) list -> term -> template_term
val lemma2predicate = fn: term -> term -> template
val makeTemplatewithContext = fn: term -> term -> template
val lemma2template = fn: term -> template
val thm2template = fn: thm -> template
val tterm2string = fn: template_term -> string
val template2string = fn: template -> string
val t = "height ?t <= size ?t": thm
val th =
   Const ("HOL.Trueprop", "bool => prop") $
     (Const ("Orderings.ord_class.less_eq", "nat => nat => bool") $
       (Const ("Tree.height_class.height", "?'a tree => nat") $
         Var (("t", 0), "?'a tree")) $
       (Const ("Nat.size_class.size", "?'a tree => nat") $
         Var (("t", 0), "?'a tree"))):
   term
### theory "Draft.Templates"
### 0.072s elapsed time, 0.184s cpu time, 0.000s GC time
Loading theory "Draft.ExtrEqs" (required by "Draft.No_CloningTemplates")
### theory "Draft.Basics"
### 0.159s elapsed time, 0.360s cpu time, 0.048s GC time
Loading theory "Draft.Binary_Nat" (required by "Draft.No_CloningTemplates" via "Draft.No_Cloning" via "Draft.Quantum")
consts
  bin_rep_aux :: "nat => nat => nat list"
### theory "Draft.Binary_Nat"
### 0.088s elapsed time, 0.176s cpu time, 0.000s GC time
Loading theory "Draft.Quantum" (required by "Draft.No_CloningTemplates" via "Draft.No_Cloning")
val eqpattern =
   Pattern
    (
       Const ("HOL.Trueprop", "bool => prop") $
         (Const ("HOL.eq", "?'a => ?'a => bool") $
           Var (("_dummy_", 1), "?'a") $ Var (("_dummy_", 2), "?'a"))
       ):
   term Find_Theorems.criterion
val badeqpattern = Pattern (Const ("Pure.eq", "?'a => ?'a => prop")):
   term Find_Theorems.criterion
val undefpattern =
   Pattern
    (
       Const ("HOL.Trueprop", "bool => prop") $
         (Const ("HOL.eq", "?'a => ?'a => bool") $
           Var (("_dummy_", 1), "?'a") $ Const ("HOL.undefined", "?'a"))
       ):
   term Find_Theorems.criterion
val thmpattern =
   Pattern
    (Const ("HOL.Trueprop", "bool => prop") $ Var (("_dummy_", 1), "bool")):
   term Find_Theorems.criterion
val badnames =
   ["*nitpick*", "*Nitpick*", "*full_exhaustive*", "*_def*", "Enum.finite*",
    "*Quickcheck*", "ATP*", "*Nunchaku*", "*Code*", "*BNF*", "*SMT*",
    "*.*.*"]:
   string list
val unwanted_names =
   [(false, Name "*nitpick*"), (false, Name "*Nitpick*"),
    (false, Name "*full_exhaustive*"), (false, Name "*_def*"),
    (false, Name "Enum.finite*"), (false, Name "*Quickcheck*"),
    (false, Name "ATP*"), (false, Name "*Nunchaku*"),
    (false, Name "*Code*"), (false, Name "*BNF*"), (false, Name "*SMT*"),
    (false, Name "*.*.*")]:
   (bool * term Find_Theorems.criterion) list
val has_vars = fn: term -> bool
val get_all_eqs = fn: string -> Proof.context -> (string * thm) list
val get_all_thms = fn: string -> Proof.context -> (string * thm) list
val get_noneq_thms = fn: string -> Proof.context -> (string * thm) list
val template_eqs = fn:
   string -> Proof.context -> (string * thm * template) list
val template_thms = fn:
   string -> Proof.context -> (string * thm * template) list
### theory "Draft.ExtrEqs"
### 0.584s elapsed time, 1.190s cpu time, 0.149s GC time
locale state
  fixes n :: "nat"
    and v :: "complex mat"
  assumes "state n v"
locale gate
  fixes n :: "nat"
    and A :: "complex mat"
  assumes "gate n A"
### Ambiguous input (line 282 of "$AFP/Isabelle_Marries_Dirac/Quantum.thy") produces 2 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("\<^const>Matrix.transpose_mat"
###       ("\<^const>Groups.times_class.times" ("_position" M) ("_position" N)))
###     ("\<^const>Groups.times_class.times"
###       ("\<^const>Matrix.transpose_mat" ("_position" N))
###       ("\<^const>Matrix.transpose_mat" ("_position" M)))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Groups.times_class.times"
###     ("\<^const>Matrix.transpose_mat"
###       ("\<^const>HOL.eq"
###         ("\<^const>Matrix.transpose_mat"
###           ("\<^const>Groups.times_class.times" ("_position" M)
###             ("_position" N)))
###         ("_position" N)))
###     ("\<^const>Matrix.transpose_mat" ("_position" M))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 338 of "$AFP/Isabelle_Marries_Dirac/Quantum.thy") produces 2 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("\<^const>Quantum.dagger"
###       ("\<^const>Groups.times_class.times" ("_position" M) ("_position" N)))
###     ("\<^const>Groups.times_class.times"
###       ("\<^const>Quantum.dagger" ("_position" N))
###       ("\<^const>Quantum.dagger" ("_position" M)))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Groups.times_class.times"
###     ("\<^const>Quantum.dagger"
###       ("\<^const>HOL.eq"
###         ("\<^const>Quantum.dagger"
###           ("\<^const>Groups.times_class.times" ("_position" M)
###             ("_position" N)))
###         ("_position" N)))
###     ("\<^const>Quantum.dagger" ("_position" M))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 1313 of "$AFP/Isabelle_Marries_Dirac/Quantum.thy") produces 2 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Quantum.bip"
###     ("\<^const>HOL.eq"
###       ("\<^const>Quantum.bip" ("_position" i)
###         ("_applC" ("_position" Suc) ("_position" n)) ("_position" j))
###       ("\<^const>Rings.modulo_class.modulo" ("_position" i)
###         ("\<^const>Power.power_class.power"
###           ("_Numeral" ("_constify" ("_position" 2))) ("_position" n))))
###     ("_position" n)
###     ("\<^const>Rings.modulo_class.modulo" ("_position" j)
###       ("\<^const>Power.power_class.power"
###         ("_Numeral" ("_constify" ("_position" 2))) ("_position" n)))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("\<^const>Quantum.bip" ("_position" i)
###       ("_applC" ("_position" Suc) ("_position" n)) ("_position" j))
###     ("\<^const>Quantum.bip"
###       ("\<^const>Rings.modulo_class.modulo" ("_position" i)
###         ("\<^const>Power.power_class.power"
###           ("_Numeral" ("_constify" ("_position" 2))) ("_position" n)))
###       ("_position" n)
###       ("\<^const>Rings.modulo_class.modulo" ("_position" j)
###         ("\<^const>Power.power_class.power"
###           ("_Numeral" ("_constify" ("_position" 2))) ("_position" n))))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### theory "Draft.Quantum"
### 1.110s elapsed time, 1.589s cpu time, 0.194s GC time
Loading theory "Draft.Complex_Vectors" (required by "Draft.No_CloningTemplates" via "Draft.No_Cloning" via "Draft.Tensor")
### theory "Draft.Complex_Vectors"
### 0.431s elapsed time, 0.488s cpu time, 0.090s GC time
Loading theory "Draft.Tensor" (required by "Draft.No_CloningTemplates" via "Draft.No_Cloning")
### theory "Draft.Tensor"
### 0.493s elapsed time, 0.541s cpu time, 0.082s GC time
Loading theory "Draft.No_Cloning" (required by "Draft.No_CloningTemplates")
locale quantum_machine
  fixes n :: "nat"
    and s :: "complex Matrix.vec"
    and U :: "complex Matrix.mat"
  assumes "quantum_machine n s U"
### theory "Draft.No_Cloning"
### 0.090s elapsed time, 0.090s cpu time, 0.000s GC time
Loading theory "Draft.No_CloningTemplates"
val templateLemmas =
   [("No_Cloning.hermite_cnj_of_tensor",
     "?A \<Otimes> ?B\<^sup>\<dagger> =
      ?A\<^sup>\<dagger> \<Otimes> ?B\<^sup>\<dagger>",
     template_equation
      (template_app
        (template_hole 1,
         template_app
          (template_app (template_hole 0, template_var 1), template_var 0)),
       template_app
        (template_app
          (template_hole 0, template_app (template_hole 1, template_var 1)),
         template_app (template_hole 1, template_var 0)))),
    ("No_Cloning.inner_prod_of_unit_vec",
     "?i < ?n ==> \<langle>unit_vec ?n ?i|unit_vec ?n ?i\<rangle> = 1",
     template_implication
      ([template_inequation (less_than, template_var 1, template_var 0)],
       template_equation
        (template_app
          (template_app
            (template_hole 2,
             template_app
              (template_app (template_hole 1, template_var 0),
               template_var 1)),
           template_app
            (template_app (template_hole 1, template_var 0),
             template_var 1)),
         template_hole 0))),
    ("No_Cloning.inner_prod_distrib_right",
     "dim_vec ?a = dim_vec ?b ==>
      \<langle>?a|?c \<cdot>\<^sub>v ?b\<rangle> =
      ?c * \<langle>?a|?b\<rangle>",
     template_implication
      ([template_equation
         (template_app (template_hole 4, template_var 2),
          template_app (template_hole 4, template_var 1))],
       template_equation
        (template_app
          (template_app (template_hole 2, template_var 2),
           template_app
            (template_app (template_hole 1, template_var 0),
             template_var 1)),
         template_app
          (template_app (template_hole 0, template_var 0),
           template_app
            (template_app (template_hole 2, template_var 2),
             template_var 1))))),
    ("No_Cloning.inner_prod_distrib_left",
     "dim_vec ?a = dim_vec ?b ==>
      \<langle>?c \<cdot>\<^sub>v ?a|?b\<rangle> =
      cnj ?c * \<langle>?a|?b\<rangle>",
     template_implication
      ([template_equation
         (template_app (template_hole 5, template_var 2),
          template_app (template_hole 5, template_var 1))],
       template_equation
        (template_app
          (template_app
            (template_hole 3,
             template_app
              (template_app (template_hole 2, template_var 0),
               template_var 2)),
           template_var 1),
         template_app
          (template_app
            (template_hole 1,
             template_app (template_hole 0, template_var 0)),
           template_app
            (template_app (template_hole 3, template_var 2),
             template_var 1))))),
    ("No_Cloning.cauchy_schwarz_ineq",
     "dim_vec ?v = dim_vec ?w ==>
      (cmod \<langle>?v|?w\<rangle>)\<^sup>2
      <= Re (\<langle>?v|?v\<rangle> * \<langle>?w|?w\<rangle>)",
     template_implication
      ([template_equation
         (template_app (template_hole 9, template_var 1),
          template_app (template_hole 9, template_var 0))],
       template_inequation
        (less_equals,
         template_app
          (template_app
            (template_hole 7,
             template_app
              (template_hole 6,
               template_app
                (template_app (template_hole 5, template_var 1),
                 template_var 0))),
           template_app
            (template_hole 4,
             template_app (template_hole 3, template_hole 2))),
         template_app
          (template_hole 1,
           template_app
            (template_app
              (template_hole 0,
               template_app
                (template_app (template_hole 5, template_var 1),
                 template_var 1)),
             template_app
              (template_app (template_hole 5, template_var 0),
               template_var 0)))))),
    ("No_Cloning.cauchy_schwarz_eq",
     "?v = ?l \<cdot>\<^sub>v ?w ==>
      (cmod \<langle>?v|?w\<rangle>)\<^sup>2 =
      Re (\<langle>?v|?v\<rangle> * \<langle>?w|?w\<rangle>)",
     template_implication
      ([template_equation
         (template_var 2,
          template_app
           (template_app (template_hole 9, template_var 1),
            template_var 0))],
       template_equation
        (template_app
          (template_app
            (template_hole 7,
             template_app
              (template_hole 6,
               template_app
                (template_app (template_hole 5, template_var 2),
                 template_var 0))),
           template_app
            (template_hole 4,
             template_app (template_hole 3, template_hole 2))),
         template_app
          (template_hole 1,
           template_app
            (template_app
              (template_hole 0,
               template_app
                (template_app (template_hole 5, template_var 2),
                 template_var 2)),
             template_app
              (template_app (template_hole 5, template_var 0),
               template_var 0)))))),
    ("No_Cloning.eq_from_inner_prod",
     "[| dim_vec ?v = dim_vec ?w; \<langle>?v|?w\<rangle> = 1;
         \<langle>?v|?v\<rangle> = 1; \<langle>?w|?w\<rangle> = 1 |]
      ==> ?v = ?w",
     template_implication
      ([template_equation
         (template_app (template_hole 4, template_var 1),
          template_app (template_hole 4, template_var 0)),
        template_equation
         (template_app
           (template_app (template_hole 2, template_var 1), template_var 0),
          template_hole 1),
        template_equation
         (template_app
           (template_app (template_hole 2, template_var 1), template_var 1),
          template_hole 1),
        template_equation
         (template_app
           (template_app (template_hole 2, template_var 0), template_var 0),
          template_hole 1)],
       template_equation (template_var 1, template_var 0))),
    ("No_Cloning.cauchy_schwarz_col",
     "[| dim_vec ?v = dim_vec ?w;
         (cmod \<langle>?v|?w\<rangle>)\<^sup>2 =
         Re (\<langle>?v|?v\<rangle> * \<langle>?w|?w\<rangle>) |]
      ==> EX l. ?v = l \<cdot>\<^sub>v ?w | ?w = l \<cdot>\<^sub>v ?v",
     template_implication
      ([template_equation
         (template_app (template_hole 13, template_var 1),
          template_app (template_hole 13, template_var 0)),
        template_equation
         (template_app
           (template_app
             (template_hole 11,
              template_app
               (template_hole 10,
                template_app
                 (template_app (template_hole 9, template_var 1),
                  template_var 0))),
            template_app
             (template_hole 8,
              template_app (template_hole 7, template_hole 6))),
          template_app
           (template_hole 5,
            template_app
             (template_app
               (template_hole 4,
                template_app
                 (template_app (template_hole 9, template_var 1),
                  template_var 1)),
              template_app
               (template_app (template_hole 9, template_var 0),
                template_var 0))))],
       template_predicate (template_app (template_hole 3, t_empty)))),
    ("No_Cloning.inner_prod_expand",
     "[| dim_vec ?a = dim_vec ?b; dim_vec ?a = dim_vec ?c;
         dim_vec ?a = dim_vec ?d |]
      ==> \<langle>?a + ?b|?c + ?d\<rangle> =
          \<langle>?a|?c\<rangle> + \<langle>?a|?d\<rangle> +
          \<langle>?b|?c\<rangle> +
          \<langle>?b|?d\<rangle>",
     template_implication
      ([template_equation
         (template_app (template_hole 4, template_var 3),
          template_app (template_hole 4, template_var 2)),
        template_equation
         (template_app (template_hole 4, template_var 3),
          template_app (template_hole 4, template_var 1)),
        template_equation
         (template_app (template_hole 4, template_var 3),
          template_app (template_hole 4, template_var 0))],
       template_equation
        (template_app
          (template_app
            (template_hole 2,
             template_app
              (template_app (template_hole 1, template_var 3),
               template_var 2)),
           template_app
            (template_app (template_hole 1, template_var 1),
             template_var 0)),
         template_app
          (template_app
            (template_hole 0,
             template_app
              (template_app
                (template_hole 0,
                 template_app
                  (template_app
                    (template_hole 0,
                     template_app
                      (template_app (template_hole 2, template_var 3),
                       template_var 1)),
                   template_app
                    (template_app (template_hole 2, template_var 3),
                     template_var 0))),
               template_app
                (template_app (template_hole 2, template_var 2),
                 template_var 1))),
           template_app
            (template_app (template_hole 2, template_var 2),
             template_var 0)))))]:
   (string * thm * template) list
### theory "Draft.No_CloningTemplates"
### 0.966s elapsed time, 1.477s cpu time, 0.548s GC time
val it = (): unit
