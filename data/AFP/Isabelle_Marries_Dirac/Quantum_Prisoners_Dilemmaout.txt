Loading theory "Draft.Basics" (required by "Draft.Quantum_Prisoners_DilemmaTemplates" via "Draft.Quantum_Prisoners_Dilemma" via "Draft.More_Tensor" via "Draft.Quantum")
Loading theory "Draft.Templates" (required by "Draft.Quantum_Prisoners_DilemmaTemplates" via "Draft.ExtrEqs")
datatype template_term
=
     t_empty
   | template_app of template_term * template_term
   | template_hole of int
   | template_var of int
datatype sign
= equals | greater_equals | greater_than | less_equals | less_than
datatype template
=
     template_bimplication of template * template
   | template_dunno
   | template_equation of template_term * template_term
   | template_implication of template list * template
   | template_inequation of sign * template_term * template_term
   | template_negation of template
   | template_predicate of template_term
constructor t_empty: template_term
constructor template_app: template_term * template_term -> template_term
constructor template_hole: int -> template_term
constructor template_var: int -> template_term
constructor equals: sign
constructor greater_equals: sign
constructor greater_than: sign
constructor less_equals: sign
constructor less_than: sign
constructor template_bimplication: template * template -> template
constructor template_dunno: template
constructor template_equation: template_term * template_term -> template
constructor template_implication: template list * template -> template
constructor template_inequation:
   sign * template_term * template_term -> template
constructor template_negation: template -> template
constructor template_predicate: template_term -> template
val vfs = fn: term -> (indexname * typ) list * (string * typ) list
val indexOf = fn: ''a list -> ''a -> int -> int
val has_eq = fn: term -> bool
val term2template = fn:
   (indexname * typ) list -> (string * typ) list -> term -> template_term
val lemma2predicate = fn: term -> term -> template
val makeTemplatewithContext = fn: term -> term -> template
val lemma2template = fn: term -> template
val thm2template = fn: thm -> template
val tterm2string = fn: template_term -> string
val template2string = fn: template -> string
val t = "height ?t <= size ?t": thm
val th =
   Const ("HOL.Trueprop", "bool => prop") $
     (Const ("Orderings.ord_class.less_eq", "nat => nat => bool") $
       (Const ("Tree.height_class.height", "?'a tree => nat") $
         Var (("t", 0), "?'a tree")) $
       (Const ("Nat.size_class.size", "?'a tree => nat") $
         Var (("t", 0), "?'a tree"))):
   term
### theory "Draft.Templates"
### 0.065s elapsed time, 0.176s cpu time, 0.000s GC time
Loading theory "Draft.ExtrEqs" (required by "Draft.Quantum_Prisoners_DilemmaTemplates")
### theory "Draft.Basics"
### 0.172s elapsed time, 0.388s cpu time, 0.044s GC time
Loading theory "Draft.Binary_Nat" (required by "Draft.Quantum_Prisoners_DilemmaTemplates" via "Draft.Quantum_Prisoners_Dilemma" via "Draft.More_Tensor" via "Draft.Quantum")
consts
  bin_rep_aux :: "nat => nat => nat list"
### theory "Draft.Binary_Nat"
### 0.097s elapsed time, 0.193s cpu time, 0.000s GC time
Loading theory "Draft.Quantum" (required by "Draft.Quantum_Prisoners_DilemmaTemplates" via "Draft.Quantum_Prisoners_Dilemma" via "Draft.More_Tensor")
val eqpattern =
   Pattern
    (
       Const ("HOL.Trueprop", "bool => prop") $
         (Const ("HOL.eq", "?'a => ?'a => bool") $
           Var (("_dummy_", 1), "?'a") $ Var (("_dummy_", 2), "?'a"))
       ):
   term Find_Theorems.criterion
val badeqpattern = Pattern (Const ("Pure.eq", "?'a => ?'a => prop")):
   term Find_Theorems.criterion
val undefpattern =
   Pattern
    (
       Const ("HOL.Trueprop", "bool => prop") $
         (Const ("HOL.eq", "?'a => ?'a => bool") $
           Var (("_dummy_", 1), "?'a") $ Const ("HOL.undefined", "?'a"))
       ):
   term Find_Theorems.criterion
val thmpattern =
   Pattern
    (Const ("HOL.Trueprop", "bool => prop") $ Var (("_dummy_", 1), "bool")):
   term Find_Theorems.criterion
val badnames =
   ["*nitpick*", "*Nitpick*", "*full_exhaustive*", "*_def*", "Enum.finite*",
    "*Quickcheck*", "ATP*", "*Nunchaku*", "*Code*", "*BNF*", "*SMT*",
    "*.*.*"]:
   string list
val unwanted_names =
   [(false, Name "*nitpick*"), (false, Name "*Nitpick*"),
    (false, Name "*full_exhaustive*"), (false, Name "*_def*"),
    (false, Name "Enum.finite*"), (false, Name "*Quickcheck*"),
    (false, Name "ATP*"), (false, Name "*Nunchaku*"),
    (false, Name "*Code*"), (false, Name "*BNF*"), (false, Name "*SMT*"),
    (false, Name "*.*.*")]:
   (bool * term Find_Theorems.criterion) list
val has_vars = fn: term -> bool
val get_all_eqs = fn: string -> Proof.context -> (string * thm) list
val get_all_thms = fn: string -> Proof.context -> (string * thm) list
val get_noneq_thms = fn: string -> Proof.context -> (string * thm) list
val template_eqs = fn:
   string -> Proof.context -> (string * thm * template) list
val template_thms = fn:
   string -> Proof.context -> (string * thm * template) list
### theory "Draft.ExtrEqs"
### 0.629s elapsed time, 1.272s cpu time, 0.138s GC time
locale state
  fixes n :: "nat"
    and v :: "complex mat"
  assumes "state n v"
locale gate
  fixes n :: "nat"
    and A :: "complex mat"
  assumes "gate n A"
### Ambiguous input (line 282 of "$AFP/Isabelle_Marries_Dirac/Quantum.thy") produces 2 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("\<^const>Matrix.transpose_mat"
###       ("\<^const>Groups.times_class.times" ("_position" M) ("_position" N)))
###     ("\<^const>Groups.times_class.times"
###       ("\<^const>Matrix.transpose_mat" ("_position" N))
###       ("\<^const>Matrix.transpose_mat" ("_position" M)))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Groups.times_class.times"
###     ("\<^const>Matrix.transpose_mat"
###       ("\<^const>HOL.eq"
###         ("\<^const>Matrix.transpose_mat"
###           ("\<^const>Groups.times_class.times" ("_position" M)
###             ("_position" N)))
###         ("_position" N)))
###     ("\<^const>Matrix.transpose_mat" ("_position" M))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 338 of "$AFP/Isabelle_Marries_Dirac/Quantum.thy") produces 2 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("\<^const>Quantum.dagger"
###       ("\<^const>Groups.times_class.times" ("_position" M) ("_position" N)))
###     ("\<^const>Groups.times_class.times"
###       ("\<^const>Quantum.dagger" ("_position" N))
###       ("\<^const>Quantum.dagger" ("_position" M)))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Groups.times_class.times"
###     ("\<^const>Quantum.dagger"
###       ("\<^const>HOL.eq"
###         ("\<^const>Quantum.dagger"
###           ("\<^const>Groups.times_class.times" ("_position" M)
###             ("_position" N)))
###         ("_position" N)))
###     ("\<^const>Quantum.dagger" ("_position" M))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 1313 of "$AFP/Isabelle_Marries_Dirac/Quantum.thy") produces 2 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Quantum.bip"
###     ("\<^const>HOL.eq"
###       ("\<^const>Quantum.bip" ("_position" i)
###         ("_applC" ("_position" Suc) ("_position" n)) ("_position" j))
###       ("\<^const>Rings.modulo_class.modulo" ("_position" i)
###         ("\<^const>Power.power_class.power"
###           ("_Numeral" ("_constify" ("_position" 2))) ("_position" n))))
###     ("_position" n)
###     ("\<^const>Rings.modulo_class.modulo" ("_position" j)
###       ("\<^const>Power.power_class.power"
###         ("_Numeral" ("_constify" ("_position" 2))) ("_position" n)))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("\<^const>Quantum.bip" ("_position" i)
###       ("_applC" ("_position" Suc) ("_position" n)) ("_position" j))
###     ("\<^const>Quantum.bip"
###       ("\<^const>Rings.modulo_class.modulo" ("_position" i)
###         ("\<^const>Power.power_class.power"
###           ("_Numeral" ("_constify" ("_position" 2))) ("_position" n)))
###       ("_position" n)
###       ("\<^const>Rings.modulo_class.modulo" ("_position" j)
###         ("\<^const>Power.power_class.power"
###           ("_Numeral" ("_constify" ("_position" 2))) ("_position" n))))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### theory "Draft.Quantum"
### 1.151s elapsed time, 1.636s cpu time, 0.185s GC time
Loading theory "Draft.Measurement" (required by "Draft.Quantum_Prisoners_DilemmaTemplates" via "Draft.Quantum_Prisoners_Dilemma")
Loading theory "Draft.Complex_Vectors" (required by "Draft.Quantum_Prisoners_DilemmaTemplates" via "Draft.Quantum_Prisoners_Dilemma" via "Draft.More_Tensor" via "Draft.Tensor")
consts
  iter_post_meas0 :: "nat => nat => complex mat => complex mat"
### theory "Draft.Measurement"
### 0.293s elapsed time, 0.608s cpu time, 0.102s GC time
### theory "Draft.Complex_Vectors"
### 0.470s elapsed time, 0.876s cpu time, 0.223s GC time
Loading theory "Draft.Tensor" (required by "Draft.Quantum_Prisoners_DilemmaTemplates" via "Draft.Quantum_Prisoners_Dilemma" via "Draft.More_Tensor")
### theory "Draft.Tensor"
### 0.657s elapsed time, 1.108s cpu time, 0.648s GC time
Loading theory "Draft.More_Tensor" (required by "Draft.Quantum_Prisoners_DilemmaTemplates" via "Draft.Quantum_Prisoners_Dilemma")
### Ambiguous input (line 43 of "$AFP/Isabelle_Marries_Dirac/More_Tensor.thy") produces 2 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("\<^const>Group.monoid.mult_indexed" ("_position" v) ("_indexdefault")
###       ("_position" w))
###     ("_applC" ("_position" vec_of_list)
###       ("_list"
###         ("_args"
###           ("\<^const>Groups.times_class.times"
###             ("\<^const>Matrix.vec_index" ("_position" v)
###               ("\<^const>Groups.zero_class.zero"))
###             ("\<^const>Matrix.vec_index" ("_position" w)
###               ("\<^const>Groups.zero_class.zero")))
###           ("_args"
###             ("\<^const>Groups.times_class.times"
###               ("\<^const>Matrix.vec_index" ("_position" v)
###                 ("\<^const>Groups.zero_class.zero"))
###               ("\<^const>Matrix.vec_index" ("_position" w)
###                 ("\<^const>Groups.one_class.one")))
###             ("_args"
###               ("\<^const>Groups.times_class.times"
###                 ("\<^const>Matrix.vec_index" ("_position" v)
###                   ("\<^const>Groups.one_class.one"))
###                 ("\<^const>Matrix.vec_index" ("_position" w)
###                   ("\<^const>Groups.zero_class.zero")))
###               ("\<^const>Groups.times_class.times"
###                 ("\<^const>Matrix.vec_index" ("_position" v)
###                   ("\<^const>Groups.one_class.one"))
###                 ("\<^const>Matrix.vec_index" ("_position" w)
###                   ("\<^const>Groups.one_class.one"))))))))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("\<^const>Tensor.tensor_vec" ("_position" v) ("_position" w))
###     ("_applC" ("_position" vec_of_list)
###       ("_list"
###         ("_args"
###           ("\<^const>Groups.times_class.times"
###             ("\<^const>Matrix.vec_index" ("_position" v)
###               ("\<^const>Groups.zero_class.zero"))
###             ("\<^const>Matrix.vec_index" ("_position" w)
###               ("\<^const>Groups.zero_class.zero")))
###           ("_args"
###             ("\<^const>Groups.times_class.times"
###               ("\<^const>Matrix.vec_index" ("_position" v)
###                 ("\<^const>Groups.zero_class.zero"))
###               ("\<^const>Matrix.vec_index" ("_position" w)
###                 ("\<^const>Groups.one_class.one")))
###             ("_args"
###               ("\<^const>Groups.times_class.times"
###                 ("\<^const>Matrix.vec_index" ("_position" v)
###                   ("\<^const>Groups.one_class.one"))
###                 ("\<^const>Matrix.vec_index" ("_position" w)
###                   ("\<^const>Groups.zero_class.zero")))
###               ("\<^const>Groups.times_class.times"
###                 ("\<^const>Matrix.vec_index" ("_position" v)
###                   ("\<^const>Groups.one_class.one"))
###                 ("\<^const>Matrix.vec_index" ("_position" w)
###                   ("\<^const>Groups.one_class.one"))))))))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 60 of "$AFP/Isabelle_Marries_Dirac/More_Tensor.thy") produces 2 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("\<^const>Group.monoid.mult_indexed" ("_position" v) ("_indexdefault")
###       ("_position" w))
###     ("_applC" ("_position" Matrix.vec)
###       ("_cargs" ("_Numeral" ("_constify" ("_position" 4)))
###         ("_lambda" ("_position" i)
###           ("\<^const>HOL.If"
###             ("\<^const>HOL.eq" ("_position" i)
###               ("\<^const>Groups.zero_class.zero"))
###             ("\<^const>Groups.times_class.times"
###               ("\<^const>Matrix.vec_index" ("_position" v)
###                 ("\<^const>Groups.zero_class.zero"))
###               ("\<^const>Matrix.vec_index" ("_position" w)
###                 ("\<^const>Groups.zero_class.zero")))
###             ("\<^const>HOL.If"
###               ("\<^const>HOL.eq" ("_position" i)
###                 ("_Numeral" ("_constify" ("_position" 3))))
###               ("\<^const>Groups.times_class.times"
###                 ("\<^const>Matrix.vec_index" ("_position" v)
###                   ("\<^const>Groups.one_class.one"))
###                 ("\<^const>Matrix.vec_index" ("_position" w)
###                   ("\<^const>Groups.one_class.one")))
###               ("\<^const>HOL.If"
###                 ("\<^const>HOL.eq" ("_position" i)
###                   ("\<^const>Groups.one_class.one"))
###                 ("\<^const>Groups.times_class.times"
###                   ("\<^const>Matrix.vec_index" ("_position" v)
###                     ("\<^const>Groups.zero_class.zero"))
###                   ("\<^const>Matrix.vec_index" ("_position" w)
###                     ("\<^const>Groups.one_class.one")))
###                 ("\<^const>Groups.times_class.times"
###                   ("\<^const>Matrix.vec_index" ("_position" v)
###                     ("\<^const>Groups.one_class.one"))
###                   ("\<^const>Matrix.vec_index" ("_position" w)
###                     ("\<^const>Groups.zero_class.zero")))))))))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("\<^const>Tensor.tensor_vec" ("_position" v) ("_position" w))
###     ("_applC" ("_position" Matrix.vec)
###       ("_cargs" ("_Numeral" ("_constify" ("_position" 4)))
###         ("_lambda" ("_position" i)
###           ("\<^const>HOL.If"
###             ("\<^const>HOL.eq" ("_position" i)
###               ("\<^const>Groups.zero_class.zero"))
###             ("\<^const>Groups.times_class.times"
###               ("\<^const>Matrix.vec_index" ("_position" v)
###                 ("\<^const>Groups.zero_class.zero"))
###               ("\<^const>Matrix.vec_index" ("_position" w)
###                 ("\<^const>Groups.zero_class.zero")))
###             ("\<^const>HOL.If"
###               ("\<^const>HOL.eq" ("_position" i)
###                 ("_Numeral" ("_constify" ("_position" 3))))
###               ("\<^const>Groups.times_class.times"
###                 ("\<^const>Matrix.vec_index" ("_position" v)
###                   ("\<^const>Groups.one_class.one"))
###                 ("\<^const>Matrix.vec_index" ("_position" w)
###                   ("\<^const>Groups.one_class.one")))
###               ("\<^const>HOL.If"
###                 ("\<^const>HOL.eq" ("_position" i)
###                   ("\<^const>Groups.one_class.one"))
###                 ("\<^const>Groups.times_class.times"
###                   ("\<^const>Matrix.vec_index" ("_position" v)
###                     ("\<^const>Groups.zero_class.zero"))
###                   ("\<^const>Matrix.vec_index" ("_position" w)
###                     ("\<^const>Groups.one_class.one")))
###                 ("\<^const>Groups.times_class.times"
###                   ("\<^const>Matrix.vec_index" ("_position" v)
###                     ("\<^const>Groups.one_class.one"))
###                   ("\<^const>Matrix.vec_index" ("_position" w)
###                     ("\<^const>Groups.zero_class.zero")))))))))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 134 of "$AFP/Isabelle_Marries_Dirac/More_Tensor.thy") produces 2 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("_applC" ("_position" Matrix.col)
###       ("_cargs"
###         ("\<^const>Tensor.tensor_mat" ("_position" v) ("_position" w))
###         ("\<^const>Groups.zero_class.zero")))
###     ("\<^const>Group.monoid.mult_indexed"
###       ("_applC" ("_position" Matrix.col)
###         ("_cargs" ("_position" v) ("\<^const>Groups.zero_class.zero")))
###       ("_indexdefault")
###       ("_applC" ("_position" Matrix.col)
###         ("_cargs" ("_position" w) ("\<^const>Groups.zero_class.zero"))))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("_applC" ("_position" Matrix.col)
###       ("_cargs"
###         ("\<^const>Tensor.tensor_mat" ("_position" v) ("_position" w))
###         ("\<^const>Groups.zero_class.zero")))
###     ("\<^const>Tensor.tensor_vec"
###       ("_applC" ("_position" Matrix.col)
###         ("_cargs" ("_position" v) ("\<^const>Groups.zero_class.zero")))
###       ("_applC" ("_position" Matrix.col)
###         ("_cargs" ("_position" w) ("\<^const>Groups.zero_class.zero"))))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 225 of "$AFP/Isabelle_Marries_Dirac/More_Tensor.thy") produces 2 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("\<^const>Tensor.tensor_mat" ("_position" v) ("_position" w))
###     ("\<^const>Quantum.ket_vec"
###       ("\<^const>Group.monoid.mult_indexed"
###         ("_applC" ("_position" Matrix.col)
###           ("_cargs" ("_position" v) ("\<^const>Groups.zero_class.zero")))
###         ("_indexdefault")
###         ("_applC" ("_position" Matrix.col)
###           ("_cargs" ("_position" w)
###             ("\<^const>Groups.zero_class.zero")))))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("\<^const>Tensor.tensor_mat" ("_position" v) ("_position" w))
###     ("\<^const>Quantum.ket_vec"
###       ("\<^const>Tensor.tensor_vec"
###         ("_applC" ("_position" Matrix.col)
###           ("_cargs" ("_position" v) ("\<^const>Groups.zero_class.zero")))
###         ("_applC" ("_position" Matrix.col)
###           ("_cargs" ("_position" w)
###             ("\<^const>Groups.zero_class.zero")))))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### theory "Draft.More_Tensor"
### 0.155s elapsed time, 0.155s cpu time, 0.000s GC time
Loading theory "Draft.Quantum_Prisoners_Dilemma" (required by "Draft.Quantum_Prisoners_DilemmaTemplates")
locale prisoner
  fixes \<gamma> :: "real"
  assumes "prisoner \<gamma>"
locale strategic_space_2p
  fixes \<gamma> :: "real"
    and \<theta>\<^sub>A :: "real"
    and \<phi>\<^sub>A :: "real"
    and \<theta>\<^sub>B :: "real"
    and \<phi>\<^sub>B :: "real"
  assumes
    "strategic_space_2p \<gamma> \<theta>\<^sub>A \<phi>\<^sub>A
      \<theta>\<^sub>B \<phi>\<^sub>B"
### theory "Draft.Quantum_Prisoners_Dilemma"
### 3.632s elapsed time, 4.207s cpu time, 0.976s GC time
Loading theory "Draft.Quantum_Prisoners_DilemmaTemplates"
val templateLemmas =
   [("Quantum_Prisoners_Dilemma.exp_to_cos",
     "exp (\<i> * complex_of_real ?x) +
      exp (- (\<i> * complex_of_real ?x)) =
      complex_of_real (2 * cos ?x)",
     template_equation
      (template_app
        (template_app
          (template_hole 10,
           template_app
            (template_hole 9,
             template_app
              (template_app (template_hole 8, template_hole 7),
               template_app (template_hole 6, template_var 0)))),
         template_app
          (template_hole 9,
           template_app
            (template_hole 5,
             template_app
              (template_app (template_hole 8, template_hole 7),
               template_app (template_hole 6, template_var 0))))),
       template_app
        (template_hole 6,
         template_app
          (template_app
            (template_hole 4,
             template_app
              (template_hole 3,
               template_app (template_hole 2, template_hole 1))),
           template_app (template_hole 0, template_var 0))))),
    ("Quantum_Prisoners_Dilemma.cmod_real_prod_squared",
     "(cmod (complex_of_real ?x * complex_of_real ?y))\<^sup>2 =
      ?x\<^sup>2 * ?y\<^sup>2",
     template_equation
      (template_app
        (template_app
          (template_hole 7,
           template_app
            (template_hole 6,
             template_app
              (template_app
                (template_hole 5,
                 template_app (template_hole 4, template_var 1)),
               template_app (template_hole 4, template_var 0)))),
         template_app
          (template_hole 3,
           template_app (template_hole 2, template_hole 1))),
       template_app
        (template_app
          (template_hole 0,
           template_app
            (template_app (template_hole 7, template_var 1),
             template_app
              (template_hole 3,
               template_app (template_hole 2, template_hole 1)))),
         template_app
          (template_app (template_hole 7, template_var 0),
           template_app
            (template_hole 3,
             template_app (template_hole 2, template_hole 1)))))),
    ("Quantum_Prisoners_Dilemma.exp_to_sin",
     "exp (\<i> * complex_of_real ?x) -
      exp (- (\<i> * complex_of_real ?x)) =
      2 * \<i> * complex_of_real (sin ?x)",
     template_equation
      (template_app
        (template_app
          (template_hole 9,
           template_app
            (template_hole 8,
             template_app
              (template_app (template_hole 7, template_hole 6),
               template_app (template_hole 5, template_var 0)))),
         template_app
          (template_hole 8,
           template_app
            (template_hole 4,
             template_app
              (template_app (template_hole 7, template_hole 6),
               template_app (template_hole 5, template_var 0))))),
       template_app
        (template_app
          (template_hole 7,
           template_app
            (template_app
              (template_hole 7,
               template_app
                (template_hole 3,
                 template_app (template_hole 2, template_hole 1))),
             template_hole 6)),
         template_app
          (template_hole 5,
           template_app (template_hole 0, template_var 0))))),
    ("Quantum_Prisoners_Dilemma.hidden_sqrt_two_squared_cpx2",
     "complex_of_real (sqrt 2) * (complex_of_real (sqrt 2) * (?x * ?y)) /
      2 =
      ?x * ?y",
     template_equation
      (template_app
        (template_app
          (template_hole 7,
           template_app
            (template_app
              (template_hole 6,
               template_app
                (template_hole 5,
                 template_app
                  (template_hole 4,
                   template_app
                    (template_hole 3,
                     template_app (template_hole 2, template_hole 1))))),
             template_app
              (template_app
                (template_hole 6,
                 template_app
                  (template_hole 5,
                   template_app
                    (template_hole 4,
                     template_app
                      (template_hole 3,
                       template_app (template_hole 2, template_hole 1))))),
               template_app
                (template_app (template_hole 6, template_var 1),
                 template_var 0)))),
         template_app
          (template_hole 0,
           template_app (template_hole 2, template_hole 1))),
       template_app
        (template_app (template_hole 6, template_var 1), template_var 0))),
    ("Quantum_Prisoners_Dilemma.hidden_sqrt_two_squared_cpx",
     "complex_of_real (sqrt 2) * (complex_of_real (sqrt 2) * ?x) / 4 =
      ?x / 2",
     template_equation
      (template_app
        (template_app
          (template_hole 7,
           template_app
            (template_app
              (template_hole 6,
               template_app
                (template_hole 5,
                 template_app
                  (template_hole 4,
                   template_app
                    (template_hole 3,
                     template_app (template_hole 2, template_hole 1))))),
             template_app
              (template_app
                (template_hole 6,
                 template_app
                  (template_hole 5,
                   template_app
                    (template_hole 4,
                     template_app
                      (template_hole 3,
                       template_app (template_hole 2, template_hole 1))))),
               template_var 0))),
         template_app
          (template_hole 0,
           template_app
            (template_hole 2,
             template_app (template_hole 2, template_hole 1)))),
       template_app
        (template_app (template_hole 7, template_var 0),
         template_app
          (template_hole 0,
           template_app (template_hole 2, template_hole 1))))),
    ("Quantum_Prisoners_Dilemma.quantum_payoff_le_3",
     "2 * (sin ?x)\<^sup>2 * (cos ?y)\<^sup>2 + (cos ?y)\<^sup>2 <= 3",
     template_inequation
      (less_equals,
       template_app
        (template_app
          (template_hole 9,
           template_app
            (template_app
              (template_hole 8,
               template_app
                (template_app
                  (template_hole 8,
                   template_app
                    (template_hole 7,
                     template_app (template_hole 6, template_hole 5))),
                 template_app
                  (template_app
                    (template_hole 4,
                     template_app (template_hole 3, template_var 1)),
                   template_app
                    (template_hole 2,
                     template_app (template_hole 6, template_hole 5))))),
             template_app
              (template_app
                (template_hole 4,
                 template_app (template_hole 1, template_var 0)),
               template_app
                (template_hole 2,
                 template_app (template_hole 6, template_hole 5))))),
         template_app
          (template_app
            (template_hole 4,
             template_app (template_hole 1, template_var 0)),
           template_app
            (template_hole 2,
             template_app (template_hole 6, template_hole 5)))),
       template_app
        (template_hole 7,
         template_app (template_hole 0, template_hole 5)))),
    ("Quantum_Prisoners_Dilemma.exp_sin_cos_squared_add",
     "exp (- (\<i> * complex_of_real ?x)) * complex_of_real (cos ?y) *
      (exp (\<i> * complex_of_real ?x) * complex_of_real (cos ?y)) +
      complex_of_real (sin ?y * sin ?y) =
      1",
     template_equation
      (template_app
        (template_app
          (template_hole 9,
           template_app
            (template_app
              (template_hole 8,
               template_app
                (template_app
                  (template_hole 8,
                   template_app
                    (template_hole 7,
                     template_app
                      (template_hole 6,
                       template_app
                        (template_app (template_hole 8, template_hole 5),
                         template_app (template_hole 4, template_var 1))))),
                 template_app
                  (template_hole 4,
                   template_app (template_hole 3, template_var 0)))),
             template_app
              (template_app
                (template_hole 8,
                 template_app
                  (template_hole 7,
                   template_app
                    (template_app (template_hole 8, template_hole 5),
                     template_app (template_hole 4, template_var 1)))),
               template_app
                (template_hole 4,
                 template_app (template_hole 3, template_var 0))))),
         template_app
          (template_hole 4,
           template_app
            (template_app
              (template_hole 2,
               template_app (template_hole 1, template_var 0)),
             template_app (template_hole 1, template_var 0)))),
       template_hole 0)),
    ("Quantum_Prisoners_Dilemma.cos_sin_squared_add_cpx",
     "complex_of_real (cos (?\<gamma> / 2)) *
      complex_of_real (cos (?\<gamma> / 2)) -
      \<i> * complex_of_real (sin (?\<gamma> / 2)) *
      (\<i> * complex_of_real (sin (?\<gamma> / 2))) =
      1",
     template_equation
      (template_app
        (template_app
          (template_hole 10,
           template_app
            (template_app
              (template_hole 9,
               template_app
                (template_hole 8,
                 template_app
                  (template_hole 7,
                   template_app
                    (template_app (template_hole 6, template_var 0),
                     template_app
                      (template_hole 5,
                       template_app (template_hole 4, template_hole 3)))))),
             template_app
              (template_hole 8,
               template_app
                (template_hole 7,
                 template_app
                  (template_app (template_hole 6, template_var 0),
                   template_app
                    (template_hole 5,
                     template_app (template_hole 4, template_hole 3))))))),
         template_app
          (template_app
            (template_hole 9,
             template_app
              (template_app (template_hole 9, template_hole 2),
               template_app
                (template_hole 8,
                 template_app
                  (template_hole 1,
                   template_app
                    (template_app (template_hole 6, template_var 0),
                     template_app
                      (template_hole 5,
                       template_app
                        (template_hole 4, template_hole 3))))))),
           template_app
            (template_app (template_hole 9, template_hole 2),
             template_app
              (template_hole 8,
               template_app
                (template_hole 1,
                 template_app
                  (template_app (template_hole 6, template_var 0),
                   template_app
                    (template_hole 5,
                     template_app (template_hole 4, template_hole 3)))))))),
       template_hole 0)),
    ("Quantum_Prisoners_Dilemma.sin_cos_squared_add_cpx",
     "\<i> * complex_of_real (sin (?\<gamma> / 2)) *
      (\<i> * complex_of_real (sin (?\<gamma> / 2))) -
      complex_of_real (cos (?\<gamma> / 2)) *
      complex_of_real (cos (?\<gamma> / 2)) =
      - 1",
     template_equation
      (template_app
        (template_app
          (template_hole 11,
           template_app
            (template_app
              (template_hole 10,
               template_app
                (template_app (template_hole 10, template_hole 9),
                 template_app
                  (template_hole 8,
                   template_app
                    (template_hole 7,
                     template_app
                      (template_app (template_hole 6, template_var 0),
                       template_app
                        (template_hole 5,
                         template_app
                          (template_hole 4, template_hole 3))))))),
             template_app
              (template_app (template_hole 10, template_hole 9),
               template_app
                (template_hole 8,
                 template_app
                  (template_hole 7,
                   template_app
                    (template_app (template_hole 6, template_var 0),
                     template_app
                      (template_hole 5,
                       template_app
                        (template_hole 4, template_hole 3)))))))),
         template_app
          (template_app
            (template_hole 10,
             template_app
              (template_hole 8,
               template_app
                (template_hole 2,
                 template_app
                  (template_app (template_hole 6, template_var 0),
                   template_app
                    (template_hole 5,
                     template_app (template_hole 4, template_hole 3)))))),
           template_app
            (template_hole 8,
             template_app
              (template_hole 2,
               template_app
                (template_app (template_hole 6, template_var 0),
                 template_app
                  (template_hole 5,
                   template_app (template_hole 4, template_hole 3))))))),
       template_app (template_hole 1, template_hole 0))),
    ("Quantum_Prisoners_Dilemma.quantum_payoff_simp",
     "3 *
      (cmod (complex_of_real (sin ?x) * complex_of_real (cos ?y)))\<^sup>2 +
      (cmod (complex_of_real (cos ?x) * complex_of_real (cos ?y)))\<^sup>2 =
      2 * (sin ?x)\<^sup>2 * (cos ?y)\<^sup>2 + (cos ?y)\<^sup>2",
     template_equation
      (template_app
        (template_app
          (template_hole 12,
           template_app
            (template_app
              (template_hole 11,
               template_app
                (template_hole 10,
                 template_app (template_hole 9, template_hole 8))),
             template_app
              (template_app
                (template_hole 7,
                 template_app
                  (template_hole 6,
                   template_app
                    (template_app
                      (template_hole 5,
                       template_app
                        (template_hole 4,
                         template_app (template_hole 3, template_var 1))),
                     template_app
                      (template_hole 4,
                       template_app (template_hole 2, template_var 0))))),
               template_app
                (template_hole 1,
                 template_app (template_hole 0, template_hole 8))))),
         template_app
          (template_app
            (template_hole 7,
             template_app
              (template_hole 6,
               template_app
                (template_app
                  (template_hole 5,
                   template_app
                    (template_hole 4,
                     template_app (template_hole 2, template_var 1))),
                 template_app
                  (template_hole 4,
                   template_app (template_hole 2, template_var 0))))),
           template_app
            (template_hole 1,
             template_app (template_hole 0, template_hole 8)))),
       template_app
        (template_app
          (template_hole 12,
           template_app
            (template_app
              (template_hole 11,
               template_app
                (template_app
                  (template_hole 11,
                   template_app
                    (template_hole 10,
                     template_app (template_hole 0, template_hole 8))),
                 template_app
                  (template_app
                    (template_hole 7,
                     template_app (template_hole 3, template_var 1)),
                   template_app
                    (template_hole 1,
                     template_app (template_hole 0, template_hole 8))))),
             template_app
              (template_app
                (template_hole 7,
                 template_app (template_hole 2, template_var 0)),
               template_app
                (template_hole 1,
                 template_app (template_hole 0, template_hole 8))))),
         template_app
          (template_app
            (template_hole 7,
             template_app (template_hole 2, template_var 0)),
           template_app
            (template_hole 1,
             template_app (template_hole 0, template_hole 8))))))]:
   (string * thm * template) list
### theory "Draft.Quantum_Prisoners_DilemmaTemplates"
### 0.757s elapsed time, 0.924s cpu time, 0.083s GC time
val it = (): unit
