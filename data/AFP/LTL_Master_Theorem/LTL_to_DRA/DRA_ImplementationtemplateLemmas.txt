   [("DRA_Implementation.atoms_ltlc_list_distinct",
     "distinct (atoms_ltlc_list ?\<phi>)",
     template_predicate
      (
         template_app
          (template_hole 1, template_app (template_hole 0, template_var 0))
         )),
    ("DRA_Implementation.atoms_ltlc_list_set",
     "set (atoms_ltlc_list ?\<phi>) = atoms_ltlc ?\<phi>",
     template_equation
      (template_app
        (template_hole 2, template_app (template_hole 1, template_var 0)),
       template_app (template_hole 0, template_var 0))),
    ("DRA_Implementation.dra_to_drai_language",
     "set ?\<Sigma> = dra.alphabet ?\<AA> ==>
      DRA.language (drai_dra (dra_to_drai ?\<AA> ?\<Sigma>)) =
      DRA.language ?\<AA>",
     template_implication
      ([template_equation
         (template_app (template_hole 5, template_var 1),
          template_app (template_hole 4, template_var 0))],
       template_equation
        (template_app
          (template_hole 2,
           template_app
            (template_hole 1,
             template_app
              (template_app (template_hole 0, template_var 0),
               template_var 1))),
         template_app (template_hole 2, template_var 0)))),
    ("DRA_Implementation.dra_to_drai_rel",
     "(?\<Sigma>, dra.alphabet ?A) : \<langle>Id\<rangle>list_set_rel ==>
      (dra_to_drai ?A ?\<Sigma>, ?A) : \<langle>Id,
      Id\<rangle>drai_dra_rel",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_hole 12,
                template_app
                 (template_app (template_hole 11, template_var 1),
                  template_app (template_hole 10, template_var 0))),
              template_app
               (template_app (template_hole 9, template_hole 8),
                template_hole 7))
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 6,
               template_app
                (template_app
                  (template_hole 5,
                   template_app
                    (template_app (template_hole 4, template_var 0),
                     template_var 1)),
                 template_var 0)),
             template_app
              (template_app
                (template_hole 3,
                 template_app
                  (template_app (template_hole 2, template_hole 1),
                   template_hole 7)),
               template_hole 0))
           ))),
    ("DRA_Implementation.draei_language_rel",
     "[| (?\<Sigma>, dra.alphabet ?A) : \<langle>Id\<rangle>list_set_rel;
         finite (DRA.nodes ?A); is_valid_def_hm_size TYPE(?'state) ?hms |]
      ==> DRA.language
           (drae_dra
             (draei_drae (drai_to_draei ?hms (dra_to_drai ?A ?\<Sigma>)))) =
          DRA.language ?A",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_hole 16,
                template_app
                 (template_app (template_hole 15, template_var 2),
                  template_app (template_hole 14, template_var 1))),
              template_app
               (template_app (template_hole 13, template_hole 12),
                template_hole 11))
            ),
        template_predicate
         (
            template_app
             (template_hole 10,
              template_app (template_hole 9, template_var 1))
            ),
        template_predicate
         (
            template_app
             (template_app (template_hole 8, template_hole 7),
              template_var 0)
            )],
       template_equation
        (template_app
          (template_hole 5,
           template_app
            (template_hole 4,
             template_app
              (template_hole 3,
               template_app
                (template_app (template_hole 2, template_var 0),
                 template_app
                  (template_app (template_hole 1, template_var 1),
                   template_var 2))))),
         template_app (template_hole 0, template_var 1))))]
