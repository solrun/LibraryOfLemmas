Loading theory "HOL-Library.Stream" (required by "Draft.Ex_Affine_ApproximationTemplates" via "Draft.ExtrEqs")
Loading theory "HOL-Library.Function_Algebras" (required by "Draft.Ex_Affine_ApproximationTemplates" via "Draft.ExtrEqs" via "HOL-Library.BigO")
Loading theory "Draft.Optimize_Integer" (required by "Draft.Ex_Affine_ApproximationTemplates" via "Draft.Ex_Affine_Approximation" via "Draft.Print" via "Draft.Optimize_Float")
Loading theory "HOL-Library.Tree" (required by "Draft.Ex_Affine_ApproximationTemplates" via "Draft.ExtrEqs" via "Draft.Templates")
instantiation
  fun :: (type, plus) plus
  plus_fun == plus :: ('a => 'b) => ('a => 'b) => 'a => 'b
instantiation
  fun :: (type, zero) zero
  zero_fun == zero_class.zero :: 'a => 'b
instantiation
  fun :: (type, times) times
  times_fun == times :: ('a => 'b) => ('a => 'b) => 'a => 'b
instantiation
  fun :: (type, one) one
  one_fun == one_class.one :: 'a => 'b
### theory "HOL-Library.Function_Algebras"
### 0.156s elapsed time, 0.615s cpu time, 0.090s GC time
Loading theory "HOL-Library.BigO" (required by "Draft.Ex_Affine_ApproximationTemplates" via "Draft.ExtrEqs")
### theory "Draft.Optimize_Integer"
### 0.343s elapsed time, 1.370s cpu time, 0.090s GC time
Loading theory "Draft.Optimize_Float" (required by "Draft.Ex_Affine_ApproximationTemplates" via "Draft.Ex_Affine_Approximation" via "Draft.Print")
consts
  shift :: "'a list => 'a stream => 'a stream"
Proofs for coinductive predicate(s) "streamsp"
  Proving monotonicity ...
consts
  snth :: "'a stream => nat => 'a"
consts
  stake :: "nat => 'a stream => 'a list"
consts
  sdrop :: "nat => 'a stream => 'a stream"
consts
  sfilter :: "('a => bool) => 'a stream => 'a stream"
### Code generator: dropping subsumed code equation
### bitlen ?x == if 0 < ?x then bitlen (?x div 2) + 1 else 0
### Code generator: dropping subsumed code equation
### Float ?m1.0 ?e1.0 + Float ?m2.0 ?e2.0 ==
### if ?m1.0 = 0 then Float ?m2.0 ?e2.0
### else if ?m2.0 = 0 then Float ?m1.0 ?e1.0
###      else if ?e1.0 <= ?e2.0
###           then Float (?m1.0 + ?m2.0 * 2 ^ nat (?e2.0 - ?e1.0)) ?e1.0
###           else Float (?m2.0 + ?m1.0 * 2 ^ nat (?e1.0 - ?e2.0)) ?e2.0
consts
  cycle :: "'a list => 'a stream"
### Code generator: dropping subsumed code equation
### real_of_float (Float ?m ?e) ==
### if 0 <= ?e then real_of_int ?m * 2 ^ nat ?e
### else real_of_int ?m / 2 ^ nat (- ?e)
### Code generator: dropping subsumed code equation
### float_down ?p (Float ?m ?e) ==
### if ?p + ?e < 0 then Float (div_twopow ?m (nat (- (?p + ?e)))) (- ?p)
### else Float ?m ?e
### Code generator: dropping subsumed code equation
### lapprox_posrat ?prec ?x ?y ==
### let l = rat_precision ?prec (int ?x) (int ?y);
###     x = if 0 <= l then ?x * 2 ^ nat l div ?y
###         else ?x div 2 ^ nat (- l) div ?y
### in normfloat (Float (int x) (- l))
### Code generator: dropping subsumed code equation
### rapprox_posrat ?prec ?x ?y ==
### let l = rat_precision ?prec (int ?x) (int ?y);
###     (r, s) =
###       if 0 <= l then (int ?x * 2 ^ nat l, int ?y)
###       else (int ?x, int ?y * 2 ^ nat (- l));
###     d = r div s; m = r mod s
### in normfloat (Float (d + (if m = 0 | ?y = 0 then 0 else 1)) (- l))
consts
  siterate :: "('a => 'a) => 'a => 'a stream"
### Code generator: dropping subsumed code equation
### float_round_down ?prec (Float ?m ?e) ==
### let d = bitlen \<bar>?m\<bar> - int ?prec - 1
### in if 0 < d then Float (div_twopow ?m (nat d)) (?e + d) else Float ?m ?e
### Code generator: dropping subsumed code equation
### int_floor_fl (Float ?m ?e) ==
### if 0 <= ?e then ?m * 2 ^ nat ?e else ?m div 2 ^ nat (- ?e)
### Code generator: dropping subsumed code equation
### floor_fl (Float ?m ?e) ==
### if 0 <= ?e then Float ?m ?e else Float (?m div 2 ^ nat (- ?e)) 0
### theory "Draft.Optimize_Float"
### 0.464s elapsed time, 1.787s cpu time, 0.181s GC time
Loading theory "Draft.Float_Real" (required by "Draft.Ex_Affine_ApproximationTemplates" via "Draft.Ex_Affine_Approximation")
consts
  left :: "'a tree => 'a tree"
consts
  right :: "'a tree => 'a tree"
consts
  flat :: "'a list stream => 'a stream"
### Code generator: dropping subsumed code equation
### 0 == Ratreal 0
### Code generator: dropping subsumed code equation
### 1 == Ratreal 1
### Constructor as head in equation, in theorem:
### real_of_float (Float ?m ?e) ==
### if 0 <= ?e then real_of_int ?m * 2 ^ nat ?e
### else real_of_int ?m / real_of_int (Optimize_Integer.power_int 2 (- ?e))
consts
  sinterleave :: "'a stream => 'a stream => 'a stream"
Found termination order: "size <*mlex*> {}"
consts
  szip :: "'a stream => 'b stream => ('a * 'b) stream"
### theory "Draft.Float_Real"
### 0.186s elapsed time, 0.708s cpu time, 0.126s GC time
Loading theory "Draft.Affine_Arithmetic_Auxiliarities" (required by "Draft.Ex_Affine_ApproximationTemplates" via "Draft.Ex_Affine_Approximation" via "Draft.Affine_Code" via "Draft.Affine_Approximation" via "Draft.Executable_Euclidean_Space")
consts
  smap2 :: "('a => 'b => 'c) => 'a stream => 'b stream => 'c stream"
Found termination order: "size <*mlex*> {}"
### theory "HOL-Library.Stream"
### 1.047s elapsed time, 4.068s cpu time, 0.397s GC time
Loading theory "Draft.Counterclockwise" (required by "Draft.Ex_Affine_ApproximationTemplates" via "Draft.Ex_Affine_Approximation" via "Draft.Affine_Code" via "Draft.Intersection" via "Draft.Polygon" via "Draft.Counterclockwise_2D_Strict" via "Draft.Counterclockwise_Vector")
### theory "HOL-Library.BigO"
### 0.893s elapsed time, 3.472s cpu time, 0.307s GC time
Found termination order: "size <*mlex*> {}"
### theory "Draft.Affine_Arithmetic_Auxiliarities"
### 0.132s elapsed time, 0.476s cpu time, 0.000s GC time
Loading theory "Draft.Executable_Euclidean_Space" (required by "Draft.Ex_Affine_ApproximationTemplates" via "Draft.Ex_Affine_Approximation" via "Draft.Affine_Code" via "Draft.Affine_Approximation")
class height = type +
  fixes height :: "'a => nat"
instantiation
  tree :: (type) height
  height_tree == height :: 'a tree => nat
locale linorder_list0
  fixes le :: "'a => 'a => bool"
Found termination order: "size <*mlex*> {}"
Found termination order: "size <*mlex*> {}"
Found termination order: "size <*mlex*> {}"
Proofs for inductive predicate(s) "sortedP"
  Proving monotonicity ...
Found termination order: "size <*mlex*> {}"
locale linorder_list
  fixes le :: "'a => 'a => bool"
    and S :: "'a set"
  assumes "linorder_list le S"
Found termination order: "size <*mlex*> {}"
locale ccw_system0
  fixes ccw :: "'a => 'a => 'a => bool"
    and S :: "'a set"
locale ccw_system12
  fixes ccw :: "'a => 'a => 'a => bool"
    and S :: "'a set"
  assumes "ccw_system12 ccw S"
locale ccw_system123
  fixes ccw :: "'a => 'a => 'a => bool"
    and S :: "'a set"
  assumes "ccw_system123 ccw S"
Found termination order: "size <*mlex*> {}"
locale ccw_system4
  fixes ccw :: "'a => 'a => 'a => bool"
    and S :: "'a set"
  assumes "ccw_system4 ccw S"
locale ccw_system1235'
  fixes ccw :: "'a => 'a => 'a => bool"
    and S :: "'a set"
  assumes "ccw_system1235' ccw S"
Found termination order: "size <*mlex*> {}"
locale ccw_system1235
  fixes ccw :: "'a => 'a => 'a => bool"
    and S :: "'a set"
  assumes "ccw_system1235 ccw S"
locale ccw_system
  fixes ccw :: "'a => 'a => 'a => bool"
    and S :: "'a set"
  assumes "ccw_system ccw S"
### theory "Draft.Counterclockwise"
### 0.853s elapsed time, 2.625s cpu time, 0.757s GC time
Loading theory "Draft.Counterclockwise_Vector" (required by "Draft.Ex_Affine_ApproximationTemplates" via "Draft.Ex_Affine_Approximation" via "Draft.Affine_Code" via "Draft.Intersection" via "Draft.Polygon" via "Draft.Counterclockwise_2D_Strict")
Found termination order: "(%p. size (fst p)) <*mlex*> {}"
locale ccw_vector_space
  fixes ccw :: "'a => 'a => 'a => bool"
    and S :: "'a set"
  assumes "ccw_vector_space ccw S"
Found termination order: "size <*mlex*> {}"
locale ccw_convex
  fixes ccw :: "'a => 'a => 'a => bool"
    and S :: "'a set"
    and oriented :: "'a => 'a => bool"
  assumes "ccw_convex ccw S oriented"
### theory "Draft.Counterclockwise_Vector"
### 0.195s elapsed time, 0.581s cpu time, 0.079s GC time
Loading theory "Draft.Counterclockwise_2D_Strict" (required by "Draft.Ex_Affine_ApproximationTemplates" via "Draft.Ex_Affine_Approximation" via "Draft.Affine_Code" via "Draft.Intersection" via "Draft.Polygon")
Found termination order: "(%p. size (snd p)) <*mlex*> {}"
Found termination order: "{}"
Found termination order: "size <*mlex*> {}"
### theory "HOL-Library.Tree"
### 2.596s elapsed time, 8.791s cpu time, 1.366s GC time
Loading theory "Draft.Templates" (required by "Draft.Ex_Affine_ApproximationTemplates" via "Draft.ExtrEqs")
datatype template_term
=
     t_empty
   | template_app of template_term * template_term
   | template_hole of int
   | template_var of int
datatype sign
= equals | greater_equals | greater_than | less_equals | less_than
datatype template
=
     template_bimplication of template * template
   | template_dunno
   | template_equation of template_term * template_term
   | template_implication of template list * template
   | template_inequation of sign * template_term * template_term
   | template_negation of template
   | template_predicate of template_term
constructor t_empty: template_term
constructor template_app: template_term * template_term -> template_term
constructor template_hole: int -> template_term
constructor template_var: int -> template_term
constructor equals: sign
constructor greater_equals: sign
constructor greater_than: sign
constructor less_equals: sign
constructor less_than: sign
constructor template_bimplication: template * template -> template
constructor template_dunno: template
constructor template_equation: template_term * template_term -> template
constructor template_implication: template list * template -> template
constructor template_inequation:
   sign * template_term * template_term -> template
constructor template_negation: template -> template
constructor template_predicate: template_term -> template
val vfs = fn: term -> (indexname * typ) list * (string * typ) list
val indexOf = fn: ''a list -> ''a -> int -> int
val has_eq = fn: term -> bool
val term2template = fn:
   (indexname * typ) list -> (string * typ) list -> term -> template_term
val lemma2predicate = fn: term -> term -> template
val makeTemplatewithContext = fn: term -> term -> template
val lemma2template = fn: term -> template
val thm2template = fn: thm -> template
val tterm2string = fn: template_term -> string
val template2string = fn: template -> string
val t = "height ?t <= size ?t": thm
val th =
   Const ("HOL.Trueprop", "bool => prop") $
     (Const ("Orderings.ord_class.less_eq", "nat => nat => bool") $
       (Const ("Tree.height_class.height", "?'a tree => nat") $
         Var (("t", 0), "?'a tree")) $
       (Const ("Nat.size_class.size", "?'a tree => nat") $
         Var (("t", 0), "?'a tree"))):
   term
### theory "Draft.Templates"
### 0.067s elapsed time, 0.224s cpu time, 0.000s GC time
Loading theory "Draft.ExtrEqs" (required by "Draft.Ex_Affine_ApproximationTemplates")
### theory "Draft.Counterclockwise_2D_Strict"
### 0.564s elapsed time, 1.722s cpu time, 0.132s GC time
Loading theory "Draft.Counterclockwise_2D_Arbitrary" (required by "Draft.Ex_Affine_ApproximationTemplates" via "Draft.Ex_Affine_Approximation" via "Draft.Affine_Code" via "Draft.Intersection")
Loading theory "Draft.Polygon" (required by "Draft.Ex_Affine_ApproximationTemplates" via "Draft.Ex_Affine_Approximation" via "Draft.Affine_Code" via "Draft.Intersection")
Found termination order: "{}"
consts
  polychain_of :: "'a => 'a list => ('a * 'a) list"
consts
  dirvec :: "'a * 'a => 'a"
### theory "Draft.Polygon"
### 0.687s elapsed time, 2.521s cpu time, 0.988s GC time
### theory "Draft.Counterclockwise_2D_Arbitrary"
### 0.800s elapsed time, 2.862s cpu time, 1.083s GC time
val eqpattern =
   Pattern
    (
       Const ("HOL.Trueprop", "bool => prop") $
         (Const ("HOL.eq", "?'a => ?'a => bool") $
           Var (("_dummy_", 1), "?'a") $ Var (("_dummy_", 2), "?'a"))
       ):
   term Find_Theorems.criterion
val badeqpattern = Pattern (Const ("Pure.eq", "?'a => ?'a => prop")):
   term Find_Theorems.criterion
val undefpattern =
   Pattern
    (
       Const ("HOL.Trueprop", "bool => prop") $
         (Const ("HOL.eq", "?'a => ?'a => bool") $
           Var (("_dummy_", 1), "?'a") $ Const ("HOL.undefined", "?'a"))
       ):
   term Find_Theorems.criterion
val thmpattern =
   Pattern
    (Const ("HOL.Trueprop", "bool => prop") $ Var (("_dummy_", 1), "bool")):
   term Find_Theorems.criterion
val badnames =
   ["*nitpick*", "*Nitpick*", "*full_exhaustive*", "*_def*", "Enum.finite*",
    "*Quickcheck*", "ATP*", "*Nunchaku*", "*Code*", "*BNF*", "*SMT*",
    "*.*.*"]:
   string list
val unwanted_names =
   [(false, Name "*nitpick*"), (false, Name "*Nitpick*"),
    (false, Name "*full_exhaustive*"), (false, Name "*_def*"),
    (false, Name "Enum.finite*"), (false, Name "*Quickcheck*"),
    (false, Name "ATP*"), (false, Name "*Nunchaku*"),
    (false, Name "*Code*"), (false, Name "*BNF*"), (false, Name "*SMT*"),
    (false, Name "*.*.*")]:
   (bool * term Find_Theorems.criterion) list
val has_vars = fn: term -> bool
val get_all_eqs = fn: string -> Proof.context -> (string * thm) list
val get_all_thms = fn: string -> Proof.context -> (string * thm) list
val get_noneq_thms = fn: string -> Proof.context -> (string * thm) list
val template_eqs = fn:
   string -> Proof.context -> (string * thm * template) list
val template_thms = fn:
   string -> Proof.context -> (string * thm * template) list
### theory "Draft.ExtrEqs"
### 0.992s elapsed time, 3.288s cpu time, 1.083s GC time
class executable_euclidean_space = ordered_euclidean_space +
  fixes Basis_list :: "'a list"
    and eucl_down :: "int => 'a => 'a"
    and eucl_truncate_down :: "nat => 'a => 'a"
    and eucl_truncate_up :: "nat => 'a => 'a"
  assumes
    "eucl_down_def":
      "!!p b.
          eucl_down p b =
          (SUM i:Basis. round_down p (b \<bullet> i) *\<^sub>R i)"
  assumes
    "eucl_truncate_down_def":
      "!!q b.
          eucl_truncate_down q b =
          (SUM i:Basis. truncate_down q (b \<bullet> i) *\<^sub>R i)"
  assumes
    "eucl_truncate_up_def":
      "!!q b.
          eucl_truncate_up q b =
          (SUM i:Basis. truncate_up q (b \<bullet> i) *\<^sub>R i)"
  assumes "Basis_list": "set Basis_list = Basis"
  assumes "distinct_Basis_list": "distinct Basis_list"
instantiation
  real :: executable_euclidean_space
  Basis_list_real == Basis_list :: real list
  eucl_down_real == eucl_down :: int => real => real
  eucl_truncate_down_real == eucl_truncate_down :: nat => real => real
  eucl_truncate_up_real == eucl_truncate_up :: nat => real => real
instantiation
  prod :: (executable_euclidean_space, executable_euclidean_space)
    executable_euclidean_space
  Basis_list_prod == Basis_list :: ('a * 'b) list
  eucl_down_prod == eucl_down :: int => 'a * 'b => 'a * 'b
  eucl_truncate_down_prod == eucl_truncate_down :: nat => 'a * 'b => 'a * 'b
  eucl_truncate_up_prod == eucl_truncate_up :: nat => 'a * 'b => 'a * 'b
instantiation
  vec :: (executable_euclidean_space, enum) executable_euclidean_space
  Basis_list_vec == Basis_list :: ('a, 'b) vec list
  eucl_down_vec == eucl_down :: int => ('a, 'b) vec => ('a, 'b) vec
  eucl_truncate_down_vec == eucl_truncate_down ::
    nat => ('a, 'b) vec => ('a, 'b) vec
  eucl_truncate_up_vec == eucl_truncate_up ::
    nat => ('a, 'b) vec => ('a, 'b) vec
locale blinfun_syntax
### theory "Draft.Executable_Euclidean_Space"
### 3.713s elapsed time, 9.239s cpu time, 2.149s GC time
Loading theory "Draft.Affine_Form" (required by "Draft.Ex_Affine_ApproximationTemplates" via "Draft.Ex_Affine_Approximation" via "Draft.Affine_Code" via "Draft.Affine_Approximation")
Loading theory "Draft.Floatarith_Expression" (required by "Draft.Ex_Affine_ApproximationTemplates" via "Draft.Ex_Affine_Approximation" via "Draft.Affine_Code" via "Draft.Affine_Approximation" via "Draft.Straight_Line_Program")
consts
  interpret_floatariths :: "floatarith list => real list => real list"
instantiation
  floatarith :: {inverse,minus,one,plus,times,uminus,zero}
  zero_floatarith == zero_class.zero :: floatarith
  uminus_floatarith == uminus :: floatarith => floatarith
  times_floatarith == times :: floatarith => floatarith => floatarith
  plus_floatarith == plus :: floatarith => floatarith => floatarith
  one_floatarith == one_class.one :: floatarith
  minus_floatarith == minus :: floatarith => floatarith => floatarith
  inverse_floatarith == inverse :: floatarith => floatarith
  divide_floatarith == divide :: floatarith => floatarith => floatarith
consts
  Sum\<^sub>e :: "('a => 'b) => 'a list => 'b"
instantiation
  pdevs :: (equal) equal
  equal_pdevs == equal_class.equal :: 'a pdevs => 'a pdevs => bool
Found termination order: "{}"
Found termination order: "size <*mlex*> {}"
consts
  max_Var_floatarith :: "floatarith => nat"
consts
  max_Var_floatariths :: "floatarith list => nat"
consts
  max_Var_form :: "form => nat"
### theory "Draft.Affine_Form"
### 2.495s elapsed time, 5.800s cpu time, 1.558s GC time
Loading theory "Draft.Intersection" (required by "Draft.Ex_Affine_ApproximationTemplates" via "Draft.Ex_Affine_Approximation" via "Draft.Affine_Code")
consts
  fresh_floatarith :: "floatarith => nat => bool"
consts
  fresh_floatariths :: "floatarith list => nat => bool"
Found termination order: "(%p. size_list size (snd p)) <*mlex*> {}"
### ML warning (line 976 of "$AFP/Affine_Arithmetic/Floatarith_Expression.thy"):
### Pattern is not exhaustive.
### ML warning (line 978 of "$AFP/Affine_Arithmetic/Floatarith_Expression.thy"):
### Pattern is not exhaustive.
### ML warning (line 1013 of "$AFP/Affine_Arithmetic/Floatarith_Expression.thy"):
### Pattern is not exhaustive.
### ML warning (line 1031 of "$AFP/Affine_Arithmetic/Floatarith_Expression.thy"):
### Pattern is not exhaustive.
val mk_congeq = fn: Proof.context -> term list -> thm -> string list * thm
val mk_congs = fn:
   Proof.context ->
     thm list -> (string list * thm) list * (typ * ('a list * 'b list)) list
val interpret_floatariths_congs = fn: Proof.context -> thm list
val preproc_form_conv = fn: Proof.context -> conv
val reify_floatariths_tac = fn: Proof.context -> int -> tactic
### Cannot skip proof of schematic goal statement
val interpret_floatariths_step_tac = fn: Proof.context -> int -> tactic
Found termination order: "length <*mlex*> {}"
Found termination order: "(%p. size (snd p)) <*mlex*> {}"
Found termination order: "size <*mlex*> {}"
Found termination order: "{}"
Found termination order: "(%p. length (fst (snd p))) <*mlex*> {}"
Found termination order: "{}"
consts
  freshs_floatarith :: "floatarith => nat list => bool"
consts
  bound_intersect_2d ::
    "nat
     => ((real * real) * real * real) list => real => (real * real) option"
### theory "Draft.Intersection"
### 3.087s elapsed time, 6.682s cpu time, 1.003s GC time
Found termination order: "size <*mlex*> {}"
Found termination order: "size <*mlex*> {}"
consts
  isnFDERIV ::
    "nat
     => floatarith list => nat list => nat list => real list => nat => bool"
consts
  isnFDERIV_approx ::
    "nat
     => nat
        => floatarith list
           => nat list
              => nat list => float interval option list => nat => bool"
Found termination order: "(%p. size (snd p)) <*mlex*> {}"
### theory "Draft.Floatarith_Expression"
### 8.833s elapsed time, 16.364s cpu time, 3.310s GC time
Loading theory "Draft.Straight_Line_Program" (required by "Draft.Ex_Affine_ApproximationTemplates" via "Draft.Ex_Affine_Approximation" via "Draft.Affine_Code" via "Draft.Affine_Approximation")
deriving "compare_order" instance for type "Float.float"
deriving "compare" instance for type "Float.float"
deriving "linorder" instance for type "Approximation.floatarith"
generating comparator for type "Approximation.floatarith"
consts
  interpret_slp :: "floatarith list => real list => real list"
Found termination order: "(%p. size (fst p)) <*mlex*> {}"
consts
  slp_of_fas' ::
    "floatarith list
     => (floatarith, nat) mapping
        => floatarith list => (floatarith, nat) mapping * floatarith list"
Found termination order: "(%p. size (fst p)) <*mlex*> {}"
### theory "Draft.Straight_Line_Program"
### 6.322s elapsed time, 7.907s cpu time, 1.497s GC time
Loading theory "Draft.Affine_Approximation" (required by "Draft.Ex_Affine_ApproximationTemplates" via "Draft.Ex_Affine_Approximation" via "Draft.Affine_Code")
Found termination order: "(%p. size_list size (snd p)) <*mlex*> {}"
consts
  points_of_aform :: "'a * 'a pdevs => 'a list"
"float_plus_down"
  :: "nat => float => float => float"
Found termination order: "(%p. length (snd (snd p))) <*mlex*> {}"
Found termination order: "(%p. size (fst (snd p))) <*mlex*> {}"
consts
  approx_floatariths_aformerr ::
    "nat
     => floatarith list
        => ((real * real pdevs) * real) list
           => ((real * real pdevs) * real) list option"
consts
  approx_slp ::
    "nat
     => floatarith list
        => ((real * real pdevs) * real) list
           => ((real * real pdevs) * real) list option"
### theory "Draft.Affine_Approximation"
### 4.308s elapsed time, 6.135s cpu time, 2.370s GC time
Loading theory "Draft.Affine_Code" (required by "Draft.Ex_Affine_ApproximationTemplates" via "Draft.Ex_Affine_Approximation")
consts
  degree_list :: "(nat * 'a) list => nat"
Found termination order:
  "(%p. size_list size (snd (snd (snd (snd p))))) <*mlex*>
   (%p. size_list size (fst (snd (snd (snd p))))) <*mlex*> {}"
consts
  update_list :: "nat => 'a => (nat * 'a) list => (nat * 'a) list"
### theory "Draft.Affine_Code"
### 1.413s elapsed time, 1.532s cpu time, 0.168s GC time
Loading theory "Draft.Print" (required by "Draft.Ex_Affine_ApproximationTemplates" via "Draft.Ex_Affine_Approximation")
deriving "show" instance for type "Float.float"
consts
  showsp_float10 :: "nat => float10 => char list => char list"
deriving "show" instance for type "Print.float10"
deriving "show" instance for type "Real.real"
Found termination order: "{}"
### theory "Draft.Print"
### 1.283s elapsed time, 1.361s cpu time, 0.127s GC time
Loading theory "Draft.Ex_Affine_Approximation" (required by "Draft.Ex_Affine_ApproximationTemplates")
Found termination order: "{}"
Found termination order: "{}"
### theory "Draft.Ex_Affine_Approximation"
### 0.490s elapsed time, 0.597s cpu time, 0.032s GC time
Loading theory "Draft.Ex_Affine_ApproximationTemplates"
val templateLemmas = []: (string * thm * template) list
### theory "Draft.Ex_Affine_ApproximationTemplates"
### 2.682s elapsed time, 8.443s cpu time, 2.459s GC time
"[(FloatR 128 51,
   pdevs
    [(47, FloatR 0 0), (46, FloatR 2 41), (45, FloatR 2 40),
     (44, FloatR 2 39), (43, FloatR 2 38), (42, FloatR 2 37),
     (41, FloatR 2 36), (40, FloatR 2 35), (39, FloatR 2 34),
     (38, FloatR 2 33), (37, FloatR 2 32), (36, FloatR 2 31),
     (35, FloatR 2 30), (34, FloatR 2 29), (33, FloatR 2 28),
     (32, FloatR 2 27), (31, FloatR 2 26), (30, FloatR 2 25),
     (29, FloatR 2 24), (28, FloatR 2 23), (27, FloatR 2 22),
     (26, FloatR 2 21), (25, FloatR 2 20), (24, FloatR 2 19),
     (23, FloatR 2 18), (22, FloatR 2 17), (21, FloatR 2 16),
     (20, FloatR 2 15), (19, FloatR 2 14), (18, FloatR 2 13),
     (17, FloatR 2 12), (16, FloatR 2 11), (15, FloatR 2 10),
     (14, FloatR 2 9), (13, FloatR 2 8), (12, FloatR 2 7), (11, FloatR 2 6),
     (10, FloatR 2 5), (9, FloatR 2 4), (8, FloatR 2 3), (7, FloatR 2 2),
     (6, FloatR 1 1), (5, FloatR 1 0), (4, FloatR 192 42),
     (3, FloatR 191 42), (2, FloatR 5 (- 1)), (1, FloatR 255 42),
     (0, FloatR 1 (- 1))]),
  (FloatR 128 51,
   pdevs
    [(47, FloatR 0 0), (46, FloatR 0 0), (45, FloatR 0 0), (44, FloatR 0 0),
     (43, FloatR 0 0), (42, FloatR 0 0), (41, FloatR 0 0), (40, FloatR 0 0),
     (39, FloatR 0 0), (38, FloatR 0 0), (37, FloatR 0 0), (36, FloatR 0 0),
     (35, FloatR 0 0), (34, FloatR 0 0), (33, FloatR 0 0), (32, FloatR 0 0),
     (31, FloatR 0 0), (30, FloatR 0 0), (29, FloatR 0 0), (28, FloatR 0 0),
     (27, FloatR 0 0), (26, FloatR 0 0), (25, FloatR 0 0), (24, FloatR 0 0),
     (23, FloatR 0 0), (22, FloatR 0 0), (21, FloatR 0 0), (20, FloatR 0 0),
     (19, FloatR 0 0), (18, FloatR 0 0), (17, FloatR 0 0), (16, FloatR 0 0),
     (15, FloatR 0 0), (14, FloatR 0 0), (13, FloatR 0 0), (12, FloatR 0 0),
     (11, FloatR 0 0), (10, FloatR 0 0), (9, FloatR 0 0), (8, FloatR 0 0),
     (7, FloatR 0 0), (6, FloatR 0 0), (4, FloatR 192 42),
     (3, FloatR 192 42), (2, FloatR 0 0), (1, FloatR 128 43)]),
  (FloatR 128 51,
   pdevs
    [(48, FloatR 0 0), (47, FloatR 0 0), (46, FloatR 0 0), (45, FloatR 0 0),
     (44, FloatR 0 0), (43, FloatR 0 0), (42, FloatR 0 0), (41, FloatR 0 0),
     (40, FloatR 0 0), (39, FloatR 0 0), (38, FloatR 0 0), (37, FloatR 0 0),
     (36, FloatR 0 0), (35, FloatR 0 0), (34, FloatR 0 0), (33, FloatR 0 0),
     (32, FloatR 0 0), (31, FloatR 0 0), (30, FloatR 0 0), (29, FloatR 0 0),
     (28, FloatR 0 0), (27, FloatR 0 0), (26, FloatR 0 0), (25, FloatR 0 0),
     (24, FloatR 0 0), (23, FloatR 0 0), (22, FloatR 0 0), (21, FloatR 0 0),
     (20, FloatR 0 0), (19, FloatR 0 0), (18, FloatR 0 0), (17, FloatR 0 0),
     (16, FloatR 0 0), (15, FloatR 0 0), (14, FloatR 0 0), (13, FloatR 0 0),
     (12, FloatR 0 0), (11, FloatR 0 0), (10, FloatR 0 0), (9, FloatR 0 0),
     (8, FloatR 0 0), (7, FloatR 0 0), (6, FloatR 0 0), (4, FloatR 192 42),
     (3, FloatR 192 42), (2, FloatR 0 0), (1, FloatR 128 43)])]"
  :: "(real * real pdevs) list"
"((FloatR 0 (- 37), FloatR 0 (- 37), FloatR 0 (- 37)),
  pdevs
   [(211, FloatR 0 0, FloatR 0 0, FloatR 1214694609 (- 4)),
    (210, FloatR 0 0, FloatR 1214694609 (- 4), FloatR 0 0),
    (209, FloatR 1214694609 (- 4), FloatR 0 0, FloatR 0 0),
    (207, FloatR 0 (- 5), FloatR 0 (- 5), FloatR 0 (- 5)),
    (206, FloatR 0 0, FloatR 0 0, FloatR 0 0),
    (204, FloatR 0 (- 6), FloatR 0 (- 6), FloatR 0 (- 6)),
    (203, FloatR 0 0, FloatR 0 0, FloatR 0 0),
    (201, FloatR 0 (- 7), FloatR 0 (- 7), FloatR 0 (- 7)),
    (200, FloatR 0 0, FloatR 0 0, FloatR 0 0),
    (198, FloatR 0 (- 8), FloatR 0 (- 8), FloatR 0 (- 8)),
    (197, FloatR 0 0, FloatR 0 0, FloatR 0 0),
    (195, FloatR 0 (- 9), FloatR 0 (- 9), FloatR 0 (- 9)),
    (194, FloatR 0 0, FloatR 0 0, FloatR 0 0),
    (192, FloatR 0 (- 10), FloatR 0 (- 10), FloatR 0 (- 10)),
    (191, FloatR 0 0, FloatR 0 0, FloatR 0 0),
    (189, FloatR 0 (- 11), FloatR 0 (- 11), FloatR 0 (- 11)),
    (188, FloatR 0 0, FloatR 0 0, FloatR 0 0),
    (186, FloatR 0 (- 12), FloatR 0 (- 12), FloatR 0 (- 12)),
    (185, FloatR 0 0, FloatR 0 0, FloatR 0 0),
    (183, FloatR 0 (- 13), FloatR 0 (- 13), FloatR 0 (- 13)),
    (182, FloatR 0 0, FloatR 0 0, FloatR 0 0),
    (180, FloatR 0 (- 14), FloatR 0 (- 14), FloatR 0 (- 14)),
    (179, FloatR 0 0, FloatR 0 0, FloatR 0 0),
    (177, FloatR 0 (- 15), FloatR 0 (- 15), FloatR 0 (- 15)),
    (176, FloatR 0 0, FloatR 0 0, FloatR 0 0),
    (174, FloatR 0 (- 16), FloatR 0 (- 16), FloatR 0 (- 16)),
    (173, FloatR 0 0, FloatR 0 0, FloatR 0 0),
    (171, FloatR 0 (- 17), FloatR 0 (- 17), FloatR 0 (- 17)),
    (170, FloatR 0 0, FloatR 0 0, FloatR 0 0),
    (168, FloatR 0 (- 18), FloatR 0 (- 18), FloatR 0 (- 18)),
    (167, FloatR 0 0, FloatR 0 0, FloatR 0 0),
    (165, FloatR 0 (- 19), FloatR 0 (- 19), FloatR 0 (- 19)),
    (164, FloatR 0 0, FloatR 0 0, FloatR 0 0),
    (162, FloatR 0 (- 20), FloatR 0 (- 20), FloatR 0 (- 20)),
    (161, FloatR 0 0, FloatR 0 0, FloatR 0 0),
    (159, FloatR 0 (- 21), FloatR 0 (- 21), FloatR 0 (- 21)),
    (158, FloatR 0 0, FloatR 0 0, FloatR 0 0),
    (156, FloatR 0 (- 22), FloatR 0 (- 22), FloatR 0 (- 22)),
    (155, FloatR 0 0, FloatR 0 0, FloatR 0 0),
    (153, FloatR 0 (- 27), FloatR 0 (- 27), FloatR 0 (- 27)),
    (152, FloatR 0 0, FloatR 0 0, FloatR 0 0),
    (151, FloatR 0 (- 35), FloatR 0 (- 35), FloatR 0 (- 35)),
    (150, FloatR 0 (- 29), FloatR 0 (- 29), FloatR 0 (- 29)),
    (149, FloatR 0 (- 39), FloatR 0 (- 39), FloatR 0 (- 39)),
    (148, FloatR 0 (- 35), FloatR 0 (- 35), FloatR 0 (- 35)),
    (147, FloatR 0 (- 31), FloatR 0 (- 31), FloatR 0 (- 31)),
    (146, FloatR 0 (- 39), FloatR 0 (- 39), FloatR 0 (- 39)),
    (145, FloatR 0 (- 36), FloatR 0 (- 36), FloatR 0 (- 36)),
    (144, FloatR 0 (- 32), FloatR 0 (- 32), FloatR 0 (- 32)),
    (143, FloatR 0 (- 39), FloatR 0 (- 39), FloatR 0 (- 39)),
    (142, FloatR 0 (- 37), FloatR 0 (- 37), FloatR 0 (- 37)),
    (141, FloatR 0 (- 33), FloatR 0 (- 33), FloatR 0 (- 33)),
    (140, FloatR 0 (- 39), FloatR 0 (- 39), FloatR 0 (- 39)),
    (139, FloatR 0 (- 37), FloatR 0 (- 37), FloatR 0 (- 37)),
    (138, FloatR 0 (- 33), FloatR 0 (- 33), FloatR 0 (- 33)),
    (137, FloatR 0 (- 39), FloatR 0 (- 39), FloatR 0 (- 39)),
    (136, FloatR 0 (- 38), FloatR 0 (- 38), FloatR 0 (- 38)),
    (135, FloatR 0 (- 34), FloatR 0 (- 34), FloatR 0 (- 34)),
    (134, FloatR 0 (- 39), FloatR 0 (- 39), FloatR 0 (- 39)),
    (133, FloatR 0 (- 38), FloatR 0 (- 38), FloatR 0 (- 38)),
    (132, FloatR 0 (- 34), FloatR 0 (- 34), FloatR 0 (- 34)),
    (131, FloatR 0 (- 40), FloatR 0 (- 40), FloatR 0 (- 40)),
    (130, FloatR 0 (- 39), FloatR 0 (- 39), FloatR 0 (- 39)),
    (129, FloatR 0 (- 35), FloatR 0 (- 35), FloatR 0 (- 35)),
    (128, FloatR 0 (- 40), FloatR 0 (- 40), FloatR 0 (- 40)),
    (127, FloatR 0 (- 39), FloatR 0 (- 39), FloatR 0 (- 39)),
    (126, FloatR 0 (- 35), FloatR 0 (- 35), FloatR 0 (- 35)),
    (125, FloatR 0 (- 40), FloatR 0 (- 40), FloatR 0 (- 40)),
    (124, FloatR 0 (- 40), FloatR 0 (- 40), FloatR 0 (- 40)),
    (123, FloatR 0 (- 36), FloatR 0 (- 36), FloatR 0 (- 36)),
    (122, FloatR 0 (- 40), FloatR 0 (- 40), FloatR 0 (- 40)),
    (121, FloatR 0 (- 40), FloatR 0 (- 40), FloatR 0 (- 40)),
    (120, FloatR 0 (- 36), FloatR 0 (- 36), FloatR 0 (- 36)),
    (119, FloatR 0 (- 40), FloatR 0 (- 40), FloatR 0 (- 40)),
    (118, FloatR 0 (- 40), FloatR 0 (- 40), FloatR 0 (- 40)),
    (117, FloatR 0 (- 36), FloatR 0 (- 36), FloatR 0 (- 36)),
    (116, FloatR 0 (- 40), FloatR 0 (- 40), FloatR 0 (- 40)),
    (115, FloatR 0 (- 41), FloatR 0 (- 41), FloatR 0 (- 41)),
    (114, FloatR 0 (- 37), FloatR 0 (- 37), FloatR 0 (- 37)),
    (113, FloatR 0 (- 40), FloatR 0 (- 40), FloatR 0 (- 40)),
    (112, FloatR 0 (- 41), FloatR 0 (- 41), FloatR 0 (- 41)),
    (111, FloatR 0 (- 37), FloatR 0 (- 37), FloatR 0 (- 37)),
    (110, FloatR 0 (- 41), FloatR 0 (- 41), FloatR 0 (- 41)),
    (109, FloatR 0 (- 41), FloatR 0 (- 41), FloatR 0 (- 41)),
    (108, FloatR 0 (- 37), FloatR 0 (- 37), FloatR 0 (- 37)),
    (107, FloatR 0 (- 41), FloatR 0 (- 41), FloatR 0 (- 41)),
    (106, FloatR 0 (- 41), FloatR 0 (- 41), FloatR 0 (- 41)),
    (105, FloatR 0 (- 38), FloatR 0 (- 38), FloatR 0 (- 38)),
    (104, FloatR 0 (- 41), FloatR 0 (- 41), FloatR 0 (- 41)),
    (103, FloatR 0 (- 42), FloatR 0 (- 42), FloatR 0 (- 42)),
    (102, FloatR 0 (- 38), FloatR 0 (- 38), FloatR 0 (- 38)),
    (101, FloatR 0 (- 41), FloatR 0 (- 41), FloatR 0 (- 41)),
    (100, FloatR 0 (- 42), FloatR 0 (- 42), FloatR 0 (- 42)),
    (99, FloatR 0 (- 38), FloatR 0 (- 38), FloatR 0 (- 38)),
    (98, FloatR 0 (- 41), FloatR 0 (- 41), FloatR 0 (- 41)),
    (97, FloatR 0 (- 42), FloatR 0 (- 42), FloatR 0 (- 42)),
    (96, FloatR 0 (- 38), FloatR 0 (- 38), FloatR 0 (- 38)),
    (95, FloatR 0 (- 41), FloatR 0 (- 41), FloatR 0 (- 41)),
    (94, FloatR 0 (- 42), FloatR 0 (- 42), FloatR 0 (- 42)),
    (93, FloatR 0 (- 39), FloatR 0 (- 39), FloatR 0 (- 39)),
    (92, FloatR 0 (- 41), FloatR 0 (- 41), FloatR 0 (- 41)),
    (91, FloatR 0 (- 43), FloatR 0 (- 43), FloatR 0 (- 43)),
    (90, FloatR 0 (- 39), FloatR 0 (- 39), FloatR 0 (- 39)),
    (89, FloatR 0 (- 41), FloatR 0 (- 41), FloatR 0 (- 41)),
    (88, FloatR 0 (- 43), FloatR 0 (- 43), FloatR 0 (- 43)),
    (87, FloatR 0 (- 39), FloatR 0 (- 39), FloatR 0 (- 39)),
    (86, FloatR 0 (- 41), FloatR 0 (- 41), FloatR 0 (- 41)),
    (85, FloatR 0 (- 43), FloatR 0 (- 43), FloatR 0 (- 43)),
    (84, FloatR 0 (- 39), FloatR 0 (- 39), FloatR 0 (- 39)),
    (83, FloatR 0 (- 41), FloatR 0 (- 41), FloatR 0 (- 41)),
    (82, FloatR 0 (- 43), FloatR 0 (- 43), FloatR 0 (- 43)),
    (81, FloatR 0 (- 39), FloatR 0 (- 39), FloatR 0 (- 39)),
    (80, FloatR 0 (- 41), FloatR 0 (- 41), FloatR 0 (- 41)),
    (79, FloatR 0 (- 43), FloatR 0 (- 43), FloatR 0 (- 43)),
    (78, FloatR 0 (- 40), FloatR 0 (- 40), FloatR 0 (- 40)),
    (77, FloatR 0 (- 41), FloatR 0 (- 41), FloatR 0 (- 41)),
    (76, FloatR 0 (- 44), FloatR 0 (- 44), FloatR 0 (- 44)),
    (75, FloatR 0 (- 40), FloatR 0 (- 40), FloatR 0 (- 40)),
    (74, FloatR 0 (- 41), FloatR 0 (- 41), FloatR 0 (- 41)),
    (73, FloatR 0 (- 44), FloatR 0 (- 44), FloatR 0 (- 44)),
    (72, FloatR 0 (- 40), FloatR 0 (- 40), FloatR 0 (- 40)),
    (71, FloatR 0 (- 41), FloatR 0 (- 41), FloatR 0 (- 41)),
    (70, FloatR 0 (- 44), FloatR 0 (- 44), FloatR 0 (- 44)),
    (69, FloatR 0 (- 40), FloatR 0 (- 40), FloatR 0 (- 40)),
    (68, FloatR 0 (- 41), FloatR 0 (- 41), FloatR 0 (- 41)),
    (67, FloatR 0 (- 44), FloatR 0 (- 44), FloatR 0 (- 44)),
    (66, FloatR 0 (- 41), FloatR 0 (- 41), FloatR 0 (- 41)),
    (65, FloatR 0 (- 42), FloatR 0 (- 42), FloatR 0 (- 42)),
    (64, FloatR 0 (- 44), FloatR 0 (- 44), FloatR 0 (- 44)),
    (63, FloatR 0 (- 41), FloatR 0 (- 41), FloatR 0 (- 41)),
    (62, FloatR 0 (- 42), FloatR 0 (- 42), FloatR 0 (- 42)),
    (61, FloatR 0 (- 45), FloatR 0 (- 45), FloatR 0 (- 45)),
    (60, FloatR 0 (- 41), FloatR 0 (- 41), FloatR 0 (- 41)),
    (59, FloatR 0 (- 42), FloatR 0 (- 42), FloatR 0 (- 42)),
    (58, FloatR 0 (- 45), FloatR 0 (- 45), FloatR 0 (- 45)),
    (57, FloatR 0 (- 42), FloatR 0 (- 42), FloatR 0 (- 42)),
    (56, FloatR 0 (- 42), FloatR 0 (- 42), FloatR 0 (- 42)),
    (55, FloatR 0 (- 45), FloatR 0 (- 45), FloatR 0 (- 45)),
    (54, FloatR 0 (- 42), FloatR 0 (- 42), FloatR 0 (- 42)),
    (53, FloatR 0 (- 42), FloatR 0 (- 42), FloatR 0 (- 42)),
    (52, FloatR 0 (- 45), FloatR 0 (- 45), FloatR 0 (- 45)),
    (51, FloatR 0 (- 42), FloatR 0 (- 42), FloatR 0 (- 42)),
    (50, FloatR 0 (- 42), FloatR 0 (- 42), FloatR 0 (- 42)),
    (49, FloatR 0 (- 45), FloatR 0 (- 45), FloatR 0 (- 45)),
    (48, FloatR 0 (- 43), FloatR 0 (- 43), FloatR 0 (- 43)),
    (47, FloatR 0 (- 42), FloatR 0 (- 42), FloatR 0 (- 42)),
    (46, FloatR 0 (- 46), FloatR 0 (- 46), FloatR 0 (- 46)),
    (45, FloatR 0 (- 44), FloatR 0 (- 44), FloatR 0 (- 44)),
    (44, FloatR 0 (- 42), FloatR 0 (- 42), FloatR 0 (- 42)),
    (43, FloatR 0 (- 46), FloatR 0 (- 46), FloatR 0 (- 46)),
    (42, FloatR 0 (- 45), FloatR 0 (- 45), FloatR 0 (- 45)),
    (41, FloatR 0 (- 43), FloatR 0 (- 43), FloatR 0 (- 43)),
    (40, FloatR 0 (- 46), FloatR 0 (- 46), FloatR 0 (- 46)),
    (39, FloatR 0 (- 47), FloatR 0 (- 47), FloatR 0 (- 47)),
    (38, FloatR 0 (- 43), FloatR 0 (- 43), FloatR 0 (- 43)),
    (37, FloatR 0 (- 46), FloatR 0 (- 46), FloatR 0 (- 46)),
    (36, FloatR 0 (- 46), FloatR 0 (- 46), FloatR 0 (- 46)),
    (35, FloatR 0 (- 43), FloatR 0 (- 43), FloatR 0 (- 43)),
    (34, FloatR 0 (- 46), FloatR 0 (- 46), FloatR 0 (- 46)),
    (33, FloatR 0 (- 44), FloatR 0 (- 44), FloatR 0 (- 44)),
    (32, FloatR 0 (- 43), FloatR 0 (- 43), FloatR 0 (- 43)),
    (31, FloatR 0 (- 46), FloatR 0 (- 46), FloatR 0 (- 46)),
    (30, FloatR 0 (- 44), FloatR 0 (- 44), FloatR 0 (- 44)),
    (29, FloatR 0 (- 43), FloatR 0 (- 43), FloatR 0 (- 43)),
    (28, FloatR 0 (- 46), FloatR 0 (- 46), FloatR 0 (- 46)),
    (27, FloatR 0 (- 43), FloatR 0 (- 43), FloatR 0 (- 43)),
    (26, FloatR 0 (- 43), FloatR 0 (- 43), FloatR 0 (- 43)),
    (25, FloatR 0 (- 46), FloatR 0 (- 46), FloatR 0 (- 46)),
    (24, FloatR 0 (- 43), FloatR 0 (- 43), FloatR 0 (- 43)),
    (23, FloatR 0 (- 43), FloatR 0 (- 43), FloatR 0 (- 43)),
    (22, FloatR 0 (- 46), FloatR 0 (- 46), FloatR 0 (- 46)),
    (21, FloatR 0 (- 42), FloatR 0 (- 42), FloatR 0 (- 42)),
    (20, FloatR 0 (- 42), FloatR 0 (- 42), FloatR 0 (- 42)),
    (19, FloatR 0 (- 46), FloatR 0 (- 46), FloatR 0 (- 46)),
    (18, FloatR 0 (- 42), FloatR 0 (- 42), FloatR 0 (- 42)),
    (17, FloatR 0 (- 42), FloatR 0 (- 42), FloatR 0 (- 42)),
    (16, FloatR 0 (- 46), FloatR 0 (- 46), FloatR 0 (- 46)),
    (15, FloatR 0 (- 42), FloatR 0 (- 42), FloatR 0 (- 42)),
    (14, FloatR 0 (- 42), FloatR 0 (- 42), FloatR 0 (- 42)),
    (13, FloatR 0 (- 47), FloatR 0 (- 47), FloatR 0 (- 47)),
    (12, FloatR 0 (- 42), FloatR 0 (- 42), FloatR 0 (- 42)),
    (11, FloatR 0 (- 42), FloatR 0 (- 42), FloatR 0 (- 42)),
    (10, FloatR 0 (- 47), FloatR 0 (- 47), FloatR 0 (- 47)),
    (9, FloatR 0 (- 42), FloatR 0 (- 42), FloatR 0 (- 42)),
    (8, FloatR 0 (- 42), FloatR 0 (- 42), FloatR 0 (- 42)),
    (7, FloatR 0 (- 47), FloatR 0 (- 47), FloatR 0 (- 47)),
    (6, FloatR 0 (- 42), FloatR 0 (- 42), FloatR 0 (- 42)),
    (5, FloatR 0 (- 43), FloatR 0 (- 43), FloatR 0 (- 43)),
    (4, FloatR 0 (- 67), FloatR 0 (- 67), FloatR 0 (- 67)),
    (3, FloatR 0 (- 62), FloatR 0 (- 62), FloatR 0 (- 62)),
    (2, FloatR 0 (- 63), FloatR 0 (- 63), FloatR 0 (- 63)),
    (1, FloatR 0 (- 37), FloatR 0 (- 37), FloatR 0 (- 37)),
    (0, FloatR 0 (- 40), FloatR 0 (- 40), FloatR 0 (- 40))])"
  :: "(real * real * real) * (real * real * real) pdevs"
val it = (): unit
