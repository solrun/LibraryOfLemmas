   [("Float_Real.real_floor_code'",
     "\<lfloor>real_of_float ?x\<rfloor> = int_floor_fl ?x",
     template_equation
      (template_app
        (template_hole 2, template_app (template_hole 1, template_var 0)),
       template_app (template_hole 0, template_var 0))),
    ("Float_Real.of_rat_numeral_eq",
     "real_of_float (numeral ?w) = Ratreal (numeral ?w)",
     template_equation
      (template_app
        (template_hole 3, template_app (template_hole 2, template_var 0)),
       template_app
        (template_hole 1, template_app (template_hole 0, template_var 0)))),
    ("Float_Real.real_abs_code'",
     "\<bar>real_of_float ?x\<bar> = real_of_float \<bar>?x\<bar>",
     template_equation
      (template_app
        (template_hole 2, template_app (template_hole 1, template_var 0)),
       template_app
        (template_hole 1, template_app (template_hole 0, template_var 0)))),
    ("Float_Real.real_uminus_code'",
     "- real_of_float ?x = real_of_float (- ?x)",
     template_equation
      (template_app
        (template_hole 2, template_app (template_hole 1, template_var 0)),
       template_app
        (template_hole 1, template_app (template_hole 0, template_var 0)))),
    ("Float_Real.real_equal_code",
     "equal_class.equal (real_of_float ?x) (real_of_float ?y) =
      equal_class.equal ?x ?y",
     template_equation
      (template_app
        (template_app
          (template_hole 2, template_app (template_hole 1, template_var 1)),
         template_app (template_hole 1, template_var 0)),
       template_app
        (template_app (template_hole 0, template_var 1), template_var 0))),
    ("Float_Real.real_less_code'",
     "(real_of_float ?x < real_of_float ?y) = (?x < ?y)",
     template_equation
      (template_app
        (template_app
          (template_hole 2, template_app (template_hole 1, template_var 1)),
         template_app (template_hole 1, template_var 0)),
       template_app
        (template_app (template_hole 0, template_var 1), template_var 0))),
    ("Float_Real.real_less_eq_code'",
     "(real_of_float ?x <= real_of_float ?y) = (?x <= ?y)",
     template_equation
      (template_app
        (template_app
          (template_hole 2, template_app (template_hole 1, template_var 1)),
         template_app (template_hole 1, template_var 0)),
       template_app
        (template_app (template_hole 0, template_var 1), template_var 0))),
    ("Float_Real.compute_round_down",
     "round_down ?prec (real_of_float ?f) =
      real_of_float (float_down ?prec ?f)",
     template_equation
      (template_app
        (template_app (template_hole 2, template_var 1),
         template_app (template_hole 1, template_var 0)),
       template_app
        (template_hole 1,
         template_app
          (template_app (template_hole 0, template_var 1),
           template_var 0)))),
    ("Float_Real.compute_round_up",
     "round_up ?prec (real_of_float ?f) =
      real_of_float (float_up ?prec ?f)",
     template_equation
      (template_app
        (template_app (template_hole 2, template_var 1),
         template_app (template_hole 1, template_var 0)),
       template_app
        (template_hole 1,
         template_app
          (template_app (template_hole 0, template_var 1),
           template_var 0)))),
    ("Float_Real.compute_truncate_down",
     "truncate_down ?prec (real_of_float ?f) =
      real_of_float (float_round_down ?prec ?f)",
     template_equation
      (template_app
        (template_app (template_hole 2, template_var 1),
         template_app (template_hole 1, template_var 0)),
       template_app
        (template_hole 1,
         template_app
          (template_app (template_hole 0, template_var 1),
           template_var 0)))),
    ("Float_Real.compute_truncate_up",
     "truncate_up ?prec (real_of_float ?f) =
      real_of_float (float_round_up ?prec ?f)",
     template_equation
      (template_app
        (template_app (template_hole 2, template_var 1),
         template_app (template_hole 1, template_var 0)),
       template_app
        (template_hole 1,
         template_app
          (template_app (template_hole 0, template_var 1),
           template_var 0)))),
    ("Float_Real.real_minus_code'",
     "real_of_float ?x - real_of_float ?y = real_of_float (?x - ?y)",
     template_equation
      (template_app
        (template_app
          (template_hole 2, template_app (template_hole 1, template_var 1)),
         template_app (template_hole 1, template_var 0)),
       template_app
        (template_hole 1,
         template_app
          (template_app (template_hole 0, template_var 1),
           template_var 0)))),
    ("Float_Real.real_plus_code'",
     "real_of_float ?x + real_of_float ?y = real_of_float (?x + ?y)",
     template_equation
      (template_app
        (template_app
          (template_hole 2, template_app (template_hole 1, template_var 1)),
         template_app (template_hole 1, template_var 0)),
       template_app
        (template_hole 1,
         template_app
          (template_app (template_hole 0, template_var 1),
           template_var 0)))),
    ("Float_Real.real_times_code'",
     "real_of_float ?x * real_of_float ?y = real_of_float (?x * ?y)",
     template_equation
      (template_app
        (template_app
          (template_hole 2, template_app (template_hole 1, template_var 1)),
         template_app (template_hole 1, template_var 0)),
       template_app
        (template_hole 1,
         template_app
          (template_app (template_hole 0, template_var 1),
           template_var 0)))),
    ("Float_Real.real_inverse_code'",
     "inverse (FloatR ?a ?b) =
      (if FloatR ?a ?b = 2 then FloatR 1 (- 1)
       else if ?a = 1 then FloatR 1 (- ?b)
            else Code.abort STR ''inverse not of 2''
                  (%_. inverse (FloatR ?a ?b)))",
     template_implication
      ([template_predicate
         (
            template_app
             (template_hole 14,
              template_app
               (template_hole 13,
                template_app
                 (template_app (template_hole 12, template_var 1),
                  template_var 0)))
            )],
       template_dunno)),
    ("Float_Real.real_divide_code'",
     "FloatR ?a ?b / FloatR ?c ?d =
      (if FloatR ?c ?d = 2
       then if ?a mod 2 = 0 then FloatR (?a div 2) ?b
            else FloatR ?a (?b - 1)
       else if ?c = 1 then FloatR ?a (?b - ?d)
            else Code.abort STR ''division not by 2''
                  (%_. FloatR ?a ?b / FloatR ?c ?d))",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_hole 18,
                template_app
                 (template_hole 17,
                  template_app
                   (template_app (template_hole 16, template_var 3),
                    template_var 2))),
              template_app
               (template_hole 17,
                template_app
                 (template_app (template_hole 16, template_var 1),
                  template_var 0)))
            )],
       template_dunno))]
