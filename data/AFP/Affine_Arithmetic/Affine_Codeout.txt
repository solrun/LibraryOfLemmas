Loading theory "HOL-Library.Function_Algebras" (required by "Draft.Affine_CodeTemplates" via "Draft.ExtrEqs" via "HOL-Library.BigO")
Loading theory "HOL-Library.Stream" (required by "Draft.Affine_CodeTemplates" via "Draft.ExtrEqs")
Loading theory "HOL-Library.Tree" (required by "Draft.Affine_CodeTemplates" via "Draft.ExtrEqs" via "Draft.Templates")
Loading theory "Draft.Affine_Arithmetic_Auxiliarities" (required by "Draft.Affine_CodeTemplates" via "Draft.Affine_Code" via "Draft.Affine_Approximation" via "Draft.Executable_Euclidean_Space")
instantiation
  fun :: (type, plus) plus
  plus_fun == plus :: ('a => 'b) => ('a => 'b) => 'a => 'b
instantiation
  fun :: (type, zero) zero
  zero_fun == zero_class.zero :: 'a => 'b
instantiation
  fun :: (type, times) times
  times_fun == times :: ('a => 'b) => ('a => 'b) => 'a => 'b
instantiation
  fun :: (type, one) one
  one_fun == one_class.one :: 'a => 'b
### theory "HOL-Library.Function_Algebras"
### 0.132s elapsed time, 0.536s cpu time, 0.059s GC time
Loading theory "HOL-Library.BigO" (required by "Draft.Affine_CodeTemplates" via "Draft.ExtrEqs")
### theory "Draft.Affine_Arithmetic_Auxiliarities"
### 0.145s elapsed time, 0.590s cpu time, 0.059s GC time
Loading theory "Draft.Counterclockwise" (required by "Draft.Affine_CodeTemplates" via "Draft.Affine_Code" via "Draft.Intersection" via "Draft.Polygon" via "Draft.Counterclockwise_2D_Strict" via "Draft.Counterclockwise_Vector")
locale linorder_list0
  fixes le :: "'a => 'a => bool"
Proofs for inductive predicate(s) "sortedP"
  Proving monotonicity ...
consts
  shift :: "'a list => 'a stream => 'a stream"
Proofs for coinductive predicate(s) "streamsp"
  Proving monotonicity ...
locale linorder_list
  fixes le :: "'a => 'a => bool"
    and S :: "'a set"
  assumes "linorder_list le S"
locale ccw_system0
  fixes ccw :: "'a => 'a => 'a => bool"
    and S :: "'a set"
consts
  left :: "'a tree => 'a tree"
consts
  right :: "'a tree => 'a tree"
locale ccw_system12
  fixes ccw :: "'a => 'a => 'a => bool"
    and S :: "'a set"
  assumes "ccw_system12 ccw S"
consts
  snth :: "'a stream => nat => 'a"
locale ccw_system123
  fixes ccw :: "'a => 'a => 'a => bool"
    and S :: "'a set"
  assumes "ccw_system123 ccw S"
locale ccw_system4
  fixes ccw :: "'a => 'a => 'a => bool"
    and S :: "'a set"
  assumes "ccw_system4 ccw S"
consts
  stake :: "nat => 'a stream => 'a list"
consts
  sdrop :: "nat => 'a stream => 'a stream"
locale ccw_system1235'
  fixes ccw :: "'a => 'a => 'a => bool"
    and S :: "'a set"
  assumes "ccw_system1235' ccw S"
Found termination order: "size <*mlex*> {}"
locale ccw_system1235
  fixes ccw :: "'a => 'a => 'a => bool"
    and S :: "'a set"
  assumes "ccw_system1235 ccw S"
locale ccw_system
  fixes ccw :: "'a => 'a => 'a => bool"
    and S :: "'a set"
  assumes "ccw_system ccw S"
### theory "Draft.Counterclockwise"
### 0.699s elapsed time, 2.730s cpu time, 0.182s GC time
Loading theory "Draft.Counterclockwise_Vector" (required by "Draft.Affine_CodeTemplates" via "Draft.Affine_Code" via "Draft.Intersection" via "Draft.Polygon" via "Draft.Counterclockwise_2D_Strict")
consts
  sfilter :: "('a => bool) => 'a stream => 'a stream"
Found termination order: "size <*mlex*> {}"
locale ccw_vector_space
  fixes ccw :: "'a => 'a => 'a => bool"
    and S :: "'a set"
  assumes "ccw_vector_space ccw S"
consts
  cycle :: "'a list => 'a stream"
consts
  siterate :: "('a => 'a) => 'a => 'a stream"
Found termination order: "size <*mlex*> {}"
locale ccw_convex
  fixes ccw :: "'a => 'a => 'a => bool"
    and S :: "'a set"
    and oriented :: "'a => 'a => bool"
  assumes "ccw_convex ccw S oriented"
### theory "Draft.Counterclockwise_Vector"
### 0.160s elapsed time, 0.637s cpu time, 0.000s GC time
Loading theory "Draft.Counterclockwise_2D_Strict" (required by "Draft.Affine_CodeTemplates" via "Draft.Affine_Code" via "Draft.Intersection" via "Draft.Polygon")
class height = type +
  fixes height :: "'a => nat"
instantiation
  tree :: (type) height
  height_tree == height :: 'a tree => nat
### theory "HOL-Library.BigO"
### 0.971s elapsed time, 3.754s cpu time, 0.367s GC time
Loading theory "Draft.Executable_Euclidean_Space" (required by "Draft.Affine_CodeTemplates" via "Draft.Affine_Code" via "Draft.Affine_Approximation")
consts
  flat :: "'a list stream => 'a stream"
Found termination order: "size <*mlex*> {}"
consts
  sinterleave :: "'a stream => 'a stream => 'a stream"
consts
  szip :: "'a stream => 'b stream => ('a * 'b) stream"
consts
  smap2 :: "('a => 'b => 'c) => 'a stream => 'b stream => 'c stream"
Found termination order: "size <*mlex*> {}"
### theory "HOL-Library.Stream"
### 1.458s elapsed time, 5.543s cpu time, 1.032s GC time
Found termination order: "size <*mlex*> {}"
Found termination order: "{}"
Found termination order: "size <*mlex*> {}"
Found termination order: "size <*mlex*> {}"
Found termination order: "size <*mlex*> {}"
Found termination order: "size <*mlex*> {}"
### theory "Draft.Counterclockwise_2D_Strict"
### 0.908s elapsed time, 2.963s cpu time, 0.834s GC time
Loading theory "Draft.Counterclockwise_2D_Arbitrary" (required by "Draft.Affine_CodeTemplates" via "Draft.Affine_Code" via "Draft.Intersection")
Loading theory "Draft.Polygon" (required by "Draft.Affine_CodeTemplates" via "Draft.Affine_Code" via "Draft.Intersection")
Found termination order: "(%p. size (fst p)) <*mlex*> {}"
Found termination order: "size <*mlex*> {}"
Found termination order: "{}"
Found termination order: "(%p. size (snd p)) <*mlex*> {}"
consts
  polychain_of :: "'a => 'a list => ('a * 'a) list"
consts
  dirvec :: "'a * 'a => 'a"
### theory "Draft.Polygon"
### 0.442s elapsed time, 1.707s cpu time, 0.164s GC time
Found termination order: "size <*mlex*> {}"
### theory "Draft.Counterclockwise_2D_Arbitrary"
### 0.538s elapsed time, 2.000s cpu time, 0.245s GC time
### theory "HOL-Library.Tree"
### 2.642s elapsed time, 9.366s cpu time, 1.415s GC time
Loading theory "Draft.Templates" (required by "Draft.Affine_CodeTemplates" via "Draft.ExtrEqs")
datatype template_term
=
     t_empty
   | template_app of template_term * template_term
   | template_hole of int
   | template_var of int
datatype sign
= equals | greater_equals | greater_than | less_equals | less_than
datatype template
=
     template_bimplication of template * template
   | template_dunno
   | template_equation of template_term * template_term
   | template_implication of template list * template
   | template_inequation of sign * template_term * template_term
   | template_negation of template
   | template_predicate of template_term
constructor t_empty: template_term
constructor template_app: template_term * template_term -> template_term
constructor template_hole: int -> template_term
constructor template_var: int -> template_term
constructor equals: sign
constructor greater_equals: sign
constructor greater_than: sign
constructor less_equals: sign
constructor less_than: sign
constructor template_bimplication: template * template -> template
constructor template_dunno: template
constructor template_equation: template_term * template_term -> template
constructor template_implication: template list * template -> template
constructor template_inequation:
   sign * template_term * template_term -> template
constructor template_negation: template -> template
constructor template_predicate: template_term -> template
val vfs = fn: term -> (indexname * typ) list * (string * typ) list
val indexOf = fn: ''a list -> ''a -> int -> int
val has_eq = fn: term -> bool
val term2template = fn:
   (indexname * typ) list -> (string * typ) list -> term -> template_term
val lemma2predicate = fn: term -> term -> template
val makeTemplatewithContext = fn: term -> term -> template
val lemma2template = fn: term -> template
val thm2template = fn: thm -> template
val tterm2string = fn: template_term -> string
val template2string = fn: template -> string
val t = "height ?t <= size ?t": thm
val th =
   Const ("HOL.Trueprop", "bool => prop") $
     (Const ("Orderings.ord_class.less_eq", "nat => nat => bool") $
       (Const ("Tree.height_class.height", "?'a tree => nat") $
         Var (("t", 0), "?'a tree")) $
       (Const ("Nat.size_class.size", "?'a tree => nat") $
         Var (("t", 0), "?'a tree"))):
   term
### theory "Draft.Templates"
### 0.057s elapsed time, 0.139s cpu time, 0.000s GC time
Loading theory "Draft.ExtrEqs" (required by "Draft.Affine_CodeTemplates")
val eqpattern =
   Pattern
    (
       Const ("HOL.Trueprop", "bool => prop") $
         (Const ("HOL.eq", "?'a => ?'a => bool") $
           Var (("_dummy_", 1), "?'a") $ Var (("_dummy_", 2), "?'a"))
       ):
   term Find_Theorems.criterion
val badeqpattern = Pattern (Const ("Pure.eq", "?'a => ?'a => prop")):
   term Find_Theorems.criterion
val undefpattern =
   Pattern
    (
       Const ("HOL.Trueprop", "bool => prop") $
         (Const ("HOL.eq", "?'a => ?'a => bool") $
           Var (("_dummy_", 1), "?'a") $ Const ("HOL.undefined", "?'a"))
       ):
   term Find_Theorems.criterion
val thmpattern =
   Pattern
    (Const ("HOL.Trueprop", "bool => prop") $ Var (("_dummy_", 1), "bool")):
   term Find_Theorems.criterion
val badnames =
   ["*nitpick*", "*Nitpick*", "*full_exhaustive*", "*_def*", "Enum.finite*",
    "*Quickcheck*", "ATP*", "*Nunchaku*", "*Code*", "*BNF*", "*SMT*",
    "*.*.*"]:
   string list
val unwanted_names =
   [(false, Name "*nitpick*"), (false, Name "*Nitpick*"),
    (false, Name "*full_exhaustive*"), (false, Name "*_def*"),
    (false, Name "Enum.finite*"), (false, Name "*Quickcheck*"),
    (false, Name "ATP*"), (false, Name "*Nunchaku*"),
    (false, Name "*Code*"), (false, Name "*BNF*"), (false, Name "*SMT*"),
    (false, Name "*.*.*")]:
   (bool * term Find_Theorems.criterion) list
val has_vars = fn: term -> bool
val get_all_eqs = fn: string -> Proof.context -> (string * thm) list
val get_all_thms = fn: string -> Proof.context -> (string * thm) list
val get_noneq_thms = fn: string -> Proof.context -> (string * thm) list
val template_eqs = fn:
   string -> Proof.context -> (string * thm * template) list
val template_thms = fn:
   string -> Proof.context -> (string * thm * template) list
### theory "Draft.ExtrEqs"
### 0.793s elapsed time, 1.999s cpu time, 0.947s GC time
class executable_euclidean_space = ordered_euclidean_space +
  fixes Basis_list :: "'a list"
    and eucl_down :: "int => 'a => 'a"
    and eucl_truncate_down :: "nat => 'a => 'a"
    and eucl_truncate_up :: "nat => 'a => 'a"
  assumes
    "eucl_down_def":
      "!!p b.
          eucl_down p b =
          (SUM i:Basis. round_down p (b \<bullet> i) *\<^sub>R i)"
  assumes
    "eucl_truncate_down_def":
      "!!q b.
          eucl_truncate_down q b =
          (SUM i:Basis. truncate_down q (b \<bullet> i) *\<^sub>R i)"
  assumes
    "eucl_truncate_up_def":
      "!!q b.
          eucl_truncate_up q b =
          (SUM i:Basis. truncate_up q (b \<bullet> i) *\<^sub>R i)"
  assumes "Basis_list": "set Basis_list = Basis"
  assumes "distinct_Basis_list": "distinct Basis_list"
instantiation
  real :: executable_euclidean_space
  Basis_list_real == Basis_list :: real list
  eucl_down_real == eucl_down :: int => real => real
  eucl_truncate_down_real == eucl_truncate_down :: nat => real => real
  eucl_truncate_up_real == eucl_truncate_up :: nat => real => real
instantiation
  prod :: (executable_euclidean_space, executable_euclidean_space)
    executable_euclidean_space
  Basis_list_prod == Basis_list :: ('a * 'b) list
  eucl_down_prod == eucl_down :: int => 'a * 'b => 'a * 'b
  eucl_truncate_down_prod == eucl_truncate_down :: nat => 'a * 'b => 'a * 'b
  eucl_truncate_up_prod == eucl_truncate_up :: nat => 'a * 'b => 'a * 'b
instantiation
  vec :: (executable_euclidean_space, enum) executable_euclidean_space
  Basis_list_vec == Basis_list :: ('a, 'b) vec list
  eucl_down_vec == eucl_down :: int => ('a, 'b) vec => ('a, 'b) vec
  eucl_truncate_down_vec == eucl_truncate_down ::
    nat => ('a, 'b) vec => ('a, 'b) vec
  eucl_truncate_up_vec == eucl_truncate_up ::
    nat => ('a, 'b) vec => ('a, 'b) vec
locale blinfun_syntax
### theory "Draft.Executable_Euclidean_Space"
### 3.356s elapsed time, 8.261s cpu time, 2.084s GC time
Loading theory "Draft.Affine_Form" (required by "Draft.Affine_CodeTemplates" via "Draft.Affine_Code" via "Draft.Affine_Approximation")
Loading theory "Draft.Floatarith_Expression" (required by "Draft.Affine_CodeTemplates" via "Draft.Affine_Code" via "Draft.Affine_Approximation" via "Draft.Straight_Line_Program")
consts
  interpret_floatariths :: "floatarith list => real list => real list"
instantiation
  floatarith :: {inverse,minus,one,plus,times,uminus,zero}
  zero_floatarith == zero_class.zero :: floatarith
  uminus_floatarith == uminus :: floatarith => floatarith
  times_floatarith == times :: floatarith => floatarith => floatarith
  plus_floatarith == plus :: floatarith => floatarith => floatarith
  one_floatarith == one_class.one :: floatarith
  minus_floatarith == minus :: floatarith => floatarith => floatarith
  inverse_floatarith == inverse :: floatarith => floatarith
  divide_floatarith == divide :: floatarith => floatarith => floatarith
consts
  Sum\<^sub>e :: "('a => 'b) => 'a list => 'b"
instantiation
  pdevs :: (equal) equal
  equal_pdevs == equal_class.equal :: 'a pdevs => 'a pdevs => bool
Found termination order: "{}"
Found termination order: "size <*mlex*> {}"
consts
  max_Var_floatarith :: "floatarith => nat"
consts
  max_Var_floatariths :: "floatarith list => nat"
consts
  max_Var_form :: "form => nat"
### theory "Draft.Affine_Form"
### 2.442s elapsed time, 5.593s cpu time, 1.340s GC time
Loading theory "Draft.Intersection" (required by "Draft.Affine_CodeTemplates" via "Draft.Affine_Code")
consts
  fresh_floatarith :: "floatarith => nat => bool"
consts
  fresh_floatariths :: "floatarith list => nat => bool"
Found termination order: "(%p. size_list size (snd p)) <*mlex*> {}"
### ML warning (line 976 of "$AFP/Affine_Arithmetic/Floatarith_Expression.thy"):
### Pattern is not exhaustive.
### ML warning (line 978 of "$AFP/Affine_Arithmetic/Floatarith_Expression.thy"):
### Pattern is not exhaustive.
### ML warning (line 1013 of "$AFP/Affine_Arithmetic/Floatarith_Expression.thy"):
### Pattern is not exhaustive.
### ML warning (line 1031 of "$AFP/Affine_Arithmetic/Floatarith_Expression.thy"):
### Pattern is not exhaustive.
val mk_congeq = fn: Proof.context -> term list -> thm -> string list * thm
val mk_congs = fn:
   Proof.context ->
     thm list -> (string list * thm) list * (typ * ('a list * 'b list)) list
val interpret_floatariths_congs = fn: Proof.context -> thm list
val preproc_form_conv = fn: Proof.context -> conv
val reify_floatariths_tac = fn: Proof.context -> int -> tactic
### Cannot skip proof of schematic goal statement
val interpret_floatariths_step_tac = fn: Proof.context -> int -> tactic
Found termination order: "length <*mlex*> {}"
Found termination order: "(%p. size (snd p)) <*mlex*> {}"
Found termination order: "{}"
Found termination order: "{}"
Found termination order: "size <*mlex*> {}"
consts
  bound_intersect_2d ::
    "nat
     => ((real * real) * real * real) list => real => (real * real) option"
Found termination order: "(%p. length (fst (snd p))) <*mlex*> {}"
consts
  freshs_floatarith :: "floatarith => nat list => bool"
### theory "Draft.Intersection"
### 3.122s elapsed time, 6.679s cpu time, 0.969s GC time
Found termination order: "size <*mlex*> {}"
Found termination order: "size <*mlex*> {}"
consts
  isnFDERIV ::
    "nat
     => floatarith list => nat list => nat list => real list => nat => bool"
consts
  isnFDERIV_approx ::
    "nat
     => nat
        => floatarith list
           => nat list
              => nat list => float interval option list => nat => bool"
Found termination order: "(%p. size (snd p)) <*mlex*> {}"
### theory "Draft.Floatarith_Expression"
### 9.213s elapsed time, 16.599s cpu time, 3.136s GC time
Loading theory "Draft.Straight_Line_Program" (required by "Draft.Affine_CodeTemplates" via "Draft.Affine_Code" via "Draft.Affine_Approximation")
deriving "compare_order" instance for type "Float.float"
deriving "compare" instance for type "Float.float"
deriving "linorder" instance for type "Approximation.floatarith"
generating comparator for type "Approximation.floatarith"
consts
  interpret_slp :: "floatarith list => real list => real list"
Found termination order: "(%p. size (fst p)) <*mlex*> {}"
consts
  slp_of_fas' ::
    "floatarith list
     => (floatarith, nat) mapping
        => floatarith list => (floatarith, nat) mapping * floatarith list"
Found termination order: "(%p. size (fst p)) <*mlex*> {}"
### theory "Draft.Straight_Line_Program"
### 6.288s elapsed time, 7.828s cpu time, 1.544s GC time
Loading theory "Draft.Affine_Approximation" (required by "Draft.Affine_CodeTemplates" via "Draft.Affine_Code")
Found termination order: "(%p. size_list size (snd p)) <*mlex*> {}"
consts
  points_of_aform :: "'a * 'a pdevs => 'a list"
"float_plus_down"
  :: "nat => float => float => float"
Found termination order: "(%p. length (snd (snd p))) <*mlex*> {}"
Found termination order: "(%p. size (fst (snd p))) <*mlex*> {}"
consts
  approx_floatariths_aformerr ::
    "nat
     => floatarith list
        => ((real * real pdevs) * real) list
           => ((real * real pdevs) * real) list option"
consts
  approx_slp ::
    "nat
     => floatarith list
        => ((real * real pdevs) * real) list
           => ((real * real pdevs) * real) list option"
### theory "Draft.Affine_Approximation"
### 3.640s elapsed time, 4.286s cpu time, 0.836s GC time
Loading theory "Draft.Affine_Code" (required by "Draft.Affine_CodeTemplates")
consts
  degree_list :: "(nat * 'a) list => nat"
Found termination order:
  "(%p. size_list size (snd (snd (snd (snd p))))) <*mlex*>
   (%p. size_list size (fst (snd (snd (snd p))))) <*mlex*> {}"
consts
  update_list :: "nat => 'a => (nat * 'a) list => (nat * 'a) list"
### theory "Draft.Affine_Code"
### 1.396s elapsed time, 1.592s cpu time, 0.292s GC time
Loading theory "Draft.Affine_CodeTemplates"
val templateLemmas = []: (string * thm * template) list
### theory "Draft.Affine_CodeTemplates"
### 2.003s elapsed time, 3.847s cpu time, 2.330s GC time
val it = (): unit
