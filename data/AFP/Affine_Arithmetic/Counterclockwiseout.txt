Loading theory "HOL-Library.Function_Algebras" (required by "Draft.CounterclockwiseTemplates" via "Draft.ExtrEqs" via "HOL-Library.BigO")
Loading theory "Draft.Counterclockwise" (required by "Draft.CounterclockwiseTemplates")
Loading theory "HOL-Library.Stream" (required by "Draft.CounterclockwiseTemplates" via "Draft.ExtrEqs")
Loading theory "HOL-Library.Tree" (required by "Draft.CounterclockwiseTemplates" via "Draft.ExtrEqs" via "Draft.Templates")
instantiation
  fun :: (type, plus) plus
  plus_fun == plus :: ('a => 'b) => ('a => 'b) => 'a => 'b
instantiation
  fun :: (type, zero) zero
  zero_fun == zero_class.zero :: 'a => 'b
instantiation
  fun :: (type, times) times
  times_fun == times :: ('a => 'b) => ('a => 'b) => 'a => 'b
instantiation
  fun :: (type, one) one
  one_fun == one_class.one :: 'a => 'b
### theory "HOL-Library.Function_Algebras"
### 0.134s elapsed time, 0.538s cpu time, 0.060s GC time
Loading theory "HOL-Library.BigO" (required by "Draft.CounterclockwiseTemplates" via "Draft.ExtrEqs")
locale linorder_list0
  fixes le :: "'a => 'a => bool"
Proofs for inductive predicate(s) "sortedP"
  Proving monotonicity ...
locale linorder_list
  fixes le :: "'a => 'a => bool"
    and S :: "'a set"
  assumes "linorder_list le S"
locale ccw_system0
  fixes ccw :: "'a => 'a => 'a => bool"
    and S :: "'a set"
locale ccw_system12
  fixes ccw :: "'a => 'a => 'a => bool"
    and S :: "'a set"
  assumes "ccw_system12 ccw S"
locale ccw_system123
  fixes ccw :: "'a => 'a => 'a => bool"
    and S :: "'a set"
  assumes "ccw_system123 ccw S"
locale ccw_system4
  fixes ccw :: "'a => 'a => 'a => bool"
    and S :: "'a set"
  assumes "ccw_system4 ccw S"
locale ccw_system1235'
  fixes ccw :: "'a => 'a => 'a => bool"
    and S :: "'a set"
  assumes "ccw_system1235' ccw S"
locale ccw_system1235
  fixes ccw :: "'a => 'a => 'a => bool"
    and S :: "'a set"
  assumes "ccw_system1235 ccw S"
locale ccw_system
  fixes ccw :: "'a => 'a => 'a => bool"
    and S :: "'a set"
  assumes "ccw_system ccw S"
### theory "Draft.Counterclockwise"
### 0.509s elapsed time, 2.012s cpu time, 0.136s GC time
consts
  shift :: "'a list => 'a stream => 'a stream"
Proofs for coinductive predicate(s) "streamsp"
  Proving monotonicity ...
consts
  snth :: "'a stream => nat => 'a"
consts
  stake :: "nat => 'a stream => 'a list"
consts
  left :: "'a tree => 'a tree"
consts
  sdrop :: "nat => 'a stream => 'a stream"
consts
  right :: "'a tree => 'a tree"
consts
  sfilter :: "('a => bool) => 'a stream => 'a stream"
Found termination order: "size <*mlex*> {}"
consts
  cycle :: "'a list => 'a stream"
Found termination order: "size <*mlex*> {}"
consts
  siterate :: "('a => 'a) => 'a => 'a stream"
### theory "HOL-Library.BigO"
### 0.707s elapsed time, 2.468s cpu time, 0.199s GC time
consts
  flat :: "'a list stream => 'a stream"
Found termination order: "size <*mlex*> {}"
class height = type +
  fixes height :: "'a => nat"
instantiation
  tree :: (type) height
  height_tree == height :: 'a tree => nat
consts
  sinterleave :: "'a stream => 'a stream => 'a stream"
consts
  szip :: "'a stream => 'b stream => ('a * 'b) stream"
Found termination order: "size <*mlex*> {}"
consts
  smap2 :: "('a => 'b => 'c) => 'a stream => 'b stream => 'c stream"
### theory "HOL-Library.Stream"
### 1.019s elapsed time, 3.386s cpu time, 0.332s GC time
Found termination order: "size <*mlex*> {}"
Found termination order: "size <*mlex*> {}"
Found termination order: "size <*mlex*> {}"
Found termination order: "size <*mlex*> {}"
Found termination order: "size <*mlex*> {}"
Found termination order: "size <*mlex*> {}"
Found termination order: "(%p. size (fst p)) <*mlex*> {}"
Found termination order: "size <*mlex*> {}"
Found termination order: "(%p. size (snd p)) <*mlex*> {}"
Found termination order: "size <*mlex*> {}"
### theory "HOL-Library.Tree"
### 1.998s elapsed time, 4.726s cpu time, 0.822s GC time
Loading theory "Draft.Templates" (required by "Draft.CounterclockwiseTemplates" via "Draft.ExtrEqs")
datatype template_term
=
     t_empty
   | template_app of template_term * template_term
   | template_hole of int
   | template_var of int
datatype sign
= equals | greater_equals | greater_than | less_equals | less_than
datatype template
=
     template_bimplication of template * template
   | template_dunno
   | template_equation of template_term * template_term
   | template_implication of template list * template
   | template_inequation of sign * template_term * template_term
   | template_negation of template
   | template_predicate of template_term
constructor t_empty: template_term
constructor template_app: template_term * template_term -> template_term
constructor template_hole: int -> template_term
constructor template_var: int -> template_term
constructor equals: sign
constructor greater_equals: sign
constructor greater_than: sign
constructor less_equals: sign
constructor less_than: sign
constructor template_bimplication: template * template -> template
constructor template_dunno: template
constructor template_equation: template_term * template_term -> template
constructor template_implication: template list * template -> template
constructor template_inequation:
   sign * template_term * template_term -> template
constructor template_negation: template -> template
constructor template_predicate: template_term -> template
val vfs = fn: term -> (indexname * typ) list * (string * typ) list
val indexOf = fn: ''a list -> ''a -> int -> int
val has_eq = fn: term -> bool
val term2template = fn:
   (indexname * typ) list -> (string * typ) list -> term -> template_term
val lemma2predicate = fn: term -> term -> template
val makeTemplatewithContext = fn: term -> term -> template
val lemma2template = fn: term -> template
val thm2template = fn: thm -> template
val tterm2string = fn: template_term -> string
val template2string = fn: template -> string
val t = "height ?t <= size ?t": thm
val th =
   Const ("HOL.Trueprop", "bool => prop") $
     (Const ("Orderings.ord_class.less_eq", "nat => nat => bool") $
       (Const ("Tree.height_class.height", "?'a tree => nat") $
         Var (("t", 0), "?'a tree")) $
       (Const ("Nat.size_class.size", "?'a tree => nat") $
         Var (("t", 0), "?'a tree"))):
   term
### theory "Draft.Templates"
### 0.062s elapsed time, 0.083s cpu time, 0.000s GC time
Loading theory "Draft.ExtrEqs" (required by "Draft.CounterclockwiseTemplates")
val eqpattern =
   Pattern
    (
       Const ("HOL.Trueprop", "bool => prop") $
         (Const ("HOL.eq", "?'a => ?'a => bool") $
           Var (("_dummy_", 1), "?'a") $ Var (("_dummy_", 2), "?'a"))
       ):
   term Find_Theorems.criterion
val badeqpattern = Pattern (Const ("Pure.eq", "?'a => ?'a => prop")):
   term Find_Theorems.criterion
val undefpattern =
   Pattern
    (
       Const ("HOL.Trueprop", "bool => prop") $
         (Const ("HOL.eq", "?'a => ?'a => bool") $
           Var (("_dummy_", 1), "?'a") $ Const ("HOL.undefined", "?'a"))
       ):
   term Find_Theorems.criterion
val thmpattern =
   Pattern
    (Const ("HOL.Trueprop", "bool => prop") $ Var (("_dummy_", 1), "bool")):
   term Find_Theorems.criterion
val badnames =
   ["*nitpick*", "*Nitpick*", "*full_exhaustive*", "*_def*", "Enum.finite*",
    "*Quickcheck*", "ATP*", "*Nunchaku*", "*Code*", "*BNF*", "*SMT*",
    "*.*.*"]:
   string list
val unwanted_names =
   [(false, Name "*nitpick*"), (false, Name "*Nitpick*"),
    (false, Name "*full_exhaustive*"), (false, Name "*_def*"),
    (false, Name "Enum.finite*"), (false, Name "*Quickcheck*"),
    (false, Name "ATP*"), (false, Name "*Nunchaku*"),
    (false, Name "*Code*"), (false, Name "*BNF*"), (false, Name "*SMT*"),
    (false, Name "*.*.*")]:
   (bool * term Find_Theorems.criterion) list
val has_vars = fn: term -> bool
val get_all_eqs = fn: string -> Proof.context -> (string * thm) list
val get_all_thms = fn: string -> Proof.context -> (string * thm) list
val get_noneq_thms = fn: string -> Proof.context -> (string * thm) list
val template_eqs = fn:
   string -> Proof.context -> (string * thm * template) list
val template_thms = fn:
   string -> Proof.context -> (string * thm * template) list
### theory "Draft.ExtrEqs"
### 0.482s elapsed time, 0.523s cpu time, 0.047s GC time
Loading theory "Draft.CounterclockwiseTemplates"
val templateLemmas =
   [("Counterclockwise.fold_if_in_set",
     "fold (%x m. if ?P x m then x else m) ?xs ?x : set (?x # ?xs)",
     template_predicate
      (
         template_app
          (template_app
            (template_hole 4,
             template_app
              (template_app
                (template_app (template_hole 3, t_empty), template_var 1),
               template_var 0)),
           template_app
            (template_hole 1,
             template_app
              (template_app (template_hole 0, template_var 0),
               template_var 1)))
         )),
    ("Counterclockwise.sum_nonpos_eq_0_iff",
     "[| finite ?A; ALL x:?A. ?f x <= (0::?'b) |]
      ==> (sum ?f ?A = (0::?'b)) = (ALL x:?A. ?f x = (0::?'b))",
     template_implication
      ([template_predicate (template_app (template_hole 6, template_var 1)),
        template_predicate
         (
            template_app
             (template_app (template_hole 5, template_var 1), t_empty)
            )],
       template_equation
        (template_app
          (template_app
            (template_hole 1,
             template_app
              (template_app (template_hole 0, template_var 0),
               template_var 1)),
           template_hole 3),
         template_app
          (template_app (template_hole 5, template_var 1), t_empty)))),
    ("Counterclockwise.convex3_alt",
     "[| 0 <= ?a; 0 <= ?b; 0 <= ?c; ?a + ?b + ?c = 1;
         !!u v.
            [| ?a *\<^sub>R ?x + ?b *\<^sub>R ?y + ?c *\<^sub>R ?z =
               ?x + u *\<^sub>R (?y - ?x) + v *\<^sub>R (?z - ?x);
               0 <= u; 0 <= v; u + v <= 1 |]
            ==> ?thesis |]
      ==> ?thesis",
     template_implication
      ([template_inequation (less_equals, template_hole 8, template_var 6),
        template_inequation (less_equals, template_hole 8, template_var 5),
        template_inequation (less_equals, template_hole 8, template_var 4),
        template_equation
         (template_app
           (template_app
             (template_hole 6,
              template_app
               (template_app (template_hole 6, template_var 6),
                template_var 5)),
            template_var 4),
          template_hole 5),
        template_predicate (template_app (template_hole 4, t_empty))],
       template_predicate (template_var 0)))]:
   (string * thm * template) list
### theory "Draft.CounterclockwiseTemplates"
### 0.743s elapsed time, 0.947s cpu time, 0.110s GC time
val it = (): unit
