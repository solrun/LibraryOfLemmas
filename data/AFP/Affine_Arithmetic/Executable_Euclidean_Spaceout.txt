Loading theory "HOL-Library.Stream" (required by "Draft.Executable_Euclidean_SpaceTemplates" via "Draft.ExtrEqs")
Loading theory "HOL-Library.Function_Algebras" (required by "Draft.Executable_Euclidean_SpaceTemplates" via "Draft.ExtrEqs" via "HOL-Library.BigO")
Loading theory "HOL-Library.Tree" (required by "Draft.Executable_Euclidean_SpaceTemplates" via "Draft.ExtrEqs" via "Draft.Templates")
Loading theory "Draft.Affine_Arithmetic_Auxiliarities" (required by "Draft.Executable_Euclidean_SpaceTemplates" via "Draft.Executable_Euclidean_Space")
instantiation
  fun :: (type, plus) plus
  plus_fun == plus :: ('a => 'b) => ('a => 'b) => 'a => 'b
instantiation
  fun :: (type, zero) zero
  zero_fun == zero_class.zero :: 'a => 'b
instantiation
  fun :: (type, times) times
  times_fun == times :: ('a => 'b) => ('a => 'b) => 'a => 'b
instantiation
  fun :: (type, one) one
  one_fun == one_class.one :: 'a => 'b
### theory "Draft.Affine_Arithmetic_Auxiliarities"
### 0.153s elapsed time, 0.584s cpu time, 0.057s GC time
Loading theory "Draft.Executable_Euclidean_Space" (required by "Draft.Executable_Euclidean_SpaceTemplates")
### theory "HOL-Library.Function_Algebras"
### 0.175s elapsed time, 0.665s cpu time, 0.057s GC time
Loading theory "HOL-Library.BigO" (required by "Draft.Executable_Euclidean_SpaceTemplates" via "Draft.ExtrEqs")
consts
  shift :: "'a list => 'a stream => 'a stream"
Proofs for coinductive predicate(s) "streamsp"
  Proving monotonicity ...
consts
  snth :: "'a stream => nat => 'a"
consts
  stake :: "nat => 'a stream => 'a list"
consts
  sdrop :: "nat => 'a stream => 'a stream"
consts
  sfilter :: "('a => bool) => 'a stream => 'a stream"
consts
  cycle :: "'a list => 'a stream"
consts
  left :: "'a tree => 'a tree"
consts
  right :: "'a tree => 'a tree"
consts
  siterate :: "('a => 'a) => 'a => 'a stream"
Found termination order: "size <*mlex*> {}"
consts
  flat :: "'a list stream => 'a stream"
consts
  sinterleave :: "'a stream => 'a stream => 'a stream"
Found termination order: "size <*mlex*> {}"
consts
  szip :: "'a stream => 'b stream => ('a * 'b) stream"
consts
  smap2 :: "('a => 'b => 'c) => 'a stream => 'b stream => 'c stream"
Found termination order: "size <*mlex*> {}"
### theory "HOL-Library.Stream"
### 0.911s elapsed time, 3.527s cpu time, 0.326s GC time
class height = type +
  fixes height :: "'a => nat"
instantiation
  tree :: (type) height
  height_tree == height :: 'a tree => nat
Found termination order: "size <*mlex*> {}"
### theory "HOL-Library.BigO"
### 0.915s elapsed time, 3.408s cpu time, 0.380s GC time
Found termination order: "size <*mlex*> {}"
Found termination order: "size <*mlex*> {}"
Found termination order: "size <*mlex*> {}"
Found termination order: "size <*mlex*> {}"
Found termination order: "size <*mlex*> {}"
Found termination order: "size <*mlex*> {}"
Found termination order: "(%p. size (fst p)) <*mlex*> {}"
Found termination order: "size <*mlex*> {}"
Found termination order: "(%p. size (snd p)) <*mlex*> {}"
Found termination order: "size <*mlex*> {}"
### theory "HOL-Library.Tree"
### 2.280s elapsed time, 6.724s cpu time, 1.151s GC time
Loading theory "Draft.Templates" (required by "Draft.Executable_Euclidean_SpaceTemplates" via "Draft.ExtrEqs")
datatype template_term
=
     t_empty
   | template_app of template_term * template_term
   | template_hole of int
   | template_var of int
datatype sign
= equals | greater_equals | greater_than | less_equals | less_than
datatype template
=
     template_bimplication of template * template
   | template_dunno
   | template_equation of template_term * template_term
   | template_implication of template list * template
   | template_inequation of sign * template_term * template_term
   | template_negation of template
   | template_predicate of template_term
constructor t_empty: template_term
constructor template_app: template_term * template_term -> template_term
constructor template_hole: int -> template_term
constructor template_var: int -> template_term
constructor equals: sign
constructor greater_equals: sign
constructor greater_than: sign
constructor less_equals: sign
constructor less_than: sign
constructor template_bimplication: template * template -> template
constructor template_dunno: template
constructor template_equation: template_term * template_term -> template
constructor template_implication: template list * template -> template
constructor template_inequation:
   sign * template_term * template_term -> template
constructor template_negation: template -> template
constructor template_predicate: template_term -> template
val vfs = fn: term -> (indexname * typ) list * (string * typ) list
val indexOf = fn: ''a list -> ''a -> int -> int
val has_eq = fn: term -> bool
val term2template = fn:
   (indexname * typ) list -> (string * typ) list -> term -> template_term
val lemma2predicate = fn: term -> term -> template
val makeTemplatewithContext = fn: term -> term -> template
val lemma2template = fn: term -> template
val thm2template = fn: thm -> template
val tterm2string = fn: template_term -> string
val template2string = fn: template -> string
val t = "height ?t <= size ?t": thm
val th =
   Const ("HOL.Trueprop", "bool => prop") $
     (Const ("Orderings.ord_class.less_eq", "nat => nat => bool") $
       (Const ("Tree.height_class.height", "?'a tree => nat") $
         Var (("t", 0), "?'a tree")) $
       (Const ("Nat.size_class.size", "?'a tree => nat") $
         Var (("t", 0), "?'a tree"))):
   term
### theory "Draft.Templates"
### 0.059s elapsed time, 0.140s cpu time, 0.000s GC time
Loading theory "Draft.ExtrEqs" (required by "Draft.Executable_Euclidean_SpaceTemplates")
class executable_euclidean_space = ordered_euclidean_space +
  fixes Basis_list :: "'a list"
    and eucl_down :: "int => 'a => 'a"
    and eucl_truncate_down :: "nat => 'a => 'a"
    and eucl_truncate_up :: "nat => 'a => 'a"
  assumes
    "eucl_down_def":
      "!!p b.
          eucl_down p b =
          (SUM i:Basis. round_down p (b \<bullet> i) *\<^sub>R i)"
  assumes
    "eucl_truncate_down_def":
      "!!q b.
          eucl_truncate_down q b =
          (SUM i:Basis. truncate_down q (b \<bullet> i) *\<^sub>R i)"
  assumes
    "eucl_truncate_up_def":
      "!!q b.
          eucl_truncate_up q b =
          (SUM i:Basis. truncate_up q (b \<bullet> i) *\<^sub>R i)"
  assumes "Basis_list": "set Basis_list = Basis"
  assumes "distinct_Basis_list": "distinct Basis_list"
instantiation
  real :: executable_euclidean_space
  Basis_list_real == Basis_list :: real list
  eucl_down_real == eucl_down :: int => real => real
  eucl_truncate_down_real == eucl_truncate_down :: nat => real => real
  eucl_truncate_up_real == eucl_truncate_up :: nat => real => real
instantiation
  prod :: (executable_euclidean_space, executable_euclidean_space)
    executable_euclidean_space
  Basis_list_prod == Basis_list :: ('a * 'b) list
  eucl_down_prod == eucl_down :: int => 'a * 'b => 'a * 'b
  eucl_truncate_down_prod == eucl_truncate_down :: nat => 'a * 'b => 'a * 'b
  eucl_truncate_up_prod == eucl_truncate_up :: nat => 'a * 'b => 'a * 'b
instantiation
  vec :: (executable_euclidean_space, enum) executable_euclidean_space
  Basis_list_vec == Basis_list :: ('a, 'b) vec list
  eucl_down_vec == eucl_down :: int => ('a, 'b) vec => ('a, 'b) vec
  eucl_truncate_down_vec == eucl_truncate_down ::
    nat => ('a, 'b) vec => ('a, 'b) vec
  eucl_truncate_up_vec == eucl_truncate_up ::
    nat => ('a, 'b) vec => ('a, 'b) vec
val eqpattern =
   Pattern
    (
       Const ("HOL.Trueprop", "bool => prop") $
         (Const ("HOL.eq", "?'a => ?'a => bool") $
           Var (("_dummy_", 1), "?'a") $ Var (("_dummy_", 2), "?'a"))
       ):
   term Find_Theorems.criterion
val badeqpattern = Pattern (Const ("Pure.eq", "?'a => ?'a => prop")):
   term Find_Theorems.criterion
val undefpattern =
   Pattern
    (
       Const ("HOL.Trueprop", "bool => prop") $
         (Const ("HOL.eq", "?'a => ?'a => bool") $
           Var (("_dummy_", 1), "?'a") $ Const ("HOL.undefined", "?'a"))
       ):
   term Find_Theorems.criterion
val thmpattern =
   Pattern
    (Const ("HOL.Trueprop", "bool => prop") $ Var (("_dummy_", 1), "bool")):
   term Find_Theorems.criterion
val badnames =
   ["*nitpick*", "*Nitpick*", "*full_exhaustive*", "*_def*", "Enum.finite*",
    "*Quickcheck*", "ATP*", "*Nunchaku*", "*Code*", "*BNF*", "*SMT*",
    "*.*.*"]:
   string list
val unwanted_names =
   [(false, Name "*nitpick*"), (false, Name "*Nitpick*"),
    (false, Name "*full_exhaustive*"), (false, Name "*_def*"),
    (false, Name "Enum.finite*"), (false, Name "*Quickcheck*"),
    (false, Name "ATP*"), (false, Name "*Nunchaku*"),
    (false, Name "*Code*"), (false, Name "*BNF*"), (false, Name "*SMT*"),
    (false, Name "*.*.*")]:
   (bool * term Find_Theorems.criterion) list
val has_vars = fn: term -> bool
val get_all_eqs = fn: string -> Proof.context -> (string * thm) list
val get_all_thms = fn: string -> Proof.context -> (string * thm) list
val get_noneq_thms = fn: string -> Proof.context -> (string * thm) list
val template_eqs = fn:
   string -> Proof.context -> (string * thm * template) list
val template_thms = fn:
   string -> Proof.context -> (string * thm * template) list
### theory "Draft.ExtrEqs"
### 0.646s elapsed time, 1.357s cpu time, 0.158s GC time
locale blinfun_syntax
### theory "Draft.Executable_Euclidean_Space"
### 3.381s elapsed time, 8.215s cpu time, 1.335s GC time
Loading theory "Draft.Executable_Euclidean_SpaceTemplates"
val templateLemmas =
   [("Executable_Euclidean_Space.bounded_linear_blinfun_scaleR",
     "bounded_linear (blinfun_scaleR ?a)",
     template_predicate
      (
         template_app
          (template_hole 1, template_app (template_hole 0, template_var 0))
         )),
    ("Executable_Euclidean_Space.eucl_of_list_list_of_eucl",
     "eucl_of_list (list_of_eucl ?x) = ?x",
     template_equation
      (template_app
        (template_hole 1, template_app (template_hole 0, template_var 0)),
       template_var 0)),
    ("Executable_Euclidean_Space.eucl_truncate_down_zero",
     "eucl_truncate_down ?p (0::?'a) = (0::?'a)",
     template_equation
      (template_app
        (template_app (template_hole 1, template_var 0), template_hole 0),
       template_hole 0)),
    ("Executable_Euclidean_Space.eucl_truncate_up_zero",
     "eucl_truncate_up ?p (0::?'a) = (0::?'a)",
     template_equation
      (template_app
        (template_app (template_hole 1, template_var 0), template_hole 0),
       template_hole 0)),
    ("Executable_Euclidean_Space.eucl_truncate_up",
     "?x <= eucl_truncate_up ?e ?x",
     template_inequation
      (less_equals, template_var 1,
       template_app
        (template_app (template_hole 0, template_var 0), template_var 1))),
    ("Executable_Euclidean_Space.eucl_down", "eucl_down ?e ?x <= ?x",
     template_inequation
      (less_equals,
       template_app
        (template_app (template_hole 0, template_var 1), template_var 0),
       template_var 0)),
    ("Executable_Euclidean_Space.eucl_truncate_down",
     "eucl_truncate_down ?e ?x <= ?x",
     template_inequation
      (less_equals,
       template_app
        (template_app (template_hole 0, template_var 1), template_var 0),
       template_var 0)),
    ("Executable_Euclidean_Space.axis_one_neq_zero",
     "axis ?xa (1::?'a) ~= 0",
     template_negation
      (
         template_equation
          (template_app
            (template_app (template_hole 2, template_var 0),
             template_hole 1),
           template_hole 0)
         )),
    ("Executable_Euclidean_Space.eucl_of_list_replicate_zero",
     "eucl_of_list (replicate ?E 0) = (0::?'a)",
     template_equation
      (template_app
        (template_hole 3,
         template_app
          (template_app (template_hole 2, template_var 0),
           template_hole 1)),
       template_hole 0)),
    ("Executable_Euclidean_Space.length_list_of_eucl",
     "length (list_of_eucl ?x) = DIM(?'a)",
     template_equation
      (template_app
        (template_hole 3, template_app (template_hole 2, template_var 0)),
       template_app (template_hole 1, template_hole 0))),
    ("Executable_Euclidean_Space.norm_flip_blinfun",
     "norm (flip_blinfun ?x) = norm ?x",
     template_equation
      (template_app
        (template_hole 2, template_app (template_hole 1, template_var 0)),
       template_app (template_hole 0, template_var 0))),
    ("Executable_Euclidean_Space.eucl_of_list_real",
     "eucl_of_list [?x] = ?x",
     template_equation
      (template_app
        (template_hole 2,
         template_app
          (template_app (template_hole 1, template_var 0),
           template_hole 0)),
       template_var 0)),
    ("Executable_Euclidean_Space.matrix_blinfun_of_vmatrix",
     "matrix (blinfun_apply (blinfun_of_vmatrix ?M)) = ?M",
     template_equation
      (template_app
        (template_hole 2,
         template_app
          (template_hole 1,
           template_app (template_hole 0, template_var 0))),
       template_var 0)),
    ("Executable_Euclidean_Space.index_enum_less",
     "index enum_class.enum ?i < CARD(?'n)",
     template_inequation
      (less_than,
       template_app
        (template_app (template_hole 3, template_hole 2), template_var 0),
       template_app (template_hole 1, template_hole 0))),
    ("Executable_Euclidean_Space.eucl_of_list_append_zeroes",
     "eucl_of_list (?xs @ replicate ?n 0) = eucl_of_list ?xs",
     template_equation
      (template_app
        (template_hole 3,
         template_app
          (template_app (template_hole 2, template_var 1),
           template_app
            (template_app (template_hole 1, template_var 0),
             template_hole 0))),
       template_app (template_hole 3, template_var 1))),
    ("Executable_Euclidean_Space.fst_eucl_of_list_prod",
     "fst (eucl_of_list ?xs) = eucl_of_list (take DIM(?'b) ?xs)",
     template_equation
      (template_app
        (template_hole 5, template_app (template_hole 4, template_var 0)),
       template_app
        (template_hole 3,
         template_app
          (template_app
            (template_hole 2,
             template_app (template_hole 1, template_hole 0)),
           template_var 0)))),
    ("Executable_Euclidean_Space.snd_eucl_of_list_prod",
     "snd (eucl_of_list ?xs) = eucl_of_list (drop DIM(?'b) ?xs)",
     template_equation
      (template_app
        (template_hole 5, template_app (template_hole 4, template_var 0)),
       template_app
        (template_hole 3,
         template_app
          (template_app
            (template_hole 2,
             template_app (template_hole 1, template_hole 0)),
           template_var 0)))),
    ("Executable_Euclidean_Space.index_Basis_list_axis1",
     "index Basis_list (axis ?i 1) = index enum_class.enum ?i",
     template_equation
      (template_app
        (template_app (template_hole 5, template_hole 4),
         template_app
          (template_app (template_hole 3, template_var 0),
           template_hole 2)),
       template_app
        (template_app (template_hole 1, template_hole 0), template_var 0))),
    ("Executable_Euclidean_Space.dist_swap2_swap2",
     "dist (flip_blinfun ?f) (flip_blinfun ?g) = dist ?f ?g",
     template_equation
      (template_app
        (template_app
          (template_hole 2, template_app (template_hole 1, template_var 1)),
         template_app (template_hole 1, template_var 0)),
       template_app
        (template_app (template_hole 0, template_var 1), template_var 0))),
    ("Executable_Euclidean_Space.sum_list_Basis_list",
     "sum_list (map ?f Basis_list) = sum ?f Basis",
     template_equation
      (template_app
        (template_hole 4,
         template_app
          (template_app (template_hole 3, template_var 0),
           template_hole 2)),
       template_app
        (template_app (template_hole 1, t_empty), template_hole 0))),
    ("Executable_Euclidean_Space.vec_nth_eq_list_of_eucl1",
     "?M $ ?i = list_of_eucl ?M ! index enum_class.enum ?i",
     template_equation
      (template_app
        (template_app (template_hole 4, template_var 1), template_var 0),
       template_app
        (template_app
          (template_hole 3, template_app (template_hole 2, template_var 1)),
         template_app
          (template_app (template_hole 1, template_hole 0),
           template_var 0)))),
    ("Executable_Euclidean_Space.le_norm_blinfun",
     "norm (blinfun_apply ?f ?x) / norm ?x <= norm ?f",
     template_inequation
      (less_equals,
       template_app
        (template_app
          (template_hole 4,
           template_app
            (template_hole 3,
             template_app
              (template_app (template_hole 2, template_var 1),
               template_var 0))),
         template_app (template_hole 1, template_var 0)),
       template_app (template_hole 0, template_var 1))),
    ("Executable_Euclidean_Space.eucl_truncate_up_le",
     "?x <= ?y ==> ?x <= eucl_truncate_up ?e ?y",
     template_implication
      ([template_inequation (less_equals, template_var 2, template_var 1)],
       template_inequation
        (less_equals, template_var 2,
         template_app
          (template_app (template_hole 0, template_var 0),
           template_var 1)))),
    ("Executable_Euclidean_Space.eucl_truncate_down_le",
     "?x <= ?y ==> eucl_truncate_down ?w ?x <= ?y",
     template_implication
      ([template_inequation (less_equals, template_var 2, template_var 1)],
       template_inequation
        (less_equals,
         template_app
          (template_app (template_hole 0, template_var 0), template_var 2),
         template_var 1))),
    ("Executable_Euclidean_Space.euclidean_eq_list_of_euclI",
     "list_of_eucl ?x = list_of_eucl ?y ==> ?x = ?y",
     template_implication
      ([template_equation
         (template_app (template_hole 1, template_var 1),
          template_app (template_hole 1, template_var 0))],
       template_equation (template_var 1, template_var 0))),
    ("Executable_Euclidean_Space.list_of_eucl_inj",
     "list_of_eucl ?z = list_of_eucl ?y ==> ?y = ?z",
     template_implication
      ([template_equation
         (template_app (template_hole 1, template_var 1),
          template_app (template_hole 1, template_var 0))],
       template_equation (template_var 0, template_var 1))),
    ("Executable_Euclidean_Space.blinfun_scaleR_rep_eq",
     "blinfun_apply (blinfun_scaleR ?a ?b) ?c =
      blinfun_apply ?a ?c *\<^sub>R ?b",
     template_equation
      (template_app
        (template_app
          (template_hole 3,
           template_app
            (template_app (template_hole 2, template_var 2),
             template_var 1)),
         template_var 0),
       template_app
        (template_app
          (template_hole 1,
           template_app
            (template_app (template_hole 0, template_var 2),
             template_var 0)),
         template_var 1))),
    ("Executable_Euclidean_Space.blinfun_apply_componentwise",
     "?B =
      (SUM i:Basis.
          blinfun_scaleR (blinfun_inner_left i) (blinfun_apply ?B i))",
     template_equation
      (template_var 0,
       template_app
        (template_app (template_hole 4, t_empty), template_hole 0))),
    ("Executable_Euclidean_Space.nth_Basis_list_in_Basis",
     "?n < length Basis_list ==> Basis_list ! ?n : Basis",
     template_implication
      ([template_inequation
         (less_than, template_var 0,
          template_app (template_hole 4, template_hole 3))],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 2,
               template_app
                (template_app (template_hole 1, template_hole 3),
                 template_var 0)),
             template_hole 0)
           ))),
    ("Executable_Euclidean_Space.flip_blinfun_apply",
     "blinfun_apply (blinfun_apply (flip_blinfun ?f) ?a) ?b =
      blinfun_apply (blinfun_apply ?f ?b) ?a",
     template_equation
      (template_app
        (template_app
          (template_hole 4,
           template_app
            (template_app
              (template_hole 3,
               template_app (template_hole 2, template_var 2)),
             template_var 1)),
         template_var 0),
       template_app
        (template_app
          (template_hole 1,
           template_app
            (template_app (template_hole 0, template_var 2),
             template_var 0)),
         template_var 1))),
    ("Executable_Euclidean_Space.eucl_of_list_vec_nth3",
     "eucl_of_list [?g, ?h, ?i] $ 1 = ?h",
     template_equation
      (template_app
        (template_app
          (template_hole 4,
           template_app
            (template_hole 3,
             template_app
              (template_app (template_hole 2, template_var 2),
               template_app
                (template_app (template_hole 2, template_var 1),
                 template_app
                  (template_app (template_hole 2, template_var 0),
                   template_hole 1))))),
         template_hole 0),
       template_var 1)),
    ("Executable_Euclidean_Space.eucl_of_list_vec_nth3",
     "eucl_of_list [?g, ?h, ?i] $ 0 = ?g",
     template_equation
      (template_app
        (template_app
          (template_hole 4,
           template_app
            (template_hole 3,
             template_app
              (template_app (template_hole 2, template_var 2),
               template_app
                (template_app (template_hole 2, template_var 1),
                 template_app
                  (template_app (template_hole 2, template_var 0),
                   template_hole 1))))),
         template_hole 0),
       template_var 2)),
    ("Executable_Euclidean_Space.eucl_truncate_down_mono",
     "?x <= ?y ==> eucl_truncate_down ?p ?x <= eucl_truncate_down ?p ?y",
     template_implication
      ([template_inequation (less_equals, template_var 2, template_var 1)],
       template_inequation
        (less_equals,
         template_app
          (template_app (template_hole 0, template_var 0), template_var 2),
         template_app
          (template_app (template_hole 0, template_var 0),
           template_var 1)))),
    ("Executable_Euclidean_Space.eucl_truncate_up_mono",
     "?x <= ?y ==> eucl_truncate_up ?p ?x <= eucl_truncate_up ?p ?y",
     template_implication
      ([template_inequation (less_equals, template_var 2, template_var 1)],
       template_inequation
        (less_equals,
         template_app
          (template_app (template_hole 0, template_var 0), template_var 2),
         template_app
          (template_app (template_hole 0, template_var 0),
           template_var 1)))),
    ("Executable_Euclidean_Space.in_Basis_index_Basis_list",
     "?i : Basis ==> ?i = Basis_list ! index Basis_list ?i",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 5, template_var 0),
              template_hole 4)
            )],
       template_equation
        (template_var 0,
         template_app
          (template_app (template_hole 2, template_hole 1),
           template_app
            (template_app (template_hole 0, template_hole 1),
             template_var 0))))),
    ("Executable_Euclidean_Space.has_derivative_Blinfun",
     "(?f has_derivative ?f') ?F ==>
      (?f has_derivative blinfun_apply (Blinfun ?f')) ?F",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app (template_hole 2, template_var 2),
                template_var 1),
              template_var 0)
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_app (template_hole 2, template_var 2),
               template_app
                (template_hole 1,
                 template_app (template_hole 0, template_var 1))),
             template_var 0)
           ))),
    ("Executable_Euclidean_Space.Basis_list_nth_nonzero",
     "?i < length Basis_list ==> Basis_list ! ?i ~= (0::?'a)",
     template_implication
      ([template_inequation
         (less_than, template_var 0,
          template_app (template_hole 5, template_hole 4))],
       template_negation
        (
           template_equation
            (template_app
              (template_app (template_hole 1, template_hole 4),
               template_var 0),
             template_hole 0)
           ))),
    ("Executable_Euclidean_Space.list_of_eucl_eucl_of_list",
     "length ?xs = DIM(?'a) ==> list_of_eucl (eucl_of_list ?xs) = ?xs",
     template_implication
      ([template_equation
         (template_app (template_hole 5, template_var 0),
          template_app (template_hole 4, template_hole 3))],
       template_equation
        (template_app
          (template_hole 1, template_app (template_hole 0, template_var 0)),
         template_var 0))),
    ("Executable_Euclidean_Space.less_square_imp_div_less",
     "?i < ?E * ?D ==> ?i div ?E < ?D",
     template_implication
      ([template_inequation
         (less_than, template_var 2,
          template_app
           (template_app (template_hole 1, template_var 1),
            template_var 0))],
       template_inequation
        (less_than,
         template_app
          (template_app (template_hole 0, template_var 2), template_var 1),
         template_var 0))),
    ("Executable_Euclidean_Space.vec_nth_matrix",
     "matrix ?y $ ?i $ ?j = ?y (axis ?j (1::?'a)) $ ?i",
     template_equation
      (template_app
        (template_app
          (template_hole 5,
           template_app
            (template_app
              (template_hole 4,
               template_app (template_hole 3, template_var 2)),
             template_var 1)),
         template_var 0),
       template_app
        (template_app
          (template_hole 2,
           template_app
            (template_var 2,
             template_app
              (template_app (template_hole 1, template_var 0),
               template_hole 0))),
         template_var 1))),
    ("Executable_Euclidean_Space.blinfun_componentwise",
     "?f =
      (%x. SUM i:Basis.
              blinfun_scaleR (blinfun_inner_left i)
               (blinfun_apply (?f x) i))",
     template_equation (template_var 0, t_empty)),
    ("Executable_Euclidean_Space.take_append_take_minus_idem",
     "take ?n ?XS @ map ((!) ?XS) [?n..<length ?XS] = ?XS",
     template_equation
      (template_app
        (template_app
          (template_hole 5,
           template_app
            (template_app (template_hole 4, template_var 1),
             template_var 0)),
         template_app
          (template_app
            (template_hole 3,
             template_app (template_hole 2, template_var 0)),
           template_app
            (template_app (template_hole 1, template_var 1),
             template_app (template_hole 0, template_var 0)))),
       template_var 0)),
    ("Executable_Euclidean_Space.infnorm",
     "infnorm ?x =
      fold max (map (%i. \<bar>?x \<bullet> i\<bar>) Basis_list) 0",
     template_equation
      (template_app (template_hole 7, template_var 0),
       template_app
        (template_app
          (template_app (template_hole 6, template_hole 5),
           template_app
            (template_app (template_hole 4, t_empty), template_hole 1)),
         template_hole 0))),
    ("Executable_Euclidean_Space.eucl_of_list_take_DIM",
     "?d = DIM(?'b) ==> eucl_of_list (take ?d ?xs) = eucl_of_list ?xs",
     template_implication
      ([template_equation
         (template_var 1, template_app (template_hole 4, template_hole 3))],
       template_equation
        (template_app
          (template_hole 1,
           template_app
            (template_app (template_hole 0, template_var 1),
             template_var 0)),
         template_app (template_hole 1, template_var 0)))),
    ("Executable_Euclidean_Space.index_Basis_list_nth",
     "?i < DIM(?'a) ==> index Basis_list (Basis_list ! ?i) = ?i",
     template_implication
      ([template_inequation
         (less_than, template_var 0,
          template_app (template_hole 5, template_hole 4))],
       template_equation
        (template_app
          (template_app (template_hole 2, template_hole 1),
           template_app
            (template_app (template_hole 0, template_hole 1),
             template_var 0)),
         template_var 0))),
    ("Executable_Euclidean_Space.eucl_of_list_eq_takeI",
     "eucl_of_list (take DIM(?'a) ?xs) = ?x ==> eucl_of_list ?xs = ?x",
     template_implication
      ([template_equation
         (template_app
           (template_hole 3,
            template_app
             (template_app
               (template_hole 2,
                template_app (template_hole 1, template_hole 0)),
              template_var 1)),
          template_var 0)],
       template_equation
        (template_app (template_hole 3, template_var 1), template_var 0))),
    ("Executable_Euclidean_Space.eucl_of_list_vec_nth3",
     "eucl_of_list [?g, ?h, ?i] $ 2 = ?i",
     template_equation
      (template_app
        (template_app
          (template_hole 6,
           template_app
            (template_hole 5,
             template_app
              (template_app (template_hole 4, template_var 2),
               template_app
                (template_app (template_hole 4, template_var 1),
                 template_app
                  (template_app (template_hole 4, template_var 0),
                   template_hole 3))))),
         template_app
          (template_hole 2,
           template_app (template_hole 1, template_hole 0))),
       template_var 0)),
    ("Executable_Euclidean_Space.eucl_of_list_vec_nth3",
     "eucl_of_list [?g, ?h, ?i] $ 3 = ?g",
     template_equation
      (template_app
        (template_app
          (template_hole 6,
           template_app
            (template_hole 5,
             template_app
              (template_app (template_hole 4, template_var 2),
               template_app
                (template_app (template_hole 4, template_var 1),
                 template_app
                  (template_app (template_hole 4, template_var 0),
                   template_hole 3))))),
         template_app
          (template_hole 2,
           template_app (template_hole 1, template_hole 0))),
       template_var 2)),
    ("Executable_Euclidean_Space.eucl_of_list_prod",
     "eucl_of_list ?xs =
      (eucl_of_list (take DIM(?'b) ?xs), eucl_of_list (drop DIM(?'b) ?xs))",
     template_equation
      (template_app (template_hole 7, template_var 0),
       template_app
        (template_app
          (template_hole 6,
           template_app
            (template_hole 5,
             template_app
              (template_app
                (template_hole 4,
                 template_app (template_hole 3, template_hole 2)),
               template_var 0))),
         template_app
          (template_hole 1,
           template_app
            (template_app
              (template_hole 0,
               template_app (template_hole 3, template_hole 2)),
             template_var 0))))),
    ("Executable_Euclidean_Space.eucl_of_list3",
     "eucl_of_list [?a, ?b, ?c] = (?a, ?b, ?c)",
     template_equation
      (template_app
        (template_hole 4,
         template_app
          (template_app (template_hole 3, template_var 2),
           template_app
            (template_app (template_hole 3, template_var 1),
             template_app
              (template_app (template_hole 3, template_var 0),
               template_hole 2)))),
       template_app
        (template_app (template_hole 1, template_var 2),
         template_app
          (template_app (template_hole 0, template_var 1),
           template_var 0)))),
    ("Executable_Euclidean_Space.index_Basis_list_prod",
     "?a : Basis ==> index Basis_list (?a, 0::?'b) = index Basis_list ?a",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 8, template_var 0),
              template_hole 7)
            )],
       template_equation
        (template_app
          (template_app (template_hole 5, template_hole 4),
           template_app
            (template_app (template_hole 3, template_var 0),
             template_hole 2)),
         template_app
          (template_app (template_hole 1, template_hole 0),
           template_var 0)))),
    ("Executable_Euclidean_Space.matrix_columnI",
     "(!!i. column i ?A = column i ?B) ==> ?A = ?B",
     template_implication
      ([template_predicate (template_app (template_hole 4, t_empty))],
       template_equation (template_var 1, template_var 0))),
    ("Executable_Euclidean_Space.sum_index_enum_eq",
     "(SUM k:UNIV. ?f (index enum_class.enum k)) = sum ?f {..<CARD(?'n)}",
     template_equation
      (template_app
        (template_app (template_hole 6, t_empty), template_hole 3),
       template_app
        (template_app (template_hole 2, t_empty),
         template_app
          (template_hole 1,
           template_app (template_hole 0, template_hole 3))))),
    ("Executable_Euclidean_Space.sum_Basis_sum_nth_Basis_list",
     "sum ?f Basis = (SUM i<DIM(?'a). ?f (Basis_list ! i))",
     template_equation
      (template_app
        (template_app (template_hole 6, t_empty), template_hole 5),
       template_app
        (template_app (template_hole 4, t_empty),
         template_app
          (template_hole 1,
           template_app (template_hole 0, template_hole 5))))),
    ("Executable_Euclidean_Space.forall_3'",
     "(ALL i. ?P i) = (?P 0 & ?P 1 & ?P 2)",
     template_equation
      (template_app (template_hole 6, t_empty),
       template_app
        (template_app
          (template_hole 5, template_app (template_var 0, template_hole 4)),
         template_app
          (template_app
            (template_hole 5,
             template_app (template_var 0, template_hole 3)),
           template_app
            (template_var 0,
             template_app
              (template_hole 2,
               template_app (template_hole 1, template_hole 0))))))),
    ("Executable_Euclidean_Space.list_allI",
     "(!!x. x : set ?xs ==> ?P x) ==> list_all ?P ?xs",
     template_implication
      ([template_predicate (template_app (template_hole 4, t_empty))],
       template_predicate
        (
           template_app
            (template_app (template_hole 0, template_var 0), template_var 1)
           ))),
    ("Executable_Euclidean_Space.euclidean_vec_componentwise",
     "sum ?f Basis = (SUM a:Basis. SUM b:UNIV. ?f (axis b a))",
     template_equation
      (template_app
        (template_app (template_hole 6, t_empty), template_hole 5),
       template_app
        (template_app (template_hole 4, t_empty), template_hole 0))),
    ("Executable_Euclidean_Space.eucl_truncate_down_Basis",
     "?i : Basis ==>
      eucl_truncate_down ?e ?x \<bullet> ?i =
      truncate_down ?e (?x \<bullet> ?i)",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 5, template_var 2),
              template_hole 4)
            )],
       template_equation
        (template_app
          (template_app
            (template_hole 2,
             template_app
              (template_app (template_hole 1, template_var 1),
               template_var 0)),
           template_var 2),
         template_app
          (template_app (template_hole 0, template_var 1),
           template_app
            (template_app (template_hole 2, template_var 0),
             template_var 2))))),
    ("Executable_Euclidean_Space.eucl_truncate_up_Basis",
     "?i : Basis ==>
      eucl_truncate_up ?e ?x \<bullet> ?i =
      truncate_up ?e (?x \<bullet> ?i)",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 5, template_var 2),
              template_hole 4)
            )],
       template_equation
        (template_app
          (template_app
            (template_hole 2,
             template_app
              (template_app (template_hole 1, template_var 1),
               template_var 0)),
           template_var 2),
         template_app
          (template_app (template_hole 0, template_var 1),
           template_app
            (template_app (template_hole 2, template_var 0),
             template_var 2))))),
    ("Executable_Euclidean_Space.map_nth_append1",
     "length ?xs = ?d ==> map ((!) (?xs @ ?ys)) [0..<?d] = ?xs",
     template_implication
      ([template_equation
         (template_app (template_hole 6, template_var 2), template_var 1)],
       template_equation
        (template_app
          (template_app
            (template_hole 4,
             template_app
              (template_hole 3,
               template_app
                (template_app (template_hole 2, template_var 2),
                 template_var 0))),
           template_app
            (template_app (template_hole 1, template_hole 0),
             template_var 1)),
         template_var 2))),
    ("Executable_Euclidean_Space.list_of_eucl_nth",
     "?n < DIM(?'a) ==>
      list_of_eucl ?x ! ?n = ?x \<bullet> Basis_list ! ?n",
     template_implication
      ([template_inequation
         (less_than, template_var 1,
          template_app (template_hole 7, template_hole 6))],
       template_equation
        (template_app
          (template_app
            (template_hole 4,
             template_app (template_hole 3, template_var 0)),
           template_var 1),
         template_app
          (template_app (template_hole 2, template_var 0),
           template_app
            (template_app (template_hole 1, template_hole 0),
             template_var 1))))),
    ("Executable_Euclidean_Space.nth_ge_len",
     "length ?xs <= ?n ==> ?xs ! ?n = [] ! (?n - length ?xs)",
     template_implication
      ([template_inequation
         (less_equals, template_app (template_hole 4, template_var 1),
          template_var 0)],
       template_equation
        (template_app
          (template_app (template_hole 2, template_var 1), template_var 0),
         template_app
          (template_app (template_hole 2, template_hole 1),
           template_app
            (template_app (template_hole 0, template_var 0),
             template_app (template_hole 4, template_var 1)))))),
    ("Executable_Euclidean_Space.length_map2",
     "length (map2 ?f ?xs ?ys) = min (length ?xs) (length ?ys)",
     template_equation
      (template_app
        (template_hole 6,
         template_app
          (template_app
            (template_hole 5, template_app (template_hole 4, t_empty)),
           template_app
            (template_app (template_hole 3, template_var 1),
             template_var 0))),
       template_app
        (template_app
          (template_hole 2, template_app (template_hole 1, template_var 1)),
         template_app (template_hole 0, template_var 0)))),
    ("Executable_Euclidean_Space.list_of_eucl_add",
     "list_of_eucl (?x + ?y) =
      map2 (+) (list_of_eucl ?x) (list_of_eucl ?y)",
     template_equation
      (template_app
        (template_hole 5,
         template_app
          (template_app (template_hole 4, template_var 1), template_var 0)),
       template_app
        (template_app
          (template_hole 3, template_app (template_hole 2, t_empty)),
         template_app
          (template_app
            (template_hole 0,
             template_app (template_hole 5, template_var 1)),
           template_app (template_hole 5, template_var 0))))),
    ("Executable_Euclidean_Space.index_Basis_list_prod",
     "?b : Basis ==>
      index Basis_list (0::?'a, ?b) = DIM(?'a) + index Basis_list ?b",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 11, template_var 0),
              template_hole 10)
            )],
       template_equation
        (template_app
          (template_app (template_hole 8, template_hole 7),
           template_app
            (template_app (template_hole 6, template_hole 5),
             template_var 0)),
         template_app
          (template_app
            (template_hole 4,
             template_app (template_hole 3, template_hole 2)),
           template_app
            (template_app (template_hole 1, template_hole 0),
             template_var 0))))),
    ("Executable_Euclidean_Space.vec_nth_Basis",
     "?x : Basis ==> ?x $ ?i = (if ?x = axis ?i 1 then 1 else 0)",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 8, template_var 1),
              template_hole 7)
            )],
       template_implication
        ([template_predicate
           (
              template_app
               (template_app (template_hole 5, template_var 1),
                template_var 0)
              )],
         template_predicate
          (
             template_app
              (template_app
                (template_app
                  (template_hole 4,
                   template_app
                    (template_app (template_hole 3, template_var 1),
                     template_app
                      (template_app (template_hole 2, template_var 0),
                       template_hole 1))),
                 template_hole 1),
               template_hole 0)
             )))),
    ("Executable_Euclidean_Space.index_Basis_list_axis2",
     "index Basis_list (axis ?j (axis ?i 1)) =
      index enum_class.enum ?j * CARD(?'i) + index enum_class.enum ?i",
     template_equation
      (template_app
        (template_app (template_hole 12, template_hole 11),
         template_app
          (template_app (template_hole 10, template_var 1),
           template_app
            (template_app (template_hole 9, template_var 0),
             template_hole 8))),
       template_app
        (template_app
          (template_hole 7,
           template_app
            (template_app
              (template_hole 6,
               template_app
                (template_app (template_hole 5, template_hole 4),
                 template_var 1)),
             template_app (template_hole 3, template_hole 2))),
         template_app
          (template_app (template_hole 1, template_hole 0),
           template_var 0)))),
    ("Executable_Euclidean_Space.vec_nth_eq_list_of_eucl2",
     "?M $ ?i $ ?j =
      list_of_eucl ?M !
      (index enum_class.enum ?i * CARD(?'n) + index enum_class.enum ?j)",
     template_equation
      (template_app
        (template_app
          (template_hole 11,
           template_app
            (template_app (template_hole 10, template_var 2),
             template_var 1)),
         template_var 0),
       template_app
        (template_app
          (template_hole 9, template_app (template_hole 8, template_var 2)),
         template_app
          (template_app
            (template_hole 7,
             template_app
              (template_app
                (template_hole 6,
                 template_app
                  (template_app (template_hole 5, template_hole 4),
                   template_var 1)),
               template_app (template_hole 3, template_hole 2))),
           template_app
            (template_app (template_hole 1, template_hole 0),
             template_var 0))))),
    ("Executable_Euclidean_Space.index_zip_replicate2",
     "?d = length ?as ==>
      index (zip ?as (replicate ?d ?b)) (?a, ?b) = index ?as ?a",
     template_implication
      ([template_equation
         (template_var 3, template_app (template_hole 5, template_var 2))],
       template_equation
        (template_app
          (template_app
            (template_hole 4,
             template_app
              (template_app (template_hole 3, template_var 2),
               template_app
                (template_app (template_hole 2, template_var 3),
                 template_var 1))),
           template_app
            (template_app (template_hole 1, template_var 0),
             template_var 1)),
         template_app
          (template_app (template_hole 0, template_var 2),
           template_var 0)))),
    ("Executable_Euclidean_Space.index_zip_replicate1",
     "?d = length ?bs ==>
      index (zip (replicate ?d ?a) ?bs) (?a, ?b) = index ?bs ?b",
     template_implication
      ([template_equation
         (template_var 3, template_app (template_hole 5, template_var 2))],
       template_equation
        (template_app
          (template_app
            (template_hole 4,
             template_app
              (template_app
                (template_hole 3,
                 template_app
                  (template_app (template_hole 2, template_var 3),
                   template_var 1)),
               template_var 2)),
           template_app
            (template_app (template_hole 1, template_var 1),
             template_var 0)),
         template_app
          (template_app (template_hole 0, template_var 2),
           template_var 0)))),
    ("Executable_Euclidean_Space.eucl_of_list_map_const",
     "length ?xs = DIM(?'a) ==>
      eucl_of_list (map (%x. ?c) ?xs) = ?c *\<^sub>R One",
     template_implication
      ([template_equation
         (template_app (template_hole 7, template_var 1),
          template_app (template_hole 6, template_hole 5))],
       template_equation
        (template_app
          (template_hole 3,
           template_app
            (template_app (template_hole 2, t_empty), template_var 1)),
         template_app
          (template_app (template_hole 1, template_var 0),
           template_app
            (template_app (template_hole 0, t_empty), template_hole 5))))),
    ("Executable_Euclidean_Space.vec_nth_eucl_of_list_eq",
     "length ?M = CARD(?'n) ==>
      eucl_of_list ?M $ ?i = ?M ! index Basis_list (axis ?i 1)",
     template_implication
      ([template_equation
         (template_app (template_hole 10, template_var 1),
          template_app (template_hole 9, template_hole 8))],
       template_equation
        (template_app
          (template_app
            (template_hole 6,
             template_app (template_hole 5, template_var 1)),
           template_var 0),
         template_app
          (template_app (template_hole 4, template_var 1),
           template_app
            (template_app (template_hole 3, template_hole 2),
             template_app
              (template_app (template_hole 1, template_var 0),
               template_hole 0)))))),
    ("Executable_Euclidean_Space.matrix_eqI",
     "(!!x. x : Basis ==> ?A *v x = ?B *v x) ==> ?A = ?B",
     template_implication
      ([template_predicate (template_app (template_hole 6, t_empty))],
       template_equation (template_var 1, template_var 0))),
    ("Executable_Euclidean_Space.in_square_lemma'",
     "[| ?i < ?L; ?n < ?N |] ==> ?i * ?N + ?n < ?N * ?L",
     template_implication
      ([template_inequation (less_than, template_var 3, template_var 2),
        template_inequation (less_than, template_var 1, template_var 0)],
       template_inequation
        (less_than,
         template_app
          (template_app
            (template_hole 1,
             template_app
              (template_app (template_hole 0, template_var 3),
               template_var 0)),
           template_var 1),
         template_app
          (template_app (template_hole 0, template_var 0),
           template_var 2)))),
    ("Executable_Euclidean_Space.in_square_lemma",
     "[| ?x < ?D; ?y < ?C |] ==> ?x * ?C + ?y < ?D * ?C",
     template_implication
      ([template_inequation (less_than, template_var 3, template_var 2),
        template_inequation (less_than, template_var 1, template_var 0)],
       template_inequation
        (less_than,
         template_app
          (template_app
            (template_hole 1,
             template_app
              (template_app (template_hole 0, template_var 3),
               template_var 0)),
           template_var 1),
         template_app
          (template_app (template_hole 0, template_var 2),
           template_var 0)))),
    ("Executable_Euclidean_Space.eucl_truncate_down_correct",
     "dist ?x (eucl_down ?e ?x)
      : {0..sqrt (real DIM(?'a)) * 2 powr real_of_int (- ?e)}",
     template_predicate
      (
         template_app
          (template_app
            (template_hole 15,
             template_app
              (template_app (template_hole 14, template_var 1),
               template_app
                (template_app (template_hole 13, template_var 0),
                 template_var 1))),
           template_app
            (template_app (template_hole 12, template_hole 11),
             template_app
              (template_app
                (template_hole 10,
                 template_app
                  (template_hole 9,
                   template_app
                    (template_hole 8,
                     template_app (template_hole 7, template_hole 6)))),
               template_app
                (template_app
                  (template_hole 5,
                   template_app
                    (template_hole 4,
                     template_app (template_hole 3, template_hole 2))),
                 template_app
                  (template_hole 1,
                   template_app (template_hole 0, template_var 0))))))
         )),
    ("Executable_Euclidean_Space.map_nth_append2",
     "length ?ys = ?d ==>
      map ((!) (?xs @ ?ys)) [length ?xs..<length ?xs + ?d] = ?ys",
     template_implication
      ([template_equation
         (template_app (template_hole 6, template_var 2), template_var 1)],
       template_equation
        (template_app
          (template_app
            (template_hole 4,
             template_app
              (template_hole 3,
               template_app
                (template_app (template_hole 2, template_var 0),
                 template_var 2))),
           template_app
            (template_app
              (template_hole 1,
               template_app (template_hole 6, template_var 0)),
             template_app
              (template_app
                (template_hole 0,
                 template_app (template_hole 6, template_var 0)),
               template_var 1))),
         template_var 2))),
    ("Executable_Euclidean_Space.eucl_of_list_map_uminus",
     "length ?xs = DIM(?'a) ==>
      eucl_of_list (map (%x. - ?f x) ?xs) = - eucl_of_list (map ?f ?xs)",
     template_implication
      ([template_equation
         (template_app (template_hole 7, template_var 1),
          template_app (template_hole 6, template_hole 5))],
       template_equation
        (template_app
          (template_hole 3,
           template_app
            (template_app (template_hole 2, t_empty), template_var 1)),
         template_app
          (template_hole 0,
           template_app
            (template_hole 3,
             template_app
              (template_app (template_hole 2, template_var 0),
               template_var 1)))))),
    ("Executable_Euclidean_Space.list_of_eucl_nth_if",
     "list_of_eucl ?x ! ?n =
      (if ?n < DIM(?'a) then ?x \<bullet> Basis_list ! ?n
       else [] ! (?n - DIM(?'a)))",
     template_equation
      (template_app
        (template_app
          (template_hole 10,
           template_app (template_hole 9, template_var 1)),
         template_var 0),
       template_app
        (template_app
          (template_app
            (template_hole 8,
             template_app
              (template_app (template_hole 7, template_var 0),
               template_app (template_hole 6, template_hole 5))),
           template_app
            (template_app (template_hole 4, template_var 1),
             template_app
              (template_app (template_hole 3, template_hole 2),
               template_var 0))),
         template_app
          (template_app (template_hole 10, template_hole 1),
           template_app
            (template_app (template_hole 0, template_var 0),
             template_app (template_hole 6, template_hole 5)))))),
    ("Executable_Euclidean_Space.vec_nth_Basis2",
     "?x : Basis ==>
      ?x $ ?i $ ?j = (if ?x = axis ?i (axis ?j 1) then 1 else 0)",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 10, template_var 2),
              template_hole 9)
            )],
       template_implication
        ([template_predicate
           (
              template_app
               (template_app
                 (template_hole 7,
                  template_app
                   (template_app (template_hole 6, template_var 2),
                    template_var 1)),
                template_var 0)
              )],
         template_predicate
          (
             template_app
              (template_app
                (template_app
                  (template_hole 5,
                   template_app
                    (template_app (template_hole 4, template_var 2),
                     template_app
                      (template_app (template_hole 3, template_var 1),
                       template_app
                        (template_app (template_hole 2, template_var 0),
                         template_hole 1)))),
                 template_hole 1),
               template_hole 0)
             )))),
    ("Executable_Euclidean_Space.nth_eq_iff_index",
     "[| distinct ?xs; ?n < length ?xs |]
      ==> (?xs ! ?n = ?i) = (?n = index ?xs ?i)",
     template_implication
      ([template_predicate (template_app (template_hole 7, template_var 2)),
        template_inequation
         (less_than, template_var 1,
          template_app (template_hole 5, template_var 2))],
       template_bimplication
        (template_equation
          (template_app
            (template_app (template_hole 2, template_var 2),
             template_var 1),
           template_var 0),
         template_equation
          (template_var 1,
           template_app
            (template_app (template_hole 0, template_var 2),
             template_var 0))))),
    ("Executable_Euclidean_Space.eucl_le_Basis_list_iff",
     "(?x <= ?y) =
      (ALL i<DIM(?'a).
          ?x \<bullet> Basis_list ! i <= ?y \<bullet> Basis_list ! i)",
     template_equation
      (template_app
        (template_app (template_hole 9, template_var 1), template_var 0),
       template_app (template_hole 8, t_empty))),
    ("Executable_Euclidean_Space.eucl_of_list_map_mult_left",
     "length ?xs = DIM(?'a) ==>
      eucl_of_list (map (%x. ?r * ?f x) ?xs) =
      ?r *\<^sub>R eucl_of_list (map ?f ?xs)",
     template_implication
      ([template_equation
         (template_app (template_hole 7, template_var 2),
          template_app (template_hole 6, template_hole 5))],
       template_equation
        (template_app
          (template_hole 3,
           template_app
            (template_app (template_hole 2, t_empty), template_var 2)),
         template_app
          (template_app (template_hole 0, template_var 1),
           template_app
            (template_hole 3,
             template_app
              (template_app (template_hole 2, template_var 0),
               template_var 2)))))),
    ("Executable_Euclidean_Space.eucl_of_list_map_mult_right",
     "length ?xs = DIM(?'a) ==>
      eucl_of_list (map (%x. ?f x * ?r) ?xs) =
      ?r *\<^sub>R eucl_of_list (map ?f ?xs)",
     template_implication
      ([template_equation
         (template_app (template_hole 7, template_var 2),
          template_app (template_hole 6, template_hole 5))],
       template_equation
        (template_app
          (template_hole 3,
           template_app
            (template_app (template_hole 2, t_empty), template_var 2)),
         template_app
          (template_app (template_hole 0, template_var 0),
           template_app
            (template_hole 3,
             template_app
              (template_app (template_hole 2, template_var 1),
               template_var 2)))))),
    ("Executable_Euclidean_Space.eucl_of_list_nth",
     "length ?xs = DIM(?'a) ==>
      eucl_of_list ?xs =
      (SUM i<DIM(?'a). ?xs ! i *\<^sub>R Basis_list ! i)",
     template_implication
      ([template_equation
         (template_app (template_hole 10, template_var 0),
          template_app (template_hole 9, template_hole 8))],
       template_equation
        (template_app (template_hole 6, template_var 0),
         template_app
          (template_app (template_hole 5, t_empty),
           template_app
            (template_hole 0,
             template_app (template_hole 9, template_hole 8)))))),
    ("Executable_Euclidean_Space.Basis_prodD",
     "(?i, ?j) : Basis ==>
      ?i : Basis & ?j = (0::?'b) | ?i = (0::?'a) & ?j : Basis",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_hole 12,
                template_app
                 (template_app (template_hole 11, template_var 1),
                  template_var 0)),
              template_hole 10)
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 9,
               template_app
                (template_app
                  (template_hole 8,
                   template_app
                    (template_app (template_hole 7, template_var 1),
                     template_hole 6)),
                 template_app
                  (template_app (template_hole 5, template_var 0),
                   template_hole 4))),
             template_app
              (template_app
                (template_hole 8,
                 template_app
                  (template_app (template_hole 3, template_var 1),
                   template_hole 2)),
               template_app
                (template_app (template_hole 1, template_var 0),
                 template_hole 0)))
           ))),
    ("Executable_Euclidean_Space.blinfun_scaleR_has_derivative",
     "(?f has_derivative ?f') (at ?x within ?s) ==>
      ((%x. blinfun_scaleR ?a (?f x)) has_derivative
       (%x. blinfun_scaleR ?a (?f' x)))
       (at ?x within ?s)",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app (template_hole 3, template_var 4),
                template_var 3),
              template_app
               (template_app (template_hole 2, template_var 2),
                template_var 1))
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_app (template_hole 1, t_empty), t_empty),
             template_app
              (template_app (template_hole 2, template_var 2),
               template_var 1))
           ))),
    ("Executable_Euclidean_Space.bounded_linear_via_derivative",
     "(!!i. ((%x. blinfun_apply (?f x) i) has_derivative (%x. ?f' ?y x i))
             (at ?y)) ==>
      bounded_linear (?f' ?y ?x)",
     template_implication
      ([template_predicate (template_app (template_hole 6, t_empty))],
       template_predicate
        (
           template_app
            (template_hole 0,
             template_app
              (template_app (template_var 2, template_var 1),
               template_var 0))
           ))),
    ("Executable_Euclidean_Space.inner_eucl_of_list",
     "[| ?i : Basis; length ?xs = DIM(?'a) |]
      ==> ?i \<bullet> eucl_of_list ?xs = ?xs ! index Basis_list ?i",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 10, template_var 1),
              template_hole 9)
            ),
        template_equation
         (template_app (template_hole 7, template_var 0),
          template_app (template_hole 6, template_hole 9))],
       template_equation
        (template_app
          (template_app (template_hole 4, template_var 1),
           template_app (template_hole 3, template_var 0)),
         template_app
          (template_app (template_hole 2, template_var 0),
           template_app
            (template_app (template_hole 1, template_hole 0),
             template_var 1))))),
    ("Executable_Euclidean_Space.eucl_of_list_inner",
     "[| ?i : Basis; length ?xs = DIM(?'a) |]
      ==> eucl_of_list ?xs \<bullet> ?i = ?xs ! index Basis_list ?i",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 10, template_var 1),
              template_hole 9)
            ),
        template_equation
         (template_app (template_hole 7, template_var 0),
          template_app (template_hole 6, template_hole 9))],
       template_equation
        (template_app
          (template_app
            (template_hole 4,
             template_app (template_hole 3, template_var 0)),
           template_var 1),
         template_app
          (template_app (template_hole 2, template_var 0),
           template_app
            (template_app (template_hole 1, template_hole 0),
             template_var 1))))),
    ("Executable_Euclidean_Space.eucl_of_list_inner_le",
     "[| ?i : Basis; DIM(?'a) <= length ?xs |]
      ==> eucl_of_list ?xs \<bullet> ?i = ?xs ! index Basis_list ?i",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 10, template_var 1),
              template_hole 9)
            ),
        template_inequation
         (less_equals, template_app (template_hole 7, template_hole 9),
          template_app (template_hole 6, template_var 0))],
       template_equation
        (template_app
          (template_app
            (template_hole 4,
             template_app (template_hole 3, template_var 0)),
           template_var 1),
         template_app
          (template_app (template_hole 2, template_var 0),
           template_app
            (template_app (template_hole 1, template_hole 0),
             template_var 1))))),
    ("Executable_Euclidean_Space.eucl_of_list_map_divide_right",
     "length ?xs = DIM(?'a) ==>
      eucl_of_list (map (%x. ?f x / ?r) ?xs) =
      eucl_of_list (map ?f ?xs) /\<^sub>R ?r",
     template_implication
      ([template_equation
         (template_app (template_hole 8, template_var 2),
          template_app (template_hole 7, template_hole 6))],
       template_equation
        (template_app
          (template_hole 4,
           template_app
            (template_app (template_hole 3, t_empty), template_var 2)),
         template_app
          (template_app
            (template_hole 1,
             template_app (template_hole 0, template_var 0)),
           template_app
            (template_hole 4,
             template_app
              (template_app (template_hole 3, template_var 1),
               template_var 2)))))),
    ("Executable_Euclidean_Space.eucl_of_list_inner_eq",
     "[| length ?xs = DIM(?'a); length ?ys = DIM(?'a) |]
      ==> eucl_of_list ?xs \<bullet> eucl_of_list ?ys =
          inner_lv_rel ?xs ?ys",
     template_implication
      ([template_equation
         (template_app (template_hole 6, template_var 1),
          template_app (template_hole 5, template_hole 4)),
        template_equation
         (template_app (template_hole 6, template_var 0),
          template_app (template_hole 5, template_hole 4))],
       template_equation
        (template_app
          (template_app
            (template_hole 2,
             template_app (template_hole 1, template_var 1)),
           template_app (template_hole 1, template_var 0)),
         template_app
          (template_app (template_hole 0, template_var 1),
           template_var 0)))),
    ("Executable_Euclidean_Space.vec_nth_inner_scaleR_craziness",
     "?f (?x $ ?i \<bullet> ?j) *\<^sub>R ?j =
      (SUM xa:UNIV. ?f (?x $ xa \<bullet> ?j) *\<^sub>R axis xa ?j) $ ?i",
     template_equation
      (template_app
        (template_app
          (template_hole 6,
           template_app
            (template_var 3,
             template_app
              (template_app
                (template_hole 5,
                 template_app
                  (template_app (template_hole 4, template_var 2),
                   template_var 1)),
               template_var 0))),
         template_var 0),
       template_app
        (template_app
          (template_hole 4,
           template_app
            (template_app (template_hole 3, t_empty), template_hole 0)),
         template_var 1))),
    ("Executable_Euclidean_Space.eucl_of_list_prod_if",
     "length ?xs = DIM(?'a) + DIM(?'b) ==>
      eucl_of_list ?xs =
      (eucl_of_list (take DIM(?'a) ?xs), eucl_of_list (drop DIM(?'a) ?xs))",
     template_implication
      ([template_equation
         (template_app (template_hole 12, template_var 0),
          template_app
           (template_app
             (template_hole 11,
              template_app (template_hole 10, template_hole 9)),
            template_app (template_hole 8, template_hole 7)))],
       template_equation
        (template_app (template_hole 5, template_var 0),
         template_app
          (template_app
            (template_hole 4,
             template_app
              (template_hole 3,
               template_app
                (template_app
                  (template_hole 2,
                   template_app (template_hole 10, template_hole 9)),
                 template_var 0))),
           template_app
            (template_hole 1,
             template_app
              (template_app
                (template_hole 0,
                 template_app (template_hole 10, template_hole 9)),
               template_var 0)))))),
    ("Executable_Euclidean_Space.eucl_of_list_append",
     "[| length ?xs = DIM(?'i); length ?ys = DIM(?'j) |]
      ==> eucl_of_list (?xs @ ?ys) = (eucl_of_list ?xs, eucl_of_list ?ys)",
     template_implication
      ([template_equation
         (template_app (template_hole 10, template_var 1),
          template_app (template_hole 9, template_hole 8)),
        template_equation
         (template_app (template_hole 10, template_var 0),
          template_app (template_hole 7, template_hole 6))],
       template_equation
        (template_app
          (template_hole 4,
           template_app
            (template_app (template_hole 3, template_var 1),
             template_var 0)),
         template_app
          (template_app
            (template_hole 2,
             template_app (template_hole 1, template_var 1)),
           template_app (template_hole 0, template_var 0))))),
    ("Executable_Euclidean_Space.eucl_of_list_inj",
     "[| length ?xs = DIM(?'a); length ?ys = DIM(?'a);
         eucl_of_list ?xs = eucl_of_list ?ys |]
      ==> ?xs = ?ys",
     template_implication
      ([template_equation
         (template_app (template_hole 5, template_var 1),
          template_app (template_hole 4, template_hole 3)),
        template_equation
         (template_app (template_hole 5, template_var 0),
          template_app (template_hole 4, template_hole 3)),
        template_equation
         (template_app (template_hole 1, template_var 1),
          template_app (template_hole 1, template_var 0))],
       template_equation (template_var 1, template_var 0))),
    ("Executable_Euclidean_Space.sum_list_zip_map",
     "distinct ?xs ==>
      sum_list (map2 ?f ?xs (map ?g ?xs)) = (SUM x:set ?xs. ?f x (?g x))",
     template_implication
      ([template_predicate
         (template_app (template_hole 8, template_var 2))],
       template_equation
        (template_app
          (template_hole 6,
           template_app
            (template_app
              (template_hole 5, template_app (template_hole 4, t_empty)),
             template_app
              (template_app (template_hole 3, template_var 2),
               template_app
                (template_app (template_hole 2, template_var 0),
                 template_var 2)))),
         template_app
          (template_app (template_hole 1, t_empty),
           template_app (template_hole 0, template_var 2))))),
    ("Executable_Euclidean_Space.eucl_of_list_map_plus",
     "length ?xs = DIM(?'a) ==>
      eucl_of_list (map (%x. ?f x + ?g x) ?xs) =
      eucl_of_list (map ?f ?xs) + eucl_of_list (map ?g ?xs)",
     template_implication
      ([template_equation
         (template_app (template_hole 7, template_var 2),
          template_app (template_hole 6, template_hole 5))],
       template_equation
        (template_app
          (template_hole 3,
           template_app
            (template_app (template_hole 2, t_empty), template_var 2)),
         template_app
          (template_app
            (template_hole 0,
             template_app
              (template_hole 3,
               template_app
                (template_app (template_hole 2, template_var 1),
                 template_var 2))),
           template_app
            (template_hole 3,
             template_app
              (template_app (template_hole 2, template_var 0),
               template_var 2)))))),
    ("Executable_Euclidean_Space.vec_nth_eucl_of_list_eq2",
     "length ?M = CARD(?'n) * CARD(?'m) ==>
      eucl_of_list ?M $ ?i $ ?j =
      ?M ! index Basis_list (axis ?i (axis ?j 1))",
     template_implication
      ([template_equation
         (template_app (template_hole 15, template_var 2),
          template_app
           (template_app
             (template_hole 14,
              template_app (template_hole 13, template_hole 12)),
            template_app (template_hole 11, template_hole 10)))],
       template_equation
        (template_app
          (template_app
            (template_hole 8,
             template_app
              (template_app
                (template_hole 7,
                 template_app (template_hole 6, template_var 2)),
               template_var 1)),
           template_var 0),
         template_app
          (template_app (template_hole 5, template_var 2),
           template_app
            (template_app (template_hole 4, template_hole 3),
             template_app
              (template_app (template_hole 2, template_var 1),
               template_app
                (template_app (template_hole 1, template_var 0),
                 template_hole 0))))))),
    ("Executable_Euclidean_Space.distinct_nth_eq_iff",
     "[| distinct ?xs; ?x < length ?xs; ?y < length ?xs |]
      ==> (?xs ! ?x = ?xs ! ?y) = (?x = ?y)",
     template_implication
      ([template_predicate (template_app (template_hole 6, template_var 2)),
        template_inequation
         (less_than, template_var 1,
          template_app (template_hole 4, template_var 2)),
        template_inequation
         (less_than, template_var 0,
          template_app (template_hole 4, template_var 2))],
       template_bimplication
        (template_equation
          (template_app
            (template_app (template_hole 1, template_var 2),
             template_var 1),
           template_app
            (template_app (template_hole 1, template_var 2),
             template_var 0)),
         template_equation (template_var 1, template_var 0)))),
    ("Executable_Euclidean_Space.has_derivative_BlinfunI",
     "(!!i. ((%x. blinfun_apply (?f x) i) has_derivative (%x. ?f' ?y x i))
             (at ?y)) ==>
      (?f has_derivative (%x. Blinfun (?f' ?y x))) (at ?y)",
     template_implication
      ([template_predicate (template_app (template_hole 7, t_empty))],
       template_predicate
        (
           template_app
            (template_app
              (template_app (template_hole 1, template_var 2), t_empty),
             template_app
              (template_app (template_hole 3, template_var 0),
               template_hole 2))
           ))),
    ("Executable_Euclidean_Space.list_of_eucl_eq_iff",
     "(list_of_eucl ?x = list_of_eucl ?y) =
      (DIM(?'a) = DIM(?'b) &
       (ALL i<DIM(?'b).
           ?x \<bullet> Basis_list ! i = ?y \<bullet> Basis_list ! i))",
     template_bimplication
      (template_equation
        (template_app (template_hole 17, template_var 1),
         template_app (template_hole 16, template_var 0)),
       template_predicate
        (
           template_app
            (template_app
              (template_hole 15,
               template_app
                (template_app
                  (template_hole 14,
                   template_app (template_hole 13, template_hole 12)),
                 template_app (template_hole 11, template_hole 10))),
             template_app (template_hole 9, t_empty))
           ))),
    ("Executable_Euclidean_Space.concat_map_map_index",
     "concat (map (%n. map (?f n) ?xs) ?ys) =
      map (%i. ?f (?ys ! (i div length ?xs)) (?xs ! (i mod length ?xs)))
       [0..<length ?xs * length ?ys]",
     template_equation
      (template_app
        (template_hole 12,
         template_app
          (template_app (template_hole 11, t_empty), template_var 0)),
       template_app
        (template_app (template_hole 9, t_empty),
         template_app
          (template_app (template_hole 3, template_hole 2),
           template_app
            (template_app
              (template_hole 1,
               template_app (template_hole 6, template_var 1)),
             template_app (template_hole 0, template_var 0)))))),
    ("Executable_Euclidean_Space.nth_Basis_list_prod",
     "?i < DIM(?'a) + DIM(?'b) ==>
      Basis_list ! ?i =
      (if ?i < DIM(?'a) then (Basis_list ! ?i, 0::?'b)
       else (0::?'a, Basis_list ! (?i - DIM(?'a))))",
     template_implication
      ([template_inequation
         (less_than, template_var 0,
          template_app
           (template_app
             (template_hole 16,
              template_app (template_hole 15, template_hole 14)),
            template_app (template_hole 13, template_hole 12)))],
       template_equation
        (template_app
          (template_app (template_hole 10, template_hole 9),
           template_var 0),
         template_app
          (template_app
            (template_app
              (template_hole 8,
               template_app
                (template_app (template_hole 17, template_var 0),
                 template_app (template_hole 15, template_hole 14))),
             template_app
              (template_app
                (template_hole 7,
                 template_app
                  (template_app (template_hole 6, template_hole 5),
                   template_var 0)),
               template_hole 4)),
           template_app
            (template_app (template_hole 7, template_hole 3),
             template_app
              (template_app (template_hole 2, template_hole 1),
               template_app
                (template_app (template_hole 0, template_var 0),
                 template_app (template_hole 15, template_hole 14)))))))),
    ("Executable_Euclidean_Space.eucl_of_list_eqI",
     "take DIM(?'a) (?xs @ replicate (DIM(?'a) - length ?xs) 0) =
      take DIM(?'a) (?ys @ replicate (DIM(?'a) - length ?ys) 0) ==>
      eucl_of_list ?xs = eucl_of_list ?ys",
     template_implication
      ([template_equation
         (template_app
           (template_app
             (template_hole 9,
              template_app (template_hole 8, template_hole 7)),
            template_app
             (template_app (template_hole 6, template_var 1),
              template_app
               (template_app
                 (template_hole 5,
                  template_app
                   (template_app
                     (template_hole 4,
                      template_app (template_hole 8, template_hole 7)),
                    template_app (template_hole 3, template_var 1))),
                template_hole 2))),
          template_app
           (template_app
             (template_hole 9,
              template_app (template_hole 8, template_hole 7)),
            template_app
             (template_app (template_hole 6, template_var 0),
              template_app
               (template_app
                 (template_hole 5,
                  template_app
                   (template_app
                     (template_hole 4,
                      template_app (template_hole 8, template_hole 7)),
                    template_app (template_hole 3, template_var 0))),
                template_hole 2))))],
       template_equation
        (template_app (template_hole 0, template_var 1),
         template_app (template_hole 0, template_var 0)))),
    ("Executable_Euclidean_Space.map2_nth",
     "[| ?n < length ?xs; ?n < length ?ys |]
      ==> map2 ?f ?xs ?ys ! ?n = ?f (?xs ! ?n) (?ys ! ?n)",
     template_implication
      ([template_inequation
         (less_than, template_var 3,
          template_app (template_hole 8, template_var 2)),
        template_inequation
         (less_than, template_var 3,
          template_app (template_hole 7, template_var 1))],
       template_equation
        (template_app
          (template_app
            (template_hole 5,
             template_app
              (template_app
                (template_hole 4, template_app (template_hole 3, t_empty)),
               template_app
                (template_app (template_hole 2, template_var 2),
                 template_var 1))),
           template_var 3),
         template_app
          (template_app
            (template_var 0,
             template_app
              (template_app (template_hole 1, template_var 2),
               template_var 3)),
           template_app
            (template_app (template_hole 0, template_var 1),
             template_var 3))))),
    ("Executable_Euclidean_Space.eucl_of_list_if",
     "[| length ?xs = DIM(?'a); distinct ?xs |]
      ==> eucl_of_list (map (%xa. if xa = ?x then 1 else 0) ?xs) =
          (if ?x : set ?xs then Basis_list ! index ?xs ?x else (0::?'a))",
     template_implication
      ([template_equation
         (template_app (template_hole 16, template_var 1),
          template_app (template_hole 15, template_hole 14)),
        template_predicate
         (template_app (template_hole 13, template_var 1))],
       template_equation
        (template_app
          (template_hole 11,
           template_app
            (template_app (template_hole 10, t_empty), template_var 1)),
         template_app
          (template_app
            (template_app
              (template_hole 6,
               template_app
                (template_app (template_hole 5, template_var 0),
                 template_app (template_hole 4, template_var 1))),
             template_app
              (template_app (template_hole 3, template_hole 2),
               template_app
                (template_app (template_hole 1, template_var 1),
                 template_var 0))),
           template_hole 0)))),
    ("Executable_Euclidean_Space.sum_list_zip_map_of",
     "[| distinct ?bs; length ?xs = length ?bs |]
      ==> sum_list (map2 ?f ?xs ?bs) =
          (SUM x:set ?bs. ?f (the (map_of (zip ?bs ?xs) x)) x)",
     template_implication
      ([template_predicate
         (template_app (template_hole 13, template_var 2)),
        template_equation
         (template_app (template_hole 11, template_var 1),
          template_app (template_hole 10, template_var 2))],
       template_equation
        (template_app
          (template_hole 8,
           template_app
            (template_app
              (template_hole 7, template_app (template_hole 6, t_empty)),
             template_app
              (template_app (template_hole 5, template_var 1),
               template_var 2))),
         template_app
          (template_app (template_hole 4, t_empty),
           template_app (template_hole 0, template_var 2))))),
    ("Executable_Euclidean_Space.blinfun_has_derivative_componentwiseI",
     "(!!i. i : Basis ==>
            ((%x. blinfun_apply (?f x) i) has_derivative
             blinfun_apply (?f' i))
             (at ?x)) ==>
      (?f has_derivative
       (%x. SUM i:Basis.
               blinfun_scaleR (blinfun_inner_left i)
                (blinfun_apply (?f' i) x)))
       (at ?x)",
     template_implication
      ([template_predicate (template_app (template_hole 12, t_empty))],
       template_predicate
        (
           template_app
            (template_app
              (template_app (template_hole 3, template_var 2), t_empty),
             template_app
              (template_app (template_hole 5, template_var 0),
               template_hole 4))
           ))),
    ("Executable_Euclidean_Space.concat_map_nthI",
     "[| !!x y. [| x : set ?xs; y : set (?f x) |] ==> ?P y;
         ?j < length (concat (map ?f ?xs)) |]
      ==> ?P (concat (map ?f ?xs) ! ?j)",
     template_implication
      ([template_predicate (template_app (template_hole 11, t_empty)),
        template_inequation
         (less_than, template_var 0,
          template_app
           (template_hole 3,
            template_app
             (template_hole 2,
              template_app
               (template_app (template_hole 1, template_var 2),
                template_var 3))))],
       template_predicate
        (
           template_app
            (template_var 1,
             template_app
              (template_app
                (template_hole 0,
                 template_app
                  (template_hole 2,
                   template_app
                    (template_app (template_hole 1, template_var 2),
                     template_var 3))),
               template_var 0))
           ))),
    ("Executable_Euclidean_Space.blinfun_apply_eq_sum",
     "length ?v = CARD(?'n) ==>
      blinfun_apply ?B (eucl_of_list ?v) =
      (SUM i<CARD(?'m).
       SUM j<CARD(?'n).
       (blinfun_apply ?B (Basis_list ! j) \<bullet> Basis_list ! i *
        ?v ! j) *\<^sub>R
       Basis_list ! i)",
     template_implication
      ([template_equation
         (template_app (template_hole 17, template_var 1),
          template_app (template_hole 16, template_hole 15))],
       template_equation
        (template_app
          (template_app (template_hole 13, template_var 0),
           template_app (template_hole 12, template_var 1)),
         template_app
          (template_app (template_hole 11, t_empty),
           template_app
            (template_hole 2,
             template_app (template_hole 1, template_hole 0)))))),
    ("Executable_Euclidean_Space.concat_same_lengths_nth",
     "[| !!xs. xs : set ?XS ==> length xs = ?N; ?i < length ?XS * ?N;
         0 < ?N |]
      ==> concat ?XS ! ?i = ?XS ! (?i div ?N) ! (?i mod ?N)",
     template_implication
      ([template_predicate (template_app (template_hole 15, t_empty)),
        template_inequation
         (less_than, template_var 0,
          template_app
           (template_app
             (template_hole 8,
              template_app (template_hole 7, template_var 2)),
            template_var 1)),
        template_inequation (less_than, template_hole 6, template_var 1)],
       template_equation
        (template_app
          (template_app
            (template_hole 4,
             template_app (template_hole 3, template_var 2)),
           template_var 0),
         template_app
          (template_app
            (template_hole 4,
             template_app
              (template_app (template_hole 2, template_var 2),
               template_app
                (template_app (template_hole 1, template_var 0),
                 template_var 1))),
           template_app
            (template_app (template_hole 0, template_var 0),
             template_var 1))))),
    ("Executable_Euclidean_Space.eucl_of_list_matrix_vector_mult_eq_sum_nth_Basis_list",
     "[| length ?M = CARD(?'n) * CARD(?'m); length ?v = CARD(?'n) |]
      ==> eucl_of_list ?M *v eucl_of_list ?v =
          (SUM i<CARD(?'m).
           (SUM j<CARD(?'n). ?M ! (i * CARD(?'n) + j) * ?v ! j) *\<^sub>R
           Basis_list ! i)",
     template_implication
      ([template_equation
         (template_app (template_hole 18, template_var 1),
          template_app
           (template_app
             (template_hole 17,
              template_app (template_hole 16, template_hole 15)),
            template_app (template_hole 14, template_hole 13))),
        template_equation
         (template_app (template_hole 18, template_var 0),
          template_app (template_hole 16, template_hole 15))],
       template_equation
        (template_app
          (template_app
            (template_hole 11,
             template_app (template_hole 10, template_var 1)),
           template_app (template_hole 9, template_var 0)),
         template_app
          (template_app (template_hole 8, t_empty),
           template_app
            (template_hole 2,
             template_app (template_hole 14, template_hole 13))))))]:
   (string * thm * template) list
### theory "Draft.Executable_Euclidean_SpaceTemplates"
### 1.054s elapsed time, 1.756s cpu time, 0.853s GC time
val it = (): unit
