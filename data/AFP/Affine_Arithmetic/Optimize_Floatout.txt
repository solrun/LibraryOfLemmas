Loading theory "Draft.Optimize_Integer" (required by "Draft.Optimize_FloatTemplates" via "Draft.Optimize_Float")
Loading theory "HOL-Library.Function_Algebras" (required by "Draft.Optimize_FloatTemplates" via "Draft.ExtrEqs" via "HOL-Library.BigO")
Loading theory "HOL-Library.Stream" (required by "Draft.Optimize_FloatTemplates" via "Draft.ExtrEqs")
Loading theory "HOL-Library.Tree" (required by "Draft.Optimize_FloatTemplates" via "Draft.ExtrEqs" via "Draft.Templates")
instantiation
  fun :: (type, plus) plus
  plus_fun == plus :: ('a => 'b) => ('a => 'b) => 'a => 'b
instantiation
  fun :: (type, zero) zero
  zero_fun == zero_class.zero :: 'a => 'b
instantiation
  fun :: (type, times) times
  times_fun == times :: ('a => 'b) => ('a => 'b) => 'a => 'b
instantiation
  fun :: (type, one) one
  one_fun == one_class.one :: 'a => 'b
### theory "HOL-Library.Function_Algebras"
### 0.159s elapsed time, 0.623s cpu time, 0.052s GC time
Loading theory "HOL-Library.BigO" (required by "Draft.Optimize_FloatTemplates" via "Draft.ExtrEqs")
### theory "Draft.Optimize_Integer"
### 0.290s elapsed time, 1.150s cpu time, 0.052s GC time
Loading theory "Draft.Optimize_Float" (required by "Draft.Optimize_FloatTemplates")
consts
  shift :: "'a list => 'a stream => 'a stream"
Proofs for coinductive predicate(s) "streamsp"
  Proving monotonicity ...
consts
  snth :: "'a stream => nat => 'a"
consts
  stake :: "nat => 'a stream => 'a list"
consts
  sdrop :: "nat => 'a stream => 'a stream"
consts
  left :: "'a tree => 'a tree"
consts
  right :: "'a tree => 'a tree"
### Code generator: dropping subsumed code equation
### bitlen ?x == if 0 < ?x then bitlen (?x div 2) + 1 else 0
### Code generator: dropping subsumed code equation
### Float ?m1.0 ?e1.0 + Float ?m2.0 ?e2.0 ==
### if ?m1.0 = 0 then Float ?m2.0 ?e2.0
### else if ?m2.0 = 0 then Float ?m1.0 ?e1.0
###      else if ?e1.0 <= ?e2.0
###           then Float (?m1.0 + ?m2.0 * 2 ^ nat (?e2.0 - ?e1.0)) ?e1.0
###           else Float (?m2.0 + ?m1.0 * 2 ^ nat (?e1.0 - ?e2.0)) ?e2.0
### Code generator: dropping subsumed code equation
### real_of_float (Float ?m ?e) ==
### if 0 <= ?e then real_of_int ?m * 2 ^ nat ?e
### else real_of_int ?m / 2 ^ nat (- ?e)
### Code generator: dropping subsumed code equation
### float_down ?p (Float ?m ?e) ==
### if ?p + ?e < 0 then Float (div_twopow ?m (nat (- (?p + ?e)))) (- ?p)
### else Float ?m ?e
### Code generator: dropping subsumed code equation
### lapprox_posrat ?prec ?x ?y ==
### let l = rat_precision ?prec (int ?x) (int ?y);
###     x = if 0 <= l then ?x * 2 ^ nat l div ?y
###         else ?x div 2 ^ nat (- l) div ?y
### in normfloat (Float (int x) (- l))
### Code generator: dropping subsumed code equation
### rapprox_posrat ?prec ?x ?y ==
### let l = rat_precision ?prec (int ?x) (int ?y);
###     (r, s) =
###       if 0 <= l then (int ?x * 2 ^ nat l, int ?y)
###       else (int ?x, int ?y * 2 ^ nat (- l));
###     d = r div s; m = r mod s
### in normfloat (Float (d + (if m = 0 | ?y = 0 then 0 else 1)) (- l))
### Code generator: dropping subsumed code equation
### float_round_down ?prec (Float ?m ?e) ==
### let d = bitlen \<bar>?m\<bar> - int ?prec - 1
### in if 0 < d then Float (div_twopow ?m (nat d)) (?e + d) else Float ?m ?e
consts
  sfilter :: "('a => bool) => 'a stream => 'a stream"
Found termination order: "size <*mlex*> {}"
### Code generator: dropping subsumed code equation
### int_floor_fl (Float ?m ?e) ==
### if 0 <= ?e then ?m * 2 ^ nat ?e else ?m div 2 ^ nat (- ?e)
### Code generator: dropping subsumed code equation
### floor_fl (Float ?m ?e) ==
### if 0 <= ?e then Float ?m ?e else Float (?m div 2 ^ nat (- ?e)) 0
### theory "Draft.Optimize_Float"
### 0.300s elapsed time, 1.146s cpu time, 0.136s GC time
consts
  cycle :: "'a list => 'a stream"
Found termination order: "size <*mlex*> {}"
consts
  siterate :: "('a => 'a) => 'a => 'a stream"
consts
  flat :: "'a list stream => 'a stream"
Found termination order: "size <*mlex*> {}"
class height = type +
  fixes height :: "'a => nat"
instantiation
  tree :: (type) height
  height_tree == height :: 'a tree => nat
consts
  sinterleave :: "'a stream => 'a stream => 'a stream"
consts
  szip :: "'a stream => 'b stream => ('a * 'b) stream"
consts
  smap2 :: "('a => 'b => 'c) => 'a stream => 'b stream => 'c stream"
Found termination order: "size <*mlex*> {}"
### theory "HOL-Library.Stream"
### 0.796s elapsed time, 2.910s cpu time, 0.256s GC time
Found termination order: "size <*mlex*> {}"
### theory "HOL-Library.BigO"
### 0.681s elapsed time, 2.380s cpu time, 0.204s GC time
Found termination order: "size <*mlex*> {}"
Found termination order: "size <*mlex*> {}"
Found termination order: "size <*mlex*> {}"
Found termination order: "size <*mlex*> {}"
Found termination order: "size <*mlex*> {}"
Found termination order: "(%p. size (fst p)) <*mlex*> {}"
Found termination order: "size <*mlex*> {}"
Found termination order: "(%p. size (snd p)) <*mlex*> {}"
Found termination order: "size <*mlex*> {}"
### theory "HOL-Library.Tree"
### 1.674s elapsed time, 4.185s cpu time, 0.777s GC time
Loading theory "Draft.Templates" (required by "Draft.Optimize_FloatTemplates" via "Draft.ExtrEqs")
datatype template_term
=
     t_empty
   | template_app of template_term * template_term
   | template_hole of int
   | template_var of int
datatype sign
= equals | greater_equals | greater_than | less_equals | less_than
datatype template
=
     template_bimplication of template * template
   | template_dunno
   | template_equation of template_term * template_term
   | template_implication of template list * template
   | template_inequation of sign * template_term * template_term
   | template_negation of template
   | template_predicate of template_term
constructor t_empty: template_term
constructor template_app: template_term * template_term -> template_term
constructor template_hole: int -> template_term
constructor template_var: int -> template_term
constructor equals: sign
constructor greater_equals: sign
constructor greater_than: sign
constructor less_equals: sign
constructor less_than: sign
constructor template_bimplication: template * template -> template
constructor template_dunno: template
constructor template_equation: template_term * template_term -> template
constructor template_implication: template list * template -> template
constructor template_inequation:
   sign * template_term * template_term -> template
constructor template_negation: template -> template
constructor template_predicate: template_term -> template
val vfs = fn: term -> (indexname * typ) list * (string * typ) list
val indexOf = fn: ''a list -> ''a -> int -> int
val has_eq = fn: term -> bool
val term2template = fn:
   (indexname * typ) list -> (string * typ) list -> term -> template_term
val lemma2predicate = fn: term -> term -> template
val makeTemplatewithContext = fn: term -> term -> template
val lemma2template = fn: term -> template
val thm2template = fn: thm -> template
val tterm2string = fn: template_term -> string
val template2string = fn: template -> string
val t = "height ?t <= size ?t": thm
val th =
   Const ("HOL.Trueprop", "bool => prop") $
     (Const ("Orderings.ord_class.less_eq", "nat => nat => bool") $
       (Const ("Tree.height_class.height", "?'a tree => nat") $
         Var (("t", 0), "?'a tree")) $
       (Const ("Nat.size_class.size", "?'a tree => nat") $
         Var (("t", 0), "?'a tree"))):
   term
### theory "Draft.Templates"
### 0.048s elapsed time, 0.065s cpu time, 0.000s GC time
Loading theory "Draft.ExtrEqs" (required by "Draft.Optimize_FloatTemplates")
val eqpattern =
   Pattern
    (
       Const ("HOL.Trueprop", "bool => prop") $
         (Const ("HOL.eq", "?'a => ?'a => bool") $
           Var (("_dummy_", 1), "?'a") $ Var (("_dummy_", 2), "?'a"))
       ):
   term Find_Theorems.criterion
val badeqpattern = Pattern (Const ("Pure.eq", "?'a => ?'a => prop")):
   term Find_Theorems.criterion
val undefpattern =
   Pattern
    (
       Const ("HOL.Trueprop", "bool => prop") $
         (Const ("HOL.eq", "?'a => ?'a => bool") $
           Var (("_dummy_", 1), "?'a") $ Const ("HOL.undefined", "?'a"))
       ):
   term Find_Theorems.criterion
val thmpattern =
   Pattern
    (Const ("HOL.Trueprop", "bool => prop") $ Var (("_dummy_", 1), "bool")):
   term Find_Theorems.criterion
val badnames =
   ["*nitpick*", "*Nitpick*", "*full_exhaustive*", "*_def*", "Enum.finite*",
    "*Quickcheck*", "ATP*", "*Nunchaku*", "*Code*", "*BNF*", "*SMT*",
    "*.*.*"]:
   string list
val unwanted_names =
   [(false, Name "*nitpick*"), (false, Name "*Nitpick*"),
    (false, Name "*full_exhaustive*"), (false, Name "*_def*"),
    (false, Name "Enum.finite*"), (false, Name "*Quickcheck*"),
    (false, Name "ATP*"), (false, Name "*Nunchaku*"),
    (false, Name "*Code*"), (false, Name "*BNF*"), (false, Name "*SMT*"),
    (false, Name "*.*.*")]:
   (bool * term Find_Theorems.criterion) list
val has_vars = fn: term -> bool
val get_all_eqs = fn: string -> Proof.context -> (string * thm) list
val get_all_thms = fn: string -> Proof.context -> (string * thm) list
val get_noneq_thms = fn: string -> Proof.context -> (string * thm) list
val template_eqs = fn:
   string -> Proof.context -> (string * thm * template) list
val template_thms = fn:
   string -> Proof.context -> (string * thm * template) list
### theory "Draft.ExtrEqs"
### 0.498s elapsed time, 0.547s cpu time, 0.065s GC time
Loading theory "Draft.Optimize_FloatTemplates"
val templateLemmas =
   [("Optimize_Float.compute_bitlen",
     "bitlen ?a = (if 0 < ?a then log2 ?a + 1 else 0)",
     template_equation
      (template_app (template_hole 6, template_var 0),
       template_app
        (template_app
          (template_app
            (template_hole 5,
             template_app
              (template_app (template_hole 4, template_hole 3),
               template_var 0)),
           template_app
            (template_app
              (template_hole 2,
               template_app (template_hole 1, template_var 0)),
             template_hole 0)),
         template_hole 3))),
    ("Optimize_Float.compute_floor_fl",
     "floor_fl (Float ?m ?e) =
      (if 0 <= ?e then Float ?m ?e
       else Float (?m div Optimize_Integer.power_int 2 (- ?e)) 0)",
     template_equation
      (template_app
        (template_hole 10,
         template_app
          (template_app (template_hole 9, template_var 1), template_var 0)),
       template_app
        (template_app
          (template_app
            (template_hole 8,
             template_app
              (template_app (template_hole 7, template_hole 6),
               template_var 0)),
           template_app
            (template_app (template_hole 9, template_var 1),
             template_var 0)),
         template_app
          (template_app
            (template_hole 9,
             template_app
              (template_app (template_hole 5, template_var 1),
               template_app
                (template_app
                  (template_hole 4,
                   template_app
                    (template_hole 3,
                     template_app (template_hole 2, template_hole 1))),
                 template_app (template_hole 0, template_var 0)))),
           template_hole 6)))),
    ("Optimize_Float.compute_int_floor_fl",
     "int_floor_fl (Float ?m ?e) =
      (if 0 <= ?e then ?m * Optimize_Integer.power_int 2 ?e
       else ?m div Optimize_Integer.power_int 2 (- ?e))",
     template_equation
      (template_app
        (template_hole 11,
         template_app
          (template_app (template_hole 10, template_var 1),
           template_var 0)),
       template_app
        (template_app
          (template_app
            (template_hole 9,
             template_app
              (template_app (template_hole 8, template_hole 7),
               template_var 0)),
           template_app
            (template_app (template_hole 6, template_var 1),
             template_app
              (template_app
                (template_hole 5,
                 template_app
                  (template_hole 4,
                   template_app (template_hole 3, template_hole 2))),
               template_var 0))),
         template_app
          (template_app (template_hole 1, template_var 1),
           template_app
            (template_app
              (template_hole 5,
               template_app
                (template_hole 4,
                 template_app (template_hole 3, template_hole 2))),
             template_app (template_hole 0, template_var 0)))))),
    ("Optimize_Float.compute_real_of_float",
     "real_of_float (Float ?m ?e) =
      (if 0 <= ?e then real_of_int ?m * 2 ^ nat ?e
       else real_of_int ?m /
            real_of_int (Optimize_Integer.power_int 2 (- ?e)))",
     template_equation
      (template_app
        (template_hole 15,
         template_app
          (template_app (template_hole 14, template_var 1),
           template_var 0)),
       template_app
        (template_app
          (template_app
            (template_hole 13,
             template_app
              (template_app (template_hole 12, template_hole 11),
               template_var 0)),
           template_app
            (template_app
              (template_hole 10,
               template_app (template_hole 9, template_var 1)),
             template_app
              (template_app
                (template_hole 8,
                 template_app
                  (template_hole 7,
                   template_app (template_hole 6, template_hole 5))),
               template_app (template_hole 4, template_var 0)))),
         template_app
          (template_app
            (template_hole 3,
             template_app (template_hole 9, template_var 1)),
           template_app
            (template_hole 9,
             template_app
              (template_app
                (template_hole 2,
                 template_app
                  (template_hole 1,
                   template_app (template_hole 6, template_hole 5))),
               template_app (template_hole 0, template_var 0))))))),
    ("Optimize_Float.compute_float_down",
     "float_down ?p (Float ?m ?e) =
      (if ?p + ?e < 0
       then Float (?m div Optimize_Integer.power_int 2 (- (?p + ?e))) (- ?p)
       else Float ?m ?e)",
     template_equation
      (template_app
        (template_app (template_hole 11, template_var 2),
         template_app
          (template_app (template_hole 10, template_var 1),
           template_var 0)),
       template_app
        (template_app
          (template_app
            (template_hole 9,
             template_app
              (template_app
                (template_hole 8,
                 template_app
                  (template_app (template_hole 7, template_var 2),
                   template_var 0)),
               template_hole 6)),
           template_app
            (template_app
              (template_hole 10,
               template_app
                (template_app (template_hole 5, template_var 1),
                 template_app
                  (template_app
                    (template_hole 4,
                     template_app
                      (template_hole 3,
                       template_app (template_hole 2, template_hole 1))),
                   template_app
                    (template_hole 0,
                     template_app
                      (template_app (template_hole 7, template_var 2),
                       template_var 0))))),
             template_app (template_hole 0, template_var 2))),
         template_app
          (template_app (template_hole 10, template_var 1),
           template_var 0)))),
    ("Optimize_Float.compute_float_truncate_down",
     "float_round_down ?prec (Float ?m ?e) =
      (let d = bitlen \<bar>?m\<bar> - int ?prec - 1
       in if 0 < d
          then let P = Optimize_Integer.power_int 2 d; n = ?m div P
               in Float n (?e + d)
          else Float ?m ?e)",
     template_equation
      (template_app
        (template_app (template_hole 16, template_var 2),
         template_app
          (template_app (template_hole 15, template_var 1),
           template_var 0)),
       template_app
        (template_app
          (template_hole 14,
           template_app
            (template_app
              (template_hole 13,
               template_app
                (template_app
                  (template_hole 13,
                   template_app
                    (template_hole 12,
                     template_app (template_hole 11, template_var 1))),
                 template_app (template_hole 10, template_var 2))),
             template_hole 9)),
         t_empty))),
    ("Optimize_Float.compute_lapprox_posrat",
     "lapprox_posrat ?prec ?x ?y =
      (let l = rat_precision ?prec (int ?x) (int ?y);
           d = if 0 <= l
               then int ?x * Optimize_Integer.power_int 2 l div int ?y
               else int ?x div Optimize_Integer.power_int 2 (- l) div int ?y
       in normfloat (Float d (- l)))",
     template_equation
      (template_app
        (template_app
          (template_app (template_hole 15, template_var 2), template_var 1),
         template_var 0),
       template_app
        (template_app
          (template_hole 14,
           template_app
            (template_app
              (template_app (template_hole 13, template_var 2),
               template_app (template_hole 12, template_var 1)),
             template_app (template_hole 12, template_var 0))),
         t_empty))),
    ("Optimize_Float.compute_float_plus",
     "Float ?m1.0 ?e1.0 + Float ?m2.0 ?e2.0 =
      (if ?m1.0 = 0 then Float ?m2.0 ?e2.0
       else if ?m2.0 = 0 then Float ?m1.0 ?e1.0
            else if ?e1.0 <= ?e2.0
                 then Float
                       (?m1.0 +
                        ?m2.0 *
                        Optimize_Integer.power_int 2 (?e2.0 - ?e1.0))
                       ?e1.0
                 else Float
                       (?m2.0 +
                        ?m1.0 *
                        Optimize_Integer.power_int 2 (?e1.0 - ?e2.0))
                       ?e2.0)",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_hole 12,
                template_app
                 (template_app (template_hole 11, template_var 3),
                  template_var 2)),
              template_app
               (template_app (template_hole 11, template_var 1),
                template_var 0))
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_app
                (template_hole 10,
                 template_app
                  (template_app (template_hole 9, template_var 3),
                   template_hole 8)),
               template_app
                (template_app (template_hole 11, template_var 1),
                 template_var 0)),
             template_app
              (template_app
                (template_app
                  (template_hole 10,
                   template_app
                    (template_app (template_hole 9, template_var 1),
                     template_hole 8)),
                 template_app
                  (template_app (template_hole 11, template_var 3),
                   template_var 2)),
               template_app
                (template_app
                  (template_app
                    (template_hole 10,
                     template_app
                      (template_app (template_hole 7, template_var 2),
                       template_var 0)),
                   template_app
                    (template_app
                      (template_hole 11,
                       template_app
                        (template_app (template_hole 6, template_var 3),
                         template_app
                          (template_app (template_hole 5, template_var 1),
                           template_app
                            (template_app
                              (template_hole 4,
                               template_app
                                (template_hole 3,
                                 template_app
                                  (template_hole 2, template_hole 1))),
                             template_app
                              (template_app
                                (template_hole 0, template_var 0),
                               template_var 2))))),
                     template_var 2)),
                 template_app
                  (template_app
                    (template_hole 11,
                     template_app
                      (template_app (template_hole 6, template_var 1),
                       template_app
                        (template_app (template_hole 5, template_var 3),
                         template_app
                          (template_app
                            (template_hole 4,
                             template_app
                              (template_hole 3,
                               template_app
                                (template_hole 2, template_hole 1))),
                           template_app
                            (template_app (template_hole 0, template_var 2),
                             template_var 0))))),
                   template_var 0))))
           ))),
    ("Optimize_Float.compute_rapprox_posrat",
     "rapprox_posrat ?prec ?x ?y =
      (let l = rat_precision ?prec (int ?x) (int ?y);
           (r, s) =
             if 0 <= l
             then (int ?x * Optimize_Integer.power_int 2 l, int ?y)
             else (int ?x, int ?y * Optimize_Integer.power_int 2 (- l));
           d = r div s; m = r mod s
       in normfloat (Float (d + (if m = 0 | ?y = 0 then 0 else 1)) (- l)))",
     template_equation
      (template_app
        (template_app
          (template_app (template_hole 26, template_var 2), template_var 1),
         template_var 0),
       template_app
        (template_app
          (template_hole 25,
           template_app
            (template_app
              (template_app (template_hole 24, template_var 2),
               template_app (template_hole 23, template_var 1)),
             template_app (template_hole 23, template_var 0))),
         t_empty)))]:
   (string * thm * template) list
### theory "Draft.Optimize_FloatTemplates"
### 0.292s elapsed time, 0.388s cpu time, 0.000s GC time
val it = (): unit
