Loading theory "HOL-Library.Function_Algebras" (required by "Draft.PolygonTemplates" via "Draft.ExtrEqs" via "HOL-Library.BigO")
Loading theory "HOL-Library.Stream" (required by "Draft.PolygonTemplates" via "Draft.ExtrEqs")
Loading theory "Draft.Affine_Arithmetic_Auxiliarities" (required by "Draft.PolygonTemplates" via "Draft.Polygon" via "Draft.Counterclockwise_2D_Strict")
Loading theory "HOL-Library.Tree" (required by "Draft.PolygonTemplates" via "Draft.ExtrEqs" via "Draft.Templates")
instantiation
  fun :: (type, plus) plus
  plus_fun == plus :: ('a => 'b) => ('a => 'b) => 'a => 'b
instantiation
  fun :: (type, zero) zero
  zero_fun == zero_class.zero :: 'a => 'b
instantiation
  fun :: (type, times) times
  times_fun == times :: ('a => 'b) => ('a => 'b) => 'a => 'b
instantiation
  fun :: (type, one) one
  one_fun == one_class.one :: 'a => 'b
### theory "Draft.Affine_Arithmetic_Auxiliarities"
### 0.122s elapsed time, 0.487s cpu time, 0.054s GC time
Loading theory "Draft.Counterclockwise" (required by "Draft.PolygonTemplates" via "Draft.Polygon" via "Draft.Counterclockwise_2D_Strict" via "Draft.Counterclockwise_Vector")
### theory "HOL-Library.Function_Algebras"
### 0.131s elapsed time, 0.523s cpu time, 0.054s GC time
Loading theory "HOL-Library.BigO" (required by "Draft.PolygonTemplates" via "Draft.ExtrEqs")
locale linorder_list0
  fixes le :: "'a => 'a => bool"
Proofs for inductive predicate(s) "sortedP"
  Proving monotonicity ...
locale linorder_list
  fixes le :: "'a => 'a => bool"
    and S :: "'a set"
  assumes "linorder_list le S"
locale ccw_system0
  fixes ccw :: "'a => 'a => 'a => bool"
    and S :: "'a set"
consts
  shift :: "'a list => 'a stream => 'a stream"
Proofs for coinductive predicate(s) "streamsp"
  Proving monotonicity ...
locale ccw_system12
  fixes ccw :: "'a => 'a => 'a => bool"
    and S :: "'a set"
  assumes "ccw_system12 ccw S"
locale ccw_system123
  fixes ccw :: "'a => 'a => 'a => bool"
    and S :: "'a set"
  assumes "ccw_system123 ccw S"
locale ccw_system4
  fixes ccw :: "'a => 'a => 'a => bool"
    and S :: "'a set"
  assumes "ccw_system4 ccw S"
consts
  snth :: "'a stream => nat => 'a"
locale ccw_system1235'
  fixes ccw :: "'a => 'a => 'a => bool"
    and S :: "'a set"
  assumes "ccw_system1235' ccw S"
consts
  stake :: "nat => 'a stream => 'a list"
locale ccw_system1235
  fixes ccw :: "'a => 'a => 'a => bool"
    and S :: "'a set"
  assumes "ccw_system1235 ccw S"
consts
  left :: "'a tree => 'a tree"
consts
  right :: "'a tree => 'a tree"
consts
  sdrop :: "nat => 'a stream => 'a stream"
locale ccw_system
  fixes ccw :: "'a => 'a => 'a => bool"
    and S :: "'a set"
  assumes "ccw_system ccw S"
### theory "Draft.Counterclockwise"
### 0.463s elapsed time, 1.804s cpu time, 0.117s GC time
Loading theory "Draft.Counterclockwise_Vector" (required by "Draft.PolygonTemplates" via "Draft.Polygon" via "Draft.Counterclockwise_2D_Strict")
Found termination order: "size <*mlex*> {}"
consts
  sfilter :: "('a => bool) => 'a stream => 'a stream"
locale ccw_vector_space
  fixes ccw :: "'a => 'a => 'a => bool"
    and S :: "'a set"
  assumes "ccw_vector_space ccw S"
consts
  cycle :: "'a list => 'a stream"
Found termination order: "size <*mlex*> {}"
consts
  siterate :: "('a => 'a) => 'a => 'a stream"
Found termination order: "size <*mlex*> {}"
locale ccw_convex
  fixes ccw :: "'a => 'a => 'a => bool"
    and S :: "'a set"
    and oriented :: "'a => 'a => bool"
  assumes "ccw_convex ccw S oriented"
### theory "Draft.Counterclockwise_Vector"
### 0.170s elapsed time, 0.659s cpu time, 0.056s GC time
Loading theory "Draft.Counterclockwise_2D_Strict" (required by "Draft.PolygonTemplates" via "Draft.Polygon")
consts
  flat :: "'a list stream => 'a stream"
class height = type +
  fixes height :: "'a => nat"
instantiation
  tree :: (type) height
  height_tree == height :: 'a tree => nat
consts
  sinterleave :: "'a stream => 'a stream => 'a stream"
Found termination order: "size <*mlex*> {}"
### theory "HOL-Library.BigO"
### 0.724s elapsed time, 2.798s cpu time, 0.237s GC time
consts
  szip :: "'a stream => 'b stream => ('a * 'b) stream"
consts
  smap2 :: "('a => 'b => 'c) => 'a stream => 'b stream => 'c stream"
Found termination order: "size <*mlex*> {}"
### theory "HOL-Library.Stream"
### 0.909s elapsed time, 3.484s cpu time, 0.291s GC time
Found termination order: "size <*mlex*> {}"
Found termination order: "size <*mlex*> {}"
Found termination order: "{}"
Found termination order: "size <*mlex*> {}"
Found termination order: "size <*mlex*> {}"
Found termination order: "size <*mlex*> {}"
Found termination order: "(%p. size (fst p)) <*mlex*> {}"
### theory "Draft.Counterclockwise_2D_Strict"
### 0.668s elapsed time, 1.767s cpu time, 0.570s GC time
Loading theory "Draft.Polygon" (required by "Draft.PolygonTemplates")
Found termination order: "size <*mlex*> {}"
Found termination order: "(%p. size (snd p)) <*mlex*> {}"
Found termination order: "{}"
consts
  polychain_of :: "'a => 'a list => ('a * 'a) list"
consts
  dirvec :: "'a * 'a => 'a"
Found termination order: "size <*mlex*> {}"
### theory "Draft.Polygon"
### 0.321s elapsed time, 0.689s cpu time, 0.129s GC time
### theory "HOL-Library.Tree"
### 1.855s elapsed time, 5.544s cpu time, 0.927s GC time
Loading theory "Draft.Templates" (required by "Draft.PolygonTemplates" via "Draft.ExtrEqs")
datatype template_term
=
     t_empty
   | template_app of template_term * template_term
   | template_hole of int
   | template_var of int
datatype sign
= equals | greater_equals | greater_than | less_equals | less_than
datatype template
=
     template_bimplication of template * template
   | template_dunno
   | template_equation of template_term * template_term
   | template_implication of template list * template
   | template_inequation of sign * template_term * template_term
   | template_negation of template
   | template_predicate of template_term
constructor t_empty: template_term
constructor template_app: template_term * template_term -> template_term
constructor template_hole: int -> template_term
constructor template_var: int -> template_term
constructor equals: sign
constructor greater_equals: sign
constructor greater_than: sign
constructor less_equals: sign
constructor less_than: sign
constructor template_bimplication: template * template -> template
constructor template_dunno: template
constructor template_equation: template_term * template_term -> template
constructor template_implication: template list * template -> template
constructor template_inequation:
   sign * template_term * template_term -> template
constructor template_negation: template -> template
constructor template_predicate: template_term -> template
val vfs = fn: term -> (indexname * typ) list * (string * typ) list
val indexOf = fn: ''a list -> ''a -> int -> int
val has_eq = fn: term -> bool
val term2template = fn:
   (indexname * typ) list -> (string * typ) list -> term -> template_term
val lemma2predicate = fn: term -> term -> template
val makeTemplatewithContext = fn: term -> term -> template
val lemma2template = fn: term -> template
val thm2template = fn: thm -> template
val tterm2string = fn: template_term -> string
val template2string = fn: template -> string
val t = "height ?t <= size ?t": thm
val th =
   Const ("HOL.Trueprop", "bool => prop") $
     (Const ("Orderings.ord_class.less_eq", "nat => nat => bool") $
       (Const ("Tree.height_class.height", "?'a tree => nat") $
         Var (("t", 0), "?'a tree")) $
       (Const ("Nat.size_class.size", "?'a tree => nat") $
         Var (("t", 0), "?'a tree"))):
   term
### theory "Draft.Templates"
### 0.049s elapsed time, 0.067s cpu time, 0.000s GC time
Loading theory "Draft.ExtrEqs" (required by "Draft.PolygonTemplates")
val eqpattern =
   Pattern
    (
       Const ("HOL.Trueprop", "bool => prop") $
         (Const ("HOL.eq", "?'a => ?'a => bool") $
           Var (("_dummy_", 1), "?'a") $ Var (("_dummy_", 2), "?'a"))
       ):
   term Find_Theorems.criterion
val badeqpattern = Pattern (Const ("Pure.eq", "?'a => ?'a => prop")):
   term Find_Theorems.criterion
val undefpattern =
   Pattern
    (
       Const ("HOL.Trueprop", "bool => prop") $
         (Const ("HOL.eq", "?'a => ?'a => bool") $
           Var (("_dummy_", 1), "?'a") $ Const ("HOL.undefined", "?'a"))
       ):
   term Find_Theorems.criterion
val thmpattern =
   Pattern
    (Const ("HOL.Trueprop", "bool => prop") $ Var (("_dummy_", 1), "bool")):
   term Find_Theorems.criterion
val badnames =
   ["*nitpick*", "*Nitpick*", "*full_exhaustive*", "*_def*", "Enum.finite*",
    "*Quickcheck*", "ATP*", "*Nunchaku*", "*Code*", "*BNF*", "*SMT*",
    "*.*.*"]:
   string list
val unwanted_names =
   [(false, Name "*nitpick*"), (false, Name "*Nitpick*"),
    (false, Name "*full_exhaustive*"), (false, Name "*_def*"),
    (false, Name "Enum.finite*"), (false, Name "*Quickcheck*"),
    (false, Name "ATP*"), (false, Name "*Nunchaku*"),
    (false, Name "*Code*"), (false, Name "*BNF*"), (false, Name "*SMT*"),
    (false, Name "*.*.*")]:
   (bool * term Find_Theorems.criterion) list
val has_vars = fn: term -> bool
val get_all_eqs = fn: string -> Proof.context -> (string * thm) list
val get_all_thms = fn: string -> Proof.context -> (string * thm) list
val get_noneq_thms = fn: string -> Proof.context -> (string * thm) list
val template_eqs = fn:
   string -> Proof.context -> (string * thm * template) list
val template_thms = fn:
   string -> Proof.context -> (string * thm * template) list
### theory "Draft.ExtrEqs"
### 0.452s elapsed time, 0.505s cpu time, 0.066s GC time
Loading theory "Draft.PolygonTemplates"
val templateLemmas =
   [("Polygon.convex_polychain_Cons", "convex_polychain [?x] = True",
     template_equation
      (template_app
        (template_hole 3,
         template_app
          (template_app (template_hole 2, template_var 0),
           template_hole 1)),
       template_hole 0)),
    ("Polygon.polychain_singleton", "polychain [?x] = True",
     template_equation
      (template_app
        (template_hole 3,
         template_app
          (template_app (template_hole 2, template_var 0),
           template_hole 1)),
       template_hole 0)),
    ("Polygon.length_polychain_of_eq",
     "length (polychain_of ?p ?qs) = length ?qs",
     template_equation
      (template_app
        (template_hole 2,
         template_app
          (template_app (template_hole 1, template_var 1), template_var 0)),
       template_app (template_hole 0, template_var 0))),
    ("Polygon.map_dirvec_polychain_of",
     "map dirvec (polychain_of ?x ?xs) = ?xs",
     template_equation
      (template_app
        (template_app (template_hole 2, template_hole 1),
         template_app
          (template_app (template_hole 0, template_var 1), template_var 0)),
       template_var 0)),
    ("Polygon.dirvec_minus", "dirvec ?x = snd ?x - fst ?x",
     template_equation
      (template_app (template_hole 3, template_var 0),
       template_app
        (template_app
          (template_hole 2, template_app (template_hole 1, template_var 0)),
         template_app (template_hole 0, template_var 0)))),
    ("Polygon.ccw'_sortedP_implies_distinct",
     "ccw'.sortedP ?x ?qs ==> distinct ?qs",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_hole 2,
                template_app (template_hole 1, template_var 1)),
              template_var 0)
            )],
       template_predicate
        (template_app (template_hole 0, template_var 0)))),
    ("Polygon.convex_polychain_ConsD",
     "convex_polychain (?x # ?xs) ==> convex_polychain ?xs",
     template_implication
      ([template_predicate
         (
            template_app
             (template_hole 1,
              template_app
               (template_app (template_hole 0, template_var 1),
                template_var 0))
            )],
       template_predicate
        (template_app (template_hole 1, template_var 0)))),
    ("Polygon.polychain_of_eq_empty_iff",
     "(polychain_of ?p ?xs = []) = (?xs = [])",
     template_bimplication
      (template_equation
        (template_app
          (template_app (template_hole 3, template_var 1), template_var 0),
         template_hole 2),
       template_equation (template_var 0, template_hole 0))),
    ("Polygon.polychain_map_pairself",
     "polychain ?xs ==> polychain (map (pairself ?f) ?xs)",
     template_implication
      ([template_predicate
         (template_app (template_hole 3, template_var 1))],
       template_predicate
        (
           template_app
            (template_hole 2,
             template_app
              (template_app
                (template_hole 1,
                 template_app (template_hole 0, template_var 0)),
               template_var 1))
           ))),
    ("Polygon.snd_plus_commute",
     "snd o (+) (?x0.0, ?x0.0) = (+) ?x0.0 o snd",
     template_equation
      (template_app
        (template_app (template_hole 5, template_hole 4),
         template_app
          (template_hole 3,
           template_app
            (template_app (template_hole 2, template_var 0),
             template_var 0))),
       template_app
        (template_app
          (template_hole 1, template_app (template_hole 0, template_var 0)),
         template_hole 4))),
    ("Polygon.pairself_apply",
     "pairself ?f ?x = (?f (fst ?x), ?f (snd ?x))",
     template_equation
      (template_app
        (template_app (template_hole 3, template_var 1), template_var 0),
       template_app
        (template_app
          (template_hole 2,
           template_app
            (template_var 1,
             template_app (template_hole 1, template_var 0))),
         template_app
          (template_var 1,
           template_app (template_hole 0, template_var 0))))),
    ("Polygon.fst_hd_polychain_of",
     "?xs ~= [] ==> fst (hd (polychain_of ?x ?xs)) = ?x",
     template_implication
      ([template_negation
         (template_equation (template_var 1, template_hole 4))],
       template_equation
        (template_app
          (template_hole 2,
           template_app
            (template_hole 1,
             template_app
              (template_app (template_hole 0, template_var 0),
               template_var 1))),
         template_var 0))),
    ("Polygon.polychain_of_add",
     "polychain_of (?x + ?y) ?xs =
      map ((+) (?y, ?y)) (polychain_of ?x ?xs)",
     template_equation
      (template_app
        (template_app
          (template_hole 4,
           template_app
            (template_app (template_hole 3, template_var 2),
             template_var 1)),
         template_var 0),
       template_app
        (template_app
          (template_hole 2,
           template_app
            (template_hole 1,
             template_app
              (template_app (template_hole 0, template_var 1),
               template_var 1))),
         template_app
          (template_app (template_hole 4, template_var 2),
           template_var 0)))),
    ("Polygon.ccw'_sortedP_polychain_of01",
     "ccw'.sortedP 0 [] ==>
      ccw'.sortedP ?x0.0 (map snd (polychain_of ?x0.0 []))",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_hole 6,
                template_app (template_hole 5, template_hole 4)),
              template_hole 3)
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 6,
               template_app (template_hole 5, template_var 0)),
             template_app
              (template_app (template_hole 2, template_hole 1),
               template_app
                (template_app (template_hole 0, template_var 0),
                 template_hole 3)))
           ))),
    ("Polygon.ccw'_sortedP_polychain_of_snd",
     "ccw'.sortedP 0 ?xs ==>
      ccw'.sortedP ?x0.0 (map snd (polychain_of ?x0.0 ?xs))",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_hole 5,
                template_app (template_hole 4, template_hole 3)),
              template_var 1)
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 5,
               template_app (template_hole 4, template_var 0)),
             template_app
              (template_app (template_hole 2, template_hole 1),
               template_app
                (template_app (template_hole 0, template_var 0),
                 template_var 1)))
           ))),
    ("Polygon.dirvec_last_polychain_of",
     "?xs ~= [] ==> dirvec (last (polychain_of ?p ?xs)) = last ?xs",
     template_implication
      ([template_negation
         (template_equation (template_var 1, template_hole 5))],
       template_equation
        (template_app
          (template_hole 3,
           template_app
            (template_hole 2,
             template_app
              (template_app (template_hole 1, template_var 0),
               template_var 1))),
         template_app (template_hole 0, template_var 1)))),
    ("Polygon.dirvec_hd_polychain_of",
     "?xs ~= [] ==> dirvec (hd (polychain_of ?p ?xs)) = hd ?xs",
     template_implication
      ([template_negation
         (template_equation (template_var 1, template_hole 5))],
       template_equation
        (template_app
          (template_hole 3,
           template_app
            (template_hole 2,
             template_app
              (template_app (template_hole 1, template_var 0),
               template_var 1))),
         template_app (template_hole 0, template_var 1)))),
    ("Polygon.fst_polychain_of_nth_0",
     "?xs ~= [] ==> fst (polychain_of ?p ?xs ! 0) = ?p",
     template_implication
      ([template_negation
         (template_equation (template_var 1, template_hole 5))],
       template_equation
        (template_app
          (template_hole 3,
           template_app
            (template_app
              (template_hole 2,
               template_app
                (template_app (template_hole 1, template_var 0),
                 template_var 1)),
             template_hole 0)),
         template_var 0))),
    ("Polygon.last_polychain_of",
     "0 < length ?xs ==>
      snd (last (polychain_of ?p ?xs)) = ?p + sum_list ?xs",
     template_implication
      ([template_inequation
         (less_than, template_hole 7,
          template_app (template_hole 6, template_var 1))],
       template_equation
        (template_app
          (template_hole 4,
           template_app
            (template_hole 3,
             template_app
              (template_app (template_hole 2, template_var 0),
               template_var 1))),
         template_app
          (template_app (template_hole 1, template_var 0),
           template_app (template_hole 0, template_var 1))))),
    ("Polygon.dirvec_nth_polychain_of",
     "?n < length ?xs ==> dirvec (polychain_of ?p ?xs ! ?n) = ?xs ! ?n",
     template_implication
      ([template_inequation
         (less_than, template_var 2,
          template_app (template_hole 5, template_var 1))],
       template_equation
        (template_app
          (template_hole 3,
           template_app
            (template_app
              (template_hole 2,
               template_app
                (template_app (template_hole 1, template_var 0),
                 template_var 1)),
             template_var 2)),
         template_app
          (template_app (template_hole 0, template_var 1),
           template_var 2)))),
    ("Polygon.in_set_polychain_ofD",
     "?ab : set (polychain_of ?x ?xs) ==> snd ?ab - fst ?ab : set ?xs",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 7, template_var 2),
              template_app
               (template_hole 6,
                template_app
                 (template_app (template_hole 5, template_var 1),
                  template_var 0)))
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 4,
               template_app
                (template_app
                  (template_hole 3,
                   template_app (template_hole 2, template_var 2)),
                 template_app (template_hole 1, template_var 2))),
             template_app (template_hole 0, template_var 0))
           ))),
    ("Polygon.distinct_butlast_ne_last",
     "[| distinct ?xs; ?x : set (butlast ?xs) |] ==> ?x ~= last ?xs",
     template_implication
      ([template_predicate (template_app (template_hole 6, template_var 1)),
        template_predicate
         (
            template_app
             (template_app (template_hole 5, template_var 0),
              template_app
               (template_hole 4,
                template_app (template_hole 3, template_var 1)))
            )],
       template_negation
        (
           template_equation
            (template_var 0, template_app (template_hole 0, template_var 1))
           ))),
    ("Polygon.ccw'_sortedP_translate_comp",
     "ccw'.sortedP ?x0.0 (map ((+) ?x o ?g) ?xs) =
      ccw'.sortedP (?x0.0 - ?x) (map ?g ?xs)",
     template_equation
      (template_app
        (template_app
          (template_hole 5, template_app (template_hole 4, template_var 3)),
         template_app
          (template_app
            (template_hole 3,
             template_app
              (template_app
                (template_hole 2,
                 template_app (template_hole 1, template_var 2)),
               template_var 1)),
           template_var 0)),
       template_app
        (template_app
          (template_hole 5,
           template_app
            (template_hole 4,
             template_app
              (template_app (template_hole 0, template_var 3),
               template_var 2))),
         template_app
          (template_app (template_hole 3, template_var 1),
           template_var 0)))),
    ("Polygon.ccw'_sortedP_polychain_of01",
     "ccw'.sortedP 0 [?u] ==>
      ccw'.sortedP ?x0.0 (map snd (polychain_of ?x0.0 [?u]))",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_hole 7,
                template_app (template_hole 6, template_hole 5)),
              template_app
               (template_app (template_hole 4, template_var 1),
                template_hole 3))
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 7,
               template_app (template_hole 6, template_var 0)),
             template_app
              (template_app (template_hole 2, template_hole 1),
               template_app
                (template_app (template_hole 0, template_var 0),
                 template_app
                  (template_app (template_hole 4, template_var 1),
                   template_hole 3))))
           ))),
    ("Polygon.ccw'_sortedP_translateI",
     "ccw'.sortedP (?x0.0 - ?x) (map ?g ?xs) ==>
      ccw'.sortedP ?x0.0 (map ((+) ?x o ?g) ?xs)",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_hole 5,
                template_app
                 (template_hole 4,
                  template_app
                   (template_app (template_hole 3, template_var 3),
                    template_var 2))),
              template_app
               (template_app (template_hole 2, template_var 1),
                template_var 0))
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 5,
               template_app (template_hole 4, template_var 3)),
             template_app
              (template_app
                (template_hole 2,
                 template_app
                  (template_app
                    (template_hole 1,
                     template_app (template_hole 0, template_var 2)),
                   template_var 1)),
               template_var 0))
           ))),
    ("Polygon.ccw'_sortedP_translateD",
     "ccw'.sortedP ?x0.0 (map ((+) ?x o ?g) ?xs) ==>
      ccw'.sortedP (?x0.0 - ?x) (map ?g ?xs)",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_hole 5,
                template_app (template_hole 4, template_var 3)),
              template_app
               (template_app
                 (template_hole 3,
                  template_app
                   (template_app
                     (template_hole 2,
                      template_app (template_hole 1, template_var 2)),
                    template_var 1)),
                template_var 0))
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 5,
               template_app
                (template_hole 4,
                 template_app
                  (template_app (template_hole 0, template_var 3),
                   template_var 2))),
             template_app
              (template_app (template_hole 3, template_var 1),
               template_var 0))
           ))),
    ("Polygon.polychain_Cons",
     "polychain (?y # ?ys) =
      (if ?ys = [] then True else snd ?y = fst (?ys ! 0) & polychain ?ys)",
     template_implication
      ([template_predicate
         (
            template_app
             (template_hole 11,
              template_app
               (template_app (template_hole 10, template_var 1),
                template_var 0))
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_app
                (template_hole 9,
                 template_app
                  (template_app (template_hole 8, template_var 0),
                   template_hole 7)),
               template_hole 6),
             template_app
              (template_app
                (template_hole 5,
                 template_app
                  (template_app
                    (template_hole 4,
                     template_app (template_hole 3, template_var 1)),
                   template_app
                    (template_hole 2,
                     template_app
                      (template_app (template_hole 1, template_var 0),
                       template_hole 0)))),
               template_app (template_hole 11, template_var 0)))
           ))),
    ("Polygon.polychain_of_singleton_iff",
     "(polychain_of ?p ?xs = [?a]) = (fst ?a = ?p & ?xs = [snd ?a - ?p])",
     template_bimplication
      (template_equation
        (template_app
          (template_app (template_hole 10, template_var 2), template_var 1),
         template_app
          (template_app (template_hole 9, template_var 0),
           template_hole 8)),
       template_predicate
        (
           template_app
            (template_app
              (template_hole 7,
               template_app
                (template_app
                  (template_hole 6,
                   template_app (template_hole 5, template_var 0)),
                 template_var 2)),
             template_app
              (template_app (template_hole 4, template_var 1),
               template_app
                (template_app
                  (template_hole 3,
                   template_app
                    (template_app
                      (template_hole 2,
                       template_app (template_hole 1, template_var 0)),
                     template_var 2)),
                 template_hole 0)))
           ))),
    ("Polygon.ccw'_sortedP_renormalize",
     "ccw'.sortedP ?a (map snd (polychain_of (?x0.0 + ?x) ?xs)) =
      ccw'.sortedP (?a - ?x0.0) (map snd (polychain_of ?x ?xs))",
     template_equation
      (template_app
        (template_app
          (template_hole 6, template_app (template_hole 5, template_var 3)),
         template_app
          (template_app (template_hole 4, template_hole 3),
           template_app
            (template_app
              (template_hole 2,
               template_app
                (template_app (template_hole 1, template_var 2),
                 template_var 1)),
             template_var 0))),
       template_app
        (template_app
          (template_hole 6,
           template_app
            (template_hole 5,
             template_app
              (template_app (template_hole 0, template_var 3),
               template_var 2))),
         template_app
          (template_app (template_hole 4, template_hole 3),
           template_app
            (template_app (template_hole 2, template_var 1),
             template_var 0))))),
    ("Polygon.polychain_of_subsequent_eq",
     "Suc ?i < length ?qs ==>
      snd (polychain_of ?p ?qs ! ?i) = fst (polychain_of ?p ?qs ! Suc ?i)",
     template_implication
      ([template_inequation
         (less_than, template_app (template_hole 6, template_var 2),
          template_app (template_hole 5, template_var 1))],
       template_equation
        (template_app
          (template_hole 3,
           template_app
            (template_app
              (template_hole 2,
               template_app
                (template_app (template_hole 1, template_var 0),
                 template_var 1)),
             template_var 2)),
         template_app
          (template_hole 0,
           template_app
            (template_app
              (template_hole 2,
               template_app
                (template_app (template_hole 1, template_var 0),
                 template_var 1)),
             template_app (template_hole 6, template_var 2)))))),
    ("Polygon.convex_polygon_Cons2",
     "convex_polygon (?x # ?y # ?zs) =
      (fst ?x = snd (last (?y # ?zs)) & convex_polychain (?x # ?y # ?zs))",
     template_implication
      ([template_predicate
         (
            template_app
             (template_hole 7,
              template_app
               (template_app (template_hole 6, template_var 2),
                template_app
                 (template_app (template_hole 6, template_var 1),
                  template_var 0)))
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 5,
               template_app
                (template_app
                  (template_hole 4,
                   template_app (template_hole 3, template_var 2)),
                 template_app
                  (template_hole 2,
                   template_app
                    (template_hole 1,
                     template_app
                      (template_app (template_hole 6, template_var 1),
                       template_var 0))))),
             template_app
              (template_hole 0,
               template_app
                (template_app (template_hole 6, template_var 2),
                 template_app
                  (template_app (template_hole 6, template_var 1),
                   template_var 0))))
           ))),
    ("Polygon.ccw'_sortedP_polychain_of2",
     "ccw'.sortedP 0 [?u, ?v] ==>
      ccw'.sortedP ?x0.0 (map snd (polychain_of ?x0.0 [?u, ?v]))",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_hole 7,
                template_app (template_hole 6, template_hole 5)),
              template_app
               (template_app (template_hole 4, template_var 2),
                template_app
                 (template_app (template_hole 4, template_var 1),
                  template_hole 3)))
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 7,
               template_app (template_hole 6, template_var 0)),
             template_app
              (template_app (template_hole 2, template_hole 1),
               template_app
                (template_app (template_hole 0, template_var 0),
                 template_app
                  (template_app (template_hole 4, template_var 2),
                   template_app
                    (template_app (template_hole 4, template_var 1),
                     template_hole 3)))))
           ))),
    ("Polygon.polychainI",
     "(!!i. Suc i < length ?xs ==> snd (?xs ! i) = fst (?xs ! Suc i)) ==>
      polychain ?xs",
     template_implication
      ([template_predicate (template_app (template_hole 9, t_empty))],
       template_predicate
        (template_app (template_hole 0, template_var 0)))),
    ("Polygon.list_all_mp",
     "[| list_all ?P ?xs; !!x. [| x : set ?xs; ?P x |] ==> ?Q x |]
      ==> list_all ?Q ?xs",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 3, template_var 2),
              template_var 1)
            ),
        template_predicate (template_app (template_hole 2, t_empty))],
       template_predicate
        (
           template_app
            (template_app (template_hole 3, template_var 0), template_var 1)
           ))),
    ("Polygon.polychain_append_connected",
     "[| polychain (?xs @ ?ys); ?xs ~= []; ?ys ~= [] |]
      ==> fst (hd ?ys) = snd (last ?xs)",
     template_implication
      ([template_predicate
         (
            template_app
             (template_hole 9,
              template_app
               (template_app (template_hole 8, template_var 1),
                template_var 0))
            ),
        template_negation
         (template_equation (template_var 1, template_hole 5)),
        template_negation
         (template_equation (template_var 0, template_hole 5))],
       template_equation
        (template_app
          (template_hole 3, template_app (template_hole 2, template_var 0)),
         template_app
          (template_hole 1,
           template_app (template_hole 0, template_var 1))))),
    ("Polygon.ccw'_sortedP_polychain_of3",
     "ccw'.sortedP 0 (?u # ?v # ?w # ?xs) ==>
      ccw'.sortedP ?x0.0
       (map snd (polychain_of ?x0.0 (?u # ?v # ?w # ?xs)))",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_hole 6,
                template_app (template_hole 5, template_hole 4)),
              template_app
               (template_app (template_hole 3, template_var 4),
                template_app
                 (template_app (template_hole 3, template_var 3),
                  template_app
                   (template_app (template_hole 3, template_var 2),
                    template_var 1))))
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 6,
               template_app (template_hole 5, template_var 0)),
             template_app
              (template_app (template_hole 2, template_hole 1),
               template_app
                (template_app (template_hole 0, template_var 0),
                 template_app
                  (template_app (template_hole 3, template_var 4),
                   template_app
                    (template_app (template_hole 3, template_var 3),
                     template_app
                      (template_app (template_hole 3, template_var 2),
                       template_var 1))))))
           ))),
    ("Polygon.convex_polychain_Cons2",
     "convex_polychain (?x # ?y # ?zs) =
      (snd ?x = fst ?y &
       0 < det3 (fst ?x) (fst ?y) (snd ?y) & convex_polychain (?y # ?zs))",
     template_implication
      ([template_predicate
         (
            template_app
             (template_hole 8,
              template_app
               (template_app (template_hole 7, template_var 2),
                template_app
                 (template_app (template_hole 7, template_var 1),
                  template_var 0)))
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 6,
               template_app
                (template_app
                  (template_hole 5,
                   template_app (template_hole 4, template_var 2)),
                 template_app (template_hole 3, template_var 1))),
             template_app
              (template_app
                (template_hole 6,
                 template_app
                  (template_app (template_hole 2, template_hole 1),
                   template_app
                    (template_app
                      (template_app
                        (template_hole 0,
                         template_app (template_hole 3, template_var 2)),
                       template_app (template_hole 3, template_var 1)),
                     template_app (template_hole 4, template_var 1)))),
               template_app
                (template_hole 8,
                 template_app
                  (template_app (template_hole 7, template_var 1),
                   template_var 0))))
           ))),
    ("Polygon.ccw'_sortedP_convex_rotate_aux",
     "[| ccw'.sortedP 0 ?zs;
         ccw'.sortedP ?x (map snd (polychain_of ?x ?zs)) |]
      ==> ccw'.sortedP (snd (last (polychain_of ?x ?zs)))
           (map snd (butlast (polychain_of ?x ?zs)))",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_hole 7,
                template_app (template_hole 6, template_hole 5)),
              template_var 1)
            ),
        template_predicate
         (
            template_app
             (template_app
               (template_hole 7,
                template_app (template_hole 6, template_var 0)),
              template_app
               (template_app (template_hole 4, template_hole 3),
                template_app
                 (template_app (template_hole 2, template_var 0),
                  template_var 1)))
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 7,
               template_app
                (template_hole 6,
                 template_app
                  (template_hole 3,
                   template_app
                    (template_hole 1,
                     template_app
                      (template_app (template_hole 2, template_var 0),
                       template_var 1))))),
             template_app
              (template_app (template_hole 4, template_hole 3),
               template_app
                (template_hole 0,
                 template_app
                  (template_app (template_hole 2, template_var 0),
                   template_var 1))))
           ))),
    ("Polygon.ccw'_polychain_of_sorted_center_last",
     "[| (?c, ?d) : set (butlast (polychain_of ?x0.0 ?xs));
         ccw'.sortedP 0 ?xs; ?xs ~= [] |]
      ==> ccw' ?x0.0 ?d (snd (last (polychain_of ?x0.0 ?xs)))",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_hole 12,
                template_app
                 (template_app (template_hole 11, template_var 3),
                  template_var 2)),
              template_app
               (template_hole 10,
                template_app
                 (template_hole 9,
                  template_app
                   (template_app (template_hole 8, template_var 1),
                    template_var 0))))
            ),
        template_predicate
         (
            template_app
             (template_app
               (template_hole 7,
                template_app (template_hole 6, template_hole 5)),
              template_var 0)
            ),
        template_negation
         (template_equation (template_var 0, template_hole 2))],
       template_predicate
        (
           template_app
            (template_app
              (template_app (template_hole 6, template_var 1),
               template_var 2),
             template_app
              (template_hole 1,
               template_app
                (template_hole 0,
                 template_app
                  (template_app (template_hole 8, template_var 1),
                   template_var 0))))
           ))),
    ("Polygon.ccw'_sortedP_implies_nonaligned",
     "[| ccw'.sortedP ?x ?qs; ?y : set ?qs; ?z : set ?qs; ?y ~= ?z |]
      ==> det3 ?x ?y ?z ~= 0",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_hole 8,
                template_app (template_hole 7, template_var 3)),
              template_var 2)
            ),
        template_predicate
         (
            template_app
             (template_app (template_hole 6, template_var 1),
              template_app (template_hole 5, template_var 2))
            ),
        template_predicate
         (
            template_app
             (template_app (template_hole 6, template_var 0),
              template_app (template_hole 5, template_var 2))
            ),
        template_negation
         (template_equation (template_var 1, template_var 0))],
       template_negation
        (
           template_equation
            (template_app
              (template_app
                (template_app (template_hole 1, template_var 3),
                 template_var 1),
               template_var 0),
             template_hole 0)
           ))),
    ("Polygon.in_set_polychain_of_imp_sum_list",
     "[| ?z : set (polychain_of ?Pc ?Ps);
         !!d. ?z =
              (?Pc + sum_list (take d ?Ps),
               ?Pc + sum_list (take (Suc d) ?Ps)) ==>
              ?thesis |]
      ==> ?thesis",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 9, template_var 3),
              template_app
               (template_hole 8,
                template_app
                 (template_app (template_hole 7, template_var 2),
                  template_var 1)))
            ),
        template_predicate (template_app (template_hole 6, t_empty))],
       template_predicate (template_var 0))),
    ("Polygon.convex_polychainI",
     "[| polychain ?xs;
         !!i. Suc i < length ?xs ==>
              0 < det3 (fst (?xs ! i)) (snd (?xs ! i))
                   (snd (?xs ! Suc i)) |]
      ==> convex_polychain ?xs",
     template_implication
      ([template_predicate
         (template_app (template_hole 11, template_var 0)),
        template_predicate (template_app (template_hole 10, t_empty))],
       template_predicate
        (template_app (template_hole 0, template_var 0)))),
    ("Polygon.polychain_appendI",
     "[| polychain ?xs; polychain ?ys;
         [| ?xs ~= []; ?ys ~= [] |] ==> snd (last ?xs) = fst (hd ?ys) |]
      ==> polychain (?xs @ ?ys)",
     template_implication
      ([template_predicate (template_app (template_hole 9, template_var 1)),
        template_predicate (template_app (template_hole 9, template_var 0)),
        template_implication
         ([template_negation
            (template_equation (template_var 1, template_hole 6))],
          template_implication
           ([template_negation
              (template_equation (template_var 0, template_hole 6))],
            template_equation
             (template_app
               (template_hole 4,
                template_app (template_hole 3, template_var 1)),
              template_app
               (template_hole 2,
                template_app (template_hole 1, template_var 0)))))],
       template_predicate
        (
           template_app
            (template_hole 9,
             template_app
              (template_app (template_hole 0, template_var 1),
               template_var 0))
           ))),
    ("Polygon.convex_polygon_skip",
     "[| convex_polygon (?x # ?y # ?z # ?w # ?ws);
         ccw'.sortedP (fst ?x)
          (map snd (butlast (?x # ?y # ?z # ?w # ?ws))) |]
      ==> convex_polygon ((fst ?x, snd ?y) # ?z # ?w # ?ws)",
     template_implication
      ([template_predicate
         (
            template_app
             (template_hole 8,
              template_app
               (template_app (template_hole 7, template_var 4),
                template_app
                 (template_app (template_hole 7, template_var 3),
                  template_app
                   (template_app (template_hole 7, template_var 2),
                    template_app
                     (template_app (template_hole 7, template_var 1),
                      template_var 0)))))
            ),
        template_predicate
         (
            template_app
             (template_app
               (template_hole 6,
                template_app
                 (template_hole 5,
                  template_app (template_hole 4, template_var 4))),
              template_app
               (template_app (template_hole 3, template_hole 2),
                template_app
                 (template_hole 1,
                  template_app
                   (template_app (template_hole 7, template_var 4),
                    template_app
                     (template_app (template_hole 7, template_var 3),
                      template_app
                       (template_app (template_hole 7, template_var 2),
                        template_app
                         (template_app (template_hole 7, template_var 1),
                          template_var 0)))))))
            )],
       template_predicate
        (
           template_app
            (template_hole 8,
             template_app
              (template_app
                (template_hole 7,
                 template_app
                  (template_app
                    (template_hole 0,
                     template_app (template_hole 4, template_var 4)),
                   template_app (template_hole 2, template_var 3))),
               template_app
                (template_app (template_hole 7, template_var 2),
                 template_app
                  (template_app (template_hole 7, template_var 1),
                   template_var 0))))
           ))),
    ("Polygon.polychain_of_ccw",
     "[| ?e : UNIV \<rightarrow> {0<..<1}; ccw'.sortedP 0 ?qs;
         length ?qs ~= 1 |]
      ==> list_all
           (%(xi, xj). ccw' xi xj (?Pc + (SUM P:set ?qs. ?e P *\<^sub>R P)))
           (polychain_of ?Pc ?qs)",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 19, template_var 2),
              template_app
               (template_app (template_hole 18, template_hole 17), t_empty))
            ),
        template_predicate
         (
            template_app
             (template_app
               (template_hole 13,
                template_app (template_hole 12, template_hole 11)),
              template_var 1)
            ),
        template_negation
         (
            template_equation
             (template_app (template_hole 8, template_var 1),
              template_hole 7)
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 6, template_app (template_hole 5, t_empty)),
             template_app
              (template_app (template_hole 0, template_var 0),
               template_var 1))
           ))),
    ("Polygon.convex_polychain_appendI",
     "[| convex_polychain ?xs; convex_polychain ?ys; polychain (?xs @ ?ys);
         [| ?xs ~= []; ?ys ~= [] |]
         ==> 0 < det3 (fst (last ?xs)) (snd (last ?xs)) (snd (hd ?ys)) |]
      ==> convex_polychain (?xs @ ?ys)",
     template_implication
      ([template_predicate
         (template_app (template_hole 12, template_var 1)),
        template_predicate
         (template_app (template_hole 12, template_var 0)),
        template_predicate
         (
            template_app
             (template_hole 11,
              template_app
               (template_app (template_hole 10, template_var 1),
                template_var 0))
            ),
        template_implication
         ([template_negation
            (template_equation (template_var 1, template_hole 7))],
          template_implication
           ([template_negation
              (template_equation (template_var 0, template_hole 7))],
            template_inequation
             (less_than, template_hole 5,
              template_app
               (template_app
                 (template_app
                   (template_hole 4,
                    template_app
                     (template_hole 3,
                      template_app (template_hole 2, template_var 1))),
                  template_app
                   (template_hole 1,
                    template_app (template_hole 2, template_var 1))),
                template_app
                 (template_hole 1,
                  template_app (template_hole 0, template_var 0))))))],
       template_predicate
        (
           template_app
            (template_hole 12,
             template_app
              (template_app (template_hole 10, template_var 1),
               template_var 0))
           ))),
    ("Polygon.in_polychain_of_ccw",
     "[| ?e : UNIV \<rightarrow> {0<..<1}; ccw'.sortedP 0 ?qs;
         length ?qs ~= 1; ?seg : set (polychain_of ?Pc ?qs) |]
      ==> ccw' (fst ?seg) (snd ?seg)
           (?Pc + (SUM P:set ?qs. ?e P *\<^sub>R P))",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 21, template_var 3),
              template_app
               (template_app (template_hole 20, template_hole 19), t_empty))
            ),
        template_predicate
         (
            template_app
             (template_app
               (template_hole 15,
                template_app (template_hole 14, template_hole 13)),
              template_var 2)
            ),
        template_negation
         (
            template_equation
             (template_app (template_hole 10, template_var 2),
              template_hole 9)
            ),
        template_predicate
         (
            template_app
             (template_app (template_hole 8, template_var 1),
              template_app
               (template_hole 7,
                template_app
                 (template_app (template_hole 6, template_var 0),
                  template_var 2)))
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_app
                (template_hole 14,
                 template_app (template_hole 5, template_var 1)),
               template_app (template_hole 4, template_var 1)),
             template_app
              (template_app (template_hole 3, template_var 0),
               template_app
                (template_app (template_hole 2, t_empty),
                 template_app (template_hole 0, template_var 2))))
           ))),
    ("Polygon.polychain_of_ccw_convex",
     "[| ?e : UNIV \<rightarrow> {0<..<1}; ccw'.sortedP 0 (?P # ?Q # ?Ps) |]
      ==> list_all
           (%(xi, xj).
               ccw' xi xj
                (?Pc + (SUM P:set (?P # ?Q # ?Ps). ?e P *\<^sub>R P)))
           (polychain_of ?Pc (?P # ?Q # ?Ps))",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 16, template_var 4),
              template_app
               (template_app (template_hole 15, template_hole 14), t_empty))
            ),
        template_predicate
         (
            template_app
             (template_app
               (template_hole 10,
                template_app (template_hole 9, template_hole 8)),
              template_app
               (template_app (template_hole 7, template_var 3),
                template_app
                 (template_app (template_hole 7, template_var 2),
                  template_var 1)))
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 6, template_app (template_hole 5, t_empty)),
             template_app
              (template_app (template_hole 0, template_var 0),
               template_app
                (template_app (template_hole 7, template_var 3),
                 template_app
                  (template_app (template_hole 7, template_var 2),
                   template_var 1))))
           ))),
    ("Polygon.ccw'_scale_origin",
     "[| ?e : UNIV \<rightarrow> {0<..<1};
         ?x : set (polychain_of ?Pc (?P # ?QRRs));
         ccw'.sortedP 0 (?P # ?QRRs);
         ccw' (fst ?x) (snd ?x)
          (?P + (?Pc + (SUM P:set ?QRRs. ?e P *\<^sub>R P))) |]
      ==> ccw' (fst ?x) (snd ?x)
           (?e ?P *\<^sub>R ?P +
            (?Pc + (SUM P:set ?QRRs. ?e P *\<^sub>R P)))",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 18, template_var 4),
              template_app
               (template_app (template_hole 17, template_hole 16), t_empty))
            ),
        template_predicate
         (
            template_app
             (template_app (template_hole 12, template_var 3),
              template_app
               (template_hole 11,
                template_app
                 (template_app (template_hole 10, template_var 2),
                  template_app
                   (template_app (template_hole 9, template_var 1),
                    template_var 0))))
            ),
        template_predicate
         (
            template_app
             (template_app
               (template_hole 8,
                template_app (template_hole 7, template_hole 6)),
              template_app
               (template_app (template_hole 9, template_var 1),
                template_var 0))
            ),
        template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_hole 7,
                  template_app (template_hole 5, template_var 3)),
                template_app (template_hole 4, template_var 3)),
              template_app
               (template_app (template_hole 3, template_var 1),
                template_app
                 (template_app (template_hole 3, template_var 2),
                  template_app
                   (template_app (template_hole 2, t_empty),
                    template_app (template_hole 0, template_var 0)))))
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_app
                (template_hole 7,
                 template_app (template_hole 5, template_var 3)),
               template_app (template_hole 4, template_var 3)),
             template_app
              (template_app
                (template_hole 3,
                 template_app
                  (template_app
                    (template_hole 1,
                     template_app (template_var 4, template_var 1)),
                   template_var 1)),
               template_app
                (template_app (template_hole 3, template_var 2),
                 template_app
                  (template_app (template_hole 2, t_empty),
                   template_app (template_hole 0, template_var 0)))))
           )))]:
   (string * thm * template) list
### theory "Draft.PolygonTemplates"
### 0.707s elapsed time, 0.926s cpu time, 0.079s GC time
val it = (): unit
