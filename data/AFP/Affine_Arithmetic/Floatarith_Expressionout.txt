Loading theory "HOL-Library.Function_Algebras" (required by "Draft.Floatarith_ExpressionTemplates" via "Draft.ExtrEqs" via "HOL-Library.BigO")
Loading theory "HOL-Library.Stream" (required by "Draft.Floatarith_ExpressionTemplates" via "Draft.ExtrEqs")
Loading theory "HOL-Library.Tree" (required by "Draft.Floatarith_ExpressionTemplates" via "Draft.ExtrEqs" via "Draft.Templates")
Loading theory "Draft.Affine_Arithmetic_Auxiliarities" (required by "Draft.Floatarith_ExpressionTemplates" via "Draft.Floatarith_Expression")
instantiation
  fun :: (type, plus) plus
  plus_fun == plus :: ('a => 'b) => ('a => 'b) => 'a => 'b
instantiation
  fun :: (type, zero) zero
  zero_fun == zero_class.zero :: 'a => 'b
instantiation
  fun :: (type, times) times
  times_fun == times :: ('a => 'b) => ('a => 'b) => 'a => 'b
instantiation
  fun :: (type, one) one
  one_fun == one_class.one :: 'a => 'b
### theory "HOL-Library.Function_Algebras"
### 0.133s elapsed time, 0.531s cpu time, 0.058s GC time
Loading theory "HOL-Library.BigO" (required by "Draft.Floatarith_ExpressionTemplates" via "Draft.ExtrEqs")
### theory "Draft.Affine_Arithmetic_Auxiliarities"
### 0.137s elapsed time, 0.541s cpu time, 0.058s GC time
Loading theory "Draft.Executable_Euclidean_Space" (required by "Draft.Floatarith_ExpressionTemplates" via "Draft.Floatarith_Expression")
consts
  shift :: "'a list => 'a stream => 'a stream"
Proofs for coinductive predicate(s) "streamsp"
  Proving monotonicity ...
consts
  snth :: "'a stream => nat => 'a"
consts
  left :: "'a tree => 'a tree"
consts
  stake :: "nat => 'a stream => 'a list"
consts
  right :: "'a tree => 'a tree"
consts
  sdrop :: "nat => 'a stream => 'a stream"
Found termination order: "size <*mlex*> {}"
consts
  sfilter :: "('a => bool) => 'a stream => 'a stream"
consts
  cycle :: "'a list => 'a stream"
Found termination order: "size <*mlex*> {}"
consts
  siterate :: "('a => 'a) => 'a => 'a stream"
Found termination order: "size <*mlex*> {}"
consts
  flat :: "'a list stream => 'a stream"
class height = type +
  fixes height :: "'a => nat"
instantiation
  tree :: (type) height
  height_tree == height :: 'a tree => nat
consts
  sinterleave :: "'a stream => 'a stream => 'a stream"
consts
  szip :: "'a stream => 'b stream => ('a * 'b) stream"
Found termination order: "size <*mlex*> {}"
consts
  smap2 :: "('a => 'b => 'c) => 'a stream => 'b stream => 'c stream"
### theory "HOL-Library.Stream"
### 0.968s elapsed time, 3.752s cpu time, 0.389s GC time
Found termination order: "size <*mlex*> {}"
### theory "HOL-Library.BigO"
### 0.844s elapsed time, 3.258s cpu time, 0.331s GC time
Found termination order: "size <*mlex*> {}"
Found termination order: "size <*mlex*> {}"
Found termination order: "size <*mlex*> {}"
Found termination order: "size <*mlex*> {}"
Found termination order: "size <*mlex*> {}"
Found termination order: "(%p. size (fst p)) <*mlex*> {}"
Found termination order: "size <*mlex*> {}"
Found termination order: "(%p. size (snd p)) <*mlex*> {}"
Found termination order: "size <*mlex*> {}"
### theory "HOL-Library.Tree"
### 2.162s elapsed time, 6.421s cpu time, 1.071s GC time
Loading theory "Draft.Templates" (required by "Draft.Floatarith_ExpressionTemplates" via "Draft.ExtrEqs")
datatype template_term
=
     t_empty
   | template_app of template_term * template_term
   | template_hole of int
   | template_var of int
datatype sign
= equals | greater_equals | greater_than | less_equals | less_than
datatype template
=
     template_bimplication of template * template
   | template_dunno
   | template_equation of template_term * template_term
   | template_implication of template list * template
   | template_inequation of sign * template_term * template_term
   | template_negation of template
   | template_predicate of template_term
constructor t_empty: template_term
constructor template_app: template_term * template_term -> template_term
constructor template_hole: int -> template_term
constructor template_var: int -> template_term
constructor equals: sign
constructor greater_equals: sign
constructor greater_than: sign
constructor less_equals: sign
constructor less_than: sign
constructor template_bimplication: template * template -> template
constructor template_dunno: template
constructor template_equation: template_term * template_term -> template
constructor template_implication: template list * template -> template
constructor template_inequation:
   sign * template_term * template_term -> template
constructor template_negation: template -> template
constructor template_predicate: template_term -> template
val vfs = fn: term -> (indexname * typ) list * (string * typ) list
val indexOf = fn: ''a list -> ''a -> int -> int
val has_eq = fn: term -> bool
val term2template = fn:
   (indexname * typ) list -> (string * typ) list -> term -> template_term
val lemma2predicate = fn: term -> term -> template
val makeTemplatewithContext = fn: term -> term -> template
val lemma2template = fn: term -> template
val thm2template = fn: thm -> template
val tterm2string = fn: template_term -> string
val template2string = fn: template -> string
val t = "height ?t <= size ?t": thm
val th =
   Const ("HOL.Trueprop", "bool => prop") $
     (Const ("Orderings.ord_class.less_eq", "nat => nat => bool") $
       (Const ("Tree.height_class.height", "?'a tree => nat") $
         Var (("t", 0), "?'a tree")) $
       (Const ("Nat.size_class.size", "?'a tree => nat") $
         Var (("t", 0), "?'a tree"))):
   term
### theory "Draft.Templates"
### 0.058s elapsed time, 0.131s cpu time, 0.000s GC time
Loading theory "Draft.ExtrEqs" (required by "Draft.Floatarith_ExpressionTemplates")
class executable_euclidean_space = ordered_euclidean_space +
  fixes Basis_list :: "'a list"
    and eucl_down :: "int => 'a => 'a"
    and eucl_truncate_down :: "nat => 'a => 'a"
    and eucl_truncate_up :: "nat => 'a => 'a"
  assumes
    "eucl_down_def":
      "!!p b.
          eucl_down p b =
          (SUM i:Basis. round_down p (b \<bullet> i) *\<^sub>R i)"
  assumes
    "eucl_truncate_down_def":
      "!!q b.
          eucl_truncate_down q b =
          (SUM i:Basis. truncate_down q (b \<bullet> i) *\<^sub>R i)"
  assumes
    "eucl_truncate_up_def":
      "!!q b.
          eucl_truncate_up q b =
          (SUM i:Basis. truncate_up q (b \<bullet> i) *\<^sub>R i)"
  assumes "Basis_list": "set Basis_list = Basis"
  assumes "distinct_Basis_list": "distinct Basis_list"
instantiation
  real :: executable_euclidean_space
  Basis_list_real == Basis_list :: real list
  eucl_down_real == eucl_down :: int => real => real
  eucl_truncate_down_real == eucl_truncate_down :: nat => real => real
  eucl_truncate_up_real == eucl_truncate_up :: nat => real => real
instantiation
  prod :: (executable_euclidean_space, executable_euclidean_space)
    executable_euclidean_space
  Basis_list_prod == Basis_list :: ('a * 'b) list
  eucl_down_prod == eucl_down :: int => 'a * 'b => 'a * 'b
  eucl_truncate_down_prod == eucl_truncate_down :: nat => 'a * 'b => 'a * 'b
  eucl_truncate_up_prod == eucl_truncate_up :: nat => 'a * 'b => 'a * 'b
instantiation
  vec :: (executable_euclidean_space, enum) executable_euclidean_space
  Basis_list_vec == Basis_list :: ('a, 'b) vec list
  eucl_down_vec == eucl_down :: int => ('a, 'b) vec => ('a, 'b) vec
  eucl_truncate_down_vec == eucl_truncate_down ::
    nat => ('a, 'b) vec => ('a, 'b) vec
  eucl_truncate_up_vec == eucl_truncate_up ::
    nat => ('a, 'b) vec => ('a, 'b) vec
val eqpattern =
   Pattern
    (
       Const ("HOL.Trueprop", "bool => prop") $
         (Const ("HOL.eq", "?'a => ?'a => bool") $
           Var (("_dummy_", 1), "?'a") $ Var (("_dummy_", 2), "?'a"))
       ):
   term Find_Theorems.criterion
val badeqpattern = Pattern (Const ("Pure.eq", "?'a => ?'a => prop")):
   term Find_Theorems.criterion
val undefpattern =
   Pattern
    (
       Const ("HOL.Trueprop", "bool => prop") $
         (Const ("HOL.eq", "?'a => ?'a => bool") $
           Var (("_dummy_", 1), "?'a") $ Const ("HOL.undefined", "?'a"))
       ):
   term Find_Theorems.criterion
val thmpattern =
   Pattern
    (Const ("HOL.Trueprop", "bool => prop") $ Var (("_dummy_", 1), "bool")):
   term Find_Theorems.criterion
val badnames =
   ["*nitpick*", "*Nitpick*", "*full_exhaustive*", "*_def*", "Enum.finite*",
    "*Quickcheck*", "ATP*", "*Nunchaku*", "*Code*", "*BNF*", "*SMT*",
    "*.*.*"]:
   string list
val unwanted_names =
   [(false, Name "*nitpick*"), (false, Name "*Nitpick*"),
    (false, Name "*full_exhaustive*"), (false, Name "*_def*"),
    (false, Name "Enum.finite*"), (false, Name "*Quickcheck*"),
    (false, Name "ATP*"), (false, Name "*Nunchaku*"),
    (false, Name "*Code*"), (false, Name "*BNF*"), (false, Name "*SMT*"),
    (false, Name "*.*.*")]:
   (bool * term Find_Theorems.criterion) list
val has_vars = fn: term -> bool
val get_all_eqs = fn: string -> Proof.context -> (string * thm) list
val get_all_thms = fn: string -> Proof.context -> (string * thm) list
val get_noneq_thms = fn: string -> Proof.context -> (string * thm) list
val template_eqs = fn:
   string -> Proof.context -> (string * thm * template) list
val template_thms = fn:
   string -> Proof.context -> (string * thm * template) list
### theory "Draft.ExtrEqs"
### 0.592s elapsed time, 1.239s cpu time, 0.141s GC time
locale blinfun_syntax
### theory "Draft.Executable_Euclidean_Space"
### 3.525s elapsed time, 8.622s cpu time, 1.920s GC time
Loading theory "Draft.Floatarith_Expression" (required by "Draft.Floatarith_ExpressionTemplates")
consts
  interpret_floatariths :: "floatarith list => real list => real list"
instantiation
  floatarith :: {inverse,minus,one,plus,times,uminus,zero}
  zero_floatarith == zero_class.zero :: floatarith
  uminus_floatarith == uminus :: floatarith => floatarith
  times_floatarith == times :: floatarith => floatarith => floatarith
  plus_floatarith == plus :: floatarith => floatarith => floatarith
  one_floatarith == one_class.one :: floatarith
  minus_floatarith == minus :: floatarith => floatarith => floatarith
  inverse_floatarith == inverse :: floatarith => floatarith
  divide_floatarith == divide :: floatarith => floatarith => floatarith
consts
  Sum\<^sub>e :: "('a => 'b) => 'a list => 'b"
Found termination order: "{}"
Found termination order: "size <*mlex*> {}"
consts
  max_Var_floatarith :: "floatarith => nat"
consts
  max_Var_floatariths :: "floatarith list => nat"
consts
  max_Var_form :: "form => nat"
consts
  fresh_floatarith :: "floatarith => nat => bool"
consts
  fresh_floatariths :: "floatarith list => nat => bool"
Found termination order: "(%p. size_list size (snd p)) <*mlex*> {}"
### ML warning (line 976 of "$AFP/Affine_Arithmetic/Floatarith_Expression.thy"):
### Pattern is not exhaustive.
### ML warning (line 978 of "$AFP/Affine_Arithmetic/Floatarith_Expression.thy"):
### Pattern is not exhaustive.
### ML warning (line 1013 of "$AFP/Affine_Arithmetic/Floatarith_Expression.thy"):
### Pattern is not exhaustive.
### ML warning (line 1031 of "$AFP/Affine_Arithmetic/Floatarith_Expression.thy"):
### Pattern is not exhaustive.
val mk_congeq = fn: Proof.context -> term list -> thm -> string list * thm
val mk_congs = fn:
   Proof.context ->
     thm list -> (string list * thm) list * (typ * ('a list * 'b list)) list
val interpret_floatariths_congs = fn: Proof.context -> thm list
val preproc_form_conv = fn: Proof.context -> conv
val reify_floatariths_tac = fn: Proof.context -> int -> tactic
### Cannot skip proof of schematic goal statement
val interpret_floatariths_step_tac = fn: Proof.context -> int -> tactic
Found termination order: "(%p. size (snd p)) <*mlex*> {}"
Found termination order: "size <*mlex*> {}"
Found termination order: "(%p. length (fst (snd p))) <*mlex*> {}"
consts
  freshs_floatarith :: "floatarith => nat list => bool"
Found termination order: "size <*mlex*> {}"
Found termination order: "size <*mlex*> {}"
consts
  isnFDERIV ::
    "nat
     => floatarith list => nat list => nat list => real list => nat => bool"
consts
  isnFDERIV_approx ::
    "nat
     => nat
        => floatarith list
           => nat list
              => nat list => float interval option list => nat => bool"
Found termination order: "(%p. size (snd p)) <*mlex*> {}"
### theory "Draft.Floatarith_Expression"
### 7.941s elapsed time, 9.837s cpu time, 2.161s GC time
Loading theory "Draft.Floatarith_ExpressionTemplates"
val templateLemmas =
   [("Floatarith_Expression.subterms_self", "?fa2.0 : subterms ?fa2.0",
     template_predicate
      (
         template_app
          (template_app (template_hole 1, template_var 0),
           template_app (template_hole 0, template_var 0))
         )),
    ("Floatarith_Expression.interpret_floatarith_one",
     "interpret_floatarith 1 ?xs = 1",
     template_equation
      (template_app
        (template_app (template_hole 2, template_hole 1), template_var 0),
       template_hole 0)),
    ("Floatarith_Expression.interpret_floatarith_zero",
     "interpret_floatarith 0 ?xs = 0",
     template_equation
      (template_app
        (template_app (template_hole 2, template_hole 1), template_var 0),
       template_hole 0)),
    ("Floatarith_Expression.matrix_matrix_mult_zero", "?a ** 0 = 0",
     template_equation
      (template_app
        (template_app (template_hole 2, template_var 0), template_hole 1),
       template_hole 0)),
    ("Floatarith_Expression.matrix_matrix_mult_zero", "0 ** ?a = 0",
     template_equation
      (template_app
        (template_app (template_hole 2, template_hole 1), template_var 0),
       template_hole 0)),
    ("Floatarith_Expression.max_Var_floatarith_simps",
     "max_Var_floatarith (- ?b) = max_Var_floatarith ?b",
     template_equation
      (template_app
        (template_hole 1, template_app (template_hole 0, template_var 0)),
       template_app (template_hole 1, template_var 0))),
    ("Floatarith_Expression.norm_axis", "norm (axis ?ia (1::?'a)) = 1",
     template_equation
      (template_app
        (template_hole 3,
         template_app
          (template_app (template_hole 2, template_var 0),
           template_hole 1)),
       template_hole 0)),
    ("Floatarith_Expression.max_Var_floatarith_fold_const_fa",
     "max_Var_floatarith (fold_const_fa ?fa) <= max_Var_floatarith ?fa",
     template_inequation
      (less_equals,
       template_app
        (template_hole 1, template_app (template_hole 0, template_var 0)),
       template_app (template_hole 1, template_var 0))),
    ("Floatarith_Expression.interpret_floatariths_fold_const_fa",
     "interpret_floatariths (map fold_const_fa ?ds) =
      interpret_floatariths ?ds",
     template_equation
      (template_app
        (template_hole 2,
         template_app
          (template_app (template_hole 1, template_hole 0),
           template_var 0)),
       template_app (template_hole 2, template_var 0))),
    ("Floatarith_Expression.length_interpret_floatariths",
     "length (interpret_floatariths ?fas ?xs) = length ?fas",
     template_equation
      (template_app
        (template_hole 2,
         template_app
          (template_app (template_hole 1, template_var 1), template_var 0)),
       template_app (template_hole 0, template_var 1))),
    ("Floatarith_Expression.FDERIV_n_floatariths_Suc",
     "FDERIV_n_floatariths ?fa ?xs ?ds 0 = ?fa",
     template_equation
      (template_app
        (template_app
          (template_app
            (template_app (template_hole 1, template_var 2),
             template_var 1),
           template_var 0),
         template_hole 0),
       template_var 2)),
    ("Floatarith_Expression.interpret_Floatreal",
     "interpret_floatarith (floatarith.Num ?f) ?vs = real_of_float ?f",
     template_equation
      (template_app
        (template_app
          (template_hole 2, template_app (template_hole 1, template_var 1)),
         template_var 0),
       template_app (template_hole 0, template_var 1))),
    ("Floatarith_Expression.interpret_R\<^sub>e",
     "interpret_floatarith (R\<^sub>e ?x) ?xs = real_of_rat ?x",
     template_equation
      (template_app
        (template_app
          (template_hole 2, template_app (template_hole 1, template_var 1)),
         template_var 0),
       template_app (template_hole 0, template_var 1))),
    ("Floatarith_Expression.max_Var_floatarith_DERIV_floatarith",
     "max_Var_floatarith (DERIV_floatarith ?x ?fa)
      <= max_Var_floatarith ?fa",
     template_inequation
      (less_equals,
       template_app
        (template_hole 1,
         template_app
          (template_app (template_hole 0, template_var 1), template_var 0)),
       template_app (template_hole 1, template_var 0))),
    ("Floatarith_Expression.max_Var_floatariths_fold_const_fa",
     "max_Var_floatariths (map fold_const_fa ?xs)
      <= max_Var_floatariths ?xs",
     template_inequation
      (less_equals,
       template_app
        (template_hole 2,
         template_app
          (template_app (template_hole 1, template_hole 0),
           template_var 0)),
       template_app (template_hole 2, template_var 0))),
    ("Floatarith_Expression.length_list_updates",
     "length (list_updates ?xs ?ys ?vs) = length ?vs",
     template_equation
      (template_app
        (template_hole 1,
         template_app
          (template_app
            (template_app (template_hole 0, template_var 2),
             template_var 1),
           template_var 0)),
       template_app (template_hole 1, template_var 0))),
    ("Floatarith_Expression.length_FDERIV_floatariths",
     "length (FDERIV_floatariths ?fas ?xs ?ds) = length ?fas",
     template_equation
      (template_app
        (template_hole 1,
         template_app
          (template_app
            (template_app (template_hole 0, template_var 2),
             template_var 1),
           template_var 0)),
       template_app (template_hole 1, template_var 2))),
    ("Floatarith_Expression.length_mvmult_fa",
     "length (mvmult_fa ?D ?E ?xs ?ys) = ?D",
     template_equation
      (template_app
        (template_hole 1,
         template_app
          (template_app
            (template_app
              (template_app (template_hole 0, template_var 3),
               template_var 2),
             template_var 1),
           template_var 0)),
       template_var 3)),
    ("Floatarith_Expression.interpret_floatarith_Nr",
     "interpret_floatarith (N\<^sub>r ?U) ?vs =
      real_of_float (float_of ?U)",
     template_equation
      (template_app
        (template_app
          (template_hole 3, template_app (template_hole 2, template_var 1)),
         template_var 0),
       template_app
        (template_hole 1, template_app (template_hole 0, template_var 1)))),
    ("Floatarith_Expression.fold_const_fa",
     "interpret_floatarith (fold_const_fa ?fa) ?xs =
      interpret_floatarith ?fa ?xs",
     template_equation
      (template_app
        (template_app
          (template_hole 1, template_app (template_hole 0, template_var 1)),
         template_var 0),
       template_app
        (template_app (template_hole 1, template_var 1), template_var 0))),
    ("Floatarith_Expression.diff_floatarith_conv_add_uminus",
     "?a - ?b = ?a + - ?b",
     template_equation
      (template_app
        (template_app (template_hole 2, template_var 1), template_var 0),
       template_app
        (template_app (template_hole 1, template_var 1),
         template_app (template_hole 0, template_var 0)))),
    ("Floatarith_Expression.length_FDERIV_n_floatariths",
     "length (FDERIV_n_floatariths ?fa ?xs ?ds ?n) = length ?fa",
     template_equation
      (template_app
        (template_hole 1,
         template_app
          (template_app
            (template_app
              (template_app (template_hole 0, template_var 3),
               template_var 2),
             template_var 1),
           template_var 0)),
       template_app (template_hole 1, template_var 3))),
    ("Floatarith_Expression.max_Var_floatarithimage_Var",
     "max_Var_floatarith ` floatarith.Var ` ?X = Suc ` ?X",
     template_equation
      (template_app
        (template_app (template_hole 5, template_hole 4),
         template_app
          (template_app (template_hole 3, template_hole 2),
           template_var 0)),
       template_app
        (template_app (template_hole 1, template_hole 0), template_var 0))),
    ("Floatarith_Expression.interpret_floatarith_inverse",
     "interpret_floatarith (inverse ?f) ?xs =
      inverse (interpret_floatarith ?f ?xs)",
     template_equation
      (template_app
        (template_app
          (template_hole 2, template_app (template_hole 1, template_var 1)),
         template_var 0),
       template_app
        (template_hole 0,
         template_app
          (template_app (template_hole 2, template_var 1),
           template_var 0)))),
    ("Floatarith_Expression.interpret_Deg_of",
     "interpret_floatarith (Deg_of ?w) ?xs =
      deg_of (interpret_floatarith ?w ?xs)",
     template_equation
      (template_app
        (template_app
          (template_hole 2, template_app (template_hole 1, template_var 1)),
         template_var 0),
       template_app
        (template_hole 0,
         template_app
          (template_app (template_hole 2, template_var 1),
           template_var 0)))),
    ("Floatarith_Expression.interpret_Rad_of",
     "interpret_floatarith (Rad_of ?w) ?xs =
      rad_of (interpret_floatarith ?w ?xs)",
     template_equation
      (template_app
        (template_app
          (template_hole 2, template_app (template_hole 1, template_var 1)),
         template_var 0),
       template_app
        (template_hole 0,
         template_app
          (template_app (template_hole 2, template_var 1),
           template_var 0)))),
    ("Floatarith_Expression.interpret_floatarith_Sin",
     "interpret_floatarith (Sin ?x) ?vs =
      sin (interpret_floatarith ?x ?vs)",
     template_equation
      (template_app
        (template_app
          (template_hole 2, template_app (template_hole 1, template_var 1)),
         template_var 0),
       template_app
        (template_hole 0,
         template_app
          (template_app (template_hole 2, template_var 1),
           template_var 0)))),
    ("Floatarith_Expression.interpret_floatarith_Tan",
     "interpret_floatarith (Tan ?x) ?vs =
      tan (interpret_floatarith ?x ?vs)",
     template_equation
      (template_app
        (template_app
          (template_hole 2, template_app (template_hole 1, template_var 1)),
         template_var 0),
       template_app
        (template_hole 0,
         template_app
          (template_app (template_hole 2, template_var 1),
           template_var 0)))),
    ("Floatarith_Expression.interpret_floatarith_uminus",
     "interpret_floatarith (- ?f) ?xs = - interpret_floatarith ?f ?xs",
     template_equation
      (template_app
        (template_app
          (template_hole 2, template_app (template_hole 1, template_var 1)),
         template_var 0),
       template_app
        (template_hole 0,
         template_app
          (template_app (template_hole 2, template_var 1),
           template_var 0)))),
    ("Floatarith_Expression.fresh_floatarith_fold_const_fa",
     "fresh_floatarith ?fa ?i ==> fresh_floatarith (fold_const_fa ?fa) ?i",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 1, template_var 1),
              template_var 0)
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 1,
               template_app (template_hole 0, template_var 1)),
             template_var 0)
           ))),
    ("Floatarith_Expression.fresh_floatarith_max_Var",
     "max_Var_floatarith ?ea <= ?i ==> fresh_floatarith ?ea ?i",
     template_implication
      ([template_inequation
         (less_equals, template_app (template_hole 1, template_var 1),
          template_var 0)],
       template_predicate
        (
           template_app
            (template_app (template_hole 0, template_var 1), template_var 0)
           ))),
    ("Floatarith_Expression.fresh_floatariths_max_Var",
     "max_Var_floatariths ?ea <= ?i ==> fresh_floatariths ?ea ?i",
     template_implication
      ([template_inequation
         (less_equals, template_app (template_hole 1, template_var 1),
          template_var 0)],
       template_predicate
        (
           template_app
            (template_app (template_hole 0, template_var 1), template_var 0)
           ))),
    ("Floatarith_Expression.fold_const_fa_unique",
     "(!!x. ?f = floatarith.Num x) ==> False",
     template_implication
      ([template_predicate (template_app (template_hole 4, t_empty))],
       template_predicate (template_hole 0))),
    ("Floatarith_Expression.one_add_square_eq_0", "1 + ?x\<^sup>2 ~= 0",
     template_negation
      (
         template_equation
          (template_app
            (template_app (template_hole 6, template_hole 5),
             template_app
              (template_app (template_hole 4, template_var 0),
               template_app
                (template_hole 3,
                 template_app (template_hole 2, template_hole 1)))),
           template_hole 0)
         )),
    ("Floatarith_Expression.max_Var_floatarith_simps",
     "max_Var_floatarith (?a - ?b) =
      max (max_Var_floatarith ?a) (max_Var_floatarith ?b)",
     template_equation
      (template_app
        (template_hole 2,
         template_app
          (template_app (template_hole 1, template_var 1), template_var 0)),
       template_app
        (template_app
          (template_hole 0, template_app (template_hole 2, template_var 1)),
         template_app (template_hole 2, template_var 0)))),
    ("Floatarith_Expression.max_Var_floatarith_simps",
     "max_Var_floatarith (?a + ?b) =
      max (max_Var_floatarith ?a) (max_Var_floatarith ?b)",
     template_equation
      (template_app
        (template_hole 2,
         template_app
          (template_app (template_hole 1, template_var 1), template_var 0)),
       template_app
        (template_app
          (template_hole 0, template_app (template_hole 2, template_var 1)),
         template_app (template_hole 2, template_var 0)))),
    ("Floatarith_Expression.max_Var_floatarith_simps",
     "max_Var_floatarith (?a * ?b) =
      max (max_Var_floatarith ?a) (max_Var_floatarith ?b)",
     template_equation
      (template_app
        (template_hole 2,
         template_app
          (template_app (template_hole 1, template_var 1), template_var 0)),
       template_app
        (template_app
          (template_hole 0, template_app (template_hole 2, template_var 1)),
         template_app (template_hole 2, template_var 0)))),
    ("Floatarith_Expression.max_Var_floatarith_simps",
     "max_Var_floatarith (?a / ?b) =
      max (max_Var_floatarith ?a) (max_Var_floatarith ?b)",
     template_equation
      (template_app
        (template_hole 2,
         template_app
          (template_app (template_hole 1, template_var 1), template_var 0)),
       template_app
        (template_app
          (template_hole 0, template_app (template_hole 2, template_var 1)),
         template_app (template_hole 2, template_var 0)))),
    ("Floatarith_Expression.max_Var_floatariths_append",
     "max_Var_floatariths (?xs @ ?ys) =
      max (max_Var_floatariths ?xs) (max_Var_floatariths ?ys)",
     template_equation
      (template_app
        (template_hole 2,
         template_app
          (template_app (template_hole 1, template_var 1), template_var 0)),
       template_app
        (template_app
          (template_hole 0, template_app (template_hole 2, template_var 1)),
         template_app (template_hole 2, template_var 0)))),
    ("Floatarith_Expression.interpret_floatariths_Var",
     "interpret_floatariths (map floatarith.Var ?xs) ?vs =
      map ((!) ?vs) ?xs",
     template_equation
      (template_app
        (template_app
          (template_hole 4,
           template_app
            (template_app (template_hole 3, template_hole 2),
             template_var 1)),
         template_var 0),
       template_app
        (template_app
          (template_hole 1, template_app (template_hole 0, template_var 0)),
         template_var 1))),
    ("Floatarith_Expression.length_mmult_fa",
     "length (mmult_fa ?l ?m ?n ?AS ?BS) = ?l * ?n",
     template_equation
      (template_app
        (template_hole 2,
         template_app
          (template_app
            (template_app
              (template_app
                (template_app (template_hole 1, template_var 4),
                 template_var 3),
               template_var 2),
             template_var 1),
           template_var 0)),
       template_app
        (template_app (template_hole 0, template_var 4), template_var 2))),
    ("Floatarith_Expression.fresh_floatariths_map_Var",
     "fresh_floatariths (map floatarith.Var ?xs) ?i = (?i ~: set ?xs)",
     template_equation
      (template_app
        (template_app
          (template_hole 5,
           template_app
            (template_app (template_hole 4, template_hole 3),
             template_var 1)),
         template_var 0),
       template_app
        (template_hole 2,
         template_app
          (template_app (template_hole 1, template_var 0),
           template_app (template_hole 0, template_var 1))))),
    ("Floatarith_Expression.matrix_scaleR_left",
     "?a ** ?r *\<^sub>R ?b = ?r *\<^sub>R (?a ** ?b)",
     template_equation
      (template_app
        (template_app (template_hole 2, template_var 2),
         template_app
          (template_app (template_hole 1, template_var 1), template_var 0)),
       template_app
        (template_app (template_hole 0, template_var 1),
         template_app
          (template_app (template_hole 2, template_var 2),
           template_var 0)))),
    ("Floatarith_Expression.matrix_scaleR_right",
     "?r *\<^sub>R ?a ** ?b = ?r *\<^sub>R (?a ** ?b)",
     template_equation
      (template_app
        (template_app
          (template_hole 2,
           template_app
            (template_app (template_hole 1, template_var 2),
             template_var 1)),
         template_var 0),
       template_app
        (template_app (template_hole 0, template_var 2),
         template_app
          (template_app (template_hole 2, template_var 1),
           template_var 0)))),
    ("Floatarith_Expression.scaleR_blinfun_compose_right",
     "?i *\<^sub>R (?A o\<^sub>L ?B) = ?A o\<^sub>L ?i *\<^sub>R ?B",
     template_equation
      (template_app
        (template_app (template_hole 2, template_var 2),
         template_app
          (template_app (template_hole 1, template_var 1), template_var 0)),
       template_app
        (template_app (template_hole 1, template_var 1),
         template_app
          (template_app (template_hole 0, template_var 2),
           template_var 0)))),
    ("Floatarith_Expression.scaleR_blinfun_compose_left",
     "?i *\<^sub>R (?A o\<^sub>L ?B) = ?i *\<^sub>R ?A o\<^sub>L ?B",
     template_equation
      (template_app
        (template_app (template_hole 2, template_var 2),
         template_app
          (template_app (template_hole 1, template_var 1), template_var 0)),
       template_app
        (template_app
          (template_hole 1,
           template_app
            (template_app (template_hole 0, template_var 2),
             template_var 1)),
         template_var 0))),
    ("Floatarith_Expression.abs_vec_nth_blinfun_apply_lemma",
     "\<bar>blinfun_apply ?x (axis ?ia 1) $ ?i\<bar> <= norm ?x",
     template_inequation
      (less_equals,
       template_app
        (template_hole 5,
         template_app
          (template_app
            (template_hole 4,
             template_app
              (template_app (template_hole 3, template_var 2),
               template_app
                (template_app (template_hole 2, template_var 1),
                 template_hole 1))),
           template_var 0)),
       template_app (template_hole 0, template_var 2))),
    ("Floatarith_Expression.isDERIV_fold_const_fa",
     "isDERIV ?x ?fa ?vs ==> isDERIV ?x (fold_const_fa ?fa) ?vs",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app (template_hole 1, template_var 2),
                template_var 1),
              template_var 0)
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_app (template_hole 1, template_var 2),
               template_app (template_hole 0, template_var 1)),
             template_var 0)
           ))),
    ("Floatarith_Expression.fresh_floatarith_fold_const_fa_Minus",
     "fresh_floatarith (fold_const_fa ?b) ?i ==>
      fresh_floatarith (fold_const_fa (floatarith.Minus ?b)) ?i",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_hole 2,
                template_app (template_hole 1, template_var 1)),
              template_var 0)
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 2,
               template_app
                (template_hole 1,
                 template_app (template_hole 0, template_var 1))),
             template_var 0)
           ))),
    ("Floatarith_Expression.subst_floatarith_eq_self",
     "max_Var_floatarith ?f = 0 ==> subst_floatarith ?s ?f = ?f",
     template_implication
      ([template_equation
         (template_app (template_hole 3, template_var 1), template_hole 2)],
       template_equation
        (template_app
          (template_app (template_hole 0, template_var 0), template_var 1),
         template_var 1))),
    ("Floatarith_Expression.max_Var_floatarith_le_max_Var_floatariths",
     "?fa : set ?fas ==>
      max_Var_floatarith ?fa <= max_Var_floatariths ?fas",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 4, template_var 1),
              template_app (template_hole 3, template_var 0))
            )],
       template_inequation
        (less_equals, template_app (template_hole 1, template_var 1),
         template_app (template_hole 0, template_var 0)))),
    ("Floatarith_Expression.isFDERIV_lengthD",
     "isFDERIV ?n ?xs ?fas ?vs ==> length ?xs = ?n",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_app (template_hole 2, template_var 3),
                  template_var 2),
                template_var 1),
              template_var 0)
            )],
       template_equation
        (template_app (template_hole 0, template_var 2), template_var 3))),
    ("Floatarith_Expression.isFDERIV_lengthD",
     "isFDERIV ?n ?xs ?fas ?vs ==> length ?fas = ?n",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_app (template_hole 2, template_var 3),
                  template_var 2),
                template_var 1),
              template_var 0)
            )],
       template_equation
        (template_app (template_hole 0, template_var 1), template_var 3))),
    ("Floatarith_Expression.matrix_has_derivative",
     "((%x. matrix (blinfun_apply x)) has_derivative
       (%h. matrix (blinfun_apply h)))
       (at ?x)",
     template_predicate
      (
         template_app
          (template_app (template_app (template_hole 4, t_empty), t_empty),
           template_app
            (template_app (template_hole 1, template_var 0),
             template_hole 0))
         )),
    ("Floatarith_Expression.max_Var_floatariths_map_uminus",
     "max_Var_floatariths (map (%i. - ?fa1.0 i) ?xs) =
      max_Var_floatariths (map ?fa1.0 ?xs)",
     template_equation
      (template_app
        (template_hole 2,
         template_app
          (template_app (template_hole 1, t_empty), template_var 0)),
       template_app
        (template_hole 2,
         template_app
          (template_app (template_hole 1, template_var 1),
           template_var 0)))),
    ("Floatarith_Expression.interpret_Half",
     "interpret_floatarith (Half ?x) ?xs = interpret_floatarith ?x ?xs / 2",
     template_equation
      (template_app
        (template_app
          (template_hole 5, template_app (template_hole 4, template_var 1)),
         template_var 0),
       template_app
        (template_app
          (template_hole 3,
           template_app
            (template_app (template_hole 5, template_var 1),
             template_var 0)),
         template_app
          (template_hole 2,
           template_app (template_hole 1, template_hole 0))))),
    ("Floatarith_Expression.isDERIV_Power",
     "isDERIV ?x ?fa ?vs ==> isDERIV ?x (?fa ^\<^sub>e ?n) ?vs",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app (template_hole 1, template_var 3),
                template_var 2),
              template_var 1)
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_app (template_hole 1, template_var 3),
               template_app
                (template_app (template_hole 0, template_var 2),
                 template_var 0)),
             template_var 1)
           ))),
    ("Floatarith_Expression.max_Var_floatariths_replicateI",
     "max_Var_floatarith ?v <= ?m ==>
      max_Var_floatariths (replicate ?n ?v) <= ?m",
     template_implication
      ([template_inequation
         (less_equals, template_app (template_hole 2, template_var 2),
          template_var 1)],
       template_inequation
        (less_equals,
         template_app
          (template_hole 1,
           template_app
            (template_app (template_hole 0, template_var 0),
             template_var 2)),
         template_var 1))),
    ("Floatarith_Expression.max_Var_floatariths_map_const",
     "max_Var_floatariths (map (%i. ?fa) ?xs) =
      (if ?xs = [] then 0 else max_Var_floatarith ?fa)",
     template_implication
      ([template_predicate
         (
            template_app
             (template_hole 6,
              template_app
               (template_app (template_hole 5, t_empty), template_var 0))
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_app
                (template_hole 4,
                 template_app
                  (template_app (template_hole 3, template_var 0),
                   template_hole 2)),
               template_hole 1),
             template_app (template_hole 0, template_var 1))
           ))),
    ("Floatarith_Expression.interpret_floatariths_append",
     "interpret_floatariths (?xs @ ?ys) ?vs =
      interpret_floatariths ?xs ?vs @ interpret_floatariths ?ys ?vs",
     template_equation
      (template_app
        (template_app
          (template_hole 2,
           template_app
            (template_app (template_hole 1, template_var 2),
             template_var 1)),
         template_var 0),
       template_app
        (template_app
          (template_hole 0,
           template_app
            (template_app (template_hole 2, template_var 2),
             template_var 0)),
         template_app
          (template_app (template_hole 2, template_var 1),
           template_var 0)))),
    ("Floatarith_Expression.interpret_floatariths_map",
     "interpret_floatariths (map ?f ?xs) ?vs =
      map (%x. interpret_floatarith (?f x) ?vs) ?xs",
     template_equation
      (template_app
        (template_app
          (template_hole 3,
           template_app
            (template_app (template_hole 2, template_var 2),
             template_var 1)),
         template_var 0),
       template_app
        (template_app (template_hole 1, t_empty), template_var 1))),
    ("Floatarith_Expression.interpret_floatarith_minus",
     "interpret_floatarith (?f - ?g) ?xs =
      interpret_floatarith ?f ?xs - interpret_floatarith ?g ?xs",
     template_equation
      (template_app
        (template_app
          (template_hole 2,
           template_app
            (template_app (template_hole 1, template_var 2),
             template_var 1)),
         template_var 0),
       template_app
        (template_app
          (template_hole 0,
           template_app
            (template_app (template_hole 2, template_var 2),
             template_var 0)),
         template_app
          (template_app (template_hole 2, template_var 1),
           template_var 0)))),
    ("Floatarith_Expression.interpret_floatarith_plus",
     "interpret_floatarith (?f + ?g) ?xs =
      interpret_floatarith ?f ?xs + interpret_floatarith ?g ?xs",
     template_equation
      (template_app
        (template_app
          (template_hole 2,
           template_app
            (template_app (template_hole 1, template_var 2),
             template_var 1)),
         template_var 0),
       template_app
        (template_app
          (template_hole 0,
           template_app
            (template_app (template_hole 2, template_var 2),
             template_var 0)),
         template_app
          (template_app (template_hole 2, template_var 1),
           template_var 0)))),
    ("Floatarith_Expression.interpret_floatarith_times",
     "interpret_floatarith (?f * ?g) ?xs =
      interpret_floatarith ?f ?xs * interpret_floatarith ?g ?xs",
     template_equation
      (template_app
        (template_app
          (template_hole 2,
           template_app
            (template_app (template_hole 1, template_var 2),
             template_var 1)),
         template_var 0),
       template_app
        (template_app
          (template_hole 0,
           template_app
            (template_app (template_hole 2, template_var 2),
             template_var 0)),
         template_app
          (template_app (template_hole 2, template_var 1),
           template_var 0)))),
    ("Floatarith_Expression.interpret_floatarith_divide",
     "interpret_floatarith (?f / ?g) ?xs =
      interpret_floatarith ?f ?xs / interpret_floatarith ?g ?xs",
     template_equation
      (template_app
        (template_app
          (template_hole 2,
           template_app
            (template_app (template_hole 1, template_var 2),
             template_var 1)),
         template_var 0),
       template_app
        (template_app
          (template_hole 0,
           template_app
            (template_app (template_hole 2, template_var 2),
             template_var 0)),
         template_app
          (template_app (template_hole 2, template_var 1),
           template_var 0)))),
    ("Floatarith_Expression.matrix_add_rdistrib",
     "(?B + ?C) ** ?A = ?B ** ?A + ?C ** ?A",
     template_equation
      (template_app
        (template_app
          (template_hole 2,
           template_app
            (template_app (template_hole 1, template_var 2),
             template_var 1)),
         template_var 0),
       template_app
        (template_app
          (template_hole 0,
           template_app
            (template_app (template_hole 2, template_var 2),
             template_var 0)),
         template_app
          (template_app (template_hole 2, template_var 1),
           template_var 0)))),
    ("Floatarith_Expression.matrix_blinfun_compose",
     "matrix (blinfun_apply (?A o\<^sub>L ?B)) =
      matrix (blinfun_apply ?A) ** matrix (blinfun_apply ?B)",
     template_equation
      (template_app
        (template_hole 3,
         template_app
          (template_hole 2,
           template_app
            (template_app (template_hole 1, template_var 1),
             template_var 0))),
       template_app
        (template_app
          (template_hole 0,
           template_app
            (template_hole 3,
             template_app (template_hole 2, template_var 1))),
         template_app
          (template_hole 3,
           template_app (template_hole 2, template_var 0))))),
    ("Floatarith_Expression.Max_atLeastLessThan_nat",
     "?a < ?b ==> Max {?a..<?b} = ?b - 1",
     template_implication
      ([template_inequation (less_than, template_var 1, template_var 0)],
       template_equation
        (template_app
          (template_hole 3,
           template_app
            (template_app (template_hole 2, template_var 1),
             template_var 0)),
         template_app
          (template_app (template_hole 1, template_var 0),
           template_hole 0)))),
    ("Floatarith_Expression.max_Var_floatarith_le_max_Var_floatariths_nth",
     "?n < length ?fas ==>
      max_Var_floatarith (?fas ! ?n) <= max_Var_floatariths ?fas",
     template_implication
      ([template_inequation
         (less_than, template_var 1,
          template_app (template_hole 4, template_var 0))],
       template_inequation
        (less_equals,
         template_app
          (template_hole 2,
           template_app
            (template_app (template_hole 1, template_var 0),
             template_var 1)),
         template_app (template_hole 0, template_var 0)))),
    ("Floatarith_Expression.isDERIV_fold_const_fa_minus",
     "isDERIV ?x (fold_const_fa ?fa) ?vs ==>
      isDERIV ?x (fold_const_fa (floatarith.Minus ?fa)) ?vs",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app (template_hole 2, template_var 2),
                template_app (template_hole 1, template_var 1)),
              template_var 0)
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_app (template_hole 2, template_var 2),
               template_app
                (template_hole 1,
                 template_app (template_hole 0, template_var 1))),
             template_var 0)
           ))),
    ("Floatarith_Expression.max_Var_floatariths_Max",
     "max_Var_floatariths ?xs =
      (if set ?xs = {} then 0 else Max (max_Var_floatarith ` set ?xs))",
     template_implication
      ([template_predicate
         (template_app (template_hole 8, template_var 0))],
       template_predicate
        (
           template_app
            (template_app
              (template_app
                (template_hole 7,
                 template_app
                  (template_app
                    (template_hole 6,
                     template_app (template_hole 5, template_var 0)),
                   template_hole 4)),
               template_hole 3),
             template_app
              (template_hole 2,
               template_app
                (template_app (template_hole 1, template_hole 0),
                 template_app (template_hole 5, template_var 0))))
           ))),
    ("Floatarith_Expression.max_Var_floatariths_map_Var",
     "max_Var_floatariths (map floatarith.Var ?xs) =
      (if ?xs = [] then 0 else Suc (Max (set ?xs)))",
     template_implication
      ([template_predicate
         (
            template_app
             (template_hole 9,
              template_app
               (template_app (template_hole 8, template_hole 7),
                template_var 0))
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_app
                (template_hole 6,
                 template_app
                  (template_app (template_hole 5, template_var 0),
                   template_hole 4)),
               template_hole 3),
             template_app
              (template_hole 2,
               template_app
                (template_hole 1,
                 template_app (template_hole 0, template_var 0))))
           ))),
    ("Floatarith_Expression.fresh_floatariths_map",
     "fresh_floatariths (map ?f ?xs) ?i =
      (ALL x:set ?xs. fresh_floatarith (?f x) ?i)",
     template_equation
      (template_app
        (template_app
          (template_hole 4,
           template_app
            (template_app (template_hole 3, template_var 2),
             template_var 1)),
         template_var 0),
       template_app
        (template_app
          (template_hole 2, template_app (template_hole 1, template_var 1)),
         t_empty))),
    ("Floatarith_Expression.Num_eq_subst_Var",
     "(floatarith.Num ?x =
       subst_floatarith (%x. floatarith.Var (?s x)) ?fa) =
      (?fa = floatarith.Num ?x)",
     template_bimplication
      (template_equation
        (template_app (template_hole 2, template_var 2),
         template_app
          (template_app (template_hole 1, t_empty), template_var 0)),
       template_equation
        (template_var 0, template_app (template_hole 2, template_var 2)))),
    ("Floatarith_Expression.subst_floatarith_eq_Num",
     "(subst_floatarith (%x. floatarith.Var (?s x)) ?fa =
       floatarith.Num ?x) =
      (?fa = floatarith.Num ?x)",
     template_bimplication
      (template_equation
        (template_app
          (template_app (template_hole 2, t_empty), template_var 1),
         template_app (template_hole 0, template_var 0)),
       template_equation
        (template_var 1, template_app (template_hole 0, template_var 0)))),
    ("Floatarith_Expression.interpret_floatarith_Sum\<^sub>e",
     "interpret_floatarith (Sum\<^sub>e ?f ?x) ?vs =
      (SUM i<-?x. interpret_floatarith (?f i) ?vs)",
     template_equation
      (template_app
        (template_app
          (template_hole 3,
           template_app
            (template_app (template_hole 2, template_var 2),
             template_var 1)),
         template_var 0),
       template_app
        (template_hole 1,
         template_app
          (template_app (template_hole 0, t_empty), template_var 1)))),
    ("Floatarith_Expression.map_nth_eq_self",
     "length ?fas = ?l ==> map ((!) ?fas) [0..<?l] = ?fas",
     template_implication
      ([template_equation
         (template_app (template_hole 5, template_var 1), template_var 0)],
       template_equation
        (template_app
          (template_app
            (template_hole 3,
             template_app (template_hole 2, template_var 1)),
           template_app
            (template_app (template_hole 1, template_hole 0),
             template_var 0)),
         template_var 1))),
    ("Floatarith_Expression.isDERIV_fold_const_fa_power",
     "isDERIV ?x (fold_const_fa ?fa) ?vs ==>
      isDERIV ?x (fold_const_fa (?fa ^\<^sub>e ?n)) ?vs",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app (template_hole 2, template_var 3),
                template_app (template_hole 1, template_var 2)),
              template_var 1)
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_app (template_hole 2, template_var 3),
               template_app
                (template_hole 1,
                 template_app
                  (template_app (template_hole 0, template_var 2),
                   template_var 0))),
             template_var 1)
           ))),
    ("Floatarith_Expression.fresh_floatariths_fresh_floatarith",
     "[| fresh_floatariths ?fas ?i; ?fa : set ?fas |]
      ==> fresh_floatarith ?fa ?i",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 3, template_var 2),
              template_var 1)
            ),
        template_predicate
         (
            template_app
             (template_app (template_hole 2, template_var 0),
              template_app (template_hole 1, template_var 2))
            )],
       template_predicate
        (
           template_app
            (template_app (template_hole 0, template_var 0), template_var 1)
           ))),
    ("Floatarith_Expression.fresh_floatariths_fresh_floatarithI",
     "[| freshs_floatariths ?fas ?xs; ?fa : set ?fas |]
      ==> freshs_floatarith ?fa ?xs",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 3, template_var 2),
              template_var 1)
            ),
        template_predicate
         (
            template_app
             (template_app (template_hole 2, template_var 0),
              template_app (template_hole 1, template_var 2))
            )],
       template_predicate
        (
           template_app
            (template_app (template_hole 0, template_var 0), template_var 1)
           ))),
    ("Floatarith_Expression.FDERIV_n_floatariths_Suc",
     "FDERIV_n_floatariths ?fa ?xs ?ds (Suc ?n) =
      FDERIV_floatariths (FDERIV_n_floatariths ?fa ?xs ?ds ?n) ?xs ?ds",
     template_equation
      (template_app
        (template_app
          (template_app
            (template_app (template_hole 2, template_var 3),
             template_var 2),
           template_var 1),
         template_app (template_hole 1, template_var 0)),
       template_app
        (template_app
          (template_app
            (template_hole 0,
             template_app
              (template_app
                (template_app
                  (template_app (template_hole 2, template_var 3),
                   template_var 2),
                 template_var 1),
               template_var 0)),
           template_var 2),
         template_var 1))),
    ("Floatarith_Expression.subst_floatarith_Var_fold_const_fa",
     "subst_floatarith (%x. floatarith.Var (?s x)) (fold_const_fa ?fa) =
      fold_const_fa (subst_floatarith (%x. floatarith.Var (?s x)) ?fa)",
     template_equation
      (template_app
        (template_app (template_hole 2, t_empty),
         template_app (template_hole 0, template_var 0)),
       template_app
        (template_hole 0,
         template_app
          (template_app (template_hole 2, t_empty), template_var 0)))),
    ("Floatarith_Expression.add_square_ne_zero",
     "(0::?'a) < ?y ==> ?y + ?x\<^sup>2 ~= (0::?'a)",
     template_implication
      ([template_inequation (less_than, template_hole 7, template_var 1)],
       template_negation
        (
           template_equation
            (template_app
              (template_app (template_hole 4, template_var 1),
               template_app
                (template_app (template_hole 3, template_var 0),
                 template_app
                  (template_hole 2,
                   template_app (template_hole 1, template_hole 0)))),
             template_hole 7)
           ))),
    ("Floatarith_Expression.isDERIV_Power_iff",
     "isDERIV ?j (?fa ^\<^sub>e ?n) ?xs =
      (if ?n = 0 then True else isDERIV ?j ?fa ?xs)",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app (template_hole 5, template_var 3),
                template_app
                 (template_app (template_hole 4, template_var 2),
                  template_var 1)),
              template_var 0)
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_app
                (template_hole 3,
                 template_app
                  (template_app (template_hole 2, template_var 1),
                   template_hole 1)),
               template_hole 0),
             template_app
              (template_app
                (template_app (template_hole 5, template_var 3),
                 template_var 2),
               template_var 0))
           ))),
    ("Floatarith_Expression.not_fresh_floatariths_map",
     "(~ fresh_floatariths (map ?f ?xs) ?i) =
      (EX x:set ?xs. ~ fresh_floatarith (?f x) ?i)",
     template_equation
      (template_app
        (template_hole 5,
         template_app
          (template_app
            (template_hole 4,
             template_app
              (template_app (template_hole 3, template_var 2),
               template_var 1)),
           template_var 0)),
       template_app
        (template_app
          (template_hole 2, template_app (template_hole 1, template_var 1)),
         t_empty))),
    ("Floatarith_Expression.fold_const_fa_subst_eq_Num0_iff",
     "(fold_const_fa (subst_floatarith (%x. floatarith.Var (?s x)) ?fa) =
       floatarith.Num ?x) =
      (fold_const_fa ?fa = floatarith.Num ?x)",
     template_bimplication
      (template_equation
        (template_app
          (template_hole 3,
           template_app
            (template_app (template_hole 2, t_empty), template_var 1)),
         template_app (template_hole 0, template_var 0)),
       template_equation
        (template_app (template_hole 3, template_var 1),
         template_app (template_hole 0, template_var 0)))),
    ("Floatarith_Expression.interpret_floatarith_Norm",
     "interpret_floatarith (Norm ?xs) ?vs =
      L2_set (%i. interpret_floatarith (?xs ! i) ?vs) {0..<length ?xs}",
     template_equation
      (template_app
        (template_app
          (template_hole 6, template_app (template_hole 5, template_var 1)),
         template_var 0),
       template_app
        (template_app (template_hole 4, t_empty),
         template_app
          (template_app (template_hole 2, template_hole 1),
           template_app (template_hole 0, template_var 1))))),
    ("Floatarith_Expression.take_eq_map_nth",
     "?n < length ?xs ==> take ?n ?xs = map ((!) ?xs) [0..<?n]",
     template_implication
      ([template_inequation
         (less_than, template_var 1,
          template_app (template_hole 6, template_var 0))],
       template_equation
        (template_app
          (template_app (template_hole 4, template_var 1), template_var 0),
         template_app
          (template_app
            (template_hole 3,
             template_app (template_hole 2, template_var 0)),
           template_app
            (template_app (template_hole 1, template_hole 0),
             template_var 1))))),
    ("Floatarith_Expression.map_nth_eq_take",
     "?n < length ?xs ==> map ((!) ?xs) [0..<?n] = take ?n ?xs",
     template_implication
      ([template_inequation
         (less_than, template_var 1,
          template_app (template_hole 6, template_var 0))],
       template_equation
        (template_app
          (template_app
            (template_hole 4,
             template_app (template_hole 3, template_var 0)),
           template_app
            (template_app (template_hole 2, template_hole 1),
             template_var 1)),
         template_app
          (template_app (template_hole 0, template_var 1),
           template_var 0)))),
    ("Floatarith_Expression.freshs_floatariths_freshs_floatarithI",
     "(!!fa. fa : set ?fas ==> freshs_floatarith fa ?xs) ==>
      freshs_floatariths ?fas ?xs",
     template_implication
      ([template_predicate (template_app (template_hole 5, t_empty))],
       template_predicate
        (
           template_app
            (template_app (template_hole 0, template_var 1), template_var 0)
           ))),
    ("Floatarith_Expression.isDERIV_max_VarI",
     "[| max_Var_floatarith ?fa <= ?i; isDERIV ?j ?fa ?xs |]
      ==> isDERIV ?i ?fa ?xs",
     template_implication
      ([template_inequation
         (less_equals, template_app (template_hole 1, template_var 3),
          template_var 2),
        template_predicate
         (
            template_app
             (template_app
               (template_app (template_hole 0, template_var 1),
                template_var 3),
              template_var 0)
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_app (template_hole 0, template_var 2),
               template_var 3),
             template_var 0)
           ))),
    ("Floatarith_Expression.interpret_floatariths_nth",
     "?n < length ?fas ==>
      interpret_floatariths ?fas ?xs ! ?n =
      interpret_floatarith (?fas ! ?n) ?xs",
     template_implication
      ([template_inequation
         (less_than, template_var 2,
          template_app (template_hole 5, template_var 1))],
       template_equation
        (template_app
          (template_app
            (template_hole 3,
             template_app
              (template_app (template_hole 2, template_var 1),
               template_var 0)),
           template_var 2),
         template_app
          (template_app
            (template_hole 1,
             template_app
              (template_app (template_hole 0, template_var 1),
               template_var 2)),
           template_var 0)))),
    ("Floatarith_Expression.max_Var_floatarith_inner_floatariths",
     "length ?f = length ?g ==>
      max_Var_floatarith (inner_floatariths ?f ?g) =
      max (max_Var_floatariths ?f) (max_Var_floatariths ?g)",
     template_implication
      ([template_equation
         (template_app (template_hole 4, template_var 1),
          template_app (template_hole 4, template_var 0))],
       template_equation
        (template_app
          (template_hole 3,
           template_app
            (template_app (template_hole 2, template_var 1),
             template_var 0)),
         template_app
          (template_app
            (template_hole 1,
             template_app (template_hole 0, template_var 1)),
           template_app (template_hole 0, template_var 0))))),
    ("Floatarith_Expression.interpret_floatarith_norm",
     "length ?x = DIM(?'a) ==>
      interpret_floatarith (Norm ?x) ?vs = norm (einterpret ?x ?vs)",
     template_implication
      ([template_equation
         (template_app (template_hole 8, template_var 1),
          template_app (template_hole 7, template_hole 6))],
       template_equation
        (template_app
          (template_app
            (template_hole 4,
             template_app (template_hole 3, template_var 1)),
           template_var 0),
         template_app
          (template_hole 2,
           template_app
            (template_hole 1,
             template_app
              (template_app (template_hole 0, template_var 1),
               template_var 0)))))),
    ("Floatarith_Expression.freshs_floatarith_max_Var_floatarithI",
     "(!!x. x : set ?xs ==> max_Var_floatarith ?f <= x) ==>
      freshs_floatarith ?f ?xs",
     template_implication
      ([template_predicate (template_app (template_hole 6, t_empty))],
       template_predicate
        (
           template_app
            (template_app (template_hole 0, template_var 0), template_var 1)
           ))),
    ("Floatarith_Expression.freshs_floatariths_max_Var_floatarithsI",
     "(!!x. x : set ?xs ==> max_Var_floatariths ?f <= x) ==>
      freshs_floatariths ?f ?xs",
     template_implication
      ([template_predicate (template_app (template_hole 6, t_empty))],
       template_predicate
        (
           template_app
            (template_app (template_hole 0, template_var 0), template_var 1)
           ))),
    ("Floatarith_Expression.dest_Num_fa_Some",
     "[| dest_Num_fa ?fa = Some ?x; ?fa = floatarith.Num ?x ==> ?P |]
      ==> ?P",
     template_implication
      ([template_equation
         (template_app (template_hole 3, template_var 2),
          template_app (template_hole 2, template_var 1)),
        template_implication
         ([template_equation
            (template_var 2,
             template_app (template_hole 0, template_var 1))],
          template_predicate (template_var 0))],
       template_predicate (template_var 0))),
    ("Floatarith_Expression.max_Var_floatarith_FDERIV_floatarith",
     "length ?xs = length ?d ==>
      max_Var_floatarith (FDERIV_floatarith ?fa ?xs ?d)
      <= max (max_Var_floatarith ?fa) (max_Var_floatariths ?d)",
     template_implication
      ([template_equation
         (template_app (template_hole 6, template_var 2),
          template_app (template_hole 5, template_var 1))],
       template_inequation
        (less_equals,
         template_app
          (template_hole 3,
           template_app
            (template_app
              (template_app (template_hole 2, template_var 0),
               template_var 2),
             template_var 1)),
         template_app
          (template_app
            (template_hole 1,
             template_app (template_hole 3, template_var 0)),
           template_app (template_hole 0, template_var 1))))),
    ("Floatarith_Expression.max_Var_floatarith_FDERIV_floatariths",
     "length ?xs = length ?d ==>
      max_Var_floatariths (FDERIV_floatariths ?fa ?xs ?d)
      <= max (max_Var_floatariths ?fa) (max_Var_floatariths ?d)",
     template_implication
      ([template_equation
         (template_app (template_hole 5, template_var 2),
          template_app (template_hole 4, template_var 1))],
       template_inequation
        (less_equals,
         template_app
          (template_hole 2,
           template_app
            (template_app
              (template_app (template_hole 1, template_var 0),
               template_var 2),
             template_var 1)),
         template_app
          (template_app
            (template_hole 0,
             template_app (template_hole 2, template_var 0)),
           template_app (template_hole 2, template_var 1))))),
    ("Floatarith_Expression.interpret_floatarith_eq_take_max_VarI",
     "take (max_Var_floatarith ?ra) ?ys =
      take (max_Var_floatarith ?ra) ?zs ==>
      interpret_floatarith ?ra ?ys = interpret_floatarith ?ra ?zs",
     template_implication
      ([template_equation
         (template_app
           (template_app
             (template_hole 3,
              template_app (template_hole 2, template_var 2)),
            template_var 1),
          template_app
           (template_app
             (template_hole 3,
              template_app (template_hole 2, template_var 2)),
            template_var 0))],
       template_equation
        (template_app
          (template_app (template_hole 0, template_var 2), template_var 1),
         template_app
          (template_app (template_hole 0, template_var 2),
           template_var 0)))),
    ("Floatarith_Expression.interpret_floatariths_eq_take_max_VarI",
     "take (max_Var_floatariths ?ea) ?ys =
      take (max_Var_floatariths ?ea) ?zs ==>
      interpret_floatariths ?ea ?ys = interpret_floatariths ?ea ?zs",
     template_implication
      ([template_equation
         (template_app
           (template_app
             (template_hole 2,
              template_app (template_hole 1, template_var 2)),
            template_var 1),
          template_app
           (template_app
             (template_hole 2,
              template_app (template_hole 1, template_var 2)),
            template_var 0))],
       template_equation
        (template_app
          (template_app (template_hole 0, template_var 2), template_var 1),
         template_app
          (template_app (template_hole 0, template_var 2),
           template_var 0)))),
    ("Floatarith_Expression.isFDERIV_approx",
     "[| bounded_by ?vs ?VS; isFDERIV_approx ?prec ?n ?xs ?fas ?VS |]
      ==> isFDERIV ?n ?xs ?fas ?vs",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 2, template_var 5),
              template_var 4)
            ),
        template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_app
                   (template_app (template_hole 1, template_var 3),
                    template_var 2),
                  template_var 1),
                template_var 0),
              template_var 4)
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_app
                (template_app (template_hole 0, template_var 2),
                 template_var 1),
               template_var 0),
             template_var 5)
           ))),
    ("Floatarith_Expression.continuous_on_min",
     "[| continuous_on ?A ?f; continuous_on ?A ?g |]
      ==> continuous_on ?A (%x. min (?f x) (?g x))",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 1, template_var 2),
              template_var 1)
            ),
        template_predicate
         (
            template_app
             (template_app (template_hole 1, template_var 2),
              template_var 0)
            )],
       template_predicate
        (
           template_app
            (template_app (template_hole 1, template_var 2), t_empty)
           ))),
    ("Floatarith_Expression.fresh_floatarith_fold_const_fa_Add",
     "[| fresh_floatarith (fold_const_fa ?a) ?i;
         fresh_floatarith (fold_const_fa ?b) ?i |]
      ==> fresh_floatarith (fold_const_fa (floatarith.Add ?a ?b)) ?i",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_hole 2,
                template_app (template_hole 1, template_var 2)),
              template_var 1)
            ),
        template_predicate
         (
            template_app
             (template_app
               (template_hole 2,
                template_app (template_hole 1, template_var 0)),
              template_var 1)
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 2,
               template_app
                (template_hole 1,
                 template_app
                  (template_app (template_hole 0, template_var 2),
                   template_var 0))),
             template_var 1)
           ))),
    ("Floatarith_Expression.fresh_floatarith_fold_const_fa_Mult",
     "[| fresh_floatarith (fold_const_fa ?a) ?i;
         fresh_floatarith (fold_const_fa ?b) ?i |]
      ==> fresh_floatarith (fold_const_fa (floatarith.Mult ?a ?b)) ?i",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_hole 2,
                template_app (template_hole 1, template_var 2)),
              template_var 1)
            ),
        template_predicate
         (
            template_app
             (template_app
               (template_hole 2,
                template_app (template_hole 1, template_var 0)),
              template_var 1)
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 2,
               template_app
                (template_hole 1,
                 template_app
                  (template_app (template_hole 0, template_var 2),
                   template_var 0))),
             template_var 1)
           ))),
    ("Floatarith_Expression.max_Var_floatarith_le_max_Var_floatariths_nthI",
     "[| ?n < length ?fas; max_Var_floatariths ?fas <= ?z |]
      ==> max_Var_floatarith (?fas ! ?n) <= ?z",
     template_implication
      ([template_inequation
         (less_than, template_var 2,
          template_app (template_hole 4, template_var 1)),
        template_inequation
         (less_equals, template_app (template_hole 2, template_var 1),
          template_var 0)],
       template_inequation
        (less_equals,
         template_app
          (template_hole 1,
           template_app
            (template_app (template_hole 0, template_var 1),
             template_var 2)),
         template_var 0))),
    ("Floatarith_Expression.max_Var_floatariths_lessI",
     "[| ?i < max_Var_floatarith (?fas ! ?j); ?j < length ?fas |]
      ==> ?i < max_Var_floatariths ?fas",
     template_implication
      ([template_inequation
         (less_than, template_var 2,
          template_app
           (template_hole 3,
            template_app
             (template_app (template_hole 2, template_var 1),
              template_var 0))),
        template_inequation
         (less_than, template_var 0,
          template_app (template_hole 1, template_var 1))],
       template_inequation
        (less_than, template_var 2,
         template_app (template_hole 0, template_var 1)))),
    ("Floatarith_Expression.max_Var_floatariths_map_minus",
     "max_Var_floatariths (map (%i. ?fa1.0 i - ?fa2.0 i) ?xs) =
      max (max_Var_floatariths (map ?fa1.0 ?xs))
       (max_Var_floatariths (map ?fa2.0 ?xs))",
     template_equation
      (template_app
        (template_hole 3,
         template_app
          (template_app (template_hole 2, t_empty), template_var 0)),
       template_app
        (template_app
          (template_hole 0,
           template_app
            (template_hole 3,
             template_app
              (template_app (template_hole 2, template_var 2),
               template_var 0))),
         template_app
          (template_hole 3,
           template_app
            (template_app (template_hole 2, template_var 1),
             template_var 0))))),
    ("Floatarith_Expression.max_Var_floatariths_map_plus",
     "max_Var_floatariths (map (%i. ?fa1.0 i + ?fa2.0 i) ?xs) =
      max (max_Var_floatariths (map ?fa1.0 ?xs))
       (max_Var_floatariths (map ?fa2.0 ?xs))",
     template_equation
      (template_app
        (template_hole 3,
         template_app
          (template_app (template_hole 2, t_empty), template_var 0)),
       template_app
        (template_app
          (template_hole 0,
           template_app
            (template_hole 3,
             template_app
              (template_app (template_hole 2, template_var 2),
               template_var 0))),
         template_app
          (template_hole 3,
           template_app
            (template_app (template_hole 2, template_var 1),
             template_var 0))))),
    ("Floatarith_Expression.max_Var_floatariths_map_times",
     "max_Var_floatariths (map (%i. ?fa1.0 i * ?fa2.0 i) ?xs) =
      max (max_Var_floatariths (map ?fa1.0 ?xs))
       (max_Var_floatariths (map ?fa2.0 ?xs))",
     template_equation
      (template_app
        (template_hole 3,
         template_app
          (template_app (template_hole 2, t_empty), template_var 0)),
       template_app
        (template_app
          (template_hole 0,
           template_app
            (template_hole 3,
             template_app
              (template_app (template_hole 2, template_var 2),
               template_var 0))),
         template_app
          (template_hole 3,
           template_app
            (template_app (template_hole 2, template_var 1),
             template_var 0))))),
    ("Floatarith_Expression.max_Var_floatariths_map_divide",
     "max_Var_floatariths (map (%i. ?fa1.0 i / ?fa2.0 i) ?xs) =
      max (max_Var_floatariths (map ?fa1.0 ?xs))
       (max_Var_floatariths (map ?fa2.0 ?xs))",
     template_equation
      (template_app
        (template_hole 3,
         template_app
          (template_app (template_hole 2, t_empty), template_var 0)),
       template_app
        (template_app
          (template_hole 0,
           template_app
            (template_hole 3,
             template_app
              (template_app (template_hole 2, template_var 2),
               template_var 0))),
         template_app
          (template_hole 3,
           template_app
            (template_app (template_hole 2, template_var 1),
             template_var 0))))),
    ("Floatarith_Expression.FDERIV_floatariths_nth",
     "?i < length ?fas ==>
      FDERIV_floatariths ?fas ?xs ?ds ! ?i =
      FDERIV_floatarith (?fas ! ?i) ?xs ?ds",
     template_implication
      ([template_inequation
         (less_than, template_var 3,
          template_app (template_hole 4, template_var 2))],
       template_equation
        (template_app
          (template_app
            (template_hole 2,
             template_app
              (template_app
                (template_app (template_hole 1, template_var 2),
                 template_var 1),
               template_var 0)),
           template_var 3),
         template_app
          (template_app
            (template_app
              (template_hole 0,
               template_app
                (template_app (template_hole 2, template_var 2),
                 template_var 3)),
             template_var 1),
           template_var 0)))),
    ("Floatarith_Expression.max_Var_floatarith_FDERIV_n_floatariths",
     "length ?xs = length ?d ==>
      max_Var_floatariths (FDERIV_n_floatariths ?fa ?xs ?d ?n)
      <= max (max_Var_floatariths ?fa) (max_Var_floatariths ?d)",
     template_implication
      ([template_equation
         (template_app (template_hole 5, template_var 3),
          template_app (template_hole 4, template_var 2))],
       template_inequation
        (less_equals,
         template_app
          (template_hole 2,
           template_app
            (template_app
              (template_app
                (template_app (template_hole 1, template_var 1),
                 template_var 3),
               template_var 2),
             template_var 0)),
         template_app
          (template_app
            (template_hole 0,
             template_app (template_hole 2, template_var 1)),
           template_app (template_hole 2, template_var 2))))),
    ("Floatarith_Expression.continuous_on_if_const",
     "[| continuous_on ?s ?f; continuous_on ?s ?g |]
      ==> continuous_on ?s (%x. if ?p then ?f x else ?g x)",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 1, template_var 3),
              template_var 2)
            ),
        template_predicate
         (
            template_app
             (template_app (template_hole 1, template_var 3),
              template_var 1)
            )],
       template_predicate
        (
           template_app
            (template_app (template_hole 1, template_var 3), t_empty)
           ))),
    ("Floatarith_Expression.isFDERIV_map_Var",
     "[| length ?ds = ?N; length ?xs = ?N |]
      ==> isFDERIV ?N ?xs (map floatarith.Var ?ds) ?vs",
     template_implication
      ([template_equation
         (template_app (template_hole 3, template_var 3), template_var 2),
        template_equation
         (template_app (template_hole 3, template_var 1), template_var 2)],
       template_predicate
        (
           template_app
            (template_app
              (template_app
                (template_app (template_hole 2, template_var 2),
                 template_var 1),
               template_app
                (template_app (template_hole 1, template_hole 0),
                 template_var 3)),
             template_var 0)
           ))),
    ("Floatarith_Expression.fresh_inner_floatariths",
     "length ?xs = length ?ys ==>
      fresh_floatarith (inner_floatariths ?xs ?ys) ?i =
      (fresh_floatariths ?xs ?i & fresh_floatariths ?ys ?i)",
     template_implication
      ([template_equation
         (template_app (template_hole 5, template_var 2),
          template_app (template_hole 5, template_var 1))],
       template_equation
        (template_app
          (template_app
            (template_hole 3,
             template_app
              (template_app (template_hole 2, template_var 2),
               template_var 1)),
           template_var 0),
         template_app
          (template_app
            (template_hole 1,
             template_app
              (template_app (template_hole 0, template_var 2),
               template_var 0)),
           template_app
            (template_app (template_hole 0, template_var 1),
             template_var 0))))),
    ("Floatarith_Expression.isFDERIV_open",
     "max_Var_floatariths ?fas <= DIM(?'a) ==>
      open {x. isFDERIV DIM(?'a) [0..<DIM(?'a)] ?fas (list_of_eucl x)}",
     template_implication
      ([template_inequation
         (less_equals, template_app (template_hole 8, template_var 0),
          template_app (template_hole 7, template_hole 6))],
       template_predicate
        (
           template_app
            (template_hole 5, template_app (template_hole 4, t_empty))
           ))),
    ("Floatarith_Expression.max_Var_floatariths_leI",
     "(!!i. i < length ?xs ==> max_Var_floatarith (?xs ! i) <= ?F) ==>
      max_Var_floatariths ?xs <= ?F",
     template_implication
      ([template_predicate (template_app (template_hole 7, t_empty))],
       template_inequation
        (less_equals, template_app (template_hole 0, template_var 1),
         template_var 0))),
    ("Floatarith_Expression.list_updates_list_of_eucl_of_env",
     "[| length ?xs = DIM(?'a); distinct ?xs |]
      ==> list_updates ?xs (list_of_eucl (eucl_of_env ?xs ?vs)) ?vs = ?vs",
     template_implication
      ([template_equation
         (template_app (template_hole 7, template_var 1),
          template_app (template_hole 6, template_hole 5)),
        template_predicate
         (template_app (template_hole 4, template_var 1))],
       template_equation
        (template_app
          (template_app
            (template_app (template_hole 2, template_var 1),
             template_app
              (template_hole 1,
               template_app
                (template_app (template_hole 0, template_var 1),
                 template_var 0))),
           template_var 0),
         template_var 0))),
    ("Floatarith_Expression.max_Var_floatarith_subst_floatarith_le",
     "[| max_Var_floatarith ?fa1 <= length ?xs1;
         max_Var_floatariths ?xs1 <= ?z |]
      ==> max_Var_floatarith (subst_floatarith ((!) ?xs1) ?fa1) <= ?z",
     template_implication
      ([template_inequation
         (less_equals, template_app (template_hole 4, template_var 2),
          template_app (template_hole 3, template_var 1)),
        template_inequation
         (less_equals, template_app (template_hole 2, template_var 1),
          template_var 0)],
       template_inequation
        (less_equals,
         template_app
          (template_hole 4,
           template_app
            (template_app
              (template_hole 1,
               template_app (template_hole 0, template_var 1)),
             template_var 2)),
         template_var 0))),
    ("Floatarith_Expression.FDERIV_n_floatariths_nth",
     "?i < length ?fas ==>
      FDERIV_n_floatariths ?fas ?xs ?ds ?n ! ?i =
      FDERIV_n_floatarith (?fas ! ?i) ?xs ?ds ?n",
     template_implication
      ([template_inequation
         (less_than, template_var 4,
          template_app (template_hole 4, template_var 3))],
       template_equation
        (template_app
          (template_app
            (template_hole 2,
             template_app
              (template_app
                (template_app
                  (template_app (template_hole 1, template_var 3),
                   template_var 2),
                 template_var 1),
               template_var 0)),
           template_var 4),
         template_app
          (template_app
            (template_app
              (template_app
                (template_hole 0,
                 template_app
                  (template_app (template_hole 2, template_var 3),
                   template_var 4)),
               template_var 2),
             template_var 1),
           template_var 0)))),
    ("Floatarith_Expression.max_Var_floatariths_mapI",
     "(!!x. x : set ?xs ==> max_Var_floatarith (?f x) <= ?m) ==>
      max_Var_floatariths (map ?f ?xs) <= ?m",
     template_implication
      ([template_predicate (template_app (template_hole 7, t_empty))],
       template_inequation
        (less_equals,
         template_app
          (template_hole 1,
           template_app
            (template_app (template_hole 0, template_var 1),
             template_var 2)),
         template_var 0))),
    ("Floatarith_Expression.isDERIV_fold_const_fa_plus",
     "[| isDERIV ?x (fold_const_fa ?fa) ?vs;
         isDERIV ?x (fold_const_fa ?fb) ?vs |]
      ==> isDERIV ?x (fold_const_fa (floatarith.Add ?fa ?fb)) ?vs",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app (template_hole 2, template_var 3),
                template_app (template_hole 1, template_var 2)),
              template_var 1)
            ),
        template_predicate
         (
            template_app
             (template_app
               (template_app (template_hole 2, template_var 3),
                template_app (template_hole 1, template_var 0)),
              template_var 1)
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_app (template_hole 2, template_var 3),
               template_app
                (template_hole 1,
                 template_app
                  (template_app (template_hole 0, template_var 2),
                   template_var 0))),
             template_var 1)
           ))),
    ("Floatarith_Expression.isDERIV_fold_const_fa_mult",
     "[| isDERIV ?x (fold_const_fa ?fa) ?vs;
         isDERIV ?x (fold_const_fa ?fb) ?vs |]
      ==> isDERIV ?x (fold_const_fa (floatarith.Mult ?fa ?fb)) ?vs",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app (template_hole 2, template_var 3),
                template_app (template_hole 1, template_var 2)),
              template_var 1)
            ),
        template_predicate
         (
            template_app
             (template_app
               (template_app (template_hole 2, template_var 3),
                template_app (template_hole 1, template_var 0)),
              template_var 1)
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_app (template_hole 2, template_var 3),
               template_app
                (template_hole 1,
                 template_app
                  (template_app (template_hole 0, template_var 2),
                   template_var 0))),
             template_var 1)
           ))),
    ("Floatarith_Expression.isDERIV_fold_const_fa_inverse",
     "[| isDERIV ?x (fold_const_fa ?fa) ?vs;
         interpret_floatarith ?fa ?vs ~= 0 |]
      ==> isDERIV ?x (fold_const_fa (floatarith.Inverse ?fa)) ?vs",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app (template_hole 6, template_var 2),
                template_app (template_hole 5, template_var 1)),
              template_var 0)
            ),
        template_negation
         (
            template_equation
             (template_app
               (template_app (template_hole 2, template_var 1),
                template_var 0),
              template_hole 1)
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_app (template_hole 6, template_var 2),
               template_app
                (template_hole 5,
                 template_app (template_hole 0, template_var 1))),
             template_var 0)
           ))),
    ("Floatarith_Expression.max_Var_floatariths_subst_floatarith_le",
     "[| max_Var_floatariths ?fas1 <= length ?xs1;
         max_Var_floatariths ?xs1 <= ?z |]
      ==> max_Var_floatariths (map (subst_floatarith ((!) ?xs1)) ?fas1)
          <= ?z",
     template_implication
      ([template_inequation
         (less_equals, template_app (template_hole 4, template_var 2),
          template_app (template_hole 3, template_var 1)),
        template_inequation
         (less_equals, template_app (template_hole 4, template_var 1),
          template_var 0)],
       template_inequation
        (less_equals,
         template_app
          (template_hole 4,
           template_app
            (template_app
              (template_hole 2,
               template_app
                (template_hole 1,
                 template_app (template_hole 0, template_var 1))),
             template_var 2)),
         template_var 0))),
    ("Floatarith_Expression.subst_floatarith_inner_floatariths",
     "length ?fs = length ?gs ==>
      subst_floatarith ?s (inner_floatariths ?fs ?gs) =
      inner_floatariths (map (subst_floatarith ?s) ?fs)
       (map (subst_floatarith ?s) ?gs)",
     template_implication
      ([template_equation
         (template_app (template_hole 4, template_var 2),
          template_app (template_hole 4, template_var 1))],
       template_equation
        (template_app
          (template_app (template_hole 2, template_var 0),
           template_app
            (template_app (template_hole 1, template_var 2),
             template_var 1)),
         template_app
          (template_app
            (template_hole 1,
             template_app
              (template_app
                (template_hole 0,
                 template_app (template_hole 2, template_var 0)),
               template_var 2)),
           template_app
            (template_app
              (template_hole 0,
               template_app (template_hole 2, template_var 0)),
             template_var 1))))),
    ("Floatarith_Expression.einterpret_nth",
     "length ?xs = DIM(?'a) ==>
      einterpret (map ((!) ?xs) [0..<DIM(?'a)]) ?vs = einterpret ?xs ?vs",
     template_implication
      ([template_equation
         (template_app (template_hole 9, template_var 1),
          template_app (template_hole 8, template_hole 7))],
       template_equation
        (template_app
          (template_hole 5,
           template_app
            (template_app
              (template_hole 4,
               template_app
                (template_app
                  (template_hole 3,
                   template_app (template_hole 2, template_var 1)),
                 template_app
                  (template_app (template_hole 1, template_hole 0),
                   template_app (template_hole 8, template_hole 7)))),
             template_var 0)),
         template_app
          (template_hole 5,
           template_app
            (template_app (template_hole 4, template_var 1),
             template_var 0))))),
    ("Floatarith_Expression.matrix_comp_has_derivative",
     "(?f has_derivative ?f') (at ?x within ?S) ==>
      ((%x. matrix (blinfun_apply (?f x))) has_derivative
       (%x. matrix (blinfun_apply (?f' x))))
       (at ?x within ?S)",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app (template_hole 4, template_var 3),
                template_var 2),
              template_app
               (template_app (template_hole 3, template_var 1),
                template_var 0))
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_app (template_hole 2, t_empty), t_empty),
             template_app
              (template_app (template_hole 3, template_var 1),
               template_var 0))
           ))),
    ("Floatarith_Expression.subst_floatarith_Var_max_Var_floatarith",
     "(!!i. i < max_Var_floatarith ?fa ==> ?s i = i) ==>
      subst_floatarith (%i. floatarith.Var (?s i)) ?fa = ?fa",
     template_implication
      ([template_predicate (template_app (template_hole 7, t_empty))],
       template_equation
        (template_app
          (template_app (template_hole 1, t_empty), template_var 1),
         template_var 1))),
    ("Floatarith_Expression.isnFDERIV_approx",
     "[| bounded_by ?vs ?VS;
         isnFDERIV_approx ?prec ?N ?fas ?xs ?ds ?VS ?n |]
      ==> isnFDERIV ?N ?fas ?xs ?ds ?vs ?n",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 2, template_var 7),
              template_var 6)
            ),
        template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_app
                   (template_app
                     (template_app
                       (template_app (template_hole 1, template_var 5),
                        template_var 4),
                      template_var 3),
                    template_var 2),
                  template_var 1),
                template_var 6),
              template_var 0)
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_app
                (template_app
                  (template_app
                    (template_app (template_hole 0, template_var 4),
                     template_var 3),
                   template_var 2),
                 template_var 1),
               template_var 7),
             template_var 0)
           ))),
    ("Floatarith_Expression.freshs_floatarith",
     "[| freshs_floatarith ?fa ?ds; length ?ds = length ?xs |]
      ==> interpret_floatarith ?fa (list_updates ?ds ?xs ?vs) =
          interpret_floatarith ?fa ?vs",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 6, template_var 3),
              template_var 2)
            ),
        template_equation
         (template_app (template_hole 4, template_var 2),
          template_app (template_hole 3, template_var 1))],
       template_equation
        (template_app
          (template_app (template_hole 1, template_var 3),
           template_app
            (template_app
              (template_app (template_hole 0, template_var 2),
               template_var 1),
             template_var 0)),
         template_app
          (template_app (template_hole 1, template_var 3),
           template_var 0)))),
    ("Floatarith_Expression.interpret_floatariths_take_eqI",
     "[| take ?n ?ys = take ?n ?zs; max_Var_floatariths ?ea <= ?n |]
      ==> interpret_floatariths ?ea ?ys = interpret_floatariths ?ea ?zs",
     template_implication
      ([template_equation
         (template_app
           (template_app (template_hole 3, template_var 3), template_var 2),
          template_app
           (template_app (template_hole 3, template_var 3),
            template_var 1)),
        template_inequation
         (less_equals, template_app (template_hole 1, template_var 0),
          template_var 3)],
       template_equation
        (template_app
          (template_app (template_hole 0, template_var 0), template_var 2),
         template_app
          (template_app (template_hole 0, template_var 0),
           template_var 1)))),
    ("Floatarith_Expression.einterpret_uminus",
     "einterpret (map (%i. - ?fa1.0 i) [0..<DIM(?'a)]) ?vs =
      - einterpret (map ?fa1.0 [0..<DIM(?'a)]) ?vs",
     template_equation
      (template_app
        (template_hole 8,
         template_app
          (template_app
            (template_hole 7,
             template_app
              (template_app (template_hole 6, t_empty),
               template_app
                (template_app (template_hole 4, template_hole 3),
                 template_app (template_hole 2, template_hole 1)))),
           template_var 0)),
       template_app
        (template_hole 0,
         template_app
          (template_hole 8,
           template_app
            (template_app
              (template_hole 7,
               template_app
                (template_app (template_hole 6, template_var 1),
                 template_app
                  (template_app (template_hole 4, template_hole 3),
                   template_app (template_hole 2, template_hole 1)))),
             template_var 0))))),
    ("Floatarith_Expression.interpret_floatarith_subst_floatarith",
     "max_Var_floatarith ?fa <= ?D ==>
      interpret_floatarith (subst_floatarith ?s ?fa) ?vs =
      interpret_floatarith ?fa
       (map (%i. interpret_floatarith (?s i) ?vs) [0..<?D])",
     template_implication
      ([template_inequation
         (less_equals, template_app (template_hole 6, template_var 3),
          template_var 2)],
       template_equation
        (template_app
          (template_app
            (template_hole 4,
             template_app
              (template_app (template_hole 3, template_var 1),
               template_var 3)),
           template_var 0),
         template_app
          (template_app (template_hole 4, template_var 3),
           template_app
            (template_app (template_hole 2, t_empty),
             template_app
              (template_app (template_hole 1, template_hole 0),
               template_var 2)))))),
    ("Floatarith_Expression.einterpret_fold_const_fa",
     "length ?xs = DIM(?'a) ==>
      einterpret (map (%i. fold_const_fa (?fa i)) ?xs) ?vs =
      einterpret (map ?fa ?xs) ?vs",
     template_implication
      ([template_equation
         (template_app (template_hole 7, template_var 2),
          template_app (template_hole 6, template_hole 5))],
       template_equation
        (template_app
          (template_hole 3,
           template_app
            (template_app
              (template_hole 2,
               template_app
                (template_app (template_hole 1, t_empty), template_var 2)),
             template_var 0)),
         template_app
          (template_hole 3,
           template_app
            (template_app
              (template_hole 2,
               template_app
                (template_app (template_hole 1, template_var 1),
                 template_var 2)),
             template_var 0))))),
    ("Floatarith_Expression.not_fresh_inner_floatariths",
     "length ?xs = length ?ys ==>
      (~ fresh_floatarith (inner_floatariths ?xs ?ys) ?i) =
      (~ fresh_floatariths ?xs ?i | ~ fresh_floatariths ?ys ?i)",
     template_implication
      ([template_equation
         (template_app (template_hole 6, template_var 2),
          template_app (template_hole 6, template_var 1))],
       template_equation
        (template_app
          (template_hole 4,
           template_app
            (template_app
              (template_hole 3,
               template_app
                (template_app (template_hole 2, template_var 2),
                 template_var 1)),
             template_var 0)),
         template_app
          (template_app
            (template_hole 1,
             template_app
              (template_hole 4,
               template_app
                (template_app (template_hole 0, template_var 2),
                 template_var 0))),
           template_app
            (template_hole 4,
             template_app
              (template_app (template_hole 0, template_var 1),
               template_var 0)))))),
    ("Floatarith_Expression.list_updates_idem",
     "(!!i. i : set ?X0.0 ==> i < length ?vs) ==>
      list_updates ?X0.0 (map ((!) ?vs) ?X0.0) ?vs = ?vs",
     template_implication
      ([template_predicate (template_app (template_hole 9, t_empty))],
       template_equation
        (template_app
          (template_app
            (template_app (template_hole 2, template_var 1),
             template_app
              (template_app
                (template_hole 1,
                 template_app (template_hole 0, template_var 0)),
               template_var 1)),
           template_var 0),
         template_var 0))),
    ("Floatarith_Expression.list_updates_nth_ge",
     "[| length ?vs <= ?x; length ?xs = length ?ys |]
      ==> list_updates ?xs ?ys ?vs ! ?x = ?vs ! ?x",
     template_implication
      ([template_inequation
         (less_equals, template_app (template_hole 5, template_var 3),
          template_var 2),
        template_equation
         (template_app (template_hole 3, template_var 1),
          template_app (template_hole 5, template_var 0))],
       template_equation
        (template_app
          (template_app
            (template_hole 1,
             template_app
              (template_app
                (template_app (template_hole 0, template_var 1),
                 template_var 0),
               template_var 3)),
           template_var 2),
         template_app
          (template_app (template_hole 1, template_var 3),
           template_var 2)))),
    ("Floatarith_Expression.interpret_floatarith_fresh_cong",
     "(!!i. ~ fresh_floatarith ?f i ==> ?xs ! i = ?ys ! i) ==>
      interpret_floatarith ?f ?ys = interpret_floatarith ?f ?xs",
     template_implication
      ([template_predicate (template_app (template_hole 6, t_empty))],
       template_equation
        (template_app
          (template_app (template_hole 0, template_var 2), template_var 0),
         template_app
          (template_app (template_hole 0, template_var 2),
           template_var 1)))),
    ("Floatarith_Expression.interpret_floatariths_fresh_cong",
     "(!!i. ~ fresh_floatariths ?f i ==> ?xs ! i = ?ys ! i) ==>
      interpret_floatariths ?f ?ys = interpret_floatariths ?f ?xs",
     template_implication
      ([template_predicate (template_app (template_hole 7, t_empty))],
       template_equation
        (template_app
          (template_app (template_hole 0, template_var 2), template_var 0),
         template_app
          (template_app (template_hole 0, template_var 2),
           template_var 1)))),
    ("Floatarith_Expression.interpret_floatarith_max_Var_cong",
     "(!!i. i < max_Var_floatarith ?f ==> ?xs ! i = ?ys ! i) ==>
      interpret_floatarith ?f ?ys = interpret_floatarith ?f ?xs",
     template_implication
      ([template_predicate (template_app (template_hole 6, t_empty))],
       template_equation
        (template_app
          (template_app (template_hole 0, template_var 2), template_var 0),
         template_app
          (template_app (template_hole 0, template_var 2),
           template_var 1)))),
    ("Floatarith_Expression.interpret_floatariths_max_Var_cong",
     "(!!i. i < max_Var_floatariths ?f ==> ?xs ! i = ?ys ! i) ==>
      interpret_floatariths ?f ?ys = interpret_floatariths ?f ?xs",
     template_implication
      ([template_predicate (template_app (template_hole 7, t_empty))],
       template_equation
        (template_app
          (template_app (template_hole 0, template_var 2), template_var 0),
         template_app
          (template_app (template_hole 0, template_var 2),
           template_var 1)))),
    ("Floatarith_Expression.interpret_form_max_Var_cong",
     "(!!i. i < max_Var_form ?f ==> ?xs ! i = ?ys ! i) ==>
      interpret_form ?f ?xs = interpret_form ?f ?ys",
     template_implication
      ([template_predicate (template_app (template_hole 7, t_empty))],
       template_equation
        (template_app
          (template_app (template_hole 0, template_var 2), template_var 1),
         template_app
          (template_app (template_hole 0, template_var 2),
           template_var 0)))),
    ("Floatarith_Expression.list_updates_nth_notmem",
     "[| length ?xs = length ?ys; ?i ~: set ?xs |]
      ==> list_updates ?xs ?ys ?vs ! ?i = ?vs ! ?i",
     template_implication
      ([template_equation
         (template_app (template_hole 7, template_var 3),
          template_app (template_hole 6, template_var 2)),
        template_negation
         (
            template_predicate
             (
                template_app
                 (template_app (template_hole 4, template_var 1),
                  template_app (template_hole 3, template_var 3))
                )
            )],
       template_equation
        (template_app
          (template_app
            (template_hole 1,
             template_app
              (template_app
                (template_app (template_hole 0, template_var 3),
                 template_var 2),
               template_var 0)),
           template_var 1),
         template_app
          (template_app (template_hole 1, template_var 0),
           template_var 1)))),
    ("Floatarith_Expression.fresh_floatarith_subst",
     "[| fresh_floatarith ?e ?x; ?x < length ?vs |]
      ==> interpret_floatarith ?e (map real_of_float (?vs[?x := ?v])) =
          interpret_floatarith ?e (map real_of_float ?vs)",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 7, template_var 3),
              template_var 2)
            ),
        template_inequation
         (less_than, template_var 2,
          template_app (template_hole 5, template_var 1))],
       template_equation
        (template_app
          (template_app (template_hole 3, template_var 3),
           template_app
            (template_app (template_hole 2, template_hole 1),
             template_app
              (template_app
                (template_app (template_hole 0, template_var 1),
                 template_var 2),
               template_var 0))),
         template_app
          (template_app (template_hole 3, template_var 3),
           template_app
            (template_app (template_hole 2, template_hole 1),
             template_var 1))))),
    ("Floatarith_Expression.nth_nth_eucl_of_env_inner",
     "[| ?b : Basis; length ?is = DIM(?'a) |]
      ==> ?vs ! (?is ! index Basis_list ?b) =
          eucl_of_env ?is ?vs \<bullet> ?b",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 11, template_var 2),
              template_hole 10)
            ),
        template_equation
         (template_app (template_hole 8, template_var 1),
          template_app (template_hole 7, template_hole 10))],
       template_equation
        (template_app
          (template_app (template_hole 5, template_var 0),
           template_app
            (template_app (template_hole 4, template_var 1),
             template_app
              (template_app (template_hole 3, template_hole 2),
               template_var 2))),
         template_app
          (template_app
            (template_hole 1,
             template_app
              (template_app (template_hole 0, template_var 1),
               template_var 0)),
           template_var 2)))),
    ("Floatarith_Expression.continuous_on_floatarith",
     "[| continuous_on_floatarith ?fa; length ?xs = DIM(?'a);
         distinct ?xs |]
      ==> continuous_on UNIV
           (%x. interpret_floatarith ?fa
                 (list_updates ?xs (list_of_eucl x) ?vs))",
     template_implication
      ([template_predicate
         (template_app (template_hole 10, template_var 2)),
        template_equation
         (template_app (template_hole 8, template_var 1),
          template_app (template_hole 7, template_hole 6)),
        template_predicate
         (template_app (template_hole 5, template_var 1))],
       template_predicate
        (
           template_app
            (template_app (template_hole 4, template_hole 3), t_empty)
           ))),
    ("Floatarith_Expression.open_form",
     "[| open_form ?f; length ?xs = DIM(?'a); distinct ?xs |]
      ==> open
           {x. interpret_form ?f (list_updates ?xs (list_of_eucl x) ?vs)}",
     template_implication
      ([template_predicate
         (template_app (template_hole 10, template_var 2)),
        template_equation
         (template_app (template_hole 8, template_var 1),
          template_app (template_hole 7, template_hole 6)),
        template_predicate
         (template_app (template_hole 5, template_var 1))],
       template_predicate
        (
           template_app
            (template_hole 4, template_app (template_hole 3, t_empty))
           ))),
    ("Floatarith_Expression.max_Var_floatariths_list_updateI",
     "[| max_Var_floatariths ?xs <= ?m; max_Var_floatarith ?v <= ?m;
         ?i < length ?xs |]
      ==> max_Var_floatariths (?xs[?i := ?v]) <= ?m",
     template_implication
      ([template_inequation
         (less_equals, template_app (template_hole 4, template_var 3),
          template_var 2),
        template_inequation
         (less_equals, template_app (template_hole 3, template_var 1),
          template_var 2),
        template_inequation
         (less_than, template_var 0,
          template_app (template_hole 1, template_var 3))],
       template_inequation
        (less_equals,
         template_app
          (template_hole 4,
           template_app
            (template_app
              (template_app (template_hole 0, template_var 3),
               template_var 0),
             template_var 1)),
         template_var 2))),
    ("Floatarith_Expression.isFDERIV_isDERIV_D",
     "[| isFDERIV ?n ?xs ?fas ?vs; ?i < ?n; ?j < ?n |]
      ==> isDERIV (?xs ! ?i) (?fas ! ?j) ?vs",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_app (template_hole 4, template_var 5),
                  template_var 4),
                template_var 3),
              template_var 2)
            ),
        template_inequation (less_than, template_var 1, template_var 5),
        template_inequation (less_than, template_var 0, template_var 5)],
       template_predicate
        (
           template_app
            (template_app
              (template_app
                (template_hole 2,
                 template_app
                  (template_app (template_hole 1, template_var 4),
                   template_var 1)),
               template_app
                (template_app (template_hole 0, template_var 3),
                 template_var 0)),
             template_var 2)
           ))),
    ("Floatarith_Expression.isFDERIV_uptD",
     "[| isFDERIV ?n [0..<?n] ?fas ?vs; ?i < ?n; ?j < ?n |]
      ==> isDERIV ?i (?fas ! ?j) ?vs",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_app (template_hole 5, template_var 4),
                  template_app
                   (template_app (template_hole 4, template_hole 3),
                    template_var 4)),
                template_var 3),
              template_var 2)
            ),
        template_inequation (less_than, template_var 1, template_var 4),
        template_inequation (less_than, template_var 0, template_var 4)],
       template_predicate
        (
           template_app
            (template_app
              (template_app (template_hole 1, template_var 1),
               template_app
                (template_app (template_hole 0, template_var 3),
                 template_var 0)),
             template_var 2)
           ))),
    ("Floatarith_Expression.map_nth_Cons_upt",
     "0 < ?a ==>
      map ((!) (?x # ?ys)) [?a..<?b] =
      map ((!) ?ys) [?a - Suc 0..<?b - Suc 0]",
     template_implication
      ([template_inequation (less_than, template_hole 7, template_var 3)],
       template_equation
        (template_app
          (template_app
            (template_hole 5,
             template_app
              (template_hole 4,
               template_app
                (template_app (template_hole 3, template_var 2),
                 template_var 1))),
           template_app
            (template_app (template_hole 2, template_var 3),
             template_var 0)),
         template_app
          (template_app
            (template_hole 5,
             template_app (template_hole 4, template_var 1)),
           template_app
            (template_app
              (template_hole 2,
               template_app
                (template_app (template_hole 1, template_var 3),
                 template_app (template_hole 0, template_hole 7))),
             template_app
              (template_app (template_hole 1, template_var 0),
               template_app (template_hole 0, template_hole 7))))))),
    ("Floatarith_Expression.max_Var_floatariths_mvult_fa",
     "[| length ?A = ?D * ?E; length ?B = ?E |]
      ==> max_Var_floatariths (mvmult_fa ?D ?E ?A ?B)
          <= max (max_Var_floatariths ?A) (max_Var_floatariths ?B)",
     template_implication
      ([template_equation
         (template_app (template_hole 5, template_var 3),
          template_app
           (template_app (template_hole 4, template_var 2),
            template_var 1)),
        template_equation
         (template_app (template_hole 5, template_var 0), template_var 1)],
       template_inequation
        (less_equals,
         template_app
          (template_hole 2,
           template_app
            (template_app
              (template_app
                (template_app (template_hole 1, template_var 2),
                 template_var 1),
               template_var 3),
             template_var 0)),
         template_app
          (template_app
            (template_hole 0,
             template_app (template_hole 2, template_var 3)),
           template_app (template_hole 2, template_var 0))))),
    ("Floatarith_Expression.fresh_FDERIV_floatarith",
     "[| fresh_floatarith ?ode_e ?i; fresh_floatariths ?ds ?i;
         length ?ds = DIM(?'a) |]
      ==> fresh_floatarith (FDERIV_floatarith ?ode_e [0..<DIM(?'a)] ?ds)
           ?i",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 8, template_var 2),
              template_var 1)
            ),
        template_predicate
         (
            template_app
             (template_app (template_hole 7, template_var 0),
              template_var 1)
            ),
        template_equation
         (template_app (template_hole 5, template_var 0),
          template_app (template_hole 4, template_hole 3))],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 8,
               template_app
                (template_app
                  (template_app (template_hole 2, template_var 2),
                   template_app
                    (template_app (template_hole 1, template_hole 0),
                     template_app (template_hole 4, template_hole 3))),
                 template_var 0)),
             template_var 1)
           ))),
    ("Floatarith_Expression.einterpret_scaleR",
     "einterpret (map (%i. ?fa1.0 * ?fa2.0 i) [0..<DIM(?'a)]) ?vs =
      interpret_floatarith ?fa1.0 ?vs *\<^sub>R
      einterpret (map ?fa2.0 [0..<DIM(?'a)]) ?vs",
     template_equation
      (template_app
        (template_hole 9,
         template_app
          (template_app
            (template_hole 8,
             template_app
              (template_app (template_hole 7, t_empty),
               template_app
                (template_app (template_hole 5, template_hole 4),
                 template_app (template_hole 3, template_hole 2)))),
           template_var 0)),
       template_app
        (template_app
          (template_hole 1,
           template_app
            (template_app (template_hole 0, template_var 2),
             template_var 0)),
         template_app
          (template_hole 9,
           template_app
            (template_app
              (template_hole 8,
               template_app
                (template_app (template_hole 7, template_var 1),
                 template_app
                  (template_app (template_hole 5, template_hole 4),
                   template_app (template_hole 3, template_hole 2)))),
             template_var 0))))),
    ("Floatarith_Expression.map_nth_append_upt",
     "length ?xs <= ?a ==>
      map ((!) (?xs @ ?ys)) [?a..<?b] =
      map ((!) ?ys) [?a - length ?xs..<?b - length ?xs]",
     template_implication
      ([template_inequation
         (less_equals, template_app (template_hole 6, template_var 3),
          template_var 2)],
       template_equation
        (template_app
          (template_app
            (template_hole 4,
             template_app
              (template_hole 3,
               template_app
                (template_app (template_hole 2, template_var 3),
                 template_var 1))),
           template_app
            (template_app (template_hole 1, template_var 2),
             template_var 0)),
         template_app
          (template_app
            (template_hole 4,
             template_app (template_hole 3, template_var 1)),
           template_app
            (template_app
              (template_hole 1,
               template_app
                (template_app (template_hole 0, template_var 2),
                 template_app (template_hole 6, template_var 3))),
             template_app
              (template_app (template_hole 0, template_var 0),
               template_app (template_hole 6, template_var 3))))))),
    ("Floatarith_Expression.isDERIV_max_Var_floatarithI",
     "[| isDERIV ?n ?f ?ys;
         !!i. i < max_Var_floatarith ?f ==> ?xs ! i = ?ys ! i |]
      ==> isDERIV ?n ?f ?xs",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app (template_hole 5, template_var 3),
                template_var 2),
              template_var 1)
            ),
        template_predicate (template_app (template_hole 4, t_empty))],
       template_predicate
        (
           template_app
            (template_app
              (template_app (template_hole 5, template_var 3),
               template_var 2),
             template_var 0)
           ))),
    ("Floatarith_Expression.isFDERIV_max_Var_cong",
     "(!!i. i < max_Var_floatariths ?fas ==> ?vs ! i = ?ws ! i) ==>
      isFDERIV ?n ?xs ?fas ?ws = isFDERIV ?n ?xs ?fas ?vs",
     template_implication
      ([template_predicate (template_app (template_hole 7, t_empty))],
       template_equation
        (template_app
          (template_app
            (template_app
              (template_app (template_hole 0, template_var 1),
               template_var 0),
             template_var 4),
           template_var 2),
         template_app
          (template_app
            (template_app
              (template_app (template_hole 0, template_var 1),
               template_var 0),
             template_var 4),
           template_var 3)))),
    ("Floatarith_Expression.not_fresh_FDERIV_floatarith",
     "[| ~ fresh_floatarith (FDERIV_floatarith ?ode_e [0..<DIM(?'a)] ?ds)
            ?i;
         length ?ds = DIM(?'a) |]
      ==> ~ fresh_floatarith ?ode_e ?i | ~ fresh_floatariths ?ds ?i",
     template_implication
      ([template_negation
         (
            template_predicate
             (
                template_app
                 (template_app
                   (template_hole 9,
                    template_app
                     (template_app
                       (template_app (template_hole 8, template_var 2),
                        template_app
                         (template_app (template_hole 7, template_hole 6),
                          template_app (template_hole 5, template_hole 4))),
                      template_var 1)),
                  template_var 0)
                )
            ),
        template_equation
         (template_app (template_hole 2, template_var 1),
          template_app (template_hole 5, template_hole 4))],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 1,
               template_app
                (template_hole 10,
                 template_app
                  (template_app (template_hole 9, template_var 2),
                   template_var 0))),
             template_app
              (template_hole 10,
               template_app
                (template_app (template_hole 0, template_var 1),
                 template_var 0)))
           ))),
    ("Floatarith_Expression.not_fresh_FDERIV_floatariths",
     "[| ~ fresh_floatariths (FDERIV_floatariths ?ode_e [0..<DIM(?'a)] ?ds)
            ?i;
         length ?ds = DIM(?'a) |]
      ==> ~ fresh_floatariths ?ode_e ?i | ~ fresh_floatariths ?ds ?i",
     template_implication
      ([template_negation
         (
            template_predicate
             (
                template_app
                 (template_app
                   (template_hole 8,
                    template_app
                     (template_app
                       (template_app (template_hole 7, template_var 2),
                        template_app
                         (template_app (template_hole 6, template_hole 5),
                          template_app (template_hole 4, template_hole 3))),
                      template_var 1)),
                  template_var 0)
                )
            ),
        template_equation
         (template_app (template_hole 1, template_var 1),
          template_app (template_hole 4, template_hole 3))],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 0,
               template_app
                (template_hole 9,
                 template_app
                  (template_app (template_hole 8, template_var 2),
                   template_var 0))),
             template_app
              (template_hole 9,
               template_app
                (template_app (template_hole 8, template_var 1),
                 template_var 0)))
           ))),
    ("Floatarith_Expression.interpret_floatarith_inner_eq",
     "length ?xs = length ?ys ==>
      interpret_floatarith (inner_floatariths ?xs ?ys) ?vs =
      (SUM i<length ?ys.
       interpret_floatariths ?xs ?vs ! i *
       interpret_floatariths ?ys ?vs ! i)",
     template_implication
      ([template_equation
         (template_app (template_hole 8, template_var 2),
          template_app (template_hole 8, template_var 1))],
       template_equation
        (template_app
          (template_app
            (template_hole 6,
             template_app
              (template_app (template_hole 5, template_var 2),
               template_var 1)),
           template_var 0),
         template_app
          (template_app (template_hole 4, t_empty),
           template_app
            (template_hole 0,
             template_app (template_hole 8, template_var 1)))))),
    ("Floatarith_Expression.subst_floatarith_Var_DERIV_floatarith",
     "(!!x. (x = ?n) = (?s x = ?n)) ==>
      subst_floatarith (%x. floatarith.Var (?s x))
       (DERIV_floatarith ?n ?fa) =
      DERIV_floatarith ?n
       (subst_floatarith (%x. floatarith.Var (?s x)) ?fa)",
     template_implication
      ([template_predicate (template_app (template_hole 7, t_empty))],
       template_equation
        (template_app
          (template_app (template_hole 2, t_empty),
           template_app
            (template_app (template_hole 0, template_var 2),
             template_var 0)),
         template_app
          (template_app (template_hole 0, template_var 2),
           template_app
            (template_app (template_hole 2, t_empty), template_var 0))))),
    ("Floatarith_Expression.Max_Image_distrib",
     "[| finite ?X; ?X ~= {} |]
      ==> (MAX x\<in>?X. max (?f1.0 x) (?f2.0 x)) =
          max (Max (?f1.0 ` ?X)) (Max (?f2.0 ` ?X))",
     template_implication
      ([template_predicate (template_app (template_hole 7, template_var 2)),
        template_negation
         (template_equation (template_var 2, template_hole 4))],
       template_equation
        (template_app
          (template_hole 2,
           template_app
            (template_app (template_hole 1, t_empty), template_var 2)),
         template_app
          (template_app
            (template_hole 0,
             template_app
              (template_hole 2,
               template_app
                (template_app (template_hole 1, template_var 1),
                 template_var 2))),
           template_app
            (template_hole 2,
             template_app
              (template_app (template_hole 1, template_var 0),
               template_var 2)))))),
    ("Floatarith_Expression.isFDERIV_max_Var_congI",
     "[| isFDERIV ?n ?xs ?fas ?vs;
         !!i. i < max_Var_floatariths ?fas ==> ?vs ! i = ?ws ! i |]
      ==> isFDERIV ?n ?xs ?fas ?ws",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_app (template_hole 5, template_var 4),
                  template_var 3),
                template_var 2),
              template_var 1)
            ),
        template_predicate (template_app (template_hole 4, t_empty))],
       template_predicate
        (
           template_app
            (template_app
              (template_app
                (template_app (template_hole 5, template_var 4),
                 template_var 3),
               template_var 2),
             template_var 0)
           ))),
    ("Floatarith_Expression.max_Var_floatariths_mmult_fa",
     "[| length ?A = ?D * ?E; length ?B = ?E * ?F |]
      ==> max_Var_floatariths (mmult_fa ?D ?E ?F ?A ?B)
          <= max (max_Var_floatariths ?A) (max_Var_floatariths ?B)",
     template_implication
      ([template_equation
         (template_app (template_hole 5, template_var 4),
          template_app
           (template_app (template_hole 4, template_var 3),
            template_var 2)),
        template_equation
         (template_app (template_hole 5, template_var 1),
          template_app
           (template_app (template_hole 4, template_var 2),
            template_var 0))],
       template_inequation
        (less_equals,
         template_app
          (template_hole 2,
           template_app
            (template_app
              (template_app
                (template_app
                  (template_app (template_hole 1, template_var 3),
                   template_var 2),
                 template_var 0),
               template_var 4),
             template_var 1)),
         template_app
          (template_app
            (template_hole 0,
             template_app (template_hole 2, template_var 4)),
           template_app (template_hole 2, template_var 1))))),
    ("Floatarith_Expression.isDERIV_FDERIV_floatariths",
     "[| isFDERIV ?N ?xs ?fas ?vs; isFDERIV ?N ?xs ?ds ?vs;
         length ?fas = length ?ds |]
      ==> isFDERIV ?N ?xs (FDERIV_floatariths ?fas ?xs ?ds) ?vs",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_app (template_hole 3, template_var 4),
                  template_var 3),
                template_var 2),
              template_var 1)
            ),
        template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_app (template_hole 3, template_var 4),
                  template_var 3),
                template_var 0),
              template_var 1)
            ),
        template_equation
         (template_app (template_hole 1, template_var 2),
          template_app (template_hole 1, template_var 0))],
       template_predicate
        (
           template_app
            (template_app
              (template_app
                (template_app (template_hole 3, template_var 4),
                 template_var 3),
               template_app
                (template_app
                  (template_app (template_hole 0, template_var 2),
                   template_var 3),
                 template_var 0)),
             template_var 1)
           ))),
    ("Floatarith_Expression.isFDERIV_imp_isFDERIV_FDERIV_n",
     "[| length ?fas = length ?ds; isFDERIV ?N ?xs ?fas ?vs;
         isFDERIV ?N ?xs ?ds ?vs |]
      ==> isFDERIV ?N ?xs (FDERIV_n_floatariths ?fas ?xs ?ds ?n) ?vs",
     template_implication
      ([template_equation
         (template_app (template_hole 2, template_var 5),
          template_app (template_hole 2, template_var 4)),
        template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_app (template_hole 1, template_var 3),
                  template_var 2),
                template_var 5),
              template_var 1)
            ),
        template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_app (template_hole 1, template_var 3),
                  template_var 2),
                template_var 4),
              template_var 1)
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_app
                (template_app (template_hole 1, template_var 3),
                 template_var 2),
               template_app
                (template_app
                  (template_app
                    (template_app (template_hole 0, template_var 5),
                     template_var 2),
                   template_var 4),
                 template_var 0)),
             template_var 1)
           ))),
    ("Floatarith_Expression.matrix_vector_mult_eq_list_of_eucl_nth",
     "?M *v ?v =
      (SUM i<CARD(?'m).
       (SUM j<CARD(?'n).
        list_of_eucl ?M ! (i * CARD(?'n) + j) *
        list_of_eucl ?v ! j) *\<^sub>R
       Basis_list ! i)",
     template_equation
      (template_app
        (template_app (template_hole 16, template_var 1), template_var 0),
       template_app
        (template_app (template_hole 15, t_empty),
         template_app
          (template_hole 4,
           template_app (template_hole 1, template_hole 0))))),
    ("Floatarith_Expression.interpret_floatarith_fresh_eqI",
     "(!!i. fresh_floatarith ?ea i |
            i < length ?ys & i < length ?zs & ?ys ! i = ?zs ! i) ==>
      interpret_floatarith ?ea ?ys = interpret_floatarith ?ea ?zs",
     template_implication
      ([template_predicate (template_app (template_hole 9, t_empty))],
       template_equation
        (template_app
          (template_app (template_hole 0, template_var 2), template_var 1),
         template_app
          (template_app (template_hole 0, template_var 2),
           template_var 0)))),
    ("Floatarith_Expression.interpret_floatariths_fresh_eqI",
     "(!!i. fresh_floatariths ?ea i |
            i < length ?ys & i < length ?zs & ?ys ! i = ?zs ! i) ==>
      interpret_floatariths ?ea ?ys = interpret_floatariths ?ea ?zs",
     template_implication
      ([template_predicate (template_app (template_hole 10, t_empty))],
       template_equation
        (template_app
          (template_app (template_hole 0, template_var 2), template_var 1),
         template_app
          (template_app (template_hole 0, template_var 2),
           template_var 0)))),
    ("Floatarith_Expression.isFDERIV_imp_isnFDERIV",
     "[| isFDERIV ?N ?xs ?fas ?vs; length ?fas = ?N; length ?xs = ?N;
         length ?ds = ?N |]
      ==> isnFDERIV ?N ?fas ?xs ?ds ?vs ?n",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_app (template_hole 4, template_var 5),
                  template_var 4),
                template_var 3),
              template_var 2)
            ),
        template_equation
         (template_app (template_hole 2, template_var 3), template_var 5),
        template_equation
         (template_app (template_hole 1, template_var 4), template_var 5),
        template_equation
         (template_app (template_hole 1, template_var 1), template_var 5)],
       template_predicate
        (
           template_app
            (template_app
              (template_app
                (template_app
                  (template_app
                    (template_app (template_hole 0, template_var 5),
                     template_var 3),
                   template_var 4),
                 template_var 1),
               template_var 2),
             template_var 0)
           ))),
    ("Floatarith_Expression.plain_floatarith_approx_not_None",
     "[| plain_floatarith ?N ?fa; ?N <= length ?XS;
         !!i. i < ?N ==> ?XS ! i ~= None |]
      ==> approx ?p ?fa ?XS ~= None",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 9, template_var 3),
              template_var 2)
            ),
        template_inequation
         (less_equals, template_var 3,
          template_app (template_hole 7, template_var 1)),
        template_predicate (template_app (template_hole 6, t_empty))],
       template_negation
        (
           template_equation
            (template_app
              (template_app
                (template_app (template_hole 0, template_var 0),
                 template_var 2),
               template_var 1),
             template_hole 1)
           ))),
    ("Floatarith_Expression.einterpret_minus",
     "einterpret (map (%i. ?fa1.0 i - ?fa2.0 i) [0..<DIM(?'a)]) ?vs =
      einterpret (map ?fa1.0 [0..<DIM(?'a)]) ?vs -
      einterpret (map ?fa2.0 [0..<DIM(?'a)]) ?vs",
     template_equation
      (template_app
        (template_hole 8,
         template_app
          (template_app
            (template_hole 7,
             template_app
              (template_app (template_hole 6, t_empty),
               template_app
                (template_app (template_hole 4, template_hole 3),
                 template_app (template_hole 2, template_hole 1)))),
           template_var 0)),
       template_app
        (template_app
          (template_hole 0,
           template_app
            (template_hole 8,
             template_app
              (template_app
                (template_hole 7,
                 template_app
                  (template_app (template_hole 6, template_var 2),
                   template_app
                    (template_app (template_hole 4, template_hole 3),
                     template_app (template_hole 2, template_hole 1)))),
               template_var 0))),
         template_app
          (template_hole 8,
           template_app
            (template_app
              (template_hole 7,
               template_app
                (template_app (template_hole 6, template_var 1),
                 template_app
                  (template_app (template_hole 4, template_hole 3),
                   template_app (template_hole 2, template_hole 1)))),
             template_var 0))))),
    ("Floatarith_Expression.einterpret_plus",
     "einterpret (map (%i. ?fa1.0 i + ?fa2.0 i) [0..<DIM(?'a)]) ?vs =
      einterpret (map ?fa1.0 [0..<DIM(?'a)]) ?vs +
      einterpret (map ?fa2.0 [0..<DIM(?'a)]) ?vs",
     template_equation
      (template_app
        (template_hole 8,
         template_app
          (template_app
            (template_hole 7,
             template_app
              (template_app (template_hole 6, t_empty),
               template_app
                (template_app (template_hole 4, template_hole 3),
                 template_app (template_hole 2, template_hole 1)))),
           template_var 0)),
       template_app
        (template_app
          (template_hole 0,
           template_app
            (template_hole 8,
             template_app
              (template_app
                (template_hole 7,
                 template_app
                  (template_app (template_hole 6, template_var 2),
                   template_app
                    (template_app (template_hole 4, template_hole 3),
                     template_app (template_hole 2, template_hole 1)))),
               template_var 0))),
         template_app
          (template_hole 8,
           template_app
            (template_app
              (template_hole 7,
               template_app
                (template_app (template_hole 6, template_var 1),
                 template_app
                  (template_app (template_hole 4, template_hole 3),
                   template_app (template_hole 2, template_hole 1)))),
             template_var 0))))),
    ("Floatarith_Expression.interpret_floatarith_FDERIV_floatarith_eq",
     "[| length ?xs = DIM(?'a); length ?ds = DIM(?'a) |]
      ==> interpret_floatarith (FDERIV_floatarith ?fa ?xs ?ds) ?vs =
          einterpret (map (%x. DERIV_floatarith x ?fa) ?xs) ?vs \<bullet>
          einterpret ?ds ?vs",
     template_implication
      ([template_equation
         (template_app (template_hole 11, template_var 3),
          template_app (template_hole 10, template_hole 9)),
        template_equation
         (template_app (template_hole 8, template_var 2),
          template_app (template_hole 10, template_hole 9))],
       template_equation
        (template_app
          (template_app
            (template_hole 6,
             template_app
              (template_app
                (template_app (template_hole 5, template_var 1),
                 template_var 3),
               template_var 2)),
           template_var 0),
         template_app
          (template_app
            (template_hole 4,
             template_app
              (template_hole 3,
               template_app
                (template_app
                  (template_hole 2,
                   template_app
                    (template_app (template_hole 1, t_empty),
                     template_var 3)),
                 template_var 0))),
           template_app
            (template_hole 3,
             template_app
              (template_app (template_hole 2, template_var 2),
               template_var 0)))))),
    ("Floatarith_Expression.list_updates_nth",
     "[| length ?xs = length ?ys; distinct ?xs |]
      ==> list_updates ?xs ?ys ?vs ! ?i =
          (if ?i < length ?vs & ?i : set ?xs then ?ys ! index ?xs ?i
           else ?vs ! ?i)",
     template_implication
      ([template_equation
         (template_app (template_hole 11, template_var 3),
          template_app (template_hole 10, template_var 2)),
        template_predicate
         (template_app (template_hole 9, template_var 3))],
       template_equation
        (template_app
          (template_app
            (template_hole 7,
             template_app
              (template_app
                (template_app (template_hole 6, template_var 3),
                 template_var 2),
               template_var 1)),
           template_var 0),
         template_app
          (template_app
            (template_app
              (template_hole 5,
               template_app
                (template_app
                  (template_hole 4,
                   template_app
                    (template_app (template_hole 3, template_var 0),
                     template_app (template_hole 10, template_var 1))),
                 template_app
                  (template_app (template_hole 2, template_var 0),
                   template_app (template_hole 1, template_var 3)))),
             template_app
              (template_app (template_hole 7, template_var 2),
               template_app
                (template_app (template_hole 0, template_var 3),
                 template_var 0))),
           template_app
            (template_app (template_hole 7, template_var 1),
             template_var 0))))),
    ("Floatarith_Expression.isDERIV_FDERIV_floatarith",
     "[| isDERIV ?x ?fa ?vs;
         !!i. i < length ?ds ==> isDERIV ?x (?ds ! i) ?vs;
         length ?xs = length ?ds |]
      ==> isDERIV ?x (FDERIV_floatarith ?fa ?xs ?ds) ?vs",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app (template_hole 7, template_var 4),
                template_var 3),
              template_var 2)
            ),
        template_predicate (template_app (template_hole 6, t_empty)),
        template_equation
         (template_app (template_hole 1, template_var 0),
          template_app (template_hole 4, template_var 1))],
       template_predicate
        (
           template_app
            (template_app
              (template_app (template_hole 7, template_var 4),
               template_app
                (template_app
                  (template_app (template_hole 0, template_var 3),
                   template_var 0),
                 template_var 1)),
             template_var 2)
           ))),
    ("Floatarith_Expression.subst_floatarith_Num",
     "[| subst_floatarith ?s ?fa = floatarith.Num ?y;
         ?fa = floatarith.Num ?y ==> ?P;
         !!n. [| ?fa = floatarith.Var n; floatarith.Num ?y = ?s n |]
              ==> ?P |]
      ==> ?P",
     template_implication
      ([template_equation
         (template_app
           (template_app (template_hole 3, template_var 3), template_var 2),
          template_app (template_hole 2, template_var 1)),
        template_implication
         ([template_equation
            (template_var 2,
             template_app (template_hole 2, template_var 1))],
          template_predicate (template_var 0)),
        template_predicate (template_app (template_hole 1, t_empty))],
       template_predicate (template_var 0))),
    ("Floatarith_Expression.interpret_floatarith_subst_floatarith_idem",
     "[| max_Var_floatarith ?fa <= length ?vs;
         !!j. j < max_Var_floatarith ?fa ==> ?vs ! ?s j = ?vs ! j |]
      ==> interpret_floatarith
           (subst_floatarith (%i. floatarith.Var (?s i)) ?fa) ?vs =
          interpret_floatarith ?fa ?vs",
     template_implication
      ([template_inequation
         (less_equals, template_app (template_hole 8, template_var 2),
          template_app (template_hole 7, template_var 1)),
        template_predicate (template_app (template_hole 6, t_empty))],
       template_equation
        (template_app
          (template_app
            (template_hole 2,
             template_app
              (template_app (template_hole 1, t_empty), template_var 2)),
           template_var 1),
         template_app
          (template_app (template_hole 2, template_var 2),
           template_var 1)))),
    ("Floatarith_Expression.eucl_of_list_interpret_floatariths_cong",
     "[| !!b. b : Basis ==>
              interpret_floatarith (?fa (index Basis_list b)) ?vs =
              ?y \<bullet> b;
         length ?xs = DIM(?'a) |]
      ==> einterpret (map ?fa [0..<DIM(?'a)]) ?vs = ?y",
     template_implication
      ([template_predicate (template_app (template_hole 17, t_empty)),
        template_equation
         (template_app (template_hole 7, template_var 0),
          template_app (template_hole 6, template_hole 14))],
       template_equation
        (template_app
          (template_hole 4,
           template_app
            (template_app
              (template_hole 3,
               template_app
                (template_app (template_hole 2, template_var 3),
                 template_app
                  (template_app (template_hole 1, template_hole 0),
                   template_app (template_hole 6, template_hole 14)))),
             template_var 2)),
         template_var 1))),
    ("Floatarith_Expression.list_updates_nth_less",
     "[| length ?xs = length ?ys; distinct ?xs; ?i < length ?vs |]
      ==> list_updates ?xs ?ys ?vs ! ?i =
          (if ?i : set ?xs then ?ys ! index ?xs ?i else ?vs ! ?i)",
     template_implication
      ([template_equation
         (template_app (template_hole 10, template_var 3),
          template_app (template_hole 9, template_var 2)),
        template_predicate (template_app (template_hole 8, template_var 3)),
        template_inequation
         (less_than, template_var 1,
          template_app (template_hole 9, template_var 0))],
       template_equation
        (template_app
          (template_app
            (template_hole 5,
             template_app
              (template_app
                (template_app (template_hole 4, template_var 3),
                 template_var 2),
               template_var 0)),
           template_var 1),
         template_app
          (template_app
            (template_app
              (template_hole 3,
               template_app
                (template_app (template_hole 2, template_var 1),
                 template_app (template_hole 1, template_var 3))),
             template_app
              (template_app (template_hole 5, template_var 2),
               template_app
                (template_app (template_hole 0, template_var 3),
                 template_var 1))),
           template_app
            (template_app (template_hole 5, template_var 0),
             template_var 1))))),
    ("Floatarith_Expression.fold_const_fa_Add_eq_NumE",
     "[| fold_const_fa (floatarith.Add ?a ?b) = floatarith.Num ?x;
         !!y z.
            [| fold_const_fa ?a = floatarith.Num y;
               fold_const_fa ?b = floatarith.Num z; ?x = y + z |]
            ==> ?thesis |]
      ==> ?thesis",
     template_implication
      ([template_equation
         (template_app
           (template_hole 5,
            template_app
             (template_app (template_hole 4, template_var 3),
              template_var 2)),
          template_app (template_hole 3, template_var 1)),
        template_predicate (template_app (template_hole 2, t_empty))],
       template_predicate (template_var 0))),
    ("Floatarith_Expression.interpret_floatarith_inner_floatariths",
     "[| length ?xs = DIM(?'a); length ?ys = DIM(?'a);
         einterpret ?xs ?vs = ?x; einterpret ?ys ?vs = ?y |]
      ==> interpret_floatarith (inner_floatariths ?xs ?ys) ?vs =
          ?x \<bullet> ?y",
     template_implication
      ([template_equation
         (template_app (template_hole 9, template_var 4),
          template_app (template_hole 8, template_hole 7)),
        template_equation
         (template_app (template_hole 9, template_var 3),
          template_app (template_hole 8, template_hole 7)),
        template_equation
         (template_app
           (template_hole 5,
            template_app
             (template_app (template_hole 4, template_var 4),
              template_var 2)),
          template_var 1),
        template_equation
         (template_app
           (template_hole 5,
            template_app
             (template_app (template_hole 4, template_var 3),
              template_var 2)),
          template_var 0)],
       template_equation
        (template_app
          (template_app
            (template_hole 2,
             template_app
              (template_app (template_hole 1, template_var 4),
               template_var 3)),
           template_var 2),
         template_app
          (template_app (template_hole 0, template_var 1),
           template_var 0)))),
    ("Floatarith_Expression.isFDERIV_appendD1",
     "[| isFDERIV (?J + ?K) [0..<?J + ?K] (?es @ ?rs) ?xs; length ?es = ?J;
         length ?rs = ?K; max_Var_floatariths ?es <= ?J |]
      ==> isFDERIV ?J [0..<?J] ?es ?xs",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_app
                   (template_hole 8,
                    template_app
                     (template_app (template_hole 7, template_var 4),
                      template_var 3)),
                  template_app
                   (template_app (template_hole 6, template_hole 5),
                    template_app
                     (template_app (template_hole 7, template_var 4),
                      template_var 3))),
                template_app
                 (template_app (template_hole 4, template_var 2),
                  template_var 1)),
              template_var 0)
            ),
        template_equation
         (template_app (template_hole 2, template_var 2), template_var 4),
        template_equation
         (template_app (template_hole 2, template_var 1), template_var 3),
        template_inequation
         (less_equals, template_app (template_hole 0, template_var 2),
          template_var 4)],
       template_predicate
        (
           template_app
            (template_app
              (template_app
                (template_app (template_hole 8, template_var 4),
                 template_app
                  (template_app (template_hole 6, template_hole 5),
                   template_var 4)),
               template_var 2),
             template_var 0)
           ))),
    ("Floatarith_Expression.isDERIV_inner_iff",
     "length ?xs = length ?ys ==>
      isDERIV ?i (inner_floatariths ?xs ?ys) ?vs =
      ((ALL k<length ?xs. isDERIV ?i (?xs ! k) ?vs) &
       (ALL k<length ?ys. isDERIV ?i (?ys ! k) ?vs))",
     template_implication
      ([template_equation
         (template_app (template_hole 8, template_var 3),
          template_app (template_hole 8, template_var 2))],
       template_equation
        (template_app
          (template_app
            (template_app (template_hole 6, template_var 1),
             template_app
              (template_app (template_hole 5, template_var 3),
               template_var 2)),
           template_var 0),
         template_app
          (template_app
            (template_hole 4, template_app (template_hole 3, t_empty)),
           template_app (template_hole 3, t_empty))))),
    ("Floatarith_Expression.eventually_isFDERIV",
     "[| isFDERIV DIM(?'a) [0..<DIM(?'a)] ?fas (list_of_eucl ?x @ ?params);
         max_Var_floatariths ?fas <= DIM(?'a) + length ?params |]
      ==> \<forall>\<^sub>F x in at ?x.
             isFDERIV DIM(?'a) [0..<DIM(?'a)] ?fas
              (list_of_eucl x @ ?params)",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_app
                   (template_hole 13,
                    template_app (template_hole 12, template_hole 11)),
                  template_app
                   (template_app (template_hole 10, template_hole 9),
                    template_app (template_hole 12, template_hole 11))),
                template_var 2),
              template_app
               (template_app
                 (template_hole 8,
                  template_app (template_hole 7, template_var 1)),
                template_var 0))
            ),
        template_inequation
         (less_equals, template_app (template_hole 5, template_var 2),
          template_app
           (template_app
             (template_hole 4,
              template_app (template_hole 12, template_hole 11)),
            template_app (template_hole 3, template_var 0)))],
       template_predicate
        (
           template_app
            (template_app (template_hole 2, t_empty),
             template_app
              (template_app (template_hole 1, template_var 1),
               template_hole 0))
           ))),
    ("Floatarith_Expression.isFDERIV_I",
     "[| !!i j. [| i < ?n; j < ?n |] ==> isDERIV (?xs ! i) (?fas ! j) ?vs;
         length ?fas = ?n; length ?xs = ?n |]
      ==> isFDERIV ?n ?xs ?fas ?vs",
     template_implication
      ([template_predicate (template_app (template_hole 9, t_empty)),
        template_equation
         (template_app (template_hole 2, template_var 1), template_var 3),
        template_equation
         (template_app (template_hole 1, template_var 2), template_var 3)],
       template_predicate
        (
           template_app
            (template_app
              (template_app
                (template_app (template_hole 0, template_var 3),
                 template_var 2),
               template_var 1),
             template_var 0)
           ))),
    ("Floatarith_Expression.subst_floatarith_Minus",
     "[| subst_floatarith ?s ?fa = floatarith.Minus ?y;
         !!a. [| ?fa = floatarith.Minus a; ?y = subst_floatarith ?s a |]
              ==> ?P;
         !!n. [| ?fa = floatarith.Var n; floatarith.Minus ?y = ?s n |]
              ==> ?P |]
      ==> ?P",
     template_implication
      ([template_equation
         (template_app
           (template_app (template_hole 4, template_var 3), template_var 2),
          template_app (template_hole 3, template_var 1)),
        template_predicate (template_app (template_hole 2, t_empty)),
        template_predicate (template_app (template_hole 1, t_empty))],
       template_predicate (template_var 0))),
    ("Floatarith_Expression.Add_eq_subst_VarE",
     "[| floatarith.Add ?fa1.0 ?fa2.0 =
         subst_floatarith (%x. floatarith.Var (?s x)) ?fa;
         !!a1 a2.
            [| ?fa = floatarith.Add a1 a2;
               ?fa1.0 = subst_floatarith (%x. floatarith.Var (?s x)) a1;
               ?fa2.0 = subst_floatarith (%x. floatarith.Var (?s x)) a2 |]
            ==> ?thesis |]
      ==> ?thesis",
     template_implication
      ([template_equation
         (template_app
           (template_app (template_hole 3, template_var 4), template_var 3),
          template_app
           (template_app (template_hole 2, t_empty), template_var 1)),
        template_predicate (template_app (template_hole 0, t_empty))],
       template_predicate (template_var 0))),
    ("Floatarith_Expression.einterpret_mvmult_fa",
     "[| ?Dn = CARD(?'n); ?Dm = CARD(?'m);
         length ?A = CARD(?'n) * CARD(?'m); length ?B = CARD(?'m) |]
      ==> einterpret (mvmult_fa ?Dn ?Dm ?A ?B) ?vs =
          einterpret ?A ?vs *v einterpret ?B ?vs",
     template_implication
      ([template_equation
         (template_var 4,
          template_app (template_hole 12, template_hole 11)),
        template_equation
         (template_var 3, template_app (template_hole 10, template_hole 9)),
        template_equation
         (template_app (template_hole 8, template_var 2),
          template_app
           (template_app
             (template_hole 7,
              template_app (template_hole 12, template_hole 11)),
            template_app (template_hole 10, template_hole 9))),
        template_equation
         (template_app (template_hole 8, template_var 1),
          template_app (template_hole 10, template_hole 9))],
       template_equation
        (template_app
          (template_hole 5,
           template_app
            (template_app
              (template_hole 4,
               template_app
                (template_app
                  (template_app
                    (template_app (template_hole 3, template_var 4),
                     template_var 3),
                   template_var 2),
                 template_var 1)),
             template_var 0)),
         template_app
          (template_app
            (template_hole 2,
             template_app
              (template_hole 1,
               template_app
                (template_app (template_hole 4, template_var 2),
                 template_var 0))),
           template_app
            (template_hole 0,
             template_app
              (template_app (template_hole 4, template_var 1),
               template_var 0)))))),
    ("Floatarith_Expression.interpret_floatarith_eventually_isDERIV",
     "[| !!i j. i < DIM(?'a) ==> isDERIV i ?fa (list_of_eucl ?x @ ?params);
         max_Var_floatarith ?fa <= DIM(?'a) + length ?params |]
      ==> ALL i<DIM(?'a).
             \<forall>\<^sub>F x in at ?x.
                isDERIV i ?fa (list_of_eucl x @ ?params)",
     template_implication
      ([template_predicate (template_app (template_hole 17, t_empty)),
        template_inequation
         (less_equals, template_app (template_hole 7, template_var 2),
          template_app
           (template_app
             (template_hole 6,
              template_app (template_hole 13, template_hole 12)),
            template_app (template_hole 5, template_var 0)))],
       template_predicate (template_app (template_hole 4, t_empty)))),
    ("Floatarith_Expression.isDERIV_subst_Var_floatarith",
     "[| max_Var_floatarith ?fa <= length ?vs;
         !!j. j < max_Var_floatarith ?fa ==> ?vs ! ?s j = ?vs ! j;
         !!j. (?s j = ?i) = (j = ?i) |]
      ==> isDERIV ?i (subst_floatarith (%i. floatarith.Var (?s i)) ?fa)
           ?vs =
          isDERIV ?i ?fa ?vs",
     template_implication
      ([template_inequation
         (less_equals, template_app (template_hole 10, template_var 3),
          template_app (template_hole 9, template_var 2)),
        template_predicate (template_app (template_hole 8, t_empty)),
        template_predicate (template_app (template_hole 8, t_empty))],
       template_equation
        (template_app
          (template_app
            (template_app (template_hole 2, template_var 0),
             template_app
              (template_app (template_hole 1, t_empty), template_var 3)),
           template_var 2),
         template_app
          (template_app
            (template_app (template_hole 2, template_var 0),
             template_var 3),
           template_var 2)))),
    ("Floatarith_Expression.interpret_floatarith_FDERIV_floatarith_cong",
     "[| !!i. i < max_Var_floatarith ?f ==> ?rs ! i = ?qs ! i;
         length ?ds = length ?xs; length ?es = length ?xs;
         interpret_floatariths ?ds ?qs = interpret_floatariths ?es ?rs |]
      ==> interpret_floatarith (FDERIV_floatarith ?f ?xs ?ds) ?qs =
          interpret_floatarith (FDERIV_floatarith ?f ?xs ?es) ?rs",
     template_implication
      ([template_predicate (template_app (template_hole 12, t_empty)),
        template_equation
         (template_app (template_hole 5, template_var 2),
          template_app (template_hole 4, template_var 1)),
        template_equation
         (template_app (template_hole 5, template_var 0),
          template_app (template_hole 4, template_var 1)),
        template_equation
         (template_app
           (template_app (template_hole 2, template_var 2), template_var 3),
          template_app
           (template_app (template_hole 2, template_var 0),
            template_var 4))],
       template_equation
        (template_app
          (template_app
            (template_hole 1,
             template_app
              (template_app
                (template_app (template_hole 0, template_var 5),
                 template_var 1),
               template_var 2)),
           template_var 3),
         template_app
          (template_app
            (template_hole 1,
             template_app
              (template_app
                (template_app (template_hole 0, template_var 5),
                 template_var 1),
               template_var 0)),
           template_var 4)))),
    ("Floatarith_Expression.interpret_mvmult_nth",
     "[| ?D = CARD(?'n); ?E = CARD(?'m); length ?xs = ?D * ?E;
         length ?ys = ?E; ?n < CARD(?'n) |]
      ==> interpret_floatarith (mvmult_fa ?D ?E ?xs ?ys ! ?n) ?vs =
          (einterpret ?xs ?vs *v einterpret ?ys ?vs) \<bullet>
          Basis_list ! ?n",
     template_implication
      ([template_equation
         (template_var 5,
          template_app (template_hole 17, template_hole 16)),
        template_equation
         (template_var 4,
          template_app (template_hole 15, template_hole 14)),
        template_equation
         (template_app (template_hole 13, template_var 3),
          template_app
           (template_app (template_hole 12, template_var 5),
            template_var 4)),
        template_equation
         (template_app (template_hole 13, template_var 2), template_var 4),
        template_inequation
         (less_than, template_var 1,
          template_app (template_hole 17, template_hole 16))],
       template_equation
        (template_app
          (template_app
            (template_hole 9,
             template_app
              (template_app
                (template_hole 8,
                 template_app
                  (template_app
                    (template_app
                      (template_app (template_hole 7, template_var 5),
                       template_var 4),
                     template_var 3),
                   template_var 2)),
               template_var 1)),
           template_var 0),
         template_app
          (template_app
            (template_hole 6,
             template_app
              (template_app
                (template_hole 5,
                 template_app
                  (template_hole 4,
                   template_app
                    (template_app (template_hole 3, template_var 3),
                     template_var 0))),
               template_app
                (template_hole 2,
                 template_app
                  (template_app (template_hole 3, template_var 2),
                   template_var 0)))),
           template_app
            (template_app (template_hole 1, template_hole 0),
             template_var 1))))),
    ("Floatarith_Expression.list_of_eucl_coord_update",
     "[| length ?xs = DIM(?'a); distinct ?xs; ?i : Basis;
         !!n. n : set ?xs ==> n < length ?vs |]
      ==> list_updates ?xs
           (list_of_eucl (?x + (?p - ?x \<bullet> ?i) *\<^sub>R ?i)) ?vs =
          (list_updates ?xs (list_of_eucl ?x) ?vs)
          [?xs ! index Basis_list ?i := ?p]",
     template_implication
      ([template_equation
         (template_app (template_hole 20, template_var 4),
          template_app (template_hole 19, template_hole 18)),
        template_predicate
         (template_app (template_hole 17, template_var 4)),
        template_predicate
         (
            template_app
             (template_app (template_hole 16, template_var 3),
              template_hole 18)
            ),
        template_predicate (template_app (template_hole 15, t_empty))],
       template_equation
        (template_app
          (template_app
            (template_app (template_hole 9, template_var 4),
             template_app
              (template_hole 8,
               template_app
                (template_app (template_hole 7, template_var 1),
                 template_app
                  (template_app
                    (template_hole 6,
                     template_app
                      (template_app (template_hole 5, template_var 0),
                       template_app
                        (template_app (template_hole 4, template_var 1),
                         template_var 3))),
                   template_var 3)))),
           template_var 2),
         template_app
          (template_app
            (template_app
              (template_hole 3,
               template_app
                (template_app
                  (template_app (template_hole 9, template_var 4),
                   template_app (template_hole 8, template_var 1)),
                 template_var 2)),
             template_app
              (template_app (template_hole 2, template_var 4),
               template_app
                (template_app (template_hole 1, template_hole 0),
                 template_var 3))),
           template_var 0)))),
    ("Floatarith_Expression.interpret_floatarith_FDERIV_floatarith",
     "[| !!i j. i < DIM(?'a) ==> isDERIV i ?fa (list_of_eucl ?x);
         max_Var_floatarith ?fa <= DIM(?'a) |]
      ==> ((%x. interpret_floatarith ?fa (list_of_eucl x)) has_derivative
           (%d. interpret_floatarith
                 (FDERIV_floatarith ?fa [0..<DIM(?'a)]
                   (map floatarith.Var [DIM(?'a)..<2 * DIM(?'a)]))
                 (list_of_eucl ?x @ list_of_eucl d)))
           (at ?x)",
     template_implication
      ([template_predicate (template_app (template_hole 23, t_empty)),
        template_inequation
         (less_equals, template_app (template_hole 14, template_var 1),
          template_app (template_hole 19, template_hole 18))],
       template_predicate
        (
           template_app
            (template_app
              (template_app (template_hole 13, t_empty), t_empty),
             template_app
              (template_app (template_hole 1, template_var 0),
               template_hole 0))
           ))),
    ("Floatarith_Expression.subst_floatarith_Add",
     "[| subst_floatarith ?s ?fa = floatarith.Add ?x ?y;
         !!a b.
            [| ?fa = floatarith.Add a b; ?x = subst_floatarith ?s a;
               ?y = subst_floatarith ?s b |]
            ==> ?P;
         !!n. [| ?fa = floatarith.Var n; floatarith.Add ?x ?y = ?s n |]
              ==> ?P |]
      ==> ?P",
     template_implication
      ([template_equation
         (template_app
           (template_app (template_hole 4, template_var 4), template_var 3),
          template_app
           (template_app (template_hole 3, template_var 2),
            template_var 1)),
        template_predicate (template_app (template_hole 2, t_empty)),
        template_predicate (template_app (template_hole 1, t_empty))],
       template_predicate (template_var 0))),
    ("Floatarith_Expression.einterpret_mmult_fa",
     "[| ?Dn = CARD(?'n); ?Dm = CARD(?'m); ?Dl = CARD(?'l);
         length ?A = CARD(?'l) * CARD(?'m);
         length ?B = CARD(?'m) * CARD(?'n) |]
      ==> einterpret (mmult_fa ?Dl ?Dm ?Dn ?A ?B) ?vs =
          einterpret ?A ?vs ** einterpret ?B ?vs",
     template_implication
      ([template_equation
         (template_var 5,
          template_app (template_hole 14, template_hole 13)),
        template_equation
         (template_var 4,
          template_app (template_hole 12, template_hole 11)),
        template_equation
         (template_var 3, template_app (template_hole 10, template_hole 9)),
        template_equation
         (template_app (template_hole 8, template_var 2),
          template_app
           (template_app
             (template_hole 7,
              template_app (template_hole 10, template_hole 9)),
            template_app (template_hole 12, template_hole 11))),
        template_equation
         (template_app (template_hole 8, template_var 1),
          template_app
           (template_app
             (template_hole 7,
              template_app (template_hole 12, template_hole 11)),
            template_app (template_hole 14, template_hole 13)))],
       template_equation
        (template_app
          (template_hole 5,
           template_app
            (template_app
              (template_hole 4,
               template_app
                (template_app
                  (template_app
                    (template_app
                      (template_app (template_hole 3, template_var 3),
                       template_var 4),
                     template_var 5),
                   template_var 2),
                 template_var 1)),
             template_var 0)),
         template_app
          (template_app
            (template_hole 2,
             template_app
              (template_hole 1,
               template_app
                (template_app (template_hole 4, template_var 2),
                 template_var 0))),
           template_app
            (template_hole 0,
             template_app
              (template_app (template_hole 4, template_var 1),
               template_var 0)))))),
    ("Floatarith_Expression.subst_floatarith_Var_FDERIV_floatarith",
     "[| length ?xs = DIM(?'a); length ?ds = DIM(?'a);
         !!x y. x : set ?xs ==> (y = x) = (?s y = x) |]
      ==> subst_floatarith (%x. floatarith.Var (?s x))
           (FDERIV_floatarith ?fa ?xs ?ds) =
          FDERIV_floatarith
           (subst_floatarith (%x. floatarith.Var (?s x)) ?fa) ?xs
           (map (subst_floatarith (%x. floatarith.Var (?s x))) ?ds)",
     template_implication
      ([template_equation
         (template_app (template_hole 12, template_var 3),
          template_app (template_hole 11, template_hole 10)),
        template_equation
         (template_app (template_hole 9, template_var 2),
          template_app (template_hole 11, template_hole 10)),
        template_predicate (template_app (template_hole 8, t_empty))],
       template_equation
        (template_app
          (template_app (template_hole 3, t_empty),
           template_app
            (template_app
              (template_app (template_hole 1, template_var 0),
               template_var 3),
             template_var 2)),
         template_app
          (template_app
            (template_app
              (template_hole 1,
               template_app
                (template_app (template_hole 3, t_empty), template_var 0)),
             template_var 3),
           template_app
            (template_app
              (template_hole 0, template_app (template_hole 3, t_empty)),
             template_var 2))))),
    ("Floatarith_Expression.isDERIV_FDERIV_floatarith_linear",
     "[| !!k. k < DIM(?'a) ==> isDERIV ?i (DERIV_floatarith k ?fa) ?xs;
         max_Var_floatarith ?fa <= DIM(?'a); length ?xs = DIM(?'a);
         length ?hs = DIM(?'a) |]
      ==> isDERIV ?i
           (FDERIV_floatarith ?fa [0..<DIM(?'a)]
             (map floatarith.Var [DIM(?'a)..<2 * DIM(?'a)]))
           (?xs @ ?hs)",
     template_implication
      ([template_predicate (template_app (template_hole 20, t_empty)),
        template_inequation
         (less_equals, template_app (template_hole 12, template_var 2),
          template_app (template_hole 17, template_hole 16)),
        template_equation
         (template_app (template_hole 10, template_var 1),
          template_app (template_hole 17, template_hole 16)),
        template_equation
         (template_app (template_hole 10, template_var 0),
          template_app (template_hole 17, template_hole 16))],
       template_predicate
        (
           template_app
            (template_app
              (template_app (template_hole 15, template_var 3),
               template_app
                (template_app
                  (template_app (template_hole 9, template_var 2),
                   template_app
                    (template_app (template_hole 8, template_hole 7),
                     template_app (template_hole 17, template_hole 16))),
                 template_app
                  (template_app (template_hole 6, template_hole 5),
                   template_app
                    (template_app
                      (template_hole 8,
                       template_app (template_hole 17, template_hole 16)),
                     template_app
                      (template_app
                        (template_hole 4,
                         template_app
                          (template_hole 3,
                           template_app
                            (template_hole 2, template_hole 1))),
                       template_app
                        (template_hole 17, template_hole 16)))))),
             template_app
              (template_app (template_hole 0, template_var 1),
               template_var 0))
           ))),
    ("Floatarith_Expression.interpret_floatarith_FDERIV_floatariths",
     "[| isFDERIV DIM(?'a) [0..<DIM(?'a)] ?fas (list_of_eucl ?x);
         max_Var_floatariths ?fas <= DIM(?'a); length ?fas = DIM(?'a) |]
      ==> ((%x. einterpret ?fas (list_of_eucl x)) has_derivative
           (%d. einterpret
                 (FDERIV_floatariths ?fas [0..<DIM(?'a)]
                   (map floatarith.Var [DIM(?'a)..<2 * DIM(?'a)]))
                 (list_of_eucl ?x @ list_of_eucl d)))
           (at ?x)",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_app
                   (template_hole 22,
                    template_app (template_hole 21, template_hole 20)),
                  template_app
                   (template_app (template_hole 19, template_hole 18),
                    template_app (template_hole 21, template_hole 20))),
                template_var 1),
              template_app (template_hole 17, template_var 0))
            ),
        template_inequation
         (less_equals, template_app (template_hole 15, template_var 1),
          template_app (template_hole 21, template_hole 20)),
        template_equation
         (template_app (template_hole 13, template_var 1),
          template_app (template_hole 21, template_hole 20))],
       template_predicate
        (
           template_app
            (template_app
              (template_app (template_hole 12, t_empty), t_empty),
             template_app
              (template_app (template_hole 1, template_var 0),
               template_hole 0))
           ))),
    ("Floatarith_Expression.isDERIV_mvmult_fa_nth",
     "[| !!j. j < ?D * ?E ==> isDERIV ?i (?A ! j) ?xs;
         !!j. j < ?E ==> isDERIV ?i (?B ! j) ?xs; length ?A = ?D * ?E;
         length ?B = ?E; ?j < ?D |]
      ==> isDERIV ?i (mvmult_fa ?D ?E ?A ?B ! ?j) ?xs",
     template_implication
      ([template_predicate (template_app (template_hole 8, t_empty)),
        template_predicate (template_app (template_hole 8, t_empty)),
        template_equation
         (template_app (template_hole 1, template_var 3),
          template_app
           (template_app (template_hole 5, template_var 6),
            template_var 5)),
        template_equation
         (template_app (template_hole 1, template_var 1), template_var 5),
        template_inequation (less_than, template_var 0, template_var 6)],
       template_predicate
        (
           template_app
            (template_app
              (template_app (template_hole 4, template_var 4),
               template_app
                (template_app
                  (template_hole 3,
                   template_app
                    (template_app
                      (template_app
                        (template_app (template_hole 0, template_var 6),
                         template_var 5),
                       template_var 3),
                     template_var 1)),
                 template_var 0)),
             template_var 2)
           ))),
    ("Floatarith_Expression.isFDERIV_subst_Var_floatarith",
     "[| max_Var_floatariths ?fas <= length ?vs;
         !!j. j < max_Var_floatariths ?fas ==> ?vs ! ?s j = ?vs ! j;
         !!i j. i : set ?xs ==> (?s j = i) = (j = i) |]
      ==> isFDERIV ?n ?xs
           (map (subst_floatarith (%i. floatarith.Var (?s i))) ?fas) ?vs =
          isFDERIV ?n ?xs ?fas ?vs",
     template_implication
      ([template_inequation
         (less_equals, template_app (template_hole 13, template_var 4),
          template_app (template_hole 12, template_var 3)),
        template_predicate (template_app (template_hole 11, t_empty)),
        template_predicate (template_app (template_hole 11, t_empty))],
       template_equation
        (template_app
          (template_app
            (template_app
              (template_app (template_hole 3, template_var 0),
               template_var 1),
             template_app
              (template_app
                (template_hole 2, template_app (template_hole 1, t_empty)),
               template_var 4)),
           template_var 3),
         template_app
          (template_app
            (template_app
              (template_app (template_hole 3, template_var 0),
               template_var 1),
             template_var 4),
           template_var 3)))),
    ("Floatarith_Expression.eventually_isnFDERIV",
     "[| isnFDERIV DIM(?'a) ?fas [0..<DIM(?'a)] [DIM(?'a)..<2 * DIM(?'a)]
          (list_of_eucl ?x @ list_of_eucl ?d) ?n;
         max_Var_floatariths ?fas <= 2 * DIM(?'a) |]
      ==> \<forall>\<^sub>F x in at ?x.
             isnFDERIV DIM(?'a) ?fas [0..<DIM(?'a)]
              [DIM(?'a)..<2 * DIM(?'a)] (list_of_eucl x @ list_of_eucl ?d)
              ?n",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_app
                   (template_app
                     (template_app
                       (template_hole 15,
                        template_app (template_hole 14, template_hole 13)),
                      template_var 3),
                    template_app
                     (template_app (template_hole 12, template_hole 11),
                      template_app (template_hole 14, template_hole 13))),
                  template_app
                   (template_app
                     (template_hole 12,
                      template_app (template_hole 14, template_hole 13)),
                    template_app
                     (template_app
                       (template_hole 10,
                        template_app
                         (template_hole 9,
                          template_app (template_hole 8, template_hole 7))),
                      template_app (template_hole 14, template_hole 13)))),
                template_app
                 (template_app
                   (template_hole 6,
                    template_app (template_hole 5, template_var 2)),
                  template_app (template_hole 5, template_var 1))),
              template_var 0)
            ),
        template_inequation
         (less_equals, template_app (template_hole 3, template_var 3),
          template_app
           (template_app
             (template_hole 10,
              template_app
               (template_hole 9,
                template_app (template_hole 8, template_hole 7))),
            template_app (template_hole 14, template_hole 13)))],
       template_predicate
        (
           template_app
            (template_app (template_hole 2, t_empty),
             template_app
              (template_app (template_hole 1, template_var 2),
               template_hole 0))
           ))),
    ("Floatarith_Expression.isFDERIV_appendI1",
     "[| isFDERIV ?J [0..<?J] ?es ?xs;
         !!i j. [| i < ?J + ?K; j < ?K |] ==> isDERIV i (?rs ! j) ?xs;
         length ?es = ?J; length ?rs = ?K; max_Var_floatariths ?es <= ?J |]
      ==> isFDERIV (?J + ?K) [0..<?J + ?K] (?es @ ?rs) ?xs",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_app (template_hole 12, template_var 4),
                  template_app
                   (template_app (template_hole 11, template_hole 10),
                    template_var 4)),
                template_var 3),
              template_var 2)
            ),
        template_predicate (template_app (template_hole 9, t_empty)),
        template_equation
         (template_app (template_hole 3, template_var 3), template_var 4),
        template_equation
         (template_app (template_hole 3, template_var 0), template_var 1),
        template_inequation
         (less_equals, template_app (template_hole 1, template_var 3),
          template_var 4)],
       template_predicate
        (
           template_app
            (template_app
              (template_app
                (template_app
                  (template_hole 12,
                   template_app
                    (template_app (template_hole 7, template_var 4),
                     template_var 1)),
                 template_app
                  (template_app (template_hole 11, template_hole 10),
                   template_app
                    (template_app (template_hole 7, template_var 4),
                     template_var 1))),
               template_app
                (template_app (template_hole 0, template_var 3),
                 template_var 0)),
             template_var 2)
           ))),
    ("Floatarith_Expression.isDERIV_mmult_fa_nth",
     "[| !!j. j < ?D * ?E ==> isDERIV ?i (?A ! j) ?xs;
         !!j. j < ?E * ?F ==> isDERIV ?i (?B ! j) ?xs; length ?A = ?D * ?E;
         length ?B = ?E * ?F; ?j < ?D * ?F |]
      ==> isDERIV ?i (mmult_fa ?D ?E ?F ?A ?B ! ?j) ?xs",
     template_implication
      ([template_predicate (template_app (template_hole 8, t_empty)),
        template_predicate (template_app (template_hole 8, t_empty)),
        template_equation
         (template_app (template_hole 1, template_var 4),
          template_app
           (template_app (template_hole 5, template_var 7),
            template_var 6)),
        template_equation
         (template_app (template_hole 1, template_var 1),
          template_app
           (template_app (template_hole 5, template_var 6),
            template_var 2)),
        template_inequation
         (less_than, template_var 0,
          template_app
           (template_app (template_hole 5, template_var 7),
            template_var 2))],
       template_predicate
        (
           template_app
            (template_app
              (template_app (template_hole 4, template_var 5),
               template_app
                (template_app
                  (template_hole 3,
                   template_app
                    (template_app
                      (template_app
                        (template_app
                          (template_app (template_hole 0, template_var 7),
                           template_var 6),
                         template_var 2),
                       template_var 4),
                     template_var 1)),
                 template_var 0)),
             template_var 3)
           ))),
    ("Floatarith_Expression.interpret_floatarith_FDERIV_floatarith_append",
     "[| !!i j. i < DIM(?'a) ==> isDERIV i ?fa (list_of_eucl ?x @ ?params);
         max_Var_floatarith ?fa <= DIM(?'a) + length ?params |]
      ==> ((%x. interpret_floatarith ?fa
                 (list_of_eucl x @ ?params)) has_derivative
           (%d. interpret_floatarith
                 (FDERIV_floatarith ?fa [0..<DIM(?'a)]
                   (map floatarith.Var
                     [length ?params + DIM(?'a)..<
                      length ?params + 2 * DIM(?'a)]))
                 (list_of_eucl ?x @ ?params @ list_of_eucl d)))
           (at ?x)",
     template_implication
      ([template_predicate (template_app (template_hole 25, t_empty)),
        template_inequation
         (less_equals, template_app (template_hole 15, template_var 2),
          template_app
           (template_app
             (template_hole 14,
              template_app (template_hole 21, template_hole 20)),
            template_app (template_hole 13, template_var 0)))],
       template_predicate
        (
           template_app
            (template_app
              (template_app (template_hole 12, t_empty), t_empty),
             template_app
              (template_app (template_hole 1, template_var 1),
               template_hole 0))
           ))),
    ("Floatarith_Expression.subst_floatarith_Var_FDERIV_n_nth",
     "[| length ?xs = DIM(?'a); length ?ds = DIM(?'a);
         !!x y. x : set ?xs ==> (y = x) = (?s y = x); ?i < length ?fas |]
      ==> subst_floatarith (%x. floatarith.Var (?s x))
           (FDERIV_n_floatariths ?fas ?xs ?ds ?n ! ?i) =
          FDERIV_n_floatariths
           (map (subst_floatarith (%x. floatarith.Var (?s x))) ?fas) ?xs
           (map (subst_floatarith (%x. floatarith.Var (?s x))) ?ds) ?n !
          ?i",
     template_implication
      ([template_equation
         (template_app (template_hole 14, template_var 5),
          template_app (template_hole 13, template_hole 12)),
        template_equation
         (template_app (template_hole 11, template_var 4),
          template_app (template_hole 13, template_hole 12)),
        template_predicate (template_app (template_hole 10, t_empty)),
        template_inequation
         (less_than, template_var 2,
          template_app (template_hole 11, template_var 1))],
       template_equation
        (template_app
          (template_app (template_hole 4, t_empty),
           template_app
            (template_app
              (template_hole 2,
               template_app
                (template_app
                  (template_app
                    (template_app (template_hole 1, template_var 1),
                     template_var 5),
                   template_var 4),
                 template_var 0)),
             template_var 2)),
         template_app
          (template_app
            (template_hole 2,
             template_app
              (template_app
                (template_app
                  (template_app
                    (template_hole 1,
                     template_app
                      (template_app
                        (template_hole 0,
                         template_app (template_hole 4, t_empty)),
                       template_var 1)),
                   template_var 5),
                 template_app
                  (template_app
                    (template_hole 0,
                     template_app (template_hole 4, t_empty)),
                   template_var 4)),
               template_var 0)),
           template_var 2)))),
    ("Floatarith_Expression.fold_const_fa_Mult_eq_NumE",
     "[| fold_const_fa (floatarith.Mult ?a ?b) = floatarith.Num ?x;
         !!y z.
            [| fold_const_fa ?a = floatarith.Num y;
               fold_const_fa ?b = floatarith.Num z; ?x = y * z |]
            ==> ?thesis;
         !!y. [| fold_const_fa ?a = floatarith.Num 0; ?x = 0 |] ==> ?thesis;
         !!y. [| fold_const_fa ?b = floatarith.Num 0; ?x = 0 |]
              ==> ?thesis |]
      ==> ?thesis",
     template_implication
      ([template_equation
         (template_app
           (template_hole 8,
            template_app
             (template_app (template_hole 7, template_var 3),
              template_var 2)),
          template_app (template_hole 6, template_var 1)),
        template_predicate (template_app (template_hole 5, t_empty)),
        template_predicate (template_app (template_hole 2, t_empty)),
        template_predicate (template_app (template_hole 0, t_empty))],
       template_predicate (template_var 0))),
    ("Floatarith_Expression.interpret_floatarith_FDERIV_floatariths_append",
     "[| isFDERIV DIM(?'a) [0..<DIM(?'a)] ?fas (list_of_eucl ?x @ ?ramsch);
         max_Var_floatariths ?fas <= DIM(?'a) + length ?ramsch;
         length ?fas = DIM(?'a) |]
      ==> ((%x. einterpret ?fas (list_of_eucl x @ ?ramsch)) has_derivative
           (%d. einterpret
                 (FDERIV_floatariths ?fas [0..<DIM(?'a)]
                   (map floatarith.Var
                     [DIM(?'a) + length ?ramsch..<
                      2 * DIM(?'a) + length ?ramsch]))
                 (list_of_eucl ?x @ ?ramsch @ list_of_eucl d)))
           (at ?x)",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_app
                   (template_hole 24,
                    template_app (template_hole 23, template_hole 22)),
                  template_app
                   (template_app (template_hole 21, template_hole 20),
                    template_app (template_hole 23, template_hole 22))),
                template_var 2),
              template_app
               (template_app
                 (template_hole 19,
                  template_app (template_hole 18, template_var 1)),
                template_var 0))
            ),
        template_inequation
         (less_equals, template_app (template_hole 16, template_var 2),
          template_app
           (template_app
             (template_hole 15,
              template_app (template_hole 23, template_hole 22)),
            template_app (template_hole 14, template_var 0))),
        template_equation
         (template_app (template_hole 12, template_var 2),
          template_app (template_hole 23, template_hole 22))],
       template_predicate
        (
           template_app
            (template_app
              (template_app (template_hole 11, t_empty), t_empty),
             template_app
              (template_app (template_hole 1, template_var 1),
               template_hole 0))
           ))),
    ("Floatarith_Expression.interpret_floatarith_FDERIV_floatariths_eucl_of_env",
     "[| isFDERIV DIM(?'a) ?xs ?fas ?vs; freshs_floatariths ?fas ?ds;
         length ?ds = DIM(?'a); !!i. i : set ?xs ==> i < length ?vs;
         distinct ?xs; !!i. i : set ?ds ==> i < length ?vs; distinct ?ds |]
      ==> ((%x. einterpret ?fas
                 (list_updates ?xs (list_of_eucl x) ?vs)) has_derivative
           (%d. einterpret
                 (FDERIV_floatariths ?fas ?xs (map floatarith.Var ?ds))
                 (list_updates ?ds (list_of_eucl d) ?vs)))
           (at (eucl_of_env ?xs ?vs))",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_app
                   (template_hole 22,
                    template_app (template_hole 21, template_hole 20)),
                  template_var 3),
                template_var 2),
              template_var 1)
            ),
        template_predicate
         (
            template_app
             (template_app (template_hole 19, template_var 2),
              template_var 0)
            ),
        template_equation
         (template_app (template_hole 17, template_var 0),
          template_app (template_hole 21, template_hole 20)),
        template_predicate (template_app (template_hole 16, t_empty)),
        template_predicate
         (template_app (template_hole 11, template_var 3)),
        template_predicate (template_app (template_hole 16, t_empty)),
        template_predicate
         (template_app (template_hole 11, template_var 0))],
       template_predicate
        (
           template_app
            (template_app
              (template_app (template_hole 10, t_empty), t_empty),
             template_app
              (template_app
                (template_hole 2,
                 template_app
                  (template_app (template_hole 1, template_var 3),
                   template_var 1)),
               template_hole 0))
           ))),
    ("Floatarith_Expression.isFDERIV_FDERIV_floatariths_linear",
     "[| !!i j k.
            [| i < DIM(?'a); j < DIM(?'a); k < DIM(?'a) |]
            ==> isDERIV i (DERIV_floatarith k (?fas ! j)) ?xs;
         length ?fas = DIM(?'a); length ?xs = DIM(?'a);
         length ?hs = DIM(?'a); max_Var_floatariths ?fas <= DIM(?'a) |]
      ==> isFDERIV DIM(?'a) [0..<DIM(?'a)]
           (FDERIV_floatariths ?fas [0..<DIM(?'a)]
             (map floatarith.Var [DIM(?'a)..<2 * DIM(?'a)]))
           (?xs @ ?hs)",
     template_implication
      ([template_predicate (template_app (template_hole 23, t_empty)),
        template_equation
         (template_app (template_hole 14, template_var 2),
          template_app (template_hole 20, template_hole 19)),
        template_equation
         (template_app (template_hole 13, template_var 1),
          template_app (template_hole 20, template_hole 19)),
        template_equation
         (template_app (template_hole 13, template_var 0),
          template_app (template_hole 20, template_hole 19)),
        template_inequation
         (less_equals, template_app (template_hole 11, template_var 2),
          template_app (template_hole 20, template_hole 19))],
       template_predicate
        (
           template_app
            (template_app
              (template_app
                (template_app
                  (template_hole 10,
                   template_app (template_hole 20, template_hole 19)),
                 template_app
                  (template_app (template_hole 9, template_hole 8),
                   template_app (template_hole 20, template_hole 19))),
               template_app
                (template_app
                  (template_app (template_hole 7, template_var 2),
                   template_app
                    (template_app (template_hole 9, template_hole 8),
                     template_app (template_hole 20, template_hole 19))),
                 template_app
                  (template_app (template_hole 6, template_hole 5),
                   template_app
                    (template_app
                      (template_hole 9,
                       template_app (template_hole 20, template_hole 19)),
                     template_app
                      (template_app
                        (template_hole 4,
                         template_app
                          (template_hole 3,
                           template_app
                            (template_hole 2, template_hole 1))),
                       template_app
                        (template_hole 20, template_hole 19)))))),
             template_app
              (template_app (template_hole 0, template_var 1),
               template_var 0))
           ))),
    ("Floatarith_Expression.reify_example",
     "[?xs ! ?i * ?xs ! ?j, ?xs ! ?i + ?xs ! ?j powr sin (?xs ! 0),
       ?xs ! ?k + 2 / 3 * ?xs ! ?i * ?xs ! ?j] =
      interpret_floatariths
       [floatarith.Mult (floatarith.Var ?i) (floatarith.Var ?j),
        floatarith.Add (floatarith.Var ?i)
         (floatarith.Powr (floatarith.Var ?j)
           (floatarith.Cos
             (floatarith.Add
               (floatarith.Mult floatarith.Pi
                 (floatarith.Inverse (floatarith.Num (Float 2 0))))
               (floatarith.Minus (floatarith.Var 0))))),
        floatarith.Add (floatarith.Var ?k)
         (floatarith.Mult
           (floatarith.Mult
             (floatarith.Mult (floatarith.Num (Float 2 0))
               (floatarith.Inverse (floatarith.Num (Float 3 0))))
             (floatarith.Var ?i))
           (floatarith.Var ?j))]
       ?xs",
     template_equation
      (template_app
        (template_app
          (template_hole 27,
           template_app
            (template_app
              (template_hole 26,
               template_app
                (template_app (template_hole 25, template_var 3),
                 template_var 2)),
             template_app
              (template_app (template_hole 25, template_var 3),
               template_var 1))),
         template_app
          (template_app
            (template_hole 27,
             template_app
              (template_app
                (template_hole 24,
                 template_app
                  (template_app (template_hole 25, template_var 3),
                   template_var 2)),
               template_app
                (template_app
                  (template_hole 23,
                   template_app
                    (template_app (template_hole 25, template_var 3),
                     template_var 1)),
                 template_app
                  (template_hole 22,
                   template_app
                    (template_app (template_hole 25, template_var 3),
                     template_hole 21))))),
           template_app
            (template_app
              (template_hole 27,
               template_app
                (template_app
                  (template_hole 24,
                   template_app
                    (template_app (template_hole 25, template_var 3),
                     template_var 0)),
                 template_app
                  (template_app
                    (template_hole 26,
                     template_app
                      (template_app
                        (template_hole 26,
                         template_app
                          (template_app
                            (template_hole 20,
                             template_app
                              (template_hole 19,
                               template_app
                                (template_hole 18, template_hole 17))),
                           template_app
                            (template_hole 19,
                             template_app
                              (template_hole 16, template_hole 17)))),
                       template_app
                        (template_app (template_hole 25, template_var 3),
                         template_var 2))),
                   template_app
                    (template_app (template_hole 25, template_var 3),
                     template_var 1)))),
             template_hole 15))),
       template_app
        (template_app
          (template_hole 14,
           template_app
            (template_app
              (template_hole 13,
               template_app
                (template_app
                  (template_hole 12,
                   template_app (template_hole 11, template_var 2)),
                 template_app (template_hole 11, template_var 1))),
             template_app
              (template_app
                (template_hole 13,
                 template_app
                  (template_app
                    (template_hole 10,
                     template_app (template_hole 11, template_var 2)),
                   template_app
                    (template_app
                      (template_hole 9,
                       template_app (template_hole 11, template_var 1)),
                     template_app
                      (template_hole 8,
                       template_app
                        (template_app
                          (template_hole 10,
                           template_app
                            (template_app
                              (template_hole 12, template_hole 7),
                             template_app
                              (template_hole 6,
                               template_app
                                (template_hole 5,
                                 template_app
                                  (template_app
                                    (template_hole 4,
                                     template_app
(template_hole 3, template_app (template_hole 18, template_hole 17))),
                                   template_hole 2))))),
                         template_app
                          (template_hole 1,
                           template_app
                            (template_hole 11, template_hole 21))))))),
               template_app
                (template_app
                  (template_hole 13,
                   template_app
                    (template_app
                      (template_hole 10,
                       template_app (template_hole 11, template_var 0)),
                     template_app
                      (template_app
                        (template_hole 12,
                         template_app
                          (template_app
                            (template_hole 12,
                             template_app
                              (template_app
                                (template_hole 12,
                                 template_app
                                  (template_hole 5,
                                   template_app
                                    (template_app
(template_hole 4,
 template_app
  (template_hole 3, template_app (template_hole 18, template_hole 17))),
                                     template_hole 2))),
                               template_app
                                (template_hole 6,
                                 template_app
                                  (template_hole 5,
                                   template_app
                                    (template_app
(template_hole 4,
 template_app
  (template_hole 3, template_app (template_hole 16, template_hole 17))),
                                     template_hole 2))))),
                           template_app
                            (template_hole 11, template_var 2))),
                       template_app (template_hole 11, template_var 1)))),
                 template_hole 0)))),
         template_var 3))),
    ("Floatarith_Expression.interpret_floatarith_FDERIV_floatarith_eucl_of_env",
     "[| !!i. i < DIM(?'a) ==> isDERIV (?xs ! i) ?fa ?vs;
         freshs_floatarith ?fa ?ds; length ?xs = DIM(?'a);
         length ?ds = DIM(?'a); !!i. i : set ?xs ==> i < length ?vs;
         distinct ?xs; !!i. i : set ?ds ==> i < length ?vs; distinct ?ds |]
      ==> ((%x. interpret_floatarith ?fa
                 (list_updates ?xs (list_of_eucl x) ?vs)) has_derivative
           (%d. interpret_floatarith
                 (FDERIV_floatarith ?fa ?xs (map floatarith.Var ?ds))
                 (list_updates ?ds (list_of_eucl d) ?vs)))
           (at (eucl_of_env ?xs ?vs))",
     template_implication
      ([template_predicate (template_app (template_hole 23, t_empty)),
        template_predicate
         (
            template_app
             (template_app (template_hole 16, template_var 2),
              template_var 0)
            ),
        template_equation
         (template_app (template_hole 14, template_var 3),
          template_app (template_hole 20, template_hole 19)),
        template_equation
         (template_app (template_hole 14, template_var 0),
          template_app (template_hole 20, template_hole 19)),
        template_predicate (template_app (template_hole 23, t_empty)),
        template_predicate
         (template_app (template_hole 10, template_var 3)),
        template_predicate (template_app (template_hole 23, t_empty)),
        template_predicate
         (template_app (template_hole 10, template_var 0))],
       template_predicate
        (
           template_app
            (template_app
              (template_app (template_hole 9, t_empty), t_empty),
             template_app
              (template_app
                (template_hole 2,
                 template_app
                  (template_app (template_hole 1, template_var 3),
                   template_var 1)),
               template_hole 0))
           ))),
    ("Floatarith_Expression.interpret_floatariths_FDERIV_floatariths_cong",
     "[| length ?d1s = DIM(?'a); length ?d2s = DIM(?'a);
         length ?fas1.0 = length ?fas2.0; freshs_floatariths ?fas1.0 ?d1s;
         freshs_floatariths ?fas2.0 ?d2s;
         !!i. i < length ?fas1.0 ==>
              interpret_floatariths
               (map (%x. DERIV_floatarith x (?fas1.0 ! i)) [0..<DIM(?'a)])
               ?xs1.0 =
              interpret_floatariths
               (map (%x. DERIV_floatarith x (?fas2.0 ! i)) [0..<DIM(?'a)])
               ?xs2.0;
         !!i. i < DIM(?'a) ==> ?xs1.0 ! (?d1s ! i) = ?xs2.0 ! (?d2s ! i) |]
      ==> interpret_floatariths
           (FDERIV_floatariths ?fas1.0 [0..<DIM(?'a)]
             (map floatarith.Var ?d1s))
           ?xs1.0 =
          interpret_floatariths
           (FDERIV_floatariths ?fas2.0 [0..<DIM(?'a)]
             (map floatarith.Var ?d2s))
           ?xs2.0",
     template_implication
      ([template_equation
         (template_app (template_hole 18, template_var 5),
          template_app (template_hole 17, template_hole 16)),
        template_equation
         (template_app (template_hole 18, template_var 4),
          template_app (template_hole 17, template_hole 16)),
        template_equation
         (template_app (template_hole 15, template_var 3),
          template_app (template_hole 15, template_var 2)),
        template_predicate
         (
            template_app
             (template_app (template_hole 14, template_var 3),
              template_var 5)
            ),
        template_predicate
         (
            template_app
             (template_app (template_hole 14, template_var 2),
              template_var 4)
            ),
        template_predicate (template_app (template_hole 13, t_empty)),
        template_predicate (template_app (template_hole 13, t_empty))],
       template_equation
        (template_app
          (template_app
            (template_hole 10,
             template_app
              (template_app
                (template_app (template_hole 1, template_var 3),
                 template_app
                  (template_app (template_hole 6, template_hole 5),
                   template_app (template_hole 17, template_hole 16))),
               template_app
                (template_app (template_hole 9, template_hole 0),
                 template_var 5))),
           template_var 1),
         template_app
          (template_app
            (template_hole 10,
             template_app
              (template_app
                (template_app (template_hole 1, template_var 2),
                 template_app
                  (template_app (template_hole 6, template_hole 5),
                   template_app (template_hole 17, template_hole 16))),
               template_app
                (template_app (template_hole 9, template_hole 0),
                 template_var 4))),
           template_var 0)))),
    ("Floatarith_Expression.dest_Num_fa_None",
     "[| dest_Num_fa ?fa = None; !!v va. ?fa = floatarith.Add v va ==> ?P;
         !!v. ?fa = floatarith.Minus v ==> ?P;
         !!v va. ?fa = floatarith.Mult v va ==> ?P;
         !!v. ?fa = floatarith.Inverse v ==> ?P;
         !!v. ?fa = floatarith.Cos v ==> ?P;
         !!v. ?fa = floatarith.Arctan v ==> ?P;
         !!v. ?fa = floatarith.Abs v ==> ?P;
         !!v va. ?fa = floatarith.Max v va ==> ?P;
         !!v va. ?fa = floatarith.Min v va ==> ?P;
         ?fa = floatarith.Pi ==> ?P; !!v. ?fa = floatarith.Sqrt v ==> ?P;
         !!v. ?fa = floatarith.Exp v ==> ?P;
         !!v va. ?fa = floatarith.Powr v va ==> ?P;
         !!v. ?fa = floatarith.Ln v ==> ?P;
         !!v va. ?fa = v ^\<^sub>e va ==> ?P;
         !!v. ?fa = floatarith.Floor v ==> ?P;
         !!v. ?fa = floatarith.Var v ==> ?P |]
      ==> ?P",
     template_implication
      ([template_equation
         (template_app (template_hole 21, template_var 1),
          template_hole 20),
        template_predicate (template_app (template_hole 19, t_empty)),
        template_predicate (template_app (template_hole 19, t_empty)),
        template_predicate (template_app (template_hole 19, t_empty)),
        template_predicate (template_app (template_hole 19, t_empty)),
        template_predicate (template_app (template_hole 19, t_empty)),
        template_predicate (template_app (template_hole 19, t_empty)),
        template_predicate (template_app (template_hole 19, t_empty)),
        template_predicate (template_app (template_hole 19, t_empty)),
        template_predicate (template_app (template_hole 19, t_empty)),
        template_implication
         ([template_equation (template_var 1, template_hole 8)],
          template_predicate (template_var 0)),
        template_predicate (template_app (template_hole 19, t_empty)),
        template_predicate (template_app (template_hole 19, t_empty)),
        template_predicate (template_app (template_hole 19, t_empty)),
        template_predicate (template_app (template_hole 19, t_empty)),
        template_predicate (template_app (template_hole 19, t_empty)),
        template_predicate (template_app (template_hole 19, t_empty)),
        template_predicate (template_app (template_hole 3, t_empty))],
       template_predicate (template_var 0))),
    ("Floatarith_Expression.fold_const_fa_Minus",
     "[| fold_const_fa ?fa = floatarith.Minus ?y;
         !!fa1 fa2.
            [| ?fa = floatarith.Add fa1 fa2;
               floatarith.Minus ?y =
               (case dest_Num_fa (fold_const_fa fa1) of
                None =>
                  case dest_Num_fa (fold_const_fa fa2) of
                  None =>
                    floatarith.Add (fold_const_fa fa1) (fold_const_fa fa2)
                  | Some a =>
                      if a = 0 then fold_const_fa fa1
                      else floatarith.Add (fold_const_fa fa1)
                            (floatarith.Num a)
                | Some a =>
                    case dest_Num_fa (fold_const_fa fa2) of
                    None =>
                      if a = 0 then fold_const_fa fa2
                      else floatarith.Add (floatarith.Num a)
                            (fold_const_fa fa2)
                    | Some b => floatarith.Num (a + b)) |]
            ==> ?P;
         !!a. [| ?fa = floatarith.Minus a;
                 floatarith.Minus ?y =
                 (case fold_const_fa a of
                  floatarith.Add floatarith1 floatarith2 =>
                    floatarith.Minus
                     (floatarith.Add floatarith1 floatarith2)
                  | floatarith.Minus floatarith =>
                      floatarith.Minus (floatarith.Minus floatarith)
                  | floatarith.Mult floatarith1 floatarith2 =>
                      floatarith.Minus
                       (floatarith.Mult floatarith1 floatarith2)
                  | floatarith.Inverse floatarith =>
                      floatarith.Minus (floatarith.Inverse floatarith)
                  | floatarith.Cos floatarith =>
                      floatarith.Minus (floatarith.Cos floatarith)
                  | floatarith.Arctan floatarith =>
                      floatarith.Minus (floatarith.Arctan floatarith)
                  | floatarith.Abs floatarith =>
                      floatarith.Minus (floatarith.Abs floatarith)
                  | floatarith.Max floatarith1 floatarith2 =>
                      floatarith.Minus
                       (floatarith.Max floatarith1 floatarith2)
                  | floatarith.Min floatarith1 floatarith2 =>
                      floatarith.Minus
                       (floatarith.Min floatarith1 floatarith2)
                  | floatarith.Pi => floatarith.Minus floatarith.Pi
                  | floatarith.Sqrt floatarith =>
                      floatarith.Minus (floatarith.Sqrt floatarith)
                  | floatarith.Exp floatarith =>
                      floatarith.Minus (floatarith.Exp floatarith)
                  | floatarith.Powr floatarith1 floatarith2 =>
                      floatarith.Minus
                       (floatarith.Powr floatarith1 floatarith2)
                  | floatarith.Ln floatarith =>
                      floatarith.Minus (floatarith.Ln floatarith)
                  | floatarith ^\<^sub>e nat =>
                      floatarith.Minus (floatarith ^\<^sub>e nat)
                  | floatarith.Floor floatarith =>
                      floatarith.Minus (floatarith.Floor floatarith)
                  | floatarith.Var nat =>
                      floatarith.Minus (floatarith.Var nat)
                  | floatarith.Num x => floatarith.Num (- x)) |]
              ==> ?P;
         !!fa1 fa2.
            [| ?fa = floatarith.Mult fa1 fa2;
               floatarith.Minus ?y =
               (case dest_Num_fa (fold_const_fa fa1) of
                None =>
                  case dest_Num_fa (fold_const_fa fa2) of
                  None =>
                    floatarith.Mult (fold_const_fa fa1) (fold_const_fa fa2)
                  | Some a =>
                      if a = 0 then floatarith.Num 0
                      else if a = 1 then fold_const_fa fa1
                           else floatarith.Mult (fold_const_fa fa1)
                                 (floatarith.Num a)
                | Some a =>
                    case dest_Num_fa (fold_const_fa fa2) of
                    None =>
                      if a = 0 then floatarith.Num 0
                      else if a = 1 then fold_const_fa fa2
                           else floatarith.Mult (floatarith.Num a)
                                 (fold_const_fa fa2)
                    | Some b => floatarith.Num (a * b)) |]
            ==> ?P;
         !!a. [| ?fa = floatarith.Abs a;
                 floatarith.Minus ?y =
                 (case fold_const_fa a of
                  floatarith.Add floatarith1 floatarith2 =>
                    floatarith.Abs (floatarith.Add floatarith1 floatarith2)
                  | floatarith.Minus floatarith =>
                      floatarith.Abs (floatarith.Minus floatarith)
                  | floatarith.Mult floatarith1 floatarith2 =>
                      floatarith.Abs
                       (floatarith.Mult floatarith1 floatarith2)
                  | floatarith.Inverse floatarith =>
                      floatarith.Abs (floatarith.Inverse floatarith)
                  | floatarith.Cos floatarith =>
                      floatarith.Abs (floatarith.Cos floatarith)
                  | floatarith.Arctan floatarith =>
                      floatarith.Abs (floatarith.Arctan floatarith)
                  | floatarith.Abs floatarith =>
                      floatarith.Abs (floatarith.Abs floatarith)
                  | floatarith.Max floatarith1 floatarith2 =>
                      floatarith.Abs
                       (floatarith.Max floatarith1 floatarith2)
                  | floatarith.Min floatarith1 floatarith2 =>
                      floatarith.Abs
                       (floatarith.Min floatarith1 floatarith2)
                  | floatarith.Pi => floatarith.Abs floatarith.Pi
                  | floatarith.Sqrt floatarith =>
                      floatarith.Abs (floatarith.Sqrt floatarith)
                  | floatarith.Exp floatarith =>
                      floatarith.Abs (floatarith.Exp floatarith)
                  | floatarith.Powr floatarith1 floatarith2 =>
                      floatarith.Abs
                       (floatarith.Powr floatarith1 floatarith2)
                  | floatarith.Ln floatarith =>
                      floatarith.Abs (floatarith.Ln floatarith)
                  | floatarith ^\<^sub>e nat =>
                      floatarith.Abs (floatarith ^\<^sub>e nat)
                  | floatarith.Floor floatarith =>
                      floatarith.Abs (floatarith.Floor floatarith)
                  | floatarith.Var nat =>
                      floatarith.Abs (floatarith.Var nat)
                  | floatarith.Num x => floatarith.Num \<bar>x\<bar>) |]
              ==> ?P;
         !!a b.
            [| ?fa = floatarith.Max a b;
               floatarith.Minus ?y =
               (case fold_const_fa a of
                floatarith.Add floatarith1 floatarith2 =>
                  floatarith.Max (floatarith.Add floatarith1 floatarith2)
                   (fold_const_fa b)
                | floatarith.Minus floatarith =>
                    floatarith.Max (floatarith.Minus floatarith)
                     (fold_const_fa b)
                | floatarith.Mult floatarith1 floatarith2 =>
                    floatarith.Max (floatarith.Mult floatarith1 floatarith2)
                     (fold_const_fa b)
                | floatarith.Inverse floatarith =>
                    floatarith.Max (floatarith.Inverse floatarith)
                     (fold_const_fa b)
                | floatarith.Cos floatarith =>
                    floatarith.Max (floatarith.Cos floatarith)
                     (fold_const_fa b)
                | floatarith.Arctan floatarith =>
                    floatarith.Max (floatarith.Arctan floatarith)
                     (fold_const_fa b)
                | floatarith.Abs floatarith =>
                    floatarith.Max (floatarith.Abs floatarith)
                     (fold_const_fa b)
                | floatarith.Max floatarith1 floatarith2 =>
                    floatarith.Max (floatarith.Max floatarith1 floatarith2)
                     (fold_const_fa b)
                | floatarith.Min floatarith1 floatarith2 =>
                    floatarith.Max (floatarith.Min floatarith1 floatarith2)
                     (fold_const_fa b)
                | floatarith.Pi =>
                    floatarith.Max floatarith.Pi (fold_const_fa b)
                | floatarith.Sqrt floatarith =>
                    floatarith.Max (floatarith.Sqrt floatarith)
                     (fold_const_fa b)
                | floatarith.Exp floatarith =>
                    floatarith.Max (floatarith.Exp floatarith)
                     (fold_const_fa b)
                | floatarith.Powr floatarith1 floatarith2 =>
                    floatarith.Max (floatarith.Powr floatarith1 floatarith2)
                     (fold_const_fa b)
                | floatarith.Ln floatarith =>
                    floatarith.Max (floatarith.Ln floatarith)
                     (fold_const_fa b)
                | floatarith ^\<^sub>e nat =>
                    floatarith.Max (floatarith ^\<^sub>e nat)
                     (fold_const_fa b)
                | floatarith.Floor floatarith =>
                    floatarith.Max (floatarith.Floor floatarith)
                     (fold_const_fa b)
                | floatarith.Var nat =>
                    floatarith.Max (floatarith.Var nat) (fold_const_fa b)
                | floatarith.Num x =>
                    case fold_const_fa b of
                    floatarith.Add floatarith1 floatarith2 =>
                      floatarith.Max (floatarith.Num x)
                       (floatarith.Add floatarith1 floatarith2)
                    | floatarith.Minus floatarith =>
                        floatarith.Max (floatarith.Num x)
                         (floatarith.Minus floatarith)
                    | floatarith.Mult floatarith1 floatarith2 =>
                        floatarith.Max (floatarith.Num x)
                         (floatarith.Mult floatarith1 floatarith2)
                    | floatarith.Inverse floatarith =>
                        floatarith.Max (floatarith.Num x)
                         (floatarith.Inverse floatarith)
                    | floatarith.Cos floatarith =>
                        floatarith.Max (floatarith.Num x)
                         (floatarith.Cos floatarith)
                    | floatarith.Arctan floatarith =>
                        floatarith.Max (floatarith.Num x)
                         (floatarith.Arctan floatarith)
                    | floatarith.Abs floatarith =>
                        floatarith.Max (floatarith.Num x)
                         (floatarith.Abs floatarith)
                    | floatarith.Max floatarith1 floatarith2 =>
                        floatarith.Max (floatarith.Num x)
                         (floatarith.Max floatarith1 floatarith2)
                    | floatarith.Min floatarith1 floatarith2 =>
                        floatarith.Max (floatarith.Num x)
                         (floatarith.Min floatarith1 floatarith2)
                    | floatarith.Pi =>
                        floatarith.Max (floatarith.Num x) floatarith.Pi
                    | floatarith.Sqrt floatarith =>
                        floatarith.Max (floatarith.Num x)
                         (floatarith.Sqrt floatarith)
                    | floatarith.Exp floatarith =>
                        floatarith.Max (floatarith.Num x)
                         (floatarith.Exp floatarith)
                    | floatarith.Powr floatarith1 floatarith2 =>
                        floatarith.Max (floatarith.Num x)
                         (floatarith.Powr floatarith1 floatarith2)
                    | floatarith.Ln floatarith =>
                        floatarith.Max (floatarith.Num x)
                         (floatarith.Ln floatarith)
                    | floatarith ^\<^sub>e nat =>
                        floatarith.Max (floatarith.Num x)
                         (floatarith ^\<^sub>e nat)
                    | floatarith.Floor floatarith =>
                        floatarith.Max (floatarith.Num x)
                         (floatarith.Floor floatarith)
                    | floatarith.Var nat =>
                        floatarith.Max (floatarith.Num x)
                         (floatarith.Var nat)
                    | floatarith.Num y => floatarith.Num (max x y)) |]
            ==> ?P;
         !!a b.
            [| ?fa = floatarith.Min a b;
               floatarith.Minus ?y =
               (case fold_const_fa a of
                floatarith.Add floatarith1 floatarith2 =>
                  floatarith.Min (floatarith.Add floatarith1 floatarith2)
                   (fold_const_fa b)
                | floatarith.Minus floatarith =>
                    floatarith.Min (floatarith.Minus floatarith)
                     (fold_const_fa b)
                | floatarith.Mult floatarith1 floatarith2 =>
                    floatarith.Min (floatarith.Mult floatarith1 floatarith2)
                     (fold_const_fa b)
                | floatarith.Inverse floatarith =>
                    floatarith.Min (floatarith.Inverse floatarith)
                     (fold_const_fa b)
                | floatarith.Cos floatarith =>
                    floatarith.Min (floatarith.Cos floatarith)
                     (fold_const_fa b)
                | floatarith.Arctan floatarith =>
                    floatarith.Min (floatarith.Arctan floatarith)
                     (fold_const_fa b)
                | floatarith.Abs floatarith =>
                    floatarith.Min (floatarith.Abs floatarith)
                     (fold_const_fa b)
                | floatarith.Max floatarith1 floatarith2 =>
                    floatarith.Min (floatarith.Max floatarith1 floatarith2)
                     (fold_const_fa b)
                | floatarith.Min floatarith1 floatarith2 =>
                    floatarith.Min (floatarith.Min floatarith1 floatarith2)
                     (fold_const_fa b)
                | floatarith.Pi =>
                    floatarith.Min floatarith.Pi (fold_const_fa b)
                | floatarith.Sqrt floatarith =>
                    floatarith.Min (floatarith.Sqrt floatarith)
                     (fold_const_fa b)
                | floatarith.Exp floatarith =>
                    floatarith.Min (floatarith.Exp floatarith)
                     (fold_const_fa b)
                | floatarith.Powr floatarith1 floatarith2 =>
                    floatarith.Min (floatarith.Powr floatarith1 floatarith2)
                     (fold_const_fa b)
                | floatarith.Ln floatarith =>
                    floatarith.Min (floatarith.Ln floatarith)
                     (fold_const_fa b)
                | floatarith ^\<^sub>e nat =>
                    floatarith.Min (floatarith ^\<^sub>e nat)
                     (fold_const_fa b)
                | floatarith.Floor floatarith =>
                    floatarith.Min (floatarith.Floor floatarith)
                     (fold_const_fa b)
                | floatarith.Var nat =>
                    floatarith.Min (floatarith.Var nat) (fold_const_fa b)
                | floatarith.Num x =>
                    case fold_const_fa b of
                    floatarith.Add floatarith1 floatarith2 =>
                      floatarith.Min (floatarith.Num x)
                       (floatarith.Add floatarith1 floatarith2)
                    | floatarith.Minus floatarith =>
                        floatarith.Min (floatarith.Num x)
                         (floatarith.Minus floatarith)
                    | floatarith.Mult floatarith1 floatarith2 =>
                        floatarith.Min (floatarith.Num x)
                         (floatarith.Mult floatarith1 floatarith2)
                    | floatarith.Inverse floatarith =>
                        floatarith.Min (floatarith.Num x)
                         (floatarith.Inverse floatarith)
                    | floatarith.Cos floatarith =>
                        floatarith.Min (floatarith.Num x)
                         (floatarith.Cos floatarith)
                    | floatarith.Arctan floatarith =>
                        floatarith.Min (floatarith.Num x)
                         (floatarith.Arctan floatarith)
                    | floatarith.Abs floatarith =>
                        floatarith.Min (floatarith.Num x)
                         (floatarith.Abs floatarith)
                    | floatarith.Max floatarith1 floatarith2 =>
                        floatarith.Min (floatarith.Num x)
                         (floatarith.Max floatarith1 floatarith2)
                    | floatarith.Min floatarith1 floatarith2 =>
                        floatarith.Min (floatarith.Num x)
                         (floatarith.Min floatarith1 floatarith2)
                    | floatarith.Pi =>
                        floatarith.Min (floatarith.Num x) floatarith.Pi
                    | floatarith.Sqrt floatarith =>
                        floatarith.Min (floatarith.Num x)
                         (floatarith.Sqrt floatarith)
                    | floatarith.Exp floatarith =>
                        floatarith.Min (floatarith.Num x)
                         (floatarith.Exp floatarith)
                    | floatarith.Powr floatarith1 floatarith2 =>
                        floatarith.Min (floatarith.Num x)
                         (floatarith.Powr floatarith1 floatarith2)
                    | floatarith.Ln floatarith =>
                        floatarith.Min (floatarith.Num x)
                         (floatarith.Ln floatarith)
                    | floatarith ^\<^sub>e nat =>
                        floatarith.Min (floatarith.Num x)
                         (floatarith ^\<^sub>e nat)
                    | floatarith.Floor floatarith =>
                        floatarith.Min (floatarith.Num x)
                         (floatarith.Floor floatarith)
                    | floatarith.Var nat =>
                        floatarith.Min (floatarith.Num x)
                         (floatarith.Var nat)
                    | floatarith.Num y => floatarith.Num (min x y)) |]
            ==> ?P;
         !!a. [| ?fa = floatarith.Floor a;
                 floatarith.Minus ?y =
                 (case fold_const_fa a of
                  floatarith.Add floatarith1 floatarith2 =>
                    floatarith.Floor
                     (floatarith.Add floatarith1 floatarith2)
                  | floatarith.Minus floatarith =>
                      floatarith.Floor (floatarith.Minus floatarith)
                  | floatarith.Mult floatarith1 floatarith2 =>
                      floatarith.Floor
                       (floatarith.Mult floatarith1 floatarith2)
                  | floatarith.Inverse floatarith =>
                      floatarith.Floor (floatarith.Inverse floatarith)
                  | floatarith.Cos floatarith =>
                      floatarith.Floor (floatarith.Cos floatarith)
                  | floatarith.Arctan floatarith =>
                      floatarith.Floor (floatarith.Arctan floatarith)
                  | floatarith.Abs floatarith =>
                      floatarith.Floor (floatarith.Abs floatarith)
                  | floatarith.Max floatarith1 floatarith2 =>
                      floatarith.Floor
                       (floatarith.Max floatarith1 floatarith2)
                  | floatarith.Min floatarith1 floatarith2 =>
                      floatarith.Floor
                       (floatarith.Min floatarith1 floatarith2)
                  | floatarith.Pi => floatarith.Floor floatarith.Pi
                  | floatarith.Sqrt floatarith =>
                      floatarith.Floor (floatarith.Sqrt floatarith)
                  | floatarith.Exp floatarith =>
                      floatarith.Floor (floatarith.Exp floatarith)
                  | floatarith.Powr floatarith1 floatarith2 =>
                      floatarith.Floor
                       (floatarith.Powr floatarith1 floatarith2)
                  | floatarith.Ln floatarith =>
                      floatarith.Floor (floatarith.Ln floatarith)
                  | floatarith ^\<^sub>e nat =>
                      floatarith.Floor (floatarith ^\<^sub>e nat)
                  | floatarith.Floor floatarith =>
                      floatarith.Floor (floatarith.Floor floatarith)
                  | floatarith.Var nat =>
                      floatarith.Floor (floatarith.Var nat)
                  | floatarith.Num x => floatarith.Num (floor_fl x)) |]
              ==> ?P;
         !!a b.
            [| ?fa = a ^\<^sub>e b;
               floatarith.Minus ?y =
               (case fold_const_fa a of
                floatarith.Add floatarith1 floatarith2 =>
                  floatarith.Add floatarith1 floatarith2 ^\<^sub>e b
                | floatarith.Minus floatarith =>
                    floatarith.Minus floatarith ^\<^sub>e b
                | floatarith.Mult floatarith1 floatarith2 =>
                    floatarith.Mult floatarith1 floatarith2 ^\<^sub>e b
                | floatarith.Inverse floatarith =>
                    floatarith.Inverse floatarith ^\<^sub>e b
                | floatarith.Cos floatarith =>
                    floatarith.Cos floatarith ^\<^sub>e b
                | floatarith.Arctan floatarith =>
                    floatarith.Arctan floatarith ^\<^sub>e b
                | floatarith.Abs floatarith =>
                    floatarith.Abs floatarith ^\<^sub>e b
                | floatarith.Max floatarith1 floatarith2 =>
                    floatarith.Max floatarith1 floatarith2 ^\<^sub>e b
                | floatarith.Min floatarith1 floatarith2 =>
                    floatarith.Min floatarith1 floatarith2 ^\<^sub>e b
                | floatarith.Pi => floatarith.Pi ^\<^sub>e b
                | floatarith.Sqrt floatarith =>
                    floatarith.Sqrt floatarith ^\<^sub>e b
                | floatarith.Exp floatarith =>
                    floatarith.Exp floatarith ^\<^sub>e b
                | floatarith.Powr floatarith1 floatarith2 =>
                    floatarith.Powr floatarith1 floatarith2 ^\<^sub>e b
                | floatarith.Ln floatarith =>
                    floatarith.Ln floatarith ^\<^sub>e b
                | floatarith ^\<^sub>e nat =>
                    (floatarith ^\<^sub>e nat) ^\<^sub>e b
                | floatarith.Floor floatarith =>
                    floatarith.Floor floatarith ^\<^sub>e b
                | floatarith.Var nat => floatarith.Var nat ^\<^sub>e b
                | floatarith.Num x => floatarith.Num (x ^ b)) |]
            ==> ?P |]
      ==> ?P",
     template_implication
      ([template_equation
         (template_app (template_hole 35, template_var 2),
          template_app (template_hole 34, template_var 1)),
        template_predicate (template_app (template_hole 33, t_empty)),
        template_predicate (template_app (template_hole 33, t_empty)),
        template_predicate (template_app (template_hole 33, t_empty)),
        template_predicate (template_app (template_hole 33, t_empty)),
        template_predicate (template_app (template_hole 33, t_empty)),
        template_predicate (template_app (template_hole 33, t_empty)),
        template_predicate (template_app (template_hole 33, t_empty)),
        template_predicate (template_app (template_hole 33, t_empty))],
       template_predicate (template_var 0))),
    ("Floatarith_Expression.fold_const_fa_Add",
     "[| fold_const_fa ?fa = floatarith.Add ?x ?y;
         !!fa1 fa2.
            [| ?fa = floatarith.Add fa1 fa2;
               floatarith.Add ?x ?y =
               (case dest_Num_fa (fold_const_fa fa1) of
                None =>
                  case dest_Num_fa (fold_const_fa fa2) of
                  None =>
                    floatarith.Add (fold_const_fa fa1) (fold_const_fa fa2)
                  | Some a =>
                      if a = 0 then fold_const_fa fa1
                      else floatarith.Add (fold_const_fa fa1)
                            (floatarith.Num a)
                | Some a =>
                    case dest_Num_fa (fold_const_fa fa2) of
                    None =>
                      if a = 0 then fold_const_fa fa2
                      else floatarith.Add (floatarith.Num a)
                            (fold_const_fa fa2)
                    | Some b => floatarith.Num (a + b)) |]
            ==> ?P;
         !!a. [| ?fa = floatarith.Minus a;
                 floatarith.Add ?x ?y =
                 (case fold_const_fa a of
                  floatarith.Add floatarith1 floatarith2 =>
                    floatarith.Minus
                     (floatarith.Add floatarith1 floatarith2)
                  | floatarith.Minus floatarith =>
                      floatarith.Minus (floatarith.Minus floatarith)
                  | floatarith.Mult floatarith1 floatarith2 =>
                      floatarith.Minus
                       (floatarith.Mult floatarith1 floatarith2)
                  | floatarith.Inverse floatarith =>
                      floatarith.Minus (floatarith.Inverse floatarith)
                  | floatarith.Cos floatarith =>
                      floatarith.Minus (floatarith.Cos floatarith)
                  | floatarith.Arctan floatarith =>
                      floatarith.Minus (floatarith.Arctan floatarith)
                  | floatarith.Abs floatarith =>
                      floatarith.Minus (floatarith.Abs floatarith)
                  | floatarith.Max floatarith1 floatarith2 =>
                      floatarith.Minus
                       (floatarith.Max floatarith1 floatarith2)
                  | floatarith.Min floatarith1 floatarith2 =>
                      floatarith.Minus
                       (floatarith.Min floatarith1 floatarith2)
                  | floatarith.Pi => floatarith.Minus floatarith.Pi
                  | floatarith.Sqrt floatarith =>
                      floatarith.Minus (floatarith.Sqrt floatarith)
                  | floatarith.Exp floatarith =>
                      floatarith.Minus (floatarith.Exp floatarith)
                  | floatarith.Powr floatarith1 floatarith2 =>
                      floatarith.Minus
                       (floatarith.Powr floatarith1 floatarith2)
                  | floatarith.Ln floatarith =>
                      floatarith.Minus (floatarith.Ln floatarith)
                  | floatarith ^\<^sub>e nat =>
                      floatarith.Minus (floatarith ^\<^sub>e nat)
                  | floatarith.Floor floatarith =>
                      floatarith.Minus (floatarith.Floor floatarith)
                  | floatarith.Var nat =>
                      floatarith.Minus (floatarith.Var nat)
                  | floatarith.Num x => floatarith.Num (- x)) |]
              ==> ?P;
         !!fa1 fa2.
            [| ?fa = floatarith.Mult fa1 fa2;
               floatarith.Add ?x ?y =
               (case dest_Num_fa (fold_const_fa fa1) of
                None =>
                  case dest_Num_fa (fold_const_fa fa2) of
                  None =>
                    floatarith.Mult (fold_const_fa fa1) (fold_const_fa fa2)
                  | Some a =>
                      if a = 0 then floatarith.Num 0
                      else if a = 1 then fold_const_fa fa1
                           else floatarith.Mult (fold_const_fa fa1)
                                 (floatarith.Num a)
                | Some a =>
                    case dest_Num_fa (fold_const_fa fa2) of
                    None =>
                      if a = 0 then floatarith.Num 0
                      else if a = 1 then fold_const_fa fa2
                           else floatarith.Mult (floatarith.Num a)
                                 (fold_const_fa fa2)
                    | Some b => floatarith.Num (a * b)) |]
            ==> ?P;
         !!a. [| ?fa = floatarith.Abs a;
                 floatarith.Add ?x ?y =
                 (case fold_const_fa a of
                  floatarith.Add floatarith1 floatarith2 =>
                    floatarith.Abs (floatarith.Add floatarith1 floatarith2)
                  | floatarith.Minus floatarith =>
                      floatarith.Abs (floatarith.Minus floatarith)
                  | floatarith.Mult floatarith1 floatarith2 =>
                      floatarith.Abs
                       (floatarith.Mult floatarith1 floatarith2)
                  | floatarith.Inverse floatarith =>
                      floatarith.Abs (floatarith.Inverse floatarith)
                  | floatarith.Cos floatarith =>
                      floatarith.Abs (floatarith.Cos floatarith)
                  | floatarith.Arctan floatarith =>
                      floatarith.Abs (floatarith.Arctan floatarith)
                  | floatarith.Abs floatarith =>
                      floatarith.Abs (floatarith.Abs floatarith)
                  | floatarith.Max floatarith1 floatarith2 =>
                      floatarith.Abs
                       (floatarith.Max floatarith1 floatarith2)
                  | floatarith.Min floatarith1 floatarith2 =>
                      floatarith.Abs
                       (floatarith.Min floatarith1 floatarith2)
                  | floatarith.Pi => floatarith.Abs floatarith.Pi
                  | floatarith.Sqrt floatarith =>
                      floatarith.Abs (floatarith.Sqrt floatarith)
                  | floatarith.Exp floatarith =>
                      floatarith.Abs (floatarith.Exp floatarith)
                  | floatarith.Powr floatarith1 floatarith2 =>
                      floatarith.Abs
                       (floatarith.Powr floatarith1 floatarith2)
                  | floatarith.Ln floatarith =>
                      floatarith.Abs (floatarith.Ln floatarith)
                  | floatarith ^\<^sub>e nat =>
                      floatarith.Abs (floatarith ^\<^sub>e nat)
                  | floatarith.Floor floatarith =>
                      floatarith.Abs (floatarith.Floor floatarith)
                  | floatarith.Var nat =>
                      floatarith.Abs (floatarith.Var nat)
                  | floatarith.Num x => floatarith.Num \<bar>x\<bar>) |]
              ==> ?P;
         !!a b.
            [| ?fa = floatarith.Max a b;
               floatarith.Add ?x ?y =
               (case fold_const_fa a of
                floatarith.Add floatarith1 floatarith2 =>
                  floatarith.Max (floatarith.Add floatarith1 floatarith2)
                   (fold_const_fa b)
                | floatarith.Minus floatarith =>
                    floatarith.Max (floatarith.Minus floatarith)
                     (fold_const_fa b)
                | floatarith.Mult floatarith1 floatarith2 =>
                    floatarith.Max (floatarith.Mult floatarith1 floatarith2)
                     (fold_const_fa b)
                | floatarith.Inverse floatarith =>
                    floatarith.Max (floatarith.Inverse floatarith)
                     (fold_const_fa b)
                | floatarith.Cos floatarith =>
                    floatarith.Max (floatarith.Cos floatarith)
                     (fold_const_fa b)
                | floatarith.Arctan floatarith =>
                    floatarith.Max (floatarith.Arctan floatarith)
                     (fold_const_fa b)
                | floatarith.Abs floatarith =>
                    floatarith.Max (floatarith.Abs floatarith)
                     (fold_const_fa b)
                | floatarith.Max floatarith1 floatarith2 =>
                    floatarith.Max (floatarith.Max floatarith1 floatarith2)
                     (fold_const_fa b)
                | floatarith.Min floatarith1 floatarith2 =>
                    floatarith.Max (floatarith.Min floatarith1 floatarith2)
                     (fold_const_fa b)
                | floatarith.Pi =>
                    floatarith.Max floatarith.Pi (fold_const_fa b)
                | floatarith.Sqrt floatarith =>
                    floatarith.Max (floatarith.Sqrt floatarith)
                     (fold_const_fa b)
                | floatarith.Exp floatarith =>
                    floatarith.Max (floatarith.Exp floatarith)
                     (fold_const_fa b)
                | floatarith.Powr floatarith1 floatarith2 =>
                    floatarith.Max (floatarith.Powr floatarith1 floatarith2)
                     (fold_const_fa b)
                | floatarith.Ln floatarith =>
                    floatarith.Max (floatarith.Ln floatarith)
                     (fold_const_fa b)
                | floatarith ^\<^sub>e nat =>
                    floatarith.Max (floatarith ^\<^sub>e nat)
                     (fold_const_fa b)
                | floatarith.Floor floatarith =>
                    floatarith.Max (floatarith.Floor floatarith)
                     (fold_const_fa b)
                | floatarith.Var nat =>
                    floatarith.Max (floatarith.Var nat) (fold_const_fa b)
                | floatarith.Num x =>
                    case fold_const_fa b of
                    floatarith.Add floatarith1 floatarith2 =>
                      floatarith.Max (floatarith.Num x)
                       (floatarith.Add floatarith1 floatarith2)
                    | floatarith.Minus floatarith =>
                        floatarith.Max (floatarith.Num x)
                         (floatarith.Minus floatarith)
                    | floatarith.Mult floatarith1 floatarith2 =>
                        floatarith.Max (floatarith.Num x)
                         (floatarith.Mult floatarith1 floatarith2)
                    | floatarith.Inverse floatarith =>
                        floatarith.Max (floatarith.Num x)
                         (floatarith.Inverse floatarith)
                    | floatarith.Cos floatarith =>
                        floatarith.Max (floatarith.Num x)
                         (floatarith.Cos floatarith)
                    | floatarith.Arctan floatarith =>
                        floatarith.Max (floatarith.Num x)
                         (floatarith.Arctan floatarith)
                    | floatarith.Abs floatarith =>
                        floatarith.Max (floatarith.Num x)
                         (floatarith.Abs floatarith)
                    | floatarith.Max floatarith1 floatarith2 =>
                        floatarith.Max (floatarith.Num x)
                         (floatarith.Max floatarith1 floatarith2)
                    | floatarith.Min floatarith1 floatarith2 =>
                        floatarith.Max (floatarith.Num x)
                         (floatarith.Min floatarith1 floatarith2)
                    | floatarith.Pi =>
                        floatarith.Max (floatarith.Num x) floatarith.Pi
                    | floatarith.Sqrt floatarith =>
                        floatarith.Max (floatarith.Num x)
                         (floatarith.Sqrt floatarith)
                    | floatarith.Exp floatarith =>
                        floatarith.Max (floatarith.Num x)
                         (floatarith.Exp floatarith)
                    | floatarith.Powr floatarith1 floatarith2 =>
                        floatarith.Max (floatarith.Num x)
                         (floatarith.Powr floatarith1 floatarith2)
                    | floatarith.Ln floatarith =>
                        floatarith.Max (floatarith.Num x)
                         (floatarith.Ln floatarith)
                    | floatarith ^\<^sub>e nat =>
                        floatarith.Max (floatarith.Num x)
                         (floatarith ^\<^sub>e nat)
                    | floatarith.Floor floatarith =>
                        floatarith.Max (floatarith.Num x)
                         (floatarith.Floor floatarith)
                    | floatarith.Var nat =>
                        floatarith.Max (floatarith.Num x)
                         (floatarith.Var nat)
                    | floatarith.Num y => floatarith.Num (max x y)) |]
            ==> ?P;
         !!a b.
            [| ?fa = floatarith.Min a b;
               floatarith.Add ?x ?y =
               (case fold_const_fa a of
                floatarith.Add floatarith1 floatarith2 =>
                  floatarith.Min (floatarith.Add floatarith1 floatarith2)
                   (fold_const_fa b)
                | floatarith.Minus floatarith =>
                    floatarith.Min (floatarith.Minus floatarith)
                     (fold_const_fa b)
                | floatarith.Mult floatarith1 floatarith2 =>
                    floatarith.Min (floatarith.Mult floatarith1 floatarith2)
                     (fold_const_fa b)
                | floatarith.Inverse floatarith =>
                    floatarith.Min (floatarith.Inverse floatarith)
                     (fold_const_fa b)
                | floatarith.Cos floatarith =>
                    floatarith.Min (floatarith.Cos floatarith)
                     (fold_const_fa b)
                | floatarith.Arctan floatarith =>
                    floatarith.Min (floatarith.Arctan floatarith)
                     (fold_const_fa b)
                | floatarith.Abs floatarith =>
                    floatarith.Min (floatarith.Abs floatarith)
                     (fold_const_fa b)
                | floatarith.Max floatarith1 floatarith2 =>
                    floatarith.Min (floatarith.Max floatarith1 floatarith2)
                     (fold_const_fa b)
                | floatarith.Min floatarith1 floatarith2 =>
                    floatarith.Min (floatarith.Min floatarith1 floatarith2)
                     (fold_const_fa b)
                | floatarith.Pi =>
                    floatarith.Min floatarith.Pi (fold_const_fa b)
                | floatarith.Sqrt floatarith =>
                    floatarith.Min (floatarith.Sqrt floatarith)
                     (fold_const_fa b)
                | floatarith.Exp floatarith =>
                    floatarith.Min (floatarith.Exp floatarith)
                     (fold_const_fa b)
                | floatarith.Powr floatarith1 floatarith2 =>
                    floatarith.Min (floatarith.Powr floatarith1 floatarith2)
                     (fold_const_fa b)
                | floatarith.Ln floatarith =>
                    floatarith.Min (floatarith.Ln floatarith)
                     (fold_const_fa b)
                | floatarith ^\<^sub>e nat =>
                    floatarith.Min (floatarith ^\<^sub>e nat)
                     (fold_const_fa b)
                | floatarith.Floor floatarith =>
                    floatarith.Min (floatarith.Floor floatarith)
                     (fold_const_fa b)
                | floatarith.Var nat =>
                    floatarith.Min (floatarith.Var nat) (fold_const_fa b)
                | floatarith.Num x =>
                    case fold_const_fa b of
                    floatarith.Add floatarith1 floatarith2 =>
                      floatarith.Min (floatarith.Num x)
                       (floatarith.Add floatarith1 floatarith2)
                    | floatarith.Minus floatarith =>
                        floatarith.Min (floatarith.Num x)
                         (floatarith.Minus floatarith)
                    | floatarith.Mult floatarith1 floatarith2 =>
                        floatarith.Min (floatarith.Num x)
                         (floatarith.Mult floatarith1 floatarith2)
                    | floatarith.Inverse floatarith =>
                        floatarith.Min (floatarith.Num x)
                         (floatarith.Inverse floatarith)
                    | floatarith.Cos floatarith =>
                        floatarith.Min (floatarith.Num x)
                         (floatarith.Cos floatarith)
                    | floatarith.Arctan floatarith =>
                        floatarith.Min (floatarith.Num x)
                         (floatarith.Arctan floatarith)
                    | floatarith.Abs floatarith =>
                        floatarith.Min (floatarith.Num x)
                         (floatarith.Abs floatarith)
                    | floatarith.Max floatarith1 floatarith2 =>
                        floatarith.Min (floatarith.Num x)
                         (floatarith.Max floatarith1 floatarith2)
                    | floatarith.Min floatarith1 floatarith2 =>
                        floatarith.Min (floatarith.Num x)
                         (floatarith.Min floatarith1 floatarith2)
                    | floatarith.Pi =>
                        floatarith.Min (floatarith.Num x) floatarith.Pi
                    | floatarith.Sqrt floatarith =>
                        floatarith.Min (floatarith.Num x)
                         (floatarith.Sqrt floatarith)
                    | floatarith.Exp floatarith =>
                        floatarith.Min (floatarith.Num x)
                         (floatarith.Exp floatarith)
                    | floatarith.Powr floatarith1 floatarith2 =>
                        floatarith.Min (floatarith.Num x)
                         (floatarith.Powr floatarith1 floatarith2)
                    | floatarith.Ln floatarith =>
                        floatarith.Min (floatarith.Num x)
                         (floatarith.Ln floatarith)
                    | floatarith ^\<^sub>e nat =>
                        floatarith.Min (floatarith.Num x)
                         (floatarith ^\<^sub>e nat)
                    | floatarith.Floor floatarith =>
                        floatarith.Min (floatarith.Num x)
                         (floatarith.Floor floatarith)
                    | floatarith.Var nat =>
                        floatarith.Min (floatarith.Num x)
                         (floatarith.Var nat)
                    | floatarith.Num y => floatarith.Num (min x y)) |]
            ==> ?P;
         !!a. [| ?fa = floatarith.Floor a;
                 floatarith.Add ?x ?y =
                 (case fold_const_fa a of
                  floatarith.Add floatarith1 floatarith2 =>
                    floatarith.Floor
                     (floatarith.Add floatarith1 floatarith2)
                  | floatarith.Minus floatarith =>
                      floatarith.Floor (floatarith.Minus floatarith)
                  | floatarith.Mult floatarith1 floatarith2 =>
                      floatarith.Floor
                       (floatarith.Mult floatarith1 floatarith2)
                  | floatarith.Inverse floatarith =>
                      floatarith.Floor (floatarith.Inverse floatarith)
                  | floatarith.Cos floatarith =>
                      floatarith.Floor (floatarith.Cos floatarith)
                  | floatarith.Arctan floatarith =>
                      floatarith.Floor (floatarith.Arctan floatarith)
                  | floatarith.Abs floatarith =>
                      floatarith.Floor (floatarith.Abs floatarith)
                  | floatarith.Max floatarith1 floatarith2 =>
                      floatarith.Floor
                       (floatarith.Max floatarith1 floatarith2)
                  | floatarith.Min floatarith1 floatarith2 =>
                      floatarith.Floor
                       (floatarith.Min floatarith1 floatarith2)
                  | floatarith.Pi => floatarith.Floor floatarith.Pi
                  | floatarith.Sqrt floatarith =>
                      floatarith.Floor (floatarith.Sqrt floatarith)
                  | floatarith.Exp floatarith =>
                      floatarith.Floor (floatarith.Exp floatarith)
                  | floatarith.Powr floatarith1 floatarith2 =>
                      floatarith.Floor
                       (floatarith.Powr floatarith1 floatarith2)
                  | floatarith.Ln floatarith =>
                      floatarith.Floor (floatarith.Ln floatarith)
                  | floatarith ^\<^sub>e nat =>
                      floatarith.Floor (floatarith ^\<^sub>e nat)
                  | floatarith.Floor floatarith =>
                      floatarith.Floor (floatarith.Floor floatarith)
                  | floatarith.Var nat =>
                      floatarith.Floor (floatarith.Var nat)
                  | floatarith.Num x => floatarith.Num (floor_fl x)) |]
              ==> ?P;
         !!a b.
            [| ?fa = a ^\<^sub>e b;
               floatarith.Add ?x ?y =
               (case fold_const_fa a of
                floatarith.Add floatarith1 floatarith2 =>
                  floatarith.Add floatarith1 floatarith2 ^\<^sub>e b
                | floatarith.Minus floatarith =>
                    floatarith.Minus floatarith ^\<^sub>e b
                | floatarith.Mult floatarith1 floatarith2 =>
                    floatarith.Mult floatarith1 floatarith2 ^\<^sub>e b
                | floatarith.Inverse floatarith =>
                    floatarith.Inverse floatarith ^\<^sub>e b
                | floatarith.Cos floatarith =>
                    floatarith.Cos floatarith ^\<^sub>e b
                | floatarith.Arctan floatarith =>
                    floatarith.Arctan floatarith ^\<^sub>e b
                | floatarith.Abs floatarith =>
                    floatarith.Abs floatarith ^\<^sub>e b
                | floatarith.Max floatarith1 floatarith2 =>
                    floatarith.Max floatarith1 floatarith2 ^\<^sub>e b
                | floatarith.Min floatarith1 floatarith2 =>
                    floatarith.Min floatarith1 floatarith2 ^\<^sub>e b
                | floatarith.Pi => floatarith.Pi ^\<^sub>e b
                | floatarith.Sqrt floatarith =>
                    floatarith.Sqrt floatarith ^\<^sub>e b
                | floatarith.Exp floatarith =>
                    floatarith.Exp floatarith ^\<^sub>e b
                | floatarith.Powr floatarith1 floatarith2 =>
                    floatarith.Powr floatarith1 floatarith2 ^\<^sub>e b
                | floatarith.Ln floatarith =>
                    floatarith.Ln floatarith ^\<^sub>e b
                | floatarith ^\<^sub>e nat =>
                    (floatarith ^\<^sub>e nat) ^\<^sub>e b
                | floatarith.Floor floatarith =>
                    floatarith.Floor floatarith ^\<^sub>e b
                | floatarith.Var nat => floatarith.Var nat ^\<^sub>e b
                | floatarith.Num x => floatarith.Num (x ^ b)) |]
            ==> ?P |]
      ==> ?P",
     template_implication
      ([template_equation
         (template_app (template_hole 35, template_var 3),
          template_app
           (template_app (template_hole 34, template_var 2),
            template_var 1)),
        template_predicate (template_app (template_hole 33, t_empty)),
        template_predicate (template_app (template_hole 33, t_empty)),
        template_predicate (template_app (template_hole 33, t_empty)),
        template_predicate (template_app (template_hole 33, t_empty)),
        template_predicate (template_app (template_hole 33, t_empty)),
        template_predicate (template_app (template_hole 33, t_empty)),
        template_predicate (template_app (template_hole 33, t_empty)),
        template_predicate (template_app (template_hole 33, t_empty))],
       template_predicate (template_var 0))),
    ("Floatarith_Expression.fold_const_fa_Num",
     "[| fold_const_fa ?fa = floatarith.Num ?y;
         !!fa1 fa2.
            [| ?fa = floatarith.Add fa1 fa2;
               floatarith.Num ?y =
               (case dest_Num_fa (fold_const_fa fa1) of
                None =>
                  case dest_Num_fa (fold_const_fa fa2) of
                  None =>
                    floatarith.Add (fold_const_fa fa1) (fold_const_fa fa2)
                  | Some a =>
                      if a = 0 then fold_const_fa fa1
                      else floatarith.Add (fold_const_fa fa1)
                            (floatarith.Num a)
                | Some a =>
                    case dest_Num_fa (fold_const_fa fa2) of
                    None =>
                      if a = 0 then fold_const_fa fa2
                      else floatarith.Add (floatarith.Num a)
                            (fold_const_fa fa2)
                    | Some b => floatarith.Num (a + b)) |]
            ==> ?P;
         !!a. [| ?fa = floatarith.Minus a;
                 floatarith.Num ?y =
                 (case fold_const_fa a of
                  floatarith.Add floatarith1 floatarith2 =>
                    floatarith.Minus
                     (floatarith.Add floatarith1 floatarith2)
                  | floatarith.Minus floatarith =>
                      floatarith.Minus (floatarith.Minus floatarith)
                  | floatarith.Mult floatarith1 floatarith2 =>
                      floatarith.Minus
                       (floatarith.Mult floatarith1 floatarith2)
                  | floatarith.Inverse floatarith =>
                      floatarith.Minus (floatarith.Inverse floatarith)
                  | floatarith.Cos floatarith =>
                      floatarith.Minus (floatarith.Cos floatarith)
                  | floatarith.Arctan floatarith =>
                      floatarith.Minus (floatarith.Arctan floatarith)
                  | floatarith.Abs floatarith =>
                      floatarith.Minus (floatarith.Abs floatarith)
                  | floatarith.Max floatarith1 floatarith2 =>
                      floatarith.Minus
                       (floatarith.Max floatarith1 floatarith2)
                  | floatarith.Min floatarith1 floatarith2 =>
                      floatarith.Minus
                       (floatarith.Min floatarith1 floatarith2)
                  | floatarith.Pi => floatarith.Minus floatarith.Pi
                  | floatarith.Sqrt floatarith =>
                      floatarith.Minus (floatarith.Sqrt floatarith)
                  | floatarith.Exp floatarith =>
                      floatarith.Minus (floatarith.Exp floatarith)
                  | floatarith.Powr floatarith1 floatarith2 =>
                      floatarith.Minus
                       (floatarith.Powr floatarith1 floatarith2)
                  | floatarith.Ln floatarith =>
                      floatarith.Minus (floatarith.Ln floatarith)
                  | floatarith ^\<^sub>e nat =>
                      floatarith.Minus (floatarith ^\<^sub>e nat)
                  | floatarith.Floor floatarith =>
                      floatarith.Minus (floatarith.Floor floatarith)
                  | floatarith.Var nat =>
                      floatarith.Minus (floatarith.Var nat)
                  | floatarith.Num x => floatarith.Num (- x)) |]
              ==> ?P;
         !!fa1 fa2.
            [| ?fa = floatarith.Mult fa1 fa2;
               floatarith.Num ?y =
               (case dest_Num_fa (fold_const_fa fa1) of
                None =>
                  case dest_Num_fa (fold_const_fa fa2) of
                  None =>
                    floatarith.Mult (fold_const_fa fa1) (fold_const_fa fa2)
                  | Some a =>
                      if a = 0 then floatarith.Num 0
                      else if a = 1 then fold_const_fa fa1
                           else floatarith.Mult (fold_const_fa fa1)
                                 (floatarith.Num a)
                | Some a =>
                    case dest_Num_fa (fold_const_fa fa2) of
                    None =>
                      if a = 0 then floatarith.Num 0
                      else if a = 1 then fold_const_fa fa2
                           else floatarith.Mult (floatarith.Num a)
                                 (fold_const_fa fa2)
                    | Some b => floatarith.Num (a * b)) |]
            ==> ?P;
         !!a. [| ?fa = floatarith.Abs a;
                 floatarith.Num ?y =
                 (case fold_const_fa a of
                  floatarith.Add floatarith1 floatarith2 =>
                    floatarith.Abs (floatarith.Add floatarith1 floatarith2)
                  | floatarith.Minus floatarith =>
                      floatarith.Abs (floatarith.Minus floatarith)
                  | floatarith.Mult floatarith1 floatarith2 =>
                      floatarith.Abs
                       (floatarith.Mult floatarith1 floatarith2)
                  | floatarith.Inverse floatarith =>
                      floatarith.Abs (floatarith.Inverse floatarith)
                  | floatarith.Cos floatarith =>
                      floatarith.Abs (floatarith.Cos floatarith)
                  | floatarith.Arctan floatarith =>
                      floatarith.Abs (floatarith.Arctan floatarith)
                  | floatarith.Abs floatarith =>
                      floatarith.Abs (floatarith.Abs floatarith)
                  | floatarith.Max floatarith1 floatarith2 =>
                      floatarith.Abs
                       (floatarith.Max floatarith1 floatarith2)
                  | floatarith.Min floatarith1 floatarith2 =>
                      floatarith.Abs
                       (floatarith.Min floatarith1 floatarith2)
                  | floatarith.Pi => floatarith.Abs floatarith.Pi
                  | floatarith.Sqrt floatarith =>
                      floatarith.Abs (floatarith.Sqrt floatarith)
                  | floatarith.Exp floatarith =>
                      floatarith.Abs (floatarith.Exp floatarith)
                  | floatarith.Powr floatarith1 floatarith2 =>
                      floatarith.Abs
                       (floatarith.Powr floatarith1 floatarith2)
                  | floatarith.Ln floatarith =>
                      floatarith.Abs (floatarith.Ln floatarith)
                  | floatarith ^\<^sub>e nat =>
                      floatarith.Abs (floatarith ^\<^sub>e nat)
                  | floatarith.Floor floatarith =>
                      floatarith.Abs (floatarith.Floor floatarith)
                  | floatarith.Var nat =>
                      floatarith.Abs (floatarith.Var nat)
                  | floatarith.Num x => floatarith.Num \<bar>x\<bar>) |]
              ==> ?P;
         !!a b.
            [| ?fa = floatarith.Max a b;
               floatarith.Num ?y =
               (case fold_const_fa a of
                floatarith.Add floatarith1 floatarith2 =>
                  floatarith.Max (floatarith.Add floatarith1 floatarith2)
                   (fold_const_fa b)
                | floatarith.Minus floatarith =>
                    floatarith.Max (floatarith.Minus floatarith)
                     (fold_const_fa b)
                | floatarith.Mult floatarith1 floatarith2 =>
                    floatarith.Max (floatarith.Mult floatarith1 floatarith2)
                     (fold_const_fa b)
                | floatarith.Inverse floatarith =>
                    floatarith.Max (floatarith.Inverse floatarith)
                     (fold_const_fa b)
                | floatarith.Cos floatarith =>
                    floatarith.Max (floatarith.Cos floatarith)
                     (fold_const_fa b)
                | floatarith.Arctan floatarith =>
                    floatarith.Max (floatarith.Arctan floatarith)
                     (fold_const_fa b)
                | floatarith.Abs floatarith =>
                    floatarith.Max (floatarith.Abs floatarith)
                     (fold_const_fa b)
                | floatarith.Max floatarith1 floatarith2 =>
                    floatarith.Max (floatarith.Max floatarith1 floatarith2)
                     (fold_const_fa b)
                | floatarith.Min floatarith1 floatarith2 =>
                    floatarith.Max (floatarith.Min floatarith1 floatarith2)
                     (fold_const_fa b)
                | floatarith.Pi =>
                    floatarith.Max floatarith.Pi (fold_const_fa b)
                | floatarith.Sqrt floatarith =>
                    floatarith.Max (floatarith.Sqrt floatarith)
                     (fold_const_fa b)
                | floatarith.Exp floatarith =>
                    floatarith.Max (floatarith.Exp floatarith)
                     (fold_const_fa b)
                | floatarith.Powr floatarith1 floatarith2 =>
                    floatarith.Max (floatarith.Powr floatarith1 floatarith2)
                     (fold_const_fa b)
                | floatarith.Ln floatarith =>
                    floatarith.Max (floatarith.Ln floatarith)
                     (fold_const_fa b)
                | floatarith ^\<^sub>e nat =>
                    floatarith.Max (floatarith ^\<^sub>e nat)
                     (fold_const_fa b)
                | floatarith.Floor floatarith =>
                    floatarith.Max (floatarith.Floor floatarith)
                     (fold_const_fa b)
                | floatarith.Var nat =>
                    floatarith.Max (floatarith.Var nat) (fold_const_fa b)
                | floatarith.Num x =>
                    case fold_const_fa b of
                    floatarith.Add floatarith1 floatarith2 =>
                      floatarith.Max (floatarith.Num x)
                       (floatarith.Add floatarith1 floatarith2)
                    | floatarith.Minus floatarith =>
                        floatarith.Max (floatarith.Num x)
                         (floatarith.Minus floatarith)
                    | floatarith.Mult floatarith1 floatarith2 =>
                        floatarith.Max (floatarith.Num x)
                         (floatarith.Mult floatarith1 floatarith2)
                    | floatarith.Inverse floatarith =>
                        floatarith.Max (floatarith.Num x)
                         (floatarith.Inverse floatarith)
                    | floatarith.Cos floatarith =>
                        floatarith.Max (floatarith.Num x)
                         (floatarith.Cos floatarith)
                    | floatarith.Arctan floatarith =>
                        floatarith.Max (floatarith.Num x)
                         (floatarith.Arctan floatarith)
                    | floatarith.Abs floatarith =>
                        floatarith.Max (floatarith.Num x)
                         (floatarith.Abs floatarith)
                    | floatarith.Max floatarith1 floatarith2 =>
                        floatarith.Max (floatarith.Num x)
                         (floatarith.Max floatarith1 floatarith2)
                    | floatarith.Min floatarith1 floatarith2 =>
                        floatarith.Max (floatarith.Num x)
                         (floatarith.Min floatarith1 floatarith2)
                    | floatarith.Pi =>
                        floatarith.Max (floatarith.Num x) floatarith.Pi
                    | floatarith.Sqrt floatarith =>
                        floatarith.Max (floatarith.Num x)
                         (floatarith.Sqrt floatarith)
                    | floatarith.Exp floatarith =>
                        floatarith.Max (floatarith.Num x)
                         (floatarith.Exp floatarith)
                    | floatarith.Powr floatarith1 floatarith2 =>
                        floatarith.Max (floatarith.Num x)
                         (floatarith.Powr floatarith1 floatarith2)
                    | floatarith.Ln floatarith =>
                        floatarith.Max (floatarith.Num x)
                         (floatarith.Ln floatarith)
                    | floatarith ^\<^sub>e nat =>
                        floatarith.Max (floatarith.Num x)
                         (floatarith ^\<^sub>e nat)
                    | floatarith.Floor floatarith =>
                        floatarith.Max (floatarith.Num x)
                         (floatarith.Floor floatarith)
                    | floatarith.Var nat =>
                        floatarith.Max (floatarith.Num x)
                         (floatarith.Var nat)
                    | floatarith.Num y => floatarith.Num (max x y)) |]
            ==> ?P;
         !!a b.
            [| ?fa = floatarith.Min a b;
               floatarith.Num ?y =
               (case fold_const_fa a of
                floatarith.Add floatarith1 floatarith2 =>
                  floatarith.Min (floatarith.Add floatarith1 floatarith2)
                   (fold_const_fa b)
                | floatarith.Minus floatarith =>
                    floatarith.Min (floatarith.Minus floatarith)
                     (fold_const_fa b)
                | floatarith.Mult floatarith1 floatarith2 =>
                    floatarith.Min (floatarith.Mult floatarith1 floatarith2)
                     (fold_const_fa b)
                | floatarith.Inverse floatarith =>
                    floatarith.Min (floatarith.Inverse floatarith)
                     (fold_const_fa b)
                | floatarith.Cos floatarith =>
                    floatarith.Min (floatarith.Cos floatarith)
                     (fold_const_fa b)
                | floatarith.Arctan floatarith =>
                    floatarith.Min (floatarith.Arctan floatarith)
                     (fold_const_fa b)
                | floatarith.Abs floatarith =>
                    floatarith.Min (floatarith.Abs floatarith)
                     (fold_const_fa b)
                | floatarith.Max floatarith1 floatarith2 =>
                    floatarith.Min (floatarith.Max floatarith1 floatarith2)
                     (fold_const_fa b)
                | floatarith.Min floatarith1 floatarith2 =>
                    floatarith.Min (floatarith.Min floatarith1 floatarith2)
                     (fold_const_fa b)
                | floatarith.Pi =>
                    floatarith.Min floatarith.Pi (fold_const_fa b)
                | floatarith.Sqrt floatarith =>
                    floatarith.Min (floatarith.Sqrt floatarith)
                     (fold_const_fa b)
                | floatarith.Exp floatarith =>
                    floatarith.Min (floatarith.Exp floatarith)
                     (fold_const_fa b)
                | floatarith.Powr floatarith1 floatarith2 =>
                    floatarith.Min (floatarith.Powr floatarith1 floatarith2)
                     (fold_const_fa b)
                | floatarith.Ln floatarith =>
                    floatarith.Min (floatarith.Ln floatarith)
                     (fold_const_fa b)
                | floatarith ^\<^sub>e nat =>
                    floatarith.Min (floatarith ^\<^sub>e nat)
                     (fold_const_fa b)
                | floatarith.Floor floatarith =>
                    floatarith.Min (floatarith.Floor floatarith)
                     (fold_const_fa b)
                | floatarith.Var nat =>
                    floatarith.Min (floatarith.Var nat) (fold_const_fa b)
                | floatarith.Num x =>
                    case fold_const_fa b of
                    floatarith.Add floatarith1 floatarith2 =>
                      floatarith.Min (floatarith.Num x)
                       (floatarith.Add floatarith1 floatarith2)
                    | floatarith.Minus floatarith =>
                        floatarith.Min (floatarith.Num x)
                         (floatarith.Minus floatarith)
                    | floatarith.Mult floatarith1 floatarith2 =>
                        floatarith.Min (floatarith.Num x)
                         (floatarith.Mult floatarith1 floatarith2)
                    | floatarith.Inverse floatarith =>
                        floatarith.Min (floatarith.Num x)
                         (floatarith.Inverse floatarith)
                    | floatarith.Cos floatarith =>
                        floatarith.Min (floatarith.Num x)
                         (floatarith.Cos floatarith)
                    | floatarith.Arctan floatarith =>
                        floatarith.Min (floatarith.Num x)
                         (floatarith.Arctan floatarith)
                    | floatarith.Abs floatarith =>
                        floatarith.Min (floatarith.Num x)
                         (floatarith.Abs floatarith)
                    | floatarith.Max floatarith1 floatarith2 =>
                        floatarith.Min (floatarith.Num x)
                         (floatarith.Max floatarith1 floatarith2)
                    | floatarith.Min floatarith1 floatarith2 =>
                        floatarith.Min (floatarith.Num x)
                         (floatarith.Min floatarith1 floatarith2)
                    | floatarith.Pi =>
                        floatarith.Min (floatarith.Num x) floatarith.Pi
                    | floatarith.Sqrt floatarith =>
                        floatarith.Min (floatarith.Num x)
                         (floatarith.Sqrt floatarith)
                    | floatarith.Exp floatarith =>
                        floatarith.Min (floatarith.Num x)
                         (floatarith.Exp floatarith)
                    | floatarith.Powr floatarith1 floatarith2 =>
                        floatarith.Min (floatarith.Num x)
                         (floatarith.Powr floatarith1 floatarith2)
                    | floatarith.Ln floatarith =>
                        floatarith.Min (floatarith.Num x)
                         (floatarith.Ln floatarith)
                    | floatarith ^\<^sub>e nat =>
                        floatarith.Min (floatarith.Num x)
                         (floatarith ^\<^sub>e nat)
                    | floatarith.Floor floatarith =>
                        floatarith.Min (floatarith.Num x)
                         (floatarith.Floor floatarith)
                    | floatarith.Var nat =>
                        floatarith.Min (floatarith.Num x)
                         (floatarith.Var nat)
                    | floatarith.Num y => floatarith.Num (min x y)) |]
            ==> ?P;
         !!a. [| ?fa = floatarith.Floor a;
                 floatarith.Num ?y =
                 (case fold_const_fa a of
                  floatarith.Add floatarith1 floatarith2 =>
                    floatarith.Floor
                     (floatarith.Add floatarith1 floatarith2)
                  | floatarith.Minus floatarith =>
                      floatarith.Floor (floatarith.Minus floatarith)
                  | floatarith.Mult floatarith1 floatarith2 =>
                      floatarith.Floor
                       (floatarith.Mult floatarith1 floatarith2)
                  | floatarith.Inverse floatarith =>
                      floatarith.Floor (floatarith.Inverse floatarith)
                  | floatarith.Cos floatarith =>
                      floatarith.Floor (floatarith.Cos floatarith)
                  | floatarith.Arctan floatarith =>
                      floatarith.Floor (floatarith.Arctan floatarith)
                  | floatarith.Abs floatarith =>
                      floatarith.Floor (floatarith.Abs floatarith)
                  | floatarith.Max floatarith1 floatarith2 =>
                      floatarith.Floor
                       (floatarith.Max floatarith1 floatarith2)
                  | floatarith.Min floatarith1 floatarith2 =>
                      floatarith.Floor
                       (floatarith.Min floatarith1 floatarith2)
                  | floatarith.Pi => floatarith.Floor floatarith.Pi
                  | floatarith.Sqrt floatarith =>
                      floatarith.Floor (floatarith.Sqrt floatarith)
                  | floatarith.Exp floatarith =>
                      floatarith.Floor (floatarith.Exp floatarith)
                  | floatarith.Powr floatarith1 floatarith2 =>
                      floatarith.Floor
                       (floatarith.Powr floatarith1 floatarith2)
                  | floatarith.Ln floatarith =>
                      floatarith.Floor (floatarith.Ln floatarith)
                  | floatarith ^\<^sub>e nat =>
                      floatarith.Floor (floatarith ^\<^sub>e nat)
                  | floatarith.Floor floatarith =>
                      floatarith.Floor (floatarith.Floor floatarith)
                  | floatarith.Var nat =>
                      floatarith.Floor (floatarith.Var nat)
                  | floatarith.Num x => floatarith.Num (floor_fl x)) |]
              ==> ?P;
         !!a b.
            [| ?fa = a ^\<^sub>e b;
               floatarith.Num ?y =
               (case fold_const_fa a of
                floatarith.Add floatarith1 floatarith2 =>
                  floatarith.Add floatarith1 floatarith2 ^\<^sub>e b
                | floatarith.Minus floatarith =>
                    floatarith.Minus floatarith ^\<^sub>e b
                | floatarith.Mult floatarith1 floatarith2 =>
                    floatarith.Mult floatarith1 floatarith2 ^\<^sub>e b
                | floatarith.Inverse floatarith =>
                    floatarith.Inverse floatarith ^\<^sub>e b
                | floatarith.Cos floatarith =>
                    floatarith.Cos floatarith ^\<^sub>e b
                | floatarith.Arctan floatarith =>
                    floatarith.Arctan floatarith ^\<^sub>e b
                | floatarith.Abs floatarith =>
                    floatarith.Abs floatarith ^\<^sub>e b
                | floatarith.Max floatarith1 floatarith2 =>
                    floatarith.Max floatarith1 floatarith2 ^\<^sub>e b
                | floatarith.Min floatarith1 floatarith2 =>
                    floatarith.Min floatarith1 floatarith2 ^\<^sub>e b
                | floatarith.Pi => floatarith.Pi ^\<^sub>e b
                | floatarith.Sqrt floatarith =>
                    floatarith.Sqrt floatarith ^\<^sub>e b
                | floatarith.Exp floatarith =>
                    floatarith.Exp floatarith ^\<^sub>e b
                | floatarith.Powr floatarith1 floatarith2 =>
                    floatarith.Powr floatarith1 floatarith2 ^\<^sub>e b
                | floatarith.Ln floatarith =>
                    floatarith.Ln floatarith ^\<^sub>e b
                | floatarith ^\<^sub>e nat =>
                    (floatarith ^\<^sub>e nat) ^\<^sub>e b
                | floatarith.Floor floatarith =>
                    floatarith.Floor floatarith ^\<^sub>e b
                | floatarith.Var nat => floatarith.Var nat ^\<^sub>e b
                | floatarith.Num x => floatarith.Num (x ^ b)) |]
            ==> ?P;
         ?fa = floatarith.Num ?y ==> ?P |]
      ==> ?P",
     template_implication
      ([template_equation
         (template_app (template_hole 35, template_var 2),
          template_app (template_hole 34, template_var 1)),
        template_predicate (template_app (template_hole 33, t_empty)),
        template_predicate (template_app (template_hole 33, t_empty)),
        template_predicate (template_app (template_hole 33, t_empty)),
        template_predicate (template_app (template_hole 33, t_empty)),
        template_predicate (template_app (template_hole 33, t_empty)),
        template_predicate (template_app (template_hole 33, t_empty)),
        template_predicate (template_app (template_hole 33, t_empty)),
        template_predicate (template_app (template_hole 33, t_empty)),
        template_implication
         ([template_equation
            (template_var 2,
             template_app (template_hole 34, template_var 1))],
          template_predicate (template_var 0))],
       template_predicate (template_var 0)))]:
   (string * thm * template) list
### theory "Draft.Floatarith_ExpressionTemplates"
### 1.120s elapsed time, 1.302s cpu time, 0.116s GC time
val it = (): unit
