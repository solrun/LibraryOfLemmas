Loading theory "Draft.ArithExtras" (required by "Draft.FR_proofMoreTemplates" via "Draft.FR_proof" via "Draft.FR" via "Draft.FR_types" via "Draft.stream")
Loading theory "Draft.ListExtras" (required by "Draft.FR_proofMoreTemplates" via "Draft.FR_proof" via "Draft.FR" via "Draft.FR_types" via "Draft.stream")
Loading theory "HOL-Library.Function_Algebras" (required by "Draft.FR_proofMoreTemplates" via "Draft.ExtrEqs" via "HOL-Library.BigO")
Loading theory "HOL-Library.Nat_Bijection" (required by "Draft.FR_proofMoreTemplates" via "Draft.ExtrEqs" via "HOL-Library.Stream")
instantiation
  fun :: (type, plus) plus
  plus_fun == plus :: ('a => 'b) => ('a => 'b) => 'a => 'b
instantiation
  fun :: (type, zero) zero
  zero_fun == zero_class.zero :: 'a => 'b
consts
  mem :: "'a => 'a list => bool"
instantiation
  fun :: (type, times) times
  times_fun == times :: ('a => 'b) => ('a => 'b) => 'a => 'b
instantiation
  fun :: (type, one) one
  one_fun == one_class.one :: 'a => 'b
Found termination order: "(%p. size (snd p)) <*mlex*> {}"
### theory "Draft.ListExtras"
### 0.119s elapsed time, 0.487s cpu time, 0.041s GC time
Loading theory "HOL-Library.Set_Algebras" (required by "Draft.FR_proofMoreTemplates" via "Draft.ExtrEqs" via "HOL-Library.BigO")
### theory "HOL-Library.Function_Algebras"
### 0.122s elapsed time, 0.498s cpu time, 0.041s GC time
Loading theory "HOL-Library.Tree" (required by "Draft.FR_proofMoreTemplates" via "Draft.ExtrEqs" via "Draft.Templates")
instantiation
  set :: (plus) plus
  plus_set == plus :: 'a set => 'a set => 'a set
instantiation
  set :: (times) times
  times_set == times :: 'a set => 'a set => 'a set
instantiation
  set :: (zero) zero
  zero_set == zero_class.zero :: 'a set
instantiation
  set :: (one) one
  one_set == one_class.one :: 'a set
Found termination order: "size_list size <*mlex*> {}"
### theory "HOL-Library.Set_Algebras"
### 0.204s elapsed time, 0.803s cpu time, 0.071s GC time
Loading theory "HOL-Library.BigO" (required by "Draft.FR_proofMoreTemplates" via "Draft.ExtrEqs")
consts
  nat2inat :: "nat list => natInf list"
### theory "Draft.ArithExtras"
### 0.344s elapsed time, 1.376s cpu time, 0.112s GC time
Loading theory "Draft.stream" (required by "Draft.FR_proofMoreTemplates" via "Draft.FR_proof" via "Draft.FR" via "Draft.FR_types")
### theory "HOL-Library.Nat_Bijection"
### 0.369s elapsed time, 1.472s cpu time, 0.112s GC time
Loading theory "HOL-Library.Stream" (required by "Draft.FR_proofMoreTemplates" via "Draft.ExtrEqs")
consts
  left :: "'a tree => 'a tree"
consts
  right :: "'a tree => 'a tree"
Found termination order: "size <*mlex*> {}"
consts
  shift :: "'a list => 'a stream => 'a stream"
Proofs for coinductive predicate(s) "streamsp"
  Proving monotonicity ...
Found termination order: "size <*mlex*> {}"
Found termination order: "size <*mlex*> {}"
consts
  snth :: "'a stream => nat => 'a"
consts
  stake :: "nat => 'a stream => 'a list"
class height = type +
  fixes height :: "'a => nat"
instantiation
  tree :: (type) height
  height_tree == height :: 'a tree => nat
consts
  sdrop :: "nat => 'a stream => 'a stream"
consts
  sfilter :: "('a => bool) => 'a stream => 'a stream"
Found termination order: "size <*mlex*> {}"
consts
  cycle :: "'a list => 'a stream"
Found termination order: "size <*mlex*> {}"
consts
  siterate :: "('a => 'a) => 'a => 'a stream"
consts
  flat :: "'a list stream => 'a stream"
Found termination order: "size <*mlex*> {}"
### theory "HOL-Library.BigO"
### 0.988s elapsed time, 3.737s cpu time, 0.855s GC time
consts
  sinterleave :: "'a stream => 'a stream => 'a stream"
consts
  szip :: "'a stream => 'b stream => ('a * 'b) stream"
Found termination order: "size <*mlex*> {}"
consts
  smap2 :: "('a => 'b => 'c) => 'a stream => 'b stream => 'c stream"
### theory "HOL-Library.Stream"
### 1.107s elapsed time, 4.069s cpu time, 0.931s GC time
Found termination order: "size <*mlex*> {}"
consts
  finU_dom :: "'a list => nat set"
consts
  finT_range :: "'a list list => 'a set"
consts
  nticks :: "nat => 'a list list"
Found termination order: "size <*mlex*> {}"
consts
  fin_find1nonemp :: "'a list list => 'a list"
consts
  fin_find1nonemp_index :: "'a list list => nat"
consts
  fin_length :: "'a list list => nat"
Found termination order: "size <*mlex*> {}"
consts
  inf_nth :: "(nat => 'a list) => nat => 'a"
consts
  inf_prefix :: "'a list => (nat => 'a) => nat => bool"
consts
  fin_prefix :: "'a list => 'a list => bool"
consts
  fin_truncate :: "'a list => nat => 'a list"
consts
  inf_truncate :: "(nat => 'a) => nat => 'a list"
Found termination order: "(%p. size (fst p)) <*mlex*> {}"
consts
  fin_msg :: "nat => 'a list list => bool"
consts
  inf_make_untimed1 :: "(nat => 'a list) => nat => 'a"
Found termination order: "size <*mlex*> {}"
consts
  fin_tm :: "'a list list => nat => nat"
consts
  fst_remdups :: "'a list => 'a list"
Found termination order: "(%p. size (snd p)) <*mlex*> {}"
Found termination order: "(%p. size_list length (fst p)) <*mlex*> {}"
Found termination order: "size <*mlex*> {}"
Found termination order: "(%p. size (snd p)) <*mlex*> {}"
consts
  infU_get_prefix :: "(nat => 'a) => nat => 'a list"
consts
  fin_merge_ti :: "'a list list => 'a list list => 'a list list"
consts
  fin_last_ti :: "'a list list => nat => 'a list"
consts
  inf_last_ti :: "(nat => 'a list) => nat => 'a list"
### theory "HOL-Library.Tree"
### 2.060s elapsed time, 6.584s cpu time, 1.244s GC time
Loading theory "Draft.Templates" (required by "Draft.FR_proofMoreTemplates" via "Draft.ExtrEqs")
### theory "Draft.stream"
### 1.871s elapsed time, 5.767s cpu time, 1.172s GC time
Loading theory "Draft.FR_types" (required by "Draft.FR_proofMoreTemplates" via "Draft.FR_proof" via "Draft.FR")
datatype template_term
=
     t_empty
   | template_app of template_term * template_term
   | template_hole of int
   | template_var of int
datatype sign
= equals | greater_equals | greater_than | less_equals | less_than
datatype template
=
     template_bimplication of template * template
   | template_dunno
   | template_equation of template_term * template_term
   | template_implication of template list * template
   | template_inequation of sign * template_term * template_term
   | template_negation of template
   | template_predicate of template_term
constructor t_empty: template_term
constructor template_app: template_term * template_term -> template_term
constructor template_hole: int -> template_term
constructor template_var: int -> template_term
constructor equals: sign
constructor greater_equals: sign
constructor greater_than: sign
constructor less_equals: sign
constructor less_than: sign
constructor template_bimplication: template * template -> template
constructor template_dunno: template
constructor template_equation: template_term * template_term -> template
constructor template_implication: template list * template -> template
constructor template_inequation:
   sign * template_term * template_term -> template
constructor template_negation: template -> template
constructor template_predicate: template_term -> template
val vfs = fn: term -> (indexname * typ) list * (string * typ) list
val indexOf = fn: ''a list -> ''a -> int -> int
val has_eq = fn: term -> bool
val term2template = fn:
   (indexname * typ) list -> (string * typ) list -> term -> template_term
val lemma2predicate = fn: term -> term -> template
val makeTemplatewithContext = fn: term -> term -> template
val lemma2template = fn: term -> template
val thm2template = fn: thm -> template
val tterm2string = fn: template_term -> string
val template2string = fn: template -> string
val t = "height ?t <= size ?t": thm
val th =
   Const ("HOL.Trueprop", "bool => prop") $
     (Const ("Orderings.ord_class.less_eq", "nat => nat => bool") $
       (Const ("Tree.height_class.height", "?'a tree => nat") $
         Var (("t", 0), "?'a tree")) $
       (Const ("Nat.size_class.size", "?'a tree => nat") $
         Var (("t", 0), "?'a tree"))):
   term
### theory "Draft.Templates"
### 0.055s elapsed time, 0.115s cpu time, 0.000s GC time
Loading theory "Draft.ExtrEqs" (required by "Draft.FR_proofMoreTemplates")
### theory "Draft.FR_types"
### 0.710s elapsed time, 1.713s cpu time, 0.722s GC time
Loading theory "Draft.FR" (required by "Draft.FR_proofMoreTemplates" via "Draft.FR_proof")
val eqpattern =
   Pattern
    (
       Const ("HOL.Trueprop", "bool => prop") $
         (Const ("HOL.eq", "?'a => ?'a => bool") $
           Var (("_dummy_", 1), "?'a") $ Var (("_dummy_", 2), "?'a"))
       ):
   term Find_Theorems.criterion
val badeqpattern = Pattern (Const ("Pure.eq", "?'a => ?'a => prop")):
   term Find_Theorems.criterion
val undefpattern =
   Pattern
    (
       Const ("HOL.Trueprop", "bool => prop") $
         (Const ("HOL.eq", "?'a => ?'a => bool") $
           Var (("_dummy_", 1), "?'a") $ Const ("HOL.undefined", "?'a"))
       ):
   term Find_Theorems.criterion
val thmpattern =
   Pattern
    (Const ("HOL.Trueprop", "bool => prop") $ Var (("_dummy_", 1), "bool")):
   term Find_Theorems.criterion
val badnames =
   ["*nitpick*", "*Nitpick*", "*full_exhaustive*", "*_def*", "Enum.finite*",
    "*Quickcheck*", "ATP*", "*Nunchaku*", "*Code*", "*BNF*", "*SMT*",
    "*.*.*"]:
   string list
val unwanted_names =
   [(false, Name "*nitpick*"), (false, Name "*Nitpick*"),
    (false, Name "*full_exhaustive*"), (false, Name "*_def*"),
    (false, Name "Enum.finite*"), (false, Name "*Quickcheck*"),
    (false, Name "ATP*"), (false, Name "*Nunchaku*"),
    (false, Name "*Code*"), (false, Name "*BNF*"), (false, Name "*SMT*"),
    (false, Name "*.*.*")]:
   (bool * term Find_Theorems.criterion) list
val has_vars = fn: term -> bool
val get_all_eqs = fn: string -> Proof.context -> (string * thm) list
val get_all_thms = fn: string -> Proof.context -> (string * thm) list
val get_noneq_thms = fn: string -> Proof.context -> (string * thm) list
val template_eqs = fn:
   string -> Proof.context -> (string * thm * template) list
val template_thms = fn:
   string -> Proof.context -> (string * thm * template) list
### theory "Draft.ExtrEqs"
### 0.745s elapsed time, 1.777s cpu time, 0.722s GC time
### theory "Draft.FR"
### 0.125s elapsed time, 0.188s cpu time, 0.000s GC time
Loading theory "Draft.FR_proof" (required by "Draft.FR_proofMoreTemplates")
### theory "Draft.FR_proof"
### 0.223s elapsed time, 0.260s cpu time, 0.053s GC time
Loading theory "Draft.FR_proofMoreTemplates"
val templateLemmas =
   [("FR_proof.FlexRayArch_CorrectSheaf",
     "FlexRayArch ?n ?nReturn ?nC ?nStore ?nGet ==> CorrectSheaf ?n",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_app
                   (template_app (template_hole 1, template_var 4),
                    template_var 3),
                  template_var 2),
                template_var 1),
              template_var 0)
            )],
       template_predicate
        (template_app (template_hole 0, template_var 4)))),
    ("FR_proof.main_fr_refinement",
     "FlexRayArch ?n ?nReturn ?nC ?nStore ?nGet ==>
      FlexRay ?n ?nReturn ?nC ?nStore ?nGet",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_app
                   (template_app (template_hole 1, template_var 4),
                    template_var 3),
                  template_var 2),
                template_var 1),
              template_var 0)
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_app
                (template_app
                  (template_app (template_hole 0, template_var 4),
                   template_var 3),
                 template_var 2),
               template_var 1),
             template_var 0)
           ))),
    ("FR_proof.msg_nGet1",
     "FlexRayController (?nReturn ?k) ?recv (?nC ?k) (?nStore ?k)
       (?nSend ?k) (?nGet ?k) ==>
      msg (Suc 0) (?nGet ?k)",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_app
                   (template_app
                     (template_app
                       (template_hole 3,
                        template_app (template_var 6, template_var 5)),
                      template_var 4),
                    template_app (template_var 3, template_var 5)),
                  template_app (template_var 2, template_var 5)),
                template_app (template_var 1, template_var 5)),
              template_app (template_var 0, template_var 5))
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 2,
               template_app (template_hole 1, template_hole 0)),
             template_app (template_var 0, template_var 5))
           ))),
    ("FR_proof.Scheduler_L1",
     "[| Scheduler ?C ?activation; ?activation ?t ~= [] |]
      ==> ?t mod cycleLength ?C mem schedule ?C",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 7, template_var 2),
              template_var 1)
            ),
        template_negation
         (
            template_equation
             (template_app (template_var 1, template_var 0),
              template_hole 4)
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 3,
               template_app
                (template_app (template_hole 2, template_var 0),
                 template_app (template_hole 1, template_var 2))),
             template_app (template_hole 0, template_var 2))
           ))),
    ("FR_proof.Scheduler_L3",
     "[| Scheduler ?C ?activation; ?t mod cycleLength ?C mem schedule ?C |]
      ==> ?activation ?t ~= []",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 7, template_var 2),
              template_var 1)
            ),
        template_predicate
         (
            template_app
             (template_app
               (template_hole 6,
                template_app
                 (template_app (template_hole 5, template_var 0),
                  template_app (template_hole 4, template_var 2))),
              template_app (template_hole 3, template_var 2))
            )],
       template_negation
        (
           template_equation
            (template_app (template_var 1, template_var 0), template_hole 0)
           ))),
    ("FR_proof.Scheduler_L2",
     "[| Scheduler ?C ?activation;
         ~ ?t mod cycleLength ?C mem schedule ?C |]
      ==> ?activation ?t = []",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 7, template_var 2),
              template_var 1)
            ),
        template_negation
         (
            template_predicate
             (
                template_app
                 (template_app
                   (template_hole 5,
                    template_app
                     (template_app (template_hole 4, template_var 0),
                      template_app (template_hole 3, template_var 2))),
                  template_app (template_hole 2, template_var 2))
                )
            )],
       template_equation
        (template_app (template_var 1, template_var 0), template_hole 0))),
    ("FR_proof.Send_L1",
     "[| Send ?return ?send ?get ?activation; ?send ?t ~= [] |]
      ==> ?activation ?t ~= []",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_app (template_hole 5, template_var 4),
                  template_var 3),
                template_var 2),
              template_var 1)
            ),
        template_negation
         (
            template_equation
             (template_app (template_var 3, template_var 0),
              template_hole 2)
            )],
       template_negation
        (
           template_equation
            (template_app (template_var 1, template_var 0), template_hole 0)
           ))),
    ("FR_proof.length_nGet1",
     "FlexRayController (?nReturn ?k) ?recv (?nC ?k) (?nStore ?k)
       (?nSend ?k) (?nGet ?k) ==>
      length (?nGet ?k ?t) <= Suc 0",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_app
                   (template_app
                     (template_app
                       (template_hole 4,
                        template_app (template_var 7, template_var 6)),
                      template_var 5),
                    template_app (template_var 4, template_var 6)),
                  template_app (template_var 3, template_var 6)),
                template_app (template_var 2, template_var 6)),
              template_app (template_var 1, template_var 6))
            )],
       template_inequation
        (less_equals,
         template_app
          (template_hole 2,
           template_app
            (template_app (template_var 1, template_var 6),
             template_var 0)),
         template_app (template_hole 1, template_hole 0)))),
    ("FR_proof.Scheduler_L4",
     "[| Scheduler ?C ?activation; ?t mod cycleLength ?C mem schedule ?C |]
      ==> ?activation ?t = [?t mod cycleLength ?C]",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 7, template_var 2),
              template_var 1)
            ),
        template_predicate
         (
            template_app
             (template_app
               (template_hole 6,
                template_app
                 (template_app (template_hole 5, template_var 0),
                  template_app (template_hole 4, template_var 2))),
              template_app (template_hole 3, template_var 2))
            )],
       template_equation
        (template_app (template_var 1, template_var 0),
         template_app
          (template_app
            (template_hole 1,
             template_app
              (template_app (template_hole 5, template_var 0),
               template_app (template_hole 4, template_var 2))),
           template_hole 0)))),
    ("FR_proof.Broadcast_nSend_empty1",
     "[| Broadcast ?n ?nSend ?recv; ALL k<?n. ?nSend k ?t = [] |]
      ==> ?recv ?t = []",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app (template_hole 5, template_var 3),
                template_var 2),
              template_var 1)
            ),
        template_predicate (template_app (template_hole 4, t_empty))],
       template_equation
        (template_app (template_var 1, template_var 0), template_hole 0))),
    ("FR_proof.msg_nSend",
     "[| BusInterface ?activation (?nReturn ?i) ?recv (?nStore ?i)
          (?nSend ?i) (?nGet ?i);
         msg (Suc 0) (?nReturn ?i) |]
      ==> msg (Suc 0) (?nSend ?i)",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_app
                   (template_app
                     (template_app (template_hole 3, template_var 6),
                      template_app (template_var 5, template_var 4)),
                    template_var 3),
                  template_app (template_var 2, template_var 4)),
                template_app (template_var 1, template_var 4)),
              template_app (template_var 0, template_var 4))
            ),
        template_predicate
         (
            template_app
             (template_app
               (template_hole 2,
                template_app (template_hole 1, template_hole 0)),
              template_app (template_var 5, template_var 4))
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 2,
               template_app (template_hole 1, template_hole 0)),
             template_app (template_var 1, template_var 4))
           ))),
    ("FR_proof.Send_L2",
     "[| Send ?return ?send ?get ?activation; ?activation ?t ~= [];
         ?return ?t ~= [] |]
      ==> ?send ?t ~= []",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_app (template_hole 5, template_var 4),
                  template_var 3),
                template_var 2),
              template_var 1)
            ),
        template_negation
         (
            template_equation
             (template_app (template_var 1, template_var 0),
              template_hole 2)
            ),
        template_negation
         (
            template_equation
             (template_app (template_var 4, template_var 0),
              template_hole 0)
            )],
       template_negation
        (
           template_equation
            (template_app (template_var 3, template_var 0), template_hole 0)
           ))),
    ("FR_proof.msg_nGet2",
     "[| ALL i<?n.
            FlexRayController (?nReturn i) ?recv (?nC i) (?nStore i)
             (?nSend i) (?nGet i);
         ?k < ?n |]
      ==> msg (Suc 0) (?nGet ?k)",
     template_implication
      ([template_predicate (template_app (template_hole 6, t_empty)),
        template_inequation (less_than, template_var 0, template_var 7)],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 2,
               template_app (template_hole 1, template_hole 0)),
             template_app (template_var 1, template_var 0))
           ))),
    ("FR_proof.length_nSend",
     "[| BusInterface ?activation (?nReturn ?i) ?recv (?nStore ?i)
          (?nSend ?i) (?nGet ?i);
         ALL t. length (?nReturn ?i t) <= Suc 0 |]
      ==> length (?nSend ?i ?t) <= Suc 0",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_app
                   (template_app
                     (template_app (template_hole 5, template_var 7),
                      template_app (template_var 6, template_var 5)),
                    template_var 4),
                  template_app (template_var 3, template_var 5)),
                template_app (template_var 2, template_var 5)),
              template_app (template_var 1, template_var 5))
            ),
        template_predicate (template_app (template_hole 4, t_empty))],
       template_inequation
        (less_equals,
         template_app
          (template_hole 2,
           template_app
            (template_app (template_var 2, template_var 5),
             template_var 0)),
         template_app (template_hole 1, template_hole 0)))),
    ("FR_proof.fr_Send1",
     "[| FlexRayController (?nReturn ?i) ?recv (?nC ?i) (?nStore ?i)
          (?nSend ?i) (?nGet ?i);
         ~ ?t mod cycleLength (?nC ?i) mem schedule (?nC ?i) |]
      ==> ?nSend ?i ?t = []",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_app
                   (template_app
                     (template_app
                       (template_hole 7,
                        template_app (template_var 7, template_var 6)),
                      template_var 5),
                    template_app (template_var 4, template_var 6)),
                  template_app (template_var 3, template_var 6)),
                template_app (template_var 2, template_var 6)),
              template_app (template_var 1, template_var 6))
            ),
        template_negation
         (
            template_predicate
             (
                template_app
                 (template_app
                   (template_hole 5,
                    template_app
                     (template_app (template_hole 4, template_var 0),
                      template_app
                       (template_hole 3,
                        template_app (template_var 4, template_var 6)))),
                  template_app
                   (template_hole 2,
                    template_app (template_var 4, template_var 6)))
                )
            )],
       template_equation
        (template_app
          (template_app (template_var 2, template_var 6), template_var 0),
         template_hole 0))),
    ("FR_proof.fr_nGet2a",
     "[| FlexRayController (?nReturn ?k) ?recv (?nC ?k) (?nStore ?k)
          (?nSend ?k) (?nGet ?k);
         ~ ?t mod cycleLength (?nC ?k) mem schedule (?nC ?k) |]
      ==> ?nGet ?k ?t = []",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_app
                   (template_app
                     (template_app
                       (template_hole 7,
                        template_app (template_var 7, template_var 6)),
                      template_var 5),
                    template_app (template_var 4, template_var 6)),
                  template_app (template_var 3, template_var 6)),
                template_app (template_var 2, template_var 6)),
              template_app (template_var 1, template_var 6))
            ),
        template_negation
         (
            template_predicate
             (
                template_app
                 (template_app
                   (template_hole 5,
                    template_app
                     (template_app (template_hole 4, template_var 0),
                      template_app
                       (template_hole 3,
                        template_app (template_var 4, template_var 6)))),
                  template_app
                   (template_hole 2,
                    template_app (template_var 4, template_var 6)))
                )
            )],
       template_equation
        (template_app
          (template_app (template_var 1, template_var 6), template_var 0),
         template_hole 0))),
    ("FR_proof.disjointFrame_L2",
     "[| DisjointSchedules ?n ?nC; IdenticCycleLength ?n ?nC;
         ALL i<?n.
            FlexRayController (?nReturn i) ?rcv (?nC i) (?nStore i)
             (?nSend i) (?nGet i) |]
      ==> inf_disj ?n ?nSend",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 6, template_var 6),
              template_var 5)
            ),
        template_predicate
         (
            template_app
             (template_app (template_hole 5, template_var 6),
              template_var 5)
            ),
        template_predicate (template_app (template_hole 4, t_empty))],
       template_predicate
        (
           template_app
            (template_app (template_hole 0, template_var 6), template_var 1)
           ))),
    ("FR_proof.fr_nGet1a",
     "[| FlexRayController (?nReturn ?k) ?recv (?nC ?k) (?nStore ?k)
          (?nSend ?k) (?nGet ?k);
         ?t mod cycleLength (?nC ?k) mem schedule (?nC ?k) |]
      ==> ?nGet ?k ?t = [?t mod cycleLength (?nC ?k)]",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_app
                   (template_app
                     (template_app
                       (template_hole 7,
                        template_app (template_var 7, template_var 6)),
                      template_var 5),
                    template_app (template_var 4, template_var 6)),
                  template_app (template_var 3, template_var 6)),
                template_app (template_var 2, template_var 6)),
              template_app (template_var 1, template_var 6))
            ),
        template_predicate
         (
            template_app
             (template_app
               (template_hole 6,
                template_app
                 (template_app (template_hole 5, template_var 0),
                  template_app
                   (template_hole 4,
                    template_app (template_var 4, template_var 6)))),
              template_app
               (template_hole 3,
                template_app (template_var 4, template_var 6)))
            )],
       template_equation
        (template_app
          (template_app (template_var 1, template_var 6), template_var 0),
         template_app
          (template_app
            (template_hole 1,
             template_app
              (template_app (template_hole 5, template_var 0),
               template_app
                (template_hole 4,
                 template_app (template_var 4, template_var 6)))),
           template_hole 0)))),
    ("FR_proof.FlexRayArch_FrameTransmission",
     "[| FlexRayArch ?n ?nReturn ?nC ?nStore ?nGet;
         ALL i<?n. msg (Suc 0) (?nReturn i); DisjointSchedules ?n ?nC;
         IdenticCycleLength ?n ?nC |]
      ==> FrameTransmission ?n ?nStore ?nReturn ?nGet ?nC",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_app
                   (template_app (template_hole 9, template_var 4),
                    template_var 3),
                  template_var 2),
                template_var 1),
              template_var 0)
            ),
        template_predicate (template_app (template_hole 8, t_empty)),
        template_predicate
         (
            template_app
             (template_app (template_hole 2, template_var 4),
              template_var 2)
            ),
        template_predicate
         (
            template_app
             (template_app (template_hole 1, template_var 4),
              template_var 2)
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_app
                (template_app
                  (template_app (template_hole 0, template_var 4),
                   template_var 1),
                 template_var 3),
               template_var 0),
             template_var 2)
           ))),
    ("FR_proof.FlexRayArch_nGet",
     "[| FlexRayArch ?n ?nReturn ?nC ?nStore ?nGet;
         ALL i<?n. msg (Suc 0) (?nReturn i); DisjointSchedules ?n ?nC;
         IdenticCycleLength ?n ?nC; ?i < ?n |]
      ==> msg (Suc 0) (?nGet ?i)",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_app
                   (template_app (template_hole 9, template_var 5),
                    template_var 4),
                  template_var 3),
                template_var 2),
              template_var 1)
            ),
        template_predicate (template_app (template_hole 8, t_empty)),
        template_predicate
         (
            template_app
             (template_app (template_hole 2, template_var 5),
              template_var 3)
            ),
        template_predicate
         (
            template_app
             (template_app (template_hole 1, template_var 5),
              template_var 3)
            ),
        template_inequation (less_than, template_var 0, template_var 5)],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 0,
               template_app (template_hole 4, template_hole 3)),
             template_app (template_var 1, template_var 0))
           ))),
    ("FR_proof.FlexRayArch_nStore",
     "[| FlexRayArch ?n ?nReturn ?nC ?nStore ?nGet;
         ALL i<?n. msg (Suc 0) (?nReturn i); DisjointSchedules ?n ?nC;
         IdenticCycleLength ?n ?nC; ?i < ?n |]
      ==> msg (Suc 0) (?nStore ?i)",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_app
                   (template_app (template_hole 8, template_var 5),
                    template_var 4),
                  template_var 3),
                template_var 2),
              template_var 1)
            ),
        template_predicate (template_app (template_hole 7, t_empty)),
        template_predicate
         (
            template_app
             (template_app (template_hole 1, template_var 5),
              template_var 3)
            ),
        template_predicate
         (
            template_app
             (template_app (template_hole 0, template_var 5),
              template_var 3)
            ),
        template_inequation (less_than, template_var 0, template_var 5)],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 4,
               template_app (template_hole 3, template_hole 2)),
             template_app (template_var 2, template_var 0))
           ))),
    ("FR_proof.fr_nGet2",
     "[| ALL i<?n.
            FlexRayController (?nReturn i) ?recv (?nC i) (?nStore i)
             (?nSend i) (?nGet i);
         ~ ?t mod cycleLength (?nC ?k) mem schedule (?nC ?k); ?k < ?n |]
      ==> ?nGet ?k ?t = []",
     template_implication
      ([template_predicate (template_app (template_hole 10, t_empty)),
        template_negation
         (
            template_predicate
             (
                template_app
                 (template_app
                   (template_hole 5,
                    template_app
                     (template_app (template_hole 4, template_var 1),
                      template_app
                       (template_hole 3,
                        template_app (template_var 5, template_var 0)))),
                  template_app
                   (template_hole 2,
                    template_app (template_var 5, template_var 0)))
                )
            ),
        template_inequation (less_than, template_var 0, template_var 8)],
       template_equation
        (template_app
          (template_app (template_var 2, template_var 0), template_var 1),
         template_hole 0))),
    ("FR_proof.fr_refinement_FrameTransmission",
     "[| Cable ?n ?nSend ?recv;
         ALL i<?n.
            FlexRayController (?nReturn i) ?recv (?nC i) (?nStore i)
             (?nSend i) (?nGet i);
         DisjointSchedules ?n ?nC; IdenticCycleLength ?n ?nC |]
      ==> FrameTransmission ?n ?nStore ?nReturn ?nGet ?nC",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app (template_hole 7, template_var 6),
                template_var 5),
              template_var 4)
            ),
        template_predicate (template_app (template_hole 6, t_empty)),
        template_predicate
         (
            template_app
             (template_app (template_hole 2, template_var 6),
              template_var 2)
            ),
        template_predicate
         (
            template_app
             (template_app (template_hole 1, template_var 6),
              template_var 2)
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_app
                (template_app
                  (template_app (template_hole 0, template_var 6),
                   template_var 1),
                 template_var 3),
               template_var 0),
             template_var 2)
           ))),
    ("FR_proof.fr_nGet1",
     "[| ALL i<?n.
            FlexRayController (?nReturn i) ?recv (?nC i) (?nStore i)
             (?nSend i) (?nGet i);
         ?t mod cycleLength (?nC ?k) mem schedule (?nC ?k); ?k < ?n |]
      ==> ?nGet ?k ?t = [?t mod cycleLength (?nC ?k)]",
     template_implication
      ([template_predicate (template_app (template_hole 10, t_empty)),
        template_predicate
         (
            template_app
             (template_app
               (template_hole 6,
                template_app
                 (template_app (template_hole 5, template_var 1),
                  template_app
                   (template_hole 4,
                    template_app (template_var 5, template_var 0)))),
              template_app
               (template_hole 3,
                template_app (template_var 5, template_var 0)))
            ),
        template_inequation (less_than, template_var 0, template_var 8)],
       template_equation
        (template_app
          (template_app (template_var 2, template_var 0), template_var 1),
         template_app
          (template_app
            (template_hole 1,
             template_app
              (template_app (template_hole 5, template_var 1),
               template_app
                (template_hole 4,
                 template_app (template_var 5, template_var 0)))),
           template_hole 0)))),
    ("FR_proof.correct_DisjointSchedules1",
     "[| DisjointSchedules ?n ?nC; IdenticCycleLength ?n ?nC;
         ?t mod cycleLength (?nC ?i) mem schedule (?nC ?i); ?i < ?n;
         ?j < ?n; ?i ~= ?j |]
      ==> ~ ?t mod cycleLength (?nC ?j) mem schedule (?nC ?j)",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 8, template_var 4),
              template_var 3)
            ),
        template_predicate
         (
            template_app
             (template_app (template_hole 7, template_var 4),
              template_var 3)
            ),
        template_predicate
         (
            template_app
             (template_app
               (template_hole 6,
                template_app
                 (template_app (template_hole 5, template_var 2),
                  template_app
                   (template_hole 4,
                    template_app (template_var 3, template_var 1)))),
              template_app
               (template_hole 3,
                template_app (template_var 3, template_var 1)))
            ),
        template_inequation (less_than, template_var 1, template_var 4),
        template_inequation (less_than, template_var 0, template_var 4),
        template_negation
         (template_equation (template_var 1, template_var 0))],
       template_negation
        (
           template_predicate
            (
               template_app
                (template_app
                  (template_hole 6,
                   template_app
                    (template_app (template_hole 5, template_var 2),
                     template_app
                      (template_hole 4,
                       template_app (template_var 3, template_var 0)))),
                 template_app
                  (template_hole 3,
                   template_app (template_var 3, template_var 0)))
               )
           ))),
    ("FR_proof.fr_Send2",
     "[| ALL i<?n.
            FlexRayController (?nReturn i) ?recv (?nC i) (?nStore i)
             (?nSend i) (?nGet i);
         DisjointSchedules ?n ?nC; IdenticCycleLength ?n ?nC;
         ?t mod cycleLength (?nC ?k) mem schedule (?nC ?k); ?k < ?n |]
      ==> ?nSend ?k ?t = ?nReturn ?k ?t",
     template_implication
      ([template_predicate (template_app (template_hole 10, t_empty)),
        template_predicate
         (
            template_app
             (template_app (template_hole 6, template_var 8),
              template_var 5)
            ),
        template_predicate
         (
            template_app
             (template_app (template_hole 5, template_var 8),
              template_var 5)
            ),
        template_predicate
         (
            template_app
             (template_app
               (template_hole 4,
                template_app
                 (template_app (template_hole 3, template_var 1),
                  template_app
                   (template_hole 2,
                    template_app (template_var 5, template_var 0)))),
              template_app
               (template_hole 1,
                template_app (template_var 5, template_var 0)))
            ),
        template_inequation (less_than, template_var 0, template_var 8)],
       template_equation
        (template_app
          (template_app (template_var 3, template_var 0), template_var 1),
         template_app
          (template_app (template_var 7, template_var 0),
           template_var 1)))),
    ("FR_proof.fr_nStore_empty1",
     "[| Cable ?n ?nSend ?recv;
         ALL i<?n.
            FlexRayController (?nReturn i) ?recv (?nC i) (?nStore i)
             (?nSend i) (?nGet i);
         DisjointSchedules ?n ?nC; IdenticCycleLength ?n ?nC;
         ?t mod cycleLength (?nC ?k) mem schedule (?nC ?k); ?k < ?n |]
      ==> ?nStore ?k ?t = []",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app (template_hole 12, template_var 8),
                template_var 7),
              template_var 6)
            ),
        template_predicate (template_app (template_hole 11, t_empty)),
        template_predicate
         (
            template_app
             (template_app (template_hole 7, template_var 8),
              template_var 4)
            ),
        template_predicate
         (
            template_app
             (template_app (template_hole 6, template_var 8),
              template_var 4)
            ),
        template_predicate
         (
            template_app
             (template_app
               (template_hole 5,
                template_app
                 (template_app (template_hole 4, template_var 1),
                  template_app
                   (template_hole 3,
                    template_app (template_var 4, template_var 0)))),
              template_app
               (template_hole 2,
                template_app (template_var 4, template_var 0)))
            ),
        template_inequation (less_than, template_var 0, template_var 8)],
       template_equation
        (template_app
          (template_app (template_var 3, template_var 0), template_var 1),
         template_hole 0))),
    ("FR_proof.disjointFrame_L1",
     "[| DisjointSchedules ?n ?nC; IdenticCycleLength ?n ?nC;
         ALL i<?n.
            FlexRayController (?nReturn i) ?rcv (?nC i) (?nStore i)
             (?nSend i) (?nGet i);
         ?nSend ?i ?t ~= []; ?i < ?n; ?j < ?n; ?i ~= ?j |]
      ==> ?nSend ?j ?t = []",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 9, template_var 9),
              template_var 8)
            ),
        template_predicate
         (
            template_app
             (template_app (template_hole 8, template_var 9),
              template_var 8)
            ),
        template_predicate (template_app (template_hole 7, t_empty)),
        template_negation
         (
            template_equation
             (template_app
               (template_app (template_var 4, template_var 2),
                template_var 1),
              template_hole 1)
            ),
        template_inequation (less_than, template_var 2, template_var 9),
        template_inequation (less_than, template_var 0, template_var 9),
        template_negation
         (template_equation (template_var 2, template_var 0))],
       template_equation
        (template_app
          (template_app (template_var 4, template_var 0), template_var 1),
         template_hole 1))),
    ("FR_proof.fr_Send3",
     "[| ALL i<?n.
            FlexRayController (?nReturn i) ?recv (?nC i) (?nStore i)
             (?nSend i) (?nGet i);
         DisjointSchedules ?n ?nC; IdenticCycleLength ?n ?nC;
         ?t mod cycleLength (?nC ?k) mem schedule (?nC ?k); ?k < ?n;
         ?nReturn ?k ?t ~= [] |]
      ==> ?nSend ?k ?t ~= []",
     template_implication
      ([template_predicate (template_app (template_hole 12, t_empty)),
        template_predicate
         (
            template_app
             (template_app (template_hole 8, template_var 8),
              template_var 5)
            ),
        template_predicate
         (
            template_app
             (template_app (template_hole 7, template_var 8),
              template_var 5)
            ),
        template_predicate
         (
            template_app
             (template_app
               (template_hole 6,
                template_app
                 (template_app (template_hole 5, template_var 1),
                  template_app
                   (template_hole 4,
                    template_app (template_var 5, template_var 0)))),
              template_app
               (template_hole 3,
                template_app (template_var 5, template_var 0)))
            ),
        template_inequation (less_than, template_var 0, template_var 8),
        template_negation
         (
            template_equation
             (template_app
               (template_app (template_var 7, template_var 0),
                template_var 1),
              template_hole 0)
            )],
       template_negation
        (
           template_equation
            (template_app
              (template_app (template_var 3, template_var 0),
               template_var 1),
             template_hole 0)
           ))),
    ("FR_proof.fr_nC_Send",
     "[| ALL i<?n.
            FlexRayController (?nReturn i) ?recv (?nC i) (?nStore i)
             (?nSend i) (?nGet i);
         ?k < ?n; DisjointSchedules ?n ?nC; IdenticCycleLength ?n ?nC;
         ?t mod cycleLength (?nC ?k) mem schedule (?nC ?k) |]
      ==> ALL j. j < ?n & j ~= ?k --> ?nSend j ?t = []",
     template_implication
      ([template_predicate (template_app (template_hole 14, t_empty)),
        template_inequation (less_than, template_var 1, template_var 8),
        template_predicate
         (
            template_app
             (template_app (template_hole 10, template_var 8),
              template_var 5)
            ),
        template_predicate
         (
            template_app
             (template_app (template_hole 9, template_var 8),
              template_var 5)
            ),
        template_predicate
         (
            template_app
             (template_app
               (template_hole 8,
                template_app
                 (template_app (template_hole 7, template_var 0),
                  template_app
                   (template_hole 6,
                    template_app (template_var 5, template_var 1)))),
              template_app
               (template_hole 5,
                template_app (template_var 5, template_var 1)))
            )],
       template_predicate (template_app (template_hole 14, t_empty)))),
    ("FR_proof.disjointFrame_L3",
     "[| DisjointSchedules ?n ?nC; IdenticCycleLength ?n ?nC;
         ALL i<?n.
            FlexRayController (?nReturn i) ?rcv (?nC i) (?nStore i)
             (?nSend i) (?nGet i);
         ?t mod cycleLength (?nC ?i) mem schedule (?nC ?i); ?i < ?n;
         ?j < ?n; ?i ~= ?j |]
      ==> ?nSend ?j ?t = []",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 13, template_var 9),
              template_var 8)
            ),
        template_predicate
         (
            template_app
             (template_app (template_hole 12, template_var 9),
              template_var 8)
            ),
        template_predicate (template_app (template_hole 11, t_empty)),
        template_predicate
         (
            template_app
             (template_app
               (template_hole 7,
                template_app
                 (template_app (template_hole 6, template_var 2),
                  template_app
                   (template_hole 5,
                    template_app (template_var 8, template_var 1)))),
              template_app
               (template_hole 4,
                template_app (template_var 8, template_var 1)))
            ),
        template_inequation (less_than, template_var 1, template_var 9),
        template_inequation (less_than, template_var 0, template_var 9),
        template_negation
         (template_equation (template_var 1, template_var 0))],
       template_equation
        (template_app
          (template_app (template_var 4, template_var 0), template_var 2),
         template_hole 0))),
    ("FR_proof.fr_Send7",
     "[| ALL i<?n.
            FlexRayController (?nReturn i) ?recv (?nC i) (?nStore i)
             (?nSend i) (?nGet i);
         DisjointSchedules ?n ?nC; IdenticCycleLength ?n ?nC;
         ?t mod cycleLength (?nC ?k) mem schedule (?nC ?k); ?k < ?n;
         ?j < ?n; ?nReturn ?k ?t = [] |]
      ==> ?nSend ?j ?t = []",
     template_implication
      ([template_predicate (template_app (template_hole 11, t_empty)),
        template_predicate
         (
            template_app
             (template_app (template_hole 7, template_var 9),
              template_var 6)
            ),
        template_predicate
         (
            template_app
             (template_app (template_hole 6, template_var 9),
              template_var 6)
            ),
        template_predicate
         (
            template_app
             (template_app
               (template_hole 5,
                template_app
                 (template_app (template_hole 4, template_var 2),
                  template_app
                   (template_hole 3,
                    template_app (template_var 6, template_var 1)))),
              template_app
               (template_hole 2,
                template_app (template_var 6, template_var 1)))
            ),
        template_inequation (less_than, template_var 1, template_var 9),
        template_inequation (less_than, template_var 0, template_var 9),
        template_equation
         (template_app
           (template_app (template_var 8, template_var 1), template_var 2),
          template_hole 0)],
       template_equation
        (template_app
          (template_app (template_var 4, template_var 0), template_var 2),
         template_hole 0))),
    ("FR_proof.msg_nStore",
     "[| ALL i<?n.
            FlexRayController (?nReturn i) ?recv (?nC i) (?nStore i)
             (?nSend i) (?nGet i);
         DisjointSchedules ?n ?nC; IdenticCycleLength ?n ?nC;
         inf_disj ?n ?nSend; ?i < ?n; ALL i<?n. msg (Suc 0) (?nReturn i);
         Cable ?n ?nSend ?recv |]
      ==> msg (Suc 0) (?nStore ?i)",
     template_implication
      ([template_predicate (template_app (template_hole 10, t_empty)),
        template_predicate
         (
            template_app
             (template_app (template_hole 6, template_var 7),
              template_var 4)
            ),
        template_predicate
         (
            template_app
             (template_app (template_hole 5, template_var 7),
              template_var 4)
            ),
        template_predicate
         (
            template_app
             (template_app (template_hole 4, template_var 7),
              template_var 2)
            ),
        template_inequation (less_than, template_var 0, template_var 7),
        template_predicate (template_app (template_hole 10, t_empty)),
        template_predicate
         (
            template_app
             (template_app
               (template_app (template_hole 0, template_var 7),
                template_var 2),
              template_var 5)
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 3,
               template_app (template_hole 2, template_hole 1)),
             template_app (template_var 3, template_var 0))
           ))),
    ("FR_proof.fr_Send8",
     "[| ALL i<?n.
            FlexRayController (?nReturn i) ?recv (?nC i) (?nStore i)
             (?nSend i) (?nGet i);
         DisjointSchedules ?n ?nC; IdenticCycleLength ?n ?nC;
         ?t mod cycleLength (?nC ?k) mem schedule (?nC ?k); ?k < ?n;
         ?nReturn ?k ?t = [] |]
      ==> ~ (EX k<?n. ?nSend k ?t ~= [])",
     template_implication
      ([template_predicate (template_app (template_hole 14, t_empty)),
        template_predicate
         (
            template_app
             (template_app (template_hole 10, template_var 8),
              template_var 5)
            ),
        template_predicate
         (
            template_app
             (template_app (template_hole 9, template_var 8),
              template_var 5)
            ),
        template_predicate
         (
            template_app
             (template_app
               (template_hole 8,
                template_app
                 (template_app (template_hole 7, template_var 1),
                  template_app
                   (template_hole 6,
                    template_app (template_var 5, template_var 0)))),
              template_app
               (template_hole 5,
                template_app (template_var 5, template_var 0)))
            ),
        template_inequation (less_than, template_var 0, template_var 8),
        template_equation
         (template_app
           (template_app (template_var 7, template_var 0), template_var 1),
          template_hole 3)],
       template_negation
        (template_predicate (template_app (template_hole 1, t_empty))))),
    ("FR_proof.fr_Send6",
     "[| ALL i<?n.
            FlexRayController (?nReturn i) ?recv (?nC i) (?nStore i)
             (?nSend i) (?nGet i);
         DisjointSchedules ?n ?nC; IdenticCycleLength ?n ?nC;
         ?t mod cycleLength (?nC ?k) mem schedule (?nC ?k); ?k < ?n;
         ?nReturn ?k ?t ~= [] |]
      ==> EX k<?n. ?nSend k ?t ~= []",
     template_implication
      ([template_predicate (template_app (template_hole 14, t_empty)),
        template_predicate
         (
            template_app
             (template_app (template_hole 10, template_var 8),
              template_var 5)
            ),
        template_predicate
         (
            template_app
             (template_app (template_hole 9, template_var 8),
              template_var 5)
            ),
        template_predicate
         (
            template_app
             (template_app
               (template_hole 8,
                template_app
                 (template_app (template_hole 7, template_var 1),
                  template_app
                   (template_hole 6,
                    template_app (template_var 5, template_var 0)))),
              template_app
               (template_hole 5,
                template_app (template_var 5, template_var 0)))
            ),
        template_inequation (less_than, template_var 0, template_var 8),
        template_negation
         (
            template_equation
             (template_app
               (template_app (template_var 7, template_var 0),
                template_var 1),
              template_hole 2)
            )],
       template_predicate (template_app (template_hole 1, t_empty)))),
    ("FR_proof.fr_Send4",
     "[| ALL i<?n.
            FlexRayController (?nReturn i) ?recv (?nC i) (?nStore i)
             (?nSend i) (?nGet i);
         DisjointSchedules ?n ?nC; IdenticCycleLength ?n ?nC;
         ?t mod cycleLength (?nC ?k) mem schedule (?nC ?k); ?k < ?n;
         ?nReturn ?k ?t ~= [] |]
      ==> EX k. k < ?n --> ?nSend k ?t ~= []",
     template_implication
      ([template_predicate (template_app (template_hole 13, t_empty)),
        template_predicate
         (
            template_app
             (template_app (template_hole 9, template_var 8),
              template_var 5)
            ),
        template_predicate
         (
            template_app
             (template_app (template_hole 8, template_var 8),
              template_var 5)
            ),
        template_predicate
         (
            template_app
             (template_app
               (template_hole 7,
                template_app
                 (template_app (template_hole 6, template_var 1),
                  template_app
                   (template_hole 5,
                    template_app (template_var 5, template_var 0)))),
              template_app
               (template_hole 4,
                template_app (template_var 5, template_var 0)))
            ),
        template_inequation (less_than, template_var 0, template_var 8),
        template_negation
         (
            template_equation
             (template_app
               (template_app (template_var 7, template_var 0),
                template_var 1),
              template_hole 1)
            )],
       template_predicate (template_app (template_hole 0, t_empty)))),
    ("FR_proof.length_nStore",
     "[| ALL i<?n.
            FlexRayController (?nReturn i) ?recv (?nC i) (?nStore i)
             (?nSend i) (?nGet i);
         DisjointSchedules ?n ?nC; IdenticCycleLength ?n ?nC;
         inf_disj ?n ?nSend; ?i < ?n; ALL i<?n. msg (Suc 0) (?nReturn i);
         Broadcast ?n ?nSend ?recv |]
      ==> length (?nStore ?i ?t) <= Suc 0",
     template_implication
      ([template_predicate (template_app (template_hole 12, t_empty)),
        template_predicate
         (
            template_app
             (template_app (template_hole 8, template_var 8),
              template_var 5)
            ),
        template_predicate
         (
            template_app
             (template_app (template_hole 7, template_var 8),
              template_var 5)
            ),
        template_predicate
         (
            template_app
             (template_app (template_hole 6, template_var 8),
              template_var 3)
            ),
        template_inequation (less_than, template_var 1, template_var 8),
        template_predicate (template_app (template_hole 12, t_empty)),
        template_predicate
         (
            template_app
             (template_app
               (template_app (template_hole 2, template_var 8),
                template_var 3),
              template_var 6)
            )],
       template_inequation
        (less_equals,
         template_app
          (template_hole 0,
           template_app
            (template_app (template_var 4, template_var 1),
             template_var 0)),
         template_app (template_hole 4, template_hole 3)))),
    ("FR_proof.fr_Send5",
     "[| ALL i<?n.
            FlexRayController (?nReturn i) ?recv (?nC i) (?nStore i)
             (?nSend i) (?nGet i);
         DisjointSchedules ?n ?nC; IdenticCycleLength ?n ?nC;
         ?t mod cycleLength (?nC ?k) mem schedule (?nC ?k); ?k < ?n;
         ?nReturn ?k ?t ~= []; ALL k<?n. ?nSend k ?t = [] |]
      ==> False",
     template_implication
      ([template_predicate (template_app (template_hole 13, t_empty)),
        template_predicate
         (
            template_app
             (template_app (template_hole 9, template_var 8),
              template_var 5)
            ),
        template_predicate
         (
            template_app
             (template_app (template_hole 8, template_var 8),
              template_var 5)
            ),
        template_predicate
         (
            template_app
             (template_app
               (template_hole 7,
                template_app
                 (template_app (template_hole 6, template_var 1),
                  template_app
                   (template_hole 5,
                    template_app (template_var 5, template_var 0)))),
              template_app
               (template_hole 4,
                template_app (template_var 5, template_var 0)))
            ),
        template_inequation (less_than, template_var 0, template_var 8),
        template_negation
         (
            template_equation
             (template_app
               (template_app (template_var 7, template_var 0),
                template_var 1),
              template_hole 1)
            ),
        template_predicate (template_app (template_hole 13, t_empty))],
       template_predicate (template_hole 0))),
    ("FR_proof.fr_nStore_nReturn3",
     "[| Cable ?n ?nSend ?recv;
         ALL i<?n.
            FlexRayController (?nReturn i) ?recv (?nC i) (?nStore i)
             (?nSend i) (?nGet i);
         DisjointSchedules ?n ?nC; IdenticCycleLength ?n ?nC;
         ?t mod cycleLength (?nC ?k) mem schedule (?nC ?k); ?k < ?n |]
      ==> ALL j. j < ?n & j ~= ?k --> ?nStore j ?t = ?nReturn ?k ?t",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app (template_hole 14, template_var 8),
                template_var 7),
              template_var 6)
            ),
        template_predicate (template_app (template_hole 13, t_empty)),
        template_predicate
         (
            template_app
             (template_app (template_hole 9, template_var 8),
              template_var 4)
            ),
        template_predicate
         (
            template_app
             (template_app (template_hole 8, template_var 8),
              template_var 4)
            ),
        template_predicate
         (
            template_app
             (template_app
               (template_hole 7,
                template_app
                 (template_app (template_hole 6, template_var 1),
                  template_app
                   (template_hole 5,
                    template_app (template_var 4, template_var 0)))),
              template_app
               (template_hole 4,
                template_app (template_var 4, template_var 0)))
            ),
        template_inequation (less_than, template_var 0, template_var 8)],
       template_predicate (template_app (template_hole 13, t_empty)))),
    ("FR_proof.fr_nStore_nReturn2",
     "[| Cable ?n ?nSend ?recv;
         ALL i<?n.
            FlexRayController (?nReturn i) ?recv (?nC i) (?nStore i)
             (?nSend i) (?nGet i);
         DisjointSchedules ?n ?nC; IdenticCycleLength ?n ?nC;
         ?t mod cycleLength (?nC ?k) mem schedule (?nC ?k); ?k < ?n;
         ?j < ?n; ?j ~= ?k |]
      ==> ?nStore ?j ?t = ?nReturn ?k ?t",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app (template_hole 13, template_var 9),
                template_var 8),
              template_var 7)
            ),
        template_predicate (template_app (template_hole 12, t_empty)),
        template_predicate
         (
            template_app
             (template_app (template_hole 8, template_var 9),
              template_var 5)
            ),
        template_predicate
         (
            template_app
             (template_app (template_hole 7, template_var 9),
              template_var 5)
            ),
        template_predicate
         (
            template_app
             (template_app
               (template_hole 6,
                template_app
                 (template_app (template_hole 5, template_var 2),
                  template_app
                   (template_hole 4,
                    template_app (template_var 5, template_var 1)))),
              template_app
               (template_hole 3,
                template_app (template_var 5, template_var 1)))
            ),
        template_inequation (less_than, template_var 1, template_var 9),
        template_inequation (less_than, template_var 0, template_var 9),
        template_negation
         (template_equation (template_var 0, template_var 1))],
       template_equation
        (template_app
          (template_app (template_var 4, template_var 0), template_var 2),
         template_app
          (template_app (template_var 6, template_var 1),
           template_var 2)))),
    ("FR_proof.fr_nStore_nReturn1",
     "[| Broadcast ?n ?nSend ?recv; inf_disj ?n ?nSend;
         ALL i<?n.
            FlexRayController (?nReturn i) ?recv (?nC i) (?nStore i)
             (?nSend i) (?nGet i);
         DisjointSchedules ?n ?nC; IdenticCycleLength ?n ?nC;
         ?t mod cycleLength (?nC ?k) mem schedule (?nC ?k); ?k < ?n;
         ?j < ?n; ?j ~= ?k |]
      ==> ?nStore ?j ?t = ?nReturn ?k ?t",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app (template_hole 14, template_var 9),
                template_var 8),
              template_var 7)
            ),
        template_predicate
         (
            template_app
             (template_app (template_hole 13, template_var 9),
              template_var 8)
            ),
        template_predicate (template_app (template_hole 12, t_empty)),
        template_predicate
         (
            template_app
             (template_app (template_hole 8, template_var 9),
              template_var 5)
            ),
        template_predicate
         (
            template_app
             (template_app (template_hole 7, template_var 9),
              template_var 5)
            ),
        template_predicate
         (
            template_app
             (template_app
               (template_hole 6,
                template_app
                 (template_app (template_hole 5, template_var 2),
                  template_app
                   (template_hole 4,
                    template_app (template_var 5, template_var 1)))),
              template_app
               (template_hole 3,
                template_app (template_var 5, template_var 1)))
            ),
        template_inequation (less_than, template_var 1, template_var 9),
        template_inequation (less_than, template_var 0, template_var 9),
        template_negation
         (template_equation (template_var 0, template_var 1))],
       template_equation
        (template_app
          (template_app (template_var 4, template_var 0), template_var 2),
         template_app
          (template_app (template_var 6, template_var 1),
           template_var 2))))]:
   (string * thm * template) list
### theory "Draft.FR_proofMoreTemplates"
### 0.379s elapsed time, 0.552s cpu time, 0.061s GC time
val it = (): unit
