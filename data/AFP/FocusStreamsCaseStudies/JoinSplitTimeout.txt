Loading theory "Draft.ArithExtras" (required by "Draft.JoinSplitTimeMoreTemplates" via "Draft.JoinSplitTime" via "Draft.stream")
Loading theory "Draft.ListExtras" (required by "Draft.JoinSplitTimeMoreTemplates" via "Draft.JoinSplitTime" via "Draft.stream")
Loading theory "Draft.arith_hints" (required by "Draft.JoinSplitTimeMoreTemplates" via "Draft.JoinSplitTime")
Loading theory "HOL-Library.Function_Algebras" (required by "Draft.JoinSplitTimeMoreTemplates" via "Draft.ExtrEqs" via "HOL-Library.BigO")
instantiation
  fun :: (type, plus) plus
  plus_fun == plus :: ('a => 'b) => ('a => 'b) => 'a => 'b
consts
  mem :: "'a => 'a list => bool"
instantiation
  fun :: (type, zero) zero
  zero_fun == zero_class.zero :: 'a => 'b
instantiation
  fun :: (type, times) times
  times_fun == times :: ('a => 'b) => ('a => 'b) => 'a => 'b
### theory "Draft.arith_hints"
### 0.051s elapsed time, 0.239s cpu time, 0.000s GC time
Loading theory "HOL-Library.Nat_Bijection" (required by "Draft.JoinSplitTimeMoreTemplates" via "Draft.ExtrEqs" via "HOL-Library.Stream")
instantiation
  fun :: (type, one) one
  one_fun == one_class.one :: 'a => 'b
### theory "HOL-Library.Function_Algebras"
### 0.126s elapsed time, 0.519s cpu time, 0.044s GC time
Loading theory "HOL-Library.Set_Algebras" (required by "Draft.JoinSplitTimeMoreTemplates" via "Draft.ExtrEqs" via "HOL-Library.BigO")
### theory "Draft.ListExtras"
### 0.143s elapsed time, 0.584s cpu time, 0.044s GC time
Loading theory "HOL-Library.Tree" (required by "Draft.JoinSplitTimeMoreTemplates" via "Draft.ExtrEqs" via "Draft.Templates")
Found termination order: "(%p. size (snd p)) <*mlex*> {}"
instantiation
  set :: (plus) plus
  plus_set == plus :: 'a set => 'a set => 'a set
instantiation
  set :: (times) times
  times_set == times :: 'a set => 'a set => 'a set
instantiation
  set :: (zero) zero
  zero_set == zero_class.zero :: 'a set
instantiation
  set :: (one) one
  one_set == one_class.one :: 'a set
Found termination order: "size_list size <*mlex*> {}"
### theory "HOL-Library.Set_Algebras"
### 0.206s elapsed time, 0.817s cpu time, 0.066s GC time
Loading theory "HOL-Library.BigO" (required by "Draft.JoinSplitTimeMoreTemplates" via "Draft.ExtrEqs")
### theory "HOL-Library.Nat_Bijection"
### 0.301s elapsed time, 1.179s cpu time, 0.110s GC time
Loading theory "HOL-Library.Stream" (required by "Draft.JoinSplitTimeMoreTemplates" via "Draft.ExtrEqs")
consts
  nat2inat :: "nat list => natInf list"
### theory "Draft.ArithExtras"
### 0.392s elapsed time, 1.572s cpu time, 0.110s GC time
Loading theory "Draft.stream" (required by "Draft.JoinSplitTimeMoreTemplates" via "Draft.JoinSplitTime")
consts
  shift :: "'a list => 'a stream => 'a stream"
consts
  left :: "'a tree => 'a tree"
Proofs for coinductive predicate(s) "streamsp"
  Proving monotonicity ...
consts
  right :: "'a tree => 'a tree"
Found termination order: "size <*mlex*> {}"
consts
  snth :: "'a stream => nat => 'a"
consts
  stake :: "nat => 'a stream => 'a list"
consts
  sdrop :: "nat => 'a stream => 'a stream"
Found termination order: "size <*mlex*> {}"
consts
  sfilter :: "('a => bool) => 'a stream => 'a stream"
Found termination order: "size <*mlex*> {}"
consts
  cycle :: "'a list => 'a stream"
class height = type +
  fixes height :: "'a => nat"
instantiation
  tree :: (type) height
  height_tree == height :: 'a tree => nat
consts
  siterate :: "('a => 'a) => 'a => 'a stream"
Found termination order: "size <*mlex*> {}"
consts
  flat :: "'a list stream => 'a stream"
### theory "HOL-Library.BigO"
### 0.967s elapsed time, 3.640s cpu time, 0.792s GC time
Found termination order: "size <*mlex*> {}"
consts
  sinterleave :: "'a stream => 'a stream => 'a stream"
consts
  szip :: "'a stream => 'b stream => ('a * 'b) stream"
consts
  smap2 :: "('a => 'b => 'c) => 'a stream => 'b stream => 'c stream"
Found termination order: "size <*mlex*> {}"
### theory "HOL-Library.Stream"
### 1.047s elapsed time, 3.869s cpu time, 0.792s GC time
Found termination order: "size <*mlex*> {}"
Found termination order: "size <*mlex*> {}"
consts
  finU_dom :: "'a list => nat set"
consts
  finT_range :: "'a list list => 'a set"
Found termination order: "size <*mlex*> {}"
consts
  nticks :: "nat => 'a list list"
consts
  fin_find1nonemp :: "'a list list => 'a list"
consts
  fin_find1nonemp_index :: "'a list list => nat"
Found termination order: "size <*mlex*> {}"
consts
  fin_length :: "'a list list => nat"
consts
  inf_nth :: "(nat => 'a list) => nat => 'a"
consts
  inf_prefix :: "'a list => (nat => 'a) => nat => bool"
consts
  fin_prefix :: "'a list => 'a list => bool"
consts
  fin_truncate :: "'a list => nat => 'a list"
Found termination order: "(%p. size (fst p)) <*mlex*> {}"
consts
  inf_truncate :: "(nat => 'a) => nat => 'a list"
consts
  fin_msg :: "nat => 'a list list => bool"
Found termination order: "size <*mlex*> {}"
consts
  inf_make_untimed1 :: "(nat => 'a list) => nat => 'a"
consts
  fin_tm :: "'a list list => nat => nat"
consts
  fst_remdups :: "'a list => 'a list"
Found termination order: "(%p. size (snd p)) <*mlex*> {}"
Found termination order: "(%p. size_list length (fst p)) <*mlex*> {}"
Found termination order: "size <*mlex*> {}"
Found termination order: "(%p. size (snd p)) <*mlex*> {}"
consts
  infU_get_prefix :: "(nat => 'a) => nat => 'a list"
consts
  fin_merge_ti :: "'a list list => 'a list list => 'a list list"
consts
  fin_last_ti :: "'a list list => nat => 'a list"
consts
  inf_last_ti :: "(nat => 'a list) => nat => 'a list"
### theory "HOL-Library.Tree"
### 2.080s elapsed time, 6.458s cpu time, 1.074s GC time
Loading theory "Draft.Templates" (required by "Draft.JoinSplitTimeMoreTemplates" via "Draft.ExtrEqs")
### theory "Draft.stream"
### 1.867s elapsed time, 5.537s cpu time, 1.007s GC time
Loading theory "Draft.JoinSplitTime" (required by "Draft.JoinSplitTimeMoreTemplates")
datatype template_term
=
     t_empty
   | template_app of template_term * template_term
   | template_hole of int
   | template_var of int
datatype sign
= equals | greater_equals | greater_than | less_equals | less_than
datatype template
=
     template_bimplication of template * template
   | template_dunno
   | template_equation of template_term * template_term
   | template_implication of template list * template
   | template_inequation of sign * template_term * template_term
   | template_negation of template
   | template_predicate of template_term
constructor t_empty: template_term
constructor template_app: template_term * template_term -> template_term
constructor template_hole: int -> template_term
constructor template_var: int -> template_term
constructor equals: sign
constructor greater_equals: sign
constructor greater_than: sign
constructor less_equals: sign
constructor less_than: sign
constructor template_bimplication: template * template -> template
constructor template_dunno: template
constructor template_equation: template_term * template_term -> template
constructor template_implication: template list * template -> template
constructor template_inequation:
   sign * template_term * template_term -> template
constructor template_negation: template -> template
constructor template_predicate: template_term -> template
val vfs = fn: term -> (indexname * typ) list * (string * typ) list
val indexOf = fn: ''a list -> ''a -> int -> int
val has_eq = fn: term -> bool
val term2template = fn:
   (indexname * typ) list -> (string * typ) list -> term -> template_term
val lemma2predicate = fn: term -> term -> template
val makeTemplatewithContext = fn: term -> term -> template
val lemma2template = fn: term -> template
val thm2template = fn: thm -> template
val tterm2string = fn: template_term -> string
val template2string = fn: template -> string
val t = "height ?t <= size ?t": thm
val th =
   Const ("HOL.Trueprop", "bool => prop") $
     (Const ("Orderings.ord_class.less_eq", "nat => nat => bool") $
       (Const ("Tree.height_class.height", "?'a tree => nat") $
         Var (("t", 0), "?'a tree")) $
       (Const ("Nat.size_class.size", "?'a tree => nat") $
         Var (("t", 0), "?'a tree"))):
   term
### theory "Draft.Templates"
### 0.054s elapsed time, 0.112s cpu time, 0.000s GC time
Loading theory "Draft.ExtrEqs" (required by "Draft.JoinSplitTimeMoreTemplates")
consts
  join_ti :: "(nat => 'a list) => nat => nat => 'a list"
consts
  fin_join_ti :: "'a list list => nat => nat => 'a list"
### theory "Draft.JoinSplitTime"
### 0.176s elapsed time, 0.357s cpu time, 0.000s GC time
val eqpattern =
   Pattern
    (
       Const ("HOL.Trueprop", "bool => prop") $
         (Const ("HOL.eq", "?'a => ?'a => bool") $
           Var (("_dummy_", 1), "?'a") $ Var (("_dummy_", 2), "?'a"))
       ):
   term Find_Theorems.criterion
val badeqpattern = Pattern (Const ("Pure.eq", "?'a => ?'a => prop")):
   term Find_Theorems.criterion
val undefpattern =
   Pattern
    (
       Const ("HOL.Trueprop", "bool => prop") $
         (Const ("HOL.eq", "?'a => ?'a => bool") $
           Var (("_dummy_", 1), "?'a") $ Const ("HOL.undefined", "?'a"))
       ):
   term Find_Theorems.criterion
val thmpattern =
   Pattern
    (Const ("HOL.Trueprop", "bool => prop") $ Var (("_dummy_", 1), "bool")):
   term Find_Theorems.criterion
val badnames =
   ["*nitpick*", "*Nitpick*", "*full_exhaustive*", "*_def*", "Enum.finite*",
    "*Quickcheck*", "ATP*", "*Nunchaku*", "*Code*", "*BNF*", "*SMT*",
    "*.*.*"]:
   string list
val unwanted_names =
   [(false, Name "*nitpick*"), (false, Name "*Nitpick*"),
    (false, Name "*full_exhaustive*"), (false, Name "*_def*"),
    (false, Name "Enum.finite*"), (false, Name "*Quickcheck*"),
    (false, Name "ATP*"), (false, Name "*Nunchaku*"),
    (false, Name "*Code*"), (false, Name "*BNF*"), (false, Name "*SMT*"),
    (false, Name "*.*.*")]:
   (bool * term Find_Theorems.criterion) list
val has_vars = fn: term -> bool
val get_all_eqs = fn: string -> Proof.context -> (string * thm) list
val get_all_thms = fn: string -> Proof.context -> (string * thm) list
val get_noneq_thms = fn: string -> Proof.context -> (string * thm) list
val template_eqs = fn:
   string -> Proof.context -> (string * thm * template) list
val template_thms = fn:
   string -> Proof.context -> (string * thm * template) list
### theory "Draft.ExtrEqs"
### 0.497s elapsed time, 0.727s cpu time, 0.056s GC time
Loading theory "Draft.JoinSplitTimeMoreTemplates"
val templateLemmas =
   [("JoinSplitTime.join_time1", "join_time ?s 1 = ?s",
     template_equation
      (template_app
        (template_app (template_hole 1, template_var 0), template_hole 0),
       template_var 0)),
    ("JoinSplitTime.split_time1", "split_time ?s 1 = ?s",
     template_equation
      (template_app
        (template_app (template_hole 1, template_var 0), template_hole 0),
       template_var 0)),
    ("JoinSplitTime.join_time1t", "ALL t. join_time ?s 1 t = ?s t",
     template_predicate (template_app (template_hole 3, t_empty))),
    ("JoinSplitTime.split_time1t", "ALL t. split_time ?s 1 t = ?s t",
     template_predicate (template_app (template_hole 3, t_empty))),
    ("JoinSplitTime.join_split",
     "0 < ?n ==> join_time (split_time ?s ?n) ?n = ?s",
     template_implication
      ([template_inequation (less_than, template_hole 3, template_var 1)],
       template_equation
        (template_app
          (template_app
            (template_hole 1,
             template_app
              (template_app (template_hole 0, template_var 0),
               template_var 1)),
           template_var 1),
         template_var 0))),
    ("JoinSplitTime.join_split_i",
     "0 < ?n ==> join_time (split_time ?s ?n) ?n ?i = ?s ?i",
     template_implication
      ([template_inequation (less_than, template_hole 3, template_var 2)],
       template_equation
        (template_app
          (template_app
            (template_app
              (template_hole 1,
               template_app
                (template_app (template_hole 0, template_var 1),
                 template_var 2)),
             template_var 2),
           template_var 0),
         template_app (template_var 1, template_var 0)))),
    ("JoinSplitTime.split_time_nempty",
     "0 < ?n ==> split_time ?s ?n (?n * ?t) = ?s ?t",
     template_implication
      ([template_inequation (less_than, template_hole 3, template_var 2)],
       template_equation
        (template_app
          (template_app
            (template_app (template_hole 1, template_var 1),
             template_var 2),
           template_app
            (template_app (template_hole 0, template_var 2),
             template_var 0)),
         template_app (template_var 1, template_var 0)))),
    ("JoinSplitTime.split_time_mod",
     "?t mod ?n ~= 0 ==> split_time ?s ?n ?t = []",
     template_implication
      ([template_negation
         (
            template_equation
             (template_app
               (template_app (template_hole 4, template_var 2),
                template_var 1),
              template_hole 3)
            )],
       template_equation
        (template_app
          (template_app
            (template_app (template_hole 1, template_var 0),
             template_var 1),
           template_var 2),
         template_hole 0))),
    ("JoinSplitTime.fin_join_ti_hint1",
     "fin_join_ti ?s ?x (Suc ?i) = [] ==> fin_join_ti ?s ?x ?i = []",
     template_implication
      ([template_equation
         (template_app
           (template_app
             (template_app (template_hole 2, template_var 2),
              template_var 1),
            template_app (template_hole 1, template_var 0)),
          template_hole 0)],
       template_equation
        (template_app
          (template_app
            (template_app (template_hole 2, template_var 2),
             template_var 1),
           template_var 0),
         template_hole 0))),
    ("JoinSplitTime.join_ti_hint1",
     "join_ti ?s ?x (Suc ?i) = [] ==> join_ti ?s ?x ?i = []",
     template_implication
      ([template_equation
         (template_app
           (template_app
             (template_app (template_hole 2, template_var 2),
              template_var 1),
            template_app (template_hole 1, template_var 0)),
          template_hole 0)],
       template_equation
        (template_app
          (template_app
            (template_app (template_hole 2, template_var 2),
             template_var 1),
           template_var 0),
         template_hole 0))),
    ("JoinSplitTime.join_ti_hint3",
     "join_ti ?s ?x (Suc ?i) = [] ==> ?s (?x + ?i) = []",
     template_implication
      ([template_equation
         (template_app
           (template_app
             (template_app (template_hole 3, template_var 2),
              template_var 1),
            template_app (template_hole 2, template_var 0)),
          template_hole 1)],
       template_equation
        (template_app
          (template_var 2,
           template_app
            (template_app (template_hole 0, template_var 1),
             template_var 0)),
         template_hole 1))),
    ("JoinSplitTime.fin_join_ti_hint3",
     "fin_join_ti ?s ?x (Suc ?i) = [] ==> ?s ! (?x + ?i) = []",
     template_implication
      ([template_equation
         (template_app
           (template_app
             (template_app (template_hole 4, template_var 2),
              template_var 1),
            template_app (template_hole 3, template_var 0)),
          template_hole 2)],
       template_equation
        (template_app
          (template_app (template_hole 1, template_var 2),
           template_app
            (template_app (template_hole 0, template_var 1),
             template_var 0)),
         template_hole 2))),
    ("JoinSplitTime.join_ti_hint2",
     "join_ti ?s ?x (Suc ?i) = [] ==> ?s (?x + Suc ?i) = []",
     template_implication
      ([template_equation
         (template_app
           (template_app
             (template_app (template_hole 3, template_var 2),
              template_var 1),
            template_app (template_hole 2, template_var 0)),
          template_hole 1)],
       template_equation
        (template_app
          (template_var 2,
           template_app
            (template_app (template_hole 0, template_var 1),
             template_app (template_hole 2, template_var 0))),
         template_hole 1))),
    ("JoinSplitTime.fin_join_ti_hint2",
     "fin_join_ti ?s ?x (Suc ?i) = [] ==> ?s ! (?x + Suc ?i) = []",
     template_implication
      ([template_equation
         (template_app
           (template_app
             (template_app (template_hole 4, template_var 2),
              template_var 1),
            template_app (template_hole 3, template_var 0)),
          template_hole 2)],
       template_equation
        (template_app
          (template_app (template_hole 1, template_var 2),
           template_app
            (template_app (template_hole 0, template_var 1),
             template_app (template_hole 3, template_var 0))),
         template_hole 2))),
    ("JoinSplitTime.split_time_hint1",
     "?n = Suc ?m ==> split_time ?s (Suc ?n) (?i + ?n * ?i + ?n) = []",
     template_implication
      ([template_equation
         (template_var 3, template_app (template_hole 5, template_var 2))],
       template_equation
        (template_app
          (template_app
            (template_app (template_hole 3, template_var 1),
             template_app (template_hole 5, template_var 3)),
           template_app
            (template_app
              (template_hole 2,
               template_app
                (template_app (template_hole 2, template_var 0),
                 template_app
                  (template_app (template_hole 1, template_var 3),
                   template_var 0))),
             template_var 3)),
         template_hole 0))),
    ("JoinSplitTime.join_ti_empty_join",
     "[| ?i <= ?n; join_ti ?s ?x ?n = [] |] ==> ?s (?x + ?i) = []",
     template_implication
      ([template_inequation (less_equals, template_var 3, template_var 2),
        template_equation
         (template_app
           (template_app
             (template_app (template_hole 2, template_var 1),
              template_var 0),
            template_var 2),
          template_hole 1)],
       template_equation
        (template_app
          (template_var 1,
           template_app
            (template_app (template_hole 0, template_var 0),
             template_var 3)),
         template_hole 1))),
    ("JoinSplitTime.split_time_nempty_Suc",
     "0 < ?n ==>
      split_time ?s (Suc ?n) (Suc ?n * ?t) = split_time ?s ?n (?n * ?t)",
     template_implication
      ([template_inequation (less_than, template_hole 4, template_var 2)],
       template_equation
        (template_app
          (template_app
            (template_app (template_hole 2, template_var 1),
             template_app (template_hole 1, template_var 2)),
           template_app
            (template_app
              (template_hole 0,
               template_app (template_hole 1, template_var 2)),
             template_var 0)),
         template_app
          (template_app
            (template_app (template_hole 2, template_var 1),
             template_var 2),
           template_app
            (template_app (template_hole 0, template_var 2),
             template_var 0))))),
    ("JoinSplitTime.join_ti_empty_ti",
     "ALL i<=?n. ?s (?x + i) = [] ==> join_ti ?s ?x ?n = []",
     template_implication
      ([template_predicate (template_app (template_hole 6, t_empty))],
       template_equation
        (template_app
          (template_app
            (template_app (template_hole 0, template_var 1),
             template_var 0),
           template_var 2),
         template_hole 1))),
    ("JoinSplitTime.split_time_empty",
     "[| ?i < ?n; 0 < ?i |] ==> split_time ?s ?n (?n * ?t + ?i) = []",
     template_implication
      ([template_inequation (less_than, template_var 3, template_var 2),
        template_inequation (less_than, template_hole 5, template_var 3)],
       template_equation
        (template_app
          (template_app
            (template_app (template_hole 3, template_var 1),
             template_var 2),
           template_app
            (template_app
              (template_hole 2,
               template_app
                (template_app (template_hole 1, template_var 2),
                 template_var 0)),
             template_var 3)),
         template_hole 0))),
    ("JoinSplitTime.fin_join_ti_empty_join",
     "[| ?i <= ?n; fin_join_ti ?s ?x ?n = [] |] ==> ?s ! (?x + ?i) = []",
     template_implication
      ([template_inequation (less_equals, template_var 3, template_var 2),
        template_equation
         (template_app
           (template_app
             (template_app (template_hole 3, template_var 1),
              template_var 0),
            template_var 2),
          template_hole 2)],
       template_equation
        (template_app
          (template_app (template_hole 1, template_var 1),
           template_app
            (template_app (template_hole 0, template_var 0),
             template_var 3)),
         template_hole 2))),
    ("JoinSplitTime.fin_join_ti_empty_ti",
     "ALL i<=?n. ?s ! (?x + i) = [] ==> fin_join_ti ?s ?x ?n = []",
     template_implication
      ([template_predicate (template_app (template_hole 7, t_empty))],
       template_equation
        (template_app
          (template_app
            (template_app (template_hole 0, template_var 1),
             template_var 0),
           template_var 2),
         template_hole 1))),
    ("JoinSplitTime.join_time_empty1",
     "[| ?i < ?n; join_time ?s ?n ?t = [] |] ==> ?s (?n * ?t + ?i) = []",
     template_implication
      ([template_inequation (less_than, template_var 3, template_var 2),
        template_equation
         (template_app
           (template_app
             (template_app (template_hole 3, template_var 1),
              template_var 2),
            template_var 0),
          template_hole 2)],
       template_equation
        (template_app
          (template_var 1,
           template_app
            (template_app
              (template_hole 1,
               template_app
                (template_app (template_hole 0, template_var 2),
                 template_var 0)),
             template_var 3)),
         template_hole 2))),
    ("JoinSplitTime.join_ti_1nempty",
     "ALL i. 0 < i & i < Suc ?n --> ?s (?x + i) = [] ==>
      join_ti ?s ?x ?n = ?s ?x",
     template_implication
      ([template_predicate (template_app (template_hole 9, t_empty))],
       template_equation
        (template_app
          (template_app
            (template_app (template_hole 0, template_var 1),
             template_var 0),
           template_var 2),
         template_app (template_var 1, template_var 0)))),
    ("JoinSplitTime.fin_join_ti_1nempty",
     "ALL i. 0 < i & i < Suc ?n --> ?s ! (?x + i) = [] ==>
      fin_join_ti ?s ?x ?n = ?s ! ?x",
     template_implication
      ([template_predicate (template_app (template_hole 10, t_empty))],
       template_equation
        (template_app
          (template_app
            (template_app (template_hole 0, template_var 1),
             template_var 0),
           template_var 2),
         template_app
          (template_app (template_hole 3, template_var 1),
           template_var 0)))),
    ("JoinSplitTime.split_time_empty_Suc",
     "[| ?i < ?n; 0 < ?i |]
      ==> split_time ?s (Suc ?n) (Suc ?n * ?t + ?i) =
          split_time ?s ?n (?n * ?t + ?i)",
     template_implication
      ([template_inequation (less_than, template_var 3, template_var 2),
        template_inequation (less_than, template_hole 5, template_var 3)],
       template_equation
        (template_app
          (template_app
            (template_app (template_hole 3, template_var 1),
             template_app (template_hole 2, template_var 2)),
           template_app
            (template_app
              (template_hole 1,
               template_app
                (template_app
                  (template_hole 0,
                   template_app (template_hole 2, template_var 2)),
                 template_var 0)),
             template_var 3)),
         template_app
          (template_app
            (template_app (template_hole 3, template_var 1),
             template_var 2),
           template_app
            (template_app
              (template_hole 1,
               template_app
                (template_app (template_hole 0, template_var 2),
                 template_var 0)),
             template_var 3)))))]:
   (string * thm * template) list
### theory "Draft.JoinSplitTimeMoreTemplates"
### 0.330s elapsed time, 0.464s cpu time, 0.053s GC time
val it = (): unit
