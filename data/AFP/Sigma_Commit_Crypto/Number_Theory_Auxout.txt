Loading theory "Draft.Number_Theory_Aux" (required by "Draft.Number_Theory_AuxTemplates")
Loading theory "HOL-Library.BigO" (required by "Draft.Number_Theory_AuxTemplates" via "Draft.ExtrEqs")
Loading theory "Draft.Templates" (required by "Draft.Number_Theory_AuxTemplates" via "Draft.ExtrEqs")
### theory "Draft.Number_Theory_Aux"
### 0.065s elapsed time, 0.238s cpu time, 0.000s GC time
datatype template_term
=
     t_empty
   | template_app of template_term * template_term
   | template_hole of int
   | template_var of int
datatype sign
= equals | greater_equals | greater_than | less_equals | less_than
datatype template
=
     template_bimplication of template * template
   | template_dunno
   | template_equation of template_term * template_term
   | template_implication of template list * template
   | template_inequation of sign * template_term * template_term
   | template_negation of template
   | template_predicate of template_term
constructor t_empty: template_term
constructor template_app: template_term * template_term -> template_term
constructor template_hole: int -> template_term
constructor template_var: int -> template_term
constructor equals: sign
constructor greater_equals: sign
constructor greater_than: sign
constructor less_equals: sign
constructor less_than: sign
constructor template_bimplication: template * template -> template
constructor template_dunno: template
constructor template_equation: template_term * template_term -> template
constructor template_implication: template list * template -> template
constructor template_inequation:
   sign * template_term * template_term -> template
constructor template_negation: template -> template
constructor template_predicate: template_term -> template
val vfs = fn: term -> (indexname * typ) list * (string * typ) list
val indexOf = fn: ''a list -> ''a -> int -> int
val has_eq = fn: term -> bool
val term2template = fn:
   (indexname * typ) list -> (string * typ) list -> term -> template_term
val lemma2predicate = fn: term -> term -> template
val makeTemplatewithContext = fn: term -> term -> template
val lemma2template = fn: term -> template
val thm2template = fn: thm -> template
val tterm2string = fn: template_term -> string
val template2string = fn: template -> string
val t = "height ?t <= size ?t": thm
val th =
   Const ("HOL.Trueprop", "bool => prop") $
     (Const ("Orderings.ord_class.less_eq", "nat => nat => bool") $
       (Const ("Tree.height_class.height", "?'a tree => nat") $
         Var (("t", 0), "?'a tree")) $
       (Const ("Nat.size_class.size", "?'a tree => nat") $
         Var (("t", 0), "?'a tree"))):
   term
### theory "Draft.Templates"
### 0.074s elapsed time, 0.253s cpu time, 0.000s GC time
### theory "HOL-Library.BigO"
### 0.605s elapsed time, 0.791s cpu time, 0.029s GC time
Loading theory "Draft.ExtrEqs" (required by "Draft.Number_Theory_AuxTemplates")
val eqpattern =
   Pattern
    (
       Const ("HOL.Trueprop", "bool => prop") $
         (Const ("HOL.eq", "?'a => ?'a => bool") $
           Var (("_dummy_", 1), "?'a") $ Var (("_dummy_", 2), "?'a"))
       ):
   term Find_Theorems.criterion
val badeqpattern = Pattern (Const ("Pure.eq", "?'a => ?'a => prop")):
   term Find_Theorems.criterion
val undefpattern =
   Pattern
    (
       Const ("HOL.Trueprop", "bool => prop") $
         (Const ("HOL.eq", "?'a => ?'a => bool") $
           Var (("_dummy_", 1), "?'a") $ Const ("HOL.undefined", "?'a"))
       ):
   term Find_Theorems.criterion
val thmpattern =
   Pattern
    (Const ("HOL.Trueprop", "bool => prop") $ Var (("_dummy_", 1), "bool")):
   term Find_Theorems.criterion
val badnames =
   ["*nitpick*", "*Nitpick*", "*full_exhaustive*", "*_def*", "Enum.finite*",
    "*Quickcheck*", "ATP*", "*Nunchaku*", "*Code*", "*BNF*", "*SMT*",
    "*.*.*"]:
   string list
val unwanted_names =
   [(false, Name "*nitpick*"), (false, Name "*Nitpick*"),
    (false, Name "*full_exhaustive*"), (false, Name "*_def*"),
    (false, Name "Enum.finite*"), (false, Name "*Quickcheck*"),
    (false, Name "ATP*"), (false, Name "*Nunchaku*"),
    (false, Name "*Code*"), (false, Name "*BNF*"), (false, Name "*SMT*"),
    (false, Name "*.*.*")]:
   (bool * term Find_Theorems.criterion) list
val has_vars = fn: term -> bool
val get_all_eqs = fn: string -> Proof.context -> (string * thm) list
val get_all_thms = fn: string -> Proof.context -> (string * thm) list
val get_noneq_thms = fn: string -> Proof.context -> (string * thm) list
val template_eqs = fn:
   string -> Proof.context -> (string * thm * template) list
val template_thms = fn:
   string -> Proof.context -> (string * thm * template) list
### theory "Draft.ExtrEqs"
### 0.517s elapsed time, 0.576s cpu time, 0.089s GC time
Loading theory "Draft.Number_Theory_AuxTemplates"
val templateLemmas =
   [("Number_Theory_Aux.fermat_little_theorem",
     "prime ?P ==> [?x ^ ?P = ?x] (mod ?P)",
     template_implication
      ([template_predicate
         (template_app (template_hole 2, template_var 1))],
       template_predicate
        (
           template_app
            (template_app
              (template_app
                (template_hole 1,
                 template_app
                  (template_app (template_hole 0, template_var 0),
                   template_var 1)),
               template_var 0),
             template_var 1)
           ))),
    ("Number_Theory_Aux.inverse",
     "gcd ?x ?q = 1 ==>
      [int ?x * Number_Theory_Aux.inverse ?x ?q = 1] (mod int ?q)",
     template_implication
      ([template_equation
         (template_app
           (template_app (template_hole 7, template_var 1), template_var 0),
          template_hole 6)],
       template_predicate
        (
           template_app
            (template_app
              (template_app
                (template_hole 5,
                 template_app
                  (template_app
                    (template_hole 4,
                     template_app (template_hole 3, template_var 1)),
                   template_app
                    (template_hole 2,
                     template_app
                      (template_app (template_hole 1, template_var 1),
                       template_var 0)))),
               template_hole 0),
             template_app (template_hole 3, template_var 0))
           ))),
    ("Number_Theory_Aux.prime_field",
     "[| prime ?q; ?a < ?q; ?a ~= 0 |] ==> coprime ?a ?q",
     template_implication
      ([template_predicate (template_app (template_hole 5, template_var 1)),
        template_inequation (less_than, template_var 0, template_var 1),
        template_negation
         (template_equation (template_var 0, template_hole 1))],
       template_predicate
        (
           template_app
            (template_app (template_hole 0, template_var 0), template_var 1)
           ))),
    ("Number_Theory_Aux.prod_not_prime",
     "[| prime ?x; prime ?y; 2 < ?x; 2 < ?y |]
      ==> ~ prime ((?x - 1) * (?y - 1))",
     template_implication
      ([template_predicate (template_app (template_hole 8, template_var 1)),
        template_predicate (template_app (template_hole 8, template_var 0)),
        template_inequation
         (less_than,
          template_app
           (template_hole 6,
            template_app (template_hole 5, template_hole 4)),
          template_var 1),
        template_inequation
         (less_than,
          template_app
           (template_hole 6,
            template_app (template_hole 5, template_hole 4)),
          template_var 0)],
       template_negation
        (
           template_predicate
            (
               template_app
                (template_hole 8,
                 template_app
                  (template_app
                    (template_hole 2,
                     template_app
                      (template_app (template_hole 1, template_var 1),
                       template_hole 0)),
                   template_app
                    (template_app (template_hole 1, template_var 0),
                     template_hole 0)))
               )
           ))),
    ("Number_Theory_Aux.ex_inverse",
     "[| coprime ?e ((?P - 1) * (?Q - 1)); prime ?P; prime ?Q; ?P ~= ?Q |]
      ==> EX d. [?e * d = 1] (mod ?P - 1) & d ~= 0",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 10, template_var 2),
              template_app
               (template_app
                 (template_hole 9,
                  template_app
                   (template_app (template_hole 8, template_var 1),
                    template_hole 7)),
                template_app
                 (template_app (template_hole 8, template_var 0),
                  template_hole 7)))
            ),
        template_predicate (template_app (template_hole 6, template_var 1)),
        template_predicate (template_app (template_hole 6, template_var 0)),
        template_negation
         (template_equation (template_var 1, template_var 0))],
       template_predicate (template_app (template_hole 3, t_empty)))),
    ("Number_Theory_Aux.ex_k1_k2",
     "[| coprime ?e ((?P - 1) * (?Q - 1)); [?e * ?d = 1] (mod ?P - 1) |]
      ==> EX k1 k2. ?e * ?d + k1 * (?P - 1) = 1 + k2 * (?P - 1)",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 7, template_var 3),
              template_app
               (template_app
                 (template_hole 6,
                  template_app
                   (template_app (template_hole 5, template_var 2),
                    template_hole 4)),
                template_app
                 (template_app (template_hole 5, template_var 1),
                  template_hole 4)))
            ),
        template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_hole 3,
                  template_app
                   (template_app (template_hole 6, template_var 3),
                    template_var 0)),
                template_hole 4),
              template_app
               (template_app (template_hole 5, template_var 2),
                template_hole 4))
            )],
       template_predicate (template_app (template_hole 2, t_empty)))),
    ("Number_Theory_Aux.ex_k_mod",
     "[| coprime ?e ((?P - 1) * (?Q - 1)); ?P ~= ?Q; prime ?P; prime ?Q;
         ?d ~= 0; [?e * ?d = 1] (mod ?P - 1) |]
      ==> EX k. ?e * ?d = 1 + k * (?P - 1)",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 10, template_var 3),
              template_app
               (template_app
                 (template_hole 9,
                  template_app
                   (template_app (template_hole 8, template_var 2),
                    template_hole 7)),
                template_app
                 (template_app (template_hole 8, template_var 1),
                  template_hole 7)))
            ),
        template_negation
         (template_equation (template_var 2, template_var 1)),
        template_predicate (template_app (template_hole 4, template_var 2)),
        template_predicate (template_app (template_hole 4, template_var 1)),
        template_negation
         (template_equation (template_var 0, template_hole 3)),
        template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_hole 2,
                  template_app
                   (template_app (template_hole 9, template_var 3),
                    template_var 0)),
                template_hole 7),
              template_app
               (template_app (template_hole 8, template_var 2),
                template_hole 7))
            )],
       template_predicate (template_app (template_hole 1, t_empty))))]:
   (string * thm * template) list
### theory "Draft.Number_Theory_AuxTemplates"
### 0.490s elapsed time, 0.620s cpu time, 0.064s GC time
val it = (): unit
