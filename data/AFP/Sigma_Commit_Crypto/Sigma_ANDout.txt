Loading theory "Draft.Xor" (required by "Draft.Sigma_ANDTemplates" via "Draft.Sigma_AND")
Loading theory "Draft.Templates" (required by "Draft.Sigma_ANDTemplates" via "Draft.ExtrEqs")
Loading theory "HOL-Library.BigO" (required by "Draft.Sigma_ANDTemplates" via "Draft.ExtrEqs")
Loading theory "Draft.Commitment_Schemes" (required by "Draft.Sigma_ANDTemplates" via "Draft.Sigma_AND" via "Draft.Sigma_Protocols")
locale abstract_commitment
  fixes key_gen :: "('ck * 'vk) spmf"
    and commit :: "'ck => 'plain => ('commit * 'opening) spmf"
    and verify :: "'vk => 'plain => 'commit => 'opening => bool"
    and valid_msg :: "'plain => bool"
datatype template_term
=
     t_empty
   | template_app of template_term * template_term
   | template_hole of int
   | template_var of int
datatype sign
= equals | greater_equals | greater_than | less_equals | less_than
datatype template
=
     template_bimplication of template * template
   | template_dunno
   | template_equation of template_term * template_term
   | template_implication of template list * template
   | template_inequation of sign * template_term * template_term
   | template_negation of template
   | template_predicate of template_term
constructor t_empty: template_term
constructor template_app: template_term * template_term -> template_term
constructor template_hole: int -> template_term
constructor template_var: int -> template_term
constructor equals: sign
constructor greater_equals: sign
constructor greater_than: sign
constructor less_equals: sign
constructor less_than: sign
constructor template_bimplication: template * template -> template
constructor template_dunno: template
constructor template_equation: template_term * template_term -> template
constructor template_implication: template list * template -> template
constructor template_inequation:
   sign * template_term * template_term -> template
constructor template_negation: template -> template
constructor template_predicate: template_term -> template
val vfs = fn: term -> (indexname * typ) list * (string * typ) list
val indexOf = fn: ''a list -> ''a -> int -> int
val has_eq = fn: term -> bool
val term2template = fn:
   (indexname * typ) list -> (string * typ) list -> term -> template_term
val lemma2predicate = fn: term -> term -> template
val makeTemplatewithContext = fn: term -> term -> template
val lemma2template = fn: term -> template
val thm2template = fn: thm -> template
val tterm2string = fn: template_term -> string
val template2string = fn: template -> string
val t = "height ?t <= size ?t": thm
val th =
   Const ("HOL.Trueprop", "bool => prop") $
     (Const ("Orderings.ord_class.less_eq", "nat => nat => bool") $
       (Const ("Tree.height_class.height", "?'a tree => nat") $
         Var (("t", 0), "?'a tree")) $
       (Const ("Nat.size_class.size", "?'a tree => nat") $
         Var (("t", 0), "?'a tree"))):
   term
### theory "Draft.Templates"
### 0.109s elapsed time, 0.439s cpu time, 0.038s GC time
### Ambiguous input (line 75 of "$AFP/Sigma_Commit_Crypto/Commitment_Schemes.thy") produces 2 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("_applC" ("_position" hiding_game_ind_cpa)
###       ("_tuple" ("_position" \<A>1) ("_tuple_arg" ("_position" \<A>2))))
###     ("\<^const>Generative_Probabilistic_Value.try_gpv"
###       ("_do_block"
###         ("_do_cons"
###           ("_do_bind" ("_pattern" ("_position" ck) ("_position" vk))
###             ("_position" key_gen))
###           ("_do_cons"
###             ("_do_bind"
###               ("_pattern" ("_pattern" ("_position" m0) ("_position" m1))
###                 ("_position" \<sigma>))
###               ("_applC" ("_position" \<A>1) ("_position" vk)))
###             ("_do_cons"
###               ("_do_bind" ("_idtypdummy" ("_type_name" unit))
###                 ("_applC" ("_position" assert_spmf)
###                   ("\<^const>HOL.conj"
###                     ("_applC" ("_position" valid_msg) ("_position" m0))
###                     ("_applC" ("_position" valid_msg) ("_position" m1)))))
###               ("_do_cons"
###                 ("_do_bind" ("_position" b) ("_position" coin_spmf))
###                 ("_do_cons"
###                   ("_do_bind" ("_pattern" ("_position" c) ("_position" d))
###                     ("_applC" ("_position" commit)
###                       ("_cargs" ("_position" ck)
###                         ("\<^const>HOL.If" ("_position" b) ("_position" m0)
###                           ("_position" m1)))))
###                   ("_do_cons"
###                     ("_do_bind"
###                       ("_idtyp" ("_position" b') ("_type_name" bool))
###                       ("_applC" ("_position" \<A>2)
###                         ("_cargs" ("_position" c) ("_position" \<sigma>))))
###                     ("_do_final"
###                       ("_applC" ("_position" return_spmf)
###                         ("\<^const>HOL.eq" ("_position" b')
###                           ("_position" b)))))))))))
###       ("_position" coin_spmf))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("_applC" ("_position" hiding_game_ind_cpa)
###       ("_tuple" ("_position" \<A>1) ("_tuple_arg" ("_position" \<A>2))))
###     ("\<^const>SPMF.try_spmf"
###       ("_do_block"
###         ("_do_cons"
###           ("_do_bind" ("_pattern" ("_position" ck) ("_position" vk))
###             ("_position" key_gen))
###           ("_do_cons"
###             ("_do_bind"
###               ("_pattern" ("_pattern" ("_position" m0) ("_position" m1))
###                 ("_position" \<sigma>))
###               ("_applC" ("_position" \<A>1) ("_position" vk)))
###             ("_do_cons"
###               ("_do_bind" ("_idtypdummy" ("_type_name" unit))
###                 ("_applC" ("_position" assert_spmf)
###                   ("\<^const>HOL.conj"
###                     ("_applC" ("_position" valid_msg) ("_position" m0))
###                     ("_applC" ("_position" valid_msg) ("_position" m1)))))
###               ("_do_cons"
###                 ("_do_bind" ("_position" b) ("_position" coin_spmf))
###                 ("_do_cons"
###                   ("_do_bind" ("_pattern" ("_position" c) ("_position" d))
###                     ("_applC" ("_position" commit)
###                       ("_cargs" ("_position" ck)
###                         ("\<^const>HOL.If" ("_position" b) ("_position" m0)
###                           ("_position" m1)))))
###                   ("_do_cons"
###                     ("_do_bind"
###                       ("_idtyp" ("_position" b') ("_type_name" bool))
###                       ("_applC" ("_position" \<A>2)
###                         ("_cargs" ("_position" c) ("_position" \<sigma>))))
###                     ("_do_final"
###                       ("_applC" ("_position" return_spmf)
###                         ("\<^const>HOL.eq" ("_position" b')
###                           ("_position" b)))))))))))
###       ("_position" coin_spmf))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
consts
  hiding_game_ind_cpa ::
    "('vk => (('plain * 'plain) * 'state) spmf) *
     ('commit => 'state => bool spmf)
     => bool spmf"
### Ambiguous input (line 108 of "$AFP/Sigma_Commit_Crypto/Commitment_Schemes.thy") produces 2 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq" ("_applC" ("_position" bind_game) ("_position" \<A>))
###     ("\<^const>Generative_Probabilistic_Value.try_gpv"
###       ("_do_block"
###         ("_do_cons"
###           ("_do_bind" ("_pattern" ("_position" ck) ("_position" vk))
###             ("_position" key_gen))
###           ("_do_cons"
###             ("_do_bind"
###               ("_pattern" ("_position" c)
###                 ("_patterns" ("_position" m)
###                   ("_patterns" ("_position" d)
###                     ("_patterns" ("_position" m') ("_position" d')))))
###               ("_applC" ("_position" \<A>) ("_position" ck)))
###             ("_do_cons"
###               ("_do_bind" ("_idtypdummy" ("_type_name" unit))
###                 ("_applC" ("_position" assert_spmf)
###                   ("\<^const>HOL.conj"
###                     ("\<^const>HOL.not_equal" ("_position" m)
###                       ("_position" m'))
###                     ("\<^const>HOL.conj"
###                       ("_applC" ("_position" valid_msg) ("_position" m))
###                       ("_applC" ("_position" valid_msg)
###                         ("_position" m'))))))
###               ("_do_cons"
###                 ("_do_let" ("_position" b)
###                   ("_applC" ("_position" verify)
###                     ("_cargs" ("_position" vk)
###                       ("_cargs" ("_position" m)
###                         ("_cargs" ("_position" c) ("_position" d))))))
###                 ("_do_cons"
###                   ("_do_let" ("_position" b')
###                     ("_applC" ("_position" verify)
###                       ("_cargs" ("_position" vk)
###                         ("_cargs" ("_position" m')
###                           ("_cargs" ("_position" c) ("_position" d'))))))
###                   ("_do_final"
###                     ("_applC" ("_position" return_spmf)
###                       ("\<^const>HOL.conj" ("_position" b)
###                         ("_position" b'))))))))))
###       ("_applC" ("_position" return_spmf) ("_position" False)))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq" ("_applC" ("_position" bind_game) ("_position" \<A>))
###     ("\<^const>SPMF.try_spmf"
###       ("_do_block"
###         ("_do_cons"
###           ("_do_bind" ("_pattern" ("_position" ck) ("_position" vk))
###             ("_position" key_gen))
###           ("_do_cons"
###             ("_do_bind"
###               ("_pattern" ("_position" c)
###                 ("_patterns" ("_position" m)
###                   ("_patterns" ("_position" d)
###                     ("_patterns" ("_position" m') ("_position" d')))))
###               ("_applC" ("_position" \<A>) ("_position" ck)))
###             ("_do_cons"
###               ("_do_bind" ("_idtypdummy" ("_type_name" unit))
###                 ("_applC" ("_position" assert_spmf)
###                   ("\<^const>HOL.conj"
###                     ("\<^const>HOL.not_equal" ("_position" m)
###                       ("_position" m'))
###                     ("\<^const>HOL.conj"
###                       ("_applC" ("_position" valid_msg) ("_position" m))
###                       ("_applC" ("_position" valid_msg)
###                         ("_position" m'))))))
###               ("_do_cons"
###                 ("_do_let" ("_position" b)
###                   ("_applC" ("_position" verify)
###                     ("_cargs" ("_position" vk)
###                       ("_cargs" ("_position" m)
###                         ("_cargs" ("_position" c) ("_position" d))))))
###                 ("_do_cons"
###                   ("_do_let" ("_position" b')
###                     ("_applC" ("_position" verify)
###                       ("_cargs" ("_position" vk)
###                         ("_cargs" ("_position" m')
###                           ("_cargs" ("_position" c) ("_position" d'))))))
###                   ("_do_final"
###                     ("_applC" ("_position" return_spmf)
###                       ("\<^const>HOL.conj" ("_position" b)
###                         ("_position" b'))))))))))
###       ("_applC" ("_position" return_spmf) ("_position" False)))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 120 of "$AFP/Sigma_Commit_Crypto/Commitment_Schemes.thy") produces 2 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq" ("_applC" ("_position" bind_game) ("_position" \<A>))
###     ("\<^const>Generative_Probabilistic_Value.try_gpv"
###       ("_do_block"
###         ("_do_cons"
###           ("_do_bind" ("_pattern" ("_position" ck) ("_position" vk))
###             ("_position" key_gen))
###           ("_do_cons"
###             ("_do_bind"
###               ("_pattern" ("_position" c)
###                 ("_patterns" ("_position" m)
###                   ("_patterns" ("_position" d)
###                     ("_patterns" ("_position" m') ("_position" d')))))
###               ("_applC" ("_position" \<A>) ("_position" ck)))
###             ("_do_cons"
###               ("_do_bind" ("_idtypdummy" ("_type_name" unit))
###                 ("_applC" ("_position" assert_spmf)
###                   ("\<^const>HOL.conj"
###                     ("\<^const>HOL.not_equal" ("_position" m)
###                       ("_position" m'))
###                     ("\<^const>HOL.conj"
###                       ("_applC" ("_position" valid_msg) ("_position" m))
###                       ("_applC" ("_position" valid_msg)
###                         ("_position" m'))))))
###               ("_do_cons"
###                 ("_do_let" ("_position" b)
###                   ("_applC" ("_position" verify)
###                     ("_cargs" ("_position" vk)
###                       ("_cargs" ("_position" m)
###                         ("_cargs" ("_position" c) ("_position" d))))))
###                 ("_do_cons"
###                   ("_do_let" ("_position" b')
###                     ("_applC" ("_position" verify)
###                       ("_cargs" ("_position" vk)
###                         ("_cargs" ("_position" m')
###                           ("_cargs" ("_position" c) ("_position" d'))))))
###                   ("_do_cons"
###                     ("_do_bind" ("_idtypdummy" ("_type_name" unit))
###                       ("_applC" ("_position" assert_spmf)
###                         ("\<^const>HOL.conj" ("_position" b)
###                           ("_position" b'))))
###                     ("_do_final"
###                       ("_applC" ("_position" return_spmf)
###                         ("_position" True))))))))))
###       ("_applC" ("_position" return_spmf) ("_position" False)))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq" ("_applC" ("_position" bind_game) ("_position" \<A>))
###     ("\<^const>SPMF.try_spmf"
###       ("_do_block"
###         ("_do_cons"
###           ("_do_bind" ("_pattern" ("_position" ck) ("_position" vk))
###             ("_position" key_gen))
###           ("_do_cons"
###             ("_do_bind"
###               ("_pattern" ("_position" c)
###                 ("_patterns" ("_position" m)
###                   ("_patterns" ("_position" d)
###                     ("_patterns" ("_position" m') ("_position" d')))))
###               ("_applC" ("_position" \<A>) ("_position" ck)))
###             ("_do_cons"
###               ("_do_bind" ("_idtypdummy" ("_type_name" unit))
###                 ("_applC" ("_position" assert_spmf)
###                   ("\<^const>HOL.conj"
###                     ("\<^const>HOL.not_equal" ("_position" m)
###                       ("_position" m'))
###                     ("\<^const>HOL.conj"
###                       ("_applC" ("_position" valid_msg) ("_position" m))
###                       ("_applC" ("_position" valid_msg)
###                         ("_position" m'))))))
###               ("_do_cons"
###                 ("_do_let" ("_position" b)
###                   ("_applC" ("_position" verify)
###                     ("_cargs" ("_position" vk)
###                       ("_cargs" ("_position" m)
###                         ("_cargs" ("_position" c) ("_position" d))))))
###                 ("_do_cons"
###                   ("_do_let" ("_position" b')
###                     ("_applC" ("_position" verify)
###                       ("_cargs" ("_position" vk)
###                         ("_cargs" ("_position" m')
###                           ("_cargs" ("_position" c) ("_position" d'))))))
###                   ("_do_cons"
###                     ("_do_bind" ("_idtypdummy" ("_type_name" unit))
###                       ("_applC" ("_position" assert_spmf)
###                         ("\<^const>HOL.conj" ("_position" b)
###                           ("_position" b'))))
###                     ("_do_final"
###                       ("_applC" ("_position" return_spmf)
###                         ("_position" True))))))))))
###       ("_applC" ("_position" return_spmf) ("_position" False)))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### theory "Draft.Commitment_Schemes"
### 0.325s elapsed time, 1.090s cpu time, 0.127s GC time
Loading theory "Draft.Sigma_Protocols" (required by "Draft.Sigma_ANDTemplates" via "Draft.Sigma_AND")
locale \<Sigma>_protocols_base
  fixes init :: "'pub_input => 'witness => ('rand * 'msg) spmf"
    and response :: "'rand => 'witness => 'challenge => 'response spmf"
    and check :: "'pub_input => 'msg => 'challenge => 'response => bool"
    and Rel :: "('pub_input * 'witness) set"
    and S_raw :: "'pub_input => 'challenge => ('msg * 'response) spmf"
    and
    \<A>ss ::
      "'pub_input
       => 'msg * 'challenge * 'response
          => 'msg * 'challenge * 'response => 'witness spmf"
    and challenge_space :: "'challenge set"
    and valid_pub :: "'pub_input set"
  assumes "\<Sigma>_protocols_base Rel valid_pub"
locale \<Sigma>_protocols_to_commitments
  fixes init :: "'pub_input => 'witness => ('rand * 'msg) spmf"
    and response :: "'rand => 'witness => 'challenge => 'response spmf"
    and check :: "'pub_input => 'msg => 'challenge => 'response => bool"
    and Rel :: "('pub_input * 'witness) set"
    and S_raw :: "'pub_input => 'challenge => ('msg * 'response) spmf"
    and
    \<A>ss ::
      "'pub_input
       => 'msg * 'challenge * 'response
          => 'msg * 'challenge * 'response => 'witness spmf"
    and challenge_space :: "'challenge set"
    and valid_pub :: "'pub_input set"
    and G :: "('pub_input * 'witness) spmf"
  assumes
    "\<Sigma>_protocols_to_commitments init response check Rel S_raw \<A>ss
      challenge_space valid_pub G"
### Ambiguous input (line 172 of "$AFP/Sigma_Commit_Crypto/Sigma_Protocols.thy") produces 2 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq" ("_applC" ("_position" rel_game) ("_position" \<A>))
###     ("\<^const>Generative_Probabilistic_Value.try_gpv"
###       ("_do_block"
###         ("_do_cons"
###           ("_do_bind" ("_pattern" ("_position" h) ("_position" w))
###             ("_position" G))
###           ("_do_cons"
###             ("_do_bind" ("_position" w')
###               ("_applC" ("_position" \<A>) ("_position" h)))
###             ("_do_final"
###               ("_applC" ("_position" return_spmf)
###                 ("\<^const>Set.member"
###                   ("_tuple" ("_position" h) ("_tuple_arg" ("_position" w')))
###                   ("_position" Rel)))))))
###       ("_applC" ("_position" return_spmf) ("_position" False)))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq" ("_applC" ("_position" rel_game) ("_position" \<A>))
###     ("\<^const>SPMF.try_spmf"
###       ("_do_block"
###         ("_do_cons"
###           ("_do_bind" ("_pattern" ("_position" h) ("_position" w))
###             ("_position" G))
###           ("_do_cons"
###             ("_do_bind" ("_position" w')
###               ("_applC" ("_position" \<A>) ("_position" h)))
###             ("_do_final"
###               ("_applC" ("_position" return_spmf)
###                 ("\<^const>Set.member"
###                   ("_tuple" ("_position" h) ("_tuple_arg" ("_position" w')))
###                   ("_position" Rel)))))))
###       ("_applC" ("_position" return_spmf) ("_position" False)))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### theory "HOL-Library.BigO"
### 0.669s elapsed time, 2.100s cpu time, 0.192s GC time
Loading theory "Draft.ExtrEqs" (required by "Draft.Sigma_ANDTemplates")
### theory "Draft.Sigma_Protocols"
### 0.388s elapsed time, 1.156s cpu time, 0.065s GC time
val eqpattern =
   Pattern
    (
       Const ("HOL.Trueprop", "bool => prop") $
         (Const ("HOL.eq", "?'a => ?'a => bool") $
           Var (("_dummy_", 1), "?'a") $ Var (("_dummy_", 2), "?'a"))
       ):
   term Find_Theorems.criterion
val badeqpattern = Pattern (Const ("Pure.eq", "?'a => ?'a => prop")):
   term Find_Theorems.criterion
val undefpattern =
   Pattern
    (
       Const ("HOL.Trueprop", "bool => prop") $
         (Const ("HOL.eq", "?'a => ?'a => bool") $
           Var (("_dummy_", 1), "?'a") $ Const ("HOL.undefined", "?'a"))
       ):
   term Find_Theorems.criterion
val thmpattern =
   Pattern
    (Const ("HOL.Trueprop", "bool => prop") $ Var (("_dummy_", 1), "bool")):
   term Find_Theorems.criterion
val badnames =
   ["*nitpick*", "*Nitpick*", "*full_exhaustive*", "*_def*", "Enum.finite*",
    "*Quickcheck*", "ATP*", "*Nunchaku*", "*Code*", "*BNF*", "*SMT*",
    "*.*.*"]:
   string list
val unwanted_names =
   [(false, Name "*nitpick*"), (false, Name "*Nitpick*"),
    (false, Name "*full_exhaustive*"), (false, Name "*_def*"),
    (false, Name "Enum.finite*"), (false, Name "*Quickcheck*"),
    (false, Name "ATP*"), (false, Name "*Nunchaku*"),
    (false, Name "*Code*"), (false, Name "*BNF*"), (false, Name "*SMT*"),
    (false, Name "*.*.*")]:
   (bool * term Find_Theorems.criterion) list
val has_vars = fn: term -> bool
val get_all_eqs = fn: string -> Proof.context -> (string * thm) list
val get_all_thms = fn: string -> Proof.context -> (string * thm) list
val get_noneq_thms = fn: string -> Proof.context -> (string * thm) list
val template_eqs = fn:
   string -> Proof.context -> (string * thm * template) list
val template_thms = fn:
   string -> Proof.context -> (string * thm * template) list
### theory "Draft.ExtrEqs"
### 0.489s elapsed time, 1.035s cpu time, 0.053s GC time
locale Lattice.bounded_lattice
  fixes L :: "('a, 'b) gorder_scheme"  (structure)
  assumes "bounded_lattice L"
locale Xor.boolean_algebra
  fixes L :: "('a, 'b) boolean_algebra_scheme"  (structure)
  assumes "boolean_algebra L"
### theory "Draft.Xor"
### 2.553s elapsed time, 4.998s cpu time, 0.859s GC time
Loading theory "Draft.Sigma_AND" (required by "Draft.Sigma_ANDTemplates")
### Additional type variable(s) in locale specification "\<Sigma>_AND_base": 'a, 'b
locale \<Sigma>_AND_base
  fixes init1 :: "'pub1 => 'witness1 => ('rand1 * 'msg1) spmf"
    and response1 :: "'rand1 => 'witness1 => 'bool => 'response1 spmf"
    and check1 :: "'pub1 => 'msg1 => 'bool => 'response1 => bool"
    and Rel1 :: "('pub1 * 'witness1) set"
    and S1_raw :: "'pub1 => 'bool => ('msg1 * 'response1) spmf"
    and
    \<A>ss1 ::
      "'pub1
       => 'msg1 * 'bool * 'response1
          => 'msg1 * 'bool * 'response1 => 'witness1 spmf"
    and challenge_space1 :: "'bool set"
    and valid_pub1 :: "'pub1 set"
    and init0 :: "'pub0 => 'witness0 => ('rand0 * 'msg0) spmf"
    and response0 :: "'rand0 => 'witness0 => 'bool => 'response0 spmf"
    and check0 :: "'pub0 => 'msg0 => 'bool => 'response0 => bool"
    and Rel0 :: "('pub0 * 'witness0) set"
    and S0_raw :: "'pub0 => 'bool => ('msg0 * 'response0) spmf"
    and
    \<A>ss0 ::
      "'pub0
       => 'msg0 * 'bool * 'response0
          => 'msg0 * 'bool * 'response0 => 'witness0 spmf"
    and challenge_space0 :: "'bool set"
    and valid_pub0 :: "'pub0 set"
    and G :: "(('pub0 * 'pub1) * 'witness0 * 'witness1) spmf"
    and L :: "'bool boolean_algebra"  (structure)
  assumes
    "\<Sigma>_AND_base TYPE('a) TYPE('b) init1 response1 check1 Rel1 S1_raw
      \<A>ss1 valid_pub1 init0 response0 check0 Rel0 S0_raw \<A>ss0
      valid_pub0 G L"
Found termination order: "{}"
Found termination order: "{}"
locale \<Sigma>_AND
  fixes init1 :: "'a => 'b => ('c * 'd) spmf"
    and response1 :: "'c => 'b => 'e => 'f spmf"
    and check1 :: "'a => 'd => 'e => 'f => bool"
    and Rel1 :: "('a * 'b) set"
    and S1_raw :: "'a => 'e => ('d * 'f) spmf"
    and \<A>ss1 :: "'a => 'd * 'e * 'f => 'd * 'e * 'f => 'b spmf"
    and challenge_space1 :: "'e set"
    and valid_pub1 :: "'a set"
    and init0 :: "'g => 'h => ('i * 'j) spmf"
    and response0 :: "'i => 'h => 'e => 'k spmf"
    and check0 :: "'g => 'j => 'e => 'k => bool"
    and Rel0 :: "('g * 'h) set"
    and S0_raw :: "'g => 'e => ('j * 'k) spmf"
    and \<A>ss0 :: "'g => 'j * 'e * 'k => 'j * 'e * 'k => 'h spmf"
    and challenge_space0 :: "'e set"
    and valid_pub0 :: "'g set"
    and G :: "(('g * 'a) * 'h * 'b) spmf"
    and L :: "'e boolean_algebra"  (structure)
  assumes
    "\<Sigma>_AND init1 response1 check1 Rel1 S1_raw \<A>ss1 valid_pub1
      init0 response0 check0 Rel0 S0_raw \<A>ss0 valid_pub0 G L"
### theory "Draft.Sigma_AND"
### 1.440s elapsed time, 1.508s cpu time, 0.107s GC time
Loading theory "Draft.Sigma_ANDTemplates"
val templateLemmas = []: (string * thm * template) list
### theory "Draft.Sigma_ANDTemplates"
### 2.100s elapsed time, 2.939s cpu time, 0.891s GC time
val it = (): unit
