Loading theory "HOL-Library.Function_Algebras" (required by "Draft.FordFulkerson_AlgoTemplates" via "Draft.ExtrEqs" via "HOL-Library.BigO")
Loading theory "HOL-Library.Set_Algebras" (required by "Draft.FordFulkerson_AlgoTemplates" via "Draft.ExtrEqs" via "HOL-Library.BigO")
Loading theory "HOL-Library.Stream" (required by "Draft.FordFulkerson_AlgoTemplates" via "Draft.ExtrEqs")
Loading theory "HOL-Library.Tree" (required by "Draft.FordFulkerson_AlgoTemplates" via "Draft.ExtrEqs" via "Draft.Templates")
instantiation
  fun :: (type, plus) plus
  plus_fun == plus :: ('a => 'b) => ('a => 'b) => 'a => 'b
instantiation
  set :: (plus) plus
  plus_set == plus :: 'a set => 'a set => 'a set
instantiation
  fun :: (type, zero) zero
  zero_fun == zero_class.zero :: 'a => 'b
instantiation
  set :: (times) times
  times_set == times :: 'a set => 'a set => 'a set
instantiation
  fun :: (type, times) times
  times_fun == times :: ('a => 'b) => ('a => 'b) => 'a => 'b
instantiation
  set :: (zero) zero
  zero_set == zero_class.zero :: 'a set
instantiation
  fun :: (type, one) one
  one_fun == one_class.one :: 'a => 'b
instantiation
  set :: (one) one
  one_set == one_class.one :: 'a set
### theory "HOL-Library.Function_Algebras"
### 0.146s elapsed time, 0.591s cpu time, 0.063s GC time
Loading theory "Draft.FordFulkerson_Algo" (required by "Draft.FordFulkerson_AlgoTemplates")
### theory "HOL-Library.Set_Algebras"
### 0.234s elapsed time, 0.944s cpu time, 0.063s GC time
Loading theory "HOL-Library.BigO" (required by "Draft.FordFulkerson_AlgoTemplates" via "Draft.ExtrEqs")
consts
  shift :: "'a list => 'a stream => 'a stream"
Proofs for coinductive predicate(s) "streamsp"
  Proving monotonicity ...
consts
  snth :: "'a stream => nat => 'a"
consts
  left :: "'a tree => 'a tree"
consts
  right :: "'a tree => 'a tree"
consts
  stake :: "nat => 'a stream => 'a list"
consts
  sdrop :: "nat => 'a stream => 'a stream"
Found termination order: "size <*mlex*> {}"
consts
  sfilter :: "('a => bool) => 'a stream => 'a stream"
Found termination order: "size <*mlex*> {}"
consts
  cycle :: "'a list => 'a stream"
consts
  siterate :: "('a => 'a) => 'a => 'a stream"
Found termination order: "size <*mlex*> {}"
consts
  flat :: "'a list stream => 'a stream"
class height = type +
  fixes height :: "'a => nat"
instantiation
  tree :: (type) height
  height_tree == height :: 'a tree => nat
consts
  sinterleave :: "'a stream => 'a stream => 'a stream"
Found termination order: "size <*mlex*> {}"
consts
  szip :: "'a stream => 'b stream => ('a * 'b) stream"
consts
  smap2 :: "('a => 'b => 'c) => 'a stream => 'b stream => 'c stream"
Found termination order: "size <*mlex*> {}"
### theory "HOL-Library.Stream"
### 1.166s elapsed time, 4.373s cpu time, 1.079s GC time
Found termination order: "size <*mlex*> {}"
### theory "HOL-Library.BigO"
### 1.044s elapsed time, 3.774s cpu time, 1.071s GC time
Found termination order: "size <*mlex*> {}"
Found termination order: "size <*mlex*> {}"
Found termination order: "size <*mlex*> {}"
Found termination order: "size <*mlex*> {}"
Found termination order: "(%p. size (fst p)) <*mlex*> {}"
Found termination order: "size <*mlex*> {}"
Found termination order: "(%p. size (snd p)) <*mlex*> {}"
Found termination order: "size <*mlex*> {}"
### theory "HOL-Library.Tree"
### 2.103s elapsed time, 6.430s cpu time, 1.257s GC time
Loading theory "Draft.Templates" (required by "Draft.FordFulkerson_AlgoTemplates" via "Draft.ExtrEqs")
datatype template_term
=
     t_empty
   | template_app of template_term * template_term
   | template_hole of int
   | template_var of int
datatype sign
= equals | greater_equals | greater_than | less_equals | less_than
datatype template
=
     template_bimplication of template * template
   | template_dunno
   | template_equation of template_term * template_term
   | template_implication of template list * template
   | template_inequation of sign * template_term * template_term
   | template_negation of template
   | template_predicate of template_term
constructor t_empty: template_term
constructor template_app: template_term * template_term -> template_term
constructor template_hole: int -> template_term
constructor template_var: int -> template_term
constructor equals: sign
constructor greater_equals: sign
constructor greater_than: sign
constructor less_equals: sign
constructor less_than: sign
constructor template_bimplication: template * template -> template
constructor template_dunno: template
constructor template_equation: template_term * template_term -> template
constructor template_implication: template list * template -> template
constructor template_inequation:
   sign * template_term * template_term -> template
constructor template_negation: template -> template
constructor template_predicate: template_term -> template
val vfs = fn: term -> (indexname * typ) list * (string * typ) list
val indexOf = fn: ''a list -> ''a -> int -> int
val has_eq = fn: term -> bool
val term2template = fn:
   (indexname * typ) list -> (string * typ) list -> term -> template_term
val lemma2predicate = fn: term -> term -> template
val makeTemplatewithContext = fn: term -> term -> template
val lemma2template = fn: term -> template
val thm2template = fn: thm -> template
val tterm2string = fn: template_term -> string
val template2string = fn: template -> string
val t = "height ?t <= size ?t": thm
val th =
   Const ("HOL.Trueprop", "bool => prop") $
     (Const ("Orderings.ord_class.less_eq", "nat => nat => bool") $
       (Const ("Tree.height_class.height", "?'a tree => nat") $
         Var (("t", 0), "?'a tree")) $
       (Const ("Nat.size_class.size", "?'a tree => nat") $
         Var (("t", 0), "?'a tree"))):
   term
### theory "Draft.Templates"
### 0.056s elapsed time, 0.137s cpu time, 0.000s GC time
Loading theory "Draft.ExtrEqs" (required by "Draft.FordFulkerson_AlgoTemplates")
val eqpattern =
   Pattern
    (
       Const ("HOL.Trueprop", "bool => prop") $
         (Const ("HOL.eq", "?'a => ?'a => bool") $
           Var (("_dummy_", 1), "?'a") $ Var (("_dummy_", 2), "?'a"))
       ):
   term Find_Theorems.criterion
val badeqpattern = Pattern (Const ("Pure.eq", "?'a => ?'a => prop")):
   term Find_Theorems.criterion
val undefpattern =
   Pattern
    (
       Const ("HOL.Trueprop", "bool => prop") $
         (Const ("HOL.eq", "?'a => ?'a => bool") $
           Var (("_dummy_", 1), "?'a") $ Const ("HOL.undefined", "?'a"))
       ):
   term Find_Theorems.criterion
val thmpattern =
   Pattern
    (Const ("HOL.Trueprop", "bool => prop") $ Var (("_dummy_", 1), "bool")):
   term Find_Theorems.criterion
val badnames =
   ["*nitpick*", "*Nitpick*", "*full_exhaustive*", "*_def*", "Enum.finite*",
    "*Quickcheck*", "ATP*", "*Nunchaku*", "*Code*", "*BNF*", "*SMT*",
    "*.*.*"]:
   string list
val unwanted_names =
   [(false, Name "*nitpick*"), (false, Name "*Nitpick*"),
    (false, Name "*full_exhaustive*"), (false, Name "*_def*"),
    (false, Name "Enum.finite*"), (false, Name "*Quickcheck*"),
    (false, Name "ATP*"), (false, Name "*Nunchaku*"),
    (false, Name "*Code*"), (false, Name "*BNF*"), (false, Name "*SMT*"),
    (false, Name "*.*.*")]:
   (bool * term Find_Theorems.criterion) list
val has_vars = fn: term -> bool
val get_all_eqs = fn: string -> Proof.context -> (string * thm) list
val get_all_thms = fn: string -> Proof.context -> (string * thm) list
val get_noneq_thms = fn: string -> Proof.context -> (string * thm) list
val template_eqs = fn:
   string -> Proof.context -> (string * thm * template) list
val template_thms = fn:
   string -> Proof.context -> (string * thm * template) list
### theory "Draft.ExtrEqs"
### 0.560s elapsed time, 1.163s cpu time, 0.121s GC time
locale Network
  fixes c :: "nat * nat => 'capacity"
    and s :: "nat"
    and t :: "nat"
  assumes "Network c s t"
### Ambiguous input (line 37 of "$AFP/EdmondsKarp_Maxflow/FordFulkerson_Algo.thy") produces 8 parse trees:
### ("\<^const>Pure.eq" ("_position" fofu)
###   ("_do_block"
###     ("_do_cons"
###       ("_do_let" ("_position" f\<^sub>0)
###         ("_lambda" ("_idtdummy") ("\<^const>Groups.zero_class.zero")))
###       ("_do_cons"
###         ("_do_bind" ("_pattern" ("_position" f) ("_idtdummy"))
###           ("_applC"
###             ("\<^const>Refine_While.WHILEI" ("_position" fofu_invar))
###             ("_cargs"
###               ("_lambda" ("_pattern" ("_position" f) ("_position" brk))
###                 ("\<^const>HOL.Not" ("_position" brk)))
###               ("_cargs"
###                 ("_lambda" ("_pattern" ("_position" f) ("_idtdummy"))
###                   ("_do_block"
###                     ("_do_cons"
###                       ("_do_bind" ("_position" p)
###                         ("_applC" ("_position" find_augmenting_spec)
###                           ("_position" f)))
###                       ("_do_final"
###                         ("_case_syntax" ("_position" p)
###                           ("_case2"
###                             ("_case1" ("_position" None)
###                               ("_applC" ("\<^const>Heap_Monad.return")
###                                 ("_tuple" ("_position" f)
###                                   ("_tuple_arg" ("_position" True)))))
###                             ("_case1"
###                               ("_applC" ("_position" Some) ("_position" p))
###                               ("_do_block"
###                                 ("_do_cons"
###                                   ("_do_then"
###                                     ("_applC"
### ("\<^const>Refine_Basic.ASSERT")
### ("\<^const>HOL.not_equal" ("_position" p) ("\<^const>List.list.Nil"))))
###                                   ("_do_cons"
###                                     ("_do_then"
### ("_applC" ("\<^const>Refine_Basic.ASSERT")
###   ("_applC" ("_position" NPreflow.isAugmentingPath)
###     ("_cargs" ("_position" c)
###       ("_cargs" ("_position" s)
###         ("_cargs" ("_position" t)
###           ("_cargs" ("_position" f) ("_position" p))))))))
###                                     ("_do_cons"
### ("_do_let" ("_position" f)
###   ("_applC" ("_position" NFlow.augment_with_path)
###     ("_cargs" ("_position" c) ("_cargs" ("_position" f) ("_position" p)))))
### ("_do_cons"
###   ("_do_then"
###     ("_applC" ("\<^const>Refine_Basic.ASSERT")
###       ("_applC" ("_position" NFlow)
###         ("_cargs" ("_position" c)
###           ("_cargs" ("_position" s)
###             ("_cargs" ("_position" t) ("_position" f)))))))
###   ("_do_final"
###     ("_applC" ("\<^const>Refine_Basic.RETURN")
###       ("_tuple" ("_position" f)
###         ("_tuple_arg" ("_position" False)))))))))))))))))
###                 ("_tuple" ("_position" f\<^sub>0)
###                   ("_tuple_arg" ("_position" False)))))))
###         ("_do_cons"
###           ("_do_then"
###             ("_applC" ("\<^const>Refine_Basic.ASSERT")
###               ("_applC" ("_position" NFlow)
###                 ("_cargs" ("_position" c)
###                   ("_cargs" ("_position" s)
###                     ("_cargs" ("_position" t) ("_position" f)))))))
###           ("_do_final"
###             ("_applC" ("\<^const>Refine_Basic.RETURN")
###               ("_position" f))))))))
### ("\<^const>Pure.eq" ("_position" fofu)
###   ("_do_block"
###     ("_do_cons"
###       ("_do_let" ("_position" f\<^sub>0)
###         ("_lambda" ("_idtdummy") ("\<^const>Groups.zero_class.zero")))
###       ("_do_cons"
###         ("_do_bind" ("_pattern" ("_position" f) ("_idtdummy"))
###           ("_applC"
###             ("\<^const>Refine_While.WHILEI" ("_position" fofu_invar))
###             ("_cargs"
###               ("_lambda" ("_pattern" ("_position" f) ("_position" brk))
###                 ("\<^const>HOL.Not" ("_position" brk)))
###               ("_cargs"
###                 ("_lambda" ("_pattern" ("_position" f) ("_idtdummy"))
###                   ("_do_block"
###                     ("_do_cons"
###                       ("_do_bind" ("_position" p)
###                         ("_applC" ("_position" find_augmenting_spec)
###                           ("_position" f)))
###                       ("_do_final"
###                         ("_case_syntax" ("_position" p)
###                           ("_case2"
###                             ("_case1" ("_position" None)
###                               ("_applC" ("\<^const>Refine_Basic.RETURN")
###                                 ("_tuple" ("_position" f)
###                                   ("_tuple_arg" ("_position" True)))))
###                             ("_case1"
###                               ("_applC" ("_position" Some) ("_position" p))
###                               ("_do_block"
###                                 ("_do_cons"
###                                   ("_do_then"
###                                     ("_applC"
### ("\<^const>Refine_Basic.ASSERT")
### ("\<^const>HOL.not_equal" ("_position" p) ("\<^const>List.list.Nil"))))
###                                   ("_do_cons"
###                                     ("_do_then"
### ("_applC" ("\<^const>Refine_Basic.ASSERT")
###   ("_applC" ("_position" NPreflow.isAugmentingPath)
###     ("_cargs" ("_position" c)
###       ("_cargs" ("_position" s)
###         ("_cargs" ("_position" t)
###           ("_cargs" ("_position" f) ("_position" p))))))))
###                                     ("_do_cons"
### ("_do_let" ("_position" f)
###   ("_applC" ("_position" NFlow.augment_with_path)
###     ("_cargs" ("_position" c) ("_cargs" ("_position" f) ("_position" p)))))
### ("_do_cons"
###   ("_do_then"
###     ("_applC" ("\<^const>Refine_Basic.ASSERT")
###       ("_applC" ("_position" NFlow)
###         ("_cargs" ("_position" c)
###           ("_cargs" ("_position" s)
###             ("_cargs" ("_position" t) ("_position" f)))))))
###   ("_do_final"
###     ("_applC" ("\<^const>Refine_Basic.RETURN")
###       ("_tuple" ("_position" f)
###         ("_tuple_arg" ("_position" False)))))))))))))))))
###                 ("_tuple" ("_position" f\<^sub>0)
###                   ("_tuple_arg" ("_position" False)))))))
###         ("_do_cons"
###           ("_do_then"
###             ("_applC" ("\<^const>Refine_Basic.ASSERT")
###               ("_applC" ("_position" NFlow)
###                 ("_cargs" ("_position" c)
###                   ("_cargs" ("_position" s)
###                     ("_cargs" ("_position" t) ("_position" f)))))))
###           ("_do_final"
###             ("_applC" ("\<^const>Refine_Basic.RETURN")
###               ("_position" f))))))))
### ("\<^const>Pure.eq" ("_position" fofu)
###   ("_do_block"
###     ("_do_cons"
###       ("_do_let" ("_position" f\<^sub>0)
###         ("_lambda" ("_idtdummy") ("\<^const>Groups.zero_class.zero")))
###       ("_do_cons"
###         ("_do_bind" ("_pattern" ("_position" f) ("_idtdummy"))
###           ("_applC"
###             ("\<^const>Refine_While.WHILEI" ("_position" fofu_invar))
###             ("_cargs"
###               ("_lambda" ("_pattern" ("_position" f) ("_position" brk))
###                 ("\<^const>HOL.Not" ("_position" brk)))
###               ("_cargs"
###                 ("_lambda" ("_pattern" ("_position" f) ("_idtdummy"))
###                   ("_do_block"
###                     ("_do_cons"
###                       ("_do_bind" ("_position" p)
###                         ("_applC" ("_position" find_augmenting_spec)
###                           ("_position" f)))
###                       ("_do_final"
###                         ("_case_syntax" ("_position" p)
###                           ("_case2"
###                             ("_case1" ("_position" None)
###                               ("_applC" ("\<^const>Heap_Monad.return")
###                                 ("_tuple" ("_position" f)
###                                   ("_tuple_arg" ("_position" True)))))
###                             ("_case1"
###                               ("_applC" ("_position" Some) ("_position" p))
###                               ("_do_block"
###                                 ("_do_cons"
###                                   ("_do_then"
###                                     ("_applC"
### ("\<^const>Refine_Basic.ASSERT")
### ("\<^const>HOL.not_equal" ("_position" p) ("\<^const>List.list.Nil"))))
###                                   ("_do_cons"
###                                     ("_do_then"
### ("_applC" ("\<^const>Refine_Basic.ASSERT")
###   ("_applC" ("_position" NPreflow.isAugmentingPath)
###     ("_cargs" ("_position" c)
###       ("_cargs" ("_position" s)
###         ("_cargs" ("_position" t)
###           ("_cargs" ("_position" f) ("_position" p))))))))
###                                     ("_do_cons"
### ("_do_let" ("_position" f)
###   ("_applC" ("_position" NFlow.augment_with_path)
###     ("_cargs" ("_position" c) ("_cargs" ("_position" f) ("_position" p)))))
### ("_do_cons"
###   ("_do_then"
###     ("_applC" ("\<^const>Refine_Basic.ASSERT")
###       ("_applC" ("_position" NFlow)
###         ("_cargs" ("_position" c)
###           ("_cargs" ("_position" s)
###             ("_cargs" ("_position" t) ("_position" f)))))))
###   ("_do_final"
###     ("_applC" ("\<^const>Heap_Monad.return")
###       ("_tuple" ("_position" f)
###         ("_tuple_arg" ("_position" False)))))))))))))))))
###                 ("_tuple" ("_position" f\<^sub>0)
###                   ("_tuple_arg" ("_position" False)))))))
###         ("_do_cons"
###           ("_do_then"
###             ("_applC" ("\<^const>Refine_Basic.ASSERT")
###               ("_applC" ("_position" NFlow)
###                 ("_cargs" ("_position" c)
###                   ("_cargs" ("_position" s)
###                     ("_cargs" ("_position" t) ("_position" f)))))))
###           ("_do_final"
###             ("_applC" ("\<^const>Refine_Basic.RETURN")
###               ("_position" f))))))))
### ("\<^const>Pure.eq" ("_position" fofu)
###   ("_do_block"
###     ("_do_cons"
###       ("_do_let" ("_position" f\<^sub>0)
###         ("_lambda" ("_idtdummy") ("\<^const>Groups.zero_class.zero")))
###       ("_do_cons"
###         ("_do_bind" ("_pattern" ("_position" f) ("_idtdummy"))
###           ("_applC"
###             ("\<^const>Refine_While.WHILEI" ("_position" fofu_invar))
###             ("_cargs"
###               ("_lambda" ("_pattern" ("_position" f) ("_position" brk))
###                 ("\<^const>HOL.Not" ("_position" brk)))
###               ("_cargs"
###                 ("_lambda" ("_pattern" ("_position" f) ("_idtdummy"))
###                   ("_do_block"
###                     ("_do_cons"
###                       ("_do_bind" ("_position" p)
###                         ("_applC" ("_position" find_augmenting_spec)
###                           ("_position" f)))
###                       ("_do_final"
###                         ("_case_syntax" ("_position" p)
###                           ("_case2"
###                             ("_case1" ("_position" None)
###                               ("_applC" ("\<^const>Refine_Basic.RETURN")
###                                 ("_tuple" ("_position" f)
###                                   ("_tuple_arg" ("_position" True)))))
###                             ("_case1"
###                               ("_applC" ("_position" Some) ("_position" p))
###                               ("_do_block"
###                                 ("_do_cons"
###                                   ("_do_then"
###                                     ("_applC"
### ("\<^const>Refine_Basic.ASSERT")
### ("\<^const>HOL.not_equal" ("_position" p) ("\<^const>List.list.Nil"))))
###                                   ("_do_cons"
###                                     ("_do_then"
### ("_applC" ("\<^const>Refine_Basic.ASSERT")
###   ("_applC" ("_position" NPreflow.isAugmentingPath)
###     ("_cargs" ("_position" c)
###       ("_cargs" ("_position" s)
###         ("_cargs" ("_position" t)
###           ("_cargs" ("_position" f) ("_position" p))))))))
###                                     ("_do_cons"
### ("_do_let" ("_position" f)
###   ("_applC" ("_position" NFlow.augment_with_path)
###     ("_cargs" ("_position" c) ("_cargs" ("_position" f) ("_position" p)))))
### ("_do_cons"
###   ("_do_then"
###     ("_applC" ("\<^const>Refine_Basic.ASSERT")
###       ("_applC" ("_position" NFlow)
###         ("_cargs" ("_position" c)
###           ("_cargs" ("_position" s)
###             ("_cargs" ("_position" t) ("_position" f)))))))
###   ("_do_final"
###     ("_applC" ("\<^const>Heap_Monad.return")
###       ("_tuple" ("_position" f)
###         ("_tuple_arg" ("_position" False)))))))))))))))))
###                 ("_tuple" ("_position" f\<^sub>0)
###                   ("_tuple_arg" ("_position" False)))))))
###         ("_do_cons"
###           ("_do_then"
###             ("_applC" ("\<^const>Refine_Basic.ASSERT")
###               ("_applC" ("_position" NFlow)
###                 ("_cargs" ("_position" c)
###                   ("_cargs" ("_position" s)
###                     ("_cargs" ("_position" t) ("_position" f)))))))
###           ("_do_final"
###             ("_applC" ("\<^const>Refine_Basic.RETURN")
###               ("_position" f))))))))
### ("\<^const>Pure.eq" ("_position" fofu)
###   ("_do_block"
###     ("_do_cons"
###       ("_do_let" ("_position" f\<^sub>0)
###         ("_lambda" ("_idtdummy") ("\<^const>Groups.zero_class.zero")))
###       ("_do_cons"
###         ("_do_bind" ("_pattern" ("_position" f) ("_idtdummy"))
###           ("_applC"
###             ("\<^const>Refine_While.WHILEI" ("_position" fofu_invar))
###             ("_cargs"
###               ("_lambda" ("_pattern" ("_position" f) ("_position" brk))
###                 ("\<^const>HOL.Not" ("_position" brk)))
###               ("_cargs"
###                 ("_lambda" ("_pattern" ("_position" f) ("_idtdummy"))
###                   ("_do_block"
###                     ("_do_cons"
###                       ("_do_bind" ("_position" p)
###                         ("_applC" ("_position" find_augmenting_spec)
###                           ("_position" f)))
###                       ("_do_final"
###                         ("_case_syntax" ("_position" p)
###                           ("_case2"
###                             ("_case1" ("_position" None)
###                               ("_applC" ("\<^const>Heap_Monad.return")
###                                 ("_tuple" ("_position" f)
###                                   ("_tuple_arg" ("_position" True)))))
###                             ("_case1"
###                               ("_applC" ("_position" Some) ("_position" p))
###                               ("_do_block"
###                                 ("_do_cons"
###                                   ("_do_then"
###                                     ("_applC"
### ("\<^const>Refine_Basic.ASSERT")
### ("\<^const>HOL.not_equal" ("_position" p) ("\<^const>List.list.Nil"))))
###                                   ("_do_cons"
###                                     ("_do_then"
### ("_applC" ("\<^const>Refine_Basic.ASSERT")
###   ("_applC" ("_position" NPreflow.isAugmentingPath)
###     ("_cargs" ("_position" c)
###       ("_cargs" ("_position" s)
###         ("_cargs" ("_position" t)
###           ("_cargs" ("_position" f) ("_position" p))))))))
###                                     ("_do_cons"
### ("_do_let" ("_position" f)
###   ("_applC" ("_position" NFlow.augment_with_path)
###     ("_cargs" ("_position" c) ("_cargs" ("_position" f) ("_position" p)))))
### ("_do_cons"
###   ("_do_then"
###     ("_applC" ("\<^const>Refine_Basic.ASSERT")
###       ("_applC" ("_position" NFlow)
###         ("_cargs" ("_position" c)
###           ("_cargs" ("_position" s)
###             ("_cargs" ("_position" t) ("_position" f)))))))
###   ("_do_final"
###     ("_applC" ("\<^const>Refine_Basic.RETURN")
###       ("_tuple" ("_position" f)
###         ("_tuple_arg" ("_position" False)))))))))))))))))
###                 ("_tuple" ("_position" f\<^sub>0)
###                   ("_tuple_arg" ("_position" False)))))))
###         ("_do_cons"
###           ("_do_then"
###             ("_applC" ("\<^const>Refine_Basic.ASSERT")
###               ("_applC" ("_position" NFlow)
###                 ("_cargs" ("_position" c)
###                   ("_cargs" ("_position" s)
###                     ("_cargs" ("_position" t) ("_position" f)))))))
###           ("_do_final"
###             ("_applC" ("\<^const>Heap_Monad.return") ("_position" f))))))))
### ("\<^const>Pure.eq" ("_position" fofu)
###   ("_do_block"
###     ("_do_cons"
###       ("_do_let" ("_position" f\<^sub>0)
###         ("_lambda" ("_idtdummy") ("\<^const>Groups.zero_class.zero")))
###       ("_do_cons"
###         ("_do_bind" ("_pattern" ("_position" f) ("_idtdummy"))
###           ("_applC"
###             ("\<^const>Refine_While.WHILEI" ("_position" fofu_invar))
###             ("_cargs"
###               ("_lambda" ("_pattern" ("_position" f) ("_position" brk))
###                 ("\<^const>HOL.Not" ("_position" brk)))
###               ("_cargs"
###                 ("_lambda" ("_pattern" ("_position" f) ("_idtdummy"))
###                   ("_do_block"
###                     ("_do_cons"
###                       ("_do_bind" ("_position" p)
###                         ("_applC" ("_position" find_augmenting_spec)
###                           ("_position" f)))
###                       ("_do_final"
###                         ("_case_syntax" ("_position" p)
###                           ("_case2"
###                             ("_case1" ("_position" None)
###                               ("_applC" ("\<^const>Refine_Basic.RETURN")
###                                 ("_tuple" ("_position" f)
###                                   ("_tuple_arg" ("_position" True)))))
###                             ("_case1"
###                               ("_applC" ("_position" Some) ("_position" p))
###                               ("_do_block"
###                                 ("_do_cons"
###                                   ("_do_then"
###                                     ("_applC"
### ("\<^const>Refine_Basic.ASSERT")
### ("\<^const>HOL.not_equal" ("_position" p) ("\<^const>List.list.Nil"))))
###                                   ("_do_cons"
###                                     ("_do_then"
### ("_applC" ("\<^const>Refine_Basic.ASSERT")
###   ("_applC" ("_position" NPreflow.isAugmentingPath)
###     ("_cargs" ("_position" c)
###       ("_cargs" ("_position" s)
###         ("_cargs" ("_position" t)
###           ("_cargs" ("_position" f) ("_position" p))))))))
###                                     ("_do_cons"
### ("_do_let" ("_position" f)
###   ("_applC" ("_position" NFlow.augment_with_path)
###     ("_cargs" ("_position" c) ("_cargs" ("_position" f) ("_position" p)))))
### ("_do_cons"
###   ("_do_then"
###     ("_applC" ("\<^const>Refine_Basic.ASSERT")
###       ("_applC" ("_position" NFlow)
###         ("_cargs" ("_position" c)
###           ("_cargs" ("_position" s)
###             ("_cargs" ("_position" t) ("_position" f)))))))
###   ("_do_final"
###     ("_applC" ("\<^const>Refine_Basic.RETURN")
###       ("_tuple" ("_position" f)
###         ("_tuple_arg" ("_position" False)))))))))))))))))
###                 ("_tuple" ("_position" f\<^sub>0)
###                   ("_tuple_arg" ("_position" False)))))))
###         ("_do_cons"
###           ("_do_then"
###             ("_applC" ("\<^const>Refine_Basic.ASSERT")
###               ("_applC" ("_position" NFlow)
###                 ("_cargs" ("_position" c)
###                   ("_cargs" ("_position" s)
###                     ("_cargs" ("_position" t) ("_position" f)))))))
###           ("_do_final"
###             ("_applC" ("\<^const>Heap_Monad.return") ("_position" f))))))))
### ("\<^const>Pure.eq" ("_position" fofu)
###   ("_do_block"
###     ("_do_cons"
###       ("_do_let" ("_position" f\<^sub>0)
###         ("_lambda" ("_idtdummy") ("\<^const>Groups.zero_class.zero")))
###       ("_do_cons"
###         ("_do_bind" ("_pattern" ("_position" f) ("_idtdummy"))
###           ("_applC"
###             ("\<^const>Refine_While.WHILEI" ("_position" fofu_invar))
###             ("_cargs"
###               ("_lambda" ("_pattern" ("_position" f) ("_position" brk))
###                 ("\<^const>HOL.Not" ("_position" brk)))
###               ("_cargs"
###                 ("_lambda" ("_pattern" ("_position" f) ("_idtdummy"))
###                   ("_do_block"
###                     ("_do_cons"
###                       ("_do_bind" ("_position" p)
###                         ("_applC" ("_position" find_augmenting_spec)
###                           ("_position" f)))
###                       ("_do_final"
###                         ("_case_syntax" ("_position" p)
###                           ("_case2"
###                             ("_case1" ("_position" None)
###                               ("_applC" ("\<^const>Heap_Monad.return")
###                                 ("_tuple" ("_position" f)
###                                   ("_tuple_arg" ("_position" True)))))
###                             ("_case1"
###                               ("_applC" ("_position" Some) ("_position" p))
###                               ("_do_block"
###                                 ("_do_cons"
###                                   ("_do_then"
###                                     ("_applC"
### ("\<^const>Refine_Basic.ASSERT")
### ("\<^const>HOL.not_equal" ("_position" p) ("\<^const>List.list.Nil"))))
###                                   ("_do_cons"
###                                     ("_do_then"
### ("_applC" ("\<^const>Refine_Basic.ASSERT")
###   ("_applC" ("_position" NPreflow.isAugmentingPath)
###     ("_cargs" ("_position" c)
###       ("_cargs" ("_position" s)
###         ("_cargs" ("_position" t)
###           ("_cargs" ("_position" f) ("_position" p))))))))
###                                     ("_do_cons"
### ("_do_let" ("_position" f)
###   ("_applC" ("_position" NFlow.augment_with_path)
###     ("_cargs" ("_position" c) ("_cargs" ("_position" f) ("_position" p)))))
### ("_do_cons"
###   ("_do_then"
###     ("_applC" ("\<^const>Refine_Basic.ASSERT")
###       ("_applC" ("_position" NFlow)
###         ("_cargs" ("_position" c)
###           ("_cargs" ("_position" s)
###             ("_cargs" ("_position" t) ("_position" f)))))))
###   ("_do_final"
###     ("_applC" ("\<^const>Heap_Monad.return")
###       ("_tuple" ("_position" f)
###         ("_tuple_arg" ("_position" False)))))))))))))))))
###                 ("_tuple" ("_position" f\<^sub>0)
###                   ("_tuple_arg" ("_position" False)))))))
###         ("_do_cons"
###           ("_do_then"
###             ("_applC" ("\<^const>Refine_Basic.ASSERT")
###               ("_applC" ("_position" NFlow)
###                 ("_cargs" ("_position" c)
###                   ("_cargs" ("_position" s)
###                     ("_cargs" ("_position" t) ("_position" f)))))))
###           ("_do_final"
###             ("_applC" ("\<^const>Heap_Monad.return") ("_position" f))))))))
### ("\<^const>Pure.eq" ("_position" fofu)
###   ("_do_block"
###     ("_do_cons"
###       ("_do_let" ("_position" f\<^sub>0)
###         ("_lambda" ("_idtdummy") ("\<^const>Groups.zero_class.zero")))
###       ("_do_cons"
###         ("_do_bind" ("_pattern" ("_position" f) ("_idtdummy"))
###           ("_applC"
###             ("\<^const>Refine_While.WHILEI" ("_position" fofu_invar))
###             ("_cargs"
###               ("_lambda" ("_pattern" ("_position" f) ("_position" brk))
###                 ("\<^const>HOL.Not" ("_position" brk)))
###               ("_cargs"
###                 ("_lambda" ("_pattern" ("_position" f) ("_idtdummy"))
###                   ("_do_block"
###                     ("_do_cons"
###                       ("_do_bind" ("_position" p)
###                         ("_applC" ("_position" find_augmenting_spec)
###                           ("_position" f)))
###                       ("_do_final"
###                         ("_case_syntax" ("_position" p)
###                           ("_case2"
###                             ("_case1" ("_position" None)
###                               ("_applC" ("\<^const>Refine_Basic.RETURN")
###                                 ("_tuple" ("_position" f)
###                                   ("_tuple_arg" ("_position" True)))))
###                             ("_case1"
###                               ("_applC" ("_position" Some) ("_position" p))
###                               ("_do_block"
###                                 ("_do_cons"
###                                   ("_do_then"
###                                     ("_applC"
### ("\<^const>Refine_Basic.ASSERT")
### ("\<^const>HOL.not_equal" ("_position" p) ("\<^const>List.list.Nil"))))
###                                   ("_do_cons"
###                                     ("_do_then"
### ("_applC" ("\<^const>Refine_Basic.ASSERT")
###   ("_applC" ("_position" NPreflow.isAugmentingPath)
###     ("_cargs" ("_position" c)
###       ("_cargs" ("_position" s)
###         ("_cargs" ("_position" t)
###           ("_cargs" ("_position" f) ("_position" p))))))))
###                                     ("_do_cons"
### ("_do_let" ("_position" f)
###   ("_applC" ("_position" NFlow.augment_with_path)
###     ("_cargs" ("_position" c) ("_cargs" ("_position" f) ("_position" p)))))
### ("_do_cons"
###   ("_do_then"
###     ("_applC" ("\<^const>Refine_Basic.ASSERT")
###       ("_applC" ("_position" NFlow)
###         ("_cargs" ("_position" c)
###           ("_cargs" ("_position" s)
###             ("_cargs" ("_position" t) ("_position" f)))))))
###   ("_do_final"
###     ("_applC" ("\<^const>Heap_Monad.return")
###       ("_tuple" ("_position" f)
###         ("_tuple_arg" ("_position" False)))))))))))))))))
###                 ("_tuple" ("_position" f\<^sub>0)
###                   ("_tuple_arg" ("_position" False)))))))
###         ("_do_cons"
###           ("_do_then"
###             ("_applC" ("\<^const>Refine_Basic.ASSERT")
###               ("_applC" ("_position" NFlow)
###                 ("_cargs" ("_position" c)
###                   ("_cargs" ("_position" s)
###                     ("_cargs" ("_position" t) ("_position" f)))))))
###           ("_do_final"
###             ("_applC" ("\<^const>Heap_Monad.return") ("_position" f))))))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 113 of "$AFP/EdmondsKarp_Maxflow/FordFulkerson_Algo.thy") produces 8 parse trees:
### ("\<^const>Pure.eq" ("_position" ford_fulkerson_method)
###   ("_do_block"
###     ("_do_cons"
###       ("_do_let" ("_position" f\<^sub>0)
###         ("_lambda" ("_pattern" ("_position" u) ("_position" v))
###           ("\<^const>Groups.zero_class.zero")))
###       ("_do_cons"
###         ("_do_bind" ("_pattern" ("_position" f) ("_position" brk))
###           ("_applC" ("\<^const>Refine_While.WHILE")
###             ("_cargs"
###               ("_lambda" ("_pattern" ("_position" f) ("_position" brk))
###                 ("\<^const>HOL.Not" ("_position" brk)))
###               ("_cargs"
###                 ("_lambda" ("_pattern" ("_position" f) ("_position" brk))
###                   ("_do_block"
###                     ("_do_cons"
###                       ("_do_bind" ("_position" p)
###                         ("\<^const>Refine_More_Comb.SELECT_binder"
###                           ("_position" p)
###                           ("_applC" ("_position" is_augmenting_path)
###                             ("_cargs" ("_position" f) ("_position" p)))))
###                       ("_do_final"
###                         ("_case_syntax" ("_position" p)
###                           ("_case2"
###                             ("_case1" ("_position" None)
###                               ("_applC" ("\<^const>Heap_Monad.return")
###                                 ("_tuple" ("_position" f)
###                                   ("_tuple_arg" ("_position" True)))))
###                             ("_case1"
###                               ("_applC" ("_position" Some) ("_position" p))
###                               ("_applC" ("\<^const>Heap_Monad.return")
###                                 ("_tuple"
###                                   ("_applC" ("_position" augment)
###                                     ("_cargs" ("_position" c)
### ("_cargs" ("_position" f) ("_position" p))))
###                                   ("_tuple_arg"
###                                     ("_position" False)))))))))))
###                 ("_tuple" ("_position" f\<^sub>0)
###                   ("_tuple_arg" ("_position" False)))))))
###         ("_do_final"
###           ("_applC" ("\<^const>Refine_Basic.RETURN") ("_position" f)))))))
### ("\<^const>Pure.eq" ("_position" ford_fulkerson_method)
###   ("_do_block"
###     ("_do_cons"
###       ("_do_let" ("_position" f\<^sub>0)
###         ("_lambda" ("_pattern" ("_position" u) ("_position" v))
###           ("\<^const>Groups.zero_class.zero")))
###       ("_do_cons"
###         ("_do_bind" ("_pattern" ("_position" f) ("_position" brk))
###           ("_applC" ("\<^const>Refine_While.WHILE")
###             ("_cargs"
###               ("_lambda" ("_pattern" ("_position" f) ("_position" brk))
###                 ("\<^const>HOL.Not" ("_position" brk)))
###               ("_cargs"
###                 ("_lambda" ("_pattern" ("_position" f) ("_position" brk))
###                   ("_do_block"
###                     ("_do_cons"
###                       ("_do_bind" ("_position" p)
###                         ("\<^const>Refine_More_Comb.SELECT_binder"
###                           ("_position" p)
###                           ("_applC" ("_position" is_augmenting_path)
###                             ("_cargs" ("_position" f) ("_position" p)))))
###                       ("_do_final"
###                         ("_case_syntax" ("_position" p)
###                           ("_case2"
###                             ("_case1" ("_position" None)
###                               ("_applC" ("\<^const>Refine_Basic.RETURN")
###                                 ("_tuple" ("_position" f)
###                                   ("_tuple_arg" ("_position" True)))))
###                             ("_case1"
###                               ("_applC" ("_position" Some) ("_position" p))
###                               ("_applC" ("\<^const>Heap_Monad.return")
###                                 ("_tuple"
###                                   ("_applC" ("_position" augment)
###                                     ("_cargs" ("_position" c)
### ("_cargs" ("_position" f) ("_position" p))))
###                                   ("_tuple_arg"
###                                     ("_position" False)))))))))))
###                 ("_tuple" ("_position" f\<^sub>0)
###                   ("_tuple_arg" ("_position" False)))))))
###         ("_do_final"
###           ("_applC" ("\<^const>Refine_Basic.RETURN") ("_position" f)))))))
### ("\<^const>Pure.eq" ("_position" ford_fulkerson_method)
###   ("_do_block"
###     ("_do_cons"
###       ("_do_let" ("_position" f\<^sub>0)
###         ("_lambda" ("_pattern" ("_position" u) ("_position" v))
###           ("\<^const>Groups.zero_class.zero")))
###       ("_do_cons"
###         ("_do_bind" ("_pattern" ("_position" f) ("_position" brk))
###           ("_applC" ("\<^const>Refine_While.WHILE")
###             ("_cargs"
###               ("_lambda" ("_pattern" ("_position" f) ("_position" brk))
###                 ("\<^const>HOL.Not" ("_position" brk)))
###               ("_cargs"
###                 ("_lambda" ("_pattern" ("_position" f) ("_position" brk))
###                   ("_do_block"
###                     ("_do_cons"
###                       ("_do_bind" ("_position" p)
###                         ("\<^const>Refine_More_Comb.SELECT_binder"
###                           ("_position" p)
###                           ("_applC" ("_position" is_augmenting_path)
###                             ("_cargs" ("_position" f) ("_position" p)))))
###                       ("_do_final"
###                         ("_case_syntax" ("_position" p)
###                           ("_case2"
###                             ("_case1" ("_position" None)
###                               ("_applC" ("\<^const>Heap_Monad.return")
###                                 ("_tuple" ("_position" f)
###                                   ("_tuple_arg" ("_position" True)))))
###                             ("_case1"
###                               ("_applC" ("_position" Some) ("_position" p))
###                               ("_applC" ("\<^const>Refine_Basic.RETURN")
###                                 ("_tuple"
###                                   ("_applC" ("_position" augment)
###                                     ("_cargs" ("_position" c)
### ("_cargs" ("_position" f) ("_position" p))))
###                                   ("_tuple_arg"
###                                     ("_position" False)))))))))))
###                 ("_tuple" ("_position" f\<^sub>0)
###                   ("_tuple_arg" ("_position" False)))))))
###         ("_do_final"
###           ("_applC" ("\<^const>Refine_Basic.RETURN") ("_position" f)))))))
### ("\<^const>Pure.eq" ("_position" ford_fulkerson_method)
###   ("_do_block"
###     ("_do_cons"
###       ("_do_let" ("_position" f\<^sub>0)
###         ("_lambda" ("_pattern" ("_position" u) ("_position" v))
###           ("\<^const>Groups.zero_class.zero")))
###       ("_do_cons"
###         ("_do_bind" ("_pattern" ("_position" f) ("_position" brk))
###           ("_applC" ("\<^const>Refine_While.WHILE")
###             ("_cargs"
###               ("_lambda" ("_pattern" ("_position" f) ("_position" brk))
###                 ("\<^const>HOL.Not" ("_position" brk)))
###               ("_cargs"
###                 ("_lambda" ("_pattern" ("_position" f) ("_position" brk))
###                   ("_do_block"
###                     ("_do_cons"
###                       ("_do_bind" ("_position" p)
###                         ("\<^const>Refine_More_Comb.SELECT_binder"
###                           ("_position" p)
###                           ("_applC" ("_position" is_augmenting_path)
###                             ("_cargs" ("_position" f) ("_position" p)))))
###                       ("_do_final"
###                         ("_case_syntax" ("_position" p)
###                           ("_case2"
###                             ("_case1" ("_position" None)
###                               ("_applC" ("\<^const>Refine_Basic.RETURN")
###                                 ("_tuple" ("_position" f)
###                                   ("_tuple_arg" ("_position" True)))))
###                             ("_case1"
###                               ("_applC" ("_position" Some) ("_position" p))
###                               ("_applC" ("\<^const>Refine_Basic.RETURN")
###                                 ("_tuple"
###                                   ("_applC" ("_position" augment)
###                                     ("_cargs" ("_position" c)
### ("_cargs" ("_position" f) ("_position" p))))
###                                   ("_tuple_arg"
###                                     ("_position" False)))))))))))
###                 ("_tuple" ("_position" f\<^sub>0)
###                   ("_tuple_arg" ("_position" False)))))))
###         ("_do_final"
###           ("_applC" ("\<^const>Refine_Basic.RETURN") ("_position" f)))))))
### ("\<^const>Pure.eq" ("_position" ford_fulkerson_method)
###   ("_do_block"
###     ("_do_cons"
###       ("_do_let" ("_position" f\<^sub>0)
###         ("_lambda" ("_pattern" ("_position" u) ("_position" v))
###           ("\<^const>Groups.zero_class.zero")))
###       ("_do_cons"
###         ("_do_bind" ("_pattern" ("_position" f) ("_position" brk))
###           ("_applC" ("\<^const>Refine_While.WHILE")
###             ("_cargs"
###               ("_lambda" ("_pattern" ("_position" f) ("_position" brk))
###                 ("\<^const>HOL.Not" ("_position" brk)))
###               ("_cargs"
###                 ("_lambda" ("_pattern" ("_position" f) ("_position" brk))
###                   ("_do_block"
###                     ("_do_cons"
###                       ("_do_bind" ("_position" p)
###                         ("\<^const>Refine_More_Comb.SELECT_binder"
###                           ("_position" p)
###                           ("_applC" ("_position" is_augmenting_path)
###                             ("_cargs" ("_position" f) ("_position" p)))))
###                       ("_do_final"
###                         ("_case_syntax" ("_position" p)
###                           ("_case2"
###                             ("_case1" ("_position" None)
###                               ("_applC" ("\<^const>Heap_Monad.return")
###                                 ("_tuple" ("_position" f)
###                                   ("_tuple_arg" ("_position" True)))))
###                             ("_case1"
###                               ("_applC" ("_position" Some) ("_position" p))
###                               ("_applC" ("\<^const>Heap_Monad.return")
###                                 ("_tuple"
###                                   ("_applC" ("_position" augment)
###                                     ("_cargs" ("_position" c)
### ("_cargs" ("_position" f) ("_position" p))))
###                                   ("_tuple_arg"
###                                     ("_position" False)))))))))))
###                 ("_tuple" ("_position" f\<^sub>0)
###                   ("_tuple_arg" ("_position" False)))))))
###         ("_do_final"
###           ("_applC" ("\<^const>Heap_Monad.return") ("_position" f)))))))
### ("\<^const>Pure.eq" ("_position" ford_fulkerson_method)
###   ("_do_block"
###     ("_do_cons"
###       ("_do_let" ("_position" f\<^sub>0)
###         ("_lambda" ("_pattern" ("_position" u) ("_position" v))
###           ("\<^const>Groups.zero_class.zero")))
###       ("_do_cons"
###         ("_do_bind" ("_pattern" ("_position" f) ("_position" brk))
###           ("_applC" ("\<^const>Refine_While.WHILE")
###             ("_cargs"
###               ("_lambda" ("_pattern" ("_position" f) ("_position" brk))
###                 ("\<^const>HOL.Not" ("_position" brk)))
###               ("_cargs"
###                 ("_lambda" ("_pattern" ("_position" f) ("_position" brk))
###                   ("_do_block"
###                     ("_do_cons"
###                       ("_do_bind" ("_position" p)
###                         ("\<^const>Refine_More_Comb.SELECT_binder"
###                           ("_position" p)
###                           ("_applC" ("_position" is_augmenting_path)
###                             ("_cargs" ("_position" f) ("_position" p)))))
###                       ("_do_final"
###                         ("_case_syntax" ("_position" p)
###                           ("_case2"
###                             ("_case1" ("_position" None)
###                               ("_applC" ("\<^const>Refine_Basic.RETURN")
###                                 ("_tuple" ("_position" f)
###                                   ("_tuple_arg" ("_position" True)))))
###                             ("_case1"
###                               ("_applC" ("_position" Some) ("_position" p))
###                               ("_applC" ("\<^const>Heap_Monad.return")
###                                 ("_tuple"
###                                   ("_applC" ("_position" augment)
###                                     ("_cargs" ("_position" c)
### ("_cargs" ("_position" f) ("_position" p))))
###                                   ("_tuple_arg"
###                                     ("_position" False)))))))))))
###                 ("_tuple" ("_position" f\<^sub>0)
###                   ("_tuple_arg" ("_position" False)))))))
###         ("_do_final"
###           ("_applC" ("\<^const>Heap_Monad.return") ("_position" f)))))))
### ("\<^const>Pure.eq" ("_position" ford_fulkerson_method)
###   ("_do_block"
###     ("_do_cons"
###       ("_do_let" ("_position" f\<^sub>0)
###         ("_lambda" ("_pattern" ("_position" u) ("_position" v))
###           ("\<^const>Groups.zero_class.zero")))
###       ("_do_cons"
###         ("_do_bind" ("_pattern" ("_position" f) ("_position" brk))
###           ("_applC" ("\<^const>Refine_While.WHILE")
###             ("_cargs"
###               ("_lambda" ("_pattern" ("_position" f) ("_position" brk))
###                 ("\<^const>HOL.Not" ("_position" brk)))
###               ("_cargs"
###                 ("_lambda" ("_pattern" ("_position" f) ("_position" brk))
###                   ("_do_block"
###                     ("_do_cons"
###                       ("_do_bind" ("_position" p)
###                         ("\<^const>Refine_More_Comb.SELECT_binder"
###                           ("_position" p)
###                           ("_applC" ("_position" is_augmenting_path)
###                             ("_cargs" ("_position" f) ("_position" p)))))
###                       ("_do_final"
###                         ("_case_syntax" ("_position" p)
###                           ("_case2"
###                             ("_case1" ("_position" None)
###                               ("_applC" ("\<^const>Heap_Monad.return")
###                                 ("_tuple" ("_position" f)
###                                   ("_tuple_arg" ("_position" True)))))
###                             ("_case1"
###                               ("_applC" ("_position" Some) ("_position" p))
###                               ("_applC" ("\<^const>Refine_Basic.RETURN")
###                                 ("_tuple"
###                                   ("_applC" ("_position" augment)
###                                     ("_cargs" ("_position" c)
### ("_cargs" ("_position" f) ("_position" p))))
###                                   ("_tuple_arg"
###                                     ("_position" False)))))))))))
###                 ("_tuple" ("_position" f\<^sub>0)
###                   ("_tuple_arg" ("_position" False)))))))
###         ("_do_final"
###           ("_applC" ("\<^const>Heap_Monad.return") ("_position" f)))))))
### ("\<^const>Pure.eq" ("_position" ford_fulkerson_method)
###   ("_do_block"
###     ("_do_cons"
###       ("_do_let" ("_position" f\<^sub>0)
###         ("_lambda" ("_pattern" ("_position" u) ("_position" v))
###           ("\<^const>Groups.zero_class.zero")))
###       ("_do_cons"
###         ("_do_bind" ("_pattern" ("_position" f) ("_position" brk))
###           ("_applC" ("\<^const>Refine_While.WHILE")
###             ("_cargs"
###               ("_lambda" ("_pattern" ("_position" f) ("_position" brk))
###                 ("\<^const>HOL.Not" ("_position" brk)))
###               ("_cargs"
###                 ("_lambda" ("_pattern" ("_position" f) ("_position" brk))
###                   ("_do_block"
###                     ("_do_cons"
###                       ("_do_bind" ("_position" p)
###                         ("\<^const>Refine_More_Comb.SELECT_binder"
###                           ("_position" p)
###                           ("_applC" ("_position" is_augmenting_path)
###                             ("_cargs" ("_position" f) ("_position" p)))))
###                       ("_do_final"
###                         ("_case_syntax" ("_position" p)
###                           ("_case2"
###                             ("_case1" ("_position" None)
###                               ("_applC" ("\<^const>Refine_Basic.RETURN")
###                                 ("_tuple" ("_position" f)
###                                   ("_tuple_arg" ("_position" True)))))
###                             ("_case1"
###                               ("_applC" ("_position" Some) ("_position" p))
###                               ("_applC" ("\<^const>Refine_Basic.RETURN")
###                                 ("_tuple"
###                                   ("_applC" ("_position" augment)
###                                     ("_cargs" ("_position" c)
### ("_cargs" ("_position" f) ("_position" p))))
###                                   ("_tuple_arg"
###                                     ("_position" False)))))))))))
###                 ("_tuple" ("_position" f\<^sub>0)
###                   ("_tuple_arg" ("_position" False)))))))
###         ("_do_final"
###           ("_applC" ("\<^const>Heap_Monad.return") ("_position" f)))))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### theory "Draft.FordFulkerson_Algo"
### 3.754s elapsed time, 8.910s cpu time, 2.096s GC time
Loading theory "Draft.FordFulkerson_AlgoTemplates"
val templateLemmas = []: (string * thm * template) list
### theory "Draft.FordFulkerson_AlgoTemplates"
### 2.451s elapsed time, 2.837s cpu time, 0.269s GC time
val it = (): unit
