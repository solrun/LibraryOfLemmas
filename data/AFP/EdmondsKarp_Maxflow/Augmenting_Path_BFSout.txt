Loading theory "HOL-Library.Function_Algebras" (required by "Draft.Augmenting_Path_BFSTemplates" via "Draft.ExtrEqs" via "HOL-Library.BigO")
Loading theory "HOL-Library.Stream" (required by "Draft.Augmenting_Path_BFSTemplates" via "Draft.ExtrEqs")
Loading theory "HOL-Library.Set_Algebras" (required by "Draft.Augmenting_Path_BFSTemplates" via "Draft.ExtrEqs" via "HOL-Library.BigO")
Loading theory "HOL-Library.Tree" (required by "Draft.Augmenting_Path_BFSTemplates" via "Draft.ExtrEqs" via "Draft.Templates")
instantiation
  fun :: (type, plus) plus
  plus_fun == plus :: ('a => 'b) => ('a => 'b) => 'a => 'b
instantiation
  set :: (plus) plus
  plus_set == plus :: 'a set => 'a set => 'a set
instantiation
  fun :: (type, zero) zero
  zero_fun == zero_class.zero :: 'a => 'b
instantiation
  set :: (times) times
  times_set == times :: 'a set => 'a set => 'a set
instantiation
  fun :: (type, times) times
  times_fun == times :: ('a => 'b) => ('a => 'b) => 'a => 'b
instantiation
  set :: (zero) zero
  zero_set == zero_class.zero :: 'a set
instantiation
  set :: (one) one
  one_set == one_class.one :: 'a set
instantiation
  fun :: (type, one) one
  one_fun == one_class.one :: 'a => 'b
### theory "HOL-Library.Function_Algebras"
### 0.142s elapsed time, 0.571s cpu time, 0.058s GC time
Loading theory "Draft.Augmenting_Path_BFS" (required by "Draft.Augmenting_Path_BFSTemplates")
### theory "HOL-Library.Set_Algebras"
### 0.228s elapsed time, 0.918s cpu time, 0.058s GC time
Loading theory "HOL-Library.BigO" (required by "Draft.Augmenting_Path_BFSTemplates" via "Draft.ExtrEqs")
locale pre_bfs_invar
  fixes c :: "nat * nat => 'a"
    and src :: "nat"
    and dst :: "nat"
locale valid_PRED
  fixes c :: "nat * nat => 'a"
    and src :: "nat"
    and dst :: "nat"
    and PRED :: "nat => nat option"
  assumes "valid_PRED c src PRED"
locale nf_invar'
  fixes c :: "nat * nat => 'a"
    and src :: "nat"
    and dst :: "nat"
    and PRED :: "nat => nat option"
    and C :: "nat set"
    and N :: "nat set"
    and d :: "nat"
  assumes "nf_invar' c src dst PRED C N d"
consts
  shift :: "'a list => 'a stream => 'a stream"
Proofs for coinductive predicate(s) "streamsp"
  Proving monotonicity ...
locale nf_invar
  fixes c :: "nat * nat => 'a"
    and src :: "nat"
    and dst :: "nat"
    and PRED :: "nat => nat option"
    and C :: "nat set"
    and N :: "nat set"
    and d :: "nat"
  assumes "nf_invar c src dst PRED C N d"
consts
  snth :: "'a stream => nat => 'a"
consts
  left :: "'a tree => 'a tree"
consts
  right :: "'a tree => 'a tree"
consts
  stake :: "nat => 'a stream => 'a list"
consts
  sdrop :: "nat => 'a stream => 'a stream"
Found termination order: "size <*mlex*> {}"
locale f_invar
  fixes c :: "nat * nat => 'a"
    and src :: "nat"
    and dst :: "nat"
    and PRED :: "nat => nat option"
    and d :: "nat"
  assumes "f_invar c src dst PRED d"
consts
  sfilter :: "('a => bool) => 'a stream => 'a stream"
locale Graph
  fixes c :: "nat * nat => 'capacity"
consts
  cycle :: "'a list => 'a stream"
Found termination order: "size <*mlex*> {}"
consts
  siterate :: "('a => 'a) => 'a => 'a stream"
Found termination order: "size <*mlex*> {}"
consts
  flat :: "'a list stream => 'a stream"
class height = type +
  fixes height :: "'a => nat"
instantiation
  tree :: (type) height
  height_tree == height :: 'a tree => nat
consts
  sinterleave :: "'a stream => 'a stream => 'a stream"
Found termination order: "size <*mlex*> {}"
consts
  szip :: "'a stream => 'b stream => ('a * 'b) stream"
consts
  smap2 :: "('a => 'b => 'c) => 'a stream => 'b stream => 'c stream"
### theory "HOL-Library.Stream"
### 1.141s elapsed time, 4.271s cpu time, 0.904s GC time
Found termination order: "size <*mlex*> {}"
Found termination order: "size <*mlex*> {}"
### theory "HOL-Library.BigO"
### 1.008s elapsed time, 3.651s cpu time, 0.846s GC time
Found termination order: "size <*mlex*> {}"
Found termination order: "size <*mlex*> {}"
Found termination order: "size <*mlex*> {}"
Found termination order: "size <*mlex*> {}"
Found termination order: "(%p. size (fst p)) <*mlex*> {}"
Found termination order: "size <*mlex*> {}"
Found termination order: "(%p. size (snd p)) <*mlex*> {}"
Found termination order: "size <*mlex*> {}"
### Ambiguous input (line 374 of "$AFP/EdmondsKarp_Maxflow/Augmenting_Path_BFS.thy") produces 32 parse trees (10 displayed):
### ("\<^const>Pure.eq"
###   ("_applC" ("_position" bfs_core)
###     ("_cargs" ("_position" src) ("_position" dst)))
###   ("_do_block"
###     ("_do_cons"
###       ("_do_bind"
###         ("_pattern" ("_position" f)
###           ("_patterns" ("_position" P)
###             ("_patterns" ("_idtdummy")
###               ("_patterns" ("_idtdummy") ("_position" d)))))
###         ("_applC" ("\<^const>Refine_While.WHILET")
###           ("_cargs"
###             ("_lambda"
###               ("_pattern" ("_position" f)
###                 ("_patterns" ("_position" P)
###                   ("_patterns" ("_position" C)
###                     ("_patterns" ("_position" N) ("_position" d)))))
###               ("\<^const>HOL.conj"
###                 ("\<^const>HOL.eq" ("_position" f) ("_position" False))
###                 ("\<^const>HOL.not_equal" ("_position" C)
###                   ("\<^const>Set.empty"))))
###             ("_cargs"
###               ("_lambda"
###                 ("_pattern" ("_position" f)
###                   ("_patterns" ("_position" P)
###                     ("_patterns" ("_position" C)
###                       ("_patterns" ("_position" N) ("_position" d)))))
###                 ("_do_block"
###                   ("_do_cons"
###                     ("_do_bind" ("_position" v)
###                       ("\<^const>Refine_Basic.SPEC_binder" ("_position" v)
###                         ("\<^const>Set.member" ("_position" v)
###                           ("_position" C))))
###                     ("_do_cons"
###                       ("_do_let" ("_position" C)
###                         ("\<^const>Groups.minus_class.minus" ("_position" C)
###                           ("_Finset" ("_position" v))))
###                       ("_do_cons"
###                         ("_do_let" ("_position" succ)
###                           ("\<^const>Relation.Image" ("_position" E)
###                             ("_Finset" ("_position" v))))
###                         ("_do_cons"
###                           ("_do_bind"
###                             ("_pattern" ("_position" f)
###                               ("_patterns" ("_position" P) ("_position" N)))
###                             ("_applC" ("_position" add_succ_spec)
###                               ("_cargs" ("_position" dst)
###                                 ("_cargs" ("_position" succ)
###                                   ("_cargs" ("_position" v)
###                                     ("_cargs" ("_position" P)
### ("_position" N)))))))
###                           ("_do_final"
###                             ("\<^const>HOL.If" ("_position" f)
###                               ("_applC" ("\<^const>Heap_Monad.return")
###                                 ("_tuple" ("_position" f)
###                                   ("_tuple_args" ("_position" P)
###                                     ("_tuple_args" ("_position" C)
### ("_tuple_args" ("_position" N)
###   ("_tuple_arg"
###     ("\<^const>Groups.plus_class.plus" ("_position" d)
###       ("\<^const>Groups.one_class.one"))))))))
###                               ("_do_block"
###                                 ("_do_final"
###                                   ("\<^const>HOL.If"
###                                     ("\<^const>HOL.eq" ("_position" C)
### ("\<^const>Set.empty"))
###                                     ("_do_block"
### ("_do_cons" ("_do_let" ("_position" C) ("_position" N))
###   ("_do_cons" ("_do_let" ("_position" N) ("\<^const>Set.empty"))
###     ("_do_cons"
###       ("_do_let" ("_position" d)
###         ("\<^const>Groups.plus_class.plus" ("_position" d)
###           ("\<^const>Groups.one_class.one")))
###       ("_do_final"
###         ("_applC" ("\<^const>Heap_Monad.return")
###           ("_tuple" ("_position" f)
###             ("_tuple_args" ("_position" P)
###               ("_tuple_args" ("_position" C)
###                 ("_tuple_args" ("_position" N)
###                   ("_tuple_arg" ("_position" d))))))))))))
###                                     ("_applC"
### ("\<^const>Refine_Basic.RETURN")
### ("_tuple" ("_position" f)
###   ("_tuple_args" ("_position" P)
###     ("_tuple_args" ("_position" C)
###       ("_tuple_args" ("_position" N)
###         ("_tuple_arg" ("_position" d))))))))))))))))))
###               ("_tuple" ("_position" False)
###                 ("_tuple_args"
###                   ("_Map" ("_maplet" ("_position" src) ("_position" src)))
###                   ("_tuple_args" ("_Finset" ("_position" src))
###                     ("_tuple_args" ("\<^const>Set.empty")
###                       ("_tuple_arg"
###                         ("_constrain" ("\<^const>Groups.zero_class.zero")
###                           ("_type_name" nat)))))))))))
###       ("_do_final"
###         ("\<^const>HOL.If" ("_position" f)
###           ("_applC" ("\<^const>Refine_Basic.RETURN")
###             ("_applC" ("_position" Some)
###               ("_tuple" ("_position" d) ("_tuple_arg" ("_position" P)))))
###           ("_applC" ("\<^const>Refine_Basic.RETURN")
###             ("_position" None)))))))
### ("\<^const>Pure.eq"
###   ("_applC" ("_position" bfs_core)
###     ("_cargs" ("_position" src) ("_position" dst)))
###   ("_do_block"
###     ("_do_cons"
###       ("_do_bind"
###         ("_pattern" ("_position" f)
###           ("_patterns" ("_position" P)
###             ("_patterns" ("_idtdummy")
###               ("_patterns" ("_idtdummy") ("_position" d)))))
###         ("_applC" ("\<^const>Refine_While.WHILET")
###           ("_cargs"
###             ("_lambda"
###               ("_pattern" ("_position" f)
###                 ("_patterns" ("_position" P)
###                   ("_patterns" ("_position" C)
###                     ("_patterns" ("_position" N) ("_position" d)))))
###               ("\<^const>HOL.conj"
###                 ("\<^const>HOL.eq" ("_position" f) ("_position" False))
###                 ("\<^const>HOL.not_equal" ("_position" C)
###                   ("\<^const>Set.empty"))))
###             ("_cargs"
###               ("_lambda"
###                 ("_pattern" ("_position" f)
###                   ("_patterns" ("_position" P)
###                     ("_patterns" ("_position" C)
###                       ("_patterns" ("_position" N) ("_position" d)))))
###                 ("_do_block"
###                   ("_do_cons"
###                     ("_do_bind" ("_position" v)
###                       ("\<^const>Refine_Basic.SPEC_binder" ("_position" v)
###                         ("\<^const>Set.member" ("_position" v)
###                           ("_position" C))))
###                     ("_do_cons"
###                       ("_do_let" ("_position" C)
###                         ("\<^const>Groups.minus_class.minus" ("_position" C)
###                           ("_Finset" ("_position" v))))
###                       ("_do_cons"
###                         ("_do_let" ("_position" succ)
###                           ("\<^const>Relation.Image" ("_position" E)
###                             ("_Finset" ("_position" v))))
###                         ("_do_cons"
###                           ("_do_bind"
###                             ("_pattern" ("_position" f)
###                               ("_patterns" ("_position" P) ("_position" N)))
###                             ("_applC" ("_position" add_succ_spec)
###                               ("_cargs" ("_position" dst)
###                                 ("_cargs" ("_position" succ)
###                                   ("_cargs" ("_position" v)
###                                     ("_cargs" ("_position" P)
### ("_position" N)))))))
###                           ("_do_final"
###                             ("\<^const>HOL.If" ("_position" f)
###                               ("_applC" ("\<^const>Refine_Basic.RETURN")
###                                 ("_tuple" ("_position" f)
###                                   ("_tuple_args" ("_position" P)
###                                     ("_tuple_args" ("_position" C)
### ("_tuple_args" ("_position" N)
###   ("_tuple_arg"
###     ("\<^const>Groups.plus_class.plus" ("_position" d)
###       ("\<^const>Groups.one_class.one"))))))))
###                               ("_do_block"
###                                 ("_do_final"
###                                   ("\<^const>HOL.If"
###                                     ("\<^const>HOL.eq" ("_position" C)
### ("\<^const>Set.empty"))
###                                     ("_do_block"
### ("_do_cons" ("_do_let" ("_position" C) ("_position" N))
###   ("_do_cons" ("_do_let" ("_position" N) ("\<^const>Set.empty"))
###     ("_do_cons"
###       ("_do_let" ("_position" d)
###         ("\<^const>Groups.plus_class.plus" ("_position" d)
###           ("\<^const>Groups.one_class.one")))
###       ("_do_final"
###         ("_applC" ("\<^const>Heap_Monad.return")
###           ("_tuple" ("_position" f)
###             ("_tuple_args" ("_position" P)
###               ("_tuple_args" ("_position" C)
###                 ("_tuple_args" ("_position" N)
###                   ("_tuple_arg" ("_position" d))))))))))))
###                                     ("_applC"
### ("\<^const>Refine_Basic.RETURN")
### ("_tuple" ("_position" f)
###   ("_tuple_args" ("_position" P)
###     ("_tuple_args" ("_position" C)
###       ("_tuple_args" ("_position" N)
###         ("_tuple_arg" ("_position" d))))))))))))))))))
###               ("_tuple" ("_position" False)
###                 ("_tuple_args"
###                   ("_Map" ("_maplet" ("_position" src) ("_position" src)))
###                   ("_tuple_args" ("_Finset" ("_position" src))
###                     ("_tuple_args" ("\<^const>Set.empty")
###                       ("_tuple_arg"
###                         ("_constrain" ("\<^const>Groups.zero_class.zero")
###                           ("_type_name" nat)))))))))))
###       ("_do_final"
###         ("\<^const>HOL.If" ("_position" f)
###           ("_applC" ("\<^const>Refine_Basic.RETURN")
###             ("_applC" ("_position" Some)
###               ("_tuple" ("_position" d) ("_tuple_arg" ("_position" P)))))
###           ("_applC" ("\<^const>Refine_Basic.RETURN")
###             ("_position" None)))))))
### ("\<^const>Pure.eq"
###   ("_applC" ("_position" bfs_core)
###     ("_cargs" ("_position" src) ("_position" dst)))
###   ("_do_block"
###     ("_do_cons"
###       ("_do_bind"
###         ("_pattern" ("_position" f)
###           ("_patterns" ("_position" P)
###             ("_patterns" ("_idtdummy")
###               ("_patterns" ("_idtdummy") ("_position" d)))))
###         ("_applC" ("\<^const>Refine_While.WHILET")
###           ("_cargs"
###             ("_lambda"
###               ("_pattern" ("_position" f)
###                 ("_patterns" ("_position" P)
###                   ("_patterns" ("_position" C)
###                     ("_patterns" ("_position" N) ("_position" d)))))
###               ("\<^const>HOL.conj"
###                 ("\<^const>HOL.eq" ("_position" f) ("_position" False))
###                 ("\<^const>HOL.not_equal" ("_position" C)
###                   ("\<^const>Set.empty"))))
###             ("_cargs"
###               ("_lambda"
###                 ("_pattern" ("_position" f)
###                   ("_patterns" ("_position" P)
###                     ("_patterns" ("_position" C)
###                       ("_patterns" ("_position" N) ("_position" d)))))
###                 ("_do_block"
###                   ("_do_cons"
###                     ("_do_bind" ("_position" v)
###                       ("\<^const>Refine_Basic.SPEC_binder" ("_position" v)
###                         ("\<^const>Set.member" ("_position" v)
###                           ("_position" C))))
###                     ("_do_cons"
###                       ("_do_let" ("_position" C)
###                         ("\<^const>Groups.minus_class.minus" ("_position" C)
###                           ("_Finset" ("_position" v))))
###                       ("_do_cons"
###                         ("_do_let" ("_position" succ)
###                           ("\<^const>Relation.Image" ("_position" E)
###                             ("_Finset" ("_position" v))))
###                         ("_do_cons"
###                           ("_do_bind"
###                             ("_pattern" ("_position" f)
###                               ("_patterns" ("_position" P) ("_position" N)))
###                             ("_applC" ("_position" add_succ_spec)
###                               ("_cargs" ("_position" dst)
###                                 ("_cargs" ("_position" succ)
###                                   ("_cargs" ("_position" v)
###                                     ("_cargs" ("_position" P)
### ("_position" N)))))))
###                           ("_do_final"
###                             ("\<^const>HOL.If" ("_position" f)
###                               ("_applC" ("\<^const>Heap_Monad.return")
###                                 ("_tuple" ("_position" f)
###                                   ("_tuple_args" ("_position" P)
###                                     ("_tuple_args" ("_position" C)
### ("_tuple_args" ("_position" N)
###   ("_tuple_arg"
###     ("\<^const>Groups.plus_class.plus" ("_position" d)
###       ("\<^const>Groups.one_class.one"))))))))
###                               ("_do_block"
###                                 ("_do_final"
###                                   ("\<^const>HOL.If"
###                                     ("\<^const>HOL.eq" ("_position" C)
### ("\<^const>Set.empty"))
###                                     ("_do_block"
### ("_do_cons" ("_do_let" ("_position" C) ("_position" N))
###   ("_do_cons" ("_do_let" ("_position" N) ("\<^const>Set.empty"))
###     ("_do_cons"
###       ("_do_let" ("_position" d)
###         ("\<^const>Groups.plus_class.plus" ("_position" d)
###           ("\<^const>Groups.one_class.one")))
###       ("_do_final"
###         ("_applC" ("\<^const>Refine_Basic.RETURN")
###           ("_tuple" ("_position" f)
###             ("_tuple_args" ("_position" P)
###               ("_tuple_args" ("_position" C)
###                 ("_tuple_args" ("_position" N)
###                   ("_tuple_arg" ("_position" d))))))))))))
###                                     ("_applC"
### ("\<^const>Refine_Basic.RETURN")
### ("_tuple" ("_position" f)
###   ("_tuple_args" ("_position" P)
###     ("_tuple_args" ("_position" C)
###       ("_tuple_args" ("_position" N)
###         ("_tuple_arg" ("_position" d))))))))))))))))))
###               ("_tuple" ("_position" False)
###                 ("_tuple_args"
###                   ("_Map" ("_maplet" ("_position" src) ("_position" src)))
###                   ("_tuple_args" ("_Finset" ("_position" src))
###                     ("_tuple_args" ("\<^const>Set.empty")
###                       ("_tuple_arg"
###                         ("_constrain" ("\<^const>Groups.zero_class.zero")
###                           ("_type_name" nat)))))))))))
###       ("_do_final"
###         ("\<^const>HOL.If" ("_position" f)
###           ("_applC" ("\<^const>Refine_Basic.RETURN")
###             ("_applC" ("_position" Some)
###               ("_tuple" ("_position" d) ("_tuple_arg" ("_position" P)))))
###           ("_applC" ("\<^const>Refine_Basic.RETURN")
###             ("_position" None)))))))
### ("\<^const>Pure.eq"
###   ("_applC" ("_position" bfs_core)
###     ("_cargs" ("_position" src) ("_position" dst)))
###   ("_do_block"
###     ("_do_cons"
###       ("_do_bind"
###         ("_pattern" ("_position" f)
###           ("_patterns" ("_position" P)
###             ("_patterns" ("_idtdummy")
###               ("_patterns" ("_idtdummy") ("_position" d)))))
###         ("_applC" ("\<^const>Refine_While.WHILET")
###           ("_cargs"
###             ("_lambda"
###               ("_pattern" ("_position" f)
###                 ("_patterns" ("_position" P)
###                   ("_patterns" ("_position" C)
###                     ("_patterns" ("_position" N) ("_position" d)))))
###               ("\<^const>HOL.conj"
###                 ("\<^const>HOL.eq" ("_position" f) ("_position" False))
###                 ("\<^const>HOL.not_equal" ("_position" C)
###                   ("\<^const>Set.empty"))))
###             ("_cargs"
###               ("_lambda"
###                 ("_pattern" ("_position" f)
###                   ("_patterns" ("_position" P)
###                     ("_patterns" ("_position" C)
###                       ("_patterns" ("_position" N) ("_position" d)))))
###                 ("_do_block"
###                   ("_do_cons"
###                     ("_do_bind" ("_position" v)
###                       ("\<^const>Refine_Basic.SPEC_binder" ("_position" v)
###                         ("\<^const>Set.member" ("_position" v)
###                           ("_position" C))))
###                     ("_do_cons"
###                       ("_do_let" ("_position" C)
###                         ("\<^const>Groups.minus_class.minus" ("_position" C)
###                           ("_Finset" ("_position" v))))
###                       ("_do_cons"
###                         ("_do_let" ("_position" succ)
###                           ("\<^const>Relation.Image" ("_position" E)
###                             ("_Finset" ("_position" v))))
###                         ("_do_cons"
###                           ("_do_bind"
###                             ("_pattern" ("_position" f)
###                               ("_patterns" ("_position" P) ("_position" N)))
###                             ("_applC" ("_position" add_succ_spec)
###                               ("_cargs" ("_position" dst)
###                                 ("_cargs" ("_position" succ)
###                                   ("_cargs" ("_position" v)
###                                     ("_cargs" ("_position" P)
### ("_position" N)))))))
###                           ("_do_final"
###                             ("\<^const>HOL.If" ("_position" f)
###                               ("_applC" ("\<^const>Refine_Basic.RETURN")
###                                 ("_tuple" ("_position" f)
###                                   ("_tuple_args" ("_position" P)
###                                     ("_tuple_args" ("_position" C)
### ("_tuple_args" ("_position" N)
###   ("_tuple_arg"
###     ("\<^const>Groups.plus_class.plus" ("_position" d)
###       ("\<^const>Groups.one_class.one"))))))))
###                               ("_do_block"
###                                 ("_do_final"
###                                   ("\<^const>HOL.If"
###                                     ("\<^const>HOL.eq" ("_position" C)
### ("\<^const>Set.empty"))
###                                     ("_do_block"
### ("_do_cons" ("_do_let" ("_position" C) ("_position" N))
###   ("_do_cons" ("_do_let" ("_position" N) ("\<^const>Set.empty"))
###     ("_do_cons"
###       ("_do_let" ("_position" d)
###         ("\<^const>Groups.plus_class.plus" ("_position" d)
###           ("\<^const>Groups.one_class.one")))
###       ("_do_final"
###         ("_applC" ("\<^const>Refine_Basic.RETURN")
###           ("_tuple" ("_position" f)
###             ("_tuple_args" ("_position" P)
###               ("_tuple_args" ("_position" C)
###                 ("_tuple_args" ("_position" N)
###                   ("_tuple_arg" ("_position" d))))))))))))
###                                     ("_applC"
### ("\<^const>Refine_Basic.RETURN")
### ("_tuple" ("_position" f)
###   ("_tuple_args" ("_position" P)
###     ("_tuple_args" ("_position" C)
###       ("_tuple_args" ("_position" N)
###         ("_tuple_arg" ("_position" d))))))))))))))))))
###               ("_tuple" ("_position" False)
###                 ("_tuple_args"
###                   ("_Map" ("_maplet" ("_position" src) ("_position" src)))
###                   ("_tuple_args" ("_Finset" ("_position" src))
###                     ("_tuple_args" ("\<^const>Set.empty")
###                       ("_tuple_arg"
###                         ("_constrain" ("\<^const>Groups.zero_class.zero")
###                           ("_type_name" nat)))))))))))
###       ("_do_final"
###         ("\<^const>HOL.If" ("_position" f)
###           ("_applC" ("\<^const>Refine_Basic.RETURN")
###             ("_applC" ("_position" Some)
###               ("_tuple" ("_position" d) ("_tuple_arg" ("_position" P)))))
###           ("_applC" ("\<^const>Refine_Basic.RETURN")
###             ("_position" None)))))))
### ("\<^const>Pure.eq"
###   ("_applC" ("_position" bfs_core)
###     ("_cargs" ("_position" src) ("_position" dst)))
###   ("_do_block"
###     ("_do_cons"
###       ("_do_bind"
###         ("_pattern" ("_position" f)
###           ("_patterns" ("_position" P)
###             ("_patterns" ("_idtdummy")
###               ("_patterns" ("_idtdummy") ("_position" d)))))
###         ("_applC" ("\<^const>Refine_While.WHILET")
###           ("_cargs"
###             ("_lambda"
###               ("_pattern" ("_position" f)
###                 ("_patterns" ("_position" P)
###                   ("_patterns" ("_position" C)
###                     ("_patterns" ("_position" N) ("_position" d)))))
###               ("\<^const>HOL.conj"
###                 ("\<^const>HOL.eq" ("_position" f) ("_position" False))
###                 ("\<^const>HOL.not_equal" ("_position" C)
###                   ("\<^const>Set.empty"))))
###             ("_cargs"
###               ("_lambda"
###                 ("_pattern" ("_position" f)
###                   ("_patterns" ("_position" P)
###                     ("_patterns" ("_position" C)
###                       ("_patterns" ("_position" N) ("_position" d)))))
###                 ("_do_block"
###                   ("_do_cons"
###                     ("_do_bind" ("_position" v)
###                       ("\<^const>Refine_Basic.SPEC_binder" ("_position" v)
###                         ("\<^const>Set.member" ("_position" v)
###                           ("_position" C))))
###                     ("_do_cons"
###                       ("_do_let" ("_position" C)
###                         ("\<^const>Groups.minus_class.minus" ("_position" C)
###                           ("_Finset" ("_position" v))))
###                       ("_do_cons"
###                         ("_do_let" ("_position" succ)
###                           ("\<^const>Relation.Image" ("_position" E)
###                             ("_Finset" ("_position" v))))
###                         ("_do_cons"
###                           ("_do_bind"
###                             ("_pattern" ("_position" f)
###                               ("_patterns" ("_position" P) ("_position" N)))
###                             ("_applC" ("_position" add_succ_spec)
###                               ("_cargs" ("_position" dst)
###                                 ("_cargs" ("_position" succ)
###                                   ("_cargs" ("_position" v)
###                                     ("_cargs" ("_position" P)
### ("_position" N)))))))
###                           ("_do_final"
###                             ("\<^const>HOL.If" ("_position" f)
###                               ("_applC" ("\<^const>Heap_Monad.return")
###                                 ("_tuple" ("_position" f)
###                                   ("_tuple_args" ("_position" P)
###                                     ("_tuple_args" ("_position" C)
### ("_tuple_args" ("_position" N)
###   ("_tuple_arg"
###     ("\<^const>Groups.plus_class.plus" ("_position" d)
###       ("\<^const>Groups.one_class.one"))))))))
###                               ("_do_block"
###                                 ("_do_final"
###                                   ("\<^const>HOL.If"
###                                     ("\<^const>HOL.eq" ("_position" C)
### ("\<^const>Set.empty"))
###                                     ("_do_block"
### ("_do_cons" ("_do_let" ("_position" C) ("_position" N))
###   ("_do_cons" ("_do_let" ("_position" N) ("\<^const>Set.empty"))
###     ("_do_cons"
###       ("_do_let" ("_position" d)
###         ("\<^const>Groups.plus_class.plus" ("_position" d)
###           ("\<^const>Groups.one_class.one")))
###       ("_do_final"
###         ("_applC" ("\<^const>Heap_Monad.return")
###           ("_tuple" ("_position" f)
###             ("_tuple_args" ("_position" P)
###               ("_tuple_args" ("_position" C)
###                 ("_tuple_args" ("_position" N)
###                   ("_tuple_arg" ("_position" d))))))))))))
###                                     ("_applC" ("\<^const>Heap_Monad.return")
### ("_tuple" ("_position" f)
###   ("_tuple_args" ("_position" P)
###     ("_tuple_args" ("_position" C)
###       ("_tuple_args" ("_position" N)
###         ("_tuple_arg" ("_position" d))))))))))))))))))
###               ("_tuple" ("_position" False)
###                 ("_tuple_args"
###                   ("_Map" ("_maplet" ("_position" src) ("_position" src)))
###                   ("_tuple_args" ("_Finset" ("_position" src))
###                     ("_tuple_args" ("\<^const>Set.empty")
###                       ("_tuple_arg"
###                         ("_constrain" ("\<^const>Groups.zero_class.zero")
###                           ("_type_name" nat)))))))))))
###       ("_do_final"
###         ("\<^const>HOL.If" ("_position" f)
###           ("_applC" ("\<^const>Refine_Basic.RETURN")
###             ("_applC" ("_position" Some)
###               ("_tuple" ("_position" d) ("_tuple_arg" ("_position" P)))))
###           ("_applC" ("\<^const>Refine_Basic.RETURN")
###             ("_position" None)))))))
### ("\<^const>Pure.eq"
###   ("_applC" ("_position" bfs_core)
###     ("_cargs" ("_position" src) ("_position" dst)))
###   ("_do_block"
###     ("_do_cons"
###       ("_do_bind"
###         ("_pattern" ("_position" f)
###           ("_patterns" ("_position" P)
###             ("_patterns" ("_idtdummy")
###               ("_patterns" ("_idtdummy") ("_position" d)))))
###         ("_applC" ("\<^const>Refine_While.WHILET")
###           ("_cargs"
###             ("_lambda"
###               ("_pattern" ("_position" f)
###                 ("_patterns" ("_position" P)
###                   ("_patterns" ("_position" C)
###                     ("_patterns" ("_position" N) ("_position" d)))))
###               ("\<^const>HOL.conj"
###                 ("\<^const>HOL.eq" ("_position" f) ("_position" False))
###                 ("\<^const>HOL.not_equal" ("_position" C)
###                   ("\<^const>Set.empty"))))
###             ("_cargs"
###               ("_lambda"
###                 ("_pattern" ("_position" f)
###                   ("_patterns" ("_position" P)
###                     ("_patterns" ("_position" C)
###                       ("_patterns" ("_position" N) ("_position" d)))))
###                 ("_do_block"
###                   ("_do_cons"
###                     ("_do_bind" ("_position" v)
###                       ("\<^const>Refine_Basic.SPEC_binder" ("_position" v)
###                         ("\<^const>Set.member" ("_position" v)
###                           ("_position" C))))
###                     ("_do_cons"
###                       ("_do_let" ("_position" C)
###                         ("\<^const>Groups.minus_class.minus" ("_position" C)
###                           ("_Finset" ("_position" v))))
###                       ("_do_cons"
###                         ("_do_let" ("_position" succ)
###                           ("\<^const>Relation.Image" ("_position" E)
###                             ("_Finset" ("_position" v))))
###                         ("_do_cons"
###                           ("_do_bind"
###                             ("_pattern" ("_position" f)
###                               ("_patterns" ("_position" P) ("_position" N)))
###                             ("_applC" ("_position" add_succ_spec)
###                               ("_cargs" ("_position" dst)
###                                 ("_cargs" ("_position" succ)
###                                   ("_cargs" ("_position" v)
###                                     ("_cargs" ("_position" P)
### ("_position" N)))))))
###                           ("_do_final"
###                             ("\<^const>HOL.If" ("_position" f)
###                               ("_applC" ("\<^const>Refine_Basic.RETURN")
###                                 ("_tuple" ("_position" f)
###                                   ("_tuple_args" ("_position" P)
###                                     ("_tuple_args" ("_position" C)
### ("_tuple_args" ("_position" N)
###   ("_tuple_arg"
###     ("\<^const>Groups.plus_class.plus" ("_position" d)
###       ("\<^const>Groups.one_class.one"))))))))
###                               ("_do_block"
###                                 ("_do_final"
###                                   ("\<^const>HOL.If"
###                                     ("\<^const>HOL.eq" ("_position" C)
### ("\<^const>Set.empty"))
###                                     ("_do_block"
### ("_do_cons" ("_do_let" ("_position" C) ("_position" N))
###   ("_do_cons" ("_do_let" ("_position" N) ("\<^const>Set.empty"))
###     ("_do_cons"
###       ("_do_let" ("_position" d)
###         ("\<^const>Groups.plus_class.plus" ("_position" d)
###           ("\<^const>Groups.one_class.one")))
###       ("_do_final"
###         ("_applC" ("\<^const>Heap_Monad.return")
###           ("_tuple" ("_position" f)
###             ("_tuple_args" ("_position" P)
###               ("_tuple_args" ("_position" C)
###                 ("_tuple_args" ("_position" N)
###                   ("_tuple_arg" ("_position" d))))))))))))
###                                     ("_applC" ("\<^const>Heap_Monad.return")
### ("_tuple" ("_position" f)
###   ("_tuple_args" ("_position" P)
###     ("_tuple_args" ("_position" C)
###       ("_tuple_args" ("_position" N)
###         ("_tuple_arg" ("_position" d))))))))))))))))))
###               ("_tuple" ("_position" False)
###                 ("_tuple_args"
###                   ("_Map" ("_maplet" ("_position" src) ("_position" src)))
###                   ("_tuple_args" ("_Finset" ("_position" src))
###                     ("_tuple_args" ("\<^const>Set.empty")
###                       ("_tuple_arg"
###                         ("_constrain" ("\<^const>Groups.zero_class.zero")
###                           ("_type_name" nat)))))))))))
###       ("_do_final"
###         ("\<^const>HOL.If" ("_position" f)
###           ("_applC" ("\<^const>Refine_Basic.RETURN")
###             ("_applC" ("_position" Some)
###               ("_tuple" ("_position" d) ("_tuple_arg" ("_position" P)))))
###           ("_applC" ("\<^const>Refine_Basic.RETURN")
###             ("_position" None)))))))
### ("\<^const>Pure.eq"
###   ("_applC" ("_position" bfs_core)
###     ("_cargs" ("_position" src) ("_position" dst)))
###   ("_do_block"
###     ("_do_cons"
###       ("_do_bind"
###         ("_pattern" ("_position" f)
###           ("_patterns" ("_position" P)
###             ("_patterns" ("_idtdummy")
###               ("_patterns" ("_idtdummy") ("_position" d)))))
###         ("_applC" ("\<^const>Refine_While.WHILET")
###           ("_cargs"
###             ("_lambda"
###               ("_pattern" ("_position" f)
###                 ("_patterns" ("_position" P)
###                   ("_patterns" ("_position" C)
###                     ("_patterns" ("_position" N) ("_position" d)))))
###               ("\<^const>HOL.conj"
###                 ("\<^const>HOL.eq" ("_position" f) ("_position" False))
###                 ("\<^const>HOL.not_equal" ("_position" C)
###                   ("\<^const>Set.empty"))))
###             ("_cargs"
###               ("_lambda"
###                 ("_pattern" ("_position" f)
###                   ("_patterns" ("_position" P)
###                     ("_patterns" ("_position" C)
###                       ("_patterns" ("_position" N) ("_position" d)))))
###                 ("_do_block"
###                   ("_do_cons"
###                     ("_do_bind" ("_position" v)
###                       ("\<^const>Refine_Basic.SPEC_binder" ("_position" v)
###                         ("\<^const>Set.member" ("_position" v)
###                           ("_position" C))))
###                     ("_do_cons"
###                       ("_do_let" ("_position" C)
###                         ("\<^const>Groups.minus_class.minus" ("_position" C)
###                           ("_Finset" ("_position" v))))
###                       ("_do_cons"
###                         ("_do_let" ("_position" succ)
###                           ("\<^const>Relation.Image" ("_position" E)
###                             ("_Finset" ("_position" v))))
###                         ("_do_cons"
###                           ("_do_bind"
###                             ("_pattern" ("_position" f)
###                               ("_patterns" ("_position" P) ("_position" N)))
###                             ("_applC" ("_position" add_succ_spec)
###                               ("_cargs" ("_position" dst)
###                                 ("_cargs" ("_position" succ)
###                                   ("_cargs" ("_position" v)
###                                     ("_cargs" ("_position" P)
### ("_position" N)))))))
###                           ("_do_final"
###                             ("\<^const>HOL.If" ("_position" f)
###                               ("_applC" ("\<^const>Heap_Monad.return")
###                                 ("_tuple" ("_position" f)
###                                   ("_tuple_args" ("_position" P)
###                                     ("_tuple_args" ("_position" C)
### ("_tuple_args" ("_position" N)
###   ("_tuple_arg"
###     ("\<^const>Groups.plus_class.plus" ("_position" d)
###       ("\<^const>Groups.one_class.one"))))))))
###                               ("_do_block"
###                                 ("_do_final"
###                                   ("\<^const>HOL.If"
###                                     ("\<^const>HOL.eq" ("_position" C)
### ("\<^const>Set.empty"))
###                                     ("_do_block"
### ("_do_cons" ("_do_let" ("_position" C) ("_position" N))
###   ("_do_cons" ("_do_let" ("_position" N) ("\<^const>Set.empty"))
###     ("_do_cons"
###       ("_do_let" ("_position" d)
###         ("\<^const>Groups.plus_class.plus" ("_position" d)
###           ("\<^const>Groups.one_class.one")))
###       ("_do_final"
###         ("_applC" ("\<^const>Refine_Basic.RETURN")
###           ("_tuple" ("_position" f)
###             ("_tuple_args" ("_position" P)
###               ("_tuple_args" ("_position" C)
###                 ("_tuple_args" ("_position" N)
###                   ("_tuple_arg" ("_position" d))))))))))))
###                                     ("_applC" ("\<^const>Heap_Monad.return")
### ("_tuple" ("_position" f)
###   ("_tuple_args" ("_position" P)
###     ("_tuple_args" ("_position" C)
###       ("_tuple_args" ("_position" N)
###         ("_tuple_arg" ("_position" d))))))))))))))))))
###               ("_tuple" ("_position" False)
###                 ("_tuple_args"
###                   ("_Map" ("_maplet" ("_position" src) ("_position" src)))
###                   ("_tuple_args" ("_Finset" ("_position" src))
###                     ("_tuple_args" ("\<^const>Set.empty")
###                       ("_tuple_arg"
###                         ("_constrain" ("\<^const>Groups.zero_class.zero")
###                           ("_type_name" nat)))))))))))
###       ("_do_final"
###         ("\<^const>HOL.If" ("_position" f)
###           ("_applC" ("\<^const>Refine_Basic.RETURN")
###             ("_applC" ("_position" Some)
###               ("_tuple" ("_position" d) ("_tuple_arg" ("_position" P)))))
###           ("_applC" ("\<^const>Refine_Basic.RETURN")
###             ("_position" None)))))))
### ("\<^const>Pure.eq"
###   ("_applC" ("_position" bfs_core)
###     ("_cargs" ("_position" src) ("_position" dst)))
###   ("_do_block"
###     ("_do_cons"
###       ("_do_bind"
###         ("_pattern" ("_position" f)
###           ("_patterns" ("_position" P)
###             ("_patterns" ("_idtdummy")
###               ("_patterns" ("_idtdummy") ("_position" d)))))
###         ("_applC" ("\<^const>Refine_While.WHILET")
###           ("_cargs"
###             ("_lambda"
###               ("_pattern" ("_position" f)
###                 ("_patterns" ("_position" P)
###                   ("_patterns" ("_position" C)
###                     ("_patterns" ("_position" N) ("_position" d)))))
###               ("\<^const>HOL.conj"
###                 ("\<^const>HOL.eq" ("_position" f) ("_position" False))
###                 ("\<^const>HOL.not_equal" ("_position" C)
###                   ("\<^const>Set.empty"))))
###             ("_cargs"
###               ("_lambda"
###                 ("_pattern" ("_position" f)
###                   ("_patterns" ("_position" P)
###                     ("_patterns" ("_position" C)
###                       ("_patterns" ("_position" N) ("_position" d)))))
###                 ("_do_block"
###                   ("_do_cons"
###                     ("_do_bind" ("_position" v)
###                       ("\<^const>Refine_Basic.SPEC_binder" ("_position" v)
###                         ("\<^const>Set.member" ("_position" v)
###                           ("_position" C))))
###                     ("_do_cons"
###                       ("_do_let" ("_position" C)
###                         ("\<^const>Groups.minus_class.minus" ("_position" C)
###                           ("_Finset" ("_position" v))))
###                       ("_do_cons"
###                         ("_do_let" ("_position" succ)
###                           ("\<^const>Relation.Image" ("_position" E)
###                             ("_Finset" ("_position" v))))
###                         ("_do_cons"
###                           ("_do_bind"
###                             ("_pattern" ("_position" f)
###                               ("_patterns" ("_position" P) ("_position" N)))
###                             ("_applC" ("_position" add_succ_spec)
###                               ("_cargs" ("_position" dst)
###                                 ("_cargs" ("_position" succ)
###                                   ("_cargs" ("_position" v)
###                                     ("_cargs" ("_position" P)
### ("_position" N)))))))
###                           ("_do_final"
###                             ("\<^const>HOL.If" ("_position" f)
###                               ("_applC" ("\<^const>Refine_Basic.RETURN")
###                                 ("_tuple" ("_position" f)
###                                   ("_tuple_args" ("_position" P)
###                                     ("_tuple_args" ("_position" C)
### ("_tuple_args" ("_position" N)
###   ("_tuple_arg"
###     ("\<^const>Groups.plus_class.plus" ("_position" d)
###       ("\<^const>Groups.one_class.one"))))))))
###                               ("_do_block"
###                                 ("_do_final"
###                                   ("\<^const>HOL.If"
###                                     ("\<^const>HOL.eq" ("_position" C)
### ("\<^const>Set.empty"))
###                                     ("_do_block"
### ("_do_cons" ("_do_let" ("_position" C) ("_position" N))
###   ("_do_cons" ("_do_let" ("_position" N) ("\<^const>Set.empty"))
###     ("_do_cons"
###       ("_do_let" ("_position" d)
###         ("\<^const>Groups.plus_class.plus" ("_position" d)
###           ("\<^const>Groups.one_class.one")))
###       ("_do_final"
###         ("_applC" ("\<^const>Refine_Basic.RETURN")
###           ("_tuple" ("_position" f)
###             ("_tuple_args" ("_position" P)
###               ("_tuple_args" ("_position" C)
###                 ("_tuple_args" ("_position" N)
###                   ("_tuple_arg" ("_position" d))))))))))))
###                                     ("_applC" ("\<^const>Heap_Monad.return")
### ("_tuple" ("_position" f)
###   ("_tuple_args" ("_position" P)
###     ("_tuple_args" ("_position" C)
###       ("_tuple_args" ("_position" N)
###         ("_tuple_arg" ("_position" d))))))))))))))))))
###               ("_tuple" ("_position" False)
###                 ("_tuple_args"
###                   ("_Map" ("_maplet" ("_position" src) ("_position" src)))
###                   ("_tuple_args" ("_Finset" ("_position" src))
###                     ("_tuple_args" ("\<^const>Set.empty")
###                       ("_tuple_arg"
###                         ("_constrain" ("\<^const>Groups.zero_class.zero")
###                           ("_type_name" nat)))))))))))
###       ("_do_final"
###         ("\<^const>HOL.If" ("_position" f)
###           ("_applC" ("\<^const>Refine_Basic.RETURN")
###             ("_applC" ("_position" Some)
###               ("_tuple" ("_position" d) ("_tuple_arg" ("_position" P)))))
###           ("_applC" ("\<^const>Refine_Basic.RETURN")
###             ("_position" None)))))))
### ("\<^const>Pure.eq"
###   ("_applC" ("_position" bfs_core)
###     ("_cargs" ("_position" src) ("_position" dst)))
###   ("_do_block"
###     ("_do_cons"
###       ("_do_bind"
###         ("_pattern" ("_position" f)
###           ("_patterns" ("_position" P)
###             ("_patterns" ("_idtdummy")
###               ("_patterns" ("_idtdummy") ("_position" d)))))
###         ("_applC" ("\<^const>Refine_While.WHILET")
###           ("_cargs"
###             ("_lambda"
###               ("_pattern" ("_position" f)
###                 ("_patterns" ("_position" P)
###                   ("_patterns" ("_position" C)
###                     ("_patterns" ("_position" N) ("_position" d)))))
###               ("\<^const>HOL.conj"
###                 ("\<^const>HOL.eq" ("_position" f) ("_position" False))
###                 ("\<^const>HOL.not_equal" ("_position" C)
###                   ("\<^const>Set.empty"))))
###             ("_cargs"
###               ("_lambda"
###                 ("_pattern" ("_position" f)
###                   ("_patterns" ("_position" P)
###                     ("_patterns" ("_position" C)
###                       ("_patterns" ("_position" N) ("_position" d)))))
###                 ("_do_block"
###                   ("_do_cons"
###                     ("_do_bind" ("_position" v)
###                       ("\<^const>Refine_Basic.SPEC_binder" ("_position" v)
###                         ("\<^const>Set.member" ("_position" v)
###                           ("_position" C))))
###                     ("_do_cons"
###                       ("_do_let" ("_position" C)
###                         ("\<^const>Groups.minus_class.minus" ("_position" C)
###                           ("_Finset" ("_position" v))))
###                       ("_do_cons"
###                         ("_do_let" ("_position" succ)
###                           ("\<^const>Relation.Image" ("_position" E)
###                             ("_Finset" ("_position" v))))
###                         ("_do_cons"
###                           ("_do_bind"
###                             ("_pattern" ("_position" f)
###                               ("_patterns" ("_position" P) ("_position" N)))
###                             ("_applC" ("_position" add_succ_spec)
###                               ("_cargs" ("_position" dst)
###                                 ("_cargs" ("_position" succ)
###                                   ("_cargs" ("_position" v)
###                                     ("_cargs" ("_position" P)
### ("_position" N)))))))
###                           ("_do_final"
###                             ("\<^const>HOL.If" ("_position" f)
###                               ("_applC" ("\<^const>Heap_Monad.return")
###                                 ("_tuple" ("_position" f)
###                                   ("_tuple_args" ("_position" P)
###                                     ("_tuple_args" ("_position" C)
### ("_tuple_args" ("_position" N)
###   ("_tuple_arg"
###     ("\<^const>Groups.plus_class.plus" ("_position" d)
###       ("\<^const>Groups.one_class.one"))))))))
###                               ("_do_block"
###                                 ("_do_final"
###                                   ("\<^const>HOL.If"
###                                     ("\<^const>HOL.eq" ("_position" C)
### ("\<^const>Set.empty"))
###                                     ("_do_block"
### ("_do_cons" ("_do_let" ("_position" C) ("_position" N))
###   ("_do_cons" ("_do_let" ("_position" N) ("\<^const>Set.empty"))
###     ("_do_cons"
###       ("_do_let" ("_position" d)
###         ("\<^const>Groups.plus_class.plus" ("_position" d)
###           ("\<^const>Groups.one_class.one")))
###       ("_do_final"
###         ("_applC" ("\<^const>Heap_Monad.return")
###           ("_tuple" ("_position" f)
###             ("_tuple_args" ("_position" P)
###               ("_tuple_args" ("_position" C)
###                 ("_tuple_args" ("_position" N)
###                   ("_tuple_arg" ("_position" d))))))))))))
###                                     ("_applC"
### ("\<^const>Refine_Basic.RETURN")
### ("_tuple" ("_position" f)
###   ("_tuple_args" ("_position" P)
###     ("_tuple_args" ("_position" C)
###       ("_tuple_args" ("_position" N)
###         ("_tuple_arg" ("_position" d))))))))))))))))))
###               ("_tuple" ("_position" False)
###                 ("_tuple_args"
###                   ("_Map" ("_maplet" ("_position" src) ("_position" src)))
###                   ("_tuple_args" ("_Finset" ("_position" src))
###                     ("_tuple_args" ("\<^const>Set.empty")
###                       ("_tuple_arg"
###                         ("_constrain" ("\<^const>Groups.zero_class.zero")
###                           ("_type_name" nat)))))))))))
###       ("_do_final"
###         ("\<^const>HOL.If" ("_position" f)
###           ("_applC" ("\<^const>Heap_Monad.return")
###             ("_applC" ("_position" Some)
###               ("_tuple" ("_position" d) ("_tuple_arg" ("_position" P)))))
###           ("_applC" ("\<^const>Refine_Basic.RETURN")
###             ("_position" None)))))))
### ("\<^const>Pure.eq"
###   ("_applC" ("_position" bfs_core)
###     ("_cargs" ("_position" src) ("_position" dst)))
###   ("_do_block"
###     ("_do_cons"
###       ("_do_bind"
###         ("_pattern" ("_position" f)
###           ("_patterns" ("_position" P)
###             ("_patterns" ("_idtdummy")
###               ("_patterns" ("_idtdummy") ("_position" d)))))
###         ("_applC" ("\<^const>Refine_While.WHILET")
###           ("_cargs"
###             ("_lambda"
###               ("_pattern" ("_position" f)
###                 ("_patterns" ("_position" P)
###                   ("_patterns" ("_position" C)
###                     ("_patterns" ("_position" N) ("_position" d)))))
###               ("\<^const>HOL.conj"
###                 ("\<^const>HOL.eq" ("_position" f) ("_position" False))
###                 ("\<^const>HOL.not_equal" ("_position" C)
###                   ("\<^const>Set.empty"))))
###             ("_cargs"
###               ("_lambda"
###                 ("_pattern" ("_position" f)
###                   ("_patterns" ("_position" P)
###                     ("_patterns" ("_position" C)
###                       ("_patterns" ("_position" N) ("_position" d)))))
###                 ("_do_block"
###                   ("_do_cons"
###                     ("_do_bind" ("_position" v)
###                       ("\<^const>Refine_Basic.SPEC_binder" ("_position" v)
###                         ("\<^const>Set.member" ("_position" v)
###                           ("_position" C))))
###                     ("_do_cons"
###                       ("_do_let" ("_position" C)
###                         ("\<^const>Groups.minus_class.minus" ("_position" C)
###                           ("_Finset" ("_position" v))))
###                       ("_do_cons"
###                         ("_do_let" ("_position" succ)
###                           ("\<^const>Relation.Image" ("_position" E)
###                             ("_Finset" ("_position" v))))
###                         ("_do_cons"
###                           ("_do_bind"
###                             ("_pattern" ("_position" f)
###                               ("_patterns" ("_position" P) ("_position" N)))
###                             ("_applC" ("_position" add_succ_spec)
###                               ("_cargs" ("_position" dst)
###                                 ("_cargs" ("_position" succ)
###                                   ("_cargs" ("_position" v)
###                                     ("_cargs" ("_position" P)
### ("_position" N)))))))
###                           ("_do_final"
###                             ("\<^const>HOL.If" ("_position" f)
###                               ("_applC" ("\<^const>Refine_Basic.RETURN")
###                                 ("_tuple" ("_position" f)
###                                   ("_tuple_args" ("_position" P)
###                                     ("_tuple_args" ("_position" C)
### ("_tuple_args" ("_position" N)
###   ("_tuple_arg"
###     ("\<^const>Groups.plus_class.plus" ("_position" d)
###       ("\<^const>Groups.one_class.one"))))))))
###                               ("_do_block"
###                                 ("_do_final"
###                                   ("\<^const>HOL.If"
###                                     ("\<^const>HOL.eq" ("_position" C)
### ("\<^const>Set.empty"))
###                                     ("_do_block"
### ("_do_cons" ("_do_let" ("_position" C) ("_position" N))
###   ("_do_cons" ("_do_let" ("_position" N) ("\<^const>Set.empty"))
###     ("_do_cons"
###       ("_do_let" ("_position" d)
###         ("\<^const>Groups.plus_class.plus" ("_position" d)
###           ("\<^const>Groups.one_class.one")))
###       ("_do_final"
###         ("_applC" ("\<^const>Heap_Monad.return")
###           ("_tuple" ("_position" f)
###             ("_tuple_args" ("_position" P)
###               ("_tuple_args" ("_position" C)
###                 ("_tuple_args" ("_position" N)
###                   ("_tuple_arg" ("_position" d))))))))))))
###                                     ("_applC"
### ("\<^const>Refine_Basic.RETURN")
### ("_tuple" ("_position" f)
###   ("_tuple_args" ("_position" P)
###     ("_tuple_args" ("_position" C)
###       ("_tuple_args" ("_position" N)
###         ("_tuple_arg" ("_position" d))))))))))))))))))
###               ("_tuple" ("_position" False)
###                 ("_tuple_args"
###                   ("_Map" ("_maplet" ("_position" src) ("_position" src)))
###                   ("_tuple_args" ("_Finset" ("_position" src))
###                     ("_tuple_args" ("\<^const>Set.empty")
###                       ("_tuple_arg"
###                         ("_constrain" ("\<^const>Groups.zero_class.zero")
###                           ("_type_name" nat)))))))))))
###       ("_do_final"
###         ("\<^const>HOL.If" ("_position" f)
###           ("_applC" ("\<^const>Heap_Monad.return")
###             ("_applC" ("_position" Some)
###               ("_tuple" ("_position" d) ("_tuple_arg" ("_position" P)))))
###           ("_applC" ("\<^const>Refine_Basic.RETURN")
###             ("_position" None)))))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### theory "HOL-Library.Tree"
### 2.146s elapsed time, 6.558s cpu time, 1.121s GC time
Loading theory "Draft.Templates" (required by "Draft.Augmenting_Path_BFSTemplates" via "Draft.ExtrEqs")
datatype template_term
=
     t_empty
   | template_app of template_term * template_term
   | template_hole of int
   | template_var of int
datatype sign
= equals | greater_equals | greater_than | less_equals | less_than
datatype template
=
     template_bimplication of template * template
   | template_dunno
   | template_equation of template_term * template_term
   | template_implication of template list * template
   | template_inequation of sign * template_term * template_term
   | template_negation of template
   | template_predicate of template_term
constructor t_empty: template_term
constructor template_app: template_term * template_term -> template_term
constructor template_hole: int -> template_term
constructor template_var: int -> template_term
constructor equals: sign
constructor greater_equals: sign
constructor greater_than: sign
constructor less_equals: sign
constructor less_than: sign
constructor template_bimplication: template * template -> template
constructor template_dunno: template
constructor template_equation: template_term * template_term -> template
constructor template_implication: template list * template -> template
constructor template_inequation:
   sign * template_term * template_term -> template
constructor template_negation: template -> template
constructor template_predicate: template_term -> template
val vfs = fn: term -> (indexname * typ) list * (string * typ) list
val indexOf = fn: ''a list -> ''a -> int -> int
val has_eq = fn: term -> bool
val term2template = fn:
   (indexname * typ) list -> (string * typ) list -> term -> template_term
val lemma2predicate = fn: term -> term -> template
val makeTemplatewithContext = fn: term -> term -> template
val lemma2template = fn: term -> template
val thm2template = fn: thm -> template
val tterm2string = fn: template_term -> string
val template2string = fn: template -> string
val t = "height ?t <= size ?t": thm
val th =
   Const ("HOL.Trueprop", "bool => prop") $
     (Const ("Orderings.ord_class.less_eq", "nat => nat => bool") $
       (Const ("Tree.height_class.height", "?'a tree => nat") $
         Var (("t", 0), "?'a tree")) $
       (Const ("Nat.size_class.size", "?'a tree => nat") $
         Var (("t", 0), "?'a tree"))):
   term
### theory "Draft.Templates"
### 0.059s elapsed time, 0.135s cpu time, 0.000s GC time
Loading theory "Draft.ExtrEqs" (required by "Draft.Augmenting_Path_BFSTemplates")
locale valid_PRED
  fixes c :: "nat * nat => 'a"
    and src :: "nat"
    and dst :: "nat"
    and PRED :: "nat => nat option"
  assumes "valid_PRED c src PRED"
locale Graph
  fixes c :: "nat * nat => 'capacity"
locale Finite_Graph
  fixes c :: "nat * nat => 'a"
  assumes "Finite_Graph c"
locale Graph
  fixes c :: "nat * nat => 'capacity"
[| (succl, succi) : \<langle>Id\<rangle>list_set_rel; finite succ;
   (succi, succ) : Id; (ui, u) : Id; (PREDi, PRED) : Id; (Ni, N) : Id |]
==> inner_loop2 dst succl ui PREDi Ni
    <= \<Down> Id (\<Down> Id (add_succ_spec dst succ u PRED N))
locale Impl_Succ
  fixes absG :: "'ga => nat * nat => int"
    and ifT :: "'ig itself"
    and succ :: "'ga => nat => nat list nres"
    and isG :: "'ga => 'gi => assn"
    and succ_impl :: "'gi => nat => nat list Heap"
  assumes "Impl_Succ absG succ isG succ_impl"
PR_CONST op_bfs ::\<^sub>i
TYPE('ig => nat => nat => (nat * nat) list option nres)
Graph.init_state ::\<^sub>i
TYPE(nat => (bool * (nat, nat) i_map * nat set * nat set * nat) nres)
### Cannot skip proof of schematic goal statement
val eqpattern =
   Pattern
    (
       Const ("HOL.Trueprop", "bool => prop") $
         (Const ("HOL.eq", "?'a => ?'a => bool") $
           Var (("_dummy_", 1), "?'a") $ Var (("_dummy_", 2), "?'a"))
       ):
   term Find_Theorems.criterion
val badeqpattern = Pattern (Const ("Pure.eq", "?'a => ?'a => prop")):
   term Find_Theorems.criterion
val undefpattern =
   Pattern
    (
       Const ("HOL.Trueprop", "bool => prop") $
         (Const ("HOL.eq", "?'a => ?'a => bool") $
           Var (("_dummy_", 1), "?'a") $ Const ("HOL.undefined", "?'a"))
       ):
   term Find_Theorems.criterion
val thmpattern =
   Pattern
    (Const ("HOL.Trueprop", "bool => prop") $ Var (("_dummy_", 1), "bool")):
   term Find_Theorems.criterion
val badnames =
   ["*nitpick*", "*Nitpick*", "*full_exhaustive*", "*_def*", "Enum.finite*",
    "*Quickcheck*", "ATP*", "*Nunchaku*", "*Code*", "*BNF*", "*SMT*",
    "*.*.*"]:
   string list
val unwanted_names =
   [(false, Name "*nitpick*"), (false, Name "*Nitpick*"),
    (false, Name "*full_exhaustive*"), (false, Name "*_def*"),
    (false, Name "Enum.finite*"), (false, Name "*Quickcheck*"),
    (false, Name "ATP*"), (false, Name "*Nunchaku*"),
    (false, Name "*Code*"), (false, Name "*BNF*"), (false, Name "*SMT*"),
    (false, Name "*.*.*")]:
   (bool * term Find_Theorems.criterion) list
val has_vars = fn: term -> bool
val get_all_eqs = fn: string -> Proof.context -> (string * thm) list
val get_all_thms = fn: string -> Proof.context -> (string * thm) list
val get_noneq_thms = fn: string -> Proof.context -> (string * thm) list
val template_eqs = fn:
   string -> Proof.context -> (string * thm * template) list
val template_thms = fn:
   string -> Proof.context -> (string * thm * template) list
### theory "Draft.ExtrEqs"
### 0.562s elapsed time, 1.163s cpu time, 0.110s GC time
### Cannot skip proof of schematic goal statement
### theory "Draft.Augmenting_Path_BFS"
### 6.772s elapsed time, 11.528s cpu time, 1.336s GC time
*** Failed to load theory "Draft.Augmenting_Path_BFSTemplates" (unresolved "Draft.Augmenting_Path_BFS")
*** exception Protocol_Message
***   [("function", "invoke_scala"), ("name", "make_directory"), ("id", "268")] raised (line 124 of "General/output.ML")
*** At command "export_code" (line 731 of "$AFP/EdmondsKarp_Maxflow/Augmenting_Path_BFS.thy")
Exception- TOPLEVEL_ERROR raised
