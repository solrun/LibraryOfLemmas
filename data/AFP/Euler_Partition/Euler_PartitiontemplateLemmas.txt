   [("Euler_Partition.finite_bitset", "finite (bitset ?n)",
     template_predicate
      (
         template_app
          (template_hole 1, template_app (template_hole 0, template_var 0))
         )),
    ("Euler_Partition.oddpart_leq", "oddpart ?n <= ?n",
     template_inequation
      (less_equals, template_app (template_hole 0, template_var 0),
       template_var 0)),
    ("Euler_Partition.distinct_distinct_of_odd",
     "distinct_of_odd ?p ?i <= 1",
     template_inequation
      (less_equals,
       template_app
        (template_app (template_hole 1, template_var 1), template_var 0),
       template_hole 0)),
    ("Euler_Partition.in_bitset_bound_weak", "?b : bitset ?n ==> ?b <= ?n",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 2, template_var 1),
              template_app (template_hole 1, template_var 0))
            )],
       template_inequation (less_equals, template_var 1, template_var 0))),
    ("Euler_Partition.finite_exponents", "finite {i. 2 ^ i <= ?n}",
     template_predicate
      (
         template_app
          (template_hole 6, template_app (template_hole 5, t_empty))
         )),
    ("Euler_Partition.index_oddpart_decomposition",
     "?n = 2 ^ index ?n * oddpart ?n",
     template_equation
      (template_var 0,
       template_app
        (template_app
          (template_hole 6,
           template_app
            (template_app
              (template_hole 5,
               template_app
                (template_hole 4,
                 template_app (template_hole 3, template_hole 2))),
             template_app (template_hole 1, template_var 0))),
         template_app (template_hole 0, template_var 0)))),
    ("Euler_Partition.sum_bitset", "sum ((^) 2) (bitset ?n) = ?n",
     template_equation
      (template_app
        (template_app (template_hole 5, t_empty),
         template_app (template_hole 0, template_var 0)),
       template_var 0)),
    ("Euler_Partition.bitset_2n", "bitset (2 * ?n) = Suc ` bitset ?n",
     template_equation
      (template_app
        (template_hole 6,
         template_app
          (template_app
            (template_hole 5,
             template_app
              (template_hole 4,
               template_app (template_hole 3, template_hole 2))),
           template_var 0)),
       template_app
        (template_app (template_hole 1, template_hole 0),
         template_app (template_hole 6, template_var 0)))),
    ("Euler_Partition.odd_oddpart", "odd (oddpart ?n) = (?n ~= 0)",
     template_implication
      ([template_predicate
         (
            template_app
             (template_hole 7,
              template_app
               (template_app
                 (template_hole 6,
                  template_app
                   (template_hole 5,
                    template_app (template_hole 4, template_hole 3))),
                template_app (template_hole 2, template_var 0)))
            )],
       template_negation
        (template_equation (template_var 0, template_hole 0)))),
    ("Euler_Partition.in_bitset_bound", "?b : bitset ?n ==> 2 ^ ?b <= ?n",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 6, template_var 1),
              template_app (template_hole 5, template_var 0))
            )],
       template_inequation
        (less_equals,
         template_app
          (template_app
            (template_hole 3,
             template_app
              (template_hole 2,
               template_app (template_hole 1, template_hole 0))),
           template_var 1),
         template_var 0))),
    ("Euler_Partition.odd", "odd_of_distinct ?p ?i ~= 0 ==> odd ?i",
     template_implication
      ([template_negation
         (
            template_equation
             (template_app
               (template_app (template_hole 5, template_var 1),
                template_var 0),
              template_hole 4)
            )],
       template_negation
        (
           template_predicate
            (
               template_app
                (template_app
                  (template_hole 3,
                   template_app
                    (template_hole 2,
                     template_app (template_hole 1, template_hole 0))),
                 template_var 0)
               )
           ))),
    ("Euler_Partition.bitset_2n1",
     "bitset (2 * ?n + 1) = insert 0 (Suc ` bitset ?n)",
     template_equation
      (template_app
        (template_hole 10,
         template_app
          (template_app
            (template_hole 9,
             template_app
              (template_app
                (template_hole 8,
                 template_app
                  (template_hole 7,
                   template_app (template_hole 6, template_hole 5))),
               template_var 0)),
           template_hole 4)),
       template_app
        (template_app (template_hole 3, template_hole 2),
         template_app
          (template_app (template_hole 1, template_hole 0),
           template_app (template_hole 10, template_var 0))))),
    ("Euler_Partition.bitset_sum",
     "finite ?B ==> bitset (sum ((^) 2) ?B) = ?B",
     template_implication
      ([template_predicate
         (template_app (template_hole 7, template_var 0))],
       template_equation
        (template_app
          (template_hole 5,
           template_app
            (template_app (template_hole 4, t_empty), template_var 0)),
         template_var 0))),
    ("Euler_Partition.bitset_Suc",
     "even ?n ==> bitset (?n + 1) = insert 0 (bitset ?n)",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_hole 9,
                template_app
                 (template_hole 8,
                  template_app (template_hole 7, template_hole 6))),
              template_var 0)
            )],
       template_equation
        (template_app
          (template_hole 4,
           template_app
            (template_app (template_hole 3, template_var 0),
             template_hole 2)),
         template_app
          (template_app (template_hole 1, template_hole 0),
           template_app (template_hole 4, template_var 0))))),
    ("Euler_Partition.index_oddpart", "odd ?m ==> index (2 ^ ?i * ?m) = ?i",
     template_implication
      ([template_negation
         (
            template_predicate
             (
                template_app
                 (template_app
                   (template_hole 7,
                    template_app
                     (template_hole 6,
                      template_app (template_hole 5, template_hole 4))),
                  template_var 1)
                )
            )],
       template_equation
        (template_app
          (template_hole 2,
           template_app
            (template_app
              (template_hole 1,
               template_app
                (template_app
                  (template_hole 0,
                   template_app
                    (template_hole 6,
                     template_app (template_hole 5, template_hole 4))),
                 template_var 0)),
             template_var 1)),
         template_var 0))),
    ("Euler_Partition.index_oddpart",
     "odd ?m ==> oddpart (2 ^ ?i * ?m) = ?m",
     template_implication
      ([template_negation
         (
            template_predicate
             (
                template_app
                 (template_app
                   (template_hole 7,
                    template_app
                     (template_hole 6,
                      template_app (template_hole 5, template_hole 4))),
                  template_var 1)
                )
            )],
       template_equation
        (template_app
          (template_hole 2,
           template_app
            (template_app
              (template_hole 1,
               template_app
                (template_app
                  (template_hole 0,
                   template_app
                    (template_hole 6,
                     template_app (template_hole 5, template_hole 4))),
                 template_var 0)),
             template_var 1)),
         template_var 1))),
    ("Euler_Partition.odd_distinct",
     "(!!i. ?p i ~= 0 ==> odd i) ==>
      odd_of_distinct (distinct_of_odd ?p) = ?p",
     template_implication
      ([template_predicate (template_app (template_hole 11, t_empty))],
       template_equation
        (template_app
          (template_hole 1, template_app (template_hole 0, template_var 0)),
         template_var 0))),
    ("Euler_Partition.power_div_nat",
     "[| ?c <= ?b; 0 < ?a |] ==> ?a ^ ?b div ?a ^ ?c = ?a ^ (?b - ?c)",
     template_implication
      ([template_inequation (less_equals, template_var 2, template_var 1),
        template_inequation (less_than, template_hole 4, template_var 0)],
       template_equation
        (template_app
          (template_app
            (template_hole 2,
             template_app
              (template_app (template_hole 1, template_var 0),
               template_var 1)),
           template_app
            (template_app (template_hole 1, template_var 0),
             template_var 2)),
         template_app
          (template_app (template_hole 1, template_var 0),
           template_app
            (template_app (template_hole 0, template_var 1),
             template_var 2))))),
    ("Euler_Partition.odd_iff",
     "finite ?B ==>
      odd (SUM i:?B. if i < ?x then 0 else 2 ^ (i - ?x)) = (?x : ?B)",
     template_implication
      ([template_predicate
         (template_app (template_hole 13, template_var 1))],
       template_equation
        (template_app
          (template_hole 11,
           template_app
            (template_app
              (template_hole 10,
               template_app
                (template_hole 9,
                 template_app (template_hole 8, template_hole 7))),
             template_app
              (template_app (template_hole 6, t_empty), template_var 1))),
         template_app
          (template_app (template_hole 0, template_var 0),
           template_var 1)))),
    ("Euler_Partition.sum_mod",
     "[| finite ?A; !!a. a : ?A ==> ?f a mod ?b = (0::?'b) |]
      ==> sum ?f ?A mod ?b = (0::?'b)",
     template_implication
      ([template_predicate (template_app (template_hole 6, template_var 2)),
        template_predicate (template_app (template_hole 5, t_empty))],
       template_equation
        (template_app
          (template_app
            (template_hole 2,
             template_app
              (template_app (template_hole 0, t_empty), template_var 2)),
           template_var 0),
         template_hole 1))),
    ("Euler_Partition.odd_of_distinct",
     "[| odd_of_distinct ?p ?i ~= 0; !!i. ?p i ~= 0 ==> i <= ?n |]
      ==> 1 <= ?i & ?i <= ?n",
     template_implication
      ([template_negation
         (
            template_equation
             (template_app
               (template_app (template_hole 5, template_var 2),
                template_var 1),
              template_hole 4)
            ),
        template_predicate (template_app (template_hole 3, t_empty))],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 1,
               template_app
                (template_app (template_hole 2, template_hole 0),
                 template_var 1)),
             template_app
              (template_app (template_hole 2, template_var 1),
               template_var 0))
           ))),
    ("Euler_Partition.distinct_odd",
     "[| !!i. ?p i ~= 0 ==> 1 <= i & i <= ?n; !!i. ?p i <= 1 |]
      ==> distinct_of_odd (odd_of_distinct ?p) = ?p",
     template_implication
      ([template_predicate (template_app (template_hole 10, t_empty)),
        template_predicate (template_app (template_hole 10, t_empty))],
       template_equation
        (template_app
          (template_hole 1, template_app (template_hole 0, template_var 1)),
         template_var 1))),
    ("Euler_Partition.sum_div",
     "[| finite ?A; !!a. a : ?A ==> ?b dvd ?f a |]
      ==> sum ?f ?A div ?b = (SUM a:?A. ?f a div ?b)",
     template_implication
      ([template_predicate (template_app (template_hole 6, template_var 2)),
        template_predicate (template_app (template_hole 5, t_empty))],
       template_equation
        (template_app
          (template_app
            (template_hole 1,
             template_app
              (template_app (template_hole 0, t_empty), template_var 2)),
           template_var 1),
         template_app
          (template_app (template_hole 0, t_empty), template_var 2)))),
    ("Euler_Partition.binarysum_div",
     "finite ?B ==>
      sum ((^) 2) ?B div 2 ^ ?j =
      (SUM i:?B. if i < ?j then 0 else 2 ^ (i - ?j))",
     template_implication
      ([template_predicate
         (template_app (template_hole 11, template_var 1))],
       template_equation
        (template_app
          (template_app
            (template_hole 9,
             template_app
              (template_app (template_hole 8, t_empty), template_var 1)),
           template_app
            (template_app
              (template_hole 7,
               template_app
                (template_hole 6,
                 template_app (template_hole 5, template_hole 4))),
             template_var 0)),
         template_app
          (template_app (template_hole 8, t_empty), template_var 1)))),
    ("Euler_Partition.leq_n",
     "[| ALL i. 0 < ?p i --> 1 <= i & i <= ?n; (SUM i<=?n. ?p i * i) = ?n |]
      ==> ?p ?i * ?i <= ?n",
     template_implication
      ([template_predicate (template_app (template_hole 10, t_empty)),
        template_equation
         (template_app
           (template_app (template_hole 2, t_empty),
            template_app (template_hole 0, template_var 1)),
          template_var 1)],
       template_inequation
        (less_equals,
         template_app
          (template_app
            (template_hole 1,
             template_app (template_var 2, template_var 0)),
           template_var 0),
         template_var 1))),
    ("Euler_Partition.Euler_partition_theorem",
     "card {p. p partitions ?n & (ALL i. p i <= 1)} =
      card {p. p partitions ?n & (ALL i. p i ~= 0 --> odd i)}",
     template_equation
      (template_app
        (template_hole 13, template_app (template_hole 12, t_empty)),
       template_app
        (template_hole 13, template_app (template_hole 12, t_empty)))),
    ("Euler_Partition.odd_of_distinct_in_odd_partitions",
     "?p : {p. p partitions ?n & (ALL i. p i <= 1)} ==>
      odd_of_distinct ?p
      : {p. p partitions ?n & (ALL i. p i ~= 0 --> odd i)}",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 15, template_var 1),
              template_app (template_hole 14, t_empty))
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 15,
               template_app (template_hole 8, template_var 1)),
             template_app (template_hole 14, t_empty))
           ))),
    ("Euler_Partition.distinct_of_odd_in_distinct_partitions",
     "?p : {p. p partitions ?n & (ALL i. p i ~= 0 --> odd i)} ==>
      distinct_of_odd ?p : {p. p partitions ?n & (ALL i. p i <= 1)}",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 15, template_var 1),
              template_app (template_hole 14, t_empty))
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 15,
               template_app (template_hole 2, template_var 1)),
             template_app (template_hole 14, t_empty))
           ))),
    ("Euler_Partition.index_oddpart_unique",
     "[| odd ?m; odd ?m' |]
      ==> (2 ^ ?i * ?m = 2 ^ ?i' * ?m') = (?i = ?i' & ?m = ?m')",
     template_implication
      ([template_negation
         (
            template_predicate
             (
                template_app
                 (template_app
                   (template_hole 8,
                    template_app
                     (template_hole 7,
                      template_app (template_hole 6, template_hole 5))),
                  template_var 3)
                )
            ),
        template_negation
         (
            template_predicate
             (
                template_app
                 (template_app
                   (template_hole 8,
                    template_app
                     (template_hole 7,
                      template_app (template_hole 6, template_hole 5))),
                  template_var 2)
                )
            )],
       template_bimplication
        (template_equation
          (template_app
            (template_app
              (template_hole 2,
               template_app
                (template_app
                  (template_hole 1,
                   template_app
                    (template_hole 7,
                     template_app (template_hole 6, template_hole 5))),
                 template_var 1)),
             template_var 3),
           template_app
            (template_app
              (template_hole 2,
               template_app
                (template_app
                  (template_hole 1,
                   template_app
                    (template_hole 7,
                     template_app (template_hole 6, template_hole 5))),
                 template_var 0)),
             template_var 2)),
         template_predicate
          (
             template_app
              (template_app
                (template_hole 0,
                 template_app
                  (template_app (template_hole 3, template_var 1),
                   template_var 0)),
               template_app
                (template_app (template_hole 3, template_var 3),
                 template_var 2))
             )))),
    ("Euler_Partition.distinct_of_odd",
     "[| !!i. ?p i * i <= ?n; !!i. ?p i ~= 0 ==> odd i;
         distinct_of_odd ?p ?i ~= 0 |]
      ==> 1 <= ?i & ?i <= ?n",
     template_implication
      ([template_predicate (template_app (template_hole 13, t_empty)),
        template_predicate (template_app (template_hole 13, t_empty)),
        template_negation
         (
            template_equation
             (template_app
               (template_app (template_hole 2, template_var 2),
                template_var 0),
              template_hole 7)
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 1,
               template_app
                (template_app (template_hole 11, template_hole 0),
                 template_var 0)),
             template_app
              (template_app (template_hole 11, template_var 0),
               template_var 1))
           ))),
    ("Euler_Partition.sum_distinct_of_odd",
     "[| !!i. ?p i ~= 0 ==> 1 <= i & i <= ?n; !!i. ?p i * i <= ?n;
         !!i. ?p i ~= 0 ==> odd i |]
      ==> (SUM i<=?n. distinct_of_odd ?p i * i) = (SUM i<=?n. ?p i * i)",
     template_implication
      ([template_predicate (template_app (template_hole 15, t_empty)),
        template_predicate (template_app (template_hole 15, t_empty)),
        template_predicate (template_app (template_hole 15, t_empty))],
       template_equation
        (template_app
          (template_app (template_hole 2, t_empty),
           template_app (template_hole 0, template_var 0)),
         template_app
          (template_app (template_hole 2, t_empty),
           template_app (template_hole 0, template_var 0)))))]
