Loading theory "HOL-Data_Structures.Cmp" (required by "Draft.Splay_Tree_AnalysisMoreTemplates" via "Draft.Splay_Tree_Analysis" via "Draft.Splay_Tree_Analysis_Base" via "Splay_Tree.Splay_Tree")
Loading theory "HOL-Data_Structures.Less_False" (required by "Draft.Splay_Tree_AnalysisMoreTemplates" via "Draft.Splay_Tree_Analysis" via "Draft.Splay_Tree_Analysis_Base" via "Splay_Tree.Splay_Tree" via "HOL-Data_Structures.Set_Specs" via "HOL-Data_Structures.List_Ins_Del" via "HOL-Data_Structures.Sorted_Less")
Loading theory "HOL-Library.Function_Algebras" (required by "Draft.Splay_Tree_AnalysisMoreTemplates" via "Draft.ExtrEqs" via "HOL-Library.BigO")
Loading theory "HOL-Library.Nat_Bijection" (required by "Draft.Splay_Tree_AnalysisMoreTemplates" via "Draft.ExtrEqs" via "HOL-Library.Stream")
instantiation
  fun :: (type, plus) plus
  plus_fun == plus :: ('a => 'b) => ('a => 'b) => 'a => 'b
instantiation
  fun :: (type, zero) zero
  zero_fun == zero_class.zero :: 'a => 'b
### theory "HOL-Data_Structures.Less_False"
### 0.046s elapsed time, 0.216s cpu time, 0.000s GC time
Loading theory "HOL-Data_Structures.Sorted_Less" (required by "Draft.Splay_Tree_AnalysisMoreTemplates" via "Draft.Splay_Tree_Analysis" via "Draft.Splay_Tree_Analysis_Base" via "Splay_Tree.Splay_Tree" via "HOL-Data_Structures.Set_Specs" via "HOL-Data_Structures.List_Ins_Del")
instantiation
  fun :: (type, times) times
  times_fun == times :: ('a => 'b) => ('a => 'b) => 'a => 'b
instantiation
  fun :: (type, one) one
  one_fun == one_class.one :: 'a => 'b
### theory "HOL-Data_Structures.Sorted_Less"
### 0.047s elapsed time, 0.185s cpu time, 0.000s GC time
Loading theory "HOL-Data_Structures.List_Ins_Del" (required by "Draft.Splay_Tree_AnalysisMoreTemplates" via "Draft.Splay_Tree_Analysis" via "Draft.Splay_Tree_Analysis_Base" via "Splay_Tree.Splay_Tree" via "HOL-Data_Structures.Set_Specs")
Found termination order: "(%p. size (snd p)) <*mlex*> {}"
### theory "HOL-Library.Function_Algebras"
### 0.123s elapsed time, 0.506s cpu time, 0.047s GC time
Loading theory "HOL-Library.Set_Algebras" (required by "Draft.Splay_Tree_AnalysisMoreTemplates" via "Draft.ExtrEqs" via "HOL-Library.BigO")
instantiation
  set :: (plus) plus
  plus_set == plus :: 'a set => 'a set => 'a set
instantiation
  set :: (times) times
  times_set == times :: 'a set => 'a set => 'a set
instantiation
  set :: (zero) zero
  zero_set == zero_class.zero :: 'a set
instantiation
  set :: (one) one
  one_set == one_class.one :: 'a set
Found termination order: "(%p. length (snd p)) <*mlex*> {}"
Found termination order: "size_list size <*mlex*> {}"
Found termination order: "(%p. length (snd p)) <*mlex*> {}"
### theory "HOL-Data_Structures.List_Ins_Del"
### 0.257s elapsed time, 0.990s cpu time, 0.133s GC time
Loading theory "HOL-Data_Structures.Set_Specs" (required by "Draft.Splay_Tree_AnalysisMoreTemplates" via "Draft.Splay_Tree_Analysis" via "Draft.Splay_Tree_Analysis_Base" via "Splay_Tree.Splay_Tree")
### theory "HOL-Library.Set_Algebras"
### 0.223s elapsed time, 0.880s cpu time, 0.086s GC time
Loading theory "HOL-Library.Tree" (required by "Draft.Splay_Tree_AnalysisMoreTemplates" via "Draft.ExtrEqs" via "Draft.Templates")
locale Set
  fixes empty :: "'s"
    and insert :: "'a => 's => 's"
    and delete :: "'a => 's => 's"
    and isin :: "'s => 'a => bool"
    and set :: "'s => 'a set"
    and invar :: "'s => bool"
  assumes "Set empty insert delete isin set invar"
locale Set_by_Ordered
  fixes empty :: "'t"
    and insert :: "'a => 't => 't"
    and delete :: "'a => 't => 't"
    and isin :: "'t => 'a => bool"
    and inorder :: "'t => 'a list"
    and inv :: "'t => bool"
  assumes "Set_by_Ordered empty insert delete isin inorder inv"
### theory "HOL-Data_Structures.Cmp"
### 0.449s elapsed time, 1.797s cpu time, 0.133s GC time
Loading theory "Draft.Amortized_Framework" (required by "Draft.Splay_Tree_AnalysisMoreTemplates" via "Draft.Splay_Tree_Analysis")
locale Set2
  fixes empty :: "'s"
    and delete :: "'a => 's => 's"
    and isin :: "'s => 'a => bool"
    and set :: "'s => 'a set"
    and invar :: "'s => bool"
    and insert :: "'a => 's => 's"
    and union :: "'s => 's => 's"
    and inter :: "'s => 's => 's"
    and diff :: "'s => 's => 's"
  assumes "Set2 empty delete isin set invar insert union inter diff"
### theory "HOL-Library.Nat_Bijection"
### 0.447s elapsed time, 1.781s cpu time, 0.133s GC time
Loading theory "HOL-Library.Stream" (required by "Draft.Splay_Tree_AnalysisMoreTemplates" via "Draft.ExtrEqs")
### theory "HOL-Data_Structures.Set_Specs"
### 0.100s elapsed time, 0.400s cpu time, 0.000s GC time
Loading theory "Draft.Lemmas_log" (required by "Draft.Splay_Tree_AnalysisMoreTemplates" via "Draft.Splay_Tree_Analysis" via "Draft.Splay_Tree_Analysis_Base")
### theory "Draft.Lemmas_log"
### 0.049s elapsed time, 0.193s cpu time, 0.000s GC time
Loading theory "HOL-Library.BigO" (required by "Draft.Splay_Tree_AnalysisMoreTemplates" via "Draft.ExtrEqs")
consts
  shift :: "'a list => 'a stream => 'a stream"
consts
  left :: "'a tree => 'a tree"
Proofs for coinductive predicate(s) "streamsp"
locale Amortized
  fixes arity :: "'op => nat"
    and exec :: "'op => 's list => 's"
    and inv :: "'s => bool"
    and cost :: "'op => 's list => nat"
    and \<Phi> :: "'s => real"
    and U :: "'op => 's list => real"
  assumes "Amortized arity exec inv cost \<Phi> U"
consts
  right :: "'a tree => 'a tree"
  Proving monotonicity ...
Found termination order: "size <*mlex*> {}"
Found termination order: "size <*mlex*> {}"
consts
  snth :: "'a stream => nat => 'a"
consts
  stake :: "nat => 'a stream => 'a list"
consts
  sdrop :: "nat => 'a stream => 'a stream"
Found termination order: "size <*mlex*> {}"
Found termination order: "size <*mlex*> {}"
consts
  sfilter :: "('a => bool) => 'a stream => 'a stream"
Found termination order: "size <*mlex*> {}"
consts
  cycle :: "'a list => 'a stream"
Found termination order: "size <*mlex*> {}"
class height = type +
  fixes height :: "'a => nat"
instantiation
  tree :: (type) height
  height_tree == height :: 'a tree => nat
consts
  siterate :: "('a => 'a) => 'a => 'a stream"
Found termination order: "size <*mlex*> {}"
consts
  flat :: "'a list stream => 'a stream"
Found termination order: "size <*mlex*> {}"
consts
  sinterleave :: "'a stream => 'a stream => 'a stream"
Found termination order: "size <*mlex*> {}"
Found termination order: "size <*mlex*> {}"
consts
  szip :: "'a stream => 'b stream => ('a * 'b) stream"
consts
  smap2 :: "('a => 'b => 'c) => 'a stream => 'b stream => 'c stream"
### theory "HOL-Library.BigO"
### 1.046s elapsed time, 3.957s cpu time, 0.966s GC time
Found termination order: "size <*mlex*> {}"
### theory "HOL-Library.Stream"
### 1.121s elapsed time, 4.232s cpu time, 0.966s GC time
locale Amortized2
  fixes arity :: "'op => nat"
    and exec :: "'op => 's list => 's"
    and inv :: "'s => bool"
    and cost :: "'op => 's list => nat"
    and \<Phi> :: "'s => real"
    and U :: "'op => 's list => real"
    and exec' :: "'op => 't list => 't"
    and inv' :: "'t => bool"
    and cost' :: "'op => 't list => nat"
    and U' :: "'op => 't list => real"
    and hom :: "'t => 's"
  assumes "Amortized2 arity exec inv cost \<Phi> U exec' inv' cost' U' hom"
Found termination order: "size <*mlex*> {}"
Found termination order: "size <*mlex*> {}"
### theory "Draft.Amortized_Framework"
### 1.290s elapsed time, 4.605s cpu time, 0.966s GC time
Found termination order: "size <*mlex*> {}"
Found termination order: "size <*mlex*> {}"
Found termination order: "(%p. size (fst p)) <*mlex*> {}"
Found termination order: "size <*mlex*> {}"
Found termination order: "(%p. size (snd p)) <*mlex*> {}"
Found termination order: "size <*mlex*> {}"
### theory "HOL-Library.Tree"
### 1.955s elapsed time, 5.640s cpu time, 1.083s GC time
Loading theory "Draft.Templates" (required by "Draft.Splay_Tree_AnalysisMoreTemplates" via "Draft.ExtrEqs")
Loading theory "Splay_Tree.Splay_Tree" (required by "Draft.Splay_Tree_AnalysisMoreTemplates" via "Draft.Splay_Tree_Analysis" via "Draft.Splay_Tree_Analysis_Base")
datatype template_term
=
     t_empty
   | template_app of template_term * template_term
   | template_hole of int
   | template_var of int
datatype sign
= equals | greater_equals | greater_than | less_equals | less_than
datatype template
=
     template_bimplication of template * template
   | template_dunno
   | template_equation of template_term * template_term
   | template_implication of template list * template
   | template_inequation of sign * template_term * template_term
   | template_negation of template
   | template_predicate of template_term
constructor t_empty: template_term
constructor template_app: template_term * template_term -> template_term
constructor template_hole: int -> template_term
constructor template_var: int -> template_term
constructor equals: sign
constructor greater_equals: sign
constructor greater_than: sign
constructor less_equals: sign
constructor less_than: sign
constructor template_bimplication: template * template -> template
constructor template_dunno: template
constructor template_equation: template_term * template_term -> template
constructor template_implication: template list * template -> template
constructor template_inequation:
   sign * template_term * template_term -> template
constructor template_negation: template -> template
constructor template_predicate: template_term -> template
val vfs = fn: term -> (indexname * typ) list * (string * typ) list
val indexOf = fn: ''a list -> ''a -> int -> int
val has_eq = fn: term -> bool
val term2template = fn:
   (indexname * typ) list -> (string * typ) list -> term -> template_term
val lemma2predicate = fn: term -> term -> template
val makeTemplatewithContext = fn: term -> term -> template
val lemma2template = fn: term -> template
val thm2template = fn: thm -> template
val tterm2string = fn: template_term -> string
val template2string = fn: template -> string
val t = "height ?t <= size ?t": thm
val th =
   Const ("HOL.Trueprop", "bool => prop") $
     (Const ("Orderings.ord_class.less_eq", "nat => nat => bool") $
       (Const ("Tree.height_class.height", "?'a tree => nat") $
         Var (("t", 0), "?'a tree")) $
       (Const ("Nat.size_class.size", "?'a tree => nat") $
         Var (("t", 0), "?'a tree"))):
   term
### theory "Draft.Templates"
### 0.048s elapsed time, 0.109s cpu time, 0.000s GC time
Loading theory "Draft.ExtrEqs" (required by "Draft.Splay_Tree_AnalysisMoreTemplates")
val eqpattern =
   Pattern
    (
       Const ("HOL.Trueprop", "bool => prop") $
         (Const ("HOL.eq", "?'a => ?'a => bool") $
           Var (("_dummy_", 1), "?'a") $ Var (("_dummy_", 2), "?'a"))
       ):
   term Find_Theorems.criterion
val badeqpattern = Pattern (Const ("Pure.eq", "?'a => ?'a => prop")):
   term Find_Theorems.criterion
val undefpattern =
   Pattern
    (
       Const ("HOL.Trueprop", "bool => prop") $
         (Const ("HOL.eq", "?'a => ?'a => bool") $
           Var (("_dummy_", 1), "?'a") $ Const ("HOL.undefined", "?'a"))
       ):
   term Find_Theorems.criterion
val thmpattern =
   Pattern
    (Const ("HOL.Trueprop", "bool => prop") $ Var (("_dummy_", 1), "bool")):
   term Find_Theorems.criterion
val badnames =
   ["*nitpick*", "*Nitpick*", "*full_exhaustive*", "*_def*", "Enum.finite*",
    "*Quickcheck*", "ATP*", "*Nunchaku*", "*Code*", "*BNF*", "*SMT*",
    "*.*.*"]:
   string list
val unwanted_names =
   [(false, Name "*nitpick*"), (false, Name "*Nitpick*"),
    (false, Name "*full_exhaustive*"), (false, Name "*_def*"),
    (false, Name "Enum.finite*"), (false, Name "*Quickcheck*"),
    (false, Name "ATP*"), (false, Name "*Nunchaku*"),
    (false, Name "*Code*"), (false, Name "*BNF*"), (false, Name "*SMT*"),
    (false, Name "*.*.*")]:
   (bool * term Find_Theorems.criterion) list
val has_vars = fn: term -> bool
val get_all_eqs = fn: string -> Proof.context -> (string * thm) list
val get_all_thms = fn: string -> Proof.context -> (string * thm) list
val get_noneq_thms = fn: string -> Proof.context -> (string * thm) list
val template_eqs = fn:
   string -> Proof.context -> (string * thm * template) list
val template_thms = fn:
   string -> Proof.context -> (string * thm * template) list
### theory "Draft.ExtrEqs"
### 0.513s elapsed time, 1.085s cpu time, 0.121s GC time
### Ambiguous input (line 50 of "$AFP/Splay_Tree/Splay_Tree.thy") produces 4 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("_applC" ("_position" splay)
###       ("_cargs" ("_position" x)
###         ("_applC" ("_position" Node)
###           ("_cargs" ("_position" AB)
###             ("_cargs" ("_position" b) ("_position" CD))))))
###     ("_case_syntax"
###       ("_applC" ("_position" cmp)
###         ("_cargs" ("_position" x) ("_position" b)))
###       ("_case2"
###         ("_case1" ("_position" EQ)
###           ("_applC" ("_position" Node)
###             ("_cargs" ("_position" AB)
###               ("_cargs" ("_position" b) ("_position" CD)))))
###         ("_case2"
###           ("_case1" ("_position" LT)
###             ("_case_syntax" ("_position" AB)
###               ("_case2"
###                 ("_case1" ("_position" Leaf)
###                   ("_applC" ("_position" Node)
###                     ("_cargs" ("_position" AB)
###                       ("_cargs" ("_position" b) ("_position" CD)))))
###                 ("_case1"
###                   ("_applC" ("_position" Node)
###                     ("_cargs" ("_position" A)
###                       ("_cargs" ("_position" a) ("_position" B))))
###                   ("_case_syntax"
###                     ("_applC" ("_position" cmp)
###                       ("_cargs" ("_position" x) ("_position" a)))
###                     ("_case2"
###                       ("_case1" ("_position" EQ)
###                         ("_applC" ("_position" Node)
###                           ("_cargs" ("_position" A)
###                             ("_cargs" ("_position" a)
###                               ("_applC" ("_position" Node)
###                                 ("_cargs" ("_position" B)
###                                   ("_cargs" ("_position" b)
###                                     ("_position" CD))))))))
###                       ("_case1" ("_position" LT)
###                         ("\<^const>HOL.If"
###                           ("\<^const>HOL.eq" ("_position" A)
###                             ("_position" Leaf))
###                           ("_applC" ("_position" Node)
###                             ("_cargs" ("_position" A)
###                               ("_cargs" ("_position" a)
###                                 ("_applC" ("_position" Node)
###                                   ("_cargs" ("_position" B)
###                                     ("_cargs" ("_position" b)
### ("_position" CD)))))))
###                           ("_case_syntax"
###                             ("_applC" ("_position" splay)
###                               ("_cargs" ("_position" x) ("_position" A)))
###                             ("_case2"
###                               ("_case1"
###                                 ("_applC" ("_position" Node)
###                                   ("_cargs" ("_position" A\<^sub>1)
###                                     ("_cargs" ("_position" a')
### ("_position" A\<^sub>2))))
###                                 ("_applC" ("_position" Node)
###                                   ("_cargs" ("_position" A\<^sub>1)
###                                     ("_cargs" ("_position" a')
### ("_applC" ("_position" Node)
###   ("_cargs" ("_position" A\<^sub>2)
###     ("_cargs" ("_position" a)
###       ("_applC" ("_position" Node)
###         ("_cargs" ("_position" B)
###           ("_cargs" ("_position" b) ("_position" CD)))))))))))
###                               ("_case1" ("_position" GT)
###                                 ("\<^const>HOL.If"
###                                   ("\<^const>HOL.eq" ("_position" B)
###                                     ("_position" Leaf))
###                                   ("_applC" ("_position" Node)
###                                     ("_cargs" ("_position" A)
### ("_cargs" ("_position" a)
###   ("_applC" ("_position" Node)
###     ("_cargs" ("_position" B)
###       ("_cargs" ("_position" b) ("_position" CD)))))))
###                                   ("_case_syntax"
###                                     ("_applC" ("_position" splay)
### ("_cargs" ("_position" x) ("_position" B)))
###                                     ("_case1"
### ("_applC" ("_position" Node)
###   ("_cargs" ("_position" B\<^sub>1)
###     ("_cargs" ("_position" b') ("_position" B\<^sub>2))))
### ("_applC" ("_position" Node)
###   ("_cargs"
###     ("_applC" ("_position" Node)
###       ("_cargs" ("_position" A)
###         ("_cargs" ("_position" a) ("_position" B\<^sub>1))))
###     ("_cargs" ("_position" b')
###       ("_applC" ("_position" Node)
###         ("_cargs" ("_position" B\<^sub>2)
###           ("_cargs" ("_position" b) ("_position" CD)))))))))))))))))))))
###           ("_case1" ("_position" GT)
###             ("_case_syntax" ("_position" CD)
###               ("_case2"
###                 ("_case1" ("_position" Leaf)
###                   ("_applC" ("_position" Node)
###                     ("_cargs" ("_position" AB)
###                       ("_cargs" ("_position" b) ("_position" CD)))))
###                 ("_case1"
###                   ("_applC" ("_position" Node)
###                     ("_cargs" ("_position" C)
###                       ("_cargs" ("_position" c) ("_position" D))))
###                   ("_case_syntax"
###                     ("_applC" ("_position" cmp)
###                       ("_cargs" ("_position" x) ("_position" c)))
###                     ("_case2"
###                       ("_case1" ("_position" EQ)
###                         ("_applC" ("_position" Node)
###                           ("_cargs"
###                             ("_applC" ("_position" Node)
###                               ("_cargs" ("_position" AB)
###                                 ("_cargs" ("_position" b) ("_position" C))))
###                             ("_cargs" ("_position" c) ("_position" D)))))
###                       ("_case1" ("_position" LT)
###                         ("\<^const>HOL.If"
###                           ("\<^const>HOL.eq" ("_position" C)
###                             ("_position" Leaf))
###                           ("_applC" ("_position" Node)
###                             ("_cargs"
###                               ("_applC" ("_position" Node)
###                                 ("_cargs" ("_position" AB)
###                                   ("_cargs" ("_position" b)
###                                     ("_position" C))))
###                               ("_cargs" ("_position" c) ("_position" D))))
###                           ("_case_syntax"
###                             ("_applC" ("_position" splay)
###                               ("_cargs" ("_position" x) ("_position" C)))
###                             ("_case2"
###                               ("_case1"
###                                 ("_applC" ("_position" Node)
###                                   ("_cargs" ("_position" C\<^sub>1)
###                                     ("_cargs" ("_position" c')
### ("_position" C\<^sub>2))))
###                                 ("_applC" ("_position" Node)
###                                   ("_cargs"
###                                     ("_applC" ("_position" Node)
### ("_cargs" ("_position" AB)
###   ("_cargs" ("_position" b) ("_position" C\<^sub>1))))
###                                     ("_cargs" ("_position" c')
### ("_applC" ("_position" Node)
###   ("_cargs" ("_position" C\<^sub>2)
###     ("_cargs" ("_position" c) ("_position" D))))))))
###                               ("_case1" ("_position" GT)
###                                 ("\<^const>HOL.If"
###                                   ("\<^const>HOL.eq" ("_position" D)
###                                     ("_position" Leaf))
###                                   ("_applC" ("_position" Node)
###                                     ("_cargs"
### ("_applC" ("_position" Node)
###   ("_cargs" ("_position" AB) ("_cargs" ("_position" b) ("_position" C))))
### ("_cargs" ("_position" c) ("_position" D))))
###                                   ("_case_syntax"
###                                     ("_applC" ("_position" splay)
### ("_cargs" ("_position" x) ("_position" D)))
###                                     ("_case1"
### ("_applC" ("_position" Node)
###   ("_cargs" ("_position" D\<^sub>1)
###     ("_cargs" ("_position" d) ("_position" D\<^sub>2))))
### ("_applC" ("_position" Node)
###   ("_cargs"
###     ("_applC" ("_position" Node)
###       ("_cargs"
###         ("_applC" ("_position" Node)
###           ("_cargs" ("_position" AB)
###             ("_cargs" ("_position" b) ("_position" C))))
###         ("_cargs" ("_position" c) ("_position" D\<^sub>1))))
###     ("_cargs" ("_position" d) ("_position" D\<^sub>2)))))))))))))))))))))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("_applC" ("_position" splay)
###       ("_cargs" ("_position" x)
###         ("_applC" ("_position" Node)
###           ("_cargs" ("_position" AB)
###             ("_cargs" ("_position" b) ("_position" CD))))))
###     ("_case_syntax"
###       ("_applC" ("_position" cmp)
###         ("_cargs" ("_position" x) ("_position" b)))
###       ("_case2"
###         ("_case1" ("_position" EQ)
###           ("_applC" ("_position" Node)
###             ("_cargs" ("_position" AB)
###               ("_cargs" ("_position" b) ("_position" CD)))))
###         ("_case2"
###           ("_case1" ("_position" LT)
###             ("_case_syntax" ("_position" AB)
###               ("_case2"
###                 ("_case1" ("_position" Leaf)
###                   ("_applC" ("_position" Node)
###                     ("_cargs" ("_position" AB)
###                       ("_cargs" ("_position" b) ("_position" CD)))))
###                 ("_case1"
###                   ("_applC" ("_position" Node)
###                     ("_cargs" ("_position" A)
###                       ("_cargs" ("_position" a) ("_position" B))))
###                   ("_case_syntax"
###                     ("_applC" ("_position" cmp)
###                       ("_cargs" ("_position" x) ("_position" a)))
###                     ("_case2"
###                       ("_case1" ("_position" EQ)
###                         ("_applC" ("_position" Node)
###                           ("_cargs" ("_position" A)
###                             ("_cargs" ("_position" a)
###                               ("_applC" ("_position" Node)
###                                 ("_cargs" ("_position" B)
###                                   ("_cargs" ("_position" b)
###                                     ("_position" CD))))))))
###                       ("_case2"
###                         ("_case1" ("_position" LT)
###                           ("\<^const>HOL.If"
###                             ("\<^const>HOL.eq" ("_position" A)
###                               ("_position" Leaf))
###                             ("_applC" ("_position" Node)
###                               ("_cargs" ("_position" A)
###                                 ("_cargs" ("_position" a)
###                                   ("_applC" ("_position" Node)
###                                     ("_cargs" ("_position" B)
### ("_cargs" ("_position" b) ("_position" CD)))))))
###                             ("_case_syntax"
###                               ("_applC" ("_position" splay)
###                                 ("_cargs" ("_position" x) ("_position" A)))
###                               ("_case1"
###                                 ("_applC" ("_position" Node)
###                                   ("_cargs" ("_position" A\<^sub>1)
###                                     ("_cargs" ("_position" a')
### ("_position" A\<^sub>2))))
###                                 ("_applC" ("_position" Node)
###                                   ("_cargs" ("_position" A\<^sub>1)
###                                     ("_cargs" ("_position" a')
### ("_applC" ("_position" Node)
###   ("_cargs" ("_position" A\<^sub>2)
###     ("_cargs" ("_position" a)
###       ("_applC" ("_position" Node)
###         ("_cargs" ("_position" B)
###           ("_cargs" ("_position" b) ("_position" CD))))))))))))))
###                         ("_case1" ("_position" GT)
###                           ("\<^const>HOL.If"
###                             ("\<^const>HOL.eq" ("_position" B)
###                               ("_position" Leaf))
###                             ("_applC" ("_position" Node)
###                               ("_cargs" ("_position" A)
###                                 ("_cargs" ("_position" a)
###                                   ("_applC" ("_position" Node)
###                                     ("_cargs" ("_position" B)
### ("_cargs" ("_position" b) ("_position" CD)))))))
###                             ("_case_syntax"
###                               ("_applC" ("_position" splay)
###                                 ("_cargs" ("_position" x) ("_position" B)))
###                               ("_case1"
###                                 ("_applC" ("_position" Node)
###                                   ("_cargs" ("_position" B\<^sub>1)
###                                     ("_cargs" ("_position" b')
### ("_position" B\<^sub>2))))
###                                 ("_applC" ("_position" Node)
###                                   ("_cargs"
###                                     ("_applC" ("_position" Node)
### ("_cargs" ("_position" A)
###   ("_cargs" ("_position" a) ("_position" B\<^sub>1))))
###                                     ("_cargs" ("_position" b')
### ("_applC" ("_position" Node)
###   ("_cargs" ("_position" B\<^sub>2)
###     ("_cargs" ("_position" b) ("_position" CD))))))))))))))))))
###           ("_case1" ("_position" GT)
###             ("_case_syntax" ("_position" CD)
###               ("_case2"
###                 ("_case1" ("_position" Leaf)
###                   ("_applC" ("_position" Node)
###                     ("_cargs" ("_position" AB)
###                       ("_cargs" ("_position" b) ("_position" CD)))))
###                 ("_case1"
###                   ("_applC" ("_position" Node)
###                     ("_cargs" ("_position" C)
###                       ("_cargs" ("_position" c) ("_position" D))))
###                   ("_case_syntax"
###                     ("_applC" ("_position" cmp)
###                       ("_cargs" ("_position" x) ("_position" c)))
###                     ("_case2"
###                       ("_case1" ("_position" EQ)
###                         ("_applC" ("_position" Node)
###                           ("_cargs"
###                             ("_applC" ("_position" Node)
###                               ("_cargs" ("_position" AB)
###                                 ("_cargs" ("_position" b) ("_position" C))))
###                             ("_cargs" ("_position" c) ("_position" D)))))
###                       ("_case1" ("_position" LT)
###                         ("\<^const>HOL.If"
###                           ("\<^const>HOL.eq" ("_position" C)
###                             ("_position" Leaf))
###                           ("_applC" ("_position" Node)
###                             ("_cargs"
###                               ("_applC" ("_position" Node)
###                                 ("_cargs" ("_position" AB)
###                                   ("_cargs" ("_position" b)
###                                     ("_position" C))))
###                               ("_cargs" ("_position" c) ("_position" D))))
###                           ("_case_syntax"
###                             ("_applC" ("_position" splay)
###                               ("_cargs" ("_position" x) ("_position" C)))
###                             ("_case2"
###                               ("_case1"
###                                 ("_applC" ("_position" Node)
###                                   ("_cargs" ("_position" C\<^sub>1)
###                                     ("_cargs" ("_position" c')
### ("_position" C\<^sub>2))))
###                                 ("_applC" ("_position" Node)
###                                   ("_cargs"
###                                     ("_applC" ("_position" Node)
### ("_cargs" ("_position" AB)
###   ("_cargs" ("_position" b) ("_position" C\<^sub>1))))
###                                     ("_cargs" ("_position" c')
### ("_applC" ("_position" Node)
###   ("_cargs" ("_position" C\<^sub>2)
###     ("_cargs" ("_position" c) ("_position" D))))))))
###                               ("_case1" ("_position" GT)
###                                 ("\<^const>HOL.If"
###                                   ("\<^const>HOL.eq" ("_position" D)
###                                     ("_position" Leaf))
###                                   ("_applC" ("_position" Node)
###                                     ("_cargs"
### ("_applC" ("_position" Node)
###   ("_cargs" ("_position" AB) ("_cargs" ("_position" b) ("_position" C))))
### ("_cargs" ("_position" c) ("_position" D))))
###                                   ("_case_syntax"
###                                     ("_applC" ("_position" splay)
### ("_cargs" ("_position" x) ("_position" D)))
###                                     ("_case1"
### ("_applC" ("_position" Node)
###   ("_cargs" ("_position" D\<^sub>1)
###     ("_cargs" ("_position" d) ("_position" D\<^sub>2))))
### ("_applC" ("_position" Node)
###   ("_cargs"
###     ("_applC" ("_position" Node)
###       ("_cargs"
###         ("_applC" ("_position" Node)
###           ("_cargs" ("_position" AB)
###             ("_cargs" ("_position" b) ("_position" C))))
###         ("_cargs" ("_position" c) ("_position" D\<^sub>1))))
###     ("_cargs" ("_position" d) ("_position" D\<^sub>2)))))))))))))))))))))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("_applC" ("_position" splay)
###       ("_cargs" ("_position" x)
###         ("_applC" ("_position" Node)
###           ("_cargs" ("_position" AB)
###             ("_cargs" ("_position" b) ("_position" CD))))))
###     ("_case_syntax"
###       ("_applC" ("_position" cmp)
###         ("_cargs" ("_position" x) ("_position" b)))
###       ("_case2"
###         ("_case1" ("_position" EQ)
###           ("_applC" ("_position" Node)
###             ("_cargs" ("_position" AB)
###               ("_cargs" ("_position" b) ("_position" CD)))))
###         ("_case2"
###           ("_case1" ("_position" LT)
###             ("_case_syntax" ("_position" AB)
###               ("_case2"
###                 ("_case1" ("_position" Leaf)
###                   ("_applC" ("_position" Node)
###                     ("_cargs" ("_position" AB)
###                       ("_cargs" ("_position" b) ("_position" CD)))))
###                 ("_case1"
###                   ("_applC" ("_position" Node)
###                     ("_cargs" ("_position" A)
###                       ("_cargs" ("_position" a) ("_position" B))))
###                   ("_case_syntax"
###                     ("_applC" ("_position" cmp)
###                       ("_cargs" ("_position" x) ("_position" a)))
###                     ("_case2"
###                       ("_case1" ("_position" EQ)
###                         ("_applC" ("_position" Node)
###                           ("_cargs" ("_position" A)
###                             ("_cargs" ("_position" a)
###                               ("_applC" ("_position" Node)
###                                 ("_cargs" ("_position" B)
###                                   ("_cargs" ("_position" b)
###                                     ("_position" CD))))))))
###                       ("_case1" ("_position" LT)
###                         ("\<^const>HOL.If"
###                           ("\<^const>HOL.eq" ("_position" A)
###                             ("_position" Leaf))
###                           ("_applC" ("_position" Node)
###                             ("_cargs" ("_position" A)
###                               ("_cargs" ("_position" a)
###                                 ("_applC" ("_position" Node)
###                                   ("_cargs" ("_position" B)
###                                     ("_cargs" ("_position" b)
### ("_position" CD)))))))
###                           ("_case_syntax"
###                             ("_applC" ("_position" splay)
###                               ("_cargs" ("_position" x) ("_position" A)))
###                             ("_case2"
###                               ("_case1"
###                                 ("_applC" ("_position" Node)
###                                   ("_cargs" ("_position" A\<^sub>1)
###                                     ("_cargs" ("_position" a')
### ("_position" A\<^sub>2))))
###                                 ("_applC" ("_position" Node)
###                                   ("_cargs" ("_position" A\<^sub>1)
###                                     ("_cargs" ("_position" a')
### ("_applC" ("_position" Node)
###   ("_cargs" ("_position" A\<^sub>2)
###     ("_cargs" ("_position" a)
###       ("_applC" ("_position" Node)
###         ("_cargs" ("_position" B)
###           ("_cargs" ("_position" b) ("_position" CD)))))))))))
###                               ("_case1" ("_position" GT)
###                                 ("\<^const>HOL.If"
###                                   ("\<^const>HOL.eq" ("_position" B)
###                                     ("_position" Leaf))
###                                   ("_applC" ("_position" Node)
###                                     ("_cargs" ("_position" A)
### ("_cargs" ("_position" a)
###   ("_applC" ("_position" Node)
###     ("_cargs" ("_position" B)
###       ("_cargs" ("_position" b) ("_position" CD)))))))
###                                   ("_case_syntax"
###                                     ("_applC" ("_position" splay)
### ("_cargs" ("_position" x) ("_position" B)))
###                                     ("_case1"
### ("_applC" ("_position" Node)
###   ("_cargs" ("_position" B\<^sub>1)
###     ("_cargs" ("_position" b') ("_position" B\<^sub>2))))
### ("_applC" ("_position" Node)
###   ("_cargs"
###     ("_applC" ("_position" Node)
###       ("_cargs" ("_position" A)
###         ("_cargs" ("_position" a) ("_position" B\<^sub>1))))
###     ("_cargs" ("_position" b')
###       ("_applC" ("_position" Node)
###         ("_cargs" ("_position" B\<^sub>2)
###           ("_cargs" ("_position" b) ("_position" CD)))))))))))))))))))))
###           ("_case1" ("_position" GT)
###             ("_case_syntax" ("_position" CD)
###               ("_case2"
###                 ("_case1" ("_position" Leaf)
###                   ("_applC" ("_position" Node)
###                     ("_cargs" ("_position" AB)
###                       ("_cargs" ("_position" b) ("_position" CD)))))
###                 ("_case1"
###                   ("_applC" ("_position" Node)
###                     ("_cargs" ("_position" C)
###                       ("_cargs" ("_position" c) ("_position" D))))
###                   ("_case_syntax"
###                     ("_applC" ("_position" cmp)
###                       ("_cargs" ("_position" x) ("_position" c)))
###                     ("_case2"
###                       ("_case1" ("_position" EQ)
###                         ("_applC" ("_position" Node)
###                           ("_cargs"
###                             ("_applC" ("_position" Node)
###                               ("_cargs" ("_position" AB)
###                                 ("_cargs" ("_position" b) ("_position" C))))
###                             ("_cargs" ("_position" c) ("_position" D)))))
###                       ("_case2"
###                         ("_case1" ("_position" LT)
###                           ("\<^const>HOL.If"
###                             ("\<^const>HOL.eq" ("_position" C)
###                               ("_position" Leaf))
###                             ("_applC" ("_position" Node)
###                               ("_cargs"
###                                 ("_applC" ("_position" Node)
###                                   ("_cargs" ("_position" AB)
###                                     ("_cargs" ("_position" b)
### ("_position" C))))
###                                 ("_cargs" ("_position" c) ("_position" D))))
###                             ("_case_syntax"
###                               ("_applC" ("_position" splay)
###                                 ("_cargs" ("_position" x) ("_position" C)))
###                               ("_case1"
###                                 ("_applC" ("_position" Node)
###                                   ("_cargs" ("_position" C\<^sub>1)
###                                     ("_cargs" ("_position" c')
### ("_position" C\<^sub>2))))
###                                 ("_applC" ("_position" Node)
###                                   ("_cargs"
###                                     ("_applC" ("_position" Node)
### ("_cargs" ("_position" AB)
###   ("_cargs" ("_position" b) ("_position" C\<^sub>1))))
###                                     ("_cargs" ("_position" c')
### ("_applC" ("_position" Node)
###   ("_cargs" ("_position" C\<^sub>2)
###     ("_cargs" ("_position" c) ("_position" D)))))))))))
###                         ("_case1" ("_position" GT)
###                           ("\<^const>HOL.If"
###                             ("\<^const>HOL.eq" ("_position" D)
###                               ("_position" Leaf))
###                             ("_applC" ("_position" Node)
###                               ("_cargs"
###                                 ("_applC" ("_position" Node)
###                                   ("_cargs" ("_position" AB)
###                                     ("_cargs" ("_position" b)
### ("_position" C))))
###                                 ("_cargs" ("_position" c) ("_position" D))))
###                             ("_case_syntax"
###                               ("_applC" ("_position" splay)
###                                 ("_cargs" ("_position" x) ("_position" D)))
###                               ("_case1"
###                                 ("_applC" ("_position" Node)
###                                   ("_cargs" ("_position" D\<^sub>1)
###                                     ("_cargs" ("_position" d)
### ("_position" D\<^sub>2))))
###                                 ("_applC" ("_position" Node)
###                                   ("_cargs"
###                                     ("_applC" ("_position" Node)
### ("_cargs"
###   ("_applC" ("_position" Node)
###     ("_cargs" ("_position" AB) ("_cargs" ("_position" b) ("_position" C))))
###   ("_cargs" ("_position" c) ("_position" D\<^sub>1))))
###                                     ("_cargs" ("_position" d)
### ("_position" D\<^sub>2))))))))))))))))))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("_applC" ("_position" splay)
###       ("_cargs" ("_position" x)
###         ("_applC" ("_position" Node)
###           ("_cargs" ("_position" AB)
###             ("_cargs" ("_position" b) ("_position" CD))))))
###     ("_case_syntax"
###       ("_applC" ("_position" cmp)
###         ("_cargs" ("_position" x) ("_position" b)))
###       ("_case2"
###         ("_case1" ("_position" EQ)
###           ("_applC" ("_position" Node)
###             ("_cargs" ("_position" AB)
###               ("_cargs" ("_position" b) ("_position" CD)))))
###         ("_case2"
###           ("_case1" ("_position" LT)
###             ("_case_syntax" ("_position" AB)
###               ("_case2"
###                 ("_case1" ("_position" Leaf)
###                   ("_applC" ("_position" Node)
###                     ("_cargs" ("_position" AB)
###                       ("_cargs" ("_position" b) ("_position" CD)))))
###                 ("_case1"
###                   ("_applC" ("_position" Node)
###                     ("_cargs" ("_position" A)
###                       ("_cargs" ("_position" a) ("_position" B))))
###                   ("_case_syntax"
###                     ("_applC" ("_position" cmp)
###                       ("_cargs" ("_position" x) ("_position" a)))
###                     ("_case2"
###                       ("_case1" ("_position" EQ)
###                         ("_applC" ("_position" Node)
###                           ("_cargs" ("_position" A)
###                             ("_cargs" ("_position" a)
###                               ("_applC" ("_position" Node)
###                                 ("_cargs" ("_position" B)
###                                   ("_cargs" ("_position" b)
###                                     ("_position" CD))))))))
###                       ("_case2"
###                         ("_case1" ("_position" LT)
###                           ("\<^const>HOL.If"
###                             ("\<^const>HOL.eq" ("_position" A)
###                               ("_position" Leaf))
###                             ("_applC" ("_position" Node)
###                               ("_cargs" ("_position" A)
###                                 ("_cargs" ("_position" a)
###                                   ("_applC" ("_position" Node)
###                                     ("_cargs" ("_position" B)
### ("_cargs" ("_position" b) ("_position" CD)))))))
###                             ("_case_syntax"
###                               ("_applC" ("_position" splay)
###                                 ("_cargs" ("_position" x) ("_position" A)))
###                               ("_case1"
###                                 ("_applC" ("_position" Node)
###                                   ("_cargs" ("_position" A\<^sub>1)
###                                     ("_cargs" ("_position" a')
### ("_position" A\<^sub>2))))
###                                 ("_applC" ("_position" Node)
###                                   ("_cargs" ("_position" A\<^sub>1)
###                                     ("_cargs" ("_position" a')
### ("_applC" ("_position" Node)
###   ("_cargs" ("_position" A\<^sub>2)
###     ("_cargs" ("_position" a)
###       ("_applC" ("_position" Node)
###         ("_cargs" ("_position" B)
###           ("_cargs" ("_position" b) ("_position" CD))))))))))))))
###                         ("_case1" ("_position" GT)
###                           ("\<^const>HOL.If"
###                             ("\<^const>HOL.eq" ("_position" B)
###                               ("_position" Leaf))
###                             ("_applC" ("_position" Node)
###                               ("_cargs" ("_position" A)
###                                 ("_cargs" ("_position" a)
###                                   ("_applC" ("_position" Node)
###                                     ("_cargs" ("_position" B)
### ("_cargs" ("_position" b) ("_position" CD)))))))
###                             ("_case_syntax"
###                               ("_applC" ("_position" splay)
###                                 ("_cargs" ("_position" x) ("_position" B)))
###                               ("_case1"
###                                 ("_applC" ("_position" Node)
###                                   ("_cargs" ("_position" B\<^sub>1)
###                                     ("_cargs" ("_position" b')
### ("_position" B\<^sub>2))))
###                                 ("_applC" ("_position" Node)
###                                   ("_cargs"
###                                     ("_applC" ("_position" Node)
### ("_cargs" ("_position" A)
###   ("_cargs" ("_position" a) ("_position" B\<^sub>1))))
###                                     ("_cargs" ("_position" b')
### ("_applC" ("_position" Node)
###   ("_cargs" ("_position" B\<^sub>2)
###     ("_cargs" ("_position" b) ("_position" CD))))))))))))))))))
###           ("_case1" ("_position" GT)
###             ("_case_syntax" ("_position" CD)
###               ("_case2"
###                 ("_case1" ("_position" Leaf)
###                   ("_applC" ("_position" Node)
###                     ("_cargs" ("_position" AB)
###                       ("_cargs" ("_position" b) ("_position" CD)))))
###                 ("_case1"
###                   ("_applC" ("_position" Node)
###                     ("_cargs" ("_position" C)
###                       ("_cargs" ("_position" c) ("_position" D))))
###                   ("_case_syntax"
###                     ("_applC" ("_position" cmp)
###                       ("_cargs" ("_position" x) ("_position" c)))
###                     ("_case2"
###                       ("_case1" ("_position" EQ)
###                         ("_applC" ("_position" Node)
###                           ("_cargs"
###                             ("_applC" ("_position" Node)
###                               ("_cargs" ("_position" AB)
###                                 ("_cargs" ("_position" b) ("_position" C))))
###                             ("_cargs" ("_position" c) ("_position" D)))))
###                       ("_case2"
###                         ("_case1" ("_position" LT)
###                           ("\<^const>HOL.If"
###                             ("\<^const>HOL.eq" ("_position" C)
###                               ("_position" Leaf))
###                             ("_applC" ("_position" Node)
###                               ("_cargs"
###                                 ("_applC" ("_position" Node)
###                                   ("_cargs" ("_position" AB)
###                                     ("_cargs" ("_position" b)
### ("_position" C))))
###                                 ("_cargs" ("_position" c) ("_position" D))))
###                             ("_case_syntax"
###                               ("_applC" ("_position" splay)
###                                 ("_cargs" ("_position" x) ("_position" C)))
###                               ("_case1"
###                                 ("_applC" ("_position" Node)
###                                   ("_cargs" ("_position" C\<^sub>1)
###                                     ("_cargs" ("_position" c')
### ("_position" C\<^sub>2))))
###                                 ("_applC" ("_position" Node)
###                                   ("_cargs"
###                                     ("_applC" ("_position" Node)
### ("_cargs" ("_position" AB)
###   ("_cargs" ("_position" b) ("_position" C\<^sub>1))))
###                                     ("_cargs" ("_position" c')
### ("_applC" ("_position" Node)
###   ("_cargs" ("_position" C\<^sub>2)
###     ("_cargs" ("_position" c) ("_position" D)))))))))))
###                         ("_case1" ("_position" GT)
###                           ("\<^const>HOL.If"
###                             ("\<^const>HOL.eq" ("_position" D)
###                               ("_position" Leaf))
###                             ("_applC" ("_position" Node)
###                               ("_cargs"
###                                 ("_applC" ("_position" Node)
###                                   ("_cargs" ("_position" AB)
###                                     ("_cargs" ("_position" b)
### ("_position" C))))
###                                 ("_cargs" ("_position" c) ("_position" D))))
###                             ("_case_syntax"
###                               ("_applC" ("_position" splay)
###                                 ("_cargs" ("_position" x) ("_position" D)))
###                               ("_case1"
###                                 ("_applC" ("_position" Node)
###                                   ("_cargs" ("_position" D\<^sub>1)
###                                     ("_cargs" ("_position" d)
### ("_position" D\<^sub>2))))
###                                 ("_applC" ("_position" Node)
###                                   ("_cargs"
###                                     ("_applC" ("_position" Node)
### ("_cargs"
###   ("_applC" ("_position" Node)
###     ("_cargs" ("_position" AB) ("_cargs" ("_position" b) ("_position" C))))
###   ("_cargs" ("_position" c) ("_position" D\<^sub>1))))
###                                     ("_cargs" ("_position" d)
### ("_position" D\<^sub>2))))))))))))))))))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 86 of "$AFP/Splay_Tree/Splay_Tree.thy") produces 3 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("_applC" ("_position" insert)
###       ("_cargs" ("_position" x) ("_position" t)))
###     ("\<^const>HOL.If"
###       ("\<^const>HOL.eq" ("_position" t) ("_position" Leaf))
###       ("_applC" ("_position" Node)
###         ("_cargs" ("_position" Leaf)
###           ("_cargs" ("_position" x) ("_position" Leaf))))
###       ("_case_syntax"
###         ("_applC" ("_position" splay)
###           ("_cargs" ("_position" x) ("_position" t)))
###         ("_case1"
###           ("_applC" ("_position" Node)
###             ("_cargs" ("_position" l)
###               ("_cargs" ("_position" a) ("_position" r))))
###           ("_case_syntax"
###             ("_applC" ("_position" cmp)
###               ("_cargs" ("_position" x) ("_position" a)))
###             ("_case2"
###               ("_case1" ("_position" EQ)
###                 ("_applC" ("_position" Node)
###                   ("_cargs" ("_position" l)
###                     ("_cargs" ("_position" a) ("_position" r)))))
###               ("_case2"
###                 ("_case1" ("_position" LT)
###                   ("_applC" ("_position" Node)
###                     ("_cargs" ("_position" l)
###                       ("_cargs" ("_position" x)
###                         ("_applC" ("_position" Node)
###                           ("_cargs" ("_position" Leaf)
###                             ("_cargs" ("_position" a) ("_position" r))))))))
###                 ("_case1" ("_position" GT)
###                   ("_applC" ("_position" Node)
###                     ("_cargs"
###                       ("_applC" ("_position" Node)
###                         ("_cargs" ("_position" l)
###                           ("_cargs" ("_position" a) ("_position" Leaf))))
###                       ("_cargs" ("_position" x) ("_position" r)))))))))))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("_applC" ("_position" insert)
###       ("_cargs" ("_position" x) ("_position" t)))
###     ("\<^const>HOL.If"
###       ("\<^const>HOL.eq" ("_position" t) ("_position" Leaf))
###       ("_applC" ("_position" Node)
###         ("_cargs" ("_position" Leaf)
###           ("_cargs" ("_position" x) ("_position" Leaf))))
###       ("_case_syntax"
###         ("_applC" ("_position" splay)
###           ("_cargs" ("_position" x) ("_position" t)))
###         ("_case2"
###           ("_case1"
###             ("_applC" ("_position" Node)
###               ("_cargs" ("_position" l)
###                 ("_cargs" ("_position" a) ("_position" r))))
###             ("_case_syntax"
###               ("_applC" ("_position" cmp)
###                 ("_cargs" ("_position" x) ("_position" a)))
###               ("_case1" ("_position" EQ)
###                 ("_applC" ("_position" Node)
###                   ("_cargs" ("_position" l)
###                     ("_cargs" ("_position" a) ("_position" r)))))))
###           ("_case2"
###             ("_case1" ("_position" LT)
###               ("_applC" ("_position" Node)
###                 ("_cargs" ("_position" l)
###                   ("_cargs" ("_position" x)
###                     ("_applC" ("_position" Node)
###                       ("_cargs" ("_position" Leaf)
###                         ("_cargs" ("_position" a) ("_position" r))))))))
###             ("_case1" ("_position" GT)
###               ("_applC" ("_position" Node)
###                 ("_cargs"
###                   ("_applC" ("_position" Node)
###                     ("_cargs" ("_position" l)
###                       ("_cargs" ("_position" a) ("_position" Leaf))))
###                   ("_cargs" ("_position" x) ("_position" r)))))))))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("_applC" ("_position" insert)
###       ("_cargs" ("_position" x) ("_position" t)))
###     ("\<^const>HOL.If"
###       ("\<^const>HOL.eq" ("_position" t) ("_position" Leaf))
###       ("_applC" ("_position" Node)
###         ("_cargs" ("_position" Leaf)
###           ("_cargs" ("_position" x) ("_position" Leaf))))
###       ("_case_syntax"
###         ("_applC" ("_position" splay)
###           ("_cargs" ("_position" x) ("_position" t)))
###         ("_case2"
###           ("_case1"
###             ("_applC" ("_position" Node)
###               ("_cargs" ("_position" l)
###                 ("_cargs" ("_position" a) ("_position" r))))
###             ("_case_syntax"
###               ("_applC" ("_position" cmp)
###                 ("_cargs" ("_position" x) ("_position" a)))
###               ("_case2"
###                 ("_case1" ("_position" EQ)
###                   ("_applC" ("_position" Node)
###                     ("_cargs" ("_position" l)
###                       ("_cargs" ("_position" a) ("_position" r)))))
###                 ("_case1" ("_position" LT)
###                   ("_applC" ("_position" Node)
###                     ("_cargs" ("_position" l)
###                       ("_cargs" ("_position" x)
###                         ("_applC" ("_position" Node)
###                           ("_cargs" ("_position" Leaf)
###                             ("_cargs" ("_position" a)
###                               ("_position" r)))))))))))
###           ("_case1" ("_position" GT)
###             ("_applC" ("_position" Node)
###               ("_cargs"
###                 ("_applC" ("_position" Node)
###                   ("_cargs" ("_position" l)
###                     ("_cargs" ("_position" a) ("_position" Leaf))))
###                 ("_cargs" ("_position" x) ("_position" r))))))))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
Found termination order: "{}"
Found termination order: "size <*mlex*> {}"
### theory "Splay_Tree.Splay_Tree"
### 0.957s elapsed time, 1.618s cpu time, 0.162s GC time
Loading theory "Draft.Splay_Tree_Analysis_Base" (required by "Draft.Splay_Tree_AnalysisMoreTemplates" via "Draft.Splay_Tree_Analysis")
Found termination order: "size <*mlex*> {}"
Found termination order: "(%p. size (snd p)) <*mlex*> {}"
Found termination order: "size <*mlex*> {}"
Found termination order: "{}"
### Missing patterns in function definition:
### !!v. exec (Splay v) [] = undefined
### !!v va vc vd. exec (Splay v) (va # vc # vd) = undefined
### !!v. exec (Insert v) [] = undefined
### (7 more)
Found termination order: "{}"
### Missing patterns in function definition:
### !!v. cost (Splay v) [] = undefined
### !!v va vc vd. cost (Splay v) (va # vc # vd) = undefined
### !!v. cost (Insert v) [] = undefined
### (7 more)
Found termination order: "{}"
### theory "Draft.Splay_Tree_Analysis_Base"
### 1.454s elapsed time, 1.691s cpu time, 0.172s GC time
Loading theory "Draft.Splay_Tree_Analysis" (required by "Draft.Splay_Tree_AnalysisMoreTemplates")
### Missing patterns in function definition:
### !!v. U (Splay v) [] = undefined
### !!v va vc vd. U (Splay v) (va # vc # vd) = undefined
### !!v. U (Insert v) [] = undefined
### (7 more)
Found termination order: "{}"
### theory "Draft.Splay_Tree_Analysis"
### 0.557s elapsed time, 0.651s cpu time, 0.064s GC time
Loading theory "Draft.Splay_Tree_AnalysisMoreTemplates"
val templateLemmas =
   [("Splay_Tree_Analysis_Base.T_splay_simps",
     "T_splay ?a \<langle>?l, ?a, ?r\<rangle> = 1",
     template_equation
      (template_app
        (template_app (template_hole 2, template_var 2),
         template_app
          (template_app
            (template_app (template_hole 1, template_var 1),
             template_var 2),
           template_var 0)),
       template_hole 0)),
    ("Splay_Tree_Analysis.ppos", "bst ?s ==> 0 <= \<Phi> ?s",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 4, template_hole 3),
              template_var 0)
            )],
       template_inequation
        (less_equals, template_hole 1,
         template_app (template_hole 0, template_var 0)))),
    ("Splay_Tree_Analysis.inv_state",
     "Splay_Tree_Analysis.wf ?ot ==> bst (state ?ot)",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 5, template_hole 4),
              template_var 0)
            )],
       template_predicate
        (
           template_app
            (template_app (template_hole 3, template_hole 2),
             template_app
              (template_app (template_hole 1, template_hole 0),
               template_var 0))
           ))),
    ("Splay_Tree_Analysis_Base.T_splay_simps",
     "?b < ?x ==>
      T_splay ?x \<langle>?AB, ?b, \<langle>\<rangle>\<rangle> = 1",
     template_implication
      ([template_inequation (less_than, template_var 2, template_var 1)],
       template_equation
        (template_app
          (template_app (template_hole 3, template_var 1),
           template_app
            (template_app
              (template_app (template_hole 2, template_var 0),
               template_var 2),
             template_hole 1)),
         template_hole 0))),
    ("Splay_Tree_Analysis_Base.T_splay_simps",
     "?x < ?b ==>
      T_splay ?x \<langle>\<langle>\<rangle>, ?b, ?CD\<rangle> = 1",
     template_implication
      ([template_inequation (less_than, template_var 2, template_var 1)],
       template_equation
        (template_app
          (template_app (template_hole 3, template_var 2),
           template_app
            (template_app
              (template_app (template_hole 2, template_hole 1),
               template_var 1),
             template_var 0)),
         template_hole 0))),
    ("Splay_Tree_Analysis.t_sum_le_U_sum",
     "Splay_Tree_Analysis.wf ?ot ==> cost_sum ?ot <= U_sum ?ot",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 7, template_hole 6),
              template_var 0)
            )],
       template_inequation
        (less_equals,
         template_app
          (template_app
            (template_app (template_hole 4, template_hole 3),
             template_hole 2),
           template_var 0),
         template_app
          (template_app
            (template_app (template_hole 1, template_hole 3),
             template_hole 0),
           template_var 0)))),
    ("Splay_Tree_Analysis.t_sum_le_a_sum",
     "Splay_Tree_Analysis.wf ?ot ==> cost_sum ?ot <= acost_sum ?ot",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 7, template_hole 6),
              template_var 0)
            )],
       template_inequation
        (less_equals,
         template_app
          (template_app
            (template_app (template_hole 4, template_hole 3),
             template_hole 2),
           template_var 0),
         template_app
          (template_app
            (template_app
              (template_app (template_hole 1, template_hole 3),
               template_hole 2),
             template_hole 0),
           template_var 0)))),
    ("Splay_Tree_Analysis.a_sum_le_U_sum",
     "Splay_Tree_Analysis.wf ?ot ==> acost_sum ?ot <= U_sum ?ot",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 8, template_hole 7),
              template_var 0)
            )],
       template_inequation
        (less_equals,
         template_app
          (template_app
            (template_app
              (template_app (template_hole 5, template_hole 4),
               template_hole 3),
             template_hole 2),
           template_var 0),
         template_app
          (template_app
            (template_app (template_hole 1, template_hole 4),
             template_hole 0),
           template_var 0)))),
    ("Splay_Tree_Analysis.A_splay_max_ub3",
     "A_splay_max ?t <= 3 * \<phi> ?t + 1",
     template_inequation
      (less_equals, template_app (template_hole 10, template_var 0),
       template_app
        (template_app
          (template_hole 9,
           template_app
            (template_app
              (template_hole 8,
               template_app
                (template_hole 7,
                 template_app (template_hole 6, template_hole 5))),
             template_app
              (template_app
                (template_hole 4,
                 template_app
                  (template_hole 7,
                   template_app (template_hole 3, template_hole 5))),
               template_app
                (template_hole 2,
                 template_app (template_hole 1, template_var 0))))),
         template_hole 0))),
    ("Splay_Tree_Analysis_Base.T_splay_simps",
     "?a < ?b ==>
      T_splay ?a \<langle>\<langle>?A, ?a, ?B\<rangle>, ?b, ?CD\<rangle> =
      1",
     template_implication
      ([template_inequation (less_than, template_var 4, template_var 3)],
       template_equation
        (template_app
          (template_app (template_hole 2, template_var 4),
           template_app
            (template_app
              (template_app
                (template_hole 1,
                 template_app
                  (template_app
                    (template_app (template_hole 1, template_var 2),
                     template_var 4),
                   template_var 1)),
               template_var 3),
             template_var 0)),
         template_hole 0))),
    ("Splay_Tree_Analysis_Base.T_splay_simps",
     "?b < ?a ==>
      T_splay ?a \<langle>?AB, ?b, \<langle>?C, ?a, ?D\<rangle>\<rangle> =
      1",
     template_implication
      ([template_inequation (less_than, template_var 4, template_var 3)],
       template_equation
        (template_app
          (template_app (template_hole 2, template_var 3),
           template_app
            (template_app
              (template_app (template_hole 1, template_var 2),
               template_var 4),
             template_app
              (template_app
                (template_app (template_hole 1, template_var 1),
                 template_var 3),
               template_var 0))),
         template_hole 0))),
    ("Splay_Tree_Analysis.t_sum_a_sum",
     "Splay_Tree_Analysis.wf ?ot ==>
      cost_sum ?ot = acost_sum ?ot - \<Phi> (state ?ot)",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 9, template_hole 8),
              template_var 0)
            )],
       template_equation
        (template_app
          (template_app
            (template_app (template_hole 6, template_hole 5),
             template_hole 4),
           template_var 0),
         template_app
          (template_app
            (template_hole 3,
             template_app
              (template_app
                (template_app
                  (template_app (template_hole 2, template_hole 5),
                   template_hole 4),
                 template_hole 1),
               template_var 0)),
           template_app
            (template_hole 1,
             template_app
              (template_app (template_hole 0, template_hole 5),
               template_var 0)))))),
    ("Splay_Tree_Analysis.inv_exec",
     "[| Ball (set ?ss) bst; length ?ss = arity ?f |]
      ==> bst (exec ?f ?ss)",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_hole 7,
                template_app (template_hole 6, template_var 1)),
              t_empty)
            ),
        template_equation
         (template_app (template_hole 2, template_var 1),
          template_app (template_hole 1, template_var 0))],
       template_predicate
        (
           template_app
            (template_app (template_hole 5, template_hole 4),
             template_app
              (template_app (template_hole 0, template_var 0),
               template_var 1))
           ))),
    ("Splay_Tree_Analysis.A_splay_ub3",
     "bst ?t ==> A_splay ?x ?t <= 3 * \<phi> ?t + 1",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 13, template_hole 12),
              template_var 1)
            )],
       template_inequation
        (less_equals,
         template_app
          (template_app (template_hole 10, template_var 0), template_var 1),
         template_app
          (template_app
            (template_hole 9,
             template_app
              (template_app
                (template_hole 8,
                 template_app
                  (template_hole 7,
                   template_app (template_hole 6, template_hole 5))),
               template_app
                (template_app
                  (template_hole 4,
                   template_app
                    (template_hole 7,
                     template_app (template_hole 3, template_hole 5))),
                 template_app
                  (template_hole 2,
                   template_app (template_hole 1, template_var 1))))),
           template_hole 0)))),
    ("Splay_Tree_Analysis.A_splay_max_ub",
     "?t ~= \<langle>\<rangle> ==>
      A_splay_max ?t <= 3 * (\<phi> ?t - 1) + 1",
     template_implication
      ([template_negation
         (template_equation (template_var 0, template_hole 13))],
       template_inequation
        (less_equals, template_app (template_hole 11, template_var 0),
         template_app
          (template_app
            (template_hole 10,
             template_app
              (template_app
                (template_hole 9,
                 template_app
                  (template_hole 8,
                   template_app (template_hole 7, template_hole 6))),
               template_app
                (template_app
                  (template_hole 5,
                   template_app
                    (template_app
                      (template_hole 4,
                       template_app
                        (template_hole 8,
                         template_app (template_hole 3, template_hole 6))),
                     template_app
                      (template_hole 2,
                       template_app (template_hole 1, template_var 0)))),
                 template_hole 0))),
           template_hole 0)))),
    ("Splay_Tree_Analysis.a_le_U",
     "[| Ball (set ?ss) bst; length ?ss = arity ?f |]
      ==> acost ?f ?ss <= U ?f ?ss",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_hole 12,
                template_app (template_hole 11, template_var 1)),
              t_empty)
            ),
        template_equation
         (template_app (template_hole 7, template_var 1),
          template_app (template_hole 6, template_var 0))],
       template_inequation
        (less_equals,
         template_app
          (template_app
            (template_app
              (template_app
                (template_app (template_hole 4, template_hole 3),
                 template_hole 2),
               template_hole 1),
             template_var 0),
           template_var 1),
         template_app
          (template_app (template_hole 0, template_var 0),
           template_var 1)))),
    ("Splay_Tree_Analysis_Base.T_splay_simps",
     "[| ?b < ?x; ?c < ?x |]
      ==> T_splay ?x
           \<langle>?AB, ?b, \<langle>?C, ?c, ?D\<rangle>\<rangle> =
          (if ?D = \<langle>\<rangle> then 1 else T_splay ?x ?D + 1)",
     template_implication
      ([template_inequation (less_than, template_var 5, template_var 4),
        template_inequation (less_than, template_var 3, template_var 4)],
       template_implication
        ([template_predicate
           (
              template_app
               (template_app (template_hole 6, template_var 4),
                template_app
                 (template_app
                   (template_app (template_hole 5, template_var 2),
                    template_var 5),
                  template_app
                   (template_app
                     (template_app (template_hole 5, template_var 1),
                      template_var 3),
                    template_var 0)))
              )],
         template_predicate
          (
             template_app
              (template_app
                (template_app
                  (template_hole 4,
                   template_app
                    (template_app (template_hole 3, template_var 0),
                     template_hole 2)),
                 template_hole 1),
               template_app
                (template_app
                  (template_hole 0,
                   template_app
                    (template_app (template_hole 6, template_var 4),
                     template_var 0)),
                 template_hole 1))
             )))),
    ("Splay_Tree_Analysis_Base.T_splay_simps",
     "[| ?b < ?x; ?x < ?c |]
      ==> T_splay ?x
           \<langle>?AB, ?b, \<langle>?C, ?c, ?D\<rangle>\<rangle> =
          (if ?C = \<langle>\<rangle> then 1 else T_splay ?x ?C + 1)",
     template_implication
      ([template_inequation (less_than, template_var 5, template_var 4),
        template_inequation (less_than, template_var 4, template_var 3)],
       template_implication
        ([template_predicate
           (
              template_app
               (template_app (template_hole 6, template_var 4),
                template_app
                 (template_app
                   (template_app (template_hole 5, template_var 2),
                    template_var 5),
                  template_app
                   (template_app
                     (template_app (template_hole 5, template_var 1),
                      template_var 3),
                    template_var 0)))
              )],
         template_predicate
          (
             template_app
              (template_app
                (template_app
                  (template_hole 4,
                   template_app
                    (template_app (template_hole 3, template_var 1),
                     template_hole 2)),
                 template_hole 1),
               template_app
                (template_app
                  (template_hole 0,
                   template_app
                    (template_app (template_hole 6, template_var 4),
                     template_var 1)),
                 template_hole 1))
             )))),
    ("Splay_Tree_Analysis_Base.T_splay_simps",
     "[| ?x < ?a; ?x < ?b |]
      ==> T_splay ?x
           \<langle>\<langle>?A, ?a, ?B\<rangle>, ?b, ?CD\<rangle> =
          (if ?A = \<langle>\<rangle> then 1 else T_splay ?x ?A + 1)",
     template_implication
      ([template_inequation (less_than, template_var 5, template_var 4),
        template_inequation (less_than, template_var 5, template_var 3)],
       template_implication
        ([template_predicate
           (
              template_app
               (template_app (template_hole 6, template_var 5),
                template_app
                 (template_app
                   (template_app
                     (template_hole 5,
                      template_app
                       (template_app
                         (template_app (template_hole 5, template_var 2),
                          template_var 4),
                        template_var 1)),
                    template_var 3),
                  template_var 0))
              )],
         template_predicate
          (
             template_app
              (template_app
                (template_app
                  (template_hole 4,
                   template_app
                    (template_app (template_hole 3, template_var 2),
                     template_hole 2)),
                 template_hole 1),
               template_app
                (template_app
                  (template_hole 0,
                   template_app
                    (template_app (template_hole 6, template_var 5),
                     template_var 2)),
                 template_hole 1))
             )))),
    ("Splay_Tree_Analysis_Base.T_splay_simps",
     "[| ?x < ?b; ?a < ?x |]
      ==> T_splay ?x
           \<langle>\<langle>?A, ?a, ?B\<rangle>, ?b, ?CD\<rangle> =
          (if ?B = \<langle>\<rangle> then 1 else T_splay ?x ?B + 1)",
     template_implication
      ([template_inequation (less_than, template_var 5, template_var 4),
        template_inequation (less_than, template_var 3, template_var 5)],
       template_implication
        ([template_predicate
           (
              template_app
               (template_app (template_hole 6, template_var 5),
                template_app
                 (template_app
                   (template_app
                     (template_hole 5,
                      template_app
                       (template_app
                         (template_app (template_hole 5, template_var 2),
                          template_var 3),
                        template_var 1)),
                    template_var 4),
                  template_var 0))
              )],
         template_predicate
          (
             template_app
              (template_app
                (template_app
                  (template_hole 4,
                   template_app
                    (template_app (template_hole 3, template_var 1),
                     template_hole 2)),
                 template_hole 1),
               template_app
                (template_app
                  (template_hole 0,
                   template_app
                    (template_app (template_hole 6, template_var 5),
                     template_var 1)),
                 template_hole 1))
             )))),
    ("Splay_Tree_Analysis.A_splay_ub2",
     "[| bst ?t; ?x : set_tree ?t |]
      ==> A_splay ?x ?t <= 3 * (\<phi> ?t - 1) + 1",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 16, template_hole 15),
              template_var 1)
            ),
        template_predicate
         (
            template_app
             (template_app (template_hole 14, template_var 0),
              template_app (template_hole 13, template_var 1))
            )],
       template_inequation
        (less_equals,
         template_app
          (template_app (template_hole 11, template_var 0), template_var 1),
         template_app
          (template_app
            (template_hole 10,
             template_app
              (template_app
                (template_hole 9,
                 template_app
                  (template_hole 8,
                   template_app (template_hole 7, template_hole 6))),
               template_app
                (template_app
                  (template_hole 5,
                   template_app
                    (template_app
                      (template_hole 4,
                       template_app
                        (template_hole 8,
                         template_app (template_hole 3, template_hole 6))),
                     template_app
                      (template_hole 2,
                       template_app (template_hole 1, template_var 1)))),
                 template_hole 0))),
           template_hole 0)))),
    ("Splay_Tree_Analysis_Base.ex_in_set_tree",
     "[| ?t ~= \<langle>\<rangle>; bst ?t |]
      ==> EX x':set_tree ?t.
             splay x' ?t = splay ?x ?t & T_splay x' ?t = T_splay ?x ?t",
     template_implication
      ([template_negation
         (template_equation (template_var 1, template_hole 8)),
        template_predicate
         (
            template_app
             (template_app (template_hole 7, template_hole 6),
              template_var 1)
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 5,
               template_app (template_hole 4, template_var 1)),
             t_empty)
           ))),
    ("Splay_Tree_Analysis.amor_delete",
     "bst ?t ==>
      real (T_delete ?a ?t) + \<Phi> (delete ?a ?t) - \<Phi> ?t
      <= 6 * \<phi> ?t + 3",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 15, template_hole 14),
              template_var 1)
            )],
       template_inequation
        (less_equals,
         template_app
          (template_app
            (template_hole 12,
             template_app
              (template_app
                (template_hole 11,
                 template_app
                  (template_hole 10,
                   template_app
                    (template_app (template_hole 9, template_var 0),
                     template_var 1))),
               template_app
                (template_hole 8,
                 template_app
                  (template_app (template_hole 7, template_var 0),
                   template_var 1)))),
           template_app (template_hole 8, template_var 1)),
         template_app
          (template_app
            (template_hole 11,
             template_app
              (template_app
                (template_hole 6,
                 template_app
                  (template_hole 5,
                   template_app
                    (template_hole 4,
                     template_app (template_hole 3, template_hole 2)))),
               template_app
                (template_app
                  (template_hole 1,
                   template_app
                    (template_hole 5,
                     template_app (template_hole 4, template_hole 2))),
                 template_app
                  (template_hole 10,
                   template_app (template_hole 0, template_var 1))))),
           template_app
            (template_hole 5,
             template_app (template_hole 3, template_hole 2)))))),
    ("Splay_Tree_Analysis.amor_insert",
     "bst ?t ==>
      real (T_insert ?x ?t) + \<Phi> (Splay_Tree.insert ?x ?t) - \<Phi> ?t
      <= 4 * \<phi> ?t + 3",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 15, template_hole 14),
              template_var 1)
            )],
       template_inequation
        (less_equals,
         template_app
          (template_app
            (template_hole 12,
             template_app
              (template_app
                (template_hole 11,
                 template_app
                  (template_hole 10,
                   template_app
                    (template_app (template_hole 9, template_var 0),
                     template_var 1))),
               template_app
                (template_hole 8,
                 template_app
                  (template_app (template_hole 7, template_var 0),
                   template_var 1)))),
           template_app (template_hole 8, template_var 1)),
         template_app
          (template_app
            (template_hole 11,
             template_app
              (template_app
                (template_hole 6,
                 template_app
                  (template_hole 5,
                   template_app
                    (template_hole 4,
                     template_app (template_hole 4, template_hole 3)))),
               template_app
                (template_app
                  (template_hole 2,
                   template_app
                    (template_hole 5,
                     template_app (template_hole 4, template_hole 3))),
                 template_app
                  (template_hole 10,
                   template_app (template_hole 1, template_var 1))))),
           template_app
            (template_hole 5,
             template_app (template_hole 0, template_hole 3)))))),
    ("Splay_Tree_Analysis.U",
     "[| Ball (set ?ss) bst; length ?ss = arity ?f |]
      ==> real (cost ?f ?ss) + \<Phi> (exec ?f ?ss) -
          sum_list (map \<Phi> ?ss)
          <= U ?f ?ss",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_hole 16,
                template_app (template_hole 15, template_var 1)),
              t_empty)
            ),
        template_equation
         (template_app (template_hole 11, template_var 1),
          template_app (template_hole 10, template_var 0))],
       template_inequation
        (less_equals,
         template_app
          (template_app
            (template_hole 8,
             template_app
              (template_app
                (template_hole 7,
                 template_app
                  (template_hole 6,
                   template_app
                    (template_app (template_hole 5, template_var 0),
                     template_var 1))),
               template_app
                (template_hole 4,
                 template_app
                  (template_app (template_hole 3, template_var 0),
                   template_var 1)))),
           template_app
            (template_hole 2,
             template_app
              (template_app (template_hole 1, template_hole 4),
               template_var 1))),
         template_app
          (template_app (template_hole 0, template_var 0),
           template_var 1)))),
    ("Splay_Tree_Analysis.A_splay_ub",
     "[| bst ?t; \<langle>?l, ?x, ?r\<rangle> : subtrees ?t |]
      ==> A_splay ?x ?t
          <= 3 * (\<phi> ?t - \<phi> \<langle>?l, ?x, ?r\<rangle>) + 1",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 17, template_hole 16),
              template_var 3)
            ),
        template_predicate
         (
            template_app
             (template_app
               (template_hole 15,
                template_app
                 (template_app
                   (template_app (template_hole 14, template_var 2),
                    template_var 1),
                  template_var 0)),
              template_app (template_hole 13, template_var 3))
            )],
       template_inequation
        (less_equals,
         template_app
          (template_app (template_hole 11, template_var 1), template_var 3),
         template_app
          (template_app
            (template_hole 10,
             template_app
              (template_app
                (template_hole 9,
                 template_app
                  (template_hole 8,
                   template_app (template_hole 7, template_hole 6))),
               template_app
                (template_app
                  (template_hole 5,
                   template_app
                    (template_app
                      (template_hole 4,
                       template_app
                        (template_hole 8,
                         template_app (template_hole 3, template_hole 6))),
                     template_app
                      (template_hole 2,
                       template_app (template_hole 1, template_var 3)))),
                 template_app
                  (template_app
                    (template_hole 4,
                     template_app
                      (template_hole 8,
                       template_app (template_hole 3, template_hole 6))),
                   template_app
                    (template_hole 2,
                     template_app
                      (template_hole 1,
                       template_app
                        (template_app
                          (template_app (template_hole 14, template_var 2),
                           template_var 1),
                         template_var 0))))))),
           template_hole 0)))),
    ("Splay_Tree_Analysis.zig_zig",
     "[| ?lb ~= \<langle>\<rangle>;
         real (T_splay ?x ?lb) + \<Phi> ?lb1.0 + \<Phi> ?lb2.0 - \<Phi> ?lb
         <= 2 * \<phi> ?lb - 3 * \<phi> \<langle>?lx, ?x, ?rx\<rangle> + 1;
         size ?lb = size ?lb1.0 + size ?lb2.0 + 1;
         \<langle>?lx, ?x, ?rx\<rangle> : subtrees ?lb |]
      ==> real (T_splay ?x ?lb) +
          \<Phi>
           \<langle>?lb1.0, ?u,
            \<langle>?lb2.0, ?b,
             \<langle>?rb, ?a, ?ra\<rangle>\<rangle>\<rangle> -
          \<Phi> \<langle>\<langle>?lb, ?b, ?rb\<rangle>, ?a, ?ra\<rangle>
          <= 3 *
             (\<phi>
               \<langle>\<langle>?lb, ?b, ?rb\<rangle>, ?a, ?ra\<rangle> -
              \<phi> \<langle>?lx, ?x, ?rx\<rangle>)",
     template_implication
      ([template_negation
         (template_equation (template_var 10, template_hole 21)),
        template_inequation
         (less_equals,
          template_app
           (template_app
             (template_hole 19,
              template_app
               (template_app
                 (template_hole 18,
                  template_app
                   (template_app
                     (template_hole 18,
                      template_app
                       (template_hole 17,
                        template_app
                         (template_app (template_hole 16, template_var 9),
                          template_var 10))),
                    template_app (template_hole 15, template_var 8))),
                template_app (template_hole 15, template_var 7))),
            template_app (template_hole 15, template_var 10)),
          template_app
           (template_app
             (template_hole 18,
              template_app
               (template_app
                 (template_hole 19,
                  template_app
                   (template_app
                     (template_hole 14,
                      template_app
                       (template_hole 13,
                        template_app (template_hole 12, template_hole 11))),
                    template_app
                     (template_app
                       (template_hole 10,
                        template_app
                         (template_hole 13,
                          template_app
                           (template_hole 12, template_hole 11))),
                      template_app
                       (template_hole 17,
                        template_app (template_hole 9, template_var 10))))),
                template_app
                 (template_app
                   (template_hole 14,
                    template_app
                     (template_hole 13,
                      template_app (template_hole 8, template_hole 11))),
                  template_app
                   (template_app
                     (template_hole 10,
                      template_app
                       (template_hole 13,
                        template_app (template_hole 12, template_hole 11))),
                    template_app
                     (template_hole 17,
                      template_app
                       (template_hole 9,
                        template_app
                         (template_app
                           (template_app (template_hole 7, template_var 6),
                            template_var 9),
                          template_var 5))))))),
            template_hole 6)),
        template_equation
         (template_app (template_hole 4, template_var 10),
          template_app
           (template_app
             (template_hole 3,
              template_app
               (template_app
                 (template_hole 3,
                  template_app (template_hole 4, template_var 8)),
                template_app (template_hole 4, template_var 7))),
            template_hole 2)),
        template_predicate
         (
            template_app
             (template_app
               (template_hole 1,
                template_app
                 (template_app
                   (template_app (template_hole 7, template_var 6),
                    template_var 9),
                  template_var 5)),
              template_app (template_hole 0, template_var 10))
            )],
       template_inequation
        (less_equals,
         template_app
          (template_app
            (template_hole 19,
             template_app
              (template_app
                (template_hole 18,
                 template_app
                  (template_hole 17,
                   template_app
                    (template_app (template_hole 16, template_var 9),
                     template_var 10))),
               template_app
                (template_hole 15,
                 template_app
                  (template_app
                    (template_app (template_hole 7, template_var 8),
                     template_var 4),
                   template_app
                    (template_app
                      (template_app (template_hole 7, template_var 7),
                       template_var 3),
                     template_app
                      (template_app
                        (template_app (template_hole 7, template_var 2),
                         template_var 1),
                       template_var 0)))))),
           template_app
            (template_hole 15,
             template_app
              (template_app
                (template_app
                  (template_hole 7,
                   template_app
                    (template_app
                      (template_app (template_hole 7, template_var 10),
                       template_var 3),
                     template_var 2)),
                 template_var 1),
               template_var 0))),
         template_app
          (template_app
            (template_hole 14,
             template_app
              (template_hole 13,
               template_app (template_hole 8, template_hole 11))),
           template_app
            (template_app
              (template_hole 19,
               template_app
                (template_app
                  (template_hole 10,
                   template_app
                    (template_hole 13,
                     template_app (template_hole 12, template_hole 11))),
                 template_app
                  (template_hole 17,
                   template_app
                    (template_hole 9,
                     template_app
                      (template_app
                        (template_app
                          (template_hole 7,
                           template_app
                            (template_app
                              (template_app
                                (template_hole 7, template_var 10),
                               template_var 3),
                             template_var 2)),
                         template_var 1),
                       template_var 0))))),
             template_app
              (template_app
                (template_hole 10,
                 template_app
                  (template_hole 13,
                   template_app (template_hole 12, template_hole 11))),
               template_app
                (template_hole 17,
                 template_app
                  (template_hole 9,
                   template_app
                    (template_app
                      (template_app (template_hole 7, template_var 6),
                       template_var 9),
                     template_var 5)))))))))]:
   (string * thm * template) list
### theory "Draft.Splay_Tree_AnalysisMoreTemplates"
### 0.334s elapsed time, 0.483s cpu time, 0.053s GC time
val it = (): unit
