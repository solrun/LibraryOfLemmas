Loading theory "HOL-Data_Structures.Cmp" (required by "Draft.Splay_Tree_Analysis_OptimalMoreTemplates" via "Draft.Splay_Tree_Analysis_Optimal" via "Draft.Splay_Tree_Analysis_Base" via "Splay_Tree.Splay_Tree")
Loading theory "HOL-Data_Structures.Less_False" (required by "Draft.Splay_Tree_Analysis_OptimalMoreTemplates" via "Draft.Splay_Tree_Analysis_Optimal" via "Draft.Splay_Tree_Analysis_Base" via "Splay_Tree.Splay_Tree" via "HOL-Data_Structures.Set_Specs" via "HOL-Data_Structures.List_Ins_Del" via "HOL-Data_Structures.Sorted_Less")
Loading theory "HOL-Library.Nat_Bijection" (required by "Draft.Splay_Tree_Analysis_OptimalMoreTemplates" via "Draft.ExtrEqs" via "HOL-Library.Stream")
Loading theory "HOL-Library.Function_Algebras" (required by "Draft.Splay_Tree_Analysis_OptimalMoreTemplates" via "Draft.ExtrEqs" via "HOL-Library.BigO")
instantiation
  fun :: (type, plus) plus
  plus_fun == plus :: ('a => 'b) => ('a => 'b) => 'a => 'b
instantiation
  fun :: (type, zero) zero
  zero_fun == zero_class.zero :: 'a => 'b
### theory "HOL-Data_Structures.Less_False"
### 0.046s elapsed time, 0.223s cpu time, 0.000s GC time
Loading theory "HOL-Data_Structures.Sorted_Less" (required by "Draft.Splay_Tree_Analysis_OptimalMoreTemplates" via "Draft.Splay_Tree_Analysis_Optimal" via "Draft.Splay_Tree_Analysis_Base" via "Splay_Tree.Splay_Tree" via "HOL-Data_Structures.Set_Specs" via "HOL-Data_Structures.List_Ins_Del")
instantiation
  fun :: (type, times) times
  times_fun == times :: ('a => 'b) => ('a => 'b) => 'a => 'b
instantiation
  fun :: (type, one) one
  one_fun == one_class.one :: 'a => 'b
Found termination order: "(%p. size (snd p)) <*mlex*> {}"
### theory "HOL-Data_Structures.Sorted_Less"
### 0.068s elapsed time, 0.257s cpu time, 0.037s GC time
Loading theory "HOL-Data_Structures.List_Ins_Del" (required by "Draft.Splay_Tree_Analysis_OptimalMoreTemplates" via "Draft.Splay_Tree_Analysis_Optimal" via "Draft.Splay_Tree_Analysis_Base" via "Splay_Tree.Splay_Tree" via "HOL-Data_Structures.Set_Specs")
### theory "HOL-Library.Function_Algebras"
### 0.131s elapsed time, 0.546s cpu time, 0.037s GC time
Loading theory "HOL-Library.Set_Algebras" (required by "Draft.Splay_Tree_Analysis_OptimalMoreTemplates" via "Draft.ExtrEqs" via "HOL-Library.BigO")
instantiation
  set :: (plus) plus
  plus_set == plus :: 'a set => 'a set => 'a set
instantiation
  set :: (times) times
  times_set == times :: 'a set => 'a set => 'a set
instantiation
  set :: (zero) zero
  zero_set == zero_class.zero :: 'a set
instantiation
  set :: (one) one
  one_set == one_class.one :: 'a set
Found termination order: "(%p. length (snd p)) <*mlex*> {}"
Found termination order: "size_list size <*mlex*> {}"
Found termination order: "(%p. length (snd p)) <*mlex*> {}"
### theory "HOL-Library.Nat_Bijection"
### 0.319s elapsed time, 1.288s cpu time, 0.106s GC time
Loading theory "HOL-Library.Stream" (required by "Draft.Splay_Tree_Analysis_OptimalMoreTemplates" via "Draft.ExtrEqs")
### theory "HOL-Data_Structures.Cmp"
### 0.337s elapsed time, 1.358s cpu time, 0.106s GC time
Loading theory "HOL-Library.Tree" (required by "Draft.Splay_Tree_Analysis_OptimalMoreTemplates" via "Draft.ExtrEqs" via "Draft.Templates")
### theory "HOL-Library.Set_Algebras"
### 0.201s elapsed time, 0.793s cpu time, 0.068s GC time
Loading theory "Draft.Amortized_Framework" (required by "Draft.Splay_Tree_Analysis_OptimalMoreTemplates" via "Draft.Splay_Tree_Analysis_Optimal")
### theory "HOL-Data_Structures.List_Ins_Del"
### 0.226s elapsed time, 0.897s cpu time, 0.068s GC time
Loading theory "HOL-Data_Structures.Set_Specs" (required by "Draft.Splay_Tree_Analysis_OptimalMoreTemplates" via "Draft.Splay_Tree_Analysis_Optimal" via "Draft.Splay_Tree_Analysis_Base" via "Splay_Tree.Splay_Tree")
locale Set
  fixes empty :: "'s"
    and insert :: "'a => 's => 's"
    and delete :: "'a => 's => 's"
    and isin :: "'s => 'a => bool"
    and set :: "'s => 'a set"
    and invar :: "'s => bool"
  assumes "Set empty insert delete isin set invar"
locale Set_by_Ordered
  fixes empty :: "'t"
    and insert :: "'a => 't => 't"
    and delete :: "'a => 't => 't"
    and isin :: "'t => 'a => bool"
    and inorder :: "'t => 'a list"
    and inv :: "'t => bool"
  assumes "Set_by_Ordered empty insert delete isin inorder inv"
locale Set2
  fixes empty :: "'s"
    and delete :: "'a => 's => 's"
    and isin :: "'s => 'a => bool"
    and set :: "'s => 'a set"
    and invar :: "'s => bool"
    and insert :: "'a => 's => 's"
    and union :: "'s => 's => 's"
    and inter :: "'s => 's => 's"
    and diff :: "'s => 's => 's"
  assumes "Set2 empty delete isin set invar insert union inter diff"
### theory "HOL-Data_Structures.Set_Specs"
### 0.117s elapsed time, 0.455s cpu time, 0.079s GC time
Loading theory "Draft.Lemmas_log" (required by "Draft.Splay_Tree_Analysis_OptimalMoreTemplates" via "Draft.Splay_Tree_Analysis_Optimal" via "Draft.Splay_Tree_Analysis_Base")
### theory "Draft.Lemmas_log"
### 0.047s elapsed time, 0.191s cpu time, 0.000s GC time
Loading theory "HOL-Library.BigO" (required by "Draft.Splay_Tree_Analysis_OptimalMoreTemplates" via "Draft.ExtrEqs")
consts
  shift :: "'a list => 'a stream => 'a stream"
Proofs for coinductive predicate(s) "streamsp"
  Proving monotonicity ...
locale Amortized
  fixes arity :: "'op => nat"
    and exec :: "'op => 's list => 's"
    and inv :: "'s => bool"
    and cost :: "'op => 's list => nat"
    and \<Phi> :: "'s => real"
    and U :: "'op => 's list => real"
  assumes "Amortized arity exec inv cost \<Phi> U"
consts
  snth :: "'a stream => nat => 'a"
Found termination order: "size <*mlex*> {}"
consts
  stake :: "nat => 'a stream => 'a list"
consts
  sdrop :: "nat => 'a stream => 'a stream"
consts
  left :: "'a tree => 'a tree"
consts
  right :: "'a tree => 'a tree"
Found termination order: "size <*mlex*> {}"
consts
  sfilter :: "('a => bool) => 'a stream => 'a stream"
Found termination order: "size <*mlex*> {}"
consts
  cycle :: "'a list => 'a stream"
Found termination order: "size <*mlex*> {}"
Found termination order: "size <*mlex*> {}"
consts
  siterate :: "('a => 'a) => 'a => 'a stream"
Found termination order: "size <*mlex*> {}"
consts
  flat :: "'a list stream => 'a stream"
Found termination order: "size <*mlex*> {}"
class height = type +
  fixes height :: "'a => nat"
instantiation
  tree :: (type) height
  height_tree == height :: 'a tree => nat
consts
  sinterleave :: "'a stream => 'a stream => 'a stream"
Found termination order: "size <*mlex*> {}"
consts
  szip :: "'a stream => 'b stream => ('a * 'b) stream"
consts
  smap2 :: "('a => 'b => 'c) => 'a stream => 'b stream => 'c stream"
Found termination order: "size <*mlex*> {}"
### theory "HOL-Library.Stream"
### 1.122s elapsed time, 4.243s cpu time, 0.945s GC time
Loading theory "HOL-Library.Sum_of_Squares" (required by "Draft.Splay_Tree_Analysis_OptimalMoreTemplates" via "Draft.Splay_Tree_Analysis_Optimal")
Found termination order: "size <*mlex*> {}"
locale Amortized2
  fixes arity :: "'op => nat"
    and exec :: "'op => 's list => 's"
    and inv :: "'s => bool"
    and cost :: "'op => 's list => nat"
    and \<Phi> :: "'s => real"
    and U :: "'op => 's list => real"
    and exec' :: "'op => 't list => 't"
    and inv' :: "'t => bool"
    and cost' :: "'op => 't list => nat"
    and U' :: "'op => 't list => real"
    and hom :: "'t => 's"
  assumes "Amortized2 arity exec inv cost \<Phi> U exec' inv' cost' U' hom"
Found termination order: "size <*mlex*> {}"
### theory "HOL-Library.BigO"
### 1.049s elapsed time, 3.970s cpu time, 0.867s GC time
### theory "Draft.Amortized_Framework"
### 1.300s elapsed time, 4.926s cpu time, 1.001s GC time
Found termination order: "size <*mlex*> {}"
Found termination order: "size <*mlex*> {}"
Found termination order: "size <*mlex*> {}"
Found termination order: "size <*mlex*> {}"
Found termination order: "(%p. size (fst p)) <*mlex*> {}"
Found termination order: "size <*mlex*> {}"
Found termination order: "(%p. size (snd p)) <*mlex*> {}"
### ML warning (line 261 of "~~/src/HOL/Library/Sum_of_Squares/positivstellensatz.ML"):
### Value identifier (pth_abs) has not been referenced.
### ML warning (line 265 of "~~/src/HOL/Library/Sum_of_Squares/positivstellensatz.ML"):
### Value identifier (pth_max) has not been referenced.
### ML warning (line 269 of "~~/src/HOL/Library/Sum_of_Squares/positivstellensatz.ML"):
### Value identifier (pth_min) has not been referenced.
### ML warning (line 379 of "~~/src/HOL/Library/Sum_of_Squares/positivstellensatz.ML"):
### Pattern is not exhaustive.
signature FUNC =
  sig
    exception DUP of key
    exception SAME
    exception UNDEF of key
    val apply: 'a table -> key -> 'a
    val applyd: 'a table -> (key -> 'a) -> key -> 'a
    val build: ('a table -> 'a table) -> 'a table
    val choose: 'a table -> key * 'a
    val combine:
       ('a -> 'a -> 'a) -> ('a -> bool) -> 'a table -> 'a table -> 'a table
    val cons_list: key * 'a -> 'a list table -> 'a list table
    val default: key * 'a -> 'a table -> 'a table
    val defined: 'a table -> key -> bool
    val delete: key -> 'a table -> 'a table
    val delete_safe: key -> 'a table -> 'a table
    val dest: 'a table -> (key * 'a) list
    val dest_list: 'a list table -> (key * 'a) list
    val dom: 'a table -> key list
    val empty: 'a table
    val exists: (key * 'a -> bool) -> 'a table -> bool
    val fold: (key * 'a -> 'b -> 'b) -> 'a table -> 'b -> 'b
    val fold_rev: (key * 'a -> 'b -> 'b) -> 'a table -> 'b -> 'b
    val forall: (key * 'a -> bool) -> 'a table -> bool
    val get_first: (key * 'a -> 'b option) -> 'a table -> 'b option
    val insert: ('a * 'a -> bool) -> key * 'a -> 'a table -> 'a table
    val insert_list:
       ('a * 'a -> bool) -> key * 'a -> 'a list table -> 'a list table
    val insert_set: key -> set -> set
    val is_empty: 'a table -> bool
    val is_single: 'a table -> bool
    val join: (key -> 'a * 'a -> 'a) -> 'a table * 'a table -> 'a table
    type key
    val keys: 'a table -> key list
    val lookup: 'a table -> key -> 'a option
    val lookup_key: 'a table -> key -> (key * 'a) option
    val lookup_list: 'a list table -> key -> 'a list
    val make: (key * 'a) list -> 'a table
    val make_list: (key * 'a) list -> 'a list table
    val make_set: key list -> set
    val map: (key -> 'a -> 'b) -> 'a table -> 'b table
    val map_default: key * 'a -> ('a -> 'a) -> 'a table -> 'a table
    val map_entry: key -> ('a -> 'a) -> 'a table -> 'a table
    val max: 'a table -> (key * 'a) option
    val member: ('a * 'b -> bool) -> 'b table -> key * 'a -> bool
    val merge: ('a * 'a -> bool) -> 'a table * 'a table -> 'a table
    val merge_list:
       ('a * 'a -> bool) -> 'a list table * 'a list table -> 'a list table
    val min: 'a table -> (key * 'a) option
    val onefunc: key * 'a -> 'a table
    val remove: ('a * 'b -> bool) -> key * 'a -> 'b table -> 'b table
    val remove_list:
       ('a * 'b -> bool) -> key * 'a -> 'b list table -> 'b list table
    val remove_set: key -> set -> set
    type set = unit table
    type 'a table
    val tryapplyd: 'a table -> key -> 'a -> 'a
    val update: key * 'a -> 'a table -> 'a table
    val update_list:
       ('a * 'a -> bool) -> key * 'a -> 'a list table -> 'a list table
    val update_new: key * 'a -> 'a table -> 'a table
    val updatep: (key * 'a -> bool) -> key * 'a -> 'a table -> 'a table
  end
functor FuncFun (Key: KEY): FUNC
signature REAL_ARITH =
  sig
    type cert_conv = cterm -> thm * pss_tree
    val cterm_of_rat: Rat.rat -> cterm
    val dest_ratconst: cterm -> Rat.rat
    val gen_gen_real_arith:
       Proof.context ->
         (Rat.rat -> cterm) * conv * conv * conv * conv * conv * conv *
         conv * conv * conv * prover
           -> cert_conv
    val gen_prover_real_arith: Proof.context -> prover -> cert_conv
    val gen_real_arith:
       Proof.context ->
         (Rat.rat -> cterm) * conv * conv * conv * conv * conv * conv *
         conv * prover
           -> cert_conv
    val is_ratconst: cterm -> bool
    datatype positivstellensatz
    =
         Axiom_eq of int
       | Axiom_le of int
       | Axiom_lt of int
       | Eqmul of FuncUtil.poly * positivstellensatz
       | Product of positivstellensatz * positivstellensatz
       | Rational_eq of Rat.rat
       | Rational_le of Rat.rat
       | Rational_lt of Rat.rat
       | Square of FuncUtil.poly
       | Sum of positivstellensatz * positivstellensatz
    type prover =
       tree_choice list ->
         (thm list * thm list * thm list -> positivstellensatz -> thm) ->
           thm list * thm list * thm list -> thm * pss_tree
    datatype pss_tree
    = Branch of pss_tree * pss_tree | Cert of positivstellensatz | Trivial
    val real_linear_prover:
       (thm list * thm list * thm list -> positivstellensatz -> thm) ->
         thm list * thm list * thm list -> thm * pss_tree
    datatype tree_choice = Left | Right
  end
structure FuncUtil:
  sig
    structure Ctermfunc: FUNC
    structure Intfunc: FUNC
    structure Intpairfunc: FUNC
    structure Monomialfunc: FUNC
    structure Ratfunc: FUNC
    structure Symfunc: FUNC
    structure Termfunc: FUNC
    val dest_monomial: 'a Ctermfunc.table -> (cterm * 'a) list
    type monomial = int Ctermfunc.table
    val monomial_ord: int Ctermfunc.table * int Ctermfunc.table -> order
    val monomial_order: int Ctermfunc.table * int Ctermfunc.table -> order
    type poly = Rat.rat Monomialfunc.table
  end
structure RealArith: REAL_ARITH
Found termination order: "size <*mlex*> {}"
signature POSITIVSTELLENSATZ_TOOLS =
  sig
    val print_cert: RealArith.pss_tree -> string
    val read_cert: Proof.context -> string -> RealArith.pss_tree
  end
structure Positivstellensatz_Tools: POSITIVSTELLENSATZ_TOOLS
### theory "HOL-Library.Tree"
### 2.030s elapsed time, 6.438s cpu time, 1.125s GC time
Loading theory "Draft.Templates" (required by "Draft.Splay_Tree_Analysis_OptimalMoreTemplates" via "Draft.ExtrEqs")
Loading theory "Splay_Tree.Splay_Tree" (required by "Draft.Splay_Tree_Analysis_OptimalMoreTemplates" via "Draft.Splay_Tree_Analysis_Optimal" via "Draft.Splay_Tree_Analysis_Base")
datatype template_term
=
     t_empty
   | template_app of template_term * template_term
   | template_hole of int
   | template_var of int
datatype sign
= equals | greater_equals | greater_than | less_equals | less_than
datatype template
=
     template_bimplication of template * template
   | template_dunno
   | template_equation of template_term * template_term
   | template_implication of template list * template
   | template_inequation of sign * template_term * template_term
   | template_negation of template
   | template_predicate of template_term
constructor t_empty: template_term
constructor template_app: template_term * template_term -> template_term
constructor template_hole: int -> template_term
constructor template_var: int -> template_term
constructor equals: sign
constructor greater_equals: sign
constructor greater_than: sign
constructor less_equals: sign
constructor less_than: sign
constructor template_bimplication: template * template -> template
constructor template_dunno: template
constructor template_equation: template_term * template_term -> template
constructor template_implication: template list * template -> template
constructor template_inequation:
   sign * template_term * template_term -> template
constructor template_negation: template -> template
constructor template_predicate: template_term -> template
val vfs = fn: term -> (indexname * typ) list * (string * typ) list
val indexOf = fn: ''a list -> ''a -> int -> int
val has_eq = fn: term -> bool
val term2template = fn:
   (indexname * typ) list -> (string * typ) list -> term -> template_term
val lemma2predicate = fn: term -> term -> template
val makeTemplatewithContext = fn: term -> term -> template
val lemma2template = fn: term -> template
val thm2template = fn: thm -> template
val tterm2string = fn: template_term -> string
val template2string = fn: template -> string
val t = "height ?t <= size ?t": thm
val th =
   Const ("HOL.Trueprop", "bool => prop") $
     (Const ("Orderings.ord_class.less_eq", "nat => nat => bool") $
       (Const ("Tree.height_class.height", "?'a tree => nat") $
         Var (("t", 0), "?'a tree")) $
       (Const ("Nat.size_class.size", "?'a tree => nat") $
         Var (("t", 0), "?'a tree"))):
   term
### theory "Draft.Templates"
### 0.076s elapsed time, 0.259s cpu time, 0.066s GC time
Loading theory "Draft.ExtrEqs" (required by "Draft.Splay_Tree_Analysis_OptimalMoreTemplates")
signature SUM_OF_SQUARES =
  sig
    exception Failure of string
    val debug: bool Config.T
    val debug_message: Proof.context -> (unit -> string) -> unit
    datatype proof_method
    = Certificate of RealArith.pss_tree | Prover of string -> string
    val sos_tac:
       (RealArith.pss_tree -> unit) ->
         proof_method -> Proof.context -> int -> tactic
    val trace: bool Config.T
    val trace_message: Proof.context -> (unit -> string) -> unit
  end
structure Sum_of_Squares: SUM_OF_SQUARES
signature SOS_WRAPPER =
  sig val sos_tac: Proof.context -> string option -> int -> tactic end
structure SOS_Wrapper: SOS_WRAPPER
### theory "HOL-Library.Sum_of_Squares"
### 1.382s elapsed time, 3.708s cpu time, 0.970s GC time
val eqpattern =
   Pattern
    (
       Const ("HOL.Trueprop", "bool => prop") $
         (Const ("HOL.eq", "?'a => ?'a => bool") $
           Var (("_dummy_", 1), "?'a") $ Var (("_dummy_", 2), "?'a"))
       ):
   term Find_Theorems.criterion
val badeqpattern = Pattern (Const ("Pure.eq", "?'a => ?'a => prop")):
   term Find_Theorems.criterion
val undefpattern =
   Pattern
    (
       Const ("HOL.Trueprop", "bool => prop") $
         (Const ("HOL.eq", "?'a => ?'a => bool") $
           Var (("_dummy_", 1), "?'a") $ Const ("HOL.undefined", "?'a"))
       ):
   term Find_Theorems.criterion
val thmpattern =
   Pattern
    (Const ("HOL.Trueprop", "bool => prop") $ Var (("_dummy_", 1), "bool")):
   term Find_Theorems.criterion
val badnames =
   ["*nitpick*", "*Nitpick*", "*full_exhaustive*", "*_def*", "Enum.finite*",
    "*Quickcheck*", "ATP*", "*Nunchaku*", "*Code*", "*BNF*", "*SMT*",
    "*.*.*"]:
   string list
val unwanted_names =
   [(false, Name "*nitpick*"), (false, Name "*Nitpick*"),
    (false, Name "*full_exhaustive*"), (false, Name "*_def*"),
    (false, Name "Enum.finite*"), (false, Name "*Quickcheck*"),
    (false, Name "ATP*"), (false, Name "*Nunchaku*"),
    (false, Name "*Code*"), (false, Name "*BNF*"), (false, Name "*SMT*"),
    (false, Name "*.*.*")]:
   (bool * term Find_Theorems.criterion) list
val has_vars = fn: term -> bool
val get_all_eqs = fn: string -> Proof.context -> (string * thm) list
val get_all_thms = fn: string -> Proof.context -> (string * thm) list
val get_noneq_thms = fn: string -> Proof.context -> (string * thm) list
val template_eqs = fn:
   string -> Proof.context -> (string * thm * template) list
val template_thms = fn:
   string -> Proof.context -> (string * thm * template) list
### theory "Draft.ExtrEqs"
### 0.798s elapsed time, 2.061s cpu time, 0.755s GC time
### Ambiguous input (line 50 of "$AFP/Splay_Tree/Splay_Tree.thy") produces 4 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("_applC" ("_position" splay)
###       ("_cargs" ("_position" x)
###         ("_applC" ("_position" Node)
###           ("_cargs" ("_position" AB)
###             ("_cargs" ("_position" b) ("_position" CD))))))
###     ("_case_syntax"
###       ("_applC" ("_position" cmp)
###         ("_cargs" ("_position" x) ("_position" b)))
###       ("_case2"
###         ("_case1" ("_position" EQ)
###           ("_applC" ("_position" Node)
###             ("_cargs" ("_position" AB)
###               ("_cargs" ("_position" b) ("_position" CD)))))
###         ("_case2"
###           ("_case1" ("_position" LT)
###             ("_case_syntax" ("_position" AB)
###               ("_case2"
###                 ("_case1" ("_position" Leaf)
###                   ("_applC" ("_position" Node)
###                     ("_cargs" ("_position" AB)
###                       ("_cargs" ("_position" b) ("_position" CD)))))
###                 ("_case1"
###                   ("_applC" ("_position" Node)
###                     ("_cargs" ("_position" A)
###                       ("_cargs" ("_position" a) ("_position" B))))
###                   ("_case_syntax"
###                     ("_applC" ("_position" cmp)
###                       ("_cargs" ("_position" x) ("_position" a)))
###                     ("_case2"
###                       ("_case1" ("_position" EQ)
###                         ("_applC" ("_position" Node)
###                           ("_cargs" ("_position" A)
###                             ("_cargs" ("_position" a)
###                               ("_applC" ("_position" Node)
###                                 ("_cargs" ("_position" B)
###                                   ("_cargs" ("_position" b)
###                                     ("_position" CD))))))))
###                       ("_case1" ("_position" LT)
###                         ("\<^const>HOL.If"
###                           ("\<^const>HOL.eq" ("_position" A)
###                             ("_position" Leaf))
###                           ("_applC" ("_position" Node)
###                             ("_cargs" ("_position" A)
###                               ("_cargs" ("_position" a)
###                                 ("_applC" ("_position" Node)
###                                   ("_cargs" ("_position" B)
###                                     ("_cargs" ("_position" b)
### ("_position" CD)))))))
###                           ("_case_syntax"
###                             ("_applC" ("_position" splay)
###                               ("_cargs" ("_position" x) ("_position" A)))
###                             ("_case2"
###                               ("_case1"
###                                 ("_applC" ("_position" Node)
###                                   ("_cargs" ("_position" A\<^sub>1)
###                                     ("_cargs" ("_position" a')
### ("_position" A\<^sub>2))))
###                                 ("_applC" ("_position" Node)
###                                   ("_cargs" ("_position" A\<^sub>1)
###                                     ("_cargs" ("_position" a')
### ("_applC" ("_position" Node)
###   ("_cargs" ("_position" A\<^sub>2)
###     ("_cargs" ("_position" a)
###       ("_applC" ("_position" Node)
###         ("_cargs" ("_position" B)
###           ("_cargs" ("_position" b) ("_position" CD)))))))))))
###                               ("_case1" ("_position" GT)
###                                 ("\<^const>HOL.If"
###                                   ("\<^const>HOL.eq" ("_position" B)
###                                     ("_position" Leaf))
###                                   ("_applC" ("_position" Node)
###                                     ("_cargs" ("_position" A)
### ("_cargs" ("_position" a)
###   ("_applC" ("_position" Node)
###     ("_cargs" ("_position" B)
###       ("_cargs" ("_position" b) ("_position" CD)))))))
###                                   ("_case_syntax"
###                                     ("_applC" ("_position" splay)
### ("_cargs" ("_position" x) ("_position" B)))
###                                     ("_case1"
### ("_applC" ("_position" Node)
###   ("_cargs" ("_position" B\<^sub>1)
###     ("_cargs" ("_position" b') ("_position" B\<^sub>2))))
### ("_applC" ("_position" Node)
###   ("_cargs"
###     ("_applC" ("_position" Node)
###       ("_cargs" ("_position" A)
###         ("_cargs" ("_position" a) ("_position" B\<^sub>1))))
###     ("_cargs" ("_position" b')
###       ("_applC" ("_position" Node)
###         ("_cargs" ("_position" B\<^sub>2)
###           ("_cargs" ("_position" b) ("_position" CD)))))))))))))))))))))
###           ("_case1" ("_position" GT)
###             ("_case_syntax" ("_position" CD)
###               ("_case2"
###                 ("_case1" ("_position" Leaf)
###                   ("_applC" ("_position" Node)
###                     ("_cargs" ("_position" AB)
###                       ("_cargs" ("_position" b) ("_position" CD)))))
###                 ("_case1"
###                   ("_applC" ("_position" Node)
###                     ("_cargs" ("_position" C)
###                       ("_cargs" ("_position" c) ("_position" D))))
###                   ("_case_syntax"
###                     ("_applC" ("_position" cmp)
###                       ("_cargs" ("_position" x) ("_position" c)))
###                     ("_case2"
###                       ("_case1" ("_position" EQ)
###                         ("_applC" ("_position" Node)
###                           ("_cargs"
###                             ("_applC" ("_position" Node)
###                               ("_cargs" ("_position" AB)
###                                 ("_cargs" ("_position" b) ("_position" C))))
###                             ("_cargs" ("_position" c) ("_position" D)))))
###                       ("_case1" ("_position" LT)
###                         ("\<^const>HOL.If"
###                           ("\<^const>HOL.eq" ("_position" C)
###                             ("_position" Leaf))
###                           ("_applC" ("_position" Node)
###                             ("_cargs"
###                               ("_applC" ("_position" Node)
###                                 ("_cargs" ("_position" AB)
###                                   ("_cargs" ("_position" b)
###                                     ("_position" C))))
###                               ("_cargs" ("_position" c) ("_position" D))))
###                           ("_case_syntax"
###                             ("_applC" ("_position" splay)
###                               ("_cargs" ("_position" x) ("_position" C)))
###                             ("_case2"
###                               ("_case1"
###                                 ("_applC" ("_position" Node)
###                                   ("_cargs" ("_position" C\<^sub>1)
###                                     ("_cargs" ("_position" c')
### ("_position" C\<^sub>2))))
###                                 ("_applC" ("_position" Node)
###                                   ("_cargs"
###                                     ("_applC" ("_position" Node)
### ("_cargs" ("_position" AB)
###   ("_cargs" ("_position" b) ("_position" C\<^sub>1))))
###                                     ("_cargs" ("_position" c')
### ("_applC" ("_position" Node)
###   ("_cargs" ("_position" C\<^sub>2)
###     ("_cargs" ("_position" c) ("_position" D))))))))
###                               ("_case1" ("_position" GT)
###                                 ("\<^const>HOL.If"
###                                   ("\<^const>HOL.eq" ("_position" D)
###                                     ("_position" Leaf))
###                                   ("_applC" ("_position" Node)
###                                     ("_cargs"
### ("_applC" ("_position" Node)
###   ("_cargs" ("_position" AB) ("_cargs" ("_position" b) ("_position" C))))
### ("_cargs" ("_position" c) ("_position" D))))
###                                   ("_case_syntax"
###                                     ("_applC" ("_position" splay)
### ("_cargs" ("_position" x) ("_position" D)))
###                                     ("_case1"
### ("_applC" ("_position" Node)
###   ("_cargs" ("_position" D\<^sub>1)
###     ("_cargs" ("_position" d) ("_position" D\<^sub>2))))
### ("_applC" ("_position" Node)
###   ("_cargs"
###     ("_applC" ("_position" Node)
###       ("_cargs"
###         ("_applC" ("_position" Node)
###           ("_cargs" ("_position" AB)
###             ("_cargs" ("_position" b) ("_position" C))))
###         ("_cargs" ("_position" c) ("_position" D\<^sub>1))))
###     ("_cargs" ("_position" d) ("_position" D\<^sub>2)))))))))))))))))))))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("_applC" ("_position" splay)
###       ("_cargs" ("_position" x)
###         ("_applC" ("_position" Node)
###           ("_cargs" ("_position" AB)
###             ("_cargs" ("_position" b) ("_position" CD))))))
###     ("_case_syntax"
###       ("_applC" ("_position" cmp)
###         ("_cargs" ("_position" x) ("_position" b)))
###       ("_case2"
###         ("_case1" ("_position" EQ)
###           ("_applC" ("_position" Node)
###             ("_cargs" ("_position" AB)
###               ("_cargs" ("_position" b) ("_position" CD)))))
###         ("_case2"
###           ("_case1" ("_position" LT)
###             ("_case_syntax" ("_position" AB)
###               ("_case2"
###                 ("_case1" ("_position" Leaf)
###                   ("_applC" ("_position" Node)
###                     ("_cargs" ("_position" AB)
###                       ("_cargs" ("_position" b) ("_position" CD)))))
###                 ("_case1"
###                   ("_applC" ("_position" Node)
###                     ("_cargs" ("_position" A)
###                       ("_cargs" ("_position" a) ("_position" B))))
###                   ("_case_syntax"
###                     ("_applC" ("_position" cmp)
###                       ("_cargs" ("_position" x) ("_position" a)))
###                     ("_case2"
###                       ("_case1" ("_position" EQ)
###                         ("_applC" ("_position" Node)
###                           ("_cargs" ("_position" A)
###                             ("_cargs" ("_position" a)
###                               ("_applC" ("_position" Node)
###                                 ("_cargs" ("_position" B)
###                                   ("_cargs" ("_position" b)
###                                     ("_position" CD))))))))
###                       ("_case2"
###                         ("_case1" ("_position" LT)
###                           ("\<^const>HOL.If"
###                             ("\<^const>HOL.eq" ("_position" A)
###                               ("_position" Leaf))
###                             ("_applC" ("_position" Node)
###                               ("_cargs" ("_position" A)
###                                 ("_cargs" ("_position" a)
###                                   ("_applC" ("_position" Node)
###                                     ("_cargs" ("_position" B)
### ("_cargs" ("_position" b) ("_position" CD)))))))
###                             ("_case_syntax"
###                               ("_applC" ("_position" splay)
###                                 ("_cargs" ("_position" x) ("_position" A)))
###                               ("_case1"
###                                 ("_applC" ("_position" Node)
###                                   ("_cargs" ("_position" A\<^sub>1)
###                                     ("_cargs" ("_position" a')
### ("_position" A\<^sub>2))))
###                                 ("_applC" ("_position" Node)
###                                   ("_cargs" ("_position" A\<^sub>1)
###                                     ("_cargs" ("_position" a')
### ("_applC" ("_position" Node)
###   ("_cargs" ("_position" A\<^sub>2)
###     ("_cargs" ("_position" a)
###       ("_applC" ("_position" Node)
###         ("_cargs" ("_position" B)
###           ("_cargs" ("_position" b) ("_position" CD))))))))))))))
###                         ("_case1" ("_position" GT)
###                           ("\<^const>HOL.If"
###                             ("\<^const>HOL.eq" ("_position" B)
###                               ("_position" Leaf))
###                             ("_applC" ("_position" Node)
###                               ("_cargs" ("_position" A)
###                                 ("_cargs" ("_position" a)
###                                   ("_applC" ("_position" Node)
###                                     ("_cargs" ("_position" B)
### ("_cargs" ("_position" b) ("_position" CD)))))))
###                             ("_case_syntax"
###                               ("_applC" ("_position" splay)
###                                 ("_cargs" ("_position" x) ("_position" B)))
###                               ("_case1"
###                                 ("_applC" ("_position" Node)
###                                   ("_cargs" ("_position" B\<^sub>1)
###                                     ("_cargs" ("_position" b')
### ("_position" B\<^sub>2))))
###                                 ("_applC" ("_position" Node)
###                                   ("_cargs"
###                                     ("_applC" ("_position" Node)
### ("_cargs" ("_position" A)
###   ("_cargs" ("_position" a) ("_position" B\<^sub>1))))
###                                     ("_cargs" ("_position" b')
### ("_applC" ("_position" Node)
###   ("_cargs" ("_position" B\<^sub>2)
###     ("_cargs" ("_position" b) ("_position" CD))))))))))))))))))
###           ("_case1" ("_position" GT)
###             ("_case_syntax" ("_position" CD)
###               ("_case2"
###                 ("_case1" ("_position" Leaf)
###                   ("_applC" ("_position" Node)
###                     ("_cargs" ("_position" AB)
###                       ("_cargs" ("_position" b) ("_position" CD)))))
###                 ("_case1"
###                   ("_applC" ("_position" Node)
###                     ("_cargs" ("_position" C)
###                       ("_cargs" ("_position" c) ("_position" D))))
###                   ("_case_syntax"
###                     ("_applC" ("_position" cmp)
###                       ("_cargs" ("_position" x) ("_position" c)))
###                     ("_case2"
###                       ("_case1" ("_position" EQ)
###                         ("_applC" ("_position" Node)
###                           ("_cargs"
###                             ("_applC" ("_position" Node)
###                               ("_cargs" ("_position" AB)
###                                 ("_cargs" ("_position" b) ("_position" C))))
###                             ("_cargs" ("_position" c) ("_position" D)))))
###                       ("_case1" ("_position" LT)
###                         ("\<^const>HOL.If"
###                           ("\<^const>HOL.eq" ("_position" C)
###                             ("_position" Leaf))
###                           ("_applC" ("_position" Node)
###                             ("_cargs"
###                               ("_applC" ("_position" Node)
###                                 ("_cargs" ("_position" AB)
###                                   ("_cargs" ("_position" b)
###                                     ("_position" C))))
###                               ("_cargs" ("_position" c) ("_position" D))))
###                           ("_case_syntax"
###                             ("_applC" ("_position" splay)
###                               ("_cargs" ("_position" x) ("_position" C)))
###                             ("_case2"
###                               ("_case1"
###                                 ("_applC" ("_position" Node)
###                                   ("_cargs" ("_position" C\<^sub>1)
###                                     ("_cargs" ("_position" c')
### ("_position" C\<^sub>2))))
###                                 ("_applC" ("_position" Node)
###                                   ("_cargs"
###                                     ("_applC" ("_position" Node)
### ("_cargs" ("_position" AB)
###   ("_cargs" ("_position" b) ("_position" C\<^sub>1))))
###                                     ("_cargs" ("_position" c')
### ("_applC" ("_position" Node)
###   ("_cargs" ("_position" C\<^sub>2)
###     ("_cargs" ("_position" c) ("_position" D))))))))
###                               ("_case1" ("_position" GT)
###                                 ("\<^const>HOL.If"
###                                   ("\<^const>HOL.eq" ("_position" D)
###                                     ("_position" Leaf))
###                                   ("_applC" ("_position" Node)
###                                     ("_cargs"
### ("_applC" ("_position" Node)
###   ("_cargs" ("_position" AB) ("_cargs" ("_position" b) ("_position" C))))
### ("_cargs" ("_position" c) ("_position" D))))
###                                   ("_case_syntax"
###                                     ("_applC" ("_position" splay)
### ("_cargs" ("_position" x) ("_position" D)))
###                                     ("_case1"
### ("_applC" ("_position" Node)
###   ("_cargs" ("_position" D\<^sub>1)
###     ("_cargs" ("_position" d) ("_position" D\<^sub>2))))
### ("_applC" ("_position" Node)
###   ("_cargs"
###     ("_applC" ("_position" Node)
###       ("_cargs"
###         ("_applC" ("_position" Node)
###           ("_cargs" ("_position" AB)
###             ("_cargs" ("_position" b) ("_position" C))))
###         ("_cargs" ("_position" c) ("_position" D\<^sub>1))))
###     ("_cargs" ("_position" d) ("_position" D\<^sub>2)))))))))))))))))))))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("_applC" ("_position" splay)
###       ("_cargs" ("_position" x)
###         ("_applC" ("_position" Node)
###           ("_cargs" ("_position" AB)
###             ("_cargs" ("_position" b) ("_position" CD))))))
###     ("_case_syntax"
###       ("_applC" ("_position" cmp)
###         ("_cargs" ("_position" x) ("_position" b)))
###       ("_case2"
###         ("_case1" ("_position" EQ)
###           ("_applC" ("_position" Node)
###             ("_cargs" ("_position" AB)
###               ("_cargs" ("_position" b) ("_position" CD)))))
###         ("_case2"
###           ("_case1" ("_position" LT)
###             ("_case_syntax" ("_position" AB)
###               ("_case2"
###                 ("_case1" ("_position" Leaf)
###                   ("_applC" ("_position" Node)
###                     ("_cargs" ("_position" AB)
###                       ("_cargs" ("_position" b) ("_position" CD)))))
###                 ("_case1"
###                   ("_applC" ("_position" Node)
###                     ("_cargs" ("_position" A)
###                       ("_cargs" ("_position" a) ("_position" B))))
###                   ("_case_syntax"
###                     ("_applC" ("_position" cmp)
###                       ("_cargs" ("_position" x) ("_position" a)))
###                     ("_case2"
###                       ("_case1" ("_position" EQ)
###                         ("_applC" ("_position" Node)
###                           ("_cargs" ("_position" A)
###                             ("_cargs" ("_position" a)
###                               ("_applC" ("_position" Node)
###                                 ("_cargs" ("_position" B)
###                                   ("_cargs" ("_position" b)
###                                     ("_position" CD))))))))
###                       ("_case1" ("_position" LT)
###                         ("\<^const>HOL.If"
###                           ("\<^const>HOL.eq" ("_position" A)
###                             ("_position" Leaf))
###                           ("_applC" ("_position" Node)
###                             ("_cargs" ("_position" A)
###                               ("_cargs" ("_position" a)
###                                 ("_applC" ("_position" Node)
###                                   ("_cargs" ("_position" B)
###                                     ("_cargs" ("_position" b)
### ("_position" CD)))))))
###                           ("_case_syntax"
###                             ("_applC" ("_position" splay)
###                               ("_cargs" ("_position" x) ("_position" A)))
###                             ("_case2"
###                               ("_case1"
###                                 ("_applC" ("_position" Node)
###                                   ("_cargs" ("_position" A\<^sub>1)
###                                     ("_cargs" ("_position" a')
### ("_position" A\<^sub>2))))
###                                 ("_applC" ("_position" Node)
###                                   ("_cargs" ("_position" A\<^sub>1)
###                                     ("_cargs" ("_position" a')
### ("_applC" ("_position" Node)
###   ("_cargs" ("_position" A\<^sub>2)
###     ("_cargs" ("_position" a)
###       ("_applC" ("_position" Node)
###         ("_cargs" ("_position" B)
###           ("_cargs" ("_position" b) ("_position" CD)))))))))))
###                               ("_case1" ("_position" GT)
###                                 ("\<^const>HOL.If"
###                                   ("\<^const>HOL.eq" ("_position" B)
###                                     ("_position" Leaf))
###                                   ("_applC" ("_position" Node)
###                                     ("_cargs" ("_position" A)
### ("_cargs" ("_position" a)
###   ("_applC" ("_position" Node)
###     ("_cargs" ("_position" B)
###       ("_cargs" ("_position" b) ("_position" CD)))))))
###                                   ("_case_syntax"
###                                     ("_applC" ("_position" splay)
### ("_cargs" ("_position" x) ("_position" B)))
###                                     ("_case1"
### ("_applC" ("_position" Node)
###   ("_cargs" ("_position" B\<^sub>1)
###     ("_cargs" ("_position" b') ("_position" B\<^sub>2))))
### ("_applC" ("_position" Node)
###   ("_cargs"
###     ("_applC" ("_position" Node)
###       ("_cargs" ("_position" A)
###         ("_cargs" ("_position" a) ("_position" B\<^sub>1))))
###     ("_cargs" ("_position" b')
###       ("_applC" ("_position" Node)
###         ("_cargs" ("_position" B\<^sub>2)
###           ("_cargs" ("_position" b) ("_position" CD)))))))))))))))))))))
###           ("_case1" ("_position" GT)
###             ("_case_syntax" ("_position" CD)
###               ("_case2"
###                 ("_case1" ("_position" Leaf)
###                   ("_applC" ("_position" Node)
###                     ("_cargs" ("_position" AB)
###                       ("_cargs" ("_position" b) ("_position" CD)))))
###                 ("_case1"
###                   ("_applC" ("_position" Node)
###                     ("_cargs" ("_position" C)
###                       ("_cargs" ("_position" c) ("_position" D))))
###                   ("_case_syntax"
###                     ("_applC" ("_position" cmp)
###                       ("_cargs" ("_position" x) ("_position" c)))
###                     ("_case2"
###                       ("_case1" ("_position" EQ)
###                         ("_applC" ("_position" Node)
###                           ("_cargs"
###                             ("_applC" ("_position" Node)
###                               ("_cargs" ("_position" AB)
###                                 ("_cargs" ("_position" b) ("_position" C))))
###                             ("_cargs" ("_position" c) ("_position" D)))))
###                       ("_case2"
###                         ("_case1" ("_position" LT)
###                           ("\<^const>HOL.If"
###                             ("\<^const>HOL.eq" ("_position" C)
###                               ("_position" Leaf))
###                             ("_applC" ("_position" Node)
###                               ("_cargs"
###                                 ("_applC" ("_position" Node)
###                                   ("_cargs" ("_position" AB)
###                                     ("_cargs" ("_position" b)
### ("_position" C))))
###                                 ("_cargs" ("_position" c) ("_position" D))))
###                             ("_case_syntax"
###                               ("_applC" ("_position" splay)
###                                 ("_cargs" ("_position" x) ("_position" C)))
###                               ("_case1"
###                                 ("_applC" ("_position" Node)
###                                   ("_cargs" ("_position" C\<^sub>1)
###                                     ("_cargs" ("_position" c')
### ("_position" C\<^sub>2))))
###                                 ("_applC" ("_position" Node)
###                                   ("_cargs"
###                                     ("_applC" ("_position" Node)
### ("_cargs" ("_position" AB)
###   ("_cargs" ("_position" b) ("_position" C\<^sub>1))))
###                                     ("_cargs" ("_position" c')
### ("_applC" ("_position" Node)
###   ("_cargs" ("_position" C\<^sub>2)
###     ("_cargs" ("_position" c) ("_position" D)))))))))))
###                         ("_case1" ("_position" GT)
###                           ("\<^const>HOL.If"
###                             ("\<^const>HOL.eq" ("_position" D)
###                               ("_position" Leaf))
###                             ("_applC" ("_position" Node)
###                               ("_cargs"
###                                 ("_applC" ("_position" Node)
###                                   ("_cargs" ("_position" AB)
###                                     ("_cargs" ("_position" b)
### ("_position" C))))
###                                 ("_cargs" ("_position" c) ("_position" D))))
###                             ("_case_syntax"
###                               ("_applC" ("_position" splay)
###                                 ("_cargs" ("_position" x) ("_position" D)))
###                               ("_case1"
###                                 ("_applC" ("_position" Node)
###                                   ("_cargs" ("_position" D\<^sub>1)
###                                     ("_cargs" ("_position" d)
### ("_position" D\<^sub>2))))
###                                 ("_applC" ("_position" Node)
###                                   ("_cargs"
###                                     ("_applC" ("_position" Node)
### ("_cargs"
###   ("_applC" ("_position" Node)
###     ("_cargs" ("_position" AB) ("_cargs" ("_position" b) ("_position" C))))
###   ("_cargs" ("_position" c) ("_position" D\<^sub>1))))
###                                     ("_cargs" ("_position" d)
### ("_position" D\<^sub>2))))))))))))))))))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("_applC" ("_position" splay)
###       ("_cargs" ("_position" x)
###         ("_applC" ("_position" Node)
###           ("_cargs" ("_position" AB)
###             ("_cargs" ("_position" b) ("_position" CD))))))
###     ("_case_syntax"
###       ("_applC" ("_position" cmp)
###         ("_cargs" ("_position" x) ("_position" b)))
###       ("_case2"
###         ("_case1" ("_position" EQ)
###           ("_applC" ("_position" Node)
###             ("_cargs" ("_position" AB)
###               ("_cargs" ("_position" b) ("_position" CD)))))
###         ("_case2"
###           ("_case1" ("_position" LT)
###             ("_case_syntax" ("_position" AB)
###               ("_case2"
###                 ("_case1" ("_position" Leaf)
###                   ("_applC" ("_position" Node)
###                     ("_cargs" ("_position" AB)
###                       ("_cargs" ("_position" b) ("_position" CD)))))
###                 ("_case1"
###                   ("_applC" ("_position" Node)
###                     ("_cargs" ("_position" A)
###                       ("_cargs" ("_position" a) ("_position" B))))
###                   ("_case_syntax"
###                     ("_applC" ("_position" cmp)
###                       ("_cargs" ("_position" x) ("_position" a)))
###                     ("_case2"
###                       ("_case1" ("_position" EQ)
###                         ("_applC" ("_position" Node)
###                           ("_cargs" ("_position" A)
###                             ("_cargs" ("_position" a)
###                               ("_applC" ("_position" Node)
###                                 ("_cargs" ("_position" B)
###                                   ("_cargs" ("_position" b)
###                                     ("_position" CD))))))))
###                       ("_case2"
###                         ("_case1" ("_position" LT)
###                           ("\<^const>HOL.If"
###                             ("\<^const>HOL.eq" ("_position" A)
###                               ("_position" Leaf))
###                             ("_applC" ("_position" Node)
###                               ("_cargs" ("_position" A)
###                                 ("_cargs" ("_position" a)
###                                   ("_applC" ("_position" Node)
###                                     ("_cargs" ("_position" B)
### ("_cargs" ("_position" b) ("_position" CD)))))))
###                             ("_case_syntax"
###                               ("_applC" ("_position" splay)
###                                 ("_cargs" ("_position" x) ("_position" A)))
###                               ("_case1"
###                                 ("_applC" ("_position" Node)
###                                   ("_cargs" ("_position" A\<^sub>1)
###                                     ("_cargs" ("_position" a')
### ("_position" A\<^sub>2))))
###                                 ("_applC" ("_position" Node)
###                                   ("_cargs" ("_position" A\<^sub>1)
###                                     ("_cargs" ("_position" a')
### ("_applC" ("_position" Node)
###   ("_cargs" ("_position" A\<^sub>2)
###     ("_cargs" ("_position" a)
###       ("_applC" ("_position" Node)
###         ("_cargs" ("_position" B)
###           ("_cargs" ("_position" b) ("_position" CD))))))))))))))
###                         ("_case1" ("_position" GT)
###                           ("\<^const>HOL.If"
###                             ("\<^const>HOL.eq" ("_position" B)
###                               ("_position" Leaf))
###                             ("_applC" ("_position" Node)
###                               ("_cargs" ("_position" A)
###                                 ("_cargs" ("_position" a)
###                                   ("_applC" ("_position" Node)
###                                     ("_cargs" ("_position" B)
### ("_cargs" ("_position" b) ("_position" CD)))))))
###                             ("_case_syntax"
###                               ("_applC" ("_position" splay)
###                                 ("_cargs" ("_position" x) ("_position" B)))
###                               ("_case1"
###                                 ("_applC" ("_position" Node)
###                                   ("_cargs" ("_position" B\<^sub>1)
###                                     ("_cargs" ("_position" b')
### ("_position" B\<^sub>2))))
###                                 ("_applC" ("_position" Node)
###                                   ("_cargs"
###                                     ("_applC" ("_position" Node)
### ("_cargs" ("_position" A)
###   ("_cargs" ("_position" a) ("_position" B\<^sub>1))))
###                                     ("_cargs" ("_position" b')
### ("_applC" ("_position" Node)
###   ("_cargs" ("_position" B\<^sub>2)
###     ("_cargs" ("_position" b) ("_position" CD))))))))))))))))))
###           ("_case1" ("_position" GT)
###             ("_case_syntax" ("_position" CD)
###               ("_case2"
###                 ("_case1" ("_position" Leaf)
###                   ("_applC" ("_position" Node)
###                     ("_cargs" ("_position" AB)
###                       ("_cargs" ("_position" b) ("_position" CD)))))
###                 ("_case1"
###                   ("_applC" ("_position" Node)
###                     ("_cargs" ("_position" C)
###                       ("_cargs" ("_position" c) ("_position" D))))
###                   ("_case_syntax"
###                     ("_applC" ("_position" cmp)
###                       ("_cargs" ("_position" x) ("_position" c)))
###                     ("_case2"
###                       ("_case1" ("_position" EQ)
###                         ("_applC" ("_position" Node)
###                           ("_cargs"
###                             ("_applC" ("_position" Node)
###                               ("_cargs" ("_position" AB)
###                                 ("_cargs" ("_position" b) ("_position" C))))
###                             ("_cargs" ("_position" c) ("_position" D)))))
###                       ("_case2"
###                         ("_case1" ("_position" LT)
###                           ("\<^const>HOL.If"
###                             ("\<^const>HOL.eq" ("_position" C)
###                               ("_position" Leaf))
###                             ("_applC" ("_position" Node)
###                               ("_cargs"
###                                 ("_applC" ("_position" Node)
###                                   ("_cargs" ("_position" AB)
###                                     ("_cargs" ("_position" b)
### ("_position" C))))
###                                 ("_cargs" ("_position" c) ("_position" D))))
###                             ("_case_syntax"
###                               ("_applC" ("_position" splay)
###                                 ("_cargs" ("_position" x) ("_position" C)))
###                               ("_case1"
###                                 ("_applC" ("_position" Node)
###                                   ("_cargs" ("_position" C\<^sub>1)
###                                     ("_cargs" ("_position" c')
### ("_position" C\<^sub>2))))
###                                 ("_applC" ("_position" Node)
###                                   ("_cargs"
###                                     ("_applC" ("_position" Node)
### ("_cargs" ("_position" AB)
###   ("_cargs" ("_position" b) ("_position" C\<^sub>1))))
###                                     ("_cargs" ("_position" c')
### ("_applC" ("_position" Node)
###   ("_cargs" ("_position" C\<^sub>2)
###     ("_cargs" ("_position" c) ("_position" D)))))))))))
###                         ("_case1" ("_position" GT)
###                           ("\<^const>HOL.If"
###                             ("\<^const>HOL.eq" ("_position" D)
###                               ("_position" Leaf))
###                             ("_applC" ("_position" Node)
###                               ("_cargs"
###                                 ("_applC" ("_position" Node)
###                                   ("_cargs" ("_position" AB)
###                                     ("_cargs" ("_position" b)
### ("_position" C))))
###                                 ("_cargs" ("_position" c) ("_position" D))))
###                             ("_case_syntax"
###                               ("_applC" ("_position" splay)
###                                 ("_cargs" ("_position" x) ("_position" D)))
###                               ("_case1"
###                                 ("_applC" ("_position" Node)
###                                   ("_cargs" ("_position" D\<^sub>1)
###                                     ("_cargs" ("_position" d)
### ("_position" D\<^sub>2))))
###                                 ("_applC" ("_position" Node)
###                                   ("_cargs"
###                                     ("_applC" ("_position" Node)
### ("_cargs"
###   ("_applC" ("_position" Node)
###     ("_cargs" ("_position" AB) ("_cargs" ("_position" b) ("_position" C))))
###   ("_cargs" ("_position" c) ("_position" D\<^sub>1))))
###                                     ("_cargs" ("_position" d)
### ("_position" D\<^sub>2))))))))))))))))))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 86 of "$AFP/Splay_Tree/Splay_Tree.thy") produces 3 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("_applC" ("_position" insert)
###       ("_cargs" ("_position" x) ("_position" t)))
###     ("\<^const>HOL.If"
###       ("\<^const>HOL.eq" ("_position" t) ("_position" Leaf))
###       ("_applC" ("_position" Node)
###         ("_cargs" ("_position" Leaf)
###           ("_cargs" ("_position" x) ("_position" Leaf))))
###       ("_case_syntax"
###         ("_applC" ("_position" splay)
###           ("_cargs" ("_position" x) ("_position" t)))
###         ("_case1"
###           ("_applC" ("_position" Node)
###             ("_cargs" ("_position" l)
###               ("_cargs" ("_position" a) ("_position" r))))
###           ("_case_syntax"
###             ("_applC" ("_position" cmp)
###               ("_cargs" ("_position" x) ("_position" a)))
###             ("_case2"
###               ("_case1" ("_position" EQ)
###                 ("_applC" ("_position" Node)
###                   ("_cargs" ("_position" l)
###                     ("_cargs" ("_position" a) ("_position" r)))))
###               ("_case2"
###                 ("_case1" ("_position" LT)
###                   ("_applC" ("_position" Node)
###                     ("_cargs" ("_position" l)
###                       ("_cargs" ("_position" x)
###                         ("_applC" ("_position" Node)
###                           ("_cargs" ("_position" Leaf)
###                             ("_cargs" ("_position" a) ("_position" r))))))))
###                 ("_case1" ("_position" GT)
###                   ("_applC" ("_position" Node)
###                     ("_cargs"
###                       ("_applC" ("_position" Node)
###                         ("_cargs" ("_position" l)
###                           ("_cargs" ("_position" a) ("_position" Leaf))))
###                       ("_cargs" ("_position" x) ("_position" r)))))))))))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("_applC" ("_position" insert)
###       ("_cargs" ("_position" x) ("_position" t)))
###     ("\<^const>HOL.If"
###       ("\<^const>HOL.eq" ("_position" t) ("_position" Leaf))
###       ("_applC" ("_position" Node)
###         ("_cargs" ("_position" Leaf)
###           ("_cargs" ("_position" x) ("_position" Leaf))))
###       ("_case_syntax"
###         ("_applC" ("_position" splay)
###           ("_cargs" ("_position" x) ("_position" t)))
###         ("_case2"
###           ("_case1"
###             ("_applC" ("_position" Node)
###               ("_cargs" ("_position" l)
###                 ("_cargs" ("_position" a) ("_position" r))))
###             ("_case_syntax"
###               ("_applC" ("_position" cmp)
###                 ("_cargs" ("_position" x) ("_position" a)))
###               ("_case1" ("_position" EQ)
###                 ("_applC" ("_position" Node)
###                   ("_cargs" ("_position" l)
###                     ("_cargs" ("_position" a) ("_position" r)))))))
###           ("_case2"
###             ("_case1" ("_position" LT)
###               ("_applC" ("_position" Node)
###                 ("_cargs" ("_position" l)
###                   ("_cargs" ("_position" x)
###                     ("_applC" ("_position" Node)
###                       ("_cargs" ("_position" Leaf)
###                         ("_cargs" ("_position" a) ("_position" r))))))))
###             ("_case1" ("_position" GT)
###               ("_applC" ("_position" Node)
###                 ("_cargs"
###                   ("_applC" ("_position" Node)
###                     ("_cargs" ("_position" l)
###                       ("_cargs" ("_position" a) ("_position" Leaf))))
###                   ("_cargs" ("_position" x) ("_position" r)))))))))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("_applC" ("_position" insert)
###       ("_cargs" ("_position" x) ("_position" t)))
###     ("\<^const>HOL.If"
###       ("\<^const>HOL.eq" ("_position" t) ("_position" Leaf))
###       ("_applC" ("_position" Node)
###         ("_cargs" ("_position" Leaf)
###           ("_cargs" ("_position" x) ("_position" Leaf))))
###       ("_case_syntax"
###         ("_applC" ("_position" splay)
###           ("_cargs" ("_position" x) ("_position" t)))
###         ("_case2"
###           ("_case1"
###             ("_applC" ("_position" Node)
###               ("_cargs" ("_position" l)
###                 ("_cargs" ("_position" a) ("_position" r))))
###             ("_case_syntax"
###               ("_applC" ("_position" cmp)
###                 ("_cargs" ("_position" x) ("_position" a)))
###               ("_case2"
###                 ("_case1" ("_position" EQ)
###                   ("_applC" ("_position" Node)
###                     ("_cargs" ("_position" l)
###                       ("_cargs" ("_position" a) ("_position" r)))))
###                 ("_case1" ("_position" LT)
###                   ("_applC" ("_position" Node)
###                     ("_cargs" ("_position" l)
###                       ("_cargs" ("_position" x)
###                         ("_applC" ("_position" Node)
###                           ("_cargs" ("_position" Leaf)
###                             ("_cargs" ("_position" a)
###                               ("_position" r)))))))))))
###           ("_case1" ("_position" GT)
###             ("_applC" ("_position" Node)
###               ("_cargs"
###                 ("_applC" ("_position" Node)
###                   ("_cargs" ("_position" l)
###                     ("_cargs" ("_position" a) ("_position" Leaf))))
###                 ("_cargs" ("_position" x) ("_position" r))))))))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
Found termination order: "{}"
Found termination order: "size <*mlex*> {}"
### theory "Splay_Tree.Splay_Tree"
### 1.282s elapsed time, 2.757s cpu time, 0.867s GC time
Loading theory "Draft.Splay_Tree_Analysis_Base" (required by "Draft.Splay_Tree_Analysis_OptimalMoreTemplates" via "Draft.Splay_Tree_Analysis_Optimal")
Found termination order: "size <*mlex*> {}"
Found termination order: "(%p. size (snd p)) <*mlex*> {}"
Found termination order: "size <*mlex*> {}"
Found termination order: "{}"
### Missing patterns in function definition:
### !!v. exec (Splay v) [] = undefined
### !!v va vc vd. exec (Splay v) (va # vc # vd) = undefined
### !!v. exec (Insert v) [] = undefined
### (7 more)
Found termination order: "{}"
### Missing patterns in function definition:
### !!v. cost (Splay v) [] = undefined
### !!v va vc vd. cost (Splay v) (va # vc # vd) = undefined
### !!v. cost (Insert v) [] = undefined
### (7 more)
Found termination order: "{}"
### theory "Draft.Splay_Tree_Analysis_Base"
### 1.455s elapsed time, 1.676s cpu time, 0.138s GC time
Loading theory "Draft.Splay_Tree_Analysis_Optimal" (required by "Draft.Splay_Tree_Analysis_OptimalMoreTemplates")
locale Splay_Analysis
  fixes \<alpha> :: "real"
    and \<beta> :: "real"
  assumes "Splay_Analysis \<alpha> \<beta>"
Found termination order: "size <*mlex*> {}"
### Missing patterns in function definition:
### !!v. U (Splay v) [] = undefined
### !!v va vc vd. U (Splay v) (va # vc # vd) = undefined
### !!v. U (Insert v) [] = undefined
### (7 more)
Found termination order: "{}"
### theory "Draft.Splay_Tree_Analysis_Optimal"
### 0.834s elapsed time, 0.953s cpu time, 0.082s GC time
Loading theory "Draft.Splay_Tree_Analysis_OptimalMoreTemplates"
val templateLemmas =
   [("Splay_Tree_Analysis_Optimal.inv_state",
     "Splay_Tree_Analysis_Optimal.wf ?ot ==> bst (state ?ot)",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 5, template_hole 4),
              template_var 0)
            )],
       template_predicate
        (
           template_app
            (template_app (template_hole 3, template_hole 2),
             template_app
              (template_app (template_hole 1, template_hole 0),
               template_var 0))
           ))),
    ("Splay_Tree_Analysis_Optimal.t_sum_le_U_sum",
     "Splay_Tree_Analysis_Optimal.wf ?ot ==> cost_sum ?ot <= U_sum ?ot",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 7, template_hole 6),
              template_var 0)
            )],
       template_inequation
        (less_equals,
         template_app
          (template_app
            (template_app (template_hole 4, template_hole 3),
             template_hole 2),
           template_var 0),
         template_app
          (template_app
            (template_app (template_hole 1, template_hole 3),
             template_hole 0),
           template_var 0)))),
    ("Splay_Tree_Analysis_Optimal.log4_log2", "log 4 ?x = log 2 ?x / 2",
     template_equation
      (template_app
        (template_app
          (template_hole 4,
           template_app
            (template_hole 3,
             template_app
              (template_hole 2,
               template_app (template_hole 2, template_hole 1)))),
         template_var 0),
       template_app
        (template_app
          (template_hole 0,
           template_app
            (template_app
              (template_hole 4,
               template_app
                (template_hole 3,
                 template_app (template_hole 2, template_hole 1))),
             template_var 0)),
         template_app
          (template_hole 3,
           template_app (template_hole 2, template_hole 1))))),
    ("Splay_Tree_Analysis_Optimal.powr_inverse_numeral",
     "0 < ?x ==> ?x powr (1 / numeral ?n) = root (numeral ?n) ?x",
     template_implication
      ([template_inequation (less_than, template_hole 7, template_var 1)],
       template_equation
        (template_app
          (template_app (template_hole 5, template_var 1),
           template_app
            (template_app (template_hole 4, template_hole 3),
             template_app (template_hole 2, template_var 0))),
         template_app
          (template_app
            (template_hole 1,
             template_app (template_hole 0, template_var 0)),
           template_var 1)))),
    ("Splay_Tree_Analysis_Optimal.inv_exec",
     "[| Ball (set ?ss) bst; length ?ss = arity ?f |]
      ==> bst (exec ?f ?ss)",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_hole 7,
                template_app (template_hole 6, template_var 1)),
              t_empty)
            ),
        template_equation
         (template_app (template_hole 2, template_var 1),
          template_app (template_hole 1, template_var 0))],
       template_predicate
        (
           template_app
            (template_app (template_hole 5, template_hole 4),
             template_app
              (template_app (template_hole 0, template_var 0),
               template_var 1))
           ))),
    ("Splay_Tree_Analysis_Optimal.ppos", "bst ?s ==> 0 <= S34.\<Phi> ?s",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 12, template_hole 11),
              template_var 0)
            )],
       template_inequation
        (less_equals, template_hole 9,
         template_app
          (template_app
            (template_app
              (template_hole 8,
               template_app
                (template_app
                  (template_hole 7,
                   template_app
                    (template_hole 6,
                     template_app (template_hole 5, template_hole 4))),
                 template_app
                  (template_hole 3,
                   template_app
                    (template_hole 2,
                     template_app (template_hole 2, template_hole 4))))),
             template_app
              (template_app (template_hole 1, template_hole 0),
               template_app
                (template_hole 3,
                 template_app (template_hole 5, template_hole 4)))),
           template_var 0)))),
    ("Splay_Tree_Analysis_Optimal.mult_root_eq_root2",
     "[| 0 < ?n; 0 <= ?y |] ==> ?y * root ?n ?x = root ?n (?y ^ ?n * ?x)",
     template_implication
      ([template_inequation (less_than, template_hole 6, template_var 2),
        template_inequation (less_equals, template_hole 4, template_var 1)],
       template_equation
        (template_app
          (template_app (template_hole 2, template_var 1),
           template_app
            (template_app (template_hole 1, template_var 2),
             template_var 0)),
         template_app
          (template_app (template_hole 1, template_var 2),
           template_app
            (template_app
              (template_hole 2,
               template_app
                (template_app (template_hole 0, template_var 1),
                 template_var 2)),
             template_var 0))))),
    ("Splay_Tree_Analysis_Optimal.mult_root_eq_root",
     "[| 0 < ?n; 0 <= ?y |] ==> root ?n ?x * ?y = root ?n (?x * ?y ^ ?n)",
     template_implication
      ([template_inequation (less_than, template_hole 6, template_var 2),
        template_inequation (less_equals, template_hole 4, template_var 1)],
       template_equation
        (template_app
          (template_app
            (template_hole 2,
             template_app
              (template_app (template_hole 1, template_var 2),
               template_var 0)),
           template_var 1),
         template_app
          (template_app (template_hole 1, template_var 2),
           template_app
            (template_app (template_hole 2, template_var 0),
             template_app
              (template_app (template_hole 0, template_var 1),
               template_var 2)))))),
    ("Splay_Tree_Analysis_Optimal.t_sum_le_a_sum",
     "Splay_Tree_Analysis_Optimal.wf ?ot ==> cost_sum ?ot <= acost_sum ?ot",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 15, template_hole 14),
              template_var 0)
            )],
       template_inequation
        (less_equals,
         template_app
          (template_app
            (template_app (template_hole 12, template_hole 11),
             template_hole 10),
           template_var 0),
         template_app
          (template_app
            (template_app
              (template_app (template_hole 9, template_hole 11),
               template_hole 10),
             template_app
              (template_app
                (template_hole 8,
                 template_app
                  (template_app
                    (template_hole 7,
                     template_app
                      (template_hole 6,
                       template_app (template_hole 5, template_hole 4))),
                   template_app
                    (template_hole 3,
                     template_app
                      (template_hole 2,
                       template_app (template_hole 2, template_hole 4))))),
               template_app
                (template_app (template_hole 1, template_hole 0),
                 template_app
                  (template_hole 3,
                   template_app (template_hole 5, template_hole 4))))),
           template_var 0)))),
    ("Splay_Tree_Analysis_Optimal.a_sum_le_U_sum",
     "Splay_Tree_Analysis_Optimal.wf ?ot ==> acost_sum ?ot <= U_sum ?ot",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 16, template_hole 15),
              template_var 0)
            )],
       template_inequation
        (less_equals,
         template_app
          (template_app
            (template_app
              (template_app (template_hole 13, template_hole 12),
               template_hole 11),
             template_app
              (template_app
                (template_hole 10,
                 template_app
                  (template_app
                    (template_hole 9,
                     template_app
                      (template_hole 8,
                       template_app (template_hole 7, template_hole 6))),
                   template_app
                    (template_hole 5,
                     template_app
                      (template_hole 4,
                       template_app (template_hole 4, template_hole 6))))),
               template_app
                (template_app (template_hole 3, template_hole 2),
                 template_app
                  (template_hole 5,
                   template_app (template_hole 7, template_hole 6))))),
           template_var 0),
         template_app
          (template_app
            (template_app (template_hole 1, template_hole 12),
             template_hole 0),
           template_var 0)))),
    ("Splay_Tree_Analysis_Optimal.Am34_ub",
     "bst ?t ==> S34.Am ?t <= 3 / 2 * \<phi> ?t + 1",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 16, template_hole 15),
              template_var 0)
            )],
       template_inequation
        (less_equals,
         template_app
          (template_app
            (template_app
              (template_hole 13,
               template_app
                (template_app
                  (template_hole 12,
                   template_app
                    (template_hole 11,
                     template_app (template_hole 10, template_hole 9))),
                 template_app
                  (template_hole 8,
                   template_app
                    (template_hole 7,
                     template_app (template_hole 7, template_hole 9))))),
             template_app
              (template_app (template_hole 6, template_hole 5),
               template_app
                (template_hole 8,
                 template_app (template_hole 10, template_hole 9)))),
           template_var 0),
         template_app
          (template_app
            (template_hole 4,
             template_app
              (template_app
                (template_hole 3,
                 template_app
                  (template_app
                    (template_hole 6,
                     template_app
                      (template_hole 8,
                       template_app (template_hole 10, template_hole 9))),
                   template_app
                    (template_hole 8,
                     template_app (template_hole 7, template_hole 9)))),
               template_app
                (template_app
                  (template_hole 2,
                   template_app
                    (template_hole 8,
                     template_app (template_hole 7, template_hole 9))),
                 template_app
                  (template_hole 1,
                   template_app (template_hole 0, template_var 0))))),
           template_hole 5)))),
    ("Splay_Tree_Analysis_Optimal.A34_ub",
     "bst ?t ==> S34.A ?a ?t <= 3 / 2 * \<phi> ?t + 1",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 16, template_hole 15),
              template_var 1)
            )],
       template_inequation
        (less_equals,
         template_app
          (template_app
            (template_app
              (template_app
                (template_hole 13,
                 template_app
                  (template_app
                    (template_hole 12,
                     template_app
                      (template_hole 11,
                       template_app (template_hole 10, template_hole 9))),
                   template_app
                    (template_hole 8,
                     template_app
                      (template_hole 7,
                       template_app (template_hole 7, template_hole 9))))),
               template_app
                (template_app (template_hole 6, template_hole 5),
                 template_app
                  (template_hole 8,
                   template_app (template_hole 10, template_hole 9)))),
             template_var 0),
           template_var 1),
         template_app
          (template_app
            (template_hole 4,
             template_app
              (template_app
                (template_hole 3,
                 template_app
                  (template_app
                    (template_hole 6,
                     template_app
                      (template_hole 8,
                       template_app (template_hole 10, template_hole 9))),
                   template_app
                    (template_hole 8,
                     template_app (template_hole 7, template_hole 9)))),
               template_app
                (template_app
                  (template_hole 2,
                   template_app
                    (template_hole 8,
                     template_app (template_hole 7, template_hole 9))),
                 template_app
                  (template_hole 1,
                   template_app (template_hole 0, template_var 1))))),
           template_hole 5)))),
    ("Splay_Tree_Analysis_Optimal.cancel",
     "[| 0 < ?x; ?c * ?x\<^sup>2 * ?y * ?z <= ?u * ?v |]
      ==> ?c * ?x ^ 3 * ?y * ?z <= ?x * ?u * ?v",
     template_implication
      ([template_inequation (less_than, template_hole 7, template_var 5),
        template_inequation
         (less_equals,
          template_app
           (template_app
             (template_hole 5,
              template_app
               (template_app
                 (template_hole 5,
                  template_app
                   (template_app (template_hole 5, template_var 4),
                    template_app
                     (template_app (template_hole 4, template_var 5),
                      template_app
                       (template_hole 3,
                        template_app (template_hole 2, template_hole 1))))),
                template_var 3)),
            template_var 2),
          template_app
           (template_app (template_hole 5, template_var 1),
            template_var 0))],
       template_inequation
        (less_equals,
         template_app
          (template_app
            (template_hole 5,
             template_app
              (template_app
                (template_hole 5,
                 template_app
                  (template_app (template_hole 5, template_var 4),
                   template_app
                    (template_app (template_hole 4, template_var 5),
                     template_app
                      (template_hole 3,
                       template_app (template_hole 0, template_hole 1))))),
               template_var 3)),
           template_var 2),
         template_app
          (template_app
            (template_hole 5,
             template_app
              (template_app (template_hole 5, template_var 5),
               template_var 1)),
           template_var 0)))),
    ("Splay_Tree_Analysis_Optimal.a_le_U",
     "[| Ball (set ?ss) bst; length ?ss = arity ?f |]
      ==> acost ?f ?ss <= U ?f ?ss",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_hole 20,
                template_app (template_hole 19, template_var 1)),
              t_empty)
            ),
        template_equation
         (template_app (template_hole 15, template_var 1),
          template_app (template_hole 14, template_var 0))],
       template_inequation
        (less_equals,
         template_app
          (template_app
            (template_app
              (template_app
                (template_app (template_hole 12, template_hole 11),
                 template_hole 10),
               template_app
                (template_app
                  (template_hole 9,
                   template_app
                    (template_app
                      (template_hole 8,
                       template_app
                        (template_hole 7,
                         template_app (template_hole 6, template_hole 5))),
                     template_app
                      (template_hole 4,
                       template_app
                        (template_hole 3,
                         template_app
                          (template_hole 3, template_hole 5))))),
                 template_app
                  (template_app (template_hole 2, template_hole 1),
                   template_app
                    (template_hole 4,
                     template_app (template_hole 6, template_hole 5))))),
             template_var 0),
           template_var 1),
         template_app
          (template_app (template_hole 0, template_var 0),
           template_var 1)))),
    ("Splay_Tree_Analysis_Optimal.nl41",
     "[| 1 <= ?l'; 1 <= ?r'; 1 <= ?ll; 1 <= ?r |]
      ==> 4 * (?l' + ?ll) * (?r' + ?r) <= (?l' + ?ll + ?r' + ?r)\<^sup>2",
     template_implication
      ([template_inequation (less_equals, template_hole 7, template_var 3),
        template_inequation (less_equals, template_hole 7, template_var 2),
        template_inequation (less_equals, template_hole 7, template_var 1),
        template_inequation (less_equals, template_hole 7, template_var 0)],
       template_inequation
        (less_equals,
         template_app
          (template_app
            (template_hole 6,
             template_app
              (template_app
                (template_hole 6,
                 template_app
                  (template_hole 5,
                   template_app
                    (template_hole 4,
                     template_app (template_hole 4, template_hole 3)))),
               template_app
                (template_app (template_hole 2, template_var 3),
                 template_var 1))),
           template_app
            (template_app (template_hole 2, template_var 2),
             template_var 0)),
         template_app
          (template_app
            (template_hole 1,
             template_app
              (template_app
                (template_hole 2,
                 template_app
                  (template_app
                    (template_hole 2,
                     template_app
                      (template_app (template_hole 2, template_var 3),
                       template_var 1)),
                   template_var 2)),
               template_var 0)),
           template_app
            (template_hole 0,
             template_app (template_hole 4, template_hole 3)))))),
    ("Splay_Tree_Analysis_Optimal.nl31",
     "[| 1 <= ?l'; 1 <= ?r'; 1 <= ?lr; 1 <= ?r |]
      ==> 4 * (?l' + ?r') * (?lr + ?r) <= (?l' + ?lr + ?r' + ?r)\<^sup>2",
     template_implication
      ([template_inequation (less_equals, template_hole 7, template_var 3),
        template_inequation (less_equals, template_hole 7, template_var 2),
        template_inequation (less_equals, template_hole 7, template_var 1),
        template_inequation (less_equals, template_hole 7, template_var 0)],
       template_inequation
        (less_equals,
         template_app
          (template_app
            (template_hole 6,
             template_app
              (template_app
                (template_hole 6,
                 template_app
                  (template_hole 5,
                   template_app
                    (template_hole 4,
                     template_app (template_hole 4, template_hole 3)))),
               template_app
                (template_app (template_hole 2, template_var 3),
                 template_var 2))),
           template_app
            (template_app (template_hole 2, template_var 1),
             template_var 0)),
         template_app
          (template_app
            (template_hole 1,
             template_app
              (template_app
                (template_hole 2,
                 template_app
                  (template_app
                    (template_hole 2,
                     template_app
                      (template_app (template_hole 2, template_var 3),
                       template_var 1)),
                   template_var 2)),
               template_var 0)),
           template_app
            (template_hole 0,
             template_app (template_hole 4, template_hole 3)))))),
    ("Splay_Tree_Analysis_Optimal.t_sum_a_sum",
     "Splay_Tree_Analysis_Optimal.wf ?ot ==>
      cost_sum ?ot = acost_sum ?ot - S34.\<Phi> (state ?ot)",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 17, template_hole 16),
              template_var 0)
            )],
       template_equation
        (template_app
          (template_app
            (template_app (template_hole 14, template_hole 13),
             template_hole 12),
           template_var 0),
         template_app
          (template_app
            (template_hole 11,
             template_app
              (template_app
                (template_app
                  (template_app (template_hole 10, template_hole 13),
                   template_hole 12),
                 template_app
                  (template_app
                    (template_hole 9,
                     template_app
                      (template_app
                        (template_hole 8,
                         template_app
                          (template_hole 7,
                           template_app
                            (template_hole 6, template_hole 5))),
                       template_app
                        (template_hole 4,
                         template_app
                          (template_hole 3,
                           template_app
                            (template_hole 3, template_hole 5))))),
                   template_app
                    (template_app (template_hole 2, template_hole 1),
                     template_app
                      (template_hole 4,
                       template_app (template_hole 6, template_hole 5))))),
               template_var 0)),
           template_app
            (template_app
              (template_app
                (template_hole 9,
                 template_app
                  (template_app
                    (template_hole 8,
                     template_app
                      (template_hole 7,
                       template_app (template_hole 6, template_hole 5))),
                   template_app
                    (template_hole 4,
                     template_app
                      (template_hole 3,
                       template_app (template_hole 3, template_hole 5))))),
               template_app
                (template_app (template_hole 2, template_hole 1),
                 template_app
                  (template_hole 4,
                   template_app (template_hole 6, template_hole 5)))),
             template_app
              (template_app (template_hole 0, template_hole 13),
               template_var 0)))))),
    ("Splay_Tree_Analysis_Optimal.nl42",
     "[| 1 <= ?l'; 1 <= ?r'; 1 <= ?ll; 1 <= ?r |]
      ==> 4 * (?l' + ?r') * (?l' + ?ll) * (?r' + ?r)
          <= (?l' + ?ll + ?r' + ?r) ^ 3",
     template_implication
      ([template_inequation (less_equals, template_hole 8, template_var 3),
        template_inequation (less_equals, template_hole 8, template_var 2),
        template_inequation (less_equals, template_hole 8, template_var 1),
        template_inequation (less_equals, template_hole 8, template_var 0)],
       template_inequation
        (less_equals,
         template_app
          (template_app
            (template_hole 7,
             template_app
              (template_app
                (template_hole 7,
                 template_app
                  (template_app
                    (template_hole 7,
                     template_app
                      (template_hole 6,
                       template_app
                        (template_hole 5,
                         template_app (template_hole 5, template_hole 4)))),
                   template_app
                    (template_app (template_hole 3, template_var 3),
                     template_var 2))),
               template_app
                (template_app (template_hole 3, template_var 3),
                 template_var 1))),
           template_app
            (template_app (template_hole 3, template_var 2),
             template_var 0)),
         template_app
          (template_app
            (template_hole 2,
             template_app
              (template_app
                (template_hole 3,
                 template_app
                  (template_app
                    (template_hole 3,
                     template_app
                      (template_app (template_hole 3, template_var 3),
                       template_var 1)),
                   template_var 2)),
               template_var 0)),
           template_app
            (template_hole 1,
             template_app (template_hole 0, template_hole 4)))))),
    ("Splay_Tree_Analysis_Optimal.nl32",
     "[| 1 <= ?l'; 1 <= ?r'; 1 <= ?lr; 1 <= ?r |]
      ==> 4 * (?l' + ?r') * (?lr + ?r) * (?lr + ?r' + ?r)
          <= (?l' + ?lr + ?r' + ?r) ^ 3",
     template_implication
      ([template_inequation (less_equals, template_hole 8, template_var 3),
        template_inequation (less_equals, template_hole 8, template_var 2),
        template_inequation (less_equals, template_hole 8, template_var 1),
        template_inequation (less_equals, template_hole 8, template_var 0)],
       template_inequation
        (less_equals,
         template_app
          (template_app
            (template_hole 7,
             template_app
              (template_app
                (template_hole 7,
                 template_app
                  (template_app
                    (template_hole 7,
                     template_app
                      (template_hole 6,
                       template_app
                        (template_hole 5,
                         template_app (template_hole 5, template_hole 4)))),
                   template_app
                    (template_app (template_hole 3, template_var 3),
                     template_var 2))),
               template_app
                (template_app (template_hole 3, template_var 1),
                 template_var 0))),
           template_app
            (template_app
              (template_hole 3,
               template_app
                (template_app (template_hole 3, template_var 1),
                 template_var 2)),
             template_var 0)),
         template_app
          (template_app
            (template_hole 2,
             template_app
              (template_app
                (template_hole 3,
                 template_app
                  (template_app
                    (template_hole 3,
                     template_app
                      (template_app (template_hole 3, template_var 3),
                       template_var 1)),
                   template_var 2)),
               template_var 0)),
           template_app
            (template_hole 1,
             template_app (template_hole 0, template_hole 4)))))),
    ("Splay_Tree_Analysis_Optimal.nl4",
     "[| 1 <= ?l'; 1 <= ?r'; 1 <= ?ll; 1 <= ?r |]
      ==> 4 * (?l' + ?r')\<^sup>2 * (?l' + ?ll) * (?r' + ?r)
          <= (?l' + ?ll + ?r') * (?l' + ?ll + ?r' + ?r) ^ 3",
     template_implication
      ([template_inequation (less_equals, template_hole 8, template_var 3),
        template_inequation (less_equals, template_hole 8, template_var 2),
        template_inequation (less_equals, template_hole 8, template_var 1),
        template_inequation (less_equals, template_hole 8, template_var 0)],
       template_inequation
        (less_equals,
         template_app
          (template_app
            (template_hole 7,
             template_app
              (template_app
                (template_hole 7,
                 template_app
                  (template_app
                    (template_hole 7,
                     template_app
                      (template_hole 6,
                       template_app
                        (template_hole 5,
                         template_app (template_hole 5, template_hole 4)))),
                   template_app
                    (template_app
                      (template_hole 3,
                       template_app
                        (template_app (template_hole 2, template_var 3),
                         template_var 2)),
                     template_app
                      (template_hole 1,
                       template_app (template_hole 5, template_hole 4))))),
               template_app
                (template_app (template_hole 2, template_var 3),
                 template_var 1))),
           template_app
            (template_app (template_hole 2, template_var 2),
             template_var 0)),
         template_app
          (template_app
            (template_hole 7,
             template_app
              (template_app
                (template_hole 2,
                 template_app
                  (template_app (template_hole 2, template_var 3),
                   template_var 1)),
               template_var 2)),
           template_app
            (template_app
              (template_hole 3,
               template_app
                (template_app
                  (template_hole 2,
                   template_app
                    (template_app
                      (template_hole 2,
                       template_app
                        (template_app (template_hole 2, template_var 3),
                         template_var 1)),
                     template_var 2)),
                 template_var 0)),
             template_app
              (template_hole 1,
               template_app (template_hole 0, template_hole 4))))))),
    ("Splay_Tree_Analysis_Optimal.U",
     "[| Ball (set ?ss) bst; length ?ss = arity ?f |]
      ==> real (cost ?f ?ss) + S34.\<Phi> (exec ?f ?ss) -
          sum_list (map S34.\<Phi> ?ss)
          <= U ?f ?ss",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_hole 24,
                template_app (template_hole 23, template_var 1)),
              t_empty)
            ),
        template_equation
         (template_app (template_hole 19, template_var 1),
          template_app (template_hole 18, template_var 0))],
       template_inequation
        (less_equals,
         template_app
          (template_app
            (template_hole 16,
             template_app
              (template_app
                (template_hole 15,
                 template_app
                  (template_hole 14,
                   template_app
                    (template_app (template_hole 13, template_var 0),
                     template_var 1))),
               template_app
                (template_app
                  (template_app
                    (template_hole 12,
                     template_app
                      (template_app
                        (template_hole 11,
                         template_app
                          (template_hole 10,
                           template_app
                            (template_hole 9, template_hole 8))),
                       template_app
                        (template_hole 7,
                         template_app
                          (template_hole 6,
                           template_app
                            (template_hole 6, template_hole 8))))),
                   template_app
                    (template_app (template_hole 5, template_hole 4),
                     template_app
                      (template_hole 7,
                       template_app (template_hole 9, template_hole 8)))),
                 template_app
                  (template_app (template_hole 3, template_var 0),
                   template_var 1)))),
           template_app
            (template_hole 2,
             template_app
              (template_app
                (template_hole 1,
                 template_app
                  (template_app
                    (template_hole 12,
                     template_app
                      (template_app
                        (template_hole 11,
                         template_app
                          (template_hole 10,
                           template_app
                            (template_hole 9, template_hole 8))),
                       template_app
                        (template_hole 7,
                         template_app
                          (template_hole 6,
                           template_app
                            (template_hole 6, template_hole 8))))),
                   template_app
                    (template_app (template_hole 5, template_hole 4),
                     template_app
                      (template_hole 7,
                       template_app (template_hole 9, template_hole 8))))),
               template_var 1))),
         template_app
          (template_app (template_hole 0, template_var 0),
           template_var 1)))),
    ("Splay_Tree_Analysis_Optimal.nl3",
     "[| 1 <= ?l'; 1 <= ?r'; 1 <= ?lr; 1 <= ?r |]
      ==> 4 * (?l' + ?r')\<^sup>2 * (?lr + ?r) * (?lr + ?r' + ?r)
          <= (?l' + ?lr + ?r') * (?l' + ?lr + ?r' + ?r) ^ 3",
     template_implication
      ([template_inequation (less_equals, template_hole 8, template_var 3),
        template_inequation (less_equals, template_hole 8, template_var 2),
        template_inequation (less_equals, template_hole 8, template_var 1),
        template_inequation (less_equals, template_hole 8, template_var 0)],
       template_inequation
        (less_equals,
         template_app
          (template_app
            (template_hole 7,
             template_app
              (template_app
                (template_hole 7,
                 template_app
                  (template_app
                    (template_hole 7,
                     template_app
                      (template_hole 6,
                       template_app
                        (template_hole 5,
                         template_app (template_hole 5, template_hole 4)))),
                   template_app
                    (template_app
                      (template_hole 3,
                       template_app
                        (template_app (template_hole 2, template_var 3),
                         template_var 2)),
                     template_app
                      (template_hole 1,
                       template_app (template_hole 5, template_hole 4))))),
               template_app
                (template_app (template_hole 2, template_var 1),
                 template_var 0))),
           template_app
            (template_app
              (template_hole 2,
               template_app
                (template_app (template_hole 2, template_var 1),
                 template_var 2)),
             template_var 0)),
         template_app
          (template_app
            (template_hole 7,
             template_app
              (template_app
                (template_hole 2,
                 template_app
                  (template_app (template_hole 2, template_var 3),
                   template_var 1)),
               template_var 2)),
           template_app
            (template_app
              (template_hole 3,
               template_app
                (template_app
                  (template_hole 2,
                   template_app
                    (template_app
                      (template_hole 2,
                       template_app
                        (template_app (template_hole 2, template_var 3),
                         template_var 1)),
                     template_var 2)),
                 template_var 0)),
             template_app
              (template_hole 1,
               template_app (template_hole 0, template_hole 4)))))))]:
   (string * thm * template) list
### theory "Draft.Splay_Tree_Analysis_OptimalMoreTemplates"
### 0.317s elapsed time, 0.416s cpu time, 0.000s GC time
val it = (): unit
