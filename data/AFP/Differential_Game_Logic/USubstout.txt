Loading theory "HOL-Combinatorics.Transposition" (required by "Draft.USubstMoreTemplates" via "Draft.USubst" via "Draft.Static_Semantics" via "Draft.Denotational_Semantics" via "HOL-Analysis.Derivative" via "HOL-Analysis.Bounded_Linear_Function" via "HOL-Analysis.Topology_Euclidean_Space" via "HOL-Analysis.Elementary_Normed_Spaces" via "HOL-Analysis.Cartesian_Space")
Loading theory "HOL-Library.Function_Algebras" (required by "Draft.USubstMoreTemplates" via "Draft.ExtrEqs" via "HOL-Library.BigO")
Loading theory "HOL-Library.FuncSet" (required by "Draft.USubstMoreTemplates" via "Draft.USubst" via "Draft.Static_Semantics" via "Draft.Denotational_Semantics" via "HOL-Analysis.Derivative" via "HOL-Analysis.Bounded_Linear_Function" via "HOL-Analysis.Topology_Euclidean_Space" via "HOL-Analysis.Elementary_Normed_Spaces")
Loading theory "HOL-Library.Infinite_Set" (required by "Draft.USubstMoreTemplates" via "Draft.USubst" via "Draft.Static_Semantics" via "Draft.Denotational_Semantics" via "HOL-Analysis.Derivative" via "HOL-Analysis.Bounded_Linear_Function" via "HOL-Analysis.Topology_Euclidean_Space" via "HOL-Analysis.Elementary_Normed_Spaces" via "HOL-Analysis.Elementary_Metric_Spaces" via "HOL-Analysis.Abstract_Topology_2" via "HOL-Analysis.Elementary_Topology" via "HOL-Library.Set_Idioms" via "HOL-Library.Countable_Set")
instantiation
  fun :: (type, plus) plus
  plus_fun == plus :: ('a => 'b) => ('a => 'b) => 'a => 'b
instantiation
  fun :: (type, zero) zero
  zero_fun == zero_class.zero :: 'a => 'b
instantiation
  fun :: (type, times) times
  times_fun == times :: ('a => 'b) => ('a => 'b) => 'a => 'b
instantiation
  fun :: (type, one) one
  one_fun == one_class.one :: 'a => 'b
### theory "HOL-Library.Function_Algebras"
### 0.112s elapsed time, 0.464s cpu time, 0.040s GC time
Loading theory "HOL-Library.Nat_Bijection" (required by "Draft.USubstMoreTemplates" via "Draft.ExtrEqs" via "HOL-Library.Stream")
consts
  enumerate :: "'a set => nat => 'a"
### theory "HOL-Combinatorics.Transposition"
### 0.178s elapsed time, 0.730s cpu time, 0.040s GC time
Loading theory "HOL-Library.Old_Datatype" (required by "Draft.USubstMoreTemplates" via "Draft.USubst" via "Draft.Static_Semantics" via "Draft.Denotational_Semantics" via "HOL-Analysis.Derivative" via "HOL-Analysis.Bounded_Linear_Function" via "HOL-Analysis.Topology_Euclidean_Space" via "HOL-Analysis.Elementary_Normed_Spaces" via "HOL-Analysis.Elementary_Metric_Spaces" via "HOL-Analysis.Abstract_Topology_2" via "HOL-Analysis.Elementary_Topology" via "HOL-Library.Set_Idioms" via "HOL-Library.Countable_Set" via "HOL-Library.Countable")
Found termination order: "(%p. size (snd p)) <*mlex*> {}"
### theory "HOL-Library.Infinite_Set"
### 0.285s elapsed time, 1.134s cpu time, 0.109s GC time
Loading theory "HOL-Library.Phantom_Type" (required by "Draft.USubstMoreTemplates" via "Draft.USubst" via "Draft.Static_Semantics" via "Draft.Denotational_Semantics" via "HOL-Analysis.Derivative" via "HOL-Analysis.Bounded_Linear_Function" via "HOL-Analysis.Topology_Euclidean_Space" via "HOL-Analysis.Elementary_Normed_Spaces" via "HOL-Analysis.Cartesian_Space" via "HOL-Analysis.Finite_Cartesian_Product" via "HOL-Library.Numeral_Type" via "HOL-Library.Cardinality")
Found termination order: "size_list size <*mlex*> {}"
### theory "HOL-Library.Nat_Bijection"
### 0.312s elapsed time, 1.223s cpu time, 0.135s GC time
Loading theory "HOL-Library.Stream" (required by "Draft.USubstMoreTemplates" via "Draft.ExtrEqs")
### theory "HOL-Library.FuncSet"
### 0.439s elapsed time, 1.744s cpu time, 0.175s GC time
Loading theory "HOL-Library.Disjoint_Sets" (required by "Draft.USubstMoreTemplates" via "Draft.USubst" via "Draft.Static_Semantics" via "Draft.Denotational_Semantics" via "HOL-Analysis.Derivative" via "HOL-Analysis.Bounded_Linear_Function" via "HOL-Analysis.Topology_Euclidean_Space" via "HOL-Analysis.Elementary_Normed_Spaces" via "HOL-Analysis.Elementary_Metric_Spaces" via "HOL-Analysis.Abstract_Topology_2" via "HOL-Analysis.Elementary_Topology")
signature OLD_DATATYPE =
  sig
    val check_specs: spec list -> theory -> spec list * Proof.context
    type config = {quiet: bool, strict: bool}
    val default_config: config
    type descr =
       (int * (string * dtyp list * (string * dtyp list) list)) list
    val distinct_lemma: thm
    datatype dtyp
    = DtRec of int | DtTFree of string * sort | DtType of string * dtyp list
    type info =
       {case_cong: thm,
        case_cong_weak: thm,
        case_name: string,
        case_rewrites: thm list,
        descr: descr,
        distinct: thm list,
        exhaust: thm,
        index: int,
        induct: thm,
        inducts: thm list,
        inject: thm list,
        nchotomy: thm,
        rec_names: string list,
        rec_rewrites: thm list, split: thm, split_asm: thm}
    val read_specs: spec_cmd list -> theory -> spec list * Proof.context
    type spec =
       (binding * (string * sort) list * mixfix) *
       (binding * typ list * mixfix) list
    type spec_cmd =
       (binding * (string * string option) list * mixfix) *
       (binding * string list * mixfix) list
  end
structure Old_Datatype: OLD_DATATYPE
### theory "HOL-Library.Old_Datatype"
### 0.402s elapsed time, 1.571s cpu time, 0.223s GC time
Loading theory "HOL-Library.Product_Plus" (required by "Draft.USubstMoreTemplates" via "Draft.USubst" via "Draft.Static_Semantics" via "Draft.Denotational_Semantics" via "HOL-Analysis.Derivative" via "HOL-Analysis.Bounded_Linear_Function" via "HOL-Analysis.Topology_Euclidean_Space" via "HOL-Analysis.Elementary_Normed_Spaces" via "HOL-Analysis.Elementary_Metric_Spaces" via "HOL-Analysis.Abstract_Topology_2" via "HOL-Analysis.Elementary_Topology" via "HOL-Analysis.Product_Vector")
locale comm_monoid_set
  fixes f :: "'a => 'a => 'a"  (infixl \<open>\<^bold>*\<close> 70)
    and z :: "'a"  (\<open>\<^bold>1\<close>)
  assumes "comm_monoid_set (\<^bold>*) \<^bold>1"
instantiation
  prod :: (zero, zero) zero
  zero_prod == zero_class.zero :: 'a * 'b
instantiation
  prod :: (plus, plus) plus
  plus_prod == plus :: 'a * 'b => 'a * 'b => 'a * 'b
instantiation
  prod :: (minus, minus) minus
  minus_prod == minus :: 'a * 'b => 'a * 'b => 'a * 'b
instantiation
  prod :: (uminus, uminus) uminus
  uminus_prod == uminus :: 'a * 'b => 'a * 'b
### theory "HOL-Library.Product_Plus"
### 0.095s elapsed time, 0.383s cpu time, 0.000s GC time
Loading theory "HOL-Library.Set_Algebras" (required by "Draft.USubstMoreTemplates" via "Draft.ExtrEqs" via "HOL-Library.BigO")
instantiation
  set :: (plus) plus
  plus_set == plus :: 'a set => 'a set => 'a set
instantiation
  set :: (times) times
  times_set == times :: 'a set => 'a set => 'a set
instantiation
  set :: (zero) zero
  zero_set == zero_class.zero :: 'a set
instantiation
  set :: (one) one
  one_set == one_class.one :: 'a set
### theory "HOL-Library.Disjoint_Sets"
### 0.308s elapsed time, 1.199s cpu time, 0.167s GC time
Loading theory "HOL-Library.Tree" (required by "Draft.USubstMoreTemplates" via "Draft.ExtrEqs" via "Draft.Templates")
### theory "HOL-Library.Phantom_Type"
### 0.556s elapsed time, 2.206s cpu time, 0.233s GC time
Loading theory "HOL-Library.Cardinality" (required by "Draft.USubstMoreTemplates" via "Draft.USubst" via "Draft.Static_Semantics" via "Draft.Denotational_Semantics" via "HOL-Analysis.Derivative" via "HOL-Analysis.Bounded_Linear_Function" via "HOL-Analysis.Topology_Euclidean_Space" via "HOL-Analysis.Elementary_Normed_Spaces" via "HOL-Analysis.Cartesian_Space" via "HOL-Analysis.Finite_Cartesian_Product" via "HOL-Library.Numeral_Type")
consts
  shift :: "'a list => 'a stream => 'a stream"
Proofs for coinductive predicate(s) "streamsp"
  Proving monotonicity ...
### Additional type variable(s) in locale specification "CARD_1": 'a
### theory "HOL-Library.Set_Algebras"
### 0.416s elapsed time, 1.502s cpu time, 0.627s GC time
Loading theory "HOL-Library.Countable" (required by "Draft.USubstMoreTemplates" via "Draft.USubst" via "Draft.Static_Semantics" via "Draft.Denotational_Semantics" via "HOL-Analysis.Derivative" via "HOL-Analysis.Bounded_Linear_Function" via "HOL-Analysis.Topology_Euclidean_Space" via "HOL-Analysis.Elementary_Normed_Spaces" via "HOL-Analysis.Elementary_Metric_Spaces" via "HOL-Analysis.Abstract_Topology_2" via "HOL-Analysis.Elementary_Topology" via "HOL-Library.Set_Idioms" via "HOL-Library.Countable_Set")
class CARD_1 = type +
  assumes "CARD_1": "CARD('a) = 1"
consts
  snth :: "'a stream => nat => 'a"
consts
  stake :: "nat => 'a stream => 'a list"
consts
  sdrop :: "nat => 'a stream => 'a stream"
consts
  sfilter :: "('a => bool) => 'a stream => 'a stream"
### Additional type variable(s) in locale specification "card2": 'a
consts
  cycle :: "'a list => 'a stream"
class card2 = finite +
  assumes "two_le_card": "2 <= CARD('a)"
consts
  siterate :: "('a => 'a) => 'a => 'a stream"
class finite_UNIV = type +
  fixes finite_UNIV :: "('a, bool) phantom"
  assumes "finite_UNIV": "finite_UNIV = Phantom('a) (finite UNIV)"
consts
  flat :: "'a list stream => 'a stream"
class card_UNIV = finite_UNIV +
  fixes card_UNIV :: "('a, nat) phantom"
  assumes "card_UNIV": "card_UNIV_class.card_UNIV = Phantom('a) CARD('a)"
instantiation
  nat :: card_UNIV
  card_UNIV_nat == card_UNIV_class.card_UNIV :: (nat, nat) phantom
  finite_UNIV_nat == finite_UNIV :: (nat, bool) phantom
instantiation
  int :: card_UNIV
  card_UNIV_int == card_UNIV_class.card_UNIV :: (int, nat) phantom
  finite_UNIV_int == finite_UNIV :: (int, bool) phantom
instantiation
  natural :: card_UNIV
  card_UNIV_natural == card_UNIV_class.card_UNIV :: (natural, nat) phantom
  finite_UNIV_natural == finite_UNIV :: (natural, bool) phantom
instantiation
  integer :: card_UNIV
  card_UNIV_integer == card_UNIV_class.card_UNIV :: (integer, nat) phantom
  finite_UNIV_integer == finite_UNIV :: (integer, bool) phantom
consts
  sinterleave :: "'a stream => 'a stream => 'a stream"
instantiation
  list :: (type) card_UNIV
  card_UNIV_list == card_UNIV_class.card_UNIV :: ('a list, nat) phantom
  finite_UNIV_list == finite_UNIV :: ('a list, bool) phantom
consts
  szip :: "'a stream => 'b stream => ('a * 'b) stream"
instantiation
  unit :: card_UNIV
  card_UNIV_unit == card_UNIV_class.card_UNIV :: (unit, nat) phantom
  finite_UNIV_unit == finite_UNIV :: (unit, bool) phantom
instantiation
  bool :: card_UNIV
  card_UNIV_bool == card_UNIV_class.card_UNIV :: (bool, nat) phantom
  finite_UNIV_bool == finite_UNIV :: (bool, bool) phantom
### Additional type variable(s) in locale specification "countable": 'a
instantiation
  char :: card_UNIV
  card_UNIV_char == card_UNIV_class.card_UNIV :: (char, nat) phantom
  finite_UNIV_char == finite_UNIV :: (char, bool) phantom
consts
  left :: "'a tree => 'a tree"
consts
  smap2 :: "('a => 'b => 'c) => 'a stream => 'b stream => 'c stream"
instantiation
  prod :: (finite_UNIV, finite_UNIV) finite_UNIV
  finite_UNIV_prod == finite_UNIV :: ('a * 'b, bool) phantom
consts
  right :: "'a tree => 'a tree"
instantiation
  prod :: (card_UNIV, card_UNIV) card_UNIV
  card_UNIV_prod == card_UNIV_class.card_UNIV :: ('a * 'b, nat) phantom
instantiation
  sum :: (finite_UNIV, finite_UNIV) finite_UNIV
  finite_UNIV_sum == finite_UNIV :: ('a + 'b, bool) phantom
class countable = type +
  assumes "ex_inj": "EX to_nat. inj to_nat"
instantiation
  sum :: (card_UNIV, card_UNIV) card_UNIV
  card_UNIV_sum == card_UNIV_class.card_UNIV :: ('a + 'b, nat) phantom
### theory "HOL-Library.Stream"
### 1.178s elapsed time, 4.500s cpu time, 0.949s GC time
Loading theory "HOL-Analysis.Metric_Arith" (required by "Draft.USubstMoreTemplates" via "Draft.USubst" via "Draft.Static_Semantics" via "Draft.Denotational_Semantics" via "HOL-Analysis.Derivative" via "HOL-Analysis.Bounded_Linear_Function" via "HOL-Analysis.Topology_Euclidean_Space" via "HOL-Analysis.Elementary_Normed_Spaces" via "HOL-Analysis.Elementary_Metric_Spaces")
instantiation
  fun :: (finite_UNIV, card_UNIV) finite_UNIV
  finite_UNIV_fun == finite_UNIV :: ('a => 'b, bool) phantom
instantiation
  fun :: (card_UNIV, card_UNIV) card_UNIV
  card_UNIV_fun == card_UNIV_class.card_UNIV :: ('a => 'b, nat) phantom
Found termination order: "size <*mlex*> {}"
instantiation
  option :: (finite_UNIV) finite_UNIV
  finite_UNIV_option == finite_UNIV :: ('a option, bool) phantom
instantiation
  option :: (card_UNIV) card_UNIV
  card_UNIV_option == card_UNIV_class.card_UNIV :: ('a option, nat) phantom
instantiation
  String.literal :: card_UNIV
  card_UNIV_literal == card_UNIV_class.card_UNIV ::
    (String.literal, nat) phantom
  finite_UNIV_literal == finite_UNIV :: (String.literal, bool) phantom
instantiation
  set :: (finite_UNIV) finite_UNIV
  finite_UNIV_set == finite_UNIV :: ('a set, bool) phantom
instantiation
  set :: (card_UNIV) card_UNIV
  card_UNIV_set == card_UNIV_class.card_UNIV :: ('a set, nat) phantom
instantiation
  Enum.finite_1 :: card_UNIV
  card_UNIV_finite_1 == card_UNIV_class.card_UNIV ::
    (Enum.finite_1, nat) phantom
  finite_UNIV_finite_1 == finite_UNIV :: (Enum.finite_1, bool) phantom
Found termination order: "size <*mlex*> {}"
instantiation
  Enum.finite_2 :: card_UNIV
  card_UNIV_finite_2 == card_UNIV_class.card_UNIV ::
    (Enum.finite_2, nat) phantom
  finite_UNIV_finite_2 == finite_UNIV :: (Enum.finite_2, bool) phantom
instantiation
  Enum.finite_3 :: card_UNIV
  card_UNIV_finite_3 == card_UNIV_class.card_UNIV ::
    (Enum.finite_3, nat) phantom
  finite_UNIV_finite_3 == finite_UNIV :: (Enum.finite_3, bool) phantom
instantiation
  Enum.finite_4 :: card_UNIV
  card_UNIV_finite_4 == card_UNIV_class.card_UNIV ::
    (Enum.finite_4, nat) phantom
  finite_UNIV_finite_4 == finite_UNIV :: (Enum.finite_4, bool) phantom
Found termination order: "size <*mlex*> {}"
instantiation
  Enum.finite_5 :: card_UNIV
  card_UNIV_finite_5 == card_UNIV_class.card_UNIV ::
    (Enum.finite_5, nat) phantom
  finite_UNIV_finite_5 == finite_UNIV :: (Enum.finite_5, bool) phantom
### theory "HOL-Library.Cardinality"
### 0.756s elapsed time, 2.993s cpu time, 0.233s GC time
Loading theory "HOL-Library.Numeral_Type" (required by "Draft.USubstMoreTemplates" via "Draft.USubst" via "Draft.Static_Semantics" via "Draft.Denotational_Semantics" via "HOL-Analysis.Derivative" via "HOL-Analysis.Bounded_Linear_Function" via "HOL-Analysis.Topology_Euclidean_Space" via "HOL-Analysis.Elementary_Normed_Spaces" via "HOL-Analysis.Cartesian_Space" via "HOL-Analysis.Finite_Cartesian_Product")
Proofs for inductive predicate(s) "finite_item"
  Proving monotonicity ...
class height = type +
  fixes height :: "'a => nat"
instantiation
  tree :: (type) height
  height_tree == height :: 'a tree => nat
Found termination order: "size <*mlex*> {}"
instantiation
  num1 :: CARD_1
Found termination order: "size <*mlex*> {}"
instantiation
  num1 :: {comm_monoid_mult,numeral,comm_ring}
  uminus_num1 == uminus :: num1 => num1
  zero_num1 == zero_class.zero :: num1
  minus_num1 == minus :: num1 => num1 => num1
  plus_num1 == plus :: num1 => num1 => num1
  one_num1 == one_class.one :: num1
  times_num1 == times :: num1 => num1 => num1
val old_countable_datatype_tac = fn: Proof.context -> int -> tactic
instantiation
  num1 :: linorder
  less_eq_num1 == less_eq :: num1 => num1 => bool
  less_num1 == less :: num1 => num1 => bool
locale mod_type
  fixes n :: "int"
    and Rep :: "'a => int"
    and Abs :: "int => 'a"
  assumes "mod_type n Rep Abs"
Found termination order: "size <*mlex*> {}"
### ML warning (line 93 of "~~/src/HOL/Tools/BNF/bnf_lfp_countable.ML"):
### Pattern is not exhaustive.
### ML warning (line 139 of "~~/src/HOL/Tools/BNF/bnf_lfp_countable.ML"):
### Pattern is not exhaustive.
### ML warning (line 143 of "~~/src/HOL/Tools/BNF/bnf_lfp_countable.ML"):
### Matches are not exhaustive.
### ML warning (line 145 of "~~/src/HOL/Tools/BNF/bnf_lfp_countable.ML"):
### Matches are not exhaustive.
### ML warning (line 156 of "~~/src/HOL/Tools/BNF/bnf_lfp_countable.ML"):
### Pattern is not exhaustive.
signature BNF_LFP_COUNTABLE =
  sig
    val countable_datatype_tac: Proof.context -> tactic
    val derive_encode_injectives_thms:
       Proof.context -> string list -> thm list
  end
structure BNF_LFP_Countable: BNF_LFP_COUNTABLE
val countable_datatype_tac = fn: Proof.context -> thm -> thm Seq.seq
val countable_tac = fn: Proof.context -> int -> tactic
locale mod_ring
  fixes n :: "int"
    and Rep :: "'a => int"
    and Abs :: "int => 'a"
  assumes "mod_ring n Rep Abs"
instantiation
  bit0 :: (finite) {minus,one,plus,times,uminus,zero}
  bit1 :: (finite) {minus,one,plus,times,uminus,zero}
  zero_bit0 == zero_class.zero :: 'a bit0
  uminus_bit0 == uminus :: 'a bit0 => 'a bit0
  times_bit0 == times :: 'a bit0 => 'a bit0 => 'a bit0
  plus_bit0 == plus :: 'a bit0 => 'a bit0 => 'a bit0
  one_bit0 == one_class.one :: 'a bit0
  minus_bit0 == minus :: 'a bit0 => 'a bit0 => 'a bit0
  zero_bit1 == zero_class.zero :: 'a bit1
  uminus_bit1 == uminus :: 'a bit1 => 'a bit1
  times_bit1 == times :: 'a bit1 => 'a bit1 => 'a bit1
  plus_bit1 == plus :: 'a bit1 => 'a bit1 => 'a bit1
  one_bit1 == one_class.one :: 'a bit1
  minus_bit1 == minus :: 'a bit1 => 'a bit1 => 'a bit1
Found termination order: "size <*mlex*> {}"
Found termination order: "size <*mlex*> {}"
instantiation
  bit0 :: (finite) linorder
  bit1 :: (finite) linorder
  less_eq_bit0 == less_eq :: 'a bit0 => 'a bit0 => bool
  less_bit0 == less :: 'a bit0 => 'a bit0 => bool
  less_eq_bit1 == less_eq :: 'a bit1 => 'a bit1 => bool
  less_bit1 == less :: 'a bit1 => 'a bit1 => bool
Found termination order: "size <*mlex*> {}"
signature METRIC_ARITH =
  sig
    val argo_timeout: real Config.T
    val metric_arith_tac: Proof.context -> int -> tactic
    val trace: bool Config.T
  end
structure Metric_Arith: METRIC_ARITH
### theory "HOL-Analysis.Metric_Arith"
### 0.677s elapsed time, 2.674s cpu time, 0.213s GC time
Loading theory "Draft.Identifiers" (required by "Draft.USubstMoreTemplates" via "Draft.USubst" via "Draft.Syntax")
instantiation
  num0 :: equal
  equal_num0 == equal_class.equal :: num0 => num0 => bool
### theory "HOL-Library.Countable"
### 1.200s elapsed time, 4.735s cpu time, 0.446s GC time
Found termination order: "size <*mlex*> {}"
Loading theory "HOL-Library.Countable_Set" (required by "Draft.USubstMoreTemplates" via "Draft.USubst" via "Draft.Static_Semantics" via "Draft.Denotational_Semantics" via "HOL-Analysis.Derivative" via "HOL-Analysis.Bounded_Linear_Function" via "HOL-Analysis.Topology_Euclidean_Space" via "HOL-Analysis.Elementary_Normed_Spaces" via "HOL-Analysis.Elementary_Metric_Spaces" via "HOL-Analysis.Abstract_Topology_2" via "HOL-Analysis.Elementary_Topology" via "HOL-Library.Set_Idioms")
instantiation
  num1 :: equal
  equal_num1 == equal_class.equal :: num1 => num1 => bool
instantiation
  num1 :: enum
  enum_num1 == enum_class.enum :: num1 list
  enum_all_num1 == enum_class.enum_all :: (num1 => bool) => bool
  enum_ex_num1 == enum_class.enum_ex :: (num1 => bool) => bool
### theory "Draft.Identifiers"
### 0.044s elapsed time, 0.174s cpu time, 0.000s GC time
Loading theory "Draft.Lib" (required by "Draft.USubstMoreTemplates" via "Draft.USubst" via "Draft.Coincidence")
instantiation
  num0 :: card_UNIV
  num1 :: card_UNIV
  card_UNIV_num0 == card_UNIV_class.card_UNIV :: (num0, nat) phantom
  finite_UNIV_num0 == finite_UNIV :: (num0, bool) phantom
  card_UNIV_num1 == card_UNIV_class.card_UNIV :: (num1, nat) phantom
  finite_UNIV_num1 == finite_UNIV :: (num1, bool) phantom
Found termination order: "(%p. size (fst p)) <*mlex*> {}"
instantiation
  bit0 :: (finite) equal
  bit1 :: (finite) equal
  equal_bit0 == equal_class.equal :: 'a bit0 => 'a bit0 => bool
  equal_bit1 == equal_class.equal :: 'a bit1 => 'a bit1 => bool
### theory "Draft.Lib"
### 0.103s elapsed time, 0.405s cpu time, 0.053s GC time
Loading theory "Draft.Syntax" (required by "Draft.USubstMoreTemplates" via "Draft.USubst")
instantiation
  bit0 :: (finite) enum
  enum_bit0 == enum_class.enum :: 'a bit0 list
  enum_all_bit0 == enum_class.enum_all :: ('a bit0 => bool) => bool
  enum_ex_bit0 == enum_class.enum_ex :: ('a bit0 => bool) => bool
Found termination order: "size <*mlex*> {}"
instantiation
  bit1 :: (finite) enum
  enum_bit1 == enum_class.enum :: 'a bit1 list
  enum_all_bit1 == enum_class.enum_all :: ('a bit1 => bool) => bool
  enum_ex_bit1 == enum_class.enum_ex :: ('a bit1 => bool) => bool
instantiation
  bit0 :: (finite) finite_UNIV
  bit1 :: (finite) finite_UNIV
  finite_UNIV_bit0 == finite_UNIV :: ('a bit0, bool) phantom
  finite_UNIV_bit1 == finite_UNIV :: ('a bit1, bool) phantom
instantiation
  bit0 :: ({card_UNIV,finite}) card_UNIV
  bit1 :: ({card_UNIV,finite}) card_UNIV
  card_UNIV_bit0 == card_UNIV_class.card_UNIV :: ('a bit0, nat) phantom
  card_UNIV_bit1 == card_UNIV_class.card_UNIV :: ('a bit1, nat) phantom
### theory "HOL-Library.Numeral_Type"
### 0.783s elapsed time, 3.084s cpu time, 0.347s GC time
Loading theory "HOL-Analysis.Inner_Product" (required by "Draft.USubstMoreTemplates" via "Draft.USubst" via "Draft.Static_Semantics" via "Draft.Denotational_Semantics" via "HOL-Analysis.Derivative" via "HOL-Analysis.Bounded_Linear_Function" via "HOL-Analysis.Topology_Euclidean_Space" via "HOL-Analysis.Elementary_Normed_Spaces" via "HOL-Analysis.Cartesian_Space" via "HOL-Analysis.Finite_Cartesian_Product" via "HOL-Analysis.Euclidean_Space")
Found termination order: "(%p. size (snd p)) <*mlex*> {}"
locale comm_monoid_set
  fixes f :: "'a => 'a => 'a"  (infixl \<open>\<^bold>*\<close> 70)
    and z :: "'a"  (\<open>\<^bold>1\<close>)
  assumes "comm_monoid_set (\<^bold>*) \<^bold>1"
### theory "HOL-Library.Countable_Set"
### 0.491s elapsed time, 1.935s cpu time, 0.201s GC time
Loading theory "HOL-Library.Countable_Complete_Lattices" (required by "Draft.USubstMoreTemplates" via "Draft.USubst" via "Draft.Static_Semantics" via "Draft.Denotational_Semantics" via "HOL-Analysis.Derivative" via "HOL-Analysis.Bounded_Linear_Function" via "HOL-Analysis.Uniform_Limit" via "HOL-Analysis.Summation_Tests" via "HOL-Library.Extended_Real" via "HOL-Library.Extended_Nat" via "HOL-Library.Order_Continuity")
Found termination order: "size <*mlex*> {}"
### theory "HOL-Library.Tree"
### 2.266s elapsed time, 8.786s cpu time, 1.311s GC time
Loading theory "Draft.Templates" (required by "Draft.USubstMoreTemplates" via "Draft.ExtrEqs")
datatype template_term
=
     t_empty
   | template_app of template_term * template_term
   | template_hole of int
   | template_var of int
datatype sign
= equals | greater_equals | greater_than | less_equals | less_than
datatype template
=
     template_bimplication of template * template
   | template_dunno
   | template_equation of template_term * template_term
   | template_implication of template list * template
   | template_inequation of sign * template_term * template_term
   | template_negation of template
   | template_predicate of template_term
constructor t_empty: template_term
constructor template_app: template_term * template_term -> template_term
constructor template_hole: int -> template_term
constructor template_var: int -> template_term
constructor equals: sign
constructor greater_equals: sign
constructor greater_than: sign
constructor less_equals: sign
constructor less_than: sign
constructor template_bimplication: template * template -> template
constructor template_dunno: template
constructor template_equation: template_term * template_term -> template
constructor template_implication: template list * template -> template
constructor template_inequation:
   sign * template_term * template_term -> template
constructor template_negation: template -> template
constructor template_predicate: template_term -> template
val vfs = fn: term -> (indexname * typ) list * (string * typ) list
val indexOf = fn: ''a list -> ''a -> int -> int
val has_eq = fn: term -> bool
val term2template = fn:
   (indexname * typ) list -> (string * typ) list -> term -> template_term
val lemma2predicate = fn: term -> term -> template
val makeTemplatewithContext = fn: term -> term -> template
val lemma2template = fn: term -> template
val thm2template = fn: thm -> template
val tterm2string = fn: template_term -> string
val template2string = fn: template -> string
val t = "height ?t <= size ?t": thm
val th =
   Const ("HOL.Trueprop", "bool => prop") $
     (Const ("Orderings.ord_class.less_eq", "nat => nat => bool") $
       (Const ("Tree.height_class.height", "?'a tree => nat") $
         Var (("t", 0), "?'a tree")) $
       (Const ("Nat.size_class.size", "?'a tree => nat") $
         Var (("t", 0), "?'a tree"))):
   term
### theory "Draft.Templates"
### 0.064s elapsed time, 0.258s cpu time, 0.000s GC time
Loading theory "HOL-Library.Set_Idioms" (required by "Draft.USubstMoreTemplates" via "Draft.USubst" via "Draft.Static_Semantics" via "Draft.Denotational_Semantics" via "HOL-Analysis.Derivative" via "HOL-Analysis.Bounded_Linear_Function" via "HOL-Analysis.Topology_Euclidean_Space" via "HOL-Analysis.Elementary_Normed_Spaces" via "HOL-Analysis.Elementary_Metric_Spaces" via "HOL-Analysis.Abstract_Topology_2" via "HOL-Analysis.Elementary_Topology")
class real_inner = dist_norm + real_vector + sgn_div_norm +
  uniformity_dist + open_uniformity +
  fixes inner :: "'a => 'a => real"
  assumes "inner_commute": "!!x y. inner x y = inner y x"
    and "inner_add_left": "!!x y z. inner (x + y) z = inner x z + inner y z"
    and
    "inner_scaleR_left": "!!r x y. inner (r *\<^sub>R x) y = r * inner x y"
    and "inner_ge_zero": "!!x. 0 <= inner x x"
    and "inner_eq_zero_iff": "!!x. (inner x x = 0) = (x = (0::'a))"
    and "norm_eq_sqrt_inner": "!!x. norm x = sqrt (inner x x)"
class countable_complete_lattice = Inf + Sup + lattice + bot + top +
  assumes "ccInf_lower": "!!A x. [| countable A; x : A |] ==> Inf A <= x"
  assumes
    "ccInf_greatest":
      "!!A z. [| countable A; !!x. x : A ==> z <= x |] ==> z <= Inf A"
  assumes "ccSup_upper": "!!A x. [| countable A; x : A |] ==> x <= Sup A"
  assumes
    "ccSup_least":
      "!!A z. [| countable A; !!x. x : A ==> x <= z |] ==> Sup A <= z"
  assumes "ccInf_empty": "Inf {} = top"
  assumes "ccSup_empty": "Sup {} = bot"
### theory "HOL-Library.Set_Idioms"
### 0.235s elapsed time, 0.909s cpu time, 0.131s GC time
Loading theory "HOL-Analysis.Abstract_Topology" (required by "Draft.USubstMoreTemplates" via "Draft.USubst" via "Draft.Static_Semantics" via "Draft.Denotational_Semantics" via "HOL-Analysis.Derivative" via "HOL-Analysis.Bounded_Linear_Function" via "HOL-Analysis.Topology_Euclidean_Space" via "HOL-Analysis.Elementary_Normed_Spaces" via "HOL-Analysis.Elementary_Metric_Spaces" via "HOL-Analysis.Abstract_Topology_2")
instantiation
  real :: real_inner
  inner_real == inner :: real => real => real
instantiation
  complex :: real_inner
  inner_complex == inner :: complex => complex => real
bundle inner_syntax
bundle no_inner_syntax
### theory "HOL-Analysis.Inner_Product"
### 1.078s elapsed time, 4.245s cpu time, 0.438s GC time
Loading theory "HOL-Analysis.L2_Norm" (required by "Draft.USubstMoreTemplates" via "Draft.USubst" via "Draft.Static_Semantics" via "Draft.Denotational_Semantics" via "HOL-Analysis.Derivative" via "HOL-Analysis.Bounded_Linear_Function" via "HOL-Analysis.Topology_Euclidean_Space" via "HOL-Analysis.Elementary_Normed_Spaces" via "HOL-Analysis.Cartesian_Space" via "HOL-Analysis.Finite_Cartesian_Product" via "HOL-Analysis.Euclidean_Space")
### theory "HOL-Analysis.L2_Norm"
### 0.104s elapsed time, 0.406s cpu time, 0.052s GC time
Loading theory "HOL-Analysis.Operator_Norm" (required by "Draft.USubstMoreTemplates" via "Draft.USubst" via "Draft.Static_Semantics" via "Draft.Denotational_Semantics" via "HOL-Analysis.Derivative" via "HOL-Analysis.Bounded_Linear_Function")
### theory "HOL-Analysis.Operator_Norm"
### 0.113s elapsed time, 0.441s cpu time, 0.064s GC time
Loading theory "HOL-Analysis.Product_Vector" (required by "Draft.USubstMoreTemplates" via "Draft.USubst" via "Draft.Static_Semantics" via "Draft.Denotational_Semantics" via "HOL-Analysis.Derivative" via "HOL-Analysis.Bounded_Linear_Function" via "HOL-Analysis.Topology_Euclidean_Space" via "HOL-Analysis.Elementary_Normed_Spaces" via "HOL-Analysis.Elementary_Metric_Spaces" via "HOL-Analysis.Abstract_Topology_2" via "HOL-Analysis.Elementary_Topology")
locale module_prod
  fixes s1 :: "'a => 'b => 'b"
    and s2 :: "'a => 'c => 'c"
  assumes "module_prod s1 s2"
class countable_complete_distrib_lattice = countable_complete_lattice +
  assumes
    "sup_ccInf": "!!B a. countable B ==> sup a (Inf B) = Inf (sup a ` B)"
  assumes
    "inf_ccSup": "!!B a. countable B ==> inf a (Sup B) = Sup (inf a ` B)"
locale vector_space_prod
  fixes s1 :: "'a => 'b => 'b"  (infixr \<open>*a\<close> 75)
    and s2 :: "'a => 'c => 'c"  (infixr \<open>*b\<close> 75)
  assumes "vector_space_prod (*a) (*b)"
### Cannot skip proof of schematic goal statement
instantiation
  prod :: (real_vector, real_vector) real_vector
  scaleR_prod == scaleR :: real => 'a * 'b => 'a * 'b
### Cannot skip proof of schematic goal statement
instantiation
  prod :: (metric_space, metric_space) dist
  dist_prod == dist :: 'a * 'b => 'a * 'b => real
instantiation
  prod :: (uniformity, uniformity) uniformity
  uniformity_prod == uniformity :: (('a * 'b) * 'a * 'b) filter
instantiation
  prod :: (uniform_space, uniform_space) uniform_space
instantiation
  prod :: (metric_space, metric_space) uniformity_dist
instantiation
  prod :: (metric_space, metric_space) metric_space
instantiation
  prod :: (real_normed_vector, real_normed_vector) real_normed_vector
  sgn_prod == sgn :: 'a * 'b => 'a * 'b
  norm_prod == norm :: 'a * 'b => real
locale finite_dimensional_vector_space_prod
  fixes s1 :: "'a => 'b => 'b"  (infixr \<open>*a\<close> 75)
    and s2 :: "'a => 'c => 'c"  (infixr \<open>*b\<close> 75)
    and B1 :: "'b set"
    and B2 :: "'c set"
  assumes "finite_dimensional_vector_space_prod (*a) (*b) B1 B2"
### theory "HOL-Analysis.Product_Vector"
### 1.003s elapsed time, 3.909s cpu time, 0.519s GC time
Loading theory "HOL-Analysis.Elementary_Topology" (required by "Draft.USubstMoreTemplates" via "Draft.USubst" via "Draft.Static_Semantics" via "Draft.Denotational_Semantics" via "HOL-Analysis.Derivative" via "HOL-Analysis.Bounded_Linear_Function" via "HOL-Analysis.Topology_Euclidean_Space" via "HOL-Analysis.Elementary_Normed_Spaces" via "HOL-Analysis.Elementary_Metric_Spaces" via "HOL-Analysis.Abstract_Topology_2")
### theory "HOL-Library.Countable_Complete_Lattices"
### 2.256s elapsed time, 8.835s cpu time, 1.079s GC time
Loading theory "HOL-Analysis.Euclidean_Space" (required by "Draft.USubstMoreTemplates" via "Draft.USubst" via "Draft.Static_Semantics" via "Draft.Denotational_Semantics" via "HOL-Analysis.Derivative" via "HOL-Analysis.Bounded_Linear_Function" via "HOL-Analysis.Topology_Euclidean_Space" via "HOL-Analysis.Elementary_Normed_Spaces" via "HOL-Analysis.Cartesian_Space" via "HOL-Analysis.Finite_Cartesian_Product")
class topological_space = open +
  assumes "open_UNIV": "open UNIV"
  assumes "open_Int": "!!S T. [| open S; open T |] ==> open (S Int T)"
  assumes "open_Union": "!!K. Ball K open ==> open (\<Union> K)"
locale countable_basis
  fixes p :: "'a set => bool"
    and B :: "'a set set"
  assumes "countable_basis p B"
class second_countable_topology = topological_space +
  assumes
    "ex_countable_subbasis":
      "EX B. countable B & open = generate_topology B"
class euclidean_space = real_inner +
  fixes Basis :: "'a set"
  assumes "nonempty_Basis": "Basis ~= {}"
  assumes "finite_Basis": "finite Basis"
  assumes
    "inner_Basis":
      "!!u v.
          [| u : Basis; v : Basis |]
          ==> inner u v = (if u = v then 1 else 0)"
  assumes
    "euclidean_all_zero_iff":
      "!!x. (ALL u:Basis. inner x u = 0) = (x = (0::'a))"
Proofs for inductive predicate(s) "generate_topology_on"
  Proving monotonicity ...
### theory "HOL-Analysis.Abstract_Topology"
### 3.507s elapsed time, 13.429s cpu time, 4.037s GC time
Loading theory "HOL-Analysis.Abstract_Limits" (required by "Draft.USubstMoreTemplates" via "Draft.USubst" via "Draft.Static_Semantics" via "Draft.Denotational_Semantics" via "HOL-Analysis.Derivative" via "HOL-Analysis.Bounded_Linear_Function" via "HOL-Analysis.Function_Topology")
### theory "Draft.Syntax"
### 4.488s elapsed time, 17.275s cpu time, 4.432s GC time
Loading theory "HOL-Library.BigO" (required by "Draft.USubstMoreTemplates" via "Draft.ExtrEqs")
### theory "HOL-Analysis.Abstract_Limits"
### 0.219s elapsed time, 0.876s cpu time, 0.050s GC time
Loading theory "HOL-Library.Discrete" (required by "Draft.USubstMoreTemplates" via "Draft.USubst" via "Draft.Static_Semantics" via "Draft.Denotational_Semantics" via "HOL-Analysis.Derivative" via "HOL-Analysis.Bounded_Linear_Function" via "HOL-Analysis.Uniform_Limit" via "HOL-Analysis.Summation_Tests")
### Rewrite rule not in simpset:
### Wellfounded.accp log_rel ?n1 ==>
### log ?n1 == if ?n1 < 2 then 0 else Suc (log (?n1 div 2))
Found termination order: "size <*mlex*> {}"
### theory "HOL-Library.Discrete"
### 0.164s elapsed time, 0.647s cpu time, 0.066s GC time
Loading theory "HOL-Library.Indicator_Function" (required by "Draft.USubstMoreTemplates" via "Draft.USubst" via "Draft.Static_Semantics" via "Draft.Denotational_Semantics" via "HOL-Analysis.Derivative" via "HOL-Analysis.Bounded_Linear_Function" via "HOL-Analysis.Topology_Euclidean_Space" via "HOL-Analysis.Elementary_Normed_Spaces" via "HOL-Analysis.Elementary_Metric_Spaces" via "HOL-Analysis.Abstract_Topology_2")
instantiation
  real :: euclidean_space
  Basis_real == Basis :: real set
instantiation
  complex :: euclidean_space
  Basis_complex == Basis :: complex set
instantiation
  prod :: (real_inner, real_inner) real_inner
  inner_prod == inner :: 'a * 'b => 'a * 'b => real
instantiation
  prod :: (euclidean_space, euclidean_space) euclidean_space
  Basis_prod == Basis :: ('a * 'b) set
### Cannot skip proof of schematic goal statement
### Cannot skip proof of schematic goal statement
### theory "HOL-Analysis.Euclidean_Space"
### 2.537s elapsed time, 9.658s cpu time, 3.496s GC time
Loading theory "HOL-Analysis.Finite_Cartesian_Product" (required by "Draft.USubstMoreTemplates" via "Draft.USubst" via "Draft.Static_Semantics" via "Draft.Denotational_Semantics" via "HOL-Analysis.Derivative" via "HOL-Analysis.Bounded_Linear_Function" via "HOL-Analysis.Topology_Euclidean_Space" via "HOL-Analysis.Elementary_Normed_Spaces" via "HOL-Analysis.Cartesian_Space")
### theory "HOL-Library.Indicator_Function"
### 0.451s elapsed time, 1.766s cpu time, 0.255s GC time
Loading theory "HOL-Analysis.Linear_Algebra" (required by "Draft.USubstMoreTemplates" via "Draft.USubst" via "Draft.Static_Semantics" via "Draft.Denotational_Semantics" via "HOL-Analysis.Derivative" via "HOL-Analysis.Bounded_Linear_Function" via "HOL-Analysis.Topology_Euclidean_Space" via "HOL-Analysis.Elementary_Normed_Spaces" via "HOL-Analysis.Cartesian_Space")
### theory "HOL-Analysis.Elementary_Topology"
### 2.827s elapsed time, 10.797s cpu time, 3.650s GC time
Loading theory "HOL-Analysis.Abstract_Topology_2" (required by "Draft.USubstMoreTemplates" via "Draft.USubst" via "Draft.Static_Semantics" via "Draft.Denotational_Semantics" via "HOL-Analysis.Derivative" via "HOL-Analysis.Bounded_Linear_Function" via "HOL-Analysis.Topology_Euclidean_Space" via "HOL-Analysis.Elementary_Normed_Spaces" via "HOL-Analysis.Elementary_Metric_Spaces")
### theory "HOL-Library.BigO"
### 0.827s elapsed time, 3.261s cpu time, 0.371s GC time
Loading theory "Draft.ExtrEqs" (required by "Draft.USubstMoreTemplates")
class real_inner = real_normed_vector +
  fixes inner :: "'a => 'a => real"
  assumes "inner_commute": "!!x y. x \<bullet> y = y \<bullet> x"
    and
    "inner_add_left":
      "!!x y z. (x + y) \<bullet> z = x \<bullet> z + y \<bullet> z"
    and
    "inner_scaleR_left":
      "!!r x y. r *\<^sub>R x \<bullet> y = r * (x \<bullet> y)"
    and "inner_ge_zero": "!!x. 0 <= x \<bullet> x"
    and "inner_eq_zero_iff": "!!x. (x \<bullet> x = 0) = (x = (0::'a))"
    and "norm_eq_sqrt_inner": "!!x. norm x = sqrt (x \<bullet> x)"
val eqpattern =
   Pattern
    (
       Const ("HOL.Trueprop", "bool => prop") $
         (Const ("HOL.eq", "?'a => ?'a => bool") $
           Var (("_dummy_", 1), "?'a") $ Var (("_dummy_", 2), "?'a"))
       ):
   term Find_Theorems.criterion
val badeqpattern = Pattern (Const ("Pure.eq", "?'a => ?'a => prop")):
   term Find_Theorems.criterion
val undefpattern =
   Pattern
    (
       Const ("HOL.Trueprop", "bool => prop") $
         (Const ("HOL.eq", "?'a => ?'a => bool") $
           Var (("_dummy_", 1), "?'a") $ Const ("HOL.undefined", "?'a"))
       ):
   term Find_Theorems.criterion
val thmpattern =
   Pattern
    (Const ("HOL.Trueprop", "bool => prop") $ Var (("_dummy_", 1), "bool")):
   term Find_Theorems.criterion
val badnames =
   ["*nitpick*", "*Nitpick*", "*full_exhaustive*", "*_def*", "Enum.finite*",
    "*Quickcheck*", "ATP*", "*Nunchaku*", "*Code*", "*BNF*", "*SMT*",
    "*.*.*"]:
   string list
val unwanted_names =
   [(false, Name "*nitpick*"), (false, Name "*Nitpick*"),
    (false, Name "*full_exhaustive*"), (false, Name "*_def*"),
    (false, Name "Enum.finite*"), (false, Name "*Quickcheck*"),
    (false, Name "ATP*"), (false, Name "*Nunchaku*"),
    (false, Name "*Code*"), (false, Name "*BNF*"), (false, Name "*SMT*"),
    (false, Name "*.*.*")]:
   (bool * term Find_Theorems.criterion) list
val has_vars = fn: term -> bool
val get_all_eqs = fn: string -> Proof.context -> (string * thm) list
val get_all_thms = fn: string -> Proof.context -> (string * thm) list
val get_noneq_thms = fn: string -> Proof.context -> (string * thm) list
val template_eqs = fn:
   string -> Proof.context -> (string * thm * template) list
val template_thms = fn:
   string -> Proof.context -> (string * thm * template) list
### theory "Draft.ExtrEqs"
### 0.681s elapsed time, 2.693s cpu time, 0.291s GC time
Loading theory "HOL-Library.Liminf_Limsup" (required by "Draft.USubstMoreTemplates" via "Draft.USubst" via "Draft.Static_Semantics" via "Draft.Denotational_Semantics" via "HOL-Analysis.Derivative" via "HOL-Analysis.Bounded_Linear_Function" via "HOL-Analysis.Uniform_Limit" via "HOL-Analysis.Summation_Tests" via "HOL-Library.Extended_Real")
bundle vec_syntax
bundle no_vec_syntax
instantiation
  vec :: (zero, finite) zero
  zero_vec == zero_class.zero :: ('a, 'b) vec
instantiation
  vec :: (plus, finite) plus
  plus_vec == plus :: ('a, 'b) vec => ('a, 'b) vec => ('a, 'b) vec
instantiation
  vec :: (minus, finite) minus
  minus_vec == minus :: ('a, 'b) vec => ('a, 'b) vec => ('a, 'b) vec
instantiation
  vec :: (uminus, finite) uminus
  uminus_vec == uminus :: ('a, 'b) vec => ('a, 'b) vec
instantiation
  vec :: (times, finite) times
  times_vec == times :: ('a, 'b) vec => ('a, 'b) vec => ('a, 'b) vec
instantiation
  vec :: (one, finite) one
  one_vec == one_class.one :: ('a, 'b) vec
instantiation
  vec :: (ord, finite) ord
  less_eq_vec == less_eq :: ('a, 'b) vec => ('a, 'b) vec => bool
  less_vec == less :: ('a, 'b) vec => ('a, 'b) vec => bool
instantiation
  vec :: (real_vector, finite) real_vector
  scaleR_vec == scaleR :: real => ('a, 'b) vec => ('a, 'b) vec
instantiation
  vec :: (topological_space, finite) topological_space
  open_vec == open :: ('a, 'b) vec set => bool
instantiation
  vec :: (metric_space, finite) dist
  dist_vec == dist :: ('a, 'b) vec => ('a, 'b) vec => real
instantiation
  vec :: (metric_space, finite) uniformity_dist
  uniformity_vec == uniformity :: (('a, 'b) vec * ('a, 'b) vec) filter
### theory "HOL-Analysis.Linear_Algebra"
### 1.021s elapsed time, 4.009s cpu time, 0.485s GC time
Loading theory "HOL-Analysis.Affine" (required by "Draft.USubstMoreTemplates" via "Draft.USubst" via "Draft.Static_Semantics" via "Draft.Denotational_Semantics" via "HOL-Analysis.Derivative" via "HOL-Analysis.Line_Segment" via "HOL-Analysis.Convex")
instantiation
  vec :: (metric_space, finite) metric_space
instantiation
  vec :: (real_normed_vector, finite) real_normed_vector
  sgn_vec == sgn :: ('a, 'b) vec => ('a, 'b) vec
  norm_vec == norm :: ('a, 'b) vec => real
instantiation
  vec :: (real_inner, finite) real_inner
  inner_vec == inner :: ('a, 'b) vec => ('a, 'b) vec => real
instantiation
  vec :: (euclidean_space, finite) euclidean_space
  Basis_vec == Basis :: ('a, 'b) vec set
### theory "HOL-Library.Liminf_Limsup"
### 0.562s elapsed time, 2.193s cpu time, 0.322s GC time
Loading theory "HOL-Library.Order_Continuity" (required by "Draft.USubstMoreTemplates" via "Draft.USubst" via "Draft.Static_Semantics" via "Draft.Denotational_Semantics" via "HOL-Analysis.Derivative" via "HOL-Analysis.Bounded_Linear_Function" via "HOL-Analysis.Uniform_Limit" via "HOL-Analysis.Summation_Tests" via "HOL-Library.Extended_Real" via "HOL-Library.Extended_Nat")
### theory "HOL-Analysis.Abstract_Topology_2"
### 1.362s elapsed time, 5.342s cpu time, 0.690s GC time
Loading theory "HOL-Analysis.Connected" (required by "Draft.USubstMoreTemplates" via "Draft.USubst" via "Draft.Static_Semantics" via "Draft.Denotational_Semantics" via "HOL-Analysis.Derivative" via "HOL-Analysis.Bounded_Linear_Function" via "HOL-Analysis.Topology_Euclidean_Space" via "HOL-Analysis.Elementary_Normed_Spaces")
### theory "HOL-Analysis.Affine"
### 0.514s elapsed time, 1.994s cpu time, 0.347s GC time
Loading theory "HOL-Analysis.Convex" (required by "Draft.USubstMoreTemplates" via "Draft.USubst" via "Draft.Static_Semantics" via "Draft.Denotational_Semantics" via "HOL-Analysis.Derivative" via "HOL-Analysis.Line_Segment")
### theory "HOL-Analysis.Finite_Cartesian_Product"
### 1.741s elapsed time, 6.811s cpu time, 0.913s GC time
Loading theory "HOL-Analysis.Cartesian_Space" (required by "Draft.USubstMoreTemplates" via "Draft.USubst" via "Draft.Static_Semantics" via "Draft.Denotational_Semantics" via "HOL-Analysis.Derivative" via "HOL-Analysis.Bounded_Linear_Function" via "HOL-Analysis.Topology_Euclidean_Space" via "HOL-Analysis.Elementary_Normed_Spaces")
### theory "HOL-Analysis.Connected"
### 0.336s elapsed time, 1.310s cpu time, 0.226s GC time
Loading theory "HOL-Analysis.Function_Topology" (required by "Draft.USubstMoreTemplates" via "Draft.USubst" via "Draft.Static_Semantics" via "Draft.Denotational_Semantics" via "HOL-Analysis.Derivative" via "HOL-Analysis.Bounded_Linear_Function")
### theory "HOL-Library.Order_Continuity"
### 0.660s elapsed time, 2.555s cpu time, 0.415s GC time
Loading theory "HOL-Analysis.Elementary_Metric_Spaces" (required by "Draft.USubstMoreTemplates" via "Draft.USubst" via "Draft.Static_Semantics" via "Draft.Denotational_Semantics" via "HOL-Analysis.Derivative" via "HOL-Analysis.Bounded_Linear_Function" via "HOL-Analysis.Topology_Euclidean_Space" via "HOL-Analysis.Elementary_Normed_Spaces")
instantiation
  fun :: (type, topological_space) topological_space
  open_fun == open :: ('a => 'b) set => bool
### theory "HOL-Analysis.Function_Topology"
### 0.714s elapsed time, 2.755s cpu time, 0.400s GC time
Loading theory "HOL-Library.Extended_Nat" (required by "Draft.USubstMoreTemplates" via "Draft.USubst" via "Draft.Static_Semantics" via "Draft.Denotational_Semantics" via "HOL-Analysis.Derivative" via "HOL-Analysis.Bounded_Linear_Function" via "HOL-Analysis.Uniform_Limit" via "HOL-Analysis.Summation_Tests" via "HOL-Library.Extended_Real")
class infinity = type +
  fixes infinity :: "'a"
instantiation
  enat :: infinity
  infinity_enat == infinity :: enat
Proofs for inductive predicate(s) "rec_set_enat"
### theory "HOL-Analysis.Convex"
### 1.103s elapsed time, 4.252s cpu time, 0.673s GC time
Loading theory "HOL-Library.Sum_of_Squares" (required by "Draft.USubstMoreTemplates" via "Draft.USubst" via "Draft.Static_Semantics" via "Draft.Denotational_Semantics" via "HOL-Analysis.Derivative" via "HOL-Analysis.Bounded_Linear_Function" via "HOL-Analysis.Topology_Euclidean_Space" via "HOL-Analysis.Norm_Arith")
### No equation for constructor "Extended_Nat.infinity_class.infinity"
### in definition of function "the_enat"
consts
  the_enat :: "enat => nat"
instantiation
  enat :: zero_neq_one
  one_enat == one_class.one :: enat
  zero_enat == zero_class.zero :: enat
instantiation
  enat :: comm_monoid_add
  plus_enat == plus :: enat => enat => enat
locale linear_first_finite_dimensional_vector_space
  fixes scaleB :: "'a => 'b => 'b"  (infixr \<open>*b\<close> 75)
    and scaleC :: "'a => 'c => 'c"  (infixr \<open>*c\<close> 75)
    and BasisB :: "'b set"
    and f :: "'b => 'c"
  assumes "linear_first_finite_dimensional_vector_space (*b) (*c) BasisB f"
instantiation
  enat :: {comm_semiring_1,semiring_no_zero_divisors}
  times_enat == times :: enat => enat => enat
instantiation
  enat :: minus
  minus_enat == minus :: enat => enat => enat
class heine_borel = metric_space +
  assumes
    "bounded_imp_convergent_subsequence":
      "!!f. bounded (range f) ==>
            EX l r. strict_mono r & (f o r) \<longlonglongrightarrow> l"
instantiation
  enat :: linordered_ab_semigroup_add
  less_eq_enat == less_eq :: enat => enat => bool
  less_enat == less :: enat => enat => bool
instantiation
  enat :: {order_bot,order_top}
  top_enat == top :: enat
  bot_enat == bot :: enat
structure Cancel_Enat_Common:
  sig
    val dest_sum: term -> term list
    val dest_summing: term * term list -> term list
    val find_first: term -> term list -> term list
    val find_first_t: term list -> term -> term list -> term list
    val mk_eq: term * term -> term
    val mk_sum: typ -> term list -> term
    val norm_ss: simpset
    val norm_tac: Proof.context -> tactic
    val simplify_meta_eq: Proof.context -> thm -> thm -> thm
    val trans_tac: Proof.context -> thm option -> tactic
  end
structure Eq_Enat_Cancel:
  sig val proc: Proof.context -> term -> thm option end
structure Le_Enat_Cancel:
  sig val proc: Proof.context -> term -> thm option end
structure Less_Enat_Cancel:
  sig val proc: Proof.context -> term -> thm option end
instantiation
  enat :: complete_lattice
  Inf_enat == Inf :: enat set => enat
  Sup_enat == Sup :: enat set => enat
  sup_enat == sup :: enat => enat => enat
  inf_enat == inf :: enat => enat => enat
### theory "HOL-Library.Extended_Nat"
### 1.552s elapsed time, 5.772s cpu time, 3.249s GC time
Loading theory "HOL-Library.Extended_Real" (required by "Draft.USubstMoreTemplates" via "Draft.USubst" via "Draft.Static_Semantics" via "Draft.Denotational_Semantics" via "HOL-Analysis.Derivative" via "HOL-Analysis.Bounded_Linear_Function" via "HOL-Analysis.Uniform_Limit" via "HOL-Analysis.Summation_Tests")
### theory "HOL-Analysis.Cartesian_Space"
### 2.601s elapsed time, 9.815s cpu time, 3.898s GC time
instantiation
  enat :: linorder_topology
  open_enat == open :: enat set => bool
### ML warning (line 261 of "~~/src/HOL/Library/Sum_of_Squares/positivstellensatz.ML"):
### Value identifier (pth_abs) has not been referenced.
### ML warning (line 265 of "~~/src/HOL/Library/Sum_of_Squares/positivstellensatz.ML"):
### Value identifier (pth_max) has not been referenced.
### ML warning (line 269 of "~~/src/HOL/Library/Sum_of_Squares/positivstellensatz.ML"):
### Value identifier (pth_min) has not been referenced.
### ML warning (line 379 of "~~/src/HOL/Library/Sum_of_Squares/positivstellensatz.ML"):
### Pattern is not exhaustive.
signature FUNC =
  sig
    exception DUP of key
    exception SAME
    exception UNDEF of key
    val apply: 'a table -> key -> 'a
    val applyd: 'a table -> (key -> 'a) -> key -> 'a
    val build: ('a table -> 'a table) -> 'a table
    val choose: 'a table -> key * 'a
    val combine:
       ('a -> 'a -> 'a) -> ('a -> bool) -> 'a table -> 'a table -> 'a table
    val cons_list: key * 'a -> 'a list table -> 'a list table
    val default: key * 'a -> 'a table -> 'a table
    val defined: 'a table -> key -> bool
    val delete: key -> 'a table -> 'a table
    val delete_safe: key -> 'a table -> 'a table
    val dest: 'a table -> (key * 'a) list
    val dest_list: 'a list table -> (key * 'a) list
    val dom: 'a table -> key list
    val empty: 'a table
    val exists: (key * 'a -> bool) -> 'a table -> bool
    val fold: (key * 'a -> 'b -> 'b) -> 'a table -> 'b -> 'b
    val fold_rev: (key * 'a -> 'b -> 'b) -> 'a table -> 'b -> 'b
    val forall: (key * 'a -> bool) -> 'a table -> bool
    val get_first: (key * 'a -> 'b option) -> 'a table -> 'b option
    val insert: ('a * 'a -> bool) -> key * 'a -> 'a table -> 'a table
    val insert_list:
       ('a * 'a -> bool) -> key * 'a -> 'a list table -> 'a list table
    val insert_set: key -> set -> set
    val is_empty: 'a table -> bool
    val is_single: 'a table -> bool
    val join: (key -> 'a * 'a -> 'a) -> 'a table * 'a table -> 'a table
    type key
    val keys: 'a table -> key list
    val lookup: 'a table -> key -> 'a option
    val lookup_key: 'a table -> key -> (key * 'a) option
    val lookup_list: 'a list table -> key -> 'a list
    val make: (key * 'a) list -> 'a table
    val make_list: (key * 'a) list -> 'a list table
    val make_set: key list -> set
    val map: (key -> 'a -> 'b) -> 'a table -> 'b table
    val map_default: key * 'a -> ('a -> 'a) -> 'a table -> 'a table
    val map_entry: key -> ('a -> 'a) -> 'a table -> 'a table
    val max: 'a table -> (key * 'a) option
    val member: ('a * 'b -> bool) -> 'b table -> key * 'a -> bool
    val merge: ('a * 'a -> bool) -> 'a table * 'a table -> 'a table
    val merge_list:
       ('a * 'a -> bool) -> 'a list table * 'a list table -> 'a list table
    val min: 'a table -> (key * 'a) option
    val onefunc: key * 'a -> 'a table
    val remove: ('a * 'b -> bool) -> key * 'a -> 'b table -> 'b table
    val remove_list:
       ('a * 'b -> bool) -> key * 'a -> 'b list table -> 'b list table
    val remove_set: key -> set -> set
    type set = unit table
    type 'a table
    val tryapplyd: 'a table -> key -> 'a -> 'a
    val update: key * 'a -> 'a table -> 'a table
    val update_list:
       ('a * 'a -> bool) -> key * 'a -> 'a list table -> 'a list table
    val update_new: key * 'a -> 'a table -> 'a table
    val updatep: (key * 'a -> bool) -> key * 'a -> 'a table -> 'a table
  end
functor FuncFun (Key: KEY): FUNC
signature REAL_ARITH =
  sig
    type cert_conv = cterm -> thm * pss_tree
    val cterm_of_rat: Rat.rat -> cterm
    val dest_ratconst: cterm -> Rat.rat
    val gen_gen_real_arith:
       Proof.context ->
         (Rat.rat -> cterm) * conv * conv * conv * conv * conv * conv *
         conv * conv * conv * prover
           -> cert_conv
    val gen_prover_real_arith: Proof.context -> prover -> cert_conv
    val gen_real_arith:
       Proof.context ->
         (Rat.rat -> cterm) * conv * conv * conv * conv * conv * conv *
         conv * prover
           -> cert_conv
    val is_ratconst: cterm -> bool
    datatype positivstellensatz
    =
         Axiom_eq of int
       | Axiom_le of int
       | Axiom_lt of int
       | Eqmul of FuncUtil.poly * positivstellensatz
       | Product of positivstellensatz * positivstellensatz
       | Rational_eq of Rat.rat
       | Rational_le of Rat.rat
       | Rational_lt of Rat.rat
       | Square of FuncUtil.poly
       | Sum of positivstellensatz * positivstellensatz
    type prover =
       tree_choice list ->
         (thm list * thm list * thm list -> positivstellensatz -> thm) ->
           thm list * thm list * thm list -> thm * pss_tree
    datatype pss_tree
    = Branch of pss_tree * pss_tree | Cert of positivstellensatz | Trivial
    val real_linear_prover:
       (thm list * thm list * thm list -> positivstellensatz -> thm) ->
         thm list * thm list * thm list -> thm * pss_tree
    datatype tree_choice = Left | Right
  end
structure FuncUtil:
  sig
    structure Ctermfunc: FUNC
    structure Intfunc: FUNC
    structure Intpairfunc: FUNC
    structure Monomialfunc: FUNC
    structure Ratfunc: FUNC
    structure Symfunc: FUNC
    structure Termfunc: FUNC
    val dest_monomial: 'a Ctermfunc.table -> (cterm * 'a) list
    type monomial = int Ctermfunc.table
    val monomial_ord: int Ctermfunc.table * int Ctermfunc.table -> order
    val monomial_order: int Ctermfunc.table * int Ctermfunc.table -> order
    type poly = Rat.rat Monomialfunc.table
  end
structure RealArith: REAL_ARITH
signature POSITIVSTELLENSATZ_TOOLS =
  sig
    val print_cert: RealArith.pss_tree -> string
    val read_cert: Proof.context -> string -> RealArith.pss_tree
  end
structure Positivstellensatz_Tools: POSITIVSTELLENSATZ_TOOLS
### theory "HOL-Analysis.Elementary_Metric_Spaces"
### 10.719s elapsed time, 35.427s cpu time, 29.122s GC time
Loading theory "HOL-Analysis.Elementary_Normed_Spaces" (required by "Draft.USubstMoreTemplates" via "Draft.USubst" via "Draft.Static_Semantics" via "Draft.Denotational_Semantics" via "HOL-Analysis.Derivative" via "HOL-Analysis.Bounded_Linear_Function" via "HOL-Analysis.Topology_Euclidean_Space")
instantiation
  ereal :: uminus
  uminus_ereal == uminus :: ereal => ereal
signature SUM_OF_SQUARES =
  sig
    exception Failure of string
    val debug: bool Config.T
    val debug_message: Proof.context -> (unit -> string) -> unit
    datatype proof_method
    = Certificate of RealArith.pss_tree | Prover of string -> string
    val sos_tac:
       (RealArith.pss_tree -> unit) ->
         proof_method -> Proof.context -> int -> tactic
    val trace: bool Config.T
    val trace_message: Proof.context -> (unit -> string) -> unit
  end
structure Sum_of_Squares: SUM_OF_SQUARES
signature SOS_WRAPPER =
  sig val sos_tac: Proof.context -> string option -> int -> tactic end
structure SOS_Wrapper: SOS_WRAPPER
### theory "HOL-Library.Sum_of_Squares"
### 10.141s elapsed time, 33.097s cpu time, 28.730s GC time
Loading theory "HOL-Analysis.Norm_Arith" (required by "Draft.USubstMoreTemplates" via "Draft.USubst" via "Draft.Static_Semantics" via "Draft.Denotational_Semantics" via "HOL-Analysis.Derivative" via "HOL-Analysis.Bounded_Linear_Function" via "HOL-Analysis.Topology_Euclidean_Space")
Found termination order: "{}"
instantiation
  ereal :: infinity
  infinity_ereal == infinity :: ereal
instantiation
  ereal :: abs
  abs_ereal == abs :: ereal => ereal
instantiation
  ereal :: {comm_monoid_add,zero_neq_one}
  one_ereal == one_class.one :: ereal
  zero_ereal == zero_class.zero :: ereal
  plus_ereal == plus :: ereal => ereal => ereal
### ML warning (line 103 of "~~/src/HOL/Analysis/normarith.ML"):
### Matches are not exhaustive.
signature NORM_ARITH =
  sig
    val norm_arith: Proof.context -> conv
    val norm_arith_tac: Proof.context -> int -> tactic
  end
structure NormArith: NORM_ARITH
### theory "HOL-Analysis.Norm_Arith"
### 0.290s elapsed time, 0.874s cpu time, 0.059s GC time
instantiation
  ereal :: linorder
  less_eq_ereal == less_eq :: ereal => ereal => bool
  less_ereal == less :: ereal => ereal => bool
instantiation
  ereal :: {comm_monoid_mult,sgn}
  sgn_ereal == sgn :: ereal => ereal
  times_ereal == times :: ereal => ereal => ereal
instantiation
  ereal :: minus
  minus_ereal == minus :: ereal => ereal => ereal
instantiation
  ereal :: inverse
  inverse_ereal == inverse :: ereal => ereal
  divide_ereal == divide :: ereal => ereal => ereal
instantiation
  ereal :: lattice
  inf_ereal == inf :: ereal => ereal => ereal
  sup_ereal == sup :: ereal => ereal => ereal
instantiation
  ereal :: complete_lattice
  Inf_ereal == Inf :: ereal set => ereal
  Sup_ereal == Sup :: ereal set => ereal
  bot_ereal == bot :: ereal
  top_ereal == top :: ereal
### theory "HOL-Analysis.Elementary_Normed_Spaces"
### 1.124s elapsed time, 2.737s cpu time, 0.265s GC time
Loading theory "HOL-Analysis.Topology_Euclidean_Space" (required by "Draft.USubstMoreTemplates" via "Draft.USubst" via "Draft.Static_Semantics" via "Draft.Denotational_Semantics" via "HOL-Analysis.Derivative" via "HOL-Analysis.Bounded_Linear_Function")
instantiation
  ereal :: linear_continuum_topology
  open_ereal == open :: ereal set => bool
### theory "HOL-Library.Extended_Real"
### 10.418s elapsed time, 31.771s cpu time, 26.078s GC time
Loading theory "HOL-Library.Extended_Nonnegative_Real" (required by "Draft.USubstMoreTemplates" via "Draft.USubst" via "Draft.Static_Semantics" via "Draft.Denotational_Semantics" via "HOL-Analysis.Derivative" via "HOL-Analysis.Bounded_Linear_Function" via "HOL-Analysis.Uniform_Limit" via "HOL-Analysis.Summation_Tests" via "HOL-Analysis.Extended_Real_Limits")
"- \<infinity>"
  :: "ereal"
"\<infinity>"
  :: "ereal"
"True"
  :: "bool"
"True"
  :: "bool"
"ereal (13 / 4)"
  :: "ereal"
instantiation
  ennreal :: complete_linorder
  Inf_ennreal == Inf :: ennreal set => ennreal
  Sup_ennreal == Sup :: ennreal set => ennreal
  bot_ennreal == bot :: ennreal
  sup_ennreal == sup :: ennreal => ennreal => ennreal
  top_ennreal == top :: ennreal
  inf_ennreal == inf :: ennreal => ennreal => ennreal
  less_eq_ennreal == less_eq :: ennreal => ennreal => bool
  less_ennreal == less :: ennreal => ennreal => bool
instantiation
  ennreal :: infinity
  infinity_ennreal == infinity :: ennreal
instantiation
  ennreal :: {comm_semiring_1,semiring_1_no_zero_divisors}
  zero_ennreal == zero_class.zero :: ennreal
  plus_ennreal == plus :: ennreal => ennreal => ennreal
  one_ennreal == one_class.one :: ennreal
  times_ennreal == times :: ennreal => ennreal => ennreal
instantiation
  ennreal :: minus
  minus_ennreal == minus :: ennreal => ennreal => ennreal
instantiation
  ennreal :: inverse
  inverse_ennreal == inverse :: ennreal => ennreal
  divide_ennreal == divide :: ennreal => ennreal => ennreal
structure Cancel_Ennreal_Common:
  sig
    val dest_sum: term -> term list
    val dest_summing: term * term list -> term list
    val find_first: term -> term list -> term list
    val find_first_t: term list -> term -> term list -> term list
    val mk_eq: term * term -> term
    val mk_sum: typ -> term list -> term
    val norm_ss: simpset
    val norm_tac: Proof.context -> tactic
    val simplify_meta_eq: Proof.context -> thm -> thm -> thm
    val trans_tac: Proof.context -> thm option -> tactic
  end
structure Eq_Ennreal_Cancel:
  sig val proc: Proof.context -> term -> thm option end
structure Le_Ennreal_Cancel:
  sig val proc: Proof.context -> term -> thm option end
structure Less_Ennreal_Cancel:
  sig val proc: Proof.context -> term -> thm option end
instantiation
  ennreal :: linear_continuum_topology
  open_ennreal == open :: ennreal set => bool
### theory "HOL-Analysis.Topology_Euclidean_Space"
### 1.767s elapsed time, 4.421s cpu time, 0.578s GC time
Loading theory "HOL-Analysis.Convex_Euclidean_Space" (required by "Draft.USubstMoreTemplates" via "Draft.USubst" via "Draft.Static_Semantics" via "Draft.Denotational_Semantics" via "HOL-Analysis.Derivative")
Loading theory "HOL-Analysis.Line_Segment" (required by "Draft.USubstMoreTemplates" via "Draft.USubst" via "Draft.Static_Semantics" via "Draft.Denotational_Semantics" via "HOL-Analysis.Derivative")
### theory "HOL-Library.Extended_Nonnegative_Real"
### 1.317s elapsed time, 3.569s cpu time, 0.390s GC time
Loading theory "HOL-Analysis.Extended_Real_Limits" (required by "Draft.USubstMoreTemplates" via "Draft.USubst" via "Draft.Static_Semantics" via "Draft.Denotational_Semantics" via "HOL-Analysis.Derivative" via "HOL-Analysis.Bounded_Linear_Function" via "HOL-Analysis.Uniform_Limit" via "HOL-Analysis.Summation_Tests")
### theory "HOL-Analysis.Line_Segment"
### 0.857s elapsed time, 2.648s cpu time, 0.410s GC time
### theory "HOL-Analysis.Convex_Euclidean_Space"
### 0.984s elapsed time, 2.946s cpu time, 0.533s GC time
### theory "HOL-Analysis.Extended_Real_Limits"
### 0.972s elapsed time, 2.591s cpu time, 0.540s GC time
Loading theory "HOL-Analysis.Summation_Tests" (required by "Draft.USubstMoreTemplates" via "Draft.USubst" via "Draft.Static_Semantics" via "Draft.Denotational_Semantics" via "HOL-Analysis.Derivative" via "HOL-Analysis.Bounded_Linear_Function" via "HOL-Analysis.Uniform_Limit")
### theory "HOL-Analysis.Summation_Tests"
### 0.574s elapsed time, 0.641s cpu time, 0.091s GC time
Loading theory "HOL-Analysis.Uniform_Limit" (required by "Draft.USubstMoreTemplates" via "Draft.USubst" via "Draft.Static_Semantics" via "Draft.Denotational_Semantics" via "HOL-Analysis.Derivative" via "HOL-Analysis.Bounded_Linear_Function")
### theory "HOL-Analysis.Uniform_Limit"
### 0.394s elapsed time, 0.443s cpu time, 0.067s GC time
Loading theory "HOL-Analysis.Bounded_Linear_Function" (required by "Draft.USubstMoreTemplates" via "Draft.USubst" via "Draft.Static_Semantics" via "Draft.Denotational_Semantics" via "HOL-Analysis.Derivative")
instantiation
  blinfun :: (real_normed_vector, real_normed_vector) real_normed_vector
  uminus_blinfun == uminus ::
    'a \<Rightarrow>\<^sub>L 'b => 'a \<Rightarrow>\<^sub>L 'b
  zero_blinfun == zero_class.zero :: 'a \<Rightarrow>\<^sub>L 'b
  minus_blinfun == minus ::
    'a \<Rightarrow>\<^sub>L 'b
    => 'a \<Rightarrow>\<^sub>L 'b => 'a \<Rightarrow>\<^sub>L 'b
  plus_blinfun == plus ::
    'a \<Rightarrow>\<^sub>L 'b
    => 'a \<Rightarrow>\<^sub>L 'b => 'a \<Rightarrow>\<^sub>L 'b
  sgn_blinfun == sgn ::
    'a \<Rightarrow>\<^sub>L 'b => 'a \<Rightarrow>\<^sub>L 'b
  norm_blinfun == norm :: 'a \<Rightarrow>\<^sub>L 'b => real
  scaleR_blinfun == scaleR ::
    real => 'a \<Rightarrow>\<^sub>L 'b => 'a \<Rightarrow>\<^sub>L 'b
  dist_blinfun == dist ::
    'a \<Rightarrow>\<^sub>L 'b => 'a \<Rightarrow>\<^sub>L 'b => real
  uniformity_blinfun == uniformity ::
    ('a \<Rightarrow>\<^sub>L 'b * 'a \<Rightarrow>\<^sub>L 'b) filter
  open_blinfun == open :: ('a \<Rightarrow>\<^sub>L 'b) set => bool
locale bounded_bilinear
  fixes prod :: "'a => 'b => 'c"  (infixl \<open>**\<close> 70)
  assumes "bounded_bilinear (**)"
locale bounded_bilinear
  fixes prod :: "'a => 'b => 'c"  (infixl \<open>**\<close> 70)
  assumes "bounded_bilinear (**)"
### theory "HOL-Analysis.Bounded_Linear_Function"
### 1.249s elapsed time, 1.355s cpu time, 0.148s GC time
Loading theory "HOL-Analysis.Derivative" (required by "Draft.USubstMoreTemplates" via "Draft.USubst" via "Draft.Static_Semantics" via "Draft.Denotational_Semantics")
### theory "HOL-Analysis.Derivative"
### 1.260s elapsed time, 1.452s cpu time, 0.268s GC time
Loading theory "Draft.Denotational_Semantics" (required by "Draft.USubstMoreTemplates" via "Draft.USubst" via "Draft.Static_Semantics")
Found termination order: "(%p. size (snd p)) <*mlex*> {}"
Found termination order:
  "case_sum (%p. size (snd p)) (%p. size (snd p)) <*mlex*> {}"
### Ambiguous input (line 410 of "$AFP/Differential_Game_Logic/Denotational_Semantics.thy") produces 2 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("_applC" ("_position" valid_in)
###       ("_cargs" ("_position" I)
###         ("\<^const>Syntax.Implies" ("_position" \<phi>)
###           ("_position" \<psi>))))
###     ("\<^const>Set.subset_eq"
###       ("_applC" ("_position" fml_sem)
###         ("_cargs" ("_position" I) ("_position" \<phi>)))
###       ("_applC" ("_position" fml_sem)
###         ("_cargs" ("_position" I) ("_position" \<psi>))))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("_applC" ("_position" valid_in)
###       ("_cargs" ("_position" I)
###         ("\<^const>FuncSet.funcset" ("_position" \<phi>)
###           ("_position" \<psi>))))
###     ("\<^const>Set.subset_eq"
###       ("_applC" ("_position" fml_sem)
###         ("_cargs" ("_position" I) ("_position" \<phi>)))
###       ("_applC" ("_position" fml_sem)
###         ("_cargs" ("_position" I) ("_position" \<psi>))))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 416 of "$AFP/Differential_Game_Logic/Denotational_Semantics.thy") produces 2 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("_applC" ("_position" valid)
###       ("\<^const>Syntax.Implies" ("_position" \<phi>) ("_position" \<psi>)))
###     ("\<^const>HOL.All_binder" ("_position" I)
###       ("\<^const>Set.subset_eq"
###         ("_applC" ("_position" fml_sem)
###           ("_cargs" ("_position" I) ("_position" \<phi>)))
###         ("_applC" ("_position" fml_sem)
###           ("_cargs" ("_position" I) ("_position" \<psi>)))))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("_applC" ("_position" valid)
###       ("\<^const>FuncSet.funcset" ("_position" \<phi>)
###         ("_position" \<psi>)))
###     ("\<^const>HOL.All_binder" ("_position" I)
###       ("\<^const>Set.subset_eq"
###         ("_applC" ("_position" fml_sem)
###           ("_cargs" ("_position" I) ("_position" \<phi>)))
###         ("_applC" ("_position" fml_sem)
###           ("_cargs" ("_position" I) ("_position" \<psi>)))))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### theory "Draft.Denotational_Semantics"
### 1.250s elapsed time, 1.514s cpu time, 0.167s GC time
Loading theory "Draft.Static_Semantics" (required by "Draft.USubstMoreTemplates" via "Draft.USubst")
### theory "Draft.Static_Semantics"
### 0.082s elapsed time, 0.095s cpu time, 0.000s GC time
Loading theory "Draft.Coincidence" (required by "Draft.USubstMoreTemplates" via "Draft.USubst")
### theory "Draft.Coincidence"
### 0.714s elapsed time, 0.805s cpu time, 0.126s GC time
Loading theory "Draft.USubst" (required by "Draft.USubstMoreTemplates")
Found termination order: "{}"
Found termination order: "{}"
Found termination order: "{}"
Found termination order: "{}"
Found termination order: "{}"
Found termination order: "{}"
Found termination order: "{}"
Found termination order: "{}"
Found termination order: "{}"
Found termination order: "{}"
Found termination order: "{}"
Found termination order: "{}"
Found termination order: "{}"
Found termination order: "{}"
Found termination order: "{}"
### theory "Draft.USubst"
### 2.373s elapsed time, 2.719s cpu time, 0.448s GC time
Loading theory "Draft.USubstMoreTemplates"
val templateLemmas =
   [("USubst.Aterm_Some", "Aterm ?\<theta> = Aterm ?\<theta>",
     template_equation
      (template_app (template_hole 0, template_var 0),
       template_app (template_hole 0, template_var 0))),
    ("USubst.fst_pair", "fst (?a, ?b) = ?a",
     template_equation
      (template_app
        (template_hole 1,
         template_app
          (template_app (template_hole 0, template_var 1), template_var 0)),
       template_var 1)),
    ("USubst.snd_pair", "snd (?a, ?b) = ?b",
     template_equation
      (template_app
        (template_hole 1,
         template_app
          (template_app (template_hole 0, template_var 1), template_var 0)),
       template_var 0)),
    ("USubst.union_comm", "?A Un ?B = ?B Un ?A",
     template_equation
      (template_app
        (template_app (template_hole 0, template_var 1), template_var 0),
       template_app
        (template_app (template_hole 0, template_var 0), template_var 1))),
    ("USubst.usubst_taboos_mon",
     "?U <= fst (usubstappp ?\<sigma> ?U ?\<alpha>)",
     template_inequation
      (less_equals, template_var 2,
       template_app
        (template_hole 1,
         template_app
          (template_app
            (template_app (template_hole 0, template_var 1),
             template_var 2),
           template_var 0)))),
    ("USubst.repc_games", "Games (repc ?I ?f ?d) = Games ?I",
     template_equation
      (template_app
        (template_hole 1,
         template_app
          (template_app
            (template_app (template_hole 0, template_var 2),
             template_var 1),
           template_var 0)),
       template_app (template_hole 1, template_var 2))),
    ("USubst.repc_preds", "Preds (repc ?I ?f ?d) = Preds ?I",
     template_equation
      (template_app
        (template_hole 1,
         template_app
          (template_app
            (template_app (template_hole 0, template_var 2),
             template_var 1),
           template_var 0)),
       template_app (template_hole 1, template_var 2))),
    ("USubst.repc_funcs", "Funcs (repc ?I ?f ?d) = Funcs ?I",
     template_equation
      (template_app
        (template_hole 1,
         template_app
          (template_app
            (template_app (template_hole 0, template_var 2),
             template_var 1),
           template_var 0)),
       template_app (template_hole 1, template_var 2))),
    ("USubst.Noto_undef", "(Noto ?\<phi> = undeff) = (?\<phi> = undeff)",
     template_bimplication
      (template_equation
        (template_app (template_hole 1, template_var 0), template_hole 0),
       template_equation (template_var 0, template_hole 0))),
    ("USubst.Differentialo_undef",
     "(Differentialo ?\<theta> = undeft) = (?\<theta> = undeft)",
     template_bimplication
      (template_equation
        (template_app (template_hole 1, template_var 0), template_hole 0),
       template_equation (template_var 0, template_hole 0))),
    ("USubst.Dualo_undef",
     "(Dualo ?\<alpha> = undefg) = (?\<alpha> = undefg)",
     template_bimplication
      (template_equation
        (template_app (template_hole 1, template_var 0), template_hole 0),
       template_equation (template_var 0, template_hole 0))),
    ("USubst.Loopo_undef",
     "(Loopo ?\<alpha> = undefg) = (?\<alpha> = undefg)",
     template_bimplication
      (template_equation
        (template_app (template_hole 1, template_var 0), template_hole 0),
       template_equation (template_var 0, template_hole 0))),
    ("USubst.Testo_undef", "(Testo ?\<phi> = undefg) = (?\<phi> = undeff)",
     template_bimplication
      (template_equation
        (template_app (template_hole 3, template_var 0), template_hole 2),
       template_equation (template_var 0, template_hole 0))),
    ("USubst.Existso_undef",
     "(Existso ?x ?\<phi> = undeff) = (?\<phi> = undeff)",
     template_bimplication
      (template_equation
        (template_app
          (template_app (template_hole 1, template_var 1), template_var 0),
         template_hole 0),
       template_equation (template_var 0, template_hole 0))),
    ("USubst.Assigno_undef",
     "(Assigno ?x ?\<theta> = undefg) = (?\<theta> = undeft)",
     template_bimplication
      (template_equation
        (template_app
          (template_app (template_hole 3, template_var 1), template_var 0),
         template_hole 2),
       template_equation (template_var 0, template_hole 0))),
    ("USubst.ODEo_undef",
     "(ODEo ?x ?\<theta> = undefg) = (?\<theta> = undeft)",
     template_bimplication
      (template_equation
        (template_app
          (template_app (template_hole 3, template_var 1), template_var 0),
         template_hole 2),
       template_equation (template_var 0, template_hole 0))),
    ("USubst.undeff_equiv",
     "(?\<phi> ~= undeff) = (EX f. ?\<phi> = Afml f)",
     template_equation
      (template_app
        (template_hole 4,
         template_app
          (template_app (template_hole 3, template_var 0),
           template_hole 2)),
       template_app (template_hole 1, t_empty))),
    ("USubst.undeft_equiv",
     "(?\<theta> ~= undeft) = (EX t. ?\<theta> = Aterm t)",
     template_equation
      (template_app
        (template_hole 4,
         template_app
          (template_app (template_hole 3, template_var 0),
           template_hole 2)),
       template_app (template_hole 1, t_empty))),
    ("USubst.undefg_equiv",
     "(?\<alpha> ~= undefg) = (EX g. ?\<alpha> = Agame g)",
     template_equation
      (template_app
        (template_hole 4,
         template_app
          (template_app (template_hole 3, template_var 0),
           template_hole 2)),
       template_app (template_hole 1, t_empty))),
    ("USubst.Ando_undef",
     "(Ando ?\<phi> ?\<psi> = undeff) =
      (?\<phi> = undeff | ?\<psi> = undeff)",
     template_bimplication
      (template_equation
        (template_app
          (template_app (template_hole 2, template_var 1), template_var 0),
         template_hole 1),
       template_predicate
        (
           template_app
            (template_app
              (template_hole 0,
               template_app
                (template_app (template_hole 3, template_var 1),
                 template_hole 1)),
             template_app
              (template_app (template_hole 3, template_var 0),
               template_hole 1))
           ))),
    ("USubst.Diamondo_undef",
     "(Diamondo ?\<alpha> ?\<phi> = undeff) =
      (?\<alpha> = undefg | ?\<phi> = undeff)",
     template_bimplication
      (template_equation
        (template_app
          (template_app (template_hole 4, template_var 1), template_var 0),
         template_hole 3),
       template_predicate
        (
           template_app
            (template_app
              (template_hole 2,
               template_app
                (template_app (template_hole 1, template_var 1),
                 template_hole 0)),
             template_app
              (template_app (template_hole 5, template_var 0),
               template_hole 3))
           ))),
    ("USubst.Geqo_undef",
     "(Geqo ?\<theta> ?\<eta> = undeff) =
      (?\<theta> = undeft | ?\<eta> = undeft)",
     template_bimplication
      (template_equation
        (template_app
          (template_app (template_hole 4, template_var 1), template_var 0),
         template_hole 3),
       template_predicate
        (
           template_app
            (template_app
              (template_hole 2,
               template_app
                (template_app (template_hole 1, template_var 1),
                 template_hole 0)),
             template_app
              (template_app (template_hole 1, template_var 0),
               template_hole 0))
           ))),
    ("USubst.Pluso_undef",
     "(Pluso ?\<theta> ?\<eta> = undeft) =
      (?\<theta> = undeft | ?\<eta> = undeft)",
     template_bimplication
      (template_equation
        (template_app
          (template_app (template_hole 2, template_var 1), template_var 0),
         template_hole 1),
       template_predicate
        (
           template_app
            (template_app
              (template_hole 0,
               template_app
                (template_app (template_hole 3, template_var 1),
                 template_hole 1)),
             template_app
              (template_app (template_hole 3, template_var 0),
               template_hole 1))
           ))),
    ("USubst.Timeso_undef",
     "(Timeso ?\<theta> ?\<eta> = undeft) =
      (?\<theta> = undeft | ?\<eta> = undeft)",
     template_bimplication
      (template_equation
        (template_app
          (template_app (template_hole 2, template_var 1), template_var 0),
         template_hole 1),
       template_predicate
        (
           template_app
            (template_app
              (template_hole 0,
               template_app
                (template_app (template_hole 3, template_var 1),
                 template_hole 1)),
             template_app
              (template_app (template_hole 3, template_var 0),
               template_hole 1))
           ))),
    ("USubst.Choiceo_undef",
     "(Choiceo ?\<alpha> ?\<beta> = undefg) =
      (?\<alpha> = undefg | ?\<beta> = undefg)",
     template_bimplication
      (template_equation
        (template_app
          (template_app (template_hole 2, template_var 1), template_var 0),
         template_hole 1),
       template_predicate
        (
           template_app
            (template_app
              (template_hole 0,
               template_app
                (template_app (template_hole 3, template_var 1),
                 template_hole 1)),
             template_app
              (template_app (template_hole 3, template_var 0),
               template_hole 1))
           ))),
    ("USubst.Composeo_undef",
     "(Composeo ?\<alpha> ?\<beta> = undefg) =
      (?\<alpha> = undefg | ?\<beta> = undefg)",
     template_bimplication
      (template_equation
        (template_app
          (template_app (template_hole 2, template_var 1), template_var 0),
         template_hole 1),
       template_predicate
        (
           template_app
            (template_app
              (template_hole 0,
               template_app
                (template_app (template_hole 3, template_var 1),
                 template_hole 1)),
             template_app
              (template_app (template_hole 3, template_var 0),
               template_hole 1))
           ))),
    ("USubst.repc_consts",
     "Consts (repc ?I ?f ?d) ?c = (if ?c = ?f then ?d else Consts ?I ?c)",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_hole 3,
                template_app
                 (template_app
                   (template_app (template_hole 2, template_var 3),
                    template_var 2),
                  template_var 1)),
              template_var 0)
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_app
                (template_hole 1,
                 template_app
                  (template_app (template_hole 0, template_var 0),
                   template_var 2)),
               template_var 1),
             template_app
              (template_app (template_hole 3, template_var 3),
               template_var 0))
           ))),
    ("USubst.usubstappp_fst_mon",
     "?U <= ?V ==>
      fst (usubstappp ?\<sigma> ?U ?\<alpha>)
      <= fst (usubstappp ?\<sigma> ?V ?\<alpha>)",
     template_implication
      ([template_inequation (less_equals, template_var 3, template_var 2)],
       template_inequation
        (less_equals,
         template_app
          (template_hole 1,
           template_app
            (template_app
              (template_app (template_hole 0, template_var 1),
               template_var 3),
             template_var 0)),
         template_app
          (template_hole 1,
           template_app
            (template_app
              (template_app (template_hole 0, template_var 1),
               template_var 2),
             template_var 0))))),
    ("USubst.usubst_rule_sound",
     "[| usubstr ?\<sigma> ?R ~= None; locally_sound ?R |]
      ==> locally_sound (the (usubstr ?\<sigma> ?R))",
     template_implication
      ([template_negation
         (
            template_equation
             (template_app
               (template_app (template_hole 3, template_var 1),
                template_var 0),
              template_hole 2)
            ),
        template_predicate
         (template_app (template_hole 1, template_var 0))],
       template_predicate
        (
           template_app
            (template_hole 1,
             template_app
              (template_hole 0,
               template_app
                (template_app (template_hole 3, template_var 1),
                 template_var 0)))
           ))),
    ("USubst.usubstappp_dual",
     "usubstappp ?\<sigma> ?U ?\<alpha>^d =
      (fst (usubstappp ?\<sigma> ?U ?\<alpha>),
       Dualo (snd (usubstappp ?\<sigma> ?U ?\<alpha>)))",
     template_equation
      (template_app
        (template_app
          (template_app (template_hole 5, template_var 2), template_var 1),
         template_app (template_hole 4, template_var 0)),
       template_app
        (template_app
          (template_hole 3,
           template_app
            (template_hole 2,
             template_app
              (template_app
                (template_app (template_hole 5, template_var 2),
                 template_var 1),
               template_var 0))),
         template_app
          (template_hole 1,
           template_app
            (template_hole 0,
             template_app
              (template_app
                (template_app (template_hole 5, template_var 2),
                 template_var 1),
               template_var 0)))))),
    ("USubst.usubstr_length",
     "usubstr ?\<sigma> ?R ~= None ==>
      length (fst (the (usubstr ?\<sigma> ?R))) = length (fst ?R)",
     template_implication
      ([template_negation
         (
            template_equation
             (template_app
               (template_app (template_hole 5, template_var 1),
                template_var 0),
              template_hole 4)
            )],
       template_equation
        (template_app
          (template_hole 2,
           template_app
            (template_hole 1,
             template_app
              (template_hole 0,
               template_app
                (template_app (template_hole 5, template_var 1),
                 template_var 0)))),
         template_app
          (template_hole 2,
           template_app (template_hole 1, template_var 0))))),
    ("USubst.usubstappt_differential_conv",
     "usubstappt ?\<sigma> ?U (Differential ?\<theta>) ~= undeft ==>
      usubstappt ?\<sigma> Denotational_Semantics.allvars ?\<theta> ~=
      undeft",
     template_implication
      ([template_negation
         (
            template_equation
             (template_app
               (template_app
                 (template_app (template_hole 4, template_var 2),
                  template_var 1),
                template_app (template_hole 3, template_var 0)),
              template_hole 2)
            )],
       template_negation
        (
           template_equation
            (template_app
              (template_app
                (template_app (template_hole 4, template_var 2),
                 template_app (template_hole 1, t_empty)),
               template_var 0),
             template_hole 2)
           ))),
    ("USubst.usubst_sound",
     "[| usubsta ?\<sigma> ?\<phi> ~= undeff; valid ?\<phi> |]
      ==> valid (the (usubsta ?\<sigma> ?\<phi>))",
     template_implication
      ([template_negation
         (
            template_equation
             (template_app
               (template_app
                 (template_app (template_hole 4, template_var 1),
                  template_hole 3),
                template_var 0),
              template_hole 2)
            ),
        template_predicate
         (template_app (template_hole 1, template_var 0))],
       template_predicate
        (
           template_app
            (template_hole 1,
             template_app
              (template_hole 0,
               template_app
                (template_app
                  (template_app (template_hole 4, template_var 1),
                   template_hole 3),
                 template_var 0)))
           ))),
    ("USubst.adjoint_dotsubstt",
     "USubst.adjoint (dotsubstt ?\<theta>) ?I ?\<omega> =
      repc ?I dotid (term_sem ?I ?\<theta> ?\<omega>)",
     template_equation
      (template_app
        (template_app
          (template_app
            (template_hole 6,
             template_app (template_hole 5, template_var 2)),
           template_var 1),
         template_var 0),
       template_app
        (template_app
          (template_app (template_hole 4, template_var 1),
           template_app
            (template_app
              (template_app
                (template_app
                  (template_app
                    (template_app
                      (template_app
                        (template_app (template_hole 3, template_hole 2),
                         template_hole 1),
                       template_hole 1),
                     template_hole 1),
                   template_hole 2),
                 template_hole 1),
               template_hole 2),
             template_hole 2)),
         template_app
          (template_app
            (template_app (template_hole 0, template_var 1),
             template_var 2),
           template_var 0)))),
    ("USubst.adjoint_stays_mon",
     "mono
       (case SGames ?\<sigma> ?a of None => Games ?I ?a
        | Some r => game_sem ?I r)",
     template_predicate
      (
         template_app
          (template_hole 6,
           template_app
            (template_app
              (template_app
                (template_hole 5,
                 template_app
                  (template_app (template_hole 4, template_var 2),
                   template_var 1)),
               t_empty),
             template_app
              (template_app
                (template_app (template_hole 2, t_empty), template_var 0),
               template_var 1)))
         )),
    ("USubst.usubstappp_loop",
     "usubstappp ?\<sigma> ?U ?\<alpha>** =
      (fst (usubstappp ?\<sigma> ?U ?\<alpha>),
       Loopo
        (snd (usubstappp ?\<sigma> (fst (usubstappp ?\<sigma> ?U ?\<alpha>))
               ?\<alpha>)))",
     template_equation
      (template_app
        (template_app
          (template_app (template_hole 5, template_var 2), template_var 1),
         template_app (template_hole 4, template_var 0)),
       template_app
        (template_app
          (template_hole 3,
           template_app
            (template_hole 2,
             template_app
              (template_app
                (template_app (template_hole 5, template_var 2),
                 template_var 1),
               template_var 0))),
         template_app
          (template_hole 1,
           template_app
            (template_hole 0,
             template_app
              (template_app
                (template_app (template_hole 5, template_var 2),
                 template_app
                  (template_hole 2,
                   template_app
                    (template_app
                      (template_app (template_hole 5, template_var 2),
                       template_var 1),
                     template_var 0))),
               template_var 0)))))),
    ("USubst.usubstappf_antimon",
     "[| ?V <= ?U; usubstappf ?\<sigma> ?U ?\<phi> ~= undeff |]
      ==> usubstappf ?\<sigma> ?U ?\<phi> =
          usubstappf ?\<sigma> ?V ?\<phi>",
     template_implication
      ([template_inequation (less_equals, template_var 3, template_var 2),
        template_negation
         (
            template_equation
             (template_app
               (template_app
                 (template_app (template_hole 1, template_var 1),
                  template_var 2),
                template_var 0),
              template_hole 0)
            )],
       template_equation
        (template_app
          (template_app
            (template_app (template_hole 1, template_var 1),
             template_var 2),
           template_var 0),
         template_app
          (template_app
            (template_app (template_hole 1, template_var 1),
             template_var 3),
           template_var 0)))),
    ("USubst.usubstappt_antimon",
     "[| ?V <= ?U; usubstappt ?\<sigma> ?U ?\<theta> ~= undeft |]
      ==> usubstappt ?\<sigma> ?U ?\<theta> =
          usubstappt ?\<sigma> ?V ?\<theta>",
     template_implication
      ([template_inequation (less_equals, template_var 3, template_var 2),
        template_negation
         (
            template_equation
             (template_app
               (template_app
                 (template_app (template_hole 1, template_var 1),
                  template_var 2),
                template_var 0),
              template_hole 0)
            )],
       template_equation
        (template_app
          (template_app
            (template_app (template_hole 1, template_var 1),
             template_var 2),
           template_var 0),
         template_app
          (template_app
            (template_app (template_hole 1, template_var 1),
             template_var 3),
           template_var 0)))),
    ("USubst.adjoint_preds_skip",
     "SPreds ?\<sigma> ?p = undeff ==>
      Preds (USubst.adjoint ?\<sigma> ?I ?\<omega>) ?p = Preds ?I ?p",
     template_implication
      ([template_equation
         (template_app
           (template_app
             (template_app (template_hole 6, t_empty), template_var 3),
            template_var 2),
          template_hole 3)],
       template_equation
        (template_app
          (template_app
            (template_hole 1,
             template_app
              (template_app
                (template_app (template_hole 0, template_var 3),
                 template_var 1),
               template_var 0)),
           template_var 2),
         template_app
          (template_app (template_hole 1, template_var 1),
           template_var 2)))),
    ("USubst.adjoint_funcs_skip",
     "SFuncs ?\<sigma> ?f = undeft ==>
      Funcs (USubst.adjoint ?\<sigma> ?I ?\<omega>) ?f = Funcs ?I ?f",
     template_implication
      ([template_equation
         (template_app
           (template_app
             (template_app (template_hole 6, t_empty), template_var 3),
            template_var 2),
          template_hole 3)],
       template_equation
        (template_app
          (template_app
            (template_hole 1,
             template_app
              (template_app
                (template_app (template_hole 0, template_var 3),
                 template_var 1),
               template_var 0)),
           template_var 2),
         template_app
          (template_app (template_hole 1, template_var 1),
           template_var 2)))),
    ("USubst.adjoint_consts",
     "Consts (USubst.adjoint ?\<sigma> ?I ?\<omega>) ?f =
      term_sem ?I
       (case SConst ?\<sigma> ?f of None => Const ?f | Some r => r)
       ?\<omega>",
     template_equation
      (template_app
        (template_app
          (template_hole 7,
           template_app
            (template_app
              (template_app (template_hole 6, template_var 3),
               template_var 2),
             template_var 1)),
         template_var 0),
       template_app
        (template_app
          (template_app (template_hole 5, template_var 2),
           template_app
            (template_app
              (template_app
                (template_hole 4,
                 template_app (template_hole 3, template_var 0)),
               t_empty),
             template_app
              (template_app
                (template_app (template_hole 2, t_empty), template_var 3),
               template_var 0))),
         template_var 1))),
    ("USubst.usubst_taboos",
     "snd (usubstappp ?\<sigma> ?U ?\<alpha>) ~= undefg ==>
      ?U Un BVG (the (snd (usubstappp ?\<sigma> ?U ?\<alpha>)))
      <= fst (usubstappp ?\<sigma> ?U ?\<alpha>)",
     template_implication
      ([template_negation
         (
            template_equation
             (template_app
               (template_hole 7,
                template_app
                 (template_app
                   (template_app (template_hole 6, template_var 2),
                    template_var 1),
                  template_var 0)),
              template_hole 5)
            )],
       template_inequation
        (less_equals,
         template_app
          (template_app (template_hole 3, template_var 1),
           template_app
            (template_hole 2,
             template_app
              (template_hole 1,
               template_app
                (template_hole 7,
                 template_app
                  (template_app
                    (template_app (template_hole 6, template_var 2),
                     template_var 1),
                   template_var 0))))),
         template_app
          (template_hole 0,
           template_app
            (template_app
              (template_app (template_hole 6, template_var 2),
               template_var 1),
             template_var 0))))),
    ("USubst.usubstappf_geq_conv",
     "usubstappf ?\<sigma> ?U (Geq ?\<theta> ?\<eta>) ~= undeff ==>
      usubstappt ?\<sigma> ?U ?\<theta> ~= undeft &
      usubstappt ?\<sigma> ?U ?\<eta> ~= undeft",
     template_implication
      ([template_negation
         (
            template_equation
             (template_app
               (template_app
                 (template_app (template_hole 6, template_var 3),
                  template_var 2),
                template_app
                 (template_app (template_hole 5, template_var 1),
                  template_var 0)),
              template_hole 4)
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 3,
               template_app
                (template_hole 8,
                 template_app
                  (template_app
                    (template_hole 2,
                     template_app
                      (template_app
                        (template_app (template_hole 1, template_var 3),
                         template_var 2),
                       template_var 1)),
                   template_hole 0))),
             template_app
              (template_hole 8,
               template_app
                (template_app
                  (template_hole 2,
                   template_app
                    (template_app
                      (template_app (template_hole 1, template_var 3),
                       template_var 2),
                     template_var 0)),
                 template_hole 0)))
           ))),
    ("USubst.usubstappt_plus_conv",
     "usubstappt ?\<sigma> ?U (Plus ?\<theta> ?\<eta>) ~= undeft ==>
      usubstappt ?\<sigma> ?U ?\<theta> ~= undeft &
      usubstappt ?\<sigma> ?U ?\<eta> ~= undeft",
     template_implication
      ([template_negation
         (
            template_equation
             (template_app
               (template_app
                 (template_app (template_hole 3, template_var 3),
                  template_var 2),
                template_app
                 (template_app (template_hole 2, template_var 1),
                  template_var 0)),
              template_hole 1)
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 0,
               template_app
                (template_hole 5,
                 template_app
                  (template_app
                    (template_hole 4,
                     template_app
                      (template_app
                        (template_app (template_hole 3, template_var 3),
                         template_var 2),
                       template_var 1)),
                   template_hole 1))),
             template_app
              (template_hole 5,
               template_app
                (template_app
                  (template_hole 4,
                   template_app
                    (template_app
                      (template_app (template_hole 3, template_var 3),
                       template_var 2),
                     template_var 0)),
                 template_hole 1)))
           ))),
    ("USubst.usubstappt_times_conv",
     "usubstappt ?\<sigma> ?U (Times ?\<theta> ?\<eta>) ~= undeft ==>
      usubstappt ?\<sigma> ?U ?\<theta> ~= undeft &
      usubstappt ?\<sigma> ?U ?\<eta> ~= undeft",
     template_implication
      ([template_negation
         (
            template_equation
             (template_app
               (template_app
                 (template_app (template_hole 3, template_var 3),
                  template_var 2),
                template_app
                 (template_app (template_hole 2, template_var 1),
                  template_var 0)),
              template_hole 1)
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 0,
               template_app
                (template_hole 5,
                 template_app
                  (template_app
                    (template_hole 4,
                     template_app
                      (template_app
                        (template_app (template_hole 3, template_var 3),
                         template_var 2),
                       template_var 1)),
                   template_hole 1))),
             template_app
              (template_hole 5,
               template_app
                (template_app
                  (template_hole 4,
                   template_app
                    (template_app
                      (template_app (template_hole 3, template_var 3),
                       template_var 2),
                     template_var 0)),
                 template_hole 1)))
           ))),
    ("USubst.usubstappp_antimon",
     "[| ?V <= ?U; snd (usubstappp ?\<sigma> ?U ?\<alpha>) ~= undefg |]
      ==> snd (usubstappp ?\<sigma> ?U ?\<alpha>) =
          snd (usubstappp ?\<sigma> ?V ?\<alpha>)",
     template_implication
      ([template_inequation (less_equals, template_var 3, template_var 2),
        template_negation
         (
            template_equation
             (template_app
               (template_hole 2,
                template_app
                 (template_app
                   (template_app (template_hole 1, template_var 1),
                    template_var 2),
                  template_var 0)),
              template_hole 0)
            )],
       template_equation
        (template_app
          (template_hole 2,
           template_app
            (template_app
              (template_app (template_hole 1, template_var 1),
               template_var 2),
             template_var 0)),
         template_app
          (template_hole 2,
           template_app
            (template_app
              (template_app (template_hole 1, template_var 1),
               template_var 3),
             template_var 0))))),
    ("USubst.adjoint_games",
     "Games (USubst.adjoint ?\<sigma> ?I ?\<omega>) ?a =
      (case SGames ?\<sigma> ?a of None => Games ?I ?a
       | Some r => game_sem ?I r)",
     template_equation
      (template_app
        (template_app
          (template_hole 6,
           template_app
            (template_app
              (template_app (template_hole 5, template_var 3),
               template_var 2),
             template_var 1)),
         template_var 0),
       template_app
        (template_app
          (template_app
            (template_hole 4,
             template_app
              (template_app (template_hole 6, template_var 2),
               template_var 0)),
           t_empty),
         template_app
          (template_app
            (template_app (template_hole 2, t_empty), template_var 3),
           template_var 0)))),
    ("USubst.usubstappf_det",
     "[| usubstappf ?\<sigma> ?U ?\<phi> ~= undeff;
         usubstappf ?\<sigma> ?V ?\<phi> ~= undeff |]
      ==> usubstappf ?\<sigma> ?U ?\<phi> =
          usubstappf ?\<sigma> ?V ?\<phi>",
     template_implication
      ([template_negation
         (
            template_equation
             (template_app
               (template_app
                 (template_app (template_hole 1, template_var 3),
                  template_var 2),
                template_var 1),
              template_hole 0)
            ),
        template_negation
         (
            template_equation
             (template_app
               (template_app
                 (template_app (template_hole 1, template_var 3),
                  template_var 0),
                template_var 1),
              template_hole 0)
            )],
       template_equation
        (template_app
          (template_app
            (template_app (template_hole 1, template_var 3),
             template_var 2),
           template_var 1),
         template_app
          (template_app
            (template_app (template_hole 1, template_var 3),
             template_var 0),
           template_var 1)))),
    ("USubst.usubstappt_det",
     "[| usubstappt ?\<sigma> ?U ?\<theta> ~= undeft;
         usubstappt ?\<sigma> ?V ?\<theta> ~= undeft |]
      ==> usubstappt ?\<sigma> ?U ?\<theta> =
          usubstappt ?\<sigma> ?V ?\<theta>",
     template_implication
      ([template_negation
         (
            template_equation
             (template_app
               (template_app
                 (template_app (template_hole 1, template_var 3),
                  template_var 2),
                template_var 1),
              template_hole 0)
            ),
        template_negation
         (
            template_equation
             (template_app
               (template_app
                 (template_app (template_hole 1, template_var 3),
                  template_var 0),
                template_var 1),
              template_hole 0)
            )],
       template_equation
        (template_app
          (template_app
            (template_app (template_hole 1, template_var 3),
             template_var 2),
           template_var 1),
         template_app
          (template_app
            (template_app (template_hole 1, template_var 3),
             template_var 0),
           template_var 1)))),
    ("USubst.usubstr_union_undef",
     "(usubstr ?\<sigma> (?A @ ?B, ?C) ~= None) =
      (usubstr ?\<sigma> (?A, ?C) ~= None &
       usubstr ?\<sigma> (?B, ?C) ~= None)",
     template_bimplication
      (template_negation
        (
           template_equation
            (template_app
              (template_app (template_hole 4, template_var 3),
               template_app
                (template_app
                  (template_hole 3,
                   template_app
                    (template_app (template_hole 2, template_var 2),
                     template_var 1)),
                 template_var 0)),
             template_hole 1)
           ),
       template_predicate
        (
           template_app
            (template_app
              (template_hole 0,
               template_app
                (template_hole 6,
                 template_app
                  (template_app
                    (template_hole 5,
                     template_app
                      (template_app (template_hole 4, template_var 3),
                       template_app
                        (template_app (template_hole 3, template_var 2),
                         template_var 0))),
                   template_hole 1))),
             template_app
              (template_hole 6,
               template_app
                (template_app
                  (template_hole 5,
                   template_app
                    (template_app (template_hole 4, template_var 3),
                     template_app
                      (template_app (template_hole 3, template_var 1),
                       template_var 0))),
                 template_hole 1)))
           ))),
    ("USubst.usubstappp_game",
     "SGames ?\<sigma> ?a = Agame ?r ==>
      usubstappp ?\<sigma> ?U (Game ?a) = (?U Un BVG ?r, Agame ?r)",
     template_implication
      ([template_equation
         (template_app
           (template_app
             (template_app (template_hole 9, t_empty), template_var 3),
            template_var 2),
          template_app (template_hole 6, template_var 1))],
       template_equation
        (template_app
          (template_app
            (template_app (template_hole 4, template_var 3),
             template_var 0),
           template_app (template_hole 3, template_var 2)),
         template_app
          (template_app
            (template_hole 2,
             template_app
              (template_app (template_hole 1, template_var 0),
               template_app (template_hole 0, template_var 1))),
           template_app (template_hole 6, template_var 1))))),
    ("USubst.usubstappp_choice_conv",
     "snd (usubstappp ?\<sigma> ?U (?\<alpha> \<union>\<union> ?\<beta>)) ~=
      undefg ==>
      snd (usubstappp ?\<sigma> ?U ?\<alpha>) ~= undefg &
      snd (usubstappp ?\<sigma> ?U ?\<beta>) ~= undefg",
     template_implication
      ([template_negation
         (
            template_equation
             (template_app
               (template_hole 4,
                template_app
                 (template_app
                   (template_app (template_hole 3, template_var 3),
                    template_var 2),
                  template_app
                   (template_app (template_hole 2, template_var 1),
                    template_var 0))),
              template_hole 1)
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 0,
               template_app
                (template_hole 6,
                 template_app
                  (template_app
                    (template_hole 5,
                     template_app
                      (template_hole 4,
                       template_app
                        (template_app
                          (template_app (template_hole 3, template_var 3),
                           template_var 2),
                         template_var 1))),
                   template_hole 1))),
             template_app
              (template_hole 6,
               template_app
                (template_app
                  (template_hole 5,
                   template_app
                    (template_hole 4,
                     template_app
                      (template_app
                        (template_app (template_hole 3, template_var 3),
                         template_var 2),
                       template_var 0))),
                 template_hole 1)))
           ))),
    ("USubst.usubstr_union_undef2",
     "usubstr ?\<sigma> (?A @ ?B, ?C) ~= None ==>
      usubstr ?\<sigma> (?A, ?C) ~= None &
      usubstr ?\<sigma> (?B, ?C) ~= None",
     template_implication
      ([template_negation
         (
            template_equation
             (template_app
               (template_app (template_hole 4, template_var 3),
                template_app
                 (template_app
                   (template_hole 3,
                    template_app
                     (template_app (template_hole 2, template_var 2),
                      template_var 1)),
                  template_var 0)),
              template_hole 1)
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 0,
               template_app
                (template_hole 6,
                 template_app
                  (template_app
                    (template_hole 5,
                     template_app
                      (template_app (template_hole 4, template_var 3),
                       template_app
                        (template_app (template_hole 3, template_var 2),
                         template_var 0))),
                   template_hole 1))),
             template_app
              (template_hole 6,
               template_app
                (template_app
                  (template_hole 5,
                   template_app
                    (template_app (template_hole 4, template_var 3),
                     template_app
                      (template_app (template_hole 3, template_var 1),
                       template_var 0))),
                 template_hole 1)))
           ))),
    ("USubst.usubstr_cons_undef",
     "(usubstr ?\<sigma> (?A # ?B, ?C) ~= None) =
      (usubstr ?\<sigma> ([?A], ?C) ~= None &
       usubstr ?\<sigma> (?B, ?C) ~= None)",
     template_bimplication
      (template_negation
        (
           template_equation
            (template_app
              (template_app (template_hole 5, template_var 3),
               template_app
                (template_app
                  (template_hole 4,
                   template_app
                    (template_app (template_hole 3, template_var 2),
                     template_var 1)),
                 template_var 0)),
             template_hole 2)
           ),
       template_predicate
        (
           template_app
            (template_app
              (template_hole 1,
               template_app
                (template_hole 7,
                 template_app
                  (template_app
                    (template_hole 6,
                     template_app
                      (template_app (template_hole 5, template_var 3),
                       template_app
                        (template_app
                          (template_hole 4,
                           template_app
                            (template_app (template_hole 3, template_var 2),
                             template_hole 0)),
                         template_var 0))),
                   template_hole 2))),
             template_app
              (template_hole 7,
               template_app
                (template_app
                  (template_hole 6,
                   template_app
                    (template_app (template_hole 5, template_var 3),
                     template_app
                      (template_app (template_hole 4, template_var 1),
                       template_var 0))),
                 template_hole 2)))
           ))),
    ("USubst.usubstappp_choice",
     "usubstappp ?\<sigma> ?U (?\<alpha> \<union>\<union> ?\<beta>) =
      (fst (usubstappp ?\<sigma> ?U ?\<alpha>) Un
       fst (usubstappp ?\<sigma> ?U ?\<beta>),
       Choiceo (snd (usubstappp ?\<sigma> ?U ?\<alpha>))
        (snd (usubstappp ?\<sigma> ?U ?\<beta>)))",
     template_equation
      (template_app
        (template_app
          (template_app (template_hole 6, template_var 3), template_var 2),
         template_app
          (template_app (template_hole 5, template_var 1), template_var 0)),
       template_app
        (template_app
          (template_hole 4,
           template_app
            (template_app
              (template_hole 3,
               template_app
                (template_hole 2,
                 template_app
                  (template_app
                    (template_app (template_hole 6, template_var 3),
                     template_var 2),
                   template_var 1))),
             template_app
              (template_hole 2,
               template_app
                (template_app
                  (template_app (template_hole 6, template_var 3),
                   template_var 2),
                 template_var 0)))),
         template_app
          (template_app
            (template_hole 1,
             template_app
              (template_hole 0,
               template_app
                (template_app
                  (template_app (template_hole 6, template_var 3),
                   template_var 2),
                 template_var 1))),
           template_app
            (template_hole 0,
             template_app
              (template_app
                (template_app (template_hole 6, template_var 3),
                 template_var 2),
               template_var 0)))))),
    ("USubst.usubstappf_exists",
     "usubstappf ?\<sigma> ?U (Exists ?x ?\<phi>) ~= undeff ==>
      usubstappf ?\<sigma> ?U (Exists ?x ?\<phi>) =
      Afml (Exists ?x (the (usubstappf ?\<sigma> (?U Un {?x}) ?\<phi>)))",
     template_implication
      ([template_negation
         (
            template_equation
             (template_app
               (template_app
                 (template_app (template_hole 7, template_var 3),
                  template_var 2),
                template_app
                 (template_app (template_hole 6, template_var 1),
                  template_var 0)),
              template_hole 5)
            )],
       template_equation
        (template_app
          (template_app
            (template_app (template_hole 7, template_var 3),
             template_var 2),
           template_app
            (template_app (template_hole 6, template_var 1),
             template_var 0)),
         template_app
          (template_hole 4,
           template_app
            (template_app (template_hole 6, template_var 1),
             template_app
              (template_hole 3,
               template_app
                (template_app
                  (template_app (template_hole 7, template_var 3),
                   template_app
                    (template_app (template_hole 2, template_var 2),
                     template_app
                      (template_app (template_hole 1, template_var 1),
                       template_hole 0))),
                 template_var 0))))))),
    ("USubst.usubstappf_geqr",
     "usubstappf ?\<sigma> ?U (Geq ?\<theta> ?\<eta>) ~= undeff ==>
      usubstappf ?\<sigma> ?U (Geq ?\<theta> ?\<eta>) =
      Afml
       (Geq (the (usubstappt ?\<sigma> ?U ?\<theta>))
         (the (usubstappt ?\<sigma> ?U ?\<eta>)))",
     template_implication
      ([template_negation
         (
            template_equation
             (template_app
               (template_app
                 (template_app (template_hole 5, template_var 3),
                  template_var 2),
                template_app
                 (template_app (template_hole 4, template_var 1),
                  template_var 0)),
              template_hole 3)
            )],
       template_equation
        (template_app
          (template_app
            (template_app (template_hole 5, template_var 3),
             template_var 2),
           template_app
            (template_app (template_hole 4, template_var 1),
             template_var 0)),
         template_app
          (template_hole 2,
           template_app
            (template_app
              (template_hole 4,
               template_app
                (template_hole 1,
                 template_app
                  (template_app
                    (template_app (template_hole 0, template_var 3),
                     template_var 2),
                   template_var 1))),
             template_app
              (template_hole 1,
               template_app
                (template_app
                  (template_app (template_hole 0, template_var 3),
                   template_var 2),
                 template_var 0))))))),
    ("USubst.usappconst_simp",
     "[| SConst ?\<sigma> ?f = Aterm ?r; FVT ?r Int ?U = {} |]
      ==> usappconst ?\<sigma> ?U ?f = Aterm ?r",
     template_implication
      ([template_equation
         (template_app
           (template_app
             (template_app (template_hole 8, t_empty), template_var 3),
            template_var 2),
          template_app (template_hole 5, template_var 1)),
        template_equation
         (template_app
           (template_app
             (template_hole 3,
              template_app (template_hole 2, template_var 1)),
            template_var 0),
          template_hole 1)],
       template_equation
        (template_app
          (template_app
            (template_app (template_hole 0, template_var 3),
             template_var 0),
           template_var 2),
         template_app (template_hole 5, template_var 1)))),
    ("USubst.usubstr_cons_undef2",
     "usubstr ?\<sigma> (?A # ?B, ?C) ~= None ==>
      usubstr ?\<sigma> ([?A], ?C) ~= None &
      usubstr ?\<sigma> (?B, ?C) ~= None",
     template_implication
      ([template_negation
         (
            template_equation
             (template_app
               (template_app (template_hole 5, template_var 3),
                template_app
                 (template_app
                   (template_hole 4,
                    template_app
                     (template_app (template_hole 3, template_var 2),
                      template_var 1)),
                  template_var 0)),
              template_hole 2)
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 1,
               template_app
                (template_hole 7,
                 template_app
                  (template_app
                    (template_hole 6,
                     template_app
                      (template_app (template_hole 5, template_var 3),
                       template_app
                        (template_app
                          (template_hole 4,
                           template_app
                            (template_app (template_hole 3, template_var 2),
                             template_hole 0)),
                         template_var 0))),
                   template_hole 2))),
             template_app
              (template_hole 7,
               template_app
                (template_app
                  (template_hole 6,
                   template_app
                    (template_app (template_hole 5, template_var 3),
                     template_app
                      (template_app (template_hole 4, template_var 1),
                       template_var 0))),
                 template_hole 2)))
           ))),
    ("USubst.usubst_term",
     "[| Uvariation ?\<nu> ?\<omega> ?U;
         usubstappt ?\<sigma> ?U ?\<theta> ~= undeft |]
      ==> term_sem ?I (the (usubstappt ?\<sigma> ?U ?\<theta>)) ?\<nu> =
          term_sem (USubst.adjoint ?\<sigma> ?I ?\<omega>) ?\<theta>
           ?\<nu>",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app (template_hole 8, template_var 5),
                template_var 4),
              template_var 3)
            ),
        template_negation
         (
            template_equation
             (template_app
               (template_app
                 (template_app (template_hole 5, template_var 2),
                  template_var 3),
                template_var 1),
              template_hole 4)
            )],
       template_equation
        (template_app
          (template_app
            (template_app (template_hole 2, template_var 0),
             template_app
              (template_hole 1,
               template_app
                (template_app
                  (template_app (template_hole 5, template_var 2),
                   template_var 3),
                 template_var 1))),
           template_var 5),
         template_app
          (template_app
            (template_app
              (template_hole 2,
               template_app
                (template_app
                  (template_app (template_hole 0, template_var 2),
                   template_var 0),
                 template_var 4)),
             template_var 1),
           template_var 5)))),
    ("USubst.usubstappp_det",
     "[| snd (usubstappp ?\<sigma> ?U ?\<alpha>) ~= undefg;
         snd (usubstappp ?\<sigma> ?V ?\<alpha>) ~= undefg |]
      ==> snd (usubstappp ?\<sigma> ?U ?\<alpha>) =
          snd (usubstappp ?\<sigma> ?V ?\<alpha>)",
     template_implication
      ([template_negation
         (
            template_equation
             (template_app
               (template_hole 2,
                template_app
                 (template_app
                   (template_app (template_hole 1, template_var 3),
                    template_var 2),
                  template_var 1)),
              template_hole 0)
            ),
        template_negation
         (
            template_equation
             (template_app
               (template_hole 2,
                template_app
                 (template_app
                   (template_app (template_hole 1, template_var 3),
                    template_var 0),
                  template_var 1)),
              template_hole 0)
            )],
       template_equation
        (template_app
          (template_hole 2,
           template_app
            (template_app
              (template_app (template_hole 1, template_var 3),
               template_var 2),
             template_var 1)),
         template_app
          (template_hole 2,
           template_app
            (template_app
              (template_app (template_hole 1, template_var 3),
               template_var 0),
             template_var 1))))),
    ("USubst.usubstappt_const",
     "[| SConst ?\<sigma> ?f = Aterm ?r; FVT ?r Int ?U = {} |]
      ==> usubstappt ?\<sigma> ?U (Const ?f) = Aterm ?r",
     template_implication
      ([template_equation
         (template_app
           (template_app
             (template_app (template_hole 9, t_empty), template_var 3),
            template_var 2),
          template_app (template_hole 6, template_var 1)),
        template_equation
         (template_app
           (template_app
             (template_hole 4,
              template_app (template_hole 3, template_var 1)),
            template_var 0),
          template_hole 2)],
       template_equation
        (template_app
          (template_app
            (template_app (template_hole 1, template_var 3),
             template_var 0),
           template_app (template_hole 0, template_var 2)),
         template_app (template_hole 6, template_var 1)))),
    ("USubst.usubstappp_compose",
     "usubstappp ?\<sigma> ?U (?\<alpha> ;; ?\<beta>) =
      (fst (usubstappp ?\<sigma> (fst (usubstappp ?\<sigma> ?U ?\<alpha>))
             ?\<beta>),
       Composeo (snd (usubstappp ?\<sigma> ?U ?\<alpha>))
        (snd (usubstappp ?\<sigma> (fst (usubstappp ?\<sigma> ?U ?\<alpha>))
               ?\<beta>)))",
     template_equation
      (template_app
        (template_app
          (template_app (template_hole 5, template_var 3), template_var 2),
         template_app
          (template_app (template_hole 4, template_var 1), template_var 0)),
       template_app
        (template_app
          (template_hole 3,
           template_app
            (template_hole 2,
             template_app
              (template_app
                (template_app (template_hole 5, template_var 3),
                 template_app
                  (template_hole 2,
                   template_app
                    (template_app
                      (template_app (template_hole 5, template_var 3),
                       template_var 2),
                     template_var 1))),
               template_var 0))),
         template_app
          (template_app
            (template_hole 1,
             template_app
              (template_hole 0,
               template_app
                (template_app
                  (template_app (template_hole 5, template_var 3),
                   template_var 2),
                 template_var 1))),
           template_app
            (template_hole 0,
             template_app
              (template_app
                (template_app (template_hole 5, template_var 3),
                 template_app
                  (template_hole 2,
                   template_app
                    (template_app
                      (template_app (template_hole 5, template_var 3),
                       template_var 2),
                     template_var 1))),
               template_var 0)))))),
    ("USubst.usubstappp_loop_conv",
     "snd (usubstappp ?\<sigma> ?U ?\<alpha>**) ~= undefg ==>
      snd (usubstappp ?\<sigma> ?U ?\<alpha>) ~= undefg &
      snd (usubstappp ?\<sigma> (fst (usubstappp ?\<sigma> ?U ?\<alpha>))
            ?\<alpha>) ~=
      undefg",
     template_implication
      ([template_negation
         (
            template_equation
             (template_app
               (template_hole 5,
                template_app
                 (template_app
                   (template_app (template_hole 4, template_var 2),
                    template_var 1),
                  template_app (template_hole 3, template_var 0))),
              template_hole 2)
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 1,
               template_app
                (template_hole 7,
                 template_app
                  (template_app
                    (template_hole 6,
                     template_app
                      (template_hole 5,
                       template_app
                        (template_app
                          (template_app (template_hole 4, template_var 2),
                           template_var 1),
                         template_var 0))),
                   template_hole 2))),
             template_app
              (template_hole 7,
               template_app
                (template_app
                  (template_hole 6,
                   template_app
                    (template_hole 5,
                     template_app
                      (template_app
                        (template_app (template_hole 4, template_var 2),
                         template_app
                          (template_hole 0,
                           template_app
                            (template_app
                              (template_app
                                (template_hole 4, template_var 2),
                               template_var 1),
                             template_var 0))),
                       template_var 0))),
                 template_hole 2)))
           ))),
    ("USubst.usubstappf_pred2",
     "[| SPreds ?\<sigma> ?p = Afml ?r; FVF ?r Int ?U ~= {} |]
      ==> usubstappf ?\<sigma> ?U (Pred ?p ?\<theta>) = undeff",
     template_implication
      ([template_equation
         (template_app
           (template_app
             (template_app (template_hole 11, t_empty), template_var 4),
            template_var 3),
          template_app (template_hole 8, template_var 2)),
        template_negation
         (
            template_equation
             (template_app
               (template_app
                 (template_hole 5,
                  template_app (template_hole 4, template_var 2)),
                template_var 1),
              template_hole 3)
            )],
       template_equation
        (template_app
          (template_app
            (template_app (template_hole 2, template_var 4),
             template_var 1),
           template_app
            (template_app (template_hole 1, template_var 3),
             template_var 0)),
         template_hole 0))),
    ("USubst.usubstappt_func2",
     "[| SFuncs ?\<sigma> ?f = Aterm ?r; FVT ?r Int ?U ~= {} |]
      ==> usubstappt ?\<sigma> ?U (trm.Func ?f ?\<theta>) = undeft",
     template_implication
      ([template_equation
         (template_app
           (template_app
             (template_app (template_hole 11, t_empty), template_var 4),
            template_var 3),
          template_app (template_hole 8, template_var 2)),
        template_negation
         (
            template_equation
             (template_app
               (template_app
                 (template_hole 5,
                  template_app (template_hole 4, template_var 2)),
                template_var 1),
              template_hole 3)
            )],
       template_equation
        (template_app
          (template_app
            (template_app (template_hole 2, template_var 4),
             template_var 1),
           template_app
            (template_app (template_hole 1, template_var 3),
             template_var 0)),
         template_hole 0))),
    ("USubst.usubstr_conv",
     "usubstr ?\<sigma> ?R ~= None ==>
      usubstappf ?\<sigma> Denotational_Semantics.allvars (snd ?R) ~=
      undeff &
      (ALL \<phi>:set (fst ?R).
          usubstappf ?\<sigma> Denotational_Semantics.allvars \<phi> ~=
          undeff)",
     template_implication
      ([template_negation
         (
            template_equation
             (template_app
               (template_app (template_hole 11, template_var 1),
                template_var 0),
              template_hole 10)
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 9,
               template_app
                (template_hole 13,
                 template_app
                  (template_app
                    (template_hole 8,
                     template_app
                      (template_app
                        (template_app (template_hole 7, template_var 1),
                         template_app (template_hole 6, t_empty)),
                       template_app (template_hole 4, template_var 0))),
                   template_hole 3))),
             template_app
              (template_app
                (template_hole 2,
                 template_app
                  (template_hole 1,
                   template_app (template_hole 0, template_var 0))),
               t_empty))
           ))),
    ("USubst.usubst_fml",
     "[| Uvariation ?\<nu> ?\<omega> ?U;
         usubstappf ?\<sigma> ?U ?\<phi> ~= undeff |]
      ==> (?\<nu> : fml_sem ?I (the (usubstappf ?\<sigma> ?U ?\<phi>))) =
          (?\<nu>
           : fml_sem (USubst.adjoint ?\<sigma> ?I ?\<omega>) ?\<phi>)",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app (template_hole 9, template_var 5),
                template_var 4),
              template_var 3)
            ),
        template_negation
         (
            template_equation
             (template_app
               (template_app
                 (template_app (template_hole 6, template_var 2),
                  template_var 3),
                template_var 1),
              template_hole 5)
            )],
       template_equation
        (template_app
          (template_app (template_hole 3, template_var 5),
           template_app
            (template_app (template_hole 2, template_var 0),
             template_app
              (template_hole 1,
               template_app
                (template_app
                  (template_app (template_hole 6, template_var 2),
                   template_var 3),
                 template_var 1)))),
         template_app
          (template_app (template_hole 3, template_var 5),
           template_app
            (template_app
              (template_hole 2,
               template_app
                (template_app
                  (template_app (template_hole 0, template_var 2),
                   template_var 0),
                 template_var 4)),
             template_var 1))))),
    ("USubst.same_ODE_same_sol",
     "(!!\<nu>.
          Uvariation \<nu> (?F 0) {RVar ?x, DVar ?x} ==>
          term_sem ?I ?\<theta> \<nu> = term_sem ?J ?\<eta> \<nu>) ==>
      solves_ODE ?I ?F ?x ?\<theta> = solves_ODE ?J ?F ?x ?\<eta>",
     template_implication
      ([template_predicate (template_app (template_hole 11, t_empty))],
       template_equation
        (template_app
          (template_app
            (template_app
              (template_app (template_hole 0, template_var 3),
               template_var 5),
             template_var 4),
           template_var 2),
         template_app
          (template_app
            (template_app
              (template_app (template_hole 0, template_var 1),
               template_var 5),
             template_var 4),
           template_var 0)))),
    ("USubst.usubst_game",
     "[| Uvariation ?\<nu> ?\<omega> ?U;
         snd (usubstappp ?\<sigma> ?U ?\<alpha>) ~= undefg |]
      ==> (?\<nu>
           : game_sem ?I (the (snd (usubstappp ?\<sigma> ?U ?\<alpha>)))
              ?X) =
          (?\<nu>
           : game_sem (USubst.adjoint ?\<sigma> ?I ?\<omega>) ?\<alpha>
              ?X)",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app (template_hole 10, template_var 6),
                template_var 5),
              template_var 4)
            ),
        template_negation
         (
            template_equation
             (template_app
               (template_hole 7,
                template_app
                 (template_app
                   (template_app (template_hole 6, template_var 3),
                    template_var 4),
                  template_var 2)),
              template_hole 5)
            )],
       template_equation
        (template_app
          (template_app (template_hole 3, template_var 6),
           template_app
            (template_app
              (template_app (template_hole 2, template_var 1),
               template_app
                (template_hole 1,
                 template_app
                  (template_hole 7,
                   template_app
                    (template_app
                      (template_app (template_hole 6, template_var 3),
                       template_var 4),
                     template_var 2)))),
             template_var 0)),
         template_app
          (template_app (template_hole 3, template_var 6),
           template_app
            (template_app
              (template_app
                (template_hole 2,
                 template_app
                  (template_app
                    (template_app (template_hole 0, template_var 3),
                     template_var 1),
                   template_var 5)),
               template_var 2),
             template_var 0))))),
    ("USubst.usubstappf_geq",
     "[| usubstappt ?\<sigma> ?U ?\<theta> ~= undeft;
         usubstappt ?\<sigma> ?U ?\<eta> ~= undeft |]
      ==> usubstappf ?\<sigma> ?U (Geq ?\<theta> ?\<eta>) =
          Afml
           (Geq (the (usubstappt ?\<sigma> ?U ?\<theta>))
             (the (usubstappt ?\<sigma> ?U ?\<eta>)))",
     template_implication
      ([template_negation
         (
            template_equation
             (template_app
               (template_app
                 (template_app (template_hole 6, template_var 3),
                  template_var 2),
                template_var 1),
              template_hole 5)
            ),
        template_negation
         (
            template_equation
             (template_app
               (template_app
                 (template_app (template_hole 6, template_var 3),
                  template_var 2),
                template_var 0),
              template_hole 5)
            )],
       template_equation
        (template_app
          (template_app
            (template_app (template_hole 3, template_var 3),
             template_var 2),
           template_app
            (template_app (template_hole 2, template_var 1),
             template_var 0)),
         template_app
          (template_hole 1,
           template_app
            (template_app
              (template_hole 2,
               template_app
                (template_hole 0,
                 template_app
                  (template_app
                    (template_app (template_hole 6, template_var 3),
                     template_var 2),
                   template_var 1))),
             template_app
              (template_hole 0,
               template_app
                (template_app
                  (template_app (template_hole 6, template_var 3),
                   template_var 2),
                 template_var 0))))))),
    ("USubst.adjoint_funcs",
     "Funcs (USubst.adjoint ?\<sigma> ?I ?\<omega>) ?f =
      (case SFuncs ?\<sigma> ?f of None => Funcs ?I ?f
       | Some r => %d. term_sem (repc ?I dotid d) r ?\<omega>)",
     template_equation
      (template_app
        (template_app
          (template_hole 10,
           template_app
            (template_app
              (template_app (template_hole 9, template_var 3),
               template_var 2),
             template_var 1)),
         template_var 0),
       template_app
        (template_app
          (template_app
            (template_hole 8,
             template_app
              (template_app (template_hole 10, template_var 2),
               template_var 0)),
           t_empty),
         template_app
          (template_app
            (template_app (template_hole 2, t_empty), template_var 3),
           template_var 0)))),
    ("USubst.adjoint_funcs_match",
     "SFuncs ?\<sigma> ?f = Aterm ?r ==>
      Funcs (USubst.adjoint ?\<sigma> ?I ?\<omega>) ?f =
      (%d. term_sem (repc ?I dotid d) ?r ?\<omega>)",
     template_implication
      ([template_equation
         (template_app
           (template_app
             (template_app (template_hole 11, t_empty), template_var 4),
            template_var 3),
          template_app (template_hole 8, template_var 2))],
       template_equation
        (template_app
          (template_app
            (template_hole 6,
             template_app
              (template_app
                (template_app (template_hole 5, template_var 4),
                 template_var 1),
               template_var 0)),
           template_var 3),
         t_empty))),
    ("USubst.usubstr_nth",
     "[| usubstr ?\<sigma> ?R ~= None; 0 <= ?k; ?k < length (fst ?R) |]
      ==> fst (the (usubstr ?\<sigma> ?R)) ! ?k =
          the (usubstappf ?\<sigma> Denotational_Semantics.allvars
                (fst ?R ! ?k))",
     template_implication
      ([template_negation
         (
            template_equation
             (template_app
               (template_app (template_hole 13, template_var 2),
                template_var 1),
              template_hole 12)
            ),
        template_inequation (less_equals, template_hole 10, template_var 0),
        template_inequation
         (less_than, template_var 0,
          template_app
           (template_hole 8,
            template_app (template_hole 7, template_var 1)))],
       template_equation
        (template_app
          (template_app
            (template_hole 5,
             template_app
              (template_hole 7,
               template_app
                (template_hole 4,
                 template_app
                  (template_app (template_hole 13, template_var 2),
                   template_var 1)))),
           template_var 0),
         template_app
          (template_hole 3,
           template_app
            (template_app
              (template_app (template_hole 2, template_var 2),
               template_app (template_hole 1, t_empty)),
             template_app
              (template_app
                (template_hole 5,
                 template_app (template_hole 7, template_var 1)),
               template_var 0)))))),
    ("USubst.adjoint_preds",
     "Preds (USubst.adjoint ?\<sigma> ?I ?\<omega>) ?p =
      (case SPreds ?\<sigma> ?p of None => Preds ?I ?p
       | Some r => %d. ?\<omega> : fml_sem (repc ?I dotid d) r)",
     template_equation
      (template_app
        (template_app
          (template_hole 11,
           template_app
            (template_app
              (template_app (template_hole 10, template_var 3),
               template_var 2),
             template_var 1)),
         template_var 0),
       template_app
        (template_app
          (template_app
            (template_hole 9,
             template_app
              (template_app (template_hole 11, template_var 2),
               template_var 0)),
           t_empty),
         template_app
          (template_app
            (template_app (template_hole 2, t_empty), template_var 3),
           template_var 0)))),
    ("USubst.adjoint_preds_match",
     "SPreds ?\<sigma> ?p = Afml ?r ==>
      Preds (USubst.adjoint ?\<sigma> ?I ?\<omega>) ?p =
      (%d. ?\<omega> : fml_sem (repc ?I dotid d) ?r)",
     template_implication
      ([template_equation
         (template_app
           (template_app
             (template_app (template_hole 12, t_empty), template_var 4),
            template_var 3),
          template_app (template_hole 9, template_var 2))],
       template_equation
        (template_app
          (template_app
            (template_hole 7,
             template_app
              (template_app
                (template_app (template_hole 6, template_var 4),
                 template_var 1),
               template_var 0)),
           template_var 3),
         t_empty))),
    ("USubst.usubst_ode",
     "usubstappt ?\<sigma> {RVar ?x, DVar ?x} ?\<theta> ~= undeft ==>
      solves_ODE ?I ?F ?x
       (the (usubstappt ?\<sigma> {RVar ?x, DVar ?x} ?\<theta>)) =
      solves_ODE (USubst.adjoint ?\<sigma> ?I (?F 0)) ?F ?x ?\<theta>",
     template_implication
      ([template_negation
         (
            template_equation
             (template_app
               (template_app
                 (template_app (template_hole 10, template_var 4),
                  template_app
                   (template_app
                     (template_hole 9,
                      template_app (template_hole 8, template_var 3)),
                    template_app
                     (template_app
                       (template_hole 9,
                        template_app (template_hole 7, template_var 3)),
                      template_hole 6))),
                template_var 2),
              template_hole 5)
            )],
       template_equation
        (template_app
          (template_app
            (template_app
              (template_app (template_hole 3, template_var 1),
               template_var 0),
             template_var 3),
           template_app
            (template_hole 2,
             template_app
              (template_app
                (template_app (template_hole 10, template_var 4),
                 template_app
                  (template_app
                    (template_hole 9,
                     template_app (template_hole 8, template_var 3)),
                   template_app
                    (template_app
                      (template_hole 9,
                       template_app (template_hole 7, template_var 3)),
                     template_hole 6))),
               template_var 2))),
         template_app
          (template_app
            (template_app
              (template_app
                (template_hole 3,
                 template_app
                  (template_app
                    (template_app (template_hole 1, template_var 4),
                     template_var 1),
                   template_app (template_var 0, template_hole 0))),
               template_var 0),
             template_var 3),
           template_var 2)))),
    ("USubst.usappconst_conv",
     "usappconst ?\<sigma> ?U ?f ~= undeft ==>
      SConst ?\<sigma> ?f = undeft |
      (EX r. SConst ?\<sigma> ?f = Aterm r & FVT r Int ?U = {})",
     template_implication
      ([template_negation
         (
            template_equation
             (template_app
               (template_app
                 (template_app (template_hole 12, template_var 2),
                  template_var 1),
                template_var 0),
              template_hole 11)
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 10,
               template_app
                (template_app
                  (template_hole 13,
                   template_app
                    (template_app
                      (template_app (template_hole 9, t_empty),
                       template_var 2),
                     template_var 0)),
                 template_hole 11)),
             template_app (template_hole 6, t_empty))
           ))),
    ("USubst.usubstr_union",
     "usubstr ?\<sigma> (?A @ ?B, ?C) ~= None ==>
      the (usubstr ?\<sigma> (?A @ ?B, ?C)) =
      (fst (the (usubstr ?\<sigma> (?A, ?C))) @
       fst (the (usubstr ?\<sigma> (?B, ?C))),
       snd (the (usubstr ?\<sigma> (?A, ?C))))",
     template_implication
      ([template_negation
         (
            template_equation
             (template_app
               (template_app (template_hole 7, template_var 3),
                template_app
                 (template_app
                   (template_hole 6,
                    template_app
                     (template_app (template_hole 5, template_var 2),
                      template_var 1)),
                  template_var 0)),
              template_hole 4)
            )],
       template_equation
        (template_app
          (template_hole 2,
           template_app
            (template_app (template_hole 7, template_var 3),
             template_app
              (template_app
                (template_hole 6,
                 template_app
                  (template_app (template_hole 5, template_var 2),
                   template_var 1)),
               template_var 0))),
         template_app
          (template_app
            (template_hole 6,
             template_app
              (template_app
                (template_hole 5,
                 template_app
                  (template_hole 1,
                   template_app
                    (template_hole 2,
                     template_app
                      (template_app (template_hole 7, template_var 3),
                       template_app
                        (template_app (template_hole 6, template_var 2),
                         template_var 0))))),
               template_app
                (template_hole 1,
                 template_app
                  (template_hole 2,
                   template_app
                    (template_app (template_hole 7, template_var 3),
                     template_app
                      (template_app (template_hole 6, template_var 1),
                       template_var 0)))))),
           template_app
            (template_hole 0,
             template_app
              (template_hole 2,
               template_app
                (template_app (template_hole 7, template_var 3),
                 template_app
                  (template_app (template_hole 6, template_var 2),
                   template_var 0)))))))),
    ("USubst.usubstappf_pred",
     "[| SPreds ?\<sigma> ?p = Afml ?r; FVF ?r Int ?U = {};
         usubstappt ?\<sigma> ?U ?\<theta> = Aterm ?\<sigma>\<theta> |]
      ==> usubstappf ?\<sigma> ?U (Pred ?p ?\<theta>) =
          usubsta (dotsubstt ?\<sigma>\<theta>) ?r",
     template_implication
      ([template_equation
         (template_app
           (template_app
             (template_app (template_hole 13, t_empty), template_var 5),
            template_var 4),
          template_app (template_hole 10, template_var 3)),
        template_equation
         (template_app
           (template_app
             (template_hole 8,
              template_app (template_hole 7, template_var 3)),
            template_var 2),
          template_hole 6),
        template_equation
         (template_app
           (template_app
             (template_app (template_hole 4, template_var 5),
              template_var 2),
            template_var 1),
          template_app (template_hole 3, template_var 0))],
       template_equation
        (template_app
          (template_app
            (template_app (template_hole 2, template_var 5),
             template_var 2),
           template_app
            (template_app (template_hole 1, template_var 4),
             template_var 1)),
         template_app
          (template_app
            (template_app
              (template_hole 2,
               template_app (template_hole 0, template_var 0)),
             template_hole 6),
           template_var 3)))),
    ("USubst.usubstappt_func",
     "[| SFuncs ?\<sigma> ?f = Aterm ?r; FVT ?r Int ?U = {};
         usubstappt ?\<sigma> ?U ?\<theta> = Aterm ?\<sigma>\<theta> |]
      ==> usubstappt ?\<sigma> ?U (trm.Func ?f ?\<theta>) =
          usubstappt (dotsubstt ?\<sigma>\<theta>) {} ?r",
     template_implication
      ([template_equation
         (template_app
           (template_app
             (template_app (template_hole 10, t_empty), template_var 5),
            template_var 4),
          template_app (template_hole 7, template_var 3)),
        template_equation
         (template_app
           (template_app
             (template_hole 5,
              template_app (template_hole 4, template_var 3)),
            template_var 2),
          template_hole 3),
        template_equation
         (template_app
           (template_app
             (template_app (template_hole 2, template_var 5),
              template_var 2),
            template_var 1),
          template_app (template_hole 7, template_var 0))],
       template_equation
        (template_app
          (template_app
            (template_app (template_hole 2, template_var 5),
             template_var 2),
           template_app
            (template_app (template_hole 1, template_var 4),
             template_var 1)),
         template_app
          (template_app
            (template_app
              (template_hole 2,
               template_app (template_hole 0, template_var 0)),
             template_hole 3),
           template_var 3)))),
    ("USubst.usubstappt_const_conv",
     "usubstappt ?\<sigma> ?U (Const ?f) ~= undeft ==>
      SConst ?\<sigma> ?f = undeft |
      (EX r. SConst ?\<sigma> ?f = Aterm r & FVT r Int ?U = {})",
     template_implication
      ([template_negation
         (
            template_equation
             (template_app
               (template_app
                 (template_app (template_hole 13, template_var 2),
                  template_var 1),
                template_app (template_hole 12, template_var 0)),
              template_hole 11)
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 10,
               template_app
                (template_app
                  (template_hole 14,
                   template_app
                    (template_app
                      (template_app (template_hole 9, t_empty),
                       template_var 2),
                     template_var 0)),
                 template_hole 11)),
             template_app (template_hole 6, t_empty))
           ))),
    ("USubst.usubstr_cons",
     "usubstr ?\<sigma> (?A # ?B, ?C) ~= None ==>
      the (usubstr ?\<sigma> (?A # ?B, ?C)) =
      (the (usubstappf ?\<sigma> Denotational_Semantics.allvars ?A) #
       fst (the (usubstr ?\<sigma> (?B, ?C))),
       snd (the (usubstr ?\<sigma> ([?A], ?C))))",
     template_implication
      ([template_negation
         (
            template_equation
             (template_app
               (template_app (template_hole 12, template_var 3),
                template_app
                 (template_app
                   (template_hole 11,
                    template_app
                     (template_app (template_hole 10, template_var 2),
                      template_var 1)),
                  template_var 0)),
              template_hole 9)
            )],
       template_equation
        (template_app
          (template_hole 7,
           template_app
            (template_app (template_hole 12, template_var 3),
             template_app
              (template_app
                (template_hole 11,
                 template_app
                  (template_app (template_hole 10, template_var 2),
                   template_var 1)),
               template_var 0))),
         template_app
          (template_app
            (template_hole 11,
             template_app
              (template_app
                (template_hole 10,
                 template_app
                  (template_hole 6,
                   template_app
                    (template_app
                      (template_app (template_hole 5, template_var 3),
                       template_app (template_hole 4, t_empty)),
                     template_var 2))),
               template_app
                (template_hole 2,
                 template_app
                  (template_hole 7,
                   template_app
                    (template_app (template_hole 12, template_var 3),
                     template_app
                      (template_app (template_hole 11, template_var 1),
                       template_var 0)))))),
           template_app
            (template_hole 1,
             template_app
              (template_hole 7,
               template_app
                (template_app (template_hole 12, template_var 3),
                 template_app
                  (template_app
                    (template_hole 11,
                     template_app
                      (template_app (template_hole 10, template_var 2),
                       template_hole 0)),
                   template_var 0)))))))),
    ("USubst.usubstappf_pred_conv",
     "usubstappf ?\<sigma> ?U (Pred ?p ?\<theta>) ~= undeff ==>
      usubstappt ?\<sigma> ?U ?\<theta> ~= undeft &
      (SPreds ?\<sigma> ?p = undeff |
       (EX r. SPreds ?\<sigma> ?p = Afml r & FVF r Int ?U = {}))",
     template_implication
      ([template_negation
         (
            template_equation
             (template_app
               (template_app
                 (template_app (template_hole 16, template_var 3),
                  template_var 2),
                template_app
                 (template_app (template_hole 15, template_var 1),
                  template_var 0)),
              template_hole 14)
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 13,
               template_app
                (template_hole 18,
                 template_app
                  (template_app
                    (template_hole 12,
                     template_app
                      (template_app
                        (template_app (template_hole 11, template_var 3),
                         template_var 2),
                       template_var 0)),
                   template_hole 10))),
             template_app
              (template_app
                (template_hole 9,
                 template_app
                  (template_app
                    (template_hole 17,
                     template_app
                      (template_app
                        (template_app (template_hole 8, t_empty),
                         template_var 3),
                       template_var 1)),
                   template_hole 14)),
               template_app (template_hole 5, t_empty)))
           ))),
    ("USubst.usubstappt_func_conv",
     "usubstappt ?\<sigma> ?U (trm.Func ?f ?\<theta>) ~= undeft ==>
      usubstappt ?\<sigma> ?U ?\<theta> ~= undeft &
      (SFuncs ?\<sigma> ?f = undeft |
       (EX r. SFuncs ?\<sigma> ?f = Aterm r & FVT r Int ?U = {}))",
     template_implication
      ([template_negation
         (
            template_equation
             (template_app
               (template_app
                 (template_app (template_hole 13, template_var 3),
                  template_var 2),
                template_app
                 (template_app (template_hole 12, template_var 1),
                  template_var 0)),
              template_hole 11)
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 10,
               template_app
                (template_hole 15,
                 template_app
                  (template_app
                    (template_hole 14,
                     template_app
                      (template_app
                        (template_app (template_hole 13, template_var 3),
                         template_var 2),
                       template_var 0)),
                   template_hole 11))),
             template_app
              (template_app
                (template_hole 9,
                 template_app
                  (template_app
                    (template_hole 14,
                     template_app
                      (template_app
                        (template_app (template_hole 8, t_empty),
                         template_var 3),
                       template_var 1)),
                   template_hole 11)),
               template_app (template_hole 5, t_empty)))
           ))),
    ("USubst.usubst_ode_ext",
     "[| Uvariation (?F 0) ?\<omega> (?U Un {RVar ?x, DVar ?x});
         usubstappt ?\<sigma> (?U Un {RVar ?x, DVar ?x}) ?\<theta> ~=
         undeft |]
      ==> solves_ODE ?I ?F ?x
           (the (usubstappt ?\<sigma> (?U Un {RVar ?x, DVar ?x})
                  ?\<theta>)) =
          solves_ODE (USubst.adjoint ?\<sigma> ?I ?\<omega>) ?F ?x
           ?\<theta>",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_hole 14,
                  template_app (template_var 6, template_hole 13)),
                template_var 5),
              template_app
               (template_app (template_hole 12, template_var 4),
                template_app
                 (template_app
                   (template_hole 11,
                    template_app (template_hole 10, template_var 3)),
                  template_app
                   (template_app
                     (template_hole 11,
                      template_app (template_hole 9, template_var 3)),
                    template_hole 8))))
            ),
        template_negation
         (
            template_equation
             (template_app
               (template_app
                 (template_app (template_hole 5, template_var 2),
                  template_app
                   (template_app (template_hole 12, template_var 4),
                    template_app
                     (template_app
                       (template_hole 11,
                        template_app (template_hole 10, template_var 3)),
                      template_app
                       (template_app
                         (template_hole 11,
                          template_app (template_hole 9, template_var 3)),
                        template_hole 8)))),
                template_var 1),
              template_hole 4)
            )],
       template_equation
        (template_app
          (template_app
            (template_app
              (template_app (template_hole 2, template_var 0),
               template_var 6),
             template_var 3),
           template_app
            (template_hole 1,
             template_app
              (template_app
                (template_app (template_hole 5, template_var 2),
                 template_app
                  (template_app (template_hole 12, template_var 4),
                   template_app
                    (template_app
                      (template_hole 11,
                       template_app (template_hole 10, template_var 3)),
                     template_app
                      (template_app
                        (template_hole 11,
                         template_app (template_hole 9, template_var 3)),
                       template_hole 8)))),
               template_var 1))),
         template_app
          (template_app
            (template_app
              (template_app
                (template_hole 2,
                 template_app
                  (template_app
                    (template_app (template_hole 0, template_var 2),
                     template_var 0),
                   template_var 5)),
               template_var 6),
             template_var 3),
           template_var 1)))),
    ("USubst.usubst_ode_ext2",
     "[| usubstappt ?\<sigma> (?U Un {RVar ?x, DVar ?x}) ?\<theta> ~=
         undeft;
         Uvariation (?F 0) ?\<omega> (?U Un {RVar ?x, DVar ?x}) |]
      ==> solves_ODE ?I ?F ?x
           (the (usubstappt ?\<sigma> (?U Un {RVar ?x, DVar ?x})
                  ?\<theta>)) =
          solves_ODE (USubst.adjoint ?\<sigma> ?I ?\<omega>) ?F ?x
           ?\<theta>",
     template_implication
      ([template_negation
         (
            template_equation
             (template_app
               (template_app
                 (template_app (template_hole 12, template_var 6),
                  template_app
                   (template_app (template_hole 11, template_var 5),
                    template_app
                     (template_app
                       (template_hole 10,
                        template_app (template_hole 9, template_var 4)),
                      template_app
                       (template_app
                         (template_hole 10,
                          template_app (template_hole 8, template_var 4)),
                        template_hole 7)))),
                template_var 3),
              template_hole 6)
            ),
        template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_hole 5,
                  template_app (template_var 2, template_hole 4)),
                template_var 1),
              template_app
               (template_app (template_hole 11, template_var 5),
                template_app
                 (template_app
                   (template_hole 10,
                    template_app (template_hole 9, template_var 4)),
                  template_app
                   (template_app
                     (template_hole 10,
                      template_app (template_hole 8, template_var 4)),
                    template_hole 7))))
            )],
       template_equation
        (template_app
          (template_app
            (template_app
              (template_app (template_hole 2, template_var 0),
               template_var 2),
             template_var 4),
           template_app
            (template_hole 1,
             template_app
              (template_app
                (template_app (template_hole 12, template_var 6),
                 template_app
                  (template_app (template_hole 11, template_var 5),
                   template_app
                    (template_app
                      (template_hole 10,
                       template_app (template_hole 9, template_var 4)),
                     template_app
                      (template_app
                        (template_hole 10,
                         template_app (template_hole 8, template_var 4)),
                       template_hole 7)))),
               template_var 3))),
         template_app
          (template_app
            (template_app
              (template_app
                (template_hole 2,
                 template_app
                  (template_app
                    (template_app (template_hole 0, template_var 6),
                     template_var 0),
                   template_var 1)),
               template_var 2),
             template_var 4),
           template_var 3)))),
    ("USubst.usubst_game_loop",
     "[| Uvariation ?\<nu> ?\<omega> ?U;
         !!\<nu> \<omega> X.
            [| Uvariation \<nu> \<omega>
                (fst (usubstappp ?\<sigma> ?U ?\<alpha>));
               snd (usubstappp ?\<sigma>
                     (fst (usubstappp ?\<sigma> ?U ?\<alpha>)) ?\<alpha>) ~=
               undefg |]
            ==> (\<nu>
                 : game_sem ?I
                    (the (snd (usubstappp ?\<sigma>
                                (fst (usubstappp ?\<sigma> ?U ?\<alpha>))
                                ?\<alpha>)))
                    X) =
                (\<nu>
                 : game_sem (USubst.adjoint ?\<sigma> ?I \<omega>) ?\<alpha>
                    X);
         snd (usubstappp ?\<sigma> ?U ?\<alpha>**) ~= undefg |]
      ==> (?\<nu>
           : game_sem ?I (the (snd (usubstappp ?\<sigma> ?U ?\<alpha>**)))
              ?X) =
          (?\<nu>
           : game_sem (USubst.adjoint ?\<sigma> ?I ?\<omega>) ?\<alpha>**
              ?X)",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app (template_hole 14, template_var 6),
                template_var 5),
              template_var 4)
            ),
        template_predicate (template_app (template_hole 13, t_empty)),
        template_negation
         (
            template_equation
             (template_app
               (template_hole 7,
                template_app
                 (template_app
                   (template_app (template_hole 10, template_var 3),
                    template_var 4),
                  template_app (template_hole 0, template_var 2))),
              template_hole 6)
            )],
       template_equation
        (template_app
          (template_app (template_hole 4, template_var 6),
           template_app
            (template_app
              (template_app (template_hole 3, template_var 1),
               template_app
                (template_hole 2,
                 template_app
                  (template_hole 7,
                   template_app
                    (template_app
                      (template_app (template_hole 10, template_var 3),
                       template_var 4),
                     template_app (template_hole 0, template_var 2))))),
             template_var 0)),
         template_app
          (template_app (template_hole 4, template_var 6),
           template_app
            (template_app
              (template_app
                (template_hole 3,
                 template_app
                  (template_app
                    (template_app (template_hole 1, template_var 3),
                     template_var 1),
                   template_var 5)),
               template_app (template_hole 0, template_var 2)),
             template_var 0))))),
    ("USubst.usubstappt_induct",
     "[| !!\<sigma> U x. ?P \<sigma> U (Var x);
         !!\<sigma> U r. ?P \<sigma> U (Number r);
         !!\<sigma> U f. ?P \<sigma> U (Const f);
         !!\<sigma> U f \<theta>.
            [| ?P \<sigma> U \<theta>;
               !!x2 x2a.
                  [| usubstappt \<sigma> U \<theta> = Aterm x2;
                     SFuncs \<sigma> f = Aterm x2a; FVT x2a Int U = {} |]
                  ==> ?P (dotsubstt x2) {} x2a |]
            ==> ?P \<sigma> U (trm.Func f \<theta>);
         !!\<sigma> U \<theta> \<eta>.
            [| ?P \<sigma> U \<theta>; ?P \<sigma> U \<eta> |]
            ==> ?P \<sigma> U (Plus \<theta> \<eta>);
         !!\<sigma> U \<theta> \<eta>.
            [| ?P \<sigma> U \<theta>; ?P \<sigma> U \<eta> |]
            ==> ?P \<sigma> U (Times \<theta> \<eta>);
         !!\<sigma> U \<theta>.
            ?P \<sigma> Denotational_Semantics.allvars \<theta> ==>
            ?P \<sigma> U (Differential \<theta>) |]
      ==> ?P ?a0.0 ?a1.0 ?a2.0",
     template_implication
      ([template_predicate (template_app (template_hole 26, t_empty)),
        template_predicate (template_app (template_hole 26, t_empty)),
        template_predicate (template_app (template_hole 26, t_empty)),
        template_predicate (template_app (template_hole 26, t_empty)),
        template_predicate (template_app (template_hole 26, t_empty)),
        template_predicate (template_app (template_hole 26, t_empty)),
        template_predicate (template_app (template_hole 26, t_empty))],
       template_predicate
        (
           template_app
            (template_app
              (template_app (template_var 3, template_var 2),
               template_var 1),
             template_var 0)
           ))),
    ("USubst.usubstappfp_induct",
     "[| !!\<sigma> U p \<theta>.
            (!!x2 x2a.
                [| usubstappt \<sigma> U \<theta> = Aterm x2;
                   SPreds \<sigma> p = Afml x2a; FVF x2a Int U = {} |]
                ==> ?P (dotsubstt x2) {} x2a) ==>
            ?P \<sigma> U (Pred p \<theta>);
         !!\<sigma> U \<theta> \<eta>. ?P \<sigma> U (Geq \<theta> \<eta>);
         !!\<sigma> U \<phi>.
            ?P \<sigma> U \<phi> ==> ?P \<sigma> U (! \<phi>);
         !!\<sigma> U \<phi> \<psi>.
            [| ?P \<sigma> U \<phi>; ?P \<sigma> U \<psi> |]
            ==> ?P \<sigma> U (\<phi> && \<psi>);
         !!\<sigma> U x \<phi>.
            ?P \<sigma> (U Un {x}) \<phi> ==>
            ?P \<sigma> U (Exists x \<phi>);
         !!\<sigma> U \<alpha> \<phi>.
            [| ?Q \<sigma> U \<alpha>;
               !!x. x = usubstappp \<sigma> U \<alpha> ==>
                    ?P \<sigma> (fst x) \<phi> |]
            ==> ?P \<sigma> U (\<langle> \<alpha> \<rangle> \<phi>);
         !!\<sigma> U a. ?Q \<sigma> U (Game a);
         !!\<sigma> U x \<theta>. ?Q \<sigma> U (x := \<theta>);
         !!\<sigma> U \<phi>.
            ?P \<sigma> U \<phi> ==> ?Q \<sigma> U (? \<phi>);
         !!\<sigma> U \<alpha> \<beta>.
            [| ?Q \<sigma> U \<alpha>;
               !!x. x = usubstappp \<sigma> U \<alpha> ==>
                    ?Q \<sigma> U \<beta> |]
            ==> ?Q \<sigma> U (\<alpha> \<union>\<union> \<beta>);
         !!\<sigma> U \<alpha> \<beta>.
            [| ?Q \<sigma> U \<alpha>;
               !!x. x = usubstappp \<sigma> U \<alpha> ==>
                    ?Q \<sigma> (fst x) \<beta> |]
            ==> ?Q \<sigma> U (\<alpha> ;; \<beta>);
         !!\<sigma> U \<alpha>.
            [| ?Q \<sigma> U \<alpha>;
               !!x. x = fst (usubstappp \<sigma> U \<alpha>) ==>
                    ?Q \<sigma> x \<alpha> |]
            ==> ?Q \<sigma> U \<alpha>**;
         !!\<sigma> U \<alpha>.
            ?Q \<sigma> U \<alpha> ==> ?Q \<sigma> U \<alpha>^d;
         !!\<sigma> U x \<theta>. ?Q \<sigma> U (ODE x \<theta>) |]
      ==> ?P ?a0.0 ?a1.0 ?a2.0",
     template_implication
      ([template_predicate (template_app (template_hole 40, t_empty)),
        template_predicate (template_app (template_hole 40, t_empty)),
        template_predicate (template_app (template_hole 40, t_empty)),
        template_predicate (template_app (template_hole 40, t_empty)),
        template_predicate (template_app (template_hole 40, t_empty)),
        template_predicate (template_app (template_hole 40, t_empty)),
        template_predicate (template_app (template_hole 40, t_empty)),
        template_predicate (template_app (template_hole 40, t_empty)),
        template_predicate (template_app (template_hole 40, t_empty)),
        template_predicate (template_app (template_hole 40, t_empty)),
        template_predicate (template_app (template_hole 40, t_empty)),
        template_predicate (template_app (template_hole 40, t_empty)),
        template_predicate (template_app (template_hole 40, t_empty)),
        template_predicate (template_app (template_hole 40, t_empty))],
       template_predicate
        (
           template_app
            (template_app
              (template_app (template_var 4, template_var 2),
               template_var 1),
             template_var 0)
           ))),
    ("USubst.usubstappfp_induct",
     "[| !!\<sigma> U p \<theta>.
            (!!x2 x2a.
                [| usubstappt \<sigma> U \<theta> = Aterm x2;
                   SPreds \<sigma> p = Afml x2a; FVF x2a Int U = {} |]
                ==> ?P (dotsubstt x2) {} x2a) ==>
            ?P \<sigma> U (Pred p \<theta>);
         !!\<sigma> U \<theta> \<eta>. ?P \<sigma> U (Geq \<theta> \<eta>);
         !!\<sigma> U \<phi>.
            ?P \<sigma> U \<phi> ==> ?P \<sigma> U (! \<phi>);
         !!\<sigma> U \<phi> \<psi>.
            [| ?P \<sigma> U \<phi>; ?P \<sigma> U \<psi> |]
            ==> ?P \<sigma> U (\<phi> && \<psi>);
         !!\<sigma> U x \<phi>.
            ?P \<sigma> (U Un {x}) \<phi> ==>
            ?P \<sigma> U (Exists x \<phi>);
         !!\<sigma> U \<alpha> \<phi>.
            [| ?Q \<sigma> U \<alpha>;
               !!x. x = usubstappp \<sigma> U \<alpha> ==>
                    ?P \<sigma> (fst x) \<phi> |]
            ==> ?P \<sigma> U (\<langle> \<alpha> \<rangle> \<phi>);
         !!\<sigma> U a. ?Q \<sigma> U (Game a);
         !!\<sigma> U x \<theta>. ?Q \<sigma> U (x := \<theta>);
         !!\<sigma> U \<phi>.
            ?P \<sigma> U \<phi> ==> ?Q \<sigma> U (? \<phi>);
         !!\<sigma> U \<alpha> \<beta>.
            [| ?Q \<sigma> U \<alpha>;
               !!x. x = usubstappp \<sigma> U \<alpha> ==>
                    ?Q \<sigma> U \<beta> |]
            ==> ?Q \<sigma> U (\<alpha> \<union>\<union> \<beta>);
         !!\<sigma> U \<alpha> \<beta>.
            [| ?Q \<sigma> U \<alpha>;
               !!x. x = usubstappp \<sigma> U \<alpha> ==>
                    ?Q \<sigma> (fst x) \<beta> |]
            ==> ?Q \<sigma> U (\<alpha> ;; \<beta>);
         !!\<sigma> U \<alpha>.
            [| ?Q \<sigma> U \<alpha>;
               !!x. x = fst (usubstappp \<sigma> U \<alpha>) ==>
                    ?Q \<sigma> x \<alpha> |]
            ==> ?Q \<sigma> U \<alpha>**;
         !!\<sigma> U \<alpha>.
            ?Q \<sigma> U \<alpha> ==> ?Q \<sigma> U \<alpha>^d;
         !!\<sigma> U x \<theta>. ?Q \<sigma> U (ODE x \<theta>) |]
      ==> ?Q ?a3.0 ?a4.0 ?a5.0",
     template_implication
      ([template_predicate (template_app (template_hole 40, t_empty)),
        template_predicate (template_app (template_hole 40, t_empty)),
        template_predicate (template_app (template_hole 40, t_empty)),
        template_predicate (template_app (template_hole 40, t_empty)),
        template_predicate (template_app (template_hole 40, t_empty)),
        template_predicate (template_app (template_hole 40, t_empty)),
        template_predicate (template_app (template_hole 40, t_empty)),
        template_predicate (template_app (template_hole 40, t_empty)),
        template_predicate (template_app (template_hole 40, t_empty)),
        template_predicate (template_app (template_hole 40, t_empty)),
        template_predicate (template_app (template_hole 40, t_empty)),
        template_predicate (template_app (template_hole 40, t_empty)),
        template_predicate (template_app (template_hole 40, t_empty)),
        template_predicate (template_app (template_hole 40, t_empty))],
       template_predicate
        (
           template_app
            (template_app
              (template_app (template_var 3, template_var 2),
               template_var 1),
             template_var 0)
           )))]:
   (string * thm * template) list
### theory "Draft.USubstMoreTemplates"
### 0.802s elapsed time, 1.077s cpu time, 0.143s GC time
val it = (): unit
