   [("Denotational_Semantics.Uvariation_refl",
     "Uvariation ?\<nu> ?\<nu> ?V",
     template_predicate
      (
         template_app
          (template_app
            (template_app (template_hole 0, template_var 1),
             template_var 1),
           template_var 0)
         )),
    ("Denotational_Semantics.Vagree_refl", "Vagree ?\<nu> ?\<nu> ?V",
     template_predicate
      (
         template_app
          (template_app
            (template_app (template_hole 0, template_var 1),
             template_var 1),
           template_var 0)
         )),
    ("Denotational_Semantics.Vagree_empty", "Vagree ?\<nu> ?\<nu>' {}",
     template_predicate
      (
         template_app
          (template_app
            (template_app (template_hole 1, template_var 1),
             template_var 0),
           template_hole 0)
         )),
    ("Denotational_Semantics.equal_refl_valid",
     "valid (Equals ?\<theta> ?\<theta>)",
     template_predicate
      (
         template_app
          (template_hole 1,
           template_app
            (template_app (template_hole 0, template_var 0),
             template_var 0))
         )),
    ("Denotational_Semantics.equiv_refl_valid",
     "valid (?\<phi> \<leftrightarrow> ?\<phi>)",
     template_predicate
      (
         template_app
          (template_hole 1,
           template_app
            (template_app (template_hole 0, template_var 0),
             template_var 0))
         )),
    ("Denotational_Semantics.Uvariation_univ",
     "Uvariation ?\<nu> ?\<nu>' Denotational_Semantics.allvars",
     template_predicate
      (
         template_app
          (template_app
            (template_app (template_hole 2, template_var 1),
             template_var 0),
           template_app (template_hole 1, t_empty))
         )),
    ("Denotational_Semantics.skip_id", "game_sem ?I Skip ?X = ?X",
     template_equation
      (template_app
        (template_app
          (template_app (template_hole 1, template_var 1), template_hole 0),
         template_var 0),
       template_var 0)),
    ("Denotational_Semantics.game_sem_mono", "mono (game_sem ?I ?\<alpha>)",
     template_predicate (template_app (template_hole 1, t_empty))),
    ("Denotational_Semantics.locally_sound_is_sound",
     "locally_sound ?R ==> sound ?R",
     template_implication
      ([template_predicate
         (template_app (template_hole 1, template_var 0))],
       template_predicate
        (template_app (template_hole 0, template_var 0)))),
    ("Denotational_Semantics.repv_self",
     "repv ?\<omega> ?x (?\<omega> ?x) = ?\<omega>",
     template_equation
      (template_app
        (template_app
          (template_app (template_hole 0, template_var 1), template_var 0),
         template_app (template_var 1, template_var 0)),
       template_var 1)),
    ("Denotational_Semantics.valid_is_valid_in_all",
     "valid ?\<phi> = (ALL I. valid_in I ?\<phi>)",
     template_equation
      (template_app (template_hole 2, template_var 0),
       template_app (template_hole 1, t_empty))),
    ("Denotational_Semantics.Uvariation_empty",
     "Uvariation ?\<nu> ?\<nu>' {} = (?\<nu> = ?\<nu>')",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app (template_hole 2, template_var 1),
                template_var 0),
              template_hole 1)
            )],
       template_equation (template_var 1, template_var 0))),
    ("Denotational_Semantics.valid_fml_equiv",
     "valid (?\<phi> \<leftrightarrow> ?\<psi>) =
      fml_equiv ?\<phi> ?\<psi>",
     template_equation
      (template_app
        (template_hole 2,
         template_app
          (template_app (template_hole 1, template_var 1), template_var 0)),
       template_app
        (template_app (template_hole 0, template_var 1), template_var 0))),
    ("Denotational_Semantics.game_sem_loop_fixpoint_mono",
     "mono (%Z. ?X Un game_sem ?I ?\<alpha> Z)",
     template_predicate (template_app (template_hole 2, t_empty))),
    ("Denotational_Semantics.Uvariation_repv",
     "Uvariation ?\<omega> (repv ?\<omega> ?x ?d) {?x}",
     template_predicate
      (
         template_app
          (template_app
            (template_app (template_hole 3, template_var 2),
             template_app
              (template_app
                (template_app (template_hole 2, template_var 2),
                 template_var 1),
               template_var 0)),
           template_app
            (template_app (template_hole 1, template_var 1),
             template_hole 0))
         )),
    ("Denotational_Semantics.loop_iterate_equiv",
     "game_equiv ?\<alpha>**
       (Skip \<union>\<union> (?\<alpha> ;; ?\<alpha>**))",
     template_predicate
      (
         template_app
          (template_app
            (template_hole 4,
             template_app (template_hole 3, template_var 0)),
           template_app
            (template_app (template_hole 2, template_hole 1),
             template_app
              (template_app (template_hole 0, template_var 0),
               template_app (template_hole 3, template_var 0))))
         )),
    ("Denotational_Semantics.fml_sem_not",
     "fml_sem ?I (! ?\<phi>) = - fml_sem ?I ?\<phi>",
     template_equation
      (template_app
        (template_app (template_hole 2, template_var 1),
         template_app (template_hole 1, template_var 0)),
       template_app
        (template_hole 0,
         template_app
          (template_app (template_hole 2, template_var 1),
           template_var 0)))),
    ("Denotational_Semantics.fml_sem_not_not",
     "fml_sem ?I (! (! ?\<phi>)) = fml_sem ?I ?\<phi>",
     template_equation
      (template_app
        (template_app (template_hole 1, template_var 1),
         template_app
          (template_hole 0,
           template_app (template_hole 0, template_var 0))),
       template_app
        (template_app (template_hole 1, template_var 1), template_var 0))),
    ("Denotational_Semantics.Uvariation_sym",
     "Uvariation ?\<omega> ?\<nu> ?U = Uvariation ?\<nu> ?\<omega> ?U",
     template_equation
      (template_app
        (template_app
          (template_app (template_hole 0, template_var 2), template_var 1),
         template_var 0),
       template_app
        (template_app
          (template_app (template_hole 0, template_var 1), template_var 2),
         template_var 0))),
    ("Denotational_Semantics.Vagree_sym",
     "Vagree ?\<nu> ?\<nu>' ?V = Vagree ?\<nu>' ?\<nu> ?V",
     template_equation
      (template_app
        (template_app
          (template_app (template_hole 0, template_var 2), template_var 1),
         template_var 0),
       template_app
        (template_app
          (template_app (template_hole 0, template_var 1), template_var 2),
         template_var 0))),
    ("Denotational_Semantics.Vagree_repv",
     "Vagree ?\<omega> (repv ?\<omega> ?x ?d) (- {?x})",
     template_predicate
      (
         template_app
          (template_app
            (template_app (template_hole 4, template_var 2),
             template_app
              (template_app
                (template_app (template_hole 3, template_var 2),
                 template_var 1),
               template_var 0)),
           template_app
            (template_hole 2,
             template_app
              (template_app (template_hole 1, template_var 1),
               template_hole 0)))
         )),
    ("Denotational_Semantics.Uvariation_Vagree",
     "Uvariation ?\<nu> ?\<nu>' (- ?V) = Vagree ?\<nu> ?\<nu>' ?V",
     template_equation
      (template_app
        (template_app
          (template_app (template_hole 2, template_var 2), template_var 1),
         template_app (template_hole 1, template_var 0)),
       template_app
        (template_app
          (template_app (template_hole 0, template_var 2), template_var 1),
         template_var 0))),
    ("Denotational_Semantics.Vagree_univ",
     "Vagree ?\<nu> ?\<nu>' Denotational_Semantics.allvars =
      (?\<nu> = ?\<nu>')",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app (template_hole 3, template_var 1),
                template_var 0),
              template_app (template_hole 2, t_empty))
            )],
       template_equation (template_var 1, template_var 0))),
    ("Denotational_Semantics.fml_equiv_valid",
     "fml_equiv ?\<phi> ?\<psi> ==> valid ?\<phi> = valid ?\<psi>",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 2, template_var 1),
              template_var 0)
            )],
       template_equation
        (template_app (template_hole 0, template_var 1),
         template_app (template_hole 0, template_var 0)))),
    ("Denotational_Semantics.Uvariation_sym_rel",
     "Uvariation ?\<omega> ?\<nu> ?U ==> Uvariation ?\<nu> ?\<omega> ?U",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app (template_hole 0, template_var 2),
                template_var 1),
              template_var 0)
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_app (template_hole 0, template_var 1),
               template_var 2),
             template_var 0)
           ))),
    ("Denotational_Semantics.Vagree_sym_rel",
     "Vagree ?\<nu> ?\<nu>' ?V ==> Vagree ?\<nu>' ?\<nu> ?V",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app (template_hole 0, template_var 2),
                template_var 1),
              template_var 0)
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_app (template_hole 0, template_var 1),
               template_var 2),
             template_var 0)
           ))),
    ("Denotational_Semantics.Preds_mkinterp",
     "Preds (mkinterp (?C, ?F, ?P, ?G)) = ?P",
     template_equation
      (template_app
        (template_hole 4,
         template_app
          (template_hole 3,
           template_app
            (template_app (template_hole 2, template_var 3),
             template_app
              (template_app (template_hole 1, template_var 2),
               template_app
                (template_app (template_hole 0, template_var 1),
                 template_var 0))))),
       template_var 1)),
    ("Denotational_Semantics.Funcs_mkinterp",
     "Funcs (mkinterp (?C, ?F, ?P, ?G)) = ?F",
     template_equation
      (template_app
        (template_hole 4,
         template_app
          (template_hole 3,
           template_app
            (template_app (template_hole 2, template_var 3),
             template_app
              (template_app (template_hole 1, template_var 2),
               template_app
                (template_app (template_hole 0, template_var 1),
                 template_var 0))))),
       template_var 2)),
    ("Denotational_Semantics.Consts_mkinterp",
     "Consts (mkinterp (?C, ?F, ?P, ?G)) = ?C",
     template_equation
      (template_app
        (template_hole 4,
         template_app
          (template_hole 3,
           template_app
            (template_app (template_hole 2, template_var 3),
             template_app
              (template_app (template_hole 1, template_var 2),
               template_app
                (template_app (template_hole 0, template_var 1),
                 template_var 0))))),
       template_var 3)),
    ("Denotational_Semantics.fml_sem_or",
     "fml_sem ?I (?\<phi> || ?\<psi>) =
      fml_sem ?I ?\<phi> Un fml_sem ?I ?\<psi>",
     template_equation
      (template_app
        (template_app (template_hole 2, template_var 2),
         template_app
          (template_app (template_hole 1, template_var 1), template_var 0)),
       template_app
        (template_app
          (template_hole 0,
           template_app
            (template_app (template_hole 2, template_var 2),
             template_var 1)),
         template_app
          (template_app (template_hole 2, template_var 2),
           template_var 0)))),
    ("Denotational_Semantics.valid_in_equiv",
     "valid_in ?I (?\<phi> \<leftrightarrow> ?\<psi>) =
      (fml_sem ?I ?\<phi> = fml_sem ?I ?\<psi>)",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 3, template_var 2),
              template_app
               (template_app (template_hole 2, template_var 1),
                template_var 0))
            )],
       template_equation
        (template_app
          (template_app (template_hole 0, template_var 2), template_var 1),
         template_app
          (template_app (template_hole 0, template_var 2),
           template_var 0)))),
    ("Denotational_Semantics.valid_in_impl",
     "valid_in ?I (?\<phi> \<rightarrow> ?\<psi>) =
      (fml_sem ?I ?\<phi> <= fml_sem ?I ?\<psi>)",
     template_equation
      (template_app
        (template_app (template_hole 3, template_var 2),
         template_app
          (template_app (template_hole 2, template_var 1), template_var 0)),
       template_app
        (template_app
          (template_hole 1,
           template_app
            (template_app (template_hole 0, template_var 2),
             template_var 1)),
         template_app
          (template_app (template_hole 0, template_var 2),
           template_var 0)))),
    ("Denotational_Semantics.repv_access",
     "repv ?\<omega> ?x ?r ?y = (if ?x = ?y then ?r else ?\<omega> ?y)",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_app (template_hole 2, template_var 3),
                  template_var 2),
                template_var 1),
              template_var 0)
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_app
                (template_hole 1,
                 template_app
                  (template_app (template_hole 0, template_var 2),
                   template_var 0)),
               template_var 1),
             template_app (template_var 3, template_var 0))
           ))),
    ("Denotational_Semantics.Vagree_antimon",
     "Vagree ?\<nu> ?\<nu>' ?V & ?W <= ?V --> Vagree ?\<nu> ?\<nu>' ?W",
     template_predicate
      (
         template_app
          (template_app
            (template_hole 3,
             template_app
              (template_app
                (template_hole 2,
                 template_app
                  (template_app
                    (template_app (template_hole 1, template_var 3),
                     template_var 2),
                   template_var 1)),
               template_app
                (template_app (template_hole 0, template_var 0),
                 template_var 1))),
           template_app
            (template_app
              (template_app (template_hole 1, template_var 3),
               template_var 2),
             template_var 0))
         )),
    ("Denotational_Semantics.game_sem_loop",
     "game_sem ?I ?\<alpha>** =
      (%X. lfp (%Z. X Un game_sem ?I ?\<alpha> Z))",
     template_equation
      (template_app
        (template_app (template_hole 3, template_var 1),
         template_app (template_hole 2, template_var 0)),
       t_empty)),
    ("Denotational_Semantics.game_sem_loop_back",
     "(%X. lfp (%Z. X Un game_sem ?I ?\<alpha> Z)) =
      game_sem ?I ?\<alpha>**",
     template_equation
      (t_empty,
       template_app
        (template_app (template_hole 1, template_var 1),
         template_app (template_hole 0, template_var 0)))),
    ("Denotational_Semantics.fml_sem_implies",
     "fml_sem ?I (?\<phi> \<rightarrow> ?\<psi>) =
      - fml_sem ?I ?\<phi> Un fml_sem ?I ?\<psi>",
     template_equation
      (template_app
        (template_app (template_hole 3, template_var 2),
         template_app
          (template_app (template_hole 2, template_var 1), template_var 0)),
       template_app
        (template_app
          (template_hole 1,
           template_app
            (template_hole 0,
             template_app
              (template_app (template_hole 3, template_var 2),
               template_var 1))),
         template_app
          (template_app (template_hole 3, template_var 2),
           template_var 0)))),
    ("Denotational_Semantics.valid_equiv",
     "valid (?\<phi> \<leftrightarrow> ?\<psi>) =
      (ALL I. fml_sem I ?\<phi> = fml_sem I ?\<psi>)",
     template_equation
      (template_app
        (template_hole 4,
         template_app
          (template_app (template_hole 3, template_var 1), template_var 0)),
       template_app (template_hole 2, t_empty))),
    ("Denotational_Semantics.valid_impl",
     "valid (?\<phi> \<rightarrow> ?\<psi>) =
      (ALL I. fml_sem I ?\<phi> <= fml_sem I ?\<psi>)",
     template_equation
      (template_app
        (template_hole 4,
         template_app
          (template_app (template_hole 3, template_var 1), template_var 0)),
       template_app (template_hole 2, t_empty))),
    ("Denotational_Semantics.Vagree_repv_self",
     "Vagree ?\<omega> (repv ?\<omega> ?x ?d) {?x} = (?d = ?\<omega> ?x)",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app (template_hole 4, template_var 2),
                template_app
                 (template_app
                   (template_app (template_hole 3, template_var 2),
                    template_var 1),
                  template_var 0)),
              template_app
               (template_app (template_hole 2, template_var 1),
                template_hole 1))
            )],
       template_equation
        (template_var 0, template_app (template_var 2, template_var 1)))),
    ("Denotational_Semantics.monotone",
     "?X <= ?Y ==> game_sem ?I ?\<alpha> ?X <= game_sem ?I ?\<alpha> ?Y",
     template_implication
      ([template_inequation (less_equals, template_var 3, template_var 2)],
       template_inequation
        (less_equals,
         template_app
          (template_app
            (template_app (template_hole 0, template_var 1),
             template_var 0),
           template_var 3),
         template_app
          (template_app
            (template_app (template_hole 0, template_var 1),
             template_var 0),
           template_var 2)))),
    ("Denotational_Semantics.game_sem_loop_unwind",
     "game_sem ?I ?\<alpha>** =
      (%X. X Un game_sem ?I (?\<alpha> ;; ?\<alpha>**) X)",
     template_equation
      (template_app
        (template_app (template_hole 3, template_var 1),
         template_app (template_hole 2, template_var 0)),
       t_empty)),
    ("Denotational_Semantics.game_sem_loop_unwind_reduce",
     "(%X. X Un game_sem ?I (?\<alpha> ;; ?\<alpha>**) X) =
      game_sem ?I ?\<alpha>**",
     template_equation
      (t_empty,
       template_app
        (template_app (template_hole 2, template_var 1),
         template_app (template_hole 0, template_var 0)))),
    ("Denotational_Semantics.fml_equiv_subst",
     "[| fml_equiv ?\<phi> ?\<psi>; ?P (fml_sem ?I ?\<phi>) |]
      ==> ?P (fml_sem ?I ?\<psi>)",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 1, template_var 3),
              template_var 2)
            ),
        template_predicate
         (
            template_app
             (template_var 1,
              template_app
               (template_app (template_hole 0, template_var 0),
                template_var 3))
            )],
       template_predicate
        (
           template_app
            (template_var 1,
             template_app
              (template_app (template_hole 0, template_var 0),
               template_var 2))
           ))),
    ("Denotational_Semantics.Uvariation_mon",
     "[| ?U <= ?V; Uvariation ?\<omega> ?\<nu> ?U |]
      ==> Uvariation ?\<omega> ?\<nu> ?V",
     template_implication
      ([template_inequation (less_equals, template_var 3, template_var 2),
        template_predicate
         (
            template_app
             (template_app
               (template_app (template_hole 0, template_var 1),
                template_var 0),
              template_var 3)
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_app (template_hole 0, template_var 1),
               template_var 0),
             template_var 2)
           ))),
    ("Denotational_Semantics.game_sem_loop_iterate",
     "game_sem ?I ?\<alpha>** =
      (%X. X Un game_sem ?I ?\<alpha> (game_sem ?I ?\<alpha>** X))",
     template_equation
      (template_app
        (template_app (template_hole 2, template_var 1),
         template_app (template_hole 1, template_var 0)),
       t_empty)),
    ("Denotational_Semantics.mon_mono",
     "mono ?r = (ALL X Y. X <= Y --> ?r X <= ?r Y)",
     template_equation
      (template_app (template_hole 4, template_var 0),
       template_app (template_hole 3, t_empty))),
    ("Denotational_Semantics.Vagree_and",
     "(Vagree ?\<nu> ?\<nu>' ?V & Vagree ?\<nu> ?\<nu>' ?W) =
      Vagree ?\<nu> ?\<nu>' (?V Un ?W)",
     template_equation
      (template_app
        (template_app
          (template_hole 2,
           template_app
            (template_app
              (template_app (template_hole 1, template_var 3),
               template_var 2),
             template_var 1)),
         template_app
          (template_app
            (template_app (template_hole 1, template_var 3),
             template_var 2),
           template_var 0)),
       template_app
        (template_app
          (template_app (template_hole 1, template_var 3), template_var 2),
         template_app
          (template_app (template_hole 0, template_var 1),
           template_var 0)))),
    ("Denotational_Semantics.Vagree_or",
     "Vagree ?\<nu> ?\<nu>' ?V | Vagree ?\<nu> ?\<nu>' ?W -->
      Vagree ?\<nu> ?\<nu>' (?V Int ?W)",
     template_predicate
      (
         template_app
          (template_app
            (template_hole 3,
             template_app
              (template_app
                (template_hole 2,
                 template_app
                  (template_app
                    (template_app (template_hole 1, template_var 3),
                     template_var 2),
                   template_var 1)),
               template_app
                (template_app
                  (template_app (template_hole 1, template_var 3),
                   template_var 2),
                 template_var 0))),
           template_app
            (template_app
              (template_app (template_hole 1, template_var 3),
               template_var 2),
             template_app
              (template_app (template_hole 0, template_var 1),
               template_var 0)))
         )),
    ("Denotational_Semantics.game_union",
     "game_sem ?I ?\<alpha> ?X Un game_sem ?I ?\<alpha> ?Y
      <= game_sem ?I ?\<alpha> (?X Un ?Y)",
     template_inequation
      (less_equals,
       template_app
        (template_app
          (template_hole 1,
           template_app
            (template_app
              (template_app (template_hole 0, template_var 3),
               template_var 2),
             template_var 1)),
         template_app
          (template_app
            (template_app (template_hole 0, template_var 3),
             template_var 2),
           template_var 0)),
       template_app
        (template_app
          (template_app (template_hole 0, template_var 3), template_var 2),
         template_app
          (template_app (template_hole 1, template_var 1),
           template_var 0)))),
    ("Denotational_Semantics.monotone_Test",
     "?X <= ?Y ==>
      game_sem ?I (? ?\<phi>) ?X <= game_sem ?I (? ?\<phi>) ?Y",
     template_implication
      ([template_inequation (less_equals, template_var 3, template_var 2)],
       template_inequation
        (less_equals,
         template_app
          (template_app
            (template_app (template_hole 1, template_var 1),
             template_app (template_hole 0, template_var 0)),
           template_var 3),
         template_app
          (template_app
            (template_app (template_hole 1, template_var 1),
             template_app (template_hole 0, template_var 0)),
           template_var 2)))),
    ("Denotational_Semantics.fml_sem_equals",
     "(?\<omega> : fml_sem ?I (Equals ?\<theta> ?\<eta>)) =
      (term_sem ?I ?\<theta> ?\<omega> = term_sem ?I ?\<eta> ?\<omega>)",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 4, template_var 3),
              template_app
               (template_app (template_hole 3, template_var 2),
                template_app
                 (template_app (template_hole 2, template_var 1),
                  template_var 0)))
            )],
       template_equation
        (template_app
          (template_app
            (template_app (template_hole 0, template_var 2),
             template_var 1),
           template_var 3),
         template_app
          (template_app
            (template_app (template_hole 0, template_var 2),
             template_var 0),
           template_var 3)))),
    ("Denotational_Semantics.game_equiv_subst",
     "[| game_equiv ?\<alpha> ?\<beta>; ?P (game_sem ?I ?\<alpha> ?X) |]
      ==> ?P (game_sem ?I ?\<beta> ?X)",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 1, template_var 4),
              template_var 3)
            ),
        template_predicate
         (
            template_app
             (template_var 2,
              template_app
               (template_app
                 (template_app (template_hole 0, template_var 1),
                  template_var 4),
                template_var 0))
            )],
       template_predicate
        (
           template_app
            (template_var 2,
             template_app
              (template_app
                (template_app (template_hole 0, template_var 1),
                 template_var 3),
               template_var 0))
           ))),
    ("Denotational_Semantics.Games_mkinterp",
     "(!!a. mono (?G a)) ==> Games (mkinterp (?C, ?F, ?P, ?G)) = ?G",
     template_implication
      ([template_predicate (template_app (template_hole 8, t_empty))],
       template_equation
        (template_app
          (template_hole 4,
           template_app
            (template_hole 3,
             template_app
              (template_app (template_hole 2, template_var 2),
               template_app
                (template_app (template_hole 1, template_var 1),
                 template_app
                  (template_app (template_hole 0, template_var 0),
                   template_var 3))))),
         template_var 3))),
    ("Denotational_Semantics.Uvariation_trans",
     "[| Uvariation ?\<omega> ?\<nu> ?U; Uvariation ?\<nu> ?\<mu> ?V |]
      ==> Uvariation ?\<omega> ?\<mu> (?U Un ?V)",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app (template_hole 1, template_var 4),
                template_var 3),
              template_var 2)
            ),
        template_predicate
         (
            template_app
             (template_app
               (template_app (template_hole 1, template_var 3),
                template_var 1),
              template_var 0)
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_app (template_hole 1, template_var 4),
               template_var 1),
             template_app
              (template_app (template_hole 0, template_var 2),
               template_var 0))
           ))),
    ("Denotational_Semantics.Vagree_union",
     "[| Vagree ?\<nu> ?\<nu>' ?V; Vagree ?\<nu> ?\<nu>' ?W |]
      ==> Vagree ?\<nu> ?\<nu>' (?V Un ?W)",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app (template_hole 1, template_var 3),
                template_var 2),
              template_var 1)
            ),
        template_predicate
         (
            template_app
             (template_app
               (template_app (template_hole 1, template_var 3),
                template_var 2),
              template_var 0)
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_app (template_hole 1, template_var 3),
               template_var 2),
             template_app
              (template_app (template_hole 0, template_var 1),
               template_var 0))
           ))),
    ("Denotational_Semantics.Vagree_trans",
     "[| Vagree ?\<nu> ?\<nu>' ?V; Vagree ?\<nu>' ?\<nu>'' ?W |]
      ==> Vagree ?\<nu> ?\<nu>'' (?V Int ?W)",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app (template_hole 1, template_var 4),
                template_var 3),
              template_var 2)
            ),
        template_predicate
         (
            template_app
             (template_app
               (template_app (template_hole 1, template_var 3),
                template_var 1),
              template_var 0)
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_app (template_hole 1, template_var 4),
               template_var 1),
             template_app
              (template_app (template_hole 0, template_var 2),
               template_var 0))
           ))),
    ("Denotational_Semantics.solves_Vagree",
     "solves_ODE ?I ?F ?x ?\<theta> ==>
      Vagree (?F ?\<zeta>) (?F 0) (- {RVar ?x, DVar ?x})",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_app (template_hole 7, template_var 4),
                  template_var 3),
                template_var 2),
              template_var 1)
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_app
                (template_hole 6,
                 template_app (template_var 3, template_var 0)),
               template_app (template_var 3, template_hole 5)),
             template_app
              (template_hole 4,
               template_app
                (template_app
                  (template_hole 3,
                   template_app (template_hole 2, template_var 2)),
                 template_app
                  (template_app
                    (template_hole 3,
                     template_app (template_hole 1, template_var 2)),
                   template_hole 0))))
           ))),
    ("Denotational_Semantics.mkinterp_eq",
     "(Consts ?I = Consts ?J &
       Funcs ?I = Funcs ?J & Preds ?I = Preds ?J & Games ?I = Games ?J) =
      (?I = ?J)",
     template_bimplication
      (template_predicate
        (
           template_app
            (template_app
              (template_hole 9,
               template_app
                (template_app
                  (template_hole 8,
                   template_app (template_hole 7, template_var 1)),
                 template_app (template_hole 7, template_var 0))),
             template_app
              (template_app
                (template_hole 9,
                 template_app
                  (template_app
                    (template_hole 6,
                     template_app (template_hole 5, template_var 1)),
                   template_app (template_hole 5, template_var 0))),
               template_app
                (template_app
                  (template_hole 9,
                   template_app
                    (template_app
                      (template_hole 4,
                       template_app (template_hole 3, template_var 1)),
                     template_app (template_hole 3, template_var 0))),
                 template_app
                  (template_app
                    (template_hole 2,
                     template_app (template_hole 1, template_var 1)),
                   template_app (template_hole 1, template_var 0)))))
           ),
       template_equation (template_var 1, template_var 0))),
    ("Denotational_Semantics.solves_Vagree_trans",
     "[| Uvariation (?F 0) ?\<omega> ?U; solves_ODE ?I ?F ?x ?\<theta> |]
      ==> Uvariation (?F ?\<zeta>) ?\<omega> (?U Un {RVar ?x, DVar ?x})",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_hole 7,
                  template_app (template_var 6, template_hole 6)),
                template_var 5),
              template_var 4)
            ),
        template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_app (template_hole 5, template_var 3),
                  template_var 6),
                template_var 2),
              template_var 1)
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_app
                (template_hole 7,
                 template_app (template_var 6, template_var 0)),
               template_var 5),
             template_app
              (template_app (template_hole 4, template_var 4),
               template_app
                (template_app
                  (template_hole 3,
                   template_app (template_hole 2, template_var 2)),
                 template_app
                  (template_app
                    (template_hole 3,
                     template_app (template_hole 1, template_var 2)),
                   template_hole 0))))
           ))),
    ("Denotational_Semantics.lfp_ordinal_induct_set_cases",
     "[| mono ?f; !!S. ?P S ==> ?P (?f S);
         !!M. ALL S:M. ?P S ==> ?P (\<Union> M) |]
      ==> ?P (lfp ?f)",
     template_implication
      ([template_predicate (template_app (template_hole 5, template_var 1)),
        template_predicate (template_app (template_hole 4, t_empty)),
        template_predicate (template_app (template_hole 3, t_empty))],
       template_predicate
        (
           template_app
            (template_var 0, template_app (template_hole 0, template_var 1))
           ))),
    ("Denotational_Semantics.game_loop_induct",
     "[| !!Z. [| Z <= game_sem ?I ?\<alpha>** ?X; ?P Z |]
              ==> ?P (?X Un game_sem ?I ?\<alpha> Z);
         !!M. ALL Z:M. ?P Z ==> ?P (\<Union> M) |]
      ==> ?P (game_sem ?I ?\<alpha>** ?X)",
     template_implication
      ([template_predicate (template_app (template_hole 8, t_empty)),
        template_predicate (template_app (template_hole 2, t_empty))],
       template_predicate
        (
           template_app
            (template_var 0,
             template_app
              (template_app
                (template_app (template_hole 5, template_var 3),
                 template_app (template_hole 4, template_var 2)),
               template_var 1))
           )))]
