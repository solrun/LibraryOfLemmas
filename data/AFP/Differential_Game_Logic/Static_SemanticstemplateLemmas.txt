   [("Static_Semantics.FVF_finite", "finite (FVF ?e)",
     template_predicate
      (
         template_app
          (template_hole 1, template_app (template_hole 0, template_var 0))
         )),
    ("Static_Semantics.FVG_finite", "finite (FVG ?a)",
     template_predicate
      (
         template_app
          (template_hole 1, template_app (template_hole 0, template_var 0))
         )),
    ("Static_Semantics.FVT_finite", "finite (FVT ?t)",
     template_predicate
      (
         template_app
          (template_hole 1, template_app (template_hole 0, template_var 0))
         )),
    ("Static_Semantics.BVG_elem",
     "(?x : BVG ?\<alpha>) =
      (EX I \<omega> X.
          \<omega> : game_sem I ?\<alpha> X &
          \<omega> ~: game_sem I ?\<alpha> (selectlike X \<omega> {?x}))",
     template_equation
      (template_app
        (template_app (template_hole 11, template_var 1),
         template_app (template_hole 10, template_var 0)),
       template_app (template_hole 9, t_empty))),
    ("Static_Semantics.nonBVG_rule",
     "(!!I \<omega> X.
          (\<omega> : game_sem I ?\<alpha> X) =
          (\<omega>
           : game_sem I ?\<alpha> (selectlike X \<omega> {?x}))) ==>
      ?x ~: BVG ?\<alpha>",
     template_implication
      ([template_predicate (template_app (template_hole 12, t_empty))],
       template_negation
        (
           template_predicate
            (
               template_app
                (template_app (template_hole 1, template_var 0),
                 template_app (template_hole 0, template_var 1))
               )
           ))),
    ("Static_Semantics.nonBVG_inc_rule",
     "(!!I \<omega> X.
          \<omega> : game_sem I ?\<alpha> X ==>
          \<omega> : game_sem I ?\<alpha> (selectlike X \<omega> {?x})) ==>
      ?x ~: BVG ?\<alpha>",
     template_implication
      ([template_predicate (template_app (template_hole 11, t_empty))],
       template_negation
        (
           template_predicate
            (
               template_app
                (template_app (template_hole 1, template_var 0),
                 template_app (template_hole 0, template_var 1))
               )
           )))]
