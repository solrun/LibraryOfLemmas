   [("Lib.finite_powerset", "finite ?M ==> finite {S. S <= ?M}",
     template_implication
      ([template_predicate
         (template_app (template_hole 3, template_var 0))],
       template_predicate
        (
           template_app
            (template_hole 2, template_app (template_hole 1, t_empty))
           ))),
    ("Lib.fst_proj_mem", "(?A : fst_proj ?M) = (EX B. (?A, B) : ?M)",
     template_equation
      (template_app
        (template_app (template_hole 4, template_var 1),
         template_app (template_hole 3, template_var 0)),
       template_app (template_hole 2, t_empty))),
    ("Lib.snd_proj_mem", "(?B : snd_proj ?M) = (EX A. (A, ?B) : ?M)",
     template_equation
      (template_app
        (template_app (template_hole 4, template_var 1),
         template_app (template_hole 3, template_var 0)),
       template_app (template_hole 2, t_empty))),
    ("Lib.map_cons", "map ?f (?x # ?xs) = ?f ?x # map ?f ?xs",
     template_equation
      (template_app
        (template_app (template_hole 2, template_var 2),
         template_app
          (template_app (template_hole 1, template_var 1), template_var 0)),
       template_app
        (template_app
          (template_hole 0, template_app (template_var 2, template_var 1)),
         template_app
          (template_app (template_hole 2, template_var 2),
           template_var 0)))),
    ("Lib.map_append", "map ?f (?xs @ ?ys) = map ?f ?xs @ map ?f ?ys",
     template_equation
      (template_app
        (template_app (template_hole 2, template_var 2),
         template_app
          (template_app (template_hole 1, template_var 1), template_var 0)),
       template_app
        (template_app
          (template_hole 0,
           template_app
            (template_app (template_hole 2, template_var 2),
             template_var 1)),
         template_app
          (template_app (template_hole 2, template_var 2),
           template_var 0)))),
    ("Lib.finite_subset", "finite ?M ==> finite {x: ?M. ?P x}",
     template_implication
      ([template_predicate
         (template_app (template_hole 3, template_var 1))],
       template_predicate
        (
           template_app
            (template_hole 3, template_app (template_hole 2, t_empty))
           ))),
    ("Lib.fst_proj_prop",
     "ALL x:fst_proj {(A, B) |A B. ?P A & ?R A B}. ?P x",
     template_predicate
      (
         template_app
          (template_app
            (template_hole 7,
             template_app
              (template_hole 6, template_app (template_hole 5, t_empty))),
           t_empty)
         )),
    ("Lib.snd_proj_prop",
     "ALL x:snd_proj {(A, B) |A B. ?P B & ?R A B}. ?P x",
     template_predicate
      (
         template_app
          (template_app
            (template_hole 7,
             template_app
              (template_hole 6, template_app (template_hole 5, t_empty))),
           t_empty)
         )),
    ("Lib.sup_corr_eq_chain",
     "ALL (A, B):?M. ?f A = ?g B ==>
      Sup {?f A |A. A : fst_proj ?M} = Sup {?g B |B. B : snd_proj ?M}",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 9, template_var 2),
              template_app (template_hole 8, t_empty))
            )],
       template_equation
        (template_app
          (template_hole 6, template_app (template_hole 5, t_empty)),
         template_app
          (template_hole 6, template_app (template_hole 5, t_empty))))),
    ("Lib.sup_eq_all",
     "(!!A. A : ?M ==> ?f A = ?g A) ==>
      Sup {?f A |A. A : ?M} = Sup {?g A |A. A : ?M}",
     template_implication
      ([template_predicate (template_app (template_hole 7, t_empty))],
       template_equation
        (template_app
          (template_hole 3, template_app (template_hole 2, t_empty)),
         template_app
          (template_hole 3, template_app (template_hole 2, t_empty))))),
    ("Lib.lfp_lockstep_induct",
     "[| mono ?f; mono ?g;
         !!A B. [| A <= lfp ?f; B <= lfp ?g; ?R A B |] ==> ?R (?f A) (?g B);
         !!M. ALL (A, B):M. ?R A B ==>
              ?R (Sup (fst_proj M)) (Sup (snd_proj M)) |]
      ==> ?R (lfp ?f) (lfp ?g)",
     template_implication
      ([template_predicate
         (template_app (template_hole 14, template_var 2)),
        template_predicate
         (template_app (template_hole 13, template_var 1)),
        template_predicate (template_app (template_hole 12, t_empty)),
        template_predicate (template_app (template_hole 6, t_empty))],
       template_predicate
        (
           template_app
            (template_app
              (template_var 0,
               template_app (template_hole 9, template_var 2)),
             template_app (template_hole 7, template_var 1))
           )))]
