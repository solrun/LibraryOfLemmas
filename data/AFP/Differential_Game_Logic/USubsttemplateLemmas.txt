   [("USubst.Aterm_Some", "Aterm ?\<theta> = Aterm ?\<theta>",
     template_equation
      (template_app (template_hole 0, template_var 0),
       template_app (template_hole 0, template_var 0))),
    ("USubst.fst_pair", "fst (?a, ?b) = ?a",
     template_equation
      (template_app
        (template_hole 1,
         template_app
          (template_app (template_hole 0, template_var 1), template_var 0)),
       template_var 1)),
    ("USubst.snd_pair", "snd (?a, ?b) = ?b",
     template_equation
      (template_app
        (template_hole 1,
         template_app
          (template_app (template_hole 0, template_var 1), template_var 0)),
       template_var 0)),
    ("USubst.union_comm", "?A Un ?B = ?B Un ?A",
     template_equation
      (template_app
        (template_app (template_hole 0, template_var 1), template_var 0),
       template_app
        (template_app (template_hole 0, template_var 0), template_var 1))),
    ("USubst.usubst_taboos_mon",
     "?U <= fst (usubstappp ?\<sigma> ?U ?\<alpha>)",
     template_inequation
      (less_equals, template_var 2,
       template_app
        (template_hole 1,
         template_app
          (template_app
            (template_app (template_hole 0, template_var 1),
             template_var 2),
           template_var 0)))),
    ("USubst.repc_games", "Games (repc ?I ?f ?d) = Games ?I",
     template_equation
      (template_app
        (template_hole 1,
         template_app
          (template_app
            (template_app (template_hole 0, template_var 2),
             template_var 1),
           template_var 0)),
       template_app (template_hole 1, template_var 2))),
    ("USubst.repc_preds", "Preds (repc ?I ?f ?d) = Preds ?I",
     template_equation
      (template_app
        (template_hole 1,
         template_app
          (template_app
            (template_app (template_hole 0, template_var 2),
             template_var 1),
           template_var 0)),
       template_app (template_hole 1, template_var 2))),
    ("USubst.repc_funcs", "Funcs (repc ?I ?f ?d) = Funcs ?I",
     template_equation
      (template_app
        (template_hole 1,
         template_app
          (template_app
            (template_app (template_hole 0, template_var 2),
             template_var 1),
           template_var 0)),
       template_app (template_hole 1, template_var 2))),
    ("USubst.Noto_undef", "(Noto ?\<phi> = undeff) = (?\<phi> = undeff)",
     template_bimplication
      (template_equation
        (template_app (template_hole 1, template_var 0), template_hole 0),
       template_equation (template_var 0, template_hole 0))),
    ("USubst.Differentialo_undef",
     "(Differentialo ?\<theta> = undeft) = (?\<theta> = undeft)",
     template_bimplication
      (template_equation
        (template_app (template_hole 1, template_var 0), template_hole 0),
       template_equation (template_var 0, template_hole 0))),
    ("USubst.Dualo_undef",
     "(Dualo ?\<alpha> = undefg) = (?\<alpha> = undefg)",
     template_bimplication
      (template_equation
        (template_app (template_hole 1, template_var 0), template_hole 0),
       template_equation (template_var 0, template_hole 0))),
    ("USubst.Loopo_undef",
     "(Loopo ?\<alpha> = undefg) = (?\<alpha> = undefg)",
     template_bimplication
      (template_equation
        (template_app (template_hole 1, template_var 0), template_hole 0),
       template_equation (template_var 0, template_hole 0))),
    ("USubst.Testo_undef", "(Testo ?\<phi> = undefg) = (?\<phi> = undeff)",
     template_bimplication
      (template_equation
        (template_app (template_hole 3, template_var 0), template_hole 2),
       template_equation (template_var 0, template_hole 0))),
    ("USubst.Existso_undef",
     "(Existso ?x ?\<phi> = undeff) = (?\<phi> = undeff)",
     template_bimplication
      (template_equation
        (template_app
          (template_app (template_hole 1, template_var 1), template_var 0),
         template_hole 0),
       template_equation (template_var 0, template_hole 0))),
    ("USubst.Assigno_undef",
     "(Assigno ?x ?\<theta> = undefg) = (?\<theta> = undeft)",
     template_bimplication
      (template_equation
        (template_app
          (template_app (template_hole 3, template_var 1), template_var 0),
         template_hole 2),
       template_equation (template_var 0, template_hole 0))),
    ("USubst.ODEo_undef",
     "(ODEo ?x ?\<theta> = undefg) = (?\<theta> = undeft)",
     template_bimplication
      (template_equation
        (template_app
          (template_app (template_hole 3, template_var 1), template_var 0),
         template_hole 2),
       template_equation (template_var 0, template_hole 0))),
    ("USubst.undeff_equiv",
     "(?\<phi> ~= undeff) = (EX f. ?\<phi> = Afml f)",
     template_equation
      (template_app
        (template_hole 4,
         template_app
          (template_app (template_hole 3, template_var 0),
           template_hole 2)),
       template_app (template_hole 1, t_empty))),
    ("USubst.undeft_equiv",
     "(?\<theta> ~= undeft) = (EX t. ?\<theta> = Aterm t)",
     template_equation
      (template_app
        (template_hole 4,
         template_app
          (template_app (template_hole 3, template_var 0),
           template_hole 2)),
       template_app (template_hole 1, t_empty))),
    ("USubst.undefg_equiv",
     "(?\<alpha> ~= undefg) = (EX g. ?\<alpha> = Agame g)",
     template_equation
      (template_app
        (template_hole 4,
         template_app
          (template_app (template_hole 3, template_var 0),
           template_hole 2)),
       template_app (template_hole 1, t_empty))),
    ("USubst.Ando_undef",
     "(Ando ?\<phi> ?\<psi> = undeff) =
      (?\<phi> = undeff | ?\<psi> = undeff)",
     template_bimplication
      (template_equation
        (template_app
          (template_app (template_hole 2, template_var 1), template_var 0),
         template_hole 1),
       template_predicate
        (
           template_app
            (template_app
              (template_hole 0,
               template_app
                (template_app (template_hole 3, template_var 1),
                 template_hole 1)),
             template_app
              (template_app (template_hole 3, template_var 0),
               template_hole 1))
           ))),
    ("USubst.Diamondo_undef",
     "(Diamondo ?\<alpha> ?\<phi> = undeff) =
      (?\<alpha> = undefg | ?\<phi> = undeff)",
     template_bimplication
      (template_equation
        (template_app
          (template_app (template_hole 4, template_var 1), template_var 0),
         template_hole 3),
       template_predicate
        (
           template_app
            (template_app
              (template_hole 2,
               template_app
                (template_app (template_hole 1, template_var 1),
                 template_hole 0)),
             template_app
              (template_app (template_hole 5, template_var 0),
               template_hole 3))
           ))),
    ("USubst.Geqo_undef",
     "(Geqo ?\<theta> ?\<eta> = undeff) =
      (?\<theta> = undeft | ?\<eta> = undeft)",
     template_bimplication
      (template_equation
        (template_app
          (template_app (template_hole 4, template_var 1), template_var 0),
         template_hole 3),
       template_predicate
        (
           template_app
            (template_app
              (template_hole 2,
               template_app
                (template_app (template_hole 1, template_var 1),
                 template_hole 0)),
             template_app
              (template_app (template_hole 1, template_var 0),
               template_hole 0))
           ))),
    ("USubst.Pluso_undef",
     "(Pluso ?\<theta> ?\<eta> = undeft) =
      (?\<theta> = undeft | ?\<eta> = undeft)",
     template_bimplication
      (template_equation
        (template_app
          (template_app (template_hole 2, template_var 1), template_var 0),
         template_hole 1),
       template_predicate
        (
           template_app
            (template_app
              (template_hole 0,
               template_app
                (template_app (template_hole 3, template_var 1),
                 template_hole 1)),
             template_app
              (template_app (template_hole 3, template_var 0),
               template_hole 1))
           ))),
    ("USubst.Timeso_undef",
     "(Timeso ?\<theta> ?\<eta> = undeft) =
      (?\<theta> = undeft | ?\<eta> = undeft)",
     template_bimplication
      (template_equation
        (template_app
          (template_app (template_hole 2, template_var 1), template_var 0),
         template_hole 1),
       template_predicate
        (
           template_app
            (template_app
              (template_hole 0,
               template_app
                (template_app (template_hole 3, template_var 1),
                 template_hole 1)),
             template_app
              (template_app (template_hole 3, template_var 0),
               template_hole 1))
           ))),
    ("USubst.Choiceo_undef",
     "(Choiceo ?\<alpha> ?\<beta> = undefg) =
      (?\<alpha> = undefg | ?\<beta> = undefg)",
     template_bimplication
      (template_equation
        (template_app
          (template_app (template_hole 2, template_var 1), template_var 0),
         template_hole 1),
       template_predicate
        (
           template_app
            (template_app
              (template_hole 0,
               template_app
                (template_app (template_hole 3, template_var 1),
                 template_hole 1)),
             template_app
              (template_app (template_hole 3, template_var 0),
               template_hole 1))
           ))),
    ("USubst.Composeo_undef",
     "(Composeo ?\<alpha> ?\<beta> = undefg) =
      (?\<alpha> = undefg | ?\<beta> = undefg)",
     template_bimplication
      (template_equation
        (template_app
          (template_app (template_hole 2, template_var 1), template_var 0),
         template_hole 1),
       template_predicate
        (
           template_app
            (template_app
              (template_hole 0,
               template_app
                (template_app (template_hole 3, template_var 1),
                 template_hole 1)),
             template_app
              (template_app (template_hole 3, template_var 0),
               template_hole 1))
           ))),
    ("USubst.repc_consts",
     "Consts (repc ?I ?f ?d) ?c = (if ?c = ?f then ?d else Consts ?I ?c)",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_hole 3,
                template_app
                 (template_app
                   (template_app (template_hole 2, template_var 3),
                    template_var 2),
                  template_var 1)),
              template_var 0)
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_app
                (template_hole 1,
                 template_app
                  (template_app (template_hole 0, template_var 0),
                   template_var 2)),
               template_var 1),
             template_app
              (template_app (template_hole 3, template_var 3),
               template_var 0))
           ))),
    ("USubst.usubstappp_fst_mon",
     "?U <= ?V ==>
      fst (usubstappp ?\<sigma> ?U ?\<alpha>)
      <= fst (usubstappp ?\<sigma> ?V ?\<alpha>)",
     template_implication
      ([template_inequation (less_equals, template_var 3, template_var 2)],
       template_inequation
        (less_equals,
         template_app
          (template_hole 1,
           template_app
            (template_app
              (template_app (template_hole 0, template_var 1),
               template_var 3),
             template_var 0)),
         template_app
          (template_hole 1,
           template_app
            (template_app
              (template_app (template_hole 0, template_var 1),
               template_var 2),
             template_var 0))))),
    ("USubst.usubst_rule_sound",
     "[| usubstr ?\<sigma> ?R ~= None; locally_sound ?R |]
      ==> locally_sound (the (usubstr ?\<sigma> ?R))",
     template_implication
      ([template_negation
         (
            template_equation
             (template_app
               (template_app (template_hole 3, template_var 1),
                template_var 0),
              template_hole 2)
            ),
        template_predicate
         (template_app (template_hole 1, template_var 0))],
       template_predicate
        (
           template_app
            (template_hole 1,
             template_app
              (template_hole 0,
               template_app
                (template_app (template_hole 3, template_var 1),
                 template_var 0)))
           ))),
    ("USubst.usubstappp_dual",
     "usubstappp ?\<sigma> ?U ?\<alpha>^d =
      (fst (usubstappp ?\<sigma> ?U ?\<alpha>),
       Dualo (snd (usubstappp ?\<sigma> ?U ?\<alpha>)))",
     template_equation
      (template_app
        (template_app
          (template_app (template_hole 5, template_var 2), template_var 1),
         template_app (template_hole 4, template_var 0)),
       template_app
        (template_app
          (template_hole 3,
           template_app
            (template_hole 2,
             template_app
              (template_app
                (template_app (template_hole 5, template_var 2),
                 template_var 1),
               template_var 0))),
         template_app
          (template_hole 1,
           template_app
            (template_hole 0,
             template_app
              (template_app
                (template_app (template_hole 5, template_var 2),
                 template_var 1),
               template_var 0)))))),
    ("USubst.usubstr_length",
     "usubstr ?\<sigma> ?R ~= None ==>
      length (fst (the (usubstr ?\<sigma> ?R))) = length (fst ?R)",
     template_implication
      ([template_negation
         (
            template_equation
             (template_app
               (template_app (template_hole 5, template_var 1),
                template_var 0),
              template_hole 4)
            )],
       template_equation
        (template_app
          (template_hole 2,
           template_app
            (template_hole 1,
             template_app
              (template_hole 0,
               template_app
                (template_app (template_hole 5, template_var 1),
                 template_var 0)))),
         template_app
          (template_hole 2,
           template_app (template_hole 1, template_var 0))))),
    ("USubst.usubstappt_differential_conv",
     "usubstappt ?\<sigma> ?U (Differential ?\<theta>) ~= undeft ==>
      usubstappt ?\<sigma> Denotational_Semantics.allvars ?\<theta> ~=
      undeft",
     template_implication
      ([template_negation
         (
            template_equation
             (template_app
               (template_app
                 (template_app (template_hole 4, template_var 2),
                  template_var 1),
                template_app (template_hole 3, template_var 0)),
              template_hole 2)
            )],
       template_negation
        (
           template_equation
            (template_app
              (template_app
                (template_app (template_hole 4, template_var 2),
                 template_app (template_hole 1, t_empty)),
               template_var 0),
             template_hole 2)
           ))),
    ("USubst.usubst_sound",
     "[| usubsta ?\<sigma> ?\<phi> ~= undeff; valid ?\<phi> |]
      ==> valid (the (usubsta ?\<sigma> ?\<phi>))",
     template_implication
      ([template_negation
         (
            template_equation
             (template_app
               (template_app
                 (template_app (template_hole 4, template_var 1),
                  template_hole 3),
                template_var 0),
              template_hole 2)
            ),
        template_predicate
         (template_app (template_hole 1, template_var 0))],
       template_predicate
        (
           template_app
            (template_hole 1,
             template_app
              (template_hole 0,
               template_app
                (template_app
                  (template_app (template_hole 4, template_var 1),
                   template_hole 3),
                 template_var 0)))
           ))),
    ("USubst.adjoint_dotsubstt",
     "USubst.adjoint (dotsubstt ?\<theta>) ?I ?\<omega> =
      repc ?I dotid (term_sem ?I ?\<theta> ?\<omega>)",
     template_equation
      (template_app
        (template_app
          (template_app
            (template_hole 6,
             template_app (template_hole 5, template_var 2)),
           template_var 1),
         template_var 0),
       template_app
        (template_app
          (template_app (template_hole 4, template_var 1),
           template_app
            (template_app
              (template_app
                (template_app
                  (template_app
                    (template_app
                      (template_app
                        (template_app (template_hole 3, template_hole 2),
                         template_hole 1),
                       template_hole 1),
                     template_hole 1),
                   template_hole 2),
                 template_hole 1),
               template_hole 2),
             template_hole 2)),
         template_app
          (template_app
            (template_app (template_hole 0, template_var 1),
             template_var 2),
           template_var 0)))),
    ("USubst.adjoint_stays_mon",
     "mono
       (case SGames ?\<sigma> ?a of None => Games ?I ?a
        | Some r => game_sem ?I r)",
     template_predicate
      (
         template_app
          (template_hole 6,
           template_app
            (template_app
              (template_app
                (template_hole 5,
                 template_app
                  (template_app (template_hole 4, template_var 2),
                   template_var 1)),
               t_empty),
             template_app
              (template_app
                (template_app (template_hole 2, t_empty), template_var 0),
               template_var 1)))
         )),
    ("USubst.usubstappp_loop",
     "usubstappp ?\<sigma> ?U ?\<alpha>** =
      (fst (usubstappp ?\<sigma> ?U ?\<alpha>),
       Loopo
        (snd (usubstappp ?\<sigma> (fst (usubstappp ?\<sigma> ?U ?\<alpha>))
               ?\<alpha>)))",
     template_equation
      (template_app
        (template_app
          (template_app (template_hole 5, template_var 2), template_var 1),
         template_app (template_hole 4, template_var 0)),
       template_app
        (template_app
          (template_hole 3,
           template_app
            (template_hole 2,
             template_app
              (template_app
                (template_app (template_hole 5, template_var 2),
                 template_var 1),
               template_var 0))),
         template_app
          (template_hole 1,
           template_app
            (template_hole 0,
             template_app
              (template_app
                (template_app (template_hole 5, template_var 2),
                 template_app
                  (template_hole 2,
                   template_app
                    (template_app
                      (template_app (template_hole 5, template_var 2),
                       template_var 1),
                     template_var 0))),
               template_var 0)))))),
    ("USubst.usubstappf_antimon",
     "[| ?V <= ?U; usubstappf ?\<sigma> ?U ?\<phi> ~= undeff |]
      ==> usubstappf ?\<sigma> ?U ?\<phi> =
          usubstappf ?\<sigma> ?V ?\<phi>",
     template_implication
      ([template_inequation (less_equals, template_var 3, template_var 2),
        template_negation
         (
            template_equation
             (template_app
               (template_app
                 (template_app (template_hole 1, template_var 1),
                  template_var 2),
                template_var 0),
              template_hole 0)
            )],
       template_equation
        (template_app
          (template_app
            (template_app (template_hole 1, template_var 1),
             template_var 2),
           template_var 0),
         template_app
          (template_app
            (template_app (template_hole 1, template_var 1),
             template_var 3),
           template_var 0)))),
    ("USubst.usubstappt_antimon",
     "[| ?V <= ?U; usubstappt ?\<sigma> ?U ?\<theta> ~= undeft |]
      ==> usubstappt ?\<sigma> ?U ?\<theta> =
          usubstappt ?\<sigma> ?V ?\<theta>",
     template_implication
      ([template_inequation (less_equals, template_var 3, template_var 2),
        template_negation
         (
            template_equation
             (template_app
               (template_app
                 (template_app (template_hole 1, template_var 1),
                  template_var 2),
                template_var 0),
              template_hole 0)
            )],
       template_equation
        (template_app
          (template_app
            (template_app (template_hole 1, template_var 1),
             template_var 2),
           template_var 0),
         template_app
          (template_app
            (template_app (template_hole 1, template_var 1),
             template_var 3),
           template_var 0)))),
    ("USubst.adjoint_preds_skip",
     "SPreds ?\<sigma> ?p = undeff ==>
      Preds (USubst.adjoint ?\<sigma> ?I ?\<omega>) ?p = Preds ?I ?p",
     template_implication
      ([template_equation
         (template_app
           (template_app
             (template_app (template_hole 6, t_empty), template_var 3),
            template_var 2),
          template_hole 3)],
       template_equation
        (template_app
          (template_app
            (template_hole 1,
             template_app
              (template_app
                (template_app (template_hole 0, template_var 3),
                 template_var 1),
               template_var 0)),
           template_var 2),
         template_app
          (template_app (template_hole 1, template_var 1),
           template_var 2)))),
    ("USubst.adjoint_funcs_skip",
     "SFuncs ?\<sigma> ?f = undeft ==>
      Funcs (USubst.adjoint ?\<sigma> ?I ?\<omega>) ?f = Funcs ?I ?f",
     template_implication
      ([template_equation
         (template_app
           (template_app
             (template_app (template_hole 6, t_empty), template_var 3),
            template_var 2),
          template_hole 3)],
       template_equation
        (template_app
          (template_app
            (template_hole 1,
             template_app
              (template_app
                (template_app (template_hole 0, template_var 3),
                 template_var 1),
               template_var 0)),
           template_var 2),
         template_app
          (template_app (template_hole 1, template_var 1),
           template_var 2)))),
    ("USubst.adjoint_consts",
     "Consts (USubst.adjoint ?\<sigma> ?I ?\<omega>) ?f =
      term_sem ?I
       (case SConst ?\<sigma> ?f of None => Const ?f | Some r => r)
       ?\<omega>",
     template_equation
      (template_app
        (template_app
          (template_hole 7,
           template_app
            (template_app
              (template_app (template_hole 6, template_var 3),
               template_var 2),
             template_var 1)),
         template_var 0),
       template_app
        (template_app
          (template_app (template_hole 5, template_var 2),
           template_app
            (template_app
              (template_app
                (template_hole 4,
                 template_app (template_hole 3, template_var 0)),
               t_empty),
             template_app
              (template_app
                (template_app (template_hole 2, t_empty), template_var 3),
               template_var 0))),
         template_var 1))),
    ("USubst.usubst_taboos",
     "snd (usubstappp ?\<sigma> ?U ?\<alpha>) ~= undefg ==>
      ?U Un BVG (the (snd (usubstappp ?\<sigma> ?U ?\<alpha>)))
      <= fst (usubstappp ?\<sigma> ?U ?\<alpha>)",
     template_implication
      ([template_negation
         (
            template_equation
             (template_app
               (template_hole 7,
                template_app
                 (template_app
                   (template_app (template_hole 6, template_var 2),
                    template_var 1),
                  template_var 0)),
              template_hole 5)
            )],
       template_inequation
        (less_equals,
         template_app
          (template_app (template_hole 3, template_var 1),
           template_app
            (template_hole 2,
             template_app
              (template_hole 1,
               template_app
                (template_hole 7,
                 template_app
                  (template_app
                    (template_app (template_hole 6, template_var 2),
                     template_var 1),
                   template_var 0))))),
         template_app
          (template_hole 0,
           template_app
            (template_app
              (template_app (template_hole 6, template_var 2),
               template_var 1),
             template_var 0))))),
    ("USubst.usubstappf_geq_conv",
     "usubstappf ?\<sigma> ?U (Geq ?\<theta> ?\<eta>) ~= undeff ==>
      usubstappt ?\<sigma> ?U ?\<theta> ~= undeft &
      usubstappt ?\<sigma> ?U ?\<eta> ~= undeft",
     template_implication
      ([template_negation
         (
            template_equation
             (template_app
               (template_app
                 (template_app (template_hole 6, template_var 3),
                  template_var 2),
                template_app
                 (template_app (template_hole 5, template_var 1),
                  template_var 0)),
              template_hole 4)
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 3,
               template_app
                (template_hole 8,
                 template_app
                  (template_app
                    (template_hole 2,
                     template_app
                      (template_app
                        (template_app (template_hole 1, template_var 3),
                         template_var 2),
                       template_var 1)),
                   template_hole 0))),
             template_app
              (template_hole 8,
               template_app
                (template_app
                  (template_hole 2,
                   template_app
                    (template_app
                      (template_app (template_hole 1, template_var 3),
                       template_var 2),
                     template_var 0)),
                 template_hole 0)))
           ))),
    ("USubst.usubstappt_plus_conv",
     "usubstappt ?\<sigma> ?U (Plus ?\<theta> ?\<eta>) ~= undeft ==>
      usubstappt ?\<sigma> ?U ?\<theta> ~= undeft &
      usubstappt ?\<sigma> ?U ?\<eta> ~= undeft",
     template_implication
      ([template_negation
         (
            template_equation
             (template_app
               (template_app
                 (template_app (template_hole 3, template_var 3),
                  template_var 2),
                template_app
                 (template_app (template_hole 2, template_var 1),
                  template_var 0)),
              template_hole 1)
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 0,
               template_app
                (template_hole 5,
                 template_app
                  (template_app
                    (template_hole 4,
                     template_app
                      (template_app
                        (template_app (template_hole 3, template_var 3),
                         template_var 2),
                       template_var 1)),
                   template_hole 1))),
             template_app
              (template_hole 5,
               template_app
                (template_app
                  (template_hole 4,
                   template_app
                    (template_app
                      (template_app (template_hole 3, template_var 3),
                       template_var 2),
                     template_var 0)),
                 template_hole 1)))
           ))),
    ("USubst.usubstappt_times_conv",
     "usubstappt ?\<sigma> ?U (Times ?\<theta> ?\<eta>) ~= undeft ==>
      usubstappt ?\<sigma> ?U ?\<theta> ~= undeft &
      usubstappt ?\<sigma> ?U ?\<eta> ~= undeft",
     template_implication
      ([template_negation
         (
            template_equation
             (template_app
               (template_app
                 (template_app (template_hole 3, template_var 3),
                  template_var 2),
                template_app
                 (template_app (template_hole 2, template_var 1),
                  template_var 0)),
              template_hole 1)
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 0,
               template_app
                (template_hole 5,
                 template_app
                  (template_app
                    (template_hole 4,
                     template_app
                      (template_app
                        (template_app (template_hole 3, template_var 3),
                         template_var 2),
                       template_var 1)),
                   template_hole 1))),
             template_app
              (template_hole 5,
               template_app
                (template_app
                  (template_hole 4,
                   template_app
                    (template_app
                      (template_app (template_hole 3, template_var 3),
                       template_var 2),
                     template_var 0)),
                 template_hole 1)))
           ))),
    ("USubst.usubstappp_antimon",
     "[| ?V <= ?U; snd (usubstappp ?\<sigma> ?U ?\<alpha>) ~= undefg |]
      ==> snd (usubstappp ?\<sigma> ?U ?\<alpha>) =
          snd (usubstappp ?\<sigma> ?V ?\<alpha>)",
     template_implication
      ([template_inequation (less_equals, template_var 3, template_var 2),
        template_negation
         (
            template_equation
             (template_app
               (template_hole 2,
                template_app
                 (template_app
                   (template_app (template_hole 1, template_var 1),
                    template_var 2),
                  template_var 0)),
              template_hole 0)
            )],
       template_equation
        (template_app
          (template_hole 2,
           template_app
            (template_app
              (template_app (template_hole 1, template_var 1),
               template_var 2),
             template_var 0)),
         template_app
          (template_hole 2,
           template_app
            (template_app
              (template_app (template_hole 1, template_var 1),
               template_var 3),
             template_var 0))))),
    ("USubst.adjoint_games",
     "Games (USubst.adjoint ?\<sigma> ?I ?\<omega>) ?a =
      (case SGames ?\<sigma> ?a of None => Games ?I ?a
       | Some r => game_sem ?I r)",
     template_equation
      (template_app
        (template_app
          (template_hole 6,
           template_app
            (template_app
              (template_app (template_hole 5, template_var 3),
               template_var 2),
             template_var 1)),
         template_var 0),
       template_app
        (template_app
          (template_app
            (template_hole 4,
             template_app
              (template_app (template_hole 6, template_var 2),
               template_var 0)),
           t_empty),
         template_app
          (template_app
            (template_app (template_hole 2, t_empty), template_var 3),
           template_var 0)))),
    ("USubst.usubstappf_det",
     "[| usubstappf ?\<sigma> ?U ?\<phi> ~= undeff;
         usubstappf ?\<sigma> ?V ?\<phi> ~= undeff |]
      ==> usubstappf ?\<sigma> ?U ?\<phi> =
          usubstappf ?\<sigma> ?V ?\<phi>",
     template_implication
      ([template_negation
         (
            template_equation
             (template_app
               (template_app
                 (template_app (template_hole 1, template_var 3),
                  template_var 2),
                template_var 1),
              template_hole 0)
            ),
        template_negation
         (
            template_equation
             (template_app
               (template_app
                 (template_app (template_hole 1, template_var 3),
                  template_var 0),
                template_var 1),
              template_hole 0)
            )],
       template_equation
        (template_app
          (template_app
            (template_app (template_hole 1, template_var 3),
             template_var 2),
           template_var 1),
         template_app
          (template_app
            (template_app (template_hole 1, template_var 3),
             template_var 0),
           template_var 1)))),
    ("USubst.usubstappt_det",
     "[| usubstappt ?\<sigma> ?U ?\<theta> ~= undeft;
         usubstappt ?\<sigma> ?V ?\<theta> ~= undeft |]
      ==> usubstappt ?\<sigma> ?U ?\<theta> =
          usubstappt ?\<sigma> ?V ?\<theta>",
     template_implication
      ([template_negation
         (
            template_equation
             (template_app
               (template_app
                 (template_app (template_hole 1, template_var 3),
                  template_var 2),
                template_var 1),
              template_hole 0)
            ),
        template_negation
         (
            template_equation
             (template_app
               (template_app
                 (template_app (template_hole 1, template_var 3),
                  template_var 0),
                template_var 1),
              template_hole 0)
            )],
       template_equation
        (template_app
          (template_app
            (template_app (template_hole 1, template_var 3),
             template_var 2),
           template_var 1),
         template_app
          (template_app
            (template_app (template_hole 1, template_var 3),
             template_var 0),
           template_var 1)))),
    ("USubst.usubstr_union_undef",
     "(usubstr ?\<sigma> (?A @ ?B, ?C) ~= None) =
      (usubstr ?\<sigma> (?A, ?C) ~= None &
       usubstr ?\<sigma> (?B, ?C) ~= None)",
     template_bimplication
      (template_negation
        (
           template_equation
            (template_app
              (template_app (template_hole 4, template_var 3),
               template_app
                (template_app
                  (template_hole 3,
                   template_app
                    (template_app (template_hole 2, template_var 2),
                     template_var 1)),
                 template_var 0)),
             template_hole 1)
           ),
       template_predicate
        (
           template_app
            (template_app
              (template_hole 0,
               template_app
                (template_hole 6,
                 template_app
                  (template_app
                    (template_hole 5,
                     template_app
                      (template_app (template_hole 4, template_var 3),
                       template_app
                        (template_app (template_hole 3, template_var 2),
                         template_var 0))),
                   template_hole 1))),
             template_app
              (template_hole 6,
               template_app
                (template_app
                  (template_hole 5,
                   template_app
                    (template_app (template_hole 4, template_var 3),
                     template_app
                      (template_app (template_hole 3, template_var 1),
                       template_var 0))),
                 template_hole 1)))
           ))),
    ("USubst.usubstappp_game",
     "SGames ?\<sigma> ?a = Agame ?r ==>
      usubstappp ?\<sigma> ?U (Game ?a) = (?U Un BVG ?r, Agame ?r)",
     template_implication
      ([template_equation
         (template_app
           (template_app
             (template_app (template_hole 9, t_empty), template_var 3),
            template_var 2),
          template_app (template_hole 6, template_var 1))],
       template_equation
        (template_app
          (template_app
            (template_app (template_hole 4, template_var 3),
             template_var 0),
           template_app (template_hole 3, template_var 2)),
         template_app
          (template_app
            (template_hole 2,
             template_app
              (template_app (template_hole 1, template_var 0),
               template_app (template_hole 0, template_var 1))),
           template_app (template_hole 6, template_var 1))))),
    ("USubst.usubstappp_choice_conv",
     "snd (usubstappp ?\<sigma> ?U (?\<alpha> \<union>\<union> ?\<beta>)) ~=
      undefg ==>
      snd (usubstappp ?\<sigma> ?U ?\<alpha>) ~= undefg &
      snd (usubstappp ?\<sigma> ?U ?\<beta>) ~= undefg",
     template_implication
      ([template_negation
         (
            template_equation
             (template_app
               (template_hole 4,
                template_app
                 (template_app
                   (template_app (template_hole 3, template_var 3),
                    template_var 2),
                  template_app
                   (template_app (template_hole 2, template_var 1),
                    template_var 0))),
              template_hole 1)
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 0,
               template_app
                (template_hole 6,
                 template_app
                  (template_app
                    (template_hole 5,
                     template_app
                      (template_hole 4,
                       template_app
                        (template_app
                          (template_app (template_hole 3, template_var 3),
                           template_var 2),
                         template_var 1))),
                   template_hole 1))),
             template_app
              (template_hole 6,
               template_app
                (template_app
                  (template_hole 5,
                   template_app
                    (template_hole 4,
                     template_app
                      (template_app
                        (template_app (template_hole 3, template_var 3),
                         template_var 2),
                       template_var 0))),
                 template_hole 1)))
           ))),
    ("USubst.usubstr_union_undef2",
     "usubstr ?\<sigma> (?A @ ?B, ?C) ~= None ==>
      usubstr ?\<sigma> (?A, ?C) ~= None &
      usubstr ?\<sigma> (?B, ?C) ~= None",
     template_implication
      ([template_negation
         (
            template_equation
             (template_app
               (template_app (template_hole 4, template_var 3),
                template_app
                 (template_app
                   (template_hole 3,
                    template_app
                     (template_app (template_hole 2, template_var 2),
                      template_var 1)),
                  template_var 0)),
              template_hole 1)
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 0,
               template_app
                (template_hole 6,
                 template_app
                  (template_app
                    (template_hole 5,
                     template_app
                      (template_app (template_hole 4, template_var 3),
                       template_app
                        (template_app (template_hole 3, template_var 2),
                         template_var 0))),
                   template_hole 1))),
             template_app
              (template_hole 6,
               template_app
                (template_app
                  (template_hole 5,
                   template_app
                    (template_app (template_hole 4, template_var 3),
                     template_app
                      (template_app (template_hole 3, template_var 1),
                       template_var 0))),
                 template_hole 1)))
           ))),
    ("USubst.usubstr_cons_undef",
     "(usubstr ?\<sigma> (?A # ?B, ?C) ~= None) =
      (usubstr ?\<sigma> ([?A], ?C) ~= None &
       usubstr ?\<sigma> (?B, ?C) ~= None)",
     template_bimplication
      (template_negation
        (
           template_equation
            (template_app
              (template_app (template_hole 5, template_var 3),
               template_app
                (template_app
                  (template_hole 4,
                   template_app
                    (template_app (template_hole 3, template_var 2),
                     template_var 1)),
                 template_var 0)),
             template_hole 2)
           ),
       template_predicate
        (
           template_app
            (template_app
              (template_hole 1,
               template_app
                (template_hole 7,
                 template_app
                  (template_app
                    (template_hole 6,
                     template_app
                      (template_app (template_hole 5, template_var 3),
                       template_app
                        (template_app
                          (template_hole 4,
                           template_app
                            (template_app (template_hole 3, template_var 2),
                             template_hole 0)),
                         template_var 0))),
                   template_hole 2))),
             template_app
              (template_hole 7,
               template_app
                (template_app
                  (template_hole 6,
                   template_app
                    (template_app (template_hole 5, template_var 3),
                     template_app
                      (template_app (template_hole 4, template_var 1),
                       template_var 0))),
                 template_hole 2)))
           ))),
    ("USubst.usubstappp_choice",
     "usubstappp ?\<sigma> ?U (?\<alpha> \<union>\<union> ?\<beta>) =
      (fst (usubstappp ?\<sigma> ?U ?\<alpha>) Un
       fst (usubstappp ?\<sigma> ?U ?\<beta>),
       Choiceo (snd (usubstappp ?\<sigma> ?U ?\<alpha>))
        (snd (usubstappp ?\<sigma> ?U ?\<beta>)))",
     template_equation
      (template_app
        (template_app
          (template_app (template_hole 6, template_var 3), template_var 2),
         template_app
          (template_app (template_hole 5, template_var 1), template_var 0)),
       template_app
        (template_app
          (template_hole 4,
           template_app
            (template_app
              (template_hole 3,
               template_app
                (template_hole 2,
                 template_app
                  (template_app
                    (template_app (template_hole 6, template_var 3),
                     template_var 2),
                   template_var 1))),
             template_app
              (template_hole 2,
               template_app
                (template_app
                  (template_app (template_hole 6, template_var 3),
                   template_var 2),
                 template_var 0)))),
         template_app
          (template_app
            (template_hole 1,
             template_app
              (template_hole 0,
               template_app
                (template_app
                  (template_app (template_hole 6, template_var 3),
                   template_var 2),
                 template_var 1))),
           template_app
            (template_hole 0,
             template_app
              (template_app
                (template_app (template_hole 6, template_var 3),
                 template_var 2),
               template_var 0)))))),
    ("USubst.usubstappf_exists",
     "usubstappf ?\<sigma> ?U (Exists ?x ?\<phi>) ~= undeff ==>
      usubstappf ?\<sigma> ?U (Exists ?x ?\<phi>) =
      Afml (Exists ?x (the (usubstappf ?\<sigma> (?U Un {?x}) ?\<phi>)))",
     template_implication
      ([template_negation
         (
            template_equation
             (template_app
               (template_app
                 (template_app (template_hole 7, template_var 3),
                  template_var 2),
                template_app
                 (template_app (template_hole 6, template_var 1),
                  template_var 0)),
              template_hole 5)
            )],
       template_equation
        (template_app
          (template_app
            (template_app (template_hole 7, template_var 3),
             template_var 2),
           template_app
            (template_app (template_hole 6, template_var 1),
             template_var 0)),
         template_app
          (template_hole 4,
           template_app
            (template_app (template_hole 6, template_var 1),
             template_app
              (template_hole 3,
               template_app
                (template_app
                  (template_app (template_hole 7, template_var 3),
                   template_app
                    (template_app (template_hole 2, template_var 2),
                     template_app
                      (template_app (template_hole 1, template_var 1),
                       template_hole 0))),
                 template_var 0))))))),
    ("USubst.usubstappf_geqr",
     "usubstappf ?\<sigma> ?U (Geq ?\<theta> ?\<eta>) ~= undeff ==>
      usubstappf ?\<sigma> ?U (Geq ?\<theta> ?\<eta>) =
      Afml
       (Geq (the (usubstappt ?\<sigma> ?U ?\<theta>))
         (the (usubstappt ?\<sigma> ?U ?\<eta>)))",
     template_implication
      ([template_negation
         (
            template_equation
             (template_app
               (template_app
                 (template_app (template_hole 5, template_var 3),
                  template_var 2),
                template_app
                 (template_app (template_hole 4, template_var 1),
                  template_var 0)),
              template_hole 3)
            )],
       template_equation
        (template_app
          (template_app
            (template_app (template_hole 5, template_var 3),
             template_var 2),
           template_app
            (template_app (template_hole 4, template_var 1),
             template_var 0)),
         template_app
          (template_hole 2,
           template_app
            (template_app
              (template_hole 4,
               template_app
                (template_hole 1,
                 template_app
                  (template_app
                    (template_app (template_hole 0, template_var 3),
                     template_var 2),
                   template_var 1))),
             template_app
              (template_hole 1,
               template_app
                (template_app
                  (template_app (template_hole 0, template_var 3),
                   template_var 2),
                 template_var 0))))))),
    ("USubst.usappconst_simp",
     "[| SConst ?\<sigma> ?f = Aterm ?r; FVT ?r Int ?U = {} |]
      ==> usappconst ?\<sigma> ?U ?f = Aterm ?r",
     template_implication
      ([template_equation
         (template_app
           (template_app
             (template_app (template_hole 8, t_empty), template_var 3),
            template_var 2),
          template_app (template_hole 5, template_var 1)),
        template_equation
         (template_app
           (template_app
             (template_hole 3,
              template_app (template_hole 2, template_var 1)),
            template_var 0),
          template_hole 1)],
       template_equation
        (template_app
          (template_app
            (template_app (template_hole 0, template_var 3),
             template_var 0),
           template_var 2),
         template_app (template_hole 5, template_var 1)))),
    ("USubst.usubstr_cons_undef2",
     "usubstr ?\<sigma> (?A # ?B, ?C) ~= None ==>
      usubstr ?\<sigma> ([?A], ?C) ~= None &
      usubstr ?\<sigma> (?B, ?C) ~= None",
     template_implication
      ([template_negation
         (
            template_equation
             (template_app
               (template_app (template_hole 5, template_var 3),
                template_app
                 (template_app
                   (template_hole 4,
                    template_app
                     (template_app (template_hole 3, template_var 2),
                      template_var 1)),
                  template_var 0)),
              template_hole 2)
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 1,
               template_app
                (template_hole 7,
                 template_app
                  (template_app
                    (template_hole 6,
                     template_app
                      (template_app (template_hole 5, template_var 3),
                       template_app
                        (template_app
                          (template_hole 4,
                           template_app
                            (template_app (template_hole 3, template_var 2),
                             template_hole 0)),
                         template_var 0))),
                   template_hole 2))),
             template_app
              (template_hole 7,
               template_app
                (template_app
                  (template_hole 6,
                   template_app
                    (template_app (template_hole 5, template_var 3),
                     template_app
                      (template_app (template_hole 4, template_var 1),
                       template_var 0))),
                 template_hole 2)))
           ))),
    ("USubst.usubst_term",
     "[| Uvariation ?\<nu> ?\<omega> ?U;
         usubstappt ?\<sigma> ?U ?\<theta> ~= undeft |]
      ==> term_sem ?I (the (usubstappt ?\<sigma> ?U ?\<theta>)) ?\<nu> =
          term_sem (USubst.adjoint ?\<sigma> ?I ?\<omega>) ?\<theta>
           ?\<nu>",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app (template_hole 8, template_var 5),
                template_var 4),
              template_var 3)
            ),
        template_negation
         (
            template_equation
             (template_app
               (template_app
                 (template_app (template_hole 5, template_var 2),
                  template_var 3),
                template_var 1),
              template_hole 4)
            )],
       template_equation
        (template_app
          (template_app
            (template_app (template_hole 2, template_var 0),
             template_app
              (template_hole 1,
               template_app
                (template_app
                  (template_app (template_hole 5, template_var 2),
                   template_var 3),
                 template_var 1))),
           template_var 5),
         template_app
          (template_app
            (template_app
              (template_hole 2,
               template_app
                (template_app
                  (template_app (template_hole 0, template_var 2),
                   template_var 0),
                 template_var 4)),
             template_var 1),
           template_var 5)))),
    ("USubst.usubstappp_det",
     "[| snd (usubstappp ?\<sigma> ?U ?\<alpha>) ~= undefg;
         snd (usubstappp ?\<sigma> ?V ?\<alpha>) ~= undefg |]
      ==> snd (usubstappp ?\<sigma> ?U ?\<alpha>) =
          snd (usubstappp ?\<sigma> ?V ?\<alpha>)",
     template_implication
      ([template_negation
         (
            template_equation
             (template_app
               (template_hole 2,
                template_app
                 (template_app
                   (template_app (template_hole 1, template_var 3),
                    template_var 2),
                  template_var 1)),
              template_hole 0)
            ),
        template_negation
         (
            template_equation
             (template_app
               (template_hole 2,
                template_app
                 (template_app
                   (template_app (template_hole 1, template_var 3),
                    template_var 0),
                  template_var 1)),
              template_hole 0)
            )],
       template_equation
        (template_app
          (template_hole 2,
           template_app
            (template_app
              (template_app (template_hole 1, template_var 3),
               template_var 2),
             template_var 1)),
         template_app
          (template_hole 2,
           template_app
            (template_app
              (template_app (template_hole 1, template_var 3),
               template_var 0),
             template_var 1))))),
    ("USubst.usubstappt_const",
     "[| SConst ?\<sigma> ?f = Aterm ?r; FVT ?r Int ?U = {} |]
      ==> usubstappt ?\<sigma> ?U (Const ?f) = Aterm ?r",
     template_implication
      ([template_equation
         (template_app
           (template_app
             (template_app (template_hole 9, t_empty), template_var 3),
            template_var 2),
          template_app (template_hole 6, template_var 1)),
        template_equation
         (template_app
           (template_app
             (template_hole 4,
              template_app (template_hole 3, template_var 1)),
            template_var 0),
          template_hole 2)],
       template_equation
        (template_app
          (template_app
            (template_app (template_hole 1, template_var 3),
             template_var 0),
           template_app (template_hole 0, template_var 2)),
         template_app (template_hole 6, template_var 1)))),
    ("USubst.usubstappp_compose",
     "usubstappp ?\<sigma> ?U (?\<alpha> ;; ?\<beta>) =
      (fst (usubstappp ?\<sigma> (fst (usubstappp ?\<sigma> ?U ?\<alpha>))
             ?\<beta>),
       Composeo (snd (usubstappp ?\<sigma> ?U ?\<alpha>))
        (snd (usubstappp ?\<sigma> (fst (usubstappp ?\<sigma> ?U ?\<alpha>))
               ?\<beta>)))",
     template_equation
      (template_app
        (template_app
          (template_app (template_hole 5, template_var 3), template_var 2),
         template_app
          (template_app (template_hole 4, template_var 1), template_var 0)),
       template_app
        (template_app
          (template_hole 3,
           template_app
            (template_hole 2,
             template_app
              (template_app
                (template_app (template_hole 5, template_var 3),
                 template_app
                  (template_hole 2,
                   template_app
                    (template_app
                      (template_app (template_hole 5, template_var 3),
                       template_var 2),
                     template_var 1))),
               template_var 0))),
         template_app
          (template_app
            (template_hole 1,
             template_app
              (template_hole 0,
               template_app
                (template_app
                  (template_app (template_hole 5, template_var 3),
                   template_var 2),
                 template_var 1))),
           template_app
            (template_hole 0,
             template_app
              (template_app
                (template_app (template_hole 5, template_var 3),
                 template_app
                  (template_hole 2,
                   template_app
                    (template_app
                      (template_app (template_hole 5, template_var 3),
                       template_var 2),
                     template_var 1))),
               template_var 0)))))),
    ("USubst.usubstappp_loop_conv",
     "snd (usubstappp ?\<sigma> ?U ?\<alpha>**) ~= undefg ==>
      snd (usubstappp ?\<sigma> ?U ?\<alpha>) ~= undefg &
      snd (usubstappp ?\<sigma> (fst (usubstappp ?\<sigma> ?U ?\<alpha>))
            ?\<alpha>) ~=
      undefg",
     template_implication
      ([template_negation
         (
            template_equation
             (template_app
               (template_hole 5,
                template_app
                 (template_app
                   (template_app (template_hole 4, template_var 2),
                    template_var 1),
                  template_app (template_hole 3, template_var 0))),
              template_hole 2)
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 1,
               template_app
                (template_hole 7,
                 template_app
                  (template_app
                    (template_hole 6,
                     template_app
                      (template_hole 5,
                       template_app
                        (template_app
                          (template_app (template_hole 4, template_var 2),
                           template_var 1),
                         template_var 0))),
                   template_hole 2))),
             template_app
              (template_hole 7,
               template_app
                (template_app
                  (template_hole 6,
                   template_app
                    (template_hole 5,
                     template_app
                      (template_app
                        (template_app (template_hole 4, template_var 2),
                         template_app
                          (template_hole 0,
                           template_app
                            (template_app
                              (template_app
                                (template_hole 4, template_var 2),
                               template_var 1),
                             template_var 0))),
                       template_var 0))),
                 template_hole 2)))
           ))),
    ("USubst.usubstappf_pred2",
     "[| SPreds ?\<sigma> ?p = Afml ?r; FVF ?r Int ?U ~= {} |]
      ==> usubstappf ?\<sigma> ?U (Pred ?p ?\<theta>) = undeff",
     template_implication
      ([template_equation
         (template_app
           (template_app
             (template_app (template_hole 11, t_empty), template_var 4),
            template_var 3),
          template_app (template_hole 8, template_var 2)),
        template_negation
         (
            template_equation
             (template_app
               (template_app
                 (template_hole 5,
                  template_app (template_hole 4, template_var 2)),
                template_var 1),
              template_hole 3)
            )],
       template_equation
        (template_app
          (template_app
            (template_app (template_hole 2, template_var 4),
             template_var 1),
           template_app
            (template_app (template_hole 1, template_var 3),
             template_var 0)),
         template_hole 0))),
    ("USubst.usubstappt_func2",
     "[| SFuncs ?\<sigma> ?f = Aterm ?r; FVT ?r Int ?U ~= {} |]
      ==> usubstappt ?\<sigma> ?U (trm.Func ?f ?\<theta>) = undeft",
     template_implication
      ([template_equation
         (template_app
           (template_app
             (template_app (template_hole 11, t_empty), template_var 4),
            template_var 3),
          template_app (template_hole 8, template_var 2)),
        template_negation
         (
            template_equation
             (template_app
               (template_app
                 (template_hole 5,
                  template_app (template_hole 4, template_var 2)),
                template_var 1),
              template_hole 3)
            )],
       template_equation
        (template_app
          (template_app
            (template_app (template_hole 2, template_var 4),
             template_var 1),
           template_app
            (template_app (template_hole 1, template_var 3),
             template_var 0)),
         template_hole 0))),
    ("USubst.usubstr_conv",
     "usubstr ?\<sigma> ?R ~= None ==>
      usubstappf ?\<sigma> Denotational_Semantics.allvars (snd ?R) ~=
      undeff &
      (ALL \<phi>:set (fst ?R).
          usubstappf ?\<sigma> Denotational_Semantics.allvars \<phi> ~=
          undeff)",
     template_implication
      ([template_negation
         (
            template_equation
             (template_app
               (template_app (template_hole 11, template_var 1),
                template_var 0),
              template_hole 10)
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 9,
               template_app
                (template_hole 13,
                 template_app
                  (template_app
                    (template_hole 8,
                     template_app
                      (template_app
                        (template_app (template_hole 7, template_var 1),
                         template_app (template_hole 6, t_empty)),
                       template_app (template_hole 4, template_var 0))),
                   template_hole 3))),
             template_app
              (template_app
                (template_hole 2,
                 template_app
                  (template_hole 1,
                   template_app (template_hole 0, template_var 0))),
               t_empty))
           ))),
    ("USubst.usubst_fml",
     "[| Uvariation ?\<nu> ?\<omega> ?U;
         usubstappf ?\<sigma> ?U ?\<phi> ~= undeff |]
      ==> (?\<nu> : fml_sem ?I (the (usubstappf ?\<sigma> ?U ?\<phi>))) =
          (?\<nu>
           : fml_sem (USubst.adjoint ?\<sigma> ?I ?\<omega>) ?\<phi>)",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app (template_hole 9, template_var 5),
                template_var 4),
              template_var 3)
            ),
        template_negation
         (
            template_equation
             (template_app
               (template_app
                 (template_app (template_hole 6, template_var 2),
                  template_var 3),
                template_var 1),
              template_hole 5)
            )],
       template_equation
        (template_app
          (template_app (template_hole 3, template_var 5),
           template_app
            (template_app (template_hole 2, template_var 0),
             template_app
              (template_hole 1,
               template_app
                (template_app
                  (template_app (template_hole 6, template_var 2),
                   template_var 3),
                 template_var 1)))),
         template_app
          (template_app (template_hole 3, template_var 5),
           template_app
            (template_app
              (template_hole 2,
               template_app
                (template_app
                  (template_app (template_hole 0, template_var 2),
                   template_var 0),
                 template_var 4)),
             template_var 1))))),
    ("USubst.same_ODE_same_sol",
     "(!!\<nu>.
          Uvariation \<nu> (?F 0) {RVar ?x, DVar ?x} ==>
          term_sem ?I ?\<theta> \<nu> = term_sem ?J ?\<eta> \<nu>) ==>
      solves_ODE ?I ?F ?x ?\<theta> = solves_ODE ?J ?F ?x ?\<eta>",
     template_implication
      ([template_predicate (template_app (template_hole 11, t_empty))],
       template_equation
        (template_app
          (template_app
            (template_app
              (template_app (template_hole 0, template_var 3),
               template_var 5),
             template_var 4),
           template_var 2),
         template_app
          (template_app
            (template_app
              (template_app (template_hole 0, template_var 1),
               template_var 5),
             template_var 4),
           template_var 0)))),
    ("USubst.usubst_game",
     "[| Uvariation ?\<nu> ?\<omega> ?U;
         snd (usubstappp ?\<sigma> ?U ?\<alpha>) ~= undefg |]
      ==> (?\<nu>
           : game_sem ?I (the (snd (usubstappp ?\<sigma> ?U ?\<alpha>)))
              ?X) =
          (?\<nu>
           : game_sem (USubst.adjoint ?\<sigma> ?I ?\<omega>) ?\<alpha>
              ?X)",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app (template_hole 10, template_var 6),
                template_var 5),
              template_var 4)
            ),
        template_negation
         (
            template_equation
             (template_app
               (template_hole 7,
                template_app
                 (template_app
                   (template_app (template_hole 6, template_var 3),
                    template_var 4),
                  template_var 2)),
              template_hole 5)
            )],
       template_equation
        (template_app
          (template_app (template_hole 3, template_var 6),
           template_app
            (template_app
              (template_app (template_hole 2, template_var 1),
               template_app
                (template_hole 1,
                 template_app
                  (template_hole 7,
                   template_app
                    (template_app
                      (template_app (template_hole 6, template_var 3),
                       template_var 4),
                     template_var 2)))),
             template_var 0)),
         template_app
          (template_app (template_hole 3, template_var 6),
           template_app
            (template_app
              (template_app
                (template_hole 2,
                 template_app
                  (template_app
                    (template_app (template_hole 0, template_var 3),
                     template_var 1),
                   template_var 5)),
               template_var 2),
             template_var 0))))),
    ("USubst.usubstappf_geq",
     "[| usubstappt ?\<sigma> ?U ?\<theta> ~= undeft;
         usubstappt ?\<sigma> ?U ?\<eta> ~= undeft |]
      ==> usubstappf ?\<sigma> ?U (Geq ?\<theta> ?\<eta>) =
          Afml
           (Geq (the (usubstappt ?\<sigma> ?U ?\<theta>))
             (the (usubstappt ?\<sigma> ?U ?\<eta>)))",
     template_implication
      ([template_negation
         (
            template_equation
             (template_app
               (template_app
                 (template_app (template_hole 6, template_var 3),
                  template_var 2),
                template_var 1),
              template_hole 5)
            ),
        template_negation
         (
            template_equation
             (template_app
               (template_app
                 (template_app (template_hole 6, template_var 3),
                  template_var 2),
                template_var 0),
              template_hole 5)
            )],
       template_equation
        (template_app
          (template_app
            (template_app (template_hole 3, template_var 3),
             template_var 2),
           template_app
            (template_app (template_hole 2, template_var 1),
             template_var 0)),
         template_app
          (template_hole 1,
           template_app
            (template_app
              (template_hole 2,
               template_app
                (template_hole 0,
                 template_app
                  (template_app
                    (template_app (template_hole 6, template_var 3),
                     template_var 2),
                   template_var 1))),
             template_app
              (template_hole 0,
               template_app
                (template_app
                  (template_app (template_hole 6, template_var 3),
                   template_var 2),
                 template_var 0))))))),
    ("USubst.adjoint_funcs",
     "Funcs (USubst.adjoint ?\<sigma> ?I ?\<omega>) ?f =
      (case SFuncs ?\<sigma> ?f of None => Funcs ?I ?f
       | Some r => %d. term_sem (repc ?I dotid d) r ?\<omega>)",
     template_equation
      (template_app
        (template_app
          (template_hole 10,
           template_app
            (template_app
              (template_app (template_hole 9, template_var 3),
               template_var 2),
             template_var 1)),
         template_var 0),
       template_app
        (template_app
          (template_app
            (template_hole 8,
             template_app
              (template_app (template_hole 10, template_var 2),
               template_var 0)),
           t_empty),
         template_app
          (template_app
            (template_app (template_hole 2, t_empty), template_var 3),
           template_var 0)))),
    ("USubst.adjoint_funcs_match",
     "SFuncs ?\<sigma> ?f = Aterm ?r ==>
      Funcs (USubst.adjoint ?\<sigma> ?I ?\<omega>) ?f =
      (%d. term_sem (repc ?I dotid d) ?r ?\<omega>)",
     template_implication
      ([template_equation
         (template_app
           (template_app
             (template_app (template_hole 11, t_empty), template_var 4),
            template_var 3),
          template_app (template_hole 8, template_var 2))],
       template_equation
        (template_app
          (template_app
            (template_hole 6,
             template_app
              (template_app
                (template_app (template_hole 5, template_var 4),
                 template_var 1),
               template_var 0)),
           template_var 3),
         t_empty))),
    ("USubst.usubstr_nth",
     "[| usubstr ?\<sigma> ?R ~= None; 0 <= ?k; ?k < length (fst ?R) |]
      ==> fst (the (usubstr ?\<sigma> ?R)) ! ?k =
          the (usubstappf ?\<sigma> Denotational_Semantics.allvars
                (fst ?R ! ?k))",
     template_implication
      ([template_negation
         (
            template_equation
             (template_app
               (template_app (template_hole 13, template_var 2),
                template_var 1),
              template_hole 12)
            ),
        template_inequation (less_equals, template_hole 10, template_var 0),
        template_inequation
         (less_than, template_var 0,
          template_app
           (template_hole 8,
            template_app (template_hole 7, template_var 1)))],
       template_equation
        (template_app
          (template_app
            (template_hole 5,
             template_app
              (template_hole 7,
               template_app
                (template_hole 4,
                 template_app
                  (template_app (template_hole 13, template_var 2),
                   template_var 1)))),
           template_var 0),
         template_app
          (template_hole 3,
           template_app
            (template_app
              (template_app (template_hole 2, template_var 2),
               template_app (template_hole 1, t_empty)),
             template_app
              (template_app
                (template_hole 5,
                 template_app (template_hole 7, template_var 1)),
               template_var 0)))))),
    ("USubst.adjoint_preds",
     "Preds (USubst.adjoint ?\<sigma> ?I ?\<omega>) ?p =
      (case SPreds ?\<sigma> ?p of None => Preds ?I ?p
       | Some r => %d. ?\<omega> : fml_sem (repc ?I dotid d) r)",
     template_equation
      (template_app
        (template_app
          (template_hole 11,
           template_app
            (template_app
              (template_app (template_hole 10, template_var 3),
               template_var 2),
             template_var 1)),
         template_var 0),
       template_app
        (template_app
          (template_app
            (template_hole 9,
             template_app
              (template_app (template_hole 11, template_var 2),
               template_var 0)),
           t_empty),
         template_app
          (template_app
            (template_app (template_hole 2, t_empty), template_var 3),
           template_var 0)))),
    ("USubst.adjoint_preds_match",
     "SPreds ?\<sigma> ?p = Afml ?r ==>
      Preds (USubst.adjoint ?\<sigma> ?I ?\<omega>) ?p =
      (%d. ?\<omega> : fml_sem (repc ?I dotid d) ?r)",
     template_implication
      ([template_equation
         (template_app
           (template_app
             (template_app (template_hole 12, t_empty), template_var 4),
            template_var 3),
          template_app (template_hole 9, template_var 2))],
       template_equation
        (template_app
          (template_app
            (template_hole 7,
             template_app
              (template_app
                (template_app (template_hole 6, template_var 4),
                 template_var 1),
               template_var 0)),
           template_var 3),
         t_empty))),
    ("USubst.usubst_ode",
     "usubstappt ?\<sigma> {RVar ?x, DVar ?x} ?\<theta> ~= undeft ==>
      solves_ODE ?I ?F ?x
       (the (usubstappt ?\<sigma> {RVar ?x, DVar ?x} ?\<theta>)) =
      solves_ODE (USubst.adjoint ?\<sigma> ?I (?F 0)) ?F ?x ?\<theta>",
     template_implication
      ([template_negation
         (
            template_equation
             (template_app
               (template_app
                 (template_app (template_hole 10, template_var 4),
                  template_app
                   (template_app
                     (template_hole 9,
                      template_app (template_hole 8, template_var 3)),
                    template_app
                     (template_app
                       (template_hole 9,
                        template_app (template_hole 7, template_var 3)),
                      template_hole 6))),
                template_var 2),
              template_hole 5)
            )],
       template_equation
        (template_app
          (template_app
            (template_app
              (template_app (template_hole 3, template_var 1),
               template_var 0),
             template_var 3),
           template_app
            (template_hole 2,
             template_app
              (template_app
                (template_app (template_hole 10, template_var 4),
                 template_app
                  (template_app
                    (template_hole 9,
                     template_app (template_hole 8, template_var 3)),
                   template_app
                    (template_app
                      (template_hole 9,
                       template_app (template_hole 7, template_var 3)),
                     template_hole 6))),
               template_var 2))),
         template_app
          (template_app
            (template_app
              (template_app
                (template_hole 3,
                 template_app
                  (template_app
                    (template_app (template_hole 1, template_var 4),
                     template_var 1),
                   template_app (template_var 0, template_hole 0))),
               template_var 0),
             template_var 3),
           template_var 2)))),
    ("USubst.usappconst_conv",
     "usappconst ?\<sigma> ?U ?f ~= undeft ==>
      SConst ?\<sigma> ?f = undeft |
      (EX r. SConst ?\<sigma> ?f = Aterm r & FVT r Int ?U = {})",
     template_implication
      ([template_negation
         (
            template_equation
             (template_app
               (template_app
                 (template_app (template_hole 12, template_var 2),
                  template_var 1),
                template_var 0),
              template_hole 11)
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 10,
               template_app
                (template_app
                  (template_hole 13,
                   template_app
                    (template_app
                      (template_app (template_hole 9, t_empty),
                       template_var 2),
                     template_var 0)),
                 template_hole 11)),
             template_app (template_hole 6, t_empty))
           ))),
    ("USubst.usubstr_union",
     "usubstr ?\<sigma> (?A @ ?B, ?C) ~= None ==>
      the (usubstr ?\<sigma> (?A @ ?B, ?C)) =
      (fst (the (usubstr ?\<sigma> (?A, ?C))) @
       fst (the (usubstr ?\<sigma> (?B, ?C))),
       snd (the (usubstr ?\<sigma> (?A, ?C))))",
     template_implication
      ([template_negation
         (
            template_equation
             (template_app
               (template_app (template_hole 7, template_var 3),
                template_app
                 (template_app
                   (template_hole 6,
                    template_app
                     (template_app (template_hole 5, template_var 2),
                      template_var 1)),
                  template_var 0)),
              template_hole 4)
            )],
       template_equation
        (template_app
          (template_hole 2,
           template_app
            (template_app (template_hole 7, template_var 3),
             template_app
              (template_app
                (template_hole 6,
                 template_app
                  (template_app (template_hole 5, template_var 2),
                   template_var 1)),
               template_var 0))),
         template_app
          (template_app
            (template_hole 6,
             template_app
              (template_app
                (template_hole 5,
                 template_app
                  (template_hole 1,
                   template_app
                    (template_hole 2,
                     template_app
                      (template_app (template_hole 7, template_var 3),
                       template_app
                        (template_app (template_hole 6, template_var 2),
                         template_var 0))))),
               template_app
                (template_hole 1,
                 template_app
                  (template_hole 2,
                   template_app
                    (template_app (template_hole 7, template_var 3),
                     template_app
                      (template_app (template_hole 6, template_var 1),
                       template_var 0)))))),
           template_app
            (template_hole 0,
             template_app
              (template_hole 2,
               template_app
                (template_app (template_hole 7, template_var 3),
                 template_app
                  (template_app (template_hole 6, template_var 2),
                   template_var 0)))))))),
    ("USubst.usubstappf_pred",
     "[| SPreds ?\<sigma> ?p = Afml ?r; FVF ?r Int ?U = {};
         usubstappt ?\<sigma> ?U ?\<theta> = Aterm ?\<sigma>\<theta> |]
      ==> usubstappf ?\<sigma> ?U (Pred ?p ?\<theta>) =
          usubsta (dotsubstt ?\<sigma>\<theta>) ?r",
     template_implication
      ([template_equation
         (template_app
           (template_app
             (template_app (template_hole 13, t_empty), template_var 5),
            template_var 4),
          template_app (template_hole 10, template_var 3)),
        template_equation
         (template_app
           (template_app
             (template_hole 8,
              template_app (template_hole 7, template_var 3)),
            template_var 2),
          template_hole 6),
        template_equation
         (template_app
           (template_app
             (template_app (template_hole 4, template_var 5),
              template_var 2),
            template_var 1),
          template_app (template_hole 3, template_var 0))],
       template_equation
        (template_app
          (template_app
            (template_app (template_hole 2, template_var 5),
             template_var 2),
           template_app
            (template_app (template_hole 1, template_var 4),
             template_var 1)),
         template_app
          (template_app
            (template_app
              (template_hole 2,
               template_app (template_hole 0, template_var 0)),
             template_hole 6),
           template_var 3)))),
    ("USubst.usubstappt_func",
     "[| SFuncs ?\<sigma> ?f = Aterm ?r; FVT ?r Int ?U = {};
         usubstappt ?\<sigma> ?U ?\<theta> = Aterm ?\<sigma>\<theta> |]
      ==> usubstappt ?\<sigma> ?U (trm.Func ?f ?\<theta>) =
          usubstappt (dotsubstt ?\<sigma>\<theta>) {} ?r",
     template_implication
      ([template_equation
         (template_app
           (template_app
             (template_app (template_hole 10, t_empty), template_var 5),
            template_var 4),
          template_app (template_hole 7, template_var 3)),
        template_equation
         (template_app
           (template_app
             (template_hole 5,
              template_app (template_hole 4, template_var 3)),
            template_var 2),
          template_hole 3),
        template_equation
         (template_app
           (template_app
             (template_app (template_hole 2, template_var 5),
              template_var 2),
            template_var 1),
          template_app (template_hole 7, template_var 0))],
       template_equation
        (template_app
          (template_app
            (template_app (template_hole 2, template_var 5),
             template_var 2),
           template_app
            (template_app (template_hole 1, template_var 4),
             template_var 1)),
         template_app
          (template_app
            (template_app
              (template_hole 2,
               template_app (template_hole 0, template_var 0)),
             template_hole 3),
           template_var 3)))),
    ("USubst.usubstappt_const_conv",
     "usubstappt ?\<sigma> ?U (Const ?f) ~= undeft ==>
      SConst ?\<sigma> ?f = undeft |
      (EX r. SConst ?\<sigma> ?f = Aterm r & FVT r Int ?U = {})",
     template_implication
      ([template_negation
         (
            template_equation
             (template_app
               (template_app
                 (template_app (template_hole 13, template_var 2),
                  template_var 1),
                template_app (template_hole 12, template_var 0)),
              template_hole 11)
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 10,
               template_app
                (template_app
                  (template_hole 14,
                   template_app
                    (template_app
                      (template_app (template_hole 9, t_empty),
                       template_var 2),
                     template_var 0)),
                 template_hole 11)),
             template_app (template_hole 6, t_empty))
           ))),
    ("USubst.usubstr_cons",
     "usubstr ?\<sigma> (?A # ?B, ?C) ~= None ==>
      the (usubstr ?\<sigma> (?A # ?B, ?C)) =
      (the (usubstappf ?\<sigma> Denotational_Semantics.allvars ?A) #
       fst (the (usubstr ?\<sigma> (?B, ?C))),
       snd (the (usubstr ?\<sigma> ([?A], ?C))))",
     template_implication
      ([template_negation
         (
            template_equation
             (template_app
               (template_app (template_hole 12, template_var 3),
                template_app
                 (template_app
                   (template_hole 11,
                    template_app
                     (template_app (template_hole 10, template_var 2),
                      template_var 1)),
                  template_var 0)),
              template_hole 9)
            )],
       template_equation
        (template_app
          (template_hole 7,
           template_app
            (template_app (template_hole 12, template_var 3),
             template_app
              (template_app
                (template_hole 11,
                 template_app
                  (template_app (template_hole 10, template_var 2),
                   template_var 1)),
               template_var 0))),
         template_app
          (template_app
            (template_hole 11,
             template_app
              (template_app
                (template_hole 10,
                 template_app
                  (template_hole 6,
                   template_app
                    (template_app
                      (template_app (template_hole 5, template_var 3),
                       template_app (template_hole 4, t_empty)),
                     template_var 2))),
               template_app
                (template_hole 2,
                 template_app
                  (template_hole 7,
                   template_app
                    (template_app (template_hole 12, template_var 3),
                     template_app
                      (template_app (template_hole 11, template_var 1),
                       template_var 0)))))),
           template_app
            (template_hole 1,
             template_app
              (template_hole 7,
               template_app
                (template_app (template_hole 12, template_var 3),
                 template_app
                  (template_app
                    (template_hole 11,
                     template_app
                      (template_app (template_hole 10, template_var 2),
                       template_hole 0)),
                   template_var 0)))))))),
    ("USubst.usubstappf_pred_conv",
     "usubstappf ?\<sigma> ?U (Pred ?p ?\<theta>) ~= undeff ==>
      usubstappt ?\<sigma> ?U ?\<theta> ~= undeft &
      (SPreds ?\<sigma> ?p = undeff |
       (EX r. SPreds ?\<sigma> ?p = Afml r & FVF r Int ?U = {}))",
     template_implication
      ([template_negation
         (
            template_equation
             (template_app
               (template_app
                 (template_app (template_hole 16, template_var 3),
                  template_var 2),
                template_app
                 (template_app (template_hole 15, template_var 1),
                  template_var 0)),
              template_hole 14)
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 13,
               template_app
                (template_hole 18,
                 template_app
                  (template_app
                    (template_hole 12,
                     template_app
                      (template_app
                        (template_app (template_hole 11, template_var 3),
                         template_var 2),
                       template_var 0)),
                   template_hole 10))),
             template_app
              (template_app
                (template_hole 9,
                 template_app
                  (template_app
                    (template_hole 17,
                     template_app
                      (template_app
                        (template_app (template_hole 8, t_empty),
                         template_var 3),
                       template_var 1)),
                   template_hole 14)),
               template_app (template_hole 5, t_empty)))
           ))),
    ("USubst.usubstappt_func_conv",
     "usubstappt ?\<sigma> ?U (trm.Func ?f ?\<theta>) ~= undeft ==>
      usubstappt ?\<sigma> ?U ?\<theta> ~= undeft &
      (SFuncs ?\<sigma> ?f = undeft |
       (EX r. SFuncs ?\<sigma> ?f = Aterm r & FVT r Int ?U = {}))",
     template_implication
      ([template_negation
         (
            template_equation
             (template_app
               (template_app
                 (template_app (template_hole 13, template_var 3),
                  template_var 2),
                template_app
                 (template_app (template_hole 12, template_var 1),
                  template_var 0)),
              template_hole 11)
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 10,
               template_app
                (template_hole 15,
                 template_app
                  (template_app
                    (template_hole 14,
                     template_app
                      (template_app
                        (template_app (template_hole 13, template_var 3),
                         template_var 2),
                       template_var 0)),
                   template_hole 11))),
             template_app
              (template_app
                (template_hole 9,
                 template_app
                  (template_app
                    (template_hole 14,
                     template_app
                      (template_app
                        (template_app (template_hole 8, t_empty),
                         template_var 3),
                       template_var 1)),
                   template_hole 11)),
               template_app (template_hole 5, t_empty)))
           ))),
    ("USubst.usubst_ode_ext",
     "[| Uvariation (?F 0) ?\<omega> (?U Un {RVar ?x, DVar ?x});
         usubstappt ?\<sigma> (?U Un {RVar ?x, DVar ?x}) ?\<theta> ~=
         undeft |]
      ==> solves_ODE ?I ?F ?x
           (the (usubstappt ?\<sigma> (?U Un {RVar ?x, DVar ?x})
                  ?\<theta>)) =
          solves_ODE (USubst.adjoint ?\<sigma> ?I ?\<omega>) ?F ?x
           ?\<theta>",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_hole 14,
                  template_app (template_var 6, template_hole 13)),
                template_var 5),
              template_app
               (template_app (template_hole 12, template_var 4),
                template_app
                 (template_app
                   (template_hole 11,
                    template_app (template_hole 10, template_var 3)),
                  template_app
                   (template_app
                     (template_hole 11,
                      template_app (template_hole 9, template_var 3)),
                    template_hole 8))))
            ),
        template_negation
         (
            template_equation
             (template_app
               (template_app
                 (template_app (template_hole 5, template_var 2),
                  template_app
                   (template_app (template_hole 12, template_var 4),
                    template_app
                     (template_app
                       (template_hole 11,
                        template_app (template_hole 10, template_var 3)),
                      template_app
                       (template_app
                         (template_hole 11,
                          template_app (template_hole 9, template_var 3)),
                        template_hole 8)))),
                template_var 1),
              template_hole 4)
            )],
       template_equation
        (template_app
          (template_app
            (template_app
              (template_app (template_hole 2, template_var 0),
               template_var 6),
             template_var 3),
           template_app
            (template_hole 1,
             template_app
              (template_app
                (template_app (template_hole 5, template_var 2),
                 template_app
                  (template_app (template_hole 12, template_var 4),
                   template_app
                    (template_app
                      (template_hole 11,
                       template_app (template_hole 10, template_var 3)),
                     template_app
                      (template_app
                        (template_hole 11,
                         template_app (template_hole 9, template_var 3)),
                       template_hole 8)))),
               template_var 1))),
         template_app
          (template_app
            (template_app
              (template_app
                (template_hole 2,
                 template_app
                  (template_app
                    (template_app (template_hole 0, template_var 2),
                     template_var 0),
                   template_var 5)),
               template_var 6),
             template_var 3),
           template_var 1)))),
    ("USubst.usubst_ode_ext2",
     "[| usubstappt ?\<sigma> (?U Un {RVar ?x, DVar ?x}) ?\<theta> ~=
         undeft;
         Uvariation (?F 0) ?\<omega> (?U Un {RVar ?x, DVar ?x}) |]
      ==> solves_ODE ?I ?F ?x
           (the (usubstappt ?\<sigma> (?U Un {RVar ?x, DVar ?x})
                  ?\<theta>)) =
          solves_ODE (USubst.adjoint ?\<sigma> ?I ?\<omega>) ?F ?x
           ?\<theta>",
     template_implication
      ([template_negation
         (
            template_equation
             (template_app
               (template_app
                 (template_app (template_hole 12, template_var 6),
                  template_app
                   (template_app (template_hole 11, template_var 5),
                    template_app
                     (template_app
                       (template_hole 10,
                        template_app (template_hole 9, template_var 4)),
                      template_app
                       (template_app
                         (template_hole 10,
                          template_app (template_hole 8, template_var 4)),
                        template_hole 7)))),
                template_var 3),
              template_hole 6)
            ),
        template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_hole 5,
                  template_app (template_var 2, template_hole 4)),
                template_var 1),
              template_app
               (template_app (template_hole 11, template_var 5),
                template_app
                 (template_app
                   (template_hole 10,
                    template_app (template_hole 9, template_var 4)),
                  template_app
                   (template_app
                     (template_hole 10,
                      template_app (template_hole 8, template_var 4)),
                    template_hole 7))))
            )],
       template_equation
        (template_app
          (template_app
            (template_app
              (template_app (template_hole 2, template_var 0),
               template_var 2),
             template_var 4),
           template_app
            (template_hole 1,
             template_app
              (template_app
                (template_app (template_hole 12, template_var 6),
                 template_app
                  (template_app (template_hole 11, template_var 5),
                   template_app
                    (template_app
                      (template_hole 10,
                       template_app (template_hole 9, template_var 4)),
                     template_app
                      (template_app
                        (template_hole 10,
                         template_app (template_hole 8, template_var 4)),
                       template_hole 7)))),
               template_var 3))),
         template_app
          (template_app
            (template_app
              (template_app
                (template_hole 2,
                 template_app
                  (template_app
                    (template_app (template_hole 0, template_var 6),
                     template_var 0),
                   template_var 1)),
               template_var 2),
             template_var 4),
           template_var 3)))),
    ("USubst.usubst_game_loop",
     "[| Uvariation ?\<nu> ?\<omega> ?U;
         !!\<nu> \<omega> X.
            [| Uvariation \<nu> \<omega>
                (fst (usubstappp ?\<sigma> ?U ?\<alpha>));
               snd (usubstappp ?\<sigma>
                     (fst (usubstappp ?\<sigma> ?U ?\<alpha>)) ?\<alpha>) ~=
               undefg |]
            ==> (\<nu>
                 : game_sem ?I
                    (the (snd (usubstappp ?\<sigma>
                                (fst (usubstappp ?\<sigma> ?U ?\<alpha>))
                                ?\<alpha>)))
                    X) =
                (\<nu>
                 : game_sem (USubst.adjoint ?\<sigma> ?I \<omega>) ?\<alpha>
                    X);
         snd (usubstappp ?\<sigma> ?U ?\<alpha>**) ~= undefg |]
      ==> (?\<nu>
           : game_sem ?I (the (snd (usubstappp ?\<sigma> ?U ?\<alpha>**)))
              ?X) =
          (?\<nu>
           : game_sem (USubst.adjoint ?\<sigma> ?I ?\<omega>) ?\<alpha>**
              ?X)",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app (template_hole 14, template_var 6),
                template_var 5),
              template_var 4)
            ),
        template_predicate (template_app (template_hole 13, t_empty)),
        template_negation
         (
            template_equation
             (template_app
               (template_hole 7,
                template_app
                 (template_app
                   (template_app (template_hole 10, template_var 3),
                    template_var 4),
                  template_app (template_hole 0, template_var 2))),
              template_hole 6)
            )],
       template_equation
        (template_app
          (template_app (template_hole 4, template_var 6),
           template_app
            (template_app
              (template_app (template_hole 3, template_var 1),
               template_app
                (template_hole 2,
                 template_app
                  (template_hole 7,
                   template_app
                    (template_app
                      (template_app (template_hole 10, template_var 3),
                       template_var 4),
                     template_app (template_hole 0, template_var 2))))),
             template_var 0)),
         template_app
          (template_app (template_hole 4, template_var 6),
           template_app
            (template_app
              (template_app
                (template_hole 3,
                 template_app
                  (template_app
                    (template_app (template_hole 1, template_var 3),
                     template_var 1),
                   template_var 5)),
               template_app (template_hole 0, template_var 2)),
             template_var 0))))),
    ("USubst.usubstappt_induct",
     "[| !!\<sigma> U x. ?P \<sigma> U (Var x);
         !!\<sigma> U r. ?P \<sigma> U (Number r);
         !!\<sigma> U f. ?P \<sigma> U (Const f);
         !!\<sigma> U f \<theta>.
            [| ?P \<sigma> U \<theta>;
               !!x2 x2a.
                  [| usubstappt \<sigma> U \<theta> = Aterm x2;
                     SFuncs \<sigma> f = Aterm x2a; FVT x2a Int U = {} |]
                  ==> ?P (dotsubstt x2) {} x2a |]
            ==> ?P \<sigma> U (trm.Func f \<theta>);
         !!\<sigma> U \<theta> \<eta>.
            [| ?P \<sigma> U \<theta>; ?P \<sigma> U \<eta> |]
            ==> ?P \<sigma> U (Plus \<theta> \<eta>);
         !!\<sigma> U \<theta> \<eta>.
            [| ?P \<sigma> U \<theta>; ?P \<sigma> U \<eta> |]
            ==> ?P \<sigma> U (Times \<theta> \<eta>);
         !!\<sigma> U \<theta>.
            ?P \<sigma> Denotational_Semantics.allvars \<theta> ==>
            ?P \<sigma> U (Differential \<theta>) |]
      ==> ?P ?a0.0 ?a1.0 ?a2.0",
     template_implication
      ([template_predicate (template_app (template_hole 26, t_empty)),
        template_predicate (template_app (template_hole 26, t_empty)),
        template_predicate (template_app (template_hole 26, t_empty)),
        template_predicate (template_app (template_hole 26, t_empty)),
        template_predicate (template_app (template_hole 26, t_empty)),
        template_predicate (template_app (template_hole 26, t_empty)),
        template_predicate (template_app (template_hole 26, t_empty))],
       template_predicate
        (
           template_app
            (template_app
              (template_app (template_var 3, template_var 2),
               template_var 1),
             template_var 0)
           ))),
    ("USubst.usubstappfp_induct",
     "[| !!\<sigma> U p \<theta>.
            (!!x2 x2a.
                [| usubstappt \<sigma> U \<theta> = Aterm x2;
                   SPreds \<sigma> p = Afml x2a; FVF x2a Int U = {} |]
                ==> ?P (dotsubstt x2) {} x2a) ==>
            ?P \<sigma> U (Pred p \<theta>);
         !!\<sigma> U \<theta> \<eta>. ?P \<sigma> U (Geq \<theta> \<eta>);
         !!\<sigma> U \<phi>.
            ?P \<sigma> U \<phi> ==> ?P \<sigma> U (! \<phi>);
         !!\<sigma> U \<phi> \<psi>.
            [| ?P \<sigma> U \<phi>; ?P \<sigma> U \<psi> |]
            ==> ?P \<sigma> U (\<phi> && \<psi>);
         !!\<sigma> U x \<phi>.
            ?P \<sigma> (U Un {x}) \<phi> ==>
            ?P \<sigma> U (Exists x \<phi>);
         !!\<sigma> U \<alpha> \<phi>.
            [| ?Q \<sigma> U \<alpha>;
               !!x. x = usubstappp \<sigma> U \<alpha> ==>
                    ?P \<sigma> (fst x) \<phi> |]
            ==> ?P \<sigma> U (\<langle> \<alpha> \<rangle> \<phi>);
         !!\<sigma> U a. ?Q \<sigma> U (Game a);
         !!\<sigma> U x \<theta>. ?Q \<sigma> U (x := \<theta>);
         !!\<sigma> U \<phi>.
            ?P \<sigma> U \<phi> ==> ?Q \<sigma> U (? \<phi>);
         !!\<sigma> U \<alpha> \<beta>.
            [| ?Q \<sigma> U \<alpha>;
               !!x. x = usubstappp \<sigma> U \<alpha> ==>
                    ?Q \<sigma> U \<beta> |]
            ==> ?Q \<sigma> U (\<alpha> \<union>\<union> \<beta>);
         !!\<sigma> U \<alpha> \<beta>.
            [| ?Q \<sigma> U \<alpha>;
               !!x. x = usubstappp \<sigma> U \<alpha> ==>
                    ?Q \<sigma> (fst x) \<beta> |]
            ==> ?Q \<sigma> U (\<alpha> ;; \<beta>);
         !!\<sigma> U \<alpha>.
            [| ?Q \<sigma> U \<alpha>;
               !!x. x = fst (usubstappp \<sigma> U \<alpha>) ==>
                    ?Q \<sigma> x \<alpha> |]
            ==> ?Q \<sigma> U \<alpha>**;
         !!\<sigma> U \<alpha>.
            ?Q \<sigma> U \<alpha> ==> ?Q \<sigma> U \<alpha>^d;
         !!\<sigma> U x \<theta>. ?Q \<sigma> U (ODE x \<theta>) |]
      ==> ?P ?a0.0 ?a1.0 ?a2.0",
     template_implication
      ([template_predicate (template_app (template_hole 40, t_empty)),
        template_predicate (template_app (template_hole 40, t_empty)),
        template_predicate (template_app (template_hole 40, t_empty)),
        template_predicate (template_app (template_hole 40, t_empty)),
        template_predicate (template_app (template_hole 40, t_empty)),
        template_predicate (template_app (template_hole 40, t_empty)),
        template_predicate (template_app (template_hole 40, t_empty)),
        template_predicate (template_app (template_hole 40, t_empty)),
        template_predicate (template_app (template_hole 40, t_empty)),
        template_predicate (template_app (template_hole 40, t_empty)),
        template_predicate (template_app (template_hole 40, t_empty)),
        template_predicate (template_app (template_hole 40, t_empty)),
        template_predicate (template_app (template_hole 40, t_empty)),
        template_predicate (template_app (template_hole 40, t_empty))],
       template_predicate
        (
           template_app
            (template_app
              (template_app (template_var 4, template_var 2),
               template_var 1),
             template_var 0)
           ))),
    ("USubst.usubstappfp_induct",
     "[| !!\<sigma> U p \<theta>.
            (!!x2 x2a.
                [| usubstappt \<sigma> U \<theta> = Aterm x2;
                   SPreds \<sigma> p = Afml x2a; FVF x2a Int U = {} |]
                ==> ?P (dotsubstt x2) {} x2a) ==>
            ?P \<sigma> U (Pred p \<theta>);
         !!\<sigma> U \<theta> \<eta>. ?P \<sigma> U (Geq \<theta> \<eta>);
         !!\<sigma> U \<phi>.
            ?P \<sigma> U \<phi> ==> ?P \<sigma> U (! \<phi>);
         !!\<sigma> U \<phi> \<psi>.
            [| ?P \<sigma> U \<phi>; ?P \<sigma> U \<psi> |]
            ==> ?P \<sigma> U (\<phi> && \<psi>);
         !!\<sigma> U x \<phi>.
            ?P \<sigma> (U Un {x}) \<phi> ==>
            ?P \<sigma> U (Exists x \<phi>);
         !!\<sigma> U \<alpha> \<phi>.
            [| ?Q \<sigma> U \<alpha>;
               !!x. x = usubstappp \<sigma> U \<alpha> ==>
                    ?P \<sigma> (fst x) \<phi> |]
            ==> ?P \<sigma> U (\<langle> \<alpha> \<rangle> \<phi>);
         !!\<sigma> U a. ?Q \<sigma> U (Game a);
         !!\<sigma> U x \<theta>. ?Q \<sigma> U (x := \<theta>);
         !!\<sigma> U \<phi>.
            ?P \<sigma> U \<phi> ==> ?Q \<sigma> U (? \<phi>);
         !!\<sigma> U \<alpha> \<beta>.
            [| ?Q \<sigma> U \<alpha>;
               !!x. x = usubstappp \<sigma> U \<alpha> ==>
                    ?Q \<sigma> U \<beta> |]
            ==> ?Q \<sigma> U (\<alpha> \<union>\<union> \<beta>);
         !!\<sigma> U \<alpha> \<beta>.
            [| ?Q \<sigma> U \<alpha>;
               !!x. x = usubstappp \<sigma> U \<alpha> ==>
                    ?Q \<sigma> (fst x) \<beta> |]
            ==> ?Q \<sigma> U (\<alpha> ;; \<beta>);
         !!\<sigma> U \<alpha>.
            [| ?Q \<sigma> U \<alpha>;
               !!x. x = fst (usubstappp \<sigma> U \<alpha>) ==>
                    ?Q \<sigma> x \<alpha> |]
            ==> ?Q \<sigma> U \<alpha>**;
         !!\<sigma> U \<alpha>.
            ?Q \<sigma> U \<alpha> ==> ?Q \<sigma> U \<alpha>^d;
         !!\<sigma> U x \<theta>. ?Q \<sigma> U (ODE x \<theta>) |]
      ==> ?Q ?a3.0 ?a4.0 ?a5.0",
     template_implication
      ([template_predicate (template_app (template_hole 40, t_empty)),
        template_predicate (template_app (template_hole 40, t_empty)),
        template_predicate (template_app (template_hole 40, t_empty)),
        template_predicate (template_app (template_hole 40, t_empty)),
        template_predicate (template_app (template_hole 40, t_empty)),
        template_predicate (template_app (template_hole 40, t_empty)),
        template_predicate (template_app (template_hole 40, t_empty)),
        template_predicate (template_app (template_hole 40, t_empty)),
        template_predicate (template_app (template_hole 40, t_empty)),
        template_predicate (template_app (template_hole 40, t_empty)),
        template_predicate (template_app (template_hole 40, t_empty)),
        template_predicate (template_app (template_hole 40, t_empty)),
        template_predicate (template_app (template_hole 40, t_empty)),
        template_predicate (template_app (template_hole 40, t_empty))],
       template_predicate
        (
           template_app
            (template_app
              (template_app (template_var 3, template_var 2),
               template_var 1),
             template_var 0)
           )))]
