   [("Coincidence.Bignorabimus_finite", "finite (Bignorabimus ?\<alpha>)",
     template_predicate
      (
         template_app
          (template_hole 1, template_app (template_hole 0, template_var 0))
         )),
    ("Coincidence.Cignorabimus_finite",
     "finite (Cignorabimus ?\<alpha> ?V)",
     template_predicate
      (
         template_app
          (template_hole 1,
           template_app
            (template_app (template_hole 0, template_var 1),
             template_var 0))
         )),
    ("Coincidence.Bignorabimus_empty", "{} : Bignorabimus ?\<alpha>",
     template_predicate
      (
         template_app
          (template_app (template_hole 2, template_hole 1),
           template_app (template_hole 0, template_var 0))
         )),
    ("Coincidence.BVG_test", "BVG (? ?\<phi>) = {}",
     template_equation
      (template_app
        (template_hole 2, template_app (template_hole 1, template_var 0)),
       template_hole 0)),
    ("Coincidence.restrictto_extends", "?X <= restrictto ?X ?V",
     template_inequation
      (less_equals, template_var 1,
       template_app
        (template_app (template_hole 0, template_var 1), template_var 0))),
    ("Coincidence.Cignorabimus_empty", "{} : Cignorabimus ?\<alpha> ?V",
     template_predicate
      (
         template_app
          (template_app (template_hole 2, template_hole 1),
           template_app
            (template_app (template_hole 0, template_var 1),
             template_var 0))
         )),
    ("Coincidence.stateinterpol_empty",
     "stateinterpol ?\<nu> ?\<omega> {} = ?\<omega>",
     template_equation
      (template_app
        (template_app
          (template_app (template_hole 1, template_var 1), template_var 0),
         template_hole 0),
       template_var 0)),
    ("Coincidence.selectlike_empty", "selectlike ?X ?\<nu> {} = ?X",
     template_equation
      (template_app
        (template_app
          (template_app (template_hole 1, template_var 1), template_var 0),
         template_hole 0),
       template_var 1)),
    ("Coincidence.selectlike_shrinks", "selectlike ?X ?\<nu> ?V <= ?X",
     template_inequation
      (less_equals,
       template_app
        (template_app
          (template_app (template_hole 0, template_var 2), template_var 1),
         template_var 0),
       template_var 2)),
    ("Coincidence.BVG_dual", "BVG ?\<alpha>^d <= BVG ?\<alpha>",
     template_inequation
      (less_equals,
       template_app
        (template_hole 1, template_app (template_hole 0, template_var 0)),
       template_app (template_hole 1, template_var 0))),
    ("Coincidence.BVG_loop", "BVG ?\<alpha>** <= BVG ?\<alpha>",
     template_inequation
      (less_equals,
       template_app
        (template_hole 1, template_app (template_hole 0, template_var 0)),
       template_app (template_hole 1, template_var 0))),
    ("Coincidence.Vagree_stateinterpol",
     "Vagree (stateinterpol ?\<nu> ?\<omega> ?S) ?\<nu> ?S",
     template_predicate
      (
         template_app
          (template_app
            (template_app
              (template_hole 1,
               template_app
                (template_app
                  (template_app (template_hole 0, template_var 2),
                   template_var 1),
                 template_var 0)),
             template_var 2),
           template_var 0)
         )),
    ("Coincidence.stateinterpol_diff",
     "stateinterpol ?\<nu> ?\<omega> (statediff ?\<nu> ?\<omega>) = ?\<nu>",
     template_equation
      (template_app
        (template_app
          (template_app (template_hole 1, template_var 1), template_var 0),
         template_app
          (template_app (template_hole 0, template_var 1), template_var 0)),
       template_var 1)),
    ("Coincidence.Union_insert",
     "\<Union> (insert ?x ?S) = ?x Un \<Union> ?S",
     template_equation
      (template_app
        (template_hole 2,
         template_app
          (template_app (template_hole 1, template_var 1), template_var 0)),
       template_app
        (template_app (template_hole 0, template_var 1),
         template_app (template_hole 2, template_var 0)))),
    ("Coincidence.selectlike_self",
     "(?\<nu> : selectlike ?X ?\<nu> ?V) = (?\<nu> : ?X)",
     template_equation
      (template_app
        (template_app (template_hole 1, template_var 2),
         template_app
          (template_app
            (template_app (template_hole 0, template_var 1),
             template_var 2),
           template_var 0)),
       template_app
        (template_app (template_hole 1, template_var 2), template_var 1))),
    ("Coincidence.BVG_choice",
     "BVG (?\<alpha> \<union>\<union> ?\<beta>)
      <= BVG ?\<alpha> Un BVG ?\<beta>",
     template_inequation
      (less_equals,
       template_app
        (template_hole 2,
         template_app
          (template_app (template_hole 1, template_var 1), template_var 0)),
       template_app
        (template_app
          (template_hole 0, template_app (template_hole 2, template_var 1)),
         template_app (template_hole 2, template_var 0)))),
    ("Coincidence.BVG_compose",
     "BVG (?\<alpha> ;; ?\<beta>) <= BVG ?\<alpha> Un BVG ?\<beta>",
     template_inequation
      (less_equals,
       template_app
        (template_hole 2,
         template_app
          (template_app (template_hole 1, template_var 1), template_var 0)),
       template_app
        (template_app
          (template_hole 0, template_app (template_hole 2, template_var 1)),
         template_app (template_hole 2, template_var 0)))),
    ("Coincidence.BVG_equiv",
     "game_equiv ?\<alpha> ?\<beta> ==> BVG ?\<alpha> = BVG ?\<beta>",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 2, template_var 1),
              template_var 0)
            )],
       template_equation
        (template_app (template_hole 0, template_var 1),
         template_app (template_hole 0, template_var 0)))),
    ("Coincidence.restrictto_compose",
     "restrictto (restrictto ?X ?V) ?W = restrictto ?X (?V Int ?W)",
     template_equation
      (template_app
        (template_app
          (template_hole 1,
           template_app
            (template_app (template_hole 1, template_var 2),
             template_var 1)),
         template_var 0),
       template_app
        (template_app (template_hole 1, template_var 2),
         template_app
          (template_app (template_hole 0, template_var 1),
           template_var 0)))),
    ("Coincidence.selectlike_complement",
     "selectlike (- ?X) ?\<nu> ?V <= - selectlike ?X ?\<nu> ?V",
     template_inequation
      (less_equals,
       template_app
        (template_app
          (template_app
            (template_hole 1,
             template_app (template_hole 0, template_var 2)),
           template_var 1),
         template_var 0),
       template_app
        (template_hole 0,
         template_app
          (template_app
            (template_app (template_hole 1, template_var 2),
             template_var 1),
           template_var 0)))),
    ("Coincidence.restrictto_empty",
     "?X ~= {} ==> restrictto ?X {} = worlds",
     template_implication
      ([template_negation
         (template_equation (template_var 0, template_hole 3))],
       template_equation
        (template_app
          (template_app (template_hole 2, template_var 0), template_hole 1),
         template_hole 0))),
    ("Coincidence.Bignorabimus_single",
     "game_sem ?I ?\<alpha> (selectlike ?X ?\<omega> ?M)
      <= game_sem ?I ?\<alpha> ?X",
     template_inequation
      (less_equals,
       template_app
        (template_app
          (template_app (template_hole 1, template_var 4), template_var 3),
         template_app
          (template_app
            (template_app (template_hole 0, template_var 2),
             template_var 1),
           template_var 0)),
       template_app
        (template_app
          (template_app (template_hole 1, template_var 4), template_var 3),
         template_var 2))),
    ("Coincidence.BVG_ODE", "BVG (ODE ?x ?\<theta>) <= {RVar ?x, DVar ?x}",
     template_inequation
      (less_equals,
       template_app
        (template_hole 5,
         template_app
          (template_app (template_hole 4, template_var 1), template_var 0)),
       template_app
        (template_app
          (template_hole 3, template_app (template_hole 2, template_var 1)),
         template_app
          (template_app
            (template_hole 3,
             template_app (template_hole 1, template_var 1)),
           template_hole 0)))),
    ("Coincidence.restrictto_antimon",
     "?V <= ?W ==> restrictto ?X ?W <= restrictto ?X ?V",
     template_implication
      ([template_inequation (less_equals, template_var 2, template_var 1)],
       template_inequation
        (less_equals,
         template_app
          (template_app (template_hole 0, template_var 0), template_var 1),
         template_app
          (template_app (template_hole 0, template_var 0),
           template_var 2)))),
    ("Coincidence.Vagree_statediff",
     "Vagree ?\<omega> ?\<omega>' ?S ==>
      statediff ?\<omega> ?\<omega>' <= - ?S",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app (template_hole 3, template_var 2),
                template_var 1),
              template_var 0)
            )],
       template_inequation
        (less_equals,
         template_app
          (template_app (template_hole 1, template_var 2), template_var 1),
         template_app (template_hole 0, template_var 0)))),
    ("Coincidence.union_or", "(?c : ?A Un ?B) = (?c : ?A | ?c : ?B)",
     template_equation
      (template_app
        (template_app (template_hole 2, template_var 2),
         template_app
          (template_app (template_hole 1, template_var 1), template_var 0)),
       template_app
        (template_app
          (template_hole 0,
           template_app
            (template_app (template_hole 2, template_var 2),
             template_var 1)),
         template_app
          (template_app (template_hole 2, template_var 2),
           template_var 0)))),
    ("Coincidence.stateinterpol_left",
     "?x : ?S ==> stateinterpol ?\<nu> ?\<omega> ?S ?x = ?\<nu> ?x",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 2, template_var 3),
              template_var 2)
            )],
       template_equation
        (template_app
          (template_app
            (template_app
              (template_app (template_hole 0, template_var 1),
               template_var 0),
             template_var 2),
           template_var 3),
         template_app (template_var 1, template_var 3)))),
    ("Coincidence.BVG_assign_other",
     "?x ~= ?y ==> ?y ~: BVG (?x := ?\<theta>)",
     template_implication
      ([template_negation
         (template_equation (template_var 2, template_var 1))],
       template_negation
        (
           template_predicate
            (
               template_app
                (template_app (template_hole 2, template_var 1),
                 template_app
                  (template_hole 1,
                   template_app
                    (template_app (template_hole 0, template_var 2),
                     template_var 0)))
               )
           ))),
    ("Coincidence.Bignorabimus_init",
     "?x ~: BVG ?\<alpha> ==> {?x} : Bignorabimus ?\<alpha>",
     template_implication
      ([template_negation
         (
            template_predicate
             (
                template_app
                 (template_app (template_hole 5, template_var 1),
                  template_app (template_hole 4, template_var 0))
                )
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 3,
               template_app
                (template_app (template_hole 2, template_var 1),
                 template_hole 1)),
             template_app (template_hole 0, template_var 0))
           ))),
    ("Coincidence.nostatediff",
     "?x ~: statediff ?\<nu> ?\<omega> ==> ?\<nu> ?x = ?\<omega> ?x",
     template_implication
      ([template_negation
         (
            template_predicate
             (
                template_app
                 (template_app (template_hole 2, template_var 2),
                  template_app
                   (template_app (template_hole 1, template_var 1),
                    template_var 0))
                )
            )],
       template_equation
        (template_app (template_var 1, template_var 2),
         template_app (template_var 0, template_var 2)))),
    ("Coincidence.selectlike_compose",
     "selectlike (selectlike ?X ?\<nu> ?V) ?\<nu> ?W =
      selectlike ?X ?\<nu> (?V Un ?W)",
     template_equation
      (template_app
        (template_app
          (template_app
            (template_hole 1,
             template_app
              (template_app
                (template_app (template_hole 1, template_var 3),
                 template_var 2),
               template_var 1)),
           template_var 2),
         template_var 0),
       template_app
        (template_app
          (template_app (template_hole 1, template_var 3), template_var 2),
         template_app
          (template_app (template_hole 0, template_var 1),
           template_var 0)))),
    ("Coincidence.selectlike_co_selectlike",
     "selectlike (- selectlike ?X ?\<nu> ?V) ?\<nu> ?V =
      selectlike (- ?X) ?\<nu> ?V",
     template_equation
      (template_app
        (template_app
          (template_app
            (template_hole 1,
             template_app
              (template_hole 0,
               template_app
                (template_app
                  (template_app (template_hole 1, template_var 2),
                   template_var 1),
                 template_var 0))),
           template_var 1),
         template_var 0),
       template_app
        (template_app
          (template_app
            (template_hole 1,
             template_app (template_hole 0, template_var 2)),
           template_var 1),
         template_var 0))),
    ("Coincidence.selectlike_antimon",
     "?V <= ?W ==> selectlike ?X ?\<nu> ?W <= selectlike ?X ?\<nu> ?V",
     template_implication
      ([template_inequation (less_equals, template_var 3, template_var 2)],
       template_inequation
        (less_equals,
         template_app
          (template_app
            (template_app (template_hole 0, template_var 1),
             template_var 0),
           template_var 2),
         template_app
          (template_app
            (template_app (template_hole 0, template_var 1),
             template_var 0),
           template_var 3)))),
    ("Coincidence.stateinterpol_right",
     "?x ~: ?S ==> stateinterpol ?\<nu> ?\<omega> ?S ?x = ?\<omega> ?x",
     template_implication
      ([template_negation
         (
            template_predicate
             (
                template_app
                 (template_app (template_hole 2, template_var 3),
                  template_var 2)
                )
            )],
       template_equation
        (template_app
          (template_app
            (template_app
              (template_app (template_hole 0, template_var 1),
               template_var 0),
             template_var 2),
           template_var 3),
         template_app (template_var 0, template_var 3)))),
    ("Coincidence.stateinterpol_insert",
     "Vagree (stateinterpol ?v ?w ?S) (stateinterpol ?v ?w (insert ?z ?S))
       (- {?z})",
     template_predicate
      (
         template_app
          (template_app
            (template_app
              (template_hole 4,
               template_app
                (template_app
                  (template_app (template_hole 3, template_var 3),
                   template_var 2),
                 template_var 1)),
             template_app
              (template_app
                (template_app (template_hole 3, template_var 3),
                 template_var 2),
               template_app
                (template_app (template_hole 2, template_var 0),
                 template_var 1))),
           template_app
            (template_hole 1,
             template_app
              (template_app (template_hole 2, template_var 0),
               template_hole 0)))
         )),
    ("Coincidence.selectlike_Vagree",
     "Vagree ?\<nu> ?\<omega> ?V ==>
      selectlike ?X ?\<nu> ?V = selectlike ?X ?\<omega> ?V",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app (template_hole 2, template_var 3),
                template_var 2),
              template_var 1)
            )],
       template_equation
        (template_app
          (template_app
            (template_app (template_hole 0, template_var 0),
             template_var 3),
           template_var 1),
         template_app
          (template_app
            (template_app (template_hole 0, template_var 0),
             template_var 2),
           template_var 1)))),
    ("Coincidence.co_selectlike",
     "- selectlike ?X ?\<nu> ?V =
      - ?X Un {\<omega>. ~ Vagree \<omega> ?\<nu> ?V}",
     template_equation
      (template_app
        (template_hole 5,
         template_app
          (template_app
            (template_app (template_hole 4, template_var 2),
             template_var 1),
           template_var 0)),
       template_app
        (template_app
          (template_hole 3, template_app (template_hole 5, template_var 2)),
         template_app (template_hole 2, t_empty)))),
    ("Coincidence.selectlike_union",
     "selectlike (?X Un ?Y) ?\<nu> ?V =
      selectlike ?X ?\<nu> ?V Un selectlike ?Y ?\<nu> ?V",
     template_equation
      (template_app
        (template_app
          (template_app
            (template_hole 1,
             template_app
              (template_app (template_hole 0, template_var 3),
               template_var 2)),
           template_var 1),
         template_var 0),
       template_app
        (template_app
          (template_hole 0,
           template_app
            (template_app
              (template_app (template_hole 1, template_var 3),
               template_var 1),
             template_var 0)),
         template_app
          (template_app
            (template_app (template_hole 1, template_var 2),
             template_var 1),
           template_var 0)))),
    ("Coincidence.not_union_or", "(?x ~: ?A Un ?B) = (?x ~: ?A & ?x ~: ?B)",
     template_equation
      (template_app
        (template_hole 3,
         template_app
          (template_app (template_hole 2, template_var 2),
           template_app
            (template_app (template_hole 1, template_var 1),
             template_var 0))),
       template_app
        (template_app
          (template_hole 0,
           template_app
            (template_hole 3,
             template_app
              (template_app (template_hole 2, template_var 2),
               template_var 1))),
         template_app
          (template_hole 3,
           template_app
            (template_app (template_hole 2, template_var 2),
             template_var 0))))),
    ("Coincidence.similar_selectlike_mem",
     "Vagree ?\<nu> ?\<omega> ?V ==>
      (?\<nu> : selectlike ?X ?\<omega> ?V) = (?\<nu> : ?X)",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app (template_hole 3, template_var 3),
                template_var 2),
              template_var 1)
            )],
       template_equation
        (template_app
          (template_app (template_hole 1, template_var 3),
           template_app
            (template_app
              (template_app (template_hole 0, template_var 0),
               template_var 2),
             template_var 1)),
         template_app
          (template_app (template_hole 1, template_var 3),
           template_var 0)))),
    ("Coincidence.coincidence_term",
     "Vagree ?\<omega> ?\<omega>' (FVT ?\<theta>) ==>
      term_sem ?I ?\<theta> ?\<omega> = term_sem ?I ?\<theta> ?\<omega>'",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app (template_hole 3, template_var 3),
                template_var 2),
              template_app (template_hole 2, template_var 1))
            )],
       template_equation
        (template_app
          (template_app
            (template_app (template_hole 0, template_var 0),
             template_var 1),
           template_var 3),
         template_app
          (template_app
            (template_app (template_hole 0, template_var 0),
             template_var 1),
           template_var 2)))),
    ("Coincidence.Cignorabimus_antimon",
     "?M : Cignorabimus ?\<alpha> ?V & ?N <= ?M ==>
      ?N : Cignorabimus ?\<alpha> ?V",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_hole 3,
                template_app
                 (template_app (template_hole 2, template_var 3),
                  template_app
                   (template_app (template_hole 1, template_var 2),
                    template_var 1))),
              template_app
               (template_app (template_hole 0, template_var 0),
                template_var 3))
            )],
       template_predicate
        (
           template_app
            (template_app (template_hole 2, template_var 0),
             template_app
              (template_app (template_hole 1, template_var 2),
               template_var 1))
           ))),
    ("Coincidence.boundeffect",
     "(?\<omega> : game_sem ?I ?\<alpha> ?X) =
      (?\<omega>
       : game_sem ?I ?\<alpha>
          (selectlike ?X ?\<omega> (- BVG ?\<alpha>)))",
     template_equation
      (template_app
        (template_app (template_hole 4, template_var 3),
         template_app
          (template_app
            (template_app (template_hole 3, template_var 2),
             template_var 1),
           template_var 0)),
       template_app
        (template_app (template_hole 4, template_var 3),
         template_app
          (template_app
            (template_app (template_hole 3, template_var 2),
             template_var 1),
           template_app
            (template_app
              (template_app (template_hole 2, template_var 0),
               template_var 3),
             template_app
              (template_hole 1,
               template_app (template_hole 0, template_var 1))))))),
    ("Coincidence.coincidence_formula",
     "Vagree ?\<omega> ?\<omega>' (FVF ?\<phi>) ==>
      (?\<omega> : fml_sem ?I ?\<phi>) = (?\<omega>' : fml_sem ?I ?\<phi>)",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app (template_hole 4, template_var 3),
                template_var 2),
              template_app (template_hole 3, template_var 1))
            )],
       template_equation
        (template_app
          (template_app (template_hole 1, template_var 3),
           template_app
            (template_app (template_hole 0, template_var 0),
             template_var 1)),
         template_app
          (template_app (template_hole 1, template_var 2),
           template_app
            (template_app (template_hole 0, template_var 0),
             template_var 1))))),
    ("Coincidence.Bignorabimus_step",
     "(!!M. M : ?S ==> M : Bignorabimus ?\<alpha>) ==>
      \<Union> ?S : Bignorabimus ?\<alpha>",
     template_implication
      ([template_predicate (template_app (template_hole 4, t_empty))],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 2,
               template_app (template_hole 0, template_var 1)),
             template_app (template_hole 1, template_var 0))
           ))),
    ("Coincidence.Bignorabimus_union",
     "[| ?M : Bignorabimus ?\<alpha>; ?N : Bignorabimus ?\<alpha> |]
      ==> ?M Un ?N : Bignorabimus ?\<alpha>",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 2, template_var 2),
              template_app (template_hole 1, template_var 1))
            ),
        template_predicate
         (
            template_app
             (template_app (template_hole 2, template_var 0),
              template_app (template_hole 1, template_var 1))
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 2,
               template_app
                (template_app (template_hole 0, template_var 2),
                 template_var 0)),
             template_app (template_hole 1, template_var 1))
           ))),
    ("Coincidence.Vagree_ror",
     "Vagree ?\<nu> ?\<nu>' (?V Int ?W) ==>
      EX \<omega>. Vagree ?\<nu> \<omega> ?V & Vagree \<omega> ?\<nu>' ?W",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app (template_hole 3, template_var 3),
                template_var 2),
              template_app
               (template_app (template_hole 2, template_var 1),
                template_var 0))
            )],
       template_predicate (template_app (template_hole 1, t_empty)))),
    ("Coincidence.BVG_assign_meta",
     "(!!I \<omega>. term_sem I ?\<theta> \<omega> = \<omega> ?x) ==>
      BVG (?x := ?\<theta>) = {}",
     template_implication
      ([template_predicate (template_app (template_hole 8, t_empty))],
       template_equation
        (template_app
          (template_hole 2,
           template_app
            (template_app (template_hole 1, template_var 0),
             template_var 1)),
         template_hole 0))),
    ("Coincidence.Cignorabimus_init",
     "[| FVG ?\<alpha> <= ?V; ?x ~: ?V |]
      ==> {?x} : Cignorabimus ?\<alpha> ?V",
     template_implication
      ([template_inequation
         (less_equals, template_app (template_hole 6, template_var 2),
          template_var 1),
        template_negation
         (
            template_predicate
             (
                template_app
                 (template_app (template_hole 4, template_var 0),
                  template_var 1)
                )
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 3,
               template_app
                (template_app (template_hole 2, template_var 0),
                 template_hole 1)),
             template_app
              (template_app (template_hole 0, template_var 2),
               template_var 1))
           ))),
    ("Coincidence.repv_selectlike_self",
     "(repv ?\<omega> ?x ?d : selectlike ?X ?\<omega> {?x}) =
      (?d = ?\<omega> ?x & ?\<omega> : ?X)",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_hole 6,
                template_app
                 (template_app
                   (template_app (template_hole 5, template_var 3),
                    template_var 2),
                  template_var 1)),
              template_app
               (template_app
                 (template_app (template_hole 4, template_var 0),
                  template_var 3),
                template_app
                 (template_app (template_hole 3, template_var 2),
                  template_hole 2)))
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 1,
               template_app
                (template_app (template_hole 0, template_var 1),
                 template_app (template_var 3, template_var 2))),
             template_app
              (template_app (template_hole 6, template_var 3),
               template_var 0))
           ))),
    ("Coincidence.Cignorabimus_step",
     "(!!M. M : ?S ==> M : Cignorabimus ?\<alpha> ?V) ==>
      \<Union> ?S : Cignorabimus ?\<alpha> ?V",
     template_implication
      ([template_predicate (template_app (template_hole 4, t_empty))],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 2,
               template_app (template_hole 0, template_var 2)),
             template_app
              (template_app (template_hole 1, template_var 1),
               template_var 0))
           ))),
    ("Coincidence.selectlike_Sup",
     "selectlike (\<Union> ?M) ?\<nu> ?V =
      \<Union> {selectlike X ?\<nu> ?V |X. X : ?M}",
     template_equation
      (template_app
        (template_app
          (template_app
            (template_hole 5,
             template_app (template_hole 4, template_var 2)),
           template_var 1),
         template_var 0),
       template_app
        (template_hole 4, template_app (template_hole 3, t_empty)))),
    ("Coincidence.BVG_assign",
     "BVG (?x := ?\<theta>) =
      (if ALL I \<omega>. term_sem I ?\<theta> \<omega> = \<omega> ?x
       then {} else {?x})",
     template_equation
      (template_app
        (template_hole 8,
         template_app
          (template_app (template_hole 7, template_var 1), template_var 0)),
       template_app
        (template_app
          (template_app
            (template_hole 6, template_app (template_hole 5, t_empty)),
           template_hole 1),
         template_app
          (template_app (template_hole 0, template_var 1),
           template_hole 1)))),
    ("Coincidence.BVG_ODE_other",
     "[| ?y ~= RVar ?x; ?y ~= DVar ?x |] ==> ?y ~: BVG (ODE ?x ?\<theta>)",
     template_implication
      ([template_negation
         (
            template_equation
             (template_var 2,
              template_app (template_hole 4, template_var 1))
            ),
        template_negation
         (
            template_equation
             (template_var 2,
              template_app (template_hole 3, template_var 1))
            )],
       template_negation
        (
           template_predicate
            (
               template_app
                (template_app (template_hole 2, template_var 2),
                 template_app
                  (template_hole 1,
                   template_app
                    (template_app (template_hole 0, template_var 1),
                     template_var 0)))
               )
           ))),
    ("Coincidence.Cignorabimus_union",
     "[| ?M : Cignorabimus ?\<alpha> ?V; ?N : Cignorabimus ?\<alpha> ?V |]
      ==> ?M Un ?N : Cignorabimus ?\<alpha> ?V",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 2, template_var 3),
              template_app
               (template_app (template_hole 1, template_var 2),
                template_var 1))
            ),
        template_predicate
         (
            template_app
             (template_app (template_hole 2, template_var 0),
              template_app
               (template_app (template_hole 1, template_var 2),
                template_var 1))
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 2,
               template_app
                (template_app (template_hole 0, template_var 3),
                 template_var 0)),
             template_app
              (template_app (template_hole 1, template_var 2),
               template_var 1))
           ))),
    ("Coincidence.coincidence_term_cor",
     "[| Uvariation ?\<omega> ?\<omega>' ?U; FVT ?\<theta> Int ?U = {} |]
      ==> term_sem ?I ?\<theta> ?\<omega> =
          term_sem ?I ?\<theta> ?\<omega>'",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app (template_hole 6, template_var 4),
                template_var 3),
              template_var 2)
            ),
        template_equation
         (template_app
           (template_app
             (template_hole 4,
              template_app (template_hole 3, template_var 1)),
            template_var 2),
          template_hole 2)],
       template_equation
        (template_app
          (template_app
            (template_app (template_hole 0, template_var 0),
             template_var 1),
           template_var 4),
         template_app
          (template_app
            (template_app (template_hole 0, template_var 0),
             template_var 1),
           template_var 3)))),
    ("Coincidence.repv_selectlike_other_converse",
     "?x ~= ?y ==>
      (repv ?\<omega> ?x ?d : ?X) =
      (repv ?\<omega> ?x ?d : selectlike ?X ?\<omega> {?y})",
     template_implication
      ([template_negation
         (template_equation (template_var 4, template_var 3))],
       template_equation
        (template_app
          (template_app
            (template_hole 4,
             template_app
              (template_app
                (template_app (template_hole 3, template_var 2),
                 template_var 4),
               template_var 1)),
           template_var 0),
         template_app
          (template_app
            (template_hole 4,
             template_app
              (template_app
                (template_app (template_hole 3, template_var 2),
                 template_var 4),
               template_var 1)),
           template_app
            (template_app
              (template_app (template_hole 2, template_var 0),
               template_var 2),
             template_app
              (template_app (template_hole 1, template_var 3),
               template_hole 0)))))),
    ("Coincidence.repv_selectlike_other",
     "?x ~= ?y ==>
      (repv ?\<omega> ?x ?d : selectlike ?X ?\<omega> {?y}) =
      (repv ?\<omega> ?x ?d : ?X)",
     template_implication
      ([template_negation
         (template_equation (template_var 4, template_var 3))],
       template_equation
        (template_app
          (template_app
            (template_hole 4,
             template_app
              (template_app
                (template_app (template_hole 3, template_var 2),
                 template_var 4),
               template_var 1)),
           template_app
            (template_app
              (template_app (template_hole 2, template_var 0),
               template_var 2),
             template_app
              (template_app (template_hole 1, template_var 3),
               template_hole 0))),
         template_app
          (template_app
            (template_hole 4,
             template_app
              (template_app
                (template_app (template_hole 3, template_var 2),
                 template_var 4),
               template_var 1)),
           template_var 0)))),
    ("Coincidence.stateinterpol_FVT",
     "?z ~: FVT ?t ==>
      term_sem ?I ?t (stateinterpol ?\<omega> ?\<omega>' ?S) =
      term_sem ?I ?t (stateinterpol ?\<omega> ?\<omega>' (insert ?z ?S))",
     template_implication
      ([template_negation
         (
            template_predicate
             (
                template_app
                 (template_app (template_hole 5, template_var 5),
                  template_app (template_hole 4, template_var 4))
                )
            )],
       template_equation
        (template_app
          (template_app
            (template_app (template_hole 2, template_var 3),
             template_var 4),
           template_app
            (template_app
              (template_app (template_hole 1, template_var 2),
               template_var 1),
             template_var 0)),
         template_app
          (template_app
            (template_app (template_hole 2, template_var 3),
             template_var 4),
           template_app
            (template_app
              (template_app (template_hole 1, template_var 2),
               template_var 1),
             template_app
              (template_app (template_hole 0, template_var 5),
               template_var 0)))))),
    ("Coincidence.boundeffect_cor",
     "?V Int BVG ?\<alpha> = {} ==>
      (?\<omega> : game_sem ?I ?\<alpha> ?X) =
      (?\<omega> : game_sem ?I ?\<alpha> (selectlike ?X ?\<omega> ?V))",
     template_implication
      ([template_equation
         (template_app
           (template_app (template_hole 6, template_var 4),
            template_app (template_hole 5, template_var 3)),
          template_hole 4)],
       template_equation
        (template_app
          (template_app (template_hole 2, template_var 2),
           template_app
            (template_app
              (template_app (template_hole 1, template_var 1),
               template_var 3),
             template_var 0)),
         template_app
          (template_app (template_hole 2, template_var 2),
           template_app
            (template_app
              (template_app (template_hole 1, template_var 1),
               template_var 3),
             template_app
              (template_app
                (template_app (template_hole 0, template_var 0),
                 template_var 2),
               template_var 4)))))),
    ("Coincidence.selectlike_equal_cond",
     "(selectlike ?X ?\<nu> ?V = selectlike ?Y ?\<nu> ?V) =
      (ALL \<mu>.
          Uvariation \<mu> ?\<nu> (- ?V) --> (\<mu> : ?X) = (\<mu> : ?Y))",
     template_equation
      (template_app
        (template_app
          (template_hole 6,
           template_app
            (template_app
              (template_app (template_hole 5, template_var 3),
               template_var 2),
             template_var 1)),
         template_app
          (template_app
            (template_app (template_hole 5, template_var 0),
             template_var 2),
           template_var 1)),
       template_app (template_hole 4, t_empty))),
    ("Coincidence.coincidence_formula_cor",
     "[| Uvariation ?\<omega> ?\<omega>' ?U; FVF ?\<phi> Int ?U = {} |]
      ==> (?\<omega> : fml_sem ?I ?\<phi>) =
          (?\<omega>' : fml_sem ?I ?\<phi>)",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app (template_hole 7, template_var 4),
                template_var 3),
              template_var 2)
            ),
        template_equation
         (template_app
           (template_app
             (template_hole 5,
              template_app (template_hole 4, template_var 1)),
            template_var 2),
          template_hole 3)],
       template_equation
        (template_app
          (template_app (template_hole 1, template_var 4),
           template_app
            (template_app (template_hole 0, template_var 0),
             template_var 1)),
         template_app
          (template_app (template_hole 1, template_var 3),
           template_app
            (template_app (template_hole 0, template_var 0),
             template_var 1))))),
    ("Coincidence.selectlike_equal_cocond",
     "(selectlike ?X ?\<nu> (- ?V) = selectlike ?Y ?\<nu> (- ?V)) =
      (ALL \<mu>.
          Uvariation \<mu> ?\<nu> ?V --> (\<mu> : ?X) = (\<mu> : ?Y))",
     template_equation
      (template_app
        (template_app
          (template_hole 6,
           template_app
            (template_app
              (template_app (template_hole 5, template_var 3),
               template_var 2),
             template_app (template_hole 4, template_var 1))),
         template_app
          (template_app
            (template_app (template_hole 5, template_var 0),
             template_var 2),
           template_app (template_hole 4, template_var 1))),
       template_app (template_hole 3, t_empty))),
    ("Coincidence.stateinterpol_FVF",
     "?z ~: FVF ?e ==>
      (stateinterpol ?\<omega> ?\<omega>' ?S : fml_sem ?I ?e) =
      (stateinterpol ?\<omega> ?\<omega>' (insert ?z ?S) : fml_sem ?I ?e)",
     template_implication
      ([template_negation
         (
            template_predicate
             (
                template_app
                 (template_app (template_hole 6, template_var 5),
                  template_app (template_hole 5, template_var 4))
                )
            )],
       template_equation
        (template_app
          (template_app
            (template_hole 3,
             template_app
              (template_app
                (template_app (template_hole 2, template_var 3),
                 template_var 2),
               template_var 1)),
           template_app
            (template_app (template_hole 1, template_var 0),
             template_var 4)),
         template_app
          (template_app
            (template_hole 3,
             template_app
              (template_app
                (template_app (template_hole 2, template_var 3),
                 template_var 2),
               template_app
                (template_app (template_hole 0, template_var 5),
                 template_var 1))),
           template_app
            (template_app (template_hole 1, template_var 0),
             template_var 4))))),
    ("Coincidence.Bignorabimus_equiv",
     "Bignorabimus ?\<alpha> =
      {M. ALL I \<omega> X.
             \<omega> : game_sem I ?\<alpha> X -->
             \<omega> : game_sem I ?\<alpha> (selectlike X \<omega> M)}",
     template_equation
      (template_app (template_hole 8, template_var 0),
       template_app (template_hole 7, t_empty))),
    ("Coincidence.selectlike_equal_cocond_rule",
     "(!!\<mu>.
          Uvariation \<mu> ?\<nu> (- ?V) ==>
          (\<mu> : ?X) = (\<mu> : ?Y)) ==>
      selectlike ?X ?\<nu> ?V = selectlike ?Y ?\<nu> ?V",
     template_implication
      ([template_predicate (template_app (template_hole 7, t_empty))],
       template_equation
        (template_app
          (template_app
            (template_app (template_hole 0, template_var 1),
             template_var 3),
           template_var 2),
         template_app
          (template_app
            (template_app (template_hole 0, template_var 0),
             template_var 3),
           template_var 2)))),
    ("Coincidence.selectlike_equal_cocond_corule",
     "(!!\<mu>.
          Uvariation \<mu> ?\<nu> ?V ==> (\<mu> : ?X) = (\<mu> : ?Y)) ==>
      selectlike ?X ?\<nu> (- ?V) = selectlike ?Y ?\<nu> (- ?V)",
     template_implication
      ([template_predicate (template_app (template_hole 7, t_empty))],
       template_equation
        (template_app
          (template_app
            (template_app (template_hole 1, template_var 1),
             template_var 3),
           template_app (template_hole 0, template_var 2)),
         template_app
          (template_app
            (template_app (template_hole 1, template_var 0),
             template_var 3),
           template_app (template_hole 0, template_var 2))))),
    ("Coincidence.coincidence_game",
     "[| Vagree ?\<omega> ?\<omega>' ?V; FVG ?\<alpha> <= ?V |]
      ==> (?\<omega> : game_sem ?I ?\<alpha> (restrictto ?X ?V)) =
          (?\<omega>' : game_sem ?I ?\<alpha> (restrictto ?X ?V))",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app (template_hole 6, template_var 5),
                template_var 4),
              template_var 3)
            ),
        template_inequation
         (less_equals, template_app (template_hole 4, template_var 2),
          template_var 3)],
       template_equation
        (template_app
          (template_app (template_hole 2, template_var 5),
           template_app
            (template_app
              (template_app (template_hole 1, template_var 1),
               template_var 2),
             template_app
              (template_app (template_hole 0, template_var 0),
               template_var 3))),
         template_app
          (template_app (template_hole 2, template_var 4),
           template_app
            (template_app
              (template_app (template_hole 1, template_var 1),
               template_var 2),
             template_app
              (template_app (template_hole 0, template_var 0),
               template_var 3)))))),
    ("Coincidence.BVG_nonelem",
     "(?x ~: BVG ?\<alpha>) =
      (ALL I \<omega> X.
          (\<omega> : game_sem I ?\<alpha> X) =
          (\<omega> : game_sem I ?\<alpha> (selectlike X \<omega> {?x})))",
     template_equation
      (template_app
        (template_hole 10,
         template_app
          (template_app (template_hole 9, template_var 1),
           template_app (template_hole 8, template_var 0))),
       template_app (template_hole 7, t_empty))),
    ("Coincidence.select_nonBV",
     "?x ~: BVG ?\<alpha> ==>
      selectlike (game_sem ?I ?\<alpha> (selectlike ?X ?\<omega> {?x}))
       ?\<omega> {?x} =
      selectlike (game_sem ?I ?\<alpha> ?X) ?\<omega> {?x}",
     template_implication
      ([template_negation
         (
            template_predicate
             (
                template_app
                 (template_app (template_hole 6, template_var 4),
                  template_app (template_hole 5, template_var 3))
                )
            )],
       template_equation
        (template_app
          (template_app
            (template_app
              (template_hole 3,
               template_app
                (template_app
                  (template_app (template_hole 2, template_var 2),
                   template_var 3),
                 template_app
                  (template_app
                    (template_app (template_hole 3, template_var 1),
                     template_var 0),
                   template_app
                    (template_app (template_hole 1, template_var 4),
                     template_hole 0)))),
             template_var 0),
           template_app
            (template_app (template_hole 1, template_var 4),
             template_hole 0)),
         template_app
          (template_app
            (template_app
              (template_hole 3,
               template_app
                (template_app
                  (template_app (template_hole 2, template_var 2),
                   template_var 3),
                 template_var 1)),
             template_var 0),
           template_app
            (template_app (template_hole 1, template_var 4),
             template_hole 0))))),
    ("Coincidence.powersetup_induct",
     "[| !!M. M : ?C ==> ?P M;
         !!S. (!!M. M : S ==> ?P M) ==> ?P (\<Union> S) |]
      ==> ?P (\<Union> ?C)",
     template_implication
      ([template_predicate (template_app (template_hole 4, t_empty)),
        template_predicate (template_app (template_hole 1, t_empty))],
       template_predicate
        (
           template_app
            (template_var 0, template_app (template_hole 0, template_var 1))
           ))),
    ("Coincidence.coincidence_game_cor",
     "[| Uvariation ?\<omega> ?\<omega>' ?U; ?U Int FVG ?\<alpha> = {} |]
      ==> (?\<omega> : game_sem ?I ?\<alpha> (restrictto ?X (- ?U))) =
          (?\<omega>' : game_sem ?I ?\<alpha> (restrictto ?X (- ?U)))",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app (template_hole 9, template_var 5),
                template_var 4),
              template_var 3)
            ),
        template_equation
         (template_app
           (template_app (template_hole 7, template_var 3),
            template_app (template_hole 6, template_var 2)),
          template_hole 5)],
       template_equation
        (template_app
          (template_app (template_hole 3, template_var 5),
           template_app
            (template_app
              (template_app (template_hole 2, template_var 1),
               template_var 2),
             template_app
              (template_app (template_hole 1, template_var 0),
               template_app (template_hole 0, template_var 3)))),
         template_app
          (template_app (template_hole 3, template_var 4),
           template_app
            (template_app
              (template_app (template_hole 2, template_var 1),
               template_var 2),
             template_app
              (template_app (template_hole 1, template_var 0),
               template_app (template_hole 0, template_var 3))))))),
    ("Coincidence.Cignorabimus_equiv",
     "Cignorabimus ?\<alpha> ?V =
      {M. ALL I \<omega> \<omega>' X.
             Vagree \<omega> \<omega>' (- M) -->
             (\<omega> : game_sem I ?\<alpha> (restrictto X ?V)) =
             (\<omega>' : game_sem I ?\<alpha> (restrictto X ?V))}",
     template_equation
      (template_app
        (template_app (template_hole 11, template_var 1), template_var 0),
       template_app (template_hole 10, t_empty))),
    ("Coincidence.powerset2up_induct",
     "[| finite ?C; ?C ~= {}; !!M. M : ?C ==> ?P M;
         !!M N. [| ?P M; ?P N |] ==> ?P (M Un N) |]
      ==> ?P (\<Union> ?C)",
     template_implication
      ([template_predicate (template_app (template_hole 7, template_var 1)),
        template_negation
         (template_equation (template_var 1, template_hole 4)),
        template_predicate (template_app (template_hole 3, t_empty)),
        template_predicate (template_app (template_hole 3, t_empty))],
       template_predicate
        (
           template_app
            (template_var 0, template_app (template_hole 0, template_var 1))
           )))]
