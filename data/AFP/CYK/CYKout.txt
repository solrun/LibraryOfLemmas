Loading theory "Draft.CYK" (required by "Draft.CYKMoreTemplates")
Loading theory "HOL-Library.Function_Algebras" (required by "Draft.CYKMoreTemplates" via "Draft.ExtrEqs" via "HOL-Library.BigO")
Loading theory "HOL-Library.Nat_Bijection" (required by "Draft.CYKMoreTemplates" via "Draft.ExtrEqs" via "HOL-Library.Stream")
Loading theory "HOL-Library.Set_Algebras" (required by "Draft.CYKMoreTemplates" via "Draft.ExtrEqs" via "HOL-Library.BigO")
instantiation
  set :: (plus) plus
  plus_set == plus :: 'a set => 'a set => 'a set
instantiation
  fun :: (type, plus) plus
  plus_fun == plus :: ('a => 'b) => ('a => 'b) => 'a => 'b
instantiation
  set :: (times) times
  times_set == times :: 'a set => 'a set => 'a set
instantiation
  fun :: (type, zero) zero
  zero_fun == zero_class.zero :: 'a => 'b
instantiation
  set :: (zero) zero
  zero_set == zero_class.zero :: 'a set
instantiation
  fun :: (type, times) times
  times_fun == times :: ('a => 'b) => ('a => 'b) => 'a => 'b
instantiation
  set :: (one) one
  one_set == one_class.one :: 'a set
instantiation
  fun :: (type, one) one
  one_fun == one_class.one :: 'a => 'b
Found termination order: "(%p. size (snd p)) <*mlex*> {}"
### theory "HOL-Library.Function_Algebras"
### 0.131s elapsed time, 0.531s cpu time, 0.054s GC time
Loading theory "HOL-Library.Tree" (required by "Draft.CYKMoreTemplates" via "Draft.ExtrEqs" via "Draft.Templates")
Found termination order: "size_list size <*mlex*> {}"
### theory "HOL-Library.Set_Algebras"
### 0.228s elapsed time, 0.920s cpu time, 0.054s GC time
Loading theory "HOL-Library.BigO" (required by "Draft.CYKMoreTemplates" via "Draft.ExtrEqs")
### theory "HOL-Library.Nat_Bijection"
### 0.339s elapsed time, 1.351s cpu time, 0.167s GC time
Loading theory "HOL-Library.Stream" (required by "Draft.CYKMoreTemplates" via "Draft.ExtrEqs")
consts
  left :: "'a tree => 'a tree"
consts
  right :: "'a tree => 'a tree"
Found termination order: "size <*mlex*> {}"
consts
  shift :: "'a list => 'a stream => 'a stream"
Proofs for coinductive predicate(s) "streamsp"
  Proving monotonicity ...
Found termination order: "size <*mlex*> {}"
consts
  snth :: "'a stream => nat => 'a"
Found termination order: "(%p. length (snd p)) <*mlex*> {}"
Found termination order: "size <*mlex*> {}"
consts
  stake :: "nat => 'a stream => 'a list"
consts
  sdrop :: "nat => 'a stream => 'a stream"
class height = type +
  fixes height :: "'a => nat"
instantiation
  tree :: (type) height
  height_tree == height :: 'a tree => nat
consts
  sfilter :: "('a => bool) => 'a stream => 'a stream"
Found termination order: "size <*mlex*> {}"
consts
  cycle :: "'a list => 'a stream"
consts
  siterate :: "('a => 'a) => 'a => 'a stream"
Found termination order: "size <*mlex*> {}"
consts
  flat :: "'a list stream => 'a stream"
### theory "HOL-Library.BigO"
### 1.087s elapsed time, 4.057s cpu time, 1.034s GC time
Found termination order:
  "(%p. size_list (%p. size (snd p)) (fst p)) <*mlex*> {}"
Found termination order: "size <*mlex*> {}"
consts
  sinterleave :: "'a stream => 'a stream => 'a stream"
consts
  szip :: "'a stream => 'b stream => ('a * 'b) stream"
consts
  smap2 :: "('a => 'b => 'c) => 'a stream => 'b stream => 'c stream"
Found termination order: "size <*mlex*> {}"
### theory "HOL-Library.Stream"
### 1.146s elapsed time, 4.164s cpu time, 1.006s GC time
Found termination order: "size <*mlex*> {}"
Found termination order: "size <*mlex*> {}"
Found termination order: "size <*mlex*> {}"
Found termination order: "(%p. size (fst p)) <*mlex*> {}"
Found termination order:
  "(%p. size_list (%p. size (snd p)) (fst p)) <*mlex*> {}"
Found termination order: "size <*mlex*> {}"
Found termination order: "(%p. length (fst (snd p))) <*mlex*> {}"
Found termination order: "(%p. size (snd p)) <*mlex*> {}"
Found termination order: "(%p. length (fst (snd p))) <*mlex*> {}"
### theory "Draft.CYK"
### 2.004s elapsed time, 6.612s cpu time, 1.329s GC time
Found termination order: "size <*mlex*> {}"
"[True, False]"
  :: "bool list"
### theory "HOL-Library.Tree"
### 2.072s elapsed time, 6.537s cpu time, 1.327s GC time
Loading theory "Draft.Templates" (required by "Draft.CYKMoreTemplates" via "Draft.ExtrEqs")
datatype template_term
=
     t_empty
   | template_app of template_term * template_term
   | template_hole of int
   | template_var of int
datatype sign
= equals | greater_equals | greater_than | less_equals | less_than
datatype template
=
     template_bimplication of template * template
   | template_dunno
   | template_equation of template_term * template_term
   | template_implication of template list * template
   | template_inequation of sign * template_term * template_term
   | template_negation of template
   | template_predicate of template_term
constructor t_empty: template_term
constructor template_app: template_term * template_term -> template_term
constructor template_hole: int -> template_term
constructor template_var: int -> template_term
constructor equals: sign
constructor greater_equals: sign
constructor greater_than: sign
constructor less_equals: sign
constructor less_than: sign
constructor template_bimplication: template * template -> template
constructor template_dunno: template
constructor template_equation: template_term * template_term -> template
constructor template_implication: template list * template -> template
constructor template_inequation:
   sign * template_term * template_term -> template
constructor template_negation: template -> template
constructor template_predicate: template_term -> template
val vfs = fn: term -> (indexname * typ) list * (string * typ) list
val indexOf = fn: ''a list -> ''a -> int -> int
val has_eq = fn: term -> bool
val term2template = fn:
   (indexname * typ) list -> (string * typ) list -> term -> template_term
val lemma2predicate = fn: term -> term -> template
val makeTemplatewithContext = fn: term -> term -> template
val lemma2template = fn: term -> template
val thm2template = fn: thm -> template
val tterm2string = fn: template_term -> string
val template2string = fn: template -> string
val t = "height ?t <= size ?t": thm
val th =
   Const ("HOL.Trueprop", "bool => prop") $
     (Const ("Orderings.ord_class.less_eq", "nat => nat => bool") $
       (Const ("Tree.height_class.height", "?'a tree => nat") $
         Var (("t", 0), "?'a tree")) $
       (Const ("Nat.size_class.size", "?'a tree => nat") $
         Var (("t", 0), "?'a tree"))):
   term
### theory "Draft.Templates"
### 0.054s elapsed time, 0.073s cpu time, 0.000s GC time
Loading theory "Draft.ExtrEqs" (required by "Draft.CYKMoreTemplates")
val eqpattern =
   Pattern
    (
       Const ("HOL.Trueprop", "bool => prop") $
         (Const ("HOL.eq", "?'a => ?'a => bool") $
           Var (("_dummy_", 1), "?'a") $ Var (("_dummy_", 2), "?'a"))
       ):
   term Find_Theorems.criterion
val badeqpattern = Pattern (Const ("Pure.eq", "?'a => ?'a => prop")):
   term Find_Theorems.criterion
val undefpattern =
   Pattern
    (
       Const ("HOL.Trueprop", "bool => prop") $
         (Const ("HOL.eq", "?'a => ?'a => bool") $
           Var (("_dummy_", 1), "?'a") $ Const ("HOL.undefined", "?'a"))
       ):
   term Find_Theorems.criterion
val thmpattern =
   Pattern
    (Const ("HOL.Trueprop", "bool => prop") $ Var (("_dummy_", 1), "bool")):
   term Find_Theorems.criterion
val badnames =
   ["*nitpick*", "*Nitpick*", "*full_exhaustive*", "*_def*", "Enum.finite*",
    "*Quickcheck*", "ATP*", "*Nunchaku*", "*Code*", "*BNF*", "*SMT*",
    "*.*.*"]:
   string list
val unwanted_names =
   [(false, Name "*nitpick*"), (false, Name "*Nitpick*"),
    (false, Name "*full_exhaustive*"), (false, Name "*_def*"),
    (false, Name "Enum.finite*"), (false, Name "*Quickcheck*"),
    (false, Name "ATP*"), (false, Name "*Nunchaku*"),
    (false, Name "*Code*"), (false, Name "*BNF*"), (false, Name "*SMT*"),
    (false, Name "*.*.*")]:
   (bool * term Find_Theorems.criterion) list
val has_vars = fn: term -> bool
val get_all_eqs = fn: string -> Proof.context -> (string * thm) list
val get_all_thms = fn: string -> Proof.context -> (string * thm) list
val get_noneq_thms = fn: string -> Proof.context -> (string * thm) list
val template_eqs = fn:
   string -> Proof.context -> (string * thm * template) list
val template_thms = fn:
   string -> Proof.context -> (string * thm * template) list
### theory "Draft.ExtrEqs"
### 0.473s elapsed time, 0.519s cpu time, 0.054s GC time
Loading theory "Draft.CYKMoreTemplates"
val templateLemmas =
   [("CYK.subword_self", "subword ?w 0 (length ?w) = ?w",
     template_equation
      (template_app
        (template_app
          (template_app (template_hole 2, template_var 0), template_hole 1),
         template_app (template_hole 0, template_var 0)),
       template_var 0)),
    ("CYK.mem", "mem ?x ?xs = (?x : set ?xs)",
     template_equation
      (template_app
        (template_app (template_hole 2, template_var 1), template_var 0),
       template_app
        (template_app (template_hole 1, template_var 1),
         template_app (template_hole 0, template_var 0)))),
    ("CYK.cyk", "cyk ?G ?S ?w = (?w : Lang ?G ?S)",
     template_equation
      (template_app
        (template_app
          (template_app (template_hole 2, template_var 2), template_var 1),
         template_var 0),
       template_app
        (template_app (template_hole 1, template_var 0),
         template_app
          (template_app (template_hole 0, template_var 2),
           template_var 1)))),
    ("CYK.Lang_no_Nil", "?w : Lang ?G ?S ==> ?w ~= []",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 4, template_var 2),
              template_app
               (template_app (template_hole 3, template_var 1),
                template_var 0))
            )],
       template_negation
        (template_equation (template_var 2, template_hole 0)))),
    ("CYK.init_match",
     "(?X : set (init_match ?G ?a)) = ((?X, RHS.Leaf ?a) : set ?G)",
     template_equation
      (template_app
        (template_app (template_hole 6, template_var 2),
         template_app
          (template_hole 5,
           template_app
            (template_app (template_hole 4, template_var 1),
             template_var 0))),
       template_app
        (template_app
          (template_hole 3,
           template_app
            (template_app (template_hole 2, template_var 2),
             template_app (template_hole 1, template_var 0))),
         template_app (template_hole 0, template_var 1)))),
    ("CYK.CYK_Lang", "(?S : CYK ?G ?w 0 (length ?w)) = (?w : Lang ?G ?S)",
     template_equation
      (template_app
        (template_app (template_hole 5, template_var 2),
         template_app
          (template_app
            (template_app
              (template_app (template_hole 4, template_var 1),
               template_var 0),
             template_hole 3),
           template_app (template_hole 2, template_var 0))),
       template_app
        (template_app (template_hole 1, template_var 0),
         template_app
          (template_app (template_hole 0, template_var 1),
           template_var 2)))),
    ("CYK.DSTEP_star_mono",
     "?s -?G\<rightarrow>\<^sup>* ?t ==> length ?s <= length ?t",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_hole 5,
                template_app
                 (template_app (template_hole 4, template_var 2),
                  template_var 1)),
              template_app
               (template_hole 3,
                template_app (template_hole 2, template_var 0)))
            )],
       template_inequation
        (less_equals, template_app (template_hole 0, template_var 2),
         template_app (template_hole 0, template_var 1)))),
    ("CYK.Lang_eq1", "([?x] : Lang ?G ?S) = ((?S, RHS.Leaf ?x) : set ?G)",
     template_equation
      (template_app
        (template_app
          (template_hole 7,
           template_app
            (template_app (template_hole 6, template_var 2),
             template_hole 5)),
         template_app
          (template_app (template_hole 4, template_var 1), template_var 0)),
       template_app
        (template_app
          (template_hole 3,
           template_app
            (template_app (template_hole 2, template_var 0),
             template_app (template_hole 1, template_var 2))),
         template_app (template_hole 0, template_var 1)))),
    ("CYK.subword_length",
     "?i + ?j <= length ?w ==> length (subword ?w ?i ?j) = ?j",
     template_implication
      ([template_inequation
         (less_equals,
          template_app
           (template_app (template_hole 3, template_var 2), template_var 1),
          template_app (template_hole 2, template_var 0))],
       template_equation
        (template_app
          (template_hole 2,
           template_app
            (template_app
              (template_app (template_hole 0, template_var 0),
               template_var 2),
             template_var 1)),
         template_var 1))),
    ("CYK.init1", "init ?G ?w ?k = Some ?T ==> init' ?G ?w ?k = ?T",
     template_implication
      ([template_equation
         (template_app
           (template_app
             (template_app (template_hole 3, template_var 3),
              template_var 2),
            template_var 1),
          template_app (template_hole 2, template_var 0))],
       template_equation
        (template_app
          (template_app
            (template_app (template_hole 0, template_var 3),
             template_var 2),
           template_var 1),
         template_var 0))),
    ("CYK.Lang_rtrancl_eq",
     "(?w : Lang ?G ?S) = [Inl ?S] -?G\<rightarrow>\<^sup>* map Inr ?w",
     template_equation
      (template_app
        (template_app (template_hole 10, template_var 2),
         template_app
          (template_app (template_hole 9, template_var 1), template_var 0)),
       template_app
        (template_app
          (template_hole 8,
           template_app
            (template_app
              (template_hole 7,
               template_app
                (template_app
                  (template_hole 6,
                   template_app (template_hole 5, template_var 0)),
                 template_hole 4)),
             template_app
              (template_app (template_hole 3, template_hole 2),
               template_var 2))),
         template_app
          (template_hole 1,
           template_app (template_hole 0, template_var 1))))),
    ("CYK.subword_nth2",
     "?i + 1 <= length ?w ==> subword ?w ?i 1 = [?w ! ?i]",
     template_implication
      ([template_inequation
         (less_equals,
          template_app
           (template_app (template_hole 7, template_var 1),
            template_hole 6),
          template_app (template_hole 5, template_var 0))],
       template_equation
        (template_app
          (template_app
            (template_app (template_hole 3, template_var 0),
             template_var 1),
           template_hole 6),
         template_app
          (template_app
            (template_hole 2,
             template_app
              (template_app (template_hole 1, template_var 0),
               template_var 1)),
           template_hole 0)))),
    ("CYK.init2",
     "(init ?G ?w ?k = None) =
      (?w = [] | (EX a:set ?w. init_match ?G a = []))",
     template_bimplication
      (template_equation
        (template_app
          (template_app
            (template_app (template_hole 9, template_var 2),
             template_var 1),
           template_var 0),
         template_hole 8),
       template_predicate
        (
           template_app
            (template_app
              (template_hole 7,
               template_app
                (template_app (template_hole 6, template_var 1),
                 template_hole 5)),
             template_app
              (template_app
                (template_hole 4,
                 template_app (template_hole 3, template_var 1)),
               t_empty))
           ))),
    ("CYK.Lang_term",
     "?w : Lang ?G ?S ==> ALL x:set ?w. EX N. (N, RHS.Leaf x) : set ?G",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 8, template_var 2),
              template_app
               (template_app (template_hole 7, template_var 1),
                template_var 0))
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 6,
               template_app (template_hole 5, template_var 2)),
             t_empty)
           ))),
    ("CYK.init'",
     "?i + 1 <= length ?w ==> set (init' ?G ?w 0 (?i, 1)) = CYK ?G ?w ?i 1",
     template_implication
      ([template_inequation
         (less_equals,
          template_app
           (template_app (template_hole 8, template_var 2),
            template_hole 7),
          template_app (template_hole 6, template_var 1))],
       template_equation
        (template_app
          (template_hole 4,
           template_app
            (template_app
              (template_app
                (template_app (template_hole 3, template_var 0),
                 template_var 1),
               template_hole 2),
             template_app
              (template_app (template_hole 1, template_var 2),
               template_hole 7))),
         template_app
          (template_app
            (template_app
              (template_app (template_hole 0, template_var 0),
               template_var 1),
             template_var 2),
           template_hole 7)))),
    ("CYK.DSTEP_append",
     "?s -?G\<rightarrow> ?t ==>
      ?L \<cdot> ?s \<cdot> ?R -?G\<rightarrow> ?L \<cdot> ?t \<cdot> ?R",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_hole 3,
                template_app
                 (template_app (template_hole 2, template_var 4),
                  template_var 3)),
              template_app (template_hole 1, template_var 2))
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 3,
               template_app
                (template_app
                  (template_hole 2,
                   template_app
                    (template_app (template_hole 0, template_var 1),
                     template_app
                      (template_app (template_hole 0, template_var 4),
                       template_var 0))),
                 template_app
                  (template_app (template_hole 0, template_var 1),
                   template_app
                    (template_app (template_hole 0, template_var 3),
                     template_var 0)))),
             template_app (template_hole 1, template_var 2))
           ))),
    ("CYK.match_prods",
     "(?X : set (match_prods ?G ?ls ?rs)) =
      (EX A:set ?ls. EX B:set ?rs. (?X, Branch A B) : set ?G)",
     template_equation
      (template_app
        (template_app (template_hole 7, template_var 3),
         template_app
          (template_hole 6,
           template_app
            (template_app
              (template_app (template_hole 5, template_var 2),
               template_var 1),
             template_var 0))),
       template_app
        (template_app
          (template_hole 4, template_app (template_hole 6, template_var 1)),
         t_empty))),
    ("CYK.CYK_eq1",
     "?i + 1 <= length ?w ==>
      CYK ?G ?w ?i 1 = {S. (S, RHS.Leaf (?w ! ?i)) : set ?G}",
     template_implication
      ([template_inequation
         (less_equals,
          template_app
           (template_app (template_hole 10, template_var 2),
            template_hole 9),
          template_app (template_hole 8, template_var 1))],
       template_equation
        (template_app
          (template_app
            (template_app
              (template_app (template_hole 6, template_var 0),
               template_var 1),
             template_var 2),
           template_hole 9),
         template_app (template_hole 5, t_empty)))),
    ("CYK.subword_nth1",
     "[| ?i + ?j <= length ?w; ?k < ?j |]
      ==> subword ?w ?i ?j ! ?k = ?w ! (?i + ?k)",
     template_implication
      ([template_inequation
         (less_equals,
          template_app
           (template_app (template_hole 5, template_var 3), template_var 2),
          template_app (template_hole 4, template_var 1)),
        template_inequation (less_than, template_var 0, template_var 2)],
       template_equation
        (template_app
          (template_app
            (template_hole 1,
             template_app
              (template_app
                (template_app (template_hole 0, template_var 1),
                 template_var 3),
               template_var 2)),
           template_var 0),
         template_app
          (template_app (template_hole 1, template_var 1),
           template_app
            (template_app (template_hole 5, template_var 3),
             template_var 0))))),
    ("CYK.take_split",
     "[| ?n <= length ?xs; ?n <= ?m |]
      ==> take ?n ?xs \<cdot> take (?m - ?n) (drop ?n ?xs) = take ?m ?xs",
     template_implication
      ([template_inequation
         (less_equals, template_var 2,
          template_app (template_hole 5, template_var 1)),
        template_inequation (less_equals, template_var 2, template_var 0)],
       template_equation
        (template_app
          (template_app
            (template_hole 3,
             template_app
              (template_app (template_hole 2, template_var 2),
               template_var 1)),
           template_app
            (template_app
              (template_hole 2,
               template_app
                (template_app (template_hole 1, template_var 0),
                 template_var 2)),
             template_app
              (template_app (template_hole 0, template_var 2),
               template_var 1))),
         template_app
          (template_app (template_hole 2, template_var 0),
           template_var 1)))),
    ("CYK.DSTEP_trancl_term",
     "[| [Inl ?S] -?G\<rightarrow>\<^sup>+ ?t; Inr ?x : set ?t |]
      ==> EX N. (N, RHS.Leaf ?x) : set ?G",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_hole 14,
                template_app
                 (template_app
                   (template_hole 13,
                    template_app
                     (template_app
                       (template_hole 12,
                        template_app (template_hole 11, template_var 3)),
                      template_hole 10)),
                  template_var 2)),
              template_app
               (template_hole 9,
                template_app (template_hole 8, template_var 1)))
            ),
        template_predicate
         (
            template_app
             (template_app
               (template_hole 7,
                template_app (template_hole 6, template_var 0)),
              template_app (template_hole 5, template_var 2))
            )],
       template_predicate (template_app (template_hole 4, t_empty)))),
    ("CYK.prod_into_DSTEP2",
     "(?S, RHS.Leaf ?a) : set ?G ==>
      ?L \<cdot>
      [Inl ?S] \<cdot> ?R -?G\<rightarrow> ?L \<cdot> [Inr ?a] \<cdot> ?R",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_hole 11,
                template_app
                 (template_app (template_hole 10, template_var 4),
                  template_app (template_hole 9, template_var 3))),
              template_app (template_hole 8, template_var 2))
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 7,
               template_app
                (template_app
                  (template_hole 6,
                   template_app
                    (template_app (template_hole 5, template_var 1),
                     template_app
                      (template_app
                        (template_hole 5,
                         template_app
                          (template_app
                            (template_hole 4,
                             template_app
                              (template_hole 3, template_var 4)),
                           template_hole 2)),
                       template_var 0))),
                 template_app
                  (template_app (template_hole 5, template_var 1),
                   template_app
                    (template_app
                      (template_hole 5,
                       template_app
                        (template_app
                          (template_hole 4,
                           template_app (template_hole 1, template_var 3)),
                         template_hole 2)),
                     template_var 0)))),
             template_app (template_hole 0, template_var 2))
           ))),
    ("CYK.DSTEP_star_comp2",
     "[| ?l -?G\<rightarrow>\<^sup>* ?l'; ?r -?G\<rightarrow>\<^sup>* ?r' |]
      ==> ?l \<cdot> ?r -?G\<rightarrow>\<^sup>* ?l' \<cdot> ?r'",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_hole 4,
                template_app
                 (template_app (template_hole 3, template_var 4),
                  template_var 3)),
              template_app
               (template_hole 2,
                template_app (template_hole 1, template_var 2)))
            ),
        template_predicate
         (
            template_app
             (template_app
               (template_hole 4,
                template_app
                 (template_app (template_hole 3, template_var 1),
                  template_var 0)),
              template_app
               (template_hole 2,
                template_app (template_hole 1, template_var 2)))
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 4,
               template_app
                (template_app
                  (template_hole 3,
                   template_app
                    (template_app (template_hole 0, template_var 4),
                     template_var 1)),
                 template_app
                  (template_app (template_hole 0, template_var 3),
                   template_var 0))),
             template_app
              (template_hole 2,
               template_app (template_hole 1, template_var 2)))
           ))),
    ("CYK.prod_into_DSTEP1",
     "(?S, Branch ?A ?B) : set ?G ==>
      ?L \<cdot>
      [Inl ?S] \<cdot>
      ?R -?G\<rightarrow> ?L \<cdot> [Inl ?A, Inl ?B] \<cdot> ?R",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_hole 10,
                template_app
                 (template_app (template_hole 9, template_var 5),
                  template_app
                   (template_app (template_hole 8, template_var 4),
                    template_var 3))),
              template_app (template_hole 7, template_var 2))
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 6,
               template_app
                (template_app
                  (template_hole 5,
                   template_app
                    (template_app (template_hole 4, template_var 1),
                     template_app
                      (template_app
                        (template_hole 4,
                         template_app
                          (template_app
                            (template_hole 3,
                             template_app
                              (template_hole 2, template_var 5)),
                           template_hole 1)),
                       template_var 0))),
                 template_app
                  (template_app (template_hole 4, template_var 1),
                   template_app
                    (template_app
                      (template_hole 4,
                       template_app
                        (template_app
                          (template_hole 3,
                           template_app (template_hole 2, template_var 4)),
                         template_app
                          (template_app
                            (template_hole 3,
                             template_app
                              (template_hole 2, template_var 3)),
                           template_hole 1))),
                     template_var 0)))),
             template_app (template_hole 0, template_var 2))
           ))),
    ("CYK.DSTEP_star_comp1",
     "?l \<cdot> ?r -?G\<rightarrow>\<^sup>* ?t ==>
      EX l' r'.
         ?l -?G\<rightarrow>\<^sup>* l' &
         ?r -?G\<rightarrow>\<^sup>* r' & ?t = l' \<cdot> r'",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_hole 7,
                template_app
                 (template_app
                   (template_hole 6,
                    template_app
                     (template_app (template_hole 5, template_var 3),
                      template_var 2)),
                  template_var 1)),
              template_app
               (template_hole 4,
                template_app (template_hole 3, template_var 0)))
            )],
       template_predicate (template_app (template_hole 2, t_empty)))),
    ("CYK.subword_split",
     "[| ?i + ?j <= length ?w; 0 < ?k; ?k < ?j |]
      ==> subword ?w ?i ?j =
          subword ?w ?i ?k \<cdot> subword ?w (?i + ?k) (?j - ?k)",
     template_implication
      ([template_inequation
         (less_equals,
          template_app
           (template_app (template_hole 7, template_var 3), template_var 2),
          template_app (template_hole 6, template_var 1)),
        template_inequation (less_than, template_hole 4, template_var 0),
        template_inequation (less_than, template_var 0, template_var 2)],
       template_equation
        (template_app
          (template_app
            (template_app (template_hole 2, template_var 1),
             template_var 3),
           template_var 2),
         template_app
          (template_app
            (template_hole 1,
             template_app
              (template_app
                (template_app (template_hole 2, template_var 1),
                 template_var 3),
               template_var 0)),
           template_app
            (template_app
              (template_app (template_hole 2, template_var 1),
               template_app
                (template_app (template_hole 7, template_var 3),
                 template_var 0)),
             template_app
              (template_app (template_hole 0, template_var 2),
               template_var 0)))))),
    ("CYK.inner",
     "(?X : set (inner ?G ?T ?i ?k ?j)) =
      (EX l>=?k.
          l < ?j &
          ?X : set (match_prods ?G (?T (?i, l)) (?T (?i + l, ?j - l))))",
     template_equation
      (template_app
        (template_app (template_hole 10, template_var 5),
         template_app
          (template_hole 9,
           template_app
            (template_app
              (template_app
                (template_app
                  (template_app (template_hole 8, template_var 4),
                   template_var 3),
                 template_var 2),
               template_var 1),
             template_var 0))),
       template_app (template_hole 7, t_empty))),
    ("CYK.DSTEP_comp",
     "?l \<cdot> ?r -?G\<rightarrow> ?t ==>
      EX l' r'.
         ?l -?G\<rightarrow>\<^sup>= l' &
         ?r -?G\<rightarrow>\<^sup>= r' & ?t = l' \<cdot> r'",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_hole 8,
                template_app
                 (template_app
                   (template_hole 7,
                    template_app
                     (template_app (template_hole 6, template_var 3),
                      template_var 2)),
                  template_var 1)),
              template_app (template_hole 5, template_var 0))
            )],
       template_predicate (template_app (template_hole 4, t_empty)))),
    ("CYK.Lang_eq2",
     "(?w : Lang ?G ?S & 1 < length ?w) =
      (EX A B.
          (?S, Branch A B) : set ?G &
          (EX l r. ?w = l \<cdot> r & l : Lang ?G A & r : Lang ?G B))",
     template_equation
      (template_app
        (template_app
          (template_hole 13,
           template_app
            (template_app (template_hole 12, template_var 2),
             template_app
              (template_app (template_hole 11, template_var 1),
               template_var 0))),
         template_app
          (template_app (template_hole 10, template_hole 9),
           template_app (template_hole 8, template_var 2))),
       template_app (template_hole 7, t_empty))),
    ("CYK.subword_split2",
     "[| subword ?w ?i ?j = ?l \<cdot> ?r; ?i + ?j <= length ?w;
         0 < length ?l; 0 < length ?r |]
      ==> ?l = subword ?w ?i (length ?l) &
          ?r = subword ?w (?i + length ?l) (?j - length ?l)",
     template_implication
      ([template_equation
         (template_app
           (template_app
             (template_app (template_hole 8, template_var 4),
              template_var 3),
            template_var 2),
          template_app
           (template_app (template_hole 7, template_var 1),
            template_var 0)),
        template_inequation
         (less_equals,
          template_app
           (template_app (template_hole 5, template_var 3), template_var 2),
          template_app (template_hole 4, template_var 4)),
        template_inequation
         (less_than, template_hole 2,
          template_app (template_hole 4, template_var 1)),
        template_inequation
         (less_than, template_hole 2,
          template_app (template_hole 4, template_var 0))],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 1,
               template_app
                (template_app (template_hole 9, template_var 1),
                 template_app
                  (template_app
                    (template_app (template_hole 8, template_var 4),
                     template_var 3),
                   template_app (template_hole 4, template_var 1)))),
             template_app
              (template_app (template_hole 9, template_var 0),
               template_app
                (template_app
                  (template_app (template_hole 8, template_var 4),
                   template_app
                    (template_app (template_hole 5, template_var 3),
                     template_app (template_hole 4, template_var 1))),
                 template_app
                  (template_app (template_hole 0, template_var 2),
                   template_app (template_hole 4, template_var 1)))))
           ))),
    ("CYK.CYK_eq2",
     "[| ?i + ?j <= length ?w; 1 < ?j |]
      ==> CYK ?G ?w ?i ?j =
          {uu_.
           EX X A B k.
              uu_ = X &
              (X, Branch A B) : set ?G &
              A : CYK ?G ?w ?i k &
              B : CYK ?G ?w (?i + k) (?j - k) & 1 <= k & k < ?j}",
     template_implication
      ([template_inequation
         (less_equals,
          template_app
           (template_app (template_hole 16, template_var 3),
            template_var 2),
          template_app (template_hole 15, template_var 1)),
        template_inequation (less_than, template_hole 13, template_var 2)],
       template_equation
        (template_app
          (template_app
            (template_app
              (template_app (template_hole 11, template_var 0),
               template_var 1),
             template_var 3),
           template_var 2),
         template_app (template_hole 10, t_empty)))),
    ("CYK.DSTEP_D",
     "?s -?G\<rightarrow> ?t ==>
      EX L N R rhs.
         ?s = L \<cdot> [Inl N] \<cdot> R &
         (N, rhs) : set ?G &
         (ALL A B.
             rhs = Branch A B --> ?t = L \<cdot> [Inl A, Inl B] \<cdot> R) &
         (ALL x. rhs = RHS.Leaf x --> ?t = L \<cdot> [Inr x] \<cdot> R)",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_hole 21,
                template_app
                 (template_app (template_hole 20, template_var 2),
                  template_var 1)),
              template_app (template_hole 19, template_var 0))
            )],
       template_predicate (template_app (template_hole 18, t_empty)))),
    ("CYK.main",
     "[| 1 < ?j; ?i + ?j <= length ?w;
         !!i' j'.
            [| j' < ?j; 1 <= j'; i' + j' <= length ?w |]
            ==> set (?T (i', j')) = CYK ?G ?w i' j';
         !!i'. [| i' < ?i; i' + ?j <= length ?w |]
               ==> set (?T (i', ?j)) = CYK ?G ?w i' ?j;
         1 <= ?j'; ?i' + ?j' <= length ?w |]
      ==> set (main ?G ?T (length ?w) ?i ?j (?i', ?j')) =
          CYK ?G ?w ?i' ?j'",
     template_implication
      ([template_inequation (less_than, template_hole 9, template_var 6),
        template_inequation
         (less_equals,
          template_app
           (template_app (template_hole 7, template_var 5), template_var 6),
          template_app (template_hole 6, template_var 4)),
        template_predicate (template_app (template_hole 5, t_empty)),
        template_predicate (template_app (template_hole 5, t_empty)),
        template_inequation (less_equals, template_hole 9, template_var 1),
        template_inequation
         (less_equals,
          template_app
           (template_app (template_hole 7, template_var 0), template_var 1),
          template_app (template_hole 6, template_var 4))],
       template_equation
        (template_app
          (template_hole 3,
           template_app
            (template_app
              (template_app
                (template_app
                  (template_app
                    (template_app (template_hole 0, template_var 2),
                     template_var 3),
                   template_app (template_hole 6, template_var 4)),
                 template_var 5),
               template_var 6),
             template_app
              (template_app (template_hole 2, template_var 0),
               template_var 1))),
         template_app
          (template_app
            (template_app
              (template_app (template_hole 1, template_var 2),
               template_var 4),
             template_var 0),
           template_var 1))))]:
   (string * thm * template) list
### theory "Draft.CYKMoreTemplates"
### 0.311s elapsed time, 0.418s cpu time, 0.000s GC time
val it = (): unit
