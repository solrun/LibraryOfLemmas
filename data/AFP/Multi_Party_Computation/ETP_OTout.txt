Loading theory "Draft.Templates" (required by "Draft.ETP_OTTemplates" via "Draft.ExtrEqs")
Loading theory "HOL-Library.BigO" (required by "Draft.ETP_OTTemplates" via "Draft.ExtrEqs")
Loading theory "Draft.ETP" (required by "Draft.ETP_OTTemplates" via "Draft.ETP_OT")
Loading theory "Draft.OT_Functionalities" (required by "Draft.ETP_OTTemplates" via "Draft.ETP_OT")
datatype template_term
=
     t_empty
   | template_app of template_term * template_term
   | template_hole of int
   | template_var of int
datatype sign
= equals | greater_equals | greater_than | less_equals | less_than
datatype template
=
     template_bimplication of template * template
   | template_dunno
   | template_equation of template_term * template_term
   | template_implication of template list * template
   | template_inequation of sign * template_term * template_term
   | template_negation of template
   | template_predicate of template_term
constructor t_empty: template_term
constructor template_app: template_term * template_term -> template_term
constructor template_hole: int -> template_term
constructor template_var: int -> template_term
constructor equals: sign
constructor greater_equals: sign
constructor greater_than: sign
constructor less_equals: sign
constructor less_than: sign
constructor template_bimplication: template * template -> template
constructor template_dunno: template
constructor template_equation: template_term * template_term -> template
constructor template_implication: template list * template -> template
constructor template_inequation:
   sign * template_term * template_term -> template
constructor template_negation: template -> template
constructor template_predicate: template_term -> template
val vfs = fn: term -> (indexname * typ) list * (string * typ) list
val indexOf = fn: ''a list -> ''a -> int -> int
val has_eq = fn: term -> bool
val term2template = fn:
   (indexname * typ) list -> (string * typ) list -> term -> template_term
val lemma2predicate = fn: term -> term -> template
val makeTemplatewithContext = fn: term -> term -> template
val lemma2template = fn: term -> template
val thm2template = fn: thm -> template
val tterm2string = fn: template_term -> string
val template2string = fn: template -> string
val t = "height ?t <= size ?t": thm
val th =
   Const ("HOL.Trueprop", "bool => prop") $
     (Const ("Orderings.ord_class.less_eq", "nat => nat => bool") $
       (Const ("Tree.height_class.height", "?'a tree => nat") $
         Var (("t", 0), "?'a tree")) $
       (Const ("Nat.size_class.size", "?'a tree => nat") $
         Var (("t", 0), "?'a tree"))):
   term
### theory "Draft.OT_Functionalities"
### 0.087s elapsed time, 0.403s cpu time, 0.000s GC time
Loading theory "Draft.Semi_Honest_Def" (required by "Draft.ETP_OTTemplates" via "Draft.ETP_OT")
### theory "Draft.Templates"
### 0.088s elapsed time, 0.406s cpu time, 0.000s GC time
locale etp
  fixes I :: "('index * 'trap) spmf"
    and domain :: "'index => 'range set"
    and range :: "'index => 'range set"
    and F :: "'index => 'range => 'range"
    and F\<^sub>i\<^sub>n\<^sub>v :: "'index => 'trap => 'range => 'range"
    and B :: "'index => 'range => bool"
  assumes "etp I domain range F F\<^sub>i\<^sub>n\<^sub>v"
locale sim_det_def
  fixes R1 :: "'msg1 => 'msg2 => 'view1 spmf"
    and S1 :: "'msg1 => 'out1 => 'view1 spmf"
    and R2 :: "'msg1 => 'msg2 => 'view2 spmf"
    and S2 :: "'msg2 => 'out2 => 'view2 spmf"
    and funct :: "'msg1 => 'msg2 => ('out1 * 'out2) spmf"
    and protocol :: "'msg1 => 'msg2 => ('out1 * 'out2) spmf"
  assumes "sim_det_def R1 S1 R2 S2 funct"
### theory "Draft.ETP"
### 0.206s elapsed time, 0.753s cpu time, 0.027s GC time
locale sim_non_det_def
  fixes R1 :: "'msg1 => 'msg2 => ('view1 * 'out1 * 'out2) spmf"
    and S1 :: "'msg1 => 'out1 => 'view1 spmf"
    and Out1 :: "'msg1 => 'msg2 => 'out1 => ('out1 * 'out2) spmf"
    and R2 :: "'msg1 => 'msg2 => ('view2 * 'out1 * 'out2) spmf"
    and S2 :: "'msg2 => 'out2 => 'view2 spmf"
    and Out2 :: "'msg2 => 'msg1 => 'out2 => ('out1 * 'out2) spmf"
    and funct :: "'msg1 => 'msg2 => ('out1 * 'out2) spmf"
locale secret_sharing_scheme
  fixes share :: "'input_out => ('share * 'share) spmf"
    and reconstruct :: "'share * 'share => 'input_out spmf"
    and F :: "('input_out => 'input_out => 'input_out spmf) set"
### theory "Draft.Semi_Honest_Def"
### 0.358s elapsed time, 0.824s cpu time, 0.027s GC time
Loading theory "Draft.ETP_OT" (required by "Draft.ETP_OTTemplates")
### theory "HOL-Library.BigO"
### 0.701s elapsed time, 1.766s cpu time, 0.193s GC time
Loading theory "Draft.ExtrEqs" (required by "Draft.ETP_OTTemplates")
val eqpattern =
   Pattern
    (
       Const ("HOL.Trueprop", "bool => prop") $
         (Const ("HOL.eq", "?'a => ?'a => bool") $
           Var (("_dummy_", 1), "?'a") $ Var (("_dummy_", 2), "?'a"))
       ):
   term Find_Theorems.criterion
val badeqpattern = Pattern (Const ("Pure.eq", "?'a => ?'a => prop")):
   term Find_Theorems.criterion
val undefpattern =
   Pattern
    (
       Const ("HOL.Trueprop", "bool => prop") $
         (Const ("HOL.eq", "?'a => ?'a => bool") $
           Var (("_dummy_", 1), "?'a") $ Const ("HOL.undefined", "?'a"))
       ):
   term Find_Theorems.criterion
val thmpattern =
   Pattern
    (Const ("HOL.Trueprop", "bool => prop") $ Var (("_dummy_", 1), "bool")):
   term Find_Theorems.criterion
val badnames =
   ["*nitpick*", "*Nitpick*", "*full_exhaustive*", "*_def*", "Enum.finite*",
    "*Quickcheck*", "ATP*", "*Nunchaku*", "*Code*", "*BNF*", "*SMT*",
    "*.*.*"]:
   string list
val unwanted_names =
   [(false, Name "*nitpick*"), (false, Name "*Nitpick*"),
    (false, Name "*full_exhaustive*"), (false, Name "*_def*"),
    (false, Name "Enum.finite*"), (false, Name "*Quickcheck*"),
    (false, Name "ATP*"), (false, Name "*Nunchaku*"),
    (false, Name "*Code*"), (false, Name "*BNF*"), (false, Name "*SMT*"),
    (false, Name "*.*.*")]:
   (bool * term Find_Theorems.criterion) list
val has_vars = fn: term -> bool
val get_all_eqs = fn: string -> Proof.context -> (string * thm) list
val get_all_thms = fn: string -> Proof.context -> (string * thm) list
val get_noneq_thms = fn: string -> Proof.context -> (string * thm) list
val template_eqs = fn:
   string -> Proof.context -> (string * thm * template) list
val template_thms = fn:
   string -> Proof.context -> (string * thm * template) list
### theory "Draft.ExtrEqs"
### 0.490s elapsed time, 1.002s cpu time, 0.071s GC time
locale ETP_base
  fixes I :: "('index * 'trap) spmf"
    and domain :: "'index => 'range set"
    and range :: "'index => 'range set"
    and B :: "'index => 'range => bool"
    and F :: "'index => 'range => 'range"
    and F\<^sub>i\<^sub>n\<^sub>v :: "'index => 'trap => 'range => 'range"
  assumes "ETP_base I domain range F F\<^sub>i\<^sub>n\<^sub>v"
locale ETP_sec_para
  fixes I :: "nat => ('index * 'trap) spmf"
    and domain :: "'index => 'range set"
    and range :: "'index => 'range set"
    and f :: "'index => 'range => 'range"
    and F :: "'index => 'range => 'range"
    and F\<^sub>i\<^sub>n\<^sub>v :: "'index => 'trap => 'range => 'range"
    and B :: "'index => 'range => bool"
  assumes "ETP_sec_para I domain range F F\<^sub>i\<^sub>n\<^sub>v"
### theory "Draft.ETP_OT"
### 2.711s elapsed time, 3.647s cpu time, 0.380s GC time
Loading theory "Draft.ETP_OTTemplates"
val templateLemmas =
   [("ETP_OT.inj_on_Not", "inj_on Not ?A",
     template_predicate
      (
         template_app
          (template_app (template_hole 1, template_hole 0), template_var 0)
         )),
    ("ETP_OT.if_else_True", "(if ?b then ?x else True) = (?b --> ?x)",
     template_equation
      (template_app
        (template_app
          (template_app (template_hole 2, template_var 1), template_var 0),
         template_hole 1),
       template_app
        (template_app (template_hole 0, template_var 1), template_var 0))),
    ("ETP_OT.if_then_True", "(if ?b then True else ?x) = (~ ?b --> ?x)",
     template_equation
      (template_app
        (template_app
          (template_app (template_hole 3, template_var 1), template_hole 2),
         template_var 0),
       template_app
        (template_app
          (template_hole 1, template_app (template_hole 0, template_var 1)),
         template_var 0))),
    ("ETP_OT.if_False_True",
     "(if ?x then False else ~ False) = (if ?x then False else True)",
     template_equation
      (template_app
        (template_app
          (template_app (template_hole 3, template_var 0), template_hole 2),
         template_app (template_hole 1, template_hole 2)),
       template_app
        (template_app
          (template_app (template_hole 3, template_var 0), template_hole 2),
         template_hole 0)))]:
   (string * thm * template) list
### theory "Draft.ETP_OTTemplates"
### 2.040s elapsed time, 2.791s cpu time, 0.738s GC time
val it = (): unit
