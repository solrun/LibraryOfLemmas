   [("Number_Theory_Aux.fermat_little",
     "prime ?P ==> [?x ^ ?P = ?x] (mod ?P)",
     template_implication
      ([template_predicate
         (template_app (template_hole 2, template_var 1))],
       template_predicate
        (
           template_app
            (template_app
              (template_app
                (template_hole 1,
                 template_app
                  (template_app (template_hole 0, template_var 0),
                   template_var 1)),
               template_var 0),
             template_var 1)
           ))),
    ("Number_Theory_Aux.inverse",
     "[| gcd ?x ?q = 1; 0 < ?q |]
      ==> [int ?x * fst (bezw ?x ?q) = 1] (mod int ?q)",
     template_implication
      ([template_equation
         (template_app
           (template_app (template_hole 9, template_var 1), template_var 0),
          template_hole 8),
        template_inequation (less_than, template_hole 6, template_var 0)],
       template_predicate
        (
           template_app
            (template_app
              (template_app
                (template_hole 5,
                 template_app
                  (template_app
                    (template_hole 4,
                     template_app (template_hole 3, template_var 1)),
                   template_app
                    (template_hole 2,
                     template_app
                      (template_app (template_hole 1, template_var 1),
                       template_var 0)))),
               template_hole 0),
             template_app (template_hole 3, template_var 0))
           ))),
    ("Number_Theory_Aux.bezw_inverse",
     "gcd ?e ?N = 1 ==>
      [nat (int ?e) *
       nat (fst (bezw ?e ?N) mod int ?N) = 1] (mod nat (int ?N))",
     template_implication
      ([template_equation
         (template_app
           (template_app (template_hole 8, template_var 1), template_var 0),
          template_hole 7)],
       template_predicate
        (
           template_app
            (template_app
              (template_app
                (template_hole 6,
                 template_app
                  (template_app
                    (template_hole 5,
                     template_app
                      (template_hole 4,
                       template_app (template_hole 3, template_var 1))),
                   template_app
                    (template_hole 4,
                     template_app
                      (template_app
                        (template_hole 2,
                         template_app
                          (template_hole 1,
                           template_app
                            (template_app (template_hole 0, template_var 1),
                             template_var 0))),
                       template_app (template_hole 3, template_var 0))))),
               template_hole 7),
             template_app
              (template_hole 4,
               template_app (template_hole 3, template_var 0)))
           ))),
    ("Number_Theory_Aux.prod_not_prime",
     "[| prime ?x; prime ?y; 2 < ?x; 2 < ?y |]
      ==> ~ prime ((?x - 1) * (?y - 1))",
     template_implication
      ([template_predicate (template_app (template_hole 8, template_var 1)),
        template_predicate (template_app (template_hole 8, template_var 0)),
        template_inequation
         (less_than,
          template_app
           (template_hole 6,
            template_app (template_hole 5, template_hole 4)),
          template_var 1),
        template_inequation
         (less_than,
          template_app
           (template_hole 6,
            template_app (template_hole 5, template_hole 4)),
          template_var 0)],
       template_negation
        (
           template_predicate
            (
               template_app
                (template_hole 8,
                 template_app
                  (template_app
                    (template_hole 2,
                     template_app
                      (template_app (template_hole 1, template_var 1),
                       template_hole 0)),
                   template_app
                    (template_app (template_hole 1, template_var 0),
                     template_hole 0)))
               )
           ))),
    ("Number_Theory_Aux.ex_inverse",
     "[| coprime ?e ((?P - 1) * (?Q - 1)); prime ?P; prime ?Q; ?P ~= ?Q |]
      ==> EX d. [?e * d = 1] (mod ?P - 1) & d ~= 0",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 10, template_var 2),
              template_app
               (template_app
                 (template_hole 9,
                  template_app
                   (template_app (template_hole 8, template_var 1),
                    template_hole 7)),
                template_app
                 (template_app (template_hole 8, template_var 0),
                  template_hole 7)))
            ),
        template_predicate (template_app (template_hole 6, template_var 1)),
        template_predicate (template_app (template_hole 6, template_var 0)),
        template_negation
         (template_equation (template_var 1, template_var 0))],
       template_predicate (template_app (template_hole 3, t_empty)))),
    ("Number_Theory_Aux.ex_k1_k2",
     "[| coprime ?e ((?P - 1) * (?Q - 1)); [?e * ?d = 1] (mod ?P - 1) |]
      ==> EX k1 k2. ?e * ?d + k1 * (?P - 1) = 1 + k2 * (?P - 1)",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 7, template_var 3),
              template_app
               (template_app
                 (template_hole 6,
                  template_app
                   (template_app (template_hole 5, template_var 2),
                    template_hole 4)),
                template_app
                 (template_app (template_hole 5, template_var 1),
                  template_hole 4)))
            ),
        template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_hole 3,
                  template_app
                   (template_app (template_hole 6, template_var 3),
                    template_var 0)),
                template_hole 4),
              template_app
               (template_app (template_hole 5, template_var 2),
                template_hole 4))
            )],
       template_predicate (template_app (template_hole 2, t_empty)))),
    ("Number_Theory_Aux.ex_k_mod",
     "[| coprime ?e ((?P - 1) * (?Q - 1)); ?P ~= ?Q; prime ?P; prime ?Q;
         ?d ~= 0; [?e * ?d = 1] (mod ?P - 1) |]
      ==> EX k. ?e * ?d = 1 + k * (?P - 1)",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 10, template_var 3),
              template_app
               (template_app
                 (template_hole 9,
                  template_app
                   (template_app (template_hole 8, template_var 2),
                    template_hole 7)),
                template_app
                 (template_app (template_hole 8, template_var 1),
                  template_hole 7)))
            ),
        template_negation
         (template_equation (template_var 2, template_var 1)),
        template_predicate (template_app (template_hole 4, template_var 2)),
        template_predicate (template_app (template_hole 4, template_var 1)),
        template_negation
         (template_equation (template_var 0, template_hole 3)),
        template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_hole 2,
                  template_app
                   (template_app (template_hole 9, template_var 3),
                    template_var 0)),
                template_hole 7),
              template_app
               (template_app (template_hole 8, template_var 2),
                template_hole 7))
            )],
       template_predicate (template_app (template_hole 1, t_empty))))]
