Loading theory "Draft.CArrays" (required by "Draft.FileRefinementMoreTemplates" via "Draft.FileRefinement")
Loading theory "Draft.ResizableArrays" (required by "Draft.FileRefinementMoreTemplates" via "Draft.FileRefinement")
Loading theory "HOL-Library.Function_Algebras" (required by "Draft.FileRefinementMoreTemplates" via "Draft.ExtrEqs" via "HOL-Library.BigO")
Loading theory "HOL-Library.Nat_Bijection" (required by "Draft.FileRefinementMoreTemplates" via "Draft.ExtrEqs" via "HOL-Library.Stream")
instantiation
  fun :: (type, plus) plus
  plus_fun == plus :: ('a => 'b) => ('a => 'b) => 'a => 'b
instantiation
  fun :: (type, zero) zero
  zero_fun == zero_class.zero :: 'a => 'b
instantiation
  fun :: (type, times) times
  times_fun == times :: ('a => 'b) => ('a => 'b) => 'a => 'b
### theory "Draft.CArrays"
### 0.055s elapsed time, 0.246s cpu time, 0.000s GC time
Loading theory "HOL-Library.Set_Algebras" (required by "Draft.FileRefinementMoreTemplates" via "Draft.ExtrEqs" via "HOL-Library.BigO")
instantiation
  fun :: (type, one) one
  one_fun == one_class.one :: 'a => 'b
### theory "Draft.ResizableArrays"
### 0.074s elapsed time, 0.323s cpu time, 0.000s GC time
Loading theory "HOL-Library.Tree" (required by "Draft.FileRefinementMoreTemplates" via "Draft.ExtrEqs" via "Draft.Templates")
instantiation
  set :: (plus) plus
  plus_set == plus :: 'a set => 'a set => 'a set
instantiation
  set :: (times) times
  times_set == times :: 'a set => 'a set => 'a set
instantiation
  set :: (zero) zero
  zero_set == zero_class.zero :: 'a set
Found termination order: "(%p. size (snd p)) <*mlex*> {}"
instantiation
  set :: (one) one
  one_set == one_class.one :: 'a set
### theory "HOL-Library.Function_Algebras"
### 0.142s elapsed time, 0.580s cpu time, 0.046s GC time
Loading theory "Draft.FileRefinement" (required by "Draft.FileRefinementMoreTemplates")
Found termination order: "size_list size <*mlex*> {}"
### theory "HOL-Library.Set_Algebras"
### 0.223s elapsed time, 0.875s cpu time, 0.046s GC time
Loading theory "HOL-Library.BigO" (required by "Draft.FileRefinementMoreTemplates" via "Draft.ExtrEqs")
### theory "HOL-Library.Nat_Bijection"
### 0.345s elapsed time, 1.374s cpu time, 0.130s GC time
Loading theory "HOL-Library.Stream" (required by "Draft.FileRefinementMoreTemplates" via "Draft.ExtrEqs")
consts
  left :: "'a tree => 'a tree"
consts
  right :: "'a tree => 'a tree"
Found termination order: "size <*mlex*> {}"
consts
  shift :: "'a list => 'a stream => 'a stream"
Found termination order: "size <*mlex*> {}"
Proofs for coinductive predicate(s) "streamsp"
  Proving monotonicity ...
Found termination order: "size <*mlex*> {}"
consts
  oAbstFn :: "CFile option => (nat * (nat => byte)) option"
consts
  snth :: "'a stream => nat => 'a"
### theory "Draft.FileRefinement"
### 0.721s elapsed time, 2.848s cpu time, 0.213s GC time
consts
  stake :: "nat => 'a stream => 'a list"
class height = type +
  fixes height :: "'a => nat"
instantiation
  tree :: (type) height
  height_tree == height :: 'a tree => nat
consts
  sdrop :: "nat => 'a stream => 'a stream"
Found termination order: "size <*mlex*> {}"
consts
  sfilter :: "('a => bool) => 'a stream => 'a stream"
consts
  cycle :: "'a list => 'a stream"
Found termination order: "size <*mlex*> {}"
consts
  siterate :: "('a => 'a) => 'a => 'a stream"
consts
  flat :: "'a list stream => 'a stream"
Found termination order: "size <*mlex*> {}"
### theory "HOL-Library.BigO"
### 1.030s elapsed time, 3.660s cpu time, 0.881s GC time
consts
  sinterleave :: "'a stream => 'a stream => 'a stream"
consts
  szip :: "'a stream => 'b stream => ('a * 'b) stream"
Found termination order: "size <*mlex*> {}"
consts
  smap2 :: "('a => 'b => 'c) => 'a stream => 'b stream => 'c stream"
### theory "HOL-Library.Stream"
### 1.057s elapsed time, 3.599s cpu time, 0.797s GC time
Found termination order: "size <*mlex*> {}"
Found termination order: "size <*mlex*> {}"
Found termination order: "size <*mlex*> {}"
Found termination order: "(%p. size (fst p)) <*mlex*> {}"
Found termination order: "size <*mlex*> {}"
Found termination order: "(%p. size (snd p)) <*mlex*> {}"
Found termination order: "size <*mlex*> {}"
### theory "HOL-Library.Tree"
### 1.945s elapsed time, 5.376s cpu time, 1.030s GC time
Loading theory "Draft.Templates" (required by "Draft.FileRefinementMoreTemplates" via "Draft.ExtrEqs")
datatype template_term
=
     t_empty
   | template_app of template_term * template_term
   | template_hole of int
   | template_var of int
datatype sign
= equals | greater_equals | greater_than | less_equals | less_than
datatype template
=
     template_bimplication of template * template
   | template_dunno
   | template_equation of template_term * template_term
   | template_implication of template list * template
   | template_inequation of sign * template_term * template_term
   | template_negation of template
   | template_predicate of template_term
constructor t_empty: template_term
constructor template_app: template_term * template_term -> template_term
constructor template_hole: int -> template_term
constructor template_var: int -> template_term
constructor equals: sign
constructor greater_equals: sign
constructor greater_than: sign
constructor less_equals: sign
constructor less_than: sign
constructor template_bimplication: template * template -> template
constructor template_dunno: template
constructor template_equation: template_term * template_term -> template
constructor template_implication: template list * template -> template
constructor template_inequation:
   sign * template_term * template_term -> template
constructor template_negation: template -> template
constructor template_predicate: template_term -> template
val vfs = fn: term -> (indexname * typ) list * (string * typ) list
val indexOf = fn: ''a list -> ''a -> int -> int
val has_eq = fn: term -> bool
val term2template = fn:
   (indexname * typ) list -> (string * typ) list -> term -> template_term
val lemma2predicate = fn: term -> term -> template
val makeTemplatewithContext = fn: term -> term -> template
val lemma2template = fn: term -> template
val thm2template = fn: thm -> template
val tterm2string = fn: template_term -> string
val template2string = fn: template -> string
val t = "height ?t <= size ?t": thm
val th =
   Const ("HOL.Trueprop", "bool => prop") $
     (Const ("Orderings.ord_class.less_eq", "nat => nat => bool") $
       (Const ("Tree.height_class.height", "?'a tree => nat") $
         Var (("t", 0), "?'a tree")) $
       (Const ("Nat.size_class.size", "?'a tree => nat") $
         Var (("t", 0), "?'a tree"))):
   term
### theory "Draft.Templates"
### 0.047s elapsed time, 0.063s cpu time, 0.000s GC time
Loading theory "Draft.ExtrEqs" (required by "Draft.FileRefinementMoreTemplates")
val eqpattern =
   Pattern
    (
       Const ("HOL.Trueprop", "bool => prop") $
         (Const ("HOL.eq", "?'a => ?'a => bool") $
           Var (("_dummy_", 1), "?'a") $ Var (("_dummy_", 2), "?'a"))
       ):
   term Find_Theorems.criterion
val badeqpattern = Pattern (Const ("Pure.eq", "?'a => ?'a => prop")):
   term Find_Theorems.criterion
val undefpattern =
   Pattern
    (
       Const ("HOL.Trueprop", "bool => prop") $
         (Const ("HOL.eq", "?'a => ?'a => bool") $
           Var (("_dummy_", 1), "?'a") $ Const ("HOL.undefined", "?'a"))
       ):
   term Find_Theorems.criterion
val thmpattern =
   Pattern
    (Const ("HOL.Trueprop", "bool => prop") $ Var (("_dummy_", 1), "bool")):
   term Find_Theorems.criterion
val badnames =
   ["*nitpick*", "*Nitpick*", "*full_exhaustive*", "*_def*", "Enum.finite*",
    "*Quickcheck*", "ATP*", "*Nunchaku*", "*Code*", "*BNF*", "*SMT*",
    "*.*.*"]:
   string list
val unwanted_names =
   [(false, Name "*nitpick*"), (false, Name "*Nitpick*"),
    (false, Name "*full_exhaustive*"), (false, Name "*_def*"),
    (false, Name "Enum.finite*"), (false, Name "*Quickcheck*"),
    (false, Name "ATP*"), (false, Name "*Nunchaku*"),
    (false, Name "*Code*"), (false, Name "*BNF*"), (false, Name "*SMT*"),
    (false, Name "*.*.*")]:
   (bool * term Find_Theorems.criterion) list
val has_vars = fn: term -> bool
val get_all_eqs = fn: string -> Proof.context -> (string * thm) list
val get_all_thms = fn: string -> Proof.context -> (string * thm) list
val get_noneq_thms = fn: string -> Proof.context -> (string * thm) list
val template_eqs = fn:
   string -> Proof.context -> (string * thm * template) list
val template_thms = fn:
   string -> Proof.context -> (string * thm * template) list
### theory "Draft.ExtrEqs"
### 0.447s elapsed time, 0.497s cpu time, 0.060s GC time
Loading theory "Draft.FileRefinementMoreTemplates"
val templateLemmas =
   [("FileRefinement.readCorrect", "cfRead ?cfile = afRead (abstFn ?cfile)",
     template_equation
      (template_app (template_hole 2, template_var 0),
       template_app
        (template_hole 1, template_app (template_hole 0, template_var 0)))),
    ("FileRefinement.fileSizeCorrect",
     "cfSize ?cfile = afSize (abstFn ?cfile)",
     template_equation
      (template_app (template_hole 2, template_var 0),
       template_app
        (template_hole 1, template_app (template_hole 0, template_var 0)))),
    ("FileRefinement.fileSizeIncreases",
     "cfWrite ?cfile1.0 ?index ?value = Some ?cfile2.0 ==>
      fileSize ?cfile1.0 <= fileSize ?cfile2.0",
     template_implication
      ([template_equation
         (template_app
           (template_app
             (template_app (template_hole 3, template_var 3),
              template_var 2),
            template_var 1),
          template_app (template_hole 2, template_var 0))],
       template_inequation
        (less_equals, template_app (template_hole 0, template_var 3),
         template_app (template_hole 0, template_var 0)))),
    ("FileRefinement.writeCorrect",
     "reachabilityInvariant ?cfile1.0 ==>
      oAbstFn (cfWrite ?cfile1.0 ?index ?value) =
      afWrite (abstFn ?cfile1.0) ?index ?value",
     template_implication
      ([template_predicate
         (template_app (template_hole 5, template_var 2))],
       template_equation
        (template_app
          (template_hole 3,
           template_app
            (template_app
              (template_app (template_hole 2, template_var 2),
               template_var 1),
             template_var 0)),
         template_app
          (template_app
            (template_app
              (template_hole 1,
               template_app (template_hole 0, template_var 2)),
             template_var 1),
           template_var 0)))),
    ("FileRefinement.writeFailCorrect",
     "cfWrite ?cfile1.0 ?index ?value = None ==>
      afWrite (abstFn ?cfile1.0) ?index ?value = None",
     template_implication
      ([template_equation
         (template_app
           (template_app
             (template_app (template_hole 5, template_var 2),
              template_var 1),
            template_var 0),
          template_hole 4)],
       template_equation
        (template_app
          (template_app
            (template_app
              (template_hole 2,
               template_app (template_hole 1, template_var 2)),
             template_var 1),
           template_var 0),
         template_hole 0))),
    ("FileRefinement.cfWritePreservesLastBlockInvariant",
     "[| reachabilityInvariant ?cfile1.0;
         cfWrite ?cfile1.0 ?byteIndex ?value = Some ?cfile2.0 |]
      ==> lastBlockInvariant ?cfile2.0",
     template_implication
      ([template_predicate (template_app (template_hole 4, template_var 3)),
        template_equation
         (template_app
           (template_app
             (template_app (template_hole 2, template_var 3),
              template_var 2),
            template_var 1),
          template_app (template_hole 1, template_var 0))],
       template_predicate
        (template_app (template_hole 0, template_var 0)))),
    ("FileRefinement.cfWritePreservesNextFreeBlockInvariant",
     "[| reachabilityInvariant ?cfile1.0;
         cfWrite ?cfile1.0 ?byteIndex ?value = Some ?cfile2.0 |]
      ==> nextFreeBlockInvariant ?cfile2.0",
     template_implication
      ([template_predicate (template_app (template_hole 4, template_var 3)),
        template_equation
         (template_app
           (template_app
             (template_app (template_hole 2, template_var 3),
              template_var 2),
            template_var 1),
          template_app (template_hole 1, template_var 0))],
       template_predicate
        (template_app (template_hole 0, template_var 0)))),
    ("FileRefinement.cfWritePreserves",
     "[| reachabilityInvariant ?cfile1.0;
         cfWrite ?cfile1.0 ?byteIndex ?value = Some ?cfile2.0 |]
      ==> reachabilityInvariant ?cfile2.0",
     template_implication
      ([template_predicate (template_app (template_hole 3, template_var 3)),
        template_equation
         (template_app
           (template_app
             (template_app (template_hole 1, template_var 3),
              template_var 2),
            template_var 1),
          template_app (template_hole 0, template_var 0))],
       template_predicate
        (template_app (template_hole 3, template_var 0)))),
    ("FileRefinement.cfWritePreservesUnallocatedBlocksInvariant",
     "[| reachabilityInvariant ?cfile1.0;
         cfWrite ?cfile1.0 ?byteIndex ?value = Some ?cfile2.0 |]
      ==> unallocatedBlocksInvariant ?cfile2.0",
     template_implication
      ([template_predicate (template_app (template_hole 4, template_var 3)),
        template_equation
         (template_app
           (template_app
             (template_app (template_hole 2, template_var 3),
              template_var 2),
            template_var 1),
          template_app (template_hole 1, template_var 0))],
       template_predicate
        (template_app (template_hole 0, template_var 0)))),
    ("FileRefinement.nextFreeBlockIncreases",
     "[| nextFreeBlockInvariant ?cfile1.0;
         cfWrite ?cfile1.0 ?index ?value = Some ?cfile2.0 |]
      ==> nextFreeBlock ?cfile1.0 <= nextFreeBlock ?cfile2.0",
     template_implication
      ([template_predicate (template_app (template_hole 5, template_var 3)),
        template_equation
         (template_app
           (template_app
             (template_app (template_hole 3, template_var 3),
              template_var 2),
            template_var 1),
          template_app (template_hole 2, template_var 0))],
       template_inequation
        (less_equals, template_app (template_hole 0, template_var 3),
         template_app (template_hole 0, template_var 0)))),
    ("FileRefinement.cfWriteNoExtendPreservesFileSize",
     "[| ?index < fileSize ?cfile1.0;
         cfWrite ?cfile1.0 ?index ?value = Some ?cfile2.0 |]
      ==> fileSize ?cfile2.0 = fileSize ?cfile1.0",
     template_implication
      ([template_inequation
         (less_than, template_var 3,
          template_app (template_hole 4, template_var 2)),
        template_equation
         (template_app
           (template_app
             (template_app (template_hole 2, template_var 2),
              template_var 3),
            template_var 1),
          template_app (template_hole 1, template_var 0))],
       template_equation
        (template_app (template_hole 4, template_var 0),
         template_app (template_hole 4, template_var 2)))),
    ("FileRefinement.mod_round_lt",
     "[| 0 < ?c; ?a < ?b |] ==> ?a div ?c < (?b + ?c - 1) div ?c",
     template_implication
      ([template_inequation (less_than, template_hole 4, template_var 2),
        template_inequation (less_than, template_var 1, template_var 0)],
       template_inequation
        (less_than,
         template_app
          (template_app (template_hole 3, template_var 1), template_var 2),
         template_app
          (template_app
            (template_hole 3,
             template_app
              (template_app
                (template_hole 2,
                 template_app
                  (template_app (template_hole 1, template_var 0),
                   template_var 2)),
               template_hole 0)),
           template_var 2)))),
    ("FileRefinement.cfWriteExtendFileSize",
     "[| ~ ?index < fileSize ?cfile1.0;
         cfWrite ?cfile1.0 ?index ?value = Some ?cfile2.0 |]
      ==> fileSize ?cfile2.0 = Suc ?index",
     template_implication
      ([template_negation
         (
            template_inequation
             (less_than, template_var 3,
              template_app (template_hole 5, template_var 2))
            ),
        template_equation
         (template_app
           (template_app
             (template_app (template_hole 3, template_var 2),
              template_var 3),
            template_var 1),
          template_app (template_hole 2, template_var 0))],
       template_equation
        (template_app (template_hole 5, template_var 0),
         template_app (template_hole 0, template_var 3)))),
    ("FileRefinement.modInequalityLemma",
     "?a ~= ?b & ?a mod ?c = ?b mod ?c ==> ?a div ?c ~= ?b div ?c",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_hole 4,
                template_app
                 (template_hole 3,
                  template_app
                   (template_app (template_hole 2, template_var 2),
                    template_var 1))),
              template_app
               (template_app
                 (template_hole 2,
                  template_app
                   (template_app (template_hole 1, template_var 2),
                    template_var 0)),
                template_app
                 (template_app (template_hole 1, template_var 1),
                  template_var 0)))
            )],
       template_negation
        (
           template_equation
            (template_app
              (template_app (template_hole 0, template_var 2),
               template_var 0),
             template_app
              (template_app (template_hole 0, template_var 1),
               template_var 0))
           ))),
    ("FileRefinement.writeNoExtendCorrect",
     "[| ?index < fileSize ?cfile1.0;
         Some ?cfile2.0 = cfWrite ?cfile1.0 ?index ?value |]
      ==> Some (abstFn ?cfile2.0) =
          afWrite (abstFn ?cfile1.0) ?index ?value",
     template_implication
      ([template_inequation
         (less_than, template_var 3,
          template_app (template_hole 7, template_var 2)),
        template_equation
         (template_app (template_hole 5, template_var 1),
          template_app
           (template_app
             (template_app (template_hole 4, template_var 2),
              template_var 3),
            template_var 0))],
       template_equation
        (template_app
          (template_hole 2, template_app (template_hole 1, template_var 1)),
         template_app
          (template_app
            (template_app
              (template_hole 0,
               template_app (template_hole 1, template_var 2)),
             template_var 3),
           template_var 0)))),
    ("FileRefinement.writeSucceedCorrect",
     "[| nextFreeBlockInvariant ?cfile1.0;
         unallocatedBlocksInvariant ?cfile1.0; lastBlockInvariant ?cfile1.0;
         Some ?cfile2.0 = cfWrite ?cfile1.0 ?index ?value |]
      ==> Some (abstFn ?cfile2.0) =
          afWrite (abstFn ?cfile1.0) ?index ?value",
     template_implication
      ([template_predicate (template_app (template_hole 9, template_var 3)),
        template_predicate (template_app (template_hole 8, template_var 3)),
        template_predicate (template_app (template_hole 7, template_var 3)),
        template_equation
         (template_app (template_hole 5, template_var 2),
          template_app
           (template_app
             (template_app (template_hole 4, template_var 3),
              template_var 1),
            template_var 0))],
       template_equation
        (template_app
          (template_hole 2, template_app (template_hole 1, template_var 2)),
         template_app
          (template_app
            (template_app
              (template_hole 0,
               template_app (template_hole 1, template_var 3)),
             template_var 1),
           template_var 0)))),
    ("FileRefinement.writeExtendCorrect",
     "[| nextFreeBlockInvariant ?cfile1.0;
         unallocatedBlocksInvariant ?cfile1.0; lastBlockInvariant ?cfile1.0;
         ~ ?index < fileSize ?cfile1.0;
         Some ?cfile2.0 = cfWrite ?cfile1.0 ?index ?value |]
      ==> Some (abstFn ?cfile2.0) =
          afWrite (abstFn ?cfile1.0) ?index ?value",
     template_implication
      ([template_predicate
         (template_app (template_hole 12, template_var 3)),
        template_predicate
         (template_app (template_hole 11, template_var 3)),
        template_predicate
         (template_app (template_hole 10, template_var 3)),
        template_negation
         (
            template_inequation
             (less_than, template_var 2,
              template_app (template_hole 7, template_var 3))
            ),
        template_equation
         (template_app (template_hole 5, template_var 1),
          template_app
           (template_app
             (template_app (template_hole 4, template_var 3),
              template_var 2),
            template_var 0))],
       template_equation
        (template_app
          (template_hole 2, template_app (template_hole 1, template_var 1)),
         template_app
          (template_app
            (template_app
              (template_hole 0,
               template_app (template_hole 1, template_var 3)),
             template_var 2),
           template_var 0)))),
    ("FileRefinement.blockNumNELemma",
     "[| nextFreeBlockInvariant ?cfile1.0;
         ?cfile1.0
         (| data :=
              writeCArray (data ?cfile1.0) (?byteIndex div blockSize)
               (writeCArray
                 (readCArray (data ?cfile1.0) (?byteIndex div blockSize))
                 (?byteIndex mod blockSize) ?value) |) =
         ?cfile2.0;
         ~ ?blockNum < nextFreeBlock ?cfile2.0; ?blockNum < numBlocks;
         ?i < blockSize; ?byteIndex div blockSize < numBlocks;
         ?byteIndex < fileSize ?cfile1.0 |]
      ==> ?blockNum ~= ?byteIndex div blockSize",
     template_implication
      ([template_predicate
         (template_app (template_hole 15, template_var 5)),
        template_equation
         (template_app
           (template_app (template_hole 13, t_empty), template_var 5),
          template_var 2),
        template_negation
         (
            template_inequation
             (less_than, template_var 1,
              template_app (template_hole 3, template_var 2))
            ),
        template_inequation (less_than, template_var 1, template_hole 2),
        template_inequation (less_than, template_var 0, template_hole 9),
        template_inequation
         (less_than,
          template_app
           (template_app (template_hole 10, template_var 4),
            template_hole 9),
          template_hole 2),
        template_inequation
         (less_than, template_var 4,
          template_app (template_hole 1, template_var 5))],
       template_negation
        (
           template_equation
            (template_var 1,
             template_app
              (template_app (template_hole 10, template_var 4),
               template_hole 9))
           )))]:
   (string * thm * template) list
### theory "Draft.FileRefinementMoreTemplates"
### 0.273s elapsed time, 0.361s cpu time, 0.000s GC time
val it = (): unit
