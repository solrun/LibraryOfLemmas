Loading theory "Draft.MissingRelation" (required by "Draft.StandardRulesMoreTemplates" via "Draft.StandardRules" via "Draft.StandardModels" via "Draft.LabeledGraphSemantics" via "Draft.LabeledGraphs")
Loading theory "HOL-Library.Function_Algebras" (required by "Draft.StandardRulesMoreTemplates" via "Draft.ExtrEqs" via "HOL-Library.BigO")
Loading theory "HOL-Library.Nat_Bijection" (required by "Draft.StandardRulesMoreTemplates" via "Draft.ExtrEqs" via "HOL-Library.Stream")
Loading theory "HOL-Library.Set_Algebras" (required by "Draft.StandardRulesMoreTemplates" via "Draft.ExtrEqs" via "HOL-Library.BigO")
instantiation
  fun :: (type, plus) plus
  plus_fun == plus :: ('a => 'b) => ('a => 'b) => 'a => 'b
instantiation
  set :: (plus) plus
  plus_set == plus :: 'a set => 'a set => 'a set
instantiation
  set :: (times) times
  times_set == times :: 'a set => 'a set => 'a set
instantiation
  fun :: (type, zero) zero
  zero_fun == zero_class.zero :: 'a => 'b
instantiation
  fun :: (type, times) times
  times_fun == times :: ('a => 'b) => ('a => 'b) => 'a => 'b
instantiation
  set :: (zero) zero
  zero_set == zero_class.zero :: 'a set
instantiation
  set :: (one) one
  one_set == one_class.one :: 'a set
instantiation
  fun :: (type, one) one
  one_fun == one_class.one :: 'a => 'b
Found termination order: "(%p. size (snd p)) <*mlex*> {}"
### theory "HOL-Library.Function_Algebras"
### 0.123s elapsed time, 0.513s cpu time, 0.040s GC time
Loading theory "HOL-Library.Tree" (required by "Draft.StandardRulesMoreTemplates" via "Draft.ExtrEqs" via "Draft.Templates")
### theory "Draft.MissingRelation"
### 0.147s elapsed time, 0.606s cpu time, 0.040s GC time
Loading theory "Draft.LabeledGraphs" (required by "Draft.StandardRulesMoreTemplates" via "Draft.StandardRules" via "Draft.StandardModels" via "Draft.LabeledGraphSemantics")
Found termination order: "size_list size <*mlex*> {}"
### theory "HOL-Library.Set_Algebras"
### 0.210s elapsed time, 0.858s cpu time, 0.040s GC time
Loading theory "HOL-Library.BigO" (required by "Draft.StandardRulesMoreTemplates" via "Draft.ExtrEqs")
### theory "HOL-Library.Nat_Bijection"
### 0.312s elapsed time, 1.254s cpu time, 0.126s GC time
Loading theory "HOL-Library.Stream" (required by "Draft.StandardRulesMoreTemplates" via "Draft.ExtrEqs")
consts
  left :: "'a tree => 'a tree"
consts
  right :: "'a tree => 'a tree"
consts
  shift :: "'a list => 'a stream => 'a stream"
Found termination order: "size <*mlex*> {}"
Proofs for coinductive predicate(s) "streamsp"
  Proving monotonicity ...
Found termination order: "size <*mlex*> {}"
consts
  snth :: "'a stream => nat => 'a"
consts
  stake :: "nat => 'a stream => 'a list"
consts
  sdrop :: "nat => 'a stream => 'a stream"
Found termination order: "size <*mlex*> {}"
class height = type +
  fixes height :: "'a => nat"
instantiation
  tree :: (type) height
  height_tree == height :: 'a tree => nat
consts
  sfilter :: "('a => bool) => 'a stream => 'a stream"
### theory "Draft.LabeledGraphs"
### 0.940s elapsed time, 3.557s cpu time, 0.870s GC time
Loading theory "Draft.LabeledGraphSemantics" (required by "Draft.StandardRulesMoreTemplates" via "Draft.StandardRules" via "Draft.StandardModels")
consts
  cycle :: "'a list => 'a stream"
Found termination order: "size <*mlex*> {}"
consts
  siterate :: "('a => 'a) => 'a => 'a stream"
Found termination order: "size <*mlex*> {}"
### theory "HOL-Library.BigO"
### 1.009s elapsed time, 3.825s cpu time, 0.919s GC time
Loading theory "Draft.RulesAndChains" (required by "Draft.StandardRulesMoreTemplates" via "Draft.StandardRules" via "Draft.RuleSemanticsConnection")
consts
  flat :: "'a list stream => 'a stream"
Found termination order: "size <*mlex*> {}"
consts
  sinterleave :: "'a stream => 'a stream => 'a stream"
consts
  szip :: "'a stream => 'b stream => ('a * 'b) stream"
Found termination order: "size <*mlex*> {}"
consts
  smap2 :: "('a => 'b => 'c) => 'a stream => 'b stream => 'c stream"
Found termination order: "size <*mlex*> {}"
### theory "HOL-Library.Stream"
### 1.153s elapsed time, 4.399s cpu time, 0.941s GC time
Found termination order: "size <*mlex*> {}"
Found termination order: "size <*mlex*> {}"
Found termination order: "(%p. size (fst p)) <*mlex*> {}"
Proofs for inductive predicate(s) "WPC"
  Proving monotonicity ...
Found termination order: "size <*mlex*> {}"
### theory "Draft.RulesAndChains"
### 0.492s elapsed time, 1.727s cpu time, 0.198s GC time
Found termination order: "(%p. size (snd p)) <*mlex*> {}"
Found termination order: "size <*mlex*> {}"
### theory "HOL-Library.Tree"
### 2.065s elapsed time, 6.971s cpu time, 1.321s GC time
Loading theory "Draft.Templates" (required by "Draft.StandardRulesMoreTemplates" via "Draft.ExtrEqs")
datatype template_term
=
     t_empty
   | template_app of template_term * template_term
   | template_hole of int
   | template_var of int
datatype sign
= equals | greater_equals | greater_than | less_equals | less_than
datatype template
=
     template_bimplication of template * template
   | template_dunno
   | template_equation of template_term * template_term
   | template_implication of template list * template
   | template_inequation of sign * template_term * template_term
   | template_negation of template
   | template_predicate of template_term
constructor t_empty: template_term
constructor template_app: template_term * template_term -> template_term
constructor template_hole: int -> template_term
constructor template_var: int -> template_term
constructor equals: sign
constructor greater_equals: sign
constructor greater_than: sign
constructor less_equals: sign
constructor less_than: sign
constructor template_bimplication: template * template -> template
constructor template_dunno: template
constructor template_equation: template_term * template_term -> template
constructor template_implication: template list * template -> template
constructor template_inequation:
   sign * template_term * template_term -> template
constructor template_negation: template -> template
constructor template_predicate: template_term -> template
val vfs = fn: term -> (indexname * typ) list * (string * typ) list
val indexOf = fn: ''a list -> ''a -> int -> int
val has_eq = fn: term -> bool
val term2template = fn:
   (indexname * typ) list -> (string * typ) list -> term -> template_term
val lemma2predicate = fn: term -> term -> template
val makeTemplatewithContext = fn: term -> term -> template
val lemma2template = fn: term -> template
val thm2template = fn: thm -> template
val tterm2string = fn: template_term -> string
val template2string = fn: template -> string
val t = "height ?t <= size ?t": thm
val th =
   Const ("HOL.Trueprop", "bool => prop") $
     (Const ("Orderings.ord_class.less_eq", "nat => nat => bool") $
       (Const ("Tree.height_class.height", "?'a tree => nat") $
         Var (("t", 0), "?'a tree")) $
       (Const ("Nat.size_class.size", "?'a tree => nat") $
         Var (("t", 0), "?'a tree"))):
   term
### theory "Draft.Templates"
### 0.052s elapsed time, 0.108s cpu time, 0.000s GC time
Loading theory "Draft.ExtrEqs" (required by "Draft.StandardRulesMoreTemplates")
Found termination order: "(%p. size (snd p)) <*mlex*> {}"
val eqpattern =
   Pattern
    (
       Const ("HOL.Trueprop", "bool => prop") $
         (Const ("HOL.eq", "?'a => ?'a => bool") $
           Var (("_dummy_", 1), "?'a") $ Var (("_dummy_", 2), "?'a"))
       ):
   term Find_Theorems.criterion
val badeqpattern = Pattern (Const ("Pure.eq", "?'a => ?'a => prop")):
   term Find_Theorems.criterion
val undefpattern =
   Pattern
    (
       Const ("HOL.Trueprop", "bool => prop") $
         (Const ("HOL.eq", "?'a => ?'a => bool") $
           Var (("_dummy_", 1), "?'a") $ Const ("HOL.undefined", "?'a"))
       ):
   term Find_Theorems.criterion
val thmpattern =
   Pattern
    (Const ("HOL.Trueprop", "bool => prop") $ Var (("_dummy_", 1), "bool")):
   term Find_Theorems.criterion
val badnames =
   ["*nitpick*", "*Nitpick*", "*full_exhaustive*", "*_def*", "Enum.finite*",
    "*Quickcheck*", "ATP*", "*Nunchaku*", "*Code*", "*BNF*", "*SMT*",
    "*.*.*"]:
   string list
val unwanted_names =
   [(false, Name "*nitpick*"), (false, Name "*Nitpick*"),
    (false, Name "*full_exhaustive*"), (false, Name "*_def*"),
    (false, Name "Enum.finite*"), (false, Name "*Quickcheck*"),
    (false, Name "ATP*"), (false, Name "*Nunchaku*"),
    (false, Name "*Code*"), (false, Name "*BNF*"), (false, Name "*SMT*"),
    (false, Name "*.*.*")]:
   (bool * term Find_Theorems.criterion) list
val has_vars = fn: term -> bool
val get_all_eqs = fn: string -> Proof.context -> (string * thm) list
val get_all_thms = fn: string -> Proof.context -> (string * thm) list
val get_noneq_thms = fn: string -> Proof.context -> (string * thm) list
val template_eqs = fn:
   string -> Proof.context -> (string * thm * template) list
val template_thms = fn:
   string -> Proof.context -> (string * thm * template) list
### theory "Draft.ExtrEqs"
### 0.537s elapsed time, 1.140s cpu time, 0.143s GC time
### theory "Draft.LabeledGraphSemantics"
### 1.779s elapsed time, 4.635s cpu time, 0.594s GC time
Loading theory "Draft.RuleSemanticsConnection" (required by "Draft.StandardRulesMoreTemplates" via "Draft.StandardRules")
Loading theory "Draft.StandardModels" (required by "Draft.StandardRulesMoreTemplates" via "Draft.StandardRules")
### theory "Draft.StandardModels"
### 0.077s elapsed time, 0.181s cpu time, 0.053s GC time
Found termination order: "size <*mlex*> {}"
### theory "Draft.RuleSemanticsConnection"
### 0.282s elapsed time, 0.389s cpu time, 0.053s GC time
Loading theory "Draft.StandardRules" (required by "Draft.StandardRulesMoreTemplates")
### theory "Draft.StandardRules"
### 0.305s elapsed time, 0.372s cpu time, 0.091s GC time
Loading theory "Draft.StandardRulesMoreTemplates"
val templateLemmas =
   [("StandardRules.finite_constant",
     "finite ?C ==> finite (constant_rules ?C)",
     template_implication
      ([template_predicate
         (template_app (template_hole 2, template_var 0))],
       template_predicate
        (
           template_app
            (template_hole 1,
             template_app (template_hole 0, template_var 0))
           ))),
    ("StandardRules.finite_identity_rules",
     "finite ?L ==> finite (identity_rules ?L)",
     template_implication
      ([template_predicate
         (template_app (template_hole 2, template_var 0))],
       template_predicate
        (
           template_app
            (template_hole 1,
             template_app (template_hole 0, template_var 0))
           ))),
    ("StandardRules.constant_rules_mono",
     "?C\<^sub>1 <= ?C\<^sub>2 ==>
      constant_rules ?C\<^sub>1 <= constant_rules ?C\<^sub>2",
     template_implication
      ([template_inequation (less_equals, template_var 1, template_var 0)],
       template_inequation
        (less_equals, template_app (template_hole 0, template_var 1),
         template_app (template_hole 0, template_var 0)))),
    ("StandardRules.identity_rules_mono",
     "?C\<^sub>1 <= ?C\<^sub>2 ==>
      identity_rules ?C\<^sub>1 <= identity_rules ?C\<^sub>2",
     template_implication
      ([template_inequation (less_equals, template_var 1, template_var 0)],
       template_inequation
        (less_equals, template_app (template_hole 0, template_var 1),
         template_app (template_hole 0, template_var 0)))),
    ("StandardRules.nonempty_rule",
     "graph ?G ==> maintained nonempty_rule ?G = (vertices ?G ~= {})",
     template_implication
      ([template_equation
         (template_var 0, template_app (template_hole 7, template_var 0))],
       template_implication
        ([template_predicate
           (
              template_app
               (template_app (template_hole 5, template_hole 4),
                template_var 0)
              )],
         template_negation
          (
             template_equation
              (template_app (template_hole 1, template_var 0),
               template_hole 0)
             )))),
    ("StandardRules.symmetry_rule",
     "[| graph ?G; maintained (symmetry_rule ?l) ?G |]
      ==> sym (getRel ?l ?G)",
     template_implication
      ([template_equation
         (template_var 1, template_app (template_hole 4, template_var 1)),
        template_predicate
         (
            template_app
             (template_app
               (template_hole 3,
                template_app (template_hole 2, template_var 0)),
              template_var 1)
            )],
       template_predicate
        (
           template_app
            (template_hole 1,
             template_app
              (template_app (template_hole 0, template_var 0),
               template_var 1))
           ))),
    ("StandardRules.transitive_rule",
     "[| graph ?G; maintained (transitive_rule ?l) ?G |]
      ==> trans (getRel ?l ?G)",
     template_implication
      ([template_equation
         (template_var 1, template_app (template_hole 4, template_var 1)),
        template_predicate
         (
            template_app
             (template_app
               (template_hole 3,
                template_app (template_hole 2, template_var 0)),
              template_var 1)
            )],
       template_predicate
        (
           template_app
            (template_hole 1,
             template_app
              (template_app (template_hole 0, template_var 0),
               template_var 1))
           ))),
    ("StandardRules.ident_rel_symm",
     "ident_rel ?idt ?G ==> maintained (symmetry_rule ?idt) ?G",
     template_implication
      ([template_equation
         (template_app
           (template_app (template_hole 5, template_var 1), template_var 0),
          template_app
           (template_app (template_hole 4, t_empty),
            template_app (template_hole 2, template_var 0)))],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 1,
               template_app (template_hole 0, template_var 1)),
             template_var 0)
           ))),
    ("StandardRules.ident_rel_trans",
     "ident_rel ?idt ?G ==> maintained (transitive_rule ?idt) ?G",
     template_implication
      ([template_equation
         (template_app
           (template_app (template_hole 5, template_var 1), template_var 0),
          template_app
           (template_app (template_hole 4, t_empty),
            template_app (template_hole 2, template_var 0)))],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 1,
               template_app (template_hole 0, template_var 1)),
             template_var 0)
           ))),
    ("StandardRules.standard_rules_mono",
     "[| ?C\<^sub>1 <= ?C\<^sub>2; ?L\<^sub>1 <= ?L\<^sub>2 |]
      ==> standard_rules ?C\<^sub>1 ?L\<^sub>1
          <= standard_rules ?C\<^sub>2 ?L\<^sub>2",
     template_implication
      ([template_inequation (less_equals, template_var 3, template_var 2),
        template_inequation (less_equals, template_var 1, template_var 0)],
       template_inequation
        (less_equals,
         template_app
          (template_app (template_hole 0, template_var 3), template_var 1),
         template_app
          (template_app (template_hole 0, template_var 2),
           template_var 0)))),
    ("StandardRules.ident_rel_cong",
     "ident_rel ?idt ?G ==> maintained (congruence_rule ?idt ?l) ?G",
     template_implication
      ([template_equation
         (template_app
           (template_app (template_hole 5, template_var 2), template_var 1),
          template_app
           (template_app (template_hole 4, t_empty),
            template_app (template_hole 2, template_var 1)))],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 1,
               template_app
                (template_app (template_hole 0, template_var 2),
                 template_var 0)),
             template_var 1)
           ))),
    ("StandardRules.reflexivity_rule",
     "[| graph ?G; maintained (reflexivity_rule ?l) ?G |]
      ==> refl_on (vertices ?G) (getRel ?l ?G)",
     template_implication
      ([template_equation
         (template_var 1, template_app (template_hole 5, template_var 1)),
        template_predicate
         (
            template_app
             (template_app
               (template_hole 4,
                template_app (template_hole 3, template_var 0)),
              template_var 1)
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 2,
               template_app (template_hole 1, template_var 1)),
             template_app
              (template_app (template_hole 0, template_var 0),
               template_var 1))
           ))),
    ("StandardRules.conflict_free",
     "(:?G:\<lbrakk>A_Lbl ?l\<rbrakk> = {}) =
      (ALL (l', x, y):edges ?G. l' ~= ?l)",
     template_equation
      (template_app
        (template_app
          (template_hole 9,
           template_app
            (template_app (template_hole 8, template_var 1),
             template_app (template_hole 7, template_var 0))),
         template_hole 6),
       template_app
        (template_app
          (template_hole 5, template_app (template_hole 4, template_var 1)),
         template_app (template_hole 3, t_empty)))),
    ("StandardRules.standard_identity_rules",
     "standard' ?C ?G ==> maintained (reflexivity_rule S_Idt) ?G",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_app
                   (template_app
                     (template_hole 9,
                      template_app
                       (template_app (template_hole 8, t_empty),
                        template_var 1)),
                    template_hole 4),
                  template_hole 3),
                template_hole 2),
              template_var 0)
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 1,
               template_app (template_hole 0, template_hole 2)),
             template_var 0)
           ))),
    ("StandardRules.standard_identity_rules",
     "standard' ?C ?G ==> maintained (symmetry_rule S_Idt) ?G",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_app
                   (template_app
                     (template_hole 9,
                      template_app
                       (template_app (template_hole 8, t_empty),
                        template_var 1)),
                    template_hole 4),
                  template_hole 3),
                template_hole 2),
              template_var 0)
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 1,
               template_app (template_hole 0, template_hole 2)),
             template_var 0)
           ))),
    ("StandardRules.standard_identity_rules",
     "standard' ?C ?G ==> maintained (transitive_rule S_Idt) ?G",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_app
                   (template_app
                     (template_hole 9,
                      template_app
                       (template_app (template_hole 8, t_empty),
                        template_var 1)),
                    template_hole 4),
                  template_hole 3),
                template_hole 2),
              template_var 0)
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 1,
               template_app (template_hole 0, template_hole 2)),
             template_var 0)
           ))),
    ("StandardRules.standard_identity_rules",
     "standard' ?C ?G ==> maintained (congruence_rule S_Idt ?l) ?G",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_app
                   (template_app
                     (template_hole 9,
                      template_app
                       (template_app (template_hole 8, t_empty),
                        template_var 2)),
                    template_hole 4),
                  template_hole 3),
                template_hole 2),
              template_var 1)
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 1,
               template_app
                (template_app (template_hole 0, template_hole 2),
                 template_var 0)),
             template_var 1)
           ))),
    ("StandardRules.top_rule",
     "graph ?G ==>
      maintained (top_rule ?r) ?G =
      (vertices ?G \<times> vertices ?G = getRel ?r ?G)",
     template_implication
      ([template_equation
         (template_var 1, template_app (template_hole 7, template_var 1))],
       template_implication
        ([template_predicate
           (
              template_app
               (template_app
                 (template_hole 5,
                  template_app (template_hole 4, template_var 0)),
                template_var 1)
              )],
         template_equation
          (template_app
            (template_app
              (template_hole 2,
               template_app (template_hole 1, template_var 1)),
             t_empty),
           template_app
            (template_app (template_hole 0, template_var 0),
             template_var 1))))),
    ("StandardRules.standard_maintains_rules",
     "standard' ?C ?G ==> maintainedA (standard_rules ?C ?L) ?G",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_app
                   (template_app
                     (template_hole 10,
                      template_app
                       (template_app (template_hole 9, t_empty),
                        template_var 2)),
                    template_hole 5),
                  template_hole 4),
                template_hole 3),
              template_var 1)
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 2,
               template_app
                (template_app (template_hole 1, template_var 2),
                 template_var 0)),
             t_empty)
           ))),
    ("StandardRules.ident_rel_refl",
     "[| graph ?G; ident_rel ?idt ?G |]
      ==> maintained (reflexivity_rule ?idt) ?G",
     template_implication
      ([template_equation
         (template_var 1, template_app (template_hole 7, template_var 1)),
        template_equation
         (template_app
           (template_app (template_hole 5, template_var 0), template_var 1),
          template_app
           (template_app (template_hole 4, t_empty),
            template_app (template_hole 2, template_var 1)))],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 1,
               template_app (template_hole 0, template_var 0)),
             template_var 1)
           ))),
    ("StandardRules.constant_rules",
     "[| standard' ?C ?G; ?c : ?C |] ==> maintained (const_exists ?c) ?G",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_app
                   (template_app
                     (template_hole 10,
                      template_app
                       (template_app (template_hole 9, t_empty),
                        template_var 2)),
                    template_hole 5),
                  template_hole 4),
                template_hole 3),
              template_var 1)
            ),
        template_predicate
         (
            template_app
             (template_app (template_hole 2, template_var 0),
              template_var 2)
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 1,
               template_app (template_hole 0, template_var 0)),
             template_var 1)
           ))),
    ("StandardRules.constant_rules",
     "[| standard' ?C ?G; ?c : ?C |]
      ==> maintained (const_exists_rev ?c) ?G",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_app
                   (template_app
                     (template_hole 10,
                      template_app
                       (template_app (template_hole 9, t_empty),
                        template_var 2)),
                    template_hole 5),
                  template_hole 4),
                template_hole 3),
              template_var 1)
            ),
        template_predicate
         (
            template_app
             (template_app (template_hole 2, template_var 0),
              template_var 2)
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 1,
               template_app (template_hole 0, template_var 0)),
             template_var 1)
           ))),
    ("StandardRules.constant_rules",
     "[| standard' ?C ?G; ?c : ?C |] ==> maintained (const_prop ?c) ?G",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_app
                   (template_app
                     (template_hole 10,
                      template_app
                       (template_app (template_hole 9, t_empty),
                        template_var 2)),
                    template_hole 5),
                  template_hole 4),
                template_hole 3),
              template_var 1)
            ),
        template_predicate
         (
            template_app
             (template_app (template_hole 2, template_var 0),
              template_var 2)
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 1,
               template_app (template_hole 0, template_var 0)),
             template_var 1)
           ))),
    ("StandardRules.standard_maintains_constant_rules",
     "[| standard' ?C ?G; ?R : constant_rules ?C |] ==> maintained ?R ?G",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_app
                   (template_app
                     (template_hole 10,
                      template_app
                       (template_app (template_hole 9, t_empty),
                        template_var 2)),
                    template_hole 5),
                  template_hole 4),
                template_hole 3),
              template_var 1)
            ),
        template_predicate
         (
            template_app
             (template_app (template_hole 2, template_var 0),
              template_app (template_hole 1, template_var 2))
            )],
       template_predicate
        (
           template_app
            (template_app (template_hole 0, template_var 0), template_var 1)
           ))),
    ("StandardRules.standard_maintains_identity_rules",
     "[| standard' ?C ?G; ?x : identity_rules ?L |] ==> maintained ?x ?G",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_app
                   (template_app
                     (template_hole 10,
                      template_app
                       (template_app (template_hole 9, t_empty),
                        template_var 3)),
                    template_hole 5),
                  template_hole 4),
                template_hole 3),
              template_var 2)
            ),
        template_predicate
         (
            template_app
             (template_app (template_hole 2, template_var 1),
              template_app (template_hole 1, template_var 0))
            )],
       template_predicate
        (
           template_app
            (template_app (template_hole 0, template_var 1), template_var 2)
           ))),
    ("StandardRules.maintainedA_invmono",
     "[| ?C\<^sub>1 <= ?C\<^sub>2; ?L\<^sub>1 <= ?L\<^sub>2;
         maintainedA (standard_rules ?C\<^sub>2 ?L\<^sub>2) ?G |]
      ==> maintainedA (standard_rules ?C\<^sub>1 ?L\<^sub>1) ?G",
     template_implication
      ([template_inequation (less_equals, template_var 4, template_var 3),
        template_inequation (less_equals, template_var 2, template_var 1),
        template_predicate
         (
            template_app
             (template_app
               (template_hole 2,
                template_app
                 (template_app (template_hole 1, template_var 3),
                  template_var 1)),
              t_empty)
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 2,
               template_app
                (template_app (template_hole 1, template_var 4),
                 template_var 2)),
             t_empty)
           ))),
    ("StandardRules.equivalence",
     "[| graph ?G;
         maintainedA
          {reflexivity_rule ?I, transitive_rule ?I, symmetry_rule ?I} ?G |]
      ==> equiv (vertices ?G) (getRel ?I ?G)",
     template_implication
      ([template_equation
         (template_var 1, template_app (template_hole 10, template_var 1)),
        template_predicate
         (
            template_app
             (template_app
               (template_hole 9,
                template_app
                 (template_app
                   (template_hole 8,
                    template_app (template_hole 7, template_var 0)),
                  template_app
                   (template_app
                     (template_hole 8,
                      template_app (template_hole 6, template_var 0)),
                    template_app
                     (template_app
                       (template_hole 8,
                        template_app (template_hole 5, template_var 0)),
                      template_hole 4)))),
              t_empty)
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 2,
               template_app (template_hole 1, template_var 1)),
             template_app
              (template_app (template_hole 0, template_var 0),
               template_var 1))
           ))),
    ("StandardRules.constant_rules_graph_rule",
     "?x : constant_rules ?C ==> graph_rule ?x",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 12, template_var 1),
              template_app (template_hole 11, template_var 0))
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 10,
               template_app
                (template_app
                  (template_app
                    (template_hole 9,
                     template_app (template_hole 8, template_var 1)),
                   template_app (template_hole 7, template_var 1)),
                 template_app
                  (template_hole 6,
                   template_app
                    (template_hole 5,
                     template_app (template_hole 8, template_var 1))))),
             template_app
              (template_app
                (template_hole 10,
                 template_app
                  (template_app
                    (template_hole 4,
                     template_app (template_hole 7, template_var 1)),
                   template_app
                    (template_hole 3,
                     template_app (template_hole 7, template_var 1)))),
               template_app
                (template_app
                  (template_hole 10,
                   template_app
                    (template_hole 2,
                     template_app
                      (template_hole 5,
                       template_app (template_hole 7, template_var 1)))),
                 template_app
                  (template_hole 1,
                   template_app
                    (template_hole 0,
                     template_app (template_hole 7, template_var 1))))))
           ))),
    ("StandardRules.identity_rules_graph_rule",
     "?x : identity_rules ?L ==> graph_rule ?x",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 12, template_var 1),
              template_app (template_hole 11, template_var 0))
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 10,
               template_app
                (template_app
                  (template_app
                    (template_hole 9,
                     template_app (template_hole 8, template_var 1)),
                   template_app (template_hole 7, template_var 1)),
                 template_app
                  (template_hole 6,
                   template_app
                    (template_hole 5,
                     template_app (template_hole 8, template_var 1))))),
             template_app
              (template_app
                (template_hole 10,
                 template_app
                  (template_app
                    (template_hole 4,
                     template_app (template_hole 7, template_var 1)),
                   template_app
                    (template_hole 3,
                     template_app (template_hole 7, template_var 1)))),
               template_app
                (template_app
                  (template_hole 10,
                   template_app
                    (template_hole 2,
                     template_app
                      (template_hole 5,
                       template_app (template_hole 7, template_var 1)))),
                 template_app
                  (template_hole 1,
                   template_app
                    (template_hole 0,
                     template_app (template_hole 7, template_var 1))))))
           ))),
    ("StandardRules.are_rules", "graph_rule (top_rule ?t)",
     template_predicate
      (
         template_app
          (template_app
            (template_hole 11,
             template_app
              (template_app
                (template_app
                  (template_hole 10,
                   template_app
                    (template_hole 9,
                     template_app (template_hole 8, template_var 0))),
                 template_app
                  (template_hole 7,
                   template_app (template_hole 8, template_var 0))),
               template_app
                (template_hole 6,
                 template_app
                  (template_hole 5,
                   template_app
                    (template_hole 9,
                     template_app (template_hole 8, template_var 0)))))),
           template_app
            (template_app
              (template_hole 11,
               template_app
                (template_app
                  (template_hole 4,
                   template_app
                    (template_hole 7,
                     template_app (template_hole 8, template_var 0))),
                 template_app
                  (template_hole 3,
                   template_app
                    (template_hole 7,
                     template_app (template_hole 8, template_var 0))))),
             template_app
              (template_app
                (template_hole 11,
                 template_app
                  (template_hole 2,
                   template_app
                    (template_hole 5,
                     template_app
                      (template_hole 7,
                       template_app (template_hole 8, template_var 0))))),
               template_app
                (template_hole 1,
                 template_app
                  (template_hole 0,
                   template_app
                    (template_hole 7,
                     template_app (template_hole 8, template_var 0)))))))
         )),
    ("StandardRules.are_rules", "graph_rule (reflexivity_rule ?i)",
     template_predicate
      (
         template_app
          (template_app
            (template_hole 11,
             template_app
              (template_app
                (template_app
                  (template_hole 10,
                   template_app
                    (template_hole 9,
                     template_app (template_hole 8, template_var 0))),
                 template_app
                  (template_hole 7,
                   template_app (template_hole 8, template_var 0))),
               template_app
                (template_hole 6,
                 template_app
                  (template_hole 5,
                   template_app
                    (template_hole 9,
                     template_app (template_hole 8, template_var 0)))))),
           template_app
            (template_app
              (template_hole 11,
               template_app
                (template_app
                  (template_hole 4,
                   template_app
                    (template_hole 7,
                     template_app (template_hole 8, template_var 0))),
                 template_app
                  (template_hole 3,
                   template_app
                    (template_hole 7,
                     template_app (template_hole 8, template_var 0))))),
             template_app
              (template_app
                (template_hole 11,
                 template_app
                  (template_hole 2,
                   template_app
                    (template_hole 5,
                     template_app
                      (template_hole 7,
                       template_app (template_hole 8, template_var 0))))),
               template_app
                (template_hole 1,
                 template_app
                  (template_hole 0,
                   template_app
                    (template_hole 7,
                     template_app (template_hole 8, template_var 0)))))))
         )),
    ("StandardRules.maintained_preserved_by_isomorphism",
     "[| !!x. x : vertices ?G ==> (?f o ?g) x = x; graph ?G;
         maintained ?r (map_graph_fn ?G ?g) |]
      ==> maintained ?r ?G",
     template_implication
      ([template_predicate (template_app (template_hole 11, t_empty)),
        template_equation
         (template_var 3, template_app (template_hole 4, template_var 3)),
        template_predicate
         (
            template_app
             (template_app (template_hole 3, template_var 0),
              template_app
               (template_app
                 (template_hole 2,
                  template_app
                   (template_app
                     (template_hole 1,
                      template_app (template_hole 8, template_var 3)),
                    template_var 1)),
                template_var 3))
            )],
       template_predicate
        (
           template_app
            (template_app (template_hole 0, template_var 0), template_var 3)
           ))),
    ("StandardRules.constant_rules",
     "[| standard' ?C ?G; ?c : ?C; ?c' : ?C; ?c ~= ?c' |]
      ==> maintained (const_disj ?c ?c') ?G",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_app
                   (template_app
                     (template_hole 12,
                      template_app
                       (template_app (template_hole 11, t_empty),
                        template_var 3)),
                    template_hole 7),
                  template_hole 6),
                template_hole 5),
              template_var 2)
            ),
        template_predicate
         (
            template_app
             (template_app (template_hole 4, template_var 1),
              template_var 3)
            ),
        template_predicate
         (
            template_app
             (template_app (template_hole 4, template_var 0),
              template_var 3)
            ),
        template_negation
         (template_equation (template_var 1, template_var 0))],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 1,
               template_app
                (template_app (template_hole 0, template_var 1),
                 template_var 0)),
             template_var 2)
           ))),
    ("StandardRules.congruence_rule",
     "[| graph ?G;
         maintainedA
          {reflexivity_rule ?I, transitive_rule ?I, symmetry_rule ?I} ?G;
         maintained (congruence_rule ?I ?l) ?G |]
      ==> (%v. getRel ?l ?G `` {v}) respects getRel ?I ?G",
     template_implication
      ([template_equation
         (template_var 2, template_app (template_hole 13, template_var 2)),
        template_predicate
         (
            template_app
             (template_app
               (template_hole 12,
                template_app
                 (template_app
                   (template_hole 11,
                    template_app (template_hole 10, template_var 1)),
                  template_app
                   (template_app
                     (template_hole 11,
                      template_app (template_hole 9, template_var 1)),
                    template_app
                     (template_app
                       (template_hole 11,
                        template_app (template_hole 8, template_var 1)),
                      template_hole 7)))),
              t_empty)
            ),
        template_predicate
         (
            template_app
             (template_app
               (template_hole 6,
                template_app
                 (template_app (template_hole 5, template_var 1),
                  template_var 0)),
              template_var 2)
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 4,
               template_app
                (template_app (template_hole 3, template_var 1),
                 template_var 2)),
             t_empty)
           ))),
    ("StandardRules.congruence_rule",
     "[| graph ?G;
         maintainedA
          {reflexivity_rule ?I, transitive_rule ?I, symmetry_rule ?I} ?G;
         maintained (congruence_rule ?I ?l) ?G |]
      ==> (%v. (getRel ?l ?G)^-1 `` {v}) respects getRel ?I ?G",
     template_implication
      ([template_equation
         (template_var 2, template_app (template_hole 14, template_var 2)),
        template_predicate
         (
            template_app
             (template_app
               (template_hole 13,
                template_app
                 (template_app
                   (template_hole 12,
                    template_app (template_hole 11, template_var 1)),
                  template_app
                   (template_app
                     (template_hole 12,
                      template_app (template_hole 10, template_var 1)),
                    template_app
                     (template_app
                       (template_hole 12,
                        template_app (template_hole 9, template_var 1)),
                      template_hole 8)))),
              t_empty)
            ),
        template_predicate
         (
            template_app
             (template_app
               (template_hole 7,
                template_app
                 (template_app (template_hole 6, template_var 1),
                  template_var 0)),
              template_var 2)
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 5,
               template_app
                (template_app (template_hole 4, template_var 1),
                 template_var 2)),
             t_empty)
           ))),
    ("StandardRules.idemp_embedding_maintained_preserved",
     "[| subgraph (map_graph_fn ?G ?f) ?G;
         !!x. x : vertices ?G ==> (?f o ?f) x = ?f x; maintained ?r ?G |]
      ==> maintained ?r (map_graph_fn ?G ?f)",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_hole 9,
                  template_app
                   (template_app
                     (template_hole 8,
                      template_app
                       (template_app
                         (template_hole 7,
                          template_app (template_hole 6, template_var 2)),
                        template_var 1)),
                    template_var 2)),
                template_var 2),
              template_app
               (template_hole 5,
                template_app
                 (template_hole 6,
                  template_app
                   (template_app
                     (template_hole 8,
                      template_app
                       (template_app
                         (template_hole 7,
                          template_app (template_hole 6, template_var 2)),
                        template_var 1)),
                    template_var 2))))
            ),
        template_predicate (template_app (template_hole 4, t_empty)),
        template_predicate
         (
            template_app
             (template_app (template_hole 0, template_var 0),
              template_var 2)
            )],
       template_predicate
        (
           template_app
            (template_app (template_hole 0, template_var 0),
             template_app
              (template_app
                (template_hole 8,
                 template_app
                  (template_app
                    (template_hole 7,
                     template_app (template_hole 6, template_var 2)),
                   template_var 1)),
               template_var 2))
           ))),
    ("StandardRules.standard_rules_edges",
     "[| (?lhs, ?rhs) : standard_rules ?C ?L; (?l, ?x, ?y) : edges ?rhs;
         ?l = S_Bot ==> ?thesis; ?l = S_Top ==> ?thesis;
         ?l = S_Idt ==> ?thesis; ?l : S_Const ` ?C ==> ?thesis;
         ?l : ?L ==> ?thesis |]
      ==> ?thesis",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_hole 13,
                template_app
                 (template_app (template_hole 12, template_var 7),
                  template_var 6)),
              template_app
               (template_app (template_hole 11, template_var 5),
                template_var 4))
            ),
        template_predicate
         (
            template_app
             (template_app
               (template_hole 10,
                template_app
                 (template_app (template_hole 9, template_var 3),
                  template_app
                   (template_app (template_hole 8, template_var 2),
                    template_var 1))),
              template_app (template_hole 7, template_var 6))
            ),
        template_implication
         ([template_equation (template_var 3, template_hole 5)],
          template_predicate (template_var 0)),
        template_implication
         ([template_equation (template_var 3, template_hole 4)],
          template_predicate (template_var 0)),
        template_implication
         ([template_equation (template_var 3, template_hole 3)],
          template_predicate (template_var 0)),
        template_implication
         ([template_predicate
            (
               template_app
                (template_app (template_hole 2, template_var 3),
                 template_app
                  (template_app (template_hole 1, template_hole 0),
                   template_var 5))
               )],
          template_predicate (template_var 0)),
        template_implication
         ([template_predicate
            (
               template_app
                (template_app (template_hole 2, template_var 3),
                 template_var 4)
               )],
          template_predicate (template_var 0))],
       template_predicate (template_var 0))),
    ("StandardRules.identity_rules",
     "[| graph ?G; maintainedA (identity_rules ?L) ?G;
         fst ` edges ?G <= ?L |]
      ==> EX f. f o f = f &
                ident_rel S_Idt (map_graph_fn ?G f) &
                subgraph (map_graph_fn ?G f) ?G &
                (ALL l x y.
                    ((l, x, y) : edges ?G) = ((l, f x, f y) : edges ?G))",
     template_implication
      ([template_equation
         (template_var 1, template_app (template_hole 26, template_var 1)),
        template_predicate
         (
            template_app
             (template_app
               (template_hole 25,
                template_app (template_hole 24, template_var 0)),
              t_empty)
            ),
        template_inequation
         (less_equals,
          template_app
           (template_app (template_hole 21, template_hole 20),
            template_app (template_hole 19, template_var 1)),
          template_var 0)],
       template_predicate (template_app (template_hole 18, t_empty)))),
    ("StandardRules.maintained_standard_noconstants",
     "[| maintainedA (standard_rules ?C ?L) ?G'; graph ?G';
         fst ` edges ?G' <= ?L; getRel S_Bot ?G' = {} |]
      ==> EX f g G.
             G = map_graph_fn G (f o g) &
             G = map_graph_fn ?G' f &
             subgraph (map_graph_fn G g) ?G' &
             standard' ?C G &
             (ALL r. maintained r ?G' --> maintained r G) &
             (ALL x y e.
                 x : vertices ?G' -->
                 y : vertices ?G' -->
                 (g (f x), g (f y))
                 : :map_graph_fn G g:\<lbrakk>e\<rbrakk> -->
                 (x, y) : :?G':\<lbrakk>e\<rbrakk>)",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_hole 45,
                template_app
                 (template_app (template_hole 44, template_var 2),
                  template_var 1)),
              t_empty)
            ),
        template_equation
         (template_var 0, template_app (template_hole 41, template_var 0)),
        template_inequation
         (less_equals,
          template_app
           (template_app (template_hole 39, template_hole 38),
            template_app (template_hole 37, template_var 0)),
          template_var 1),
        template_equation
         (template_app
           (template_app (template_hole 35, template_hole 34),
            template_var 0),
          template_hole 33)],
       template_predicate (template_app (template_hole 32, t_empty))))]:
   (string * thm * template) list
### theory "Draft.StandardRulesMoreTemplates"
### 0.617s elapsed time, 1.408s cpu time, 0.878s GC time
val it = (): unit
