Loading theory "Draft.Lucas_Lehmer_Auxiliary" (required by "Draft.Lucas_Lehmer_CodeTemplates" via "Draft.Lucas_Lehmer_Code" via "Draft.Lucas_Lehmer")
Loading theory "Draft.Templates" (required by "Draft.Lucas_Lehmer_CodeTemplates" via "Draft.ExtrEqs")
datatype template_term
=
     t_empty
   | template_app of template_term * template_term
   | template_hole of int
   | template_var of int
datatype sign
= equals | greater_equals | greater_than | less_equals | less_than
datatype template
=
     template_bimplication of template * template
   | template_dunno
   | template_equation of template_term * template_term
   | template_implication of template list * template
   | template_inequation of sign * template_term * template_term
   | template_negation of template
   | template_predicate of template_term
constructor t_empty: template_term
constructor template_app: template_term * template_term -> template_term
constructor template_hole: int -> template_term
constructor template_var: int -> template_term
constructor equals: sign
constructor greater_equals: sign
constructor greater_than: sign
constructor less_equals: sign
constructor less_than: sign
constructor template_bimplication: template * template -> template
constructor template_dunno: template
constructor template_equation: template_term * template_term -> template
constructor template_implication: template list * template -> template
constructor template_inequation:
   sign * template_term * template_term -> template
constructor template_negation: template -> template
constructor template_predicate: template_term -> template
val vfs = fn: term -> (indexname * typ) list * (string * typ) list
val indexOf = fn: ''a list -> ''a -> int -> int
val has_eq = fn: term -> bool
val term2template = fn:
   (indexname * typ) list -> (string * typ) list -> term -> template_term
val lemma2predicate = fn: term -> term -> template
val makeTemplatewithContext = fn: term -> term -> template
val lemma2template = fn: term -> template
val thm2template = fn: thm -> template
val tterm2string = fn: template_term -> string
val template2string = fn: template -> string
val t = "height ?t <= size ?t": thm
val th =
   Const ("HOL.Trueprop", "bool => prop") $
     (Const ("Orderings.ord_class.less_eq", "nat => nat => bool") $
       (Const ("Tree.height_class.height", "?'a tree => nat") $
         Var (("t", 0), "?'a tree")) $
       (Const ("Nat.size_class.size", "?'a tree => nat") $
         Var (("t", 0), "?'a tree"))):
   term
### theory "Draft.Templates"
### 0.064s elapsed time, 0.173s cpu time, 0.000s GC time
Loading theory "Draft.ExtrEqs" (required by "Draft.Lucas_Lehmer_CodeTemplates")
val eqpattern =
   Pattern
    (
       Const ("HOL.Trueprop", "bool => prop") $
         (Const ("HOL.eq", "?'a => ?'a => bool") $
           Var (("_dummy_", 1), "?'a") $ Var (("_dummy_", 2), "?'a"))
       ):
   term Find_Theorems.criterion
val badeqpattern = Pattern (Const ("Pure.eq", "?'a => ?'a => prop")):
   term Find_Theorems.criterion
val undefpattern =
   Pattern
    (
       Const ("HOL.Trueprop", "bool => prop") $
         (Const ("HOL.eq", "?'a => ?'a => bool") $
           Var (("_dummy_", 1), "?'a") $ Const ("HOL.undefined", "?'a"))
       ):
   term Find_Theorems.criterion
val thmpattern =
   Pattern
    (Const ("HOL.Trueprop", "bool => prop") $ Var (("_dummy_", 1), "bool")):
   term Find_Theorems.criterion
val badnames =
   ["*nitpick*", "*Nitpick*", "*full_exhaustive*", "*_def*", "Enum.finite*",
    "*Quickcheck*", "ATP*", "*Nunchaku*", "*Code*", "*BNF*", "*SMT*",
    "*.*.*"]:
   string list
val unwanted_names =
   [(false, Name "*nitpick*"), (false, Name "*Nitpick*"),
    (false, Name "*full_exhaustive*"), (false, Name "*_def*"),
    (false, Name "Enum.finite*"), (false, Name "*Quickcheck*"),
    (false, Name "ATP*"), (false, Name "*Nunchaku*"),
    (false, Name "*Code*"), (false, Name "*BNF*"), (false, Name "*SMT*"),
    (false, Name "*.*.*")]:
   (bool * term Find_Theorems.criterion) list
val has_vars = fn: term -> bool
val get_all_eqs = fn: string -> Proof.context -> (string * thm) list
val get_all_thms = fn: string -> Proof.context -> (string * thm) list
val get_noneq_thms = fn: string -> Proof.context -> (string * thm) list
val template_eqs = fn:
   string -> Proof.context -> (string * thm * template) list
val template_thms = fn:
   string -> Proof.context -> (string * thm * template) list
### theory "Draft.ExtrEqs"
### 0.544s elapsed time, 1.102s cpu time, 0.102s GC time
### theory "Draft.Lucas_Lehmer_Auxiliary"
### 0.880s elapsed time, 1.585s cpu time, 0.172s GC time
Loading theory "Draft.Lucas_Lehmer" (required by "Draft.Lucas_Lehmer_CodeTemplates" via "Draft.Lucas_Lehmer_Code")
locale mersenne_prime
  fixes p :: "nat"
    and M :: "nat"
  assumes "mersenne_prime p"
  defines "M == 2 ^ p - 1"
consts
  gen_lucas_lehmer_sequence :: "int => nat => int"
### Ambiguous input (line 591 of "$AFP/Mersenne_Primes/Lucas_Lehmer.thy") produces 2 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("_applC" ("_position" lucas_lehmer_to_real)
###       ("\<^const>Ideal_Product.ideal_prod_indexed" ("_list" ("_position" n))
###         ("_index" ("_position" lucas_lehmer_ring)) ("_position" x)))
###     ("\<^const>Groups.times_class.times"
###       ("_applC" ("_position" of_nat) ("_position" n))
###       ("_applC" ("_position" lucas_lehmer_to_real) ("_position" x)))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("_applC" ("_position" lucas_lehmer_to_real)
###       ("\<^const>Ring.add_pow_indexed" ("_position" n)
###         ("_index" ("_position" lucas_lehmer_ring)) ("_position" x)))
###     ("\<^const>Groups.times_class.times"
###       ("_applC" ("_position" of_nat) ("_position" n))
###       ("_applC" ("_position" lucas_lehmer_to_real) ("_position" x)))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 595 of "$AFP/Mersenne_Primes/Lucas_Lehmer.thy") produces 2 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("_applC" ("_position" lucas_lehmer_to_real)
###       ("\<^const>Ideal_Product.ideal_prod_indexed" ("_list" ("_position" n))
###         ("_index" ("_position" lucas_lehmer_ring)) ("_position" x)))
###     ("\<^const>Groups.times_class.times"
###       ("_applC" ("_position" of_int) ("_position" n))
###       ("_applC" ("_position" lucas_lehmer_to_real) ("_position" x)))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("_applC" ("_position" lucas_lehmer_to_real)
###       ("\<^const>Ring.add_pow_indexed" ("_position" n)
###         ("_index" ("_position" lucas_lehmer_ring)) ("_position" x)))
###     ("\<^const>Groups.times_class.times"
###       ("_applC" ("_position" of_int) ("_position" n))
###       ("_applC" ("_position" lucas_lehmer_to_real) ("_position" x)))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
consts
  gen_lucas_lehmer_sequence' :: "int => int => nat => int"
### theory "Draft.Lucas_Lehmer"
### 1.225s elapsed time, 1.305s cpu time, 0.136s GC time
Loading theory "Draft.Lucas_Lehmer_Code" (required by "Draft.Lucas_Lehmer_CodeTemplates")
consts
  gen_lucas_lehmer_sequence'' :: "nat => int => nat => int"
### theory "Draft.Lucas_Lehmer_Code"
### 0.936s elapsed time, 1.212s cpu time, 0.422s GC time
Loading theory "Draft.Lucas_Lehmer_CodeTemplates"
"[3, 5, 7, 13, 17, 19, 31, 61, 89]"
  :: "nat list"
val templateLemmas = []: (string * thm * template) list
### theory "Draft.Lucas_Lehmer_CodeTemplates"
### 1.243s elapsed time, 2.538s cpu time, 0.237s GC time
val it = (): unit
