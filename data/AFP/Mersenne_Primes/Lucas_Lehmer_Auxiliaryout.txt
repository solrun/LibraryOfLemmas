Loading theory "Draft.Lucas_Lehmer_Auxiliary" (required by "Draft.Lucas_Lehmer_AuxiliaryTemplates")
Loading theory "Draft.Templates" (required by "Draft.Lucas_Lehmer_AuxiliaryTemplates" via "Draft.ExtrEqs")
datatype template_term
=
     t_empty
   | template_app of template_term * template_term
   | template_hole of int
   | template_var of int
datatype sign
= equals | greater_equals | greater_than | less_equals | less_than
datatype template
=
     template_bimplication of template * template
   | template_dunno
   | template_equation of template_term * template_term
   | template_implication of template list * template
   | template_inequation of sign * template_term * template_term
   | template_negation of template
   | template_predicate of template_term
constructor t_empty: template_term
constructor template_app: template_term * template_term -> template_term
constructor template_hole: int -> template_term
constructor template_var: int -> template_term
constructor equals: sign
constructor greater_equals: sign
constructor greater_than: sign
constructor less_equals: sign
constructor less_than: sign
constructor template_bimplication: template * template -> template
constructor template_dunno: template
constructor template_equation: template_term * template_term -> template
constructor template_implication: template list * template -> template
constructor template_inequation:
   sign * template_term * template_term -> template
constructor template_negation: template -> template
constructor template_predicate: template_term -> template
val vfs = fn: term -> (indexname * typ) list * (string * typ) list
val indexOf = fn: ''a list -> ''a -> int -> int
val has_eq = fn: term -> bool
val term2template = fn:
   (indexname * typ) list -> (string * typ) list -> term -> template_term
val lemma2predicate = fn: term -> term -> template
val makeTemplatewithContext = fn: term -> term -> template
val lemma2template = fn: term -> template
val thm2template = fn: thm -> template
val tterm2string = fn: template_term -> string
val template2string = fn: template -> string
val t = "height ?t <= size ?t": thm
val th =
   Const ("HOL.Trueprop", "bool => prop") $
     (Const ("Orderings.ord_class.less_eq", "nat => nat => bool") $
       (Const ("Tree.height_class.height", "?'a tree => nat") $
         Var (("t", 0), "?'a tree")) $
       (Const ("Nat.size_class.size", "?'a tree => nat") $
         Var (("t", 0), "?'a tree"))):
   term
### theory "Draft.Templates"
### 0.088s elapsed time, 0.215s cpu time, 0.000s GC time
Loading theory "Draft.ExtrEqs" (required by "Draft.Lucas_Lehmer_AuxiliaryTemplates")
val eqpattern =
   Pattern
    (
       Const ("HOL.Trueprop", "bool => prop") $
         (Const ("HOL.eq", "?'a => ?'a => bool") $
           Var (("_dummy_", 1), "?'a") $ Var (("_dummy_", 2), "?'a"))
       ):
   term Find_Theorems.criterion
val badeqpattern = Pattern (Const ("Pure.eq", "?'a => ?'a => prop")):
   term Find_Theorems.criterion
val undefpattern =
   Pattern
    (
       Const ("HOL.Trueprop", "bool => prop") $
         (Const ("HOL.eq", "?'a => ?'a => bool") $
           Var (("_dummy_", 1), "?'a") $ Const ("HOL.undefined", "?'a"))
       ):
   term Find_Theorems.criterion
val thmpattern =
   Pattern
    (Const ("HOL.Trueprop", "bool => prop") $ Var (("_dummy_", 1), "bool")):
   term Find_Theorems.criterion
val badnames =
   ["*nitpick*", "*Nitpick*", "*full_exhaustive*", "*_def*", "Enum.finite*",
    "*Quickcheck*", "ATP*", "*Nunchaku*", "*Code*", "*BNF*", "*SMT*",
    "*.*.*"]:
   string list
val unwanted_names =
   [(false, Name "*nitpick*"), (false, Name "*Nitpick*"),
    (false, Name "*full_exhaustive*"), (false, Name "*_def*"),
    (false, Name "Enum.finite*"), (false, Name "*Quickcheck*"),
    (false, Name "ATP*"), (false, Name "*Nunchaku*"),
    (false, Name "*Code*"), (false, Name "*BNF*"), (false, Name "*SMT*"),
    (false, Name "*.*.*")]:
   (bool * term Find_Theorems.criterion) list
val has_vars = fn: term -> bool
val get_all_eqs = fn: string -> Proof.context -> (string * thm) list
val get_all_thms = fn: string -> Proof.context -> (string * thm) list
val get_noneq_thms = fn: string -> Proof.context -> (string * thm) list
val template_eqs = fn:
   string -> Proof.context -> (string * thm * template) list
val template_thms = fn:
   string -> Proof.context -> (string * thm * template) list
### theory "Draft.ExtrEqs"
### 0.541s elapsed time, 1.102s cpu time, 0.117s GC time
### theory "Draft.Lucas_Lehmer_Auxiliary"
### 0.911s elapsed time, 1.647s cpu time, 0.201s GC time
Loading theory "Draft.Lucas_Lehmer_AuxiliaryTemplates"
val templateLemmas =
   [("Lucas_Lehmer_Auxiliary.congD",
     "[?a = ?b] (mod ?n) ==> ?a mod ?n = ?b mod ?n",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app (template_hole 2, template_var 2),
                template_var 1),
              template_var 0)
            )],
       template_equation
        (template_app
          (template_app (template_hole 0, template_var 2), template_var 0),
         template_app
          (template_app (template_hole 0, template_var 1),
           template_var 0)))),
    ("Lucas_Lehmer_Auxiliary.eval_coprime",
     "?b ~= (0::?'a) ==> coprime ?a ?b = coprime ?b (?a mod ?b)",
     template_implication
      ([template_negation
         (template_equation (template_var 1, template_hole 3))],
       template_equation
        (template_app
          (template_app (template_hole 1, template_var 0), template_var 1),
         template_app
          (template_app (template_hole 1, template_var 1),
           template_app
            (template_app (template_hole 0, template_var 0),
             template_var 1))))),
    ("Lucas_Lehmer_Auxiliary.prime_natD",
     "[| prime ?p; ?a dvd ?p |] ==> ?a = 1 | ?a = ?p",
     template_implication
      ([template_predicate (template_app (template_hole 4, template_var 1)),
        template_predicate
         (
            template_app
             (template_app (template_hole 3, template_var 0),
              template_var 1)
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 2,
               template_app
                (template_app (template_hole 1, template_var 0),
                 template_hole 0)),
             template_app
              (template_app (template_hole 1, template_var 0),
               template_var 1))
           ))),
    ("Lucas_Lehmer_Auxiliary.little_Fermat_nat",
     "[| prime ?p; ~ ?p dvd ?a |] ==> [?a ^ ?p = ?a] (mod ?p)",
     template_implication
      ([template_predicate (template_app (template_hole 4, template_var 1)),
        template_negation
         (
            template_predicate
             (
                template_app
                 (template_app (template_hole 2, template_var 1),
                  template_var 0)
                )
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_app
                (template_hole 1,
                 template_app
                  (template_app (template_hole 0, template_var 0),
                   template_var 1)),
               template_var 0),
             template_var 1)
           ))),
    ("Lucas_Lehmer_Auxiliary.little_Fermat_int",
     "[| prime ?p; ~ int ?p dvd ?a |] ==> [?a ^ ?p = ?a] (mod int ?p)",
     template_implication
      ([template_predicate (template_app (template_hole 5, template_var 1)),
        template_negation
         (
            template_predicate
             (
                template_app
                 (template_app
                   (template_hole 3,
                    template_app (template_hole 2, template_var 1)),
                  template_var 0)
                )
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_app
                (template_hole 1,
                 template_app
                  (template_app (template_hole 0, template_var 0),
                   template_var 1)),
               template_var 0),
             template_app (template_hole 2, template_var 1))
           ))),
    ("Lucas_Lehmer_Auxiliary.prime_dvd_choose",
     "[| 0 < ?k; ?k < ?p; prime ?p |] ==> ?p dvd ?p choose ?k",
     template_implication
      ([template_inequation (less_than, template_hole 3, template_var 1),
        template_inequation (less_than, template_var 1, template_var 0),
        template_predicate
         (template_app (template_hole 2, template_var 0))],
       template_predicate
        (
           template_app
            (template_app (template_hole 1, template_var 0),
             template_app
              (template_app (template_hole 0, template_var 0),
               template_var 1))
           ))),
    ("Lucas_Lehmer_Auxiliary.two_power_odd_mod_12",
     "[| odd ?n; 1 < ?n |] ==> [2 ^ ?n = 8] (mod 12)",
     template_implication
      ([template_negation
         (
            template_predicate
             (
                template_app
                 (template_app
                   (template_hole 8,
                    template_app
                     (template_hole 7,
                      template_app (template_hole 6, template_hole 5))),
                  template_var 0)
                )
            ),
        template_inequation (less_than, template_hole 3, template_var 0)],
       template_predicate
        (
           template_app
            (template_app
              (template_app
                (template_hole 2,
                 template_app
                  (template_app
                    (template_hole 1,
                     template_app
                      (template_hole 7,
                       template_app (template_hole 6, template_hole 5))),
                   template_var 0)),
               template_app
                (template_hole 7,
                 template_app
                  (template_hole 6,
                   template_app
                    (template_hole 6,
                     template_app (template_hole 6, template_hole 5))))),
             template_app
              (template_hole 7,
               template_app
                (template_hole 6,
                 template_app
                  (template_hole 6,
                   template_app (template_hole 0, template_hole 5)))))
           ))),
    ("Lucas_Lehmer_Auxiliary.not_prime_imp_ex_prod_nat",
     "[| 1 < ?m; ~ prime ?m |]
      ==> EX n k. ?m = n * k & 1 < n & n < ?m & 1 < k & k < ?m",
     template_implication
      ([template_inequation (less_than, template_hole 6, template_var 0),
        template_negation
         (
            template_predicate
             (template_app (template_hole 4, template_var 0))
            )],
       template_predicate (template_app (template_hole 3, t_empty)))),
    ("Lucas_Lehmer_Auxiliary.Legendre_3_right",
     "[| prime ?p; 3 < ?p |]
      ==> Legendre (int ?p) 3 = (if ?p mod 12 : {1, 7} then 1 else - 1)",
     template_implication
      ([template_predicate
         (template_app (template_hole 17, template_var 0)),
        template_inequation
         (less_than,
          template_app
           (template_hole 15,
            template_app (template_hole 14, template_hole 13)),
          template_var 0)],
       template_equation
        (template_app
          (template_app
            (template_hole 11,
             template_app (template_hole 10, template_var 0)),
           template_app
            (template_hole 9,
             template_app (template_hole 14, template_hole 13))),
         template_app
          (template_app
            (template_app
              (template_hole 8,
               template_app
                (template_app
                  (template_hole 7,
                   template_app
                    (template_app (template_hole 6, template_var 0),
                     template_app
                      (template_hole 15,
                       template_app
                        (template_hole 5,
                         template_app
                          (template_hole 5,
                           template_app
                            (template_hole 14, template_hole 13)))))),
                 template_app
                  (template_app (template_hole 4, template_hole 3),
                   template_app
                    (template_app
                      (template_hole 4,
                       template_app
                        (template_hole 15,
                         template_app
                          (template_hole 14,
                           template_app
                            (template_hole 14, template_hole 13)))),
                     template_hole 2)))),
             template_hole 1),
           template_app (template_hole 0, template_hole 1))))),
    ("Lucas_Lehmer_Auxiliary.Legendre_3_right",
     "[| prime ?p; 3 < ?p |] ==> ?p mod 12 : {1, 5, 7, 11}",
     template_implication
      ([template_predicate
         (template_app (template_hole 10, template_var 0)),
        template_inequation
         (less_than,
          template_app
           (template_hole 8,
            template_app (template_hole 7, template_hole 6)),
          template_var 0)],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 5,
               template_app
                (template_app (template_hole 4, template_var 0),
                 template_app
                  (template_hole 8,
                   template_app
                    (template_hole 3,
                     template_app
                      (template_hole 3,
                       template_app (template_hole 7, template_hole 6)))))),
             template_app
              (template_app (template_hole 2, template_hole 1),
               template_app
                (template_app
                  (template_hole 2,
                   template_app
                    (template_hole 8,
                     template_app
                      (template_hole 7,
                       template_app (template_hole 3, template_hole 6)))),
                 template_app
                  (template_app
                    (template_hole 2,
                     template_app
                      (template_hole 8,
                       template_app
                        (template_hole 7,
                         template_app (template_hole 7, template_hole 6)))),
                   template_app
                    (template_app
                      (template_hole 2,
                       template_app
                        (template_hole 8,
                         template_app
                          (template_hole 7,
                           template_app
                            (template_hole 7,
                             template_app
                              (template_hole 3, template_hole 6))))),
                     template_hole 0)))))
           ))),
    ("Lucas_Lehmer_Auxiliary.Legendre_3_left",
     "[| prime ?p; 3 < ?p |]
      ==> Legendre 3 (int ?p) = (if ?p mod 12 : {1, 11} then 1 else - 1)",
     template_implication
      ([template_predicate
         (template_app (template_hole 17, template_var 0)),
        template_inequation
         (less_than,
          template_app
           (template_hole 15,
            template_app (template_hole 14, template_hole 13)),
          template_var 0)],
       template_equation
        (template_app
          (template_app
            (template_hole 11,
             template_app
              (template_hole 10,
               template_app (template_hole 14, template_hole 13))),
           template_app (template_hole 9, template_var 0)),
         template_app
          (template_app
            (template_app
              (template_hole 8,
               template_app
                (template_app
                  (template_hole 7,
                   template_app
                    (template_app (template_hole 6, template_var 0),
                     template_app
                      (template_hole 15,
                       template_app
                        (template_hole 5,
                         template_app
                          (template_hole 5,
                           template_app
                            (template_hole 14, template_hole 13)))))),
                 template_app
                  (template_app (template_hole 4, template_hole 3),
                   template_app
                    (template_app
                      (template_hole 4,
                       template_app
                        (template_hole 15,
                         template_app
                          (template_hole 14,
                           template_app
                            (template_hole 14,
                             template_app
                              (template_hole 5, template_hole 13))))),
                     template_hole 2)))),
             template_hole 1),
           template_app (template_hole 0, template_hole 1))))),
    ("Lucas_Lehmer_Auxiliary.supplement2_Legendre'",
     "[| prime ?p; ?p ~= 2 |]
      ==> Legendre 2 ?p = (if ?p mod 8 = 1 | ?p mod 8 = 7 then 1 else - 1)",
     template_implication
      ([template_predicate
         (template_app (template_hole 12, template_var 0)),
        template_negation
         (
            template_equation
             (template_var 0,
              template_app
               (template_hole 9,
                template_app (template_hole 8, template_hole 7)))
            )],
       template_implication
        ([template_predicate
           (
              template_app
               (template_app
                 (template_hole 6,
                  template_app
                   (template_hole 9,
                    template_app (template_hole 8, template_hole 7))),
                template_var 0)
              )],
         template_predicate
          (
             template_app
              (template_app
                (template_app
                  (template_hole 5,
                   template_app
                    (template_app
                      (template_hole 4,
                       template_app
                        (template_app
                          (template_hole 10,
                           template_app
                            (template_app (template_hole 3, template_var 0),
                             template_app
                              (template_hole 9,
                               template_app
                                (template_hole 8,
                                 template_app
                                  (template_hole 8,
                                   template_app
                                    (template_hole 8, template_hole 7)))))),
                         template_hole 2)),
                     template_app
                      (template_app
                        (template_hole 10,
                         template_app
                          (template_app (template_hole 3, template_var 0),
                           template_app
                            (template_hole 9,
                             template_app
                              (template_hole 8,
                               template_app
                                (template_hole 8,
                                 template_app
                                  (template_hole 8, template_hole 7)))))),
                       template_app
                        (template_hole 9,
                         template_app
                          (template_hole 1,
                           template_app
                            (template_hole 1, template_hole 7)))))),
                 template_hole 2),
               template_app (template_hole 0, template_hole 2))
             ))))]:
   (string * thm * template) list
### theory "Draft.Lucas_Lehmer_AuxiliaryTemplates"
### 0.634s elapsed time, 0.806s cpu time, 0.096s GC time
val it = (): unit
