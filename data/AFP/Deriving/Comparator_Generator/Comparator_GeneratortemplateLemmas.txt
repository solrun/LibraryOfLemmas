   [("Comparator_Generator.trans_order_different", "trans_order Gt ?b ?c",
     template_predicate
      (
         template_app
          (template_app
            (template_app (template_hole 1, template_hole 0),
             template_var 1),
           template_var 0)
         )),
    ("Comparator_Generator.trans_order_different", "trans_order ?a Gt ?c",
     template_predicate
      (
         template_app
          (template_app
            (template_app (template_hole 1, template_var 1),
             template_hole 0),
           template_var 0)
         )),
    ("Comparator_Generator.trans_order_different", "trans_order ?a ?b Lt",
     template_predicate
      (
         template_app
          (template_app
            (template_app (template_hole 1, template_var 1),
             template_var 0),
           template_hole 0)
         )),
    ("Comparator_Generator.comp_lex_unfolds", "comp_lex [?c] = ?c",
     template_equation
      (template_app
        (template_hole 2,
         template_app
          (template_app (template_hole 1, template_var 0),
           template_hole 0)),
       template_var 0)),
    ("Comparator_Generator.comparator_imp_eq_sym_trans",
     "comparator ?acomp ==> eq_comp ?acomp",
     template_implication
      ([template_predicate
         (template_app (template_hole 1, template_var 0))],
       template_predicate
        (template_app (template_hole 0, template_var 0)))),
    ("Comparator_Generator.comparator_imp_eq_sym_trans",
     "comparator ?acomp ==> sym_comp ?acomp",
     template_implication
      ([template_predicate
         (template_app (template_hole 1, template_var 0))],
       template_predicate
        (template_app (template_hole 0, template_var 0)))),
    ("Comparator_Generator.comparator_imp_eq_sym_trans",
     "comparator ?acomp ==> trans_comp ?acomp",
     template_implication
      ([template_predicate
         (template_app (template_hole 1, template_var 0))],
       template_predicate
        (template_app (template_hole 0, template_var 0)))),
    ("Comparator_Generator.length_nth_simps", "(?x # ?xs) ! 0 = ?x",
     template_equation
      (template_app
        (template_app
          (template_hole 2,
           template_app
            (template_app (template_hole 1, template_var 1),
             template_var 0)),
         template_hole 0),
       template_var 1)),
    ("Comparator_Generator.comp_to_peq_comp",
     "comparator ?acomp ==> peq_comp ?acomp ?x",
     template_implication
      ([template_predicate
         (template_app (template_hole 1, template_var 1))],
       template_predicate
        (
           template_app
            (template_app (template_hole 0, template_var 1), template_var 0)
           ))),
    ("Comparator_Generator.comp_to_psym_comp",
     "comparator ?acomp ==> psym_comp ?acomp ?x",
     template_implication
      ([template_predicate
         (template_app (template_hole 1, template_var 1))],
       template_predicate
        (
           template_app
            (template_app (template_hole 0, template_var 1), template_var 0)
           ))),
    ("Comparator_Generator.comp_to_ptrans_comp",
     "comparator ?acomp ==> ptrans_comp ?acomp ?x",
     template_implication
      ([template_predicate
         (template_app (template_hole 1, template_var 1))],
       template_predicate
        (
           template_app
            (template_app (template_hole 0, template_var 1), template_var 0)
           ))),
    ("Comparator_Generator.eq_compD2",
     "eq_comp ?acomp ==> peq_comp ?acomp ?x",
     template_implication
      ([template_predicate
         (template_app (template_hole 1, template_var 1))],
       template_predicate
        (
           template_app
            (template_app (template_hole 0, template_var 1), template_var 0)
           ))),
    ("Comparator_Generator.sym_compD2",
     "sym_comp ?acomp ==> psym_comp ?acomp ?x",
     template_implication
      ([template_predicate
         (template_app (template_hole 1, template_var 1))],
       template_predicate
        (
           template_app
            (template_app (template_hole 0, template_var 1), template_var 0)
           ))),
    ("Comparator_Generator.trans_compD2",
     "trans_comp ?acomp ==> ptrans_comp ?acomp ?x",
     template_implication
      ([template_predicate
         (template_app (template_hole 1, template_var 1))],
       template_predicate
        (
           template_app
            (template_app (template_hole 0, template_var 1), template_var 0)
           ))),
    ("Comparator_Generator.length_nth_simps",
     "length (?x # ?xs) = Suc (length ?xs)",
     template_equation
      (template_app
        (template_hole 2,
         template_app
          (template_app (template_hole 1, template_var 1), template_var 0)),
       template_app
        (template_hole 0, template_app (template_hole 2, template_var 0)))),
    ("Comparator_Generator.eq_compI2",
     "(!!x. peq_comp ?acomp x) ==> eq_comp ?acomp",
     template_implication
      ([template_predicate (template_app (template_hole 3, t_empty))],
       template_predicate
        (template_app (template_hole 0, template_var 0)))),
    ("Comparator_Generator.sym_compI2",
     "(!!x. psym_comp ?acomp x) ==> sym_comp ?acomp",
     template_implication
      ([template_predicate (template_app (template_hole 3, t_empty))],
       template_predicate
        (template_app (template_hole 0, template_var 0)))),
    ("Comparator_Generator.trans_compI2",
     "(!!x. ptrans_comp ?acomp x) ==> trans_comp ?acomp",
     template_implication
      ([template_predicate (template_app (template_hole 3, t_empty))],
       template_predicate
        (template_app (template_hole 0, template_var 0)))),
    ("Comparator_Generator.length_nth_simps",
     "(?x # ?xs) ! Suc ?n = ?xs ! ?n",
     template_equation
      (template_app
        (template_app
          (template_hole 2,
           template_app
            (template_app (template_hole 1, template_var 2),
             template_var 1)),
         template_app (template_hole 0, template_var 0)),
       template_app
        (template_app (template_hole 2, template_var 1), template_var 0))),
    ("Comparator_Generator.forall_finite", "(ALL i<0. ?P i) = True",
     template_equation
      (template_app (template_hole 4, t_empty), template_hole 0)),
    ("Comparator_Generator.comp_lex_eq",
     "(comp_lex ?os = Eq) = (ALL ord:set ?os. ord = Eq)",
     template_equation
      (template_app
        (template_app
          (template_hole 4, template_app (template_hole 3, template_var 0)),
         template_hole 2),
       template_app
        (template_app
          (template_hole 1, template_app (template_hole 0, template_var 0)),
         t_empty))),
    ("Comparator_Generator.forall_finite", "(ALL i<Suc 0. ?P i) = ?P 0",
     template_equation
      (template_app (template_hole 4, t_empty),
       template_app (template_var 0, template_hole 0))),
    ("Comparator_Generator.sym_compD",
     "sym_comp ?acomp ==> invert_order (?acomp ?x ?y) = ?acomp ?y ?x",
     template_implication
      ([template_predicate
         (template_app (template_hole 2, template_var 2))],
       template_equation
        (template_app
          (template_hole 0,
           template_app
            (template_app (template_var 2, template_var 1),
             template_var 0)),
         template_app
          (template_app (template_var 2, template_var 0),
           template_var 1)))),
    ("Comparator_Generator.eq_compD",
     "eq_comp ?acomp ==> (?acomp ?x ?y = Eq) = (?x = ?y)",
     template_implication
      ([template_predicate
         (template_app (template_hole 4, template_var 2))],
       template_bimplication
        (template_equation
          (template_app
            (template_app (template_var 2, template_var 1), template_var 0),
           template_hole 1),
         template_equation (template_var 1, template_var 0)))),
    ("Comparator_Generator.psym_compD",
     "psym_comp ?acomp ?x ==> invert_order (?acomp ?x ?y) = ?acomp ?y ?x",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 2, template_var 2),
              template_var 1)
            )],
       template_equation
        (template_app
          (template_hole 0,
           template_app
            (template_app (template_var 2, template_var 1),
             template_var 0)),
         template_app
          (template_app (template_var 2, template_var 0),
           template_var 1)))),
    ("Comparator_Generator.trans_compD",
     "trans_comp ?acomp ==>
      trans_order (?acomp ?x ?y) (?acomp ?y ?z) (?acomp ?x ?z)",
     template_implication
      ([template_predicate
         (template_app (template_hole 1, template_var 3))],
       template_predicate
        (
           template_app
            (template_app
              (template_app
                (template_hole 0,
                 template_app
                  (template_app (template_var 3, template_var 2),
                   template_var 1)),
               template_app
                (template_app (template_var 3, template_var 1),
                 template_var 0)),
             template_app
              (template_app (template_var 3, template_var 2),
               template_var 0))
           ))),
    ("Comparator_Generator.peq_compD",
     "peq_comp ?acomp ?x ==> (?acomp ?x ?y = Eq) = (?x = ?y)",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 4, template_var 2),
              template_var 1)
            )],
       template_bimplication
        (template_equation
          (template_app
            (template_app (template_var 2, template_var 1), template_var 0),
           template_hole 1),
         template_equation (template_var 1, template_var 0)))),
    ("Comparator_Generator.eq_sym_trans_imp_comparator",
     "[| eq_comp ?acomp; sym_comp ?acomp; trans_comp ?acomp |]
      ==> comparator ?acomp",
     template_implication
      ([template_predicate (template_app (template_hole 3, template_var 0)),
        template_predicate (template_app (template_hole 2, template_var 0)),
        template_predicate
         (template_app (template_hole 1, template_var 0))],
       template_predicate
        (template_app (template_hole 0, template_var 0)))),
    ("Comparator_Generator.comp_lex_unfolds",
     "comp_lex (?c # ?d # ?cs) =
      (case ?c of Eq => comp_lex (?d # ?cs) | Lt => Lt | Gt => Gt)",
     template_equation
      (template_app
        (template_hole 4,
         template_app
          (template_app (template_hole 3, template_var 2),
           template_app
            (template_app (template_hole 3, template_var 1),
             template_var 0))),
       template_app
        (template_app
          (template_app
            (template_app
              (template_hole 2,
               template_app
                (template_hole 4,
                 template_app
                  (template_app (template_hole 3, template_var 1),
                   template_var 0))),
             template_hole 1),
           template_hole 0),
         template_var 2))),
    ("Comparator_Generator.ptrans_compD",
     "ptrans_comp ?acomp ?x ==>
      trans_order (?acomp ?x ?y) (?acomp ?y ?z) (?acomp ?x ?z)",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 1, template_var 3),
              template_var 2)
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_app
                (template_hole 0,
                 template_app
                  (template_app (template_var 3, template_var 2),
                   template_var 1)),
               template_app
                (template_app (template_var 3, template_var 1),
                 template_var 0)),
             template_app
              (template_app (template_var 3, template_var 2),
               template_var 0))
           ))),
    ("Comparator_Generator.psym_compI",
     "(!!y. invert_order (?acomp ?x y) = ?acomp y ?x) ==>
      psym_comp ?acomp ?x",
     template_implication
      ([template_predicate (template_app (template_hole 4, t_empty))],
       template_predicate
        (
           template_app
            (template_app (template_hole 0, template_var 1), template_var 0)
           ))),
    ("Comparator_Generator.peq_compI",
     "(!!y. (?acomp ?x y = Eq) = (?x = y)) ==> peq_comp ?acomp ?x",
     template_implication
      ([template_predicate (template_app (template_hole 6, t_empty))],
       template_predicate
        (
           template_app
            (template_app (template_hole 0, template_var 1), template_var 0)
           ))),
    ("Comparator_Generator.sym_compI",
     "(!!x y. invert_order (?acomp x y) = ?acomp y x) ==> sym_comp ?acomp",
     template_implication
      ([template_predicate (template_app (template_hole 4, t_empty))],
       template_predicate
        (template_app (template_hole 0, template_var 0)))),
    ("Comparator_Generator.eq_compI",
     "(!!x y. (?acomp x y = Eq) = (x = y)) ==> eq_comp ?acomp",
     template_implication
      ([template_predicate (template_app (template_hole 6, t_empty))],
       template_predicate
        (template_app (template_hole 0, template_var 0)))),
    ("Comparator_Generator.ptrans_compI",
     "(!!y z. trans_order (?acomp ?x y) (?acomp y z) (?acomp ?x z)) ==>
      ptrans_comp ?acomp ?x",
     template_implication
      ([template_predicate (template_app (template_hole 3, t_empty))],
       template_predicate
        (
           template_app
            (template_app (template_hole 0, template_var 1), template_var 0)
           ))),
    ("Comparator_Generator.trans_compI",
     "(!!x y z. trans_order (?acomp x y) (?acomp y z) (?acomp x z)) ==>
      trans_comp ?acomp",
     template_implication
      ([template_predicate (template_app (template_hole 3, t_empty))],
       template_predicate
        (template_app (template_hole 0, template_var 0)))),
    ("Comparator_Generator.All_less_Suc",
     "(ALL i<Suc ?x. ?P i) = (?P 0 & (ALL i<?x. ?P (Suc i)))",
     template_equation
      (template_app (template_hole 5, t_empty),
       template_app
        (template_app
          (template_hole 1, template_app (template_var 0, template_hole 0)),
         template_app (template_hole 5, t_empty)))),
    ("Comparator_Generator.trans_orderD",
     "[| trans_order ?x ?y ?z; ?x ~= Gt; ?y ~= Gt |] ==> ?z ~= Gt",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app (template_hole 3, template_var 2),
                template_var 1),
              template_var 0)
            ),
        template_negation
         (template_equation (template_var 2, template_hole 0)),
        template_negation
         (template_equation (template_var 1, template_hole 0))],
       template_negation
        (template_equation (template_var 0, template_hole 0)))),
    ("Comparator_Generator.forall_finite",
     "(ALL i<Suc (Suc ?x). ?P i) = (?P 0 & (ALL i<Suc ?x. ?P (Suc i)))",
     template_equation
      (template_app (template_hole 5, t_empty),
       template_app
        (template_app
          (template_hole 1, template_app (template_var 0, template_hole 0)),
         template_app (template_hole 5, t_empty)))),
    ("Comparator_Generator.comp_lex_sym",
     "[| length ?xs = length ?ys;
         ALL i<length ?ys. invert_order (?xs ! i) = ?ys ! i |]
      ==> invert_order (comp_lex ?xs) = comp_lex ?ys",
     template_implication
      ([template_equation
         (template_app (template_hole 7, template_var 1),
          template_app (template_hole 7, template_var 0)),
        template_predicate (template_app (template_hole 6, t_empty))],
       template_equation
        (template_app
          (template_hole 2, template_app (template_hole 0, template_var 1)),
         template_app (template_hole 0, template_var 0)))),
    ("Comparator_Generator.trans_orderD",
     "[| trans_order ?x ?y ?z; ?x ~= Gt; ?y ~= Gt; ?x = Lt | ?y = Lt |]
      ==> ?z = Lt",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app (template_hole 5, template_var 2),
                template_var 1),
              template_var 0)
            ),
        template_negation
         (template_equation (template_var 2, template_hole 2)),
        template_negation
         (template_equation (template_var 1, template_hole 2)),
        template_predicate
         (
            template_app
             (template_app
               (template_hole 1,
                template_app
                 (template_app (template_hole 3, template_var 2),
                  template_hole 0)),
              template_app
               (template_app (template_hole 3, template_var 1),
                template_hole 0))
            )],
       template_equation (template_var 0, template_hole 0))),
    ("Comparator_Generator.trans_orderI",
     "([| ?x ~= Gt; ?y ~= Gt |]
       ==> ?z ~= Gt & (?x = Lt | ?y = Lt --> ?z = Lt)) ==>
      trans_order ?x ?y ?z",
     template_implication
      ([template_implication
         ([template_negation
            (template_equation (template_var 2, template_hole 5))],
          template_implication
           ([template_negation
              (template_equation (template_var 1, template_hole 5))],
            template_predicate
             (
                template_app
                 (template_app
                   (template_hole 4,
                    template_app
                     (template_hole 7,
                      template_app
                       (template_app (template_hole 6, template_var 0),
                        template_hole 5))),
                  template_app
                   (template_app
                     (template_hole 3,
                      template_app
                       (template_app
                         (template_hole 2,
                          template_app
                           (template_app (template_hole 6, template_var 2),
                            template_hole 1)),
                        template_app
                         (template_app (template_hole 6, template_var 1),
                          template_hole 1))),
                    template_app
                     (template_app (template_hole 6, template_var 0),
                      template_hole 1)))
                )))],
       template_predicate
        (
           template_app
            (template_app
              (template_app (template_hole 0, template_var 2),
               template_var 1),
             template_var 0)
           ))),
    ("Comparator_Generator.comp_lex_trans",
     "[| length ?xs = length ?ys; length ?ys = length ?zs;
         ALL i<length ?zs. trans_order (?xs ! i) (?ys ! i) (?zs ! i) |]
      ==> trans_order (comp_lex ?xs) (comp_lex ?ys) (comp_lex ?zs)",
     template_implication
      ([template_equation
         (template_app (template_hole 6, template_var 2),
          template_app (template_hole 6, template_var 1)),
        template_equation
         (template_app (template_hole 6, template_var 1),
          template_app (template_hole 6, template_var 0)),
        template_predicate (template_app (template_hole 5, t_empty))],
       template_predicate
        (
           template_app
            (template_app
              (template_app
                (template_hole 2,
                 template_app (template_hole 0, template_var 2)),
               template_app (template_hole 0, template_var 1)),
             template_app (template_hole 0, template_var 0))
           )))]
