Loading theory "Draft.Comparator" (required by "Draft.Comparator_GeneratorTemplates" via "Draft.Comparator_Generator")
Loading theory "Draft.Generator_Aux" (required by "Draft.Comparator_GeneratorTemplates" via "Draft.Comparator_Generator")
Loading theory "Draft.Derive_Manager" (required by "Draft.Comparator_GeneratorTemplates" via "Draft.Comparator_Generator")
Loading theory "Draft.Templates" (required by "Draft.Comparator_GeneratorTemplates" via "Draft.ExtrEqs")
signature BNF_ACCESS =
  sig
    val bnf_types: Proof.context -> string list -> typ list
    val case_consts: Proof.context -> string list -> term list
    val case_simps: Proof.context -> string list -> thm list list
    val case_thms: Proof.context -> string list -> thm list
    val constr_argument_types:
       Proof.context -> string list -> typ list list list
    val constr_terms: Proof.context -> string -> term list
    val distinct_thms: Proof.context -> string list -> thm list list
    val induct_thms: Proof.context -> string list -> thm list
    val inject_thms: Proof.context -> string list -> thm list list
    val map_comps: Proof.context -> string list -> thm list
    val map_simps: Proof.context -> string list -> thm list list
    val map_terms: Proof.context -> string list -> term list
    val set_simps: Proof.context -> string list -> thm list list
    val set_terms: Proof.context -> string list -> term list list
  end
structure Bnf_Access: BNF_ACCESS
signature DERIVE_MANAGER =
  sig
    val derive: string -> string -> string -> theory -> theory
    val derive_cmd: string -> string -> string -> theory -> theory
    val print_info: theory -> unit
    val register_derive:
       string ->
         string ->
           (string -> string -> theory -> theory) -> theory -> theory
  end
structure Derive_Manager: DERIVE_MANAGER
### theory "Draft.Derive_Manager"
### 0.059s elapsed time, 0.264s cpu time, 0.000s GC time
datatype template_term
=
     t_empty
   | template_app of template_term * template_term
   | template_hole of int
   | template_var of int
datatype sign
= equals | greater_equals | greater_than | less_equals | less_than
datatype template
=
     template_bimplication of template * template
   | template_dunno
   | template_equation of template_term * template_term
   | template_implication of template list * template
   | template_inequation of sign * template_term * template_term
   | template_negation of template
   | template_predicate of template_term
constructor t_empty: template_term
constructor template_app: template_term * template_term -> template_term
constructor template_hole: int -> template_term
constructor template_var: int -> template_term
constructor equals: sign
constructor greater_equals: sign
constructor greater_than: sign
constructor less_equals: sign
constructor less_than: sign
constructor template_bimplication: template * template -> template
constructor template_dunno: template
constructor template_equation: template_term * template_term -> template
constructor template_implication: template list * template -> template
constructor template_inequation:
   sign * template_term * template_term -> template
constructor template_negation: template -> template
constructor template_predicate: template_term -> template
val vfs = fn: term -> (indexname * typ) list * (string * typ) list
val indexOf = fn: ''a list -> ''a -> int -> int
val has_eq = fn: term -> bool
val term2template = fn:
   (indexname * typ) list -> (string * typ) list -> term -> template_term
val lemma2predicate = fn: term -> term -> template
val makeTemplatewithContext = fn: term -> term -> template
val lemma2template = fn: term -> template
val thm2template = fn: thm -> template
val tterm2string = fn: template_term -> string
val template2string = fn: template -> string
val t = "height ?t <= size ?t": thm
val th =
   Const ("HOL.Trueprop", "bool => prop") $
     (Const ("Orderings.ord_class.less_eq", "nat => nat => bool") $
       (Const ("Tree.height_class.height", "?'a tree => nat") $
         Var (("t", 0), "?'a tree")) $
       (Const ("Nat.size_class.size", "?'a tree => nat") $
         Var (("t", 0), "?'a tree"))):
   term
### theory "Draft.Templates"
### 0.083s elapsed time, 0.337s cpu time, 0.000s GC time
Loading theory "Draft.ExtrEqs" (required by "Draft.Comparator_GeneratorTemplates")
signature GENERATOR_AUX =
  sig
    val OF_option: thm -> thm option list -> thm
    val add_used_tycos:
       Proof.context -> string -> string list -> string list
    val alist_to_string: (string * 'a) list -> string
    val conjI_tac:
       thm list ->
         Proof.context ->
           'a list -> (Proof.context -> int -> tactic) -> tactic
    val create_map:
       (typ -> term) ->
         (string * typ -> 'a -> term) ->
           'a ->
             (typ -> bool) ->
               (local_theory -> string -> bool list) ->
                 (local_theory -> string -> term) ->
                   (local_theory -> string -> 'a -> term) ->
                     string list ->
                       (local_theory -> string -> 'a) ->
                         typ -> local_theory -> term
    val create_partial:
       'a ->
         (typ -> bool) ->
           (local_theory -> string -> bool list) ->
             (local_theory -> string -> term) ->
               (local_theory -> string -> 'a -> term) ->
                 string list ->
                   (local_theory -> string -> 'a) ->
                     typ -> local_theory -> term
    val define_overloaded:
       string * term -> local_theory -> thm * local_theory
    val define_overloaded_generic:
       Attrib.binding * term -> local_theory -> thm * local_theory
    val drop_last: 'a list -> 'a list
    val freeify_tvars: typ -> typ
    val ind_case_to_idxs: 'a list list -> int -> int * int
    val infer_type: Proof.context -> term -> term
    val ints_to_subscript: int list -> string
    val is_class_instance: theory -> string -> sort -> bool
    val lambdas: term list -> term -> term
    val mk_case_tac:
       Proof.context ->
         term option list list ->
           thm ->
             (int ->
                Proof.context * thm list * (string * cterm) list -> tactic)
               -> tactic
    val mk_def: typ -> string -> term -> term
    val mk_id: typ -> term
    val mk_infer_const: string -> Proof.context -> term -> term
    val mutual_recursive_types:
       string -> Proof.context -> string list * typ list
    val prove_multi_future:
       Proof.context ->
         string list ->
           term list ->
             term list ->
               ({context: Proof.context, prems: thm list} -> tactic) ->
                 thm list
    val recursor:
       (string -> 'a) * ('a -> bool list) * string list ->
         bool ->
           (typ -> 'b) ->
             (typ -> 'b) ->
               (typ -> 'b) ->
                 ((typ * 'b option) list * 'a -> 'b) -> typ -> 'b
    val rename_types: (typ * typ) list -> term -> term
    val split_IHs:
       (string -> 'a) * ('a -> bool list) * string list ->
         typ list -> thm list -> thm list list
    val std_recursor_tac:
       (string -> 'a) * ('a -> bool list) * string list ->
         typ list ->
           ('a -> thm) ->
             thm list -> typ -> thm list -> Proof.context -> tactic
    val sub: string -> string
    val subT: string -> typ -> string
    val typ_and_vs_of_typname:
       theory -> string -> sort -> typ * (string * sort) list
    val typ_and_vs_of_used_typname:
       string ->
         bool list -> string list -> typ * (string * string list) list
    val type_parameters:
       typ -> Proof.context -> (string * sort) list * typ list
  end
structure Generator_Aux: GENERATOR_AUX
### theory "Draft.Generator_Aux"
### 0.146s elapsed time, 0.508s cpu time, 0.029s GC time
Found termination order: "{}"
locale comparator
  fixes comp :: "'a => 'a => order"
  assumes "comparator comp"
### theory "Draft.Comparator"
### 0.571s elapsed time, 1.381s cpu time, 0.086s GC time
Loading theory "Draft.Comparator_Generator" (required by "Draft.Comparator_GeneratorTemplates")
val eqpattern =
   Pattern
    (
       Const ("HOL.Trueprop", "bool => prop") $
         (Const ("HOL.eq", "?'a => ?'a => bool") $
           Var (("_dummy_", 1), "?'a") $ Var (("_dummy_", 2), "?'a"))
       ):
   term Find_Theorems.criterion
val badeqpattern = Pattern (Const ("Pure.eq", "?'a => ?'a => prop")):
   term Find_Theorems.criterion
val undefpattern =
   Pattern
    (
       Const ("HOL.Trueprop", "bool => prop") $
         (Const ("HOL.eq", "?'a => ?'a => bool") $
           Var (("_dummy_", 1), "?'a") $ Const ("HOL.undefined", "?'a"))
       ):
   term Find_Theorems.criterion
val thmpattern =
   Pattern
    (Const ("HOL.Trueprop", "bool => prop") $ Var (("_dummy_", 1), "bool")):
   term Find_Theorems.criterion
val badnames =
   ["*nitpick*", "*Nitpick*", "*full_exhaustive*", "*_def*", "Enum.finite*",
    "*Quickcheck*", "ATP*", "*Nunchaku*", "*Code*", "*BNF*", "*SMT*",
    "*.*.*"]:
   string list
val unwanted_names =
   [(false, Name "*nitpick*"), (false, Name "*Nitpick*"),
    (false, Name "*full_exhaustive*"), (false, Name "*_def*"),
    (false, Name "Enum.finite*"), (false, Name "*Quickcheck*"),
    (false, Name "ATP*"), (false, Name "*Nunchaku*"),
    (false, Name "*Code*"), (false, Name "*BNF*"), (false, Name "*SMT*"),
    (false, Name "*.*.*")]:
   (bool * term Find_Theorems.criterion) list
val has_vars = fn: term -> bool
val get_all_eqs = fn: string -> Proof.context -> (string * thm) list
val get_all_thms = fn: string -> Proof.context -> (string * thm) list
val get_noneq_thms = fn: string -> Proof.context -> (string * thm) list
val template_eqs = fn:
   string -> Proof.context -> (string * thm * template) list
val template_thms = fn:
   string -> Proof.context -> (string * thm * template) list
### theory "Draft.ExtrEqs"
### 0.517s elapsed time, 1.105s cpu time, 0.086s GC time
Found termination order: "size_list size <*mlex*> {}"
signature COMPARATOR_GENERATOR =
  sig
    datatype comparator_type = BNF | Linorder
    val ensure_info:
       comparator_type -> string -> local_theory -> local_theory
    val generate_comparator:
       comparator_type -> string -> local_theory -> local_theory
    val generate_comparators_from_bnf_fp:
       string ->
         local_theory ->
           ((term * thm list) list * (term * thm) list) * local_theory
    val get_info: Proof.context -> string -> info option
    type info =
       {comp: term,
        comp_def: thm option,
        comp_thm: thm,
        map: term,
        map_comp: thm option,
        partial_comp_thms: thm list, pcomp: term, used_positions: bool list}
    val register_comparator_of: string -> local_theory -> local_theory
    val register_foreign_comparator:
       typ -> term -> thm -> local_theory -> local_theory
    val register_foreign_partial_and_full_comparator:
       string ->
         term ->
           term ->
             term ->
               thm option ->
                 thm option ->
                   thm ->
                     thm ->
                       thm ->
                         thm -> bool list -> local_theory -> local_theory
  end
structure Comparator_Generator: COMPARATOR_GENERATOR
### theory "Draft.Comparator_Generator"
### 0.407s elapsed time, 0.463s cpu time, 0.040s GC time
Loading theory "Draft.Comparator_GeneratorTemplates"
val templateLemmas =
   [("Comparator_Generator.trans_order_different", "trans_order Gt ?b ?c",
     template_predicate
      (
         template_app
          (template_app
            (template_app (template_hole 1, template_hole 0),
             template_var 1),
           template_var 0)
         )),
    ("Comparator_Generator.trans_order_different", "trans_order ?a Gt ?c",
     template_predicate
      (
         template_app
          (template_app
            (template_app (template_hole 1, template_var 1),
             template_hole 0),
           template_var 0)
         )),
    ("Comparator_Generator.trans_order_different", "trans_order ?a ?b Lt",
     template_predicate
      (
         template_app
          (template_app
            (template_app (template_hole 1, template_var 1),
             template_var 0),
           template_hole 0)
         )),
    ("Comparator_Generator.comp_lex_unfolds", "comp_lex [?c] = ?c",
     template_equation
      (template_app
        (template_hole 2,
         template_app
          (template_app (template_hole 1, template_var 0),
           template_hole 0)),
       template_var 0)),
    ("Comparator_Generator.comparator_imp_eq_sym_trans",
     "comparator ?acomp ==> eq_comp ?acomp",
     template_implication
      ([template_predicate
         (template_app (template_hole 1, template_var 0))],
       template_predicate
        (template_app (template_hole 0, template_var 0)))),
    ("Comparator_Generator.comparator_imp_eq_sym_trans",
     "comparator ?acomp ==> sym_comp ?acomp",
     template_implication
      ([template_predicate
         (template_app (template_hole 1, template_var 0))],
       template_predicate
        (template_app (template_hole 0, template_var 0)))),
    ("Comparator_Generator.comparator_imp_eq_sym_trans",
     "comparator ?acomp ==> trans_comp ?acomp",
     template_implication
      ([template_predicate
         (template_app (template_hole 1, template_var 0))],
       template_predicate
        (template_app (template_hole 0, template_var 0)))),
    ("Comparator_Generator.length_nth_simps", "(?x # ?xs) ! 0 = ?x",
     template_equation
      (template_app
        (template_app
          (template_hole 2,
           template_app
            (template_app (template_hole 1, template_var 1),
             template_var 0)),
         template_hole 0),
       template_var 1)),
    ("Comparator_Generator.comp_to_peq_comp",
     "comparator ?acomp ==> peq_comp ?acomp ?x",
     template_implication
      ([template_predicate
         (template_app (template_hole 1, template_var 1))],
       template_predicate
        (
           template_app
            (template_app (template_hole 0, template_var 1), template_var 0)
           ))),
    ("Comparator_Generator.comp_to_psym_comp",
     "comparator ?acomp ==> psym_comp ?acomp ?x",
     template_implication
      ([template_predicate
         (template_app (template_hole 1, template_var 1))],
       template_predicate
        (
           template_app
            (template_app (template_hole 0, template_var 1), template_var 0)
           ))),
    ("Comparator_Generator.comp_to_ptrans_comp",
     "comparator ?acomp ==> ptrans_comp ?acomp ?x",
     template_implication
      ([template_predicate
         (template_app (template_hole 1, template_var 1))],
       template_predicate
        (
           template_app
            (template_app (template_hole 0, template_var 1), template_var 0)
           ))),
    ("Comparator_Generator.eq_compD2",
     "eq_comp ?acomp ==> peq_comp ?acomp ?x",
     template_implication
      ([template_predicate
         (template_app (template_hole 1, template_var 1))],
       template_predicate
        (
           template_app
            (template_app (template_hole 0, template_var 1), template_var 0)
           ))),
    ("Comparator_Generator.sym_compD2",
     "sym_comp ?acomp ==> psym_comp ?acomp ?x",
     template_implication
      ([template_predicate
         (template_app (template_hole 1, template_var 1))],
       template_predicate
        (
           template_app
            (template_app (template_hole 0, template_var 1), template_var 0)
           ))),
    ("Comparator_Generator.trans_compD2",
     "trans_comp ?acomp ==> ptrans_comp ?acomp ?x",
     template_implication
      ([template_predicate
         (template_app (template_hole 1, template_var 1))],
       template_predicate
        (
           template_app
            (template_app (template_hole 0, template_var 1), template_var 0)
           ))),
    ("Comparator_Generator.length_nth_simps",
     "length (?x # ?xs) = Suc (length ?xs)",
     template_equation
      (template_app
        (template_hole 2,
         template_app
          (template_app (template_hole 1, template_var 1), template_var 0)),
       template_app
        (template_hole 0, template_app (template_hole 2, template_var 0)))),
    ("Comparator_Generator.eq_compI2",
     "(!!x. peq_comp ?acomp x) ==> eq_comp ?acomp",
     template_implication
      ([template_predicate (template_app (template_hole 3, t_empty))],
       template_predicate
        (template_app (template_hole 0, template_var 0)))),
    ("Comparator_Generator.sym_compI2",
     "(!!x. psym_comp ?acomp x) ==> sym_comp ?acomp",
     template_implication
      ([template_predicate (template_app (template_hole 3, t_empty))],
       template_predicate
        (template_app (template_hole 0, template_var 0)))),
    ("Comparator_Generator.trans_compI2",
     "(!!x. ptrans_comp ?acomp x) ==> trans_comp ?acomp",
     template_implication
      ([template_predicate (template_app (template_hole 3, t_empty))],
       template_predicate
        (template_app (template_hole 0, template_var 0)))),
    ("Comparator_Generator.length_nth_simps",
     "(?x # ?xs) ! Suc ?n = ?xs ! ?n",
     template_equation
      (template_app
        (template_app
          (template_hole 2,
           template_app
            (template_app (template_hole 1, template_var 2),
             template_var 1)),
         template_app (template_hole 0, template_var 0)),
       template_app
        (template_app (template_hole 2, template_var 1), template_var 0))),
    ("Comparator_Generator.forall_finite", "(ALL i<0. ?P i) = True",
     template_equation
      (template_app (template_hole 4, t_empty), template_hole 0)),
    ("Comparator_Generator.comp_lex_eq",
     "(comp_lex ?os = Eq) = (ALL ord:set ?os. ord = Eq)",
     template_equation
      (template_app
        (template_app
          (template_hole 4, template_app (template_hole 3, template_var 0)),
         template_hole 2),
       template_app
        (template_app
          (template_hole 1, template_app (template_hole 0, template_var 0)),
         t_empty))),
    ("Comparator_Generator.forall_finite", "(ALL i<Suc 0. ?P i) = ?P 0",
     template_equation
      (template_app (template_hole 4, t_empty),
       template_app (template_var 0, template_hole 0))),
    ("Comparator_Generator.sym_compD",
     "sym_comp ?acomp ==> invert_order (?acomp ?x ?y) = ?acomp ?y ?x",
     template_implication
      ([template_predicate
         (template_app (template_hole 2, template_var 2))],
       template_equation
        (template_app
          (template_hole 0,
           template_app
            (template_app (template_var 2, template_var 1),
             template_var 0)),
         template_app
          (template_app (template_var 2, template_var 0),
           template_var 1)))),
    ("Comparator_Generator.eq_compD",
     "eq_comp ?acomp ==> (?acomp ?x ?y = Eq) = (?x = ?y)",
     template_implication
      ([template_predicate
         (template_app (template_hole 4, template_var 2))],
       template_bimplication
        (template_equation
          (template_app
            (template_app (template_var 2, template_var 1), template_var 0),
           template_hole 1),
         template_equation (template_var 1, template_var 0)))),
    ("Comparator_Generator.psym_compD",
     "psym_comp ?acomp ?x ==> invert_order (?acomp ?x ?y) = ?acomp ?y ?x",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 2, template_var 2),
              template_var 1)
            )],
       template_equation
        (template_app
          (template_hole 0,
           template_app
            (template_app (template_var 2, template_var 1),
             template_var 0)),
         template_app
          (template_app (template_var 2, template_var 0),
           template_var 1)))),
    ("Comparator_Generator.trans_compD",
     "trans_comp ?acomp ==>
      trans_order (?acomp ?x ?y) (?acomp ?y ?z) (?acomp ?x ?z)",
     template_implication
      ([template_predicate
         (template_app (template_hole 1, template_var 3))],
       template_predicate
        (
           template_app
            (template_app
              (template_app
                (template_hole 0,
                 template_app
                  (template_app (template_var 3, template_var 2),
                   template_var 1)),
               template_app
                (template_app (template_var 3, template_var 1),
                 template_var 0)),
             template_app
              (template_app (template_var 3, template_var 2),
               template_var 0))
           ))),
    ("Comparator_Generator.peq_compD",
     "peq_comp ?acomp ?x ==> (?acomp ?x ?y = Eq) = (?x = ?y)",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 4, template_var 2),
              template_var 1)
            )],
       template_bimplication
        (template_equation
          (template_app
            (template_app (template_var 2, template_var 1), template_var 0),
           template_hole 1),
         template_equation (template_var 1, template_var 0)))),
    ("Comparator_Generator.eq_sym_trans_imp_comparator",
     "[| eq_comp ?acomp; sym_comp ?acomp; trans_comp ?acomp |]
      ==> comparator ?acomp",
     template_implication
      ([template_predicate (template_app (template_hole 3, template_var 0)),
        template_predicate (template_app (template_hole 2, template_var 0)),
        template_predicate
         (template_app (template_hole 1, template_var 0))],
       template_predicate
        (template_app (template_hole 0, template_var 0)))),
    ("Comparator_Generator.comp_lex_unfolds",
     "comp_lex (?c # ?d # ?cs) =
      (case ?c of Eq => comp_lex (?d # ?cs) | Lt => Lt | Gt => Gt)",
     template_equation
      (template_app
        (template_hole 4,
         template_app
          (template_app (template_hole 3, template_var 2),
           template_app
            (template_app (template_hole 3, template_var 1),
             template_var 0))),
       template_app
        (template_app
          (template_app
            (template_app
              (template_hole 2,
               template_app
                (template_hole 4,
                 template_app
                  (template_app (template_hole 3, template_var 1),
                   template_var 0))),
             template_hole 1),
           template_hole 0),
         template_var 2))),
    ("Comparator_Generator.ptrans_compD",
     "ptrans_comp ?acomp ?x ==>
      trans_order (?acomp ?x ?y) (?acomp ?y ?z) (?acomp ?x ?z)",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 1, template_var 3),
              template_var 2)
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_app
                (template_hole 0,
                 template_app
                  (template_app (template_var 3, template_var 2),
                   template_var 1)),
               template_app
                (template_app (template_var 3, template_var 1),
                 template_var 0)),
             template_app
              (template_app (template_var 3, template_var 2),
               template_var 0))
           ))),
    ("Comparator_Generator.psym_compI",
     "(!!y. invert_order (?acomp ?x y) = ?acomp y ?x) ==>
      psym_comp ?acomp ?x",
     template_implication
      ([template_predicate (template_app (template_hole 4, t_empty))],
       template_predicate
        (
           template_app
            (template_app (template_hole 0, template_var 1), template_var 0)
           ))),
    ("Comparator_Generator.peq_compI",
     "(!!y. (?acomp ?x y = Eq) = (?x = y)) ==> peq_comp ?acomp ?x",
     template_implication
      ([template_predicate (template_app (template_hole 6, t_empty))],
       template_predicate
        (
           template_app
            (template_app (template_hole 0, template_var 1), template_var 0)
           ))),
    ("Comparator_Generator.sym_compI",
     "(!!x y. invert_order (?acomp x y) = ?acomp y x) ==> sym_comp ?acomp",
     template_implication
      ([template_predicate (template_app (template_hole 4, t_empty))],
       template_predicate
        (template_app (template_hole 0, template_var 0)))),
    ("Comparator_Generator.eq_compI",
     "(!!x y. (?acomp x y = Eq) = (x = y)) ==> eq_comp ?acomp",
     template_implication
      ([template_predicate (template_app (template_hole 6, t_empty))],
       template_predicate
        (template_app (template_hole 0, template_var 0)))),
    ("Comparator_Generator.ptrans_compI",
     "(!!y z. trans_order (?acomp ?x y) (?acomp y z) (?acomp ?x z)) ==>
      ptrans_comp ?acomp ?x",
     template_implication
      ([template_predicate (template_app (template_hole 3, t_empty))],
       template_predicate
        (
           template_app
            (template_app (template_hole 0, template_var 1), template_var 0)
           ))),
    ("Comparator_Generator.trans_compI",
     "(!!x y z. trans_order (?acomp x y) (?acomp y z) (?acomp x z)) ==>
      trans_comp ?acomp",
     template_implication
      ([template_predicate (template_app (template_hole 3, t_empty))],
       template_predicate
        (template_app (template_hole 0, template_var 0)))),
    ("Comparator_Generator.All_less_Suc",
     "(ALL i<Suc ?x. ?P i) = (?P 0 & (ALL i<?x. ?P (Suc i)))",
     template_equation
      (template_app (template_hole 5, t_empty),
       template_app
        (template_app
          (template_hole 1, template_app (template_var 0, template_hole 0)),
         template_app (template_hole 5, t_empty)))),
    ("Comparator_Generator.trans_orderD",
     "[| trans_order ?x ?y ?z; ?x ~= Gt; ?y ~= Gt |] ==> ?z ~= Gt",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app (template_hole 3, template_var 2),
                template_var 1),
              template_var 0)
            ),
        template_negation
         (template_equation (template_var 2, template_hole 0)),
        template_negation
         (template_equation (template_var 1, template_hole 0))],
       template_negation
        (template_equation (template_var 0, template_hole 0)))),
    ("Comparator_Generator.forall_finite",
     "(ALL i<Suc (Suc ?x). ?P i) = (?P 0 & (ALL i<Suc ?x. ?P (Suc i)))",
     template_equation
      (template_app (template_hole 5, t_empty),
       template_app
        (template_app
          (template_hole 1, template_app (template_var 0, template_hole 0)),
         template_app (template_hole 5, t_empty)))),
    ("Comparator_Generator.comp_lex_sym",
     "[| length ?xs = length ?ys;
         ALL i<length ?ys. invert_order (?xs ! i) = ?ys ! i |]
      ==> invert_order (comp_lex ?xs) = comp_lex ?ys",
     template_implication
      ([template_equation
         (template_app (template_hole 7, template_var 1),
          template_app (template_hole 7, template_var 0)),
        template_predicate (template_app (template_hole 6, t_empty))],
       template_equation
        (template_app
          (template_hole 2, template_app (template_hole 0, template_var 1)),
         template_app (template_hole 0, template_var 0)))),
    ("Comparator_Generator.trans_orderD",
     "[| trans_order ?x ?y ?z; ?x ~= Gt; ?y ~= Gt; ?x = Lt | ?y = Lt |]
      ==> ?z = Lt",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app (template_hole 5, template_var 2),
                template_var 1),
              template_var 0)
            ),
        template_negation
         (template_equation (template_var 2, template_hole 2)),
        template_negation
         (template_equation (template_var 1, template_hole 2)),
        template_predicate
         (
            template_app
             (template_app
               (template_hole 1,
                template_app
                 (template_app (template_hole 3, template_var 2),
                  template_hole 0)),
              template_app
               (template_app (template_hole 3, template_var 1),
                template_hole 0))
            )],
       template_equation (template_var 0, template_hole 0))),
    ("Comparator_Generator.trans_orderI",
     "([| ?x ~= Gt; ?y ~= Gt |]
       ==> ?z ~= Gt & (?x = Lt | ?y = Lt --> ?z = Lt)) ==>
      trans_order ?x ?y ?z",
     template_implication
      ([template_implication
         ([template_negation
            (template_equation (template_var 2, template_hole 5))],
          template_implication
           ([template_negation
              (template_equation (template_var 1, template_hole 5))],
            template_predicate
             (
                template_app
                 (template_app
                   (template_hole 4,
                    template_app
                     (template_hole 7,
                      template_app
                       (template_app (template_hole 6, template_var 0),
                        template_hole 5))),
                  template_app
                   (template_app
                     (template_hole 3,
                      template_app
                       (template_app
                         (template_hole 2,
                          template_app
                           (template_app (template_hole 6, template_var 2),
                            template_hole 1)),
                        template_app
                         (template_app (template_hole 6, template_var 1),
                          template_hole 1))),
                    template_app
                     (template_app (template_hole 6, template_var 0),
                      template_hole 1)))
                )))],
       template_predicate
        (
           template_app
            (template_app
              (template_app (template_hole 0, template_var 2),
               template_var 1),
             template_var 0)
           ))),
    ("Comparator_Generator.comp_lex_trans",
     "[| length ?xs = length ?ys; length ?ys = length ?zs;
         ALL i<length ?zs. trans_order (?xs ! i) (?ys ! i) (?zs ! i) |]
      ==> trans_order (comp_lex ?xs) (comp_lex ?ys) (comp_lex ?zs)",
     template_implication
      ([template_equation
         (template_app (template_hole 6, template_var 2),
          template_app (template_hole 6, template_var 1)),
        template_equation
         (template_app (template_hole 6, template_var 1),
          template_app (template_hole 6, template_var 0)),
        template_predicate (template_app (template_hole 5, t_empty))],
       template_predicate
        (
           template_app
            (template_app
              (template_app
                (template_hole 2,
                 template_app (template_hole 0, template_var 2)),
               template_app (template_hole 0, template_var 1)),
             template_app (template_hole 0, template_var 0))
           )))]:
   (string * thm * template) list
### theory "Draft.Comparator_GeneratorTemplates"
### 0.281s elapsed time, 0.391s cpu time, 0.038s GC time
val it = (): unit
