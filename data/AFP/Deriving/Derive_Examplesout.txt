Loading theory "Draft.Comparator" (required by "Draft.Derive_ExamplesTemplates" via "Draft.Derive_Examples" via "Draft.Derive" via "Draft.Compare_Instances" via "Draft.Compare_Generator" via "Draft.Comparator_Generator")
Loading theory "Draft.Derive_Manager" (required by "Draft.Derive_ExamplesTemplates" via "Draft.Derive_Examples" via "Draft.Derive" via "Draft.Compare_Instances" via "Draft.Compare_Generator" via "Draft.Comparator_Generator")
Loading theory "Draft.Generator_Aux" (required by "Draft.Derive_ExamplesTemplates" via "Draft.Derive_Examples" via "Draft.Derive" via "Draft.Compare_Instances" via "Draft.Compare_Generator" via "Draft.Comparator_Generator")
Loading theory "Draft.Templates" (required by "Draft.Derive_ExamplesTemplates" via "Draft.ExtrEqs")
signature BNF_ACCESS =
  sig
    val bnf_types: Proof.context -> string list -> typ list
    val case_consts: Proof.context -> string list -> term list
    val case_simps: Proof.context -> string list -> thm list list
    val case_thms: Proof.context -> string list -> thm list
    val constr_argument_types:
       Proof.context -> string list -> typ list list list
    val constr_terms: Proof.context -> string -> term list
    val distinct_thms: Proof.context -> string list -> thm list list
    val induct_thms: Proof.context -> string list -> thm list
    val inject_thms: Proof.context -> string list -> thm list list
    val map_comps: Proof.context -> string list -> thm list
    val map_simps: Proof.context -> string list -> thm list list
    val map_terms: Proof.context -> string list -> term list
    val set_simps: Proof.context -> string list -> thm list list
    val set_terms: Proof.context -> string list -> term list list
  end
structure Bnf_Access: BNF_ACCESS
signature DERIVE_MANAGER =
  sig
    val derive: string -> string -> string -> theory -> theory
    val derive_cmd: string -> string -> string -> theory -> theory
    val print_info: theory -> unit
    val register_derive:
       string ->
         string ->
           (string -> string -> theory -> theory) -> theory -> theory
  end
structure Derive_Manager: DERIVE_MANAGER
### theory "Draft.Derive_Manager"
### 0.046s elapsed time, 0.222s cpu time, 0.000s GC time
Loading theory "Draft.Countable_Generator" (required by "Draft.Derive_ExamplesTemplates" via "Draft.Derive_Examples" via "Draft.Derive")
datatype template_term
=
     t_empty
   | template_app of template_term * template_term
   | template_hole of int
   | template_var of int
datatype sign
= equals | greater_equals | greater_than | less_equals | less_than
datatype template
=
     template_bimplication of template * template
   | template_dunno
   | template_equation of template_term * template_term
   | template_implication of template list * template
   | template_inequation of sign * template_term * template_term
   | template_negation of template
   | template_predicate of template_term
constructor t_empty: template_term
constructor template_app: template_term * template_term -> template_term
constructor template_hole: int -> template_term
constructor template_var: int -> template_term
constructor equals: sign
constructor greater_equals: sign
constructor greater_than: sign
constructor less_equals: sign
constructor less_than: sign
constructor template_bimplication: template * template -> template
constructor template_dunno: template
constructor template_equation: template_term * template_term -> template
constructor template_implication: template list * template -> template
constructor template_inequation:
   sign * template_term * template_term -> template
constructor template_negation: template -> template
constructor template_predicate: template_term -> template
val vfs = fn: term -> (indexname * typ) list * (string * typ) list
val indexOf = fn: ''a list -> ''a -> int -> int
val has_eq = fn: term -> bool
val term2template = fn:
   (indexname * typ) list -> (string * typ) list -> term -> template_term
val lemma2predicate = fn: term -> term -> template
val makeTemplatewithContext = fn: term -> term -> template
val lemma2template = fn: term -> template
val thm2template = fn: thm -> template
val tterm2string = fn: template_term -> string
val template2string = fn: template -> string
val t = "height ?t <= size ?t": thm
val th =
   Const ("HOL.Trueprop", "bool => prop") $
     (Const ("Orderings.ord_class.less_eq", "nat => nat => bool") $
       (Const ("Tree.height_class.height", "?'a tree => nat") $
         Var (("t", 0), "?'a tree")) $
       (Const ("Nat.size_class.size", "?'a tree => nat") $
         Var (("t", 0), "?'a tree"))):
   term
### theory "Draft.Templates"
### 0.106s elapsed time, 0.433s cpu time, 0.028s GC time
Loading theory "Draft.ExtrEqs" (required by "Draft.Derive_ExamplesTemplates")
signature GENERATOR_AUX =
  sig
    val OF_option: thm -> thm option list -> thm
    val add_used_tycos:
       Proof.context -> string -> string list -> string list
    val alist_to_string: (string * 'a) list -> string
    val conjI_tac:
       thm list ->
         Proof.context ->
           'a list -> (Proof.context -> int -> tactic) -> tactic
    val create_map:
       (typ -> term) ->
         (string * typ -> 'a -> term) ->
           'a ->
             (typ -> bool) ->
               (local_theory -> string -> bool list) ->
                 (local_theory -> string -> term) ->
                   (local_theory -> string -> 'a -> term) ->
                     string list ->
                       (local_theory -> string -> 'a) ->
                         typ -> local_theory -> term
    val create_partial:
       'a ->
         (typ -> bool) ->
           (local_theory -> string -> bool list) ->
             (local_theory -> string -> term) ->
               (local_theory -> string -> 'a -> term) ->
                 string list ->
                   (local_theory -> string -> 'a) ->
                     typ -> local_theory -> term
    val define_overloaded:
       string * term -> local_theory -> thm * local_theory
    val define_overloaded_generic:
       Attrib.binding * term -> local_theory -> thm * local_theory
    val drop_last: 'a list -> 'a list
    val freeify_tvars: typ -> typ
    val ind_case_to_idxs: 'a list list -> int -> int * int
    val infer_type: Proof.context -> term -> term
    val ints_to_subscript: int list -> string
    val is_class_instance: theory -> string -> sort -> bool
    val lambdas: term list -> term -> term
    val mk_case_tac:
       Proof.context ->
         term option list list ->
           thm ->
             (int ->
                Proof.context * thm list * (string * cterm) list -> tactic)
               -> tactic
    val mk_def: typ -> string -> term -> term
    val mk_id: typ -> term
    val mk_infer_const: string -> Proof.context -> term -> term
    val mutual_recursive_types:
       string -> Proof.context -> string list * typ list
    val prove_multi_future:
       Proof.context ->
         string list ->
           term list ->
             term list ->
               ({context: Proof.context, prems: thm list} -> tactic) ->
                 thm list
    val recursor:
       (string -> 'a) * ('a -> bool list) * string list ->
         bool ->
           (typ -> 'b) ->
             (typ -> 'b) ->
               (typ -> 'b) ->
                 ((typ * 'b option) list * 'a -> 'b) -> typ -> 'b
    val rename_types: (typ * typ) list -> term -> term
    val split_IHs:
       (string -> 'a) * ('a -> bool list) * string list ->
         typ list -> thm list -> thm list list
    val std_recursor_tac:
       (string -> 'a) * ('a -> bool list) * string list ->
         typ list ->
           ('a -> thm) ->
             thm list -> typ -> thm list -> Proof.context -> tactic
    val sub: string -> string
    val subT: string -> typ -> string
    val typ_and_vs_of_typname:
       theory -> string -> sort -> typ * (string * sort) list
    val typ_and_vs_of_used_typname:
       string ->
         bool list -> string list -> typ * (string * string list) list
    val type_parameters:
       typ -> Proof.context -> (string * sort) list * typ list
  end
structure Generator_Aux: GENERATOR_AUX
### theory "Draft.Generator_Aux"
### 0.143s elapsed time, 0.581s cpu time, 0.028s GC time
Loading theory "Draft.Equality_Generator" (required by "Draft.Derive_ExamplesTemplates" via "Draft.Derive_Examples" via "Draft.Derive" via "Draft.Equality_Instances")
### theory "Draft.Countable_Generator"
### 0.192s elapsed time, 0.742s cpu time, 0.028s GC time
Loading theory "Draft.Hash_Generator" (required by "Draft.Derive_ExamplesTemplates" via "Draft.Derive_Examples" via "Draft.Derive" via "Draft.Hash_Instances")
signature EQUALITY_GENERATOR =
  sig
    val ensure_info: equality_type -> string -> local_theory -> local_theory
    datatype equality_type = BNF | EQ
    val generate_equality:
       equality_type -> string -> local_theory -> local_theory
    val generate_equalitys_from_bnf_fp:
       string ->
         local_theory ->
           ((term * thm list) list * (term * thm) list) * local_theory
    val get_info: Proof.context -> string -> info option
    type info =
       {equality: term,
        equality_def: thm option,
        equality_thm: thm,
        map: term,
        map_comp: thm option,
        partial_equality_thm: thm,
        pequality: term, used_positions: bool list}
    val register_equality_of: string -> local_theory -> local_theory
    val register_foreign_equality:
       typ -> term -> thm -> local_theory -> local_theory
    val register_foreign_partial_and_full_equality:
       string ->
         term ->
           term ->
             term ->
               thm option ->
                 thm option ->
                   thm -> thm -> bool list -> local_theory -> local_theory
  end
structure Equality_Generator: EQUALITY_GENERATOR
Found termination order: "{}"
### theory "Draft.Equality_Generator"
### 0.279s elapsed time, 1.097s cpu time, 0.059s GC time
Loading theory "Draft.Equality_Instances" (required by "Draft.Derive_ExamplesTemplates" via "Draft.Derive_Examples" via "Draft.Derive")
locale comparator
  fixes comp :: "'a => 'a => order"
  assumes "comparator comp"
generating equality for type "Sum_Type.sum"
generating equality for type "List.list"
generating equality for type "Product_Type.prod"
generating equality for type "Option.option"
### theory "Draft.Equality_Instances"
### 0.101s elapsed time, 0.377s cpu time, 0.053s GC time
### theory "Draft.Comparator"
### 0.694s elapsed time, 2.565s cpu time, 0.140s GC time
Loading theory "Draft.Compare" (required by "Draft.Derive_ExamplesTemplates" via "Draft.Derive_Examples" via "Draft.Derive" via "Draft.Compare_Instances" via "Draft.Compare_Generator")
Loading theory "Draft.Comparator_Generator" (required by "Draft.Derive_ExamplesTemplates" via "Draft.Derive_Examples" via "Draft.Derive" via "Draft.Compare_Instances" via "Draft.Compare_Generator")
val eqpattern =
   Pattern
    (
       Const ("HOL.Trueprop", "bool => prop") $
         (Const ("HOL.eq", "?'a => ?'a => bool") $
           Var (("_dummy_", 1), "?'a") $ Var (("_dummy_", 2), "?'a"))
       ):
   term Find_Theorems.criterion
val badeqpattern = Pattern (Const ("Pure.eq", "?'a => ?'a => prop")):
   term Find_Theorems.criterion
val undefpattern =
   Pattern
    (
       Const ("HOL.Trueprop", "bool => prop") $
         (Const ("HOL.eq", "?'a => ?'a => bool") $
           Var (("_dummy_", 1), "?'a") $ Const ("HOL.undefined", "?'a"))
       ):
   term Find_Theorems.criterion
val thmpattern =
   Pattern
    (Const ("HOL.Trueprop", "bool => prop") $ Var (("_dummy_", 1), "bool")):
   term Find_Theorems.criterion
val badnames =
   ["*nitpick*", "*Nitpick*", "*full_exhaustive*", "*_def*", "Enum.finite*",
    "*Quickcheck*", "ATP*", "*Nunchaku*", "*Code*", "*BNF*", "*SMT*",
    "*.*.*"]:
   string list
val unwanted_names =
   [(false, Name "*nitpick*"), (false, Name "*Nitpick*"),
    (false, Name "*full_exhaustive*"), (false, Name "*_def*"),
    (false, Name "Enum.finite*"), (false, Name "*Quickcheck*"),
    (false, Name "ATP*"), (false, Name "*Nunchaku*"),
    (false, Name "*Code*"), (false, Name "*BNF*"), (false, Name "*SMT*"),
    (false, Name "*.*.*")]:
   (bool * term Find_Theorems.criterion) list
val has_vars = fn: term -> bool
val get_all_eqs = fn: string -> Proof.context -> (string * thm) list
val get_all_thms = fn: string -> Proof.context -> (string * thm) list
val get_noneq_thms = fn: string -> Proof.context -> (string * thm) list
val template_eqs = fn:
   string -> Proof.context -> (string * thm * template) list
val template_thms = fn:
   string -> Proof.context -> (string * thm * template) list
### theory "Draft.ExtrEqs"
### 0.613s elapsed time, 2.234s cpu time, 0.112s GC time
Found termination order: "(%p. size_list size (snd p)) <*mlex*> {}"
class compare = type +
  fixes compare :: "'a => 'a => order"
  assumes "comparator_compare": "comparator compare"
signature HASHCODE_GENERATOR =
  sig
    val ensure_info: hash_type -> string -> local_theory -> local_theory
    val generate_hash: hash_type -> string -> local_theory -> local_theory
    val generate_hashs_from_bnf_fp:
       string ->
         local_theory ->
           ((term * thm list) list * (term * thm) list) * local_theory
    val get_info: Proof.context -> string -> info option
    datatype hash_type = BNF | HASHCODE
    val hashable_instance: string -> theory -> theory
    type info =
       {hash: term,
        hash_def: thm option,
        map: term,
        map_comp: thm option, phash: term, used_positions: bool list}
    val register_foreign_hash: typ -> term -> local_theory -> local_theory
    val register_foreign_partial_and_full_hash:
       string ->
         term ->
           term ->
             term ->
               thm option ->
                 thm option -> bool list -> local_theory -> local_theory
    val register_hash_of: string -> local_theory -> local_theory
  end
structure Hashcode_Generator: HASHCODE_GENERATOR
### theory "Draft.Hash_Generator"
### 0.636s elapsed time, 2.169s cpu time, 0.163s GC time
Loading theory "Draft.Hash_Instances" (required by "Draft.Derive_ExamplesTemplates" via "Draft.Derive_Examples" via "Draft.Derive")
generating hash-function for type "Product_Type.prod"
generating hash-function for type "Sum_Type.sum"
class compare_order = compare + ord +
  assumes "ord_defs": "le_of_comp compare = (<=)" "lt_of_comp compare = (<)"
generating hash-function for type "Option.option"
generating hash-function for type "List.list"
### theory "Draft.Hash_Instances"
### 0.101s elapsed time, 0.311s cpu time, 0.000s GC time
Found termination order: "size_list size <*mlex*> {}"
class compare_order = compare + linorder +
  assumes "ord_defs": "le_of_comp compare = (<=)" "lt_of_comp compare = (<)"
signature COMPARATOR_GENERATOR =
  sig
    datatype comparator_type = BNF | Linorder
    val ensure_info:
       comparator_type -> string -> local_theory -> local_theory
    val generate_comparator:
       comparator_type -> string -> local_theory -> local_theory
    val generate_comparators_from_bnf_fp:
       string ->
         local_theory ->
           ((term * thm list) list * (term * thm) list) * local_theory
    val get_info: Proof.context -> string -> info option
    type info =
       {comp: term,
        comp_def: thm option,
        comp_thm: thm,
        map: term,
        map_comp: thm option,
        partial_comp_thms: thm list, pcomp: term, used_positions: bool list}
    val register_comparator_of: string -> local_theory -> local_theory
    val register_foreign_comparator:
       typ -> term -> thm -> local_theory -> local_theory
    val register_foreign_partial_and_full_comparator:
       string ->
         term ->
           term ->
             term ->
               thm option ->
                 thm option ->
                   thm ->
                     thm ->
                       thm ->
                         thm -> bool list -> local_theory -> local_theory
  end
structure Comparator_Generator: COMPARATOR_GENERATOR
(if ?x <= ?y then if ?x = ?y then ?P else ?Q else ?R) =
(case compare ?x ?y of Eq => ?P | Lt => ?Q | Gt => ?R)
(if ?x <= ?y then if ?y = ?x then ?P else ?Q else ?R) =
(case compare ?x ?y of Eq => ?P | Lt => ?Q | Gt => ?R)
(if ?x <= ?y then if ?y <= ?x then ?P else ?Q else ?R) =
(case compare ?x ?y of Eq => ?P | Lt => ?Q | Gt => ?R)
(if ?x <= ?y then if ?x < ?y then ?Q else ?P else ?R) =
(case compare ?x ?y of Eq => ?P | Lt => ?Q | Gt => ?R)
(if ?x < ?y then ?Q else if ?x <= ?y then ?P else ?R) =
(case compare ?x ?y of Eq => ?P | Lt => ?Q | Gt => ?R)
(if ?x < ?y then ?Q else if ?y < ?x then ?R else ?P) =
(case compare ?x ?y of Eq => ?P | Lt => ?Q | Gt => ?R)
(if ?x < ?y then ?Q else if ?x = ?y then ?P else ?R) =
(case compare ?x ?y of Eq => ?P | Lt => ?Q | Gt => ?R)
(if ?x < ?y then ?Q else if ?y = ?x then ?P else ?R) =
(case compare ?x ?y of Eq => ?P | Lt => ?Q | Gt => ?R)
(if ?x = ?y then ?P else if ?y < ?x then ?R else ?Q) =
(case compare ?x ?y of Eq => ?P | Lt => ?Q | Gt => ?R)
(if ?x = ?y then ?P else if ?x < ?y then ?Q else ?R) =
(case compare ?x ?y of Eq => ?P | Lt => ?Q | Gt => ?R)
(if ?x = ?y then ?P else if ?y <= ?x then ?R else ?Q) =
(case compare ?x ?y of Eq => ?P | Lt => ?Q | Gt => ?R)
(if ?x = ?y then ?P else if ?x <= ?y then ?Q else ?R) =
(case compare ?x ?y of Eq => ?P | Lt => ?Q | Gt => ?R)
### theory "Draft.Comparator_Generator"
### 0.570s elapsed time, 1.472s cpu time, 0.120s GC time
signature COMPARE_CODE =
  sig
    val change_compare_code:
       term -> string list -> local_theory -> local_theory
  end
structure Compare_Code: COMPARE_CODE
### theory "Draft.Compare"
### 0.590s elapsed time, 1.500s cpu time, 0.120s GC time
Loading theory "Draft.Compare_Generator" (required by "Draft.Derive_ExamplesTemplates" via "Draft.Derive_Examples" via "Draft.Derive" via "Draft.Compare_Instances")
signature COMPARE_GENERATOR =
  sig
    val compare_instance:
       Comparator_Generator.comparator_type -> string -> theory -> theory
    val compare_order_instance_via_comparator_of: string -> theory -> theory
    val compare_order_instance_via_compare: string -> theory -> theory
  end
structure Compare_Generator: COMPARE_GENERATOR
### theory "Draft.Compare_Generator"
### 0.233s elapsed time, 0.238s cpu time, 0.000s GC time
Loading theory "Draft.Compare_Instances" (required by "Draft.Derive_ExamplesTemplates" via "Draft.Derive_Examples" via "Draft.Derive")
deriving "compare_order" instance for type "Int.int"
deriving "compare" instance for type "Int.int"
deriving "compare_order" instance for type "Code_Numeral.integer"
deriving "compare" instance for type "Code_Numeral.integer"
deriving "compare_order" instance for type "Nat.nat"
deriving "compare" instance for type "Nat.nat"
deriving "compare_order" instance for type "String.char"
deriving "compare" instance for type "String.char"
deriving "compare" instance for type "Sum_Type.sum"
generating comparator for type "Sum_Type.sum"
deriving "compare" instance for type "List.list"
generating comparator for type "List.list"
deriving "compare" instance for type "Product_Type.prod"
generating comparator for type "Product_Type.prod"
deriving "compare" instance for type "Option.option"
generating comparator for type "Option.option"
Found termination order: "{}"
Found termination order: "{}"
deriving "compare" instance for type "HOL.bool"
deriving "compare" instance for type "Product_Type.unit"
deriving "compare_order" instance for type "HOL.bool"
deriving "compare_order" instance for type "Product_Type.unit"
### theory "Draft.Compare_Instances"
### 0.334s elapsed time, 0.355s cpu time, 0.031s GC time
Loading theory "Draft.Compare_Order_Instances" (required by "Draft.Derive_ExamplesTemplates" via "Draft.Derive_Examples")
Loading theory "Draft.Derive" (required by "Draft.Derive_ExamplesTemplates" via "Draft.Derive_Examples")
deriving "compare_order" instance for type "Sum_Type.sum"
### theory "Draft.Compare_Order_Instances"
### 0.348s elapsed time, 0.698s cpu time, 0.000s GC time
The following sorts can be derived
comparator: generate comparators for given types, options: (linorder) or ()
compare: register types in class compare, options: (linorder) or ()
compare_order: register types in class compare_order, options: (linorder) or ()
countable: register datatypes is class countable
equality: generate an equality function, options are () and (eq)
hash_code: generate a hash function, options are () and (hashcode)
hashable: register types in class hashable
linorder: register types in class linorder, options: (linorder) or ()
### theory "Draft.Derive"
### 0.566s elapsed time, 0.960s cpu time, 0.046s GC time
Loading theory "Draft.Derive_Examples" (required by "Draft.Derive_ExamplesTemplates")
deriving "compare_order" instance for type "Rat.rat"
deriving "compare" instance for type "Rat.rat"
instantiation
  rat :: hashable
  hashcode_rat == hashcode :: rat => uint32
  def_hashmap_size_rat == def_hashmap_size :: rat itself => nat
deriving "compare_order" instance for type "Derive_Examples.bintree"
deriving "compare" instance for type "Derive_Examples.bintree"
generating comparator for type "Derive_Examples.bintree"
proving that datatype bintree is countable
registered bintree in class countable
generating equality for type "Derive_Examples.bintree"
deriving "hashable" instance for type "Derive_Examples.bintree"
generating hash-function for type "Derive_Examples.bintree"
deriving "compare_order" instance for type "Derive_Examples.nat_list_list"
deriving "compare" instance for type "Derive_Examples.nat_list_list"
generating comparator for type "Derive_Examples.nat_list_list"
proving that datatype nat_list_list is countable
registered nat_list_list in class countable
deriving "hashable" instance for type "Derive_Examples.nat_list_list"
generating hash-function for type "Derive_Examples.nat_list_list"
deriving "compare_order" instance for type "Derive_Examples.mtree"
deriving "compare" instance for type "Derive_Examples.mtree"
generating comparator for type "Derive_Examples.mtree"
generating comparator for type "Derive_Examples.mtree_list"
deriving "compare_order" instance for type "Derive_Examples.mtree_list"
deriving "compare" instance for type "Derive_Examples.mtree_list"
proving that datatype mtree is countable
registered mtree in class countable
proving that datatype mtree_list is countable
registered mtree_list in class countable
deriving "hashable" instance for type "Derive_Examples.mtree"
generating hash-function for type "Derive_Examples.mtree"
generating hash-function for type "Derive_Examples.mtree_list"
deriving "hashable" instance for type "Derive_Examples.mtree_list"
generating equality for type "Derive_Examples.mtree"
generating equality for type "Derive_Examples.mtree_list"
deriving "compare_order" instance for type "Derive_Examples.tree"
deriving "compare" instance for type "Derive_Examples.tree"
generating comparator for type "Derive_Examples.tree"
deriving "compare_order" instance for type "Derive_Examples.ttree"
deriving "compare" instance for type "Derive_Examples.ttree"
generating comparator for type "Derive_Examples.ttree"
proving that datatype tree is countable
registered tree in class countable
proving that datatype ttree is countable
registered ttree in class countable
generating equality for type "Derive_Examples.tree"
generating equality for type "Derive_Examples.ttree"
deriving "hashable" instance for type "Derive_Examples.tree"
generating hash-function for type "Derive_Examples.tree"
deriving "hashable" instance for type "Derive_Examples.ttree"
generating hash-function for type "Derive_Examples.ttree"
deriving "compare_order" instance for type "Derive_Examples.term"
deriving "compare" instance for type "Derive_Examples.term"
generating comparator for type "Derive_Examples.term"
deriving "compare_order" instance for type "Derive_Examples.lab"
deriving "compare" instance for type "Derive_Examples.lab"
generating comparator for type "Derive_Examples.lab"
proving that datatype term is countable
registered term in class countable
proving that datatype lab is countable
registered lab in class countable
generating equality for type "Derive_Examples.term"
generating equality for type "Derive_Examples.lab"
deriving "hashable" instance for type "Derive_Examples.term"
generating hash-function for type "Derive_Examples.term"
deriving "hashable" instance for type "Derive_Examples.lab"
generating hash-function for type "Derive_Examples.lab"
deriving "compare_order" instance for type "Derive_Examples.complex"
deriving "compare" instance for type "Derive_Examples.complex"
generating comparator for type "Derive_Examples.complex"
generating comparator for type "Derive_Examples.complex2"
deriving "compare" instance for type "Derive_Examples.complex2"
deriving "linorder" instance for type "Derive_Examples.complex2"
proving that datatype complex is countable
registered complex in class countable
proving that datatype complex2 is countable
registered complex2 in class countable
generating equality for type "Derive_Examples.complex"
generating equality for type "Derive_Examples.complex2"
deriving "hashable" instance for type "Derive_Examples.complex"
generating hash-function for type "Derive_Examples.complex"
generating hash-function for type "Derive_Examples.complex2"
deriving "hashable" instance for type "Derive_Examples.complex2"
### theory "Draft.Derive_Examples"
### 6.816s elapsed time, 8.015s cpu time, 1.748s GC time
Loading theory "Draft.Derive_ExamplesTemplates"
val templateLemmas =
   [("Derive_Examples.comparator_nat_list_list_pointwise",
     "peq_comp comparator_nat_list_list ?x\<^sub>0",
     template_predicate
      (
         template_app
          (template_app (template_hole 1, template_hole 0), template_var 0)
         )),
    ("Derive_Examples.comparator_nat_list_list_pointwise",
     "psym_comp comparator_nat_list_list ?x\<^sub>0",
     template_predicate
      (
         template_app
          (template_app (template_hole 1, template_hole 0), template_var 0)
         )),
    ("Derive_Examples.comparator_nat_list_list_pointwise",
     "ptrans_comp comparator_nat_list_list ?x\<^sub>0",
     template_predicate
      (
         template_app
          (template_app (template_hole 1, template_hole 0), template_var 0)
         )),
    ("Derive_Examples.equality_bintree_simps",
     "equality_bintree ?eq\<^sub>'\<^sub>a BEmpty BEmpty = True",
     template_equation
      (template_app
        (template_app
          (template_app (template_hole 2, template_var 0), template_hole 1),
         template_hole 1),
       template_hole 0)),
    ("Derive_Examples.equality_mtree_simps",
     "equality_mtree ?eq\<^sub>'\<^sub>a MEmpty MEmpty = True",
     template_equation
      (template_app
        (template_app
          (template_app (template_hole 2, template_var 0), template_hole 1),
         template_hole 1),
       template_hole 0)),
    ("Derive_Examples.equality_mtree_list_simps",
     "equality_mtree_list ?eq\<^sub>'\<^sub>a MNil MNil = True",
     template_equation
      (template_app
        (template_app
          (template_app (template_hole 2, template_var 0), template_hole 1),
         template_hole 1),
       template_hole 0)),
    ("Derive_Examples.equality_tree_simps",
     "equality_tree ?eq\<^sub>'\<^sub>a Empty Empty = True",
     template_equation
      (template_app
        (template_app
          (template_app (template_hole 2, template_var 0), template_hole 1),
         template_hole 1),
       template_hole 0)),
    ("Derive_Examples.equality_ttree_simps",
     "equality_ttree ?eq\<^sub>'\<^sub>a TEmpty TEmpty = True",
     template_equation
      (template_app
        (template_app
          (template_app (template_hole 2, template_var 0), template_hole 1),
         template_hole 1),
       template_hole 0)),
    ("Derive_Examples.comparator_bintree_simps",
     "comparator_bintree ?comp\<^sub>'\<^sub>a BEmpty BEmpty = Eq",
     template_equation
      (template_app
        (template_app
          (template_app (template_hole 2, template_var 0), template_hole 1),
         template_hole 1),
       template_hole 0)),
    ("Derive_Examples.comparator_mtree_simps",
     "comparator_mtree ?comp\<^sub>'\<^sub>a MEmpty MEmpty = Eq",
     template_equation
      (template_app
        (template_app
          (template_app (template_hole 2, template_var 0), template_hole 1),
         template_hole 1),
       template_hole 0)),
    ("Derive_Examples.comparator_mtree_list_simps",
     "comparator_mtree_list ?comp\<^sub>'\<^sub>a MNil MNil = Eq",
     template_equation
      (template_app
        (template_app
          (template_app (template_hole 2, template_var 0), template_hole 1),
         template_hole 1),
       template_hole 0)),
    ("Derive_Examples.comparator_tree_simps",
     "comparator_tree ?comp\<^sub>'\<^sub>a Empty Empty = Eq",
     template_equation
      (template_app
        (template_app
          (template_app (template_hole 2, template_var 0), template_hole 1),
         template_hole 1),
       template_hole 0)),
    ("Derive_Examples.comparator_ttree_simps",
     "comparator_ttree ?comp\<^sub>'\<^sub>a TEmpty TEmpty = Eq",
     template_equation
      (template_app
        (template_app
          (template_app (template_hole 2, template_var 0), template_hole 1),
         template_hole 1),
       template_hole 0)),
    ("Derive_Examples.comparator_nat_list_list_simps",
     "comparator_nat_list_list NNil (CCons ?y ?ya) = Lt",
     template_equation
      (template_app
        (template_app (template_hole 3, template_hole 2),
         template_app
          (template_app (template_hole 1, template_var 1), template_var 0)),
       template_hole 0)),
    ("Derive_Examples.comparator_nat_list_list_simps",
     "comparator_nat_list_list (CCons ?x ?xa) NNil = Gt",
     template_equation
      (template_app
        (template_app
          (template_hole 3,
           template_app
            (template_app (template_hole 2, template_var 1),
             template_var 0)),
         template_hole 1),
       template_hole 0)),
    ("Derive_Examples.comparator_tree",
     "comparator ?comp\<^sub>'\<^sub>a ==>
      comparator (comparator_tree ?comp\<^sub>'\<^sub>a)",
     template_implication
      ([template_predicate
         (template_app (template_hole 2, template_var 0))],
       template_predicate
        (
           template_app
            (template_hole 1,
             template_app (template_hole 0, template_var 0))
           ))),
    ("Derive_Examples.comparator_mtree",
     "comparator ?comp\<^sub>'\<^sub>a ==>
      comparator (comparator_mtree ?comp\<^sub>'\<^sub>a)",
     template_implication
      ([template_predicate
         (template_app (template_hole 2, template_var 0))],
       template_predicate
        (
           template_app
            (template_hole 1,
             template_app (template_hole 0, template_var 0))
           ))),
    ("Derive_Examples.comparator_ttree",
     "comparator ?comp\<^sub>'\<^sub>a ==>
      comparator (comparator_ttree ?comp\<^sub>'\<^sub>a)",
     template_implication
      ([template_predicate
         (template_app (template_hole 2, template_var 0))],
       template_predicate
        (
           template_app
            (template_hole 1,
             template_app (template_hole 0, template_var 0))
           ))),
    ("Derive_Examples.comparator_bintree",
     "comparator ?comp\<^sub>'\<^sub>a ==>
      comparator (comparator_bintree ?comp\<^sub>'\<^sub>a)",
     template_implication
      ([template_predicate
         (template_app (template_hole 2, template_var 0))],
       template_predicate
        (
           template_app
            (template_hole 1,
             template_app (template_hole 0, template_var 0))
           ))),
    ("Derive_Examples.comparator_mtree_list",
     "comparator ?comp\<^sub>'\<^sub>a ==>
      comparator (comparator_mtree_list ?comp\<^sub>'\<^sub>a)",
     template_implication
      ([template_predicate
         (template_app (template_hole 2, template_var 0))],
       template_predicate
        (
           template_app
            (template_hole 1,
             template_app (template_hole 0, template_var 0))
           ))),
    ("Derive_Examples.equality_tree",
     "equality ?eq\<^sub>'\<^sub>a ==>
      equality (equality_tree ?eq\<^sub>'\<^sub>a)",
     template_implication
      ([template_predicate
         (template_app (template_hole 2, template_var 0))],
       template_predicate
        (
           template_app
            (template_hole 1,
             template_app (template_hole 0, template_var 0))
           ))),
    ("Derive_Examples.equality_mtree",
     "equality ?eq\<^sub>'\<^sub>a ==>
      equality (equality_mtree ?eq\<^sub>'\<^sub>a)",
     template_implication
      ([template_predicate
         (template_app (template_hole 2, template_var 0))],
       template_predicate
        (
           template_app
            (template_hole 1,
             template_app (template_hole 0, template_var 0))
           ))),
    ("Derive_Examples.equality_ttree",
     "equality ?eq\<^sub>'\<^sub>a ==>
      equality (equality_ttree ?eq\<^sub>'\<^sub>a)",
     template_implication
      ([template_predicate
         (template_app (template_hole 2, template_var 0))],
       template_predicate
        (
           template_app
            (template_hole 1,
             template_app (template_hole 0, template_var 0))
           ))),
    ("Derive_Examples.equality_bintree",
     "equality ?eq\<^sub>'\<^sub>a ==>
      equality (equality_bintree ?eq\<^sub>'\<^sub>a)",
     template_implication
      ([template_predicate
         (template_app (template_hole 2, template_var 0))],
       template_predicate
        (
           template_app
            (template_hole 1,
             template_app (template_hole 0, template_var 0))
           ))),
    ("Derive_Examples.equality_mtree_list",
     "equality ?eq\<^sub>'\<^sub>a ==>
      equality (equality_mtree_list ?eq\<^sub>'\<^sub>a)",
     template_implication
      ([template_predicate
         (template_app (template_hole 2, template_var 0))],
       template_predicate
        (
           template_app
            (template_hole 1,
             template_app (template_hole 0, template_var 0))
           ))),
    ("Derive_Examples.equality_mtree_simps",
     "equality_mtree ?eq\<^sub>'\<^sub>a MEmpty (MNode ?y ?ya) = False",
     template_equation
      (template_app
        (template_app
          (template_app (template_hole 3, template_var 2), template_hole 2),
         template_app
          (template_app (template_hole 1, template_var 1), template_var 0)),
       template_hole 0)),
    ("Derive_Examples.equality_mtree_simps",
     "equality_mtree ?eq\<^sub>'\<^sub>a (MNode ?x ?xa) MEmpty = False",
     template_equation
      (template_app
        (template_app
          (template_app (template_hole 3, template_var 2),
           template_app
            (template_app (template_hole 2, template_var 1),
             template_var 0)),
         template_hole 1),
       template_hole 0)),
    ("Derive_Examples.equality_mtree_list_simps",
     "equality_mtree_list ?eq\<^sub>'\<^sub>a MNil (MCons ?y ?ya) = False",
     template_equation
      (template_app
        (template_app
          (template_app (template_hole 3, template_var 2), template_hole 2),
         template_app
          (template_app (template_hole 1, template_var 1), template_var 0)),
       template_hole 0)),
    ("Derive_Examples.equality_mtree_list_simps",
     "equality_mtree_list ?eq\<^sub>'\<^sub>a (MCons ?x ?xa) MNil = False",
     template_equation
      (template_app
        (template_app
          (template_app (template_hole 3, template_var 2),
           template_app
            (template_app (template_hole 2, template_var 1),
             template_var 0)),
         template_hole 1),
       template_hole 0)),
    ("Derive_Examples.equality_tree_simps",
     "equality_tree ?eq\<^sub>'\<^sub>a Empty
       (Derive_Examples.tree.Node ?y ?ya) =
      False",
     template_equation
      (template_app
        (template_app
          (template_app (template_hole 3, template_var 2), template_hole 2),
         template_app
          (template_app (template_hole 1, template_var 1), template_var 0)),
       template_hole 0)),
    ("Derive_Examples.equality_tree_simps",
     "equality_tree ?eq\<^sub>'\<^sub>a (Derive_Examples.tree.Node ?x ?xa)
       Empty =
      False",
     template_equation
      (template_app
        (template_app
          (template_app (template_hole 3, template_var 2),
           template_app
            (template_app (template_hole 2, template_var 1),
             template_var 0)),
         template_hole 1),
       template_hole 0)),
    ("Derive_Examples.equality_ttree_simps",
     "equality_ttree ?eq\<^sub>'\<^sub>a TEmpty (TNode ?y ?ya) = False",
     template_equation
      (template_app
        (template_app
          (template_app (template_hole 3, template_var 2), template_hole 2),
         template_app
          (template_app (template_hole 1, template_var 1), template_var 0)),
       template_hole 0)),
    ("Derive_Examples.equality_ttree_simps",
     "equality_ttree ?eq\<^sub>'\<^sub>a (TNode ?x ?xa) TEmpty = False",
     template_equation
      (template_app
        (template_app
          (template_app (template_hole 3, template_var 2),
           template_app
            (template_app (template_hole 2, template_var 1),
             template_var 0)),
         template_hole 1),
       template_hole 0)),
    ("Derive_Examples.comparator_mtree_simps",
     "comparator_mtree ?comp\<^sub>'\<^sub>a MEmpty (MNode ?y ?ya) = Lt",
     template_equation
      (template_app
        (template_app
          (template_app (template_hole 3, template_var 2), template_hole 2),
         template_app
          (template_app (template_hole 1, template_var 1), template_var 0)),
       template_hole 0)),
    ("Derive_Examples.comparator_mtree_simps",
     "comparator_mtree ?comp\<^sub>'\<^sub>a (MNode ?x ?xa) MEmpty = Gt",
     template_equation
      (template_app
        (template_app
          (template_app (template_hole 3, template_var 2),
           template_app
            (template_app (template_hole 2, template_var 1),
             template_var 0)),
         template_hole 1),
       template_hole 0)),
    ("Derive_Examples.comparator_mtree_list_simps",
     "comparator_mtree_list ?comp\<^sub>'\<^sub>a MNil (MCons ?y ?ya) = Lt",
     template_equation
      (template_app
        (template_app
          (template_app (template_hole 3, template_var 2), template_hole 2),
         template_app
          (template_app (template_hole 1, template_var 1), template_var 0)),
       template_hole 0)),
    ("Derive_Examples.comparator_mtree_list_simps",
     "comparator_mtree_list ?comp\<^sub>'\<^sub>a (MCons ?x ?xa) MNil = Gt",
     template_equation
      (template_app
        (template_app
          (template_app (template_hole 3, template_var 2),
           template_app
            (template_app (template_hole 2, template_var 1),
             template_var 0)),
         template_hole 1),
       template_hole 0)),
    ("Derive_Examples.comparator_tree_simps",
     "comparator_tree ?comp\<^sub>'\<^sub>a Empty
       (Derive_Examples.tree.Node ?y ?ya) =
      Lt",
     template_equation
      (template_app
        (template_app
          (template_app (template_hole 3, template_var 2), template_hole 2),
         template_app
          (template_app (template_hole 1, template_var 1), template_var 0)),
       template_hole 0)),
    ("Derive_Examples.comparator_tree_simps",
     "comparator_tree ?comp\<^sub>'\<^sub>a
       (Derive_Examples.tree.Node ?x ?xa) Empty =
      Gt",
     template_equation
      (template_app
        (template_app
          (template_app (template_hole 3, template_var 2),
           template_app
            (template_app (template_hole 2, template_var 1),
             template_var 0)),
         template_hole 1),
       template_hole 0)),
    ("Derive_Examples.comparator_ttree_simps",
     "comparator_ttree ?comp\<^sub>'\<^sub>a TEmpty (TNode ?y ?ya) = Lt",
     template_equation
      (template_app
        (template_app
          (template_app (template_hole 3, template_var 2), template_hole 2),
         template_app
          (template_app (template_hole 1, template_var 1), template_var 0)),
       template_hole 0)),
    ("Derive_Examples.comparator_ttree_simps",
     "comparator_ttree ?comp\<^sub>'\<^sub>a (TNode ?x ?xa) TEmpty = Gt",
     template_equation
      (template_app
        (template_app
          (template_app (template_hole 3, template_var 2),
           template_app
            (template_app (template_hole 2, template_var 1),
             template_var 0)),
         template_hole 1),
       template_hole 0)),
    ("Derive_Examples.equality_bintree_simps",
     "equality_bintree ?eq\<^sub>'\<^sub>a BEmpty (BNode ?y ?ya ?yb) =
      False",
     template_equation
      (template_app
        (template_app
          (template_app (template_hole 3, template_var 3), template_hole 2),
         template_app
          (template_app
            (template_app (template_hole 1, template_var 2),
             template_var 1),
           template_var 0)),
       template_hole 0)),
    ("Derive_Examples.equality_bintree_simps",
     "equality_bintree ?eq\<^sub>'\<^sub>a (BNode ?x ?xa ?xb) BEmpty =
      False",
     template_equation
      (template_app
        (template_app
          (template_app (template_hole 3, template_var 3),
           template_app
            (template_app
              (template_app (template_hole 2, template_var 2),
               template_var 1),
             template_var 0)),
         template_hole 1),
       template_hole 0)),
    ("Derive_Examples.equality_lab_simps",
     "equality_lab ?eq\<^sub>'\<^sub>f ?eq\<^sub>'\<^sub>l (Sharp ?x)
       (UnLab ?yd) =
      False",
     template_equation
      (template_app
        (template_app
          (template_app
            (template_app (template_hole 3, template_var 3),
             template_var 2),
           template_app (template_hole 2, template_var 1)),
         template_app (template_hole 1, template_var 0)),
       template_hole 0)),
    ("Derive_Examples.equality_lab_simps",
     "equality_lab ?eq\<^sub>'\<^sub>f ?eq\<^sub>'\<^sub>l (UnLab ?x)
       (Sharp ?ye) =
      False",
     template_equation
      (template_app
        (template_app
          (template_app
            (template_app (template_hole 3, template_var 3),
             template_var 2),
           template_app (template_hole 2, template_var 1)),
         template_app (template_hole 1, template_var 0)),
       template_hole 0)),
    ("Derive_Examples.comparator_bintree_simps",
     "comparator_bintree ?comp\<^sub>'\<^sub>a BEmpty (BNode ?y ?ya ?yb) =
      Lt",
     template_equation
      (template_app
        (template_app
          (template_app (template_hole 3, template_var 3), template_hole 2),
         template_app
          (template_app
            (template_app (template_hole 1, template_var 2),
             template_var 1),
           template_var 0)),
       template_hole 0)),
    ("Derive_Examples.comparator_bintree_simps",
     "comparator_bintree ?comp\<^sub>'\<^sub>a (BNode ?x ?xa ?xb) BEmpty =
      Gt",
     template_equation
      (template_app
        (template_app
          (template_app (template_hole 3, template_var 3),
           template_app
            (template_app
              (template_app (template_hole 2, template_var 2),
               template_var 1),
             template_var 0)),
         template_hole 1),
       template_hole 0)),
    ("Derive_Examples.comparator_lab_simps",
     "comparator_lab ?comp\<^sub>'\<^sub>f ?comp\<^sub>'\<^sub>l (Sharp ?x)
       (UnLab ?yd) =
      Gt",
     template_equation
      (template_app
        (template_app
          (template_app
            (template_app (template_hole 3, template_var 3),
             template_var 2),
           template_app (template_hole 2, template_var 1)),
         template_app (template_hole 1, template_var 0)),
       template_hole 0)),
    ("Derive_Examples.comparator_lab_simps",
     "comparator_lab ?comp\<^sub>'\<^sub>f ?comp\<^sub>'\<^sub>l (UnLab ?x)
       (Sharp ?ye) =
      Lt",
     template_equation
      (template_app
        (template_app
          (template_app
            (template_app (template_hole 3, template_var 3),
             template_var 2),
           template_app (template_hole 2, template_var 1)),
         template_app (template_hole 1, template_var 0)),
       template_hole 0)),
    ("Derive_Examples.equality_lab_simps",
     "equality_lab ?eq\<^sub>'\<^sub>f ?eq\<^sub>'\<^sub>l (Sharp ?x)
       (FunLab ?yb ?yc) =
      False",
     template_equation
      (template_app
        (template_app
          (template_app
            (template_app (template_hole 3, template_var 4),
             template_var 3),
           template_app (template_hole 2, template_var 2)),
         template_app
          (template_app (template_hole 1, template_var 1), template_var 0)),
       template_hole 0)),
    ("Derive_Examples.equality_lab_simps",
     "equality_lab ?eq\<^sub>'\<^sub>f ?eq\<^sub>'\<^sub>l (Sharp ?x)
       (Lab ?y ?ya) =
      False",
     template_equation
      (template_app
        (template_app
          (template_app
            (template_app (template_hole 3, template_var 4),
             template_var 3),
           template_app (template_hole 2, template_var 2)),
         template_app
          (template_app (template_hole 1, template_var 1), template_var 0)),
       template_hole 0)),
    ("Derive_Examples.equality_lab_simps",
     "equality_lab ?eq\<^sub>'\<^sub>f ?eq\<^sub>'\<^sub>l (UnLab ?x)
       (FunLab ?yb ?yc) =
      False",
     template_equation
      (template_app
        (template_app
          (template_app
            (template_app (template_hole 3, template_var 4),
             template_var 3),
           template_app (template_hole 2, template_var 2)),
         template_app
          (template_app (template_hole 1, template_var 1), template_var 0)),
       template_hole 0)),
    ("Derive_Examples.equality_lab_simps",
     "equality_lab ?eq\<^sub>'\<^sub>f ?eq\<^sub>'\<^sub>l (UnLab ?x)
       (Lab ?y ?ya) =
      False",
     template_equation
      (template_app
        (template_app
          (template_app
            (template_app (template_hole 3, template_var 4),
             template_var 3),
           template_app (template_hole 2, template_var 2)),
         template_app
          (template_app (template_hole 1, template_var 1), template_var 0)),
       template_hole 0)),
    ("Derive_Examples.equality_lab_simps",
     "equality_lab ?eq\<^sub>'\<^sub>f ?eq\<^sub>'\<^sub>l (FunLab ?x ?xa)
       (Sharp ?ye) =
      False",
     template_equation
      (template_app
        (template_app
          (template_app
            (template_app (template_hole 3, template_var 4),
             template_var 3),
           template_app
            (template_app (template_hole 2, template_var 2),
             template_var 1)),
         template_app (template_hole 1, template_var 0)),
       template_hole 0)),
    ("Derive_Examples.equality_lab_simps",
     "equality_lab ?eq\<^sub>'\<^sub>f ?eq\<^sub>'\<^sub>l (FunLab ?x ?xa)
       (UnLab ?yd) =
      False",
     template_equation
      (template_app
        (template_app
          (template_app
            (template_app (template_hole 3, template_var 4),
             template_var 3),
           template_app
            (template_app (template_hole 2, template_var 2),
             template_var 1)),
         template_app (template_hole 1, template_var 0)),
       template_hole 0)),
    ("Derive_Examples.equality_lab_simps",
     "equality_lab ?eq\<^sub>'\<^sub>f ?eq\<^sub>'\<^sub>l (Lab ?x ?xa)
       (Sharp ?ye) =
      False",
     template_equation
      (template_app
        (template_app
          (template_app
            (template_app (template_hole 3, template_var 4),
             template_var 3),
           template_app
            (template_app (template_hole 2, template_var 2),
             template_var 1)),
         template_app (template_hole 1, template_var 0)),
       template_hole 0)),
    ("Derive_Examples.equality_lab_simps",
     "equality_lab ?eq\<^sub>'\<^sub>f ?eq\<^sub>'\<^sub>l (Lab ?x ?xa)
       (UnLab ?yd) =
      False",
     template_equation
      (template_app
        (template_app
          (template_app
            (template_app (template_hole 3, template_var 4),
             template_var 3),
           template_app
            (template_app (template_hole 2, template_var 2),
             template_var 1)),
         template_app (template_hole 1, template_var 0)),
       template_hole 0)),
    ("Derive_Examples.equality_term_simps",
     "equality_term ?eq\<^sub>'\<^sub>f ?eq\<^sub>'\<^sub>v (Var ?x)
       (Fun ?ya ?yb) =
      False",
     template_equation
      (template_app
        (template_app
          (template_app
            (template_app (template_hole 3, template_var 4),
             template_var 3),
           template_app (template_hole 2, template_var 2)),
         template_app
          (template_app (template_hole 1, template_var 1), template_var 0)),
       template_hole 0)),
    ("Derive_Examples.equality_term_simps",
     "equality_term ?eq\<^sub>'\<^sub>f ?eq\<^sub>'\<^sub>v (Fun ?x ?xa)
       (Var ?y) =
      False",
     template_equation
      (template_app
        (template_app
          (template_app
            (template_app (template_hole 3, template_var 4),
             template_var 3),
           template_app
            (template_app (template_hole 2, template_var 2),
             template_var 1)),
         template_app (template_hole 1, template_var 0)),
       template_hole 0)),
    ("Derive_Examples.comparator_lab_simps",
     "comparator_lab ?comp\<^sub>'\<^sub>f ?comp\<^sub>'\<^sub>l (Sharp ?x)
       (FunLab ?yb ?yc) =
      Gt",
     template_equation
      (template_app
        (template_app
          (template_app
            (template_app (template_hole 3, template_var 4),
             template_var 3),
           template_app (template_hole 2, template_var 2)),
         template_app
          (template_app (template_hole 1, template_var 1), template_var 0)),
       template_hole 0)),
    ("Derive_Examples.comparator_lab_simps",
     "comparator_lab ?comp\<^sub>'\<^sub>f ?comp\<^sub>'\<^sub>l (Sharp ?x)
       (Lab ?y ?ya) =
      Gt",
     template_equation
      (template_app
        (template_app
          (template_app
            (template_app (template_hole 3, template_var 4),
             template_var 3),
           template_app (template_hole 2, template_var 2)),
         template_app
          (template_app (template_hole 1, template_var 1), template_var 0)),
       template_hole 0)),
    ("Derive_Examples.comparator_lab_simps",
     "comparator_lab ?comp\<^sub>'\<^sub>f ?comp\<^sub>'\<^sub>l (UnLab ?x)
       (FunLab ?yb ?yc) =
      Gt",
     template_equation
      (template_app
        (template_app
          (template_app
            (template_app (template_hole 3, template_var 4),
             template_var 3),
           template_app (template_hole 2, template_var 2)),
         template_app
          (template_app (template_hole 1, template_var 1), template_var 0)),
       template_hole 0)),
    ("Derive_Examples.comparator_lab_simps",
     "comparator_lab ?comp\<^sub>'\<^sub>f ?comp\<^sub>'\<^sub>l (UnLab ?x)
       (Lab ?y ?ya) =
      Gt",
     template_equation
      (template_app
        (template_app
          (template_app
            (template_app (template_hole 3, template_var 4),
             template_var 3),
           template_app (template_hole 2, template_var 2)),
         template_app
          (template_app (template_hole 1, template_var 1), template_var 0)),
       template_hole 0)),
    ("Derive_Examples.comparator_lab_simps",
     "comparator_lab ?comp\<^sub>'\<^sub>f ?comp\<^sub>'\<^sub>l
       (FunLab ?x ?xa) (Sharp ?ye) =
      Lt",
     template_equation
      (template_app
        (template_app
          (template_app
            (template_app (template_hole 3, template_var 4),
             template_var 3),
           template_app
            (template_app (template_hole 2, template_var 2),
             template_var 1)),
         template_app (template_hole 1, template_var 0)),
       template_hole 0)),
    ("Derive_Examples.comparator_lab_simps",
     "comparator_lab ?comp\<^sub>'\<^sub>f ?comp\<^sub>'\<^sub>l
       (FunLab ?x ?xa) (UnLab ?yd) =
      Lt",
     template_equation
      (template_app
        (template_app
          (template_app
            (template_app (template_hole 3, template_var 4),
             template_var 3),
           template_app
            (template_app (template_hole 2, template_var 2),
             template_var 1)),
         template_app (template_hole 1, template_var 0)),
       template_hole 0)),
    ("Derive_Examples.comparator_lab_simps",
     "comparator_lab ?comp\<^sub>'\<^sub>f ?comp\<^sub>'\<^sub>l
       (Lab ?x ?xa) (Sharp ?ye) =
      Lt",
     template_equation
      (template_app
        (template_app
          (template_app
            (template_app (template_hole 3, template_var 4),
             template_var 3),
           template_app
            (template_app (template_hole 2, template_var 2),
             template_var 1)),
         template_app (template_hole 1, template_var 0)),
       template_hole 0)),
    ("Derive_Examples.comparator_lab_simps",
     "comparator_lab ?comp\<^sub>'\<^sub>f ?comp\<^sub>'\<^sub>l
       (Lab ?x ?xa) (UnLab ?yd) =
      Lt",
     template_equation
      (template_app
        (template_app
          (template_app
            (template_app (template_hole 3, template_var 4),
             template_var 3),
           template_app
            (template_app (template_hole 2, template_var 2),
             template_var 1)),
         template_app (template_hole 1, template_var 0)),
       template_hole 0)),
    ("Derive_Examples.comparator_term_simps",
     "comparator_term ?comp\<^sub>'\<^sub>f ?comp\<^sub>'\<^sub>v (Var ?x)
       (Fun ?ya ?yb) =
      Lt",
     template_equation
      (template_app
        (template_app
          (template_app
            (template_app (template_hole 3, template_var 4),
             template_var 3),
           template_app (template_hole 2, template_var 2)),
         template_app
          (template_app (template_hole 1, template_var 1), template_var 0)),
       template_hole 0)),
    ("Derive_Examples.comparator_term_simps",
     "comparator_term ?comp\<^sub>'\<^sub>f ?comp\<^sub>'\<^sub>v
       (Fun ?x ?xa) (Var ?y) =
      Gt",
     template_equation
      (template_app
        (template_app
          (template_app
            (template_app (template_hole 3, template_var 4),
             template_var 3),
           template_app
            (template_app (template_hole 2, template_var 2),
             template_var 1)),
         template_app (template_hole 1, template_var 0)),
       template_hole 0)),
    ("Derive_Examples.equality_lab_simps",
     "equality_lab ?eq\<^sub>'\<^sub>f ?eq\<^sub>'\<^sub>l (UnLab ?x)
       (UnLab ?yd) =
      ?eq\<^sub>'\<^sub>f ?x ?yd",
     template_equation
      (template_app
        (template_app
          (template_app
            (template_app (template_hole 1, template_var 3),
             template_var 2),
           template_app (template_hole 0, template_var 1)),
         template_app (template_hole 0, template_var 0)),
       template_app
        (template_app (template_var 3, template_var 1), template_var 0))),
    ("Derive_Examples.equality_term_simps",
     "equality_term ?eq\<^sub>'\<^sub>f ?eq\<^sub>'\<^sub>v (Var ?x)
       (Var ?y) =
      ?eq\<^sub>'\<^sub>v ?x ?y",
     template_equation
      (template_app
        (template_app
          (template_app
            (template_app (template_hole 1, template_var 3),
             template_var 2),
           template_app (template_hole 0, template_var 1)),
         template_app (template_hole 0, template_var 0)),
       template_app
        (template_app (template_var 2, template_var 1), template_var 0))),
    ("Derive_Examples.equality_lab_simps",
     "equality_lab ?eq\<^sub>'\<^sub>f ?eq\<^sub>'\<^sub>l (FunLab ?x ?xa)
       (Lab ?y ?ya) =
      False",
     template_equation
      (template_app
        (template_app
          (template_app
            (template_app (template_hole 3, template_var 5),
             template_var 4),
           template_app
            (template_app (template_hole 2, template_var 3),
             template_var 2)),
         template_app
          (template_app (template_hole 1, template_var 1), template_var 0)),
       template_hole 0)),
    ("Derive_Examples.equality_lab_simps",
     "equality_lab ?eq\<^sub>'\<^sub>f ?eq\<^sub>'\<^sub>l (Lab ?x ?xa)
       (FunLab ?yb ?yc) =
      False",
     template_equation
      (template_app
        (template_app
          (template_app
            (template_app (template_hole 3, template_var 5),
             template_var 4),
           template_app
            (template_app (template_hole 2, template_var 3),
             template_var 2)),
         template_app
          (template_app (template_hole 1, template_var 1), template_var 0)),
       template_hole 0)),
    ("Derive_Examples.comparator_lab_simps",
     "comparator_lab ?comp\<^sub>'\<^sub>f ?comp\<^sub>'\<^sub>l (UnLab ?x)
       (UnLab ?yd) =
      ?comp\<^sub>'\<^sub>f ?x ?yd",
     template_equation
      (template_app
        (template_app
          (template_app
            (template_app (template_hole 1, template_var 3),
             template_var 2),
           template_app (template_hole 0, template_var 1)),
         template_app (template_hole 0, template_var 0)),
       template_app
        (template_app (template_var 3, template_var 1), template_var 0))),
    ("Derive_Examples.comparator_term_simps",
     "comparator_term ?comp\<^sub>'\<^sub>f ?comp\<^sub>'\<^sub>v (Var ?x)
       (Var ?y) =
      ?comp\<^sub>'\<^sub>v ?x ?y",
     template_equation
      (template_app
        (template_app
          (template_app
            (template_app (template_hole 1, template_var 3),
             template_var 2),
           template_app (template_hole 0, template_var 1)),
         template_app (template_hole 0, template_var 0)),
       template_app
        (template_app (template_var 2, template_var 1), template_var 0))),
    ("Derive_Examples.comparator_lab_simps",
     "comparator_lab ?comp\<^sub>'\<^sub>f ?comp\<^sub>'\<^sub>l
       (FunLab ?x ?xa) (Lab ?y ?ya) =
      Gt",
     template_equation
      (template_app
        (template_app
          (template_app
            (template_app (template_hole 3, template_var 5),
             template_var 4),
           template_app
            (template_app (template_hole 2, template_var 3),
             template_var 2)),
         template_app
          (template_app (template_hole 1, template_var 1), template_var 0)),
       template_hole 0)),
    ("Derive_Examples.comparator_lab_simps",
     "comparator_lab ?comp\<^sub>'\<^sub>f ?comp\<^sub>'\<^sub>l
       (Lab ?x ?xa) (FunLab ?yb ?yc) =
      Lt",
     template_equation
      (template_app
        (template_app
          (template_app
            (template_app (template_hole 3, template_var 5),
             template_var 4),
           template_app
            (template_app (template_hole 2, template_var 3),
             template_var 2)),
         template_app
          (template_app (template_hole 1, template_var 1), template_var 0)),
       template_hole 0)),
    ("Derive_Examples.comparator_complex",
     "[| comparator ?comp\<^sub>'\<^sub>a;
         comparator ?comp\<^sub>'\<^sub>b |]
      ==> comparator
           (comparator_complex ?comp\<^sub>'\<^sub>a
             ?comp\<^sub>'\<^sub>b)",
     template_implication
      ([template_predicate (template_app (template_hole 3, template_var 1)),
        template_predicate
         (template_app (template_hole 2, template_var 0))],
       template_predicate
        (
           template_app
            (template_hole 1,
             template_app
              (template_app (template_hole 0, template_var 1),
               template_var 0))
           ))),
    ("Derive_Examples.comparator_complex2",
     "[| comparator ?comp\<^sub>'\<^sub>a;
         comparator ?comp\<^sub>'\<^sub>b |]
      ==> comparator
           (comparator_complex2 ?comp\<^sub>'\<^sub>a
             ?comp\<^sub>'\<^sub>b)",
     template_implication
      ([template_predicate (template_app (template_hole 3, template_var 1)),
        template_predicate
         (template_app (template_hole 2, template_var 0))],
       template_predicate
        (
           template_app
            (template_hole 1,
             template_app
              (template_app (template_hole 0, template_var 1),
               template_var 0))
           ))),
    ("Derive_Examples.comparator_lab",
     "[| comparator ?comp\<^sub>'\<^sub>f;
         comparator ?comp\<^sub>'\<^sub>l |]
      ==> comparator
           (comparator_lab ?comp\<^sub>'\<^sub>f ?comp\<^sub>'\<^sub>l)",
     template_implication
      ([template_predicate (template_app (template_hole 3, template_var 1)),
        template_predicate
         (template_app (template_hole 2, template_var 0))],
       template_predicate
        (
           template_app
            (template_hole 1,
             template_app
              (template_app (template_hole 0, template_var 1),
               template_var 0))
           ))),
    ("Derive_Examples.comparator_term",
     "[| comparator ?comp\<^sub>'\<^sub>f;
         comparator ?comp\<^sub>'\<^sub>v |]
      ==> comparator
           (comparator_term ?comp\<^sub>'\<^sub>f ?comp\<^sub>'\<^sub>v)",
     template_implication
      ([template_predicate (template_app (template_hole 3, template_var 1)),
        template_predicate
         (template_app (template_hole 2, template_var 0))],
       template_predicate
        (
           template_app
            (template_hole 1,
             template_app
              (template_app (template_hole 0, template_var 1),
               template_var 0))
           ))),
    ("Derive_Examples.equality_complex",
     "[| equality ?eq\<^sub>'\<^sub>a; equality ?eq\<^sub>'\<^sub>b |]
      ==> equality
           (equality_complex ?eq\<^sub>'\<^sub>a ?eq\<^sub>'\<^sub>b)",
     template_implication
      ([template_predicate (template_app (template_hole 3, template_var 1)),
        template_predicate
         (template_app (template_hole 2, template_var 0))],
       template_predicate
        (
           template_app
            (template_hole 1,
             template_app
              (template_app (template_hole 0, template_var 1),
               template_var 0))
           ))),
    ("Derive_Examples.equality_complex2",
     "[| equality ?eq\<^sub>'\<^sub>a; equality ?eq\<^sub>'\<^sub>b |]
      ==> equality
           (equality_complex2 ?eq\<^sub>'\<^sub>a ?eq\<^sub>'\<^sub>b)",
     template_implication
      ([template_predicate (template_app (template_hole 3, template_var 1)),
        template_predicate
         (template_app (template_hole 2, template_var 0))],
       template_predicate
        (
           template_app
            (template_hole 1,
             template_app
              (template_app (template_hole 0, template_var 1),
               template_var 0))
           ))),
    ("Derive_Examples.equality_lab",
     "[| equality ?eq\<^sub>'\<^sub>f; equality ?eq\<^sub>'\<^sub>l |]
      ==> equality (equality_lab ?eq\<^sub>'\<^sub>f ?eq\<^sub>'\<^sub>l)",
     template_implication
      ([template_predicate (template_app (template_hole 3, template_var 1)),
        template_predicate
         (template_app (template_hole 2, template_var 0))],
       template_predicate
        (
           template_app
            (template_hole 1,
             template_app
              (template_app (template_hole 0, template_var 1),
               template_var 0))
           ))),
    ("Derive_Examples.equality_term",
     "[| equality ?eq\<^sub>'\<^sub>f; equality ?eq\<^sub>'\<^sub>v |]
      ==> equality (equality_term ?eq\<^sub>'\<^sub>f ?eq\<^sub>'\<^sub>v)",
     template_implication
      ([template_predicate (template_app (template_hole 3, template_var 1)),
        template_predicate
         (template_app (template_hole 2, template_var 0))],
       template_predicate
        (
           template_app
            (template_hole 1,
             template_app
              (template_app (template_hole 0, template_var 1),
               template_var 0))
           ))),
    ("Derive_Examples.equality_lab_simps",
     "equality_lab ?eq\<^sub>'\<^sub>f ?eq\<^sub>'\<^sub>l (Sharp ?x)
       (Sharp ?ye) =
      equality_lab ?eq\<^sub>'\<^sub>f ?eq\<^sub>'\<^sub>l ?x ?ye",
     template_equation
      (template_app
        (template_app
          (template_app
            (template_app (template_hole 1, template_var 3),
             template_var 2),
           template_app (template_hole 0, template_var 1)),
         template_app (template_hole 0, template_var 0)),
       template_app
        (template_app
          (template_app
            (template_app (template_hole 1, template_var 3),
             template_var 2),
           template_var 1),
         template_var 0))),
    ("Derive_Examples.equality_complex_simps",
     "equality_complex ?eq\<^sub>'\<^sub>a ?eq\<^sub>'\<^sub>b (C1 ?x ?xa)
       (C2 ?yb ?yc ?yd ?ye) =
      False",
     template_equation
      (template_app
        (template_app
          (template_app
            (template_app (template_hole 3, template_var 7),
             template_var 6),
           template_app
            (template_app (template_hole 2, template_var 5),
             template_var 4)),
         template_app
          (template_app
            (template_app
              (template_app (template_hole 1, template_var 3),
               template_var 2),
             template_var 1),
           template_var 0)),
       template_hole 0)),
    ("Derive_Examples.equality_complex_simps",
     "equality_complex ?eq\<^sub>'\<^sub>a ?eq\<^sub>'\<^sub>b
       (C2 ?x ?xa ?xb ?xc) (C1 ?y ?ya) =
      False",
     template_equation
      (template_app
        (template_app
          (template_app
            (template_app (template_hole 3, template_var 7),
             template_var 6),
           template_app
            (template_app
              (template_app
                (template_app (template_hole 2, template_var 5),
                 template_var 4),
               template_var 3),
             template_var 2)),
         template_app
          (template_app (template_hole 1, template_var 1), template_var 0)),
       template_hole 0)),
    ("Derive_Examples.comparator_lab_simps",
     "comparator_lab ?comp\<^sub>'\<^sub>f ?comp\<^sub>'\<^sub>l (Sharp ?x)
       (Sharp ?ye) =
      comparator_lab ?comp\<^sub>'\<^sub>f ?comp\<^sub>'\<^sub>l ?x ?ye",
     template_equation
      (template_app
        (template_app
          (template_app
            (template_app (template_hole 1, template_var 3),
             template_var 2),
           template_app (template_hole 0, template_var 1)),
         template_app (template_hole 0, template_var 0)),
       template_app
        (template_app
          (template_app
            (template_app (template_hole 1, template_var 3),
             template_var 2),
           template_var 1),
         template_var 0))),
    ("Derive_Examples.comparator_complex_simps",
     "comparator_complex ?comp\<^sub>'\<^sub>a ?comp\<^sub>'\<^sub>b
       (C1 ?x ?xa) (C2 ?yb ?yc ?yd ?ye) =
      Lt",
     template_equation
      (template_app
        (template_app
          (template_app
            (template_app (template_hole 3, template_var 7),
             template_var 6),
           template_app
            (template_app (template_hole 2, template_var 5),
             template_var 4)),
         template_app
          (template_app
            (template_app
              (template_app (template_hole 1, template_var 3),
               template_var 2),
             template_var 1),
           template_var 0)),
       template_hole 0)),
    ("Derive_Examples.comparator_complex_simps",
     "comparator_complex ?comp\<^sub>'\<^sub>a ?comp\<^sub>'\<^sub>b
       (C2 ?x ?xa ?xb ?xc) (C1 ?y ?ya) =
      Gt",
     template_equation
      (template_app
        (template_app
          (template_app
            (template_app (template_hole 3, template_var 7),
             template_var 6),
           template_app
            (template_app
              (template_app
                (template_app (template_hole 2, template_var 5),
                 template_var 4),
               template_var 3),
             template_var 2)),
         template_app
          (template_app (template_hole 1, template_var 1), template_var 0)),
       template_hole 0)),
    ("Derive_Examples.equality_complex2_simps",
     "equality_complex2 ?eq\<^sub>'\<^sub>a ?eq\<^sub>'\<^sub>b (D1 ?x)
       (D1 ?y) =
      equality_ttree
       (equality_complex ?eq\<^sub>'\<^sub>a ?eq\<^sub>'\<^sub>b) ?x ?y",
     template_equation
      (template_app
        (template_app
          (template_app
            (template_app (template_hole 3, template_var 3),
             template_var 2),
           template_app (template_hole 2, template_var 1)),
         template_app (template_hole 2, template_var 0)),
       template_app
        (template_app
          (template_app
            (template_hole 1,
             template_app
              (template_app (template_hole 0, template_var 3),
               template_var 2)),
           template_var 1),
         template_var 0))),
    ("Derive_Examples.comparator_complex2_simps",
     "comparator_complex2 ?comp\<^sub>'\<^sub>a ?comp\<^sub>'\<^sub>b
       (D1 ?x) (D1 ?y) =
      comparator_ttree
       (comparator_complex ?comp\<^sub>'\<^sub>a ?comp\<^sub>'\<^sub>b) ?x
       ?y",
     template_equation
      (template_app
        (template_app
          (template_app
            (template_app (template_hole 3, template_var 3),
             template_var 2),
           template_app (template_hole 2, template_var 1)),
         template_app (template_hole 2, template_var 0)),
       template_app
        (template_app
          (template_app
            (template_hole 1,
             template_app
              (template_app (template_hole 0, template_var 3),
               template_var 2)),
           template_var 1),
         template_var 0))),
    ("Derive_Examples.equality_mtree_simps",
     "equality_mtree ?eq\<^sub>'\<^sub>a (MNode ?x ?xa) (MNode ?y ?ya) =
      (?eq\<^sub>'\<^sub>a ?x ?y &
       equality_mtree_list ?eq\<^sub>'\<^sub>a ?xa ?ya)",
     template_equation
      (template_app
        (template_app
          (template_app (template_hole 3, template_var 4),
           template_app
            (template_app (template_hole 2, template_var 3),
             template_var 2)),
         template_app
          (template_app (template_hole 2, template_var 1), template_var 0)),
       template_app
        (template_app
          (template_hole 1,
           template_app
            (template_app (template_var 4, template_var 3),
             template_var 1)),
         template_app
          (template_app
            (template_app (template_hole 0, template_var 4),
             template_var 2),
           template_var 0)))),
    ("Derive_Examples.comparator_bintree_pointwise",
     "(!!x\<^sub>0\<^sub>_\<^sub>0.
          x\<^sub>0\<^sub>_\<^sub>0 : set_bintree ?x\<^sub>0 ==>
          peq_comp ?comp\<^sub>'\<^sub>a x\<^sub>0\<^sub>_\<^sub>0) ==>
      peq_comp (comparator_bintree ?comp\<^sub>'\<^sub>a) ?x\<^sub>0",
     template_implication
      ([template_predicate (template_app (template_hole 6, t_empty))],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 1,
               template_app (template_hole 0, template_var 0)),
             template_var 1)
           ))),
    ("Derive_Examples.comparator_bintree_pointwise",
     "(!!x\<^sub>0\<^sub>_\<^sub>0.
          x\<^sub>0\<^sub>_\<^sub>0 : set_bintree ?x\<^sub>0 ==>
          psym_comp ?comp\<^sub>'\<^sub>a x\<^sub>0\<^sub>_\<^sub>0) ==>
      psym_comp (comparator_bintree ?comp\<^sub>'\<^sub>a) ?x\<^sub>0",
     template_implication
      ([template_predicate (template_app (template_hole 6, t_empty))],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 1,
               template_app (template_hole 0, template_var 0)),
             template_var 1)
           ))),
    ("Derive_Examples.comparator_bintree_pointwise",
     "(!!x\<^sub>0\<^sub>_\<^sub>0.
          x\<^sub>0\<^sub>_\<^sub>0 : set_bintree ?x\<^sub>0 ==>
          ptrans_comp ?comp\<^sub>'\<^sub>a x\<^sub>0\<^sub>_\<^sub>0) ==>
      ptrans_comp (comparator_bintree ?comp\<^sub>'\<^sub>a) ?x\<^sub>0",
     template_implication
      ([template_predicate (template_app (template_hole 6, t_empty))],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 1,
               template_app (template_hole 0, template_var 0)),
             template_var 1)
           ))),
    ("Derive_Examples.equality_bintree_pointwise",
     "(!!x\<^sub>0\<^sub>_\<^sub>0.
          x\<^sub>0\<^sub>_\<^sub>0 : set_bintree ?x\<^sub>0 ==>
          pequality ?eq\<^sub>'\<^sub>a x\<^sub>0\<^sub>_\<^sub>0) ==>
      pequality (equality_bintree ?eq\<^sub>'\<^sub>a) ?x\<^sub>0",
     template_implication
      ([template_predicate (template_app (template_hole 6, t_empty))],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 1,
               template_app (template_hole 0, template_var 0)),
             template_var 1)
           ))),
    ("Derive_Examples.comparator_mtree_pointwise",
     "(!!x\<^sub>0\<^sub>_\<^sub>0.
          x\<^sub>0\<^sub>_\<^sub>0 : set_mtree ?x\<^sub>0 ==>
          peq_comp ?comp\<^sub>'\<^sub>a x\<^sub>0\<^sub>_\<^sub>0) ==>
      peq_comp (comparator_mtree ?comp\<^sub>'\<^sub>a) ?x\<^sub>0",
     template_implication
      ([template_predicate (template_app (template_hole 6, t_empty))],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 1,
               template_app (template_hole 0, template_var 0)),
             template_var 1)
           ))),
    ("Derive_Examples.comparator_mtree_pointwise",
     "(!!x\<^sub>0\<^sub>_\<^sub>0.
          x\<^sub>0\<^sub>_\<^sub>0 : set_mtree ?x\<^sub>0 ==>
          psym_comp ?comp\<^sub>'\<^sub>a x\<^sub>0\<^sub>_\<^sub>0) ==>
      psym_comp (comparator_mtree ?comp\<^sub>'\<^sub>a) ?x\<^sub>0",
     template_implication
      ([template_predicate (template_app (template_hole 6, t_empty))],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 1,
               template_app (template_hole 0, template_var 0)),
             template_var 1)
           ))),
    ("Derive_Examples.comparator_mtree_pointwise",
     "(!!x\<^sub>0\<^sub>_\<^sub>0.
          x\<^sub>0\<^sub>_\<^sub>0 : set_mtree ?x\<^sub>0 ==>
          ptrans_comp ?comp\<^sub>'\<^sub>a x\<^sub>0\<^sub>_\<^sub>0) ==>
      ptrans_comp (comparator_mtree ?comp\<^sub>'\<^sub>a) ?x\<^sub>0",
     template_implication
      ([template_predicate (template_app (template_hole 6, t_empty))],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 1,
               template_app (template_hole 0, template_var 0)),
             template_var 1)
           ))),
    ("Derive_Examples.equality_mtree_pointwise",
     "(!!x\<^sub>0\<^sub>_\<^sub>0.
          x\<^sub>0\<^sub>_\<^sub>0 : set_mtree ?x\<^sub>0 ==>
          pequality ?eq\<^sub>'\<^sub>a x\<^sub>0\<^sub>_\<^sub>0) ==>
      pequality (equality_mtree ?eq\<^sub>'\<^sub>a) ?x\<^sub>0",
     template_implication
      ([template_predicate (template_app (template_hole 6, t_empty))],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 1,
               template_app (template_hole 0, template_var 0)),
             template_var 1)
           ))),
    ("Derive_Examples.comparator_mtree_list_pointwise",
     "(!!x\<^sub>1\<^sub>_\<^sub>0.
          x\<^sub>1\<^sub>_\<^sub>0 : set_mtree_list ?x\<^sub>1 ==>
          peq_comp ?comp\<^sub>'\<^sub>a x\<^sub>1\<^sub>_\<^sub>0) ==>
      peq_comp (comparator_mtree_list ?comp\<^sub>'\<^sub>a) ?x\<^sub>1",
     template_implication
      ([template_predicate (template_app (template_hole 6, t_empty))],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 1,
               template_app (template_hole 0, template_var 0)),
             template_var 1)
           ))),
    ("Derive_Examples.comparator_mtree_list_pointwise",
     "(!!x\<^sub>1\<^sub>_\<^sub>0.
          x\<^sub>1\<^sub>_\<^sub>0 : set_mtree_list ?x\<^sub>1 ==>
          psym_comp ?comp\<^sub>'\<^sub>a x\<^sub>1\<^sub>_\<^sub>0) ==>
      psym_comp (comparator_mtree_list ?comp\<^sub>'\<^sub>a) ?x\<^sub>1",
     template_implication
      ([template_predicate (template_app (template_hole 6, t_empty))],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 1,
               template_app (template_hole 0, template_var 0)),
             template_var 1)
           ))),
    ("Derive_Examples.comparator_mtree_list_pointwise",
     "(!!x\<^sub>1\<^sub>_\<^sub>0.
          x\<^sub>1\<^sub>_\<^sub>0 : set_mtree_list ?x\<^sub>1 ==>
          ptrans_comp ?comp\<^sub>'\<^sub>a x\<^sub>1\<^sub>_\<^sub>0) ==>
      ptrans_comp (comparator_mtree_list ?comp\<^sub>'\<^sub>a) ?x\<^sub>1",
     template_implication
      ([template_predicate (template_app (template_hole 6, t_empty))],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 1,
               template_app (template_hole 0, template_var 0)),
             template_var 1)
           ))),
    ("Derive_Examples.equality_mtree_list_pointwise",
     "(!!x\<^sub>1\<^sub>_\<^sub>0.
          x\<^sub>1\<^sub>_\<^sub>0 : set_mtree_list ?x\<^sub>1 ==>
          pequality ?eq\<^sub>'\<^sub>a x\<^sub>1\<^sub>_\<^sub>0) ==>
      pequality (equality_mtree_list ?eq\<^sub>'\<^sub>a) ?x\<^sub>1",
     template_implication
      ([template_predicate (template_app (template_hole 6, t_empty))],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 1,
               template_app (template_hole 0, template_var 0)),
             template_var 1)
           ))),
    ("Derive_Examples.comparator_tree_pointwise",
     "(!!x\<^sub>0\<^sub>_\<^sub>0.
          x\<^sub>0\<^sub>_\<^sub>0
          : Derive_Examples.tree.set_tree ?x\<^sub>0 ==>
          peq_comp ?comp\<^sub>'\<^sub>a x\<^sub>0\<^sub>_\<^sub>0) ==>
      peq_comp (comparator_tree ?comp\<^sub>'\<^sub>a) ?x\<^sub>0",
     template_implication
      ([template_predicate (template_app (template_hole 6, t_empty))],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 1,
               template_app (template_hole 0, template_var 0)),
             template_var 1)
           ))),
    ("Derive_Examples.comparator_tree_pointwise",
     "(!!x\<^sub>0\<^sub>_\<^sub>0.
          x\<^sub>0\<^sub>_\<^sub>0
          : Derive_Examples.tree.set_tree ?x\<^sub>0 ==>
          psym_comp ?comp\<^sub>'\<^sub>a x\<^sub>0\<^sub>_\<^sub>0) ==>
      psym_comp (comparator_tree ?comp\<^sub>'\<^sub>a) ?x\<^sub>0",
     template_implication
      ([template_predicate (template_app (template_hole 6, t_empty))],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 1,
               template_app (template_hole 0, template_var 0)),
             template_var 1)
           ))),
    ("Derive_Examples.comparator_tree_pointwise",
     "(!!x\<^sub>0\<^sub>_\<^sub>0.
          x\<^sub>0\<^sub>_\<^sub>0
          : Derive_Examples.tree.set_tree ?x\<^sub>0 ==>
          ptrans_comp ?comp\<^sub>'\<^sub>a x\<^sub>0\<^sub>_\<^sub>0) ==>
      ptrans_comp (comparator_tree ?comp\<^sub>'\<^sub>a) ?x\<^sub>0",
     template_implication
      ([template_predicate (template_app (template_hole 6, t_empty))],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 1,
               template_app (template_hole 0, template_var 0)),
             template_var 1)
           ))),
    ("Derive_Examples.equality_tree_pointwise",
     "(!!x\<^sub>0\<^sub>_\<^sub>0.
          x\<^sub>0\<^sub>_\<^sub>0
          : Derive_Examples.tree.set_tree ?x\<^sub>0 ==>
          pequality ?eq\<^sub>'\<^sub>a x\<^sub>0\<^sub>_\<^sub>0) ==>
      pequality (equality_tree ?eq\<^sub>'\<^sub>a) ?x\<^sub>0",
     template_implication
      ([template_predicate (template_app (template_hole 6, t_empty))],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 1,
               template_app (template_hole 0, template_var 0)),
             template_var 1)
           ))),
    ("Derive_Examples.comparator_ttree_pointwise",
     "(!!x\<^sub>0\<^sub>_\<^sub>0.
          x\<^sub>0\<^sub>_\<^sub>0 : set_ttree ?x\<^sub>0 ==>
          peq_comp ?comp\<^sub>'\<^sub>a x\<^sub>0\<^sub>_\<^sub>0) ==>
      peq_comp (comparator_ttree ?comp\<^sub>'\<^sub>a) ?x\<^sub>0",
     template_implication
      ([template_predicate (template_app (template_hole 6, t_empty))],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 1,
               template_app (template_hole 0, template_var 0)),
             template_var 1)
           ))),
    ("Derive_Examples.comparator_ttree_pointwise",
     "(!!x\<^sub>0\<^sub>_\<^sub>0.
          x\<^sub>0\<^sub>_\<^sub>0 : set_ttree ?x\<^sub>0 ==>
          psym_comp ?comp\<^sub>'\<^sub>a x\<^sub>0\<^sub>_\<^sub>0) ==>
      psym_comp (comparator_ttree ?comp\<^sub>'\<^sub>a) ?x\<^sub>0",
     template_implication
      ([template_predicate (template_app (template_hole 6, t_empty))],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 1,
               template_app (template_hole 0, template_var 0)),
             template_var 1)
           ))),
    ("Derive_Examples.comparator_ttree_pointwise",
     "(!!x\<^sub>0\<^sub>_\<^sub>0.
          x\<^sub>0\<^sub>_\<^sub>0 : set_ttree ?x\<^sub>0 ==>
          ptrans_comp ?comp\<^sub>'\<^sub>a x\<^sub>0\<^sub>_\<^sub>0) ==>
      ptrans_comp (comparator_ttree ?comp\<^sub>'\<^sub>a) ?x\<^sub>0",
     template_implication
      ([template_predicate (template_app (template_hole 6, t_empty))],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 1,
               template_app (template_hole 0, template_var 0)),
             template_var 1)
           ))),
    ("Derive_Examples.equality_ttree_pointwise",
     "(!!x\<^sub>0\<^sub>_\<^sub>0.
          x\<^sub>0\<^sub>_\<^sub>0 : set_ttree ?x\<^sub>0 ==>
          pequality ?eq\<^sub>'\<^sub>a x\<^sub>0\<^sub>_\<^sub>0) ==>
      pequality (equality_ttree ?eq\<^sub>'\<^sub>a) ?x\<^sub>0",
     template_implication
      ([template_predicate (template_app (template_hole 6, t_empty))],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 1,
               template_app (template_hole 0, template_var 0)),
             template_var 1)
           ))),
    ("Derive_Examples.equality_mtree_list_simps",
     "equality_mtree_list ?eq\<^sub>'\<^sub>a (MCons ?x ?xa)
       (MCons ?y ?ya) =
      (equality_mtree ?eq\<^sub>'\<^sub>a ?x ?y &
       equality_mtree_list ?eq\<^sub>'\<^sub>a ?xa ?ya)",
     template_equation
      (template_app
        (template_app
          (template_app (template_hole 3, template_var 4),
           template_app
            (template_app (template_hole 2, template_var 3),
             template_var 2)),
         template_app
          (template_app (template_hole 2, template_var 1), template_var 0)),
       template_app
        (template_app
          (template_hole 1,
           template_app
            (template_app
              (template_app (template_hole 0, template_var 4),
               template_var 3),
             template_var 1)),
         template_app
          (template_app
            (template_app (template_hole 3, template_var 4),
             template_var 2),
           template_var 0)))),
    ("Derive_Examples.equality_tree_simps",
     "equality_tree ?eq\<^sub>'\<^sub>a (Derive_Examples.tree.Node ?x ?xa)
       (Derive_Examples.tree.Node ?y ?ya) =
      (?eq\<^sub>'\<^sub>a ?x ?y &
       equality_list (equality_tree ?eq\<^sub>'\<^sub>a) ?xa ?ya)",
     template_equation
      (template_app
        (template_app
          (template_app (template_hole 3, template_var 4),
           template_app
            (template_app (template_hole 2, template_var 3),
             template_var 2)),
         template_app
          (template_app (template_hole 2, template_var 1), template_var 0)),
       template_app
        (template_app
          (template_hole 1,
           template_app
            (template_app (template_var 4, template_var 3),
             template_var 1)),
         template_app
          (template_app
            (template_app
              (template_hole 0,
               template_app (template_hole 3, template_var 4)),
             template_var 2),
           template_var 0)))),
    ("Derive_Examples.equality_ttree_simps",
     "equality_ttree ?eq\<^sub>'\<^sub>a (TNode ?x ?xa) (TNode ?y ?ya) =
      (?eq\<^sub>'\<^sub>a ?x ?y &
       equality_tree (equality_list (equality_ttree ?eq\<^sub>'\<^sub>a))
        ?xa ?ya)",
     template_equation
      (template_app
        (template_app
          (template_app (template_hole 4, template_var 4),
           template_app
            (template_app (template_hole 3, template_var 3),
             template_var 2)),
         template_app
          (template_app (template_hole 3, template_var 1), template_var 0)),
       template_app
        (template_app
          (template_hole 2,
           template_app
            (template_app (template_var 4, template_var 3),
             template_var 1)),
         template_app
          (template_app
            (template_app
              (template_hole 1,
               template_app
                (template_hole 0,
                 template_app (template_hole 4, template_var 4))),
             template_var 2),
           template_var 0)))),
    ("Derive_Examples.equality_lab_simps",
     "equality_lab ?eq\<^sub>'\<^sub>f ?eq\<^sub>'\<^sub>l (Lab ?x ?xa)
       (Lab ?y ?ya) =
      (equality_lab ?eq\<^sub>'\<^sub>f ?eq\<^sub>'\<^sub>l ?x ?y &
       ?eq\<^sub>'\<^sub>l ?xa ?ya)",
     template_equation
      (template_app
        (template_app
          (template_app
            (template_app (template_hole 2, template_var 5),
             template_var 4),
           template_app
            (template_app (template_hole 1, template_var 3),
             template_var 2)),
         template_app
          (template_app (template_hole 1, template_var 1), template_var 0)),
       template_app
        (template_app
          (template_hole 0,
           template_app
            (template_app
              (template_app
                (template_app (template_hole 2, template_var 5),
                 template_var 4),
               template_var 3),
             template_var 1)),
         template_app
          (template_app (template_var 4, template_var 2),
           template_var 0)))),
    ("Derive_Examples.comparator_mtree_simps",
     "comparator_mtree ?comp\<^sub>'\<^sub>a (MNode ?x ?xa) (MNode ?y ?ya) =
      (case ?comp\<^sub>'\<^sub>a ?x ?y of
       Eq => comparator_mtree_list ?comp\<^sub>'\<^sub>a ?xa ?ya | Lt => Lt
       | Gt => Gt)",
     template_equation
      (template_app
        (template_app
          (template_app (template_hole 5, template_var 4),
           template_app
            (template_app (template_hole 4, template_var 3),
             template_var 2)),
         template_app
          (template_app (template_hole 4, template_var 1), template_var 0)),
       template_app
        (template_app
          (template_app
            (template_app
              (template_hole 3,
               template_app
                (template_app
                  (template_app (template_hole 2, template_var 4),
                   template_var 2),
                 template_var 0)),
             template_hole 1),
           template_hole 0),
         template_app
          (template_app (template_var 4, template_var 3),
           template_var 1)))),
    ("Derive_Examples.equality_term_simps",
     "equality_term ?eq\<^sub>'\<^sub>f ?eq\<^sub>'\<^sub>v (Fun ?x ?xa)
       (Fun ?ya ?yb) =
      (?eq\<^sub>'\<^sub>f ?x ?ya &
       equality_list (equality_term ?eq\<^sub>'\<^sub>f ?eq\<^sub>'\<^sub>v)
        ?xa ?yb)",
     template_equation
      (template_app
        (template_app
          (template_app
            (template_app (template_hole 3, template_var 5),
             template_var 4),
           template_app
            (template_app (template_hole 2, template_var 3),
             template_var 2)),
         template_app
          (template_app (template_hole 2, template_var 1), template_var 0)),
       template_app
        (template_app
          (template_hole 1,
           template_app
            (template_app (template_var 5, template_var 3),
             template_var 1)),
         template_app
          (template_app
            (template_app
              (template_hole 0,
               template_app
                (template_app (template_hole 3, template_var 5),
                 template_var 4)),
             template_var 2),
           template_var 0)))),
    ("Derive_Examples.comparator_mtree_list_simps",
     "comparator_mtree_list ?comp\<^sub>'\<^sub>a (MCons ?x ?xa)
       (MCons ?y ?ya) =
      (case comparator_mtree ?comp\<^sub>'\<^sub>a ?x ?y of
       Eq => comparator_mtree_list ?comp\<^sub>'\<^sub>a ?xa ?ya | Lt => Lt
       | Gt => Gt)",
     template_equation
      (template_app
        (template_app
          (template_app (template_hole 5, template_var 4),
           template_app
            (template_app (template_hole 4, template_var 3),
             template_var 2)),
         template_app
          (template_app (template_hole 4, template_var 1), template_var 0)),
       template_app
        (template_app
          (template_app
            (template_app
              (template_hole 3,
               template_app
                (template_app
                  (template_app (template_hole 5, template_var 4),
                   template_var 2),
                 template_var 0)),
             template_hole 2),
           template_hole 1),
         template_app
          (template_app
            (template_app (template_hole 0, template_var 4),
             template_var 3),
           template_var 1)))),
    ("Derive_Examples.comparator_tree_simps",
     "comparator_tree ?comp\<^sub>'\<^sub>a
       (Derive_Examples.tree.Node ?x ?xa)
       (Derive_Examples.tree.Node ?y ?ya) =
      (case ?comp\<^sub>'\<^sub>a ?x ?y of
       Eq => comparator_list (comparator_tree ?comp\<^sub>'\<^sub>a) ?xa ?ya
       | Lt => Lt | Gt => Gt)",
     template_equation
      (template_app
        (template_app
          (template_app (template_hole 5, template_var 4),
           template_app
            (template_app (template_hole 4, template_var 3),
             template_var 2)),
         template_app
          (template_app (template_hole 4, template_var 1), template_var 0)),
       template_app
        (template_app
          (template_app
            (template_app
              (template_hole 3,
               template_app
                (template_app
                  (template_app
                    (template_hole 2,
                     template_app (template_hole 5, template_var 4)),
                   template_var 2),
                 template_var 0)),
             template_hole 1),
           template_hole 0),
         template_app
          (template_app (template_var 4, template_var 3),
           template_var 1)))),
    ("Derive_Examples.comparator_nat_list_list_simps",
     "comparator_nat_list_list (CCons ?x ?xa) (CCons ?y ?ya) =
      (case comparator_prod (comparator_list comparator_of)
             (comparator_option comparator_of) ?x ?y of
       Eq => comparator_nat_list_list ?xa ?ya | Lt => Lt | Gt => Gt)",
     template_equation
      (template_app
        (template_app
          (template_hole 9,
           template_app
            (template_app (template_hole 8, template_var 3),
             template_var 2)),
         template_app
          (template_app (template_hole 8, template_var 1), template_var 0)),
       template_app
        (template_app
          (template_app
            (template_app
              (template_hole 7,
               template_app
                (template_app (template_hole 9, template_var 2),
                 template_var 0)),
             template_hole 6),
           template_hole 5),
         template_app
          (template_app
            (template_app
              (template_app
                (template_hole 4,
                 template_app (template_hole 3, template_hole 2)),
               template_app (template_hole 1, template_hole 0)),
             template_var 3),
           template_var 1)))),
    ("Derive_Examples.comparator_ttree_simps",
     "comparator_ttree ?comp\<^sub>'\<^sub>a (TNode ?x ?xa) (TNode ?y ?ya) =
      (case ?comp\<^sub>'\<^sub>a ?x ?y of
       Eq =>
         comparator_tree
          (comparator_list (comparator_ttree ?comp\<^sub>'\<^sub>a)) ?xa ?ya
       | Lt => Lt | Gt => Gt)",
     template_equation
      (template_app
        (template_app
          (template_app (template_hole 6, template_var 4),
           template_app
            (template_app (template_hole 5, template_var 3),
             template_var 2)),
         template_app
          (template_app (template_hole 5, template_var 1), template_var 0)),
       template_app
        (template_app
          (template_app
            (template_app
              (template_hole 4,
               template_app
                (template_app
                  (template_app
                    (template_hole 3,
                     template_app
                      (template_hole 2,
                       template_app (template_hole 6, template_var 4))),
                   template_var 2),
                 template_var 0)),
             template_hole 1),
           template_hole 0),
         template_app
          (template_app (template_var 4, template_var 3),
           template_var 1)))),
    ("Derive_Examples.comparator_lab_simps",
     "comparator_lab ?comp\<^sub>'\<^sub>f ?comp\<^sub>'\<^sub>l
       (Lab ?x ?xa) (Lab ?y ?ya) =
      (case comparator_lab ?comp\<^sub>'\<^sub>f ?comp\<^sub>'\<^sub>l ?x
             ?y of
       Eq => ?comp\<^sub>'\<^sub>l ?xa ?ya | Lt => Lt | Gt => Gt)",
     template_equation
      (template_app
        (template_app
          (template_app
            (template_app (template_hole 4, template_var 5),
             template_var 4),
           template_app
            (template_app (template_hole 3, template_var 3),
             template_var 2)),
         template_app
          (template_app (template_hole 3, template_var 1), template_var 0)),
       template_app
        (template_app
          (template_app
            (template_app
              (template_hole 2,
               template_app
                (template_app (template_var 4, template_var 2),
                 template_var 0)),
             template_hole 1),
           template_hole 0),
         template_app
          (template_app
            (template_app
              (template_app (template_hole 4, template_var 5),
               template_var 4),
             template_var 3),
           template_var 1)))),
    ("Derive_Examples.equality_lab_simps",
     "equality_lab ?eq\<^sub>'\<^sub>f ?eq\<^sub>'\<^sub>l (FunLab ?x ?xa)
       (FunLab ?yb ?yc) =
      (equality_lab ?eq\<^sub>'\<^sub>f ?eq\<^sub>'\<^sub>l ?x ?yb &
       equality_list (equality_lab ?eq\<^sub>'\<^sub>f ?eq\<^sub>'\<^sub>l)
        ?xa ?yc)",
     template_equation
      (template_app
        (template_app
          (template_app
            (template_app (template_hole 3, template_var 5),
             template_var 4),
           template_app
            (template_app (template_hole 2, template_var 3),
             template_var 2)),
         template_app
          (template_app (template_hole 2, template_var 1), template_var 0)),
       template_app
        (template_app
          (template_hole 1,
           template_app
            (template_app
              (template_app
                (template_app (template_hole 3, template_var 5),
                 template_var 4),
               template_var 3),
             template_var 1)),
         template_app
          (template_app
            (template_app
              (template_hole 0,
               template_app
                (template_app (template_hole 3, template_var 5),
                 template_var 4)),
             template_var 2),
           template_var 0)))),
    ("Derive_Examples.comparator_term_simps",
     "comparator_term ?comp\<^sub>'\<^sub>f ?comp\<^sub>'\<^sub>v
       (Fun ?x ?xa) (Fun ?ya ?yb) =
      (case ?comp\<^sub>'\<^sub>f ?x ?ya of
       Eq =>
         comparator_list
          (comparator_term ?comp\<^sub>'\<^sub>f ?comp\<^sub>'\<^sub>v) ?xa
          ?yb
       | Lt => Lt | Gt => Gt)",
     template_equation
      (template_app
        (template_app
          (template_app
            (template_app (template_hole 5, template_var 5),
             template_var 4),
           template_app
            (template_app (template_hole 4, template_var 3),
             template_var 2)),
         template_app
          (template_app (template_hole 4, template_var 1), template_var 0)),
       template_app
        (template_app
          (template_app
            (template_app
              (template_hole 3,
               template_app
                (template_app
                  (template_app
                    (template_hole 2,
                     template_app
                      (template_app (template_hole 5, template_var 5),
                       template_var 4)),
                   template_var 2),
                 template_var 0)),
             template_hole 1),
           template_hole 0),
         template_app
          (template_app (template_var 5, template_var 3),
           template_var 1)))),
    ("Derive_Examples.equality_bintree_simps",
     "equality_bintree ?eq\<^sub>'\<^sub>a (BNode ?x ?xa ?xb)
       (BNode ?y ?ya ?yb) =
      (equality_bintree ?eq\<^sub>'\<^sub>a ?x ?y &
       ?eq\<^sub>'\<^sub>a ?xa ?ya &
       equality_bintree ?eq\<^sub>'\<^sub>a ?xb ?yb)",
     template_equation
      (template_app
        (template_app
          (template_app (template_hole 2, template_var 6),
           template_app
            (template_app
              (template_app (template_hole 1, template_var 5),
               template_var 4),
             template_var 3)),
         template_app
          (template_app
            (template_app (template_hole 1, template_var 2),
             template_var 1),
           template_var 0)),
       template_app
        (template_app
          (template_hole 0,
           template_app
            (template_app
              (template_app (template_hole 2, template_var 6),
               template_var 5),
             template_var 2)),
         template_app
          (template_app
            (template_hole 0,
             template_app
              (template_app (template_var 6, template_var 4),
               template_var 1)),
           template_app
            (template_app
              (template_app (template_hole 2, template_var 6),
               template_var 3),
             template_var 0))))),
    ("Derive_Examples.comparator_lab_simps",
     "comparator_lab ?comp\<^sub>'\<^sub>f ?comp\<^sub>'\<^sub>l
       (FunLab ?x ?xa) (FunLab ?yb ?yc) =
      (case comparator_lab ?comp\<^sub>'\<^sub>f ?comp\<^sub>'\<^sub>l ?x
             ?yb of
       Eq =>
         comparator_list
          (comparator_lab ?comp\<^sub>'\<^sub>f ?comp\<^sub>'\<^sub>l) ?xa
          ?yc
       | Lt => Lt | Gt => Gt)",
     template_equation
      (template_app
        (template_app
          (template_app
            (template_app (template_hole 5, template_var 5),
             template_var 4),
           template_app
            (template_app (template_hole 4, template_var 3),
             template_var 2)),
         template_app
          (template_app (template_hole 4, template_var 1), template_var 0)),
       template_app
        (template_app
          (template_app
            (template_app
              (template_hole 3,
               template_app
                (template_app
                  (template_app
                    (template_hole 2,
                     template_app
                      (template_app (template_hole 5, template_var 5),
                       template_var 4)),
                   template_var 2),
                 template_var 0)),
             template_hole 1),
           template_hole 0),
         template_app
          (template_app
            (template_app
              (template_app (template_hole 5, template_var 5),
               template_var 4),
             template_var 3),
           template_var 1)))),
    ("Derive_Examples.equality_complex_simps",
     "equality_complex ?eq\<^sub>'\<^sub>a ?eq\<^sub>'\<^sub>b (C1 ?x ?xa)
       (C1 ?y ?ya) =
      (?x = ?y &
       equality_sum (equality_prod (equality_ttree ?eq\<^sub>'\<^sub>a) (=))
        (equality_list
          (equality_complex ?eq\<^sub>'\<^sub>a ?eq\<^sub>'\<^sub>b))
        ?xa ?ya)",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_app (template_hole 8, template_var 5),
                  template_var 4),
                template_app
                 (template_app (template_hole 7, template_var 3),
                  template_var 2)),
              template_app
               (template_app (template_hole 7, template_var 1),
                template_var 0))
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 6,
               template_app
                (template_app (template_hole 5, template_var 3),
                 template_var 1)),
             template_app
              (template_app
                (template_app
                  (template_app
                    (template_hole 4,
                     template_app
                      (template_app
                        (template_hole 3,
                         template_app (template_hole 2, template_var 5)),
                       template_hole 1)),
                   template_app
                    (template_hole 0,
                     template_app
                      (template_app (template_hole 8, template_var 5),
                       template_var 4))),
                 template_var 2),
               template_var 0))
           ))),
    ("Derive_Examples.comparator_complex_simps",
     "comparator_complex ?comp\<^sub>'\<^sub>a ?comp\<^sub>'\<^sub>b
       (C1 ?x ?xa) (C1 ?y ?ya) =
      (case comparator_of ?x ?y of
       Eq =>
         comparator_sum
          (comparator_prod (comparator_ttree ?comp\<^sub>'\<^sub>a)
            comparator_of)
          (comparator_list
            (comparator_complex ?comp\<^sub>'\<^sub>a
              ?comp\<^sub>'\<^sub>b))
          ?xa ?ya
       | Lt => Lt | Gt => Gt)",
     template_equation
      (template_app
        (template_app
          (template_app
            (template_app (template_hole 10, template_var 5),
             template_var 4),
           template_app
            (template_app (template_hole 9, template_var 3),
             template_var 2)),
         template_app
          (template_app (template_hole 9, template_var 1), template_var 0)),
       template_app
        (template_app
          (template_app
            (template_app
              (template_hole 8,
               template_app
                (template_app
                  (template_app
                    (template_app
                      (template_hole 7,
                       template_app
                        (template_app
                          (template_hole 6,
                           template_app (template_hole 5, template_var 5)),
                         template_hole 4)),
                     template_app
                      (template_hole 3,
                       template_app
                        (template_app (template_hole 10, template_var 5),
                         template_var 4))),
                   template_var 2),
                 template_var 0)),
             template_hole 2),
           template_hole 1),
         template_app
          (template_app (template_hole 0, template_var 3),
           template_var 1)))),
    ("Derive_Examples.comparator_bintree_simps",
     "comparator_bintree ?comp\<^sub>'\<^sub>a (BNode ?x ?xa ?xb)
       (BNode ?y ?ya ?yb) =
      (case comparator_bintree ?comp\<^sub>'\<^sub>a ?x ?y of
       Eq =>
         case ?comp\<^sub>'\<^sub>a ?xa ?ya of
         Eq => comparator_bintree ?comp\<^sub>'\<^sub>a ?xb ?yb | Lt => Lt
         | Gt => Gt
       | Lt => Lt | Gt => Gt)",
     template_equation
      (template_app
        (template_app
          (template_app (template_hole 4, template_var 6),
           template_app
            (template_app
              (template_app (template_hole 3, template_var 5),
               template_var 4),
             template_var 3)),
         template_app
          (template_app
            (template_app (template_hole 3, template_var 2),
             template_var 1),
           template_var 0)),
       template_app
        (template_app
          (template_app
            (template_app
              (template_hole 2,
               template_app
                (template_app
                  (template_app
                    (template_app
                      (template_hole 2,
                       template_app
                        (template_app
                          (template_app (template_hole 4, template_var 6),
                           template_var 3),
                         template_var 0)),
                     template_hole 1),
                   template_hole 0),
                 template_app
                  (template_app (template_var 6, template_var 4),
                   template_var 1))),
             template_hole 1),
           template_hole 0),
         template_app
          (template_app
            (template_app (template_hole 4, template_var 6),
             template_var 5),
           template_var 2)))),
    ("Derive_Examples.comparator_complex_pointwise",
     "[| !!x\<^sub>0\<^sub>_\<^sub>0.
            x\<^sub>0\<^sub>_\<^sub>0 : set1_complex ?x\<^sub>0 ==>
            peq_comp ?comp\<^sub>'\<^sub>a x\<^sub>0\<^sub>_\<^sub>0;
         !!x\<^sub>0\<^sub>_\<^sub>1.
            x\<^sub>0\<^sub>_\<^sub>1 : set2_complex ?x\<^sub>0 ==>
            peq_comp ?comp\<^sub>'\<^sub>b x\<^sub>0\<^sub>_\<^sub>1 |]
      ==> peq_comp
           (comparator_complex ?comp\<^sub>'\<^sub>a ?comp\<^sub>'\<^sub>b)
           ?x\<^sub>0",
     template_implication
      ([template_predicate (template_app (template_hole 10, t_empty)),
        template_predicate (template_app (template_hole 5, t_empty))],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 1,
               template_app
                (template_app (template_hole 0, template_var 1),
                 template_var 0)),
             template_var 2)
           ))),
    ("Derive_Examples.comparator_complex_pointwise",
     "[| !!x\<^sub>0\<^sub>_\<^sub>0.
            x\<^sub>0\<^sub>_\<^sub>0 : set1_complex ?x\<^sub>0 ==>
            psym_comp ?comp\<^sub>'\<^sub>a x\<^sub>0\<^sub>_\<^sub>0;
         !!x\<^sub>0\<^sub>_\<^sub>1.
            x\<^sub>0\<^sub>_\<^sub>1 : set2_complex ?x\<^sub>0 ==>
            psym_comp ?comp\<^sub>'\<^sub>b x\<^sub>0\<^sub>_\<^sub>1 |]
      ==> psym_comp
           (comparator_complex ?comp\<^sub>'\<^sub>a ?comp\<^sub>'\<^sub>b)
           ?x\<^sub>0",
     template_implication
      ([template_predicate (template_app (template_hole 10, t_empty)),
        template_predicate (template_app (template_hole 5, t_empty))],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 1,
               template_app
                (template_app (template_hole 0, template_var 1),
                 template_var 0)),
             template_var 2)
           ))),
    ("Derive_Examples.comparator_complex_pointwise",
     "[| !!x\<^sub>0\<^sub>_\<^sub>0.
            x\<^sub>0\<^sub>_\<^sub>0 : set1_complex ?x\<^sub>0 ==>
            ptrans_comp ?comp\<^sub>'\<^sub>a x\<^sub>0\<^sub>_\<^sub>0;
         !!x\<^sub>0\<^sub>_\<^sub>1.
            x\<^sub>0\<^sub>_\<^sub>1 : set2_complex ?x\<^sub>0 ==>
            ptrans_comp ?comp\<^sub>'\<^sub>b x\<^sub>0\<^sub>_\<^sub>1 |]
      ==> ptrans_comp
           (comparator_complex ?comp\<^sub>'\<^sub>a ?comp\<^sub>'\<^sub>b)
           ?x\<^sub>0",
     template_implication
      ([template_predicate (template_app (template_hole 10, t_empty)),
        template_predicate (template_app (template_hole 5, t_empty))],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 1,
               template_app
                (template_app (template_hole 0, template_var 1),
                 template_var 0)),
             template_var 2)
           ))),
    ("Derive_Examples.equality_complex_pointwise",
     "[| !!x\<^sub>0\<^sub>_\<^sub>0.
            x\<^sub>0\<^sub>_\<^sub>0 : set1_complex ?x\<^sub>0 ==>
            pequality ?eq\<^sub>'\<^sub>a x\<^sub>0\<^sub>_\<^sub>0;
         !!x\<^sub>0\<^sub>_\<^sub>1.
            x\<^sub>0\<^sub>_\<^sub>1 : set2_complex ?x\<^sub>0 ==>
            pequality ?eq\<^sub>'\<^sub>b x\<^sub>0\<^sub>_\<^sub>1 |]
      ==> pequality
           (equality_complex ?eq\<^sub>'\<^sub>a ?eq\<^sub>'\<^sub>b)
           ?x\<^sub>0",
     template_implication
      ([template_predicate (template_app (template_hole 10, t_empty)),
        template_predicate (template_app (template_hole 5, t_empty))],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 1,
               template_app
                (template_app (template_hole 0, template_var 1),
                 template_var 0)),
             template_var 2)
           ))),
    ("Derive_Examples.comparator_complex2_pointwise",
     "[| !!x\<^sub>1\<^sub>_\<^sub>0.
            x\<^sub>1\<^sub>_\<^sub>0 : set1_complex2 ?x\<^sub>1 ==>
            peq_comp ?comp\<^sub>'\<^sub>a x\<^sub>1\<^sub>_\<^sub>0;
         !!x\<^sub>1\<^sub>_\<^sub>1.
            x\<^sub>1\<^sub>_\<^sub>1 : set2_complex2 ?x\<^sub>1 ==>
            peq_comp ?comp\<^sub>'\<^sub>b x\<^sub>1\<^sub>_\<^sub>1 |]
      ==> peq_comp
           (comparator_complex2 ?comp\<^sub>'\<^sub>a ?comp\<^sub>'\<^sub>b)
           ?x\<^sub>1",
     template_implication
      ([template_predicate (template_app (template_hole 10, t_empty)),
        template_predicate (template_app (template_hole 5, t_empty))],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 1,
               template_app
                (template_app (template_hole 0, template_var 1),
                 template_var 0)),
             template_var 2)
           ))),
    ("Derive_Examples.comparator_complex2_pointwise",
     "[| !!x\<^sub>1\<^sub>_\<^sub>0.
            x\<^sub>1\<^sub>_\<^sub>0 : set1_complex2 ?x\<^sub>1 ==>
            psym_comp ?comp\<^sub>'\<^sub>a x\<^sub>1\<^sub>_\<^sub>0;
         !!x\<^sub>1\<^sub>_\<^sub>1.
            x\<^sub>1\<^sub>_\<^sub>1 : set2_complex2 ?x\<^sub>1 ==>
            psym_comp ?comp\<^sub>'\<^sub>b x\<^sub>1\<^sub>_\<^sub>1 |]
      ==> psym_comp
           (comparator_complex2 ?comp\<^sub>'\<^sub>a ?comp\<^sub>'\<^sub>b)
           ?x\<^sub>1",
     template_implication
      ([template_predicate (template_app (template_hole 10, t_empty)),
        template_predicate (template_app (template_hole 5, t_empty))],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 1,
               template_app
                (template_app (template_hole 0, template_var 1),
                 template_var 0)),
             template_var 2)
           ))),
    ("Derive_Examples.comparator_complex2_pointwise",
     "[| !!x\<^sub>1\<^sub>_\<^sub>0.
            x\<^sub>1\<^sub>_\<^sub>0 : set1_complex2 ?x\<^sub>1 ==>
            ptrans_comp ?comp\<^sub>'\<^sub>a x\<^sub>1\<^sub>_\<^sub>0;
         !!x\<^sub>1\<^sub>_\<^sub>1.
            x\<^sub>1\<^sub>_\<^sub>1 : set2_complex2 ?x\<^sub>1 ==>
            ptrans_comp ?comp\<^sub>'\<^sub>b x\<^sub>1\<^sub>_\<^sub>1 |]
      ==> ptrans_comp
           (comparator_complex2 ?comp\<^sub>'\<^sub>a ?comp\<^sub>'\<^sub>b)
           ?x\<^sub>1",
     template_implication
      ([template_predicate (template_app (template_hole 10, t_empty)),
        template_predicate (template_app (template_hole 5, t_empty))],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 1,
               template_app
                (template_app (template_hole 0, template_var 1),
                 template_var 0)),
             template_var 2)
           ))),
    ("Derive_Examples.equality_complex2_pointwise",
     "[| !!x\<^sub>1\<^sub>_\<^sub>0.
            x\<^sub>1\<^sub>_\<^sub>0 : set1_complex2 ?x\<^sub>1 ==>
            pequality ?eq\<^sub>'\<^sub>a x\<^sub>1\<^sub>_\<^sub>0;
         !!x\<^sub>1\<^sub>_\<^sub>1.
            x\<^sub>1\<^sub>_\<^sub>1 : set2_complex2 ?x\<^sub>1 ==>
            pequality ?eq\<^sub>'\<^sub>b x\<^sub>1\<^sub>_\<^sub>1 |]
      ==> pequality
           (equality_complex2 ?eq\<^sub>'\<^sub>a ?eq\<^sub>'\<^sub>b)
           ?x\<^sub>1",
     template_implication
      ([template_predicate (template_app (template_hole 10, t_empty)),
        template_predicate (template_app (template_hole 5, t_empty))],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 1,
               template_app
                (template_app (template_hole 0, template_var 1),
                 template_var 0)),
             template_var 2)
           ))),
    ("Derive_Examples.comparator_lab_pointwise",
     "[| !!x\<^sub>0\<^sub>_\<^sub>0.
            x\<^sub>0\<^sub>_\<^sub>0 : set1_lab ?x\<^sub>0 ==>
            peq_comp ?comp\<^sub>'\<^sub>f x\<^sub>0\<^sub>_\<^sub>0;
         !!x\<^sub>0\<^sub>_\<^sub>1.
            x\<^sub>0\<^sub>_\<^sub>1 : set2_lab ?x\<^sub>0 ==>
            peq_comp ?comp\<^sub>'\<^sub>l x\<^sub>0\<^sub>_\<^sub>1 |]
      ==> peq_comp
           (comparator_lab ?comp\<^sub>'\<^sub>f ?comp\<^sub>'\<^sub>l)
           ?x\<^sub>0",
     template_implication
      ([template_predicate (template_app (template_hole 10, t_empty)),
        template_predicate (template_app (template_hole 5, t_empty))],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 1,
               template_app
                (template_app (template_hole 0, template_var 1),
                 template_var 0)),
             template_var 2)
           ))),
    ("Derive_Examples.comparator_lab_pointwise",
     "[| !!x\<^sub>0\<^sub>_\<^sub>0.
            x\<^sub>0\<^sub>_\<^sub>0 : set1_lab ?x\<^sub>0 ==>
            psym_comp ?comp\<^sub>'\<^sub>f x\<^sub>0\<^sub>_\<^sub>0;
         !!x\<^sub>0\<^sub>_\<^sub>1.
            x\<^sub>0\<^sub>_\<^sub>1 : set2_lab ?x\<^sub>0 ==>
            psym_comp ?comp\<^sub>'\<^sub>l x\<^sub>0\<^sub>_\<^sub>1 |]
      ==> psym_comp
           (comparator_lab ?comp\<^sub>'\<^sub>f ?comp\<^sub>'\<^sub>l)
           ?x\<^sub>0",
     template_implication
      ([template_predicate (template_app (template_hole 10, t_empty)),
        template_predicate (template_app (template_hole 5, t_empty))],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 1,
               template_app
                (template_app (template_hole 0, template_var 1),
                 template_var 0)),
             template_var 2)
           ))),
    ("Derive_Examples.comparator_lab_pointwise",
     "[| !!x\<^sub>0\<^sub>_\<^sub>0.
            x\<^sub>0\<^sub>_\<^sub>0 : set1_lab ?x\<^sub>0 ==>
            ptrans_comp ?comp\<^sub>'\<^sub>f x\<^sub>0\<^sub>_\<^sub>0;
         !!x\<^sub>0\<^sub>_\<^sub>1.
            x\<^sub>0\<^sub>_\<^sub>1 : set2_lab ?x\<^sub>0 ==>
            ptrans_comp ?comp\<^sub>'\<^sub>l x\<^sub>0\<^sub>_\<^sub>1 |]
      ==> ptrans_comp
           (comparator_lab ?comp\<^sub>'\<^sub>f ?comp\<^sub>'\<^sub>l)
           ?x\<^sub>0",
     template_implication
      ([template_predicate (template_app (template_hole 10, t_empty)),
        template_predicate (template_app (template_hole 5, t_empty))],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 1,
               template_app
                (template_app (template_hole 0, template_var 1),
                 template_var 0)),
             template_var 2)
           ))),
    ("Derive_Examples.equality_lab_pointwise",
     "[| !!x\<^sub>0\<^sub>_\<^sub>0.
            x\<^sub>0\<^sub>_\<^sub>0 : set1_lab ?x\<^sub>0 ==>
            pequality ?eq\<^sub>'\<^sub>f x\<^sub>0\<^sub>_\<^sub>0;
         !!x\<^sub>0\<^sub>_\<^sub>1.
            x\<^sub>0\<^sub>_\<^sub>1 : set2_lab ?x\<^sub>0 ==>
            pequality ?eq\<^sub>'\<^sub>l x\<^sub>0\<^sub>_\<^sub>1 |]
      ==> pequality (equality_lab ?eq\<^sub>'\<^sub>f ?eq\<^sub>'\<^sub>l)
           ?x\<^sub>0",
     template_implication
      ([template_predicate (template_app (template_hole 10, t_empty)),
        template_predicate (template_app (template_hole 5, t_empty))],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 1,
               template_app
                (template_app (template_hole 0, template_var 1),
                 template_var 0)),
             template_var 2)
           ))),
    ("Derive_Examples.comparator_term_pointwise",
     "[| !!x\<^sub>0\<^sub>_\<^sub>0.
            x\<^sub>0\<^sub>_\<^sub>0 : set1_term ?x\<^sub>0 ==>
            peq_comp ?comp\<^sub>'\<^sub>f x\<^sub>0\<^sub>_\<^sub>0;
         !!x\<^sub>0\<^sub>_\<^sub>1.
            x\<^sub>0\<^sub>_\<^sub>1 : set2_term ?x\<^sub>0 ==>
            peq_comp ?comp\<^sub>'\<^sub>v x\<^sub>0\<^sub>_\<^sub>1 |]
      ==> peq_comp
           (comparator_term ?comp\<^sub>'\<^sub>f ?comp\<^sub>'\<^sub>v)
           ?x\<^sub>0",
     template_implication
      ([template_predicate (template_app (template_hole 10, t_empty)),
        template_predicate (template_app (template_hole 5, t_empty))],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 1,
               template_app
                (template_app (template_hole 0, template_var 1),
                 template_var 0)),
             template_var 2)
           ))),
    ("Derive_Examples.comparator_term_pointwise",
     "[| !!x\<^sub>0\<^sub>_\<^sub>0.
            x\<^sub>0\<^sub>_\<^sub>0 : set1_term ?x\<^sub>0 ==>
            psym_comp ?comp\<^sub>'\<^sub>f x\<^sub>0\<^sub>_\<^sub>0;
         !!x\<^sub>0\<^sub>_\<^sub>1.
            x\<^sub>0\<^sub>_\<^sub>1 : set2_term ?x\<^sub>0 ==>
            psym_comp ?comp\<^sub>'\<^sub>v x\<^sub>0\<^sub>_\<^sub>1 |]
      ==> psym_comp
           (comparator_term ?comp\<^sub>'\<^sub>f ?comp\<^sub>'\<^sub>v)
           ?x\<^sub>0",
     template_implication
      ([template_predicate (template_app (template_hole 10, t_empty)),
        template_predicate (template_app (template_hole 5, t_empty))],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 1,
               template_app
                (template_app (template_hole 0, template_var 1),
                 template_var 0)),
             template_var 2)
           ))),
    ("Derive_Examples.comparator_term_pointwise",
     "[| !!x\<^sub>0\<^sub>_\<^sub>0.
            x\<^sub>0\<^sub>_\<^sub>0 : set1_term ?x\<^sub>0 ==>
            ptrans_comp ?comp\<^sub>'\<^sub>f x\<^sub>0\<^sub>_\<^sub>0;
         !!x\<^sub>0\<^sub>_\<^sub>1.
            x\<^sub>0\<^sub>_\<^sub>1 : set2_term ?x\<^sub>0 ==>
            ptrans_comp ?comp\<^sub>'\<^sub>v x\<^sub>0\<^sub>_\<^sub>1 |]
      ==> ptrans_comp
           (comparator_term ?comp\<^sub>'\<^sub>f ?comp\<^sub>'\<^sub>v)
           ?x\<^sub>0",
     template_implication
      ([template_predicate (template_app (template_hole 10, t_empty)),
        template_predicate (template_app (template_hole 5, t_empty))],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 1,
               template_app
                (template_app (template_hole 0, template_var 1),
                 template_var 0)),
             template_var 2)
           ))),
    ("Derive_Examples.equality_term_pointwise",
     "[| !!x\<^sub>0\<^sub>_\<^sub>0.
            x\<^sub>0\<^sub>_\<^sub>0 : set1_term ?x\<^sub>0 ==>
            pequality ?eq\<^sub>'\<^sub>f x\<^sub>0\<^sub>_\<^sub>0;
         !!x\<^sub>0\<^sub>_\<^sub>1.
            x\<^sub>0\<^sub>_\<^sub>1 : set2_term ?x\<^sub>0 ==>
            pequality ?eq\<^sub>'\<^sub>v x\<^sub>0\<^sub>_\<^sub>1 |]
      ==> pequality (equality_term ?eq\<^sub>'\<^sub>f ?eq\<^sub>'\<^sub>v)
           ?x\<^sub>0",
     template_implication
      ([template_predicate (template_app (template_hole 10, t_empty)),
        template_predicate (template_app (template_hole 5, t_empty))],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 1,
               template_app
                (template_app (template_hole 0, template_var 1),
                 template_var 0)),
             template_var 2)
           ))),
    ("Derive_Examples.hash_code_bintree_simps",
     "hash_code_bintree ?h\<^sub>'\<^sub>a BEmpty = 411272934",
     template_equation
      (template_app
        (template_app (template_hole 5, template_var 0), template_hole 4),
       template_app
        (template_hole 3,
         template_app
          (template_hole 2,
           template_app
            (template_hole 1,
             template_app
              (template_hole 1,
               template_app
                (template_hole 2,
                 template_app
                  (template_hole 2,
                   template_app
                    (template_hole 1,
                     template_app
                      (template_hole 1,
                       template_app
                        (template_hole 1,
                         template_app
                          (template_hole 2,
                           template_app
                            (template_hole 1,
                             template_app
                              (template_hole 1,
                               template_app
                                (template_hole 2,
                                 template_app
                                  (template_hole 2,
                                   template_app
                                    (template_hole 2,
                                     template_app
(template_hole 2,
 template_app
  (template_hole 1,
   template_app
    (template_hole 1,
     template_app
      (template_hole 1,
       template_app
        (template_hole 2,
         template_app
          (template_hole 2,
           template_app
            (template_hole 2,
             template_app
              (template_hole 2,
               template_app
                (template_hole 2,
                 template_app
                  (template_hole 1,
                   template_app
                    (template_hole 2,
                     template_app
                      (template_hole 2,
                       template_app
                        (template_hole 2,
                         template_app
                          (template_hole 1,
                           template_hole 0))))))))))))))))))))))))))))))),
    ("Derive_Examples.hash_code_tree_simps",
     "hash_code_tree ?h\<^sub>'\<^sub>a Empty = 456683688",
     template_equation
      (template_app
        (template_app (template_hole 5, template_var 0), template_hole 4),
       template_app
        (template_hole 3,
         template_app
          (template_hole 2,
           template_app
            (template_hole 2,
             template_app
              (template_hole 2,
               template_app
                (template_hole 1,
                 template_app
                  (template_hole 2,
                   template_app
                    (template_hole 1,
                     template_app
                      (template_hole 2,
                       template_app
                        (template_hole 1,
                         template_app
                          (template_hole 2,
                           template_app
                            (template_hole 2,
                             template_app
                              (template_hole 2,
                               template_app
                                (template_hole 2,
                                 template_app
                                  (template_hole 1,
                                   template_app
                                    (template_hole 1,
                                     template_app
(template_hole 1,
 template_app
  (template_hole 2,
   template_app
    (template_hole 2,
     template_app
      (template_hole 2,
       template_app
        (template_hole 2,
         template_app
          (template_hole 1,
           template_app
            (template_hole 1,
             template_app
              (template_hole 1,
               template_app
                (template_hole 2,
                 template_app
                  (template_hole 2,
                   template_app
                    (template_hole 1,
                     template_app
                      (template_hole 1,
                       template_app
                        (template_hole 2,
                         template_app
                          (template_hole 1,
                           template_hole 0))))))))))))))))))))))))))))))),
    ("Derive_Examples.hash_code_mtree_simps",
     "hash_code_mtree ?h\<^sub>'\<^sub>a MEmpty = 1444394863",
     template_equation
      (template_app
        (template_app (template_hole 5, template_var 0), template_hole 4),
       template_app
        (template_hole 3,
         template_app
          (template_hole 2,
           template_app
            (template_hole 2,
             template_app
              (template_hole 2,
               template_app
                (template_hole 2,
                 template_app
                  (template_hole 1,
                   template_app
                    (template_hole 2,
                     template_app
                      (template_hole 2,
                       template_app
                        (template_hole 1,
                         template_app
                          (template_hole 2,
                           template_app
                            (template_hole 2,
                             template_app
                              (template_hole 2,
                               template_app
                                (template_hole 1,
                                 template_app
                                  (template_hole 2,
                                   template_app
                                    (template_hole 2,
                                     template_app
(template_hole 1,
 template_app
  (template_hole 2,
   template_app
    (template_hole 2,
     template_app
      (template_hole 2,
       template_app
        (template_hole 2,
         template_app
          (template_hole 1,
           template_app
            (template_hole 2,
             template_app
              (template_hole 1,
               template_app
                (template_hole 1,
                 template_app
                  (template_hole 1,
                   template_app
                    (template_hole 1,
                     template_app
                      (template_hole 2,
                       template_app
                        (template_hole 2,
                         template_app
                          (template_hole 1,
                           template_app
                            (template_hole 2,
                             template_app
                              (template_hole 1,
                               template_hole
                                0))))))))))))))))))))))))))))))))),
    ("Derive_Examples.hash_code_mtree_list_simps",
     "hash_code_mtree_list ?h\<^sub>'\<^sub>a MNil = 1739409227",
     template_equation
      (template_app
        (template_app (template_hole 5, template_var 0), template_hole 4),
       template_app
        (template_hole 3,
         template_app
          (template_hole 2,
           template_app
            (template_hole 2,
             template_app
              (template_hole 1,
               template_app
                (template_hole 2,
                 template_app
                  (template_hole 1,
                   template_app
                    (template_hole 1,
                     template_app
                      (template_hole 2,
                       template_app
                        (template_hole 1,
                         template_app
                          (template_hole 2,
                           template_app
                            (template_hole 2,
                             template_app
                              (template_hole 2,
                               template_app
                                (template_hole 1,
                                 template_app
                                  (template_hole 1,
                                   template_app
                                    (template_hole 1,
                                     template_app
(template_hole 2,
 template_app
  (template_hole 1,
   template_app
    (template_hole 2,
     template_app
      (template_hole 1,
       template_app
        (template_hole 2,
         template_app
          (template_hole 2,
           template_app
            (template_hole 1,
             template_app
              (template_hole 2,
               template_app
                (template_hole 1,
                 template_app
                  (template_hole 2,
                   template_app
                    (template_hole 2,
                     template_app
                      (template_hole 2,
                       template_app
                        (template_hole 2,
                         template_app
                          (template_hole 1,
                           template_app
                            (template_hole 1,
                             template_app
                              (template_hole 2,
                               template_hole
                                0))))))))))))))))))))))))))))))))),
    ("Derive_Examples.hash_code_ttree_simps",
     "hash_code_ttree ?h\<^sub>'\<^sub>a TEmpty = 1643719356",
     template_equation
      (template_app
        (template_app (template_hole 5, template_var 0), template_hole 4),
       template_app
        (template_hole 3,
         template_app
          (template_hole 2,
           template_app
            (template_hole 2,
             template_app
              (template_hole 1,
               template_app
                (template_hole 1,
                 template_app
                  (template_hole 1,
                   template_app
                    (template_hole 1,
                     template_app
                      (template_hole 2,
                       template_app
                        (template_hole 1,
                         template_app
                          (template_hole 2,
                           template_app
                            (template_hole 1,
                             template_app
                              (template_hole 2,
                               template_app
                                (template_hole 1,
                                 template_app
                                  (template_hole 2,
                                   template_app
                                    (template_hole 1,
                                     template_app
(template_hole 2,
 template_app
  (template_hole 2,
   template_app
    (template_hole 1,
     template_app
      (template_hole 2,
       template_app
        (template_hole 2,
         template_app
          (template_hole 1,
           template_app
            (template_hole 1,
             template_app
              (template_hole 1,
               template_app
                (template_hole 1,
                 template_app
                  (template_hole 1,
                   template_app
                    (template_hole 1,
                     template_app
                      (template_hole 2,
                       template_app
                        (template_hole 2,
                         template_app
                          (template_hole 2,
                           template_app
                            (template_hole 2,
                             template_app
                              (template_hole 1,
                               template_hole
                                0))))))))))))))))))))))))))))))))),
    ("Derive_Examples.equality_complex_simps",
     "equality_complex ?eq\<^sub>'\<^sub>a ?eq\<^sub>'\<^sub>b
       (C2 ?x ?xa ?xb ?xc) (C2 ?yb ?yc ?yd ?ye) =
      (equality_tree
        (equality_tree
          (equality_list
            (equality_complex ?eq\<^sub>'\<^sub>a ?eq\<^sub>'\<^sub>b)))
        ?x ?yb &
       ?eq\<^sub>'\<^sub>b ?xa ?yc &
       equality_complex ?eq\<^sub>'\<^sub>a ?eq\<^sub>'\<^sub>b ?xb ?yd &
       equality_list
        (equality_ttree
          (equality_complex2 ?eq\<^sub>'\<^sub>a ?eq\<^sub>'\<^sub>b))
        ?xc ?ye)",
     template_equation
      (template_app
        (template_app
          (template_app
            (template_app (template_hole 8, template_var 9),
             template_var 8),
           template_app
            (template_app
              (template_app
                (template_app (template_hole 7, template_var 7),
                 template_var 6),
               template_var 5),
             template_var 4)),
         template_app
          (template_app
            (template_app
              (template_app (template_hole 7, template_var 3),
               template_var 2),
             template_var 1),
           template_var 0)),
       template_app
        (template_app
          (template_hole 6,
           template_app
            (template_app
              (template_app
                (template_hole 5,
                 template_app
                  (template_hole 4,
                   template_app
                    (template_hole 3,
                     template_app
                      (template_app (template_hole 8, template_var 9),
                       template_var 8)))),
               template_var 7),
             template_var 3)),
         template_app
          (template_app
            (template_hole 6,
             template_app
              (template_app (template_var 8, template_var 6),
               template_var 2)),
           template_app
            (template_app
              (template_hole 6,
               template_app
                (template_app
                  (template_app
                    (template_app (template_hole 8, template_var 9),
                     template_var 8),
                   template_var 5),
                 template_var 1)),
             template_app
              (template_app
                (template_app
                  (template_hole 2,
                   template_app
                    (template_hole 1,
                     template_app
                      (template_app (template_hole 0, template_var 9),
                       template_var 8))),
                 template_var 4),
               template_var 0)))))),
    ("Derive_Examples.comparator_complex_simps",
     "comparator_complex ?comp\<^sub>'\<^sub>a ?comp\<^sub>'\<^sub>b
       (C2 ?x ?xa ?xb ?xc) (C2 ?yb ?yc ?yd ?ye) =
      (case comparator_tree
             (comparator_tree
               (comparator_list
                 (comparator_complex ?comp\<^sub>'\<^sub>a
                   ?comp\<^sub>'\<^sub>b)))
             ?x ?yb of
       Eq =>
         case ?comp\<^sub>'\<^sub>b ?xa ?yc of
         Eq =>
           case comparator_complex ?comp\<^sub>'\<^sub>a
                 ?comp\<^sub>'\<^sub>b ?xb ?yd of
           Eq =>
             comparator_list
              (comparator_ttree
                (comparator_complex2 ?comp\<^sub>'\<^sub>a
                  ?comp\<^sub>'\<^sub>b))
              ?xc ?ye
           | Lt => Lt | Gt => Gt
         | Lt => Lt | Gt => Gt
       | Lt => Lt | Gt => Gt)",
     template_equation
      (template_app
        (template_app
          (template_app
            (template_app (template_hole 10, template_var 9),
             template_var 8),
           template_app
            (template_app
              (template_app
                (template_app (template_hole 9, template_var 7),
                 template_var 6),
               template_var 5),
             template_var 4)),
         template_app
          (template_app
            (template_app
              (template_app (template_hole 9, template_var 3),
               template_var 2),
             template_var 1),
           template_var 0)),
       template_app
        (template_app
          (template_app
            (template_app
              (template_hole 8,
               template_app
                (template_app
                  (template_app
                    (template_app
                      (template_hole 8,
                       template_app
                        (template_app
                          (template_app
                            (template_app
                              (template_hole 8,
                               template_app
                                (template_app
                                  (template_app
                                    (template_hole 7,
                                     template_app
(template_hole 6,
 template_app
  (template_app (template_hole 5, template_var 9), template_var 8))),
                                   template_var 4),
                                 template_var 0)),
                             template_hole 4),
                           template_hole 3),
                         template_app
                          (template_app
                            (template_app
                              (template_app
                                (template_hole 10, template_var 9),
                               template_var 8),
                             template_var 5),
                           template_var 1))),
                     template_hole 4),
                   template_hole 3),
                 template_app
                  (template_app (template_var 8, template_var 6),
                   template_var 2))),
             template_hole 4),
           template_hole 3),
         template_app
          (template_app
            (template_app
              (template_hole 2,
               template_app
                (template_hole 1,
                 template_app
                  (template_hole 0,
                   template_app
                    (template_app (template_hole 10, template_var 9),
                     template_var 8)))),
             template_var 7),
           template_var 3)))),
    ("Derive_Examples.hash_code_term_simps",
     "hash_code_term ?h\<^sub>'\<^sub>f ?h\<^sub>'\<^sub>v (Var ?x) =
      ?h\<^sub>'\<^sub>v ?x * 366295382 + 263702471",
     template_equation
      (template_app
        (template_app
          (template_app (template_hole 7, template_var 2), template_var 1),
         template_app (template_hole 6, template_var 0)),
       template_app
        (template_app
          (template_hole 5,
           template_app
            (template_app
              (template_hole 4,
               template_app (template_var 1, template_var 0)),
             template_app
              (template_hole 3,
               template_app
                (template_hole 2,
                 template_app
                  (template_hole 1,
                   template_app
                    (template_hole 1,
                     template_app
                      (template_hole 2,
                       template_app
                        (template_hole 1,
                         template_app
                          (template_hole 2,
                           template_app
                            (template_hole 1,
                             template_app
                              (template_hole 2,
                               template_app
                                (template_hole 1,
                                 template_app
                                  (template_hole 2,
                                   template_app
                                    (template_hole 2,
                                     template_app
(template_hole 1,
 template_app
  (template_hole 1,
   template_app
    (template_hole 1,
     template_app
      (template_hole 2,
       template_app
        (template_hole 2,
         template_app
          (template_hole 1,
           template_app
            (template_hole 2,
             template_app
              (template_hole 1,
               template_app
                (template_hole 2,
                 template_app
                  (template_hole 1,
                   template_app
                    (template_hole 2,
                     template_app
                      (template_hole 1,
                       template_app
                        (template_hole 1,
                         template_app
                          (template_hole 1,
                           template_app
                            (template_hole 2,
                             template_app
                              (template_hole 1,
                               template_app
                                (template_hole 2,
                                 template_hole
                                  0))))))))))))))))))))))))))))))),
         template_app
          (template_hole 3,
           template_app
            (template_hole 1,
             template_app
              (template_hole 1,
               template_app
                (template_hole 1,
                 template_app
                  (template_hole 2,
                   template_app
                    (template_hole 2,
                     template_app
                      (template_hole 2,
                       template_app
                        (template_hole 1,
                         template_app
                          (template_hole 1,
                           template_app
                            (template_hole 1,
                             template_app
                              (template_hole 1,
                               template_app
                                (template_hole 1,
                                 template_app
                                  (template_hole 2,
                                   template_app
                                    (template_hole 2,
                                     template_app
(template_hole 2,
 template_app
  (template_hole 1,
   template_app
    (template_hole 1,
     template_app
      (template_hole 1,
       template_app
        (template_hole 1,
         template_app
          (template_hole 1,
           template_app
            (template_hole 2,
             template_app
              (template_hole 1,
               template_app
                (template_hole 1,
                 template_app
                  (template_hole 2,
                   template_app
                    (template_hole 1,
                     template_app
                      (template_hole 1,
                       template_app
                        (template_hole 1,
                         template_app
                          (template_hole 1,
                           template_hole 0))))))))))))))))))))))))))))))),
    ("Derive_Examples.hash_code_lab_simps",
     "hash_code_lab ?h\<^sub>'\<^sub>f ?h\<^sub>'\<^sub>l (Sharp ?x) =
      hash_code_lab ?h\<^sub>'\<^sub>f ?h\<^sub>'\<^sub>l ?x * 354899701 +
      252306790",
     template_equation
      (template_app
        (template_app
          (template_app (template_hole 7, template_var 2), template_var 1),
         template_app (template_hole 6, template_var 0)),
       template_app
        (template_app
          (template_hole 5,
           template_app
            (template_app
              (template_hole 4,
               template_app
                (template_app
                  (template_app (template_hole 7, template_var 2),
                   template_var 1),
                 template_var 0)),
             template_app
              (template_hole 3,
               template_app
                (template_hole 2,
                 template_app
                  (template_hole 1,
                   template_app
                    (template_hole 2,
                     template_app
                      (template_hole 1,
                       template_app
                        (template_hole 2,
                         template_app
                          (template_hole 2,
                           template_app
                            (template_hole 2,
                             template_app
                              (template_hole 2,
                               template_app
                                (template_hole 1,
                                 template_app
                                  (template_hole 2,
                                   template_app
                                    (template_hole 2,
                                     template_app
(template_hole 1,
 template_app
  (template_hole 2,
   template_app
    (template_hole 1,
     template_app
      (template_hole 2,
       template_app
        (template_hole 1,
         template_app
          (template_hole 2,
           template_app
            (template_hole 2,
             template_app
              (template_hole 2,
               template_app
                (template_hole 1,
                 template_app
                  (template_hole 1,
                   template_app
                    (template_hole 2,
                     template_app
                      (template_hole 1,
                       template_app
                        (template_hole 1,
                         template_app
                          (template_hole 2,
                           template_app
                            (template_hole 1,
                             template_app
                              (template_hole 2,
                               template_app
                                (template_hole 1,
                                 template_hole
                                  0))))))))))))))))))))))))))))))),
         template_app
          (template_hole 3,
           template_app
            (template_hole 1,
             template_app
              (template_hole 2,
               template_app
                (template_hole 2,
                 template_app
                  (template_hole 1,
                   template_app
                    (template_hole 1,
                     template_app
                      (template_hole 2,
                       template_app
                        (template_hole 2,
                         template_app
                          (template_hole 1,
                           template_app
                            (template_hole 2,
                             template_app
                              (template_hole 1,
                               template_app
                                (template_hole 2,
                                 template_app
                                  (template_hole 1,
                                   template_app
                                    (template_hole 1,
                                     template_app
(template_hole 2,
 template_app
  (template_hole 2,
   template_app
    (template_hole 2,
     template_app
      (template_hole 2,
       template_app
        (template_hole 1,
         template_app
          (template_hole 1,
           template_app
            (template_hole 2,
             template_app
              (template_hole 1,
               template_app
                (template_hole 1,
                 template_app
                  (template_hole 1,
                   template_app
                    (template_hole 1,
                     template_app
                      (template_hole 2,
                       template_app
                        (template_hole 2,
                         template_app
                          (template_hole 2,
                           template_hole 0))))))))))))))))))))))))))))))),
    ("Derive_Examples.hash_code_lab_simps",
     "hash_code_lab ?h\<^sub>'\<^sub>f ?h\<^sub>'\<^sub>l (UnLab ?x) =
      ?h\<^sub>'\<^sub>f ?x * 1468537209 + 1365944298",
     template_equation
      (template_app
        (template_app
          (template_app (template_hole 7, template_var 2), template_var 1),
         template_app (template_hole 6, template_var 0)),
       template_app
        (template_app
          (template_hole 5,
           template_app
            (template_app
              (template_hole 4,
               template_app (template_var 2, template_var 0)),
             template_app
              (template_hole 3,
               template_app
                (template_hole 2,
                 template_app
                  (template_hole 1,
                   template_app
                    (template_hole 1,
                     template_app
                      (template_hole 2,
                       template_app
                        (template_hole 2,
                         template_app
                          (template_hole 2,
                           template_app
                            (template_hole 2,
                             template_app
                              (template_hole 1,
                               template_app
                                (template_hole 2,
                                 template_app
                                  (template_hole 1,
                                   template_app
                                    (template_hole 1,
                                     template_app
(template_hole 2,
 template_app
  (template_hole 2,
   template_app
    (template_hole 1,
     template_app
      (template_hole 1,
       template_app
        (template_hole 1,
         template_app
          (template_hole 1,
           template_app
            (template_hole 1,
             template_app
              (template_hole 1,
               template_app
                (template_hole 2,
                 template_app
                  (template_hole 1,
                   template_app
                    (template_hole 1,
                     template_app
                      (template_hole 1,
                       template_app
                        (template_hole 2,
                         template_app
                          (template_hole 2,
                           template_app
                            (template_hole 2,
                             template_app
                              (template_hole 2,
                               template_app
                                (template_hole 1,
                                 template_app
                                  (template_hole 2,
                                   template_app
                                    (template_hole 1,
                                     template_hole
0))))))))))))))))))))))))))))))))),
         template_app
          (template_hole 3,
           template_app
            (template_hole 1,
             template_app
              (template_hole 2,
               template_app
                (template_hole 1,
                 template_app
                  (template_hole 2,
                   template_app
                    (template_hole 1,
                     template_app
                      (template_hole 2,
                       template_app
                        (template_hole 2,
                         template_app
                          (template_hole 2,
                           template_app
                            (template_hole 2,
                             template_app
                              (template_hole 2,
                               template_app
                                (template_hole 2,
                                 template_app
                                  (template_hole 1,
                                   template_app
                                    (template_hole 1,
                                     template_app
(template_hole 2,
 template_app
  (template_hole 1,
   template_app
    (template_hole 2,
     template_app
      (template_hole 1,
       template_app
        (template_hole 2,
         template_app
          (template_hole 1,
           template_app
            (template_hole 2,
             template_app
              (template_hole 1,
               template_app
                (template_hole 2,
                 template_app
                  (template_hole 2,
                   template_app
                    (template_hole 1,
                     template_app
                      (template_hole 2,
                       template_app
                        (template_hole 1,
                         template_app
                          (template_hole 1,
                           template_app
                            (template_hole 1,
                             template_app
                              (template_hole 2,
                               template_app
                                (template_hole 1,
                                 template_hole
                                  0)))))))))))))))))))))))))))))))))),
    ("Derive_Examples.hash_code_complex2_simps",
     "hash_code_complex2 ?h\<^sub>'\<^sub>a ?h\<^sub>'\<^sub>b (D1 ?x) =
      hash_code_ttree
       (hash_code_complex ?h\<^sub>'\<^sub>a ?h\<^sub>'\<^sub>b) ?x *
      1114163690 +
      1011570779",
     template_equation
      (template_app
        (template_app
          (template_app (template_hole 9, template_var 2), template_var 1),
         template_app (template_hole 8, template_var 0)),
       template_app
        (template_app
          (template_hole 7,
           template_app
            (template_app
              (template_hole 6,
               template_app
                (template_app
                  (template_hole 5,
                   template_app
                    (template_app (template_hole 4, template_var 2),
                     template_var 1)),
                 template_var 0)),
             template_app
              (template_hole 3,
               template_app
                (template_hole 2,
                 template_app
                  (template_hole 1,
                   template_app
                    (template_hole 2,
                     template_app
                      (template_hole 1,
                       template_app
                        (template_hole 2,
                         template_app
                          (template_hole 1,
                           template_app
                            (template_hole 1,
                             template_app
                              (template_hole 1,
                               template_app
                                (template_hole 1,
                                 template_app
                                  (template_hole 2,
                                   template_app
                                    (template_hole 2,
                                     template_app
(template_hole 1,
 template_app
  (template_hole 2,
   template_app
    (template_hole 2,
     template_app
      (template_hole 1,
       template_app
        (template_hole 1,
         template_app
          (template_hole 2,
           template_app
            (template_hole 2,
             template_app
              (template_hole 2,
               template_app
                (template_hole 1,
                 template_app
                  (template_hole 2,
                   template_app
                    (template_hole 1,
                     template_app
                      (template_hole 1,
                       template_app
                        (template_hole 2,
                         template_app
                          (template_hole 2,
                           template_app
                            (template_hole 1,
                             template_app
                              (template_hole 2,
                               template_app
                                (template_hole 2,
                                 template_app
                                  (template_hole 2,
                                   template_app
                                    (template_hole 2,
                                     template_hole
0))))))))))))))))))))))))))))))))),
         template_app
          (template_hole 3,
           template_app
            (template_hole 1,
             template_app
              (template_hole 1,
               template_app
                (template_hole 2,
                 template_app
                  (template_hole 1,
                   template_app
                    (template_hole 1,
                     template_app
                      (template_hole 2,
                       template_app
                        (template_hole 1,
                         template_app
                          (template_hole 2,
                           template_app
                            (template_hole 2,
                             template_app
                              (template_hole 2,
                               template_app
                                (template_hole 2,
                                 template_app
                                  (template_hole 1,
                                   template_app
                                    (template_hole 1,
                                     template_app
(template_hole 2,
 template_app
  (template_hole 1,
   template_app
    (template_hole 2,
     template_app
      (template_hole 1,
       template_app
        (template_hole 1,
         template_app
          (template_hole 2,
           template_app
            (template_hole 1,
             template_app
              (template_hole 2,
               template_app
                (template_hole 2,
                 template_app
                  (template_hole 1,
                   template_app
                    (template_hole 2,
                     template_app
                      (template_hole 2,
                       template_app
                        (template_hole 2,
                         template_app
                          (template_hole 1,
                           template_app
                            (template_hole 1,
                             template_app
                              (template_hole 1,
                               template_hole
                                0))))))))))))))))))))))))))))))))),
    ("Derive_Examples.hash_code_mtree_simps",
     "hash_code_mtree ?h\<^sub>'\<^sub>a (MNode ?x ?xa) =
      ?h\<^sub>'\<^sub>a ?x * 116671588 +
      (hash_code_mtree_list ?h\<^sub>'\<^sub>a ?xa * 14078677 +
       2058969414)",
     template_equation
      (template_app
        (template_app (template_hole 8, template_var 2),
         template_app
          (template_app (template_hole 7, template_var 1), template_var 0)),
       template_app
        (template_app
          (template_hole 6,
           template_app
            (template_app
              (template_hole 5,
               template_app (template_var 2, template_var 1)),
             template_app
              (template_hole 4,
               template_app
                (template_hole 3,
                 template_app
                  (template_hole 3,
                   template_app
                    (template_hole 2,
                     template_app
                      (template_hole 3,
                       template_app
                        (template_hole 3,
                         template_app
                          (template_hole 2,
                           template_app
                            (template_hole 2,
                             template_app
                              (template_hole 3,
                               template_app
                                (template_hole 3,
                                 template_app
                                  (template_hole 3,
                                   template_app
                                    (template_hole 2,
                                     template_app
(template_hole 3,
 template_app
  (template_hole 3,
   template_app
    (template_hole 3,
     template_app
      (template_hole 2,
       template_app
        (template_hole 3,
         template_app
          (template_hole 3,
           template_app
            (template_hole 3,
             template_app
              (template_hole 2,
               template_app
                (template_hole 3,
                 template_app
                  (template_hole 2,
                   template_app
                    (template_hole 2,
                     template_app
                      (template_hole 2,
                       template_app
                        (template_hole 2,
                         template_app
                          (template_hole 3,
                           template_app
                            (template_hole 2,
                             template_hole 1))))))))))))))))))))))))))))),
         template_app
          (template_app
            (template_hole 6,
             template_app
              (template_app
                (template_hole 5,
                 template_app
                  (template_app (template_hole 0, template_var 2),
                   template_var 0)),
               template_app
                (template_hole 4,
                 template_app
                  (template_hole 2,
                   template_app
                    (template_hole 3,
                     template_app
                      (template_hole 2,
                       template_app
                        (template_hole 3,
                         template_app
                          (template_hole 2,
                           template_app
                            (template_hole 3,
                             template_app
                              (template_hole 2,
                               template_app
                                (template_hole 2,
                                 template_app
                                  (template_hole 3,
                                   template_app
                                    (template_hole 2,
                                     template_app
(template_hole 3,
 template_app
  (template_hole 3,
   template_app
    (template_hole 2,
     template_app
      (template_hole 3,
       template_app
        (template_hole 2,
         template_app
          (template_hole 2,
           template_app
            (template_hole 3,
             template_app
              (template_hole 2,
               template_app
                (template_hole 2,
                 template_app
                  (template_hole 3,
                   template_app
                    (template_hole 2,
                     template_app
                      (template_hole 3,
                       template_app
                        (template_hole 2,
                         template_hole 1)))))))))))))))))))))))))),
           template_app
            (template_hole 4,
             template_app
              (template_hole 3,
               template_app
                (template_hole 2,
                 template_app
                  (template_hole 2,
                   template_app
                    (template_hole 3,
                     template_app
                      (template_hole 3,
                       template_app
                        (template_hole 3,
                         template_app
                          (template_hole 2,
                           template_app
                            (template_hole 3,
                             template_app
                              (template_hole 2,
                               template_app
                                (template_hole 3,
                                 template_app
                                  (template_hole 3,
                                   template_app
                                    (template_hole 3,
                                     template_app
(template_hole 3,
 template_app
  (template_hole 2,
   template_app
    (template_hole 2,
     template_app
      (template_hole 3,
       template_app
        (template_hole 2,
         template_app
          (template_hole 3,
           template_app
            (template_hole 3,
             template_app
              (template_hole 2,
               template_app
                (template_hole 2,
                 template_app
                  (template_hole 2,
                   template_app
                    (template_hole 3,
                     template_app
                      (template_hole 2,
                       template_app
                        (template_hole 3,
                         template_app
                          (template_hole 2,
                           template_app
                            (template_hole 3,
                             template_app
                              (template_hole 2,
                               template_app
                                (template_hole 2,
                                 template_app
                                  (template_hole 2,
                                   template_hole
                                    1))))))))))))))))))))))))))))))))))),
    ("Derive_Examples.hash_code_mtree_list_simps",
     "hash_code_mtree_list ?h\<^sub>'\<^sub>a (MCons ?x ?xa) =
      hash_code_mtree ?h\<^sub>'\<^sub>a ?x * 354140331 +
      (hash_code_mtree_list ?h\<^sub>'\<^sub>a ?xa * 251547420 +
       148954509)",
     template_equation
      (template_app
        (template_app (template_hole 8, template_var 2),
         template_app
          (template_app (template_hole 7, template_var 1), template_var 0)),
       template_app
        (template_app
          (template_hole 6,
           template_app
            (template_app
              (template_hole 5,
               template_app
                (template_app (template_hole 4, template_var 2),
                 template_var 1)),
             template_app
              (template_hole 3,
               template_app
                (template_hole 2,
                 template_app
                  (template_hole 2,
                   template_app
                    (template_hole 1,
                     template_app
                      (template_hole 2,
                       template_app
                        (template_hole 1,
                         template_app
                          (template_hole 2,
                           template_app
                            (template_hole 1,
                             template_app
                              (template_hole 2,
                               template_app
                                (template_hole 1,
                                 template_app
                                  (template_hole 1,
                                   template_app
                                    (template_hole 1,
                                     template_app
(template_hole 1,
 template_app
  (template_hole 1,
   template_app
    (template_hole 1,
     template_app
      (template_hole 2,
       template_app
        (template_hole 2,
         template_app
          (template_hole 2,
           template_app
            (template_hole 2,
             template_app
              (template_hole 1,
               template_app
                (template_hole 2,
                 template_app
                  (template_hole 2,
                   template_app
                    (template_hole 1,
                     template_app
                      (template_hole 1,
                       template_app
                        (template_hole 1,
                         template_app
                          (template_hole 2,
                           template_app
                            (template_hole 1,
                             template_app
                              (template_hole 2,
                               template_app
                                (template_hole 1,
                                 template_hole
                                  0))))))))))))))))))))))))))))))),
         template_app
          (template_app
            (template_hole 6,
             template_app
              (template_app
                (template_hole 5,
                 template_app
                  (template_app (template_hole 8, template_var 2),
                   template_var 0)),
               template_app
                (template_hole 3,
                 template_app
                  (template_hole 1,
                   template_app
                    (template_hole 1,
                     template_app
                      (template_hole 2,
                       template_app
                        (template_hole 2,
                         template_app
                          (template_hole 2,
                           template_app
                            (template_hole 1,
                             template_app
                              (template_hole 1,
                               template_app
                                (template_hole 1,
                                 template_app
                                  (template_hole 2,
                                   template_app
                                    (template_hole 2,
                                     template_app
(template_hole 2,
 template_app
  (template_hole 2,
   template_app
    (template_hole 1,
     template_app
      (template_hole 1,
       template_app
        (template_hole 2,
         template_app
          (template_hole 1,
           template_app
            (template_hole 1,
             template_app
              (template_hole 2,
               template_app
                (template_hole 2,
                 template_app
                  (template_hole 2,
                   template_app
                    (template_hole 2,
                     template_app
                      (template_hole 2,
                       template_app
                        (template_hole 2,
                         template_app
                          (template_hole 2,
                           template_app
                            (template_hole 1,
                             template_app
                              (template_hole 2,
                               template_app
                                (template_hole 2,
                                 template_hole
                                  0)))))))))))))))))))))))))))))),
           template_app
            (template_hole 3,
             template_app
              (template_hole 2,
               template_app
                (template_hole 1,
                 template_app
                  (template_hole 2,
                   template_app
                    (template_hole 2,
                     template_app
                      (template_hole 1,
                       template_app
                        (template_hole 1,
                         template_app
                          (template_hole 1,
                           template_app
                            (template_hole 2,
                             template_app
                              (template_hole 2,
                               template_app
                                (template_hole 1,
                                 template_app
                                  (template_hole 2,
                                   template_app
                                    (template_hole 2,
                                     template_app
(template_hole 2,
 template_app
  (template_hole 1,
   template_app
    (template_hole 2,
     template_app
      (template_hole 2,
       template_app
        (template_hole 1,
         template_app
          (template_hole 1,
           template_app
            (template_hole 1,
             template_app
              (template_hole 1,
               template_app
                (template_hole 1,
                 template_app
                  (template_hole 2,
                   template_app
                    (template_hole 2,
                     template_app
                      (template_hole 2,
                       template_app
                        (template_hole 1,
                         template_app
                          (template_hole 1,
                           template_app
                            (template_hole 1,
                             template_hole
                              0)))))))))))))))))))))))))))))))),
    ("Derive_Examples.hash_code_lab_simps",
     "hash_code_lab ?h\<^sub>'\<^sub>f ?h\<^sub>'\<^sub>l (Lab ?x ?xa) =
      hash_code_lab ?h\<^sub>'\<^sub>f ?h\<^sub>'\<^sub>l ?x * 416676736 +
      (?h\<^sub>'\<^sub>l ?xa * 314083825 + 211490914)",
     template_equation
      (template_app
        (template_app
          (template_app (template_hole 7, template_var 3), template_var 2),
         template_app
          (template_app (template_hole 6, template_var 1), template_var 0)),
       template_app
        (template_app
          (template_hole 5,
           template_app
            (template_app
              (template_hole 4,
               template_app
                (template_app
                  (template_app (template_hole 7, template_var 3),
                   template_var 2),
                 template_var 1)),
             template_app
              (template_hole 3,
               template_app
                (template_hole 2,
                 template_app
                  (template_hole 2,
                   template_app
                    (template_hole 2,
                     template_app
                      (template_hole 2,
                       template_app
                        (template_hole 2,
                         template_app
                          (template_hole 2,
                           template_app
                            (template_hole 2,
                             template_app
                              (template_hole 1,
                               template_app
                                (template_hole 1,
                                 template_app
                                  (template_hole 1,
                                   template_app
                                    (template_hole 2,
                                     template_app
(template_hole 1,
 template_app
  (template_hole 1,
   template_app
    (template_hole 1,
     template_app
      (template_hole 1,
       template_app
        (template_hole 1,
         template_app
          (template_hole 1,
           template_app
            (template_hole 2,
             template_app
              (template_hole 1,
               template_app
                (template_hole 2,
                 template_app
                  (template_hole 1,
                   template_app
                    (template_hole 2,
                     template_app
                      (template_hole 1,
                       template_app
                        (template_hole 1,
                         template_app
                          (template_hole 2,
                           template_app
                            (template_hole 2,
                             template_app
                              (template_hole 2,
                               template_app
                                (template_hole 1,
                                 template_hole
                                  0))))))))))))))))))))))))))))))),
         template_app
          (template_app
            (template_hole 5,
             template_app
              (template_app
                (template_hole 4,
                 template_app (template_var 2, template_var 0)),
               template_app
                (template_hole 3,
                 template_app
                  (template_hole 1,
                   template_app
                    (template_hole 2,
                     template_app
                      (template_hole 2,
                       template_app
                        (template_hole 2,
                         template_app
                          (template_hole 1,
                           template_app
                            (template_hole 1,
                             template_app
                              (template_hole 1,
                               template_app
                                (template_hole 1,
                                 template_app
                                  (template_hole 1,
                                   template_app
                                    (template_hole 2,
                                     template_app
(template_hole 2,
 template_app
  (template_hole 1,
   template_app
    (template_hole 2,
     template_app
      (template_hole 2,
       template_app
        (template_hole 2,
         template_app
          (template_hole 1,
           template_app
            (template_hole 2,
             template_app
              (template_hole 2,
               template_app
                (template_hole 2,
                 template_app
                  (template_hole 1,
                   template_app
                    (template_hole 1,
                     template_app
                      (template_hole 1,
                       template_app
                        (template_hole 2,
                         template_app
                          (template_hole 1,
                           template_app
                            (template_hole 2,
                             template_app
                              (template_hole 1,
                               template_app
                                (template_hole 2,
                                 template_app
                                  (template_hole 2,
                                   template_hole
                                    0))))))))))))))))))))))))))))))),
           template_app
            (template_hole 3,
             template_app
              (template_hole 2,
               template_app
                (template_hole 1,
                 template_app
                  (template_hole 2,
                   template_app
                    (template_hole 2,
                     template_app
                      (template_hole 2,
                       template_app
                        (template_hole 1,
                         template_app
                          (template_hole 1,
                           template_app
                            (template_hole 2,
                             template_app
                              (template_hole 2,
                               template_app
                                (template_hole 2,
                                 template_app
                                  (template_hole 2,
                                   template_app
                                    (template_hole 1,
                                     template_app
(template_hole 1,
 template_app
  (template_hole 2,
   template_app
    (template_hole 2,
     template_app
      (template_hole 2,
       template_app
        (template_hole 1,
         template_app
          (template_hole 1,
           template_app
            (template_hole 2,
             template_app
              (template_hole 1,
               template_app
                (template_hole 1,
                 template_app
                  (template_hole 2,
                   template_app
                    (template_hole 2,
                     template_app
                      (template_hole 1,
                       template_app
                        (template_hole 2,
                         template_app
                          (template_hole 2,
                           template_app
                            (template_hole 1,
                             template_hole
                              0)))))))))))))))))))))))))))))))),
    ("Derive_Examples.hash_code_nat_list_list_simps",
     "hash_code_nat_list_list (CCons ?x ?xa) =
      hash_code_prod (hash_code_list hashcode) (hash_code_option hashcode)
       ?x *
      490198245 +
      (hash_code_nat_list_list ?xa * 387605334 + 285012423)",
     template_equation
      (template_app
        (template_hole 12,
         template_app
          (template_app (template_hole 11, template_var 1),
           template_var 0)),
       template_app
        (template_app
          (template_hole 10,
           template_app
            (template_app
              (template_hole 9,
               template_app
                (template_app
                  (template_app
                    (template_hole 8,
                     template_app (template_hole 7, template_hole 6)),
                   template_app (template_hole 5, template_hole 4)),
                 template_var 1)),
             template_app
              (template_hole 3,
               template_app
                (template_hole 2,
                 template_app
                  (template_hole 1,
                   template_app
                    (template_hole 2,
                     template_app
                      (template_hole 1,
                       template_app
                        (template_hole 1,
                         template_app
                          (template_hole 2,
                           template_app
                            (template_hole 2,
                             template_app
                              (template_hole 2,
                               template_app
                                (template_hole 1,
                                 template_app
                                  (template_hole 1,
                                   template_app
                                    (template_hole 2,
                                     template_app
(template_hole 1,
 template_app
  (template_hole 2,
   template_app
    (template_hole 1,
     template_app
      (template_hole 2,
       template_app
        (template_hole 2,
         template_app
          (template_hole 2,
           template_app
            (template_hole 2,
             template_app
              (template_hole 2,
               template_app
                (template_hole 1,
                 template_app
                  (template_hole 2,
                   template_app
                    (template_hole 2,
                     template_app
                      (template_hole 1,
                       template_app
                        (template_hole 1,
                         template_app
                          (template_hole 2,
                           template_app
                            (template_hole 1,
                             template_app
                              (template_hole 2,
                               template_app
                                (template_hole 2,
                                 template_hole
                                  0))))))))))))))))))))))))))))))),
         template_app
          (template_app
            (template_hole 10,
             template_app
              (template_app
                (template_hole 9,
                 template_app (template_hole 12, template_var 0)),
               template_app
                (template_hole 3,
                 template_app
                  (template_hole 1,
                   template_app
                    (template_hole 2,
                     template_app
                      (template_hole 2,
                       template_app
                        (template_hole 1,
                         template_app
                          (template_hole 2,
                           template_app
                            (template_hole 1,
                             template_app
                              (template_hole 2,
                               template_app
                                (template_hole 1,
                                 template_app
                                  (template_hole 2,
                                   template_app
                                    (template_hole 2,
                                     template_app
(template_hole 1,
 template_app
  (template_hole 1,
   template_app
    (template_hole 1,
     template_app
      (template_hole 2,
       template_app
        (template_hole 2,
         template_app
          (template_hole 1,
           template_app
            (template_hole 1,
             template_app
              (template_hole 2,
               template_app
                (template_hole 1,
                 template_app
                  (template_hole 2,
                   template_app
                    (template_hole 2,
                     template_app
                      (template_hole 1,
                       template_app
                        (template_hole 1,
                         template_app
                          (template_hole 1,
                           template_app
                            (template_hole 2,
                             template_app
                              (template_hole 2,
                               template_app
                                (template_hole 2,
                                 template_app
                                  (template_hole 1,
                                   template_hole
                                    0))))))))))))))))))))))))))))))),
           template_app
            (template_hole 3,
             template_app
              (template_hole 2,
               template_app
                (template_hole 2,
                 template_app
                  (template_hole 2,
                   template_app
                    (template_hole 1,
                     template_app
                      (template_hole 1,
                       template_app
                        (template_hole 1,
                         template_app
                          (template_hole 2,
                           template_app
                            (template_hole 2,
                             template_app
                              (template_hole 2,
                               template_app
                                (template_hole 1,
                                 template_app
                                  (template_hole 1,
                                   template_app
                                    (template_hole 1,
                                     template_app
(template_hole 2,
 template_app
  (template_hole 2,
   template_app
    (template_hole 2,
     template_app
      (template_hole 2,
       template_app
        (template_hole 1,
         template_app
          (template_hole 1,
           template_app
            (template_hole 2,
             template_app
              (template_hole 2,
               template_app
                (template_hole 2,
                 template_app
                  (template_hole 2,
                   template_app
                    (template_hole 2,
                     template_app
                      (template_hole 2,
                       template_app
                        (template_hole 1,
                         template_app
                          (template_hole 1,
                           template_app
                            (template_hole 1,
                             template_app
                              (template_hole 1,
                               template_hole
                                0))))))))))))))))))))))))))))))))),
    ("Derive_Examples.hash_code_term_simps",
     "hash_code_term ?h\<^sub>'\<^sub>f ?h\<^sub>'\<^sub>v (Fun ?x ?xa) =
      ?h\<^sub>'\<^sub>f ?x * 479216310 +
      (hash_code_list (hash_code_term ?h\<^sub>'\<^sub>f ?h\<^sub>'\<^sub>v)
        ?xa *
       376623399 +
       274030488)",
     template_equation
      (template_app
        (template_app
          (template_app (template_hole 8, template_var 3), template_var 2),
         template_app
          (template_app (template_hole 7, template_var 1), template_var 0)),
       template_app
        (template_app
          (template_hole 6,
           template_app
            (template_app
              (template_hole 5,
               template_app (template_var 3, template_var 1)),
             template_app
              (template_hole 4,
               template_app
                (template_hole 3,
                 template_app
                  (template_hole 2,
                   template_app
                    (template_hole 2,
                     template_app
                      (template_hole 3,
                       template_app
                        (template_hole 2,
                         template_app
                          (template_hole 2,
                           template_app
                            (template_hole 3,
                             template_app
                              (template_hole 2,
                               template_app
                                (template_hole 3,
                                 template_app
                                  (template_hole 2,
                                   template_app
                                    (template_hole 3,
                                     template_app
(template_hole 3,
 template_app
  (template_hole 3,
   template_app
    (template_hole 3,
     template_app
      (template_hole 2,
       template_app
        (template_hole 3,
         template_app
          (template_hole 3,
           template_app
            (template_hole 3,
             template_app
              (template_hole 3,
               template_app
                (template_hole 3,
                 template_app
                  (template_hole 2,
                   template_app
                    (template_hole 3,
                     template_app
                      (template_hole 3,
                       template_app
                        (template_hole 2,
                         template_app
                          (template_hole 3,
                           template_app
                            (template_hole 3,
                             template_app
                              (template_hole 2,
                               template_app
                                (template_hole 2,
                                 template_hole
                                  1))))))))))))))))))))))))))))))),
         template_app
          (template_app
            (template_hole 6,
             template_app
              (template_app
                (template_hole 5,
                 template_app
                  (template_app
                    (template_hole 0,
                     template_app
                      (template_app (template_hole 8, template_var 3),
                       template_var 2)),
                   template_var 0)),
               template_app
                (template_hole 4,
                 template_app
                  (template_hole 2,
                   template_app
                    (template_hole 2,
                     template_app
                      (template_hole 2,
                       template_app
                        (template_hole 3,
                         template_app
                          (template_hole 3,
                           template_app
                            (template_hole 2,
                             template_app
                              (template_hole 3,
                               template_app
                                (template_hole 3,
                                 template_app
                                  (template_hole 2,
                                   template_app
                                    (template_hole 3,
                                     template_app
(template_hole 3,
 template_app
  (template_hole 3,
   template_app
    (template_hole 2,
     template_app
      (template_hole 3,
       template_app
        (template_hole 2,
         template_app
          (template_hole 2,
           template_app
            (template_hole 3,
             template_app
              (template_hole 2,
               template_app
                (template_hole 3,
                 template_app
                  (template_hole 3,
                   template_app
                    (template_hole 2,
                     template_app
                      (template_hole 2,
                       template_app
                        (template_hole 2,
                         template_app
                          (template_hole 3,
                           template_app
                            (template_hole 3,
                             template_app
                              (template_hole 2,
                               template_app
                                (template_hole 2,
                                 template_app
                                  (template_hole 3,
                                   template_hole
                                    1))))))))))))))))))))))))))))))),
           template_app
            (template_hole 4,
             template_app
              (template_hole 3,
               template_app
                (template_hole 3,
                 template_app
                  (template_hole 3,
                   template_app
                    (template_hole 2,
                     template_app
                      (template_hole 2,
                       template_app
                        (template_hole 3,
                         template_app
                          (template_hole 3,
                           template_app
                            (template_hole 2,
                             template_app
                              (template_hole 2,
                               template_app
                                (template_hole 2,
                                 template_app
                                  (template_hole 2,
                                   template_app
                                    (template_hole 2,
                                     template_app
(template_hole 2,
 template_app
  (template_hole 3,
   template_app
    (template_hole 2,
     template_app
      (template_hole 3,
       template_app
        (template_hole 2,
         template_app
          (template_hole 3,
           template_app
            (template_hole 2,
             template_app
              (template_hole 3,
               template_app
                (template_hole 2,
                 template_app
                  (template_hole 3,
                   template_app
                    (template_hole 2,
                     template_app
                      (template_hole 3,
                       template_app
                        (template_hole 3,
                         template_app
                          (template_hole 3,
                           template_app
                            (template_hole 3,
                             template_app
                              (template_hole 3,
                               template_hole
                                1))))))))))))))))))))))))))))))))),
    ("Derive_Examples.hash_code_tree_simps",
     "hash_code_tree ?h\<^sub>'\<^sub>a (Derive_Examples.tree.Node ?x ?xa) =
      ?h\<^sub>'\<^sub>a ?x * 990836685 +
      (hash_code_list (hash_code_tree ?h\<^sub>'\<^sub>a) ?xa * 888243774 +
       785650863)",
     template_equation
      (template_app
        (template_app (template_hole 8, template_var 2),
         template_app
          (template_app (template_hole 7, template_var 1), template_var 0)),
       template_app
        (template_app
          (template_hole 6,
           template_app
            (template_app
              (template_hole 5,
               template_app (template_var 2, template_var 1)),
             template_app
              (template_hole 4,
               template_app
                (template_hole 3,
                 template_app
                  (template_hole 2,
                   template_app
                    (template_hole 3,
                     template_app
                      (template_hole 3,
                       template_app
                        (template_hole 2,
                         template_app
                          (template_hole 2,
                           template_app
                            (template_hole 3,
                             template_app
                              (template_hole 3,
                               template_app
                                (template_hole 3,
                                 template_app
                                  (template_hole 3,
                                   template_app
                                    (template_hole 3,
                                     template_app
(template_hole 2,
 template_app
  (template_hole 3,
   template_app
    (template_hole 3,
     template_app
      (template_hole 3,
       template_app
        (template_hole 3,
         template_app
          (template_hole 2,
           template_app
            (template_hole 3,
             template_app
              (template_hole 3,
               template_app
                (template_hole 3,
                 template_app
                  (template_hole 2,
                   template_app
                    (template_hole 2,
                     template_app
                      (template_hole 2,
                       template_app
                        (template_hole 2,
                         template_app
                          (template_hole 3,
                           template_app
                            (template_hole 3,
                             template_app
                              (template_hole 2,
                               template_app
                                (template_hole 3,
                                 template_app
                                  (template_hole 3,
                                   template_hole
                                    1)))))))))))))))))))))))))))))))),
         template_app
          (template_app
            (template_hole 6,
             template_app
              (template_app
                (template_hole 5,
                 template_app
                  (template_app
                    (template_hole 0,
                     template_app (template_hole 8, template_var 2)),
                   template_var 0)),
               template_app
                (template_hole 4,
                 template_app
                  (template_hole 2,
                   template_app
                    (template_hole 3,
                     template_app
                      (template_hole 3,
                       template_app
                        (template_hole 3,
                         template_app
                          (template_hole 3,
                           template_app
                            (template_hole 3,
                             template_app
                              (template_hole 2,
                               template_app
                                (template_hole 2,
                                 template_app
                                  (template_hole 2,
                                   template_app
                                    (template_hole 3,
                                     template_app
(template_hole 3,
 template_app
  (template_hole 2,
   template_app
    (template_hole 2,
     template_app
      (template_hole 2,
       template_app
        (template_hole 2,
         template_app
          (template_hole 3,
           template_app
            (template_hole 3,
             template_app
              (template_hole 2,
               template_app
                (template_hole 2,
                 template_app
                  (template_hole 2,
                   template_app
                    (template_hole 3,
                     template_app
                      (template_hole 3,
                       template_app
                        (template_hole 3,
                         template_app
                          (template_hole 3,
                           template_app
                            (template_hole 2,
                             template_app
                              (template_hole 2,
                               template_app
                                (template_hole 3,
                                 template_app
                                  (template_hole 2,
                                   template_app
                                    (template_hole 3,
                                     template_hole
1)))))))))))))))))))))))))))))))),
           template_app
            (template_hole 4,
             template_app
              (template_hole 3,
               template_app
                (template_hole 3,
                 template_app
                  (template_hole 3,
                   template_app
                    (template_hole 3,
                     template_app
                      (template_hole 2,
                       template_app
                        (template_hole 3,
                         template_app
                          (template_hole 2,
                           template_app
                            (template_hole 3,
                             template_app
                              (template_hole 2,
                               template_app
                                (template_hole 2,
                                 template_app
                                  (template_hole 3,
                                   template_app
                                    (template_hole 2,
                                     template_app
(template_hole 3,
 template_app
  (template_hole 2,
   template_app
    (template_hole 2,
     template_app
      (template_hole 2,
       template_app
        (template_hole 2,
         template_app
          (template_hole 2,
           template_app
            (template_hole 3,
             template_app
              (template_hole 2,
               template_app
                (template_hole 3,
                 template_app
                  (template_hole 2,
                   template_app
                    (template_hole 3,
                     template_app
                      (template_hole 3,
                       template_app
                        (template_hole 2,
                         template_app
                          (template_hole 3,
                           template_app
                            (template_hole 3,
                             template_app
                              (template_hole 3,
                               template_app
                                (template_hole 2,
                                 template_hole
                                  1)))))))))))))))))))))))))))))))))),
    ("Derive_Examples.hash_code_ttree_simps",
     "hash_code_ttree ?h\<^sub>'\<^sub>a (TNode ?x ?xa) =
      ?h\<^sub>'\<^sub>a ?x * 1036457249 +
      (hash_code_tree (hash_code_list (hash_code_ttree ?h\<^sub>'\<^sub>a))
        ?xa *
       933864338 +
       831271427)",
     template_equation
      (template_app
        (template_app (template_hole 9, template_var 2),
         template_app
          (template_app (template_hole 8, template_var 1), template_var 0)),
       template_app
        (template_app
          (template_hole 7,
           template_app
            (template_app
              (template_hole 6,
               template_app (template_var 2, template_var 1)),
             template_app
              (template_hole 5,
               template_app
                (template_hole 4,
                 template_app
                  (template_hole 3,
                   template_app
                    (template_hole 3,
                     template_app
                      (template_hole 3,
                       template_app
                        (template_hole 3,
                         template_app
                          (template_hole 4,
                           template_app
                            (template_hole 3,
                             template_app
                              (template_hole 3,
                               template_app
                                (template_hole 4,
                                 template_app
                                  (template_hole 3,
                                   template_app
                                    (template_hole 4,
                                     template_app
(template_hole 3,
 template_app
  (template_hole 4,
   template_app
    (template_hole 3,
     template_app
      (template_hole 3,
       template_app
        (template_hole 3,
         template_app
          (template_hole 4,
           template_app
            (template_hole 4,
             template_app
              (template_hole 4,
               template_app
                (template_hole 3,
                 template_app
                  (template_hole 3,
                   template_app
                    (template_hole 3,
                     template_app
                      (template_hole 4,
                       template_app
                        (template_hole 4,
                         template_app
                          (template_hole 4,
                           template_app
                            (template_hole 3,
                             template_app
                              (template_hole 4,
                               template_app
                                (template_hole 4,
                                 template_app
                                  (template_hole 4,
                                   template_hole
                                    2)))))))))))))))))))))))))))))))),
         template_app
          (template_app
            (template_hole 7,
             template_app
              (template_app
                (template_hole 6,
                 template_app
                  (template_app
                    (template_hole 1,
                     template_app
                      (template_hole 0,
                       template_app (template_hole 9, template_var 2))),
                   template_var 0)),
               template_app
                (template_hole 5,
                 template_app
                  (template_hole 3,
                   template_app
                    (template_hole 4,
                     template_app
                      (template_hole 3,
                       template_app
                        (template_hole 3,
                         template_app
                          (template_hole 4,
                           template_app
                            (template_hole 3,
                             template_app
                              (template_hole 3,
                               template_app
                                (template_hole 4,
                                 template_app
                                  (template_hole 4,
                                   template_app
                                    (template_hole 4,
                                     template_app
(template_hole 3,
 template_app
  (template_hole 3,
   template_app
    (template_hole 3,
     template_app
      (template_hole 4,
       template_app
        (template_hole 3,
         template_app
          (template_hole 4,
           template_app
            (template_hole 4,
             template_app
              (template_hole 3,
               template_app
                (template_hole 3,
                 template_app
                  (template_hole 4,
                   template_app
                    (template_hole 3,
                     template_app
                      (template_hole 4,
                       template_app
                        (template_hole 3,
                         template_app
                          (template_hole 4,
                           template_app
                            (template_hole 4,
                             template_app
                              (template_hole 4,
                               template_app
                                (template_hole 4,
                                 template_app
                                  (template_hole 3,
                                   template_app
                                    (template_hole 4,
                                     template_hole
2)))))))))))))))))))))))))))))))),
           template_app
            (template_hole 5,
             template_app
              (template_hole 4,
               template_app
                (template_hole 4,
                 template_app
                  (template_hole 3,
                   template_app
                    (template_hole 3,
                     template_app
                      (template_hole 3,
                       template_app
                        (template_hole 3,
                         template_app
                          (template_hole 3,
                           template_app
                            (template_hole 3,
                             template_app
                              (template_hole 3,
                               template_app
                                (template_hole 4,
                                 template_app
                                  (template_hole 3,
                                   template_app
                                    (template_hole 3,
                                     template_app
(template_hole 4,
 template_app
  (template_hole 4,
   template_app
    (template_hole 3,
     template_app
      (template_hole 3,
       template_app
        (template_hole 3,
         template_app
          (template_hole 3,
           template_app
            (template_hole 4,
             template_app
              (template_hole 4,
               template_app
                (template_hole 3,
                 template_app
                  (template_hole 3,
                   template_app
                    (template_hole 3,
                     template_app
                      (template_hole 4,
                       template_app
                        (template_hole 4,
                         template_app
                          (template_hole 3,
                           template_app
                            (template_hole 3,
                             template_app
                              (template_hole 3,
                               template_app
                                (template_hole 4,
                                 template_hole
                                  2)))))))))))))))))))))))))))))))))),
    ("Derive_Examples.hash_code_lab_simps",
     "hash_code_lab ?h\<^sub>'\<^sub>f ?h\<^sub>'\<^sub>l (FunLab ?x ?xa) =
      hash_code_lab ?h\<^sub>'\<^sub>f ?h\<^sub>'\<^sub>l ?x * 1292087163 +
      (hash_code_list (hash_code_lab ?h\<^sub>'\<^sub>f ?h\<^sub>'\<^sub>l)
        ?xa *
       1189494252 +
       1086901341)",
     template_equation
      (template_app
        (template_app
          (template_app (template_hole 8, template_var 3), template_var 2),
         template_app
          (template_app (template_hole 7, template_var 1), template_var 0)),
       template_app
        (template_app
          (template_hole 6,
           template_app
            (template_app
              (template_hole 5,
               template_app
                (template_app
                  (template_app (template_hole 8, template_var 3),
                   template_var 2),
                 template_var 1)),
             template_app
              (template_hole 4,
               template_app
                (template_hole 3,
                 template_app
                  (template_hole 3,
                   template_app
                    (template_hole 2,
                     template_app
                      (template_hole 3,
                       template_app
                        (template_hole 3,
                         template_app
                          (template_hole 3,
                           template_app
                            (template_hole 3,
                             template_app
                              (template_hole 2,
                               template_app
                                (template_hole 3,
                                 template_app
                                  (template_hole 3,
                                   template_app
                                    (template_hole 3,
                                     template_app
(template_hole 3,
 template_app
  (template_hole 2,
   template_app
    (template_hole 3,
     template_app
      (template_hole 2,
       template_app
        (template_hole 3,
         template_app
          (template_hole 3,
           template_app
            (template_hole 3,
             template_app
              (template_hole 2,
               template_app
                (template_hole 2,
                 template_app
                  (template_hole 2,
                   template_app
                    (template_hole 2,
                     template_app
                      (template_hole 2,
                       template_app
                        (template_hole 2,
                         template_app
                          (template_hole 3,
                           template_app
                            (template_hole 2,
                             template_app
                              (template_hole 3,
                               template_app
                                (template_hole 3,
                                 template_app
                                  (template_hole 2,
                                   template_app
                                    (template_hole 2,
                                     template_hole
1))))))))))))))))))))))))))))))))),
         template_app
          (template_app
            (template_hole 6,
             template_app
              (template_app
                (template_hole 5,
                 template_app
                  (template_app
                    (template_hole 0,
                     template_app
                      (template_app (template_hole 8, template_var 3),
                       template_var 2)),
                   template_var 0)),
               template_app
                (template_hole 4,
                 template_app
                  (template_hole 2,
                   template_app
                    (template_hole 2,
                     template_app
                      (template_hole 3,
                       template_app
                        (template_hole 3,
                         template_app
                          (template_hole 2,
                           template_app
                            (template_hole 3,
                             template_app
                              (template_hole 3,
                               template_app
                                (template_hole 3,
                                 template_app
                                  (template_hole 3,
                                   template_app
                                    (template_hole 2,
                                     template_app
(template_hole 3,
 template_app
  (template_hole 3,
   template_app
    (template_hole 3,
     template_app
      (template_hole 3,
       template_app
        (template_hole 2,
         template_app
          (template_hole 2,
           template_app
            (template_hole 2,
             template_app
              (template_hole 3,
               template_app
                (template_hole 3,
                 template_app
                  (template_hole 2,
                   template_app
                    (template_hole 2,
                     template_app
                      (template_hole 3,
                       template_app
                        (template_hole 3,
                         template_app
                          (template_hole 3,
                           template_app
                            (template_hole 2,
                             template_app
                              (template_hole 3,
                               template_app
                                (template_hole 3,
                                 template_app
                                  (template_hole 2,
                                   template_app
                                    (template_hole 2,
                                     template_app
(template_hole 2, template_hole 1))))))))))))))))))))))))))))))))),
           template_app
            (template_hole 4,
             template_app
              (template_hole 3,
               template_app
                (template_hole 2,
                 template_app
                  (template_hole 3,
                   template_app
                    (template_hole 3,
                     template_app
                      (template_hole 3,
                       template_app
                        (template_hole 2,
                         template_app
                          (template_hole 3,
                           template_app
                            (template_hole 2,
                             template_app
                              (template_hole 2,
                               template_app
                                (template_hole 2,
                                 template_app
                                  (template_hole 3,
                                   template_app
                                    (template_hole 3,
                                     template_app
(template_hole 2,
 template_app
  (template_hole 2,
   template_app
    (template_hole 3,
     template_app
      (template_hole 3,
       template_app
        (template_hole 2,
         template_app
          (template_hole 2,
           template_app
            (template_hole 2,
             template_app
              (template_hole 3,
               template_app
                (template_hole 2,
                 template_app
                  (template_hole 2,
                   template_app
                    (template_hole 3,
                     template_app
                      (template_hole 3,
                       template_app
                        (template_hole 2,
                         template_app
                          (template_hole 2,
                           template_app
                            (template_hole 2,
                             template_app
                              (template_hole 2,
                               template_app
                                (template_hole 2,
                                 template_app
                                  (template_hole 2,
                                   template_hole
                                    1))))))))))))))))))))))))))))))))))),
    ("Derive_Examples.hash_code_complex_simps",
     "hash_code_complex ?h\<^sub>'\<^sub>a ?h\<^sub>'\<^sub>b (C1 ?x ?xa) =
      hashcode ?x * 2025277551 +
      (hash_code_sum
        (hash_code_prod (hash_code_ttree ?h\<^sub>'\<^sub>a) hashcode)
        (hash_code_list
          (hash_code_complex ?h\<^sub>'\<^sub>a ?h\<^sub>'\<^sub>b))
        ?xa *
       1922684640 +
       1820091729)",
     template_equation
      (template_app
        (template_app
          (template_app (template_hole 13, template_var 3), template_var 2),
         template_app
          (template_app (template_hole 12, template_var 1),
           template_var 0)),
       template_app
        (template_app
          (template_hole 11,
           template_app
            (template_app
              (template_hole 10,
               template_app (template_hole 9, template_var 1)),
             template_app
              (template_hole 8,
               template_app
                (template_hole 7,
                 template_app
                  (template_hole 7,
                   template_app
                    (template_hole 7,
                     template_app
                      (template_hole 7,
                       template_app
                        (template_hole 6,
                         template_app
                          (template_hole 7,
                           template_app
                            (template_hole 7,
                             template_app
                              (template_hole 6,
                               template_app
                                (template_hole 6,
                                 template_app
                                  (template_hole 6,
                                   template_app
                                    (template_hole 6,
                                     template_app
(template_hole 7,
 template_app
  (template_hole 6,
   template_app
    (template_hole 6,
     template_app
      (template_hole 7,
       template_app
        (template_hole 6,
         template_app
          (template_hole 7,
           template_app
            (template_hole 7,
             template_app
              (template_hole 7,
               template_app
                (template_hole 6,
                 template_app
                  (template_hole 7,
                   template_app
                    (template_hole 7,
                     template_app
                      (template_hole 6,
                       template_app
                        (template_hole 7,
                         template_app
                          (template_hole 6,
                           template_app
                            (template_hole 6,
                             template_app
                              (template_hole 6,
                               template_app
                                (template_hole 7,
                                 template_app
                                  (template_hole 7,
                                   template_app
                                    (template_hole 7,
                                     template_hole
5))))))))))))))))))))))))))))))))),
         template_app
          (template_app
            (template_hole 11,
             template_app
              (template_app
                (template_hole 10,
                 template_app
                  (template_app
                    (template_app
                      (template_hole 4,
                       template_app
                        (template_app
                          (template_hole 3,
                           template_app (template_hole 2, template_var 3)),
                         template_hole 1)),
                     template_app
                      (template_hole 0,
                       template_app
                        (template_app (template_hole 13, template_var 3),
                         template_var 2))),
                   template_var 0)),
               template_app
                (template_hole 8,
                 template_app
                  (template_hole 6,
                   template_app
                    (template_hole 6,
                     template_app
                      (template_hole 6,
                       template_app
                        (template_hole 6,
                         template_app
                          (template_hole 6,
                           template_app
                            (template_hole 7,
                             template_app
                              (template_hole 7,
                               template_app
                                (template_hole 7,
                                 template_app
                                  (template_hole 6,
                                   template_app
                                    (template_hole 7,
                                     template_app
(template_hole 7,
 template_app
  (template_hole 6,
   template_app
    (template_hole 7,
     template_app
      (template_hole 6,
       template_app
        (template_hole 7,
         template_app
          (template_hole 7,
           template_app
            (template_hole 7,
             template_app
              (template_hole 6,
               template_app
                (template_hole 6,
                 template_app
                  (template_hole 7,
                   template_app
                    (template_hole 7,
                     template_app
                      (template_hole 6,
                       template_app
                        (template_hole 6,
                         template_app
                          (template_hole 7,
                           template_app
                            (template_hole 6,
                             template_app
                              (template_hole 7,
                               template_app
                                (template_hole 6,
                                 template_app
                                  (template_hole 6,
                                   template_app
                                    (template_hole 7,
                                     template_app
(template_hole 7, template_hole 5))))))))))))))))))))))))))))))))),
           template_app
            (template_hole 8,
             template_app
              (template_hole 7,
               template_app
                (template_hole 6,
                 template_app
                  (template_hole 6,
                   template_app
                    (template_hole 6,
                     template_app
                      (template_hole 7,
                       template_app
                        (template_hole 6,
                         template_app
                          (template_hole 7,
                           template_app
                            (template_hole 6,
                             template_app
                              (template_hole 7,
                               template_app
                                (template_hole 6,
                                 template_app
                                  (template_hole 7,
                                   template_app
                                    (template_hole 6,
                                     template_app
(template_hole 6,
 template_app
  (template_hole 7,
   template_app
    (template_hole 7,
     template_app
      (template_hole 6,
       template_app
        (template_hole 6,
         template_app
          (template_hole 6,
           template_app
            (template_hole 7,
             template_app
              (template_hole 7,
               template_app
                (template_hole 7,
                 template_app
                  (template_hole 7,
                   template_app
                    (template_hole 7,
                     template_app
                      (template_hole 6,
                       template_app
                        (template_hole 6,
                         template_app
                          (template_hole 6,
                           template_app
                            (template_hole 7,
                             template_app
                              (template_hole 7,
                               template_app
                                (template_hole 6,
                                 template_app
                                  (template_hole 7,
                                   template_hole
                                    5))))))))))))))))))))))))))))))))))),
    ("Derive_Examples.hash_code_bintree_simps",
     "hash_code_bintree ?h\<^sub>'\<^sub>a (BNode ?x ?xa ?xb) =
      hash_code_bintree ?h\<^sub>'\<^sub>a ?x * 749863011 +
      (?h\<^sub>'\<^sub>a ?xa * 647270100 +
       (hash_code_bintree ?h\<^sub>'\<^sub>a ?xb * 544677189 + 442084278))",
     template_equation
      (template_app
        (template_app (template_hole 7, template_var 3),
         template_app
          (template_app
            (template_app (template_hole 6, template_var 2),
             template_var 1),
           template_var 0)),
       template_app
        (template_app
          (template_hole 5,
           template_app
            (template_app
              (template_hole 4,
               template_app
                (template_app (template_hole 7, template_var 3),
                 template_var 2)),
             template_app
              (template_hole 3,
               template_app
                (template_hole 2,
                 template_app
                  (template_hole 2,
                   template_app
                    (template_hole 1,
                     template_app
                      (template_hole 1,
                       template_app
                        (template_hole 1,
                         template_app
                          (template_hole 2,
                           template_app
                            (template_hole 2,
                             template_app
                              (template_hole 1,
                               template_app
                                (template_hole 1,
                                 template_app
                                  (template_hole 1,
                                   template_app
                                    (template_hole 1,
                                     template_app
(template_hole 1,
 template_app
  (template_hole 1,
   template_app
    (template_hole 1,
     template_app
      (template_hole 1,
       template_app
        (template_hole 1,
         template_app
          (template_hole 1,
           template_app
            (template_hole 2,
             template_app
              (template_hole 1,
               template_app
                (template_hole 1,
                 template_app
                  (template_hole 2,
                   template_app
                    (template_hole 2,
                     template_app
                      (template_hole 1,
                       template_app
                        (template_hole 2,
                         template_app
                          (template_hole 1,
                           template_app
                            (template_hole 1,
                             template_app
                              (template_hole 2,
                               template_app
                                (template_hole 2,
                                 template_app
                                  (template_hole 1,
                                   template_hole
                                    0)))))))))))))))))))))))))))))))),
         template_app
          (template_app
            (template_hole 5,
             template_app
              (template_app
                (template_hole 4,
                 template_app (template_var 3, template_var 1)),
               template_app
                (template_hole 3,
                 template_app
                  (template_hole 1,
                   template_app
                    (template_hole 1,
                     template_app
                      (template_hole 2,
                       template_app
                        (template_hole 1,
                         template_app
                          (template_hole 2,
                           template_app
                            (template_hole 1,
                             template_app
                              (template_hole 2,
                               template_app
                                (template_hole 2,
                                 template_app
                                  (template_hole 1,
                                   template_app
                                    (template_hole 2,
                                     template_app
(template_hole 2,
 template_app
  (template_hole 2,
   template_app
    (template_hole 1,
     template_app
      (template_hole 1,
       template_app
        (template_hole 1,
         template_app
          (template_hole 2,
           template_app
            (template_hole 1,
             template_app
              (template_hole 1,
               template_app
                (template_hole 2,
                 template_app
                  (template_hole 1,
                   template_app
                    (template_hole 2,
                     template_app
                      (template_hole 1,
                       template_app
                        (template_hole 1,
                         template_app
                          (template_hole 2,
                           template_app
                            (template_hole 1,
                             template_app
                              (template_hole 2,
                               template_app
                                (template_hole 2,
                                 template_app
                                  (template_hole 1,
                                   template_app
                                    (template_hole 1,
                                     template_hole
0)))))))))))))))))))))))))))))))),
           template_app
            (template_app
              (template_hole 5,
               template_app
                (template_app
                  (template_hole 4,
                   template_app
                    (template_app (template_hole 7, template_var 3),
                     template_var 0)),
                 template_app
                  (template_hole 3,
                   template_app
                    (template_hole 2,
                     template_app
                      (template_hole 1,
                       template_app
                        (template_hole 2,
                         template_app
                          (template_hole 1,
                           template_app
                            (template_hole 1,
                             template_app
                              (template_hole 1,
                               template_app
                                (template_hole 2,
                                 template_app
                                  (template_hole 1,
                                   template_app
                                    (template_hole 2,
                                     template_app
(template_hole 1,
 template_app
  (template_hole 2,
   template_app
    (template_hole 2,
     template_app
      (template_hole 2,
       template_app
        (template_hole 1,
         template_app
          (template_hole 1,
           template_app
            (template_hole 1,
             template_app
              (template_hole 2,
               template_app
                (template_hole 2,
                 template_app
                  (template_hole 2,
                   template_app
                    (template_hole 1,
                     template_app
                      (template_hole 2,
                       template_app
                        (template_hole 2,
                         template_app
                          (template_hole 2,
                           template_app
                            (template_hole 1,
                             template_app
                              (template_hole 1,
                               template_app
                                (template_hole 1,
                                 template_app
                                  (template_hole 1,
                                   template_app
                                    (template_hole 1,
                                     template_app
(template_hole 1, template_hole 0)))))))))))))))))))))))))))))))),
             template_app
              (template_hole 3,
               template_app
                (template_hole 1,
                 template_app
                  (template_hole 2,
                   template_app
                    (template_hole 2,
                     template_app
                      (template_hole 1,
                       template_app
                        (template_hole 2,
                         template_app
                          (template_hole 2,
                           template_app
                            (template_hole 1,
                             template_app
                              (template_hole 2,
                               template_app
                                (template_hole 2,
                                 template_app
                                  (template_hole 2,
                                   template_app
                                    (template_hole 1,
                                     template_app
(template_hole 2,
 template_app
  (template_hole 1,
   template_app
    (template_hole 2,
     template_app
      (template_hole 1,
       template_app
        (template_hole 2,
         template_app
          (template_hole 2,
           template_app
            (template_hole 1,
             template_app
              (template_hole 1,
               template_app
                (template_hole 2,
                 template_app
                  (template_hole 2,
                   template_app
                    (template_hole 1,
                     template_app
                      (template_hole 2,
                       template_app
                        (template_hole 1,
                         template_app
                          (template_hole 1,
                           template_app
                            (template_hole 2,
                             template_app
                              (template_hole 1,
                               template_app
                                (template_hole 2,
                                 template_hole
                                  0)))))))))))))))))))))))))))))))))),
    ("Derive_Examples.hash_code_complex_simps",
     "hash_code_complex ?h\<^sub>'\<^sub>a ?h\<^sub>'\<^sub>b
       (C2 ?x ?xa ?xb ?xc) =
      hash_code_tree
       (hash_code_tree
         (hash_code_list
           (hash_code_complex ?h\<^sub>'\<^sub>a ?h\<^sub>'\<^sub>b)))
       ?x *
      1214554322 +
      (?h\<^sub>'\<^sub>b ?xa * 1111961411 +
       (hash_code_complex ?h\<^sub>'\<^sub>a ?h\<^sub>'\<^sub>b ?xb *
        1009368500 +
        (hash_code_list
          (hash_code_ttree
            (hash_code_complex2 ?h\<^sub>'\<^sub>a ?h\<^sub>'\<^sub>b))
          ?xc *
         906775589 +
         804182678)))",
     template_equation
      (template_app
        (template_app
          (template_app (template_hole 13, template_var 5), template_var 4),
         template_app
          (template_app
            (template_app
              (template_app (template_hole 12, template_var 3),
               template_var 2),
             template_var 1),
           template_var 0)),
       template_app
        (template_app
          (template_hole 11,
           template_app
            (template_app
              (template_hole 10,
               template_app
                (template_app
                  (template_hole 9,
                   template_app
                    (template_hole 8,
                     template_app
                      (template_hole 7,
                       template_app
                        (template_app (template_hole 13, template_var 5),
                         template_var 4)))),
                 template_var 3)),
             template_app
              (template_hole 6,
               template_app
                (template_hole 5,
                 template_app
                  (template_hole 4,
                   template_app
                    (template_hole 5,
                     template_app
                      (template_hole 5,
                       template_app
                        (template_hole 4,
                         template_app
                          (template_hole 5,
                           template_app
                            (template_hole 4,
                             template_app
                              (template_hole 4,
                               template_app
                                (template_hole 5,
                                 template_app
                                  (template_hole 5,
                                   template_app
                                    (template_hole 5,
                                     template_app
(template_hole 5,
 template_app
  (template_hole 5,
   template_app
    (template_hole 4,
     template_app
      (template_hole 5,
       template_app
        (template_hole 4,
         template_app
          (template_hole 5,
           template_app
            (template_hole 5,
             template_app
              (template_hole 4,
               template_app
                (template_hole 5,
                 template_app
                  (template_hole 5,
                   template_app
                    (template_hole 4,
                     template_app
                      (template_hole 4,
                       template_app
                        (template_hole 5,
                         template_app
                          (template_hole 5,
                           template_app
                            (template_hole 5,
                             template_app
                              (template_hole 5,
                               template_app
                                (template_hole 4,
                                 template_app
                                  (template_hole 5,
                                   template_app
                                    (template_hole 5,
                                     template_hole
3))))))))))))))))))))))))))))))))),
         template_app
          (template_app
            (template_hole 11,
             template_app
              (template_app
                (template_hole 10,
                 template_app (template_var 4, template_var 2)),
               template_app
                (template_hole 6,
                 template_app
                  (template_hole 4,
                   template_app
                    (template_hole 4,
                     template_app
                      (template_hole 5,
                       template_app
                        (template_hole 5,
                         template_app
                          (template_hole 5,
                           template_app
                            (template_hole 5,
                             template_app
                              (template_hole 4,
                               template_app
                                (template_hole 5,
                                 template_app
                                  (template_hole 4,
                                   template_app
                                    (template_hole 4,
                                     template_app
(template_hole 4,
 template_app
  (template_hole 4,
   template_app
    (template_hole 5,
     template_app
      (template_hole 4,
       template_app
        (template_hole 5,
         template_app
          (template_hole 5,
           template_app
            (template_hole 4,
             template_app
              (template_hole 4,
               template_app
                (template_hole 4,
                 template_app
                  (template_hole 5,
                   template_app
                    (template_hole 5,
                     template_app
                      (template_hole 5,
                       template_app
                        (template_hole 4,
                         template_app
                          (template_hole 5,
                           template_app
                            (template_hole 5,
                             template_app
                              (template_hole 4,
                               template_app
                                (template_hole 5,
                                 template_app
                                  (template_hole 5,
                                   template_app
                                    (template_hole 5,
                                     template_app
(template_hole 5, template_hole 3))))))))))))))))))))))))))))))))),
           template_app
            (template_app
              (template_hole 11,
               template_app
                (template_app
                  (template_hole 10,
                   template_app
                    (template_app
                      (template_app (template_hole 13, template_var 5),
                       template_var 4),
                     template_var 1)),
                 template_app
                  (template_hole 6,
                   template_app
                    (template_hole 5,
                     template_app
                      (template_hole 5,
                       template_app
                        (template_hole 4,
                         template_app
                          (template_hole 5,
                           template_app
                            (template_hole 4,
                             template_app
                              (template_hole 4,
                               template_app
                                (template_hole 5,
                                 template_app
                                  (template_hole 4,
                                   template_app
                                    (template_hole 4,
                                     template_app
(template_hole 5,
 template_app
  (template_hole 4,
   template_app
    (template_hole 4,
     template_app
      (template_hole 4,
       template_app
        (template_hole 4,
         template_app
          (template_hole 5,
           template_app
            (template_hole 4,
             template_app
              (template_hole 4,
               template_app
                (template_hole 5,
                 template_app
                  (template_hole 5,
                   template_app
                    (template_hole 4,
                     template_app
                      (template_hole 5,
                       template_app
                        (template_hole 4,
                         template_app
                          (template_hole 5,
                           template_app
                            (template_hole 5,
                             template_app
                              (template_hole 5,
                               template_app
                                (template_hole 5,
                                 template_app
                                  (template_hole 4,
                                   template_app
                                    (template_hole 4,
                                     template_app
(template_hole 4, template_hole 3)))))))))))))))))))))))))))))))),
             template_app
              (template_app
                (template_hole 11,
                 template_app
                  (template_app
                    (template_hole 10,
                     template_app
                      (template_app
                        (template_hole 2,
                         template_app
                          (template_hole 1,
                           template_app
                            (template_app (template_hole 0, template_var 5),
                             template_var 4))),
                       template_var 0)),
                   template_app
                    (template_hole 6,
                     template_app
                      (template_hole 4,
                       template_app
                        (template_hole 5,
                         template_app
                          (template_hole 4,
                           template_app
                            (template_hole 5,
                             template_app
                              (template_hole 5,
                               template_app
                                (template_hole 4,
                                 template_app
                                  (template_hole 5,
                                   template_app
                                    (template_hole 5,
                                     template_app
(template_hole 5,
 template_app
  (template_hole 5,
   template_app
    (template_hole 4,
     template_app
      (template_hole 4,
       template_app
        (template_hole 5,
         template_app
          (template_hole 5,
           template_app
            (template_hole 4,
             template_app
              (template_hole 5,
               template_app
                (template_hole 5,
                 template_app
                  (template_hole 5,
                   template_app
                    (template_hole 4,
                     template_app
                      (template_hole 4,
                       template_app
                        (template_hole 5,
                         template_app
                          (template_hole 5,
                           template_app
                            (template_hole 5,
                             template_app
                              (template_hole 5,
                               template_app
                                (template_hole 5,
                                 template_app
                                  (template_hole 4,
                                   template_app
                                    (template_hole 4,
                                     template_app
(template_hole 5,
 template_app
  (template_hole 4, template_hole 3)))))))))))))))))))))))))))))))),
               template_app
                (template_hole 6,
                 template_app
                  (template_hole 5,
                   template_app
                    (template_hole 4,
                     template_app
                      (template_hole 4,
                       template_app
                        (template_hole 5,
                         template_app
                          (template_hole 4,
                           template_app
                            (template_hole 5,
                             template_app
                              (template_hole 5,
                               template_app
                                (template_hole 4,
                                 template_app
                                  (template_hole 5,
                                   template_app
                                    (template_hole 4,
                                     template_app
(template_hole 5,
 template_app
  (template_hole 4,
   template_app
    (template_hole 4,
     template_app
      (template_hole 5,
       template_app
        (template_hole 4,
         template_app
          (template_hole 4,
           template_app
            (template_hole 5,
             template_app
              (template_hole 4,
               template_app
                (template_hole 4,
                 template_app
                  (template_hole 4,
                   template_app
                    (template_hole 5,
                     template_app
                      (template_hole 4,
                       template_app
                        (template_hole 4,
                         template_app
                          (template_hole 4,
                           template_app
                            (template_hole 4,
                             template_app
                              (template_hole 4,
                               template_app
                                (template_hole 4,
                                 template_app
                                  (template_hole 4,
                                   template_app
                                    (template_hole 5,
                                     template_hole
3))))))))))))))))))))))))))))))))))))]:
   (string * thm * template) list
### theory "Draft.Derive_ExamplesTemplates"
### 0.820s elapsed time, 1.019s cpu time, 0.097s GC time
val it = (): unit
