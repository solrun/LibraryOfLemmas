Loading theory "HOL-Library.Cancellation" (required by "Draft.Unary_PCFMoreTemplates" via "Draft.Unary_PCF" via "Draft.Hereditary_Multiset" via "Draft.Multiset_More" via "HOL-Library.Multiset_Order" via "HOL-Library.Multiset")
Loading theory "HOL-Library.Infinite_Set" (required by "Draft.Unary_PCFMoreTemplates" via "Draft.Unary_PCF" via "HOL-Library.Countable_Set_Type" via "HOL-Library.Countable_Set")
Loading theory "HOL-Library.Nat_Bijection" (required by "Draft.Unary_PCFMoreTemplates" via "Draft.ExtrEqs" via "HOL-Library.Stream")
Loading theory "HOL-Library.Function_Algebras" (required by "Draft.Unary_PCFMoreTemplates" via "Draft.ExtrEqs" via "HOL-Library.BigO")
instantiation
  fun :: (type, plus) plus
  plus_fun == plus :: ('a => 'b) => ('a => 'b) => 'a => 'b
instantiation
  fun :: (type, zero) zero
  zero_fun == zero_class.zero :: 'a => 'b
instantiation
  fun :: (type, times) times
  times_fun == times :: ('a => 'b) => ('a => 'b) => 'a => 'b
instantiation
  fun :: (type, one) one
  one_fun == one_class.one :: 'a => 'b
Found termination order: "(%p. size (snd p)) <*mlex*> {}"
### theory "HOL-Library.Function_Algebras"
### 0.123s elapsed time, 0.515s cpu time, 0.045s GC time
Loading theory "HOL-Library.Old_Datatype" (required by "Draft.Unary_PCFMoreTemplates" via "Draft.Unary_PCF" via "HOL-Library.FSet" via "HOL-Library.Countable")
consts
  enumerate :: "'a set => nat => 'a"
Found termination order: "size_list size <*mlex*> {}"
### theory "HOL-Library.Infinite_Set"
### 0.293s elapsed time, 1.179s cpu time, 0.131s GC time
Loading theory "HOL-Library.Set_Algebras" (required by "Draft.Unary_PCFMoreTemplates" via "Draft.ExtrEqs" via "HOL-Library.BigO")
### theory "HOL-Library.Nat_Bijection"
### 0.321s elapsed time, 1.296s cpu time, 0.131s GC time
Loading theory "HOL-Library.Stream" (required by "Draft.Unary_PCFMoreTemplates" via "Draft.ExtrEqs")
instantiation
  set :: (plus) plus
  plus_set == plus :: 'a set => 'a set => 'a set
signature CANCEL = sig val proc: Proof.context -> cterm -> thm option end
functor Cancel_Fun (Data: CANCEL_NUMERALS_DATA): CANCEL
instantiation
  set :: (times) times
  times_set == times :: 'a set => 'a set => 'a set
instantiation
  set :: (zero) zero
  zero_set == zero_class.zero :: 'a set
instantiation
  set :: (one) one
  one_set == one_class.one :: 'a set
signature CANCEL_DATA =
  sig
    val dest_coeff: term -> int * term
    val dest_sum: term -> term list
    val find_first_coeff: term -> term list -> int * term list
    val mk_coeff: int * term -> term
    val mk_sum: typ -> term list -> term
    val norm_ss1: simpset
    val norm_ss2: simpset
    val norm_tac: Proof.context -> tactic
    val numeral_simp_tac: Proof.context -> tactic
    val prove_conv:
       tactic list -> Proof.context -> thm list -> term * term -> thm option
    val simplify_meta_eq: Proof.context -> thm -> thm
    val trans_tac: Proof.context -> thm option -> tactic
  end
structure Cancel_Data: CANCEL_DATA
signature CANCEL_SIMPROCS =
  sig
    val diff_cancel: Proof.context -> cterm -> thm option
    val eq_cancel: Proof.context -> cterm -> thm option
    val less_cancel: Proof.context -> cterm -> thm option
    val less_eq_cancel: Proof.context -> cterm -> thm option
  end
structure Cancel_Simprocs: CANCEL_SIMPROCS
### theory "HOL-Library.Cancellation"
### 0.451s elapsed time, 1.803s cpu time, 0.214s GC time
Loading theory "HOL-Library.Multiset" (required by "Draft.Unary_PCFMoreTemplates" via "Draft.Unary_PCF" via "Draft.Hereditary_Multiset" via "Draft.Multiset_More" via "HOL-Library.Multiset_Order")
### theory "HOL-Library.Set_Algebras"
### 0.204s elapsed time, 0.803s cpu time, 0.083s GC time
Loading theory "HOL-Library.Sublist" (required by "Draft.Unary_PCFMoreTemplates" via "Draft.Unary_PCF" via "Draft.Hereditary_Multiset" via "Draft.Multiset_More")
signature OLD_DATATYPE =
  sig
    val check_specs: spec list -> theory -> spec list * Proof.context
    type config = {quiet: bool, strict: bool}
    val default_config: config
    type descr =
       (int * (string * dtyp list * (string * dtyp list) list)) list
    val distinct_lemma: thm
    datatype dtyp
    = DtRec of int | DtTFree of string * sort | DtType of string * dtyp list
    type info =
       {case_cong: thm,
        case_cong_weak: thm,
        case_name: string,
        case_rewrites: thm list,
        descr: descr,
        distinct: thm list,
        exhaust: thm,
        index: int,
        induct: thm,
        inducts: thm list,
        inject: thm list,
        nchotomy: thm,
        rec_names: string list,
        rec_rewrites: thm list, split: thm, split_asm: thm}
    val read_specs: spec_cmd list -> theory -> spec list * Proof.context
    type spec =
       (binding * (string * sort) list * mixfix) *
       (binding * typ list * mixfix) list
    type spec_cmd =
       (binding * (string * string option) list * mixfix) *
       (binding * string list * mixfix) list
  end
structure Old_Datatype: OLD_DATATYPE
### theory "HOL-Library.Old_Datatype"
### 0.407s elapsed time, 1.593s cpu time, 0.169s GC time
Loading theory "HOL-Library.Tree" (required by "Draft.Unary_PCFMoreTemplates" via "Draft.ExtrEqs" via "Draft.Templates")
instantiation
  multiset :: (type) cancel_comm_monoid_add
  zero_multiset == zero_class.zero :: 'a multiset
  minus_multiset == minus :: 'a multiset => 'a multiset => 'a multiset
  plus_multiset == plus :: 'a multiset => 'a multiset => 'a multiset
consts
  shift :: "'a list => 'a stream => 'a stream"
Proofs for coinductive predicate(s) "streamsp"
  Proving monotonicity ...
consts
  prefixes :: "'a list => 'a list list"
consts
  snth :: "'a stream => nat => 'a"
consts
  stake :: "nat => 'a stream => 'a list"
consts
  sdrop :: "nat => 'a stream => 'a stream"
consts
  sfilter :: "('a => bool) => 'a stream => 'a stream"
Found termination order: "(%p. length (snd p)) <*mlex*> {}"
consts
  cycle :: "'a list => 'a stream"
consts
  siterate :: "('a => 'a) => 'a => 'a stream"
consts
  flat :: "'a list stream => 'a stream"
consts
  left :: "'a tree => 'a tree"
consts
  right :: "'a tree => 'a tree"
consts
  sinterleave :: "'a stream => 'a stream => 'a stream"
consts
  szip :: "'a stream => 'b stream => ('a * 'b) stream"
### Partially applied constant "Multiset.inter_mset" on left hand side of equation, in theorem:
### semilattice_inf.Inf_fin (\<inter>#) (set (?x # ?xs)) ==
### fold (\<inter>#) ?xs ?x
Found termination order: "size <*mlex*> {}"
consts
  smap2 :: "('a => 'b => 'c) => 'a stream => 'b stream => 'c stream"
### theory "HOL-Library.Stream"
### 1.107s elapsed time, 4.212s cpu time, 0.953s GC time
Loading theory "HOL-Library.Countable" (required by "Draft.Unary_PCFMoreTemplates" via "Draft.Unary_PCF" via "HOL-Library.FSet")
### Partially applied constant "Multiset.union_mset" on left hand side of equation, in theorem:
### semilattice_sup.Sup_fin (\<union>#) (set (?x # ?xs)) ==
### fold (\<union>#) ?xs ?x
Found termination order: "size <*mlex*> {}"
consts
  suffixes :: "'a list => 'a list list"
Found termination order: "size <*mlex*> {}"
Proofs for inductive predicate(s) "list_emb"
  Proving monotonicity ...
class height = type +
  fixes height :: "'a => nat"
instantiation
  tree :: (type) height
  height_tree == height :: 'a tree => nat
Found termination order: "size <*mlex*> {}"
signature MULTISET_SIMPROCS =
  sig
    val subset_cancel_msets: Proof.context -> cterm -> thm option
    val subseteq_cancel_msets: Proof.context -> cterm -> thm option
  end
structure Multiset_Simprocs: MULTISET_SIMPROCS
Found termination order: "size <*mlex*> {}"
instantiation
  multiset :: (type) Inf
  Inf_multiset == Inf :: 'a multiset set => 'a multiset
instantiation
  multiset :: (type) Sup
  Sup_multiset == Sup :: 'a multiset set => 'a multiset
Found termination order: "size <*mlex*> {}"
Found termination order: "size <*mlex*> {}"
### Additional type variable(s) in locale specification "countable": 'a
instantiation
  multiset :: (type) size
  size_multiset == size :: 'a multiset => nat
class countable = type +
  assumes "ex_inj": "EX to_nat. inj to_nat"
Found termination order: "size <*mlex*> {}"
locale comp_fun_commute
  fixes f :: "'a => 'b => 'b"
  assumes "comp_fun_commute f"
Found termination order: "size <*mlex*> {}"
Found termination order: "size <*mlex*> {}"
consts
  sublists :: "'a list => 'a list list"
consts
  mset :: "'a list => 'a multiset"
Proofs for inductive predicate(s) "finite_item"
  Proving monotonicity ...
Found termination order: "(%p. size (fst p)) <*mlex*> {}"
### theory "HOL-Library.Sublist"
### 1.697s elapsed time, 6.531s cpu time, 1.324s GC time
Loading theory "HOL-Library.BigO" (required by "Draft.Unary_PCFMoreTemplates" via "Draft.ExtrEqs")
Found termination order: "size <*mlex*> {}"
val old_countable_datatype_tac = fn: Proof.context -> int -> tactic
class linorder = order +
  assumes "linear": "!!x y. x <= y | y <= x"
Found termination order: "(%p. size (snd p)) <*mlex*> {}"
### ML warning (line 93 of "~~/src/HOL/Tools/BNF/bnf_lfp_countable.ML"):
### Pattern is not exhaustive.
### ML warning (line 139 of "~~/src/HOL/Tools/BNF/bnf_lfp_countable.ML"):
### Pattern is not exhaustive.
### ML warning (line 143 of "~~/src/HOL/Tools/BNF/bnf_lfp_countable.ML"):
### Matches are not exhaustive.
### ML warning (line 145 of "~~/src/HOL/Tools/BNF/bnf_lfp_countable.ML"):
### Matches are not exhaustive.
### ML warning (line 156 of "~~/src/HOL/Tools/BNF/bnf_lfp_countable.ML"):
### Pattern is not exhaustive.
signature BNF_LFP_COUNTABLE =
  sig
    val countable_datatype_tac: Proof.context -> tactic
    val derive_encode_injectives_thms:
       Proof.context -> string list -> thm list
  end
structure BNF_LFP_Countable: BNF_LFP_COUNTABLE
val countable_datatype_tac = fn: Proof.context -> thm -> thm Seq.seq
val countable_tac = fn: Proof.context -> int -> tactic
locale comm_monoid_mset
  fixes f :: "'a => 'a => 'a"  (infixl \<open>\<^bold>*\<close> 70)
    and z :: "'a"  (\<open>\<^bold>1\<close>)
  assumes "comm_monoid_mset (\<^bold>*) \<^bold>1"
class comm_monoid_add = ab_semigroup_add + monoid_add +
  assumes "add_0": "!!a. (0::'a) + a = a"
class comm_monoid_add = ab_semigroup_add + monoid_add +
  assumes "add_0": "!!a. (0::'a) + a = a"
Found termination order: "size <*mlex*> {}"
class canonically_ordered_monoid_add = ordered_comm_monoid_add +
  assumes "le_iff_add": "!!a b. (a <= b) = (EX c. b = a + c)"
### theory "HOL-Library.Countable"
### 1.212s elapsed time, 4.772s cpu time, 0.563s GC time
Loading theory "HOL-Library.Countable_Set" (required by "Draft.Unary_PCFMoreTemplates" via "Draft.Unary_PCF" via "HOL-Library.Countable_Set_Type")
### theory "HOL-Library.Tree"
### 2.308s elapsed time, 8.921s cpu time, 1.637s GC time
Loading theory "Draft.Templates" (required by "Draft.Unary_PCFMoreTemplates" via "Draft.ExtrEqs")
datatype template_term
=
     t_empty
   | template_app of template_term * template_term
   | template_hole of int
   | template_var of int
datatype sign
= equals | greater_equals | greater_than | less_equals | less_than
datatype template
=
     template_bimplication of template * template
   | template_dunno
   | template_equation of template_term * template_term
   | template_implication of template list * template
   | template_inequation of sign * template_term * template_term
   | template_negation of template
   | template_predicate of template_term
constructor t_empty: template_term
constructor template_app: template_term * template_term -> template_term
constructor template_hole: int -> template_term
constructor template_var: int -> template_term
constructor equals: sign
constructor greater_equals: sign
constructor greater_than: sign
constructor less_equals: sign
constructor less_than: sign
constructor template_bimplication: template * template -> template
constructor template_dunno: template
constructor template_equation: template_term * template_term -> template
constructor template_implication: template list * template -> template
constructor template_inequation:
   sign * template_term * template_term -> template
constructor template_negation: template -> template
constructor template_predicate: template_term -> template
val vfs = fn: term -> (indexname * typ) list * (string * typ) list
val indexOf = fn: ''a list -> ''a -> int -> int
val has_eq = fn: term -> bool
val term2template = fn:
   (indexname * typ) list -> (string * typ) list -> term -> template_term
val lemma2predicate = fn: term -> term -> template
val makeTemplatewithContext = fn: term -> term -> template
val lemma2template = fn: term -> template
val thm2template = fn: thm -> template
val tterm2string = fn: template_term -> string
val template2string = fn: template -> string
val t = "height ?t <= size ?t": thm
val th =
   Const ("HOL.Trueprop", "bool => prop") $
     (Const ("Orderings.ord_class.less_eq", "nat => nat => bool") $
       (Const ("Tree.height_class.height", "?'a tree => nat") $
         Var (("t", 0), "?'a tree")) $
       (Const ("Nat.size_class.size", "?'a tree => nat") $
         Var (("t", 0), "?'a tree"))):
   term
### theory "Draft.Templates"
### 0.064s elapsed time, 0.256s cpu time, 0.000s GC time
Loading theory "HOL-Library.FSet" (required by "Draft.Unary_PCFMoreTemplates" via "Draft.Unary_PCF")
class comm_monoid_mult = ab_semigroup_mult + monoid_mult + dvd +
  assumes "mult_1": "!!a. (1::'a) * a = a"
locale comm_monoid_set
  fixes f :: "'a => 'a => 'a"  (infixl \<open>\<^bold>*\<close> 70)
    and z :: "'a"  (\<open>\<^bold>1\<close>)
  assumes "comm_monoid_set (\<^bold>*) \<^bold>1"
instantiation
  fset :: (finite) finite
instantiation
  fset :: (type) {minus,bounded_lattice_bot,distrib_lattice}
  inf_fset == inf :: 'a fset => 'a fset => 'a fset
  bot_fset == bot :: 'a fset
  sup_fset == sup :: 'a fset => 'a fset => 'a fset
  less_eq_fset == less_eq :: 'a fset => 'a fset => bool
  less_fset == less :: 'a fset => 'a fset => bool
  minus_fset == minus :: 'a fset => 'a fset => 'a fset
### theory "HOL-Library.BigO"
### 0.871s elapsed time, 3.410s cpu time, 0.459s GC time
Loading theory "Draft.ExtrEqs" (required by "Draft.Unary_PCFMoreTemplates")
instantiation
  fset :: (equal) equal
  equal_fset == equal_class.equal :: 'a fset => 'a fset => bool
instantiation
  fset :: (type) conditionally_complete_lattice
  Inf_fset == Inf :: 'a fset set => 'a fset
  Sup_fset == Sup :: 'a fset set => 'a fset
### theory "HOL-Library.Countable_Set"
### 0.501s elapsed time, 1.956s cpu time, 0.281s GC time
Loading theory "HOL-Library.Countable_Set_Type" (required by "Draft.Unary_PCFMoreTemplates" via "Draft.Unary_PCF")
instantiation
  fset :: (finite) complete_lattice
  top_fset == top :: 'a fset
instantiation
  fset :: (finite) complete_boolean_algebra
  uminus_fset == uminus :: 'a fset => 'a fset
instantiation
  cset :: (type) {minus,bounded_lattice_bot,distrib_lattice}
  inf_cset == inf :: 'a cset => 'a cset => 'a cset
  bot_cset == bot :: 'a cset
  sup_cset == sup :: 'a cset => 'a cset => 'a cset
  less_eq_cset == less_eq :: 'a cset => 'a cset => bool
  less_cset == less :: 'a cset => 'a cset => bool
  minus_cset == minus :: 'a cset => 'a cset => 'a cset
class linorder = order +
  assumes "linear": "!!x y. x <= y | y <= x"
instantiation
  multiset :: (preorder) order
  less_eq_multiset == less_eq :: 'a multiset => 'a multiset => bool
  less_multiset == less :: 'a multiset => 'a multiset => bool
val eqpattern =
   Pattern
    (
       Const ("HOL.Trueprop", "bool => prop") $
         (Const ("HOL.eq", "?'a => ?'a => bool") $
           Var (("_dummy_", 1), "?'a") $ Var (("_dummy_", 2), "?'a"))
       ):
   term Find_Theorems.criterion
val badeqpattern = Pattern (Const ("Pure.eq", "?'a => ?'a => prop")):
   term Find_Theorems.criterion
val undefpattern =
   Pattern
    (
       Const ("HOL.Trueprop", "bool => prop") $
         (Const ("HOL.eq", "?'a => ?'a => bool") $
           Var (("_dummy_", 1), "?'a") $ Const ("HOL.undefined", "?'a"))
       ):
   term Find_Theorems.criterion
val thmpattern =
   Pattern
    (Const ("HOL.Trueprop", "bool => prop") $ Var (("_dummy_", 1), "bool")):
   term Find_Theorems.criterion
val badnames =
   ["*nitpick*", "*Nitpick*", "*full_exhaustive*", "*_def*", "Enum.finite*",
    "*Quickcheck*", "ATP*", "*Nunchaku*", "*Code*", "*BNF*", "*SMT*",
    "*.*.*"]:
   string list
val unwanted_names =
   [(false, Name "*nitpick*"), (false, Name "*Nitpick*"),
    (false, Name "*full_exhaustive*"), (false, Name "*_def*"),
    (false, Name "Enum.finite*"), (false, Name "*Quickcheck*"),
    (false, Name "ATP*"), (false, Name "*Nunchaku*"),
    (false, Name "*Code*"), (false, Name "*BNF*"), (false, Name "*SMT*"),
    (false, Name "*.*.*")]:
   (bool * term Find_Theorems.criterion) list
val has_vars = fn: term -> bool
val get_all_eqs = fn: string -> Proof.context -> (string * thm) list
val get_all_thms = fn: string -> Proof.context -> (string * thm) list
val get_noneq_thms = fn: string -> Proof.context -> (string * thm) list
val template_eqs = fn:
   string -> Proof.context -> (string * thm * template) list
val template_thms = fn:
   string -> Proof.context -> (string * thm * template) list
### theory "Draft.ExtrEqs"
### 0.697s elapsed time, 2.740s cpu time, 0.264s GC time
Loading theory "List-Index.List_Index" (required by "Draft.Unary_PCFMoreTemplates" via "Draft.Unary_PCF")
instantiation
  multiset :: (preorder) ordered_ab_semigroup_add
consts
  find_index :: "('a => bool) => 'a list => nat"
Proofs for inductive predicate(s) "pw_leq"
  Proving monotonicity ...
consts
  map_index' :: "nat => (nat => 'a => 'b) => 'a list => 'b list"
consts
  insert_nth :: "nat => 'a => 'a list => 'a list"
Found termination order: "(%p. length (fst p)) <*mlex*> {}"
instantiation
  multiset :: (equal) equal
  equal_multiset == equal_class.equal :: 'a multiset => 'a multiset => bool
instantiation
  multiset :: (random) random
  random_multiset == random_class.random ::
    natural
    => natural * natural
       => ('a multiset * (unit => term)) * natural * natural
instantiation
  multiset :: (full_exhaustive) full_exhaustive
  full_exhaustive_multiset == full_exhaustive_class.full_exhaustive ::
    ('a multiset * (unit => term) => (bool * term list) option)
    => natural => (bool * term list) option
Found termination order: "(%p. length (snd p)) <*mlex*> {}"
Proofs for inductive predicate(s) "pred_mset"
  Proving monotonicity ...
### theory "List-Index.List_Index"
### 0.402s elapsed time, 1.576s cpu time, 0.166s GC time
Proofs for inductive predicate(s) "rel_mset'"
  Proving monotonicity ...
### theory "HOL-Library.Multiset"
### 3.895s elapsed time, 15.000s cpu time, 2.345s GC time
Loading theory "HOL-Library.Multiset_Order" (required by "Draft.Unary_PCFMoreTemplates" via "Draft.Unary_PCF" via "Draft.Hereditary_Multiset" via "Draft.Multiset_More")
class preorder = ord +
  assumes "less_le_not_le": "!!x y. (x < y) = (x <= y & ~ y <= x)"
    and "order_refl": "!!x. x <= x"
    and "order_trans": "!!x y z. [| x <= y; y <= z |] ==> x <= z"
instantiation
  multiset :: (preorder) ordered_ab_semigroup_monoid_add_imp_le
instantiation
  multiset :: (wellorder) wellorder
instantiation
  multiset :: (preorder) order_bot
  bot_multiset == bot :: 'a multiset
instantiation
  multiset :: (linorder) distrib_lattice
  inf_multiset == inf :: 'a multiset => 'a multiset => 'a multiset
  sup_multiset == sup :: 'a multiset => 'a multiset => 'a multiset
locale comp_fun_commute
  fixes f :: "'a => 'b => 'b"
  assumes "comp_fun_commute f"
### theory "HOL-Library.Multiset_Order"
### 0.250s elapsed time, 0.837s cpu time, 0.145s GC time
Loading theory "Draft.Nested_Multiset" (required by "Draft.Unary_PCFMoreTemplates" via "Draft.Unary_PCF" via "Draft.Hereditary_Multiset")
Loading theory "Draft.Multiset_More" (required by "Draft.Unary_PCFMoreTemplates" via "Draft.Unary_PCF" via "Draft.Hereditary_Multiset")
locale comp_fun_idem
  fixes f :: "'a => 'b => 'b"
  assumes "comp_fun_idem f"
locale comm_monoid_fset
  fixes f :: "'a => 'a => 'a"  (infixl \<open>\<^bold>*\<close> 70)
    and z :: "'a"  (\<open>\<^bold>1\<close>)
  assumes "comm_monoid_fset (\<^bold>*) \<^bold>1"
class comm_monoid_add = ab_semigroup_add + monoid_add +
  assumes "add_0": "!!a. (0::'a) + a = a"
### Cannot skip proof of schematic goal statement
### theory "HOL-Library.Countable_Set_Type"
### 1.544s elapsed time, 5.782s cpu time, 0.690s GC time
locale semilattice_fset
  fixes f :: "'a => 'a => 'a"  (infixl \<open>\<^bold>*\<close> 70)
  assumes "semilattice_fset (\<^bold>*)"
locale semilattice_order_fset
  fixes f :: "'a => 'a => 'a"  (infixl \<open>\<^bold>*\<close> 70)
    and
    less_eq :: "'a => 'a => bool"  (infix \<open>\<^bold>\<le>\<close> 50)
    and less :: "'a => 'a => bool"  (infix \<open>\<^bold><\<close> 50)
  assumes "semilattice_order_fset (\<^bold>*) (\<^bold>\<le>) (\<^bold><)"
class linorder = order +
  assumes "linear": "!!x y. x <= y | y <= x"
class linorder = order +
  assumes "linear": "!!x y. x <= y | y <= x"
Proofs for inductive predicate(s) "no_elem"
  Proving monotonicity ...
Proofs for inductive predicate(s) "sub_nmsetp"
  Proving monotonicity ...
consts
  depth_nmset :: "'a nmultiset => nat"
instantiation
  nmultiset :: (preorder) preorder
  less_eq_nmultiset == less_eq :: 'a nmultiset => 'a nmultiset => bool
  less_nmultiset == less :: 'a nmultiset => 'a nmultiset => bool
instantiation
  nmultiset :: (order) order
instantiation
  nmultiset :: (linorder) linorder
instantiation
  fset :: (type) size
  size_fset == size :: 'a fset => nat
instantiation
  nmultiset :: (wellorder) wellorder
### theory "Draft.Nested_Multiset"
### 0.688s elapsed time, 2.188s cpu time, 0.299s GC time
### theory "Draft.Multiset_More"
### 0.699s elapsed time, 2.203s cpu time, 0.299s GC time
Loading theory "Draft.Hereditary_Multiset" (required by "Draft.Unary_PCFMoreTemplates" via "Draft.Unary_PCF")
instantiation
  fset :: (exhaustive) exhaustive
  exhaustive_fset == exhaustive_class.exhaustive ::
    ('a fset => (bool * term list) option)
    => natural => (bool * term list) option
Found termination order: "(%p. nat_of_natural (snd p)) <*mlex*> {}"
instantiation
  fset :: (full_exhaustive) full_exhaustive
  full_exhaustive_fset == full_exhaustive_class.full_exhaustive ::
    ('a fset * (unit => term) => (bool * term list) option)
    => natural => (bool * term list) option
Found termination order: "(%p. nat_of_natural (snd p)) <*mlex*> {}"
instantiation
  fset :: (random) random
  random_fset == random_class.random ::
    natural
    => natural * natural => ('a fset * (unit => term)) * natural * natural
### Additional type variable(s) in specification of "random_aux_fset_rel": 'a
### Additional type variable(s) in specification of "random_aux_fset_dom": 'a
Found termination order: "(%p. nat_of_natural (fst p)) <*mlex*> {}"
### theory "HOL-Library.FSet"
### 3.241s elapsed time, 11.081s cpu time, 2.721s GC time
consts
  Rep_hmultiset :: "hmultiset => unit nmultiset"
consts
  Abs_hmultiset :: "unit nmultiset => hmultiset"
instantiation
  hmultiset :: linorder
  less_eq_hmultiset == less_eq :: hmultiset => hmultiset => bool
  less_hmultiset == less :: hmultiset => hmultiset => bool
instantiation
  hmultiset :: cancel_comm_monoid_add
  zero_hmultiset == zero_class.zero :: hmultiset
  minus_hmultiset == minus :: hmultiset => hmultiset => hmultiset
  plus_hmultiset == plus :: hmultiset => hmultiset => hmultiset
instantiation
  hmultiset :: order_bot
  bot_hmultiset == bot :: hmultiset
instantiation
  hmultiset :: distrib_lattice
  inf_hmultiset == inf :: hmultiset => hmultiset => hmultiset
  sup_hmultiset == sup :: hmultiset => hmultiset => hmultiset
### theory "Draft.Hereditary_Multiset"
### 0.947s elapsed time, 2.488s cpu time, 1.517s GC time
Loading theory "Draft.Unary_PCF" (required by "Draft.Unary_PCFMoreTemplates")
consts
  dest_fun :: "Unary_PCF.type => Unary_PCF.type list"
consts
  \<delta> :: "Unary_PCF.type => hmultiset"
consts
  open :: "nat => expr => expr => expr"
consts
  close_Var :: "nat => char list * Unary_PCF.type => expr => expr"
consts
  fv :: "expr => (char list * Unary_PCF.type) fset"
Proofs for inductive predicate(s) "lc"
  Proving monotonicity ...
consts
  Apps :: "expr => expr list => expr"
consts
  subst :: "char list * Unary_PCF.type => expr => expr => expr"
Proofs for inductive predicate(s) "welltyped"
  Proving monotonicity ...
consts
  constant0 :: "Unary_PCF.type => expr"
Found termination order:
  "(%p. size (fst p)) <*mlex*> (%p. size (snd (snd p))) <*mlex*> {}"
Found termination order:
  "case_sum (%p. size (fst p)) (%p. size (fst p)) <*mlex*> {}"
### theory "Draft.Unary_PCF"
### 3.114s elapsed time, 4.372s cpu time, 1.638s GC time
Loading theory "Draft.Unary_PCFMoreTemplates"
val templateLemmas =
   [("Unary_PCF.lc_constant0", "lc (constant0 ?T)",
     template_predicate
      (
         template_app
          (template_hole 1, template_app (template_hole 0, template_var 0))
         )),
    ("Unary_PCF.welltyped_constant0", "constant0 ?T ::: ?T",
     template_predicate
      (
         template_app
          (template_app
            (template_hole 1,
             template_app (template_hole 0, template_var 0)),
           template_var 0)
         )),
    ("Unary_PCF.closed_constant", "Unary_PCF.closed (constant ?T)",
     template_equation
      (template_app
        (template_hole 2, template_app (template_hole 1, template_var 0)),
       template_hole 0)),
    ("Unary_PCF.Abss_Nil", "\<Lambda>[[]] ?b = ?b",
     template_equation
      (template_app
        (template_app (template_hole 1, template_hole 0), template_var 0),
       template_var 0)),
    ("Unary_PCF.mk_fun_dest_fun",
     "dest_fun ?T \<rightarrow>\<rightarrow> \<B> = ?T",
     template_equation
      (template_app
        (template_app
          (template_hole 2, template_app (template_hole 1, template_var 0)),
         template_hole 0),
       template_var 0)),
    ("Unary_PCF.welltyped_constant",
     "constant ?T ::: \<B> \<rightarrow> ?T",
     template_predicate
      (
         template_app
          (template_app
            (template_hole 3,
             template_app (template_hole 2, template_var 0)),
           template_app
            (template_app (template_hole 1, template_hole 0),
             template_var 0))
         )),
    ("Unary_PCF.welltyped_E", "E ?T ?i ::: \<epsilon> ?T ?i",
     template_predicate
      (
         template_app
          (template_app
            (template_hole 2,
             template_app
              (template_app (template_hole 1, template_var 1),
               template_var 0)),
           template_app
            (template_app (template_hole 0, template_var 1),
             template_var 0))
         )),
    ("Unary_PCF.welltyped_lc", "?t ::: ?T ==> lc ?t",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 1, template_var 1),
              template_var 0)
            )],
       template_predicate
        (template_app (template_hole 0, template_var 1)))),
    ("Unary_PCF.welltypedE", "?i ::: ?T ==> ?P",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_hole 1,
                template_app (template_hole 0, template_var 2)),
              template_var 1)
            )],
       template_predicate (template_var 0))),
    ("Unary_PCF.ex_fresh", "EX x. (x, ?T) |\<notin>| ?A",
     template_predicate (template_app (template_hole 3, t_empty))),
    ("Unary_PCF.lc_Abs_iff_body",
     "lc (\<Lambda>\<langle>?T\<rangle> ?t) = body ?T ?t",
     template_equation
      (template_app
        (template_hole 2,
         template_app
          (template_app (template_hole 1, template_var 1), template_var 0)),
       template_app
        (template_app (template_hole 0, template_var 1), template_var 0))),
    ("Unary_PCF.welltyped_constant0_iff", "constant0 ?T ::: ?U = (?U = ?T)",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_hole 2,
                template_app (template_hole 1, template_var 1)),
              template_var 0)
            )],
       template_equation (template_var 0, template_var 1))),
    ("Unary_PCF.welltyped_bool_iff", "?b ::: ?T = (?T = \<B>)",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_hole 3,
                template_app (template_hole 2, template_var 1)),
              template_var 0)
            )],
       template_equation (template_var 0, template_hole 0))),
    ("Unary_PCF.empty_less_mset", "({#} < mset ?xs) = (?xs ~= [])",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 5, template_hole 4),
              template_app (template_hole 3, template_var 0))
            )],
       template_negation
        (template_equation (template_var 0, template_hole 0)))),
    ("Unary_PCF.dest_fun_mk_fun",
     "dest_fun (?Ts \<rightarrow>\<rightarrow> ?T) = ?Ts @ dest_fun ?T",
     template_equation
      (template_app
        (template_hole 2,
         template_app
          (template_app (template_hole 1, template_var 1), template_var 0)),
       template_app
        (template_app (template_hole 0, template_var 1),
         template_app (template_hole 2, template_var 0)))),
    ("Unary_PCF.welltyped_constant_iff",
     "constant ?T ::: ?U = (?U = \<B> \<rightarrow> ?T)",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_hole 4,
                template_app (template_hole 3, template_var 1)),
              template_var 0)
            )],
       template_equation
        (template_var 0,
         template_app
          (template_app (template_hole 1, template_hole 0),
           template_var 1)))),
    ("Unary_PCF.eq_mk_fun_iff",
     "(?T = ?Ts \<rightarrow>\<rightarrow> \<B>) = (?Ts = dest_fun ?T)",
     template_bimplication
      (template_equation
        (template_var 1,
         template_app
          (template_app (template_hole 3, template_var 0),
           template_hole 2)),
       template_equation
        (template_var 0, template_app (template_hole 0, template_var 1)))),
    ("Unary_PCF.welltyped_Var_iff",
     "\<langle>(?x, ?T)\<rangle> ::: ?U = (?T = ?U)",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_hole 3,
                template_app
                 (template_hole 2,
                  template_app
                   (template_app (template_hole 1, template_var 2),
                    template_var 1))),
              template_var 0)
            )],
       template_equation (template_var 1, template_var 0))),
    ("Unary_PCF.lc_open_id", "lc ?u ==> Unary_PCF.open ?k ?t ?u = ?u",
     template_implication
      ([template_predicate
         (template_app (template_hole 2, template_var 2))],
       template_equation
        (template_app
          (template_app
            (template_app (template_hole 0, template_var 1),
             template_var 0),
           template_var 2),
         template_var 2))),
    ("Unary_PCF.lc_open_Var", "lc ?u ==> lc (open_Var ?i ?xT ?u)",
     template_implication
      ([template_predicate
         (template_app (template_hole 2, template_var 2))],
       template_predicate
        (
           template_app
            (template_hole 2,
             template_app
              (template_app
                (template_app (template_hole 1, template_var 1),
                 template_app (template_hole 0, template_var 0)),
               template_var 2))
           ))),
    ("Unary_PCF.Apps_Abs_neq_Apps",
     "?b \<bullet> ?ss ~= \<Lambda>\<langle>?T\<rangle> ?r \<cdot> ?t",
     template_negation
      (
         template_equation
          (template_app
            (template_app
              (template_hole 3,
               template_app (template_hole 2, template_var 4)),
             template_var 3),
           template_app
            (template_app
              (template_hole 1,
               template_app
                (template_app (template_hole 0, template_var 2),
                 template_var 1)),
             template_var 0))
         )),
    ("Unary_PCF.Apps_Abs_neq_Apps",
     "?i \<bullet> ?ss ~= \<Lambda>\<langle>?T\<rangle> ?r \<cdot> ?t",
     template_negation
      (
         template_equation
          (template_app
            (template_app
              (template_hole 3,
               template_app (template_hole 2, template_var 4)),
             template_var 3),
           template_app
            (template_app
              (template_hole 1,
               template_app
                (template_app (template_hole 0, template_var 2),
                 template_var 1)),
             template_var 0))
         )),
    ("Unary_PCF.Apps_Abs_neq_Apps",
     "\<langle>?xT\<rangle> \<bullet> ?ss ~=
      \<Lambda>\<langle>?T\<rangle> ?r \<cdot> ?t",
     template_negation
      (
         template_equation
          (template_app
            (template_app
              (template_hole 3,
               template_app (template_hole 2, template_var 4)),
             template_var 3),
           template_app
            (template_app
              (template_hole 1,
               template_app
                (template_app (template_hole 0, template_var 2),
                 template_var 1)),
             template_var 0))
         )),
    ("Unary_PCF.Apps_Var_neq_Apps_Abs",
     "\<Lambda>\<langle>?T\<rangle> ?r \<bullet> ?ts ~=
      \<langle>?xT\<rangle> \<bullet> ?ss",
     template_negation
      (
         template_equation
          (template_app
            (template_app
              (template_hole 2,
               template_app
                (template_app (template_hole 1, template_var 4),
                 template_var 3)),
             template_var 2),
           template_app
            (template_app
              (template_hole 2,
               template_app (template_hole 0, template_var 1)),
             template_var 0))
         )),
    ("Unary_PCF.Apps_inj",
     "(?f \<bullet> ?ts = ?g \<bullet> ?ts) = (?f = ?g)",
     template_bimplication
      (template_equation
        (template_app
          (template_app (template_hole 0, template_var 2), template_var 1),
         template_app
          (template_app (template_hole 0, template_var 0), template_var 1)),
       template_equation (template_var 2, template_var 0))),
    ("Unary_PCF.Apps_append",
     "?f \<bullet> (?xs @ ?ys) = ?f \<bullet> ?xs \<bullet> ?ys",
     template_equation
      (template_app
        (template_app (template_hole 1, template_var 2),
         template_app
          (template_app (template_hole 0, template_var 1), template_var 0)),
       template_app
        (template_app
          (template_hole 1,
           template_app
            (template_app (template_hole 1, template_var 2),
             template_var 1)),
         template_var 0))),
    ("Unary_PCF.welltyped_P",
     "P ?T ?i ?j ::: ?T \<rightarrow> \<pi> ?T ?i ?j",
     template_predicate
      (
         template_app
          (template_app
            (template_hole 3,
             template_app
              (template_app
                (template_app (template_hole 2, template_var 2),
                 template_var 1),
               template_var 0)),
           template_app
            (template_app (template_hole 1, template_var 2),
             template_app
              (template_app
                (template_app (template_hole 0, template_var 2),
                 template_var 1),
               template_var 0)))
         )),
    ("Unary_PCF.\<delta>_gt_0", "?T ~= \<B> ==> HMSet {#} < \<delta> ?T",
     template_implication
      ([template_negation
         (template_equation (template_var 0, template_hole 4))],
       template_inequation
        (less_than, template_app (template_hole 2, template_hole 1),
         template_app (template_hole 0, template_var 0)))),
    ("Unary_PCF.Apps_Abs_neq_Apps",
     "?e1.0 ? ?e2.0 \<bullet> ?ss ~=
      \<Lambda>\<langle>?T\<rangle> ?r \<cdot> ?t",
     template_negation
      (
         template_equation
          (template_app
            (template_app
              (template_hole 3,
               template_app
                (template_app (template_hole 2, template_var 5),
                 template_var 4)),
             template_var 3),
           template_app
            (template_app
              (template_hole 1,
               template_app
                (template_app (template_hole 0, template_var 2),
                 template_var 1)),
             template_var 0))
         )),
    ("Unary_PCF.fv_close_Var",
     "fv (close_Var ?i ?xT ?t) = fv ?t |-| {|?xT|}",
     template_equation
      (template_app
        (template_hole 4,
         template_app
          (template_app
            (template_app (template_hole 3, template_var 2),
             template_var 1),
           template_var 0)),
       template_app
        (template_app
          (template_hole 2, template_app (template_hole 4, template_var 0)),
         template_app
          (template_app (template_hole 1, template_var 1),
           template_hole 0)))),
    ("Unary_PCF.variant_inj",
     "variant ?i ?base = variant ?j ?base ==> ?i = ?j",
     template_implication
      ([template_equation
         (template_app
           (template_app (template_hole 1, template_var 2), template_var 1),
          template_app
           (template_app (template_hole 1, template_var 0),
            template_var 1))],
       template_equation (template_var 2, template_var 0))),
    ("Unary_PCF.Apps_Var_neq_Apps_beta",
     "\<Lambda>\<langle>?T1\<rangle> ?r1 \<cdot> ?s1 \<bullet> ?ts1 ~=
      \<langle>?xT1\<rangle> \<bullet> ?ss1",
     template_negation
      (
         template_equation
          (template_app
            (template_app
              (template_hole 3,
               template_app
                (template_app
                  (template_hole 2,
                   template_app
                    (template_app (template_hole 1, template_var 5),
                     template_var 4)),
                 template_var 3)),
             template_var 2),
           template_app
            (template_app
              (template_hole 3,
               template_app (template_hole 0, template_var 1)),
             template_var 0))
         )),
    ("Unary_PCF.dest_fun_alt", "dest_fun ?T = map ((!-) ?T) [0..<ar ?T]",
     template_equation
      (template_app (template_hole 5, template_var 0),
       template_app
        (template_app (template_hole 4, t_empty),
         template_app
          (template_app (template_hole 2, template_hole 1),
           template_app
            (template_hole 0,
             template_app (template_hole 5, template_var 0)))))),
    ("Unary_PCF.Apps_snoc",
     "?f \<bullet> (?xs @ [?x]) = ?f \<bullet> ?xs \<cdot> ?x",
     template_equation
      (template_app
        (template_app (template_hole 4, template_var 2),
         template_app
          (template_app (template_hole 3, template_var 1),
           template_app
            (template_app (template_hole 2, template_var 0),
             template_hole 1))),
       template_app
        (template_app
          (template_hole 0,
           template_app
            (template_app (template_hole 4, template_var 2),
             template_var 1)),
         template_var 0))),
    ("Unary_PCF.mset_nth_drop_less",
     "?i < length ?xs ==> mset (nth_drop ?i ?xs) < mset ?xs",
     template_implication
      ([template_inequation
         (less_than, template_var 1,
          template_app (template_hole 3, template_var 0))],
       template_inequation
        (less_than,
         template_app
          (template_hole 1,
           template_app
            (template_app (template_hole 0, template_var 1),
             template_var 0)),
         template_app (template_hole 1, template_var 0)))),
    ("Unary_PCF.fresh_close_Var_id",
     "fresh ?xT ?t ==> close_Var ?k ?xT ?t = ?t",
     template_implication
      ([template_negation
         (
            template_predicate
             (
                template_app
                 (template_app (template_hole 3, template_var 2),
                  template_app (template_hole 2, template_var 1))
                )
            )],
       template_equation
        (template_app
          (template_app
            (template_app (template_hole 0, template_var 0),
             template_var 2),
           template_var 1),
         template_var 1))),
    ("Unary_PCF.subst_fresh", "fresh ?xT ?u ==> subst ?xT ?t ?u = ?u",
     template_implication
      ([template_negation
         (
            template_predicate
             (
                template_app
                 (template_app (template_hole 3, template_var 2),
                  template_app (template_hole 2, template_var 1))
                )
            )],
       template_equation
        (template_app
          (template_app
            (template_app (template_hole 0, template_var 2),
             template_var 0),
           template_var 1),
         template_var 1))),
    ("Unary_PCF.lc_subst", "[| lc ?u; lc ?t |] ==> lc (subst ?xT ?t ?u)",
     template_implication
      ([template_predicate (template_app (template_hole 1, template_var 2)),
        template_predicate
         (template_app (template_hole 1, template_var 1))],
       template_predicate
        (
           template_app
            (template_hole 1,
             template_app
              (template_app
                (template_app (template_hole 0, template_var 0),
                 template_var 1),
               template_var 2))
           ))),
    ("Unary_PCF.welltyped_unique", "[| ?t ::: ?T; ?t ::: ?U |] ==> ?T = ?U",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 1, template_var 2),
              template_var 1)
            ),
        template_predicate
         (
            template_app
             (template_app (template_hole 1, template_var 2),
              template_var 0)
            )],
       template_equation (template_var 1, template_var 0))),
    ("Unary_PCF.\<delta>_mk_fun",
     "\<delta> (?Ts \<rightarrow>\<rightarrow> ?T) =
      HMSet (hmsetmset (\<delta> ?T) + mset (map \<delta> ?Ts))",
     template_equation
      (template_app
        (template_hole 6,
         template_app
          (template_app (template_hole 5, template_var 1), template_var 0)),
       template_app
        (template_hole 4,
         template_app
          (template_app
            (template_hole 3,
             template_app
              (template_hole 2,
               template_app (template_hole 6, template_var 0))),
           template_app
            (template_hole 1,
             template_app
              (template_app (template_hole 0, template_hole 6),
               template_var 1)))))),
    ("Unary_PCF.open_Var_close_Var",
     "lc ?t ==> open_Var ?i ?xT (close_Var ?i ?xT ?t) = ?t",
     template_implication
      ([template_predicate
         (template_app (template_hole 4, template_var 2))],
       template_equation
        (template_app
          (template_app
            (template_app (template_hole 2, template_var 1),
             template_app (template_hole 1, template_var 0)),
           template_app
            (template_app
              (template_app (template_hole 0, template_var 1),
               template_var 0),
             template_var 2)),
         template_var 2))),
    ("Unary_PCF.size_nth_arg", "?i < ar ?T ==> size (?T !- ?i) < size ?T",
     template_implication
      ([template_inequation
         (less_than, template_var 1,
          template_app
           (template_hole 3,
            template_app (template_hole 2, template_var 0)))],
       template_inequation
        (less_than,
         template_app
          (template_hole 1,
           template_app
            (template_app (template_hole 0, template_var 0),
             template_var 1)),
         template_app (template_hole 1, template_var 0)))),
    ("Unary_PCF.lc_open", "[| body ?U ?u; lc ?t |] ==> lc (open0 ?t ?u)",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 3, template_var 2),
              template_var 1)
            ),
        template_predicate
         (template_app (template_hole 2, template_var 0))],
       template_predicate
        (
           template_app
            (template_hole 2,
             template_app
              (template_app
                (template_app (template_hole 1, template_hole 0),
                 template_var 0),
               template_var 1))
           ))),
    ("Unary_PCF.eq_Apps_conv",
     "(?b = ?f \<bullet> ?ts) = (?b = ?f & ?ts = [])",
     template_bimplication
      (template_equation
        (template_app (template_hole 4, template_var 2),
         template_app
          (template_app (template_hole 3, template_var 1), template_var 0)),
       template_predicate
        (
           template_app
            (template_app
              (template_hole 2,
               template_app
                (template_app
                  (template_hole 5,
                   template_app (template_hole 4, template_var 2)),
                 template_var 1)),
             template_app
              (template_app (template_hole 1, template_var 0),
               template_hole 0))
           ))),
    ("Unary_PCF.eq_Apps_conv",
     "(?i = ?f \<bullet> ?ts) = (?i = ?f & ?ts = [])",
     template_bimplication
      (template_equation
        (template_app (template_hole 4, template_var 2),
         template_app
          (template_app (template_hole 3, template_var 1), template_var 0)),
       template_predicate
        (
           template_app
            (template_app
              (template_hole 2,
               template_app
                (template_app
                  (template_hole 5,
                   template_app (template_hole 4, template_var 2)),
                 template_var 1)),
             template_app
              (template_app (template_hole 1, template_var 0),
               template_hole 0))
           ))),
    ("Unary_PCF.eq_Apps_conv",
     "(\<langle>?m\<rangle> = ?f \<bullet> ?ts) =
      (\<langle>?m\<rangle> = ?f & ?ts = [])",
     template_bimplication
      (template_equation
        (template_app (template_hole 4, template_var 2),
         template_app
          (template_app (template_hole 3, template_var 1), template_var 0)),
       template_predicate
        (
           template_app
            (template_app
              (template_hole 2,
               template_app
                (template_app
                  (template_hole 5,
                   template_app (template_hole 4, template_var 2)),
                 template_var 1)),
             template_app
              (template_app (template_hole 1, template_var 0),
               template_hole 0))
           ))),
    ("Unary_PCF.eq_Apps_conv",
     "(?f \<bullet> ?ts = ?b) = (?b = ?f & ?ts = [])",
     template_bimplication
      (template_equation
        (template_app
          (template_app (template_hole 4, template_var 2), template_var 1),
         template_app (template_hole 3, template_var 0)),
       template_predicate
        (
           template_app
            (template_app
              (template_hole 2,
               template_app
                (template_app
                  (template_hole 5,
                   template_app (template_hole 3, template_var 0)),
                 template_var 2)),
             template_app
              (template_app (template_hole 1, template_var 1),
               template_hole 0))
           ))),
    ("Unary_PCF.eq_Apps_conv",
     "(?f \<bullet> ?ts = ?i) = (?i = ?f & ?ts = [])",
     template_bimplication
      (template_equation
        (template_app
          (template_app (template_hole 4, template_var 2), template_var 1),
         template_app (template_hole 3, template_var 0)),
       template_predicate
        (
           template_app
            (template_app
              (template_hole 2,
               template_app
                (template_app
                  (template_hole 5,
                   template_app (template_hole 3, template_var 0)),
                 template_var 2)),
             template_app
              (template_app (template_hole 1, template_var 1),
               template_hole 0))
           ))),
    ("Unary_PCF.eq_Apps_conv",
     "(?f \<bullet> ?ts = \<langle>?m\<rangle>) =
      (\<langle>?m\<rangle> = ?f & ?ts = [])",
     template_bimplication
      (template_equation
        (template_app
          (template_app (template_hole 4, template_var 2), template_var 1),
         template_app (template_hole 3, template_var 0)),
       template_predicate
        (
           template_app
            (template_app
              (template_hole 2,
               template_app
                (template_app
                  (template_hole 5,
                   template_app (template_hole 3, template_var 0)),
                 template_var 2)),
             template_app
              (template_app (template_hole 1, template_var 1),
               template_hole 0))
           ))),
    ("Unary_PCF.fold_eq_Bool_iff",
     "(\<B> = fold (\<rightarrow>) (rev ?Ts) ?T) = (?Ts = [] & ?T = \<B>)",
     template_bimplication
      (template_equation
        (template_hole 6,
         template_app
          (template_app
            (template_app (template_hole 5, template_hole 4),
             template_app (template_hole 3, template_var 1)),
           template_var 0)),
       template_predicate
        (
           template_app
            (template_app
              (template_hole 2,
               template_app
                (template_app (template_hole 1, template_var 1),
                 template_hole 0)),
             template_app
              (template_app (template_hole 7, template_var 0),
               template_hole 6))
           ))),
    ("Unary_PCF.fold_eq_Bool_iff",
     "(fold (\<rightarrow>) (rev ?Ts) ?T = \<B>) = (?Ts = [] & ?T = \<B>)",
     template_bimplication
      (template_equation
        (template_app
          (template_app
            (template_app (template_hole 6, template_hole 5),
             template_app (template_hole 4, template_var 1)),
           template_var 0),
         template_hole 3),
       template_predicate
        (
           template_app
            (template_app
              (template_hole 2,
               template_app
                (template_app (template_hole 1, template_var 1),
                 template_hole 0)),
             template_app
              (template_app (template_hole 7, template_var 0),
               template_hole 3))
           ))),
    ("Unary_PCF.Abss_Cons",
     "\<Lambda>[(?x # ?xs)] ?b =
      \<Lambda>\<langle>snd ?x\<rangle> close0_Var ?x (\<Lambda>[?xs] ?b)",
     template_equation
      (template_app
        (template_app
          (template_hole 5,
           template_app
            (template_app (template_hole 4, template_var 2),
             template_var 1)),
         template_var 0),
       template_app
        (template_app
          (template_hole 3, template_app (template_hole 2, template_var 2)),
         template_app
          (template_app
            (template_app (template_hole 1, template_hole 0),
             template_var 2),
           template_app
            (template_app (template_hole 5, template_var 1),
             template_var 0))))),
    ("Unary_PCF.welltyped_open_Var_close_Var",
     "?t ::: ?T ==> open0_Var ?xT (close0_Var ?xT ?t) ::: ?T",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 4, template_var 2),
              template_var 1)
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 4,
               template_app
                (template_app
                  (template_app (template_hole 3, template_hole 2),
                   template_app (template_hole 1, template_var 0)),
                 template_app
                  (template_app
                    (template_app (template_hole 0, template_hole 2),
                     template_var 0),
                   template_var 2))),
             template_var 1)
           ))),
    ("Unary_PCF.body_subst",
     "[| body ?U ?u; lc ?t |] ==> body ?U (subst ?xT ?t ?u)",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 2, template_var 3),
              template_var 2)
            ),
        template_predicate
         (template_app (template_hole 1, template_var 1))],
       template_predicate
        (
           template_app
            (template_app (template_hole 2, template_var 3),
             template_app
              (template_app
                (template_app (template_hole 0, template_var 0),
                 template_var 1),
               template_var 2))
           ))),
    ("Unary_PCF.welltypedE", "[| ?b ::: ?T; ?T = \<B> ==> ?P |] ==> ?P",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_hole 3,
                template_app (template_hole 2, template_var 2)),
              template_var 1)
            ),
        template_implication
         ([template_equation (template_var 1, template_hole 0)],
          template_predicate (template_var 0))],
       template_predicate (template_var 0))),
    ("Unary_PCF.rename_welltyped",
     "?u ::: ?U ==> subst (?x, ?T) \<langle>(?y, ?T)\<rangle> ?u ::: ?U",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 3, template_var 4),
              template_var 3)
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 3,
               template_app
                (template_app
                  (template_app
                    (template_hole 2,
                     template_app
                      (template_app (template_hole 1, template_var 2),
                       template_var 1)),
                   template_app
                    (template_hole 0,
                     template_app
                      (template_app (template_hole 1, template_var 0),
                       template_var 1))),
                 template_var 4)),
             template_var 3)
           ))),
    ("Unary_PCF.welltyped_App_iff",
     "?f \<cdot> ?t ::: ?U = (EX T. ?f ::: T \<rightarrow> ?U & ?t ::: T)",
     template_equation
      (template_app
        (template_app
          (template_hole 4,
           template_app
            (template_app (template_hole 3, template_var 2),
             template_var 1)),
         template_var 0),
       template_app (template_hole 2, t_empty))),
    ("Unary_PCF.welltyped_Seq_iff",
     "?e1.0 ? ?e2.0 ::: ?T = (?T = \<B> & ?e1.0 ::: \<B> & ?e2.0 ::: \<B>)",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_hole 4,
                template_app
                 (template_app (template_hole 3, template_var 2),
                  template_var 1)),
              template_var 0)
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 2,
               template_app
                (template_app (template_hole 1, template_var 0),
                 template_hole 0)),
             template_app
              (template_app
                (template_hole 2,
                 template_app
                  (template_app (template_hole 4, template_var 2),
                   template_hole 0)),
               template_app
                (template_app (template_hole 4, template_var 1),
                 template_hole 0)))
           ))),
    ("Unary_PCF.eq_Apps_conv",
     "(?f \<bullet> ?ts = \<Lambda>\<langle>?T\<rangle> ?t) =
      (\<Lambda>\<langle>?T\<rangle> ?t = ?f & ?ts = [])",
     template_bimplication
      (template_equation
        (template_app
          (template_app (template_hole 4, template_var 3), template_var 2),
         template_app
          (template_app (template_hole 3, template_var 1), template_var 0)),
       template_predicate
        (
           template_app
            (template_app
              (template_hole 2,
               template_app
                (template_app
                  (template_hole 5,
                   template_app
                    (template_app (template_hole 3, template_var 1),
                     template_var 0)),
                 template_var 3)),
             template_app
              (template_app (template_hole 1, template_var 2),
               template_hole 0))
           ))),
    ("Unary_PCF.eq_Apps_conv",
     "(?f \<bullet> ?ts = ?e1.0 ? ?e2.0) = (?e1.0 ? ?e2.0 = ?f & ?ts = [])",
     template_bimplication
      (template_equation
        (template_app
          (template_app (template_hole 4, template_var 3), template_var 2),
         template_app
          (template_app (template_hole 3, template_var 1), template_var 0)),
       template_predicate
        (
           template_app
            (template_app
              (template_hole 2,
               template_app
                (template_app
                  (template_hole 5,
                   template_app
                    (template_app (template_hole 3, template_var 1),
                     template_var 0)),
                 template_var 3)),
             template_app
              (template_app (template_hole 1, template_var 2),
               template_hole 0))
           ))),
    ("Unary_PCF.eq_Apps_conv",
     "(\<Lambda>\<langle>?T\<rangle> ?t = ?f \<bullet> ?ts) =
      (\<Lambda>\<langle>?T\<rangle> ?t = ?f & ?ts = [])",
     template_bimplication
      (template_equation
        (template_app
          (template_app (template_hole 4, template_var 3), template_var 2),
         template_app
          (template_app (template_hole 3, template_var 1), template_var 0)),
       template_predicate
        (
           template_app
            (template_app
              (template_hole 2,
               template_app
                (template_app
                  (template_hole 5,
                   template_app
                    (template_app (template_hole 4, template_var 3),
                     template_var 2)),
                 template_var 1)),
             template_app
              (template_app (template_hole 1, template_var 0),
               template_hole 0))
           ))),
    ("Unary_PCF.eq_Apps_conv",
     "(?e1.0 ? ?e2.0 = ?f \<bullet> ?ts) = (?e1.0 ? ?e2.0 = ?f & ?ts = [])",
     template_bimplication
      (template_equation
        (template_app
          (template_app (template_hole 4, template_var 3), template_var 2),
         template_app
          (template_app (template_hole 3, template_var 1), template_var 0)),
       template_predicate
        (
           template_app
            (template_app
              (template_hole 2,
               template_app
                (template_app
                  (template_hole 5,
                   template_app
                    (template_app (template_hole 4, template_var 3),
                     template_var 2)),
                 template_var 1)),
             template_app
              (template_app (template_hole 1, template_var 0),
               template_hole 0))
           ))),
    ("Unary_PCF.Apps_Var_eq",
     "(\<langle>?xT\<rangle> \<bullet> ?ss =
       \<langle>?yU\<rangle> \<bullet> ?ts) =
      (?xT = ?yU & ?ss = ?ts)",
     template_bimplication
      (template_equation
        (template_app
          (template_app
            (template_hole 4,
             template_app (template_hole 3, template_var 3)),
           template_var 2),
         template_app
          (template_app
            (template_hole 4,
             template_app (template_hole 3, template_var 1)),
           template_var 0)),
       template_predicate
        (
           template_app
            (template_app
              (template_hole 2,
               template_app
                (template_app (template_hole 1, template_var 3),
                 template_var 1)),
             template_app
              (template_app (template_hole 0, template_var 2),
               template_var 0))
           ))),
    ("Unary_PCF.subst_Apps",
     "subst ?xT ?u (?f \<bullet> ?xs) =
      subst ?xT ?u ?f \<bullet> map (subst ?xT ?u) ?xs",
     template_equation
      (template_app
        (template_app
          (template_app (template_hole 2, template_var 3), template_var 2),
         template_app
          (template_app (template_hole 1, template_var 1), template_var 0)),
       template_app
        (template_app
          (template_hole 1,
           template_app
            (template_app
              (template_app (template_hole 2, template_var 3),
               template_var 2),
             template_var 1)),
         template_app
          (template_app
            (template_hole 0,
             template_app
              (template_app (template_hole 2, template_var 3),
               template_var 2)),
           template_var 0)))),
    ("Unary_PCF.map_nth_drop",
     "?i < length ?xs ==>
      map ?f (nth_drop ?i ?xs) = nth_drop ?i (map ?f ?xs)",
     template_implication
      ([template_inequation
         (less_than, template_var 2,
          template_app (template_hole 4, template_var 1))],
       template_equation
        (template_app
          (template_app (template_hole 2, template_var 0),
           template_app
            (template_app (template_hole 1, template_var 2),
             template_var 1)),
         template_app
          (template_app (template_hole 0, template_var 2),
           template_app
            (template_app (template_hole 2, template_var 0),
             template_var 1))))),
    ("Unary_PCF.close_Var_open_Var",
     "fresh ?xT ?t ==> close_Var ?i ?xT (open_Var ?i ?xT ?t) = ?t",
     template_implication
      ([template_negation
         (
            template_predicate
             (
                template_app
                 (template_app (template_hole 5, template_var 2),
                  template_app (template_hole 4, template_var 1))
                )
            )],
       template_equation
        (template_app
          (template_app
            (template_app (template_hole 2, template_var 0),
             template_var 2),
           template_app
            (template_app
              (template_app (template_hole 1, template_var 0),
               template_app (template_hole 0, template_var 2)),
             template_var 1)),
         template_var 1))),
    ("Unary_PCF.dest_fun_\<pi>_0",
     "?i < ar ?T ==> dest_fun (\<pi> ?T ?i 0) = nth_drop ?i (dest_fun ?T)",
     template_implication
      ([template_inequation
         (less_than, template_var 1,
          template_app
           (template_hole 5,
            template_app (template_hole 4, template_var 0)))],
       template_equation
        (template_app
          (template_hole 4,
           template_app
            (template_app
              (template_app (template_hole 2, template_var 0),
               template_var 1),
             template_hole 1)),
         template_app
          (template_app (template_hole 0, template_var 1),
           template_app (template_hole 4, template_var 0))))),
    ("Unary_PCF.infinite_cartesian_productI1",
     "[| infinite ?A; ?B ~= {} |] ==> infinite (?A \<times> ?B)",
     template_implication
      ([template_negation
         (
            template_predicate
             (template_app (template_hole 4, template_var 1))
            ),
        template_negation
         (template_equation (template_var 0, template_hole 2))],
       template_negation
        (
           template_predicate
            (
               template_app
                (template_hole 1,
                 template_app
                  (template_app (template_hole 0, template_var 1), t_empty))
               )
           ))),
    ("Unary_PCF.welltyped_subst",
     "[| ?u ::: ?U; ?t ::: snd ?xT |] ==> subst ?xT ?t ?u ::: ?U",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 2, template_var 3),
              template_var 2)
            ),
        template_predicate
         (
            template_app
             (template_app (template_hole 2, template_var 1),
              template_app (template_hole 1, template_var 0))
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 2,
               template_app
                (template_app
                  (template_app (template_hole 0, template_var 0),
                   template_var 1),
                 template_var 3)),
             template_var 2)
           ))),
    ("Unary_PCF.welltyped_Apps_iff",
     "?f \<bullet> ?ts ::: ?U =
      (EX Ts.
          ?f ::: Ts \<rightarrow>\<rightarrow> ?U &
          list_all2 (:::) ?ts Ts)",
     template_equation
      (template_app
        (template_app
          (template_hole 5,
           template_app
            (template_app (template_hole 4, template_var 2),
             template_var 1)),
         template_var 0),
       template_app (template_hole 3, t_empty))),
    ("Unary_PCF.map_nth_eq_drop_take",
     "?j <= length ?xs ==> map ((!) ?xs) [?i..<?j] = drop ?i (take ?j ?xs)",
     template_implication
      ([template_inequation
         (less_equals, template_var 2,
          template_app (template_hole 6, template_var 1))],
       template_equation
        (template_app
          (template_app
            (template_hole 4,
             template_app (template_hole 3, template_var 1)),
           template_app
            (template_app (template_hole 2, template_var 0),
             template_var 2)),
         template_app
          (template_app (template_hole 1, template_var 0),
           template_app
            (template_app (template_hole 0, template_var 2),
             template_var 1))))),
    ("Unary_PCF.fv_open_Var",
     "fresh ?xT ?t ==>
      fv (open_Var ?i ?xT ?t) |\<subseteq>| finsert ?xT (fv ?t)",
     template_implication
      ([template_negation
         (
            template_predicate
             (
                template_app
                 (template_app (template_hole 5, template_var 2),
                  template_app (template_hole 4, template_var 1))
                )
            )],
       template_inequation
        (less_equals,
         template_app
          (template_hole 4,
           template_app
            (template_app
              (template_app (template_hole 2, template_var 0),
               template_app (template_hole 1, template_var 2)),
             template_var 1)),
         template_app
          (template_app (template_hole 0, template_var 2),
           template_app (template_hole 4, template_var 1))))),
    ("Unary_PCF.welltyped_Apps",
     "[| list_all2 (:::) ?ts ?Ts;
         ?f ::: ?Ts \<rightarrow>\<rightarrow> ?U |]
      ==> ?f \<bullet> ?ts ::: ?U",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app (template_hole 3, template_hole 2),
                template_var 3),
              template_var 2)
            ),
        template_predicate
         (
            template_app
             (template_app (template_hole 2, template_var 1),
              template_app
               (template_app (template_hole 1, template_var 2),
                template_var 0))
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 2,
               template_app
                (template_app (template_hole 0, template_var 1),
                 template_var 3)),
             template_var 0)
           ))),
    ("Unary_PCF.welltyped_Abss",
     "[| ?b ::: ?U; ?T = map snd ?xTs \<rightarrow>\<rightarrow> ?U |]
      ==> \<Lambda>[?xTs] ?b ::: ?T",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 5, template_var 3),
              template_var 2)
            ),
        template_equation
         (template_var 1,
          template_app
           (template_app
             (template_hole 3,
              template_app
               (template_app (template_hole 2, template_hole 1),
                template_var 0)),
            template_var 2))],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 5,
               template_app
                (template_app (template_hole 0, template_var 0),
                 template_var 3)),
             template_var 1)
           ))),
    ("Unary_PCF.welltypedE",
     "[| \<langle>?x\<rangle> ::: ?T; !!x. ?x = (x, ?T) ==> ?P |] ==> ?P",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_hole 4,
                template_app (template_hole 3, template_var 2)),
              template_var 1)
            ),
        template_predicate (template_app (template_hole 2, t_empty))],
       template_predicate (template_var 0))),
    ("Unary_PCF.Apps_alt",
     "?f \<bullet> ?ts ::: ?T =
      (EX Ts.
          ?f ::: fold (\<rightarrow>) (rev Ts) ?T &
          list_all2 (:::) ?ts Ts)",
     template_equation
      (template_app
        (template_app
          (template_hole 7,
           template_app
            (template_app (template_hole 6, template_var 2),
             template_var 1)),
         template_var 0),
       template_app (template_hole 5, t_empty))),
    ("Unary_PCF.fv_subst",
     "fv (subst ?xT ?t ?u) =
      fv ?u |-| {|?xT|} |\<union>|
      (if ?xT |\<in>| fv ?u then fv ?t else {||})",
     template_equation
      (template_app
        (template_hole 7,
         template_app
          (template_app
            (template_app (template_hole 6, template_var 2),
             template_var 1),
           template_var 0)),
       template_app
        (template_app
          (template_hole 5,
           template_app
            (template_app
              (template_hole 4,
               template_app (template_hole 7, template_var 0)),
             template_app
              (template_app (template_hole 3, template_var 2),
               template_hole 2))),
         template_app
          (template_app
            (template_app
              (template_hole 1,
               template_app
                (template_app (template_hole 0, template_var 2),
                 template_app (template_hole 7, template_var 0))),
             template_app (template_hole 7, template_var 1)),
           template_hole 2)))),
    ("Unary_PCF.subst_open",
     "lc ?u ==>
      subst ?xT ?u (Unary_PCF.open ?i ?t ?v) =
      Unary_PCF.open ?i (subst ?xT ?u ?t) (subst ?xT ?u ?v)",
     template_implication
      ([template_predicate
         (template_app (template_hole 3, template_var 4))],
       template_equation
        (template_app
          (template_app
            (template_app (template_hole 1, template_var 3),
             template_var 4),
           template_app
            (template_app
              (template_app (template_hole 0, template_var 2),
               template_var 1),
             template_var 0)),
         template_app
          (template_app
            (template_app (template_hole 0, template_var 2),
             template_app
              (template_app
                (template_app (template_hole 1, template_var 3),
                 template_var 4),
               template_var 1)),
           template_app
            (template_app
              (template_app (template_hole 1, template_var 3),
               template_var 4),
             template_var 0))))),
    ("Unary_PCF.close_Var_inj",
     "[| lc ?t; lc ?u; close_Var ?i ?xT ?t = close_Var ?i ?xT ?u |]
      ==> ?t = ?u",
     template_implication
      ([template_predicate (template_app (template_hole 2, template_var 3)),
        template_predicate (template_app (template_hole 2, template_var 2)),
        template_equation
         (template_app
           (template_app
             (template_app (template_hole 0, template_var 1),
              template_var 0),
            template_var 3),
          template_app
           (template_app
             (template_app (template_hole 0, template_var 1),
              template_var 0),
            template_var 2))],
       template_equation (template_var 3, template_var 2))),
    ("Unary_PCF.subst_intro",
     "[| fresh ?xT ?t; lc ?u |]
      ==> open0 ?u ?t = subst ?xT ?u (open0_Var ?xT ?t)",
     template_implication
      ([template_negation
         (
            template_predicate
             (
                template_app
                 (template_app (template_hole 7, template_var 2),
                  template_app (template_hole 6, template_var 1))
                )
            ),
        template_predicate
         (template_app (template_hole 5, template_var 0))],
       template_equation
        (template_app
          (template_app
            (template_app (template_hole 3, template_hole 2),
             template_var 0),
           template_var 1),
         template_app
          (template_app
            (template_app (template_hole 1, template_var 2),
             template_var 0),
           template_app
            (template_app
              (template_app (template_hole 3, template_hole 2),
               template_app (template_hole 0, template_var 2)),
             template_var 1))))),
    ("Unary_PCF.\<delta>_\<pi>",
     "[| ?i < ar ?T; ?j <= ar (?T !- ?i) |]
      ==> \<delta> (\<pi> ?T ?i ?j) < \<delta> ?T",
     template_implication
      ([template_inequation
         (less_than, template_var 2,
          template_app
           (template_hole 6,
            template_app (template_hole 5, template_var 1))),
        template_inequation
         (less_equals, template_var 0,
          template_app
           (template_hole 6,
            template_app
             (template_hole 5,
              template_app
               (template_app (template_hole 3, template_var 1),
                template_var 2))))],
       template_inequation
        (less_than,
         template_app
          (template_hole 1,
           template_app
            (template_app
              (template_app (template_hole 0, template_var 1),
               template_var 2),
             template_var 0)),
         template_app (template_hole 1, template_var 1)))),
    ("Unary_PCF.App_Abs_eq_Apps_Abs",
     "(\<Lambda>\<langle>?T\<rangle> ?r \<cdot> ?t =
       \<Lambda>\<langle>?T'\<rangle> ?r' \<bullet> ?ss) =
      (?T = ?T' & ?r = ?r' & ?ss = [?t])",
     template_bimplication
      (template_equation
        (template_app
          (template_app
            (template_hole 7,
             template_app
              (template_app (template_hole 6, template_var 5),
               template_var 4)),
           template_var 3),
         template_app
          (template_app
            (template_hole 5,
             template_app
              (template_app (template_hole 6, template_var 2),
               template_var 1)),
           template_var 0)),
       template_predicate
        (
           template_app
            (template_app
              (template_hole 4,
               template_app
                (template_app (template_hole 3, template_var 5),
                 template_var 2)),
             template_app
              (template_app
                (template_hole 4,
                 template_app
                  (template_app (template_hole 8, template_var 4),
                   template_var 1)),
               template_app
                (template_app (template_hole 2, template_var 0),
                 template_app
                  (template_app (template_hole 1, template_var 3),
                   template_hole 0))))
           ))),
    ("Unary_PCF.welltypedE",
     "[| ?e1.0 \<cdot> ?e2.0 ::: ?T;
         !!T. [| ?e1.0 ::: T \<rightarrow> ?T; ?e2.0 ::: T |] ==> ?P |]
      ==> ?P",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_hole 3,
                template_app
                 (template_app (template_hole 2, template_var 3),
                  template_var 2)),
              template_var 1)
            ),
        template_predicate (template_app (template_hole 1, t_empty))],
       template_predicate (template_var 0))),
    ("Unary_PCF.welltyped_Seqs_iff",
     "?es ?? ?e ::: ?T =
      ((?es ~= [] --> ?T = \<B>) &
       (ALL e:set ?es. e ::: \<B>) & ?e ::: ?T)",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_hole 10,
                template_app
                 (template_app (template_hole 9, template_var 2),
                  template_var 1)),
              template_var 0)
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 8,
               template_app
                (template_app
                  (template_hole 7,
                   template_app
                    (template_hole 6,
                     template_app
                      (template_app (template_hole 5, template_var 2),
                       template_hole 4))),
                 template_app
                  (template_app (template_hole 3, template_var 0),
                   template_hole 2))),
             template_app
              (template_app
                (template_hole 8,
                 template_app
                  (template_app
                    (template_hole 1,
                     template_app (template_hole 0, template_var 2)),
                   t_empty)),
               template_app
                (template_app (template_hole 10, template_var 1),
                 template_var 0)))
           ))),
    ("Unary_PCF.open_open_id",
     "[| ?i ~= ?j;
         Unary_PCF.open ?i ?t (Unary_PCF.open ?j ?t' ?u) =
         Unary_PCF.open ?j ?t' ?u |]
      ==> Unary_PCF.open ?i ?t ?u = ?u",
     template_implication
      ([template_negation
         (template_equation (template_var 4, template_var 3)),
        template_equation
         (template_app
           (template_app
             (template_app (template_hole 0, template_var 4),
              template_var 2),
            template_app
             (template_app
               (template_app (template_hole 0, template_var 3),
                template_var 1),
              template_var 0)),
          template_app
           (template_app
             (template_app (template_hole 0, template_var 3),
              template_var 1),
            template_var 0))],
       template_equation
        (template_app
          (template_app
            (template_app (template_hole 0, template_var 4),
             template_var 2),
           template_var 0),
         template_var 0))),
    ("Unary_PCF.welltypedE",
     "[| ?e1.0 ? ?e2.0 ::: ?T;
         [| ?T = \<B>; ?e1.0 ::: \<B>; ?e2.0 ::: \<B> |] ==> ?P |]
      ==> ?P",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_hole 3,
                template_app
                 (template_app (template_hole 2, template_var 3),
                  template_var 2)),
              template_var 1)
            ),
        template_implication
         ([template_equation (template_var 1, template_hole 0)],
          template_implication
           ([template_predicate
              (
                 template_app
                  (template_app (template_hole 3, template_var 3),
                   template_hole 0)
                 )],
            template_implication
             ([template_predicate
                (
                   template_app
                    (template_app (template_hole 3, template_var 2),
                     template_hole 0)
                   )],
              template_predicate (template_var 0))))],
       template_predicate (template_var 0))),
    ("Unary_PCF.subst_open_Var",
     "[| ?xT ~= ?yU; lc ?u |]
      ==> subst ?xT ?u (open_Var ?i ?yU ?v) =
          open_Var ?i ?yU (subst ?xT ?u ?v)",
     template_implication
      ([template_negation
         (template_equation (template_var 4, template_var 3)),
        template_predicate
         (template_app (template_hole 4, template_var 2))],
       template_equation
        (template_app
          (template_app
            (template_app (template_hole 2, template_var 4),
             template_var 2),
           template_app
            (template_app
              (template_app (template_hole 1, template_var 1),
               template_app (template_hole 0, template_var 3)),
             template_var 0)),
         template_app
          (template_app
            (template_app (template_hole 1, template_var 1),
             template_app (template_hole 0, template_var 3)),
           template_app
            (template_app
              (template_app (template_hole 2, template_var 4),
               template_var 2),
             template_var 0))))),
    ("Unary_PCF.welltyped_Abs_fresh",
     "[| fresh (?x, ?T) ?u; open0_Var (?x, ?T) ?u ::: ?U |]
      ==> \<Lambda>\<langle>?T\<rangle> ?u ::: ?T \<rightarrow> ?U",
     template_implication
      ([template_negation
         (
            template_predicate
             (
                template_app
                 (template_app
                   (template_hole 8,
                    template_app
                     (template_app (template_hole 7, template_var 3),
                      template_var 2)),
                  template_app (template_hole 6, template_var 1))
                )
            ),
        template_predicate
         (
            template_app
             (template_app
               (template_hole 5,
                template_app
                 (template_app
                   (template_app (template_hole 4, template_hole 3),
                    template_app
                     (template_hole 2,
                      template_app
                       (template_app (template_hole 7, template_var 3),
                        template_var 2))),
                  template_var 1)),
              template_var 0)
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 5,
               template_app
                (template_app (template_hole 1, template_var 2),
                 template_var 1)),
             template_app
              (template_app (template_hole 0, template_var 2),
               template_var 0))
           ))),
    ("Unary_PCF.subst_close_Var",
     "[| ?xT ~= ?yU; fresh ?yU ?u |]
      ==> subst ?xT ?u (close_Var ?i ?yU ?t) =
          close_Var ?i ?yU (subst ?xT ?u ?t)",
     template_implication
      ([template_negation
         (template_equation (template_var 4, template_var 3)),
        template_negation
         (
            template_predicate
             (
                template_app
                 (template_app (template_hole 4, template_var 3),
                  template_app (template_hole 3, template_var 2))
                )
            )],
       template_equation
        (template_app
          (template_app
            (template_app (template_hole 1, template_var 4),
             template_var 2),
           template_app
            (template_app
              (template_app (template_hole 0, template_var 1),
               template_var 3),
             template_var 0)),
         template_app
          (template_app
            (template_app (template_hole 0, template_var 1),
             template_var 3),
           template_app
            (template_app
              (template_app (template_hole 1, template_var 4),
               template_var 2),
             template_var 0))))),
    ("Unary_PCF.open_Var_inj",
     "[| fresh ?xT ?t; fresh ?xT ?u;
         open_Var ?i ?xT ?t = open_Var ?i ?xT ?u |]
      ==> ?t = ?u",
     template_implication
      ([template_negation
         (
            template_predicate
             (
                template_app
                 (template_app (template_hole 4, template_var 3),
                  template_app (template_hole 3, template_var 2))
                )
            ),
        template_negation
         (
            template_predicate
             (
                template_app
                 (template_app (template_hole 4, template_var 3),
                  template_app (template_hole 3, template_var 1))
                )
            ),
        template_equation
         (template_app
           (template_app
             (template_app (template_hole 1, template_var 0),
              template_app (template_hole 0, template_var 3)),
            template_var 2),
          template_app
           (template_app
             (template_app (template_hole 1, template_var 0),
              template_app (template_hole 0, template_var 3)),
            template_var 1))],
       template_equation (template_var 2, template_var 1))),
    ("Unary_PCF.fold_eq_Fun_iff",
     "(fold (\<rightarrow>) (rev ?Ts) ?T = ?U \<rightarrow> ?V) =
      (?Ts = [] & ?T = ?U \<rightarrow> ?V |
       (EX Us. ?Ts = ?U # Us & fold (\<rightarrow>) (rev Us) ?T = ?V))",
     template_bimplication
      (template_equation
        (template_app
          (template_app
            (template_app (template_hole 8, template_hole 7),
             template_app (template_hole 6, template_var 3)),
           template_var 2),
         template_app
          (template_app (template_hole 7, template_var 1), template_var 0)),
       template_predicate
        (
           template_app
            (template_app
              (template_hole 5,
               template_app
                (template_app
                  (template_hole 4,
                   template_app
                    (template_app (template_hole 3, template_var 3),
                     template_hole 2)),
                 template_app
                  (template_app (template_hole 9, template_var 2),
                   template_app
                    (template_app (template_hole 7, template_var 1),
                     template_var 0)))),
             template_app (template_hole 1, t_empty))
           ))),
    ("Unary_PCF.type_induct",
     "(!!T. [| !!T1 T2. T = T1 \<rightarrow> T2 ==> ?P T1;
               !!T1 T2. T = T1 \<rightarrow> T2 ==> ?P T2 |]
            ==> ?P T) ==>
      ?P ?T",
     template_implication
      ([template_predicate (template_app (template_hole 3, t_empty))],
       template_predicate (template_app (template_var 1, template_var 0)))),
    ("Unary_PCF.welltypedE",
     "[| \<Lambda>\<langle>?T\<rangle> ?e ::: ?U;
         !!X U.
            [| ?U = ?T \<rightarrow> U;
               ALL x. (x, ?T) |\<notin>| X --> open0_Var (x, ?T) ?e ::: U |]
            ==> ?P |]
      ==> ?P",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_hole 13,
                template_app
                 (template_app (template_hole 12, template_var 3),
                  template_var 2)),
              template_var 1)
            ),
        template_predicate (template_app (template_hole 11, t_empty))],
       template_predicate (template_var 0))),
    ("Unary_PCF.variant_inj2",
     "[| CHR ''*'' ~: set ?b1.0; CHR ''*'' ~: set ?b2.0;
         variant ?i ?b1.0 = variant ?j ?b2.0 |]
      ==> ?b1.0 = ?b2.0",
     template_implication
      ([template_negation
         (
            template_predicate
             (
                template_app
                 (template_app
                   (template_hole 6,
                    template_app
                     (template_app
                       (template_app
                         (template_app
                           (template_app
                             (template_app
                               (template_app
                                 (template_app
                                   (template_hole 5, template_hole 4),
                                  template_hole 3),
                                template_hole 4),
                              template_hole 3),
                            template_hole 4),
                          template_hole 3),
                        template_hole 4),
                      template_hole 4)),
                  template_app (template_hole 2, template_var 3))
                )
            ),
        template_negation
         (
            template_predicate
             (
                template_app
                 (template_app
                   (template_hole 6,
                    template_app
                     (template_app
                       (template_app
                         (template_app
                           (template_app
                             (template_app
                               (template_app
                                 (template_app
                                   (template_hole 5, template_hole 4),
                                  template_hole 3),
                                template_hole 4),
                              template_hole 3),
                            template_hole 4),
                          template_hole 3),
                        template_hole 4),
                      template_hole 4)),
                  template_app (template_hole 2, template_var 2))
                )
            ),
        template_equation
         (template_app
           (template_app (template_hole 0, template_var 1), template_var 3),
          template_app
           (template_app (template_hole 0, template_var 0),
            template_var 2))],
       template_equation (template_var 3, template_var 2))),
    ("Unary_PCF.open_Var_open_Var_close_Var",
     "[| ?i ~= ?j; ?xT ~= ?yU; fresh ?yU ?t |]
      ==> open_Var ?i ?yU (open_Var ?j ?zV (close_Var ?j ?xT ?t)) =
          open_Var ?j ?zV (close_Var ?j ?xT (open_Var ?i ?yU ?t))",
     template_implication
      ([template_negation
         (template_equation (template_var 5, template_var 4)),
        template_negation
         (template_equation (template_var 3, template_var 2)),
        template_negation
         (
            template_predicate
             (
                template_app
                 (template_app (template_hole 5, template_var 2),
                  template_app (template_hole 4, template_var 1))
                )
            )],
       template_equation
        (template_app
          (template_app
            (template_app (template_hole 2, template_var 5),
             template_app (template_hole 1, template_var 2)),
           template_app
            (template_app
              (template_app (template_hole 2, template_var 4),
               template_app (template_hole 1, template_var 0)),
             template_app
              (template_app
                (template_app (template_hole 0, template_var 4),
                 template_var 3),
               template_var 1))),
         template_app
          (template_app
            (template_app (template_hole 2, template_var 4),
             template_app (template_hole 1, template_var 0)),
           template_app
            (template_app
              (template_app (template_hole 0, template_var 4),
               template_var 3),
             template_app
              (template_app
                (template_app (template_hole 2, template_var 5),
                 template_app (template_hole 1, template_var 2)),
               template_var 1)))))),
    ("Unary_PCF.fv_constant0", "fv (constant0 ?T) = {|(''bool'', \<B>)|}",
     template_equation
      (template_app
        (template_hole 10, template_app (template_hole 9, template_var 0)),
       template_app
        (template_app
          (template_hole 8,
           template_app
            (template_app
              (template_hole 7,
               template_app
                (template_app
                  (template_hole 6,
                   template_app
                    (template_app
                      (template_app
                        (template_app
                          (template_app
                            (template_app
                              (template_app
                                (template_app
                                  (template_hole 5, template_hole 4),
                                 template_hole 3),
                               template_hole 4),
                             template_hole 4),
                           template_hole 4),
                         template_hole 3),
                       template_hole 3),
                     template_hole 4)),
                 template_app
                  (template_app
                    (template_hole 6,
                     template_app
                      (template_app
                        (template_app
                          (template_app
                            (template_app
                              (template_app
                                (template_app
                                  (template_app
                                    (template_hole 5, template_hole 3),
                                   template_hole 3),
                                 template_hole 3),
                               template_hole 3),
                             template_hole 4),
                           template_hole 3),
                         template_hole 3),
                       template_hole 4)),
                   template_app
                    (template_app
                      (template_hole 6,
                       template_app
                        (template_app
                          (template_app
                            (template_app
                              (template_app
                                (template_app
                                  (template_app
                                    (template_app
(template_hole 5, template_hole 3),
                                     template_hole 3),
                                   template_hole 3),
                                 template_hole 3),
                               template_hole 4),
                             template_hole 3),
                           template_hole 3),
                         template_hole 4)),
                     template_app
                      (template_app
                        (template_hole 6,
                         template_app
                          (template_app
                            (template_app
                              (template_app
                                (template_app
                                  (template_app
                                    (template_app
(template_app (template_hole 5, template_hole 4), template_hole 4),
                                     template_hole 3),
                                   template_hole 3),
                                 template_hole 4),
                               template_hole 3),
                             template_hole 3),
                           template_hole 4)),
                       template_hole 2))))),
             template_hole 1)),
         template_hole 0))),
    ("Unary_PCF.\<pi>_induct",
     "[| ?i < ar ?T; ?j <= ar (?T !- ?i); !!T i. i < ar T ==> ?P T i 0;
         !!T i j.
            [| i < ar T; j < ar (T !- i); ?P (T !- i) j 0;
               ALL x<ar (T !- i !- j). ?P (T !- i) j (x + 1) |]
            ==> ?P T i (j + 1) |]
      ==> ?P ?T ?i ?j",
     template_implication
      ([template_inequation
         (less_than, template_var 3,
          template_app
           (template_hole 10,
            template_app (template_hole 9, template_var 2))),
        template_inequation
         (less_equals, template_var 1,
          template_app
           (template_hole 10,
            template_app
             (template_hole 9,
              template_app
               (template_app (template_hole 7, template_var 2),
                template_var 3)))),
        template_predicate (template_app (template_hole 6, t_empty)),
        template_predicate (template_app (template_hole 6, t_empty))],
       template_predicate
        (
           template_app
            (template_app
              (template_app (template_var 0, template_var 2),
               template_var 3),
             template_var 1)
           )))]:
   (string * thm * template) list
### theory "Draft.Unary_PCFMoreTemplates"
### 0.515s elapsed time, 0.750s cpu time, 0.055s GC time
val it = (): unit
