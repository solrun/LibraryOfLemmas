Loading theory "HOL-Library.Cancellation" (required by "Draft.Goodstein_SequenceMoreTemplates" via "Draft.Goodstein_Sequence" via "Draft.Multiset_More" via "HOL-Library.Multiset_Order" via "HOL-Library.Multiset")
Loading theory "HOL-Library.Infinite_Set" (required by "Draft.Goodstein_SequenceMoreTemplates" via "Draft.Goodstein_Sequence" via "Draft.Syntactic_Ordinal" via "HOL-Library.Extended_Nat" via "HOL-Library.Order_Continuity" via "HOL-Library.Countable_Complete_Lattices" via "HOL-Library.Countable_Set")
Loading theory "HOL-Library.Nat_Bijection" (required by "Draft.Goodstein_SequenceMoreTemplates" via "Draft.ExtrEqs" via "HOL-Library.Stream")
Loading theory "HOL-Library.Function_Algebras" (required by "Draft.Goodstein_SequenceMoreTemplates" via "Draft.ExtrEqs" via "HOL-Library.BigO")
instantiation
  fun :: (type, plus) plus
  plus_fun == plus :: ('a => 'b) => ('a => 'b) => 'a => 'b
instantiation
  fun :: (type, zero) zero
  zero_fun == zero_class.zero :: 'a => 'b
instantiation
  fun :: (type, times) times
  times_fun == times :: ('a => 'b) => ('a => 'b) => 'a => 'b
instantiation
  fun :: (type, one) one
  one_fun == one_class.one :: 'a => 'b
Found termination order: "(%p. size (snd p)) <*mlex*> {}"
### theory "HOL-Library.Function_Algebras"
### 0.119s elapsed time, 0.498s cpu time, 0.038s GC time
Loading theory "HOL-Library.Old_Datatype" (required by "Draft.Goodstein_SequenceMoreTemplates" via "Draft.Goodstein_Sequence" via "Draft.Syntactic_Ordinal" via "HOL-Library.Extended_Nat" via "HOL-Library.Countable")
consts
  enumerate :: "'a set => nat => 'a"
Found termination order: "size_list size <*mlex*> {}"
### theory "HOL-Library.Nat_Bijection"
### 0.312s elapsed time, 1.260s cpu time, 0.108s GC time
Loading theory "HOL-Library.Stream" (required by "Draft.Goodstein_SequenceMoreTemplates" via "Draft.ExtrEqs")
signature CANCEL = sig val proc: Proof.context -> cterm -> thm option end
functor Cancel_Fun (Data: CANCEL_NUMERALS_DATA): CANCEL
### theory "HOL-Library.Infinite_Set"
### 0.316s elapsed time, 1.271s cpu time, 0.108s GC time
Loading theory "HOL-Library.Product_Plus" (required by "Draft.Goodstein_SequenceMoreTemplates" via "Draft.Goodstein_Sequence" via "Draft.Syntactic_Ordinal" via "HOL-Library.Product_Order")
signature CANCEL_DATA =
  sig
    val dest_coeff: term -> int * term
    val dest_sum: term -> term list
    val find_first_coeff: term -> term list -> int * term list
    val mk_coeff: int * term -> term
    val mk_sum: typ -> term list -> term
    val norm_ss1: simpset
    val norm_ss2: simpset
    val norm_tac: Proof.context -> tactic
    val numeral_simp_tac: Proof.context -> tactic
    val prove_conv:
       tactic list -> Proof.context -> thm list -> term * term -> thm option
    val simplify_meta_eq: Proof.context -> thm -> thm
    val trans_tac: Proof.context -> thm option -> tactic
  end
structure Cancel_Data: CANCEL_DATA
instantiation
  prod :: (zero, zero) zero
  zero_prod == zero_class.zero :: 'a * 'b
instantiation
  prod :: (plus, plus) plus
  plus_prod == plus :: 'a * 'b => 'a * 'b => 'a * 'b
instantiation
  prod :: (minus, minus) minus
  minus_prod == minus :: 'a * 'b => 'a * 'b => 'a * 'b
instantiation
  prod :: (uminus, uminus) uminus
  uminus_prod == uminus :: 'a * 'b => 'a * 'b
signature CANCEL_SIMPROCS =
  sig
    val diff_cancel: Proof.context -> cterm -> thm option
    val eq_cancel: Proof.context -> cterm -> thm option
    val less_cancel: Proof.context -> cterm -> thm option
    val less_eq_cancel: Proof.context -> cterm -> thm option
  end
structure Cancel_Simprocs: CANCEL_SIMPROCS
### theory "HOL-Library.Product_Plus"
### 0.095s elapsed time, 0.377s cpu time, 0.000s GC time
Loading theory "HOL-Library.Product_Order" (required by "Draft.Goodstein_SequenceMoreTemplates" via "Draft.Goodstein_Sequence" via "Draft.Syntactic_Ordinal")
### theory "HOL-Library.Cancellation"
### 0.420s elapsed time, 1.691s cpu time, 0.108s GC time
Loading theory "HOL-Library.Multiset" (required by "Draft.Goodstein_SequenceMoreTemplates" via "Draft.Goodstein_Sequence" via "Draft.Multiset_More" via "HOL-Library.Multiset_Order")
instantiation
  prod :: (ord, ord) ord
  less_eq_prod == less_eq :: 'a * 'b => 'a * 'b => bool
  less_prod == less :: 'a * 'b => 'a * 'b => bool
instantiation
  prod :: (inf, inf) inf
  inf_prod == inf :: 'a * 'b => 'a * 'b => 'a * 'b
instantiation
  prod :: (sup, sup) sup
  sup_prod == sup :: 'a * 'b => 'a * 'b => 'a * 'b
instantiation
  prod :: (top, top) top
  top_prod == top :: 'a * 'b
signature OLD_DATATYPE =
  sig
    val check_specs: spec list -> theory -> spec list * Proof.context
    type config = {quiet: bool, strict: bool}
    val default_config: config
    type descr =
       (int * (string * dtyp list * (string * dtyp list) list)) list
    val distinct_lemma: thm
    datatype dtyp
    = DtRec of int | DtTFree of string * sort | DtType of string * dtyp list
    type info =
       {case_cong: thm,
        case_cong_weak: thm,
        case_name: string,
        case_rewrites: thm list,
        descr: descr,
        distinct: thm list,
        exhaust: thm,
        index: int,
        induct: thm,
        inducts: thm list,
        inject: thm list,
        nchotomy: thm,
        rec_names: string list,
        rec_rewrites: thm list, split: thm, split_asm: thm}
    val read_specs: spec_cmd list -> theory -> spec list * Proof.context
    type spec =
       (binding * (string * sort) list * mixfix) *
       (binding * typ list * mixfix) list
    type spec_cmd =
       (binding * (string * string option) list * mixfix) *
       (binding * string list * mixfix) list
  end
structure Old_Datatype: OLD_DATATYPE
### theory "HOL-Library.Old_Datatype"
### 0.409s elapsed time, 1.602s cpu time, 0.145s GC time
Loading theory "HOL-Library.Set_Algebras" (required by "Draft.Goodstein_SequenceMoreTemplates" via "Draft.ExtrEqs" via "HOL-Library.BigO")
instantiation
  prod :: (bot, bot) bot
  bot_prod == bot :: 'a * 'b
instantiation
  prod :: (Inf, Inf) Inf
  Inf_prod == Inf :: ('a * 'b) set => 'a * 'b
instantiation
  prod :: (Sup, Sup) Sup
  Sup_prod == Sup :: ('a * 'b) set => 'a * 'b
instantiation
  set :: (plus) plus
  plus_set == plus :: 'a set => 'a set => 'a set
instantiation
  set :: (times) times
  times_set == times :: 'a set => 'a set => 'a set
instantiation
  multiset :: (type) cancel_comm_monoid_add
  zero_multiset == zero_class.zero :: 'a multiset
  minus_multiset == minus :: 'a multiset => 'a multiset => 'a multiset
  plus_multiset == plus :: 'a multiset => 'a multiset => 'a multiset
instantiation
  set :: (zero) zero
  zero_set == zero_class.zero :: 'a set
instantiation
  set :: (one) one
  one_set == one_class.one :: 'a set
### theory "HOL-Library.Product_Order"
### 0.237s elapsed time, 0.913s cpu time, 0.165s GC time
Loading theory "HOL-Library.Sublist" (required by "Draft.Goodstein_SequenceMoreTemplates" via "Draft.Goodstein_Sequence" via "Draft.Multiset_More")
consts
  shift :: "'a list => 'a stream => 'a stream"
### theory "HOL-Library.Set_Algebras"
### 0.254s elapsed time, 0.985s cpu time, 0.174s GC time
Loading theory "HOL-Library.Tree" (required by "Draft.Goodstein_SequenceMoreTemplates" via "Draft.ExtrEqs" via "Draft.Templates")
Proofs for coinductive predicate(s) "streamsp"
  Proving monotonicity ...
consts
  snth :: "'a stream => nat => 'a"
consts
  stake :: "nat => 'a stream => 'a list"
consts
  sdrop :: "nat => 'a stream => 'a stream"
consts
  sfilter :: "('a => bool) => 'a stream => 'a stream"
consts
  prefixes :: "'a list => 'a list list"
consts
  cycle :: "'a list => 'a stream"
consts
  siterate :: "('a => 'a) => 'a => 'a stream"
consts
  flat :: "'a list stream => 'a stream"
Found termination order: "(%p. length (snd p)) <*mlex*> {}"
consts
  sinterleave :: "'a stream => 'a stream => 'a stream"
consts
  szip :: "'a stream => 'b stream => ('a * 'b) stream"
### Partially applied constant "Multiset.inter_mset" on left hand side of equation, in theorem:
### semilattice_inf.Inf_fin (\<inter>#) (set (?x # ?xs)) ==
### fold (\<inter>#) ?xs ?x
consts
  smap2 :: "('a => 'b => 'c) => 'a stream => 'b stream => 'c stream"
### theory "HOL-Library.Stream"
### 1.124s elapsed time, 4.277s cpu time, 0.938s GC time
Loading theory "HOL-Library.Countable" (required by "Draft.Goodstein_SequenceMoreTemplates" via "Draft.Goodstein_Sequence" via "Draft.Syntactic_Ordinal" via "HOL-Library.Extended_Nat")
### Partially applied constant "Multiset.union_mset" on left hand side of equation, in theorem:
### semilattice_sup.Sup_fin (\<union>#) (set (?x # ?xs)) ==
### fold (\<union>#) ?xs ?x
consts
  left :: "'a tree => 'a tree"
consts
  right :: "'a tree => 'a tree"
Found termination order: "size <*mlex*> {}"
consts
  suffixes :: "'a list => 'a list list"
Proofs for inductive predicate(s) "list_emb"
Found termination order: "size <*mlex*> {}"
  Proving monotonicity ...
signature MULTISET_SIMPROCS =
  sig
    val subset_cancel_msets: Proof.context -> cterm -> thm option
    val subseteq_cancel_msets: Proof.context -> cterm -> thm option
  end
structure Multiset_Simprocs: MULTISET_SIMPROCS
instantiation
  multiset :: (type) Inf
  Inf_multiset == Inf :: 'a multiset set => 'a multiset
Found termination order: "size <*mlex*> {}"
instantiation
  multiset :: (type) Sup
  Sup_multiset == Sup :: 'a multiset set => 'a multiset
class height = type +
  fixes height :: "'a => nat"
instantiation
  tree :: (type) height
  height_tree == height :: 'a tree => nat
Found termination order: "size <*mlex*> {}"
### Additional type variable(s) in locale specification "countable": 'a
instantiation
  multiset :: (type) size
  size_multiset == size :: 'a multiset => nat
Found termination order: "size <*mlex*> {}"
class countable = type +
  assumes "ex_inj": "EX to_nat. inj to_nat"
locale comp_fun_commute
  fixes f :: "'a => 'b => 'b"
  assumes "comp_fun_commute f"
Found termination order: "size <*mlex*> {}"
Found termination order: "size <*mlex*> {}"
consts
  mset :: "'a list => 'a multiset"
Proofs for inductive predicate(s) "finite_item"
  Proving monotonicity ...
Found termination order: "size <*mlex*> {}"
Found termination order: "size <*mlex*> {}"
consts
  sublists :: "'a list => 'a list list"
Found termination order: "size <*mlex*> {}"
class linorder = order +
  assumes "linear": "!!x y. x <= y | y <= x"
val old_countable_datatype_tac = fn: Proof.context -> int -> tactic
### theory "HOL-Library.Sublist"
### 1.712s elapsed time, 6.600s cpu time, 1.326s GC time
Loading theory "HOL-Library.BigO" (required by "Draft.Goodstein_SequenceMoreTemplates" via "Draft.ExtrEqs")
Found termination order: "(%p. size (fst p)) <*mlex*> {}"
### ML warning (line 93 of "~~/src/HOL/Tools/BNF/bnf_lfp_countable.ML"):
### Pattern is not exhaustive.
### ML warning (line 139 of "~~/src/HOL/Tools/BNF/bnf_lfp_countable.ML"):
### Pattern is not exhaustive.
### ML warning (line 143 of "~~/src/HOL/Tools/BNF/bnf_lfp_countable.ML"):
### Matches are not exhaustive.
### ML warning (line 145 of "~~/src/HOL/Tools/BNF/bnf_lfp_countable.ML"):
### Matches are not exhaustive.
### ML warning (line 156 of "~~/src/HOL/Tools/BNF/bnf_lfp_countable.ML"):
### Pattern is not exhaustive.
signature BNF_LFP_COUNTABLE =
  sig
    val countable_datatype_tac: Proof.context -> tactic
    val derive_encode_injectives_thms:
       Proof.context -> string list -> thm list
  end
structure BNF_LFP_Countable: BNF_LFP_COUNTABLE
locale comm_monoid_mset
  fixes f :: "'a => 'a => 'a"  (infixl \<open>\<^bold>*\<close> 70)
    and z :: "'a"  (\<open>\<^bold>1\<close>)
  assumes "comm_monoid_mset (\<^bold>*) \<^bold>1"
val countable_datatype_tac = fn: Proof.context -> thm -> thm Seq.seq
val countable_tac = fn: Proof.context -> int -> tactic
Found termination order: "size <*mlex*> {}"
class comm_monoid_add = ab_semigroup_add + monoid_add +
  assumes "add_0": "!!a. (0::'a) + a = a"
Found termination order: "(%p. size (snd p)) <*mlex*> {}"
class comm_monoid_add = ab_semigroup_add + monoid_add +
  assumes "add_0": "!!a. (0::'a) + a = a"
class canonically_ordered_monoid_add = ordered_comm_monoid_add +
  assumes "le_iff_add": "!!a b. (a <= b) = (EX c. b = a + c)"
### theory "HOL-Library.Countable"
### 1.584s elapsed time, 6.096s cpu time, 1.713s GC time
Loading theory "HOL-Library.Countable_Set" (required by "Draft.Goodstein_SequenceMoreTemplates" via "Draft.Goodstein_Sequence" via "Draft.Syntactic_Ordinal" via "HOL-Library.Extended_Nat" via "HOL-Library.Order_Continuity" via "HOL-Library.Countable_Complete_Lattices")
Found termination order: "size <*mlex*> {}"
class comm_monoid_mult = ab_semigroup_mult + monoid_mult + dvd +
  assumes "mult_1": "!!a. (1::'a) * a = a"
locale comm_monoid_set
  fixes f :: "'a => 'a => 'a"  (infixl \<open>\<^bold>*\<close> 70)
    and z :: "'a"  (\<open>\<^bold>1\<close>)
  assumes "comm_monoid_set (\<^bold>*) \<^bold>1"
### theory "HOL-Library.Tree"
### 2.541s elapsed time, 9.741s cpu time, 2.498s GC time
Loading theory "Draft.Templates" (required by "Draft.Goodstein_SequenceMoreTemplates" via "Draft.ExtrEqs")
datatype template_term
=
     t_empty
   | template_app of template_term * template_term
   | template_hole of int
   | template_var of int
datatype sign
= equals | greater_equals | greater_than | less_equals | less_than
datatype template
=
     template_bimplication of template * template
   | template_dunno
   | template_equation of template_term * template_term
   | template_implication of template list * template
   | template_inequation of sign * template_term * template_term
   | template_negation of template
   | template_predicate of template_term
constructor t_empty: template_term
constructor template_app: template_term * template_term -> template_term
constructor template_hole: int -> template_term
constructor template_var: int -> template_term
constructor equals: sign
constructor greater_equals: sign
constructor greater_than: sign
constructor less_equals: sign
constructor less_than: sign
constructor template_bimplication: template * template -> template
constructor template_dunno: template
constructor template_equation: template_term * template_term -> template
constructor template_implication: template list * template -> template
constructor template_inequation:
   sign * template_term * template_term -> template
constructor template_negation: template -> template
constructor template_predicate: template_term -> template
val vfs = fn: term -> (indexname * typ) list * (string * typ) list
val indexOf = fn: ''a list -> ''a -> int -> int
val has_eq = fn: term -> bool
val term2template = fn:
   (indexname * typ) list -> (string * typ) list -> term -> template_term
val lemma2predicate = fn: term -> term -> template
val makeTemplatewithContext = fn: term -> term -> template
val lemma2template = fn: term -> template
val thm2template = fn: thm -> template
val tterm2string = fn: template_term -> string
val template2string = fn: template -> string
val t = "height ?t <= size ?t": thm
val th =
   Const ("HOL.Trueprop", "bool => prop") $
     (Const ("Orderings.ord_class.less_eq", "nat => nat => bool") $
       (Const ("Tree.height_class.height", "?'a tree => nat") $
         Var (("t", 0), "?'a tree")) $
       (Const ("Nat.size_class.size", "?'a tree => nat") $
         Var (("t", 0), "?'a tree"))):
   term
### theory "Draft.Templates"
### 0.091s elapsed time, 0.356s cpu time, 0.094s GC time
### theory "HOL-Library.BigO"
### 1.116s elapsed time, 4.184s cpu time, 1.352s GC time
Loading theory "Draft.ExtrEqs" (required by "Draft.Goodstein_SequenceMoreTemplates")
### theory "HOL-Library.Countable_Set"
### 0.475s elapsed time, 1.799s cpu time, 0.192s GC time
Loading theory "HOL-Library.Countable_Complete_Lattices" (required by "Draft.Goodstein_SequenceMoreTemplates" via "Draft.Goodstein_Sequence" via "Draft.Syntactic_Ordinal" via "HOL-Library.Extended_Nat" via "HOL-Library.Order_Continuity")
class linorder = order +
  assumes "linear": "!!x y. x <= y | y <= x"
class countable_complete_lattice = Inf + Sup + lattice + bot + top +
  assumes "ccInf_lower": "!!A x. [| countable A; x : A |] ==> Inf A <= x"
  assumes
    "ccInf_greatest":
      "!!A z. [| countable A; !!x. x : A ==> z <= x |] ==> z <= Inf A"
  assumes "ccSup_upper": "!!A x. [| countable A; x : A |] ==> x <= Sup A"
  assumes
    "ccSup_least":
      "!!A z. [| countable A; !!x. x : A ==> x <= z |] ==> Sup A <= z"
  assumes "ccInf_empty": "Inf {} = top"
  assumes "ccSup_empty": "Sup {} = bot"
instantiation
  multiset :: (preorder) order
  less_eq_multiset == less_eq :: 'a multiset => 'a multiset => bool
  less_multiset == less :: 'a multiset => 'a multiset => bool
instantiation
  multiset :: (preorder) ordered_ab_semigroup_add
Proofs for inductive predicate(s) "pw_leq"
  Proving monotonicity ...
val eqpattern =
   Pattern
    (
       Const ("HOL.Trueprop", "bool => prop") $
         (Const ("HOL.eq", "?'a => ?'a => bool") $
           Var (("_dummy_", 1), "?'a") $ Var (("_dummy_", 2), "?'a"))
       ):
   term Find_Theorems.criterion
val badeqpattern = Pattern (Const ("Pure.eq", "?'a => ?'a => prop")):
   term Find_Theorems.criterion
val undefpattern =
   Pattern
    (
       Const ("HOL.Trueprop", "bool => prop") $
         (Const ("HOL.eq", "?'a => ?'a => bool") $
           Var (("_dummy_", 1), "?'a") $ Const ("HOL.undefined", "?'a"))
       ):
   term Find_Theorems.criterion
val thmpattern =
   Pattern
    (Const ("HOL.Trueprop", "bool => prop") $ Var (("_dummy_", 1), "bool")):
   term Find_Theorems.criterion
val badnames =
   ["*nitpick*", "*Nitpick*", "*full_exhaustive*", "*_def*", "Enum.finite*",
    "*Quickcheck*", "ATP*", "*Nunchaku*", "*Code*", "*BNF*", "*SMT*",
    "*.*.*"]:
   string list
val unwanted_names =
   [(false, Name "*nitpick*"), (false, Name "*Nitpick*"),
    (false, Name "*full_exhaustive*"), (false, Name "*_def*"),
    (false, Name "Enum.finite*"), (false, Name "*Quickcheck*"),
    (false, Name "ATP*"), (false, Name "*Nunchaku*"),
    (false, Name "*Code*"), (false, Name "*BNF*"), (false, Name "*SMT*"),
    (false, Name "*.*.*")]:
   (bool * term Find_Theorems.criterion) list
val has_vars = fn: term -> bool
val get_all_eqs = fn: string -> Proof.context -> (string * thm) list
val get_all_thms = fn: string -> Proof.context -> (string * thm) list
val get_noneq_thms = fn: string -> Proof.context -> (string * thm) list
val template_eqs = fn:
   string -> Proof.context -> (string * thm * template) list
val template_thms = fn:
   string -> Proof.context -> (string * thm * template) list
### theory "Draft.ExtrEqs"
### 0.920s elapsed time, 2.898s cpu time, 1.133s GC time
Found termination order: "(%p. length (fst p)) <*mlex*> {}"
instantiation
  multiset :: (equal) equal
  equal_multiset == equal_class.equal :: 'a multiset => 'a multiset => bool
instantiation
  multiset :: (random) random
  random_multiset == random_class.random ::
    natural
    => natural * natural
       => ('a multiset * (unit => term)) * natural * natural
instantiation
  multiset :: (full_exhaustive) full_exhaustive
  full_exhaustive_multiset == full_exhaustive_class.full_exhaustive ::
    ('a multiset * (unit => term) => (bool * term list) option)
    => natural => (bool * term list) option
Proofs for inductive predicate(s) "pred_mset"
  Proving monotonicity ...
Proofs for inductive predicate(s) "rel_mset'"
  Proving monotonicity ...
### theory "HOL-Library.Multiset"
### 4.345s elapsed time, 15.316s cpu time, 4.005s GC time
Loading theory "HOL-Library.Multiset_Order" (required by "Draft.Goodstein_SequenceMoreTemplates" via "Draft.Goodstein_Sequence" via "Draft.Multiset_More")
class preorder = ord +
  assumes "less_le_not_le": "!!x y. (x < y) = (x <= y & ~ y <= x)"
    and "order_refl": "!!x. x <= x"
    and "order_trans": "!!x y z. [| x <= y; y <= z |] ==> x <= z"
instantiation
  multiset :: (preorder) ordered_ab_semigroup_monoid_add_imp_le
instantiation
  multiset :: (wellorder) wellorder
instantiation
  multiset :: (preorder) order_bot
  bot_multiset == bot :: 'a multiset
instantiation
  multiset :: (linorder) distrib_lattice
  inf_multiset == inf :: 'a multiset => 'a multiset => 'a multiset
  sup_multiset == sup :: 'a multiset => 'a multiset => 'a multiset
### theory "HOL-Library.Multiset_Order"
### 0.207s elapsed time, 0.512s cpu time, 0.064s GC time
Loading theory "Draft.Nested_Multiset" (required by "Draft.Goodstein_SequenceMoreTemplates" via "Draft.Goodstein_Sequence" via "Draft.Syntactic_Ordinal" via "Draft.Hereditary_Multiset")
Loading theory "Draft.Multiset_More" (required by "Draft.Goodstein_SequenceMoreTemplates" via "Draft.Goodstein_Sequence")
class countable_complete_distrib_lattice = countable_complete_lattice +
  assumes
    "sup_ccInf": "!!B a. countable B ==> sup a (Inf B) = Inf (sup a ` B)"
  assumes
    "inf_ccSup": "!!B a. countable B ==> inf a (Sup B) = Sup (inf a ` B)"
Proofs for inductive predicate(s) "no_elem"
  Proving monotonicity ...
Proofs for inductive predicate(s) "sub_nmsetp"
  Proving monotonicity ...
consts
  depth_nmset :: "'a nmultiset => nat"
instantiation
  nmultiset :: (preorder) preorder
  less_eq_nmultiset == less_eq :: 'a nmultiset => 'a nmultiset => bool
  less_nmultiset == less :: 'a nmultiset => 'a nmultiset => bool
instantiation
  nmultiset :: (order) order
instantiation
  nmultiset :: (linorder) linorder
instantiation
  nmultiset :: (wellorder) wellorder
### theory "Draft.Nested_Multiset"
### 0.601s elapsed time, 1.851s cpu time, 0.196s GC time
### theory "Draft.Multiset_More"
### 0.618s elapsed time, 1.897s cpu time, 0.196s GC time
Loading theory "Draft.Hereditary_Multiset" (required by "Draft.Goodstein_SequenceMoreTemplates" via "Draft.Goodstein_Sequence" via "Draft.Syntactic_Ordinal")
### theory "HOL-Library.Countable_Complete_Lattices"
### 2.223s elapsed time, 6.376s cpu time, 1.498s GC time
Loading theory "HOL-Library.Order_Continuity" (required by "Draft.Goodstein_SequenceMoreTemplates" via "Draft.Goodstein_Sequence" via "Draft.Syntactic_Ordinal" via "HOL-Library.Extended_Nat")
consts
  Rep_hmultiset :: "hmultiset => unit nmultiset"
consts
  Abs_hmultiset :: "unit nmultiset => hmultiset"
instantiation
  hmultiset :: linorder
  less_eq_hmultiset == less_eq :: hmultiset => hmultiset => bool
  less_hmultiset == less :: hmultiset => hmultiset => bool
instantiation
  hmultiset :: cancel_comm_monoid_add
  zero_hmultiset == zero_class.zero :: hmultiset
  minus_hmultiset == minus :: hmultiset => hmultiset => hmultiset
  plus_hmultiset == plus :: hmultiset => hmultiset => hmultiset
instantiation
  hmultiset :: order_bot
  bot_hmultiset == bot :: hmultiset
instantiation
  hmultiset :: distrib_lattice
  inf_hmultiset == inf :: hmultiset => hmultiset => hmultiset
  sup_hmultiset == sup :: hmultiset => hmultiset => hmultiset
### theory "Draft.Hereditary_Multiset"
### 0.493s elapsed time, 1.069s cpu time, 0.075s GC time
### theory "HOL-Library.Order_Continuity"
### 0.474s elapsed time, 0.969s cpu time, 0.075s GC time
Loading theory "HOL-Library.Extended_Nat" (required by "Draft.Goodstein_SequenceMoreTemplates" via "Draft.Goodstein_Sequence" via "Draft.Syntactic_Ordinal")
class infinity = type +
  fixes infinity :: "'a"
instantiation
  enat :: infinity
  infinity_enat == infinity :: enat
Proofs for inductive predicate(s) "rec_set_enat"
### No equation for constructor "Extended_Nat.infinity_class.infinity"
### in definition of function "the_enat"
consts
  the_enat :: "enat => nat"
instantiation
  enat :: zero_neq_one
  one_enat == one_class.one :: enat
  zero_enat == zero_class.zero :: enat
instantiation
  enat :: comm_monoid_add
  plus_enat == plus :: enat => enat => enat
instantiation
  enat :: {comm_semiring_1,semiring_no_zero_divisors}
  times_enat == times :: enat => enat => enat
instantiation
  enat :: minus
  minus_enat == minus :: enat => enat => enat
instantiation
  enat :: linordered_ab_semigroup_add
  less_eq_enat == less_eq :: enat => enat => bool
  less_enat == less :: enat => enat => bool
instantiation
  enat :: {order_bot,order_top}
  top_enat == top :: enat
  bot_enat == bot :: enat
structure Cancel_Enat_Common:
  sig
    val dest_sum: term -> term list
    val dest_summing: term * term list -> term list
    val find_first: term -> term list -> term list
    val find_first_t: term list -> term -> term list -> term list
    val mk_eq: term * term -> term
    val mk_sum: typ -> term list -> term
    val norm_ss: simpset
    val norm_tac: Proof.context -> tactic
    val simplify_meta_eq: Proof.context -> thm -> thm -> thm
    val trans_tac: Proof.context -> thm option -> tactic
  end
structure Eq_Enat_Cancel:
  sig val proc: Proof.context -> term -> thm option end
structure Le_Enat_Cancel:
  sig val proc: Proof.context -> term -> thm option end
structure Less_Enat_Cancel:
  sig val proc: Proof.context -> term -> thm option end
instantiation
  enat :: complete_lattice
  Inf_enat == Inf :: enat set => enat
  Sup_enat == Sup :: enat set => enat
  sup_enat == sup :: enat => enat => enat
  inf_enat == inf :: enat => enat => enat
### theory "HOL-Library.Extended_Nat"
### 0.485s elapsed time, 0.537s cpu time, 0.071s GC time
Loading theory "Draft.Syntactic_Ordinal" (required by "Draft.Goodstein_SequenceMoreTemplates" via "Draft.Goodstein_Sequence")
instantiation
  hmultiset :: comm_semiring_1
  one_hmultiset == one_class.one :: hmultiset
  times_hmultiset == times :: hmultiset => hmultiset => hmultiset
consts
  hmset_of_enat :: "enat => hmultiset"
### theory "Draft.Syntactic_Ordinal"
### 0.621s elapsed time, 0.679s cpu time, 0.079s GC time
Loading theory "Draft.Goodstein_Sequence" (required by "Draft.Goodstein_SequenceMoreTemplates")
Proofs for inductive predicate(s) "well_base"
  Proving monotonicity ...
Proofs for inductive predicate(s) "well_base\<^sub>h"
  Proving monotonicity ...
Proofs for inductive predicate(s) "aligned\<^sub>e"
  Proving monotonicity ...
consts
  decode :: "nat => hmultiset => nat"
Proofs for inductive predicate(s) "aligned\<^sub>d"
  Proving monotonicity ...
consts
  goodstein :: "nat => nat"
### theory "Draft.Goodstein_Sequence"
### 0.199s elapsed time, 0.199s cpu time, 0.000s GC time
Loading theory "Draft.Goodstein_SequenceMoreTemplates"
val templateLemmas =
   [("Goodstein_Sequence.goodsteins_theorem",
     "EX i. goodstein ?start i = 0",
     template_predicate (template_app (template_hole 3, t_empty))),
    ("Goodstein_Sequence.div_mult_le", "?m div ?n * ?n <= ?m",
     template_inequation
      (less_equals,
       template_app
        (template_app
          (template_hole 1,
           template_app
            (template_app (template_hole 0, template_var 1),
             template_var 0)),
         template_var 0),
       template_var 1)),
    ("Goodstein_Sequence.aligned\<^sub>d_0",
     "2 <= ?base ==> aligned\<^sub>d ?base 0 ?M",
     template_implication
      ([template_inequation
         (less_equals,
          template_app
           (template_hole 4,
            template_app (template_hole 3, template_hole 2)),
          template_var 1)],
       template_predicate
        (
           template_app
            (template_app
              (template_app (template_hole 1, template_var 1),
               template_hole 0),
             template_var 0)
           ))),
    ("Goodstein_Sequence.well_base\<^sub>h_encode",
     "2 <= ?base ==> well_base\<^sub>h ?base (encode ?base ?e ?n)",
     template_implication
      ([template_inequation
         (less_equals,
          template_app
           (template_hole 4,
            template_app (template_hole 3, template_hole 2)),
          template_var 2)],
       template_predicate
        (
           template_app
            (template_app (template_hole 1, template_var 2),
             template_app
              (template_app
                (template_app (template_hole 0, template_var 2),
                 template_var 1),
               template_var 0))
           ))),
    ("Goodstein_Sequence.decode_0", "2 <= ?base ==> decode ?base ?e 0 = 0",
     template_implication
      ([template_inequation
         (less_equals,
          template_app
           (template_hole 6,
            template_app (template_hole 5, template_hole 4)),
          template_var 1)],
       template_equation
        (template_app
          (template_app
            (template_app (template_hole 2, template_var 1),
             template_var 0),
           template_hole 1),
         template_hole 0))),
    ("Goodstein_Sequence.encode_0", "2 <= ?base ==> encode ?base ?e 0 = 0",
     template_implication
      ([template_inequation
         (less_equals,
          template_app
           (template_hole 6,
            template_app (template_hole 5, template_hole 4)),
          template_var 1)],
       template_equation
        (template_app
          (template_app
            (template_app (template_hole 2, template_var 1),
             template_var 0),
           template_hole 1),
         template_hole 0))),
    ("Goodstein_Sequence.aligned\<^sub>e_encode",
     "2 <= ?base ==> aligned\<^sub>e ?base ?e (encode ?base ?e ?M)",
     template_implication
      ([template_inequation
         (less_equals,
          template_app
           (template_hole 4,
            template_app (template_hole 3, template_hole 2)),
          template_var 2)],
       template_predicate
        (
           template_app
            (template_app
              (template_app (template_hole 1, template_var 2),
               template_var 1),
             template_app
              (template_app
                (template_app (template_hole 0, template_var 2),
                 template_var 1),
               template_var 0))
           ))),
    ("Goodstein_Sequence.decode_encode",
     "2 <= ?base ==> decode ?base ?e (encode ?base ?e ?n) = ?n",
     template_implication
      ([template_inequation
         (less_equals,
          template_app
           (template_hole 5,
            template_app (template_hole 4, template_hole 3)),
          template_var 2)],
       template_equation
        (template_app
          (template_app
            (template_app (template_hole 1, template_var 2),
             template_var 1),
           template_app
            (template_app
              (template_app (template_hole 0, template_var 2),
               template_var 1),
             template_var 0)),
         template_var 0))),
    ("Goodstein_Sequence.well_base\<^sub>h_imp_well_base",
     "[| 2 <= ?base; well_base\<^sub>h ?base ?M |]
      ==> well_base ?base (hmsetmset ?M)",
     template_implication
      ([template_inequation
         (less_equals,
          template_app
           (template_hole 5,
            template_app (template_hole 4, template_hole 3)),
          template_var 1),
        template_predicate
         (
            template_app
             (template_app (template_hole 2, template_var 1),
              template_var 0)
            )],
       template_predicate
        (
           template_app
            (template_app (template_hole 1, template_var 1),
             template_app (template_hole 0, template_var 0))
           ))),
    ("Goodstein_Sequence.encode_0_iff",
     "2 <= ?base ==> (encode ?base ?e ?n = 0) = (?n = 0)",
     template_implication
      ([template_inequation
         (less_equals,
          template_app
           (template_hole 8,
            template_app (template_hole 7, template_hole 6)),
          template_var 2)],
       template_bimplication
        (template_equation
          (template_app
            (template_app
              (template_app (template_hole 3, template_var 2),
               template_var 1),
             template_var 0),
           template_hole 2),
         template_equation (template_var 0, template_hole 0)))),
    ("Goodstein_Sequence.aligned\<^sub>d_mono_exp_Suc",
     "[| 2 <= ?base; aligned\<^sub>d ?base (Suc ?e) ?M |]
      ==> aligned\<^sub>d ?base ?e ?M",
     template_implication
      ([template_inequation
         (less_equals,
          template_app
           (template_hole 4,
            template_app (template_hole 3, template_hole 2)),
          template_var 2),
        template_predicate
         (
            template_app
             (template_app
               (template_app (template_hole 1, template_var 2),
                template_app (template_hole 0, template_var 1)),
              template_var 0)
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_app (template_hole 1, template_var 2),
               template_var 1),
             template_var 0)
           ))),
    ("Goodstein_Sequence.encode_Suc_exp",
     "2 <= ?base ==>
      encode ?base (Suc ?e) ?n = encode ?base ?e (?base * ?n)",
     template_implication
      ([template_inequation
         (less_equals,
          template_app
           (template_hole 6,
            template_app (template_hole 5, template_hole 4)),
          template_var 2)],
       template_equation
        (template_app
          (template_app
            (template_app (template_hole 2, template_var 2),
             template_app (template_hole 1, template_var 1)),
           template_var 0),
         template_app
          (template_app
            (template_app (template_hole 2, template_var 2),
             template_var 1),
           template_app
            (template_app (template_hole 0, template_var 2),
             template_var 0))))),
    ("Goodstein_Sequence.well_base_filter",
     "[| 2 <= ?base; well_base ?base ?M |]
      ==> well_base ?base (filter_mset ?p ?M)",
     template_implication
      ([template_inequation
         (less_equals,
          template_app
           (template_hole 4,
            template_app (template_hole 3, template_hole 2)),
          template_var 2),
        template_predicate
         (
            template_app
             (template_app (template_hole 1, template_var 2),
              template_var 1)
            )],
       template_predicate
        (
           template_app
            (template_app (template_hole 1, template_var 2),
             template_app
              (template_app (template_hole 0, t_empty), template_var 1))
           ))),
    ("Goodstein_Sequence.encode_exp_0",
     "2 <= ?base ==> encode ?base ?e ?n = encode ?base 0 (?base ^ ?e * ?n)",
     template_implication
      ([template_inequation
         (less_equals,
          template_app
           (template_hole 7,
            template_app (template_hole 6, template_hole 5)),
          template_var 2)],
       template_equation
        (template_app
          (template_app
            (template_app (template_hole 3, template_var 2),
             template_var 1),
           template_var 0),
         template_app
          (template_app
            (template_app (template_hole 3, template_var 2),
             template_hole 2),
           template_app
            (template_app
              (template_hole 1,
               template_app
                (template_app (template_hole 0, template_var 2),
                 template_var 1)),
             template_var 0))))),
    ("Goodstein_Sequence.well_base\<^sub>h_mono_base",
     "[| well_base\<^sub>h ?base ?M; 2 <= ?base; ?base <= ?base' |]
      ==> well_base\<^sub>h ?base' ?M",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 4, template_var 2),
              template_var 1)
            ),
        template_inequation
         (less_equals,
          template_app
           (template_hole 2,
            template_app (template_hole 1, template_hole 0)),
          template_var 2),
        template_inequation (less_equals, template_var 2, template_var 0)],
       template_predicate
        (
           template_app
            (template_app (template_hole 4, template_var 0), template_var 1)
           ))),
    ("Goodstein_Sequence.inj_decode",
     "2 <= ?base ==>
      inj_on (decode ?base ?e)
       {M. well_base\<^sub>h ?base M & aligned\<^sub>d ?base ?e M}",
     template_implication
      ([template_inequation
         (less_equals,
          template_app
           (template_hole 8,
            template_app (template_hole 7, template_hole 6)),
          template_var 1)],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 5,
               template_app
                (template_app (template_hole 4, template_var 1),
                 template_var 0)),
             template_app (template_hole 3, t_empty))
           ))),
    ("Goodstein_Sequence.encode_decode_exp_0",
     "[| 2 <= ?base; well_base\<^sub>h ?base ?M |]
      ==> encode ?base 0 (decode ?base 0 ?M) = ?M",
     template_implication
      ([template_inequation
         (less_equals,
          template_app
           (template_hole 7,
            template_app (template_hole 6, template_hole 5)),
          template_var 1),
        template_predicate
         (
            template_app
             (template_app (template_hole 4, template_var 1),
              template_var 0)
            )],
       template_equation
        (template_app
          (template_app
            (template_app (template_hole 2, template_var 1),
             template_hole 1),
           template_app
            (template_app
              (template_app (template_hole 0, template_var 1),
               template_hole 1),
             template_var 0)),
         template_var 0))),
    ("Goodstein_Sequence.less_imp_encode_less",
     "[| 2 <= ?base; ?n < ?p |]
      ==> encode ?base ?e ?n < encode ?base ?e ?p",
     template_implication
      ([template_inequation
         (less_equals,
          template_app
           (template_hole 5,
            template_app (template_hole 4, template_hole 3)),
          template_var 3),
        template_inequation (less_than, template_var 2, template_var 1)],
       template_inequation
        (less_than,
         template_app
          (template_app
            (template_app (template_hole 0, template_var 3),
             template_var 0),
           template_var 2),
         template_app
          (template_app
            (template_app (template_hole 0, template_var 3),
             template_var 0),
           template_var 1)))),
    ("Goodstein_Sequence.well_base\<^sub>h_mono_hmset",
     "[| 2 <= ?base; well_base\<^sub>h ?base ?M;
         hmsetmset ?N <=# hmsetmset ?M |]
      ==> well_base\<^sub>h ?base ?N",
     template_implication
      ([template_inequation
         (less_equals,
          template_app
           (template_hole 5,
            template_app (template_hole 4, template_hole 3)),
          template_var 2),
        template_predicate
         (
            template_app
             (template_app (template_hole 2, template_var 2),
              template_var 1)
            ),
        template_predicate
         (
            template_app
             (template_app
               (template_hole 1,
                template_app (template_hole 0, template_var 0)),
              template_app (template_hole 0, template_var 1))
            )],
       template_predicate
        (
           template_app
            (template_app (template_hole 2, template_var 2), template_var 0)
           ))),
    ("Goodstein_Sequence.well_base_image_inj",
     "[| 2 <= ?base; well_base ?base ?M; inj_on ?f (set_mset ?M) |]
      ==> well_base ?base (image_mset ?f ?M)",
     template_implication
      ([template_inequation
         (less_equals,
          template_app
           (template_hole 7,
            template_app (template_hole 6, template_hole 5)),
          template_var 2),
        template_predicate
         (
            template_app
             (template_app (template_hole 4, template_var 2),
              template_var 1)
            ),
        template_predicate
         (
            template_app
             (template_app (template_hole 3, template_var 0),
              template_app (template_hole 2, template_var 1))
            )],
       template_predicate
        (
           template_app
            (template_app (template_hole 1, template_var 2),
             template_app
              (template_app (template_hole 0, template_var 0),
               template_var 1))
           ))),
    ("Goodstein_Sequence.aligned\<^sub>d_mono_hmset",
     "[| 2 <= ?base; aligned\<^sub>d ?base ?e ?M;
         hmsetmset ?M' <=# hmsetmset ?M |]
      ==> aligned\<^sub>d ?base ?e ?M'",
     template_implication
      ([template_inequation
         (less_equals,
          template_app
           (template_hole 5,
            template_app (template_hole 4, template_hole 3)),
          template_var 3),
        template_predicate
         (
            template_app
             (template_app
               (template_app (template_hole 2, template_var 3),
                template_var 2),
              template_var 1)
            ),
        template_predicate
         (
            template_app
             (template_app
               (template_hole 1,
                template_app (template_hole 0, template_var 0)),
              template_app (template_hole 0, template_var 1))
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_app (template_hole 2, template_var 3),
               template_var 2),
             template_var 0)
           ))),
    ("Goodstein_Sequence.decode_exp_shift",
     "[| 2 <= ?base; aligned\<^sub>d ?base ?e ?M |]
      ==> decode ?base 0 ?M = ?base ^ ?e * decode ?base ?e ?M",
     template_implication
      ([template_inequation
         (less_equals,
          template_app
           (template_hole 8,
            template_app (template_hole 7, template_hole 6)),
          template_var 2),
        template_predicate
         (
            template_app
             (template_app
               (template_app (template_hole 5, template_var 2),
                template_var 1),
              template_var 0)
            )],
       template_equation
        (template_app
          (template_app
            (template_app (template_hole 3, template_var 2),
             template_hole 2),
           template_var 0),
         template_app
          (template_app
            (template_hole 1,
             template_app
              (template_app (template_hole 0, template_var 2),
               template_var 1)),
           template_app
            (template_app
              (template_app (template_hole 3, template_var 2),
               template_var 1),
             template_var 0))))),
    ("Goodstein_Sequence.decode_exp_shift_Suc",
     "[| 2 <= ?base; aligned\<^sub>d ?base (Suc ?e) ?M |]
      ==> decode ?base ?e ?M = ?base * decode ?base (Suc ?e) ?M",
     template_implication
      ([template_inequation
         (less_equals,
          template_app
           (template_hole 7,
            template_app (template_hole 6, template_hole 5)),
          template_var 2),
        template_predicate
         (
            template_app
             (template_app
               (template_app (template_hole 4, template_var 2),
                template_app (template_hole 3, template_var 1)),
              template_var 0)
            )],
       template_equation
        (template_app
          (template_app
            (template_app (template_hole 1, template_var 2),
             template_var 1),
           template_var 0),
         template_app
          (template_app (template_hole 0, template_var 2),
           template_app
            (template_app
              (template_app (template_hole 1, template_var 2),
               template_app (template_hole 3, template_var 1)),
             template_var 0))))),
    ("Goodstein_Sequence.power_div_same_base",
     "[| ?b ^ ?y ~= (0::?'a); ?y <= ?x |]
      ==> ?b ^ ?x div ?b ^ ?y = ?b ^ (?x - ?y)",
     template_implication
      ([template_negation
         (
            template_equation
             (template_app
               (template_app (template_hole 4, template_var 2),
                template_var 1),
              template_hole 3)
            ),
        template_inequation (less_equals, template_var 1, template_var 0)],
       template_equation
        (template_app
          (template_app
            (template_hole 1,
             template_app
              (template_app (template_hole 4, template_var 2),
               template_var 0)),
           template_app
            (template_app (template_hole 4, template_var 2),
             template_var 1)),
         template_app
          (template_app (template_hole 4, template_var 2),
           template_app
            (template_app (template_hole 0, template_var 0),
             template_var 1))))),
    ("Goodstein_Sequence.decode_unfold",
     "2 <= ?base ==>
      decode ?base ?e ?M =
      (SUM m:#hmsetmset ?M. ?base ^ decode ?base 0 m) div ?base ^ ?e",
     template_implication
      ([template_inequation
         (less_equals,
          template_app
           (template_hole 10,
            template_app (template_hole 9, template_hole 8)),
          template_var 2)],
       template_equation
        (template_app
          (template_app
            (template_app (template_hole 6, template_var 2),
             template_var 1),
           template_var 0),
         template_app
          (template_app
            (template_hole 5,
             template_app
              (template_hole 4,
               template_app
                (template_app (template_hole 3, t_empty),
                 template_app (template_hole 0, template_var 0)))),
           template_app
            (template_app (template_hole 2, template_var 2),
             template_var 1))))),
    ("Goodstein_Sequence.decode_0_iff",
     "[| 2 <= ?base; well_base\<^sub>h ?base ?M;
         aligned\<^sub>d ?base ?e ?M |]
      ==> (decode ?base ?e ?M = 0) = (?M = 0)",
     template_implication
      ([template_inequation
         (less_equals,
          template_app
           (template_hole 10,
            template_app (template_hole 9, template_hole 8)),
          template_var 2),
        template_predicate
         (
            template_app
             (template_app (template_hole 7, template_var 2),
              template_var 1)
            ),
        template_predicate
         (
            template_app
             (template_app
               (template_app (template_hole 6, template_var 2),
                template_var 0),
              template_var 1)
            )],
       template_bimplication
        (template_equation
          (template_app
            (template_app
              (template_app (template_hole 3, template_var 2),
               template_var 0),
             template_var 1),
           template_hole 2),
         template_equation (template_var 1, template_hole 0)))),
    ("Goodstein_Sequence.decode_plus",
     "[| 2 <= ?base; aligned\<^sub>d ?base ?e ?M |]
      ==> decode ?base ?e (?M + ?N) =
          decode ?base ?e ?M + decode ?base ?e ?N",
     template_implication
      ([template_inequation
         (less_equals,
          template_app
           (template_hole 7,
            template_app (template_hole 6, template_hole 5)),
          template_var 3),
        template_predicate
         (
            template_app
             (template_app
               (template_app (template_hole 4, template_var 3),
                template_var 2),
              template_var 1)
            )],
       template_equation
        (template_app
          (template_app
            (template_app (template_hole 2, template_var 3),
             template_var 2),
           template_app
            (template_app (template_hole 1, template_var 1),
             template_var 0)),
         template_app
          (template_app
            (template_hole 0,
             template_app
              (template_app
                (template_app (template_hole 2, template_var 3),
                 template_var 2),
               template_var 1)),
           template_app
            (template_app
              (template_app (template_hole 2, template_var 3),
               template_var 2),
             template_var 0))))),
    ("Goodstein_Sequence.mem_hmsetmset_encodeD",
     "[| 2 <= ?base; ?M :# hmsetmset (encode ?base ?e ?n) |]
      ==> EX e'>=?e. ?M = encode ?base 0 e'",
     template_implication
      ([template_inequation
         (less_equals,
          template_app
           (template_hole 10,
            template_app (template_hole 9, template_hole 8)),
          template_var 3),
        template_predicate
         (
            template_app
             (template_app (template_hole 7, template_var 2),
              template_app
               (template_hole 6,
                template_app
                 (template_hole 5,
                  template_app
                   (template_app
                     (template_app (template_hole 4, template_var 3),
                      template_var 1),
                    template_var 0))))
            )],
       template_predicate (template_app (template_hole 3, t_empty)))),
    ("Goodstein_Sequence.goodstein_step",
     "0 < goodstein ?start ?i ==>
      encode (?i + 3) 0 (goodstein ?start (?i + 1))
      < encode (?i + 2) 0 (goodstein ?start ?i)",
     template_implication
      ([template_inequation
         (less_than, template_hole 9,
          template_app
           (template_app (template_hole 8, template_var 1),
            template_var 0))],
       template_inequation
        (less_than,
         template_app
          (template_app
            (template_app
              (template_hole 6,
               template_app
                (template_app (template_hole 5, template_var 0),
                 template_app
                  (template_hole 4,
                   template_app (template_hole 3, template_hole 2)))),
             template_hole 9),
           template_app
            (template_app (template_hole 8, template_var 1),
             template_app
              (template_app (template_hole 5, template_var 0),
               template_hole 1))),
         template_app
          (template_app
            (template_app
              (template_hole 6,
               template_app
                (template_app (template_hole 5, template_var 0),
                 template_app
                  (template_hole 4,
                   template_app (template_hole 0, template_hole 2)))),
             template_hole 9),
           template_app
            (template_app (template_hole 8, template_var 1),
             template_var 0))))),
    ("Goodstein_Sequence.well_base_bound",
     "[| 2 <= ?base; well_base ?base ?M; \<forall>m:#?M. m < ?n |]
      ==> \<Sum>\<^sub># (image_mset ((^) ?base) ?M) < ?base ^ ?n",
     template_implication
      ([template_inequation
         (less_equals,
          template_app
           (template_hole 9,
            template_app (template_hole 8, template_hole 7)),
          template_var 2),
        template_predicate
         (
            template_app
             (template_app (template_hole 6, template_var 2),
              template_var 1)
            ),
        template_predicate
         (
            template_app
             (template_app
               (template_hole 5,
                template_app (template_hole 4, template_var 1)),
              t_empty)
            )],
       template_inequation
        (less_than,
         template_app
          (template_hole 2,
           template_app
            (template_app (template_hole 1, t_empty), template_var 1)),
         template_app
          (template_app (template_hole 0, template_var 2),
           template_var 0)))),
    ("Goodstein_Sequence.encode_Suc",
     "2 <= ?base ==>
      encode ?base ?e (Suc ?n) =
      of_nat (Suc ?n mod ?base) * \<omega>^ (encode ?base 0 ?e) +
      encode ?base (?e + 1) (Suc ?n div ?base)",
     template_implication
      ([template_inequation
         (less_equals,
          template_app
           (template_hole 16,
            template_app (template_hole 15, template_hole 14)),
          template_var 2)],
       template_equation
        (template_app
          (template_app
            (template_app (template_hole 12, template_var 2),
             template_var 1),
           template_app (template_hole 11, template_var 0)),
         template_app
          (template_app
            (template_hole 10,
             template_app
              (template_app
                (template_hole 9,
                 template_app
                  (template_hole 8,
                   template_app
                    (template_app
                      (template_hole 7,
                       template_app (template_hole 11, template_var 0)),
                     template_var 2))),
               template_app
                (template_hole 6,
                 template_app
                  (template_app
                    (template_hole 5,
                     template_app
                      (template_app
                        (template_app (template_hole 12, template_var 2),
                         template_hole 4),
                       template_var 1)),
                   template_hole 3)))),
           template_app
            (template_app
              (template_app (template_hole 12, template_var 2),
               template_app
                (template_app (template_hole 2, template_var 1),
                 template_hole 1)),
             template_app
              (template_app
                (template_hole 0,
                 template_app (template_hole 11, template_var 0)),
               template_var 2)))))),
    ("Goodstein_Sequence.less_imp_decode_less",
     "[| 2 <= ?base; well_base\<^sub>h ?base ?M;
         aligned\<^sub>d ?base ?e ?M; aligned\<^sub>d ?base ?e ?N;
         ?M < ?N |]
      ==> decode ?base ?e ?M < decode ?base ?e ?N",
     template_implication
      ([template_inequation
         (less_equals,
          template_app
           (template_hole 7,
            template_app (template_hole 6, template_hole 5)),
          template_var 3),
        template_predicate
         (
            template_app
             (template_app (template_hole 4, template_var 3),
              template_var 2)
            ),
        template_predicate
         (
            template_app
             (template_app
               (template_app (template_hole 3, template_var 3),
                template_var 1),
              template_var 2)
            ),
        template_predicate
         (
            template_app
             (template_app
               (template_app (template_hole 3, template_var 3),
                template_var 1),
              template_var 0)
            ),
        template_inequation (less_than, template_var 2, template_var 0)],
       template_inequation
        (less_than,
         template_app
          (template_app
            (template_app (template_hole 0, template_var 3),
             template_var 1),
           template_var 2),
         template_app
          (template_app
            (template_app (template_hole 0, template_var 3),
             template_var 1),
           template_var 0))))]:
   (string * thm * template) list
### theory "Draft.Goodstein_SequenceMoreTemplates"
### 0.499s elapsed time, 0.740s cpu time, 0.082s GC time
val it = (): unit
