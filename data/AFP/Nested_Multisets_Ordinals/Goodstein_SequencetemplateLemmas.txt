   [("Goodstein_Sequence.goodsteins_theorem",
     "EX i. goodstein ?start i = 0",
     template_predicate (template_app (template_hole 3, t_empty))),
    ("Goodstein_Sequence.div_mult_le", "?m div ?n * ?n <= ?m",
     template_inequation
      (less_equals,
       template_app
        (template_app
          (template_hole 1,
           template_app
            (template_app (template_hole 0, template_var 1),
             template_var 0)),
         template_var 0),
       template_var 1)),
    ("Goodstein_Sequence.aligned\<^sub>d_0",
     "2 <= ?base ==> aligned\<^sub>d ?base 0 ?M",
     template_implication
      ([template_inequation
         (less_equals,
          template_app
           (template_hole 4,
            template_app (template_hole 3, template_hole 2)),
          template_var 1)],
       template_predicate
        (
           template_app
            (template_app
              (template_app (template_hole 1, template_var 1),
               template_hole 0),
             template_var 0)
           ))),
    ("Goodstein_Sequence.well_base\<^sub>h_encode",
     "2 <= ?base ==> well_base\<^sub>h ?base (encode ?base ?e ?n)",
     template_implication
      ([template_inequation
         (less_equals,
          template_app
           (template_hole 4,
            template_app (template_hole 3, template_hole 2)),
          template_var 2)],
       template_predicate
        (
           template_app
            (template_app (template_hole 1, template_var 2),
             template_app
              (template_app
                (template_app (template_hole 0, template_var 2),
                 template_var 1),
               template_var 0))
           ))),
    ("Goodstein_Sequence.decode_0", "2 <= ?base ==> decode ?base ?e 0 = 0",
     template_implication
      ([template_inequation
         (less_equals,
          template_app
           (template_hole 6,
            template_app (template_hole 5, template_hole 4)),
          template_var 1)],
       template_equation
        (template_app
          (template_app
            (template_app (template_hole 2, template_var 1),
             template_var 0),
           template_hole 1),
         template_hole 0))),
    ("Goodstein_Sequence.encode_0", "2 <= ?base ==> encode ?base ?e 0 = 0",
     template_implication
      ([template_inequation
         (less_equals,
          template_app
           (template_hole 6,
            template_app (template_hole 5, template_hole 4)),
          template_var 1)],
       template_equation
        (template_app
          (template_app
            (template_app (template_hole 2, template_var 1),
             template_var 0),
           template_hole 1),
         template_hole 0))),
    ("Goodstein_Sequence.aligned\<^sub>e_encode",
     "2 <= ?base ==> aligned\<^sub>e ?base ?e (encode ?base ?e ?M)",
     template_implication
      ([template_inequation
         (less_equals,
          template_app
           (template_hole 4,
            template_app (template_hole 3, template_hole 2)),
          template_var 2)],
       template_predicate
        (
           template_app
            (template_app
              (template_app (template_hole 1, template_var 2),
               template_var 1),
             template_app
              (template_app
                (template_app (template_hole 0, template_var 2),
                 template_var 1),
               template_var 0))
           ))),
    ("Goodstein_Sequence.decode_encode",
     "2 <= ?base ==> decode ?base ?e (encode ?base ?e ?n) = ?n",
     template_implication
      ([template_inequation
         (less_equals,
          template_app
           (template_hole 5,
            template_app (template_hole 4, template_hole 3)),
          template_var 2)],
       template_equation
        (template_app
          (template_app
            (template_app (template_hole 1, template_var 2),
             template_var 1),
           template_app
            (template_app
              (template_app (template_hole 0, template_var 2),
               template_var 1),
             template_var 0)),
         template_var 0))),
    ("Goodstein_Sequence.well_base\<^sub>h_imp_well_base",
     "[| 2 <= ?base; well_base\<^sub>h ?base ?M |]
      ==> well_base ?base (hmsetmset ?M)",
     template_implication
      ([template_inequation
         (less_equals,
          template_app
           (template_hole 5,
            template_app (template_hole 4, template_hole 3)),
          template_var 1),
        template_predicate
         (
            template_app
             (template_app (template_hole 2, template_var 1),
              template_var 0)
            )],
       template_predicate
        (
           template_app
            (template_app (template_hole 1, template_var 1),
             template_app (template_hole 0, template_var 0))
           ))),
    ("Goodstein_Sequence.encode_0_iff",
     "2 <= ?base ==> (encode ?base ?e ?n = 0) = (?n = 0)",
     template_implication
      ([template_inequation
         (less_equals,
          template_app
           (template_hole 8,
            template_app (template_hole 7, template_hole 6)),
          template_var 2)],
       template_bimplication
        (template_equation
          (template_app
            (template_app
              (template_app (template_hole 3, template_var 2),
               template_var 1),
             template_var 0),
           template_hole 2),
         template_equation (template_var 0, template_hole 0)))),
    ("Goodstein_Sequence.aligned\<^sub>d_mono_exp_Suc",
     "[| 2 <= ?base; aligned\<^sub>d ?base (Suc ?e) ?M |]
      ==> aligned\<^sub>d ?base ?e ?M",
     template_implication
      ([template_inequation
         (less_equals,
          template_app
           (template_hole 4,
            template_app (template_hole 3, template_hole 2)),
          template_var 2),
        template_predicate
         (
            template_app
             (template_app
               (template_app (template_hole 1, template_var 2),
                template_app (template_hole 0, template_var 1)),
              template_var 0)
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_app (template_hole 1, template_var 2),
               template_var 1),
             template_var 0)
           ))),
    ("Goodstein_Sequence.encode_Suc_exp",
     "2 <= ?base ==>
      encode ?base (Suc ?e) ?n = encode ?base ?e (?base * ?n)",
     template_implication
      ([template_inequation
         (less_equals,
          template_app
           (template_hole 6,
            template_app (template_hole 5, template_hole 4)),
          template_var 2)],
       template_equation
        (template_app
          (template_app
            (template_app (template_hole 2, template_var 2),
             template_app (template_hole 1, template_var 1)),
           template_var 0),
         template_app
          (template_app
            (template_app (template_hole 2, template_var 2),
             template_var 1),
           template_app
            (template_app (template_hole 0, template_var 2),
             template_var 0))))),
    ("Goodstein_Sequence.well_base_filter",
     "[| 2 <= ?base; well_base ?base ?M |]
      ==> well_base ?base (filter_mset ?p ?M)",
     template_implication
      ([template_inequation
         (less_equals,
          template_app
           (template_hole 4,
            template_app (template_hole 3, template_hole 2)),
          template_var 2),
        template_predicate
         (
            template_app
             (template_app (template_hole 1, template_var 2),
              template_var 1)
            )],
       template_predicate
        (
           template_app
            (template_app (template_hole 1, template_var 2),
             template_app
              (template_app (template_hole 0, t_empty), template_var 1))
           ))),
    ("Goodstein_Sequence.encode_exp_0",
     "2 <= ?base ==> encode ?base ?e ?n = encode ?base 0 (?base ^ ?e * ?n)",
     template_implication
      ([template_inequation
         (less_equals,
          template_app
           (template_hole 7,
            template_app (template_hole 6, template_hole 5)),
          template_var 2)],
       template_equation
        (template_app
          (template_app
            (template_app (template_hole 3, template_var 2),
             template_var 1),
           template_var 0),
         template_app
          (template_app
            (template_app (template_hole 3, template_var 2),
             template_hole 2),
           template_app
            (template_app
              (template_hole 1,
               template_app
                (template_app (template_hole 0, template_var 2),
                 template_var 1)),
             template_var 0))))),
    ("Goodstein_Sequence.well_base\<^sub>h_mono_base",
     "[| well_base\<^sub>h ?base ?M; 2 <= ?base; ?base <= ?base' |]
      ==> well_base\<^sub>h ?base' ?M",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 4, template_var 2),
              template_var 1)
            ),
        template_inequation
         (less_equals,
          template_app
           (template_hole 2,
            template_app (template_hole 1, template_hole 0)),
          template_var 2),
        template_inequation (less_equals, template_var 2, template_var 0)],
       template_predicate
        (
           template_app
            (template_app (template_hole 4, template_var 0), template_var 1)
           ))),
    ("Goodstein_Sequence.inj_decode",
     "2 <= ?base ==>
      inj_on (decode ?base ?e)
       {M. well_base\<^sub>h ?base M & aligned\<^sub>d ?base ?e M}",
     template_implication
      ([template_inequation
         (less_equals,
          template_app
           (template_hole 8,
            template_app (template_hole 7, template_hole 6)),
          template_var 1)],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 5,
               template_app
                (template_app (template_hole 4, template_var 1),
                 template_var 0)),
             template_app (template_hole 3, t_empty))
           ))),
    ("Goodstein_Sequence.encode_decode_exp_0",
     "[| 2 <= ?base; well_base\<^sub>h ?base ?M |]
      ==> encode ?base 0 (decode ?base 0 ?M) = ?M",
     template_implication
      ([template_inequation
         (less_equals,
          template_app
           (template_hole 7,
            template_app (template_hole 6, template_hole 5)),
          template_var 1),
        template_predicate
         (
            template_app
             (template_app (template_hole 4, template_var 1),
              template_var 0)
            )],
       template_equation
        (template_app
          (template_app
            (template_app (template_hole 2, template_var 1),
             template_hole 1),
           template_app
            (template_app
              (template_app (template_hole 0, template_var 1),
               template_hole 1),
             template_var 0)),
         template_var 0))),
    ("Goodstein_Sequence.less_imp_encode_less",
     "[| 2 <= ?base; ?n < ?p |]
      ==> encode ?base ?e ?n < encode ?base ?e ?p",
     template_implication
      ([template_inequation
         (less_equals,
          template_app
           (template_hole 5,
            template_app (template_hole 4, template_hole 3)),
          template_var 3),
        template_inequation (less_than, template_var 2, template_var 1)],
       template_inequation
        (less_than,
         template_app
          (template_app
            (template_app (template_hole 0, template_var 3),
             template_var 0),
           template_var 2),
         template_app
          (template_app
            (template_app (template_hole 0, template_var 3),
             template_var 0),
           template_var 1)))),
    ("Goodstein_Sequence.well_base\<^sub>h_mono_hmset",
     "[| 2 <= ?base; well_base\<^sub>h ?base ?M;
         hmsetmset ?N <=# hmsetmset ?M |]
      ==> well_base\<^sub>h ?base ?N",
     template_implication
      ([template_inequation
         (less_equals,
          template_app
           (template_hole 5,
            template_app (template_hole 4, template_hole 3)),
          template_var 2),
        template_predicate
         (
            template_app
             (template_app (template_hole 2, template_var 2),
              template_var 1)
            ),
        template_predicate
         (
            template_app
             (template_app
               (template_hole 1,
                template_app (template_hole 0, template_var 0)),
              template_app (template_hole 0, template_var 1))
            )],
       template_predicate
        (
           template_app
            (template_app (template_hole 2, template_var 2), template_var 0)
           ))),
    ("Goodstein_Sequence.well_base_image_inj",
     "[| 2 <= ?base; well_base ?base ?M; inj_on ?f (set_mset ?M) |]
      ==> well_base ?base (image_mset ?f ?M)",
     template_implication
      ([template_inequation
         (less_equals,
          template_app
           (template_hole 7,
            template_app (template_hole 6, template_hole 5)),
          template_var 2),
        template_predicate
         (
            template_app
             (template_app (template_hole 4, template_var 2),
              template_var 1)
            ),
        template_predicate
         (
            template_app
             (template_app (template_hole 3, template_var 0),
              template_app (template_hole 2, template_var 1))
            )],
       template_predicate
        (
           template_app
            (template_app (template_hole 1, template_var 2),
             template_app
              (template_app (template_hole 0, template_var 0),
               template_var 1))
           ))),
    ("Goodstein_Sequence.aligned\<^sub>d_mono_hmset",
     "[| 2 <= ?base; aligned\<^sub>d ?base ?e ?M;
         hmsetmset ?M' <=# hmsetmset ?M |]
      ==> aligned\<^sub>d ?base ?e ?M'",
     template_implication
      ([template_inequation
         (less_equals,
          template_app
           (template_hole 5,
            template_app (template_hole 4, template_hole 3)),
          template_var 3),
        template_predicate
         (
            template_app
             (template_app
               (template_app (template_hole 2, template_var 3),
                template_var 2),
              template_var 1)
            ),
        template_predicate
         (
            template_app
             (template_app
               (template_hole 1,
                template_app (template_hole 0, template_var 0)),
              template_app (template_hole 0, template_var 1))
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_app (template_hole 2, template_var 3),
               template_var 2),
             template_var 0)
           ))),
    ("Goodstein_Sequence.decode_exp_shift",
     "[| 2 <= ?base; aligned\<^sub>d ?base ?e ?M |]
      ==> decode ?base 0 ?M = ?base ^ ?e * decode ?base ?e ?M",
     template_implication
      ([template_inequation
         (less_equals,
          template_app
           (template_hole 8,
            template_app (template_hole 7, template_hole 6)),
          template_var 2),
        template_predicate
         (
            template_app
             (template_app
               (template_app (template_hole 5, template_var 2),
                template_var 1),
              template_var 0)
            )],
       template_equation
        (template_app
          (template_app
            (template_app (template_hole 3, template_var 2),
             template_hole 2),
           template_var 0),
         template_app
          (template_app
            (template_hole 1,
             template_app
              (template_app (template_hole 0, template_var 2),
               template_var 1)),
           template_app
            (template_app
              (template_app (template_hole 3, template_var 2),
               template_var 1),
             template_var 0))))),
    ("Goodstein_Sequence.decode_exp_shift_Suc",
     "[| 2 <= ?base; aligned\<^sub>d ?base (Suc ?e) ?M |]
      ==> decode ?base ?e ?M = ?base * decode ?base (Suc ?e) ?M",
     template_implication
      ([template_inequation
         (less_equals,
          template_app
           (template_hole 7,
            template_app (template_hole 6, template_hole 5)),
          template_var 2),
        template_predicate
         (
            template_app
             (template_app
               (template_app (template_hole 4, template_var 2),
                template_app (template_hole 3, template_var 1)),
              template_var 0)
            )],
       template_equation
        (template_app
          (template_app
            (template_app (template_hole 1, template_var 2),
             template_var 1),
           template_var 0),
         template_app
          (template_app (template_hole 0, template_var 2),
           template_app
            (template_app
              (template_app (template_hole 1, template_var 2),
               template_app (template_hole 3, template_var 1)),
             template_var 0))))),
    ("Goodstein_Sequence.power_div_same_base",
     "[| ?b ^ ?y ~= (0::?'a); ?y <= ?x |]
      ==> ?b ^ ?x div ?b ^ ?y = ?b ^ (?x - ?y)",
     template_implication
      ([template_negation
         (
            template_equation
             (template_app
               (template_app (template_hole 4, template_var 2),
                template_var 1),
              template_hole 3)
            ),
        template_inequation (less_equals, template_var 1, template_var 0)],
       template_equation
        (template_app
          (template_app
            (template_hole 1,
             template_app
              (template_app (template_hole 4, template_var 2),
               template_var 0)),
           template_app
            (template_app (template_hole 4, template_var 2),
             template_var 1)),
         template_app
          (template_app (template_hole 4, template_var 2),
           template_app
            (template_app (template_hole 0, template_var 0),
             template_var 1))))),
    ("Goodstein_Sequence.decode_unfold",
     "2 <= ?base ==>
      decode ?base ?e ?M =
      (SUM m:#hmsetmset ?M. ?base ^ decode ?base 0 m) div ?base ^ ?e",
     template_implication
      ([template_inequation
         (less_equals,
          template_app
           (template_hole 10,
            template_app (template_hole 9, template_hole 8)),
          template_var 2)],
       template_equation
        (template_app
          (template_app
            (template_app (template_hole 6, template_var 2),
             template_var 1),
           template_var 0),
         template_app
          (template_app
            (template_hole 5,
             template_app
              (template_hole 4,
               template_app
                (template_app (template_hole 3, t_empty),
                 template_app (template_hole 0, template_var 0)))),
           template_app
            (template_app (template_hole 2, template_var 2),
             template_var 1))))),
    ("Goodstein_Sequence.decode_0_iff",
     "[| 2 <= ?base; well_base\<^sub>h ?base ?M;
         aligned\<^sub>d ?base ?e ?M |]
      ==> (decode ?base ?e ?M = 0) = (?M = 0)",
     template_implication
      ([template_inequation
         (less_equals,
          template_app
           (template_hole 10,
            template_app (template_hole 9, template_hole 8)),
          template_var 2),
        template_predicate
         (
            template_app
             (template_app (template_hole 7, template_var 2),
              template_var 1)
            ),
        template_predicate
         (
            template_app
             (template_app
               (template_app (template_hole 6, template_var 2),
                template_var 0),
              template_var 1)
            )],
       template_bimplication
        (template_equation
          (template_app
            (template_app
              (template_app (template_hole 3, template_var 2),
               template_var 0),
             template_var 1),
           template_hole 2),
         template_equation (template_var 1, template_hole 0)))),
    ("Goodstein_Sequence.decode_plus",
     "[| 2 <= ?base; aligned\<^sub>d ?base ?e ?M |]
      ==> decode ?base ?e (?M + ?N) =
          decode ?base ?e ?M + decode ?base ?e ?N",
     template_implication
      ([template_inequation
         (less_equals,
          template_app
           (template_hole 7,
            template_app (template_hole 6, template_hole 5)),
          template_var 3),
        template_predicate
         (
            template_app
             (template_app
               (template_app (template_hole 4, template_var 3),
                template_var 2),
              template_var 1)
            )],
       template_equation
        (template_app
          (template_app
            (template_app (template_hole 2, template_var 3),
             template_var 2),
           template_app
            (template_app (template_hole 1, template_var 1),
             template_var 0)),
         template_app
          (template_app
            (template_hole 0,
             template_app
              (template_app
                (template_app (template_hole 2, template_var 3),
                 template_var 2),
               template_var 1)),
           template_app
            (template_app
              (template_app (template_hole 2, template_var 3),
               template_var 2),
             template_var 0))))),
    ("Goodstein_Sequence.mem_hmsetmset_encodeD",
     "[| 2 <= ?base; ?M :# hmsetmset (encode ?base ?e ?n) |]
      ==> EX e'>=?e. ?M = encode ?base 0 e'",
     template_implication
      ([template_inequation
         (less_equals,
          template_app
           (template_hole 10,
            template_app (template_hole 9, template_hole 8)),
          template_var 3),
        template_predicate
         (
            template_app
             (template_app (template_hole 7, template_var 2),
              template_app
               (template_hole 6,
                template_app
                 (template_hole 5,
                  template_app
                   (template_app
                     (template_app (template_hole 4, template_var 3),
                      template_var 1),
                    template_var 0))))
            )],
       template_predicate (template_app (template_hole 3, t_empty)))),
    ("Goodstein_Sequence.goodstein_step",
     "0 < goodstein ?start ?i ==>
      encode (?i + 3) 0 (goodstein ?start (?i + 1))
      < encode (?i + 2) 0 (goodstein ?start ?i)",
     template_implication
      ([template_inequation
         (less_than, template_hole 9,
          template_app
           (template_app (template_hole 8, template_var 1),
            template_var 0))],
       template_inequation
        (less_than,
         template_app
          (template_app
            (template_app
              (template_hole 6,
               template_app
                (template_app (template_hole 5, template_var 0),
                 template_app
                  (template_hole 4,
                   template_app (template_hole 3, template_hole 2)))),
             template_hole 9),
           template_app
            (template_app (template_hole 8, template_var 1),
             template_app
              (template_app (template_hole 5, template_var 0),
               template_hole 1))),
         template_app
          (template_app
            (template_app
              (template_hole 6,
               template_app
                (template_app (template_hole 5, template_var 0),
                 template_app
                  (template_hole 4,
                   template_app (template_hole 0, template_hole 2)))),
             template_hole 9),
           template_app
            (template_app (template_hole 8, template_var 1),
             template_var 0))))),
    ("Goodstein_Sequence.well_base_bound",
     "[| 2 <= ?base; well_base ?base ?M; \<forall>m:#?M. m < ?n |]
      ==> \<Sum>\<^sub># (image_mset ((^) ?base) ?M) < ?base ^ ?n",
     template_implication
      ([template_inequation
         (less_equals,
          template_app
           (template_hole 9,
            template_app (template_hole 8, template_hole 7)),
          template_var 2),
        template_predicate
         (
            template_app
             (template_app (template_hole 6, template_var 2),
              template_var 1)
            ),
        template_predicate
         (
            template_app
             (template_app
               (template_hole 5,
                template_app (template_hole 4, template_var 1)),
              t_empty)
            )],
       template_inequation
        (less_than,
         template_app
          (template_hole 2,
           template_app
            (template_app (template_hole 1, t_empty), template_var 1)),
         template_app
          (template_app (template_hole 0, template_var 2),
           template_var 0)))),
    ("Goodstein_Sequence.encode_Suc",
     "2 <= ?base ==>
      encode ?base ?e (Suc ?n) =
      of_nat (Suc ?n mod ?base) * \<omega>^ (encode ?base 0 ?e) +
      encode ?base (?e + 1) (Suc ?n div ?base)",
     template_implication
      ([template_inequation
         (less_equals,
          template_app
           (template_hole 16,
            template_app (template_hole 15, template_hole 14)),
          template_var 2)],
       template_equation
        (template_app
          (template_app
            (template_app (template_hole 12, template_var 2),
             template_var 1),
           template_app (template_hole 11, template_var 0)),
         template_app
          (template_app
            (template_hole 10,
             template_app
              (template_app
                (template_hole 9,
                 template_app
                  (template_hole 8,
                   template_app
                    (template_app
                      (template_hole 7,
                       template_app (template_hole 11, template_var 0)),
                     template_var 2))),
               template_app
                (template_hole 6,
                 template_app
                  (template_app
                    (template_hole 5,
                     template_app
                      (template_app
                        (template_app (template_hole 12, template_var 2),
                         template_hole 4),
                       template_var 1)),
                   template_hole 3)))),
           template_app
            (template_app
              (template_app (template_hole 12, template_var 2),
               template_app
                (template_app (template_hole 2, template_var 1),
                 template_hole 1)),
             template_app
              (template_app
                (template_hole 0,
                 template_app (template_hole 11, template_var 0)),
               template_var 2)))))),
    ("Goodstein_Sequence.less_imp_decode_less",
     "[| 2 <= ?base; well_base\<^sub>h ?base ?M;
         aligned\<^sub>d ?base ?e ?M; aligned\<^sub>d ?base ?e ?N;
         ?M < ?N |]
      ==> decode ?base ?e ?M < decode ?base ?e ?N",
     template_implication
      ([template_inequation
         (less_equals,
          template_app
           (template_hole 7,
            template_app (template_hole 6, template_hole 5)),
          template_var 3),
        template_predicate
         (
            template_app
             (template_app (template_hole 4, template_var 3),
              template_var 2)
            ),
        template_predicate
         (
            template_app
             (template_app
               (template_app (template_hole 3, template_var 3),
                template_var 1),
              template_var 2)
            ),
        template_predicate
         (
            template_app
             (template_app
               (template_app (template_hole 3, template_var 3),
                template_var 1),
              template_var 0)
            ),
        template_inequation (less_than, template_var 2, template_var 0)],
       template_inequation
        (less_than,
         template_app
          (template_app
            (template_app (template_hole 0, template_var 3),
             template_var 1),
           template_var 2),
         template_app
          (template_app
            (template_app (template_hole 0, template_var 3),
             template_var 1),
           template_var 0))))]
