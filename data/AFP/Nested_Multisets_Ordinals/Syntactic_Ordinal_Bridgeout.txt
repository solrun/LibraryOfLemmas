Loading theory "HOL-Library.Function_Algebras" (required by "Draft.Syntactic_Ordinal_BridgeMoreTemplates" via "Draft.ExtrEqs" via "HOL-Library.BigO")
Loading theory "HOL-Library.Nat_Bijection" (required by "Draft.Syntactic_Ordinal_BridgeMoreTemplates" via "Draft.ExtrEqs" via "HOL-Library.Stream")
Loading theory "HOL-Library.Infinite_Set" (required by "Draft.Syntactic_Ordinal_BridgeMoreTemplates" via "Draft.Syntactic_Ordinal_Bridge" via "Draft.Syntactic_Ordinal" via "HOL-Library.Extended_Nat" via "HOL-Library.Order_Continuity" via "HOL-Library.Countable_Complete_Lattices" via "HOL-Library.Countable_Set")
Loading theory "HOL-Library.Cancellation" (required by "Draft.Syntactic_Ordinal_BridgeMoreTemplates" via "Draft.Syntactic_Ordinal_Bridge" via "Draft.Syntactic_Ordinal" via "Draft.Hereditary_Multiset" via "Draft.Multiset_More" via "HOL-Library.Multiset_Order" via "HOL-Library.Multiset")
instantiation
  fun :: (type, plus) plus
  plus_fun == plus :: ('a => 'b) => ('a => 'b) => 'a => 'b
instantiation
  fun :: (type, zero) zero
  zero_fun == zero_class.zero :: 'a => 'b
instantiation
  fun :: (type, times) times
  times_fun == times :: ('a => 'b) => ('a => 'b) => 'a => 'b
instantiation
  fun :: (type, one) one
  one_fun == one_class.one :: 'a => 'b
Found termination order: "(%p. size (snd p)) <*mlex*> {}"
### theory "HOL-Library.Function_Algebras"
### 0.146s elapsed time, 0.599s cpu time, 0.044s GC time
Loading theory "HOL-Library.Old_Datatype" (required by "Draft.Syntactic_Ordinal_BridgeMoreTemplates" via "Draft.Syntactic_Ordinal_Bridge" via "Draft.Syntactic_Ordinal" via "HOL-Library.Extended_Nat" via "HOL-Library.Countable")
consts
  enumerate :: "'a set => nat => 'a"
Found termination order: "size_list size <*mlex*> {}"
### theory "HOL-Library.Infinite_Set"
### 0.300s elapsed time, 1.199s cpu time, 0.134s GC time
Loading theory "HOL-Library.Product_Plus" (required by "Draft.Syntactic_Ordinal_BridgeMoreTemplates" via "Draft.Syntactic_Ordinal_Bridge" via "Draft.Syntactic_Ordinal" via "HOL-Library.Product_Order")
### theory "HOL-Library.Nat_Bijection"
### 0.323s elapsed time, 1.297s cpu time, 0.134s GC time
Loading theory "HOL-Library.Stream" (required by "Draft.Syntactic_Ordinal_BridgeMoreTemplates" via "Draft.ExtrEqs")
instantiation
  prod :: (zero, zero) zero
  zero_prod == zero_class.zero :: 'a * 'b
instantiation
  prod :: (plus, plus) plus
  plus_prod == plus :: 'a * 'b => 'a * 'b => 'a * 'b
instantiation
  prod :: (minus, minus) minus
  minus_prod == minus :: 'a * 'b => 'a * 'b => 'a * 'b
instantiation
  prod :: (uminus, uminus) uminus
  uminus_prod == uminus :: 'a * 'b => 'a * 'b
signature CANCEL = sig val proc: Proof.context -> cterm -> thm option end
functor Cancel_Fun (Data: CANCEL_NUMERALS_DATA): CANCEL
signature CANCEL_DATA =
  sig
    val dest_coeff: term -> int * term
    val dest_sum: term -> term list
    val find_first_coeff: term -> term list -> int * term list
    val mk_coeff: int * term -> term
    val mk_sum: typ -> term list -> term
    val norm_ss1: simpset
    val norm_ss2: simpset
    val norm_tac: Proof.context -> tactic
    val numeral_simp_tac: Proof.context -> tactic
    val prove_conv:
       tactic list -> Proof.context -> thm list -> term * term -> thm option
    val simplify_meta_eq: Proof.context -> thm -> thm
    val trans_tac: Proof.context -> thm option -> tactic
  end
structure Cancel_Data: CANCEL_DATA
### theory "HOL-Library.Product_Plus"
### 0.079s elapsed time, 0.317s cpu time, 0.000s GC time
Loading theory "HOL-Library.Product_Order" (required by "Draft.Syntactic_Ordinal_BridgeMoreTemplates" via "Draft.Syntactic_Ordinal_Bridge" via "Draft.Syntactic_Ordinal")
instantiation
  prod :: (ord, ord) ord
  less_eq_prod == less_eq :: 'a * 'b => 'a * 'b => bool
  less_prod == less :: 'a * 'b => 'a * 'b => bool
instantiation
  prod :: (inf, inf) inf
  inf_prod == inf :: 'a * 'b => 'a * 'b => 'a * 'b
instantiation
  prod :: (sup, sup) sup
  sup_prod == sup :: 'a * 'b => 'a * 'b => 'a * 'b
signature CANCEL_SIMPROCS =
  sig
    val diff_cancel: Proof.context -> cterm -> thm option
    val eq_cancel: Proof.context -> cterm -> thm option
    val less_cancel: Proof.context -> cterm -> thm option
    val less_eq_cancel: Proof.context -> cterm -> thm option
  end
structure Cancel_Simprocs: CANCEL_SIMPROCS
### theory "HOL-Library.Cancellation"
### 0.486s elapsed time, 1.931s cpu time, 0.221s GC time
Loading theory "HOL-Library.Multiset" (required by "Draft.Syntactic_Ordinal_BridgeMoreTemplates" via "Draft.Syntactic_Ordinal_Bridge" via "Draft.Syntactic_Ordinal" via "Draft.Hereditary_Multiset" via "Draft.Multiset_More" via "HOL-Library.Multiset_Order")
instantiation
  prod :: (top, top) top
  top_prod == top :: 'a * 'b
instantiation
  prod :: (bot, bot) bot
  bot_prod == bot :: 'a * 'b
instantiation
  prod :: (Inf, Inf) Inf
  Inf_prod == Inf :: ('a * 'b) set => 'a * 'b
instantiation
  prod :: (Sup, Sup) Sup
  Sup_prod == Sup :: ('a * 'b) set => 'a * 'b
signature OLD_DATATYPE =
  sig
    val check_specs: spec list -> theory -> spec list * Proof.context
    type config = {quiet: bool, strict: bool}
    val default_config: config
    type descr =
       (int * (string * dtyp list * (string * dtyp list) list)) list
    val distinct_lemma: thm
    datatype dtyp
    = DtRec of int | DtTFree of string * sort | DtType of string * dtyp list
    type info =
       {case_cong: thm,
        case_cong_weak: thm,
        case_name: string,
        case_rewrites: thm list,
        descr: descr,
        distinct: thm list,
        exhaust: thm,
        index: int,
        induct: thm,
        inducts: thm list,
        inject: thm list,
        nchotomy: thm,
        rec_names: string list,
        rec_rewrites: thm list, split: thm, split_asm: thm}
    val read_specs: spec_cmd list -> theory -> spec list * Proof.context
    type spec =
       (binding * (string * sort) list * mixfix) *
       (binding * typ list * mixfix) list
    type spec_cmd =
       (binding * (string * string option) list * mixfix) *
       (binding * string list * mixfix) list
  end
structure Old_Datatype: OLD_DATATYPE
### theory "HOL-Library.Old_Datatype"
### 0.407s elapsed time, 1.598s cpu time, 0.177s GC time
Loading theory "HOL-Library.Set_Algebras" (required by "Draft.Syntactic_Ordinal_BridgeMoreTemplates" via "Draft.ExtrEqs" via "HOL-Library.BigO")
instantiation
  set :: (plus) plus
  plus_set == plus :: 'a set => 'a set => 'a set
### theory "HOL-Library.Product_Order"
### 0.198s elapsed time, 0.777s cpu time, 0.087s GC time
Loading theory "HOL-Library.Sublist" (required by "Draft.Syntactic_Ordinal_BridgeMoreTemplates" via "Draft.Syntactic_Ordinal_Bridge")
instantiation
  set :: (times) times
  times_set == times :: 'a set => 'a set => 'a set
instantiation
  set :: (zero) zero
  zero_set == zero_class.zero :: 'a set
instantiation
  set :: (one) one
  one_set == one_class.one :: 'a set
instantiation
  multiset :: (type) cancel_comm_monoid_add
  zero_multiset == zero_class.zero :: 'a multiset
  minus_multiset == minus :: 'a multiset => 'a multiset => 'a multiset
  plus_multiset == plus :: 'a multiset => 'a multiset => 'a multiset
consts
  shift :: "'a list => 'a stream => 'a stream"
Proofs for coinductive predicate(s) "streamsp"
  Proving monotonicity ...
### theory "HOL-Library.Set_Algebras"
### 0.256s elapsed time, 0.996s cpu time, 0.197s GC time
Loading theory "HOL-Library.Tree" (required by "Draft.Syntactic_Ordinal_BridgeMoreTemplates" via "Draft.ExtrEqs" via "Draft.Templates")
consts
  snth :: "'a stream => nat => 'a"
consts
  stake :: "nat => 'a stream => 'a list"
consts
  sdrop :: "nat => 'a stream => 'a stream"
consts
  prefixes :: "'a list => 'a list list"
consts
  sfilter :: "('a => bool) => 'a stream => 'a stream"
consts
  cycle :: "'a list => 'a stream"
consts
  siterate :: "('a => 'a) => 'a => 'a stream"
Found termination order: "(%p. length (snd p)) <*mlex*> {}"
consts
  flat :: "'a list stream => 'a stream"
consts
  sinterleave :: "'a stream => 'a stream => 'a stream"
consts
  szip :: "'a stream => 'b stream => ('a * 'b) stream"
consts
  smap2 :: "('a => 'b => 'c) => 'a stream => 'b stream => 'c stream"
### Partially applied constant "Multiset.inter_mset" on left hand side of equation, in theorem:
### semilattice_inf.Inf_fin (\<inter>#) (set (?x # ?xs)) ==
### fold (\<inter>#) ?xs ?x
### theory "HOL-Library.Stream"
### 1.122s elapsed time, 4.290s cpu time, 0.998s GC time
Loading theory "HOL-Library.Countable" (required by "Draft.Syntactic_Ordinal_BridgeMoreTemplates" via "Draft.Syntactic_Ordinal_Bridge" via "Draft.Syntactic_Ordinal" via "HOL-Library.Extended_Nat")
### Partially applied constant "Multiset.union_mset" on left hand side of equation, in theorem:
### semilattice_sup.Sup_fin (\<union>#) (set (?x # ?xs)) ==
### fold (\<union>#) ?xs ?x
consts
  left :: "'a tree => 'a tree"
consts
  right :: "'a tree => 'a tree"
consts
  suffixes :: "'a list => 'a list list"
Proofs for inductive predicate(s) "list_emb"
Found termination order: "size <*mlex*> {}"
  Proving monotonicity ...
Found termination order: "size <*mlex*> {}"
signature MULTISET_SIMPROCS =
  sig
    val subset_cancel_msets: Proof.context -> cterm -> thm option
    val subseteq_cancel_msets: Proof.context -> cterm -> thm option
  end
structure Multiset_Simprocs: MULTISET_SIMPROCS
instantiation
  multiset :: (type) Inf
  Inf_multiset == Inf :: 'a multiset set => 'a multiset
Found termination order: "size <*mlex*> {}"
instantiation
  multiset :: (type) Sup
  Sup_multiset == Sup :: 'a multiset set => 'a multiset
class height = type +
  fixes height :: "'a => nat"
instantiation
  tree :: (type) height
  height_tree == height :: 'a tree => nat
### Additional type variable(s) in locale specification "countable": 'a
Found termination order: "size <*mlex*> {}"
class countable = type +
  assumes "ex_inj": "EX to_nat. inj to_nat"
instantiation
  multiset :: (type) size
  size_multiset == size :: 'a multiset => nat
Found termination order: "size <*mlex*> {}"
Found termination order: "size <*mlex*> {}"
locale comp_fun_commute
  fixes f :: "'a => 'b => 'b"
  assumes "comp_fun_commute f"
Found termination order: "size <*mlex*> {}"
Proofs for inductive predicate(s) "finite_item"
  Proving monotonicity ...
consts
  mset :: "'a list => 'a multiset"
consts
  sublists :: "'a list => 'a list list"
Found termination order: "size <*mlex*> {}"
Found termination order: "size <*mlex*> {}"
### theory "HOL-Library.Sublist"
### 1.723s elapsed time, 6.636s cpu time, 1.432s GC time
Loading theory "HOL-Library.BigO" (required by "Draft.Syntactic_Ordinal_BridgeMoreTemplates" via "Draft.ExtrEqs")
val old_countable_datatype_tac = fn: Proof.context -> int -> tactic
Found termination order: "size <*mlex*> {}"
class linorder = order +
  assumes "linear": "!!x y. x <= y | y <= x"
### ML warning (line 93 of "~~/src/HOL/Tools/BNF/bnf_lfp_countable.ML"):
### Pattern is not exhaustive.
### ML warning (line 139 of "~~/src/HOL/Tools/BNF/bnf_lfp_countable.ML"):
### Pattern is not exhaustive.
### ML warning (line 143 of "~~/src/HOL/Tools/BNF/bnf_lfp_countable.ML"):
### Matches are not exhaustive.
### ML warning (line 145 of "~~/src/HOL/Tools/BNF/bnf_lfp_countable.ML"):
### Matches are not exhaustive.
### ML warning (line 156 of "~~/src/HOL/Tools/BNF/bnf_lfp_countable.ML"):
### Pattern is not exhaustive.
signature BNF_LFP_COUNTABLE =
  sig
    val countable_datatype_tac: Proof.context -> tactic
    val derive_encode_injectives_thms:
       Proof.context -> string list -> thm list
  end
structure BNF_LFP_Countable: BNF_LFP_COUNTABLE
val countable_datatype_tac = fn: Proof.context -> thm -> thm Seq.seq
val countable_tac = fn: Proof.context -> int -> tactic
Found termination order: "(%p. size (fst p)) <*mlex*> {}"
locale comm_monoid_mset
  fixes f :: "'a => 'a => 'a"  (infixl \<open>\<^bold>*\<close> 70)
    and z :: "'a"  (\<open>\<^bold>1\<close>)
  assumes "comm_monoid_mset (\<^bold>*) \<^bold>1"
Found termination order: "size <*mlex*> {}"
class comm_monoid_add = ab_semigroup_add + monoid_add +
  assumes "add_0": "!!a. (0::'a) + a = a"
Found termination order: "(%p. size (snd p)) <*mlex*> {}"
class comm_monoid_add = ab_semigroup_add + monoid_add +
  assumes "add_0": "!!a. (0::'a) + a = a"
### theory "HOL-Library.Countable"
### 1.244s elapsed time, 4.889s cpu time, 0.657s GC time
Loading theory "HOL-Library.Countable_Set" (required by "Draft.Syntactic_Ordinal_BridgeMoreTemplates" via "Draft.Syntactic_Ordinal_Bridge" via "Draft.Syntactic_Ordinal" via "HOL-Library.Extended_Nat" via "HOL-Library.Order_Continuity" via "HOL-Library.Countable_Complete_Lattices")
class canonically_ordered_monoid_add = ordered_comm_monoid_add +
  assumes "le_iff_add": "!!a b. (a <= b) = (EX c. b = a + c)"
Found termination order: "size <*mlex*> {}"
class comm_monoid_mult = ab_semigroup_mult + monoid_mult + dvd +
  assumes "mult_1": "!!a. (1::'a) * a = a"
locale comm_monoid_set
  fixes f :: "'a => 'a => 'a"  (infixl \<open>\<^bold>*\<close> 70)
    and z :: "'a"  (\<open>\<^bold>1\<close>)
  assumes "comm_monoid_set (\<^bold>*) \<^bold>1"
### theory "HOL-Library.Tree"
### 2.296s elapsed time, 8.893s cpu time, 1.629s GC time
Loading theory "Draft.Templates" (required by "Draft.Syntactic_Ordinal_BridgeMoreTemplates" via "Draft.ExtrEqs")
datatype template_term
=
     t_empty
   | template_app of template_term * template_term
   | template_hole of int
   | template_var of int
datatype sign
= equals | greater_equals | greater_than | less_equals | less_than
datatype template
=
     template_bimplication of template * template
   | template_dunno
   | template_equation of template_term * template_term
   | template_implication of template list * template
   | template_inequation of sign * template_term * template_term
   | template_negation of template
   | template_predicate of template_term
constructor t_empty: template_term
constructor template_app: template_term * template_term -> template_term
constructor template_hole: int -> template_term
constructor template_var: int -> template_term
constructor equals: sign
constructor greater_equals: sign
constructor greater_than: sign
constructor less_equals: sign
constructor less_than: sign
constructor template_bimplication: template * template -> template
constructor template_dunno: template
constructor template_equation: template_term * template_term -> template
constructor template_implication: template list * template -> template
constructor template_inequation:
   sign * template_term * template_term -> template
constructor template_negation: template -> template
constructor template_predicate: template_term -> template
val vfs = fn: term -> (indexname * typ) list * (string * typ) list
val indexOf = fn: ''a list -> ''a -> int -> int
val has_eq = fn: term -> bool
val term2template = fn:
   (indexname * typ) list -> (string * typ) list -> term -> template_term
val lemma2predicate = fn: term -> term -> template
val makeTemplatewithContext = fn: term -> term -> template
val lemma2template = fn: term -> template
val thm2template = fn: thm -> template
val tterm2string = fn: template_term -> string
val template2string = fn: template -> string
val t = "height ?t <= size ?t": thm
val th =
   Const ("HOL.Trueprop", "bool => prop") $
     (Const ("Orderings.ord_class.less_eq", "nat => nat => bool") $
       (Const ("Tree.height_class.height", "?'a tree => nat") $
         Var (("t", 0), "?'a tree")) $
       (Const ("Nat.size_class.size", "?'a tree => nat") $
         Var (("t", 0), "?'a tree"))):
   term
### theory "Draft.Templates"
### 0.064s elapsed time, 0.254s cpu time, 0.000s GC time
Loading theory "Ordinal.OrdinalDef" (required by "Draft.Syntactic_Ordinal_BridgeMoreTemplates" via "Draft.Syntactic_Ordinal_Bridge" via "Ordinal.OrdinalOmega" via "Ordinal.OrdinalFix" via "Ordinal.OrdinalInverse" via "Ordinal.OrdinalArith" via "Ordinal.OrdinalRec" via "Ordinal.OrdinalCont" via "Ordinal.OrdinalInduct")
### theory "HOL-Library.BigO"
### 1.174s elapsed time, 4.465s cpu time, 1.476s GC time
Loading theory "Draft.ExtrEqs" (required by "Draft.Syntactic_Ordinal_BridgeMoreTemplates")
### theory "HOL-Library.Countable_Set"
### 0.803s elapsed time, 3.009s cpu time, 1.339s GC time
Loading theory "HOL-Library.Countable_Complete_Lattices" (required by "Draft.Syntactic_Ordinal_BridgeMoreTemplates" via "Draft.Syntactic_Ordinal_Bridge" via "Draft.Syntactic_Ordinal" via "HOL-Library.Extended_Nat" via "HOL-Library.Order_Continuity")
Proofs for inductive predicate(s) "ord0_leqp"
  Proving monotonicity ...
instantiation
  ord0 :: ord
  less_eq_ord0 == less_eq :: ord0 => ord0 => bool
  less_ord0 == less :: ord0 => ord0 => bool
class linorder = order +
  assumes "linear": "!!x y. x <= y | y <= x"
instantiation
  ordinal :: ord
  less_eq_ordinal == less_eq :: ordinal => ordinal => bool
  less_ordinal == less :: ordinal => ordinal => bool
class countable_complete_lattice = Inf + Sup + lattice + bot + top +
  assumes "ccInf_lower": "!!A x. [| countable A; x : A |] ==> Inf A <= x"
  assumes
    "ccInf_greatest":
      "!!A z. [| countable A; !!x. x : A ==> z <= x |] ==> z <= Inf A"
  assumes "ccSup_upper": "!!A x. [| countable A; x : A |] ==> x <= Sup A"
  assumes
    "ccSup_least":
      "!!A z. [| countable A; !!x. x : A ==> x <= z |] ==> Sup A <= z"
  assumes "ccInf_empty": "Inf {} = top"
  assumes "ccSup_empty": "Sup {} = bot"
### theory "Ordinal.OrdinalDef"
### 0.886s elapsed time, 3.340s cpu time, 1.275s GC time
Loading theory "Ordinal.OrdinalInduct" (required by "Draft.Syntactic_Ordinal_BridgeMoreTemplates" via "Draft.Syntactic_Ordinal_Bridge" via "Ordinal.OrdinalOmega" via "Ordinal.OrdinalFix" via "Ordinal.OrdinalInverse" via "Ordinal.OrdinalArith" via "Ordinal.OrdinalRec" via "Ordinal.OrdinalCont")
instantiation
  ordinal :: {one,zero}
  zero_ordinal == zero_class.zero :: ordinal
  one_ordinal == one_class.one :: ordinal
locale strict_mono
  fixes f :: "'a => 'b"
  assumes "OrdinalInduct.strict_mono f"
val eqpattern =
   Pattern
    (
       Const ("HOL.Trueprop", "bool => prop") $
         (Const ("HOL.eq", "?'a => ?'a => bool") $
           Var (("_dummy_", 1), "?'a") $ Var (("_dummy_", 2), "?'a"))
       ):
   term Find_Theorems.criterion
val badeqpattern = Pattern (Const ("Pure.eq", "?'a => ?'a => prop")):
   term Find_Theorems.criterion
val undefpattern =
   Pattern
    (
       Const ("HOL.Trueprop", "bool => prop") $
         (Const ("HOL.eq", "?'a => ?'a => bool") $
           Var (("_dummy_", 1), "?'a") $ Const ("HOL.undefined", "?'a"))
       ):
   term Find_Theorems.criterion
val thmpattern =
   Pattern
    (Const ("HOL.Trueprop", "bool => prop") $ Var (("_dummy_", 1), "bool")):
   term Find_Theorems.criterion
val badnames =
   ["*nitpick*", "*Nitpick*", "*full_exhaustive*", "*_def*", "Enum.finite*",
    "*Quickcheck*", "ATP*", "*Nunchaku*", "*Code*", "*BNF*", "*SMT*",
    "*.*.*"]:
   string list
val unwanted_names =
   [(false, Name "*nitpick*"), (false, Name "*Nitpick*"),
    (false, Name "*full_exhaustive*"), (false, Name "*_def*"),
    (false, Name "Enum.finite*"), (false, Name "*Quickcheck*"),
    (false, Name "ATP*"), (false, Name "*Nunchaku*"),
    (false, Name "*Code*"), (false, Name "*BNF*"), (false, Name "*SMT*"),
    (false, Name "*.*.*")]:
   (bool * term Find_Theorems.criterion) list
val has_vars = fn: term -> bool
val get_all_eqs = fn: string -> Proof.context -> (string * thm) list
val get_all_thms = fn: string -> Proof.context -> (string * thm) list
val get_noneq_thms = fn: string -> Proof.context -> (string * thm) list
val template_eqs = fn:
   string -> Proof.context -> (string * thm * template) list
val template_thms = fn:
   string -> Proof.context -> (string * thm * template) list
### theory "Draft.ExtrEqs"
### 0.676s elapsed time, 2.665s cpu time, 0.193s GC time
instantiation
  multiset :: (preorder) order
  less_eq_multiset == less_eq :: 'a multiset => 'a multiset => bool
  less_multiset == less :: 'a multiset => 'a multiset => bool
consts
  make_mono :: "(nat => ordinal) => nat => nat"
instantiation
  multiset :: (preorder) ordered_ab_semigroup_add
### theory "Ordinal.OrdinalInduct"
### 0.181s elapsed time, 0.676s cpu time, 0.083s GC time
Loading theory "Ordinal.OrdinalCont" (required by "Draft.Syntactic_Ordinal_BridgeMoreTemplates" via "Draft.Syntactic_Ordinal_Bridge" via "Ordinal.OrdinalOmega" via "Ordinal.OrdinalFix" via "Ordinal.OrdinalInverse" via "Ordinal.OrdinalArith" via "Ordinal.OrdinalRec")
Proofs for inductive predicate(s) "pw_leq"
  Proving monotonicity ...
locale continuous
  fixes F :: "ordinal => ordinal"
  assumes "continuous F"
locale normal
  fixes F :: "ordinal => ordinal"
  assumes "normal F"
### theory "Ordinal.OrdinalCont"
### 0.068s elapsed time, 0.205s cpu time, 0.000s GC time
Loading theory "Ordinal.OrdinalRec" (required by "Draft.Syntactic_Ordinal_BridgeMoreTemplates" via "Draft.Syntactic_Ordinal_Bridge" via "Ordinal.OrdinalOmega" via "Ordinal.OrdinalFix" via "Ordinal.OrdinalInverse" via "Ordinal.OrdinalArith")
locale porder
  fixes le :: "'a => 'a => bool"  (infixl \<open><<\<close> 55)
  assumes "porder (<<)"
locale omega_complete
  fixes le :: "'a => 'a => bool"  (infixl \<open><<\<close> 55)
    and lub :: "(nat => 'a) => 'a"
  assumes "omega_complete (<<) lub"
### theory "Ordinal.OrdinalRec"
### 0.493s elapsed time, 1.628s cpu time, 1.228s GC time
Loading theory "Ordinal.OrdinalArith" (required by "Draft.Syntactic_Ordinal_BridgeMoreTemplates" via "Draft.Syntactic_Ordinal_Bridge" via "Ordinal.OrdinalOmega" via "Ordinal.OrdinalFix" via "Ordinal.OrdinalInverse")
Found termination order: "(%p. length (fst p)) <*mlex*> {}"
instantiation
  ordinal :: plus
  plus_ordinal == plus :: ordinal => ordinal => ordinal
instantiation
  multiset :: (equal) equal
  equal_multiset == equal_class.equal :: 'a multiset => 'a multiset => bool
instantiation
  ordinal :: minus
  minus_ordinal == minus :: ordinal => ordinal => ordinal
instantiation
  multiset :: (random) random
  random_multiset == random_class.random ::
    natural
    => natural * natural
       => ('a multiset * (unit => term)) * natural * natural
instantiation
  multiset :: (full_exhaustive) full_exhaustive
  full_exhaustive_multiset == full_exhaustive_class.full_exhaustive ::
    ('a multiset * (unit => term) => (bool * term list) option)
    => natural => (bool * term list) option
instantiation
  ordinal :: times
  times_ordinal == times :: ordinal => ordinal => ordinal
Proofs for inductive predicate(s) "pred_mset"
  Proving monotonicity ...
### theory "Ordinal.OrdinalArith"
### 0.186s elapsed time, 0.559s cpu time, 0.061s GC time
Loading theory "Ordinal.OrdinalInverse" (required by "Draft.Syntactic_Ordinal_BridgeMoreTemplates" via "Draft.Syntactic_Ordinal_Bridge" via "Ordinal.OrdinalOmega" via "Ordinal.OrdinalFix")
Proofs for inductive predicate(s) "rel_mset'"
  Proving monotonicity ...
instantiation
  ordinal :: modulo
  modulo_ordinal == modulo :: ordinal => ordinal => ordinal
  divide_ordinal == divide :: ordinal => ordinal => ordinal
### theory "HOL-Library.Multiset"
### 4.584s elapsed time, 17.063s cpu time, 4.472s GC time
Loading theory "HOL-Library.Multiset_Order" (required by "Draft.Syntactic_Ordinal_BridgeMoreTemplates" via "Draft.Syntactic_Ordinal_Bridge" via "Draft.Syntactic_Ordinal" via "Draft.Hereditary_Multiset" via "Draft.Multiset_More")
### theory "Ordinal.OrdinalInverse"
### 0.153s elapsed time, 0.502s cpu time, 0.083s GC time
Loading theory "Ordinal.OrdinalFix" (required by "Draft.Syntactic_Ordinal_BridgeMoreTemplates" via "Draft.Syntactic_Ordinal_Bridge" via "Ordinal.OrdinalOmega")
class preorder = ord +
  assumes "less_le_not_le": "!!x y. (x < y) = (x <= y & ~ y <= x)"
    and "order_refl": "!!x. x <= x"
    and "order_trans": "!!x y z. [| x <= y; y <= z |] ==> x <= z"
consts
  iter :: "nat => ('a => 'a) => 'a => 'a"
### theory "Ordinal.OrdinalFix"
### 0.073s elapsed time, 0.268s cpu time, 0.000s GC time
Loading theory "Ordinal.OrdinalOmega" (required by "Draft.Syntactic_Ordinal_BridgeMoreTemplates" via "Draft.Syntactic_Ordinal_Bridge")
instantiation
  multiset :: (preorder) ordered_ab_semigroup_monoid_add_imp_le
consts
  ordinal_of_nat :: "nat => ordinal"
locale additive_principal
  fixes a :: "ordinal"
  assumes "additive_principal a"
instantiation
  multiset :: (wellorder) wellorder
instantiation
  multiset :: (preorder) order_bot
  bot_multiset == bot :: 'a multiset
class countable_complete_distrib_lattice = countable_complete_lattice +
  assumes
    "sup_ccInf": "!!B a. countable B ==> sup a (Inf B) = Inf (sup a ` B)"
  assumes
    "inf_ccSup": "!!B a. countable B ==> inf a (Sup B) = Sup (inf a ` B)"
instantiation
  multiset :: (linorder) distrib_lattice
  inf_multiset == inf :: 'a multiset => 'a multiset => 'a multiset
  sup_multiset == sup :: 'a multiset => 'a multiset => 'a multiset
consts
  from_cnf :: "ordinal list => ordinal"
### theory "HOL-Library.Multiset_Order"
### 0.257s elapsed time, 0.883s cpu time, 0.160s GC time
Loading theory "Draft.Nested_Multiset" (required by "Draft.Syntactic_Ordinal_BridgeMoreTemplates" via "Draft.Syntactic_Ordinal_Bridge" via "Draft.Syntactic_Ordinal" via "Draft.Hereditary_Multiset")
Loading theory "Draft.Multiset_More" (required by "Draft.Syntactic_Ordinal_BridgeMoreTemplates" via "Draft.Syntactic_Ordinal_Bridge" via "Draft.Syntactic_Ordinal" via "Draft.Hereditary_Multiset")
### Rewrite rule not in simpset:
### Wellfounded.accp to_cnf_rel ?x1 ==>
### to_cnf ?x1 ==
### if ?x1 = 0 then []
### else oLog \<omega> ?x1 # to_cnf (?x1 - \<omega> ** oLog \<omega> ?x1)
consts
  normalize_cnf :: "'a list => 'a list"
consts
  from_cnf2 :: "(ordinal * nat) list => ordinal"
### Rewrite rule not in simpset:
### Wellfounded.accp to_cnf2_rel ?x1 ==>
### to_cnf2 ?x1 ==
### if ?x1 = 0 then []
### else (oLog \<omega> ?x1,
###       inv ordinal_of_nat (?x1 div \<omega> ** oLog \<omega> ?x1)) #
###      to_cnf2 (?x1 mod \<omega> ** oLog \<omega> ?x1)
consts
  is_normalized2 :: "('a * 'b) list => bool"
### theory "Ordinal.OrdinalOmega"
### 0.265s elapsed time, 0.956s cpu time, 0.076s GC time
Proofs for inductive predicate(s) "no_elem"
  Proving monotonicity ...
Proofs for inductive predicate(s) "sub_nmsetp"
  Proving monotonicity ...
consts
  depth_nmset :: "'a nmultiset => nat"
instantiation
  nmultiset :: (preorder) preorder
  less_eq_nmultiset == less_eq :: 'a nmultiset => 'a nmultiset => bool
  less_nmultiset == less :: 'a nmultiset => 'a nmultiset => bool
instantiation
  nmultiset :: (order) order
instantiation
  nmultiset :: (linorder) linorder
instantiation
  nmultiset :: (wellorder) wellorder
### theory "Draft.Nested_Multiset"
### 0.644s elapsed time, 2.111s cpu time, 0.198s GC time
### theory "Draft.Multiset_More"
### 0.661s elapsed time, 2.142s cpu time, 0.198s GC time
Loading theory "Draft.Hereditary_Multiset" (required by "Draft.Syntactic_Ordinal_BridgeMoreTemplates" via "Draft.Syntactic_Ordinal_Bridge" via "Draft.Syntactic_Ordinal")
### theory "HOL-Library.Countable_Complete_Lattices"
### 2.581s elapsed time, 8.850s cpu time, 1.923s GC time
Loading theory "HOL-Library.Order_Continuity" (required by "Draft.Syntactic_Ordinal_BridgeMoreTemplates" via "Draft.Syntactic_Ordinal_Bridge" via "Draft.Syntactic_Ordinal" via "HOL-Library.Extended_Nat")
consts
  Rep_hmultiset :: "hmultiset => unit nmultiset"
consts
  Abs_hmultiset :: "unit nmultiset => hmultiset"
instantiation
  hmultiset :: linorder
  less_eq_hmultiset == less_eq :: hmultiset => hmultiset => bool
  less_hmultiset == less :: hmultiset => hmultiset => bool
instantiation
  hmultiset :: cancel_comm_monoid_add
  zero_hmultiset == zero_class.zero :: hmultiset
  minus_hmultiset == minus :: hmultiset => hmultiset => hmultiset
  plus_hmultiset == plus :: hmultiset => hmultiset => hmultiset
instantiation
  hmultiset :: order_bot
  bot_hmultiset == bot :: hmultiset
instantiation
  hmultiset :: distrib_lattice
  inf_hmultiset == inf :: hmultiset => hmultiset => hmultiset
  sup_hmultiset == sup :: hmultiset => hmultiset => hmultiset
### theory "Draft.Hereditary_Multiset"
### 0.491s elapsed time, 1.090s cpu time, 0.073s GC time
### theory "HOL-Library.Order_Continuity"
### 0.505s elapsed time, 1.105s cpu time, 0.145s GC time
Loading theory "HOL-Library.Extended_Nat" (required by "Draft.Syntactic_Ordinal_BridgeMoreTemplates" via "Draft.Syntactic_Ordinal_Bridge" via "Draft.Syntactic_Ordinal")
class infinity = type +
  fixes infinity :: "'a"
instantiation
  enat :: infinity
  infinity_enat == infinity :: enat
Proofs for inductive predicate(s) "rec_set_enat"
### No equation for constructor "Extended_Nat.infinity_class.infinity"
### in definition of function "the_enat"
consts
  the_enat :: "enat => nat"
instantiation
  enat :: zero_neq_one
  one_enat == one_class.one :: enat
  zero_enat == zero_class.zero :: enat
instantiation
  enat :: comm_monoid_add
  plus_enat == plus :: enat => enat => enat
instantiation
  enat :: {comm_semiring_1,semiring_no_zero_divisors}
  times_enat == times :: enat => enat => enat
instantiation
  enat :: minus
  minus_enat == minus :: enat => enat => enat
instantiation
  enat :: linordered_ab_semigroup_add
  less_eq_enat == less_eq :: enat => enat => bool
  less_enat == less :: enat => enat => bool
instantiation
  enat :: {order_bot,order_top}
  top_enat == top :: enat
  bot_enat == bot :: enat
structure Cancel_Enat_Common:
  sig
    val dest_sum: term -> term list
    val dest_summing: term * term list -> term list
    val find_first: term -> term list -> term list
    val find_first_t: term list -> term -> term list -> term list
    val mk_eq: term * term -> term
    val mk_sum: typ -> term list -> term
    val norm_ss: simpset
    val norm_tac: Proof.context -> tactic
    val simplify_meta_eq: Proof.context -> thm -> thm -> thm
    val trans_tac: Proof.context -> thm option -> tactic
  end
structure Eq_Enat_Cancel:
  sig val proc: Proof.context -> term -> thm option end
structure Le_Enat_Cancel:
  sig val proc: Proof.context -> term -> thm option end
structure Less_Enat_Cancel:
  sig val proc: Proof.context -> term -> thm option end
instantiation
  enat :: complete_lattice
  Inf_enat == Inf :: enat set => enat
  Sup_enat == Sup :: enat set => enat
  sup_enat == sup :: enat => enat => enat
  inf_enat == inf :: enat => enat => enat
### theory "HOL-Library.Extended_Nat"
### 0.465s elapsed time, 0.465s cpu time, 0.000s GC time
Loading theory "Draft.Syntactic_Ordinal" (required by "Draft.Syntactic_Ordinal_BridgeMoreTemplates" via "Draft.Syntactic_Ordinal_Bridge")
instantiation
  hmultiset :: comm_semiring_1
  one_hmultiset == one_class.one :: hmultiset
  times_hmultiset == times :: hmultiset => hmultiset => hmultiset
consts
  hmset_of_enat :: "enat => hmultiset"
### theory "Draft.Syntactic_Ordinal"
### 0.617s elapsed time, 0.659s cpu time, 0.058s GC time
Loading theory "Draft.Syntactic_Ordinal_Bridge" (required by "Draft.Syntactic_Ordinal_BridgeMoreTemplates")
instantiation
  ordinal :: order_bot
  bot_ordinal == bot :: ordinal
consts
  ordinal_of_hmset :: "hmultiset => ordinal"
### theory "Draft.Syntactic_Ordinal_Bridge"
### 0.435s elapsed time, 0.503s cpu time, 0.088s GC time
Loading theory "Draft.Syntactic_Ordinal_BridgeMoreTemplates"
val templateLemmas =
   [("Syntactic_Ordinal_Bridge.from_cnf_0_iff",
     "(from_cnf ?ks = 0) = (?ks = [])",
     template_bimplication
      (template_equation
        (template_app (template_hole 3, template_var 0), template_hole 2),
       template_equation (template_var 0, template_hole 0))),
    ("Syntactic_Ordinal_Bridge.ordinal_of_hmset_iff",
     "(ordinal_of_hmset ?k = 0) = (?k = 0)",
     template_bimplication
      (template_equation
        (template_app (template_hole 3, template_var 0), template_hole 2),
       template_equation (template_var 0, template_hole 0))),
    ("Syntactic_Ordinal_Bridge.ordinal_of_hmset_less",
     "(ordinal_of_hmset ?k < ordinal_of_hmset ?l) = (?k < ?l)",
     template_equation
      (template_app
        (template_app
          (template_hole 2, template_app (template_hole 1, template_var 1)),
         template_app (template_hole 1, template_var 0)),
       template_app
        (template_app (template_hole 0, template_var 1), template_var 0))),
    ("Syntactic_Ordinal_Bridge.insort_bot", "insort bot ?xs = bot # ?xs",
     template_equation
      (template_app
        (template_app
          (template_app (template_hole 2, t_empty), template_hole 1),
         template_var 0),
       template_app
        (template_app (template_hole 0, template_hole 1), template_var 0))),
    ("Syntactic_Ordinal_Bridge.insort_0_ordinal", "insort 0 ?xs = 0 # ?xs",
     template_equation
      (template_app
        (template_app
          (template_app (template_hole 2, t_empty), template_hole 1),
         template_var 0),
       template_app
        (template_app (template_hole 0, template_hole 1), template_var 0))),
    ("Syntactic_Ordinal_Bridge.ordinal_of_hmset_suc",
     "ordinal_of_hmset (?k + 1) = ordinal_of_hmset ?k + 1",
     template_equation
      (template_app
        (template_hole 4,
         template_app
          (template_app (template_hole 3, template_var 0),
           template_hole 2)),
       template_app
        (template_app
          (template_hole 1, template_app (template_hole 4, template_var 0)),
         template_hole 0))),
    ("Syntactic_Ordinal_Bridge.from_cnf_append",
     "from_cnf (?ks @ ?ls) = from_cnf ?ks + from_cnf ?ls",
     template_equation
      (template_app
        (template_hole 2,
         template_app
          (template_app (template_hole 1, template_var 1), template_var 0)),
       template_app
        (template_app
          (template_hole 0, template_app (template_hole 2, template_var 1)),
         template_app (template_hole 2, template_var 0)))),
    ("Syntactic_Ordinal_Bridge.ordinal_of_hmset_singleton",
     "ordinal_of_hmset (\<omega>\<^sub>h^ ?k) =
      \<omega> ** ordinal_of_hmset ?k",
     template_equation
      (template_app
        (template_hole 5,
         template_app
          (template_hole 4,
           template_app
            (template_app (template_hole 3, template_var 0),
             template_hole 2))),
       template_app
        (template_app (template_hole 1, template_hole 0),
         template_app (template_hole 5, template_var 0)))),
    ("Syntactic_Ordinal_Bridge.less_imp_ordinal_of_hmset_less",
     "?k < ?l ==> ordinal_of_hmset ?k < ordinal_of_hmset ?l",
     template_implication
      ([template_inequation (less_than, template_var 1, template_var 0)],
       template_inequation
        (less_than, template_app (template_hole 0, template_var 1),
         template_app (template_hole 0, template_var 0)))),
    ("Syntactic_Ordinal_Bridge.subseq_from_cnf_less_eq",
     "subseq ?ks ?ls ==> from_cnf ?ks <= from_cnf ?ls",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app (template_hole 3, template_hole 2),
                template_var 1),
              template_var 0)
            )],
       template_inequation
        (less_equals, template_app (template_hole 0, template_var 1),
         template_app (template_hole 0, template_var 0)))),
    ("Syntactic_Ordinal_Bridge.from_cnf_less_\<omega>_exp",
     "ALL k:set ?ks. k < ?l ==> from_cnf ?ks < \<omega> ** ?l",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_hole 5,
                template_app (template_hole 4, template_var 1)),
              t_empty)
            )],
       template_inequation
        (less_than, template_app (template_hole 2, template_var 1),
         template_app
          (template_app (template_hole 1, template_hole 0),
           template_var 0))))]:
   (string * thm * template) list
### theory "Draft.Syntactic_Ordinal_BridgeMoreTemplates"
### 0.518s elapsed time, 0.760s cpu time, 0.105s GC time
val it = (): unit
