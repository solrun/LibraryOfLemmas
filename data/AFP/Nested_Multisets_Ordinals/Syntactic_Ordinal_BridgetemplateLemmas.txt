   [("Syntactic_Ordinal_Bridge.from_cnf_0_iff",
     "(from_cnf ?ks = 0) = (?ks = [])",
     template_bimplication
      (template_equation
        (template_app (template_hole 3, template_var 0), template_hole 2),
       template_equation (template_var 0, template_hole 0))),
    ("Syntactic_Ordinal_Bridge.ordinal_of_hmset_iff",
     "(ordinal_of_hmset ?k = 0) = (?k = 0)",
     template_bimplication
      (template_equation
        (template_app (template_hole 3, template_var 0), template_hole 2),
       template_equation (template_var 0, template_hole 0))),
    ("Syntactic_Ordinal_Bridge.ordinal_of_hmset_less",
     "(ordinal_of_hmset ?k < ordinal_of_hmset ?l) = (?k < ?l)",
     template_equation
      (template_app
        (template_app
          (template_hole 2, template_app (template_hole 1, template_var 1)),
         template_app (template_hole 1, template_var 0)),
       template_app
        (template_app (template_hole 0, template_var 1), template_var 0))),
    ("Syntactic_Ordinal_Bridge.insort_bot", "insort bot ?xs = bot # ?xs",
     template_equation
      (template_app
        (template_app
          (template_app (template_hole 2, t_empty), template_hole 1),
         template_var 0),
       template_app
        (template_app (template_hole 0, template_hole 1), template_var 0))),
    ("Syntactic_Ordinal_Bridge.insort_0_ordinal", "insort 0 ?xs = 0 # ?xs",
     template_equation
      (template_app
        (template_app
          (template_app (template_hole 2, t_empty), template_hole 1),
         template_var 0),
       template_app
        (template_app (template_hole 0, template_hole 1), template_var 0))),
    ("Syntactic_Ordinal_Bridge.ordinal_of_hmset_suc",
     "ordinal_of_hmset (?k + 1) = ordinal_of_hmset ?k + 1",
     template_equation
      (template_app
        (template_hole 4,
         template_app
          (template_app (template_hole 3, template_var 0),
           template_hole 2)),
       template_app
        (template_app
          (template_hole 1, template_app (template_hole 4, template_var 0)),
         template_hole 0))),
    ("Syntactic_Ordinal_Bridge.from_cnf_append",
     "from_cnf (?ks @ ?ls) = from_cnf ?ks + from_cnf ?ls",
     template_equation
      (template_app
        (template_hole 2,
         template_app
          (template_app (template_hole 1, template_var 1), template_var 0)),
       template_app
        (template_app
          (template_hole 0, template_app (template_hole 2, template_var 1)),
         template_app (template_hole 2, template_var 0)))),
    ("Syntactic_Ordinal_Bridge.ordinal_of_hmset_singleton",
     "ordinal_of_hmset (\<omega>\<^sub>h^ ?k) =
      \<omega> ** ordinal_of_hmset ?k",
     template_equation
      (template_app
        (template_hole 5,
         template_app
          (template_hole 4,
           template_app
            (template_app (template_hole 3, template_var 0),
             template_hole 2))),
       template_app
        (template_app (template_hole 1, template_hole 0),
         template_app (template_hole 5, template_var 0)))),
    ("Syntactic_Ordinal_Bridge.less_imp_ordinal_of_hmset_less",
     "?k < ?l ==> ordinal_of_hmset ?k < ordinal_of_hmset ?l",
     template_implication
      ([template_inequation (less_than, template_var 1, template_var 0)],
       template_inequation
        (less_than, template_app (template_hole 0, template_var 1),
         template_app (template_hole 0, template_var 0)))),
    ("Syntactic_Ordinal_Bridge.subseq_from_cnf_less_eq",
     "subseq ?ks ?ls ==> from_cnf ?ks <= from_cnf ?ls",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app (template_hole 3, template_hole 2),
                template_var 1),
              template_var 0)
            )],
       template_inequation
        (less_equals, template_app (template_hole 0, template_var 1),
         template_app (template_hole 0, template_var 0)))),
    ("Syntactic_Ordinal_Bridge.from_cnf_less_\<omega>_exp",
     "ALL k:set ?ks. k < ?l ==> from_cnf ?ks < \<omega> ** ?l",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_hole 5,
                template_app (template_hole 4, template_var 1)),
              t_empty)
            )],
       template_inequation
        (less_than, template_app (template_hole 2, template_var 1),
         template_app
          (template_app (template_hole 1, template_hole 0),
           template_var 0))))]
