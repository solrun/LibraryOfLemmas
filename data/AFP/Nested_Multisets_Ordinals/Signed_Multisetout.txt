Loading theory "HOL-Library.Function_Algebras" (required by "Draft.Signed_MultisetMoreTemplates" via "Draft.ExtrEqs" via "HOL-Library.BigO")
Loading theory "HOL-Library.Cancellation" (required by "Draft.Signed_MultisetMoreTemplates" via "Draft.Signed_Multiset" via "Draft.Multiset_More" via "HOL-Library.Multiset_Order" via "HOL-Library.Multiset")
Loading theory "HOL-Library.Set_Algebras" (required by "Draft.Signed_MultisetMoreTemplates" via "Draft.ExtrEqs" via "HOL-Library.BigO")
Loading theory "HOL-Library.Nat_Bijection" (required by "Draft.Signed_MultisetMoreTemplates" via "Draft.ExtrEqs" via "HOL-Library.Stream")
instantiation
  fun :: (type, plus) plus
  plus_fun == plus :: ('a => 'b) => ('a => 'b) => 'a => 'b
instantiation
  set :: (plus) plus
  plus_set == plus :: 'a set => 'a set => 'a set
instantiation
  set :: (times) times
  times_set == times :: 'a set => 'a set => 'a set
instantiation
  fun :: (type, zero) zero
  zero_fun == zero_class.zero :: 'a => 'b
instantiation
  fun :: (type, times) times
  times_fun == times :: ('a => 'b) => ('a => 'b) => 'a => 'b
instantiation
  set :: (zero) zero
  zero_set == zero_class.zero :: 'a set
instantiation
  set :: (one) one
  one_set == one_class.one :: 'a set
instantiation
  fun :: (type, one) one
  one_fun == one_class.one :: 'a => 'b
Found termination order: "(%p. size (snd p)) <*mlex*> {}"
### theory "HOL-Library.Function_Algebras"
### 0.154s elapsed time, 0.639s cpu time, 0.049s GC time
Loading theory "HOL-Library.Sublist" (required by "Draft.Signed_MultisetMoreTemplates" via "Draft.Signed_Multiset" via "Draft.Multiset_More")
Found termination order: "size_list size <*mlex*> {}"
### theory "HOL-Library.Set_Algebras"
### 0.275s elapsed time, 1.123s cpu time, 0.049s GC time
Loading theory "HOL-Library.Tree" (required by "Draft.Signed_MultisetMoreTemplates" via "Draft.ExtrEqs" via "Draft.Templates")
### theory "HOL-Library.Nat_Bijection"
### 0.305s elapsed time, 1.245s cpu time, 0.049s GC time
Loading theory "HOL-Library.Stream" (required by "Draft.Signed_MultisetMoreTemplates" via "Draft.ExtrEqs")
signature CANCEL = sig val proc: Proof.context -> cterm -> thm option end
functor Cancel_Fun (Data: CANCEL_NUMERALS_DATA): CANCEL
signature CANCEL_DATA =
  sig
    val dest_coeff: term -> int * term
    val dest_sum: term -> term list
    val find_first_coeff: term -> term list -> int * term list
    val mk_coeff: int * term -> term
    val mk_sum: typ -> term list -> term
    val norm_ss1: simpset
    val norm_ss2: simpset
    val norm_tac: Proof.context -> tactic
    val numeral_simp_tac: Proof.context -> tactic
    val prove_conv:
       tactic list -> Proof.context -> thm list -> term * term -> thm option
    val simplify_meta_eq: Proof.context -> thm -> thm
    val trans_tac: Proof.context -> thm option -> tactic
  end
structure Cancel_Data: CANCEL_DATA
signature CANCEL_SIMPROCS =
  sig
    val diff_cancel: Proof.context -> cterm -> thm option
    val eq_cancel: Proof.context -> cterm -> thm option
    val less_cancel: Proof.context -> cterm -> thm option
    val less_eq_cancel: Proof.context -> cterm -> thm option
  end
structure Cancel_Simprocs: CANCEL_SIMPROCS
### theory "HOL-Library.Cancellation"
### 0.435s elapsed time, 1.752s cpu time, 0.151s GC time
Loading theory "HOL-Library.Multiset" (required by "Draft.Signed_MultisetMoreTemplates" via "Draft.Signed_Multiset" via "Draft.Multiset_More" via "HOL-Library.Multiset_Order")
consts
  prefixes :: "'a list => 'a list list"
instantiation
  multiset :: (type) cancel_comm_monoid_add
  zero_multiset == zero_class.zero :: 'a multiset
  minus_multiset == minus :: 'a multiset => 'a multiset => 'a multiset
  plus_multiset == plus :: 'a multiset => 'a multiset => 'a multiset
Found termination order: "(%p. length (snd p)) <*mlex*> {}"
consts
  shift :: "'a list => 'a stream => 'a stream"
Proofs for coinductive predicate(s) "streamsp"
  Proving monotonicity ...
consts
  snth :: "'a stream => nat => 'a"
consts
  left :: "'a tree => 'a tree"
consts
  right :: "'a tree => 'a tree"
consts
  stake :: "nat => 'a stream => 'a list"
consts
  sdrop :: "nat => 'a stream => 'a stream"
Found termination order: "size <*mlex*> {}"
consts
  sfilter :: "('a => bool) => 'a stream => 'a stream"
consts
  suffixes :: "'a list => 'a list list"
Found termination order: "size <*mlex*> {}"
consts
  cycle :: "'a list => 'a stream"
Proofs for inductive predicate(s) "list_emb"
  Proving monotonicity ...
consts
  siterate :: "('a => 'a) => 'a => 'a stream"
Found termination order: "size <*mlex*> {}"
consts
  flat :: "'a list stream => 'a stream"
class height = type +
  fixes height :: "'a => nat"
instantiation
  tree :: (type) height
  height_tree == height :: 'a tree => nat
consts
  sinterleave :: "'a stream => 'a stream => 'a stream"
Found termination order: "size <*mlex*> {}"
consts
  szip :: "'a stream => 'b stream => ('a * 'b) stream"
### Partially applied constant "Multiset.inter_mset" on left hand side of equation, in theorem:
### semilattice_inf.Inf_fin (\<inter>#) (set (?x # ?xs)) ==
### fold (\<inter>#) ?xs ?x
consts
  smap2 :: "('a => 'b => 'c) => 'a stream => 'b stream => 'c stream"
Found termination order: "size <*mlex*> {}"
### theory "HOL-Library.Stream"
### 1.147s elapsed time, 4.353s cpu time, 1.092s GC time
Loading theory "HOL-Library.BigO" (required by "Draft.Signed_MultisetMoreTemplates" via "Draft.ExtrEqs")
### Partially applied constant "Multiset.union_mset" on left hand side of equation, in theorem:
### semilattice_sup.Sup_fin (\<union>#) (set (?x # ?xs)) ==
### fold (\<union>#) ?xs ?x
Found termination order: "size <*mlex*> {}"
Found termination order: "size <*mlex*> {}"
Found termination order: "size <*mlex*> {}"
signature MULTISET_SIMPROCS =
  sig
    val subset_cancel_msets: Proof.context -> cterm -> thm option
    val subseteq_cancel_msets: Proof.context -> cterm -> thm option
  end
structure Multiset_Simprocs: MULTISET_SIMPROCS
Found termination order: "size <*mlex*> {}"
instantiation
  multiset :: (type) Inf
  Inf_multiset == Inf :: 'a multiset set => 'a multiset
instantiation
  multiset :: (type) Sup
  Sup_multiset == Sup :: 'a multiset set => 'a multiset
consts
  sublists :: "'a list => 'a list list"
Found termination order: "size <*mlex*> {}"
### theory "HOL-Library.Sublist"
### 1.725s elapsed time, 6.631s cpu time, 1.344s GC time
Found termination order: "(%p. size (fst p)) <*mlex*> {}"
instantiation
  multiset :: (type) size
  size_multiset == size :: 'a multiset => nat
Found termination order: "size <*mlex*> {}"
locale comp_fun_commute
  fixes f :: "'a => 'b => 'b"
  assumes "comp_fun_commute f"
Found termination order: "(%p. size (snd p)) <*mlex*> {}"
consts
  mset :: "'a list => 'a multiset"
class linorder = order +
  assumes "linear": "!!x y. x <= y | y <= x"
### theory "HOL-Library.BigO"
### 0.837s elapsed time, 2.940s cpu time, 0.402s GC time
Found termination order: "size <*mlex*> {}"
locale comm_monoid_mset
  fixes f :: "'a => 'a => 'a"  (infixl \<open>\<^bold>*\<close> 70)
    and z :: "'a"  (\<open>\<^bold>1\<close>)
  assumes "comm_monoid_mset (\<^bold>*) \<^bold>1"
class comm_monoid_add = ab_semigroup_add + monoid_add +
  assumes "add_0": "!!a. (0::'a) + a = a"
### theory "HOL-Library.Tree"
### 2.441s elapsed time, 8.604s cpu time, 2.305s GC time
Loading theory "Draft.Templates" (required by "Draft.Signed_MultisetMoreTemplates" via "Draft.ExtrEqs")
class comm_monoid_add = ab_semigroup_add + monoid_add +
  assumes "add_0": "!!a. (0::'a) + a = a"
datatype template_term
=
     t_empty
   | template_app of template_term * template_term
   | template_hole of int
   | template_var of int
datatype sign
= equals | greater_equals | greater_than | less_equals | less_than
datatype template
=
     template_bimplication of template * template
   | template_dunno
   | template_equation of template_term * template_term
   | template_implication of template list * template
   | template_inequation of sign * template_term * template_term
   | template_negation of template
   | template_predicate of template_term
constructor t_empty: template_term
constructor template_app: template_term * template_term -> template_term
constructor template_hole: int -> template_term
constructor template_var: int -> template_term
constructor equals: sign
constructor greater_equals: sign
constructor greater_than: sign
constructor less_equals: sign
constructor less_than: sign
constructor template_bimplication: template * template -> template
constructor template_dunno: template
constructor template_equation: template_term * template_term -> template
constructor template_implication: template list * template -> template
constructor template_inequation:
   sign * template_term * template_term -> template
constructor template_negation: template -> template
constructor template_predicate: template_term -> template
val vfs = fn: term -> (indexname * typ) list * (string * typ) list
val indexOf = fn: ''a list -> ''a -> int -> int
val has_eq = fn: term -> bool
val term2template = fn:
   (indexname * typ) list -> (string * typ) list -> term -> template_term
val lemma2predicate = fn: term -> term -> template
val makeTemplatewithContext = fn: term -> term -> template
val lemma2template = fn: term -> template
val thm2template = fn: thm -> template
val tterm2string = fn: template_term -> string
val template2string = fn: template -> string
val t = "height ?t <= size ?t": thm
val th =
   Const ("HOL.Trueprop", "bool => prop") $
     (Const ("Orderings.ord_class.less_eq", "nat => nat => bool") $
       (Const ("Tree.height_class.height", "?'a tree => nat") $
         Var (("t", 0), "?'a tree")) $
       (Const ("Nat.size_class.size", "?'a tree => nat") $
         Var (("t", 0), "?'a tree"))):
   term
### theory "Draft.Templates"
### 0.054s elapsed time, 0.106s cpu time, 0.000s GC time
Loading theory "Draft.ExtrEqs" (required by "Draft.Signed_MultisetMoreTemplates")
class canonically_ordered_monoid_add = ordered_comm_monoid_add +
  assumes "le_iff_add": "!!a b. (a <= b) = (EX c. b = a + c)"
class comm_monoid_mult = ab_semigroup_mult + monoid_mult + dvd +
  assumes "mult_1": "!!a. (1::'a) * a = a"
val eqpattern =
   Pattern
    (
       Const ("HOL.Trueprop", "bool => prop") $
         (Const ("HOL.eq", "?'a => ?'a => bool") $
           Var (("_dummy_", 1), "?'a") $ Var (("_dummy_", 2), "?'a"))
       ):
   term Find_Theorems.criterion
val badeqpattern = Pattern (Const ("Pure.eq", "?'a => ?'a => prop")):
   term Find_Theorems.criterion
val undefpattern =
   Pattern
    (
       Const ("HOL.Trueprop", "bool => prop") $
         (Const ("HOL.eq", "?'a => ?'a => bool") $
           Var (("_dummy_", 1), "?'a") $ Const ("HOL.undefined", "?'a"))
       ):
   term Find_Theorems.criterion
val thmpattern =
   Pattern
    (Const ("HOL.Trueprop", "bool => prop") $ Var (("_dummy_", 1), "bool")):
   term Find_Theorems.criterion
val badnames =
   ["*nitpick*", "*Nitpick*", "*full_exhaustive*", "*_def*", "Enum.finite*",
    "*Quickcheck*", "ATP*", "*Nunchaku*", "*Code*", "*BNF*", "*SMT*",
    "*.*.*"]:
   string list
val unwanted_names =
   [(false, Name "*nitpick*"), (false, Name "*Nitpick*"),
    (false, Name "*full_exhaustive*"), (false, Name "*_def*"),
    (false, Name "Enum.finite*"), (false, Name "*Quickcheck*"),
    (false, Name "ATP*"), (false, Name "*Nunchaku*"),
    (false, Name "*Code*"), (false, Name "*BNF*"), (false, Name "*SMT*"),
    (false, Name "*.*.*")]:
   (bool * term Find_Theorems.criterion) list
val has_vars = fn: term -> bool
val get_all_eqs = fn: string -> Proof.context -> (string * thm) list
val get_all_thms = fn: string -> Proof.context -> (string * thm) list
val get_noneq_thms = fn: string -> Proof.context -> (string * thm) list
val template_eqs = fn:
   string -> Proof.context -> (string * thm * template) list
val template_thms = fn:
   string -> Proof.context -> (string * thm * template) list
### theory "Draft.ExtrEqs"
### 0.551s elapsed time, 1.142s cpu time, 0.092s GC time
class linorder = order +
  assumes "linear": "!!x y. x <= y | y <= x"
instantiation
  multiset :: (preorder) order
  less_eq_multiset == less_eq :: 'a multiset => 'a multiset => bool
  less_multiset == less :: 'a multiset => 'a multiset => bool
instantiation
  multiset :: (preorder) ordered_ab_semigroup_add
Proofs for inductive predicate(s) "pw_leq"
  Proving monotonicity ...
Found termination order: "(%p. length (fst p)) <*mlex*> {}"
instantiation
  multiset :: (equal) equal
  equal_multiset == equal_class.equal :: 'a multiset => 'a multiset => bool
instantiation
  multiset :: (random) random
  random_multiset == random_class.random ::
    natural
    => natural * natural
       => ('a multiset * (unit => term)) * natural * natural
instantiation
  multiset :: (full_exhaustive) full_exhaustive
  full_exhaustive_multiset == full_exhaustive_class.full_exhaustive ::
    ('a multiset * (unit => term) => (bool * term list) option)
    => natural => (bool * term list) option
Proofs for inductive predicate(s) "pred_mset"
  Proving monotonicity ...
Proofs for inductive predicate(s) "rel_mset'"
  Proving monotonicity ...
### theory "HOL-Library.Multiset"
### 3.508s elapsed time, 9.771s cpu time, 2.276s GC time
Loading theory "HOL-Library.Multiset_Order" (required by "Draft.Signed_MultisetMoreTemplates" via "Draft.Signed_Multiset" via "Draft.Multiset_More")
class preorder = ord +
  assumes "less_le_not_le": "!!x y. (x < y) = (x <= y & ~ y <= x)"
    and "order_refl": "!!x. x <= x"
    and "order_trans": "!!x y z. [| x <= y; y <= z |] ==> x <= z"
instantiation
  multiset :: (preorder) ordered_ab_semigroup_monoid_add_imp_le
instantiation
  multiset :: (wellorder) wellorder
instantiation
  multiset :: (preorder) order_bot
  bot_multiset == bot :: 'a multiset
instantiation
  multiset :: (linorder) distrib_lattice
  inf_multiset == inf :: 'a multiset => 'a multiset => 'a multiset
  sup_multiset == sup :: 'a multiset => 'a multiset => 'a multiset
### theory "HOL-Library.Multiset_Order"
### 0.428s elapsed time, 1.153s cpu time, 0.929s GC time
Loading theory "Draft.Multiset_More" (required by "Draft.Signed_MultisetMoreTemplates" via "Draft.Signed_Multiset")
### theory "Draft.Multiset_More"
### 0.538s elapsed time, 0.702s cpu time, 0.149s GC time
Loading theory "Draft.Signed_Multiset" (required by "Draft.Signed_MultisetMoreTemplates")
instantiation
  zmultiset :: (type) cancel_comm_monoid_add
  zero_zmultiset == zero_class.zero :: 'a zmultiset
  minus_zmultiset == minus :: 'a zmultiset => 'a zmultiset => 'a zmultiset
  plus_zmultiset == plus :: 'a zmultiset => 'a zmultiset => 'a zmultiset
instantiation
  zmultiset :: (type) group_add
  uminus_zmultiset == uminus :: 'a zmultiset => 'a zmultiset
Found termination order: "(%p. size (fst p)) <*mlex*> {}"
instantiation
  zmultiset :: (preorder) order
  less_eq_zmultiset == less_eq :: 'a zmultiset => 'a zmultiset => bool
  less_zmultiset == less :: 'a zmultiset => 'a zmultiset => bool
instantiation
  zmultiset :: (linorder) distrib_lattice
  inf_zmultiset == inf :: 'a zmultiset => 'a zmultiset => 'a zmultiset
  sup_zmultiset == sup :: 'a zmultiset => 'a zmultiset => 'a zmultiset
signature ZMULTISET_SIMPROCS =
  sig
    val subset_cancel_zmsets: Proof.context -> cterm -> thm option
    val subseteq_cancel_zmsets: Proof.context -> cterm -> thm option
  end
structure ZMultiset_Simprocs: ZMULTISET_SIMPROCS
### theory "Draft.Signed_Multiset"
### 0.661s elapsed time, 0.730s cpu time, 0.092s GC time
Loading theory "Draft.Signed_MultisetMoreTemplates"
val templateLemmas =
   [("Signed_Multiset.finite_set_zmset", "finite (set_zmset ?M)",
     template_predicate
      (
         template_app
          (template_hole 1, template_app (template_hole 0, template_var 0))
         )),
    ("Signed_Multiset.zcount_empty", "zcount {#}\<^sub>z ?a = 0",
     template_equation
      (template_app
        (template_app (template_hole 2, template_hole 1), template_var 0),
       template_hole 0)),
    ("Signed_Multiset.multi_psub_self_zmset",
     "(?A \<subset>#\<^sub>z ?A) = False",
     template_equation
      (template_app
        (template_app (template_hole 1, template_var 0), template_var 0),
       template_hole 0)),
    ("Signed_Multiset.neg_zmset_pos", "mset_neg (zmset_of ?M) = {#}",
     template_equation
      (template_app
        (template_hole 2, template_app (template_hole 1, template_var 0)),
       template_hole 0)),
    ("Signed_Multiset.zmset_of_inverse", "mset_pos (zmset_of ?M) = ?M",
     template_equation
      (template_app
        (template_hole 1, template_app (template_hole 0, template_var 0)),
       template_var 0)),
    ("Signed_Multiset.filter_empty_zmset",
     "filter_zmset ?P {#}\<^sub>z = {#}\<^sub>z",
     template_equation
      (template_app
        (template_app (template_hole 1, template_var 0), template_hole 0),
       template_hole 0)),
    ("Signed_Multiset.repeat_zmset_empty",
     "repeat_zmset ?n {#}\<^sub>z = {#}\<^sub>z",
     template_equation
      (template_app
        (template_app (template_hole 1, template_var 0), template_hole 0),
       template_hole 0)),
    ("Signed_Multiset.replicate_zmset_0",
     "replicate_zmset 0 ?x = {#}\<^sub>z",
     template_equation
      (template_app
        (template_app (template_hole 2, template_hole 1), template_var 0),
       template_hole 0)),
    ("Signed_Multiset.multi_psub_of_add_self_zmset",
     "?A \<subset>#\<^sub>z add_zmset ?x ?A",
     template_predicate
      (
         template_app
          (template_app (template_hole 1, template_var 1),
           template_app
            (template_app (template_hole 0, template_var 0),
             template_var 1))
         )),
    ("Signed_Multiset.mset_pos_supset",
     "?A \<subseteq>#\<^sub>z zmset_of (mset_pos ?A)",
     template_predicate
      (
         template_app
          (template_app (template_hole 2, template_var 0),
           template_app
            (template_hole 1,
             template_app (template_hole 0, template_var 0)))
         )),
    ("Signed_Multiset.empty_ne_singleton_zmset",
     "{#}\<^sub>z ~= {#?x#}\<^sub>z",
     template_negation
      (
         template_equation
          (template_hole 1,
           template_app
            (template_app (template_hole 0, template_var 0),
             template_hole 1))
         )),
    ("Signed_Multiset.singleton_ne_empty_zmset",
     "{#?x#}\<^sub>z ~= {#}\<^sub>z",
     template_negation
      (
         template_equation
          (template_app
            (template_app (template_hole 1, template_var 0),
             template_hole 0),
           template_hole 0)
         )),
    ("Signed_Multiset.mset_neg_uminus", "mset_neg (- ?A) = mset_pos ?A",
     template_equation
      (template_app
        (template_hole 2, template_app (template_hole 1, template_var 0)),
       template_app (template_hole 0, template_var 0))),
    ("Signed_Multiset.mset_pos_uminus", "mset_pos (- ?A) = mset_neg ?A",
     template_equation
      (template_app
        (template_hole 2, template_app (template_hole 1, template_var 0)),
       template_app (template_hole 0, template_var 0))),
    ("Signed_Multiset.minus_zmset_of_inverse",
     "mset_neg (- zmset_of ?M) = ?M",
     template_equation
      (template_app
        (template_hole 2,
         template_app
          (template_hole 1,
           template_app (template_hole 0, template_var 0))),
       template_var 0)),
    ("Signed_Multiset.mset_neg_singleton", "mset_neg {#?x#}\<^sub>z = {#}",
     template_equation
      (template_app
        (template_hole 3,
         template_app
          (template_app (template_hole 2, template_var 0),
           template_hole 1)),
       template_hole 0)),
    ("Signed_Multiset.filter_zmset_False",
     "{#y :#z ?M. False#} = {#}\<^sub>z",
     template_equation
      (template_app
        (template_app (template_hole 2, t_empty), template_var 0),
       template_hole 0)),
    ("Signed_Multiset.filter_zmset_True", "{#y :#z ?M. True#} = ?M",
     template_equation
      (template_app
        (template_app (template_hole 1, t_empty), template_var 0),
       template_var 0)),
    ("Signed_Multiset.mset_neg_supset",
     "- ?A \<subseteq>#\<^sub>z zmset_of (mset_neg ?A)",
     template_predicate
      (
         template_app
          (template_app
            (template_hole 3,
             template_app (template_hole 2, template_var 0)),
           template_app
            (template_hole 1,
             template_app (template_hole 0, template_var 0)))
         )),
    ("Signed_Multiset.multi_member_split", "EX A. ?M = add_zmset ?x A",
     template_predicate (template_app (template_hole 2, t_empty))),
    ("Signed_Multiset.multi_self_add_other_not_self_zmset",
     "(?M = add_zmset ?x ?M) = False",
     template_equation
      (template_app
        (template_app (template_hole 2, template_var 1),
         template_app
          (template_app (template_hole 1, template_var 0), template_var 1)),
       template_hole 0)),
    ("Signed_Multiset.repeat_zmset_iterate_add",
     "repeat_zmset ?n ?M = iterate_add ?n ?M",
     template_equation
      (template_app
        (template_app (template_hole 1, template_var 1), template_var 0),
       template_app
        (template_app (template_hole 0, template_var 1), template_var 0))),
    ("Signed_Multiset.multi_drop_mem_not_eq_zmset",
     "?B - {#?c#}\<^sub>z ~= ?B",
     template_negation
      (
         template_equation
          (template_app
            (template_app (template_hole 2, template_var 1),
             template_app
              (template_app (template_hole 1, template_var 0),
               template_hole 0)),
           template_var 1)
         )),
    ("Signed_Multiset.set_zmset_single", "set_zmset {#?b#}\<^sub>z = {?b}",
     template_equation
      (template_app
        (template_hole 4,
         template_app
          (template_app (template_hole 3, template_var 0),
           template_hole 2)),
       template_app
        (template_app (template_hole 1, template_var 0), template_hole 0))),
    ("Signed_Multiset.not_lt_iff_ge_zmset", "(~ ?x < ?y) = (?y <= ?x)",
     template_equation
      (template_app
        (template_hole 2,
         template_app
          (template_app (template_hole 1, template_var 1), template_var 0)),
       template_app
        (template_app (template_hole 0, template_var 0), template_var 1))),
    ("Signed_Multiset.set_zmset_eq_empty_iff",
     "(set_zmset ?M = {}) = (?M = {#}\<^sub>z)",
     template_bimplication
      (template_equation
        (template_app (template_hole 3, template_var 0), template_hole 2),
       template_equation (template_var 0, template_hole 0))),
    ("Signed_Multiset.mset_pos_singleton",
     "mset_pos {#?x#}\<^sub>z = {#?x#}",
     template_equation
      (template_app
        (template_hole 4,
         template_app
          (template_app (template_hole 3, template_var 0),
           template_hole 2)),
       template_app
        (template_app (template_hole 1, template_var 0), template_hole 0))),
    ("Signed_Multiset.uminus_add_conv_diff_mset", "- ?a + ?b = ?b - ?a",
     template_equation
      (template_app
        (template_app
          (template_hole 2, template_app (template_hole 1, template_var 1)),
         template_var 0),
       template_app
        (template_app (template_hole 0, template_var 0), template_var 1))),
    ("Signed_Multiset.subset_imp_less_zmset",
     "?M \<subset>#\<^sub>z ?N ==> ?M < ?N",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 1, template_var 1),
              template_var 0)
            )],
       template_inequation (less_than, template_var 1, template_var 0))),
    ("Signed_Multiset.subset_eq_imp_le_zmset",
     "?M \<subseteq>#\<^sub>z ?N ==> ?M <= ?N",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 1, template_var 1),
              template_var 0)
            )],
       template_inequation (less_equals, template_var 1, template_var 0))),
    ("Signed_Multiset.singleton_ne_uminus_singleton_zmset",
     "{#?x#}\<^sub>z ~= - {#?y#}\<^sub>z",
     template_negation
      (
         template_equation
          (template_app
            (template_app (template_hole 2, template_var 1),
             template_hole 1),
           template_app
            (template_hole 0,
             template_app
              (template_app (template_hole 2, template_var 0),
               template_hole 1)))
         )),
    ("Signed_Multiset.uminus_singleton_ne_singleton_zmset",
     "- {#?x#}\<^sub>z ~= {#?y#}\<^sub>z",
     template_negation
      (
         template_equation
          (template_app
            (template_hole 2,
             template_app
              (template_app (template_hole 1, template_var 1),
               template_hole 0)),
           template_app
            (template_app (template_hole 1, template_var 0),
             template_hole 0))
         )),
    ("Signed_Multiset.zcount_uminus", "zcount (- ?A) ?x = - zcount ?A ?x",
     template_equation
      (template_app
        (template_app
          (template_hole 2, template_app (template_hole 1, template_var 1)),
         template_var 0),
       template_app
        (template_hole 0,
         template_app
          (template_app (template_hole 2, template_var 1),
           template_var 0)))),
    ("Signed_Multiset.zcount_of_mset",
     "zcount (zmset_of ?M) ?x = int (count ?M ?x)",
     template_equation
      (template_app
        (template_app
          (template_hole 3, template_app (template_hole 2, template_var 1)),
         template_var 0),
       template_app
        (template_hole 1,
         template_app
          (template_app (template_hole 0, template_var 1),
           template_var 0)))),
    ("Signed_Multiset.count_mset_pos",
     "count (mset_pos ?M) ?x = nat (zcount ?M ?x)",
     template_equation
      (template_app
        (template_app
          (template_hole 3, template_app (template_hole 2, template_var 1)),
         template_var 0),
       template_app
        (template_hole 1,
         template_app
          (template_app (template_hole 0, template_var 1),
           template_var 0)))),
    ("Signed_Multiset.zcount_inject", "(zcount ?M = zcount ?N) = (?M = ?N)",
     template_bimplication
      (template_equation
        (template_app (template_hole 1, template_var 1),
         template_app (template_hole 1, template_var 0)),
       template_equation (template_var 1, template_var 0))),
    ("Signed_Multiset.zmset_of_inject",
     "(zmset_of ?M = zmset_of ?N) = (?M = ?N)",
     template_bimplication
      (template_equation
        (template_app (template_hole 1, template_var 1),
         template_app (template_hole 1, template_var 0)),
       template_equation (template_var 1, template_var 0))),
    ("Signed_Multiset.zmset_of_less",
     "(zmset_of ?M < zmset_of ?N) = (?M < ?N)",
     template_equation
      (template_app
        (template_app
          (template_hole 2, template_app (template_hole 1, template_var 1)),
         template_app (template_hole 1, template_var 0)),
       template_app
        (template_app (template_hole 0, template_var 1), template_var 0))),
    ("Signed_Multiset.zmset_of_le",
     "(zmset_of ?M <= zmset_of ?N) = (?M <= ?N)",
     template_equation
      (template_app
        (template_app
          (template_hole 2, template_app (template_hole 1, template_var 1)),
         template_app (template_hole 1, template_var 0)),
       template_app
        (template_app (template_hole 0, template_var 1), template_var 0))),
    ("Signed_Multiset.zmset_of_subset_iff",
     "(zmset_of ?M \<subset>#\<^sub>z zmset_of ?N) = (?M <# ?N)",
     template_equation
      (template_app
        (template_app
          (template_hole 2, template_app (template_hole 1, template_var 1)),
         template_app (template_hole 1, template_var 0)),
       template_app
        (template_app (template_hole 0, template_var 1), template_var 0))),
    ("Signed_Multiset.zmset_of_subseteq_iff",
     "(zmset_of ?M \<subseteq>#\<^sub>z zmset_of ?N) = (?M <=# ?N)",
     template_equation
      (template_app
        (template_app
          (template_hole 2, template_app (template_hole 1, template_var 1)),
         template_app (template_hole 1, template_var 0)),
       template_app
        (template_app (template_hole 0, template_var 1), template_var 0))),
    ("Signed_Multiset.mset_pos_neg_partition",
     "?M = zmset_of (mset_pos ?M) - zmset_of (mset_neg ?M)",
     template_equation
      (template_var 0,
       template_app
        (template_app
          (template_hole 3,
           template_app
            (template_hole 2,
             template_app (template_hole 1, template_var 0))),
         template_app
          (template_hole 2,
           template_app (template_hole 0, template_var 0))))),
    ("Signed_Multiset.add_zmset_add_single",
     "add_zmset ?a ?A = ?A + {#?a#}\<^sub>z",
     template_equation
      (template_app
        (template_app (template_hole 2, template_var 1), template_var 0),
       template_app
        (template_app (template_hole 1, template_var 0),
         template_app
          (template_app (template_hole 2, template_var 1),
           template_hole 0)))),
    ("Signed_Multiset.mset_neg_as_pos",
     "zmset_of (mset_neg ?M) = zmset_of (mset_pos ?M) - ?M",
     template_equation
      (template_app
        (template_hole 3, template_app (template_hole 2, template_var 0)),
       template_app
        (template_app
          (template_hole 1,
           template_app
            (template_hole 3,
             template_app (template_hole 0, template_var 0))),
         template_var 0))),
    ("Signed_Multiset.mset_pos_as_neg",
     "zmset_of (mset_pos ?M) = zmset_of (mset_neg ?M) + ?M",
     template_equation
      (template_app
        (template_hole 3, template_app (template_hole 2, template_var 0)),
       template_app
        (template_app
          (template_hole 1,
           template_app
            (template_hole 3,
             template_app (template_hole 0, template_var 0))),
         template_var 0))),
    ("Signed_Multiset.zmset_of_add_mset",
     "zmset_of (add_mset ?x ?M) = add_zmset ?x (zmset_of ?M)",
     template_equation
      (template_app
        (template_hole 2,
         template_app
          (template_app (template_hole 1, template_var 1), template_var 0)),
       template_app
        (template_app (template_hole 0, template_var 1),
         template_app (template_hole 2, template_var 0)))),
    ("Signed_Multiset.repeat_zmset_replicate_zmset",
     "repeat_zmset ?n {#?a#}\<^sub>z = replicate_zmset ?n ?a",
     template_equation
      (template_app
        (template_app (template_hole 3, template_var 1),
         template_app
          (template_app (template_hole 2, template_var 0),
           template_hole 1)),
       template_app
        (template_app (template_hole 0, template_var 1), template_var 0))),
    ("Signed_Multiset.add_zmset_remove_trivial",
     "add_zmset ?x ?M - {#?x#}\<^sub>z = ?M",
     template_equation
      (template_app
        (template_app
          (template_hole 2,
           template_app
            (template_app (template_hole 1, template_var 1),
             template_var 0)),
         template_app
          (template_app (template_hole 1, template_var 1),
           template_hole 0)),
       template_var 0)),
    ("Signed_Multiset.insert_Diff_zmset",
     "add_zmset ?x (?M - {#?x#}\<^sub>z) = ?M",
     template_equation
      (template_app
        (template_app (template_hole 2, template_var 1),
         template_app
          (template_app (template_hole 1, template_var 0),
           template_app
            (template_app (template_hole 2, template_var 1),
             template_hole 0))),
       template_var 0)),
    ("Signed_Multiset.count_mset_neg",
     "count (mset_neg ?M) ?x = nat (- zcount ?M ?x)",
     template_equation
      (template_app
        (template_app
          (template_hole 4, template_app (template_hole 3, template_var 1)),
         template_var 0),
       template_app
        (template_hole 2,
         template_app
          (template_hole 1,
           template_app
            (template_app (template_hole 0, template_var 1),
             template_var 0))))),
    ("Signed_Multiset.replicate_zmset_Suc",
     "replicate_zmset (Suc ?n) ?x = add_zmset ?x (replicate_zmset ?n ?x)",
     template_equation
      (template_app
        (template_app
          (template_hole 2, template_app (template_hole 1, template_var 1)),
         template_var 0),
       template_app
        (template_app (template_hole 0, template_var 0),
         template_app
          (template_app (template_hole 2, template_var 1),
           template_var 0)))),
    ("Signed_Multiset.zmset_of_plus",
     "zmset_of (?M + ?N) = zmset_of ?M + zmset_of ?N",
     template_equation
      (template_app
        (template_hole 2,
         template_app
          (template_app (template_hole 1, template_var 1), template_var 0)),
       template_app
        (template_app
          (template_hole 0, template_app (template_hole 2, template_var 1)),
         template_app (template_hole 2, template_var 0)))),
    ("Signed_Multiset.zmset_subset_insertD",
     "add_zmset ?x ?A \<subset>#\<^sub>z ?B ==> ?A \<subset>#\<^sub>z ?B",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_hole 1,
                template_app
                 (template_app (template_hole 0, template_var 2),
                  template_var 1)),
              template_var 0)
            )],
       template_predicate
        (
           template_app
            (template_app (template_hole 1, template_var 1), template_var 0)
           ))),
    ("Signed_Multiset.zmset_subset_eq_insertD",
     "add_zmset ?x ?A \<subseteq>#\<^sub>z ?B ==> ?A \<subset>#\<^sub>z ?B",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_hole 2,
                template_app
                 (template_app (template_hole 1, template_var 2),
                  template_var 1)),
              template_var 0)
            )],
       template_predicate
        (
           template_app
            (template_app (template_hole 0, template_var 1), template_var 0)
           ))),
    ("Signed_Multiset.finite_count_ne",
     "finite {x. count ?M x ~= count ?N x}",
     template_predicate
      (
         template_app
          (template_hole 4, template_app (template_hole 3, t_empty))
         )),
    ("Signed_Multiset.not_in_iff_zmset",
     "(?x ~:#z ?M) = (zcount ?M ?x = 0)",
     template_implication
      ([template_predicate
         (
            template_app
             (template_hole 5,
              template_app
               (template_app (template_hole 4, template_var 1),
                template_app (template_hole 3, template_var 0)))
            )],
       template_equation
        (template_app
          (template_app (template_hole 1, template_var 0), template_var 1),
         template_hole 0))),
    ("Signed_Multiset.zcount_eq_zero_iff",
     "(zcount ?M ?x = 0) = (?x ~:#z ?M)",
     template_equation
      (template_app
        (template_app
          (template_hole 5,
           template_app
            (template_app (template_hole 4, template_var 1),
             template_var 0)),
         template_hole 3),
       template_app
        (template_hole 2,
         template_app
          (template_app (template_hole 1, template_var 0),
           template_app (template_hole 0, template_var 1))))),
    ("Signed_Multiset.subset_eq_diff_conv_zmset",
     "(?A - ?C \<subseteq>#\<^sub>z ?B) =
      (?A \<subseteq>#\<^sub>z ?B + ?C)",
     template_equation
      (template_app
        (template_app
          (template_hole 2,
           template_app
            (template_app (template_hole 1, template_var 2),
             template_var 1)),
         template_var 0),
       template_app
        (template_app (template_hole 2, template_var 2),
         template_app
          (template_app (template_hole 0, template_var 0),
           template_var 1)))),
    ("Signed_Multiset.zcount_ne_zero_iff",
     "(zcount ?M ?x ~= 0) = (?x :#z ?M)",
     template_equation
      (template_app
        (template_hole 5,
         template_app
          (template_app
            (template_hole 4,
             template_app
              (template_app (template_hole 3, template_var 1),
               template_var 0)),
           template_hole 2)),
       template_app
        (template_app (template_hole 1, template_var 0),
         template_app (template_hole 0, template_var 1)))),
    ("Signed_Multiset.add_add_same_iff_zmset",
     "(add_zmset ?a ?A = add_zmset ?a ?B) = (?A = ?B)",
     template_bimplication
      (template_equation
        (template_app
          (template_app (template_hole 0, template_var 2), template_var 1),
         template_app
          (template_app (template_hole 0, template_var 2), template_var 0)),
       template_equation (template_var 1, template_var 0))),
    ("Signed_Multiset.single_eq_single_zmset",
     "({#?a#}\<^sub>z = {#?b#}\<^sub>z) = (?a = ?b)",
     template_bimplication
      (template_equation
        (template_app
          (template_app (template_hole 2, template_var 1), template_hole 1),
         template_app
          (template_app (template_hole 2, template_var 0),
           template_hole 1)),
       template_equation (template_var 1, template_var 0))),
    ("Signed_Multiset.zmset_subset_add_zmset",
     "(add_zmset ?x ?N \<subset>#\<^sub>z add_zmset ?x ?M) =
      (?N \<subset>#\<^sub>z ?M)",
     template_equation
      (template_app
        (template_app
          (template_hole 1,
           template_app
            (template_app (template_hole 0, template_var 2),
             template_var 1)),
         template_app
          (template_app (template_hole 0, template_var 2), template_var 0)),
       template_app
        (template_app (template_hole 1, template_var 1), template_var 0))),
    ("Signed_Multiset.zmset_subset_eq_add_zmset_cancel",
     "(add_zmset ?a ?A \<subseteq>#\<^sub>z add_zmset ?a ?B) =
      (?A \<subseteq>#\<^sub>z ?B)",
     template_equation
      (template_app
        (template_app
          (template_hole 1,
           template_app
            (template_app (template_hole 0, template_var 2),
             template_var 1)),
         template_app
          (template_app (template_hole 0, template_var 2), template_var 0)),
       template_app
        (template_app (template_hole 1, template_var 1), template_var 0))),
    ("Signed_Multiset.diff_add_zmset", "?M - (?N + ?Q) = ?M - ?N - ?Q",
     template_equation
      (template_app
        (template_app (template_hole 1, template_var 2),
         template_app
          (template_app (template_hole 0, template_var 1), template_var 0)),
       template_app
        (template_app
          (template_hole 1,
           template_app
            (template_app (template_hole 1, template_var 2),
             template_var 1)),
         template_var 0))),
    ("Signed_Multiset.diff_diff_add_zmset", "?M - ?N - ?P = ?M - (?N + ?P)",
     template_equation
      (template_app
        (template_app
          (template_hole 1,
           template_app
            (template_app (template_hole 1, template_var 2),
             template_var 1)),
         template_var 0),
       template_app
        (template_app (template_hole 1, template_var 2),
         template_app
          (template_app (template_hole 0, template_var 1),
           template_var 0)))),
    ("Signed_Multiset.diff_add_zmset_swap",
     "add_zmset ?b ?M - ?A = add_zmset ?b (?M - ?A)",
     template_equation
      (template_app
        (template_app
          (template_hole 1,
           template_app
            (template_app (template_hole 0, template_var 2),
             template_var 1)),
         template_var 0),
       template_app
        (template_app (template_hole 0, template_var 2),
         template_app
          (template_app (template_hole 1, template_var 1),
           template_var 0)))),
    ("Signed_Multiset.union_zmset_add_zmset_right",
     "?A + add_zmset ?a ?B = add_zmset ?a (?A + ?B)",
     template_equation
      (template_app
        (template_app (template_hole 1, template_var 2),
         template_app
          (template_app (template_hole 0, template_var 1), template_var 0)),
       template_app
        (template_app (template_hole 0, template_var 1),
         template_app
          (template_app (template_hole 1, template_var 2),
           template_var 0)))),
    ("Signed_Multiset.zmset_subset_eq_zmultiset_union_diff_commute",
     "?A - ?B + ?C = ?A + ?C - ?B",
     template_equation
      (template_app
        (template_app
          (template_hole 1,
           template_app
            (template_app (template_hole 0, template_var 2),
             template_var 1)),
         template_var 0),
       template_app
        (template_app
          (template_hole 0,
           template_app
            (template_app (template_hole 1, template_var 2),
             template_var 0)),
         template_var 1))),
    ("Signed_Multiset.uminus_add_add_uminus", "?b - ?a + ?c = ?b + ?c - ?a",
     template_equation
      (template_app
        (template_app
          (template_hole 1,
           template_app
            (template_app (template_hole 0, template_var 2),
             template_var 1)),
         template_var 0),
       template_app
        (template_app
          (template_hole 0,
           template_app
            (template_app (template_hole 1, template_var 2),
             template_var 0)),
         template_var 1))),
    ("Signed_Multiset.union_add_left_zmset",
     "add_zmset ?a ?A + ?B = add_zmset ?a (?A + ?B)",
     template_equation
      (template_app
        (template_app
          (template_hole 1,
           template_app
            (template_app (template_hole 0, template_var 2),
             template_var 1)),
         template_var 0),
       template_app
        (template_app (template_hole 0, template_var 2),
         template_app
          (template_app (template_hole 1, template_var 1),
           template_var 0)))),
    ("Signed_Multiset.add_zmset_commute",
     "add_zmset ?x (add_zmset ?y ?M) = add_zmset ?y (add_zmset ?x ?M)",
     template_equation
      (template_app
        (template_app (template_hole 0, template_var 2),
         template_app
          (template_app (template_hole 0, template_var 1), template_var 0)),
       template_app
        (template_app (template_hole 0, template_var 1),
         template_app
          (template_app (template_hole 0, template_var 2),
           template_var 0)))),
    ("Signed_Multiset.repeat_zmset_right",
     "repeat_zmset ?a (repeat_zmset ?b ?A) = repeat_zmset (?a * ?b) ?A",
     template_equation
      (template_app
        (template_app (template_hole 1, template_var 2),
         template_app
          (template_app (template_hole 1, template_var 1), template_var 0)),
       template_app
        (template_app
          (template_hole 1,
           template_app
            (template_app (template_hole 0, template_var 2),
             template_var 1)),
         template_var 0))),
    ("Signed_Multiset.add_zmset_diff_bothsides",
     "add_zmset ?a ?M - add_zmset ?a ?A = ?M - ?A",
     template_equation
      (template_app
        (template_app
          (template_hole 1,
           template_app
            (template_app (template_hole 0, template_var 2),
             template_var 1)),
         template_app
          (template_app (template_hole 0, template_var 2), template_var 0)),
       template_app
        (template_app (template_hole 1, template_var 1), template_var 0))),
    ("Signed_Multiset.zcount_single",
     "zcount {#?b#}\<^sub>z ?a = (if ?b = ?a then 1 else 0)",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_hole 6,
                template_app
                 (template_app (template_hole 5, template_var 1),
                  template_hole 4)),
              template_var 0)
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_app
                (template_hole 3,
                 template_app
                  (template_app (template_hole 2, template_var 1),
                   template_var 0)),
               template_hole 1),
             template_hole 0)
           ))),
    ("Signed_Multiset.count_repeat_zmset",
     "zcount (repeat_zmset ?i ?A) ?a = int ?i * zcount ?A ?a",
     template_equation
      (template_app
        (template_app
          (template_hole 3,
           template_app
            (template_app (template_hole 2, template_var 2),
             template_var 1)),
         template_var 0),
       template_app
        (template_app
          (template_hole 1, template_app (template_hole 0, template_var 2)),
         template_app
          (template_app (template_hole 3, template_var 1),
           template_var 0)))),
    ("Signed_Multiset.zmset_subset_eq_zcount",
     "?A \<subseteq>#\<^sub>z ?B ==> zcount ?A ?a <= zcount ?B ?a",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 2, template_var 2),
              template_var 1)
            )],
       template_inequation
        (less_equals,
         template_app
          (template_app (template_hole 0, template_var 2), template_var 0),
         template_app
          (template_app (template_hole 0, template_var 1),
           template_var 0)))),
    ("Signed_Multiset.zmultiset_filter_mono",
     "?A \<subseteq>#\<^sub>z ?B ==>
      filter_zmset ?f ?A \<subseteq>#\<^sub>z filter_zmset ?f ?B",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 1, template_var 2),
              template_var 1)
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 1,
               template_app
                (template_app (template_hole 0, template_var 0),
                 template_var 2)),
             template_app
              (template_app (template_hole 0, template_var 0),
               template_var 1))
           ))),
    ("Signed_Multiset.zcount_diff",
     "zcount (?M - ?N) ?a = zcount ?M ?a - zcount ?N ?a",
     template_equation
      (template_app
        (template_app
          (template_hole 2,
           template_app
            (template_app (template_hole 1, template_var 2),
             template_var 1)),
         template_var 0),
       template_app
        (template_app
          (template_hole 0,
           template_app
            (template_app (template_hole 2, template_var 2),
             template_var 0)),
         template_app
          (template_app (template_hole 2, template_var 1),
           template_var 0)))),
    ("Signed_Multiset.zcount_union",
     "zcount (?M + ?N) ?a = zcount ?M ?a + zcount ?N ?a",
     template_equation
      (template_app
        (template_app
          (template_hole 2,
           template_app
            (template_app (template_hole 1, template_var 2),
             template_var 1)),
         template_var 0),
       template_app
        (template_app
          (template_hole 0,
           template_app
            (template_app (template_hole 2, template_var 2),
             template_var 0)),
         template_app
          (template_app (template_hole 2, template_var 1),
           template_var 0)))),
    ("Signed_Multiset.count_filter_zmset",
     "zcount (filter_zmset ?P ?M) ?a = (if ?P ?a then zcount ?M ?a else 0)",
     template_equation
      (template_app
        (template_app
          (template_hole 3,
           template_app
            (template_app (template_hole 2, template_var 2),
             template_var 1)),
         template_var 0),
       template_app
        (template_app
          (template_app
            (template_hole 1,
             template_app (template_var 2, template_var 0)),
           template_app
            (template_app (template_hole 3, template_var 1),
             template_var 0)),
         template_hole 0))),
    ("Signed_Multiset.count_replicate_zmset",
     "zcount (replicate_zmset ?n ?x) ?y = (if ?y = ?x then int ?n else 0)",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_hole 5,
                template_app
                 (template_app (template_hole 4, template_var 2),
                  template_var 1)),
              template_var 0)
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_app
                (template_hole 3,
                 template_app
                  (template_app (template_hole 2, template_var 0),
                   template_var 1)),
               template_app (template_hole 1, template_var 2)),
             template_hole 0)
           ))),
    ("Signed_Multiset.zmultiset_eq_iff",
     "(?M = ?N) = (ALL a. zcount ?M a = zcount ?N a)",
     template_equation
      (template_app
        (template_app (template_hole 3, template_var 1), template_var 0),
       template_app (template_hole 2, t_empty))),
    ("Signed_Multiset.diff_single_eq_union_zmset",
     "(?M - {#?x#}\<^sub>z = ?N) = (?M = add_zmset ?x ?N)",
     template_bimplication
      (template_equation
        (template_app
          (template_app (template_hole 2, template_var 2),
           template_app
            (template_app (template_hole 1, template_var 1),
             template_hole 0)),
         template_var 0),
       template_equation
        (template_var 2,
         template_app
          (template_app (template_hole 1, template_var 1),
           template_var 0)))),
    ("Signed_Multiset.filter_diff_zmset",
     "filter_zmset ?P (?M - ?N) = filter_zmset ?P ?M - filter_zmset ?P ?N",
     template_equation
      (template_app
        (template_app (template_hole 1, template_var 2),
         template_app
          (template_app (template_hole 0, template_var 1), template_var 0)),
       template_app
        (template_app
          (template_hole 0,
           template_app
            (template_app (template_hole 1, template_var 2),
             template_var 1)),
         template_app
          (template_app (template_hole 1, template_var 2),
           template_var 0)))),
    ("Signed_Multiset.filter_union_zmset",
     "filter_zmset ?P (?M + ?N) = filter_zmset ?P ?M + filter_zmset ?P ?N",
     template_equation
      (template_app
        (template_app (template_hole 1, template_var 2),
         template_app
          (template_app (template_hole 0, template_var 1), template_var 0)),
       template_app
        (template_app
          (template_hole 0,
           template_app
            (template_app (template_hole 1, template_var 2),
             template_var 1)),
         template_app
          (template_app (template_hole 1, template_var 2),
           template_var 0)))),
    ("Signed_Multiset.filter_single_zmset",
     "filter_zmset ?P {#?x#}\<^sub>z =
      (if ?P ?x then {#?x#}\<^sub>z else {#}\<^sub>z)",
     template_equation
      (template_app
        (template_app (template_hole 3, template_var 1),
         template_app
          (template_app (template_hole 2, template_var 0),
           template_hole 1)),
       template_app
        (template_app
          (template_app
            (template_hole 0,
             template_app (template_var 1, template_var 0)),
           template_app
            (template_app (template_hole 2, template_var 0),
             template_hole 1)),
         template_hole 1))),
    ("Signed_Multiset.repeat_zmset_distrib2",
     "repeat_zmset ?n (?A + ?B) = repeat_zmset ?n ?A + repeat_zmset ?n ?B",
     template_equation
      (template_app
        (template_app (template_hole 1, template_var 2),
         template_app
          (template_app (template_hole 0, template_var 1), template_var 0)),
       template_app
        (template_app
          (template_hole 0,
           template_app
            (template_app (template_hole 1, template_var 2),
             template_var 1)),
         template_app
          (template_app (template_hole 1, template_var 2),
           template_var 0)))),
    ("Signed_Multiset.repeat_zmset_distrib_add_zmset",
     "repeat_zmset ?n (add_zmset ?a ?A) =
      replicate_zmset ?n ?a + repeat_zmset ?n ?A",
     template_equation
      (template_app
        (template_app (template_hole 3, template_var 2),
         template_app
          (template_app (template_hole 2, template_var 1), template_var 0)),
       template_app
        (template_app
          (template_hole 1,
           template_app
            (template_app (template_hole 0, template_var 2),
             template_var 1)),
         template_app
          (template_app (template_hole 3, template_var 2),
           template_var 0)))),
    ("Signed_Multiset.repeat_zmset_distrib",
     "repeat_zmset (?m + ?n) ?A = repeat_zmset ?m ?A + repeat_zmset ?n ?A",
     template_equation
      (template_app
        (template_app
          (template_hole 2,
           template_app
            (template_app (template_hole 1, template_var 2),
             template_var 1)),
         template_var 0),
       template_app
        (template_app
          (template_hole 0,
           template_app
            (template_app (template_hole 2, template_var 2),
             template_var 0)),
         template_app
          (template_app (template_hole 2, template_var 1),
           template_var 0)))),
    ("Signed_Multiset.zmset_add",
     "(!!B. ?A = add_zmset ?a B ==> ?thesis) ==> ?thesis",
     template_implication
      ([template_predicate (template_app (template_hole 3, t_empty))],
       template_predicate (template_var 0))),
    ("Signed_Multiset.zmultiset_partition",
     "?M = filter_zmset ?P ?M + {#x :#z ?M. ~ ?P x#}",
     template_equation
      (template_var 1,
       template_app
        (template_app
          (template_hole 2,
           template_app
            (template_app (template_hole 1, t_empty), template_var 1)),
         template_app
          (template_app (template_hole 1, t_empty), template_var 1)))),
    ("Signed_Multiset.filter_filter_zmset",
     "filter_zmset ?P (filter_zmset ?Q ?M) = {#x :#z ?M. ?Q x & ?P x#}",
     template_equation
      (template_app
        (template_app (template_hole 1, template_var 2),
         template_app
          (template_app (template_hole 1, template_var 1), template_var 0)),
       template_app
        (template_app (template_hole 1, t_empty), template_var 0))),
    ("Signed_Multiset.add_zmset_eq_add_NO_MATCH",
     "NO_MATCH {#}\<^sub>z ?H ==> add_zmset ?a ?H = {#?a#}\<^sub>z + ?H",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 5, template_hole 4),
              template_var 1)
            )],
       template_equation
        (template_app
          (template_app (template_hole 2, template_var 0), template_var 1),
         template_app
          (template_app
            (template_hole 1,
             template_app
              (template_app (template_hole 2, template_var 0),
               template_hole 0)),
           template_var 1)))),
    ("Signed_Multiset.lt_imp_ex_zcount_lt",
     "?M < ?N ==> EX y. zcount ?M y < zcount ?N y",
     template_implication
      ([template_inequation (less_than, template_var 1, template_var 0)],
       template_predicate (template_app (template_hole 2, t_empty)))),
    ("Signed_Multiset.union_single_eq_diff_zmset",
     "add_zmset ?x ?M = ?N ==> ?M = ?N - {#?x#}\<^sub>z",
     template_implication
      ([template_equation
         (template_app
           (template_app (template_hole 2, template_var 2), template_var 1),
          template_var 0)],
       template_equation
        (template_var 1,
         template_app
          (template_app (template_hole 1, template_var 0),
           template_app
            (template_app (template_hole 2, template_var 2),
             template_hole 0))))),
    ("Signed_Multiset.zcount_inI",
     "(zcount ?M ?x = 0 ==> False) ==> ?x :#z ?M",
     template_implication
      ([template_implication
         ([template_equation
            (template_app
              (template_app (template_hole 4, template_var 1),
               template_var 0),
             template_hole 3)],
          template_predicate (template_hole 2))],
       template_predicate
        (
           template_app
            (template_app (template_hole 1, template_var 0),
             template_app (template_hole 0, template_var 1))
           ))),
    ("Signed_Multiset.zmultiset_eqI",
     "(!!x. zcount ?A x = zcount ?B x) ==> ?A = ?B",
     template_implication
      ([template_predicate (template_app (template_hole 4, t_empty))],
       template_equation (template_var 1, template_var 0))),
    ("Signed_Multiset.zmset_subset_eqI",
     "(!!a. zcount ?A a <= zcount ?B a) ==> ?A \<subseteq>#\<^sub>z ?B",
     template_implication
      ([template_predicate (template_app (template_hole 4, t_empty))],
       template_predicate
        (
           template_app
            (template_app (template_hole 0, template_var 1), template_var 0)
           ))),
    ("Signed_Multiset.in_diff_zcount",
     "(?a :#z ?M - ?N) = (zcount ?N ?a ~= zcount ?M ?a)",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 5, template_var 2),
              template_app
               (template_hole 4,
                template_app
                 (template_app (template_hole 3, template_var 1),
                  template_var 0)))
            )],
       template_negation
        (
           template_equation
            (template_app
              (template_app (template_hole 0, template_var 0),
               template_var 2),
             template_app
              (template_app (template_hole 0, template_var 1),
               template_var 2))
           ))),
    ("Signed_Multiset.diff_union_swap_zmset",
     "add_zmset ?b (?M - {#?a#}\<^sub>z) =
      add_zmset ?b ?M - {#?a#}\<^sub>z",
     template_equation
      (template_app
        (template_app (template_hole 2, template_var 2),
         template_app
          (template_app (template_hole 1, template_var 1),
           template_app
            (template_app (template_hole 2, template_var 0),
             template_hole 0))),
       template_app
        (template_app
          (template_hole 1,
           template_app
            (template_app (template_hole 2, template_var 2),
             template_var 1)),
         template_app
          (template_app (template_hole 2, template_var 0),
           template_hole 0)))),
    ("Signed_Multiset.mset_neg_diff",
     "mset_neg (?A - ?B) =
      mset_neg ?A - mset_neg ?B + (mset_pos ?B - mset_pos ?A)",
     template_equation
      (template_app
        (template_hole 4,
         template_app
          (template_app (template_hole 3, template_var 1), template_var 0)),
       template_app
        (template_app
          (template_hole 2,
           template_app
            (template_app
              (template_hole 1,
               template_app (template_hole 4, template_var 1)),
             template_app (template_hole 4, template_var 0))),
         template_app
          (template_app
            (template_hole 1,
             template_app (template_hole 0, template_var 0)),
           template_app (template_hole 0, template_var 1))))),
    ("Signed_Multiset.mset_neg_plus",
     "mset_neg (?A + ?B) =
      mset_neg ?A - mset_pos ?B + (mset_neg ?B - mset_pos ?A)",
     template_equation
      (template_app
        (template_hole 4,
         template_app
          (template_app (template_hole 3, template_var 1), template_var 0)),
       template_app
        (template_app
          (template_hole 2,
           template_app
            (template_app
              (template_hole 1,
               template_app (template_hole 4, template_var 1)),
             template_app (template_hole 0, template_var 0))),
         template_app
          (template_app
            (template_hole 1,
             template_app (template_hole 4, template_var 0)),
           template_app (template_hole 0, template_var 1))))),
    ("Signed_Multiset.mset_pos_diff",
     "mset_pos (?A - ?B) =
      mset_pos ?A - mset_pos ?B + (mset_neg ?B - mset_neg ?A)",
     template_equation
      (template_app
        (template_hole 4,
         template_app
          (template_app (template_hole 3, template_var 1), template_var 0)),
       template_app
        (template_app
          (template_hole 2,
           template_app
            (template_app
              (template_hole 1,
               template_app (template_hole 4, template_var 1)),
             template_app (template_hole 4, template_var 0))),
         template_app
          (template_app
            (template_hole 1,
             template_app (template_hole 0, template_var 0)),
           template_app (template_hole 0, template_var 1))))),
    ("Signed_Multiset.mset_pos_plus",
     "mset_pos (?A + ?B) =
      mset_pos ?A - mset_neg ?B + (mset_pos ?B - mset_neg ?A)",
     template_equation
      (template_app
        (template_hole 4,
         template_app
          (template_app (template_hole 3, template_var 1), template_var 0)),
       template_app
        (template_app
          (template_hole 2,
           template_app
            (template_app
              (template_hole 1,
               template_app (template_hole 4, template_var 1)),
             template_app (template_hole 0, template_var 0))),
         template_app
          (template_app
            (template_hole 1,
             template_app (template_hole 4, template_var 0)),
           template_app (template_hole 0, template_var 1))))),
    ("Signed_Multiset.filter_add_zmset",
     "filter_zmset ?P (add_zmset ?x ?A) =
      (if ?P ?x then add_zmset ?x (filter_zmset ?P ?A)
       else filter_zmset ?P ?A)",
     template_equation
      (template_app
        (template_app (template_hole 2, template_var 2),
         template_app
          (template_app (template_hole 1, template_var 1), template_var 0)),
       template_app
        (template_app
          (template_app
            (template_hole 0,
             template_app (template_var 2, template_var 1)),
           template_app
            (template_app (template_hole 1, template_var 1),
             template_app
              (template_app (template_hole 2, template_var 2),
               template_var 0))),
         template_app
          (template_app (template_hole 2, template_var 2),
           template_var 0)))),
    ("Signed_Multiset.left_add_mult_distrib_zmset",
     "repeat_zmset ?i ?u + (repeat_zmset ?j ?u + ?k) =
      repeat_zmset (?i + ?j) ?u + ?k",
     template_equation
      (template_app
        (template_app
          (template_hole 2,
           template_app
            (template_app (template_hole 1, template_var 3),
             template_var 2)),
         template_app
          (template_app
            (template_hole 2,
             template_app
              (template_app (template_hole 1, template_var 1),
               template_var 2)),
           template_var 0)),
       template_app
        (template_app
          (template_hole 2,
           template_app
            (template_app
              (template_hole 1,
               template_app
                (template_app (template_hole 0, template_var 3),
                 template_var 1)),
             template_var 2)),
         template_var 0))),
    ("Signed_Multiset.zcount_add_zmset",
     "zcount (add_zmset ?b ?A) ?a =
      (if ?b = ?a then zcount ?A ?a + 1 else zcount ?A ?a)",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_hole 5,
                template_app
                 (template_app (template_hole 4, template_var 2),
                  template_var 1)),
              template_var 0)
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_app
                (template_hole 3,
                 template_app
                  (template_app (template_hole 2, template_var 2),
                   template_var 0)),
               template_app
                (template_app
                  (template_hole 1,
                   template_app
                    (template_app (template_hole 5, template_var 1),
                     template_var 0)),
                 template_hole 0)),
             template_app
              (template_app (template_hole 5, template_var 1),
               template_var 0))
           ))),
    ("Signed_Multiset.left_diff_repeat_zmset_distrib'",
     "?j <= ?i ==>
      repeat_zmset (?i - ?j) ?u = repeat_zmset ?i ?u - repeat_zmset ?j ?u",
     template_implication
      ([template_inequation (less_equals, template_var 2, template_var 1)],
       template_equation
        (template_app
          (template_app
            (template_hole 2,
             template_app
              (template_app (template_hole 1, template_var 1),
               template_var 2)),
           template_var 0),
         template_app
          (template_app
            (template_hole 0,
             template_app
              (template_app (template_hole 2, template_var 1),
               template_var 0)),
           template_app
            (template_app (template_hole 2, template_var 2),
             template_var 0))))),
    ("Signed_Multiset.zmultiset_nonemptyE",
     "[| ?A ~= {#}\<^sub>z; !!x. x :#z ?A ==> ?thesis |] ==> ?thesis",
     template_implication
      ([template_negation
         (template_equation (template_var 1, template_hole 3)),
        template_predicate (template_app (template_hole 2, t_empty))],
       template_predicate (template_var 0))),
    ("Signed_Multiset.zmset_subset_add_iff2",
     "?i <= ?j ==>
      (repeat_zmset ?i ?u + ?m \<subset>#\<^sub>z repeat_zmset ?j ?u + ?n) =
      (?m \<subset>#\<^sub>z repeat_zmset (?j - ?i) ?u + ?n)",
     template_implication
      ([template_inequation (less_equals, template_var 4, template_var 3)],
       template_equation
        (template_app
          (template_app
            (template_hole 3,
             template_app
              (template_app
                (template_hole 2,
                 template_app
                  (template_app (template_hole 1, template_var 4),
                   template_var 2)),
               template_var 1)),
           template_app
            (template_app
              (template_hole 2,
               template_app
                (template_app (template_hole 1, template_var 3),
                 template_var 2)),
             template_var 0)),
         template_app
          (template_app (template_hole 3, template_var 1),
           template_app
            (template_app
              (template_hole 2,
               template_app
                (template_app
                  (template_hole 1,
                   template_app
                    (template_app (template_hole 0, template_var 3),
                     template_var 4)),
                 template_var 2)),
             template_var 0))))),
    ("Signed_Multiset.zmset_subseteq_add_iff2",
     "?i <= ?j ==>
      (repeat_zmset ?i ?u + ?m \<subseteq>#\<^sub>z
       repeat_zmset ?j ?u + ?n) =
      (?m \<subseteq>#\<^sub>z repeat_zmset (?j - ?i) ?u + ?n)",
     template_implication
      ([template_inequation (less_equals, template_var 4, template_var 3)],
       template_equation
        (template_app
          (template_app
            (template_hole 3,
             template_app
              (template_app
                (template_hole 2,
                 template_app
                  (template_app (template_hole 1, template_var 4),
                   template_var 2)),
               template_var 1)),
           template_app
            (template_app
              (template_hole 2,
               template_app
                (template_app (template_hole 1, template_var 3),
                 template_var 2)),
             template_var 0)),
         template_app
          (template_app (template_hole 3, template_var 1),
           template_app
            (template_app
              (template_hole 2,
               template_app
                (template_app
                  (template_hole 1,
                   template_app
                    (template_app (template_hole 0, template_var 3),
                     template_var 4)),
                 template_var 2)),
             template_var 0))))),
    ("Signed_Multiset.zmset_subset_add_iff1",
     "?j <= ?i ==>
      (repeat_zmset ?i ?u + ?m \<subset>#\<^sub>z repeat_zmset ?j ?u + ?n) =
      (repeat_zmset (?i - ?j) ?u + ?m \<subset>#\<^sub>z ?n)",
     template_implication
      ([template_inequation (less_equals, template_var 4, template_var 3)],
       template_equation
        (template_app
          (template_app
            (template_hole 3,
             template_app
              (template_app
                (template_hole 2,
                 template_app
                  (template_app (template_hole 1, template_var 3),
                   template_var 2)),
               template_var 1)),
           template_app
            (template_app
              (template_hole 2,
               template_app
                (template_app (template_hole 1, template_var 4),
                 template_var 2)),
             template_var 0)),
         template_app
          (template_app
            (template_hole 3,
             template_app
              (template_app
                (template_hole 2,
                 template_app
                  (template_app
                    (template_hole 1,
                     template_app
                      (template_app (template_hole 0, template_var 3),
                       template_var 4)),
                   template_var 2)),
               template_var 1)),
           template_var 0)))),
    ("Signed_Multiset.zmset_subseteq_add_iff1",
     "?j <= ?i ==>
      (repeat_zmset ?i ?u + ?m \<subseteq>#\<^sub>z
       repeat_zmset ?j ?u + ?n) =
      (repeat_zmset (?i - ?j) ?u + ?m \<subseteq>#\<^sub>z ?n)",
     template_implication
      ([template_inequation (less_equals, template_var 4, template_var 3)],
       template_equation
        (template_app
          (template_app
            (template_hole 3,
             template_app
              (template_app
                (template_hole 2,
                 template_app
                  (template_app (template_hole 1, template_var 3),
                   template_var 2)),
               template_var 1)),
           template_app
            (template_app
              (template_hole 2,
               template_app
                (template_app (template_hole 1, template_var 4),
                 template_var 2)),
             template_var 0)),
         template_app
          (template_app
            (template_hole 3,
             template_app
              (template_app
                (template_hole 2,
                 template_app
                  (template_app
                    (template_hole 1,
                     template_app
                      (template_app (template_hole 0, template_var 3),
                       template_var 4)),
                   template_var 2)),
               template_var 1)),
           template_var 0)))),
    ("Signed_Multiset.decompose_zmset_of2",
     "(!!A B C.
          [| ?M = zmset_of A + C; ?N = zmset_of B + C |] ==> ?thesis) ==>
      ?thesis",
     template_implication
      ([template_predicate (template_app (template_hole 5, t_empty))],
       template_predicate (template_var 0))),
    ("Signed_Multiset.add_zmset_eq_conv_ex",
     "(add_zmset ?a ?M = add_zmset ?b ?N) =
      (?M = ?N & ?a = ?b |
       (EX K. ?M = add_zmset ?b K & ?N = add_zmset ?a K))",
     template_bimplication
      (template_equation
        (template_app
          (template_app (template_hole 4, template_var 3), template_var 2),
         template_app
          (template_app (template_hole 4, template_var 1), template_var 0)),
       template_predicate
        (
           template_app
            (template_app
              (template_hole 3,
               template_app
                (template_app
                  (template_hole 2,
                   template_app
                    (template_app (template_hole 5, template_var 2),
                     template_var 0)),
                 template_app
                  (template_app (template_hole 1, template_var 3),
                   template_var 1))),
             template_app (template_hole 0, t_empty))
           ))),
    ("Signed_Multiset.add_zmset_eq_conv_diff",
     "(add_zmset ?a ?M = add_zmset ?b ?N) =
      (?M = ?N & ?a = ?b |
       ?M = add_zmset ?b (?N - {#?a#}\<^sub>z) &
       ?N = add_zmset ?a (?M - {#?b#}\<^sub>z))",
     template_bimplication
      (template_equation
        (template_app
          (template_app (template_hole 5, template_var 3), template_var 2),
         template_app
          (template_app (template_hole 5, template_var 1), template_var 0)),
       template_predicate
        (
           template_app
            (template_app
              (template_hole 4,
               template_app
                (template_app
                  (template_hole 3,
                   template_app
                    (template_app (template_hole 6, template_var 2),
                     template_var 0)),
                 template_app
                  (template_app (template_hole 2, template_var 3),
                   template_var 1))),
             template_app
              (template_app
                (template_hole 3,
                 template_app
                  (template_app (template_hole 6, template_var 2),
                   template_app
                    (template_app (template_hole 5, template_var 1),
                     template_app
                      (template_app (template_hole 1, template_var 0),
                       template_app
                        (template_app (template_hole 5, template_var 3),
                         template_hole 0))))),
               template_app
                (template_app (template_hole 6, template_var 0),
                 template_app
                  (template_app (template_hole 5, template_var 3),
                   template_app
                    (template_app (template_hole 1, template_var 2),
                     template_app
                      (template_app (template_hole 5, template_var 1),
                       template_hole 0))))))
           ))),
    ("Signed_Multiset.mset_pos_neg_dual",
     "mset_pos ?a + mset_pos ?b + (mset_neg ?a - mset_pos ?b) +
      (mset_neg ?b - mset_pos ?a) =
      mset_neg ?a + mset_neg ?b + (mset_pos ?a - mset_neg ?b) +
      (mset_pos ?b - mset_neg ?a)",
     template_equation
      (template_app
        (template_app
          (template_hole 3,
           template_app
            (template_app
              (template_hole 3,
               template_app
                (template_app
                  (template_hole 3,
                   template_app (template_hole 2, template_var 1)),
                 template_app (template_hole 2, template_var 0))),
             template_app
              (template_app
                (template_hole 1,
                 template_app (template_hole 0, template_var 1)),
               template_app (template_hole 2, template_var 0)))),
         template_app
          (template_app
            (template_hole 1,
             template_app (template_hole 0, template_var 0)),
           template_app (template_hole 2, template_var 1))),
       template_app
        (template_app
          (template_hole 3,
           template_app
            (template_app
              (template_hole 3,
               template_app
                (template_app
                  (template_hole 3,
                   template_app (template_hole 0, template_var 1)),
                 template_app (template_hole 0, template_var 0))),
             template_app
              (template_app
                (template_hole 1,
                 template_app (template_hole 2, template_var 1)),
               template_app (template_hole 0, template_var 0)))),
         template_app
          (template_app
            (template_hole 1,
             template_app (template_hole 2, template_var 0)),
           template_app (template_hole 0, template_var 1))))),
    ("Signed_Multiset.less_mset_zmsetE",
     "[| ?M < ?N;
         !!A B C.
            [| ?M = zmset_of A + C; ?N = zmset_of B + C; A < B |]
            ==> ?thesis |]
      ==> ?thesis",
     template_implication
      ([template_inequation (less_than, template_var 2, template_var 1),
        template_predicate (template_app (template_hole 5, t_empty))],
       template_predicate (template_var 0))),
    ("Signed_Multiset.less_eq_mset_zmsetE",
     "[| ?M <= ?N;
         !!A B C.
            [| ?M = zmset_of A + C; ?N = zmset_of B + C; A <= B |]
            ==> ?thesis |]
      ==> ?thesis",
     template_implication
      ([template_inequation (less_equals, template_var 2, template_var 1),
        template_predicate (template_app (template_hole 5, t_empty))],
       template_predicate (template_var 0))),
    ("Signed_Multiset.subset_mset_zmsetE",
     "[| ?M \<subset>#\<^sub>z ?N;
         !!A B C.
            [| ?M = zmset_of A + C; ?N = zmset_of B + C; A <# B |]
            ==> ?thesis |]
      ==> ?thesis",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 6, template_var 2),
              template_var 1)
            ),
        template_predicate (template_app (template_hole 5, t_empty))],
       template_predicate (template_var 0))),
    ("Signed_Multiset.subseteq_mset_zmsetE",
     "[| ?M \<subseteq>#\<^sub>z ?N;
         !!A B C.
            [| ?M = zmset_of A + C; ?N = zmset_of B + C; A <=# B |]
            ==> ?thesis |]
      ==> ?thesis",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 6, template_var 2),
              template_var 1)
            ),
        template_predicate (template_app (template_hole 5, t_empty))],
       template_predicate (template_var 0)))]:
   (string * thm * template) list
### theory "Draft.Signed_MultisetMoreTemplates"
### 0.434s elapsed time, 0.714s cpu time, 0.067s GC time
val it = (): unit
