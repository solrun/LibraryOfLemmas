   [("SNF_Algorithm_Euclidean_Domain.bezout_matrix_row_code",
     "($h) (to_hma\<^sub>m_row ?A ?i) =
      (%j. ?A $$ (mod_type_class.to_nat ?i, mod_type_class.to_nat j))",
     template_equation
      (template_app
        (template_hole 5,
         template_app
          (template_app (template_hole 4, template_var 1), template_var 0)),
       t_empty)),
    ("SNF_Algorithm_Euclidean_Domain.Smith_1x2_eucl_works",
     "(?S, ?Q) = Smith_1x2_eucl ?A ==>
      ?S = ?A ** ?Q & invertible ?Q & ?S $h 0 $h 1 = (0::?'a)",
     template_implication
      ([template_equation
         (template_app
           (template_app (template_hole 11, template_var 2),
            template_var 1),
          template_app (template_hole 10, template_var 0))],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 9,
               template_app
                (template_app (template_hole 8, template_var 2),
                 template_app
                  (template_app (template_hole 7, template_var 0),
                   template_var 1))),
             template_app
              (template_app
                (template_hole 9,
                 template_app (template_hole 6, template_var 1)),
               template_app
                (template_app
                  (template_hole 5,
                   template_app
                    (template_app
                      (template_hole 4,
                       template_app
                        (template_app (template_hole 3, template_var 2),
                         template_hole 2)),
                     template_hole 1)),
                 template_hole 0)))
           ))),
    ("SNF_Algorithm_Euclidean_Domain.Smith_1x2_eucl_JNF_works",
     "[| ?A : carrier_mat 1 2; (?S, ?Q) = Smith_1x2_eucl_JNF ?A |]
      ==> is_SNF ?A (1\<^sub>m 1, Smith_1x2_eucl_JNF ?A)",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 11, template_var 2),
              template_app
               (template_app (template_hole 10, template_hole 9),
                template_app
                 (template_hole 8,
                  template_app (template_hole 7, template_hole 6))))
            ),
        template_equation
         (template_app
           (template_app (template_hole 4, template_var 1), template_var 0),
          template_app (template_hole 3, template_var 2))],
       template_predicate
        (
           template_app
            (template_app (template_hole 2, template_var 2),
             template_app
              (template_app
                (template_hole 1,
                 template_app (template_hole 0, template_hole 9)),
               template_app (template_hole 3, template_var 2)))
           ))),
    ("SNF_Algorithm_Euclidean_Domain.normalize_bezout_gcd",
     "[| is_bezout_ext ?bezout; (?p, ?q, ?u, ?v, ?d) = ?bezout ?a ?b |]
      ==> normalize ?d = gcd ?a ?b",
     template_implication
      ([template_predicate (template_app (template_hole 8, template_var 7)),
        template_equation
         (template_app
           (template_app (template_hole 6, template_var 6),
            template_app
             (template_app (template_hole 5, template_var 5),
              template_app
               (template_app (template_hole 4, template_var 4),
                template_app
                 (template_app (template_hole 3, template_var 3),
                  template_var 2)))),
          template_app
           (template_app (template_var 7, template_var 1),
            template_var 0))],
       template_equation
        (template_app (template_hole 1, template_var 2),
         template_app
          (template_app (template_hole 0, template_var 1),
           template_var 0)))),
    ("SNF_Algorithm_Euclidean_Domain.diagonalize_2x2_works",
     "(?P, ?D, ?Q) = diagonalize_2x2 ?A ==>
      ?D = ?P ** ?A ** ?Q & invertible ?P & invertible ?Q & isDiagonal ?D",
     template_implication
      ([template_equation
         (template_app
           (template_app (template_hole 7, template_var 3),
            template_app
             (template_app (template_hole 6, template_var 2),
              template_var 1)),
          template_app (template_hole 5, template_var 0))],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 4,
               template_app
                (template_app (template_hole 3, template_var 2),
                 template_app
                  (template_app
                    (template_hole 2,
                     template_app
                      (template_app (template_hole 2, template_var 3),
                       template_var 0)),
                   template_var 1))),
             template_app
              (template_app
                (template_hole 4,
                 template_app (template_hole 1, template_var 3)),
               template_app
                (template_app
                  (template_hole 4,
                   template_app (template_hole 1, template_var 1)),
                 template_app (template_hole 0, template_var 2))))
           ))),
    ("SNF_Algorithm_Euclidean_Domain.Smith_2x2_eucl_works",
     "(?P, ?S, ?Q) = Smith_2x2_eucl ?A ==>
      ?S = ?P ** ?A ** ?Q &
      invertible ?P & invertible ?Q & Smith_normal_form ?S",
     template_implication
      ([template_equation
         (template_app
           (template_app (template_hole 7, template_var 3),
            template_app
             (template_app (template_hole 6, template_var 2),
              template_var 1)),
          template_app (template_hole 5, template_var 0))],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 4,
               template_app
                (template_app (template_hole 3, template_var 2),
                 template_app
                  (template_app
                    (template_hole 2,
                     template_app
                      (template_app (template_hole 2, template_var 3),
                       template_var 0)),
                   template_var 1))),
             template_app
              (template_app
                (template_hole 4,
                 template_app (template_hole 1, template_var 3)),
               template_app
                (template_app
                  (template_hole 4,
                   template_app (template_hole 1, template_var 1)),
                 template_app (template_hole 0, template_var 2))))
           ))),
    ("SNF_Algorithm_Euclidean_Domain.Smith_2x2_JNF_eucl_works",
     "[| ?A : carrier_mat 2 2; (?P, ?S, ?Q) = Smith_2x2_JNF_eucl ?A |]
      ==> is_SNF ?A (?P, ?S, ?Q)",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 9, template_var 3),
              template_app
               (template_app
                 (template_hole 8,
                  template_app
                   (template_hole 7,
                    template_app (template_hole 6, template_hole 5))),
                template_app
                 (template_hole 7,
                  template_app (template_hole 6, template_hole 5))))
            ),
        template_equation
         (template_app
           (template_app (template_hole 3, template_var 2),
            template_app
             (template_app (template_hole 2, template_var 1),
              template_var 0)),
          template_app (template_hole 1, template_var 3))],
       template_predicate
        (
           template_app
            (template_app (template_hole 0, template_var 3),
             template_app
              (template_app (template_hole 3, template_var 2),
               template_app
                (template_app (template_hole 2, template_var 1),
                 template_var 0)))
           ))),
    ("SNF_Algorithm_Euclidean_Domain.invertible_bezout_matrix_transpose",
     "[| is_bezout_ext ?bezout; ?a < ?b; ?A $h ?i $h ?a ~= (0::?'a) |]
      ==> invertible
           (Finite_Cartesian_Product.transpose
             (bezout_matrix (Finite_Cartesian_Product.transpose ?A) ?a ?b ?i
               ?bezout))",
     template_implication
      ([template_predicate
         (template_app (template_hole 10, template_var 4)),
        template_inequation (less_than, template_var 3, template_var 2),
        template_negation
         (
            template_equation
             (template_app
               (template_app
                 (template_hole 6,
                  template_app
                   (template_app (template_hole 5, template_var 1),
                    template_var 0)),
                template_var 3),
              template_hole 4)
            )],
       template_predicate
        (
           template_app
            (template_hole 3,
             template_app
              (template_hole 2,
               template_app
                (template_app
                  (template_app
                    (template_app
                      (template_app
                        (template_hole 1,
                         template_app (template_hole 0, template_var 1)),
                       template_var 3),
                     template_var 2),
                   template_var 0),
                 template_var 4)))
           ))),
    ("SNF_Algorithm_Euclidean_Domain.bezout_matrix_works_transpose1",
     "[| is_bezout_ext ?bezout; ?a ~= ?b |]
      ==> (?A **
           Finite_Cartesian_Product.transpose
            (bezout_matrix (Finite_Cartesian_Product.transpose ?A) ?a ?b ?i
              ?bezout)) $h
          ?i $h
          ?a =
          snd (snd (snd (snd (?bezout (?A $h ?i $h ?a)
                               (?A $h ?i $h ?b)))))",
     template_implication
      ([template_predicate
         (template_app (template_hole 13, template_var 4)),
        template_negation
         (template_equation (template_var 3, template_var 2))],
       template_equation
        (template_app
          (template_app
            (template_hole 9,
             template_app
              (template_app
                (template_hole 8,
                 template_app
                  (template_app (template_hole 7, template_var 1),
                   template_app
                    (template_hole 6,
                     template_app
                      (template_app
                        (template_app
                          (template_app
                            (template_app
                              (template_hole 5,
                               template_app
                                (template_hole 4, template_var 1)),
                             template_var 3),
                           template_var 2),
                         template_var 0),
                       template_var 4)))),
               template_var 0)),
           template_var 3),
         template_app
          (template_hole 3,
           template_app
            (template_hole 2,
             template_app
              (template_hole 1,
               template_app
                (template_hole 0,
                 template_app
                  (template_app
                    (template_var 4,
                     template_app
                      (template_app
                        (template_hole 9,
                         template_app
                          (template_app (template_hole 8, template_var 1),
                           template_var 0)),
                       template_var 3)),
                   template_app
                    (template_app
                      (template_hole 9,
                       template_app
                        (template_app (template_hole 8, template_var 1),
                         template_var 0)),
                     template_var 2))))))))),
    ("SNF_Algorithm_Euclidean_Domain.diagonalize_2x2_aux_works",
     "[| ?A = ?P ** ?A_input ** ?Q; invertible ?P; invertible ?Q;
         (?P', ?D, ?Q') = diagonalize_2x2_aux (?P, ?A, ?Q);
         ?A $h 0 $h 0 ~= (0::?'a) |]
      ==> ?D = ?P' ** ?A_input ** ?Q' &
          invertible ?P' & invertible ?Q' & isDiagonal ?D",
     template_implication
      ([template_equation
         (template_var 6,
          template_app
           (template_app
             (template_hole 13,
              template_app
               (template_app (template_hole 13, template_var 5),
                template_var 4)),
            template_var 3)),
        template_predicate
         (template_app (template_hole 12, template_var 5)),
        template_predicate
         (template_app (template_hole 12, template_var 3)),
        template_equation
         (template_app
           (template_app (template_hole 10, template_var 2),
            template_app
             (template_app (template_hole 9, template_var 1),
              template_var 0)),
          template_app
           (template_hole 8,
            template_app
             (template_app (template_hole 10, template_var 5),
              template_app
               (template_app (template_hole 9, template_var 6),
                template_var 3)))),
        template_negation
         (
            template_equation
             (template_app
               (template_app
                 (template_hole 5,
                  template_app
                   (template_app (template_hole 4, template_var 6),
                    template_hole 3)),
                template_hole 3),
              template_hole 2)
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 1,
               template_app
                (template_app (template_hole 14, template_var 1),
                 template_app
                  (template_app
                    (template_hole 13,
                     template_app
                      (template_app (template_hole 13, template_var 2),
                       template_var 4)),
                   template_var 0))),
             template_app
              (template_app
                (template_hole 1,
                 template_app (template_hole 12, template_var 2)),
               template_app
                (template_app
                  (template_hole 1,
                   template_app (template_hole 12, template_var 0)),
                 template_app (template_hole 0, template_var 1))))
           ))),
    ("SNF_Algorithm_Euclidean_Domain.diagonalize_2x2_JNF_works",
     "[| ?A : carrier_mat 2 2; (?P, ?D, ?Q) = diagonalize_2x2_JNF ?A |]
      ==> ?D = ?P * ?A * ?Q &
          invertible_mat ?P &
          invertible_mat ?Q &
          isDiagonal_mat ?D &
          ?P : carrier_mat 2 2 &
          ?Q : carrier_mat 2 2 & ?D : carrier_mat 2 2",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 13, template_var 3),
              template_app
               (template_app
                 (template_hole 12,
                  template_app
                   (template_hole 11,
                    template_app (template_hole 10, template_hole 9))),
                template_app
                 (template_hole 11,
                  template_app (template_hole 10, template_hole 9))))
            ),
        template_equation
         (template_app
           (template_app (template_hole 7, template_var 2),
            template_app
             (template_app (template_hole 6, template_var 1),
              template_var 0)),
          template_app (template_hole 5, template_var 3))],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 4,
               template_app
                (template_app (template_hole 3, template_var 1),
                 template_app
                  (template_app
                    (template_hole 2,
                     template_app
                      (template_app (template_hole 2, template_var 2),
                       template_var 3)),
                   template_var 0))),
             template_app
              (template_app
                (template_hole 4,
                 template_app (template_hole 1, template_var 2)),
               template_app
                (template_app
                  (template_hole 4,
                   template_app (template_hole 1, template_var 0)),
                 template_app
                  (template_app
                    (template_hole 4,
                     template_app (template_hole 0, template_var 1)),
                   template_app
                    (template_app
                      (template_hole 4,
                       template_app
                        (template_app (template_hole 13, template_var 2),
                         template_app
                          (template_app
                            (template_hole 12,
                             template_app
                              (template_hole 11,
                               template_app
                                (template_hole 10, template_hole 9))),
                           template_app
                            (template_hole 11,
                             template_app
                              (template_hole 10, template_hole 9))))),
                     template_app
                      (template_app
                        (template_hole 4,
                         template_app
                          (template_app (template_hole 13, template_var 0),
                           template_app
                            (template_app
                              (template_hole 12,
                               template_app
                                (template_hole 11,
                                 template_app
                                  (template_hole 10, template_hole 9))),
                             template_app
                              (template_hole 11,
                               template_app
                                (template_hole 10, template_hole 9))))),
                       template_app
                        (template_app (template_hole 13, template_var 1),
                         template_app
                          (template_app
                            (template_hole 12,
                             template_app
                              (template_hole 11,
                               template_app
                                (template_hole 10, template_hole 9))),
                           template_app
                            (template_hole 11,
                             template_app
                              (template_hole 10, template_hole 9))))))))))
           )))]
