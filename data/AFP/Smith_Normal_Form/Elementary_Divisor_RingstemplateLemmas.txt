   [("Elementary_Divisor_Rings.dim_col_mat_diag",
     "dim_col (mat_diag ?n ?f) = ?n",
     template_equation
      (template_app
        (template_hole 1,
         template_app
          (template_app (template_hole 0, template_var 1), template_var 0)),
       template_var 1)),
    ("Elementary_Divisor_Rings.dim_row_mat_diag",
     "dim_row (mat_diag ?n ?f) = ?n",
     template_equation
      (template_app
        (template_hole 1,
         template_app
          (template_app (template_hole 0, template_var 1), template_var 0)),
       template_var 1)),
    ("Elementary_Divisor_Rings.admits_diagonal_mat_1x1",
     "?A : carrier_mat 1 1 ==> admits_diagonal_reduction ?A",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 3, template_var 0),
              template_app
               (template_app (template_hole 2, template_hole 1),
                template_hole 1))
            )],
       template_predicate
        (template_app (template_hole 0, template_var 0)))),
    ("Elementary_Divisor_Rings.admits_triangular_mat_1x1",
     "?A : carrier_mat 1 1 ==> admits_triangular_reduction ?A",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 3, template_var 0),
              template_app
               (template_app (template_hole 2, template_hole 1),
                template_hole 1))
            )],
       template_predicate
        (template_app (template_hole 0, template_var 0)))),
    ("Elementary_Divisor_Rings.admits_diagonal_imp_admits_triangular_1xn",
     "Ball (carrier_mat 1 2) admits_diagonal_reduction ==>
      Ball (carrier_mat 1 ?n) admits_triangular_reduction",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_hole 7,
                template_app
                 (template_app (template_hole 6, template_hole 5),
                  template_app
                   (template_hole 4,
                    template_app (template_hole 3, template_hole 2)))),
              template_hole 1)
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 7,
               template_app
                (template_app (template_hole 6, template_hole 5),
                 template_var 0)),
             template_hole 0)
           ))),
    ("Elementary_Divisor_Rings.diagonal_imp_triangular_1x2",
     "[| ?A : carrier_mat 1 2; admits_diagonal_reduction ?A |]
      ==> admits_triangular_reduction ?A",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 7, template_var 0),
              template_app
               (template_app (template_hole 6, template_hole 5),
                template_app
                 (template_hole 4,
                  template_app (template_hole 3, template_hole 2))))
            ),
        template_predicate
         (template_app (template_hole 1, template_var 0))],
       template_predicate
        (template_app (template_hole 0, template_var 0)))),
    ("Elementary_Divisor_Rings.triangular_imp_diagonal_1x2",
     "[| ?A : carrier_mat 1 2; admits_triangular_reduction ?A |]
      ==> admits_diagonal_reduction ?A",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 7, template_var 0),
              template_app
               (template_app (template_hole 6, template_hole 5),
                template_app
                 (template_hole 4,
                  template_app (template_hole 3, template_hole 2))))
            ),
        template_predicate
         (template_app (template_hole 1, template_var 0))],
       template_predicate
        (template_app (template_hole 0, template_var 0)))),
    ("Elementary_Divisor_Rings.admits_diagonal_reduction_eq_exists_algorithm_is_SNF",
     "?A : carrier_mat ?m ?n ==>
      admits_diagonal_reduction ?A =
      (EX algorithm. is_SNF ?A (algorithm ?A))",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 5, template_var 2),
              template_app
               (template_app (template_hole 4, template_var 1),
                template_var 0))
            )],
       template_equation
        (template_app (template_hole 2, template_var 2),
         template_app (template_hole 1, t_empty)))),
    ("Elementary_Divisor_Rings.admits_diagonal_reduction_imp_exists_algorithm_is_SNF",
     "[| ?A : carrier_mat ?m ?n; admits_diagonal_reduction ?A |]
      ==> EX algorithm. is_SNF ?A (algorithm ?A)",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 4, template_var 2),
              template_app
               (template_app (template_hole 3, template_var 1),
                template_var 0))
            ),
        template_predicate
         (template_app (template_hole 2, template_var 2))],
       template_predicate (template_app (template_hole 1, t_empty)))),
    ("Elementary_Divisor_Rings.exists_algorithm_is_SNF_imp_admits_diagonal_reduction",
     "[| ?A : carrier_mat ?m ?n; EX algorithm. is_SNF ?A (algorithm ?A) |]
      ==> admits_diagonal_reduction ?A",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 4, template_var 2),
              template_app
               (template_app (template_hole 3, template_var 1),
                template_var 0))
            ),
        template_predicate (template_app (template_hole 2, t_empty))],
       template_predicate
        (template_app (template_hole 0, template_var 2)))),
    ("Elementary_Divisor_Rings.admits_diagonal_reduction_eq_exists_algorithm_is_SNF_all",
     "(ALL A:carrier_mat ?m ?n. admits_diagonal_reduction A) =
      (EX algorithm. ALL A:carrier_mat ?m ?n. is_SNF A (algorithm A))",
     template_equation
      (template_app
        (template_app
          (template_hole 4,
           template_app
            (template_app (template_hole 3, template_var 1),
             template_var 0)),
         t_empty),
       template_app (template_hole 1, t_empty))),
    ("Elementary_Divisor_Rings.admits_diagonal_reduction_imp_exists_algorithm_is_SNF_all",
     "ALL A:carrier_mat ?m ?n. admits_diagonal_reduction A ==>
      EX algorithm. ALL A:carrier_mat ?m ?n. is_SNF A (algorithm A)",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_hole 4,
                template_app
                 (template_app (template_hole 3, template_var 1),
                  template_var 0)),
              t_empty)
            )],
       template_predicate (template_app (template_hole 1, t_empty)))),
    ("Elementary_Divisor_Rings.exists_algorithm_is_SNF_imp_admits_diagonal_reduction_all",
     "EX algorithm. ALL A:carrier_mat ?m ?n. is_SNF A (algorithm A) ==>
      ALL A:carrier_mat ?m ?n. admits_diagonal_reduction A",
     template_implication
      ([template_predicate (template_app (template_hole 4, t_empty))],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 3,
               template_app
                (template_app (template_hole 2, template_var 1),
                 template_var 0)),
             t_empty)
           ))),
    ("Elementary_Divisor_Rings.admits_triangular_reduction_intro",
     "[| invertible_mat ?U; ?U : carrier_mat (dim_col ?A) (dim_col ?A);
         lower_triangular (?A * ?U) |]
      ==> admits_triangular_reduction ?A",
     template_implication
      ([template_predicate (template_app (template_hole 6, template_var 1)),
        template_predicate
         (
            template_app
             (template_app (template_hole 5, template_var 1),
              template_app
               (template_app
                 (template_hole 4,
                  template_app (template_hole 3, template_var 0)),
                template_app (template_hole 3, template_var 0)))
            ),
        template_predicate
         (
            template_app
             (template_hole 2,
              template_app
               (template_app (template_hole 1, template_var 0),
                template_var 1))
            )],
       template_predicate
        (template_app (template_hole 0, template_var 0)))),
    ("Elementary_Divisor_Rings.triangularizable_0n",
     "?A : carrier_mat 0 ?n ==>
      EX U. U : carrier_mat ?n ?n &
            invertible_mat U & lower_triangular (?A * U)",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 7, template_var 1),
              template_app
               (template_app (template_hole 6, template_hole 5),
                template_var 0))
            )],
       template_predicate (template_app (template_hole 4, t_empty)))),
    ("Elementary_Divisor_Rings.triangularizable_m0",
     "?A : carrier_mat ?m 0 ==>
      EX U. U : carrier_mat 0 0 &
            invertible_mat U & lower_triangular (?A * U)",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 7, template_var 1),
              template_app
               (template_app (template_hole 6, template_var 0),
                template_hole 5))
            )],
       template_predicate (template_app (template_hole 4, t_empty)))),
    ("Elementary_Divisor_Rings.admits_diagonal_reduction_intro",
     "[| ?P : carrier_mat (dim_row ?A) (dim_row ?A);
         ?Q : carrier_mat (dim_col ?A) (dim_col ?A); invertible_mat ?P;
         invertible_mat ?Q; Smith_normal_form_mat (?P * ?A * ?Q) |]
      ==> admits_diagonal_reduction ?A",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 7, template_var 2),
              template_app
               (template_app
                 (template_hole 6,
                  template_app (template_hole 5, template_var 1)),
                template_app (template_hole 5, template_var 1)))
            ),
        template_predicate
         (
            template_app
             (template_app (template_hole 7, template_var 0),
              template_app
               (template_app
                 (template_hole 6,
                  template_app (template_hole 4, template_var 1)),
                template_app (template_hole 4, template_var 1)))
            ),
        template_predicate (template_app (template_hole 3, template_var 2)),
        template_predicate (template_app (template_hole 3, template_var 0)),
        template_predicate
         (
            template_app
             (template_hole 2,
              template_app
               (template_app
                 (template_hole 1,
                  template_app
                   (template_app (template_hole 1, template_var 2),
                    template_var 1)),
                template_var 0))
            )],
       template_predicate
        (template_app (template_hole 0, template_var 1))))]
