   [("Diagonal_To_Smith.to_nat_less_ncols", "to_nat ?a < ncols ?A",
     template_inequation
      (less_than, template_app (template_hole 1, template_var 1),
       template_app (template_hole 0, template_var 0))),
    ("Diagonal_To_Smith.to_nat_less_nrows", "to_nat ?a < nrows ?A",
     template_inequation
      (less_than, template_app (template_hole 1, template_var 1),
       template_app (template_hole 0, template_var 0))),
    ("Diagonal_To_Smith.ncols_diagonal_to_Smith",
     "ncols (diagonal_to_Smith ?A ?bezout) = ncols ?A",
     template_equation
      (template_app
        (template_hole 1,
         template_app
          (template_app (template_hole 0, template_var 1), template_var 0)),
       template_app (template_hole 1, template_var 1))),
    ("Diagonal_To_Smith.nrows_diagonal_to_Smith",
     "nrows (diagonal_to_Smith ?A ?bezout) = nrows ?A",
     template_equation
      (template_app
        (template_hole 1,
         template_app
          (template_app (template_hole 0, template_var 1), template_var 0)),
       template_app (template_hole 1, template_var 1))),
    ("Diagonal_To_Smith.mat_q_1", "mat ?q $ ?a $ ?a = ?q",
     template_equation
      (template_app
        (template_app
          (template_hole 2,
           template_app
            (template_app
              (template_hole 1,
               template_app (template_hole 0, template_var 1)),
             template_var 0)),
         template_var 0),
       template_var 1)),
    ("Diagonal_To_Smith.ncols_Diagonal_to_Smith_row_i",
     "ncols (Diagonal_to_Smith_row_i ?A ?i ?bezout) = ncols ?A",
     template_equation
      (template_app
        (template_hole 1,
         template_app
          (template_app
            (template_app (template_hole 0, template_var 2),
             template_var 1),
           template_var 0)),
       template_app (template_hole 1, template_var 2))),
    ("Diagonal_To_Smith.ncols_diagonal_to_Smith_aux",
     "ncols (diagonal_to_Smith_aux ?A ?xs ?bezout) = ncols ?A",
     template_equation
      (template_app
        (template_hole 1,
         template_app
          (template_app
            (template_app (template_hole 0, template_var 2),
             template_var 1),
           template_var 0)),
       template_app (template_hole 1, template_var 2))),
    ("Diagonal_To_Smith.nrows_Diagonal_to_Smith_row_i",
     "nrows (Diagonal_to_Smith_row_i ?A ?i ?bezout) = nrows ?A",
     template_equation
      (template_app
        (template_hole 1,
         template_app
          (template_app
            (template_app (template_hole 0, template_var 2),
             template_var 1),
           template_var 0)),
       template_app (template_hole 1, template_var 2))),
    ("Diagonal_To_Smith.nrows_diagonal_to_Smith_aux",
     "nrows (diagonal_to_Smith_aux ?A ?xs ?bezout) = nrows ?A",
     template_equation
      (template_app
        (template_hole 1,
         template_app
          (template_app
            (template_app (template_hole 0, template_var 2),
             template_var 1),
           template_var 0)),
       template_app (template_hole 1, template_var 2))),
    ("Diagonal_To_Smith.isDiagonal_diagonal_to_Smith",
     "isDiagonal ?A ==> isDiagonal (diagonal_to_Smith ?A ?bezout)",
     template_implication
      ([template_predicate
         (template_app (template_hole 1, template_var 1))],
       template_predicate
        (
           template_app
            (template_hole 1,
             template_app
              (template_app (template_hole 0, template_var 1),
               template_var 0))
           ))),
    ("Diagonal_To_Smith.ncols_diagonal_to_Smith_i",
     "ncols (diagonal_to_Smith_i ?xs ?A ?i ?bezout) = ncols ?A",
     template_equation
      (template_app
        (template_hole 1,
         template_app
          (template_app
            (template_app
              (template_app (template_hole 0, template_var 3),
               template_var 2),
             template_var 1),
           template_var 0)),
       template_app (template_hole 1, template_var 2))),
    ("Diagonal_To_Smith.nrows_diagonal_to_Smith_i",
     "nrows (diagonal_to_Smith_i ?xs ?A ?i ?bezout) = nrows ?A",
     template_equation
      (template_app
        (template_hole 1,
         template_app
          (template_app
            (template_app
              (template_app (template_hole 0, template_var 3),
               template_var 2),
             template_var 1),
           template_var 0)),
       template_app (template_hole 1, template_var 2))),
    ("Diagonal_To_Smith.ncols_diagonal_step",
     "ncols (diagonal_step ?A ?i ?j ?c ?v) = ncols ?A",
     template_equation
      (template_app
        (template_hole 1,
         template_app
          (template_app
            (template_app
              (template_app
                (template_app (template_hole 0, template_var 4),
                 template_var 3),
               template_var 2),
             template_var 1),
           template_var 0)),
       template_app (template_hole 1, template_var 4))),
    ("Diagonal_To_Smith.nrows_diagonal_step",
     "nrows (diagonal_step ?A ?i ?j ?c ?v) = nrows ?A",
     template_equation
      (template_app
        (template_hole 1,
         template_app
          (template_app
            (template_app
              (template_app
                (template_app (template_hole 0, template_var 4),
                 template_var 3),
               template_var 2),
             template_var 1),
           template_var 0)),
       template_app (template_hole 1, template_var 4))),
    ("Diagonal_To_Smith.isDiagonal_eq_upt_k_max",
     "isDiagonal ?A = isDiagonal_upt_k ?A (max (nrows ?A) (ncols ?A))",
     template_equation
      (template_app (template_hole 4, template_var 0),
       template_app
        (template_app (template_hole 3, template_var 0),
         template_app
          (template_app
            (template_hole 2,
             template_app (template_hole 1, template_var 0)),
           template_app (template_hole 0, template_var 0))))),
    ("Diagonal_To_Smith.isDiagonal_eq_upt_k_min",
     "isDiagonal ?A = isDiagonal_upt_k ?A (min (nrows ?A) (ncols ?A))",
     template_equation
      (template_app (template_hole 4, template_var 0),
       template_app
        (template_app (template_hole 3, template_var 0),
         template_app
          (template_app
            (template_hole 2,
             template_app (template_hole 1, template_var 0)),
           template_app (template_hole 0, template_var 0))))),
    ("Diagonal_To_Smith.Smith_normal_form_diagonal_to_Smith",
     "[| is_bezout_ext ?bezout; isDiagonal ?A |]
      ==> Smith_normal_form (diagonal_to_Smith ?A ?bezout)",
     template_implication
      ([template_predicate (template_app (template_hole 3, template_var 1)),
        template_predicate
         (template_app (template_hole 2, template_var 0))],
       template_predicate
        (
           template_app
            (template_hole 1,
             template_app
              (template_app (template_hole 0, template_var 0),
               template_var 1))
           ))),
    ("Diagonal_To_Smith.diagonal_step_code_nth",
     "($) (diagonal_step ?A ?i ?j ?c ?v) =
      diagonal_step_row ?A ?i ?j ?c ?v",
     template_equation
      (template_app
        (template_hole 2,
         template_app
          (template_app
            (template_app
              (template_app
                (template_app (template_hole 1, template_var 4),
                 template_var 3),
               template_var 2),
             template_var 1),
           template_var 0)),
       template_app
        (template_app
          (template_app
            (template_app
              (template_app (template_hole 0, template_var 4),
               template_var 3),
             template_var 2),
           template_var 1),
         template_var 0))),
    ("Diagonal_To_Smith.diagonal_to_Smith_aux_append",
     "diagonal_to_Smith_aux ?A (?xs @ ?ys) ?bezout =
      diagonal_to_Smith_aux (diagonal_to_Smith_aux ?A ?xs ?bezout) ?ys
       ?bezout",
     template_equation
      (template_app
        (template_app
          (template_app (template_hole 1, template_var 3),
           template_app
            (template_app (template_hole 0, template_var 2),
             template_var 1)),
         template_var 0),
       template_app
        (template_app
          (template_app
            (template_hole 1,
             template_app
              (template_app
                (template_app (template_hole 1, template_var 3),
                 template_var 2),
               template_var 0)),
           template_var 1),
         template_var 0))),
    ("Diagonal_To_Smith.mat_q_0",
     "?a ~= ?b ==> mat ?q $ ?a $ ?b = (0::?'b)",
     template_implication
      ([template_negation
         (template_equation (template_var 2, template_var 1))],
       template_equation
        (template_app
          (template_app
            (template_hole 3,
             template_app
              (template_app
                (template_hole 2,
                 template_app (template_hole 1, template_var 0)),
               template_var 2)),
           template_var 1),
         template_hole 0))),
    ("Diagonal_To_Smith.diagonal_to_Smith_aux_append2",
     "diagonal_to_Smith_aux ?A (?xs @ [?ys]) ?bezout =
      Diagonal_to_Smith_row_i (diagonal_to_Smith_aux ?A ?xs ?bezout) ?ys
       ?bezout",
     template_equation
      (template_app
        (template_app
          (template_app (template_hole 4, template_var 3),
           template_app
            (template_app (template_hole 3, template_var 2),
             template_app
              (template_app (template_hole 2, template_var 1),
               template_hole 1))),
         template_var 0),
       template_app
        (template_app
          (template_app
            (template_hole 0,
             template_app
              (template_app
                (template_app (template_hole 4, template_var 3),
                 template_var 2),
               template_var 0)),
           template_var 1),
         template_var 0))),
    ("Diagonal_To_Smith.Smith_normal_form_upt_k_le",
     "[| is_bezout_ext ?bezout; ?a <= ?k; Smith_normal_form_upt_k ?A ?k |]
      ==> Smith_normal_form_upt_k ?A ?a",
     template_implication
      ([template_predicate (template_app (template_hole 2, template_var 3)),
        template_inequation (less_equals, template_var 2, template_var 1),
        template_predicate
         (
            template_app
             (template_app (template_hole 0, template_var 0),
              template_var 1)
            )],
       template_predicate
        (
           template_app
            (template_app (template_hole 0, template_var 0), template_var 2)
           ))),
    ("Diagonal_To_Smith.isDiagonal_Diagonal_to_Smith_row_i",
     "[| isDiagonal ?A; ?i < min (nrows ?A) (ncols ?A) |]
      ==> isDiagonal (Diagonal_to_Smith_row_i ?A ?i ?bezout)",
     template_implication
      ([template_predicate (template_app (template_hole 5, template_var 2)),
        template_inequation
         (less_than, template_var 1,
          template_app
           (template_app
             (template_hole 3,
              template_app (template_hole 2, template_var 2)),
            template_app (template_hole 1, template_var 2)))],
       template_predicate
        (
           template_app
            (template_hole 5,
             template_app
              (template_app
                (template_app (template_hole 0, template_var 2),
                 template_var 1),
               template_var 0))
           ))),
    ("Diagonal_To_Smith.isDiagonal",
     "[| isDiagonal ?A; to_nat ?a ~= to_nat ?b |]
      ==> ?A $ ?a $ ?b = (0::?'a)",
     template_implication
      ([template_predicate (template_app (template_hole 8, template_var 2)),
        template_negation
         (
            template_equation
             (template_app (template_hole 5, template_var 1),
              template_app (template_hole 4, template_var 0))
            )],
       template_equation
        (template_app
          (template_app
            (template_hole 2,
             template_app
              (template_app (template_hole 1, template_var 2),
               template_var 1)),
           template_var 0),
         template_hole 0))),
    ("Diagonal_To_Smith.diagonal_to_Smith_PQ_exists",
     "isDiagonal ?A ==>
      EX P Q.
         invertible P & invertible Q & Smith_normal_form (P ** ?A ** Q)",
     template_implication
      ([template_predicate
         (template_app (template_hole 8, template_var 0))],
       template_predicate (template_app (template_hole 7, t_empty)))),
    ("Diagonal_To_Smith.diagonal_to_Smith_aux_PQ_append",
     "diagonal_to_Smith_aux_PQ (?xs @ ?ys) ?bezout (?P, ?A, ?Q) =
      diagonal_to_Smith_aux_PQ ?ys ?bezout
       (diagonal_to_Smith_aux_PQ ?xs ?bezout (?P, ?A, ?Q))",
     template_equation
      (template_app
        (template_app
          (template_app
            (template_hole 3,
             template_app
              (template_app (template_hole 2, template_var 5),
               template_var 4)),
           template_var 3),
         template_app
          (template_app (template_hole 1, template_var 2),
           template_app
            (template_app (template_hole 0, template_var 1),
             template_var 0))),
       template_app
        (template_app
          (template_app (template_hole 3, template_var 4), template_var 3),
         template_app
          (template_app
            (template_app (template_hole 3, template_var 5),
             template_var 3),
           template_app
            (template_app (template_hole 1, template_var 2),
             template_app
              (template_app (template_hole 0, template_var 1),
               template_var 0)))))),
    ("Diagonal_To_Smith.diagonal_to_Smith_row_i_dvd_ii",
     "is_bezout_ext ?bezout ==>
      Diagonal_to_Smith_row_i ?A ?i ?bezout $ from_nat ?i $ from_nat ?i dvd
      ?A $ from_nat ?i $ from_nat ?i",
     template_implication
      ([template_predicate
         (template_app (template_hole 6, template_var 2))],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 5,
               template_app
                (template_app
                  (template_hole 4,
                   template_app
                    (template_app
                      (template_hole 3,
                       template_app
                        (template_app
                          (template_app (template_hole 2, template_var 1),
                           template_var 0),
                         template_var 2)),
                     template_app (template_hole 1, template_var 0))),
                 template_app (template_hole 0, template_var 0))),
             template_app
              (template_app
                (template_hole 4,
                 template_app
                  (template_app (template_hole 3, template_var 1),
                   template_app (template_hole 1, template_var 0))),
               template_app (template_hole 0, template_var 0)))
           ))),
    ("Diagonal_To_Smith.diagonal_to_Smith_i_dvd_ii",
     "is_bezout_ext ?bezout ==>
      diagonal_to_Smith_i ?xs ?A ?i ?bezout $ from_nat ?i $ from_nat ?i dvd
      ?A $ from_nat ?i $ from_nat ?i",
     template_implication
      ([template_predicate
         (template_app (template_hole 6, template_var 3))],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 5,
               template_app
                (template_app
                  (template_hole 4,
                   template_app
                    (template_app
                      (template_hole 3,
                       template_app
                        (template_app
                          (template_app
                            (template_app (template_hole 2, template_var 2),
                             template_var 1),
                           template_var 0),
                         template_var 3)),
                     template_app (template_hole 1, template_var 0))),
                 template_app (template_hole 0, template_var 0))),
             template_app
              (template_app
                (template_hole 4,
                 template_app
                  (template_app (template_hole 3, template_var 1),
                   template_app (template_hole 1, template_var 0))),
               template_app (template_hole 0, template_var 0)))
           ))),
    ("Diagonal_To_Smith.diagonal_to_Smith_aux_PQ_append2",
     "diagonal_to_Smith_aux_PQ (?xs @ [?ys]) ?bezout (?P, ?A, ?Q) =
      Diagonal_to_Smith_row_i_PQ ?ys ?bezout
       (diagonal_to_Smith_aux_PQ ?xs ?bezout (?P, ?A, ?Q))",
     template_equation
      (template_app
        (template_app
          (template_app
            (template_hole 6,
             template_app
              (template_app (template_hole 5, template_var 5),
               template_app
                (template_app (template_hole 4, template_var 4),
                 template_hole 3))),
           template_var 3),
         template_app
          (template_app (template_hole 2, template_var 2),
           template_app
            (template_app (template_hole 1, template_var 1),
             template_var 0))),
       template_app
        (template_app
          (template_app (template_hole 0, template_var 4), template_var 3),
         template_app
          (template_app
            (template_app (template_hole 6, template_var 5),
             template_var 3),
           template_app
            (template_app (template_hole 2, template_var 2),
             template_app
              (template_app (template_hole 1, template_var 1),
               template_var 0)))))),
    ("Diagonal_To_Smith.isDiagonal_diagonal_to_Smith_aux",
     "[| is_bezout_ext ?bezout; isDiagonal ?A;
         ?k < min (nrows ?A) (ncols ?A) |]
      ==> isDiagonal (diagonal_to_Smith_aux ?A [0..<?k] ?bezout)",
     template_implication
      ([template_predicate (template_app (template_hole 8, template_var 2)),
        template_predicate (template_app (template_hole 7, template_var 1)),
        template_inequation
         (less_than, template_var 0,
          template_app
           (template_app
             (template_hole 5,
              template_app (template_hole 4, template_var 1)),
            template_app (template_hole 3, template_var 1)))],
       template_predicate
        (
           template_app
            (template_hole 7,
             template_app
              (template_app
                (template_app (template_hole 2, template_var 1),
                 template_app
                  (template_app (template_hole 1, template_hole 0),
                   template_var 0)),
               template_var 2))
           ))),
    ("Diagonal_To_Smith.from_nat_neq_cols",
     "[| ?i < ncols ?A; ?k < ncols ?A; ?i ~= ?k |]
      ==> from_nat ?i ~= from_nat ?k",
     template_implication
      ([template_inequation
         (less_than, template_var 2,
          template_app (template_hole 4, template_var 1)),
        template_inequation
         (less_than, template_var 0,
          template_app (template_hole 4, template_var 1)),
        template_negation
         (template_equation (template_var 2, template_var 0))],
       template_negation
        (
           template_equation
            (template_app (template_hole 0, template_var 2),
             template_app (template_hole 0, template_var 0))
           ))),
    ("Diagonal_To_Smith.from_nat_neq_rows",
     "[| ?i < nrows ?A; ?k < nrows ?A; ?i ~= ?k |]
      ==> from_nat ?i ~= from_nat ?k",
     template_implication
      ([template_inequation
         (less_than, template_var 2,
          template_app (template_hole 4, template_var 1)),
        template_inequation
         (less_than, template_var 0,
          template_app (template_hole 4, template_var 1)),
        template_negation
         (template_equation (template_var 2, template_var 0))],
       template_negation
        (
           template_equation
            (template_app (template_hole 0, template_var 2),
             template_app (template_hole 0, template_var 0))
           ))),
    ("Diagonal_To_Smith.isDiagonal_diagonal_to_Smith_aux_general",
     "[| ALL x. x : set ?xs --> x < min (nrows ?A) (ncols ?A);
         isDiagonal ?A |]
      ==> isDiagonal (diagonal_to_Smith_aux ?A ?xs ?bezout)",
     template_implication
      ([template_predicate (template_app (template_hole 9, t_empty)),
        template_predicate
         (template_app (template_hole 1, template_var 1))],
       template_predicate
        (
           template_app
            (template_hole 1,
             template_app
              (template_app
                (template_app (template_hole 0, template_var 1),
                 template_var 2),
               template_var 0))
           ))),
    ("Diagonal_To_Smith.Smith_normal_form_upt_k_diagonal_to_Smith_aux",
     "[| is_bezout_ext ?bezout; ?k < min (nrows ?A) (ncols ?A);
         isDiagonal ?A |]
      ==> Smith_normal_form_upt_k
           (diagonal_to_Smith_aux ?A [0..<?k] ?bezout) ?k",
     template_implication
      ([template_predicate (template_app (template_hole 9, template_var 2)),
        template_inequation
         (less_than, template_var 1,
          template_app
           (template_app
             (template_hole 7,
              template_app (template_hole 6, template_var 0)),
            template_app (template_hole 5, template_var 0))),
        template_predicate
         (template_app (template_hole 4, template_var 0))],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 3,
               template_app
                (template_app
                  (template_app (template_hole 2, template_var 0),
                   template_app
                    (template_app (template_hole 1, template_hole 0),
                     template_var 1)),
                 template_var 2)),
             template_var 1)
           ))),
    ("Diagonal_To_Smith.isDiagonal_diagonal_step",
     "[| isDiagonal ?A; ?i < min (nrows ?A) (ncols ?A);
         ?j < min (nrows ?A) (ncols ?A) |]
      ==> isDiagonal (diagonal_step ?A ?i ?j ?d ?v)",
     template_implication
      ([template_predicate (template_app (template_hole 5, template_var 4)),
        template_inequation
         (less_than, template_var 3,
          template_app
           (template_app
             (template_hole 3,
              template_app (template_hole 2, template_var 4)),
            template_app (template_hole 1, template_var 4))),
        template_inequation
         (less_than, template_var 2,
          template_app
           (template_app
             (template_hole 3,
              template_app (template_hole 2, template_var 4)),
            template_app (template_hole 1, template_var 4)))],
       template_predicate
        (
           template_app
            (template_hole 5,
             template_app
              (template_app
                (template_app
                  (template_app
                    (template_app (template_hole 0, template_var 4),
                     template_var 3),
                   template_var 2),
                 template_var 1),
               template_var 0))
           ))),
    ("Diagonal_To_Smith.euclid_ext2_code",
     "euclid_ext2 ?a ?b =
      (let ((p, q), d) =
             euclid_ext_aux (1::?'a) (0::?'a) (0::?'a) (1::?'a) ?a ?b
       in (p, q, - ?b div d, ?a div d, d))",
     template_equation
      (template_app
        (template_app (template_hole 12, template_var 1), template_var 0),
       template_app
        (template_app
          (template_hole 11,
           template_app
            (template_app
              (template_app
                (template_app
                  (template_app
                    (template_app (template_hole 10, template_hole 9),
                     template_hole 8),
                   template_hole 8),
                 template_hole 9),
               template_var 1),
             template_var 0)),
         template_app
          (template_hole 7, template_app (template_hole 6, t_empty))))),
    ("Diagonal_To_Smith.Smith_normal_form_upt_k_Suc_eq",
     "[| is_bezout_ext ?bezout; ?k < min (nrows ?A) (ncols ?A) |]
      ==> Smith_normal_form_upt_k
           (diagonal_to_Smith_aux ?A [0..<Suc ?k] ?bezout) ?k =
          Smith_normal_form_upt_k
           (diagonal_to_Smith_aux ?A [0..<?k] ?bezout) ?k",
     template_implication
      ([template_predicate
         (template_app (template_hole 10, template_var 2)),
        template_inequation
         (less_than, template_var 1,
          template_app
           (template_app
             (template_hole 8,
              template_app (template_hole 7, template_var 0)),
            template_app (template_hole 6, template_var 0)))],
       template_equation
        (template_app
          (template_app
            (template_hole 4,
             template_app
              (template_app
                (template_app (template_hole 3, template_var 0),
                 template_app
                  (template_app (template_hole 2, template_hole 1),
                   template_app (template_hole 0, template_var 1))),
               template_var 2)),
           template_var 1),
         template_app
          (template_app
            (template_hole 4,
             template_app
              (template_app
                (template_app (template_hole 3, template_var 0),
                 template_app
                  (template_app (template_hole 2, template_hole 1),
                   template_var 1)),
               template_var 2)),
           template_var 1)))),
    ("Diagonal_To_Smith.Smith_normal_form_upt_k_imp_Suc_k",
     "[| is_bezout_ext ?bezout;
         Smith_normal_form_upt_k (diagonal_to_Smith_aux ?A [0..<?k] ?bezout)
          ?k;
         ?k < min (nrows ?A) (ncols ?A) |]
      ==> Smith_normal_form_upt_k
           (diagonal_to_Smith_aux ?A [0..<Suc ?k] ?bezout) ?k",
     template_implication
      ([template_predicate (template_app (template_hole 9, template_var 2)),
        template_predicate
         (
            template_app
             (template_app
               (template_hole 8,
                template_app
                 (template_app
                   (template_app (template_hole 7, template_var 1),
                    template_app
                     (template_app (template_hole 6, template_hole 5),
                      template_var 0)),
                  template_var 2)),
              template_var 0)
            ),
        template_inequation
         (less_than, template_var 0,
          template_app
           (template_app
             (template_hole 3,
              template_app (template_hole 2, template_var 1)),
            template_app (template_hole 1, template_var 1)))],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 8,
               template_app
                (template_app
                  (template_app (template_hole 7, template_var 1),
                   template_app
                    (template_app (template_hole 6, template_hole 5),
                     template_app (template_hole 0, template_var 0))),
                 template_var 2)),
             template_var 0)
           ))),
    ("Diagonal_To_Smith.Smith_normal_form_upt_k_Suc_imp_k",
     "[| is_bezout_ext ?bezout;
         Smith_normal_form_upt_k
          (diagonal_to_Smith_aux ?A [0..<Suc ?k] ?bezout) ?k;
         ?k < min (nrows ?A) (ncols ?A) |]
      ==> Smith_normal_form_upt_k
           (diagonal_to_Smith_aux ?A [0..<?k] ?bezout) ?k",
     template_implication
      ([template_predicate (template_app (template_hole 9, template_var 2)),
        template_predicate
         (
            template_app
             (template_app
               (template_hole 8,
                template_app
                 (template_app
                   (template_app (template_hole 7, template_var 1),
                    template_app
                     (template_app (template_hole 6, template_hole 5),
                      template_app (template_hole 4, template_var 0))),
                  template_var 2)),
              template_var 0)
            ),
        template_inequation
         (less_than, template_var 0,
          template_app
           (template_app
             (template_hole 2,
              template_app (template_hole 1, template_var 1)),
            template_app (template_hole 0, template_var 1)))],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 8,
               template_app
                (template_app
                  (template_app (template_hole 7, template_var 1),
                   template_app
                    (template_app (template_hole 6, template_hole 5),
                     template_var 0)),
                 template_var 2)),
             template_var 0)
           ))),
    ("Diagonal_To_Smith.diagonal_to_Smith_row_i_preserves_previous",
     "[| is_bezout_ext ?bezout; ?i < min (nrows ?A) (ncols ?A);
         to_nat ?a ~= to_nat ?b |]
      ==> Diagonal_to_Smith_row_i ?A ?i ?bezout $ ?a $ ?b = ?A $ ?a $ ?b",
     template_implication
      ([template_predicate
         (template_app (template_hole 12, template_var 4)),
        template_inequation
         (less_than, template_var 3,
          template_app
           (template_app
             (template_hole 10,
              template_app (template_hole 9, template_var 2)),
            template_app (template_hole 8, template_var 2))),
        template_negation
         (
            template_equation
             (template_app (template_hole 5, template_var 1),
              template_app (template_hole 4, template_var 0))
            )],
       template_equation
        (template_app
          (template_app
            (template_hole 2,
             template_app
              (template_app
                (template_hole 1,
                 template_app
                  (template_app
                    (template_app (template_hole 0, template_var 2),
                     template_var 3),
                   template_var 4)),
               template_var 1)),
           template_var 0),
         template_app
          (template_app
            (template_hole 2,
             template_app
              (template_app (template_hole 1, template_var 2),
               template_var 1)),
           template_var 0)))),
    ("Diagonal_To_Smith.isDiagonal_diagonal_to_Smith_i",
     "[| isDiagonal ?A;
         ALL x. x : set ?xs --> x < min (nrows ?A) (ncols ?A);
         ?i < min (nrows ?A) (ncols ?A) |]
      ==> isDiagonal (diagonal_to_Smith_i ?xs ?A ?i ?bezout)",
     template_implication
      ([template_predicate (template_app (template_hole 9, template_var 3)),
        template_predicate (template_app (template_hole 8, t_empty)),
        template_inequation
         (less_than, template_var 1,
          template_app
           (template_app
             (template_hole 3,
              template_app (template_hole 2, template_var 3)),
            template_app (template_hole 1, template_var 3)))],
       template_predicate
        (
           template_app
            (template_hole 9,
             template_app
              (template_app
                (template_app
                  (template_app (template_hole 0, template_var 2),
                   template_var 3),
                 template_var 1),
               template_var 0))
           ))),
    ("Diagonal_To_Smith.diagonal_to_Smith_PQ'",
     "[| isDiagonal ?A; is_bezout_ext ?bezout;
         (?P, ?S, ?Q) = diagonal_to_Smith_PQ ?A ?bezout |]
      ==> ?S = ?P ** ?A ** ?Q &
          invertible ?P & invertible ?Q & Smith_normal_form ?S",
     template_implication
      ([template_predicate
         (template_app (template_hole 12, template_var 4)),
        template_predicate
         (template_app (template_hole 11, template_var 3)),
        template_equation
         (template_app
           (template_app (template_hole 9, template_var 2),
            template_app
             (template_app (template_hole 8, template_var 1),
              template_var 0)),
          template_app
           (template_app (template_hole 7, template_var 4),
            template_var 3))],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 6,
               template_app
                (template_app (template_hole 5, template_var 1),
                 template_app
                  (template_app
                    (template_hole 4,
                     template_app
                      (template_app (template_hole 3, template_var 2),
                       template_var 4)),
                   template_var 0))),
             template_app
              (template_app
                (template_hole 6,
                 template_app (template_hole 2, template_var 2)),
               template_app
                (template_app
                  (template_hole 6,
                   template_app (template_hole 1, template_var 0)),
                 template_app (template_hole 0, template_var 1))))
           ))),
    ("Diagonal_To_Smith.diagonal_to_Smith_PQ",
     "[| isDiagonal ?A; is_bezout_ext ?bezout;
         (?P, ?B, ?Q) = diagonal_to_Smith_PQ ?A ?bezout |]
      ==> ?B = ?P ** ?A ** ?Q &
          invertible ?P &
          invertible ?Q & ?B = diagonal_to_Smith ?A ?bezout",
     template_implication
      ([template_predicate
         (template_app (template_hole 12, template_var 4)),
        template_predicate
         (template_app (template_hole 11, template_var 3)),
        template_equation
         (template_app
           (template_app (template_hole 9, template_var 2),
            template_app
             (template_app (template_hole 8, template_var 1),
              template_var 0)),
          template_app
           (template_app (template_hole 7, template_var 4),
            template_var 3))],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 6,
               template_app
                (template_app (template_hole 5, template_var 1),
                 template_app
                  (template_app
                    (template_hole 4,
                     template_app
                      (template_app (template_hole 3, template_var 2),
                       template_var 4)),
                   template_var 0))),
             template_app
              (template_app
                (template_hole 6,
                 template_app (template_hole 2, template_var 2)),
               template_app
                (template_app
                  (template_hole 6,
                   template_app (template_hole 1, template_var 0)),
                 template_app
                  (template_app (template_hole 5, template_var 1),
                   template_app
                    (template_app (template_hole 0, template_var 4),
                     template_var 3)))))
           ))),
    ("Diagonal_To_Smith.isDiagonal_imp_0",
     "[| isDiagonal ?A; from_nat ?a ~= from_nat ?b;
         ?a < min (nrows ?A) (ncols ?A); ?b < min (nrows ?A) (ncols ?A) |]
      ==> ?A $ from_nat ?a $ from_nat ?b = (0::?'a)",
     template_implication
      ([template_predicate
         (template_app (template_hole 13, template_var 2)),
        template_negation
         (
            template_equation
             (template_app (template_hole 10, template_var 1),
              template_app (template_hole 10, template_var 0))
            ),
        template_inequation
         (less_than, template_var 1,
          template_app
           (template_app
             (template_hole 8,
              template_app (template_hole 7, template_var 2)),
            template_app (template_hole 6, template_var 2))),
        template_inequation
         (less_than, template_var 0,
          template_app
           (template_app
             (template_hole 8,
              template_app (template_hole 7, template_var 2)),
            template_app (template_hole 6, template_var 2)))],
       template_equation
        (template_app
          (template_app
            (template_hole 4,
             template_app
              (template_app (template_hole 3, template_var 2),
               template_app (template_hole 2, template_var 1))),
           template_app (template_hole 1, template_var 0)),
         template_hole 0))),
    ("Diagonal_To_Smith.split_beta_bezout",
     "is_bezout_ext ?bezout ==>
      ?bezout ?a ?b =
      (fst (?bezout ?a ?b), fst (snd (?bezout ?a ?b)),
       fst (snd (snd (?bezout ?a ?b))),
       fst (snd (snd (snd (?bezout ?a ?b)))),
       snd (snd (snd (snd (?bezout ?a ?b)))))",
     template_implication
      ([template_predicate
         (template_app (template_hole 13, template_var 2))],
       template_equation
        (template_app
          (template_app (template_var 2, template_var 1), template_var 0),
         template_app
          (template_app
            (template_hole 11,
             template_app
              (template_hole 10,
               template_app
                (template_app (template_var 2, template_var 1),
                 template_var 0))),
           template_app
            (template_app
              (template_hole 9,
               template_app
                (template_hole 8,
                 template_app
                  (template_hole 7,
                   template_app
                    (template_app (template_var 2, template_var 1),
                     template_var 0)))),
             template_app
              (template_app
                (template_hole 6,
                 template_app
                  (template_hole 5,
                   template_app
                    (template_hole 4,
                     template_app
                      (template_hole 7,
                       template_app
                        (template_app (template_var 2, template_var 1),
                         template_var 0))))),
               template_app
                (template_app
                  (template_hole 3,
                   template_app
                    (template_hole 2,
                     template_app
                      (template_hole 1,
                       template_app
                        (template_hole 4,
                         template_app
                          (template_hole 7,
                           template_app
                            (template_app (template_var 2, template_var 1),
                             template_var 0)))))),
                 template_app
                  (template_hole 0,
                   template_app
                    (template_hole 1,
                     template_app
                      (template_hole 4,
                       template_app
                        (template_hole 7,
                         template_app
                          (template_app (template_var 2, template_var 1),
                           template_var 0)))))))))))),
    ("Diagonal_To_Smith.diagonal_to_Smith_row_i_dvd_jj",
     "[| is_bezout_ext ?bezout;
         to_nat ?a : {?i..<min (nrows ?A) (ncols ?A)};
         to_nat ?a = to_nat ?b |]
      ==> Diagonal_to_Smith_row_i ?A ?i ?bezout $ from_nat ?i $
          from_nat ?i dvd
          Diagonal_to_Smith_row_i ?A ?i ?bezout $ ?a $ ?b",
     template_implication
      ([template_predicate
         (template_app (template_hole 14, template_var 4)),
        template_predicate
         (
            template_app
             (template_app
               (template_hole 13,
                template_app (template_hole 12, template_var 3)),
              template_app
               (template_app (template_hole 11, template_var 2),
                template_app
                 (template_app
                   (template_hole 10,
                    template_app (template_hole 9, template_var 1)),
                  template_app (template_hole 8, template_var 1))))
            ),
        template_equation
         (template_app (template_hole 12, template_var 3),
          template_app (template_hole 6, template_var 0))],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 5,
               template_app
                (template_app
                  (template_hole 4,
                   template_app
                    (template_app
                      (template_hole 3,
                       template_app
                        (template_app
                          (template_app (template_hole 2, template_var 1),
                           template_var 2),
                         template_var 4)),
                     template_app (template_hole 1, template_var 2))),
                 template_app (template_hole 0, template_var 2))),
             template_app
              (template_app
                (template_hole 4,
                 template_app
                  (template_app
                    (template_hole 3,
                     template_app
                      (template_app
                        (template_app (template_hole 2, template_var 1),
                         template_var 2),
                       template_var 4)),
                   template_var 3)),
               template_var 0))
           ))),
    ("Diagonal_To_Smith.diagonal_step_code",
     "($) (diagonal_step_row ?A ?i ?j ?c ?v ?a) =
      (%b. if ?a = from_nat ?i & b = from_nat ?i then ?c
           else if ?a = from_nat ?j & b = from_nat ?j
                then ?v * ?A $ from_nat ?j $ from_nat ?j else ?A $ ?a $ b)",
     template_equation
      (template_app
        (template_hole 9,
         template_app
          (template_app
            (template_app
              (template_app
                (template_app
                  (template_app (template_hole 8, template_var 5),
                   template_var 4),
                 template_var 3),
               template_var 2),
             template_var 1),
           template_var 0)),
       t_empty)),
    ("Diagonal_To_Smith.diagonal_to_Smith_i_preserves_previous",
     "[| is_bezout_ext ?bezout; ?i < min (nrows ?A) (ncols ?A);
         to_nat ?a ~= to_nat ?b;
         ALL x. x : set ?xs --> x < min (nrows ?A) (ncols ?A) |]
      ==> diagonal_to_Smith_i ?xs ?A ?i ?bezout $ ?a $ ?b = ?A $ ?a $ ?b",
     template_implication
      ([template_predicate
         (template_app (template_hole 16, template_var 5)),
        template_inequation
         (less_than, template_var 4,
          template_app
           (template_app
             (template_hole 14,
              template_app (template_hole 13, template_var 3)),
            template_app (template_hole 12, template_var 3))),
        template_negation
         (
            template_equation
             (template_app (template_hole 9, template_var 2),
              template_app (template_hole 8, template_var 1))
            ),
        template_predicate (template_app (template_hole 7, t_empty))],
       template_equation
        (template_app
          (template_app
            (template_hole 2,
             template_app
              (template_app
                (template_hole 1,
                 template_app
                  (template_app
                    (template_app
                      (template_app (template_hole 0, template_var 0),
                       template_var 3),
                     template_var 4),
                   template_var 5)),
               template_var 2)),
           template_var 1),
         template_app
          (template_app
            (template_hole 2,
             template_app
              (template_app (template_hole 1, template_var 3),
               template_var 2)),
           template_var 1)))),
    ("Diagonal_To_Smith.diagonal_to_Smith_aux_dvd",
     "[| is_bezout_ext ?bezout; to_nat ?a = to_nat ?b; ?c < ?k;
         ?c <= to_nat ?a; ?k < min (nrows ?A) (ncols ?A) |]
      ==> diagonal_to_Smith_aux ?A [0..<?k] ?bezout $ from_nat ?c $
          from_nat ?c dvd
          diagonal_to_Smith_aux ?A [0..<?k] ?bezout $ ?a $ ?b",
     template_implication
      ([template_predicate
         (template_app (template_hole 16, template_var 5)),
        template_equation
         (template_app (template_hole 14, template_var 4),
          template_app (template_hole 13, template_var 3)),
        template_inequation (less_than, template_var 2, template_var 1),
        template_inequation
         (less_equals, template_var 2,
          template_app (template_hole 14, template_var 4)),
        template_inequation
         (less_than, template_var 1,
          template_app
           (template_app
             (template_hole 10,
              template_app (template_hole 9, template_var 0)),
            template_app (template_hole 8, template_var 0)))],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 7,
               template_app
                (template_app
                  (template_hole 6,
                   template_app
                    (template_app
                      (template_hole 5,
                       template_app
                        (template_app
                          (template_app (template_hole 4, template_var 0),
                           template_app
                            (template_app
                              (template_hole 3, template_hole 2),
                             template_var 1)),
                         template_var 5)),
                     template_app (template_hole 1, template_var 2))),
                 template_app (template_hole 0, template_var 2))),
             template_app
              (template_app
                (template_hole 6,
                 template_app
                  (template_app
                    (template_hole 5,
                     template_app
                      (template_app
                        (template_app (template_hole 4, template_var 0),
                         template_app
                          (template_app (template_hole 3, template_hole 2),
                           template_var 1)),
                       template_var 5)),
                   template_var 4)),
               template_var 3))
           ))),
    ("Diagonal_To_Smith.Diagonal_to_Smith_row_i_PQ_eq",
     "[| ?P ** ?A ** ?Q = ?B; invertible ?P; invertible ?Q;
         is_bezout_ext ?bezout;
         (?P', ?B', ?Q') =
         Diagonal_to_Smith_row_i_PQ ?i ?bezout (?P, ?B, ?Q);
         isDiagonal ?B; ?i < min (nrows ?A) (ncols ?A) |]
      ==> ?B' = Diagonal_to_Smith_row_i ?B ?i ?bezout",
     template_implication
      ([template_equation
         (template_app
           (template_app
             (template_hole 14,
              template_app
               (template_app (template_hole 13, template_var 8),
                template_var 7)),
            template_var 6),
          template_var 5),
        template_predicate
         (template_app (template_hole 12, template_var 8)),
        template_predicate
         (template_app (template_hole 11, template_var 6)),
        template_predicate
         (template_app (template_hole 10, template_var 4)),
        template_equation
         (template_app
           (template_app (template_hole 8, template_var 3),
            template_app
             (template_app (template_hole 7, template_var 2),
              template_var 1)),
          template_app
           (template_app
             (template_app (template_hole 6, template_var 0),
              template_var 4),
            template_app
             (template_app (template_hole 8, template_var 8),
              template_app
               (template_app (template_hole 7, template_var 5),
                template_var 6)))),
        template_predicate (template_app (template_hole 5, template_var 5)),
        template_inequation
         (less_than, template_var 0,
          template_app
           (template_app
             (template_hole 3,
              template_app (template_hole 2, template_var 7)),
            template_app (template_hole 1, template_var 7)))],
       template_equation
        (template_var 2,
         template_app
          (template_app
            (template_app (template_hole 0, template_var 5),
             template_var 0),
           template_var 4)))),
    ("Diagonal_To_Smith.diagonal_to_Smith_row_i_preserves_previous_diagonal",
     "[| is_bezout_ext ?bezout; ?i < min (nrows ?A) (ncols ?A);
         to_nat ?a ~: set [?i + 1..<min (nrows ?A) (ncols ?A)];
         to_nat ?a = to_nat ?b; to_nat ?a ~= ?i |]
      ==> Diagonal_to_Smith_row_i ?A ?i ?bezout $ ?a $ ?b = ?A $ ?a $ ?b",
     template_implication
      ([template_predicate
         (template_app (template_hole 17, template_var 4)),
        template_inequation
         (less_than, template_var 3,
          template_app
           (template_app
             (template_hole 15,
              template_app (template_hole 14, template_var 2)),
            template_app (template_hole 13, template_var 2))),
        template_negation
         (
            template_predicate
             (
                template_app
                 (template_app
                   (template_hole 11,
                    template_app (template_hole 10, template_var 1)),
                  template_app
                   (template_hole 9,
                    template_app
                     (template_app
                       (template_hole 8,
                        template_app
                         (template_app (template_hole 7, template_var 3),
                          template_hole 6)),
                      template_app
                       (template_app
                         (template_hole 15,
                          template_app (template_hole 14, template_var 2)),
                        template_app (template_hole 13, template_var 2)))))
                )
            ),
        template_equation
         (template_app (template_hole 10, template_var 1),
          template_app (template_hole 4, template_var 0)),
        template_negation
         (
            template_equation
             (template_app (template_hole 10, template_var 1),
              template_var 3)
            )],
       template_equation
        (template_app
          (template_app
            (template_hole 2,
             template_app
              (template_app
                (template_hole 1,
                 template_app
                  (template_app
                    (template_app (template_hole 0, template_var 2),
                     template_var 3),
                   template_var 4)),
               template_var 1)),
           template_var 0),
         template_app
          (template_app
            (template_hole 2,
             template_app
              (template_app (template_hole 1, template_var 2),
               template_var 1)),
           template_var 0)))),
    ("Diagonal_To_Smith.diagonal_step_preserves",
     "[| ?a ~= ?i; ?a ~= ?j; ?a < min (nrows ?A) (ncols ?A);
         ?i < min (nrows ?A) (ncols ?A); ?j < min (nrows ?A) (ncols ?A) |]
      ==> diagonal_step ?A ?i ?j ?d ?v $ from_nat ?a $ from_nat ?b =
          ?A $ from_nat ?a $ from_nat ?b",
     template_implication
      ([template_negation
         (template_equation (template_var 6, template_var 5)),
        template_negation
         (template_equation (template_var 6, template_var 4)),
        template_inequation
         (less_than, template_var 6,
          template_app
           (template_app
             (template_hole 8,
              template_app (template_hole 7, template_var 3)),
            template_app (template_hole 6, template_var 3))),
        template_inequation
         (less_than, template_var 5,
          template_app
           (template_app
             (template_hole 8,
              template_app (template_hole 7, template_var 3)),
            template_app (template_hole 6, template_var 3))),
        template_inequation
         (less_than, template_var 4,
          template_app
           (template_app
             (template_hole 8,
              template_app (template_hole 7, template_var 3)),
            template_app (template_hole 6, template_var 3)))],
       template_equation
        (template_app
          (template_app
            (template_hole 4,
             template_app
              (template_app
                (template_hole 3,
                 template_app
                  (template_app
                    (template_app
                      (template_app
                        (template_app (template_hole 2, template_var 3),
                         template_var 5),
                       template_var 4),
                     template_var 2),
                   template_var 1)),
               template_app (template_hole 1, template_var 6))),
           template_app (template_hole 0, template_var 0)),
         template_app
          (template_app
            (template_hole 4,
             template_app
              (template_app (template_hole 3, template_var 3),
               template_app (template_hole 1, template_var 6))),
           template_app (template_hole 0, template_var 0))))),
    ("Diagonal_To_Smith.diagonal_step_PQ_PA",
     "[| (?P, ?Q) = diagonal_step_PQ ?A ?i ?k ?bezout;
         (?p, ?q, ?u, ?v, ?d) =
         ?bezout (?A $ from_nat ?i $ from_nat ?i)
          (?A $ from_nat ?k $ from_nat ?k) |]
      ==> ?P ** ?A =
          row_add
           (interchange_rows (row_add ?A (from_nat ?k) (from_nat ?i) ?p)
             (from_nat ?i) (from_nat ?k))
           (from_nat ?k) (from_nat ?i) (- ?v)",
     template_implication
      ([template_equation
         (template_app
           (template_app (template_hole 15, template_var 10),
            template_var 9),
          template_app
           (template_app
             (template_app
               (template_app (template_hole 14, template_var 8),
                template_var 7),
              template_var 6),
            template_var 5)),
        template_equation
         (template_app
           (template_app (template_hole 12, template_var 4),
            template_app
             (template_app (template_hole 11, template_var 3),
              template_app
               (template_app (template_hole 10, template_var 2),
                template_app
                 (template_app (template_hole 9, template_var 1),
                  template_var 0)))),
          template_app
           (template_app
             (template_var 5,
              template_app
               (template_app
                 (template_hole 8,
                  template_app
                   (template_app (template_hole 7, template_var 8),
                    template_app (template_hole 6, template_var 7))),
                template_app (template_hole 5, template_var 7))),
            template_app
             (template_app
               (template_hole 8,
                template_app
                 (template_app (template_hole 7, template_var 8),
                  template_app (template_hole 6, template_var 6))),
              template_app (template_hole 5, template_var 6))))],
       template_equation
        (template_app
          (template_app (template_hole 3, template_var 10), template_var 8),
         template_app
          (template_app
            (template_app
              (template_app
                (template_hole 2,
                 template_app
                  (template_app
                    (template_app
                      (template_hole 1,
                       template_app
                        (template_app
                          (template_app
                            (template_app (template_hole 2, template_var 8),
                             template_app
                              (template_hole 6, template_var 6)),
                           template_app (template_hole 6, template_var 7)),
                         template_var 4)),
                     template_app (template_hole 6, template_var 7)),
                   template_app (template_hole 6, template_var 6))),
               template_app (template_hole 6, template_var 6)),
             template_app (template_hole 6, template_var 7)),
           template_app (template_hole 0, template_var 1))))),
    ("Diagonal_To_Smith.Diagonal_to_Smith_row_i_PQ'",
     "[| ?P ** ?A ** ?Q = ?B; invertible ?P; invertible ?Q;
         is_bezout_ext ?bezout;
         (?P', ?B', ?Q') =
         Diagonal_to_Smith_row_i_PQ ?i ?bezout (?P, ?B, ?Q);
         isDiagonal ?B; ?i < min (nrows ?A) (ncols ?A) |]
      ==> ?B' = ?P' ** ?A ** ?Q' & invertible ?P' & invertible ?Q'",
     template_implication
      ([template_equation
         (template_app
           (template_app
             (template_hole 14,
              template_app
               (template_app (template_hole 13, template_var 8),
                template_var 7)),
            template_var 6),
          template_var 5),
        template_predicate
         (template_app (template_hole 12, template_var 8)),
        template_predicate
         (template_app (template_hole 11, template_var 6)),
        template_predicate
         (template_app (template_hole 10, template_var 4)),
        template_equation
         (template_app
           (template_app (template_hole 8, template_var 3),
            template_app
             (template_app (template_hole 7, template_var 2),
              template_var 1)),
          template_app
           (template_app
             (template_app (template_hole 6, template_var 0),
              template_var 4),
            template_app
             (template_app (template_hole 8, template_var 8),
              template_app
               (template_app (template_hole 7, template_var 5),
                template_var 6)))),
        template_predicate (template_app (template_hole 5, template_var 5)),
        template_inequation
         (less_than, template_var 0,
          template_app
           (template_app
             (template_hole 3,
              template_app (template_hole 2, template_var 7)),
            template_app (template_hole 1, template_var 7)))],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 0,
               template_app
                (template_app (template_hole 15, template_var 2),
                 template_app
                  (template_app
                    (template_hole 14,
                     template_app
                      (template_app (template_hole 13, template_var 3),
                       template_var 7)),
                   template_var 1))),
             template_app
              (template_app
                (template_hole 0,
                 template_app (template_hole 12, template_var 3)),
               template_app (template_hole 11, template_var 1)))
           ))),
    ("Diagonal_To_Smith.diagonal_step_PQ_PAQ'",
     "[| (?P, ?Q) = diagonal_step_PQ ?A ?i ?k ?bezout;
         (?p, ?q, ?u, ?v, ?d) =
         ?bezout (?A $ from_nat ?i $ from_nat ?i)
          (?A $ from_nat ?k $ from_nat ?k) |]
      ==> ?P ** ?A ** ?Q =
          mult_column
           (column_add
             (column_add (?P ** ?A) (from_nat ?i) (from_nat ?k) ?q)
             (from_nat ?k) (from_nat ?i) ?u)
           (from_nat ?k) (- (1::?'a))",
     template_implication
      ([template_equation
         (template_app
           (template_app (template_hole 17, template_var 10),
            template_var 9),
          template_app
           (template_app
             (template_app
               (template_app (template_hole 16, template_var 8),
                template_var 7),
              template_var 6),
            template_var 5)),
        template_equation
         (template_app
           (template_app (template_hole 14, template_var 4),
            template_app
             (template_app (template_hole 13, template_var 3),
              template_app
               (template_app (template_hole 12, template_var 2),
                template_app
                 (template_app (template_hole 11, template_var 1),
                  template_var 0)))),
          template_app
           (template_app
             (template_var 5,
              template_app
               (template_app
                 (template_hole 10,
                  template_app
                   (template_app (template_hole 9, template_var 8),
                    template_app (template_hole 8, template_var 7))),
                template_app (template_hole 7, template_var 7))),
            template_app
             (template_app
               (template_hole 10,
                template_app
                 (template_app (template_hole 9, template_var 8),
                  template_app (template_hole 8, template_var 6))),
              template_app (template_hole 7, template_var 6))))],
       template_equation
        (template_app
          (template_app
            (template_hole 5,
             template_app
              (template_app (template_hole 4, template_var 10),
               template_var 8)),
           template_var 9),
         template_app
          (template_app
            (template_app
              (template_hole 3,
               template_app
                (template_app
                  (template_app
                    (template_app
                      (template_hole 2,
                       template_app
                        (template_app
                          (template_app
                            (template_app
                              (template_hole 2,
                               template_app
                                (template_app
                                  (template_hole 4, template_var 10),
                                 template_var 8)),
                             template_app
                              (template_hole 7, template_var 7)),
                           template_app (template_hole 7, template_var 6)),
                         template_var 3)),
                     template_app (template_hole 7, template_var 6)),
                   template_app (template_hole 7, template_var 7)),
                 template_var 2)),
             template_app (template_hole 7, template_var 6)),
           template_app (template_hole 1, template_hole 0))))),
    ("Diagonal_To_Smith.diagonal_step_PQ_invertible_Q",
     "[| (?P, ?Q) = diagonal_step_PQ ?A ?i ?k ?bezout;
         (?p, ?q, ?u, ?v, ?d) =
         ?bezout (?A $ from_nat ?i $ from_nat ?i)
          (?A $ from_nat ?k $ from_nat ?k);
         ?i ~= ?k; ?i < min (nrows ?A) (ncols ?A);
         ?k < min (nrows ?A) (ncols ?A) |]
      ==> invertible ?Q",
     template_implication
      ([template_equation
         (template_app
           (template_app (template_hole 17, template_var 10),
            template_var 9),
          template_app
           (template_app
             (template_app
               (template_app (template_hole 16, template_var 8),
                template_var 7),
              template_var 6),
            template_var 5)),
        template_equation
         (template_app
           (template_app (template_hole 14, template_var 4),
            template_app
             (template_app (template_hole 13, template_var 3),
              template_app
               (template_app (template_hole 12, template_var 2),
                template_app
                 (template_app (template_hole 11, template_var 1),
                  template_var 0)))),
          template_app
           (template_app
             (template_var 5,
              template_app
               (template_app
                 (template_hole 10,
                  template_app
                   (template_app (template_hole 9, template_var 8),
                    template_app (template_hole 8, template_var 7))),
                template_app (template_hole 7, template_var 7))),
            template_app
             (template_app
               (template_hole 10,
                template_app
                 (template_app (template_hole 9, template_var 8),
                  template_app (template_hole 8, template_var 6))),
              template_app (template_hole 7, template_var 6)))),
        template_negation
         (template_equation (template_var 7, template_var 6)),
        template_inequation
         (less_than, template_var 7,
          template_app
           (template_app
             (template_hole 3,
              template_app (template_hole 2, template_var 8)),
            template_app (template_hole 1, template_var 8))),
        template_inequation
         (less_than, template_var 6,
          template_app
           (template_app
             (template_hole 3,
              template_app (template_hole 2, template_var 8)),
            template_app (template_hole 1, template_var 8)))],
       template_predicate
        (template_app (template_hole 0, template_var 9)))),
    ("Diagonal_To_Smith.diagonal_step_PQ_invertible_P",
     "[| (?P, ?Q) = diagonal_step_PQ ?A ?i ?k ?bezout;
         (?p, ?q, ?u, ?v, ?d) =
         ?bezout (?A $ from_nat ?i $ from_nat ?i)
          (?A $ from_nat ?k $ from_nat ?k);
         ?i ~= ?k; ?i < min (nrows ?A) (ncols ?A);
         ?k < min (nrows ?A) (ncols ?A) |]
      ==> invertible ?P",
     template_implication
      ([template_equation
         (template_app
           (template_app (template_hole 17, template_var 10),
            template_var 9),
          template_app
           (template_app
             (template_app
               (template_app (template_hole 16, template_var 8),
                template_var 7),
              template_var 6),
            template_var 5)),
        template_equation
         (template_app
           (template_app (template_hole 14, template_var 4),
            template_app
             (template_app (template_hole 13, template_var 3),
              template_app
               (template_app (template_hole 12, template_var 2),
                template_app
                 (template_app (template_hole 11, template_var 1),
                  template_var 0)))),
          template_app
           (template_app
             (template_var 5,
              template_app
               (template_app
                 (template_hole 10,
                  template_app
                   (template_app (template_hole 9, template_var 8),
                    template_app (template_hole 8, template_var 7))),
                template_app (template_hole 7, template_var 7))),
            template_app
             (template_app
               (template_hole 10,
                template_app
                 (template_app (template_hole 9, template_var 8),
                  template_app (template_hole 8, template_var 6))),
              template_app (template_hole 7, template_var 6)))),
        template_negation
         (template_equation (template_var 7, template_var 6)),
        template_inequation
         (less_than, template_var 7,
          template_app
           (template_app
             (template_hole 3,
              template_app (template_hole 2, template_var 8)),
            template_app (template_hole 1, template_var 8))),
        template_inequation
         (less_than, template_var 6,
          template_app
           (template_app
             (template_hole 3,
              template_app (template_hole 2, template_var 8)),
            template_app (template_hole 1, template_var 8)))],
       template_predicate
        (template_app (template_hole 0, template_var 10)))),
    ("Diagonal_To_Smith.diagonal_to_Smith_i_preserves_previous_diagonal",
     "[| is_bezout_ext ?bezout; ?i < min (nrows ?A) (ncols ?A);
         to_nat ?a ~: set ?xs; to_nat ?a = to_nat ?b; to_nat ?a ~= ?i;
         ALL x. x : set ?xs --> x < min (nrows ?A) (ncols ?A) |]
      ==> diagonal_to_Smith_i ?xs ?A ?i ?bezout $ ?a $ ?b = ?A $ ?a $ ?b",
     template_implication
      ([template_predicate
         (template_app (template_hole 16, template_var 5)),
        template_inequation
         (less_than, template_var 4,
          template_app
           (template_app
             (template_hole 14,
              template_app (template_hole 13, template_var 3)),
            template_app (template_hole 12, template_var 3))),
        template_negation
         (
            template_predicate
             (
                template_app
                 (template_app
                   (template_hole 10,
                    template_app (template_hole 9, template_var 2)),
                  template_app (template_hole 8, template_var 1))
                )
            ),
        template_equation
         (template_app (template_hole 9, template_var 2),
          template_app (template_hole 6, template_var 0)),
        template_negation
         (
            template_equation
             (template_app (template_hole 9, template_var 2),
              template_var 4)
            ),
        template_predicate (template_app (template_hole 5, t_empty))],
       template_equation
        (template_app
          (template_app
            (template_hole 2,
             template_app
              (template_app
                (template_hole 1,
                 template_app
                  (template_app
                    (template_app
                      (template_app (template_hole 0, template_var 1),
                       template_var 3),
                     template_var 4),
                   template_var 5)),
               template_var 2)),
           template_var 0),
         template_app
          (template_app
            (template_hole 2,
             template_app
              (template_app (template_hole 1, template_var 3),
               template_var 2)),
           template_var 0)))),
    ("Diagonal_To_Smith.Diagonal_to_Smith_row_i_PQ",
     "[| ?P ** ?A ** ?Q = ?B; invertible ?P; invertible ?Q;
         is_bezout_ext ?bezout;
         (?P', ?B', ?Q') =
         Diagonal_to_Smith_row_i_PQ ?i ?bezout (?P, ?B, ?Q);
         isDiagonal ?B; ?i < min (nrows ?A) (ncols ?A) |]
      ==> ?B' = ?P' ** ?A ** ?Q' &
          invertible ?P' &
          invertible ?Q' & ?B' = Diagonal_to_Smith_row_i ?B ?i ?bezout",
     template_implication
      ([template_equation
         (template_app
           (template_app
             (template_hole 15,
              template_app
               (template_app (template_hole 14, template_var 8),
                template_var 7)),
            template_var 6),
          template_var 5),
        template_predicate
         (template_app (template_hole 13, template_var 8)),
        template_predicate
         (template_app (template_hole 12, template_var 6)),
        template_predicate
         (template_app (template_hole 11, template_var 4)),
        template_equation
         (template_app
           (template_app (template_hole 9, template_var 3),
            template_app
             (template_app (template_hole 8, template_var 2),
              template_var 1)),
          template_app
           (template_app
             (template_app (template_hole 7, template_var 0),
              template_var 4),
            template_app
             (template_app (template_hole 9, template_var 8),
              template_app
               (template_app (template_hole 8, template_var 5),
                template_var 6)))),
        template_predicate (template_app (template_hole 6, template_var 5)),
        template_inequation
         (less_than, template_var 0,
          template_app
           (template_app
             (template_hole 4,
              template_app (template_hole 3, template_var 7)),
            template_app (template_hole 2, template_var 7)))],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 1,
               template_app
                (template_app (template_hole 16, template_var 2),
                 template_app
                  (template_app
                    (template_hole 15,
                     template_app
                      (template_app (template_hole 14, template_var 3),
                       template_var 7)),
                   template_var 1))),
             template_app
              (template_app
                (template_hole 1,
                 template_app (template_hole 13, template_var 3)),
               template_app
                (template_app
                  (template_hole 1,
                   template_app (template_hole 12, template_var 1)),
                 template_app
                  (template_app (template_hole 16, template_var 2),
                   template_app
                    (template_app
                      (template_app (template_hole 0, template_var 5),
                       template_var 0),
                     template_var 4)))))
           ))),
    ("Diagonal_To_Smith.diagonal_to_Smith_aux_PQ",
     "[| ?P ** ?A ** ?Q = ?B; invertible ?P; invertible ?Q;
         is_bezout_ext ?bezout;
         (?P', ?B', ?Q') =
         diagonal_to_Smith_aux_PQ [0..<?k] ?bezout (?P, ?B, ?Q);
         isDiagonal ?B; ?k < min (nrows ?A) (ncols ?A) |]
      ==> ?B' = ?P' ** ?A ** ?Q' &
          invertible ?P' &
          invertible ?Q' & ?B' = diagonal_to_Smith_aux ?B [0..<?k] ?bezout",
     template_implication
      ([template_equation
         (template_app
           (template_app
             (template_hole 17,
              template_app
               (template_app (template_hole 16, template_var 8),
                template_var 7)),
            template_var 6),
          template_var 5),
        template_predicate
         (template_app (template_hole 15, template_var 8)),
        template_predicate
         (template_app (template_hole 14, template_var 6)),
        template_predicate
         (template_app (template_hole 13, template_var 4)),
        template_equation
         (template_app
           (template_app (template_hole 11, template_var 3),
            template_app
             (template_app (template_hole 10, template_var 2),
              template_var 1)),
          template_app
           (template_app
             (template_app
               (template_hole 9,
                template_app
                 (template_app (template_hole 8, template_hole 7),
                  template_var 0)),
              template_var 4),
            template_app
             (template_app (template_hole 11, template_var 8),
              template_app
               (template_app (template_hole 10, template_var 5),
                template_var 6)))),
        template_predicate (template_app (template_hole 6, template_var 5)),
        template_inequation
         (less_than, template_var 0,
          template_app
           (template_app
             (template_hole 4,
              template_app (template_hole 3, template_var 7)),
            template_app (template_hole 2, template_var 7)))],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 1,
               template_app
                (template_app (template_hole 18, template_var 2),
                 template_app
                  (template_app
                    (template_hole 17,
                     template_app
                      (template_app (template_hole 16, template_var 3),
                       template_var 7)),
                   template_var 1))),
             template_app
              (template_app
                (template_hole 1,
                 template_app (template_hole 15, template_var 3)),
               template_app
                (template_app
                  (template_hole 1,
                   template_app (template_hole 14, template_var 1)),
                 template_app
                  (template_app (template_hole 18, template_var 2),
                   template_app
                    (template_app
                      (template_app (template_hole 0, template_var 5),
                       template_app
                        (template_app (template_hole 8, template_hole 7),
                         template_var 0)),
                     template_var 4)))))
           ))),
    ("Diagonal_To_Smith.diagonal_to_Smith_i_dvd_jj",
     "[| is_bezout_ext ?bezout; ?i < min (nrows ?A) (ncols ?A);
         ALL x. x : set ?xs --> x < min (nrows ?A) (ncols ?A);
         to_nat ?a : set ?xs; to_nat ?a = to_nat ?b; to_nat ?a ~= ?i;
         distinct ?xs |]
      ==> diagonal_to_Smith_i ?xs ?A ?i ?bezout $ from_nat ?i $
          from_nat ?i dvd
          diagonal_to_Smith_i ?xs ?A ?i ?bezout $ ?a $ ?b",
     template_implication
      ([template_predicate
         (template_app (template_hole 19, template_var 5)),
        template_inequation
         (less_than, template_var 4,
          template_app
           (template_app
             (template_hole 17,
              template_app (template_hole 16, template_var 3)),
            template_app (template_hole 15, template_var 3))),
        template_predicate (template_app (template_hole 14, t_empty)),
        template_predicate
         (
            template_app
             (template_app
               (template_hole 12,
                template_app (template_hole 10, template_var 1)),
              template_app (template_hole 11, template_var 2))
            ),
        template_equation
         (template_app (template_hole 10, template_var 1),
          template_app (template_hole 8, template_var 0)),
        template_negation
         (
            template_equation
             (template_app (template_hole 10, template_var 1),
              template_var 4)
            ),
        template_predicate
         (template_app (template_hole 6, template_var 2))],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 5,
               template_app
                (template_app
                  (template_hole 4,
                   template_app
                    (template_app
                      (template_hole 3,
                       template_app
                        (template_app
                          (template_app
                            (template_app (template_hole 2, template_var 2),
                             template_var 3),
                           template_var 4),
                         template_var 5)),
                     template_app (template_hole 1, template_var 4))),
                 template_app (template_hole 0, template_var 4))),
             template_app
              (template_app
                (template_hole 4,
                 template_app
                  (template_app
                    (template_hole 3,
                     template_app
                      (template_app
                        (template_app
                          (template_app (template_hole 2, template_var 2),
                           template_var 3),
                         template_var 4),
                       template_var 5)),
                   template_var 1)),
               template_var 0))
           ))),
    ("Diagonal_To_Smith.diagonal_step_PQ_PAQ",
     "[| (?P, ?Q) = diagonal_step_PQ ?A ?i ?k ?bezout;
         (?p, ?q, ?u, ?v, ?d) =
         ?bezout (?A $ from_nat ?i $ from_nat ?i)
          (?A $ from_nat ?k $ from_nat ?k) |]
      ==> ?P ** ?A ** ?Q =
          mult_column
           (column_add
             (column_add
               (row_add
                 (interchange_rows
                   (row_add ?A (from_nat ?k) (from_nat ?i) ?p) (from_nat ?i)
                   (from_nat ?k))
                 (from_nat ?k) (from_nat ?i) (- ?v))
               (from_nat ?i) (from_nat ?k) ?q)
             (from_nat ?k) (from_nat ?i) ?u)
           (from_nat ?k) (- (1::?'a))",
     template_implication
      ([template_equation
         (template_app
           (template_app (template_hole 19, template_var 10),
            template_var 9),
          template_app
           (template_app
             (template_app
               (template_app (template_hole 18, template_var 8),
                template_var 7),
              template_var 6),
            template_var 5)),
        template_equation
         (template_app
           (template_app (template_hole 16, template_var 4),
            template_app
             (template_app (template_hole 15, template_var 3),
              template_app
               (template_app (template_hole 14, template_var 2),
                template_app
                 (template_app (template_hole 13, template_var 1),
                  template_var 0)))),
          template_app
           (template_app
             (template_var 5,
              template_app
               (template_app
                 (template_hole 12,
                  template_app
                   (template_app (template_hole 11, template_var 8),
                    template_app (template_hole 10, template_var 7))),
                template_app (template_hole 9, template_var 7))),
            template_app
             (template_app
               (template_hole 12,
                template_app
                 (template_app (template_hole 11, template_var 8),
                  template_app (template_hole 10, template_var 6))),
              template_app (template_hole 9, template_var 6))))],
       template_equation
        (template_app
          (template_app
            (template_hole 7,
             template_app
              (template_app (template_hole 6, template_var 10),
               template_var 8)),
           template_var 9),
         template_app
          (template_app
            (template_app
              (template_hole 5,
               template_app
                (template_app
                  (template_app
                    (template_app
                      (template_hole 4,
                       template_app
                        (template_app
                          (template_app
                            (template_app
                              (template_hole 4,
                               template_app
                                (template_app
                                  (template_app
                                    (template_app
(template_hole 3,
 template_app
  (template_app
    (template_app
      (template_hole 2,
       template_app
        (template_app
          (template_app
            (template_app (template_hole 3, template_var 8),
             template_app (template_hole 10, template_var 6)),
           template_app (template_hole 10, template_var 7)),
         template_var 4)),
     template_app (template_hole 10, template_var 7)),
   template_app (template_hole 10, template_var 6))),
                                     template_app
(template_hole 10, template_var 6)),
                                   template_app
                                    (template_hole 10, template_var 7)),
                                 template_app
                                  (template_hole 1, template_var 1))),
                             template_app
                              (template_hole 9, template_var 7)),
                           template_app (template_hole 9, template_var 6)),
                         template_var 3)),
                     template_app (template_hole 9, template_var 6)),
                   template_app (template_hole 9, template_var 7)),
                 template_var 2)),
             template_app (template_hole 9, template_var 6)),
           template_app (template_hole 1, template_hole 0))))),
    ("Diagonal_To_Smith.diagonal_to_Smith_i_PQ_eq",
     "[| ?P ** ?A ** ?Q = ?B; invertible ?P; invertible ?Q;
         is_bezout_ext ?bezout;
         (?P', ?B', ?Q') =
         diagonal_to_Smith_i_PQ ?xs ?i ?bezout (?P, ?B, ?Q);
         ALL x. x : set ?xs --> x < min (nrows ?A) (ncols ?A);
         isDiagonal ?B; ?i ~: set ?xs; ?i < min (nrows ?A) (ncols ?A) |]
      ==> ?B' = diagonal_to_Smith_i ?xs ?B ?i ?bezout",
     template_implication
      ([template_equation
         (template_app
           (template_app
             (template_hole 19,
              template_app
               (template_app (template_hole 18, template_var 9),
                template_var 8)),
            template_var 7),
          template_var 6),
        template_predicate
         (template_app (template_hole 17, template_var 9)),
        template_predicate
         (template_app (template_hole 16, template_var 7)),
        template_predicate
         (template_app (template_hole 15, template_var 5)),
        template_equation
         (template_app
           (template_app (template_hole 13, template_var 4),
            template_app
             (template_app (template_hole 12, template_var 3),
              template_var 2)),
          template_app
           (template_app
             (template_app
               (template_app (template_hole 11, template_var 1),
                template_var 0),
              template_var 5),
            template_app
             (template_app (template_hole 13, template_var 9),
              template_app
               (template_app (template_hole 12, template_var 6),
                template_var 7)))),
        template_predicate (template_app (template_hole 10, t_empty)),
        template_predicate (template_app (template_hole 2, template_var 6)),
        template_negation
         (
            template_predicate
             (
                template_app
                 (template_app (template_hole 8, template_var 0),
                  template_app (template_hole 7, template_var 1))
                )
            ),
        template_inequation
         (less_than, template_var 0,
          template_app
           (template_app
             (template_hole 5,
              template_app (template_hole 4, template_var 8)),
            template_app (template_hole 3, template_var 8)))],
       template_equation
        (template_var 3,
         template_app
          (template_app
            (template_app
              (template_app (template_hole 0, template_var 1),
               template_var 6),
             template_var 0),
           template_var 5)))),
    ("Diagonal_To_Smith.diagonal_step_PQ",
     "[| (?P, ?Q) = diagonal_step_PQ ?A ?i ?k ?bezout;
         (?p, ?q, ?u, ?v, ?d) =
         ?bezout (?A $ from_nat ?i $ from_nat ?i)
          (?A $ from_nat ?k $ from_nat ?k);
         ?i < min (nrows ?A) (ncols ?A); ?k < min (nrows ?A) (ncols ?A);
         ?i ~= ?k; is_bezout_ext ?bezout; isDiagonal ?A |]
      ==> diagonal_step ?A ?i ?k ?d ?v = ?P ** ?A ** ?Q",
     template_implication
      ([template_equation
         (template_app
           (template_app (template_hole 22, template_var 10),
            template_var 9),
          template_app
           (template_app
             (template_app
               (template_app (template_hole 21, template_var 8),
                template_var 7),
              template_var 6),
            template_var 5)),
        template_equation
         (template_app
           (template_app (template_hole 19, template_var 4),
            template_app
             (template_app (template_hole 18, template_var 3),
              template_app
               (template_app (template_hole 17, template_var 2),
                template_app
                 (template_app (template_hole 16, template_var 1),
                  template_var 0)))),
          template_app
           (template_app
             (template_var 5,
              template_app
               (template_app
                 (template_hole 15,
                  template_app
                   (template_app (template_hole 14, template_var 8),
                    template_app (template_hole 13, template_var 7))),
                template_app (template_hole 12, template_var 7))),
            template_app
             (template_app
               (template_hole 15,
                template_app
                 (template_app (template_hole 14, template_var 8),
                  template_app (template_hole 13, template_var 6))),
              template_app (template_hole 12, template_var 6)))),
        template_inequation
         (less_than, template_var 7,
          template_app
           (template_app
             (template_hole 10,
              template_app (template_hole 9, template_var 8)),
            template_app (template_hole 8, template_var 8))),
        template_inequation
         (less_than, template_var 6,
          template_app
           (template_app
             (template_hole 10,
              template_app (template_hole 9, template_var 8)),
            template_app (template_hole 8, template_var 8))),
        template_negation
         (template_equation (template_var 7, template_var 6)),
        template_predicate (template_app (template_hole 5, template_var 5)),
        template_predicate
         (template_app (template_hole 4, template_var 8))],
       template_equation
        (template_app
          (template_app
            (template_app
              (template_app
                (template_app (template_hole 2, template_var 8),
                 template_var 7),
               template_var 6),
             template_var 0),
           template_var 1),
         template_app
          (template_app
            (template_hole 1,
             template_app
              (template_app (template_hole 0, template_var 10),
               template_var 8)),
           template_var 9)))),
    ("Diagonal_To_Smith.diagonal_step_dvd1",
     "is_bezout_ext ?bezout ==>
      diagonal_step ?A ?i ?j
       (case ?bezout (?A $ from_nat ?i $ from_nat ?i)
              (?A $ from_nat ?j $ from_nat ?j) of
        (p, q, u, v, d) => d)
       (case ?bezout (?A $ from_nat ?i $ from_nat ?i)
              (?A $ from_nat ?j $ from_nat ?j) of
        (p, q, u, v, d) => v) $
      from_nat ?i $
      from_nat ?i dvd
      ?A $ from_nat ?i $ from_nat ?i",
     template_implication
      ([template_predicate
         (template_app (template_hole 10, template_var 3))],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 9,
               template_app
                (template_app
                  (template_hole 8,
                   template_app
                    (template_app
                      (template_hole 7,
                       template_app
                        (template_app
                          (template_app
                            (template_app
                              (template_app
                                (template_hole 6, template_var 2),
                               template_var 1),
                             template_var 0),
                           template_app
                            (template_app (template_hole 5, t_empty),
                             template_app
                              (template_app
                                (template_var 3,
                                 template_app
                                  (template_app
                                    (template_hole 8,
                                     template_app
(template_app (template_hole 7, template_var 2),
 template_app (template_hole 1, template_var 1))),
                                   template_app
                                    (template_hole 0, template_var 1))),
                               template_app
                                (template_app
                                  (template_hole 8,
                                   template_app
                                    (template_app
(template_hole 7, template_var 2),
                                     template_app
(template_hole 1, template_var 0))),
                                 template_app
                                  (template_hole 0, template_var 0))))),
                         template_app
                          (template_app (template_hole 5, t_empty),
                           template_app
                            (template_app
                              (template_var 3,
                               template_app
                                (template_app
                                  (template_hole 8,
                                   template_app
                                    (template_app
(template_hole 7, template_var 2),
                                     template_app
(template_hole 1, template_var 1))),
                                 template_app
                                  (template_hole 0, template_var 1))),
                             template_app
                              (template_app
                                (template_hole 8,
                                 template_app
                                  (template_app
                                    (template_hole 7, template_var 2),
                                   template_app
                                    (template_hole 1, template_var 0))),
                               template_app
                                (template_hole 0, template_var 0)))))),
                     template_app (template_hole 1, template_var 1))),
                 template_app (template_hole 0, template_var 1))),
             template_app
              (template_app
                (template_hole 8,
                 template_app
                  (template_app (template_hole 7, template_var 2),
                   template_app (template_hole 1, template_var 1))),
               template_app (template_hole 0, template_var 1)))
           ))),
    ("Diagonal_To_Smith.diagonal_step_dvd2",
     "is_bezout_ext ?bezout ==>
      diagonal_step ?A ?i ?j
       (case ?bezout (?A $ from_nat ?i $ from_nat ?i)
              (?A $ from_nat ?j $ from_nat ?j) of
        (p, q, u, v, d) => d)
       (case ?bezout (?A $ from_nat ?i $ from_nat ?i)
              (?A $ from_nat ?j $ from_nat ?j) of
        (p, q, u, v, d) => v) $
      from_nat ?i $
      from_nat ?i dvd
      ?A $ from_nat ?j $ from_nat ?j",
     template_implication
      ([template_predicate
         (template_app (template_hole 10, template_var 3))],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 9,
               template_app
                (template_app
                  (template_hole 8,
                   template_app
                    (template_app
                      (template_hole 7,
                       template_app
                        (template_app
                          (template_app
                            (template_app
                              (template_app
                                (template_hole 6, template_var 2),
                               template_var 1),
                             template_var 0),
                           template_app
                            (template_app (template_hole 5, t_empty),
                             template_app
                              (template_app
                                (template_var 3,
                                 template_app
                                  (template_app
                                    (template_hole 8,
                                     template_app
(template_app (template_hole 7, template_var 2),
 template_app (template_hole 1, template_var 1))),
                                   template_app
                                    (template_hole 0, template_var 1))),
                               template_app
                                (template_app
                                  (template_hole 8,
                                   template_app
                                    (template_app
(template_hole 7, template_var 2),
                                     template_app
(template_hole 1, template_var 0))),
                                 template_app
                                  (template_hole 0, template_var 0))))),
                         template_app
                          (template_app (template_hole 5, t_empty),
                           template_app
                            (template_app
                              (template_var 3,
                               template_app
                                (template_app
                                  (template_hole 8,
                                   template_app
                                    (template_app
(template_hole 7, template_var 2),
                                     template_app
(template_hole 1, template_var 1))),
                                 template_app
                                  (template_hole 0, template_var 1))),
                             template_app
                              (template_app
                                (template_hole 8,
                                 template_app
                                  (template_app
                                    (template_hole 7, template_var 2),
                                   template_app
                                    (template_hole 1, template_var 0))),
                               template_app
                                (template_hole 0, template_var 0)))))),
                     template_app (template_hole 1, template_var 1))),
                 template_app (template_hole 0, template_var 1))),
             template_app
              (template_app
                (template_hole 8,
                 template_app
                  (template_app (template_hole 7, template_var 2),
                   template_app (template_hole 1, template_var 0))),
               template_app (template_hole 0, template_var 0)))
           ))),
    ("Diagonal_To_Smith.diagonal_to_Smith_row_i_dvd_jj'",
     "[| is_bezout_ext ?bezout;
         to_nat ?a : {?i..<min (nrows ?A) (ncols ?A)};
         to_nat ?a = to_nat ?b; ?c <= ?i;
         ALL a b.
            to_nat a : set [?i..<min (nrows ?A) (ncols ?A)] &
            to_nat a = to_nat b -->
            ?A $ from_nat ?c $ from_nat ?c dvd ?A $ a $ b |]
      ==> Diagonal_to_Smith_row_i ?A ?i ?bezout $ from_nat ?c $
          from_nat ?c dvd
          Diagonal_to_Smith_row_i ?A ?i ?bezout $ ?a $ ?b",
     template_implication
      ([template_predicate
         (template_app (template_hole 21, template_var 5)),
        template_predicate
         (
            template_app
             (template_app
               (template_hole 20,
                template_app (template_hole 19, template_var 4)),
              template_app
               (template_app (template_hole 18, template_var 3),
                template_app
                 (template_app
                   (template_hole 17,
                    template_app (template_hole 16, template_var 2)),
                  template_app (template_hole 15, template_var 2))))
            ),
        template_equation
         (template_app (template_hole 19, template_var 4),
          template_app (template_hole 13, template_var 1)),
        template_inequation (less_equals, template_var 0, template_var 3),
        template_predicate (template_app (template_hole 11, t_empty))],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 5,
               template_app
                (template_app
                  (template_hole 4,
                   template_app
                    (template_app
                      (template_hole 3,
                       template_app
                        (template_app
                          (template_app (template_hole 0, template_var 2),
                           template_var 3),
                         template_var 5)),
                     template_app (template_hole 2, template_var 0))),
                 template_app (template_hole 1, template_var 0))),
             template_app
              (template_app
                (template_hole 4,
                 template_app
                  (template_app
                    (template_hole 3,
                     template_app
                      (template_app
                        (template_app (template_hole 0, template_var 2),
                         template_var 3),
                       template_var 5)),
                   template_var 4)),
               template_var 1))
           ))),
    ("Diagonal_To_Smith.diagonal_to_Smith_i_PQ'",
     "[| ?P ** ?A ** ?Q = ?B; invertible ?P; invertible ?Q;
         is_bezout_ext ?bezout;
         (?P', ?B', ?Q') =
         diagonal_to_Smith_i_PQ ?xs ?i ?bezout (?P, ?B, ?Q);
         ALL x. x : set ?xs --> x < min (nrows ?A) (ncols ?A);
         isDiagonal ?B; ?i ~: set ?xs; ?i < min (nrows ?A) (ncols ?A) |]
      ==> ?B' = ?P' ** ?A ** ?Q' & invertible ?P' & invertible ?Q'",
     template_implication
      ([template_equation
         (template_app
           (template_app
             (template_hole 19,
              template_app
               (template_app (template_hole 18, template_var 9),
                template_var 8)),
            template_var 7),
          template_var 6),
        template_predicate
         (template_app (template_hole 17, template_var 9)),
        template_predicate
         (template_app (template_hole 16, template_var 7)),
        template_predicate
         (template_app (template_hole 15, template_var 5)),
        template_equation
         (template_app
           (template_app (template_hole 13, template_var 4),
            template_app
             (template_app (template_hole 12, template_var 3),
              template_var 2)),
          template_app
           (template_app
             (template_app
               (template_app (template_hole 11, template_var 1),
                template_var 0),
              template_var 5),
            template_app
             (template_app (template_hole 13, template_var 9),
              template_app
               (template_app (template_hole 12, template_var 6),
                template_var 7)))),
        template_predicate (template_app (template_hole 10, t_empty)),
        template_predicate (template_app (template_hole 2, template_var 6)),
        template_negation
         (
            template_predicate
             (
                template_app
                 (template_app (template_hole 8, template_var 0),
                  template_app (template_hole 7, template_var 1))
                )
            ),
        template_inequation
         (less_than, template_var 0,
          template_app
           (template_app
             (template_hole 5,
              template_app (template_hole 4, template_var 8)),
            template_app (template_hole 3, template_var 8)))],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 0,
               template_app
                (template_app (template_hole 20, template_var 3),
                 template_app
                  (template_app
                    (template_hole 19,
                     template_app
                      (template_app (template_hole 18, template_var 4),
                       template_var 8)),
                   template_var 2))),
             template_app
              (template_app
                (template_hole 0,
                 template_app (template_hole 17, template_var 4)),
               template_app (template_hole 16, template_var 2)))
           ))),
    ("Diagonal_To_Smith.diagonal_to_Smith_i_PQ",
     "[| ?P ** ?A ** ?Q = ?B; invertible ?P; invertible ?Q;
         is_bezout_ext ?bezout;
         (?P', ?B', ?Q') =
         diagonal_to_Smith_i_PQ ?xs ?i ?bezout (?P, ?B, ?Q);
         ALL x. x : set ?xs --> x < min (nrows ?A) (ncols ?A);
         isDiagonal ?B; ?i ~: set ?xs; ?i < min (nrows ?A) (ncols ?A) |]
      ==> ?B' = ?P' ** ?A ** ?Q' &
          invertible ?P' &
          invertible ?Q' & ?B' = diagonal_to_Smith_i ?xs ?B ?i ?bezout",
     template_implication
      ([template_equation
         (template_app
           (template_app
             (template_hole 20,
              template_app
               (template_app (template_hole 19, template_var 9),
                template_var 8)),
            template_var 7),
          template_var 6),
        template_predicate
         (template_app (template_hole 18, template_var 9)),
        template_predicate
         (template_app (template_hole 17, template_var 7)),
        template_predicate
         (template_app (template_hole 16, template_var 5)),
        template_equation
         (template_app
           (template_app (template_hole 14, template_var 4),
            template_app
             (template_app (template_hole 13, template_var 3),
              template_var 2)),
          template_app
           (template_app
             (template_app
               (template_app (template_hole 12, template_var 1),
                template_var 0),
              template_var 5),
            template_app
             (template_app (template_hole 14, template_var 9),
              template_app
               (template_app (template_hole 13, template_var 6),
                template_var 7)))),
        template_predicate (template_app (template_hole 11, t_empty)),
        template_predicate (template_app (template_hole 3, template_var 6)),
        template_negation
         (
            template_predicate
             (
                template_app
                 (template_app (template_hole 9, template_var 0),
                  template_app (template_hole 8, template_var 1))
                )
            ),
        template_inequation
         (less_than, template_var 0,
          template_app
           (template_app
             (template_hole 6,
              template_app (template_hole 5, template_var 8)),
            template_app (template_hole 4, template_var 8)))],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 1,
               template_app
                (template_app (template_hole 21, template_var 3),
                 template_app
                  (template_app
                    (template_hole 20,
                     template_app
                      (template_app (template_hole 19, template_var 4),
                       template_var 8)),
                   template_var 2))),
             template_app
              (template_app
                (template_hole 1,
                 template_app (template_hole 18, template_var 4)),
               template_app
                (template_app
                  (template_hole 1,
                   template_app (template_hole 17, template_var 2)),
                 template_app
                  (template_app (template_hole 21, template_var 3),
                   template_app
                    (template_app
                      (template_app
                        (template_app (template_hole 0, template_var 1),
                         template_var 6),
                       template_var 0),
                     template_var 5)))))
           ))),
    ("Diagonal_To_Smith.diagonal_to_Smith_i_dvd",
     "[| is_bezout_ext ?bezout; ?i < min (nrows ?A) (ncols ?A);
         ALL x. x : set ?xs --> x < min (nrows ?A) (ncols ?A);
         ALL a b.
            to_nat a : insert ?i (set ?xs) & to_nat a = to_nat b -->
            ?A $ from_nat ?c $ from_nat ?c dvd ?A $ a $ b;
         ?c ~: set ?xs; ?c < min (nrows ?A) (ncols ?A); distinct ?xs |]
      ==> ?A $ from_nat ?c $ from_nat ?c dvd
          diagonal_to_Smith_i ?xs ?A ?i ?bezout $ from_nat ?i $
          from_nat ?i",
     template_implication
      ([template_predicate
         (template_app (template_hole 23, template_var 4)),
        template_inequation
         (less_than, template_var 3,
          template_app
           (template_app
             (template_hole 21,
              template_app (template_hole 20, template_var 2)),
            template_app (template_hole 19, template_var 2))),
        template_predicate (template_app (template_hole 18, t_empty)),
        template_predicate (template_app (template_hole 14, t_empty)),
        template_negation
         (
            template_predicate
             (
                template_app
                 (template_app (template_hole 16, template_var 0),
                  template_app (template_hole 15, template_var 1))
                )
            ),
        template_inequation
         (less_than, template_var 0,
          template_app
           (template_app
             (template_hole 21,
              template_app (template_hole 20, template_var 2)),
            template_app (template_hole 19, template_var 2))),
        template_predicate
         (template_app (template_hole 1, template_var 1))],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 7,
               template_app
                (template_app
                  (template_hole 6,
                   template_app
                    (template_app (template_hole 5, template_var 2),
                     template_app (template_hole 4, template_var 0))),
                 template_app (template_hole 3, template_var 0))),
             template_app
              (template_app
                (template_hole 6,
                 template_app
                  (template_app
                    (template_hole 5,
                     template_app
                      (template_app
                        (template_app
                          (template_app (template_hole 0, template_var 1),
                           template_var 2),
                         template_var 3),
                       template_var 4)),
                   template_app (template_hole 4, template_var 3))),
               template_app (template_hole 3, template_var 3)))
           ))),
    ("Diagonal_To_Smith.diagonal_to_Smith_i_dvd2",
     "[| is_bezout_ext ?bezout; ?i < min (nrows ?A) (ncols ?A);
         ALL x. x : set ?xs --> x < min (nrows ?A) (ncols ?A);
         ALL a b.
            to_nat a : insert ?i (set ?xs) & to_nat a = to_nat b -->
            ?A $ from_nat ?c $ from_nat ?c dvd ?A $ a $ b;
         ?c ~: set ?xs; ?c < min (nrows ?A) (ncols ?A); distinct ?xs;
         to_nat ?a = to_nat ?b; to_nat ?a : insert ?i (set ?xs) |]
      ==> ?A $ from_nat ?c $ from_nat ?c dvd
          diagonal_to_Smith_i ?xs ?A ?i ?bezout $ ?a $ ?b",
     template_implication
      ([template_predicate
         (template_app (template_hole 23, template_var 6)),
        template_inequation
         (less_than, template_var 5,
          template_app
           (template_app
             (template_hole 21,
              template_app (template_hole 20, template_var 4)),
            template_app (template_hole 19, template_var 4))),
        template_predicate (template_app (template_hole 18, t_empty)),
        template_predicate (template_app (template_hole 14, t_empty)),
        template_negation
         (
            template_predicate
             (
                template_app
                 (template_app (template_hole 16, template_var 2),
                  template_app (template_hole 15, template_var 3))
                )
            ),
        template_inequation
         (less_than, template_var 2,
          template_app
           (template_app
             (template_hole 21,
              template_app (template_hole 20, template_var 4)),
            template_app (template_hole 19, template_var 4))),
        template_predicate (template_app (template_hole 1, template_var 3)),
        template_equation
         (template_app (template_hole 11, template_var 1),
          template_app (template_hole 8, template_var 0)),
        template_predicate
         (
            template_app
             (template_app
               (template_hole 16,
                template_app (template_hole 11, template_var 1)),
              template_app
               (template_app (template_hole 10, template_var 5),
                template_app (template_hole 15, template_var 3)))
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 7,
               template_app
                (template_app
                  (template_hole 6,
                   template_app
                    (template_app (template_hole 5, template_var 4),
                     template_app (template_hole 4, template_var 2))),
                 template_app (template_hole 3, template_var 2))),
             template_app
              (template_app
                (template_hole 6,
                 template_app
                  (template_app
                    (template_hole 5,
                     template_app
                      (template_app
                        (template_app
                          (template_app (template_hole 0, template_var 3),
                           template_var 4),
                         template_var 5),
                       template_var 6)),
                   template_var 1)),
               template_var 0))
           ))),
    ("Diagonal_To_Smith.diagonal_to_Smith_i_dvd2_k",
     "[| is_bezout_ext ?bezout; ?i < min (nrows ?A) (ncols ?A);
         ALL x. x : set ?xs --> x < ?k; ?k <= min (nrows ?A) (ncols ?A);
         ALL a b.
            to_nat a : insert ?i (set ?xs) & to_nat a = to_nat b -->
            ?A $ from_nat ?c $ from_nat ?c dvd ?A $ a $ b;
         ?c ~: set ?xs; ?c < min (nrows ?A) (ncols ?A); distinct ?xs;
         to_nat ?a = to_nat ?b; to_nat ?a : insert ?i (set ?xs) |]
      ==> ?A $ from_nat ?c $ from_nat ?c dvd
          diagonal_to_Smith_i ?xs ?A ?i ?bezout $ ?a $ ?b",
     template_implication
      ([template_predicate
         (template_app (template_hole 24, template_var 7)),
        template_inequation
         (less_than, template_var 6,
          template_app
           (template_app
             (template_hole 22,
              template_app (template_hole 21, template_var 5)),
            template_app (template_hole 20, template_var 5))),
        template_predicate (template_app (template_hole 19, t_empty)),
        template_inequation
         (less_equals, template_var 3,
          template_app
           (template_app
             (template_hole 22,
              template_app (template_hole 21, template_var 5)),
            template_app (template_hole 20, template_var 5))),
        template_predicate (template_app (template_hole 14, t_empty)),
        template_negation
         (
            template_predicate
             (
                template_app
                 (template_app (template_hole 17, template_var 2),
                  template_app (template_hole 16, template_var 4))
                )
            ),
        template_inequation
         (less_than, template_var 2,
          template_app
           (template_app
             (template_hole 22,
              template_app (template_hole 21, template_var 5)),
            template_app (template_hole 20, template_var 5))),
        template_predicate (template_app (template_hole 1, template_var 4)),
        template_equation
         (template_app (template_hole 11, template_var 1),
          template_app (template_hole 8, template_var 0)),
        template_predicate
         (
            template_app
             (template_app
               (template_hole 17,
                template_app (template_hole 11, template_var 1)),
              template_app
               (template_app (template_hole 10, template_var 6),
                template_app (template_hole 16, template_var 4)))
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 7,
               template_app
                (template_app
                  (template_hole 6,
                   template_app
                    (template_app (template_hole 5, template_var 5),
                     template_app (template_hole 4, template_var 2))),
                 template_app (template_hole 3, template_var 2))),
             template_app
              (template_app
                (template_hole 6,
                 template_app
                  (template_app
                    (template_hole 5,
                     template_app
                      (template_app
                        (template_app
                          (template_app (template_hole 0, template_var 4),
                           template_var 5),
                         template_var 6),
                       template_var 7)),
                   template_var 1)),
               template_var 0))
           ))),
    ("Diagonal_To_Smith.diagonal_step_PQ_Q_alt",
     "[| (?P, ?Q) = diagonal_step_PQ ?A ?i ?k ?bezout;
         (?p, ?q, ?u, ?v, ?d) =
         ?bezout (?A $ from_nat ?i $ from_nat ?i)
          (?A $ from_nat ?k $ from_nat ?k);
         ?i < min (nrows ?A) (ncols ?A); ?k < min (nrows ?A) (ncols ?A);
         ?i ~= ?k |]
      ==> ?Q =
          (\<chi>a b.
              if a = from_nat ?i & b = from_nat ?i then 1::?'a
              else if a = from_nat ?i & b = from_nat ?k then - ?u
                   else if a = from_nat ?k & b = from_nat ?i then ?q
                        else if a = from_nat ?k & b = from_nat ?k
                             then - ?q * ?u - (1::?'a)
                             else if a = b then 1::?'a else (0::?'a))",
     template_implication
      ([template_equation
         (template_app
           (template_app (template_hole 27, template_var 10),
            template_var 9),
          template_app
           (template_app
             (template_app
               (template_app (template_hole 26, template_var 8),
                template_var 7),
              template_var 6),
            template_var 5)),
        template_equation
         (template_app
           (template_app (template_hole 24, template_var 4),
            template_app
             (template_app (template_hole 23, template_var 3),
              template_app
               (template_app (template_hole 22, template_var 2),
                template_app
                 (template_app (template_hole 21, template_var 1),
                  template_var 0)))),
          template_app
           (template_app
             (template_var 5,
              template_app
               (template_app
                 (template_hole 20,
                  template_app
                   (template_app (template_hole 19, template_var 8),
                    template_app (template_hole 18, template_var 7))),
                template_app (template_hole 17, template_var 7))),
            template_app
             (template_app
               (template_hole 20,
                template_app
                 (template_app (template_hole 19, template_var 8),
                  template_app (template_hole 18, template_var 6))),
              template_app (template_hole 17, template_var 6)))),
        template_inequation
         (less_than, template_var 7,
          template_app
           (template_app
             (template_hole 15,
              template_app (template_hole 14, template_var 8)),
            template_app (template_hole 13, template_var 8))),
        template_inequation
         (less_than, template_var 6,
          template_app
           (template_app
             (template_hole 15,
              template_app (template_hole 14, template_var 8)),
            template_app (template_hole 13, template_var 8))),
        template_negation
         (template_equation (template_var 7, template_var 6))],
       template_equation
        (template_var 9, template_app (template_hole 9, t_empty)))),
    ("Diagonal_To_Smith.diagonal_step_PQ_P_alt",
     "[| (?P, ?Q) = diagonal_step_PQ ?A ?i ?k ?bezout;
         (?p, ?q, ?u, ?v, ?d) =
         ?bezout (?A $ from_nat ?i $ from_nat ?i)
          (?A $ from_nat ?k $ from_nat ?k);
         ?i < min (nrows ?A) (ncols ?A); ?k < min (nrows ?A) (ncols ?A);
         ?i ~= ?k |]
      ==> ?P =
          (\<chi>a b.
              if a = from_nat ?i & b = from_nat ?i then ?p
              else if a = from_nat ?i & b = from_nat ?k then 1::?'a
                   else if a = from_nat ?k & b = from_nat ?i
                        then - ?v * ?p + (1::?'a)
                        else if a = from_nat ?k & b = from_nat ?k then - ?v
                             else if a = b then 1::?'a else (0::?'a))",
     template_implication
      ([template_equation
         (template_app
           (template_app (template_hole 27, template_var 10),
            template_var 9),
          template_app
           (template_app
             (template_app
               (template_app (template_hole 26, template_var 8),
                template_var 7),
              template_var 6),
            template_var 5)),
        template_equation
         (template_app
           (template_app (template_hole 24, template_var 4),
            template_app
             (template_app (template_hole 23, template_var 3),
              template_app
               (template_app (template_hole 22, template_var 2),
                template_app
                 (template_app (template_hole 21, template_var 1),
                  template_var 0)))),
          template_app
           (template_app
             (template_var 5,
              template_app
               (template_app
                 (template_hole 20,
                  template_app
                   (template_app (template_hole 19, template_var 8),
                    template_app (template_hole 18, template_var 7))),
                template_app (template_hole 17, template_var 7))),
            template_app
             (template_app
               (template_hole 20,
                template_app
                 (template_app (template_hole 19, template_var 8),
                  template_app (template_hole 18, template_var 6))),
              template_app (template_hole 17, template_var 6)))),
        template_inequation
         (less_than, template_var 7,
          template_app
           (template_app
             (template_hole 15,
              template_app (template_hole 14, template_var 8)),
            template_app (template_hole 13, template_var 8))),
        template_inequation
         (less_than, template_var 6,
          template_app
           (template_app
             (template_hole 15,
              template_app (template_hole 14, template_var 8)),
            template_app (template_hole 13, template_var 8))),
        template_negation
         (template_equation (template_var 7, template_var 6))],
       template_equation
        (template_var 10, template_app (template_hole 9, t_empty))))]
