   [("Smith_Normal_Form.Smith_normal_form_upt_k_0",
     "Smith_normal_form_upt_k ?A 0",
     template_predicate
      (
         template_app
          (template_app (template_hole 1, template_var 0), template_hole 0)
         )),
    ("Smith_Normal_Form.Smith_normal_form_min",
     "Smith_normal_form ?A =
      Smith_normal_form_upt_k ?A (min (nrows ?A) (ncols ?A))",
     template_equation
      (template_app (template_hole 4, template_var 0),
       template_app
        (template_app (template_hole 3, template_var 0),
         template_app
          (template_app
            (template_hole 2,
             template_app (template_hole 1, template_var 0)),
           template_app (template_hole 0, template_var 0))))),
    ("Smith_Normal_Form.isDiagonal_intro",
     "(!!a b. mod_type_class.to_nat a = mod_type_class.to_nat b) ==>
      isDiagonal ?A",
     template_implication
      ([template_predicate (template_app (template_hole 6, t_empty))],
       template_predicate
        (template_app (template_hole 0, template_var 0)))),
    ("Smith_Normal_Form.Smith_normal_form_upt_k_condition2",
     "[| Smith_normal_form_upt_k ?A ?k;
         mod_type_class.to_nat ?a ~= mod_type_class.to_nat ?b;
         mod_type_class.to_nat ?a < ?k | mod_type_class.to_nat ?b < ?k |]
      ==> ?A $ ?a $ ?b = (0::?'a)",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 10, template_var 3),
              template_var 2)
            ),
        template_negation
         (
            template_equation
             (template_app (template_hole 7, template_var 1),
              template_app (template_hole 6, template_var 0))
            ),
        template_predicate
         (
            template_app
             (template_app
               (template_hole 5,
                template_app
                 (template_app
                   (template_hole 4,
                    template_app (template_hole 7, template_var 1)),
                  template_var 2)),
              template_app
               (template_app
                 (template_hole 4,
                  template_app (template_hole 6, template_var 0)),
                template_var 2))
            )],
       template_equation
        (template_app
          (template_app
            (template_hole 2,
             template_app
              (template_app (template_hole 1, template_var 3),
               template_var 1)),
           template_var 0),
         template_hole 0))),
    ("Smith_Normal_Form.Smith_normal_form_upt_k1_intro_diagonal",
     "[| Smith_normal_form_upt_k ?A ?k; isDiagonal ?A;
         ?A $ mod_type_class.from_nat (?k - 1) $
         mod_type_class.from_nat (?k - 1) dvd
         ?A $ mod_type_class.from_nat ?k $ mod_type_class.from_nat ?k |]
      ==> Smith_normal_form_upt_k ?A (Suc ?k)",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 9, template_var 1),
              template_var 0)
            ),
        template_predicate (template_app (template_hole 8, template_var 1)),
        template_predicate
         (
            template_app
             (template_app
               (template_hole 7,
                template_app
                 (template_app
                   (template_hole 6,
                    template_app
                     (template_app (template_hole 5, template_var 1),
                      template_app
                       (template_hole 4,
                        template_app
                         (template_app (template_hole 3, template_var 0),
                          template_hole 2)))),
                  template_app
                   (template_hole 1,
                    template_app
                     (template_app (template_hole 3, template_var 0),
                      template_hole 2)))),
              template_app
               (template_app
                 (template_hole 6,
                  template_app
                   (template_app (template_hole 5, template_var 1),
                    template_app (template_hole 4, template_var 0))),
                template_app (template_hole 1, template_var 0)))
            )],
       template_predicate
        (
           template_app
            (template_app (template_hole 9, template_var 1),
             template_app (template_hole 0, template_var 0))
           ))),
    ("Smith_Normal_Form.Smith_normal_form_upt_k_condition1",
     "[| Smith_normal_form_upt_k ?A ?k;
         mod_type_class.to_nat ?a = mod_type_class.to_nat ?b;
         mod_type_class.to_nat ?a + 1 < ?k;
         mod_type_class.to_nat ?b + 1 < ?k |]
      ==> ?A $ ?a $ ?b dvd ?A $ (?a + (1::?'rows)) $ (?b + (1::?'cols))",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 13, template_var 3),
              template_var 2)
            ),
        template_equation
         (template_app (template_hole 11, template_var 1),
          template_app (template_hole 10, template_var 0)),
        template_inequation
         (less_than,
          template_app
           (template_app
             (template_hole 8,
              template_app (template_hole 11, template_var 1)),
            template_hole 7),
          template_var 2),
        template_inequation
         (less_than,
          template_app
           (template_app
             (template_hole 8,
              template_app (template_hole 10, template_var 0)),
            template_hole 7),
          template_var 2)],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 6,
               template_app
                (template_app
                  (template_hole 5,
                   template_app
                    (template_app (template_hole 4, template_var 3),
                     template_var 1)),
                 template_var 0)),
             template_app
              (template_app
                (template_hole 5,
                 template_app
                  (template_app (template_hole 4, template_var 3),
                   template_app
                    (template_app (template_hole 3, template_var 1),
                     template_hole 2))),
               template_app
                (template_app (template_hole 1, template_var 0),
                 template_hole 0)))
           ))),
    ("Smith_Normal_Form.Smith_normal_form_upt_k_intro_alt",
     "[| !!a b.
            mod_type_class.to_nat a = mod_type_class.to_nat b &
            mod_type_class.to_nat a + 1 < ?k &
            mod_type_class.to_nat b + 1 < ?k ==>
            ?A $ a $ b dvd ?A $ (a + (1::?'a)) $ (b + (1::?'b));
         isDiagonal_upt_k ?A ?k |]
      ==> Smith_normal_form_upt_k ?A ?k",
     template_implication
      ([template_predicate (template_app (template_hole 18, t_empty)),
        template_predicate
         (
            template_app
             (template_app (template_hole 1, template_var 0),
              template_var 1)
            )],
       template_predicate
        (
           template_app
            (template_app (template_hole 0, template_var 0), template_var 1)
           ))),
    ("Smith_Normal_Form.Smith_normal_form_upt_k1_intro",
     "[| Smith_normal_form_upt_k ?A ?k;
         ?A $ mod_type_class.from_nat (?k - 1) $
         mod_type_class.from_nat (?k - 1) dvd
         ?A $ mod_type_class.from_nat ?k $ mod_type_class.from_nat ?k;
         ALL a.
            ?k < mod_type_class.to_nat a -->
            ?A $ a $ mod_type_class.from_nat ?k = (0::?'a);
         ALL b.
            ?k < mod_type_class.to_nat b -->
            ?A $ mod_type_class.from_nat ?k $ b = (0::?'a) |]
      ==> Smith_normal_form_upt_k ?A (Suc ?k)",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 16, template_var 1),
              template_var 0)
            ),
        template_predicate
         (
            template_app
             (template_app
               (template_hole 15,
                template_app
                 (template_app
                   (template_hole 14,
                    template_app
                     (template_app (template_hole 13, template_var 1),
                      template_app
                       (template_hole 12,
                        template_app
                         (template_app (template_hole 11, template_var 0),
                          template_hole 10)))),
                  template_app
                   (template_hole 9,
                    template_app
                     (template_app (template_hole 11, template_var 0),
                      template_hole 10)))),
              template_app
               (template_app
                 (template_hole 14,
                  template_app
                   (template_app (template_hole 13, template_var 1),
                    template_app (template_hole 12, template_var 0))),
                template_app (template_hole 9, template_var 0)))
            ),
        template_predicate (template_app (template_hole 8, t_empty)),
        template_predicate (template_app (template_hole 2, t_empty))],
       template_predicate
        (
           template_app
            (template_app (template_hole 16, template_var 1),
             template_app (template_hole 0, template_var 0))
           ))),
    ("Smith_Normal_Form.Smith_normal_form_upt_k_intro",
     "[| !!a b.
            mod_type_class.to_nat a = mod_type_class.to_nat b &
            mod_type_class.to_nat a + 1 < ?k &
            mod_type_class.to_nat b + 1 < ?k ==>
            ?A $ a $ b dvd ?A $ (a + (1::?'a)) $ (b + (1::?'b));
         !!a b.
            mod_type_class.to_nat a ~= mod_type_class.to_nat b &
            (mod_type_class.to_nat a < ?k |
             mod_type_class.to_nat b < ?k) ==>
            ?A $ a $ b = (0::?'c) |]
      ==> Smith_normal_form_upt_k ?A ?k",
     template_implication
      ([template_predicate (template_app (template_hole 21, t_empty)),
        template_predicate (template_app (template_hole 21, t_empty))],
       template_predicate
        (
           template_app
            (template_app (template_hole 0, template_var 0), template_var 1)
           )))]
