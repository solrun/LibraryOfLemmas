Loading theory "HOL-Eisbach.Eisbach" (required by "Draft.Mod_Type_ConnectMoreTemplates" via "Draft.Mod_Type_Connect" via "Perron_Frobenius.HMA_Connect")
Loading theory "HOL-Combinatorics.Transposition" (required by "Draft.Mod_Type_ConnectMoreTemplates" via "Draft.Mod_Type_Connect" via "Perron_Frobenius.HMA_Connect" via "Jordan_Normal_Form.Spectral_Radius" via "Jordan_Normal_Form.Jordan_Normal_Form_Existence" via "Jordan_Normal_Form.Jordan_Normal_Form" via "Jordan_Normal_Form.Matrix" via "Jordan_Normal_Form.Missing_Ring" via "Jordan_Normal_Form.Missing_Misc" via "HOL-Combinatorics.Permutations")
Loading theory "HOL-Computational_Algebra.Fraction_Field" (required by "Draft.Mod_Type_ConnectMoreTemplates" via "Draft.Mod_Type_Connect" via "Perron_Frobenius.HMA_Connect" via "Jordan_Normal_Form.Spectral_Radius" via "Jordan_Normal_Form.Jordan_Normal_Form_Existence" via "Jordan_Normal_Form.Jordan_Normal_Form" via "Jordan_Normal_Form.Char_Poly" via "Polynomial_Factorization.Fundamental_Theorem_Algebra_Factorized" via "Polynomial_Factorization.Order_Polynomial" via "Polynomial_Interpolation.Missing_Polynomial" via "HOL-Computational_Algebra.Polynomial_Factorial" via "HOL-Computational_Algebra.Normalized_Fraction")
Loading theory "HOL-Library.Cancellation" (required by "Draft.Mod_Type_ConnectMoreTemplates" via "Draft.Mod_Type_Connect" via "Perron_Frobenius.HMA_Connect" via "Jordan_Normal_Form.Spectral_Radius" via "Jordan_Normal_Form.Jordan_Normal_Form_Existence" via "Jordan_Normal_Form.Jordan_Normal_Form" via "Jordan_Normal_Form.Matrix" via "Polynomial_Interpolation.Ring_Hom" via "HOL-Library.Multiset")
signature PARSE_TOOLS =
  sig
    val is_real_val: ('a, 'b) parse_val -> bool
    val name_term: (term, string) parse_val parser
    val parse_term_val: 'a parser -> (term, 'a) parse_val parser
    val parse_thm_val: 'a parser -> (thm, 'a) parse_val parser
    datatype ('a, 'b) parse_val
    = Parse_Val of 'b * ('a -> unit) | Real_Val of 'a
    val parse_val_cases:
       ('a -> 'b) -> ('b, 'a) parse_val -> 'b * ('b -> unit)
    val the_parse_fun: ('a, 'b) parse_val -> 'a -> unit
    val the_parse_val: ('a, 'b) parse_val -> 'b
    val the_real_val: ('a, 'b) parse_val -> 'a
  end
structure Parse_Tools: PARSE_TOOLS
signature METHOD_CLOSURE =
  sig
    val apply_method:
       Proof.context ->
         string ->
           term list ->
             thm list list ->
               (Proof.context -> Method.method) list ->
                 Proof.context -> thm list -> context_tactic
    val method:
       binding ->
         (binding * typ option * mixfix) list ->
           binding list ->
             binding list ->
               binding list ->
                 Token.src -> local_theory -> string * local_theory
    val method_cmd:
       binding ->
         (binding * string option * mixfix) list ->
           binding list ->
             binding list ->
               binding list ->
                 Token.src -> local_theory -> string * local_theory
  end
structure Method_Closure: METHOD_CLOSURE
### theory "HOL-Combinatorics.Transposition"
### 0.158s elapsed time, 0.614s cpu time, 0.030s GC time
Loading theory "HOL-Library.FuncSet" (required by "Draft.Mod_Type_ConnectMoreTemplates" via "Draft.Mod_Type_Connect" via "Perron_Frobenius.HMA_Connect" via "Jordan_Normal_Form.Spectral_Radius" via "Jordan_Normal_Form.Jordan_Normal_Form_Existence" via "Jordan_Normal_Form.Jordan_Normal_Form" via "Jordan_Normal_Form.Matrix" via "Jordan_Normal_Form.Missing_Ring" via "Jordan_Normal_Form.Missing_Misc")
structure Eisbach_Rule_Insts: sig end
signature CANCEL = sig val proc: Proof.context -> cterm -> thm option end
functor Cancel_Fun (Data: CANCEL_NUMERALS_DATA): CANCEL
instantiation
  fract :: (idom) comm_ring_1
  uminus_fract == uminus :: 'a fract => 'a fract
  one_fract == one_class.one :: 'a fract
  times_fract == times :: 'a fract => 'a fract => 'a fract
  zero_fract == zero_class.zero :: 'a fract
  minus_fract == minus :: 'a fract => 'a fract => 'a fract
  plus_fract == plus :: 'a fract => 'a fract => 'a fract
signature CANCEL_DATA =
  sig
    val dest_coeff: term -> int * term
    val dest_sum: term -> term list
    val find_first_coeff: term -> term list -> int * term list
    val mk_coeff: int * term -> term
    val mk_sum: typ -> term list -> term
    val norm_ss1: simpset
    val norm_ss2: simpset
    val norm_tac: Proof.context -> tactic
    val numeral_simp_tac: Proof.context -> tactic
    val prove_conv:
       tactic list -> Proof.context -> thm list -> term * term -> thm option
    val simplify_meta_eq: Proof.context -> thm -> thm
    val trans_tac: Proof.context -> thm option -> tactic
  end
structure Cancel_Data: CANCEL_DATA
### ML warning (line 170 of "~~/src/HOL/Eisbach/match_method.ML"):
### Pattern is not exhaustive.
### ML warning (line 187 of "~~/src/HOL/Eisbach/match_method.ML"):
### Pattern is not exhaustive.
### ML warning (line 309 of "~~/src/HOL/Eisbach/match_method.ML"):
### Pattern is not exhaustive.
signature MATCH_METHOD =
  sig
    val focus_params: Proof.context -> term list
    val focus_schematics: Proof.context -> Envir.tenv
  end
structure Match_Method: MATCH_METHOD
val method_evaluate = fn: Method.text -> Proof.context -> thm list -> tactic
### theory "HOL-Eisbach.Eisbach"
### 0.400s elapsed time, 1.563s cpu time, 0.101s GC time
Loading theory "HOL-Library.Function_Algebras" (required by "Draft.Mod_Type_ConnectMoreTemplates" via "Draft.ExtrEqs" via "HOL-Library.BigO")
signature CANCEL_SIMPROCS =
  sig
    val diff_cancel: Proof.context -> cterm -> thm option
    val eq_cancel: Proof.context -> cterm -> thm option
    val less_cancel: Proof.context -> cterm -> thm option
    val less_eq_cancel: Proof.context -> cterm -> thm option
  end
structure Cancel_Simprocs: CANCEL_SIMPROCS
### theory "HOL-Library.Cancellation"
### 0.418s elapsed time, 1.651s cpu time, 0.101s GC time
Loading theory "HOL-Library.Multiset" (required by "Draft.Mod_Type_ConnectMoreTemplates" via "Draft.Mod_Type_Connect" via "Perron_Frobenius.HMA_Connect" via "Jordan_Normal_Form.Spectral_Radius" via "Jordan_Normal_Form.Jordan_Normal_Form_Existence" via "Jordan_Normal_Form.Jordan_Normal_Form" via "Jordan_Normal_Form.Matrix" via "Polynomial_Interpolation.Ring_Hom")
instantiation
  fun :: (type, plus) plus
  plus_fun == plus :: ('a => 'b) => ('a => 'b) => 'a => 'b
instantiation
  fun :: (type, zero) zero
  zero_fun == zero_class.zero :: 'a => 'b
instantiation
  fun :: (type, times) times
  times_fun == times :: ('a => 'b) => ('a => 'b) => 'a => 'b
instantiation
  fun :: (type, one) one
  one_fun == one_class.one :: 'a => 'b
### theory "HOL-Library.Function_Algebras"
### 0.130s elapsed time, 0.547s cpu time, 0.097s GC time
Loading theory "HOL-Library.Infinite_Set" (required by "Draft.Mod_Type_ConnectMoreTemplates" via "Draft.Mod_Type_Connect" via "Perron_Frobenius.HMA_Connect" via "Jordan_Normal_Form.Spectral_Radius" via "Jordan_Normal_Form.Jordan_Normal_Form_Existence" via "Jordan_Normal_Form.Jordan_Normal_Form" via "Jordan_Normal_Form.Char_Poly" via "Polynomial_Factorization.Fundamental_Theorem_Algebra_Factorized" via "Polynomial_Factorization.Order_Polynomial" via "Polynomial_Interpolation.Missing_Polynomial" via "HOL-Computational_Algebra.Polynomial_Factorial" via "HOL-Computational_Algebra.Polynomial")
### theory "HOL-Library.FuncSet"
### 0.381s elapsed time, 1.526s cpu time, 0.168s GC time
Loading theory "HOL-Algebra.Congruence" (required by "Draft.Mod_Type_ConnectMoreTemplates" via "Draft.Mod_Type_Connect" via "Perron_Frobenius.HMA_Connect" via "Jordan_Normal_Form.Spectral_Radius" via "Jordan_Normal_Form.Jordan_Normal_Form_Existence" via "Jordan_Normal_Form.Jordan_Normal_Form" via "Jordan_Normal_Form.Matrix" via "Jordan_Normal_Form.Missing_Ring" via "HOL-Algebra.Ring" via "HOL-Algebra.FiniteProduct" via "HOL-Algebra.Group" via "HOL-Algebra.Complete_Lattice" via "HOL-Algebra.Lattice" via "HOL-Algebra.Order")
instantiation
  multiset :: (type) cancel_comm_monoid_add
  zero_multiset == zero_class.zero :: 'a multiset
  minus_multiset == minus :: 'a multiset => 'a multiset => 'a multiset
  plus_multiset == plus :: 'a multiset => 'a multiset => 'a multiset
instantiation
  fract :: (idom) field
  inverse_fract == inverse :: 'a fract => 'a fract
  divide_fract == divide :: 'a fract => 'a fract => 'a fract
consts
  enumerate :: "'a set => nat => 'a"
instantiation
  fract :: (linordered_idom) linorder
  less_eq_fract == less_eq :: 'a fract => 'a fract => bool
  less_fract == less :: 'a fract => 'a fract => bool
instantiation
  fract :: (linordered_idom) linordered_field
  sgn_fract == sgn :: 'a fract => 'a fract
  abs_fract == abs :: 'a fract => 'a fract
instantiation
  fract :: (linordered_idom) distrib_lattice
  inf_fract == inf :: 'a fract => 'a fract => 'a fract
  sup_fract == sup :: 'a fract => 'a fract => 'a fract
### theory "HOL-Library.Infinite_Set"
### 0.367s elapsed time, 1.344s cpu time, 0.391s GC time
Loading theory "HOL-Library.Disjoint_Sets" (required by "Draft.Mod_Type_ConnectMoreTemplates" via "Draft.Mod_Type_Connect" via "Perron_Frobenius.HMA_Connect" via "Jordan_Normal_Form.Spectral_Radius" via "Jordan_Normal_Form.Jordan_Normal_Form_Existence" via "Jordan_Normal_Form.Jordan_Normal_Form" via "Jordan_Normal_Form.Matrix" via "Jordan_Normal_Form.Missing_Ring" via "Jordan_Normal_Form.Missing_Misc" via "HOL-Combinatorics.Permutations")
### theory "HOL-Computational_Algebra.Fraction_Field"
### 0.923s elapsed time, 3.562s cpu time, 0.589s GC time
Loading theory "HOL-Library.More_List" (required by "Draft.Mod_Type_ConnectMoreTemplates" via "Draft.Mod_Type_Connect" via "Perron_Frobenius.HMA_Connect" via "Jordan_Normal_Form.Spectral_Radius" via "Jordan_Normal_Form.Jordan_Normal_Form_Existence" via "Jordan_Normal_Form.Jordan_Normal_Form" via "Jordan_Normal_Form.Char_Poly" via "Polynomial_Factorization.Fundamental_Theorem_Algebra_Factorized" via "Polynomial_Factorization.Order_Polynomial" via "Polynomial_Interpolation.Missing_Polynomial" via "HOL-Computational_Algebra.Polynomial_Factorial" via "HOL-Computational_Algebra.Polynomial")
locale comm_monoid_set
  fixes f :: "'a => 'a => 'a"  (infixl \<open>\<^bold>*\<close> 70)
    and z :: "'a"  (\<open>\<^bold>1\<close>)
  assumes "comm_monoid_set (\<^bold>*) \<^bold>1"
### theory "HOL-Library.More_List"
### 0.175s elapsed time, 0.689s cpu time, 0.100s GC time
Loading theory "HOL-Library.Nat_Bijection" (required by "Draft.Mod_Type_ConnectMoreTemplates" via "Draft.ExtrEqs" via "HOL-Library.Stream")
locale equivalence
  fixes S :: "('a, 'b) eq_object_scheme"  (structure)
  assumes "equivalence S"
locale partition
  fixes A :: "'a set"
    and B :: "'a set set"
  assumes "Congruence.partition A B"
### theory "HOL-Library.Disjoint_Sets"
### 0.274s elapsed time, 1.082s cpu time, 0.165s GC time
Loading theory "HOL-Library.Old_Datatype" (required by "Draft.Mod_Type_ConnectMoreTemplates" via "Draft.Mod_Type_Connect" via "Perron_Frobenius.HMA_Connect" via "HOL-Analysis.Determinants" via "HOL-Analysis.Cartesian_Space" via "HOL-Analysis.Finite_Cartesian_Product" via "HOL-Library.Countable_Set" via "HOL-Library.Countable")
Found termination order: "(%p. size (snd p)) <*mlex*> {}"
### Partially applied constant "Multiset.inter_mset" on left hand side of equation, in theorem:
### semilattice_inf.Inf_fin (\<inter>#) (set (?x # ?xs)) ==
### fold (\<inter>#) ?xs ?x
### Partially applied constant "Multiset.union_mset" on left hand side of equation, in theorem:
### semilattice_sup.Sup_fin (\<union>#) (set (?x # ?xs)) ==
### fold (\<union>#) ?xs ?x
Found termination order: "size_list size <*mlex*> {}"
### theory "HOL-Algebra.Congruence"
### 0.776s elapsed time, 2.956s cpu time, 0.638s GC time
Loading theory "HOL-Algebra.Order" (required by "Draft.Mod_Type_ConnectMoreTemplates" via "Draft.Mod_Type_Connect" via "Perron_Frobenius.HMA_Connect" via "Jordan_Normal_Form.Spectral_Radius" via "Jordan_Normal_Form.Jordan_Normal_Form_Existence" via "Jordan_Normal_Form.Jordan_Normal_Form" via "Jordan_Normal_Form.Matrix" via "Jordan_Normal_Form.Missing_Ring" via "HOL-Algebra.Ring" via "HOL-Algebra.FiniteProduct" via "HOL-Algebra.Group" via "HOL-Algebra.Complete_Lattice" via "HOL-Algebra.Lattice")
### theory "HOL-Library.Nat_Bijection"
### 0.320s elapsed time, 1.245s cpu time, 0.226s GC time
Loading theory "HOL-Library.Stream" (required by "Draft.Mod_Type_ConnectMoreTemplates" via "Draft.ExtrEqs")
signature MULTISET_SIMPROCS =
  sig
    val subset_cancel_msets: Proof.context -> cterm -> thm option
    val subseteq_cancel_msets: Proof.context -> cterm -> thm option
  end
structure Multiset_Simprocs: MULTISET_SIMPROCS
instantiation
  multiset :: (type) Inf
  Inf_multiset == Inf :: 'a multiset set => 'a multiset
instantiation
  multiset :: (type) Sup
  Sup_multiset == Sup :: 'a multiset set => 'a multiset
locale weak_partial_order
  fixes L :: "('a, 'b) gorder_scheme"  (structure)
  assumes "weak_partial_order L"
signature OLD_DATATYPE =
  sig
    val check_specs: spec list -> theory -> spec list * Proof.context
    type config = {quiet: bool, strict: bool}
    val default_config: config
    type descr =
       (int * (string * dtyp list * (string * dtyp list) list)) list
    val distinct_lemma: thm
    datatype dtyp
    = DtRec of int | DtTFree of string * sort | DtType of string * dtyp list
    type info =
       {case_cong: thm,
        case_cong_weak: thm,
        case_name: string,
        case_rewrites: thm list,
        descr: descr,
        distinct: thm list,
        exhaust: thm,
        index: int,
        induct: thm,
        inducts: thm list,
        inject: thm list,
        nchotomy: thm,
        rec_names: string list,
        rec_rewrites: thm list, split: thm, split_asm: thm}
    val read_specs: spec_cmd list -> theory -> spec list * Proof.context
    type spec =
       (binding * (string * sort) list * mixfix) *
       (binding * typ list * mixfix) list
    type spec_cmd =
       (binding * (string * string option) list * mixfix) *
       (binding * string list * mixfix) list
  end
structure Old_Datatype: OLD_DATATYPE
### theory "HOL-Library.Old_Datatype"
### 0.597s elapsed time, 2.206s cpu time, 0.853s GC time
Loading theory "HOL-Library.Phantom_Type" (required by "Draft.Mod_Type_ConnectMoreTemplates" via "Draft.Mod_Type_Connect" via "Perron_Frobenius.HMA_Connect" via "HOL-Analysis.Determinants" via "HOL-Analysis.Cartesian_Space" via "HOL-Analysis.Finite_Cartesian_Product" via "HOL-Library.Numeral_Type" via "HOL-Library.Cardinality")
locale weak_partial_order
  fixes L :: "('a, 'b) gorder_scheme"  (structure)
  assumes "weak_partial_order L"
instantiation
  multiset :: (type) size
  size_multiset == size :: 'a multiset => nat
locale comp_fun_commute
  fixes f :: "'a => 'b => 'b"
  assumes "comp_fun_commute f"
consts
  shift :: "'a list => 'a stream => 'a stream"
Proofs for coinductive predicate(s) "streamsp"
  Proving monotonicity ...
consts
  mset :: "'a list => 'a multiset"
locale weak_partial_order
  fixes L :: "('a, 'b) gorder_scheme"  (structure)
  assumes "weak_partial_order L"
consts
  snth :: "'a stream => nat => 'a"
consts
  stake :: "nat => 'a stream => 'a list"
consts
  sdrop :: "nat => 'a stream => 'a stream"
locale partial_order
  fixes L :: "('a, 'b) gorder_scheme"  (structure)
  assumes "partial_order L"
consts
  sfilter :: "('a => bool) => 'a stream => 'a stream"
class linorder = order +
  assumes "linear": "!!x y. x <= y | y <= x"
consts
  cycle :: "'a list => 'a stream"
locale weak_partial_order_bottom
  fixes L :: "('a, 'b) gorder_scheme"  (structure)
  assumes "weak_partial_order_bottom L"
locale weak_partial_order_top
  fixes L :: "('a, 'b) gorder_scheme"  (structure)
  assumes "weak_partial_order_top L"
consts
  siterate :: "('a => 'a) => 'a => 'a stream"
### theory "HOL-Library.Phantom_Type"
### 0.630s elapsed time, 2.477s cpu time, 0.361s GC time
Loading theory "HOL-Library.Cardinality" (required by "Draft.Mod_Type_ConnectMoreTemplates" via "Draft.Mod_Type_Connect" via "Perron_Frobenius.HMA_Connect" via "HOL-Analysis.Determinants" via "HOL-Analysis.Cartesian_Space" via "HOL-Analysis.Finite_Cartesian_Product" via "HOL-Library.Numeral_Type")
locale weak_total_order
  fixes L :: "('a, 'b) gorder_scheme"  (structure)
  assumes "weak_total_order L"
consts
  flat :: "'a list stream => 'a stream"
locale comm_monoid_mset
  fixes f :: "'a => 'a => 'a"  (infixl \<open>\<^bold>*\<close> 70)
    and z :: "'a"  (\<open>\<^bold>1\<close>)
  assumes "comm_monoid_mset (\<^bold>*) \<^bold>1"
locale total_order
  fixes L :: "('a, 'b) gorder_scheme"  (structure)
  assumes "total_order L"
### Additional type variable(s) in locale specification "CARD_1": 'a
### theory "HOL-Algebra.Order"
### 1.158s elapsed time, 4.415s cpu time, 1.131s GC time
Loading theory "HOL-Algebra.Lattice" (required by "Draft.Mod_Type_ConnectMoreTemplates" via "Draft.Mod_Type_Connect" via "Perron_Frobenius.HMA_Connect" via "Jordan_Normal_Form.Spectral_Radius" via "Jordan_Normal_Form.Jordan_Normal_Form_Existence" via "Jordan_Normal_Form.Jordan_Normal_Form" via "Jordan_Normal_Form.Matrix" via "Jordan_Normal_Form.Missing_Ring" via "HOL-Algebra.Ring" via "HOL-Algebra.FiniteProduct" via "HOL-Algebra.Group" via "HOL-Algebra.Complete_Lattice")
consts
  sinterleave :: "'a stream => 'a stream => 'a stream"
class CARD_1 = type +
  assumes "CARD_1": "CARD('a) = 1"
consts
  szip :: "'a stream => 'b stream => ('a * 'b) stream"
class comm_monoid_add = ab_semigroup_add + monoid_add +
  assumes "add_0": "!!a. (0::'a) + a = a"
consts
  smap2 :: "('a => 'b => 'c) => 'a stream => 'b stream => 'c stream"
class comm_monoid_add = ab_semigroup_add + monoid_add +
  assumes "add_0": "!!a. (0::'a) + a = a"
### theory "HOL-Library.Stream"
### 1.190s elapsed time, 4.547s cpu time, 1.168s GC time
Loading theory "HOL-Library.Product_Plus" (required by "Draft.Mod_Type_ConnectMoreTemplates" via "Draft.Mod_Type_Connect" via "Perron_Frobenius.HMA_Connect" via "HOL-Analysis.Determinants" via "HOL-Analysis.Cartesian_Space" via "HOL-Analysis.Finite_Cartesian_Product" via "HOL-Analysis.Euclidean_Space" via "HOL-Analysis.Product_Vector")
instantiation
  prod :: (zero, zero) zero
  zero_prod == zero_class.zero :: 'a * 'b
instantiation
  prod :: (plus, plus) plus
  plus_prod == plus :: 'a * 'b => 'a * 'b => 'a * 'b
locale weak_upper_semilattice
  fixes L :: "('a, 'b) gorder_scheme"  (structure)
  assumes "weak_upper_semilattice L"
instantiation
  prod :: (minus, minus) minus
  minus_prod == minus :: 'a * 'b => 'a * 'b => 'a * 'b
instantiation
  prod :: (uminus, uminus) uminus
  uminus_prod == uminus :: 'a * 'b => 'a * 'b
class canonically_ordered_monoid_add = ordered_comm_monoid_add +
  assumes "le_iff_add": "!!a b. (a <= b) = (EX c. b = a + c)"
locale weak_lower_semilattice
  fixes L :: "('a, 'b) gorder_scheme"  (structure)
  assumes "weak_lower_semilattice L"
### Additional type variable(s) in locale specification "card2": 'a
locale weak_lattice
  fixes L :: "('a, 'b) gorder_scheme"  (structure)
  assumes "weak_lattice L"
### theory "HOL-Library.Product_Plus"
### 0.407s elapsed time, 1.389s cpu time, 1.003s GC time
Loading theory "HOL-Library.Set_Algebras" (required by "Draft.Mod_Type_ConnectMoreTemplates" via "Draft.ExtrEqs" via "HOL-Library.BigO")
class card2 = finite +
  assumes "two_le_card": "2 <= CARD('a)"
instantiation
  set :: (plus) plus
  plus_set == plus :: 'a set => 'a set => 'a set
instantiation
  set :: (times) times
  times_set == times :: 'a set => 'a set => 'a set
instantiation
  set :: (zero) zero
  zero_set == zero_class.zero :: 'a set
instantiation
  set :: (one) one
  one_set == one_class.one :: 'a set
class finite_UNIV = type +
  fixes finite_UNIV :: "('a, bool) phantom"
  assumes "finite_UNIV": "finite_UNIV = Phantom('a) (finite UNIV)"
class card_UNIV = finite_UNIV +
  fixes card_UNIV :: "('a, nat) phantom"
  assumes "card_UNIV": "card_UNIV_class.card_UNIV = Phantom('a) CARD('a)"
instantiation
  nat :: card_UNIV
  card_UNIV_nat == card_UNIV_class.card_UNIV :: (nat, nat) phantom
  finite_UNIV_nat == finite_UNIV :: (nat, bool) phantom
instantiation
  int :: card_UNIV
  card_UNIV_int == card_UNIV_class.card_UNIV :: (int, nat) phantom
  finite_UNIV_int == finite_UNIV :: (int, bool) phantom
instantiation
  natural :: card_UNIV
  card_UNIV_natural == card_UNIV_class.card_UNIV :: (natural, nat) phantom
  finite_UNIV_natural == finite_UNIV :: (natural, bool) phantom
instantiation
  integer :: card_UNIV
  card_UNIV_integer == card_UNIV_class.card_UNIV :: (integer, nat) phantom
  finite_UNIV_integer == finite_UNIV :: (integer, bool) phantom
instantiation
  list :: (type) card_UNIV
  card_UNIV_list == card_UNIV_class.card_UNIV :: ('a list, nat) phantom
  finite_UNIV_list == finite_UNIV :: ('a list, bool) phantom
instantiation
  unit :: card_UNIV
  card_UNIV_unit == card_UNIV_class.card_UNIV :: (unit, nat) phantom
  finite_UNIV_unit == finite_UNIV :: (unit, bool) phantom
instantiation
  bool :: card_UNIV
  card_UNIV_bool == card_UNIV_class.card_UNIV :: (bool, nat) phantom
  finite_UNIV_bool == finite_UNIV :: (bool, bool) phantom
instantiation
  char :: card_UNIV
  card_UNIV_char == card_UNIV_class.card_UNIV :: (char, nat) phantom
  finite_UNIV_char == finite_UNIV :: (char, bool) phantom
### theory "HOL-Library.Set_Algebras"
### 0.242s elapsed time, 0.955s cpu time, 0.055s GC time
Loading theory "HOL-Library.Tree" (required by "Draft.Mod_Type_ConnectMoreTemplates" via "Draft.ExtrEqs" via "Draft.Templates")
class comm_monoid_mult = ab_semigroup_mult + monoid_mult + dvd +
  assumes "mult_1": "!!a. (1::'a) * a = a"
instantiation
  prod :: (finite_UNIV, finite_UNIV) finite_UNIV
  finite_UNIV_prod == finite_UNIV :: ('a * 'b, bool) phantom
instantiation
  prod :: (card_UNIV, card_UNIV) card_UNIV
  card_UNIV_prod == card_UNIV_class.card_UNIV :: ('a * 'b, nat) phantom
instantiation
  sum :: (finite_UNIV, finite_UNIV) finite_UNIV
  finite_UNIV_sum == finite_UNIV :: ('a + 'b, bool) phantom
instantiation
  sum :: (card_UNIV, card_UNIV) card_UNIV
  card_UNIV_sum == card_UNIV_class.card_UNIV :: ('a + 'b, nat) phantom
instantiation
  fun :: (finite_UNIV, card_UNIV) finite_UNIV
  finite_UNIV_fun == finite_UNIV :: ('a => 'b, bool) phantom
instantiation
  fun :: (card_UNIV, card_UNIV) card_UNIV
  card_UNIV_fun == card_UNIV_class.card_UNIV :: ('a => 'b, nat) phantom
instantiation
  option :: (finite_UNIV) finite_UNIV
  finite_UNIV_option == finite_UNIV :: ('a option, bool) phantom
instantiation
  option :: (card_UNIV) card_UNIV
  card_UNIV_option == card_UNIV_class.card_UNIV :: ('a option, nat) phantom
instantiation
  String.literal :: card_UNIV
  card_UNIV_literal == card_UNIV_class.card_UNIV ::
    (String.literal, nat) phantom
  finite_UNIV_literal == finite_UNIV :: (String.literal, bool) phantom
instantiation
  set :: (finite_UNIV) finite_UNIV
  finite_UNIV_set == finite_UNIV :: ('a set, bool) phantom
instantiation
  set :: (card_UNIV) card_UNIV
  card_UNIV_set == card_UNIV_class.card_UNIV :: ('a set, nat) phantom
instantiation
  Enum.finite_1 :: card_UNIV
  card_UNIV_finite_1 == card_UNIV_class.card_UNIV ::
    (Enum.finite_1, nat) phantom
  finite_UNIV_finite_1 == finite_UNIV :: (Enum.finite_1, bool) phantom
instantiation
  Enum.finite_2 :: card_UNIV
  card_UNIV_finite_2 == card_UNIV_class.card_UNIV ::
    (Enum.finite_2, nat) phantom
  finite_UNIV_finite_2 == finite_UNIV :: (Enum.finite_2, bool) phantom
locale weak_bounded_lattice
  fixes L :: "('a, 'b) gorder_scheme"  (structure)
  assumes "weak_bounded_lattice L"
instantiation
  Enum.finite_3 :: card_UNIV
  card_UNIV_finite_3 == card_UNIV_class.card_UNIV ::
    (Enum.finite_3, nat) phantom
  finite_UNIV_finite_3 == finite_UNIV :: (Enum.finite_3, bool) phantom
instantiation
  Enum.finite_4 :: card_UNIV
  card_UNIV_finite_4 == card_UNIV_class.card_UNIV ::
    (Enum.finite_4, nat) phantom
  finite_UNIV_finite_4 == finite_UNIV :: (Enum.finite_4, bool) phantom
instantiation
  Enum.finite_5 :: card_UNIV
  card_UNIV_finite_5 == card_UNIV_class.card_UNIV ::
    (Enum.finite_5, nat) phantom
  finite_UNIV_finite_5 == finite_UNIV :: (Enum.finite_5, bool) phantom
locale upper_semilattice
  fixes L :: "('a, 'b) gorder_scheme"  (structure)
  assumes "upper_semilattice L"
### theory "HOL-Library.Cardinality"
### 1.112s elapsed time, 4.161s cpu time, 1.387s GC time
Loading theory "HOL-Library.Code_Cardinality" (required by "Draft.Mod_Type_ConnectMoreTemplates" via "Draft.Mod_Type_Connect" via "Gauss_Jordan.Elementary_Operations" via "Gauss_Jordan.Code_Matrix" via "Gauss_Jordan.Code_Set")
locale lower_semilattice
  fixes L :: "('a, 'b) gorder_scheme"  (structure)
  assumes "lower_semilattice L"
locale Lattice.lattice
  fixes L :: "('a, 'b) gorder_scheme"  (structure)
  assumes "lattice L"
### Code generator: dropping subsumed code equation
### List.coset [] <= set [] == False
### theory "HOL-Library.Code_Cardinality"
### 0.111s elapsed time, 0.447s cpu time, 0.000s GC time
Loading theory "Gauss_Jordan.Code_Set" (required by "Draft.Mod_Type_ConnectMoreTemplates" via "Draft.Mod_Type_Connect" via "Gauss_Jordan.Elementary_Operations" via "Gauss_Jordan.Code_Matrix")
### theory "Gauss_Jordan.Code_Set"
### 0.057s elapsed time, 0.216s cpu time, 0.081s GC time
Loading theory "HOL-Library.Numeral_Type" (required by "Draft.Mod_Type_ConnectMoreTemplates" via "Draft.Mod_Type_Connect" via "Perron_Frobenius.HMA_Connect" via "HOL-Analysis.Determinants" via "HOL-Analysis.Cartesian_Space" via "HOL-Analysis.Finite_Cartesian_Product")
locale Lattice.bounded_lattice
  fixes L :: "('a, 'b) gorder_scheme"  (structure)
  assumes "bounded_lattice L"
locale Lattice.bounded_lattice
  fixes L :: "('a, 'b) gorder_scheme"  (structure)
  assumes "bounded_lattice L"
### theory "HOL-Algebra.Lattice"
### 1.225s elapsed time, 4.622s cpu time, 1.352s GC time
Loading theory "HOL-Algebra.Complete_Lattice" (required by "Draft.Mod_Type_ConnectMoreTemplates" via "Draft.Mod_Type_Connect" via "Perron_Frobenius.HMA_Connect" via "Jordan_Normal_Form.Spectral_Radius" via "Jordan_Normal_Form.Jordan_Normal_Form_Existence" via "Jordan_Normal_Form.Jordan_Normal_Form" via "Jordan_Normal_Form.Matrix" via "Jordan_Normal_Form.Missing_Ring" via "HOL-Algebra.Ring" via "HOL-Algebra.FiniteProduct" via "HOL-Algebra.Group")
locale weak_complete_lattice
  fixes L :: "('a, 'b) gorder_scheme"  (structure)
  assumes "weak_complete_lattice L"
instantiation
  num1 :: CARD_1
instantiation
  num1 :: {comm_monoid_mult,numeral,comm_ring}
  uminus_num1 == uminus :: num1 => num1
  zero_num1 == zero_class.zero :: num1
  minus_num1 == minus :: num1 => num1 => num1
  plus_num1 == plus :: num1 => num1 => num1
  one_num1 == one_class.one :: num1
  times_num1 == times :: num1 => num1 => num1
instantiation
  num1 :: linorder
  less_eq_num1 == less_eq :: num1 => num1 => bool
  less_num1 == less :: num1 => num1 => bool
locale mod_type
  fixes n :: "int"
    and Rep :: "'a => int"
    and Abs :: "int => 'a"
  assumes "mod_type n Rep Abs"
consts
  left :: "'a tree => 'a tree"
consts
  right :: "'a tree => 'a tree"
locale mod_ring
  fixes n :: "int"
    and Rep :: "'a => int"
    and Abs :: "int => 'a"
  assumes "mod_ring n Rep Abs"
instantiation
  bit0 :: (finite) {minus,one,plus,times,uminus,zero}
  bit1 :: (finite) {minus,one,plus,times,uminus,zero}
  zero_bit0 == zero_class.zero :: 'a bit0
  uminus_bit0 == uminus :: 'a bit0 => 'a bit0
  times_bit0 == times :: 'a bit0 => 'a bit0 => 'a bit0
  plus_bit0 == plus :: 'a bit0 => 'a bit0 => 'a bit0
  one_bit0 == one_class.one :: 'a bit0
  minus_bit0 == minus :: 'a bit0 => 'a bit0 => 'a bit0
  zero_bit1 == zero_class.zero :: 'a bit1
  uminus_bit1 == uminus :: 'a bit1 => 'a bit1
  times_bit1 == times :: 'a bit1 => 'a bit1 => 'a bit1
  plus_bit1 == plus :: 'a bit1 => 'a bit1 => 'a bit1
  one_bit1 == one_class.one :: 'a bit1
  minus_bit1 == minus :: 'a bit1 => 'a bit1 => 'a bit1
class linorder = order +
  assumes "linear": "!!x y. x <= y | y <= x"
Found termination order: "size <*mlex*> {}"
locale weak_complete_lattice
  fixes L :: "('a, 'b) gorder_scheme"  (structure)
  assumes "weak_complete_lattice L"
Found termination order: "size <*mlex*> {}"
instantiation
  bit0 :: (finite) linorder
  bit1 :: (finite) linorder
  less_eq_bit0 == less_eq :: 'a bit0 => 'a bit0 => bool
  less_bit0 == less :: 'a bit0 => 'a bit0 => bool
  less_eq_bit1 == less_eq :: 'a bit1 => 'a bit1 => bool
  less_bit1 == less :: 'a bit1 => 'a bit1 => bool
locale weak_complete_lattice
  fixes L :: "('a, 'b) gorder_scheme"  (structure)
  assumes "weak_complete_lattice L"
Found termination order: "size <*mlex*> {}"
class height = type +
  fixes height :: "'a => nat"
instantiation
  tree :: (type) height
  height_tree == height :: 'a tree => nat
instantiation
  num0 :: equal
  equal_num0 == equal_class.equal :: num0 => num0 => bool
instantiation
  num1 :: equal
  equal_num1 == equal_class.equal :: num1 => num1 => bool
instantiation
  num1 :: enum
  enum_num1 == enum_class.enum :: num1 list
  enum_all_num1 == enum_class.enum_all :: (num1 => bool) => bool
  enum_ex_num1 == enum_class.enum_ex :: (num1 => bool) => bool
locale Complete_Lattice.complete_lattice
  fixes L :: "('a, 'b) gorder_scheme"  (structure)
  assumes "complete_lattice L"
Found termination order: "size <*mlex*> {}"
instantiation
  multiset :: (preorder) order
  less_eq_multiset == less_eq :: 'a multiset => 'a multiset => bool
  less_multiset == less :: 'a multiset => 'a multiset => bool
instantiation
  num0 :: card_UNIV
  num1 :: card_UNIV
  card_UNIV_num0 == card_UNIV_class.card_UNIV :: (num0, nat) phantom
  finite_UNIV_num0 == finite_UNIV :: (num0, bool) phantom
  card_UNIV_num1 == card_UNIV_class.card_UNIV :: (num1, nat) phantom
  finite_UNIV_num1 == finite_UNIV :: (num1, bool) phantom
instantiation
  multiset :: (preorder) ordered_ab_semigroup_add
Proofs for inductive predicate(s) "pw_leq"
  Proving monotonicity ...
Found termination order: "size <*mlex*> {}"
instantiation
  bit0 :: (finite) equal
  bit1 :: (finite) equal
  equal_bit0 == equal_class.equal :: 'a bit0 => 'a bit0 => bool
  equal_bit1 == equal_class.equal :: 'a bit1 => 'a bit1 => bool
locale Complete_Lattice.complete_lattice
  fixes L :: "('a, 'b) gorder_scheme"  (structure)
  assumes "complete_lattice L"
instantiation
  bit0 :: (finite) enum
  enum_bit0 == enum_class.enum :: 'a bit0 list
  enum_all_bit0 == enum_class.enum_all :: ('a bit0 => bool) => bool
  enum_ex_bit0 == enum_class.enum_ex :: ('a bit0 => bool) => bool
locale weak_complete_lattice
  fixes L :: "('a, 'b) gorder_scheme"  (structure)
  assumes "weak_complete_lattice L"
instantiation
  bit1 :: (finite) enum
  enum_bit1 == enum_class.enum :: 'a bit1 list
  enum_all_bit1 == enum_class.enum_all :: ('a bit1 => bool) => bool
  enum_ex_bit1 == enum_class.enum_ex :: ('a bit1 => bool) => bool
Found termination order: "size <*mlex*> {}"
instantiation
  bit0 :: (finite) finite_UNIV
  bit1 :: (finite) finite_UNIV
  finite_UNIV_bit0 == finite_UNIV :: ('a bit0, bool) phantom
  finite_UNIV_bit1 == finite_UNIV :: ('a bit1, bool) phantom
instantiation
  bit0 :: ({card_UNIV,finite}) card_UNIV
  bit1 :: ({card_UNIV,finite}) card_UNIV
  card_UNIV_bit0 == card_UNIV_class.card_UNIV :: ('a bit0, nat) phantom
  card_UNIV_bit1 == card_UNIV_class.card_UNIV :: ('a bit1, nat) phantom
### theory "HOL-Library.Numeral_Type"
### 0.809s elapsed time, 3.195s cpu time, 0.456s GC time
Loading theory "Perron_Frobenius.Bij_Nat" (required by "Draft.Mod_Type_ConnectMoreTemplates" via "Draft.Mod_Type_Connect" via "Perron_Frobenius.HMA_Connect")
Found termination order: "size <*mlex*> {}"
### theory "HOL-Algebra.Complete_Lattice"
### 0.790s elapsed time, 3.115s cpu time, 0.456s GC time
Loading theory "HOL-Algebra.Group" (required by "Draft.Mod_Type_ConnectMoreTemplates" via "Draft.Mod_Type_Connect" via "Perron_Frobenius.HMA_Connect" via "Jordan_Normal_Form.Spectral_Radius" via "Jordan_Normal_Form.Jordan_Normal_Form_Existence" via "Jordan_Normal_Form.Jordan_Normal_Form" via "Jordan_Normal_Form.Matrix" via "Jordan_Normal_Form.Missing_Ring" via "HOL-Algebra.Ring" via "HOL-Algebra.FiniteProduct")
### theory "Perron_Frobenius.Bij_Nat"
### 0.072s elapsed time, 0.276s cpu time, 0.000s GC time
Loading theory "HOL-Types_To_Sets.Types_To_Sets" (required by "Draft.Mod_Type_ConnectMoreTemplates" via "Draft.Mod_Type_Connect" via "Perron_Frobenius.HMA_Connect" via "Perron_Frobenius.Cancel_Card_Constraint")
Found termination order: "size <*mlex*> {}"
Found termination order: "(%p. length (fst p)) <*mlex*> {}"
instantiation
  multiset :: (equal) equal
  equal_multiset == equal_class.equal :: 'a multiset => 'a multiset => bool
signature LOCAL_TYPEDEF =
  sig
    val cancel_type_definition: thm -> thm
    val cancel_type_definition_attr: attribute
  end
structure Local_Typedef: LOCAL_TYPEDEF
Found termination order: "size <*mlex*> {}"
instantiation
  multiset :: (random) random
  random_multiset == random_class.random ::
    natural
    => natural * natural
       => ('a multiset * (unit => term)) * natural * natural
signature UNOVERLOADING =
  sig
    val unoverload: cterm -> thm -> thm
    val unoverload_attr: cterm -> attribute
  end
structure Unoverloading: UNOVERLOADING
instantiation
  multiset :: (full_exhaustive) full_exhaustive
  full_exhaustive_multiset == full_exhaustive_class.full_exhaustive ::
    ('a multiset * (unit => term) => (bool * term list) option)
    => natural => (bool * term list) option
signature INTERNALIZE_SORT =
  sig
    val internalize_sort: ctyp -> thm -> typ * thm
    val internalize_sort_attr: typ -> attribute
  end
structure Internalize_Sort: INTERNALIZE_SORT
### ML warning (line 41 of "~~/src/HOL/Types_To_Sets/unoverload_type.ML"):
### Matches are not exhaustive.
signature UNOVERLOAD_TYPE =
  sig
    val unoverload_type: Context.generic -> indexname list -> thm -> thm
    val unoverload_type_attr: indexname list -> attribute
  end
structure Unoverload_Type: UNOVERLOAD_TYPE
Found termination order: "size <*mlex*> {}"
Proofs for inductive predicate(s) "pred_mset"
  Proving monotonicity ...
Proofs for inductive predicate(s) "rel_mset'"
  Proving monotonicity ...
Found termination order: "(%p. size (fst p)) <*mlex*> {}"
locale Group.monoid
  fixes G :: "('a, 'b) monoid_scheme"  (structure)
  assumes "Group.monoid G"
### ML warning (line 36 of "~~/src/HOL/Types_To_Sets/unoverload_def.ML"):
### Pattern is not exhaustive.
### ML warning (line 36 of "~~/src/HOL/Types_To_Sets/unoverload_def.ML"):
### Value identifier (ctxt') has not been referenced.
### ML warning (line 40 of "~~/src/HOL/Types_To_Sets/unoverload_def.ML"):
### Pattern is not exhaustive.
### ML warning (line 66 of "~~/src/HOL/Types_To_Sets/unoverload_def.ML"):
### Pattern is not exhaustive.
structure Unoverload_Def:
  sig
    val unoverload_def: binding option -> thm -> theory -> theory
    val unoverload_def1_cmd:
       binding option * (Facts.ref * Token.src list) -> theory -> theory
  end
### theory "HOL-Types_To_Sets.Types_To_Sets"
### 0.320s elapsed time, 1.252s cpu time, 0.242s GC time
Loading theory "Perron_Frobenius.Cancel_Card_Constraint" (required by "Draft.Mod_Type_ConnectMoreTemplates" via "Draft.Mod_Type_Connect" via "Perron_Frobenius.HMA_Connect")
Found termination order: "size <*mlex*> {}"
### theory "HOL-Library.Multiset"
### 4.499s elapsed time, 17.264s cpu time, 4.031s GC time
Loading theory "HOL-Computational_Algebra.Factorial_Ring" (required by "Draft.Mod_Type_ConnectMoreTemplates" via "Draft.Mod_Type_Connect" via "Perron_Frobenius.HMA_Connect" via "Jordan_Normal_Form.Spectral_Radius" via "Jordan_Normal_Form.Jordan_Normal_Form_Existence" via "Jordan_Normal_Form.Jordan_Normal_Form" via "Jordan_Normal_Form.Matrix" via "Polynomial_Interpolation.Ring_Hom")
locale Group.group
  fixes G :: "('a, 'b) monoid_scheme"  (structure)
  assumes "Group.group G"
Found termination order: "(%p. size (snd p)) <*mlex*> {}"
overloading
  nat_pow \<equiv> pow :: ('a, 'b) monoid_scheme => 'a => nat => 'a
### ML warning (line 55 of "$AFP/Perron_Frobenius/cancel_card_constraint.ML"):
### Pattern is not exhaustive.
signature CARD_ELIMINATION =
  sig
    val cancel_card_constraint: thm -> thm
    val cancel_card_constraint_attr: attribute
  end
structure Card_Elimination: CARD_ELIMINATION
overloading
  int_pow \<equiv> pow :: ('a, 'b) monoid_scheme => 'a => int => 'a
### theory "Perron_Frobenius.Cancel_Card_Constraint"
### 0.266s elapsed time, 1.051s cpu time, 0.143s GC time
Loading theory "HOL-Combinatorics.Permutations" (required by "Draft.Mod_Type_ConnectMoreTemplates" via "Draft.Mod_Type_Connect" via "Perron_Frobenius.HMA_Connect" via "Jordan_Normal_Form.Spectral_Radius" via "Jordan_Normal_Form.Jordan_Normal_Form_Existence" via "Jordan_Normal_Form.Jordan_Normal_Form" via "Jordan_Normal_Form.Matrix" via "Jordan_Normal_Form.Missing_Ring" via "Jordan_Normal_Form.Missing_Misc")
locale submonoid
  fixes H :: "'a set"
    and G :: "('a, 'b) monoid_scheme"  (structure)
  assumes "submonoid H G"
Found termination order: "size <*mlex*> {}"
locale subgroup
  fixes H :: "'a set"
    and G :: "('a, 'b) monoid_scheme"  (structure)
  assumes "subgroup H G"
### theory "HOL-Library.Tree"
### 2.252s elapsed time, 8.891s cpu time, 1.349s GC time
Loading theory "Draft.Templates" (required by "Draft.Mod_Type_ConnectMoreTemplates" via "Draft.ExtrEqs")
datatype template_term
=
     t_empty
   | template_app of template_term * template_term
   | template_hole of int
   | template_var of int
datatype sign
= equals | greater_equals | greater_than | less_equals | less_than
datatype template
=
     template_bimplication of template * template
   | template_dunno
   | template_equation of template_term * template_term
   | template_implication of template list * template
   | template_inequation of sign * template_term * template_term
   | template_negation of template
   | template_predicate of template_term
constructor t_empty: template_term
constructor template_app: template_term * template_term -> template_term
constructor template_hole: int -> template_term
constructor template_var: int -> template_term
constructor equals: sign
constructor greater_equals: sign
constructor greater_than: sign
constructor less_equals: sign
constructor less_than: sign
constructor template_bimplication: template * template -> template
constructor template_dunno: template
constructor template_equation: template_term * template_term -> template
constructor template_implication: template list * template -> template
constructor template_inequation:
   sign * template_term * template_term -> template
constructor template_negation: template -> template
constructor template_predicate: template_term -> template
val vfs = fn: term -> (indexname * typ) list * (string * typ) list
val indexOf = fn: ''a list -> ''a -> int -> int
val has_eq = fn: term -> bool
val term2template = fn:
   (indexname * typ) list -> (string * typ) list -> term -> template_term
val lemma2predicate = fn: term -> term -> template
val makeTemplatewithContext = fn: term -> term -> template
val lemma2template = fn: term -> template
val thm2template = fn: thm -> template
val tterm2string = fn: template_term -> string
val template2string = fn: template -> string
val t = "height ?t <= size ?t": thm
val th =
   Const ("HOL.Trueprop", "bool => prop") $
     (Const ("Orderings.ord_class.less_eq", "nat => nat => bool") $
       (Const ("Tree.height_class.height", "?'a tree => nat") $
         Var (("t", 0), "?'a tree")) $
       (Const ("Nat.size_class.size", "?'a tree => nat") $
         Var (("t", 0), "?'a tree"))):
   term
### theory "Draft.Templates"
### 0.067s elapsed time, 0.272s cpu time, 0.000s GC time
Loading theory "HOL-Library.Countable" (required by "Draft.Mod_Type_ConnectMoreTemplates" via "Draft.Mod_Type_Connect" via "Perron_Frobenius.HMA_Connect" via "HOL-Analysis.Determinants" via "HOL-Analysis.Cartesian_Space" via "HOL-Analysis.Finite_Cartesian_Product" via "HOL-Library.Countable_Set")
Proofs for inductive predicate(s) "swapidseq"
  Proving monotonicity ...
locale group_hom
  fixes G :: "('a, 'b) monoid_scheme"  (structure)
    and H :: "('c, 'd) monoid_scheme"  (structure)
    and h :: "'a => 'c"
  assumes "group_hom G H h"
locale Group.comm_monoid
  fixes G :: "('a, 'b) monoid_scheme"  (structure)
  assumes "Group.comm_monoid G"
locale comm_monoid_set
  fixes f :: "'a => 'a => 'a"  (infixl \<open>\<^bold>*\<close> 70)
    and z :: "'a"  (\<open>\<^bold>1\<close>)
  assumes "comm_monoid_set (\<^bold>*) \<^bold>1"
locale comm_group
  fixes G :: "('a, 'b) monoid_scheme"  (structure)
  assumes "comm_group G"
### Additional type variable(s) in locale specification "countable": 'a
class normalization_semidom = algebraic_semidom +
  semidom_divide_unit_factor +
  fixes normalize :: "'a => 'a"
  assumes
    "unit_factor_mult_normalize": "!!a. unit_factor a * normalize a = a"
    and "normalize_0": "normalize (0::'a) = (0::'a)"
class countable = type +
  assumes "ex_inj": "EX to_nat. inj to_nat"
Found termination order: "(%p. size_list size (fst p)) <*mlex*> {}"
### theory "HOL-Combinatorics.Permutations"
### 1.038s elapsed time, 4.111s cpu time, 0.584s GC time
Loading theory "Jordan_Normal_Form.Missing_Misc" (required by "Draft.Mod_Type_ConnectMoreTemplates" via "Draft.Mod_Type_Connect" via "Perron_Frobenius.HMA_Connect" via "Jordan_Normal_Form.Spectral_Radius" via "Jordan_Normal_Form.Jordan_Normal_Form_Existence" via "Jordan_Normal_Form.Jordan_Normal_Form" via "Jordan_Normal_Form.Matrix" via "Jordan_Normal_Form.Missing_Ring")
### theory "HOL-Algebra.Group"
### 1.722s elapsed time, 6.813s cpu time, 0.969s GC time
Loading theory "HOL-Algebra.Coset" (required by "Draft.Mod_Type_ConnectMoreTemplates" via "Draft.Mod_Type_Connect" via "Perron_Frobenius.HMA_Connect" via "Jordan_Normal_Form.Spectral_Radius" via "Jordan_Normal_Form.Jordan_Normal_Form_Existence" via "Jordan_Normal_Form.Schur_Decomposition" via "Jordan_Normal_Form.Gram_Schmidt" via "Jordan_Normal_Form.VS_Connect" via "Jordan_Normal_Form.Missing_VectorSpace" via "VectorSpace.VectorSpace")
Proofs for inductive predicate(s) "finite_item"
  Proving monotonicity ...
### theory "Jordan_Normal_Form.Missing_Misc"
### 0.100s elapsed time, 0.400s cpu time, 0.000s GC time
Loading theory "HOL-Algebra.FiniteProduct" (required by "Draft.Mod_Type_ConnectMoreTemplates" via "Draft.Mod_Type_Connect" via "Perron_Frobenius.HMA_Connect" via "Jordan_Normal_Form.Spectral_Radius" via "Jordan_Normal_Form.Jordan_Normal_Form_Existence" via "Jordan_Normal_Form.Jordan_Normal_Form" via "Jordan_Normal_Form.Matrix" via "Jordan_Normal_Form.Missing_Ring" via "HOL-Algebra.Ring")
Proofs for inductive predicate(s) "foldSetDp"
  Proving monotonicity ...
locale normal
  fixes H :: "'a set"
    and G :: "('a, 'b) monoid_scheme"  (structure)
  assumes "normal H G"
val old_countable_datatype_tac = fn: Proof.context -> int -> tactic
class semiring_gcd = gcd + normalization_semidom +
  assumes "gcd_dvd1": "!!a b. gcd a b dvd a"
    and "gcd_dvd2": "!!a b. gcd a b dvd b"
    and "gcd_greatest": "!!c a b. [| c dvd a; c dvd b |] ==> c dvd gcd a b"
    and "normalize_gcd": "!!a b. normalize (gcd a b) = gcd a b"
    and "lcm_gcd": "!!a b. lcm a b = normalize (a * b div gcd a b)"
locale LCD
  fixes B :: "'b set"
    and D :: "'a set"
    and f :: "'b => 'a => 'a"  (infixl \<open>\<cdot>\<close> 70)
  assumes "LCD B D (\<cdot>)"
### ML warning (line 93 of "~~/src/HOL/Tools/BNF/bnf_lfp_countable.ML"):
### Pattern is not exhaustive.
### ML warning (line 139 of "~~/src/HOL/Tools/BNF/bnf_lfp_countable.ML"):
### Pattern is not exhaustive.
### ML warning (line 143 of "~~/src/HOL/Tools/BNF/bnf_lfp_countable.ML"):
### Matches are not exhaustive.
### ML warning (line 145 of "~~/src/HOL/Tools/BNF/bnf_lfp_countable.ML"):
### Matches are not exhaustive.
### ML warning (line 156 of "~~/src/HOL/Tools/BNF/bnf_lfp_countable.ML"):
### Pattern is not exhaustive.
signature BNF_LFP_COUNTABLE =
  sig
    val countable_datatype_tac: Proof.context -> tactic
    val derive_encode_injectives_thms:
       Proof.context -> string list -> thm list
  end
structure BNF_LFP_Countable: BNF_LFP_COUNTABLE
val countable_datatype_tac = fn: Proof.context -> thm -> thm Seq.seq
val countable_tac = fn: Proof.context -> int -> tactic
locale ACeD
  fixes D :: "'a set"
    and f :: "'a => 'a => 'a"  (infixl \<open>\<cdot>\<close> 70)
    and e :: "'a"
  assumes "ACeD D (\<cdot>) e"
locale Group.comm_monoid
  fixes G :: "('a, 'b) monoid_scheme"  (structure)
  assumes "Group.comm_monoid G"
locale Group.comm_monoid
  fixes G :: "('a, 'b) monoid_scheme"  (structure)
  assumes "Group.comm_monoid G"
### theory "HOL-Library.Countable"
### 1.279s elapsed time, 5.050s cpu time, 0.736s GC time
Loading theory "HOL-Library.Countable_Set" (required by "Draft.Mod_Type_ConnectMoreTemplates" via "Draft.Mod_Type_Connect" via "Perron_Frobenius.HMA_Connect" via "HOL-Analysis.Determinants" via "HOL-Analysis.Cartesian_Space" via "HOL-Analysis.Finite_Cartesian_Product")
### theory "HOL-Algebra.FiniteProduct"
### 0.511s elapsed time, 2.025s cpu time, 0.221s GC time
Loading theory "HOL-Algebra.Ring" (required by "Draft.Mod_Type_ConnectMoreTemplates" via "Draft.Mod_Type_Connect" via "Perron_Frobenius.HMA_Connect" via "Jordan_Normal_Form.Spectral_Radius" via "Jordan_Normal_Form.Jordan_Normal_Form_Existence" via "Jordan_Normal_Form.Jordan_Normal_Form" via "Jordan_Normal_Form.Matrix" via "Jordan_Normal_Form.Missing_Ring")
### Ambiguous input (line 611 of "~~/src/HOL/Algebra/Coset.thy") produces 2 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("\<^fixed>r_congruent_indexed" ("_index" ("_position" G))
###       ("_position" H))
###     ("_Coll" ("_pattern" ("_position" x) ("_position" y))
###       ("\<^const>HOL.conj"
###         ("\<^const>Set.member" ("_position" x)
###           ("_applC" ("_position" carrier) ("_position" G)))
###         ("\<^const>HOL.conj"
###           ("\<^const>Set.member" ("_position" y)
###             ("_applC" ("_position" carrier) ("_position" G)))
###           ("\<^const>Set.member"
###             ("\<^const>Group.monoid.mult_indexed"
###               ("\<^const>Group.m_inv_indexed" ("_index" ("_position" G))
###                 ("_position" x))
###               ("_index" ("_position" G)) ("_position" y))
###             ("_position" H)))))))
### ("\<^const>HOL.Trueprop"
###   ("\<^fixed>r_congruent_indexed" ("_index" ("_position" G))
###     ("\<^const>HOL.eq" ("_position" H)
###       ("_Coll" ("_pattern" ("_position" x) ("_position" y))
###         ("\<^const>HOL.conj"
###           ("\<^const>Set.member" ("_position" x)
###             ("_applC" ("_position" carrier) ("_position" G)))
###           ("\<^const>HOL.conj"
###             ("\<^const>Set.member" ("_position" y)
###               ("_applC" ("_position" carrier) ("_position" G)))
###             ("\<^const>Set.member"
###               ("\<^const>Group.monoid.mult_indexed"
###                 ("\<^const>Group.m_inv_indexed" ("_index" ("_position" G))
###                   ("_position" x))
###                 ("_index" ("_position" G)) ("_position" y))
###               ("_position" H))))))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
locale abelian_monoid
  fixes G :: "('a, 'b) ring_scheme"  (structure)
  assumes "abelian_monoid G"
locale comm_monoid_set
  fixes f :: "'a => 'a => 'a"  (infixl \<open>\<^bold>*\<close> 70)
    and z :: "'a"  (\<open>\<^bold>1\<close>)
  assumes "comm_monoid_set (\<^bold>*) \<^bold>1"
locale abelian_group
  fixes G :: "('a, 'b) ring_scheme"  (structure)
  assumes "abelian_group G"
class factorial_semiring = normalization_semidom +
  assumes
    "prime_factorization_exists":
      "!!x. x ~= (0::'a) ==>
            EX A. (ALL x. x :# A --> prime_elem x) &
                  normalize (\<Prod>\<^sub># A) = normalize x"
### Cannot skip proof of schematic goal statement
locale abelian_monoid
  fixes G :: "('a, 'b) ring_scheme"  (structure)
  assumes "abelian_monoid G"
### Cannot skip proof of schematic goal statement
### theory "HOL-Library.Countable_Set"
### 0.483s elapsed time, 1.913s cpu time, 0.204s GC time
Loading theory "HOL-Library.Countable_Complete_Lattices" (required by "Draft.Mod_Type_ConnectMoreTemplates" via "Draft.Mod_Type_Connect" via "Perron_Frobenius.HMA_Connect" via "HOL-Analysis.Cartesian_Euclidean_Space" via "HOL-Analysis.Derivative" via "HOL-Analysis.Bounded_Linear_Function" via "HOL-Analysis.Uniform_Limit" via "HOL-Analysis.Summation_Tests" via "HOL-Library.Extended_Real" via "HOL-Library.Extended_Nat" via "HOL-Library.Order_Continuity")
locale abelian_monoid
  fixes G :: "('a, 'b) ring_scheme"  (structure)
  assumes "abelian_monoid G"
class factorial_semiring = normalization_semidom +
  assumes
    "prime_factorization_exists":
      "!!x. x ~= (0::'a) ==>
            EX A. (ALL x. x :# A --> prime_elem x) &
                  normalize (\<Prod>\<^sub># A) = normalize x"
### Cannot skip proof of schematic goal statement
locale abelian_group
  fixes G :: "('a, 'b) ring_scheme"  (structure)
  assumes "abelian_group G"
### Cannot skip proof of schematic goal statement
### theory "HOL-Algebra.Coset"
### 1.337s elapsed time, 5.285s cpu time, 0.682s GC time
Loading theory "HOL-Library.Set_Idioms" (required by "Draft.Mod_Type_ConnectMoreTemplates" via "Draft.Mod_Type_Connect" via "Perron_Frobenius.HMA_Connect" via "HOL-Analysis.Cartesian_Euclidean_Space" via "HOL-Analysis.Derivative" via "HOL-Analysis.Bounded_Linear_Function" via "HOL-Analysis.Topology_Euclidean_Space" via "HOL-Analysis.Elementary_Normed_Spaces" via "HOL-Analysis.Elementary_Metric_Spaces" via "HOL-Analysis.Abstract_Topology_2" via "HOL-Analysis.Elementary_Topology")
locale Ring.semiring
  fixes R :: "('a, 'b) ring_scheme"  (structure)
  assumes "semiring R"
locale Ring.ring
  fixes R :: "('a, 'b) ring_scheme"  (structure)
  assumes "ring R"
locale cring
  fixes R :: "('a, 'b) ring_scheme"  (structure)
  assumes "cring R"
### theory "HOL-Library.Set_Idioms"
### 0.238s elapsed time, 0.937s cpu time, 0.113s GC time
Loading theory "HOL-Analysis.Metric_Arith" (required by "Draft.Mod_Type_ConnectMoreTemplates" via "Draft.Mod_Type_Connect" via "Perron_Frobenius.HMA_Connect" via "HOL-Analysis.Cartesian_Euclidean_Space" via "HOL-Analysis.Derivative" via "HOL-Analysis.Bounded_Linear_Function" via "HOL-Analysis.Topology_Euclidean_Space" via "HOL-Analysis.Elementary_Normed_Spaces" via "HOL-Analysis.Elementary_Metric_Spaces")
class countable_complete_lattice = Inf + Sup + lattice + bot + top +
  assumes "ccInf_lower": "!!A x. [| countable A; x : A |] ==> Inf A <= x"
  assumes
    "ccInf_greatest":
      "!!A z. [| countable A; !!x. x : A ==> z <= x |] ==> z <= Inf A"
  assumes "ccSup_upper": "!!A x. [| countable A; x : A |] ==> x <= Sup A"
  assumes
    "ccSup_least":
      "!!A z. [| countable A; !!x. x : A ==> x <= z |] ==> Sup A <= z"
  assumes "ccInf_empty": "Inf {} = top"
  assumes "ccSup_empty": "Sup {} = bot"
locale domain
  fixes R :: "('a, 'b) ring_scheme"  (structure)
  assumes "domain R"
locale Ring.field
  fixes R :: "('a, 'b) ring_scheme"  (structure)
  assumes "field R"
locale Ring.ring
  fixes R :: "('a, 'b) ring_scheme"  (structure)
  assumes "ring R"
locale Ring.ring
  fixes R :: "('a, 'b) ring_scheme"  (structure)
  assumes "ring R"
### ML warning (line 44 of "~~/src/HOL/Algebra/ringsimp.ML"):
### Value identifier (s) has not been referenced.
### ML warning (line 47 of "~~/src/HOL/Algebra/ringsimp.ML"):
### Matches are not exhaustive.
signature RINGSIMP =
  sig
    val add_struct: string * term list -> attribute
    val algebra_tac: Proof.context -> int -> tactic
    val del_struct: string * term list -> attribute
    val print_structures: Proof.context -> unit
  end
structure Ringsimp: RINGSIMP
signature METRIC_ARITH =
  sig
    val argo_timeout: real Config.T
    val metric_arith_tac: Proof.context -> int -> tactic
    val trace: bool Config.T
  end
structure Metric_Arith: METRIC_ARITH
### theory "HOL-Analysis.Metric_Arith"
### 0.660s elapsed time, 2.609s cpu time, 0.263s GC time
Loading theory "HOL-Analysis.Abstract_Topology" (required by "Draft.Mod_Type_ConnectMoreTemplates" via "Draft.Mod_Type_Connect" via "Perron_Frobenius.HMA_Connect" via "HOL-Analysis.Cartesian_Euclidean_Space" via "HOL-Analysis.Derivative" via "HOL-Analysis.Bounded_Linear_Function" via "HOL-Analysis.Topology_Euclidean_Space" via "HOL-Analysis.Elementary_Normed_Spaces" via "HOL-Analysis.Elementary_Metric_Spaces" via "HOL-Analysis.Abstract_Topology_2")
locale Ring.semiring
  fixes R :: "('a, 'b) ring_scheme"  (structure)
  assumes "semiring R"
class countable_complete_distrib_lattice = countable_complete_lattice +
  assumes
    "sup_ccInf": "!!B a. countable B ==> sup a (Inf B) = Inf (sup a ` B)"
  assumes
    "inf_ccSup": "!!B a. countable B ==> inf a (Sup B) = Sup (inf a ` B)"
locale domain
  fixes R :: "('a, 'b) ring_scheme"  (structure)
  assumes "domain R"
locale ring_hom_cring
  fixes R :: "('a, 'b) ring_scheme"  (structure)
    and S :: "('c, 'd) ring_scheme"  (structure)
    and h :: "'a => 'c"
  assumes "ring_hom_cring R S h"
class factorial_semiring_gcd = factorial_semiring + Gcd +
  assumes "gcd_eq_gcd_factorial": "!!a b. gcd a b = gcd_factorial a b"
    and "lcm_eq_lcm_factorial": "!!a b. lcm a b = lcm_factorial a b"
    and "Gcd_eq_Gcd_factorial": "!!A. Gcd A = Gcd_factorial A"
    and "Lcm_eq_Lcm_factorial": "!!A. Lcm A = Lcm_factorial A"
### theory "HOL-Library.Countable_Complete_Lattices"
### 2.255s elapsed time, 8.927s cpu time, 0.886s GC time
Loading theory "HOL-Analysis.Inner_Product" (required by "Draft.Mod_Type_ConnectMoreTemplates" via "Draft.Mod_Type_Connect" via "Perron_Frobenius.HMA_Connect" via "HOL-Analysis.Determinants" via "HOL-Analysis.Cartesian_Space" via "HOL-Analysis.Finite_Cartesian_Product" via "HOL-Analysis.Euclidean_Space")
### theory "HOL-Algebra.Ring"
### 2.896s elapsed time, 11.458s cpu time, 1.189s GC time
Loading theory "HOL-Algebra.Module" (required by "Draft.Mod_Type_ConnectMoreTemplates" via "Draft.Mod_Type_Connect" via "Perron_Frobenius.HMA_Connect" via "Jordan_Normal_Form.Spectral_Radius" via "Jordan_Normal_Form.Jordan_Normal_Form_Existence" via "Jordan_Normal_Form.Jordan_Normal_Form" via "Jordan_Normal_Form.Matrix")
class real_inner = dist_norm + real_vector + sgn_div_norm +
  uniformity_dist + open_uniformity +
  fixes inner :: "'a => 'a => real"
  assumes "inner_commute": "!!x y. inner x y = inner y x"
    and "inner_add_left": "!!x y z. inner (x + y) z = inner x z + inner y z"
    and
    "inner_scaleR_left": "!!r x y. inner (r *\<^sub>R x) y = r * inner x y"
    and "inner_ge_zero": "!!x. 0 <= inner x x"
    and "inner_eq_zero_iff": "!!x. (inner x x = 0) = (x = (0::'a))"
    and "norm_eq_sqrt_inner": "!!x. norm x = sqrt (inner x x)"
locale module
  fixes R :: "('a, 'b) ring_scheme"  (structure)
    and M :: "('a, 'c, 'd) module_scheme"  (structure)
  assumes "module R M"
locale algebra
  fixes R :: "('a, 'b) ring_scheme"  (structure)
    and M :: "('a, 'c, 'd) module_scheme"  (structure)
  assumes "algebra R M"
instantiation
  real :: real_inner
  inner_real == inner :: real => real => real
instantiation
  complex :: real_inner
  inner_complex == inner :: complex => complex => real
bundle inner_syntax
bundle no_inner_syntax
### theory "HOL-Analysis.Inner_Product"
### 1.102s elapsed time, 4.351s cpu time, 0.527s GC time
Loading theory "Jordan_Normal_Form.Missing_Ring" (required by "Draft.Mod_Type_ConnectMoreTemplates" via "Draft.Mod_Type_Connect" via "Perron_Frobenius.HMA_Connect" via "Jordan_Normal_Form.Spectral_Radius" via "Jordan_Normal_Form.Jordan_Normal_Form_Existence" via "Jordan_Normal_Form.Jordan_Normal_Form" via "Jordan_Normal_Form.Matrix")
Proofs for inductive predicate(s) "generate_topology_on"
  Proving monotonicity ...
locale submodule
  fixes H :: "'c set"
    and R :: "('a, 'b) ring_scheme"
    and M :: "('a, 'c, 'd) module_scheme"  (structure)
  assumes "submodule H R M"
### theory "HOL-Analysis.Abstract_Topology"
### 2.620s elapsed time, 10.344s cpu time, 1.135s GC time
Loading theory "HOL-Analysis.Abstract_Limits" (required by "Draft.Mod_Type_ConnectMoreTemplates" via "Draft.Mod_Type_Connect" via "Perron_Frobenius.HMA_Connect" via "HOL-Analysis.Cartesian_Euclidean_Space" via "HOL-Analysis.Derivative" via "HOL-Analysis.Bounded_Linear_Function" via "HOL-Analysis.Function_Topology")
### theory "HOL-Algebra.Module"
### 1.502s elapsed time, 5.932s cpu time, 0.638s GC time
Loading theory "HOL-Analysis.L2_Norm" (required by "Draft.Mod_Type_ConnectMoreTemplates" via "Draft.Mod_Type_Connect" via "Perron_Frobenius.HMA_Connect" via "HOL-Analysis.Determinants" via "HOL-Analysis.Cartesian_Space" via "HOL-Analysis.Finite_Cartesian_Product" via "HOL-Analysis.Euclidean_Space")
### theory "HOL-Analysis.L2_Norm"
### 0.112s elapsed time, 0.437s cpu time, 0.084s GC time
Loading theory "HOL-Analysis.Operator_Norm" (required by "Draft.Mod_Type_ConnectMoreTemplates" via "Draft.Mod_Type_Connect" via "Perron_Frobenius.HMA_Connect" via "HOL-Analysis.Cartesian_Euclidean_Space" via "HOL-Analysis.Derivative" via "HOL-Analysis.Bounded_Linear_Function")
### theory "HOL-Analysis.Abstract_Limits"
### 0.237s elapsed time, 0.937s cpu time, 0.084s GC time
Loading theory "HOL-Analysis.Product_Vector" (required by "Draft.Mod_Type_ConnectMoreTemplates" via "Draft.Mod_Type_Connect" via "Perron_Frobenius.HMA_Connect" via "HOL-Analysis.Determinants" via "HOL-Analysis.Cartesian_Space" via "HOL-Analysis.Finite_Cartesian_Product" via "HOL-Analysis.Euclidean_Space")
### theory "HOL-Analysis.Operator_Norm"
### 0.098s elapsed time, 0.386s cpu time, 0.000s GC time
Loading theory "HOL-Library.BigO" (required by "Draft.Mod_Type_ConnectMoreTemplates" via "Draft.ExtrEqs")
class ordered_semiring_strict = comm_monoid_add +
  ordered_cancel_ab_semigroup_add + semiring +
  assumes
    "mult_strict_left_mono":
      "!!a b c. [| a < b; (0::'a) < c |] ==> c * a < c * b"
  assumes
    "mult_strict_right_mono":
      "!!a b c. [| a < b; (0::'a) < c |] ==> a * c < b * c"
locale module_prod
  fixes s1 :: "'a => 'b => 'b"
    and s2 :: "'a => 'c => 'c"
  assumes "module_prod s1 s2"
locale vector_space_prod
  fixes s1 :: "'a => 'b => 'b"  (infixr \<open>*a\<close> 75)
    and s2 :: "'a => 'c => 'c"  (infixr \<open>*b\<close> 75)
  assumes "vector_space_prod (*a) (*b)"
### Cannot skip proof of schematic goal statement
instantiation
  prod :: (real_vector, real_vector) real_vector
  scaleR_prod == scaleR :: real => 'a * 'b => 'a * 'b
### Cannot skip proof of schematic goal statement
instantiation
  prod :: (metric_space, metric_space) dist
  dist_prod == dist :: 'a * 'b => 'a * 'b => real
instantiation
  prod :: (uniformity, uniformity) uniformity
  uniformity_prod == uniformity :: (('a * 'b) * 'a * 'b) filter
instantiation
  prod :: (uniform_space, uniform_space) uniform_space
instantiation
  prod :: (metric_space, metric_space) uniformity_dist
instantiation
  prod :: (metric_space, metric_space) metric_space
### theory "HOL-Computational_Algebra.Factorial_Ring"
### 7.099s elapsed time, 28.056s cpu time, 3.240s GC time
Loading theory "HOL-Computational_Algebra.Euclidean_Algorithm" (required by "Draft.Mod_Type_ConnectMoreTemplates" via "Draft.Mod_Type_Connect" via "Perron_Frobenius.HMA_Connect" via "Jordan_Normal_Form.Spectral_Radius" via "Jordan_Normal_Form.Jordan_Normal_Form_Existence" via "Jordan_Normal_Form.Jordan_Normal_Form" via "Jordan_Normal_Form.Char_Poly" via "Polynomial_Factorization.Fundamental_Theorem_Algebra_Factorized" via "Polynomial_Factorization.Order_Polynomial" via "Polynomial_Interpolation.Missing_Polynomial" via "HOL-Computational_Algebra.Polynomial_Factorial" via "HOL-Computational_Algebra.Normalized_Fraction")
instantiation
  prod :: (real_normed_vector, real_normed_vector) real_normed_vector
  sgn_prod == sgn :: 'a * 'b => 'a * 'b
  norm_prod == norm :: 'a * 'b => real
### theory "HOL-Library.BigO"
### 0.819s elapsed time, 3.240s cpu time, 0.249s GC time
Loading theory "Polynomial_Interpolation.Missing_Unsorted" (required by "Draft.Mod_Type_ConnectMoreTemplates" via "Draft.Mod_Type_Connect" via "Perron_Frobenius.HMA_Connect" via "Jordan_Normal_Form.Spectral_Radius" via "Jordan_Normal_Form.Jordan_Normal_Form_Existence" via "Jordan_Normal_Form.Jordan_Normal_Form" via "Jordan_Normal_Form.Char_Poly" via "Polynomial_Factorization.Fundamental_Theorem_Algebra_Factorized" via "Polynomial_Factorization.Order_Polynomial" via "Polynomial_Interpolation.Missing_Polynomial")
locale finite_dimensional_vector_space_prod
  fixes s1 :: "'a => 'b => 'b"  (infixr \<open>*a\<close> 75)
    and s2 :: "'a => 'c => 'c"  (infixr \<open>*b\<close> 75)
    and B1 :: "'b set"
    and B2 :: "'c set"
  assumes "finite_dimensional_vector_space_prod (*a) (*b) B1 B2"
### theory "HOL-Analysis.Product_Vector"
### 0.983s elapsed time, 3.876s cpu time, 0.422s GC time
Loading theory "HOL-Analysis.Elementary_Topology" (required by "Draft.Mod_Type_ConnectMoreTemplates" via "Draft.Mod_Type_Connect" via "Perron_Frobenius.HMA_Connect" via "HOL-Analysis.Cartesian_Euclidean_Space" via "HOL-Analysis.Derivative" via "HOL-Analysis.Bounded_Linear_Function" via "HOL-Analysis.Topology_Euclidean_Space" via "HOL-Analysis.Elementary_Normed_Spaces" via "HOL-Analysis.Elementary_Metric_Spaces" via "HOL-Analysis.Abstract_Topology_2")
### Missing patterns in function definition:
### max_list_non_empty [] = undefined
Found termination order: "length <*mlex*> {}"
class ordered_idom = ordered_semiring_strict + idom +
  assumes "zero_less_one": "(0::'a) < (1::'a)"
class comm_monoid_mult = ab_semigroup_mult + monoid_mult + dvd +
  assumes "mult_1": "!!a. (1::'a) * a = a"
class topological_space = open +
  assumes "open_UNIV": "open UNIV"
  assumes "open_Int": "!!S T. [| open S; open T |] ==> open (S Int T)"
  assumes "open_Union": "!!K. Ball K open ==> open (\<Union> K)"
locale countable_basis
  fixes p :: "'a set => bool"
    and B :: "'a set set"
  assumes "countable_basis p B"
class second_countable_topology = topological_space +
  assumes
    "ex_countable_subbasis":
      "EX B. countable B & open = generate_topology B"
### theory "Polynomial_Interpolation.Missing_Unsorted"
### 1.273s elapsed time, 5.017s cpu time, 0.574s GC time
Loading theory "HOL-Analysis.Euclidean_Space" (required by "Draft.Mod_Type_ConnectMoreTemplates" via "Draft.Mod_Type_Connect" via "Perron_Frobenius.HMA_Connect" via "HOL-Analysis.Determinants" via "HOL-Analysis.Cartesian_Space" via "HOL-Analysis.Finite_Cartesian_Product")
locale Group.comm_monoid
  fixes G :: "('a, 'b) monoid_scheme"  (structure)
  assumes "Group.comm_monoid G"
locale csemiring
  fixes R :: "('a, 'b) ring_scheme"  (structure)
  assumes "csemiring R"
locale cring
  fixes R :: "('a, 'b) ring_scheme"  (structure)
  assumes "cring R"
class euclidean_semiring_gcd = normalization_euclidean_semiring + Gcd +
  assumes "gcd_eucl": "normalization_euclidean_semiring_class.gcd = gcd"
    and "lcm_eucl": "normalization_euclidean_semiring_class.lcm = lcm"
  assumes "Gcd_eucl": "normalization_euclidean_semiring_class.Gcd = Gcd"
    and "Lcm_eucl": "normalization_euclidean_semiring_class.Lcm = Lcm"
class euclidean_space = real_inner +
  fixes Basis :: "'a set"
  assumes "nonempty_Basis": "Basis ~= {}"
  assumes "finite_Basis": "finite Basis"
  assumes
    "inner_Basis":
      "!!u v.
          [| u : Basis; v : Basis |]
          ==> inner u v = (if u = v then 1 else 0)"
  assumes
    "euclidean_all_zero_iff":
      "!!x. (ALL u:Basis. inner x u = 0) = (x = (0::'a))"
locale Group.comm_monoid
  fixes G :: "('a, 'b) monoid_scheme"  (structure)
  assumes "Group.comm_monoid G"
### theory "HOL-Analysis.Elementary_Topology"
### 2.039s elapsed time, 8.036s cpu time, 0.928s GC time
Loading theory "HOL-Computational_Algebra.Polynomial" (required by "Draft.Mod_Type_ConnectMoreTemplates" via "Draft.Mod_Type_Connect" via "Perron_Frobenius.HMA_Connect" via "Jordan_Normal_Form.Spectral_Radius" via "Jordan_Normal_Form.Jordan_Normal_Form_Existence" via "Jordan_Normal_Form.Jordan_Normal_Form" via "Jordan_Normal_Form.Char_Poly" via "Polynomial_Factorization.Fundamental_Theorem_Algebra_Factorized" via "Polynomial_Factorization.Order_Polynomial" via "Polynomial_Interpolation.Missing_Polynomial" via "HOL-Computational_Algebra.Polynomial_Factorial")
locale cring
  fixes R :: "('a, 'b) ring_scheme"  (structure)
  assumes "cring R"
### theory "Jordan_Normal_Form.Missing_Ring"
### 3.880s elapsed time, 15.288s cpu time, 1.783s GC time
Loading theory "Draft.ExtrEqs" (required by "Draft.Mod_Type_ConnectMoreTemplates")
instantiation
  real :: euclidean_space
  Basis_real == Basis :: real set
instantiation
  complex :: euclidean_space
  Basis_complex == Basis :: complex set
val eqpattern =
   Pattern
    (
       Const ("HOL.Trueprop", "bool => prop") $
         (Const ("HOL.eq", "?'a => ?'a => bool") $
           Var (("_dummy_", 1), "?'a") $ Var (("_dummy_", 2), "?'a"))
       ):
   term Find_Theorems.criterion
val badeqpattern = Pattern (Const ("Pure.eq", "?'a => ?'a => prop")):
   term Find_Theorems.criterion
val undefpattern =
   Pattern
    (
       Const ("HOL.Trueprop", "bool => prop") $
         (Const ("HOL.eq", "?'a => ?'a => bool") $
           Var (("_dummy_", 1), "?'a") $ Const ("HOL.undefined", "?'a"))
       ):
   term Find_Theorems.criterion
val thmpattern =
   Pattern
    (Const ("HOL.Trueprop", "bool => prop") $ Var (("_dummy_", 1), "bool")):
   term Find_Theorems.criterion
val badnames =
   ["*nitpick*", "*Nitpick*", "*full_exhaustive*", "*_def*", "Enum.finite*",
    "*Quickcheck*", "ATP*", "*Nunchaku*", "*Code*", "*BNF*", "*SMT*",
    "*.*.*"]:
   string list
val unwanted_names =
   [(false, Name "*nitpick*"), (false, Name "*Nitpick*"),
    (false, Name "*full_exhaustive*"), (false, Name "*_def*"),
    (false, Name "Enum.finite*"), (false, Name "*Quickcheck*"),
    (false, Name "ATP*"), (false, Name "*Nunchaku*"),
    (false, Name "*Code*"), (false, Name "*BNF*"), (false, Name "*SMT*"),
    (false, Name "*.*.*")]:
   (bool * term Find_Theorems.criterion) list
val has_vars = fn: term -> bool
val get_all_eqs = fn: string -> Proof.context -> (string * thm) list
val get_all_thms = fn: string -> Proof.context -> (string * thm) list
val get_noneq_thms = fn: string -> Proof.context -> (string * thm) list
val template_eqs = fn:
   string -> Proof.context -> (string * thm * template) list
val template_thms = fn:
   string -> Proof.context -> (string * thm * template) list
### theory "Draft.ExtrEqs"
### 1.555s elapsed time, 5.832s cpu time, 3.334s GC time
Loading theory "HOL-Library.Complex_Order" (required by "Draft.Mod_Type_ConnectMoreTemplates" via "Draft.Mod_Type_Connect" via "Perron_Frobenius.HMA_Connect" via "Jordan_Normal_Form.Spectral_Radius" via "Jordan_Normal_Form.Jordan_Normal_Form_Existence" via "Jordan_Normal_Form.Jordan_Normal_Form" via "Jordan_Normal_Form.Matrix" via "Jordan_Normal_Form.Conjugate")
instantiation
  prod :: (real_inner, real_inner) real_inner
  inner_prod == inner :: 'a * 'b => 'a * 'b => real
instantiation
  prod :: (euclidean_space, euclidean_space) euclidean_space
  Basis_prod == Basis :: ('a * 'b) set
instantiation
  complex :: order
  less_eq_complex == less_eq :: complex => complex => bool
  less_complex == less :: complex => complex => bool
### Cannot skip proof of schematic goal statement
### theory "HOL-Library.Complex_Order"
### 0.085s elapsed time, 0.328s cpu time, 0.072s GC time
Loading theory "Jordan_Normal_Form.Conjugate" (required by "Draft.Mod_Type_ConnectMoreTemplates" via "Draft.Mod_Type_Connect" via "Perron_Frobenius.HMA_Connect" via "Jordan_Normal_Form.Spectral_Radius" via "Jordan_Normal_Form.Jordan_Normal_Form_Existence" via "Jordan_Normal_Form.Jordan_Normal_Form" via "Jordan_Normal_Form.Matrix")
### Cannot skip proof of schematic goal statement
### theory "HOL-Analysis.Euclidean_Space"
### 2.690s elapsed time, 10.282s cpu time, 3.980s GC time
Loading theory "HOL-Analysis.Finite_Cartesian_Product" (required by "Draft.Mod_Type_ConnectMoreTemplates" via "Draft.Mod_Type_Connect" via "Perron_Frobenius.HMA_Connect" via "HOL-Analysis.Determinants" via "HOL-Analysis.Cartesian_Space")
class conjugate = type +
  fixes conjugate :: "'a => 'a"
  assumes "conjugate_id": "!!a. conjugate (conjugate a) = a"
    and
    "conjugate_cancel_iff": "!!a b. (conjugate a = conjugate b) = (a = b)"
instantiation
  poly :: (zero) zero
  zero_poly == zero_class.zero :: 'a poly
consts
  Poly :: "'a list => 'a poly"
class conjugatable_ring = conjugate + ring +
  assumes
    "conjugate_dist_mul":
      "!!a b. conjugate (a * b) = conjugate a * conjugate b"
    and
    "conjugate_dist_add":
      "!!a b. conjugate (a + b) = conjugate a + conjugate b"
    and "conjugate_neg": "!!a. conjugate (- a) = - conjugate a"
    and "conjugate_zero": "conjugate (0::'a) = (0::'a)"
instantiation
  poly :: ({zero,equal}) equal
  equal_poly == equal_class.equal :: 'a poly => 'a poly => bool
instantiation
  poly :: (comm_monoid_add) comm_monoid_add
  plus_poly == plus :: 'a poly => 'a poly => 'a poly
instantiation
  poly :: (cancel_comm_monoid_add) cancel_comm_monoid_add
  minus_poly == minus :: 'a poly => 'a poly => 'a poly
instantiation
  poly :: (ab_group_add) ab_group_add
  uminus_poly == uminus :: 'a poly => 'a poly
Found termination order: "(%p. length (snd p)) <*mlex*> {}"
instantiation
  poly :: (comm_semiring_0) comm_semiring_0
  times_poly == times :: 'a poly => 'a poly => 'a poly
instantiation
  poly :: (comm_semiring_1) comm_semiring_1
  one_poly == one_class.one :: 'a poly
bundle vec_syntax
bundle no_vec_syntax
instantiation
  vec :: (zero, finite) zero
  zero_vec == zero_class.zero :: ('a, 'b) vec
instantiation
  vec :: (plus, finite) plus
  plus_vec == plus :: ('a, 'b) vec => ('a, 'b) vec => ('a, 'b) vec
instantiation
  vec :: (minus, finite) minus
  minus_vec == minus :: ('a, 'b) vec => ('a, 'b) vec => ('a, 'b) vec
instantiation
  vec :: (uminus, finite) uminus
  uminus_vec == uminus :: ('a, 'b) vec => ('a, 'b) vec
instantiation
  vec :: (times, finite) times
  times_vec == times :: ('a, 'b) vec => ('a, 'b) vec => ('a, 'b) vec
instantiation
  vec :: (one, finite) one
  one_vec == one_class.one :: ('a, 'b) vec
instantiation
  vec :: (ord, finite) ord
  less_eq_vec == less_eq :: ('a, 'b) vec => ('a, 'b) vec => bool
  less_vec == less :: ('a, 'b) vec => ('a, 'b) vec => bool
instantiation
  poly :: (linordered_idom) linordered_idom
  sgn_poly == sgn :: 'a poly => 'a poly
  abs_poly == abs :: 'a poly => 'a poly
  less_eq_poly == less_eq :: 'a poly => 'a poly => bool
  less_poly == less :: 'a poly => 'a poly => bool
instantiation
  vec :: (real_vector, finite) real_vector
  scaleR_vec == scaleR :: real => ('a, 'b) vec => ('a, 'b) vec
instantiation
  vec :: (topological_space, finite) topological_space
  open_vec == open :: ('a, 'b) vec set => bool
instantiation
  vec :: (metric_space, finite) dist
  dist_vec == dist :: ('a, 'b) vec => ('a, 'b) vec => real
instantiation
  vec :: (metric_space, finite) uniformity_dist
  uniformity_vec == uniformity :: (('a, 'b) vec * ('a, 'b) vec) filter
instantiation
  vec :: (metric_space, finite) metric_space
instantiation
  vec :: (real_normed_vector, finite) real_normed_vector
  sgn_vec == sgn :: ('a, 'b) vec => ('a, 'b) vec
  norm_vec == norm :: ('a, 'b) vec => real
instantiation
  vec :: (real_inner, finite) real_inner
  inner_vec == inner :: ('a, 'b) vec => ('a, 'b) vec => real
instantiation
  vec :: (euclidean_space, finite) euclidean_space
  Basis_vec == Basis :: ('a, 'b) vec set
Found termination order: "(%p. length (snd p)) <*mlex*> {}"
class conjugatable_ordered_ring = conjugatable_ring +
  ordered_comm_monoid_add +
  assumes "conjugate_square_positive": "!!a. (0::'a) <= a * conjugate a"
### theory "HOL-Analysis.Finite_Cartesian_Product"
### 1.678s elapsed time, 6.634s cpu time, 0.561s GC time
Loading theory "HOL-Analysis.Linear_Algebra" (required by "Draft.Mod_Type_ConnectMoreTemplates" via "Draft.Mod_Type_Connect" via "Perron_Frobenius.HMA_Connect" via "HOL-Analysis.Determinants" via "HOL-Analysis.Cartesian_Space")
Proofs for inductive predicate(s) "algebraic_int"
  Proving monotonicity ...
instantiation
  poly :: (idom_divide) idom_divide
  divide_poly == divide :: 'a poly => 'a poly => 'a poly
Found termination order:
  "(%p. size (snd (snd (snd (snd (snd p)))))) <*mlex*> {}"
class real_inner = real_normed_vector +
  fixes inner :: "'a => 'a => real"
  assumes "inner_commute": "!!x y. x \<bullet> y = y \<bullet> x"
    and
    "inner_add_left":
      "!!x y z. (x + y) \<bullet> z = x \<bullet> z + y \<bullet> z"
    and
    "inner_scaleR_left":
      "!!r x y. r *\<^sub>R x \<bullet> y = r * (x \<bullet> y)"
    and "inner_ge_zero": "!!x. 0 <= x \<bullet> x"
    and "inner_eq_zero_iff": "!!x. (x \<bullet> x = 0) = (x = (0::'a))"
    and "norm_eq_sqrt_inner": "!!x. norm x = sqrt (x \<bullet> x)"
Found termination order:
  "(%p. size (snd (snd (snd (snd (snd p)))))) <*mlex*> {}"
instantiation
  poly :: ({idom_divide,semidom_divide_unit_factor}) normalization_semidom
  normalize_poly == normalize :: 'a poly => 'a poly
  unit_factor_poly == unit_factor :: 'a poly => 'a poly
### theory "HOL-Analysis.Linear_Algebra"
### 1.058s elapsed time, 4.143s cpu time, 0.574s GC time
Loading theory "HOL-Analysis.Affine" (required by "Draft.Mod_Type_ConnectMoreTemplates" via "Draft.Mod_Type_Connect" via "Perron_Frobenius.HMA_Connect" via "HOL-Analysis.Cartesian_Euclidean_Space" via "HOL-Analysis.Derivative" via "HOL-Analysis.Line_Segment" via "HOL-Analysis.Convex")
instantiation
  complex :: conjugatable_ordered_field
  conjugate_complex == conjugate :: complex => complex
instantiation
  real :: conjugatable_ordered_field
  conjugate_real == conjugate :: real => real
instantiation
  rat :: conjugatable_ordered_field
  conjugate_rat == conjugate :: rat => rat
instantiation
  int :: conjugatable_ordered_ring
  conjugate_int == conjugate :: int => int
### theory "Jordan_Normal_Form.Conjugate"
### 3.175s elapsed time, 12.517s cpu time, 1.295s GC time
Loading theory "HOL-Analysis.Cartesian_Space" (required by "Draft.Mod_Type_ConnectMoreTemplates" via "Draft.Mod_Type_Connect" via "Perron_Frobenius.HMA_Connect" via "HOL-Analysis.Determinants")
### theory "HOL-Analysis.Affine"
### 0.495s elapsed time, 1.946s cpu time, 0.283s GC time
Loading theory "HOL-Analysis.Convex" (required by "Draft.Mod_Type_ConnectMoreTemplates" via "Draft.Mod_Type_Connect" via "Perron_Frobenius.HMA_Connect" via "HOL-Analysis.Cartesian_Euclidean_Space" via "HOL-Analysis.Derivative" via "HOL-Analysis.Line_Segment")
class field_unit_factor = field + unit_factor +
  assumes "unit_factor_field": "unit_factor = id"
Proofs for inductive predicate(s) "eucl_rel_poly"
  Proving monotonicity ...
instantiation
  poly :: (field) semidom_modulo
  modulo_poly == modulo :: 'a poly => 'a poly => 'a poly
Found termination order: "(%p. length (snd p)) <*mlex*> {}"
Found termination order: "(%p. size (snd (snd (snd (snd p))))) <*mlex*> {}"
### theory "HOL-Analysis.Convex"
### 0.987s elapsed time, 3.886s cpu time, 0.506s GC time
Loading theory "HOL-Library.Discrete" (required by "Draft.Mod_Type_ConnectMoreTemplates" via "Draft.Mod_Type_Connect" via "Perron_Frobenius.HMA_Connect" via "HOL-Analysis.Cartesian_Euclidean_Space" via "HOL-Analysis.Derivative" via "HOL-Analysis.Bounded_Linear_Function" via "HOL-Analysis.Uniform_Limit" via "HOL-Analysis.Summation_Tests")
locale linear_first_finite_dimensional_vector_space
  fixes scaleB :: "'a => 'b => 'b"  (infixr \<open>*b\<close> 75)
    and scaleC :: "'a => 'c => 'c"  (infixr \<open>*c\<close> 75)
    and BasisB :: "'b set"
    and f :: "'b => 'c"
  assumes "linear_first_finite_dimensional_vector_space (*b) (*c) BasisB f"
### Rewrite rule not in simpset:
### Wellfounded.accp log_rel ?n1 ==>
### log ?n1 == if ?n1 < 2 then 0 else Suc (log (?n1 div 2))
Found termination order: "size <*mlex*> {}"
Found termination order: "(%p. size (snd (snd (snd p)))) <*mlex*> {}"
### theory "HOL-Library.Discrete"
### 0.168s elapsed time, 0.665s cpu time, 0.060s GC time
Loading theory "HOL-Library.Indicator_Function" (required by "Draft.Mod_Type_ConnectMoreTemplates" via "Draft.Mod_Type_Connect" via "Perron_Frobenius.HMA_Connect" via "HOL-Analysis.Cartesian_Euclidean_Space" via "HOL-Analysis.Derivative" via "HOL-Analysis.Bounded_Linear_Function" via "HOL-Analysis.Topology_Euclidean_Space" via "HOL-Analysis.Elementary_Normed_Spaces" via "HOL-Analysis.Elementary_Metric_Spaces" via "HOL-Analysis.Abstract_Topology_2")
Found termination order: "(%p. size (snd (snd (snd p)))) <*mlex*> {}"
Found termination order: "(%p. size (snd (snd p))) <*mlex*> {}"
### theory "HOL-Analysis.Cartesian_Space"
### 1.678s elapsed time, 6.596s cpu time, 0.818s GC time
Loading theory "HOL-Analysis.Determinants" (required by "Draft.Mod_Type_ConnectMoreTemplates" via "Draft.Mod_Type_Connect" via "Perron_Frobenius.HMA_Connect")
### theory "HOL-Library.Indicator_Function"
### 0.444s elapsed time, 1.735s cpu time, 0.194s GC time
Loading theory "HOL-Analysis.Abstract_Topology_2" (required by "Draft.Mod_Type_ConnectMoreTemplates" via "Draft.Mod_Type_Connect" via "Perron_Frobenius.HMA_Connect" via "HOL-Analysis.Cartesian_Euclidean_Space" via "HOL-Analysis.Derivative" via "HOL-Analysis.Bounded_Linear_Function" via "HOL-Analysis.Topology_Euclidean_Space" via "HOL-Analysis.Elementary_Normed_Spaces" via "HOL-Analysis.Elementary_Metric_Spaces")
Found termination order: "(%p. size (snd (snd (snd (snd p))))) <*mlex*> {}"
### theory "HOL-Computational_Algebra.Polynomial"
### 7.138s elapsed time, 27.786s cpu time, 5.794s GC time
Loading theory "HOL-Computational_Algebra.Fundamental_Theorem_Algebra" (required by "Draft.Mod_Type_ConnectMoreTemplates" via "Draft.Mod_Type_Connect" via "Perron_Frobenius.HMA_Connect" via "Jordan_Normal_Form.Spectral_Radius" via "Jordan_Normal_Form.Jordan_Normal_Form_Existence" via "Jordan_Normal_Form.Jordan_Normal_Form" via "Jordan_Normal_Form.Char_Poly" via "Polynomial_Factorization.Fundamental_Theorem_Algebra_Factorized")
### theory "HOL-Computational_Algebra.Fundamental_Theorem_Algebra"
### 0.309s elapsed time, 1.211s cpu time, 0.223s GC time
Loading theory "HOL-Library.Liminf_Limsup" (required by "Draft.Mod_Type_ConnectMoreTemplates" via "Draft.Mod_Type_Connect" via "Perron_Frobenius.HMA_Connect" via "HOL-Analysis.Cartesian_Euclidean_Space" via "HOL-Analysis.Derivative" via "HOL-Analysis.Bounded_Linear_Function" via "HOL-Analysis.Uniform_Limit" via "HOL-Analysis.Summation_Tests" via "HOL-Library.Extended_Real")
### theory "HOL-Analysis.Determinants"
### 2.221s elapsed time, 8.393s cpu time, 4.947s GC time
Loading theory "HOL-Library.Order_Continuity" (required by "Draft.Mod_Type_ConnectMoreTemplates" via "Draft.Mod_Type_Connect" via "Perron_Frobenius.HMA_Connect" via "HOL-Analysis.Cartesian_Euclidean_Space" via "HOL-Analysis.Derivative" via "HOL-Analysis.Bounded_Linear_Function" via "HOL-Analysis.Uniform_Limit" via "HOL-Analysis.Summation_Tests" via "HOL-Library.Extended_Real" via "HOL-Library.Extended_Nat")
### theory "HOL-Library.Liminf_Limsup"
### 0.520s elapsed time, 2.047s cpu time, 0.168s GC time
Loading theory "HOL-Library.Sum_of_Squares" (required by "Draft.Mod_Type_ConnectMoreTemplates" via "Draft.Mod_Type_Connect" via "Perron_Frobenius.HMA_Connect" via "HOL-Analysis.Cartesian_Euclidean_Space" via "HOL-Analysis.Derivative" via "HOL-Analysis.Bounded_Linear_Function" via "HOL-Analysis.Topology_Euclidean_Space" via "HOL-Analysis.Norm_Arith")
### theory "HOL-Analysis.Abstract_Topology_2"
### 2.583s elapsed time, 9.831s cpu time, 5.049s GC time
Loading theory "HOL-Analysis.Connected" (required by "Draft.Mod_Type_ConnectMoreTemplates" via "Draft.Mod_Type_Connect" via "Perron_Frobenius.HMA_Connect" via "HOL-Analysis.Cartesian_Euclidean_Space" via "HOL-Analysis.Derivative" via "HOL-Analysis.Bounded_Linear_Function" via "HOL-Analysis.Topology_Euclidean_Space" via "HOL-Analysis.Elementary_Normed_Spaces")
### theory "HOL-Library.Order_Continuity"
### 0.604s elapsed time, 2.387s cpu time, 0.228s GC time
Loading theory "HOL-Analysis.Elementary_Metric_Spaces" (required by "Draft.Mod_Type_ConnectMoreTemplates" via "Draft.Mod_Type_Connect" via "Perron_Frobenius.HMA_Connect" via "HOL-Analysis.Cartesian_Euclidean_Space" via "HOL-Analysis.Derivative" via "HOL-Analysis.Bounded_Linear_Function" via "HOL-Analysis.Topology_Euclidean_Space" via "HOL-Analysis.Elementary_Normed_Spaces")
### theory "HOL-Computational_Algebra.Euclidean_Algorithm"
### 11.914s elapsed time, 46.268s cpu time, 11.999s GC time
Loading theory "HOL-Computational_Algebra.Normalized_Fraction" (required by "Draft.Mod_Type_ConnectMoreTemplates" via "Draft.Mod_Type_Connect" via "Perron_Frobenius.HMA_Connect" via "Jordan_Normal_Form.Spectral_Radius" via "Jordan_Normal_Form.Jordan_Normal_Form_Existence" via "Jordan_Normal_Form.Jordan_Normal_Form" via "Jordan_Normal_Form.Char_Poly" via "Polynomial_Factorization.Fundamental_Theorem_Algebra_Factorized" via "Polynomial_Factorization.Order_Polynomial" via "Polynomial_Interpolation.Missing_Polynomial" via "HOL-Computational_Algebra.Polynomial_Factorial")
### theory "HOL-Analysis.Connected"
### 0.342s elapsed time, 1.339s cpu time, 0.209s GC time
Loading theory "HOL-Analysis.Function_Topology" (required by "Draft.Mod_Type_ConnectMoreTemplates" via "Draft.Mod_Type_Connect" via "Perron_Frobenius.HMA_Connect" via "HOL-Analysis.Cartesian_Euclidean_Space" via "HOL-Analysis.Derivative" via "HOL-Analysis.Bounded_Linear_Function")
locale fract_as_normalized_quot
### theory "HOL-Computational_Algebra.Normalized_Fraction"
### 1.788s elapsed time, 6.735s cpu time, 4.880s GC time
Loading theory "HOL-Computational_Algebra.Polynomial_Factorial" (required by "Draft.Mod_Type_ConnectMoreTemplates" via "Draft.Mod_Type_Connect" via "Perron_Frobenius.HMA_Connect" via "Jordan_Normal_Form.Spectral_Radius" via "Jordan_Normal_Form.Jordan_Normal_Form_Existence" via "Jordan_Normal_Form.Jordan_Normal_Form" via "Jordan_Normal_Form.Char_Poly" via "Polynomial_Factorization.Fundamental_Theorem_Algebra_Factorized" via "Polynomial_Factorization.Order_Polynomial" via "Polynomial_Interpolation.Missing_Polynomial")
instantiation
  fun :: (type, topological_space) topological_space
  open_fun == open :: ('a => 'b) set => bool
### ML warning (line 261 of "~~/src/HOL/Library/Sum_of_Squares/positivstellensatz.ML"):
### Value identifier (pth_abs) has not been referenced.
### ML warning (line 265 of "~~/src/HOL/Library/Sum_of_Squares/positivstellensatz.ML"):
### Value identifier (pth_max) has not been referenced.
### ML warning (line 269 of "~~/src/HOL/Library/Sum_of_Squares/positivstellensatz.ML"):
### Value identifier (pth_min) has not been referenced.
### ML warning (line 379 of "~~/src/HOL/Library/Sum_of_Squares/positivstellensatz.ML"):
### Pattern is not exhaustive.
signature FUNC =
  sig
    exception DUP of key
    exception SAME
    exception UNDEF of key
    val apply: 'a table -> key -> 'a
    val applyd: 'a table -> (key -> 'a) -> key -> 'a
    val build: ('a table -> 'a table) -> 'a table
    val choose: 'a table -> key * 'a
    val combine:
       ('a -> 'a -> 'a) -> ('a -> bool) -> 'a table -> 'a table -> 'a table
    val cons_list: key * 'a -> 'a list table -> 'a list table
    val default: key * 'a -> 'a table -> 'a table
    val defined: 'a table -> key -> bool
    val delete: key -> 'a table -> 'a table
    val delete_safe: key -> 'a table -> 'a table
    val dest: 'a table -> (key * 'a) list
    val dest_list: 'a list table -> (key * 'a) list
    val dom: 'a table -> key list
    val empty: 'a table
    val exists: (key * 'a -> bool) -> 'a table -> bool
    val fold: (key * 'a -> 'b -> 'b) -> 'a table -> 'b -> 'b
    val fold_rev: (key * 'a -> 'b -> 'b) -> 'a table -> 'b -> 'b
    val forall: (key * 'a -> bool) -> 'a table -> bool
    val get_first: (key * 'a -> 'b option) -> 'a table -> 'b option
    val insert: ('a * 'a -> bool) -> key * 'a -> 'a table -> 'a table
    val insert_list:
       ('a * 'a -> bool) -> key * 'a -> 'a list table -> 'a list table
    val insert_set: key -> set -> set
    val is_empty: 'a table -> bool
    val is_single: 'a table -> bool
    val join: (key -> 'a * 'a -> 'a) -> 'a table * 'a table -> 'a table
    type key
    val keys: 'a table -> key list
    val lookup: 'a table -> key -> 'a option
    val lookup_key: 'a table -> key -> (key * 'a) option
    val lookup_list: 'a list table -> key -> 'a list
    val make: (key * 'a) list -> 'a table
    val make_list: (key * 'a) list -> 'a list table
    val make_set: key list -> set
    val map: (key -> 'a -> 'b) -> 'a table -> 'b table
    val map_default: key * 'a -> ('a -> 'a) -> 'a table -> 'a table
    val map_entry: key -> ('a -> 'a) -> 'a table -> 'a table
    val max: 'a table -> (key * 'a) option
    val member: ('a * 'b -> bool) -> 'b table -> key * 'a -> bool
    val merge: ('a * 'a -> bool) -> 'a table * 'a table -> 'a table
    val merge_list:
       ('a * 'a -> bool) -> 'a list table * 'a list table -> 'a list table
    val min: 'a table -> (key * 'a) option
    val onefunc: key * 'a -> 'a table
    val remove: ('a * 'b -> bool) -> key * 'a -> 'b table -> 'b table
    val remove_list:
       ('a * 'b -> bool) -> key * 'a -> 'b list table -> 'b list table
    val remove_set: key -> set -> set
    type set = unit table
    type 'a table
    val tryapplyd: 'a table -> key -> 'a -> 'a
    val update: key * 'a -> 'a table -> 'a table
    val update_list:
       ('a * 'a -> bool) -> key * 'a -> 'a list table -> 'a list table
    val update_new: key * 'a -> 'a table -> 'a table
    val updatep: (key * 'a -> bool) -> key * 'a -> 'a table -> 'a table
  end
functor FuncFun (Key: KEY): FUNC
signature REAL_ARITH =
  sig
    type cert_conv = cterm -> thm * pss_tree
    val cterm_of_rat: Rat.rat -> cterm
    val dest_ratconst: cterm -> Rat.rat
    val gen_gen_real_arith:
       Proof.context ->
         (Rat.rat -> cterm) * conv * conv * conv * conv * conv * conv *
         conv * conv * conv * prover
           -> cert_conv
    val gen_prover_real_arith: Proof.context -> prover -> cert_conv
    val gen_real_arith:
       Proof.context ->
         (Rat.rat -> cterm) * conv * conv * conv * conv * conv * conv *
         conv * prover
           -> cert_conv
    val is_ratconst: cterm -> bool
    datatype positivstellensatz
    =
         Axiom_eq of int
       | Axiom_le of int
       | Axiom_lt of int
       | Eqmul of FuncUtil.poly * positivstellensatz
       | Product of positivstellensatz * positivstellensatz
       | Rational_eq of Rat.rat
       | Rational_le of Rat.rat
       | Rational_lt of Rat.rat
       | Square of FuncUtil.poly
       | Sum of positivstellensatz * positivstellensatz
    type prover =
       tree_choice list ->
         (thm list * thm list * thm list -> positivstellensatz -> thm) ->
           thm list * thm list * thm list -> thm * pss_tree
    datatype pss_tree
    = Branch of pss_tree * pss_tree | Cert of positivstellensatz | Trivial
    val real_linear_prover:
       (thm list * thm list * thm list -> positivstellensatz -> thm) ->
         thm list * thm list * thm list -> thm * pss_tree
    datatype tree_choice = Left | Right
  end
structure FuncUtil:
  sig
    structure Ctermfunc: FUNC
    structure Intfunc: FUNC
    structure Intpairfunc: FUNC
    structure Monomialfunc: FUNC
    structure Ratfunc: FUNC
    structure Symfunc: FUNC
    structure Termfunc: FUNC
    val dest_monomial: 'a Ctermfunc.table -> (cterm * 'a) list
    type monomial = int Ctermfunc.table
    val monomial_ord: int Ctermfunc.table * int Ctermfunc.table -> order
    val monomial_order: int Ctermfunc.table * int Ctermfunc.table -> order
    type poly = Rat.rat Monomialfunc.table
  end
structure RealArith: REAL_ARITH
signature POSITIVSTELLENSATZ_TOOLS =
  sig
    val print_cert: RealArith.pss_tree -> string
    val read_cert: Proof.context -> string -> RealArith.pss_tree
  end
structure Positivstellensatz_Tools: POSITIVSTELLENSATZ_TOOLS
### theory "HOL-Analysis.Function_Topology"
### 1.986s elapsed time, 7.520s cpu time, 5.032s GC time
Loading theory "HOL-Library.Extended_Nat" (required by "Draft.Mod_Type_ConnectMoreTemplates" via "Draft.Mod_Type_Connect" via "Perron_Frobenius.HMA_Connect" via "HOL-Analysis.Cartesian_Euclidean_Space" via "HOL-Analysis.Derivative" via "HOL-Analysis.Bounded_Linear_Function" via "HOL-Analysis.Uniform_Limit" via "HOL-Analysis.Summation_Tests" via "HOL-Library.Extended_Real")
class heine_borel = metric_space +
  assumes
    "bounded_imp_convergent_subsequence":
      "!!f. bounded (range f) ==>
            EX l r. strict_mono r & (f o r) \<longlonglongrightarrow> l"
class infinity = type +
  fixes infinity :: "'a"
instantiation
  enat :: infinity
  infinity_enat == infinity :: enat
Proofs for inductive predicate(s) "rec_set_enat"
### Cannot skip proof of schematic goal statement
signature SUM_OF_SQUARES =
  sig
    exception Failure of string
    val debug: bool Config.T
    val debug_message: Proof.context -> (unit -> string) -> unit
    datatype proof_method
    = Certificate of RealArith.pss_tree | Prover of string -> string
    val sos_tac:
       (RealArith.pss_tree -> unit) ->
         proof_method -> Proof.context -> int -> tactic
    val trace: bool Config.T
    val trace_message: Proof.context -> (unit -> string) -> unit
  end
structure Sum_of_Squares: SUM_OF_SQUARES
signature SOS_WRAPPER =
  sig val sos_tac: Proof.context -> string option -> int -> tactic end
structure SOS_Wrapper: SOS_WRAPPER
### theory "HOL-Library.Sum_of_Squares"
### 2.711s elapsed time, 10.398s cpu time, 5.406s GC time
Loading theory "HOL-Analysis.Norm_Arith" (required by "Draft.Mod_Type_ConnectMoreTemplates" via "Draft.Mod_Type_Connect" via "Perron_Frobenius.HMA_Connect" via "HOL-Analysis.Cartesian_Euclidean_Space" via "HOL-Analysis.Derivative" via "HOL-Analysis.Bounded_Linear_Function" via "HOL-Analysis.Topology_Euclidean_Space")
### No equation for constructor "Extended_Nat.infinity_class.infinity"
### in definition of function "the_enat"
consts
  the_enat :: "enat => nat"
instantiation
  enat :: zero_neq_one
  one_enat == one_class.one :: enat
  zero_enat == zero_class.zero :: enat
instantiation
  enat :: comm_monoid_add
  plus_enat == plus :: enat => enat => enat
instantiation
  enat :: {comm_semiring_1,semiring_no_zero_divisors}
  times_enat == times :: enat => enat => enat
instantiation
  enat :: minus
  minus_enat == minus :: enat => enat => enat
instantiation
  enat :: linordered_ab_semigroup_add
  less_eq_enat == less_eq :: enat => enat => bool
  less_enat == less :: enat => enat => bool
instantiation
  poly :: ({factorial_ring_gcd,semiring_gcd_mult_normalize})
    factorial_ring_gcd
  Gcd_poly == Gcd :: 'a poly set => 'a poly
  Lcm_poly == Lcm :: 'a poly set => 'a poly
  gcd_poly == gcd :: 'a poly => 'a poly => 'a poly
  lcm_poly == lcm :: 'a poly => 'a poly => 'a poly
### ML warning (line 103 of "~~/src/HOL/Analysis/normarith.ML"):
### Matches are not exhaustive.
signature NORM_ARITH =
  sig
    val norm_arith: Proof.context -> conv
    val norm_arith_tac: Proof.context -> int -> tactic
  end
structure NormArith: NORM_ARITH
instantiation
  enat :: {order_bot,order_top}
  top_enat == top :: enat
  bot_enat == bot :: enat
### theory "HOL-Analysis.Norm_Arith"
### 0.332s elapsed time, 1.311s cpu time, 0.216s GC time
Loading theory "Polynomial_Interpolation.Ring_Hom" (required by "Draft.Mod_Type_ConnectMoreTemplates" via "Draft.Mod_Type_Connect" via "Perron_Frobenius.HMA_Connect" via "Jordan_Normal_Form.Spectral_Radius" via "Jordan_Normal_Form.Jordan_Normal_Form_Existence" via "Jordan_Normal_Form.Jordan_Normal_Form" via "Jordan_Normal_Form.Matrix")
instantiation
  poly :: ({factorial_ring_gcd,field,semiring_gcd_mult_normalize})
    {normalization_euclidean_semiring,unique_euclidean_ring}
  division_segment_poly == division_segment :: 'a poly => 'a poly
  euclidean_size_poly == euclidean_size :: 'a poly => nat
structure Cancel_Enat_Common:
  sig
    val dest_sum: term -> term list
    val dest_summing: term * term list -> term list
    val find_first: term -> term list -> term list
    val find_first_t: term list -> term -> term list -> term list
    val mk_eq: term * term -> term
    val mk_sum: typ -> term list -> term
    val norm_ss: simpset
    val norm_tac: Proof.context -> tactic
    val simplify_meta_eq: Proof.context -> thm -> thm -> thm
    val trans_tac: Proof.context -> thm option -> tactic
  end
structure Eq_Enat_Cancel:
  sig val proc: Proof.context -> term -> thm option end
structure Le_Enat_Cancel:
  sig val proc: Proof.context -> term -> thm option end
structure Less_Enat_Cancel:
  sig val proc: Proof.context -> term -> thm option end
instantiation
  enat :: complete_lattice
  Inf_enat == Inf :: enat set => enat
  Sup_enat == Sup :: enat set => enat
  sup_enat == sup :: enat => enat => enat
  inf_enat == inf :: enat => enat => enat
### theory "HOL-Library.Extended_Nat"
### 0.759s elapsed time, 3.007s cpu time, 0.381s GC time
Loading theory "HOL-Library.Extended_Real" (required by "Draft.Mod_Type_ConnectMoreTemplates" via "Draft.Mod_Type_Connect" via "Perron_Frobenius.HMA_Connect" via "HOL-Analysis.Cartesian_Euclidean_Space" via "HOL-Analysis.Derivative" via "HOL-Analysis.Bounded_Linear_Function" via "HOL-Analysis.Uniform_Limit" via "HOL-Analysis.Summation_Tests")
### theory "HOL-Computational_Algebra.Polynomial_Factorial"
### 1.210s elapsed time, 4.803s cpu time, 0.629s GC time
Loading theory "Polynomial_Interpolation.Missing_Polynomial" (required by "Draft.Mod_Type_ConnectMoreTemplates" via "Draft.Mod_Type_Connect" via "Perron_Frobenius.HMA_Connect" via "Jordan_Normal_Form.Spectral_Radius" via "Jordan_Normal_Form.Jordan_Normal_Form_Existence" via "Jordan_Normal_Form.Jordan_Normal_Form" via "Jordan_Normal_Form.Char_Poly" via "Polynomial_Factorization.Fundamental_Theorem_Algebra_Factorized" via "Polynomial_Factorization.Order_Polynomial")
### theory "HOL-Analysis.Elementary_Metric_Spaces"
### 3.285s elapsed time, 12.682s cpu time, 5.716s GC time
Loading theory "HOL-Analysis.Elementary_Normed_Spaces" (required by "Draft.Mod_Type_ConnectMoreTemplates" via "Draft.Mod_Type_Connect" via "Perron_Frobenius.HMA_Connect" via "HOL-Analysis.Cartesian_Euclidean_Space" via "HOL-Analysis.Derivative" via "HOL-Analysis.Bounded_Linear_Function" via "HOL-Analysis.Topology_Euclidean_Space")
instantiation
  enat :: linorder_topology
  open_enat == open :: enat set => bool
locale zero_hom
  fixes hom :: "'a => 'b"
  assumes "zero_hom hom"
locale one_hom
  fixes hom :: "'a => 'b"
  assumes "one_hom hom"
locale times_hom
  fixes hom :: "'a => 'b"
  assumes "times_hom hom"
locale plus_hom
  fixes hom :: "'a => 'b"
  assumes "plus_hom hom"
locale semigroup_mult_hom
  fixes hom :: "'a => 'b"
  assumes "semigroup_mult_hom hom"
locale semigroup_add_hom
  fixes hom :: "'a => 'b"
  assumes "semigroup_add_hom hom"
locale monoid_mult_hom
  fixes hom :: "'a => 'b"
  assumes "monoid_mult_hom hom"
locale monoid_add_hom
  fixes hom :: "'a => 'b"
  assumes "monoid_add_hom hom"
locale group_add_hom
  fixes hom :: "'a => 'b"
  assumes "group_add_hom hom"
locale ab_semigroup_mult_hom
  fixes hom :: "'a => 'b"
  assumes "ab_semigroup_mult_hom hom"
locale ab_semigroup_add_hom
  fixes hom :: "'a => 'b"
  assumes "ab_semigroup_add_hom hom"
locale comm_monoid_mult_hom
  fixes hom :: "'a => 'b"
  assumes "comm_monoid_mult_hom hom"
locale comm_monoid_add_hom
  fixes hom :: "'a => 'b"
  assumes "comm_monoid_add_hom hom"
locale ab_group_add_hom
  fixes hom :: "'a => 'b"
  assumes "ab_group_add_hom hom"
locale semiring_hom
  fixes hom :: "'a => 'b"
  assumes "semiring_hom hom"
locale ring_hom
  fixes hom :: "'a => 'b"
  assumes "ring_hom hom"
locale comm_semiring_hom
  fixes hom :: "'a => 'b"
  assumes "comm_semiring_hom hom"
locale comm_ring_hom
  fixes hom :: "'a => 'b"
  assumes "comm_ring_hom hom"
locale idom_hom
  fixes hom :: "'a => 'b"
  assumes "idom_hom hom"
locale idom_divide_hom
  fixes hom :: "'a => 'b"
  assumes "idom_divide_hom hom"
locale field_hom
  fixes hom :: "'a => 'b"
  assumes "field_hom hom"
locale field_char_0_hom
  fixes hom :: "'a => 'b"
  assumes "field_char_0_hom hom"
locale zero_hom_0
  fixes hom :: "'a => 'b"
  assumes "zero_hom_0 hom"
class mult_zero = times + zero +
  assumes "mult_zero_left": "!!a. (0::'a) * a = (0::'a)"
  assumes "mult_zero_right": "!!a. a * (0::'a) = (0::'a)"
locale one_hom_1
  fixes hom :: "'a => 'b"
  assumes "one_hom_1 hom"
locale monoid_mult_hom_1
  fixes hom :: "'a => 'b"
  assumes "monoid_mult_hom_1 hom"
locale monoid_add_hom_0
  fixes hom :: "'a => 'b"
  assumes "monoid_add_hom_0 hom"
locale comm_monoid_mult_hom_1
  fixes hom :: "'a => 'b"
  assumes "comm_monoid_mult_hom_1 hom"
locale comm_monoid_add_hom_0
  fixes hom :: "'a => 'b"
  assumes "comm_monoid_add_hom_0 hom"
locale injective
  fixes f :: "'a => 'b"
  assumes "injective f"
locale inj_zero_hom
  fixes hom :: "'a => 'b"
  assumes "inj_zero_hom hom"
locale inj_one_hom
  fixes hom :: "'a => 'b"
  assumes "inj_one_hom hom"
locale inj_semigroup_mult_hom
  fixes hom :: "'a => 'b"
  assumes "inj_semigroup_mult_hom hom"
locale inj_semigroup_add_hom
  fixes hom :: "'a => 'b"
  assumes "inj_semigroup_add_hom hom"
locale inj_monoid_mult_hom
  fixes hom :: "'a => 'b"
  assumes "inj_monoid_mult_hom hom"
locale inj_monoid_add_hom
  fixes hom :: "'a => 'b"
  assumes "inj_monoid_add_hom hom"
locale inj_comm_monoid_mult_hom
  fixes hom :: "'a => 'b"
  assumes "inj_comm_monoid_mult_hom hom"
locale inj_comm_monoid_add_hom
  fixes hom :: "'a => 'b"
  assumes "inj_comm_monoid_add_hom hom"
locale inj_semiring_hom
  fixes hom :: "'a => 'b"
  assumes "inj_semiring_hom hom"
instantiation
  ereal :: uminus
  uminus_ereal == uminus :: ereal => ereal
locale inj_comm_semiring_hom
  fixes hom :: "'a => 'b"
  assumes "inj_comm_semiring_hom hom"
locale inj_group_add_hom
  fixes hom :: "'a => 'b"
  assumes "inj_group_add_hom hom"
Found termination order: "size_list (%p. size (fst p)) <*mlex*> {}"
locale inj_ab_group_add_hom
  fixes hom :: "'a => 'b"
  assumes "inj_ab_group_add_hom hom"
Found termination order: "{}"
instantiation
  ereal :: infinity
  infinity_ereal == infinity :: ereal
locale inj_ring_hom
  fixes hom :: "'a => 'b"
  assumes "inj_ring_hom hom"
locale inj_comm_ring_hom
  fixes hom :: "'a => 'b"
  assumes "inj_comm_ring_hom hom"
locale inj_idom_hom
  fixes hom :: "'a => 'b"
  assumes "inj_idom_hom hom"
instantiation
  ereal :: abs
  abs_ereal == abs :: ereal => ereal
locale field_hom
  fixes hom :: "'a => 'b"
  assumes "field_hom hom"
locale surjective
  fixes f :: "'a => 'b"
  assumes "surjective f"
instantiation
  ereal :: {comm_monoid_add,zero_neq_one}
  one_ereal == one_class.one :: ereal
  zero_ereal == zero_class.zero :: ereal
  plus_ereal == plus :: ereal => ereal => ereal
locale bijective
  fixes f :: "'a => 'b"
  assumes "bijective f"
### theory "Polynomial_Interpolation.Missing_Polynomial"
### 1.050s elapsed time, 4.184s cpu time, 0.537s GC time
Loading theory "Polynomial_Factorization.Order_Polynomial" (required by "Draft.Mod_Type_ConnectMoreTemplates" via "Draft.Mod_Type_Connect" via "Perron_Frobenius.HMA_Connect" via "Jordan_Normal_Form.Spectral_Radius" via "Jordan_Normal_Form.Jordan_Normal_Form_Existence" via "Jordan_Normal_Form.Jordan_Normal_Form" via "Jordan_Normal_Form.Char_Poly" via "Polynomial_Factorization.Fundamental_Theorem_Algebra_Factorized")
locale bijective
  fixes f :: "'a => 'b"
  assumes "bijective f"
locale monoid_mult_isom
  fixes hom :: "'a => 'b"
  assumes "monoid_mult_isom hom"
locale monoid_add_isom
  fixes hom :: "'a => 'b"
  assumes "monoid_add_isom hom"
### theory "Polynomial_Factorization.Order_Polynomial"
### 0.093s elapsed time, 0.371s cpu time, 0.000s GC time
Loading theory "Polynomial_Factorization.Fundamental_Theorem_Algebra_Factorized" (required by "Draft.Mod_Type_ConnectMoreTemplates" via "Draft.Mod_Type_Connect" via "Perron_Frobenius.HMA_Connect" via "Jordan_Normal_Form.Spectral_Radius" via "Jordan_Normal_Form.Jordan_Normal_Form_Existence" via "Jordan_Normal_Form.Jordan_Normal_Form" via "Jordan_Normal_Form.Char_Poly")
locale comm_monoid_mult_isom
  fixes hom :: "'a => 'b"
  assumes "comm_monoid_mult_isom hom"
instantiation
  ereal :: linorder
  less_eq_ereal == less_eq :: ereal => ereal => bool
  less_ereal == less :: ereal => ereal => bool
locale comm_monoid_add_isom
  fixes hom :: "'a => 'b"
  assumes "comm_monoid_add_isom hom"
locale semiring_isom
  fixes hom :: "'a => 'b"
  assumes "semiring_isom hom"
locale comm_semiring_isom
  fixes hom :: "'a => 'b"
  assumes "comm_semiring_isom hom"
instantiation
  ereal :: {comm_monoid_mult,sgn}
  sgn_ereal == sgn :: ereal => ereal
  times_ereal == times :: ereal => ereal => ereal
### theory "Polynomial_Factorization.Fundamental_Theorem_Algebra_Factorized"
### 0.360s elapsed time, 1.437s cpu time, 0.201s GC time
Loading theory "Rank_Nullity_Theorem.Dual_Order" (required by "Draft.Mod_Type_ConnectMoreTemplates" via "Draft.Mod_Type_Connect" via "Rank_Nullity_Theorem.Mod_Type")
locale ring_isom
  fixes hom :: "'a => 'b"
  assumes "ring_isom hom"
### Abstraction on left hand side of equation, in theorem:
### linorder.Min (%x y. y <= x) (set (?x # ?xs)) ==
### fold dual_wellorder.min ?xs ?x
### Abstraction on left hand side of equation, in theorem:
### linorder.Max (%x y. y <= x) (set (?x # ?xs)) ==
### fold dual_wellorder.max ?xs ?x
### Abstraction on left hand side of equation, in theorem:
### dual_wellorder.sorted [] == True
### Abstraction on left hand side of equation, in theorem:
### dual_wellorder.sorted [?x] == True
### Abstraction on left hand side of equation, in theorem:
### dual_wellorder.sorted (?x # ?y # ?zs) ==
### ?y <= ?x & dual_wellorder.sorted (?y # ?zs)
### Abstraction on left hand side of equation, in theorem:
### dual_wellorder.sorted_list_of_set (set ?xs) ==
### dual_wellorder.sort (remdups ?xs)
locale comm_ring_isom
  fixes hom :: "'a => 'b"
  assumes "comm_ring_isom hom"
### theory "HOL-Analysis.Elementary_Normed_Spaces"
### 1.464s elapsed time, 5.841s cpu time, 0.728s GC time
Loading theory "HOL-Analysis.Topology_Euclidean_Space" (required by "Draft.Mod_Type_ConnectMoreTemplates" via "Draft.Mod_Type_Connect" via "Perron_Frobenius.HMA_Connect" via "HOL-Analysis.Cartesian_Euclidean_Space" via "HOL-Analysis.Derivative" via "HOL-Analysis.Bounded_Linear_Function")
instantiation
  ereal :: minus
  minus_ereal == minus :: ereal => ereal => ereal
instantiation
  ereal :: inverse
  inverse_ereal == inverse :: ereal => ereal
  divide_ereal == divide :: ereal => ereal => ereal
### theory "Rank_Nullity_Theorem.Dual_Order"
### 0.367s elapsed time, 1.453s cpu time, 0.196s GC time
Loading theory "VectorSpace.FunctionLemmas" (required by "Draft.Mod_Type_ConnectMoreTemplates" via "Draft.Mod_Type_Connect" via "Perron_Frobenius.HMA_Connect" via "Jordan_Normal_Form.Spectral_Radius" via "Jordan_Normal_Form.Jordan_Normal_Form_Existence" via "Jordan_Normal_Form.Schur_Decomposition" via "Jordan_Normal_Form.Gram_Schmidt" via "Jordan_Normal_Form.VS_Connect" via "Jordan_Normal_Form.Missing_VectorSpace" via "VectorSpace.VectorSpace" via "VectorSpace.MonoidSums")
### theory "VectorSpace.FunctionLemmas"
### 0.031s elapsed time, 0.127s cpu time, 0.000s GC time
Loading theory "VectorSpace.RingModuleFacts" (required by "Draft.Mod_Type_ConnectMoreTemplates" via "Draft.Mod_Type_Connect" via "Perron_Frobenius.HMA_Connect" via "Jordan_Normal_Form.Spectral_Radius" via "Jordan_Normal_Form.Jordan_Normal_Form_Existence" via "Jordan_Normal_Form.Schur_Decomposition" via "Jordan_Normal_Form.Gram_Schmidt" via "Jordan_Normal_Form.VS_Connect" via "Jordan_Normal_Form.Missing_VectorSpace" via "VectorSpace.VectorSpace")
instantiation
  ereal :: lattice
  inf_ereal == inf :: ereal => ereal => ereal
  sup_ereal == sup :: ereal => ereal => ereal
instantiation
  ereal :: complete_lattice
  Inf_ereal == Inf :: ereal set => ereal
  Sup_ereal == Sup :: ereal set => ereal
  bot_ereal == bot :: ereal
  top_ereal == top :: ereal
locale idom_isom
  fixes hom :: "'a => 'b"
  assumes "idom_isom hom"
instantiation
  ereal :: linear_continuum_topology
  open_ereal == open :: ereal set => bool
locale field_isom
  fixes hom :: "'a => 'b"
  assumes "field_isom hom"
### theory "VectorSpace.RingModuleFacts"
### 0.804s elapsed time, 3.201s cpu time, 0.611s GC time
Loading theory "VectorSpace.MonoidSums" (required by "Draft.Mod_Type_ConnectMoreTemplates" via "Draft.Mod_Type_Connect" via "Perron_Frobenius.HMA_Connect" via "Jordan_Normal_Form.Spectral_Radius" via "Jordan_Normal_Form.Jordan_Normal_Form_Existence" via "Jordan_Normal_Form.Schur_Decomposition" via "Jordan_Normal_Form.Gram_Schmidt" via "Jordan_Normal_Form.VS_Connect" via "Jordan_Normal_Form.Missing_VectorSpace" via "VectorSpace.VectorSpace")
locale inj_idom_divide_hom
  fixes hom :: "'a => 'b"
  assumes "inj_idom_divide_hom hom"
locale field_hom
  fixes hom :: "'a => 'b"
  assumes "field_hom hom"
### theory "HOL-Library.Extended_Real"
### 3.003s elapsed time, 11.973s cpu time, 1.546s GC time
Loading theory "HOL-Library.Extended_Nonnegative_Real" (required by "Draft.Mod_Type_ConnectMoreTemplates" via "Draft.Mod_Type_Connect" via "Perron_Frobenius.HMA_Connect" via "HOL-Analysis.Cartesian_Euclidean_Space" via "HOL-Analysis.Derivative" via "HOL-Analysis.Bounded_Linear_Function" via "HOL-Analysis.Uniform_Limit" via "HOL-Analysis.Summation_Tests" via "HOL-Analysis.Extended_Real_Limits")
locale abelian_monoid
  fixes G :: "('a, 'b) ring_scheme"  (structure)
  assumes "abelian_monoid G"
### theory "VectorSpace.MonoidSums"
### 0.290s elapsed time, 1.154s cpu time, 0.000s GC time
Loading theory "VectorSpace.LinearCombinations" (required by "Draft.Mod_Type_ConnectMoreTemplates" via "Draft.Mod_Type_Connect" via "Perron_Frobenius.HMA_Connect" via "Jordan_Normal_Form.Spectral_Radius" via "Jordan_Normal_Form.Jordan_Normal_Form_Existence" via "Jordan_Normal_Form.Schur_Decomposition" via "Jordan_Normal_Form.Gram_Schmidt" via "Jordan_Normal_Form.VS_Connect" via "Jordan_Normal_Form.Missing_VectorSpace" via "VectorSpace.VectorSpace")
### theory "Polynomial_Interpolation.Ring_Hom"
### 3.380s elapsed time, 13.478s cpu time, 1.736s GC time
Loading theory "Jordan_Normal_Form.Matrix" (required by "Draft.Mod_Type_ConnectMoreTemplates" via "Draft.Mod_Type_Connect" via "Perron_Frobenius.HMA_Connect" via "Jordan_Normal_Form.Spectral_Radius" via "Jordan_Normal_Form.Jordan_Normal_Form_Existence" via "Jordan_Normal_Form.Jordan_Normal_Form")
instantiation
  ennreal :: complete_linorder
  Inf_ennreal == Inf :: ennreal set => ennreal
  Sup_ennreal == Sup :: ennreal set => ennreal
  bot_ennreal == bot :: ennreal
  sup_ennreal == sup :: ennreal => ennreal => ennreal
  top_ennreal == top :: ennreal
  inf_ennreal == inf :: ennreal => ennreal => ennreal
  less_eq_ennreal == less_eq :: ennreal => ennreal => bool
  less_ennreal == less :: ennreal => ennreal => bool
instantiation
  ennreal :: infinity
  infinity_ennreal == infinity :: ennreal
instantiation
  ennreal :: {comm_semiring_1,semiring_1_no_zero_divisors}
  zero_ennreal == zero_class.zero :: ennreal
  plus_ennreal == plus :: ennreal => ennreal => ennreal
  one_ennreal == one_class.one :: ennreal
  times_ennreal == times :: ennreal => ennreal => ennreal
instantiation
  ennreal :: minus
  minus_ennreal == minus :: ennreal => ennreal => ennreal
instantiation
  ennreal :: inverse
  inverse_ennreal == inverse :: ennreal => ennreal
  divide_ennreal == divide :: ennreal => ennreal => ennreal
structure Cancel_Ennreal_Common:
  sig
    val dest_sum: term -> term list
    val dest_summing: term * term list -> term list
    val find_first: term -> term list -> term list
    val find_first_t: term list -> term -> term list -> term list
    val mk_eq: term * term -> term
    val mk_sum: typ -> term list -> term
    val norm_ss: simpset
    val norm_tac: Proof.context -> tactic
    val simplify_meta_eq: Proof.context -> thm -> thm -> thm
    val trans_tac: Proof.context -> thm option -> tactic
  end
structure Eq_Ennreal_Cancel:
  sig val proc: Proof.context -> term -> thm option end
structure Le_Ennreal_Cancel:
  sig val proc: Proof.context -> term -> thm option end
structure Less_Ennreal_Cancel:
  sig val proc: Proof.context -> term -> thm option end
### theory "HOL-Analysis.Topology_Euclidean_Space"
### 2.201s elapsed time, 8.776s cpu time, 0.957s GC time
Loading theory "HOL-Analysis.Convex_Euclidean_Space" (required by "Draft.Mod_Type_ConnectMoreTemplates" via "Draft.Mod_Type_Connect" via "Perron_Frobenius.HMA_Connect" via "HOL-Analysis.Cartesian_Euclidean_Space" via "HOL-Analysis.Derivative")
instantiation
  ennreal :: linear_continuum_topology
  open_ennreal == open :: ennreal set => bool
instantiation
  vec :: (plus) plus
  plus_vec == plus :: 'a vec => 'a vec => 'a vec
instantiation
  vec :: (minus) minus
  minus_vec == minus :: 'a vec => 'a vec => 'a vec
Found termination order: "(%p. size (snd p)) <*mlex*> {}"
Found termination order: "(%p. size (snd p)) <*mlex*> {}"
instantiation
  vec :: (uminus) uminus
  uminus_vec == uminus :: 'a vec => 'a vec
### theory "HOL-Library.Extended_Nonnegative_Real"
### 1.658s elapsed time, 6.607s cpu time, 0.753s GC time
Loading theory "HOL-Analysis.Extended_Real_Limits" (required by "Draft.Mod_Type_ConnectMoreTemplates" via "Draft.Mod_Type_Connect" via "Perron_Frobenius.HMA_Connect" via "HOL-Analysis.Cartesian_Euclidean_Space" via "HOL-Analysis.Derivative" via "HOL-Analysis.Bounded_Linear_Function" via "HOL-Analysis.Uniform_Limit" via "HOL-Analysis.Summation_Tests")
locale LinearCombinations.submodule
  fixes R :: "('a, 'b) ring_scheme"
    and N :: "'c set"
    and M :: "('a, 'c, 'd) module_scheme"  (structure)
  assumes "LinearCombinations.submodule R N M"
instantiation
  vec :: (ord) ord
  less_eq_vec == less_eq :: 'a vec => 'a vec => bool
  less_vec == less :: 'a vec => 'a vec => bool
instantiation
  vec :: (preorder) preorder
instantiation
  vec :: (order) order
Found termination order: "{}"
### theory "HOL-Analysis.Convex_Euclidean_Space"
### 1.166s elapsed time, 4.649s cpu time, 0.694s GC time
Loading theory "HOL-Analysis.Line_Segment" (required by "Draft.Mod_Type_ConnectMoreTemplates" via "Draft.Mod_Type_Connect" via "Perron_Frobenius.HMA_Connect" via "HOL-Analysis.Cartesian_Euclidean_Space" via "HOL-Analysis.Derivative")
instantiation
  mat :: (ord) ord
  less_eq_mat == less_eq :: 'a mat => 'a mat => bool
  less_mat == less :: 'a mat => 'a mat => bool
instantiation
  mat :: (preorder) preorder
instantiation
  mat :: (order) order
instantiation
  mat :: (plus) plus
  plus_mat == plus :: 'a mat => 'a mat => 'a mat
instantiation
  mat :: (uminus) uminus
  uminus_mat == uminus :: 'a mat => 'a mat
instantiation
  mat :: (minus) minus
  minus_mat == minus :: 'a mat => 'a mat => 'a mat
locale mod_hom
  fixes R :: "('a, 'b) ring_scheme"
    and M :: "('a, 'c, 'd) module_scheme"
    and N :: "('a, 'e, 'f) module_scheme"
    and f :: "'c => 'e"
  assumes "mod_hom R M N f"
instantiation
  mat :: (semiring_0) times
  times_mat == times :: 'a mat => 'a mat => 'a mat
locale mod_hom
  fixes R :: "('a, 'b) ring_scheme"
    and M :: "('a, 'c, 'd) module_scheme"
    and N :: "('a, 'e, 'f) module_scheme"
    and f :: "'c => 'e"
  assumes "mod_hom R M N f"
### theory "HOL-Analysis.Extended_Real_Limits"
### 1.149s elapsed time, 4.585s cpu time, 0.611s GC time
Loading theory "HOL-Analysis.Summation_Tests" (required by "Draft.Mod_Type_ConnectMoreTemplates" via "Draft.Mod_Type_Connect" via "Perron_Frobenius.HMA_Connect" via "HOL-Analysis.Cartesian_Euclidean_Space" via "HOL-Analysis.Derivative" via "HOL-Analysis.Bounded_Linear_Function" via "HOL-Analysis.Uniform_Limit")
Found termination order: "(%p. size (snd p)) <*mlex*> {}"
### theory "HOL-Analysis.Line_Segment"
### 1.033s elapsed time, 4.120s cpu time, 0.611s GC time
Loading theory "Polynomial_Interpolation.Ring_Hom_Poly" (required by "Draft.Mod_Type_ConnectMoreTemplates" via "Draft.Mod_Type_Connect" via "Perron_Frobenius.HMA_Connect" via "Jordan_Normal_Form.Spectral_Radius" via "Jordan_Normal_Form.Jordan_Normal_Form_Existence" via "Jordan_Normal_Form.Jordan_Normal_Form" via "Jordan_Normal_Form.Char_Poly")
Found termination order: "length <*mlex*> {}"
locale semiring_hom
  fixes hom :: "'a => 'b"
  assumes "semiring_hom hom"
locale zero_hom
  fixes hom :: "'a => 'b"
  assumes "zero_hom hom"
### theory "HOL-Analysis.Summation_Tests"
### 0.932s elapsed time, 3.717s cpu time, 0.529s GC time
Loading theory "HOL-Analysis.Uniform_Limit" (required by "Draft.Mod_Type_ConnectMoreTemplates" via "Draft.Mod_Type_Connect" via "Perron_Frobenius.HMA_Connect" via "HOL-Analysis.Cartesian_Euclidean_Space" via "HOL-Analysis.Derivative" via "HOL-Analysis.Bounded_Linear_Function")
locale map_poly_zero_hom
  fixes hom :: "'a => 'b"
  assumes "map_poly_zero_hom hom"
locale comm_monoid_add_hom
  fixes hom :: "'a => 'b"
  assumes "comm_monoid_add_hom hom"
locale map_poly_comm_monoid_add_hom
  fixes hom :: "'a => 'b"
  assumes "map_poly_comm_monoid_add_hom hom"
locale comm_semiring_hom
  fixes hom :: "'a => 'b"
  assumes "comm_semiring_hom hom"
locale map_poly_comm_semiring_hom
  fixes hom :: "'a => 'b"
  assumes "map_poly_comm_semiring_hom hom"
locale map_poly_comm_ring_hom
  fixes hom :: "'a => 'b"
  assumes "map_poly_comm_ring_hom hom"
locale map_poly_idom_hom
  fixes hom :: "'a => 'b"
  assumes "map_poly_idom_hom hom"
locale map_poly_inj_zero_hom
  fixes hom :: "'a => 'b"
  assumes "map_poly_inj_zero_hom hom"
locale map_poly_inj_comm_monoid_add_hom
  fixes hom :: "'a => 'b"
  assumes "map_poly_inj_comm_monoid_add_hom hom"
### theory "VectorSpace.LinearCombinations"
### 4.097s elapsed time, 16.354s cpu time, 2.152s GC time
Loading theory "VectorSpace.SumSpaces" (required by "Draft.Mod_Type_ConnectMoreTemplates" via "Draft.Mod_Type_Connect" via "Perron_Frobenius.HMA_Connect" via "Jordan_Normal_Form.Spectral_Radius" via "Jordan_Normal_Form.Jordan_Normal_Form_Existence" via "Jordan_Normal_Form.Schur_Decomposition" via "Jordan_Normal_Form.Gram_Schmidt" via "Jordan_Normal_Form.VS_Connect" via "Jordan_Normal_Form.Missing_VectorSpace" via "VectorSpace.VectorSpace")
locale map_poly_inj_comm_semiring_hom
  fixes hom :: "'a => 'b"
  assumes "map_poly_inj_comm_semiring_hom hom"
instantiation
  vec :: (conjugate) conjugate
  conjugate_vec == conjugate :: 'a vec => 'a vec
locale map_poly_inj_comm_ring_hom
  fixes hom :: "'a => 'b"
  assumes "map_poly_inj_comm_ring_hom hom"
### theory "Jordan_Normal_Form.Matrix"
### 3.984s elapsed time, 15.896s cpu time, 1.961s GC time
Loading theory "Jordan_Normal_Form.Gauss_Jordan_Elimination" (required by "Draft.Mod_Type_ConnectMoreTemplates" via "Draft.Mod_Type_Connect" via "Perron_Frobenius.HMA_Connect" via "Jordan_Normal_Form.Spectral_Radius" via "Jordan_Normal_Form.Jordan_Normal_Form_Existence" via "Jordan_Normal_Form.Jordan_Normal_Form" via "Jordan_Normal_Form.Char_Poly" via "Jordan_Normal_Form.Determinant" via "Jordan_Normal_Form.Column_Operations")
locale map_poly_inj_idom_hom
  fixes hom :: "'a => 'b"
  assumes "map_poly_inj_idom_hom hom"
locale zero_hom_0
  fixes hom :: "'a => 'b"
  assumes "zero_hom_0 hom"
locale comm_semiring_hom
  fixes hom :: "'a => 'b"
  assumes "comm_semiring_hom hom"
locale comm_semiring_hom
  fixes hom :: "'a => 'b"
  assumes "comm_semiring_hom hom"
### theory "HOL-Analysis.Uniform_Limit"
### 0.660s elapsed time, 2.634s cpu time, 0.258s GC time
Loading theory "HOL-Analysis.Bounded_Linear_Function" (required by "Draft.Mod_Type_ConnectMoreTemplates" via "Draft.Mod_Type_Connect" via "Perron_Frobenius.HMA_Connect" via "HOL-Analysis.Cartesian_Euclidean_Space" via "HOL-Analysis.Derivative")
locale comm_ring_hom
  fixes hom :: "'a => 'b"
  assumes "comm_ring_hom hom"
### theory "VectorSpace.SumSpaces"
### 0.426s elapsed time, 1.706s cpu time, 0.000s GC time
Loading theory "VectorSpace.VectorSpace" (required by "Draft.Mod_Type_ConnectMoreTemplates" via "Draft.Mod_Type_Connect" via "Perron_Frobenius.HMA_Connect" via "Jordan_Normal_Form.Spectral_Radius" via "Jordan_Normal_Form.Jordan_Normal_Form_Existence" via "Jordan_Normal_Form.Schur_Decomposition" via "Jordan_Normal_Form.Gram_Schmidt" via "Jordan_Normal_Form.VS_Connect" via "Jordan_Normal_Form.Missing_VectorSpace")
locale field_hom
  fixes hom :: "'a => 'b"
  assumes "field_hom hom"
Found termination order:
  "(%p. size_list (%p. size (snd p)) (snd (snd p))) <*mlex*> {}"
locale field_hom'
  fixes hom :: "'a => 'b"
  assumes "field_hom' hom"
locale map_poly_inj_idom_divide_hom
  fixes hom :: "'a => 'b"
  assumes "map_poly_inj_idom_divide_hom hom"
locale vectorspace
  fixes K :: "('a, 'b) ring_scheme"
    and V :: "('a, 'c, 'd) module_scheme"
  assumes "vectorspace K V"
locale subspace
  fixes K :: "('a, 'b) ring_scheme"
    and W :: "'c set"
    and V :: "('a, 'c, 'd) module_scheme"  (structure)
  assumes "subspace K W V"
### Ignoring duplicate rewrite rule:
### carrier (vs ?y) == ?y
### theory "Polynomial_Interpolation.Ring_Hom_Poly"
### 1.865s elapsed time, 7.453s cpu time, 0.742s GC time
"{False, True}"
  :: "bool set"
"{False, True}"
  :: "bool set"
"{a\<^sub>1, a\<^sub>2}"
  :: "Enum.finite_2 set"
"{a\<^sub>1, a\<^sub>2}"
  :: "Enum.finite_2 set"
"{a\<^sub>1, a\<^sub>2, a\<^sub>3, a\<^sub>4, a\<^sub>5}"
  :: "Enum.finite_5 set"
"(bij, bij_betw, permutation)"
  :: "(('a => 'b) => bool) *
      (('c => 'd) => 'c set => 'd set => bool) * (('e => 'e) => bool)"
carrier (| carrier = ?carrier, ... = ?more |) = ?carrier
partial_object.more (| carrier = ?carrier, ... = ?more |) = ?more
carrier_update ?carrier' (| carrier = ?carrier, ... = ?more |) =
(| carrier = ?carrier' ?carrier, ... = ?more |)
partial_object.more_update ?more' (| carrier = ?carrier, ... = ?more |) =
(| carrier = ?carrier, ... = ?more' ?more |)
(\<otimes>\<^bsub>(| carrier = ?carrier, mult = ?mult, one = ?one, ... = ?more |)\<^esub>) =
?mult
\<one>\<^bsub>(| carrier = ?carrier, mult = ?mult, one = ?one, ... = ?more |)\<^esub> =
?one
monoid.more
 (| carrier = ?carrier, mult = ?mult, one = ?one, ... = ?more |) =
?more
mult_update ?mult'
 (| carrier = ?carrier, mult = ?mult, one = ?one, ... = ?more |) =
(| carrier = ?carrier, mult = ?mult' ?mult, one = ?one, ... = ?more |)
one_update ?one'
 (| carrier = ?carrier, mult = ?mult, one = ?one, ... = ?more |) =
(| carrier = ?carrier, mult = ?mult, one = ?one' ?one, ... = ?more |)
monoid.more_update ?more'
 (| carrier = ?carrier, mult = ?mult, one = ?one, ... = ?more |) =
(| carrier = ?carrier, mult = ?mult, one = ?one, ... = ?more' ?more |)
### theory "Jordan_Normal_Form.Gauss_Jordan_Elimination"
### 1.276s elapsed time, 5.240s cpu time, 0.583s GC time
Loading theory "Jordan_Normal_Form.Column_Operations" (required by "Draft.Mod_Type_ConnectMoreTemplates" via "Draft.Mod_Type_Connect" via "Perron_Frobenius.HMA_Connect" via "Jordan_Normal_Form.Spectral_Radius" via "Jordan_Normal_Form.Jordan_Normal_Form_Existence" via "Jordan_Normal_Form.Jordan_Normal_Form" via "Jordan_Normal_Form.Char_Poly" via "Jordan_Normal_Form.Determinant")
"- \<infinity>"
  :: "ereal"
"\<infinity>"
  :: "ereal"
locale linear_map
  fixes K :: "('a, 'b) ring_scheme"
    and V :: "('a, 'c, 'd) module_scheme"
    and W :: "('a, 'e, 'f) module_scheme"
    and T :: "'c => 'e"
  assumes "linear_map K V W T"
instantiation
  blinfun :: (real_normed_vector, real_normed_vector) real_normed_vector
  uminus_blinfun == uminus ::
    'a \<Rightarrow>\<^sub>L 'b => 'a \<Rightarrow>\<^sub>L 'b
  zero_blinfun == zero_class.zero :: 'a \<Rightarrow>\<^sub>L 'b
  minus_blinfun == minus ::
    'a \<Rightarrow>\<^sub>L 'b
    => 'a \<Rightarrow>\<^sub>L 'b => 'a \<Rightarrow>\<^sub>L 'b
  plus_blinfun == plus ::
    'a \<Rightarrow>\<^sub>L 'b
    => 'a \<Rightarrow>\<^sub>L 'b => 'a \<Rightarrow>\<^sub>L 'b
  sgn_blinfun == sgn ::
    'a \<Rightarrow>\<^sub>L 'b => 'a \<Rightarrow>\<^sub>L 'b
  norm_blinfun == norm :: 'a \<Rightarrow>\<^sub>L 'b => real
  scaleR_blinfun == scaleR ::
    real => 'a \<Rightarrow>\<^sub>L 'b => 'a \<Rightarrow>\<^sub>L 'b
  dist_blinfun == dist ::
    'a \<Rightarrow>\<^sub>L 'b => 'a \<Rightarrow>\<^sub>L 'b => real
  uniformity_blinfun == uniformity ::
    ('a \<Rightarrow>\<^sub>L 'b * 'a \<Rightarrow>\<^sub>L 'b) filter
  open_blinfun == open :: ('a \<Rightarrow>\<^sub>L 'b) set => bool
Found termination order: "(%p. size (snd p)) <*mlex*> {}"
Found termination order: "(%p. size (snd p)) <*mlex*> {}"
### theory "Jordan_Normal_Form.Column_Operations"
### 0.456s elapsed time, 1.824s cpu time, 0.237s GC time
Loading theory "Jordan_Normal_Form.Determinant" (required by "Draft.Mod_Type_ConnectMoreTemplates" via "Draft.Mod_Type_Connect" via "Perron_Frobenius.HMA_Connect" via "Jordan_Normal_Form.Spectral_Radius" via "Jordan_Normal_Form.Jordan_Normal_Form_Existence" via "Jordan_Normal_Form.Jordan_Normal_Form" via "Jordan_Normal_Form.Char_Poly")
locale bounded_bilinear
  fixes prod :: "'a => 'b => 'c"  (infixl \<open>**\<close> 70)
  assumes "bounded_bilinear (**)"
locale linear_map
  fixes K :: "('a, 'b) ring_scheme"
    and V :: "('a, 'c, 'd) module_scheme"
    and W :: "('a, 'e, 'f) module_scheme"
    and T :: "'c => 'e"
  assumes "linear_map K V W T"
### Ignoring duplicate rewrite rule:
### T \<zero>\<^bsub>V\<^esub> == \<zero>\<^bsub>W\<^esub>
"ereal (13 / 4)"
  :: "ereal"
"True"
  :: "bool"
"True"
  :: "bool"
locale bounded_bilinear
  fixes prod :: "'a => 'b => 'c"  (infixl \<open>**\<close> 70)
  assumes "bounded_bilinear (**)"
### theory "HOL-Analysis.Bounded_Linear_Function"
### 2.092s elapsed time, 8.505s cpu time, 1.014s GC time
Loading theory "HOL-Analysis.Derivative" (required by "Draft.Mod_Type_ConnectMoreTemplates" via "Draft.Mod_Type_Connect" via "Perron_Frobenius.HMA_Connect" via "HOL-Analysis.Cartesian_Euclidean_Space")
### theory "Jordan_Normal_Form.Determinant"
### 1.491s elapsed time, 5.150s cpu time, 0.477s GC time
Loading theory "Jordan_Normal_Form.Char_Poly" (required by "Draft.Mod_Type_ConnectMoreTemplates" via "Draft.Mod_Type_Connect" via "Perron_Frobenius.HMA_Connect" via "Jordan_Normal_Form.Spectral_Radius" via "Jordan_Normal_Form.Jordan_Normal_Form_Existence" via "Jordan_Normal_Form.Jordan_Normal_Form")
### theory "HOL-Analysis.Derivative"
### 1.749s elapsed time, 5.397s cpu time, 0.577s GC time
Loading theory "HOL-Analysis.Cartesian_Euclidean_Space" (required by "Draft.Mod_Type_ConnectMoreTemplates" via "Draft.Mod_Type_Connect" via "Perron_Frobenius.HMA_Connect")
locale inj_comm_ring_hom
  fixes hom :: "'a => 'b"
  assumes "inj_comm_ring_hom hom"
### theory "VectorSpace.VectorSpace"
### 3.968s elapsed time, 14.305s cpu time, 1.824s GC time
Loading theory "Jordan_Normal_Form.Missing_VectorSpace" (required by "Draft.Mod_Type_ConnectMoreTemplates" via "Draft.Mod_Type_Connect" via "Perron_Frobenius.HMA_Connect" via "Jordan_Normal_Form.Spectral_Radius" via "Jordan_Normal_Form.Jordan_Normal_Form_Existence" via "Jordan_Normal_Form.Schur_Decomposition" via "Jordan_Normal_Form.Gram_Schmidt" via "Jordan_Normal_Form.VS_Connect")
### theory "Jordan_Normal_Form.Char_Poly"
### 1.028s elapsed time, 3.217s cpu time, 0.527s GC time
Loading theory "Jordan_Normal_Form.Jordan_Normal_Form" (required by "Draft.Mod_Type_ConnectMoreTemplates" via "Draft.Mod_Type_Connect" via "Perron_Frobenius.HMA_Connect" via "Jordan_Normal_Form.Spectral_Radius" via "Jordan_Normal_Form.Jordan_Normal_Form_Existence")
### theory "HOL-Analysis.Cartesian_Euclidean_Space"
### 0.336s elapsed time, 1.062s cpu time, 0.233s GC time
Loading theory "Rank_Nullity_Theorem.Mod_Type" (required by "Draft.Mod_Type_ConnectMoreTemplates" via "Draft.Mod_Type_Connect")
### theory "Jordan_Normal_Form.Jordan_Normal_Form"
### 0.262s elapsed time, 0.843s cpu time, 0.000s GC time
locale Missing_VectorSpace.comp_fun_commute_on
  fixes f :: "'a => 'a => 'a"
    and A :: "'a set"
  assumes "Missing_VectorSpace.comp_fun_commute_on f A"
locale Missing_VectorSpace.comp_fun_commute_on
  fixes f :: "'a => 'a => 'a"
    and A :: "'a set"
  assumes "Missing_VectorSpace.comp_fun_commute_on f A"
locale abelian_group
  fixes G :: "('a, 'b) ring_scheme"  (structure)
  assumes "abelian_group G"
locale vectorspace
  fixes K :: "('a, 'b) ring_scheme"
    and V :: "('a, 'c, 'd) module_scheme"
  assumes "vectorspace K V"
locale module
  fixes R :: "('a, 'b) ring_scheme"  (structure)
    and M :: "('a, 'c, 'd) module_scheme"  (structure)
  assumes "module R M"
class mod_type = times + neg_numeral + wellorder +
  fixes Rep :: "'a => int"
    and Abs :: "int => 'a"
  assumes "type": "type_definition Rep Abs {0..<int CARD('a)}"
    and "size1": "1 < int CARD('a)"
    and "zero_def": "(0::'a) = Abs 0"
    and "one_def": "(1::'a) = Abs 1"
    and "add_def": "!!x y. x + y = Abs ((Rep x + Rep y) mod int CARD('a))"
    and "mult_def": "!!x y. x * y = Abs (Rep x * Rep y mod int CARD('a))"
    and "diff_def": "!!x y. x - y = Abs ((Rep x - Rep y) mod int CARD('a))"
    and "minus_def": "!!x. - x = Abs (- Rep x mod int CARD('a))"
    and "strict_mono_Rep": "strict_mono Rep"
locale linear_map
  fixes K :: "('a, 'b) ring_scheme"
    and V :: "('a, 'c, 'd) module_scheme"
    and W :: "('a, 'e, 'f) module_scheme"
    and T :: "'c => 'e"
  assumes "linear_map K V W T"
locale abelian_monoid
  fixes G :: "('a, 'b) ring_scheme"  (structure)
  assumes "abelian_monoid G"
instantiation
  bit0 :: (finite) mod_type
  bit1 :: (finite) mod_type
  Rep_bit0 == Rep :: 'a bit0 => int
  Abs_bit0 == Abs :: int => 'a bit0
  Rep_bit1 == Rep :: 'a bit1 => int
  Abs_bit1 == Abs :: int => 'a bit1
locale module
  fixes R :: "('a, 'b) ring_scheme"  (structure)
    and M :: "('a, 'c, 'd) module_scheme"  (structure)
  assumes "module R M"
### theory "Rank_Nullity_Theorem.Mod_Type"
### 1.680s elapsed time, 3.753s cpu time, 0.355s GC time
Loading theory "Rank_Nullity_Theorem.Miscellaneous" (required by "Draft.Mod_Type_ConnectMoreTemplates" via "Draft.Mod_Type_Connect" via "Gauss_Jordan.Elementary_Operations" via "Rank_Nullity_Theorem.Fundamental_Subspaces")
### theory "Jordan_Normal_Form.Missing_VectorSpace"
### 1.863s elapsed time, 4.303s cpu time, 0.355s GC time
Loading theory "Jordan_Normal_Form.VS_Connect" (required by "Draft.Mod_Type_ConnectMoreTemplates" via "Draft.Mod_Type_Connect" via "Perron_Frobenius.HMA_Connect" via "Jordan_Normal_Form.Spectral_Radius" via "Jordan_Normal_Form.Jordan_Normal_Form_Existence" via "Jordan_Normal_Form.Schur_Decomposition" via "Jordan_Normal_Form.Gram_Schmidt")
locale Vector_Spaces.linear
  fixes s1 :: "'a => 'b => 'b"  (infixr \<open>*a\<close> 75)
    and s2 :: "'a => 'c => 'c"  (infixr \<open>*b\<close> 75)
    and f :: "'b => 'c"
  assumes "Vector_Spaces.linear (*a) (*b) f"
locale finite_dimensional_vector_space
  fixes scale :: "'a => 'b => 'b"  (infixr \<open>*s\<close> 75)
    and Basis :: "'b set"
  assumes "finite_dimensional_vector_space (*s) Basis"
### Cannot skip proof of schematic goal statement
locale Vector_Spaces.linear
  fixes s1 :: "'a => 'b => 'b"  (infixr \<open>*a\<close> 75)
    and s2 :: "'a => 'c => 'c"  (infixr \<open>*b\<close> 75)
    and f :: "'b => 'c"
  assumes "linear (*a) (*b) f"
instantiation
  fun :: (real_vector, real_vector) real_vector
  scaleR_fun == scaleR :: real => ('a => 'b) => 'a => 'b
instantiation
  vec :: (type, finite) equal
  equal_vec == equal_class.equal :: ('a, 'b) vec => ('a, 'b) vec => bool
### theory "Rank_Nullity_Theorem.Miscellaneous"
### 0.973s elapsed time, 2.030s cpu time, 0.120s GC time
Loading theory "Gauss_Jordan.Code_Matrix" (required by "Draft.Mod_Type_ConnectMoreTemplates" via "Draft.Mod_Type_Connect" via "Gauss_Jordan.Elementary_Operations")
Loading theory "Rank_Nullity_Theorem.Fundamental_Subspaces" (required by "Draft.Mod_Type_ConnectMoreTemplates" via "Draft.Mod_Type_Connect" via "Gauss_Jordan.Elementary_Operations")
### Cannot skip proof of schematic goal statement
### theory "Rank_Nullity_Theorem.Fundamental_Subspaces"
### 0.205s elapsed time, 0.689s cpu time, 0.233s GC time
### theory "Gauss_Jordan.Code_Matrix"
### 0.394s elapsed time, 1.073s cpu time, 0.233s GC time
Loading theory "Gauss_Jordan.Elementary_Operations" (required by "Draft.Mod_Type_ConnectMoreTemplates" via "Draft.Mod_Type_Connect")
### Cannot skip proof of schematic goal statement
### Cannot skip proof of schematic goal statement
locale matrix_ring
  fixes n :: "nat"
    and field_type :: "'a itself"
### theory "Gauss_Jordan.Elementary_Operations"
### 0.518s elapsed time, 1.147s cpu time, 0.222s GC time
locale vec_module
  fixes f_ty :: "'a itself"
    and n :: "nat"
### Cannot skip proof of schematic goal statement
locale matrix_vs
  fixes nr :: "nat"
    and nc :: "nat"
    and field_type :: "'a itself"
### Cannot skip proof of schematic goal statement
locale vec_space
  fixes f_ty :: "'a itself"
    and n :: "nat"
### Cannot skip proof of schematic goal statement
locale mat_space
  fixes f_ty :: "'a itself"
    and nc :: "nat"
    and nr :: "nat"
locale vec_space
  fixes f_ty :: "'a itself"
    and n :: "nat"
locale vec_module
  fixes f_ty :: "'a itself"
    and n :: "nat"
locale idom_vec
  fixes n :: "nat"
    and f_ty :: "'a itself"
locale vec_space
  fixes f_ty :: "'a itself"
    and n :: "nat"
locale vec_module
  fixes f_ty :: "'a itself"
    and n :: "nat"
locale vec_space
  fixes f_ty :: "'a itself"
    and n :: "nat"
### theory "Jordan_Normal_Form.VS_Connect"
### 6.087s elapsed time, 8.624s cpu time, 0.851s GC time
Loading theory "Jordan_Normal_Form.Gram_Schmidt" (required by "Draft.Mod_Type_ConnectMoreTemplates" via "Draft.Mod_Type_Connect" via "Perron_Frobenius.HMA_Connect" via "Jordan_Normal_Form.Spectral_Radius" via "Jordan_Normal_Form.Jordan_Normal_Form_Existence" via "Jordan_Normal_Form.Schur_Decomposition")
Found termination order: "(%p. length (snd (snd p))) <*mlex*> {}"
Found termination order: "(%p. length (snd (snd p))) <*mlex*> {}"
Found termination order: "(%p. length (snd (snd p))) <*mlex*> {}"
locale cof_vec_space
  fixes n :: "nat"
    and f_ty :: "'a itself"
### theory "Jordan_Normal_Form.Gram_Schmidt"
### 0.879s elapsed time, 1.091s cpu time, 0.078s GC time
Loading theory "Jordan_Normal_Form.Schur_Decomposition" (required by "Draft.Mod_Type_ConnectMoreTemplates" via "Draft.Mod_Type_Connect" via "Perron_Frobenius.HMA_Connect" via "Jordan_Normal_Form.Spectral_Radius" via "Jordan_Normal_Form.Jordan_Normal_Form_Existence")
Found termination order: "(%p. length (snd p)) <*mlex*> {}"
### theory "Jordan_Normal_Form.Schur_Decomposition"
### 1.642s elapsed time, 1.999s cpu time, 0.185s GC time
Loading theory "Jordan_Normal_Form.Jordan_Normal_Form_Existence" (required by "Draft.Mod_Type_ConnectMoreTemplates" via "Draft.Mod_Type_Connect" via "Perron_Frobenius.HMA_Connect" via "Jordan_Normal_Form.Spectral_Radius")
Found termination order: "(%p. size (fst (snd p))) <*mlex*> {}"
Found termination order: "(%p. size (snd p)) <*mlex*> {}"
Found termination order:
  "(%p. size_list (%p. size (snd p)) (snd p)) <*mlex*> {}"
Found termination order: "(%p. size (fst (snd p))) <*mlex*> {}"
Found termination order: "(%p. size (fst p)) <*mlex*> {}"
Found termination order: "(%p. size (fst (snd (snd (snd p))))) <*mlex*> {}"
Found termination order:
  "(%p. size_list (%p. size (snd p)) (fst (snd (snd (snd p))))) <*mlex*> {}"
### theory "Jordan_Normal_Form.Jordan_Normal_Form_Existence"
### 2.108s elapsed time, 2.323s cpu time, 0.262s GC time
Loading theory "Jordan_Normal_Form.Spectral_Radius" (required by "Draft.Mod_Type_ConnectMoreTemplates" via "Draft.Mod_Type_Connect" via "Perron_Frobenius.HMA_Connect")
### theory "Jordan_Normal_Form.Spectral_Radius"
### 0.084s elapsed time, 0.090s cpu time, 0.000s GC time
Loading theory "Perron_Frobenius.HMA_Connect" (required by "Draft.Mod_Type_ConnectMoreTemplates" via "Draft.Mod_Type_Connect")
### Ambiguous input (line 91 of "$AFP/Perron_Frobenius/HMA_Connect.thy") produces 2 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq" ("_applC" ("_position" vec_elements) ("_position" v))
###     ("_applC" ("_position" set)
###       ("_listcompr"
###         ("\<^const>Finite_Cartesian_Product.vec.vec_nth" ("_position" v)
###           ("_position" i))
###         ("_lc_gen" ("_position" i)
###           ("\<^const>List.upt" ("\<^const>Groups.zero_class.zero")
###             ("_applC" ("_position" dim_vec) ("_position" v))))
###         ("_lc_end")))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq" ("_applC" ("_position" vec_elements) ("_position" v))
###     ("_applC" ("_position" set)
###       ("_listcompr"
###         ("\<^const>Matrix.vec_index" ("_position" v) ("_position" i))
###         ("_lc_gen" ("_position" i)
###           ("\<^const>List.upt" ("\<^const>Groups.zero_class.zero")
###             ("_applC" ("_position" dim_vec) ("_position" v))))
###         ("_lc_end")))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 93 of "$AFP/Perron_Frobenius/HMA_Connect.thy") produces 2 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq" ("_applC" ("_position" vec_elements) ("_position" v))
###     ("_Setcompr"
###       ("\<^const>Finite_Cartesian_Product.vec.vec_nth" ("_position" v)
###         ("_position" i))
###       ("_position" i)
###       ("\<^const>Orderings.ord_class.less" ("_position" i)
###         ("_applC" ("_position" dim_vec) ("_position" v))))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq" ("_applC" ("_position" vec_elements) ("_position" v))
###     ("_Setcompr"
###       ("\<^const>Matrix.vec_index" ("_position" v) ("_position" i))
###       ("_position" i)
###       ("\<^const>Orderings.ord_class.less" ("_position" i)
###         ("_applC" ("_position" dim_vec) ("_position" v))))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ignoring duplicate rewrite rule:
### \<chi>i. ?y $h i == ?y
### Rule already declared as introduction (intro)
### (!!x y. ?A x y ==> ?B (?f x) (?g y)) ==> rel_fun ?A ?B ?f ?g
### Rule already declared as introduction (intro)
### (!!x y. ?A x y ==> ?B (?f x) (?g y)) ==> (?A ===> ?B) ?f ?g
### Ambiguous input (line 475 of "$AFP/Perron_Frobenius/HMA_Connect.thy") produces 4 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq" ("_applC" ("_position" mat2matofpoly) ("_position" A))
###     ("\<^const>Finite_Cartesian_Product.vec.vec_lambda_binder"
###       ("_idts" ("_position" i) ("_position" j))
###       ("_poly"
###         ("\<^const>Matrix.vec_index"
###           ("\<^const>Matrix.vec_index" ("_position" A) ("_position" i))
###           ("_position" j))))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq" ("_applC" ("_position" mat2matofpoly) ("_position" A))
###     ("\<^const>Finite_Cartesian_Product.vec.vec_lambda_binder"
###       ("_idts" ("_position" i) ("_position" j))
###       ("_poly"
###         ("\<^const>Finite_Cartesian_Product.vec.vec_nth" ("_position" A)
###           ("\<^const>Matrix.vec_index" ("_position" i) ("_position" j)))))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq" ("_applC" ("_position" mat2matofpoly) ("_position" A))
###     ("\<^const>Finite_Cartesian_Product.vec.vec_lambda_binder"
###       ("_idts" ("_position" i) ("_position" j))
###       ("_poly"
###         ("\<^const>Finite_Cartesian_Product.vec.vec_nth"
###           ("\<^const>Matrix.vec_index" ("_position" A) ("_position" i))
###           ("_position" j))))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq" ("_applC" ("_position" mat2matofpoly) ("_position" A))
###     ("\<^const>Finite_Cartesian_Product.vec.vec_lambda_binder"
###       ("_idts" ("_position" i) ("_position" j))
###       ("_poly"
###         ("\<^const>Finite_Cartesian_Product.vec.vec_nth"
###           ("\<^const>Finite_Cartesian_Product.vec.vec_nth" ("_position" A)
###             ("_position" i))
###           ("_position" j))))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 480 of "$AFP/Perron_Frobenius/HMA_Connect.thy") produces 4 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("_applC" ("_position" erase_mat)
###       ("_cargs" ("_position" A) ("_cargs" ("_position" i) ("_position" j))))
###     ("\<^const>Finite_Cartesian_Product.vec.vec_lambda_binder"
###       ("_position" i')
###       ("\<^const>Finite_Cartesian_Product.vec.vec_lambda_binder"
###         ("_position" j')
###         ("\<^const>HOL.If"
###           ("\<^const>HOL.disj"
###             ("\<^const>HOL.eq" ("_position" i') ("_position" i))
###             ("\<^const>HOL.eq" ("_position" j') ("_position" j)))
###           ("\<^const>Groups.zero_class.zero")
###           ("\<^const>Finite_Cartesian_Product.vec.vec_nth"
###             ("\<^const>Finite_Cartesian_Product.vec.vec_nth" ("_position" A)
###               ("_position" i'))
###             ("_position" j')))))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("_applC" ("_position" erase_mat)
###       ("_cargs" ("_position" A) ("_cargs" ("_position" i) ("_position" j))))
###     ("\<^const>Finite_Cartesian_Product.vec.vec_lambda_binder"
###       ("_position" i')
###       ("\<^const>Finite_Cartesian_Product.vec.vec_lambda_binder"
###         ("_position" j')
###         ("\<^const>HOL.If"
###           ("\<^const>HOL.disj"
###             ("\<^const>HOL.eq" ("_position" i') ("_position" i))
###             ("\<^const>HOL.eq" ("_position" j') ("_position" j)))
###           ("\<^const>Groups.zero_class.zero")
###           ("\<^const>Finite_Cartesian_Product.vec.vec_nth"
###             ("\<^const>Matrix.vec_index" ("_position" A) ("_position" i'))
###             ("_position" j')))))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("_applC" ("_position" erase_mat)
###       ("_cargs" ("_position" A) ("_cargs" ("_position" i) ("_position" j))))
###     ("\<^const>Finite_Cartesian_Product.vec.vec_lambda_binder"
###       ("_position" i')
###       ("\<^const>Finite_Cartesian_Product.vec.vec_lambda_binder"
###         ("_position" j')
###         ("\<^const>HOL.If"
###           ("\<^const>HOL.disj"
###             ("\<^const>HOL.eq" ("_position" i') ("_position" i))
###             ("\<^const>HOL.eq" ("_position" j') ("_position" j)))
###           ("\<^const>Groups.zero_class.zero")
###           ("\<^const>Finite_Cartesian_Product.vec.vec_nth" ("_position" A)
###             ("\<^const>Matrix.vec_index" ("_position" i')
###               ("_position" j'))))))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("_applC" ("_position" erase_mat)
###       ("_cargs" ("_position" A) ("_cargs" ("_position" i) ("_position" j))))
###     ("\<^const>Finite_Cartesian_Product.vec.vec_lambda_binder"
###       ("_position" i')
###       ("\<^const>Finite_Cartesian_Product.vec.vec_lambda_binder"
###         ("_position" j')
###         ("\<^const>HOL.If"
###           ("\<^const>HOL.disj"
###             ("\<^const>HOL.eq" ("_position" i') ("_position" i))
###             ("\<^const>HOL.eq" ("_position" j') ("_position" j)))
###           ("\<^const>Groups.zero_class.zero")
###           ("\<^const>Matrix.vec_index"
###             ("\<^const>Matrix.vec_index" ("_position" A) ("_position" i'))
###             ("_position" j')))))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### theory "Perron_Frobenius.HMA_Connect"
### 2.130s elapsed time, 2.239s cpu time, 0.144s GC time
Loading theory "Draft.Mod_Type_Connect" (required by "Draft.Mod_Type_ConnectMoreTemplates")
Found termination order: "{}"
### theory "Draft.Mod_Type_Connect"
### 0.781s elapsed time, 0.866s cpu time, 0.113s GC time
Loading theory "Draft.Mod_Type_ConnectMoreTemplates"
val templateLemmas =
   [("Mod_Type_Connect.to_hma_from_hma\<^sub>v",
     "Mod_Type_Connect.to_hma\<^sub>v
       (Mod_Type_Connect.from_hma\<^sub>v ?v) =
      ?v",
     template_equation
      (template_app
        (template_hole 1, template_app (template_hole 0, template_var 0)),
       template_var 0)),
    ("Mod_Type_Connect.to_hma_from_hma\<^sub>m",
     "Mod_Type_Connect.to_hma\<^sub>m
       (Mod_Type_Connect.from_hma\<^sub>m ?v) =
      ?v",
     template_equation
      (template_app
        (template_hole 1, template_app (template_hole 0, template_var 0)),
       template_var 0)),
    ("Mod_Type_Connect.scalar_product",
     "Mod_Type_Connect.from_hma\<^sub>v ?v \<bullet>
      Mod_Type_Connect.from_hma\<^sub>v ?w =
      scalar_product ?v ?w",
     template_equation
      (template_app
        (template_app
          (template_hole 2, template_app (template_hole 1, template_var 1)),
         template_app (template_hole 1, template_var 0)),
       template_app
        (template_app (template_hole 0, template_var 1), template_var 0))),
    ("Mod_Type_Connect.from_hma\<^sub>m_inj",
     "(Mod_Type_Connect.from_hma\<^sub>m ?x =
       Mod_Type_Connect.from_hma\<^sub>m ?y) =
      (?x = ?y)",
     template_bimplication
      (template_equation
        (template_app (template_hole 1, template_var 1),
         template_app (template_hole 1, template_var 0)),
       template_equation (template_var 1, template_var 0))),
    ("Mod_Type_Connect.from_hma\<^sub>v_inj",
     "(Mod_Type_Connect.from_hma\<^sub>v ?x =
       Mod_Type_Connect.from_hma\<^sub>v ?y) =
      (?x = ?y)",
     template_bimplication
      (template_equation
        (template_app (template_hole 1, template_var 1),
         template_app (template_hole 1, template_var 0)),
       template_equation (template_var 1, template_var 0))),
    ("Mod_Type_Connect.from_hma\<^sub>m_add",
     "Mod_Type_Connect.from_hma\<^sub>m ?a +
      Mod_Type_Connect.from_hma\<^sub>m ?b =
      Mod_Type_Connect.from_hma\<^sub>m (?a + ?b)",
     template_equation
      (template_app
        (template_app
          (template_hole 2, template_app (template_hole 1, template_var 1)),
         template_app (template_hole 1, template_var 0)),
       template_app
        (template_hole 1,
         template_app
          (template_app (template_hole 0, template_var 1),
           template_var 0)))),
    ("Mod_Type_Connect.from_hma\<^sub>m_diff",
     "Mod_Type_Connect.from_hma\<^sub>m ?a -
      Mod_Type_Connect.from_hma\<^sub>m ?b =
      Mod_Type_Connect.from_hma\<^sub>m (?a - ?b)",
     template_equation
      (template_app
        (template_app
          (template_hole 2, template_app (template_hole 1, template_var 1)),
         template_app (template_hole 1, template_var 0)),
       template_app
        (template_hole 1,
         template_app
          (template_app (template_hole 0, template_var 1),
           template_var 0)))),
    ("Mod_Type_Connect.from_hma\<^sub>v_add",
     "Mod_Type_Connect.from_hma\<^sub>v ?v +
      Mod_Type_Connect.from_hma\<^sub>v ?w =
      Mod_Type_Connect.from_hma\<^sub>v (?v + ?w)",
     template_equation
      (template_app
        (template_app
          (template_hole 2, template_app (template_hole 1, template_var 1)),
         template_app (template_hole 1, template_var 0)),
       template_app
        (template_hole 1,
         template_app
          (template_app (template_hole 0, template_var 1),
           template_var 0)))),
    ("Mod_Type_Connect.from_hma\<^sub>v_diff",
     "Mod_Type_Connect.from_hma\<^sub>v ?v -
      Mod_Type_Connect.from_hma\<^sub>v ?w =
      Mod_Type_Connect.from_hma\<^sub>v (?v - ?w)",
     template_equation
      (template_app
        (template_app
          (template_hole 2, template_app (template_hole 1, template_var 1)),
         template_app (template_hole 1, template_var 0)),
       template_app
        (template_hole 1,
         template_app
          (template_app (template_hole 0, template_var 1),
           template_var 0)))),
    ("Mod_Type_Connect.dim_col_transfer_rule",
     "Mod_Type_Connect.HMA_M ?A ?A' ==> dim_col ?A = CARD(?'nc)",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 4, template_var 1),
              template_var 0)
            )],
       template_equation
        (template_app (template_hole 2, template_var 1),
         template_app (template_hole 1, template_hole 0)))),
    ("Mod_Type_Connect.dim_row_transfer_rule",
     "Mod_Type_Connect.HMA_M ?A ?A' ==> dim_row ?A = CARD(?'nr)",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 4, template_var 1),
              template_var 0)
            )],
       template_equation
        (template_app (template_hole 2, template_var 1),
         template_app (template_hole 1, template_hole 0)))),
    ("Mod_Type_Connect.mult_mat_vec_scalar",
     "?A *v ?v = HMA_Connect.mk_vec (%i. scalar_product (row i ?A) ?v)",
     template_equation
      (template_app
        (template_app (template_hole 3, template_var 1), template_var 0),
       template_app (template_hole 2, t_empty))),
    ("Mod_Type_Connect.from_hma_to_hma\<^sub>v",
     "?v : carrier_vec CARD(?'n) ==>
      Mod_Type_Connect.from_hma\<^sub>v
       (Mod_Type_Connect.to_hma\<^sub>v ?v) =
      ?v",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 6, template_var 0),
              template_app
               (template_hole 5,
                template_app (template_hole 4, template_hole 3)))
            )],
       template_equation
        (template_app
          (template_hole 1, template_app (template_hole 0, template_var 0)),
         template_var 0))),
    ("Mod_Type_Connect.mat_mult_scalar",
     "?A ** ?B =
      HMA_Connect.mk_mat (%i j. scalar_product (row i ?A) (column j ?B))",
     template_equation
      (template_app
        (template_app (template_hole 4, template_var 1), template_var 0),
       template_app (template_hole 3, t_empty))),
    ("Mod_Type_Connect.from_hma_to_hma\<^sub>m",
     "?A : carrier_mat CARD(?'nr) CARD(?'nc) ==>
      Mod_Type_Connect.from_hma\<^sub>m
       (Mod_Type_Connect.to_hma\<^sub>m ?A) =
      ?A",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 8, template_var 0),
              template_app
               (template_app
                 (template_hole 7,
                  template_app (template_hole 6, template_hole 5)),
                template_app (template_hole 4, template_hole 3)))
            )],
       template_equation
        (template_app
          (template_hole 1, template_app (template_hole 0, template_var 0)),
         template_var 0))),
    ("Mod_Type_Connect.from_nat_inj",
     "[| mod_type_class.from_nat ?x = mod_type_class.from_nat ?xa;
         ?x < CARD(?'a); ?xa < CARD(?'a) |]
      ==> ?x = ?xa",
     template_implication
      ([template_equation
         (template_app (template_hole 4, template_var 1),
          template_app (template_hole 4, template_var 0)),
        template_inequation
         (less_than, template_var 1,
          template_app (template_hole 2, template_hole 1)),
        template_inequation
         (less_than, template_var 0,
          template_app (template_hole 2, template_hole 1))],
       template_equation (template_var 1, template_var 0)))]:
   (string * thm * template) list
### theory "Draft.Mod_Type_ConnectMoreTemplates"
### 1.323s elapsed time, 1.779s cpu time, 0.184s GC time
val it = (): unit
