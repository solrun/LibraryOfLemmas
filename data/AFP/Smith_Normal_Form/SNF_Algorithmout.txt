Loading theory "HOL-Eisbach.Eisbach" (required by "Draft.SNF_AlgorithmMoreTemplates" via "Draft.SNF_Algorithm" via "Draft.Smith_Normal_Form_JNF" via "Draft.SNF_Missing_Lemmas" via "Draft.Mod_Type_Connect" via "Perron_Frobenius.HMA_Connect")
Loading theory "HOL-Combinatorics.Transposition" (required by "Draft.SNF_AlgorithmMoreTemplates" via "Draft.SNF_Algorithm" via "Draft.Smith_Normal_Form_JNF" via "Draft.SNF_Missing_Lemmas" via "Hermite.Hermite" via "Echelon_Form.Echelon_Form_Inverse" via "Echelon_Form.Echelon_Form_Det" via "Echelon_Form.Echelon_Form" via "Echelon_Form.Rings2" via "HOL-Analysis.Analysis" via "HOL-Analysis.Determinants" via "HOL-Combinatorics.Permutations")
Loading theory "HOL-Computational_Algebra.Fraction_Field" (required by "Draft.SNF_AlgorithmMoreTemplates" via "Draft.SNF_Algorithm" via "Draft.Smith_Normal_Form_JNF" via "Draft.SNF_Missing_Lemmas" via "Hermite.Hermite" via "Echelon_Form.Echelon_Form_Inverse" via "Echelon_Form.Echelon_Form_Det" via "Echelon_Form.Echelon_Form" via "Echelon_Form.Rings2" via "HOL-Computational_Algebra.Polynomial_Factorial" via "HOL-Computational_Algebra.Normalized_Fraction")
Loading theory "HOL-Library.Cancellation" (required by "Draft.SNF_AlgorithmMoreTemplates" via "Draft.SNF_Algorithm" via "Draft.Smith_Normal_Form_JNF" via "Draft.SNF_Missing_Lemmas" via "Hermite.Hermite" via "Echelon_Form.Echelon_Form_Inverse" via "Echelon_Form.Echelon_Form_Det" via "Echelon_Form.Echelon_Form" via "Echelon_Form.Rings2" via "HOL-Analysis.Analysis" via "HOL-Analysis.Determinants" via "HOL-Combinatorics.Permutations" via "HOL-Library.Multiset")
signature PARSE_TOOLS =
  sig
    val is_real_val: ('a, 'b) parse_val -> bool
    val name_term: (term, string) parse_val parser
    val parse_term_val: 'a parser -> (term, 'a) parse_val parser
    val parse_thm_val: 'a parser -> (thm, 'a) parse_val parser
    datatype ('a, 'b) parse_val
    = Parse_Val of 'b * ('a -> unit) | Real_Val of 'a
    val parse_val_cases:
       ('a -> 'b) -> ('b, 'a) parse_val -> 'b * ('b -> unit)
    val the_parse_fun: ('a, 'b) parse_val -> 'a -> unit
    val the_parse_val: ('a, 'b) parse_val -> 'b
    val the_real_val: ('a, 'b) parse_val -> 'a
  end
structure Parse_Tools: PARSE_TOOLS
signature METHOD_CLOSURE =
  sig
    val apply_method:
       Proof.context ->
         string ->
           term list ->
             thm list list ->
               (Proof.context -> Method.method) list ->
                 Proof.context -> thm list -> context_tactic
    val method:
       binding ->
         (binding * typ option * mixfix) list ->
           binding list ->
             binding list ->
               binding list ->
                 Token.src -> local_theory -> string * local_theory
    val method_cmd:
       binding ->
         (binding * string option * mixfix) list ->
           binding list ->
             binding list ->
               binding list ->
                 Token.src -> local_theory -> string * local_theory
  end
structure Method_Closure: METHOD_CLOSURE
### theory "HOL-Combinatorics.Transposition"
### 0.179s elapsed time, 0.693s cpu time, 0.033s GC time
Loading theory "HOL-Library.Code_Abstract_Nat" (required by "Draft.SNF_AlgorithmMoreTemplates" via "Draft.SNF_Algorithm" via "Draft.Smith_Normal_Form_JNF" via "Draft.SNF_Missing_Lemmas" via "Hermite.Hermite" via "Echelon_Form.Examples_Echelon_Form_Abstract" via "Gauss_Jordan.Examples_Gauss_Jordan_Abstract" via "HOL-Library.Code_Target_Numeral" via "HOL-Library.Code_Target_Nat")
structure Eisbach_Rule_Insts: sig end
### theory "HOL-Library.Code_Abstract_Nat"
### 0.072s elapsed time, 0.288s cpu time, 0.000s GC time
Loading theory "HOL-Library.Code_Target_Nat" (required by "Draft.SNF_AlgorithmMoreTemplates" via "Draft.SNF_Algorithm" via "Draft.Smith_Normal_Form_JNF" via "Draft.SNF_Missing_Lemmas" via "Hermite.Hermite" via "Echelon_Form.Examples_Echelon_Form_Abstract" via "Gauss_Jordan.Examples_Gauss_Jordan_Abstract" via "HOL-Library.Code_Target_Numeral")
instantiation
  fract :: (idom) comm_ring_1
  uminus_fract == uminus :: 'a fract => 'a fract
  one_fract == one_class.one :: 'a fract
  times_fract == times :: 'a fract => 'a fract => 'a fract
  zero_fract == zero_class.zero :: 'a fract
  minus_fract == minus :: 'a fract => 'a fract => 'a fract
  plus_fract == plus :: 'a fract => 'a fract => 'a fract
signature CANCEL = sig val proc: Proof.context -> cterm -> thm option end
functor Cancel_Fun (Data: CANCEL_NUMERALS_DATA): CANCEL
### Code generator: dropping subsumed code equation
### divmod_nat ?m ?n ==
### if ?n = 0 | ?m < ?n then (0, ?m)
### else let (q, y) = divmod_nat (?m - ?n) ?n in (Suc q, y)
### Code generator: dropping subsumed code equation
### divmod (num.Bit1 ?m) (num.Bit1 ?n) ==
### if ?m < ?n then (0, numeral (num.Bit1 ?m))
### else divmod_step (num.Bit1 ?n)
###       (divmod (num.Bit1 ?m) (num.Bit0 (num.Bit1 ?n)))
### Code generator: dropping subsumed code equation
### divmod (num.Bit0 ?m) (num.Bit1 ?n) ==
### if ?m <= ?n then (0, numeral (num.Bit0 ?m))
### else divmod_step (num.Bit1 ?n)
###       (divmod (num.Bit0 ?m) (num.Bit0 (num.Bit1 ?n)))
### Code generator: dropping subsumed code equation
### divmod (num.Bit1 ?m) (num.Bit0 ?n) ==
### case divmod ?m ?n of (q, r) => (q, 2 * r + 1)
### Code generator: dropping subsumed code equation
### divmod (num.Bit0 ?m) (num.Bit0 ?n) ==
### case divmod ?m ?n of (q, r) => (q, 2 * r)
### Code generator: dropping subsumed code equation
### divmod num.One (num.Bit1 ?n) == (0, Numeral1)
### Code generator: dropping subsumed code equation
### divmod num.One (num.Bit0 ?n) == (0, Numeral1)
### Code generator: dropping subsumed code equation
### divmod ?m num.One == (numeral ?m, 0)
### Code generator: dropping subsumed code equation
### Suc ?m <= ?n == ?m < ?n
### Code generator: dropping subsumed code equation
### 0 <= ?n == True
### Code generator: dropping subsumed code equation
### ?m < Suc ?n == ?m <= ?n
### Code generator: dropping subsumed code equation
### ?n < 0 == False
signature CANCEL_DATA =
  sig
    val dest_coeff: term -> int * term
    val dest_sum: term -> term list
    val find_first_coeff: term -> term list -> int * term list
    val mk_coeff: int * term -> term
    val mk_sum: typ -> term list -> term
    val norm_ss1: simpset
    val norm_ss2: simpset
    val norm_tac: Proof.context -> tactic
    val numeral_simp_tac: Proof.context -> tactic
    val prove_conv:
       tactic list -> Proof.context -> thm list -> term * term -> thm option
    val simplify_meta_eq: Proof.context -> thm -> thm
    val trans_tac: Proof.context -> thm option -> tactic
  end
structure Cancel_Data: CANCEL_DATA
### Code generator: dropping subsumed code equation
### of_nat ?n == semiring_1_class.of_nat_aux (%i. i + (1::?'a)) ?n (0::?'a)
### theory "HOL-Library.Code_Target_Nat"
### 0.134s elapsed time, 0.533s cpu time, 0.034s GC time
Loading theory "HOL-Library.Code_Target_Int" (required by "Draft.SNF_AlgorithmMoreTemplates" via "Draft.SNF_Algorithm" via "Draft.Smith_Normal_Form_JNF" via "Draft.SNF_Missing_Lemmas" via "Hermite.Hermite" via "Echelon_Form.Examples_Echelon_Form_Abstract" via "Gauss_Jordan.Examples_Gauss_Jordan_Abstract" via "HOL-Library.Code_Target_Numeral")
signature CANCEL_SIMPROCS =
  sig
    val diff_cancel: Proof.context -> cterm -> thm option
    val eq_cancel: Proof.context -> cterm -> thm option
    val less_cancel: Proof.context -> cterm -> thm option
    val less_eq_cancel: Proof.context -> cterm -> thm option
  end
structure Cancel_Simprocs: CANCEL_SIMPROCS
### ML warning (line 170 of "~~/src/HOL/Eisbach/match_method.ML"):
### Pattern is not exhaustive.
### ML warning (line 187 of "~~/src/HOL/Eisbach/match_method.ML"):
### Pattern is not exhaustive.
### ML warning (line 309 of "~~/src/HOL/Eisbach/match_method.ML"):
### Pattern is not exhaustive.
signature MATCH_METHOD =
  sig
    val focus_params: Proof.context -> term list
    val focus_schematics: Proof.context -> Envir.tenv
  end
structure Match_Method: MATCH_METHOD
### theory "HOL-Library.Cancellation"
### 0.409s elapsed time, 1.612s cpu time, 0.067s GC time
Loading theory "HOL-Library.Multiset" (required by "Draft.SNF_AlgorithmMoreTemplates" via "Draft.SNF_Algorithm" via "Draft.Smith_Normal_Form_JNF" via "Draft.SNF_Missing_Lemmas" via "Hermite.Hermite" via "Echelon_Form.Echelon_Form_Inverse" via "Echelon_Form.Echelon_Form_Det" via "Echelon_Form.Echelon_Form" via "Echelon_Form.Rings2" via "HOL-Analysis.Analysis" via "HOL-Analysis.Determinants" via "HOL-Combinatorics.Permutations")
val method_evaluate = fn: Method.text -> Proof.context -> thm list -> tactic
### Code generator: dropping subsumed code equation
### 1 == Int.Pos num.One
### Code generator: dropping subsumed code equation
### Int.Neg ?m + Int.Neg ?n == Int.Neg (?m + ?n)
### Code generator: dropping subsumed code equation
### Int.Neg ?m + Int.Pos ?n == Int.sub ?n ?m
### Code generator: dropping subsumed code equation
### Int.Pos ?m + Int.Neg ?n == Int.sub ?m ?n
### Code generator: dropping subsumed code equation
### Int.Pos ?m + Int.Pos ?n == Int.Pos (?m + ?n)
### Code generator: dropping subsumed code equation
### 0 + ?l == ?l
### Code generator: dropping subsumed code equation
### ?k + 0 == ?k
### Code generator: dropping subsumed code equation
### - Int.Neg ?m == Int.Pos ?m
### Code generator: dropping subsumed code equation
### - Int.Pos ?m == Int.Neg ?m
### Code generator: dropping subsumed code equation
### - 0 == 0
### Code generator: dropping subsumed code equation
### Int.Neg ?m - Int.Neg ?n == Int.sub ?n ?m
### Code generator: dropping subsumed code equation
### Int.Neg ?m - Int.Pos ?n == Int.Neg (?m + ?n)
### Code generator: dropping subsumed code equation
### Int.Pos ?m - Int.Neg ?n == Int.Pos (?m + ?n)
### Code generator: dropping subsumed code equation
### Int.Pos ?m - Int.Pos ?n == Int.sub ?m ?n
### Code generator: dropping subsumed code equation
### 0 - ?l == - ?l
### Code generator: dropping subsumed code equation
### ?k - 0 == ?k
### Code generator: dropping subsumed code equation
### Int.dup (Int.Neg ?n) == Int.Neg (num.Bit0 ?n)
### Code generator: dropping subsumed code equation
### Int.dup (Int.Pos ?n) == Int.Pos (num.Bit0 ?n)
### Code generator: dropping subsumed code equation
### Int.dup 0 == 0
### Code generator: dropping subsumed code equation
### Int.Neg ?m * Int.Neg ?n == Int.Pos (?m * ?n)
### Code generator: dropping subsumed code equation
### Int.Neg ?m * Int.Pos ?n == Int.Neg (?m * ?n)
### Code generator: dropping subsumed code equation
### Int.Pos ?m * Int.Neg ?n == Int.Neg (?m * ?n)
### Code generator: dropping subsumed code equation
### Int.Pos ?m * Int.Pos ?n == Int.Pos (?m * ?n)
### Code generator: dropping subsumed code equation
### 0 * ?l == 0
### Code generator: dropping subsumed code equation
### ?k * 0 == 0
### Code generator: dropping subsumed code equation
### Int.Neg ?m div Int.Neg ?n == fst (divmod ?m ?n)
### Code generator: dropping subsumed code equation
### Int.Pos ?m div Int.Neg ?n == - Divides.adjust_div (divmod ?m ?n)
### Code generator: dropping subsumed code equation
### Int.Neg ?m div Int.Pos ?n == - Divides.adjust_div (divmod ?m ?n)
### Code generator: dropping subsumed code equation
### Int.Pos ?m div Int.Pos ?n == fst (divmod ?m ?n)
### Code generator: dropping subsumed code equation
### ?k div Int.Neg num.One == - ?k
### Code generator: dropping subsumed code equation
### ?k div Int.Pos num.One == ?k
### Code generator: dropping subsumed code equation
### 0 div ?k == 0
### Code generator: dropping subsumed code equation
### ?k div 0 == 0
### Code generator: dropping subsumed code equation
### Int.Neg ?m mod Int.Neg ?n == - snd (divmod ?m ?n)
### Code generator: dropping subsumed code equation
### Int.Pos ?m mod Int.Neg ?n ==
### - Divides.adjust_mod (Int.Pos ?n) (snd (divmod ?m ?n))
### Code generator: dropping subsumed code equation
### Int.Neg ?m mod Int.Pos ?n ==
### Divides.adjust_mod (Int.Pos ?n) (snd (divmod ?m ?n))
### Code generator: dropping subsumed code equation
### Int.Pos ?m mod Int.Pos ?n == snd (divmod ?m ?n)
### Code generator: dropping subsumed code equation
### ?k mod Int.Neg num.One == 0
### Code generator: dropping subsumed code equation
### ?k mod Int.Pos num.One == 0
### Code generator: dropping subsumed code equation
### 0 mod ?k == 0
### Code generator: dropping subsumed code equation
### ?k mod 0 == ?k
### Code generator: dropping subsumed code equation
### divmod (num.Bit1 ?m) (num.Bit1 ?n) ==
### if ?m < ?n then (0, numeral (num.Bit1 ?m))
### else divmod_step (num.Bit1 ?n)
###       (divmod (num.Bit1 ?m) (num.Bit0 (num.Bit1 ?n)))
### Code generator: dropping subsumed code equation
### divmod (num.Bit0 ?m) (num.Bit1 ?n) ==
### if ?m <= ?n then (0, numeral (num.Bit0 ?m))
### else divmod_step (num.Bit1 ?n)
###       (divmod (num.Bit0 ?m) (num.Bit0 (num.Bit1 ?n)))
### Code generator: dropping subsumed code equation
### divmod (num.Bit1 ?m) (num.Bit0 ?n) ==
### case divmod ?m ?n of (q, r) => (q, 2 * r + 1)
### Code generator: dropping subsumed code equation
### divmod (num.Bit0 ?m) (num.Bit0 ?n) ==
### case divmod ?m ?n of (q, r) => (q, 2 * r)
### Code generator: dropping subsumed code equation
### divmod num.One (num.Bit1 ?n) == (0, Numeral1)
### Code generator: dropping subsumed code equation
### divmod num.One (num.Bit0 ?n) == (0, Numeral1)
### Code generator: dropping subsumed code equation
### divmod ?m num.One == (numeral ?m, 0)
### Code generator: dropping subsumed code equation
### equal_class.equal ?k ?k == True
### Code generator: dropping subsumed code equation
### equal_class.equal (Int.Neg ?k) (Int.Neg ?l) == equal_class.equal ?k ?l
### Code generator: dropping subsumed code equation
### equal_class.equal (Int.Neg ?k) (Int.Pos ?l) == False
### Code generator: dropping subsumed code equation
### equal_class.equal (Int.Neg ?k) 0 == False
### Code generator: dropping subsumed code equation
### equal_class.equal (Int.Pos ?k) (Int.Neg ?l) == False
### Code generator: dropping subsumed code equation
### equal_class.equal (Int.Pos ?k) (Int.Pos ?l) == equal_class.equal ?k ?l
### Code generator: dropping subsumed code equation
### equal_class.equal (Int.Pos ?k) 0 == False
### Code generator: dropping subsumed code equation
### equal_class.equal 0 (Int.Neg ?l) == False
### Code generator: dropping subsumed code equation
### equal_class.equal 0 (Int.Pos ?l) == False
### Code generator: dropping subsumed code equation
### equal_class.equal 0 0 == True
### Code generator: dropping subsumed code equation
### Int.Neg ?k <= Int.Neg ?l == ?l <= ?k
### Code generator: dropping subsumed code equation
### Int.Neg ?k <= Int.Pos ?l == True
### Code generator: dropping subsumed code equation
### Int.Neg ?k <= 0 == True
### Code generator: dropping subsumed code equation
### Int.Pos ?k <= Int.Neg ?l == False
### Code generator: dropping subsumed code equation
### Int.Pos ?k <= Int.Pos ?l == ?k <= ?l
### Code generator: dropping subsumed code equation
### Int.Pos ?k <= 0 == False
### Code generator: dropping subsumed code equation
### 0 <= Int.Neg ?l == False
### Code generator: dropping subsumed code equation
### 0 <= Int.Pos ?l == True
### Code generator: dropping subsumed code equation
### 0 <= 0 == True
### Code generator: dropping subsumed code equation
### Int.Neg ?k < Int.Neg ?l == ?l < ?k
### Code generator: dropping subsumed code equation
### Int.Neg ?k < Int.Pos ?l == True
### Code generator: dropping subsumed code equation
### Int.Neg ?k < 0 == True
### Code generator: dropping subsumed code equation
### Int.Pos ?k < Int.Neg ?l == False
### Code generator: dropping subsumed code equation
### Int.Pos ?k < Int.Pos ?l == ?k < ?l
### Code generator: dropping subsumed code equation
### Int.Pos ?k < 0 == False
### Code generator: dropping subsumed code equation
### 0 < Int.Neg ?l == False
### Code generator: dropping subsumed code equation
### 0 < Int.Pos ?l == True
### Code generator: dropping subsumed code equation
### 0 < 0 == False
### theory "HOL-Eisbach.Eisbach"
### 0.483s elapsed time, 1.891s cpu time, 0.107s GC time
Loading theory "HOL-Library.FuncSet" (required by "Draft.SNF_AlgorithmMoreTemplates" via "Draft.SNF_Algorithm" via "Draft.Smith_Normal_Form_JNF" via "Draft.SNF_Missing_Lemmas" via "Hermite.Hermite" via "Echelon_Form.Echelon_Form_Inverse" via "Echelon_Form.Echelon_Form_Det" via "Echelon_Form.Echelon_Form" via "Echelon_Form.Rings2" via "HOL-Analysis.Analysis" via "HOL-Analysis.Determinants" via "HOL-Combinatorics.Permutations" via "HOL-Library.Disjoint_Sets")
### Code generator: dropping subsumed code equation
### of_int (Int.Pos ?k) == numeral ?k
### Code generator: dropping subsumed code equation
### of_int 0 == 0::?'a
### Code generator: dropping subsumed code equation
### of_int (Int.Neg ?k) == - numeral ?k
### Code generator: dropping subsumed code equation
### nat (Int.Pos ?k) == nat_of_num ?k
### Code generator: dropping subsumed code equation
### nat 0 == 0
### Code generator: dropping subsumed code equation
### nat (Int.Neg ?k) == 0
### theory "HOL-Library.Code_Target_Int"
### 0.141s elapsed time, 0.585s cpu time, 0.040s GC time
Loading theory "HOL-Library.Code_Target_Numeral" (required by "Draft.SNF_AlgorithmMoreTemplates" via "Draft.SNF_Algorithm" via "Draft.Smith_Normal_Form_JNF" via "Draft.SNF_Missing_Lemmas" via "Hermite.Hermite" via "Echelon_Form.Examples_Echelon_Form_Abstract" via "Gauss_Jordan.Examples_Gauss_Jordan_Abstract")
instantiation
  multiset :: (type) cancel_comm_monoid_add
  zero_multiset == zero_class.zero :: 'a multiset
  minus_multiset == minus :: 'a multiset => 'a multiset => 'a multiset
  plus_multiset == plus :: 'a multiset => 'a multiset => 'a multiset
instantiation
  fract :: (idom) field
  inverse_fract == inverse :: 'a fract => 'a fract
  divide_fract == divide :: 'a fract => 'a fract => 'a fract
### theory "HOL-Library.Code_Target_Numeral"
### 0.223s elapsed time, 0.753s cpu time, 0.318s GC time
Loading theory "HOL-Library.Function_Algebras" (required by "Draft.SNF_AlgorithmMoreTemplates" via "Draft.ExtrEqs" via "HOL-Library.BigO")
instantiation
  fract :: (linordered_idom) linorder
  less_eq_fract == less_eq :: 'a fract => 'a fract => bool
  less_fract == less :: 'a fract => 'a fract => bool
instantiation
  fun :: (type, plus) plus
  plus_fun == plus :: ('a => 'b) => ('a => 'b) => 'a => 'b
instantiation
  fun :: (type, zero) zero
  zero_fun == zero_class.zero :: 'a => 'b
instantiation
  fun :: (type, times) times
  times_fun == times :: ('a => 'b) => ('a => 'b) => 'a => 'b
instantiation
  fun :: (type, one) one
  one_fun == one_class.one :: 'a => 'b
instantiation
  fract :: (linordered_idom) linordered_field
  sgn_fract == sgn :: 'a fract => 'a fract
  abs_fract == abs :: 'a fract => 'a fract
instantiation
  fract :: (linordered_idom) distrib_lattice
  inf_fract == inf :: 'a fract => 'a fract => 'a fract
  sup_fract == sup :: 'a fract => 'a fract => 'a fract
### theory "HOL-Library.Function_Algebras"
### 0.098s elapsed time, 0.394s cpu time, 0.000s GC time
Loading theory "HOL-Library.Infinite_Set" (required by "Draft.SNF_AlgorithmMoreTemplates" via "Draft.SNF_Algorithm" via "Draft.Smith_Normal_Form_JNF" via "Draft.SNF_Missing_Lemmas" via "Hermite.Hermite" via "Echelon_Form.Echelon_Form_Inverse" via "Echelon_Form.Echelon_Form_Det" via "Echelon_Form.Echelon_Form" via "Echelon_Form.Rings2" via "HOL-Analysis.Analysis" via "HOL-Analysis.Convex" via "HOL-Analysis.Affine" via "HOL-Analysis.Linear_Algebra")
### theory "HOL-Computational_Algebra.Fraction_Field"
### 0.885s elapsed time, 3.385s cpu time, 0.451s GC time
Loading theory "HOL-Library.More_List" (required by "Draft.SNF_AlgorithmMoreTemplates" via "Draft.SNF_Algorithm" via "Draft.Smith_Normal_Form_JNF" via "Draft.SNF_Missing_Lemmas" via "Hermite.Hermite" via "Echelon_Form.Echelon_Form_Inverse" via "Echelon_Form.Echelon_Form_Det" via "Echelon_Form.Echelon_Form" via "Echelon_Form.Rings2" via "HOL-Computational_Algebra.Polynomial_Factorial" via "HOL-Computational_Algebra.Polynomial")
### theory "HOL-Library.FuncSet"
### 0.519s elapsed time, 1.956s cpu time, 0.440s GC time
Loading theory "HOL-Algebra.Congruence" (required by "Draft.SNF_AlgorithmMoreTemplates" via "Draft.SNF_Algorithm" via "Draft.Smith_Normal_Form_JNF" via "Draft.SNF_Missing_Lemmas" via "Draft.Mod_Type_Connect" via "Perron_Frobenius.HMA_Connect" via "Jordan_Normal_Form.Spectral_Radius" via "Jordan_Normal_Form.Jordan_Normal_Form_Existence" via "Jordan_Normal_Form.Jordan_Normal_Form" via "Jordan_Normal_Form.Matrix" via "Jordan_Normal_Form.Missing_Ring" via "HOL-Algebra.Ring" via "HOL-Algebra.FiniteProduct" via "HOL-Algebra.Group" via "HOL-Algebra.Complete_Lattice" via "HOL-Algebra.Lattice" via "HOL-Algebra.Order")
consts
  enumerate :: "'a set => nat => 'a"
### theory "HOL-Library.More_List"
### 0.187s elapsed time, 0.727s cpu time, 0.183s GC time
Loading theory "HOL-Library.Disjoint_Sets" (required by "Draft.SNF_AlgorithmMoreTemplates" via "Draft.SNF_Algorithm" via "Draft.Smith_Normal_Form_JNF" via "Draft.SNF_Missing_Lemmas" via "Hermite.Hermite" via "Echelon_Form.Echelon_Form_Inverse" via "Echelon_Form.Echelon_Form_Det" via "Echelon_Form.Echelon_Form" via "Echelon_Form.Rings2" via "HOL-Analysis.Analysis" via "HOL-Analysis.Determinants" via "HOL-Combinatorics.Permutations")
### theory "HOL-Library.Infinite_Set"
### 0.277s elapsed time, 1.087s cpu time, 0.183s GC time
Loading theory "HOL-Library.Nat_Bijection" (required by "Draft.SNF_AlgorithmMoreTemplates" via "Draft.ExtrEqs" via "HOL-Library.Stream")
locale comm_monoid_set
  fixes f :: "'a => 'a => 'a"  (infixl \<open>\<^bold>*\<close> 70)
    and z :: "'a"  (\<open>\<^bold>1\<close>)
  assumes "comm_monoid_set (\<^bold>*) \<^bold>1"
### Partially applied constant "Multiset.inter_mset" on left hand side of equation, in theorem:
### semilattice_inf.Inf_fin (\<inter>#) (set (?x # ?xs)) ==
### fold (\<inter>#) ?xs ?x
Found termination order: "(%p. size (snd p)) <*mlex*> {}"
### Partially applied constant "Multiset.union_mset" on left hand side of equation, in theorem:
### semilattice_sup.Sup_fin (\<union>#) (set (?x # ?xs)) ==
### fold (\<union>#) ?xs ?x
### theory "HOL-Library.Disjoint_Sets"
### 0.260s elapsed time, 1.020s cpu time, 0.154s GC time
Loading theory "HOL-Library.Old_Datatype" (required by "Draft.SNF_AlgorithmMoreTemplates" via "Draft.SNF_Algorithm" via "Draft.Smith_Normal_Form_JNF" via "Draft.SNF_Missing_Lemmas" via "Hermite.Hermite" via "Echelon_Form.Echelon_Form_Inverse" via "Echelon_Form.Echelon_Form_Det" via "Echelon_Form.Echelon_Form" via "Echelon_Form.Rings2" via "HOL-Analysis.Analysis" via "HOL-Analysis.Determinants" via "HOL-Analysis.Cartesian_Space" via "HOL-Analysis.Finite_Cartesian_Product" via "HOL-Library.Countable_Set" via "HOL-Library.Countable")
Found termination order: "size_list size <*mlex*> {}"
### theory "HOL-Library.Nat_Bijection"
### 0.463s elapsed time, 1.700s cpu time, 0.702s GC time
Loading theory "HOL-Library.Stream" (required by "Draft.SNF_AlgorithmMoreTemplates" via "Draft.ExtrEqs")
locale equivalence
  fixes S :: "('a, 'b) eq_object_scheme"  (structure)
  assumes "equivalence S"
signature MULTISET_SIMPROCS =
  sig
    val subset_cancel_msets: Proof.context -> cterm -> thm option
    val subseteq_cancel_msets: Proof.context -> cterm -> thm option
  end
structure Multiset_Simprocs: MULTISET_SIMPROCS
locale partition
  fixes A :: "'a set"
    and B :: "'a set set"
  assumes "Congruence.partition A B"
instantiation
  multiset :: (type) Inf
  Inf_multiset == Inf :: 'a multiset set => 'a multiset
instantiation
  multiset :: (type) Sup
  Sup_multiset == Sup :: 'a multiset set => 'a multiset
### theory "HOL-Algebra.Congruence"
### 0.845s elapsed time, 3.196s cpu time, 0.916s GC time
Loading theory "HOL-Algebra.Order" (required by "Draft.SNF_AlgorithmMoreTemplates" via "Draft.SNF_Algorithm" via "Draft.Smith_Normal_Form_JNF" via "Draft.SNF_Missing_Lemmas" via "Draft.Mod_Type_Connect" via "Perron_Frobenius.HMA_Connect" via "Jordan_Normal_Form.Spectral_Radius" via "Jordan_Normal_Form.Jordan_Normal_Form_Existence" via "Jordan_Normal_Form.Jordan_Normal_Form" via "Jordan_Normal_Form.Matrix" via "Jordan_Normal_Form.Missing_Ring" via "HOL-Algebra.Ring" via "HOL-Algebra.FiniteProduct" via "HOL-Algebra.Group" via "HOL-Algebra.Complete_Lattice" via "HOL-Algebra.Lattice")
instantiation
  multiset :: (type) size
  size_multiset == size :: 'a multiset => nat
signature OLD_DATATYPE =
  sig
    val check_specs: spec list -> theory -> spec list * Proof.context
    type config = {quiet: bool, strict: bool}
    val default_config: config
    type descr =
       (int * (string * dtyp list * (string * dtyp list) list)) list
    val distinct_lemma: thm
    datatype dtyp
    = DtRec of int | DtTFree of string * sort | DtType of string * dtyp list
    type info =
       {case_cong: thm,
        case_cong_weak: thm,
        case_name: string,
        case_rewrites: thm list,
        descr: descr,
        distinct: thm list,
        exhaust: thm,
        index: int,
        induct: thm,
        inducts: thm list,
        inject: thm list,
        nchotomy: thm,
        rec_names: string list,
        rec_rewrites: thm list, split: thm, split_asm: thm}
    val read_specs: spec_cmd list -> theory -> spec list * Proof.context
    type spec =
       (binding * (string * sort) list * mixfix) *
       (binding * typ list * mixfix) list
    type spec_cmd =
       (binding * (string * string option) list * mixfix) *
       (binding * string list * mixfix) list
  end
structure Old_Datatype: OLD_DATATYPE
### theory "HOL-Library.Old_Datatype"
### 0.554s elapsed time, 2.065s cpu time, 0.675s GC time
Loading theory "HOL-Library.Phantom_Type" (required by "Draft.SNF_AlgorithmMoreTemplates" via "Draft.SNF_Algorithm" via "Draft.Smith_Normal_Form_JNF" via "Draft.SNF_Missing_Lemmas" via "Hermite.Hermite" via "Echelon_Form.Echelon_Form_Inverse" via "Echelon_Form.Echelon_Form_Det" via "Echelon_Form.Echelon_Form" via "Echelon_Form.Rings2" via "HOL-Analysis.Analysis" via "HOL-Analysis.Determinants" via "HOL-Analysis.Cartesian_Space" via "HOL-Analysis.Finite_Cartesian_Product" via "HOL-Library.Numeral_Type" via "HOL-Library.Cardinality")
locale comp_fun_commute
  fixes f :: "'a => 'b => 'b"
  assumes "comp_fun_commute f"
consts
  shift :: "'a list => 'a stream => 'a stream"
consts
  mset :: "'a list => 'a multiset"
Proofs for coinductive predicate(s) "streamsp"
  Proving monotonicity ...
locale weak_partial_order
  fixes L :: "('a, 'b) gorder_scheme"  (structure)
  assumes "weak_partial_order L"
locale weak_partial_order
  fixes L :: "('a, 'b) gorder_scheme"  (structure)
  assumes "weak_partial_order L"
consts
  snth :: "'a stream => nat => 'a"
consts
  stake :: "nat => 'a stream => 'a list"
consts
  sdrop :: "nat => 'a stream => 'a stream"
class linorder = order +
  assumes "linear": "!!x y. x <= y | y <= x"
consts
  sfilter :: "('a => bool) => 'a stream => 'a stream"
consts
  cycle :: "'a list => 'a stream"
consts
  siterate :: "('a => 'a) => 'a => 'a stream"
locale comm_monoid_mset
  fixes f :: "'a => 'a => 'a"  (infixl \<open>\<^bold>*\<close> 70)
    and z :: "'a"  (\<open>\<^bold>1\<close>)
  assumes "comm_monoid_mset (\<^bold>*) \<^bold>1"
consts
  flat :: "'a list stream => 'a stream"
class comm_monoid_add = ab_semigroup_add + monoid_add +
  assumes "add_0": "!!a. (0::'a) + a = a"
consts
  sinterleave :: "'a stream => 'a stream => 'a stream"
consts
  szip :: "'a stream => 'b stream => ('a * 'b) stream"
locale weak_partial_order
  fixes L :: "('a, 'b) gorder_scheme"  (structure)
  assumes "weak_partial_order L"
### theory "HOL-Library.Phantom_Type"
### 0.866s elapsed time, 3.221s cpu time, 1.260s GC time
Loading theory "HOL-Library.Cardinality" (required by "Draft.SNF_AlgorithmMoreTemplates" via "Draft.SNF_Algorithm" via "Draft.Smith_Normal_Form_JNF" via "Draft.SNF_Missing_Lemmas" via "Hermite.Hermite" via "Echelon_Form.Echelon_Form_Inverse" via "Echelon_Form.Echelon_Form_Det" via "Echelon_Form.Echelon_Form" via "Echelon_Form.Rings2" via "HOL-Analysis.Analysis" via "HOL-Analysis.Determinants" via "HOL-Analysis.Cartesian_Space" via "HOL-Analysis.Finite_Cartesian_Product" via "HOL-Library.Numeral_Type")
class comm_monoid_add = ab_semigroup_add + monoid_add +
  assumes "add_0": "!!a. (0::'a) + a = a"
consts
  smap2 :: "('a => 'b => 'c) => 'a stream => 'b stream => 'c stream"
### theory "HOL-Library.Stream"
### 1.212s elapsed time, 4.573s cpu time, 1.443s GC time
Loading theory "HOL-Library.Product_Plus" (required by "Draft.SNF_AlgorithmMoreTemplates" via "Draft.SNF_Algorithm" via "Draft.Smith_Normal_Form_JNF" via "Draft.SNF_Missing_Lemmas" via "Hermite.Hermite" via "Echelon_Form.Echelon_Form_Inverse" via "Echelon_Form.Echelon_Form_Det" via "Echelon_Form.Echelon_Form" via "Echelon_Form.Rings2" via "HOL-Analysis.Analysis" via "HOL-Analysis.Convex" via "HOL-Analysis.Affine" via "HOL-Analysis.Linear_Algebra" via "HOL-Analysis.Euclidean_Space" via "HOL-Analysis.Product_Vector")
### Additional type variable(s) in locale specification "CARD_1": 'a
instantiation
  prod :: (zero, zero) zero
  zero_prod == zero_class.zero :: 'a * 'b
class canonically_ordered_monoid_add = ordered_comm_monoid_add +
  assumes "le_iff_add": "!!a b. (a <= b) = (EX c. b = a + c)"
instantiation
  prod :: (plus, plus) plus
  plus_prod == plus :: 'a * 'b => 'a * 'b => 'a * 'b
instantiation
  prod :: (minus, minus) minus
  minus_prod == minus :: 'a * 'b => 'a * 'b => 'a * 'b
locale partial_order
  fixes L :: "('a, 'b) gorder_scheme"  (structure)
  assumes "partial_order L"
instantiation
  prod :: (uminus, uminus) uminus
  uminus_prod == uminus :: 'a * 'b => 'a * 'b
class CARD_1 = type +
  assumes "CARD_1": "CARD('a) = 1"
### theory "HOL-Library.Product_Plus"
### 0.107s elapsed time, 0.429s cpu time, 0.000s GC time
Loading theory "HOL-Library.Product_Order" (required by "Draft.SNF_AlgorithmMoreTemplates" via "Draft.SNF_Algorithm" via "Draft.Smith_Normal_Form_JNF" via "Draft.SNF_Missing_Lemmas" via "Hermite.Hermite" via "Echelon_Form.Echelon_Form_Inverse" via "Echelon_Form.Echelon_Form_Det" via "Echelon_Form.Echelon_Form" via "Echelon_Form.Rings2" via "HOL-Analysis.Analysis" via "HOL-Analysis.Ball_Volume" via "HOL-Analysis.Gamma_Function" via "HOL-Analysis.Equivalence_Lebesgue_Henstock_Integration" via "HOL-Analysis.Lebesgue_Measure" via "HOL-Analysis.Finite_Product_Measure" via "HOL-Analysis.Binary_Product_Measure" via "HOL-Analysis.Nonnegative_Lebesgue_Integration" via "HOL-Analysis.Borel_Space" via "HOL-Analysis.Ordered_Euclidean_Space")
locale weak_partial_order_bottom
  fixes L :: "('a, 'b) gorder_scheme"  (structure)
  assumes "weak_partial_order_bottom L"
instantiation
  prod :: (ord, ord) ord
  less_eq_prod == less_eq :: 'a * 'b => 'a * 'b => bool
  less_prod == less :: 'a * 'b => 'a * 'b => bool
locale weak_partial_order_top
  fixes L :: "('a, 'b) gorder_scheme"  (structure)
  assumes "weak_partial_order_top L"
instantiation
  prod :: (inf, inf) inf
  inf_prod == inf :: 'a * 'b => 'a * 'b => 'a * 'b
locale weak_total_order
  fixes L :: "('a, 'b) gorder_scheme"  (structure)
  assumes "weak_total_order L"
instantiation
  prod :: (sup, sup) sup
  sup_prod == sup :: 'a * 'b => 'a * 'b => 'a * 'b
### Additional type variable(s) in locale specification "card2": 'a
instantiation
  prod :: (top, top) top
  top_prod == top :: 'a * 'b
locale total_order
  fixes L :: "('a, 'b) gorder_scheme"  (structure)
  assumes "total_order L"
instantiation
  prod :: (bot, bot) bot
  bot_prod == bot :: 'a * 'b
### theory "HOL-Algebra.Order"
### 1.235s elapsed time, 4.669s cpu time, 1.423s GC time
Loading theory "HOL-Algebra.Lattice" (required by "Draft.SNF_AlgorithmMoreTemplates" via "Draft.SNF_Algorithm" via "Draft.Smith_Normal_Form_JNF" via "Draft.SNF_Missing_Lemmas" via "Draft.Mod_Type_Connect" via "Perron_Frobenius.HMA_Connect" via "Jordan_Normal_Form.Spectral_Radius" via "Jordan_Normal_Form.Jordan_Normal_Form_Existence" via "Jordan_Normal_Form.Jordan_Normal_Form" via "Jordan_Normal_Form.Matrix" via "Jordan_Normal_Form.Missing_Ring" via "HOL-Algebra.Ring" via "HOL-Algebra.FiniteProduct" via "HOL-Algebra.Group" via "HOL-Algebra.Complete_Lattice")
instantiation
  prod :: (Inf, Inf) Inf
  Inf_prod == Inf :: ('a * 'b) set => 'a * 'b
class card2 = finite +
  assumes "two_le_card": "2 <= CARD('a)"
instantiation
  prod :: (Sup, Sup) Sup
  Sup_prod == Sup :: ('a * 'b) set => 'a * 'b
class finite_UNIV = type +
  fixes finite_UNIV :: "('a, bool) phantom"
  assumes "finite_UNIV": "finite_UNIV = Phantom('a) (finite UNIV)"
class comm_monoid_mult = ab_semigroup_mult + monoid_mult + dvd +
  assumes "mult_1": "!!a. (1::'a) * a = a"
### theory "HOL-Library.Product_Order"
### 0.228s elapsed time, 0.896s cpu time, 0.108s GC time
Loading theory "HOL-Library.Set_Algebras" (required by "Draft.SNF_AlgorithmMoreTemplates" via "Draft.ExtrEqs" via "HOL-Library.BigO")
instantiation
  set :: (plus) plus
  plus_set == plus :: 'a set => 'a set => 'a set
class card_UNIV = finite_UNIV +
  fixes card_UNIV :: "('a, nat) phantom"
  assumes "card_UNIV": "card_UNIV_class.card_UNIV = Phantom('a) CARD('a)"
instantiation
  nat :: card_UNIV
  card_UNIV_nat == card_UNIV_class.card_UNIV :: (nat, nat) phantom
  finite_UNIV_nat == finite_UNIV :: (nat, bool) phantom
instantiation
  set :: (times) times
  times_set == times :: 'a set => 'a set => 'a set
instantiation
  int :: card_UNIV
  card_UNIV_int == card_UNIV_class.card_UNIV :: (int, nat) phantom
  finite_UNIV_int == finite_UNIV :: (int, bool) phantom
instantiation
  set :: (zero) zero
  zero_set == zero_class.zero :: 'a set
instantiation
  set :: (one) one
  one_set == one_class.one :: 'a set
instantiation
  natural :: card_UNIV
  card_UNIV_natural == card_UNIV_class.card_UNIV :: (natural, nat) phantom
  finite_UNIV_natural == finite_UNIV :: (natural, bool) phantom
locale weak_upper_semilattice
  fixes L :: "('a, 'b) gorder_scheme"  (structure)
  assumes "weak_upper_semilattice L"
instantiation
  integer :: card_UNIV
  card_UNIV_integer == card_UNIV_class.card_UNIV :: (integer, nat) phantom
  finite_UNIV_integer == finite_UNIV :: (integer, bool) phantom
instantiation
  list :: (type) card_UNIV
  card_UNIV_list == card_UNIV_class.card_UNIV :: ('a list, nat) phantom
  finite_UNIV_list == finite_UNIV :: ('a list, bool) phantom
locale weak_lower_semilattice
  fixes L :: "('a, 'b) gorder_scheme"  (structure)
  assumes "weak_lower_semilattice L"
instantiation
  unit :: card_UNIV
  card_UNIV_unit == card_UNIV_class.card_UNIV :: (unit, nat) phantom
  finite_UNIV_unit == finite_UNIV :: (unit, bool) phantom
locale weak_lattice
  fixes L :: "('a, 'b) gorder_scheme"  (structure)
  assumes "weak_lattice L"
instantiation
  bool :: card_UNIV
  card_UNIV_bool == card_UNIV_class.card_UNIV :: (bool, nat) phantom
  finite_UNIV_bool == finite_UNIV :: (bool, bool) phantom
instantiation
  char :: card_UNIV
  card_UNIV_char == card_UNIV_class.card_UNIV :: (char, nat) phantom
  finite_UNIV_char == finite_UNIV :: (char, bool) phantom
instantiation
  prod :: (finite_UNIV, finite_UNIV) finite_UNIV
  finite_UNIV_prod == finite_UNIV :: ('a * 'b, bool) phantom
instantiation
  prod :: (card_UNIV, card_UNIV) card_UNIV
  card_UNIV_prod == card_UNIV_class.card_UNIV :: ('a * 'b, nat) phantom
instantiation
  sum :: (finite_UNIV, finite_UNIV) finite_UNIV
  finite_UNIV_sum == finite_UNIV :: ('a + 'b, bool) phantom
instantiation
  sum :: (card_UNIV, card_UNIV) card_UNIV
  card_UNIV_sum == card_UNIV_class.card_UNIV :: ('a + 'b, nat) phantom
instantiation
  fun :: (finite_UNIV, card_UNIV) finite_UNIV
  finite_UNIV_fun == finite_UNIV :: ('a => 'b, bool) phantom
instantiation
  fun :: (card_UNIV, card_UNIV) card_UNIV
  card_UNIV_fun == card_UNIV_class.card_UNIV :: ('a => 'b, nat) phantom
instantiation
  option :: (finite_UNIV) finite_UNIV
  finite_UNIV_option == finite_UNIV :: ('a option, bool) phantom
instantiation
  option :: (card_UNIV) card_UNIV
  card_UNIV_option == card_UNIV_class.card_UNIV :: ('a option, nat) phantom
### theory "HOL-Library.Set_Algebras"
### 0.283s elapsed time, 1.110s cpu time, 0.219s GC time
Loading theory "HOL-Library.Tree" (required by "Draft.SNF_AlgorithmMoreTemplates" via "Draft.ExtrEqs" via "Draft.Templates")
instantiation
  String.literal :: card_UNIV
  card_UNIV_literal == card_UNIV_class.card_UNIV ::
    (String.literal, nat) phantom
  finite_UNIV_literal == finite_UNIV :: (String.literal, bool) phantom
instantiation
  set :: (finite_UNIV) finite_UNIV
  finite_UNIV_set == finite_UNIV :: ('a set, bool) phantom
instantiation
  set :: (card_UNIV) card_UNIV
  card_UNIV_set == card_UNIV_class.card_UNIV :: ('a set, nat) phantom
instantiation
  Enum.finite_1 :: card_UNIV
  card_UNIV_finite_1 == card_UNIV_class.card_UNIV ::
    (Enum.finite_1, nat) phantom
  finite_UNIV_finite_1 == finite_UNIV :: (Enum.finite_1, bool) phantom
instantiation
  Enum.finite_2 :: card_UNIV
  card_UNIV_finite_2 == card_UNIV_class.card_UNIV ::
    (Enum.finite_2, nat) phantom
  finite_UNIV_finite_2 == finite_UNIV :: (Enum.finite_2, bool) phantom
instantiation
  Enum.finite_3 :: card_UNIV
  card_UNIV_finite_3 == card_UNIV_class.card_UNIV ::
    (Enum.finite_3, nat) phantom
  finite_UNIV_finite_3 == finite_UNIV :: (Enum.finite_3, bool) phantom
instantiation
  Enum.finite_4 :: card_UNIV
  card_UNIV_finite_4 == card_UNIV_class.card_UNIV ::
    (Enum.finite_4, nat) phantom
  finite_UNIV_finite_4 == finite_UNIV :: (Enum.finite_4, bool) phantom
instantiation
  Enum.finite_5 :: card_UNIV
  card_UNIV_finite_5 == card_UNIV_class.card_UNIV ::
    (Enum.finite_5, nat) phantom
  finite_UNIV_finite_5 == finite_UNIV :: (Enum.finite_5, bool) phantom
### theory "HOL-Library.Cardinality"
### 0.801s elapsed time, 3.159s cpu time, 0.382s GC time
Loading theory "HOL-Library.Code_Cardinality" (required by "Draft.SNF_AlgorithmMoreTemplates" via "Draft.SNF_Algorithm" via "Draft.Smith_Normal_Form_JNF" via "Draft.SNF_Missing_Lemmas" via "Hermite.Hermite" via "Echelon_Form.Echelon_Form_Inverse" via "Echelon_Form.Echelon_Form_Det" via "Echelon_Form.Echelon_Form" via "Gauss_Jordan.Determinants2" via "Gauss_Jordan.Gauss_Jordan_PA" via "Gauss_Jordan.Gauss_Jordan" via "Gauss_Jordan.Elementary_Operations" via "Gauss_Jordan.Code_Matrix" via "Gauss_Jordan.Code_Set")
### Code generator: dropping subsumed code equation
### List.coset [] <= set [] == False
### theory "HOL-Library.Code_Cardinality"
### 0.138s elapsed time, 0.537s cpu time, 0.096s GC time
Loading theory "Gauss_Jordan.Code_Set" (required by "Draft.SNF_AlgorithmMoreTemplates" via "Draft.SNF_Algorithm" via "Draft.Smith_Normal_Form_JNF" via "Draft.SNF_Missing_Lemmas" via "Hermite.Hermite" via "Echelon_Form.Echelon_Form_Inverse" via "Echelon_Form.Echelon_Form_Det" via "Echelon_Form.Echelon_Form" via "Gauss_Jordan.Determinants2" via "Gauss_Jordan.Gauss_Jordan_PA" via "Gauss_Jordan.Gauss_Jordan" via "Gauss_Jordan.Elementary_Operations" via "Gauss_Jordan.Code_Matrix")
locale weak_bounded_lattice
  fixes L :: "('a, 'b) gorder_scheme"  (structure)
  assumes "weak_bounded_lattice L"
### theory "Gauss_Jordan.Code_Set"
### 0.035s elapsed time, 0.143s cpu time, 0.000s GC time
Loading theory "HOL-Library.Numeral_Type" (required by "Draft.SNF_AlgorithmMoreTemplates" via "Draft.SNF_Algorithm" via "Draft.Smith_Normal_Form_JNF" via "Draft.SNF_Missing_Lemmas" via "Hermite.Hermite" via "Echelon_Form.Echelon_Form_Inverse" via "Echelon_Form.Echelon_Form_Det" via "Echelon_Form.Echelon_Form" via "Echelon_Form.Rings2" via "HOL-Analysis.Analysis" via "HOL-Analysis.Determinants" via "HOL-Analysis.Cartesian_Space" via "HOL-Analysis.Finite_Cartesian_Product")
locale upper_semilattice
  fixes L :: "('a, 'b) gorder_scheme"  (structure)
  assumes "upper_semilattice L"
locale lower_semilattice
  fixes L :: "('a, 'b) gorder_scheme"  (structure)
  assumes "lower_semilattice L"
class linorder = order +
  assumes "linear": "!!x y. x <= y | y <= x"
locale Lattice.lattice
  fixes L :: "('a, 'b) gorder_scheme"  (structure)
  assumes "lattice L"
instantiation
  num1 :: CARD_1
instantiation
  num1 :: {comm_monoid_mult,numeral,comm_ring}
  uminus_num1 == uminus :: num1 => num1
  zero_num1 == zero_class.zero :: num1
  minus_num1 == minus :: num1 => num1 => num1
  plus_num1 == plus :: num1 => num1 => num1
  one_num1 == one_class.one :: num1
  times_num1 == times :: num1 => num1 => num1
instantiation
  num1 :: linorder
  less_eq_num1 == less_eq :: num1 => num1 => bool
  less_num1 == less :: num1 => num1 => bool
locale Lattice.bounded_lattice
  fixes L :: "('a, 'b) gorder_scheme"  (structure)
  assumes "bounded_lattice L"
locale mod_type
  fixes n :: "int"
    and Rep :: "'a => int"
    and Abs :: "int => 'a"
  assumes "mod_type n Rep Abs"
locale Lattice.bounded_lattice
  fixes L :: "('a, 'b) gorder_scheme"  (structure)
  assumes "bounded_lattice L"
locale mod_ring
  fixes n :: "int"
    and Rep :: "'a => int"
    and Abs :: "int => 'a"
  assumes "mod_ring n Rep Abs"
### theory "HOL-Algebra.Lattice"
### 0.928s elapsed time, 3.665s cpu time, 0.540s GC time
Loading theory "HOL-Algebra.Complete_Lattice" (required by "Draft.SNF_AlgorithmMoreTemplates" via "Draft.SNF_Algorithm" via "Draft.Smith_Normal_Form_JNF" via "Draft.SNF_Missing_Lemmas" via "Draft.Mod_Type_Connect" via "Perron_Frobenius.HMA_Connect" via "Jordan_Normal_Form.Spectral_Radius" via "Jordan_Normal_Form.Jordan_Normal_Form_Existence" via "Jordan_Normal_Form.Jordan_Normal_Form" via "Jordan_Normal_Form.Matrix" via "Jordan_Normal_Form.Missing_Ring" via "HOL-Algebra.Ring" via "HOL-Algebra.FiniteProduct" via "HOL-Algebra.Group")
instantiation
  bit0 :: (finite) {minus,one,plus,times,uminus,zero}
  bit1 :: (finite) {minus,one,plus,times,uminus,zero}
  zero_bit0 == zero_class.zero :: 'a bit0
  uminus_bit0 == uminus :: 'a bit0 => 'a bit0
  times_bit0 == times :: 'a bit0 => 'a bit0 => 'a bit0
  plus_bit0 == plus :: 'a bit0 => 'a bit0 => 'a bit0
  one_bit0 == one_class.one :: 'a bit0
  minus_bit0 == minus :: 'a bit0 => 'a bit0 => 'a bit0
  zero_bit1 == zero_class.zero :: 'a bit1
  uminus_bit1 == uminus :: 'a bit1 => 'a bit1
  times_bit1 == times :: 'a bit1 => 'a bit1 => 'a bit1
  plus_bit1 == plus :: 'a bit1 => 'a bit1 => 'a bit1
  one_bit1 == one_class.one :: 'a bit1
  minus_bit1 == minus :: 'a bit1 => 'a bit1 => 'a bit1
locale weak_complete_lattice
  fixes L :: "('a, 'b) gorder_scheme"  (structure)
  assumes "weak_complete_lattice L"
consts
  left :: "'a tree => 'a tree"
consts
  right :: "'a tree => 'a tree"
instantiation
  multiset :: (preorder) order
  less_eq_multiset == less_eq :: 'a multiset => 'a multiset => bool
  less_multiset == less :: 'a multiset => 'a multiset => bool
instantiation
  multiset :: (preorder) ordered_ab_semigroup_add
Found termination order: "size <*mlex*> {}"
Proofs for inductive predicate(s) "pw_leq"
  Proving monotonicity ...
instantiation
  bit0 :: (finite) linorder
  bit1 :: (finite) linorder
  less_eq_bit0 == less_eq :: 'a bit0 => 'a bit0 => bool
  less_bit0 == less :: 'a bit0 => 'a bit0 => bool
  less_eq_bit1 == less_eq :: 'a bit1 => 'a bit1 => bool
  less_bit1 == less :: 'a bit1 => 'a bit1 => bool
Found termination order: "size <*mlex*> {}"
instantiation
  num0 :: equal
  equal_num0 == equal_class.equal :: num0 => num0 => bool
locale weak_complete_lattice
  fixes L :: "('a, 'b) gorder_scheme"  (structure)
  assumes "weak_complete_lattice L"
instantiation
  num1 :: equal
  equal_num1 == equal_class.equal :: num1 => num1 => bool
Found termination order: "size <*mlex*> {}"
instantiation
  num1 :: enum
  enum_num1 == enum_class.enum :: num1 list
  enum_all_num1 == enum_class.enum_all :: (num1 => bool) => bool
  enum_ex_num1 == enum_class.enum_ex :: (num1 => bool) => bool
instantiation
  num0 :: card_UNIV
  num1 :: card_UNIV
  card_UNIV_num0 == card_UNIV_class.card_UNIV :: (num0, nat) phantom
  finite_UNIV_num0 == finite_UNIV :: (num0, bool) phantom
  card_UNIV_num1 == card_UNIV_class.card_UNIV :: (num1, nat) phantom
  finite_UNIV_num1 == finite_UNIV :: (num1, bool) phantom
class height = type +
  fixes height :: "'a => nat"
instantiation
  tree :: (type) height
  height_tree == height :: 'a tree => nat
locale weak_complete_lattice
  fixes L :: "('a, 'b) gorder_scheme"  (structure)
  assumes "weak_complete_lattice L"
instantiation
  bit0 :: (finite) equal
  bit1 :: (finite) equal
  equal_bit0 == equal_class.equal :: 'a bit0 => 'a bit0 => bool
  equal_bit1 == equal_class.equal :: 'a bit1 => 'a bit1 => bool
instantiation
  bit0 :: (finite) enum
  enum_bit0 == enum_class.enum :: 'a bit0 list
  enum_all_bit0 == enum_class.enum_all :: ('a bit0 => bool) => bool
  enum_ex_bit0 == enum_class.enum_ex :: ('a bit0 => bool) => bool
Found termination order: "size <*mlex*> {}"
Found termination order: "(%p. length (fst p)) <*mlex*> {}"
instantiation
  bit1 :: (finite) enum
  enum_bit1 == enum_class.enum :: 'a bit1 list
  enum_all_bit1 == enum_class.enum_all :: ('a bit1 => bool) => bool
  enum_ex_bit1 == enum_class.enum_ex :: ('a bit1 => bool) => bool
instantiation
  multiset :: (equal) equal
  equal_multiset == equal_class.equal :: 'a multiset => 'a multiset => bool
instantiation
  bit0 :: (finite) finite_UNIV
  bit1 :: (finite) finite_UNIV
  finite_UNIV_bit0 == finite_UNIV :: ('a bit0, bool) phantom
  finite_UNIV_bit1 == finite_UNIV :: ('a bit1, bool) phantom
instantiation
  bit0 :: ({card_UNIV,finite}) card_UNIV
  bit1 :: ({card_UNIV,finite}) card_UNIV
  card_UNIV_bit0 == card_UNIV_class.card_UNIV :: ('a bit0, nat) phantom
  card_UNIV_bit1 == card_UNIV_class.card_UNIV :: ('a bit1, nat) phantom
Found termination order: "size <*mlex*> {}"
instantiation
  multiset :: (random) random
  random_multiset == random_class.random ::
    natural
    => natural * natural
       => ('a multiset * (unit => term)) * natural * natural
locale Complete_Lattice.complete_lattice
  fixes L :: "('a, 'b) gorder_scheme"  (structure)
  assumes "complete_lattice L"
instantiation
  multiset :: (full_exhaustive) full_exhaustive
  full_exhaustive_multiset == full_exhaustive_class.full_exhaustive ::
    ('a multiset * (unit => term) => (bool * term list) option)
    => natural => (bool * term list) option
### theory "HOL-Library.Numeral_Type"
### 0.835s elapsed time, 3.299s cpu time, 0.559s GC time
Loading theory "Perron_Frobenius.Bij_Nat" (required by "Draft.SNF_AlgorithmMoreTemplates" via "Draft.SNF_Algorithm" via "Draft.Smith_Normal_Form_JNF" via "Draft.SNF_Missing_Lemmas" via "Draft.Mod_Type_Connect" via "Perron_Frobenius.HMA_Connect")
Proofs for inductive predicate(s) "pred_mset"
  Proving monotonicity ...
Found termination order: "size <*mlex*> {}"
locale Complete_Lattice.complete_lattice
  fixes L :: "('a, 'b) gorder_scheme"  (structure)
  assumes "complete_lattice L"
### theory "Perron_Frobenius.Bij_Nat"
### 0.107s elapsed time, 0.421s cpu time, 0.123s GC time
Loading theory "HOL-Library.Z2" (required by "Draft.SNF_AlgorithmMoreTemplates" via "Draft.SNF_Algorithm" via "Draft.Smith_Normal_Form_JNF" via "Draft.SNF_Missing_Lemmas" via "Hermite.Hermite" via "Echelon_Form.Examples_Echelon_Form_Abstract" via "Gauss_Jordan.Examples_Gauss_Jordan_Abstract" via "Gauss_Jordan.Code_Z2")
locale weak_complete_lattice
  fixes L :: "('a, 'b) gorder_scheme"  (structure)
  assumes "weak_complete_lattice L"
Proofs for inductive predicate(s) "rel_mset'"
  Proving monotonicity ...
Found termination order: "size <*mlex*> {}"
instantiation
  bit :: zero_neq_one
  one_bit == one_class.one :: bit
  zero_bit == zero_class.zero :: bit
Found termination order: "size <*mlex*> {}"
instantiation
  bit :: semidom_modulo
  modulo_bit == modulo :: bit => bit => bit
  divide_bit == divide :: bit => bit => bit
  minus_bit == minus :: bit => bit => bit
  times_bit == times :: bit => bit => bit
  plus_bit == plus :: bit => bit => bit
### theory "HOL-Library.Multiset"
### 4.350s elapsed time, 16.738s cpu time, 3.776s GC time
Loading theory "HOL-Computational_Algebra.Factorial_Ring" (required by "Draft.SNF_AlgorithmMoreTemplates" via "Draft.SNF_Algorithm" via "Draft.Smith_Normal_Form_JNF" via "Draft.SNF_Missing_Lemmas" via "Hermite.Hermite" via "Echelon_Form.Echelon_Form_Inverse" via "Echelon_Form.Echelon_Form_Det" via "Echelon_Form.Echelon_Form" via "Echelon_Form.Rings2" via "HOL-Analysis.Analysis" via "HOL-Analysis.Jordan_Curve" via "HOL-Analysis.Arcwise_Connected" via "HOL-Computational_Algebra.Primes" via "HOL-Computational_Algebra.Euclidean_Algorithm")
### theory "HOL-Algebra.Complete_Lattice"
### 0.792s elapsed time, 3.133s cpu time, 0.457s GC time
Loading theory "HOL-Algebra.Group" (required by "Draft.SNF_AlgorithmMoreTemplates" via "Draft.SNF_Algorithm" via "Draft.Smith_Normal_Form_JNF" via "Draft.SNF_Missing_Lemmas" via "Draft.Mod_Type_Connect" via "Perron_Frobenius.HMA_Connect" via "Jordan_Normal_Form.Spectral_Radius" via "Jordan_Normal_Form.Jordan_Normal_Form_Existence" via "Jordan_Normal_Form.Jordan_Normal_Form" via "Jordan_Normal_Form.Matrix" via "Jordan_Normal_Form.Missing_Ring" via "HOL-Algebra.Ring" via "HOL-Algebra.FiniteProduct")
class zero_neq_one = one + zero +
  assumes "zero_neq_one": "(0::'a) ~= (1::'a)"
Found termination order: "size <*mlex*> {}"
### Type
### bit => nat => bit
### of constant "Power.power_class.power"
### is too specific compared to declared type
### ?'a::{} => nat => ?'a::{}, in theorem:
### ?a ^ ?n == of_bool (odd ?a | ?n = 0)
instantiation
  bit :: field
  inverse_bit == inverse :: bit => bit
  uminus_bit == uminus :: bit => bit
instantiation
  bit :: semiring_bits
  bit_bit == bit :: bit => nat => bool
instantiation
  bit :: ring_bit_operations
  not_bit == not :: bit => bit
  and_bit == and :: bit => bit => bit
  or_bit == or :: bit => bit => bit
  xor_bit == xor :: bit => bit => bit
  mask_bit == mask :: nat => bit
  set_bit_bit == set_bit :: nat => bit => bit
  unset_bit_bit == unset_bit :: nat => bit => bit
  flip_bit_bit == flip_bit :: nat => bit => bit
  push_bit_bit == push_bit :: nat => bit => bit
  drop_bit_bit == drop_bit :: nat => bit => bit
  take_bit_bit == take_bit :: nat => bit => bit
Found termination order: "size <*mlex*> {}"
### theory "HOL-Library.Z2"
### 0.344s elapsed time, 1.367s cpu time, 0.190s GC time
Loading theory "HOL-Combinatorics.Permutations" (required by "Draft.SNF_AlgorithmMoreTemplates" via "Draft.SNF_Algorithm" via "Draft.Smith_Normal_Form_JNF" via "Draft.SNF_Missing_Lemmas" via "Hermite.Hermite" via "Echelon_Form.Echelon_Form_Inverse" via "Echelon_Form.Echelon_Form_Det" via "Echelon_Form.Echelon_Form" via "Echelon_Form.Rings2" via "HOL-Analysis.Analysis" via "HOL-Analysis.Determinants")
Found termination order: "(%p. size (fst p)) <*mlex*> {}"
Found termination order: "size <*mlex*> {}"
locale Group.monoid
  fixes G :: "('a, 'b) monoid_scheme"  (structure)
  assumes "Group.monoid G"
Found termination order: "(%p. size (snd p)) <*mlex*> {}"
locale Group.group
  fixes G :: "('a, 'b) monoid_scheme"  (structure)
  assumes "Group.group G"
overloading
  nat_pow \<equiv> pow :: ('a, 'b) monoid_scheme => 'a => nat => 'a
overloading
  int_pow \<equiv> pow :: ('a, 'b) monoid_scheme => 'a => int => 'a
Found termination order: "size <*mlex*> {}"
Proofs for inductive predicate(s) "swapidseq"
  Proving monotonicity ...
locale submonoid
  fixes H :: "'a set"
    and G :: "('a, 'b) monoid_scheme"  (structure)
  assumes "submonoid H G"
locale subgroup
  fixes H :: "'a set"
    and G :: "('a, 'b) monoid_scheme"  (structure)
  assumes "subgroup H G"
### theory "HOL-Library.Tree"
### 2.778s elapsed time, 10.706s cpu time, 3.062s GC time
Loading theory "Draft.Templates" (required by "Draft.SNF_AlgorithmMoreTemplates" via "Draft.ExtrEqs")
datatype template_term
=
     t_empty
   | template_app of template_term * template_term
   | template_hole of int
   | template_var of int
datatype sign
= equals | greater_equals | greater_than | less_equals | less_than
datatype template
=
     template_bimplication of template * template
   | template_dunno
   | template_equation of template_term * template_term
   | template_implication of template list * template
   | template_inequation of sign * template_term * template_term
   | template_negation of template
   | template_predicate of template_term
constructor t_empty: template_term
constructor template_app: template_term * template_term -> template_term
constructor template_hole: int -> template_term
constructor template_var: int -> template_term
constructor equals: sign
constructor greater_equals: sign
constructor greater_than: sign
constructor less_equals: sign
constructor less_than: sign
constructor template_bimplication: template * template -> template
constructor template_dunno: template
constructor template_equation: template_term * template_term -> template
constructor template_implication: template list * template -> template
constructor template_inequation:
   sign * template_term * template_term -> template
constructor template_negation: template -> template
constructor template_predicate: template_term -> template
val vfs = fn: term -> (indexname * typ) list * (string * typ) list
val indexOf = fn: ''a list -> ''a -> int -> int
val has_eq = fn: term -> bool
val term2template = fn:
   (indexname * typ) list -> (string * typ) list -> term -> template_term
val lemma2predicate = fn: term -> term -> template
val makeTemplatewithContext = fn: term -> term -> template
val lemma2template = fn: term -> template
val thm2template = fn: thm -> template
val tterm2string = fn: template_term -> string
val template2string = fn: template -> string
val t = "height ?t <= size ?t": thm
val th =
   Const ("HOL.Trueprop", "bool => prop") $
     (Const ("Orderings.ord_class.less_eq", "nat => nat => bool") $
       (Const ("Tree.height_class.height", "?'a tree => nat") $
         Var (("t", 0), "?'a tree")) $
       (Const ("Nat.size_class.size", "?'a tree => nat") $
         Var (("t", 0), "?'a tree"))):
   term
### theory "Draft.Templates"
### 0.066s elapsed time, 0.258s cpu time, 0.000s GC time
Loading theory "Gauss_Jordan.Code_Z2" (required by "Draft.SNF_AlgorithmMoreTemplates" via "Draft.SNF_Algorithm" via "Draft.Smith_Normal_Form_JNF" via "Draft.SNF_Missing_Lemmas" via "Hermite.Hermite" via "Echelon_Form.Examples_Echelon_Form_Abstract" via "Gauss_Jordan.Examples_Gauss_Jordan_Abstract")
### theory "Gauss_Jordan.Code_Z2"
### 0.032s elapsed time, 0.136s cpu time, 0.000s GC time
Loading theory "HOL-Types_To_Sets.Types_To_Sets" (required by "Draft.SNF_AlgorithmMoreTemplates" via "Draft.SNF_Algorithm" via "Draft.Smith_Normal_Form_JNF" via "Draft.SNF_Missing_Lemmas" via "Draft.Mod_Type_Connect" via "Perron_Frobenius.HMA_Connect" via "Perron_Frobenius.Cancel_Card_Constraint")
signature LOCAL_TYPEDEF =
  sig
    val cancel_type_definition: thm -> thm
    val cancel_type_definition_attr: attribute
  end
structure Local_Typedef: LOCAL_TYPEDEF
locale comm_monoid_set
  fixes f :: "'a => 'a => 'a"  (infixl \<open>\<^bold>*\<close> 70)
    and z :: "'a"  (\<open>\<^bold>1\<close>)
  assumes "comm_monoid_set (\<^bold>*) \<^bold>1"
signature UNOVERLOADING =
  sig
    val unoverload: cterm -> thm -> thm
    val unoverload_attr: cterm -> attribute
  end
structure Unoverloading: UNOVERLOADING
signature INTERNALIZE_SORT =
  sig
    val internalize_sort: ctyp -> thm -> typ * thm
    val internalize_sort_attr: typ -> attribute
  end
structure Internalize_Sort: INTERNALIZE_SORT
### ML warning (line 41 of "~~/src/HOL/Types_To_Sets/unoverload_type.ML"):
### Matches are not exhaustive.
signature UNOVERLOAD_TYPE =
  sig
    val unoverload_type: Context.generic -> indexname list -> thm -> thm
    val unoverload_type_attr: indexname list -> attribute
  end
structure Unoverload_Type: UNOVERLOAD_TYPE
class normalization_semidom = algebraic_semidom +
  semidom_divide_unit_factor +
  fixes normalize :: "'a => 'a"
  assumes
    "unit_factor_mult_normalize": "!!a. unit_factor a * normalize a = a"
    and "normalize_0": "normalize (0::'a) = (0::'a)"
Found termination order: "(%p. size_list size (fst p)) <*mlex*> {}"
### theory "HOL-Combinatorics.Permutations"
### 1.574s elapsed time, 5.950s cpu time, 2.299s GC time
Loading theory "Jordan_Normal_Form.Missing_Misc" (required by "Draft.SNF_AlgorithmMoreTemplates" via "Draft.SNF_Algorithm" via "Draft.Smith_Normal_Form_JNF" via "Draft.SNF_Missing_Lemmas" via "Draft.Mod_Type_Connect" via "Perron_Frobenius.HMA_Connect" via "Jordan_Normal_Form.Spectral_Radius" via "Jordan_Normal_Form.Jordan_Normal_Form_Existence" via "Jordan_Normal_Form.Jordan_Normal_Form" via "Jordan_Normal_Form.Matrix" via "Jordan_Normal_Form.Missing_Ring")
### ML warning (line 36 of "~~/src/HOL/Types_To_Sets/unoverload_def.ML"):
### Pattern is not exhaustive.
### ML warning (line 36 of "~~/src/HOL/Types_To_Sets/unoverload_def.ML"):
### Value identifier (ctxt') has not been referenced.
### ML warning (line 40 of "~~/src/HOL/Types_To_Sets/unoverload_def.ML"):
### Pattern is not exhaustive.
### ML warning (line 66 of "~~/src/HOL/Types_To_Sets/unoverload_def.ML"):
### Pattern is not exhaustive.
structure Unoverload_Def:
  sig
    val unoverload_def: binding option -> thm -> theory -> theory
    val unoverload_def1_cmd:
       binding option * (Facts.ref * Token.src list) -> theory -> theory
  end
### theory "HOL-Types_To_Sets.Types_To_Sets"
### 0.312s elapsed time, 1.211s cpu time, 0.204s GC time
Loading theory "Perron_Frobenius.Cancel_Card_Constraint" (required by "Draft.SNF_AlgorithmMoreTemplates" via "Draft.SNF_Algorithm" via "Draft.Smith_Normal_Form_JNF" via "Draft.SNF_Missing_Lemmas" via "Draft.Mod_Type_Connect" via "Perron_Frobenius.HMA_Connect")
locale group_hom
  fixes G :: "('a, 'b) monoid_scheme"  (structure)
    and H :: "('c, 'd) monoid_scheme"  (structure)
    and h :: "'a => 'c"
  assumes "group_hom G H h"
### theory "Jordan_Normal_Form.Missing_Misc"
### 0.100s elapsed time, 0.401s cpu time, 0.000s GC time
Loading theory "HOL-Library.Countable" (required by "Draft.SNF_AlgorithmMoreTemplates" via "Draft.SNF_Algorithm" via "Draft.Smith_Normal_Form_JNF" via "Draft.SNF_Missing_Lemmas" via "Hermite.Hermite" via "Echelon_Form.Echelon_Form_Inverse" via "Echelon_Form.Echelon_Form_Det" via "Echelon_Form.Echelon_Form" via "Echelon_Form.Rings2" via "HOL-Analysis.Analysis" via "HOL-Analysis.Determinants" via "HOL-Analysis.Cartesian_Space" via "HOL-Analysis.Finite_Cartesian_Product" via "HOL-Library.Countable_Set")
locale Group.comm_monoid
  fixes G :: "('a, 'b) monoid_scheme"  (structure)
  assumes "Group.comm_monoid G"
locale comm_group
  fixes G :: "('a, 'b) monoid_scheme"  (structure)
  assumes "comm_group G"
### ML warning (line 55 of "$AFP/Perron_Frobenius/cancel_card_constraint.ML"):
### Pattern is not exhaustive.
signature CARD_ELIMINATION =
  sig
    val cancel_card_constraint: thm -> thm
    val cancel_card_constraint_attr: attribute
  end
structure Card_Elimination: CARD_ELIMINATION
### theory "Perron_Frobenius.Cancel_Card_Constraint"
### 0.256s elapsed time, 1.013s cpu time, 0.112s GC time
Loading theory "HOL-Analysis.Metric_Arith" (required by "Draft.SNF_AlgorithmMoreTemplates" via "Draft.SNF_Algorithm" via "Draft.Smith_Normal_Form_JNF" via "Draft.SNF_Missing_Lemmas" via "Hermite.Hermite" via "Echelon_Form.Echelon_Form_Inverse" via "Echelon_Form.Echelon_Form_Det" via "Echelon_Form.Echelon_Form" via "Echelon_Form.Rings2" via "HOL-Analysis.Analysis" via "HOL-Analysis.Elementary_Normed_Spaces" via "HOL-Analysis.Elementary_Metric_Spaces")
class semiring_gcd = gcd + normalization_semidom +
  assumes "gcd_dvd1": "!!a b. gcd a b dvd a"
    and "gcd_dvd2": "!!a b. gcd a b dvd b"
    and "gcd_greatest": "!!c a b. [| c dvd a; c dvd b |] ==> c dvd gcd a b"
    and "normalize_gcd": "!!a b. normalize (gcd a b) = gcd a b"
    and "lcm_gcd": "!!a b. lcm a b = normalize (a * b div gcd a b)"
### theory "HOL-Algebra.Group"
### 2.190s elapsed time, 8.400s cpu time, 2.411s GC time
Loading theory "HOL-Algebra.Coset" (required by "Draft.SNF_AlgorithmMoreTemplates" via "Draft.SNF_Algorithm" via "Draft.Smith_Normal_Form_JNF" via "Draft.SNF_Missing_Lemmas" via "Draft.Mod_Type_Connect" via "Perron_Frobenius.HMA_Connect" via "Jordan_Normal_Form.Spectral_Radius" via "Jordan_Normal_Form.Jordan_Normal_Form_Existence" via "Jordan_Normal_Form.Schur_Decomposition" via "Jordan_Normal_Form.Gram_Schmidt" via "Jordan_Normal_Form.VS_Connect" via "Jordan_Normal_Form.Missing_VectorSpace" via "VectorSpace.VectorSpace")
### Additional type variable(s) in locale specification "countable": 'a
locale normal
  fixes H :: "'a set"
    and G :: "('a, 'b) monoid_scheme"  (structure)
  assumes "normal H G"
class countable = type +
  assumes "ex_inj": "EX to_nat. inj to_nat"
Proofs for inductive predicate(s) "finite_item"
  Proving monotonicity ...
signature METRIC_ARITH =
  sig
    val argo_timeout: real Config.T
    val metric_arith_tac: Proof.context -> int -> tactic
    val trace: bool Config.T
  end
structure Metric_Arith: METRIC_ARITH
### theory "HOL-Analysis.Metric_Arith"
### 0.626s elapsed time, 2.489s cpu time, 0.160s GC time
Loading theory "HOL-Algebra.FiniteProduct" (required by "Draft.SNF_AlgorithmMoreTemplates" via "Draft.SNF_Algorithm" via "Draft.Smith_Normal_Form_JNF" via "Draft.SNF_Missing_Lemmas" via "Draft.Mod_Type_Connect" via "Perron_Frobenius.HMA_Connect" via "Jordan_Normal_Form.Spectral_Radius" via "Jordan_Normal_Form.Jordan_Normal_Form_Existence" via "Jordan_Normal_Form.Jordan_Normal_Form" via "Jordan_Normal_Form.Matrix" via "Jordan_Normal_Form.Missing_Ring" via "HOL-Algebra.Ring")
class factorial_semiring = normalization_semidom +
  assumes
    "prime_factorization_exists":
      "!!x. x ~= (0::'a) ==>
            EX A. (ALL x. x :# A --> prime_elem x) &
                  normalize (\<Prod>\<^sub># A) = normalize x"
Proofs for inductive predicate(s) "foldSetDp"
val old_countable_datatype_tac = fn: Proof.context -> int -> tactic
  Proving monotonicity ...
### Ambiguous input (line 611 of "~~/src/HOL/Algebra/Coset.thy") produces 2 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("\<^fixed>r_congruent_indexed" ("_index" ("_position" G))
###       ("_position" H))
###     ("_Coll" ("_pattern" ("_position" x) ("_position" y))
###       ("\<^const>HOL.conj"
###         ("\<^const>Set.member" ("_position" x)
###           ("_applC" ("_position" carrier) ("_position" G)))
###         ("\<^const>HOL.conj"
###           ("\<^const>Set.member" ("_position" y)
###             ("_applC" ("_position" carrier) ("_position" G)))
###           ("\<^const>Set.member"
###             ("\<^const>Group.monoid.mult_indexed"
###               ("\<^const>Group.m_inv_indexed" ("_index" ("_position" G))
###                 ("_position" x))
###               ("_index" ("_position" G)) ("_position" y))
###             ("_position" H)))))))
### ("\<^const>HOL.Trueprop"
###   ("\<^fixed>r_congruent_indexed" ("_index" ("_position" G))
###     ("\<^const>HOL.eq" ("_position" H)
###       ("_Coll" ("_pattern" ("_position" x) ("_position" y))
###         ("\<^const>HOL.conj"
###           ("\<^const>Set.member" ("_position" x)
###             ("_applC" ("_position" carrier) ("_position" G)))
###           ("\<^const>HOL.conj"
###             ("\<^const>Set.member" ("_position" y)
###               ("_applC" ("_position" carrier) ("_position" G)))
###             ("\<^const>Set.member"
###               ("\<^const>Group.monoid.mult_indexed"
###                 ("\<^const>Group.m_inv_indexed" ("_index" ("_position" G))
###                   ("_position" x))
###                 ("_index" ("_position" G)) ("_position" y))
###               ("_position" H))))))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### ML warning (line 93 of "~~/src/HOL/Tools/BNF/bnf_lfp_countable.ML"):
### Pattern is not exhaustive.
### ML warning (line 139 of "~~/src/HOL/Tools/BNF/bnf_lfp_countable.ML"):
### Pattern is not exhaustive.
### ML warning (line 143 of "~~/src/HOL/Tools/BNF/bnf_lfp_countable.ML"):
### Matches are not exhaustive.
### ML warning (line 145 of "~~/src/HOL/Tools/BNF/bnf_lfp_countable.ML"):
### Matches are not exhaustive.
### ML warning (line 156 of "~~/src/HOL/Tools/BNF/bnf_lfp_countable.ML"):
### Pattern is not exhaustive.
signature BNF_LFP_COUNTABLE =
  sig
    val countable_datatype_tac: Proof.context -> tactic
    val derive_encode_injectives_thms:
       Proof.context -> string list -> thm list
  end
structure BNF_LFP_Countable: BNF_LFP_COUNTABLE
val countable_datatype_tac = fn: Proof.context -> thm -> thm Seq.seq
val countable_tac = fn: Proof.context -> int -> tactic
locale LCD
  fixes B :: "'b set"
    and D :: "'a set"
    and f :: "'b => 'a => 'a"  (infixl \<open>\<cdot>\<close> 70)
  assumes "LCD B D (\<cdot>)"
class factorial_semiring = normalization_semidom +
  assumes
    "prime_factorization_exists":
      "!!x. x ~= (0::'a) ==>
            EX A. (ALL x. x :# A --> prime_elem x) &
                  normalize (\<Prod>\<^sub># A) = normalize x"
locale ACeD
  fixes D :: "'a set"
    and f :: "'a => 'a => 'a"  (infixl \<open>\<cdot>\<close> 70)
    and e :: "'a"
  assumes "ACeD D (\<cdot>) e"
locale Group.comm_monoid
  fixes G :: "('a, 'b) monoid_scheme"  (structure)
  assumes "Group.comm_monoid G"
### theory "HOL-Library.Countable"
### 1.222s elapsed time, 4.816s cpu time, 0.529s GC time
Loading theory "HOL-Library.Countable_Set" (required by "Draft.SNF_AlgorithmMoreTemplates" via "Draft.SNF_Algorithm" via "Draft.Smith_Normal_Form_JNF" via "Draft.SNF_Missing_Lemmas" via "Hermite.Hermite" via "Echelon_Form.Echelon_Form_Inverse" via "Echelon_Form.Echelon_Form_Det" via "Echelon_Form.Echelon_Form" via "Echelon_Form.Rings2" via "HOL-Analysis.Analysis" via "HOL-Analysis.Determinants" via "HOL-Analysis.Cartesian_Space" via "HOL-Analysis.Finite_Cartesian_Product")
locale Group.comm_monoid
  fixes G :: "('a, 'b) monoid_scheme"  (structure)
  assumes "Group.comm_monoid G"
### theory "HOL-Algebra.FiniteProduct"
### 0.526s elapsed time, 2.074s cpu time, 0.257s GC time
Loading theory "HOL-Algebra.Ring" (required by "Draft.SNF_AlgorithmMoreTemplates" via "Draft.SNF_Algorithm" via "Draft.Smith_Normal_Form_JNF" via "Draft.SNF_Missing_Lemmas" via "Draft.Mod_Type_Connect" via "Perron_Frobenius.HMA_Connect" via "Jordan_Normal_Form.Spectral_Radius" via "Jordan_Normal_Form.Jordan_Normal_Form_Existence" via "Jordan_Normal_Form.Jordan_Normal_Form" via "Jordan_Normal_Form.Matrix" via "Jordan_Normal_Form.Missing_Ring")
locale comm_monoid_set
  fixes f :: "'a => 'a => 'a"  (infixl \<open>\<^bold>*\<close> 70)
    and z :: "'a"  (\<open>\<^bold>1\<close>)
  assumes "comm_monoid_set (\<^bold>*) \<^bold>1"
locale abelian_monoid
  fixes G :: "('a, 'b) ring_scheme"  (structure)
  assumes "abelian_monoid G"
locale abelian_group
  fixes G :: "('a, 'b) ring_scheme"  (structure)
  assumes "abelian_group G"
### theory "HOL-Algebra.Coset"
### 1.271s elapsed time, 5.014s cpu time, 0.494s GC time
Loading theory "HOL-Analysis.Inner_Product" (required by "Draft.SNF_AlgorithmMoreTemplates" via "Draft.SNF_Algorithm" via "Draft.Smith_Normal_Form_JNF" via "Draft.SNF_Missing_Lemmas" via "Hermite.Hermite" via "Echelon_Form.Echelon_Form_Inverse" via "Echelon_Form.Echelon_Form_Det" via "Echelon_Form.Echelon_Form" via "Echelon_Form.Rings2" via "HOL-Analysis.Analysis" via "HOL-Analysis.Convex" via "HOL-Analysis.Affine" via "HOL-Analysis.Linear_Algebra" via "HOL-Analysis.Euclidean_Space")
### Cannot skip proof of schematic goal statement
### theory "HOL-Library.Countable_Set"
### 0.521s elapsed time, 2.043s cpu time, 0.256s GC time
Loading theory "HOL-Library.Countable_Complete_Lattices" (required by "Draft.SNF_AlgorithmMoreTemplates" via "Draft.SNF_Algorithm" via "Draft.Smith_Normal_Form_JNF" via "Draft.SNF_Missing_Lemmas" via "Hermite.Hermite" via "Echelon_Form.Echelon_Form_Inverse" via "Echelon_Form.Echelon_Form_Det" via "Echelon_Form.Echelon_Form" via "Echelon_Form.Rings2" via "HOL-Analysis.Analysis" via "HOL-Analysis.Derivative" via "HOL-Analysis.Bounded_Linear_Function" via "HOL-Analysis.Uniform_Limit" via "HOL-Analysis.Summation_Tests" via "HOL-Library.Extended_Real" via "HOL-Library.Extended_Nat" via "HOL-Library.Order_Continuity")
locale abelian_monoid
  fixes G :: "('a, 'b) ring_scheme"  (structure)
  assumes "abelian_monoid G"
### Cannot skip proof of schematic goal statement
locale abelian_monoid
  fixes G :: "('a, 'b) ring_scheme"  (structure)
  assumes "abelian_monoid G"
### Cannot skip proof of schematic goal statement
locale abelian_group
  fixes G :: "('a, 'b) ring_scheme"  (structure)
  assumes "abelian_group G"
### Cannot skip proof of schematic goal statement
locale Ring.semiring
  fixes R :: "('a, 'b) ring_scheme"  (structure)
  assumes "semiring R"
locale Ring.ring
  fixes R :: "('a, 'b) ring_scheme"  (structure)
  assumes "ring R"
class real_inner = dist_norm + real_vector + sgn_div_norm +
  uniformity_dist + open_uniformity +
  fixes inner :: "'a => 'a => real"
  assumes "inner_commute": "!!x y. inner x y = inner y x"
    and "inner_add_left": "!!x y z. inner (x + y) z = inner x z + inner y z"
    and
    "inner_scaleR_left": "!!r x y. inner (r *\<^sub>R x) y = r * inner x y"
    and "inner_ge_zero": "!!x. 0 <= inner x x"
    and "inner_eq_zero_iff": "!!x. (inner x x = 0) = (x = (0::'a))"
    and "norm_eq_sqrt_inner": "!!x. norm x = sqrt (inner x x)"
class countable_complete_lattice = Inf + Sup + lattice + bot + top +
  assumes "ccInf_lower": "!!A x. [| countable A; x : A |] ==> Inf A <= x"
  assumes
    "ccInf_greatest":
      "!!A z. [| countable A; !!x. x : A ==> z <= x |] ==> z <= Inf A"
  assumes "ccSup_upper": "!!A x. [| countable A; x : A |] ==> x <= Sup A"
  assumes
    "ccSup_least":
      "!!A z. [| countable A; !!x. x : A ==> x <= z |] ==> Sup A <= z"
  assumes "ccInf_empty": "Inf {} = top"
  assumes "ccSup_empty": "Sup {} = bot"
locale cring
  fixes R :: "('a, 'b) ring_scheme"  (structure)
  assumes "cring R"
locale domain
  fixes R :: "('a, 'b) ring_scheme"  (structure)
  assumes "domain R"
locale Ring.field
  fixes R :: "('a, 'b) ring_scheme"  (structure)
  assumes "field R"
locale Ring.ring
  fixes R :: "('a, 'b) ring_scheme"  (structure)
  assumes "ring R"
instantiation
  real :: real_inner
  inner_real == inner :: real => real => real
instantiation
  complex :: real_inner
  inner_complex == inner :: complex => complex => real
locale Ring.ring
  fixes R :: "('a, 'b) ring_scheme"  (structure)
  assumes "ring R"
### ML warning (line 44 of "~~/src/HOL/Algebra/ringsimp.ML"):
### Value identifier (s) has not been referenced.
### ML warning (line 47 of "~~/src/HOL/Algebra/ringsimp.ML"):
### Matches are not exhaustive.
signature RINGSIMP =
  sig
    val add_struct: string * term list -> attribute
    val algebra_tac: Proof.context -> int -> tactic
    val del_struct: string * term list -> attribute
    val print_structures: Proof.context -> unit
  end
structure Ringsimp: RINGSIMP
bundle inner_syntax
bundle no_inner_syntax
### theory "HOL-Analysis.Inner_Product"
### 1.107s elapsed time, 4.370s cpu time, 0.433s GC time
Loading theory "HOL-Library.Set_Idioms" (required by "Draft.SNF_AlgorithmMoreTemplates" via "Draft.SNF_Algorithm" via "Draft.Smith_Normal_Form_JNF" via "Draft.SNF_Missing_Lemmas" via "Hermite.Hermite" via "Echelon_Form.Echelon_Form_Inverse" via "Echelon_Form.Echelon_Form_Det" via "Echelon_Form.Echelon_Form" via "Echelon_Form.Rings2" via "HOL-Analysis.Analysis" via "HOL-Analysis.Connected" via "HOL-Analysis.Abstract_Topology_2" via "HOL-Analysis.Elementary_Topology")
class factorial_semiring_gcd = factorial_semiring + Gcd +
  assumes "gcd_eq_gcd_factorial": "!!a b. gcd a b = gcd_factorial a b"
    and "lcm_eq_lcm_factorial": "!!a b. lcm a b = lcm_factorial a b"
    and "Gcd_eq_Gcd_factorial": "!!A. Gcd A = Gcd_factorial A"
    and "Lcm_eq_Lcm_factorial": "!!A. Lcm A = Lcm_factorial A"
### theory "HOL-Library.Set_Idioms"
### 0.254s elapsed time, 0.998s cpu time, 0.172s GC time
Loading theory "HOL-Analysis.Abstract_Topology" (required by "Draft.SNF_AlgorithmMoreTemplates" via "Draft.SNF_Algorithm" via "Draft.Smith_Normal_Form_JNF" via "Draft.SNF_Missing_Lemmas" via "Hermite.Hermite" via "Echelon_Form.Echelon_Form_Inverse" via "Echelon_Form.Echelon_Form_Det" via "Echelon_Form.Echelon_Form" via "Echelon_Form.Rings2" via "HOL-Analysis.Analysis" via "HOL-Analysis.Connected" via "HOL-Analysis.Abstract_Topology_2")
locale Ring.semiring
  fixes R :: "('a, 'b) ring_scheme"  (structure)
  assumes "semiring R"
class countable_complete_distrib_lattice = countable_complete_lattice +
  assumes
    "sup_ccInf": "!!B a. countable B ==> sup a (Inf B) = Inf (sup a ` B)"
  assumes
    "inf_ccSup": "!!B a. countable B ==> inf a (Sup B) = Sup (inf a ` B)"
locale domain
  fixes R :: "('a, 'b) ring_scheme"  (structure)
  assumes "domain R"
locale ring_hom_cring
  fixes R :: "('a, 'b) ring_scheme"  (structure)
    and S :: "('c, 'd) ring_scheme"  (structure)
    and h :: "'a => 'c"
  assumes "ring_hom_cring R S h"
### theory "HOL-Library.Countable_Complete_Lattices"
### 2.308s elapsed time, 9.091s cpu time, 0.982s GC time
Loading theory "HOL-Analysis.Continuum_Not_Denumerable" (required by "Draft.SNF_AlgorithmMoreTemplates" via "Draft.SNF_Algorithm" via "Draft.Smith_Normal_Form_JNF" via "Draft.SNF_Missing_Lemmas" via "Hermite.Hermite" via "Echelon_Form.Echelon_Form_Inverse" via "Echelon_Form.Echelon_Form_Det" via "Echelon_Form.Echelon_Form" via "Echelon_Form.Rings2" via "HOL-Analysis.Analysis" via "HOL-Analysis.Ball_Volume" via "HOL-Analysis.Gamma_Function" via "HOL-Analysis.Equivalence_Lebesgue_Henstock_Integration" via "HOL-Analysis.Homeomorphism" via "HOL-Analysis.Homotopy")
### theory "HOL-Algebra.Ring"
### 2.911s elapsed time, 11.459s cpu time, 1.297s GC time
Loading theory "HOL-Algebra.Module" (required by "Draft.SNF_AlgorithmMoreTemplates" via "Draft.SNF_Algorithm" via "Draft.Smith_Normal_Form_JNF" via "Draft.SNF_Missing_Lemmas" via "Draft.Mod_Type_Connect" via "Perron_Frobenius.HMA_Connect" via "Jordan_Normal_Form.Spectral_Radius" via "Jordan_Normal_Form.Jordan_Normal_Form_Existence" via "Jordan_Normal_Form.Jordan_Normal_Form" via "Jordan_Normal_Form.Matrix")
### theory "HOL-Analysis.Continuum_Not_Denumerable"
### 0.298s elapsed time, 1.173s cpu time, 0.140s GC time
Loading theory "Jordan_Normal_Form.Missing_Ring" (required by "Draft.SNF_AlgorithmMoreTemplates" via "Draft.SNF_Algorithm" via "Draft.Smith_Normal_Form_JNF" via "Draft.SNF_Missing_Lemmas" via "Draft.Mod_Type_Connect" via "Perron_Frobenius.HMA_Connect" via "Jordan_Normal_Form.Spectral_Radius" via "Jordan_Normal_Form.Jordan_Normal_Form_Existence" via "Jordan_Normal_Form.Jordan_Normal_Form" via "Jordan_Normal_Form.Matrix")
locale module
  fixes R :: "('a, 'b) ring_scheme"  (structure)
    and M :: "('a, 'c, 'd) module_scheme"  (structure)
  assumes "module R M"
locale algebra
  fixes R :: "('a, 'b) ring_scheme"  (structure)
    and M :: "('a, 'c, 'd) module_scheme"  (structure)
  assumes "algebra R M"
class ordered_semiring_strict = comm_monoid_add +
  ordered_cancel_ab_semigroup_add + semiring +
  assumes
    "mult_strict_left_mono":
      "!!a b c. [| a < b; (0::'a) < c |] ==> c * a < c * b"
  assumes
    "mult_strict_right_mono":
      "!!a b c. [| a < b; (0::'a) < c |] ==> a * c < b * c"
Proofs for inductive predicate(s) "generate_topology_on"
  Proving monotonicity ...
locale submodule
  fixes H :: "'c set"
    and R :: "('a, 'b) ring_scheme"
    and M :: "('a, 'c, 'd) module_scheme"  (structure)
  assumes "submodule H R M"
### theory "HOL-Analysis.Abstract_Topology"
### 2.694s elapsed time, 10.560s cpu time, 1.311s GC time
Loading theory "HOL-Analysis.Abstract_Limits" (required by "Draft.SNF_AlgorithmMoreTemplates" via "Draft.SNF_Algorithm" via "Draft.Smith_Normal_Form_JNF" via "Draft.SNF_Missing_Lemmas" via "Hermite.Hermite" via "Echelon_Form.Echelon_Form_Inverse" via "Echelon_Form.Echelon_Form_Det" via "Echelon_Form.Echelon_Form" via "Echelon_Form.Rings2" via "HOL-Analysis.Analysis")
### theory "HOL-Algebra.Module"
### 1.595s elapsed time, 6.233s cpu time, 0.897s GC time
Loading theory "HOL-Analysis.L2_Norm" (required by "Draft.SNF_AlgorithmMoreTemplates" via "Draft.SNF_Algorithm" via "Draft.Smith_Normal_Form_JNF" via "Draft.SNF_Missing_Lemmas" via "Hermite.Hermite" via "Echelon_Form.Echelon_Form_Inverse" via "Echelon_Form.Echelon_Form_Det" via "Echelon_Form.Echelon_Form" via "Echelon_Form.Rings2" via "HOL-Analysis.Analysis" via "HOL-Analysis.Convex" via "HOL-Analysis.Affine" via "HOL-Analysis.Linear_Algebra" via "HOL-Analysis.Euclidean_Space")
### theory "HOL-Computational_Algebra.Factorial_Ring"
### 7.826s elapsed time, 30.527s cpu time, 5.293s GC time
Loading theory "HOL-Computational_Algebra.Euclidean_Algorithm" (required by "Draft.SNF_AlgorithmMoreTemplates" via "Draft.SNF_Algorithm" via "Draft.Smith_Normal_Form_JNF" via "Draft.SNF_Missing_Lemmas" via "Hermite.Hermite" via "Echelon_Form.Echelon_Form_Inverse" via "Echelon_Form.Echelon_Form_Det" via "Echelon_Form.Echelon_Form" via "Echelon_Form.Rings2" via "HOL-Analysis.Analysis" via "HOL-Analysis.Jordan_Curve" via "HOL-Analysis.Arcwise_Connected" via "HOL-Computational_Algebra.Primes")
### theory "HOL-Analysis.L2_Norm"
### 0.104s elapsed time, 0.408s cpu time, 0.047s GC time
Loading theory "Polynomial_Interpolation.Missing_Unsorted" (required by "Draft.SNF_AlgorithmMoreTemplates" via "Draft.SNF_Algorithm" via "Draft.Smith_Normal_Form_JNF" via "Draft.SNF_Missing_Lemmas" via "Draft.Mod_Type_Connect" via "Perron_Frobenius.HMA_Connect" via "Jordan_Normal_Form.Spectral_Radius" via "Jordan_Normal_Form.Jordan_Normal_Form_Existence" via "Jordan_Normal_Form.Jordan_Normal_Form" via "Jordan_Normal_Form.Char_Poly" via "Polynomial_Factorization.Fundamental_Theorem_Algebra_Factorized" via "Polynomial_Factorization.Order_Polynomial" via "Polynomial_Interpolation.Missing_Polynomial")
### theory "HOL-Analysis.Abstract_Limits"
### 0.277s elapsed time, 1.076s cpu time, 0.199s GC time
Loading theory "HOL-Analysis.Operator_Norm" (required by "Draft.SNF_AlgorithmMoreTemplates" via "Draft.SNF_Algorithm" via "Draft.Smith_Normal_Form_JNF" via "Draft.SNF_Missing_Lemmas" via "Hermite.Hermite" via "Echelon_Form.Echelon_Form_Inverse" via "Echelon_Form.Echelon_Form_Det" via "Echelon_Form.Echelon_Form" via "Echelon_Form.Rings2" via "HOL-Analysis.Analysis")
### theory "HOL-Analysis.Operator_Norm"
### 0.116s elapsed time, 0.456s cpu time, 0.057s GC time
Loading theory "HOL-Analysis.Poly_Roots" (required by "Draft.SNF_AlgorithmMoreTemplates" via "Draft.SNF_Algorithm" via "Draft.Smith_Normal_Form_JNF" via "Draft.SNF_Missing_Lemmas" via "Hermite.Hermite" via "Echelon_Form.Echelon_Form_Inverse" via "Echelon_Form.Echelon_Form_Det" via "Echelon_Form.Echelon_Form" via "Echelon_Form.Rings2" via "HOL-Analysis.Analysis")
### theory "HOL-Analysis.Poly_Roots"
### 0.145s elapsed time, 0.552s cpu time, 0.153s GC time
Loading theory "HOL-Analysis.Product_Vector" (required by "Draft.SNF_AlgorithmMoreTemplates" via "Draft.SNF_Algorithm" via "Draft.Smith_Normal_Form_JNF" via "Draft.SNF_Missing_Lemmas" via "Hermite.Hermite" via "Echelon_Form.Echelon_Form_Inverse" via "Echelon_Form.Echelon_Form_Det" via "Echelon_Form.Echelon_Form" via "Echelon_Form.Rings2" via "HOL-Analysis.Analysis" via "HOL-Analysis.Convex" via "HOL-Analysis.Affine" via "HOL-Analysis.Linear_Algebra" via "HOL-Analysis.Euclidean_Space")
### Missing patterns in function definition:
### max_list_non_empty [] = undefined
Found termination order: "length <*mlex*> {}"
locale module_prod
  fixes s1 :: "'a => 'b => 'b"
    and s2 :: "'a => 'c => 'c"
  assumes "module_prod s1 s2"
class comm_monoid_mult = ab_semigroup_mult + monoid_mult + dvd +
  assumes "mult_1": "!!a. (1::'a) * a = a"
class ordered_idom = ordered_semiring_strict + idom +
  assumes "zero_less_one": "(0::'a) < (1::'a)"
locale vector_space_prod
  fixes s1 :: "'a => 'b => 'b"  (infixr \<open>*a\<close> 75)
    and s2 :: "'a => 'c => 'c"  (infixr \<open>*b\<close> 75)
  assumes "vector_space_prod (*a) (*b)"
### Cannot skip proof of schematic goal statement
instantiation
  prod :: (real_vector, real_vector) real_vector
  scaleR_prod == scaleR :: real => 'a * 'b => 'a * 'b
### Cannot skip proof of schematic goal statement
instantiation
  prod :: (metric_space, metric_space) dist
  dist_prod == dist :: 'a * 'b => 'a * 'b => real
instantiation
  prod :: (uniformity, uniformity) uniformity
  uniformity_prod == uniformity :: (('a * 'b) * 'a * 'b) filter
instantiation
  prod :: (uniform_space, uniform_space) uniform_space
instantiation
  prod :: (metric_space, metric_space) uniformity_dist
instantiation
  prod :: (metric_space, metric_space) metric_space
instantiation
  prod :: (real_normed_vector, real_normed_vector) real_normed_vector
  sgn_prod == sgn :: 'a * 'b => 'a * 'b
  norm_prod == norm :: 'a * 'b => real
locale finite_dimensional_vector_space_prod
  fixes s1 :: "'a => 'b => 'b"  (infixr \<open>*a\<close> 75)
    and s2 :: "'a => 'c => 'c"  (infixr \<open>*b\<close> 75)
    and B1 :: "'b set"
    and B2 :: "'c set"
  assumes "finite_dimensional_vector_space_prod (*a) (*b) B1 B2"
### theory "HOL-Analysis.Product_Vector"
### 1.035s elapsed time, 4.035s cpu time, 0.708s GC time
Loading theory "HOL-Analysis.Elementary_Topology" (required by "Draft.SNF_AlgorithmMoreTemplates" via "Draft.SNF_Algorithm" via "Draft.Smith_Normal_Form_JNF" via "Draft.SNF_Missing_Lemmas" via "Hermite.Hermite" via "Echelon_Form.Echelon_Form_Inverse" via "Echelon_Form.Echelon_Form_Det" via "Echelon_Form.Echelon_Form" via "Echelon_Form.Rings2" via "HOL-Analysis.Analysis" via "HOL-Analysis.Connected" via "HOL-Analysis.Abstract_Topology_2")
### theory "Polynomial_Interpolation.Missing_Unsorted"
### 1.587s elapsed time, 6.170s cpu time, 1.147s GC time
Loading theory "HOL-Analysis.Euclidean_Space" (required by "Draft.SNF_AlgorithmMoreTemplates" via "Draft.SNF_Algorithm" via "Draft.Smith_Normal_Form_JNF" via "Draft.SNF_Missing_Lemmas" via "Hermite.Hermite" via "Echelon_Form.Echelon_Form_Inverse" via "Echelon_Form.Echelon_Form_Det" via "Echelon_Form.Echelon_Form" via "Echelon_Form.Rings2" via "HOL-Analysis.Analysis" via "HOL-Analysis.Convex" via "HOL-Analysis.Affine" via "HOL-Analysis.Linear_Algebra")
class topological_space = open +
  assumes "open_UNIV": "open UNIV"
  assumes "open_Int": "!!S T. [| open S; open T |] ==> open (S Int T)"
  assumes "open_Union": "!!K. Ball K open ==> open (\<Union> K)"
locale Group.comm_monoid
  fixes G :: "('a, 'b) monoid_scheme"  (structure)
  assumes "Group.comm_monoid G"
locale countable_basis
  fixes p :: "'a set => bool"
    and B :: "'a set set"
  assumes "countable_basis p B"
locale csemiring
  fixes R :: "('a, 'b) ring_scheme"  (structure)
  assumes "csemiring R"
locale cring
  fixes R :: "('a, 'b) ring_scheme"  (structure)
  assumes "cring R"
class second_countable_topology = topological_space +
  assumes
    "ex_countable_subbasis":
      "EX B. countable B & open = generate_topology B"
class euclidean_space = real_inner +
  fixes Basis :: "'a set"
  assumes "nonempty_Basis": "Basis ~= {}"
  assumes "finite_Basis": "finite Basis"
  assumes
    "inner_Basis":
      "!!u v.
          [| u : Basis; v : Basis |]
          ==> inner u v = (if u = v then 1 else 0)"
  assumes
    "euclidean_all_zero_iff":
      "!!x. (ALL u:Basis. inner x u = 0) = (x = (0::'a))"
class euclidean_semiring_gcd = normalization_euclidean_semiring + Gcd +
  assumes "gcd_eucl": "normalization_euclidean_semiring_class.gcd = gcd"
    and "lcm_eucl": "normalization_euclidean_semiring_class.lcm = lcm"
  assumes "Gcd_eucl": "normalization_euclidean_semiring_class.Gcd = Gcd"
    and "Lcm_eucl": "normalization_euclidean_semiring_class.Lcm = Lcm"
locale Group.comm_monoid
  fixes G :: "('a, 'b) monoid_scheme"  (structure)
  assumes "Group.comm_monoid G"
locale cring
  fixes R :: "('a, 'b) ring_scheme"  (structure)
  assumes "cring R"
### theory "Jordan_Normal_Form.Missing_Ring"
### 4.241s elapsed time, 16.527s cpu time, 2.744s GC time
Loading theory "HOL-Computational_Algebra.Polynomial" (required by "Draft.SNF_AlgorithmMoreTemplates" via "Draft.SNF_Algorithm" via "Draft.Smith_Normal_Form_JNF" via "Draft.SNF_Missing_Lemmas" via "Hermite.Hermite" via "Echelon_Form.Echelon_Form_Inverse" via "Echelon_Form.Echelon_Form_Det" via "Echelon_Form.Echelon_Form" via "Echelon_Form.Rings2" via "HOL-Computational_Algebra.Polynomial_Factorial")
instantiation
  real :: euclidean_space
  Basis_real == Basis :: real set
instantiation
  complex :: euclidean_space
  Basis_complex == Basis :: complex set
instantiation
  prod :: (real_inner, real_inner) real_inner
  inner_prod == inner :: 'a * 'b => 'a * 'b => real
instantiation
  prod :: (euclidean_space, euclidean_space) euclidean_space
  Basis_prod == Basis :: ('a * 'b) set
### Cannot skip proof of schematic goal statement
### Cannot skip proof of schematic goal statement
### theory "HOL-Analysis.Euclidean_Space"
### 2.791s elapsed time, 10.658s cpu time, 4.245s GC time
Loading theory "HOL-Analysis.Finite_Cartesian_Product" (required by "Draft.SNF_AlgorithmMoreTemplates" via "Draft.SNF_Algorithm" via "Draft.Smith_Normal_Form_JNF" via "Draft.SNF_Missing_Lemmas" via "Hermite.Hermite" via "Echelon_Form.Echelon_Form_Inverse" via "Echelon_Form.Echelon_Form_Det" via "Echelon_Form.Echelon_Form" via "Echelon_Form.Rings2" via "HOL-Analysis.Analysis" via "HOL-Analysis.Determinants" via "HOL-Analysis.Cartesian_Space")
### theory "HOL-Analysis.Elementary_Topology"
### 3.011s elapsed time, 11.518s cpu time, 4.390s GC time
Loading theory "HOL-Analysis.Linear_Algebra" (required by "Draft.SNF_AlgorithmMoreTemplates" via "Draft.SNF_Algorithm" via "Draft.Smith_Normal_Form_JNF" via "Draft.SNF_Missing_Lemmas" via "Hermite.Hermite" via "Echelon_Form.Echelon_Form_Inverse" via "Echelon_Form.Echelon_Form_Det" via "Echelon_Form.Echelon_Form" via "Echelon_Form.Rings2" via "HOL-Analysis.Analysis" via "HOL-Analysis.Convex" via "HOL-Analysis.Affine")
instantiation
  poly :: (zero) zero
  zero_poly == zero_class.zero :: 'a poly
consts
  Poly :: "'a list => 'a poly"
instantiation
  poly :: ({zero,equal}) equal
  equal_poly == equal_class.equal :: 'a poly => 'a poly => bool
instantiation
  poly :: (comm_monoid_add) comm_monoid_add
  plus_poly == plus :: 'a poly => 'a poly => 'a poly
class real_inner = real_normed_vector +
  fixes inner :: "'a => 'a => real"
  assumes "inner_commute": "!!x y. x \<bullet> y = y \<bullet> x"
    and
    "inner_add_left":
      "!!x y z. (x + y) \<bullet> z = x \<bullet> z + y \<bullet> z"
    and
    "inner_scaleR_left":
      "!!r x y. r *\<^sub>R x \<bullet> y = r * (x \<bullet> y)"
    and "inner_ge_zero": "!!x. 0 <= x \<bullet> x"
    and "inner_eq_zero_iff": "!!x. (x \<bullet> x = 0) = (x = (0::'a))"
    and "norm_eq_sqrt_inner": "!!x. norm x = sqrt (x \<bullet> x)"
instantiation
  poly :: (cancel_comm_monoid_add) cancel_comm_monoid_add
  minus_poly == minus :: 'a poly => 'a poly => 'a poly
instantiation
  poly :: (ab_group_add) ab_group_add
  uminus_poly == uminus :: 'a poly => 'a poly
Found termination order: "(%p. length (snd p)) <*mlex*> {}"
instantiation
  poly :: (comm_semiring_0) comm_semiring_0
  times_poly == times :: 'a poly => 'a poly => 'a poly
instantiation
  poly :: (comm_semiring_1) comm_semiring_1
  one_poly == one_class.one :: 'a poly
bundle vec_syntax
bundle no_vec_syntax
instantiation
  vec :: (zero, finite) zero
  zero_vec == zero_class.zero :: ('a, 'b) vec
instantiation
  vec :: (plus, finite) plus
  plus_vec == plus :: ('a, 'b) vec => ('a, 'b) vec => ('a, 'b) vec
instantiation
  vec :: (minus, finite) minus
  minus_vec == minus :: ('a, 'b) vec => ('a, 'b) vec => ('a, 'b) vec
instantiation
  vec :: (uminus, finite) uminus
  uminus_vec == uminus :: ('a, 'b) vec => ('a, 'b) vec
instantiation
  vec :: (times, finite) times
  times_vec == times :: ('a, 'b) vec => ('a, 'b) vec => ('a, 'b) vec
instantiation
  vec :: (one, finite) one
  one_vec == one_class.one :: ('a, 'b) vec
instantiation
  vec :: (ord, finite) ord
  less_eq_vec == less_eq :: ('a, 'b) vec => ('a, 'b) vec => bool
  less_vec == less :: ('a, 'b) vec => ('a, 'b) vec => bool
instantiation
  vec :: (real_vector, finite) real_vector
  scaleR_vec == scaleR :: real => ('a, 'b) vec => ('a, 'b) vec
instantiation
  vec :: (topological_space, finite) topological_space
  open_vec == open :: ('a, 'b) vec set => bool
### theory "HOL-Analysis.Linear_Algebra"
### 1.072s elapsed time, 4.185s cpu time, 0.598s GC time
Loading theory "HOL-Analysis.Affine" (required by "Draft.SNF_AlgorithmMoreTemplates" via "Draft.SNF_Algorithm" via "Draft.Smith_Normal_Form_JNF" via "Draft.SNF_Missing_Lemmas" via "Hermite.Hermite" via "Echelon_Form.Echelon_Form_Inverse" via "Echelon_Form.Echelon_Form_Det" via "Echelon_Form.Echelon_Form" via "Echelon_Form.Rings2" via "HOL-Analysis.Analysis" via "HOL-Analysis.Convex")
instantiation
  vec :: (metric_space, finite) dist
  dist_vec == dist :: ('a, 'b) vec => ('a, 'b) vec => real
instantiation
  poly :: (linordered_idom) linordered_idom
  sgn_poly == sgn :: 'a poly => 'a poly
  abs_poly == abs :: 'a poly => 'a poly
  less_eq_poly == less_eq :: 'a poly => 'a poly => bool
  less_poly == less :: 'a poly => 'a poly => bool
instantiation
  vec :: (metric_space, finite) uniformity_dist
  uniformity_vec == uniformity :: (('a, 'b) vec * ('a, 'b) vec) filter
instantiation
  vec :: (metric_space, finite) metric_space
instantiation
  vec :: (real_normed_vector, finite) real_normed_vector
  sgn_vec == sgn :: ('a, 'b) vec => ('a, 'b) vec
  norm_vec == norm :: ('a, 'b) vec => real
instantiation
  vec :: (real_inner, finite) real_inner
  inner_vec == inner :: ('a, 'b) vec => ('a, 'b) vec => real
instantiation
  vec :: (euclidean_space, finite) euclidean_space
  Basis_vec == Basis :: ('a, 'b) vec set
### theory "HOL-Analysis.Affine"
### 0.537s elapsed time, 2.056s cpu time, 0.390s GC time
Loading theory "HOL-Analysis.Convex" (required by "Draft.SNF_AlgorithmMoreTemplates" via "Draft.SNF_Algorithm" via "Draft.Smith_Normal_Form_JNF" via "Draft.SNF_Missing_Lemmas" via "Hermite.Hermite" via "Echelon_Form.Echelon_Form_Inverse" via "Echelon_Form.Echelon_Form_Det" via "Echelon_Form.Echelon_Form" via "Echelon_Form.Rings2" via "HOL-Analysis.Analysis")
Found termination order: "(%p. length (snd p)) <*mlex*> {}"
### theory "HOL-Analysis.Finite_Cartesian_Product"
### 1.831s elapsed time, 7.109s cpu time, 1.109s GC time
Loading theory "HOL-Analysis.Cartesian_Space" (required by "Draft.SNF_AlgorithmMoreTemplates" via "Draft.SNF_Algorithm" via "Draft.Smith_Normal_Form_JNF" via "Draft.SNF_Missing_Lemmas" via "Hermite.Hermite" via "Echelon_Form.Echelon_Form_Inverse" via "Echelon_Form.Echelon_Form_Det" via "Echelon_Form.Echelon_Form" via "Echelon_Form.Rings2" via "HOL-Analysis.Analysis" via "HOL-Analysis.Determinants")
Proofs for inductive predicate(s) "algebraic_int"
  Proving monotonicity ...
instantiation
  poly :: (idom_divide) idom_divide
  divide_poly == divide :: 'a poly => 'a poly => 'a poly
Found termination order:
  "(%p. size (snd (snd (snd (snd (snd p)))))) <*mlex*> {}"
Found termination order:
  "(%p. size (snd (snd (snd (snd (snd p)))))) <*mlex*> {}"
instantiation
  poly :: ({idom_divide,semidom_divide_unit_factor}) normalization_semidom
  normalize_poly == normalize :: 'a poly => 'a poly
  unit_factor_poly == unit_factor :: 'a poly => 'a poly
### theory "HOL-Analysis.Convex"
### 2.191s elapsed time, 8.188s cpu time, 4.760s GC time
Loading theory "HOL-Library.BigO" (required by "Draft.SNF_AlgorithmMoreTemplates" via "Draft.ExtrEqs")
locale linear_first_finite_dimensional_vector_space
  fixes scaleB :: "'a => 'b => 'b"  (infixr \<open>*b\<close> 75)
    and scaleC :: "'a => 'c => 'c"  (infixr \<open>*c\<close> 75)
    and BasisB :: "'b set"
    and f :: "'b => 'c"
  assumes "linear_first_finite_dimensional_vector_space (*b) (*c) BasisB f"
### theory "HOL-Analysis.Cartesian_Space"
### 2.879s elapsed time, 10.878s cpu time, 5.044s GC time
Loading theory "HOL-Analysis.Determinants" (required by "Draft.SNF_AlgorithmMoreTemplates" via "Draft.SNF_Algorithm" via "Draft.Smith_Normal_Form_JNF" via "Draft.SNF_Missing_Lemmas" via "Hermite.Hermite" via "Echelon_Form.Echelon_Form_Inverse" via "Echelon_Form.Echelon_Form_Det" via "Echelon_Form.Echelon_Form" via "Echelon_Form.Rings2" via "HOL-Analysis.Analysis")
### theory "HOL-Library.BigO"
### 0.838s elapsed time, 3.255s cpu time, 0.394s GC time
Loading theory "Draft.ExtrEqs" (required by "Draft.SNF_AlgorithmMoreTemplates")
class field_unit_factor = field + unit_factor +
  assumes "unit_factor_field": "unit_factor = id"
Proofs for inductive predicate(s) "eucl_rel_poly"
  Proving monotonicity ...
instantiation
  poly :: (field) semidom_modulo
  modulo_poly == modulo :: 'a poly => 'a poly => 'a poly
Found termination order: "(%p. length (snd p)) <*mlex*> {}"
val eqpattern =
   Pattern
    (
       Const ("HOL.Trueprop", "bool => prop") $
         (Const ("HOL.eq", "?'a => ?'a => bool") $
           Var (("_dummy_", 1), "?'a") $ Var (("_dummy_", 2), "?'a"))
       ):
   term Find_Theorems.criterion
val badeqpattern = Pattern (Const ("Pure.eq", "?'a => ?'a => prop")):
   term Find_Theorems.criterion
val undefpattern =
   Pattern
    (
       Const ("HOL.Trueprop", "bool => prop") $
         (Const ("HOL.eq", "?'a => ?'a => bool") $
           Var (("_dummy_", 1), "?'a") $ Const ("HOL.undefined", "?'a"))
       ):
   term Find_Theorems.criterion
val thmpattern =
   Pattern
    (Const ("HOL.Trueprop", "bool => prop") $ Var (("_dummy_", 1), "bool")):
   term Find_Theorems.criterion
val badnames =
   ["*nitpick*", "*Nitpick*", "*full_exhaustive*", "*_def*", "Enum.finite*",
    "*Quickcheck*", "ATP*", "*Nunchaku*", "*Code*", "*BNF*", "*SMT*",
    "*.*.*"]:
   string list
val unwanted_names =
   [(false, Name "*nitpick*"), (false, Name "*Nitpick*"),
    (false, Name "*full_exhaustive*"), (false, Name "*_def*"),
    (false, Name "Enum.finite*"), (false, Name "*Quickcheck*"),
    (false, Name "ATP*"), (false, Name "*Nunchaku*"),
    (false, Name "*Code*"), (false, Name "*BNF*"), (false, Name "*SMT*"),
    (false, Name "*.*.*")]:
   (bool * term Find_Theorems.criterion) list
val has_vars = fn: term -> bool
val get_all_eqs = fn: string -> Proof.context -> (string * thm) list
val get_all_thms = fn: string -> Proof.context -> (string * thm) list
val get_noneq_thms = fn: string -> Proof.context -> (string * thm) list
val template_eqs = fn:
   string -> Proof.context -> (string * thm * template) list
val template_thms = fn:
   string -> Proof.context -> (string * thm * template) list
### theory "Draft.ExtrEqs"
### 0.716s elapsed time, 2.791s cpu time, 0.348s GC time
Loading theory "HOL-Library.Complex_Order" (required by "Draft.SNF_AlgorithmMoreTemplates" via "Draft.SNF_Algorithm" via "Draft.Smith_Normal_Form_JNF" via "Draft.SNF_Missing_Lemmas" via "Hermite.Hermite" via "Echelon_Form.Echelon_Form_Inverse" via "Echelon_Form.Echelon_Form_Det" via "Echelon_Form.Echelon_Form" via "Echelon_Form.Rings2" via "HOL-Analysis.Analysis" via "HOL-Analysis.Infinite_Sum")
instantiation
  complex :: order
  less_eq_complex == less_eq :: complex => complex => bool
  less_complex == less :: complex => complex => bool
### theory "HOL-Library.Complex_Order"
### 0.075s elapsed time, 0.281s cpu time, 0.045s GC time
Loading theory "Jordan_Normal_Form.Conjugate" (required by "Draft.SNF_AlgorithmMoreTemplates" via "Draft.SNF_Algorithm" via "Draft.Smith_Normal_Form_JNF" via "Draft.SNF_Missing_Lemmas" via "Draft.Mod_Type_Connect" via "Perron_Frobenius.HMA_Connect" via "Jordan_Normal_Form.Spectral_Radius" via "Jordan_Normal_Form.Jordan_Normal_Form_Existence" via "Jordan_Normal_Form.Jordan_Normal_Form" via "Jordan_Normal_Form.Matrix")
Found termination order: "(%p. size (snd (snd (snd (snd p))))) <*mlex*> {}"
class conjugate = type +
  fixes conjugate :: "'a => 'a"
  assumes "conjugate_id": "!!a. conjugate (conjugate a) = a"
    and
    "conjugate_cancel_iff": "!!a b. (conjugate a = conjugate b) = (a = b)"
### theory "HOL-Analysis.Determinants"
### 0.982s elapsed time, 3.823s cpu time, 0.479s GC time
Loading theory "HOL-Library.Discrete" (required by "Draft.SNF_AlgorithmMoreTemplates" via "Draft.SNF_Algorithm" via "Draft.Smith_Normal_Form_JNF" via "Draft.SNF_Missing_Lemmas" via "Hermite.Hermite" via "Echelon_Form.Echelon_Form_Inverse" via "Echelon_Form.Echelon_Form_Det" via "Echelon_Form.Echelon_Form" via "Echelon_Form.Rings2" via "HOL-Analysis.Analysis" via "HOL-Analysis.Derivative" via "HOL-Analysis.Bounded_Linear_Function" via "HOL-Analysis.Uniform_Limit" via "HOL-Analysis.Summation_Tests")
### Rewrite rule not in simpset:
### Wellfounded.accp log_rel ?n1 ==>
### log ?n1 == if ?n1 < 2 then 0 else Suc (log (?n1 div 2))
Found termination order: "size <*mlex*> {}"
Found termination order: "(%p. size (snd (snd (snd p)))) <*mlex*> {}"
### theory "HOL-Library.Discrete"
### 0.176s elapsed time, 0.684s cpu time, 0.079s GC time
Loading theory "HOL-Library.Indicator_Function" (required by "Draft.SNF_AlgorithmMoreTemplates" via "Draft.SNF_Algorithm" via "Draft.Smith_Normal_Form_JNF" via "Draft.SNF_Missing_Lemmas" via "Hermite.Hermite" via "Echelon_Form.Echelon_Form_Inverse" via "Echelon_Form.Echelon_Form_Det" via "Echelon_Form.Echelon_Form" via "Echelon_Form.Rings2" via "HOL-Analysis.Analysis" via "HOL-Analysis.Connected" via "HOL-Analysis.Abstract_Topology_2")
class conjugatable_ring = conjugate + ring +
  assumes
    "conjugate_dist_mul":
      "!!a b. conjugate (a * b) = conjugate a * conjugate b"
    and
    "conjugate_dist_add":
      "!!a b. conjugate (a + b) = conjugate a + conjugate b"
    and "conjugate_neg": "!!a. conjugate (- a) = - conjugate a"
    and "conjugate_zero": "conjugate (0::'a) = (0::'a)"
Found termination order: "(%p. size (snd (snd (snd p)))) <*mlex*> {}"
Found termination order: "(%p. size (snd (snd p))) <*mlex*> {}"
### theory "HOL-Library.Indicator_Function"
### 0.464s elapsed time, 1.775s cpu time, 0.274s GC time
Loading theory "HOL-Analysis.Abstract_Topology_2" (required by "Draft.SNF_AlgorithmMoreTemplates" via "Draft.SNF_Algorithm" via "Draft.Smith_Normal_Form_JNF" via "Draft.SNF_Missing_Lemmas" via "Hermite.Hermite" via "Echelon_Form.Echelon_Form_Inverse" via "Echelon_Form.Echelon_Form_Det" via "Echelon_Form.Echelon_Form" via "Echelon_Form.Rings2" via "HOL-Analysis.Analysis" via "HOL-Analysis.Connected")
Found termination order: "(%p. size (snd (snd (snd (snd p))))) <*mlex*> {}"
### theory "HOL-Computational_Algebra.Polynomial"
### 8.549s elapsed time, 32.657s cpu time, 10.763s GC time
Loading theory "HOL-Computational_Algebra.Fundamental_Theorem_Algebra" (required by "Draft.SNF_AlgorithmMoreTemplates" via "Draft.SNF_Algorithm" via "Draft.Smith_Normal_Form_JNF" via "Draft.SNF_Missing_Lemmas" via "Draft.Mod_Type_Connect" via "Perron_Frobenius.HMA_Connect" via "Jordan_Normal_Form.Spectral_Radius" via "Jordan_Normal_Form.Jordan_Normal_Form_Existence" via "Jordan_Normal_Form.Jordan_Normal_Form" via "Jordan_Normal_Form.Char_Poly" via "Polynomial_Factorization.Fundamental_Theorem_Algebra_Factorized")
### theory "HOL-Computational_Algebra.Fundamental_Theorem_Algebra"
### 0.322s elapsed time, 1.221s cpu time, 0.265s GC time
Loading theory "HOL-Library.Liminf_Limsup" (required by "Draft.SNF_AlgorithmMoreTemplates" via "Draft.SNF_Algorithm" via "Draft.Smith_Normal_Form_JNF" via "Draft.SNF_Missing_Lemmas" via "Hermite.Hermite" via "Echelon_Form.Echelon_Form_Inverse" via "Echelon_Form.Echelon_Form_Det" via "Echelon_Form.Echelon_Form" via "Echelon_Form.Rings2" via "HOL-Analysis.Analysis" via "HOL-Analysis.Derivative" via "HOL-Analysis.Bounded_Linear_Function" via "HOL-Analysis.Uniform_Limit" via "HOL-Analysis.Summation_Tests" via "HOL-Library.Extended_Real")
class conjugatable_ordered_ring = conjugatable_ring +
  ordered_comm_monoid_add +
  assumes "conjugate_square_positive": "!!a. (0::'a) <= a * conjugate a"
### theory "HOL-Library.Liminf_Limsup"
### 0.584s elapsed time, 2.170s cpu time, 0.415s GC time
Loading theory "HOL-Library.Nonpos_Ints" (required by "Draft.SNF_AlgorithmMoreTemplates" via "Draft.SNF_Algorithm" via "Draft.Smith_Normal_Form_JNF" via "Draft.SNF_Missing_Lemmas" via "Hermite.Hermite" via "Echelon_Form.Echelon_Form_Inverse" via "Echelon_Form.Echelon_Form_Det" via "Echelon_Form.Echelon_Form" via "Echelon_Form.Rings2" via "HOL-Analysis.Analysis" via "HOL-Analysis.Ball_Volume" via "HOL-Analysis.Gamma_Function" via "HOL-Analysis.Harmonic_Numbers" via "HOL-Analysis.Complex_Transcendental" via "HOL-Analysis.Complex_Analysis_Basics")
### theory "HOL-Computational_Algebra.Euclidean_Algorithm"
### 12.338s elapsed time, 47.223s cpu time, 13.527s GC time
Loading theory "HOL-Computational_Algebra.Normalized_Fraction" (required by "Draft.SNF_AlgorithmMoreTemplates" via "Draft.SNF_Algorithm" via "Draft.Smith_Normal_Form_JNF" via "Draft.SNF_Missing_Lemmas" via "Hermite.Hermite" via "Echelon_Form.Echelon_Form_Inverse" via "Echelon_Form.Echelon_Form_Det" via "Echelon_Form.Echelon_Form" via "Echelon_Form.Rings2" via "HOL-Computational_Algebra.Polynomial_Factorial")
### theory "HOL-Analysis.Abstract_Topology_2"
### 1.543s elapsed time, 5.797s cpu time, 1.098s GC time
Loading theory "HOL-Computational_Algebra.Primes" (required by "Draft.SNF_AlgorithmMoreTemplates" via "Draft.SNF_Algorithm" via "Draft.Smith_Normal_Form_JNF" via "Draft.SNF_Missing_Lemmas" via "Hermite.Hermite" via "Echelon_Form.Echelon_Form_Inverse" via "Echelon_Form.Echelon_Form_Det" via "Echelon_Form.Echelon_Form" via "Echelon_Form.Rings2" via "HOL-Analysis.Analysis" via "HOL-Analysis.Jordan_Curve" via "HOL-Analysis.Arcwise_Connected")
### theory "HOL-Library.Nonpos_Ints"
### 14.950s elapsed time, 50.251s cpu time, 49.593s GC time
Loading theory "HOL-Computational_Algebra.Field_as_Ring" (required by "Draft.SNF_AlgorithmMoreTemplates" via "Draft.SNF_Algorithm" via "Draft.Smith_Normal_Form_JNF" via "Draft.SNF_Missing_Lemmas" via "Hermite.Hermite" via "Echelon_Form.Examples_Echelon_Form_Abstract")
### theory "HOL-Computational_Algebra.Primes"
### 15.053s elapsed time, 50.687s cpu time, 49.558s GC time
Loading theory "HOL-Computational_Algebra.Formal_Power_Series" (required by "Draft.SNF_AlgorithmMoreTemplates" via "Draft.SNF_Algorithm" via "Draft.Smith_Normal_Form_JNF" via "Draft.SNF_Missing_Lemmas" via "Hermite.Hermite" via "Echelon_Form.Echelon_Form_Inverse" via "Echelon_Form.Echelon_Form_Det" via "Echelon_Form.Echelon_Form" via "Echelon_Form.Rings2" via "HOL-Analysis.Analysis" via "HOL-Analysis.FPS_Convergence")
locale fract_as_normalized_quot
### theory "HOL-Computational_Algebra.Normalized_Fraction"
### 15.330s elapsed time, 51.755s cpu time, 49.743s GC time
Loading theory "HOL-Computational_Algebra.Polynomial_Factorial" (required by "Draft.SNF_AlgorithmMoreTemplates" via "Draft.SNF_Algorithm" via "Draft.Smith_Normal_Form_JNF" via "Draft.SNF_Missing_Lemmas" via "Hermite.Hermite" via "Echelon_Form.Echelon_Form_Inverse" via "Echelon_Form.Echelon_Form_Det" via "Echelon_Form.Echelon_Form" via "Echelon_Form.Rings2")
class field = division_ring + idom_divide +
  assumes "field_inverse": "!!a. a ~= (0::'a) ==> inverse a * a = (1::'a)"
  assumes "field_divide_inverse": "!!a b. a / b = a * inverse b"
  assumes "field_inverse_zero": "inverse (0::'a) = (0::'a)"
instantiation
  fps :: (zero) zero
  zero_fps == zero_class.zero :: 'a fps
instantiation
  fps :: ({one,zero}) one
  one_fps == one_class.one :: 'a fps
instantiation
  fps :: (plus) plus
  plus_fps == plus :: 'a fps => 'a fps => 'a fps
instantiation
  fps :: (minus) minus
  minus_fps == minus :: 'a fps => 'a fps => 'a fps
instantiation
  fps :: (uminus) uminus
  uminus_fps == uminus :: 'a fps => 'a fps
instantiation
  fps :: ({comm_monoid_add,times}) times
  times_fps == times :: 'a fps => 'a fps => 'a fps
instantiation
  complex :: conjugatable_ordered_field
  conjugate_complex == conjugate :: complex => complex
instantiation
  real :: conjugatable_ordered_field
  conjugate_real == conjugate :: real => real
instantiation
  rat :: conjugatable_ordered_field
  conjugate_rat == conjugate :: rat => rat
instantiation
  int :: conjugatable_ordered_ring
  conjugate_int == conjugate :: int => int
instantiation
  real ::
    {normalization_euclidean_semiring,unique_euclidean_ring,normalization_semidom_multiplicative}
  division_segment_real == division_segment :: real => real
  normalize_real == normalize :: real => real
  unit_factor_real == unit_factor :: real => real
  euclidean_size_real == euclidean_size :: real => nat
  modulo_real == modulo :: real => real => real
### theory "Jordan_Normal_Form.Conjugate"
### 18.121s elapsed time, 62.440s cpu time, 51.292s GC time
Loading theory "HOL-Analysis.Connected" (required by "Draft.SNF_AlgorithmMoreTemplates" via "Draft.SNF_Algorithm" via "Draft.Smith_Normal_Form_JNF" via "Draft.SNF_Missing_Lemmas" via "Hermite.Hermite" via "Echelon_Form.Echelon_Form_Inverse" via "Echelon_Form.Echelon_Form_Det" via "Echelon_Form.Echelon_Form" via "Echelon_Form.Rings2" via "HOL-Analysis.Analysis")
### Cannot skip proof of schematic goal statement
instantiation
  real :: euclidean_ring_gcd
  Gcd_real == Gcd :: real set => real
  Lcm_real == Lcm :: real set => real
  gcd_real == gcd :: real => real => real
  lcm_real == lcm :: real => real => real
instantiation
  rat ::
    {normalization_euclidean_semiring,unique_euclidean_ring,normalization_semidom_multiplicative}
  division_segment_rat == division_segment :: rat => rat
  normalize_rat == normalize :: rat => rat
  unit_factor_rat == unit_factor :: rat => rat
  euclidean_size_rat == euclidean_size :: rat => nat
  modulo_rat == modulo :: rat => rat => rat
instantiation
  rat :: euclidean_ring_gcd
  Gcd_rat == Gcd :: rat set => rat
  Lcm_rat == Lcm :: rat set => rat
  gcd_rat == gcd :: rat => rat => rat
  lcm_rat == lcm :: rat => rat => rat
instantiation
  complex ::
    {normalization_euclidean_semiring,unique_euclidean_ring,normalization_semidom_multiplicative}
  division_segment_complex == division_segment :: complex => complex
  normalize_complex == normalize :: complex => complex
  unit_factor_complex == unit_factor :: complex => complex
  euclidean_size_complex == euclidean_size :: complex => nat
  modulo_complex == modulo :: complex => complex => complex
instantiation
  complex :: euclidean_ring_gcd
  Gcd_complex == Gcd :: complex set => complex
  Lcm_complex == Lcm :: complex set => complex
  gcd_complex == gcd :: complex => complex => complex
  lcm_complex == lcm :: complex => complex => complex
### theory "HOL-Computational_Algebra.Field_as_Ring"
### 1.248s elapsed time, 4.923s cpu time, 0.478s GC time
Loading theory "HOL-Analysis.Elementary_Metric_Spaces" (required by "Draft.SNF_AlgorithmMoreTemplates" via "Draft.SNF_Algorithm" via "Draft.Smith_Normal_Form_JNF" via "Draft.SNF_Missing_Lemmas" via "Hermite.Hermite" via "Echelon_Form.Echelon_Form_Inverse" via "Echelon_Form.Echelon_Form_Det" via "Echelon_Form.Echelon_Form" via "Echelon_Form.Rings2" via "HOL-Analysis.Analysis" via "HOL-Analysis.Elementary_Normed_Spaces")
instantiation
  fps :: (zero) unit_factor
  unit_factor_fps == unit_factor :: 'a fps => 'a fps
### theory "HOL-Analysis.Connected"
### 0.320s elapsed time, 1.266s cpu time, 0.119s GC time
Loading theory "HOL-Analysis.Function_Topology" (required by "Draft.SNF_AlgorithmMoreTemplates" via "Draft.SNF_Algorithm" via "Draft.Smith_Normal_Form_JNF" via "Draft.SNF_Missing_Lemmas" via "Hermite.Hermite" via "Echelon_Form.Echelon_Form_Inverse" via "Echelon_Form.Echelon_Form_Det" via "Echelon_Form.Echelon_Form" via "Echelon_Form.Rings2" via "HOL-Analysis.Analysis" via "HOL-Analysis.Derivative" via "HOL-Analysis.Bounded_Linear_Function")
instantiation
  fps :: ({minus,zero}) dist
  dist_fps == dist :: 'a fps => 'a fps => real
instantiation
  fps :: (group_add) metric_space
  uniformity_fps == uniformity :: ('a fps * 'a fps) filter
  open_fps == open :: 'a fps set => bool
instantiation
  poly :: ({factorial_ring_gcd,semiring_gcd_mult_normalize})
    factorial_ring_gcd
  Gcd_poly == Gcd :: 'a poly set => 'a poly
  Lcm_poly == Lcm :: 'a poly set => 'a poly
  gcd_poly == gcd :: 'a poly => 'a poly => 'a poly
  lcm_poly == lcm :: 'a poly => 'a poly => 'a poly
instantiation
  poly :: ({factorial_ring_gcd,field,semiring_gcd_mult_normalize})
    {normalization_euclidean_semiring,unique_euclidean_ring}
  division_segment_poly == division_segment :: 'a poly => 'a poly
  euclidean_size_poly == euclidean_size :: 'a poly => nat
Found termination order: "(%p. size (snd (snd p))) <*mlex*> {}"
### theory "HOL-Computational_Algebra.Polynomial_Factorial"
### 1.162s elapsed time, 4.593s cpu time, 0.441s GC time
Loading theory "Polynomial_Interpolation.Missing_Polynomial" (required by "Draft.SNF_AlgorithmMoreTemplates" via "Draft.SNF_Algorithm" via "Draft.Smith_Normal_Form_JNF" via "Draft.SNF_Missing_Lemmas" via "Draft.Mod_Type_Connect" via "Perron_Frobenius.HMA_Connect" via "Jordan_Normal_Form.Spectral_Radius" via "Jordan_Normal_Form.Jordan_Normal_Form_Existence" via "Jordan_Normal_Form.Jordan_Normal_Form" via "Jordan_Normal_Form.Char_Poly" via "Polynomial_Factorization.Fundamental_Theorem_Algebra_Factorized" via "Polynomial_Factorization.Order_Polynomial")
Found termination order: "(%p. size (snd (snd p))) <*mlex*> {}"
instantiation
  fps :: ({inverse,comm_monoid_add,times,uminus}) inverse
  inverse_fps == inverse :: 'a fps => 'a fps
  divide_fps == divide :: 'a fps => 'a fps => 'a fps
instantiation
  fun :: (type, topological_space) topological_space
  open_fun == open :: ('a => 'b) set => bool
### theory "HOL-Analysis.Function_Topology"
### 0.794s elapsed time, 3.135s cpu time, 0.474s GC time
Loading theory "HOL-Analysis.Product_Topology" (required by "Draft.SNF_AlgorithmMoreTemplates" via "Draft.SNF_Algorithm" via "Draft.Smith_Normal_Form_JNF" via "Draft.SNF_Missing_Lemmas" via "Hermite.Hermite" via "Echelon_Form.Echelon_Form_Inverse" via "Echelon_Form.Echelon_Form_Det" via "Echelon_Form.Echelon_Form" via "Echelon_Form.Rings2" via "HOL-Analysis.Analysis" via "HOL-Analysis.Weierstrass_Theorems" via "HOL-Analysis.Path_Connected" via "HOL-Analysis.T1_Spaces")
instantiation
  fps :: ({inverse,uminus,comm_semiring_1}) modulo
  modulo_fps == modulo :: 'a fps => 'a fps => 'a fps
instantiation
  fps :: (field) normalization_semidom_multiplicative
  normalize_fps == normalize :: 'a fps => 'a fps
instantiation
  fps :: (field) euclidean_ring_cancel
  euclidean_size_fps == euclidean_size :: 'a fps => nat
class mult_zero = times + zero +
  assumes "mult_zero_left": "!!a. (0::'a) * a = (0::'a)"
  assumes "mult_zero_right": "!!a. a * (0::'a) = (0::'a)"
instantiation
  fps :: (field) euclidean_ring_gcd
  Gcd_fps == Gcd :: 'a fps set => 'a fps
  Lcm_fps == Lcm :: 'a fps set => 'a fps
  gcd_fps == gcd :: 'a fps => 'a fps => 'a fps
  lcm_fps == lcm :: 'a fps => 'a fps => 'a fps
class heine_borel = metric_space +
  assumes
    "bounded_imp_convergent_subsequence":
      "!!f. bounded (range f) ==>
            EX l r. strict_mono r & (f o r) \<longlonglongrightarrow> l"
### theory "HOL-Analysis.Product_Topology"
### 0.310s elapsed time, 1.214s cpu time, 0.240s GC time
Loading theory "HOL-Analysis.T1_Spaces" (required by "Draft.SNF_AlgorithmMoreTemplates" via "Draft.SNF_Algorithm" via "Draft.Smith_Normal_Form_JNF" via "Draft.SNF_Missing_Lemmas" via "Hermite.Hermite" via "Echelon_Form.Echelon_Form_Inverse" via "Echelon_Form.Echelon_Form_Det" via "Echelon_Form.Echelon_Form" via "Echelon_Form.Rings2" via "HOL-Analysis.Analysis" via "HOL-Analysis.Weierstrass_Theorems" via "HOL-Analysis.Path_Connected")
Found termination order: "size_list (%p. size (fst p)) <*mlex*> {}"
Found termination order: "(%p. size (fst p)) <*mlex*> {}"
### theory "Polynomial_Interpolation.Missing_Polynomial"
### 1.048s elapsed time, 4.133s cpu time, 0.658s GC time
Loading theory "Polynomial_Factorization.Order_Polynomial" (required by "Draft.SNF_AlgorithmMoreTemplates" via "Draft.SNF_Algorithm" via "Draft.Smith_Normal_Form_JNF" via "Draft.SNF_Missing_Lemmas" via "Draft.Mod_Type_Connect" via "Perron_Frobenius.HMA_Connect" via "Jordan_Normal_Form.Spectral_Radius" via "Jordan_Normal_Form.Jordan_Normal_Form_Existence" via "Jordan_Normal_Form.Jordan_Normal_Form" via "Jordan_Normal_Form.Char_Poly" via "Polynomial_Factorization.Fundamental_Theorem_Algebra_Factorized")
### theory "HOL-Analysis.T1_Spaces"
### 0.316s elapsed time, 1.239s cpu time, 0.207s GC time
Loading theory "HOL-Analysis.Lindelof_Spaces" (required by "Draft.SNF_AlgorithmMoreTemplates" via "Draft.SNF_Algorithm" via "Draft.Smith_Normal_Form_JNF" via "Draft.SNF_Missing_Lemmas" via "Hermite.Hermite" via "Echelon_Form.Echelon_Form_Inverse" via "Echelon_Form.Echelon_Form_Det" via "Echelon_Form.Echelon_Form" via "Echelon_Form.Rings2" via "HOL-Analysis.Analysis")
### theory "Polynomial_Factorization.Order_Polynomial"
### 0.116s elapsed time, 0.452s cpu time, 0.102s GC time
Loading theory "Polynomial_Factorization.Fundamental_Theorem_Algebra_Factorized" (required by "Draft.SNF_AlgorithmMoreTemplates" via "Draft.SNF_Algorithm" via "Draft.Smith_Normal_Form_JNF" via "Draft.SNF_Missing_Lemmas" via "Draft.Mod_Type_Connect" via "Perron_Frobenius.HMA_Connect" via "Jordan_Normal_Form.Spectral_Radius" via "Jordan_Normal_Form.Jordan_Normal_Form_Existence" via "Jordan_Normal_Form.Jordan_Normal_Form" via "Jordan_Normal_Form.Char_Poly")
### theory "HOL-Analysis.Lindelof_Spaces"
### 0.102s elapsed time, 0.414s cpu time, 0.000s GC time
Loading theory "HOL-Library.Order_Continuity" (required by "Draft.SNF_AlgorithmMoreTemplates" via "Draft.SNF_Algorithm" via "Draft.Smith_Normal_Form_JNF" via "Draft.SNF_Missing_Lemmas" via "Hermite.Hermite" via "Echelon_Form.Echelon_Form_Inverse" via "Echelon_Form.Echelon_Form_Det" via "Echelon_Form.Echelon_Form" via "Echelon_Form.Rings2" via "HOL-Analysis.Analysis" via "HOL-Analysis.Derivative" via "HOL-Analysis.Bounded_Linear_Function" via "HOL-Analysis.Uniform_Limit" via "HOL-Analysis.Summation_Tests" via "HOL-Library.Extended_Real" via "HOL-Library.Extended_Nat")
### theory "Polynomial_Factorization.Fundamental_Theorem_Algebra_Factorized"
### 0.359s elapsed time, 1.410s cpu time, 0.217s GC time
Loading theory "HOL-Library.Periodic_Fun" (required by "Draft.SNF_AlgorithmMoreTemplates" via "Draft.SNF_Algorithm" via "Draft.Smith_Normal_Form_JNF" via "Draft.SNF_Missing_Lemmas" via "Hermite.Hermite" via "Echelon_Form.Echelon_Form_Inverse" via "Echelon_Form.Echelon_Form_Det" via "Echelon_Form.Echelon_Form" via "Echelon_Form.Rings2" via "HOL-Analysis.Analysis" via "HOL-Analysis.Ball_Volume" via "HOL-Analysis.Gamma_Function" via "HOL-Analysis.Harmonic_Numbers" via "HOL-Analysis.Complex_Transcendental")
locale periodic_fun
  fixes f :: "'a => 'b"
    and g :: "'a => 'a => 'a"
    and gm :: "'a => 'a => 'a"
    and g1 :: "'a => 'a"
    and gn1 :: "'a => 'a"
  assumes "periodic_fun f g gm g1 gn1"
locale periodic_fun_simple
  fixes f :: "'a => 'b"
    and period :: "'a"
  assumes "periodic_fun_simple f period"
locale periodic_fun_simple'
  fixes f :: "'a => 'b"
  assumes "periodic_fun_simple' f"
Found termination order: "(%p. size (snd p)) <*mlex*> {}"
### theory "HOL-Library.Periodic_Fun"
### 0.173s elapsed time, 0.675s cpu time, 0.077s GC time
Loading theory "HOL-Library.Sum_of_Squares" (required by "Draft.SNF_AlgorithmMoreTemplates" via "Draft.SNF_Algorithm" via "Draft.Smith_Normal_Form_JNF" via "Draft.SNF_Missing_Lemmas" via "Hermite.Hermite" via "Echelon_Form.Echelon_Form_Inverse" via "Echelon_Form.Echelon_Form_Det" via "Echelon_Form.Echelon_Form" via "Echelon_Form.Rings2" via "HOL-Analysis.Analysis" via "HOL-Analysis.Norm_Arith")
### theory "HOL-Analysis.Elementary_Metric_Spaces"
### 2.070s elapsed time, 8.147s cpu time, 1.215s GC time
Loading theory "HOL-Analysis.Elementary_Normed_Spaces" (required by "Draft.SNF_AlgorithmMoreTemplates" via "Draft.SNF_Algorithm" via "Draft.Smith_Normal_Form_JNF" via "Draft.SNF_Missing_Lemmas" via "Hermite.Hermite" via "Echelon_Form.Echelon_Form_Inverse" via "Echelon_Form.Echelon_Form_Det" via "Echelon_Form.Echelon_Form" via "Echelon_Form.Rings2" via "HOL-Analysis.Analysis")
Found termination order: "(%p. size (snd (snd p))) <*mlex*> {}"
### theory "HOL-Library.Order_Continuity"
### 0.662s elapsed time, 2.599s cpu time, 0.404s GC time
Loading theory "HOL-Analysis.Function_Metric" (required by "Draft.SNF_AlgorithmMoreTemplates" via "Draft.SNF_Algorithm" via "Draft.Smith_Normal_Form_JNF" via "Draft.SNF_Missing_Lemmas" via "Hermite.Hermite" via "Echelon_Form.Echelon_Form_Inverse" via "Echelon_Form.Echelon_Form_Det" via "Echelon_Form.Echelon_Form" via "Echelon_Form.Rings2" via "HOL-Analysis.Analysis")
instantiation
  fun :: (countable, metric_space) metric_space
  dist_fun == dist :: ('a => 'b) => ('a => 'b) => real
  uniformity_fun == uniformity :: (('a => 'b) * ('a => 'b)) filter
### theory "HOL-Analysis.Function_Metric"
### 0.366s elapsed time, 1.437s cpu time, 0.176s GC time
Loading theory "HOL-Library.Extended_Nat" (required by "Draft.SNF_AlgorithmMoreTemplates" via "Draft.SNF_Algorithm" via "Draft.Smith_Normal_Form_JNF" via "Draft.SNF_Missing_Lemmas" via "Hermite.Hermite" via "Echelon_Form.Echelon_Form_Inverse" via "Echelon_Form.Echelon_Form_Det" via "Echelon_Form.Echelon_Form" via "Echelon_Form.Rings2" via "HOL-Analysis.Analysis" via "HOL-Analysis.Derivative" via "HOL-Analysis.Bounded_Linear_Function" via "HOL-Analysis.Uniform_Limit" via "HOL-Analysis.Summation_Tests" via "HOL-Library.Extended_Real")
class infinity = type +
  fixes infinity :: "'a"
instantiation
  enat :: infinity
  infinity_enat == infinity :: enat
Proofs for inductive predicate(s) "rec_set_enat"
bundle fps_notation
### theory "HOL-Computational_Algebra.Formal_Power_Series"
### 3.841s elapsed time, 15.104s cpu time, 2.034s GC time
Loading theory "Jordan_Normal_Form.DL_Missing_List" (required by "Draft.SNF_AlgorithmMoreTemplates" via "Draft.SNF_Algorithm" via "Draft.Smith_Normal_Form_JNF" via "Draft.SNF_Missing_Lemmas" via "Jordan_Normal_Form.DL_Rank_Submatrix" via "Jordan_Normal_Form.DL_Rank")
### ML warning (line 261 of "~~/src/HOL/Library/Sum_of_Squares/positivstellensatz.ML"):
### Value identifier (pth_abs) has not been referenced.
### ML warning (line 265 of "~~/src/HOL/Library/Sum_of_Squares/positivstellensatz.ML"):
### Value identifier (pth_max) has not been referenced.
### ML warning (line 269 of "~~/src/HOL/Library/Sum_of_Squares/positivstellensatz.ML"):
### Value identifier (pth_min) has not been referenced.
### ML warning (line 379 of "~~/src/HOL/Library/Sum_of_Squares/positivstellensatz.ML"):
### Pattern is not exhaustive.
signature FUNC =
  sig
    exception DUP of key
    exception SAME
    exception UNDEF of key
    val apply: 'a table -> key -> 'a
    val applyd: 'a table -> (key -> 'a) -> key -> 'a
    val build: ('a table -> 'a table) -> 'a table
    val choose: 'a table -> key * 'a
    val combine:
       ('a -> 'a -> 'a) -> ('a -> bool) -> 'a table -> 'a table -> 'a table
    val cons_list: key * 'a -> 'a list table -> 'a list table
    val default: key * 'a -> 'a table -> 'a table
    val defined: 'a table -> key -> bool
    val delete: key -> 'a table -> 'a table
    val delete_safe: key -> 'a table -> 'a table
    val dest: 'a table -> (key * 'a) list
    val dest_list: 'a list table -> (key * 'a) list
    val dom: 'a table -> key list
    val empty: 'a table
    val exists: (key * 'a -> bool) -> 'a table -> bool
    val fold: (key * 'a -> 'b -> 'b) -> 'a table -> 'b -> 'b
    val fold_rev: (key * 'a -> 'b -> 'b) -> 'a table -> 'b -> 'b
    val forall: (key * 'a -> bool) -> 'a table -> bool
    val get_first: (key * 'a -> 'b option) -> 'a table -> 'b option
    val insert: ('a * 'a -> bool) -> key * 'a -> 'a table -> 'a table
    val insert_list:
       ('a * 'a -> bool) -> key * 'a -> 'a list table -> 'a list table
    val insert_set: key -> set -> set
    val is_empty: 'a table -> bool
    val is_single: 'a table -> bool
    val join: (key -> 'a * 'a -> 'a) -> 'a table * 'a table -> 'a table
    type key
    val keys: 'a table -> key list
    val lookup: 'a table -> key -> 'a option
    val lookup_key: 'a table -> key -> (key * 'a) option
    val lookup_list: 'a list table -> key -> 'a list
    val make: (key * 'a) list -> 'a table
    val make_list: (key * 'a) list -> 'a list table
    val make_set: key list -> set
    val map: (key -> 'a -> 'b) -> 'a table -> 'b table
    val map_default: key * 'a -> ('a -> 'a) -> 'a table -> 'a table
    val map_entry: key -> ('a -> 'a) -> 'a table -> 'a table
    val max: 'a table -> (key * 'a) option
    val member: ('a * 'b -> bool) -> 'b table -> key * 'a -> bool
    val merge: ('a * 'a -> bool) -> 'a table * 'a table -> 'a table
    val merge_list:
       ('a * 'a -> bool) -> 'a list table * 'a list table -> 'a list table
    val min: 'a table -> (key * 'a) option
    val onefunc: key * 'a -> 'a table
    val remove: ('a * 'b -> bool) -> key * 'a -> 'b table -> 'b table
    val remove_list:
       ('a * 'b -> bool) -> key * 'a -> 'b list table -> 'b list table
    val remove_set: key -> set -> set
    type set = unit table
    type 'a table
    val tryapplyd: 'a table -> key -> 'a -> 'a
    val update: key * 'a -> 'a table -> 'a table
    val update_list:
       ('a * 'a -> bool) -> key * 'a -> 'a list table -> 'a list table
    val update_new: key * 'a -> 'a table -> 'a table
    val updatep: (key * 'a -> bool) -> key * 'a -> 'a table -> 'a table
  end
functor FuncFun (Key: KEY): FUNC
signature REAL_ARITH =
  sig
    type cert_conv = cterm -> thm * pss_tree
    val cterm_of_rat: Rat.rat -> cterm
    val dest_ratconst: cterm -> Rat.rat
    val gen_gen_real_arith:
       Proof.context ->
         (Rat.rat -> cterm) * conv * conv * conv * conv * conv * conv *
         conv * conv * conv * prover
           -> cert_conv
    val gen_prover_real_arith: Proof.context -> prover -> cert_conv
    val gen_real_arith:
       Proof.context ->
         (Rat.rat -> cterm) * conv * conv * conv * conv * conv * conv *
         conv * prover
           -> cert_conv
    val is_ratconst: cterm -> bool
    datatype positivstellensatz
    =
         Axiom_eq of int
       | Axiom_le of int
       | Axiom_lt of int
       | Eqmul of FuncUtil.poly * positivstellensatz
       | Product of positivstellensatz * positivstellensatz
       | Rational_eq of Rat.rat
       | Rational_le of Rat.rat
       | Rational_lt of Rat.rat
       | Square of FuncUtil.poly
       | Sum of positivstellensatz * positivstellensatz
    type prover =
       tree_choice list ->
         (thm list * thm list * thm list -> positivstellensatz -> thm) ->
           thm list * thm list * thm list -> thm * pss_tree
    datatype pss_tree
    = Branch of pss_tree * pss_tree | Cert of positivstellensatz | Trivial
    val real_linear_prover:
       (thm list * thm list * thm list -> positivstellensatz -> thm) ->
         thm list * thm list * thm list -> thm * pss_tree
    datatype tree_choice = Left | Right
  end
structure FuncUtil:
  sig
    structure Ctermfunc: FUNC
    structure Intfunc: FUNC
    structure Intpairfunc: FUNC
    structure Monomialfunc: FUNC
    structure Ratfunc: FUNC
    structure Symfunc: FUNC
    structure Termfunc: FUNC
    val dest_monomial: 'a Ctermfunc.table -> (cterm * 'a) list
    type monomial = int Ctermfunc.table
    val monomial_ord: int Ctermfunc.table * int Ctermfunc.table -> order
    val monomial_order: int Ctermfunc.table * int Ctermfunc.table -> order
    type poly = Rat.rat Monomialfunc.table
  end
structure RealArith: REAL_ARITH
Found termination order: "(%p. length (snd p)) <*mlex*> {}"
### No equation for constructor "Extended_Nat.infinity_class.infinity"
### in definition of function "the_enat"
consts
  the_enat :: "enat => nat"
### theory "Jordan_Normal_Form.DL_Missing_List"
### 0.149s elapsed time, 0.553s cpu time, 0.138s GC time
Loading theory "Jordan_Normal_Form.DL_Missing_Sublist" (required by "Draft.SNF_AlgorithmMoreTemplates" via "Draft.SNF_Algorithm" via "Draft.Smith_Normal_Form_JNF" via "Draft.SNF_Missing_Lemmas" via "Jordan_Normal_Form.DL_Rank_Submatrix" via "Jordan_Normal_Form.DL_Submatrix")
instantiation
  enat :: zero_neq_one
  one_enat == one_class.one :: enat
  zero_enat == zero_class.zero :: enat
signature POSITIVSTELLENSATZ_TOOLS =
  sig
    val print_cert: RealArith.pss_tree -> string
    val read_cert: Proof.context -> string -> RealArith.pss_tree
  end
structure Positivstellensatz_Tools: POSITIVSTELLENSATZ_TOOLS
instantiation
  enat :: comm_monoid_add
  plus_enat == plus :: enat => enat => enat
instantiation
  enat :: {comm_semiring_1,semiring_no_zero_divisors}
  times_enat == times :: enat => enat => enat
instantiation
  enat :: minus
  minus_enat == minus :: enat => enat => enat
Found termination order: "(%p. size (snd p)) <*mlex*> {}"
instantiation
  enat :: linordered_ab_semigroup_add
  less_eq_enat == less_eq :: enat => enat => bool
  less_enat == less :: enat => enat => bool
instantiation
  enat :: {order_bot,order_top}
  top_enat == top :: enat
  bot_enat == bot :: enat
structure Cancel_Enat_Common:
  sig
    val dest_sum: term -> term list
    val dest_summing: term * term list -> term list
    val find_first: term -> term list -> term list
    val find_first_t: term list -> term -> term list -> term list
    val mk_eq: term * term -> term
    val mk_sum: typ -> term list -> term
    val norm_ss: simpset
    val norm_tac: Proof.context -> tactic
    val simplify_meta_eq: Proof.context -> thm -> thm -> thm
    val trans_tac: Proof.context -> thm option -> tactic
  end
structure Eq_Enat_Cancel:
  sig val proc: Proof.context -> term -> thm option end
structure Le_Enat_Cancel:
  sig val proc: Proof.context -> term -> thm option end
structure Less_Enat_Cancel:
  sig val proc: Proof.context -> term -> thm option end
### theory "Jordan_Normal_Form.DL_Missing_Sublist"
### 0.320s elapsed time, 1.237s cpu time, 0.277s GC time
Loading theory "List-Index.List_Index" (required by "Draft.SNF_AlgorithmMoreTemplates" via "Draft.SNF_Algorithm" via "Draft.Smith_Normal_Form_JNF" via "Draft.SNF_Missing_Lemmas")
instantiation
  enat :: complete_lattice
  Inf_enat == Inf :: enat set => enat
  Sup_enat == Sup :: enat set => enat
  sup_enat == sup :: enat => enat => enat
  inf_enat == inf :: enat => enat => enat
consts
  find_index :: "('a => bool) => 'a list => nat"
### theory "HOL-Library.Extended_Nat"
### 0.807s elapsed time, 3.123s cpu time, 0.538s GC time
Loading theory "HOL-Library.Extended_Real" (required by "Draft.SNF_AlgorithmMoreTemplates" via "Draft.SNF_Algorithm" via "Draft.Smith_Normal_Form_JNF" via "Draft.SNF_Missing_Lemmas" via "Hermite.Hermite" via "Echelon_Form.Echelon_Form_Inverse" via "Echelon_Form.Echelon_Form_Det" via "Echelon_Form.Echelon_Form" via "Echelon_Form.Rings2" via "HOL-Analysis.Analysis" via "HOL-Analysis.Derivative" via "HOL-Analysis.Bounded_Linear_Function" via "HOL-Analysis.Uniform_Limit" via "HOL-Analysis.Summation_Tests")
signature SUM_OF_SQUARES =
  sig
    exception Failure of string
    val debug: bool Config.T
    val debug_message: Proof.context -> (unit -> string) -> unit
    datatype proof_method
    = Certificate of RealArith.pss_tree | Prover of string -> string
    val sos_tac:
       (RealArith.pss_tree -> unit) ->
         proof_method -> Proof.context -> int -> tactic
    val trace: bool Config.T
    val trace_message: Proof.context -> (unit -> string) -> unit
  end
structure Sum_of_Squares: SUM_OF_SQUARES
signature SOS_WRAPPER =
  sig val sos_tac: Proof.context -> string option -> int -> tactic end
structure SOS_Wrapper: SOS_WRAPPER
### theory "HOL-Library.Sum_of_Squares"
### 1.469s elapsed time, 5.705s cpu time, 0.920s GC time
Loading theory "HOL-Analysis.Norm_Arith" (required by "Draft.SNF_AlgorithmMoreTemplates" via "Draft.SNF_Algorithm" via "Draft.Smith_Normal_Form_JNF" via "Draft.SNF_Missing_Lemmas" via "Hermite.Hermite" via "Echelon_Form.Echelon_Form_Inverse" via "Echelon_Form.Echelon_Form_Det" via "Echelon_Form.Echelon_Form" via "Echelon_Form.Rings2" via "HOL-Analysis.Analysis")
consts
  map_index' :: "nat => (nat => 'a => 'b) => 'a list => 'b list"
consts
  insert_nth :: "nat => 'a => 'a list => 'a list"
### theory "HOL-Analysis.Elementary_Normed_Spaces"
### 1.557s elapsed time, 6.032s cpu time, 1.056s GC time
Loading theory "Polynomial_Interpolation.Ring_Hom" (required by "Draft.SNF_AlgorithmMoreTemplates" via "Draft.SNF_Algorithm" via "Draft.Smith_Normal_Form_JNF" via "Draft.SNF_Missing_Lemmas" via "Draft.Mod_Type_Connect" via "Perron_Frobenius.HMA_Connect" via "Jordan_Normal_Form.Spectral_Radius" via "Jordan_Normal_Form.Jordan_Normal_Form_Existence" via "Jordan_Normal_Form.Jordan_Normal_Form" via "Jordan_Normal_Form.Matrix")
Found termination order: "(%p. length (snd p)) <*mlex*> {}"
### theory "List-Index.List_Index"
### 0.451s elapsed time, 1.752s cpu time, 0.289s GC time
Loading theory "Rank_Nullity_Theorem.Dual_Order" (required by "Draft.SNF_AlgorithmMoreTemplates" via "Draft.SNF_Algorithm" via "Draft.Smith_Normal_Form_JNF" via "Draft.SNF_Missing_Lemmas" via "Hermite.Hermite" via "Echelon_Form.Echelon_Form_Inverse" via "Echelon_Form.Echelon_Form_Det" via "Echelon_Form.Echelon_Form" via "Gauss_Jordan.Determinants2" via "Gauss_Jordan.Gauss_Jordan_PA" via "Gauss_Jordan.Gauss_Jordan" via "Gauss_Jordan.Rref" via "Rank_Nullity_Theorem.Mod_Type")
instantiation
  enat :: linorder_topology
  open_enat == open :: enat set => bool
### ML warning (line 103 of "~~/src/HOL/Analysis/normarith.ML"):
### Matches are not exhaustive.
signature NORM_ARITH =
  sig
    val norm_arith: Proof.context -> conv
    val norm_arith_tac: Proof.context -> int -> tactic
  end
structure NormArith: NORM_ARITH
### theory "HOL-Analysis.Norm_Arith"
### 0.319s elapsed time, 1.240s cpu time, 0.193s GC time
Loading theory "HOL-Analysis.Topology_Euclidean_Space" (required by "Draft.SNF_AlgorithmMoreTemplates" via "Draft.SNF_Algorithm" via "Draft.Smith_Normal_Form_JNF" via "Draft.SNF_Missing_Lemmas" via "Hermite.Hermite" via "Echelon_Form.Echelon_Form_Inverse" via "Echelon_Form.Echelon_Form_Det" via "Echelon_Form.Echelon_Form" via "Echelon_Form.Rings2" via "HOL-Analysis.Analysis" via "HOL-Analysis.Convex_Euclidean_Space")
### Abstraction on left hand side of equation, in theorem:
### linorder.Min (%x y. y <= x) (set (?x # ?xs)) ==
### fold dual_wellorder.min ?xs ?x
### Abstraction on left hand side of equation, in theorem:
### linorder.Max (%x y. y <= x) (set (?x # ?xs)) ==
### fold dual_wellorder.max ?xs ?x
### Abstraction on left hand side of equation, in theorem:
### dual_wellorder.sorted [] == True
### Abstraction on left hand side of equation, in theorem:
### dual_wellorder.sorted [?x] == True
### Abstraction on left hand side of equation, in theorem:
### dual_wellorder.sorted (?x # ?y # ?zs) ==
### ?y <= ?x & dual_wellorder.sorted (?y # ?zs)
### Abstraction on left hand side of equation, in theorem:
### dual_wellorder.sorted_list_of_set (set ?xs) ==
### dual_wellorder.sort (remdups ?xs)
### theory "Rank_Nullity_Theorem.Dual_Order"
### 0.370s elapsed time, 1.440s cpu time, 0.220s GC time
Loading theory "VectorSpace.FunctionLemmas" (required by "Draft.SNF_AlgorithmMoreTemplates" via "Draft.SNF_Algorithm" via "Draft.Smith_Normal_Form_JNF" via "Draft.SNF_Missing_Lemmas" via "Draft.Mod_Type_Connect" via "Perron_Frobenius.HMA_Connect" via "Jordan_Normal_Form.Spectral_Radius" via "Jordan_Normal_Form.Jordan_Normal_Form_Existence" via "Jordan_Normal_Form.Schur_Decomposition" via "Jordan_Normal_Form.Gram_Schmidt" via "Jordan_Normal_Form.VS_Connect" via "Jordan_Normal_Form.Missing_VectorSpace" via "VectorSpace.VectorSpace" via "VectorSpace.MonoidSums")
locale zero_hom
  fixes hom :: "'a => 'b"
  assumes "zero_hom hom"
locale one_hom
  fixes hom :: "'a => 'b"
  assumes "one_hom hom"
locale times_hom
  fixes hom :: "'a => 'b"
  assumes "times_hom hom"
### theory "VectorSpace.FunctionLemmas"
### 0.042s elapsed time, 0.167s cpu time, 0.031s GC time
Loading theory "VectorSpace.RingModuleFacts" (required by "Draft.SNF_AlgorithmMoreTemplates" via "Draft.SNF_Algorithm" via "Draft.Smith_Normal_Form_JNF" via "Draft.SNF_Missing_Lemmas" via "Draft.Mod_Type_Connect" via "Perron_Frobenius.HMA_Connect" via "Jordan_Normal_Form.Spectral_Radius" via "Jordan_Normal_Form.Jordan_Normal_Form_Existence" via "Jordan_Normal_Form.Schur_Decomposition" via "Jordan_Normal_Form.Gram_Schmidt" via "Jordan_Normal_Form.VS_Connect" via "Jordan_Normal_Form.Missing_VectorSpace" via "VectorSpace.VectorSpace")
locale plus_hom
  fixes hom :: "'a => 'b"
  assumes "plus_hom hom"
locale semigroup_mult_hom
  fixes hom :: "'a => 'b"
  assumes "semigroup_mult_hom hom"
locale semigroup_add_hom
  fixes hom :: "'a => 'b"
  assumes "semigroup_add_hom hom"
locale monoid_mult_hom
  fixes hom :: "'a => 'b"
  assumes "monoid_mult_hom hom"
locale monoid_add_hom
  fixes hom :: "'a => 'b"
  assumes "monoid_add_hom hom"
locale group_add_hom
  fixes hom :: "'a => 'b"
  assumes "group_add_hom hom"
locale ab_semigroup_mult_hom
  fixes hom :: "'a => 'b"
  assumes "ab_semigroup_mult_hom hom"
locale ab_semigroup_add_hom
  fixes hom :: "'a => 'b"
  assumes "ab_semigroup_add_hom hom"
locale comm_monoid_mult_hom
  fixes hom :: "'a => 'b"
  assumes "comm_monoid_mult_hom hom"
instantiation
  ereal :: uminus
  uminus_ereal == uminus :: ereal => ereal
locale comm_monoid_add_hom
  fixes hom :: "'a => 'b"
  assumes "comm_monoid_add_hom hom"
locale ab_group_add_hom
  fixes hom :: "'a => 'b"
  assumes "ab_group_add_hom hom"
locale semiring_hom
  fixes hom :: "'a => 'b"
  assumes "semiring_hom hom"
locale ring_hom
  fixes hom :: "'a => 'b"
  assumes "ring_hom hom"
Found termination order: "{}"
instantiation
  ereal :: infinity
  infinity_ereal == infinity :: ereal
locale comm_semiring_hom
  fixes hom :: "'a => 'b"
  assumes "comm_semiring_hom hom"
locale comm_ring_hom
  fixes hom :: "'a => 'b"
  assumes "comm_ring_hom hom"
locale idom_hom
  fixes hom :: "'a => 'b"
  assumes "idom_hom hom"
locale idom_divide_hom
  fixes hom :: "'a => 'b"
  assumes "idom_divide_hom hom"
instantiation
  ereal :: abs
  abs_ereal == abs :: ereal => ereal
locale field_hom
  fixes hom :: "'a => 'b"
  assumes "field_hom hom"
locale field_char_0_hom
  fixes hom :: "'a => 'b"
  assumes "field_char_0_hom hom"
locale zero_hom_0
  fixes hom :: "'a => 'b"
  assumes "zero_hom_0 hom"
locale one_hom_1
  fixes hom :: "'a => 'b"
  assumes "one_hom_1 hom"
instantiation
  ereal :: {comm_monoid_add,zero_neq_one}
  one_ereal == one_class.one :: ereal
  zero_ereal == zero_class.zero :: ereal
  plus_ereal == plus :: ereal => ereal => ereal
locale monoid_mult_hom_1
  fixes hom :: "'a => 'b"
  assumes "monoid_mult_hom_1 hom"
locale monoid_add_hom_0
  fixes hom :: "'a => 'b"
  assumes "monoid_add_hom_0 hom"
locale comm_monoid_mult_hom_1
  fixes hom :: "'a => 'b"
  assumes "comm_monoid_mult_hom_1 hom"
locale comm_monoid_add_hom_0
  fixes hom :: "'a => 'b"
  assumes "comm_monoid_add_hom_0 hom"
locale injective
  fixes f :: "'a => 'b"
  assumes "injective f"
locale inj_zero_hom
  fixes hom :: "'a => 'b"
  assumes "inj_zero_hom hom"
locale inj_one_hom
  fixes hom :: "'a => 'b"
  assumes "inj_one_hom hom"
locale inj_semigroup_mult_hom
  fixes hom :: "'a => 'b"
  assumes "inj_semigroup_mult_hom hom"
locale inj_semigroup_add_hom
  fixes hom :: "'a => 'b"
  assumes "inj_semigroup_add_hom hom"
locale inj_monoid_mult_hom
  fixes hom :: "'a => 'b"
  assumes "inj_monoid_mult_hom hom"
locale inj_monoid_add_hom
  fixes hom :: "'a => 'b"
  assumes "inj_monoid_add_hom hom"
locale inj_comm_monoid_mult_hom
  fixes hom :: "'a => 'b"
  assumes "inj_comm_monoid_mult_hom hom"
locale inj_comm_monoid_add_hom
  fixes hom :: "'a => 'b"
  assumes "inj_comm_monoid_add_hom hom"
instantiation
  ereal :: linorder
  less_eq_ereal == less_eq :: ereal => ereal => bool
  less_ereal == less :: ereal => ereal => bool
locale inj_semiring_hom
  fixes hom :: "'a => 'b"
  assumes "inj_semiring_hom hom"
locale inj_comm_semiring_hom
  fixes hom :: "'a => 'b"
  assumes "inj_comm_semiring_hom hom"
locale inj_group_add_hom
  fixes hom :: "'a => 'b"
  assumes "inj_group_add_hom hom"
locale inj_ab_group_add_hom
  fixes hom :: "'a => 'b"
  assumes "inj_ab_group_add_hom hom"
locale inj_ring_hom
  fixes hom :: "'a => 'b"
  assumes "inj_ring_hom hom"
locale inj_comm_ring_hom
  fixes hom :: "'a => 'b"
  assumes "inj_comm_ring_hom hom"
locale inj_idom_hom
  fixes hom :: "'a => 'b"
  assumes "inj_idom_hom hom"
locale field_hom
  fixes hom :: "'a => 'b"
  assumes "field_hom hom"
locale surjective
  fixes f :: "'a => 'b"
  assumes "surjective f"
locale bijective
  fixes f :: "'a => 'b"
  assumes "bijective f"
locale bijective
  fixes f :: "'a => 'b"
  assumes "bijective f"
instantiation
  ereal :: {comm_monoid_mult,sgn}
  sgn_ereal == sgn :: ereal => ereal
  times_ereal == times :: ereal => ereal => ereal
locale monoid_mult_isom
  fixes hom :: "'a => 'b"
  assumes "monoid_mult_isom hom"
### theory "VectorSpace.RingModuleFacts"
### 0.800s elapsed time, 3.097s cpu time, 0.460s GC time
Loading theory "VectorSpace.MonoidSums" (required by "Draft.SNF_AlgorithmMoreTemplates" via "Draft.SNF_Algorithm" via "Draft.Smith_Normal_Form_JNF" via "Draft.SNF_Missing_Lemmas" via "Draft.Mod_Type_Connect" via "Perron_Frobenius.HMA_Connect" via "Jordan_Normal_Form.Spectral_Radius" via "Jordan_Normal_Form.Jordan_Normal_Form_Existence" via "Jordan_Normal_Form.Schur_Decomposition" via "Jordan_Normal_Form.Gram_Schmidt" via "Jordan_Normal_Form.VS_Connect" via "Jordan_Normal_Form.Missing_VectorSpace" via "VectorSpace.VectorSpace")
locale monoid_add_isom
  fixes hom :: "'a => 'b"
  assumes "monoid_add_isom hom"
locale comm_monoid_mult_isom
  fixes hom :: "'a => 'b"
  assumes "comm_monoid_mult_isom hom"
locale comm_monoid_add_isom
  fixes hom :: "'a => 'b"
  assumes "comm_monoid_add_isom hom"
locale semiring_isom
  fixes hom :: "'a => 'b"
  assumes "semiring_isom hom"
locale comm_semiring_isom
  fixes hom :: "'a => 'b"
  assumes "comm_semiring_isom hom"
instantiation
  ereal :: minus
  minus_ereal == minus :: ereal => ereal => ereal
locale abelian_monoid
  fixes G :: "('a, 'b) ring_scheme"  (structure)
  assumes "abelian_monoid G"
### theory "VectorSpace.MonoidSums"
### 0.346s elapsed time, 1.329s cpu time, 0.156s GC time
Loading theory "VectorSpace.LinearCombinations" (required by "Draft.SNF_AlgorithmMoreTemplates" via "Draft.SNF_Algorithm" via "Draft.Smith_Normal_Form_JNF" via "Draft.SNF_Missing_Lemmas" via "Draft.Mod_Type_Connect" via "Perron_Frobenius.HMA_Connect" via "Jordan_Normal_Form.Spectral_Radius" via "Jordan_Normal_Form.Jordan_Normal_Form_Existence" via "Jordan_Normal_Form.Schur_Decomposition" via "Jordan_Normal_Form.Gram_Schmidt" via "Jordan_Normal_Form.VS_Connect" via "Jordan_Normal_Form.Missing_VectorSpace" via "VectorSpace.VectorSpace")
instantiation
  ereal :: inverse
  inverse_ereal == inverse :: ereal => ereal
  divide_ereal == divide :: ereal => ereal => ereal
locale ring_isom
  fixes hom :: "'a => 'b"
  assumes "ring_isom hom"
instantiation
  ereal :: lattice
  inf_ereal == inf :: ereal => ereal => ereal
  sup_ereal == sup :: ereal => ereal => ereal
instantiation
  ereal :: complete_lattice
  Inf_ereal == Inf :: ereal set => ereal
  Sup_ereal == Sup :: ereal set => ereal
  bot_ereal == bot :: ereal
  top_ereal == top :: ereal
locale comm_ring_isom
  fixes hom :: "'a => 'b"
  assumes "comm_ring_isom hom"
instantiation
  ereal :: linear_continuum_topology
  open_ereal == open :: ereal set => bool
locale idom_isom
  fixes hom :: "'a => 'b"
  assumes "idom_isom hom"
locale field_isom
  fixes hom :: "'a => 'b"
  assumes "field_isom hom"
### theory "HOL-Analysis.Topology_Euclidean_Space"
### 3.784s elapsed time, 14.411s cpu time, 6.410s GC time
Loading theory "HOL-Analysis.Convex_Euclidean_Space" (required by "Draft.SNF_AlgorithmMoreTemplates" via "Draft.SNF_Algorithm" via "Draft.Smith_Normal_Form_JNF" via "Draft.SNF_Missing_Lemmas" via "Hermite.Hermite" via "Echelon_Form.Echelon_Form_Inverse" via "Echelon_Form.Echelon_Form_Det" via "Echelon_Form.Echelon_Form" via "Echelon_Form.Rings2" via "HOL-Analysis.Analysis")
### theory "HOL-Library.Extended_Real"
### 4.496s elapsed time, 17.190s cpu time, 6.823s GC time
Loading theory "HOL-Library.Extended_Nonnegative_Real" (required by "Draft.SNF_AlgorithmMoreTemplates" via "Draft.SNF_Algorithm" via "Draft.Smith_Normal_Form_JNF" via "Draft.SNF_Missing_Lemmas" via "Hermite.Hermite" via "Echelon_Form.Echelon_Form_Inverse" via "Echelon_Form.Echelon_Form_Det" via "Echelon_Form.Echelon_Form" via "Echelon_Form.Rings2" via "HOL-Analysis.Analysis" via "HOL-Analysis.Derivative" via "HOL-Analysis.Bounded_Linear_Function" via "HOL-Analysis.Uniform_Limit" via "HOL-Analysis.Summation_Tests" via "HOL-Analysis.Extended_Real_Limits")
locale inj_idom_divide_hom
  fixes hom :: "'a => 'b"
  assumes "inj_idom_divide_hom hom"
locale field_hom
  fixes hom :: "'a => 'b"
  assumes "field_hom hom"
locale LinearCombinations.submodule
  fixes R :: "('a, 'b) ring_scheme"
    and N :: "'c set"
    and M :: "('a, 'c, 'd) module_scheme"  (structure)
  assumes "LinearCombinations.submodule R N M"
### theory "Polynomial_Interpolation.Ring_Hom"
### 4.896s elapsed time, 18.759s cpu time, 7.066s GC time
Loading theory "HOL-Analysis.Line_Segment" (required by "Draft.SNF_AlgorithmMoreTemplates" via "Draft.SNF_Algorithm" via "Draft.Smith_Normal_Form_JNF" via "Draft.SNF_Missing_Lemmas" via "Hermite.Hermite" via "Echelon_Form.Echelon_Form_Inverse" via "Echelon_Form.Echelon_Form_Det" via "Echelon_Form.Echelon_Form" via "Echelon_Form.Rings2" via "HOL-Analysis.Analysis")
instantiation
  ennreal :: complete_linorder
  Inf_ennreal == Inf :: ennreal set => ennreal
  Sup_ennreal == Sup :: ennreal set => ennreal
  bot_ennreal == bot :: ennreal
  sup_ennreal == sup :: ennreal => ennreal => ennreal
  top_ennreal == top :: ennreal
  inf_ennreal == inf :: ennreal => ennreal => ennreal
  less_eq_ennreal == less_eq :: ennreal => ennreal => bool
  less_ennreal == less :: ennreal => ennreal => bool
instantiation
  ennreal :: infinity
  infinity_ennreal == infinity :: ennreal
instantiation
  ennreal :: {comm_semiring_1,semiring_1_no_zero_divisors}
  zero_ennreal == zero_class.zero :: ennreal
  plus_ennreal == plus :: ennreal => ennreal => ennreal
  one_ennreal == one_class.one :: ennreal
  times_ennreal == times :: ennreal => ennreal => ennreal
### theory "HOL-Analysis.Convex_Euclidean_Space"
### 1.138s elapsed time, 4.452s cpu time, 0.673s GC time
Loading theory "HOL-Analysis.Ordered_Euclidean_Space" (required by "Draft.SNF_AlgorithmMoreTemplates" via "Draft.SNF_Algorithm" via "Draft.Smith_Normal_Form_JNF" via "Draft.SNF_Missing_Lemmas" via "Hermite.Hermite" via "Echelon_Form.Echelon_Form_Inverse" via "Echelon_Form.Echelon_Form_Det" via "Echelon_Form.Echelon_Form" via "Echelon_Form.Rings2" via "HOL-Analysis.Analysis" via "HOL-Analysis.Ball_Volume" via "HOL-Analysis.Gamma_Function" via "HOL-Analysis.Equivalence_Lebesgue_Henstock_Integration" via "HOL-Analysis.Lebesgue_Measure" via "HOL-Analysis.Finite_Product_Measure" via "HOL-Analysis.Binary_Product_Measure" via "HOL-Analysis.Nonnegative_Lebesgue_Integration" via "HOL-Analysis.Borel_Space")
instantiation
  ennreal :: minus
  minus_ennreal == minus :: ennreal => ennreal => ennreal
instantiation
  ennreal :: inverse
  inverse_ennreal == inverse :: ennreal => ennreal
  divide_ennreal == divide :: ennreal => ennreal => ennreal
structure Cancel_Ennreal_Common:
  sig
    val dest_sum: term -> term list
    val dest_summing: term * term list -> term list
    val find_first: term -> term list -> term list
    val find_first_t: term list -> term -> term list -> term list
    val mk_eq: term * term -> term
    val mk_sum: typ -> term list -> term
    val norm_ss: simpset
    val norm_tac: Proof.context -> tactic
    val simplify_meta_eq: Proof.context -> thm -> thm -> thm
    val trans_tac: Proof.context -> thm option -> tactic
  end
structure Eq_Ennreal_Cancel:
  sig val proc: Proof.context -> term -> thm option end
structure Le_Ennreal_Cancel:
  sig val proc: Proof.context -> term -> thm option end
structure Less_Ennreal_Cancel:
  sig val proc: Proof.context -> term -> thm option end
locale mod_hom
  fixes R :: "('a, 'b) ring_scheme"
    and M :: "('a, 'c, 'd) module_scheme"
    and N :: "('a, 'e, 'f) module_scheme"
    and f :: "'c => 'e"
  assumes "mod_hom R M N f"
instantiation
  ennreal :: linear_continuum_topology
  open_ennreal == open :: ennreal set => bool
locale mod_hom
  fixes R :: "('a, 'b) ring_scheme"
    and M :: "('a, 'c, 'd) module_scheme"
    and N :: "('a, 'e, 'f) module_scheme"
    and f :: "'c => 'e"
  assumes "mod_hom R M N f"
### theory "HOL-Analysis.Line_Segment"
### 1.050s elapsed time, 4.079s cpu time, 0.710s GC time
Loading theory "HOL-Analysis.Starlike" (required by "Draft.SNF_AlgorithmMoreTemplates" via "Draft.SNF_Algorithm" via "Draft.Smith_Normal_Form_JNF" via "Draft.SNF_Missing_Lemmas" via "Hermite.Hermite" via "Echelon_Form.Echelon_Form_Inverse" via "Echelon_Form.Echelon_Form_Det" via "Echelon_Form.Echelon_Form" via "Echelon_Form.Rings2" via "HOL-Analysis.Analysis" via "HOL-Analysis.Weierstrass_Theorems" via "HOL-Analysis.Path_Connected")
### theory "HOL-Library.Extended_Nonnegative_Real"
### 3.298s elapsed time, 12.589s cpu time, 6.743s GC time
Loading theory "HOL-Analysis.Infinite_Sum" (required by "Draft.SNF_AlgorithmMoreTemplates" via "Draft.SNF_Algorithm" via "Draft.Smith_Normal_Form_JNF" via "Draft.SNF_Missing_Lemmas" via "Hermite.Hermite" via "Echelon_Form.Echelon_Form_Inverse" via "Echelon_Form.Echelon_Form_Det" via "Echelon_Form.Echelon_Form" via "Echelon_Form.Rings2" via "HOL-Analysis.Analysis")
class ordered_euclidean_space = Inf + Sup + euclidean_space + abs + inf +
  sup + ord +
  assumes
    "eucl_le":
      "!!x y. (x <= y) = (ALL i:Basis. x \<bullet> i <= y \<bullet> i)"
  assumes "eucl_less_le_not_le": "!!x y. (x < y) = (x <= y & ~ y <= x)"
  assumes
    "eucl_inf":
      "!!x y.
          inf x y =
          (SUM i:Basis. inf (x \<bullet> i) (y \<bullet> i) *\<^sub>R i)"
  assumes
    "eucl_sup":
      "!!x y.
          sup x y =
          (SUM i:Basis. sup (x \<bullet> i) (y \<bullet> i) *\<^sub>R i)"
  assumes
    "eucl_Inf":
      "!!X. Inf X = (SUM i:Basis. (INF x\<in>X. x \<bullet> i) *\<^sub>R i)"
  assumes
    "eucl_Sup":
      "!!X. Sup X = (SUM i:Basis. (SUP x\<in>X. x \<bullet> i) *\<^sub>R i)"
  assumes
    "eucl_abs":
      "!!x. \<bar>x\<bar> =
            (SUM i:Basis. \<bar>x \<bullet> i\<bar> *\<^sub>R i)"
### theory "VectorSpace.LinearCombinations"
### 6.896s elapsed time, 26.339s cpu time, 12.994s GC time
Loading theory "HOL-Analysis.Sigma_Algebra" (required by "Draft.SNF_AlgorithmMoreTemplates" via "Draft.SNF_Algorithm" via "Draft.Smith_Normal_Form_JNF" via "Draft.SNF_Missing_Lemmas" via "Hermite.Hermite" via "Echelon_Form.Echelon_Form_Inverse" via "Echelon_Form.Echelon_Form_Det" via "Echelon_Form.Echelon_Form" via "Echelon_Form.Rings2" via "HOL-Analysis.Analysis" via "HOL-Analysis.Ball_Volume" via "HOL-Analysis.Gamma_Function" via "HOL-Analysis.Equivalence_Lebesgue_Henstock_Integration" via "HOL-Analysis.Lebesgue_Measure" via "HOL-Analysis.Finite_Product_Measure" via "HOL-Analysis.Binary_Product_Measure" via "HOL-Analysis.Nonnegative_Lebesgue_Integration" via "HOL-Analysis.Measure_Space" via "HOL-Analysis.Measurable")
locale subset_class
  fixes \<Omega> :: "'a set"
    and M :: "'a set set"
  assumes "subset_class \<Omega> M"
locale semiring_of_sets
  fixes \<Omega> :: "'a set"
    and M :: "'a set set"
  assumes "semiring_of_sets \<Omega> M"
locale ring_of_sets
  fixes \<Omega> :: "'a set"
    and M :: "'a set set"
  assumes "ring_of_sets \<Omega> M"
locale algebra
  fixes \<Omega> :: "'a set"
    and M :: "'a set set"
  assumes "algebra \<Omega> M"
locale sigma_algebra
  fixes \<Omega> :: "'a set"
    and M :: "'a set set"
  assumes "sigma_algebra \<Omega> M"
Proofs for inductive predicate(s) "sigma_setsp"
  Proving monotonicity ...
### theory "HOL-Analysis.Infinite_Sum"
### 1.587s elapsed time, 6.212s cpu time, 0.855s GC time
Loading theory "HOL-Analysis.Extended_Real_Limits" (required by "Draft.SNF_AlgorithmMoreTemplates" via "Draft.SNF_Algorithm" via "Draft.Smith_Normal_Form_JNF" via "Draft.SNF_Missing_Lemmas" via "Hermite.Hermite" via "Echelon_Form.Echelon_Form_Inverse" via "Echelon_Form.Echelon_Form_Det" via "Echelon_Form.Echelon_Form" via "Echelon_Form.Rings2" via "HOL-Analysis.Analysis" via "HOL-Analysis.Derivative" via "HOL-Analysis.Bounded_Linear_Function" via "HOL-Analysis.Uniform_Limit" via "HOL-Analysis.Summation_Tests")
Proofs for inductive predicate(s) "smallest_ccdi_setsp"
  Proving monotonicity ...
### theory "HOL-Analysis.Starlike"
### 3.458s elapsed time, 13.259s cpu time, 6.596s GC time
Loading theory "HOL-Analysis.Continuous_Extension" (required by "Draft.SNF_AlgorithmMoreTemplates" via "Draft.SNF_Algorithm" via "Draft.Smith_Normal_Form_JNF" via "Draft.SNF_Missing_Lemmas" via "Hermite.Hermite" via "Echelon_Form.Echelon_Form_Inverse" via "Echelon_Form.Echelon_Form_Det" via "Echelon_Form.Echelon_Form" via "Echelon_Form.Rings2" via "HOL-Analysis.Analysis" via "HOL-Analysis.Equivalence_Measurable_On_Borel")
locale Dynkin_system
  fixes \<Omega> :: "'a set"
    and M :: "'a set set"
  assumes "Dynkin_system \<Omega> M"
### theory "HOL-Analysis.Continuous_Extension"
### 0.221s elapsed time, 0.860s cpu time, 0.142s GC time
Loading theory "HOL-Analysis.Path_Connected" (required by "Draft.SNF_AlgorithmMoreTemplates" via "Draft.SNF_Algorithm" via "Draft.Smith_Normal_Form_JNF" via "Draft.SNF_Missing_Lemmas" via "Hermite.Hermite" via "Echelon_Form.Echelon_Form_Inverse" via "Echelon_Form.Echelon_Form_Det" via "Echelon_Form.Echelon_Form" via "Echelon_Form.Rings2" via "HOL-Analysis.Analysis" via "HOL-Analysis.Weierstrass_Theorems")
### theory "HOL-Analysis.Sigma_Algebra"
### 1.779s elapsed time, 6.919s cpu time, 1.190s GC time
Loading theory "HOL-Analysis.Measurable" (required by "Draft.SNF_AlgorithmMoreTemplates" via "Draft.SNF_Algorithm" via "Draft.Smith_Normal_Form_JNF" via "Draft.SNF_Missing_Lemmas" via "Hermite.Hermite" via "Echelon_Form.Echelon_Form_Inverse" via "Echelon_Form.Echelon_Form_Det" via "Echelon_Form.Echelon_Form" via "Echelon_Form.Rings2" via "HOL-Analysis.Analysis" via "HOL-Analysis.Ball_Volume" via "HOL-Analysis.Gamma_Function" via "HOL-Analysis.Equivalence_Lebesgue_Henstock_Integration" via "HOL-Analysis.Lebesgue_Measure" via "HOL-Analysis.Finite_Product_Measure" via "HOL-Analysis.Binary_Product_Measure" via "HOL-Analysis.Nonnegative_Lebesgue_Integration" via "HOL-Analysis.Measure_Space")
### theory "HOL-Analysis.Extended_Real_Limits"
### 1.156s elapsed time, 4.503s cpu time, 0.697s GC time
Loading theory "HOL-Analysis.Summation_Tests" (required by "Draft.SNF_AlgorithmMoreTemplates" via "Draft.SNF_Algorithm" via "Draft.Smith_Normal_Form_JNF" via "Draft.SNF_Missing_Lemmas" via "Hermite.Hermite" via "Echelon_Form.Echelon_Form_Inverse" via "Echelon_Form.Echelon_Form_Det" via "Echelon_Form.Echelon_Form" via "Echelon_Form.Rings2" via "HOL-Analysis.Analysis" via "HOL-Analysis.Derivative" via "HOL-Analysis.Bounded_Linear_Function" via "HOL-Analysis.Uniform_Limit")
instantiation
  prod :: (abs, abs) abs
  abs_prod == abs :: 'a * 'b => 'a * 'b
signature MEASURABLE =
  sig
    val add_del_cong_thm: bool -> thm -> Context.generic -> Context.generic
    val add_local_cong: thm -> Proof.context -> Proof.context
    val add_preprocessor:
       string -> preprocessor -> Context.generic -> Context.generic
    val cong_thm_attr: attribute context_parser
    val del_preprocessor: string -> Context.generic -> Context.generic
    val dest_thm_attr: attribute context_parser
    val get_all: Context.generic -> thm list
    val get_cong: Context.generic -> thm list
    val get_dest: Context.generic -> thm list
    datatype level = Concrete | Generic
    val measurable_tac: Proof.context -> thm list -> tactic
    val measurable_thm_attr: bool * (bool * level) -> attribute
    val prepare_facts: Proof.context -> thm list -> thm list * Proof.context
    type preprocessor = thm -> Proof.context -> thm list * Proof.context
    val simproc: Proof.context -> cterm -> thm option
  end
structure Measurable: MEASURABLE
instantiation
  vec :: (ordered_euclidean_space, finite) ordered_euclidean_space
  abs_vec == abs :: ('a, 'b) vec => ('a, 'b) vec
  inf_vec == inf :: ('a, 'b) vec => ('a, 'b) vec => ('a, 'b) vec
  sup_vec == sup :: ('a, 'b) vec => ('a, 'b) vec => ('a, 'b) vec
  Inf_vec == Inf :: ('a, 'b) vec set => ('a, 'b) vec
  Sup_vec == Sup :: ('a, 'b) vec set => ('a, 'b) vec
### theory "HOL-Analysis.Ordered_Euclidean_Space"
### 5.554s elapsed time, 21.361s cpu time, 8.095s GC time
Loading theory "HOL-Analysis.Tagged_Division" (required by "Draft.SNF_AlgorithmMoreTemplates" via "Draft.SNF_Algorithm" via "Draft.Smith_Normal_Form_JNF" via "Draft.SNF_Missing_Lemmas" via "Hermite.Hermite" via "Echelon_Form.Echelon_Form_Inverse" via "Echelon_Form.Echelon_Form_Det" via "Echelon_Form.Echelon_Form" via "Echelon_Form.Rings2" via "HOL-Analysis.Analysis" via "HOL-Analysis.Ball_Volume" via "HOL-Analysis.Gamma_Function" via "HOL-Analysis.Equivalence_Lebesgue_Henstock_Integration" via "HOL-Analysis.Henstock_Kurzweil_Integration")
### theory "HOL-Analysis.Measurable"
### 0.657s elapsed time, 2.513s cpu time, 0.485s GC time
Loading theory "HOL-Analysis.Measure_Space" (required by "Draft.SNF_AlgorithmMoreTemplates" via "Draft.SNF_Algorithm" via "Draft.Smith_Normal_Form_JNF" via "Draft.SNF_Missing_Lemmas" via "Hermite.Hermite" via "Echelon_Form.Echelon_Form_Inverse" via "Echelon_Form.Echelon_Form_Det" via "Echelon_Form.Echelon_Form" via "Echelon_Form.Rings2" via "HOL-Analysis.Analysis" via "HOL-Analysis.Ball_Volume" via "HOL-Analysis.Gamma_Function" via "HOL-Analysis.Equivalence_Lebesgue_Henstock_Integration" via "HOL-Analysis.Lebesgue_Measure" via "HOL-Analysis.Finite_Product_Measure" via "HOL-Analysis.Binary_Product_Measure" via "HOL-Analysis.Nonnegative_Lebesgue_Integration")
### theory "HOL-Analysis.Summation_Tests"
### 2.854s elapsed time, 10.772s cpu time, 7.558s GC time
Loading theory "HOL-Analysis.Uniform_Limit" (required by "Draft.SNF_AlgorithmMoreTemplates" via "Draft.SNF_Algorithm" via "Draft.Smith_Normal_Form_JNF" via "Draft.SNF_Missing_Lemmas" via "Hermite.Hermite" via "Echelon_Form.Echelon_Form_Inverse" via "Echelon_Form.Echelon_Form_Det" via "Echelon_Form.Echelon_Form" via "Echelon_Form.Rings2" via "HOL-Analysis.Analysis" via "HOL-Analysis.Derivative" via "HOL-Analysis.Bounded_Linear_Function")
locale operative
  fixes f :: "'a => 'a => 'a"  (infixl \<open>\<^bold>*\<close> 70)
    and z :: "'a"  (\<open>\<^bold>1\<close>)
    and g :: "'b set => 'a"
  assumes "operative (\<^bold>*) \<^bold>1 g"
locale operative_real
  fixes f :: "'a => 'a => 'a"  (infixl \<open>\<^bold>*\<close> 70)
    and z :: "'a"  (\<open>\<^bold>1\<close>)
    and g :: "real set => 'a"
  assumes "operative_real (\<^bold>*) \<^bold>1 g"
### theory "HOL-Analysis.Tagged_Division"
### 2.918s elapsed time, 11.061s cpu time, 7.579s GC time
Loading theory "Jordan_Normal_Form.Matrix" (required by "Draft.SNF_AlgorithmMoreTemplates" via "Draft.SNF_Algorithm" via "Draft.Smith_Normal_Form_JNF" via "Draft.SNF_Missing_Lemmas" via "Draft.Mod_Type_Connect" via "Perron_Frobenius.HMA_Connect" via "Jordan_Normal_Form.Spectral_Radius" via "Jordan_Normal_Form.Jordan_Normal_Form_Existence" via "Jordan_Normal_Form.Jordan_Normal_Form")
### theory "HOL-Analysis.Path_Connected"
### 3.933s elapsed time, 14.960s cpu time, 8.422s GC time
Loading theory "HOL-Analysis.Arcwise_Connected" (required by "Draft.SNF_AlgorithmMoreTemplates" via "Draft.SNF_Algorithm" via "Draft.Smith_Normal_Form_JNF" via "Draft.SNF_Missing_Lemmas" via "Hermite.Hermite" via "Echelon_Form.Echelon_Form_Inverse" via "Echelon_Form.Echelon_Form_Det" via "Echelon_Form.Echelon_Form" via "Echelon_Form.Rings2" via "HOL-Analysis.Analysis" via "HOL-Analysis.Jordan_Curve")
locale sigma_finite_measure
  fixes M :: "'a measure"
  assumes "sigma_finite_measure M"
### theory "HOL-Analysis.Uniform_Limit"
### 0.720s elapsed time, 2.828s cpu time, 0.548s GC time
Loading theory "HOL-Analysis.Bounded_Continuous_Function" (required by "Draft.SNF_AlgorithmMoreTemplates" via "Draft.SNF_Algorithm" via "Draft.Smith_Normal_Form_JNF" via "Draft.SNF_Missing_Lemmas" via "Hermite.Hermite" via "Echelon_Form.Echelon_Form_Inverse" via "Echelon_Form.Echelon_Form_Det" via "Echelon_Form.Echelon_Form" via "Echelon_Form.Rings2" via "HOL-Analysis.Analysis")
locale finite_measure
  fixes M :: "'a measure"
  assumes "finite_measure M"
instantiation
  bcontfun :: (topological_space, metric_space) metric_space
  dist_bcontfun == dist ::
    'a \<Rightarrow>\<^sub>C 'b => 'a \<Rightarrow>\<^sub>C 'b => real
  uniformity_bcontfun == uniformity ::
    ('a \<Rightarrow>\<^sub>C 'b * 'a \<Rightarrow>\<^sub>C 'b) filter
  open_bcontfun == open :: ('a \<Rightarrow>\<^sub>C 'b) set => bool
instantiation
  bcontfun :: (topological_space, real_normed_vector) real_vector
  uminus_bcontfun == uminus ::
    'a \<Rightarrow>\<^sub>C 'b => 'a \<Rightarrow>\<^sub>C 'b
  zero_bcontfun == zero_class.zero :: 'a \<Rightarrow>\<^sub>C 'b
  minus_bcontfun == minus ::
    'a \<Rightarrow>\<^sub>C 'b
    => 'a \<Rightarrow>\<^sub>C 'b => 'a \<Rightarrow>\<^sub>C 'b
  plus_bcontfun == plus ::
    'a \<Rightarrow>\<^sub>C 'b
    => 'a \<Rightarrow>\<^sub>C 'b => 'a \<Rightarrow>\<^sub>C 'b
  scaleR_bcontfun == scaleR ::
    real => 'a \<Rightarrow>\<^sub>C 'b => 'a \<Rightarrow>\<^sub>C 'b
instantiation
  bcontfun :: (topological_space, real_normed_vector) real_normed_vector
  sgn_bcontfun == sgn ::
    'a \<Rightarrow>\<^sub>C 'b => 'a \<Rightarrow>\<^sub>C 'b
  norm_bcontfun == norm :: 'a \<Rightarrow>\<^sub>C 'b => real
instantiation
  measure :: (type) order_bot
  bot_measure == bot :: 'a measure
  less_eq_measure == less_eq :: 'a measure => 'a measure => bool
  less_measure == less :: 'a measure => 'a measure => bool
Proofs for inductive predicate(s) "less_eq_measure"
  Proving monotonicity ...
### theory "HOL-Analysis.Bounded_Continuous_Function"
### 0.504s elapsed time, 1.979s cpu time, 0.269s GC time
Loading theory "HOL-Analysis.Bounded_Linear_Function" (required by "Draft.SNF_AlgorithmMoreTemplates" via "Draft.SNF_Algorithm" via "Draft.Smith_Normal_Form_JNF" via "Draft.SNF_Missing_Lemmas" via "Hermite.Hermite" via "Echelon_Form.Echelon_Form_Inverse" via "Echelon_Form.Echelon_Form_Det" via "Echelon_Form.Echelon_Form" via "Echelon_Form.Rings2" via "HOL-Analysis.Analysis" via "HOL-Analysis.Derivative")
instantiation
  measure :: (type) semilattice_sup
  sup_measure == sup :: 'a measure => 'a measure => 'a measure
instantiation
  measure :: (type) complete_lattice
  Inf_measure == Inf :: 'a measure set => 'a measure
  Sup_measure == Sup :: 'a measure set => 'a measure
  top_measure == top :: 'a measure
  inf_measure == inf :: 'a measure => 'a measure => 'a measure
instantiation
  vec :: (plus) plus
  plus_vec == plus :: 'a vec => 'a vec => 'a vec
instantiation
  vec :: (minus) minus
  minus_vec == minus :: 'a vec => 'a vec => 'a vec
Found termination order: "(%p. size (snd p)) <*mlex*> {}"
### theory "HOL-Analysis.Measure_Space"
### 3.983s elapsed time, 15.277s cpu time, 8.234s GC time
Loading theory "HOL-Analysis.Caratheodory" (required by "Draft.SNF_AlgorithmMoreTemplates" via "Draft.SNF_Algorithm" via "Draft.Smith_Normal_Form_JNF" via "Draft.SNF_Missing_Lemmas" via "Hermite.Hermite" via "Echelon_Form.Echelon_Form_Inverse" via "Echelon_Form.Echelon_Form_Det" via "Echelon_Form.Echelon_Form" via "Echelon_Form.Rings2" via "HOL-Analysis.Analysis" via "HOL-Analysis.Ball_Volume" via "HOL-Analysis.Gamma_Function" via "HOL-Analysis.Equivalence_Lebesgue_Henstock_Integration" via "HOL-Analysis.Lebesgue_Measure")
Found termination order: "(%p. size (snd p)) <*mlex*> {}"
instantiation
  vec :: (uminus) uminus
  uminus_vec == uminus :: 'a vec => 'a vec
instantiation
  vec :: (ord) ord
  less_eq_vec == less_eq :: 'a vec => 'a vec => bool
  less_vec == less :: 'a vec => 'a vec => bool
instantiation
  vec :: (preorder) preorder
instantiation
  vec :: (order) order
### theory "HOL-Analysis.Arcwise_Connected"
### 1.740s elapsed time, 6.822s cpu time, 1.153s GC time
Loading theory "HOL-Analysis.Homotopy" (required by "Draft.SNF_AlgorithmMoreTemplates" via "Draft.SNF_Algorithm" via "Draft.Smith_Normal_Form_JNF" via "Draft.SNF_Missing_Lemmas" via "Hermite.Hermite" via "Echelon_Form.Echelon_Form_Inverse" via "Echelon_Form.Echelon_Form_Det" via "Echelon_Form.Echelon_Form" via "Echelon_Form.Rings2" via "HOL-Analysis.Analysis" via "HOL-Analysis.Ball_Volume" via "HOL-Analysis.Gamma_Function" via "HOL-Analysis.Equivalence_Lebesgue_Henstock_Integration" via "HOL-Analysis.Homeomorphism")
### theory "HOL-Analysis.Caratheodory"
### 0.491s elapsed time, 1.910s cpu time, 0.511s GC time
Loading theory "HOL-Analysis.Locally" (required by "Draft.SNF_AlgorithmMoreTemplates" via "Draft.SNF_Algorithm" via "Draft.Smith_Normal_Form_JNF" via "Draft.SNF_Missing_Lemmas" via "Hermite.Hermite" via "Echelon_Form.Echelon_Form_Inverse" via "Echelon_Form.Echelon_Form_Det" via "Echelon_Form.Echelon_Form" via "Echelon_Form.Rings2" via "HOL-Analysis.Analysis" via "HOL-Analysis.Abstract_Euclidean_Space")
Found termination order: "{}"
### theory "HOL-Analysis.Locally"
### 0.216s elapsed time, 0.845s cpu time, 0.104s GC time
Loading theory "Polynomial_Interpolation.Ring_Hom_Poly" (required by "Draft.SNF_AlgorithmMoreTemplates" via "Draft.SNF_Algorithm" via "Draft.Smith_Normal_Form_JNF" via "Draft.SNF_Missing_Lemmas" via "Draft.Mod_Type_Connect" via "Perron_Frobenius.HMA_Connect" via "Jordan_Normal_Form.Spectral_Radius" via "Jordan_Normal_Form.Jordan_Normal_Form_Existence" via "Jordan_Normal_Form.Jordan_Normal_Form" via "Jordan_Normal_Form.Char_Poly")
instantiation
  blinfun :: (real_normed_vector, real_normed_vector) real_normed_vector
  uminus_blinfun == uminus ::
    'a \<Rightarrow>\<^sub>L 'b => 'a \<Rightarrow>\<^sub>L 'b
  zero_blinfun == zero_class.zero :: 'a \<Rightarrow>\<^sub>L 'b
  minus_blinfun == minus ::
    'a \<Rightarrow>\<^sub>L 'b
    => 'a \<Rightarrow>\<^sub>L 'b => 'a \<Rightarrow>\<^sub>L 'b
  plus_blinfun == plus ::
    'a \<Rightarrow>\<^sub>L 'b
    => 'a \<Rightarrow>\<^sub>L 'b => 'a \<Rightarrow>\<^sub>L 'b
  sgn_blinfun == sgn ::
    'a \<Rightarrow>\<^sub>L 'b => 'a \<Rightarrow>\<^sub>L 'b
  norm_blinfun == norm :: 'a \<Rightarrow>\<^sub>L 'b => real
  scaleR_blinfun == scaleR ::
    real => 'a \<Rightarrow>\<^sub>L 'b => 'a \<Rightarrow>\<^sub>L 'b
  dist_blinfun == dist ::
    'a \<Rightarrow>\<^sub>L 'b => 'a \<Rightarrow>\<^sub>L 'b => real
  uniformity_blinfun == uniformity ::
    ('a \<Rightarrow>\<^sub>L 'b * 'a \<Rightarrow>\<^sub>L 'b) filter
  open_blinfun == open :: ('a \<Rightarrow>\<^sub>L 'b) set => bool
instantiation
  mat :: (ord) ord
  less_eq_mat == less_eq :: 'a mat => 'a mat => bool
  less_mat == less :: 'a mat => 'a mat => bool
instantiation
  mat :: (preorder) preorder
instantiation
  mat :: (order) order
instantiation
  mat :: (plus) plus
  plus_mat == plus :: 'a mat => 'a mat => 'a mat
instantiation
  mat :: (uminus) uminus
  uminus_mat == uminus :: 'a mat => 'a mat
instantiation
  mat :: (minus) minus
  minus_mat == minus :: 'a mat => 'a mat => 'a mat
instantiation
  mat :: (semiring_0) times
  times_mat == times :: 'a mat => 'a mat => 'a mat
locale bounded_bilinear
  fixes prod :: "'a => 'b => 'c"  (infixl \<open>**\<close> 70)
  assumes "bounded_bilinear (**)"
locale zero_hom
  fixes hom :: "'a => 'b"
  assumes "zero_hom hom"
locale map_poly_zero_hom
  fixes hom :: "'a => 'b"
  assumes "map_poly_zero_hom hom"
locale comm_monoid_add_hom
  fixes hom :: "'a => 'b"
  assumes "comm_monoid_add_hom hom"
locale map_poly_comm_monoid_add_hom
  fixes hom :: "'a => 'b"
  assumes "map_poly_comm_monoid_add_hom hom"
locale comm_semiring_hom
  fixes hom :: "'a => 'b"
  assumes "comm_semiring_hom hom"
locale bounded_bilinear
  fixes prod :: "'a => 'b => 'c"  (infixl \<open>**\<close> 70)
  assumes "bounded_bilinear (**)"
locale map_poly_comm_semiring_hom
  fixes hom :: "'a => 'b"
  assumes "map_poly_comm_semiring_hom hom"
locale map_poly_comm_ring_hom
  fixes hom :: "'a => 'b"
  assumes "map_poly_comm_ring_hom hom"
locale map_poly_idom_hom
  fixes hom :: "'a => 'b"
  assumes "map_poly_idom_hom hom"
locale map_poly_inj_zero_hom
  fixes hom :: "'a => 'b"
  assumes "map_poly_inj_zero_hom hom"
Found termination order: "(%p. size (snd p)) <*mlex*> {}"
locale map_poly_inj_comm_monoid_add_hom
  fixes hom :: "'a => 'b"
  assumes "map_poly_inj_comm_monoid_add_hom hom"
locale map_poly_inj_comm_semiring_hom
  fixes hom :: "'a => 'b"
  assumes "map_poly_inj_comm_semiring_hom hom"
### theory "HOL-Analysis.Bounded_Linear_Function"
### 2.206s elapsed time, 8.560s cpu time, 1.456s GC time
Loading theory "HOL-Analysis.Derivative" (required by "Draft.SNF_AlgorithmMoreTemplates" via "Draft.SNF_Algorithm" via "Draft.Smith_Normal_Form_JNF" via "Draft.SNF_Missing_Lemmas" via "Hermite.Hermite" via "Echelon_Form.Echelon_Form_Inverse" via "Echelon_Form.Echelon_Form_Det" via "Echelon_Form.Echelon_Form" via "Echelon_Form.Rings2" via "HOL-Analysis.Analysis")
locale map_poly_inj_comm_ring_hom
  fixes hom :: "'a => 'b"
  assumes "map_poly_inj_comm_ring_hom hom"
locale map_poly_inj_idom_hom
  fixes hom :: "'a => 'b"
  assumes "map_poly_inj_idom_hom hom"
locale zero_hom_0
  fixes hom :: "'a => 'b"
  assumes "zero_hom_0 hom"
locale comm_semiring_hom
  fixes hom :: "'a => 'b"
  assumes "comm_semiring_hom hom"
locale comm_semiring_hom
  fixes hom :: "'a => 'b"
  assumes "comm_semiring_hom hom"
locale comm_ring_hom
  fixes hom :: "'a => 'b"
  assumes "comm_ring_hom hom"
Found termination order: "length <*mlex*> {}"
locale Retracts
  fixes s :: "'a set"
    and h :: "'a => 'b"
    and t :: "'b set"
    and k :: "'b => 'a"
  assumes "Retracts s h t k"
locale field_hom
  fixes hom :: "'a => 'b"
  assumes "field_hom hom"
locale field_hom'
  fixes hom :: "'a => 'b"
  assumes "field_hom' hom"
locale map_poly_inj_idom_divide_hom
  fixes hom :: "'a => 'b"
  assumes "map_poly_inj_idom_divide_hom hom"
locale semiring_hom
  fixes hom :: "'a => 'b"
  assumes "semiring_hom hom"
### theory "Polynomial_Interpolation.Ring_Hom_Poly"
### 4.401s elapsed time, 16.567s cpu time, 9.648s GC time
Loading theory "VectorSpace.SumSpaces" (required by "Draft.SNF_AlgorithmMoreTemplates" via "Draft.SNF_Algorithm" via "Draft.Smith_Normal_Form_JNF" via "Draft.SNF_Missing_Lemmas" via "Draft.Mod_Type_Connect" via "Perron_Frobenius.HMA_Connect" via "Jordan_Normal_Form.Spectral_Radius" via "Jordan_Normal_Form.Jordan_Normal_Form_Existence" via "Jordan_Normal_Form.Schur_Decomposition" via "Jordan_Normal_Form.Gram_Schmidt" via "Jordan_Normal_Form.VS_Connect" via "Jordan_Normal_Form.Missing_VectorSpace" via "VectorSpace.VectorSpace")
instantiation
  vec :: (conjugate) conjugate
  conjugate_vec == conjugate :: 'a vec => 'a vec
### theory "HOL-Analysis.Homotopy"
### 4.730s elapsed time, 17.843s cpu time, 9.843s GC time
Loading theory "HOL-Analysis.Homeomorphism" (required by "Draft.SNF_AlgorithmMoreTemplates" via "Draft.SNF_Algorithm" via "Draft.Smith_Normal_Form_JNF" via "Draft.SNF_Missing_Lemmas" via "Hermite.Hermite" via "Echelon_Form.Echelon_Form_Inverse" via "Echelon_Form.Echelon_Form_Det" via "Echelon_Form.Echelon_Form" via "Echelon_Form.Rings2" via "HOL-Analysis.Analysis" via "HOL-Analysis.Ball_Volume" via "HOL-Analysis.Gamma_Function" via "HOL-Analysis.Equivalence_Lebesgue_Henstock_Integration")
### theory "Jordan_Normal_Form.Matrix"
### 6.657s elapsed time, 25.404s cpu time, 11.160s GC time
Loading theory "HOL-Analysis.Abstract_Euclidean_Space" (required by "Draft.SNF_AlgorithmMoreTemplates" via "Draft.SNF_Algorithm" via "Draft.Smith_Normal_Form_JNF" via "Draft.SNF_Missing_Lemmas" via "Hermite.Hermite" via "Echelon_Form.Echelon_Form_Inverse" via "Echelon_Form.Echelon_Form_Det" via "Echelon_Form.Echelon_Form" via "Echelon_Form.Rings2" via "HOL-Analysis.Analysis")
### theory "VectorSpace.SumSpaces"
### 0.525s elapsed time, 2.053s cpu time, 0.356s GC time
Loading theory "Jordan_Normal_Form.DL_Submatrix" (required by "Draft.SNF_AlgorithmMoreTemplates" via "Draft.SNF_Algorithm" via "Draft.Smith_Normal_Form_JNF" via "Draft.SNF_Missing_Lemmas" via "Jordan_Normal_Form.DL_Rank_Submatrix")
### theory "HOL-Analysis.Abstract_Euclidean_Space"
### 0.399s elapsed time, 1.551s cpu time, 0.320s GC time
Loading theory "Jordan_Normal_Form.Gauss_Jordan_Elimination" (required by "Draft.SNF_AlgorithmMoreTemplates" via "Draft.SNF_Algorithm" via "Draft.Smith_Normal_Form_JNF" via "Draft.SNF_Missing_Lemmas" via "Draft.Mod_Type_Connect" via "Perron_Frobenius.HMA_Connect" via "Jordan_Normal_Form.Spectral_Radius" via "Jordan_Normal_Form.Jordan_Normal_Form_Existence" via "Jordan_Normal_Form.Jordan_Normal_Form" via "Jordan_Normal_Form.Char_Poly" via "Jordan_Normal_Form.Determinant" via "Jordan_Normal_Form.Column_Operations")
### theory "HOL-Analysis.Homeomorphism"
### 0.661s elapsed time, 2.575s cpu time, 0.460s GC time
Loading theory "VectorSpace.VectorSpace" (required by "Draft.SNF_AlgorithmMoreTemplates" via "Draft.SNF_Algorithm" via "Draft.Smith_Normal_Form_JNF" via "Draft.SNF_Missing_Lemmas" via "Draft.Mod_Type_Connect" via "Perron_Frobenius.HMA_Connect" via "Jordan_Normal_Form.Spectral_Radius" via "Jordan_Normal_Form.Jordan_Normal_Form_Existence" via "Jordan_Normal_Form.Schur_Decomposition" via "Jordan_Normal_Form.Gram_Schmidt" via "Jordan_Normal_Form.VS_Connect" via "Jordan_Normal_Form.Missing_VectorSpace")
### theory "Jordan_Normal_Form.DL_Submatrix"
### 0.361s elapsed time, 1.401s cpu time, 0.254s GC time
"{False, True}"
  :: "bool set"
"{False, True}"
  :: "bool set"
Found termination order:
  "(%p. size_list (%p. size (snd p)) (snd (snd p))) <*mlex*> {}"
locale vectorspace
  fixes K :: "('a, 'b) ring_scheme"
    and V :: "('a, 'c, 'd) module_scheme"
  assumes "vectorspace K V"
### theory "HOL-Analysis.Derivative"
### 4.466s elapsed time, 16.992s cpu time, 9.749s GC time
Loading theory "HOL-Analysis.Borel_Space" (required by "Draft.SNF_AlgorithmMoreTemplates" via "Draft.SNF_Algorithm" via "Draft.Smith_Normal_Form_JNF" via "Draft.SNF_Missing_Lemmas" via "Hermite.Hermite" via "Echelon_Form.Echelon_Form_Inverse" via "Echelon_Form.Echelon_Form_Det" via "Echelon_Form.Echelon_Form" via "Echelon_Form.Rings2" via "HOL-Analysis.Analysis" via "HOL-Analysis.Ball_Volume" via "HOL-Analysis.Gamma_Function" via "HOL-Analysis.Equivalence_Lebesgue_Henstock_Integration" via "HOL-Analysis.Lebesgue_Measure" via "HOL-Analysis.Finite_Product_Measure" via "HOL-Analysis.Binary_Product_Measure" via "HOL-Analysis.Nonnegative_Lebesgue_Integration")
"{a\<^sub>1, a\<^sub>2}"
  :: "Enum.finite_2 set"
Loading theory "HOL-Analysis.Cartesian_Euclidean_Space" (required by "Draft.SNF_AlgorithmMoreTemplates" via "Draft.SNF_Algorithm" via "Draft.Smith_Normal_Form_JNF" via "Draft.SNF_Missing_Lemmas" via "Hermite.Hermite" via "Echelon_Form.Echelon_Form_Inverse" via "Echelon_Form.Echelon_Form_Det" via "Echelon_Form.Echelon_Form" via "Echelon_Form.Rings2" via "HOL-Analysis.Analysis")
locale subspace
  fixes K :: "('a, 'b) ring_scheme"
    and W :: "'c set"
    and V :: "('a, 'c, 'd) module_scheme"  (structure)
  assumes "subspace K W V"
### Ignoring duplicate rewrite rule:
### carrier (vs ?y) == ?y
### theory "HOL-Analysis.Cartesian_Euclidean_Space"
### 0.382s elapsed time, 1.481s cpu time, 0.266s GC time
Loading theory "Cayley_Hamilton.Square_Matrix" (required by "Draft.SNF_AlgorithmMoreTemplates" via "Draft.SNF_Algorithm" via "Draft.Smith_Normal_Form_JNF" via "Draft.SNF_Missing_Lemmas" via "Hermite.Hermite" via "Echelon_Form.Echelon_Form_Inverse" via "Echelon_Form.Echelon_Form_Det" via "Echelon_Form.Echelon_Form" via "Echelon_Form.Cayley_Hamilton_Compatible" via "Cayley_Hamilton.Cayley_Hamilton")
locale linear_map
  fixes K :: "('a, 'b) ring_scheme"
    and V :: "('a, 'c, 'd) module_scheme"
    and W :: "('a, 'e, 'f) module_scheme"
    and T :: "'c => 'e"
  assumes "linear_map K V W T"
### theory "Jordan_Normal_Form.Gauss_Jordan_Elimination"
### 1.410s elapsed time, 5.601s cpu time, 0.954s GC time
Loading theory "HOL-Analysis.Cross3" (required by "Draft.SNF_AlgorithmMoreTemplates" via "Draft.SNF_Algorithm" via "Draft.Smith_Normal_Form_JNF" via "Draft.SNF_Missing_Lemmas" via "Hermite.Hermite" via "Echelon_Form.Echelon_Form_Inverse" via "Echelon_Form.Echelon_Form_Det" via "Echelon_Form.Echelon_Form" via "Echelon_Form.Rings2" via "HOL-Analysis.Analysis")
locale linear_map
  fixes K :: "('a, 'b) ring_scheme"
    and V :: "('a, 'c, 'd) module_scheme"
    and W :: "('a, 'e, 'f) module_scheme"
    and T :: "'c => 'e"
  assumes "linear_map K V W T"
### Ignoring duplicate rewrite rule:
### T \<zero>\<^bsub>V\<^esub> == \<zero>\<^bsub>W\<^esub>
instantiation
  sq_matrix :: (semigroup_add, finite) semigroup_add
  plus_sq_matrix == plus ::
    ('a, 'b) sq_matrix => ('a, 'b) sq_matrix => ('a, 'b) sq_matrix
instantiation
  sq_matrix :: (monoid_add, finite) monoid_add
  zero_sq_matrix == zero_class.zero :: ('a, 'b) sq_matrix
instantiation
  sq_matrix :: (minus, finite) minus
  minus_sq_matrix == minus ::
    ('a, 'b) sq_matrix => ('a, 'b) sq_matrix => ('a, 'b) sq_matrix
instantiation
  sq_matrix :: (group_add, finite) group_add
  uminus_sq_matrix == uminus :: ('a, 'b) sq_matrix => ('a, 'b) sq_matrix
instantiation
  sq_matrix :: (semiring_0, finite) semiring_0
  times_sq_matrix == times ::
    ('a, 'b) sq_matrix => ('a, 'b) sq_matrix => ('a, 'b) sq_matrix
instantiation
  sq_matrix :: (semiring_1, finite) semiring_1
  one_sq_matrix == one_class.one :: ('a, 'b) sq_matrix
instantiation
  sq_matrix :: (real_vector, finite) real_vector
  scaleR_sq_matrix == scaleR ::
    real => ('a, 'b) sq_matrix => ('a, 'b) sq_matrix
bundle cross3_syntax
### theory "HOL-Analysis.Borel_Space"
### 2.418s elapsed time, 9.163s cpu time, 2.017s GC time
Loading theory "HOL-Analysis.Nonnegative_Lebesgue_Integration" (required by "Draft.SNF_AlgorithmMoreTemplates" via "Draft.SNF_Algorithm" via "Draft.Smith_Normal_Form_JNF" via "Draft.SNF_Missing_Lemmas" via "Hermite.Hermite" via "Echelon_Form.Echelon_Form_Inverse" via "Echelon_Form.Echelon_Form_Det" via "Echelon_Form.Echelon_Form" via "Echelon_Form.Rings2" via "HOL-Analysis.Analysis" via "HOL-Analysis.Ball_Volume" via "HOL-Analysis.Gamma_Function" via "HOL-Analysis.Equivalence_Lebesgue_Henstock_Integration" via "HOL-Analysis.Lebesgue_Measure" via "HOL-Analysis.Finite_Product_Measure" via "HOL-Analysis.Binary_Product_Measure")
### theory "Cayley_Hamilton.Square_Matrix"
### 37.725s elapsed time, 126.895s cpu time, 120.809s GC time
Loading theory "HOL-Analysis.Regularity" (required by "Draft.SNF_AlgorithmMoreTemplates" via "Draft.SNF_Algorithm" via "Draft.Smith_Normal_Form_JNF" via "Draft.SNF_Missing_Lemmas" via "Hermite.Hermite" via "Echelon_Form.Echelon_Form_Inverse" via "Echelon_Form.Echelon_Form_Det" via "Echelon_Form.Echelon_Form" via "Echelon_Form.Rings2" via "HOL-Analysis.Analysis" via "HOL-Analysis.Ball_Volume" via "HOL-Analysis.Gamma_Function" via "HOL-Analysis.Equivalence_Lebesgue_Henstock_Integration" via "HOL-Analysis.Lebesgue_Measure")
bundle no_cross3_syntax
### theory "HOL-Analysis.Regularity"
### 0.757s elapsed time, 2.989s cpu time, 0.258s GC time
Loading theory "Cayley_Hamilton.Cayley_Hamilton" (required by "Draft.SNF_AlgorithmMoreTemplates" via "Draft.SNF_Algorithm" via "Draft.Smith_Normal_Form_JNF" via "Draft.SNF_Missing_Lemmas" via "Hermite.Hermite" via "Echelon_Form.Echelon_Form_Inverse" via "Echelon_Form.Echelon_Form_Det" via "Echelon_Form.Echelon_Form" via "Echelon_Form.Cayley_Hamilton_Compatible")
### theory "HOL-Analysis.Cross3"
### 38.578s elapsed time, 130.313s cpu time, 120.940s GC time
Loading theory "HOL-Analysis.Complex_Analysis_Basics" (required by "Draft.SNF_AlgorithmMoreTemplates" via "Draft.SNF_Algorithm" via "Draft.Smith_Normal_Form_JNF" via "Draft.SNF_Missing_Lemmas" via "Hermite.Hermite" via "Echelon_Form.Echelon_Form_Inverse" via "Echelon_Form.Echelon_Form_Det" via "Echelon_Form.Echelon_Form" via "Echelon_Form.Rings2" via "HOL-Analysis.Analysis" via "HOL-Analysis.Ball_Volume" via "HOL-Analysis.Gamma_Function" via "HOL-Analysis.Harmonic_Numbers" via "HOL-Analysis.Complex_Transcendental")
### theory "Cayley_Hamilton.Cayley_Hamilton"
### 0.769s elapsed time, 3.044s cpu time, 0.336s GC time
Loading theory "HOL-Analysis.Lipschitz" (required by "Draft.SNF_AlgorithmMoreTemplates" via "Draft.SNF_Algorithm" via "Draft.Smith_Normal_Form_JNF" via "Draft.SNF_Missing_Lemmas" via "Hermite.Hermite" via "Echelon_Form.Echelon_Form_Inverse" via "Echelon_Form.Echelon_Form_Det" via "Echelon_Form.Echelon_Form" via "Echelon_Form.Rings2" via "HOL-Analysis.Analysis" via "HOL-Analysis.Multivariate_Analysis")
bundle lipschitz_syntax
bundle no_lipschitz_syntax
### theory "VectorSpace.VectorSpace"
### 40.102s elapsed time, 136.388s cpu time, 121.901s GC time
Loading theory "HOL-Analysis.Brouwer_Fixpoint" (required by "Draft.SNF_AlgorithmMoreTemplates" via "Draft.SNF_Algorithm" via "Draft.Smith_Normal_Form_JNF" via "Draft.SNF_Missing_Lemmas" via "Hermite.Hermite" via "Echelon_Form.Echelon_Form_Inverse" via "Echelon_Form.Echelon_Form_Det" via "Echelon_Form.Echelon_Form" via "Echelon_Form.Rings2" via "HOL-Analysis.Analysis" via "HOL-Analysis.Fashoda_Theorem")
### theory "HOL-Analysis.Nonnegative_Lebesgue_Integration"
### 1.783s elapsed time, 7.070s cpu time, 0.594s GC time
Loading theory "HOL-Analysis.Binary_Product_Measure" (required by "Draft.SNF_AlgorithmMoreTemplates" via "Draft.SNF_Algorithm" via "Draft.Smith_Normal_Form_JNF" via "Draft.SNF_Missing_Lemmas" via "Hermite.Hermite" via "Echelon_Form.Echelon_Form_Inverse" via "Echelon_Form.Echelon_Form_Det" via "Echelon_Form.Echelon_Form" via "Echelon_Form.Rings2" via "HOL-Analysis.Analysis" via "HOL-Analysis.Ball_Volume" via "HOL-Analysis.Gamma_Function" via "HOL-Analysis.Equivalence_Lebesgue_Henstock_Integration" via "HOL-Analysis.Lebesgue_Measure" via "HOL-Analysis.Finite_Product_Measure")
locale pair_sigma_finite
  fixes M1 :: "'a measure"
    and M2 :: "'b measure"
  assumes "pair_sigma_finite M1 M2"
### theory "HOL-Analysis.Lipschitz"
### 0.559s elapsed time, 2.211s cpu time, 0.203s GC time
Loading theory "HOL-Analysis.Multivariate_Analysis" (required by "Draft.SNF_AlgorithmMoreTemplates" via "Draft.SNF_Algorithm" via "Draft.Smith_Normal_Form_JNF" via "Draft.SNF_Missing_Lemmas" via "Hermite.Hermite" via "Echelon_Form.Echelon_Form_Inverse" via "Echelon_Form.Echelon_Form_Det" via "Echelon_Form.Echelon_Form" via "Echelon_Form.Rings2" via "HOL-Analysis.Analysis")
### theory "HOL-Analysis.Binary_Product_Measure"
### 0.605s elapsed time, 2.389s cpu time, 0.395s GC time
Loading theory "HOL-Analysis.Embed_Measure" (required by "Draft.SNF_AlgorithmMoreTemplates" via "Draft.SNF_Algorithm" via "Draft.Smith_Normal_Form_JNF" via "Draft.SNF_Missing_Lemmas" via "Hermite.Hermite" via "Echelon_Form.Echelon_Form_Inverse" via "Echelon_Form.Echelon_Form_Det" via "Echelon_Form.Echelon_Form" via "Echelon_Form.Rings2" via "HOL-Analysis.Analysis")
### theory "HOL-Analysis.Complex_Analysis_Basics"
### 1.129s elapsed time, 4.471s cpu time, 0.543s GC time
Loading theory "HOL-Analysis.Finite_Product_Measure" (required by "Draft.SNF_AlgorithmMoreTemplates" via "Draft.SNF_Algorithm" via "Draft.Smith_Normal_Form_JNF" via "Draft.SNF_Missing_Lemmas" via "Hermite.Hermite" via "Echelon_Form.Echelon_Form_Inverse" via "Echelon_Form.Echelon_Form_Det" via "Echelon_Form.Echelon_Form" via "Echelon_Form.Rings2" via "HOL-Analysis.Analysis" via "HOL-Analysis.Ball_Volume" via "HOL-Analysis.Gamma_Function" via "HOL-Analysis.Equivalence_Lebesgue_Henstock_Integration" via "HOL-Analysis.Lebesgue_Measure")
locale kuhn_simplex
  fixes p :: "nat"
    and n :: "nat"
    and base :: "nat => nat"
    and upd :: "nat => nat"
    and s :: "(nat => nat) set"
  assumes "kuhn_simplex p n base upd s"
locale kuhn_simplex_pair
  fixes p :: "nat"
    and n :: "nat"
    and b_s :: "nat => nat"
    and u_s :: "nat => nat"
    and s :: "(nat => nat) set"
    and b_t :: "nat => nat"
    and u_t :: "nat => nat"
    and t :: "(nat => nat) set"
  assumes "kuhn_simplex_pair p n b_s u_s s b_t u_t t"
Proofs for inductive predicate(s) "ksimplex"
  Proving monotonicity ...
### theory "HOL-Analysis.Embed_Measure"
### 0.198s elapsed time, 0.797s cpu time, 0.000s GC time
Loading theory "HOL-Analysis.Complex_Transcendental" (required by "Draft.SNF_AlgorithmMoreTemplates" via "Draft.SNF_Algorithm" via "Draft.Smith_Normal_Form_JNF" via "Draft.SNF_Missing_Lemmas" via "Hermite.Hermite" via "Echelon_Form.Echelon_Form_Inverse" via "Echelon_Form.Echelon_Form_Det" via "Echelon_Form.Echelon_Form" via "Echelon_Form.Rings2" via "HOL-Analysis.Analysis" via "HOL-Analysis.Ball_Volume" via "HOL-Analysis.Gamma_Function" via "HOL-Analysis.Harmonic_Numbers")
### theory "HOL-Analysis.Brouwer_Fixpoint"
### 1.320s elapsed time, 5.236s cpu time, 0.647s GC time
Loading theory "HOL-Analysis.Fashoda_Theorem" (required by "Draft.SNF_AlgorithmMoreTemplates" via "Draft.SNF_Algorithm" via "Draft.Smith_Normal_Form_JNF" via "Draft.SNF_Missing_Lemmas" via "Hermite.Hermite" via "Echelon_Form.Echelon_Form_Inverse" via "Echelon_Form.Echelon_Form_Det" via "Echelon_Form.Echelon_Form" via "Echelon_Form.Rings2" via "HOL-Analysis.Analysis")
locale product_sigma_finite
  fixes M :: "'i => 'a measure"
  assumes "product_sigma_finite M"
locale finite_product_sigma_finite
  fixes M :: "'i => 'a measure"
    and I :: "'i set"
  assumes "finite_product_sigma_finite M I"
### theory "HOL-Analysis.Finite_Product_Measure"
### 0.926s elapsed time, 3.673s cpu time, 0.453s GC time
Loading theory "HOL-Analysis.Bochner_Integration" (required by "Draft.SNF_AlgorithmMoreTemplates" via "Draft.SNF_Algorithm" via "Draft.Smith_Normal_Form_JNF" via "Draft.SNF_Missing_Lemmas" via "Hermite.Hermite" via "Echelon_Form.Echelon_Form_Inverse" via "Echelon_Form.Echelon_Form_Det" via "Echelon_Form.Echelon_Form" via "Echelon_Form.Rings2" via "HOL-Analysis.Analysis" via "HOL-Analysis.Ball_Volume" via "HOL-Analysis.Gamma_Function" via "HOL-Analysis.Equivalence_Lebesgue_Henstock_Integration" via "HOL-Analysis.Lebesgue_Measure" via "HOL-Analysis.Complete_Measure")
### theory "HOL-Analysis.Multivariate_Analysis"
### 1.340s elapsed time, 5.321s cpu time, 0.645s GC time
Loading theory "HOL-Analysis.Retracts" (required by "Draft.SNF_AlgorithmMoreTemplates" via "Draft.SNF_Algorithm" via "Draft.Smith_Normal_Form_JNF" via "Draft.SNF_Missing_Lemmas" via "Hermite.Hermite" via "Echelon_Form.Echelon_Form_Inverse" via "Echelon_Form.Echelon_Form_Det" via "Echelon_Form.Echelon_Form" via "Echelon_Form.Rings2" via "HOL-Analysis.Analysis" via "HOL-Analysis.Jordan_Curve" via "HOL-Analysis.Further_Topology")
instantiation
  complex :: ln
  ln_complex == ln :: complex => complex
### theory "HOL-Analysis.Fashoda_Theorem"
### 0.570s elapsed time, 2.253s cpu time, 0.414s GC time
Loading theory "HOL-Analysis.Polytope" (required by "Draft.SNF_AlgorithmMoreTemplates" via "Draft.SNF_Algorithm" via "Draft.Smith_Normal_Form_JNF" via "Draft.SNF_Missing_Lemmas" via "Hermite.Hermite" via "Echelon_Form.Echelon_Form_Inverse" via "Echelon_Form.Echelon_Form_Det" via "Echelon_Form.Echelon_Form" via "Echelon_Form.Rings2" via "HOL-Analysis.Analysis")
Proofs for inductive predicate(s) "simple_bochner_integrable"
  Proving monotonicity ...
Proofs for inductive predicate(s) "has_bochner_integral"
  Proving monotonicity ...
Proofs for inductive predicate(s) "integrable"
  Proving monotonicity ...
### theory "HOL-Analysis.Complex_Transcendental"
### 1.922s elapsed time, 7.593s cpu time, 1.288s GC time
Loading theory "HOL-Analysis.Generalised_Binomial_Theorem" (required by "Draft.SNF_AlgorithmMoreTemplates" via "Draft.SNF_Algorithm" via "Draft.Smith_Normal_Form_JNF" via "Draft.SNF_Missing_Lemmas" via "Hermite.Hermite" via "Echelon_Form.Echelon_Form_Inverse" via "Echelon_Form.Echelon_Form_Det" via "Echelon_Form.Echelon_Form" via "Echelon_Form.Rings2" via "HOL-Analysis.Analysis")
### theory "HOL-Analysis.Retracts"
### 1.141s elapsed time, 4.496s cpu time, 0.835s GC time
Loading theory "HOL-Analysis.Harmonic_Numbers" (required by "Draft.SNF_AlgorithmMoreTemplates" via "Draft.SNF_Algorithm" via "Draft.Smith_Normal_Form_JNF" via "Draft.SNF_Missing_Lemmas" via "Hermite.Hermite" via "Echelon_Form.Echelon_Form_Inverse" via "Echelon_Form.Echelon_Form_Det" via "Echelon_Form.Echelon_Form" via "Echelon_Form.Rings2" via "HOL-Analysis.Analysis" via "HOL-Analysis.Ball_Volume" via "HOL-Analysis.Gamma_Function")
### theory "HOL-Analysis.Generalised_Binomial_Theorem"
### 0.160s elapsed time, 0.624s cpu time, 0.244s GC time
Loading theory "HOL-Analysis.FPS_Convergence" (required by "Draft.SNF_AlgorithmMoreTemplates" via "Draft.SNF_Algorithm" via "Draft.Smith_Normal_Form_JNF" via "Draft.SNF_Missing_Lemmas" via "Hermite.Hermite" via "Echelon_Form.Echelon_Form_Inverse" via "Echelon_Form.Echelon_Form_Det" via "Echelon_Form.Echelon_Form" via "Echelon_Form.Rings2" via "HOL-Analysis.Analysis")
### theory "HOL-Analysis.Harmonic_Numbers"
### 0.245s elapsed time, 0.963s cpu time, 0.244s GC time
Loading theory "HOL-Analysis.Infinite_Products" (required by "Draft.SNF_AlgorithmMoreTemplates" via "Draft.SNF_Algorithm" via "Draft.Smith_Normal_Form_JNF" via "Draft.SNF_Missing_Lemmas" via "Hermite.Hermite" via "Echelon_Form.Echelon_Form_Inverse" via "Echelon_Form.Echelon_Form_Det" via "Echelon_Form.Echelon_Form" via "Echelon_Form.Rings2" via "HOL-Analysis.Analysis")
### theory "HOL-Analysis.Bochner_Integration"
### 1.652s elapsed time, 6.511s cpu time, 1.305s GC time
Loading theory "HOL-Analysis.Complete_Measure" (required by "Draft.SNF_AlgorithmMoreTemplates" via "Draft.SNF_Algorithm" via "Draft.Smith_Normal_Form_JNF" via "Draft.SNF_Missing_Lemmas" via "Hermite.Hermite" via "Echelon_Form.Echelon_Form_Inverse" via "Echelon_Form.Echelon_Form_Det" via "Echelon_Form.Echelon_Form" via "Echelon_Form.Rings2" via "HOL-Analysis.Analysis" via "HOL-Analysis.Ball_Volume" via "HOL-Analysis.Gamma_Function" via "HOL-Analysis.Equivalence_Lebesgue_Henstock_Integration" via "HOL-Analysis.Lebesgue_Measure")
locale complete_measure
  fixes M :: "'a measure"
  assumes "complete_measure M"
### theory "HOL-Analysis.Polytope"
### 1.666s elapsed time, 6.569s cpu time, 1.341s GC time
Loading theory "HOL-Analysis.Radon_Nikodym" (required by "Draft.SNF_AlgorithmMoreTemplates" via "Draft.SNF_Algorithm" via "Draft.Smith_Normal_Form_JNF" via "Draft.SNF_Missing_Lemmas" via "Hermite.Hermite" via "Echelon_Form.Echelon_Form_Inverse" via "Echelon_Form.Echelon_Form_Det" via "Echelon_Form.Echelon_Form" via "Echelon_Form.Rings2" via "HOL-Analysis.Analysis" via "HOL-Analysis.Ball_Volume" via "HOL-Analysis.Gamma_Function" via "HOL-Analysis.Equivalence_Lebesgue_Henstock_Integration" via "HOL-Analysis.Set_Integral")
locale semifinite_measure
  fixes M :: "'a measure"
  assumes "semifinite_measure M"
locale locally_determined_measure
  fixes M :: "'a measure"
  assumes "locally_determined_measure M"
locale cld_measure
  fixes M :: "'a measure"
  assumes "cld_measure M"
### theory "HOL-Analysis.Infinite_Products"
### 0.685s elapsed time, 2.693s cpu time, 0.673s GC time
Loading theory "HOL-Analysis.Smooth_Paths" (required by "Draft.SNF_AlgorithmMoreTemplates" via "Draft.SNF_Algorithm" via "Draft.Smith_Normal_Form_JNF" via "Draft.SNF_Missing_Lemmas" via "Hermite.Hermite" via "Echelon_Form.Echelon_Form_Inverse" via "Echelon_Form.Echelon_Form_Det" via "Echelon_Form.Echelon_Form" via "Echelon_Form.Rings2" via "HOL-Analysis.Analysis")
### theory "HOL-Analysis.Radon_Nikodym"
### 0.359s elapsed time, 1.420s cpu time, 0.197s GC time
Loading theory "HOL-Analysis.Set_Integral" (required by "Draft.SNF_AlgorithmMoreTemplates" via "Draft.SNF_Algorithm" via "Draft.Smith_Normal_Form_JNF" via "Draft.SNF_Missing_Lemmas" via "Hermite.Hermite" via "Echelon_Form.Echelon_Form_Inverse" via "Echelon_Form.Echelon_Form_Det" via "Echelon_Form.Echelon_Form" via "Echelon_Form.Rings2" via "HOL-Analysis.Analysis" via "HOL-Analysis.Ball_Volume" via "HOL-Analysis.Gamma_Function" via "HOL-Analysis.Equivalence_Lebesgue_Henstock_Integration")
### theory "HOL-Analysis.Complete_Measure"
### 0.589s elapsed time, 2.323s cpu time, 0.446s GC time
Loading theory "HOL-Analysis.Lebesgue_Measure" (required by "Draft.SNF_AlgorithmMoreTemplates" via "Draft.SNF_Algorithm" via "Draft.Smith_Normal_Form_JNF" via "Draft.SNF_Missing_Lemmas" via "Hermite.Hermite" via "Echelon_Form.Echelon_Form_Inverse" via "Echelon_Form.Echelon_Form_Det" via "Echelon_Form.Echelon_Form" via "Echelon_Form.Rings2" via "HOL-Analysis.Analysis" via "HOL-Analysis.Ball_Volume" via "HOL-Analysis.Gamma_Function" via "HOL-Analysis.Equivalence_Lebesgue_Henstock_Integration")
### theory "HOL-Analysis.Smooth_Paths"
### 0.213s elapsed time, 0.832s cpu time, 0.243s GC time
Loading theory "HOL-Analysis.Weierstrass_Theorems" (required by "Draft.SNF_AlgorithmMoreTemplates" via "Draft.SNF_Algorithm" via "Draft.Smith_Normal_Form_JNF" via "Draft.SNF_Missing_Lemmas" via "Hermite.Hermite" via "Echelon_Form.Echelon_Form_Inverse" via "Echelon_Form.Echelon_Form_Det" via "Echelon_Form.Echelon_Form" via "Echelon_Form.Rings2" via "HOL-Analysis.Analysis")
### theory "HOL-Analysis.FPS_Convergence"
### 1.253s elapsed time, 4.944s cpu time, 0.915s GC time
Loading theory "Jordan_Normal_Form.Column_Operations" (required by "Draft.SNF_AlgorithmMoreTemplates" via "Draft.SNF_Algorithm" via "Draft.Smith_Normal_Form_JNF" via "Draft.SNF_Missing_Lemmas" via "Draft.Mod_Type_Connect" via "Perron_Frobenius.HMA_Connect" via "Jordan_Normal_Form.Spectral_Radius" via "Jordan_Normal_Form.Jordan_Normal_Form_Existence" via "Jordan_Normal_Form.Jordan_Normal_Form" via "Jordan_Normal_Form.Char_Poly" via "Jordan_Normal_Form.Determinant")
### theory "HOL-Analysis.Set_Integral"
### 0.654s elapsed time, 2.574s cpu time, 0.548s GC time
Loading theory "HOL-Analysis.Infinite_Set_Sum" (required by "Draft.SNF_AlgorithmMoreTemplates" via "Draft.SNF_Algorithm" via "Draft.Smith_Normal_Form_JNF" via "Draft.SNF_Missing_Lemmas" via "Hermite.Hermite" via "Echelon_Form.Echelon_Form_Inverse" via "Echelon_Form.Echelon_Form_Det" via "Echelon_Form.Echelon_Form" via "Echelon_Form.Rings2" via "HOL-Analysis.Analysis")
Found termination order: "(%p. size (snd p)) <*mlex*> {}"
locale function_ring_on
  fixes R :: "('a => real) set"
    and S :: "'a set"
  assumes "function_ring_on R S"
Found termination order: "(%p. size (snd p)) <*mlex*> {}"
### theory "Jordan_Normal_Form.Column_Operations"
### 0.486s elapsed time, 1.924s cpu time, 0.305s GC time
Loading theory "Jordan_Normal_Form.Determinant" (required by "Draft.SNF_AlgorithmMoreTemplates" via "Draft.SNF_Algorithm" via "Draft.Smith_Normal_Form_JNF" via "Draft.SNF_Missing_Lemmas" via "Draft.Mod_Type_Connect" via "Perron_Frobenius.HMA_Connect" via "Jordan_Normal_Form.Spectral_Radius" via "Jordan_Normal_Form.Jordan_Normal_Form_Existence" via "Jordan_Normal_Form.Jordan_Normal_Form" via "Jordan_Normal_Form.Char_Poly")
Proofs for inductive predicate(s) "real_polynomial_function"
  Proving monotonicity ...
### theory "HOL-Analysis.Weierstrass_Theorems"
### 1.010s elapsed time, 4.004s cpu time, 0.493s GC time
Loading theory "Rank_Nullity_Theorem.Mod_Type" (required by "Draft.SNF_AlgorithmMoreTemplates" via "Draft.SNF_Algorithm" via "Draft.Smith_Normal_Form_JNF" via "Draft.SNF_Missing_Lemmas" via "Hermite.Hermite" via "Echelon_Form.Echelon_Form_Inverse" via "Echelon_Form.Echelon_Form_Det" via "Echelon_Form.Echelon_Form" via "Gauss_Jordan.Determinants2" via "Gauss_Jordan.Gauss_Jordan_PA" via "Gauss_Jordan.Gauss_Jordan" via "Gauss_Jordan.Rref")
Proofs for inductive predicate(s) "fsigma"
  Proving monotonicity ...
Proofs for inductive predicate(s) "gdelta"
  Proving monotonicity ...
### theory "HOL-Analysis.Infinite_Set_Sum"
### 1.068s elapsed time, 4.224s cpu time, 0.532s GC time
Loading theory "Jordan_Normal_Form.Missing_VectorSpace" (required by "Draft.SNF_AlgorithmMoreTemplates" via "Draft.SNF_Algorithm" via "Draft.Smith_Normal_Form_JNF" via "Draft.SNF_Missing_Lemmas" via "Draft.Mod_Type_Connect" via "Perron_Frobenius.HMA_Connect" via "Jordan_Normal_Form.Spectral_Radius" via "Jordan_Normal_Form.Jordan_Normal_Form_Existence" via "Jordan_Normal_Form.Schur_Decomposition" via "Jordan_Normal_Form.Gram_Schmidt" via "Jordan_Normal_Form.VS_Connect")
### theory "HOL-Analysis.Lebesgue_Measure"
### 1.692s elapsed time, 6.676s cpu time, 0.965s GC time
Loading theory "HOL-Analysis.Henstock_Kurzweil_Integration" (required by "Draft.SNF_AlgorithmMoreTemplates" via "Draft.SNF_Algorithm" via "Draft.Smith_Normal_Form_JNF" via "Draft.SNF_Missing_Lemmas" via "Hermite.Hermite" via "Echelon_Form.Echelon_Form_Inverse" via "Echelon_Form.Echelon_Form_Det" via "Echelon_Form.Echelon_Form" via "Echelon_Form.Rings2" via "HOL-Analysis.Analysis" via "HOL-Analysis.Ball_Volume" via "HOL-Analysis.Gamma_Function" via "HOL-Analysis.Equivalence_Lebesgue_Henstock_Integration")
locale Missing_VectorSpace.comp_fun_commute_on
  fixes f :: "'a => 'a => 'a"
    and A :: "'a set"
  assumes "Missing_VectorSpace.comp_fun_commute_on f A"
class mod_type = times + neg_numeral + wellorder +
  fixes Rep :: "'a => int"
    and Abs :: "int => 'a"
  assumes "type": "type_definition Rep Abs {0..<int CARD('a)}"
    and "size1": "1 < int CARD('a)"
    and "zero_def": "(0::'a) = Abs 0"
    and "one_def": "(1::'a) = Abs 1"
    and "add_def": "!!x y. x + y = Abs ((Rep x + Rep y) mod int CARD('a))"
    and "mult_def": "!!x y. x * y = Abs (Rep x * Rep y mod int CARD('a))"
    and "diff_def": "!!x y. x - y = Abs ((Rep x - Rep y) mod int CARD('a))"
    and "minus_def": "!!x. - x = Abs (- Rep x mod int CARD('a))"
    and "strict_mono_Rep": "strict_mono Rep"
locale Missing_VectorSpace.comp_fun_commute_on
  fixes f :: "'a => 'a => 'a"
    and A :: "'a set"
  assumes "Missing_VectorSpace.comp_fun_commute_on f A"
locale abelian_group
  fixes G :: "('a, 'b) ring_scheme"  (structure)
  assumes "abelian_group G"
locale vectorspace
  fixes K :: "('a, 'b) ring_scheme"
    and V :: "('a, 'c, 'd) module_scheme"
  assumes "vectorspace K V"
### Cannot skip proof of schematic goal statement
### theory "Jordan_Normal_Form.Determinant"
### 1.755s elapsed time, 6.907s cpu time, 1.174s GC time
Loading theory "Jordan_Normal_Form.Char_Poly" (required by "Draft.SNF_AlgorithmMoreTemplates" via "Draft.SNF_Algorithm" via "Draft.Smith_Normal_Form_JNF" via "Draft.SNF_Missing_Lemmas" via "Draft.Mod_Type_Connect" via "Perron_Frobenius.HMA_Connect" via "Jordan_Normal_Form.Spectral_Radius" via "Jordan_Normal_Form.Jordan_Normal_Form_Existence" via "Jordan_Normal_Form.Jordan_Normal_Form")
locale module
  fixes R :: "('a, 'b) ring_scheme"  (structure)
    and M :: "('a, 'c, 'd) module_scheme"  (structure)
  assumes "module R M"
locale linear_map
  fixes K :: "('a, 'b) ring_scheme"
    and V :: "('a, 'c, 'd) module_scheme"
    and W :: "('a, 'e, 'f) module_scheme"
    and T :: "'c => 'e"
  assumes "linear_map K V W T"
instantiation
  bit0 :: (finite) mod_type
  bit1 :: (finite) mod_type
  Rep_bit0 == Rep :: 'a bit0 => int
  Abs_bit0 == Abs :: int => 'a bit0
  Rep_bit1 == Rep :: 'a bit1 => int
  Abs_bit1 == Abs :: int => 'a bit1
### theory "Rank_Nullity_Theorem.Mod_Type"
### 2.314s elapsed time, 9.087s cpu time, 1.514s GC time
Loading theory "Rank_Nullity_Theorem.Miscellaneous" (required by "Draft.SNF_AlgorithmMoreTemplates" via "Draft.SNF_Algorithm" via "Draft.Smith_Normal_Form_JNF" via "Draft.SNF_Missing_Lemmas" via "Hermite.Hermite" via "Echelon_Form.Echelon_Form_Inverse" via "Echelon_Form.Echelon_Form_Det" via "Echelon_Form.Echelon_Form" via "Gauss_Jordan.Determinants2" via "Gauss_Jordan.Gauss_Jordan_PA" via "Gauss_Jordan.Gauss_Jordan" via "Gauss_Jordan.Rref")
locale inj_comm_ring_hom
  fixes hom :: "'a => 'b"
  assumes "inj_comm_ring_hom hom"
### theory "Jordan_Normal_Form.Char_Poly"
### 1.163s elapsed time, 4.554s cpu time, 0.709s GC time
Loading theory "Jordan_Normal_Form.Jordan_Normal_Form" (required by "Draft.SNF_AlgorithmMoreTemplates" via "Draft.SNF_Algorithm" via "Draft.Smith_Normal_Form_JNF" via "Draft.SNF_Missing_Lemmas" via "Draft.Mod_Type_Connect" via "Perron_Frobenius.HMA_Connect" via "Jordan_Normal_Form.Spectral_Radius" via "Jordan_Normal_Form.Jordan_Normal_Form_Existence")
locale abelian_monoid
  fixes G :: "('a, 'b) ring_scheme"  (structure)
  assumes "abelian_monoid G"
### theory "Jordan_Normal_Form.Jordan_Normal_Form"
### 0.350s elapsed time, 1.368s cpu time, 0.245s GC time
"{a\<^sub>1, a\<^sub>2}"
  :: "Enum.finite_2 set"
locale module
  fixes R :: "('a, 'b) ring_scheme"  (structure)
    and M :: "('a, 'c, 'd) module_scheme"  (structure)
  assumes "module R M"
"{a\<^sub>1, a\<^sub>2, a\<^sub>3, a\<^sub>4, a\<^sub>5}"
  :: "Enum.finite_5 set"
"(bij, bij_betw, permutation)"
  :: "(('a => 'b) => bool) *
      (('c => 'd) => 'c set => 'd set => bool) * (('e => 'e) => bool)"
carrier (| carrier = ?carrier, ... = ?more |) = ?carrier
partial_object.more (| carrier = ?carrier, ... = ?more |) = ?more
carrier_update ?carrier' (| carrier = ?carrier, ... = ?more |) =
(| carrier = ?carrier' ?carrier, ... = ?more |)
partial_object.more_update ?more' (| carrier = ?carrier, ... = ?more |) =
(| carrier = ?carrier, ... = ?more' ?more |)
(\<otimes>\<^bsub>(| carrier = ?carrier, mult = ?mult, one = ?one, ... = ?more |)\<^esub>) =
?mult
\<one>\<^bsub>(| carrier = ?carrier, mult = ?mult, one = ?one, ... = ?more |)\<^esub> =
?one
monoid.more
 (| carrier = ?carrier, mult = ?mult, one = ?one, ... = ?more |) =
?more
mult_update ?mult'
 (| carrier = ?carrier, mult = ?mult, one = ?one, ... = ?more |) =
(| carrier = ?carrier, mult = ?mult' ?mult, one = ?one, ... = ?more |)
one_update ?one'
 (| carrier = ?carrier, mult = ?mult, one = ?one, ... = ?more |) =
(| carrier = ?carrier, mult = ?mult, one = ?one' ?one, ... = ?more |)
monoid.more_update ?more'
 (| carrier = ?carrier, mult = ?mult, one = ?one, ... = ?more |) =
(| carrier = ?carrier, mult = ?mult, one = ?one, ... = ?more' ?more |)
### theory "Jordan_Normal_Form.Missing_VectorSpace"
### 2.512s elapsed time, 9.849s cpu time, 1.588s GC time
Loading theory "Jordan_Normal_Form.VS_Connect" (required by "Draft.SNF_AlgorithmMoreTemplates" via "Draft.SNF_Algorithm" via "Draft.Smith_Normal_Form_JNF" via "Draft.SNF_Missing_Lemmas" via "Draft.Mod_Type_Connect" via "Perron_Frobenius.HMA_Connect" via "Jordan_Normal_Form.Spectral_Radius" via "Jordan_Normal_Form.Jordan_Normal_Form_Existence" via "Jordan_Normal_Form.Schur_Decomposition" via "Jordan_Normal_Form.Gram_Schmidt")
"- \<infinity>"
  :: "ereal"
locale Vector_Spaces.linear
  fixes s1 :: "'a => 'b => 'b"  (infixr \<open>*a\<close> 75)
    and s2 :: "'a => 'c => 'c"  (infixr \<open>*b\<close> 75)
    and f :: "'b => 'c"
  assumes "Vector_Spaces.linear (*a) (*b) f"
"\<infinity>"
  :: "ereal"
locale finite_dimensional_vector_space
  fixes scale :: "'a => 'b => 'b"  (infixr \<open>*s\<close> 75)
    and Basis :: "'b set"
  assumes "finite_dimensional_vector_space (*s) Basis"
locale Vector_Spaces.linear
  fixes s1 :: "'a => 'b => 'b"  (infixr \<open>*a\<close> 75)
    and s2 :: "'a => 'c => 'c"  (infixr \<open>*b\<close> 75)
    and f :: "'b => 'c"
  assumes "linear (*a) (*b) f"
instantiation
  fun :: (real_vector, real_vector) real_vector
  scaleR_fun == scaleR :: real => ('a => 'b) => 'a => 'b
instantiation
  vec :: (type, finite) equal
  equal_vec == equal_class.equal :: ('a, 'b) vec => ('a, 'b) vec => bool
"ereal (13 / 4)"
  :: "ereal"
### theory "Rank_Nullity_Theorem.Miscellaneous"
### 1.441s elapsed time, 5.605s cpu time, 0.904s GC time
Loading theory "Gauss_Jordan.Code_Matrix" (required by "Draft.SNF_AlgorithmMoreTemplates" via "Draft.SNF_Algorithm" via "Draft.Smith_Normal_Form_JNF" via "Draft.SNF_Missing_Lemmas" via "Hermite.Hermite" via "Echelon_Form.Echelon_Form_Inverse" via "Echelon_Form.Echelon_Form_Det" via "Echelon_Form.Echelon_Form" via "Gauss_Jordan.Determinants2" via "Gauss_Jordan.Gauss_Jordan_PA" via "Gauss_Jordan.Gauss_Jordan" via "Gauss_Jordan.Elementary_Operations")
"True"
  :: "bool"
Loading theory "Gauss_Jordan.Rref" (required by "Draft.SNF_AlgorithmMoreTemplates" via "Draft.SNF_Algorithm" via "Draft.Smith_Normal_Form_JNF" via "Draft.SNF_Missing_Lemmas" via "Hermite.Hermite" via "Echelon_Form.Echelon_Form_Inverse" via "Echelon_Form.Echelon_Form_Det" via "Echelon_Form.Echelon_Form" via "Gauss_Jordan.Determinants2" via "Gauss_Jordan.Gauss_Jordan_PA" via "Gauss_Jordan.Gauss_Jordan")
### theory "HOL-Analysis.Henstock_Kurzweil_Integration"
### 3.054s elapsed time, 11.942s cpu time, 1.947s GC time
Loading theory "HOL-Analysis.Equivalence_Lebesgue_Henstock_Integration" (required by "Draft.SNF_AlgorithmMoreTemplates" via "Draft.SNF_Algorithm" via "Draft.Smith_Normal_Form_JNF" via "Draft.SNF_Missing_Lemmas" via "Hermite.Hermite" via "Echelon_Form.Echelon_Form_Inverse" via "Echelon_Form.Echelon_Form_Det" via "Echelon_Form.Echelon_Form" via "Echelon_Form.Rings2" via "HOL-Analysis.Analysis" via "HOL-Analysis.Ball_Volume" via "HOL-Analysis.Gamma_Function")
### theory "Gauss_Jordan.Rref"
### 0.349s elapsed time, 1.363s cpu time, 0.254s GC time
Loading theory "HOL-Analysis.Integral_Test" (required by "Draft.SNF_AlgorithmMoreTemplates" via "Draft.SNF_Algorithm" via "Draft.Smith_Normal_Form_JNF" via "Draft.SNF_Missing_Lemmas" via "Hermite.Hermite" via "Echelon_Form.Echelon_Form_Inverse" via "Echelon_Form.Echelon_Form_Det" via "Echelon_Form.Echelon_Form" via "Echelon_Form.Rings2" via "HOL-Analysis.Analysis")
locale antimono_fun_sum_integral_diff
  fixes f :: "real => real"
  assumes "antimono_fun_sum_integral_diff f"
### theory "HOL-Analysis.Integral_Test"
### 0.093s elapsed time, 0.359s cpu time, 0.055s GC time
Loading theory "Rank_Nullity_Theorem.Fundamental_Subspaces" (required by "Draft.SNF_AlgorithmMoreTemplates" via "Draft.SNF_Algorithm" via "Draft.Smith_Normal_Form_JNF" via "Draft.SNF_Missing_Lemmas" via "Hermite.Hermite" via "Echelon_Form.Echelon_Form_Inverse" via "Echelon_Form.Echelon_Form_Det" via "Echelon_Form.Echelon_Form" via "Gauss_Jordan.Determinants2" via "Gauss_Jordan.Gauss_Jordan_PA" via "Gauss_Jordan.Gauss_Jordan" via "Gauss_Jordan.Elementary_Operations")
### theory "Gauss_Jordan.Code_Matrix"
### 0.485s elapsed time, 1.897s cpu time, 0.309s GC time
"True"
  :: "bool"
inj_on ?h ?A ==> (?g summable_on ?h ` ?A) = (?g o ?h summable_on ?A)
uniformity =
filtermap (%((x1, x2), y1, y2). ((x1, y1), x2, y2))
 (uniformity \<times>\<^sub>F uniformity)
?a : affine hull ?S ==> aff_dim ?S = int (dim ((+) (- ?a) ` ?S))
sigma_finite_measure (count_space ?A)
### Cannot skip proof of schematic goal statement
### theory "Rank_Nullity_Theorem.Fundamental_Subspaces"
### 0.138s elapsed time, 0.536s cpu time, 0.033s GC time
Loading theory "Gauss_Jordan.Elementary_Operations" (required by "Draft.SNF_AlgorithmMoreTemplates" via "Draft.SNF_Algorithm" via "Draft.Smith_Normal_Form_JNF" via "Draft.SNF_Missing_Lemmas" via "Hermite.Hermite" via "Echelon_Form.Echelon_Form_Inverse" via "Echelon_Form.Echelon_Form_Det" via "Echelon_Form.Echelon_Form" via "Gauss_Jordan.Determinants2" via "Gauss_Jordan.Gauss_Jordan_PA" via "Gauss_Jordan.Gauss_Jordan")
Loading theory "Rank_Nullity_Theorem.Dim_Formula" (required by "Draft.SNF_AlgorithmMoreTemplates" via "Draft.SNF_Algorithm" via "Draft.Smith_Normal_Form_JNF" via "Draft.SNF_Missing_Lemmas" via "Hermite.Hermite" via "Echelon_Form.Echelon_Form_Inverse" via "Echelon_Form.Echelon_Form_Det" via "Echelon_Form.Echelon_Form" via "Gauss_Jordan.Determinants2" via "Gauss_Jordan.Gauss_Jordan_PA" via "Gauss_Jordan.Gauss_Jordan" via "Gauss_Jordan.Rank")
locale vector_space
  fixes scale :: "'a => 'b => 'b"  (infixr \<open>*s\<close> 75)
  assumes "vector_space (*s)"
locale finite_dimensional_vector_space
  fixes scale :: "'a => 'b => 'b"  (infixr \<open>*s\<close> 75)
    and Basis :: "'b set"
  assumes "finite_dimensional_vector_space (*s) Basis"
locale vector_space
  fixes scale :: "'a => 'b => 'b"  (infixr \<open>*s\<close> 75)
  assumes "vector_space (*s)"
locale finite_dimensional_vector_space
  fixes scale :: "'a => 'b => 'b"  (infixr \<open>*s\<close> 75)
    and Basis :: "'b set"
  assumes "finite_dimensional_vector_space (*s) Basis"
### theory "Rank_Nullity_Theorem.Dim_Formula"
### 0.239s elapsed time, 0.979s cpu time, 0.149s GC time
Loading theory "Gauss_Jordan.Rank" (required by "Draft.SNF_AlgorithmMoreTemplates" via "Draft.SNF_Algorithm" via "Draft.Smith_Normal_Form_JNF" via "Draft.SNF_Missing_Lemmas" via "Hermite.Hermite" via "Echelon_Form.Echelon_Form_Inverse" via "Echelon_Form.Echelon_Form_Det" via "Echelon_Form.Echelon_Form" via "Gauss_Jordan.Determinants2" via "Gauss_Jordan.Gauss_Jordan_PA" via "Gauss_Jordan.Gauss_Jordan")
### Cannot skip proof of schematic goal statement
### theory "Gauss_Jordan.Rank"
### 0.085s elapsed time, 0.327s cpu time, 0.034s GC time
### Cannot skip proof of schematic goal statement
### theory "Gauss_Jordan.Elementary_Operations"
### 0.693s elapsed time, 2.748s cpu time, 0.384s GC time
Loading theory "Gauss_Jordan.Gauss_Jordan" (required by "Draft.SNF_AlgorithmMoreTemplates" via "Draft.SNF_Algorithm" via "Draft.Smith_Normal_Form_JNF" via "Draft.SNF_Missing_Lemmas" via "Hermite.Hermite" via "Echelon_Form.Echelon_Form_Inverse" via "Echelon_Form.Echelon_Form_Det" via "Echelon_Form.Echelon_Form" via "Gauss_Jordan.Determinants2" via "Gauss_Jordan.Gauss_Jordan_PA")
### Cannot skip proof of schematic goal statement
locale matrix_ring
  fixes n :: "nat"
    and field_type :: "'a itself"
locale vec_module
  fixes f_ty :: "'a itself"
    and n :: "nat"
### Cannot skip proof of schematic goal statement
locale matrix_vs
  fixes nr :: "nat"
    and nc :: "nat"
    and field_type :: "'a itself"
### Cannot skip proof of schematic goal statement
consts
  row_add_iterate ::
    "(('a, 'n) vec, 'm) vec => nat => 'm => 'n => (('a, 'n) vec, 'm) vec"
### theory "HOL-Analysis.Equivalence_Lebesgue_Henstock_Integration"
### 5.426s elapsed time, 19.877s cpu time, 12.074s GC time
Loading theory "HOL-Analysis.Further_Topology" (required by "Draft.SNF_AlgorithmMoreTemplates" via "Draft.SNF_Algorithm" via "Draft.Smith_Normal_Form_JNF" via "Draft.SNF_Missing_Lemmas" via "Hermite.Hermite" via "Echelon_Form.Echelon_Form_Inverse" via "Echelon_Form.Echelon_Form_Det" via "Echelon_Form.Echelon_Form" via "Echelon_Form.Rings2" via "HOL-Analysis.Analysis" via "HOL-Analysis.Jordan_Curve")
Loading theory "HOL-Analysis.Gamma_Function" (required by "Draft.SNF_AlgorithmMoreTemplates" via "Draft.SNF_Algorithm" via "Draft.Smith_Normal_Form_JNF" via "Draft.SNF_Missing_Lemmas" via "Hermite.Hermite" via "Echelon_Form.Echelon_Form_Inverse" via "Echelon_Form.Echelon_Form_Det" via "Echelon_Form.Echelon_Form" via "Echelon_Form.Rings2" via "HOL-Analysis.Analysis" via "HOL-Analysis.Ball_Volume")
### theory "Gauss_Jordan.Gauss_Jordan"
### 4.374s elapsed time, 15.750s cpu time, 11.526s GC time
Loading theory "HOL-Analysis.Improper_Integral" (required by "Draft.SNF_AlgorithmMoreTemplates" via "Draft.SNF_Algorithm" via "Draft.Smith_Normal_Form_JNF" via "Draft.SNF_Missing_Lemmas" via "Hermite.Hermite" via "Echelon_Form.Echelon_Form_Inverse" via "Echelon_Form.Echelon_Form_Det" via "Echelon_Form.Echelon_Form" via "Echelon_Form.Rings2" via "HOL-Analysis.Analysis")
locale vec_space
  fixes f_ty :: "'a itself"
    and n :: "nat"
### theory "HOL-Analysis.Improper_Integral"
### 0.471s elapsed time, 1.861s cpu time, 0.229s GC time
Loading theory "HOL-Analysis.Equivalence_Measurable_On_Borel" (required by "Draft.SNF_AlgorithmMoreTemplates" via "Draft.SNF_Algorithm" via "Draft.Smith_Normal_Form_JNF" via "Draft.SNF_Missing_Lemmas" via "Hermite.Hermite" via "Echelon_Form.Echelon_Form_Inverse" via "Echelon_Form.Echelon_Form_Det" via "Echelon_Form.Echelon_Form" via "Echelon_Form.Rings2" via "HOL-Analysis.Analysis")
### Cannot skip proof of schematic goal statement
### theory "HOL-Analysis.Equivalence_Measurable_On_Borel"
### 0.741s elapsed time, 2.909s cpu time, 0.377s GC time
Loading theory "HOL-Analysis.Interval_Integral" (required by "Draft.SNF_AlgorithmMoreTemplates" via "Draft.SNF_Algorithm" via "Draft.Smith_Normal_Form_JNF" via "Draft.SNF_Missing_Lemmas" via "Hermite.Hermite" via "Echelon_Form.Echelon_Form_Inverse" via "Echelon_Form.Echelon_Form_Det" via "Echelon_Form.Echelon_Form" via "Echelon_Form.Rings2" via "HOL-Analysis.Analysis" via "HOL-Analysis.Ball_Volume" via "HOL-Analysis.Lebesgue_Integral_Substitution")
locale mat_space
  fixes f_ty :: "'a itself"
    and nc :: "nat"
    and nr :: "nat"
### theory "HOL-Analysis.Interval_Integral"
### 0.600s elapsed time, 2.336s cpu time, 0.383s GC time
Loading theory "HOL-Analysis.Lebesgue_Integral_Substitution" (required by "Draft.SNF_AlgorithmMoreTemplates" via "Draft.SNF_Algorithm" via "Draft.Smith_Normal_Form_JNF" via "Draft.SNF_Missing_Lemmas" via "Hermite.Hermite" via "Echelon_Form.Echelon_Form_Inverse" via "Echelon_Form.Echelon_Form_Det" via "Echelon_Form.Echelon_Form" via "Echelon_Form.Rings2" via "HOL-Analysis.Analysis" via "HOL-Analysis.Ball_Volume")
### theory "HOL-Analysis.Lebesgue_Integral_Substitution"
### 0.139s elapsed time, 0.544s cpu time, 0.094s GC time
Loading theory "HOL-Analysis.Vitali_Covering_Theorem" (required by "Draft.SNF_AlgorithmMoreTemplates" via "Draft.SNF_Algorithm" via "Draft.Smith_Normal_Form_JNF" via "Draft.SNF_Missing_Lemmas" via "Hermite.Hermite" via "Echelon_Form.Echelon_Form_Inverse" via "Echelon_Form.Echelon_Form_Det" via "Echelon_Form.Echelon_Form" via "Echelon_Form.Rings2" via "HOL-Analysis.Analysis" via "HOL-Analysis.Change_Of_Vars")
class Gamma = complete_space + real_normed_field +
  fixes rGamma :: "'a => 'a"
  assumes
    "rGamma_eq_zero_iff_aux":
      "!!z. (rGamma z = (0::'a)) = (EX n. z = - of_nat n)"
  assumes
    "differentiable_rGamma_aux1":
      "!!z. (!!n. z ~= - of_nat n) ==>
            let d = (THE d.
                        (%n. SUM k<n.
                             inverse (of_nat (Suc k)) -
                             inverse (z + of_nat k))
                        \<longlonglongrightarrow> d) -
                    euler_mascheroni *\<^sub>R (1::'a)
            in ((%y. (rGamma y - rGamma z +
                      rGamma z * d * (y - z)) /\<^sub>R
                     norm (y - z)) \<longlongrightarrow>
                (0::'a))
                (at z)"
  assumes
    "differentiable_rGamma_aux2":
      "!!n. let z = - of_nat n
            in ((%y. (rGamma y - rGamma z -
                      (- (1::'a)) ^ n * prod of_nat {1..n} *
                      (y - z)) /\<^sub>R
                     norm (y - z)) \<longlongrightarrow>
                (0::'a))
                (at z)"
  assumes
    "rGamma_series_aux":
      "!!z. (!!n. z ~= - of_nat n) ==>
            let fact' = %n. prod of_nat {1..n};
                exp =
                  %x. THE e.
                         (%n. SUM k<n. x ^ k /\<^sub>R fact k)
                         \<longlonglongrightarrow> e;
                pochhammer' = %a n. PROD n = 0..n. a + of_nat n
            in (%n. pochhammer' z n /
                    (fact' n * exp (z * ln (real n) *\<^sub>R (1::'a))))
               \<longlonglongrightarrow> rGamma z"
locale vec_space
  fixes f_ty :: "'a itself"
    and n :: "nat"
instantiation
  complex :: Gamma
  rGamma_complex == rGamma :: complex => complex
instantiation
  real :: Gamma
  rGamma_real == rGamma :: real => real
locale vec_module
  fixes f_ty :: "'a itself"
    and n :: "nat"
### theory "HOL-Analysis.Further_Topology"
### 3.060s elapsed time, 11.980s cpu time, 1.804s GC time
Loading theory "HOL-Analysis.Jordan_Curve" (required by "Draft.SNF_AlgorithmMoreTemplates" via "Draft.SNF_Algorithm" via "Draft.Smith_Normal_Form_JNF" via "Draft.SNF_Missing_Lemmas" via "Hermite.Hermite" via "Echelon_Form.Echelon_Form_Inverse" via "Echelon_Form.Echelon_Form_Det" via "Echelon_Form.Echelon_Form" via "Echelon_Form.Rings2" via "HOL-Analysis.Analysis")
### theory "HOL-Analysis.Vitali_Covering_Theorem"
### 1.257s elapsed time, 4.889s cpu time, 0.819s GC time
Loading theory "HOL-Analysis.Change_Of_Vars" (required by "Draft.SNF_AlgorithmMoreTemplates" via "Draft.SNF_Algorithm" via "Draft.Smith_Normal_Form_JNF" via "Draft.SNF_Missing_Lemmas" via "Hermite.Hermite" via "Echelon_Form.Echelon_Form_Inverse" via "Echelon_Form.Echelon_Form_Det" via "Echelon_Form.Echelon_Form" via "Echelon_Form.Rings2" via "HOL-Analysis.Analysis")
### theory "HOL-Analysis.Gamma_Function"
### 3.347s elapsed time, 13.096s cpu time, 1.903s GC time
Loading theory "HOL-Analysis.Ball_Volume" (required by "Draft.SNF_AlgorithmMoreTemplates" via "Draft.SNF_Algorithm" via "Draft.Smith_Normal_Form_JNF" via "Draft.SNF_Missing_Lemmas" via "Hermite.Hermite" via "Echelon_Form.Echelon_Form_Inverse" via "Echelon_Form.Echelon_Form_Det" via "Echelon_Form.Echelon_Form" via "Echelon_Form.Rings2" via "HOL-Analysis.Analysis")
locale idom_vec
  fixes n :: "nat"
    and f_ty :: "'a itself"
### theory "HOL-Analysis.Ball_Volume"
### 0.641s elapsed time, 2.494s cpu time, 0.372s GC time
Loading theory "Gauss_Jordan.Linear_Maps" (required by "Draft.SNF_AlgorithmMoreTemplates" via "Draft.SNF_Algorithm" via "Draft.Smith_Normal_Form_JNF" via "Draft.SNF_Missing_Lemmas" via "Hermite.Hermite" via "Echelon_Form.Echelon_Form_Inverse" via "Echelon_Form.Echelon_Form_Det" via "Echelon_Form.Echelon_Form" via "Gauss_Jordan.Determinants2" via "Gauss_Jordan.Gauss_Jordan_PA")
### theory "HOL-Analysis.Jordan_Curve"
### 0.986s elapsed time, 3.841s cpu time, 0.579s GC time
?z ~: \<int>\<^sub>\<le>\<^sub>0 ==>
(Polygamma ?n has_field_derivative Polygamma (Suc ?n) ?z) (at ?z within ?A)
locale invertible_lf
  fixes s1 :: "'a => 'b => 'b"  (infixr \<open>*a\<close> 75)
    and s2 :: "'a => 'c => 'c"  (infixr \<open>*b\<close> 75)
    and f :: "'b => 'c"
  assumes "invertible_lf (*a) (*b) f"
locale vec_space
  fixes f_ty :: "'a itself"
    and n :: "nat"
### theory "HOL-Analysis.Change_Of_Vars"
### 1.248s elapsed time, 4.358s cpu time, 0.841s GC time
Loading theory "HOL-Analysis.Simplex_Content" (required by "Draft.SNF_AlgorithmMoreTemplates" via "Draft.SNF_Algorithm" via "Draft.Smith_Normal_Form_JNF" via "Draft.SNF_Missing_Lemmas" via "Hermite.Hermite" via "Echelon_Form.Echelon_Form_Inverse" via "Echelon_Form.Echelon_Form_Det" via "Echelon_Form.Echelon_Form" via "Echelon_Form.Rings2" via "HOL-Analysis.Analysis")
### theory "Gauss_Jordan.Linear_Maps"
### 0.713s elapsed time, 2.193s cpu time, 0.506s GC time
Loading theory "Gauss_Jordan.Gauss_Jordan_PA" (required by "Draft.SNF_AlgorithmMoreTemplates" via "Draft.SNF_Algorithm" via "Draft.Smith_Normal_Form_JNF" via "Draft.SNF_Missing_Lemmas" via "Hermite.Hermite" via "Echelon_Form.Echelon_Form_Inverse" via "Echelon_Form.Echelon_Form_Det" via "Echelon_Form.Echelon_Form" via "Gauss_Jordan.Determinants2")
### theory "HOL-Analysis.Simplex_Content"
### 0.128s elapsed time, 0.388s cpu time, 0.085s GC time
Loading theory "HOL-Analysis.Analysis" (required by "Draft.SNF_AlgorithmMoreTemplates" via "Draft.SNF_Algorithm" via "Draft.Smith_Normal_Form_JNF" via "Draft.SNF_Missing_Lemmas" via "Hermite.Hermite" via "Echelon_Form.Echelon_Form_Inverse" via "Echelon_Form.Echelon_Form_Det" via "Echelon_Form.Echelon_Form" via "Echelon_Form.Rings2")
locale vec_module
  fixes f_ty :: "'a itself"
    and n :: "nat"
Found termination order: "(%p. size (fst (snd p))) <*mlex*> {}"
### theory "Gauss_Jordan.Gauss_Jordan_PA"
### 0.625s elapsed time, 1.889s cpu time, 0.329s GC time
Loading theory "Gauss_Jordan.Bases_Of_Fundamental_Subspaces" (required by "Draft.SNF_AlgorithmMoreTemplates" via "Draft.SNF_Algorithm" via "Draft.Smith_Normal_Form_JNF" via "Draft.SNF_Missing_Lemmas" via "Hermite.Hermite" via "Echelon_Form.Examples_Echelon_Form_Abstract" via "Gauss_Jordan.Examples_Gauss_Jordan_Abstract" via "Gauss_Jordan.System_Of_Equations")
Loading theory "Gauss_Jordan.Determinants2" (required by "Draft.SNF_AlgorithmMoreTemplates" via "Draft.SNF_Algorithm" via "Draft.Smith_Normal_Form_JNF" via "Draft.SNF_Missing_Lemmas" via "Hermite.Hermite" via "Echelon_Form.Echelon_Form_Inverse" via "Echelon_Form.Echelon_Form_Det" via "Echelon_Form.Echelon_Form")
### theory "Gauss_Jordan.Bases_Of_Fundamental_Subspaces"
### 0.190s elapsed time, 0.719s cpu time, 0.129s GC time
Loading theory "Gauss_Jordan.Inverse" (required by "Draft.SNF_AlgorithmMoreTemplates" via "Draft.SNF_Algorithm" via "Draft.Smith_Normal_Form_JNF" via "Draft.SNF_Missing_Lemmas" via "Hermite.Hermite" via "Echelon_Form.Echelon_Form_Inverse")
### theory "Gauss_Jordan.Inverse"
### 0.194s elapsed time, 0.739s cpu time, 0.168s GC time
Loading theory "Gauss_Jordan.System_Of_Equations" (required by "Draft.SNF_AlgorithmMoreTemplates" via "Draft.SNF_Algorithm" via "Draft.Smith_Normal_Form_JNF" via "Draft.SNF_Missing_Lemmas" via "Hermite.Hermite" via "Echelon_Form.Examples_Echelon_Form_Abstract" via "Gauss_Jordan.Examples_Gauss_Jordan_Abstract")
### theory "Gauss_Jordan.Determinants2"
### 0.434s elapsed time, 1.653s cpu time, 0.324s GC time
locale vec_space
  fixes f_ty :: "'a itself"
    and n :: "nat"
### theory "Jordan_Normal_Form.VS_Connect"
### 12.152s elapsed time, 44.877s cpu time, 16.249s GC time
Loading theory "Jordan_Normal_Form.DL_Rank" (required by "Draft.SNF_AlgorithmMoreTemplates" via "Draft.SNF_Algorithm" via "Draft.Smith_Normal_Form_JNF" via "Draft.SNF_Missing_Lemmas" via "Jordan_Normal_Form.DL_Rank_Submatrix")
Loading theory "Jordan_Normal_Form.Gram_Schmidt" (required by "Draft.SNF_AlgorithmMoreTemplates" via "Draft.SNF_Algorithm" via "Draft.Smith_Normal_Form_JNF" via "Draft.SNF_Missing_Lemmas" via "Draft.Mod_Type_Connect" via "Perron_Frobenius.HMA_Connect" via "Jordan_Normal_Form.Spectral_Radius" via "Jordan_Normal_Form.Jordan_Normal_Form_Existence" via "Jordan_Normal_Form.Schur_Decomposition")
Found termination order: "(%p. length (snd (snd p))) <*mlex*> {}"
Found termination order: "(%p. length (snd (snd p))) <*mlex*> {}"
### theory "Gauss_Jordan.System_Of_Equations"
### 0.489s elapsed time, 1.787s cpu time, 0.339s GC time
Loading theory "Gauss_Jordan.Examples_Gauss_Jordan_Abstract" (required by "Draft.SNF_AlgorithmMoreTemplates" via "Draft.SNF_Algorithm" via "Draft.Smith_Normal_Form_JNF" via "Draft.SNF_Missing_Lemmas" via "Hermite.Hermite" via "Echelon_Form.Examples_Echelon_Form_Abstract")
Found termination order: "(%p. length (snd (snd p))) <*mlex*> {}"
locale cof_vec_space
  fixes n :: "nat"
    and f_ty :: "'a itself"
### theory "Jordan_Normal_Form.Gram_Schmidt"
### 1.726s elapsed time, 6.319s cpu time, 1.539s GC time
Loading theory "Jordan_Normal_Form.Schur_Decomposition" (required by "Draft.SNF_AlgorithmMoreTemplates" via "Draft.SNF_Algorithm" via "Draft.Smith_Normal_Form_JNF" via "Draft.SNF_Missing_Lemmas" via "Draft.Mod_Type_Connect" via "Perron_Frobenius.HMA_Connect" via "Jordan_Normal_Form.Spectral_Radius" via "Jordan_Normal_Form.Jordan_Normal_Form_Existence")
### Ignoring duplicate rewrite rule:
### int_of_integer (- 1) == - 1
### Ignoring duplicate rewrite rule:
### real_of_rat (- 1) == - 1
### theory "Gauss_Jordan.Examples_Gauss_Jordan_Abstract"
### 4.551s elapsed time, 17.068s cpu time, 13.297s GC time
"[[1, 0, 0, 0, 0, 0], [0, 1, 0, 0, 0, 0], [0, 0, 0, 0, 1, 1 / 4],
  [0, 0, 0, 0, 0, 0]]"
  :: "real list list"
"[[1, - 2, 0, - 1, 0], [0, 0, 1, - 2, 0]]"
  :: "rat list list"
Found termination order: "(%p. length (snd p)) <*mlex*> {}"
### theory "Jordan_Normal_Form.Schur_Decomposition"
### 5.948s elapsed time, 22.946s cpu time, 12.744s GC time
Loading theory "Jordan_Normal_Form.Jordan_Normal_Form_Existence" (required by "Draft.SNF_AlgorithmMoreTemplates" via "Draft.SNF_Algorithm" via "Draft.Smith_Normal_Form_JNF" via "Draft.SNF_Missing_Lemmas" via "Draft.Mod_Type_Connect" via "Perron_Frobenius.HMA_Connect" via "Jordan_Normal_Form.Spectral_Radius")
"[[1, 0, 0, 1, 1], [0, 0, 1, 0, 0]]"
  :: "bit list list"
"True"
  :: "bool"
Found termination order: "(%p. size (fst (snd p))) <*mlex*> {}"
### theory "HOL-Analysis.Analysis"
### 9.470s elapsed time, 35.631s cpu time, 15.314s GC time
Loading theory "Echelon_Form.Rings2" (required by "Draft.SNF_AlgorithmMoreTemplates" via "Draft.SNF_Algorithm" via "Draft.Smith_Normal_Form_JNF" via "Draft.SNF_Missing_Lemmas" via "Hermite.Hermite" via "Echelon_Form.Echelon_Form_Inverse" via "Echelon_Form.Echelon_Form_Det" via "Echelon_Form.Echelon_Form")
Found termination order: "(%p. size (snd p)) <*mlex*> {}"
Found termination order:
  "(%p. size_list (%p. size (snd p)) (snd p)) <*mlex*> {}"
Found termination order: "(%p. size (fst (snd p))) <*mlex*> {}"
"[[Complex 1 0, Complex 0 0, Complex 1 1],
  [Complex 0 0, Complex 1 0, Complex 1 (- 1)]]"
  :: "complex list list"
### theory "Jordan_Normal_Form.DL_Rank"
### 8.958s elapsed time, 34.266s cpu time, 14.852s GC time
Loading theory "Jordan_Normal_Form.DL_Rank_Submatrix" (required by "Draft.SNF_AlgorithmMoreTemplates" via "Draft.SNF_Algorithm" via "Draft.Smith_Normal_Form_JNF" via "Draft.SNF_Missing_Lemmas")
"5"
  :: "nat"
class comm_monoid_add = ab_semigroup_add + monoid_add +
  assumes "add_0": "!!a. (0::'a) + a = a"
class group_add = cancel_semigroup_add + minus + monoid_add + uminus +
  assumes "left_minus": "!!a. - a + a = (0::'a)"
  assumes "add_uminus_conv_diff": "!!a b. a + - b = a - b"
"5"
  :: "nat"
"2"
  :: "nat"
"20"
  :: "nat"
Found termination order: "(%p. size (fst p)) <*mlex*> {}"
Found termination order: "(%p. size (fst (snd (snd (snd p))))) <*mlex*> {}"
Found termination order:
  "(%p. size_list (%p. size (snd p)) (fst (snd (snd (snd p))))) <*mlex*> {}"
### theory "Jordan_Normal_Form.DL_Rank_Submatrix"
### 0.894s elapsed time, 3.487s cpu time, 0.384s GC time
"4"
  :: "nat"
class GCD_ring = comm_ring_1 +
  assumes
    "exists_gcd":
      "!!a b.
          EX d. d dvd a &
                d dvd b & (ALL d'. d' dvd a & d' dvd b --> d' dvd d)"
### theory "Jordan_Normal_Form.Jordan_Normal_Form_Existence"
### 3.495s elapsed time, 13.572s cpu time, 1.640s GC time
Loading theory "Jordan_Normal_Form.Spectral_Radius" (required by "Draft.SNF_AlgorithmMoreTemplates" via "Draft.SNF_Algorithm" via "Draft.Smith_Normal_Form_JNF" via "Draft.SNF_Missing_Lemmas" via "Draft.Mod_Type_Connect" via "Perron_Frobenius.HMA_Connect")
"4"
  :: "nat"
### theory "Jordan_Normal_Form.Spectral_Radius"
### 0.150s elapsed time, 0.580s cpu time, 0.084s GC time
Loading theory "Perron_Frobenius.HMA_Connect" (required by "Draft.SNF_AlgorithmMoreTemplates" via "Draft.SNF_Algorithm" via "Draft.Smith_Normal_Form_JNF" via "Draft.SNF_Missing_Lemmas" via "Draft.Mod_Type_Connect")
"4"
  :: "nat"
"4"
  :: "nat"
"4"
  :: "nat"
"1"
  :: "nat"
class bezout_ring = comm_ring_1 +
  assumes
    "exists_bezout":
      "!!a b.
          EX p q d.
             p * a + q * b = d &
             d dvd a & d dvd b & (ALL d'. d' dvd a & d' dvd b --> d' dvd d)"
"2"
  :: "nat"
### Ambiguous input (line 91 of "$AFP/Perron_Frobenius/HMA_Connect.thy") produces 2 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq" ("_applC" ("_position" vec_elements) ("_position" v))
###     ("_applC" ("_position" set)
###       ("_listcompr"
###         ("\<^const>Finite_Cartesian_Product.vec.vec_nth" ("_position" v)
###           ("_position" i))
###         ("_lc_gen" ("_position" i)
###           ("\<^const>List.upt" ("\<^const>Groups.zero_class.zero")
###             ("_applC" ("_position" dim_vec) ("_position" v))))
###         ("_lc_end")))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq" ("_applC" ("_position" vec_elements) ("_position" v))
###     ("_applC" ("_position" set)
###       ("_listcompr"
###         ("\<^const>Matrix.vec_index" ("_position" v) ("_position" i))
###         ("_lc_gen" ("_position" i)
###           ("\<^const>List.upt" ("\<^const>Groups.zero_class.zero")
###             ("_applC" ("_position" dim_vec) ("_position" v))))
###         ("_lc_end")))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 93 of "$AFP/Perron_Frobenius/HMA_Connect.thy") produces 2 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq" ("_applC" ("_position" vec_elements) ("_position" v))
###     ("_Setcompr"
###       ("\<^const>Finite_Cartesian_Product.vec.vec_nth" ("_position" v)
###         ("_position" i))
###       ("_position" i)
###       ("\<^const>Orderings.ord_class.less" ("_position" i)
###         ("_applC" ("_position" dim_vec) ("_position" v))))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq" ("_applC" ("_position" vec_elements) ("_position" v))
###     ("_Setcompr"
###       ("\<^const>Matrix.vec_index" ("_position" v) ("_position" i))
###       ("_position" i)
###       ("\<^const>Orderings.ord_class.less" ("_position" i)
###         ("_applC" ("_position" dim_vec) ("_position" v))))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ignoring duplicate rewrite rule:
### \<chi>i. ?y $h i == ?y
### Rule already declared as introduction (intro)
### (!!x y. ?A x y ==> ?B (?f x) (?g y)) ==> rel_fun ?A ?B ?f ?g
### Rule already declared as introduction (intro)
### (!!x y. ?A x y ==> ?B (?f x) (?g y)) ==> (?A ===> ?B) ?f ?g
"[[- (16 / 35), 9 / 35, 13 / 35, 1 / 35, 1 / 35, - (8 / 35), 1 / 35],
  [0, - (1 / 2), 0, 0, 0, 1 / 2, 0],
  [3 / 70, 1 / 140, - (9 / 70), 1 / 35, 1 / 35, 3 / 140, 1 / 35],
  [3 / 35, 1 / 70, - (1 / 140), - (27 / 140), 2 / 35, 3 / 70, 2 / 35],
  [12 / 175, 2 / 175, - (1 / 175), 8 / 175, - (27 / 175), 6 / 175, 8 / 175],
  [4 / 105, 2 / 315, - (1 / 315), 8 / 315, 8 / 315, - (29 / 315), 8 / 315],
  [3 / 70, 1 / 140, - (1 / 280), 1 / 35, 1 / 35, 3 / 140, - (27 / 280)]]"
  :: "real list list"
### Ambiguous input (line 475 of "$AFP/Perron_Frobenius/HMA_Connect.thy") produces 4 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq" ("_applC" ("_position" mat2matofpoly) ("_position" A))
###     ("\<^const>Finite_Cartesian_Product.vec.vec_lambda_binder"
###       ("_idts" ("_position" i) ("_position" j))
###       ("_poly"
###         ("\<^const>Matrix.vec_index"
###           ("\<^const>Matrix.vec_index" ("_position" A) ("_position" i))
###           ("_position" j))))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq" ("_applC" ("_position" mat2matofpoly) ("_position" A))
###     ("\<^const>Finite_Cartesian_Product.vec.vec_lambda_binder"
###       ("_idts" ("_position" i) ("_position" j))
###       ("_poly"
###         ("\<^const>Finite_Cartesian_Product.vec.vec_nth" ("_position" A)
###           ("\<^const>Matrix.vec_index" ("_position" i) ("_position" j)))))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq" ("_applC" ("_position" mat2matofpoly) ("_position" A))
###     ("\<^const>Finite_Cartesian_Product.vec.vec_lambda_binder"
###       ("_idts" ("_position" i) ("_position" j))
###       ("_poly"
###         ("\<^const>Finite_Cartesian_Product.vec.vec_nth"
###           ("\<^const>Matrix.vec_index" ("_position" A) ("_position" i))
###           ("_position" j))))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq" ("_applC" ("_position" mat2matofpoly) ("_position" A))
###     ("\<^const>Finite_Cartesian_Product.vec.vec_lambda_binder"
###       ("_idts" ("_position" i) ("_position" j))
###       ("_poly"
###         ("\<^const>Finite_Cartesian_Product.vec.vec_nth"
###           ("\<^const>Finite_Cartesian_Product.vec.vec_nth" ("_position" A)
###             ("_position" i))
###           ("_position" j))))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 480 of "$AFP/Perron_Frobenius/HMA_Connect.thy") produces 4 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("_applC" ("_position" erase_mat)
###       ("_cargs" ("_position" A) ("_cargs" ("_position" i) ("_position" j))))
###     ("\<^const>Finite_Cartesian_Product.vec.vec_lambda_binder"
###       ("_position" i')
###       ("\<^const>Finite_Cartesian_Product.vec.vec_lambda_binder"
###         ("_position" j')
###         ("\<^const>HOL.If"
###           ("\<^const>HOL.disj"
###             ("\<^const>HOL.eq" ("_position" i') ("_position" i))
###             ("\<^const>HOL.eq" ("_position" j') ("_position" j)))
###           ("\<^const>Groups.zero_class.zero")
###           ("\<^const>Finite_Cartesian_Product.vec.vec_nth"
###             ("\<^const>Finite_Cartesian_Product.vec.vec_nth" ("_position" A)
###               ("_position" i'))
###             ("_position" j')))))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("_applC" ("_position" erase_mat)
###       ("_cargs" ("_position" A) ("_cargs" ("_position" i) ("_position" j))))
###     ("\<^const>Finite_Cartesian_Product.vec.vec_lambda_binder"
###       ("_position" i')
###       ("\<^const>Finite_Cartesian_Product.vec.vec_lambda_binder"
###         ("_position" j')
###         ("\<^const>HOL.If"
###           ("\<^const>HOL.disj"
###             ("\<^const>HOL.eq" ("_position" i') ("_position" i))
###             ("\<^const>HOL.eq" ("_position" j') ("_position" j)))
###           ("\<^const>Groups.zero_class.zero")
###           ("\<^const>Finite_Cartesian_Product.vec.vec_nth"
###             ("\<^const>Matrix.vec_index" ("_position" A) ("_position" i'))
###             ("_position" j')))))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("_applC" ("_position" erase_mat)
###       ("_cargs" ("_position" A) ("_cargs" ("_position" i) ("_position" j))))
###     ("\<^const>Finite_Cartesian_Product.vec.vec_lambda_binder"
###       ("_position" i')
###       ("\<^const>Finite_Cartesian_Product.vec.vec_lambda_binder"
###         ("_position" j')
###         ("\<^const>HOL.If"
###           ("\<^const>HOL.disj"
###             ("\<^const>HOL.eq" ("_position" i') ("_position" i))
###             ("\<^const>HOL.eq" ("_position" j') ("_position" j)))
###           ("\<^const>Groups.zero_class.zero")
###           ("\<^const>Finite_Cartesian_Product.vec.vec_nth" ("_position" A)
###             ("\<^const>Matrix.vec_index" ("_position" i')
###               ("_position" j'))))))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("_applC" ("_position" erase_mat)
###       ("_cargs" ("_position" A) ("_cargs" ("_position" i) ("_position" j))))
###     ("\<^const>Finite_Cartesian_Product.vec.vec_lambda_binder"
###       ("_position" i')
###       ("\<^const>Finite_Cartesian_Product.vec.vec_lambda_binder"
###         ("_position" j')
###         ("\<^const>HOL.If"
###           ("\<^const>HOL.disj"
###             ("\<^const>HOL.eq" ("_position" i') ("_position" i))
###             ("\<^const>HOL.eq" ("_position" j') ("_position" j)))
###           ("\<^const>Groups.zero_class.zero")
###           ("\<^const>Matrix.vec_index"
###             ("\<^const>Matrix.vec_index" ("_position" A) ("_position" i'))
###             ("_position" j')))))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
"[[1, 0, 0, 0, 0, 0, 0], [0, 1, 0, 0, 0, 0, 0], [0, 0, 1, 0, 0, 0, 0],
  [0, 0, 0, 1, 0, 0, 0], [0, 0, 0, 0, 1, 0, 0], [0, 0, 0, 0, 0, 1, 0],
  [0, 0, 0, 0, 0, 0, 1]]"
  :: "real list list"
### theory "Perron_Frobenius.HMA_Connect"
### 3.679s elapsed time, 14.111s cpu time, 2.179s GC time
Loading theory "Draft.Mod_Type_Connect" (required by "Draft.SNF_AlgorithmMoreTemplates" via "Draft.SNF_Algorithm" via "Draft.Smith_Normal_Form_JNF" via "Draft.SNF_Missing_Lemmas")
"Some (vec_lambda _)"
  :: "((real, 7) vec, 7) vec option"
"[[- (16 / 35), 9 / 35, 13 / 35, 1 / 35, 1 / 35, - (8 / 35), 1 / 35],
  [0, - (1 / 2), 0, 0, 0, 1 / 2, 0],
  [3 / 70, 1 / 140, - (9 / 70), 1 / 35, 1 / 35, 3 / 140, 1 / 35],
  [3 / 35, 1 / 70, - (1 / 140), - (27 / 140), 2 / 35, 3 / 70, 2 / 35],
  [12 / 175, 2 / 175, - (1 / 175), 8 / 175, - (27 / 175), 6 / 175, 8 / 175],
  [4 / 105, 2 / 315, - (1 / 315), 8 / 315, 8 / 315, - (29 / 315), 8 / 315],
  [3 / 70, 1 / 140, - (1 / 280), 1 / 35, 1 / 35, 3 / 140, - (27 / 280)]]"
  :: "real list list"
"None"
  :: "((real, 7) vec, 7) vec option"
"[[Complex (101 / 232) (- (35 / 232)), Complex (- (1 / 8)) (- (1 / 8)),
   Complex (5 / 29) (2 / 29)],
  [Complex (81 / 232) (15 / 232), Complex (- (1 / 8)) (1 / 8),
   Complex (2 / 29) (- (5 / 29))],
  [Complex (- (1 / 8)) 0, Complex (1 / 8) 0, Complex 0 0]]"
  :: "complex list list"
Found termination order: "{}"
### theory "Draft.Mod_Type_Connect"
### 1.362s elapsed time, 5.187s cpu time, 0.950s GC time
"- 3837"
  :: "real"
"6240"
  :: "rat"
"1"
  :: "real"
class pir = comm_ring_1 +
  assumes "all_ideal_is_principal": "!!I. ideal I ==> principal_ideal I"
"{[1, 3, 0, 4, 2, 0], [0, 0, 1, 2, 0, 0], [0, 0, 0, 0, 0, 1]}"
  :: "real list set"
"{[1, 0, 0, 1], [0, 1, 0, 1], [0, 0, 1, 1]}"
  :: "real list set"
"{[1, 0, 10, 0], [0, 1, - 5, 0], [0, 0, 0, 1]}"
  :: "real list set"
"{[- 4, 0, - 2, 1, 0, 0], [- 2, 0, 0, 0, 1, 0], [- 3, 1, 0, 0, 0, 0]}"
  :: "real list set"
"{[- 1, - 1, - 1, 1]}"
  :: "real list set"
"{[1, 0, 0, 1 / 4], [0, 1, 0, 1], [0, 0, 1, 3 / 4]}"
  :: "real list set"
"{[- 10, 5, 1, 0]}"
  :: "real list set"
"{[- (1 / 4), - 1, - (3 / 4), 1]}"
  :: "real list set"
class pir = bezout_ring +
  assumes "all_ideal_is_principal": "!!I. ideal I ==> principal_ideal I"
"True"
  :: "bool"
"True"
  :: "bool"
"True"
  :: "bool"
"True"
  :: "bool"
"True"
  :: "bool"
"Some ([- (17 / 15), 32 / 15, - (4 / 15)], {})"
  :: "(real list * real list set) option"
"None"
  :: "(real list * real list set) option"
"Some ([4, - 3, 0], {[1, - 1, 1]})"
  :: "(real list * real list set) option"
"Some
  ([0, 0, 0, 0, 0],
   {[- (2 / 3), 1, 0, 0, 0], [- (2 / 3), 0, 0, 1, 0],
    [8 / 3, 0, - 3, 0, 1]})"
  :: "(real list * real list set) option"
"Some
  ([63 / 5, 57 / 5, 0, 0], {[2, 2, 1, 0], [- (26 / 5), - (24 / 5), 0, 1]})"
  :: "(real list * real list set) option"
class field_euclidean = euclidean_ring + field +
  assumes "euclidean_size = (%i. if i = (0::'a) then 0 else 1)"
    and "!!normalisation_factor. normalisation_factor = id"
### theory "Echelon_Form.Rings2"
### 26.220s elapsed time, 92.566s cpu time, 23.066s GC time
Loading theory "Echelon_Form.Cayley_Hamilton_Compatible" (required by "Draft.SNF_AlgorithmMoreTemplates" via "Draft.SNF_Algorithm" via "Draft.Smith_Normal_Form_JNF" via "Draft.SNF_Missing_Lemmas" via "Hermite.Hermite" via "Echelon_Form.Echelon_Form_Inverse" via "Echelon_Form.Echelon_Form_Det" via "Echelon_Form.Echelon_Form")
### theory "Echelon_Form.Cayley_Hamilton_Compatible"
### 0.888s elapsed time, 1.140s cpu time, 0.120s GC time
Loading theory "Echelon_Form.Code_Cayley_Hamilton" (required by "Draft.SNF_AlgorithmMoreTemplates" via "Draft.SNF_Algorithm" via "Draft.Smith_Normal_Form_JNF" via "Draft.SNF_Missing_Lemmas" via "Hermite.Hermite" via "Echelon_Form.Examples_Echelon_Form_Abstract")
Loading theory "Echelon_Form.Echelon_Form" (required by "Draft.SNF_AlgorithmMoreTemplates" via "Draft.SNF_Algorithm" via "Draft.Smith_Normal_Form_JNF" via "Draft.SNF_Missing_Lemmas" via "Hermite.Hermite" via "Echelon_Form.Echelon_Form_Inverse" via "Echelon_Form.Echelon_Form_Det")
consts
  matpow :: "(('a, 'n) vec, 'n) vec => nat => (('a, 'n) vec, 'n) vec"
### theory "Echelon_Form.Code_Cayley_Hamilton"
### 0.204s elapsed time, 0.437s cpu time, 0.078s GC time
class bezout_ring = GCD_ring +
  assumes
    "exists_bezout":
      "!!a b.
          EX p q d.
             p * a + q * b = d &
             d dvd a & d dvd b & (ALL d'. d' dvd a & d' dvd b --> d' dvd d)"
consts
  bezout_iterate ::
    "(('a, 'cols) vec, 'rows) vec
     => nat
        => 'rows
           => 'cols
              => ('a => 'a => 'a * 'a * 'a * 'a * 'a)
                 => (('a, 'cols) vec, 'rows) vec"
class euclidean_space = heine_borel + polish_space + real_inner + banach +
  perfect_space +
  fixes Basis :: "'a set"
  assumes "nonempty_Basis": "Basis ~= {}"
  assumes "finite_Basis": "finite Basis"
  assumes
    "inner_Basis":
      "!!u v.
          [| u : Basis; v : Basis |]
          ==> u \<bullet> v = (if u = v then 1 else 0)"
  assumes
    "euclidean_all_zero_iff":
      "!!x. (ALL u:Basis. x \<bullet> u = 0) = (x = (0::'a))"
### theory "Echelon_Form.Echelon_Form"
### 56.920s elapsed time, 195.912s cpu time, 194.845s GC time
Loading theory "Echelon_Form.Echelon_Form_Det" (required by "Draft.SNF_AlgorithmMoreTemplates" via "Draft.SNF_Algorithm" via "Draft.Smith_Normal_Form_JNF" via "Draft.SNF_Missing_Lemmas" via "Hermite.Hermite" via "Echelon_Form.Echelon_Form_Inverse")
### theory "Echelon_Form.Echelon_Form_Det"
### 0.218s elapsed time, 0.218s cpu time, 0.000s GC time
Loading theory "Echelon_Form.Echelon_Form_Inverse" (required by "Draft.SNF_AlgorithmMoreTemplates" via "Draft.SNF_Algorithm" via "Draft.Smith_Normal_Form_JNF" via "Draft.SNF_Missing_Lemmas" via "Hermite.Hermite")
### theory "Echelon_Form.Echelon_Form_Inverse"
### 0.418s elapsed time, 0.418s cpu time, 0.000s GC time
Loading theory "Echelon_Form.Examples_Echelon_Form_Abstract" (required by "Draft.SNF_AlgorithmMoreTemplates" via "Draft.SNF_Algorithm" via "Draft.Smith_Normal_Form_JNF" via "Draft.SNF_Missing_Lemmas" via "Hermite.Hermite")
### theory "Echelon_Form.Examples_Echelon_Form_Abstract"
### 1.691s elapsed time, 3.556s cpu time, 0.097s GC time
Loading theory "Hermite.Hermite" (required by "Draft.SNF_AlgorithmMoreTemplates" via "Draft.SNF_Algorithm" via "Draft.Smith_Normal_Form_JNF" via "Draft.SNF_Missing_Lemmas")
"[[1, 0, 0, 0, 0, 0], [0, 1, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0],
  [0, 0, 0, 0, 8, 2]]"
  :: "real list list"
"1"
  :: "rat"
class normalization_semidom = algebraic_semidom +
  semidom_divide_unit_factor +
  fixes normalize :: "'a => 'a"
  assumes
    "unit_factor_mult_normalize": "!!a. unit_factor a * normalize a = a"
    and "normalize_0": "normalize (0::'a) = (0::'a)"
class normalization_semidom = algebraic_semidom +
  semidom_divide_unit_factor +
  fixes normalize :: "'a => 'a"
  assumes
    "unit_factor_mult_normalize": "!!a. unit_factor a * normalize a = a"
    and "normalize_0": "normalize (0::'a) = (0::'a)"
consts
  Hermite_reduce_above ::
    "(('a, 'cols) vec, 'rows) vec
     => nat
        => 'rows
           => 'cols => ('a => 'a => 'a) => (('a, 'cols) vec, 'rows) vec"
"[[5060, 6371, 4457], [3028, 3776, 2689], [2059, 2592, 1814]]"
  :: "rat list list"
### theory "Hermite.Hermite"
### 2.804s elapsed time, 11.159s cpu time, 0.418s GC time
Loading theory "Draft.SNF_Missing_Lemmas" (required by "Draft.SNF_AlgorithmMoreTemplates" via "Draft.SNF_Algorithm" via "Draft.Smith_Normal_Form_JNF")
### theory "Draft.SNF_Missing_Lemmas"
### 2.651s elapsed time, 10.540s cpu time, 0.457s GC time
Loading theory "Draft.Smith_Normal_Form_JNF" (required by "Draft.SNF_AlgorithmMoreTemplates" via "Draft.SNF_Algorithm")
### theory "Draft.Smith_Normal_Form_JNF"
### 0.198s elapsed time, 0.785s cpu time, 0.086s GC time
Loading theory "Draft.SNF_Algorithm" (required by "Draft.SNF_AlgorithmMoreTemplates")
Found termination order: "(%p. size_list size (fst (snd p))) <*mlex*> {}"
locale Smith_Impl
  fixes Smith_1x2 :: "'a mat => 'a mat * 'a mat"
    and Smith_2x2 :: "'a mat => 'a mat * 'a mat * 'a mat"
    and div_op :: "'a => 'a => 'a"
  assumes "Smith_Impl Smith_1x2 Smith_2x2 div_op"
Found termination order: "(%p. size (fst p)) <*mlex*> {}"
"[0, 1, 0]"
  :: "int list"
"[[1, 0, 0], [0, 1, 0], [0, 0, 1]]"
  :: "int list list"
"- 156"
  :: "int"
### theory "Draft.SNF_Algorithm"
### 6.637s elapsed time, 26.326s cpu time, 0.891s GC time
Loading theory "Draft.SNF_AlgorithmMoreTemplates"
val templateLemmas =
   [("SNF_Algorithm.Smith_1xn_two_matrices_all",
     "ALL A:carrier_mat 1 ?n. is_SNF A (?Smith_1xn A) ==>
      EX Smith_1xn'.
         ALL A:carrier_mat 1 ?n. is_SNF A (1\<^sub>m 1, Smith_1xn' A)",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_hole 6,
                template_app
                 (template_app (template_hole 5, template_hole 4),
                  template_var 1)),
              t_empty)
            )],
       template_predicate (template_app (template_hole 2, t_empty)))),
    ("SNF_Algorithm.Smith_1xn_two_matrices",
     "[| ?A : carrier_mat 1 ?n; (?P, ?S, ?Q) = ?Smith_1xn ?A;
         is_SNF ?A (?Smith_1xn ?A) |]
      ==> EX Smith_1xn'. is_SNF ?A (1\<^sub>m 1, Smith_1xn' ?A)",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 8, template_var 5),
              template_app
               (template_app (template_hole 7, template_hole 6),
                template_var 4))
            ),
        template_equation
         (template_app
           (template_app (template_hole 4, template_var 3),
            template_app
             (template_app (template_hole 3, template_var 2),
              template_var 1)),
          template_app (template_var 0, template_var 5)),
        template_predicate
         (
            template_app
             (template_app (template_hole 2, template_var 5),
              template_app (template_var 0, template_var 5))
            )],
       template_predicate (template_app (template_hole 1, t_empty)))),
    ("SNF_Algorithm.reduce_column",
     "[| ?H : carrier_mat ?m ?n; (?P, ?K) = reduce_column ?div_op ?H;
         0 < ?m |]
      ==> ?P : carrier_mat ?m ?m &
          ?K : carrier_mat ?m ?n & ?P * ?H = ?K & invertible_mat ?P",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 10, template_var 5),
              template_app
               (template_app (template_hole 9, template_var 4),
                template_var 3))
            ),
        template_equation
         (template_app
           (template_app (template_hole 7, template_var 2), template_var 1),
          template_app
           (template_app (template_hole 6, template_var 0),
            template_var 5)),
        template_inequation (less_than, template_hole 4, template_var 4)],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 3,
               template_app
                (template_app (template_hole 10, template_var 2),
                 template_app
                  (template_app (template_hole 9, template_var 4),
                   template_var 4))),
             template_app
              (template_app
                (template_hole 3,
                 template_app
                  (template_app (template_hole 10, template_var 1),
                   template_app
                    (template_app (template_hole 9, template_var 4),
                     template_var 3))),
               template_app
                (template_app
                  (template_hole 3,
                   template_app
                    (template_app
                      (template_hole 2,
                       template_app
                        (template_app (template_hole 1, template_var 2),
                         template_var 5)),
                     template_var 1)),
                 template_app (template_hole 0, template_var 2))))
           ))),
    ("SNF_Algorithm.reduce_column_preserves",
     "[| ?H : carrier_mat ?m ?n; (?P, ?K) = reduce_column ?div_op ?H;
         0 < ?m; ?i : {0, 1}; ?i < ?m |]
      ==> Matrix.row ?K ?i = Matrix.row ?H ?i",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 12, template_var 6),
              template_app
               (template_app (template_hole 11, template_var 5),
                template_var 4))
            ),
        template_equation
         (template_app
           (template_app (template_hole 9, template_var 3), template_var 2),
          template_app
           (template_app (template_hole 8, template_var 1),
            template_var 6)),
        template_inequation (less_than, template_hole 6, template_var 5),
        template_predicate
         (
            template_app
             (template_app (template_hole 5, template_var 0),
              template_app
               (template_app (template_hole 4, template_hole 6),
                template_app
                 (template_app (template_hole 4, template_hole 3),
                  template_hole 2)))
            ),
        template_inequation (less_than, template_var 0, template_var 5)],
       template_equation
        (template_app
          (template_app (template_hole 0, template_var 2), template_var 0),
         template_app
          (template_app (template_hole 0, template_var 6),
           template_var 0)))),
    ("SNF_Algorithm.is_SNF_intro",
     "[| ?P : carrier_mat (dim_row ?A) (dim_row ?A);
         ?Q : carrier_mat (dim_col ?A) (dim_col ?A); invertible_mat ?P;
         invertible_mat ?Q; Smith_normal_form_mat ?S; ?S = ?P * ?A * ?Q |]
      ==> is_SNF ?A (?P, ?S, ?Q)",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 10, template_var 3),
              template_app
               (template_app
                 (template_hole 9,
                  template_app (template_hole 8, template_var 2)),
                template_app (template_hole 8, template_var 2)))
            ),
        template_predicate
         (
            template_app
             (template_app (template_hole 10, template_var 1),
              template_app
               (template_app
                 (template_hole 9,
                  template_app (template_hole 7, template_var 2)),
                template_app (template_hole 7, template_var 2)))
            ),
        template_predicate (template_app (template_hole 6, template_var 3)),
        template_predicate (template_app (template_hole 6, template_var 1)),
        template_predicate (template_app (template_hole 5, template_var 0)),
        template_equation
         (template_var 0,
          template_app
           (template_app
             (template_hole 3,
              template_app
               (template_app (template_hole 3, template_var 3),
                template_var 2)),
            template_var 1))],
       template_predicate
        (
           template_app
            (template_app (template_hole 2, template_var 2),
             template_app
              (template_app (template_hole 1, template_var 3),
               template_app
                (template_app (template_hole 0, template_var 0),
                 template_var 1)))
           ))),
    ("SNF_Algorithm.reduce_column_preserves2",
     "[| ?H : carrier_mat ?m ?n; (?P, ?K) = reduce_column ?div_op ?H;
         0 < ?m; ?i : {0, 1}; ?i < ?m; ?j < ?n |]
      ==> ?K $$ (?i, ?j) = ?H $$ (?i, ?j)",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 13, template_var 7),
              template_app
               (template_app (template_hole 12, template_var 6),
                template_var 5))
            ),
        template_equation
         (template_app
           (template_app (template_hole 10, template_var 4),
            template_var 3),
          template_app
           (template_app (template_hole 9, template_var 2),
            template_var 7)),
        template_inequation (less_than, template_hole 7, template_var 6),
        template_predicate
         (
            template_app
             (template_app (template_hole 6, template_var 1),
              template_app
               (template_app (template_hole 5, template_hole 7),
                template_app
                 (template_app (template_hole 5, template_hole 4),
                  template_hole 3)))
            ),
        template_inequation (less_than, template_var 1, template_var 6),
        template_inequation (less_than, template_var 0, template_var 5)],
       template_equation
        (template_app
          (template_app (template_hole 1, template_var 3),
           template_app
            (template_app (template_hole 0, template_var 1),
             template_var 0)),
         template_app
          (template_app (template_hole 1, template_var 7),
           template_app
            (template_app (template_hole 0, template_var 1),
             template_var 0))))),
    ("SNF_Algorithm.reduce_column_aux_preserves",
     "[| ?H : carrier_mat ?m ?n; ?P_init : carrier_mat ?m ?m;
         ?K_init : carrier_mat ?m ?n; ?P_init * ?H = ?K_init;
         (?P, ?K) = reduce_column_aux ?div_op ?xs ?H (?P_init, ?K_init);
         0 < ?m; invertible_mat ?P_init; 0 ~: set ?xs; ?i ~: set ?xs;
         ?i < ?m |]
      ==> Matrix.row ?K ?i = Matrix.row ?K_init ?i",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 14, template_var 9),
              template_app
               (template_app (template_hole 13, template_var 8),
                template_var 7))
            ),
        template_predicate
         (
            template_app
             (template_app (template_hole 14, template_var 6),
              template_app
               (template_app (template_hole 13, template_var 8),
                template_var 8))
            ),
        template_predicate
         (
            template_app
             (template_app (template_hole 14, template_var 5),
              template_app
               (template_app (template_hole 13, template_var 8),
                template_var 7))
            ),
        template_equation
         (template_app
           (template_app (template_hole 11, template_var 6),
            template_var 9),
          template_var 5),
        template_equation
         (template_app
           (template_app (template_hole 9, template_var 4), template_var 3),
          template_app
           (template_app
             (template_app
               (template_app (template_hole 8, template_var 2),
                template_var 1),
              template_var 9),
            template_app
             (template_app (template_hole 9, template_var 6),
              template_var 5))),
        template_inequation (less_than, template_hole 6, template_var 8),
        template_predicate (template_app (template_hole 5, template_var 6)),
        template_negation
         (
            template_predicate
             (
                template_app
                 (template_app (template_hole 3, template_hole 6),
                  template_app (template_hole 2, template_var 1))
                )
            ),
        template_negation
         (
            template_predicate
             (
                template_app
                 (template_app (template_hole 3, template_var 0),
                  template_app (template_hole 2, template_var 1))
                )
            ),
        template_inequation (less_than, template_var 0, template_var 8)],
       template_equation
        (template_app
          (template_app (template_hole 0, template_var 3), template_var 0),
         template_app
          (template_app (template_hole 0, template_var 5),
           template_var 0)))),
    ("SNF_Algorithm.reduce_column_aux",
     "[| ?H : carrier_mat ?m ?n; ?P_init : carrier_mat ?m ?m;
         ?K_init : carrier_mat ?m ?n; ?P_init * ?H = ?K_init;
         (?P, ?K) = reduce_column_aux ?div_op ?xs ?H (?P_init, ?K_init);
         0 < ?m; invertible_mat ?P_init; 0 ~: set ?xs |]
      ==> ?P : carrier_mat ?m ?m &
          ?K : carrier_mat ?m ?n & ?P * ?H = ?K & invertible_mat ?P",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 13, template_var 8),
              template_app
               (template_app (template_hole 12, template_var 7),
                template_var 6))
            ),
        template_predicate
         (
            template_app
             (template_app (template_hole 13, template_var 5),
              template_app
               (template_app (template_hole 12, template_var 7),
                template_var 7))
            ),
        template_predicate
         (
            template_app
             (template_app (template_hole 13, template_var 4),
              template_app
               (template_app (template_hole 12, template_var 7),
                template_var 6))
            ),
        template_equation
         (template_app
           (template_app (template_hole 10, template_var 5),
            template_var 8),
          template_var 4),
        template_equation
         (template_app
           (template_app (template_hole 8, template_var 3), template_var 2),
          template_app
           (template_app
             (template_app
               (template_app (template_hole 7, template_var 1),
                template_var 0),
              template_var 8),
            template_app
             (template_app (template_hole 8, template_var 5),
              template_var 4))),
        template_inequation (less_than, template_hole 5, template_var 7),
        template_predicate (template_app (template_hole 4, template_var 5)),
        template_negation
         (
            template_predicate
             (
                template_app
                 (template_app (template_hole 2, template_hole 5),
                  template_app (template_hole 1, template_var 0))
                )
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 0,
               template_app
                (template_app (template_hole 13, template_var 3),
                 template_app
                  (template_app (template_hole 12, template_var 7),
                   template_var 7))),
             template_app
              (template_app
                (template_hole 0,
                 template_app
                  (template_app (template_hole 13, template_var 2),
                   template_app
                    (template_app (template_hole 12, template_var 7),
                     template_var 6))),
               template_app
                (template_app
                  (template_hole 0,
                   template_app
                    (template_app
                      (template_hole 11,
                       template_app
                        (template_app (template_hole 10, template_var 3),
                         template_var 8)),
                     template_var 2)),
                 template_app (template_hole 4, template_var 3))))
           ))),
    ("SNF_Algorithm.reduce_column_works",
     "[| ?H : carrier_mat ?m ?n; (?P, ?K) = reduce_column ?div_op ?H;
         0 < ?m; ?H $$ (0, 0) dvd ?H $$ (?i, 0);
         ALL j:{1..<?n}. ?H $$ (0, j) = (0::?'a); ?j : {1..<?n}; 0 < ?n;
         ?i : {2..<?m}; is_div_op ?div_op |]
      ==> ?K $$ (?i, 0) = (0::?'a)",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 19, template_var 7),
              template_app
               (template_app (template_hole 18, template_var 6),
                template_var 5))
            ),
        template_equation
         (template_app
           (template_app (template_hole 16, template_var 4),
            template_var 3),
          template_app
           (template_app (template_hole 15, template_var 2),
            template_var 7)),
        template_inequation (less_than, template_hole 13, template_var 6),
        template_predicate
         (
            template_app
             (template_app
               (template_hole 12,
                template_app
                 (template_app (template_hole 11, template_var 7),
                  template_app
                   (template_app (template_hole 10, template_hole 13),
                    template_hole 13))),
              template_app
               (template_app (template_hole 11, template_var 7),
                template_app
                 (template_app (template_hole 10, template_var 1),
                  template_hole 13)))
            ),
        template_predicate
         (
            template_app
             (template_app
               (template_hole 9,
                template_app
                 (template_app (template_hole 8, template_hole 7),
                  template_var 5)),
              t_empty)
            ),
        template_predicate
         (
            template_app
             (template_app (template_hole 4, template_var 0),
              template_app
               (template_app (template_hole 8, template_hole 7),
                template_var 5))
            ),
        template_inequation (less_than, template_hole 13, template_var 5),
        template_predicate
         (
            template_app
             (template_app (template_hole 4, template_var 1),
              template_app
               (template_app
                 (template_hole 8,
                  template_app
                   (template_hole 3,
                    template_app (template_hole 2, template_hole 1))),
                template_var 6))
            ),
        template_predicate
         (template_app (template_hole 0, template_var 2))],
       template_equation
        (template_app
          (template_app (template_hole 11, template_var 3),
           template_app
            (template_app (template_hole 10, template_var 1),
             template_hole 13)),
         template_hole 5))),
    ("SNF_Algorithm.reduce_column_works",
     "[| ?H : carrier_mat ?m ?n; (?P, ?K) = reduce_column ?div_op ?H;
         0 < ?m; ?H $$ (0, 0) dvd ?H $$ (?i, 0);
         ALL j:{1..<?n}. ?H $$ (0, j) = (0::?'a); ?j : {1..<?n}; 0 < ?n;
         ?i : {2..<?m}; is_div_op ?div_op |]
      ==> ?K $$ (?i, ?j) = ?H $$ (?i, ?j)",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 19, template_var 7),
              template_app
               (template_app (template_hole 18, template_var 6),
                template_var 5))
            ),
        template_equation
         (template_app
           (template_app (template_hole 16, template_var 4),
            template_var 3),
          template_app
           (template_app (template_hole 15, template_var 2),
            template_var 7)),
        template_inequation (less_than, template_hole 13, template_var 6),
        template_predicate
         (
            template_app
             (template_app
               (template_hole 12,
                template_app
                 (template_app (template_hole 11, template_var 7),
                  template_app
                   (template_app (template_hole 10, template_hole 13),
                    template_hole 13))),
              template_app
               (template_app (template_hole 11, template_var 7),
                template_app
                 (template_app (template_hole 10, template_var 1),
                  template_hole 13)))
            ),
        template_predicate
         (
            template_app
             (template_app
               (template_hole 9,
                template_app
                 (template_app (template_hole 8, template_hole 7),
                  template_var 5)),
              t_empty)
            ),
        template_predicate
         (
            template_app
             (template_app (template_hole 4, template_var 0),
              template_app
               (template_app (template_hole 8, template_hole 7),
                template_var 5))
            ),
        template_inequation (less_than, template_hole 13, template_var 5),
        template_predicate
         (
            template_app
             (template_app (template_hole 4, template_var 1),
              template_app
               (template_app
                 (template_hole 8,
                  template_app
                   (template_hole 3,
                    template_app (template_hole 2, template_hole 1))),
                template_var 6))
            ),
        template_predicate
         (template_app (template_hole 0, template_var 2))],
       template_equation
        (template_app
          (template_app (template_hole 11, template_var 3),
           template_app
            (template_app (template_hole 10, template_var 1),
             template_var 0)),
         template_app
          (template_app (template_hole 11, template_var 7),
           template_app
            (template_app (template_hole 10, template_var 1),
             template_var 0))))),
    ("SNF_Algorithm.reduce_column_aux_index'",
     "[| ?H : carrier_mat ?m ?n; ?P_init : carrier_mat ?m ?m;
         ?K_init : carrier_mat ?m ?n; ?P_init * ?H = ?K_init;
         (?P, ?K) = reduce_column_aux ?div_op ?xs ?H (?P_init, ?K_init);
         0 < ?m; invertible_mat ?P_init; 0 ~: set ?xs;
         ALL x:set ?xs. x < ?m; distinct ?xs |]
      ==> ALL i:set ?xs.
             Matrix.row ?K i =
             Matrix.row
              (addrow (- ?div_op (?H $$ (i, 0)) (?H $$ (0, 0))) i 0 ?K_init)
              i",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 22, template_var 8),
              template_app
               (template_app (template_hole 21, template_var 7),
                template_var 6))
            ),
        template_predicate
         (
            template_app
             (template_app (template_hole 22, template_var 5),
              template_app
               (template_app (template_hole 21, template_var 7),
                template_var 7))
            ),
        template_predicate
         (
            template_app
             (template_app (template_hole 22, template_var 4),
              template_app
               (template_app (template_hole 21, template_var 7),
                template_var 6))
            ),
        template_equation
         (template_app
           (template_app (template_hole 19, template_var 5),
            template_var 8),
          template_var 4),
        template_equation
         (template_app
           (template_app (template_hole 17, template_var 3),
            template_var 2),
          template_app
           (template_app
             (template_app
               (template_app (template_hole 16, template_var 1),
                template_var 0),
              template_var 8),
            template_app
             (template_app (template_hole 17, template_var 5),
              template_var 4))),
        template_inequation (less_than, template_hole 14, template_var 7),
        template_predicate
         (template_app (template_hole 13, template_var 5)),
        template_negation
         (
            template_predicate
             (
                template_app
                 (template_app (template_hole 11, template_hole 14),
                  template_app (template_hole 10, template_var 0))
                )
            ),
        template_predicate
         (
            template_app
             (template_app
               (template_hole 9,
                template_app (template_hole 10, template_var 0)),
              t_empty)
            ),
        template_predicate
         (template_app (template_hole 8, template_var 0))],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 9,
               template_app (template_hole 10, template_var 0)),
             t_empty)
           ))),
    ("SNF_Algorithm.reduce_column_aux_index",
     "[| ?H : carrier_mat ?m ?n; ?P_init : carrier_mat ?m ?m;
         ?K_init : carrier_mat ?m ?n; ?P_init * ?H = ?K_init;
         (?P, ?K) = reduce_column_aux ?div_op ?xs ?H (?P_init, ?K_init);
         0 < ?m; invertible_mat ?P_init; 0 ~: set ?xs;
         ALL x:set ?xs. x < ?m; distinct ?xs; ?i : set ?xs |]
      ==> Matrix.row ?K ?i =
          Matrix.row
           (addrow (- ?div_op (?H $$ (?i, 0)) (?H $$ (0, 0))) ?i 0 ?K_init)
           ?i",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 22, template_var 9),
              template_app
               (template_app (template_hole 21, template_var 8),
                template_var 7))
            ),
        template_predicate
         (
            template_app
             (template_app (template_hole 22, template_var 6),
              template_app
               (template_app (template_hole 21, template_var 8),
                template_var 8))
            ),
        template_predicate
         (
            template_app
             (template_app (template_hole 22, template_var 5),
              template_app
               (template_app (template_hole 21, template_var 8),
                template_var 7))
            ),
        template_equation
         (template_app
           (template_app (template_hole 19, template_var 6),
            template_var 9),
          template_var 5),
        template_equation
         (template_app
           (template_app (template_hole 17, template_var 4),
            template_var 3),
          template_app
           (template_app
             (template_app
               (template_app (template_hole 16, template_var 2),
                template_var 1),
              template_var 9),
            template_app
             (template_app (template_hole 17, template_var 6),
              template_var 5))),
        template_inequation (less_than, template_hole 14, template_var 8),
        template_predicate
         (template_app (template_hole 13, template_var 6)),
        template_negation
         (
            template_predicate
             (
                template_app
                 (template_app (template_hole 11, template_hole 14),
                  template_app (template_hole 10, template_var 1))
                )
            ),
        template_predicate
         (
            template_app
             (template_app
               (template_hole 9,
                template_app (template_hole 10, template_var 1)),
              t_empty)
            ),
        template_predicate (template_app (template_hole 8, template_var 1)),
        template_predicate
         (
            template_app
             (template_app (template_hole 11, template_var 0),
              template_app (template_hole 10, template_var 1))
            )],
       template_equation
        (template_app
          (template_app (template_hole 6, template_var 3), template_var 0),
         template_app
          (template_app
            (template_hole 6,
             template_app
              (template_app
                (template_app
                  (template_app
                    (template_app
                      (template_app (template_hole 5, template_hole 4),
                       template_hole 3),
                     template_app
                      (template_hole 2,
                       template_app
                        (template_app
                          (template_var 2,
                           template_app
                            (template_app (template_hole 1, template_var 9),
                             template_app
                              (template_app
                                (template_hole 0, template_var 0),
                               template_hole 14))),
                         template_app
                          (template_app (template_hole 1, template_var 9),
                           template_app
                            (template_app
                              (template_hole 0, template_hole 14),
                             template_hole 14))))),
                   template_var 0),
                 template_hole 14),
               template_var 5)),
           template_var 0)))),
    ("SNF_Algorithm.reduce_column_aux_works",
     "[| ?H : carrier_mat ?m ?n;
         (?P, ?K) =
         reduce_column_aux ?div_op ?xs ?H (1\<^sub>m (dim_row ?H), ?H);
         0 < ?m; 0 ~: set ?xs; ALL x:set ?xs. x < ?m; distinct ?xs;
         ?i : set ?xs; ?H $$ (0, 0) dvd ?H $$ (?i, 0);
         ALL j:{1..<?n}. ?H $$ (0, j) = (0::?'a); ?j : {1..<?n}; 0 < ?n;
         is_div_op ?div_op |]
      ==> ?K $$ (?i, 0) = (0::?'a)",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 21, template_var 8),
              template_app
               (template_app (template_hole 20, template_var 7),
                template_var 6))
            ),
        template_equation
         (template_app
           (template_app (template_hole 18, template_var 5),
            template_var 4),
          template_app
           (template_app
             (template_app
               (template_app (template_hole 17, template_var 3),
                template_var 2),
              template_var 8),
            template_app
             (template_app
               (template_hole 18,
                template_app
                 (template_hole 16,
                  template_app (template_hole 15, template_var 8))),
              template_var 8))),
        template_inequation (less_than, template_hole 13, template_var 7),
        template_negation
         (
            template_predicate
             (
                template_app
                 (template_app (template_hole 11, template_hole 13),
                  template_app (template_hole 10, template_var 2))
                )
            ),
        template_predicate
         (
            template_app
             (template_app
               (template_hole 9,
                template_app (template_hole 10, template_var 2)),
              t_empty)
            ),
        template_predicate (template_app (template_hole 8, template_var 2)),
        template_predicate
         (
            template_app
             (template_app (template_hole 11, template_var 1),
              template_app (template_hole 10, template_var 2))
            ),
        template_predicate
         (
            template_app
             (template_app
               (template_hole 7,
                template_app
                 (template_app (template_hole 6, template_var 8),
                  template_app
                   (template_app (template_hole 5, template_hole 13),
                    template_hole 13))),
              template_app
               (template_app (template_hole 6, template_var 8),
                template_app
                 (template_app (template_hole 5, template_var 1),
                  template_hole 13)))
            ),
        template_predicate
         (
            template_app
             (template_app
               (template_hole 9,
                template_app
                 (template_app (template_hole 4, template_hole 3),
                  template_var 6)),
              t_empty)
            ),
        template_predicate
         (
            template_app
             (template_app (template_hole 11, template_var 0),
              template_app
               (template_app (template_hole 4, template_hole 3),
                template_var 6))
            ),
        template_inequation (less_than, template_hole 13, template_var 6),
        template_predicate
         (template_app (template_hole 0, template_var 3))],
       template_equation
        (template_app
          (template_app (template_hole 6, template_var 4),
           template_app
            (template_app (template_hole 5, template_var 1),
             template_hole 13)),
         template_hole 1))),
    ("SNF_Algorithm.reduce_column_aux_works",
     "[| ?H : carrier_mat ?m ?n;
         (?P, ?K) =
         reduce_column_aux ?div_op ?xs ?H (1\<^sub>m (dim_row ?H), ?H);
         0 < ?m; 0 ~: set ?xs; ALL x:set ?xs. x < ?m; distinct ?xs;
         ?i : set ?xs; ?H $$ (0, 0) dvd ?H $$ (?i, 0);
         ALL j:{1..<?n}. ?H $$ (0, j) = (0::?'a); ?j : {1..<?n}; 0 < ?n;
         is_div_op ?div_op |]
      ==> ?K $$ (?i, ?j) = ?H $$ (?i, ?j)",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 21, template_var 8),
              template_app
               (template_app (template_hole 20, template_var 7),
                template_var 6))
            ),
        template_equation
         (template_app
           (template_app (template_hole 18, template_var 5),
            template_var 4),
          template_app
           (template_app
             (template_app
               (template_app (template_hole 17, template_var 3),
                template_var 2),
              template_var 8),
            template_app
             (template_app
               (template_hole 18,
                template_app
                 (template_hole 16,
                  template_app (template_hole 15, template_var 8))),
              template_var 8))),
        template_inequation (less_than, template_hole 13, template_var 7),
        template_negation
         (
            template_predicate
             (
                template_app
                 (template_app (template_hole 11, template_hole 13),
                  template_app (template_hole 10, template_var 2))
                )
            ),
        template_predicate
         (
            template_app
             (template_app
               (template_hole 9,
                template_app (template_hole 10, template_var 2)),
              t_empty)
            ),
        template_predicate (template_app (template_hole 8, template_var 2)),
        template_predicate
         (
            template_app
             (template_app (template_hole 11, template_var 1),
              template_app (template_hole 10, template_var 2))
            ),
        template_predicate
         (
            template_app
             (template_app
               (template_hole 7,
                template_app
                 (template_app (template_hole 6, template_var 8),
                  template_app
                   (template_app (template_hole 5, template_hole 13),
                    template_hole 13))),
              template_app
               (template_app (template_hole 6, template_var 8),
                template_app
                 (template_app (template_hole 5, template_var 1),
                  template_hole 13)))
            ),
        template_predicate
         (
            template_app
             (template_app
               (template_hole 9,
                template_app
                 (template_app (template_hole 4, template_hole 3),
                  template_var 6)),
              t_empty)
            ),
        template_predicate
         (
            template_app
             (template_app (template_hole 11, template_var 0),
              template_app
               (template_app (template_hole 4, template_hole 3),
                template_var 6))
            ),
        template_inequation (less_than, template_hole 13, template_var 6),
        template_predicate
         (template_app (template_hole 0, template_var 3))],
       template_equation
        (template_app
          (template_app (template_hole 6, template_var 4),
           template_app
            (template_app (template_hole 5, template_var 1),
             template_var 0)),
         template_app
          (template_app (template_hole 6, template_var 8),
           template_app
            (template_app (template_hole 5, template_var 1),
             template_var 0)))))]:
   (string * thm * template) list
### theory "Draft.SNF_AlgorithmMoreTemplates"
### 3.706s elapsed time, 14.745s cpu time, 0.517s GC time
"[[- 5, - 3, 14], [1, 2, - 7], [3, - 1, - 7]]"
  :: "int list list"
"[:7, - 10, - 5, 1:]"
  :: "real poly"
"None"
  :: "((int, 3) vec, 3) vec option"
"[[0, 0, 0], [0, 0, 0], [0, 0, 0]]"
  :: "real list list"
"[[1, 0, 2], [2, - 2, 3], [1, - 1, 1]]"
  :: "int list list"
[| invertible ?A; invertible ?B |] ==> invertible (?A ** ?B)
invertible ?A = (Determinants.det ?A dvd (1::?'a))
[| ?A : carrier_mat ?n ?n; Determinant.det ?A ~= (0::?'a) |]
==> ?A : Group.Units (ring_mat TYPE(?'a) ?n ?b)
[| ?A : carrier_mat ?n ?n; ?B : carrier_mat ?n ?n; ?A * ?B = 1\<^sub>m ?n |]
==> ?B * ?A = 1\<^sub>m ?n
[| ?A : carrier_mat ?n ?n; ?B : carrier_mat ?n ?n; ?A * ?B = 1\<^sub>m ?n |]
==> ?B * ?A = 1\<^sub>m ?n
?A : carrier_mat ?n ?nr ==>
mat_diag ?n ?f * ?A = Matrix.mat ?n ?nr (%(i, j). ?f i * ?A $$ (i, j))
*** Undefined fact: "2.prems" (line 156 of "$AFP/Smith_Normal_Form/SNF_Algorithm.thy")
*** At command "thm" (line 156 of "$AFP/Smith_Normal_Form/SNF_Algorithm.thy")
*** Undefined fact: "2.prems" (line 205 of "$AFP/Smith_Normal_Form/SNF_Algorithm.thy")
*** At command "thm" (line 205 of "$AFP/Smith_Normal_Form/SNF_Algorithm.thy")
*** Undefined fact: "2.hyps" (line 206 of "$AFP/Smith_Normal_Form/SNF_Algorithm.thy")
*** At command "thm" (line 206 of "$AFP/Smith_Normal_Form/SNF_Algorithm.thy")
*** Undefined fact: "is_SNF_H'" (line 1508 of "$AFP/Smith_Normal_Form/SNF_Algorithm.thy")
*** At command "thm" (line 1508 of "$AFP/Smith_Normal_Form/SNF_Algorithm.thy")
"True"
  :: "bool"
"[[1, 44, 57], [0, 108, 52], [0, 0, 63]]"
  :: "int list list"
"[[[:1:], [:- (44 / 89), 31 / 89, - (68 / 89), 137 / 89, 40 / 89:]],
  [0, [:- (2 / 5), 4 / 5, 4, 22 / 5, 24 / 5, 1:]]]"
  :: "real poly list list"
*** Undefined fact: "is_SNF_H'" (line 1508 of "$AFP/Smith_Normal_Form/SNF_Algorithm.thy")
*** At command "thm" (line 1508 of "$AFP/Smith_Normal_Form/SNF_Algorithm.thy")
*** Undefined fact: "2.hyps" (line 206 of "$AFP/Smith_Normal_Form/SNF_Algorithm.thy")
*** At command "thm" (line 206 of "$AFP/Smith_Normal_Form/SNF_Algorithm.thy")
*** Undefined fact: "2.prems" (line 205 of "$AFP/Smith_Normal_Form/SNF_Algorithm.thy")
*** At command "thm" (line 205 of "$AFP/Smith_Normal_Form/SNF_Algorithm.thy")
*** Undefined fact: "2.prems" (line 156 of "$AFP/Smith_Normal_Form/SNF_Algorithm.thy")
*** At command "thm" (line 156 of "$AFP/Smith_Normal_Form/SNF_Algorithm.thy")
Exception- TOPLEVEL_ERROR raised
