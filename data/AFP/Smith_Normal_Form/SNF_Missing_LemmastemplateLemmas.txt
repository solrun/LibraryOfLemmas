   [("SNF_Missing_Lemmas.invertible_mat_one",
     "invertible_mat (1\<^sub>m ?n)",
     template_predicate
      (
         template_app
          (template_hole 1, template_app (template_hole 0, template_var 0))
         )),
    ("SNF_Missing_Lemmas.invertible_mat_transpose",
     "invertible_mat ?A ==> invertible_mat ?A\<^sup>T",
     template_implication
      ([template_predicate
         (template_app (template_hole 1, template_var 0))],
       template_predicate
        (
           template_app
            (template_hole 1,
             template_app (template_hole 0, template_var 0))
           ))),
    ("SNF_Missing_Lemmas.mat_diag_smult",
     "mat_diag ?n (%x. ?k) = ?k \<cdot>\<^sub>m 1\<^sub>m ?n",
     template_equation
      (template_app
        (template_app (template_hole 2, template_var 1), t_empty),
       template_app
        (template_app (template_hole 1, template_var 0),
         template_app (template_hole 0, template_var 1)))),
    ("SNF_Missing_Lemmas.invertible_mat_zero",
     "?A : carrier_mat 0 0 ==> invertible_mat ?A",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 3, template_var 0),
              template_app
               (template_app (template_hole 2, template_hole 1),
                template_hole 1))
            )],
       template_predicate
        (template_app (template_hole 0, template_var 0)))),
    ("SNF_Missing_Lemmas.sorted_distinct_imp_sorted_wrt",
     "[| sorted ?xs; distinct ?xs |] ==> sorted_wrt (<) ?xs",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 3, template_hole 2),
              template_var 0)
            ),
        template_predicate
         (template_app (template_hole 1, template_var 0))],
       template_predicate
        (
           template_app
            (template_app (template_hole 3, template_hole 0),
             template_var 0)
           ))),
    ("SNF_Missing_Lemmas.invertible_mat_smult_mat",
     "[| invertible_mat ?A; ?k dvd (1::?'a) |]
      ==> invertible_mat (?k \<cdot>\<^sub>m ?A)",
     template_implication
      ([template_predicate (template_app (template_hole 3, template_var 1)),
        template_predicate
         (
            template_app
             (template_app (template_hole 2, template_var 0),
              template_hole 1)
            )],
       template_predicate
        (
           template_app
            (template_hole 3,
             template_app
              (template_app (template_hole 0, template_var 0),
               template_var 1))
           ))),
    ("SNF_Missing_Lemmas.sorted_map_strict",
     "strict_mono_on ?g {0..<?n} ==> sorted (map ?g [0..<?n])",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 6, template_var 1),
              template_app
               (template_app (template_hole 5, template_hole 4),
                template_var 0))
            )],
       template_predicate
        (
           template_app
            (template_app (template_hole 3, template_hole 2),
             template_app
              (template_app (template_hole 1, template_var 1),
               template_app
                (template_app (template_hole 0, template_hole 4),
                 template_var 0)))
           ))),
    ("SNF_Missing_Lemmas.invertible_iff_is_unit_JNF",
     "?A : carrier_mat ?n ?n ==>
      invertible_mat ?A = (Determinant.det ?A dvd (1::?'a))",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 6, template_var 1),
              template_app
               (template_app (template_hole 5, template_var 0),
                template_var 0))
            )],
       template_equation
        (template_app (template_hole 3, template_var 1),
         template_app
          (template_app
            (template_hole 2,
             template_app (template_hole 1, template_var 1)),
           template_hole 0)))),
    ("SNF_Missing_Lemmas.sorted_list_of_set_eq_pick",
     "?i < length (sorted_list_of_set ?I) ==>
      sorted_list_of_set ?I ! ?i = pick ?I ?i",
     template_implication
      ([template_inequation
         (less_than, template_var 1,
          template_app
           (template_hole 4,
            template_app (template_hole 3, template_var 0)))],
       template_equation
        (template_app
          (template_app
            (template_hole 1,
             template_app (template_hole 3, template_var 0)),
           template_var 1),
         template_app
          (template_app (template_hole 0, template_var 0),
           template_var 1)))),
    ("SNF_Missing_Lemmas.determinant_one_element",
     "?A : carrier_mat 1 1 ==> Determinant.det ?A = ?A $$ (0, 0)",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 7, template_var 0),
              template_app
               (template_app (template_hole 6, template_hole 5),
                template_hole 5))
            )],
       template_equation
        (template_app (template_hole 3, template_var 0),
         template_app
          (template_app (template_hole 2, template_var 0),
           template_app
            (template_app (template_hole 1, template_hole 0),
             template_hole 0))))),
    ("SNF_Missing_Lemmas.mat_row_transpose",
     "(mat\<^sub>r ?nr ?nc ?f)\<^sup>T =
      Matrix.mat ?nc ?nr (%(i, j). ?f j $v i)",
     template_equation
      (template_app
        (template_hole 4,
         template_app
          (template_app
            (template_app (template_hole 3, template_var 2),
             template_var 1),
           template_var 0)),
       template_app
        (template_app
          (template_app (template_hole 2, template_var 1), template_var 2),
         template_app (template_hole 1, t_empty)))),
    ("SNF_Missing_Lemmas.sum_common_left",
     "finite ?A ==> (SUM i:?A. ?c * ?f i) = ?c * sum ?f ?A",
     template_implication
      ([template_predicate
         (template_app (template_hole 3, template_var 2))],
       template_equation
        (template_app
          (template_app (template_hole 1, t_empty), template_var 2),
         template_app
          (template_app (template_hole 0, template_var 1),
           template_app
            (template_app (template_hole 1, template_var 0),
             template_var 2))))),
    ("SNF_Missing_Lemmas.sum_two_rw", "sum ?f {0..<2} = sum ?f {0, 1}",
     template_equation
      (template_app
        (template_app (template_hole 8, t_empty),
         template_app
          (template_app (template_hole 7, template_hole 6),
           template_app
            (template_hole 5,
             template_app (template_hole 4, template_hole 3)))),
       template_app
        (template_app (template_hole 8, t_empty),
         template_app
          (template_app (template_hole 2, template_hole 6),
           template_app
            (template_app (template_hole 2, template_hole 1),
             template_hole 0))))),
    ("SNF_Missing_Lemmas.sorted_list_of_set_map_strict",
     "strict_mono_on ?g {0..<?n} ==>
      sorted_list_of_set (?g ` {0..<?n}) = map ?g [0..<?n]",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 7, template_var 1),
              template_app
               (template_app (template_hole 6, template_hole 5),
                template_var 0))
            )],
       template_equation
        (template_app
          (template_hole 3,
           template_app
            (template_app (template_hole 2, template_var 1),
             template_app
              (template_app (template_hole 6, template_hole 5),
               template_var 0))),
         template_app
          (template_app (template_hole 1, template_var 1),
           template_app
            (template_app (template_hole 0, template_hole 5),
             template_var 0))))),
    ("SNF_Missing_Lemmas.det_not_inj_on",
     "~ inj_on ?f {0..<?n} ==>
      Determinant.det (mat\<^sub>r ?n ?n (%i. Matrix.row ?B (?f i))) =
      (0::?'a)",
     template_implication
      ([template_negation
         (
            template_predicate
             (
                template_app
                 (template_app (template_hole 7, template_var 2),
                  template_app
                   (template_app (template_hole 6, template_hole 5),
                    template_var 1))
                )
            )],
       template_equation
        (template_app
          (template_hole 3,
           template_app
            (template_app
              (template_app (template_hole 2, template_var 1),
               template_var 1),
             t_empty)),
         template_hole 0))),
    ("SNF_Missing_Lemmas.commute_multiples_identity",
     "?A : carrier_mat ?n ?n ==>
      ?A * (?k \<cdot>\<^sub>m 1\<^sub>m ?n) =
      ?k \<cdot>\<^sub>m 1\<^sub>m ?n * ?A",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 5, template_var 2),
              template_app
               (template_app (template_hole 4, template_var 1),
                template_var 1))
            )],
       template_equation
        (template_app
          (template_app (template_hole 2, template_var 2),
           template_app
            (template_app (template_hole 1, template_var 0),
             template_app (template_hole 0, template_var 1))),
         template_app
          (template_app
            (template_hole 2,
             template_app
              (template_app (template_hole 1, template_var 0),
               template_app (template_hole 0, template_var 1))),
           template_var 2)))),
    ("SNF_Missing_Lemmas.sorted_list_of_set_0_LEAST",
     "[| finite ?I; ?I ~= {} |]
      ==> sorted_list_of_set ?I ! 0 = (LEAST n. n : ?I)",
     template_implication
      ([template_predicate (template_app (template_hole 9, template_var 0)),
        template_negation
         (template_equation (template_var 0, template_hole 6))],
       template_equation
        (template_app
          (template_app
            (template_hole 4,
             template_app (template_hole 3, template_var 0)),
           template_hole 2),
         template_app (template_hole 1, t_empty)))),
    ("SNF_Missing_Lemmas.invertible_mat_four_block_mat_lower_right",
     "[| ?A : carrier_mat ?n ?n; invertible_mat ?A |]
      ==> invertible_mat
           (four_block_mat (1\<^sub>m 1) (0\<^sub>m 1 ?n) (0\<^sub>m ?n 1)
             ?A)",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 6, template_var 1),
              template_app
               (template_app (template_hole 5, template_var 0),
                template_var 0))
            ),
        template_predicate
         (template_app (template_hole 4, template_var 1))],
       template_predicate
        (
           template_app
            (template_hole 4,
             template_app
              (template_app
                (template_app
                  (template_app
                    (template_hole 3,
                     template_app (template_hole 2, template_hole 1)),
                   template_app
                    (template_app (template_hole 0, template_hole 1),
                     template_var 0)),
                 template_app
                  (template_app (template_hole 0, template_var 0),
                   template_hole 1)),
               template_var 1))
           ))),
    ("SNF_Missing_Lemmas.pick_index",
     "[| ?a : ?I; ?a' < card ?I |]
      ==> (pick ?I ?a' = ?a) = (index (sorted_list_of_set ?I) ?a = ?a')",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 7, template_var 2),
              template_var 1)
            ),
        template_inequation
         (less_than, template_var 0,
          template_app (template_hole 5, template_var 1))],
       template_bimplication
        (template_equation
          (template_app
            (template_app (template_hole 2, template_var 1),
             template_var 0),
           template_var 2),
         template_equation
          (template_app
            (template_app
              (template_hole 1,
               template_app (template_hole 0, template_var 1)),
             template_var 2),
           template_var 0)))),
    ("SNF_Missing_Lemmas.append_cols_carrier",
     "[| ?A : carrier_mat ?n ?a; ?B : carrier_mat ?n ?b |]
      ==> ?A @\<^sub>c ?B : carrier_mat ?n (?a + ?b)",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 3, template_var 4),
              template_app
               (template_app (template_hole 2, template_var 3),
                template_var 2))
            ),
        template_predicate
         (
            template_app
             (template_app (template_hole 3, template_var 1),
              template_app
               (template_app (template_hole 2, template_var 3),
                template_var 0))
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 3,
               template_app
                (template_app (template_hole 1, template_var 4),
                 template_var 1)),
             template_app
              (template_app (template_hole 2, template_var 3),
               template_app
                (template_app (template_hole 0, template_var 2),
                 template_var 0)))
           ))),
    ("SNF_Missing_Lemmas.transpose_mat_append_rows",
     "[| ?A : carrier_mat ?a ?n; ?B : carrier_mat ?b ?n |]
      ==> (?A @\<^sub>r ?B)\<^sup>T = ?A\<^sup>T @\<^sub>c ?B\<^sup>T",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 5, template_var 4),
              template_app
               (template_app (template_hole 4, template_var 3),
                template_var 2))
            ),
        template_predicate
         (
            template_app
             (template_app (template_hole 5, template_var 1),
              template_app
               (template_app (template_hole 4, template_var 0),
                template_var 2))
            )],
       template_equation
        (template_app
          (template_hole 2,
           template_app
            (template_app (template_hole 1, template_var 4),
             template_var 1)),
         template_app
          (template_app
            (template_hole 0,
             template_app (template_hole 2, template_var 4)),
           template_app (template_hole 2, template_var 1))))),
    ("SNF_Missing_Lemmas.transpose_mat_append_cols",
     "[| ?A : carrier_mat ?n ?a; ?B : carrier_mat ?n ?b |]
      ==> (?A @\<^sub>c ?B)\<^sup>T = ?A\<^sup>T @\<^sub>r ?B\<^sup>T",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 5, template_var 4),
              template_app
               (template_app (template_hole 4, template_var 3),
                template_var 2))
            ),
        template_predicate
         (
            template_app
             (template_app (template_hole 5, template_var 1),
              template_app
               (template_app (template_hole 4, template_var 3),
                template_var 0))
            )],
       template_equation
        (template_app
          (template_hole 2,
           template_app
            (template_app (template_hole 1, template_var 4),
             template_var 1)),
         template_app
          (template_app
            (template_hole 0,
             template_app (template_hole 2, template_var 4)),
           template_app (template_hole 2, template_var 1))))),
    ("SNF_Missing_Lemmas.smult_mat_mat_one_element",
     "[| ?A : carrier_mat 1 1; ?B : carrier_mat 1 ?n |]
      ==> ?A * ?B = ?A $$ (0, 0) \<cdot>\<^sub>m ?B",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 8, template_var 2),
              template_app
               (template_app (template_hole 7, template_hole 6),
                template_hole 6))
            ),
        template_predicate
         (
            template_app
             (template_app (template_hole 8, template_var 1),
              template_app
               (template_app (template_hole 7, template_hole 6),
                template_var 0))
            )],
       template_equation
        (template_app
          (template_app (template_hole 4, template_var 2), template_var 1),
         template_app
          (template_app
            (template_hole 3,
             template_app
              (template_app (template_hole 2, template_var 2),
               template_app
                (template_app (template_hole 1, template_hole 0),
                 template_hole 0))),
           template_var 1)))),
    ("SNF_Missing_Lemmas.invertible_mult_JNF",
     "[| ?A : carrier_mat ?n ?n; ?B : carrier_mat ?n ?n; invertible_mat ?A;
         invertible_mat ?B |]
      ==> invertible_mat (?A * ?B)",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 3, template_var 2),
              template_app
               (template_app (template_hole 2, template_var 1),
                template_var 1))
            ),
        template_predicate
         (
            template_app
             (template_app (template_hole 3, template_var 0),
              template_app
               (template_app (template_hole 2, template_var 1),
                template_var 1))
            ),
        template_predicate (template_app (template_hole 1, template_var 2)),
        template_predicate
         (template_app (template_hole 1, template_var 0))],
       template_predicate
        (
           template_app
            (template_hole 1,
             template_app
              (template_app (template_hole 0, template_var 2),
               template_var 0))
           ))),
    ("SNF_Missing_Lemmas.append_cols_split",
     "0 < dim_col ?A ==>
      ?A =
      mat_of_cols (dim_row ?A) [col ?A 0] @\<^sub>c
      mat_of_cols (dim_row ?A) (map (col ?A) [1..<dim_col ?A])",
     template_implication
      ([template_inequation
         (less_than, template_hole 11,
          template_app (template_hole 10, template_var 0))],
       template_equation
        (template_var 0,
         template_app
          (template_app
            (template_hole 8,
             template_app
              (template_app
                (template_hole 7,
                 template_app (template_hole 6, template_var 0)),
               template_app
                (template_app
                  (template_hole 5,
                   template_app
                    (template_app (template_hole 4, template_var 0),
                     template_hole 11)),
                 template_hole 3))),
           template_app
            (template_app
              (template_hole 7,
               template_app (template_hole 6, template_var 0)),
             template_app
              (template_app
                (template_hole 2,
                 template_app (template_hole 4, template_var 0)),
               template_app
                (template_app (template_hole 1, template_hole 0),
                 template_app (template_hole 10, template_var 0)))))))),
    ("SNF_Missing_Lemmas.prod3_intro",
     "[| fst ?A = ?a; fst (snd ?A) = ?b; snd (snd ?A) = ?c |]
      ==> ?A = (?a, ?b, ?c)",
     template_implication
      ([template_equation
         (template_app (template_hole 8, template_var 3), template_var 2),
        template_equation
         (template_app
           (template_hole 6,
            template_app (template_hole 5, template_var 3)),
          template_var 1),
        template_equation
         (template_app
           (template_hole 3,
            template_app (template_hole 5, template_var 3)),
          template_var 0)],
       template_equation
        (template_var 3,
         template_app
          (template_app (template_hole 1, template_var 2),
           template_app
            (template_app (template_hole 0, template_var 1),
             template_var 0))))),
    ("SNF_Missing_Lemmas.sorted_nth_strict_mono",
     "[| sorted ?xs; distinct ?xs; ?i < ?j; ?j < length ?xs |]
      ==> ?xs ! ?i < ?xs ! ?j",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 6, template_hole 5),
              template_var 2)
            ),
        template_predicate (template_app (template_hole 4, template_var 2)),
        template_inequation (less_than, template_var 1, template_var 0),
        template_inequation
         (less_than, template_var 0,
          template_app (template_hole 2, template_var 2))],
       template_inequation
        (less_than,
         template_app
          (template_app (template_hole 0, template_var 2), template_var 1),
         template_app
          (template_app (template_hole 0, template_var 2),
           template_var 0)))),
    ("SNF_Missing_Lemmas.mat_mult_left_right_inverse",
     "[| ?A : carrier_mat ?n ?n; ?B : carrier_mat ?n ?n;
         ?A * ?B = 1\<^sub>m ?n |]
      ==> ?B * ?A = 1\<^sub>m ?n",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 4, template_var 2),
              template_app
               (template_app (template_hole 3, template_var 1),
                template_var 1))
            ),
        template_predicate
         (
            template_app
             (template_app (template_hole 4, template_var 0),
              template_app
               (template_app (template_hole 3, template_var 1),
                template_var 1))
            ),
        template_equation
         (template_app
           (template_app (template_hole 1, template_var 2), template_var 0),
          template_app (template_hole 0, template_var 1))],
       template_equation
        (template_app
          (template_app (template_hole 1, template_var 0), template_var 2),
         template_app (template_hole 0, template_var 1)))),
    ("SNF_Missing_Lemmas.lower_triangular_index",
     "[| lower_triangular ?A; ?i < ?j; ?i < dim_row ?A; ?j < dim_col ?A |]
      ==> ?A $$ (?i, ?j) = (0::?'a)",
     template_implication
      ([template_predicate (template_app (template_hole 7, template_var 2)),
        template_inequation (less_than, template_var 1, template_var 0),
        template_inequation
         (less_than, template_var 1,
          template_app (template_hole 5, template_var 2)),
        template_inequation
         (less_than, template_var 0,
          template_app (template_hole 4, template_var 2))],
       template_equation
        (template_app
          (template_app (template_hole 2, template_var 2),
           template_app
            (template_app (template_hole 1, template_var 1),
             template_var 0)),
         template_hole 0))),
    ("SNF_Missing_Lemmas.split_block4_decreases_dim_row",
     "[| (?A, ?B, ?C, ?D) = split_block ?E 1 1; 1 < dim_row ?E;
         1 < dim_col ?E |]
      ==> dim_row ?D < dim_row ?E",
     template_implication
      ([template_equation
         (template_app
           (template_app (template_hole 7, template_var 4),
            template_app
             (template_app (template_hole 6, template_var 3),
              template_app
               (template_app (template_hole 5, template_var 2),
                template_var 1))),
          template_app
           (template_app
             (template_app (template_hole 4, template_var 0),
              template_hole 3),
            template_hole 3)),
        template_inequation
         (less_than, template_hole 3,
          template_app (template_hole 1, template_var 0)),
        template_inequation
         (less_than, template_hole 3,
          template_app (template_hole 0, template_var 0))],
       template_inequation
        (less_than, template_app (template_hole 1, template_var 1),
         template_app (template_hole 1, template_var 0)))),
    ("SNF_Missing_Lemmas.append_rows_split",
     "?k <= dim_row ?A ==>
      ?A =
      mat_of_rows (dim_col ?A) (map (Matrix.row ?A) [0..<?k]) @\<^sub>r
      mat_of_rows (dim_col ?A) (map (Matrix.row ?A) [?k..<dim_row ?A])",
     template_implication
      ([template_inequation
         (less_equals, template_var 1,
          template_app (template_hole 8, template_var 0))],
       template_equation
        (template_var 0,
         template_app
          (template_app
            (template_hole 6,
             template_app
              (template_app
                (template_hole 5,
                 template_app (template_hole 4, template_var 0)),
               template_app
                (template_app (template_hole 3, t_empty),
                 template_app
                  (template_app (template_hole 1, template_hole 0),
                   template_var 1)))),
           template_app
            (template_app
              (template_hole 5,
               template_app (template_hole 4, template_var 0)),
             template_app
              (template_app (template_hole 3, t_empty),
               template_app
                (template_app (template_hole 1, template_var 1),
                 template_app (template_hole 8, template_var 0)))))))),
    ("SNF_Missing_Lemmas.append_cols_mult_left",
     "[| ?A : carrier_mat ?n ?a; ?B : carrier_mat ?n ?b;
         ?P : carrier_mat ?n ?n |]
      ==> ?P * (?A @\<^sub>c ?B) = ?P * ?A @\<^sub>c ?P * ?B",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 4, template_var 5),
              template_app
               (template_app (template_hole 3, template_var 4),
                template_var 3))
            ),
        template_predicate
         (
            template_app
             (template_app (template_hole 4, template_var 2),
              template_app
               (template_app (template_hole 3, template_var 4),
                template_var 1))
            ),
        template_predicate
         (
            template_app
             (template_app (template_hole 4, template_var 0),
              template_app
               (template_app (template_hole 3, template_var 4),
                template_var 4))
            )],
       template_equation
        (template_app
          (template_app (template_hole 1, template_var 0),
           template_app
            (template_app (template_hole 0, template_var 5),
             template_var 2)),
         template_app
          (template_app
            (template_hole 0,
             template_app
              (template_app (template_hole 1, template_var 0),
               template_var 5)),
           template_app
            (template_app (template_hole 1, template_var 0),
             template_var 2))))),
    ("SNF_Missing_Lemmas.obtain_inverse_matrix",
     "[| ?A : carrier_mat ?n ?n; invertible_mat ?A;
         !!B. [| inverts_mat ?A B; inverts_mat B ?A;
                 B : carrier_mat ?n ?n |]
              ==> ?thesis |]
      ==> ?thesis",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 4, template_var 2),
              template_app
               (template_app (template_hole 3, template_var 1),
                template_var 1))
            ),
        template_predicate (template_app (template_hole 2, template_var 2)),
        template_predicate (template_app (template_hole 1, t_empty))],
       template_predicate (template_var 0))),
    ("SNF_Missing_Lemmas.append_rows_mult_right",
     "[| ?A : carrier_mat ?a ?n; ?B : carrier_mat ?b ?n;
         ?Q : carrier_mat ?n ?n |]
      ==> (?A @\<^sub>r ?B) * ?Q = ?A * ?Q @\<^sub>r ?B * ?Q",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 4, template_var 5),
              template_app
               (template_app (template_hole 3, template_var 4),
                template_var 3))
            ),
        template_predicate
         (
            template_app
             (template_app (template_hole 4, template_var 2),
              template_app
               (template_app (template_hole 3, template_var 1),
                template_var 3))
            ),
        template_predicate
         (
            template_app
             (template_app (template_hole 4, template_var 0),
              template_app
               (template_app (template_hole 3, template_var 3),
                template_var 3))
            )],
       template_equation
        (template_app
          (template_app
            (template_hole 1,
             template_app
              (template_app (template_hole 0, template_var 5),
               template_var 2)),
           template_var 0),
         template_app
          (template_app
            (template_hole 0,
             template_app
              (template_app (template_hole 1, template_var 5),
               template_var 0)),
           template_app
            (template_app (template_hole 1, template_var 2),
             template_var 0))))),
    ("SNF_Missing_Lemmas.four_block_mat_dim0",
     "[| ?A : carrier_mat ?n ?n; ?B : carrier_mat ?n 0;
         ?C : carrier_mat 0 ?n; ?D : carrier_mat 0 0 |]
      ==> four_block_mat ?A ?B ?C ?D = ?A",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 4, template_var 4),
              template_app
               (template_app (template_hole 3, template_var 3),
                template_var 3))
            ),
        template_predicate
         (
            template_app
             (template_app (template_hole 4, template_var 2),
              template_app
               (template_app (template_hole 3, template_var 3),
                template_hole 2))
            ),
        template_predicate
         (
            template_app
             (template_app (template_hole 4, template_var 1),
              template_app
               (template_app (template_hole 3, template_hole 2),
                template_var 3))
            ),
        template_predicate
         (
            template_app
             (template_app (template_hole 4, template_var 0),
              template_app
               (template_app (template_hole 3, template_hole 2),
                template_hole 2))
            )],
       template_equation
        (template_app
          (template_app
            (template_app
              (template_app (template_hole 0, template_var 4),
               template_var 2),
             template_var 1),
           template_var 0),
         template_var 4))),
    ("SNF_Missing_Lemmas.det_2",
     "?A : carrier_mat 2 2 ==>
      Determinant.det ?A =
      ?A $$ (0, 0) * ?A $$ (1, 1) - ?A $$ (0, 1) * ?A $$ (1, 0)",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 12, template_var 0),
              template_app
               (template_app
                 (template_hole 11,
                  template_app
                   (template_hole 10,
                    template_app (template_hole 9, template_hole 8))),
                template_app
                 (template_hole 10,
                  template_app (template_hole 9, template_hole 8))))
            )],
       template_equation
        (template_app (template_hole 6, template_var 0),
         template_app
          (template_app
            (template_hole 5,
             template_app
              (template_app
                (template_hole 4,
                 template_app
                  (template_app (template_hole 3, template_var 0),
                   template_app
                    (template_app (template_hole 2, template_hole 1),
                     template_hole 1))),
               template_app
                (template_app (template_hole 3, template_var 0),
                 template_app
                  (template_app (template_hole 2, template_hole 0),
                   template_hole 0)))),
           template_app
            (template_app
              (template_hole 4,
               template_app
                (template_app (template_hole 3, template_var 0),
                 template_app
                  (template_app (template_hole 2, template_hole 1),
                   template_hole 0))),
             template_app
              (template_app (template_hole 3, template_var 0),
               template_app
                (template_app (template_hole 2, template_hole 0),
                 template_hole 1))))))),
    ("SNF_Missing_Lemmas.insort_nth",
     "[| sorted ?xs; ?a ~: set ?xs; ?i < index (insort ?a ?xs) ?a;
         ?xs ~= [] |]
      ==> insort ?a ?xs ! ?i = ?xs ! ?i",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 11, template_hole 10),
              template_var 2)
            ),
        template_negation
         (
            template_predicate
             (
                template_app
                 (template_app (template_hole 8, template_var 1),
                  template_app (template_hole 7, template_var 2))
                )
            ),
        template_inequation
         (less_than, template_var 0,
          template_app
           (template_app
             (template_hole 5,
              template_app
               (template_app
                 (template_app (template_hole 4, t_empty), template_var 1),
                template_var 2)),
            template_var 1)),
        template_negation
         (template_equation (template_var 2, template_hole 2))],
       template_equation
        (template_app
          (template_app
            (template_hole 0,
             template_app
              (template_app
                (template_app (template_hole 4, t_empty), template_var 1),
               template_var 2)),
           template_var 0),
         template_app
          (template_app (template_hole 0, template_var 2),
           template_var 0)))),
    ("SNF_Missing_Lemmas.mult_eq_first_row",
     "[| ?A : carrier_mat 1 ?n; ?B : carrier_mat ?m ?n; ?m ~= 0;
         Matrix.row ?A 0 = Matrix.row ?B 0 |]
      ==> Matrix.row (?A * ?V) 0 = Matrix.row (?B * ?V) 0",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 8, template_var 4),
              template_app
               (template_app (template_hole 7, template_hole 6),
                template_var 3))
            ),
        template_predicate
         (
            template_app
             (template_app (template_hole 8, template_var 2),
              template_app
               (template_app (template_hole 7, template_var 1),
                template_var 3))
            ),
        template_negation
         (template_equation (template_var 1, template_hole 3)),
        template_equation
         (template_app
           (template_app (template_hole 1, template_var 4),
            template_hole 3),
          template_app
           (template_app (template_hole 1, template_var 2),
            template_hole 3))],
       template_equation
        (template_app
          (template_app
            (template_hole 1,
             template_app
              (template_app (template_hole 0, template_var 4),
               template_var 0)),
           template_hole 3),
         template_app
          (template_app
            (template_hole 1,
             template_app
              (template_app (template_hole 0, template_var 2),
               template_var 0)),
           template_hole 3)))),
    ("SNF_Missing_Lemmas.append_cols_mult_right_id2",
     "[| ?A : carrier_mat ?n ?a; ?B : carrier_mat ?n ?b;
         ?C =
         four_block_mat ?D (0\<^sub>m ?a ?b) (0\<^sub>m ?b ?a)
          (1\<^sub>m ?b);
         ?D : carrier_mat ?a ?a |]
      ==> (?A @\<^sub>c ?B) * ?C = ?A * ?D @\<^sub>c ?B",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 7, template_var 6),
              template_app
               (template_app (template_hole 6, template_var 5),
                template_var 4))
            ),
        template_predicate
         (
            template_app
             (template_app (template_hole 7, template_var 3),
              template_app
               (template_app (template_hole 6, template_var 5),
                template_var 2))
            ),
        template_equation
         (template_var 1,
          template_app
           (template_app
             (template_app
               (template_app (template_hole 4, template_var 0),
                template_app
                 (template_app (template_hole 3, template_var 4),
                  template_var 2)),
              template_app
               (template_app (template_hole 3, template_var 2),
                template_var 4)),
            template_app (template_hole 2, template_var 2))),
        template_predicate
         (
            template_app
             (template_app (template_hole 7, template_var 0),
              template_app
               (template_app (template_hole 6, template_var 4),
                template_var 4))
            )],
       template_equation
        (template_app
          (template_app
            (template_hole 1,
             template_app
              (template_app (template_hole 0, template_var 6),
               template_var 3)),
           template_var 1),
         template_app
          (template_app
            (template_hole 0,
             template_app
              (template_app (template_hole 1, template_var 6),
               template_var 0)),
           template_var 3)))),
    ("SNF_Missing_Lemmas.append_rows_mult_left_id2",
     "[| ?A : carrier_mat ?a ?n; ?B : carrier_mat ?b ?n;
         ?C =
         four_block_mat ?D (0\<^sub>m ?a ?b) (0\<^sub>m ?b ?a)
          (1\<^sub>m ?b);
         ?D : carrier_mat ?a ?a |]
      ==> ?C * (?A @\<^sub>r ?B) = ?D * ?A @\<^sub>r ?B",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 7, template_var 6),
              template_app
               (template_app (template_hole 6, template_var 5),
                template_var 4))
            ),
        template_predicate
         (
            template_app
             (template_app (template_hole 7, template_var 3),
              template_app
               (template_app (template_hole 6, template_var 2),
                template_var 4))
            ),
        template_equation
         (template_var 1,
          template_app
           (template_app
             (template_app
               (template_app (template_hole 4, template_var 0),
                template_app
                 (template_app (template_hole 3, template_var 5),
                  template_var 2)),
              template_app
               (template_app (template_hole 3, template_var 2),
                template_var 5)),
            template_app (template_hole 2, template_var 2))),
        template_predicate
         (
            template_app
             (template_app (template_hole 7, template_var 0),
              template_app
               (template_app (template_hole 6, template_var 5),
                template_var 5))
            )],
       template_equation
        (template_app
          (template_app (template_hole 1, template_var 1),
           template_app
            (template_app (template_hole 0, template_var 6),
             template_var 3)),
         template_app
          (template_app
            (template_hole 0,
             template_app
              (template_app (template_hole 1, template_var 0),
               template_var 6)),
           template_var 3)))),
    ("SNF_Missing_Lemmas.insort_nth2",
     "[| sorted ?xs; ?a ~: set ?xs; ?i < length ?xs;
         index (insort ?a ?xs) ?a <= ?i; ?xs ~= [] |]
      ==> insort ?a ?xs ! Suc ?i = ?xs ! ?i",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 14, template_hole 13),
              template_var 2)
            ),
        template_negation
         (
            template_predicate
             (
                template_app
                 (template_app (template_hole 11, template_var 1),
                  template_app (template_hole 10, template_var 2))
                )
            ),
        template_inequation
         (less_than, template_var 0,
          template_app (template_hole 8, template_var 2)),
        template_inequation
         (less_equals,
          template_app
           (template_app
             (template_hole 6,
              template_app
               (template_app
                 (template_app (template_hole 5, t_empty), template_var 1),
                template_var 2)),
            template_var 1),
          template_var 0),
        template_negation
         (template_equation (template_var 2, template_hole 3))],
       template_equation
        (template_app
          (template_app
            (template_hole 1,
             template_app
              (template_app
                (template_app (template_hole 5, t_empty), template_var 1),
               template_var 2)),
           template_app (template_hole 0, template_var 0)),
         template_app
          (template_app (template_hole 1, template_var 2),
           template_var 0)))),
    ("SNF_Missing_Lemmas.det_four_block_mat_lower_right_id",
     "[| ?A : carrier_mat ?m ?m; ?B = 0\<^sub>m ?m (?n - ?m);
         ?C = 0\<^sub>m (?n - ?m) ?m; ?D = 1\<^sub>m (?n - ?m); ?m < ?n |]
      ==> Determinant.det (four_block_mat ?A ?B ?C ?D) =
          Determinant.det ?A",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 9, template_var 5),
              template_app
               (template_app (template_hole 8, template_var 4),
                template_var 4))
            ),
        template_equation
         (template_var 3,
          template_app
           (template_app (template_hole 6, template_var 4),
            template_app
             (template_app (template_hole 5, template_var 2),
              template_var 4))),
        template_equation
         (template_var 1,
          template_app
           (template_app
             (template_hole 6,
              template_app
               (template_app (template_hole 5, template_var 2),
                template_var 4)),
            template_var 4)),
        template_equation
         (template_var 0,
          template_app
           (template_hole 4,
            template_app
             (template_app (template_hole 5, template_var 2),
              template_var 4))),
        template_inequation (less_than, template_var 4, template_var 2)],
       template_equation
        (template_app
          (template_hole 1,
           template_app
            (template_app
              (template_app
                (template_app (template_hole 0, template_var 5),
                 template_var 3),
               template_var 1),
             template_var 0)),
         template_app (template_hole 1, template_var 5)))),
    ("SNF_Missing_Lemmas.invertible_mat_four_block_mat_lower_right_id",
     "[| ?A : carrier_mat ?m ?m; ?B = 0\<^sub>m ?m (?n - ?m);
         ?C = 0\<^sub>m (?n - ?m) ?m; ?D = 1\<^sub>m (?n - ?m); ?m < ?n;
         invertible_mat ?A |]
      ==> invertible_mat (four_block_mat ?A ?B ?C ?D)",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 8, template_var 5),
              template_app
               (template_app (template_hole 7, template_var 4),
                template_var 4))
            ),
        template_equation
         (template_var 3,
          template_app
           (template_app (template_hole 5, template_var 4),
            template_app
             (template_app (template_hole 4, template_var 2),
              template_var 4))),
        template_equation
         (template_var 1,
          template_app
           (template_app
             (template_hole 5,
              template_app
               (template_app (template_hole 4, template_var 2),
                template_var 4)),
            template_var 4)),
        template_equation
         (template_var 0,
          template_app
           (template_hole 3,
            template_app
             (template_app (template_hole 4, template_var 2),
              template_var 4))),
        template_inequation (less_than, template_var 4, template_var 2),
        template_predicate
         (template_app (template_hole 1, template_var 5))],
       template_predicate
        (
           template_app
            (template_hole 1,
             template_app
              (template_app
                (template_app
                  (template_app (template_hole 0, template_var 5),
                   template_var 3),
                 template_var 1),
               template_var 0))
           ))),
    ("SNF_Missing_Lemmas.append_rows_nth",
     "[| ?A : carrier_mat ?a ?n; ?B : carrier_mat ?b ?n; ?i < ?a + ?b;
         ?j < ?n |]
      ==> (?A @\<^sub>r ?B) $$ (?i, ?j) =
          (if ?i < dim_row ?A then ?A $$ (?i, ?j)
           else ?B $$ (?i - ?a, ?j))",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 10, template_var 6),
              template_app
               (template_app (template_hole 9, template_var 5),
                template_var 4))
            ),
        template_predicate
         (
            template_app
             (template_app (template_hole 10, template_var 3),
              template_app
               (template_app (template_hole 9, template_var 2),
                template_var 4))
            ),
        template_inequation
         (less_than, template_var 1,
          template_app
           (template_app (template_hole 7, template_var 5),
            template_var 2)),
        template_inequation (less_than, template_var 0, template_var 4)],
       template_equation
        (template_app
          (template_app
            (template_hole 5,
             template_app
              (template_app (template_hole 4, template_var 6),
               template_var 3)),
           template_app
            (template_app (template_hole 3, template_var 1),
             template_var 0)),
         template_app
          (template_app
            (template_app
              (template_hole 2,
               template_app
                (template_app (template_hole 8, template_var 1),
                 template_app (template_hole 1, template_var 6))),
             template_app
              (template_app (template_hole 5, template_var 6),
               template_app
                (template_app (template_hole 3, template_var 1),
                 template_var 0))),
           template_app
            (template_app (template_hole 5, template_var 3),
             template_app
              (template_app
                (template_hole 3,
                 template_app
                  (template_app (template_hole 0, template_var 1),
                   template_var 5)),
               template_var 0)))))),
    ("SNF_Missing_Lemmas.append_cols_nth",
     "[| ?A : carrier_mat ?n ?a; ?B : carrier_mat ?n ?b; ?i < ?n;
         ?j < ?a + ?b |]
      ==> (?A @\<^sub>c ?B) $$ (?i, ?j) =
          (if ?j < dim_col ?A then ?A $$ (?i, ?j)
           else ?B $$ (?i, ?j - ?a))",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 10, template_var 6),
              template_app
               (template_app (template_hole 9, template_var 5),
                template_var 4))
            ),
        template_predicate
         (
            template_app
             (template_app (template_hole 10, template_var 3),
              template_app
               (template_app (template_hole 9, template_var 5),
                template_var 2))
            ),
        template_inequation (less_than, template_var 1, template_var 5),
        template_inequation
         (less_than, template_var 0,
          template_app
           (template_app (template_hole 7, template_var 4),
            template_var 2))],
       template_equation
        (template_app
          (template_app
            (template_hole 5,
             template_app
              (template_app (template_hole 4, template_var 6),
               template_var 3)),
           template_app
            (template_app (template_hole 3, template_var 1),
             template_var 0)),
         template_app
          (template_app
            (template_app
              (template_hole 2,
               template_app
                (template_app (template_hole 8, template_var 0),
                 template_app (template_hole 1, template_var 6))),
             template_app
              (template_app (template_hole 5, template_var 6),
               template_app
                (template_app (template_hole 3, template_var 1),
                 template_var 0))),
           template_app
            (template_app (template_hole 5, template_var 3),
             template_app
              (template_app (template_hole 3, template_var 1),
               template_app
                (template_app (template_hole 0, template_var 0),
                 template_var 4))))))),
    ("SNF_Missing_Lemmas.dvd_elements_mult_matrix_left",
     "[| ?A : carrier_mat ?m ?n; ?P : carrier_mat ?m ?m;
         ALL i j. i < ?m & j < ?n --> ?x dvd ?A $$ (i, j) |]
      ==> ALL i j. i < ?m & j < ?n --> ?x dvd (?P * ?A) $$ (i, j)",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 9, template_var 4),
              template_app
               (template_app (template_hole 8, template_var 3),
                template_var 2))
            ),
        template_predicate
         (
            template_app
             (template_app (template_hole 9, template_var 1),
              template_app
               (template_app (template_hole 8, template_var 3),
                template_var 3))
            ),
        template_predicate (template_app (template_hole 7, t_empty))],
       template_predicate (template_app (template_hole 7, t_empty)))),
    ("SNF_Missing_Lemmas.dvd_elements_mult_matrix_right",
     "[| ?A : carrier_mat ?m ?n; ?Q : carrier_mat ?n ?n;
         ALL i j. i < ?m & j < ?n --> ?x dvd ?A $$ (i, j) |]
      ==> ALL i j. i < ?m & j < ?n --> ?x dvd (?A * ?Q) $$ (i, j)",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 9, template_var 4),
              template_app
               (template_app (template_hole 8, template_var 3),
                template_var 2))
            ),
        template_predicate
         (
            template_app
             (template_app (template_hole 9, template_var 1),
              template_app
               (template_app (template_hole 8, template_var 2),
                template_var 2))
            ),
        template_predicate (template_app (template_hole 7, t_empty))],
       template_predicate (template_app (template_hole 7, t_empty)))),
    ("SNF_Missing_Lemmas.append_cols_mult_right_id",
     "[| ?A : carrier_mat ?n 1; ?B : carrier_mat ?n (?m - 1);
         ?C =
         four_block_mat (1\<^sub>m 1) (0\<^sub>m 1 (?m - 1))
          (0\<^sub>m (?m - 1) 1) ?D;
         ?D : carrier_mat (?m - 1) (?m - 1) |]
      ==> (?A @\<^sub>c ?B) * ?C = ?A @\<^sub>c ?B * ?D",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 9, template_var 5),
              template_app
               (template_app (template_hole 8, template_var 4),
                template_hole 7))
            ),
        template_predicate
         (
            template_app
             (template_app (template_hole 9, template_var 3),
              template_app
               (template_app (template_hole 8, template_var 4),
                template_app
                 (template_app (template_hole 6, template_var 2),
                  template_hole 7)))
            ),
        template_equation
         (template_var 1,
          template_app
           (template_app
             (template_app
               (template_app
                 (template_hole 4,
                  template_app (template_hole 3, template_hole 7)),
                template_app
                 (template_app (template_hole 2, template_hole 7),
                  template_app
                   (template_app (template_hole 6, template_var 2),
                    template_hole 7))),
              template_app
               (template_app
                 (template_hole 2,
                  template_app
                   (template_app (template_hole 6, template_var 2),
                    template_hole 7)),
                template_hole 7)),
            template_var 0)),
        template_predicate
         (
            template_app
             (template_app (template_hole 9, template_var 0),
              template_app
               (template_app
                 (template_hole 8,
                  template_app
                   (template_app (template_hole 6, template_var 2),
                    template_hole 7)),
                template_app
                 (template_app (template_hole 6, template_var 2),
                  template_hole 7)))
            )],
       template_equation
        (template_app
          (template_app
            (template_hole 1,
             template_app
              (template_app (template_hole 0, template_var 5),
               template_var 3)),
           template_var 1),
         template_app
          (template_app (template_hole 0, template_var 5),
           template_app
            (template_app (template_hole 1, template_var 3),
             template_var 0))))),
    ("SNF_Missing_Lemmas.append_rows_mult_left_id",
     "[| ?A : carrier_mat 1 ?n; ?B : carrier_mat (?m - 1) ?n;
         ?C =
         four_block_mat (1\<^sub>m 1) (0\<^sub>m 1 (?m - 1))
          (0\<^sub>m (?m - 1) 1) ?D;
         ?D : carrier_mat (?m - 1) (?m - 1) |]
      ==> ?C * (?A @\<^sub>r ?B) = ?A @\<^sub>r ?D * ?B",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 9, template_var 5),
              template_app
               (template_app (template_hole 8, template_hole 7),
                template_var 4))
            ),
        template_predicate
         (
            template_app
             (template_app (template_hole 9, template_var 3),
              template_app
               (template_app
                 (template_hole 8,
                  template_app
                   (template_app (template_hole 6, template_var 2),
                    template_hole 7)),
                template_var 4))
            ),
        template_equation
         (template_var 1,
          template_app
           (template_app
             (template_app
               (template_app
                 (template_hole 4,
                  template_app (template_hole 3, template_hole 7)),
                template_app
                 (template_app (template_hole 2, template_hole 7),
                  template_app
                   (template_app (template_hole 6, template_var 2),
                    template_hole 7))),
              template_app
               (template_app
                 (template_hole 2,
                  template_app
                   (template_app (template_hole 6, template_var 2),
                    template_hole 7)),
                template_hole 7)),
            template_var 0)),
        template_predicate
         (
            template_app
             (template_app (template_hole 9, template_var 0),
              template_app
               (template_app
                 (template_hole 8,
                  template_app
                   (template_app (template_hole 6, template_var 2),
                    template_hole 7)),
                template_app
                 (template_app (template_hole 6, template_var 2),
                  template_hole 7)))
            )],
       template_equation
        (template_app
          (template_app (template_hole 1, template_var 1),
           template_app
            (template_app (template_hole 0, template_var 5),
             template_var 3)),
         template_app
          (template_app (template_hole 0, template_var 5),
           template_app
            (template_app (template_hole 1, template_var 0),
             template_var 3))))),
    ("SNF_Missing_Lemmas.inv_P'PAQQ'",
     "[| ?A : carrier_mat ?n ?n; ?P : carrier_mat ?n ?n; inverts_mat ?P' ?P;
         inverts_mat ?Q ?Q'; ?Q : carrier_mat ?n ?n;
         ?P' : carrier_mat ?n ?n; ?Q' : carrier_mat ?n ?n |]
      ==> ?P' * (?P * ?A * ?Q) * ?Q' = ?A",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 4, template_var 5),
              template_app
               (template_app (template_hole 3, template_var 4),
                template_var 4))
            ),
        template_predicate
         (
            template_app
             (template_app (template_hole 4, template_var 3),
              template_app
               (template_app (template_hole 3, template_var 4),
                template_var 4))
            ),
        template_predicate
         (
            template_app
             (template_app (template_hole 2, template_var 2),
              template_var 3)
            ),
        template_predicate
         (
            template_app
             (template_app (template_hole 2, template_var 1),
              template_var 0)
            ),
        template_predicate
         (
            template_app
             (template_app (template_hole 4, template_var 1),
              template_app
               (template_app (template_hole 3, template_var 4),
                template_var 4))
            ),
        template_predicate
         (
            template_app
             (template_app (template_hole 4, template_var 2),
              template_app
               (template_app (template_hole 3, template_var 4),
                template_var 4))
            ),
        template_predicate
         (
            template_app
             (template_app (template_hole 4, template_var 0),
              template_app
               (template_app (template_hole 3, template_var 4),
                template_var 4))
            )],
       template_equation
        (template_app
          (template_app
            (template_hole 0,
             template_app
              (template_app (template_hole 0, template_var 2),
               template_app
                (template_app
                  (template_hole 0,
                   template_app
                    (template_app (template_hole 0, template_var 3),
                     template_var 5)),
                 template_var 1))),
           template_var 0),
         template_var 5))),
    ("SNF_Missing_Lemmas.mat_mult2_11",
     "[| ?U : carrier_mat 2 2; ?V : carrier_mat 2 2; ?A = ?U * ?V |]
      ==> ?A $$ (1, 1) =
          ?U $$ (1, 0) * ?V $$ (0, 1) + ?U $$ (1, 1) * ?V $$ (1, 1)",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 13, template_var 2),
              template_app
               (template_app
                 (template_hole 12,
                  template_app
                   (template_hole 11,
                    template_app (template_hole 10, template_hole 9))),
                template_app
                 (template_hole 11,
                  template_app (template_hole 10, template_hole 9))))
            ),
        template_predicate
         (
            template_app
             (template_app (template_hole 13, template_var 1),
              template_app
               (template_app
                 (template_hole 12,
                  template_app
                   (template_hole 11,
                    template_app (template_hole 10, template_hole 9))),
                template_app
                 (template_hole 11,
                  template_app (template_hole 10, template_hole 9))))
            ),
        template_equation
         (template_var 0,
          template_app
           (template_app (template_hole 7, template_var 2),
            template_var 1))],
       template_equation
        (template_app
          (template_app (template_hole 5, template_var 0),
           template_app
            (template_app (template_hole 4, template_hole 3),
             template_hole 3)),
         template_app
          (template_app
            (template_hole 2,
             template_app
              (template_app
                (template_hole 1,
                 template_app
                  (template_app (template_hole 5, template_var 2),
                   template_app
                    (template_app (template_hole 4, template_hole 3),
                     template_hole 0))),
               template_app
                (template_app (template_hole 5, template_var 1),
                 template_app
                  (template_app (template_hole 4, template_hole 0),
                   template_hole 3)))),
           template_app
            (template_app
              (template_hole 1,
               template_app
                (template_app (template_hole 5, template_var 2),
                 template_app
                  (template_app (template_hole 4, template_hole 3),
                   template_hole 3))),
             template_app
              (template_app (template_hole 5, template_var 1),
               template_app
                (template_app (template_hole 4, template_hole 3),
                 template_hole 3))))))),
    ("SNF_Missing_Lemmas.mat_mult2_10",
     "[| ?U : carrier_mat 2 2; ?V : carrier_mat 2 2; ?A = ?U * ?V |]
      ==> ?A $$ (1, 0) =
          ?U $$ (1, 0) * ?V $$ (0, 0) + ?U $$ (1, 1) * ?V $$ (1, 0)",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 13, template_var 2),
              template_app
               (template_app
                 (template_hole 12,
                  template_app
                   (template_hole 11,
                    template_app (template_hole 10, template_hole 9))),
                template_app
                 (template_hole 11,
                  template_app (template_hole 10, template_hole 9))))
            ),
        template_predicate
         (
            template_app
             (template_app (template_hole 13, template_var 1),
              template_app
               (template_app
                 (template_hole 12,
                  template_app
                   (template_hole 11,
                    template_app (template_hole 10, template_hole 9))),
                template_app
                 (template_hole 11,
                  template_app (template_hole 10, template_hole 9))))
            ),
        template_equation
         (template_var 0,
          template_app
           (template_app (template_hole 7, template_var 2),
            template_var 1))],
       template_equation
        (template_app
          (template_app (template_hole 5, template_var 0),
           template_app
            (template_app (template_hole 4, template_hole 3),
             template_hole 2)),
         template_app
          (template_app
            (template_hole 1,
             template_app
              (template_app
                (template_hole 0,
                 template_app
                  (template_app (template_hole 5, template_var 2),
                   template_app
                    (template_app (template_hole 4, template_hole 3),
                     template_hole 2))),
               template_app
                (template_app (template_hole 5, template_var 1),
                 template_app
                  (template_app (template_hole 4, template_hole 2),
                   template_hole 2)))),
           template_app
            (template_app
              (template_hole 0,
               template_app
                (template_app (template_hole 5, template_var 2),
                 template_app
                  (template_app (template_hole 4, template_hole 3),
                   template_hole 3))),
             template_app
              (template_app (template_hole 5, template_var 1),
               template_app
                (template_app (template_hole 4, template_hole 3),
                 template_hole 2))))))),
    ("SNF_Missing_Lemmas.mat_mult2_01",
     "[| ?U : carrier_mat 2 2; ?V : carrier_mat 2 2; ?A = ?U * ?V |]
      ==> ?A $$ (0, 1) =
          ?U $$ (0, 0) * ?V $$ (0, 1) + ?U $$ (0, 1) * ?V $$ (1, 1)",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 13, template_var 2),
              template_app
               (template_app
                 (template_hole 12,
                  template_app
                   (template_hole 11,
                    template_app (template_hole 10, template_hole 9))),
                template_app
                 (template_hole 11,
                  template_app (template_hole 10, template_hole 9))))
            ),
        template_predicate
         (
            template_app
             (template_app (template_hole 13, template_var 1),
              template_app
               (template_app
                 (template_hole 12,
                  template_app
                   (template_hole 11,
                    template_app (template_hole 10, template_hole 9))),
                template_app
                 (template_hole 11,
                  template_app (template_hole 10, template_hole 9))))
            ),
        template_equation
         (template_var 0,
          template_app
           (template_app (template_hole 7, template_var 2),
            template_var 1))],
       template_equation
        (template_app
          (template_app (template_hole 5, template_var 0),
           template_app
            (template_app (template_hole 4, template_hole 3),
             template_hole 2)),
         template_app
          (template_app
            (template_hole 1,
             template_app
              (template_app
                (template_hole 0,
                 template_app
                  (template_app (template_hole 5, template_var 2),
                   template_app
                    (template_app (template_hole 4, template_hole 3),
                     template_hole 3))),
               template_app
                (template_app (template_hole 5, template_var 1),
                 template_app
                  (template_app (template_hole 4, template_hole 3),
                   template_hole 2)))),
           template_app
            (template_app
              (template_hole 0,
               template_app
                (template_app (template_hole 5, template_var 2),
                 template_app
                  (template_app (template_hole 4, template_hole 3),
                   template_hole 2))),
             template_app
              (template_app (template_hole 5, template_var 1),
               template_app
                (template_app (template_hole 4, template_hole 2),
                 template_hole 2))))))),
    ("SNF_Missing_Lemmas.mat_mult2_00",
     "[| ?U : carrier_mat 2 2; ?V : carrier_mat 2 2; ?A = ?U * ?V |]
      ==> ?A $$ (0, 0) =
          ?U $$ (0, 0) * ?V $$ (0, 0) + ?U $$ (0, 1) * ?V $$ (1, 0)",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 13, template_var 2),
              template_app
               (template_app
                 (template_hole 12,
                  template_app
                   (template_hole 11,
                    template_app (template_hole 10, template_hole 9))),
                template_app
                 (template_hole 11,
                  template_app (template_hole 10, template_hole 9))))
            ),
        template_predicate
         (
            template_app
             (template_app (template_hole 13, template_var 1),
              template_app
               (template_app
                 (template_hole 12,
                  template_app
                   (template_hole 11,
                    template_app (template_hole 10, template_hole 9))),
                template_app
                 (template_hole 11,
                  template_app (template_hole 10, template_hole 9))))
            ),
        template_equation
         (template_var 0,
          template_app
           (template_app (template_hole 7, template_var 2),
            template_var 1))],
       template_equation
        (template_app
          (template_app (template_hole 5, template_var 0),
           template_app
            (template_app (template_hole 4, template_hole 3),
             template_hole 3)),
         template_app
          (template_app
            (template_hole 2,
             template_app
              (template_app
                (template_hole 1,
                 template_app
                  (template_app (template_hole 5, template_var 2),
                   template_app
                    (template_app (template_hole 4, template_hole 3),
                     template_hole 3))),
               template_app
                (template_app (template_hole 5, template_var 1),
                 template_app
                  (template_app (template_hole 4, template_hole 3),
                   template_hole 3)))),
           template_app
            (template_app
              (template_hole 1,
               template_app
                (template_app (template_hole 5, template_var 2),
                 template_app
                  (template_app (template_hole 4, template_hole 3),
                   template_hole 0))),
             template_app
              (template_app (template_hole 5, template_var 1),
               template_app
                (template_app (template_hole 4, template_hole 0),
                 template_hole 3))))))),
    ("SNF_Missing_Lemmas.four_block_mat_preserves_column",
     "[| ?A : carrier_mat ?n ?m;
         ?B =
         four_block_mat (1\<^sub>m 1) (0\<^sub>m 1 (?m - 1))
          (0\<^sub>m (?m - 1) 1) ?C;
         ?C : carrier_mat (?m - 1) (?m - 1); ?i < ?n; 0 < ?m |]
      ==> (?A * ?B) $$ (?i, 0) = ?A $$ (?i, 0)",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 13, template_var 5),
              template_app
               (template_app (template_hole 12, template_var 4),
                template_var 3))
            ),
        template_equation
         (template_var 2,
          template_app
           (template_app
             (template_app
               (template_app
                 (template_hole 10,
                  template_app (template_hole 9, template_hole 8)),
                template_app
                 (template_app (template_hole 7, template_hole 8),
                  template_app
                   (template_app (template_hole 6, template_var 3),
                    template_hole 8))),
              template_app
               (template_app
                 (template_hole 7,
                  template_app
                   (template_app (template_hole 6, template_var 3),
                    template_hole 8)),
                template_hole 8)),
            template_var 1)),
        template_predicate
         (
            template_app
             (template_app (template_hole 13, template_var 1),
              template_app
               (template_app
                 (template_hole 12,
                  template_app
                   (template_app (template_hole 6, template_var 3),
                    template_hole 8)),
                template_app
                 (template_app (template_hole 6, template_var 3),
                  template_hole 8)))
            ),
        template_inequation (less_than, template_var 0, template_var 4),
        template_inequation (less_than, template_hole 4, template_var 3)],
       template_equation
        (template_app
          (template_app
            (template_hole 2,
             template_app
              (template_app (template_hole 1, template_var 5),
               template_var 2)),
           template_app
            (template_app (template_hole 0, template_var 0),
             template_hole 4)),
         template_app
          (template_app (template_hole 2, template_var 5),
           template_app
            (template_app (template_hole 0, template_var 0),
             template_hole 4))))),
    ("SNF_Missing_Lemmas.insort_nth'",
     "[| ALL j<?b. ?xs ! j < ?a; sorted ?xs; ?a ~: set ?xs;
         ?i < length ?xs + 1; ?i < ?b; ?xs ~= []; ?b < length ?xs |]
      ==> insort ?a ?xs ! ?i = ?xs ! ?i",
     template_implication
      ([template_predicate (template_app (template_hole 16, t_empty)),
        template_predicate
         (
            template_app
             (template_app (template_hole 11, template_hole 10),
              template_var 2)
            ),
        template_negation
         (
            template_predicate
             (
                template_app
                 (template_app (template_hole 8, template_var 1),
                  template_app (template_hole 7, template_var 2))
                )
            ),
        template_inequation
         (less_than, template_var 0,
          template_app
           (template_app
             (template_hole 6,
              template_app (template_hole 5, template_var 2)),
            template_hole 4)),
        template_inequation (less_than, template_var 0, template_var 3),
        template_negation
         (template_equation (template_var 2, template_hole 2)),
        template_inequation
         (less_than, template_var 3,
          template_app (template_hole 5, template_var 2))],
       template_equation
        (template_app
          (template_app
            (template_hole 12,
             template_app
              (template_app
                (template_app (template_hole 0, t_empty), template_var 1),
               template_var 2)),
           template_var 0),
         template_app
          (template_app (template_hole 12, template_var 2),
           template_var 0)))),
    ("SNF_Missing_Lemmas.dvd_elements_mult_matrix_left_right",
     "[| ?A : carrier_mat ?m ?n; ?P : carrier_mat ?m ?m;
         ?Q : carrier_mat ?n ?n;
         ALL i j. i < ?m & j < ?n --> ?x dvd ?A $$ (i, j) |]
      ==> ALL i j. i < ?m & j < ?n --> ?x dvd (?P * ?A * ?Q) $$ (i, j)",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 9, template_var 5),
              template_app
               (template_app (template_hole 8, template_var 4),
                template_var 3))
            ),
        template_predicate
         (
            template_app
             (template_app (template_hole 9, template_var 2),
              template_app
               (template_app (template_hole 8, template_var 4),
                template_var 4))
            ),
        template_predicate
         (
            template_app
             (template_app (template_hole 9, template_var 1),
              template_app
               (template_app (template_hole 8, template_var 3),
                template_var 3))
            ),
        template_predicate (template_app (template_hole 7, t_empty))],
       template_predicate (template_app (template_hole 7, t_empty))))]
