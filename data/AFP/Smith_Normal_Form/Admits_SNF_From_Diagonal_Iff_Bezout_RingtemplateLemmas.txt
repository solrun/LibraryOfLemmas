   [("Admits_SNF_From_Diagonal_Iff_Bezout_Ring.to_nat_mod_type_Bij_Nat",
     "(!!b. to_nat ?a = Bij_Nat.to_nat b ==> ?thesis) ==> ?thesis",
     template_implication
      ([template_predicate (template_app (template_hole 4, t_empty))],
       template_predicate (template_var 0))),
    ("Admits_SNF_From_Diagonal_Iff_Bezout_Ring.Bij_Nat_to_nat_neq",
     "to_nat ?a ~= to_nat ?b ==> Bij_Nat.to_nat ?a ~= Bij_Nat.to_nat ?b",
     template_implication
      ([template_negation
         (
            template_equation
             (template_app (template_hole 1, template_var 1),
              template_app (template_hole 1, template_var 0))
            )],
       template_negation
        (
           template_equation
            (template_app (template_hole 0, template_var 1),
             template_app (template_hole 0, template_var 0))
           ))),
    ("Admits_SNF_From_Diagonal_Iff_Bezout_Ring.bezout_ring_imp_diagonal_admits_SNF_mod_ring_admits_aux2",
     "class.bezout_ring (*) (1::?'a) (+) (0::?'a) (-) uminus ==>
      ALL A:carrier_mat ?n ?n. admits_SNF_JNF A",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_app
                   (template_app
                     (template_app (template_hole 9, template_hole 8),
                      template_hole 7),
                    template_hole 6),
                  template_hole 5),
                template_hole 4),
              template_hole 3)
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 2,
               template_app
                (template_app (template_hole 1, template_var 0),
                 template_var 0)),
             t_empty)
           ))),
    ("Admits_SNF_From_Diagonal_Iff_Bezout_Ring.type_to_set",
     "[| EX Rep Abs. type_definition Rep Abs {0..<int ?p}; 1 < ?p |]
      ==> class.nontriv TYPE(?'b)",
     template_implication
      ([template_predicate (template_app (template_hole 9, t_empty)),
        template_inequation (less_than, template_hole 2, template_var 0)],
       template_predicate
        (template_app (template_hole 1, template_hole 0)))),
    ("Admits_SNF_From_Diagonal_Iff_Bezout_Ring.type_to_set",
     "[| EX Rep Abs. type_definition Rep Abs {0..<int ?p}; 1 < ?p |]
      ==> ?p = CARD(?'b)",
     template_implication
      ([template_predicate (template_app (template_hole 10, t_empty)),
        template_inequation (less_than, template_hole 3, template_var 0)],
       template_equation
        (template_var 0, template_app (template_hole 1, template_hole 0)))),
    ("Admits_SNF_From_Diagonal_Iff_Bezout_Ring.exists_f_PAQ_Aii'",
     "isDiagonal ?A ==>
      EX f. (?P ** ?A ** ?Q) $h ?i $h ?i =
            (SUM i:UNIV. f i * ?A $h i $h i)",
     template_implication
      ([template_predicate
         (template_app (template_hole 11, template_var 3))],
       template_predicate (template_app (template_hole 10, t_empty)))),
    ("Admits_SNF_From_Diagonal_Iff_Bezout_Ring.diagonal_to_Smith_PQ_exists_internalize_sort",
     "[| class.bezout_ring (*) (1::?'a) (+) (0::?'a) (-) uminus;
         isDiagonal ?A |]
      ==> EX P Q.
             invertible P &
             invertible Q & Smith_normal_form (P ** ?A ** Q)",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_app
                   (template_app
                     (template_app (template_hole 15, template_hole 14),
                      template_hole 13),
                    template_hole 12),
                  template_hole 11),
                template_hole 10),
              template_hole 9)
            ),
        template_predicate
         (template_app (template_hole 8, template_var 0))],
       template_predicate (template_app (template_hole 7, t_empty)))),
    ("Admits_SNF_From_Diagonal_Iff_Bezout_Ring.bezout_ring_imp_diagonal_admits_SNF_mod_ring_admits_aux",
     "[| EX Rep Abs. type_definition Rep Abs {0..<int ?p}; 1 < ?p;
         class.bezout_ring (*) (1::?'a) (+) (0::?'a) (-) uminus |]
      ==> Ball {A. A : carrier_mat ?p ?p} admits_SNF_JNF",
     template_implication
      ([template_predicate (template_app (template_hole 19, t_empty)),
        template_inequation (less_than, template_hole 12, template_var 0),
        template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_app
                   (template_app
                     (template_app (template_hole 11, template_hole 10),
                      template_hole 9),
                    template_hole 8),
                  template_hole 7),
                template_hole 6),
              template_hole 5)
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 4, template_app (template_hole 3, t_empty)),
             template_hole 0)
           ))),
    ("Admits_SNF_From_Diagonal_Iff_Bezout_Ring.exists_f_PAQ_Aii",
     "[| isDiagonal_mat ?A; ?P : carrier_mat ?n ?n; ?A : carrier_mat ?n ?n;
         ?Q : carrier_mat ?n ?n; ?i < ?n |]
      ==> EX f. (?P * ?A * ?Q) $$ (?i, ?i) =
                (SUM i:set (diag_mat ?A). f i * i)",
     template_implication
      ([template_predicate
         (template_app (template_hole 12, template_var 4)),
        template_predicate
         (
            template_app
             (template_app (template_hole 11, template_var 3),
              template_app
               (template_app (template_hole 10, template_var 2),
                template_var 2))
            ),
        template_predicate
         (
            template_app
             (template_app (template_hole 11, template_var 4),
              template_app
               (template_app (template_hole 10, template_var 2),
                template_var 2))
            ),
        template_predicate
         (
            template_app
             (template_app (template_hole 11, template_var 1),
              template_app
               (template_app (template_hole 10, template_var 2),
                template_var 2))
            ),
        template_inequation (less_than, template_var 0, template_var 2)],
       template_predicate (template_app (template_hole 8, t_empty))))]
