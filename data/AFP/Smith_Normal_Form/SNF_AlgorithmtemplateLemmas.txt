   [("SNF_Algorithm.Smith_1xn_two_matrices_all",
     "ALL A:carrier_mat 1 ?n. is_SNF A (?Smith_1xn A) ==>
      EX Smith_1xn'.
         ALL A:carrier_mat 1 ?n. is_SNF A (1\<^sub>m 1, Smith_1xn' A)",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_hole 6,
                template_app
                 (template_app (template_hole 5, template_hole 4),
                  template_var 1)),
              t_empty)
            )],
       template_predicate (template_app (template_hole 2, t_empty)))),
    ("SNF_Algorithm.Smith_1xn_two_matrices",
     "[| ?A : carrier_mat 1 ?n; (?P, ?S, ?Q) = ?Smith_1xn ?A;
         is_SNF ?A (?Smith_1xn ?A) |]
      ==> EX Smith_1xn'. is_SNF ?A (1\<^sub>m 1, Smith_1xn' ?A)",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 8, template_var 5),
              template_app
               (template_app (template_hole 7, template_hole 6),
                template_var 4))
            ),
        template_equation
         (template_app
           (template_app (template_hole 4, template_var 3),
            template_app
             (template_app (template_hole 3, template_var 2),
              template_var 1)),
          template_app (template_var 0, template_var 5)),
        template_predicate
         (
            template_app
             (template_app (template_hole 2, template_var 5),
              template_app (template_var 0, template_var 5))
            )],
       template_predicate (template_app (template_hole 1, t_empty)))),
    ("SNF_Algorithm.reduce_column",
     "[| ?H : carrier_mat ?m ?n; (?P, ?K) = reduce_column ?div_op ?H;
         0 < ?m |]
      ==> ?P : carrier_mat ?m ?m &
          ?K : carrier_mat ?m ?n & ?P * ?H = ?K & invertible_mat ?P",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 10, template_var 5),
              template_app
               (template_app (template_hole 9, template_var 4),
                template_var 3))
            ),
        template_equation
         (template_app
           (template_app (template_hole 7, template_var 2), template_var 1),
          template_app
           (template_app (template_hole 6, template_var 0),
            template_var 5)),
        template_inequation (less_than, template_hole 4, template_var 4)],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 3,
               template_app
                (template_app (template_hole 10, template_var 2),
                 template_app
                  (template_app (template_hole 9, template_var 4),
                   template_var 4))),
             template_app
              (template_app
                (template_hole 3,
                 template_app
                  (template_app (template_hole 10, template_var 1),
                   template_app
                    (template_app (template_hole 9, template_var 4),
                     template_var 3))),
               template_app
                (template_app
                  (template_hole 3,
                   template_app
                    (template_app
                      (template_hole 2,
                       template_app
                        (template_app (template_hole 1, template_var 2),
                         template_var 5)),
                     template_var 1)),
                 template_app (template_hole 0, template_var 2))))
           ))),
    ("SNF_Algorithm.reduce_column_preserves",
     "[| ?H : carrier_mat ?m ?n; (?P, ?K) = reduce_column ?div_op ?H;
         0 < ?m; ?i : {0, 1}; ?i < ?m |]
      ==> Matrix.row ?K ?i = Matrix.row ?H ?i",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 12, template_var 6),
              template_app
               (template_app (template_hole 11, template_var 5),
                template_var 4))
            ),
        template_equation
         (template_app
           (template_app (template_hole 9, template_var 3), template_var 2),
          template_app
           (template_app (template_hole 8, template_var 1),
            template_var 6)),
        template_inequation (less_than, template_hole 6, template_var 5),
        template_predicate
         (
            template_app
             (template_app (template_hole 5, template_var 0),
              template_app
               (template_app (template_hole 4, template_hole 6),
                template_app
                 (template_app (template_hole 4, template_hole 3),
                  template_hole 2)))
            ),
        template_inequation (less_than, template_var 0, template_var 5)],
       template_equation
        (template_app
          (template_app (template_hole 0, template_var 2), template_var 0),
         template_app
          (template_app (template_hole 0, template_var 6),
           template_var 0)))),
    ("SNF_Algorithm.is_SNF_intro",
     "[| ?P : carrier_mat (dim_row ?A) (dim_row ?A);
         ?Q : carrier_mat (dim_col ?A) (dim_col ?A); invertible_mat ?P;
         invertible_mat ?Q; Smith_normal_form_mat ?S; ?S = ?P * ?A * ?Q |]
      ==> is_SNF ?A (?P, ?S, ?Q)",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 10, template_var 3),
              template_app
               (template_app
                 (template_hole 9,
                  template_app (template_hole 8, template_var 2)),
                template_app (template_hole 8, template_var 2)))
            ),
        template_predicate
         (
            template_app
             (template_app (template_hole 10, template_var 1),
              template_app
               (template_app
                 (template_hole 9,
                  template_app (template_hole 7, template_var 2)),
                template_app (template_hole 7, template_var 2)))
            ),
        template_predicate (template_app (template_hole 6, template_var 3)),
        template_predicate (template_app (template_hole 6, template_var 1)),
        template_predicate (template_app (template_hole 5, template_var 0)),
        template_equation
         (template_var 0,
          template_app
           (template_app
             (template_hole 3,
              template_app
               (template_app (template_hole 3, template_var 3),
                template_var 2)),
            template_var 1))],
       template_predicate
        (
           template_app
            (template_app (template_hole 2, template_var 2),
             template_app
              (template_app (template_hole 1, template_var 3),
               template_app
                (template_app (template_hole 0, template_var 0),
                 template_var 1)))
           ))),
    ("SNF_Algorithm.reduce_column_preserves2",
     "[| ?H : carrier_mat ?m ?n; (?P, ?K) = reduce_column ?div_op ?H;
         0 < ?m; ?i : {0, 1}; ?i < ?m; ?j < ?n |]
      ==> ?K $$ (?i, ?j) = ?H $$ (?i, ?j)",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 13, template_var 7),
              template_app
               (template_app (template_hole 12, template_var 6),
                template_var 5))
            ),
        template_equation
         (template_app
           (template_app (template_hole 10, template_var 4),
            template_var 3),
          template_app
           (template_app (template_hole 9, template_var 2),
            template_var 7)),
        template_inequation (less_than, template_hole 7, template_var 6),
        template_predicate
         (
            template_app
             (template_app (template_hole 6, template_var 1),
              template_app
               (template_app (template_hole 5, template_hole 7),
                template_app
                 (template_app (template_hole 5, template_hole 4),
                  template_hole 3)))
            ),
        template_inequation (less_than, template_var 1, template_var 6),
        template_inequation (less_than, template_var 0, template_var 5)],
       template_equation
        (template_app
          (template_app (template_hole 1, template_var 3),
           template_app
            (template_app (template_hole 0, template_var 1),
             template_var 0)),
         template_app
          (template_app (template_hole 1, template_var 7),
           template_app
            (template_app (template_hole 0, template_var 1),
             template_var 0))))),
    ("SNF_Algorithm.reduce_column_aux_preserves",
     "[| ?H : carrier_mat ?m ?n; ?P_init : carrier_mat ?m ?m;
         ?K_init : carrier_mat ?m ?n; ?P_init * ?H = ?K_init;
         (?P, ?K) = reduce_column_aux ?div_op ?xs ?H (?P_init, ?K_init);
         0 < ?m; invertible_mat ?P_init; 0 ~: set ?xs; ?i ~: set ?xs;
         ?i < ?m |]
      ==> Matrix.row ?K ?i = Matrix.row ?K_init ?i",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 14, template_var 9),
              template_app
               (template_app (template_hole 13, template_var 8),
                template_var 7))
            ),
        template_predicate
         (
            template_app
             (template_app (template_hole 14, template_var 6),
              template_app
               (template_app (template_hole 13, template_var 8),
                template_var 8))
            ),
        template_predicate
         (
            template_app
             (template_app (template_hole 14, template_var 5),
              template_app
               (template_app (template_hole 13, template_var 8),
                template_var 7))
            ),
        template_equation
         (template_app
           (template_app (template_hole 11, template_var 6),
            template_var 9),
          template_var 5),
        template_equation
         (template_app
           (template_app (template_hole 9, template_var 4), template_var 3),
          template_app
           (template_app
             (template_app
               (template_app (template_hole 8, template_var 2),
                template_var 1),
              template_var 9),
            template_app
             (template_app (template_hole 9, template_var 6),
              template_var 5))),
        template_inequation (less_than, template_hole 6, template_var 8),
        template_predicate (template_app (template_hole 5, template_var 6)),
        template_negation
         (
            template_predicate
             (
                template_app
                 (template_app (template_hole 3, template_hole 6),
                  template_app (template_hole 2, template_var 1))
                )
            ),
        template_negation
         (
            template_predicate
             (
                template_app
                 (template_app (template_hole 3, template_var 0),
                  template_app (template_hole 2, template_var 1))
                )
            ),
        template_inequation (less_than, template_var 0, template_var 8)],
       template_equation
        (template_app
          (template_app (template_hole 0, template_var 3), template_var 0),
         template_app
          (template_app (template_hole 0, template_var 5),
           template_var 0)))),
    ("SNF_Algorithm.reduce_column_aux",
     "[| ?H : carrier_mat ?m ?n; ?P_init : carrier_mat ?m ?m;
         ?K_init : carrier_mat ?m ?n; ?P_init * ?H = ?K_init;
         (?P, ?K) = reduce_column_aux ?div_op ?xs ?H (?P_init, ?K_init);
         0 < ?m; invertible_mat ?P_init; 0 ~: set ?xs |]
      ==> ?P : carrier_mat ?m ?m &
          ?K : carrier_mat ?m ?n & ?P * ?H = ?K & invertible_mat ?P",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 13, template_var 8),
              template_app
               (template_app (template_hole 12, template_var 7),
                template_var 6))
            ),
        template_predicate
         (
            template_app
             (template_app (template_hole 13, template_var 5),
              template_app
               (template_app (template_hole 12, template_var 7),
                template_var 7))
            ),
        template_predicate
         (
            template_app
             (template_app (template_hole 13, template_var 4),
              template_app
               (template_app (template_hole 12, template_var 7),
                template_var 6))
            ),
        template_equation
         (template_app
           (template_app (template_hole 10, template_var 5),
            template_var 8),
          template_var 4),
        template_equation
         (template_app
           (template_app (template_hole 8, template_var 3), template_var 2),
          template_app
           (template_app
             (template_app
               (template_app (template_hole 7, template_var 1),
                template_var 0),
              template_var 8),
            template_app
             (template_app (template_hole 8, template_var 5),
              template_var 4))),
        template_inequation (less_than, template_hole 5, template_var 7),
        template_predicate (template_app (template_hole 4, template_var 5)),
        template_negation
         (
            template_predicate
             (
                template_app
                 (template_app (template_hole 2, template_hole 5),
                  template_app (template_hole 1, template_var 0))
                )
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 0,
               template_app
                (template_app (template_hole 13, template_var 3),
                 template_app
                  (template_app (template_hole 12, template_var 7),
                   template_var 7))),
             template_app
              (template_app
                (template_hole 0,
                 template_app
                  (template_app (template_hole 13, template_var 2),
                   template_app
                    (template_app (template_hole 12, template_var 7),
                     template_var 6))),
               template_app
                (template_app
                  (template_hole 0,
                   template_app
                    (template_app
                      (template_hole 11,
                       template_app
                        (template_app (template_hole 10, template_var 3),
                         template_var 8)),
                     template_var 2)),
                 template_app (template_hole 4, template_var 3))))
           ))),
    ("SNF_Algorithm.reduce_column_works",
     "[| ?H : carrier_mat ?m ?n; (?P, ?K) = reduce_column ?div_op ?H;
         0 < ?m; ?H $$ (0, 0) dvd ?H $$ (?i, 0);
         ALL j:{1..<?n}. ?H $$ (0, j) = (0::?'a); ?j : {1..<?n}; 0 < ?n;
         ?i : {2..<?m}; is_div_op ?div_op |]
      ==> ?K $$ (?i, 0) = (0::?'a)",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 19, template_var 7),
              template_app
               (template_app (template_hole 18, template_var 6),
                template_var 5))
            ),
        template_equation
         (template_app
           (template_app (template_hole 16, template_var 4),
            template_var 3),
          template_app
           (template_app (template_hole 15, template_var 2),
            template_var 7)),
        template_inequation (less_than, template_hole 13, template_var 6),
        template_predicate
         (
            template_app
             (template_app
               (template_hole 12,
                template_app
                 (template_app (template_hole 11, template_var 7),
                  template_app
                   (template_app (template_hole 10, template_hole 13),
                    template_hole 13))),
              template_app
               (template_app (template_hole 11, template_var 7),
                template_app
                 (template_app (template_hole 10, template_var 1),
                  template_hole 13)))
            ),
        template_predicate
         (
            template_app
             (template_app
               (template_hole 9,
                template_app
                 (template_app (template_hole 8, template_hole 7),
                  template_var 5)),
              t_empty)
            ),
        template_predicate
         (
            template_app
             (template_app (template_hole 4, template_var 0),
              template_app
               (template_app (template_hole 8, template_hole 7),
                template_var 5))
            ),
        template_inequation (less_than, template_hole 13, template_var 5),
        template_predicate
         (
            template_app
             (template_app (template_hole 4, template_var 1),
              template_app
               (template_app
                 (template_hole 8,
                  template_app
                   (template_hole 3,
                    template_app (template_hole 2, template_hole 1))),
                template_var 6))
            ),
        template_predicate
         (template_app (template_hole 0, template_var 2))],
       template_equation
        (template_app
          (template_app (template_hole 11, template_var 3),
           template_app
            (template_app (template_hole 10, template_var 1),
             template_hole 13)),
         template_hole 5))),
    ("SNF_Algorithm.reduce_column_works",
     "[| ?H : carrier_mat ?m ?n; (?P, ?K) = reduce_column ?div_op ?H;
         0 < ?m; ?H $$ (0, 0) dvd ?H $$ (?i, 0);
         ALL j:{1..<?n}. ?H $$ (0, j) = (0::?'a); ?j : {1..<?n}; 0 < ?n;
         ?i : {2..<?m}; is_div_op ?div_op |]
      ==> ?K $$ (?i, ?j) = ?H $$ (?i, ?j)",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 19, template_var 7),
              template_app
               (template_app (template_hole 18, template_var 6),
                template_var 5))
            ),
        template_equation
         (template_app
           (template_app (template_hole 16, template_var 4),
            template_var 3),
          template_app
           (template_app (template_hole 15, template_var 2),
            template_var 7)),
        template_inequation (less_than, template_hole 13, template_var 6),
        template_predicate
         (
            template_app
             (template_app
               (template_hole 12,
                template_app
                 (template_app (template_hole 11, template_var 7),
                  template_app
                   (template_app (template_hole 10, template_hole 13),
                    template_hole 13))),
              template_app
               (template_app (template_hole 11, template_var 7),
                template_app
                 (template_app (template_hole 10, template_var 1),
                  template_hole 13)))
            ),
        template_predicate
         (
            template_app
             (template_app
               (template_hole 9,
                template_app
                 (template_app (template_hole 8, template_hole 7),
                  template_var 5)),
              t_empty)
            ),
        template_predicate
         (
            template_app
             (template_app (template_hole 4, template_var 0),
              template_app
               (template_app (template_hole 8, template_hole 7),
                template_var 5))
            ),
        template_inequation (less_than, template_hole 13, template_var 5),
        template_predicate
         (
            template_app
             (template_app (template_hole 4, template_var 1),
              template_app
               (template_app
                 (template_hole 8,
                  template_app
                   (template_hole 3,
                    template_app (template_hole 2, template_hole 1))),
                template_var 6))
            ),
        template_predicate
         (template_app (template_hole 0, template_var 2))],
       template_equation
        (template_app
          (template_app (template_hole 11, template_var 3),
           template_app
            (template_app (template_hole 10, template_var 1),
             template_var 0)),
         template_app
          (template_app (template_hole 11, template_var 7),
           template_app
            (template_app (template_hole 10, template_var 1),
             template_var 0))))),
    ("SNF_Algorithm.reduce_column_aux_index'",
     "[| ?H : carrier_mat ?m ?n; ?P_init : carrier_mat ?m ?m;
         ?K_init : carrier_mat ?m ?n; ?P_init * ?H = ?K_init;
         (?P, ?K) = reduce_column_aux ?div_op ?xs ?H (?P_init, ?K_init);
         0 < ?m; invertible_mat ?P_init; 0 ~: set ?xs;
         ALL x:set ?xs. x < ?m; distinct ?xs |]
      ==> ALL i:set ?xs.
             Matrix.row ?K i =
             Matrix.row
              (addrow (- ?div_op (?H $$ (i, 0)) (?H $$ (0, 0))) i 0 ?K_init)
              i",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 22, template_var 8),
              template_app
               (template_app (template_hole 21, template_var 7),
                template_var 6))
            ),
        template_predicate
         (
            template_app
             (template_app (template_hole 22, template_var 5),
              template_app
               (template_app (template_hole 21, template_var 7),
                template_var 7))
            ),
        template_predicate
         (
            template_app
             (template_app (template_hole 22, template_var 4),
              template_app
               (template_app (template_hole 21, template_var 7),
                template_var 6))
            ),
        template_equation
         (template_app
           (template_app (template_hole 19, template_var 5),
            template_var 8),
          template_var 4),
        template_equation
         (template_app
           (template_app (template_hole 17, template_var 3),
            template_var 2),
          template_app
           (template_app
             (template_app
               (template_app (template_hole 16, template_var 1),
                template_var 0),
              template_var 8),
            template_app
             (template_app (template_hole 17, template_var 5),
              template_var 4))),
        template_inequation (less_than, template_hole 14, template_var 7),
        template_predicate
         (template_app (template_hole 13, template_var 5)),
        template_negation
         (
            template_predicate
             (
                template_app
                 (template_app (template_hole 11, template_hole 14),
                  template_app (template_hole 10, template_var 0))
                )
            ),
        template_predicate
         (
            template_app
             (template_app
               (template_hole 9,
                template_app (template_hole 10, template_var 0)),
              t_empty)
            ),
        template_predicate
         (template_app (template_hole 8, template_var 0))],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 9,
               template_app (template_hole 10, template_var 0)),
             t_empty)
           ))),
    ("SNF_Algorithm.reduce_column_aux_index",
     "[| ?H : carrier_mat ?m ?n; ?P_init : carrier_mat ?m ?m;
         ?K_init : carrier_mat ?m ?n; ?P_init * ?H = ?K_init;
         (?P, ?K) = reduce_column_aux ?div_op ?xs ?H (?P_init, ?K_init);
         0 < ?m; invertible_mat ?P_init; 0 ~: set ?xs;
         ALL x:set ?xs. x < ?m; distinct ?xs; ?i : set ?xs |]
      ==> Matrix.row ?K ?i =
          Matrix.row
           (addrow (- ?div_op (?H $$ (?i, 0)) (?H $$ (0, 0))) ?i 0 ?K_init)
           ?i",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 22, template_var 9),
              template_app
               (template_app (template_hole 21, template_var 8),
                template_var 7))
            ),
        template_predicate
         (
            template_app
             (template_app (template_hole 22, template_var 6),
              template_app
               (template_app (template_hole 21, template_var 8),
                template_var 8))
            ),
        template_predicate
         (
            template_app
             (template_app (template_hole 22, template_var 5),
              template_app
               (template_app (template_hole 21, template_var 8),
                template_var 7))
            ),
        template_equation
         (template_app
           (template_app (template_hole 19, template_var 6),
            template_var 9),
          template_var 5),
        template_equation
         (template_app
           (template_app (template_hole 17, template_var 4),
            template_var 3),
          template_app
           (template_app
             (template_app
               (template_app (template_hole 16, template_var 2),
                template_var 1),
              template_var 9),
            template_app
             (template_app (template_hole 17, template_var 6),
              template_var 5))),
        template_inequation (less_than, template_hole 14, template_var 8),
        template_predicate
         (template_app (template_hole 13, template_var 6)),
        template_negation
         (
            template_predicate
             (
                template_app
                 (template_app (template_hole 11, template_hole 14),
                  template_app (template_hole 10, template_var 1))
                )
            ),
        template_predicate
         (
            template_app
             (template_app
               (template_hole 9,
                template_app (template_hole 10, template_var 1)),
              t_empty)
            ),
        template_predicate (template_app (template_hole 8, template_var 1)),
        template_predicate
         (
            template_app
             (template_app (template_hole 11, template_var 0),
              template_app (template_hole 10, template_var 1))
            )],
       template_equation
        (template_app
          (template_app (template_hole 6, template_var 3), template_var 0),
         template_app
          (template_app
            (template_hole 6,
             template_app
              (template_app
                (template_app
                  (template_app
                    (template_app
                      (template_app (template_hole 5, template_hole 4),
                       template_hole 3),
                     template_app
                      (template_hole 2,
                       template_app
                        (template_app
                          (template_var 2,
                           template_app
                            (template_app (template_hole 1, template_var 9),
                             template_app
                              (template_app
                                (template_hole 0, template_var 0),
                               template_hole 14))),
                         template_app
                          (template_app (template_hole 1, template_var 9),
                           template_app
                            (template_app
                              (template_hole 0, template_hole 14),
                             template_hole 14))))),
                   template_var 0),
                 template_hole 14),
               template_var 5)),
           template_var 0)))),
    ("SNF_Algorithm.reduce_column_aux_works",
     "[| ?H : carrier_mat ?m ?n;
         (?P, ?K) =
         reduce_column_aux ?div_op ?xs ?H (1\<^sub>m (dim_row ?H), ?H);
         0 < ?m; 0 ~: set ?xs; ALL x:set ?xs. x < ?m; distinct ?xs;
         ?i : set ?xs; ?H $$ (0, 0) dvd ?H $$ (?i, 0);
         ALL j:{1..<?n}. ?H $$ (0, j) = (0::?'a); ?j : {1..<?n}; 0 < ?n;
         is_div_op ?div_op |]
      ==> ?K $$ (?i, 0) = (0::?'a)",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 21, template_var 8),
              template_app
               (template_app (template_hole 20, template_var 7),
                template_var 6))
            ),
        template_equation
         (template_app
           (template_app (template_hole 18, template_var 5),
            template_var 4),
          template_app
           (template_app
             (template_app
               (template_app (template_hole 17, template_var 3),
                template_var 2),
              template_var 8),
            template_app
             (template_app
               (template_hole 18,
                template_app
                 (template_hole 16,
                  template_app (template_hole 15, template_var 8))),
              template_var 8))),
        template_inequation (less_than, template_hole 13, template_var 7),
        template_negation
         (
            template_predicate
             (
                template_app
                 (template_app (template_hole 11, template_hole 13),
                  template_app (template_hole 10, template_var 2))
                )
            ),
        template_predicate
         (
            template_app
             (template_app
               (template_hole 9,
                template_app (template_hole 10, template_var 2)),
              t_empty)
            ),
        template_predicate (template_app (template_hole 8, template_var 2)),
        template_predicate
         (
            template_app
             (template_app (template_hole 11, template_var 1),
              template_app (template_hole 10, template_var 2))
            ),
        template_predicate
         (
            template_app
             (template_app
               (template_hole 7,
                template_app
                 (template_app (template_hole 6, template_var 8),
                  template_app
                   (template_app (template_hole 5, template_hole 13),
                    template_hole 13))),
              template_app
               (template_app (template_hole 6, template_var 8),
                template_app
                 (template_app (template_hole 5, template_var 1),
                  template_hole 13)))
            ),
        template_predicate
         (
            template_app
             (template_app
               (template_hole 9,
                template_app
                 (template_app (template_hole 4, template_hole 3),
                  template_var 6)),
              t_empty)
            ),
        template_predicate
         (
            template_app
             (template_app (template_hole 11, template_var 0),
              template_app
               (template_app (template_hole 4, template_hole 3),
                template_var 6))
            ),
        template_inequation (less_than, template_hole 13, template_var 6),
        template_predicate
         (template_app (template_hole 0, template_var 3))],
       template_equation
        (template_app
          (template_app (template_hole 6, template_var 4),
           template_app
            (template_app (template_hole 5, template_var 1),
             template_hole 13)),
         template_hole 1))),
    ("SNF_Algorithm.reduce_column_aux_works",
     "[| ?H : carrier_mat ?m ?n;
         (?P, ?K) =
         reduce_column_aux ?div_op ?xs ?H (1\<^sub>m (dim_row ?H), ?H);
         0 < ?m; 0 ~: set ?xs; ALL x:set ?xs. x < ?m; distinct ?xs;
         ?i : set ?xs; ?H $$ (0, 0) dvd ?H $$ (?i, 0);
         ALL j:{1..<?n}. ?H $$ (0, j) = (0::?'a); ?j : {1..<?n}; 0 < ?n;
         is_div_op ?div_op |]
      ==> ?K $$ (?i, ?j) = ?H $$ (?i, ?j)",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 21, template_var 8),
              template_app
               (template_app (template_hole 20, template_var 7),
                template_var 6))
            ),
        template_equation
         (template_app
           (template_app (template_hole 18, template_var 5),
            template_var 4),
          template_app
           (template_app
             (template_app
               (template_app (template_hole 17, template_var 3),
                template_var 2),
              template_var 8),
            template_app
             (template_app
               (template_hole 18,
                template_app
                 (template_hole 16,
                  template_app (template_hole 15, template_var 8))),
              template_var 8))),
        template_inequation (less_than, template_hole 13, template_var 7),
        template_negation
         (
            template_predicate
             (
                template_app
                 (template_app (template_hole 11, template_hole 13),
                  template_app (template_hole 10, template_var 2))
                )
            ),
        template_predicate
         (
            template_app
             (template_app
               (template_hole 9,
                template_app (template_hole 10, template_var 2)),
              t_empty)
            ),
        template_predicate (template_app (template_hole 8, template_var 2)),
        template_predicate
         (
            template_app
             (template_app (template_hole 11, template_var 1),
              template_app (template_hole 10, template_var 2))
            ),
        template_predicate
         (
            template_app
             (template_app
               (template_hole 7,
                template_app
                 (template_app (template_hole 6, template_var 8),
                  template_app
                   (template_app (template_hole 5, template_hole 13),
                    template_hole 13))),
              template_app
               (template_app (template_hole 6, template_var 8),
                template_app
                 (template_app (template_hole 5, template_var 1),
                  template_hole 13)))
            ),
        template_predicate
         (
            template_app
             (template_app
               (template_hole 9,
                template_app
                 (template_app (template_hole 4, template_hole 3),
                  template_var 6)),
              t_empty)
            ),
        template_predicate
         (
            template_app
             (template_app (template_hole 11, template_var 0),
              template_app
               (template_app (template_hole 4, template_hole 3),
                template_var 6))
            ),
        template_inequation (less_than, template_hole 13, template_var 6),
        template_predicate
         (template_app (template_hole 0, template_var 3))],
       template_equation
        (template_app
          (template_app (template_hole 6, template_var 4),
           template_app
            (template_app (template_hole 5, template_var 1),
             template_var 0)),
         template_app
          (template_app (template_hole 6, template_var 8),
           template_app
            (template_app (template_hole 5, template_var 1),
             template_var 0)))))]
