Loading theory "Draft.Preliminaries" (required by "Draft.DDSMoreTemplates" via "Draft.DDS" via "Draft.Concrete_Examples")
Loading theory "HOL-Library.Nat_Bijection" (required by "Draft.DDSMoreTemplates" via "Draft.ExtrEqs" via "HOL-Library.Stream")
Loading theory "HOL-Library.Function_Algebras" (required by "Draft.DDSMoreTemplates" via "Draft.ExtrEqs" via "HOL-Library.BigO")
Loading theory "HOL-Library.Old_Datatype" (required by "Draft.DDSMoreTemplates" via "Draft.DDS" via "HOL-Library.FSet" via "HOL-Library.Countable")
instantiation
  fun :: (type, plus) plus
  plus_fun == plus :: ('a => 'b) => ('a => 'b) => 'a => 'b
instantiation
  fun :: (type, zero) zero
  zero_fun == zero_class.zero :: 'a => 'b
instantiation
  fun :: (type, times) times
  times_fun == times :: ('a => 'b) => ('a => 'b) => 'a => 'b
specification
  relcompp_witness1: (?A OO ?B) (fst ?xy) (snd ?xy) ==> ?A (fst ?xy) (relcompp_witness ?A ?B ?xy)
  relcompp_witness2: (?A OO ?B) (fst ?xy) (snd ?xy) ==> ?B (relcompp_witness ?A ?B ?xy) (snd ?xy)
instantiation
  fun :: (type, one) one
  one_fun == one_class.one :: 'a => 'b
### theory "Draft.Preliminaries"
### 0.075s elapsed time, 0.335s cpu time, 0.000s GC time
Loading theory "HOL-Library.Phantom_Type" (required by "Draft.DDSMoreTemplates" via "Draft.DDS" via "Draft.Concrete_Examples" via "HOL-Library.Cardinality")
Found termination order: "(%p. size (snd p)) <*mlex*> {}"
### theory "HOL-Library.Function_Algebras"
### 0.132s elapsed time, 0.548s cpu time, 0.041s GC time
Loading theory "HOL-Library.Rewrite" (required by "Draft.DDSMoreTemplates" via "Draft.DDS" via "Draft.Concrete_Examples")
infix 1 then_cconv
infix 0 else_cconv
type cconv = conv
signature BASIC_CCONV =
  sig
    val CCONVERSION: cconv -> int -> tactic
    type cconv = conv
    val else_cconv: cconv * cconv -> cconv
    val then_cconv: cconv * cconv -> cconv
  end
signature CCONV =
  sig
    val CCONVERSION: cconv -> int -> tactic
    val abs_cconv:
       (cterm * Proof.context -> cconv) -> Proof.context -> cconv
    val all_cconv: cconv
    val arg1_cconv: cconv -> cconv
    val arg_cconv: cconv -> cconv
    type cconv = conv
    val comb_cconv: cconv -> cconv
    val combination_cconv: cconv -> cconv -> cconv
    val concl_cconv: int -> cconv -> cconv
    val else_cconv: cconv * cconv -> cconv
    val fconv_rule: cconv -> thm -> thm
    val first_cconv: cconv list -> cconv
    val fun2_cconv: cconv -> cconv
    val fun_cconv: cconv -> cconv
    val gconv_rule: cconv -> int -> thm -> thm
    val no_cconv: cconv
    val params_cconv:
       int -> (Proof.context -> cconv) -> Proof.context -> cconv
    val prems_cconv: int -> cconv -> cconv
    val rewr_cconv: thm -> cconv
    val rewrs_cconv: thm list -> cconv
    val then_cconv: cconv * cconv -> cconv
    val with_prems_cconv: int -> cconv -> cconv
  end
structure CConv: CCONV
structure Basic_CConv: BASIC_CCONV
val then_cconv = fn: cconv * cconv -> cconv
val CCONVERSION = fn: cconv -> int -> tactic
val else_cconv = fn: cconv * cconv -> cconv
Found termination order: "size_list size <*mlex*> {}"
infix 1 then_pconv
infix 0 else_pconv
signature REWRITE =
  sig
    val abs_pconv: patconv -> string option * typ -> patconv
    val all_pconv: patconv
    val arg_pconv: patconv -> patconv
    val asm_pconv: patconv -> patconv
    val asms_pconv: patconv -> patconv
    val concl_pconv: patconv -> patconv
    val else_pconv: patconv * patconv -> patconv
    val for_pconv: patconv -> (string option * typ option) list -> patconv
    val forall_pconv: patconv -> string option * typ option -> patconv
    val fun_pconv: patconv -> patconv
    val imp_pconv: patconv -> patconv
    val in_pconv: patconv -> patconv
    val judgment_pconv: patconv -> patconv
    val match_pconv: patconv -> term * (string option * typ) list -> patconv
    val mk_hole: int -> typ -> term
    val params_pconv: patconv -> patconv
    type patconv =
       Proof.context -> Type.tyenv * (string * term) list -> cconv
    datatype ('a, 'b) pattern
    = Asm | At | Concl | For of 'b list | In | Term of 'a
    val rewrite_conv:
       Proof.context ->
         (term * (string * typ) list, string * typ option) pattern list *
         term option
           -> thm list -> conv
    val rewrs_pconv: term option -> thm list -> patconv
    val then_pconv: patconv * patconv -> patconv
  end
structure Rewrite: REWRITE
### theory "HOL-Library.Rewrite"
### 0.205s elapsed time, 0.802s cpu time, 0.064s GC time
Loading theory "HOL-Library.Set_Algebras" (required by "Draft.DDSMoreTemplates" via "Draft.ExtrEqs" via "HOL-Library.BigO")
### theory "HOL-Library.Nat_Bijection"
### 0.340s elapsed time, 1.366s cpu time, 0.105s GC time
Loading theory "HOL-Library.Stream" (required by "Draft.DDSMoreTemplates" via "Draft.ExtrEqs")
instantiation
  set :: (plus) plus
  plus_set == plus :: 'a set => 'a set => 'a set
instantiation
  set :: (times) times
  times_set == times :: 'a set => 'a set => 'a set
instantiation
  set :: (zero) zero
  zero_set == zero_class.zero :: 'a set
instantiation
  set :: (one) one
  one_set == one_class.one :: 'a set
signature OLD_DATATYPE =
  sig
    val check_specs: spec list -> theory -> spec list * Proof.context
    type config = {quiet: bool, strict: bool}
    val default_config: config
    type descr =
       (int * (string * dtyp list * (string * dtyp list) list)) list
    val distinct_lemma: thm
    datatype dtyp
    = DtRec of int | DtTFree of string * sort | DtType of string * dtyp list
    type info =
       {case_cong: thm,
        case_cong_weak: thm,
        case_name: string,
        case_rewrites: thm list,
        descr: descr,
        distinct: thm list,
        exhaust: thm,
        index: int,
        induct: thm,
        inducts: thm list,
        inject: thm list,
        nchotomy: thm,
        rec_names: string list,
        rec_rewrites: thm list, split: thm, split_asm: thm}
    val read_specs: spec_cmd list -> theory -> spec list * Proof.context
    type spec =
       (binding * (string * sort) list * mixfix) *
       (binding * typ list * mixfix) list
    type spec_cmd =
       (binding * (string * string option) list * mixfix) *
       (binding * string list * mixfix) list
  end
structure Old_Datatype: OLD_DATATYPE
### theory "HOL-Library.Old_Datatype"
### 0.462s elapsed time, 1.841s cpu time, 0.187s GC time
Loading theory "HOL-Library.Tree" (required by "Draft.DDSMoreTemplates" via "Draft.ExtrEqs" via "Draft.Templates")
### theory "HOL-Library.Set_Algebras"
### 0.188s elapsed time, 0.742s cpu time, 0.083s GC time
Loading theory "HOL-Library.Countable" (required by "Draft.DDSMoreTemplates" via "Draft.DDS" via "HOL-Library.FSet")
### theory "HOL-Library.Phantom_Type"
### 0.562s elapsed time, 2.197s cpu time, 0.269s GC time
Loading theory "HOL-Library.Cardinality" (required by "Draft.DDSMoreTemplates" via "Draft.DDS" via "Draft.Concrete_Examples")
### Additional type variable(s) in locale specification "CARD_1": 'a
class CARD_1 = type +
  assumes "CARD_1": "CARD('a) = 1"
consts
  shift :: "'a list => 'a stream => 'a stream"
Proofs for coinductive predicate(s) "streamsp"
  Proving monotonicity ...
consts
  snth :: "'a stream => nat => 'a"
consts
  stake :: "nat => 'a stream => 'a list"
consts
  sdrop :: "nat => 'a stream => 'a stream"
### Additional type variable(s) in locale specification "card2": 'a
class card2 = finite +
  assumes "two_le_card": "2 <= CARD('a)"
consts
  sfilter :: "('a => bool) => 'a stream => 'a stream"
### Additional type variable(s) in locale specification "countable": 'a
consts
  cycle :: "'a list => 'a stream"
class finite_UNIV = type +
  fixes finite_UNIV :: "('a, bool) phantom"
  assumes "finite_UNIV": "finite_UNIV = Phantom('a) (finite UNIV)"
class countable = type +
  assumes "ex_inj": "EX to_nat. inj to_nat"
consts
  siterate :: "('a => 'a) => 'a => 'a stream"
consts
  left :: "'a tree => 'a tree"
consts
  right :: "'a tree => 'a tree"
class card_UNIV = finite_UNIV +
  fixes card_UNIV :: "('a, nat) phantom"
  assumes "card_UNIV": "card_UNIV_class.card_UNIV = Phantom('a) CARD('a)"
instantiation
  nat :: card_UNIV
  card_UNIV_nat == card_UNIV_class.card_UNIV :: (nat, nat) phantom
  finite_UNIV_nat == finite_UNIV :: (nat, bool) phantom
instantiation
  int :: card_UNIV
  card_UNIV_int == card_UNIV_class.card_UNIV :: (int, nat) phantom
  finite_UNIV_int == finite_UNIV :: (int, bool) phantom
instantiation
  natural :: card_UNIV
  card_UNIV_natural == card_UNIV_class.card_UNIV :: (natural, nat) phantom
  finite_UNIV_natural == finite_UNIV :: (natural, bool) phantom
consts
  flat :: "'a list stream => 'a stream"
instantiation
  integer :: card_UNIV
  card_UNIV_integer == card_UNIV_class.card_UNIV :: (integer, nat) phantom
  finite_UNIV_integer == finite_UNIV :: (integer, bool) phantom
Found termination order: "size <*mlex*> {}"
instantiation
  list :: (type) card_UNIV
  card_UNIV_list == card_UNIV_class.card_UNIV :: ('a list, nat) phantom
  finite_UNIV_list == finite_UNIV :: ('a list, bool) phantom
instantiation
  unit :: card_UNIV
  card_UNIV_unit == card_UNIV_class.card_UNIV :: (unit, nat) phantom
  finite_UNIV_unit == finite_UNIV :: (unit, bool) phantom
instantiation
  bool :: card_UNIV
  card_UNIV_bool == card_UNIV_class.card_UNIV :: (bool, nat) phantom
  finite_UNIV_bool == finite_UNIV :: (bool, bool) phantom
consts
  sinterleave :: "'a stream => 'a stream => 'a stream"
instantiation
  char :: card_UNIV
  card_UNIV_char == card_UNIV_class.card_UNIV :: (char, nat) phantom
  finite_UNIV_char == finite_UNIV :: (char, bool) phantom
instantiation
  prod :: (finite_UNIV, finite_UNIV) finite_UNIV
  finite_UNIV_prod == finite_UNIV :: ('a * 'b, bool) phantom
consts
  szip :: "'a stream => 'b stream => ('a * 'b) stream"
instantiation
  prod :: (card_UNIV, card_UNIV) card_UNIV
  card_UNIV_prod == card_UNIV_class.card_UNIV :: ('a * 'b, nat) phantom
Found termination order: "size <*mlex*> {}"
instantiation
  sum :: (finite_UNIV, finite_UNIV) finite_UNIV
  finite_UNIV_sum == finite_UNIV :: ('a + 'b, bool) phantom
instantiation
  sum :: (card_UNIV, card_UNIV) card_UNIV
  card_UNIV_sum == card_UNIV_class.card_UNIV :: ('a + 'b, nat) phantom
instantiation
  fun :: (finite_UNIV, card_UNIV) finite_UNIV
  finite_UNIV_fun == finite_UNIV :: ('a => 'b, bool) phantom
Proofs for inductive predicate(s) "finite_item"
consts
  smap2 :: "('a => 'b => 'c) => 'a stream => 'b stream => 'c stream"
  Proving monotonicity ...
instantiation
  fun :: (card_UNIV, card_UNIV) card_UNIV
  card_UNIV_fun == card_UNIV_class.card_UNIV :: ('a => 'b, nat) phantom
instantiation
  option :: (finite_UNIV) finite_UNIV
  finite_UNIV_option == finite_UNIV :: ('a option, bool) phantom
instantiation
  option :: (card_UNIV) card_UNIV
  card_UNIV_option == card_UNIV_class.card_UNIV :: ('a option, nat) phantom
### theory "HOL-Library.Stream"
### 1.047s elapsed time, 3.930s cpu time, 0.846s GC time
Loading theory "HOL-Library.BigO" (required by "Draft.DDSMoreTemplates" via "Draft.ExtrEqs")
instantiation
  String.literal :: card_UNIV
  card_UNIV_literal == card_UNIV_class.card_UNIV ::
    (String.literal, nat) phantom
  finite_UNIV_literal == finite_UNIV :: (String.literal, bool) phantom
instantiation
  set :: (finite_UNIV) finite_UNIV
  finite_UNIV_set == finite_UNIV :: ('a set, bool) phantom
Found termination order: "size <*mlex*> {}"
instantiation
  set :: (card_UNIV) card_UNIV
  card_UNIV_set == card_UNIV_class.card_UNIV :: ('a set, nat) phantom
instantiation
  Enum.finite_1 :: card_UNIV
  card_UNIV_finite_1 == card_UNIV_class.card_UNIV ::
    (Enum.finite_1, nat) phantom
  finite_UNIV_finite_1 == finite_UNIV :: (Enum.finite_1, bool) phantom
instantiation
  Enum.finite_2 :: card_UNIV
  card_UNIV_finite_2 == card_UNIV_class.card_UNIV ::
    (Enum.finite_2, nat) phantom
  finite_UNIV_finite_2 == finite_UNIV :: (Enum.finite_2, bool) phantom
class height = type +
  fixes height :: "'a => nat"
instantiation
  tree :: (type) height
  height_tree == height :: 'a tree => nat
instantiation
  Enum.finite_3 :: card_UNIV
  card_UNIV_finite_3 == card_UNIV_class.card_UNIV ::
    (Enum.finite_3, nat) phantom
  finite_UNIV_finite_3 == finite_UNIV :: (Enum.finite_3, bool) phantom
instantiation
  Enum.finite_4 :: card_UNIV
  card_UNIV_finite_4 == card_UNIV_class.card_UNIV ::
    (Enum.finite_4, nat) phantom
  finite_UNIV_finite_4 == finite_UNIV :: (Enum.finite_4, bool) phantom
instantiation
  Enum.finite_5 :: card_UNIV
  card_UNIV_finite_5 == card_UNIV_class.card_UNIV ::
    (Enum.finite_5, nat) phantom
  finite_UNIV_finite_5 == finite_UNIV :: (Enum.finite_5, bool) phantom
### theory "HOL-Library.Cardinality"
### 0.910s elapsed time, 3.409s cpu time, 0.745s GC time
Loading theory "Draft.Concrete_Examples" (required by "Draft.DDSMoreTemplates" via "Draft.DDS")
val old_countable_datatype_tac = fn: Proof.context -> int -> tactic
Found termination order: "size <*mlex*> {}"
### ML warning (line 93 of "~~/src/HOL/Tools/BNF/bnf_lfp_countable.ML"):
### Pattern is not exhaustive.
### ML warning (line 139 of "~~/src/HOL/Tools/BNF/bnf_lfp_countable.ML"):
### Pattern is not exhaustive.
### ML warning (line 143 of "~~/src/HOL/Tools/BNF/bnf_lfp_countable.ML"):
### Matches are not exhaustive.
### ML warning (line 145 of "~~/src/HOL/Tools/BNF/bnf_lfp_countable.ML"):
### Matches are not exhaustive.
### ML warning (line 156 of "~~/src/HOL/Tools/BNF/bnf_lfp_countable.ML"):
### Pattern is not exhaustive.
signature BNF_LFP_COUNTABLE =
  sig
    val countable_datatype_tac: Proof.context -> tactic
    val derive_encode_injectives_thms:
       Proof.context -> string list -> thm list
  end
structure BNF_LFP_Countable: BNF_LFP_COUNTABLE
Found termination order: "size <*mlex*> {}"
val countable_datatype_tac = fn: Proof.context -> thm -> thm Seq.seq
val countable_tac = fn: Proof.context -> int -> tactic
Found termination order: "size <*mlex*> {}"
Found termination order: "size <*mlex*> {}"
Found termination order: "size <*mlex*> {}"
### theory "HOL-Library.Countable"
### 1.349s elapsed time, 5.146s cpu time, 0.876s GC time
Loading theory "HOL-Library.FSet" (required by "Draft.DDSMoreTemplates" via "Draft.DDS")
Found termination order: "size <*mlex*> {}"
Found termination order: "size <*mlex*> {}"
instantiation
  fset :: (finite) finite
instantiation
  fset :: (type) {minus,bounded_lattice_bot,distrib_lattice}
  inf_fset == inf :: 'a fset => 'a fset => 'a fset
  bot_fset == bot :: 'a fset
  sup_fset == sup :: 'a fset => 'a fset => 'a fset
  less_eq_fset == less_eq :: 'a fset => 'a fset => bool
  less_fset == less :: 'a fset => 'a fset => bool
  minus_fset == minus :: 'a fset => 'a fset => 'a fset
Found termination order: "(%p. size (fst p)) <*mlex*> {}"
instantiation
  fset :: (equal) equal
  equal_fset == equal_class.equal :: 'a fset => 'a fset => bool
instantiation
  fset :: (type) conditionally_complete_lattice
  Inf_fset == Inf :: 'a fset set => 'a fset
  Sup_fset == Sup :: 'a fset set => 'a fset
Found termination order: "size <*mlex*> {}"
instantiation
  fset :: (finite) complete_lattice
  top_fset == top :: 'a fset
specification
  rel_pred2_witness1: [| rel_pred2_neg_distr_cond ?K ?K'; rel_pred (rel_pred (?K OO ?K')) ?x ?y |]
==> rel_pred (rel_pred ?K) ?x (rel_pred2_witness ?K ?K' (?x, ?y))
  rel_pred2_witness2: [| rel_pred2_neg_distr_cond ?K ?K'; rel_pred (rel_pred (?K OO ?K')) ?x ?y |]
==> rel_pred (rel_pred ?K') (rel_pred2_witness ?K ?K' (?x, ?y)) ?y
instantiation
  fset :: (finite) complete_boolean_algebra
  uminus_fset == uminus :: 'a fset => 'a fset
Found termination order: "(%p. size (snd p)) <*mlex*> {}"
locale experiment5426294
### theory "HOL-Library.BigO"
### 0.854s elapsed time, 3.361s cpu time, 0.298s GC time
range (?f o ?v) = ?f ` range ?v
(!!z. z : range ?x ==> ?f z = ?g z) ==> ?f o ?x = ?g o ?x
[| ((=) ===> ?R) ?x ?y;
   !!z yb. [| z : range ?x; yb : range ?y; ?R z yb |] ==> ?Ra z yb |]
==> ((=) ===> ?Ra) ?x ?y
Proofs for inductive predicate(s) "aeseq_eq"
  Proving monotonicity ...
### theory "Draft.Concrete_Examples"
### 0.888s elapsed time, 3.337s cpu time, 0.288s GC time
Found termination order: "size <*mlex*> {}"
### theory "HOL-Library.Tree"
### 2.184s elapsed time, 7.891s cpu time, 1.158s GC time
Loading theory "Draft.Templates" (required by "Draft.DDSMoreTemplates" via "Draft.ExtrEqs")
datatype template_term
=
     t_empty
   | template_app of template_term * template_term
   | template_hole of int
   | template_var of int
datatype sign
= equals | greater_equals | greater_than | less_equals | less_than
datatype template
=
     template_bimplication of template * template
   | template_dunno
   | template_equation of template_term * template_term
   | template_implication of template list * template
   | template_inequation of sign * template_term * template_term
   | template_negation of template
   | template_predicate of template_term
constructor t_empty: template_term
constructor template_app: template_term * template_term -> template_term
constructor template_hole: int -> template_term
constructor template_var: int -> template_term
constructor equals: sign
constructor greater_equals: sign
constructor greater_than: sign
constructor less_equals: sign
constructor less_than: sign
constructor template_bimplication: template * template -> template
constructor template_dunno: template
constructor template_equation: template_term * template_term -> template
constructor template_implication: template list * template -> template
constructor template_inequation:
   sign * template_term * template_term -> template
constructor template_negation: template -> template
constructor template_predicate: template_term -> template
val vfs = fn: term -> (indexname * typ) list * (string * typ) list
val indexOf = fn: ''a list -> ''a -> int -> int
val has_eq = fn: term -> bool
val term2template = fn:
   (indexname * typ) list -> (string * typ) list -> term -> template_term
val lemma2predicate = fn: term -> term -> template
val makeTemplatewithContext = fn: term -> term -> template
val lemma2template = fn: term -> template
val thm2template = fn: thm -> template
val tterm2string = fn: template_term -> string
val template2string = fn: template -> string
val t = "height ?t <= size ?t": thm
val th =
   Const ("HOL.Trueprop", "bool => prop") $
     (Const ("Orderings.ord_class.less_eq", "nat => nat => bool") $
       (Const ("Tree.height_class.height", "?'a tree => nat") $
         Var (("t", 0), "?'a tree")) $
       (Const ("Nat.size_class.size", "?'a tree => nat") $
         Var (("t", 0), "?'a tree"))):
   term
### theory "Draft.Templates"
### 0.059s elapsed time, 0.138s cpu time, 0.000s GC time
Loading theory "Draft.ExtrEqs" (required by "Draft.DDSMoreTemplates")
val eqpattern =
   Pattern
    (
       Const ("HOL.Trueprop", "bool => prop") $
         (Const ("HOL.eq", "?'a => ?'a => bool") $
           Var (("_dummy_", 1), "?'a") $ Var (("_dummy_", 2), "?'a"))
       ):
   term Find_Theorems.criterion
val badeqpattern = Pattern (Const ("Pure.eq", "?'a => ?'a => prop")):
   term Find_Theorems.criterion
val undefpattern =
   Pattern
    (
       Const ("HOL.Trueprop", "bool => prop") $
         (Const ("HOL.eq", "?'a => ?'a => bool") $
           Var (("_dummy_", 1), "?'a") $ Const ("HOL.undefined", "?'a"))
       ):
   term Find_Theorems.criterion
val thmpattern =
   Pattern
    (Const ("HOL.Trueprop", "bool => prop") $ Var (("_dummy_", 1), "bool")):
   term Find_Theorems.criterion
val badnames =
   ["*nitpick*", "*Nitpick*", "*full_exhaustive*", "*_def*", "Enum.finite*",
    "*Quickcheck*", "ATP*", "*Nunchaku*", "*Code*", "*BNF*", "*SMT*",
    "*.*.*"]:
   string list
val unwanted_names =
   [(false, Name "*nitpick*"), (false, Name "*Nitpick*"),
    (false, Name "*full_exhaustive*"), (false, Name "*_def*"),
    (false, Name "Enum.finite*"), (false, Name "*Quickcheck*"),
    (false, Name "ATP*"), (false, Name "*Nunchaku*"),
    (false, Name "*Code*"), (false, Name "*BNF*"), (false, Name "*SMT*"),
    (false, Name "*.*.*")]:
   (bool * term Find_Theorems.criterion) list
val has_vars = fn: term -> bool
val get_all_eqs = fn: string -> Proof.context -> (string * thm) list
val get_all_thms = fn: string -> Proof.context -> (string * thm) list
val get_noneq_thms = fn: string -> Proof.context -> (string * thm) list
val template_eqs = fn:
   string -> Proof.context -> (string * thm * template) list
val template_thms = fn:
   string -> Proof.context -> (string * thm * template) list
### theory "Draft.ExtrEqs"
### 0.534s elapsed time, 1.104s cpu time, 0.080s GC time
locale comp_fun_commute
  fixes f :: "'a => 'b => 'b"
  assumes "comp_fun_commute f"
locale comp_fun_idem
  fixes f :: "'a => 'b => 'b"
  assumes "comp_fun_idem f"
locale comm_monoid_fset
  fixes f :: "'a => 'a => 'a"  (infixl \<open>\<^bold>*\<close> 70)
    and z :: "'a"  (\<open>\<^bold>1\<close>)
  assumes "comm_monoid_fset (\<^bold>*) \<^bold>1"
class comm_monoid_add = ab_semigroup_add + monoid_add +
  assumes "add_0": "!!a. (0::'a) + a = a"
### Cannot skip proof of schematic goal statement
locale semilattice_fset
  fixes f :: "'a => 'a => 'a"  (infixl \<open>\<^bold>*\<close> 70)
  assumes "semilattice_fset (\<^bold>*)"
locale semilattice_order_fset
  fixes f :: "'a => 'a => 'a"  (infixl \<open>\<^bold>*\<close> 70)
    and
    less_eq :: "'a => 'a => bool"  (infix \<open>\<^bold>\<le>\<close> 50)
    and less :: "'a => 'a => bool"  (infix \<open>\<^bold><\<close> 50)
  assumes "semilattice_order_fset (\<^bold>*) (\<^bold>\<le>) (\<^bold><)"
class linorder = order +
  assumes "linear": "!!x y. x <= y | y <= x"
class linorder = order +
  assumes "linear": "!!x y. x <= y | y <= x"
instantiation
  fset :: (type) size
  size_fset == size :: 'a fset => nat
instantiation
  fset :: (exhaustive) exhaustive
  exhaustive_fset == exhaustive_class.exhaustive ::
    ('a fset => (bool * term list) option)
    => natural => (bool * term list) option
Found termination order: "(%p. nat_of_natural (snd p)) <*mlex*> {}"
instantiation
  fset :: (full_exhaustive) full_exhaustive
  full_exhaustive_fset == full_exhaustive_class.full_exhaustive ::
    ('a fset * (unit => term) => (bool * term list) option)
    => natural => (bool * term list) option
Found termination order: "(%p. nat_of_natural (snd p)) <*mlex*> {}"
instantiation
  fset :: (random) random
  random_fset == random_class.random ::
    natural
    => natural * natural => ('a fset * (unit => term)) * natural * natural
### Additional type variable(s) in specification of "random_aux_fset_rel": 'a
### Additional type variable(s) in specification of "random_aux_fset_dom": 'a
Found termination order: "(%p. nat_of_natural (fst p)) <*mlex*> {}"
### theory "HOL-Library.FSet"
### 2.223s elapsed time, 4.607s cpu time, 0.442s GC time
Loading theory "Draft.DDS" (required by "Draft.DDSMoreTemplates")
consts
  map_dds :: "('a' => 'a) => ('b => 'b') => ('a, 'b) dds => ('a', 'b') dds"
Proofs for coinductive predicate(s) "rel_dds"
  Proving monotonicity ...
consts
  dds_of :: "('s => 'a => 'b * 's) => 's => ('a, 'b) dds"
consts
  compose :: "('a, 'b) dds => ('b, 'c) dds => ('a, 'c) dds"
consts
  parallel :: "('a, 'b) dds => ('c, 'd) dds => ('a + 'c, 'b + 'd) dds"
### theory "Draft.DDS"
### 0.791s elapsed time, 0.875s cpu time, 0.091s GC time
Loading theory "Draft.DDSMoreTemplates"
val templateLemmas =
   [("DDS.rel_dds'_rel_dds", "rel_dds' ?B = rel_dds (=) ?B",
     template_implication
      ([template_predicate
         (template_app (template_hole 2, template_var 0))],
       template_predicate
        (
           template_app
            (template_app (template_hole 1, template_hole 0),
             template_var 0)
           ))),
    ("DDS.map_dds_id", "map_dds id id ?S = ?S",
     template_equation
      (template_app
        (template_app
          (template_app (template_hole 2, template_hole 1),
           template_hole 0),
         template_var 0),
       template_var 0)),
    ("DDS.fset_of_list_parametric",
     "(list_all2 ?A ===> rel_fset ?A) fset_of_list fset_of_list",
     template_predicate
      (
         template_app
          (template_app
            (template_app
              (template_app
                (template_hole 4,
                 template_app (template_hole 3, template_var 0)),
               template_app (template_hole 2, template_var 0)),
             template_hole 1),
           template_hole 0)
         )),
    ("DDS.rel_dds_conversep", "rel_dds ?A^--1 ?B^--1 = (rel_dds ?A ?B)^--1",
     template_equation
      (template_app
        (template_app
          (template_hole 4, template_app (template_hole 3, template_var 1)),
         template_app (template_hole 2, template_var 0)),
       template_app
        (template_hole 1,
         template_app
          (template_app (template_hole 0, template_var 1),
           template_var 0)))),
    ("DDS.DDS_parametric",
     "((?A ===> rel_prod ?B (rel_dds ?A ?B)) ===> rel_dds ?A ?B) DDS DDS",
     template_predicate
      (
         template_app
          (template_app
            (template_app
              (template_app
                (template_hole 5,
                 template_app
                  (template_app (template_hole 4, template_var 1),
                   template_app
                    (template_app (template_hole 3, template_var 0),
                     template_app
                      (template_app (template_hole 2, template_var 1),
                       template_var 0)))),
               template_app
                (template_app (template_hole 2, template_var 1),
                 template_var 0)),
             template_hole 1),
           template_hole 0)
         )),
    ("DDS.run_parametric",
     "(rel_dds ?A ?B ===> ?A ===> rel_prod ?B (rel_dds ?A ?B)) run run",
     template_predicate
      (
         template_app
          (template_app
            (template_app
              (template_app
                (template_hole 5,
                 template_app
                  (template_app (template_hole 4, template_var 1),
                   template_var 0)),
               template_app
                (template_app (template_hole 3, template_var 1),
                 template_app
                  (template_app (template_hole 2, template_var 0),
                   template_app
                    (template_app (template_hole 4, template_var 1),
                     template_var 0)))),
             template_hole 1),
           template_hole 0)
         )),
    ("DDS.compose_parametric",
     "(rel_dds ?A ?B ===> rel_dds ?B ?C ===> rel_dds ?A ?C) (\<bullet>)
       (\<bullet>)",
     template_predicate
      (
         template_app
          (template_app
            (template_app
              (template_app
                (template_hole 6,
                 template_app
                  (template_app (template_hole 5, template_var 2),
                   template_var 1)),
               template_app
                (template_app
                  (template_hole 4,
                   template_app
                    (template_app (template_hole 3, template_var 1),
                     template_var 0)),
                 template_app
                  (template_app (template_hole 2, template_var 2),
                   template_var 0))),
             template_hole 1),
           template_hole 0)
         )),
    ("DDS.rel_dds_Grp",
     "rel_dds (Grp UNIV ?f)^--1 (Grp UNIV ?g) = Grp UNIV (map_dds ?f ?g)",
     template_equation
      (template_app
        (template_app
          (template_hole 8,
           template_app
            (template_hole 7,
             template_app
              (template_app (template_hole 6, template_hole 5),
               template_var 1))),
         template_app
          (template_app (template_hole 4, template_hole 3),
           template_var 0)),
       template_app
        (template_app (template_hole 2, template_hole 1),
         template_app
          (template_app (template_hole 0, template_var 1),
           template_var 0)))),
    ("DDS.fImage_iff",
     "(?b |\<in>| fImage ?r ?A) = fBex ?A (%x. (x, ?b) |\<in>| ?r)",
     template_equation
      (template_app
        (template_app (template_hole 4, template_var 2),
         template_app
          (template_app (template_hole 3, template_var 1), template_var 0)),
       template_app
        (template_app (template_hole 2, template_var 0), t_empty))),
    ("DDS.dds_of_parametric",
     "((?S ===> ?A ===> rel_prod ?B ?S) ===> ?S ===> rel_dds ?A ?B) dds_of
       dds_of",
     template_predicate
      (
         template_app
          (template_app
            (template_app
              (template_app
                (template_hole 7,
                 template_app
                  (template_app (template_hole 6, template_var 2),
                   template_app
                    (template_app (template_hole 5, template_var 1),
                     template_app
                      (template_app (template_hole 4, template_var 0),
                       template_var 2)))),
               template_app
                (template_app (template_hole 3, template_var 2),
                 template_app
                  (template_app (template_hole 2, template_var 1),
                   template_var 0))),
             template_hole 1),
           template_hole 0)
         )),
    ("DDS.rel_dds_pos_distr",
     "rel_dds ?A ?B OO rel_dds ?C ?D <= rel_dds (?A OO ?C) (?B OO ?D)",
     template_inequation
      (less_equals,
       template_app
        (template_app
          (template_hole 5,
           template_app
            (template_app (template_hole 4, template_var 3),
             template_var 2)),
         template_app
          (template_app (template_hole 3, template_var 1), template_var 0)),
       template_app
        (template_app
          (template_hole 2,
           template_app
            (template_app (template_hole 1, template_var 3),
             template_var 1)),
         template_app
          (template_app (template_hole 0, template_var 2),
           template_var 0)))),
    ("DDS.map_dds_comp",
     "map_dds ?f ?g (map_dds ?f' ?g' ?S) =
      map_dds (?f' o ?f) (?g o ?g') ?S",
     template_equation
      (template_app
        (template_app
          (template_app (template_hole 4, template_var 4), template_var 3),
         template_app
          (template_app
            (template_app (template_hole 3, template_var 2),
             template_var 1),
           template_var 0)),
       template_app
        (template_app
          (template_app
            (template_hole 2,
             template_app
              (template_app (template_hole 1, template_var 2),
               template_var 4)),
           template_app
            (template_app (template_hole 0, template_var 3),
             template_var 1)),
         template_var 0))),
    ("DDS.compose_map2",
     "?S1.0 \<bullet> map_dds ?f ?g ?S2.0 =
      map_dds id ?g (map_dds id ?f ?S1.0 \<bullet> ?S2.0)",
     template_equation
      (template_app
        (template_app (template_hole 5, template_var 3),
         template_app
          (template_app
            (template_app (template_hole 4, template_var 2),
             template_var 1),
           template_var 0)),
       template_app
        (template_app
          (template_app (template_hole 3, template_hole 2), template_var 1),
         template_app
          (template_app
            (template_hole 1,
             template_app
              (template_app
                (template_app (template_hole 0, template_hole 2),
                 template_var 2),
               template_var 3)),
           template_var 0)))),
    ("DDS.compose_map1",
     "map_dds ?f ?g ?S1.0 \<bullet> ?S2.0 =
      map_dds ?f id (?S1.0 \<bullet> map_dds ?g id ?S2.0)",
     template_equation
      (template_app
        (template_app
          (template_hole 5,
           template_app
            (template_app
              (template_app (template_hole 4, template_var 3),
               template_var 2),
             template_var 1)),
         template_var 0),
       template_app
        (template_app
          (template_app (template_hole 3, template_var 3), template_hole 2),
         template_app
          (template_app (template_hole 1, template_var 1),
           template_app
            (template_app
              (template_app (template_hole 0, template_var 2),
               template_hole 2),
             template_var 0))))),
    ("DDS.traverse_impl_parametric",
     "bi_unique ?A ==>
      (list_all2 (rel_prod ?A ?A) ===>
       rel_dds (list_all2 ?A) (list_all2 ?A))
       traverse_impl traverse_impl",
     template_implication
      ([template_predicate
         (template_app (template_hole 7, template_var 0))],
       template_predicate
        (
           template_app
            (template_app
              (template_app
                (template_app
                  (template_hole 6,
                   template_app
                    (template_hole 5,
                     template_app
                      (template_app (template_hole 4, template_var 0),
                       template_var 0))),
                 template_app
                  (template_app
                    (template_hole 3,
                     template_app (template_hole 2, template_var 0)),
                   template_app (template_hole 2, template_var 0))),
               template_hole 1),
             template_hole 0)
           ))),
    ("DDS.map_dds_parametric",
     "((?A' ===> ?A) ===>
       (?B ===> ?B') ===> rel_dds ?A ?B ===> rel_dds ?A' ?B')
       map_dds map_dds",
     template_predicate
      (
         template_app
          (template_app
            (template_app
              (template_app
                (template_hole 8,
                 template_app
                  (template_app (template_hole 7, template_var 3),
                   template_var 2)),
               template_app
                (template_app
                  (template_hole 6,
                   template_app
                    (template_app (template_hole 5, template_var 1),
                     template_var 0)),
                 template_app
                  (template_app
                    (template_hole 4,
                     template_app
                      (template_app (template_hole 3, template_var 2),
                       template_var 1)),
                   template_app
                    (template_app (template_hole 2, template_var 3),
                     template_var 0)))),
             template_hole 1),
           template_hole 0)
         )),
    ("DDS.parallel_parametric",
     "(rel_dds ?A ?B ===>
       rel_dds ?C ?D ===> rel_dds (rel_sum ?A ?C) (rel_sum ?B ?D))
       (\<parallel>) (\<parallel>)",
     template_predicate
      (
         template_app
          (template_app
            (template_app
              (template_app
                (template_hole 8,
                 template_app
                  (template_app (template_hole 7, template_var 3),
                   template_var 2)),
               template_app
                (template_app
                  (template_hole 6,
                   template_app
                    (template_app (template_hole 5, template_var 1),
                     template_var 0)),
                 template_app
                  (template_app
                    (template_hole 4,
                     template_app
                      (template_app (template_hole 3, template_var 3),
                       template_var 1)),
                   template_app
                    (template_app (template_hole 2, template_var 2),
                     template_var 0)))),
             template_hole 1),
           template_hole 0)
         )),
    ("DDS.rev_fImageI",
     "[| ?a |\<in>| ?A; (?a, ?b) |\<in>| ?r |] ==> ?b |\<in>| fImage ?r ?A",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 4, template_var 3),
              template_var 2)
            ),
        template_predicate
         (
            template_app
             (template_app
               (template_hole 3,
                template_app
                 (template_app (template_hole 2, template_var 3),
                  template_var 1)),
              template_var 0)
            )],
       template_predicate
        (
           template_app
            (template_app (template_hole 1, template_var 1),
             template_app
              (template_app (template_hole 0, template_var 0),
               template_var 2))
           ))),
    ("DDS.rel_dds_mono",
     "[| ?A' <= ?A; ?B <= ?B' |] ==> rel_dds ?A ?B <= rel_dds ?A' ?B'",
     template_implication
      ([template_inequation (less_equals, template_var 3, template_var 2),
        template_inequation (less_equals, template_var 1, template_var 0)],
       template_inequation
        (less_equals,
         template_app
          (template_app (template_hole 0, template_var 2), template_var 1),
         template_app
          (template_app (template_hole 0, template_var 3),
           template_var 0)))),
    ("DDS.fImage_mono",
     "[| ?r' |\<subseteq>| ?r; ?A' |\<subseteq>| ?A |]
      ==> fImage ?r' ?A' |\<subseteq>| fImage ?r ?A",
     template_implication
      ([template_inequation (less_equals, template_var 3, template_var 2),
        template_inequation (less_equals, template_var 1, template_var 0)],
       template_inequation
        (less_equals,
         template_app
          (template_app (template_hole 0, template_var 3), template_var 1),
         template_app
          (template_app (template_hole 0, template_var 2),
           template_var 0)))),
    ("DDS.fImageI",
     "[| (?a, ?b) |\<in>| ?r; ?a |\<in>| ?A |] ==> ?b |\<in>| fImage ?r ?A",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_hole 4,
                template_app
                 (template_app (template_hole 3, template_var 3),
                  template_var 2)),
              template_var 1)
            ),
        template_predicate
         (
            template_app
             (template_app (template_hole 2, template_var 3),
              template_var 0)
            )],
       template_predicate
        (
           template_app
            (template_app (template_hole 1, template_var 2),
             template_app
              (template_app (template_hole 0, template_var 1),
               template_var 0))
           ))),
    ("DDS.corec_dds_parametric",
     "((?S ===> ?A ===> rel_prod ?B (rel_sum (rel_dds ?A ?B) ?S)) ===>
       ?S ===> rel_dds ?A ?B)
       corec_dds corec_dds",
     template_predicate
      (
         template_app
          (template_app
            (template_app
              (template_app
                (template_hole 8,
                 template_app
                  (template_app (template_hole 7, template_var 2),
                   template_app
                    (template_app (template_hole 6, template_var 1),
                     template_app
                      (template_app (template_hole 5, template_var 0),
                       template_app
                        (template_app
                          (template_hole 4,
                           template_app
                            (template_app (template_hole 3, template_var 1),
                             template_var 0)),
                         template_var 2))))),
               template_app
                (template_app (template_hole 2, template_var 2),
                 template_app
                  (template_app (template_hole 3, template_var 1),
                   template_var 0))),
             template_hole 1),
           template_hole 0)
         )),
    ("DDS.map_parallel",
     "map_dds ?f ?h ?S1.0 \<parallel> map_dds ?g ?k ?S2.0 =
      map_dds (map_sum ?f ?g) (map_sum ?h ?k) (?S1.0 \<parallel> ?S2.0)",
     template_equation
      (template_app
        (template_app
          (template_hole 6,
           template_app
            (template_app
              (template_app (template_hole 5, template_var 5),
               template_var 4),
             template_var 3)),
         template_app
          (template_app
            (template_app (template_hole 4, template_var 2),
             template_var 1),
           template_var 0)),
       template_app
        (template_app
          (template_app
            (template_hole 3,
             template_app
              (template_app (template_hole 2, template_var 5),
               template_var 2)),
           template_app
            (template_app (template_hole 1, template_var 4),
             template_var 1)),
         template_app
          (template_app (template_hole 0, template_var 3),
           template_var 0)))),
    ("DDS.finite_Image",
     "finite ?A ==>
      finite (?R `` ?A) = (ALL x:?A. finite {y. (x, y) : ?R})",
     template_implication
      ([template_predicate
         (template_app (template_hole 7, template_var 1))],
       template_equation
        (template_app
          (template_hole 5,
           template_app
            (template_app (template_hole 4, template_var 0),
             template_var 1)),
         template_app
          (template_app (template_hole 3, template_var 1), t_empty)))),
    ("DDS.fImageE",
     "[| ?b |\<in>| fImage ?r ?A;
         !!x. [| (x, ?b) |\<in>| ?r; x |\<in>| ?A |] ==> ?P |]
      ==> ?P",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 5, template_var 3),
              template_app
               (template_app (template_hole 4, template_var 2),
                template_var 1))
            ),
        template_predicate (template_app (template_hole 3, t_empty))],
       template_predicate (template_var 0))),
    ("DDS.Quotient_dds",
     "[| Quotient ?R1.0 ?Abs1.0 ?Rep1.0 ?T1.0;
         Quotient ?R2.0 ?Abs2.0 ?Rep2.0 ?T2.0 |]
      ==> Quotient (rel_dds ?R1.0 ?R2.0) (map_dds ?Rep1.0 ?Abs2.0)
           (map_dds ?Abs1.0 ?Rep2.0) (rel_dds ?T1.0 ?T2.0)",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_app (template_hole 6, template_var 7),
                  template_var 6),
                template_var 5),
              template_var 4)
            ),
        template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_app (template_hole 5, template_var 3),
                  template_var 2),
                template_var 1),
              template_var 0)
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_app
                (template_app
                  (template_hole 4,
                   template_app
                    (template_app (template_hole 3, template_var 7),
                     template_var 3)),
                 template_app
                  (template_app (template_hole 2, template_var 5),
                   template_var 2)),
               template_app
                (template_app (template_hole 1, template_var 6),
                 template_var 1)),
             template_app
              (template_app (template_hole 0, template_var 4),
               template_var 0))
           ))),
    ("DDS.map_dds_rel_cong",
     "[| rel_dds ?A ?B ?xb ?yb; !!x y. ?A' x y ==> ?A (?x x) (?y y);
         !!x y. ?B x y ==> ?B' (?xa x) (?ya y) |]
      ==> rel_dds ?A' ?B' (map_dds ?x ?xa ?xb) (map_dds ?y ?ya ?yb)",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_app (template_hole 7, template_var 9),
                  template_var 8),
                template_var 7),
              template_var 6)
            ),
        template_predicate (template_app (template_hole 6, t_empty)),
        template_predicate (template_app (template_hole 4, t_empty))],
       template_predicate
        (
           template_app
            (template_app
              (template_app
                (template_app (template_hole 2, template_var 5),
                 template_var 2),
               template_app
                (template_app
                  (template_app (template_hole 1, template_var 4),
                   template_var 1),
                 template_var 7)),
             template_app
              (template_app
                (template_app (template_hole 0, template_var 3),
                 template_var 0),
               template_var 6))
           )))]:
   (string * thm * template) list
### theory "Draft.DDSMoreTemplates"
### 0.378s elapsed time, 0.526s cpu time, 0.043s GC time
val it = (): unit
