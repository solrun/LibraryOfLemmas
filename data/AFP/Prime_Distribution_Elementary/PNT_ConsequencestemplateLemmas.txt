   [("PNT_Consequences.ln_gt_1", "3 < ?x ==> 1 < ln ?x",
     template_implication
      ([template_inequation
         (less_than,
          template_app
           (template_hole 4,
            template_app (template_hole 3, template_hole 2)),
          template_var 0)],
       template_inequation
        (less_than, template_hole 1,
         template_app (template_hole 0, template_var 0)))),
    ("PNT_Consequences.totient_lower_bound",
     "0 < ?\<epsilon> ==>
      \<forall>\<^sub>F n in sequentially.
         (1 - ?\<epsilon>) * third_mertens_const * real n / ln (ln (real n))
         < real (totient n)",
     template_implication
      ([template_inequation (less_than, template_hole 10, template_var 0)],
       template_predicate
        (
           template_app
            (template_app (template_hole 9, t_empty), template_hole 0)
           ))),
    ("PNT_Consequences.divisor_count_upper_bound",
     "0 < ?\<epsilon> ==>
      \<forall>\<^sub>F n in sequentially.
         real (divisor_count n)
         < 2 powr ((1 + ?\<epsilon>) * ln (real n) / ln (ln (real n)))",
     template_implication
      ([template_inequation (less_than, template_hole 13, template_var 0)],
       template_predicate
        (
           template_app
            (template_app (template_hole 12, t_empty), template_hole 0)
           ))),
    ("PNT_Consequences.mertens_third_convert",
     "0 < ?n ==>
      (PROD k<?n. 1 - 1 / real (nth_prime k)) =
      (PROD x:{p. prime p & p <= nth_prime (?n - 1)}. 1 - 1 / real x)",
     template_implication
      ([template_inequation (less_than, template_hole 14, template_var 0)],
       template_equation
        (template_app
          (template_app (template_hole 12, t_empty),
           template_app (template_hole 6, template_var 0)),
         template_app
          (template_app (template_hole 12, t_empty),
           template_app (template_hole 5, t_empty))))),
    ("PNT_Consequences.divisor_count_bound_gen",
     "\<forall>\<^sub>F n in sequentially. 2 <= ?f n ==>
      \<forall>\<^sub>F n in sequentially.
         real (divisor_count n)
         < 2 powr
           ((ln (real n) + 8 / ln 2 * ?f n * ln (ln (real n))) /
            ln (?f n))",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 13, t_empty), template_hole 8)
            )],
       template_predicate
        (
           template_app
            (template_app (template_hole 13, t_empty), template_hole 8)
           )))]
