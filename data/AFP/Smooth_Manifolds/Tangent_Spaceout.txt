Loading theory "HOL-Combinatorics.Transposition" (required by "Draft.Tangent_SpaceMoreTemplates" via "Draft.Tangent_Space" via "Draft.Partition_Of_Unity" via "Draft.Bump_Function" via "Draft.Smooth" via "Draft.Analysis_More" via "HOL-Analysis.Equivalence_Lebesgue_Henstock_Integration" via "HOL-Analysis.Lebesgue_Measure" via "HOL-Analysis.Finite_Product_Measure" via "HOL-Analysis.Binary_Product_Measure" via "HOL-Analysis.Nonnegative_Lebesgue_Integration" via "HOL-Analysis.Borel_Space" via "HOL-Analysis.Derivative" via "HOL-Analysis.Bounded_Linear_Function" via "HOL-Analysis.Topology_Euclidean_Space" via "HOL-Analysis.Elementary_Normed_Spaces" via "HOL-Analysis.Cartesian_Space")
Loading theory "HOL-Library.FuncSet" (required by "Draft.Tangent_SpaceMoreTemplates" via "Draft.Tangent_Space" via "Draft.Partition_Of_Unity" via "Draft.Bump_Function" via "Draft.Smooth" via "Draft.Analysis_More" via "HOL-Analysis.Equivalence_Lebesgue_Henstock_Integration" via "HOL-Analysis.Lebesgue_Measure" via "HOL-Analysis.Finite_Product_Measure" via "HOL-Analysis.Binary_Product_Measure" via "HOL-Analysis.Nonnegative_Lebesgue_Integration" via "HOL-Analysis.Measure_Space" via "HOL-Analysis.Measurable" via "HOL-Analysis.Sigma_Algebra")
Loading theory "HOL-Library.Function_Algebras" (required by "Draft.Tangent_SpaceMoreTemplates" via "Draft.ExtrEqs" via "HOL-Library.BigO")
Loading theory "HOL-Library.Infinite_Set" (required by "Draft.Tangent_SpaceMoreTemplates" via "Draft.Tangent_Space" via "Draft.Partition_Of_Unity" via "Draft.Bump_Function" via "Draft.Smooth" via "Draft.Analysis_More" via "HOL-Analysis.Equivalence_Lebesgue_Henstock_Integration" via "HOL-Analysis.Lebesgue_Measure" via "HOL-Analysis.Finite_Product_Measure" via "HOL-Analysis.Binary_Product_Measure" via "HOL-Analysis.Nonnegative_Lebesgue_Integration" via "HOL-Analysis.Measure_Space" via "HOL-Analysis.Measurable" via "HOL-Analysis.Sigma_Algebra" via "HOL-Library.Countable_Set")
instantiation
  fun :: (type, plus) plus
  plus_fun == plus :: ('a => 'b) => ('a => 'b) => 'a => 'b
instantiation
  fun :: (type, zero) zero
  zero_fun == zero_class.zero :: 'a => 'b
instantiation
  fun :: (type, times) times
  times_fun == times :: ('a => 'b) => ('a => 'b) => 'a => 'b
instantiation
  fun :: (type, one) one
  one_fun == one_class.one :: 'a => 'b
### theory "HOL-Library.Function_Algebras"
### 0.120s elapsed time, 0.500s cpu time, 0.041s GC time
Loading theory "HOL-Library.Nat_Bijection" (required by "Draft.Tangent_SpaceMoreTemplates" via "Draft.ExtrEqs" via "HOL-Library.Stream")
### theory "HOL-Combinatorics.Transposition"
### 0.151s elapsed time, 0.625s cpu time, 0.041s GC time
Loading theory "HOL-Library.Old_Datatype" (required by "Draft.Tangent_SpaceMoreTemplates" via "Draft.Tangent_Space" via "Draft.Partition_Of_Unity" via "Draft.Bump_Function" via "Draft.Smooth" via "Draft.Analysis_More" via "HOL-Analysis.Equivalence_Lebesgue_Henstock_Integration" via "HOL-Analysis.Lebesgue_Measure" via "HOL-Analysis.Finite_Product_Measure" via "HOL-Analysis.Binary_Product_Measure" via "HOL-Analysis.Nonnegative_Lebesgue_Integration" via "HOL-Analysis.Measure_Space" via "HOL-Analysis.Measurable" via "HOL-Analysis.Sigma_Algebra" via "HOL-Library.Countable_Set" via "HOL-Library.Countable")
consts
  enumerate :: "'a set => nat => 'a"
Found termination order: "(%p. size (snd p)) <*mlex*> {}"
### theory "HOL-Library.Infinite_Set"
### 0.289s elapsed time, 1.155s cpu time, 0.123s GC time
Loading theory "HOL-Library.Phantom_Type" (required by "Draft.Tangent_SpaceMoreTemplates" via "Draft.Tangent_Space" via "Draft.Partition_Of_Unity" via "Draft.Bump_Function" via "Draft.Smooth" via "Draft.Analysis_More" via "HOL-Analysis.Equivalence_Lebesgue_Henstock_Integration" via "HOL-Analysis.Lebesgue_Measure" via "HOL-Analysis.Finite_Product_Measure" via "HOL-Analysis.Binary_Product_Measure" via "HOL-Analysis.Nonnegative_Lebesgue_Integration" via "HOL-Analysis.Borel_Space" via "HOL-Analysis.Derivative" via "HOL-Analysis.Bounded_Linear_Function" via "HOL-Analysis.Topology_Euclidean_Space" via "HOL-Analysis.Elementary_Normed_Spaces" via "HOL-Analysis.Cartesian_Space" via "HOL-Analysis.Finite_Cartesian_Product" via "HOL-Library.Numeral_Type" via "HOL-Library.Cardinality")
Found termination order: "size_list size <*mlex*> {}"
### theory "HOL-Library.FuncSet"
### 0.409s elapsed time, 1.621s cpu time, 0.208s GC time
Loading theory "HOL-Library.Disjoint_Sets" (required by "Draft.Tangent_SpaceMoreTemplates" via "Draft.Tangent_Space" via "Draft.Partition_Of_Unity" via "Draft.Bump_Function" via "Draft.Smooth" via "Draft.Analysis_More" via "HOL-Analysis.Equivalence_Lebesgue_Henstock_Integration" via "HOL-Analysis.Lebesgue_Measure" via "HOL-Analysis.Finite_Product_Measure" via "HOL-Analysis.Binary_Product_Measure" via "HOL-Analysis.Nonnegative_Lebesgue_Integration" via "HOL-Analysis.Measure_Space" via "HOL-Analysis.Measurable" via "HOL-Analysis.Sigma_Algebra" via "HOL-Library.Indicator_Function")
### theory "HOL-Library.Nat_Bijection"
### 0.310s elapsed time, 1.210s cpu time, 0.167s GC time
Loading theory "HOL-Library.Stream" (required by "Draft.Tangent_SpaceMoreTemplates" via "Draft.ExtrEqs")
locale comm_monoid_set
  fixes f :: "'a => 'a => 'a"  (infixl \<open>\<^bold>*\<close> 70)
    and z :: "'a"  (\<open>\<^bold>1\<close>)
  assumes "comm_monoid_set (\<^bold>*) \<^bold>1"
signature OLD_DATATYPE =
  sig
    val check_specs: spec list -> theory -> spec list * Proof.context
    type config = {quiet: bool, strict: bool}
    val default_config: config
    type descr =
       (int * (string * dtyp list * (string * dtyp list) list)) list
    val distinct_lemma: thm
    datatype dtyp
    = DtRec of int | DtTFree of string * sort | DtType of string * dtyp list
    type info =
       {case_cong: thm,
        case_cong_weak: thm,
        case_name: string,
        case_rewrites: thm list,
        descr: descr,
        distinct: thm list,
        exhaust: thm,
        index: int,
        induct: thm,
        inducts: thm list,
        inject: thm list,
        nchotomy: thm,
        rec_names: string list,
        rec_rewrites: thm list, split: thm, split_asm: thm}
    val read_specs: spec_cmd list -> theory -> spec list * Proof.context
    type spec =
       (binding * (string * sort) list * mixfix) *
       (binding * typ list * mixfix) list
    type spec_cmd =
       (binding * (string * string option) list * mixfix) *
       (binding * string list * mixfix) list
  end
structure Old_Datatype: OLD_DATATYPE
### theory "HOL-Library.Old_Datatype"
### 0.407s elapsed time, 1.593s cpu time, 0.263s GC time
Loading theory "HOL-Library.Product_Plus" (required by "Draft.Tangent_SpaceMoreTemplates" via "Draft.Tangent_Space" via "Draft.Partition_Of_Unity" via "Draft.Bump_Function" via "Draft.Smooth" via "Draft.Analysis_More" via "HOL-Analysis.Equivalence_Lebesgue_Henstock_Integration" via "HOL-Analysis.Lebesgue_Measure" via "HOL-Analysis.Finite_Product_Measure" via "HOL-Analysis.Binary_Product_Measure" via "HOL-Analysis.Nonnegative_Lebesgue_Integration" via "HOL-Analysis.Borel_Space" via "HOL-Analysis.Derivative" via "HOL-Analysis.Bounded_Linear_Function" via "HOL-Analysis.Topology_Euclidean_Space" via "HOL-Analysis.Elementary_Normed_Spaces" via "HOL-Analysis.Elementary_Metric_Spaces" via "HOL-Analysis.Abstract_Topology_2" via "HOL-Analysis.Elementary_Topology" via "HOL-Analysis.Product_Vector")
instantiation
  prod :: (zero, zero) zero
  zero_prod == zero_class.zero :: 'a * 'b
instantiation
  prod :: (plus, plus) plus
  plus_prod == plus :: 'a * 'b => 'a * 'b => 'a * 'b
instantiation
  prod :: (minus, minus) minus
  minus_prod == minus :: 'a * 'b => 'a * 'b => 'a * 'b
instantiation
  prod :: (uminus, uminus) uminus
  uminus_prod == uminus :: 'a * 'b => 'a * 'b
### theory "HOL-Library.Product_Plus"
### 0.088s elapsed time, 0.352s cpu time, 0.000s GC time
Loading theory "HOL-Library.Product_Order" (required by "Draft.Tangent_SpaceMoreTemplates" via "Draft.Tangent_Space" via "Draft.Partition_Of_Unity" via "Draft.Bump_Function" via "Draft.Smooth" via "Draft.Analysis_More" via "HOL-Analysis.Equivalence_Lebesgue_Henstock_Integration" via "HOL-Analysis.Lebesgue_Measure" via "HOL-Analysis.Finite_Product_Measure" via "HOL-Analysis.Binary_Product_Measure" via "HOL-Analysis.Nonnegative_Lebesgue_Integration" via "HOL-Analysis.Borel_Space" via "HOL-Analysis.Ordered_Euclidean_Space")
instantiation
  prod :: (ord, ord) ord
  less_eq_prod == less_eq :: 'a * 'b => 'a * 'b => bool
  less_prod == less :: 'a * 'b => 'a * 'b => bool
### theory "HOL-Library.Disjoint_Sets"
### 0.294s elapsed time, 1.146s cpu time, 0.190s GC time
Loading theory "HOL-Library.Set_Algebras" (required by "Draft.Tangent_SpaceMoreTemplates" via "Draft.ExtrEqs" via "HOL-Library.BigO")
instantiation
  prod :: (inf, inf) inf
  inf_prod == inf :: 'a * 'b => 'a * 'b => 'a * 'b
instantiation
  set :: (plus) plus
  plus_set == plus :: 'a set => 'a set => 'a set
instantiation
  prod :: (sup, sup) sup
  sup_prod == sup :: 'a * 'b => 'a * 'b => 'a * 'b
instantiation
  set :: (times) times
  times_set == times :: 'a set => 'a set => 'a set
instantiation
  set :: (zero) zero
  zero_set == zero_class.zero :: 'a set
instantiation
  set :: (one) one
  one_set == one_class.one :: 'a set
instantiation
  prod :: (top, top) top
  top_prod == top :: 'a * 'b
instantiation
  prod :: (bot, bot) bot
  bot_prod == bot :: 'a * 'b
instantiation
  prod :: (Inf, Inf) Inf
  Inf_prod == Inf :: ('a * 'b) set => 'a * 'b
instantiation
  prod :: (Sup, Sup) Sup
  Sup_prod == Sup :: ('a * 'b) set => 'a * 'b
### theory "HOL-Library.Phantom_Type"
### 0.745s elapsed time, 2.788s cpu time, 0.850s GC time
Loading theory "HOL-Library.Cardinality" (required by "Draft.Tangent_SpaceMoreTemplates" via "Draft.Tangent_Space" via "Draft.Partition_Of_Unity" via "Draft.Bump_Function" via "Draft.Smooth" via "Draft.Analysis_More" via "HOL-Analysis.Equivalence_Lebesgue_Henstock_Integration" via "HOL-Analysis.Lebesgue_Measure" via "HOL-Analysis.Finite_Product_Measure" via "HOL-Analysis.Binary_Product_Measure" via "HOL-Analysis.Nonnegative_Lebesgue_Integration" via "HOL-Analysis.Borel_Space" via "HOL-Analysis.Derivative" via "HOL-Analysis.Bounded_Linear_Function" via "HOL-Analysis.Topology_Euclidean_Space" via "HOL-Analysis.Elementary_Normed_Spaces" via "HOL-Analysis.Cartesian_Space" via "HOL-Analysis.Finite_Cartesian_Product" via "HOL-Library.Numeral_Type")
consts
  shift :: "'a list => 'a stream => 'a stream"
### theory "HOL-Library.Product_Order"
### 0.412s elapsed time, 1.474s cpu time, 0.669s GC time
Loading theory "HOL-Library.Tree" (required by "Draft.Tangent_SpaceMoreTemplates" via "Draft.ExtrEqs" via "Draft.Templates")
Proofs for coinductive predicate(s) "streamsp"
  Proving monotonicity ...
### Additional type variable(s) in locale specification "CARD_1": 'a
### theory "HOL-Library.Set_Algebras"
### 0.416s elapsed time, 1.489s cpu time, 0.627s GC time
Loading theory "HOL-Types_To_Sets.Prerequisites" (required by "Draft.Tangent_SpaceMoreTemplates" via "Draft.Tangent_Space" via "Draft.Partition_Of_Unity" via "Draft.Bump_Function" via "Draft.Smooth" via "Draft.Analysis_More" via "HOL-Types_To_Sets.Linear_Algebra_On")
class CARD_1 = type +
  assumes "CARD_1": "CARD('a) = 1"
consts
  snth :: "'a stream => nat => 'a"
locale local_typedef
  fixes S :: "'b set"
    and s :: "'s itself"
  assumes "local_typedef TYPE('s) S"
consts
  stake :: "nat => 'a stream => 'a list"
consts
  sdrop :: "nat => 'a stream => 'a stream"
### ML warning (line 74 of "~~/src/HOL/Types_To_Sets/Examples/Prerequisites.thy"):
### Pattern is not exhaustive.
structure More_Simplifier:
  sig
    val asm_full_var_simplify: Proof.context -> thm -> thm
    val var_simplified:
       Context.generic * Token.T list ->
         attribute * (Context.generic * Token.T list)
    val var_simplify_only: Proof.context -> thm list -> thm -> thm
  end
### theory "HOL-Types_To_Sets.Prerequisites"
### 0.093s elapsed time, 0.381s cpu time, 0.000s GC time
Loading theory "HOL-Types_To_Sets.Types_To_Sets" (required by "Draft.Tangent_SpaceMoreTemplates" via "Draft.Tangent_Space" via "Draft.Partition_Of_Unity" via "Draft.Bump_Function" via "Draft.Smooth" via "Draft.Analysis_More" via "HOL-Types_To_Sets.Linear_Algebra_On")
signature LOCAL_TYPEDEF =
  sig
    val cancel_type_definition: thm -> thm
    val cancel_type_definition_attr: attribute
  end
structure Local_Typedef: LOCAL_TYPEDEF
consts
  sfilter :: "('a => bool) => 'a stream => 'a stream"
### Additional type variable(s) in locale specification "card2": 'a
consts
  cycle :: "'a list => 'a stream"
signature UNOVERLOADING =
  sig
    val unoverload: cterm -> thm -> thm
    val unoverload_attr: cterm -> attribute
  end
structure Unoverloading: UNOVERLOADING
class card2 = finite +
  assumes "two_le_card": "2 <= CARD('a)"
signature INTERNALIZE_SORT =
  sig
    val internalize_sort: ctyp -> thm -> typ * thm
    val internalize_sort_attr: typ -> attribute
  end
structure Internalize_Sort: INTERNALIZE_SORT
consts
  siterate :: "('a => 'a) => 'a => 'a stream"
### ML warning (line 41 of "~~/src/HOL/Types_To_Sets/unoverload_type.ML"):
### Matches are not exhaustive.
signature UNOVERLOAD_TYPE =
  sig
    val unoverload_type: Context.generic -> indexname list -> thm -> thm
    val unoverload_type_attr: indexname list -> attribute
  end
structure Unoverload_Type: UNOVERLOAD_TYPE
class finite_UNIV = type +
  fixes finite_UNIV :: "('a, bool) phantom"
  assumes "finite_UNIV": "finite_UNIV = Phantom('a) (finite UNIV)"
consts
  flat :: "'a list stream => 'a stream"
class card_UNIV = finite_UNIV +
  fixes card_UNIV :: "('a, nat) phantom"
  assumes "card_UNIV": "card_UNIV_class.card_UNIV = Phantom('a) CARD('a)"
instantiation
  nat :: card_UNIV
  card_UNIV_nat == card_UNIV_class.card_UNIV :: (nat, nat) phantom
  finite_UNIV_nat == finite_UNIV :: (nat, bool) phantom
instantiation
  int :: card_UNIV
  card_UNIV_int == card_UNIV_class.card_UNIV :: (int, nat) phantom
  finite_UNIV_int == finite_UNIV :: (int, bool) phantom
instantiation
  natural :: card_UNIV
  card_UNIV_natural == card_UNIV_class.card_UNIV :: (natural, nat) phantom
  finite_UNIV_natural == finite_UNIV :: (natural, bool) phantom
consts
  sinterleave :: "'a stream => 'a stream => 'a stream"
instantiation
  integer :: card_UNIV
  card_UNIV_integer == card_UNIV_class.card_UNIV :: (integer, nat) phantom
  finite_UNIV_integer == finite_UNIV :: (integer, bool) phantom
### ML warning (line 36 of "~~/src/HOL/Types_To_Sets/unoverload_def.ML"):
### Pattern is not exhaustive.
### ML warning (line 36 of "~~/src/HOL/Types_To_Sets/unoverload_def.ML"):
### Value identifier (ctxt') has not been referenced.
### ML warning (line 40 of "~~/src/HOL/Types_To_Sets/unoverload_def.ML"):
### Pattern is not exhaustive.
### ML warning (line 66 of "~~/src/HOL/Types_To_Sets/unoverload_def.ML"):
### Pattern is not exhaustive.
structure Unoverload_Def:
  sig
    val unoverload_def: binding option -> thm -> theory -> theory
    val unoverload_def1_cmd:
       binding option * (Facts.ref * Token.src list) -> theory -> theory
  end
### theory "HOL-Types_To_Sets.Types_To_Sets"
### 0.304s elapsed time, 1.192s cpu time, 0.162s GC time
Loading theory "HOL-Types_To_Sets.Group_On_With" (required by "Draft.Tangent_SpaceMoreTemplates" via "Draft.Tangent_Space" via "Draft.Partition_Of_Unity" via "Draft.Bump_Function" via "Draft.Smooth" via "Draft.Analysis_More" via "HOL-Types_To_Sets.Linear_Algebra_On" via "HOL-Types_To_Sets.Linear_Algebra_On_With")
consts
  szip :: "'a stream => 'b stream => ('a * 'b) stream"
instantiation
  list :: (type) card_UNIV
  card_UNIV_list == card_UNIV_class.card_UNIV :: ('a list, nat) phantom
  finite_UNIV_list == finite_UNIV :: ('a list, bool) phantom
instantiation
  unit :: card_UNIV
  card_UNIV_unit == card_UNIV_class.card_UNIV :: (unit, nat) phantom
  finite_UNIV_unit == finite_UNIV :: (unit, bool) phantom
instantiation
  bool :: card_UNIV
  card_UNIV_bool == card_UNIV_class.card_UNIV :: (bool, nat) phantom
  finite_UNIV_bool == finite_UNIV :: (bool, bool) phantom
consts
  smap2 :: "('a => 'b => 'c) => 'a stream => 'b stream => 'c stream"
instantiation
  char :: card_UNIV
  card_UNIV_char == card_UNIV_class.card_UNIV :: (char, nat) phantom
  finite_UNIV_char == finite_UNIV :: (char, bool) phantom
instantiation
  prod :: (finite_UNIV, finite_UNIV) finite_UNIV
  finite_UNIV_prod == finite_UNIV :: ('a * 'b, bool) phantom
### theory "HOL-Library.Stream"
### 1.167s elapsed time, 4.437s cpu time, 0.980s GC time
Loading theory "HOL-Library.Countable" (required by "Draft.Tangent_SpaceMoreTemplates" via "Draft.Tangent_Space" via "Draft.Partition_Of_Unity" via "Draft.Bump_Function" via "Draft.Smooth" via "Draft.Analysis_More" via "HOL-Analysis.Equivalence_Lebesgue_Henstock_Integration" via "HOL-Analysis.Lebesgue_Measure" via "HOL-Analysis.Finite_Product_Measure" via "HOL-Analysis.Binary_Product_Measure" via "HOL-Analysis.Nonnegative_Lebesgue_Integration" via "HOL-Analysis.Measure_Space" via "HOL-Analysis.Measurable" via "HOL-Analysis.Sigma_Algebra" via "HOL-Library.Countable_Set")
instantiation
  prod :: (card_UNIV, card_UNIV) card_UNIV
  card_UNIV_prod == card_UNIV_class.card_UNIV :: ('a * 'b, nat) phantom
instantiation
  sum :: (finite_UNIV, finite_UNIV) finite_UNIV
  finite_UNIV_sum == finite_UNIV :: ('a + 'b, bool) phantom
instantiation
  sum :: (card_UNIV, card_UNIV) card_UNIV
  card_UNIV_sum == card_UNIV_class.card_UNIV :: ('a + 'b, nat) phantom
instantiation
  fun :: (finite_UNIV, card_UNIV) finite_UNIV
  finite_UNIV_fun == finite_UNIV :: ('a => 'b, bool) phantom
instantiation
  fun :: (card_UNIV, card_UNIV) card_UNIV
  card_UNIV_fun == card_UNIV_class.card_UNIV :: ('a => 'b, nat) phantom
instantiation
  option :: (finite_UNIV) finite_UNIV
  finite_UNIV_option == finite_UNIV :: ('a option, bool) phantom
instantiation
  option :: (card_UNIV) card_UNIV
  card_UNIV_option == card_UNIV_class.card_UNIV :: ('a option, nat) phantom
instantiation
  String.literal :: card_UNIV
  card_UNIV_literal == card_UNIV_class.card_UNIV ::
    (String.literal, nat) phantom
  finite_UNIV_literal == finite_UNIV :: (String.literal, bool) phantom
locale semigroup_add_on_with
  fixes S :: "'a set"
    and pls :: "'a => 'a => 'a"
  assumes "semigroup_add_on_with S pls"
instantiation
  set :: (finite_UNIV) finite_UNIV
  finite_UNIV_set == finite_UNIV :: ('a set, bool) phantom
locale ab_semigroup_add_on_with
  fixes S :: "'a set"
    and pls :: "'a => 'a => 'a"
  assumes "ab_semigroup_add_on_with S pls"
consts
  left :: "'a tree => 'a tree"
instantiation
  set :: (card_UNIV) card_UNIV
  card_UNIV_set == card_UNIV_class.card_UNIV :: ('a set, nat) phantom
consts
  right :: "'a tree => 'a tree"
locale comm_monoid_add_on_with
  fixes S :: "'a set"
    and pls :: "'a => 'a => 'a"
    and z :: "'a"
  assumes "comm_monoid_add_on_with S pls z"
instantiation
  Enum.finite_1 :: card_UNIV
  card_UNIV_finite_1 == card_UNIV_class.card_UNIV ::
    (Enum.finite_1, nat) phantom
  finite_UNIV_finite_1 == finite_UNIV :: (Enum.finite_1, bool) phantom
locale comm_monoid_add_on_with
  fixes S :: "'a set"
    and pls :: "'a => 'a => 'a"
    and z :: "'a"
  assumes "comm_monoid_add_on_with S pls z"
instantiation
  Enum.finite_2 :: card_UNIV
  card_UNIV_finite_2 == card_UNIV_class.card_UNIV ::
    (Enum.finite_2, nat) phantom
  finite_UNIV_finite_2 == finite_UNIV :: (Enum.finite_2, bool) phantom
instantiation
  Enum.finite_3 :: card_UNIV
  card_UNIV_finite_3 == card_UNIV_class.card_UNIV ::
    (Enum.finite_3, nat) phantom
  finite_UNIV_finite_3 == finite_UNIV :: (Enum.finite_3, bool) phantom
Found termination order: "size <*mlex*> {}"
instantiation
  Enum.finite_4 :: card_UNIV
  card_UNIV_finite_4 == card_UNIV_class.card_UNIV ::
    (Enum.finite_4, nat) phantom
  finite_UNIV_finite_4 == finite_UNIV :: (Enum.finite_4, bool) phantom
locale ab_group_add_on_with
  fixes S :: "'a set"
    and pls :: "'a => 'a => 'a"
    and z :: "'a"
    and mns :: "'a => 'a => 'a"
    and um :: "'a => 'a"
  assumes "ab_group_add_on_with S pls z mns um"
instantiation
  Enum.finite_5 :: card_UNIV
  card_UNIV_finite_5 == card_UNIV_class.card_UNIV ::
    (Enum.finite_5, nat) phantom
  finite_UNIV_finite_5 == finite_UNIV :: (Enum.finite_5, bool) phantom
### theory "HOL-Library.Cardinality"
### 0.768s elapsed time, 3.028s cpu time, 0.295s GC time
Loading theory "HOL-Library.Numeral_Type" (required by "Draft.Tangent_SpaceMoreTemplates" via "Draft.Tangent_Space" via "Draft.Partition_Of_Unity" via "Draft.Bump_Function" via "Draft.Smooth" via "Draft.Analysis_More" via "HOL-Analysis.Equivalence_Lebesgue_Henstock_Integration" via "HOL-Analysis.Lebesgue_Measure" via "HOL-Analysis.Finite_Product_Measure" via "HOL-Analysis.Binary_Product_Measure" via "HOL-Analysis.Nonnegative_Lebesgue_Integration" via "HOL-Analysis.Borel_Space" via "HOL-Analysis.Derivative" via "HOL-Analysis.Bounded_Linear_Function" via "HOL-Analysis.Topology_Euclidean_Space" via "HOL-Analysis.Elementary_Normed_Spaces" via "HOL-Analysis.Cartesian_Space" via "HOL-Analysis.Finite_Cartesian_Product")
Found termination order: "size <*mlex*> {}"
Found termination order: "size <*mlex*> {}"
class height = type +
  fixes height :: "'a => nat"
instantiation
  tree :: (type) height
  height_tree == height :: 'a tree => nat
instantiation
  num1 :: CARD_1
instantiation
  num1 :: {comm_monoid_mult,numeral,comm_ring}
  uminus_num1 == uminus :: num1 => num1
  zero_num1 == zero_class.zero :: num1
  minus_num1 == minus :: num1 => num1 => num1
  plus_num1 == plus :: num1 => num1 => num1
  one_num1 == one_class.one :: num1
  times_num1 == times :: num1 => num1 => num1
instantiation
  num1 :: linorder
  less_eq_num1 == less_eq :: num1 => num1 => bool
  less_num1 == less :: num1 => num1 => bool
locale mod_type
  fixes n :: "int"
    and Rep :: "'a => int"
    and Abs :: "int => 'a"
  assumes "mod_type n Rep Abs"
Found termination order: "size <*mlex*> {}"
locale mod_ring
  fixes n :: "int"
    and Rep :: "'a => int"
    and Abs :: "int => 'a"
  assumes "mod_ring n Rep Abs"
### Additional type variable(s) in locale specification "countable": 'a
locale local_typedef_ab_group_add_on_with
  fixes pls :: "'b => 'b => 'b"
    and z :: "'b"
    and mns :: "'b => 'b => 'b"
    and um :: "'b => 'b"
    and S :: "'b set"
    and s :: "'s itself"
  assumes "local_typedef_ab_group_add_on_with TYPE('s) pls z mns um S"
instantiation
  bit0 :: (finite) {minus,one,plus,times,uminus,zero}
  bit1 :: (finite) {minus,one,plus,times,uminus,zero}
  zero_bit0 == zero_class.zero :: 'a bit0
  uminus_bit0 == uminus :: 'a bit0 => 'a bit0
  times_bit0 == times :: 'a bit0 => 'a bit0 => 'a bit0
  plus_bit0 == plus :: 'a bit0 => 'a bit0 => 'a bit0
  one_bit0 == one_class.one :: 'a bit0
  minus_bit0 == minus :: 'a bit0 => 'a bit0 => 'a bit0
  zero_bit1 == zero_class.zero :: 'a bit1
  uminus_bit1 == uminus :: 'a bit1 => 'a bit1
  times_bit1 == times :: 'a bit1 => 'a bit1 => 'a bit1
  plus_bit1 == plus :: 'a bit1 => 'a bit1 => 'a bit1
  one_bit1 == one_class.one :: 'a bit1
  minus_bit1 == minus :: 'a bit1 => 'a bit1 => 'a bit1
class countable = type +
  assumes "ex_inj": "EX to_nat. inj to_nat"
Found termination order: "size <*mlex*> {}"
Found termination order: "size <*mlex*> {}"
locale ab_group_add_on_with
  fixes S :: "'a set"
    and pls :: "'a => 'a => 'a"
    and z :: "'a"
    and mns :: "'a => 'a => 'a"
    and um :: "'a => 'a"
  assumes "ab_group_add_on_with S pls z mns um"
instantiation
  bit0 :: (finite) linorder
  bit1 :: (finite) linorder
  less_eq_bit0 == less_eq :: 'a bit0 => 'a bit0 => bool
  less_bit0 == less :: 'a bit0 => 'a bit0 => bool
  less_eq_bit1 == less_eq :: 'a bit1 => 'a bit1 => bool
  less_bit1 == less :: 'a bit1 => 'a bit1 => bool
Found termination order: "size <*mlex*> {}"
instantiation
  num0 :: equal
  equal_num0 == equal_class.equal :: num0 => num0 => bool
Proofs for inductive predicate(s) "finite_item"
  Proving monotonicity ...
Found termination order: "size <*mlex*> {}"
instantiation
  num1 :: equal
  equal_num1 == equal_class.equal :: num1 => num1 => bool
instantiation
  num1 :: enum
  enum_num1 == enum_class.enum :: num1 list
  enum_all_num1 == enum_class.enum_all :: (num1 => bool) => bool
  enum_ex_num1 == enum_class.enum_ex :: (num1 => bool) => bool
instantiation
  num0 :: card_UNIV
  num1 :: card_UNIV
  card_UNIV_num0 == card_UNIV_class.card_UNIV :: (num0, nat) phantom
  finite_UNIV_num0 == finite_UNIV :: (num0, bool) phantom
  card_UNIV_num1 == card_UNIV_class.card_UNIV :: (num1, nat) phantom
  finite_UNIV_num1 == finite_UNIV :: (num1, bool) phantom
Found termination order: "size <*mlex*> {}"
### theory "HOL-Types_To_Sets.Group_On_With"
### 0.877s elapsed time, 3.473s cpu time, 0.316s GC time
Loading theory "HOL-Analysis.Metric_Arith" (required by "Draft.Tangent_SpaceMoreTemplates" via "Draft.Tangent_Space" via "Draft.Partition_Of_Unity" via "Draft.Bump_Function" via "Draft.Smooth" via "Draft.Analysis_More" via "HOL-Analysis.Equivalence_Lebesgue_Henstock_Integration" via "HOL-Analysis.Lebesgue_Measure" via "HOL-Analysis.Finite_Product_Measure" via "HOL-Analysis.Binary_Product_Measure" via "HOL-Analysis.Nonnegative_Lebesgue_Integration" via "HOL-Analysis.Borel_Space" via "HOL-Analysis.Derivative" via "HOL-Analysis.Bounded_Linear_Function" via "HOL-Analysis.Topology_Euclidean_Space" via "HOL-Analysis.Elementary_Normed_Spaces" via "HOL-Analysis.Elementary_Metric_Spaces")
instantiation
  bit0 :: (finite) equal
  bit1 :: (finite) equal
  equal_bit0 == equal_class.equal :: 'a bit0 => 'a bit0 => bool
  equal_bit1 == equal_class.equal :: 'a bit1 => 'a bit1 => bool
Found termination order: "size <*mlex*> {}"
instantiation
  bit0 :: (finite) enum
  enum_bit0 == enum_class.enum :: 'a bit0 list
  enum_all_bit0 == enum_class.enum_all :: ('a bit0 => bool) => bool
  enum_ex_bit0 == enum_class.enum_ex :: ('a bit0 => bool) => bool
val old_countable_datatype_tac = fn: Proof.context -> int -> tactic
instantiation
  bit1 :: (finite) enum
  enum_bit1 == enum_class.enum :: 'a bit1 list
  enum_all_bit1 == enum_class.enum_all :: ('a bit1 => bool) => bool
  enum_ex_bit1 == enum_class.enum_ex :: ('a bit1 => bool) => bool
instantiation
  bit0 :: (finite) finite_UNIV
  bit1 :: (finite) finite_UNIV
  finite_UNIV_bit0 == finite_UNIV :: ('a bit0, bool) phantom
  finite_UNIV_bit1 == finite_UNIV :: ('a bit1, bool) phantom
instantiation
  bit0 :: ({card_UNIV,finite}) card_UNIV
  bit1 :: ({card_UNIV,finite}) card_UNIV
  card_UNIV_bit0 == card_UNIV_class.card_UNIV :: ('a bit0, nat) phantom
  card_UNIV_bit1 == card_UNIV_class.card_UNIV :: ('a bit1, nat) phantom
Found termination order: "(%p. size (fst p)) <*mlex*> {}"
### ML warning (line 93 of "~~/src/HOL/Tools/BNF/bnf_lfp_countable.ML"):
### Pattern is not exhaustive.
### ML warning (line 139 of "~~/src/HOL/Tools/BNF/bnf_lfp_countable.ML"):
### Pattern is not exhaustive.
### ML warning (line 143 of "~~/src/HOL/Tools/BNF/bnf_lfp_countable.ML"):
### Matches are not exhaustive.
### ML warning (line 145 of "~~/src/HOL/Tools/BNF/bnf_lfp_countable.ML"):
### Matches are not exhaustive.
### ML warning (line 156 of "~~/src/HOL/Tools/BNF/bnf_lfp_countable.ML"):
### Pattern is not exhaustive.
signature BNF_LFP_COUNTABLE =
  sig
    val countable_datatype_tac: Proof.context -> tactic
    val derive_encode_injectives_thms:
       Proof.context -> string list -> thm list
  end
structure BNF_LFP_Countable: BNF_LFP_COUNTABLE
val countable_datatype_tac = fn: Proof.context -> thm -> thm Seq.seq
val countable_tac = fn: Proof.context -> int -> tactic
### theory "HOL-Library.Numeral_Type"
### 0.777s elapsed time, 3.063s cpu time, 0.308s GC time
Loading theory "HOL-Analysis.Inner_Product" (required by "Draft.Tangent_SpaceMoreTemplates" via "Draft.Tangent_Space" via "Draft.Partition_Of_Unity" via "Draft.Bump_Function" via "Draft.Smooth" via "Draft.Analysis_More" via "HOL-Analysis.Equivalence_Lebesgue_Henstock_Integration" via "HOL-Analysis.Lebesgue_Measure" via "HOL-Analysis.Finite_Product_Measure" via "HOL-Analysis.Binary_Product_Measure" via "HOL-Analysis.Nonnegative_Lebesgue_Integration" via "HOL-Analysis.Borel_Space" via "HOL-Analysis.Derivative" via "HOL-Analysis.Bounded_Linear_Function" via "HOL-Analysis.Topology_Euclidean_Space" via "HOL-Analysis.Elementary_Normed_Spaces" via "HOL-Analysis.Cartesian_Space" via "HOL-Analysis.Finite_Cartesian_Product" via "HOL-Analysis.Euclidean_Space")
Found termination order: "size <*mlex*> {}"
Found termination order: "(%p. size (snd p)) <*mlex*> {}"
### theory "HOL-Library.Countable"
### 1.228s elapsed time, 4.840s cpu time, 0.491s GC time
Loading theory "HOL-Library.Countable_Set" (required by "Draft.Tangent_SpaceMoreTemplates" via "Draft.Tangent_Space" via "Draft.Partition_Of_Unity" via "Draft.Bump_Function" via "Draft.Smooth" via "Draft.Analysis_More" via "HOL-Analysis.Equivalence_Lebesgue_Henstock_Integration" via "HOL-Analysis.Lebesgue_Measure" via "HOL-Analysis.Finite_Product_Measure" via "HOL-Analysis.Binary_Product_Measure" via "HOL-Analysis.Nonnegative_Lebesgue_Integration" via "HOL-Analysis.Measure_Space" via "HOL-Analysis.Measurable" via "HOL-Analysis.Sigma_Algebra")
Found termination order: "size <*mlex*> {}"
signature METRIC_ARITH =
  sig
    val argo_timeout: real Config.T
    val metric_arith_tac: Proof.context -> int -> tactic
    val trace: bool Config.T
  end
structure Metric_Arith: METRIC_ARITH
### theory "HOL-Analysis.Metric_Arith"
### 0.659s elapsed time, 2.597s cpu time, 0.234s GC time
Loading theory "HOL-Analysis.L2_Norm" (required by "Draft.Tangent_SpaceMoreTemplates" via "Draft.Tangent_Space" via "Draft.Partition_Of_Unity" via "Draft.Bump_Function" via "Draft.Smooth" via "Draft.Analysis_More" via "HOL-Analysis.Equivalence_Lebesgue_Henstock_Integration" via "HOL-Analysis.Lebesgue_Measure" via "HOL-Analysis.Finite_Product_Measure" via "HOL-Analysis.Binary_Product_Measure" via "HOL-Analysis.Nonnegative_Lebesgue_Integration" via "HOL-Analysis.Borel_Space" via "HOL-Analysis.Derivative" via "HOL-Analysis.Bounded_Linear_Function" via "HOL-Analysis.Topology_Euclidean_Space" via "HOL-Analysis.Elementary_Normed_Spaces" via "HOL-Analysis.Cartesian_Space" via "HOL-Analysis.Finite_Cartesian_Product" via "HOL-Analysis.Euclidean_Space")
locale comm_monoid_set
  fixes f :: "'a => 'a => 'a"  (infixl \<open>\<^bold>*\<close> 70)
    and z :: "'a"  (\<open>\<^bold>1\<close>)
  assumes "comm_monoid_set (\<^bold>*) \<^bold>1"
### theory "HOL-Analysis.L2_Norm"
### 0.109s elapsed time, 0.419s cpu time, 0.061s GC time
Loading theory "HOL-Analysis.Operator_Norm" (required by "Draft.Tangent_SpaceMoreTemplates" via "Draft.Tangent_Space" via "Draft.Partition_Of_Unity" via "Draft.Bump_Function" via "Draft.Smooth" via "Draft.Analysis_More" via "HOL-Analysis.Equivalence_Lebesgue_Henstock_Integration" via "HOL-Analysis.Lebesgue_Measure" via "HOL-Analysis.Finite_Product_Measure" via "HOL-Analysis.Binary_Product_Measure" via "HOL-Analysis.Nonnegative_Lebesgue_Integration" via "HOL-Analysis.Borel_Space" via "HOL-Analysis.Derivative" via "HOL-Analysis.Bounded_Linear_Function")
### theory "HOL-Library.Tree"
### 2.119s elapsed time, 8.342s cpu time, 0.826s GC time
Loading theory "Draft.Templates" (required by "Draft.Tangent_SpaceMoreTemplates" via "Draft.ExtrEqs")
class real_inner = dist_norm + real_vector + sgn_div_norm +
  uniformity_dist + open_uniformity +
  fixes inner :: "'a => 'a => real"
  assumes "inner_commute": "!!x y. inner x y = inner y x"
    and "inner_add_left": "!!x y z. inner (x + y) z = inner x z + inner y z"
    and
    "inner_scaleR_left": "!!r x y. inner (r *\<^sub>R x) y = r * inner x y"
    and "inner_ge_zero": "!!x. 0 <= inner x x"
    and "inner_eq_zero_iff": "!!x. (inner x x = 0) = (x = (0::'a))"
    and "norm_eq_sqrt_inner": "!!x. norm x = sqrt (inner x x)"
datatype template_term
=
     t_empty
   | template_app of template_term * template_term
   | template_hole of int
   | template_var of int
datatype sign
= equals | greater_equals | greater_than | less_equals | less_than
datatype template
=
     template_bimplication of template * template
   | template_dunno
   | template_equation of template_term * template_term
   | template_implication of template list * template
   | template_inequation of sign * template_term * template_term
   | template_negation of template
   | template_predicate of template_term
constructor t_empty: template_term
constructor template_app: template_term * template_term -> template_term
constructor template_hole: int -> template_term
constructor template_var: int -> template_term
constructor equals: sign
constructor greater_equals: sign
constructor greater_than: sign
constructor less_equals: sign
constructor less_than: sign
constructor template_bimplication: template * template -> template
constructor template_dunno: template
constructor template_equation: template_term * template_term -> template
constructor template_implication: template list * template -> template
constructor template_inequation:
   sign * template_term * template_term -> template
constructor template_negation: template -> template
constructor template_predicate: template_term -> template
val vfs = fn: term -> (indexname * typ) list * (string * typ) list
val indexOf = fn: ''a list -> ''a -> int -> int
val has_eq = fn: term -> bool
val term2template = fn:
   (indexname * typ) list -> (string * typ) list -> term -> template_term
val lemma2predicate = fn: term -> term -> template
val makeTemplatewithContext = fn: term -> term -> template
val lemma2template = fn: term -> template
val thm2template = fn: thm -> template
val tterm2string = fn: template_term -> string
val template2string = fn: template -> string
val t = "height ?t <= size ?t": thm
val th =
   Const ("HOL.Trueprop", "bool => prop") $
     (Const ("Orderings.ord_class.less_eq", "nat => nat => bool") $
       (Const ("Tree.height_class.height", "?'a tree => nat") $
         Var (("t", 0), "?'a tree")) $
       (Const ("Nat.size_class.size", "?'a tree => nat") $
         Var (("t", 0), "?'a tree"))):
   term
### theory "Draft.Templates"
### 0.067s elapsed time, 0.271s cpu time, 0.000s GC time
Loading theory "HOL-Analysis.Product_Vector" (required by "Draft.Tangent_SpaceMoreTemplates" via "Draft.Tangent_Space" via "Draft.Partition_Of_Unity" via "Draft.Bump_Function" via "Draft.Smooth" via "Draft.Analysis_More" via "HOL-Analysis.Equivalence_Lebesgue_Henstock_Integration" via "HOL-Analysis.Lebesgue_Measure" via "HOL-Analysis.Finite_Product_Measure" via "HOL-Analysis.Binary_Product_Measure" via "HOL-Analysis.Nonnegative_Lebesgue_Integration" via "HOL-Analysis.Borel_Space" via "HOL-Analysis.Derivative" via "HOL-Analysis.Bounded_Linear_Function" via "HOL-Analysis.Topology_Euclidean_Space" via "HOL-Analysis.Elementary_Normed_Spaces" via "HOL-Analysis.Elementary_Metric_Spaces" via "HOL-Analysis.Abstract_Topology_2" via "HOL-Analysis.Elementary_Topology")
### theory "HOL-Analysis.Operator_Norm"
### 0.134s elapsed time, 0.520s cpu time, 0.059s GC time
Loading theory "HOL-Library.BigO" (required by "Draft.Tangent_SpaceMoreTemplates" via "Draft.ExtrEqs")
### theory "HOL-Library.Countable_Set"
### 0.494s elapsed time, 1.936s cpu time, 0.179s GC time
Loading theory "HOL-Library.Countable_Complete_Lattices" (required by "Draft.Tangent_SpaceMoreTemplates" via "Draft.Tangent_Space" via "Draft.Partition_Of_Unity" via "Draft.Bump_Function" via "Draft.Smooth" via "Draft.Analysis_More" via "HOL-Analysis.Equivalence_Lebesgue_Henstock_Integration" via "HOL-Analysis.Lebesgue_Measure" via "HOL-Analysis.Finite_Product_Measure" via "HOL-Analysis.Binary_Product_Measure" via "HOL-Analysis.Nonnegative_Lebesgue_Integration" via "HOL-Analysis.Measure_Space" via "HOL-Analysis.Measurable" via "HOL-Analysis.Sigma_Algebra" via "HOL-Library.Extended_Nonnegative_Real" via "HOL-Library.Extended_Real" via "HOL-Library.Extended_Nat" via "HOL-Library.Order_Continuity")
locale module_prod
  fixes s1 :: "'a => 'b => 'b"
    and s2 :: "'a => 'c => 'c"
  assumes "module_prod s1 s2"
instantiation
  real :: real_inner
  inner_real == inner :: real => real => real
instantiation
  complex :: real_inner
  inner_complex == inner :: complex => complex => real
locale vector_space_prod
  fixes s1 :: "'a => 'b => 'b"  (infixr \<open>*a\<close> 75)
    and s2 :: "'a => 'c => 'c"  (infixr \<open>*b\<close> 75)
  assumes "vector_space_prod (*a) (*b)"
### Cannot skip proof of schematic goal statement
bundle inner_syntax
bundle no_inner_syntax
### theory "HOL-Analysis.Inner_Product"
### 1.086s elapsed time, 4.260s cpu time, 0.378s GC time
Loading theory "HOL-Library.Set_Idioms" (required by "Draft.Tangent_SpaceMoreTemplates" via "Draft.Tangent_Space" via "Draft.Partition_Of_Unity" via "Draft.Bump_Function" via "Draft.Smooth" via "Draft.Analysis_More" via "HOL-Analysis.Equivalence_Lebesgue_Henstock_Integration" via "HOL-Analysis.Lebesgue_Measure" via "HOL-Analysis.Finite_Product_Measure" via "HOL-Analysis.Binary_Product_Measure" via "HOL-Analysis.Nonnegative_Lebesgue_Integration" via "HOL-Analysis.Borel_Space" via "HOL-Analysis.Derivative" via "HOL-Analysis.Bounded_Linear_Function" via "HOL-Analysis.Topology_Euclidean_Space" via "HOL-Analysis.Elementary_Normed_Spaces" via "HOL-Analysis.Elementary_Metric_Spaces" via "HOL-Analysis.Abstract_Topology_2" via "HOL-Analysis.Elementary_Topology")
instantiation
  prod :: (real_vector, real_vector) real_vector
  scaleR_prod == scaleR :: real => 'a * 'b => 'a * 'b
### Cannot skip proof of schematic goal statement
instantiation
  prod :: (metric_space, metric_space) dist
  dist_prod == dist :: 'a * 'b => 'a * 'b => real
instantiation
  prod :: (uniformity, uniformity) uniformity
  uniformity_prod == uniformity :: (('a * 'b) * 'a * 'b) filter
instantiation
  prod :: (uniform_space, uniform_space) uniform_space
instantiation
  prod :: (metric_space, metric_space) uniformity_dist
class countable_complete_lattice = Inf + Sup + lattice + bot + top +
  assumes "ccInf_lower": "!!A x. [| countable A; x : A |] ==> Inf A <= x"
  assumes
    "ccInf_greatest":
      "!!A z. [| countable A; !!x. x : A ==> z <= x |] ==> z <= Inf A"
  assumes "ccSup_upper": "!!A x. [| countable A; x : A |] ==> x <= Sup A"
  assumes
    "ccSup_least":
      "!!A z. [| countable A; !!x. x : A ==> x <= z |] ==> Sup A <= z"
  assumes "ccInf_empty": "Inf {} = top"
  assumes "ccSup_empty": "Sup {} = bot"
instantiation
  prod :: (metric_space, metric_space) metric_space
instantiation
  prod :: (real_normed_vector, real_normed_vector) real_normed_vector
  sgn_prod == sgn :: 'a * 'b => 'a * 'b
  norm_prod == norm :: 'a * 'b => real
### theory "HOL-Library.Set_Idioms"
### 0.248s elapsed time, 0.979s cpu time, 0.070s GC time
Loading theory "HOL-Analysis.Abstract_Topology" (required by "Draft.Tangent_SpaceMoreTemplates" via "Draft.Tangent_Space" via "Draft.Partition_Of_Unity" via "Draft.Bump_Function" via "Draft.Smooth" via "Draft.Analysis_More" via "HOL-Analysis.Equivalence_Lebesgue_Henstock_Integration" via "HOL-Analysis.Lebesgue_Measure" via "HOL-Analysis.Finite_Product_Measure" via "HOL-Analysis.Binary_Product_Measure" via "HOL-Analysis.Nonnegative_Lebesgue_Integration" via "HOL-Analysis.Borel_Space" via "HOL-Analysis.Derivative" via "HOL-Analysis.Bounded_Linear_Function" via "HOL-Analysis.Topology_Euclidean_Space" via "HOL-Analysis.Elementary_Normed_Spaces" via "HOL-Analysis.Elementary_Metric_Spaces" via "HOL-Analysis.Abstract_Topology_2")
### theory "HOL-Library.BigO"
### 1.200s elapsed time, 4.529s cpu time, 1.474s GC time
Loading theory "HOL-Analysis.Continuum_Not_Denumerable" (required by "Draft.Tangent_SpaceMoreTemplates" via "Draft.Tangent_Space" via "Draft.Partition_Of_Unity" via "Draft.Bump_Function" via "Draft.Smooth" via "Draft.Analysis_More" via "HOL-Analysis.Equivalence_Lebesgue_Henstock_Integration" via "HOL-Analysis.Homeomorphism" via "HOL-Analysis.Homotopy")
locale finite_dimensional_vector_space_prod
  fixes s1 :: "'a => 'b => 'b"  (infixr \<open>*a\<close> 75)
    and s2 :: "'a => 'c => 'c"  (infixr \<open>*b\<close> 75)
    and B1 :: "'b set"
    and B2 :: "'c set"
  assumes "finite_dimensional_vector_space_prod (*a) (*b) B1 B2"
### theory "HOL-Analysis.Product_Vector"
### 1.286s elapsed time, 4.863s cpu time, 1.474s GC time
Loading theory "HOL-Analysis.Elementary_Topology" (required by "Draft.Tangent_SpaceMoreTemplates" via "Draft.Tangent_Space" via "Draft.Partition_Of_Unity" via "Draft.Bump_Function" via "Draft.Smooth" via "Draft.Analysis_More" via "HOL-Analysis.Equivalence_Lebesgue_Henstock_Integration" via "HOL-Analysis.Lebesgue_Measure" via "HOL-Analysis.Finite_Product_Measure" via "HOL-Analysis.Binary_Product_Measure" via "HOL-Analysis.Nonnegative_Lebesgue_Integration" via "HOL-Analysis.Borel_Space" via "HOL-Analysis.Derivative" via "HOL-Analysis.Bounded_Linear_Function" via "HOL-Analysis.Topology_Euclidean_Space" via "HOL-Analysis.Elementary_Normed_Spaces" via "HOL-Analysis.Elementary_Metric_Spaces" via "HOL-Analysis.Abstract_Topology_2")
### theory "HOL-Analysis.Continuum_Not_Denumerable"
### 0.298s elapsed time, 1.161s cpu time, 0.100s GC time
Loading theory "HOL-Analysis.Euclidean_Space" (required by "Draft.Tangent_SpaceMoreTemplates" via "Draft.Tangent_Space" via "Draft.Partition_Of_Unity" via "Draft.Bump_Function" via "Draft.Smooth" via "Draft.Analysis_More" via "HOL-Analysis.Equivalence_Lebesgue_Henstock_Integration" via "HOL-Analysis.Lebesgue_Measure" via "HOL-Analysis.Finite_Product_Measure" via "HOL-Analysis.Binary_Product_Measure" via "HOL-Analysis.Nonnegative_Lebesgue_Integration" via "HOL-Analysis.Borel_Space" via "HOL-Analysis.Derivative" via "HOL-Analysis.Bounded_Linear_Function" via "HOL-Analysis.Topology_Euclidean_Space" via "HOL-Analysis.Elementary_Normed_Spaces" via "HOL-Analysis.Cartesian_Space" via "HOL-Analysis.Finite_Cartesian_Product")
class countable_complete_distrib_lattice = countable_complete_lattice +
  assumes
    "sup_ccInf": "!!B a. countable B ==> sup a (Inf B) = Inf (sup a ` B)"
  assumes
    "inf_ccSup": "!!B a. countable B ==> inf a (Sup B) = Sup (inf a ` B)"
class topological_space = open +
  assumes "open_UNIV": "open UNIV"
  assumes "open_Int": "!!S T. [| open S; open T |] ==> open (S Int T)"
  assumes "open_Union": "!!K. Ball K open ==> open (\<Union> K)"
locale countable_basis
  fixes p :: "'a set => bool"
    and B :: "'a set set"
  assumes "countable_basis p B"
class second_countable_topology = topological_space +
  assumes
    "ex_countable_subbasis":
      "EX B. countable B & open = generate_topology B"
class euclidean_space = real_inner +
  fixes Basis :: "'a set"
  assumes "nonempty_Basis": "Basis ~= {}"
  assumes "finite_Basis": "finite Basis"
  assumes
    "inner_Basis":
      "!!u v.
          [| u : Basis; v : Basis |]
          ==> inner u v = (if u = v then 1 else 0)"
  assumes
    "euclidean_all_zero_iff":
      "!!x. (ALL u:Basis. inner x u = 0) = (x = (0::'a))"
### theory "HOL-Library.Countable_Complete_Lattices"
### 3.006s elapsed time, 11.433s cpu time, 3.457s GC time
Loading theory "Draft.ExtrEqs" (required by "Draft.Tangent_SpaceMoreTemplates")
instantiation
  real :: euclidean_space
  Basis_real == Basis :: real set
instantiation
  complex :: euclidean_space
  Basis_complex == Basis :: complex set
instantiation
  prod :: (real_inner, real_inner) real_inner
  inner_prod == inner :: 'a * 'b => 'a * 'b => real
instantiation
  prod :: (euclidean_space, euclidean_space) euclidean_space
  Basis_prod == Basis :: ('a * 'b) set
### Cannot skip proof of schematic goal statement
### Cannot skip proof of schematic goal statement
### theory "HOL-Analysis.Euclidean_Space"
### 2.591s elapsed time, 9.807s cpu time, 3.716s GC time
Loading theory "HOL-Analysis.Finite_Cartesian_Product" (required by "Draft.Tangent_SpaceMoreTemplates" via "Draft.Tangent_Space" via "Draft.Partition_Of_Unity" via "Draft.Bump_Function" via "Draft.Smooth" via "Draft.Analysis_More" via "HOL-Analysis.Equivalence_Lebesgue_Henstock_Integration" via "HOL-Analysis.Lebesgue_Measure" via "HOL-Analysis.Finite_Product_Measure" via "HOL-Analysis.Binary_Product_Measure" via "HOL-Analysis.Nonnegative_Lebesgue_Integration" via "HOL-Analysis.Borel_Space" via "HOL-Analysis.Derivative" via "HOL-Analysis.Bounded_Linear_Function" via "HOL-Analysis.Topology_Euclidean_Space" via "HOL-Analysis.Elementary_Normed_Spaces" via "HOL-Analysis.Cartesian_Space")
### theory "HOL-Analysis.Elementary_Topology"
### 2.836s elapsed time, 10.777s cpu time, 3.767s GC time
Loading theory "HOL-Analysis.Linear_Algebra" (required by "Draft.Tangent_SpaceMoreTemplates" via "Draft.Tangent_Space" via "Draft.Partition_Of_Unity" via "Draft.Bump_Function" via "Draft.Smooth" via "Draft.Analysis_More" via "HOL-Analysis.Equivalence_Lebesgue_Henstock_Integration" via "HOL-Analysis.Lebesgue_Measure" via "HOL-Analysis.Finite_Product_Measure" via "HOL-Analysis.Binary_Product_Measure" via "HOL-Analysis.Nonnegative_Lebesgue_Integration" via "HOL-Analysis.Borel_Space" via "HOL-Analysis.Derivative" via "HOL-Analysis.Bounded_Linear_Function" via "HOL-Analysis.Topology_Euclidean_Space" via "HOL-Analysis.Elementary_Normed_Spaces" via "HOL-Analysis.Cartesian_Space")
val eqpattern =
   Pattern
    (
       Const ("HOL.Trueprop", "bool => prop") $
         (Const ("HOL.eq", "?'a => ?'a => bool") $
           Var (("_dummy_", 1), "?'a") $ Var (("_dummy_", 2), "?'a"))
       ):
   term Find_Theorems.criterion
val badeqpattern = Pattern (Const ("Pure.eq", "?'a => ?'a => prop")):
   term Find_Theorems.criterion
val undefpattern =
   Pattern
    (
       Const ("HOL.Trueprop", "bool => prop") $
         (Const ("HOL.eq", "?'a => ?'a => bool") $
           Var (("_dummy_", 1), "?'a") $ Const ("HOL.undefined", "?'a"))
       ):
   term Find_Theorems.criterion
val thmpattern =
   Pattern
    (Const ("HOL.Trueprop", "bool => prop") $ Var (("_dummy_", 1), "bool")):
   term Find_Theorems.criterion
val badnames =
   ["*nitpick*", "*Nitpick*", "*full_exhaustive*", "*_def*", "Enum.finite*",
    "*Quickcheck*", "ATP*", "*Nunchaku*", "*Code*", "*BNF*", "*SMT*",
    "*.*.*"]:
   string list
val unwanted_names =
   [(false, Name "*nitpick*"), (false, Name "*Nitpick*"),
    (false, Name "*full_exhaustive*"), (false, Name "*_def*"),
    (false, Name "Enum.finite*"), (false, Name "*Quickcheck*"),
    (false, Name "ATP*"), (false, Name "*Nunchaku*"),
    (false, Name "*Code*"), (false, Name "*BNF*"), (false, Name "*SMT*"),
    (false, Name "*.*.*")]:
   (bool * term Find_Theorems.criterion) list
val has_vars = fn: term -> bool
val get_all_eqs = fn: string -> Proof.context -> (string * thm) list
val get_all_thms = fn: string -> Proof.context -> (string * thm) list
val get_noneq_thms = fn: string -> Proof.context -> (string * thm) list
val template_eqs = fn:
   string -> Proof.context -> (string * thm * template) list
val template_thms = fn:
   string -> Proof.context -> (string * thm * template) list
### theory "Draft.ExtrEqs"
### 1.167s elapsed time, 4.397s cpu time, 1.888s GC time
Loading theory "HOL-Library.Discrete" (required by "Draft.Tangent_SpaceMoreTemplates" via "Draft.Tangent_Space" via "Draft.Partition_Of_Unity" via "Draft.Bump_Function" via "Draft.Smooth" via "Draft.Analysis_More" via "HOL-Analysis.Equivalence_Lebesgue_Henstock_Integration" via "HOL-Analysis.Lebesgue_Measure" via "HOL-Analysis.Finite_Product_Measure" via "HOL-Analysis.Binary_Product_Measure" via "HOL-Analysis.Nonnegative_Lebesgue_Integration" via "HOL-Analysis.Borel_Space" via "HOL-Analysis.Derivative" via "HOL-Analysis.Bounded_Linear_Function" via "HOL-Analysis.Uniform_Limit" via "HOL-Analysis.Summation_Tests")
### Rewrite rule not in simpset:
### Wellfounded.accp log_rel ?n1 ==>
### log ?n1 == if ?n1 < 2 then 0 else Suc (log (?n1 div 2))
Found termination order: "size <*mlex*> {}"
Proofs for inductive predicate(s) "generate_topology_on"
  Proving monotonicity ...
### theory "HOL-Library.Discrete"
### 0.187s elapsed time, 0.743s cpu time, 0.062s GC time
Loading theory "HOL-Library.Indicator_Function" (required by "Draft.Tangent_SpaceMoreTemplates" via "Draft.Tangent_Space" via "Draft.Partition_Of_Unity" via "Draft.Bump_Function" via "Draft.Smooth" via "Draft.Analysis_More" via "HOL-Analysis.Equivalence_Lebesgue_Henstock_Integration" via "HOL-Analysis.Lebesgue_Measure" via "HOL-Analysis.Finite_Product_Measure" via "HOL-Analysis.Binary_Product_Measure" via "HOL-Analysis.Nonnegative_Lebesgue_Integration" via "HOL-Analysis.Measure_Space" via "HOL-Analysis.Measurable" via "HOL-Analysis.Sigma_Algebra")
### theory "HOL-Analysis.Abstract_Topology"
### 3.866s elapsed time, 14.627s cpu time, 5.231s GC time
Loading theory "HOL-Analysis.Abstract_Limits" (required by "Draft.Tangent_SpaceMoreTemplates" via "Draft.Tangent_Space" via "Draft.Partition_Of_Unity" via "Draft.Bump_Function" via "Draft.Smooth" via "Draft.Analysis_More" via "HOL-Analysis.Equivalence_Lebesgue_Henstock_Integration" via "HOL-Analysis.Lebesgue_Measure" via "HOL-Analysis.Finite_Product_Measure" via "HOL-Analysis.Binary_Product_Measure" via "HOL-Analysis.Nonnegative_Lebesgue_Integration" via "HOL-Analysis.Borel_Space" via "HOL-Analysis.Derivative" via "HOL-Analysis.Bounded_Linear_Function" via "HOL-Analysis.Function_Topology")
class real_inner = real_normed_vector +
  fixes inner :: "'a => 'a => real"
  assumes "inner_commute": "!!x y. x \<bullet> y = y \<bullet> x"
    and
    "inner_add_left":
      "!!x y z. (x + y) \<bullet> z = x \<bullet> z + y \<bullet> z"
    and
    "inner_scaleR_left":
      "!!r x y. r *\<^sub>R x \<bullet> y = r * (x \<bullet> y)"
    and "inner_ge_zero": "!!x. 0 <= x \<bullet> x"
    and "inner_eq_zero_iff": "!!x. (x \<bullet> x = 0) = (x = (0::'a))"
    and "norm_eq_sqrt_inner": "!!x. norm x = sqrt (x \<bullet> x)"
### theory "HOL-Analysis.Abstract_Limits"
### 0.227s elapsed time, 0.906s cpu time, 0.064s GC time
Loading theory "HOL-Library.Liminf_Limsup" (required by "Draft.Tangent_SpaceMoreTemplates" via "Draft.Tangent_Space" via "Draft.Partition_Of_Unity" via "Draft.Bump_Function" via "Draft.Smooth" via "Draft.Analysis_More" via "HOL-Analysis.Equivalence_Lebesgue_Henstock_Integration" via "HOL-Analysis.Lebesgue_Measure" via "HOL-Analysis.Finite_Product_Measure" via "HOL-Analysis.Binary_Product_Measure" via "HOL-Analysis.Nonnegative_Lebesgue_Integration" via "HOL-Analysis.Measure_Space" via "HOL-Analysis.Measurable" via "HOL-Analysis.Sigma_Algebra" via "HOL-Library.Extended_Nonnegative_Real" via "HOL-Library.Extended_Real")
### theory "HOL-Library.Indicator_Function"
### 0.411s elapsed time, 1.626s cpu time, 0.141s GC time
Loading theory "HOL-Analysis.Abstract_Topology_2" (required by "Draft.Tangent_SpaceMoreTemplates" via "Draft.Tangent_Space" via "Draft.Partition_Of_Unity" via "Draft.Bump_Function" via "Draft.Smooth" via "Draft.Analysis_More" via "HOL-Analysis.Equivalence_Lebesgue_Henstock_Integration" via "HOL-Analysis.Lebesgue_Measure" via "HOL-Analysis.Finite_Product_Measure" via "HOL-Analysis.Binary_Product_Measure" via "HOL-Analysis.Nonnegative_Lebesgue_Integration" via "HOL-Analysis.Borel_Space" via "HOL-Analysis.Derivative" via "HOL-Analysis.Bounded_Linear_Function" via "HOL-Analysis.Topology_Euclidean_Space" via "HOL-Analysis.Elementary_Normed_Spaces" via "HOL-Analysis.Elementary_Metric_Spaces")
bundle vec_syntax
bundle no_vec_syntax
instantiation
  vec :: (zero, finite) zero
  zero_vec == zero_class.zero :: ('a, 'b) vec
instantiation
  vec :: (plus, finite) plus
  plus_vec == plus :: ('a, 'b) vec => ('a, 'b) vec => ('a, 'b) vec
instantiation
  vec :: (minus, finite) minus
  minus_vec == minus :: ('a, 'b) vec => ('a, 'b) vec => ('a, 'b) vec
instantiation
  vec :: (uminus, finite) uminus
  uminus_vec == uminus :: ('a, 'b) vec => ('a, 'b) vec
instantiation
  vec :: (times, finite) times
  times_vec == times :: ('a, 'b) vec => ('a, 'b) vec => ('a, 'b) vec
instantiation
  vec :: (one, finite) one
  one_vec == one_class.one :: ('a, 'b) vec
instantiation
  vec :: (ord, finite) ord
  less_eq_vec == less_eq :: ('a, 'b) vec => ('a, 'b) vec => bool
  less_vec == less :: ('a, 'b) vec => ('a, 'b) vec => bool
### theory "HOL-Analysis.Linear_Algebra"
### 1.013s elapsed time, 3.999s cpu time, 0.448s GC time
Loading theory "HOL-Analysis.Affine" (required by "Draft.Tangent_SpaceMoreTemplates" via "Draft.Tangent_Space" via "Draft.Partition_Of_Unity" via "Draft.Bump_Function" via "Draft.Smooth" via "Draft.Analysis_More" via "HOL-Analysis.Equivalence_Lebesgue_Henstock_Integration" via "HOL-Analysis.Lebesgue_Measure" via "HOL-Analysis.Finite_Product_Measure" via "HOL-Analysis.Binary_Product_Measure" via "HOL-Analysis.Nonnegative_Lebesgue_Integration" via "HOL-Analysis.Borel_Space" via "HOL-Analysis.Derivative" via "HOL-Analysis.Line_Segment" via "HOL-Analysis.Convex")
instantiation
  vec :: (real_vector, finite) real_vector
  scaleR_vec == scaleR :: real => ('a, 'b) vec => ('a, 'b) vec
instantiation
  vec :: (topological_space, finite) topological_space
  open_vec == open :: ('a, 'b) vec set => bool
instantiation
  vec :: (metric_space, finite) dist
  dist_vec == dist :: ('a, 'b) vec => ('a, 'b) vec => real
instantiation
  vec :: (metric_space, finite) uniformity_dist
  uniformity_vec == uniformity :: (('a, 'b) vec * ('a, 'b) vec) filter
instantiation
  vec :: (metric_space, finite) metric_space
instantiation
  vec :: (real_normed_vector, finite) real_normed_vector
  sgn_vec == sgn :: ('a, 'b) vec => ('a, 'b) vec
  norm_vec == norm :: ('a, 'b) vec => real
### theory "HOL-Library.Liminf_Limsup"
### 0.550s elapsed time, 2.172s cpu time, 0.309s GC time
Loading theory "HOL-Library.Order_Continuity" (required by "Draft.Tangent_SpaceMoreTemplates" via "Draft.Tangent_Space" via "Draft.Partition_Of_Unity" via "Draft.Bump_Function" via "Draft.Smooth" via "Draft.Analysis_More" via "HOL-Analysis.Equivalence_Lebesgue_Henstock_Integration" via "HOL-Analysis.Lebesgue_Measure" via "HOL-Analysis.Finite_Product_Measure" via "HOL-Analysis.Binary_Product_Measure" via "HOL-Analysis.Nonnegative_Lebesgue_Integration" via "HOL-Analysis.Measure_Space" via "HOL-Analysis.Measurable" via "HOL-Analysis.Sigma_Algebra" via "HOL-Library.Extended_Nonnegative_Real" via "HOL-Library.Extended_Real" via "HOL-Library.Extended_Nat")
instantiation
  vec :: (real_inner, finite) real_inner
  inner_vec == inner :: ('a, 'b) vec => ('a, 'b) vec => real
instantiation
  vec :: (euclidean_space, finite) euclidean_space
  Basis_vec == Basis :: ('a, 'b) vec set
### theory "HOL-Analysis.Affine"
### 0.528s elapsed time, 2.082s cpu time, 0.387s GC time
Loading theory "HOL-Analysis.Convex" (required by "Draft.Tangent_SpaceMoreTemplates" via "Draft.Tangent_Space" via "Draft.Partition_Of_Unity" via "Draft.Bump_Function" via "Draft.Smooth" via "Draft.Analysis_More" via "HOL-Analysis.Equivalence_Lebesgue_Henstock_Integration" via "HOL-Analysis.Lebesgue_Measure" via "HOL-Analysis.Finite_Product_Measure" via "HOL-Analysis.Binary_Product_Measure" via "HOL-Analysis.Nonnegative_Lebesgue_Integration" via "HOL-Analysis.Borel_Space" via "HOL-Analysis.Derivative" via "HOL-Analysis.Line_Segment")
### theory "HOL-Analysis.Finite_Cartesian_Product"
### 1.789s elapsed time, 7.039s cpu time, 0.979s GC time
Loading theory "HOL-Analysis.Cartesian_Space" (required by "Draft.Tangent_SpaceMoreTemplates" via "Draft.Tangent_Space" via "Draft.Partition_Of_Unity" via "Draft.Bump_Function" via "Draft.Smooth" via "Draft.Analysis_More" via "HOL-Analysis.Equivalence_Lebesgue_Henstock_Integration" via "HOL-Analysis.Lebesgue_Measure" via "HOL-Analysis.Finite_Product_Measure" via "HOL-Analysis.Binary_Product_Measure" via "HOL-Analysis.Nonnegative_Lebesgue_Integration" via "HOL-Analysis.Borel_Space" via "HOL-Analysis.Derivative" via "HOL-Analysis.Bounded_Linear_Function" via "HOL-Analysis.Topology_Euclidean_Space" via "HOL-Analysis.Elementary_Normed_Spaces")
### theory "HOL-Library.Order_Continuity"
### 0.661s elapsed time, 2.603s cpu time, 0.437s GC time
Loading theory "HOL-Library.Extended_Nat" (required by "Draft.Tangent_SpaceMoreTemplates" via "Draft.Tangent_Space" via "Draft.Partition_Of_Unity" via "Draft.Bump_Function" via "Draft.Smooth" via "Draft.Analysis_More" via "HOL-Analysis.Equivalence_Lebesgue_Henstock_Integration" via "HOL-Analysis.Lebesgue_Measure" via "HOL-Analysis.Finite_Product_Measure" via "HOL-Analysis.Binary_Product_Measure" via "HOL-Analysis.Nonnegative_Lebesgue_Integration" via "HOL-Analysis.Measure_Space" via "HOL-Analysis.Measurable" via "HOL-Analysis.Sigma_Algebra" via "HOL-Library.Extended_Nonnegative_Real" via "HOL-Library.Extended_Real")
class infinity = type +
  fixes infinity :: "'a"
instantiation
  enat :: infinity
  infinity_enat == infinity :: enat
Proofs for inductive predicate(s) "rec_set_enat"
### theory "HOL-Analysis.Abstract_Topology_2"
### 1.429s elapsed time, 5.637s cpu time, 0.834s GC time
Loading theory "HOL-Analysis.Connected" (required by "Draft.Tangent_SpaceMoreTemplates" via "Draft.Tangent_Space" via "Draft.Partition_Of_Unity" via "Draft.Bump_Function" via "Draft.Smooth" via "Draft.Analysis_More" via "HOL-Analysis.Equivalence_Lebesgue_Henstock_Integration" via "HOL-Analysis.Lebesgue_Measure" via "HOL-Analysis.Finite_Product_Measure" via "HOL-Analysis.Binary_Product_Measure" via "HOL-Analysis.Nonnegative_Lebesgue_Integration" via "HOL-Analysis.Borel_Space" via "HOL-Analysis.Derivative" via "HOL-Analysis.Bounded_Linear_Function" via "HOL-Analysis.Topology_Euclidean_Space" via "HOL-Analysis.Elementary_Normed_Spaces")
### No equation for constructor "Extended_Nat.infinity_class.infinity"
### in definition of function "the_enat"
consts
  the_enat :: "enat => nat"
instantiation
  enat :: zero_neq_one
  one_enat == one_class.one :: enat
  zero_enat == zero_class.zero :: enat
instantiation
  enat :: comm_monoid_add
  plus_enat == plus :: enat => enat => enat
instantiation
  enat :: {comm_semiring_1,semiring_no_zero_divisors}
  times_enat == times :: enat => enat => enat
instantiation
  enat :: minus
  minus_enat == minus :: enat => enat => enat
instantiation
  enat :: linordered_ab_semigroup_add
  less_eq_enat == less_eq :: enat => enat => bool
  less_enat == less :: enat => enat => bool
### theory "HOL-Analysis.Connected"
### 0.344s elapsed time, 1.361s cpu time, 0.226s GC time
Loading theory "HOL-Analysis.Function_Topology" (required by "Draft.Tangent_SpaceMoreTemplates" via "Draft.Tangent_Space" via "Draft.Partition_Of_Unity" via "Draft.Bump_Function" via "Draft.Smooth" via "Draft.Analysis_More" via "HOL-Analysis.Equivalence_Lebesgue_Henstock_Integration" via "HOL-Analysis.Lebesgue_Measure" via "HOL-Analysis.Finite_Product_Measure" via "HOL-Analysis.Binary_Product_Measure" via "HOL-Analysis.Nonnegative_Lebesgue_Integration" via "HOL-Analysis.Borel_Space" via "HOL-Analysis.Derivative" via "HOL-Analysis.Bounded_Linear_Function")
instantiation
  enat :: {order_bot,order_top}
  top_enat == top :: enat
  bot_enat == bot :: enat
structure Cancel_Enat_Common:
  sig
    val dest_sum: term -> term list
    val dest_summing: term * term list -> term list
    val find_first: term -> term list -> term list
    val find_first_t: term list -> term -> term list -> term list
    val mk_eq: term * term -> term
    val mk_sum: typ -> term list -> term
    val norm_ss: simpset
    val norm_tac: Proof.context -> tactic
    val simplify_meta_eq: Proof.context -> thm -> thm -> thm
    val trans_tac: Proof.context -> thm option -> tactic
  end
structure Eq_Enat_Cancel:
  sig val proc: Proof.context -> term -> thm option end
structure Le_Enat_Cancel:
  sig val proc: Proof.context -> term -> thm option end
structure Less_Enat_Cancel:
  sig val proc: Proof.context -> term -> thm option end
instantiation
  enat :: complete_lattice
  Inf_enat == Inf :: enat set => enat
  Sup_enat == Sup :: enat set => enat
  sup_enat == sup :: enat => enat => enat
  inf_enat == inf :: enat => enat => enat
### theory "HOL-Library.Extended_Nat"
### 0.724s elapsed time, 2.876s cpu time, 0.313s GC time
Loading theory "HOL-Analysis.Elementary_Metric_Spaces" (required by "Draft.Tangent_SpaceMoreTemplates" via "Draft.Tangent_Space" via "Draft.Partition_Of_Unity" via "Draft.Bump_Function" via "Draft.Smooth" via "Draft.Analysis_More" via "HOL-Analysis.Equivalence_Lebesgue_Henstock_Integration" via "HOL-Analysis.Lebesgue_Measure" via "HOL-Analysis.Finite_Product_Measure" via "HOL-Analysis.Binary_Product_Measure" via "HOL-Analysis.Nonnegative_Lebesgue_Integration" via "HOL-Analysis.Borel_Space" via "HOL-Analysis.Derivative" via "HOL-Analysis.Bounded_Linear_Function" via "HOL-Analysis.Topology_Euclidean_Space" via "HOL-Analysis.Elementary_Normed_Spaces")
### theory "HOL-Analysis.Convex"
### 1.054s elapsed time, 4.154s cpu time, 0.622s GC time
Loading theory "HOL-Library.Extended_Real" (required by "Draft.Tangent_SpaceMoreTemplates" via "Draft.Tangent_Space" via "Draft.Partition_Of_Unity" via "Draft.Bump_Function" via "Draft.Smooth" via "Draft.Analysis_More" via "HOL-Analysis.Equivalence_Lebesgue_Henstock_Integration" via "HOL-Analysis.Lebesgue_Measure" via "HOL-Analysis.Finite_Product_Measure" via "HOL-Analysis.Binary_Product_Measure" via "HOL-Analysis.Nonnegative_Lebesgue_Integration" via "HOL-Analysis.Measure_Space" via "HOL-Analysis.Measurable" via "HOL-Analysis.Sigma_Algebra" via "HOL-Library.Extended_Nonnegative_Real")
instantiation
  fun :: (type, topological_space) topological_space
  open_fun == open :: ('a => 'b) set => bool
instantiation
  enat :: linorder_topology
  open_enat == open :: enat set => bool
locale linear_first_finite_dimensional_vector_space
  fixes scaleB :: "'a => 'b => 'b"  (infixr \<open>*b\<close> 75)
    and scaleC :: "'a => 'c => 'c"  (infixr \<open>*c\<close> 75)
    and BasisB :: "'b set"
    and f :: "'b => 'c"
  assumes "linear_first_finite_dimensional_vector_space (*b) (*c) BasisB f"
### theory "HOL-Analysis.Function_Topology"
### 0.723s elapsed time, 2.846s cpu time, 0.401s GC time
Loading theory "HOL-Analysis.Product_Topology" (required by "Draft.Tangent_SpaceMoreTemplates" via "Draft.Tangent_Space" via "Draft.Partition_Of_Unity" via "Draft.Bump_Function" via "Draft.Smooth" via "Draft.Analysis_More" via "HOL-Analysis.Equivalence_Lebesgue_Henstock_Integration" via "HOL-Analysis.Homeomorphism" via "HOL-Analysis.Homotopy" via "HOL-Analysis.Path_Connected" via "HOL-Analysis.T1_Spaces")
instantiation
  ereal :: uminus
  uminus_ereal == uminus :: ereal => ereal
### theory "HOL-Analysis.Product_Topology"
### 0.305s elapsed time, 1.201s cpu time, 0.225s GC time
Loading theory "HOL-Analysis.T1_Spaces" (required by "Draft.Tangent_SpaceMoreTemplates" via "Draft.Tangent_Space" via "Draft.Partition_Of_Unity" via "Draft.Bump_Function" via "Draft.Smooth" via "Draft.Analysis_More" via "HOL-Analysis.Equivalence_Lebesgue_Henstock_Integration" via "HOL-Analysis.Homeomorphism" via "HOL-Analysis.Homotopy" via "HOL-Analysis.Path_Connected")
### theory "HOL-Analysis.Cartesian_Space"
### 1.747s elapsed time, 6.895s cpu time, 1.035s GC time
Loading theory "HOL-Library.Sum_of_Squares" (required by "Draft.Tangent_SpaceMoreTemplates" via "Draft.Tangent_Space" via "Draft.Partition_Of_Unity" via "Draft.Bump_Function" via "Draft.Smooth" via "Draft.Analysis_More" via "HOL-Analysis.Equivalence_Lebesgue_Henstock_Integration" via "HOL-Analysis.Lebesgue_Measure" via "HOL-Analysis.Finite_Product_Measure" via "HOL-Analysis.Binary_Product_Measure" via "HOL-Analysis.Nonnegative_Lebesgue_Integration" via "HOL-Analysis.Borel_Space" via "HOL-Analysis.Derivative" via "HOL-Analysis.Bounded_Linear_Function" via "HOL-Analysis.Topology_Euclidean_Space" via "HOL-Analysis.Norm_Arith")
Found termination order: "{}"
instantiation
  ereal :: infinity
  infinity_ereal == infinity :: ereal
instantiation
  ereal :: abs
  abs_ereal == abs :: ereal => ereal
class heine_borel = metric_space +
  assumes
    "bounded_imp_convergent_subsequence":
      "!!f. bounded (range f) ==>
            EX l r. strict_mono r & (f o r) \<longlonglongrightarrow> l"
instantiation
  ereal :: {comm_monoid_add,zero_neq_one}
  one_ereal == one_class.one :: ereal
  zero_ereal == zero_class.zero :: ereal
  plus_ereal == plus :: ereal => ereal => ereal
### theory "HOL-Analysis.T1_Spaces"
### 0.324s elapsed time, 1.279s cpu time, 0.215s GC time
Loading theory "HOL-Types_To_Sets.Linear_Algebra_On_With" (required by "Draft.Tangent_SpaceMoreTemplates" via "Draft.Tangent_Space" via "Draft.Partition_Of_Unity" via "Draft.Bump_Function" via "Draft.Smooth" via "Draft.Analysis_More" via "HOL-Types_To_Sets.Linear_Algebra_On")
instantiation
  ereal :: linorder
  less_eq_ereal == less_eq :: ereal => ereal => bool
  less_ereal == less :: ereal => ereal => bool
instantiation
  ereal :: {comm_monoid_mult,sgn}
  sgn_ereal == sgn :: ereal => ereal
  times_ereal == times :: ereal => ereal => ereal
### ML warning (line 261 of "~~/src/HOL/Library/Sum_of_Squares/positivstellensatz.ML"):
### Value identifier (pth_abs) has not been referenced.
### ML warning (line 265 of "~~/src/HOL/Library/Sum_of_Squares/positivstellensatz.ML"):
### Value identifier (pth_max) has not been referenced.
### ML warning (line 269 of "~~/src/HOL/Library/Sum_of_Squares/positivstellensatz.ML"):
### Value identifier (pth_min) has not been referenced.
### ML warning (line 379 of "~~/src/HOL/Library/Sum_of_Squares/positivstellensatz.ML"):
### Pattern is not exhaustive.
signature FUNC =
  sig
    exception DUP of key
    exception SAME
    exception UNDEF of key
    val apply: 'a table -> key -> 'a
    val applyd: 'a table -> (key -> 'a) -> key -> 'a
    val build: ('a table -> 'a table) -> 'a table
    val choose: 'a table -> key * 'a
    val combine:
       ('a -> 'a -> 'a) -> ('a -> bool) -> 'a table -> 'a table -> 'a table
    val cons_list: key * 'a -> 'a list table -> 'a list table
    val default: key * 'a -> 'a table -> 'a table
    val defined: 'a table -> key -> bool
    val delete: key -> 'a table -> 'a table
    val delete_safe: key -> 'a table -> 'a table
    val dest: 'a table -> (key * 'a) list
    val dest_list: 'a list table -> (key * 'a) list
    val dom: 'a table -> key list
    val empty: 'a table
    val exists: (key * 'a -> bool) -> 'a table -> bool
    val fold: (key * 'a -> 'b -> 'b) -> 'a table -> 'b -> 'b
    val fold_rev: (key * 'a -> 'b -> 'b) -> 'a table -> 'b -> 'b
    val forall: (key * 'a -> bool) -> 'a table -> bool
    val get_first: (key * 'a -> 'b option) -> 'a table -> 'b option
    val insert: ('a * 'a -> bool) -> key * 'a -> 'a table -> 'a table
    val insert_list:
       ('a * 'a -> bool) -> key * 'a -> 'a list table -> 'a list table
    val insert_set: key -> set -> set
    val is_empty: 'a table -> bool
    val is_single: 'a table -> bool
    val join: (key -> 'a * 'a -> 'a) -> 'a table * 'a table -> 'a table
    type key
    val keys: 'a table -> key list
    val lookup: 'a table -> key -> 'a option
    val lookup_key: 'a table -> key -> (key * 'a) option
    val lookup_list: 'a list table -> key -> 'a list
    val make: (key * 'a) list -> 'a table
    val make_list: (key * 'a) list -> 'a list table
    val make_set: key list -> set
    val map: (key -> 'a -> 'b) -> 'a table -> 'b table
    val map_default: key * 'a -> ('a -> 'a) -> 'a table -> 'a table
    val map_entry: key -> ('a -> 'a) -> 'a table -> 'a table
    val max: 'a table -> (key * 'a) option
    val member: ('a * 'b -> bool) -> 'b table -> key * 'a -> bool
    val merge: ('a * 'a -> bool) -> 'a table * 'a table -> 'a table
    val merge_list:
       ('a * 'a -> bool) -> 'a list table * 'a list table -> 'a list table
    val min: 'a table -> (key * 'a) option
    val onefunc: key * 'a -> 'a table
    val remove: ('a * 'b -> bool) -> key * 'a -> 'b table -> 'b table
    val remove_list:
       ('a * 'b -> bool) -> key * 'a -> 'b list table -> 'b list table
    val remove_set: key -> set -> set
    type set = unit table
    type 'a table
    val tryapplyd: 'a table -> key -> 'a -> 'a
    val update: key * 'a -> 'a table -> 'a table
    val update_list:
       ('a * 'a -> bool) -> key * 'a -> 'a list table -> 'a list table
    val update_new: key * 'a -> 'a table -> 'a table
    val updatep: (key * 'a -> bool) -> key * 'a -> 'a table -> 'a table
  end
functor FuncFun (Key: KEY): FUNC
signature REAL_ARITH =
  sig
    type cert_conv = cterm -> thm * pss_tree
    val cterm_of_rat: Rat.rat -> cterm
    val dest_ratconst: cterm -> Rat.rat
    val gen_gen_real_arith:
       Proof.context ->
         (Rat.rat -> cterm) * conv * conv * conv * conv * conv * conv *
         conv * conv * conv * prover
           -> cert_conv
    val gen_prover_real_arith: Proof.context -> prover -> cert_conv
    val gen_real_arith:
       Proof.context ->
         (Rat.rat -> cterm) * conv * conv * conv * conv * conv * conv *
         conv * prover
           -> cert_conv
    val is_ratconst: cterm -> bool
    datatype positivstellensatz
    =
         Axiom_eq of int
       | Axiom_le of int
       | Axiom_lt of int
       | Eqmul of FuncUtil.poly * positivstellensatz
       | Product of positivstellensatz * positivstellensatz
       | Rational_eq of Rat.rat
       | Rational_le of Rat.rat
       | Rational_lt of Rat.rat
       | Square of FuncUtil.poly
       | Sum of positivstellensatz * positivstellensatz
    type prover =
       tree_choice list ->
         (thm list * thm list * thm list -> positivstellensatz -> thm) ->
           thm list * thm list * thm list -> thm * pss_tree
    datatype pss_tree
    = Branch of pss_tree * pss_tree | Cert of positivstellensatz | Trivial
    val real_linear_prover:
       (thm list * thm list * thm list -> positivstellensatz -> thm) ->
         thm list * thm list * thm list -> thm * pss_tree
    datatype tree_choice = Left | Right
  end
structure FuncUtil:
  sig
    structure Ctermfunc: FUNC
    structure Intfunc: FUNC
    structure Intpairfunc: FUNC
    structure Monomialfunc: FUNC
    structure Ratfunc: FUNC
    structure Symfunc: FUNC
    structure Termfunc: FUNC
    val dest_monomial: 'a Ctermfunc.table -> (cterm * 'a) list
    type monomial = int Ctermfunc.table
    val monomial_ord: int Ctermfunc.table * int Ctermfunc.table -> order
    val monomial_order: int Ctermfunc.table * int Ctermfunc.table -> order
    type poly = Rat.rat Monomialfunc.table
  end
structure RealArith: REAL_ARITH
instantiation
  ereal :: minus
  minus_ereal == minus :: ereal => ereal => ereal
locale module
  fixes scale :: "'a => 'b => 'b"  (infixr \<open>*s\<close> 75)
  assumes "module (*s)"
instantiation
  ereal :: inverse
  inverse_ereal == inverse :: ereal => ereal
  divide_ereal == divide :: ereal => ereal => ereal
signature POSITIVSTELLENSATZ_TOOLS =
  sig
    val print_cert: RealArith.pss_tree -> string
    val read_cert: Proof.context -> string -> RealArith.pss_tree
  end
structure Positivstellensatz_Tools: POSITIVSTELLENSATZ_TOOLS
locale vector_space
  fixes scale :: "'a => 'b => 'b"  (infixr \<open>*s\<close> 75)
  assumes "vector_space (*s)"
### theory "HOL-Analysis.Elementary_Metric_Spaces"
### 1.944s elapsed time, 7.682s cpu time, 1.035s GC time
Loading theory "HOL-Analysis.Elementary_Normed_Spaces" (required by "Draft.Tangent_SpaceMoreTemplates" via "Draft.Tangent_Space" via "Draft.Partition_Of_Unity" via "Draft.Bump_Function" via "Draft.Smooth" via "Draft.Analysis_More" via "HOL-Analysis.Equivalence_Lebesgue_Henstock_Integration" via "HOL-Analysis.Lebesgue_Measure" via "HOL-Analysis.Finite_Product_Measure" via "HOL-Analysis.Binary_Product_Measure" via "HOL-Analysis.Nonnegative_Lebesgue_Integration" via "HOL-Analysis.Borel_Space" via "HOL-Analysis.Derivative" via "HOL-Analysis.Bounded_Linear_Function" via "HOL-Analysis.Topology_Euclidean_Space")
instantiation
  ereal :: lattice
  inf_ereal == inf :: ereal => ereal => ereal
  sup_ereal == sup :: ereal => ereal => ereal
instantiation
  ereal :: complete_lattice
  Inf_ereal == Inf :: ereal set => ereal
  Sup_ereal == Sup :: ereal set => ereal
  bot_ereal == bot :: ereal
  top_ereal == top :: ereal
instantiation
  ereal :: linear_continuum_topology
  open_ereal == open :: ereal set => bool
### theory "HOL-Types_To_Sets.Linear_Algebra_On_With"
### 1.071s elapsed time, 4.228s cpu time, 0.499s GC time
Loading theory "HOL-Types_To_Sets.Linear_Algebra_On" (required by "Draft.Tangent_SpaceMoreTemplates" via "Draft.Tangent_Space" via "Draft.Partition_Of_Unity" via "Draft.Bump_Function" via "Draft.Smooth" via "Draft.Analysis_More")
signature SUM_OF_SQUARES =
  sig
    exception Failure of string
    val debug: bool Config.T
    val debug_message: Proof.context -> (unit -> string) -> unit
    datatype proof_method
    = Certificate of RealArith.pss_tree | Prover of string -> string
    val sos_tac:
       (RealArith.pss_tree -> unit) ->
         proof_method -> Proof.context -> int -> tactic
    val trace: bool Config.T
    val trace_message: Proof.context -> (unit -> string) -> unit
  end
structure Sum_of_Squares: SUM_OF_SQUARES
signature SOS_WRAPPER =
  sig val sos_tac: Proof.context -> string option -> int -> tactic end
structure SOS_Wrapper: SOS_WRAPPER
### theory "HOL-Library.Sum_of_Squares"
### 1.445s elapsed time, 5.699s cpu time, 0.714s GC time
Loading theory "HOL-Analysis.Norm_Arith" (required by "Draft.Tangent_SpaceMoreTemplates" via "Draft.Tangent_Space" via "Draft.Partition_Of_Unity" via "Draft.Bump_Function" via "Draft.Smooth" via "Draft.Analysis_More" via "HOL-Analysis.Equivalence_Lebesgue_Henstock_Integration" via "HOL-Analysis.Lebesgue_Measure" via "HOL-Analysis.Finite_Product_Measure" via "HOL-Analysis.Binary_Product_Measure" via "HOL-Analysis.Nonnegative_Lebesgue_Integration" via "HOL-Analysis.Borel_Space" via "HOL-Analysis.Derivative" via "HOL-Analysis.Bounded_Linear_Function" via "HOL-Analysis.Topology_Euclidean_Space")
locale module_on
  fixes S :: "'b set"
    and scale :: "'a => 'b => 'b"  (infixr \<open>*s\<close> 75)
  assumes "module_on S (*s)"
locale module_pair_on
  fixes S1 :: "'b set"
    and S2 :: "'c set"
    and scale1 :: "'a => 'b => 'b"
    and scale2 :: "'a => 'c => 'c"
  assumes "module_pair_on S1 S2 scale1 scale2"
locale module_hom_on
  fixes S1 :: "'b set"
    and S2 :: "'c set"
    and s1 :: "'a => 'b => 'b"  (infixr \<open>*a\<close> 75)
    and s2 :: "'a => 'c => 'c"  (infixr \<open>*b\<close> 75)
    and f :: "'b => 'c"
  assumes "module_hom_on S1 S2 (*a) (*b) f"
locale vector_space_on
  fixes S :: "'b set"
    and scale :: "'a => 'b => 'b"  (infixr \<open>*s\<close> 75)
  assumes "vector_space_on S (*s)"
### ML warning (line 103 of "~~/src/HOL/Analysis/normarith.ML"):
### Matches are not exhaustive.
signature NORM_ARITH =
  sig
    val norm_arith: Proof.context -> conv
    val norm_arith_tac: Proof.context -> int -> tactic
  end
structure NormArith: NORM_ARITH
### theory "HOL-Analysis.Norm_Arith"
### 0.294s elapsed time, 1.159s cpu time, 0.105s GC time
locale linear_on
  fixes S1 :: "'b set"
    and S2 :: "'c set"
    and s1 :: "'a => 'b => 'b"
    and s2 :: "'a => 'c => 'c"
    and f :: "'b => 'c"
  assumes "linear_on S1 S2 s1 s2 f"
locale finite_dimensional_vector_space_on
  fixes S :: "'a set"
    and scale :: "'b => 'a => 'a"
    and basis :: "'a set"
  assumes "finite_dimensional_vector_space_on S scale basis"
locale vector_space_pair_on
  fixes S1 :: "'b set"
    and S2 :: "'c set"
    and scale1 :: "'a => 'b => 'b"
    and scale2 :: "'a => 'c => 'c"
  assumes "vector_space_pair_on S1 S2 scale1 scale2"
locale ab_group_add
  fixes plus :: "'a => 'a => 'a"
    and zero :: "'a"
    and minus :: "'a => 'a => 'a"
    and uminus :: "'a => 'a"
  assumes "class.ab_group_add plus zero minus uminus"
  notes
    "add.semigroup_axioms" = (\<open>semigroup plus\<close>)
      ["attribute" "<attribute>"]
  notes
    "add.assoc" =
      (\<open>plus (plus ?a ?b) ?c = plus ?a (plus ?b ?c)\<close>)
      ["ac_simps"]
  notes
    "semigroup_add_axioms" = (\<open>class.semigroup_add plus\<close>)
      ["attribute" "<attribute>"]
  notes
    "add_assoc" =
      (\<open>plus (plus ?a ?b) ?c = plus ?a (plus ?b ?c)\<close>)
      ["algebra_simps", "algebra_split_simps", "field_simps",
        "field_split_simps"]
  notes
    "add.abel_semigroup_axioms" = (\<open>abel_semigroup plus\<close>)
      ["attribute" "<attribute>"]
  notes
    "add.commute" = (\<open>plus ?a ?b = plus ?b ?a\<close>) ["ac_simps"]
  notes theorem
    "add.left_commute" =
      (\<open>plus ?b (plus ?a ?c) = plus ?a (plus ?b ?c)\<close>)
      ["ac_simps"]
  notes
    "ab_semigroup_add_axioms" = (\<open>class.ab_semigroup_add plus\<close>)
      ["attribute" "<attribute>"]
  notes
    "add_commute" = (\<open>plus ?a ?b = plus ?b ?a\<close>)
      ["algebra_simps", "algebra_split_simps", "field_simps",
        "field_split_simps"]
  notes
    (\<open>plus ?b (plus ?a ?c) = plus ?a (plus ?b ?c)\<close>)
      ["algebra_simps", "algebra_split_simps", "field_simps",
        "field_split_simps"]
  notes theorem
    "add_ac" = \<open>plus (plus ?a ?b) ?c = plus ?a (plus ?b ?c)\<close>
      \<open>plus ?a ?b = plus ?b ?a\<close>
      \<open>plus ?b (plus ?a ?c) = plus ?a (plus ?b ?c)\<close>
  notes
    "add.monoid_axioms" = (\<open>monoid plus zero\<close>)
      ["attribute" "<attribute>"]
  notes "add.left_neutral" = (\<open>plus zero ?a = ?a\<close>) ["simp"]
  notes "add.right_neutral" = (\<open>plus ?a zero = ?a\<close>) ["simp"]
  notes
    "sum_list.monoid_list_axioms" = (\<open>monoid_list plus zero\<close>)
      ["attribute" "<attribute>"]
  notes (\<open>TERM _\<close>) ["attribute" "<attribute>"]
  notes (\<open>TERM _\<close>) ["attribute" "<attribute>"]
  notes
    "sum_list.eq_foldr" =
      (\<open>monoid_add.sum_list plus zero ?xs =
              foldr plus ?xs zero\<close>)
      ["code"]
  notes (\<open>TERM _\<close>) ["attribute" "<attribute>"]
  notes theorem
    "sum_list.Nil" =
      (\<open>monoid_add.sum_list plus zero [] = zero\<close>) ["simp"]
  notes theorem
    "sum_list.Cons" =
      (\<open>monoid_add.sum_list plus zero (?x # ?xs) =
              plus ?x (monoid_add.sum_list plus zero ?xs)\<close>)
      ["simp"]
  notes theorem
    "sum_list.append" =
      (\<open>monoid_add.sum_list plus zero (?xs @ ?ys) =
              plus (monoid_add.sum_list plus zero ?xs)
               (monoid_add.sum_list plus zero ?ys)\<close>)
      ["simp"]
  notes
    "monoid_add_axioms" = (\<open>class.monoid_add plus zero\<close>)
      ["attribute" "<attribute>"]
  notes "add_0_left" = \<open>plus zero ?a = ?a\<close>
  notes "add_0_right" = \<open>plus ?a zero = ?a\<close>
  notes (\<open>TERM _\<close>) ["attribute" "<attribute>"]
  notes
    "sum_list_def" =
      \<open>monoid_add.sum_list plus zero ==
             monoid_list.F plus zero\<close>
  notes theorem
    "fold_plus_sum_list_rev" =
      \<open>fold plus ?xs =
             plus (monoid_add.sum_list plus zero (rev ?xs))\<close>
  notes theorem
    "size_list_conv_sum_list" =
      \<open>size_list ?f ?xs = sum_list (map ?f ?xs) + length ?xs\<close>
  notes theorem
    "length_concat" =
      \<open>length (concat ?xss) = sum_list (map length ?xss)\<close>
  notes theorem
    "length_product_lists" =
      \<open>length (product_lists ?xss) =
             foldr (*) (map length ?xss) 1\<close>
  notes theorem
    "sum_list_map_filter" =
      \<open>(!!x. [| x : set ?xs; ~ ?P x |] ==> ?f x = zero) ==>
             monoid_add.sum_list plus zero (map ?f (filter ?P ?xs)) =
             monoid_add.sum_list plus zero (map ?f ?xs)\<close>
  notes theorem
    "sum_list_triv" =
      \<open>(SUM x<-?xs. ?r) = of_nat (length ?xs) * ?r\<close>
  notes theorem
    "sum_list_0" =
      (\<open>monoid_add.sum_list plus zero (map (%x. zero) ?xs) =
              zero\<close>)
      ["simp"]
  notes theorem
    "sum_list_distinct_conv_sum_set" =
      \<open>distinct ?xs ==>
             sum_list (map ?f ?xs) = sum ?f (set ?xs)\<close>
  notes theorem
    "interv_sum_list_conv_sum_set_nat" =
      \<open>sum_list (map ?f [?m..<?n]) = sum ?f (set [?m..<?n])\<close>
  notes theorem
    "interv_sum_list_conv_sum_set_int" =
      \<open>sum_list (map ?f [?k..?l]) = sum ?f (set [?k..?l])\<close>
  notes theorem
    "sum_list_sum_nth" =
      \<open>sum_list ?xs = sum ((!) ?xs) {0..<length ?xs}\<close>
  notes theorem
    "sum_list_map_filter'" =
      \<open>monoid_add.sum_list plus zero (map ?f (filter ?P ?xs)) =
             monoid_add.sum_list plus zero
              (map (%x. if ?P x then ?f x else zero) ?xs)\<close>
  notes
    "add.comm_monoid_axioms" = (\<open>comm_monoid plus zero\<close>)
      ["attribute" "<attribute>"]
  notes "add.comm_neutral" = \<open>plus ?a zero = ?a\<close>
  notes
    "sum.comm_monoid_set_axioms" =
      (\<open>comm_monoid_set plus zero\<close>) ["attribute" "<attribute>"]
  notes (\<open>TERM _\<close>) ["attribute" "<attribute>"]
  notes (\<open>TERM _\<close>) ["attribute" "<attribute>"]
  notes
    "sum.eq_fold" =
      \<open>comm_monoid_add.sum plus zero ?g ?A =
             Finite_Set.fold (plus o ?g) zero ?A\<close>
  notes (\<open>TERM _\<close>) ["attribute" "<attribute>"]
  notes theorem
    "sum.infinite" =
      (\<open>infinite ?A ==>
              comm_monoid_add.sum plus zero ?g ?A = zero\<close>)
      ["simp"]
  notes theorem
    "sum.empty" =
      (\<open>comm_monoid_add.sum plus zero ?g {} = zero\<close>) ["simp"]
  notes theorem
    "sum.insert" =
      (\<open>[| finite ?A; ?x ~: ?A |]
              ==> comm_monoid_add.sum plus zero ?g (insert ?x ?A) =
                  plus (?g ?x)
                   (comm_monoid_add.sum plus zero ?g ?A)\<close>)
      ["simp"]
  notes theorem
    "sum.remove" =
      \<open>[| finite ?A; ?x : ?A |]
             ==> comm_monoid_add.sum plus zero ?g ?A =
                 plus (?g ?x)
                  (comm_monoid_add.sum plus zero ?g (?A - {?x}))\<close>
  notes theorem
    "sum.insert_remove" =
      \<open>finite ?A ==>
             comm_monoid_add.sum plus zero ?g (insert ?x ?A) =
             plus (?g ?x)
              (comm_monoid_add.sum plus zero ?g (?A - {?x}))\<close>
  notes theorem
    "sum.insert_if" =
      \<open>finite ?A ==>
             comm_monoid_add.sum plus zero ?g (insert ?x ?A) =
             (if ?x : ?A then comm_monoid_add.sum plus zero ?g ?A
              else plus (?g ?x)
                    (comm_monoid_add.sum plus zero ?g ?A))\<close>
  notes theorem
    "sum.neutral" =
      \<open>ALL x:?A. ?g x = zero ==>
             comm_monoid_add.sum plus zero ?g ?A = zero\<close>
  notes theorem
    "sum.neutral_const" =
      (\<open>comm_monoid_add.sum plus zero (%_. zero) ?A = zero\<close>)
      ["simp"]
  notes theorem
    "sum.union_inter" =
      \<open>[| finite ?A; finite ?B |]
             ==> plus (comm_monoid_add.sum plus zero ?g (?A Un ?B))
                  (comm_monoid_add.sum plus zero ?g (?A Int ?B)) =
                 plus (comm_monoid_add.sum plus zero ?g ?A)
                  (comm_monoid_add.sum plus zero ?g ?B)\<close>
  notes theorem
    "sum.union_inter_neutral" =
      \<open>[| finite ?A; finite ?B; ALL x:?A Int ?B. ?g x = zero |]
             ==> comm_monoid_add.sum plus zero ?g (?A Un ?B) =
                 plus (comm_monoid_add.sum plus zero ?g ?A)
                  (comm_monoid_add.sum plus zero ?g ?B)\<close>
  notes theorem
    "sum.union_disjoint" =
      \<open>[| finite ?A; finite ?B; ?A Int ?B = {} |]
             ==> comm_monoid_add.sum plus zero ?g (?A Un ?B) =
                 plus (comm_monoid_add.sum plus zero ?g ?A)
                  (comm_monoid_add.sum plus zero ?g ?B)\<close>
  notes theorem
    "sum.union_diff2" =
      \<open>[| finite ?A; finite ?B |]
             ==> comm_monoid_add.sum plus zero ?g (?A Un ?B) =
                 plus
                  (plus (comm_monoid_add.sum plus zero ?g (?A - ?B))
                    (comm_monoid_add.sum plus zero ?g (?B - ?A)))
                  (comm_monoid_add.sum plus zero ?g (?A Int ?B))\<close>
  notes theorem
    "sum.subset_diff" =
      \<open>[| ?B <= ?A; finite ?A |]
             ==> comm_monoid_add.sum plus zero ?g ?A =
                 plus (comm_monoid_add.sum plus zero ?g (?A - ?B))
                  (comm_monoid_add.sum plus zero ?g ?B)\<close>
  notes theorem
    "sum.Int_Diff" =
      \<open>finite ?A ==>
             comm_monoid_add.sum plus zero ?g ?A =
             plus (comm_monoid_add.sum plus zero ?g (?A Int ?B))
              (comm_monoid_add.sum plus zero ?g (?A - ?B))\<close>
  notes theorem
    "sum.setdiff_irrelevant" =
      \<open>finite ?A ==>
             comm_monoid_add.sum plus zero ?g (?A - {x. ?g x = zero}) =
             comm_monoid_add.sum plus zero ?g ?A\<close>
  notes theorem
    "sum.not_neutral_contains_not_neutral" =
      (\<open>[| comm_monoid_add.sum plus zero ?g ?A ~= zero;
                 !!a. [| a : ?A; ?g a ~= zero |] ==> ?thesis |]
              ==> ?thesis\<close>)
      ["consumes" - 1, "case_names" "1"]
  notes theorem
    "sum.reindex" =
      \<open>inj_on ?h ?A ==>
             comm_monoid_add.sum plus zero ?g (?h ` ?A) =
             comm_monoid_add.sum plus zero (?g o ?h) ?A\<close>
  notes theorem
    "sum.cong" =
      (\<open>[| ?A = ?B; !!x. x : ?B ==> ?g x = ?h x |]
              ==> comm_monoid_add.sum plus zero ?g ?A =
                  comm_monoid_add.sum plus zero ?h ?B\<close>)
      ["fundef_cong"]
  notes theorem
    "sum.cong_simp" =
      (\<open>[| ?A = ?B; !!x. x : ?B =simp=> ?g x = ?h x |]
              ==> comm_monoid_add.sum plus zero ?g ?A =
                  comm_monoid_add.sum plus zero ?h ?B\<close>)
      ["cong"]
  notes theorem
    "sum.reindex_cong" =
      \<open>[| inj_on ?l ?B; ?A = ?l ` ?B;
                !!x. x : ?B ==> ?g (?l x) = ?h x |]
             ==> comm_monoid_add.sum plus zero ?g ?A =
                 comm_monoid_add.sum plus zero ?h ?B\<close>
  notes theorem
    "sum.image_eq" =
      \<open>inj_on ?g ?A ==>
             comm_monoid_add.sum plus zero (%x. x) (?g ` ?A) =
             comm_monoid_add.sum plus zero ?g ?A\<close>
  notes theorem
    "sum.UNION_disjoint" =
      \<open>[| finite ?I; ALL i:?I. finite (?A i);
                ALL i:?I. ALL j:?I. i ~= j --> ?A i Int ?A j = {} |]
             ==> comm_monoid_add.sum plus zero ?g (\<Union> (?A ` ?I)) =
                 comm_monoid_add.sum plus zero
                  (%x. comm_monoid_add.sum plus zero ?g (?A x)) ?I\<close>
  notes theorem
    "sum.Union_disjoint" =
      \<open>[| ALL A:?C. finite A;
                ALL A:?C. ALL B:?C. A ~= B --> A Int B = {} |]
             ==> comm_monoid_add.sum plus zero ?g (\<Union> ?C) =
                 (comm_monoid_add.sum plus zero o
                  comm_monoid_add.sum plus zero)
                  ?g ?C\<close>
  notes theorem
    "sum.distrib" =
      \<open>comm_monoid_add.sum plus zero (%x. plus (?g x) (?h x)) ?A =
             plus (comm_monoid_add.sum plus zero ?g ?A)
              (comm_monoid_add.sum plus zero ?h ?A)\<close>
  notes theorem
    "sum.Sigma" =
      \<open>[| finite ?A; ALL x:?A. finite (?B x) |]
             ==> comm_monoid_add.sum plus zero
                  (%x. comm_monoid_add.sum plus zero (?g x) (?B x)) ?A =
                 comm_monoid_add.sum plus zero (%(x, y). ?g x y)
                  (Sigma ?A ?B)\<close>
  notes theorem
    "sum.related" =
      \<open>[| ?R zero zero;
                ALL x1 y1 x2 y2.
                   ?R x1 x2 & ?R y1 y2 --> ?R (plus x1 y1) (plus x2 y2);
                finite ?S; ALL x:?S. ?R (?h x) (?g x) |]
             ==> ?R (comm_monoid_add.sum plus zero ?h ?S)
                  (comm_monoid_add.sum plus zero ?g ?S)\<close>
  notes theorem
    "sum.mono_neutral_cong_left" =
      \<open>[| finite ?T; ?S <= ?T; ALL i:?T - ?S. ?h i = zero;
                !!x. x : ?S ==> ?g x = ?h x |]
             ==> comm_monoid_add.sum plus zero ?g ?S =
                 comm_monoid_add.sum plus zero ?h ?T\<close>
  notes theorem
    "sum.mono_neutral_cong_right" =
      \<open>[| finite ?T; ?S <= ?T; ALL i:?T - ?S. ?g i = zero;
                !!x. x : ?S ==> ?g x = ?h x |]
             ==> comm_monoid_add.sum plus zero ?g ?T =
                 comm_monoid_add.sum plus zero ?h ?S\<close>
  notes theorem
    "sum.mono_neutral_left" =
      \<open>[| finite ?T; ?S <= ?T; ALL i:?T - ?S. ?g i = zero |]
             ==> comm_monoid_add.sum plus zero ?g ?S =
                 comm_monoid_add.sum plus zero ?g ?T\<close>
  notes theorem
    "sum.mono_neutral_right" =
      \<open>[| finite ?T; ?S <= ?T; ALL i:?T - ?S. ?g i = zero |]
             ==> comm_monoid_add.sum plus zero ?g ?T =
                 comm_monoid_add.sum plus zero ?g ?S\<close>
  notes theorem
    "sum.mono_neutral_cong" =
      \<open>[| finite ?T; finite ?S; !!i. i : ?T - ?S ==> ?h i = zero;
                !!i. i : ?S - ?T ==> ?g i = zero;
                !!x. x : ?S Int ?T ==> ?g x = ?h x |]
             ==> comm_monoid_add.sum plus zero ?g ?S =
                 comm_monoid_add.sum plus zero ?h ?T\<close>
  notes theorem
    "sum.reindex_bij_betw" =
      \<open>bij_betw ?h ?S ?T ==>
             comm_monoid_add.sum plus zero (%x. ?g (?h x)) ?S =
             comm_monoid_add.sum plus zero ?g ?T\<close>
  notes theorem
    "sum.reindex_bij_witness" =
      \<open>[| !!a. a : ?S ==> ?i (?j a) = a; !!a. a : ?S ==> ?j a : ?T;
                !!b. b : ?T ==> ?j (?i b) = b; !!b. b : ?T ==> ?i b : ?S;
                !!a. a : ?S ==> ?h (?j a) = ?g a |]
             ==> comm_monoid_add.sum plus zero ?g ?S =
                 comm_monoid_add.sum plus zero ?h ?T\<close>
  notes theorem
    "sum.reindex_bij_betw_not_neutral" =
      \<open>[| finite ?S'; finite ?T'; bij_betw ?h (?S - ?S') (?T - ?T');
                !!a. a : ?S' ==> ?g (?h a) = zero;
                !!b. b : ?T' ==> ?g b = zero |]
             ==> comm_monoid_add.sum plus zero (%x. ?g (?h x)) ?S =
                 comm_monoid_add.sum plus zero ?g ?T\<close>
  notes theorem
    "sum.reindex_nontrivial" =
      \<open>[| finite ?A;
                !!x y.
                   [| x : ?A; y : ?A; x ~= y; ?h x = ?h y |]
                   ==> ?g (?h x) = zero |]
             ==> comm_monoid_add.sum plus zero ?g (?h ` ?A) =
                 comm_monoid_add.sum plus zero (?g o ?h) ?A\<close>
  notes theorem
    "sum.reindex_bij_witness_not_neutral" =
      \<open>[| finite ?S'; finite ?T'; !!a. a : ?S - ?S' ==> ?i (?j a) = a;
                !!a. a : ?S - ?S' ==> ?j a : ?T - ?T';
                !!b. b : ?T - ?T' ==> ?j (?i b) = b;
                !!b. b : ?T - ?T' ==> ?i b : ?S - ?S';
                !!a. a : ?S' ==> ?g a = zero; !!b. b : ?T' ==> ?h b = zero;
                !!a. a : ?S ==> ?h (?j a) = ?g a |]
             ==> comm_monoid_add.sum plus zero ?g ?S =
                 comm_monoid_add.sum plus zero ?h ?T\<close>
  notes theorem
    "sum.delta_remove" =
      \<open>finite ?S ==>
             comm_monoid_add.sum plus zero
              (%k. if k = ?a then ?b k else ?c k) ?S =
             (if ?a : ?S
              then plus (?b ?a)
                    (comm_monoid_add.sum plus zero ?c (?S - {?a}))
              else comm_monoid_add.sum plus zero ?c (?S - {?a}))\<close>
  notes theorem
    "sum.delta" =
      (\<open>finite ?S ==>
              comm_monoid_add.sum plus zero
               (%k. if k = ?a then ?b k else zero) ?S =
              (if ?a : ?S then ?b ?a else zero)\<close>)
      ["simp"]
  notes theorem
    "sum.delta'" =
      (\<open>finite ?S ==>
              comm_monoid_add.sum plus zero
               (%k. if ?a = k then ?b k else zero) ?S =
              (if ?a : ?S then ?b ?a else zero)\<close>)
      ["simp"]
  notes theorem
    "sum.If_cases" =
      \<open>finite ?A ==>
             comm_monoid_add.sum plus zero (%x. if ?P x then ?h x else ?g x)
              ?A =
             plus (comm_monoid_add.sum plus zero ?h (?A Int {x. ?P x}))
              (comm_monoid_add.sum plus zero ?g
                (?A Int - {x. ?P x}))\<close>
  notes theorem
    "sum.cartesian_product" =
      \<open>comm_monoid_add.sum plus zero
              (%x. comm_monoid_add.sum plus zero (?g x) ?B) ?A =
             comm_monoid_add.sum plus zero (%(x, y). ?g x y)
              (?A \<times> ?B)\<close>
  notes theorem
    "sum.inter_restrict" =
      \<open>finite ?A ==>
             comm_monoid_add.sum plus zero ?g (?A Int ?B) =
             comm_monoid_add.sum plus zero
              (%x. if x : ?B then ?g x else zero) ?A\<close>
  notes theorem
    "sum.inter_filter" =
      \<open>finite ?A ==>
             comm_monoid_add.sum plus zero ?g {x: ?A. ?P x} =
             comm_monoid_add.sum plus zero (%x. if ?P x then ?g x else zero)
              ?A\<close>
  notes theorem
    "sum.Union_comp" =
      \<open>[| ALL A:?B. finite A;
                !!A1 A2 x.
                   [| A1 : ?B; A2 : ?B; A1 ~= A2; x : A1; x : A2 |]
                   ==> ?g x = zero |]
             ==> comm_monoid_add.sum plus zero ?g (\<Union> ?B) =
                 (comm_monoid_add.sum plus zero o
                  comm_monoid_add.sum plus zero)
                  ?g ?B\<close>
  notes theorem
    "sum.swap" =
      \<open>comm_monoid_add.sum plus zero
              (%i. comm_monoid_add.sum plus zero (?g i) ?B) ?A =
             comm_monoid_add.sum plus zero
              (%j. comm_monoid_add.sum plus zero (%i. ?g i j) ?A) ?B\<close>
  notes theorem
    "sum.swap_restrict" =
      \<open>[| finite ?A; finite ?B |]
             ==> comm_monoid_add.sum plus zero
                  (%x. comm_monoid_add.sum plus zero (?g x) {y: ?B. ?R x y})
                  ?A =
                 comm_monoid_add.sum plus zero
                  (%y. comm_monoid_add.sum plus zero (%x. ?g x y)
                        {x: ?A. ?R x y})
                  ?B\<close>
  notes theorem
    "sum.image_gen" =
      \<open>finite ?S ==>
             comm_monoid_add.sum plus zero ?h ?S =
             comm_monoid_add.sum plus zero
              (%y. comm_monoid_add.sum plus zero ?h {x: ?S. ?g x = y})
              (?g ` ?S)\<close>
  notes theorem
    "sum.group" =
      \<open>[| finite ?S; finite ?T; ?g ` ?S <= ?T |]
             ==> comm_monoid_add.sum plus zero
                  (%y. comm_monoid_add.sum plus zero ?h {x: ?S. ?g x = y})
                  ?T =
                 comm_monoid_add.sum plus zero ?h ?S\<close>
  notes theorem
    "sum.Plus" =
      \<open>[| finite ?A; finite ?B |]
             ==> comm_monoid_add.sum plus zero ?g (?A <+> ?B) =
                 plus (comm_monoid_add.sum plus zero (?g o Inl) ?A)
                  (comm_monoid_add.sum plus zero (?g o Inr) ?B)\<close>
  notes theorem
    "sum.same_carrier" =
      \<open>[| finite ?C; ?A <= ?C; ?B <= ?C;
                !!a. a : ?C - ?A ==> ?g a = zero;
                !!b. b : ?C - ?B ==> ?h b = zero |]
             ==> (comm_monoid_add.sum plus zero ?g ?A =
                  comm_monoid_add.sum plus zero ?h ?B) =
                 (comm_monoid_add.sum plus zero ?g ?C =
                  comm_monoid_add.sum plus zero ?h ?C)\<close>
  notes theorem
    "sum.same_carrierI" =
      \<open>[| finite ?C; ?A <= ?C; ?B <= ?C;
                !!a. a : ?C - ?A ==> ?g a = zero;
                !!b. b : ?C - ?B ==> ?h b = zero;
                comm_monoid_add.sum plus zero ?g ?C =
                comm_monoid_add.sum plus zero ?h ?C |]
             ==> comm_monoid_add.sum plus zero ?g ?A =
                 comm_monoid_add.sum plus zero ?h ?B\<close>
  notes theorem
    "sum.eq_general" =
      \<open>[| !!y. y : ?B ==> EX! x. x : ?A & ?h x = y;
                !!x. x : ?A ==> ?h x : ?B & ?\<gamma> (?h x) = ?\<phi> x |]
             ==> comm_monoid_add.sum plus zero ?\<phi> ?A =
                 comm_monoid_add.sum plus zero ?\<gamma> ?B\<close>
  notes theorem
    "sum.eq_general_inverses" =
      \<open>[| !!y. y : ?B ==> ?k y : ?A & ?h (?k y) = y;
                !!x. x : ?A ==>
                     ?h x : ?B &
                     ?k (?h x) = x & ?\<gamma> (?h x) = ?\<phi> x |]
             ==> comm_monoid_add.sum plus zero ?\<phi> ?A =
                 comm_monoid_add.sum plus zero ?\<gamma> ?B\<close>
  notes (\<open>TERM _\<close>) ["attribute" "<attribute>"]
  notes (\<open>TERM _\<close>) ["attribute" "<attribute>"]
  notes
    "sum.G_def" =
      \<open>comm_monoid_add.sum' plus zero ?p ?I ==
             if finite {x: ?I. ?p x ~= zero}
             then comm_monoid_add.sum plus zero ?p {x: ?I. ?p x ~= zero}
             else zero\<close>
  notes (\<open>TERM _\<close>) ["attribute" "<attribute>"]
  notes theorem
    "sum.finite_Collect_op" =
      \<open>[| finite {i: ?I. ?x i ~= zero};
                finite {i: ?I. ?y i ~= zero} |]
             ==> finite {i: ?I. plus (?x i) (?y i) ~= zero}\<close>
  notes theorem
    "sum.empty'" =
      (\<open>comm_monoid_add.sum' plus zero ?p {} = zero\<close>) ["simp"]
  notes theorem
    "sum.eq_sum" =
      (\<open>finite ?I ==>
              comm_monoid_add.sum' plus zero ?p ?I =
              comm_monoid_add.sum plus zero ?p ?I\<close>)
      ["simp"]
  notes theorem
    "sum.insert'" =
      (\<open>finite {x: ?I. ?p x ~= zero} ==>
              comm_monoid_add.sum' plus zero ?p (insert ?i ?I) =
              (if ?i : ?I then comm_monoid_add.sum' plus zero ?p ?I
               else plus (?p ?i)
                     (comm_monoid_add.sum' plus zero ?p ?I))\<close>)
      ["simp"]
  notes theorem
    "sum.distrib_triv'" =
      \<open>finite ?I ==>
             comm_monoid_add.sum' plus zero (%i. plus (?g i) (?h i)) ?I =
             plus (comm_monoid_add.sum' plus zero ?g ?I)
              (comm_monoid_add.sum' plus zero ?h ?I)\<close>
  notes theorem
    "sum.non_neutral'" =
      \<open>comm_monoid_add.sum' plus zero ?g {x: ?I. ?g x ~= zero} =
             comm_monoid_add.sum' plus zero ?g ?I\<close>
  notes theorem
    "sum.distrib'" =
      \<open>[| finite {x: ?I. ?g x ~= zero};
                finite {x: ?I. ?h x ~= zero} |]
             ==> comm_monoid_add.sum' plus zero (%i. plus (?g i) (?h i))
                  ?I =
                 plus (comm_monoid_add.sum' plus zero ?g ?I)
                  (comm_monoid_add.sum' plus zero ?h ?I)\<close>
  notes theorem
    "sum.cong'" =
      \<open>[| ?A = ?B; !!x. x : ?B ==> ?g x = ?h x |]
             ==> comm_monoid_add.sum' plus zero ?g ?A =
                 comm_monoid_add.sum' plus zero ?h ?B\<close>
  notes theorem
    "sum.mono_neutral_cong_left'" =
      \<open>[| ?S <= ?T; !!i. i : ?T - ?S ==> ?h i = zero;
                !!x. x : ?S ==> ?g x = ?h x |]
             ==> comm_monoid_add.sum' plus zero ?g ?S =
                 comm_monoid_add.sum' plus zero ?h ?T\<close>
  notes theorem
    "sum.mono_neutral_cong_right'" =
      \<open>[| ?S <= ?T; ALL i:?T - ?S. ?g i = zero;
                !!x. x : ?S ==> ?g x = ?h x |]
             ==> comm_monoid_add.sum' plus zero ?g ?T =
                 comm_monoid_add.sum' plus zero ?h ?S\<close>
  notes theorem
    "sum.mono_neutral_left'" =
      \<open>[| ?S <= ?T; ALL i:?T - ?S. ?g i = zero |]
             ==> comm_monoid_add.sum' plus zero ?g ?S =
                 comm_monoid_add.sum' plus zero ?g ?T\<close>
  notes theorem
    "sum.mono_neutral_right'" =
      \<open>[| ?S <= ?T; ALL i:?T - ?S. ?g i = zero |]
             ==> comm_monoid_add.sum' plus zero ?g ?T =
                 comm_monoid_add.sum' plus zero ?g ?S\<close>
  notes theorem
    "sum.atLeastLessThan_reindex" =
      \<open>bij_betw ?h {?m..<?n} {?h ?m..<?h ?n} ==>
             comm_monoid_add.sum plus zero ?g {?h ?m..<?h ?n} =
             comm_monoid_add.sum plus zero (?g o ?h) {?m..<?n}\<close>
  notes theorem
    "sum.atLeastAtMost_reindex" =
      \<open>bij_betw ?h {?m..?n} {?h ?m..?h ?n} ==>
             comm_monoid_add.sum plus zero ?g {?h ?m..?h ?n} =
             comm_monoid_add.sum plus zero (?g o ?h) {?m..?n}\<close>
  notes theorem
    "sum.atLeastLessThan_shift_bounds" =
      \<open>comm_monoid_add.sum plus zero ?g {?m + ?k..<?n + ?k} =
             comm_monoid_add.sum plus zero (?g o (+) ?k) {?m..<?n}\<close>
  notes theorem
    "sum.atLeastAtMost_shift_bounds" =
      \<open>comm_monoid_add.sum plus zero ?g {?m + ?k..?n + ?k} =
             comm_monoid_add.sum plus zero (?g o (+) ?k) {?m..?n}\<close>
  notes theorem
    "sum.atLeast_Suc_lessThan_Suc_shift" =
      \<open>comm_monoid_add.sum plus zero ?g {Suc ?m..<Suc ?n} =
             comm_monoid_add.sum plus zero (?g o Suc) {?m..<?n}\<close>
  notes theorem
    "sum.atLeast_Suc_atMost_Suc_shift" =
      \<open>comm_monoid_add.sum plus zero ?g {Suc ?m..Suc ?n} =
             comm_monoid_add.sum plus zero (?g o Suc) {?m..?n}\<close>
  notes theorem
    "sum.atLeast_int_lessThan_int_shift" =
      \<open>comm_monoid_add.sum plus zero ?g {int ?m..<int ?n} =
             comm_monoid_add.sum plus zero (?g o int) {?m..<?n}\<close>
  notes theorem
    "sum.atLeast_int_atMost_int_shift" =
      \<open>comm_monoid_add.sum plus zero ?g {int ?m..int ?n} =
             comm_monoid_add.sum plus zero (?g o int) {?m..?n}\<close>
  notes theorem
    "sum.atLeast0_lessThan_Suc" =
      \<open>comm_monoid_add.sum plus zero ?g {0..<Suc ?n} =
             plus (comm_monoid_add.sum plus zero ?g {0..<?n})
              (?g ?n)\<close>
  notes theorem
    "sum.atLeast0_atMost_Suc" =
      \<open>comm_monoid_add.sum plus zero ?g {0..Suc ?n} =
             plus (comm_monoid_add.sum plus zero ?g {0..?n})
              (?g (Suc ?n))\<close>
  notes theorem
    "sum.atLeast0_lessThan_Suc_shift" =
      \<open>comm_monoid_add.sum plus zero ?g {0..<Suc ?n} =
             plus (?g 0)
              (comm_monoid_add.sum plus zero (?g o Suc) {0..<?n})\<close>
  notes theorem
    "sum.atLeast0_atMost_Suc_shift" =
      \<open>comm_monoid_add.sum plus zero ?g {0..Suc ?n} =
             plus (?g 0)
              (comm_monoid_add.sum plus zero (?g o Suc) {0..?n})\<close>
  notes theorem
    "sum.atLeast_Suc_lessThan" =
      \<open>?m < ?n ==>
             comm_monoid_add.sum plus zero ?g {?m..<?n} =
             plus (?g ?m)
              (comm_monoid_add.sum plus zero ?g {Suc ?m..<?n})\<close>
  notes theorem
    "sum.atLeast_Suc_atMost" =
      \<open>?m <= ?n ==>
             comm_monoid_add.sum plus zero ?g {?m..?n} =
             plus (?g ?m)
              (comm_monoid_add.sum plus zero ?g {Suc ?m..?n})\<close>
  notes theorem
    "sum.ivl_cong" =
      \<open>[| ?a = ?c; ?b = ?d;
                !!x. [| ?c <= x; x < ?d |] ==> ?g x = ?h x |]
             ==> comm_monoid_add.sum plus zero ?g {?a..<?b} =
                 comm_monoid_add.sum plus zero ?h {?c..<?d}\<close>
  notes theorem
    "sum.atLeastLessThan_shift_0" =
      \<open>comm_monoid_add.sum plus zero ?g {?m..<?n} =
             comm_monoid_add.sum plus zero (?g o (+) ?m)
              {0..<?n - ?m}\<close>
  notes theorem
    "sum.atLeastAtMost_shift_0" =
      \<open>?m <= ?n ==>
             comm_monoid_add.sum plus zero ?g {?m..?n} =
             comm_monoid_add.sum plus zero (?g o (+) ?m)
              {0..?n - ?m}\<close>
  notes theorem
    "sum.atLeastLessThan_concat" =
      \<open>[| ?m <= ?n; ?n <= ?p |]
             ==> plus (comm_monoid_add.sum plus zero ?g {?m..<?n})
                  (comm_monoid_add.sum plus zero ?g {?n..<?p}) =
                 comm_monoid_add.sum plus zero ?g {?m..<?p}\<close>
  notes theorem
    "sum.atLeastLessThan_rev" =
      \<open>comm_monoid_add.sum plus zero ?g {?n..<?m} =
             comm_monoid_add.sum plus zero (%i. ?g (?m + ?n - Suc i))
              {?n..<?m}\<close>
  notes theorem
    "sum.atLeastAtMost_rev" =
      \<open>comm_monoid_add.sum plus zero ?g {?n..?m} =
             comm_monoid_add.sum plus zero (%i. ?g (?m + ?n - i))
              {?n..?m}\<close>
  notes theorem
    "sum.atLeastLessThan_rev_at_least_Suc_atMost" =
      \<open>comm_monoid_add.sum plus zero ?g {?n..<?m} =
             comm_monoid_add.sum plus zero (%i. ?g (?m + ?n - i))
              {Suc ?n..?m}\<close>
  notes theorem
    "sum.zero_middle" =
      \<open>[| 1 <= ?p; ?k <= ?p |]
             ==> comm_monoid_add.sum plus zero
                  (%j. if j < ?k then ?g j
                       else if j = ?k then zero else ?h (j - Suc 0))
                  {..?p} =
                 comm_monoid_add.sum plus zero
                  (%j. if j < ?k then ?g j else ?h j) {..?p - Suc 0}\<close>
  notes theorem
    "sum.atMost_Suc" =
      (\<open>comm_monoid_add.sum plus zero ?g {..Suc ?n} =
              plus (comm_monoid_add.sum plus zero ?g {..?n})
               (?g (Suc ?n))\<close>)
      ["simp"]
  notes theorem
    "sum.lessThan_Suc" =
      (\<open>comm_monoid_add.sum plus zero ?g {..<Suc ?n} =
              plus (comm_monoid_add.sum plus zero ?g {..<?n})
               (?g ?n)\<close>)
      ["simp"]
  notes theorem
    "sum.cl_ivl_Suc" =
      (\<open>comm_monoid_add.sum plus zero ?g {?m..Suc ?n} =
              (if Suc ?n < ?m then zero
               else plus (comm_monoid_add.sum plus zero ?g {?m..?n})
                     (?g (Suc ?n)))\<close>)
      ["simp"]
  notes theorem
    "sum.op_ivl_Suc" =
      (\<open>comm_monoid_add.sum plus zero ?g {?m..<Suc ?n} =
              (if ?n < ?m then zero
               else plus (comm_monoid_add.sum plus zero ?g {?m..<?n})
                     (?g ?n))\<close>)
      ["simp"]
  notes theorem
    "sum.head" =
      \<open>?m <= ?n ==>
             comm_monoid_add.sum plus zero ?g {?m..?n} =
             plus (?g ?m)
              (comm_monoid_add.sum plus zero ?g {?m<..?n})\<close>
  notes theorem
    "sum.last_plus" =
      \<open>?m <= ?n ==>
             comm_monoid_add.sum plus zero ?g {?m..?n} =
             plus (?g ?n)
              (comm_monoid_add.sum plus zero ?g {?m..<?n})\<close>
  notes theorem
    "sum.head_if" =
      \<open>comm_monoid_add.sum plus zero ?g {?m..?n} =
             (if ?n < ?m then zero
              else plus (comm_monoid_add.sum plus zero ?g {?m..<?n})
                    (?g ?n))\<close>
  notes theorem
    "sum.ub_add_nat" =
      \<open>?m <= ?n + 1 ==>
             comm_monoid_add.sum plus zero ?g {?m..?n + ?p} =
             plus (comm_monoid_add.sum plus zero ?g {?m..?n})
              (comm_monoid_add.sum plus zero ?g {?n + 1..?n + ?p})\<close>
  notes theorem
    "sum.nat_group" =
      \<open>comm_monoid_add.sum plus zero
              (%m. comm_monoid_add.sum plus zero ?g {m * ?k..<m * ?k + ?k})
              {..<?n} =
             comm_monoid_add.sum plus zero ?g {..<?n * ?k}\<close>
  notes theorem
    "sum.triangle_reindex" =
      \<open>comm_monoid_add.sum plus zero (%(i, j). ?g i j)
              {(i, j). i + j < ?n} =
             comm_monoid_add.sum plus zero
              (%k. comm_monoid_add.sum plus zero (%i. ?g i (k - i)) {..k})
              {..<?n}\<close>
  notes theorem
    "sum.triangle_reindex_eq" =
      \<open>comm_monoid_add.sum plus zero (%(i, j). ?g i j)
              {(i, j). i + j <= ?n} =
             comm_monoid_add.sum plus zero
              (%k. comm_monoid_add.sum plus zero (%i. ?g i (k - i)) {..k})
              {..?n}\<close>
  notes theorem
    "sum.nat_diff_reindex" =
      \<open>comm_monoid_add.sum plus zero (%i. ?g (?n - Suc i)) {..<?n} =
             comm_monoid_add.sum plus zero ?g {..<?n}\<close>
  notes theorem
    "sum.shift_bounds_nat_ivl" =
      \<open>comm_monoid_add.sum plus zero ?g {?m + ?k..<?n + ?k} =
             comm_monoid_add.sum plus zero (%i. ?g (i + ?k))
              {?m..<?n}\<close>
  notes theorem
    "sum.shift_bounds_cl_nat_ivl" =
      \<open>comm_monoid_add.sum plus zero ?g {?m + ?k..?n + ?k} =
             comm_monoid_add.sum plus zero (%i. ?g (i + ?k))
              {?m..?n}\<close>
  notes theorem
    "sum.shift_bounds_cl_Suc_ivl" =
      \<open>comm_monoid_add.sum plus zero ?g {Suc ?m..Suc ?n} =
             comm_monoid_add.sum plus zero (%i. ?g (Suc i)) {?m..?n}\<close>
  notes theorem
    "sum.Suc_reindex_ivl" =
      \<open>?m <= ?n ==>
             plus (comm_monoid_add.sum plus zero ?g {?m..?n})
              (?g (Suc ?n)) =
             plus (?g ?m)
              (comm_monoid_add.sum plus zero (%i. ?g (Suc i))
                {?m..?n})\<close>
  notes theorem
    "sum.shift_bounds_Suc_ivl" =
      \<open>comm_monoid_add.sum plus zero ?g {Suc ?m..<Suc ?n} =
             comm_monoid_add.sum plus zero (%i. ?g (Suc i))
              {?m..<?n}\<close>
  notes theorem
    "sum.atMost_Suc_shift" =
      \<open>comm_monoid_add.sum plus zero ?g {..Suc ?n} =
             plus (?g 0)
              (comm_monoid_add.sum plus zero (%i. ?g (Suc i))
                {..?n})\<close>
  notes theorem
    "sum.lessThan_Suc_shift" =
      \<open>comm_monoid_add.sum plus zero ?g {..<Suc ?n} =
             plus (?g 0)
              (comm_monoid_add.sum plus zero (%i. ?g (Suc i))
                {..<?n})\<close>
  notes theorem
    "sum.atMost_shift" =
      \<open>comm_monoid_add.sum plus zero ?g {..?n} =
             plus (?g 0)
              (comm_monoid_add.sum plus zero (%i. ?g (Suc i))
                {..<?n})\<close>
  notes theorem
    "sum.nested_swap" =
      \<open>comm_monoid_add.sum plus zero
              (%i. comm_monoid_add.sum plus zero (?a i) {0..<i}) {0..?n} =
             comm_monoid_add.sum plus zero
              (%j. comm_monoid_add.sum plus zero (%i. ?a i j) {Suc j..?n})
              {0..<?n}\<close>
  notes theorem
    "sum.nested_swap'" =
      \<open>comm_monoid_add.sum plus zero
              (%i. comm_monoid_add.sum plus zero (?a i) {..<i}) {..?n} =
             comm_monoid_add.sum plus zero
              (%j. comm_monoid_add.sum plus zero (%i. ?a i j) {Suc j..?n})
              {..<?n}\<close>
  notes theorem
    "sum.atLeast1_atMost_eq" =
      \<open>comm_monoid_add.sum plus zero ?g {Suc 0..?n} =
             comm_monoid_add.sum plus zero (%k. ?g (Suc k)) {..<?n}\<close>
  notes theorem
    "sum.atLeastLessThan_Suc" =
      \<open>?a <= ?b ==>
             comm_monoid_add.sum plus zero ?g {?a..<Suc ?b} =
             plus (comm_monoid_add.sum plus zero ?g {?a..<?b})
              (?g ?b)\<close>
  notes theorem
    "sum.nat_ivl_Suc'" =
      \<open>?m <= Suc ?n ==>
             comm_monoid_add.sum plus zero ?g {?m..Suc ?n} =
             plus (?g (Suc ?n))
              (comm_monoid_add.sum plus zero ?g {?m..?n})\<close>
  notes theorem
    "sum.in_pairs" =
      \<open>comm_monoid_add.sum plus zero ?g {2 * ?m..Suc (2 * ?n)} =
             comm_monoid_add.sum plus zero
              (%i. plus (?g (2 * i)) (?g (Suc (2 * i)))) {?m..?n}\<close>
  notes theorem
    "sum.in_pairs_0" =
      \<open>comm_monoid_add.sum plus zero ?g {..Suc (2 * ?n)} =
             comm_monoid_add.sum plus zero
              (%i. plus (?g (2 * i)) (?g (Suc (2 * i)))) {..?n}\<close>
  notes theorem
    "sum.F_parametric" =
      (\<open>bi_unique ?A ==>
              rel_fun (rel_fun ?A (=)) (rel_fun (rel_set ?A) (=))
               (comm_monoid_add.sum plus zero)
               (comm_monoid_add.sum plus zero)\<close>)
      ["transfer_rule"]
  notes
    "sum_list.comm_monoid_list_axioms" =
      (\<open>comm_monoid_list plus zero\<close>)
      ["attribute" "<attribute>"]
  notes theorem
    "sum_list.rev" =
      (\<open>monoid_add.sum_list plus zero (rev ?xs) =
              monoid_add.sum_list plus zero ?xs\<close>)
      ["simp"]
  notes
    "sum.comm_monoid_list_set_axioms" =
      (\<open>comm_monoid_list_set plus zero\<close>)
      ["attribute" "<attribute>"]
  notes theorem
    "sum.distinct_set_conv_list" =
      \<open>distinct ?xs ==>
             comm_monoid_add.sum plus zero ?g (set ?xs) =
             monoid_add.sum_list plus zero (map ?g ?xs)\<close>
  notes theorem
    "sum.set_conv_list" =
      (\<open>comm_monoid_add.sum plus zero ?g (set ?xs) =
              monoid_add.sum_list plus zero (map ?g (remdups ?xs))\<close>)
      ["code"]
  notes
    "comm_monoid_add_axioms" =
      (\<open>class.comm_monoid_add plus zero\<close>)
      ["attribute" "<attribute>"]
  notes "add_0" = \<open>plus zero ?a = ?a\<close>
  notes (\<open>TERM _\<close>) ["attribute" "<attribute>"]
  notes
    "sum_def" =
      \<open>comm_monoid_add.sum plus zero ==
             comm_monoid_set.F plus zero\<close>
  notes (\<open>TERM _\<close>) ["attribute" "<attribute>"]
  notes
    "sum'_def" =
      \<open>comm_monoid_add.sum' plus zero ==
             comm_monoid_set.G plus zero\<close>
  notes (\<open>TERM _\<close>) ["attribute" "<attribute>"]
  notes theorem
    "sum_shift_lb_Suc0_0_upt" =
      \<open>?f 0 = zero ==>
             comm_monoid_add.sum plus zero ?f {Suc 0..<?k} =
             comm_monoid_add.sum plus zero ?f {0..<?k}\<close>
  notes theorem
    "sum_shift_lb_Suc0_0" =
      \<open>?f 0 = zero ==>
             comm_monoid_add.sum plus zero ?f {Suc 0..?k} =
             comm_monoid_add.sum plus zero ?f {0..?k}\<close>
  notes theorem
    "sum_list_map_remove1" =
      \<open>?x : set ?xs ==>
             monoid_add.sum_list plus zero (map ?f ?xs) =
             plus (?f ?x)
              (monoid_add.sum_list plus zero
                (map ?f (remove1 ?x ?xs)))\<close>
  notes theorem
    "distinct_sum_list_conv_Sum" =
      \<open>distinct ?xs ==>
             monoid_add.sum_list plus zero ?xs =
             comm_monoid_add.sum plus zero (%x. x) (set ?xs)\<close>
  notes theorem
    "sum_list_addf" =
      \<open>monoid_add.sum_list plus zero
              (map (%x. plus (?f x) (?g x)) ?xs) =
             plus (monoid_add.sum_list plus zero (map ?f ?xs))
              (monoid_add.sum_list plus zero (map ?g ?xs))\<close>
  notes
    "add.group_axioms" = (\<open>group plus zero uminus\<close>)
      ["attribute" "<attribute>"]
  notes "add.group_left_neutral" = \<open>plus zero ?a = ?a\<close>
  notes
    "add.left_inverse" = (\<open>plus (uminus ?a) ?a = zero\<close>)
      ["simp"]
  notes theorem
    "add.left_cancel" = \<open>(plus ?a ?b = plus ?a ?c) = (?b = ?c)\<close>
  notes theorem
    "add.inverse_unique" =
      \<open>plus ?a ?b = zero ==> uminus ?a = ?b\<close>
  notes theorem
    "add.inverse_neutral" = (\<open>uminus zero = zero\<close>) ["simp"]
  notes theorem
    "add.inverse_inverse" = (\<open>uminus (uminus ?a) = ?a\<close>)
      ["simp"]
  notes theorem
    "add.right_inverse" = (\<open>plus ?a (uminus ?a) = zero\<close>)
      ["simp"]
  notes theorem
    "add.inverse_distrib_swap" =
      \<open>uminus (plus ?a ?b) = plus (uminus ?b) (uminus ?a)\<close>
  notes theorem
    "add.right_cancel" =
      \<open>(plus ?b ?a = plus ?c ?a) = (?b = ?c)\<close>
  notes
    "cancel_semigroup_add_axioms" =
      (\<open>class.cancel_semigroup_add plus\<close>)
      ["attribute" "<attribute>"]
  notes
    "add_left_imp_eq" = \<open>plus ?a ?b = plus ?a ?c ==> ?b = ?c\<close>
  notes
    "add_right_imp_eq" = \<open>plus ?b ?a = plus ?c ?a ==> ?b = ?c\<close>
  notes theorem
    "add_left_cancel" =
      (\<open>(plus ?a ?b = plus ?a ?c) = (?b = ?c)\<close>) ["simp"]
  notes theorem
    "add_right_cancel" =
      (\<open>(plus ?b ?a = plus ?c ?a) = (?b = ?c)\<close>) ["simp"]
  notes theorem "inj_on_add" = (\<open>inj_on (plus ?a) ?A\<close>) ["simp"]
  notes theorem "inj_add_left" = \<open>inj (plus ?a)\<close>
  notes theorem
    "inj_on_add'" = (\<open>inj_on (%b. plus b ?a) ?A\<close>) ["simp"]
  notes theorem
    "bij_betw_add" =
      (\<open>bij_betw (plus ?a) ?A ?B = (plus ?a ` ?A = ?B)\<close>)
      ["simp"]
  notes
    "group_add_axioms" =
      (\<open>class.group_add minus plus zero uminus\<close>)
      ["attribute" "<attribute>"]
  notes "left_minus" = \<open>plus (uminus ?a) ?a = zero\<close>
  notes
    "add_uminus_conv_diff" =
      (\<open>plus ?a (uminus ?b) = minus ?a ?b\<close>) ["simp"]
  notes theorem
    "diff_conv_add_uminus" =
      \<open>minus ?a ?b = plus ?a (uminus ?b)\<close>
  notes theorem
    "minus_unique" = \<open>plus ?a ?b = zero ==> uminus ?a = ?b\<close>
  notes theorem "minus_zero" = \<open>uminus zero = zero\<close>
  notes theorem "minus_minus" = \<open>uminus (uminus ?a) = ?a\<close>
  notes theorem "right_minus" = \<open>plus ?a (uminus ?a) = zero\<close>
  notes theorem "diff_self" = (\<open>minus ?a ?a = zero\<close>) ["simp"]
  notes theorem
    "minus_add_cancel" = (\<open>plus (uminus ?a) (plus ?a ?b) = ?b\<close>)
      ["simp"]
  notes theorem
    "add_minus_cancel" = (\<open>plus ?a (plus (uminus ?a) ?b) = ?b\<close>)
      ["simp"]
  notes theorem
    "diff_add_cancel" = (\<open>plus (minus ?a ?b) ?b = ?a\<close>) ["simp"]
  notes theorem
    "add_diff_cancel" = (\<open>minus (plus ?a ?b) ?b = ?a\<close>) ["simp"]
  notes theorem
    "minus_add" =
      \<open>uminus (plus ?a ?b) = plus (uminus ?b) (uminus ?a)\<close>
  notes theorem
    "right_minus_eq" = (\<open>(minus ?a ?b = zero) = (?a = ?b)\<close>)
      ["simp"]
  notes theorem
    "eq_iff_diff_eq_0" = \<open>(?a = ?b) = (minus ?a ?b = zero)\<close>
  notes theorem
    "diff_0" = (\<open>minus zero ?a = uminus ?a\<close>) ["simp"]
  notes theorem
    "diff_0_right" = (\<open>minus ?a zero = ?a\<close>) ["simp"]
  notes theorem
    "diff_minus_eq_add" = (\<open>minus ?a (uminus ?b) = plus ?a ?b\<close>)
      ["simp"]
  notes theorem
    "neg_equal_iff_equal" =
      (\<open>(uminus ?a = uminus ?b) = (?a = ?b)\<close>) ["simp"]
  notes theorem
    "neg_equal_0_iff_equal" =
      (\<open>(uminus ?a = zero) = (?a = zero)\<close>) ["simp"]
  notes theorem
    "neg_0_equal_iff_equal" =
      (\<open>(zero = uminus ?a) = (zero = ?a)\<close>) ["simp"]
  notes theorem
    "equation_minus_iff" =
      \<open>(?a = uminus ?b) = (?b = uminus ?a)\<close>
  notes theorem
    "minus_equation_iff" =
      \<open>(uminus ?a = ?b) = (uminus ?b = ?a)\<close>
  notes theorem
    "eq_neg_iff_add_eq_0" =
      \<open>(?a = uminus ?b) = (plus ?a ?b = zero)\<close>
  notes theorem
    "add_eq_0_iff2" = \<open>(plus ?a ?b = zero) = (?a = uminus ?b)\<close>
  notes theorem
    "neg_eq_iff_add_eq_0" =
      \<open>(uminus ?a = ?b) = (plus ?a ?b = zero)\<close>
  notes theorem
    "add_eq_0_iff" = \<open>(plus ?a ?b = zero) = (?b = uminus ?a)\<close>
  notes theorem
    "minus_diff_eq" = (\<open>uminus (minus ?a ?b) = minus ?b ?a\<close>)
      ["simp"]
  notes theorem
    "add_diff_eq" =
      (\<open>plus ?a (minus ?b ?c) = minus (plus ?a ?b) ?c\<close>)
      ["algebra_simps", "algebra_split_simps", "field_simps",
        "field_split_simps"]
  notes theorem
    "diff_add_eq_diff_diff_swap" =
      \<open>minus ?a (plus ?b ?c) = minus (minus ?a ?c) ?b\<close>
  notes theorem
    "diff_eq_eq" = (\<open>(minus ?a ?b = ?c) = (?a = plus ?c ?b)\<close>)
      ["algebra_simps", "algebra_split_simps", "field_simps",
        "field_split_simps"]
  notes theorem
    "eq_diff_eq" = (\<open>(?a = minus ?c ?b) = (plus ?a ?b = ?c)\<close>)
      ["algebra_simps", "algebra_split_simps", "field_simps",
        "field_split_simps"]
  notes theorem
    "diff_diff_eq2" =
      (\<open>minus ?a (minus ?b ?c) = minus (plus ?a ?c) ?b\<close>)
      ["algebra_simps", "algebra_split_simps", "field_simps",
        "field_split_simps"]
  notes theorem
    "diff_eq_diff_eq" =
      \<open>minus ?a ?b = minus ?c ?d ==> (?a = ?b) = (?c = ?d)\<close>
  notes theorem
    "minus_comp_minus" = (\<open>uminus o uminus = id\<close>) ["simp"]
  notes
    "cancel_ab_semigroup_add_axioms" =
      (\<open>class.cancel_ab_semigroup_add plus minus\<close>)
      ["attribute" "<attribute>"]
  notes
    "add_diff_cancel_left'" = (\<open>minus (plus ?a ?b) ?a = ?b\<close>)
      ["simp"]
  notes
    "diff_diff_add" =
      (\<open>minus (minus ?a ?b) ?c = minus ?a (plus ?b ?c)\<close>)
      ["algebra_simps", "algebra_split_simps", "field_simps",
        "field_split_simps"]
  notes theorem
    "add_diff_cancel_right'" = (\<open>minus (plus ?a ?b) ?b = ?a\<close>)
      ["simp"]
  notes theorem
    "add_diff_cancel_left" =
      (\<open>minus (plus ?c ?a) (plus ?c ?b) = minus ?a ?b\<close>)
      ["simp"]
  notes theorem
    "add_diff_cancel_right" =
      (\<open>minus (plus ?a ?c) (plus ?b ?c) = minus ?a ?b\<close>)
      ["simp"]
  notes theorem
    "diff_right_commute" =
      \<open>minus (minus ?a ?c) ?b = minus (minus ?a ?b) ?c\<close>
  notes
    "cancel_comm_monoid_add_axioms" =
      (\<open>class.cancel_comm_monoid_add plus minus zero\<close>)
      ["attribute" "<attribute>"]
  notes theorem "diff_zero" = (\<open>minus ?a zero = ?a\<close>) ["simp"]
  notes theorem "diff_cancel" = (\<open>minus ?a ?a = zero\<close>) ["simp"]
  notes theorem
    "add_implies_diff" = \<open>plus ?c ?b = ?a ==> ?c = minus ?a ?b\<close>
  notes theorem
    "add_cancel_right_right" =
      (\<open>(?a = plus ?a ?b) = (?b = zero)\<close>) ["simp"]
  notes theorem
    "add_cancel_right_left" =
      (\<open>(?a = plus ?b ?a) = (?b = zero)\<close>) ["simp"]
  notes theorem
    "add_cancel_left_right" =
      (\<open>(plus ?a ?b = ?a) = (?b = zero)\<close>) ["simp"]
  notes theorem
    "add_cancel_left_left" =
      (\<open>(plus ?b ?a = ?a) = (?b = zero)\<close>) ["simp"]
  notes
    "ab_group_add_axioms" =
      (\<open>class.ab_group_add plus zero minus uminus\<close>)
      ["attribute" "<attribute>"]
  notes "ab_left_minus" = \<open>plus (uminus ?a) ?a = zero\<close>
  notes
    "ab_diff_conv_add_uminus" =
      \<open>minus ?a ?b = plus ?a (uminus ?b)\<close>
  notes theorem
    "uminus_add_conv_diff" =
      (\<open>plus (uminus ?a) ?b = minus ?b ?a\<close>) ["simp"]
  notes theorem
    "minus_add_distrib" =
      (\<open>uminus (plus ?a ?b) = plus (uminus ?a) (uminus ?b)\<close>)
      ["simp"]
  notes theorem
    "diff_add_eq" =
      (\<open>plus (minus ?a ?b) ?c = minus (plus ?a ?c) ?b\<close>)
      ["algebra_simps", "algebra_split_simps", "field_simps",
        "field_split_simps"]
  notes theorem
    "minus_diff_commute" =
      \<open>minus (uminus ?b) ?a = minus (uminus ?a) ?b\<close>
  notes theorem "surj_plus" = (\<open>surj (plus ?a)\<close>) ["simp"]
  notes theorem
    "inj_diff_right" = (\<open>inj (%b. minus b ?a)\<close>) ["simp"]
  notes theorem
    "surj_diff_right" = (\<open>surj (%x. minus x ?a)\<close>) ["simp"]
  notes theorem
    "translation_Compl" = \<open>plus ?a ` (- ?t) = - plus ?a ` ?t\<close>
  notes theorem
    "translation_subtract_Compl" =
      \<open>(%x. minus x ?a) ` (- ?t) = - (%x. minus x ?a) ` ?t\<close>
  notes theorem
    "translation_diff" =
      \<open>plus ?a ` (?s - ?t) = plus ?a ` ?s - plus ?a ` ?t\<close>
  notes theorem
    "translation_subtract_diff" =
      \<open>(%x. minus x ?a) ` (?s - ?t) =
             (%x. minus x ?a) ` ?s - (%x. minus x ?a) ` ?t\<close>
  notes theorem
    "translation_Int" =
      \<open>plus ?a ` (?s Int ?t) = plus ?a ` ?s Int plus ?a ` ?t\<close>
  notes theorem
    "translation_subtract_Int" =
      \<open>(%x. minus x ?a) ` (?s Int ?t) =
             (%x. minus x ?a) ` ?s Int (%x. minus x ?a) ` ?t\<close>
  notes theorem
    "uminus_sum_list_map" =
      \<open>uminus (monoid_add.sum_list plus zero (map ?f ?xs)) =
             monoid_add.sum_list plus zero (map (uminus o ?f) ?xs)\<close>
  notes theorem
    "sum_list_subtractf" =
      \<open>monoid_add.sum_list plus zero
              (map (%x. minus (?f x) (?g x)) ?xs) =
             minus (monoid_add.sum_list plus zero (map ?f ?xs))
              (monoid_add.sum_list plus zero (map ?g ?xs))\<close>
locale finite_dimensional_vector_space_pair_1_on
  fixes S1 :: "'b set"
    and S2 :: "'c set"
    and scale1 :: "'a => 'b => 'b"
    and scale2 :: "'a => 'c => 'c"
    and Basis1 :: "'b set"
  assumes
    "finite_dimensional_vector_space_pair_1_on S1 S2 scale1 scale2 Basis1"
locale finite_dimensional_vector_space_pair_on
  fixes S1 :: "'b set"
    and S2 :: "'c set"
    and scale1 :: "'a => 'b => 'b"
    and scale2 :: "'a => 'c => 'c"
    and Basis1 :: "'b set"
    and Basis2 :: "'c set"
  assumes
    "finite_dimensional_vector_space_pair_on S1 S2 scale1 scale2 Basis1
      Basis2"
locale local_typedef_module_on
  fixes S :: "'b set"
    and scale :: "'a => 'b => 'b"
    and s :: "'s itself"
  assumes "local_typedef_module_on TYPE('s) S scale"
### theory "HOL-Library.Extended_Real"
### 2.977s elapsed time, 11.679s cpu time, 1.531s GC time
Loading theory "HOL-Library.Extended_Nonnegative_Real" (required by "Draft.Tangent_SpaceMoreTemplates" via "Draft.Tangent_Space" via "Draft.Partition_Of_Unity" via "Draft.Bump_Function" via "Draft.Smooth" via "Draft.Analysis_More" via "HOL-Analysis.Equivalence_Lebesgue_Henstock_Integration" via "HOL-Analysis.Lebesgue_Measure" via "HOL-Analysis.Finite_Product_Measure" via "HOL-Analysis.Binary_Product_Measure" via "HOL-Analysis.Nonnegative_Lebesgue_Integration" via "HOL-Analysis.Measure_Space" via "HOL-Analysis.Measurable" via "HOL-Analysis.Sigma_Algebra")
"- \<infinity>"
  :: "ereal"
locale local_typedef_vector_space_on
  fixes S :: "'b set"
    and scale :: "'a => 'b => 'b"
    and s :: "'s itself"
  assumes "local_typedef_vector_space_on TYPE('s) S scale"
"\<infinity>"
  :: "ereal"
locale local_typedef_finite_dimensional_vector_space_on
  fixes S :: "'b set"
    and scale :: "'a => 'b => 'b"
    and Basis :: "'b set"
    and s :: "'s itself"
  assumes
    "local_typedef_finite_dimensional_vector_space_on TYPE('s) S scale
      Basis"
### theory "HOL-Analysis.Elementary_Normed_Spaces"
### 1.438s elapsed time, 5.590s cpu time, 0.681s GC time
Loading theory "HOL-Analysis.Topology_Euclidean_Space" (required by "Draft.Tangent_SpaceMoreTemplates" via "Draft.Tangent_Space" via "Draft.Partition_Of_Unity" via "Draft.Bump_Function" via "Draft.Smooth" via "Draft.Analysis_More" via "HOL-Analysis.Equivalence_Lebesgue_Henstock_Integration" via "HOL-Analysis.Lebesgue_Measure" via "HOL-Analysis.Finite_Product_Measure" via "HOL-Analysis.Binary_Product_Measure" via "HOL-Analysis.Nonnegative_Lebesgue_Integration" via "HOL-Analysis.Borel_Space" via "HOL-Analysis.Derivative" via "HOL-Analysis.Bounded_Linear_Function")
"ereal (13 / 4)"
  :: "ereal"
instantiation
  ennreal :: complete_linorder
  Inf_ennreal == Inf :: ennreal set => ennreal
  Sup_ennreal == Sup :: ennreal set => ennreal
  bot_ennreal == bot :: ennreal
  sup_ennreal == sup :: ennreal => ennreal => ennreal
  top_ennreal == top :: ennreal
  inf_ennreal == inf :: ennreal => ennreal => ennreal
  less_eq_ennreal == less_eq :: ennreal => ennreal => bool
  less_ennreal == less :: ennreal => ennreal => bool
"True"
  :: "bool"
"True"
  :: "bool"
instantiation
  ennreal :: infinity
  infinity_ennreal == infinity :: ennreal
locale local_typedef_module_pair
  fixes S1 :: "'b set"
    and scale1 :: "'a => 'b => 'b"
    and s :: "'s itself"
    and S2 :: "'c set"
    and scale2 :: "'a => 'c => 'c"
    and t :: "'t itself"
  assumes "local_typedef_module_pair TYPE('s) TYPE('t) S1 scale1 S2 scale2"
instantiation
  ennreal :: {comm_semiring_1,semiring_1_no_zero_divisors}
  zero_ennreal == zero_class.zero :: ennreal
  plus_ennreal == plus :: ennreal => ennreal => ennreal
  one_ennreal == one_class.one :: ennreal
  times_ennreal == times :: ennreal => ennreal => ennreal
instantiation
  ennreal :: minus
  minus_ennreal == minus :: ennreal => ennreal => ennreal
instantiation
  ennreal :: inverse
  inverse_ennreal == inverse :: ennreal => ennreal
  divide_ennreal == divide :: ennreal => ennreal => ennreal
structure Cancel_Ennreal_Common:
  sig
    val dest_sum: term -> term list
    val dest_summing: term * term list -> term list
    val find_first: term -> term list -> term list
    val find_first_t: term list -> term -> term list -> term list
    val mk_eq: term * term -> term
    val mk_sum: typ -> term list -> term
    val norm_ss: simpset
    val norm_tac: Proof.context -> tactic
    val simplify_meta_eq: Proof.context -> thm -> thm -> thm
    val trans_tac: Proof.context -> thm option -> tactic
  end
structure Eq_Ennreal_Cancel:
  sig val proc: Proof.context -> term -> thm option end
structure Le_Ennreal_Cancel:
  sig val proc: Proof.context -> term -> thm option end
structure Less_Ennreal_Cancel:
  sig val proc: Proof.context -> term -> thm option end
locale local_typedef_vector_space_pair
  fixes S1 :: "'b set"
    and scale1 :: "'a => 'b => 'b"
    and s :: "'s itself"
    and S2 :: "'c set"
    and scale2 :: "'a => 'c => 'c"
    and t :: "'t itself"
  assumes
    "local_typedef_vector_space_pair TYPE('s) TYPE('t) S1 scale1 S2 scale2"
instantiation
  ennreal :: linear_continuum_topology
  open_ennreal == open :: ennreal set => bool
locale local_typedef_finite_dimensional_vector_space_pair_1
  fixes S1 :: "'b set"
    and scale1 :: "'a => 'b => 'b"
    and Basis1 :: "'b set"
    and s :: "'s itself"
    and S2 :: "'c set"
    and scale2 :: "'a => 'c => 'c"
    and t :: "'t itself"
  assumes
    "local_typedef_finite_dimensional_vector_space_pair_1 TYPE('s) TYPE('t)
      S1 scale1 Basis1 S2 scale2"
### theory "HOL-Library.Extended_Nonnegative_Real"
### 1.517s elapsed time, 5.192s cpu time, 0.572s GC time
Loading theory "HOL-Analysis.Sigma_Algebra" (required by "Draft.Tangent_SpaceMoreTemplates" via "Draft.Tangent_Space" via "Draft.Partition_Of_Unity" via "Draft.Bump_Function" via "Draft.Smooth" via "Draft.Analysis_More" via "HOL-Analysis.Equivalence_Lebesgue_Henstock_Integration" via "HOL-Analysis.Lebesgue_Measure" via "HOL-Analysis.Finite_Product_Measure" via "HOL-Analysis.Binary_Product_Measure" via "HOL-Analysis.Nonnegative_Lebesgue_Integration" via "HOL-Analysis.Measure_Space" via "HOL-Analysis.Measurable")
locale subset_class
  fixes \<Omega> :: "'a set"
    and M :: "'a set set"
  assumes "subset_class \<Omega> M"
locale semiring_of_sets
  fixes \<Omega> :: "'a set"
    and M :: "'a set set"
  assumes "semiring_of_sets \<Omega> M"
locale ring_of_sets
  fixes \<Omega> :: "'a set"
    and M :: "'a set set"
  assumes "ring_of_sets \<Omega> M"
locale algebra
  fixes \<Omega> :: "'a set"
    and M :: "'a set set"
  assumes "algebra \<Omega> M"
locale sigma_algebra
  fixes \<Omega> :: "'a set"
    and M :: "'a set set"
  assumes "sigma_algebra \<Omega> M"
locale local_typedef_finite_dimensional_vector_space_pair
  fixes S1 :: "'b set"
    and scale1 :: "'a => 'b => 'b"
    and Basis1 :: "'b set"
    and s :: "'s itself"
    and S2 :: "'c set"
    and scale2 :: "'a => 'c => 'c"
    and Basis2 :: "'c set"
    and t :: "'t itself"
  assumes
    "local_typedef_finite_dimensional_vector_space_pair TYPE('s) TYPE('t) S1
      scale1 Basis1 S2 scale2 Basis2"
locale module_on
  fixes S :: "'b set"
    and scale :: "'a => 'b => 'b"  (infixr \<open>*s\<close> 75)
  assumes "module_on S (*s)"
Proofs for inductive predicate(s) "sigma_setsp"
  Proving monotonicity ...
locale module
  fixes scale :: "'a => 'b => 'b"  (infixr \<open>*s\<close> 75)
  assumes "module (*s)"
  notes
    "module_axioms" = (\<open>module (*s)\<close>)
      ["attribute" "<attribute>"]
  notes
    "scale_right_distrib" =
      (\<open>?a *s (?x + ?y) = ?a *s ?x + ?a *s ?y\<close>)
      ["algebra_simps", "algebra_split_simps"]
  notes
    "scale_left_distrib" =
      (\<open>(?a + ?b) *s ?x = ?a *s ?x + ?b *s ?x\<close>)
      ["algebra_simps", "algebra_split_simps"]
  notes
    "scale_scale" = (\<open>?a *s ?b *s ?x = (?a * ?b) *s ?x\<close>)
      ["simp"]
  notes "scale_one" = (\<open>(1::'a) *s ?x = ?x\<close>) ["simp"]
  notes theorem
    "scale_left_commute" = \<open>?a *s ?b *s ?x = ?b *s ?a *s ?x\<close>
  notes theorem
    "scale_zero_left" = (\<open>(0::'a) *s ?x = (0::'b)\<close>) ["simp"]
  notes theorem
    "scale_minus_left" = (\<open>- ?a *s ?x = - (?a *s ?x)\<close>) ["simp"]
  notes theorem
    "scale_left_diff_distrib" =
      (\<open>(?a - ?b) *s ?x = ?a *s ?x - ?b *s ?x\<close>)
      ["algebra_simps", "algebra_split_simps"]
  notes theorem
    "scale_sum_left" =
      \<open>sum ?f ?A *s ?x = (SUM a:?A. ?f a *s ?x)\<close>
  notes theorem
    "scale_zero_right" = (\<open>?a *s (0::'b) = (0::'b)\<close>) ["simp"]
  notes theorem
    "scale_minus_right" = (\<open>?a *s - ?x = - (?a *s ?x)\<close>)
      ["simp"]
  notes theorem
    "scale_right_diff_distrib" =
      (\<open>?a *s (?x - ?y) = ?a *s ?x - ?a *s ?y\<close>)
      ["algebra_simps", "algebra_split_simps"]
  notes theorem
    "scale_sum_right" =
      \<open>?a *s sum ?f ?A = (SUM x:?A. ?a *s ?f x)\<close>
  notes theorem
    "sum_constant_scale" =
      \<open>(SUM x:?A. ?y) = of_nat (card ?A) *s ?y\<close>
  notes theorem
    "scale_left_distrib_NO_MATCH" =
      \<open>NO_MATCH (?x div ?y) ?c ==>
             (?a + ?b) *s ?x = ?a *s ?x + ?b *s ?x\<close>
  notes theorem
    "scale_right_distrib_NO_MATCH" =
      \<open>NO_MATCH (?x div ?y) ?a ==>
             ?a *s (?x + ?y) = ?a *s ?x + ?a *s ?y\<close>
  notes theorem
    "scale_left_diff_distrib_NO_MATCH" =
      \<open>NO_MATCH (?x div ?y) ?c ==>
             (?a - ?b) *s ?x = ?a *s ?x - ?b *s ?x\<close>
  notes theorem
    "scale_right_diff_distrib_NO_MATCH" =
      \<open>NO_MATCH (?x div ?y) ?a ==>
             ?a *s (?x - ?y) = ?a *s ?x - ?a *s ?y\<close>
  notes theorem
    (\<open>NO_MATCH (?x div ?y) ?c ==>
            (?a + ?b) *s ?x = ?a *s ?x + ?b *s ?x\<close>)
      ["field_simps", "field_split_simps"]
      (\<open>NO_MATCH (?x div ?y) ?a ==>
              ?a *s (?x + ?y) = ?a *s ?x + ?a *s ?y\<close>)
      ["field_simps", "field_split_simps"]
      (\<open>NO_MATCH (?x div ?y) ?c ==>
              (?a - ?b) *s ?x = ?a *s ?x - ?b *s ?x\<close>)
      ["field_simps", "field_split_simps"]
      (\<open>NO_MATCH (?x div ?y) ?a ==>
              ?a *s (?x - ?y) = ?a *s ?x - ?a *s ?y\<close>)
      ["field_simps", "field_split_simps"]
  notes (\<open>TERM _\<close>) ["attribute" "<attribute>"]
  notes (\<open>TERM _\<close>) ["attribute" "<attribute>"]
  notes
    "subspace_def" =
      \<open>local.subspace ?S =
             ((0::'b) : ?S &
              (ALL x:?S. ALL y:?S. x + y : ?S) &
              (ALL c. ALL x:?S. c *s x : ?S))\<close>
  notes (\<open>TERM _\<close>) ["attribute" "<attribute>"]
  notes theorem
    "subspaceI" =
      \<open>[| (0::'b) : ?S; !!x y. [| x : ?S; y : ?S |] ==> x + y : ?S;
                !!c x. x : ?S ==> c *s x : ?S |]
             ==> local.subspace ?S\<close>
  notes theorem
    "subspace_UNIV" = (\<open>local.subspace UNIV\<close>) ["simp"]
  notes theorem
    "subspace_single_0" = (\<open>local.subspace {0::'b}\<close>) ["simp"]
  notes theorem
    "subspace_0" = \<open>local.subspace ?S ==> (0::'b) : ?S\<close>
  notes theorem
    "subspace_add" =
      \<open>[| local.subspace ?S; ?x : ?S; ?y : ?S |]
             ==> ?x + ?y : ?S\<close>
  notes theorem
    "subspace_scale" =
      \<open>[| local.subspace ?S; ?x : ?S |] ==> ?c *s ?x : ?S\<close>
  notes theorem
    "subspace_neg" =
      \<open>[| local.subspace ?S; ?x : ?S |] ==> - ?x : ?S\<close>
  notes theorem
    "subspace_diff" =
      \<open>[| local.subspace ?S; ?x : ?S; ?y : ?S |]
             ==> ?x - ?y : ?S\<close>
  notes theorem
    "subspace_sum" =
      \<open>[| local.subspace ?A; !!x. x : ?B ==> ?f x : ?A |]
             ==> sum ?f ?B : ?A\<close>
  notes theorem
    "subspace_Int" =
      \<open>(!!i. i : ?I ==> local.subspace (?s i)) ==>
             local.subspace (\<Inter> (?s ` ?I))\<close>
  notes theorem
    "subspace_Inter" =
      \<open>Ball ?f local.subspace ==> local.subspace (\<Inter> ?f)\<close>
  notes theorem
    "subspace_inter" =
      \<open>[| local.subspace ?A; local.subspace ?B |]
             ==> local.subspace (?A Int ?B)\<close>
  notes (\<open>TERM _\<close>) ["attribute" "<attribute>"]
  notes (\<open>TERM _\<close>) ["attribute" "<attribute>"]
  notes
    "span_explicit" =
      \<open>local.span ?b =
             {SUM a:t. r a *s a |t r. finite t & t <= ?b}\<close>
  notes (\<open>TERM _\<close>) ["attribute" "<attribute>"]
  notes theorem
    "span_explicit'" =
      \<open>local.span ?b =
             {SUM v | f v ~= (0::'a). f v *s v |f.
              finite {v. f v ~= (0::'a)} &
              (ALL v. f v ~= (0::'a) --> v : ?b)}\<close>
  notes theorem
    "span_alt" =
      \<open>local.span ?B =
             {SUM x | f x ~= (0::'a). f x *s x |f.
              {x. f x ~= (0::'a)} <= ?B &
              finite {x. f x ~= (0::'a)}}\<close>
  notes theorem
    "span_finite" =
      \<open>finite ?S ==>
             local.span ?S = range (%u. SUM v:?S. u v *s v)\<close>
  notes theorem
    "span_induct_alt" =
      (\<open>[| ?x : local.span ?S; ?h (0::'b);
                 !!c x y. [| x : ?S; ?h y |] ==> ?h (c *s x + y) |]
              ==> ?h ?x\<close>)
      ["consumes" 1, "case_names" base step, "induct" set : local.span]
  notes theorem
    "span_mono" = \<open>?A <= ?B ==> local.span ?A <= local.span ?B\<close>
  notes theorem "span_base" = \<open>?a : ?S ==> ?a : local.span ?S\<close>
  notes theorem "span_superset" = \<open>?S <= local.span ?S\<close>
  notes theorem "span_zero" = \<open>(0::'b) : local.span ?S\<close>
  notes theorem
    "span_UNIV" = (\<open>local.span UNIV = UNIV\<close>) ["simp"]
  notes theorem
    "span_add" =
      \<open>[| ?x : local.span ?S; ?y : local.span ?S |]
             ==> ?x + ?y : local.span ?S\<close>
  notes theorem
    "span_scale" =
      \<open>?x : local.span ?S ==> ?c *s ?x : local.span ?S\<close>
  notes theorem
    "subspace_span" = (\<open>local.subspace (local.span ?S)\<close>)
      ["iff"]
  notes theorem
    "span_neg" = \<open>?x : local.span ?S ==> - ?x : local.span ?S\<close>
  notes theorem
    "span_diff" =
      \<open>[| ?x : local.span ?S; ?y : local.span ?S |]
             ==> ?x - ?y : local.span ?S\<close>
  notes theorem
    "span_sum" =
      \<open>(!!x. x : ?A ==> ?f x : local.span ?S) ==>
             sum ?f ?A : local.span ?S\<close>
  notes theorem
    "span_minimal" =
      \<open>[| ?S <= ?T; local.subspace ?T |]
             ==> local.span ?S <= ?T\<close>
  notes theorem
    "span_def" = \<open>local.span ?S = local.subspace hull ?S\<close>
  notes theorem
    "span_unique" =
      \<open>[| ?S <= ?T; local.subspace ?T;
                !!T'. [| ?S <= T'; local.subspace T' |] ==> ?T <= T' |]
             ==> local.span ?S = ?T\<close>
  notes theorem
    "span_subspace_induct" =
      (\<open>[| ?x : local.span ?S; local.subspace ?P;
                 !!x. x : ?S ==> x : ?P |]
              ==> ?x : ?P\<close>)
      ["consumes" 2]
  notes theorem
    "span_induct" =
      (\<open>[| ?x : local.span ?S; local.subspace (Collect ?P);
                 !!x. x : ?S ==> ?P x |]
              ==> ?P ?x\<close>)
      ["consumes" 1, "case_names" base step, "induct" set : local.span]
  notes theorem
    "span_empty" = (\<open>local.span {} = {0::'b}\<close>) ["simp"]
  notes theorem
    "span_subspace" =
      \<open>[| ?A <= ?B; ?B <= local.span ?A; local.subspace ?B |]
             ==> local.span ?A = ?B\<close>
  notes theorem
    "span_span" = \<open>local.span (local.span ?A) = local.span ?A\<close>
  notes theorem
    "span_add_eq" =
      \<open>?x : local.span ?S ==>
             (?x + ?y : local.span ?S) = (?y : local.span ?S)\<close>
  notes theorem
    "span_add_eq2" =
      \<open>?y : local.span ?S ==>
             (?x + ?y : local.span ?S) = (?x : local.span ?S)\<close>
  notes theorem
    "span_singleton" = \<open>local.span {?x} = range (%k. k *s ?x)\<close>
  notes theorem
    "span_Un" =
      \<open>local.span (?S Un ?T) =
             {x + y |x y. x : local.span ?S & y : local.span ?T}\<close>
  notes theorem
    "span_insert" =
      \<open>local.span (insert ?a ?S) =
             {x. EX k. x - k *s ?a : local.span ?S}\<close>
  notes theorem
    "span_breakdown" =
      \<open>[| ?b : ?S; ?a : local.span ?S |]
             ==> EX k. ?a - k *s ?b : local.span (?S - {?b})\<close>
  notes theorem
    "span_breakdown_eq" =
      \<open>(?x : local.span (insert ?a ?S)) =
             (EX k. ?x - k *s ?a : local.span ?S)\<close>
  notes theorem
    "span_clauses" = \<open>?a : ?S ==> ?a : local.span ?S\<close>
      \<open>(0::'b) : local.span ?S\<close>
      \<open>[| ?x : local.span ?S; ?y : local.span ?S |]
             ==> ?x + ?y : local.span ?S\<close>
      \<open>?x : local.span ?S ==> ?c *s ?x : local.span ?S\<close>
  notes theorem
    "span_eq_iff" =
      (\<open>(local.span ?s = ?s) = local.subspace ?s\<close>) ["simp"]
  notes theorem
    "span_eq" =
      \<open>(local.span ?S = local.span ?T) =
             (?S <= local.span ?T & ?T <= local.span ?S)\<close>
  notes theorem
    "eq_span_insert_eq" =
      \<open>?x - ?y : local.span ?S ==>
             local.span (insert ?x ?S) = local.span (insert ?y ?S)\<close>
  notes (\<open>TERM _\<close>) ["attribute" "<attribute>"]
  notes (\<open>TERM _\<close>) ["attribute" "<attribute>"]
  notes
    "dependent_explicit" =
      \<open>local.dependent ?s =
             (EX t u.
                 finite t &
                 t <= ?s &
                 (SUM v:t. u v *s v) = (0::'b) &
                 (EX v:t. u v ~= (0::'a)))\<close>
  notes (\<open>TERM _\<close>) ["attribute" "<attribute>"]
  notes (\<open>TERM _\<close>) ["attribute" "<attribute>"]
  notes theorem
    "dependent_mono" =
      \<open>[| local.dependent ?B; ?B <= ?A |]
             ==> local.dependent ?A\<close>
  notes theorem
    "independent_mono" =
      \<open>[| local.independent ?A; ?B <= ?A |]
             ==> local.independent ?B\<close>
  notes theorem
    "dependent_zero" = \<open>(0::'b) : ?A ==> local.dependent ?A\<close>
  notes theorem
    "independent_empty" = (\<open>local.independent {}\<close>)
      ["HOL.intro"]
  notes theorem
    "independent_explicit_module" =
      \<open>local.independent ?s =
             (ALL t u v.
                 finite t -->
                 t <= ?s -->
                 (SUM v:t. u v *s v) = (0::'b) -->
                 v : t --> u v = (0::'a))\<close>
  notes theorem
    "independentD" =
      \<open>[| local.independent ?s; finite ?t; ?t <= ?s;
                (SUM v:?t. ?u v *s v) = (0::'b); ?v : ?t |]
             ==> ?u ?v = (0::'a)\<close>
  notes theorem
    "independent_Union_directed" =
      \<open>[| !!c d. [| c : ?C; d : ?C |] ==> c <= d | d <= c;
                !!c. c : ?C ==> local.independent c |]
             ==> local.independent (\<Union> ?C)\<close>
  notes theorem
    "dependent_finite" =
      \<open>finite ?S ==>
             local.dependent ?S =
             (EX u. (EX v:?S. u v ~= (0::'a)) &
                    (SUM v:?S. u v *s v) = (0::'b))\<close>
  notes theorem
    "dependent_alt" =
      \<open>local.dependent ?B =
             (EX X. finite {x. X x ~= (0::'a)} &
                    {x. X x ~= (0::'a)} <= ?B &
                    (SUM x | X x ~= (0::'a). X x *s x) = (0::'b) &
                    (EX x. X x ~= (0::'a)))\<close>
  notes theorem
    "independent_alt" =
      \<open>local.independent ?B =
             (ALL X.
                 finite {x. X x ~= (0::'a)} -->
                 {x. X x ~= (0::'a)} <= ?B -->
                 (SUM x | X x ~= (0::'a). X x *s x) = (0::'b) -->
                 (ALL x. X x = (0::'a)))\<close>
  notes theorem
    "independentD_alt" =
      \<open>[| local.independent ?B; finite {x. ?X x ~= (0::'a)};
                {x. ?X x ~= (0::'a)} <= ?B;
                (SUM x | ?X x ~= (0::'a). ?X x *s x) = (0::'b) |]
             ==> ?X ?x = (0::'a)\<close>
  notes theorem
    "independentD_unique" =
      \<open>[| local.independent ?B; finite {x. ?X x ~= (0::'a)};
                {x. ?X x ~= (0::'a)} <= ?B; finite {x. ?Y x ~= (0::'a)};
                {x. ?Y x ~= (0::'a)} <= ?B;
                (SUM x | ?X x ~= (0::'a). ?X x *s x) =
                (SUM x | ?Y x ~= (0::'a). ?Y x *s x) |]
             ==> ?X = ?Y\<close>
  notes (\<open>TERM _\<close>) ["attribute" "<attribute>"]
  notes (\<open>TERM _\<close>) ["attribute" "<attribute>"]
  notes
    "representation_def" =
      \<open>local.representation ?basis ?v =
             (if local.independent ?basis & ?v : local.span ?basis
              then SOME f.
                      (ALL v. f v ~= (0::'a) --> v : ?basis) &
                      finite {v. f v ~= (0::'a)} &
                      (SUM v | f v ~= (0::'a). f v *s v) = ?v
              else (%b. 0::'a))\<close>
  notes (\<open>TERM _\<close>) ["attribute" "<attribute>"]
  notes theorem
    "unique_representation" =
      \<open>[| local.independent ?basis;
                !!v. ?f v ~= (0::'a) ==> v : ?basis;
                !!v. ?g v ~= (0::'a) ==> v : ?basis;
                finite {v. ?f v ~= (0::'a)}; finite {v. ?g v ~= (0::'a)};
                (SUM v | ?f v ~= (0::'a). ?f v *s v) =
                (SUM v | ?g v ~= (0::'a). ?g v *s v) |]
             ==> ?f = ?g\<close>
  notes theorem
    "representation_ne_zero" =
      \<open>local.representation ?basis ?v ?b ~= (0::'a) ==>
             ?b : ?basis\<close>
  notes theorem
    "finite_representation" =
      \<open>finite {b. local.representation ?basis ?v b ~= (0::'a)}\<close>
  notes theorem
    "sum_nonzero_representation_eq" =
      \<open>[| local.independent ?basis; ?v : local.span ?basis |]
             ==> (SUM b | local.representation ?basis ?v b ~= (0::'a).
                     local.representation ?basis ?v b *s b) =
                 ?v\<close>
  notes theorem
    "sum_representation_eq" =
      \<open>[| local.independent ?basis; ?v : local.span ?basis; finite ?B;
                ?basis <= ?B |]
             ==> (SUM b:?B. local.representation ?basis ?v b *s b) =
                 ?v\<close>
  notes theorem
    "representation_eqI" =
      \<open>[| local.independent ?basis; ?v : local.span ?basis;
                !!b. ?f b ~= (0::'a) ==> b : ?basis;
                finite {b. ?f b ~= (0::'a)};
                (SUM b | ?f b ~= (0::'a). ?f b *s b) = ?v |]
             ==> local.representation ?basis ?v = ?f\<close>
  notes theorem
    "representation_basis" =
      \<open>[| local.independent ?basis; ?b : ?basis |]
             ==> local.representation ?basis ?b =
                 (%v. if v = ?b then 1::'a else (0::'a))\<close>
  notes theorem
    "representation_zero" =
      \<open>local.representation ?basis (0::'b) = (%b. 0::'a)\<close>
  notes theorem
    "representation_diff" =
      \<open>[| local.independent ?basis; ?v : local.span ?basis;
                ?u : local.span ?basis |]
             ==> local.representation ?basis (?u - ?v) =
                 (%b. local.representation ?basis ?u b -
                      local.representation ?basis ?v b)\<close>
  notes theorem
    "representation_neg" =
      \<open>[| local.independent ?basis; ?v : local.span ?basis |]
             ==> local.representation ?basis (- ?v) =
                 (%b. - local.representation ?basis ?v b)\<close>
  notes theorem
    "representation_add" =
      \<open>[| local.independent ?basis; ?v : local.span ?basis;
                ?u : local.span ?basis |]
             ==> local.representation ?basis (?u + ?v) =
                 (%b. local.representation ?basis ?u b +
                      local.representation ?basis ?v b)\<close>
  notes theorem
    "representation_sum" =
      \<open>[| local.independent ?basis;
                !!i. i : ?I ==> ?v i : local.span ?basis |]
             ==> local.representation ?basis (sum ?v ?I) =
                 (%b. SUM i:?I.
                         local.representation ?basis (?v i) b)\<close>
  notes theorem
    "representation_scale" =
      \<open>[| local.independent ?basis; ?v : local.span ?basis |]
             ==> local.representation ?basis (?r *s ?v) =
                 (%b. ?r * local.representation ?basis ?v b)\<close>
  notes theorem
    "representation_extend" =
      \<open>[| local.independent ?basis; ?v : local.span ?basis';
                ?basis' <= ?basis |]
             ==> local.representation ?basis ?v =
                 local.representation ?basis' ?v\<close>
  notes theorem
    "spanning_subset_independent" =
      \<open>[| ?B <= ?A; local.independent ?A; ?A <= local.span ?B |]
             ==> ?A = ?B\<close>
  notes theorem
    "module_hom_scale_self" =
      (\<open>module_hom (*s) (*s) ((*s) ?c)\<close>) ["simp"]
  notes theorem
    "module_hom_scale_left" =
      (\<open>module_hom (*) (*s) (%r. r *s ?x)\<close>) ["simp"]
  notes theorem "module_hom_id" = \<open>module_hom (*s) (*s) id\<close>
  notes theorem
    "module_hom_ident" = \<open>module_hom (*s) (*s) (%x. x)\<close>
  notes theorem
    "module_hom_uminus" = \<open>module_hom (*s) (*s) uminus\<close>
  notes theorem
    "span_with" = \<open>local.span = span_with (+) (0::'b) (*s)\<close>
  notes theorem
    "dependent_with" =
      \<open>local.dependent = dependent_with (+) (0::'b) (*s)\<close>
  notes theorem
    "subspace_with" =
      \<open>local.subspace = subspace_with (+) (0::'b) (*s)\<close>
Proofs for inductive predicate(s) "smallest_ccdi_setsp"
  Proving monotonicity ...
locale Dynkin_system
  fixes \<Omega> :: "'a set"
    and M :: "'a set set"
  assumes "Dynkin_system \<Omega> M"
### theory "HOL-Analysis.Topology_Euclidean_Space"
### 2.018s elapsed time, 6.395s cpu time, 0.742s GC time
Loading theory "HOL-Analysis.Convex_Euclidean_Space" (required by "Draft.Tangent_SpaceMoreTemplates" via "Draft.Tangent_Space" via "Draft.Partition_Of_Unity" via "Draft.Bump_Function" via "Draft.Smooth" via "Draft.Analysis_More" via "HOL-Analysis.Equivalence_Lebesgue_Henstock_Integration" via "HOL-Analysis.Lebesgue_Measure" via "HOL-Analysis.Finite_Product_Measure" via "HOL-Analysis.Binary_Product_Measure" via "HOL-Analysis.Nonnegative_Lebesgue_Integration" via "HOL-Analysis.Borel_Space" via "HOL-Analysis.Derivative")
Loading theory "HOL-Analysis.Extended_Real_Limits" (required by "Draft.Tangent_SpaceMoreTemplates" via "Draft.Tangent_Space" via "Draft.Partition_Of_Unity" via "Draft.Bump_Function" via "Draft.Smooth" via "Draft.Analysis_More" via "HOL-Analysis.Equivalence_Lebesgue_Henstock_Integration" via "HOL-Analysis.Lebesgue_Measure" via "HOL-Analysis.Finite_Product_Measure" via "HOL-Analysis.Binary_Product_Measure" via "HOL-Analysis.Nonnegative_Lebesgue_Integration" via "HOL-Analysis.Borel_Space" via "HOL-Analysis.Derivative" via "HOL-Analysis.Bounded_Linear_Function" via "HOL-Analysis.Uniform_Limit" via "HOL-Analysis.Summation_Tests")
locale vector_space_on
  fixes S :: "'b set"
    and scale :: "'a => 'b => 'b"  (infixr \<open>*s\<close> 75)
  assumes "vector_space_on S (*s)"
### theory "HOL-Analysis.Sigma_Algebra"
### 1.535s elapsed time, 5.297s cpu time, 0.615s GC time
Loading theory "HOL-Analysis.Measurable" (required by "Draft.Tangent_SpaceMoreTemplates" via "Draft.Tangent_Space" via "Draft.Partition_Of_Unity" via "Draft.Bump_Function" via "Draft.Smooth" via "Draft.Analysis_More" via "HOL-Analysis.Equivalence_Lebesgue_Henstock_Integration" via "HOL-Analysis.Lebesgue_Measure" via "HOL-Analysis.Finite_Product_Measure" via "HOL-Analysis.Binary_Product_Measure" via "HOL-Analysis.Nonnegative_Lebesgue_Integration" via "HOL-Analysis.Measure_Space")
signature MEASURABLE =
  sig
    val add_del_cong_thm: bool -> thm -> Context.generic -> Context.generic
    val add_local_cong: thm -> Proof.context -> Proof.context
    val add_preprocessor:
       string -> preprocessor -> Context.generic -> Context.generic
    val cong_thm_attr: attribute context_parser
    val del_preprocessor: string -> Context.generic -> Context.generic
    val dest_thm_attr: attribute context_parser
    val get_all: Context.generic -> thm list
    val get_cong: Context.generic -> thm list
    val get_dest: Context.generic -> thm list
    datatype level = Concrete | Generic
    val measurable_tac: Proof.context -> thm list -> tactic
    val measurable_thm_attr: bool * (bool * level) -> attribute
    val prepare_facts: Proof.context -> thm list -> thm list * Proof.context
    type preprocessor = thm -> Proof.context -> thm list * Proof.context
    val simproc: Proof.context -> cterm -> thm option
  end
structure Measurable: MEASURABLE
### theory "HOL-Analysis.Convex_Euclidean_Space"
### 1.119s elapsed time, 4.393s cpu time, 0.701s GC time
Loading theory "HOL-Analysis.Ordered_Euclidean_Space" (required by "Draft.Tangent_SpaceMoreTemplates" via "Draft.Tangent_Space" via "Draft.Partition_Of_Unity" via "Draft.Bump_Function" via "Draft.Smooth" via "Draft.Analysis_More" via "HOL-Analysis.Equivalence_Lebesgue_Henstock_Integration" via "HOL-Analysis.Lebesgue_Measure" via "HOL-Analysis.Finite_Product_Measure" via "HOL-Analysis.Binary_Product_Measure" via "HOL-Analysis.Nonnegative_Lebesgue_Integration" via "HOL-Analysis.Borel_Space")
### theory "HOL-Analysis.Extended_Real_Limits"
### 1.129s elapsed time, 4.429s cpu time, 0.701s GC time
Loading theory "HOL-Analysis.Summation_Tests" (required by "Draft.Tangent_SpaceMoreTemplates" via "Draft.Tangent_Space" via "Draft.Partition_Of_Unity" via "Draft.Bump_Function" via "Draft.Smooth" via "Draft.Analysis_More" via "HOL-Analysis.Equivalence_Lebesgue_Henstock_Integration" via "HOL-Analysis.Lebesgue_Measure" via "HOL-Analysis.Finite_Product_Measure" via "HOL-Analysis.Binary_Product_Measure" via "HOL-Analysis.Nonnegative_Lebesgue_Integration" via "HOL-Analysis.Borel_Space" via "HOL-Analysis.Derivative" via "HOL-Analysis.Bounded_Linear_Function" via "HOL-Analysis.Uniform_Limit")
### theory "HOL-Analysis.Measurable"
### 0.618s elapsed time, 2.418s cpu time, 0.443s GC time
Loading theory "HOL-Analysis.Measure_Space" (required by "Draft.Tangent_SpaceMoreTemplates" via "Draft.Tangent_Space" via "Draft.Partition_Of_Unity" via "Draft.Bump_Function" via "Draft.Smooth" via "Draft.Analysis_More" via "HOL-Analysis.Equivalence_Lebesgue_Henstock_Integration" via "HOL-Analysis.Lebesgue_Measure" via "HOL-Analysis.Finite_Product_Measure" via "HOL-Analysis.Binary_Product_Measure" via "HOL-Analysis.Nonnegative_Lebesgue_Integration")
locale finite_dimensional_vector_space_on
  fixes S :: "'a set"
    and scale :: "'b => 'a => 'a"
    and basis :: "'a set"
  assumes "finite_dimensional_vector_space_on S scale basis"
locale sigma_finite_measure
  fixes M :: "'a measure"
  assumes "sigma_finite_measure M"
### theory "HOL-Analysis.Summation_Tests"
### 0.925s elapsed time, 3.606s cpu time, 0.517s GC time
Loading theory "HOL-Analysis.Uniform_Limit" (required by "Draft.Tangent_SpaceMoreTemplates" via "Draft.Tangent_Space" via "Draft.Partition_Of_Unity" via "Draft.Bump_Function" via "Draft.Smooth" via "Draft.Analysis_More" via "HOL-Analysis.Equivalence_Lebesgue_Henstock_Integration" via "HOL-Analysis.Lebesgue_Measure" via "HOL-Analysis.Finite_Product_Measure" via "HOL-Analysis.Binary_Product_Measure" via "HOL-Analysis.Nonnegative_Lebesgue_Integration" via "HOL-Analysis.Borel_Space" via "HOL-Analysis.Derivative" via "HOL-Analysis.Bounded_Linear_Function")
class ordered_euclidean_space = Inf + Sup + euclidean_space + abs + inf +
  sup + ord +
  assumes
    "eucl_le":
      "!!x y. (x <= y) = (ALL i:Basis. x \<bullet> i <= y \<bullet> i)"
  assumes "eucl_less_le_not_le": "!!x y. (x < y) = (x <= y & ~ y <= x)"
  assumes
    "eucl_inf":
      "!!x y.
          inf x y =
          (SUM i:Basis. inf (x \<bullet> i) (y \<bullet> i) *\<^sub>R i)"
  assumes
    "eucl_sup":
      "!!x y.
          sup x y =
          (SUM i:Basis. sup (x \<bullet> i) (y \<bullet> i) *\<^sub>R i)"
  assumes
    "eucl_Inf":
      "!!X. Inf X = (SUM i:Basis. (INF x\<in>X. x \<bullet> i) *\<^sub>R i)"
  assumes
    "eucl_Sup":
      "!!X. Sup X = (SUM i:Basis. (SUP x\<in>X. x \<bullet> i) *\<^sub>R i)"
  assumes
    "eucl_abs":
      "!!x. \<bar>x\<bar> =
            (SUM i:Basis. \<bar>x \<bullet> i\<bar> *\<^sub>R i)"
locale finite_measure
  fixes M :: "'a measure"
  assumes "finite_measure M"
locale module_pair_on
  fixes S1 :: "'b set"
    and S2 :: "'c set"
    and scale1 :: "'a => 'b => 'b"
    and scale2 :: "'a => 'c => 'c"
  assumes "module_pair_on S1 S2 scale1 scale2"
### theory "HOL-Analysis.Uniform_Limit"
### 0.714s elapsed time, 2.778s cpu time, 0.334s GC time
Loading theory "HOL-Analysis.Bounded_Linear_Function" (required by "Draft.Tangent_SpaceMoreTemplates" via "Draft.Tangent_Space" via "Draft.Partition_Of_Unity" via "Draft.Bump_Function" via "Draft.Smooth" via "Draft.Analysis_More" via "HOL-Analysis.Equivalence_Lebesgue_Henstock_Integration" via "HOL-Analysis.Lebesgue_Measure" via "HOL-Analysis.Finite_Product_Measure" via "HOL-Analysis.Binary_Product_Measure" via "HOL-Analysis.Nonnegative_Lebesgue_Integration" via "HOL-Analysis.Borel_Space" via "HOL-Analysis.Derivative")
instantiation
  measure :: (type) order_bot
  bot_measure == bot :: 'a measure
  less_eq_measure == less_eq :: 'a measure => 'a measure => bool
  less_measure == less :: 'a measure => 'a measure => bool
Proofs for inductive predicate(s) "less_eq_measure"
  Proving monotonicity ...
instantiation
  measure :: (type) semilattice_sup
  sup_measure == sup :: 'a measure => 'a measure => 'a measure
instantiation
  measure :: (type) complete_lattice
  Inf_measure == Inf :: 'a measure set => 'a measure
  Sup_measure == Sup :: 'a measure set => 'a measure
  top_measure == top :: 'a measure
  inf_measure == inf :: 'a measure => 'a measure => 'a measure
locale vector_space_pair_on
  fixes S1 :: "'b set"
    and S2 :: "'c set"
    and scale1 :: "'a => 'b => 'b"
    and scale2 :: "'a => 'c => 'c"
  assumes "vector_space_pair_on S1 S2 scale1 scale2"
### theory "HOL-Analysis.Measure_Space"
### 2.093s elapsed time, 8.134s cpu time, 1.062s GC time
Loading theory "HOL-Analysis.Caratheodory" (required by "Draft.Tangent_SpaceMoreTemplates" via "Draft.Tangent_Space" via "Draft.Partition_Of_Unity" via "Draft.Bump_Function" via "Draft.Smooth" via "Draft.Analysis_More" via "HOL-Analysis.Equivalence_Lebesgue_Henstock_Integration" via "HOL-Analysis.Lebesgue_Measure")
### theory "HOL-Analysis.Caratheodory"
### 0.396s elapsed time, 1.528s cpu time, 0.219s GC time
Loading theory "HOL-Analysis.Line_Segment" (required by "Draft.Tangent_SpaceMoreTemplates" via "Draft.Tangent_Space" via "Draft.Partition_Of_Unity" via "Draft.Bump_Function" via "Draft.Smooth" via "Draft.Analysis_More" via "HOL-Analysis.Equivalence_Lebesgue_Henstock_Integration" via "HOL-Analysis.Lebesgue_Measure" via "HOL-Analysis.Finite_Product_Measure" via "HOL-Analysis.Binary_Product_Measure" via "HOL-Analysis.Nonnegative_Lebesgue_Integration" via "HOL-Analysis.Borel_Space" via "HOL-Analysis.Derivative")
instantiation
  blinfun :: (real_normed_vector, real_normed_vector) real_normed_vector
  uminus_blinfun == uminus ::
    'a \<Rightarrow>\<^sub>L 'b => 'a \<Rightarrow>\<^sub>L 'b
  zero_blinfun == zero_class.zero :: 'a \<Rightarrow>\<^sub>L 'b
  minus_blinfun == minus ::
    'a \<Rightarrow>\<^sub>L 'b
    => 'a \<Rightarrow>\<^sub>L 'b => 'a \<Rightarrow>\<^sub>L 'b
  plus_blinfun == plus ::
    'a \<Rightarrow>\<^sub>L 'b
    => 'a \<Rightarrow>\<^sub>L 'b => 'a \<Rightarrow>\<^sub>L 'b
  sgn_blinfun == sgn ::
    'a \<Rightarrow>\<^sub>L 'b => 'a \<Rightarrow>\<^sub>L 'b
  norm_blinfun == norm :: 'a \<Rightarrow>\<^sub>L 'b => real
  scaleR_blinfun == scaleR ::
    real => 'a \<Rightarrow>\<^sub>L 'b => 'a \<Rightarrow>\<^sub>L 'b
  dist_blinfun == dist ::
    'a \<Rightarrow>\<^sub>L 'b => 'a \<Rightarrow>\<^sub>L 'b => real
  uniformity_blinfun == uniformity ::
    ('a \<Rightarrow>\<^sub>L 'b * 'a \<Rightarrow>\<^sub>L 'b) filter
  open_blinfun == open :: ('a \<Rightarrow>\<^sub>L 'b) set => bool
locale bounded_bilinear
  fixes prod :: "'a => 'b => 'c"  (infixl \<open>**\<close> 70)
  assumes "bounded_bilinear (**)"
locale bounded_bilinear
  fixes prod :: "'a => 'b => 'c"  (infixl \<open>**\<close> 70)
  assumes "bounded_bilinear (**)"
### theory "HOL-Analysis.Line_Segment"
### 0.986s elapsed time, 3.822s cpu time, 0.556s GC time
Loading theory "HOL-Analysis.Starlike" (required by "Draft.Tangent_SpaceMoreTemplates" via "Draft.Tangent_Space" via "Draft.Partition_Of_Unity" via "Draft.Bump_Function" via "Draft.Smooth" via "Draft.Analysis_More" via "HOL-Analysis.Equivalence_Lebesgue_Henstock_Integration" via "HOL-Analysis.Homeomorphism" via "HOL-Analysis.Homotopy" via "HOL-Analysis.Path_Connected")
instantiation
  prod :: (abs, abs) abs
  abs_prod == abs :: 'a * 'b => 'a * 'b
### theory "HOL-Analysis.Bounded_Linear_Function"
### 2.046s elapsed time, 7.920s cpu time, 1.142s GC time
Loading theory "HOL-Analysis.Derivative" (required by "Draft.Tangent_SpaceMoreTemplates" via "Draft.Tangent_Space" via "Draft.Partition_Of_Unity" via "Draft.Bump_Function" via "Draft.Smooth" via "Draft.Analysis_More" via "HOL-Analysis.Equivalence_Lebesgue_Henstock_Integration" via "HOL-Analysis.Lebesgue_Measure" via "HOL-Analysis.Finite_Product_Measure" via "HOL-Analysis.Binary_Product_Measure" via "HOL-Analysis.Nonnegative_Lebesgue_Integration" via "HOL-Analysis.Borel_Space")
instantiation
  vec :: (ordered_euclidean_space, finite) ordered_euclidean_space
  abs_vec == abs :: ('a, 'b) vec => ('a, 'b) vec
  inf_vec == inf :: ('a, 'b) vec => ('a, 'b) vec => ('a, 'b) vec
  sup_vec == sup :: ('a, 'b) vec => ('a, 'b) vec => ('a, 'b) vec
  Inf_vec == Inf :: ('a, 'b) vec set => ('a, 'b) vec
  Sup_vec == Sup :: ('a, 'b) vec set => ('a, 'b) vec
### theory "HOL-Analysis.Ordered_Euclidean_Space"
### 5.203s elapsed time, 20.004s cpu time, 7.096s GC time
Loading theory "HOL-Analysis.Tagged_Division" (required by "Draft.Tangent_SpaceMoreTemplates" via "Draft.Tangent_Space" via "Draft.Partition_Of_Unity" via "Draft.Bump_Function" via "Draft.Smooth" via "Draft.Analysis_More" via "HOL-Analysis.Equivalence_Lebesgue_Henstock_Integration" via "HOL-Analysis.Henstock_Kurzweil_Integration")
locale finite_dimensional_vector_space_pair_1_on
  fixes S1 :: "'b set"
    and S2 :: "'c set"
    and scale1 :: "'a => 'b => 'b"
    and scale2 :: "'a => 'c => 'c"
    and Basis1 :: "'b set"
  assumes
    "finite_dimensional_vector_space_pair_1_on S1 S2 scale1 scale2 Basis1"
locale finite_dimensional_vector_space_pair_on
  fixes S1 :: "'b set"
    and S2 :: "'c set"
    and scale1 :: "'a => 'b => 'b"
    and scale2 :: "'a => 'c => 'c"
    and Basis1 :: "'b set"
    and Basis2 :: "'c set"
  assumes
    "finite_dimensional_vector_space_pair_on S1 S2 scale1 scale2 Basis1
      Basis2"
locale operative
  fixes f :: "'a => 'a => 'a"  (infixl \<open>\<^bold>*\<close> 70)
    and z :: "'a"  (\<open>\<^bold>1\<close>)
    and g :: "'b set => 'a"
  assumes "operative (\<^bold>*) \<^bold>1 g"
locale operative_real
  fixes f :: "'a => 'a => 'a"  (infixl \<open>\<^bold>*\<close> 70)
    and z :: "'a"  (\<open>\<^bold>1\<close>)
    and g :: "real set => 'a"
  assumes "operative_real (\<^bold>*) \<^bold>1 g"
### theory "HOL-Analysis.Tagged_Division"
### 1.045s elapsed time, 4.082s cpu time, 0.738s GC time
### theory "HOL-Types_To_Sets.Linear_Algebra_On"
### 11.096s elapsed time, 41.183s cpu time, 10.005s GC time
?a : affine hull ?S ==> aff_dim ?S = int (dim ((+) (- ?a) ` ?S))
### theory "HOL-Analysis.Starlike"
### 1.888s elapsed time, 6.551s cpu time, 1.158s GC time
Loading theory "HOL-Analysis.Path_Connected" (required by "Draft.Tangent_SpaceMoreTemplates" via "Draft.Tangent_Space" via "Draft.Partition_Of_Unity" via "Draft.Bump_Function" via "Draft.Smooth" via "Draft.Analysis_More" via "HOL-Analysis.Equivalence_Lebesgue_Henstock_Integration" via "HOL-Analysis.Homeomorphism" via "HOL-Analysis.Homotopy")
### theory "HOL-Analysis.Derivative"
### 2.010s elapsed time, 6.880s cpu time, 1.255s GC time
Loading theory "HOL-Analysis.Borel_Space" (required by "Draft.Tangent_SpaceMoreTemplates" via "Draft.Tangent_Space" via "Draft.Partition_Of_Unity" via "Draft.Bump_Function" via "Draft.Smooth" via "Draft.Analysis_More" via "HOL-Analysis.Equivalence_Lebesgue_Henstock_Integration" via "HOL-Analysis.Lebesgue_Measure" via "HOL-Analysis.Finite_Product_Measure" via "HOL-Analysis.Binary_Product_Measure" via "HOL-Analysis.Nonnegative_Lebesgue_Integration")
Loading theory "HOL-Analysis.Cartesian_Euclidean_Space" (required by "Draft.Tangent_SpaceMoreTemplates" via "Draft.Tangent_Space" via "Draft.Partition_Of_Unity" via "Draft.Bump_Function" via "Draft.Smooth" via "Draft.Analysis_More" via "HOL-Analysis.Equivalence_Lebesgue_Henstock_Integration")
### theory "HOL-Analysis.Cartesian_Euclidean_Space"
### 1.740s elapsed time, 6.220s cpu time, 5.270s GC time
### theory "HOL-Analysis.Path_Connected"
### 2.892s elapsed time, 8.674s cpu time, 5.594s GC time
Loading theory "HOL-Analysis.Homotopy" (required by "Draft.Tangent_SpaceMoreTemplates" via "Draft.Tangent_Space" via "Draft.Partition_Of_Unity" via "Draft.Bump_Function" via "Draft.Smooth" via "Draft.Analysis_More" via "HOL-Analysis.Equivalence_Lebesgue_Henstock_Integration" via "HOL-Analysis.Homeomorphism")
Loading theory "HOL-Analysis.Weierstrass_Theorems" (required by "Draft.Tangent_SpaceMoreTemplates" via "Draft.Tangent_Space" via "Draft.Partition_Of_Unity" via "Draft.Bump_Function")
### theory "HOL-Analysis.Borel_Space"
### 3.136s elapsed time, 9.465s cpu time, 5.789s GC time
Loading theory "HOL-Analysis.Nonnegative_Lebesgue_Integration" (required by "Draft.Tangent_SpaceMoreTemplates" via "Draft.Tangent_Space" via "Draft.Partition_Of_Unity" via "Draft.Bump_Function" via "Draft.Smooth" via "Draft.Analysis_More" via "HOL-Analysis.Equivalence_Lebesgue_Henstock_Integration" via "HOL-Analysis.Lebesgue_Measure" via "HOL-Analysis.Finite_Product_Measure" via "HOL-Analysis.Binary_Product_Measure")
Loading theory "HOL-Analysis.Regularity" (required by "Draft.Tangent_SpaceMoreTemplates" via "Draft.Tangent_Space" via "Draft.Partition_Of_Unity" via "Draft.Bump_Function" via "Draft.Smooth" via "Draft.Analysis_More" via "HOL-Analysis.Equivalence_Lebesgue_Henstock_Integration" via "HOL-Analysis.Lebesgue_Measure")
locale function_ring_on
  fixes R :: "('a => real) set"
    and S :: "'a set"
  assumes "function_ring_on R S"
Proofs for inductive predicate(s) "real_polynomial_function"
  Proving monotonicity ...
### theory "HOL-Analysis.Weierstrass_Theorems"
### 0.946s elapsed time, 3.507s cpu time, 0.428s GC time
### theory "HOL-Analysis.Regularity"
### 0.696s elapsed time, 2.736s cpu time, 0.332s GC time
locale Retracts
  fixes s :: "'a set"
    and h :: "'a => 'b"
    and t :: "'b set"
    and k :: "'b => 'a"
  assumes "Retracts s h t k"
### theory "HOL-Analysis.Nonnegative_Lebesgue_Integration"
### 1.577s elapsed time, 4.637s cpu time, 0.775s GC time
Loading theory "HOL-Analysis.Binary_Product_Measure" (required by "Draft.Tangent_SpaceMoreTemplates" via "Draft.Tangent_Space" via "Draft.Partition_Of_Unity" via "Draft.Bump_Function" via "Draft.Smooth" via "Draft.Analysis_More" via "HOL-Analysis.Equivalence_Lebesgue_Henstock_Integration" via "HOL-Analysis.Lebesgue_Measure" via "HOL-Analysis.Finite_Product_Measure")
### theory "HOL-Analysis.Homotopy"
### 1.955s elapsed time, 5.700s cpu time, 0.927s GC time
Loading theory "HOL-Analysis.Homeomorphism" (required by "Draft.Tangent_SpaceMoreTemplates" via "Draft.Tangent_Space" via "Draft.Partition_Of_Unity" via "Draft.Bump_Function" via "Draft.Smooth" via "Draft.Analysis_More" via "HOL-Analysis.Equivalence_Lebesgue_Henstock_Integration")
locale pair_sigma_finite
  fixes M1 :: "'a measure"
    and M2 :: "'b measure"
  assumes "pair_sigma_finite M1 M2"
### theory "HOL-Analysis.Binary_Product_Measure"
### 0.480s elapsed time, 1.060s cpu time, 0.240s GC time
Loading theory "HOL-Analysis.Finite_Product_Measure" (required by "Draft.Tangent_SpaceMoreTemplates" via "Draft.Tangent_Space" via "Draft.Partition_Of_Unity" via "Draft.Bump_Function" via "Draft.Smooth" via "Draft.Analysis_More" via "HOL-Analysis.Equivalence_Lebesgue_Henstock_Integration" via "HOL-Analysis.Lebesgue_Measure")
### theory "HOL-Analysis.Homeomorphism"
### 0.494s elapsed time, 1.104s cpu time, 0.279s GC time
locale product_sigma_finite
  fixes M :: "'i => 'a measure"
  assumes "product_sigma_finite M"
locale finite_product_sigma_finite
  fixes M :: "'i => 'a measure"
    and I :: "'i set"
  assumes "finite_product_sigma_finite M I"
### theory "HOL-Analysis.Finite_Product_Measure"
### 0.660s elapsed time, 0.915s cpu time, 0.175s GC time
Loading theory "HOL-Analysis.Bochner_Integration" (required by "Draft.Tangent_SpaceMoreTemplates" via "Draft.Tangent_Space" via "Draft.Partition_Of_Unity" via "Draft.Bump_Function" via "Draft.Smooth" via "Draft.Analysis_More" via "HOL-Analysis.Equivalence_Lebesgue_Henstock_Integration" via "HOL-Analysis.Lebesgue_Measure" via "HOL-Analysis.Complete_Measure")
Proofs for inductive predicate(s) "simple_bochner_integrable"
  Proving monotonicity ...
Proofs for inductive predicate(s) "has_bochner_integral"
  Proving monotonicity ...
Proofs for inductive predicate(s) "integrable"
  Proving monotonicity ...
### theory "HOL-Analysis.Bochner_Integration"
### 1.035s elapsed time, 1.223s cpu time, 0.271s GC time
Loading theory "HOL-Analysis.Complete_Measure" (required by "Draft.Tangent_SpaceMoreTemplates" via "Draft.Tangent_Space" via "Draft.Partition_Of_Unity" via "Draft.Bump_Function" via "Draft.Smooth" via "Draft.Analysis_More" via "HOL-Analysis.Equivalence_Lebesgue_Henstock_Integration" via "HOL-Analysis.Lebesgue_Measure")
Loading theory "HOL-Analysis.Radon_Nikodym" (required by "Draft.Tangent_SpaceMoreTemplates" via "Draft.Tangent_Space" via "Draft.Partition_Of_Unity" via "Draft.Bump_Function" via "Draft.Smooth" via "Draft.Analysis_More" via "HOL-Analysis.Equivalence_Lebesgue_Henstock_Integration" via "HOL-Analysis.Set_Integral")
locale complete_measure
  fixes M :: "'a measure"
  assumes "complete_measure M"
locale semifinite_measure
  fixes M :: "'a measure"
  assumes "semifinite_measure M"
locale locally_determined_measure
  fixes M :: "'a measure"
  assumes "locally_determined_measure M"
locale cld_measure
  fixes M :: "'a measure"
  assumes "cld_measure M"
### theory "HOL-Analysis.Radon_Nikodym"
### 0.276s elapsed time, 0.615s cpu time, 0.174s GC time
Loading theory "HOL-Analysis.Set_Integral" (required by "Draft.Tangent_SpaceMoreTemplates" via "Draft.Tangent_Space" via "Draft.Partition_Of_Unity" via "Draft.Bump_Function" via "Draft.Smooth" via "Draft.Analysis_More" via "HOL-Analysis.Equivalence_Lebesgue_Henstock_Integration")
### theory "HOL-Analysis.Complete_Measure"
### 0.433s elapsed time, 0.963s cpu time, 0.273s GC time
Loading theory "HOL-Analysis.Lebesgue_Measure" (required by "Draft.Tangent_SpaceMoreTemplates" via "Draft.Tangent_Space" via "Draft.Partition_Of_Unity" via "Draft.Bump_Function" via "Draft.Smooth" via "Draft.Analysis_More" via "HOL-Analysis.Equivalence_Lebesgue_Henstock_Integration")
### theory "HOL-Analysis.Set_Integral"
### 0.477s elapsed time, 1.041s cpu time, 0.260s GC time
Proofs for inductive predicate(s) "fsigma"
  Proving monotonicity ...
Proofs for inductive predicate(s) "gdelta"
  Proving monotonicity ...
### theory "HOL-Analysis.Lebesgue_Measure"
### 26.329s elapsed time, 85.644s cpu time, 84.187s GC time
Loading theory "HOL-Analysis.Henstock_Kurzweil_Integration" (required by "Draft.Tangent_SpaceMoreTemplates" via "Draft.Tangent_Space" via "Draft.Partition_Of_Unity" via "Draft.Bump_Function" via "Draft.Smooth" via "Draft.Analysis_More" via "HOL-Analysis.Equivalence_Lebesgue_Henstock_Integration")
### Cannot skip proof of schematic goal statement
### theory "HOL-Analysis.Henstock_Kurzweil_Integration"
### 2.022s elapsed time, 2.302s cpu time, 0.377s GC time
Loading theory "HOL-Analysis.Equivalence_Lebesgue_Henstock_Integration" (required by "Draft.Tangent_SpaceMoreTemplates" via "Draft.Tangent_Space" via "Draft.Partition_Of_Unity" via "Draft.Bump_Function" via "Draft.Smooth" via "Draft.Analysis_More")
### theory "HOL-Analysis.Equivalence_Lebesgue_Henstock_Integration"
### 1.619s elapsed time, 1.884s cpu time, 0.357s GC time
Loading theory "Draft.Analysis_More" (required by "Draft.Tangent_SpaceMoreTemplates" via "Draft.Tangent_Space" via "Draft.Partition_Of_Unity" via "Draft.Bump_Function" via "Draft.Smooth")
instantiation
  fun :: (type, scaleR) scaleR
  scaleR_fun == scaleR :: real => ('a => 'b) => 'a => 'b
bundle no_matrix_mult
locale vector_space_on
  fixes S :: "'b set"
    and scale :: "'a => 'b => 'b"  (infixr \<open>*s\<close> 75)
  assumes "vector_space_on S (*s)"
### theory "Draft.Analysis_More"
### 1.322s elapsed time, 1.453s cpu time, 0.177s GC time
Loading theory "Draft.Chart" (required by "Draft.Tangent_SpaceMoreTemplates" via "Draft.Tangent_Space" via "Draft.Partition_Of_Unity" via "Draft.Differentiable_Manifold" via "Draft.Topological_Manifold")
Loading theory "Draft.Smooth" (required by "Draft.Tangent_SpaceMoreTemplates" via "Draft.Tangent_Space" via "Draft.Partition_Of_Unity" via "Draft.Bump_Function")
Found termination order: "(%p. size (snd (snd p))) <*mlex*> {}"
consts
  nth_derivative :: "nat => ('a => 'b) => 'a => 'a => 'b"
### theory "Draft.Chart"
### 0.356s elapsed time, 0.715s cpu time, 0.000s GC time
Loading theory "Draft.Topological_Manifold" (required by "Draft.Tangent_SpaceMoreTemplates" via "Draft.Tangent_Space" via "Draft.Partition_Of_Unity" via "Draft.Differentiable_Manifold")
locale manifold
  fixes charts :: "('a, 'e) chart set"
### theory "Draft.Topological_Manifold"
### 0.096s elapsed time, 0.234s cpu time, 0.092s GC time
### theory "Draft.Smooth"
### 0.619s elapsed time, 1.105s cpu time, 0.092s GC time
Loading theory "Draft.Bump_Function" (required by "Draft.Tangent_SpaceMoreTemplates" via "Draft.Tangent_Space" via "Draft.Partition_Of_Unity")
Loading theory "Draft.Differentiable_Manifold" (required by "Draft.Tangent_SpaceMoreTemplates" via "Draft.Tangent_Space" via "Draft.Partition_Of_Unity")
locale c_manifold
  fixes charts :: "('a, 'b) chart set"
    and k :: "enat"
  assumes "c_manifold charts k"
locale c_manifold'
  fixes charts :: "('a, 'b) chart set"
    and k :: "enat"
  assumes "c_manifold' charts k"
locale submanifold
  fixes charts :: "('a, 'b) chart set"
    and k :: "enat"
    and S :: "'a set"
  assumes "submanifold charts k S"
### theory "Draft.Bump_Function"
### 0.376s elapsed time, 0.793s cpu time, 0.089s GC time
locale c_manifolds
  fixes k :: "enat"
    and charts1 :: "('a, 'b) chart set"
    and charts2 :: "('c, 'd) chart set"
  assumes "c_manifolds k charts1 charts2"
locale diff
  fixes k :: "enat"
    and charts1 :: "('a, 'e) chart set"
    and charts2 :: "('b, 'f) chart set"
    and f :: "'a => 'b"
  assumes "diff k charts1 charts2 f"
locale c_manifolds
  fixes k :: "enat"
    and charts1 :: "('a, 'b) chart set"
    and charts2 :: "('c, 'd) chart set"
  assumes "c_manifolds k charts1 charts2"
locale diff
  fixes k :: "enat"
    and charts1 :: "('a, 'e) chart set"
    and charts2 :: "('b, 'f) chart set"
    and f :: "'a => 'b"
  assumes "diff k charts1 charts2 f"
locale diff
  fixes k :: "enat"
    and charts1 :: "('a, 'e) chart set"
    and charts2 :: "('b, 'f) chart set"
    and f :: "'a => 'b"
  assumes "diff k charts1 charts2 f"
locale c_manifolds
  fixes k :: "enat"
    and charts1 :: "('a, 'b) chart set"
    and charts2 :: "('c, 'd) chart set"
  assumes "c_manifolds k charts1 charts2"
locale c_manifold
  fixes charts :: "('a, 'b) chart set"
    and k :: "enat"
  assumes "c_manifold charts k"
locale c_manifolds
  fixes k :: "enat"
    and charts1 :: "('a, 'b) chart set"
    and charts2 :: "('c, 'd) chart set"
  assumes "c_manifolds k charts1 charts2"
locale diff
  fixes k :: "enat"
    and charts1 :: "('a, 'e) chart set"
    and charts2 :: "('b, 'f) chart set"
    and f :: "'a => 'b"
  assumes "diff k charts1 charts2 f"
locale diff_fun
  fixes k :: "enat"
    and charts :: "('a, 'c) chart set"
    and f :: "'a => 'b"
  assumes "diff_fun k charts f"
locale diff_fun
  fixes k :: "enat"
    and charts :: "('a, 'c) chart set"
    and f :: "'a => 'b"
  assumes "diff_fun k charts f"
locale diffeomorphism
  fixes k :: "enat"
    and charts1 :: "('a, 'b) chart set"
    and charts2 :: "('c, 'd) chart set"
    and f :: "'a => 'c"
    and f' :: "'c => 'a"
  assumes "Differentiable_Manifold.diffeomorphism k charts1 charts2 f f'"
locale c_manifold
  fixes charts :: "('a, 'b) chart set"
    and k :: "enat"
  assumes "c_manifold charts k"
### Cannot skip proof of schematic goal statement
locale diff_fun
  fixes k :: "enat"
    and charts :: "('a, 'c) chart set"
    and f :: "'a => 'b"
  assumes "diff_fun k charts f"
locale c_manifold
  fixes charts :: "('a, 'b) chart set"
    and k :: "enat"
  assumes "c_manifold charts k"
### theory "Draft.Differentiable_Manifold"
### 0.786s elapsed time, 1.198s cpu time, 0.089s GC time
Loading theory "Draft.Partition_Of_Unity" (required by "Draft.Tangent_SpaceMoreTemplates" via "Draft.Tangent_Space")
locale c_manifold
  fixes charts :: "('a, 'b) chart set"
    and k :: "enat"
  assumes "c_manifold charts k"
### theory "Draft.Partition_Of_Unity"
### 0.325s elapsed time, 0.326s cpu time, 0.000s GC time
Loading theory "Draft.Tangent_Space" (required by "Draft.Tangent_SpaceMoreTemplates")
locale real_vector_space_on
  fixes S :: "'a set"
  assumes "real_vector_space_on S"
*** Undefined fact: "sub.diff_fun_scaleR" (line 907 of "$AFP/Smooth_Manifolds/Partition_Of_Unity.thy")
*** At command "thm" (line 907 of "$AFP/Smooth_Manifolds/Partition_Of_Unity.thy")
locale real_vector_space_pair_on
  fixes S :: "'a set"
    and T :: "'b set"
  assumes "real_vector_space_pair_on S T"
locale finite_dimensional_real_vector_space_on
  fixes S :: "'a set"
    and basis :: "'a set"
  assumes "finite_dimensional_real_vector_space_on S basis"
locale finite_dimensional_real_vector_space_pair_1_on
  fixes S1 :: "'a set"
    and S2 :: "'b set"
    and basis :: "'a set"
  assumes "finite_dimensional_real_vector_space_pair_1_on S1 S2 basis"
locale finite_dimensional_real_vector_space_pair_on
  fixes S1 :: "'a set"
    and S2 :: "'b set"
    and Basis1 :: "'a set"
    and Basis2 :: "'b set"
  assumes "finite_dimensional_real_vector_space_pair_on S1 S2 Basis1 Basis2"
locale c_manifold
  fixes charts :: "('a, 'b) chart set"
    and k :: "enat"
  assumes "c_manifold charts k"
locale diff
  fixes k :: "enat"
    and charts1 :: "('a, 'e) chart set"
    and charts2 :: "('b, 'f) chart set"
    and f :: "'a => 'b"
  assumes "diff k charts1 charts2 f"
locale c_manifold
  fixes charts :: "('a, 'b) chart set"
    and k :: "enat"
  assumes "c_manifold charts k"
locale diffeomorphism
  fixes k :: "enat"
    and charts1 :: "('a, 'b) chart set"
    and charts2 :: "('c, 'd) chart set"
    and f :: "'a => 'c"
    and f' :: "'c => 'a"
  assumes "Differentiable_Manifold.diffeomorphism k charts1 charts2 f f'"
locale submanifold
  fixes charts :: "('a, 'b) chart set"
    and k :: "enat"
    and S :: "'a set"
  assumes "submanifold charts k S"
locale submanifold
  fixes charts :: "('a, 'b) chart set"
    and k :: "enat"
    and S :: "'a set"
  assumes "submanifold charts k S"
locale c_manifold
  fixes charts :: "('a, 'b) chart set"
    and k :: "enat"
  assumes "c_manifold charts k"
*** Undefined fact: "X_sum" (line 1194 of "$AFP/Smooth_Manifolds/Tangent_Space.thy")
*** At command "thm" (line 1194 of "$AFP/Smooth_Manifolds/Tangent_Space.thy")
locale c_manifold
  fixes charts :: "('a, 'b) chart set"
    and k :: "enat"
  assumes "c_manifold charts k"
### theory "Draft.Tangent_Space"
### 2.265s elapsed time, 2.647s cpu time, 0.316s GC time
Loading theory "Draft.Tangent_SpaceMoreTemplates"
val templateLemmas =
   [("Tangent_Space.smooth_on_inner_const",
     "?k-smooth_on UNIV (%x. x \<bullet> ?j)",
     template_predicate
      (
         template_app
          (template_app
            (template_app (template_hole 2, template_var 1),
             template_hole 1),
           t_empty)
         )),
    ("Tangent_Space.span_idem", "subspace ?X ==> span ?X = ?X",
     template_implication
      ([template_predicate
         (template_app (template_hole 2, template_var 0))],
       template_equation
        (template_app (template_hole 0, template_var 0), template_var 0))),
    ("Tangent_Space.extensional0_directional_derivative",
     "extensional0 (manifold_eucl.diff_fun_space ?k)
       (directional_derivative ?k ?a ?v)",
     template_predicate
      (
         template_app
          (template_app
            (template_hole 5,
             template_app
              (template_app
                (template_hole 4,
                 template_app
                  (template_app (template_hole 3, template_hole 2),
                   template_hole 1)),
               template_var 2)),
           template_app
            (template_app
              (template_app (template_hole 0, template_var 2),
               template_var 1),
             template_var 0))
         )),
    ("Tangent_Space.dim_eucl_tangent_space",
     "dim (manifold_eucl.tangent_space \<infinity> ?a) = DIM(?'a)",
     template_equation
      (template_app
        (template_hole 7,
         template_app
          (template_app
            (template_app
              (template_hole 6,
               template_app
                (template_app (template_hole 5, template_hole 4),
                 template_hole 3)),
             template_hole 2),
           template_var 0)),
       template_app (template_hole 1, template_hole 0))),
    ("Tangent_Space.linear_directional_derivative",
     "?k ~= 0 ==> linear (directional_derivative ?k ?a)",
     template_implication
      ([template_negation
         (template_equation (template_var 1, template_hole 2))],
       template_predicate
        (
           template_app
            (template_hole 1,
             template_app
              (template_app (template_hole 0, template_var 1),
               template_var 0))
           ))),
    ("Tangent_Space.sum_apply", "sum ?f ?X ?i = (SUM x:?X. ?f x ?i)",
     template_equation
      (template_app
        (template_app
          (template_app (template_hole 1, template_var 2), template_var 1),
         template_var 0),
       template_app
        (template_app (template_hole 0, t_empty), template_var 1))),
    ("Tangent_Space.directional_derivative_in_span",
     "directional_derivative \<infinity> ?a ?x
      : span (directional_derivative \<infinity> ?a ` Basis)",
     template_predicate
      (
         template_app
          (template_app
            (template_hole 5,
             template_app
              (template_app
                (template_app (template_hole 4, template_hole 3),
                 template_var 1),
               template_var 0)),
           template_app
            (template_hole 2,
             template_app
              (template_app
                (template_hole 1,
                 template_app
                  (template_app (template_hole 4, template_hole 3),
                   template_var 1)),
               template_hole 0)))
         )),
    ("Tangent_Space.inj_on_directional_derivative",
     "?k ~= 0 ==> inj_on (directional_derivative ?k ?a) ?S",
     template_implication
      ([template_negation
         (template_equation (template_var 2, template_hole 2))],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 1,
               template_app
                (template_app (template_hole 0, template_var 2),
                 template_var 1)),
             template_var 0)
           ))),
    ("Tangent_Space.directional_derivative_inner",
     "directional_derivative ?k ?a ?x (%x. x \<bullet> ?j) =
      ?x \<bullet> ?j",
     template_equation
      (template_app
        (template_app
          (template_app
            (template_app (template_hole 1, template_var 3),
             template_var 2),
           template_var 1),
         t_empty),
       template_app
        (template_app (template_hole 0, template_var 1), template_var 0))),
    ("Tangent_Space.frechet_derivative_inner",
     "frechet_derivative (%x. x \<bullet> ?j) (at ?a) =
      (%x. x \<bullet> ?j)",
     template_equation
      (template_app
        (template_app (template_hole 3, t_empty),
         template_app
          (template_app (template_hole 1, template_var 0),
           template_hole 0)),
       t_empty)),
    ("Tangent_Space.span_directional_derivative",
     "span (directional_derivative \<infinity> ?a ` Basis) =
      manifold_eucl.tangent_space \<infinity> ?a",
     template_equation
      (template_app
        (template_hole 8,
         template_app
          (template_app
            (template_hole 7,
             template_app
              (template_app (template_hole 6, template_hole 5),
               template_var 0)),
           template_hole 4)),
       template_app
        (template_app
          (template_app
            (template_hole 3,
             template_app
              (template_app (template_hole 2, template_hole 1),
               template_hole 0)),
           template_hole 5),
         template_var 0))),
    ("Tangent_Space.independent_directional_derivative",
     "?k ~= 0 ==> independent (directional_derivative ?k ?a ` Basis)",
     template_implication
      ([template_negation
         (template_equation (template_var 1, template_hole 4))],
       template_negation
        (
           template_predicate
            (
               template_app
                (template_hole 3,
                 template_app
                  (template_app
                    (template_hole 2,
                     template_app
                      (template_app (template_hole 1, template_var 1),
                       template_var 0)),
                   template_hole 0))
               )
           ))),
    ("Tangent_Space.smooth_on_imp_differentiable_on",
     "[| ?k-smooth_on ?S ?f; 0 < ?k |] ==> ?f differentiable_on ?S",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app (template_hole 3, template_var 2),
                template_var 1),
              template_var 0)
            ),
        template_inequation (less_than, template_hole 1, template_var 2)],
       template_predicate
        (
           template_app
            (template_app (template_hole 0, template_var 0), template_var 1)
           ))),
    ("Tangent_Space.extensional0_directional_derivative_le",
     "?k <= ?k' ==>
      extensional0 (manifold_eucl.diff_fun_space ?k)
       (directional_derivative ?k' ?a ?v)",
     template_implication
      ([template_inequation (less_equals, template_var 3, template_var 2)],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 5,
               template_app
                (template_app
                  (template_hole 4,
                   template_app
                    (template_app (template_hole 3, template_hole 2),
                     template_hole 1)),
                 template_var 3)),
             template_app
              (template_app
                (template_app (template_hole 0, template_var 2),
                 template_var 1),
               template_var 0))
           ))),
    ("Tangent_Space.surj_directional_derivative",
     "?k = \<infinity> ==>
      range (directional_derivative ?k ?a) =
      manifold_eucl.tangent_space ?k ?a",
     template_implication
      ([template_equation (template_var 1, template_hole 8)],
       template_equation
        (template_app
          (template_app
            (template_hole 6,
             template_app
              (template_app (template_hole 5, template_var 1),
               template_var 0)),
           template_hole 4),
         template_app
          (template_app
            (template_app
              (template_hole 3,
               template_app
                (template_app (template_hole 2, template_hole 1),
                 template_hole 0)),
             template_var 1),
           template_var 0)))),
    ("Tangent_Space.directional_derivative_in_tangent_space",
     "?k ~= 0 ==>
      directional_derivative ?k ?a ?x : manifold_eucl.tangent_space ?k ?a",
     template_implication
      ([template_negation
         (template_equation (template_var 2, template_hole 6))],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 5,
               template_app
                (template_app
                  (template_app (template_hole 4, template_var 2),
                   template_var 1),
                 template_var 0)),
             template_app
              (template_app
                (template_app
                  (template_hole 3,
                   template_app
                    (template_app (template_hole 2, template_hole 1),
                     template_hole 0)),
                 template_var 2),
               template_var 1))
           ))),
    ("Tangent_Space.directional_derivative_eq_frechet_derivative",
     "?k-smooth_on UNIV ?f ==>
      directional_derivative ?k ?a ?v ?f =
      frechet_derivative ?f (at ?a) ?v",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app (template_hole 5, template_var 3),
                template_hole 4),
              template_var 2)
            )],
       template_equation
        (template_app
          (template_app
            (template_app
              (template_app (template_hole 2, template_var 3),
               template_var 1),
             template_var 0),
           template_var 2),
         template_app
          (template_app
            (template_app (template_hole 1, template_var 2),
             template_app
              (template_app (template_hole 0, template_var 1),
               template_hole 4)),
           template_var 0)))),
    ("Tangent_Space.linear_imp_linear_on",
     "[| linear ?f; subspace ?A; subspace ?B |]
      ==> linear_on ?A ?B (*\<^sub>R) (*\<^sub>R) ?f",
     template_implication
      ([template_predicate (template_app (template_hole 5, template_var 2)),
        template_predicate (template_app (template_hole 4, template_var 1)),
        template_predicate
         (template_app (template_hole 3, template_var 0))],
       template_predicate
        (
           template_app
            (template_app
              (template_app
                (template_app
                  (template_app (template_hole 2, template_var 1),
                   template_var 0),
                 template_hole 1),
               template_hole 0),
             template_var 2)
           ))),
    ("Tangent_Space.directional_derivative_scaleR",
     "?k ~= 0 ==>
      directional_derivative ?k ?a (?c *\<^sub>R ?x) =
      ?c *\<^sub>R directional_derivative ?k ?a ?x",
     template_implication
      ([template_negation
         (template_equation (template_var 3, template_hole 4))],
       template_equation
        (template_app
          (template_app
            (template_app (template_hole 2, template_var 3),
             template_var 2),
           template_app
            (template_app (template_hole 1, template_var 1),
             template_var 0)),
         template_app
          (template_app (template_hole 0, template_var 1),
           template_app
            (template_app
              (template_app (template_hole 2, template_var 3),
               template_var 2),
             template_var 0))))),
    ("Tangent_Space.linear_on_directional_derivative",
     "?k ~= 0 ==>
      linear_on UNIV (manifold_eucl.tangent_space ?k ?a) (*\<^sub>R)
       (*\<^sub>R) (directional_derivative ?k ?a)",
     template_implication
      ([template_negation
         (template_equation (template_var 1, template_hole 9))],
       template_predicate
        (
           template_app
            (template_app
              (template_app
                (template_app
                  (template_app (template_hole 8, template_hole 7),
                   template_app
                    (template_app
                      (template_app
                        (template_hole 6,
                         template_app
                          (template_app (template_hole 5, template_hole 4),
                           template_hole 3)),
                       template_var 1),
                     template_var 0)),
                 template_hole 2),
               template_hole 1),
             template_app
              (template_app (template_hole 0, template_var 1),
               template_var 0))
           ))),
    ("Tangent_Space.directional_derivative_linear_on_diff_fun_space",
     "?k ~= 0 ==>
      linear_on (manifold_eucl.diff_fun_space ?k) UNIV (*\<^sub>R)
       (*\<^sub>R) (directional_derivative ?k ?a ?x)",
     template_implication
      ([template_negation
         (template_equation (template_var 2, template_hole 9))],
       template_predicate
        (
           template_app
            (template_app
              (template_app
                (template_app
                  (template_app
                    (template_hole 8,
                     template_app
                      (template_app
                        (template_hole 7,
                         template_app
                          (template_app (template_hole 6, template_hole 5),
                           template_hole 4)),
                       template_var 2)),
                   template_hole 3),
                 template_hole 2),
               template_hole 1),
             template_app
              (template_app
                (template_app (template_hole 0, template_var 2),
                 template_var 1),
               template_var 0))
           ))),
    ("Tangent_Space.directional_derivative_add",
     "?k ~= 0 ==>
      directional_derivative ?k ?a (?x + ?y) =
      directional_derivative ?k ?a ?x + directional_derivative ?k ?a ?y",
     template_implication
      ([template_negation
         (template_equation (template_var 3, template_hole 4))],
       template_equation
        (template_app
          (template_app
            (template_app (template_hole 2, template_var 3),
             template_var 2),
           template_app
            (template_app (template_hole 1, template_var 1),
             template_var 0)),
         template_app
          (template_app
            (template_hole 0,
             template_app
              (template_app
                (template_app (template_hole 2, template_var 3),
                 template_var 2),
               template_var 1)),
           template_app
            (template_app
              (template_app (template_hole 2, template_var 3),
               template_var 2),
             template_var 0))))),
    ("Tangent_Space.push_forward_compose",
     "[| ?X : c_manifold.tangent_space ?M1.0 ?k ?p;
         ?p : manifold.carrier ?M1.0; diff ?k ?M1.0 ?M2.0 ?f;
         diff ?k ?M2.0 ?M3.0 ?g |]
      ==> diff.push_forward ?k ?M2.0 ?M3.0 ?g
           (diff.push_forward ?k ?M1.0 ?M2.0 ?f ?X) =
          diff.push_forward ?k ?M1.0 ?M3.0 (?g o ?f) ?X",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 10, template_var 7),
              template_app
               (template_app
                 (template_app (template_hole 9, template_var 6),
                  template_var 5),
                template_var 4))
            ),
        template_predicate
         (
            template_app
             (template_app (template_hole 8, template_var 4),
              template_app (template_hole 7, template_var 6))
            ),
        template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_app (template_hole 6, template_var 5),
                  template_var 6),
                template_var 3),
              template_var 2)
            ),
        template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_app (template_hole 5, template_var 5),
                  template_var 3),
                template_var 1),
              template_var 0)
            )],
       template_equation
        (template_app
          (template_app
            (template_app
              (template_app
                (template_app (template_hole 3, template_var 5),
                 template_var 3),
               template_var 1),
             template_var 0),
           template_app
            (template_app
              (template_app
                (template_app
                  (template_app (template_hole 2, template_var 5),
                   template_var 6),
                 template_var 3),
               template_var 2),
             template_var 7)),
         template_app
          (template_app
            (template_app
              (template_app
                (template_app (template_hole 1, template_var 5),
                 template_var 6),
               template_var 1),
             template_app
              (template_app (template_hole 0, template_var 0),
               template_var 2)),
           template_var 7)))),
    ("Tangent_Space.directional_derivative_is_derivation",
     "[| ?f : manifold_eucl.diff_fun_space ?k;
         ?g : manifold_eucl.diff_fun_space ?k; ?k ~= 0 |]
      ==> directional_derivative ?k ?a ?x (?f * ?g) =
          ?f ?a * directional_derivative ?k ?a ?x ?g +
          ?g ?a * directional_derivative ?k ?a ?x ?f",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 12, template_var 4),
              template_app
               (template_app
                 (template_hole 11,
                  template_app
                   (template_app (template_hole 10, template_hole 9),
                    template_hole 8)),
                template_var 3))
            ),
        template_predicate
         (
            template_app
             (template_app (template_hole 12, template_var 2),
              template_app
               (template_app
                 (template_hole 11,
                  template_app
                   (template_app (template_hole 10, template_hole 9),
                    template_hole 8)),
                template_var 3))
            ),
        template_negation
         (template_equation (template_var 3, template_hole 5))],
       template_equation
        (template_app
          (template_app
            (template_app
              (template_app (template_hole 3, template_var 3),
               template_var 1),
             template_var 0),
           template_app
            (template_app (template_hole 2, template_var 4),
             template_var 2)),
         template_app
          (template_app
            (template_hole 1,
             template_app
              (template_app
                (template_hole 0,
                 template_app (template_var 4, template_var 1)),
               template_app
                (template_app
                  (template_app
                    (template_app (template_hole 3, template_var 3),
                     template_var 1),
                   template_var 0),
                 template_var 2))),
           template_app
            (template_app
              (template_hole 0,
               template_app (template_var 2, template_var 1)),
             template_app
              (template_app
                (template_app
                  (template_app (template_hole 3, template_var 3),
                   template_var 1),
                 template_var 0),
               template_var 4))))))]:
   (string * thm * template) list
### theory "Draft.Tangent_SpaceMoreTemplates"
### 0.896s elapsed time, 1.512s cpu time, 0.127s GC time
*** Undefined fact: "X_sum" (line 1194 of "$AFP/Smooth_Manifolds/Tangent_Space.thy")
*** At command "thm" (line 1194 of "$AFP/Smooth_Manifolds/Tangent_Space.thy")
*** Undefined fact: "sub.diff_fun_scaleR" (line 907 of "$AFP/Smooth_Manifolds/Partition_Of_Unity.thy")
*** At command "thm" (line 907 of "$AFP/Smooth_Manifolds/Partition_Of_Unity.thy")
Exception- TOPLEVEL_ERROR raised
