   [("Chop.emb_step_chop",
     "is_App ?t ==> ?t \<rightarrow>\<^sub>e\<^sub>m\<^sub>b chop ?t",
     template_implication
      ([template_negation
         (
            template_predicate
             (template_app (template_hole 2, template_var 0))
            )],
       template_predicate
        (
           template_app
            (template_app (template_hole 1, template_var 0),
             template_app (template_hole 0, template_var 0))
           ))),
    ("Chop.chop_App_Hd", "is_Hd ?s ==> chop (App ?s ?t) = ?t",
     template_implication
      ([template_predicate
         (template_app (template_hole 3, template_var 1))],
       template_equation
        (template_app
          (template_hole 1,
           template_app
            (template_app (template_hole 0, template_var 1),
             template_var 0)),
         template_var 0))),
    ("Chop.hsize_chop_lt", "is_App ?t ==> hsize (chop ?t) < hsize ?t",
     template_implication
      ([template_negation
         (
            template_predicate
             (template_app (template_hole 3, template_var 0))
            )],
       template_inequation
        (less_than,
         template_app
          (template_hole 1, template_app (template_hole 0, template_var 0)),
         template_app (template_hole 1, template_var 0)))),
    ("Chop.hsize_chop", "is_App ?t ==> Suc (hsize (chop ?t)) = hsize ?t",
     template_implication
      ([template_negation
         (
            template_predicate
             (template_app (template_hole 4, template_var 0))
            )],
       template_equation
        (template_app
          (template_hole 2,
           template_app
            (template_hole 1,
             template_app (template_hole 0, template_var 0))),
         template_app (template_hole 1, template_var 0)))),
    ("Chop.chop_subst_emb",
     "is_App ?s ==>
      chop (subst ?\<rho> ?s) \<unrhd>\<^sub>e\<^sub>m\<^sub>b
      subst ?\<rho> (chop ?s)",
     template_implication
      ([template_negation
         (
            template_predicate
             (template_app (template_hole 3, template_var 1))
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 2,
               template_app
                (template_hole 1,
                 template_app
                  (template_app (template_hole 0, template_var 0),
                   template_var 1))),
             template_app
              (template_app (template_hole 0, template_var 0),
               template_app (template_hole 1, template_var 1)))
           ))),
    ("Chop.fun_subst",
     "is_App ?s ==> subst ?\<rho> (fun ?s) = fun (subst ?\<rho> ?s)",
     template_implication
      ([template_negation
         (
            template_predicate
             (template_app (template_hole 3, template_var 1))
            )],
       template_equation
        (template_app
          (template_app (template_hole 1, template_var 0),
           template_app (template_hole 0, template_var 1)),
         template_app
          (template_hole 0,
           template_app
            (template_app (template_hole 1, template_var 0),
             template_var 1))))),
    ("Chop.Suc_num_args",
     "is_App ?t ==> Suc (num_args (fun ?t)) = num_args ?t",
     template_implication
      ([template_negation
         (
            template_predicate
             (template_app (template_hole 5, template_var 0))
            )],
       template_equation
        (template_app
          (template_hole 3,
           template_app
            (template_hole 2,
             template_app
              (template_hole 1,
               template_app (template_hole 0, template_var 0)))),
         template_app
          (template_hole 2,
           template_app (template_hole 1, template_var 0))))),
    ("Chop.chop_apps",
     "is_App ?t ==> chop (apps ?t ?ts) = apps (chop ?t) ?ts",
     template_implication
      ([template_negation
         (
            template_predicate
             (template_app (template_hole 3, template_var 1))
            )],
       template_equation
        (template_app
          (template_hole 1,
           template_app
            (template_app (template_hole 0, template_var 1),
             template_var 0)),
         template_app
          (template_app
            (template_hole 0,
             template_app (template_hole 1, template_var 1)),
           template_var 0)))),
    ("Chop.vars_chop",
     "is_App ?t ==> vars (chop ?t) Un vars_hd (head ?t) = vars ?t",
     template_implication
      ([template_negation
         (
            template_predicate
             (template_app (template_hole 6, template_var 0))
            )],
       template_equation
        (template_app
          (template_app
            (template_hole 4,
             template_app
              (template_hole 3,
               template_app (template_hole 2, template_var 0))),
           template_app
            (template_hole 1,
             template_app (template_hole 0, template_var 0))),
         template_app (template_hole 3, template_var 0)))),
    ("Chop.ground_chop", "[| is_App ?t; ground ?t |] ==> ground (chop ?t)",
     template_implication
      ([template_negation
         (
            template_predicate
             (template_app (template_hole 4, template_var 0))
            ),
        template_equation
         (template_app (template_hole 2, template_var 0), template_hole 1)],
       template_equation
        (template_app
          (template_hole 2, template_app (template_hole 0, template_var 0)),
         template_hole 1))),
    ("Chop.chop_position_of",
     "is_App ?s ==>
      position_of ?s
       (replicate (num_args (fun ?s)) dir.Left @ [dir.Right])",
     template_implication
      ([template_negation
         (
            template_predicate
             (template_app (template_hole 10, template_var 0))
            )],
       template_predicate
        (
           template_app
            (template_app (template_hole 9, template_var 0),
             template_app
              (template_app
                (template_hole 8,
                 template_app
                  (template_app
                    (template_hole 7,
                     template_app
                      (template_hole 6,
                       template_app
                        (template_hole 5,
                         template_app (template_hole 4, template_var 0)))),
                   template_hole 3)),
               template_app
                (template_app (template_hole 2, template_hole 1),
                 template_hole 0)))
           ))),
    ("Chop.chop_emb_step_at",
     "is_App ?t ==>
      chop ?t =
      emb_step_at (replicate (num_args (fun ?t)) dir.Left) dir.Right ?t",
     template_implication
      ([template_negation
         (
            template_predicate
             (template_app (template_hole 9, template_var 0))
            )],
       template_equation
        (template_app (template_hole 7, template_var 0),
         template_app
          (template_app
            (template_app
              (template_hole 6,
               template_app
                (template_app
                  (template_hole 5,
                   template_app
                    (template_hole 4,
                     template_app
                      (template_hole 3,
                       template_app (template_hole 2, template_var 0)))),
                 template_hole 1)),
             template_hole 0),
           template_var 0)))),
    ("Chop.args_subst_Hd",
     "is_Hd (subst ?\<rho> (Hd (head ?s))) ==>
      args (subst ?\<rho> ?s) = map (subst ?\<rho>) (args ?s)",
     template_implication
      ([template_predicate
         (
            template_app
             (template_hole 6,
              template_app
               (template_app (template_hole 5, template_var 1),
                template_app
                 (template_hole 4,
                  template_app (template_hole 3, template_var 0))))
            )],
       template_equation
        (template_app
          (template_hole 1,
           template_app
            (template_app (template_hole 5, template_var 1),
             template_var 0)),
         template_app
          (template_app
            (template_hole 0,
             template_app (template_hole 5, template_var 1)),
           template_app (template_hole 1, template_var 0))))),
    ("Chop.chop_subst_Sym",
     "[| is_App ?s; is_Sym (head ?s) |]
      ==> chop (subst ?\<rho> ?s) = subst ?\<rho> (chop ?s)",
     template_implication
      ([template_negation
         (
            template_predicate
             (template_app (template_hole 5, template_var 1))
            ),
        template_negation
         (
            template_predicate
             (
                template_app
                 (template_hole 4,
                  template_app (template_hole 3, template_var 1))
                )
            )],
       template_equation
        (template_app
          (template_hole 1,
           template_app
            (template_app (template_hole 0, template_var 0),
             template_var 1)),
         template_app
          (template_app (template_hole 0, template_var 0),
           template_app (template_hole 1, template_var 1))))),
    ("Chop.chop_fun",
     "[| is_App ?t; is_App (fun ?t) |]
      ==> App (chop (fun ?t)) (arg ?t) = chop ?t",
     template_implication
      ([template_negation
         (
            template_predicate
             (template_app (template_hole 5, template_var 0))
            ),
        template_negation
         (
            template_predicate
             (
                template_app
                 (template_hole 5,
                  template_app (template_hole 4, template_var 0))
                )
            )],
       template_equation
        (template_app
          (template_app
            (template_hole 2,
             template_app
              (template_hole 1,
               template_app (template_hole 4, template_var 0))),
           template_app (template_hole 0, template_var 0)),
         template_app (template_hole 1, template_var 0)))),
    ("Chop.chop_subst_Hd",
     "[| is_App ?s; is_Hd (subst ?\<rho> (Hd (head ?s))) |]
      ==> chop (subst ?\<rho> ?s) = subst ?\<rho> (chop ?s)",
     template_implication
      ([template_negation
         (
            template_predicate
             (template_app (template_hole 5, template_var 1))
            ),
        template_predicate
         (
            template_app
             (template_hole 5,
              template_app
               (template_app (template_hole 4, template_var 0),
                template_app
                 (template_hole 3,
                  template_app (template_hole 2, template_var 1))))
            )],
       template_equation
        (template_app
          (template_hole 0,
           template_app
            (template_app (template_hole 4, template_var 0),
             template_var 1)),
         template_app
          (template_app (template_hole 4, template_var 0),
           template_app (template_hole 0, template_var 1))))),
    ("Chop.chop_subst_emb0",
     "[| is_App ?s; chop (subst ?\<rho> ?s) ~= subst ?\<rho> (chop ?s) |]
      ==> emb_step_at (replicate (num_args (fun ?s)) dir.Left) dir.Right
           (chop (subst ?\<rho> ?s)) =
          subst ?\<rho> (chop ?s)",
     template_implication
      ([template_negation
         (
            template_predicate
             (template_app (template_hole 10, template_var 1))
            ),
        template_negation
         (
            template_equation
             (template_app
               (template_hole 8,
                template_app
                 (template_app (template_hole 7, template_var 0),
                  template_var 1)),
              template_app
               (template_app (template_hole 7, template_var 0),
                template_app (template_hole 8, template_var 1)))
            )],
       template_equation
        (template_app
          (template_app
            (template_app
              (template_hole 6,
               template_app
                (template_app
                  (template_hole 5,
                   template_app
                    (template_hole 4,
                     template_app
                      (template_hole 3,
                       template_app (template_hole 2, template_var 1)))),
                 template_hole 1)),
             template_hole 0),
           template_app
            (template_hole 8,
             template_app
              (template_app (template_hole 7, template_var 0),
               template_var 1))),
         template_app
          (template_app (template_hole 7, template_var 0),
           template_app (template_hole 8, template_var 1))))),
    ("Chop.emb_step_at_chop",
     "[| emb_step_at ?p dir.Right ?t = ?s;
         position_of ?t (?p @ [dir.Right]);
         list_all (%x. x = dir.Left) ?p |]
      ==> chop ?t = ?s | chop ?t \<rightarrow>\<^sub>e\<^sub>m\<^sub>b ?s",
     template_implication
      ([template_equation
         (template_app
           (template_app
             (template_app (template_hole 11, template_var 2),
              template_hole 10),
            template_var 1),
          template_var 0),
        template_predicate
         (
            template_app
             (template_app (template_hole 9, template_var 1),
              template_app
               (template_app (template_hole 8, template_var 2),
                template_app
                 (template_app (template_hole 7, template_hole 10),
                  template_hole 6)))
            ),
        template_predicate
         (
            template_app
             (template_app (template_hole 5, t_empty), template_var 2)
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 2,
               template_app
                (template_app
                  (template_hole 12,
                   template_app (template_hole 1, template_var 1)),
                 template_var 0)),
             template_app
              (template_app
                (template_hole 0,
                 template_app (template_hole 1, template_var 1)),
               template_var 0))
           ))),
    ("Chop.emb_step_at_remove_arg",
     "[| emb_step_at ?p dir.Left ?t = ?s; position_of ?t (?p @ [dir.Left]);
         list_all (%x. x = dir.Left) ?p |]
      ==> let i = num_args ?t - Suc (length ?p)
          in head ?t = head ?s &
             i < num_args ?t &
             args ?s = take i (args ?t) @ drop (Suc i) (args ?t)",
     template_implication
      ([template_equation
         (template_app
           (template_app
             (template_app (template_hole 21, template_var 2),
              template_hole 20),
            template_var 1),
          template_var 0),
        template_predicate
         (
            template_app
             (template_app (template_hole 19, template_var 1),
              template_app
               (template_app (template_hole 18, template_var 2),
                template_app
                 (template_app (template_hole 17, template_hole 20),
                  template_hole 16)))
            ),
        template_predicate
         (
            template_app
             (template_app (template_hole 15, t_empty), template_var 2)
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 13,
               template_app
                (template_app
                  (template_hole 12,
                   template_app
                    (template_hole 11,
                     template_app (template_hole 10, template_var 1))),
                 template_app
                  (template_hole 9,
                   template_app (template_hole 8, template_var 2)))),
             t_empty)
           ))),
    ("Chop.emb_step_cases",
     "[| ?t \<rightarrow>\<^sub>e\<^sub>m\<^sub>b ?s; chop ?t = ?s ==> ?P;
         chop ?t \<rightarrow>\<^sub>e\<^sub>m\<^sub>b ?s ==> ?P;
         !!i. [| head ?t = head ?s; i < num_args ?t;
                 args ?s = take i (args ?t) @ drop (Suc i) (args ?t) |]
              ==> ?P;
         !!i. [| head ?t = head ?s; num_args ?t = num_args ?s;
                 args ?t ! i \<rightarrow>\<^sub>e\<^sub>m\<^sub>b
                 args ?s ! i;
                 !!j. [| j < num_args ?t; i ~= j |]
                      ==> args ?t ! j = args ?s ! j |]
              ==> ?P |]
      ==> ?P",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 16, template_var 2),
              template_var 1)
            ),
        template_implication
         ([template_equation
            (template_app (template_hole 14, template_var 2),
             template_var 1)],
          template_predicate (template_var 0)),
        template_implication
         ([template_predicate
            (
               template_app
                (template_app
                  (template_hole 16,
                   template_app (template_hole 14, template_var 2)),
                 template_var 1)
               )],
          template_predicate (template_var 0)),
        template_predicate (template_app (template_hole 13, t_empty)),
        template_predicate (template_app (template_hole 13, t_empty))],
       template_predicate (template_var 0)))]
