Loading theory "HOL-Cardinals.Order_Union" (required by "Draft.EmbeddingsMoreTemplates" via "Draft.Embeddings" via "Lambda_Free_RPOs.Extension_Orders" via "HOL-Cardinals.Wellorder_Extension")
Loading theory "HOL-Library.Cancellation" (required by "Draft.EmbeddingsMoreTemplates" via "Draft.Embeddings" via "Lambda_Free_RPOs.Lambda_Free_Term" via "Lambda_Free_RPOs.Lambda_Free_Util" via "HOL-Library.Multiset_Order" via "HOL-Library.Multiset")
Loading theory "HOL-Library.Function_Algebras" (required by "Draft.EmbeddingsMoreTemplates" via "Draft.ExtrEqs" via "HOL-Library.BigO")
Loading theory "HOL-Library.Infinite_Set" (required by "Draft.EmbeddingsMoreTemplates" via "Draft.Embeddings" via "Lambda_Free_RPOs.Lambda_Free_Term" via "Lambda_Free_RPOs.Lambda_Free_Util" via "HOL-Library.Extended_Nat" via "HOL-Library.Order_Continuity" via "HOL-Library.Countable_Complete_Lattices" via "HOL-Library.Countable_Set")
instantiation
  fun :: (type, plus) plus
  plus_fun == plus :: ('a => 'b) => ('a => 'b) => 'a => 'b
instantiation
  fun :: (type, zero) zero
  zero_fun == zero_class.zero :: 'a => 'b
instantiation
  fun :: (type, times) times
  times_fun == times :: ('a => 'b) => ('a => 'b) => 'a => 'b
instantiation
  fun :: (type, one) one
  one_fun == one_class.one :: 'a => 'b
### theory "HOL-Library.Function_Algebras"
### 0.128s elapsed time, 0.532s cpu time, 0.065s GC time
Loading theory "HOL-Library.Nat_Bijection" (required by "Draft.EmbeddingsMoreTemplates" via "Draft.ExtrEqs" via "HOL-Library.Stream")
### theory "HOL-Cardinals.Order_Union"
### 0.139s elapsed time, 0.581s cpu time, 0.065s GC time
Loading theory "HOL-Cardinals.Wellorder_Extension" (required by "Draft.EmbeddingsMoreTemplates" via "Draft.Embeddings" via "Lambda_Free_RPOs.Extension_Orders")
Found termination order: "(%p. size (snd p)) <*mlex*> {}"
consts
  enumerate :: "'a set => nat => 'a"
### theory "HOL-Cardinals.Wellorder_Extension"
### 0.061s elapsed time, 0.244s cpu time, 0.000s GC time
Loading theory "HOL-Library.Old_Datatype" (required by "Draft.EmbeddingsMoreTemplates" via "Draft.Embeddings" via "Lambda_Free_RPOs.Lambda_Free_Term" via "Lambda_Free_RPOs.Lambda_Free_Util" via "HOL-Library.Extended_Nat" via "HOL-Library.Countable")
Found termination order: "size_list size <*mlex*> {}"
### theory "HOL-Library.Infinite_Set"
### 0.330s elapsed time, 1.327s cpu time, 0.149s GC time
Loading theory "HOL-Library.Set_Algebras" (required by "Draft.EmbeddingsMoreTemplates" via "Draft.ExtrEqs" via "HOL-Library.BigO")
signature CANCEL = sig val proc: Proof.context -> cterm -> thm option end
functor Cancel_Fun (Data: CANCEL_NUMERALS_DATA): CANCEL
instantiation
  set :: (plus) plus
  plus_set == plus :: 'a set => 'a set => 'a set
instantiation
  set :: (times) times
  times_set == times :: 'a set => 'a set => 'a set
signature CANCEL_DATA =
  sig
    val dest_coeff: term -> int * term
    val dest_sum: term -> term list
    val find_first_coeff: term -> term list -> int * term list
    val mk_coeff: int * term -> term
    val mk_sum: typ -> term list -> term
    val norm_ss1: simpset
    val norm_ss2: simpset
    val norm_tac: Proof.context -> tactic
    val numeral_simp_tac: Proof.context -> tactic
    val prove_conv:
       tactic list -> Proof.context -> thm list -> term * term -> thm option
    val simplify_meta_eq: Proof.context -> thm -> thm
    val trans_tac: Proof.context -> thm option -> tactic
  end
structure Cancel_Data: CANCEL_DATA
instantiation
  set :: (zero) zero
  zero_set == zero_class.zero :: 'a set
instantiation
  set :: (one) one
  one_set == one_class.one :: 'a set
### theory "HOL-Library.Nat_Bijection"
### 0.303s elapsed time, 1.202s cpu time, 0.084s GC time
Loading theory "HOL-Library.Stream" (required by "Draft.EmbeddingsMoreTemplates" via "Draft.ExtrEqs")
signature CANCEL_SIMPROCS =
  sig
    val diff_cancel: Proof.context -> cterm -> thm option
    val eq_cancel: Proof.context -> cterm -> thm option
    val less_cancel: Proof.context -> cterm -> thm option
    val less_eq_cancel: Proof.context -> cterm -> thm option
  end
structure Cancel_Simprocs: CANCEL_SIMPROCS
### theory "HOL-Library.Cancellation"
### 0.476s elapsed time, 1.906s cpu time, 0.217s GC time
Loading theory "HOL-Library.Multiset" (required by "Draft.EmbeddingsMoreTemplates" via "Draft.Embeddings" via "Lambda_Free_RPOs.Lambda_Free_Term" via "Lambda_Free_RPOs.Lambda_Free_Util" via "HOL-Library.Multiset_Order")
### theory "HOL-Library.Set_Algebras"
### 0.209s elapsed time, 0.826s cpu time, 0.068s GC time
Loading theory "HOL-Library.Tree" (required by "Draft.EmbeddingsMoreTemplates" via "Draft.ExtrEqs" via "Draft.Templates")
instantiation
  multiset :: (type) cancel_comm_monoid_add
  zero_multiset == zero_class.zero :: 'a multiset
  minus_multiset == minus :: 'a multiset => 'a multiset => 'a multiset
  plus_multiset == plus :: 'a multiset => 'a multiset => 'a multiset
signature OLD_DATATYPE =
  sig
    val check_specs: spec list -> theory -> spec list * Proof.context
    type config = {quiet: bool, strict: bool}
    val default_config: config
    type descr =
       (int * (string * dtyp list * (string * dtyp list) list)) list
    val distinct_lemma: thm
    datatype dtyp
    = DtRec of int | DtTFree of string * sort | DtType of string * dtyp list
    type info =
       {case_cong: thm,
        case_cong_weak: thm,
        case_name: string,
        case_rewrites: thm list,
        descr: descr,
        distinct: thm list,
        exhaust: thm,
        index: int,
        induct: thm,
        inducts: thm list,
        inject: thm list,
        nchotomy: thm,
        rec_names: string list,
        rec_rewrites: thm list, split: thm, split_asm: thm}
    val read_specs: spec_cmd list -> theory -> spec list * Proof.context
    type spec =
       (binding * (string * sort) list * mixfix) *
       (binding * typ list * mixfix) list
    type spec_cmd =
       (binding * (string * string option) list * mixfix) *
       (binding * string list * mixfix) list
  end
structure Old_Datatype: OLD_DATATYPE
### theory "HOL-Library.Old_Datatype"
### 0.445s elapsed time, 1.733s cpu time, 0.250s GC time
Loading theory "HOL-Library.Countable" (required by "Draft.EmbeddingsMoreTemplates" via "Draft.Embeddings" via "Lambda_Free_RPOs.Lambda_Free_Term" via "Lambda_Free_RPOs.Lambda_Free_Util" via "HOL-Library.Extended_Nat")
consts
  shift :: "'a list => 'a stream => 'a stream"
Proofs for coinductive predicate(s) "streamsp"
  Proving monotonicity ...
consts
  snth :: "'a stream => nat => 'a"
consts
  stake :: "nat => 'a stream => 'a list"
consts
  sdrop :: "nat => 'a stream => 'a stream"
### Additional type variable(s) in locale specification "countable": 'a
consts
  sfilter :: "('a => bool) => 'a stream => 'a stream"
class countable = type +
  assumes "ex_inj": "EX to_nat. inj to_nat"
consts
  cycle :: "'a list => 'a stream"
consts
  left :: "'a tree => 'a tree"
consts
  right :: "'a tree => 'a tree"
consts
  siterate :: "('a => 'a) => 'a => 'a stream"
Found termination order: "size <*mlex*> {}"
### Partially applied constant "Multiset.inter_mset" on left hand side of equation, in theorem:
### semilattice_inf.Inf_fin (\<inter>#) (set (?x # ?xs)) ==
### fold (\<inter>#) ?xs ?x
consts
  flat :: "'a list stream => 'a stream"
Found termination order: "size <*mlex*> {}"
consts
  sinterleave :: "'a stream => 'a stream => 'a stream"
### Partially applied constant "Multiset.union_mset" on left hand side of equation, in theorem:
### semilattice_sup.Sup_fin (\<union>#) (set (?x # ?xs)) ==
### fold (\<union>#) ?xs ?x
consts
  szip :: "'a stream => 'b stream => ('a * 'b) stream"
Proofs for inductive predicate(s) "finite_item"
  Proving monotonicity ...
consts
  smap2 :: "('a => 'b => 'c) => 'a stream => 'b stream => 'c stream"
Found termination order: "size <*mlex*> {}"
### theory "HOL-Library.Stream"
### 1.094s elapsed time, 4.162s cpu time, 0.835s GC time
Loading theory "HOL-Library.BigO" (required by "Draft.EmbeddingsMoreTemplates" via "Draft.ExtrEqs")
class height = type +
  fixes height :: "'a => nat"
instantiation
  tree :: (type) height
  height_tree == height :: 'a tree => nat
Found termination order: "size <*mlex*> {}"
val old_countable_datatype_tac = fn: Proof.context -> int -> tactic
signature MULTISET_SIMPROCS =
  sig
    val subset_cancel_msets: Proof.context -> cterm -> thm option
    val subseteq_cancel_msets: Proof.context -> cterm -> thm option
  end
structure Multiset_Simprocs: MULTISET_SIMPROCS
Found termination order: "size <*mlex*> {}"
### ML warning (line 93 of "~~/src/HOL/Tools/BNF/bnf_lfp_countable.ML"):
### Pattern is not exhaustive.
### ML warning (line 139 of "~~/src/HOL/Tools/BNF/bnf_lfp_countable.ML"):
### Pattern is not exhaustive.
### ML warning (line 143 of "~~/src/HOL/Tools/BNF/bnf_lfp_countable.ML"):
### Matches are not exhaustive.
### ML warning (line 145 of "~~/src/HOL/Tools/BNF/bnf_lfp_countable.ML"):
### Matches are not exhaustive.
### ML warning (line 156 of "~~/src/HOL/Tools/BNF/bnf_lfp_countable.ML"):
### Pattern is not exhaustive.
signature BNF_LFP_COUNTABLE =
  sig
    val countable_datatype_tac: Proof.context -> tactic
    val derive_encode_injectives_thms:
       Proof.context -> string list -> thm list
  end
structure BNF_LFP_Countable: BNF_LFP_COUNTABLE
val countable_datatype_tac = fn: Proof.context -> thm -> thm Seq.seq
val countable_tac = fn: Proof.context -> int -> tactic
instantiation
  multiset :: (type) Inf
  Inf_multiset == Inf :: 'a multiset set => 'a multiset
instantiation
  multiset :: (type) Sup
  Sup_multiset == Sup :: 'a multiset set => 'a multiset
Found termination order: "size <*mlex*> {}"
Found termination order: "size <*mlex*> {}"
instantiation
  multiset :: (type) size
  size_multiset == size :: 'a multiset => nat
Found termination order: "size <*mlex*> {}"
### theory "HOL-Library.Countable"
### 1.346s elapsed time, 5.166s cpu time, 0.937s GC time
Loading theory "HOL-Library.Countable_Set" (required by "Draft.EmbeddingsMoreTemplates" via "Draft.Embeddings" via "Lambda_Free_RPOs.Lambda_Free_Term" via "Lambda_Free_RPOs.Lambda_Free_Util" via "HOL-Library.Extended_Nat" via "HOL-Library.Order_Continuity" via "HOL-Library.Countable_Complete_Lattices")
Found termination order: "size <*mlex*> {}"
locale comp_fun_commute
  fixes f :: "'a => 'b => 'b"
  assumes "comp_fun_commute f"
Found termination order: "size <*mlex*> {}"
consts
  mset :: "'a list => 'a multiset"
Found termination order: "(%p. size (fst p)) <*mlex*> {}"
Found termination order: "size <*mlex*> {}"
locale comm_monoid_set
  fixes f :: "'a => 'a => 'a"  (infixl \<open>\<^bold>*\<close> 70)
    and z :: "'a"  (\<open>\<^bold>1\<close>)
  assumes "comm_monoid_set (\<^bold>*) \<^bold>1"
class linorder = order +
  assumes "linear": "!!x y. x <= y | y <= x"
Found termination order: "(%p. size (snd p)) <*mlex*> {}"
### theory "HOL-Library.BigO"
### 0.852s elapsed time, 3.360s cpu time, 0.328s GC time
locale comm_monoid_mset
  fixes f :: "'a => 'a => 'a"  (infixl \<open>\<^bold>*\<close> 70)
    and z :: "'a"  (\<open>\<^bold>1\<close>)
  assumes "comm_monoid_mset (\<^bold>*) \<^bold>1"
### theory "HOL-Library.Countable_Set"
### 0.495s elapsed time, 1.888s cpu time, 0.270s GC time
Loading theory "HOL-Library.Countable_Complete_Lattices" (required by "Draft.EmbeddingsMoreTemplates" via "Draft.Embeddings" via "Lambda_Free_RPOs.Lambda_Free_Term" via "Lambda_Free_RPOs.Lambda_Free_Util" via "HOL-Library.Extended_Nat" via "HOL-Library.Order_Continuity")
class comm_monoid_add = ab_semigroup_add + monoid_add +
  assumes "add_0": "!!a. (0::'a) + a = a"
class comm_monoid_add = ab_semigroup_add + monoid_add +
  assumes "add_0": "!!a. (0::'a) + a = a"
Found termination order: "size <*mlex*> {}"
class canonically_ordered_monoid_add = ordered_comm_monoid_add +
  assumes "le_iff_add": "!!a b. (a <= b) = (EX c. b = a + c)"
### theory "HOL-Library.Tree"
### 2.228s elapsed time, 8.305s cpu time, 1.341s GC time
Loading theory "Draft.Templates" (required by "Draft.EmbeddingsMoreTemplates" via "Draft.ExtrEqs")
datatype template_term
=
     t_empty
   | template_app of template_term * template_term
   | template_hole of int
   | template_var of int
datatype sign
= equals | greater_equals | greater_than | less_equals | less_than
datatype template
=
     template_bimplication of template * template
   | template_dunno
   | template_equation of template_term * template_term
   | template_implication of template list * template
   | template_inequation of sign * template_term * template_term
   | template_negation of template
   | template_predicate of template_term
constructor t_empty: template_term
constructor template_app: template_term * template_term -> template_term
constructor template_hole: int -> template_term
constructor template_var: int -> template_term
constructor equals: sign
constructor greater_equals: sign
constructor greater_than: sign
constructor less_equals: sign
constructor less_than: sign
constructor template_bimplication: template * template -> template
constructor template_dunno: template
constructor template_equation: template_term * template_term -> template
constructor template_implication: template list * template -> template
constructor template_inequation:
   sign * template_term * template_term -> template
constructor template_negation: template -> template
constructor template_predicate: template_term -> template
val vfs = fn: term -> (indexname * typ) list * (string * typ) list
val indexOf = fn: ''a list -> ''a -> int -> int
val has_eq = fn: term -> bool
val term2template = fn:
   (indexname * typ) list -> (string * typ) list -> term -> template_term
val lemma2predicate = fn: term -> term -> template
val makeTemplatewithContext = fn: term -> term -> template
val lemma2template = fn: term -> template
val thm2template = fn: thm -> template
val tterm2string = fn: template_term -> string
val template2string = fn: template -> string
val t = "height ?t <= size ?t": thm
val th =
   Const ("HOL.Trueprop", "bool => prop") $
     (Const ("Orderings.ord_class.less_eq", "nat => nat => bool") $
       (Const ("Tree.height_class.height", "?'a tree => nat") $
         Var (("t", 0), "?'a tree")) $
       (Const ("Nat.size_class.size", "?'a tree => nat") $
         Var (("t", 0), "?'a tree"))):
   term
### theory "Draft.Templates"
### 0.076s elapsed time, 0.233s cpu time, 0.052s GC time
Loading theory "Draft.ExtrEqs" (required by "Draft.EmbeddingsMoreTemplates")
class comm_monoid_mult = ab_semigroup_mult + monoid_mult + dvd +
  assumes "mult_1": "!!a. (1::'a) * a = a"
class countable_complete_lattice = Inf + Sup + lattice + bot + top +
  assumes "ccInf_lower": "!!A x. [| countable A; x : A |] ==> Inf A <= x"
  assumes
    "ccInf_greatest":
      "!!A z. [| countable A; !!x. x : A ==> z <= x |] ==> z <= Inf A"
  assumes "ccSup_upper": "!!A x. [| countable A; x : A |] ==> x <= Sup A"
  assumes
    "ccSup_least":
      "!!A z. [| countable A; !!x. x : A ==> x <= z |] ==> Sup A <= z"
  assumes "ccInf_empty": "Inf {} = top"
  assumes "ccSup_empty": "Sup {} = bot"
class linorder = order +
  assumes "linear": "!!x y. x <= y | y <= x"
val eqpattern =
   Pattern
    (
       Const ("HOL.Trueprop", "bool => prop") $
         (Const ("HOL.eq", "?'a => ?'a => bool") $
           Var (("_dummy_", 1), "?'a") $ Var (("_dummy_", 2), "?'a"))
       ):
   term Find_Theorems.criterion
val badeqpattern = Pattern (Const ("Pure.eq", "?'a => ?'a => prop")):
   term Find_Theorems.criterion
val undefpattern =
   Pattern
    (
       Const ("HOL.Trueprop", "bool => prop") $
         (Const ("HOL.eq", "?'a => ?'a => bool") $
           Var (("_dummy_", 1), "?'a") $ Const ("HOL.undefined", "?'a"))
       ):
   term Find_Theorems.criterion
val thmpattern =
   Pattern
    (Const ("HOL.Trueprop", "bool => prop") $ Var (("_dummy_", 1), "bool")):
   term Find_Theorems.criterion
val badnames =
   ["*nitpick*", "*Nitpick*", "*full_exhaustive*", "*_def*", "Enum.finite*",
    "*Quickcheck*", "ATP*", "*Nunchaku*", "*Code*", "*BNF*", "*SMT*",
    "*.*.*"]:
   string list
val unwanted_names =
   [(false, Name "*nitpick*"), (false, Name "*Nitpick*"),
    (false, Name "*full_exhaustive*"), (false, Name "*_def*"),
    (false, Name "Enum.finite*"), (false, Name "*Quickcheck*"),
    (false, Name "ATP*"), (false, Name "*Nunchaku*"),
    (false, Name "*Code*"), (false, Name "*BNF*"), (false, Name "*SMT*"),
    (false, Name "*.*.*")]:
   (bool * term Find_Theorems.criterion) list
val has_vars = fn: term -> bool
val get_all_eqs = fn: string -> Proof.context -> (string * thm) list
val get_all_thms = fn: string -> Proof.context -> (string * thm) list
val get_noneq_thms = fn: string -> Proof.context -> (string * thm) list
val template_eqs = fn:
   string -> Proof.context -> (string * thm * template) list
val template_thms = fn:
   string -> Proof.context -> (string * thm * template) list
### theory "Draft.ExtrEqs"
### 0.602s elapsed time, 1.818s cpu time, 0.128s GC time
instantiation
  multiset :: (preorder) order
  less_eq_multiset == less_eq :: 'a multiset => 'a multiset => bool
  less_multiset == less :: 'a multiset => 'a multiset => bool
instantiation
  multiset :: (preorder) ordered_ab_semigroup_add
Proofs for inductive predicate(s) "pw_leq"
  Proving monotonicity ...
class countable_complete_distrib_lattice = countable_complete_lattice +
  assumes
    "sup_ccInf": "!!B a. countable B ==> sup a (Inf B) = Inf (sup a ` B)"
  assumes
    "inf_ccSup": "!!B a. countable B ==> inf a (Sup B) = Sup (inf a ` B)"
Found termination order: "(%p. length (fst p)) <*mlex*> {}"
instantiation
  multiset :: (equal) equal
  equal_multiset == equal_class.equal :: 'a multiset => 'a multiset => bool
instantiation
  multiset :: (random) random
  random_multiset == random_class.random ::
    natural
    => natural * natural
       => ('a multiset * (unit => term)) * natural * natural
instantiation
  multiset :: (full_exhaustive) full_exhaustive
  full_exhaustive_multiset == full_exhaustive_class.full_exhaustive ::
    ('a multiset * (unit => term) => (bool * term list) option)
    => natural => (bool * term list) option
Proofs for inductive predicate(s) "pred_mset"
  Proving monotonicity ...
Proofs for inductive predicate(s) "rel_mset'"
  Proving monotonicity ...
### theory "HOL-Library.Multiset"
### 3.526s elapsed time, 11.724s cpu time, 1.640s GC time
Loading theory "HOL-Library.Multiset_Order" (required by "Draft.EmbeddingsMoreTemplates" via "Draft.Embeddings" via "Lambda_Free_RPOs.Lambda_Free_Term" via "Lambda_Free_RPOs.Lambda_Free_Util")
class preorder = ord +
  assumes "less_le_not_le": "!!x y. (x < y) = (x <= y & ~ y <= x)"
    and "order_refl": "!!x. x <= x"
    and "order_trans": "!!x y z. [| x <= y; y <= z |] ==> x <= z"
instantiation
  multiset :: (preorder) ordered_ab_semigroup_monoid_add_imp_le
instantiation
  multiset :: (wellorder) wellorder
instantiation
  multiset :: (preorder) order_bot
  bot_multiset == bot :: 'a multiset
instantiation
  multiset :: (linorder) distrib_lattice
  inf_multiset == inf :: 'a multiset => 'a multiset => 'a multiset
  sup_multiset == sup :: 'a multiset => 'a multiset => 'a multiset
### theory "HOL-Library.Multiset_Order"
### 0.198s elapsed time, 0.487s cpu time, 0.056s GC time
### theory "HOL-Library.Countable_Complete_Lattices"
### 1.868s elapsed time, 4.781s cpu time, 0.428s GC time
Loading theory "HOL-Library.Order_Continuity" (required by "Draft.EmbeddingsMoreTemplates" via "Draft.Embeddings" via "Lambda_Free_RPOs.Lambda_Free_Term" via "Lambda_Free_RPOs.Lambda_Free_Util" via "HOL-Library.Extended_Nat")
### theory "HOL-Library.Order_Continuity"
### 0.397s elapsed time, 0.441s cpu time, 0.036s GC time
Loading theory "HOL-Library.Extended_Nat" (required by "Draft.EmbeddingsMoreTemplates" via "Draft.Embeddings" via "Lambda_Free_RPOs.Lambda_Free_Term" via "Lambda_Free_RPOs.Lambda_Free_Util")
class infinity = type +
  fixes infinity :: "'a"
instantiation
  enat :: infinity
  infinity_enat == infinity :: enat
Proofs for inductive predicate(s) "rec_set_enat"
### No equation for constructor "Extended_Nat.infinity_class.infinity"
### in definition of function "the_enat"
consts
  the_enat :: "enat => nat"
instantiation
  enat :: zero_neq_one
  one_enat == one_class.one :: enat
  zero_enat == zero_class.zero :: enat
instantiation
  enat :: comm_monoid_add
  plus_enat == plus :: enat => enat => enat
instantiation
  enat :: {comm_semiring_1,semiring_no_zero_divisors}
  times_enat == times :: enat => enat => enat
instantiation
  enat :: minus
  minus_enat == minus :: enat => enat => enat
instantiation
  enat :: linordered_ab_semigroup_add
  less_eq_enat == less_eq :: enat => enat => bool
  less_enat == less :: enat => enat => bool
instantiation
  enat :: {order_bot,order_top}
  top_enat == top :: enat
  bot_enat == bot :: enat
structure Cancel_Enat_Common:
  sig
    val dest_sum: term -> term list
    val dest_summing: term * term list -> term list
    val find_first: term -> term list -> term list
    val find_first_t: term list -> term -> term list -> term list
    val mk_eq: term * term -> term
    val mk_sum: typ -> term list -> term
    val norm_ss: simpset
    val norm_tac: Proof.context -> tactic
    val simplify_meta_eq: Proof.context -> thm -> thm -> thm
    val trans_tac: Proof.context -> thm option -> tactic
  end
structure Eq_Enat_Cancel:
  sig val proc: Proof.context -> term -> thm option end
structure Le_Enat_Cancel:
  sig val proc: Proof.context -> term -> thm option end
structure Less_Enat_Cancel:
  sig val proc: Proof.context -> term -> thm option end
instantiation
  enat :: complete_lattice
  Inf_enat == Inf :: enat set => enat
  Sup_enat == Sup :: enat set => enat
  sup_enat == sup :: enat => enat => enat
  inf_enat == inf :: enat => enat => enat
### theory "HOL-Library.Extended_Nat"
### 0.460s elapsed time, 0.494s cpu time, 0.048s GC time
Loading theory "Lambda_Free_RPOs.Lambda_Free_Util" (required by "Draft.EmbeddingsMoreTemplates" via "Draft.Embeddings" via "Lambda_Free_RPOs.Lambda_Free_Term")
### theory "Lambda_Free_RPOs.Lambda_Free_Util"
### 0.403s elapsed time, 0.468s cpu time, 0.092s GC time
Loading theory "Lambda_Free_RPOs.Infinite_Chain" (required by "Draft.EmbeddingsMoreTemplates" via "Draft.Embeddings" via "Lambda_Free_RPOs.Extension_Orders")
Loading theory "Lambda_Free_RPOs.Lambda_Free_Term" (required by "Draft.EmbeddingsMoreTemplates" via "Draft.Embeddings")
locale gt_sym
  fixes gt_sym :: "'s => 's => bool"  (infix \<open>>\<^sub>s\<close> 50)
  assumes "gt_sym (>\<^sub>s)"
consts
  worst_chain :: "nat => 'a"
### theory "Lambda_Free_RPOs.Infinite_Chain"
### 0.070s elapsed time, 0.141s cpu time, 0.000s GC time
Loading theory "Lambda_Free_RPOs.Extension_Orders" (required by "Draft.EmbeddingsMoreTemplates" via "Draft.Embeddings")
locale ext
  fixes ext :: "('a => 'a => bool) => 'a list => 'a list => bool"
  assumes "ext ext"
locale ext_irrefl
  fixes ext :: "('a => 'a => bool) => 'a list => 'a list => bool"
  assumes "ext_irrefl ext"
locale ext_trans
  fixes ext :: "('a => 'a => bool) => 'a list => 'a list => bool"
  assumes "ext_trans ext"
locale ext_irrefl_before_trans
  fixes ext :: "('a => 'a => bool) => 'a list => 'a list => bool"
  assumes "ext_irrefl_before_trans ext"
locale ext_trans_before_irrefl
  fixes ext :: "('a => 'a => bool) => 'a list => 'a list => bool"
  assumes "ext_trans_before_irrefl ext"
locale ext_irrefl_trans_strong
  fixes ext :: "('a => 'a => bool) => 'a list => 'a list => bool"
  assumes "ext_irrefl_trans_strong ext"
locale ext_snoc
  fixes ext :: "('a => 'a => bool) => 'a list => 'a list => bool"
  assumes "ext_snoc ext"
locale ext_compat_cons
  fixes ext :: "('a => 'a => bool) => 'a list => 'a list => bool"
  assumes "ext_compat_cons ext"
locale ext_compat_snoc
  fixes ext :: "('a => 'a => bool) => 'a list => 'a list => bool"
  assumes "ext_compat_snoc ext"
locale ext_compat_list
  fixes ext :: "('a => 'a => bool) => 'a list => 'a list => bool"
  assumes "ext_compat_list ext"
locale ext_singleton
  fixes ext :: "('a => 'a => bool) => 'a list => 'a list => bool"
  assumes "ext_singleton ext"
locale ext_compat_list_strong
  fixes ext :: "('a => 'a => bool) => 'a list => 'a list => bool"
  assumes "ext_compat_list_strong ext"
locale ext_total
  fixes ext :: "('a => 'a => bool) => 'a list => 'a list => bool"
  assumes "ext_total ext"
locale ext_wf
  fixes ext :: "('a => 'a => bool) => 'a list => 'a list => bool"
  assumes "ext_wf ext"
locale ext_hd_or_tl
  fixes ext :: "('a => 'a => bool) => 'a list => 'a list => bool"
  assumes "ext_hd_or_tl ext"
locale ext_wf_bounded
  fixes ext :: "('a => 'a => bool) => 'a list => 'a list => bool"
  assumes "ext_wf_bounded ext"
Proofs for inductive predicate(s) "lexext"
  Proving monotonicity ...
overloading
  head0 \<equiv> head0 :: ('s, 'v) tm => ('s, 'v) hd
consts
  head0 :: "('s, 'v) tm => ('s, 'v) hd"
Found termination order: "size <*mlex*> {}"
consts
  apps :: "('s, 'v) tm => ('s, 'v) tm list => ('s, 'v) tm"
locale ext_cwiseext
  fixes ext :: "('a => 'a => bool) => 'a list => 'a list => bool"
  assumes "ext_cwiseext ext"
### theory "Lambda_Free_RPOs.Extension_Orders"
### 1.528s elapsed time, 3.637s cpu time, 1.371s GC time
consts
  vars_mset :: "('s, 'v) tm => 'v multiset"
consts
  hsize :: "('s, 'v) tm => nat"
consts
  subst :: "('v => ('s, 'v) tm) => ('s, 'v) tm => ('s, 'v) tm"
Proofs for inductive predicate(s) "sub"
  Proving monotonicity ...
locale arity
  fixes arity_sym :: "'s => enat"
    and arity_var :: "'v => enat"
consts
  arity_hd :: "('s, 'v) hd => enat"
Proofs for inductive predicate(s) "wary"
  Proving monotonicity ...
Proofs for inductive predicate(s) "wary_fo"
  Proving monotonicity ...
locale ground_heads
  fixes gt_sym :: "'s => 's => bool"  (infix \<open>>\<^sub>s\<close> 50)
    and arity_sym :: "'s => enat"
    and arity_var :: "'v => enat"
    and ground_heads_var :: "'v => 's set"
  assumes "ground_heads (>\<^sub>s) arity_sym arity_var ground_heads_var"
consts
  ground_heads :: "('s, 'v) hd => 's set"
### theory "Lambda_Free_RPOs.Lambda_Free_Term"
### 2.367s elapsed time, 5.557s cpu time, 2.739s GC time
Loading theory "Draft.Embeddings" (required by "Draft.EmbeddingsMoreTemplates")
Found termination order: "(%p. size_list size (snd p)) <*mlex*> {}"
Found termination order: "(%p. size (snd (snd p))) <*mlex*> {}"
Proofs for inductive predicate(s) "emb_step"
  Proving monotonicity ...
Found termination order:
  "(%p. size_list (%p. size (snd p)) (fst p)) <*mlex*> {}"
Proofs for inductive predicate(s) "emb"
  Proving monotonicity ...
### theory "Draft.Embeddings"
### 0.907s elapsed time, 0.991s cpu time, 0.092s GC time
Loading theory "Draft.EmbeddingsMoreTemplates"
val templateLemmas =
   [("Embeddings.position_of_Nil", "position_of ?uu [] = True",
     template_equation
      (template_app
        (template_app (template_hole 2, template_var 0), template_hole 1),
       template_hole 0)),
    ("Embeddings.emb_at_Nil", "emb_at [] ?t = ?t",
     template_equation
      (template_app
        (template_app (template_hole 1, template_hole 0), template_var 0),
       template_var 0)),
    ("Embeddings.position_of_Hd",
     "position_of (Hd ?uv) (?uw # ?ux) = False",
     template_equation
      (template_app
        (template_app
          (template_hole 3, template_app (template_hole 2, template_var 2)),
         template_app
          (template_app (template_hole 1, template_var 1), template_var 0)),
       template_hole 0)),
    ("Embeddings.emb_step_at_head", "emb_step_at ?uu ?uv (Hd ?h) = Hd ?h",
     template_equation
      (template_app
        (template_app
          (template_app (template_hole 1, template_var 2), template_var 1),
         template_app (template_hole 0, template_var 0)),
       template_app (template_hole 0, template_var 0))),
    ("Embeddings.emb_step_at_left",
     "emb_step_at [] dir.Left (App ?t ?s) = ?t",
     template_equation
      (template_app
        (template_app
          (template_app (template_hole 3, template_hole 2),
           template_hole 1),
         template_app
          (template_app (template_hole 0, template_var 1), template_var 0)),
       template_var 1)),
    ("Embeddings.emb_step_at_right",
     "emb_step_at [] dir.Right (App ?t ?s) = ?s",
     template_equation
      (template_app
        (template_app
          (template_app (template_hole 3, template_hole 2),
           template_hole 1),
         template_app
          (template_app (template_hole 0, template_var 1), template_var 0)),
       template_var 0)),
    ("Embeddings.emb_step_is_emb",
     "?t \<rightarrow>\<^sub>e\<^sub>m\<^sub>b ?s ==>
      ?t \<unrhd>\<^sub>e\<^sub>m\<^sub>b ?s",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 1, template_var 1),
              template_var 0)
            )],
       template_predicate
        (
           template_app
            (template_app (template_hole 0, template_var 1), template_var 0)
           ))),
    ("Embeddings.sub_emb",
     "sub ?s ?t ==> ?t \<unrhd>\<^sub>e\<^sub>m\<^sub>b ?s",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 1, template_var 1),
              template_var 0)
            )],
       template_predicate
        (
           template_app
            (template_app (template_hole 0, template_var 0), template_var 1)
           ))),
    ("Embeddings.emb_step_arg",
     "is_App ?t ==> ?t \<rightarrow>\<^sub>e\<^sub>m\<^sub>b arg ?t",
     template_implication
      ([template_negation
         (
            template_predicate
             (template_app (template_hole 2, template_var 0))
            )],
       template_predicate
        (
           template_app
            (template_app (template_hole 1, template_var 0),
             template_app (template_hole 0, template_var 0))
           ))),
    ("Embeddings.emb_step_fun",
     "is_App ?t ==> ?t \<rightarrow>\<^sub>e\<^sub>m\<^sub>b fun ?t",
     template_implication
      ([template_negation
         (
            template_predicate
             (template_app (template_hole 2, template_var 0))
            )],
       template_predicate
        (
           template_app
            (template_app (template_hole 1, template_var 0),
             template_app (template_hole 0, template_var 0))
           ))),
    ("Embeddings.emb_hsize",
     "?t \<unrhd>\<^sub>e\<^sub>m\<^sub>b ?s ==> hsize ?s <= hsize ?t",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 2, template_var 1),
              template_var 0)
            )],
       template_inequation
        (less_equals, template_app (template_hole 0, template_var 0),
         template_app (template_hole 0, template_var 1)))),
    ("Embeddings.emb_vars",
     "?t \<unrhd>\<^sub>e\<^sub>m\<^sub>b ?s ==> vars ?s <= vars ?t",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 2, template_var 1),
              template_var 0)
            )],
       template_inequation
        (less_equals, template_app (template_hole 0, template_var 0),
         template_app (template_hole 0, template_var 1)))),
    ("Embeddings.emb_step_hsize",
     "?t \<rightarrow>\<^sub>e\<^sub>m\<^sub>b ?s ==> hsize ?s < hsize ?t",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 2, template_var 1),
              template_var 0)
            )],
       template_inequation
        (less_than, template_app (template_hole 0, template_var 0),
         template_app (template_hole 0, template_var 1)))),
    ("Embeddings.emb_step_vars",
     "?t \<rightarrow>\<^sub>e\<^sub>m\<^sub>b ?s ==> vars ?s <= vars ?t",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 2, template_var 1),
              template_var 0)
            )],
       template_inequation
        (less_equals, template_app (template_hole 0, template_var 0),
         template_app (template_hole 0, template_var 1)))),
    ("Embeddings.shorten_position",
     "position_of ?t (?p @ ?q) ==> position_of ?t ?p",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 1, template_var 2),
              template_app
               (template_app (template_hole 0, template_var 1),
                template_var 0))
            )],
       template_predicate
        (
           template_app
            (template_app (template_hole 1, template_var 2), template_var 1)
           ))),
    ("Embeddings.arg_emb",
     "?s : set (args ?t) ==> ?t \<unrhd>\<^sub>e\<^sub>m\<^sub>b ?s",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 3, template_var 1),
              template_app
               (template_hole 2,
                template_app (template_hole 1, template_var 0)))
            )],
       template_predicate
        (
           template_app
            (template_app (template_hole 0, template_var 0), template_var 1)
           ))),
    ("Embeddings.emb_equiv",
     "(?t \<unrhd>\<^sub>e\<^sub>m\<^sub>b ?s) =
      (EX ps. emb_at ps ?t = ?s)",
     template_equation
      (template_app
        (template_app (template_hole 3, template_var 1), template_var 0),
       template_app (template_hole 2, t_empty))),
    ("Embeddings.position_of_left",
     "position_of (App ?t ?s) (dir.Left # ?ds) = position_of ?t ?ds",
     template_equation
      (template_app
        (template_app
          (template_hole 3,
           template_app
            (template_app (template_hole 2, template_var 2),
             template_var 1)),
         template_app
          (template_app (template_hole 1, template_hole 0),
           template_var 0)),
       template_app
        (template_app (template_hole 3, template_var 2), template_var 0))),
    ("Embeddings.position_of_right",
     "position_of (App ?t ?s) (dir.Right # ?ds) = position_of ?s ?ds",
     template_equation
      (template_app
        (template_app
          (template_hole 3,
           template_app
            (template_app (template_hole 2, template_var 2),
             template_var 1)),
         template_app
          (template_app (template_hole 1, template_hole 0),
           template_var 0)),
       template_app
        (template_app (template_hole 3, template_var 1), template_var 0))),
    ("Embeddings.no_position_replicate_num_args",
     "~ position_of ?t (replicate (num_args ?t) dir.Left @ [?d])",
     template_negation
      (
         template_predicate
          (
             template_app
              (template_app (template_hole 7, template_var 1),
               template_app
                (template_app
                  (template_hole 6,
                   template_app
                    (template_app
                      (template_hole 5,
                       template_app
                        (template_hole 4,
                         template_app (template_hole 3, template_var 1))),
                     template_hole 2)),
                 template_app
                  (template_app (template_hole 1, template_var 0),
                   template_hole 0)))
             )
         )),
    ("Embeddings.emb_subst",
     "?t \<unrhd>\<^sub>e\<^sub>m\<^sub>b ?s ==>
      subst ?\<rho> ?t \<unrhd>\<^sub>e\<^sub>m\<^sub>b subst ?\<rho> ?s",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 1, template_var 2),
              template_var 1)
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 1,
               template_app
                (template_app (template_hole 0, template_var 0),
                 template_var 2)),
             template_app
              (template_app (template_hole 0, template_var 0),
               template_var 1))
           ))),
    ("Embeddings.emb_step_subst",
     "?t \<rightarrow>\<^sub>e\<^sub>m\<^sub>b ?s ==>
      subst ?\<rho> ?t \<rightarrow>\<^sub>e\<^sub>m\<^sub>b
      subst ?\<rho> ?s",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 1, template_var 2),
              template_var 1)
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 1,
               template_app
                (template_app (template_hole 0, template_var 0),
                 template_var 2)),
             template_app
              (template_app (template_hole 0, template_var 0),
               template_var 1))
           ))),
    ("Embeddings.emb_step_at_is_App",
     "emb_step_at ?p ?d ?u ~= ?u ==> is_App ?u",
     template_implication
      ([template_negation
         (
            template_equation
             (template_app
               (template_app
                 (template_app (template_hole 1, template_var 2),
                  template_var 1),
                template_var 0),
              template_var 0)
            )],
       template_negation
        (
           template_predicate
            (template_app (template_hole 0, template_var 0))
           ))),
    ("Embeddings.emb_trans",
     "[| ?t \<unrhd>\<^sub>e\<^sub>m\<^sub>b ?u;
         ?u \<unrhd>\<^sub>e\<^sub>m\<^sub>b ?s |]
      ==> ?t \<unrhd>\<^sub>e\<^sub>m\<^sub>b ?s",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 0, template_var 2),
              template_var 1)
            ),
        template_predicate
         (
            template_app
             (template_app (template_hole 0, template_var 1),
              template_var 0)
            )],
       template_predicate
        (
           template_app
            (template_app (template_hole 0, template_var 2), template_var 0)
           ))),
    ("Embeddings.emb_prepend_step",
     "[| ?t \<rightarrow>\<^sub>e\<^sub>m\<^sub>b ?u;
         ?u \<unrhd>\<^sub>e\<^sub>m\<^sub>b ?s |]
      ==> ?t \<unrhd>\<^sub>e\<^sub>m\<^sub>b ?s",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 1, template_var 2),
              template_var 1)
            ),
        template_predicate
         (
            template_app
             (template_app (template_hole 0, template_var 1),
              template_var 0)
            )],
       template_predicate
        (
           template_app
            (template_app (template_hole 0, template_var 2), template_var 0)
           ))),
    ("Embeddings.emb_at_Cons",
     "emb_at ((?p, ?d) # ?ps) ?t = emb_step_at ?p ?d (emb_at ?ps ?t)",
     template_equation
      (template_app
        (template_app
          (template_hole 3,
           template_app
            (template_app
              (template_hole 2,
               template_app
                (template_app (template_hole 1, template_var 3),
                 template_var 2)),
             template_var 1)),
         template_var 0),
       template_app
        (template_app
          (template_app (template_hole 0, template_var 3), template_var 2),
         template_app
          (template_app (template_hole 3, template_var 1),
           template_var 0)))),
    ("Embeddings.emb_step_at_left_context",
     "emb_step_at (dir.Left # ?p) ?dir (App ?t ?s) =
      App (emb_step_at ?p ?dir ?t) ?s",
     template_equation
      (template_app
        (template_app
          (template_app
            (template_hole 3,
             template_app
              (template_app (template_hole 2, template_hole 1),
               template_var 3)),
           template_var 2),
         template_app
          (template_app (template_hole 0, template_var 1), template_var 0)),
       template_app
        (template_app
          (template_hole 0,
           template_app
            (template_app
              (template_app (template_hole 3, template_var 3),
               template_var 2),
             template_var 1)),
         template_var 0))),
    ("Embeddings.emb_step_at_right_context",
     "emb_step_at (dir.Right # ?p) ?dir (App ?t ?s) =
      App ?t (emb_step_at ?p ?dir ?s)",
     template_equation
      (template_app
        (template_app
          (template_app
            (template_hole 3,
             template_app
              (template_app (template_hole 2, template_hole 1),
               template_var 3)),
           template_var 2),
         template_app
          (template_app (template_hole 0, template_var 1), template_var 0)),
       template_app
        (template_app (template_hole 0, template_var 1),
         template_app
          (template_app
            (template_app (template_hole 3, template_var 3),
             template_var 2),
           template_var 0)))),
    ("Embeddings.emb_step_at_if_position",
     "position_of ?t (?p @ [?d]) ==>
      ?t \<rightarrow>\<^sub>e\<^sub>m\<^sub>b emb_step_at ?p ?d ?t",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 5, template_var 2),
              template_app
               (template_app (template_hole 4, template_var 1),
                template_app
                 (template_app (template_hole 3, template_var 0),
                  template_hole 2)))
            )],
       template_predicate
        (
           template_app
            (template_app (template_hole 1, template_var 2),
             template_app
              (template_app
                (template_app (template_hole 0, template_var 1),
                 template_var 0),
               template_var 2))
           ))),
    ("Embeddings.ground_emb",
     "[| ?t \<unrhd>\<^sub>e\<^sub>m\<^sub>b ?s; ground ?t |]
      ==> ground ?s",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 3, template_var 1),
              template_var 0)
            ),
        template_equation
         (template_app (template_hole 1, template_var 1), template_hole 0)],
       template_equation
        (template_app (template_hole 1, template_var 0), template_hole 0))),
    ("Embeddings.emb_hsize_neq",
     "[| ?t \<unrhd>\<^sub>e\<^sub>m\<^sub>b ?s; ?t ~= ?s |]
      ==> hsize ?s < hsize ?t",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 4, template_var 1),
              template_var 0)
            ),
        template_negation
         (template_equation (template_var 1, template_var 0))],
       template_inequation
        (less_than, template_app (template_hole 0, template_var 0),
         template_app (template_hole 0, template_var 1)))),
    ("Embeddings.emb_step_under_args_head",
     "~ list_all (%x. x = dir.Left) ?p ==>
      head (emb_step_at ?p ?d ?t) = head ?t",
     template_implication
      ([template_negation
         (
            template_predicate
             (
                template_app
                 (template_app (template_hole 5, t_empty), template_var 2)
                )
            )],
       template_equation
        (template_app
          (template_hole 1,
           template_app
            (template_app
              (template_app (template_hole 0, template_var 2),
               template_var 1),
             template_var 0)),
         template_app (template_hole 1, template_var 0)))),
    ("Embeddings.shallower_pos",
     "position_of ?t (?p @ ?q @ [?dq]) ==> position_of ?t (?p @ [?dp])",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 3, template_var 4),
              template_app
               (template_app (template_hole 2, template_var 3),
                template_app
                 (template_app (template_hole 2, template_var 2),
                  template_app
                   (template_app (template_hole 1, template_var 1),
                    template_hole 0))))
            )],
       template_predicate
        (
           template_app
            (template_app (template_hole 3, template_var 4),
             template_app
              (template_app (template_hole 2, template_var 3),
               template_app
                (template_app (template_hole 1, template_var 0),
                 template_hole 0)))
           ))),
    ("Embeddings.emb_step_equiv",
     "(?t \<rightarrow>\<^sub>e\<^sub>m\<^sub>b ?s) =
      ((EX p d. emb_step_at p d ?t = ?s) & ?t ~= ?s)",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 6, template_var 1),
              template_var 0)
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 5, template_app (template_hole 4, t_empty)),
             template_app
              (template_hole 0,
               template_app
                (template_app (template_hole 2, template_var 1),
                 template_var 0)))
           ))),
    ("Embeddings.merge_emb_step_at",
     "emb_step_at ?p ?d1.0 (emb_step_at (?p @ [opp ?d1.0] @ ?q) ?d2.0 ?t) =
      emb_step_at ?p ?d1.0 ?t",
     template_equation
      (template_app
        (template_app
          (template_app (template_hole 4, template_var 4), template_var 3),
         template_app
          (template_app
            (template_app
              (template_hole 4,
               template_app
                (template_app (template_hole 3, template_var 4),
                 template_app
                  (template_app
                    (template_hole 3,
                     template_app
                      (template_app
                        (template_hole 2,
                         template_app (template_hole 1, template_var 3)),
                       template_hole 0)),
                   template_var 2))),
             template_var 1),
           template_var 0)),
       template_app
        (template_app
          (template_app (template_hole 4, template_var 4), template_var 3),
         template_var 0))),
    ("Embeddings.emb_step_under_args_num_args",
     "~ list_all (%x. x = dir.Left) ?p ==>
      num_args (emb_step_at ?p ?d ?t) = num_args ?t",
     template_implication
      ([template_negation
         (
            template_predicate
             (
                template_app
                 (template_app (template_hole 6, t_empty), template_var 2)
                )
            )],
       template_equation
        (template_app
          (template_hole 2,
           template_app
            (template_hole 1,
             template_app
              (template_app
                (template_app (template_hole 0, template_var 2),
                 template_var 1),
               template_var 0))),
         template_app
          (template_hole 2,
           template_app (template_hole 1, template_var 0))))),
    ("Embeddings.emb_at_trans",
     "[| emb_at ?ps ?t = ?u; emb_at ?qs ?u = ?s |]
      ==> emb_at (?qs @ ?ps) ?t = ?s",
     template_implication
      ([template_equation
         (template_app
           (template_app (template_hole 1, template_var 4), template_var 3),
          template_var 2),
        template_equation
         (template_app
           (template_app (template_hole 1, template_var 1), template_var 2),
          template_var 0)],
       template_equation
        (template_app
          (template_app
            (template_hole 1,
             template_app
              (template_app (template_hole 0, template_var 1),
               template_var 4)),
           template_var 3),
         template_var 0))),
    ("Embeddings.position_if_emb_step_at",
     "[| emb_step_at ?p ?d ?t = ?u; ?t ~= ?u |]
      ==> position_of ?t (?p @ [?d])",
     template_implication
      ([template_equation
         (template_app
           (template_app
             (template_app (template_hole 5, template_var 3),
              template_var 2),
            template_var 1),
          template_var 0),
        template_negation
         (template_equation (template_var 1, template_var 0))],
       template_predicate
        (
           template_app
            (template_app (template_hole 3, template_var 1),
             template_app
              (template_app (template_hole 2, template_var 3),
               template_app
                (template_app (template_hole 1, template_var 2),
                 template_hole 0)))
           ))),
    ("Embeddings.emb_step_at_subst",
     "position_of ?t (?p @ [?d]) ==>
      emb_step_at ?p ?d (subst ?\<rho> ?t) =
      subst ?\<rho> (emb_step_at ?p ?d ?t)",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 6, template_var 3),
              template_app
               (template_app (template_hole 5, template_var 2),
                template_app
                 (template_app (template_hole 4, template_var 1),
                  template_hole 3)))
            )],
       template_equation
        (template_app
          (template_app
            (template_app (template_hole 1, template_var 2),
             template_var 1),
           template_app
            (template_app (template_hole 0, template_var 0),
             template_var 3)),
         template_app
          (template_app (template_hole 0, template_var 0),
           template_app
            (template_app
              (template_app (template_hole 1, template_var 2),
               template_var 1),
             template_var 3))))),
    ("Embeddings.swap_nested_emb_step_at",
     "emb_step_at (?p @ ?q) ?d2.0 (emb_step_at ?p ?d1.0 ?t) =
      emb_step_at ?p ?d1.0 (emb_step_at (?p @ [?d1.0] @ ?q) ?d2.0 ?t)",
     template_equation
      (template_app
        (template_app
          (template_app
            (template_hole 3,
             template_app
              (template_app (template_hole 2, template_var 4),
               template_var 3)),
           template_var 2),
         template_app
          (template_app
            (template_app (template_hole 3, template_var 4),
             template_var 1),
           template_var 0)),
       template_app
        (template_app
          (template_app (template_hole 3, template_var 4), template_var 1),
         template_app
          (template_app
            (template_app
              (template_hole 3,
               template_app
                (template_app (template_hole 2, template_var 4),
                 template_app
                  (template_app
                    (template_hole 2,
                     template_app
                      (template_app (template_hole 1, template_var 1),
                       template_hole 0)),
                   template_var 3))),
             template_var 2),
           template_var 0)))),
    ("Embeddings.emb_step_equiv'",
     "(?t \<rightarrow>\<^sub>e\<^sub>m\<^sub>b ?s) =
      ((EX p. p ~= [] & emb_step_at' p ?t = ?s) & ?t ~= ?s)",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 9, template_var 1),
              template_var 0)
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 8, template_app (template_hole 7, t_empty)),
             template_app
              (template_hole 6,
               template_app
                (template_app (template_hole 3, template_var 1),
                 template_var 0)))
           ))),
    ("Embeddings.pos_emb_step_at_nested",
     "position_of (emb_step_at (?p @ [?d1.0] @ ?q) ?d2.0 ?t)
       (?p @ [?d1.0]) =
      position_of ?t (?p @ [?d1.0])",
     template_equation
      (template_app
        (template_app
          (template_hole 4,
           template_app
            (template_app
              (template_app
                (template_hole 3,
                 template_app
                  (template_app (template_hole 2, template_var 4),
                   template_app
                    (template_app
                      (template_hole 2,
                       template_app
                        (template_app (template_hole 1, template_var 3),
                         template_hole 0)),
                     template_var 2))),
               template_var 1),
             template_var 0)),
         template_app
          (template_app (template_hole 2, template_var 4),
           template_app
            (template_app (template_hole 1, template_var 3),
             template_hole 0))),
       template_app
        (template_app (template_hole 4, template_var 0),
         template_app
          (template_app (template_hole 2, template_var 4),
           template_app
            (template_app (template_hole 1, template_var 3),
             template_hole 0))))),
    ("Embeddings.pos_emb_step_at_opp",
     "position_of ?t (?p @ [?d1.0]) =
      position_of (emb_step_at (?p @ [opp ?d1.0] @ ?q) ?d2.0 ?t)
       (?p @ [?d1.0])",
     template_equation
      (template_app
        (template_app (template_hole 5, template_var 4),
         template_app
          (template_app (template_hole 4, template_var 3),
           template_app
            (template_app (template_hole 3, template_var 2),
             template_hole 2))),
       template_app
        (template_app
          (template_hole 5,
           template_app
            (template_app
              (template_app
                (template_hole 1,
                 template_app
                  (template_app (template_hole 4, template_var 3),
                   template_app
                    (template_app
                      (template_hole 4,
                       template_app
                        (template_app
                          (template_hole 3,
                           template_app (template_hole 0, template_var 2)),
                         template_hole 2)),
                     template_var 1))),
               template_var 0),
             template_var 4)),
         template_app
          (template_app (template_hole 4, template_var 3),
           template_app
            (template_app (template_hole 3, template_var 2),
             template_hole 2))))),
    ("Embeddings.prio_emb_pos_le",
     "[| ?p ~= []; position_of ?t ?p;
         emb_step_at' ?p ?t \<unrhd>\<^sub>e\<^sub>m\<^sub>b ?s |]
      ==> ?prio (prio_emb_pos ?prio ?t ?s) <= ?prio ?p",
     template_implication
      ([template_negation
         (template_equation (template_var 3, template_hole 7)),
        template_predicate
         (
            template_app
             (template_app (template_hole 6, template_var 2),
              template_var 3)
            ),
        template_predicate
         (
            template_app
             (template_app
               (template_hole 5,
                template_app
                 (template_app
                   (template_app
                     (template_hole 4,
                      template_app (template_hole 3, template_var 3)),
                    template_app (template_hole 2, template_var 3)),
                  template_var 2)),
              template_var 1)
            )],
       template_inequation
        (less_equals,
         template_app
          (template_var 0,
           template_app
            (template_app
              (template_app (template_hole 0, template_var 0),
               template_var 2),
             template_var 1)),
         template_app (template_var 0, template_var 3)))),
    ("Embeddings.pos_emb_step_at_disjunct",
     "[| take (length ?q) ?p ~= ?q; take (length ?p) ?q ~= ?p |]
      ==> position_of ?t (?p @ [?d1.0]) =
          position_of (emb_step_at ?q ?d2.0 ?t) (?p @ [?d1.0])",
     template_implication
      ([template_negation
         (
            template_equation
             (template_app
               (template_app
                 (template_hole 7,
                  template_app (template_hole 6, template_var 4)),
                template_var 3),
              template_var 4)
            ),
        template_negation
         (
            template_equation
             (template_app
               (template_app
                 (template_hole 7,
                  template_app (template_hole 6, template_var 3)),
                template_var 4),
              template_var 3)
            )],
       template_equation
        (template_app
          (template_app (template_hole 4, template_var 2),
           template_app
            (template_app (template_hole 3, template_var 3),
             template_app
              (template_app (template_hole 2, template_var 1),
               template_hole 1))),
         template_app
          (template_app
            (template_hole 4,
             template_app
              (template_app
                (template_app (template_hole 0, template_var 4),
                 template_var 0),
               template_var 2)),
           template_app
            (template_app (template_hole 3, template_var 3),
             template_app
              (template_app (template_hole 2, template_var 1),
               template_hole 1)))))),
    ("Embeddings.sequence_emb_steps",
     "(?t \<unrhd>\<^sub>e\<^sub>m\<^sub>b ?s) =
      (EX us.
          us ~= [] &
          hd us = ?t &
          last us = ?s &
          (ALL i.
              Suc i < length us -->
              us ! i \<rightarrow>\<^sub>e\<^sub>m\<^sub>b us ! Suc i))",
     template_equation
      (template_app
        (template_app (template_hole 15, template_var 1), template_var 0),
       template_app (template_hole 14, t_empty))),
    ("Embeddings.position_Left_only_subst",
     "[| list_all (%x. x = dir.Left) ?p;
         position_of (subst ?\<rho> ?w) (?p @ [?d]);
         num_args (subst ?\<rho> ?w) = num_args ?w |]
      ==> position_of ?w (?p @ [?d])",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 10, t_empty), template_var 3)
            ),
        template_predicate
         (
            template_app
             (template_app
               (template_hole 7,
                template_app
                 (template_app (template_hole 6, template_var 2),
                  template_var 1)),
              template_app
               (template_app (template_hole 5, template_var 3),
                template_app
                 (template_app (template_hole 4, template_var 0),
                  template_hole 3)))
            ),
        template_equation
         (template_app
           (template_hole 1,
            template_app
             (template_hole 0,
              template_app
               (template_app (template_hole 6, template_var 2),
                template_var 1))),
          template_app
           (template_hole 1,
            template_app (template_hole 0, template_var 1)))],
       template_predicate
        (
           template_app
            (template_app (template_hole 7, template_var 1),
             template_app
              (template_app (template_hole 5, template_var 3),
               template_app
                (template_app (template_hole 4, template_var 0),
                 template_hole 3)))
           ))),
    ("Embeddings.emb_step_under_args_emb",
     "[| ~ list_all (%x. x = dir.Left) ?p; position_of ?t (?p @ [?d]) |]
      ==> ALL i<num_args ?t.
             args ?t ! i \<unrhd>\<^sub>e\<^sub>m\<^sub>b
             args (emb_step_at ?p ?d ?t) ! i",
     template_implication
      ([template_negation
         (
            template_predicate
             (
                template_app
                 (template_app (template_hole 14, t_empty), template_var 2)
                )
            ),
        template_predicate
         (
            template_app
             (template_app (template_hole 11, template_var 1),
              template_app
               (template_app (template_hole 10, template_var 2),
                template_app
                 (template_app (template_hole 9, template_var 0),
                  template_hole 8)))
            )],
       template_predicate (template_app (template_hole 7, t_empty)))),
    ("Embeddings.perform_emb_above_vars0",
     "[| subst ?\<rho> ?s \<unrhd>\<^sub>e\<^sub>m\<^sub>b ?u;
         !!w. [| ?s \<unrhd>\<^sub>e\<^sub>m\<^sub>b w;
                 subst ?\<rho> w \<unrhd>\<^sub>e\<^sub>m\<^sub>b ?u;
                 ALL w'.
                    w \<rightarrow>\<^sub>e\<^sub>m\<^sub>b w' -->
                    ~ subst ?\<rho> w' \<unrhd>\<^sub>e\<^sub>m\<^sub>b
                      ?u |]
              ==> ?thesis |]
      ==> ?thesis",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_hole 6,
                template_app
                 (template_app (template_hole 5, template_var 3),
                  template_var 2)),
              template_var 1)
            ),
        template_predicate (template_app (template_hole 4, t_empty))],
       template_predicate (template_var 0))),
    ("Embeddings.prio_emb_posI",
     "[| ?t \<unrhd>\<^sub>e\<^sub>m\<^sub>b ?s; ?t ~= ?s |]
      ==> prio_emb_pos ?prio ?t ?s ~= [] &
          position_of ?t (prio_emb_pos ?prio ?t ?s) &
          emb_step_at' (prio_emb_pos ?prio ?t ?s)
           ?t \<unrhd>\<^sub>e\<^sub>m\<^sub>b
          ?s",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 10, template_var 2),
              template_var 1)
            ),
        template_negation
         (template_equation (template_var 2, template_var 1))],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 7,
               template_app
                (template_hole 9,
                 template_app
                  (template_app
                    (template_hole 6,
                     template_app
                      (template_app
                        (template_app (template_hole 5, template_var 0),
                         template_var 2),
                       template_var 1)),
                   template_hole 4))),
             template_app
              (template_app
                (template_hole 7,
                 template_app
                  (template_app (template_hole 3, template_var 2),
                   template_app
                    (template_app
                      (template_app (template_hole 5, template_var 0),
                       template_var 2),
                     template_var 1))),
               template_app
                (template_app
                  (template_hole 10,
                   template_app
                    (template_app
                      (template_app
                        (template_hole 2,
                         template_app
                          (template_hole 1,
                           template_app
                            (template_app
                              (template_app
                                (template_hole 5, template_var 0),
                               template_var 2),
                             template_var 1))),
                       template_app
                        (template_hole 0,
                         template_app
                          (template_app
                            (template_app (template_hole 5, template_var 0),
                             template_var 2),
                           template_var 1))),
                     template_var 2)),
                 template_var 1)))
           ))),
    ("Embeddings.emb_induct_reverse",
     "[| ?t \<unrhd>\<^sub>e\<^sub>m\<^sub>b ?s; !!t. ?P t t;
         !!t u s.
            [| t \<rightarrow>\<^sub>e\<^sub>m\<^sub>b u;
               u \<unrhd>\<^sub>e\<^sub>m\<^sub>b s; ?P u s |]
            ==> ?P t s |]
      ==> ?P ?t ?s",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 2, template_var 2),
              template_var 1)
            ),
        template_predicate (template_app (template_hole 1, t_empty)),
        template_predicate (template_app (template_hole 1, t_empty))],
       template_predicate
        (
           template_app
            (template_app (template_var 0, template_var 2), template_var 1)
           ))),
    ("Embeddings.swap_disjunct_emb_step_at",
     "[| length ?p <= length ?q ==> take (length ?p) ?q ~= ?p;
         length ?q <= length ?p ==> take (length ?q) ?p ~= ?q |]
      ==> emb_step_at ?q ?d2.0 (emb_step_at ?p ?d1.0 ?t) =
          emb_step_at ?p ?d1.0 (emb_step_at ?q ?d2.0 ?t)",
     template_implication
      ([template_implication
         ([template_inequation
            (less_equals, template_app (template_hole 5, template_var 4),
             template_app (template_hole 5, template_var 3))],
          template_negation
           (
              template_equation
               (template_app
                 (template_app
                   (template_hole 2,
                    template_app (template_hole 5, template_var 4)),
                  template_var 3),
                template_var 4)
              )),
        template_implication
         ([template_inequation
            (less_equals, template_app (template_hole 5, template_var 3),
             template_app (template_hole 5, template_var 4))],
          template_negation
           (
              template_equation
               (template_app
                 (template_app
                   (template_hole 2,
                    template_app (template_hole 5, template_var 3)),
                  template_var 4),
                template_var 3)
              ))],
       template_equation
        (template_app
          (template_app
            (template_app (template_hole 0, template_var 3),
             template_var 2),
           template_app
            (template_app
              (template_app (template_hole 0, template_var 4),
               template_var 1),
             template_var 0)),
         template_app
          (template_app
            (template_app (template_hole 0, template_var 4),
             template_var 1),
           template_app
            (template_app
              (template_app (template_hole 0, template_var 3),
               template_var 2),
             template_var 0))))),
    ("Embeddings.sequence_prio_emb_steps",
     "?t \<unrhd>\<^sub>e\<^sub>m\<^sub>b ?s ==>
      EX us.
         us ~= [] &
         hd us = ?t &
         last us = ?s &
         (ALL i.
             Suc i < length us -->
             prio_emb_step ?prio (us ! i) ?s = us ! Suc i &
             us ! i \<rightarrow>\<^sub>e\<^sub>m\<^sub>b us ! Suc i)",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 16, template_var 2),
              template_var 1)
            )],
       template_predicate (template_app (template_hole 15, t_empty)))),
    ("Embeddings.emb_cases_reverse",
     "[| ?t \<unrhd>\<^sub>e\<^sub>m\<^sub>b ?s;
         !!t'. [| ?t = t'; ?s = t' |] ==> ?P;
         !!t' u s'.
            [| ?t = t'; ?s = s'; t' \<rightarrow>\<^sub>e\<^sub>m\<^sub>b u;
               u \<unrhd>\<^sub>e\<^sub>m\<^sub>b s' |]
            ==> ?P |]
      ==> ?P",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 3, template_var 2),
              template_var 1)
            ),
        template_predicate (template_app (template_hole 2, t_empty)),
        template_predicate (template_app (template_hole 2, t_empty))],
       template_predicate (template_var 0))),
    ("Embeddings.perform_emb_above_vars",
     "[| subst ?\<rho> ?s \<unrhd>\<^sub>e\<^sub>m\<^sub>b ?u;
         !!w. [| ?s \<unrhd>\<^sub>e\<^sub>m\<^sub>b w;
                 subst ?\<rho> w \<unrhd>\<^sub>e\<^sub>m\<^sub>b ?u;
                 is_Sym (head w) ==>
                 head w = head ?u &
                 num_args w = num_args ?u &
                 (ALL k<num_args w.
                     args (subst ?\<rho> w) !
                     k \<unrhd>\<^sub>e\<^sub>m\<^sub>b
                     args ?u ! k) |]
              ==> ?thesis |]
      ==> ?thesis",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_hole 14,
                template_app
                 (template_app (template_hole 13, template_var 3),
                  template_var 2)),
              template_var 1)
            ),
        template_predicate (template_app (template_hole 12, t_empty))],
       template_predicate (template_var 0))),
    ("Embeddings.prio_emb_pos_increase",
     "[| ?t \<unrhd>\<^sub>e\<^sub>m\<^sub>b ?s; ?t ~= ?s;
         prio_emb_step ?prio ?t ?s ~= ?s;
         !!p q dp dq.
            ?prio (q @ [dq]) < ?prio (p @ [dp]) ==>
            take (length p) q ~= p |]
      ==> ?prio (prio_emb_pos ?prio ?t ?s)
          <= ?prio (prio_emb_pos ?prio (prio_emb_step ?prio ?t ?s) ?s)",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 14, template_var 2),
              template_var 1)
            ),
        template_negation
         (template_equation (template_var 2, template_var 1)),
        template_negation
         (
            template_equation
             (template_app
               (template_app
                 (template_app (template_hole 11, template_var 0),
                  template_var 2),
                template_var 1),
              template_var 1)
            ),
        template_predicate (template_app (template_hole 10, t_empty))],
       template_inequation
        (less_equals,
         template_app
          (template_var 0,
           template_app
            (template_app
              (template_app (template_hole 0, template_var 0),
               template_var 2),
             template_var 1)),
         template_app
          (template_var 0,
           template_app
            (template_app
              (template_app (template_hole 0, template_var 0),
               template_app
                (template_app
                  (template_app (template_hole 11, template_var 0),
                   template_var 2),
                 template_var 1)),
             template_var 1))))),
    ("Embeddings.emb_step_under_args_emb_step",
     "[| ~ list_all (%x. x = dir.Left) ?p; position_of ?t (?p @ [?d]);
         !!i. [| i < num_args ?t;
                 args ?t ! i \<rightarrow>\<^sub>e\<^sub>m\<^sub>b
                 args (emb_step_at ?p ?d ?t) ! i;
                 !!j. [| j < num_args ?t; i ~= j |]
                      ==> args ?t ! j = args (emb_step_at ?p ?d ?t) ! j |]
              ==> ?thesis |]
      ==> ?thesis",
     template_implication
      ([template_negation
         (
            template_predicate
             (
                template_app
                 (template_app (template_hole 15, t_empty), template_var 3)
                )
            ),
        template_predicate
         (
            template_app
             (template_app (template_hole 12, template_var 2),
              template_app
               (template_app (template_hole 11, template_var 3),
                template_app
                 (template_app (template_hole 10, template_var 1),
                  template_hole 9)))
            ),
        template_predicate (template_app (template_hole 8, t_empty))],
       template_predicate (template_var 0))),
    ("Embeddings.emb_step_at_induct",
     "[| !!t s. ?P [] dir.Left (App t s); !!t s. ?P [] dir.Right (App t s);
         !!p dir t s. ?P p dir t ==> ?P (dir.Left # p) dir (App t s);
         !!p dir t s. ?P p dir s ==> ?P (dir.Right # p) dir (App t s);
         !!uu_ uv_ h. ?P uu_ uv_ (Hd h) |]
      ==> ?P ?a0.0 ?a1.0 ?a2.0",
     template_implication
      ([template_predicate (template_app (template_hole 10, t_empty)),
        template_predicate (template_app (template_hole 10, t_empty)),
        template_predicate (template_app (template_hole 4, t_empty)),
        template_predicate (template_app (template_hole 4, t_empty)),
        template_predicate (template_app (template_hole 4, t_empty))],
       template_predicate
        (
           template_app
            (template_app
              (template_app (template_var 3, template_var 2),
               template_var 1),
             template_var 0)
           ))),
    ("Embeddings.emb_only_below_vars",
     "[| subst ?\<rho> ?s \<unrhd>\<^sub>e\<^sub>m\<^sub>b ?u;
         ?s \<unrhd>\<^sub>e\<^sub>m\<^sub>b ?w; is_Sym (head ?w);
         subst ?\<rho> ?w \<unrhd>\<^sub>e\<^sub>m\<^sub>b ?u;
         ALL w'.
            ?w \<rightarrow>\<^sub>e\<^sub>m\<^sub>b w' -->
            ~ subst ?\<rho> w' \<unrhd>\<^sub>e\<^sub>m\<^sub>b ?u;
         !!ws. [| ws ~= []; hd ws = subst ?\<rho> ?w; last ws = ?u;
                  ALL i.
                     Suc i < length ws -->
                     (EX p d.
                         emb_step_at p d (ws ! i) = ws ! Suc i &
                         ~ list_all (%x. x = dir.Left) p);
                  ALL i<length ws.
                     head (ws ! i) = head ?w &
                     num_args (ws ! i) = num_args ?w;
                  ALL i<length ws.
                     ALL k<num_args ?w.
                        args (subst ?\<rho> ?w) !
                        k \<unrhd>\<^sub>e\<^sub>m\<^sub>b
                        args (ws ! i) ! k |]
               ==> ?thesis |]
      ==> ?thesis",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_hole 28,
                template_app
                 (template_app (template_hole 27, template_var 4),
                  template_var 3)),
              template_var 2)
            ),
        template_predicate
         (
            template_app
             (template_app (template_hole 28, template_var 3),
              template_var 1)
            ),
        template_negation
         (
            template_predicate
             (
                template_app
                 (template_hole 25,
                  template_app (template_hole 24, template_var 1))
                )
            ),
        template_predicate
         (
            template_app
             (template_app
               (template_hole 28,
                template_app
                 (template_app (template_hole 27, template_var 4),
                  template_var 1)),
              template_var 2)
            ),
        template_predicate (template_app (template_hole 23, t_empty)),
        template_predicate (template_app (template_hole 20, t_empty))],
       template_predicate (template_var 0)))]:
   (string * thm * template) list
### theory "Draft.EmbeddingsMoreTemplates"
### 0.473s elapsed time, 0.677s cpu time, 0.071s GC time
val it = (): unit
