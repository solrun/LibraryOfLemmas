Loading theory "HOL-Cardinals.Order_Union" (required by "Draft.Lambda_Free_EPOMoreTemplates" via "Draft.Lambda_Free_EPO" via "Draft.Chop" via "Draft.Embeddings" via "Lambda_Free_RPOs.Extension_Orders" via "HOL-Cardinals.Wellorder_Extension")
Loading theory "HOL-Library.Infinite_Set" (required by "Draft.Lambda_Free_EPOMoreTemplates" via "Draft.Lambda_Free_EPO" via "Draft.Chop" via "Draft.Embeddings" via "Lambda_Free_RPOs.Lambda_Free_Term" via "Lambda_Free_RPOs.Lambda_Free_Util" via "HOL-Library.Extended_Nat" via "HOL-Library.Order_Continuity" via "HOL-Library.Countable_Complete_Lattices" via "HOL-Library.Countable_Set")
Loading theory "HOL-Library.Cancellation" (required by "Draft.Lambda_Free_EPOMoreTemplates" via "Draft.Lambda_Free_EPO" via "Draft.Chop" via "Draft.Embeddings" via "Lambda_Free_RPOs.Lambda_Free_Term" via "Lambda_Free_RPOs.Lambda_Free_Util" via "HOL-Library.Multiset_Order" via "HOL-Library.Multiset")
Loading theory "HOL-Library.Function_Algebras" (required by "Draft.Lambda_Free_EPOMoreTemplates" via "Draft.ExtrEqs" via "HOL-Library.BigO")
instantiation
  fun :: (type, plus) plus
  plus_fun == plus :: ('a => 'b) => ('a => 'b) => 'a => 'b
instantiation
  fun :: (type, zero) zero
  zero_fun == zero_class.zero :: 'a => 'b
instantiation
  fun :: (type, times) times
  times_fun == times :: ('a => 'b) => ('a => 'b) => 'a => 'b
instantiation
  fun :: (type, one) one
  one_fun == one_class.one :: 'a => 'b
### theory "HOL-Library.Function_Algebras"
### 0.120s elapsed time, 0.499s cpu time, 0.052s GC time
Loading theory "HOL-Library.Nat_Bijection" (required by "Draft.Lambda_Free_EPOMoreTemplates" via "Draft.ExtrEqs" via "HOL-Library.Stream")
### theory "HOL-Cardinals.Order_Union"
### 0.123s elapsed time, 0.509s cpu time, 0.052s GC time
Loading theory "HOL-Cardinals.Wellorder_Extension" (required by "Draft.Lambda_Free_EPOMoreTemplates" via "Draft.Lambda_Free_EPO" via "Draft.Chop" via "Draft.Embeddings" via "Lambda_Free_RPOs.Extension_Orders")
consts
  enumerate :: "'a set => nat => 'a"
### theory "HOL-Cardinals.Wellorder_Extension"
### 0.063s elapsed time, 0.255s cpu time, 0.000s GC time
Loading theory "HOL-Library.Old_Datatype" (required by "Draft.Lambda_Free_EPOMoreTemplates" via "Draft.Lambda_Free_EPO" via "Draft.Chop" via "Draft.Embeddings" via "Lambda_Free_RPOs.Lambda_Free_Term" via "Lambda_Free_RPOs.Lambda_Free_Util" via "HOL-Library.Extended_Nat" via "HOL-Library.Countable")
Found termination order: "(%p. size (snd p)) <*mlex*> {}"
### theory "HOL-Library.Infinite_Set"
### 0.298s elapsed time, 1.201s cpu time, 0.140s GC time
Loading theory "HOL-Library.Set_Algebras" (required by "Draft.Lambda_Free_EPOMoreTemplates" via "Draft.ExtrEqs" via "HOL-Library.BigO")
Found termination order: "size_list size <*mlex*> {}"
instantiation
  set :: (plus) plus
  plus_set == plus :: 'a set => 'a set => 'a set
signature CANCEL = sig val proc: Proof.context -> cterm -> thm option end
functor Cancel_Fun (Data: CANCEL_NUMERALS_DATA): CANCEL
instantiation
  set :: (times) times
  times_set == times :: 'a set => 'a set => 'a set
instantiation
  set :: (zero) zero
  zero_set == zero_class.zero :: 'a set
instantiation
  set :: (one) one
  one_set == one_class.one :: 'a set
signature CANCEL_DATA =
  sig
    val dest_coeff: term -> int * term
    val dest_sum: term -> term list
    val find_first_coeff: term -> term list -> int * term list
    val mk_coeff: int * term -> term
    val mk_sum: typ -> term list -> term
    val norm_ss1: simpset
    val norm_ss2: simpset
    val norm_tac: Proof.context -> tactic
    val numeral_simp_tac: Proof.context -> tactic
    val prove_conv:
       tactic list -> Proof.context -> thm list -> term * term -> thm option
    val simplify_meta_eq: Proof.context -> thm -> thm
    val trans_tac: Proof.context -> thm option -> tactic
  end
structure Cancel_Data: CANCEL_DATA
### theory "HOL-Library.Nat_Bijection"
### 0.327s elapsed time, 1.286s cpu time, 0.149s GC time
Loading theory "HOL-Library.Stream" (required by "Draft.Lambda_Free_EPOMoreTemplates" via "Draft.ExtrEqs")
signature CANCEL_SIMPROCS =
  sig
    val diff_cancel: Proof.context -> cterm -> thm option
    val eq_cancel: Proof.context -> cterm -> thm option
    val less_cancel: Proof.context -> cterm -> thm option
    val less_eq_cancel: Proof.context -> cterm -> thm option
  end
structure Cancel_Simprocs: CANCEL_SIMPROCS
### theory "HOL-Library.Cancellation"
### 0.460s elapsed time, 1.843s cpu time, 0.200s GC time
Loading theory "HOL-Library.Multiset" (required by "Draft.Lambda_Free_EPOMoreTemplates" via "Draft.Lambda_Free_EPO" via "Draft.Chop" via "Draft.Embeddings" via "Lambda_Free_RPOs.Lambda_Free_Term" via "Lambda_Free_RPOs.Lambda_Free_Util" via "HOL-Library.Multiset_Order")
### theory "HOL-Library.Set_Algebras"
### 0.215s elapsed time, 0.853s cpu time, 0.061s GC time
Loading theory "HOL-Library.Sublist" (required by "Draft.Lambda_Free_EPOMoreTemplates" via "Draft.Lambda_Free_EPO" via "Nested_Multisets_Ordinals.Multiset_More")
instantiation
  multiset :: (type) cancel_comm_monoid_add
  zero_multiset == zero_class.zero :: 'a multiset
  minus_multiset == minus :: 'a multiset => 'a multiset => 'a multiset
  plus_multiset == plus :: 'a multiset => 'a multiset => 'a multiset
signature OLD_DATATYPE =
  sig
    val check_specs: spec list -> theory -> spec list * Proof.context
    type config = {quiet: bool, strict: bool}
    val default_config: config
    type descr =
       (int * (string * dtyp list * (string * dtyp list) list)) list
    val distinct_lemma: thm
    datatype dtyp
    = DtRec of int | DtTFree of string * sort | DtType of string * dtyp list
    type info =
       {case_cong: thm,
        case_cong_weak: thm,
        case_name: string,
        case_rewrites: thm list,
        descr: descr,
        distinct: thm list,
        exhaust: thm,
        index: int,
        induct: thm,
        inducts: thm list,
        inject: thm list,
        nchotomy: thm,
        rec_names: string list,
        rec_rewrites: thm list, split: thm, split_asm: thm}
    val read_specs: spec_cmd list -> theory -> spec list * Proof.context
    type spec =
       (binding * (string * sort) list * mixfix) *
       (binding * typ list * mixfix) list
    type spec_cmd =
       (binding * (string * string option) list * mixfix) *
       (binding * string list * mixfix) list
  end
structure Old_Datatype: OLD_DATATYPE
### theory "HOL-Library.Old_Datatype"
### 0.443s elapsed time, 1.729s cpu time, 0.249s GC time
Loading theory "HOL-Library.Tree" (required by "Draft.Lambda_Free_EPOMoreTemplates" via "Draft.ExtrEqs" via "Draft.Templates")
consts
  prefixes :: "'a list => 'a list list"
consts
  shift :: "'a list => 'a stream => 'a stream"
Proofs for coinductive predicate(s) "streamsp"
  Proving monotonicity ...
consts
  snth :: "'a stream => nat => 'a"
Found termination order: "(%p. length (snd p)) <*mlex*> {}"
consts
  stake :: "nat => 'a stream => 'a list"
consts
  sdrop :: "nat => 'a stream => 'a stream"
consts
  sfilter :: "('a => bool) => 'a stream => 'a stream"
consts
  cycle :: "'a list => 'a stream"
consts
  siterate :: "('a => 'a) => 'a => 'a stream"
### Partially applied constant "Multiset.inter_mset" on left hand side of equation, in theorem:
### semilattice_inf.Inf_fin (\<inter>#) (set (?x # ?xs)) ==
### fold (\<inter>#) ?xs ?x
consts
  left :: "'a tree => 'a tree"
consts
  right :: "'a tree => 'a tree"
consts
  flat :: "'a list stream => 'a stream"
### Partially applied constant "Multiset.union_mset" on left hand side of equation, in theorem:
### semilattice_sup.Sup_fin (\<union>#) (set (?x # ?xs)) ==
### fold (\<union>#) ?xs ?x
Found termination order: "size <*mlex*> {}"
consts
  sinterleave :: "'a stream => 'a stream => 'a stream"
consts
  szip :: "'a stream => 'b stream => ('a * 'b) stream"
consts
  suffixes :: "'a list => 'a list list"
consts
  smap2 :: "('a => 'b => 'c) => 'a stream => 'b stream => 'c stream"
Found termination order: "size <*mlex*> {}"
Proofs for inductive predicate(s) "list_emb"
  Proving monotonicity ...
### theory "HOL-Library.Stream"
### 1.105s elapsed time, 4.215s cpu time, 0.882s GC time
Loading theory "HOL-Library.Countable" (required by "Draft.Lambda_Free_EPOMoreTemplates" via "Draft.Lambda_Free_EPO" via "Draft.Chop" via "Draft.Embeddings" via "Lambda_Free_RPOs.Lambda_Free_Term" via "Lambda_Free_RPOs.Lambda_Free_Util" via "HOL-Library.Extended_Nat")
Found termination order: "size <*mlex*> {}"
class height = type +
  fixes height :: "'a => nat"
instantiation
  tree :: (type) height
  height_tree == height :: 'a tree => nat
signature MULTISET_SIMPROCS =
  sig
    val subset_cancel_msets: Proof.context -> cterm -> thm option
    val subseteq_cancel_msets: Proof.context -> cterm -> thm option
  end
structure Multiset_Simprocs: MULTISET_SIMPROCS
Found termination order: "size <*mlex*> {}"
instantiation
  multiset :: (type) Inf
  Inf_multiset == Inf :: 'a multiset set => 'a multiset
instantiation
  multiset :: (type) Sup
  Sup_multiset == Sup :: 'a multiset set => 'a multiset
Found termination order: "size <*mlex*> {}"
Found termination order: "size <*mlex*> {}"
instantiation
  multiset :: (type) size
  size_multiset == size :: 'a multiset => nat
Found termination order: "size <*mlex*> {}"
### Additional type variable(s) in locale specification "countable": 'a
locale comp_fun_commute
  fixes f :: "'a => 'b => 'b"
  assumes "comp_fun_commute f"
Found termination order: "size <*mlex*> {}"
class countable = type +
  assumes "ex_inj": "EX to_nat. inj to_nat"
Found termination order: "size <*mlex*> {}"
consts
  sublists :: "'a list => 'a list list"
consts
  mset :: "'a list => 'a multiset"
Found termination order: "size <*mlex*> {}"
### theory "HOL-Library.Sublist"
### 1.666s elapsed time, 6.409s cpu time, 1.182s GC time
Loading theory "HOL-Library.BigO" (required by "Draft.Lambda_Free_EPOMoreTemplates" via "Draft.ExtrEqs")
Found termination order: "(%p. size (fst p)) <*mlex*> {}"
Proofs for inductive predicate(s) "finite_item"
  Proving monotonicity ...
class linorder = order +
  assumes "linear": "!!x y. x <= y | y <= x"
Found termination order: "size <*mlex*> {}"
locale comm_monoid_mset
  fixes f :: "'a => 'a => 'a"  (infixl \<open>\<^bold>*\<close> 70)
    and z :: "'a"  (\<open>\<^bold>1\<close>)
  assumes "comm_monoid_mset (\<^bold>*) \<^bold>1"
val old_countable_datatype_tac = fn: Proof.context -> int -> tactic
Found termination order: "(%p. size (snd p)) <*mlex*> {}"
### ML warning (line 93 of "~~/src/HOL/Tools/BNF/bnf_lfp_countable.ML"):
### Pattern is not exhaustive.
### ML warning (line 139 of "~~/src/HOL/Tools/BNF/bnf_lfp_countable.ML"):
### Pattern is not exhaustive.
### ML warning (line 143 of "~~/src/HOL/Tools/BNF/bnf_lfp_countable.ML"):
### Matches are not exhaustive.
### ML warning (line 145 of "~~/src/HOL/Tools/BNF/bnf_lfp_countable.ML"):
### Matches are not exhaustive.
### ML warning (line 156 of "~~/src/HOL/Tools/BNF/bnf_lfp_countable.ML"):
### Pattern is not exhaustive.
signature BNF_LFP_COUNTABLE =
  sig
    val countable_datatype_tac: Proof.context -> tactic
    val derive_encode_injectives_thms:
       Proof.context -> string list -> thm list
  end
structure BNF_LFP_Countable: BNF_LFP_COUNTABLE
val countable_datatype_tac = fn: Proof.context -> thm -> thm Seq.seq
val countable_tac = fn: Proof.context -> int -> tactic
class comm_monoid_add = ab_semigroup_add + monoid_add +
  assumes "add_0": "!!a. (0::'a) + a = a"
class comm_monoid_add = ab_semigroup_add + monoid_add +
  assumes "add_0": "!!a. (0::'a) + a = a"
class canonically_ordered_monoid_add = ordered_comm_monoid_add +
  assumes "le_iff_add": "!!a b. (a <= b) = (EX c. b = a + c)"
Found termination order: "size <*mlex*> {}"
### theory "HOL-Library.Countable"
### 1.229s elapsed time, 4.809s cpu time, 0.564s GC time
Loading theory "HOL-Library.Countable_Set" (required by "Draft.Lambda_Free_EPOMoreTemplates" via "Draft.Lambda_Free_EPO" via "Draft.Chop" via "Draft.Embeddings" via "Lambda_Free_RPOs.Lambda_Free_Term" via "Lambda_Free_RPOs.Lambda_Free_Util" via "HOL-Library.Extended_Nat" via "HOL-Library.Order_Continuity" via "HOL-Library.Countable_Complete_Lattices")
class comm_monoid_mult = ab_semigroup_mult + monoid_mult + dvd +
  assumes "mult_1": "!!a. (1::'a) * a = a"
### theory "HOL-Library.Tree"
### 2.282s elapsed time, 8.818s cpu time, 1.415s GC time
Loading theory "Draft.Templates" (required by "Draft.Lambda_Free_EPOMoreTemplates" via "Draft.ExtrEqs")
datatype template_term
=
     t_empty
   | template_app of template_term * template_term
   | template_hole of int
   | template_var of int
datatype sign
= equals | greater_equals | greater_than | less_equals | less_than
datatype template
=
     template_bimplication of template * template
   | template_dunno
   | template_equation of template_term * template_term
   | template_implication of template list * template
   | template_inequation of sign * template_term * template_term
   | template_negation of template
   | template_predicate of template_term
constructor t_empty: template_term
constructor template_app: template_term * template_term -> template_term
constructor template_hole: int -> template_term
constructor template_var: int -> template_term
constructor equals: sign
constructor greater_equals: sign
constructor greater_than: sign
constructor less_equals: sign
constructor less_than: sign
constructor template_bimplication: template * template -> template
constructor template_dunno: template
constructor template_equation: template_term * template_term -> template
constructor template_implication: template list * template -> template
constructor template_inequation:
   sign * template_term * template_term -> template
constructor template_negation: template -> template
constructor template_predicate: template_term -> template
val vfs = fn: term -> (indexname * typ) list * (string * typ) list
val indexOf = fn: ''a list -> ''a -> int -> int
val has_eq = fn: term -> bool
val term2template = fn:
   (indexname * typ) list -> (string * typ) list -> term -> template_term
val lemma2predicate = fn: term -> term -> template
val makeTemplatewithContext = fn: term -> term -> template
val lemma2template = fn: term -> template
val thm2template = fn: thm -> template
val tterm2string = fn: template_term -> string
val template2string = fn: template -> string
val t = "height ?t <= size ?t": thm
val th =
   Const ("HOL.Trueprop", "bool => prop") $
     (Const ("Orderings.ord_class.less_eq", "nat => nat => bool") $
       (Const ("Tree.height_class.height", "?'a tree => nat") $
         Var (("t", 0), "?'a tree")) $
       (Const ("Nat.size_class.size", "?'a tree => nat") $
         Var (("t", 0), "?'a tree"))):
   term
### theory "Draft.Templates"
### 0.067s elapsed time, 0.269s cpu time, 0.000s GC time
### theory "HOL-Library.BigO"
### 0.867s elapsed time, 3.323s cpu time, 0.385s GC time
Loading theory "Draft.ExtrEqs" (required by "Draft.Lambda_Free_EPOMoreTemplates")
locale comm_monoid_set
  fixes f :: "'a => 'a => 'a"  (infixl \<open>\<^bold>*\<close> 70)
    and z :: "'a"  (\<open>\<^bold>1\<close>)
  assumes "comm_monoid_set (\<^bold>*) \<^bold>1"
### theory "HOL-Library.Countable_Set"
### 0.456s elapsed time, 1.558s cpu time, 0.176s GC time
Loading theory "HOL-Library.Countable_Complete_Lattices" (required by "Draft.Lambda_Free_EPOMoreTemplates" via "Draft.Lambda_Free_EPO" via "Draft.Chop" via "Draft.Embeddings" via "Lambda_Free_RPOs.Lambda_Free_Term" via "Lambda_Free_RPOs.Lambda_Free_Util" via "HOL-Library.Extended_Nat" via "HOL-Library.Order_Continuity")
class linorder = order +
  assumes "linear": "!!x y. x <= y | y <= x"
instantiation
  multiset :: (preorder) order
  less_eq_multiset == less_eq :: 'a multiset => 'a multiset => bool
  less_multiset == less :: 'a multiset => 'a multiset => bool
class countable_complete_lattice = Inf + Sup + lattice + bot + top +
  assumes "ccInf_lower": "!!A x. [| countable A; x : A |] ==> Inf A <= x"
  assumes
    "ccInf_greatest":
      "!!A z. [| countable A; !!x. x : A ==> z <= x |] ==> z <= Inf A"
  assumes "ccSup_upper": "!!A x. [| countable A; x : A |] ==> x <= Sup A"
  assumes
    "ccSup_least":
      "!!A z. [| countable A; !!x. x : A ==> x <= z |] ==> Sup A <= z"
  assumes "ccInf_empty": "Inf {} = top"
  assumes "ccSup_empty": "Sup {} = bot"
val eqpattern =
   Pattern
    (
       Const ("HOL.Trueprop", "bool => prop") $
         (Const ("HOL.eq", "?'a => ?'a => bool") $
           Var (("_dummy_", 1), "?'a") $ Var (("_dummy_", 2), "?'a"))
       ):
   term Find_Theorems.criterion
val badeqpattern = Pattern (Const ("Pure.eq", "?'a => ?'a => prop")):
   term Find_Theorems.criterion
val undefpattern =
   Pattern
    (
       Const ("HOL.Trueprop", "bool => prop") $
         (Const ("HOL.eq", "?'a => ?'a => bool") $
           Var (("_dummy_", 1), "?'a") $ Const ("HOL.undefined", "?'a"))
       ):
   term Find_Theorems.criterion
val thmpattern =
   Pattern
    (Const ("HOL.Trueprop", "bool => prop") $ Var (("_dummy_", 1), "bool")):
   term Find_Theorems.criterion
val badnames =
   ["*nitpick*", "*Nitpick*", "*full_exhaustive*", "*_def*", "Enum.finite*",
    "*Quickcheck*", "ATP*", "*Nunchaku*", "*Code*", "*BNF*", "*SMT*",
    "*.*.*"]:
   string list
val unwanted_names =
   [(false, Name "*nitpick*"), (false, Name "*Nitpick*"),
    (false, Name "*full_exhaustive*"), (false, Name "*_def*"),
    (false, Name "Enum.finite*"), (false, Name "*Quickcheck*"),
    (false, Name "ATP*"), (false, Name "*Nunchaku*"),
    (false, Name "*Code*"), (false, Name "*BNF*"), (false, Name "*SMT*"),
    (false, Name "*.*.*")]:
   (bool * term Find_Theorems.criterion) list
val has_vars = fn: term -> bool
val get_all_eqs = fn: string -> Proof.context -> (string * thm) list
val get_all_thms = fn: string -> Proof.context -> (string * thm) list
val get_noneq_thms = fn: string -> Proof.context -> (string * thm) list
val template_eqs = fn:
   string -> Proof.context -> (string * thm * template) list
val template_thms = fn:
   string -> Proof.context -> (string * thm * template) list
### theory "Draft.ExtrEqs"
### 0.628s elapsed time, 1.899s cpu time, 0.173s GC time
instantiation
  multiset :: (preorder) ordered_ab_semigroup_add
Proofs for inductive predicate(s) "pw_leq"
  Proving monotonicity ...
Found termination order: "(%p. length (fst p)) <*mlex*> {}"
instantiation
  multiset :: (equal) equal
  equal_multiset == equal_class.equal :: 'a multiset => 'a multiset => bool
instantiation
  multiset :: (random) random
  random_multiset == random_class.random ::
    natural
    => natural * natural
       => ('a multiset * (unit => term)) * natural * natural
instantiation
  multiset :: (full_exhaustive) full_exhaustive
  full_exhaustive_multiset == full_exhaustive_class.full_exhaustive ::
    ('a multiset * (unit => term) => (bool * term list) option)
    => natural => (bool * term list) option
Proofs for inductive predicate(s) "pred_mset"
  Proving monotonicity ...
Proofs for inductive predicate(s) "rel_mset'"
  Proving monotonicity ...
### theory "HOL-Library.Multiset"
### 3.667s elapsed time, 12.797s cpu time, 1.859s GC time
Loading theory "HOL-Library.Multiset_Order" (required by "Draft.Lambda_Free_EPOMoreTemplates" via "Draft.Lambda_Free_EPO" via "Draft.Chop" via "Draft.Embeddings" via "Lambda_Free_RPOs.Lambda_Free_Term" via "Lambda_Free_RPOs.Lambda_Free_Util")
class preorder = ord +
  assumes "less_le_not_le": "!!x y. (x < y) = (x <= y & ~ y <= x)"
    and "order_refl": "!!x. x <= x"
    and "order_trans": "!!x y z. [| x <= y; y <= z |] ==> x <= z"
instantiation
  multiset :: (preorder) ordered_ab_semigroup_monoid_add_imp_le
instantiation
  multiset :: (wellorder) wellorder
instantiation
  multiset :: (preorder) order_bot
  bot_multiset == bot :: 'a multiset
instantiation
  multiset :: (linorder) distrib_lattice
  inf_multiset == inf :: 'a multiset => 'a multiset => 'a multiset
  sup_multiset == sup :: 'a multiset => 'a multiset => 'a multiset
### theory "HOL-Library.Multiset_Order"
### 0.206s elapsed time, 0.508s cpu time, 0.070s GC time
Loading theory "Nested_Multisets_Ordinals.Multiset_More" (required by "Draft.Lambda_Free_EPOMoreTemplates" via "Draft.Lambda_Free_EPO")
class countable_complete_distrib_lattice = countable_complete_lattice +
  assumes
    "sup_ccInf": "!!B a. countable B ==> sup a (Inf B) = Inf (sup a ` B)"
  assumes
    "inf_ccSup": "!!B a. countable B ==> inf a (Sup B) = Sup (inf a ` B)"
### theory "Nested_Multisets_Ordinals.Multiset_More"
### 0.557s elapsed time, 1.237s cpu time, 0.146s GC time
### theory "HOL-Library.Countable_Complete_Lattices"
### 1.812s elapsed time, 4.250s cpu time, 0.454s GC time
Loading theory "HOL-Library.Order_Continuity" (required by "Draft.Lambda_Free_EPOMoreTemplates" via "Draft.Lambda_Free_EPO" via "Draft.Chop" via "Draft.Embeddings" via "Lambda_Free_RPOs.Lambda_Free_Term" via "Lambda_Free_RPOs.Lambda_Free_Util" via "HOL-Library.Extended_Nat")
### theory "HOL-Library.Order_Continuity"
### 0.406s elapsed time, 0.475s cpu time, 0.074s GC time
Loading theory "HOL-Library.Extended_Nat" (required by "Draft.Lambda_Free_EPOMoreTemplates" via "Draft.Lambda_Free_EPO" via "Draft.Chop" via "Draft.Embeddings" via "Lambda_Free_RPOs.Lambda_Free_Term" via "Lambda_Free_RPOs.Lambda_Free_Util")
class infinity = type +
  fixes infinity :: "'a"
instantiation
  enat :: infinity
  infinity_enat == infinity :: enat
Proofs for inductive predicate(s) "rec_set_enat"
### No equation for constructor "Extended_Nat.infinity_class.infinity"
### in definition of function "the_enat"
consts
  the_enat :: "enat => nat"
instantiation
  enat :: zero_neq_one
  one_enat == one_class.one :: enat
  zero_enat == zero_class.zero :: enat
instantiation
  enat :: comm_monoid_add
  plus_enat == plus :: enat => enat => enat
instantiation
  enat :: {comm_semiring_1,semiring_no_zero_divisors}
  times_enat == times :: enat => enat => enat
instantiation
  enat :: minus
  minus_enat == minus :: enat => enat => enat
instantiation
  enat :: linordered_ab_semigroup_add
  less_eq_enat == less_eq :: enat => enat => bool
  less_enat == less :: enat => enat => bool
instantiation
  enat :: {order_bot,order_top}
  top_enat == top :: enat
  bot_enat == bot :: enat
structure Cancel_Enat_Common:
  sig
    val dest_sum: term -> term list
    val dest_summing: term * term list -> term list
    val find_first: term -> term list -> term list
    val find_first_t: term list -> term -> term list -> term list
    val mk_eq: term * term -> term
    val mk_sum: typ -> term list -> term
    val norm_ss: simpset
    val norm_tac: Proof.context -> tactic
    val simplify_meta_eq: Proof.context -> thm -> thm -> thm
    val trans_tac: Proof.context -> thm option -> tactic
  end
structure Eq_Enat_Cancel:
  sig val proc: Proof.context -> term -> thm option end
structure Le_Enat_Cancel:
  sig val proc: Proof.context -> term -> thm option end
structure Less_Enat_Cancel:
  sig val proc: Proof.context -> term -> thm option end
instantiation
  enat :: complete_lattice
  Inf_enat == Inf :: enat set => enat
  Sup_enat == Sup :: enat set => enat
  sup_enat == sup :: enat => enat => enat
  inf_enat == inf :: enat => enat => enat
### theory "HOL-Library.Extended_Nat"
### 0.467s elapsed time, 0.493s cpu time, 0.037s GC time
Loading theory "Lambda_Free_RPOs.Lambda_Free_Util" (required by "Draft.Lambda_Free_EPOMoreTemplates" via "Draft.Lambda_Free_EPO" via "Draft.Chop" via "Draft.Embeddings" via "Lambda_Free_RPOs.Lambda_Free_Term")
### theory "Lambda_Free_RPOs.Lambda_Free_Util"
### 0.772s elapsed time, 1.703s cpu time, 1.284s GC time
Loading theory "Lambda_Free_RPOs.Infinite_Chain" (required by "Draft.Lambda_Free_EPOMoreTemplates" via "Draft.Lambda_Free_EPO" via "Draft.Chop" via "Draft.Embeddings" via "Lambda_Free_RPOs.Extension_Orders")
Loading theory "Lambda_Free_RPOs.Lambda_Free_Term" (required by "Draft.Lambda_Free_EPOMoreTemplates" via "Draft.Lambda_Free_EPO" via "Draft.Chop" via "Draft.Embeddings")
locale gt_sym
  fixes gt_sym :: "'s => 's => bool"  (infix \<open>>\<^sub>s\<close> 50)
  assumes "gt_sym (>\<^sub>s)"
consts
  worst_chain :: "nat => 'a"
### theory "Lambda_Free_RPOs.Infinite_Chain"
### 0.072s elapsed time, 0.142s cpu time, 0.000s GC time
Loading theory "Lambda_Free_RPOs.Extension_Orders" (required by "Draft.Lambda_Free_EPOMoreTemplates" via "Draft.Lambda_Free_EPO" via "Draft.Chop" via "Draft.Embeddings")
locale ext
  fixes ext :: "('a => 'a => bool) => 'a list => 'a list => bool"
  assumes "ext ext"
locale ext_irrefl
  fixes ext :: "('a => 'a => bool) => 'a list => 'a list => bool"
  assumes "ext_irrefl ext"
locale ext_trans
  fixes ext :: "('a => 'a => bool) => 'a list => 'a list => bool"
  assumes "ext_trans ext"
locale ext_irrefl_before_trans
  fixes ext :: "('a => 'a => bool) => 'a list => 'a list => bool"
  assumes "ext_irrefl_before_trans ext"
locale ext_trans_before_irrefl
  fixes ext :: "('a => 'a => bool) => 'a list => 'a list => bool"
  assumes "ext_trans_before_irrefl ext"
locale ext_irrefl_trans_strong
  fixes ext :: "('a => 'a => bool) => 'a list => 'a list => bool"
  assumes "ext_irrefl_trans_strong ext"
locale ext_snoc
  fixes ext :: "('a => 'a => bool) => 'a list => 'a list => bool"
  assumes "ext_snoc ext"
locale ext_compat_cons
  fixes ext :: "('a => 'a => bool) => 'a list => 'a list => bool"
  assumes "ext_compat_cons ext"
locale ext_compat_snoc
  fixes ext :: "('a => 'a => bool) => 'a list => 'a list => bool"
  assumes "ext_compat_snoc ext"
locale ext_compat_list
  fixes ext :: "('a => 'a => bool) => 'a list => 'a list => bool"
  assumes "ext_compat_list ext"
locale ext_singleton
  fixes ext :: "('a => 'a => bool) => 'a list => 'a list => bool"
  assumes "ext_singleton ext"
locale ext_compat_list_strong
  fixes ext :: "('a => 'a => bool) => 'a list => 'a list => bool"
  assumes "ext_compat_list_strong ext"
locale ext_total
  fixes ext :: "('a => 'a => bool) => 'a list => 'a list => bool"
  assumes "ext_total ext"
locale ext_wf
  fixes ext :: "('a => 'a => bool) => 'a list => 'a list => bool"
  assumes "ext_wf ext"
locale ext_hd_or_tl
  fixes ext :: "('a => 'a => bool) => 'a list => 'a list => bool"
  assumes "ext_hd_or_tl ext"
locale ext_wf_bounded
  fixes ext :: "('a => 'a => bool) => 'a list => 'a list => bool"
  assumes "ext_wf_bounded ext"
Proofs for inductive predicate(s) "lexext"
  Proving monotonicity ...
overloading
  head0 \<equiv> head0 :: ('s, 'v) tm => ('s, 'v) hd
consts
  head0 :: "('s, 'v) tm => ('s, 'v) hd"
Found termination order: "size <*mlex*> {}"
locale ext_cwiseext
  fixes ext :: "('a => 'a => bool) => 'a list => 'a list => bool"
  assumes "ext_cwiseext ext"
### theory "Lambda_Free_RPOs.Extension_Orders"
### 1.178s elapsed time, 2.498s cpu time, 0.344s GC time
consts
  apps :: "('s, 'v) tm => ('s, 'v) tm list => ('s, 'v) tm"
consts
  vars_mset :: "('s, 'v) tm => 'v multiset"
consts
  hsize :: "('s, 'v) tm => nat"
consts
  subst :: "('v => ('s, 'v) tm) => ('s, 'v) tm => ('s, 'v) tm"
Proofs for inductive predicate(s) "sub"
  Proving monotonicity ...
locale arity
  fixes arity_sym :: "'s => enat"
    and arity_var :: "'v => enat"
consts
  arity_hd :: "('s, 'v) hd => enat"
Proofs for inductive predicate(s) "wary"
  Proving monotonicity ...
Proofs for inductive predicate(s) "wary_fo"
  Proving monotonicity ...
locale ground_heads
  fixes gt_sym :: "'s => 's => bool"  (infix \<open>>\<^sub>s\<close> 50)
    and arity_sym :: "'s => enat"
    and arity_var :: "'v => enat"
    and ground_heads_var :: "'v => 's set"
  assumes "ground_heads (>\<^sub>s) arity_sym arity_var ground_heads_var"
consts
  ground_heads :: "('s, 'v) hd => 's set"
### theory "Lambda_Free_RPOs.Lambda_Free_Term"
### 2.098s elapsed time, 4.610s cpu time, 1.857s GC time
Loading theory "Draft.Embeddings" (required by "Draft.Lambda_Free_EPOMoreTemplates" via "Draft.Lambda_Free_EPO" via "Draft.Chop")
Found termination order: "(%p. size_list size (snd p)) <*mlex*> {}"
Found termination order: "(%p. size (snd (snd p))) <*mlex*> {}"
Proofs for inductive predicate(s) "emb_step"
  Proving monotonicity ...
Found termination order:
  "(%p. size_list (%p. size (snd p)) (fst p)) <*mlex*> {}"
Proofs for inductive predicate(s) "emb"
  Proving monotonicity ...
### theory "Draft.Embeddings"
### 0.873s elapsed time, 0.980s cpu time, 0.127s GC time
Loading theory "Draft.Chop" (required by "Draft.Lambda_Free_EPOMoreTemplates" via "Draft.Lambda_Free_EPO")
### theory "Draft.Chop"
### 0.097s elapsed time, 0.097s cpu time, 0.000s GC time
Loading theory "Draft.Lambda_Free_EPO" (required by "Draft.Lambda_Free_EPOMoreTemplates")
locale epo
  fixes ground_heads_var :: "'v => 's set"
    and gt_sym :: "'s => 's => bool"  (infix \<open>>\<^sub>s\<close> 50)
    and arity_sym :: "'s => enat"
    and arity_var :: "'v => enat"
    and
    extf ::
      "'s => (('s, 'v) tm => ('s, 'v) tm => bool)
             => ('s, 'v) tm list => ('s, 'v) tm list => bool"
  assumes "epo ground_heads_var (>\<^sub>s) arity_sym arity_var extf"
Proofs for inductive predicate(s) "gt"
  Proving monotonicity ...
Proofs for inductive predicate(s) "gt_chop"
  Proving monotonicity ...
Proofs for inductive predicate(s) "gt_diff"
  Proving monotonicity ...
Proofs for inductive predicate(s) "gt_same"
  Proving monotonicity ...
[| ?X : ?C; ?A : ?X |] ==> ?A : \<Union> ?C
?P ?a ==> ?a : {x. ?P x}
### theory "Draft.Lambda_Free_EPO"
### 0.953s elapsed time, 2.130s cpu time, 1.624s GC time
Loading theory "Draft.Lambda_Free_EPOMoreTemplates"
val templateLemmas = []: (string * thm * template) list
### theory "Draft.Lambda_Free_EPOMoreTemplates"
### 0.522s elapsed time, 0.752s cpu time, 0.076s GC time
val it = (): unit
