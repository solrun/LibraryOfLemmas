Loading theory "Draft.CPSScheme" (required by "Draft.AbsCFCompTemplates" via "Draft.AbsCFComp" via "Draft.AbsCF")
Loading theory "Draft.Utils" (required by "Draft.AbsCFCompTemplates" via "Draft.AbsCFComp" via "Draft.AbsCF")
Loading theory "Draft.SetMap" (required by "Draft.AbsCFCompTemplates" via "Draft.AbsCFComp" via "Draft.AbsCF")
Loading theory "HOL-Library.Function_Algebras" (required by "Draft.AbsCFCompTemplates" via "Draft.ExtrEqs" via "HOL-Library.BigO")
### Ignoring duplicate rewrite rule:
### single_valued {} == True
instantiation
  fun :: (type, plus) plus
  plus_fun == plus :: ('a => 'b) => ('a => 'b) => 'a => 'b
instantiation
  fun :: (type, zero) zero
  zero_fun == zero_class.zero :: 'a => 'b
### Ambiguous input (line 28 of "$AFP/Shivers-CFA/SetMap.thy") produces 6 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("_applC"
###     ("\<^fixed>smap_union" ("_position" smap1)
###       ("\<^const>HOL.eq" ("_applC" ("_position" smap2) ("_position" k))
###         ("\<^const>Set.union" ("_applC" ("_position" smap1) ("_position" k))
###           ("_position" smap2))))
###     ("_position" k)))
### ("\<^const>HOL.Trueprop"
###   ("\<^fixed>smap_union" ("_position" smap1)
###     ("\<^const>HOL.eq" ("_applC" ("_position" smap2) ("_position" k))
###       ("\<^const>Set.union" ("_applC" ("_position" smap1) ("_position" k))
###         ("_applC" ("_position" smap2) ("_position" k))))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("\<^fixed>smap_union" ("_position" smap1)
###       ("_applC" ("_position" smap2) ("_position" k)))
###     ("\<^const>Set.union" ("_applC" ("_position" smap1) ("_position" k))
###       ("_applC" ("_position" smap2) ("_position" k)))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("_applC"
###       ("\<^fixed>smap_union" ("_position" smap1) ("_position" smap2))
###       ("_position" k))
###     ("\<^const>Set.union" ("_applC" ("_position" smap1) ("_position" k))
###       ("_applC" ("_position" smap2) ("_position" k)))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Set.union"
###     ("\<^fixed>smap_union" ("_position" smap1)
###       ("\<^const>HOL.eq" ("_applC" ("_position" smap2) ("_position" k))
###         ("_applC" ("_position" smap1) ("_position" k))))
###     ("_applC" ("_position" smap2) ("_position" k))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Set.union"
###     ("_applC"
###       ("\<^fixed>smap_union" ("_position" smap1)
###         ("\<^const>HOL.eq" ("_applC" ("_position" smap2) ("_position" k))
###           ("_position" smap1)))
###       ("_position" k))
###     ("_applC" ("_position" smap2) ("_position" k))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### theory "Draft.Utils"
### 0.047s elapsed time, 0.224s cpu time, 0.000s GC time
Loading theory "HOL-Library.Stream" (required by "Draft.AbsCFCompTemplates" via "Draft.ExtrEqs")
instantiation
  fun :: (type, times) times
  times_fun == times :: ('a => 'b) => ('a => 'b) => 'a => 'b
### Ambiguous input (line 31 of "$AFP/Shivers-CFA/SetMap.thy") produces 2 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq" ("\<^fixed>smap_Union" ("\<^const>List.list.Nil"))
###     ("\<^const>SetMap.smap_empty")))
### ("\<^const>HOL.Trueprop"
###   ("\<^fixed>smap_Union"
###     ("\<^const>HOL.eq" ("\<^const>List.list.Nil")
###       ("\<^const>SetMap.smap_empty"))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 32 of "$AFP/Shivers-CFA/SetMap.thy") produces 5 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>SetMap.smap_union"
###     ("\<^const>HOL.eq"
###       ("\<^fixed>smap_Union"
###         ("\<^const>List.list.Cons" ("_position" m) ("_position" ms)))
###       ("_position" m))
###     ("\<^fixed>smap_Union" ("_position" ms))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>SetMap.smap_union"
###     ("\<^fixed>smap_Union"
###       ("\<^const>HOL.eq"
###         ("\<^const>List.list.Cons" ("_position" m) ("_position" ms))
###         ("_position" m)))
###     ("\<^fixed>smap_Union" ("_position" ms))))
### ("\<^const>HOL.Trueprop"
###   ("\<^fixed>smap_Union"
###     ("\<^const>SetMap.smap_union"
###       ("\<^const>HOL.eq"
###         ("\<^const>List.list.Cons" ("_position" m) ("_position" ms))
###         ("_position" m))
###       ("\<^fixed>smap_Union" ("_position" ms)))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("\<^fixed>smap_Union"
###       ("\<^const>List.list.Cons" ("_position" m) ("_position" ms)))
###     ("\<^const>SetMap.smap_union" ("_position" m)
###       ("\<^fixed>smap_Union" ("_position" ms)))))
### ("\<^const>HOL.Trueprop"
###   ("\<^fixed>smap_Union"
###     ("\<^const>HOL.eq"
###       ("\<^const>List.list.Cons" ("_position" m) ("_position" ms))
###       ("\<^const>SetMap.smap_union" ("_position" m)
###         ("\<^fixed>smap_Union" ("_position" ms))))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
consts
  smap_Union :: "('a => 'b set) list => 'a => 'b set"
instantiation
  fun :: (type, one) one
  one_fun == one_class.one :: 'a => 'b
### Ignoring duplicate rewrite rule:
### smap_Union [] == {}.
### Ambiguous input (line 67 of "$AFP/Shivers-CFA/SetMap.thy") produces 5 parse trees:
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>SetMap.smap_less" ("_position" ve1) ("_position" ve1')))
###     ("_asm"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>SetMap.smap_less" ("_position" ve2)
###           ("_position" ve2')))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>SetMap.smap_union"
###       ("\<^const>SetMap.smap_less"
###         ("\<^const>SetMap.smap_union" ("_position" ve1) ("_position" ve2))
###         ("_position" ve1'))
###       ("_position" ve2'))))
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>SetMap.smap_less" ("_position" ve1) ("_position" ve1')))
###     ("_asm"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>SetMap.smap_less" ("_position" ve2)
###           ("_position" ve2')))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>SetMap.smap_less"
###       ("\<^const>SetMap.smap_union" ("_position" ve1) ("_position" ve2))
###       ("\<^const>SetMap.smap_union" ("_position" ve1')
###         ("_position" ve2')))))
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>SetMap.smap_less" ("_position" ve1) ("_position" ve1')))
###     ("_asm"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>SetMap.smap_less" ("_position" ve2)
###           ("_position" ve2')))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>SetMap.smap_union" ("_position" ve1)
###       ("\<^const>SetMap.smap_less" ("_position" ve2)
###         ("\<^const>SetMap.smap_union" ("_position" ve1')
###           ("_position" ve2'))))))
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>SetMap.smap_less" ("_position" ve1) ("_position" ve1')))
###     ("_asm"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>SetMap.smap_less" ("_position" ve2)
###           ("_position" ve2')))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>SetMap.smap_union"
###       ("\<^const>SetMap.smap_union" ("_position" ve1)
###         ("\<^const>SetMap.smap_less" ("_position" ve2) ("_position" ve1')))
###       ("_position" ve2'))))
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>SetMap.smap_less" ("_position" ve1) ("_position" ve1')))
###     ("_asm"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>SetMap.smap_less" ("_position" ve2)
###           ("_position" ve2')))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>SetMap.smap_union" ("_position" ve1)
###       ("\<^const>SetMap.smap_union"
###         ("\<^const>SetMap.smap_less" ("_position" ve2) ("_position" ve1'))
###         ("_position" ve2')))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 70 of "$AFP/Shivers-CFA/SetMap.thy") produces 3 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>SetMap.smap_union" ("_position" m1)
###     ("\<^const>HOL.eq" ("\<^const>SetMap.smap_Union" ("_position" ms))
###       ("\<^const>SetMap.smap_Union"
###         ("\<^const>List.list.Cons" ("_position" m1) ("_position" ms))))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("\<^const>SetMap.smap_union" ("_position" m1)
###       ("\<^const>SetMap.smap_Union" ("_position" ms)))
###     ("\<^const>SetMap.smap_Union"
###       ("\<^const>List.list.Cons" ("_position" m1) ("_position" ms)))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>SetMap.smap_union" ("_position" m1)
###     ("\<^const>SetMap.smap_Union"
###       ("\<^const>HOL.eq" ("_position" ms)
###         ("\<^const>SetMap.smap_Union"
###           ("\<^const>List.list.Cons" ("_position" m1) ("_position" ms)))))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 75 of "$AFP/Shivers-CFA/SetMap.thy") produces 2 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>SetMap.smap_less"
###     ("\<^const>SetMap.smap_Union" ("_position" ms1))
###     ("\<^const>SetMap.smap_Union" ("_position" ms2))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>SetMap.smap_Union"
###     ("\<^const>SetMap.smap_less" ("_position" ms1)
###       ("\<^const>SetMap.smap_Union" ("_position" ms2)))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 83 of "$AFP/Shivers-CFA/SetMap.thy") produces 5 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>SetMap.smap_union"
###     ("\<^const>HOL.eq"
###       ("\<^const>SetMap.smap_union" ("_position" m1) ("_position" m2))
###       ("_position" m2))
###     ("_position" m1)))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>SetMap.smap_union"
###     ("\<^const>SetMap.smap_union" ("_position" m1)
###       ("\<^const>HOL.eq" ("_position" m2) ("_position" m2)))
###     ("_position" m1)))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>SetMap.smap_union" ("_position" m1)
###     ("\<^const>SetMap.smap_union"
###       ("\<^const>HOL.eq" ("_position" m2) ("_position" m2))
###       ("_position" m1))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("\<^const>SetMap.smap_union" ("_position" m1) ("_position" m2))
###     ("\<^const>SetMap.smap_union" ("_position" m2) ("_position" m1))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>SetMap.smap_union" ("_position" m1)
###     ("\<^const>HOL.eq" ("_position" m2)
###       ("\<^const>SetMap.smap_union" ("_position" m2) ("_position" m1)))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 86 of "$AFP/Shivers-CFA/SetMap.thy") produces 2 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("\<^const>SetMap.smap_union" ("\<^const>SetMap.smap_empty")
###       ("_position" m))
###     ("_position" m)))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>SetMap.smap_union" ("\<^const>SetMap.smap_empty")
###     ("\<^const>HOL.eq" ("_position" m) ("_position" m))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 89 of "$AFP/Shivers-CFA/SetMap.thy") produces 2 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("\<^const>SetMap.smap_union" ("_position" m)
###       ("\<^const>SetMap.smap_empty"))
###     ("_position" m)))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>SetMap.smap_union" ("_position" m)
###     ("\<^const>HOL.eq" ("\<^const>SetMap.smap_empty") ("_position" m))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 92 of "$AFP/Shivers-CFA/SetMap.thy") produces 5 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>SetMap.smap_union"
###     ("\<^const>HOL.eq"
###       ("\<^const>SetMap.smap_union"
###         ("\<^const>SetMap.smap_union" ("_position" m1) ("_position" m2))
###         ("_position" m3))
###       ("_position" m1))
###     ("\<^const>SetMap.smap_union" ("_position" m2) ("_position" m3))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>SetMap.smap_union"
###     ("\<^const>SetMap.smap_union"
###       ("\<^const>SetMap.smap_union" ("_position" m1) ("_position" m2))
###       ("\<^const>HOL.eq" ("_position" m3) ("_position" m1)))
###     ("\<^const>SetMap.smap_union" ("_position" m2) ("_position" m3))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>SetMap.smap_union"
###     ("\<^const>SetMap.smap_union" ("_position" m1) ("_position" m2))
###     ("\<^const>SetMap.smap_union"
###       ("\<^const>HOL.eq" ("_position" m3) ("_position" m1))
###       ("\<^const>SetMap.smap_union" ("_position" m2) ("_position" m3)))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("\<^const>SetMap.smap_union"
###       ("\<^const>SetMap.smap_union" ("_position" m1) ("_position" m2))
###       ("_position" m3))
###     ("\<^const>SetMap.smap_union" ("_position" m1)
###       ("\<^const>SetMap.smap_union" ("_position" m2) ("_position" m3)))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>SetMap.smap_union"
###     ("\<^const>SetMap.smap_union" ("_position" m1) ("_position" m2))
###     ("\<^const>HOL.eq" ("_position" m3)
###       ("\<^const>SetMap.smap_union" ("_position" m1)
###         ("\<^const>SetMap.smap_union" ("_position" m2) ("_position" m3))))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 95 of "$AFP/Shivers-CFA/SetMap.thy") produces 5 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>SetMap.smap_union"
###     ("\<^const>HOL.eq"
###       ("\<^const>SetMap.smap_Union"
###         ("\<^const>List.append" ("_position" m1) ("_position" m2)))
###       ("\<^const>SetMap.smap_Union" ("_position" m1)))
###     ("\<^const>SetMap.smap_Union" ("_position" m2))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>SetMap.smap_union"
###     ("\<^const>SetMap.smap_Union"
###       ("\<^const>HOL.eq"
###         ("\<^const>List.append" ("_position" m1) ("_position" m2))
###         ("\<^const>SetMap.smap_Union" ("_position" m1))))
###     ("\<^const>SetMap.smap_Union" ("_position" m2))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>SetMap.smap_Union"
###     ("\<^const>SetMap.smap_union"
###       ("\<^const>HOL.eq"
###         ("\<^const>List.append" ("_position" m1) ("_position" m2))
###         ("\<^const>SetMap.smap_Union" ("_position" m1)))
###       ("\<^const>SetMap.smap_Union" ("_position" m2)))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("\<^const>SetMap.smap_Union"
###       ("\<^const>List.append" ("_position" m1) ("_position" m2)))
###     ("\<^const>SetMap.smap_union"
###       ("\<^const>SetMap.smap_Union" ("_position" m1))
###       ("\<^const>SetMap.smap_Union" ("_position" m2)))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>SetMap.smap_Union"
###     ("\<^const>HOL.eq"
###       ("\<^const>List.append" ("_position" m1) ("_position" m2))
###       ("\<^const>SetMap.smap_union"
###         ("\<^const>SetMap.smap_Union" ("_position" m1))
###         ("\<^const>SetMap.smap_Union" ("_position" m2))))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 98 of "$AFP/Shivers-CFA/SetMap.thy") produces 2 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("\<^const>SetMap.smap_Union"
###       ("_applC" ("_position" rev) ("_position" l)))
###     ("\<^const>SetMap.smap_Union" ("_position" l))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>SetMap.smap_Union"
###     ("\<^const>HOL.eq" ("_applC" ("_position" rev) ("_position" l))
###       ("\<^const>SetMap.smap_Union" ("_position" l)))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 101 of "$AFP/Shivers-CFA/SetMap.thy") produces 2 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("\<^const>SetMap.smap_Union"
###       ("_applC" ("_position" map)
###         ("_cargs" ("_position" f)
###           ("_applC" ("_position" rev) ("_position" l)))))
###     ("\<^const>SetMap.smap_Union"
###       ("_applC" ("_position" map)
###         ("_cargs" ("_position" f) ("_position" l))))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>SetMap.smap_Union"
###     ("\<^const>HOL.eq"
###       ("_applC" ("_position" map)
###         ("_cargs" ("_position" f)
###           ("_applC" ("_position" rev) ("_position" l))))
###       ("\<^const>SetMap.smap_Union"
###         ("_applC" ("_position" map)
###           ("_cargs" ("_position" f) ("_position" l)))))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### theory "HOL-Library.Function_Algebras"
### 0.139s elapsed time, 0.574s cpu time, 0.043s GC time
Loading theory "HOL-Library.Set_Algebras" (required by "Draft.AbsCFCompTemplates" via "Draft.ExtrEqs" via "HOL-Library.BigO")
### theory "Draft.SetMap"
### 0.142s elapsed time, 0.582s cpu time, 0.043s GC time
Loading theory "Draft.MapSets" (required by "Draft.AbsCFCompTemplates" via "Draft.AbsCFComp")
instantiation
  set :: (plus) plus
  plus_set == plus :: 'a set => 'a set => 'a set
instantiation
  set :: (times) times
  times_set == times :: 'a set => 'a set => 'a set
instantiation
  set :: (zero) zero
  zero_set == zero_class.zero :: 'a set
instantiation
  set :: (one) one
  one_set == one_class.one :: 'a set
### theory "Draft.MapSets"
### 0.111s elapsed time, 0.443s cpu time, 0.000s GC time
Loading theory "HOL-Library.Tree" (required by "Draft.AbsCFCompTemplates" via "Draft.ExtrEqs" via "Draft.Templates")
### theory "HOL-Library.Set_Algebras"
### 0.217s elapsed time, 0.853s cpu time, 0.097s GC time
Loading theory "HOL-Library.BigO" (required by "Draft.AbsCFCompTemplates" via "Draft.ExtrEqs")
consts
  shift :: "'a list => 'a stream => 'a stream"
Proofs for coinductive predicate(s) "streamsp"
  Proving monotonicity ...
consts
  snth :: "'a stream => nat => 'a"
consts
  stake :: "nat => 'a stream => 'a list"
consts
  sdrop :: "nat => 'a stream => 'a stream"
consts
  sfilter :: "('a => bool) => 'a stream => 'a stream"
consts
  cycle :: "'a list => 'a stream"
consts
  siterate :: "('a => 'a) => 'a => 'a stream"
consts
  flat :: "'a list stream => 'a stream"
consts
  left :: "'a tree => 'a tree"
consts
  right :: "'a tree => 'a tree"
consts
  sinterleave :: "'a stream => 'a stream => 'a stream"
consts
  szip :: "'a stream => 'b stream => ('a * 'b) stream"
Found termination order: "size <*mlex*> {}"
consts
  smap2 :: "('a => 'b => 'c) => 'a stream => 'b stream => 'c stream"
### theory "HOL-Library.Stream"
### 0.920s elapsed time, 3.611s cpu time, 0.398s GC time
Loading theory "Draft.FixTransform" (required by "Draft.AbsCFCompTemplates" via "Draft.AbsCFComp")
Found termination order: "size <*mlex*> {}"
Found termination order: "size <*mlex*> {}"
class height = type +
  fixes height :: "'a => nat"
instantiation
  tree :: (type) height
  height_tree == height :: 'a tree => nat
### theory "Draft.FixTransform"
### 0.330s elapsed time, 1.144s cpu time, 0.623s GC time
Loading theory "Draft.HOLCFUtils" (required by "Draft.AbsCFCompTemplates" via "Draft.AbsCFComp" via "Draft.AbsCF")
instantiation
  bool :: po
  below_bool == below :: bool => bool => bool
instantiation
  set :: (type) po
  below_set == below :: 'a set => 'a set => bool
Found termination order: "size <*mlex*> {}"
### theory "HOL-Library.BigO"
### 1.039s elapsed time, 3.932s cpu time, 0.926s GC time
Found termination order: "size <*mlex*> {}"
### theory "Draft.HOLCFUtils"
### 0.123s elapsed time, 0.457s cpu time, 0.045s GC time
Loading theory "Draft.Computability" (required by "Draft.AbsCFCompTemplates" via "Draft.AbsCFComp")
Found termination order: "size <*mlex*> {}"
### theory "Draft.Computability"
### 0.117s elapsed time, 0.361s cpu time, 0.093s GC time
Found termination order: "size <*mlex*> {}"
Found termination order: "size <*mlex*> {}"
Found termination order: "size <*mlex*> {}"
Found termination order: "size <*mlex*> {}"
Found termination order: "(%p. size (fst p)) <*mlex*> {}"
Found termination order: "size <*mlex*> {}"
Found termination order: "(%p. size (snd p)) <*mlex*> {}"
Found termination order: "size <*mlex*> {}"
### theory "HOL-Library.Tree"
### 2.063s elapsed time, 6.454s cpu time, 1.342s GC time
Loading theory "Draft.Templates" (required by "Draft.AbsCFCompTemplates" via "Draft.ExtrEqs")
datatype template_term
=
     t_empty
   | template_app of template_term * template_term
   | template_hole of int
   | template_var of int
datatype sign
= equals | greater_equals | greater_than | less_equals | less_than
datatype template
=
     template_bimplication of template * template
   | template_dunno
   | template_equation of template_term * template_term
   | template_implication of template list * template
   | template_inequation of sign * template_term * template_term
   | template_negation of template
   | template_predicate of template_term
constructor t_empty: template_term
constructor template_app: template_term * template_term -> template_term
constructor template_hole: int -> template_term
constructor template_var: int -> template_term
constructor equals: sign
constructor greater_equals: sign
constructor greater_than: sign
constructor less_equals: sign
constructor less_than: sign
constructor template_bimplication: template * template -> template
constructor template_dunno: template
constructor template_equation: template_term * template_term -> template
constructor template_implication: template list * template -> template
constructor template_inequation:
   sign * template_term * template_term -> template
constructor template_negation: template -> template
constructor template_predicate: template_term -> template
val vfs = fn: term -> (indexname * typ) list * (string * typ) list
val indexOf = fn: ''a list -> ''a -> int -> int
val has_eq = fn: term -> bool
val term2template = fn:
   (indexname * typ) list -> (string * typ) list -> term -> template_term
val lemma2predicate = fn: term -> term -> template
val makeTemplatewithContext = fn: term -> term -> template
val lemma2template = fn: term -> template
val thm2template = fn: thm -> template
val tterm2string = fn: template_term -> string
val template2string = fn: template -> string
val t = "height ?t <= size ?t": thm
val th =
   Const ("HOL.Trueprop", "bool => prop") $
     (Const ("Orderings.ord_class.less_eq", "nat => nat => bool") $
       (Const ("Tree.height_class.height", "?'a tree => nat") $
         Var (("t", 0), "?'a tree")) $
       (Const ("Nat.size_class.size", "?'a tree => nat") $
         Var (("t", 0), "?'a tree"))):
   term
### theory "Draft.Templates"
### 0.052s elapsed time, 0.104s cpu time, 0.000s GC time
Loading theory "Draft.ExtrEqs" (required by "Draft.AbsCFCompTemplates")
val eqpattern =
   Pattern
    (
       Const ("HOL.Trueprop", "bool => prop") $
         (Const ("HOL.eq", "?'a => ?'a => bool") $
           Var (("_dummy_", 1), "?'a") $ Var (("_dummy_", 2), "?'a"))
       ):
   term Find_Theorems.criterion
val badeqpattern = Pattern (Const ("Pure.eq", "?'a => ?'a => prop")):
   term Find_Theorems.criterion
val undefpattern =
   Pattern
    (
       Const ("HOL.Trueprop", "bool => prop") $
         (Const ("HOL.eq", "?'a => ?'a => bool") $
           Var (("_dummy_", 1), "?'a") $ Const ("HOL.undefined", "?'a"))
       ):
   term Find_Theorems.criterion
val thmpattern =
   Pattern
    (Const ("HOL.Trueprop", "bool => prop") $ Var (("_dummy_", 1), "bool")):
   term Find_Theorems.criterion
val badnames =
   ["*nitpick*", "*Nitpick*", "*full_exhaustive*", "*_def*", "Enum.finite*",
    "*Quickcheck*", "ATP*", "*Nunchaku*", "*Code*", "*BNF*", "*SMT*",
    "*.*.*"]:
   string list
val unwanted_names =
   [(false, Name "*nitpick*"), (false, Name "*Nitpick*"),
    (false, Name "*full_exhaustive*"), (false, Name "*_def*"),
    (false, Name "Enum.finite*"), (false, Name "*Quickcheck*"),
    (false, Name "ATP*"), (false, Name "*Nunchaku*"),
    (false, Name "*Code*"), (false, Name "*BNF*"), (false, Name "*SMT*"),
    (false, Name "*.*.*")]:
   (bool * term Find_Theorems.criterion) list
val has_vars = fn: term -> bool
val get_all_eqs = fn: string -> Proof.context -> (string * thm) list
val get_all_thms = fn: string -> Proof.context -> (string * thm) list
val get_noneq_thms = fn: string -> Proof.context -> (string * thm) list
val template_eqs = fn:
   string -> Proof.context -> (string * thm * template) list
val template_thms = fn:
   string -> Proof.context -> (string * thm * template) list
### theory "Draft.ExtrEqs"
### 0.541s elapsed time, 1.142s cpu time, 0.141s GC time
### theory "Draft.CPSScheme"
### 5.013s elapsed time, 11.532s cpu time, 2.461s GC time
Loading theory "Draft.CPSUtils" (required by "Draft.AbsCFCompTemplates" via "Draft.AbsCFComp")
Loading theory "Draft.AbsCF" (required by "Draft.AbsCFCompTemplates" via "Draft.AbsCFComp")
Found termination order: "case_sum size (case_sum size size) <*mlex*> {}"
Found termination order: "case_sum size (case_sum size size) <*mlex*> {}"
Found termination order: "case_sum size (case_sum size size) <*mlex*> {}"
Found termination order: "{}"
class contour = finite +
  fixes nb_a :: "'a => nat => 'a"
    and a_initial_contour :: "'a"
instantiation
  unit :: contour
  nb_a_unit == nb_a :: unit => nat => unit
  a_initial_contour_unit == a_initial_contour :: unit
### theory "Draft.AbsCF"
### 0.580s elapsed time, 1.243s cpu time, 0.075s GC time
Found termination order: "case_sum size (case_sum size size) <*mlex*> {}"
Found termination order: "case_sum size (case_sum size size) <*mlex*> {}"
Found termination order: "case_sum size (case_sum size size) <*mlex*> {}"
### theory "Draft.CPSUtils"
### 1.132s elapsed time, 1.874s cpu time, 0.114s GC time
*** Failed to load theory "Draft.AbsCFComp" (unresolved "Draft.AbsCF", "Draft.MapSets")
*** Failed to load theory "Draft.AbsCFCompTemplates" (unresolved "Draft.AbsCFComp")
*** Unknown ancestor theory "Shivers-CFA.SetMap" (line 31 of "$AFP/Shivers-CFA/AbsCF.thy")
*** At command "text" (line 28 of "$AFP/Shivers-CFA/AbsCF.thy")
*** Unknown ancestor theory "Shivers-CFA.SetMap" (line 7 of "$AFP/Shivers-CFA/MapSets.thy")
*** At command "text" (line 6 of "$AFP/Shivers-CFA/MapSets.thy")
Exception- TOPLEVEL_ERROR raised
