   [("HOLCFUtils.emptyset_is_bot", "{} << ?S",
     template_predicate
      (
         template_app
          (template_app (template_hole 1, template_hole 0), template_var 0)
         )),
    ("HOLCFUtils.is_lub_set", "?S <<| \<Union> ?S",
     template_predicate
      (
         template_app
          (template_app (template_hole 1, template_var 0),
           template_app (template_hole 0, template_var 0))
         )),
    ("HOLCFUtils.lub_is_union", "lub ?S = \<Union> ?S",
     template_equation
      (template_app (template_hole 1, template_var 0),
       template_app (template_hole 0, template_var 0))),
    ("HOLCFUtils.is_lub_bool", "?S <<| (True : ?S)",
     template_predicate
      (
         template_app
          (template_app (template_hole 2, template_var 0),
           template_app
            (template_app (template_hole 1, template_hole 0),
             template_var 0))
         )),
    ("HOLCFUtils.lub_bool", "lub ?S = (True : ?S)",
     template_equation
      (template_app (template_hole 2, template_var 0),
       template_app
        (template_app (template_hole 1, template_hole 0), template_var 0))),
    ("HOLCFUtils.sqsubset_is_subset", "(?A << ?B) = (?A <= ?B)",
     template_equation
      (template_app
        (template_app (template_hole 1, template_var 1), template_var 0),
       template_app
        (template_app (template_hole 0, template_var 1), template_var 0))),
    ("HOLCFUtils.adm_single_valued",
     "cont ?f ==> adm (%x. single_valued (?f x))",
     template_implication
      ([template_predicate (template_app (template_hole 2, t_empty))],
       template_predicate (template_app (template_hole 1, t_empty)))),
    ("HOLCFUtils.cont2cont_insert",
     "cont ?f ==> cont (%x. insert ?y (?f x))",
     template_implication
      ([template_predicate (template_app (template_hole 1, t_empty))],
       template_predicate (template_app (template_hole 1, t_empty)))),
    ("HOLCFUtils.cont2cont_mem", "cont ?f ==> cont (%x. ?y : ?f x)",
     template_implication
      ([template_predicate (template_app (template_hole 2, t_empty))],
       template_predicate (template_app (template_hole 1, t_empty)))),
    ("HOLCFUtils.adm_not_mem", "cont ?f ==> adm (%x. ?y ~: ?f x)",
     template_implication
      ([template_predicate (template_app (template_hole 3, t_empty))],
       template_predicate (template_app (template_hole 2, t_empty)))),
    ("HOLCFUtils.cont2cont_Let_simple",
     "cont (%x. ?g x ?t) ==> cont (%x. Let ?t (?g x))",
     template_implication
      ([template_predicate (template_app (template_hole 1, t_empty))],
       template_predicate (template_app (template_hole 1, t_empty)))),
    ("HOLCFUtils.adm_prod_split",
     "adm (%p. ?f (fst p) (snd p)) ==> adm (%(x, y). ?f x y)",
     template_implication
      ([template_predicate (template_app (template_hole 3, t_empty))],
       template_predicate
        (
           template_app
            (template_hole 3, template_app (template_hole 0, t_empty))
           ))),
    ("HOLCFUtils.cont2cont_Collect",
     "(!!y. cont (%x. ?f x y)) ==> cont (%x. {y. ?f x y})",
     template_implication
      ([template_predicate (template_app (template_hole 4, t_empty))],
       template_predicate (template_app (template_hole 1, t_empty)))),
    ("HOLCFUtils.cont2cont_union",
     "[| cont ?f; cont ?g |] ==> cont (%x. ?f x Un ?g x)",
     template_implication
      ([template_predicate (template_app (template_hole 1, t_empty)),
        template_predicate (template_app (template_hole 1, t_empty))],
       template_predicate (template_app (template_hole 1, t_empty)))),
    ("HOLCFUtils.adm_subset",
     "[| cont ?u; cont ?v |] ==> adm (%x. ?u x <= ?v x)",
     template_implication
      ([template_predicate (template_app (template_hole 2, t_empty)),
        template_predicate (template_app (template_hole 2, t_empty))],
       template_predicate (template_app (template_hole 1, t_empty)))),
    ("HOLCFUtils.cont2cont_disj",
     "[| cont ?f; cont ?g |] ==> cont (%x. ?f x | ?g x)",
     template_implication
      ([template_predicate (template_app (template_hole 1, t_empty)),
        template_predicate (template_app (template_hole 1, t_empty))],
       template_predicate (template_app (template_hole 1, t_empty)))),
    ("HOLCFUtils.cont2cont_imp",
     "[| cont (%x. ~ ?f x); cont ?g |] ==> cont (%x. ?f x --> ?g x)",
     template_implication
      ([template_predicate (template_app (template_hole 2, t_empty)),
        template_predicate (template_app (template_hole 2, t_empty))],
       template_predicate (template_app (template_hole 2, t_empty)))),
    ("HOLCFUtils.adm_not_conj",
     "[| adm (%x. ~ ?P x); adm (%x. ~ ?Q x) |]
      ==> adm (%x. ~ (?P x & ?Q x))",
     template_implication
      ([template_predicate (template_app (template_hole 2, t_empty)),
        template_predicate (template_app (template_hole 2, t_empty))],
       template_predicate (template_app (template_hole 2, t_empty)))),
    ("HOLCFUtils.adm_ball'",
     "(!!y. adm (%x. y : ?A x --> ?P x y)) ==>
      adm (%x. ALL y:?A x. ?P x y)",
     template_implication
      ([template_predicate (template_app (template_hole 5, t_empty))],
       template_predicate (template_app (template_hole 3, t_empty)))),
    ("HOLCFUtils.cont2cont_UNION",
     "[| cont ?f; !!y. cont (%x. ?g x y) |]
      ==> cont (%x. \<Union> (?g x ` ?f x))",
     template_implication
      ([template_predicate (template_app (template_hole 4, template_var 1)),
        template_predicate (template_app (template_hole 3, t_empty))],
       template_predicate (template_app (template_hole 2, t_empty)))),
    ("HOLCFUtils.cont2cont_case_list",
     "[| !!y. cont ?f1.0; !!y z. cont (%x. ?f2.0 x y z) |]
      ==> cont (%x. case ?l of [] => ?f1.0 x | xa # xb => ?f2.0 x xa xb)",
     template_implication
      ([template_predicate (template_app (template_hole 5, t_empty)),
        template_predicate (template_app (template_hole 2, t_empty))],
       template_predicate (template_app (template_hole 3, t_empty))))]
