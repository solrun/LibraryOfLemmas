Loading theory "HOL-Library.Function_Algebras" (required by "Draft.FixTransformTemplates" via "Draft.ExtrEqs" via "HOL-Library.BigO")
Loading theory "HOL-Library.Stream" (required by "Draft.FixTransformTemplates" via "Draft.ExtrEqs")
Loading theory "HOL-Library.Tree" (required by "Draft.FixTransformTemplates" via "Draft.ExtrEqs" via "Draft.Templates")
Loading theory "HOL-Library.Set_Algebras" (required by "Draft.FixTransformTemplates" via "Draft.ExtrEqs" via "HOL-Library.BigO")
instantiation
  set :: (plus) plus
  plus_set == plus :: 'a set => 'a set => 'a set
instantiation
  fun :: (type, plus) plus
  plus_fun == plus :: ('a => 'b) => ('a => 'b) => 'a => 'b
instantiation
  set :: (times) times
  times_set == times :: 'a set => 'a set => 'a set
instantiation
  fun :: (type, zero) zero
  zero_fun == zero_class.zero :: 'a => 'b
instantiation
  set :: (zero) zero
  zero_set == zero_class.zero :: 'a set
instantiation
  fun :: (type, times) times
  times_fun == times :: ('a => 'b) => ('a => 'b) => 'a => 'b
instantiation
  set :: (one) one
  one_set == one_class.one :: 'a set
instantiation
  fun :: (type, one) one
  one_fun == one_class.one :: 'a => 'b
### theory "HOL-Library.Function_Algebras"
### 0.156s elapsed time, 0.626s cpu time, 0.053s GC time
Loading theory "Draft.FixTransform" (required by "Draft.FixTransformTemplates")
### theory "HOL-Library.Set_Algebras"
### 0.233s elapsed time, 0.938s cpu time, 0.053s GC time
Loading theory "HOL-Library.BigO" (required by "Draft.FixTransformTemplates" via "Draft.ExtrEqs")
### theory "Draft.FixTransform"
### 0.112s elapsed time, 0.448s cpu time, 0.000s GC time
consts
  shift :: "'a list => 'a stream => 'a stream"
Proofs for coinductive predicate(s) "streamsp"
  Proving monotonicity ...
consts
  snth :: "'a stream => nat => 'a"
consts
  stake :: "nat => 'a stream => 'a list"
consts
  sdrop :: "nat => 'a stream => 'a stream"
consts
  left :: "'a tree => 'a tree"
consts
  right :: "'a tree => 'a tree"
consts
  sfilter :: "('a => bool) => 'a stream => 'a stream"
consts
  cycle :: "'a list => 'a stream"
Found termination order: "size <*mlex*> {}"
consts
  siterate :: "('a => 'a) => 'a => 'a stream"
Found termination order: "size <*mlex*> {}"
consts
  flat :: "'a list stream => 'a stream"
Found termination order: "size <*mlex*> {}"
consts
  sinterleave :: "'a stream => 'a stream => 'a stream"
consts
  szip :: "'a stream => 'b stream => ('a * 'b) stream"
class height = type +
  fixes height :: "'a => nat"
instantiation
  tree :: (type) height
  height_tree == height :: 'a tree => nat
consts
  smap2 :: "('a => 'b => 'c) => 'a stream => 'b stream => 'c stream"
### theory "HOL-Library.Stream"
### 0.803s elapsed time, 2.705s cpu time, 0.247s GC time
Found termination order: "size <*mlex*> {}"
Found termination order: "size <*mlex*> {}"
Found termination order: "size <*mlex*> {}"
### theory "HOL-Library.BigO"
### 0.709s elapsed time, 2.072s cpu time, 0.257s GC time
Found termination order: "size <*mlex*> {}"
Found termination order: "size <*mlex*> {}"
Found termination order: "size <*mlex*> {}"
Found termination order: "size <*mlex*> {}"
Found termination order: "(%p. size (fst p)) <*mlex*> {}"
Found termination order: "size <*mlex*> {}"
Found termination order: "(%p. size (snd p)) <*mlex*> {}"
Found termination order: "size <*mlex*> {}"
### theory "HOL-Library.Tree"
### 1.797s elapsed time, 4.209s cpu time, 0.784s GC time
Loading theory "Draft.Templates" (required by "Draft.FixTransformTemplates" via "Draft.ExtrEqs")
datatype template_term
=
     t_empty
   | template_app of template_term * template_term
   | template_hole of int
   | template_var of int
datatype sign
= equals | greater_equals | greater_than | less_equals | less_than
datatype template
=
     template_bimplication of template * template
   | template_dunno
   | template_equation of template_term * template_term
   | template_implication of template list * template
   | template_inequation of sign * template_term * template_term
   | template_negation of template
   | template_predicate of template_term
constructor t_empty: template_term
constructor template_app: template_term * template_term -> template_term
constructor template_hole: int -> template_term
constructor template_var: int -> template_term
constructor equals: sign
constructor greater_equals: sign
constructor greater_than: sign
constructor less_equals: sign
constructor less_than: sign
constructor template_bimplication: template * template -> template
constructor template_dunno: template
constructor template_equation: template_term * template_term -> template
constructor template_implication: template list * template -> template
constructor template_inequation:
   sign * template_term * template_term -> template
constructor template_negation: template -> template
constructor template_predicate: template_term -> template
val vfs = fn: term -> (indexname * typ) list * (string * typ) list
val indexOf = fn: ''a list -> ''a -> int -> int
val has_eq = fn: term -> bool
val term2template = fn:
   (indexname * typ) list -> (string * typ) list -> term -> template_term
val lemma2predicate = fn: term -> term -> template
val makeTemplatewithContext = fn: term -> term -> template
val lemma2template = fn: term -> template
val thm2template = fn: thm -> template
val tterm2string = fn: template_term -> string
val template2string = fn: template -> string
val t = "height ?t <= size ?t": thm
val th =
   Const ("HOL.Trueprop", "bool => prop") $
     (Const ("Orderings.ord_class.less_eq", "nat => nat => bool") $
       (Const ("Tree.height_class.height", "?'a tree => nat") $
         Var (("t", 0), "?'a tree")) $
       (Const ("Nat.size_class.size", "?'a tree => nat") $
         Var (("t", 0), "?'a tree"))):
   term
### theory "Draft.Templates"
### 0.056s elapsed time, 0.071s cpu time, 0.000s GC time
Loading theory "Draft.ExtrEqs" (required by "Draft.FixTransformTemplates")
val eqpattern =
   Pattern
    (
       Const ("HOL.Trueprop", "bool => prop") $
         (Const ("HOL.eq", "?'a => ?'a => bool") $
           Var (("_dummy_", 1), "?'a") $ Var (("_dummy_", 2), "?'a"))
       ):
   term Find_Theorems.criterion
val badeqpattern = Pattern (Const ("Pure.eq", "?'a => ?'a => prop")):
   term Find_Theorems.criterion
val undefpattern =
   Pattern
    (
       Const ("HOL.Trueprop", "bool => prop") $
         (Const ("HOL.eq", "?'a => ?'a => bool") $
           Var (("_dummy_", 1), "?'a") $ Const ("HOL.undefined", "?'a"))
       ):
   term Find_Theorems.criterion
val thmpattern =
   Pattern
    (Const ("HOL.Trueprop", "bool => prop") $ Var (("_dummy_", 1), "bool")):
   term Find_Theorems.criterion
val badnames =
   ["*nitpick*", "*Nitpick*", "*full_exhaustive*", "*_def*", "Enum.finite*",
    "*Quickcheck*", "ATP*", "*Nunchaku*", "*Code*", "*BNF*", "*SMT*",
    "*.*.*"]:
   string list
val unwanted_names =
   [(false, Name "*nitpick*"), (false, Name "*Nitpick*"),
    (false, Name "*full_exhaustive*"), (false, Name "*_def*"),
    (false, Name "Enum.finite*"), (false, Name "*Quickcheck*"),
    (false, Name "ATP*"), (false, Name "*Nunchaku*"),
    (false, Name "*Code*"), (false, Name "*BNF*"), (false, Name "*SMT*"),
    (false, Name "*.*.*")]:
   (bool * term Find_Theorems.criterion) list
val has_vars = fn: term -> bool
val get_all_eqs = fn: string -> Proof.context -> (string * thm) list
val get_all_thms = fn: string -> Proof.context -> (string * thm) list
val get_noneq_thms = fn: string -> Proof.context -> (string * thm) list
val template_eqs = fn:
   string -> Proof.context -> (string * thm * template) list
val template_thms = fn:
   string -> Proof.context -> (string * thm * template) list
### theory "Draft.ExtrEqs"
### 0.540s elapsed time, 0.592s cpu time, 0.061s GC time
Loading theory "Draft.FixTransformTemplates"
val templateLemmas =
   [("FixTransform.cont2cont_circ", "cont (%f. f o ?g)",
     template_predicate (template_app (template_hole 1, t_empty))),
    ("FixTransform.tup_to_sum_to_tup", "sum_to_tup$(tup_to_sum$?F) = ?F",
     template_equation
      (template_app
        (template_app (template_hole 3, template_hole 2),
         template_app
          (template_app (template_hole 1, template_hole 0),
           template_var 0)),
       template_var 0)),
    ("FixTransform.discr_app", "(LAM s. ?f s)$(Discr ?x) = ?f (Discr ?x)",
     template_equation
      (template_app
        (template_app
          (template_hole 2, template_app (template_hole 1, t_empty)),
         template_app (template_hole 0, template_var 0)),
       template_app
        (template_var 1, template_app (template_hole 0, template_var 0)))),
    ("FixTransform.fst_sum_to_tup",
     "fst (sum_to_tup$?x) = (LAM xa. ?x$(Discr (Inl (undiscr xa))))",
     template_equation
      (template_app
        (template_hole 7,
         template_app
          (template_app (template_hole 6, template_hole 5),
           template_var 0)),
       template_app (template_hole 4, t_empty))),
    ("FixTransform.cont2cont_case_sum",
     "[| cont ?f; cont ?g |]
      ==> cont (%x. case ?s of Inl xa => ?f x xa | Inr xa => ?g x xa)",
     template_implication
      ([template_predicate (template_app (template_hole 3, template_var 2)),
        template_predicate
         (template_app (template_hole 2, template_var 1))],
       template_predicate (template_app (template_hole 1, t_empty)))),
    ("FixTransform.fix_transform_pair_sum",
     "fix$?F = sum_to_tup$(fix$(tup_to_sum oo ?F oo sum_to_tup))",
     template_equation
      (template_app
        (template_app (template_hole 12, template_hole 11), template_var 0),
       template_app
        (template_app (template_hole 10, template_hole 9),
         template_app
          (template_app (template_hole 8, template_hole 7),
           template_app
            (template_app
              (template_hole 6,
               template_app
                (template_app (template_hole 5, template_hole 4),
                 template_hole 3)),
             template_app
              (template_app
                (template_hole 2,
                 template_app
                  (template_app (template_hole 1, template_hole 0),
                   template_var 0)),
               template_hole 9)))))),
    ("FixTransform.sum_to_tup_app",
     "sum_to_tup$?f =
      (LAM x. ?f$(Discr (Inl (undiscr x))),
       LAM x. ?f$(Discr (Inr (undiscr x))))",
     template_equation
      (template_app
        (template_app (template_hole 10, template_hole 9), template_var 0),
       template_app
        (template_app
          (template_hole 8, template_app (template_hole 7, t_empty)),
         template_app (template_hole 2, t_empty)))),
    ("FixTransform.tup_to_sum_app",
     "tup_to_sum$?p =
      (LAM s.
          case ?p of
          (f, g) =>
            case undiscr s of Inl x => f$(Discr x) | Inr x => g$(Discr x))",
     template_equation
      (template_app
        (template_app (template_hole 9, template_hole 8), template_var 0),
       template_app (template_hole 7, t_empty))),
    ("FixTransform.fix_transform",
     "(!!x. ?g$(?f$x) = x) ==> fix$?F = ?g$(fix$(?f oo ?F oo ?g))",
     template_implication
      ([template_predicate (template_app (template_hole 14, t_empty))],
       template_equation
        (template_app
          (template_app (template_hole 9, template_hole 8), template_var 0),
         template_app
          (template_app (template_hole 11, template_var 2),
           template_app
            (template_app (template_hole 7, template_hole 6),
             template_app
              (template_app
                (template_hole 5,
                 template_app
                  (template_app (template_hole 4, template_hole 3),
                   template_var 1)),
               template_app
                (template_app
                  (template_hole 2,
                   template_app
                    (template_app (template_hole 1, template_hole 0),
                     template_var 0)),
                 template_var 2))))))),
    ("FixTransform.cont2cont_split_pair",
     "[| cont ?f; !!x. cont (?f x); cont ?g; !!x. cont (?g x) |]
      ==> cont (%(a, b). (?f a b, ?g a b))",
     template_implication
      ([template_predicate (template_app (template_hole 7, template_var 1)),
        template_predicate (template_app (template_hole 6, t_empty)),
        template_predicate (template_app (template_hole 4, template_var 0)),
        template_predicate (template_app (template_hole 6, t_empty))],
       template_predicate
        (
           template_app
            (template_hole 2, template_app (template_hole 1, t_empty))
           ))),
    ("FixTransform.tup_sum_oo",
     "[| cont ?F; !!x. cont (?F x); cont ?G; !!x. cont (?G x) |]
      ==> tup_to_sum oo
          (LAM p. case p of (a, b) => (?F a b, ?G a b)) oo sum_to_tup =
          (LAM f s.
              case undiscr s of
              Inl x =>
                ?F (LAM s. f$(Discr (Inl (undiscr s))))
                 (LAM s. f$(Discr (Inr (undiscr s))))$
                (Discr x)
              | Inr x =>
                  ?G (LAM s. f$(Discr (Inl (undiscr s))))
                   (LAM s. f$(Discr (Inr (undiscr s))))$
                  (Discr x))",
     template_implication
      ([template_predicate
         (template_app (template_hole 32, template_var 1)),
        template_predicate (template_app (template_hole 31, t_empty)),
        template_predicate
         (template_app (template_hole 29, template_var 0)),
        template_predicate (template_app (template_hole 31, t_empty))],
       template_equation
        (template_app
          (template_app
            (template_hole 26,
             template_app
              (template_app (template_hole 25, template_hole 24),
               template_hole 23)),
           template_app
            (template_app
              (template_hole 22,
               template_app
                (template_app (template_hole 21, template_hole 20),
                 template_app (template_hole 19, t_empty))),
             template_hole 16)),
         template_app (template_hole 15, t_empty))))]:
   (string * thm * template) list
### theory "Draft.FixTransformTemplates"
### 0.403s elapsed time, 0.534s cpu time, 0.062s GC time
val it = (): unit
