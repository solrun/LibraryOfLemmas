Loading theory "Draft.Filtration" (required by "Draft.Option_Price_ExamplesTemplates" via "Draft.Option_Price_Examples" via "Draft.CRR_Model" via "Draft.Fair_Price")
Loading theory "HOL-Library.Function_Algebras" (required by "Draft.Option_Price_ExamplesTemplates" via "Draft.ExtrEqs" via "HOL-Library.BigO")
Loading theory "Draft.Templates" (required by "Draft.Option_Price_ExamplesTemplates" via "Draft.ExtrEqs")
Loading theory "Draft.Generated_Subalgebra" (required by "Draft.Option_Price_ExamplesTemplates" via "Draft.Option_Price_Examples" via "Draft.CRR_Model" via "Draft.Fair_Price" via "Draft.Geometric_Random_Walk" via "Draft.Infinite_Coin_Toss_Space")
instantiation
  fun :: (type, plus) plus
  plus_fun == plus :: ('a => 'b) => ('a => 'b) => 'a => 'b
instantiation
  fun :: (type, zero) zero
  zero_fun == zero_class.zero :: 'a => 'b
instantiation
  fun :: (type, times) times
  times_fun == times :: ('a => 'b) => ('a => 'b) => 'a => 'b
instantiation
  fun :: (type, one) one
  one_fun == one_class.one :: 'a => 'b
datatype template_term
=
     t_empty
   | template_app of template_term * template_term
   | template_hole of int
   | template_var of int
datatype sign
= equals | greater_equals | greater_than | less_equals | less_than
datatype template
=
     template_bimplication of template * template
   | template_dunno
   | template_equation of template_term * template_term
   | template_implication of template list * template
   | template_inequation of sign * template_term * template_term
   | template_negation of template
   | template_predicate of template_term
constructor t_empty: template_term
constructor template_app: template_term * template_term -> template_term
constructor template_hole: int -> template_term
constructor template_var: int -> template_term
constructor equals: sign
constructor greater_equals: sign
constructor greater_than: sign
constructor less_equals: sign
constructor less_than: sign
constructor template_bimplication: template * template -> template
constructor template_dunno: template
constructor template_equation: template_term * template_term -> template
constructor template_implication: template list * template -> template
constructor template_inequation:
   sign * template_term * template_term -> template
constructor template_negation: template -> template
constructor template_predicate: template_term -> template
val vfs = fn: term -> (indexname * typ) list * (string * typ) list
val indexOf = fn: ''a list -> ''a -> int -> int
val has_eq = fn: term -> bool
val term2template = fn:
   (indexname * typ) list -> (string * typ) list -> term -> template_term
val lemma2predicate = fn: term -> term -> template
val makeTemplatewithContext = fn: term -> term -> template
val lemma2template = fn: term -> template
val thm2template = fn: thm -> template
val tterm2string = fn: template_term -> string
val template2string = fn: template -> string
val t = "height ?t <= size ?t": thm
val th =
   Const ("HOL.Trueprop", "bool => prop") $
     (Const ("Orderings.ord_class.less_eq", "nat => nat => bool") $
       (Const ("Tree.height_class.height", "?'a tree => nat") $
         Var (("t", 0), "?'a tree")) $
       (Const ("Nat.size_class.size", "?'a tree => nat") $
         Var (("t", 0), "?'a tree"))):
   term
### theory "Draft.Templates"
### 0.121s elapsed time, 0.478s cpu time, 0.052s GC time
### theory "HOL-Library.Function_Algebras"
### 0.132s elapsed time, 0.503s cpu time, 0.052s GC time
Loading theory "HOL-Library.BigO" (required by "Draft.Option_Price_ExamplesTemplates" via "Draft.ExtrEqs")
### theory "Draft.Generated_Subalgebra"
### 0.230s elapsed time, 0.819s cpu time, 0.052s GC time
Loading theory "Draft.Disc_Cond_Expect" (required by "Draft.Option_Price_ExamplesTemplates" via "Draft.Option_Price_Examples" via "Draft.CRR_Model" via "Draft.Fair_Price" via "Draft.Geometric_Random_Walk" via "Draft.Infinite_Coin_Toss_Space")
instantiation
  nat :: linorder_bot
locale filtrated_prob_space
  fixes M :: "'a measure"
    and F :: "'b => 'a measure"
  assumes "filtrated_prob_space M F"
### theory "Draft.Disc_Cond_Expect"
### 0.425s elapsed time, 1.275s cpu time, 0.165s GC time
locale disc_filtr_prob_space
  fixes M :: "'a measure"
    and F :: "nat => 'a measure"
  assumes "disc_filtr_prob_space M F"
### theory "HOL-Library.BigO"
### 0.720s elapsed time, 2.032s cpu time, 0.267s GC time
Loading theory "Draft.ExtrEqs" (required by "Draft.Option_Price_ExamplesTemplates")
locale trivial_init_filtrated_prob_space
  fixes M :: "'a measure"
    and F :: "'b => 'a measure"
  assumes "trivial_init_filtrated_prob_space M F"
locale triv_init_disc_filtr_prob_space
  fixes M :: "'a measure"
    and F :: "nat => 'a measure"
  assumes "triv_init_disc_filtr_prob_space M F"
### theory "Draft.Filtration"
### 1.224s elapsed time, 3.301s cpu time, 0.384s GC time
Loading theory "Draft.Martingale" (required by "Draft.Option_Price_ExamplesTemplates" via "Draft.Option_Price_Examples" via "Draft.CRR_Model" via "Draft.Fair_Price")
Loading theory "Draft.Infinite_Coin_Toss_Space" (required by "Draft.Option_Price_ExamplesTemplates" via "Draft.Option_Price_Examples" via "Draft.CRR_Model" via "Draft.Fair_Price" via "Draft.Geometric_Random_Walk")
### theory "Draft.Martingale"
### 0.079s elapsed time, 0.239s cpu time, 0.000s GC time
val eqpattern =
   Pattern
    (
       Const ("HOL.Trueprop", "bool => prop") $
         (Const ("HOL.eq", "?'a => ?'a => bool") $
           Var (("_dummy_", 1), "?'a") $ Var (("_dummy_", 2), "?'a"))
       ):
   term Find_Theorems.criterion
val badeqpattern = Pattern (Const ("Pure.eq", "?'a => ?'a => prop")):
   term Find_Theorems.criterion
val undefpattern =
   Pattern
    (
       Const ("HOL.Trueprop", "bool => prop") $
         (Const ("HOL.eq", "?'a => ?'a => bool") $
           Var (("_dummy_", 1), "?'a") $ Const ("HOL.undefined", "?'a"))
       ):
   term Find_Theorems.criterion
val thmpattern =
   Pattern
    (Const ("HOL.Trueprop", "bool => prop") $ Var (("_dummy_", 1), "bool")):
   term Find_Theorems.criterion
val badnames =
   ["*nitpick*", "*Nitpick*", "*full_exhaustive*", "*_def*", "Enum.finite*",
    "*Quickcheck*", "ATP*", "*Nunchaku*", "*Code*", "*BNF*", "*SMT*",
    "*.*.*"]:
   string list
val unwanted_names =
   [(false, Name "*nitpick*"), (false, Name "*Nitpick*"),
    (false, Name "*full_exhaustive*"), (false, Name "*_def*"),
    (false, Name "Enum.finite*"), (false, Name "*Quickcheck*"),
    (false, Name "ATP*"), (false, Name "*Nunchaku*"),
    (false, Name "*Code*"), (false, Name "*BNF*"), (false, Name "*SMT*"),
    (false, Name "*.*.*")]:
   (bool * term Find_Theorems.criterion) list
val has_vars = fn: term -> bool
val get_all_eqs = fn: string -> Proof.context -> (string * thm) list
val get_all_thms = fn: string -> Proof.context -> (string * thm) list
val get_noneq_thms = fn: string -> Proof.context -> (string * thm) list
val template_eqs = fn:
   string -> Proof.context -> (string * thm * template) list
val template_thms = fn:
   string -> Proof.context -> (string * thm * template) list
### theory "Draft.ExtrEqs"
### 0.688s elapsed time, 1.701s cpu time, 0.629s GC time
locale infinite_coin_toss_space
  fixes p :: "real"
    and M :: "bool stream measure"
  assumes "infinite_coin_toss_space p M"
locale infinite_cts_filtration
  fixes p :: "real"
    and M :: "bool stream measure"
    and F :: "nat => bool stream measure"
  assumes "infinite_cts_filtration p M F"
consts
  smap_stoch_proc :: "nat => (nat => 'a => 'b) => nat => 'a => 'b list"
### theory "Draft.Infinite_Coin_Toss_Space"
### 2.939s elapsed time, 4.193s cpu time, 1.593s GC time
Loading theory "Draft.Geometric_Random_Walk" (required by "Draft.Option_Price_ExamplesTemplates" via "Draft.Option_Price_Examples" via "Draft.CRR_Model" via "Draft.Fair_Price")
Found termination order: "(%p. size (snd (snd (snd p)))) <*mlex*> {}"
locale prob_grw
  fixes p :: "real"
    and M :: "bool stream measure"
    and geom_proc :: "nat => bool stream => real"
    and u :: "real"
    and d :: "real"
    and init :: "real"
  assumes "prob_grw p M geom_proc u d init"
### theory "Draft.Geometric_Random_Walk"
### 0.363s elapsed time, 0.438s cpu time, 0.103s GC time
Loading theory "Draft.Fair_Price" (required by "Draft.Option_Price_ExamplesTemplates" via "Draft.Option_Price_Examples" via "Draft.CRR_Model")
locale disc_equity_market
  fixes M :: "'a measure"
    and F :: "nat => 'a measure"
    and Mkt :: "('a, 'b) discrete_market"
  assumes "disc_equity_market M F"
Found termination order: "{}"
Found termination order: "(%p. size (snd (snd (snd (snd p))))) <*mlex*> {}"
locale disc_market_pos_stock
  fixes M :: "'a measure"
    and F :: "nat => 'a measure"
    and Mkt :: "('a, 'b) discrete_market"
    and pos_stock :: "'b"
  assumes "disc_market_pos_stock M F Mkt pos_stock"
Found termination order: "(%p. size (fst (snd p))) <*mlex*> {}"
locale rsk_free_asset
  fixes Mkt :: "('a, 'b) discrete_market"
    and r :: "real"
    and risk_free_asset :: "'b"
  assumes "rsk_free_asset Mkt r risk_free_asset"
locale rfr_disc_equity_market
  fixes M :: "'a measure"
    and F :: "nat => 'a measure"
    and Mkt :: "('a, 'b) discrete_market"
    and r :: "real"
    and risk_free_asset :: "'b"
  assumes "rfr_disc_equity_market M F Mkt r risk_free_asset"
### theory "Draft.Fair_Price"
### 2.511s elapsed time, 3.517s cpu time, 1.397s GC time
Loading theory "Draft.CRR_Model" (required by "Draft.Option_Price_ExamplesTemplates" via "Draft.Option_Price_Examples")
locale CRR_hyps
  fixes p :: "real"
    and M :: "bool stream measure"
    and geom_proc :: "nat => bool stream => real"
    and u :: "real"
    and d :: "real"
    and init :: "real"
    and Mkt :: "(bool stream, 'a) discrete_market"
    and r :: "real"
    and risk_free_asset :: "'a"
    and stk :: "'a"
  assumes "CRR_hyps p M geom_proc u d init Mkt r risk_free_asset stk"
locale CRR_market
  fixes p :: "real"
    and M :: "bool stream measure"
    and geom_proc :: "nat => bool stream => real"
    and u :: "real"
    and d :: "real"
    and init :: "real"
    and Mkt :: "(bool stream, 'a) discrete_market"
    and r :: "real"
    and risk_free_asset :: "'a"
    and stk :: "'a"
    and G :: "nat => bool stream measure"
  assumes "CRR_market p M geom_proc u d init Mkt r risk_free_asset stk G"
locale CRR_market_viable
  fixes p :: "real"
    and M :: "bool stream measure"
    and geom_proc :: "nat => bool stream => real"
    and u :: "real"
    and d :: "real"
    and init :: "real"
    and Mkt :: "(bool stream, 'a) discrete_market"
    and r :: "real"
    and risk_free_asset :: "'a"
    and stk :: "'a"
    and G :: "nat => bool stream measure"
  assumes
    "CRR_market_viable p M geom_proc u d init Mkt r risk_free_asset stk G"
Found termination order: "(%p. size (fst (snd (snd (snd p))))) <*mlex*> {}"
Found termination order: "{}"
### theory "Draft.CRR_Model"
### 3.120s elapsed time, 3.569s cpu time, 0.634s GC time
Loading theory "Draft.Option_Price_Examples" (required by "Draft.Option_Price_ExamplesTemplates")
Found termination order: "size <*mlex*> {}"
Found termination order: "(%p. length (snd p)) <*mlex*> {}"
Found termination order: "(%p. length (snd (snd (snd p)))) <*mlex*> {}"
Found termination order: "{}"
Found termination order: "(%p. size (snd p)) <*mlex*> {}"
Found termination order: "{}"
Found termination order: "{}"
Found termination order: "{}"
Found termination order: "{}"
### theory "Draft.Option_Price_Examples"
### 1.696s elapsed time, 2.238s cpu time, 0.329s GC time
Loading theory "Draft.Option_Price_ExamplesTemplates"
"13345 / 10609"
  :: "real"
val templateLemmas =
   [("Option_Price_Examples.gener_bool_list_elem_length",
     "?x : gener_bool_list ?n ==> length ?x = ?n",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 3, template_var 1),
              template_app (template_hole 2, template_var 0))
            )],
       template_equation
        (template_app (template_hole 0, template_var 1), template_var 0))),
    ("Option_Price_Examples.det_discounted",
     "discounted_value ?r ?X ?n ?w = det_discount ?r ?n * ?X ?n ?w",
     template_equation
      (template_app
        (template_app
          (template_app
            (template_app (template_hole 2, template_var 3),
             template_var 2),
           template_var 1),
         template_var 0),
       template_app
        (template_app
          (template_hole 1,
           template_app
            (template_app (template_hole 0, template_var 3),
             template_var 1)),
         template_app
          (template_app (template_var 2, template_var 1),
           template_var 0)))),
    ("Option_Price_Examples.lprob_comp_last",
     "lprob_comp ?p (?xs @ [?x]) =
      lprob_comp ?p ?xs * (if ?x then ?p else 1 - ?p)",
     template_equation
      (template_app
        (template_app (template_hole 7, template_var 2),
         template_app
          (template_app (template_hole 6, template_var 1),
           template_app
            (template_app (template_hole 5, template_var 0),
             template_hole 4))),
       template_app
        (template_app
          (template_hole 3,
           template_app
            (template_app (template_hole 7, template_var 2),
             template_var 1)),
         template_app
          (template_app
            (template_app (template_hole 2, template_var 0),
             template_var 2),
           template_app
            (template_app (template_hole 1, template_hole 0),
             template_var 2))))),
    ("Option_Price_Examples.lgeom_proc_take",
     "?i <= ?n ==>
      lgeom_proc ?u ?d ?init (stake ?i ?w) =
      lgeom_proc ?u ?d ?init (take ?i (stake ?n ?w))",
     template_implication
      ([template_inequation (less_equals, template_var 5, template_var 4)],
       template_equation
        (template_app
          (template_app
            (template_app
              (template_app (template_hole 2, template_var 3),
               template_var 2),
             template_var 1),
           template_app
            (template_app (template_hole 1, template_var 5),
             template_var 0)),
         template_app
          (template_app
            (template_app
              (template_app (template_hole 2, template_var 3),
               template_var 2),
             template_var 1),
           template_app
            (template_app (template_hole 0, template_var 5),
             template_app
              (template_app (template_hole 1, template_var 4),
               template_var 0)))))),
    ("Option_Price_Examples.borel_measurable_Max_finite",
     "[| 0 < ?n; card ?A = ?n; ALL a:?A. ?f a : borel_measurable ?M |]
      ==> (%w. MAX a\<in>?A. ?f a w) : borel_measurable ?M",
     template_implication
      ([template_inequation (less_than, template_hole 8, template_var 3),
        template_equation
         (template_app (template_hole 6, template_var 2), template_var 3),
        template_predicate
         (
            template_app
             (template_app (template_hole 5, template_var 2), t_empty)
            )],
       template_predicate
        (
           template_app
            (template_app (template_hole 4, t_empty),
             template_app
              (template_app (template_hole 3, template_var 0),
               template_hole 2))
           )))]:
   (string * thm * template) list
### theory "Draft.Option_Price_ExamplesTemplates"
### 1.240s elapsed time, 1.978s cpu time, 0.348s GC time
val it = (): unit
