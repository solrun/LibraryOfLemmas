Loading theory "Draft.Filtration" (required by "Draft.Geometric_Random_WalkTemplates" via "Draft.Geometric_Random_Walk" via "Draft.Infinite_Coin_Toss_Space")
Loading theory "HOL-Library.Function_Algebras" (required by "Draft.Geometric_Random_WalkTemplates" via "Draft.ExtrEqs" via "HOL-Library.BigO")
Loading theory "Draft.Generated_Subalgebra" (required by "Draft.Geometric_Random_WalkTemplates" via "Draft.Geometric_Random_Walk" via "Draft.Infinite_Coin_Toss_Space")
Loading theory "Draft.Templates" (required by "Draft.Geometric_Random_WalkTemplates" via "Draft.ExtrEqs")
instantiation
  fun :: (type, plus) plus
  plus_fun == plus :: ('a => 'b) => ('a => 'b) => 'a => 'b
instantiation
  fun :: (type, zero) zero
  zero_fun == zero_class.zero :: 'a => 'b
instantiation
  fun :: (type, times) times
  times_fun == times :: ('a => 'b) => ('a => 'b) => 'a => 'b
instantiation
  fun :: (type, one) one
  one_fun == one_class.one :: 'a => 'b
datatype template_term
=
     t_empty
   | template_app of template_term * template_term
   | template_hole of int
   | template_var of int
datatype sign
= equals | greater_equals | greater_than | less_equals | less_than
datatype template
=
     template_bimplication of template * template
   | template_dunno
   | template_equation of template_term * template_term
   | template_implication of template list * template
   | template_inequation of sign * template_term * template_term
   | template_negation of template
   | template_predicate of template_term
constructor t_empty: template_term
constructor template_app: template_term * template_term -> template_term
constructor template_hole: int -> template_term
constructor template_var: int -> template_term
constructor equals: sign
constructor greater_equals: sign
constructor greater_than: sign
constructor less_equals: sign
constructor less_than: sign
constructor template_bimplication: template * template -> template
constructor template_dunno: template
constructor template_equation: template_term * template_term -> template
constructor template_implication: template list * template -> template
constructor template_inequation:
   sign * template_term * template_term -> template
constructor template_negation: template -> template
constructor template_predicate: template_term -> template
val vfs = fn: term -> (indexname * typ) list * (string * typ) list
val indexOf = fn: ''a list -> ''a -> int -> int
val has_eq = fn: term -> bool
val term2template = fn:
   (indexname * typ) list -> (string * typ) list -> term -> template_term
val lemma2predicate = fn: term -> term -> template
val makeTemplatewithContext = fn: term -> term -> template
val lemma2template = fn: term -> template
val thm2template = fn: thm -> template
val tterm2string = fn: template_term -> string
val template2string = fn: template -> string
val t = "height ?t <= size ?t": thm
val th =
   Const ("HOL.Trueprop", "bool => prop") $
     (Const ("Orderings.ord_class.less_eq", "nat => nat => bool") $
       (Const ("Tree.height_class.height", "?'a tree => nat") $
         Var (("t", 0), "?'a tree")) $
       (Const ("Nat.size_class.size", "?'a tree => nat") $
         Var (("t", 0), "?'a tree"))):
   term
### theory "Draft.Templates"
### 0.071s elapsed time, 0.324s cpu time, 0.000s GC time
### theory "HOL-Library.Function_Algebras"
### 0.142s elapsed time, 0.523s cpu time, 0.037s GC time
Loading theory "HOL-Library.BigO" (required by "Draft.Geometric_Random_WalkTemplates" via "Draft.ExtrEqs")
### theory "Draft.Generated_Subalgebra"
### 0.222s elapsed time, 0.777s cpu time, 0.037s GC time
Loading theory "Draft.Disc_Cond_Expect" (required by "Draft.Geometric_Random_WalkTemplates" via "Draft.Geometric_Random_Walk" via "Draft.Infinite_Coin_Toss_Space")
instantiation
  nat :: linorder_bot
locale filtrated_prob_space
  fixes M :: "'a measure"
    and F :: "'b => 'a measure"
  assumes "filtrated_prob_space M F"
### theory "Draft.Disc_Cond_Expect"
### 0.423s elapsed time, 1.269s cpu time, 0.168s GC time
locale disc_filtr_prob_space
  fixes M :: "'a measure"
    and F :: "nat => 'a measure"
  assumes "disc_filtr_prob_space M F"
### theory "HOL-Library.BigO"
### 0.716s elapsed time, 2.007s cpu time, 0.280s GC time
Loading theory "Draft.ExtrEqs" (required by "Draft.Geometric_Random_WalkTemplates")
locale trivial_init_filtrated_prob_space
  fixes M :: "'a measure"
    and F :: "'b => 'a measure"
  assumes "trivial_init_filtrated_prob_space M F"
locale triv_init_disc_filtr_prob_space
  fixes M :: "'a measure"
    and F :: "nat => 'a measure"
  assumes "triv_init_disc_filtr_prob_space M F"
### theory "Draft.Filtration"
### 1.229s elapsed time, 3.285s cpu time, 0.387s GC time
Loading theory "Draft.Infinite_Coin_Toss_Space" (required by "Draft.Geometric_Random_WalkTemplates" via "Draft.Geometric_Random_Walk")
val eqpattern =
   Pattern
    (
       Const ("HOL.Trueprop", "bool => prop") $
         (Const ("HOL.eq", "?'a => ?'a => bool") $
           Var (("_dummy_", 1), "?'a") $ Var (("_dummy_", 2), "?'a"))
       ):
   term Find_Theorems.criterion
val badeqpattern = Pattern (Const ("Pure.eq", "?'a => ?'a => prop")):
   term Find_Theorems.criterion
val undefpattern =
   Pattern
    (
       Const ("HOL.Trueprop", "bool => prop") $
         (Const ("HOL.eq", "?'a => ?'a => bool") $
           Var (("_dummy_", 1), "?'a") $ Const ("HOL.undefined", "?'a"))
       ):
   term Find_Theorems.criterion
val thmpattern =
   Pattern
    (Const ("HOL.Trueprop", "bool => prop") $ Var (("_dummy_", 1), "bool")):
   term Find_Theorems.criterion
val badnames =
   ["*nitpick*", "*Nitpick*", "*full_exhaustive*", "*_def*", "Enum.finite*",
    "*Quickcheck*", "ATP*", "*Nunchaku*", "*Code*", "*BNF*", "*SMT*",
    "*.*.*"]:
   string list
val unwanted_names =
   [(false, Name "*nitpick*"), (false, Name "*Nitpick*"),
    (false, Name "*full_exhaustive*"), (false, Name "*_def*"),
    (false, Name "Enum.finite*"), (false, Name "*Quickcheck*"),
    (false, Name "ATP*"), (false, Name "*Nunchaku*"),
    (false, Name "*Code*"), (false, Name "*BNF*"), (false, Name "*SMT*"),
    (false, Name "*.*.*")]:
   (bool * term Find_Theorems.criterion) list
val has_vars = fn: term -> bool
val get_all_eqs = fn: string -> Proof.context -> (string * thm) list
val get_all_thms = fn: string -> Proof.context -> (string * thm) list
val get_noneq_thms = fn: string -> Proof.context -> (string * thm) list
val template_eqs = fn:
   string -> Proof.context -> (string * thm * template) list
val template_thms = fn:
   string -> Proof.context -> (string * thm * template) list
### theory "Draft.ExtrEqs"
### 0.716s elapsed time, 1.653s cpu time, 0.629s GC time
locale infinite_coin_toss_space
  fixes p :: "real"
    and M :: "bool stream measure"
  assumes "infinite_coin_toss_space p M"
locale infinite_cts_filtration
  fixes p :: "real"
    and M :: "bool stream measure"
    and F :: "nat => bool stream measure"
  assumes "infinite_cts_filtration p M F"
consts
  smap_stoch_proc :: "nat => (nat => 'a => 'b) => nat => 'a => 'b list"
### theory "Draft.Infinite_Coin_Toss_Space"
### 2.979s elapsed time, 4.259s cpu time, 1.658s GC time
Loading theory "Draft.Geometric_Random_Walk" (required by "Draft.Geometric_Random_WalkTemplates")
Found termination order: "(%p. size (snd (snd (snd p)))) <*mlex*> {}"
locale prob_grw
  fixes p :: "real"
    and M :: "bool stream measure"
    and geom_proc :: "nat => bool stream => real"
    and u :: "real"
    and d :: "real"
    and init :: "real"
  assumes "prob_grw p M geom_proc u d init"
### theory "Draft.Geometric_Random_Walk"
### 0.382s elapsed time, 0.453s cpu time, 0.098s GC time
Loading theory "Draft.Geometric_Random_WalkTemplates"
val templateLemmas = []: (string * thm * template) list
### theory "Draft.Geometric_Random_WalkTemplates"
### 1.145s elapsed time, 1.428s cpu time, 0.205s GC time
val it = (): unit
