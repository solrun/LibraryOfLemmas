   [("Filtration.filtrationE1",
     "Filtration.filtration ?M ?F ==> subalgebra ?M (?F ?t)",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 1, template_var 2),
              template_var 1)
            )],
       template_predicate
        (
           template_app
            (template_app (template_hole 0, template_var 2),
             template_app (template_var 1, template_var 0))
           ))),
    ("Filtration.filt_equiv_imp_subalgebra",
     "filt_equiv ?F ?M ?N ==> subalgebra ?N ?M",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app (template_hole 1, template_var 2),
                template_var 1),
              template_var 0)
            )],
       template_predicate
        (
           template_app
            (template_app (template_hole 0, template_var 0), template_var 1)
           ))),
    ("Filtration.filt_equiv_filtration",
     "filt_equiv ?F ?M ?N ==> Filtration.filtration ?N ?F",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app (template_hole 1, template_var 2),
                template_var 1),
              template_var 0)
            )],
       template_predicate
        (
           template_app
            (template_app (template_hole 0, template_var 0), template_var 2)
           ))),
    ("Filtration.open_exceptI", "?x ~= ?y ==> open (open_except ?x ?y)",
     template_implication
      ([template_negation
         (template_equation (template_var 1, template_var 0))],
       template_predicate
        (
           template_app
            (template_hole 1,
             template_app
              (template_app (template_hole 0, template_var 1),
               template_var 0))
           ))),
    ("Filtration.filt_equiv_space",
     "filt_equiv ?F ?M ?N ==> space ?M = space ?N",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app (template_hole 2, template_var 2),
                template_var 1),
              template_var 0)
            )],
       template_equation
        (template_app (template_hole 0, template_var 1),
         template_app (template_hole 0, template_var 0)))),
    ("Filtration.filt_equiv_sets",
     "filt_equiv ?F ?M ?N ==> sets ?M = sets ?N",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app (template_hole 2, template_var 2),
                template_var 1),
              template_var 0)
            )],
       template_equation
        (template_app (template_hole 0, template_var 1),
         template_app (template_hole 0, template_var 0)))),
    ("Filtration.open_exceptI", "?x ~= ?y ==> ?x : open_except ?x ?y",
     template_implication
      ([template_negation
         (template_equation (template_var 1, template_var 0))],
       template_predicate
        (
           template_app
            (template_app (template_hole 1, template_var 1),
             template_app
              (template_app (template_hole 0, template_var 1),
               template_var 0))
           ))),
    ("Filtration.open_exceptI", "?x ~= ?y ==> ?y ~: open_except ?x ?y",
     template_implication
      ([template_negation
         (template_equation (template_var 1, template_var 0))],
       template_negation
        (
           template_predicate
            (
               template_app
                (template_app (template_hole 1, template_var 0),
                 template_app
                  (template_app (template_hole 0, template_var 1),
                   template_var 0))
               )
           ))),
    ("Filtration.open_set",
     "[| finite ?A; ?x : ?A |] ==> open (open_exclude_set ?x ?A)",
     template_implication
      ([template_predicate (template_app (template_hole 3, template_var 1)),
        template_predicate
         (
            template_app
             (template_app (template_hole 2, template_var 0),
              template_var 1)
            )],
       template_predicate
        (
           template_app
            (template_hole 1,
             template_app
              (template_app (template_hole 0, template_var 0),
               template_var 1))
           ))),
    ("Filtration.filtrationE2",
     "[| Filtration.filtration ?M ?F; ?s <= ?t |]
      ==> subalgebra (?F ?t) (?F ?s)",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 2, template_var 3),
              template_var 2)
            ),
        template_inequation (less_equals, template_var 1, template_var 0)],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 0,
               template_app (template_var 2, template_var 0)),
             template_app (template_var 2, template_var 1))
           ))),
    ("Filtration.open_exclude_setI",
     "EX U. open U & U Int ?A = {?x} ==> open (open_exclude_set ?x ?A)",
     template_implication
      ([template_predicate (template_app (template_hole 7, t_empty))],
       template_predicate
        (
           template_app
            (template_hole 5,
             template_app
              (template_app (template_hole 0, template_var 0),
               template_var 1))
           ))),
    ("Filtration.inter_x",
     "[| finite ?A; ?x : ?A |] ==> open_exclude_set ?x ?A Int ?A = {?x}",
     template_implication
      ([template_predicate (template_app (template_hole 6, template_var 1)),
        template_predicate
         (
            template_app
             (template_app (template_hole 5, template_var 0),
              template_var 1)
            )],
       template_equation
        (template_app
          (template_app
            (template_hole 3,
             template_app
              (template_app (template_hole 2, template_var 0),
               template_var 1)),
           template_var 1),
         template_app
          (template_app (template_hole 1, template_var 0),
           template_hole 0)))),
    ("Filtration.filt_equiv_measurable",
     "[| filt_equiv ?F ?M ?N; ?f : ?M \<rightarrow>\<^sub>M ?P |]
      ==> ?f : ?N \<rightarrow>\<^sub>M ?P",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app (template_hole 2, template_var 4),
                template_var 3),
              template_var 2)
            ),
        template_predicate
         (
            template_app
             (template_app (template_hole 1, template_var 1),
              template_app
               (template_app (template_hole 0, template_var 3),
                template_var 0))
            )],
       template_predicate
        (
           template_app
            (template_app (template_hole 1, template_var 1),
             template_app
              (template_app (template_hole 0, template_var 2),
               template_var 0))
           ))),
    ("Filtration.filt_equiv_prob_space_subalgebra",
     "[| prob_space ?N; filt_equiv ?F ?M ?N;
         sigma_finite_subalgebra ?M ?G |]
      ==> sigma_finite_subalgebra ?N ?G",
     template_implication
      ([template_predicate (template_app (template_hole 2, template_var 3)),
        template_predicate
         (
            template_app
             (template_app
               (template_app (template_hole 1, template_var 2),
                template_var 1),
              template_var 3)
            ),
        template_predicate
         (
            template_app
             (template_app (template_hole 0, template_var 1),
              template_var 0)
            )],
       template_predicate
        (
           template_app
            (template_app (template_hole 0, template_var 3), template_var 0)
           ))),
    ("Filtration.open_exclude_setI",
     "EX U. open U & U Int ?A = {?x} ==>
      open_exclude_set ?x ?A Int ?A = {?x}",
     template_implication
      ([template_predicate (template_app (template_hole 7, t_empty))],
       template_equation
        (template_app
          (template_app
            (template_hole 3,
             template_app
              (template_app (template_hole 0, template_var 0),
               template_var 1)),
           template_var 1),
         template_app
          (template_app (template_hole 2, template_var 0),
           template_hole 1)))),
    ("Filtration.open_except_set",
     "[| finite ?A; ?x ~: ?A |] ==> EX U. open U & ?x : U & U Int ?A = {}",
     template_implication
      ([template_predicate (template_app (template_hole 8, template_var 1)),
        template_negation
         (
            template_predicate
             (
                template_app
                 (template_app (template_hole 6, template_var 0),
                  template_var 1)
                )
            )],
       template_predicate (template_app (template_hole 5, t_empty)))),
    ("Filtration.filtrationI",
     "[| ALL t. subalgebra ?M (?F t);
         ALL s t. s <= t --> subalgebra (?F t) (?F s) |]
      ==> Filtration.filtration ?M ?F",
     template_implication
      ([template_predicate (template_app (template_hole 4, t_empty)),
        template_predicate (template_app (template_hole 4, t_empty))],
       template_predicate
        (
           template_app
            (template_app (template_hole 0, template_var 1), template_var 0)
           ))),
    ("Filtration.triv_measurable_cst",
     "[| space ?N = space ?M; space ?M ~= {}; sets ?N = {{}, space ?M};
         ?f : borel_measurable ?N |]
      ==> EX c. ALL x:space ?N. ?f x = c",
     template_implication
      ([template_equation
         (template_app (template_hole 12, template_var 2),
          template_app (template_hole 12, template_var 1)),
        template_negation
         (
            template_equation
             (template_app (template_hole 12, template_var 1),
              template_hole 10)
            ),
        template_equation
         (template_app (template_hole 8, template_var 2),
          template_app
           (template_app (template_hole 7, template_hole 10),
            template_app
             (template_app
               (template_hole 7,
                template_app (template_hole 12, template_var 1)),
              template_hole 6))),
        template_predicate
         (
            template_app
             (template_app (template_hole 5, template_var 0),
              template_app
               (template_app (template_hole 4, template_var 2),
                template_hole 3))
            )],
       template_predicate (template_app (template_hole 2, t_empty))))]
