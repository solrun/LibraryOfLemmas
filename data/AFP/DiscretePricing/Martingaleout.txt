Loading theory "Draft.Filtration" (required by "Draft.MartingaleTemplates" via "Draft.Martingale")
Loading theory "HOL-Library.Function_Algebras" (required by "Draft.MartingaleTemplates" via "Draft.ExtrEqs" via "HOL-Library.BigO")
Loading theory "Draft.Templates" (required by "Draft.MartingaleTemplates" via "Draft.ExtrEqs")
instantiation
  fun :: (type, plus) plus
  plus_fun == plus :: ('a => 'b) => ('a => 'b) => 'a => 'b
instantiation
  fun :: (type, zero) zero
  zero_fun == zero_class.zero :: 'a => 'b
instantiation
  fun :: (type, times) times
  times_fun == times :: ('a => 'b) => ('a => 'b) => 'a => 'b
instantiation
  fun :: (type, one) one
  one_fun == one_class.one :: 'a => 'b
datatype template_term
=
     t_empty
   | template_app of template_term * template_term
   | template_hole of int
   | template_var of int
datatype sign
= equals | greater_equals | greater_than | less_equals | less_than
datatype template
=
     template_bimplication of template * template
   | template_dunno
   | template_equation of template_term * template_term
   | template_implication of template list * template
   | template_inequation of sign * template_term * template_term
   | template_negation of template
   | template_predicate of template_term
constructor t_empty: template_term
constructor template_app: template_term * template_term -> template_term
constructor template_hole: int -> template_term
constructor template_var: int -> template_term
constructor equals: sign
constructor greater_equals: sign
constructor greater_than: sign
constructor less_equals: sign
constructor less_than: sign
constructor template_bimplication: template * template -> template
constructor template_dunno: template
constructor template_equation: template_term * template_term -> template
constructor template_implication: template list * template -> template
constructor template_inequation:
   sign * template_term * template_term -> template
constructor template_negation: template -> template
constructor template_predicate: template_term -> template
val vfs = fn: term -> (indexname * typ) list * (string * typ) list
val indexOf = fn: ''a list -> ''a -> int -> int
val has_eq = fn: term -> bool
val term2template = fn:
   (indexname * typ) list -> (string * typ) list -> term -> template_term
val lemma2predicate = fn: term -> term -> template
val makeTemplatewithContext = fn: term -> term -> template
val lemma2template = fn: term -> template
val thm2template = fn: thm -> template
val tterm2string = fn: template_term -> string
val template2string = fn: template -> string
val t = "height ?t <= size ?t": thm
val th =
   Const ("HOL.Trueprop", "bool => prop") $
     (Const ("Orderings.ord_class.less_eq", "nat => nat => bool") $
       (Const ("Tree.height_class.height", "?'a tree => nat") $
         Var (("t", 0), "?'a tree")) $
       (Const ("Nat.size_class.size", "?'a tree => nat") $
         Var (("t", 0), "?'a tree"))):
   term
### theory "Draft.Templates"
### 0.072s elapsed time, 0.247s cpu time, 0.000s GC time
### theory "HOL-Library.Function_Algebras"
### 0.134s elapsed time, 0.370s cpu time, 0.000s GC time
Loading theory "HOL-Library.BigO" (required by "Draft.MartingaleTemplates" via "Draft.ExtrEqs")
instantiation
  nat :: linorder_bot
locale filtrated_prob_space
  fixes M :: "'a measure"
    and F :: "'b => 'a measure"
  assumes "filtrated_prob_space M F"
locale disc_filtr_prob_space
  fixes M :: "'a measure"
    and F :: "nat => 'a measure"
  assumes "disc_filtr_prob_space M F"
### theory "HOL-Library.BigO"
### 0.588s elapsed time, 1.194s cpu time, 0.036s GC time
Loading theory "Draft.ExtrEqs" (required by "Draft.MartingaleTemplates")
locale trivial_init_filtrated_prob_space
  fixes M :: "'a measure"
    and F :: "'b => 'a measure"
  assumes "trivial_init_filtrated_prob_space M F"
locale triv_init_disc_filtr_prob_space
  fixes M :: "'a measure"
    and F :: "nat => 'a measure"
  assumes "triv_init_disc_filtr_prob_space M F"
### theory "Draft.Filtration"
### 1.145s elapsed time, 2.498s cpu time, 0.311s GC time
Loading theory "Draft.Martingale" (required by "Draft.MartingaleTemplates")
### theory "Draft.Martingale"
### 0.079s elapsed time, 0.155s cpu time, 0.000s GC time
val eqpattern =
   Pattern
    (
       Const ("HOL.Trueprop", "bool => prop") $
         (Const ("HOL.eq", "?'a => ?'a => bool") $
           Var (("_dummy_", 1), "?'a") $ Var (("_dummy_", 2), "?'a"))
       ):
   term Find_Theorems.criterion
val badeqpattern = Pattern (Const ("Pure.eq", "?'a => ?'a => prop")):
   term Find_Theorems.criterion
val undefpattern =
   Pattern
    (
       Const ("HOL.Trueprop", "bool => prop") $
         (Const ("HOL.eq", "?'a => ?'a => bool") $
           Var (("_dummy_", 1), "?'a") $ Const ("HOL.undefined", "?'a"))
       ):
   term Find_Theorems.criterion
val thmpattern =
   Pattern
    (Const ("HOL.Trueprop", "bool => prop") $ Var (("_dummy_", 1), "bool")):
   term Find_Theorems.criterion
val badnames =
   ["*nitpick*", "*Nitpick*", "*full_exhaustive*", "*_def*", "Enum.finite*",
    "*Quickcheck*", "ATP*", "*Nunchaku*", "*Code*", "*BNF*", "*SMT*",
    "*.*.*"]:
   string list
val unwanted_names =
   [(false, Name "*nitpick*"), (false, Name "*Nitpick*"),
    (false, Name "*full_exhaustive*"), (false, Name "*_def*"),
    (false, Name "Enum.finite*"), (false, Name "*Quickcheck*"),
    (false, Name "ATP*"), (false, Name "*Nunchaku*"),
    (false, Name "*Code*"), (false, Name "*BNF*"), (false, Name "*SMT*"),
    (false, Name "*.*.*")]:
   (bool * term Find_Theorems.criterion) list
val has_vars = fn: term -> bool
val get_all_eqs = fn: string -> Proof.context -> (string * thm) list
val get_all_thms = fn: string -> Proof.context -> (string * thm) list
val get_noneq_thms = fn: string -> Proof.context -> (string * thm) list
val template_eqs = fn:
   string -> Proof.context -> (string * thm * template) list
val template_thms = fn:
   string -> Proof.context -> (string * thm * template) list
### theory "Draft.ExtrEqs"
### 0.532s elapsed time, 1.095s cpu time, 0.214s GC time
Loading theory "Draft.MartingaleTemplates"
val templateLemmas =
   [("Martingale.martingaleAE",
     "[| martingale ?M ?F ?X; ?t <= ?s |]
      ==> AE w in ?M. real_cond_exp ?M (?F ?t) (?X ?s) w = ?X ?t w",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app (template_hole 5, template_var 4),
                template_var 3),
              template_var 2)
            ),
        template_inequation (less_equals, template_var 1, template_var 0)],
       template_predicate
        (
           template_app
            (template_app (template_hole 3, t_empty),
             template_app (template_hole 0, template_var 4))
           ))),
    ("Martingale.martingale_add",
     "[| martingale ?M ?F ?X; martingale ?M ?F ?Y;
         ALL m. sigma_finite_subalgebra ?M (?F m) |]
      ==> martingale ?M ?F (%n w. ?X n w + ?Y n w)",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app (template_hole 3, template_var 3),
                template_var 2),
              template_var 1)
            ),
        template_predicate
         (
            template_app
             (template_app
               (template_app (template_hole 3, template_var 3),
                template_var 2),
              template_var 0)
            ),
        template_predicate (template_app (template_hole 2, t_empty))],
       template_predicate
        (
           template_app
            (template_app
              (template_app (template_hole 3, template_var 3),
               template_var 2),
             t_empty)
           ))),
    ("Martingale.disc_martingale_charact",
     "[| ALL n. integrable ?M (?X n); Filtration.filtration ?M ?F;
         ALL m. sigma_finite_subalgebra ?M (?F m);
         ALL m. ?X m : borel_measurable (?F m);
         ALL n.
            AE w in ?M. real_cond_exp ?M (?F n) (?X (Suc n)) w = ?X n w |]
      ==> martingale ?M ?F ?X",
     template_implication
      ([template_predicate (template_app (template_hole 12, t_empty)),
        template_predicate
         (
            template_app
             (template_app (template_hole 10, template_var 2),
              template_var 0)
            ),
        template_predicate (template_app (template_hole 12, t_empty)),
        template_predicate (template_app (template_hole 12, t_empty)),
        template_predicate (template_app (template_hole 12, t_empty))],
       template_predicate
        (
           template_app
            (template_app
              (template_app (template_hole 0, template_var 2),
               template_var 0),
             template_var 1)
           )))]:
   (string * thm * template) list
### theory "Draft.MartingaleTemplates"
### 1.306s elapsed time, 1.953s cpu time, 0.641s GC time
val it = (): unit
