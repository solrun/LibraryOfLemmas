Loading theory "Draft.Timed_Automata" (required by "Draft.RegionsMoreTemplates" via "Draft.Regions")
Loading theory "HOL-Library.Function_Algebras" (required by "Draft.RegionsMoreTemplates" via "Draft.ExtrEqs" via "HOL-Library.BigO")
Loading theory "HOL-Library.Nat_Bijection" (required by "Draft.RegionsMoreTemplates" via "Draft.ExtrEqs" via "HOL-Library.Stream")
Loading theory "HOL-Library.Set_Algebras" (required by "Draft.RegionsMoreTemplates" via "Draft.ExtrEqs" via "HOL-Library.BigO")
instantiation
  fun :: (type, plus) plus
  plus_fun == plus :: ('a => 'b) => ('a => 'b) => 'a => 'b
instantiation
  set :: (plus) plus
  plus_set == plus :: 'a set => 'a set => 'a set
instantiation
  fun :: (type, zero) zero
  zero_fun == zero_class.zero :: 'a => 'b
instantiation
  set :: (times) times
  times_set == times :: 'a set => 'a set => 'a set
instantiation
  fun :: (type, times) times
  times_fun == times :: ('a => 'b) => ('a => 'b) => 'a => 'b
instantiation
  set :: (zero) zero
  zero_set == zero_class.zero :: 'a set
instantiation
  fun :: (type, one) one
  one_fun == one_class.one :: 'a => 'b
instantiation
  set :: (one) one
  one_set == one_class.one :: 'a set
Found termination order: "(%p. size (snd p)) <*mlex*> {}"
### theory "HOL-Library.Function_Algebras"
### 0.123s elapsed time, 0.509s cpu time, 0.040s GC time
Loading theory "HOL-Library.Tree" (required by "Draft.RegionsMoreTemplates" via "Draft.ExtrEqs" via "Draft.Templates")
Found termination order: "size_list size <*mlex*> {}"
### theory "HOL-Library.Set_Algebras"
### 0.216s elapsed time, 0.880s cpu time, 0.040s GC time
Loading theory "Draft.Misc" (required by "Draft.RegionsMoreTemplates" via "Draft.Regions")
### theory "HOL-Library.Nat_Bijection"
### 0.319s elapsed time, 1.275s cpu time, 0.108s GC time
Loading theory "HOL-Library.Stream" (required by "Draft.RegionsMoreTemplates" via "Draft.ExtrEqs")
locale enumerateable
  fixes T :: "'a set"
    and less :: "'a => 'a => bool"  (infix \<open>\<prec>\<close> 50)
  assumes "enumerateable T (\<prec>)"
Found termination order: "(%p. size (snd p)) <*mlex*> {}"
Proofs for inductive predicate(s) "sorted"
  Proving monotonicity ...
class time = linordered_ab_group_add +
  assumes "dense": "!!x y. x < y ==> EX z>x. z < y"
  assumes "non_trivial": "EX x. x ~= (0::'a)"
### theory "Draft.Misc"
### 0.420s elapsed time, 1.649s cpu time, 0.217s GC time
Loading theory "HOL-Library.BigO" (required by "Draft.RegionsMoreTemplates" via "Draft.ExtrEqs")
consts
  left :: "'a tree => 'a tree"
consts
  right :: "'a tree => 'a tree"
Found termination order: "size <*mlex*> {}"
consts
  shift :: "'a list => 'a stream => 'a stream"
Proofs for coinductive predicate(s) "streamsp"
  Proving monotonicity ...
Found termination order: "size <*mlex*> {}"
consts
  snth :: "'a stream => nat => 'a"
Found termination order: "size <*mlex*> {}"
consts
  stake :: "nat => 'a stream => 'a list"
consts
  sdrop :: "nat => 'a stream => 'a stream"
class height = type +
  fixes height :: "'a => nat"
instantiation
  tree :: (type) height
  height_tree == height :: 'a tree => nat
consts
  sfilter :: "('a => bool) => 'a stream => 'a stream"
Found termination order: "size <*mlex*> {}"
consts
  cycle :: "'a list => 'a stream"
consts
  siterate :: "('a => 'a) => 'a => 'a stream"
Found termination order: "size <*mlex*> {}"
consts
  flat :: "'a list stream => 'a stream"
Found termination order: "size <*mlex*> {}"
consts
  sinterleave :: "'a stream => 'a stream => 'a stream"
consts
  szip :: "'a stream => 'b stream => ('a * 'b) stream"
Found termination order: "size <*mlex*> {}"
consts
  smap2 :: "('a => 'b => 'c) => 'a stream => 'b stream => 'c stream"
### theory "HOL-Library.Stream"
### 1.137s elapsed time, 4.326s cpu time, 0.972s GC time
Found termination order: "size <*mlex*> {}"
Found termination order: "size <*mlex*> {}"
Found termination order: "size <*mlex*> {}"
### theory "HOL-Library.BigO"
### 1.036s elapsed time, 3.744s cpu time, 0.940s GC time
Found termination order: "(%p. size (fst p)) <*mlex*> {}"
Found termination order: "size <*mlex*> {}"
Found termination order: "(%p. size (snd p)) <*mlex*> {}"
Found termination order: "size <*mlex*> {}"
Found termination order: "size <*mlex*> {}"
### theory "HOL-Library.Tree"
### 2.082s elapsed time, 6.956s cpu time, 1.334s GC time
Loading theory "Draft.Templates" (required by "Draft.RegionsMoreTemplates" via "Draft.ExtrEqs")
Found termination order: "size <*mlex*> {}"
datatype template_term
=
     t_empty
   | template_app of template_term * template_term
   | template_hole of int
   | template_var of int
datatype sign
= equals | greater_equals | greater_than | less_equals | less_than
datatype template
=
     template_bimplication of template * template
   | template_dunno
   | template_equation of template_term * template_term
   | template_implication of template list * template
   | template_inequation of sign * template_term * template_term
   | template_negation of template
   | template_predicate of template_term
constructor t_empty: template_term
constructor template_app: template_term * template_term -> template_term
constructor template_hole: int -> template_term
constructor template_var: int -> template_term
constructor equals: sign
constructor greater_equals: sign
constructor greater_than: sign
constructor less_equals: sign
constructor less_than: sign
constructor template_bimplication: template * template -> template
constructor template_dunno: template
constructor template_equation: template_term * template_term -> template
constructor template_implication: template list * template -> template
constructor template_inequation:
   sign * template_term * template_term -> template
constructor template_negation: template -> template
constructor template_predicate: template_term -> template
val vfs = fn: term -> (indexname * typ) list * (string * typ) list
val indexOf = fn: ''a list -> ''a -> int -> int
val has_eq = fn: term -> bool
val term2template = fn:
   (indexname * typ) list -> (string * typ) list -> term -> template_term
val lemma2predicate = fn: term -> term -> template
val makeTemplatewithContext = fn: term -> term -> template
val lemma2template = fn: term -> template
val thm2template = fn: thm -> template
val tterm2string = fn: template_term -> string
val template2string = fn: template -> string
val t = "height ?t <= size ?t": thm
val th =
   Const ("HOL.Trueprop", "bool => prop") $
     (Const ("Orderings.ord_class.less_eq", "nat => nat => bool") $
       (Const ("Tree.height_class.height", "?'a tree => nat") $
         Var (("t", 0), "?'a tree")) $
       (Const ("Nat.size_class.size", "?'a tree => nat") $
         Var (("t", 0), "?'a tree"))):
   term
### theory "Draft.Templates"
### 0.054s elapsed time, 0.110s cpu time, 0.000s GC time
Loading theory "Draft.ExtrEqs" (required by "Draft.RegionsMoreTemplates")
Proofs for inductive predicate(s) "valid_abstraction"
  Proving monotonicity ...
Proofs for inductive predicate(s) "clock_val"
  Proving monotonicity ...
Found termination order: "(%p. length (fst p)) <*mlex*> {}"
Proofs for inductive predicate(s) "step_t"
  Proving monotonicity ...
Proofs for inductive predicate(s) "step_a"
  Proving monotonicity ...
Proofs for inductive predicate(s) "step"
  Proving monotonicity ...
Proofs for inductive predicate(s) "steps"
  Proving monotonicity ...
Proofs for inductive predicate(s) "step_z"
  Proving monotonicity ...
Proofs for inductive predicate(s) "steps_z"
  Proving monotonicity ...
### theory "Draft.Timed_Automata"
### 2.687s elapsed time, 8.460s cpu time, 1.433s GC time
Loading theory "Draft.Regions" (required by "Draft.RegionsMoreTemplates")
val eqpattern =
   Pattern
    (
       Const ("HOL.Trueprop", "bool => prop") $
         (Const ("HOL.eq", "?'a => ?'a => bool") $
           Var (("_dummy_", 1), "?'a") $ Var (("_dummy_", 2), "?'a"))
       ):
   term Find_Theorems.criterion
val badeqpattern = Pattern (Const ("Pure.eq", "?'a => ?'a => prop")):
   term Find_Theorems.criterion
val undefpattern =
   Pattern
    (
       Const ("HOL.Trueprop", "bool => prop") $
         (Const ("HOL.eq", "?'a => ?'a => bool") $
           Var (("_dummy_", 1), "?'a") $ Const ("HOL.undefined", "?'a"))
       ):
   term Find_Theorems.criterion
val thmpattern =
   Pattern
    (Const ("HOL.Trueprop", "bool => prop") $ Var (("_dummy_", 1), "bool")):
   term Find_Theorems.criterion
val badnames =
   ["*nitpick*", "*Nitpick*", "*full_exhaustive*", "*_def*", "Enum.finite*",
    "*Quickcheck*", "ATP*", "*Nunchaku*", "*Code*", "*BNF*", "*SMT*",
    "*.*.*"]:
   string list
val unwanted_names =
   [(false, Name "*nitpick*"), (false, Name "*Nitpick*"),
    (false, Name "*full_exhaustive*"), (false, Name "*_def*"),
    (false, Name "Enum.finite*"), (false, Name "*Quickcheck*"),
    (false, Name "ATP*"), (false, Name "*Nunchaku*"),
    (false, Name "*Code*"), (false, Name "*BNF*"), (false, Name "*SMT*"),
    (false, Name "*.*.*")]:
   (bool * term Find_Theorems.criterion) list
val has_vars = fn: term -> bool
val get_all_eqs = fn: string -> Proof.context -> (string * thm) list
val get_all_thms = fn: string -> Proof.context -> (string * thm) list
val get_noneq_thms = fn: string -> Proof.context -> (string * thm) list
val template_eqs = fn:
   string -> Proof.context -> (string * thm * template) list
val template_thms = fn:
   string -> Proof.context -> (string * thm * template) list
### theory "Draft.ExtrEqs"
### 0.574s elapsed time, 1.264s cpu time, 0.185s GC time
instantiation
  real :: time
Proofs for inductive predicate(s) "valid_intv"
  Proving monotonicity ...
Proofs for inductive predicate(s) "intv_elem"
  Proving monotonicity ...
Proofs for inductive predicate(s) "valid_region"
  Proving monotonicity ...
Proofs for inductive predicate(s) "regionp"
  Proving monotonicity ...
Proofs for inductive predicate(s) "Succp"
  Proving monotonicity ...
Found termination order: "{}"
Found termination order: "{}"
Proofs for inductive predicate(s) "isConst"
  Proving monotonicity ...
Proofs for inductive predicate(s) "isIntv"
  Proving monotonicity ...
Proofs for inductive predicate(s) "isGreater"
  Proving monotonicity ...
Proofs for inductive predicate(s) "step_r"
  Proving monotonicity ...
Proofs for inductive predicate(s) "steps_r"
  Proving monotonicity ...
### theory "Draft.Regions"
### 1.837s elapsed time, 2.710s cpu time, 1.099s GC time
Loading theory "Draft.RegionsMoreTemplates"
val templateLemmas =
   [("Regions.single_step",
     "?x1.0 \<turnstile> \<langle>?x2.0, ?x3.0\<rangle> \<rightarrow> \<langle>?x4.0,?x5.0\<rangle> ==>
      ?x1.0 \<turnstile> \<langle>?x2.0, ?x3.0\<rangle> \<rightarrow>* \<langle>?x4.0, ?x5.0\<rangle>",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_app
                   (template_app (template_hole 1, template_var 4),
                    template_var 3),
                  template_var 2),
                template_var 1),
              template_var 0)
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_app
                (template_app
                  (template_app (template_hole 0, template_var 4),
                   template_var 3),
                 template_var 2),
               template_var 1),
             template_var 0)
           ))),
    ("Regions.Succp_Succ_eq",
     "Succp (%x. x : ?\<R>) (%x. x : ?R) = (%x. x : Succ ?\<R> ?R)",
     template_equation
      (template_app (template_app (template_hole 3, t_empty), t_empty),
       t_empty)),
    ("Regions.single_step_r",
     "?A,?\<R> \<turnstile> \<langle>?l, ?R\<rangle> \<leadsto> \<langle>?l', ?R'\<rangle> ==>
      ?A,?\<R> \<turnstile> \<langle>?l, ?R\<rangle> \<leadsto>* \<langle>?l', ?R'\<rangle>",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_app
                   (template_app
                     (template_app (template_hole 1, template_var 5),
                      template_var 4),
                    template_var 3),
                  template_var 2),
                template_var 1),
              template_var 0)
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_app
                (template_app
                  (template_app
                    (template_app (template_hole 0, template_var 5),
                     template_var 4),
                   template_var 3),
                 template_var 2),
               template_var 1),
             template_var 0)
           ))),
    ("Regions.intv_not_empty",
     "(!!d. intv_elem ?x (?v(?x := d)) (?I ?x) ==> ?thesis) ==> ?thesis",
     template_implication
      ([template_predicate (template_app (template_hole 3, t_empty))],
       template_predicate (template_var 0))),
    ("Regions.emptiness_preservance",
     "[| ?A,?\<R> \<turnstile> \<langle>?l, ?R\<rangle> \<leadsto> \<langle>?l', ?R'\<rangle>;
         ?R = {} |]
      ==> ?R' = {}",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_app
                   (template_app
                     (template_app (template_hole 2, template_var 5),
                      template_var 4),
                    template_var 3),
                  template_var 2),
                template_var 1),
              template_var 0)
            ),
        template_equation (template_var 2, template_hole 0)],
       template_equation (template_var 0, template_hole 0))),
    ("Regions.emptiness_preservance_steps",
     "[| ?A,?\<R> \<turnstile> \<langle>?l, ?R\<rangle> \<leadsto>* \<langle>?l', ?R'\<rangle>;
         ?R = {} |]
      ==> ?R' = {}",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_app
                   (template_app
                     (template_app (template_hole 2, template_var 5),
                      template_var 4),
                    template_var 3),
                  template_var 2),
                template_var 1),
              template_var 0)
            ),
        template_equation (template_var 2, template_hole 0)],
       template_equation (template_var 0, template_hole 0))),
    ("Regions.region_not_empty",
     "[| finite ?X; valid_region ?X ?k ?I ?r |]
      ==> EX u. u : region ?X ?I ?r",
     template_implication
      ([template_predicate (template_app (template_hole 4, template_var 3)),
        template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_app (template_hole 3, template_var 3),
                  template_var 2),
                template_var 1),
              template_var 0)
            )],
       template_predicate (template_app (template_hole 2, t_empty)))),
    ("Regions.regionp_region_eq",
     "regionp (%x. x : ?X) ?I (%x xa. (x, xa) : ?r) =
      (%x. x : region ?X ?I ?r)",
     template_equation
      (template_app
        (template_app
          (template_app (template_hole 5, t_empty), template_var 1),
         t_empty),
       t_empty)),
    ("Regions.steps_alt",
     "[| ?A \<turnstile> \<langle>?l, ?u\<rangle> \<rightarrow>* \<langle>?l', ?u'\<rangle>;
         ?A \<turnstile> \<langle>?l', ?u'\<rangle> \<rightarrow> \<langle>?l'',?u''\<rangle> |]
      ==> ?A \<turnstile> \<langle>?l, ?u\<rangle> \<rightarrow>* \<langle>?l'', ?u''\<rangle>",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_app
                   (template_app (template_hole 1, template_var 6),
                    template_var 5),
                  template_var 4),
                template_var 3),
              template_var 2)
            ),
        template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_app
                   (template_app (template_hole 0, template_var 6),
                    template_var 3),
                  template_var 2),
                template_var 1),
              template_var 0)
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_app
                (template_app
                  (template_app (template_hole 1, template_var 6),
                   template_var 5),
                 template_var 4),
               template_var 1),
             template_var 0)
           ))),
    ("Regions.finite_\<R>",
     "finite ?X ==> finite {region ?X I r |I r. valid_region ?X ?k I r}",
     template_implication
      ([template_predicate
         (template_app (template_hole 8, template_var 1))],
       template_predicate
        (
           template_app
            (template_hole 7, template_app (template_hole 6, t_empty))
           ))),
    ("Regions.steps_r_alt",
     "[| ?A,?\<R> \<turnstile> \<langle>?l', ?R'\<rangle> \<leadsto>* \<langle>?l'', ?R''\<rangle>;
         ?A,?\<R> \<turnstile> \<langle>?l, ?R\<rangle> \<leadsto> \<langle>?l', ?R'\<rangle> |]
      ==> ?A,?\<R> \<turnstile> \<langle>?l, ?R\<rangle> \<leadsto>* \<langle>?l'', ?R''\<rangle>",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_app
                   (template_app
                     (template_app (template_hole 1, template_var 7),
                      template_var 6),
                    template_var 5),
                  template_var 4),
                template_var 3),
              template_var 2)
            ),
        template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_app
                   (template_app
                     (template_app (template_hole 0, template_var 7),
                      template_var 6),
                    template_var 1),
                  template_var 0),
                template_var 5),
              template_var 4)
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_app
                (template_app
                  (template_app
                    (template_app (template_hole 1, template_var 7),
                     template_var 6),
                   template_var 1),
                 template_var 0),
               template_var 3),
             template_var 2)
           ))),
    ("Regions.valid_intv_distinct",
     "[| valid_intv ?c ?I; valid_intv ?c ?I'; intv_elem ?x ?u ?I;
         intv_elem ?x ?u ?I' |]
      ==> ?I = ?I'",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 2, template_var 4),
              template_var 3)
            ),
        template_predicate
         (
            template_app
             (template_app (template_hole 2, template_var 4),
              template_var 2)
            ),
        template_predicate
         (
            template_app
             (template_app
               (template_app (template_hole 1, template_var 1),
                template_var 0),
              template_var 3)
            ),
        template_predicate
         (
            template_app
             (template_app
               (template_app (template_hole 1, template_var 1),
                template_var 0),
              template_var 2)
            )],
       template_equation (template_var 3, template_var 2))),
    ("Regions.valid_regions_I_cong",
     "[| valid_region ?X ?k ?I ?r; ALL x:?X. ?I x = ?I' x |]
      ==> region ?X ?I ?r = region ?X ?I' ?r & valid_region ?X ?k ?I' ?r",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_app (template_hole 5, template_var 4),
                  template_var 3),
                template_var 2),
              template_var 1)
            ),
        template_predicate
         (
            template_app
             (template_app (template_hole 4, template_var 4), t_empty)
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 2,
               template_app
                (template_app
                  (template_hole 1,
                   template_app
                    (template_app
                      (template_app (template_hole 0, template_var 4),
                       template_var 2),
                     template_var 1)),
                 template_app
                  (template_app
                    (template_app (template_hole 0, template_var 4),
                     template_var 0),
                   template_var 1))),
             template_app
              (template_app
                (template_app
                  (template_app (template_hole 5, template_var 4),
                   template_var 3),
                 template_var 0),
               template_var 1))
           ))),
    ("Regions.card_mono_strict_subset",
     "[| finite ?A; finite ?B; finite ?C; ?A Int ?B ~= {}; ?C = ?A - ?B |]
      ==> card ?C < card ?A",
     template_implication
      ([template_predicate (template_app (template_hole 7, template_var 2)),
        template_predicate (template_app (template_hole 7, template_var 1)),
        template_predicate (template_app (template_hole 7, template_var 0)),
        template_negation
         (
            template_equation
             (template_app
               (template_app (template_hole 4, template_var 2),
                template_var 1),
              template_hole 3)
            ),
        template_equation
         (template_var 0,
          template_app
           (template_app (template_hole 2, template_var 2),
            template_var 1))],
       template_inequation
        (less_than, template_app (template_hole 0, template_var 0),
         template_app (template_hole 0, template_var 2)))),
    ("Regions.region_cover",
     "ALL x:?X. 0 <= ?u x ==>
      EX R. R : {region ?X I r |I r. valid_region ?X ?k I r} & ?u : R",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 12, template_var 2), t_empty)
            )],
       template_predicate (template_app (template_hole 9, t_empty)))),
    ("Regions.region_not_empty_aux",
     "[| 0 < ?f; ?f < 1; 0 < ?g; ?g < 1 |]
      ==> (frac (get_intv_val (Intv ?d) ?f)
           <= frac (get_intv_val (Intv ?d') ?g)) =
          (?f <= ?g)",
     template_implication
      ([template_inequation (less_than, template_hole 6, template_var 3),
        template_inequation (less_than, template_var 3, template_hole 5),
        template_inequation (less_than, template_hole 6, template_var 2),
        template_inequation (less_than, template_var 2, template_hole 5)],
       template_equation
        (template_app
          (template_app
            (template_hole 3,
             template_app
              (template_hole 2,
               template_app
                (template_app
                  (template_hole 1,
                   template_app (template_hole 0, template_var 1)),
                 template_var 3))),
           template_app
            (template_hole 2,
             template_app
              (template_app
                (template_hole 1,
                 template_app (template_hole 0, template_var 0)),
               template_var 2))),
         template_app
          (template_app (template_hole 3, template_var 3),
           template_var 2)))),
    ("Regions.total_finite_trans_max",
     "[| ?X ~= {}; finite ?X; total_on ?X ?r; trans ?r |]
      ==> EX x:?X. ALL y:?X. x ~= y --> (y, x) : ?r",
     template_implication
      ([template_negation
         (template_equation (template_var 1, template_hole 9)),
        template_predicate (template_app (template_hole 8, template_var 1)),
        template_predicate
         (
            template_app
             (template_app (template_hole 7, template_var 1),
              template_var 0)
            ),
        template_predicate
         (template_app (template_hole 6, template_var 0))],
       template_predicate
        (
           template_app
            (template_app (template_hole 5, template_var 1), t_empty)
           ))),
    ("Regions.region_cover'",
     "[| ?\<R> = {region ?X I r |I r. valid_region ?X ?k I r};
         ALL x:?X. 0 <= ?v x |]
      ==> ?v : [?v]\<^sub>?\<R>",
     template_implication
      ([template_equation
         (template_var 3, template_app (template_hole 11, t_empty)),
        template_predicate
         (
            template_app
             (template_app (template_hole 4, template_var 2), t_empty)
            )],
       template_predicate
        (
           template_app
            (template_app (template_hole 1, template_var 0),
             template_app
              (template_app (template_hole 0, template_var 0),
               template_var 3))
           ))),
    ("Regions.region_cover'",
     "[| ?\<R> = {region ?X I r |I r. valid_region ?X ?k I r};
         ALL x:?X. 0 <= ?v x |]
      ==> [?v]\<^sub>?\<R> : ?\<R>",
     template_implication
      ([template_equation
         (template_var 3, template_app (template_hole 11, t_empty)),
        template_predicate
         (
            template_app
             (template_app (template_hole 4, template_var 2), t_empty)
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 1,
               template_app
                (template_app (template_hole 0, template_var 0),
                 template_var 3)),
             template_var 3)
           ))),
    ("Regions.Succ_refl",
     "[| ?\<R> = {region ?X I r |I r. valid_region ?X ?k I r}; finite ?X;
         ?R : ?\<R> |]
      ==> ?R : Succ ?\<R> ?R",
     template_implication
      ([template_equation
         (template_var 3, template_app (template_hole 9, t_empty)),
        template_predicate (template_app (template_hole 2, template_var 2)),
        template_predicate
         (
            template_app
             (template_app (template_hole 1, template_var 0),
              template_var 3)
            )],
       template_predicate
        (
           template_app
            (template_app (template_hole 1, template_var 0),
             template_app
              (template_app (template_hole 0, template_var 3),
               template_var 0))
           ))),
    ("Regions.region_unique",
     "[| ?\<R> = {region ?X I r |I r. valid_region ?X ?k I r}; ?u : ?R;
         ?R : ?\<R> |]
      ==> [?u]\<^sub>?\<R> = ?R",
     template_implication
      ([template_equation
         (template_var 4, template_app (template_hole 9, t_empty)),
        template_predicate
         (
            template_app
             (template_app (template_hole 2, template_var 1),
              template_var 0)
            ),
        template_predicate
         (
            template_app
             (template_app (template_hole 1, template_var 0),
              template_var 4)
            )],
       template_equation
        (template_app
          (template_app (template_hole 0, template_var 1), template_var 4),
         template_var 0))),
    ("Regions.ccompatible1",
     "[| ?c <= real (?k ?x); ?c : \<nat>; ?x : ?X |]
      ==> ccompatible {region ?X I r |I r. valid_region ?X ?k I r}
           (EQ ?x ?c)",
     template_implication
      ([template_inequation
         (less_equals, template_var 3,
          template_app
           (template_hole 12,
            template_app (template_var 2, template_var 1))),
        template_predicate
         (
            template_app
             (template_app (template_hole 11, template_var 3),
              template_hole 10)
            ),
        template_predicate
         (
            template_app
             (template_app (template_hole 9, template_var 1),
              template_var 0)
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 8, template_app (template_hole 7, t_empty)),
             template_app
              (template_app (template_hole 0, template_var 1),
               template_var 3))
           ))),
    ("Regions.ccompatible5",
     "[| ?c <= real (?k ?x); ?c : \<nat>; ?x : ?X |]
      ==> ccompatible {region ?X I r |I r. valid_region ?X ?k I r}
           (GE ?x ?c)",
     template_implication
      ([template_inequation
         (less_equals, template_var 3,
          template_app
           (template_hole 12,
            template_app (template_var 2, template_var 1))),
        template_predicate
         (
            template_app
             (template_app (template_hole 11, template_var 3),
              template_hole 10)
            ),
        template_predicate
         (
            template_app
             (template_app (template_hole 9, template_var 1),
              template_var 0)
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 8, template_app (template_hole 7, t_empty)),
             template_app
              (template_app (template_hole 0, template_var 1),
               template_var 3))
           ))),
    ("Regions.ccompatible4",
     "[| ?c <= real (?k ?x); ?c : \<nat>; ?x : ?X |]
      ==> ccompatible {region ?X I r |I r. valid_region ?X ?k I r}
           (GT ?x ?c)",
     template_implication
      ([template_inequation
         (less_equals, template_var 3,
          template_app
           (template_hole 12,
            template_app (template_var 2, template_var 1))),
        template_predicate
         (
            template_app
             (template_app (template_hole 11, template_var 3),
              template_hole 10)
            ),
        template_predicate
         (
            template_app
             (template_app (template_hole 9, template_var 1),
              template_var 0)
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 8, template_app (template_hole 7, t_empty)),
             template_app
              (template_app (template_hole 0, template_var 1),
               template_var 3))
           ))),
    ("Regions.ccompatible3",
     "[| ?c <= real (?k ?x); ?c : \<nat>; ?x : ?X |]
      ==> ccompatible {region ?X I r |I r. valid_region ?X ?k I r}
           (LE ?x ?c)",
     template_implication
      ([template_inequation
         (less_equals, template_var 3,
          template_app
           (template_hole 12,
            template_app (template_var 2, template_var 1))),
        template_predicate
         (
            template_app
             (template_app (template_hole 11, template_var 3),
              template_hole 10)
            ),
        template_predicate
         (
            template_app
             (template_app (template_hole 9, template_var 1),
              template_var 0)
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 8, template_app (template_hole 7, t_empty)),
             template_app
              (template_app (template_hole 0, template_var 1),
               template_var 3))
           ))),
    ("Regions.ccompatible2",
     "[| ?c <= real (?k ?x); ?c : \<nat>; ?x : ?X |]
      ==> ccompatible {region ?X I r |I r. valid_region ?X ?k I r}
           (LT ?x ?c)",
     template_implication
      ([template_inequation
         (less_equals, template_var 3,
          template_app
           (template_hole 12,
            template_app (template_var 2, template_var 1))),
        template_predicate
         (
            template_app
             (template_app (template_hole 11, template_var 3),
              template_hole 10)
            ),
        template_predicate
         (
            template_app
             (template_app (template_hole 9, template_var 1),
              template_var 0)
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 8, template_app (template_hole 7, t_empty)),
             template_app
              (template_app (template_hole 0, template_var 1),
               template_var 3))
           ))),
    ("Regions.valid_regions_distinct",
     "[| valid_region ?X ?k ?I ?r; valid_region ?X ?k ?I' ?r';
         ?v : region ?X ?I ?r; ?v : region ?X ?I' ?r' |]
      ==> region ?X ?I ?r = region ?X ?I' ?r'",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_app (template_hole 3, template_var 6),
                  template_var 5),
                template_var 4),
              template_var 3)
            ),
        template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_app (template_hole 3, template_var 6),
                  template_var 5),
                template_var 2),
              template_var 1)
            ),
        template_predicate
         (
            template_app
             (template_app (template_hole 2, template_var 0),
              template_app
               (template_app
                 (template_app (template_hole 1, template_var 6),
                  template_var 4),
                template_var 3))
            ),
        template_predicate
         (
            template_app
             (template_app (template_hole 2, template_var 0),
              template_app
               (template_app
                 (template_app (template_hole 1, template_var 6),
                  template_var 2),
                template_var 1))
            )],
       template_equation
        (template_app
          (template_app
            (template_app (template_hole 1, template_var 6),
             template_var 4),
           template_var 3),
         template_app
          (template_app
            (template_app (template_hole 1, template_var 6),
             template_var 2),
           template_var 1)))),
    ("Regions.regions_partition",
     "[| ?\<R> = {region ?X I r |I r. valid_region ?X ?k I r};
         ALL x:?X. 0 <= ?u x |]
      ==> EX! R. R : ?\<R> & ?u : R",
     template_implication
      ([template_equation
         (template_var 3, template_app (template_hole 12, t_empty)),
        template_predicate
         (
            template_app
             (template_app (template_hole 5, template_var 2), t_empty)
            )],
       template_predicate (template_app (template_hole 2, t_empty)))),
    ("Regions.ccompatible",
     "ALL (x, m):collect_clock_pairs ?cc.
         m <= real (?k x) & x : ?X & m : \<nat> ==>
      ccompatible {region ?X I r |I r. valid_region ?X ?k I r} ?cc",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_hole 15,
                template_app (template_hole 14, template_var 2)),
              template_app (template_hole 13, t_empty))
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 6, template_app (template_hole 5, t_empty)),
             template_var 2)
           ))),
    ("Regions.regions_closed",
     "[| ?\<R> = {region ?X I r |I r. valid_region ?X ?k I r}; ?R : ?\<R>;
         ?v : ?R; 0 <= ?t |]
      ==> [?v \<oplus> ?t]\<^sub>?\<R> : ?\<R>",
     template_implication
      ([template_equation
         (template_var 5, template_app (template_hole 12, t_empty)),
        template_predicate
         (
            template_app
             (template_app (template_hole 5, template_var 2),
              template_var 5)
            ),
        template_predicate
         (
            template_app
             (template_app (template_hole 4, template_var 1),
              template_var 2)
            ),
        template_inequation (less_equals, template_hole 2, template_var 0)],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 5,
               template_app
                (template_app
                  (template_hole 1,
                   template_app
                    (template_app (template_hole 0, template_var 1),
                     template_var 0)),
                 template_var 5)),
             template_var 5)
           ))),
    ("Regions.regions_closed'",
     "[| ?\<R> = {region ?X I r |I r. valid_region ?X ?k I r}; ?R : ?\<R>;
         ?v : ?R; 0 <= ?t |]
      ==> ?v \<oplus> ?t : [?v \<oplus> ?t]\<^sub>?\<R>",
     template_implication
      ([template_equation
         (template_var 5, template_app (template_hole 12, t_empty)),
        template_predicate
         (
            template_app
             (template_app (template_hole 5, template_var 2),
              template_var 5)
            ),
        template_predicate
         (
            template_app
             (template_app (template_hole 4, template_var 1),
              template_var 2)
            ),
        template_inequation (less_equals, template_hole 2, template_var 0)],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 4,
               template_app
                (template_app (template_hole 1, template_var 1),
                 template_var 0)),
             template_app
              (template_app
                (template_hole 0,
                 template_app
                  (template_app (template_hole 1, template_var 1),
                   template_var 0)),
               template_var 5))
           ))),
    ("Regions.\<R>_regions_distinct",
     "[| ?\<R> = {region ?X I r |I r. valid_region ?X ?k I r}; ?R : ?\<R>;
         ?v : ?R; ?R' : ?\<R>; ?R ~= ?R' |]
      ==> ?v ~: ?R'",
     template_implication
      ([template_equation
         (template_var 5, template_app (template_hole 9, t_empty)),
        template_predicate
         (
            template_app
             (template_app (template_hole 2, template_var 2),
              template_var 5)
            ),
        template_predicate
         (
            template_app
             (template_app (template_hole 1, template_var 1),
              template_var 2)
            ),
        template_predicate
         (
            template_app
             (template_app (template_hole 2, template_var 0),
              template_var 5)
            ),
        template_negation
         (template_equation (template_var 2, template_var 0))],
       template_negation
        (
           template_predicate
            (
               template_app
                (template_app (template_hole 1, template_var 1),
                 template_var 0)
               )
           ))),
    ("Regions.step_r_sound",
     "[| ?A,?\<R> \<turnstile> \<langle>?l, ?R\<rangle> \<leadsto> \<langle>?l', ?R'\<rangle>;
         ?\<R> = {region ?X I r |I r. valid_region ?X ?k I r}; ?R' ~= {} |]
      ==> ALL u:?R.
             EX u':?R'.
                ?A \<turnstile> \<langle>?l, u\<rangle> \<rightarrow> \<langle>?l',u'\<rangle>",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_app
                   (template_app
                     (template_app (template_hole 13, template_var 7),
                      template_var 6),
                    template_var 5),
                  template_var 4),
                template_var 3),
              template_var 2)
            ),
        template_equation
         (template_var 6, template_app (template_hole 11, t_empty)),
        template_negation
         (template_equation (template_var 2, template_hole 3))],
       template_predicate
        (
           template_app
            (template_app (template_hole 2, template_var 4), t_empty)
           ))),
    ("Regions.steps_r_sound'",
     "[| ?A,?\<R> \<turnstile> \<langle>?l, ?R\<rangle> \<leadsto>* \<langle>?l', ?R'\<rangle>;
         ?\<R> = {region ?X I r |I r. valid_region ?X ?k I r}; ?R' ~= {} |]
      ==> EX u':?R'.
             EX u:?R.
                ?A \<turnstile> \<langle>?l, u\<rangle> \<rightarrow>* \<langle>?l', u'\<rangle>",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_app
                   (template_app
                     (template_app (template_hole 12, template_var 7),
                      template_var 6),
                    template_var 5),
                  template_var 4),
                template_var 3),
              template_var 2)
            ),
        template_equation
         (template_var 6, template_app (template_hole 10, t_empty)),
        template_negation
         (template_equation (template_var 2, template_hole 2))],
       template_predicate
        (
           template_app
            (template_app (template_hole 1, template_var 2), t_empty)
           ))),
    ("Regions.steps_r_sound",
     "[| ?A,?\<R> \<turnstile> \<langle>?l, ?R\<rangle> \<leadsto>* \<langle>?l', ?R'\<rangle>;
         ?\<R> = {region ?X I r |I r. valid_region ?X ?k I r}; ?R' ~= {};
         ?u : ?R |]
      ==> EX u':?R'.
             ?A \<turnstile> \<langle>?l, ?u\<rangle> \<rightarrow>* \<langle>?l', u'\<rangle>",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_app
                   (template_app
                     (template_app (template_hole 13, template_var 8),
                      template_var 7),
                    template_var 6),
                  template_var 5),
                template_var 4),
              template_var 3)
            ),
        template_equation
         (template_var 7, template_app (template_hole 11, t_empty)),
        template_negation
         (template_equation (template_var 3, template_hole 3)),
        template_predicate
         (
            template_app
             (template_app (template_hole 2, template_var 0),
              template_var 5)
            )],
       template_predicate
        (
           template_app
            (template_app (template_hole 1, template_var 3), t_empty)
           ))),
    ("Regions.SuccI2",
     "[| ?\<R> = {region ?X I r |I r. valid_region ?X ?k I r}; ?v : ?R;
         ?R : ?\<R>; 0 <= ?t; ?R' = [?v \<oplus> ?t]\<^sub>?\<R> |]
      ==> ?R' : Succ ?\<R> ?R",
     template_implication
      ([template_equation
         (template_var 6, template_app (template_hole 13, t_empty)),
        template_predicate
         (
            template_app
             (template_app (template_hole 6, template_var 3),
              template_var 2)
            ),
        template_predicate
         (
            template_app
             (template_app (template_hole 5, template_var 2),
              template_var 6)
            ),
        template_inequation (less_equals, template_hole 3, template_var 1),
        template_equation
         (template_var 0,
          template_app
           (template_app
             (template_hole 2,
              template_app
               (template_app (template_hole 1, template_var 3),
                template_var 1)),
            template_var 6))],
       template_predicate
        (
           template_app
            (template_app (template_hole 5, template_var 0),
             template_app
              (template_app (template_hole 0, template_var 6),
               template_var 2))
           ))),
    ("Regions.regions_partition'",
     "[| ?\<R> = {region ?X I r |I r. valid_region ?X ?k I r};
         ALL x:?X. 0 <= ?v x; ALL x:?X. 0 <= ?v' x;
         ?v' : [?v]\<^sub>?\<R> |]
      ==> [?v']\<^sub>?\<R> = [?v]\<^sub>?\<R>",
     template_implication
      ([template_equation
         (template_var 4, template_app (template_hole 11, t_empty)),
        template_predicate
         (
            template_app
             (template_app (template_hole 4, template_var 3), t_empty)
            ),
        template_predicate
         (
            template_app
             (template_app (template_hole 4, template_var 3), t_empty)
            ),
        template_predicate
         (
            template_app
             (template_app (template_hole 1, template_var 0),
              template_app
               (template_app (template_hole 0, template_var 1),
                template_var 4))
            )],
       template_equation
        (template_app
          (template_app (template_hole 0, template_var 0), template_var 4),
         template_app
          (template_app (template_hole 0, template_var 1),
           template_var 4)))),
    ("Regions.Succ_refl'",
     "[| ?\<R> = {region ?X I r |I r. valid_region ?X ?k I r}; finite ?X;
         ALL x:?X. EX c. ?I x = Greater c; region ?X ?I ?r : ?\<R> |]
      ==> Succ ?\<R> (region ?X ?I ?r) = {region ?X ?I ?r}",
     template_implication
      ([template_equation
         (template_var 4, template_app (template_hole 15, t_empty)),
        template_predicate (template_app (template_hole 8, template_var 3)),
        template_predicate
         (
            template_app
             (template_app (template_hole 7, template_var 3), t_empty)
            ),
        template_predicate
         (
            template_app
             (template_app
               (template_hole 3,
                template_app
                 (template_app
                   (template_app (template_hole 10, template_var 3),
                    template_var 1),
                  template_var 0)),
              template_var 4)
            )],
       template_equation
        (template_app
          (template_app (template_hole 2, template_var 4),
           template_app
            (template_app
              (template_app (template_hole 10, template_var 3),
               template_var 1),
             template_var 0)),
         template_app
          (template_app
            (template_hole 1,
             template_app
              (template_app
                (template_app (template_hole 10, template_var 3),
                 template_var 1),
               template_var 0)),
           template_hole 0)))),
    ("Regions.steps_r_complete",
     "[| ?A \<turnstile> \<langle>?l, ?u\<rangle> \<rightarrow>* \<langle>?l', ?u'\<rangle>;
         ?\<R> = {region ?X I r |I r. valid_region ?X ?k I r};
         valid_abstraction ?A ?X (%x. real (?k x)); ALL x:?X. 0 <= ?u x |]
      ==> EX R'.
             ?A,?\<R> \<turnstile> \<langle>?l, [?u]\<^sub>?\<R>\<rangle> \<leadsto>* \<langle>?l', R'\<rangle> &
             ?u' : R'",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_app
                   (template_app (template_hole 17, template_var 7),
                    template_var 6),
                  template_var 5),
                template_var 4),
              template_var 3)
            ),
        template_equation
         (template_var 2, template_app (template_hole 15, t_empty)),
        template_predicate
         (
            template_app
             (template_app
               (template_app (template_hole 8, template_var 7),
                template_var 1),
              t_empty)
            ),
        template_predicate
         (
            template_app
             (template_app (template_hole 6, template_var 1), t_empty)
            )],
       template_predicate (template_app (template_hole 3, t_empty)))),
    ("Regions.int_shift_equiv",
     "[| ?v : ?R; ?v' : ?R;
         ?R : {region ?X I r |I r. valid_region ?X ?k I r}; 0 <= ?t |]
      ==> ?v' \<oplus> real_of_int ?t
          : [?v \<oplus>
             real_of_int
              ?t]\<^sub>{region ?X I r |I r. valid_region ?X ?k I r}",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 13, template_var 5),
              template_var 4)
            ),
        template_predicate
         (
            template_app
             (template_app (template_hole 13, template_var 3),
              template_var 4)
            ),
        template_predicate
         (
            template_app
             (template_app (template_hole 12, template_var 4),
              template_app (template_hole 11, t_empty))
            ),
        template_inequation (less_equals, template_hole 3, template_var 0)],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 13,
               template_app
                (template_app (template_hole 2, template_var 3),
                 template_app (template_hole 1, template_var 0))),
             template_app
              (template_app
                (template_hole 0,
                 template_app
                  (template_app (template_hole 2, template_var 5),
                   template_app (template_hole 1, template_var 0))),
               template_app (template_hole 11, t_empty)))
           ))),
    ("Regions.closest_prestable_1",
     "[| {x: ?X. EX c. ?I x = Const c} ~= {}; finite ?X;
         valid_region ?X ?k ?I ?r |]
      ==> ALL x:?X.
             ~ isConst
                (if x ~: {x: ?X. EX c. ?I x = Const c} then ?I x
                 else if intv_const (?I x) = ?k x then Greater (?k x)
                      else Intv (intv_const (?I x)))",
     template_implication
      ([template_negation
         (
            template_equation
             (template_app (template_hole 15, t_empty), template_hole 9)
            ),
        template_predicate (template_app (template_hole 8, template_var 3)),
        template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_app (template_hole 7, template_var 3),
                  template_var 1),
                template_var 2),
              template_var 0)
            )],
       template_predicate
        (
           template_app
            (template_app (template_hole 6, template_var 3), t_empty)
           ))),
    ("Regions.step_r_complete",
     "[| ?A \<turnstile> \<langle>?l, ?u\<rangle> \<rightarrow> \<langle>?l',?u'\<rangle>;
         ?\<R> = {region ?X I r |I r. valid_region ?X ?k I r};
         valid_abstraction ?A ?X (%x. real (?k x)); ALL x:?X. 0 <= ?u x |]
      ==> EX R'.
             ?A,?\<R> \<turnstile> \<langle>?l, [?u]\<^sub>?\<R>\<rangle> \<leadsto> \<langle>?l', R'\<rangle> &
             ?u' : R' & R' : ?\<R>",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_app
                   (template_app (template_hole 18, template_var 7),
                    template_var 6),
                  template_var 5),
                template_var 4),
              template_var 3)
            ),
        template_equation
         (template_var 2, template_app (template_hole 16, t_empty)),
        template_predicate
         (
            template_app
             (template_app
               (template_app (template_hole 9, template_var 7),
                template_var 1),
              t_empty)
            ),
        template_predicate
         (
            template_app
             (template_app (template_hole 7, template_var 1), t_empty)
            )],
       template_predicate (template_app (template_hole 4, t_empty)))),
    ("Regions.set_of_regions_lt_1",
     "[| valid_region ?X ?k ?I ?r; ?v : region ?X ?I ?r;
         ?v' : region ?X ?I ?r; finite ?X; 0 <= ?t; ?t < 1 |]
      ==> EX t'>=0.
             ?v' \<oplus> t'
             : [?v \<oplus>
                ?t]\<^sub>{region ?X I r |I r. valid_region ?X ?k I r}",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_app (template_hole 15, template_var 6),
                  template_var 5),
                template_var 4),
              template_var 3)
            ),
        template_predicate
         (
            template_app
             (template_app (template_hole 14, template_var 2),
              template_app
               (template_app
                 (template_app (template_hole 13, template_var 6),
                  template_var 4),
                template_var 3))
            ),
        template_predicate
         (
            template_app
             (template_app (template_hole 14, template_var 1),
              template_app
               (template_app
                 (template_app (template_hole 13, template_var 6),
                  template_var 4),
                template_var 3))
            ),
        template_predicate
         (template_app (template_hole 12, template_var 6)),
        template_inequation (less_equals, template_hole 10, template_var 0),
        template_inequation (less_than, template_var 0, template_hole 8)],
       template_predicate (template_app (template_hole 7, t_empty)))),
    ("Regions.region_set_id",
     "[| ?R : {region ?X I r |I r. valid_region ?X ?k I r}; ?v : ?R;
         finite ?X; 0 <= ?c; ?c <= ?k ?x; ?x : ?X |]
      ==> [?v(?x :=
                real
                 ?c)]\<^sub>{region ?X I r |I r. valid_region ?X ?k I r} =
          region_set ?R ?x (real ?c)",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 16, template_var 5),
              template_app (template_hole 15, t_empty))
            ),
        template_predicate
         (
            template_app
             (template_app (template_hole 8, template_var 2),
              template_var 5)
            ),
        template_predicate (template_app (template_hole 7, template_var 4)),
        template_inequation (less_equals, template_hole 5, template_var 1),
        template_inequation
         (less_equals, template_var 1,
          template_app (template_var 3, template_var 0)),
        template_predicate
         (
            template_app
             (template_app (template_hole 4, template_var 0),
              template_var 4)
            )],
       template_equation
        (template_app
          (template_app
            (template_hole 3,
             template_app
              (template_app
                (template_app (template_hole 2, template_var 2),
                 template_var 0),
               template_app (template_hole 1, template_var 1))),
           template_app (template_hole 15, t_empty)),
         template_app
          (template_app
            (template_app (template_hole 0, template_var 5),
             template_var 0),
           template_app (template_hole 1, template_var 1))))),
    ("Regions.region_set_id",
     "[| ?R : {region ?X I r |I r. valid_region ?X ?k I r}; ?v : ?R;
         finite ?X; 0 <= ?c; ?c <= ?k ?x; ?x : ?X |]
      ==> ?v(?x := real ?c) : [?v
          (?x :=
             real ?c)]\<^sub>{region ?X I r |I r. valid_region ?X ?k I r}",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 15, template_var 5),
              template_app (template_hole 14, t_empty))
            ),
        template_predicate
         (
            template_app
             (template_app (template_hole 7, template_var 2),
              template_var 5)
            ),
        template_predicate (template_app (template_hole 6, template_var 4)),
        template_inequation (less_equals, template_hole 4, template_var 1),
        template_inequation
         (less_equals, template_var 1,
          template_app (template_var 3, template_var 0)),
        template_predicate
         (
            template_app
             (template_app (template_hole 3, template_var 0),
              template_var 4)
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 7,
               template_app
                (template_app
                  (template_app (template_hole 2, template_var 2),
                   template_var 0),
                 template_app (template_hole 1, template_var 1))),
             template_app
              (template_app
                (template_hole 0,
                 template_app
                  (template_app
                    (template_app (template_hole 2, template_var 2),
                     template_var 0),
                   template_app (template_hole 1, template_var 1))),
               template_app (template_hole 14, t_empty)))
           ))),
    ("Regions.set_of_regions",
     "[| ?R : {region ?X I r |I r. valid_region ?X ?k I r}; ?v : ?R;
         ?R' : Succ {region ?X I r |I r. valid_region ?X ?k I r} ?R;
         finite ?X |]
      ==> EX t>=0.
             [?v \<oplus>
              t]\<^sub>{region ?X I r |I r. valid_region ?X ?k I r} =
             ?R'",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 15, template_var 4),
              template_app (template_hole 14, t_empty))
            ),
        template_predicate
         (
            template_app
             (template_app (template_hole 7, template_var 1),
              template_var 4)
            ),
        template_predicate
         (
            template_app
             (template_app (template_hole 15, template_var 0),
              template_app
               (template_app
                 (template_hole 6,
                  template_app (template_hole 14, t_empty)),
                template_var 4))
            ),
        template_predicate
         (template_app (template_hole 5, template_var 3))],
       template_predicate (template_app (template_hole 4, t_empty)))),
    ("Regions.region_set_id",
     "[| ?R : {region ?X I r |I r. valid_region ?X ?k I r}; ?v : ?R;
         finite ?X; 0 <= ?c; ?c <= ?k ?x; ?x : ?X |]
      ==> [?v(?x :=
                real ?c)]\<^sub>{region ?X I r |I r. valid_region ?X ?k I r}
          : {region ?X I r |I r. valid_region ?X ?k I r}",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 15, template_var 5),
              template_app (template_hole 14, t_empty))
            ),
        template_predicate
         (
            template_app
             (template_app (template_hole 7, template_var 2),
              template_var 5)
            ),
        template_predicate (template_app (template_hole 6, template_var 4)),
        template_inequation (less_equals, template_hole 4, template_var 1),
        template_inequation
         (less_equals, template_var 1,
          template_app (template_var 3, template_var 0)),
        template_predicate
         (
            template_app
             (template_app (template_hole 3, template_var 0),
              template_var 4)
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 15,
               template_app
                (template_app
                  (template_hole 2,
                   template_app
                    (template_app
                      (template_app (template_hole 1, template_var 2),
                       template_var 0),
                     template_app (template_hole 0, template_var 1))),
                 template_app (template_hole 14, t_empty))),
             template_app (template_hole 14, t_empty))
           ))),
    ("Regions.closest_prestable_2",
     "[| ALL x:?X. ~ isConst (?I x); finite ?X; valid_region ?X ?k ?I ?r;
         {x: {x: ?X. isIntv (?I x)}.
          ALL y:{x: ?X. isIntv (?I x)}. (x, y) : ?r --> (y, x) : ?r} ~=
         {} |]
      ==> EX x:?X.
             isConst
              (if x ~: {x: {x: ?X. isIntv (?I x)}.
                        ALL y:{x: ?X. isIntv (?I x)}.
                           (x, y) : ?r --> (y, x) : ?r}
               then ?I x else Const (intv_const (?I x) + 1))",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 19, template_var 3), t_empty)
            ),
        template_predicate
         (template_app (template_hole 16, template_var 3)),
        template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_app (template_hole 15, template_var 3),
                  template_var 1),
                template_var 2),
              template_var 0)
            ),
        template_negation
         (
            template_equation
             (template_app (template_hole 13, t_empty), template_hole 6)
            )],
       template_predicate
        (
           template_app
            (template_app (template_hole 5, template_var 3), t_empty)
           ))),
    ("Regions.step_r_complete_aux",
     "[| ?\<R> = {region ?X I r |I r. valid_region ?X ?k I r};
         valid_abstraction ?A ?X (%x. real (?k x)); ?u : ?R; ?R : ?\<R>;
         ?A \<turnstile> ?l \<longrightarrow>\<^bsup>?g,?a,?r\<^esup> ?l';
         ?u \<turnstile> ?g;
         [?r\<rightarrow>0]?u \<turnstile> inv_of ?A ?l' |]
      ==> ?R = ?R Int {u. u \<turnstile> ?g} &
          region_set' (?R Int {u. u \<turnstile> ?g}) ?r 0 Int
          {u. u \<turnstile> inv_of ?A ?l'} =
          region_set' ?R ?r 0 &
          region_set' (?R Int {u. u \<turnstile> ?g}) ?r 0 Int
          {u. u \<turnstile> inv_of ?A ?l'}
          : ?\<R>",
     template_implication
      ([template_equation
         (template_var 10, template_app (template_hole 23, t_empty)),
        template_predicate
         (
            template_app
             (template_app
               (template_app (template_hole 16, template_var 7),
                template_var 9),
              t_empty)
            ),
        template_predicate
         (
            template_app
             (template_app (template_hole 14, template_var 6),
              template_var 5)
            ),
        template_predicate
         (
            template_app
             (template_app (template_hole 13, template_var 5),
              template_var 10)
            ),
        template_predicate
         (
            template_app
             (template_app
               (template_hole 12,
                template_app
                 (template_app (template_hole 11, template_var 4),
                  template_app
                   (template_app (template_hole 10, template_var 3),
                    template_app
                     (template_app (template_hole 9, template_var 2),
                      template_app
                       (template_app (template_hole 8, template_var 1),
                        template_var 0))))),
              template_app (template_hole 7, template_var 7))
            ),
        template_predicate
         (
            template_app
             (template_app (template_hole 6, template_var 6),
              template_var 3)
            ),
        template_predicate
         (
            template_app
             (template_app
               (template_hole 6,
                template_app
                 (template_app
                   (template_app (template_hole 5, template_var 1),
                    template_hole 4),
                  template_var 6)),
              template_app
               (template_app (template_hole 3, template_var 7),
                template_var 0))
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 20,
               template_app
                (template_app (template_hole 19, template_var 5),
                 template_app
                  (template_app (template_hole 2, template_var 5),
                   template_app (template_hole 1, t_empty)))),
             template_app
              (template_app
                (template_hole 20,
                 template_app
                  (template_app
                    (template_hole 19,
                     template_app
                      (template_app
                        (template_hole 2,
                         template_app
                          (template_app
                            (template_app
                              (template_hole 0,
                               template_app
                                (template_app
                                  (template_hole 2, template_var 5),
                                 template_app (template_hole 1, t_empty))),
                             template_var 1),
                           template_hole 4)),
                       template_app (template_hole 1, t_empty))),
                   template_app
                    (template_app
                      (template_app (template_hole 0, template_var 5),
                       template_var 1),
                     template_hole 4))),
               template_app
                (template_app
                  (template_hole 13,
                   template_app
                    (template_app
                      (template_hole 2,
                       template_app
                        (template_app
                          (template_app
                            (template_hole 0,
                             template_app
                              (template_app
                                (template_hole 2, template_var 5),
                               template_app (template_hole 1, t_empty))),
                           template_var 1),
                         template_hole 4)),
                     template_app (template_hole 1, t_empty))),
                 template_var 10)))
           ))),
    ("Regions.closest_valid_1",
     "[| {x: ?X. EX c. ?I x = Const c} ~= {}; finite ?X;
         valid_region ?X ?k ?I ?r |]
      ==> valid_region ?X ?k
           (%x. if x ~: {x: ?X. EX c. ?I x = Const c} then ?I x
                else if intv_const (?I x) = ?k x then Greater (?k x)
                     else Intv (intv_const (?I x)))
           (?r Un
            {(x, y).
             x : {x: ?X. EX c. ?I x = Const c} &
             y : ?X &
             intv_const (?I x) < ?k x &
             isIntv
              (if y ~: {x: ?X. EX c. ?I x = Const c} then ?I y
               else if intv_const (?I y) = ?k y then Greater (?k y)
                    else Intv (intv_const (?I y)))})",
     template_implication
      ([template_negation
         (
            template_equation
             (template_app (template_hole 18, t_empty), template_hole 12)
            ),
        template_predicate
         (template_app (template_hole 11, template_var 3)),
        template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_app (template_hole 10, template_var 3),
                  template_var 1),
                template_var 2),
              template_var 0)
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_app
                (template_app (template_hole 10, template_var 3),
                 template_var 1),
               t_empty),
             template_app
              (template_app (template_hole 4, template_var 0),
               template_app
                (template_hole 3, template_app (template_hole 2, t_empty))))
           ))),
    ("Regions.closest_prestable_1",
     "[| {x: ?X. EX c. ?I x = Const c} ~= {}; finite ?X;
         valid_region ?X ?k ?I ?r |]
      ==> ALL v:region ?X
                 (%x. if x ~: {x: ?X. EX c. ?I x = Const c} then ?I x
                      else if intv_const (?I x) = ?k x then Greater (?k x)
                           else Intv (intv_const (?I x)))
                 (?r Un
                  {(x, y).
                   x : {x: ?X. EX c. ?I x = Const c} &
                   y : ?X &
                   intv_const (?I x) < ?k x &
                   isIntv
                    (if y ~: {x: ?X. EX c. ?I x = Const c} then ?I y
                     else if intv_const (?I y) = ?k y then Greater (?k y)
                          else Intv (intv_const (?I y)))}).
             ALL t>=0. v \<oplus> t ~: region ?X ?I ?r",
     template_implication
      ([template_negation
         (
            template_equation
             (template_app (template_hole 26, t_empty), template_hole 20)
            ),
        template_predicate
         (template_app (template_hole 19, template_var 3)),
        template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_app (template_hole 18, template_var 3),
                  template_var 1),
                template_var 2),
              template_var 0)
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 17,
               template_app
                (template_app
                  (template_app (template_hole 16, template_var 3),
                   t_empty),
                 template_app
                  (template_app (template_hole 10, template_var 0),
                   template_app
                    (template_hole 9,
                     template_app (template_hole 8, t_empty))))),
             t_empty)
           ))),
    ("Regions.region_set'_id",
     "[| ?R : {region ?X I r |I r. valid_region ?X ?k I r}; ?v : ?R;
         finite ?X; 0 <= ?c; ALL x:set ?r. ?c <= ?k x; set ?r <= ?X |]
      ==> [[?r\<rightarrow>real
                            ?c]?v]\<^sub>{region ?X I r |I r.
    valid_region ?X ?k I r} =
          region_set' ?R ?r (real ?c) &
          [[?r\<rightarrow>real
                            ?c]?v]\<^sub>{region ?X I r |I r.
    valid_region ?X ?k I r}
          : {region ?X I r |I r. valid_region ?X ?k I r} &
          [?r\<rightarrow>real ?c]?v
          : [[?r\<rightarrow>real
                              ?c]?v]\<^sub>{region ?X I r |I r.
      valid_region ?X ?k I r}",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 18, template_var 5),
              template_app (template_hole 17, t_empty))
            ),
        template_predicate
         (
            template_app
             (template_app (template_hole 10, template_var 2),
              template_var 5)
            ),
        template_predicate (template_app (template_hole 9, template_var 4)),
        template_inequation (less_equals, template_hole 7, template_var 1),
        template_predicate
         (
            template_app
             (template_app
               (template_hole 6,
                template_app (template_hole 5, template_var 0)),
              t_empty)
            ),
        template_inequation
         (less_equals, template_app (template_hole 5, template_var 0),
          template_var 4)],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 14,
               template_app
                (template_app
                  (template_hole 13,
                   template_app
                    (template_app
                      (template_hole 3,
                       template_app
                        (template_app
                          (template_app (template_hole 2, template_var 0),
                           template_app (template_hole 1, template_var 1)),
                         template_var 2)),
                     template_app (template_hole 17, t_empty))),
                 template_app
                  (template_app
                    (template_app (template_hole 0, template_var 5),
                     template_var 0),
                   template_app (template_hole 1, template_var 1)))),
             template_app
              (template_app
                (template_hole 14,
                 template_app
                  (template_app
                    (template_hole 18,
                     template_app
                      (template_app
                        (template_hole 3,
                         template_app
                          (template_app
                            (template_app (template_hole 2, template_var 0),
                             template_app
                              (template_hole 1, template_var 1)),
                           template_var 2)),
                       template_app (template_hole 17, t_empty))),
                   template_app (template_hole 17, t_empty))),
               template_app
                (template_app
                  (template_hole 10,
                   template_app
                    (template_app
                      (template_app (template_hole 2, template_var 0),
                       template_app (template_hole 1, template_var 1)),
                     template_var 2)),
                 template_app
                  (template_app
                    (template_hole 3,
                     template_app
                      (template_app
                        (template_app (template_hole 2, template_var 0),
                         template_app (template_hole 1, template_var 1)),
                       template_var 2)),
                   template_app (template_hole 17, t_empty)))))
           ))),
    ("Regions.closest_prestable_1",
     "[| {x: ?X. EX c. ?I x = Const c} ~= {}; finite ?X;
         valid_region ?X ?k ?I ?r |]
      ==> ALL v:region ?X ?I ?r.
             ALL t>0.
                EX t'<=t.
                   v \<oplus> t'
                   : region ?X
                      (%x. if x ~: {x: ?X. EX c. ?I x = Const c} then ?I x
                           else if intv_const (?I x) = ?k x
                                then Greater (?k x)
                                else Intv (intv_const (?I x)))
                      (?r Un
                       {(x, y).
                        x : {x: ?X. EX c. ?I x = Const c} &
                        y : ?X &
                        intv_const (?I x) < ?k x &
                        isIntv
                         (if y ~: {x: ?X. EX c. ?I x = Const c} then ?I y
                          else if intv_const (?I y) = ?k y
                               then Greater (?k y)
                               else Intv (intv_const (?I y)))}) &
                   0 <= t'",
     template_implication
      ([template_negation
         (
            template_equation
             (template_app (template_hole 28, t_empty), template_hole 22)
            ),
        template_predicate
         (template_app (template_hole 21, template_var 3)),
        template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_app (template_hole 20, template_var 3),
                  template_var 1),
                template_var 2),
              template_var 0)
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 19,
               template_app
                (template_app
                  (template_app (template_hole 18, template_var 3),
                   template_var 2),
                 template_var 0)),
             t_empty)
           ))),
    ("Regions.closest_valid_2",
     "[| ALL x:?X. ~ isConst (?I x); finite ?X; valid_region ?X ?k ?I ?r;
         {x: {x: ?X. isIntv (?I x)}.
          ALL y:{x: ?X. isIntv (?I x)}. (x, y) : ?r --> (y, x) : ?r} ~=
         {} |]
      ==> valid_region ?X ?k
           (%x. if x ~: {x: {x: ?X. isIntv (?I x)}.
                         ALL y:{x: ?X. isIntv (?I x)}.
                            (x, y) : ?r --> (y, x) : ?r}
                then ?I x else Const (intv_const (?I x) + 1))
           {(x, y).
            (x, y) : ?r &
            x ~: {x: {x: ?X. isIntv (?I x)}.
                  ALL y:{x: ?X. isIntv (?I x)}.
                     (x, y) : ?r --> (y, x) : ?r} &
            y ~: {x: {x: ?X. isIntv (?I x)}.
                  ALL y:{x: ?X. isIntv (?I x)}.
                     (x, y) : ?r --> (y, x) : ?r}}",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 20, template_var 3), t_empty)
            ),
        template_predicate
         (template_app (template_hole 17, template_var 3)),
        template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_app (template_hole 16, template_var 3),
                  template_var 1),
                template_var 2),
              template_var 0)
            ),
        template_negation
         (
            template_equation
             (template_app (template_hole 14, t_empty), template_hole 7)
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_app
                (template_app (template_hole 16, template_var 3),
                 template_var 1),
               t_empty),
             template_app
              (template_hole 1, template_app (template_hole 0, t_empty)))
           ))),
    ("Regions.closest_prestable_2",
     "[| ALL x:?X. ~ isConst (?I x); finite ?X; valid_region ?X ?k ?I ?r;
         {x: {x: ?X. isIntv (?I x)}.
          ALL y:{x: ?X. isIntv (?I x)}. (x, y) : ?r --> (y, x) : ?r} ~=
         {} |]
      ==> ALL v:region ?X ?I ?r.
             ALL t'.
                {x: ?X.
                 EX c. (if x ~: {x: {x: ?X. isIntv (?I x)}.
                                 ALL y:{x: ?X. isIntv (?I x)}.
                                    (x, y) : ?r --> (y, x) : ?r}
                        then ?I x else Const (intv_const (?I x) + 1)) =
                       Intv c &
                       real (c + 1) <= (v \<oplus> t') x + (?t - t')} =
                {x: ?X. EX c. ?I x = Intv c & real (c + 1) <= v x + ?t} -
                {x: {x: ?X. isIntv (?I x)}.
                 ALL y:{x: ?X. isIntv (?I x)}.
                    (x, y) : ?r --> (y, x) : ?r}",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 30, template_var 4), t_empty)
            ),
        template_predicate
         (template_app (template_hole 27, template_var 4)),
        template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_app (template_hole 26, template_var 4),
                  template_var 2),
                template_var 3),
              template_var 1)
            ),
        template_negation
         (
            template_equation
             (template_app (template_hole 24, t_empty), template_hole 17)
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 16,
               template_app
                (template_app
                  (template_app (template_hole 15, template_var 4),
                   template_var 3),
                 template_var 1)),
             t_empty)
           ))),
    ("Regions.closest_prestable_2",
     "[| ALL x:?X. ~ isConst (?I x); finite ?X; valid_region ?X ?k ?I ?r;
         {x: {x: ?X. isIntv (?I x)}.
          ALL y:{x: ?X. isIntv (?I x)}. (x, y) : ?r --> (y, x) : ?r} ~=
         {} |]
      ==> ALL v:region ?X
                 (%x. if x ~: {x: {x: ?X. isIntv (?I x)}.
                               ALL y:{x: ?X. isIntv (?I x)}.
                                  (x, y) : ?r --> (y, x) : ?r}
                      then ?I x else Const (intv_const (?I x) + 1))
                 {(x, y).
                  (x, y) : ?r &
                  x ~: {x: {x: ?X. isIntv (?I x)}.
                        ALL y:{x: ?X. isIntv (?I x)}.
                           (x, y) : ?r --> (y, x) : ?r} &
                  y ~: {x: {x: ?X. isIntv (?I x)}.
                        ALL y:{x: ?X. isIntv (?I x)}.
                           (x, y) : ?r --> (y, x) : ?r}}.
             ALL t>=0. v \<oplus> t ~: region ?X ?I ?r",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 27, template_var 3), t_empty)
            ),
        template_predicate
         (template_app (template_hole 24, template_var 3)),
        template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_app (template_hole 23, template_var 3),
                  template_var 1),
                template_var 2),
              template_var 0)
            ),
        template_negation
         (
            template_equation
             (template_app (template_hole 21, t_empty), template_hole 14)
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 13,
               template_app
                (template_app
                  (template_app (template_hole 12, template_var 3),
                   t_empty),
                 template_app
                  (template_hole 6,
                   template_app (template_hole 5, t_empty)))),
             t_empty)
           ))),
    ("Regions.closest_prestable_1",
     "[| {x: ?X. EX c. ?I x = Const c} ~= {}; finite ?X;
         valid_region ?X ?k ?I ?r |]
      ==> ALL v:region ?X ?I ?r.
             ALL t<1.
                ALL t'>=0.
                   v \<oplus> t'
                   : region ?X
                      (%x. if x ~: {x: ?X. EX c. ?I x = Const c} then ?I x
                           else if intv_const (?I x) = ?k x
                                then Greater (?k x)
                                else Intv (intv_const (?I x)))
                      (?r Un
                       {(x, y).
                        x : {x: ?X. EX c. ?I x = Const c} &
                        y : ?X &
                        intv_const (?I x) < ?k x &
                        isIntv
                         (if y ~: {x: ?X. EX c. ?I x = Const c} then ?I y
                          else if intv_const (?I y) = ?k y
                               then Greater (?k y)
                               else Intv (intv_const (?I y)))}) -->
                   {x: ?X. EX c. ?I x = Intv c & real (c + 1) <= v x + t} =
                   {x: ?X.
                    EX c. (if x ~: {x: ?X. EX c. ?I x = Const c} then ?I x
                           else if intv_const (?I x) = ?k x
                                then Greater (?k x)
                                else Intv (intv_const (?I x))) =
                          Intv c &
                          real (c + 1) <= (v \<oplus> t') x + (t - t')}",
     template_implication
      ([template_negation
         (
            template_equation
             (template_app (template_hole 33, t_empty), template_hole 27)
            ),
        template_predicate
         (template_app (template_hole 26, template_var 3)),
        template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_app (template_hole 25, template_var 3),
                  template_var 1),
                template_var 2),
              template_var 0)
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 24,
               template_app
                (template_app
                  (template_app (template_hole 23, template_var 3),
                   template_var 2),
                 template_var 0)),
             t_empty)
           ))),
    ("Regions.closest_prestable_2",
     "[| ALL x:?X. ~ isConst (?I x); finite ?X; valid_region ?X ?k ?I ?r;
         {x: {x: ?X. isIntv (?I x)}.
          ALL y:{x: ?X. isIntv (?I x)}. (x, y) : ?r --> (y, x) : ?r} ~=
         {} |]
      ==> ALL v:region ?X ?I ?r.
             ALL t>=0.
                v \<oplus> t ~: region ?X ?I ?r -->
                (EX t'<=t.
                    v \<oplus> t'
                    : region ?X
                       (%x. if x ~: {x: {x: ?X. isIntv (?I x)}.
                                     ALL y:{x: ?X. isIntv (?I x)}.
  (x, y) : ?r --> (y, x) : ?r}
                            then ?I x else Const (intv_const (?I x) + 1))
                       {(x, y).
                        (x, y) : ?r &
                        x ~: {x: {x: ?X. isIntv (?I x)}.
                              ALL y:{x: ?X. isIntv (?I x)}.
                                 (x, y) : ?r --> (y, x) : ?r} &
                        y ~: {x: {x: ?X. isIntv (?I x)}.
                              ALL y:{x: ?X. isIntv (?I x)}.
                                 (x, y) : ?r --> (y, x) : ?r}} &
                    0 <= t')",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 28, template_var 3), t_empty)
            ),
        template_predicate
         (template_app (template_hole 25, template_var 3)),
        template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_app (template_hole 24, template_var 3),
                  template_var 1),
                template_var 2),
              template_var 0)
            ),
        template_negation
         (
            template_equation
             (template_app (template_hole 22, t_empty), template_hole 15)
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 14,
               template_app
                (template_app
                  (template_app (template_hole 13, template_var 3),
                   template_var 2),
                 template_var 0)),
             t_empty)
           )))]:
   (string * thm * template) list
### theory "Draft.RegionsMoreTemplates"
### 0.391s elapsed time, 0.516s cpu time, 0.056s GC time
val it = (): unit
