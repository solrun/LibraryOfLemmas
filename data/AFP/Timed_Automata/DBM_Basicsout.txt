Loading theory "Draft.Floyd_Warshall" (required by "Draft.DBM_BasicsMoreTemplates" via "Draft.DBM_Basics" via "Draft.DBM")
Loading theory "Draft.Timed_Automata" (required by "Draft.DBM_BasicsMoreTemplates" via "Draft.DBM_Basics" via "Draft.DBM")
Loading theory "HOL-Library.Function_Algebras" (required by "Draft.DBM_BasicsMoreTemplates" via "Draft.ExtrEqs" via "HOL-Library.BigO")
Loading theory "HOL-Library.Nat_Bijection" (required by "Draft.DBM_BasicsMoreTemplates" via "Draft.ExtrEqs" via "HOL-Library.Stream")
instantiation
  fun :: (type, plus) plus
  plus_fun == plus :: ('a => 'b) => ('a => 'b) => 'a => 'b
instantiation
  fun :: (type, zero) zero
  zero_fun == zero_class.zero :: 'a => 'b
instantiation
  fun :: (type, times) times
  times_fun == times :: ('a => 'b) => ('a => 'b) => 'a => 'b
instantiation
  fun :: (type, one) one
  one_fun == one_class.one :: 'a => 'b
Found termination order: "(%p. size (snd p)) <*mlex*> {}"
### theory "HOL-Library.Function_Algebras"
### 0.132s elapsed time, 0.541s cpu time, 0.062s GC time
Loading theory "HOL-Library.Set_Algebras" (required by "Draft.DBM_BasicsMoreTemplates" via "Draft.ExtrEqs" via "HOL-Library.BigO")
instantiation
  set :: (plus) plus
  plus_set == plus :: 'a set => 'a set => 'a set
instantiation
  set :: (times) times
  times_set == times :: 'a set => 'a set => 'a set
instantiation
  set :: (zero) zero
  zero_set == zero_class.zero :: 'a set
instantiation
  set :: (one) one
  one_set == one_class.one :: 'a set
Found termination order: "size_list size <*mlex*> {}"
Found termination order: "(%p. length (fst p)) <*mlex*> {}"
### theory "HOL-Library.Nat_Bijection"
### 0.337s elapsed time, 1.346s cpu time, 0.145s GC time
Loading theory "HOL-Library.Stream" (required by "Draft.DBM_BasicsMoreTemplates" via "Draft.ExtrEqs")
### theory "HOL-Library.Set_Algebras"
### 0.215s elapsed time, 0.847s cpu time, 0.083s GC time
Loading theory "HOL-Library.Tree" (required by "Draft.DBM_BasicsMoreTemplates" via "Draft.ExtrEqs" via "Draft.Templates")
Found termination order: "(%p. length (fst p)) <*mlex*> {}"
Found termination order: "(%p. length (fst p)) <*mlex*> {}"
class time = linordered_ab_group_add +
  assumes "dense": "!!x y. x < y ==> EX z>x. z < y"
  assumes "non_trivial": "EX x. x ~= (0::'a)"
consts
  shift :: "'a list => 'a stream => 'a stream"
Proofs for coinductive predicate(s) "streamsp"
  Proving monotonicity ...
consts
  snth :: "'a stream => nat => 'a"
consts
  stake :: "nat => 'a stream => 'a list"
consts
  sdrop :: "nat => 'a stream => 'a stream"
consts
  left :: "'a tree => 'a tree"
consts
  right :: "'a tree => 'a tree"
consts
  sfilter :: "('a => bool) => 'a stream => 'a stream"
class linordered_ab_monoid_add = linordered_ab_semigroup_add +
  fixes neutral :: "'a"
  assumes "neutl": "!!x. \<one> + x = x"
  assumes "neutr": "!!x. x + \<one> = x"
Found termination order: "size <*mlex*> {}"
consts
  cycle :: "'a list => 'a stream"
consts
  siterate :: "('a => 'a) => 'a => 'a stream"
Found termination order: "size <*mlex*> {}"
consts
  flat :: "'a list stream => 'a stream"
Found termination order: "size <*mlex*> {}"
class height = type +
  fixes height :: "'a => nat"
instantiation
  tree :: (type) height
  height_tree == height :: 'a tree => nat
consts
  sinterleave :: "'a stream => 'a stream => 'a stream"
consts
  szip :: "'a stream => 'b stream => ('a * 'b) stream"
consts
  smap2 :: "('a => 'b => 'c) => 'a stream => 'b stream => 'c stream"
Found termination order: "size <*mlex*> {}"
### theory "HOL-Library.Stream"
### 1.058s elapsed time, 3.976s cpu time, 0.857s GC time
Loading theory "HOL-Library.BigO" (required by "Draft.DBM_BasicsMoreTemplates" via "Draft.ExtrEqs")
Found termination order: "size <*mlex*> {}"
Found termination order: "size <*mlex*> {}"
Found termination order: "size <*mlex*> {}"
Found termination order: "size <*mlex*> {}"
Found termination order:
  "(%p. size (fst (snd (snd p)))) <*mlex*>
   (%p. size (fst (snd (snd (snd p))))) <*mlex*>
   (%p. size (snd (snd (snd (snd p))))) <*mlex*> {}"
Found termination order: "size <*mlex*> {}"
Found termination order: "size <*mlex*> {}"
Found termination order: "(%p. size (fst p)) <*mlex*> {}"
Found termination order: "size <*mlex*> {}"
Found termination order: "(%p. size (snd p)) <*mlex*> {}"
### theory "HOL-Library.BigO"
### 0.852s elapsed time, 3.346s cpu time, 0.331s GC time
Found termination order:
  "(%p. size_list size (snd (snd (snd p)))) <*mlex*> {}"
"as @ x # bs @ x # cs @ x # ds"
  :: "'a list"
Found termination order: "size <*mlex*> {}"
Found termination order: "size <*mlex*> {}"
Found termination order: "size <*mlex*> {}"
### theory "HOL-Library.Tree"
### 2.123s elapsed time, 7.996s cpu time, 1.220s GC time
Loading theory "Draft.Templates" (required by "Draft.DBM_BasicsMoreTemplates" via "Draft.ExtrEqs")
Proofs for inductive predicate(s) "valid_abstraction"
  Proving monotonicity ...
Proofs for inductive predicate(s) "clock_val"
  Proving monotonicity ...
datatype template_term
=
     t_empty
   | template_app of template_term * template_term
   | template_hole of int
   | template_var of int
datatype sign
= equals | greater_equals | greater_than | less_equals | less_than
datatype template
=
     template_bimplication of template * template
   | template_dunno
   | template_equation of template_term * template_term
   | template_implication of template list * template
   | template_inequation of sign * template_term * template_term
   | template_negation of template
   | template_predicate of template_term
constructor t_empty: template_term
constructor template_app: template_term * template_term -> template_term
constructor template_hole: int -> template_term
constructor template_var: int -> template_term
constructor equals: sign
constructor greater_equals: sign
constructor greater_than: sign
constructor less_equals: sign
constructor less_than: sign
constructor template_bimplication: template * template -> template
constructor template_dunno: template
constructor template_equation: template_term * template_term -> template
constructor template_implication: template list * template -> template
constructor template_inequation:
   sign * template_term * template_term -> template
constructor template_negation: template -> template
constructor template_predicate: template_term -> template
val vfs = fn: term -> (indexname * typ) list * (string * typ) list
val indexOf = fn: ''a list -> ''a -> int -> int
val has_eq = fn: term -> bool
val term2template = fn:
   (indexname * typ) list -> (string * typ) list -> term -> template_term
val lemma2predicate = fn: term -> term -> template
val makeTemplatewithContext = fn: term -> term -> template
val lemma2template = fn: term -> template
val thm2template = fn: thm -> template
val tterm2string = fn: template_term -> string
val template2string = fn: template -> string
val t = "height ?t <= size ?t": thm
val th =
   Const ("HOL.Trueprop", "bool => prop") $
     (Const ("Orderings.ord_class.less_eq", "nat => nat => bool") $
       (Const ("Tree.height_class.height", "?'a tree => nat") $
         Var (("t", 0), "?'a tree")) $
       (Const ("Nat.size_class.size", "?'a tree => nat") $
         Var (("t", 0), "?'a tree"))):
   term
### theory "Draft.Templates"
### 0.081s elapsed time, 0.247s cpu time, 0.058s GC time
Loading theory "Draft.ExtrEqs" (required by "Draft.DBM_BasicsMoreTemplates")
Found termination order: "(%p. length (fst p)) <*mlex*> {}"
Proofs for inductive predicate(s) "step_t"
  Proving monotonicity ...
Proofs for inductive predicate(s) "step_a"
  Proving monotonicity ...
Proofs for inductive predicate(s) "step"
  Proving monotonicity ...
Proofs for inductive predicate(s) "steps"
  Proving monotonicity ...
Proofs for inductive predicate(s) "step_z"
  Proving monotonicity ...
Proofs for inductive predicate(s) "steps_z"
  Proving monotonicity ...
### theory "Draft.Timed_Automata"
### 3.002s elapsed time, 11.001s cpu time, 1.521s GC time
### theory "Draft.Floyd_Warshall"
### 3.009s elapsed time, 10.934s cpu time, 1.521s GC time
Loading theory "Draft.DBM" (required by "Draft.DBM_BasicsMoreTemplates" via "Draft.DBM_Basics")
Loading theory "Draft.Paths_Cycles" (required by "Draft.DBM_BasicsMoreTemplates" via "Draft.DBM_Basics")
val eqpattern =
   Pattern
    (
       Const ("HOL.Trueprop", "bool => prop") $
         (Const ("HOL.eq", "?'a => ?'a => bool") $
           Var (("_dummy_", 1), "?'a") $ Var (("_dummy_", 2), "?'a"))
       ):
   term Find_Theorems.criterion
val badeqpattern = Pattern (Const ("Pure.eq", "?'a => ?'a => prop")):
   term Find_Theorems.criterion
val undefpattern =
   Pattern
    (
       Const ("HOL.Trueprop", "bool => prop") $
         (Const ("HOL.eq", "?'a => ?'a => bool") $
           Var (("_dummy_", 1), "?'a") $ Const ("HOL.undefined", "?'a"))
       ):
   term Find_Theorems.criterion
val thmpattern =
   Pattern
    (Const ("HOL.Trueprop", "bool => prop") $ Var (("_dummy_", 1), "bool")):
   term Find_Theorems.criterion
val badnames =
   ["*nitpick*", "*Nitpick*", "*full_exhaustive*", "*_def*", "Enum.finite*",
    "*Quickcheck*", "ATP*", "*Nunchaku*", "*Code*", "*BNF*", "*SMT*",
    "*.*.*"]:
   string list
val unwanted_names =
   [(false, Name "*nitpick*"), (false, Name "*Nitpick*"),
    (false, Name "*full_exhaustive*"), (false, Name "*_def*"),
    (false, Name "Enum.finite*"), (false, Name "*Quickcheck*"),
    (false, Name "ATP*"), (false, Name "*Nunchaku*"),
    (false, Name "*Code*"), (false, Name "*BNF*"), (false, Name "*SMT*"),
    (false, Name "*.*.*")]:
   (bool * term Find_Theorems.criterion) list
val has_vars = fn: term -> bool
val get_all_eqs = fn: string -> Proof.context -> (string * thm) list
val get_all_thms = fn: string -> Proof.context -> (string * thm) list
val get_noneq_thms = fn: string -> Proof.context -> (string * thm) list
val template_eqs = fn:
   string -> Proof.context -> (string * thm * template) list
val template_thms = fn:
   string -> Proof.context -> (string * thm * template) list
### theory "Draft.ExtrEqs"
### 0.636s elapsed time, 1.950s cpu time, 0.164s GC time
Found termination order: "(%p. size_list size (snd (snd p))) <*mlex*> {}"
Found termination order: "(%p. length (snd p)) <*mlex*> {}"
Proofs for inductive predicate(s) "dbm_entry_val"
  Proving monotonicity ...
[| (?a, ?b) : set (arcs ?i ?j ?xs); ?b ~= ?j |]
==> EX c. ?xs = [?b] & ?a = ?i |
          (EX ys. ?xs = ?b # c # ys & ?a = ?i) |
          (EX ys. ?xs = ys @ [?a, ?b] & c = ?j) |
          (EX ys zs. ?xs = ys @ ?a # ?b # c # zs)
Found termination order: "{}"
Proofs for inductive predicate(s) "dbm_lt"
  Proving monotonicity ...
### theory "Draft.Paths_Cycles"
### 1.102s elapsed time, 2.866s cpu time, 1.182s GC time
Found termination order: "{}"
\<infinity> \<otimes> ?uu = \<infinity>
Le ?v \<otimes> \<infinity> = \<infinity>
Lt ?v \<otimes> \<infinity> = \<infinity>
Le ?a \<otimes> Le ?b = Le (?a + ?b)
Le ?a \<otimes> Lt ?b = Lt (?a + ?b)
Lt ?a \<otimes> Le ?b = Lt (?a + ?b)
Lt ?a \<otimes> Lt ?b = Lt (?a + ?b)
instantiation
  DBMEntry :: (time) linorder
  less_eq_DBMEntry == less_eq :: 'a DBMEntry => 'a DBMEntry => bool
  less_DBMEntry == less :: 'a DBMEntry => 'a DBMEntry => bool
instantiation
  DBMEntry :: (time) linordered_ab_monoid_add
  neutral_DBMEntry == neutral :: 'a DBMEntry
  plus_DBMEntry == plus :: 'a DBMEntry => 'a DBMEntry => 'a DBMEntry
### Partially applied constant "DBM.dbm_le" on left hand side of equation, in theorem:
### linorder.Min dbm_le (set (?x # ?xs)) == fold linordered_monoid.min ?xs ?x
### Partially applied constant "DBM.dbm_le" on left hand side of equation, in theorem:
### linorder.Max dbm_le (set (?x # ?xs)) == fold linordered_monoid.max ?xs ?x
### Partially applied constant "DBM.dbm_le" on left hand side of equation, in theorem:
### linordered_monoid.sorted [] == True
### Partially applied constant "DBM.dbm_le" on left hand side of equation, in theorem:
### linordered_monoid.sorted [?x] == True
### Partially applied constant "DBM.dbm_le" on left hand side of equation, in theorem:
### linordered_monoid.sorted (?x # ?y # ?zs) ==
### ?x \<preceq> ?y & linordered_monoid.sorted (?y # ?zs)
### Partially applied constant "DBM.dbm_le" on left hand side of equation, in theorem:
### linordered_monoid.sorted_list_of_set (set ?xs) ==
### linordered_monoid.sort (remdups ?xs)
### theory "Draft.DBM"
### 1.818s elapsed time, 3.675s cpu time, 1.267s GC time
Loading theory "Draft.DBM_Basics" (required by "Draft.DBM_BasicsMoreTemplates")
Found termination order: "{}"
Found termination order:
  "(%p. size (fst (snd (snd p)))) <*mlex*>
   (%p. size (fst (snd (snd (snd p))))) <*mlex*> {}"
### theory "Draft.DBM_Basics"
### 0.603s elapsed time, 0.759s cpu time, 0.122s GC time
Loading theory "Draft.DBM_BasicsMoreTemplates"
val templateLemmas =
   [("DBM_Basics.distinct_cnt", "distinct ?xs ==> cnt ?x ?xs <= 1",
     template_implication
      ([template_predicate
         (template_app (template_hole 5, template_var 1))],
       template_inequation
        (less_equals,
         template_app
          (template_hole 3,
           template_app
            (template_app (template_hole 2, t_empty), template_var 1)),
         template_hole 0))),
    ("DBM_Basics.cnt_0_I", "?x ~: set ?xs ==> cnt ?x ?xs = 0",
     template_implication
      ([template_negation
         (
            template_predicate
             (
                template_app
                 (template_app (template_hole 6, template_var 1),
                  template_app (template_hole 5, template_var 0))
                )
            )],
       template_equation
        (template_app
          (template_hole 3,
           template_app
            (template_app (template_hole 2, t_empty), template_var 0)),
         template_hole 0))),
    ("DBM_Basics.FW_not_empty",
     "?u \<turnstile>\<^bsub>?v,?n\<^esub> FW ?M' ?n ==>
      ?u \<turnstile>\<^bsub>?v,?n\<^esub> ?M'",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_app (template_hole 1, template_var 3),
                  template_var 2),
                template_app
                 (template_app
                   (template_app
                     (template_app
                       (template_app (template_hole 0, template_var 1),
                        template_var 0),
                      template_var 0),
                    template_var 0),
                  template_var 0)),
              template_var 0)
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_app
                (template_app (template_hole 1, template_var 3),
                 template_var 2),
               template_var 1),
             template_var 0)
           ))),
    ("DBM_Basics.sum_gt_neutral_dest",
     "\<one> < ?a + ?b ==> EX d. Le d <= ?a & Le (- d) <= ?b",
     template_implication
      ([template_inequation
         (less_than, template_hole 6,
          template_app
           (template_app (template_hole 5, template_var 1),
            template_var 0))],
       template_predicate (template_app (template_hole 4, t_empty)))),
    ("DBM_Basics.dbm_entry_val_mono_2",
     "[| dbm_entry_val ?u None (Some ?c) ?b; ?b \<preceq> ?b' |]
      ==> dbm_entry_val ?u None (Some ?c) ?b'",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_app (template_hole 3, template_var 3),
                  template_hole 2),
                template_app (template_hole 1, template_var 2)),
              template_var 1)
            ),
        template_predicate
         (
            template_app
             (template_app (template_hole 0, template_var 1),
              template_var 0)
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_app
                (template_app (template_hole 3, template_var 3),
                 template_hole 2),
               template_app (template_hole 1, template_var 2)),
             template_var 0)
           ))),
    ("DBM_Basics.dbm_entry_val_mono_3",
     "[| dbm_entry_val ?u (Some ?c) None ?b; ?b \<preceq> ?b' |]
      ==> dbm_entry_val ?u (Some ?c) None ?b'",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_app (template_hole 3, template_var 3),
                  template_app (template_hole 2, template_var 2)),
                template_hole 1),
              template_var 1)
            ),
        template_predicate
         (
            template_app
             (template_app (template_hole 0, template_var 1),
              template_var 0)
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_app
                (template_app (template_hole 3, template_var 3),
                 template_app (template_hole 2, template_var 2)),
               template_hole 1),
             template_var 0)
           ))),
    ("DBM_Basics.dbm_entry_val_mono_1",
     "[| dbm_entry_val ?u (Some ?c) (Some ?c') ?b; ?b \<preceq> ?b' |]
      ==> dbm_entry_val ?u (Some ?c) (Some ?c') ?b'",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_app (template_hole 2, template_var 4),
                  template_app (template_hole 1, template_var 3)),
                template_app (template_hole 1, template_var 2)),
              template_var 1)
            ),
        template_predicate
         (
            template_app
             (template_app (template_hole 0, template_var 1),
              template_var 0)
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_app
                (template_app (template_hole 2, template_var 4),
                 template_app (template_hole 1, template_var 3)),
               template_app (template_hole 1, template_var 2)),
             template_var 0)
           ))),
    ("DBM_Basics.upd_2",
     "?i <= ?m ==>
      DBM_upd ?M1.0 ?f (Suc ?m) ?n ?N ?i ?j =
      DBM_upd ?M1.0 ?f (Suc ?m) 0 ?N ?i ?j",
     template_implication
      ([template_inequation (less_equals, template_var 6, template_var 5)],
       template_equation
        (template_app
          (template_app
            (template_app
              (template_app
                (template_app
                  (template_app
                    (template_app (template_hole 2, template_var 4),
                     template_var 3),
                   template_app (template_hole 1, template_var 5)),
                 template_var 2),
               template_var 1),
             template_var 6),
           template_var 0),
         template_app
          (template_app
            (template_app
              (template_app
                (template_app
                  (template_app
                    (template_app (template_hole 2, template_var 4),
                     template_var 3),
                   template_app (template_hole 1, template_var 5)),
                 template_hole 0),
               template_var 1),
             template_var 6),
           template_var 0)))),
    ("DBM_Basics.upd_1",
     "?j <= ?n ==>
      DBM_upd ?M1.0 ?f (Suc ?m) ?n ?N (Suc ?m) ?j =
      DBM_upd ?M1.0 ?f (Suc ?m) ?j ?N (Suc ?m) ?j",
     template_implication
      ([template_inequation (less_equals, template_var 5, template_var 4)],
       template_equation
        (template_app
          (template_app
            (template_app
              (template_app
                (template_app
                  (template_app
                    (template_app (template_hole 1, template_var 3),
                     template_var 2),
                   template_app (template_hole 0, template_var 1)),
                 template_var 4),
               template_var 0),
             template_app (template_hole 0, template_var 1)),
           template_var 5),
         template_app
          (template_app
            (template_app
              (template_app
                (template_app
                  (template_app
                    (template_app (template_hole 1, template_var 3),
                     template_var 2),
                   template_app (template_hole 0, template_var 1)),
                 template_var 5),
               template_var 0),
             template_app (template_hole 0, template_var 1)),
           template_var 5)))),
    ("DBM_Basics.sum_gt_neutral_dest'",
     "[| \<one> <= ?a; \<one> < ?a + ?b |]
      ==> EX d. Le d <= ?a & Le (- d) <= ?b & (0::?'a) <= d",
     template_implication
      ([template_inequation (less_equals, template_hole 8, template_var 1),
        template_inequation
         (less_than, template_hole 8,
          template_app
           (template_app (template_hole 6, template_var 1),
            template_var 0))],
       template_predicate (template_app (template_hole 5, t_empty)))),
    ("DBM_Basics.non_empty_cycle_free",
     "[| [?M]\<^bsub>?v,?n\<^esub> ~= {};
         ALL k<=?n. 0 < k --> (EX c. ?v c = k) |]
      ==> cycle_free ?M ?n",
     template_implication
      ([template_negation
         (
            template_equation
             (template_app
               (template_app
                 (template_app (template_hole 9, template_var 2),
                  template_var 1),
                template_var 0),
              template_hole 8)
            ),
        template_predicate (template_app (template_hole 7, t_empty))],
       template_predicate
        (
           template_app
            (template_app (template_hole 0, template_var 2), template_var 0)
           ))),
    ("DBM_Basics.FW_zone_equiv",
     "ALL k<=?n. 0 < k --> (EX c. ?v c = k) ==>
      [?M]\<^bsub>?v,?n\<^esub> = [FW ?M ?n]\<^bsub>?v,?n\<^esub>",
     template_implication
      ([template_predicate (template_app (template_hole 9, t_empty))],
       template_equation
        (template_app
          (template_app
            (template_app (template_hole 1, template_var 0),
             template_var 1),
           template_var 2),
         template_app
          (template_app
            (template_app
              (template_hole 1,
               template_app
                (template_app
                  (template_app
                    (template_app
                      (template_app (template_hole 0, template_var 0),
                       template_var 2),
                     template_var 2),
                   template_var 2),
                 template_var 2)),
             template_var 1),
           template_var 2)))),
    ("DBM_Basics.upd_id",
     "[| ?m <= ?N; ?n <= ?N; ?i <= ?m; ?j <= ?n |]
      ==> DBM_upd ?M1.0 ?f ?m ?n ?N ?i ?j = ?f ?i ?j",
     template_implication
      ([template_inequation (less_equals, template_var 6, template_var 5),
        template_inequation (less_equals, template_var 4, template_var 5),
        template_inequation (less_equals, template_var 3, template_var 6),
        template_inequation (less_equals, template_var 2, template_var 4)],
       template_equation
        (template_app
          (template_app
            (template_app
              (template_app
                (template_app
                  (template_app
                    (template_app (template_hole 0, template_var 1),
                     template_var 0),
                   template_var 6),
                 template_var 4),
               template_var 5),
             template_var 3),
           template_var 2),
         template_app
          (template_app (template_var 0, template_var 3),
           template_var 2)))),
    ("DBM_Basics.DBM_le_subset",
     "[| ALL i j. i <= ?n --> j <= ?n --> ?M i j \<preceq> ?M' i j;
         ?u : [?M]\<^bsub>?v,?n\<^esub> |]
      ==> ?u : [?M']\<^bsub>?v,?n\<^esub>",
     template_implication
      ([template_predicate (template_app (template_hole 5, t_empty)),
        template_predicate
         (
            template_app
             (template_app (template_hole 1, template_var 1),
              template_app
               (template_app
                 (template_app (template_hole 0, template_var 3),
                  template_var 0),
                template_var 4))
            )],
       template_predicate
        (
           template_app
            (template_app (template_hole 1, template_var 1),
             template_app
              (template_app
                (template_app (template_hole 0, template_var 2),
                 template_var 0),
               template_var 4))
           ))),
    ("DBM_Basics.neg_diag_empty",
     "[| ALL k<=?n. 0 < k --> (EX c. ?v c = k); ?i <= ?n;
         ?M ?i ?i < \<one> |]
      ==> [?M]\<^bsub>?v,?n\<^esub> = {}",
     template_implication
      ([template_predicate (template_app (template_hole 11, t_empty)),
        template_inequation (less_equals, template_var 1, template_var 3),
        template_inequation
         (less_than,
          template_app
           (template_app (template_var 0, template_var 1), template_var 1),
          template_hole 3)],
       template_equation
        (template_app
          (template_app
            (template_app (template_hole 1, template_var 0),
             template_var 2),
           template_var 3),
         template_hole 0))),
    ("DBM_Basics.upd_3",
     "[| ?m <= ?N; ?n <= ?N; ?j <= ?n; ?i <= ?m |]
      ==> DBM_upd ?M1.0 ?f ?m ?n ?N ?i ?j =
          DBM_upd ?M1.0 ?f ?i ?j ?N ?i ?j",
     template_implication
      ([template_inequation (less_equals, template_var 6, template_var 5),
        template_inequation (less_equals, template_var 4, template_var 5),
        template_inequation (less_equals, template_var 3, template_var 4),
        template_inequation (less_equals, template_var 2, template_var 6)],
       template_equation
        (template_app
          (template_app
            (template_app
              (template_app
                (template_app
                  (template_app
                    (template_app (template_hole 0, template_var 1),
                     template_var 0),
                   template_var 6),
                 template_var 4),
               template_var 5),
             template_var 2),
           template_var 3),
         template_app
          (template_app
            (template_app
              (template_app
                (template_app
                  (template_app
                    (template_app (template_hole 0, template_var 1),
                     template_var 0),
                   template_var 2),
                 template_var 3),
               template_var 5),
             template_var 2),
           template_var 3)))),
    ("DBM_Basics.D_dest",
     "?x =
      ??.Floyd_Warshall.linordered_ab_monoid_add_class.D ?m ?i ?j ?k ==>
      ?x : {len ?m ?i ?j xs |xs.
            set xs <= {0..?k} & ?i ~: set xs & ?j ~: set xs & distinct xs}",
     template_implication
      ([template_equation
         (template_var 4,
          template_app
           (template_app
             (template_app
               (template_app (template_hole 12, template_var 3),
                template_var 2),
              template_var 1),
            template_var 0))],
       template_predicate
        (
           template_app
            (template_app (template_hole 11, template_var 4),
             template_app (template_hole 10, t_empty))
           ))),
    ("DBM_Basics.empty_not_cyc_free",
     "[| ALL c. ?v c <= ?n --> 0 < ?v c; [?M]\<^bsub>?v,?n\<^esub> = {} |]
      ==> ~ (ALL i xs.
                i <= ?n & set xs <= {0..?n} --> \<one> <= len ?M i i xs)",
     template_implication
      ([template_predicate (template_app (template_hole 17, t_empty)),
        template_equation
         (template_app
           (template_app
             (template_app (template_hole 11, template_var 0),
              template_var 2),
            template_var 1),
          template_hole 10)],
       template_negation
        (template_predicate (template_app (template_hole 8, t_empty))))),
    ("DBM_Basics.cyc_free_obtains_valuation",
     "[| ALL i xs. i <= ?n & set xs <= {0..?n} --> \<one> <= len ?M i i xs;
         ALL c. ?v c <= ?n --> 0 < ?v c |]
      ==> EX u. u \<turnstile>\<^bsub>?v,?n\<^esub> ?M",
     template_implication
      ([template_predicate (template_app (template_hole 15, t_empty)),
        template_predicate (template_app (template_hole 3, t_empty))],
       template_predicate (template_app (template_hole 1, t_empty)))),
    ("DBM_Basics.cyc_free_not_empty",
     "[| ALL i xs. i <= ?n & set xs <= {0..?n} --> \<one> <= len ?M i i xs;
         ALL c. ?v c <= ?n --> 0 < ?v c |]
      ==> [?M]\<^bsub>?v,?n\<^esub> ~= {}",
     template_implication
      ([template_predicate (template_app (template_hole 17, t_empty)),
        template_predicate (template_app (template_hole 5, t_empty))],
       template_negation
        (
           template_equation
            (template_app
              (template_app
                (template_app (template_hole 1, template_var 1),
                 template_var 0),
               template_var 2),
             template_hole 0)
           ))),
    ("DBM_Basics.neg_cycle_empty",
     "[| ALL k<=?n. 0 < k --> (EX c. ?v c = k); set ?xs <= {0..?n};
         ?i <= ?n; len ?M ?i ?i ?xs < \<one> |]
      ==> [?M]\<^bsub>?v,?n\<^esub> = {}",
     template_implication
      ([template_predicate (template_app (template_hole 15, t_empty)),
        template_inequation
         (less_equals, template_app (template_hole 7, template_var 2),
          template_app
           (template_app (template_hole 6, template_hole 11),
            template_var 4)),
        template_inequation (less_equals, template_var 1, template_var 4),
        template_inequation
         (less_than,
          template_app
           (template_app
             (template_app
               (template_app (template_hole 4, template_var 0),
                template_var 1),
              template_var 1),
            template_var 2),
          template_hole 3)],
       template_equation
        (template_app
          (template_app
            (template_app (template_hole 1, template_var 0),
             template_var 3),
           template_var 4),
         template_hole 0))),
    ("DBM_Basics.DBM_val_bounded_neg_cycle",
     "[| ?u \<turnstile>\<^bsub>?v,?n\<^esub> ?M; ?i <= ?n;
         set ?xs <= {0..?n}; len ?M ?i ?i ?xs < \<one>;
         ALL k<=?n. 0 < k --> (EX c. ?v c = k) |]
      ==> False",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_app (template_hole 14, template_var 5),
                  template_var 4),
                template_var 3),
              template_var 2)
            ),
        template_inequation (less_equals, template_var 1, template_var 2),
        template_inequation
         (less_equals, template_app (template_hole 11, template_var 0),
          template_app
           (template_app (template_hole 10, template_hole 9),
            template_var 2)),
        template_inequation
         (less_than,
          template_app
           (template_app
             (template_app
               (template_app (template_hole 7, template_var 3),
                template_var 1),
              template_var 1),
            template_var 0),
          template_hole 6),
        template_predicate (template_app (template_hole 5, t_empty))],
       template_predicate (template_hole 0))),
    ("DBM_Basics.not_empty_cyc_free",
     "[| ALL k<=?n. 0 < k --> (EX c. ?v c = k);
         [?M]\<^bsub>?v,?n\<^esub> ~= {} |]
      ==> ALL i xs.
             i <= ?n & set xs <= {0..?n} --> \<one> <= len ?M i i xs",
     template_implication
      ([template_predicate (template_app (template_hole 18, t_empty)),
        template_negation
         (
            template_equation
             (template_app
               (template_app
                 (template_app (template_hole 9, template_var 0),
                  template_var 1),
                template_var 2),
              template_hole 8)
            )],
       template_predicate (template_app (template_hole 18, t_empty)))),
    ("DBM_Basics.non_empty_dbm_diag_set",
     "[| ALL c.
            0 < ?v c &
            (ALL x y. ?v x <= ?n & ?v y <= ?n & ?v x = ?v y --> x = y);
         [?M]\<^bsub>?v,?n\<^esub> ~= {} |]
      ==> [?M]\<^bsub>?v,?n\<^esub> =
          [(%i j. if i = j then \<one> else ?M i j)]\<^bsub>?v,?n\<^esub>",
     template_implication
      ([template_predicate (template_app (template_hole 13, t_empty)),
        template_negation
         (
            template_equation
             (template_app
               (template_app
                 (template_app (template_hole 3, template_var 0),
                  template_var 2),
                template_var 1),
              template_hole 2)
            )],
       template_equation
        (template_app
          (template_app
            (template_app (template_hole 3, template_var 0),
             template_var 2),
           template_var 1),
         template_app
          (template_app
            (template_app (template_hole 3, t_empty), template_var 2),
           template_var 1)))),
    ("DBM_Basics.FW_detects_empty_zone",
     "[| ALL k<=?n. 0 < k --> (EX c. ?v c = k);
         ALL c. ?v c <= ?n --> 0 < ?v c |]
      ==> ([FW ?M ?n]\<^bsub>?v,?n\<^esub> = {}) =
          (EX i<=?n. FW ?M ?n i i < Le (0::?'b))",
     template_implication
      ([template_predicate (template_app (template_hole 17, t_empty)),
        template_predicate (template_app (template_hole 10, t_empty))],
       template_equation
        (template_app
          (template_app
            (template_hole 8,
             template_app
              (template_app
                (template_app
                  (template_hole 7,
                   template_app
                    (template_app
                      (template_app
                        (template_app
                          (template_app (template_hole 6, template_var 0),
                           template_var 2),
                         template_var 2),
                       template_var 2),
                     template_var 2)),
                 template_var 1),
               template_var 2)),
           template_hole 5),
         template_app (template_hole 4, t_empty)))),
    ("DBM_Basics.DBM_val_bounded_neg_cycle1",
     "[| ?u \<turnstile>\<^bsub>?v,?n\<^esub> ?M; ?i <= ?n;
         set ?xs <= {0..?n}; len ?M ?i ?i ?xs < \<one>;
         ALL k<=?n. 0 < k --> (EX c. ?v c = k); ?i ~= 0; cnt 0 ?xs <= 1 |]
      ==> False",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_app (template_hole 18, template_var 5),
                  template_var 4),
                template_var 3),
              template_var 2)
            ),
        template_inequation (less_equals, template_var 1, template_var 2),
        template_inequation
         (less_equals, template_app (template_hole 15, template_var 0),
          template_app
           (template_app (template_hole 14, template_hole 13),
            template_var 2)),
        template_inequation
         (less_than,
          template_app
           (template_app
             (template_app
               (template_app (template_hole 11, template_var 3),
                template_var 1),
              template_var 1),
            template_var 0),
          template_hole 10),
        template_predicate (template_app (template_hole 9, t_empty)),
        template_negation
         (template_equation (template_var 1, template_hole 13)),
        template_inequation
         (less_equals,
          template_app
           (template_hole 3,
            template_app
             (template_app (template_hole 2, t_empty), template_var 0)),
          template_hole 1)],
       template_predicate (template_hole 0))),
    ("DBM_Basics.canonical_empty_zone",
     "[| ALL k<=?n. 0 < k --> (EX c. ?v c = k);
         ALL c. ?v c <= ?n --> 0 < ?v c; canonical ?M ?n |]
      ==> ([?M]\<^bsub>?v,?n\<^esub> = {}) = (EX i<=?n. ?M i i < \<one>)",
     template_implication
      ([template_predicate (template_app (template_hole 17, t_empty)),
        template_predicate (template_app (template_hole 10, t_empty)),
        template_predicate (template_app (template_hole 17, t_empty))],
       template_equation
        (template_app
          (template_app
            (template_hole 5,
             template_app
              (template_app
                (template_app (template_hole 4, template_var 0),
                 template_var 1),
               template_var 2)),
           template_hole 3),
         template_app (template_hole 2, t_empty)))),
    ("DBM_Basics.fix_index'",
     "[| Le ?r <= ?M ?i ?j; Le (- ?r) <= ?M ?j ?i; cycle_free ?M ?n;
         canonical ?M ?n; ?i <= ?n; ?j <= ?n; ?i ~= ?j |]
      ==> (ALL u.
              u \<turnstile>\<^bsub>?v,?n\<^esub> %i' j'.
               if i' = ?i & j' = ?j then Le ?r
               else if i' = ?j & j' = ?i then Le (- ?r) else ?M i' j' -->
              u \<turnstile>\<^bsub>?v,?n\<^esub> ?M) &
          cycle_free
           (%i' j'.
               if i' = ?i & j' = ?j then Le ?r
               else if i' = ?j & j' = ?i then Le (- ?r) else ?M i' j')
           ?n",
     template_implication
      ([template_inequation
         (less_equals, template_app (template_hole 12, template_var 5),
          template_app
           (template_app (template_var 4, template_var 3), template_var 2)),
        template_inequation
         (less_equals,
          template_app
           (template_hole 12,
            template_app (template_hole 11, template_var 5)),
          template_app
           (template_app (template_var 4, template_var 2), template_var 3)),
        template_predicate
         (
            template_app
             (template_app (template_hole 10, template_var 4),
              template_var 1)
            ),
        template_predicate (template_app (template_hole 9, t_empty)),
        template_inequation (less_equals, template_var 3, template_var 1),
        template_inequation (less_equals, template_var 2, template_var 1),
        template_negation
         (template_equation (template_var 3, template_var 2))],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 7, template_app (template_hole 2, t_empty)),
             template_app
              (template_app (template_hole 10, t_empty), template_var 1))
           ))),
    ("DBM_Basics.fix_index",
     "[| \<one> < ?M 0 ?i + ?M ?i 0; cycle_free ?M ?n; canonical ?M ?n;
         ?i <= ?n; ?i ~= 0 |]
      ==> EX M'.
             ((EX u. u \<turnstile>\<^bsub>?v,?n\<^esub> M') -->
              (EX u. u \<turnstile>\<^bsub>?v,?n\<^esub> ?M)) &
             M' 0 ?i + M' ?i 0 = \<one> &
             cycle_free M' ?n &
             (ALL j.
                 ?i ~= j & ?M 0 j + ?M j 0 = \<one> -->
                 M' 0 j + M' j 0 = \<one>) &
             (ALL j.
                 ?i ~= j & \<one> < ?M 0 j + ?M j 0 -->
                 \<one> < M' 0 j + M' j 0)",
     template_implication
      ([template_inequation
         (less_than, template_hole 14,
          template_app
           (template_app
             (template_hole 13,
              template_app
               (template_app (template_var 3, template_hole 12),
                template_var 2)),
            template_app
             (template_app (template_var 3, template_var 2),
              template_hole 12))),
        template_predicate
         (
            template_app
             (template_app (template_hole 11, template_var 3),
              template_var 1)
            ),
        template_predicate (template_app (template_hole 10, t_empty)),
        template_inequation (less_equals, template_var 2, template_var 1),
        template_negation
         (template_equation (template_var 2, template_hole 12))],
       template_predicate (template_app (template_hole 3, t_empty)))),
    ("DBM_Basics.fix_indices",
     "[| set ?xs <= {0..?n}; distinct ?xs;
         ALL i xs. i <= ?n & set xs <= {0..?n} --> \<one> <= len ?M i i xs;
         canonical ?M ?n |]
      ==> EX M'.
             ((EX u. u \<turnstile>\<^bsub>?v,?n\<^esub> M') -->
              (EX u. u \<turnstile>\<^bsub>?v,?n\<^esub> ?M)) &
             (ALL i:set ?xs. i ~= 0 --> M' 0 i + M' i 0 = \<one>) &
             (ALL i xs.
                 i <= ?n & set xs <= {0..?n} --> \<one> <= len M' i i xs) &
             (ALL i<=?n.
                 i ~: set ?xs & ?M 0 i + ?M i 0 = \<one> -->
                 M' 0 i + M' i 0 = \<one>)",
     template_implication
      ([template_inequation
         (less_equals, template_app (template_hole 20, template_var 3),
          template_app
           (template_app (template_hole 19, template_hole 18),
            template_var 2)),
        template_predicate
         (template_app (template_hole 17, template_var 3)),
        template_predicate (template_app (template_hole 16, t_empty)),
        template_predicate (template_app (template_hole 16, t_empty))],
       template_predicate (template_app (template_hole 7, t_empty)))),
    ("DBM_Basics.new_negative_cycle_aux",
     "[| ?i <= ?n; set ?xs <= {0..?n}; cycle_free ?M ?n; length ?xs = ?m;
         len (%i' j'.
                 if i' = ?i & j' = 0 then Le ?d
                 else if i' = 0 & j' = ?i then Le (- ?d) else ?M i' j')
          0 0 (?i # ?xs)
         < \<one> |
         len (%i' j'.
                 if i' = ?i & j' = 0 then Le ?d
                 else if i' = 0 & j' = ?i then Le (- ?d) else ?M i' j')
          ?i ?i (0 # ?xs)
         < \<one>;
         ?i ~= 0 |]
      ==> EX xs.
             set xs <= {0..?n} &
             0 ~: set xs &
             ?i ~: set xs &
             (len (%i' j'.
                      if i' = ?i & j' = 0 then Le ?d
                      else if i' = 0 & j' = ?i then Le (- ?d) else ?M i' j')
               0 0 (?i # xs)
              < \<one> |
              len (%i' j'.
                      if i' = ?i & j' = 0 then Le ?d
                      else if i' = 0 & j' = ?i then Le (- ?d) else ?M i' j')
               ?i ?i (0 # xs)
              < \<one>)",
     template_implication
      ([template_inequation (less_equals, template_var 5, template_var 4),
        template_inequation
         (less_equals, template_app (template_hole 17, template_var 3),
          template_app
           (template_app (template_hole 16, template_hole 15),
            template_var 4)),
        template_predicate
         (
            template_app
             (template_app (template_hole 14, template_var 2),
              template_var 4)
            ),
        template_equation
         (template_app (template_hole 12, template_var 3), template_var 1),
        template_predicate
         (
            template_app
             (template_app
               (template_hole 11,
                template_app
                 (template_app
                   (template_hole 10,
                    template_app
                     (template_app
                       (template_app
                         (template_app (template_hole 9, t_empty),
                          template_hole 15),
                        template_hole 15),
                      template_app
                       (template_app (template_hole 4, template_var 5),
                        template_var 3))),
                  template_hole 3)),
              template_app
               (template_app
                 (template_hole 10,
                  template_app
                   (template_app
                     (template_app
                       (template_app (template_hole 9, t_empty),
                        template_var 5),
                      template_var 5),
                    template_app
                     (template_app (template_hole 4, template_hole 15),
                      template_var 3))),
                template_hole 3))
            ),
        template_negation
         (template_equation (template_var 5, template_hole 15))],
       template_predicate (template_app (template_hole 1, t_empty)))),
    ("DBM_Basics.new_negative_cycle_aux'",
     "[| ?i <= ?n; ?j <= ?n; set ?xs <= {0..?n}; cycle_free ?M ?n;
         length ?xs = ?m;
         len (%i' j'.
                 if i' = ?i & j' = ?j then Le ?d
                 else if i' = ?j & j' = ?i then Le (- ?d) else ?M i' j')
          ?i ?i (?j # ?xs)
         < \<one> |
         len (%i' j'.
                 if i' = ?i & j' = ?j then Le ?d
                 else if i' = ?j & j' = ?i then Le (- ?d) else ?M i' j')
          ?j ?j (?i # ?xs)
         < \<one>;
         ?i ~= ?j |]
      ==> EX xs.
             set xs <= {0..?n} &
             ?j ~: set xs &
             ?i ~: set xs &
             (len (%i' j'.
                      if i' = ?i & j' = ?j then Le ?d
                      else if i' = ?j & j' = ?i then Le (- ?d)
                           else ?M i' j')
               ?i ?i (?j # xs)
              < \<one> |
              len (%i' j'.
                      if i' = ?i & j' = ?j then Le ?d
                      else if i' = ?j & j' = ?i then Le (- ?d)
                           else ?M i' j')
               ?j ?j (?i # xs)
              < \<one>)",
     template_implication
      ([template_inequation (less_equals, template_var 6, template_var 5),
        template_inequation (less_equals, template_var 4, template_var 5),
        template_inequation
         (less_equals, template_app (template_hole 17, template_var 3),
          template_app
           (template_app (template_hole 16, template_hole 15),
            template_var 5)),
        template_predicate
         (
            template_app
             (template_app (template_hole 14, template_var 2),
              template_var 5)
            ),
        template_equation
         (template_app (template_hole 12, template_var 3), template_var 1),
        template_predicate
         (
            template_app
             (template_app
               (template_hole 11,
                template_app
                 (template_app
                   (template_hole 10,
                    template_app
                     (template_app
                       (template_app
                         (template_app (template_hole 9, t_empty),
                          template_var 6),
                        template_var 6),
                      template_app
                       (template_app (template_hole 4, template_var 4),
                        template_var 3))),
                  template_hole 3)),
              template_app
               (template_app
                 (template_hole 10,
                  template_app
                   (template_app
                     (template_app
                       (template_app (template_hole 9, t_empty),
                        template_var 4),
                      template_var 4),
                    template_app
                     (template_app (template_hole 4, template_var 6),
                      template_var 3))),
                template_hole 3))
            ),
        template_negation
         (template_equation (template_var 6, template_var 4))],
       template_predicate (template_app (template_hole 1, t_empty))))]:
   (string * thm * template) list
### theory "Draft.DBM_BasicsMoreTemplates"
### 0.693s elapsed time, 1.672s cpu time, 1.125s GC time
val it = (): unit
