Loading theory "Draft.Timed_Automata" (required by "Draft.Timed_AutomataMoreTemplates")
Loading theory "HOL-Library.Function_Algebras" (required by "Draft.Timed_AutomataMoreTemplates" via "Draft.ExtrEqs" via "HOL-Library.BigO")
Loading theory "HOL-Library.Nat_Bijection" (required by "Draft.Timed_AutomataMoreTemplates" via "Draft.ExtrEqs" via "HOL-Library.Stream")
Loading theory "HOL-Library.Set_Algebras" (required by "Draft.Timed_AutomataMoreTemplates" via "Draft.ExtrEqs" via "HOL-Library.BigO")
instantiation
  fun :: (type, plus) plus
  plus_fun == plus :: ('a => 'b) => ('a => 'b) => 'a => 'b
instantiation
  set :: (plus) plus
  plus_set == plus :: 'a set => 'a set => 'a set
instantiation
  set :: (times) times
  times_set == times :: 'a set => 'a set => 'a set
instantiation
  fun :: (type, zero) zero
  zero_fun == zero_class.zero :: 'a => 'b
instantiation
  fun :: (type, times) times
  times_fun == times :: ('a => 'b) => ('a => 'b) => 'a => 'b
instantiation
  set :: (zero) zero
  zero_set == zero_class.zero :: 'a set
instantiation
  set :: (one) one
  one_set == one_class.one :: 'a set
instantiation
  fun :: (type, one) one
  one_fun == one_class.one :: 'a => 'b
Found termination order: "(%p. size (snd p)) <*mlex*> {}"
### theory "HOL-Library.Function_Algebras"
### 0.131s elapsed time, 0.533s cpu time, 0.043s GC time
Loading theory "HOL-Library.Tree" (required by "Draft.Timed_AutomataMoreTemplates" via "Draft.ExtrEqs" via "Draft.Templates")
Found termination order: "size_list size <*mlex*> {}"
### theory "HOL-Library.Set_Algebras"
### 0.254s elapsed time, 1.026s cpu time, 0.043s GC time
Loading theory "HOL-Library.BigO" (required by "Draft.Timed_AutomataMoreTemplates" via "Draft.ExtrEqs")
### theory "HOL-Library.Nat_Bijection"
### 0.367s elapsed time, 1.465s cpu time, 0.127s GC time
Loading theory "HOL-Library.Stream" (required by "Draft.Timed_AutomataMoreTemplates" via "Draft.ExtrEqs")
class time = linordered_ab_group_add +
  assumes "dense": "!!x y. x < y ==> EX z>x. z < y"
  assumes "non_trivial": "EX x. x ~= (0::'a)"
consts
  left :: "'a tree => 'a tree"
consts
  right :: "'a tree => 'a tree"
Found termination order: "size <*mlex*> {}"
Found termination order: "size <*mlex*> {}"
consts
  shift :: "'a list => 'a stream => 'a stream"
Proofs for coinductive predicate(s) "streamsp"
  Proving monotonicity ...
Found termination order: "size <*mlex*> {}"
consts
  snth :: "'a stream => nat => 'a"
class height = type +
  fixes height :: "'a => nat"
instantiation
  tree :: (type) height
  height_tree == height :: 'a tree => nat
consts
  stake :: "nat => 'a stream => 'a list"
consts
  sdrop :: "nat => 'a stream => 'a stream"
Found termination order: "size <*mlex*> {}"
consts
  sfilter :: "('a => bool) => 'a stream => 'a stream"
consts
  cycle :: "'a list => 'a stream"
Found termination order: "size <*mlex*> {}"
consts
  siterate :: "('a => 'a) => 'a => 'a stream"
### theory "HOL-Library.BigO"
### 0.998s elapsed time, 3.776s cpu time, 0.851s GC time
Found termination order: "size <*mlex*> {}"
consts
  flat :: "'a list stream => 'a stream"
consts
  sinterleave :: "'a stream => 'a stream => 'a stream"
Found termination order: "size <*mlex*> {}"
consts
  szip :: "'a stream => 'b stream => ('a * 'b) stream"
consts
  smap2 :: "('a => 'b => 'c) => 'a stream => 'b stream => 'c stream"
Found termination order: "size <*mlex*> {}"
### theory "HOL-Library.Stream"
### 1.128s elapsed time, 4.111s cpu time, 0.963s GC time
Found termination order: "size <*mlex*> {}"
Found termination order: "size <*mlex*> {}"
Found termination order: "(%p. size (fst p)) <*mlex*> {}"
Found termination order: "size <*mlex*> {}"
Found termination order: "(%p. size (snd p)) <*mlex*> {}"
Found termination order: "size <*mlex*> {}"
Found termination order: "size <*mlex*> {}"
Found termination order: "size <*mlex*> {}"
### theory "HOL-Library.Tree"
### 2.042s elapsed time, 6.520s cpu time, 1.249s GC time
Loading theory "Draft.Templates" (required by "Draft.Timed_AutomataMoreTemplates" via "Draft.ExtrEqs")
Proofs for inductive predicate(s) "valid_abstraction"
  Proving monotonicity ...
datatype template_term
=
     t_empty
   | template_app of template_term * template_term
   | template_hole of int
   | template_var of int
datatype sign
= equals | greater_equals | greater_than | less_equals | less_than
datatype template
=
     template_bimplication of template * template
   | template_dunno
   | template_equation of template_term * template_term
   | template_implication of template list * template
   | template_inequation of sign * template_term * template_term
   | template_negation of template
   | template_predicate of template_term
constructor t_empty: template_term
constructor template_app: template_term * template_term -> template_term
constructor template_hole: int -> template_term
constructor template_var: int -> template_term
constructor equals: sign
constructor greater_equals: sign
constructor greater_than: sign
constructor less_equals: sign
constructor less_than: sign
constructor template_bimplication: template * template -> template
constructor template_dunno: template
constructor template_equation: template_term * template_term -> template
constructor template_implication: template list * template -> template
constructor template_inequation:
   sign * template_term * template_term -> template
constructor template_negation: template -> template
constructor template_predicate: template_term -> template
val vfs = fn: term -> (indexname * typ) list * (string * typ) list
val indexOf = fn: ''a list -> ''a -> int -> int
val has_eq = fn: term -> bool
val term2template = fn:
   (indexname * typ) list -> (string * typ) list -> term -> template_term
val lemma2predicate = fn: term -> term -> template
val makeTemplatewithContext = fn: term -> term -> template
val lemma2template = fn: term -> template
val thm2template = fn: thm -> template
val tterm2string = fn: template_term -> string
val template2string = fn: template -> string
val t = "height ?t <= size ?t": thm
val th =
   Const ("HOL.Trueprop", "bool => prop") $
     (Const ("Orderings.ord_class.less_eq", "nat => nat => bool") $
       (Const ("Tree.height_class.height", "?'a tree => nat") $
         Var (("t", 0), "?'a tree")) $
       (Const ("Nat.size_class.size", "?'a tree => nat") $
         Var (("t", 0), "?'a tree"))):
   term
### theory "Draft.Templates"
### 0.056s elapsed time, 0.112s cpu time, 0.000s GC time
Loading theory "Draft.ExtrEqs" (required by "Draft.Timed_AutomataMoreTemplates")
Proofs for inductive predicate(s) "clock_val"
  Proving monotonicity ...
Found termination order: "(%p. length (fst p)) <*mlex*> {}"
Proofs for inductive predicate(s) "step_t"
  Proving monotonicity ...
Proofs for inductive predicate(s) "step_a"
  Proving monotonicity ...
Proofs for inductive predicate(s) "step"
  Proving monotonicity ...
Proofs for inductive predicate(s) "steps"
  Proving monotonicity ...
Proofs for inductive predicate(s) "step_z"
  Proving monotonicity ...
Proofs for inductive predicate(s) "steps_z"
  Proving monotonicity ...
### theory "Draft.Timed_Automata"
### 2.638s elapsed time, 8.019s cpu time, 1.351s GC time
val eqpattern =
   Pattern
    (
       Const ("HOL.Trueprop", "bool => prop") $
         (Const ("HOL.eq", "?'a => ?'a => bool") $
           Var (("_dummy_", 1), "?'a") $ Var (("_dummy_", 2), "?'a"))
       ):
   term Find_Theorems.criterion
val badeqpattern = Pattern (Const ("Pure.eq", "?'a => ?'a => prop")):
   term Find_Theorems.criterion
val undefpattern =
   Pattern
    (
       Const ("HOL.Trueprop", "bool => prop") $
         (Const ("HOL.eq", "?'a => ?'a => bool") $
           Var (("_dummy_", 1), "?'a") $ Const ("HOL.undefined", "?'a"))
       ):
   term Find_Theorems.criterion
val thmpattern =
   Pattern
    (Const ("HOL.Trueprop", "bool => prop") $ Var (("_dummy_", 1), "bool")):
   term Find_Theorems.criterion
val badnames =
   ["*nitpick*", "*Nitpick*", "*full_exhaustive*", "*_def*", "Enum.finite*",
    "*Quickcheck*", "ATP*", "*Nunchaku*", "*Code*", "*BNF*", "*SMT*",
    "*.*.*"]:
   string list
val unwanted_names =
   [(false, Name "*nitpick*"), (false, Name "*Nitpick*"),
    (false, Name "*full_exhaustive*"), (false, Name "*_def*"),
    (false, Name "Enum.finite*"), (false, Name "*Quickcheck*"),
    (false, Name "ATP*"), (false, Name "*Nunchaku*"),
    (false, Name "*Code*"), (false, Name "*BNF*"), (false, Name "*SMT*"),
    (false, Name "*.*.*")]:
   (bool * term Find_Theorems.criterion) list
val has_vars = fn: term -> bool
val get_all_eqs = fn: string -> Proof.context -> (string * thm) list
val get_all_thms = fn: string -> Proof.context -> (string * thm) list
val get_noneq_thms = fn: string -> Proof.context -> (string * thm) list
val template_eqs = fn:
   string -> Proof.context -> (string * thm * template) list
val template_thms = fn:
   string -> Proof.context -> (string * thm * template) list
### theory "Draft.ExtrEqs"
### 0.559s elapsed time, 1.080s cpu time, 0.135s GC time
Loading theory "Draft.Timed_AutomataMoreTemplates"
val templateLemmas =
   [("Timed_Automata.step_z_sound",
     "?A \<turnstile> \<langle>?l, ?Z\<rangle> \<leadsto> \<langle>?l', ?Z'\<rangle> ==>
      ALL u':?Z'.
         EX u:?Z.
            ?A \<turnstile> \<langle>?l, u\<rangle> \<rightarrow> \<langle>?l',u'\<rangle>",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_app
                   (template_app (template_hole 3, template_var 4),
                    template_var 3),
                  template_var 2),
                template_var 1),
              template_var 0)
            )],
       template_predicate
        (
           template_app
            (template_app (template_hole 2, template_var 0), t_empty)
           ))),
    ("Timed_Automata.step_t_determinacy1",
     "[| ?A \<turnstile> \<langle>?l, ?u\<rangle> \<rightarrow>\<^bsup>?d\<^esup> \<langle>?l', ?u'\<rangle>;
         ?A \<turnstile> \<langle>?l, ?u\<rangle> \<rightarrow>\<^bsup>?d\<^esup> \<langle>?l'', ?u''\<rangle> |]
      ==> ?l' = ?l''",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_app
                   (template_app
                     (template_app (template_hole 1, template_var 7),
                      template_var 6),
                    template_var 5),
                  template_var 4),
                template_var 3),
              template_var 2)
            ),
        template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_app
                   (template_app
                     (template_app (template_hole 1, template_var 7),
                      template_var 6),
                    template_var 5),
                  template_var 4),
                template_var 1),
              template_var 0)
            )],
       template_equation (template_var 3, template_var 1))),
    ("Timed_Automata.step_t_determinacy2",
     "[| ?A \<turnstile> \<langle>?l, ?u\<rangle> \<rightarrow>\<^bsup>?d\<^esup> \<langle>?l', ?u'\<rangle>;
         ?A \<turnstile> \<langle>?l, ?u\<rangle> \<rightarrow>\<^bsup>?d\<^esup> \<langle>?l'', ?u''\<rangle> |]
      ==> ?u' = ?u''",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_app
                   (template_app
                     (template_app (template_hole 1, template_var 7),
                      template_var 6),
                    template_var 5),
                  template_var 4),
                template_var 3),
              template_var 2)
            ),
        template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_app
                   (template_app
                     (template_app (template_hole 1, template_var 7),
                      template_var 6),
                    template_var 5),
                  template_var 4),
                template_var 1),
              template_var 0)
            )],
       template_equation (template_var 2, template_var 0))),
    ("Timed_Automata.step_z_complete1",
     "?A \<turnstile> \<langle>?l, ?u\<rangle> \<rightarrow> \<langle>?l',?u'\<rangle> ==>
      EX Z. ?A \<turnstile> \<langle>?l, {?u}\<rangle> \<leadsto> \<langle>?l', Z\<rangle> &
            ?u' : Z",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_app
                   (template_app (template_hole 6, template_var 4),
                    template_var 3),
                  template_var 2),
                template_var 1),
              template_var 0)
            )],
       template_predicate (template_app (template_hole 5, t_empty)))),
    ("Timed_Automata.steps_z_sound",
     "[| ?A \<turnstile> \<langle>?l, ?Z\<rangle> \<leadsto>* \<langle>?l', ?Z'\<rangle>;
         ?u' : ?Z' |]
      ==> EX u:?Z.
             ?A \<turnstile> \<langle>?l, u\<rangle> \<rightarrow>* \<langle>?l', ?u'\<rangle>",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_app
                   (template_app (template_hole 3, template_var 5),
                    template_var 4),
                  template_var 3),
                template_var 2),
              template_var 1)
            ),
        template_predicate
         (
            template_app
             (template_app (template_hole 2, template_var 0),
              template_var 1)
            )],
       template_predicate
        (
           template_app
            (template_app (template_hole 1, template_var 3), t_empty)
           ))),
    ("Timed_Automata.step_z_complete",
     "[| ?A \<turnstile> \<langle>?l, ?u\<rangle> \<rightarrow> \<langle>?l',?u'\<rangle>;
         ?u : ?Z |]
      ==> EX Z'.
             ?A \<turnstile> \<langle>?l, ?Z\<rangle> \<leadsto> \<langle>?l', Z'\<rangle> &
             ?u' : Z'",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_app
                   (template_app (template_hole 4, template_var 5),
                    template_var 4),
                  template_var 3),
                template_var 2),
              template_var 1)
            ),
        template_predicate
         (
            template_app
             (template_app (template_hole 3, template_var 3),
              template_var 0)
            )],
       template_predicate (template_app (template_hole 2, t_empty)))),
    ("Timed_Automata.steps_z_complete",
     "[| ?A \<turnstile> \<langle>?l, ?u\<rangle> \<rightarrow>* \<langle>?l', ?u'\<rangle>;
         ?u : ?Z |]
      ==> EX Z'.
             ?A \<turnstile> \<langle>?l, ?Z\<rangle> \<leadsto>* \<langle>?l', Z'\<rangle> &
             ?u' : Z'",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_app
                   (template_app (template_hole 4, template_var 5),
                    template_var 4),
                  template_var 3),
                template_var 2),
              template_var 1)
            ),
        template_predicate
         (
            template_app
             (template_app (template_hole 3, template_var 3),
              template_var 0)
            )],
       template_predicate (template_app (template_hole 2, t_empty)))),
    ("Timed_Automata.step_t_cont1",
     "[| (0::?'a) <= ?d; (0::?'a) <= ?e;
         ?A \<turnstile> \<langle>?l, ?u\<rangle> \<rightarrow>\<^bsup>?d\<^esup> \<langle>?l', ?u'\<rangle>;
         ?A \<turnstile> \<langle>?l', ?u'\<rangle> \<rightarrow>\<^bsup>?e\<^esup> \<langle>?l'', ?u''\<rangle> |]
      ==> ?A \<turnstile> \<langle>?l, ?u\<rangle> \<rightarrow>\<^bsup>?d +
                                  ?e\<^esup> \<langle>?l'', ?u''\<rangle>",
     template_implication
      ([template_inequation (less_equals, template_hole 2, template_var 8),
        template_inequation (less_equals, template_hole 2, template_var 7),
        template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_app
                   (template_app
                     (template_app (template_hole 1, template_var 6),
                      template_var 5),
                    template_var 4),
                  template_var 8),
                template_var 3),
              template_var 2)
            ),
        template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_app
                   (template_app
                     (template_app (template_hole 1, template_var 6),
                      template_var 3),
                    template_var 2),
                  template_var 7),
                template_var 1),
              template_var 0)
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_app
                (template_app
                  (template_app
                    (template_app (template_hole 1, template_var 6),
                     template_var 5),
                   template_var 4),
                 template_app
                  (template_app (template_hole 0, template_var 8),
                   template_var 7)),
               template_var 1),
             template_var 0)
           )))]:
   (string * thm * template) list
### theory "Draft.Timed_AutomataMoreTemplates"
### 0.313s elapsed time, 0.395s cpu time, 0.000s GC time
val it = (): unit
