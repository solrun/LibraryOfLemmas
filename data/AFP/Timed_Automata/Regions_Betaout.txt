Loading theory "Draft.Floyd_Warshall" (required by "Draft.Regions_BetaMoreTemplates" via "Draft.Regions_Beta" via "Draft.DBM_Normalization" via "Draft.DBM_Basics" via "Draft.DBM")
Loading theory "Draft.Timed_Automata" (required by "Draft.Regions_BetaMoreTemplates" via "Draft.Regions_Beta" via "Draft.DBM_Normalization" via "Draft.DBM_Basics" via "Draft.DBM")
Loading theory "HOL-Library.Function_Algebras" (required by "Draft.Regions_BetaMoreTemplates" via "Draft.ExtrEqs" via "HOL-Library.BigO")
Loading theory "HOL-Library.Nat_Bijection" (required by "Draft.Regions_BetaMoreTemplates" via "Draft.ExtrEqs" via "HOL-Library.Stream")
instantiation
  fun :: (type, plus) plus
  plus_fun == plus :: ('a => 'b) => ('a => 'b) => 'a => 'b
instantiation
  fun :: (type, zero) zero
  zero_fun == zero_class.zero :: 'a => 'b
instantiation
  fun :: (type, times) times
  times_fun == times :: ('a => 'b) => ('a => 'b) => 'a => 'b
instantiation
  fun :: (type, one) one
  one_fun == one_class.one :: 'a => 'b
Found termination order: "(%p. size (snd p)) <*mlex*> {}"
### theory "HOL-Library.Function_Algebras"
### 0.125s elapsed time, 0.520s cpu time, 0.048s GC time
Loading theory "HOL-Library.Set_Algebras" (required by "Draft.Regions_BetaMoreTemplates" via "Draft.ExtrEqs" via "HOL-Library.BigO")
instantiation
  set :: (plus) plus
  plus_set == plus :: 'a set => 'a set => 'a set
Found termination order: "(%p. length (fst p)) <*mlex*> {}"
instantiation
  set :: (times) times
  times_set == times :: 'a set => 'a set => 'a set
instantiation
  set :: (zero) zero
  zero_set == zero_class.zero :: 'a set
instantiation
  set :: (one) one
  one_set == one_class.one :: 'a set
Found termination order: "size_list size <*mlex*> {}"
Found termination order: "(%p. length (fst p)) <*mlex*> {}"
### theory "HOL-Library.Nat_Bijection"
### 0.322s elapsed time, 1.290s cpu time, 0.109s GC time
Loading theory "HOL-Library.Stream" (required by "Draft.Regions_BetaMoreTemplates" via "Draft.ExtrEqs")
### theory "HOL-Library.Set_Algebras"
### 0.201s elapsed time, 0.790s cpu time, 0.061s GC time
Loading theory "HOL-Library.Tree" (required by "Draft.Regions_BetaMoreTemplates" via "Draft.ExtrEqs" via "Draft.Templates")
Found termination order: "(%p. length (fst p)) <*mlex*> {}"
class time = linordered_ab_group_add +
  assumes "dense": "!!x y. x < y ==> EX z>x. z < y"
  assumes "non_trivial": "EX x. x ~= (0::'a)"
consts
  shift :: "'a list => 'a stream => 'a stream"
class linordered_ab_monoid_add = linordered_ab_semigroup_add +
  fixes neutral :: "'a"
  assumes "neutl": "!!x. \<one> + x = x"
  assumes "neutr": "!!x. x + \<one> = x"
Proofs for coinductive predicate(s) "streamsp"
  Proving monotonicity ...
consts
  snth :: "'a stream => nat => 'a"
consts
  stake :: "nat => 'a stream => 'a list"
consts
  left :: "'a tree => 'a tree"
consts
  sdrop :: "nat => 'a stream => 'a stream"
consts
  right :: "'a tree => 'a tree"
Found termination order: "size <*mlex*> {}"
consts
  sfilter :: "('a => bool) => 'a stream => 'a stream"
consts
  cycle :: "'a list => 'a stream"
Found termination order: "size <*mlex*> {}"
consts
  siterate :: "('a => 'a) => 'a => 'a stream"
consts
  flat :: "'a list stream => 'a stream"
Found termination order: "size <*mlex*> {}"
class height = type +
  fixes height :: "'a => nat"
instantiation
  tree :: (type) height
  height_tree == height :: 'a tree => nat
consts
  sinterleave :: "'a stream => 'a stream => 'a stream"
consts
  szip :: "'a stream => 'b stream => ('a * 'b) stream"
Found termination order: "size <*mlex*> {}"
consts
  smap2 :: "('a => 'b => 'c) => 'a stream => 'b stream => 'c stream"
### theory "HOL-Library.Stream"
### 1.075s elapsed time, 4.071s cpu time, 0.850s GC time
Loading theory "Draft.Misc" (required by "Draft.Regions_BetaMoreTemplates" via "Draft.Regions_Beta")
Found termination order: "size <*mlex*> {}"
Found termination order:
  "(%p. size (fst (snd (snd p)))) <*mlex*>
   (%p. size (fst (snd (snd (snd p))))) <*mlex*>
   (%p. size (snd (snd (snd (snd p))))) <*mlex*> {}"
Found termination order: "size <*mlex*> {}"
locale enumerateable
  fixes T :: "'a set"
    and less :: "'a => 'a => bool"  (infix \<open>\<prec>\<close> 50)
  assumes "enumerateable T (\<prec>)"
Found termination order: "size <*mlex*> {}"
Found termination order: "size <*mlex*> {}"
Found termination order: "(%p. size (snd p)) <*mlex*> {}"
Proofs for inductive predicate(s) "sorted"
  Proving monotonicity ...
Found termination order: "size <*mlex*> {}"
Found termination order: "size <*mlex*> {}"
### theory "Draft.Misc"
### 0.448s elapsed time, 1.756s cpu time, 0.207s GC time
Loading theory "HOL-Library.BigO" (required by "Draft.Regions_BetaMoreTemplates" via "Draft.ExtrEqs")
Found termination order: "(%p. size (fst p)) <*mlex*> {}"
Found termination order: "size <*mlex*> {}"
Found termination order: "(%p. size (snd p)) <*mlex*> {}"
Found termination order:
  "(%p. size_list size (snd (snd (snd p)))) <*mlex*> {}"
Found termination order: "size <*mlex*> {}"
Found termination order: "size <*mlex*> {}"
Found termination order: "size <*mlex*> {}"
Proofs for inductive predicate(s) "valid_abstraction"
  Proving monotonicity ...
Proofs for inductive predicate(s) "clock_val"
  Proving monotonicity ...
### theory "HOL-Library.Tree"
### 2.198s elapsed time, 8.474s cpu time, 1.313s GC time
Loading theory "Draft.Templates" (required by "Draft.Regions_BetaMoreTemplates" via "Draft.ExtrEqs")
Found termination order: "(%p. length (fst p)) <*mlex*> {}"
Proofs for inductive predicate(s) "step_t"
  Proving monotonicity ...
datatype template_term
=
     t_empty
   | template_app of template_term * template_term
   | template_hole of int
   | template_var of int
datatype sign
= equals | greater_equals | greater_than | less_equals | less_than
datatype template
=
     template_bimplication of template * template
   | template_dunno
   | template_equation of template_term * template_term
   | template_implication of template list * template
   | template_inequation of sign * template_term * template_term
   | template_negation of template
   | template_predicate of template_term
constructor t_empty: template_term
constructor template_app: template_term * template_term -> template_term
constructor template_hole: int -> template_term
constructor template_var: int -> template_term
constructor equals: sign
constructor greater_equals: sign
constructor greater_than: sign
constructor less_equals: sign
constructor less_than: sign
constructor template_bimplication: template * template -> template
constructor template_dunno: template
constructor template_equation: template_term * template_term -> template
constructor template_implication: template list * template -> template
constructor template_inequation:
   sign * template_term * template_term -> template
constructor template_negation: template -> template
constructor template_predicate: template_term -> template
val vfs = fn: term -> (indexname * typ) list * (string * typ) list
val indexOf = fn: ''a list -> ''a -> int -> int
val has_eq = fn: term -> bool
val term2template = fn:
   (indexname * typ) list -> (string * typ) list -> term -> template_term
val lemma2predicate = fn: term -> term -> template
val makeTemplatewithContext = fn: term -> term -> template
val lemma2template = fn: term -> template
val thm2template = fn: thm -> template
val tterm2string = fn: template_term -> string
val template2string = fn: template -> string
val t = "height ?t <= size ?t": thm
val th =
   Const ("HOL.Trueprop", "bool => prop") $
     (Const ("Orderings.ord_class.less_eq", "nat => nat => bool") $
       (Const ("Tree.height_class.height", "?'a tree => nat") $
         Var (("t", 0), "?'a tree")) $
       (Const ("Nat.size_class.size", "?'a tree => nat") $
         Var (("t", 0), "?'a tree"))):
   term
### theory "Draft.Templates"
### 0.070s elapsed time, 0.276s cpu time, 0.000s GC time
Proofs for inductive predicate(s) "step_a"
"as @ x # bs @ x # cs @ x # ds"
  :: "'a list"
  Proving monotonicity ...
Proofs for inductive predicate(s) "step"
  Proving monotonicity ...
Proofs for inductive predicate(s) "steps"
### theory "HOL-Library.BigO"
### 1.099s elapsed time, 4.082s cpu time, 1.097s GC time
Loading theory "Draft.ExtrEqs" (required by "Draft.Regions_BetaMoreTemplates")
  Proving monotonicity ...
Proofs for inductive predicate(s) "step_z"
  Proving monotonicity ...
Proofs for inductive predicate(s) "steps_z"
  Proving monotonicity ...
### theory "Draft.Timed_Automata"
### 3.154s elapsed time, 11.864s cpu time, 2.295s GC time
### theory "Draft.Floyd_Warshall"
### 3.187s elapsed time, 11.887s cpu time, 2.367s GC time
Loading theory "Draft.DBM" (required by "Draft.Regions_BetaMoreTemplates" via "Draft.Regions_Beta" via "Draft.DBM_Normalization" via "Draft.DBM_Basics")
Loading theory "Draft.Paths_Cycles" (required by "Draft.Regions_BetaMoreTemplates" via "Draft.Regions_Beta" via "Draft.DBM_Normalization" via "Draft.DBM_Basics")
Found termination order: "(%p. size_list size (snd (snd p))) <*mlex*> {}"
val eqpattern =
   Pattern
    (
       Const ("HOL.Trueprop", "bool => prop") $
         (Const ("HOL.eq", "?'a => ?'a => bool") $
           Var (("_dummy_", 1), "?'a") $ Var (("_dummy_", 2), "?'a"))
       ):
   term Find_Theorems.criterion
val badeqpattern = Pattern (Const ("Pure.eq", "?'a => ?'a => prop")):
   term Find_Theorems.criterion
val undefpattern =
   Pattern
    (
       Const ("HOL.Trueprop", "bool => prop") $
         (Const ("HOL.eq", "?'a => ?'a => bool") $
           Var (("_dummy_", 1), "?'a") $ Const ("HOL.undefined", "?'a"))
       ):
   term Find_Theorems.criterion
val thmpattern =
   Pattern
    (Const ("HOL.Trueprop", "bool => prop") $ Var (("_dummy_", 1), "bool")):
   term Find_Theorems.criterion
val badnames =
   ["*nitpick*", "*Nitpick*", "*full_exhaustive*", "*_def*", "Enum.finite*",
    "*Quickcheck*", "ATP*", "*Nunchaku*", "*Code*", "*BNF*", "*SMT*",
    "*.*.*"]:
   string list
val unwanted_names =
   [(false, Name "*nitpick*"), (false, Name "*Nitpick*"),
    (false, Name "*full_exhaustive*"), (false, Name "*_def*"),
    (false, Name "Enum.finite*"), (false, Name "*Quickcheck*"),
    (false, Name "ATP*"), (false, Name "*Nunchaku*"),
    (false, Name "*Code*"), (false, Name "*BNF*"), (false, Name "*SMT*"),
    (false, Name "*.*.*")]:
   (bool * term Find_Theorems.criterion) list
val has_vars = fn: term -> bool
val get_all_eqs = fn: string -> Proof.context -> (string * thm) list
val get_all_thms = fn: string -> Proof.context -> (string * thm) list
val get_noneq_thms = fn: string -> Proof.context -> (string * thm) list
val template_eqs = fn:
   string -> Proof.context -> (string * thm * template) list
val template_thms = fn:
   string -> Proof.context -> (string * thm * template) list
### theory "Draft.ExtrEqs"
### 0.635s elapsed time, 1.974s cpu time, 0.169s GC time
Found termination order: "(%p. length (snd p)) <*mlex*> {}"
Proofs for inductive predicate(s) "dbm_entry_val"
  Proving monotonicity ...
[| (?a, ?b) : set (arcs ?i ?j ?xs); ?b ~= ?j |]
==> EX c. ?xs = [?b] & ?a = ?i |
          (EX ys. ?xs = ?b # c # ys & ?a = ?i) |
          (EX ys. ?xs = ys @ [?a, ?b] & c = ?j) |
          (EX ys zs. ?xs = ys @ ?a # ?b # c # zs)
Found termination order: "{}"
Proofs for inductive predicate(s) "dbm_lt"
  Proving monotonicity ...
### theory "Draft.Paths_Cycles"
### 1.129s elapsed time, 3.224s cpu time, 1.293s GC time
Found termination order: "{}"
\<infinity> \<otimes> ?uu = \<infinity>
Le ?v \<otimes> \<infinity> = \<infinity>
Lt ?v \<otimes> \<infinity> = \<infinity>
Le ?a \<otimes> Le ?b = Le (?a + ?b)
Le ?a \<otimes> Lt ?b = Lt (?a + ?b)
Lt ?a \<otimes> Le ?b = Lt (?a + ?b)
Lt ?a \<otimes> Lt ?b = Lt (?a + ?b)
instantiation
  DBMEntry :: (time) linorder
  less_eq_DBMEntry == less_eq :: 'a DBMEntry => 'a DBMEntry => bool
  less_DBMEntry == less :: 'a DBMEntry => 'a DBMEntry => bool
instantiation
  DBMEntry :: (time) linordered_ab_monoid_add
  neutral_DBMEntry == neutral :: 'a DBMEntry
  plus_DBMEntry == plus :: 'a DBMEntry => 'a DBMEntry => 'a DBMEntry
### Partially applied constant "DBM.dbm_le" on left hand side of equation, in theorem:
### linorder.Min dbm_le (set (?x # ?xs)) == fold linordered_monoid.min ?xs ?x
### Partially applied constant "DBM.dbm_le" on left hand side of equation, in theorem:
### linorder.Max dbm_le (set (?x # ?xs)) == fold linordered_monoid.max ?xs ?x
### Partially applied constant "DBM.dbm_le" on left hand side of equation, in theorem:
### linordered_monoid.sorted [] == True
### Partially applied constant "DBM.dbm_le" on left hand side of equation, in theorem:
### linordered_monoid.sorted [?x] == True
### Partially applied constant "DBM.dbm_le" on left hand side of equation, in theorem:
### linordered_monoid.sorted (?x # ?y # ?zs) ==
### ?x \<preceq> ?y & linordered_monoid.sorted (?y # ?zs)
### Partially applied constant "DBM.dbm_le" on left hand side of equation, in theorem:
### linordered_monoid.sorted_list_of_set (set ?xs) ==
### linordered_monoid.sort (remdups ?xs)
### theory "Draft.DBM"
### 1.882s elapsed time, 4.117s cpu time, 1.405s GC time
Loading theory "Draft.DBM_Basics" (required by "Draft.Regions_BetaMoreTemplates" via "Draft.Regions_Beta" via "Draft.DBM_Normalization")
Found termination order: "{}"
Found termination order:
  "(%p. size (fst (snd (snd p)))) <*mlex*>
   (%p. size (fst (snd (snd (snd p))))) <*mlex*> {}"
### theory "Draft.DBM_Basics"
### 0.615s elapsed time, 0.819s cpu time, 0.192s GC time
Loading theory "Draft.DBM_Normalization" (required by "Draft.Regions_BetaMoreTemplates" via "Draft.Regions_Beta")
Loading theory "Draft.DBM_Operations" (required by "Draft.Regions_BetaMoreTemplates" via "Draft.Regions_Beta")
Found termination order: "{}"
Found termination order: "{}"
### theory "Draft.DBM_Normalization"
### 0.101s elapsed time, 0.205s cpu time, 0.000s GC time
Found termination order: "{}"
Found termination order: "{}"
Found termination order: "(%p. size (fst p)) <*mlex*> {}"
Found termination order: "(%p. length (fst (snd (snd p)))) <*mlex*> {}"
Found termination order: "(%p. length (fst (snd p))) <*mlex*> {}"
### theory "Draft.DBM_Operations"
### 0.944s elapsed time, 1.341s cpu time, 0.359s GC time
Loading theory "Draft.Regions_Beta" (required by "Draft.Regions_BetaMoreTemplates")
instantiation
  real :: time
Proofs for inductive predicate(s) "valid_intv"
  Proving monotonicity ...
Proofs for inductive predicate(s) "valid_intv'"
  Proving monotonicity ...
Proofs for inductive predicate(s) "intv_elem"
  Proving monotonicity ...
Proofs for inductive predicate(s) "intv'_elem"
  Proving monotonicity ...
Proofs for inductive predicate(s) "isConst"
  Proving monotonicity ...
Proofs for inductive predicate(s) "isIntv"
  Proving monotonicity ...
Proofs for inductive predicate(s) "isGreater"
  Proving monotonicity ...
Proofs for inductive predicate(s) "valid_region"
  Proving monotonicity ...
Proofs for inductive predicate(s) "regionp"
  Proving monotonicity ...
locale Beta_Regions
  fixes X :: "'c set"
    and k :: "'c => nat"
    and \<R> :: "('c => real) set set"
    and V :: "('c => real) set"
  assumes "Beta_Regions X"
  defines "\<R> == {region X I J r |I J r. valid_region X k I J r}"
    and "V == {v. ALL x:X. 0 <= v x}"
Found termination order: "{}"
Found termination order: "{}"
locale Beta_Regions'
  fixes X :: "'a set"
    and k :: "'a => nat"
    and \<R> :: "('a => real) set set"
    and V :: "('a => real) set"
    and v :: "'a => nat"
    and n :: "nat"
    and not_in_X :: "'a"
  assumes "Beta_Regions' X v n not_in_X"
  defines "\<R> == {region X I J r |I J r. valid_region X k I J r}"
    and "V == {v. ALL x:X. 0 <= v x}"
theorem split_min:
  fixes P :: "'b => bool"
    and i :: "'b"
    and j :: "'b"
  shows "P (min i j) = ((i <= j --> P i) & (~ i <= j --> P j))"
locale Beta_Regions'
  fixes X :: "'a set"
    and k :: "'a => nat"
    and \<R> :: "('a => real) set set"
    and V :: "('a => real) set"
    and v :: "'a => nat"
    and n :: "nat"
    and not_in_X :: "'a"
  assumes "Beta_Regions' X v n not_in_X"
  defines "\<R> == {region X I J r |I J r. valid_region X k I J r}"
    and "V == {v. ALL x:X. 0 <= v x}"
locale Beta_Regions'
  fixes X :: "'a set"
    and k :: "'a => nat"
    and \<R> :: "('a => real) set set"
    and V :: "('a => real) set"
    and v :: "'a => nat"
    and n :: "nat"
    and not_in_X :: "'a"
  assumes "Beta_Regions' X v n not_in_X"
  defines "\<R> == {region X I J r |I J r. valid_region X k I J r}"
    and "V == {v. ALL x:X. 0 <= v x}"
### theory "Draft.Regions_Beta"
### 1.879s elapsed time, 2.077s cpu time, 0.264s GC time
Loading theory "Draft.Regions_BetaMoreTemplates"
val templateLemmas =
   [("Regions_Beta.regionp_region_eq",
     "regionp (%x. x : ?X) ?I ?J (%x xa. (x, xa) : ?r) =
      (%x. x : region ?X ?I ?J ?r)",
     template_equation
      (template_app
        (template_app
          (template_app
            (template_app (template_hole 5, t_empty), template_var 2),
           template_var 1),
         t_empty),
       t_empty)),
    ("Regions_Beta.valid_intv_distinct",
     "[| valid_intv ?c ?I; valid_intv ?c ?I'; intv_elem ?x ?u ?I;
         intv_elem ?x ?u ?I' |]
      ==> ?I = ?I'",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 2, template_var 4),
              template_var 3)
            ),
        template_predicate
         (
            template_app
             (template_app (template_hole 2, template_var 4),
              template_var 2)
            ),
        template_predicate
         (
            template_app
             (template_app
               (template_app (template_hole 1, template_var 1),
                template_var 0),
              template_var 3)
            ),
        template_predicate
         (
            template_app
             (template_app
               (template_app (template_hole 1, template_var 1),
                template_var 0),
              template_var 2)
            )],
       template_equation (template_var 3, template_var 2))),
    ("Regions_Beta.valid_intv'_distinct",
     "[| - ?c <= ?d; valid_intv' ?c ?d ?I; valid_intv' ?c ?d ?I';
         intv'_elem ?x ?y ?u ?I; intv'_elem ?x ?y ?u ?I' |]
      ==> ?I = ?I'",
     template_implication
      ([template_inequation
         (less_equals, template_app (template_hole 3, template_var 6),
          template_var 5),
        template_predicate
         (
            template_app
             (template_app
               (template_app (template_hole 2, template_var 6),
                template_var 5),
              template_var 4)
            ),
        template_predicate
         (
            template_app
             (template_app
               (template_app (template_hole 2, template_var 6),
                template_var 5),
              template_var 3)
            ),
        template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_app (template_hole 1, template_var 2),
                  template_var 1),
                template_var 0),
              template_var 4)
            ),
        template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_app (template_hole 1, template_var 2),
                  template_var 1),
                template_var 0),
              template_var 3)
            )],
       template_equation (template_var 4, template_var 3))),
    ("Regions_Beta.valid_regions_distinct",
     "[| valid_region ?X ?k ?I ?J ?r; valid_region ?X ?k ?I' ?J' ?r';
         ?v : region ?X ?I ?J ?r; ?v : region ?X ?I' ?J' ?r' |]
      ==> region ?X ?I ?J ?r = region ?X ?I' ?J' ?r'",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_app
                   (template_app (template_hole 3, template_var 8),
                    template_var 7),
                  template_var 6),
                template_var 5),
              template_var 4)
            ),
        template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_app
                   (template_app (template_hole 3, template_var 8),
                    template_var 7),
                  template_var 3),
                template_var 2),
              template_var 1)
            ),
        template_predicate
         (
            template_app
             (template_app (template_hole 2, template_var 0),
              template_app
               (template_app
                 (template_app
                   (template_app (template_hole 1, template_var 8),
                    template_var 6),
                  template_var 5),
                template_var 4))
            ),
        template_predicate
         (
            template_app
             (template_app (template_hole 2, template_var 0),
              template_app
               (template_app
                 (template_app
                   (template_app (template_hole 1, template_var 8),
                    template_var 3),
                  template_var 2),
                template_var 1))
            )],
       template_equation
        (template_app
          (template_app
            (template_app
              (template_app (template_hole 1, template_var 8),
               template_var 6),
             template_var 5),
           template_var 4),
         template_app
          (template_app
            (template_app
              (template_app (template_hole 1, template_var 8),
               template_var 3),
             template_var 2),
           template_var 1))))]:
   (string * thm * template) list
### theory "Draft.Regions_BetaMoreTemplates"
### 0.410s elapsed time, 0.631s cpu time, 0.056s GC time
val it = (): unit
