Loading theory "Draft.Floyd_Warshall" (required by "Draft.DBMMoreTemplates" via "Draft.DBM")
Loading theory "Draft.Timed_Automata" (required by "Draft.DBMMoreTemplates" via "Draft.DBM")
Loading theory "HOL-Library.Function_Algebras" (required by "Draft.DBMMoreTemplates" via "Draft.ExtrEqs" via "HOL-Library.BigO")
Loading theory "HOL-Library.Nat_Bijection" (required by "Draft.DBMMoreTemplates" via "Draft.ExtrEqs" via "HOL-Library.Stream")
instantiation
  fun :: (type, plus) plus
  plus_fun == plus :: ('a => 'b) => ('a => 'b) => 'a => 'b
instantiation
  fun :: (type, zero) zero
  zero_fun == zero_class.zero :: 'a => 'b
instantiation
  fun :: (type, times) times
  times_fun == times :: ('a => 'b) => ('a => 'b) => 'a => 'b
instantiation
  fun :: (type, one) one
  one_fun == one_class.one :: 'a => 'b
Found termination order: "(%p. size (snd p)) <*mlex*> {}"
### theory "HOL-Library.Function_Algebras"
### 0.122s elapsed time, 0.506s cpu time, 0.050s GC time
Loading theory "HOL-Library.Set_Algebras" (required by "Draft.DBMMoreTemplates" via "Draft.ExtrEqs" via "HOL-Library.BigO")
instantiation
  set :: (plus) plus
  plus_set == plus :: 'a set => 'a set => 'a set
instantiation
  set :: (times) times
  times_set == times :: 'a set => 'a set => 'a set
instantiation
  set :: (zero) zero
  zero_set == zero_class.zero :: 'a set
instantiation
  set :: (one) one
  one_set == one_class.one :: 'a set
Found termination order: "(%p. length (fst p)) <*mlex*> {}"
Found termination order: "size_list size <*mlex*> {}"
### theory "HOL-Library.Nat_Bijection"
### 0.324s elapsed time, 1.296s cpu time, 0.123s GC time
Loading theory "HOL-Library.Stream" (required by "Draft.DBMMoreTemplates" via "Draft.ExtrEqs")
Found termination order: "(%p. length (fst p)) <*mlex*> {}"
### theory "HOL-Library.Set_Algebras"
### 0.206s elapsed time, 0.804s cpu time, 0.073s GC time
Loading theory "HOL-Library.Tree" (required by "Draft.DBMMoreTemplates" via "Draft.ExtrEqs" via "Draft.Templates")
Found termination order: "(%p. length (fst p)) <*mlex*> {}"
class time = linordered_ab_group_add +
  assumes "dense": "!!x y. x < y ==> EX z>x. z < y"
  assumes "non_trivial": "EX x. x ~= (0::'a)"
consts
  shift :: "'a list => 'a stream => 'a stream"
Proofs for coinductive predicate(s) "streamsp"
  Proving monotonicity ...
class linordered_ab_monoid_add = linordered_ab_semigroup_add +
  fixes neutral :: "'a"
  assumes "neutl": "!!x. \<one> + x = x"
  assumes "neutr": "!!x. x + \<one> = x"
consts
  snth :: "'a stream => nat => 'a"
consts
  stake :: "nat => 'a stream => 'a list"
consts
  sdrop :: "nat => 'a stream => 'a stream"
consts
  left :: "'a tree => 'a tree"
consts
  right :: "'a tree => 'a tree"
consts
  sfilter :: "('a => bool) => 'a stream => 'a stream"
Found termination order: "size <*mlex*> {}"
consts
  cycle :: "'a list => 'a stream"
consts
  siterate :: "('a => 'a) => 'a => 'a stream"
Found termination order: "size <*mlex*> {}"
consts
  flat :: "'a list stream => 'a stream"
Found termination order: "size <*mlex*> {}"
consts
  sinterleave :: "'a stream => 'a stream => 'a stream"
class height = type +
  fixes height :: "'a => nat"
instantiation
  tree :: (type) height
  height_tree == height :: 'a tree => nat
consts
  szip :: "'a stream => 'b stream => ('a * 'b) stream"
consts
  smap2 :: "('a => 'b => 'c) => 'a stream => 'b stream => 'c stream"
Found termination order: "size <*mlex*> {}"
### theory "HOL-Library.Stream"
### 1.074s elapsed time, 4.060s cpu time, 0.847s GC time
Loading theory "HOL-Library.BigO" (required by "Draft.DBMMoreTemplates" via "Draft.ExtrEqs")
Found termination order: "size <*mlex*> {}"
Found termination order: "size <*mlex*> {}"
Found termination order:
  "(%p. size (fst (snd (snd p)))) <*mlex*>
   (%p. size (fst (snd (snd (snd p))))) <*mlex*>
   (%p. size (snd (snd (snd (snd p))))) <*mlex*> {}"
Found termination order: "size <*mlex*> {}"
Found termination order: "size <*mlex*> {}"
Found termination order: "size <*mlex*> {}"
Found termination order: "size <*mlex*> {}"
Found termination order: "(%p. size (fst p)) <*mlex*> {}"
Found termination order: "size <*mlex*> {}"
Found termination order: "(%p. size (snd p)) <*mlex*> {}"
Found termination order:
  "(%p. size_list size (snd (snd (snd p)))) <*mlex*> {}"
Found termination order: "size <*mlex*> {}"
### theory "HOL-Library.BigO"
### 0.855s elapsed time, 3.365s cpu time, 0.354s GC time
"as @ x # bs @ x # cs @ x # ds"
  :: "'a list"
Found termination order: "size <*mlex*> {}"
Found termination order: "size <*mlex*> {}"
Proofs for inductive predicate(s) "valid_abstraction"
  Proving monotonicity ...
Proofs for inductive predicate(s) "clock_val"
  Proving monotonicity ...
### theory "HOL-Library.Tree"
### 2.193s elapsed time, 8.251s cpu time, 1.315s GC time
Loading theory "Draft.Templates" (required by "Draft.DBMMoreTemplates" via "Draft.ExtrEqs")
Found termination order: "(%p. length (fst p)) <*mlex*> {}"
Proofs for inductive predicate(s) "step_t"
  Proving monotonicity ...
datatype template_term
=
     t_empty
   | template_app of template_term * template_term
   | template_hole of int
   | template_var of int
datatype sign
= equals | greater_equals | greater_than | less_equals | less_than
datatype template
=
     template_bimplication of template * template
   | template_dunno
   | template_equation of template_term * template_term
   | template_implication of template list * template
   | template_inequation of sign * template_term * template_term
   | template_negation of template
   | template_predicate of template_term
constructor t_empty: template_term
constructor template_app: template_term * template_term -> template_term
constructor template_hole: int -> template_term
constructor template_var: int -> template_term
constructor equals: sign
constructor greater_equals: sign
constructor greater_than: sign
constructor less_equals: sign
constructor less_than: sign
constructor template_bimplication: template * template -> template
constructor template_dunno: template
constructor template_equation: template_term * template_term -> template
constructor template_implication: template list * template -> template
constructor template_inequation:
   sign * template_term * template_term -> template
constructor template_negation: template -> template
constructor template_predicate: template_term -> template
val vfs = fn: term -> (indexname * typ) list * (string * typ) list
val indexOf = fn: ''a list -> ''a -> int -> int
val has_eq = fn: term -> bool
val term2template = fn:
   (indexname * typ) list -> (string * typ) list -> term -> template_term
val lemma2predicate = fn: term -> term -> template
val makeTemplatewithContext = fn: term -> term -> template
val lemma2template = fn: term -> template
val thm2template = fn: thm -> template
val tterm2string = fn: template_term -> string
val template2string = fn: template -> string
val t = "height ?t <= size ?t": thm
val th =
   Const ("HOL.Trueprop", "bool => prop") $
     (Const ("Orderings.ord_class.less_eq", "nat => nat => bool") $
       (Const ("Tree.height_class.height", "?'a tree => nat") $
         Var (("t", 0), "?'a tree")) $
       (Const ("Nat.size_class.size", "?'a tree => nat") $
         Var (("t", 0), "?'a tree"))):
   term
### theory "Draft.Templates"
### 0.063s elapsed time, 0.185s cpu time, 0.000s GC time
Loading theory "Draft.ExtrEqs" (required by "Draft.DBMMoreTemplates")
Proofs for inductive predicate(s) "step_a"
  Proving monotonicity ...
Proofs for inductive predicate(s) "step"
  Proving monotonicity ...
Proofs for inductive predicate(s) "steps"
  Proving monotonicity ...
Proofs for inductive predicate(s) "step_z"
  Proving monotonicity ...
Proofs for inductive predicate(s) "steps_z"
  Proving monotonicity ...
### theory "Draft.Timed_Automata"
### 2.877s elapsed time, 10.649s cpu time, 1.537s GC time
### theory "Draft.Floyd_Warshall"
### 2.909s elapsed time, 10.632s cpu time, 1.537s GC time
Loading theory "Draft.DBM" (required by "Draft.DBMMoreTemplates")
val eqpattern =
   Pattern
    (
       Const ("HOL.Trueprop", "bool => prop") $
         (Const ("HOL.eq", "?'a => ?'a => bool") $
           Var (("_dummy_", 1), "?'a") $ Var (("_dummy_", 2), "?'a"))
       ):
   term Find_Theorems.criterion
val badeqpattern = Pattern (Const ("Pure.eq", "?'a => ?'a => prop")):
   term Find_Theorems.criterion
val undefpattern =
   Pattern
    (
       Const ("HOL.Trueprop", "bool => prop") $
         (Const ("HOL.eq", "?'a => ?'a => bool") $
           Var (("_dummy_", 1), "?'a") $ Const ("HOL.undefined", "?'a"))
       ):
   term Find_Theorems.criterion
val thmpattern =
   Pattern
    (Const ("HOL.Trueprop", "bool => prop") $ Var (("_dummy_", 1), "bool")):
   term Find_Theorems.criterion
val badnames =
   ["*nitpick*", "*Nitpick*", "*full_exhaustive*", "*_def*", "Enum.finite*",
    "*Quickcheck*", "ATP*", "*Nunchaku*", "*Code*", "*BNF*", "*SMT*",
    "*.*.*"]:
   string list
val unwanted_names =
   [(false, Name "*nitpick*"), (false, Name "*Nitpick*"),
    (false, Name "*full_exhaustive*"), (false, Name "*_def*"),
    (false, Name "Enum.finite*"), (false, Name "*Quickcheck*"),
    (false, Name "ATP*"), (false, Name "*Nunchaku*"),
    (false, Name "*Code*"), (false, Name "*BNF*"), (false, Name "*SMT*"),
    (false, Name "*.*.*")]:
   (bool * term Find_Theorems.criterion) list
val has_vars = fn: term -> bool
val get_all_eqs = fn: string -> Proof.context -> (string * thm) list
val get_all_thms = fn: string -> Proof.context -> (string * thm) list
val get_noneq_thms = fn: string -> Proof.context -> (string * thm) list
val template_eqs = fn:
   string -> Proof.context -> (string * thm * template) list
val template_thms = fn:
   string -> Proof.context -> (string * thm * template) list
### theory "Draft.ExtrEqs"
### 0.614s elapsed time, 1.614s cpu time, 0.173s GC time
Proofs for inductive predicate(s) "dbm_entry_val"
  Proving monotonicity ...
Found termination order: "{}"
Proofs for inductive predicate(s) "dbm_lt"
  Proving monotonicity ...
Found termination order: "{}"
\<infinity> \<otimes> ?uu = \<infinity>
Le ?v \<otimes> \<infinity> = \<infinity>
Lt ?v \<otimes> \<infinity> = \<infinity>
Le ?a \<otimes> Le ?b = Le (?a + ?b)
Le ?a \<otimes> Lt ?b = Lt (?a + ?b)
Lt ?a \<otimes> Le ?b = Lt (?a + ?b)
Lt ?a \<otimes> Lt ?b = Lt (?a + ?b)
instantiation
  DBMEntry :: (time) linorder
  less_eq_DBMEntry == less_eq :: 'a DBMEntry => 'a DBMEntry => bool
  less_DBMEntry == less :: 'a DBMEntry => 'a DBMEntry => bool
instantiation
  DBMEntry :: (time) linordered_ab_monoid_add
  neutral_DBMEntry == neutral :: 'a DBMEntry
  plus_DBMEntry == plus :: 'a DBMEntry => 'a DBMEntry => 'a DBMEntry
### Partially applied constant "DBM.dbm_le" on left hand side of equation, in theorem:
### linorder.Min dbm_le (set (?x # ?xs)) == fold linordered_monoid.min ?xs ?x
### Partially applied constant "DBM.dbm_le" on left hand side of equation, in theorem:
### linorder.Max dbm_le (set (?x # ?xs)) == fold linordered_monoid.max ?xs ?x
### Partially applied constant "DBM.dbm_le" on left hand side of equation, in theorem:
### linordered_monoid.sorted [] == True
### Partially applied constant "DBM.dbm_le" on left hand side of equation, in theorem:
### linordered_monoid.sorted [?x] == True
### Partially applied constant "DBM.dbm_le" on left hand side of equation, in theorem:
### linordered_monoid.sorted (?x # ?y # ?zs) ==
### ?x \<preceq> ?y & linordered_monoid.sorted (?y # ?zs)
### Partially applied constant "DBM.dbm_le" on left hand side of equation, in theorem:
### linordered_monoid.sorted_list_of_set (set ?xs) ==
### linordered_monoid.sort (remdups ?xs)
### theory "Draft.DBM"
### 1.634s elapsed time, 2.717s cpu time, 1.089s GC time
Loading theory "Draft.DBMMoreTemplates"
val templateLemmas =
   [("DBM.any_le_inf", "?x <= \<infinity>",
     template_inequation (less_equals, template_var 0, template_hole 0)),
    ("DBM.inf_not_lt", "(\<infinity> \<prec> ?x) = False",
     template_equation
      (template_app
        (template_app (template_hole 2, template_hole 1), template_var 0),
       template_hole 0)),
    ("DBM.inf_not_le_Le", "(\<infinity> <= Le ?x) = False",
     template_equation
      (template_app
        (template_app (template_hole 3, template_hole 2),
         template_app (template_hole 1, template_var 0)),
       template_hole 0)),
    ("DBM.inf_not_le_Lt", "(\<infinity> <= Lt ?x) = False",
     template_equation
      (template_app
        (template_app (template_hole 3, template_hole 2),
         template_app (template_hole 1, template_var 0)),
       template_hole 0)),
    ("DBM.dbm_lt_asym", "?e \<prec> ?f ==> ~ ?f \<prec> ?e",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 1, template_var 1),
              template_var 0)
            )],
       template_negation
        (
           template_predicate
            (
               template_app
                (template_app (template_hole 1, template_var 0),
                 template_var 1)
               )
           ))),
    ("DBM.Le_le_LtI", "?a < ?b ==> Le ?a <= Lt ?b",
     template_implication
      ([template_inequation (less_than, template_var 1, template_var 0)],
       template_inequation
        (less_equals, template_app (template_hole 1, template_var 1),
         template_app (template_hole 0, template_var 0)))),
    ("DBM.Le_le_LeI", "?a <= ?b ==> Le ?a <= Le ?b",
     template_implication
      ([template_inequation (less_equals, template_var 1, template_var 0)],
       template_inequation
        (less_equals, template_app (template_hole 0, template_var 1),
         template_app (template_hole 0, template_var 0)))),
    ("DBM.Lt_le_LeI", "?a <= ?b ==> Lt ?a <= Le ?b",
     template_implication
      ([template_inequation (less_equals, template_var 1, template_var 0)],
       template_inequation
        (less_equals, template_app (template_hole 1, template_var 1),
         template_app (template_hole 0, template_var 0)))),
    ("DBM.Lt_le_LtI", "?a <= ?b ==> Lt ?a <= Lt ?b",
     template_implication
      ([template_inequation (less_equals, template_var 1, template_var 0)],
       template_inequation
        (less_equals, template_app (template_hole 0, template_var 1),
         template_app (template_hole 0, template_var 0)))),
    ("DBM.Lt_lt_LeI", "?x <= ?y ==> Lt ?x < Le ?y",
     template_implication
      ([template_inequation (less_equals, template_var 1, template_var 0)],
       template_inequation
        (less_than, template_app (template_hole 1, template_var 1),
         template_app (template_hole 0, template_var 0)))),
    ("DBM.le_dbm_le", "Le ?a \<preceq> Le ?b ==> ?a <= ?b",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_hole 2,
                template_app (template_hole 1, template_var 1)),
              template_app (template_hole 1, template_var 0))
            )],
       template_inequation (less_equals, template_var 1, template_var 0))),
    ("DBM.le_dbm_lt", "Le ?a \<preceq> Lt ?b ==> ?a < ?b",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_hole 3,
                template_app (template_hole 2, template_var 1)),
              template_app (template_hole 1, template_var 0))
            )],
       template_inequation (less_than, template_var 1, template_var 0))),
    ("DBM.lt_dbm_le", "Lt ?a \<preceq> Le ?b ==> ?a <= ?b",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_hole 3,
                template_app (template_hole 2, template_var 1)),
              template_app (template_hole 1, template_var 0))
            )],
       template_inequation (less_equals, template_var 1, template_var 0))),
    ("DBM.lt_dbm_lt", "Lt ?a \<preceq> Lt ?b ==> ?a <= ?b",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_hole 2,
                template_app (template_hole 1, template_var 1)),
              template_app (template_hole 1, template_var 0))
            )],
       template_inequation (less_equals, template_var 1, template_var 0))),
    ("DBM.Le_Lt_dbm_lt_D", "Le ?a \<prec> Le ?b ==> ?a < ?b",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_hole 2,
                template_app (template_hole 1, template_var 1)),
              template_app (template_hole 1, template_var 0))
            )],
       template_inequation (less_than, template_var 1, template_var 0))),
    ("DBM.Le_Le_dbm_lt_D", "Le ?a \<prec> Lt ?b ==> ?a < ?b",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_hole 3,
                template_app (template_hole 2, template_var 1)),
              template_app (template_hole 1, template_var 0))
            )],
       template_inequation (less_than, template_var 1, template_var 0))),
    ("DBM.Lt_Le_dbm_lt_D", "Lt ?a \<prec> Le ?b ==> ?a <= ?b",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_hole 3,
                template_app (template_hole 2, template_var 1)),
              template_app (template_hole 1, template_var 0))
            )],
       template_inequation (less_equals, template_var 1, template_var 0))),
    ("DBM.Lt_Lt_dbm_lt_D", "Lt ?a \<prec> Lt ?b ==> ?a < ?b",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_hole 2,
                template_app (template_hole 1, template_var 1)),
              template_app (template_hole 1, template_var 0))
            )],
       template_inequation (less_than, template_var 1, template_var 0))),
    ("DBM.Le_le_LeD", "Le ?a <= Le ?b ==> ?a <= ?b",
     template_implication
      ([template_inequation
         (less_equals, template_app (template_hole 1, template_var 1),
          template_app (template_hole 1, template_var 0))],
       template_inequation (less_equals, template_var 1, template_var 0))),
    ("DBM.Le_le_LtD", "Le ?a <= Lt ?b ==> ?a < ?b",
     template_implication
      ([template_inequation
         (less_equals, template_app (template_hole 2, template_var 1),
          template_app (template_hole 1, template_var 0))],
       template_inequation (less_than, template_var 1, template_var 0))),
    ("DBM.Lt_le_LeD", "Lt ?a <= Le ?b ==> ?a <= ?b",
     template_implication
      ([template_inequation
         (less_equals, template_app (template_hole 2, template_var 1),
          template_app (template_hole 1, template_var 0))],
       template_inequation (less_equals, template_var 1, template_var 0))),
    ("DBM.Lt_le_LtD", "Lt ?a <= Lt ?b ==> ?a <= ?b",
     template_implication
      ([template_inequation
         (less_equals, template_app (template_hole 1, template_var 1),
          template_app (template_hole 1, template_var 0))],
       template_inequation (less_equals, template_var 1, template_var 0))),
    ("DBM.not_dbm_le_le_impl", "~ Le ?a \<prec> Le ?b ==> ?b <= ?a",
     template_implication
      ([template_negation
         (
            template_predicate
             (
                template_app
                 (template_app
                   (template_hole 2,
                    template_app (template_hole 1, template_var 1)),
                  template_app (template_hole 1, template_var 0))
                )
            )],
       template_inequation (less_equals, template_var 0, template_var 1))),
    ("DBM.not_dbm_le_lt_impl", "~ Le ?a \<prec> Lt ?b ==> ?b <= ?a",
     template_implication
      ([template_negation
         (
            template_predicate
             (
                template_app
                 (template_app
                   (template_hole 3,
                    template_app (template_hole 2, template_var 1)),
                  template_app (template_hole 1, template_var 0))
                )
            )],
       template_inequation (less_equals, template_var 0, template_var 1))),
    ("DBM.not_dbm_lt_le_impl", "~ Lt ?a \<prec> Le ?b ==> ?b < ?a",
     template_implication
      ([template_negation
         (
            template_predicate
             (
                template_app
                 (template_app
                   (template_hole 3,
                    template_app (template_hole 2, template_var 1)),
                  template_app (template_hole 1, template_var 0))
                )
            )],
       template_inequation (less_than, template_var 0, template_var 1))),
    ("DBM.not_dbm_lt_lt_impl", "~ Lt ?a \<prec> Lt ?b ==> ?b <= ?a",
     template_implication
      ([template_negation
         (
            template_predicate
             (
                template_app
                 (template_app
                   (template_hole 2,
                    template_app (template_hole 1, template_var 1)),
                  template_app (template_hole 1, template_var 0))
                )
            )],
       template_inequation (less_equals, template_var 0, template_var 1))),
    ("DBM.dbm_lt_asymmetric",
     "[| ?x \<prec> ?y; ?y \<prec> ?x |] ==> False",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 1, template_var 1),
              template_var 0)
            ),
        template_predicate
         (
            template_app
             (template_app (template_hole 1, template_var 0),
              template_var 1)
            )],
       template_predicate (template_hole 0))),
    ("DBM.dbm_le_dbm_min", "?a \<preceq> ?b ==> ?a = dmin ?a ?b",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 3, template_var 1),
              template_var 0)
            )],
       template_equation
        (template_var 1,
         template_app
          (template_app
            (template_app
              (template_hole 1,
               template_app
                (template_app (template_hole 0, template_var 1),
                 template_var 0)),
             template_var 1),
           template_var 0)))),
    ("DBM.dbm_le_dbm_min2", "?a \<preceq> ?b ==> ?a = dmin ?b ?a",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 3, template_var 1),
              template_var 0)
            )],
       template_equation
        (template_var 1,
         template_app
          (template_app
            (template_app
              (template_hole 1,
               template_app
                (template_app (template_hole 0, template_var 0),
                 template_var 1)),
             template_var 0),
           template_var 1)))),
    ("DBM.dbm_not_lt_impl", "~ ?a \<prec> ?b ==> ?b \<prec> ?a | ?a = ?b",
     template_implication
      ([template_negation
         (
            template_predicate
             (
                template_app
                 (template_app (template_hole 2, template_var 1),
                  template_var 0)
                )
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 1,
               template_app
                (template_app (template_hole 2, template_var 0),
                 template_var 1)),
             template_app
              (template_app (template_hole 0, template_var 1),
               template_var 0))
           ))),
    ("DBM.dmb_le_dbm_entry_bound_inf",
     "[| ?a \<preceq> ?b; ?a = \<infinity> |] ==> ?b = \<infinity>",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 2, template_var 1),
              template_var 0)
            ),
        template_equation (template_var 1, template_hole 0)],
       template_equation (template_var 0, template_hole 0))),
    ("DBM.dbm_lt_trans",
     "[| ?a \<prec> ?b; ?b \<prec> ?c |] ==> ?a \<prec> ?c",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 0, template_var 2),
              template_var 1)
            ),
        template_predicate
         (
            template_app
             (template_app (template_hole 0, template_var 1),
              template_var 0)
            )],
       template_predicate
        (
           template_app
            (template_app (template_hole 0, template_var 2), template_var 0)
           ))),
    ("DBM.dbm_le_not_inf",
     "[| ?a \<preceq> ?b; ?b ~= \<infinity> |] ==> ?a ~= \<infinity>",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 3, template_var 1),
              template_var 0)
            ),
        template_negation
         (template_equation (template_var 0, template_hole 0))],
       template_negation
        (template_equation (template_var 1, template_hole 0)))),
    ("DBM.dbm_not_lt_eq",
     "[| ~ ?a \<prec> ?b; ~ ?b \<prec> ?a |] ==> ?a = ?b",
     template_implication
      ([template_negation
         (
            template_predicate
             (
                template_app
                 (template_app (template_hole 1, template_var 1),
                  template_var 0)
                )
            ),
        template_negation
         (
            template_predicate
             (
                template_app
                 (template_app (template_hole 1, template_var 0),
                  template_var 1)
                )
            )],
       template_equation (template_var 1, template_var 0))),
    ("DBM.cnt_0_D", "cnt ?x ?xs = 0 ==> ?x ~: set ?xs",
     template_implication
      ([template_equation
         (template_app
           (template_hole 6,
            template_app
             (template_app (template_hole 5, t_empty), template_var 0)),
          template_hole 3)],
       template_negation
        (
           template_predicate
            (
               template_app
                (template_app (template_hole 1, template_var 1),
                 template_app (template_hole 0, template_var 0))
               )
           ))),
    ("DBM.nat_list_0", "[| ?x : set ?xs; 0 ~: set ?xs |] ==> 0 < ?x",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 4, template_var 1),
              template_app (template_hole 3, template_var 0))
            ),
        template_negation
         (
            template_predicate
             (
                template_app
                 (template_app (template_hole 4, template_hole 1),
                  template_app (template_hole 3, template_var 0))
                )
            )],
       template_inequation (less_than, template_hole 1, template_var 1))),
    ("DBM.dbm_add_not_inf",
     "[| ?a ~= \<infinity>; ?b ~= \<infinity> |]
      ==> dbm_add ?a ?b ~= \<infinity>",
     template_implication
      ([template_negation
         (template_equation (template_var 1, template_hole 1)),
        template_negation
         (template_equation (template_var 0, template_hole 1))],
       template_negation
        (
           template_equation
            (template_app
              (template_app (template_hole 0, template_var 1),
               template_var 0),
             template_hole 1)
           ))),
    ("DBM.aux_3",
     "[| ~ ?a \<prec> ?b; ~ ?b \<prec> ?c; ?a \<prec> ?c |] ==> ?c = ?a",
     template_implication
      ([template_negation
         (
            template_predicate
             (
                template_app
                 (template_app (template_hole 1, template_var 2),
                  template_var 1)
                )
            ),
        template_negation
         (
            template_predicate
             (
                template_app
                 (template_app (template_hole 1, template_var 1),
                  template_var 0)
                )
            ),
        template_predicate
         (
            template_app
             (template_app (template_hole 1, template_var 2),
              template_var 0)
            )],
       template_equation (template_var 0, template_var 2))),
    ("DBM.aux_4",
     "[| ?x \<prec> ?y; ~ dbm_add ?x ?z \<prec> dbm_add ?y ?z |]
      ==> dbm_add ?x ?z = dbm_add ?y ?z",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 3, template_var 2),
              template_var 1)
            ),
        template_negation
         (
            template_predicate
             (
                template_app
                 (template_app
                   (template_hole 3,
                    template_app
                     (template_app (template_hole 1, template_var 2),
                      template_var 0)),
                  template_app
                   (template_app (template_hole 1, template_var 1),
                    template_var 0))
                )
            )],
       template_equation
        (template_app
          (template_app (template_hole 1, template_var 2), template_var 0),
         template_app
          (template_app (template_hole 1, template_var 1),
           template_var 0)))),
    ("DBM.aux_42",
     "[| ?x \<prec> ?y; ~ dbm_add ?z ?x \<prec> dbm_add ?z ?y |]
      ==> dbm_add ?z ?x = dbm_add ?z ?y",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 3, template_var 2),
              template_var 1)
            ),
        template_negation
         (
            template_predicate
             (
                template_app
                 (template_app
                   (template_hole 3,
                    template_app
                     (template_app (template_hole 1, template_var 0),
                      template_var 2)),
                  template_app
                   (template_app (template_hole 1, template_var 0),
                    template_var 1))
                )
            )],
       template_equation
        (template_app
          (template_app (template_hole 1, template_var 0), template_var 2),
         template_app
          (template_app (template_hole 1, template_var 0),
           template_var 1)))),
    ("DBM.aux_5",
     "[| ~ ?x \<prec> ?y; dbm_add ?x ?z \<prec> dbm_add ?y ?z |]
      ==> dbm_add ?y ?z = dbm_add ?x ?z",
     template_implication
      ([template_negation
         (
            template_predicate
             (
                template_app
                 (template_app (template_hole 2, template_var 2),
                  template_var 1)
                )
            ),
        template_predicate
         (
            template_app
             (template_app
               (template_hole 2,
                template_app
                 (template_app (template_hole 1, template_var 2),
                  template_var 0)),
              template_app
               (template_app (template_hole 1, template_var 1),
                template_var 0))
            )],
       template_equation
        (template_app
          (template_app (template_hole 1, template_var 1), template_var 0),
         template_app
          (template_app (template_hole 1, template_var 2),
           template_var 0)))),
    ("DBM.aux_52",
     "[| ~ ?x \<prec> ?y; dbm_add ?z ?x \<prec> dbm_add ?z ?y |]
      ==> dbm_add ?z ?y = dbm_add ?z ?x",
     template_implication
      ([template_negation
         (
            template_predicate
             (
                template_app
                 (template_app (template_hole 2, template_var 2),
                  template_var 1)
                )
            ),
        template_predicate
         (
            template_app
             (template_app
               (template_hole 2,
                template_app
                 (template_app (template_hole 1, template_var 0),
                  template_var 2)),
              template_app
               (template_app (template_hole 1, template_var 0),
                template_var 1))
            )],
       template_equation
        (template_app
          (template_app (template_hole 1, template_var 0), template_var 1),
         template_app
          (template_app (template_hole 1, template_var 0),
           template_var 2)))),
    ("DBM.dbm_entry_val_add_2",
     "[| dbm_entry_val ?u None (Some ?c) ?a;
         dbm_entry_val ?u (Some ?c) (Some ?d) ?b |]
      ==> dbm_entry_val ?u None (Some ?d) (dbm_add ?a ?b)",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_app (template_hole 3, template_var 4),
                  template_hole 2),
                template_app (template_hole 1, template_var 3)),
              template_var 2)
            ),
        template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_app (template_hole 3, template_var 4),
                  template_app (template_hole 1, template_var 3)),
                template_app (template_hole 1, template_var 1)),
              template_var 0)
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_app
                (template_app (template_hole 3, template_var 4),
                 template_hole 2),
               template_app (template_hole 1, template_var 1)),
             template_app
              (template_app (template_hole 0, template_var 2),
               template_var 0))
           ))),
    ("DBM.dbm_entry_val_add_4",
     "[| dbm_entry_val ?u (Some ?c) None ?a;
         dbm_entry_val ?u None (Some ?d) ?b |]
      ==> dbm_entry_val ?u (Some ?c) (Some ?d) (dbm_add ?a ?b)",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_app (template_hole 3, template_var 4),
                  template_app (template_hole 2, template_var 3)),
                template_hole 1),
              template_var 2)
            ),
        template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_app (template_hole 3, template_var 4),
                  template_hole 1),
                template_app (template_hole 2, template_var 1)),
              template_var 0)
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_app
                (template_app (template_hole 3, template_var 4),
                 template_app (template_hole 2, template_var 3)),
               template_app (template_hole 2, template_var 1)),
             template_app
              (template_app (template_hole 0, template_var 2),
               template_var 0))
           ))),
    ("DBM.dbm_entry_val_add_1",
     "[| dbm_entry_val ?u (Some ?c) (Some ?d) ?a;
         dbm_entry_val ?u (Some ?d) None ?b |]
      ==> dbm_entry_val ?u (Some ?c) None (dbm_add ?a ?b)",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_app (template_hole 3, template_var 4),
                  template_app (template_hole 2, template_var 3)),
                template_app (template_hole 2, template_var 2)),
              template_var 1)
            ),
        template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_app (template_hole 3, template_var 4),
                  template_app (template_hole 2, template_var 2)),
                template_hole 1),
              template_var 0)
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_app
                (template_app (template_hole 3, template_var 4),
                 template_app (template_hole 2, template_var 3)),
               template_hole 1),
             template_app
              (template_app (template_hole 0, template_var 1),
               template_var 0))
           ))),
    ("DBM.cnt_at_most_1_D",
     "cnt ?x (?xs @ ?x # ?ys) <= 1 ==> ?x ~: set ?xs & ?x ~: set ?ys",
     template_implication
      ([template_inequation
         (less_equals,
          template_app
           (template_hole 9,
            template_app
             (template_app (template_hole 8, t_empty),
              template_app
               (template_app (template_hole 6, template_var 1),
                template_app
                 (template_app (template_hole 5, template_var 2),
                  template_var 0)))),
          template_hole 4)],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 3,
               template_app
                (template_hole 2,
                 template_app
                  (template_app (template_hole 1, template_var 2),
                   template_app (template_hole 0, template_var 1)))),
             template_app
              (template_hole 2,
               template_app
                (template_app (template_hole 1, template_var 2),
                 template_app (template_hole 0, template_var 0))))
           ))),
    ("DBM.dbm_entry_val_add_3",
     "[| dbm_entry_val ?u (Some ?c) (Some ?d) ?a;
         dbm_entry_val ?u (Some ?d) (Some ?e) ?b |]
      ==> dbm_entry_val ?u (Some ?c) (Some ?e) (dbm_add ?a ?b)",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_app (template_hole 2, template_var 5),
                  template_app (template_hole 1, template_var 4)),
                template_app (template_hole 1, template_var 3)),
              template_var 2)
            ),
        template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_app (template_hole 2, template_var 5),
                  template_app (template_hole 1, template_var 3)),
                template_app (template_hole 1, template_var 1)),
              template_var 0)
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_app
                (template_app (template_hole 2, template_var 5),
                 template_app (template_hole 1, template_var 4)),
               template_app (template_hole 1, template_var 1)),
             template_app
              (template_app (template_hole 0, template_var 2),
               template_var 0))
           ))),
    ("DBM.DBM_val_bounded_len_2",
     "[| ?u \<turnstile>\<^bsub>?v,?n\<^esub> ?m; ?v ?c <= ?n;
         ALL c:set ?cs. ?v c <= ?n |]
      ==> dbm_entry_val ?u None (Some ?c) (len ?m 0 (?v ?c) (map ?v ?cs))",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_app (template_hole 9, template_var 5),
                  template_var 4),
                template_var 3),
              template_var 2)
            ),
        template_inequation
         (less_equals, template_app (template_var 5, template_var 1),
          template_var 2),
        template_predicate
         (
            template_app
             (template_app
               (template_hole 7,
                template_app (template_hole 6, template_var 0)),
              t_empty)
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_app
                (template_app (template_hole 5, template_var 4),
                 template_hole 4),
               template_app (template_hole 3, template_var 1)),
             template_app
              (template_app
                (template_app
                  (template_app (template_hole 2, template_var 3),
                   template_hole 1),
                 template_app (template_var 5, template_var 1)),
               template_app
                (template_app (template_hole 0, template_var 5),
                 template_var 0)))
           ))),
    ("DBM.DBM_val_bounded_len_1",
     "[| ?u \<turnstile>\<^bsub>?v,?n\<^esub> ?m; ?v ?c <= ?n;
         ALL c:set ?cs. ?v c <= ?n |]
      ==> dbm_entry_val ?u (Some ?c) None (len ?m (?v ?c) 0 (map ?v ?cs))",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_app (template_hole 9, template_var 5),
                  template_var 4),
                template_var 3),
              template_var 2)
            ),
        template_inequation
         (less_equals, template_app (template_var 5, template_var 1),
          template_var 2),
        template_predicate
         (
            template_app
             (template_app
               (template_hole 7,
                template_app (template_hole 6, template_var 0)),
              t_empty)
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_app
                (template_app (template_hole 5, template_var 4),
                 template_app (template_hole 4, template_var 1)),
               template_hole 3),
             template_app
              (template_app
                (template_app
                  (template_app (template_hole 2, template_var 3),
                   template_app (template_var 5, template_var 1)),
                 template_hole 1),
               template_app
                (template_app (template_hole 0, template_var 5),
                 template_var 0)))
           ))),
    ("DBM.DBM_val_bounded_len_2'_aux",
     "[| ?u \<turnstile>\<^bsub>?v,?n\<^esub> ?m; ?v ?c <= ?n;
         ALL k:set ?vs. 0 < k & k <= ?n & (EX c. ?v c = k) |]
      ==> dbm_entry_val ?u None (Some ?c) (len ?m 0 (?v ?c) ?vs)",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_app (template_hole 12, template_var 5),
                  template_var 4),
                template_var 3),
              template_var 2)
            ),
        template_inequation
         (less_equals, template_app (template_var 5, template_var 1),
          template_var 2),
        template_predicate
         (
            template_app
             (template_app
               (template_hole 10,
                template_app (template_hole 9, template_var 0)),
              t_empty)
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_app
                (template_app (template_hole 3, template_var 4),
                 template_hole 2),
               template_app (template_hole 1, template_var 1)),
             template_app
              (template_app
                (template_app
                  (template_app (template_hole 0, template_var 3),
                   template_hole 6),
                 template_app (template_var 5, template_var 1)),
               template_var 0))
           ))),
    ("DBM.DBM_val_bounded_len_1'_aux",
     "[| ?u \<turnstile>\<^bsub>?v,?n\<^esub> ?m; ?v ?c <= ?n;
         ALL k:set ?vs. 0 < k & k <= ?n & (EX c. ?v c = k) |]
      ==> dbm_entry_val ?u (Some ?c) None (len ?m (?v ?c) 0 ?vs)",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_app (template_hole 12, template_var 5),
                  template_var 4),
                template_var 3),
              template_var 2)
            ),
        template_inequation
         (less_equals, template_app (template_var 5, template_var 1),
          template_var 2),
        template_predicate
         (
            template_app
             (template_app
               (template_hole 10,
                template_app (template_hole 9, template_var 0)),
              t_empty)
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_app
                (template_app (template_hole 3, template_var 4),
                 template_app (template_hole 2, template_var 1)),
               template_hole 1),
             template_app
              (template_app
                (template_app
                  (template_app (template_hole 0, template_var 3),
                   template_app (template_var 5, template_var 1)),
                 template_hole 6),
               template_var 0))
           ))),
    ("DBM.DBM_val_bounded_len_3",
     "[| ?u \<turnstile>\<^bsub>?v,?n\<^esub> ?m; ?v ?c <= ?n; ?v ?d <= ?n;
         ALL c:set ?cs. ?v c <= ?n |]
      ==> dbm_entry_val ?u (Some ?c) (Some ?d)
           (len ?m (?v ?c) (?v ?d) (map ?v ?cs))",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_app (template_hole 7, template_var 6),
                  template_var 5),
                template_var 4),
              template_var 3)
            ),
        template_inequation
         (less_equals, template_app (template_var 6, template_var 2),
          template_var 3),
        template_inequation
         (less_equals, template_app (template_var 6, template_var 1),
          template_var 3),
        template_predicate
         (
            template_app
             (template_app
               (template_hole 5,
                template_app (template_hole 4, template_var 0)),
              t_empty)
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_app
                (template_app (template_hole 3, template_var 5),
                 template_app (template_hole 2, template_var 2)),
               template_app (template_hole 2, template_var 1)),
             template_app
              (template_app
                (template_app
                  (template_app (template_hole 1, template_var 4),
                   template_app (template_var 6, template_var 2)),
                 template_app (template_var 6, template_var 1)),
               template_app
                (template_app (template_hole 0, template_var 6),
                 template_var 0)))
           ))),
    ("DBM.DBM_val_bounded_len'2",
     "[| ?u \<turnstile>\<^bsub>?v,?n\<^esub> ?m; 0 ~: set ?vs; ?v ?c <= ?n;
         ALL k:set ?vs. 0 < k --> k <= ?n & (EX c. ?v c = k) |]
      ==> dbm_entry_val ?u None (Some ?c) (len ?m 0 (?v ?c) ?vs)",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_app (template_hole 15, template_var 5),
                  template_var 4),
                template_var 3),
              template_var 2)
            ),
        template_negation
         (
            template_predicate
             (
                template_app
                 (template_app (template_hole 13, template_hole 12),
                  template_app (template_hole 11, template_var 1))
                )
            ),
        template_inequation
         (less_equals, template_app (template_var 5, template_var 0),
          template_var 2),
        template_predicate
         (
            template_app
             (template_app
               (template_hole 9,
                template_app (template_hole 11, template_var 1)),
              t_empty)
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_app
                (template_app (template_hole 3, template_var 4),
                 template_hole 2),
               template_app (template_hole 1, template_var 0)),
             template_app
              (template_app
                (template_app
                  (template_app (template_hole 0, template_var 3),
                   template_hole 12),
                 template_app (template_var 5, template_var 0)),
               template_var 1))
           ))),
    ("DBM.DBM_val_bounded_len'1",
     "[| ?u \<turnstile>\<^bsub>?v,?n\<^esub> ?m; 0 ~: set ?vs; ?v ?c <= ?n;
         ALL k:set ?vs. 0 < k --> k <= ?n & (EX c. ?v c = k) |]
      ==> dbm_entry_val ?u (Some ?c) None (len ?m (?v ?c) 0 ?vs)",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_app (template_hole 15, template_var 5),
                  template_var 4),
                template_var 3),
              template_var 2)
            ),
        template_negation
         (
            template_predicate
             (
                template_app
                 (template_app (template_hole 13, template_hole 12),
                  template_app (template_hole 11, template_var 1))
                )
            ),
        template_inequation
         (less_equals, template_app (template_var 5, template_var 0),
          template_var 2),
        template_predicate
         (
            template_app
             (template_app
               (template_hole 9,
                template_app (template_hole 11, template_var 1)),
              t_empty)
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_app
                (template_app (template_hole 3, template_var 4),
                 template_app (template_hole 2, template_var 0)),
               template_hole 1),
             template_app
              (template_app
                (template_app
                  (template_app (template_hole 0, template_var 3),
                   template_app (template_var 5, template_var 0)),
                 template_hole 12),
               template_var 1))
           ))),
    ("DBM.DBM_val_bounded_len_3'_aux",
     "[| ?u \<turnstile>\<^bsub>?v,?n\<^esub> ?m; ?v ?c <= ?n; ?v ?d <= ?n;
         ALL k:set ?vs. 0 < k & k <= ?n & (EX c. ?v c = k) |]
      ==> dbm_entry_val ?u (Some ?c) (Some ?d)
           (len ?m (?v ?c) (?v ?d) ?vs)",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_app (template_hole 11, template_var 6),
                  template_var 5),
                template_var 4),
              template_var 3)
            ),
        template_inequation
         (less_equals, template_app (template_var 6, template_var 2),
          template_var 3),
        template_inequation
         (less_equals, template_app (template_var 6, template_var 1),
          template_var 3),
        template_predicate
         (
            template_app
             (template_app
               (template_hole 9,
                template_app (template_hole 8, template_var 0)),
              t_empty)
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_app
                (template_app (template_hole 2, template_var 5),
                 template_app (template_hole 1, template_var 2)),
               template_app (template_hole 1, template_var 1)),
             template_app
              (template_app
                (template_app
                  (template_app (template_hole 0, template_var 4),
                   template_app (template_var 6, template_var 2)),
                 template_app (template_var 6, template_var 1)),
               template_var 0))
           ))),
    ("DBM.DBM_val_bounded_len'3",
     "[| ?u \<turnstile>\<^bsub>?v,?n\<^esub> ?m; cnt 0 ?vs <= 1;
         ?v ?c1.0 <= ?n; ?v ?c2.0 <= ?n;
         ALL k:set ?vs. 0 < k --> k <= ?n & (EX c. ?v c = k) |]
      ==> dbm_entry_val ?u (Some ?c1.0) (Some ?c2.0)
           (len ?m (?v ?c1.0) (?v ?c2.0) ?vs)",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_app (template_hole 15, template_var 6),
                  template_var 5),
                template_var 4),
              template_var 3)
            ),
        template_inequation
         (less_equals,
          template_app
           (template_hole 13,
            template_app
             (template_app (template_hole 12, t_empty), template_var 2)),
          template_hole 9),
        template_inequation
         (less_equals, template_app (template_var 6, template_var 1),
          template_var 3),
        template_inequation
         (less_equals, template_app (template_var 6, template_var 0),
          template_var 3),
        template_predicate
         (
            template_app
             (template_app
               (template_hole 8,
                template_app (template_hole 7, template_var 2)),
              t_empty)
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_app
                (template_app (template_hole 2, template_var 5),
                 template_app (template_hole 1, template_var 1)),
               template_app (template_hole 1, template_var 0)),
             template_app
              (template_app
                (template_app
                  (template_app (template_hole 0, template_var 4),
                   template_app (template_var 6, template_var 1)),
                 template_app (template_var 6, template_var 0)),
               template_var 2))
           ))),
    ("DBM.DBM_val_bounded_len'",
     "[| ?u \<turnstile>\<^bsub>?v,?n\<^esub> ?m;
         cnt 0 (?i # ?j # ?vs) <= 1;
         ALL k:set (?i # ?j # ?vs). 0 < k --> k <= ?n & (EX c. ?v c = k) |]
      ==> dbm_entry_val ?u
           (if ?i = 0 then None else Some (SOME c. ?v c = ?i))
           (if ?j = 0 then None else Some (SOME c. ?v c = ?j))
           (len ?m ?i ?j ?vs)",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_app (template_hole 19, template_var 6),
                  template_var 5),
                template_var 4),
              template_var 3)
            ),
        template_inequation
         (less_equals,
          template_app
           (template_hole 17,
            template_app
             (template_app (template_hole 16, t_empty),
              template_app
               (template_app (template_hole 13, template_var 2),
                template_app
                 (template_app (template_hole 13, template_var 1),
                  template_var 0)))),
          template_hole 12),
        template_predicate
         (
            template_app
             (template_app
               (template_hole 11,
                template_app
                 (template_hole 10,
                  template_app
                   (template_app (template_hole 13, template_var 2),
                    template_app
                     (template_app (template_hole 13, template_var 1),
                      template_var 0)))),
              t_empty)
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_app
                (template_app (template_hole 5, template_var 5),
                 template_app
                  (template_app
                    (template_app
                      (template_hole 4,
                       template_app
                        (template_app (template_hole 15, template_var 2),
                         template_hole 14)),
                     template_hole 3),
                   template_app
                    (template_hole 2,
                     template_app (template_hole 1, t_empty)))),
               template_app
                (template_app
                  (template_app
                    (template_hole 4,
                     template_app
                      (template_app (template_hole 15, template_var 1),
                       template_hole 14)),
                   template_hole 3),
                 template_app
                  (template_hole 2,
                   template_app (template_hole 1, t_empty)))),
             template_app
              (template_app
                (template_app
                  (template_app (template_hole 0, template_var 4),
                   template_var 2),
                 template_var 1),
               template_var 0))
           )))]:
   (string * thm * template) list
### theory "Draft.DBMMoreTemplates"
### 0.427s elapsed time, 0.739s cpu time, 0.090s GC time
val it = (): unit
