Loading theory "Draft.Floyd_Warshall" (required by "Draft.DBM_Zone_SemanticsMoreTemplates" via "Draft.DBM_Zone_Semantics" via "Draft.DBM_Operations" via "Draft.DBM_Basics" via "Draft.DBM")
Loading theory "Draft.Timed_Automata" (required by "Draft.DBM_Zone_SemanticsMoreTemplates" via "Draft.DBM_Zone_Semantics" via "Draft.DBM_Operations" via "Draft.DBM_Basics" via "Draft.DBM")
Loading theory "HOL-Library.Function_Algebras" (required by "Draft.DBM_Zone_SemanticsMoreTemplates" via "Draft.ExtrEqs" via "HOL-Library.BigO")
Loading theory "HOL-Library.Nat_Bijection" (required by "Draft.DBM_Zone_SemanticsMoreTemplates" via "Draft.ExtrEqs" via "HOL-Library.Stream")
instantiation
  fun :: (type, plus) plus
  plus_fun == plus :: ('a => 'b) => ('a => 'b) => 'a => 'b
instantiation
  fun :: (type, zero) zero
  zero_fun == zero_class.zero :: 'a => 'b
instantiation
  fun :: (type, times) times
  times_fun == times :: ('a => 'b) => ('a => 'b) => 'a => 'b
instantiation
  fun :: (type, one) one
  one_fun == one_class.one :: 'a => 'b
Found termination order: "(%p. size (snd p)) <*mlex*> {}"
### theory "HOL-Library.Function_Algebras"
### 0.127s elapsed time, 0.525s cpu time, 0.047s GC time
Loading theory "HOL-Library.Set_Algebras" (required by "Draft.DBM_Zone_SemanticsMoreTemplates" via "Draft.ExtrEqs" via "HOL-Library.BigO")
instantiation
  set :: (plus) plus
  plus_set == plus :: 'a set => 'a set => 'a set
Found termination order: "(%p. length (fst p)) <*mlex*> {}"
instantiation
  set :: (times) times
  times_set == times :: 'a set => 'a set => 'a set
instantiation
  set :: (zero) zero
  zero_set == zero_class.zero :: 'a set
instantiation
  set :: (one) one
  one_set == one_class.one :: 'a set
Found termination order: "size_list size <*mlex*> {}"
Found termination order: "(%p. length (fst p)) <*mlex*> {}"
### theory "HOL-Library.Nat_Bijection"
### 0.326s elapsed time, 1.305s cpu time, 0.110s GC time
Loading theory "HOL-Library.Stream" (required by "Draft.DBM_Zone_SemanticsMoreTemplates" via "Draft.ExtrEqs")
### theory "HOL-Library.Set_Algebras"
### 0.207s elapsed time, 0.818s cpu time, 0.063s GC time
Loading theory "HOL-Library.Tree" (required by "Draft.DBM_Zone_SemanticsMoreTemplates" via "Draft.ExtrEqs" via "Draft.Templates")
Found termination order: "(%p. length (fst p)) <*mlex*> {}"
class time = linordered_ab_group_add +
  assumes "dense": "!!x y. x < y ==> EX z>x. z < y"
  assumes "non_trivial": "EX x. x ~= (0::'a)"
consts
  shift :: "'a list => 'a stream => 'a stream"
class linordered_ab_monoid_add = linordered_ab_semigroup_add +
  fixes neutral :: "'a"
  assumes "neutl": "!!x. \<one> + x = x"
  assumes "neutr": "!!x. x + \<one> = x"
Proofs for coinductive predicate(s) "streamsp"
  Proving monotonicity ...
consts
  snth :: "'a stream => nat => 'a"
consts
  stake :: "nat => 'a stream => 'a list"
consts
  sdrop :: "nat => 'a stream => 'a stream"
consts
  left :: "'a tree => 'a tree"
consts
  right :: "'a tree => 'a tree"
consts
  sfilter :: "('a => bool) => 'a stream => 'a stream"
Found termination order: "size <*mlex*> {}"
consts
  cycle :: "'a list => 'a stream"
consts
  siterate :: "('a => 'a) => 'a => 'a stream"
Found termination order: "size <*mlex*> {}"
consts
  flat :: "'a list stream => 'a stream"
Found termination order: "size <*mlex*> {}"
consts
  sinterleave :: "'a stream => 'a stream => 'a stream"
class height = type +
  fixes height :: "'a => nat"
instantiation
  tree :: (type) height
  height_tree == height :: 'a tree => nat
consts
  szip :: "'a stream => 'b stream => ('a * 'b) stream"
consts
  smap2 :: "('a => 'b => 'c) => 'a stream => 'b stream => 'c stream"
Found termination order: "size <*mlex*> {}"
### theory "HOL-Library.Stream"
### 1.080s elapsed time, 4.091s cpu time, 0.773s GC time
Loading theory "HOL-Library.BigO" (required by "Draft.DBM_Zone_SemanticsMoreTemplates" via "Draft.ExtrEqs")
Found termination order: "size <*mlex*> {}"
Found termination order:
  "(%p. size (fst (snd (snd p)))) <*mlex*>
   (%p. size (fst (snd (snd (snd p))))) <*mlex*>
   (%p. size (snd (snd (snd (snd p))))) <*mlex*> {}"
Found termination order: "size <*mlex*> {}"
Found termination order: "size <*mlex*> {}"
Found termination order: "size <*mlex*> {}"
Found termination order: "size <*mlex*> {}"
Found termination order: "size <*mlex*> {}"
Found termination order: "(%p. size (fst p)) <*mlex*> {}"
Found termination order: "size <*mlex*> {}"
Found termination order: "(%p. size (snd p)) <*mlex*> {}"
Found termination order:
  "(%p. size_list size (snd (snd (snd p)))) <*mlex*> {}"
Found termination order: "size <*mlex*> {}"
### theory "HOL-Library.BigO"
### 0.833s elapsed time, 3.288s cpu time, 0.262s GC time
"as @ x # bs @ x # cs @ x # ds"
  :: "'a list"
Found termination order: "size <*mlex*> {}"
Found termination order: "size <*mlex*> {}"
Proofs for inductive predicate(s) "valid_abstraction"
  Proving monotonicity ...
Proofs for inductive predicate(s) "clock_val"
  Proving monotonicity ...
### theory "HOL-Library.Tree"
### 2.180s elapsed time, 8.225s cpu time, 1.225s GC time
Loading theory "Draft.Templates" (required by "Draft.DBM_Zone_SemanticsMoreTemplates" via "Draft.ExtrEqs")
Found termination order: "(%p. length (fst p)) <*mlex*> {}"
Proofs for inductive predicate(s) "step_t"
datatype template_term
=
     t_empty
   | template_app of template_term * template_term
   | template_hole of int
   | template_var of int
datatype sign
= equals | greater_equals | greater_than | less_equals | less_than
datatype template
=
     template_bimplication of template * template
   | template_dunno
   | template_equation of template_term * template_term
   | template_implication of template list * template
   | template_inequation of sign * template_term * template_term
   | template_negation of template
   | template_predicate of template_term
constructor t_empty: template_term
constructor template_app: template_term * template_term -> template_term
constructor template_hole: int -> template_term
constructor template_var: int -> template_term
constructor equals: sign
constructor greater_equals: sign
constructor greater_than: sign
constructor less_equals: sign
constructor less_than: sign
constructor template_bimplication: template * template -> template
constructor template_dunno: template
constructor template_equation: template_term * template_term -> template
constructor template_implication: template list * template -> template
constructor template_inequation:
   sign * template_term * template_term -> template
constructor template_negation: template -> template
constructor template_predicate: template_term -> template
val vfs = fn: term -> (indexname * typ) list * (string * typ) list
val indexOf = fn: ''a list -> ''a -> int -> int
val has_eq = fn: term -> bool
val term2template = fn:
   (indexname * typ) list -> (string * typ) list -> term -> template_term
val lemma2predicate = fn: term -> term -> template
val makeTemplatewithContext = fn: term -> term -> template
val lemma2template = fn: term -> template
val thm2template = fn: thm -> template
val tterm2string = fn: template_term -> string
val template2string = fn: template -> string
val t = "height ?t <= size ?t": thm
val th =
   Const ("HOL.Trueprop", "bool => prop") $
     (Const ("Orderings.ord_class.less_eq", "nat => nat => bool") $
       (Const ("Tree.height_class.height", "?'a tree => nat") $
         Var (("t", 0), "?'a tree")) $
       (Const ("Nat.size_class.size", "?'a tree => nat") $
         Var (("t", 0), "?'a tree"))):
   term
### theory "Draft.Templates"
### 0.063s elapsed time, 0.191s cpu time, 0.000s GC time
Loading theory "Draft.ExtrEqs" (required by "Draft.DBM_Zone_SemanticsMoreTemplates")
  Proving monotonicity ...
Proofs for inductive predicate(s) "step_a"
  Proving monotonicity ...
Proofs for inductive predicate(s) "step"
  Proving monotonicity ...
Proofs for inductive predicate(s) "steps"
  Proving monotonicity ...
Proofs for inductive predicate(s) "step_z"
  Proving monotonicity ...
Proofs for inductive predicate(s) "steps_z"
  Proving monotonicity ...
### theory "Draft.Timed_Automata"
### 2.886s elapsed time, 10.695s cpu time, 1.432s GC time
### theory "Draft.Floyd_Warshall"
### 2.882s elapsed time, 10.608s cpu time, 1.432s GC time
Loading theory "Draft.DBM" (required by "Draft.DBM_Zone_SemanticsMoreTemplates" via "Draft.DBM_Zone_Semantics" via "Draft.DBM_Operations" via "Draft.DBM_Basics")
Loading theory "Draft.Paths_Cycles" (required by "Draft.DBM_Zone_SemanticsMoreTemplates" via "Draft.DBM_Zone_Semantics" via "Draft.DBM_Operations" via "Draft.DBM_Basics")
val eqpattern =
   Pattern
    (
       Const ("HOL.Trueprop", "bool => prop") $
         (Const ("HOL.eq", "?'a => ?'a => bool") $
           Var (("_dummy_", 1), "?'a") $ Var (("_dummy_", 2), "?'a"))
       ):
   term Find_Theorems.criterion
val badeqpattern = Pattern (Const ("Pure.eq", "?'a => ?'a => prop")):
   term Find_Theorems.criterion
val undefpattern =
   Pattern
    (
       Const ("HOL.Trueprop", "bool => prop") $
         (Const ("HOL.eq", "?'a => ?'a => bool") $
           Var (("_dummy_", 1), "?'a") $ Const ("HOL.undefined", "?'a"))
       ):
   term Find_Theorems.criterion
val thmpattern =
   Pattern
    (Const ("HOL.Trueprop", "bool => prop") $ Var (("_dummy_", 1), "bool")):
   term Find_Theorems.criterion
val badnames =
   ["*nitpick*", "*Nitpick*", "*full_exhaustive*", "*_def*", "Enum.finite*",
    "*Quickcheck*", "ATP*", "*Nunchaku*", "*Code*", "*BNF*", "*SMT*",
    "*.*.*"]:
   string list
val unwanted_names =
   [(false, Name "*nitpick*"), (false, Name "*Nitpick*"),
    (false, Name "*full_exhaustive*"), (false, Name "*_def*"),
    (false, Name "Enum.finite*"), (false, Name "*Quickcheck*"),
    (false, Name "ATP*"), (false, Name "*Nunchaku*"),
    (false, Name "*Code*"), (false, Name "*BNF*"), (false, Name "*SMT*"),
    (false, Name "*.*.*")]:
   (bool * term Find_Theorems.criterion) list
val has_vars = fn: term -> bool
val get_all_eqs = fn: string -> Proof.context -> (string * thm) list
val get_all_thms = fn: string -> Proof.context -> (string * thm) list
val get_noneq_thms = fn: string -> Proof.context -> (string * thm) list
val template_eqs = fn:
   string -> Proof.context -> (string * thm * template) list
val template_thms = fn:
   string -> Proof.context -> (string * thm * template) list
### theory "Draft.ExtrEqs"
### 0.920s elapsed time, 2.934s cpu time, 1.091s GC time
Found termination order: "(%p. size_list size (snd (snd p))) <*mlex*> {}"
Found termination order: "(%p. length (snd p)) <*mlex*> {}"
Proofs for inductive predicate(s) "dbm_entry_val"
  Proving monotonicity ...
[| (?a, ?b) : set (arcs ?i ?j ?xs); ?b ~= ?j |]
==> EX c. ?xs = [?b] & ?a = ?i |
          (EX ys. ?xs = ?b # c # ys & ?a = ?i) |
          (EX ys. ?xs = ys @ [?a, ?b] & c = ?j) |
          (EX ys zs. ?xs = ys @ ?a # ?b # c # zs)
Found termination order: "{}"
Proofs for inductive predicate(s) "dbm_lt"
  Proving monotonicity ...
### theory "Draft.Paths_Cycles"
### 1.134s elapsed time, 3.074s cpu time, 1.146s GC time
Found termination order: "{}"
\<infinity> \<otimes> ?uu = \<infinity>
Le ?v \<otimes> \<infinity> = \<infinity>
Lt ?v \<otimes> \<infinity> = \<infinity>
Le ?a \<otimes> Le ?b = Le (?a + ?b)
Le ?a \<otimes> Lt ?b = Lt (?a + ?b)
Lt ?a \<otimes> Le ?b = Lt (?a + ?b)
Lt ?a \<otimes> Lt ?b = Lt (?a + ?b)
instantiation
  DBMEntry :: (time) linorder
  less_eq_DBMEntry == less_eq :: 'a DBMEntry => 'a DBMEntry => bool
  less_DBMEntry == less :: 'a DBMEntry => 'a DBMEntry => bool
instantiation
  DBMEntry :: (time) linordered_ab_monoid_add
  neutral_DBMEntry == neutral :: 'a DBMEntry
  plus_DBMEntry == plus :: 'a DBMEntry => 'a DBMEntry => 'a DBMEntry
### Partially applied constant "DBM.dbm_le" on left hand side of equation, in theorem:
### linorder.Min dbm_le (set (?x # ?xs)) == fold linordered_monoid.min ?xs ?x
### Partially applied constant "DBM.dbm_le" on left hand side of equation, in theorem:
### linorder.Max dbm_le (set (?x # ?xs)) == fold linordered_monoid.max ?xs ?x
### Partially applied constant "DBM.dbm_le" on left hand side of equation, in theorem:
### linordered_monoid.sorted [] == True
### Partially applied constant "DBM.dbm_le" on left hand side of equation, in theorem:
### linordered_monoid.sorted [?x] == True
### Partially applied constant "DBM.dbm_le" on left hand side of equation, in theorem:
### linordered_monoid.sorted (?x # ?y # ?zs) ==
### ?x \<preceq> ?y & linordered_monoid.sorted (?y # ?zs)
### Partially applied constant "DBM.dbm_le" on left hand side of equation, in theorem:
### linordered_monoid.sorted_list_of_set (set ?xs) ==
### linordered_monoid.sort (remdups ?xs)
### theory "Draft.DBM"
### 1.815s elapsed time, 3.901s cpu time, 1.281s GC time
Loading theory "Draft.DBM_Basics" (required by "Draft.DBM_Zone_SemanticsMoreTemplates" via "Draft.DBM_Zone_Semantics" via "Draft.DBM_Operations")
Found termination order: "{}"
Found termination order:
  "(%p. size (fst (snd (snd p)))) <*mlex*>
   (%p. size (fst (snd (snd (snd p))))) <*mlex*> {}"
### theory "Draft.DBM_Basics"
### 0.990s elapsed time, 1.892s cpu time, 1.160s GC time
Loading theory "Draft.DBM_Operations" (required by "Draft.DBM_Zone_SemanticsMoreTemplates" via "Draft.DBM_Zone_Semantics")
Found termination order: "{}"
Found termination order: "{}"
Found termination order: "(%p. size (fst p)) <*mlex*> {}"
Found termination order: "(%p. length (fst (snd (snd p)))) <*mlex*> {}"
Found termination order: "(%p. length (fst (snd p))) <*mlex*> {}"
### theory "Draft.DBM_Operations"
### 0.971s elapsed time, 1.265s cpu time, 0.330s GC time
Loading theory "Draft.DBM_Zone_Semantics" (required by "Draft.DBM_Zone_SemanticsMoreTemplates")
Proofs for inductive predicate(s) "step_z_dbm"
  Proving monotonicity ...
Proofs for inductive predicate(s) "steps_z_dbm"
  Proving monotonicity ...
### theory "Draft.DBM_Zone_Semantics"
### 0.520s elapsed time, 1.434s cpu time, 1.258s GC time
Loading theory "Draft.DBM_Zone_SemanticsMoreTemplates"
val templateLemmas =
   [("DBM_Zone_Semantics.And_correct",
     "[?M1.0]\<^bsub>?v,?n\<^esub> Int [?M2.0]\<^bsub>?v,?n\<^esub> =
      [And ?M1.0 ?M2.0]\<^bsub>?v,?n\<^esub>",
     template_equation
      (template_app
        (template_app
          (template_hole 2,
           template_app
            (template_app
              (template_app (template_hole 1, template_var 3),
               template_var 2),
             template_var 1)),
         template_app
          (template_app
            (template_app (template_hole 1, template_var 0),
             template_var 2),
           template_var 1)),
       template_app
        (template_app
          (template_app
            (template_hole 1,
             template_app
              (template_app (template_hole 0, template_var 3),
               template_var 0)),
           template_var 2),
         template_var 1))),
    ("DBM_Zone_Semantics.up_correct",
     "ALL c.
         0 < ?v c &
         (ALL x y. ?v x <= ?n & ?v y <= ?n & ?v x = ?v y --> x = y) ==>
      [up ?M]\<^bsub>?v,?n\<^esub> = [?M]\<^bsub>?v,?n\<^esub>\<^sup>\<up>",
     template_implication
      ([template_predicate (template_app (template_hole 11, t_empty))],
       template_equation
        (template_app
          (template_app
            (template_app
              (template_hole 2,
               template_app (template_hole 1, template_var 0)),
             template_var 2),
           template_var 1),
         template_app
          (template_hole 0,
           template_app
            (template_app
              (template_app (template_hole 2, template_var 0),
               template_var 2),
             template_var 1))))),
    ("DBM_Zone_Semantics.step_z_dbm_sound",
     "[| ?A \<turnstile> \<langle>?l, ?D\<rangle> \<leadsto>\<^bsub>?v,?n\<^esub> \<langle>?l', ?D'\<rangle>;
         (ALL c.
             0 < ?v c &
             (ALL x y. ?v x <= ?n & ?v y <= ?n & ?v x = ?v y --> x = y)) &
         (ALL c:clk_set ?A. ?v c <= ?n) &
         (ALL k<=?n. 0 < k --> (EX c. ?v c = k)) |]
      ==> ?A \<turnstile> \<langle>?l, [?D]\<^bsub>?v,?n\<^esub>\<rangle> \<leadsto> \<langle>?l', [?D']\<^bsub>?v,?n\<^esub>\<rangle>",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_app
                   (template_app
                     (template_app
                       (template_app (template_hole 19, template_var 6),
                        template_var 5),
                      template_var 4),
                    template_var 3),
                  template_var 2),
                template_var 1),
              template_var 0)
            ),
        template_predicate
         (
            template_app
             (template_app
               (template_hole 18, template_app (template_hole 17, t_empty)),
              template_app
               (template_app
                 (template_hole 18,
                  template_app
                   (template_app
                     (template_hole 10,
                      template_app
                       (template_app
                         (template_hole 9,
                          template_app
                           (template_app (template_hole 8, template_hole 7),
                            template_app
                             (template_hole 6, template_var 6))),
                        template_app
                         (template_hole 5,
                          template_app (template_hole 4, template_var 6)))),
                    t_empty)),
                template_app (template_hole 3, t_empty)))
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_app
                (template_app
                  (template_app (template_hole 1, template_var 6),
                   template_var 5),
                 template_app
                  (template_app
                    (template_app (template_hole 0, template_var 4),
                     template_var 3),
                   template_var 2)),
               template_var 1),
             template_app
              (template_app
                (template_app (template_hole 0, template_var 0),
                 template_var 3),
               template_var 2))
           ))),
    ("DBM_Zone_Semantics.step_z_computable",
     "[| ?A \<turnstile> \<langle>?l, [?D]\<^bsub>?v,?n\<^esub>\<rangle> \<leadsto> \<langle>?l', ?Z\<rangle>;
         (ALL c.
             0 < ?v c &
             (ALL x y. ?v x <= ?n & ?v y <= ?n & ?v x = ?v y --> x = y)) &
         (ALL c:clk_set ?A. ?v c <= ?n) &
         (ALL k<=?n. 0 < k --> (EX c. ?v c = k));
         !!D'. ?Z = [D']\<^bsub>?v,?n\<^esub> ==> ?thesis |]
      ==> ?thesis",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_app
                   (template_app (template_hole 20, template_var 7),
                    template_var 6),
                  template_app
                   (template_app
                     (template_app (template_hole 19, template_var 5),
                      template_var 4),
                    template_var 3)),
                template_var 2),
              template_var 1)
            ),
        template_predicate
         (
            template_app
             (template_app
               (template_hole 18, template_app (template_hole 17, t_empty)),
              template_app
               (template_app
                 (template_hole 18,
                  template_app
                   (template_app
                     (template_hole 10,
                      template_app
                       (template_app
                         (template_hole 9,
                          template_app
                           (template_app (template_hole 8, template_hole 7),
                            template_app
                             (template_hole 6, template_var 7))),
                        template_app
                         (template_hole 5,
                          template_app (template_hole 4, template_var 7)))),
                    t_empty)),
                template_app (template_hole 3, t_empty)))
            ),
        template_predicate (template_app (template_hole 1, t_empty))],
       template_predicate (template_var 0))),
    ("DBM_Zone_Semantics.steps_z_dbm_sound",
     "[| ?A \<turnstile> \<langle>?l, ?D\<rangle> \<leadsto>*\<^bsub>?v,?n\<^esub> \<langle>?l', ?D'\<rangle>;
         (ALL c.
             0 < ?v c &
             (ALL x y. ?v x <= ?n & ?v y <= ?n & ?v x = ?v y --> x = y)) &
         (ALL c:clk_set ?A. ?v c <= ?n) &
         (ALL k<=?n. 0 < k --> (EX c. ?v c = k));
         ?u' : [?D']\<^bsub>?v,?n\<^esub> |]
      ==> EX u:[?D]\<^bsub>?v,?n\<^esub>.
             ?A \<turnstile> \<langle>?l, u\<rangle> \<rightarrow>* \<langle>?l', ?u'\<rangle>",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_app
                   (template_app
                     (template_app
                       (template_app (template_hole 21, template_var 7),
                        template_var 6),
                      template_var 5),
                    template_var 4),
                  template_var 3),
                template_var 2),
              template_var 1)
            ),
        template_predicate
         (
            template_app
             (template_app
               (template_hole 20, template_app (template_hole 19, t_empty)),
              template_app
               (template_app
                 (template_hole 20,
                  template_app
                   (template_app
                     (template_hole 12,
                      template_app
                       (template_app
                         (template_hole 11,
                          template_app
                           (template_app
                             (template_hole 10, template_hole 9),
                            template_app
                             (template_hole 8, template_var 7))),
                        template_app
                         (template_hole 7,
                          template_app (template_hole 6, template_var 7)))),
                    t_empty)),
                template_app (template_hole 5, t_empty)))
            ),
        template_predicate
         (
            template_app
             (template_app (template_hole 3, template_var 0),
              template_app
               (template_app
                 (template_app (template_hole 2, template_var 1),
                  template_var 4),
                template_var 3))
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 1,
               template_app
                (template_app
                  (template_app (template_hole 2, template_var 5),
                   template_var 4),
                 template_var 3)),
             t_empty)
           ))),
    ("DBM_Zone_Semantics.steps_z_dbm_complete",
     "[| ?A \<turnstile> \<langle>?l, ?u\<rangle> \<rightarrow>* \<langle>?l', ?u'\<rangle>;
         (ALL c.
             0 < ?v c &
             (ALL x y. ?v x <= ?n & ?v y <= ?n & ?v x = ?v y --> x = y)) &
         (ALL c:clk_set ?A. ?v c <= ?n) &
         (ALL k<=?n. 0 < k --> (EX c. ?v c = k));
         ?u : [?D]\<^bsub>?v,?n\<^esub> |]
      ==> EX D'.
             ?A \<turnstile> \<langle>?l, ?D\<rangle> \<leadsto>*\<^bsub>?v,?n\<^esub> \<langle>?l', D'\<rangle> &
             ?u' : [D']\<^bsub>?v,?n\<^esub>",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_app
                   (template_app (template_hole 21, template_var 7),
                    template_var 6),
                  template_var 5),
                template_var 4),
              template_var 3)
            ),
        template_predicate
         (
            template_app
             (template_app
               (template_hole 20, template_app (template_hole 19, t_empty)),
              template_app
               (template_app
                 (template_hole 20,
                  template_app
                   (template_app
                     (template_hole 12,
                      template_app
                       (template_app
                         (template_hole 11,
                          template_app
                           (template_app
                             (template_hole 10, template_hole 9),
                            template_app
                             (template_hole 8, template_var 7))),
                        template_app
                         (template_hole 7,
                          template_app (template_hole 6, template_var 7)))),
                    t_empty)),
                template_app (template_hole 5, t_empty)))
            ),
        template_predicate
         (
            template_app
             (template_app (template_hole 3, template_var 5),
              template_app
               (template_app
                 (template_app (template_hole 2, template_var 0),
                  template_var 2),
                template_var 1))
            )],
       template_predicate (template_app (template_hole 1, t_empty)))),
    ("DBM_Zone_Semantics.step_z_dbm_complete",
     "[| (ALL c.
             0 < ?v c &
             (ALL x y. ?v x <= ?n & ?v y <= ?n & ?v x = ?v y --> x = y)) &
         (ALL c:clk_set ?A. ?v c <= ?n) &
         (ALL k<=?n. 0 < k --> (EX c. ?v c = k));
         ?A \<turnstile> \<langle>?l, ?u\<rangle> \<rightarrow> \<langle>?l',?u'\<rangle>;
         ?u : [?D]\<^bsub>?v,?n\<^esub> |]
      ==> EX D'.
             ?A \<turnstile> \<langle>?l, ?D\<rangle> \<leadsto>\<^bsub>?v,?n\<^esub> \<langle>?l', D'\<rangle> &
             ?u' : [D']\<^bsub>?v,?n\<^esub>",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_hole 21, template_app (template_hole 20, t_empty)),
              template_app
               (template_app
                 (template_hole 21,
                  template_app
                   (template_app
                     (template_hole 13,
                      template_app
                       (template_app
                         (template_hole 12,
                          template_app
                           (template_app
                             (template_hole 11, template_hole 10),
                            template_app
                             (template_hole 9, template_var 5))),
                        template_app
                         (template_hole 8,
                          template_app (template_hole 7, template_var 5)))),
                    t_empty)),
                template_app (template_hole 6, t_empty)))
            ),
        template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_app
                   (template_app (template_hole 4, template_var 5),
                    template_var 4),
                  template_var 3),
                template_var 2),
              template_var 1)
            ),
        template_predicate
         (
            template_app
             (template_app (template_hole 3, template_var 3),
              template_app
               (template_app
                 (template_app (template_hole 2, template_var 0),
                  template_var 7),
                template_var 6))
            )],
       template_predicate (template_app (template_hole 1, t_empty)))),
    ("DBM_Zone_Semantics.step_z_dbm_DBM",
     "[| ?A \<turnstile> \<langle>?l, [?D]\<^bsub>?v,?n\<^esub>\<rangle> \<leadsto> \<langle>?l', ?Z\<rangle>;
         (ALL c.
             0 < ?v c &
             (ALL x y. ?v x <= ?n & ?v y <= ?n & ?v x = ?v y --> x = y)) &
         (ALL c:clk_set ?A. ?v c <= ?n) &
         (ALL k<=?n. 0 < k --> (EX c. ?v c = k));
         !!D'. [| ?A \<turnstile> \<langle>?l, ?D\<rangle> \<leadsto>\<^bsub>?v,?n\<^esub> \<langle>?l', D'\<rangle>;
                  ?Z = [D']\<^bsub>?v,?n\<^esub> |]
               ==> ?thesis |]
      ==> ?thesis",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_app
                   (template_app (template_hole 21, template_var 7),
                    template_var 6),
                  template_app
                   (template_app
                     (template_app (template_hole 20, template_var 5),
                      template_var 4),
                    template_var 3)),
                template_var 2),
              template_var 1)
            ),
        template_predicate
         (
            template_app
             (template_app
               (template_hole 19, template_app (template_hole 18, t_empty)),
              template_app
               (template_app
                 (template_hole 19,
                  template_app
                   (template_app
                     (template_hole 11,
                      template_app
                       (template_app
                         (template_hole 10,
                          template_app
                           (template_app (template_hole 9, template_hole 8),
                            template_app
                             (template_hole 7, template_var 7))),
                        template_app
                         (template_hole 6,
                          template_app (template_hole 5, template_var 7)))),
                    t_empty)),
                template_app (template_hole 4, t_empty)))
            ),
        template_predicate (template_app (template_hole 2, t_empty))],
       template_predicate (template_var 0))),
    ("DBM_Zone_Semantics.step_z_cases",
     "[| ?A \<turnstile> \<langle>?l, ?D\<rangle> \<leadsto>\<^bsub>?v,?n\<^esub> \<langle>?l', ?D'\<rangle>;
         [| ?l' = ?l;
            ?D' =
            (%i j. min (up (%i j. min (?D i j)
                                   (abstr (inv_of ?A ?l) (%i j. \<infinity>)
                                     ?v i j))
                         i j)
                    (abstr (inv_of ?A ?l) (%i j. \<infinity>) ?v i j)) |]
         ==> ?P;
         !!g a r.
            [| ?D' =
               (%i j. min (reset'
                            (%i j. min (?D i j)
                                    (abstr g (%i j. \<infinity>) ?v i j))
                            ?n r ?v (0::?'c) i j)
                       (abstr (inv_of ?A ?l') (%i j. \<infinity>) ?v i j));
               ?A \<turnstile> ?l \<longrightarrow>\<^bsup>g,a,r\<^esup> ?l' |]
            ==> ?P |]
      ==> ?P",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_app
                   (template_app
                     (template_app
                       (template_app (template_hole 18, template_var 7),
                        template_var 6),
                      template_var 5),
                    template_var 4),
                  template_var 3),
                template_var 2),
              template_var 1)
            ),
        template_implication
         ([template_equation (template_var 2, template_var 6)],
          template_implication
           ([template_equation (template_var 1, t_empty)],
            template_predicate (template_var 0))),
        template_predicate (template_app (template_hole 10, t_empty))],
       template_predicate (template_var 0))),
    ("DBM_Zone_Semantics.step_z_dbm_preserves_int",
     "[| ?A \<turnstile> \<langle>?l, ?D\<rangle> \<leadsto>\<^bsub>?v,?n\<^esub> \<langle>?l', ?D'\<rangle>;
         (ALL c.
             0 < ?v c &
             (ALL x y. ?v x <= ?n & ?v y <= ?n & ?v x = ?v y --> x = y)) &
         (ALL c:clk_set ?A. ?v c <= ?n) &
         (ALL k<=?n. 0 < k --> (EX c. ?v c = k));
         valid_abstraction ?A ?X ?k; dbm_int ?D ?n |]
      ==> dbm_int ?D' ?n",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_app
                   (template_app
                     (template_app
                       (template_app (template_hole 24, template_var 8),
                        template_var 7),
                      template_var 6),
                    template_var 5),
                  template_var 4),
                template_var 3),
              template_var 2)
            ),
        template_predicate
         (
            template_app
             (template_app
               (template_hole 23, template_app (template_hole 22, t_empty)),
              template_app
               (template_app
                 (template_hole 23,
                  template_app
                   (template_app
                     (template_hole 15,
                      template_app
                       (template_app
                         (template_hole 14,
                          template_app
                           (template_app
                             (template_hole 13, template_hole 12),
                            template_app
                             (template_hole 11, template_var 8))),
                        template_app
                         (template_hole 10,
                          template_app (template_hole 9, template_var 8)))),
                    t_empty)),
                template_app (template_hole 8, t_empty)))
            ),
        template_predicate
         (
            template_app
             (template_app
               (template_app (template_hole 6, template_var 8),
                template_var 1),
              template_var 0)
            ),
        template_predicate (template_app (template_hole 8, t_empty))],
       template_predicate (template_app (template_hole 8, t_empty))))]:
   (string * thm * template) list
### theory "Draft.DBM_Zone_SemanticsMoreTemplates"
### 0.404s elapsed time, 0.615s cpu time, 0.038s GC time
val it = (): unit
