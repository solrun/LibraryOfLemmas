Loading theory "HOL-Library.Nat_Bijection" (required by "Draft.MiscMoreTemplates" via "Draft.ExtrEqs" via "HOL-Library.Stream")
Loading theory "HOL-Library.Tree" (required by "Draft.MiscMoreTemplates" via "Draft.ExtrEqs" via "Draft.Templates")
Loading theory "HOL-Library.Set_Algebras" (required by "Draft.MiscMoreTemplates" via "Draft.ExtrEqs" via "HOL-Library.BigO")
Loading theory "HOL-Library.Function_Algebras" (required by "Draft.MiscMoreTemplates" via "Draft.ExtrEqs" via "HOL-Library.BigO")
instantiation
  fun :: (type, plus) plus
  plus_fun == plus :: ('a => 'b) => ('a => 'b) => 'a => 'b
instantiation
  set :: (plus) plus
  plus_set == plus :: 'a set => 'a set => 'a set
instantiation
  set :: (times) times
  times_set == times :: 'a set => 'a set => 'a set
instantiation
  fun :: (type, zero) zero
  zero_fun == zero_class.zero :: 'a => 'b
instantiation
  fun :: (type, times) times
  times_fun == times :: ('a => 'b) => ('a => 'b) => 'a => 'b
instantiation
  set :: (zero) zero
  zero_set == zero_class.zero :: 'a set
instantiation
  set :: (one) one
  one_set == one_class.one :: 'a set
instantiation
  fun :: (type, one) one
  one_fun == one_class.one :: 'a => 'b
Found termination order: "(%p. size (snd p)) <*mlex*> {}"
### theory "HOL-Library.Function_Algebras"
### 0.157s elapsed time, 0.649s cpu time, 0.044s GC time
Loading theory "Draft.Misc" (required by "Draft.MiscMoreTemplates")
Found termination order: "size_list size <*mlex*> {}"
### theory "HOL-Library.Set_Algebras"
### 0.238s elapsed time, 0.970s cpu time, 0.044s GC time
Loading theory "HOL-Library.BigO" (required by "Draft.MiscMoreTemplates" via "Draft.ExtrEqs")
### theory "HOL-Library.Nat_Bijection"
### 0.333s elapsed time, 1.342s cpu time, 0.132s GC time
Loading theory "HOL-Library.Stream" (required by "Draft.MiscMoreTemplates" via "Draft.ExtrEqs")
locale enumerateable
  fixes T :: "'a set"
    and less :: "'a => 'a => bool"  (infix \<open>\<prec>\<close> 50)
  assumes "enumerateable T (\<prec>)"
Found termination order: "(%p. size (snd p)) <*mlex*> {}"
Proofs for inductive predicate(s) "sorted"
  Proving monotonicity ...
consts
  left :: "'a tree => 'a tree"
consts
  right :: "'a tree => 'a tree"
### theory "Draft.Misc"
### 0.386s elapsed time, 1.528s cpu time, 0.163s GC time
Found termination order: "size <*mlex*> {}"
Found termination order: "size <*mlex*> {}"
Found termination order: "size <*mlex*> {}"
consts
  shift :: "'a list => 'a stream => 'a stream"
Proofs for coinductive predicate(s) "streamsp"
  Proving monotonicity ...
class height = type +
  fixes height :: "'a => nat"
instantiation
  tree :: (type) height
  height_tree == height :: 'a tree => nat
Found termination order: "size <*mlex*> {}"
consts
  snth :: "'a stream => nat => 'a"
consts
  stake :: "nat => 'a stream => 'a list"
consts
  sdrop :: "nat => 'a stream => 'a stream"
Found termination order: "size <*mlex*> {}"
consts
  sfilter :: "('a => bool) => 'a stream => 'a stream"
consts
  cycle :: "'a list => 'a stream"
Found termination order: "size <*mlex*> {}"
consts
  siterate :: "('a => 'a) => 'a => 'a stream"
Found termination order: "size <*mlex*> {}"
consts
  flat :: "'a list stream => 'a stream"
### theory "HOL-Library.BigO"
### 0.968s elapsed time, 3.267s cpu time, 0.952s GC time
Found termination order: "size <*mlex*> {}"
consts
  sinterleave :: "'a stream => 'a stream => 'a stream"
consts
  szip :: "'a stream => 'b stream => ('a * 'b) stream"
consts
  smap2 :: "('a => 'b => 'c) => 'a stream => 'b stream => 'c stream"
Found termination order: "size <*mlex*> {}"
### theory "HOL-Library.Stream"
### 1.023s elapsed time, 3.229s cpu time, 0.912s GC time
Found termination order: "size <*mlex*> {}"
Found termination order: "(%p. size (fst p)) <*mlex*> {}"
Found termination order: "size <*mlex*> {}"
Found termination order: "(%p. size (snd p)) <*mlex*> {}"
Found termination order: "size <*mlex*> {}"
### theory "HOL-Library.Tree"
### 1.910s elapsed time, 5.195s cpu time, 1.103s GC time
Loading theory "Draft.Templates" (required by "Draft.MiscMoreTemplates" via "Draft.ExtrEqs")
datatype template_term
=
     t_empty
   | template_app of template_term * template_term
   | template_hole of int
   | template_var of int
datatype sign
= equals | greater_equals | greater_than | less_equals | less_than
datatype template
=
     template_bimplication of template * template
   | template_dunno
   | template_equation of template_term * template_term
   | template_implication of template list * template
   | template_inequation of sign * template_term * template_term
   | template_negation of template
   | template_predicate of template_term
constructor t_empty: template_term
constructor template_app: template_term * template_term -> template_term
constructor template_hole: int -> template_term
constructor template_var: int -> template_term
constructor equals: sign
constructor greater_equals: sign
constructor greater_than: sign
constructor less_equals: sign
constructor less_than: sign
constructor template_bimplication: template * template -> template
constructor template_dunno: template
constructor template_equation: template_term * template_term -> template
constructor template_implication: template list * template -> template
constructor template_inequation:
   sign * template_term * template_term -> template
constructor template_negation: template -> template
constructor template_predicate: template_term -> template
val vfs = fn: term -> (indexname * typ) list * (string * typ) list
val indexOf = fn: ''a list -> ''a -> int -> int
val has_eq = fn: term -> bool
val term2template = fn:
   (indexname * typ) list -> (string * typ) list -> term -> template_term
val lemma2predicate = fn: term -> term -> template
val makeTemplatewithContext = fn: term -> term -> template
val lemma2template = fn: term -> template
val thm2template = fn: thm -> template
val tterm2string = fn: template_term -> string
val template2string = fn: template -> string
val t = "height ?t <= size ?t": thm
val th =
   Const ("HOL.Trueprop", "bool => prop") $
     (Const ("Orderings.ord_class.less_eq", "nat => nat => bool") $
       (Const ("Tree.height_class.height", "?'a tree => nat") $
         Var (("t", 0), "?'a tree")) $
       (Const ("Nat.size_class.size", "?'a tree => nat") $
         Var (("t", 0), "?'a tree"))):
   term
### theory "Draft.Templates"
### 0.048s elapsed time, 0.064s cpu time, 0.000s GC time
Loading theory "Draft.ExtrEqs" (required by "Draft.MiscMoreTemplates")
val eqpattern =
   Pattern
    (
       Const ("HOL.Trueprop", "bool => prop") $
         (Const ("HOL.eq", "?'a => ?'a => bool") $
           Var (("_dummy_", 1), "?'a") $ Var (("_dummy_", 2), "?'a"))
       ):
   term Find_Theorems.criterion
val badeqpattern = Pattern (Const ("Pure.eq", "?'a => ?'a => prop")):
   term Find_Theorems.criterion
val undefpattern =
   Pattern
    (
       Const ("HOL.Trueprop", "bool => prop") $
         (Const ("HOL.eq", "?'a => ?'a => bool") $
           Var (("_dummy_", 1), "?'a") $ Const ("HOL.undefined", "?'a"))
       ):
   term Find_Theorems.criterion
val thmpattern =
   Pattern
    (Const ("HOL.Trueprop", "bool => prop") $ Var (("_dummy_", 1), "bool")):
   term Find_Theorems.criterion
val badnames =
   ["*nitpick*", "*Nitpick*", "*full_exhaustive*", "*_def*", "Enum.finite*",
    "*Quickcheck*", "ATP*", "*Nunchaku*", "*Code*", "*BNF*", "*SMT*",
    "*.*.*"]:
   string list
val unwanted_names =
   [(false, Name "*nitpick*"), (false, Name "*Nitpick*"),
    (false, Name "*full_exhaustive*"), (false, Name "*_def*"),
    (false, Name "Enum.finite*"), (false, Name "*Quickcheck*"),
    (false, Name "ATP*"), (false, Name "*Nunchaku*"),
    (false, Name "*Code*"), (false, Name "*BNF*"), (false, Name "*SMT*"),
    (false, Name "*.*.*")]:
   (bool * term Find_Theorems.criterion) list
val has_vars = fn: term -> bool
val get_all_eqs = fn: string -> Proof.context -> (string * thm) list
val get_all_thms = fn: string -> Proof.context -> (string * thm) list
val get_noneq_thms = fn: string -> Proof.context -> (string * thm) list
val template_eqs = fn:
   string -> Proof.context -> (string * thm * template) list
val template_thms = fn:
   string -> Proof.context -> (string * thm * template) list
### theory "Draft.ExtrEqs"
### 0.471s elapsed time, 0.519s cpu time, 0.057s GC time
Loading theory "Draft.MiscMoreTemplates"
val templateLemmas =
   [("Misc.frac_idempotent", "frac (frac ?x) = frac ?x",
     template_equation
      (template_app
        (template_hole 0, template_app (template_hole 0, template_var 0)),
       template_app (template_hole 0, template_var 0))),
    ("Misc.frac_nat_add_id", "frac (real ?n + ?r) = frac ?r",
     template_equation
      (template_app
        (template_hole 2,
         template_app
          (template_app
            (template_hole 1,
             template_app (template_hole 0, template_var 1)),
           template_var 0)),
       template_app (template_hole 2, template_var 0))),
    ("Misc.nat_not_ge_1D", "~ Suc 0 <= ?x ==> ?x = 0",
     template_implication
      ([template_negation
         (
            template_inequation
             (less_equals, template_app (template_hole 2, template_hole 1),
              template_var 0)
            )],
       template_equation (template_var 0, template_hole 1))),
    ("Misc.lt_lt_1_ccontr", "[| ?a < ?b; ?b < ?a + 1 |] ==> False",
     template_implication
      ([template_inequation (less_than, template_var 1, template_var 0),
        template_inequation
         (less_than, template_var 0,
          template_app
           (template_app (template_hole 2, template_var 1),
            template_hole 1))],
       template_predicate (template_hole 0))),
    ("Misc.zip_range_id",
     "length ?A = length ?B ==> snd ` set (zip ?A ?B) = set ?B",
     template_implication
      ([template_equation
         (template_app (template_hole 7, template_var 1),
          template_app (template_hole 6, template_var 0))],
       template_equation
        (template_app
          (template_app (template_hole 4, template_hole 3),
           template_app
            (template_hole 2,
             template_app
              (template_app (template_hole 1, template_var 1),
               template_var 0))),
         template_app (template_hole 0, template_var 0)))),
    ("Misc.upt_last_append",
     "?a <= ?b ==> [?a..<?b] @ [?b] = [?a..<Suc ?b]",
     template_implication
      ([template_inequation (less_equals, template_var 1, template_var 0)],
       template_equation
        (template_app
          (template_app
            (template_hole 4,
             template_app
              (template_app (template_hole 3, template_var 1),
               template_var 0)),
           template_app
            (template_app (template_hole 2, template_var 0),
             template_hole 1)),
         template_app
          (template_app (template_hole 3, template_var 1),
           template_app (template_hole 0, template_var 0))))),
    ("Misc.int_intv_frac_gt0",
     "[| ?a < ?b; ?b < ?a + 1 |] ==> 0 < frac (real_of_int ?b)",
     template_implication
      ([template_inequation (less_than, template_var 1, template_var 0),
        template_inequation
         (less_than, template_var 0,
          template_app
           (template_app (template_hole 5, template_var 1),
            template_hole 4))],
       template_inequation
        (less_than, template_hole 2,
         template_app
          (template_hole 1,
           template_app (template_hole 0, template_var 0))))),
    ("Misc.floor_nat_add_id",
     "[| 0 <= ?r; ?r < 1 |] ==> \<lfloor>real ?n + ?r\<rfloor> = int ?n",
     template_implication
      ([template_inequation (less_equals, template_hole 7, template_var 1),
        template_inequation (less_than, template_var 1, template_hole 5)],
       template_equation
        (template_app
          (template_hole 3,
           template_app
            (template_app
              (template_hole 2,
               template_app (template_hole 1, template_var 0)),
             template_var 1)),
         template_app (template_hole 0, template_var 0)))),
    ("Misc.nat_intv_not_int",
     "[| real ?c < ?d; ?d < real (?c + 1) |] ==> ?d ~: \<int>",
     template_implication
      ([template_inequation
         (less_than, template_app (template_hole 5, template_var 1),
          template_var 0),
        template_inequation
         (less_than, template_var 0,
          template_app
           (template_hole 5,
            template_app
             (template_app (template_hole 4, template_var 1),
              template_hole 3)))],
       template_negation
        (
           template_predicate
            (
               template_app
                (template_app (template_hole 1, template_var 0),
                 template_hole 0)
               )
           ))),
    ("Misc.nat_intv_frac_gt0",
     "[| real ?c < ?x; ?x < real (?c + 1) |] ==> 0 < frac ?x",
     template_implication
      ([template_inequation
         (less_than, template_app (template_hole 4, template_var 1),
          template_var 0),
        template_inequation
         (less_than, template_var 0,
          template_app
           (template_hole 4,
            template_app
             (template_app (template_hole 3, template_var 1),
              template_hole 2)))],
       template_inequation
        (less_than, template_hole 1,
         template_app (template_hole 0, template_var 0)))),
    ("Misc.frac_distr",
     "[| 0 < ?d; ?d < 1 - frac ?a |] ==> 0 < frac (?a + ?d)",
     template_implication
      ([template_inequation (less_than, template_hole 4, template_var 1),
        template_inequation
         (less_than, template_var 1,
          template_app
           (template_app (template_hole 3, template_hole 2),
            template_app (template_hole 1, template_var 0)))],
       template_inequation
        (less_than, template_hole 4,
         template_app
          (template_hole 1,
           template_app
            (template_app (template_hole 0, template_var 0),
             template_var 1))))),
    ("Misc.map_of_zip_distinct_inj",
     "[| distinct ?B; length ?A = length ?B |]
      ==> inj_on (the o map_of (zip ?A ?B)) (set ?A)",
     template_implication
      ([template_predicate (template_app (template_hole 9, template_var 1)),
        template_equation
         (template_app (template_hole 7, template_var 0),
          template_app (template_hole 6, template_var 1))],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 5,
               template_app
                (template_app (template_hole 4, template_hole 3),
                 template_app
                  (template_hole 2,
                   template_app
                    (template_app (template_hole 1, template_var 0),
                     template_var 1)))),
             template_app (template_hole 0, template_var 0))
           ))),
    ("Misc.floor_frac_add_preservation",
     "[| 0 < ?d; ?d < 1 - frac ?a |]
      ==> \<lfloor>?a\<rfloor> = \<lfloor>?a + ?d\<rfloor>",
     template_implication
      ([template_inequation (less_than, template_hole 6, template_var 1),
        template_inequation
         (less_than, template_var 1,
          template_app
           (template_app (template_hole 5, template_hole 4),
            template_app (template_hole 3, template_var 0)))],
       template_equation
        (template_app (template_hole 1, template_var 0),
         template_app
          (template_hole 1,
           template_app
            (template_app (template_hole 0, template_var 0),
             template_var 1))))),
    ("Misc.floor_frac_add_preservation'",
     "[| 0 <= ?d; ?d < 1 - frac ?a |]
      ==> \<lfloor>?a\<rfloor> = \<lfloor>?a + ?d\<rfloor>",
     template_implication
      ([template_inequation (less_equals, template_hole 7, template_var 1),
        template_inequation
         (less_than, template_var 1,
          template_app
           (template_app (template_hole 5, template_hole 4),
            template_app (template_hole 3, template_var 0)))],
       template_equation
        (template_app (template_hole 1, template_var 0),
         template_app
          (template_hole 1,
           template_app
            (template_app (template_hole 0, template_var 0),
             template_var 1))))),
    ("Misc.frac_add_le_preservation",
     "[| ?a < real ?b; ?d < 1 - frac ?a |] ==> ?a + ?d < real ?b",
     template_implication
      ([template_inequation
         (less_than, template_var 2,
          template_app (template_hole 4, template_var 1)),
        template_inequation
         (less_than, template_var 0,
          template_app
           (template_app (template_hole 3, template_hole 2),
            template_app (template_hole 1, template_var 2)))],
       template_inequation
        (less_than,
         template_app
          (template_app (template_hole 0, template_var 2), template_var 0),
         template_app (template_hole 4, template_var 1)))),
    ("Misc.int_lt_Suc_le",
     "[| ?a : \<int>; ?b : \<int>; ?a < ?b + 1 |] ==> ?a <= ?b",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 5, template_var 1),
              template_hole 4)
            ),
        template_predicate
         (
            template_app
             (template_app (template_hole 5, template_var 0),
              template_hole 4)
            ),
        template_inequation
         (less_than, template_var 1,
          template_app
           (template_app (template_hole 2, template_var 0),
            template_hole 1))],
       template_inequation (less_equals, template_var 1, template_var 0))),
    ("Misc.nat_intv_frac_decomp",
     "[| real ?c < ?d; ?d < real (?c + 1) |] ==> ?d = real ?c + frac ?d",
     template_implication
      ([template_inequation
         (less_than, template_app (template_hole 5, template_var 1),
          template_var 0),
        template_inequation
         (less_than, template_var 0,
          template_app
           (template_hole 5,
            template_app
             (template_app (template_hole 4, template_var 1),
              template_hole 3)))],
       template_equation
        (template_var 0,
         template_app
          (template_app
            (template_hole 1,
             template_app (template_hole 5, template_var 1)),
           template_app (template_hole 0, template_var 0))))),
    ("Misc.finite_ex_and1",
     "finite {b. EX a. ?P a b} ==> finite {b. EX a. ?P a b & ?Q a b}",
     template_implication
      ([template_predicate
         (
            template_app
             (template_hole 3, template_app (template_hole 2, t_empty))
            )],
       template_predicate
        (
           template_app
            (template_hole 3, template_app (template_hole 2, t_empty))
           ))),
    ("Misc.finite_ex_and2",
     "finite {b. EX a. ?Q a b} ==> finite {b. EX a. ?P a b & ?Q a b}",
     template_implication
      ([template_predicate
         (
            template_app
             (template_hole 3, template_app (template_hole 2, t_empty))
            )],
       template_predicate
        (
           template_app
            (template_hole 3, template_app (template_hole 2, t_empty))
           ))),
    ("Misc.frac_distr",
     "[| 0 < ?d; ?d < 1 - frac ?a |] ==> frac ?a + ?d = frac (?a + ?d)",
     template_implication
      ([template_inequation (less_than, template_hole 5, template_var 1),
        template_inequation
         (less_than, template_var 1,
          template_app
           (template_app (template_hole 4, template_hole 3),
            template_app (template_hole 2, template_var 0)))],
       template_equation
        (template_app
          (template_app
            (template_hole 0,
             template_app (template_hole 2, template_var 0)),
           template_var 1),
         template_app
          (template_hole 2,
           template_app
            (template_app (template_hole 0, template_var 0),
             template_var 1))))),
    ("Misc.map_of_zip_dom_to_range",
     "[| ?a : set ?A; length ?B = length ?A |]
      ==> the (map_of (zip ?A ?B) ?a) : set ?B",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 9, template_var 2),
              template_app (template_hole 8, template_var 1))
            ),
        template_equation
         (template_app (template_hole 6, template_var 0),
          template_app (template_hole 5, template_var 1))],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 4,
               template_app
                (template_hole 3,
                 template_app
                  (template_app
                    (template_hole 2,
                     template_app
                      (template_app (template_hole 1, template_var 1),
                       template_var 0)),
                   template_var 2))),
             template_app (template_hole 0, template_var 0))
           ))),
    ("Misc.int_intv_frac_gt_0'",
     "[| ?a : \<int>; ?b : \<int>; ?a <= ?b; ?a ~= ?b |] ==> ?a <= ?b - 1",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 6, template_var 1),
              template_hole 5)
            ),
        template_predicate
         (
            template_app
             (template_app (template_hole 6, template_var 0),
              template_hole 5)
            ),
        template_inequation (less_equals, template_var 1, template_var 0),
        template_negation
         (template_equation (template_var 1, template_var 0))],
       template_inequation
        (less_equals, template_var 1,
         template_app
          (template_app (template_hole 1, template_var 0),
           template_hole 0)))),
    ("Misc.int_lt_neq_prev_lt",
     "[| ?a : \<int>; ?b : \<int>; ?a - 1 < ?b; ?a ~= ?b |] ==> ?a < ?b",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 6, template_var 1),
              template_hole 5)
            ),
        template_predicate
         (
            template_app
             (template_app (template_hole 6, template_var 0),
              template_hole 5)
            ),
        template_inequation
         (less_than,
          template_app
           (template_app (template_hole 3, template_var 1),
            template_hole 2),
          template_var 0),
        template_negation
         (template_equation (template_var 1, template_var 0))],
       template_inequation (less_than, template_var 1, template_var 0))),
    ("Misc.distinct_zip_inj",
     "[| distinct ?ys; (?a, ?b) : set (zip ?xs ?ys);
         (?c, ?b) : set (zip ?xs ?ys) |]
      ==> ?a = ?c",
     template_implication
      ([template_predicate (template_app (template_hole 5, template_var 4)),
        template_predicate
         (
            template_app
             (template_app
               (template_hole 4,
                template_app
                 (template_app (template_hole 3, template_var 3),
                  template_var 2)),
              template_app
               (template_hole 2,
                template_app
                 (template_app (template_hole 1, template_var 1),
                  template_var 4)))
            ),
        template_predicate
         (
            template_app
             (template_app
               (template_hole 4,
                template_app
                 (template_app (template_hole 3, template_var 0),
                  template_var 2)),
              template_app
               (template_hole 2,
                template_app
                 (template_app (template_hole 1, template_var 1),
                  template_var 4)))
            )],
       template_equation (template_var 3, template_var 0))),
    ("Misc.pairwise_finiteI",
     "[| finite {b. EX a. ?P a b}; finite {a. EX b. ?P a b} |]
      ==> finite {(a, b). ?P a b}",
     template_implication
      ([template_predicate
         (
            template_app
             (template_hole 8, template_app (template_hole 7, t_empty))
            ),
        template_predicate
         (
            template_app
             (template_hole 5, template_app (template_hole 4, t_empty))
            )],
       template_predicate
        (
           template_app
            (template_hole 2,
             template_app
              (template_hole 1, template_app (template_hole 0, t_empty)))
           ))),
    ("Misc.int_lt_neq_Suc_lt",
     "[| ?a : \<int>; ?b : \<int>; ?a < ?b; ?a + 1 ~= ?b |]
      ==> ?a + 1 < ?b",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 6, template_var 1),
              template_hole 5)
            ),
        template_predicate
         (
            template_app
             (template_app (template_hole 6, template_var 0),
              template_hole 5)
            ),
        template_inequation (less_than, template_var 1, template_var 0),
        template_negation
         (
            template_equation
             (template_app
               (template_app (template_hole 1, template_var 1),
                template_hole 0),
              template_var 0)
            )],
       template_inequation
        (less_than,
         template_app
          (template_app (template_hole 1, template_var 1), template_hole 0),
         template_var 0))),
    ("Misc.distinct_twice_contradiction",
     "[| ?xs ! ?i = ?x; ?xs ! ?j = ?x; ?i < ?j; ?j < length ?xs |]
      ==> ~ distinct ?xs",
     template_implication
      ([template_equation
         (template_app
           (template_app (template_hole 4, template_var 3), template_var 2),
          template_var 1),
        template_equation
         (template_app
           (template_app (template_hole 4, template_var 3), template_var 0),
          template_var 1),
        template_inequation (less_than, template_var 2, template_var 0),
        template_inequation
         (less_than, template_var 0,
          template_app (template_hole 2, template_var 3))],
       template_negation
        (
           template_predicate
            (template_app (template_hole 0, template_var 3))
           ))),
    ("Misc.distinct_nth_unique",
     "[| ?xs ! ?i = ?xs ! ?j; ?i < length ?xs; ?j < length ?xs;
         distinct ?xs |]
      ==> ?i = ?j",
     template_implication
      ([template_equation
         (template_app
           (template_app (template_hole 4, template_var 2), template_var 1),
          template_app
           (template_app (template_hole 4, template_var 2),
            template_var 0)),
        template_inequation
         (less_than, template_var 1,
          template_app (template_hole 2, template_var 2)),
        template_inequation
         (less_than, template_var 0,
          template_app (template_hole 2, template_var 2)),
        template_predicate
         (template_app (template_hole 1, template_var 2))],
       template_equation (template_var 1, template_var 0))),
    ("Misc.map_of_zip_in_range",
     "[| distinct ?A; length ?B = length ?A; ?b : set ?B |]
      ==> EX a:set ?A. the (map_of (zip ?A ?B) a) = ?b",
     template_implication
      ([template_predicate
         (template_app (template_hole 11, template_var 2)),
        template_equation
         (template_app (template_hole 9, template_var 1),
          template_app (template_hole 8, template_var 2)),
        template_predicate
         (
            template_app
             (template_app (template_hole 7, template_var 0),
              template_app (template_hole 6, template_var 1))
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 5,
               template_app (template_hole 4, template_var 2)),
             t_empty)
           ))),
    ("Misc.ints_le_add_frac1",
     "[| 0 < ?x; ?x < 1; ?a : \<int>; ?b : \<int>; ?a + ?x <= ?b |]
      ==> ?a <= ?b",
     template_implication
      ([template_inequation (less_than, template_hole 5, template_var 2),
        template_inequation (less_than, template_var 2, template_hole 4),
        template_predicate
         (
            template_app
             (template_app (template_hole 3, template_var 1),
              template_hole 2)
            ),
        template_predicate
         (
            template_app
             (template_app (template_hole 3, template_var 0),
              template_hole 2)
            ),
        template_inequation
         (less_equals,
          template_app
           (template_app (template_hole 0, template_var 1), template_var 2),
          template_var 0)],
       template_inequation (less_equals, template_var 1, template_var 0))),
    ("Misc.ints_le_add_frac2",
     "[| 0 <= ?x; ?x < 1; ?a : \<int>; ?b : \<int>; ?b <= ?a + ?x |]
      ==> ?b <= ?a",
     template_implication
      ([template_inequation (less_equals, template_hole 5, template_var 2),
        template_inequation (less_than, template_var 2, template_hole 3),
        template_predicate
         (
            template_app
             (template_app (template_hole 2, template_var 1),
              template_hole 1)
            ),
        template_predicate
         (
            template_app
             (template_app (template_hole 2, template_var 0),
              template_hole 1)
            ),
        template_inequation
         (less_equals, template_var 0,
          template_app
           (template_app (template_hole 0, template_var 1),
            template_var 2))],
       template_inequation (less_equals, template_var 0, template_var 1))),
    ("Misc.frac_add_leIFF",
     "[| 0 <= ?d; ?d < 1 - frac ?a; ?d < 1 - frac ?b |]
      ==> (frac ?a <= frac ?b) = (frac (?a + ?d) <= frac (?b + ?d))",
     template_implication
      ([template_inequation (less_equals, template_hole 6, template_var 2),
        template_inequation
         (less_than, template_var 2,
          template_app
           (template_app (template_hole 4, template_hole 3),
            template_app (template_hole 2, template_var 1))),
        template_inequation
         (less_than, template_var 2,
          template_app
           (template_app (template_hole 4, template_hole 3),
            template_app (template_hole 2, template_var 0)))],
       template_equation
        (template_app
          (template_app
            (template_hole 7,
             template_app (template_hole 2, template_var 1)),
           template_app (template_hole 2, template_var 0)),
         template_app
          (template_app
            (template_hole 7,
             template_app
              (template_hole 2,
               template_app
                (template_app (template_hole 0, template_var 1),
                 template_var 2))),
           template_app
            (template_hole 2,
             template_app
              (template_app (template_hole 0, template_var 0),
               template_var 2)))))),
    ("Misc.frac_add_leD",
     "[| 0 < ?d; ?d < 1 - frac ?a; ?d < 1 - frac ?b;
         frac (?a + ?d) <= frac (?b + ?d) |]
      ==> frac ?a <= frac ?b",
     template_implication
      ([template_inequation (less_than, template_hole 5, template_var 2),
        template_inequation
         (less_than, template_var 2,
          template_app
           (template_app (template_hole 4, template_hole 3),
            template_app (template_hole 2, template_var 1))),
        template_inequation
         (less_than, template_var 2,
          template_app
           (template_app (template_hole 4, template_hole 3),
            template_app (template_hole 2, template_var 0))),
        template_inequation
         (less_equals,
          template_app
           (template_hole 2,
            template_app
             (template_app (template_hole 0, template_var 1),
              template_var 2)),
          template_app
           (template_hole 2,
            template_app
             (template_app (template_hole 0, template_var 0),
              template_var 2)))],
       template_inequation
        (less_equals, template_app (template_hole 2, template_var 1),
         template_app (template_hole 2, template_var 0)))),
    ("Misc.standard_numbering",
     "[| finite ?A;
         !!v n.
            [| bij_betw v ?A {1..n}; ALL c:?A. 0 < v c;
               ALL c. c ~: ?A --> n < v c |]
            ==> ?thesis |]
      ==> ?thesis",
     template_implication
      ([template_predicate
         (template_app (template_hole 12, template_var 1)),
        template_predicate (template_app (template_hole 11, t_empty))],
       template_predicate (template_var 0))),
    ("Misc.finite_total_preorder_enumeration",
     "[| finite ?X; total_on ?X ?r; refl_on ?X ?r; trans ?r;
         !!f. ALL x:?X. ALL y:?X. (f x <= f y) = ((x, y) : ?r) ==>
              ?thesis |]
      ==> ?thesis",
     template_implication
      ([template_predicate (template_app (template_hole 9, template_var 2)),
        template_predicate
         (
            template_app
             (template_app (template_hole 8, template_var 2),
              template_var 1)
            ),
        template_predicate
         (
            template_app
             (template_app (template_hole 7, template_var 2),
              template_var 1)
            ),
        template_predicate (template_app (template_hole 6, template_var 1)),
        template_predicate (template_app (template_hole 5, t_empty))],
       template_predicate (template_var 0))),
    ("Misc.finite_set_of_finite_funs2",
     "[| finite ?A; finite ?B; finite ?C |]
      ==> finite
           {f. ALL x y.
                  (x : ?A & y : ?B --> f x y : ?C) &
                  (x ~: ?A --> f x y = ?d) & (y ~: ?B --> f x y = ?d)}",
     template_implication
      ([template_predicate
         (template_app (template_hole 13, template_var 3)),
        template_predicate
         (template_app (template_hole 12, template_var 2)),
        template_predicate
         (template_app (template_hole 11, template_var 1))],
       template_predicate
        (
           template_app
            (template_hole 10, template_app (template_hole 9, t_empty))
           )))]:
   (string * thm * template) list
### theory "Draft.MiscMoreTemplates"
### 0.281s elapsed time, 0.379s cpu time, 0.000s GC time
val it = (): unit
