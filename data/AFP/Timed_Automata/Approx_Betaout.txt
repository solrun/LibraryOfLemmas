Loading theory "Draft.Timed_Automata" (required by "Draft.Approx_BetaMoreTemplates" via "Draft.Approx_Beta" via "Draft.DBM_Zone_Semantics" via "Draft.DBM_Operations" via "Draft.DBM_Basics" via "Draft.DBM")
Loading theory "Draft.Floyd_Warshall" (required by "Draft.Approx_BetaMoreTemplates" via "Draft.Approx_Beta" via "Draft.DBM_Zone_Semantics" via "Draft.DBM_Operations" via "Draft.DBM_Basics" via "Draft.DBM")
Loading theory "HOL-Library.Function_Algebras" (required by "Draft.Approx_BetaMoreTemplates" via "Draft.ExtrEqs" via "HOL-Library.BigO")
Loading theory "HOL-Library.Nat_Bijection" (required by "Draft.Approx_BetaMoreTemplates" via "Draft.ExtrEqs" via "HOL-Library.Stream")
instantiation
  fun :: (type, plus) plus
  plus_fun == plus :: ('a => 'b) => ('a => 'b) => 'a => 'b
instantiation
  fun :: (type, zero) zero
  zero_fun == zero_class.zero :: 'a => 'b
instantiation
  fun :: (type, times) times
  times_fun == times :: ('a => 'b) => ('a => 'b) => 'a => 'b
instantiation
  fun :: (type, one) one
  one_fun == one_class.one :: 'a => 'b
Found termination order: "(%p. size (snd p)) <*mlex*> {}"
### theory "HOL-Library.Function_Algebras"
### 0.152s elapsed time, 0.625s cpu time, 0.045s GC time
Loading theory "HOL-Library.Set_Algebras" (required by "Draft.Approx_BetaMoreTemplates" via "Draft.ExtrEqs" via "HOL-Library.BigO")
Found termination order: "(%p. length (fst p)) <*mlex*> {}"
instantiation
  set :: (plus) plus
  plus_set == plus :: 'a set => 'a set => 'a set
instantiation
  set :: (times) times
  times_set == times :: 'a set => 'a set => 'a set
instantiation
  set :: (zero) zero
  zero_set == zero_class.zero :: 'a set
instantiation
  set :: (one) one
  one_set == one_class.one :: 'a set
Found termination order: "size_list size <*mlex*> {}"
Found termination order: "(%p. length (fst p)) <*mlex*> {}"
### theory "HOL-Library.Nat_Bijection"
### 0.341s elapsed time, 1.371s cpu time, 0.107s GC time
Loading theory "HOL-Library.Stream" (required by "Draft.Approx_BetaMoreTemplates" via "Draft.ExtrEqs")
### theory "HOL-Library.Set_Algebras"
### 0.197s elapsed time, 0.772s cpu time, 0.061s GC time
Loading theory "HOL-Library.Tree" (required by "Draft.Approx_BetaMoreTemplates" via "Draft.ExtrEqs" via "Draft.Templates")
Found termination order: "(%p. length (fst p)) <*mlex*> {}"
class time = linordered_ab_group_add +
  assumes "dense": "!!x y. x < y ==> EX z>x. z < y"
  assumes "non_trivial": "EX x. x ~= (0::'a)"
class linordered_ab_monoid_add = linordered_ab_semigroup_add +
  fixes neutral :: "'a"
  assumes "neutl": "!!x. \<one> + x = x"
  assumes "neutr": "!!x. x + \<one> = x"
consts
  shift :: "'a list => 'a stream => 'a stream"
Proofs for coinductive predicate(s) "streamsp"
  Proving monotonicity ...
consts
  snth :: "'a stream => nat => 'a"
consts
  stake :: "nat => 'a stream => 'a list"
consts
  sdrop :: "nat => 'a stream => 'a stream"
consts
  left :: "'a tree => 'a tree"
consts
  right :: "'a tree => 'a tree"
consts
  sfilter :: "('a => bool) => 'a stream => 'a stream"
Found termination order: "size <*mlex*> {}"
consts
  cycle :: "'a list => 'a stream"
Found termination order: "size <*mlex*> {}"
consts
  siterate :: "('a => 'a) => 'a => 'a stream"
consts
  flat :: "'a list stream => 'a stream"
Found termination order: "size <*mlex*> {}"
class height = type +
  fixes height :: "'a => nat"
instantiation
  tree :: (type) height
  height_tree == height :: 'a tree => nat
consts
  sinterleave :: "'a stream => 'a stream => 'a stream"
consts
  szip :: "'a stream => 'b stream => ('a * 'b) stream"
consts
  smap2 :: "('a => 'b => 'c) => 'a stream => 'b stream => 'c stream"
Found termination order: "size <*mlex*> {}"
### theory "HOL-Library.Stream"
### 1.094s elapsed time, 4.150s cpu time, 0.863s GC time
Loading theory "Draft.Misc" (required by "Draft.Approx_BetaMoreTemplates" via "Draft.Approx_Beta" via "Draft.Regions_Beta")
Found termination order: "size <*mlex*> {}"
Found termination order:
  "(%p. size (fst (snd (snd p)))) <*mlex*>
   (%p. size (fst (snd (snd (snd p))))) <*mlex*>
   (%p. size (snd (snd (snd (snd p))))) <*mlex*> {}"
Found termination order: "size <*mlex*> {}"
locale enumerateable
  fixes T :: "'a set"
    and less :: "'a => 'a => bool"  (infix \<open>\<prec>\<close> 50)
  assumes "enumerateable T (\<prec>)"
Found termination order: "size <*mlex*> {}"
Found termination order: "size <*mlex*> {}"
Found termination order: "(%p. size (snd p)) <*mlex*> {}"
Proofs for inductive predicate(s) "sorted"
Found termination order: "size <*mlex*> {}"
  Proving monotonicity ...
Found termination order: "size <*mlex*> {}"
### theory "Draft.Misc"
### 0.445s elapsed time, 1.758s cpu time, 0.183s GC time
Loading theory "HOL-Library.BigO" (required by "Draft.Approx_BetaMoreTemplates" via "Draft.ExtrEqs")
Found termination order: "(%p. size (fst p)) <*mlex*> {}"
Found termination order: "size <*mlex*> {}"
Found termination order:
  "(%p. size_list size (snd (snd (snd p)))) <*mlex*> {}"
Found termination order: "(%p. size (snd p)) <*mlex*> {}"
Found termination order: "size <*mlex*> {}"
Found termination order: "size <*mlex*> {}"
Proofs for inductive predicate(s) "valid_abstraction"
  Proving monotonicity ...
Found termination order: "size <*mlex*> {}"
Proofs for inductive predicate(s) "clock_val"
  Proving monotonicity ...
Found termination order: "(%p. length (fst p)) <*mlex*> {}"
Proofs for inductive predicate(s) "step_t"
### theory "HOL-Library.Tree"
### 2.212s elapsed time, 8.533s cpu time, 1.298s GC time
Loading theory "Draft.Templates" (required by "Draft.Approx_BetaMoreTemplates" via "Draft.ExtrEqs")
  Proving monotonicity ...
Proofs for inductive predicate(s) "step_a"
  Proving monotonicity ...
datatype template_term
=
     t_empty
   | template_app of template_term * template_term
   | template_hole of int
   | template_var of int
datatype sign
= equals | greater_equals | greater_than | less_equals | less_than
datatype template
=
     template_bimplication of template * template
   | template_dunno
   | template_equation of template_term * template_term
   | template_implication of template list * template
   | template_inequation of sign * template_term * template_term
   | template_negation of template
   | template_predicate of template_term
constructor t_empty: template_term
constructor template_app: template_term * template_term -> template_term
constructor template_hole: int -> template_term
constructor template_var: int -> template_term
constructor equals: sign
constructor greater_equals: sign
constructor greater_than: sign
constructor less_equals: sign
constructor less_than: sign
constructor template_bimplication: template * template -> template
constructor template_dunno: template
constructor template_equation: template_term * template_term -> template
constructor template_implication: template list * template -> template
constructor template_inequation:
   sign * template_term * template_term -> template
constructor template_negation: template -> template
constructor template_predicate: template_term -> template
val vfs = fn: term -> (indexname * typ) list * (string * typ) list
val indexOf = fn: ''a list -> ''a -> int -> int
val has_eq = fn: term -> bool
val term2template = fn:
   (indexname * typ) list -> (string * typ) list -> term -> template_term
val lemma2predicate = fn: term -> term -> template
val makeTemplatewithContext = fn: term -> term -> template
val lemma2template = fn: term -> template
val thm2template = fn: thm -> template
val tterm2string = fn: template_term -> string
val template2string = fn: template -> string
val t = "height ?t <= size ?t": thm
val th =
   Const ("HOL.Trueprop", "bool => prop") $
     (Const ("Orderings.ord_class.less_eq", "nat => nat => bool") $
       (Const ("Tree.height_class.height", "?'a tree => nat") $
         Var (("t", 0), "?'a tree")) $
       (Const ("Nat.size_class.size", "?'a tree => nat") $
         Var (("t", 0), "?'a tree"))):
   term
### theory "Draft.Templates"
### 0.068s elapsed time, 0.271s cpu time, 0.000s GC time
Proofs for inductive predicate(s) "step"
"as @ x # bs @ x # cs @ x # ds"
  :: "'a list"
  Proving monotonicity ...
Proofs for inductive predicate(s) "steps"
  Proving monotonicity ...
### theory "HOL-Library.BigO"
### 0.851s elapsed time, 3.256s cpu time, 0.296s GC time
Loading theory "Draft.ExtrEqs" (required by "Draft.Approx_BetaMoreTemplates")
Proofs for inductive predicate(s) "step_z"
  Proving monotonicity ...
Proofs for inductive predicate(s) "steps_z"
  Proving monotonicity ...
### theory "Draft.Timed_Automata"
### 2.894s elapsed time, 11.032s cpu time, 1.495s GC time
Loading theory "Draft.Regions" (required by "Draft.Approx_BetaMoreTemplates" via "Draft.Approx_Beta" via "Draft.Closure")
### theory "Draft.Floyd_Warshall"
### 2.907s elapsed time, 11.033s cpu time, 1.495s GC time
Loading theory "Draft.DBM" (required by "Draft.Approx_BetaMoreTemplates" via "Draft.Approx_Beta" via "Draft.DBM_Zone_Semantics" via "Draft.DBM_Operations" via "Draft.DBM_Basics")
Loading theory "Draft.Paths_Cycles" (required by "Draft.Approx_BetaMoreTemplates" via "Draft.Approx_Beta" via "Draft.DBM_Zone_Semantics" via "Draft.DBM_Operations" via "Draft.DBM_Basics")
Found termination order: "(%p. size_list size (snd (snd p))) <*mlex*> {}"
val eqpattern =
   Pattern
    (
       Const ("HOL.Trueprop", "bool => prop") $
         (Const ("HOL.eq", "?'a => ?'a => bool") $
           Var (("_dummy_", 1), "?'a") $ Var (("_dummy_", 2), "?'a"))
       ):
   term Find_Theorems.criterion
val badeqpattern = Pattern (Const ("Pure.eq", "?'a => ?'a => prop")):
   term Find_Theorems.criterion
val undefpattern =
   Pattern
    (
       Const ("HOL.Trueprop", "bool => prop") $
         (Const ("HOL.eq", "?'a => ?'a => bool") $
           Var (("_dummy_", 1), "?'a") $ Const ("HOL.undefined", "?'a"))
       ):
   term Find_Theorems.criterion
val thmpattern =
   Pattern
    (Const ("HOL.Trueprop", "bool => prop") $ Var (("_dummy_", 1), "bool")):
   term Find_Theorems.criterion
val badnames =
   ["*nitpick*", "*Nitpick*", "*full_exhaustive*", "*_def*", "Enum.finite*",
    "*Quickcheck*", "ATP*", "*Nunchaku*", "*Code*", "*BNF*", "*SMT*",
    "*.*.*"]:
   string list
val unwanted_names =
   [(false, Name "*nitpick*"), (false, Name "*Nitpick*"),
    (false, Name "*full_exhaustive*"), (false, Name "*_def*"),
    (false, Name "Enum.finite*"), (false, Name "*Quickcheck*"),
    (false, Name "ATP*"), (false, Name "*Nunchaku*"),
    (false, Name "*Code*"), (false, Name "*BNF*"), (false, Name "*SMT*"),
    (false, Name "*.*.*")]:
   (bool * term Find_Theorems.criterion) list
val has_vars = fn: term -> bool
val get_all_eqs = fn: string -> Proof.context -> (string * thm) list
val get_all_thms = fn: string -> Proof.context -> (string * thm) list
val get_noneq_thms = fn: string -> Proof.context -> (string * thm) list
val template_eqs = fn:
   string -> Proof.context -> (string * thm * template) list
val template_thms = fn:
   string -> Proof.context -> (string * thm * template) list
### theory "Draft.ExtrEqs"
### 0.972s elapsed time, 3.585s cpu time, 1.214s GC time
Found termination order: "(%p. length (snd p)) <*mlex*> {}"
instantiation
  real :: time
Proofs for inductive predicate(s) "valid_intv"
  Proving monotonicity ...
Proofs for inductive predicate(s) "dbm_entry_val"
Proofs for inductive predicate(s) "intv_elem"
  Proving monotonicity ...
  Proving monotonicity ...
Proofs for inductive predicate(s) "valid_region"
  Proving monotonicity ...
[| (?a, ?b) : set (arcs ?i ?j ?xs); ?b ~= ?j |]
==> EX c. ?xs = [?b] & ?a = ?i |
          (EX ys. ?xs = ?b # c # ys & ?a = ?i) |
          (EX ys. ?xs = ys @ [?a, ?b] & c = ?j) |
          (EX ys zs. ?xs = ys @ ?a # ?b # c # zs)
Proofs for inductive predicate(s) "regionp"
  Proving monotonicity ...
Found termination order: "{}"
Proofs for inductive predicate(s) "Succp"
  Proving monotonicity ...
Proofs for inductive predicate(s) "dbm_lt"
  Proving monotonicity ...
### theory "Draft.Paths_Cycles"
### 1.265s elapsed time, 4.446s cpu time, 1.271s GC time
Found termination order: "{}"
Found termination order: "{}"
\<infinity> \<otimes> ?uu = \<infinity>
Le ?v \<otimes> \<infinity> = \<infinity>
Lt ?v \<otimes> \<infinity> = \<infinity>
Le ?a \<otimes> Le ?b = Le (?a + ?b)
Le ?a \<otimes> Lt ?b = Lt (?a + ?b)
Lt ?a \<otimes> Le ?b = Lt (?a + ?b)
Lt ?a \<otimes> Lt ?b = Lt (?a + ?b)
instantiation
  DBMEntry :: (time) linorder
  less_eq_DBMEntry == less_eq :: 'a DBMEntry => 'a DBMEntry => bool
  less_DBMEntry == less :: 'a DBMEntry => 'a DBMEntry => bool
instantiation
  DBMEntry :: (time) linordered_ab_monoid_add
  neutral_DBMEntry == neutral :: 'a DBMEntry
  plus_DBMEntry == plus :: 'a DBMEntry => 'a DBMEntry => 'a DBMEntry
Found termination order: "{}"
Proofs for inductive predicate(s) "isConst"
  Proving monotonicity ...
Proofs for inductive predicate(s) "isIntv"
  Proving monotonicity ...
Proofs for inductive predicate(s) "isGreater"
  Proving monotonicity ...
### Partially applied constant "DBM.dbm_le" on left hand side of equation, in theorem:
### linorder.Min dbm_le (set (?x # ?xs)) == fold linordered_monoid.min ?xs ?x
### Partially applied constant "DBM.dbm_le" on left hand side of equation, in theorem:
### linorder.Max dbm_le (set (?x # ?xs)) == fold linordered_monoid.max ?xs ?x
### Partially applied constant "DBM.dbm_le" on left hand side of equation, in theorem:
### linordered_monoid.sorted [] == True
### Partially applied constant "DBM.dbm_le" on left hand side of equation, in theorem:
### linordered_monoid.sorted [?x] == True
### Partially applied constant "DBM.dbm_le" on left hand side of equation, in theorem:
### linordered_monoid.sorted (?x # ?y # ?zs) ==
### ?x \<preceq> ?y & linordered_monoid.sorted (?y # ?zs)
### Partially applied constant "DBM.dbm_le" on left hand side of equation, in theorem:
### linordered_monoid.sorted_list_of_set (set ?xs) ==
### linordered_monoid.sort (remdups ?xs)
Proofs for inductive predicate(s) "step_r"
  Proving monotonicity ...
Proofs for inductive predicate(s) "steps_r"
### theory "Draft.DBM"
### 2.554s elapsed time, 7.828s cpu time, 2.998s GC time
Loading theory "Draft.DBM_Basics" (required by "Draft.Approx_BetaMoreTemplates" via "Draft.Approx_Beta" via "Draft.DBM_Zone_Semantics" via "Draft.DBM_Operations")
  Proving monotonicity ...
### theory "Draft.Regions"
### 2.664s elapsed time, 8.189s cpu time, 3.104s GC time
Loading theory "Draft.Closure" (required by "Draft.Approx_BetaMoreTemplates" via "Draft.Approx_Beta")
locale AlphaClosure
  fixes X :: "'c set"
    and k :: "'c => nat"
    and \<R> :: "('c => real) set set"
    and V :: "('c => real) set"
  assumes "AlphaClosure X"
  defines "\<R> == {region X I r |I r. valid_region X k I r}"
    and "V == {v. ALL x:X. 0 <= v x}"
Proofs for inductive predicate(s) "step_z_alpha"
  Proving monotonicity ...
Found termination order: "{}"
Proofs for inductive predicate(s) "steps_z_alpha"
  Proving monotonicity ...
[| ?R : \<R>; ?R' : \<R>; ?v : ?R; ?v : ?R' |] ==> ?R = ?R'
[| ?R : \<R>; ?R' : \<R>; ?v : ?R; ?v : ?R' |] ==> ?R = ?R'
### theory "Draft.Closure"
### 0.731s elapsed time, 2.091s cpu time, 1.450s GC time
Found termination order:
  "(%p. size (fst (snd (snd p)))) <*mlex*>
   (%p. size (fst (snd (snd (snd p))))) <*mlex*> {}"
### theory "Draft.DBM_Basics"
### 1.155s elapsed time, 2.728s cpu time, 1.583s GC time
Loading theory "Draft.DBM_Normalization" (required by "Draft.Approx_BetaMoreTemplates" via "Draft.Approx_Beta" via "Draft.Regions_Beta")
Loading theory "Draft.DBM_Operations" (required by "Draft.Approx_BetaMoreTemplates" via "Draft.Approx_Beta" via "Draft.DBM_Zone_Semantics")
Found termination order: "{}"
Found termination order: "{}"
### theory "Draft.DBM_Normalization"
### 0.149s elapsed time, 0.374s cpu time, 0.158s GC time
Found termination order: "{}"
Found termination order: "{}"
Found termination order: "(%p. size (fst p)) <*mlex*> {}"
Found termination order: "(%p. length (fst (snd (snd p)))) <*mlex*> {}"
Found termination order: "(%p. length (fst (snd p))) <*mlex*> {}"
### theory "Draft.DBM_Operations"
### 0.964s elapsed time, 1.317s cpu time, 0.303s GC time
Loading theory "Draft.DBM_Zone_Semantics" (required by "Draft.Approx_BetaMoreTemplates" via "Draft.Approx_Beta")
Loading theory "Draft.Regions_Beta" (required by "Draft.Approx_BetaMoreTemplates" via "Draft.Approx_Beta")
Proofs for inductive predicate(s) "step_z_dbm"
  Proving monotonicity ...
Proofs for inductive predicate(s) "steps_z_dbm"
  Proving monotonicity ...
### theory "Draft.DBM_Zone_Semantics"
### 0.202s elapsed time, 0.440s cpu time, 0.086s GC time
instantiation
  real :: time
Proofs for inductive predicate(s) "valid_intv"
  Proving monotonicity ...
Proofs for inductive predicate(s) "valid_intv'"
  Proving monotonicity ...
Proofs for inductive predicate(s) "intv_elem"
  Proving monotonicity ...
Proofs for inductive predicate(s) "intv'_elem"
  Proving monotonicity ...
Proofs for inductive predicate(s) "isConst"
  Proving monotonicity ...
Proofs for inductive predicate(s) "isIntv"
  Proving monotonicity ...
Proofs for inductive predicate(s) "isGreater"
  Proving monotonicity ...
Proofs for inductive predicate(s) "valid_region"
  Proving monotonicity ...
Proofs for inductive predicate(s) "regionp"
  Proving monotonicity ...
locale Beta_Regions
  fixes X :: "'c set"
    and k :: "'c => nat"
    and \<R> :: "('c => real) set set"
    and V :: "('c => real) set"
  assumes "Beta_Regions X"
  defines "\<R> == {region X I J r |I J r. valid_region X k I J r}"
    and "V == {v. ALL x:X. 0 <= v x}"
Found termination order: "{}"
Found termination order: "{}"
locale Beta_Regions'
  fixes X :: "'a set"
    and k :: "'a => nat"
    and \<R> :: "('a => real) set set"
    and V :: "('a => real) set"
    and v :: "'a => nat"
    and n :: "nat"
    and not_in_X :: "'a"
  assumes "Beta_Regions' X v n not_in_X"
  defines "\<R> == {region X I J r |I J r. valid_region X k I J r}"
    and "V == {v. ALL x:X. 0 <= v x}"
theorem split_min:
  fixes P :: "'b => bool"
    and i :: "'b"
    and j :: "'b"
  shows "P (min i j) = ((i <= j --> P i) & (~ i <= j --> P j))"
locale Beta_Regions'
  fixes X :: "'a set"
    and k :: "'a => nat"
    and \<R> :: "('a => real) set set"
    and V :: "('a => real) set"
    and v :: "'a => nat"
    and n :: "nat"
    and not_in_X :: "'a"
  assumes "Beta_Regions' X v n not_in_X"
  defines "\<R> == {region X I J r |I J r. valid_region X k I J r}"
    and "V == {v. ALL x:X. 0 <= v x}"
locale Beta_Regions'
  fixes X :: "'a set"
    and k :: "'a => nat"
    and \<R> :: "('a => real) set set"
    and V :: "('a => real) set"
    and v :: "'a => nat"
    and n :: "nat"
    and not_in_X :: "'a"
  assumes "Beta_Regions' X v n not_in_X"
  defines "\<R> == {region X I J r |I J r. valid_region X k I J r}"
    and "V == {v. ALL x:X. 0 <= v x}"
### theory "Draft.Regions_Beta"
### 1.961s elapsed time, 2.338s cpu time, 0.265s GC time
Loading theory "Draft.Approx_Beta" (required by "Draft.Approx_BetaMoreTemplates")
instantiation
  real :: linordered_ab_monoid_add
  neutral_real == neutral :: real
locale Regions
  fixes X :: "'c set"
    and k :: "'c => nat"
    and v :: "'c => nat"
    and n :: "nat"
    and not_in_X :: "'c"
  assumes "Regions X v n not_in_X"
Proofs for inductive predicate(s) "step_z_beta"
  Proving monotonicity ...
Proofs for inductive predicate(s) "steps_z_beta"
  Proving monotonicity ...
### theory "Draft.Approx_Beta"
### 0.997s elapsed time, 1.081s cpu time, 0.118s GC time
Loading theory "Draft.Approx_BetaMoreTemplates"
val templateLemmas = []: (string * thm * template) list
### theory "Draft.Approx_BetaMoreTemplates"
### 0.406s elapsed time, 0.547s cpu time, 0.000s GC time
val it = (): unit
