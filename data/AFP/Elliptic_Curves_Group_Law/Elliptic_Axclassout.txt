Loading theory "HOL-Library.Code_Abstract_Nat" (required by "Draft.Elliptic_AxclassMoreTemplates" via "Draft.Elliptic_Axclass" via "HOL-Decision_Procs.Reflective_Field" via "HOL-Decision_Procs.Commutative_Ring" via "HOL-Library.Code_Target_Numeral" via "HOL-Library.Code_Target_Nat")
Loading theory "HOL-Library.Code_Target_Int" (required by "Draft.Elliptic_AxclassMoreTemplates" via "Draft.Elliptic_Axclass" via "HOL-Decision_Procs.Reflective_Field" via "HOL-Decision_Procs.Commutative_Ring" via "HOL-Library.Code_Target_Numeral")
Loading theory "HOL-Decision_Procs.Conversions" (required by "Draft.Elliptic_AxclassMoreTemplates" via "Draft.Elliptic_Axclass" via "HOL-Decision_Procs.Reflective_Field" via "HOL-Decision_Procs.Commutative_Ring")
Loading theory "HOL-Library.FuncSet" (required by "Draft.Elliptic_AxclassMoreTemplates" via "Draft.Elliptic_Axclass" via "HOL-Decision_Procs.Reflective_Field" via "HOL-Decision_Procs.Commutative_Ring" via "HOL-Decision_Procs.Algebra_Aux" via "HOL-Algebra.Ring" via "HOL-Algebra.FiniteProduct" via "HOL-Algebra.Group" via "HOL-Algebra.Complete_Lattice" via "HOL-Algebra.Lattice" via "HOL-Algebra.Order" via "HOL-Algebra.Congruence")
val tactic_of_conv = fn: conv -> int -> thm -> thm Seq.seq
val binop_conv = fn: conv -> conv -> conv
val err = fn: string -> cterm -> 'a
### Code generator: dropping subsumed code equation
### 1 == Int.Pos num.One
### Code generator: dropping subsumed code equation
### Int.Neg ?m + Int.Neg ?n == Int.Neg (?m + ?n)
### Code generator: dropping subsumed code equation
### Int.Neg ?m + Int.Pos ?n == Int.sub ?n ?m
### Code generator: dropping subsumed code equation
### Int.Pos ?m + Int.Neg ?n == Int.sub ?m ?n
### Code generator: dropping subsumed code equation
### Int.Pos ?m + Int.Pos ?n == Int.Pos (?m + ?n)
### Code generator: dropping subsumed code equation
### 0 + ?l == ?l
### Code generator: dropping subsumed code equation
### ?k + 0 == ?k
### Code generator: dropping subsumed code equation
### - Int.Neg ?m == Int.Pos ?m
### Code generator: dropping subsumed code equation
### - Int.Pos ?m == Int.Neg ?m
### Code generator: dropping subsumed code equation
### - 0 == 0
### Code generator: dropping subsumed code equation
### Int.Neg ?m - Int.Neg ?n == Int.sub ?n ?m
### Code generator: dropping subsumed code equation
### Int.Neg ?m - Int.Pos ?n == Int.Neg (?m + ?n)
### Code generator: dropping subsumed code equation
### Int.Pos ?m - Int.Neg ?n == Int.Pos (?m + ?n)
### Code generator: dropping subsumed code equation
### Int.Pos ?m - Int.Pos ?n == Int.sub ?m ?n
### Code generator: dropping subsumed code equation
### 0 - ?l == - ?l
### Code generator: dropping subsumed code equation
### ?k - 0 == ?k
### Code generator: dropping subsumed code equation
### Int.dup (Int.Neg ?n) == Int.Neg (num.Bit0 ?n)
### Code generator: dropping subsumed code equation
### Int.dup (Int.Pos ?n) == Int.Pos (num.Bit0 ?n)
### Code generator: dropping subsumed code equation
### Int.dup 0 == 0
val strip_app = fn: cterm -> string * cterm list
val inst = fn: ctyp list -> cterm list -> thm -> thm
val transitive' = fn: thm -> (cterm -> thm) -> thm
val type_of_eqn = fn: thm -> ctyp
val cong1 = fn: (cterm -> thm) -> cterm -> thm
val cong1' = fn: (cterm -> thm) -> (cterm -> thm) -> cterm -> thm
val cong2 = fn: (cterm -> thm) -> (cterm -> thm) -> cterm -> thm
val cong2' = fn:
   (cterm -> cterm -> thm) ->
     (cterm -> thm) -> (cterm -> thm) -> cterm -> thm
val cong2'' = fn: (cterm -> cterm -> thm) -> thm -> thm -> thm
val args1 = fn: (cterm -> 'a) -> cterm -> 'a
val args2 = fn: (cterm -> cterm -> 'a) -> cterm -> 'a
### Code generator: dropping subsumed code equation
### Int.Neg ?m * Int.Neg ?n == Int.Pos (?m * ?n)
### Code generator: dropping subsumed code equation
### Int.Neg ?m * Int.Pos ?n == Int.Neg (?m * ?n)
### Code generator: dropping subsumed code equation
### Int.Pos ?m * Int.Neg ?n == Int.Neg (?m * ?n)
### Code generator: dropping subsumed code equation
### Int.Pos ?m * Int.Pos ?n == Int.Pos (?m * ?n)
### Code generator: dropping subsumed code equation
### 0 * ?l == 0
### Code generator: dropping subsumed code equation
### ?k * 0 == 0
### Code generator: dropping subsumed code equation
### Int.Neg ?m div Int.Neg ?n == fst (divmod ?m ?n)
val strip_numeral = fn: cterm -> string * cterm list
### Code generator: dropping subsumed code equation
### Int.Pos ?m div Int.Neg ?n == - Divides.adjust_div (divmod ?m ?n)
### Code generator: dropping subsumed code equation
### Int.Neg ?m div Int.Pos ?n == - Divides.adjust_div (divmod ?m ?n)
### Code generator: dropping subsumed code equation
### Int.Pos ?m div Int.Pos ?n == fst (divmod ?m ?n)
### Code generator: dropping subsumed code equation
### ?k div Int.Neg num.One == - ?k
### Code generator: dropping subsumed code equation
### ?k div Int.Pos num.One == ?k
### Code generator: dropping subsumed code equation
### 0 div ?k == 0
### Code generator: dropping subsumed code equation
### ?k div 0 == 0
### Code generator: dropping subsumed code equation
### Int.Neg ?m mod Int.Neg ?n == - snd (divmod ?m ?n)
### Code generator: dropping subsumed code equation
### Int.Pos ?m mod Int.Neg ?n ==
### - Divides.adjust_mod (Int.Pos ?n) (snd (divmod ?m ?n))
### Code generator: dropping subsumed code equation
### Int.Neg ?m mod Int.Pos ?n ==
### Divides.adjust_mod (Int.Pos ?n) (snd (divmod ?m ?n))
### Code generator: dropping subsumed code equation
### Int.Pos ?m mod Int.Pos ?n == snd (divmod ?m ?n)
### Code generator: dropping subsumed code equation
### ?k mod Int.Neg num.One == 0
### Code generator: dropping subsumed code equation
### ?k mod Int.Pos num.One == 0
### Code generator: dropping subsumed code equation
### 0 mod ?k == 0
### Code generator: dropping subsumed code equation
### ?k mod 0 == ?k
### Code generator: dropping subsumed code equation
### divmod (num.Bit1 ?m) (num.Bit1 ?n) ==
### if ?m < ?n then (0, numeral (num.Bit1 ?m))
### else divmod_step (num.Bit1 ?n)
###       (divmod (num.Bit1 ?m) (num.Bit0 (num.Bit1 ?n)))
### Code generator: dropping subsumed code equation
### divmod (num.Bit0 ?m) (num.Bit1 ?n) ==
### if ?m <= ?n then (0, numeral (num.Bit0 ?m))
### else divmod_step (num.Bit1 ?n)
###       (divmod (num.Bit0 ?m) (num.Bit0 (num.Bit1 ?n)))
### Code generator: dropping subsumed code equation
### divmod (num.Bit1 ?m) (num.Bit0 ?n) ==
### case divmod ?m ?n of (q, r) => (q, 2 * r + 1)
### ML warning (line 97 of "~~/src/HOL/Decision_Procs/Conversions.thy"):
### Matches are not exhaustive.
### ML warning (line 93 of "~~/src/HOL/Decision_Procs/Conversions.thy"):
### Matches are not exhaustive.
val nat_conv = fn: cterm -> thm
### Code generator: dropping subsumed code equation
### divmod (num.Bit0 ?m) (num.Bit0 ?n) ==
### case divmod ?m ?n of (q, r) => (q, 2 * r)
### Code generator: dropping subsumed code equation
### divmod num.One (num.Bit1 ?n) == (0, Numeral1)
### Code generator: dropping subsumed code equation
### divmod num.One (num.Bit0 ?n) == (0, Numeral1)
### Code generator: dropping subsumed code equation
### divmod ?m num.One == (numeral ?m, 0)
### theory "HOL-Library.Code_Abstract_Nat"
### 0.078s elapsed time, 0.339s cpu time, 0.000s GC time
Loading theory "HOL-Library.Code_Target_Nat" (required by "Draft.Elliptic_AxclassMoreTemplates" via "Draft.Elliptic_Axclass" via "HOL-Decision_Procs.Reflective_Field" via "HOL-Decision_Procs.Commutative_Ring" via "HOL-Library.Code_Target_Numeral")
### Code generator: dropping subsumed code equation
### equal_class.equal ?k ?k == True
### Code generator: dropping subsumed code equation
### equal_class.equal (Int.Neg ?k) (Int.Neg ?l) == equal_class.equal ?k ?l
### Code generator: dropping subsumed code equation
### equal_class.equal (Int.Neg ?k) (Int.Pos ?l) == False
### Code generator: dropping subsumed code equation
### equal_class.equal (Int.Neg ?k) 0 == False
### Code generator: dropping subsumed code equation
### equal_class.equal (Int.Pos ?k) (Int.Neg ?l) == False
### Code generator: dropping subsumed code equation
### equal_class.equal (Int.Pos ?k) (Int.Pos ?l) == equal_class.equal ?k ?l
### Code generator: dropping subsumed code equation
### equal_class.equal (Int.Pos ?k) 0 == False
### Code generator: dropping subsumed code equation
### equal_class.equal 0 (Int.Neg ?l) == False
### Code generator: dropping subsumed code equation
### equal_class.equal 0 (Int.Pos ?l) == False
### Code generator: dropping subsumed code equation
### equal_class.equal 0 0 == True
### Code generator: dropping subsumed code equation
### Int.Neg ?k <= Int.Neg ?l == ?l <= ?k
### Code generator: dropping subsumed code equation
### Int.Neg ?k <= Int.Pos ?l == True
### Code generator: dropping subsumed code equation
### Int.Neg ?k <= 0 == True
### Code generator: dropping subsumed code equation
### Int.Pos ?k <= Int.Neg ?l == False
### Code generator: dropping subsumed code equation
### Int.Pos ?k <= Int.Pos ?l == ?k <= ?l
### Code generator: dropping subsumed code equation
### Int.Pos ?k <= 0 == False
### Code generator: dropping subsumed code equation
### 0 <= Int.Neg ?l == False
### Code generator: dropping subsumed code equation
### 0 <= Int.Pos ?l == True
### Code generator: dropping subsumed code equation
### 0 <= 0 == True
### Code generator: dropping subsumed code equation
### Int.Neg ?k < Int.Neg ?l == ?l < ?k
### Code generator: dropping subsumed code equation
### Int.Neg ?k < Int.Pos ?l == True
### Code generator: dropping subsumed code equation
### Int.Neg ?k < 0 == True
### Code generator: dropping subsumed code equation
### Int.Pos ?k < Int.Neg ?l == False
### Code generator: dropping subsumed code equation
### Int.Pos ?k < Int.Pos ?l == ?k < ?l
### Code generator: dropping subsumed code equation
### Int.Pos ?k < 0 == False
### Code generator: dropping subsumed code equation
### 0 < Int.Neg ?l == False
### Code generator: dropping subsumed code equation
### 0 < Int.Pos ?l == True
### Code generator: dropping subsumed code equation
### 0 < 0 == False
### ML warning (line 103 of "~~/src/HOL/Decision_Procs/Conversions.thy"):
### Matches are not exhaustive.
val add_num_conv = fn: cterm -> cterm -> thm
### ML warning (line 137 of "~~/src/HOL/Decision_Procs/Conversions.thy"):
### Matches are not exhaustive.
val BitM_conv = fn: cterm -> thm
### ML warning (line 159 of "~~/src/HOL/Decision_Procs/Conversions.thy"):
### Matches are not exhaustive.
val dbl_conv = fn: ctyp -> cterm -> thm
### ML warning (line 178 of "~~/src/HOL/Decision_Procs/Conversions.thy"):
### Matches are not exhaustive.
val dbl_inc_conv = fn: ctyp -> cterm -> thm
### Code generator: dropping subsumed code equation
### divmod_nat ?m ?n ==
### if ?n = 0 | ?m < ?n then (0, ?m)
### else let (q, y) = divmod_nat (?m - ?n) ?n in (Suc q, y)
### ML warning (line 200 of "~~/src/HOL/Decision_Procs/Conversions.thy"):
### Matches are not exhaustive.
val dbl_dec_conv = fn: ctyp -> cterm -> thm
### Code generator: dropping subsumed code equation
### divmod (num.Bit1 ?m) (num.Bit1 ?n) ==
### if ?m < ?n then (0, numeral (num.Bit1 ?m))
### else divmod_step (num.Bit1 ?n)
###       (divmod (num.Bit1 ?m) (num.Bit0 (num.Bit1 ?n)))
### Code generator: dropping subsumed code equation
### divmod (num.Bit0 ?m) (num.Bit1 ?n) ==
### if ?m <= ?n then (0, numeral (num.Bit0 ?m))
### else divmod_step (num.Bit1 ?n)
###       (divmod (num.Bit0 ?m) (num.Bit0 (num.Bit1 ?n)))
### Code generator: dropping subsumed code equation
### divmod (num.Bit1 ?m) (num.Bit0 ?n) ==
### case divmod ?m ?n of (q, r) => (q, 2 * r + 1)
### Code generator: dropping subsumed code equation
### divmod (num.Bit0 ?m) (num.Bit0 ?n) ==
### case divmod ?m ?n of (q, r) => (q, 2 * r)
### Code generator: dropping subsumed code equation
### divmod num.One (num.Bit1 ?n) == (0, Numeral1)
### Code generator: dropping subsumed code equation
### divmod num.One (num.Bit0 ?n) == (0, Numeral1)
### Code generator: dropping subsumed code equation
### divmod ?m num.One == (numeral ?m, 0)
### Code generator: dropping subsumed code equation
### Suc ?m <= ?n == ?m < ?n
### Code generator: dropping subsumed code equation
### 0 <= ?n == True
### Code generator: dropping subsumed code equation
### ?m < Suc ?n == ?m <= ?n
### Code generator: dropping subsumed code equation
### ?n < 0 == False
### Code generator: dropping subsumed code equation
### of_int (Int.Pos ?k) == numeral ?k
### Code generator: dropping subsumed code equation
### of_int 0 == 0::?'a
### Code generator: dropping subsumed code equation
### of_int (Int.Neg ?k) == - numeral ?k
### Code generator: dropping subsumed code equation
### nat (Int.Pos ?k) == nat_of_num ?k
### Code generator: dropping subsumed code equation
### nat 0 == 0
### Code generator: dropping subsumed code equation
### nat (Int.Neg ?k) == 0
### ML warning (line 212 of "~~/src/HOL/Decision_Procs/Conversions.thy"):
### Pattern is not exhaustive.
### ML warning (line 221 of "~~/src/HOL/Decision_Procs/Conversions.thy"):
### Matches are not exhaustive.
val sub_conv = fn: ctyp -> cterm -> cterm -> thm
### theory "HOL-Library.Code_Target_Int"
### 0.191s elapsed time, 0.777s cpu time, 0.027s GC time
Loading theory "HOL-Library.Function_Algebras" (required by "Draft.Elliptic_AxclassMoreTemplates" via "Draft.ExtrEqs" via "HOL-Library.BigO")
### Code generator: dropping subsumed code equation
### of_nat ?n == semiring_1_class.of_nat_aux (%i. i + (1::?'a)) ?n (0::?'a)
val expand1 = fn: ctyp -> cterm -> thm
val norm1_eq = fn: ctyp -> thm -> thm
val plus_conv = fn:
   ((cterm -> cterm -> thm) -> cterm -> cterm -> thm) ->
     ctyp -> cterm -> cterm -> thm
val nat_plus_conv = fn: cterm -> cterm -> thm
instantiation
  fun :: (type, plus) plus
  plus_fun == plus :: ('a => 'b) => ('a => 'b) => 'a => 'b
### theory "HOL-Library.Code_Target_Nat"
### 0.149s elapsed time, 0.584s cpu time, 0.027s GC time
Loading theory "HOL-Library.Code_Target_Numeral" (required by "Draft.Elliptic_AxclassMoreTemplates" via "Draft.Elliptic_Axclass" via "HOL-Decision_Procs.Reflective_Field" via "HOL-Decision_Procs.Commutative_Ring")
val plus_neg_conv = fn:
   ctyp -> (cterm -> cterm -> thm) -> cterm -> cterm -> thm
val plus_conv' = fn: ctyp -> cterm -> cterm -> thm
val int_plus_conv = fn: cterm -> cterm -> thm
instantiation
  fun :: (type, zero) zero
  zero_fun == zero_class.zero :: 'a => 'b
### ML warning (line 354 of "~~/src/HOL/Decision_Procs/Conversions.thy"):
### Matches are not exhaustive.
val uminus_conv = fn: ctyp -> cterm -> thm
val int_neg_conv = fn: cterm -> thm
instantiation
  fun :: (type, times) times
  times_fun == times :: ('a => 'b) => ('a => 'b) => 'a => 'b
instantiation
  fun :: (type, one) one
  one_fun == one_class.one :: 'a => 'b
### ML warning (line 366 of "~~/src/HOL/Decision_Procs/Conversions.thy"):
### Pattern is not exhaustive.
val minus_conv = fn: ctyp -> cterm -> cterm -> thm
val int_minus_conv = fn: cterm -> cterm -> thm
val int_numeral = fn: cterm -> cterm
val nat_minus_refl = "(-) == (-)": thm
val expand1_nat = fn: cterm -> thm
val nat_minus_conv = fn: cterm -> cterm -> thm
### ML warning (line 423 of "~~/src/HOL/Decision_Procs/Conversions.thy"):
### Matches are not exhaustive.
val mult_num_conv = fn: cterm -> cterm -> thm
val mult_conv = fn:
   ((cterm -> cterm -> thm) -> cterm -> cterm -> thm) ->
     ctyp -> cterm -> cterm -> thm
val nat_mult_conv = fn: cterm -> cterm -> thm
### ML warning (line 472 of "~~/src/HOL/Decision_Procs/Conversions.thy"):
### Pattern is not exhaustive.
val mult_neg_conv = fn:
   ctyp -> (cterm -> cterm -> thm) -> cterm -> cterm -> thm
val mult_conv' = fn: ctyp -> cterm -> cterm -> thm
val int_mult_conv = fn: cterm -> cterm -> thm
### theory "HOL-Library.Function_Algebras"
### 0.130s elapsed time, 0.502s cpu time, 0.049s GC time
Loading theory "HOL-Library.Nat_Bijection" (required by "Draft.Elliptic_AxclassMoreTemplates" via "Draft.ExtrEqs" via "HOL-Library.Stream")
### ML warning (line 500 of "~~/src/HOL/Decision_Procs/Conversions.thy"):
### Matches are not exhaustive.
val eq_num_conv = fn: cterm -> cterm -> thm
val eq_conv = fn:
   ((cterm -> cterm -> thm) -> cterm -> cterm -> thm) ->
     ctyp -> cterm -> cterm -> thm
val nat_eq_conv = fn: cterm -> cterm -> thm
val eq_neg_conv = fn:
   ctyp -> (cterm -> cterm -> thm) -> cterm -> cterm -> thm
val eq_conv' = fn: ctyp -> cterm -> cterm -> thm
val int_eq_conv = fn: cterm -> cterm -> thm
### theory "HOL-Library.Code_Target_Numeral"
### 0.129s elapsed time, 0.505s cpu time, 0.049s GC time
Loading theory "HOL-Library.Set_Algebras" (required by "Draft.Elliptic_AxclassMoreTemplates" via "Draft.ExtrEqs" via "HOL-Library.BigO")
### ML warning (line 589 of "~~/src/HOL/Decision_Procs/Conversions.thy"):
### Matches are not exhaustive.
### ML warning (line 613 of "~~/src/HOL/Decision_Procs/Conversions.thy"):
### Matches are not exhaustive.
val le_num_conv = fn: cterm -> cterm -> thm
val less_num_conv = fn: cterm -> cterm -> thm
val le_conv = fn:
   ((cterm -> cterm -> thm) -> cterm -> cterm -> thm) ->
     ctyp -> cterm -> cterm -> thm
val nat_le_conv = fn: cterm -> cterm -> thm
instantiation
  set :: (plus) plus
  plus_set == plus :: 'a set => 'a set => 'a set
val le_neg_conv = fn:
   ctyp -> (cterm -> cterm -> thm) -> cterm -> cterm -> thm
val le_conv' = fn: ctyp -> cterm -> cterm -> thm
val int_le_conv = fn: cterm -> cterm -> thm
instantiation
  set :: (times) times
  times_set == times :: 'a set => 'a set => 'a set
val less_conv = fn:
   ((cterm -> cterm -> thm) -> cterm -> cterm -> thm) ->
     ctyp -> cterm -> cterm -> thm
val nat_less_conv = fn: cterm -> cterm -> thm
instantiation
  set :: (zero) zero
  zero_set == zero_class.zero :: 'a set
val less_neg_conv = fn:
   ctyp -> (cterm -> cterm -> thm) -> cterm -> cterm -> thm
val less_conv' = fn: ctyp -> cterm -> cterm -> thm
val int_less_conv = fn: cterm -> cterm -> thm
Found termination order: "(%p. size (snd p)) <*mlex*> {}"
instantiation
  set :: (one) one
  one_set == one_class.one :: 'a set
### ML warning (line 771 of "~~/src/HOL/Decision_Procs/Conversions.thy"):
### Matches are not exhaustive.
val If_conv = fn:
   ctyp ->
     (cterm -> thm) -> (cterm -> thm) -> (cterm -> thm) -> cterm -> thm
### ML warning (line 814 of "~~/src/HOL/Decision_Procs/Conversions.thy"):
### Matches are not exhaustive.
val drop_conv = fn: ctyp -> cterm -> cterm -> thm
### ML warning (line 830 of "~~/src/HOL/Decision_Procs/Conversions.thy"):
### Matches are not exhaustive.
val nth_conv = fn: ctyp -> cterm -> cterm -> thm
### theory "HOL-Decision_Procs.Conversions"
### 0.440s elapsed time, 1.747s cpu time, 0.139s GC time
Loading theory "HOL-Library.Tree" (required by "Draft.Elliptic_AxclassMoreTemplates" via "Draft.ExtrEqs" via "Draft.Templates")
### theory "HOL-Library.FuncSet"
### 0.467s elapsed time, 1.850s cpu time, 0.139s GC time
Loading theory "HOL-Algebra.Congruence" (required by "Draft.Elliptic_AxclassMoreTemplates" via "Draft.Elliptic_Axclass" via "HOL-Decision_Procs.Reflective_Field" via "HOL-Decision_Procs.Commutative_Ring" via "HOL-Decision_Procs.Algebra_Aux" via "HOL-Algebra.Ring" via "HOL-Algebra.FiniteProduct" via "HOL-Algebra.Group" via "HOL-Algebra.Complete_Lattice" via "HOL-Algebra.Lattice" via "HOL-Algebra.Order")
Found termination order: "size_list size <*mlex*> {}"
### theory "HOL-Library.Set_Algebras"
### 0.189s elapsed time, 0.751s cpu time, 0.063s GC time
Loading theory "HOL-Library.BigO" (required by "Draft.Elliptic_AxclassMoreTemplates" via "Draft.ExtrEqs")
### theory "HOL-Library.Nat_Bijection"
### 0.303s elapsed time, 1.194s cpu time, 0.155s GC time
Loading theory "HOL-Library.Stream" (required by "Draft.Elliptic_AxclassMoreTemplates" via "Draft.ExtrEqs")
consts
  left :: "'a tree => 'a tree"
consts
  right :: "'a tree => 'a tree"
locale equivalence
  fixes S :: "('a, 'b) eq_object_scheme"  (structure)
  assumes "equivalence S"
locale partition
  fixes A :: "'a set"
    and B :: "'a set set"
  assumes "Congruence.partition A B"
Found termination order: "size <*mlex*> {}"
consts
  shift :: "'a list => 'a stream => 'a stream"
Proofs for coinductive predicate(s) "streamsp"
  Proving monotonicity ...
Found termination order: "size <*mlex*> {}"
consts
  snth :: "'a stream => nat => 'a"
Found termination order: "size <*mlex*> {}"
consts
  stake :: "nat => 'a stream => 'a list"
### theory "HOL-Algebra.Congruence"
### 0.863s elapsed time, 3.259s cpu time, 0.696s GC time
Loading theory "HOL-Algebra.Order" (required by "Draft.Elliptic_AxclassMoreTemplates" via "Draft.Elliptic_Axclass" via "HOL-Decision_Procs.Reflective_Field" via "HOL-Decision_Procs.Commutative_Ring" via "HOL-Decision_Procs.Algebra_Aux" via "HOL-Algebra.Ring" via "HOL-Algebra.FiniteProduct" via "HOL-Algebra.Group" via "HOL-Algebra.Complete_Lattice" via "HOL-Algebra.Lattice")
consts
  sdrop :: "nat => 'a stream => 'a stream"
class height = type +
  fixes height :: "'a => nat"
instantiation
  tree :: (type) height
  height_tree == height :: 'a tree => nat
consts
  sfilter :: "('a => bool) => 'a stream => 'a stream"
consts
  cycle :: "'a list => 'a stream"
Found termination order: "size <*mlex*> {}"
consts
  siterate :: "('a => 'a) => 'a => 'a stream"
### theory "HOL-Library.BigO"
### 0.978s elapsed time, 3.703s cpu time, 0.799s GC time
Found termination order: "size <*mlex*> {}"
consts
  flat :: "'a list stream => 'a stream"
Found termination order: "size <*mlex*> {}"
locale weak_partial_order
  fixes L :: "('a, 'b) gorder_scheme"  (structure)
  assumes "weak_partial_order L"
locale weak_partial_order
  fixes L :: "('a, 'b) gorder_scheme"  (structure)
  assumes "weak_partial_order L"
consts
  sinterleave :: "'a stream => 'a stream => 'a stream"
consts
  szip :: "'a stream => 'b stream => ('a * 'b) stream"
Found termination order: "size <*mlex*> {}"
consts
  smap2 :: "('a => 'b => 'c) => 'a stream => 'b stream => 'c stream"
### theory "HOL-Library.Stream"
### 1.097s elapsed time, 4.023s cpu time, 0.797s GC time
Found termination order: "size <*mlex*> {}"
Found termination order: "size <*mlex*> {}"
Found termination order: "size <*mlex*> {}"
Found termination order: "(%p. size (fst p)) <*mlex*> {}"
locale weak_partial_order
  fixes L :: "('a, 'b) gorder_scheme"  (structure)
  assumes "weak_partial_order L"
Found termination order: "size <*mlex*> {}"
locale partial_order
  fixes L :: "('a, 'b) gorder_scheme"  (structure)
  assumes "partial_order L"
Found termination order: "(%p. size (snd p)) <*mlex*> {}"
locale weak_partial_order_bottom
  fixes L :: "('a, 'b) gorder_scheme"  (structure)
  assumes "weak_partial_order_bottom L"
locale weak_partial_order_top
  fixes L :: "('a, 'b) gorder_scheme"  (structure)
  assumes "weak_partial_order_top L"
locale weak_total_order
  fixes L :: "('a, 'b) gorder_scheme"  (structure)
  assumes "weak_total_order L"
locale total_order
  fixes L :: "('a, 'b) gorder_scheme"  (structure)
  assumes "total_order L"
### theory "HOL-Algebra.Order"
### 0.815s elapsed time, 2.227s cpu time, 0.245s GC time
Loading theory "HOL-Algebra.Lattice" (required by "Draft.Elliptic_AxclassMoreTemplates" via "Draft.Elliptic_Axclass" via "HOL-Decision_Procs.Reflective_Field" via "HOL-Decision_Procs.Commutative_Ring" via "HOL-Decision_Procs.Algebra_Aux" via "HOL-Algebra.Ring" via "HOL-Algebra.FiniteProduct" via "HOL-Algebra.Group" via "HOL-Algebra.Complete_Lattice")
Found termination order: "size <*mlex*> {}"
locale weak_upper_semilattice
  fixes L :: "('a, 'b) gorder_scheme"  (structure)
  assumes "weak_upper_semilattice L"
locale weak_lower_semilattice
  fixes L :: "('a, 'b) gorder_scheme"  (structure)
  assumes "weak_lower_semilattice L"
locale weak_lattice
  fixes L :: "('a, 'b) gorder_scheme"  (structure)
  assumes "weak_lattice L"
### theory "HOL-Library.Tree"
### 2.004s elapsed time, 6.301s cpu time, 1.111s GC time
Loading theory "Draft.Templates" (required by "Draft.Elliptic_AxclassMoreTemplates" via "Draft.ExtrEqs")
datatype template_term
=
     t_empty
   | template_app of template_term * template_term
   | template_hole of int
   | template_var of int
datatype sign
= equals | greater_equals | greater_than | less_equals | less_than
datatype template
=
     template_bimplication of template * template
   | template_dunno
   | template_equation of template_term * template_term
   | template_implication of template list * template
   | template_inequation of sign * template_term * template_term
   | template_negation of template
   | template_predicate of template_term
constructor t_empty: template_term
constructor template_app: template_term * template_term -> template_term
constructor template_hole: int -> template_term
constructor template_var: int -> template_term
constructor equals: sign
constructor greater_equals: sign
constructor greater_than: sign
constructor less_equals: sign
constructor less_than: sign
constructor template_bimplication: template * template -> template
constructor template_dunno: template
constructor template_equation: template_term * template_term -> template
constructor template_implication: template list * template -> template
constructor template_inequation:
   sign * template_term * template_term -> template
constructor template_negation: template -> template
constructor template_predicate: template_term -> template
val vfs = fn: term -> (indexname * typ) list * (string * typ) list
val indexOf = fn: ''a list -> ''a -> int -> int
val has_eq = fn: term -> bool
val term2template = fn:
   (indexname * typ) list -> (string * typ) list -> term -> template_term
val lemma2predicate = fn: term -> term -> template
val makeTemplatewithContext = fn: term -> term -> template
val lemma2template = fn: term -> template
val thm2template = fn: thm -> template
val tterm2string = fn: template_term -> string
val template2string = fn: template -> string
val t = "height ?t <= size ?t": thm
val th =
   Const ("HOL.Trueprop", "bool => prop") $
     (Const ("Orderings.ord_class.less_eq", "nat => nat => bool") $
       (Const ("Tree.height_class.height", "?'a tree => nat") $
         Var (("t", 0), "?'a tree")) $
       (Const ("Nat.size_class.size", "?'a tree => nat") $
         Var (("t", 0), "?'a tree"))):
   term
### theory "Draft.Templates"
### 0.072s elapsed time, 0.170s cpu time, 0.057s GC time
Loading theory "Draft.ExtrEqs" (required by "Draft.Elliptic_AxclassMoreTemplates")
locale weak_bounded_lattice
  fixes L :: "('a, 'b) gorder_scheme"  (structure)
  assumes "weak_bounded_lattice L"
locale upper_semilattice
  fixes L :: "('a, 'b) gorder_scheme"  (structure)
  assumes "upper_semilattice L"
locale lower_semilattice
  fixes L :: "('a, 'b) gorder_scheme"  (structure)
  assumes "lower_semilattice L"
locale Lattice.lattice
  fixes L :: "('a, 'b) gorder_scheme"  (structure)
  assumes "lattice L"
locale Lattice.bounded_lattice
  fixes L :: "('a, 'b) gorder_scheme"  (structure)
  assumes "bounded_lattice L"
locale Lattice.bounded_lattice
  fixes L :: "('a, 'b) gorder_scheme"  (structure)
  assumes "bounded_lattice L"
### theory "HOL-Algebra.Lattice"
### 0.662s elapsed time, 1.407s cpu time, 0.183s GC time
Loading theory "HOL-Algebra.Complete_Lattice" (required by "Draft.Elliptic_AxclassMoreTemplates" via "Draft.Elliptic_Axclass" via "HOL-Decision_Procs.Reflective_Field" via "HOL-Decision_Procs.Commutative_Ring" via "HOL-Decision_Procs.Algebra_Aux" via "HOL-Algebra.Ring" via "HOL-Algebra.FiniteProduct" via "HOL-Algebra.Group")
locale weak_complete_lattice
  fixes L :: "('a, 'b) gorder_scheme"  (structure)
  assumes "weak_complete_lattice L"
locale weak_complete_lattice
  fixes L :: "('a, 'b) gorder_scheme"  (structure)
  assumes "weak_complete_lattice L"
val eqpattern =
   Pattern
    (
       Const ("HOL.Trueprop", "bool => prop") $
         (Const ("HOL.eq", "?'a => ?'a => bool") $
           Var (("_dummy_", 1), "?'a") $ Var (("_dummy_", 2), "?'a"))
       ):
   term Find_Theorems.criterion
val badeqpattern = Pattern (Const ("Pure.eq", "?'a => ?'a => prop")):
   term Find_Theorems.criterion
val undefpattern =
   Pattern
    (
       Const ("HOL.Trueprop", "bool => prop") $
         (Const ("HOL.eq", "?'a => ?'a => bool") $
           Var (("_dummy_", 1), "?'a") $ Const ("HOL.undefined", "?'a"))
       ):
   term Find_Theorems.criterion
val thmpattern =
   Pattern
    (Const ("HOL.Trueprop", "bool => prop") $ Var (("_dummy_", 1), "bool")):
   term Find_Theorems.criterion
val badnames =
   ["*nitpick*", "*Nitpick*", "*full_exhaustive*", "*_def*", "Enum.finite*",
    "*Quickcheck*", "ATP*", "*Nunchaku*", "*Code*", "*BNF*", "*SMT*",
    "*.*.*"]:
   string list
val unwanted_names =
   [(false, Name "*nitpick*"), (false, Name "*Nitpick*"),
    (false, Name "*full_exhaustive*"), (false, Name "*_def*"),
    (false, Name "Enum.finite*"), (false, Name "*Quickcheck*"),
    (false, Name "ATP*"), (false, Name "*Nunchaku*"),
    (false, Name "*Code*"), (false, Name "*BNF*"), (false, Name "*SMT*"),
    (false, Name "*.*.*")]:
   (bool * term Find_Theorems.criterion) list
val has_vars = fn: term -> bool
val get_all_eqs = fn: string -> Proof.context -> (string * thm) list
val get_all_thms = fn: string -> Proof.context -> (string * thm) list
val get_noneq_thms = fn: string -> Proof.context -> (string * thm) list
val template_eqs = fn:
   string -> Proof.context -> (string * thm * template) list
val template_thms = fn:
   string -> Proof.context -> (string * thm * template) list
### theory "Draft.ExtrEqs"
### 0.560s elapsed time, 1.175s cpu time, 0.128s GC time
locale weak_complete_lattice
  fixes L :: "('a, 'b) gorder_scheme"  (structure)
  assumes "weak_complete_lattice L"
locale Complete_Lattice.complete_lattice
  fixes L :: "('a, 'b) gorder_scheme"  (structure)
  assumes "complete_lattice L"
locale Complete_Lattice.complete_lattice
  fixes L :: "('a, 'b) gorder_scheme"  (structure)
  assumes "complete_lattice L"
locale weak_complete_lattice
  fixes L :: "('a, 'b) gorder_scheme"  (structure)
  assumes "weak_complete_lattice L"
### theory "HOL-Algebra.Complete_Lattice"
### 0.512s elapsed time, 0.798s cpu time, 0.125s GC time
Loading theory "HOL-Algebra.Group" (required by "Draft.Elliptic_AxclassMoreTemplates" via "Draft.Elliptic_Axclass" via "HOL-Decision_Procs.Reflective_Field" via "HOL-Decision_Procs.Commutative_Ring" via "HOL-Decision_Procs.Algebra_Aux" via "HOL-Algebra.Ring" via "HOL-Algebra.FiniteProduct")
locale Group.monoid
  fixes G :: "('a, 'b) monoid_scheme"  (structure)
  assumes "Group.monoid G"
locale Group.group
  fixes G :: "('a, 'b) monoid_scheme"  (structure)
  assumes "Group.group G"
overloading
  nat_pow \<equiv> pow :: ('a, 'b) monoid_scheme => 'a => nat => 'a
overloading
  int_pow \<equiv> pow :: ('a, 'b) monoid_scheme => 'a => int => 'a
locale submonoid
  fixes H :: "'a set"
    and G :: "('a, 'b) monoid_scheme"  (structure)
  assumes "submonoid H G"
locale subgroup
  fixes H :: "'a set"
    and G :: "('a, 'b) monoid_scheme"  (structure)
  assumes "subgroup H G"
locale group_hom
  fixes G :: "('a, 'b) monoid_scheme"  (structure)
    and H :: "('c, 'd) monoid_scheme"  (structure)
    and h :: "'a => 'c"
  assumes "group_hom G H h"
locale Group.comm_monoid
  fixes G :: "('a, 'b) monoid_scheme"  (structure)
  assumes "Group.comm_monoid G"
locale comm_group
  fixes G :: "('a, 'b) monoid_scheme"  (structure)
  assumes "comm_group G"
### theory "HOL-Algebra.Group"
### 1.310s elapsed time, 1.920s cpu time, 0.870s GC time
Loading theory "HOL-Algebra.FiniteProduct" (required by "Draft.Elliptic_AxclassMoreTemplates" via "Draft.Elliptic_Axclass" via "HOL-Decision_Procs.Reflective_Field" via "HOL-Decision_Procs.Commutative_Ring" via "HOL-Decision_Procs.Algebra_Aux" via "HOL-Algebra.Ring")
Proofs for inductive predicate(s) "foldSetDp"
  Proving monotonicity ...
locale LCD
  fixes B :: "'b set"
    and D :: "'a set"
    and f :: "'b => 'a => 'a"  (infixl \<open>\<cdot>\<close> 70)
  assumes "LCD B D (\<cdot>)"
locale ACeD
  fixes D :: "'a set"
    and f :: "'a => 'a => 'a"  (infixl \<open>\<cdot>\<close> 70)
    and e :: "'a"
  assumes "ACeD D (\<cdot>) e"
locale Group.comm_monoid
  fixes G :: "('a, 'b) monoid_scheme"  (structure)
  assumes "Group.comm_monoid G"
locale Group.comm_monoid
  fixes G :: "('a, 'b) monoid_scheme"  (structure)
  assumes "Group.comm_monoid G"
### theory "HOL-Algebra.FiniteProduct"
### 0.314s elapsed time, 0.360s cpu time, 0.063s GC time
Loading theory "HOL-Algebra.Ring" (required by "Draft.Elliptic_AxclassMoreTemplates" via "Draft.Elliptic_Axclass" via "HOL-Decision_Procs.Reflective_Field" via "HOL-Decision_Procs.Commutative_Ring" via "HOL-Decision_Procs.Algebra_Aux")
locale abelian_monoid
  fixes G :: "('a, 'b) ring_scheme"  (structure)
  assumes "abelian_monoid G"
locale abelian_group
  fixes G :: "('a, 'b) ring_scheme"  (structure)
  assumes "abelian_group G"
### Cannot skip proof of schematic goal statement
locale abelian_monoid
  fixes G :: "('a, 'b) ring_scheme"  (structure)
  assumes "abelian_monoid G"
### Cannot skip proof of schematic goal statement
locale abelian_monoid
  fixes G :: "('a, 'b) ring_scheme"  (structure)
  assumes "abelian_monoid G"
### Cannot skip proof of schematic goal statement
locale abelian_group
  fixes G :: "('a, 'b) ring_scheme"  (structure)
  assumes "abelian_group G"
### Cannot skip proof of schematic goal statement
locale Ring.semiring
  fixes R :: "('a, 'b) ring_scheme"  (structure)
  assumes "semiring R"
locale Ring.ring
  fixes R :: "('a, 'b) ring_scheme"  (structure)
  assumes "ring R"
locale cring
  fixes R :: "('a, 'b) ring_scheme"  (structure)
  assumes "cring R"
locale domain
  fixes R :: "('a, 'b) ring_scheme"  (structure)
  assumes "domain R"
locale Ring.field
  fixes R :: "('a, 'b) ring_scheme"  (structure)
  assumes "field R"
locale Ring.ring
  fixes R :: "('a, 'b) ring_scheme"  (structure)
  assumes "ring R"
carrier (| carrier = ?carrier, ... = ?more |) = ?carrier
partial_object.more (| carrier = ?carrier, ... = ?more |) = ?more
carrier_update ?carrier' (| carrier = ?carrier, ... = ?more |) =
(| carrier = ?carrier' ?carrier, ... = ?more |)
partial_object.more_update ?more' (| carrier = ?carrier, ... = ?more |) =
(| carrier = ?carrier, ... = ?more' ?more |)
(\<otimes>\<^bsub>(| carrier = ?carrier, mult = ?mult, one = ?one, ... = ?more |)\<^esub>) =
?mult
\<one>\<^bsub>(| carrier = ?carrier, mult = ?mult, one = ?one, ... = ?more |)\<^esub> =
?one
monoid.more
 (| carrier = ?carrier, mult = ?mult, one = ?one, ... = ?more |) =
?more
mult_update ?mult'
 (| carrier = ?carrier, mult = ?mult, one = ?one, ... = ?more |) =
(| carrier = ?carrier, mult = ?mult' ?mult, one = ?one, ... = ?more |)
one_update ?one'
 (| carrier = ?carrier, mult = ?mult, one = ?one, ... = ?more |) =
(| carrier = ?carrier, mult = ?mult, one = ?one' ?one, ... = ?more |)
monoid.more_update ?more'
 (| carrier = ?carrier, mult = ?mult, one = ?one, ... = ?more |) =
(| carrier = ?carrier, mult = ?mult, one = ?one, ... = ?more' ?more |)
locale Ring.ring
  fixes R :: "('a, 'b) ring_scheme"  (structure)
  assumes "ring R"
### ML warning (line 44 of "~~/src/HOL/Algebra/ringsimp.ML"):
### Value identifier (s) has not been referenced.
### ML warning (line 47 of "~~/src/HOL/Algebra/ringsimp.ML"):
### Matches are not exhaustive.
signature RINGSIMP =
  sig
    val add_struct: string * term list -> attribute
    val algebra_tac: Proof.context -> int -> tactic
    val del_struct: string * term list -> attribute
    val print_structures: Proof.context -> unit
  end
structure Ringsimp: RINGSIMP
locale Ring.semiring
  fixes R :: "('a, 'b) ring_scheme"  (structure)
  assumes "semiring R"
locale domain
  fixes R :: "('a, 'b) ring_scheme"  (structure)
  assumes "domain R"
locale ring_hom_cring
  fixes R :: "('a, 'b) ring_scheme"  (structure)
    and S :: "('c, 'd) ring_scheme"  (structure)
    and h :: "'a => 'c"
  assumes "ring_hom_cring R S h"
### theory "HOL-Algebra.Ring"
### 2.171s elapsed time, 3.050s cpu time, 1.240s GC time
Loading theory "HOL-Decision_Procs.Algebra_Aux" (required by "Draft.Elliptic_AxclassMoreTemplates" via "Draft.Elliptic_Axclass" via "HOL-Decision_Procs.Reflective_Field" via "HOL-Decision_Procs.Commutative_Ring")
locale Ring.ring
  fixes R :: "('a, 'b) ring_scheme"  (structure)
  assumes "ring R"
### Cannot skip proof of schematic goal statement
locale Ring.field
  fixes R :: "('a, 'b) ring_scheme"  (structure)
  assumes "field R"
### Ignoring duplicate rewrite rule:
### inv \<one> == \<one>
### Cannot skip proof of schematic goal statement
### theory "HOL-Decision_Procs.Algebra_Aux"
### 0.583s elapsed time, 0.680s cpu time, 0.131s GC time
Loading theory "HOL-Decision_Procs.Commutative_Ring" (required by "Draft.Elliptic_AxclassMoreTemplates" via "Draft.Elliptic_Axclass" via "HOL-Decision_Procs.Reflective_Field")
locale cring
  fixes R :: "('a, 'b) ring_scheme"  (structure)
  assumes "cring R"
consts
  head :: "'a list => 'a"
consts
  Ipol :: "'a list => pol => 'a"
consts
  Ipolex :: "'a list => polex => 'a"
consts
  neg :: "pol => pol"
consts
  sqr :: "pol => pol"
### Rewrite rule not in simpset:
### Wellfounded.accp pow_rel (?n1, ?P1) ==>
### pow ?n1 ?P1 ==
### if ?n1 = 0 then Pc 1
### else if even ?n1 then pow (?n1 div 2) (sqr ?P1)
###      else ?P1 \<langle>*\<rangle> pow (?n1 div 2) (sqr ?P1)
Found termination order: "(%p. size (fst p)) <*mlex*> {}"
consts
  norm :: "polex => pol"
locale cring
  fixes R :: "('a, 'b) ring_scheme"  (structure)
  assumes "cring R"
consts
  Imon :: "'a list => mon => 'a"
consts
  mkMX :: "nat => mon => mon"
Found termination order: "(%p. size (fst p)) <*mlex*> {}"
Found termination order:
  "(%p. size (fst p)) <*mlex*> (%p. size (snd p)) <*mlex*> {}"
consts
  mon_of_pol :: "pol => mon option"
Found termination order:
  "(%p. size_list (%p. size (snd p)) (snd p)) <*mlex*> {}"
Found termination order:
  "(%p. size_list (%p. size (snd p)) (snd p)) <*mlex*> {}"
Found termination order: "size_list (%p. size (snd p)) <*mlex*> {}"
Found termination order: "(%p. size (snd (snd (snd p)))) <*mlex*> {}"
Found termination order:
  "(%p. size_list (%p. size (snd p)) (fst (snd p))) <*mlex*> {}"
Found termination order:
  "(%p. size_list (%p. size (snd p)) (fst (snd p))) <*mlex*> {}"
Found termination order: "(%p. size (fst (snd (snd p)))) <*mlex*> {}"
val term_of_nat = fn: Isabelle5721584.Generated_Code.nat -> term
val term_of_int = fn: Isabelle5721584.Generated_Code.inta -> term
val term_of_pol = fn: Isabelle5721584.Generated_Code.pol -> term
val cv = fn: Proof.context -> conv
### ML warning (line 781 of "~~/src/HOL/Decision_Procs/Commutative_Ring.thy"):
### Value identifier (t) has not been referenced.
### ML warning (line 785 of "~~/src/HOL/Decision_Procs/Commutative_Ring.thy"):
### Matches are not exhaustive.
### ML warning (line 796 of "~~/src/HOL/Decision_Procs/Commutative_Ring.thy"):
### Matches are not exhaustive.
### ML warning (line 787 of "~~/src/HOL/Decision_Procs/Commutative_Ring.thy"):
### Matches are not exhaustive.
### ML warning (line 826 of "~~/src/HOL/Decision_Procs/Commutative_Ring.thy"):
### Matches are not exhaustive.
### ML warning (line 815 of "~~/src/HOL/Decision_Procs/Commutative_Ring.thy"):
### Matches are not exhaustive.
### ML warning (line 863 of "~~/src/HOL/Decision_Procs/Commutative_Ring.thy"):
### Matches are not exhaustive.
### ML warning (line 861 of "~~/src/HOL/Decision_Procs/Commutative_Ring.thy"):
### Matches are not exhaustive.
### ML warning (line 857 of "~~/src/HOL/Decision_Procs/Commutative_Ring.thy"):
### Matches are not exhaustive.
### ML warning (line 880 of "~~/src/HOL/Decision_Procs/Commutative_Ring.thy"):
### Pattern is not exhaustive.
signature RING_TAC =
  sig
    structure Ring_Simps:
      sig
        type T
        val get: Context.generic -> T
        val map: (T -> T) -> Context.generic -> Context.generic
        val put: T -> Context.generic -> Context.generic
      end
    val eq_ring_simps:
       (term * (thm list * thm list * thm list * thm list * thm * thm)) *
       (term * (thm list * thm list * thm list * thm list * thm * thm))
         -> bool
    val get_matching_rules:
       Proof.context -> (term * 'a) Net.net -> term -> 'a option
    val insert_rules:
       ((term * 'a) * (term * 'a) -> bool) ->
         term * 'a -> (term * 'a) Net.net -> (term * 'a) Net.net
    val mk_in_carrier:
       Proof.context -> term -> thm list -> (string * typ) list -> thm
    val mk_ring: typ -> term
    val norm: thm -> thm
    val ring_tac: bool -> thm list -> Proof.context -> int -> tactic
  end
structure Ring_Tac: RING_TAC
locale cring
  fixes R :: "('a, 'b) ring_scheme"  (structure)
  assumes "cring R"
### theory "HOL-Decision_Procs.Commutative_Ring"
### 4.559s elapsed time, 5.215s cpu time, 0.713s GC time
Loading theory "HOL-Decision_Procs.Reflective_Field" (required by "Draft.Elliptic_AxclassMoreTemplates" via "Draft.Elliptic_Axclass")
Found termination order: "(%p. size (snd p)) <*mlex*> {}"
consts
  feval :: "'a list => fexpr => 'a"
Found termination order: "(%p. size (snd p)) <*mlex*> {}"
Found termination order: "(%p. size (snd p)) <*mlex*> {}"
Found termination order: "(%p. size (fst (snd (snd p)))) <*mlex*> {}"
Found termination order: "(%p. size (fst p)) <*mlex*> {}"
Found termination order: "size <*mlex*> {}"
consts
  nonzero :: "'a list => pexpr list => bool"
val term_of_nat = fn: Isabelle5850642.Generated_Code.nat -> term
val term_of_int = fn: Isabelle5850642.Generated_Code.inta -> term
val term_of_pexpr = fn: Isabelle5850642.Generated_Code.pexpr -> term
val term_of_pexpr1 = fn: Isabelle5850642.Generated_Code.pexpr1 -> term
val term_of_pexpr2 = fn: Isabelle5850642.Generated_Code.pexpr2 -> term
val term_of_result = fn:
   Isabelle5850642.Generated_Code.pexpr *
   (Isabelle5850642.Generated_Code.pexpr *
    Isabelle5850642.Generated_Code.pexpr list)
     -> term
val cv = fn: Proof.context -> conv
### ML warning (line 711 of "~~/src/HOL/Decision_Procs/Reflective_Field.thy"):
### Value identifier (vs) has not been referenced.
### ML warning (line 710 of "~~/src/HOL/Decision_Procs/Reflective_Field.thy"):
### Value identifier (vs) has not been referenced.
### ML warning (line 709 of "~~/src/HOL/Decision_Procs/Reflective_Field.thy"):
### Value identifier (vs) has not been referenced.
### ML warning (line 724 of "~~/src/HOL/Decision_Procs/Reflective_Field.thy"):
### Value identifier (vs) has not been referenced.
### ML warning (line 723 of "~~/src/HOL/Decision_Procs/Reflective_Field.thy"):
### Value identifier (vs) has not been referenced.
### ML warning (line 722 of "~~/src/HOL/Decision_Procs/Reflective_Field.thy"):
### Value identifier (vs) has not been referenced.
### ML warning (line 759 of "~~/src/HOL/Decision_Procs/Reflective_Field.thy"):
### Matches are not exhaustive.
### ML warning (line 777 of "~~/src/HOL/Decision_Procs/Reflective_Field.thy"):
### Matches are not exhaustive.
### ML warning (line 767 of "~~/src/HOL/Decision_Procs/Reflective_Field.thy"):
### Matches are not exhaustive.
### ML warning (line 816 of "~~/src/HOL/Decision_Procs/Reflective_Field.thy"):
### Matches are not exhaustive.
### ML warning (line 834 of "~~/src/HOL/Decision_Procs/Reflective_Field.thy"):
### Matches are not exhaustive.
### ML warning (line 815 of "~~/src/HOL/Decision_Procs/Reflective_Field.thy"):
### Matches are not exhaustive.
### ML warning (line 804 of "~~/src/HOL/Decision_Procs/Reflective_Field.thy"):
### Matches are not exhaustive.
### ML warning (line 850 of "~~/src/HOL/Decision_Procs/Reflective_Field.thy"):
### Matches are not exhaustive.
### ML warning (line 842 of "~~/src/HOL/Decision_Procs/Reflective_Field.thy"):
### Matches are not exhaustive.
### ML warning (line 860 of "~~/src/HOL/Decision_Procs/Reflective_Field.thy"):
### Value identifier (i) has not been referenced.
### ML warning (line 885 of "~~/src/HOL/Decision_Procs/Reflective_Field.thy"):
### Pattern is not exhaustive.
### ML warning (line 886 of "~~/src/HOL/Decision_Procs/Reflective_Field.thy"):
### Pattern is not exhaustive.
signature FIELD_TAC =
  sig
    structure Field_Simps:
      sig
        type T
        val get: Context.generic -> T
        val map: (T -> T) -> Context.generic -> Context.generic
        val put: T -> Context.generic -> Context.generic
      end
    val eq_field_simps:
       (term * (thm list * thm list * thm list * thm * thm)) *
       (term * (thm list * thm list * thm list * thm * thm))
         -> bool
    val field_tac: bool -> Proof.context -> int -> tactic
  end
structure Field_Tac: FIELD_TAC
locale Ring.field
  fixes R :: "('a, 'b) ring_scheme"  (structure)
  assumes "field R"
### theory "HOL-Decision_Procs.Reflective_Field"
### 5.123s elapsed time, 6.084s cpu time, 1.149s GC time
Loading theory "Draft.Elliptic_Axclass" (required by "Draft.Elliptic_AxclassMoreTemplates")
class ell_field = field +
  assumes "two_not_zero": "(2::'a) ~= (0::'a)"
consts
  point_mult :: "'a => nat => 'a point => 'a point"
class ell_field = field +
  assumes "two_not_zero": "(2::'a) ~= (0::'a)"
consts
  ppoint_mult :: "'a => nat => 'a * 'a * 'a => 'a * 'a * 'a"
class ell_field = field +
  assumes "two_not_zero": "(2::'a) ~= (0::'a)"
### theory "Draft.Elliptic_Axclass"
### 1.916s elapsed time, 2.325s cpu time, 0.538s GC time
Loading theory "Draft.Elliptic_AxclassMoreTemplates"
val templateLemmas =
   [("Elliptic_Axclass.proj_eq_refl", "proj_eq ?p ?p",
     template_predicate
      (
         template_app
          (template_app (template_hole 0, template_var 0), template_var 0)
         )),
    ("Elliptic_Axclass.on_curve_infinity", "on_curve ?a ?b Infinity",
     template_predicate
      (
         template_app
          (template_app
            (template_app (template_hole 1, template_var 1),
             template_var 0),
           template_hole 0)
         )),
    ("Elliptic_Axclass.opp_opp", "opp (opp ?p) = ?p",
     template_equation
      (template_app
        (template_hole 0, template_app (template_hole 0, template_var 0)),
       template_var 0)),
    ("Elliptic_Axclass.add_0_l", "ell_field_class.add ?a Infinity ?p = ?p",
     template_equation
      (template_app
        (template_app
          (template_app (template_hole 1, template_var 1), template_hole 0),
         template_var 0),
       template_var 0)),
    ("Elliptic_Axclass.add_0_r", "ell_field_class.add ?a ?p Infinity = ?p",
     template_equation
      (template_app
        (template_app
          (template_app (template_hole 1, template_var 1), template_var 0),
         template_hole 0),
       template_var 0)),
    ("Elliptic_Axclass.on_curvep_infinity",
     "on_curvep ?a ?b (?x, ?y, 0::?'a)",
     template_predicate
      (
         template_app
          (template_app
            (template_app (template_hole 3, template_var 3),
             template_var 2),
           template_app
            (template_app (template_hole 2, template_var 1),
             template_app
              (template_app (template_hole 1, template_var 0),
               template_hole 0)))
         )),
    ("Elliptic_Axclass.eq_opp_is_zero", "(?x = - ?x) = (?x = (0::?'a))",
     template_bimplication
      (template_equation
        (template_var 0, template_app (template_hole 1, template_var 0)),
       template_equation (template_var 0, template_hole 0))),
    ("Elliptic_Axclass.make_affine_infinity",
     "make_affine (?x, ?y, 0::?'a) = Infinity",
     template_equation
      (template_app
        (template_hole 4,
         template_app
          (template_app (template_hole 3, template_var 1),
           template_app
            (template_app (template_hole 2, template_var 0),
             template_hole 1))),
       template_hole 0)),
    ("Elliptic_Axclass.proj_eq_sym", "proj_eq ?p ?p' ==> proj_eq ?p' ?p",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 0, template_var 1),
              template_var 0)
            )],
       template_predicate
        (
           template_app
            (template_app (template_hole 0, template_var 0), template_var 1)
           ))),
    ("Elliptic_Axclass.make_affine_proj_eq_iff",
     "proj_eq ?p ?p' = (make_affine ?p = make_affine ?p')",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 2, template_var 1),
              template_var 0)
            )],
       template_equation
        (template_app (template_hole 0, template_var 1),
         template_app (template_hole 0, template_var 0)))),
    ("Elliptic_Axclass.opp_Point", "opp (Point ?x ?y) = Point ?x (- ?y)",
     template_equation
      (template_app
        (template_hole 2,
         template_app
          (template_app (template_hole 1, template_var 1), template_var 0)),
       template_app
        (template_app (template_hole 1, template_var 1),
         template_app (template_hole 0, template_var 0)))),
    ("Elliptic_Axclass.on_curvep_iff_on_curve",
     "on_curvep ?a ?b ?p = on_curve ?a ?b (make_affine ?p)",
     template_equation
      (template_app
        (template_app
          (template_app (template_hole 2, template_var 2), template_var 1),
         template_var 0),
       template_app
        (template_app
          (template_app (template_hole 1, template_var 2), template_var 1),
         template_app (template_hole 0, template_var 0)))),
    ("Elliptic_Axclass.padd_infinity_l", "padd ?a (?x, ?y, 0::?'a) ?p = ?p",
     template_equation
      (template_app
        (template_app
          (template_app (template_hole 3, template_var 3),
           template_app
            (template_app (template_hole 2, template_var 2),
             template_app
              (template_app (template_hole 1, template_var 1),
               template_hole 0))),
         template_var 0),
       template_var 0)),
    ("Elliptic_Axclass.pdouble_correct",
     "make_affine (pdouble ?a ?p) =
      ell_field_class.add ?a (make_affine ?p) (make_affine ?p)",
     template_equation
      (template_app
        (template_hole 2,
         template_app
          (template_app (template_hole 1, template_var 1), template_var 0)),
       template_app
        (template_app
          (template_app (template_hole 0, template_var 1),
           template_app (template_hole 2, template_var 0)),
         template_app (template_hole 2, template_var 0)))),
    ("Elliptic_Axclass.point_mult2_eq_double",
     "point_mult ?a 2 ?p = ell_field_class.add ?a ?p ?p",
     template_equation
      (template_app
        (template_app
          (template_app (template_hole 4, template_var 1),
           template_app
            (template_hole 3,
             template_app (template_hole 2, template_hole 1))),
         template_var 0),
       template_app
        (template_app
          (template_app (template_hole 0, template_var 1), template_var 0),
         template_var 0))),
    ("Elliptic_Axclass.opp_closed",
     "on_curve ?a ?b ?p ==> on_curve ?a ?b (opp ?p)",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app (template_hole 1, template_var 2),
                template_var 1),
              template_var 0)
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_app (template_hole 1, template_var 2),
               template_var 1),
             template_app (template_hole 0, template_var 0))
           ))),
    ("Elliptic_Axclass.pdouble_proj_eq_cong",
     "proj_eq ?p ?p' ==> proj_eq (pdouble ?a ?p) (pdouble ?a ?p')",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 1, template_var 2),
              template_var 1)
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 1,
               template_app
                (template_app (template_hole 0, template_var 0),
                 template_var 2)),
             template_app
              (template_app (template_hole 0, template_var 0),
               template_var 1))
           ))),
    ("Elliptic_Axclass.pdouble_closed",
     "on_curvep ?a ?b ?p ==> on_curvep ?a ?b (pdouble ?a ?p)",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app (template_hole 1, template_var 2),
                template_var 1),
              template_var 0)
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_app (template_hole 1, template_var 2),
               template_var 1),
             template_app
              (template_app (template_hole 0, template_var 2),
               template_var 0))
           ))),
    ("Elliptic_Axclass.diff_neq0", "?a ~= ?b ==> ?a - ?b ~= (0::?'a)",
     template_implication
      ([template_negation
         (template_equation (template_var 1, template_var 0))],
       template_negation
        (
           template_equation
            (template_app
              (template_app (template_hole 1, template_var 1),
               template_var 0),
             template_hole 0)
           ))),
    ("Elliptic_Axclass.diff_neq0", "?a ~= ?b ==> ?b - ?a ~= (0::?'a)",
     template_implication
      ([template_negation
         (template_equation (template_var 1, template_var 0))],
       template_negation
        (
           template_equation
            (template_app
              (template_app (template_hole 1, template_var 0),
               template_var 1),
             template_hole 0)
           ))),
    ("Elliptic_Axclass.uniq_opp",
     "ell_field_class.add ?a ?p\<^sub>1 ?p\<^sub>2 = Infinity ==>
      ?p\<^sub>2 = opp ?p\<^sub>1",
     template_implication
      ([template_equation
         (template_app
           (template_app
             (template_app (template_hole 2, template_var 2),
              template_var 1),
            template_var 0),
          template_hole 1)],
       template_equation
        (template_var 0, template_app (template_hole 0, template_var 1)))),
    ("Elliptic_Axclass.pdouble_infinity",
     "pdouble ?a (?x, ?y, 0::?'a) = (?x, ?y, 0::?'a)",
     template_equation
      (template_app
        (template_app (template_hole 3, template_var 2),
         template_app
          (template_app (template_hole 2, template_var 1),
           template_app
            (template_app (template_hole 1, template_var 0),
             template_hole 0))),
       template_app
        (template_app (template_hole 2, template_var 1),
         template_app
          (template_app (template_hole 1, template_var 0),
           template_hole 0)))),
    ("Elliptic_Axclass.point_mult_closed",
     "on_curve ?a ?b ?p ==> on_curve ?a ?b (point_mult ?a ?n ?p)",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app (template_hole 1, template_var 3),
                template_var 2),
              template_var 1)
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_app (template_hole 1, template_var 3),
               template_var 2),
             template_app
              (template_app
                (template_app (template_hole 0, template_var 3),
                 template_var 0),
               template_var 1))
           ))),
    ("Elliptic_Axclass.add_opp",
     "on_curve ?a ?b ?p ==> ell_field_class.add ?a ?p (opp ?p) = Infinity",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app (template_hole 4, template_var 2),
                template_var 1),
              template_var 0)
            )],
       template_equation
        (template_app
          (template_app
            (template_app (template_hole 2, template_var 2),
             template_var 0),
           template_app (template_hole 1, template_var 0)),
         template_hole 0))),
    ("Elliptic_Axclass.ppoint_mult_closed",
     "on_curvep ?a ?b ?p ==> on_curvep ?a ?b (ppoint_mult ?a ?n ?p)",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app (template_hole 1, template_var 3),
                template_var 2),
              template_var 1)
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_app (template_hole 1, template_var 3),
               template_var 2),
             template_app
              (template_app
                (template_app (template_hole 0, template_var 3),
                 template_var 0),
               template_var 1))
           ))),
    ("Elliptic_Axclass.ppoint_mult_correct",
     "on_curvep ?a ?b ?p ==>
      make_affine (ppoint_mult ?a ?n ?p) =
      point_mult ?a ?n (make_affine ?p)",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app (template_hole 4, template_var 3),
                template_var 2),
              template_var 1)
            )],
       template_equation
        (template_app
          (template_hole 2,
           template_app
            (template_app
              (template_app (template_hole 1, template_var 3),
               template_var 0),
             template_var 1)),
         template_app
          (template_app
            (template_app (template_hole 0, template_var 3),
             template_var 0),
           template_app (template_hole 2, template_var 1))))),
    ("Elliptic_Axclass.add_closed",
     "[| on_curve ?a ?b ?p\<^sub>1; on_curve ?a ?b ?p\<^sub>2 |]
      ==> on_curve ?a ?b (ell_field_class.add ?a ?p\<^sub>1 ?p\<^sub>2)",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app (template_hole 1, template_var 3),
                template_var 2),
              template_var 1)
            ),
        template_predicate
         (
            template_app
             (template_app
               (template_app (template_hole 1, template_var 3),
                template_var 2),
              template_var 0)
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_app (template_hole 1, template_var 3),
               template_var 2),
             template_app
              (template_app
                (template_app (template_hole 0, template_var 3),
                 template_var 1),
               template_var 0))
           ))),
    ("Elliptic_Axclass.padd_closed",
     "[| on_curvep ?a ?b ?p\<^sub>1; on_curvep ?a ?b ?p\<^sub>2 |]
      ==> on_curvep ?a ?b (padd ?a ?p\<^sub>1 ?p\<^sub>2)",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app (template_hole 1, template_var 3),
                template_var 2),
              template_var 1)
            ),
        template_predicate
         (
            template_app
             (template_app
               (template_app (template_hole 1, template_var 3),
                template_var 2),
              template_var 0)
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_app (template_hole 1, template_var 3),
               template_var 2),
             template_app
              (template_app
                (template_app (template_hole 0, template_var 3),
                 template_var 1),
               template_var 0))
           ))),
    ("Elliptic_Axclass.add_comm",
     "[| on_curve ?a ?b ?p\<^sub>1; on_curve ?a ?b ?p\<^sub>2 |]
      ==> ell_field_class.add ?a ?p\<^sub>1 ?p\<^sub>2 =
          ell_field_class.add ?a ?p\<^sub>2 ?p\<^sub>1",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app (template_hole 2, template_var 3),
                template_var 2),
              template_var 1)
            ),
        template_predicate
         (
            template_app
             (template_app
               (template_app (template_hole 2, template_var 3),
                template_var 2),
              template_var 0)
            )],
       template_equation
        (template_app
          (template_app
            (template_app (template_hole 0, template_var 3),
             template_var 1),
           template_var 0),
         template_app
          (template_app
            (template_app (template_hole 0, template_var 3),
             template_var 0),
           template_var 1)))),
    ("Elliptic_Axclass.opp_add",
     "[| on_curve ?a ?b ?p\<^sub>1; on_curve ?a ?b ?p\<^sub>2 |]
      ==> opp (ell_field_class.add ?a ?p\<^sub>1 ?p\<^sub>2) =
          ell_field_class.add ?a (opp ?p\<^sub>1) (opp ?p\<^sub>2)",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app (template_hole 3, template_var 3),
                template_var 2),
              template_var 1)
            ),
        template_predicate
         (
            template_app
             (template_app
               (template_app (template_hole 3, template_var 3),
                template_var 2),
              template_var 0)
            )],
       template_equation
        (template_app
          (template_hole 1,
           template_app
            (template_app
              (template_app (template_hole 0, template_var 3),
               template_var 1),
             template_var 0)),
         template_app
          (template_app
            (template_app (template_hole 0, template_var 3),
             template_app (template_hole 1, template_var 1)),
           template_app (template_hole 1, template_var 0))))),
    ("Elliptic_Axclass.padd_correct",
     "[| on_curvep ?a ?b ?p\<^sub>1; on_curvep ?a ?b ?p\<^sub>2 |]
      ==> make_affine (padd ?a ?p\<^sub>1 ?p\<^sub>2) =
          ell_field_class.add ?a (make_affine ?p\<^sub>1)
           (make_affine ?p\<^sub>2)",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app (template_hole 4, template_var 3),
                template_var 2),
              template_var 1)
            ),
        template_predicate
         (
            template_app
             (template_app
               (template_app (template_hole 4, template_var 3),
                template_var 2),
              template_var 0)
            )],
       template_equation
        (template_app
          (template_hole 2,
           template_app
            (template_app
              (template_app (template_hole 1, template_var 3),
               template_var 1),
             template_var 0)),
         template_app
          (template_app
            (template_app (template_hole 0, template_var 3),
             template_app (template_hole 2, template_var 1)),
           template_app (template_hole 2, template_var 0))))),
    ("Elliptic_Axclass.point_mult_mult",
     "[| on_curve ?a ?b ?p; nonsingular ?a ?b |]
      ==> point_mult ?a (?m * ?n) ?p =
          point_mult ?a ?n (point_mult ?a ?m ?p)",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app (template_hole 4, template_var 4),
                template_var 3),
              template_var 2)
            ),
        template_predicate
         (
            template_app
             (template_app (template_hole 3, template_var 4),
              template_var 3)
            )],
       template_equation
        (template_app
          (template_app
            (template_app (template_hole 1, template_var 4),
             template_app
              (template_app (template_hole 0, template_var 1),
               template_var 0)),
           template_var 2),
         template_app
          (template_app
            (template_app (template_hole 1, template_var 4),
             template_var 0),
           template_app
            (template_app
              (template_app (template_hole 1, template_var 4),
               template_var 1),
             template_var 2))))),
    ("Elliptic_Axclass.proj_eq_trans",
     "[| ?in_carrierp ?p; ?in_carrierp ?p'; ?in_carrierp ?p'';
         proj_eq ?p ?p'; proj_eq ?p' ?p'' |]
      ==> proj_eq ?p ?p''",
     template_implication
      ([template_predicate (template_app (template_var 3, template_var 2)),
        template_predicate (template_app (template_var 3, template_var 1)),
        template_predicate (template_app (template_var 3, template_var 0)),
        template_predicate
         (
            template_app
             (template_app (template_hole 0, template_var 2),
              template_var 1)
            ),
        template_predicate
         (
            template_app
             (template_app (template_hole 0, template_var 1),
              template_var 0)
            )],
       template_predicate
        (
           template_app
            (template_app (template_hole 0, template_var 2), template_var 0)
           ))),
    ("Elliptic_Axclass.add_minus_id",
     "[| nonsingular ?a ?b; on_curve ?a ?b ?p\<^sub>1;
         on_curve ?a ?b ?p\<^sub>2 |]
      ==> ell_field_class.add ?a
           (ell_field_class.add ?a ?p\<^sub>1 ?p\<^sub>2) (opp ?p\<^sub>2) =
          ?p\<^sub>1",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 4, template_var 3),
              template_var 2)
            ),
        template_predicate
         (
            template_app
             (template_app
               (template_app (template_hole 3, template_var 3),
                template_var 2),
              template_var 1)
            ),
        template_predicate
         (
            template_app
             (template_app
               (template_app (template_hole 3, template_var 3),
                template_var 2),
              template_var 0)
            )],
       template_equation
        (template_app
          (template_app
            (template_app (template_hole 1, template_var 3),
             template_app
              (template_app
                (template_app (template_hole 1, template_var 3),
                 template_var 1),
               template_var 0)),
           template_app (template_hole 0, template_var 0)),
         template_var 1))),
    ("Elliptic_Axclass.point_mult_add",
     "[| on_curve ?a ?b ?p; nonsingular ?a ?b |]
      ==> point_mult ?a (?m + ?n) ?p =
          ell_field_class.add ?a (point_mult ?a ?m ?p)
           (point_mult ?a ?n ?p)",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app (template_hole 5, template_var 4),
                template_var 3),
              template_var 2)
            ),
        template_predicate
         (
            template_app
             (template_app (template_hole 4, template_var 4),
              template_var 3)
            )],
       template_equation
        (template_app
          (template_app
            (template_app (template_hole 2, template_var 4),
             template_app
              (template_app (template_hole 1, template_var 1),
               template_var 0)),
           template_var 2),
         template_app
          (template_app
            (template_app (template_hole 0, template_var 4),
             template_app
              (template_app
                (template_app (template_hole 2, template_var 4),
                 template_var 1),
               template_var 2)),
           template_app
            (template_app
              (template_app (template_hole 2, template_var 4),
               template_var 0),
             template_var 2))))),
    ("Elliptic_Axclass.uniq_zero",
     "[| nonsingular ?a ?b; on_curve ?a ?b ?p\<^sub>1;
         on_curve ?a ?b ?p\<^sub>2;
         ell_field_class.add ?a ?p\<^sub>1 ?p\<^sub>2 = ?p\<^sub>2 |]
      ==> ?p\<^sub>1 = Infinity",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 4, template_var 3),
              template_var 2)
            ),
        template_predicate
         (
            template_app
             (template_app
               (template_app (template_hole 3, template_var 3),
                template_var 2),
              template_var 1)
            ),
        template_predicate
         (
            template_app
             (template_app
               (template_app (template_hole 3, template_var 3),
                template_var 2),
              template_var 0)
            ),
        template_equation
         (template_app
           (template_app
             (template_app (template_hole 1, template_var 3),
              template_var 1),
            template_var 0),
          template_var 0)],
       template_equation (template_var 1, template_hole 0))),
    ("Elliptic_Axclass.spec4_assoc",
     "[| nonsingular ?a ?b; on_curve ?a ?b ?p\<^sub>1;
         on_curve ?a ?b ?p\<^sub>2 |]
      ==> ell_field_class.add ?a ?p\<^sub>1
           (ell_field_class.add ?a ?p\<^sub>2 ?p\<^sub>2) =
          ell_field_class.add ?a
           (ell_field_class.add ?a ?p\<^sub>1 ?p\<^sub>2) ?p\<^sub>2",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 3, template_var 3),
              template_var 2)
            ),
        template_predicate
         (
            template_app
             (template_app
               (template_app (template_hole 2, template_var 3),
                template_var 2),
              template_var 1)
            ),
        template_predicate
         (
            template_app
             (template_app
               (template_app (template_hole 2, template_var 3),
                template_var 2),
              template_var 0)
            )],
       template_equation
        (template_app
          (template_app
            (template_app (template_hole 0, template_var 3),
             template_var 1),
           template_app
            (template_app
              (template_app (template_hole 0, template_var 3),
               template_var 0),
             template_var 0)),
         template_app
          (template_app
            (template_app (template_hole 0, template_var 3),
             template_app
              (template_app
                (template_app (template_hole 0, template_var 3),
                 template_var 1),
               template_var 0)),
           template_var 0)))),
    ("Elliptic_Axclass.add_opp_double_opp",
     "[| nonsingular ?a ?b; on_curve ?a ?b ?p\<^sub>1;
         on_curve ?a ?b ?p\<^sub>2;
         ell_field_class.add ?a ?p\<^sub>1 ?p\<^sub>2 = opp ?p\<^sub>1 |]
      ==> ?p\<^sub>2 =
          ell_field_class.add ?a (opp ?p\<^sub>1) (opp ?p\<^sub>1)",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 4, template_var 3),
              template_var 2)
            ),
        template_predicate
         (
            template_app
             (template_app
               (template_app (template_hole 3, template_var 3),
                template_var 2),
              template_var 1)
            ),
        template_predicate
         (
            template_app
             (template_app
               (template_app (template_hole 3, template_var 3),
                template_var 2),
              template_var 0)
            ),
        template_equation
         (template_app
           (template_app
             (template_app (template_hole 1, template_var 3),
              template_var 1),
            template_var 0),
          template_app (template_hole 0, template_var 1))],
       template_equation
        (template_var 0,
         template_app
          (template_app
            (template_app (template_hole 1, template_var 3),
             template_app (template_hole 0, template_var 1)),
           template_app (template_hole 0, template_var 1))))),
    ("Elliptic_Axclass.compat_add_opp",
     "[| on_curve ?a ?b ?p\<^sub>1; on_curve ?a ?b ?p\<^sub>2;
         ell_field_class.add ?a ?p\<^sub>1 ?p\<^sub>2 =
         ell_field_class.add ?a ?p\<^sub>1 (opp ?p\<^sub>2);
         ?p\<^sub>1 ~= opp ?p\<^sub>1 |]
      ==> ?p\<^sub>2 = opp ?p\<^sub>2",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app (template_hole 4, template_var 3),
                template_var 2),
              template_var 1)
            ),
        template_predicate
         (
            template_app
             (template_app
               (template_app (template_hole 4, template_var 3),
                template_var 2),
              template_var 0)
            ),
        template_equation
         (template_app
           (template_app
             (template_app (template_hole 2, template_var 3),
              template_var 1),
            template_var 0),
          template_app
           (template_app
             (template_app (template_hole 2, template_var 3),
              template_var 1),
            template_app (template_hole 1, template_var 0))),
        template_negation
         (
            template_equation
             (template_var 1,
              template_app (template_hole 1, template_var 1))
            )],
       template_equation
        (template_var 0, template_app (template_hole 1, template_var 0)))),
    ("Elliptic_Axclass.cancel",
     "[| nonsingular ?a ?b; on_curve ?a ?b ?p\<^sub>1;
         on_curve ?a ?b ?p\<^sub>2; on_curve ?a ?b ?p\<^sub>3;
         ell_field_class.add ?a ?p\<^sub>1 ?p\<^sub>2 =
         ell_field_class.add ?a ?p\<^sub>1 ?p\<^sub>3 |]
      ==> ?p\<^sub>2 = ?p\<^sub>3",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 3, template_var 4),
              template_var 3)
            ),
        template_predicate
         (
            template_app
             (template_app
               (template_app (template_hole 2, template_var 4),
                template_var 3),
              template_var 2)
            ),
        template_predicate
         (
            template_app
             (template_app
               (template_app (template_hole 2, template_var 4),
                template_var 3),
              template_var 1)
            ),
        template_predicate
         (
            template_app
             (template_app
               (template_app (template_hole 2, template_var 4),
                template_var 3),
              template_var 0)
            ),
        template_equation
         (template_app
           (template_app
             (template_app (template_hole 0, template_var 4),
              template_var 2),
            template_var 1),
          template_app
           (template_app
             (template_app (template_hole 0, template_var 4),
              template_var 2),
            template_var 0))],
       template_equation (template_var 1, template_var 0))),
    ("Elliptic_Axclass.compat_add_triple",
     "[| nonsingular ?a ?b; on_curve ?a ?b ?p; ?p ~= opp ?p;
         ell_field_class.add ?a ?p ?p ~= opp ?p |]
      ==> ell_field_class.add ?a (ell_field_class.add ?a ?p ?p) (opp ?p) =
          ?p",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 5, template_var 2),
              template_var 1)
            ),
        template_predicate
         (
            template_app
             (template_app
               (template_app (template_hole 4, template_var 2),
                template_var 1),
              template_var 0)
            ),
        template_negation
         (
            template_equation
             (template_var 0,
              template_app (template_hole 1, template_var 0))
            ),
        template_negation
         (
            template_equation
             (template_app
               (template_app
                 (template_app (template_hole 0, template_var 2),
                  template_var 0),
                template_var 0),
              template_app (template_hole 1, template_var 0))
            )],
       template_equation
        (template_app
          (template_app
            (template_app (template_hole 0, template_var 2),
             template_app
              (template_app
                (template_app (template_hole 0, template_var 2),
                 template_var 0),
               template_var 0)),
           template_app (template_hole 1, template_var 0)),
         template_var 0))),
    ("Elliptic_Axclass.add_assoc",
     "[| nonsingular ?a ?b; on_curve ?a ?b ?p\<^sub>1;
         on_curve ?a ?b ?p\<^sub>2; on_curve ?a ?b ?p\<^sub>3 |]
      ==> ell_field_class.add ?a ?p\<^sub>1
           (ell_field_class.add ?a ?p\<^sub>2 ?p\<^sub>3) =
          ell_field_class.add ?a
           (ell_field_class.add ?a ?p\<^sub>1 ?p\<^sub>2) ?p\<^sub>3",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 3, template_var 4),
              template_var 3)
            ),
        template_predicate
         (
            template_app
             (template_app
               (template_app (template_hole 2, template_var 4),
                template_var 3),
              template_var 2)
            ),
        template_predicate
         (
            template_app
             (template_app
               (template_app (template_hole 2, template_var 4),
                template_var 3),
              template_var 1)
            ),
        template_predicate
         (
            template_app
             (template_app
               (template_app (template_hole 2, template_var 4),
                template_var 3),
              template_var 0)
            )],
       template_equation
        (template_app
          (template_app
            (template_app (template_hole 0, template_var 4),
             template_var 2),
           template_app
            (template_app
              (template_app (template_hole 0, template_var 4),
               template_var 1),
             template_var 0)),
         template_app
          (template_app
            (template_app (template_hole 0, template_var 4),
             template_app
              (template_app
                (template_app (template_hole 0, template_var 4),
                 template_var 2),
               template_var 1)),
           template_var 0)))),
    ("Elliptic_Axclass.add_comm'",
     "[| nonsingular ?a ?b; on_curve ?a ?b ?p\<^sub>1;
         on_curve ?a ?b ?p\<^sub>2; on_curve ?a ?b ?p\<^sub>3 |]
      ==> ell_field_class.add ?a ?p\<^sub>2
           (ell_field_class.add ?a ?p\<^sub>1 ?p\<^sub>3) =
          ell_field_class.add ?a ?p\<^sub>1
           (ell_field_class.add ?a ?p\<^sub>2 ?p\<^sub>3)",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 3, template_var 4),
              template_var 3)
            ),
        template_predicate
         (
            template_app
             (template_app
               (template_app (template_hole 2, template_var 4),
                template_var 3),
              template_var 2)
            ),
        template_predicate
         (
            template_app
             (template_app
               (template_app (template_hole 2, template_var 4),
                template_var 3),
              template_var 1)
            ),
        template_predicate
         (
            template_app
             (template_app
               (template_app (template_hole 2, template_var 4),
                template_var 3),
              template_var 0)
            )],
       template_equation
        (template_app
          (template_app
            (template_app (template_hole 0, template_var 4),
             template_var 1),
           template_app
            (template_app
              (template_app (template_hole 0, template_var 4),
               template_var 2),
             template_var 0)),
         template_app
          (template_app
            (template_app (template_hole 0, template_var 4),
             template_var 2),
           template_app
            (template_app
              (template_app (template_hole 0, template_var 4),
               template_var 1),
             template_var 0))))),
    ("Elliptic_Axclass.add_shift_minus",
     "[| nonsingular ?a ?b; on_curve ?a ?b ?p\<^sub>1;
         on_curve ?a ?b ?p\<^sub>2; on_curve ?a ?b ?p\<^sub>3;
         ell_field_class.add ?a ?p\<^sub>1 ?p\<^sub>2 = ?p\<^sub>3 |]
      ==> ?p\<^sub>1 = ell_field_class.add ?a ?p\<^sub>3 (opp ?p\<^sub>2)",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 4, template_var 4),
              template_var 3)
            ),
        template_predicate
         (
            template_app
             (template_app
               (template_app (template_hole 3, template_var 4),
                template_var 3),
              template_var 2)
            ),
        template_predicate
         (
            template_app
             (template_app
               (template_app (template_hole 3, template_var 4),
                template_var 3),
              template_var 1)
            ),
        template_predicate
         (
            template_app
             (template_app
               (template_app (template_hole 3, template_var 4),
                template_var 3),
              template_var 0)
            ),
        template_equation
         (template_app
           (template_app
             (template_app (template_hole 1, template_var 4),
              template_var 2),
            template_var 1),
          template_var 0)],
       template_equation
        (template_var 2,
         template_app
          (template_app
            (template_app (template_hole 1, template_var 4),
             template_var 0),
           template_app (template_hole 0, template_var 1))))),
    ("Elliptic_Axclass.curve_elt_opp",
     "[| ?p\<^sub>1 = Point ?x\<^sub>1 ?y\<^sub>1;
         ?p\<^sub>2 = Point ?x\<^sub>2 ?y\<^sub>2;
         on_curve ?a ?b ?p\<^sub>1; on_curve ?a ?b ?p\<^sub>2;
         ?x\<^sub>1 = ?x\<^sub>2 |]
      ==> ?p\<^sub>1 = ?p\<^sub>2 | ?p\<^sub>1 = opp ?p\<^sub>2",
     template_implication
      ([template_equation
         (template_var 7,
          template_app
           (template_app (template_hole 4, template_var 6),
            template_var 5)),
        template_equation
         (template_var 4,
          template_app
           (template_app (template_hole 4, template_var 3),
            template_var 2)),
        template_predicate
         (
            template_app
             (template_app
               (template_app (template_hole 3, template_var 1),
                template_var 0),
              template_var 7)
            ),
        template_predicate
         (
            template_app
             (template_app
               (template_app (template_hole 3, template_var 1),
                template_var 0),
              template_var 4)
            ),
        template_equation (template_var 6, template_var 3)],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 1,
               template_app
                (template_app (template_hole 5, template_var 7),
                 template_var 4)),
             template_app
              (template_app (template_hole 5, template_var 7),
               template_app (template_hole 0, template_var 4)))
           ))),
    ("Elliptic_Axclass.padd_proj_eq_cong",
     "[| on_curvep ?a ?b ?p\<^sub>1; on_curvep ?a ?b ?p\<^sub>1';
         on_curvep ?a ?b ?p\<^sub>2; on_curvep ?a ?b ?p\<^sub>2';
         proj_eq ?p\<^sub>1 ?p\<^sub>1'; proj_eq ?p\<^sub>2 ?p\<^sub>2' |]
      ==> proj_eq (padd ?a ?p\<^sub>1 ?p\<^sub>2)
           (padd ?a ?p\<^sub>1' ?p\<^sub>2')",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app (template_hole 2, template_var 5),
                template_var 4),
              template_var 3)
            ),
        template_predicate
         (
            template_app
             (template_app
               (template_app (template_hole 2, template_var 5),
                template_var 4),
              template_var 2)
            ),
        template_predicate
         (
            template_app
             (template_app
               (template_app (template_hole 2, template_var 5),
                template_var 4),
              template_var 1)
            ),
        template_predicate
         (
            template_app
             (template_app
               (template_app (template_hole 2, template_var 5),
                template_var 4),
              template_var 0)
            ),
        template_predicate
         (
            template_app
             (template_app (template_hole 1, template_var 3),
              template_var 2)
            ),
        template_predicate
         (
            template_app
             (template_app (template_hole 1, template_var 1),
              template_var 0)
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 1,
               template_app
                (template_app
                  (template_app (template_hole 0, template_var 5),
                   template_var 3),
                 template_var 1)),
             template_app
              (template_app
                (template_app (template_hole 0, template_var 5),
                 template_var 2),
               template_var 0))
           ))),
    ("Elliptic_Axclass.spec1_assoc",
     "[| on_curve ?a ?b ?p\<^sub>1; on_curve ?a ?b ?p\<^sub>2;
         on_curve ?a ?b ?p\<^sub>3; is_generic ?p\<^sub>1 ?p\<^sub>2;
         is_generic ?p\<^sub>2 ?p\<^sub>3;
         is_generic (ell_field_class.add ?a ?p\<^sub>1 ?p\<^sub>2)
          ?p\<^sub>3;
         is_generic ?p\<^sub>1
          (ell_field_class.add ?a ?p\<^sub>2 ?p\<^sub>3) |]
      ==> ell_field_class.add ?a ?p\<^sub>1
           (ell_field_class.add ?a ?p\<^sub>2 ?p\<^sub>3) =
          ell_field_class.add ?a
           (ell_field_class.add ?a ?p\<^sub>1 ?p\<^sub>2) ?p\<^sub>3",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app (template_hole 3, template_var 4),
                template_var 3),
              template_var 2)
            ),
        template_predicate
         (
            template_app
             (template_app
               (template_app (template_hole 3, template_var 4),
                template_var 3),
              template_var 1)
            ),
        template_predicate
         (
            template_app
             (template_app
               (template_app (template_hole 3, template_var 4),
                template_var 3),
              template_var 0)
            ),
        template_predicate
         (
            template_app
             (template_app (template_hole 2, template_var 2),
              template_var 1)
            ),
        template_predicate
         (
            template_app
             (template_app (template_hole 2, template_var 1),
              template_var 0)
            ),
        template_predicate
         (
            template_app
             (template_app
               (template_hole 2,
                template_app
                 (template_app
                   (template_app (template_hole 1, template_var 4),
                    template_var 2),
                  template_var 1)),
              template_var 0)
            ),
        template_predicate
         (
            template_app
             (template_app (template_hole 2, template_var 2),
              template_app
               (template_app
                 (template_app (template_hole 1, template_var 4),
                  template_var 1),
                template_var 0))
            )],
       template_equation
        (template_app
          (template_app
            (template_app (template_hole 1, template_var 4),
             template_var 2),
           template_app
            (template_app
              (template_app (template_hole 1, template_var 4),
               template_var 1),
             template_var 0)),
         template_app
          (template_app
            (template_app (template_hole 1, template_var 4),
             template_app
              (template_app
                (template_app (template_hole 1, template_var 4),
                 template_var 2),
               template_var 1)),
           template_var 0)))),
    ("Elliptic_Axclass.spec2_assoc",
     "[| on_curve ?a ?b ?p\<^sub>1; on_curve ?a ?b ?p\<^sub>2;
         on_curve ?a ?b ?p\<^sub>3; is_generic ?p\<^sub>1 ?p\<^sub>2;
         is_tangent ?p\<^sub>2 ?p\<^sub>3;
         is_generic (ell_field_class.add ?a ?p\<^sub>1 ?p\<^sub>2)
          ?p\<^sub>3;
         is_generic ?p\<^sub>1
          (ell_field_class.add ?a ?p\<^sub>2 ?p\<^sub>3) |]
      ==> ell_field_class.add ?a ?p\<^sub>1
           (ell_field_class.add ?a ?p\<^sub>2 ?p\<^sub>3) =
          ell_field_class.add ?a
           (ell_field_class.add ?a ?p\<^sub>1 ?p\<^sub>2) ?p\<^sub>3",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app (template_hole 4, template_var 4),
                template_var 3),
              template_var 2)
            ),
        template_predicate
         (
            template_app
             (template_app
               (template_app (template_hole 4, template_var 4),
                template_var 3),
              template_var 1)
            ),
        template_predicate
         (
            template_app
             (template_app
               (template_app (template_hole 4, template_var 4),
                template_var 3),
              template_var 0)
            ),
        template_predicate
         (
            template_app
             (template_app (template_hole 3, template_var 2),
              template_var 1)
            ),
        template_predicate
         (
            template_app
             (template_app (template_hole 2, template_var 1),
              template_var 0)
            ),
        template_predicate
         (
            template_app
             (template_app
               (template_hole 3,
                template_app
                 (template_app
                   (template_app (template_hole 1, template_var 4),
                    template_var 2),
                  template_var 1)),
              template_var 0)
            ),
        template_predicate
         (
            template_app
             (template_app (template_hole 3, template_var 2),
              template_app
               (template_app
                 (template_app (template_hole 1, template_var 4),
                  template_var 1),
                template_var 0))
            )],
       template_equation
        (template_app
          (template_app
            (template_app (template_hole 1, template_var 4),
             template_var 2),
           template_app
            (template_app
              (template_app (template_hole 1, template_var 4),
               template_var 1),
             template_var 0)),
         template_app
          (template_app
            (template_app (template_hole 1, template_var 4),
             template_app
              (template_app
                (template_app (template_hole 1, template_var 4),
                 template_var 2),
               template_var 1)),
           template_var 0)))),
    ("Elliptic_Axclass.spec3_assoc",
     "[| on_curve ?a ?b ?p\<^sub>1; on_curve ?a ?b ?p\<^sub>2;
         on_curve ?a ?b ?p\<^sub>3; is_generic ?p\<^sub>1 ?p\<^sub>2;
         is_tangent ?p\<^sub>2 ?p\<^sub>3;
         is_generic (ell_field_class.add ?a ?p\<^sub>1 ?p\<^sub>2)
          ?p\<^sub>3;
         is_tangent ?p\<^sub>1
          (ell_field_class.add ?a ?p\<^sub>2 ?p\<^sub>3) |]
      ==> ell_field_class.add ?a ?p\<^sub>1
           (ell_field_class.add ?a ?p\<^sub>2 ?p\<^sub>3) =
          ell_field_class.add ?a
           (ell_field_class.add ?a ?p\<^sub>1 ?p\<^sub>2) ?p\<^sub>3",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app (template_hole 4, template_var 4),
                template_var 3),
              template_var 2)
            ),
        template_predicate
         (
            template_app
             (template_app
               (template_app (template_hole 4, template_var 4),
                template_var 3),
              template_var 1)
            ),
        template_predicate
         (
            template_app
             (template_app
               (template_app (template_hole 4, template_var 4),
                template_var 3),
              template_var 0)
            ),
        template_predicate
         (
            template_app
             (template_app (template_hole 3, template_var 2),
              template_var 1)
            ),
        template_predicate
         (
            template_app
             (template_app (template_hole 2, template_var 1),
              template_var 0)
            ),
        template_predicate
         (
            template_app
             (template_app
               (template_hole 3,
                template_app
                 (template_app
                   (template_app (template_hole 1, template_var 4),
                    template_var 2),
                  template_var 1)),
              template_var 0)
            ),
        template_predicate
         (
            template_app
             (template_app (template_hole 2, template_var 2),
              template_app
               (template_app
                 (template_app (template_hole 1, template_var 4),
                  template_var 1),
                template_var 0))
            )],
       template_equation
        (template_app
          (template_app
            (template_app (template_hole 1, template_var 4),
             template_var 2),
           template_app
            (template_app
              (template_app (template_hole 1, template_var 4),
               template_var 1),
             template_var 0)),
         template_app
          (template_app
            (template_app (template_hole 1, template_var 4),
             template_app
              (template_app
                (template_app (template_hole 1, template_var 4),
                 template_var 2),
               template_var 1)),
           template_var 0)))),
    ("Elliptic_Axclass.degen_assoc",
     "[| nonsingular ?a ?b; on_curve ?a ?b ?p\<^sub>1;
         on_curve ?a ?b ?p\<^sub>2; on_curve ?a ?b ?p\<^sub>3;
         (?p\<^sub>1 = Infinity |
          ?p\<^sub>2 = Infinity | ?p\<^sub>3 = Infinity) |
         (?p\<^sub>1 = opp ?p\<^sub>2 | ?p\<^sub>2 = opp ?p\<^sub>3) |
         opp ?p\<^sub>1 = ell_field_class.add ?a ?p\<^sub>2 ?p\<^sub>3 |
         opp ?p\<^sub>3 = ell_field_class.add ?a ?p\<^sub>1 ?p\<^sub>2 |]
      ==> ell_field_class.add ?a ?p\<^sub>1
           (ell_field_class.add ?a ?p\<^sub>2 ?p\<^sub>3) =
          ell_field_class.add ?a
           (ell_field_class.add ?a ?p\<^sub>1 ?p\<^sub>2) ?p\<^sub>3",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 6, template_var 4),
              template_var 3)
            ),
        template_predicate
         (
            template_app
             (template_app
               (template_app (template_hole 5, template_var 4),
                template_var 3),
              template_var 2)
            ),
        template_predicate
         (
            template_app
             (template_app
               (template_app (template_hole 5, template_var 4),
                template_var 3),
              template_var 1)
            ),
        template_predicate
         (
            template_app
             (template_app
               (template_app (template_hole 5, template_var 4),
                template_var 3),
              template_var 0)
            ),
        template_predicate
         (
            template_app
             (template_app
               (template_hole 4,
                template_app
                 (template_app
                   (template_hole 4,
                    template_app
                     (template_app (template_hole 3, template_var 2),
                      template_hole 2)),
                  template_app
                   (template_app
                     (template_hole 4,
                      template_app
                       (template_app (template_hole 3, template_var 1),
                        template_hole 2)),
                    template_app
                     (template_app (template_hole 3, template_var 0),
                      template_hole 2)))),
              template_app
               (template_app
                 (template_hole 4,
                  template_app
                   (template_app
                     (template_hole 4,
                      template_app
                       (template_app (template_hole 3, template_var 2),
                        template_app (template_hole 1, template_var 1))),
                    template_app
                     (template_app (template_hole 3, template_var 1),
                      template_app (template_hole 1, template_var 0)))),
                template_app
                 (template_app
                   (template_hole 4,
                    template_app
                     (template_app
                       (template_hole 3,
                        template_app (template_hole 1, template_var 2)),
                      template_app
                       (template_app
                         (template_app (template_hole 0, template_var 4),
                          template_var 1),
                        template_var 0))),
                  template_app
                   (template_app
                     (template_hole 3,
                      template_app (template_hole 1, template_var 0)),
                    template_app
                     (template_app
                       (template_app (template_hole 0, template_var 4),
                        template_var 2),
                      template_var 1)))))
            )],
       template_equation
        (template_app
          (template_app
            (template_app (template_hole 0, template_var 4),
             template_var 2),
           template_app
            (template_app
              (template_app (template_hole 0, template_var 4),
               template_var 1),
             template_var 0)),
         template_app
          (template_app
            (template_app (template_hole 0, template_var 4),
             template_app
              (template_app
                (template_app (template_hole 0, template_var 4),
                 template_var 2),
               template_var 1)),
           template_var 0)))),
    ("Elliptic_Axclass.add_casew",
     "[| on_curve ?a ?b ?p; on_curve ?a ?b ?q; !!p. ?P Infinity p p;
         !!p. ?P p Infinity p;
         !!p. on_curve ?a ?b p ==> ?P p (opp p) Infinity;
         !!p\<^sub>1 x\<^sub>1 y\<^sub>1 p\<^sub>2 x\<^sub>2 y\<^sub>2
            p\<^sub>3 x\<^sub>3 y\<^sub>3 l.
            [| p\<^sub>1 = Point x\<^sub>1 y\<^sub>1;
               p\<^sub>2 = Point x\<^sub>2 y\<^sub>2;
               p\<^sub>3 = Point x\<^sub>3 y\<^sub>3;
               p\<^sub>3 = ell_field_class.add ?a p\<^sub>1 p\<^sub>2;
               p\<^sub>1 ~= opp p\<^sub>2;
               x\<^sub>1 = x\<^sub>2 &
               y\<^sub>1 = y\<^sub>2 &
               l =
               ((3::?'a) * x\<^sub>1\<^sup>2 + ?a) /
               ((2::?'a) * y\<^sub>1) |
               x\<^sub>1 ~= x\<^sub>2 &
               l = (y\<^sub>2 - y\<^sub>1) / (x\<^sub>2 - x\<^sub>1);
               x\<^sub>3 = l\<^sup>2 - x\<^sub>1 - x\<^sub>2;
               y\<^sub>3 = - y\<^sub>1 - l * (x\<^sub>3 - x\<^sub>1) |]
            ==> ?P p\<^sub>1 p\<^sub>2 p\<^sub>3 |]
      ==> ?P ?p ?q (ell_field_class.add ?a ?p ?q)",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app (template_hole 22, template_var 4),
                template_var 3),
              template_var 2)
            ),
        template_predicate
         (
            template_app
             (template_app
               (template_app (template_hole 22, template_var 4),
                template_var 3),
              template_var 1)
            ),
        template_predicate (template_app (template_hole 21, t_empty)),
        template_predicate (template_app (template_hole 21, t_empty)),
        template_predicate (template_app (template_hole 21, t_empty)),
        template_predicate (template_app (template_hole 21, t_empty))],
       template_predicate
        (
           template_app
            (template_app
              (template_app (template_var 0, template_var 2),
               template_var 1),
             template_app
              (template_app
                (template_app (template_hole 15, template_var 4),
                 template_var 2),
               template_var 1))
           ))),
    ("Elliptic_Axclass.add_case",
     "[| on_curve ?a ?b ?p; on_curve ?a ?b ?q; !!p. ?P Infinity p p;
         !!p. ?P p Infinity p;
         !!p. on_curve ?a ?b p ==> ?P p (opp p) Infinity;
         !!p\<^sub>1 x\<^sub>1 y\<^sub>1 p\<^sub>2 x\<^sub>2 y\<^sub>2 l.
            [| p\<^sub>1 = Point x\<^sub>1 y\<^sub>1;
               p\<^sub>2 = Point x\<^sub>2 y\<^sub>2;
               p\<^sub>2 = ell_field_class.add ?a p\<^sub>1 p\<^sub>1;
               y\<^sub>1 ~= (0::?'a);
               l =
               ((3::?'a) * x\<^sub>1\<^sup>2 + ?a) / ((2::?'a) * y\<^sub>1);
               x\<^sub>2 = l\<^sup>2 - (2::?'a) * x\<^sub>1;
               y\<^sub>2 = - y\<^sub>1 - l * (x\<^sub>2 - x\<^sub>1) |]
            ==> ?P p\<^sub>1 p\<^sub>1 p\<^sub>2;
         !!p\<^sub>1 x\<^sub>1 y\<^sub>1 p\<^sub>2 x\<^sub>2 y\<^sub>2
            p\<^sub>3 x\<^sub>3 y\<^sub>3 l.
            [| p\<^sub>1 = Point x\<^sub>1 y\<^sub>1;
               p\<^sub>2 = Point x\<^sub>2 y\<^sub>2;
               p\<^sub>3 = Point x\<^sub>3 y\<^sub>3;
               p\<^sub>3 = ell_field_class.add ?a p\<^sub>1 p\<^sub>2;
               x\<^sub>1 ~= x\<^sub>2;
               l = (y\<^sub>2 - y\<^sub>1) / (x\<^sub>2 - x\<^sub>1);
               x\<^sub>3 = l\<^sup>2 - x\<^sub>1 - x\<^sub>2;
               y\<^sub>3 = - y\<^sub>1 - l * (x\<^sub>3 - x\<^sub>1) |]
            ==> ?P p\<^sub>1 p\<^sub>2 p\<^sub>3 |]
      ==> ?P ?p ?q (ell_field_class.add ?a ?p ?q)",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app (template_hole 21, template_var 4),
                template_var 3),
              template_var 2)
            ),
        template_predicate
         (
            template_app
             (template_app
               (template_app (template_hole 21, template_var 4),
                template_var 3),
              template_var 1)
            ),
        template_predicate (template_app (template_hole 20, t_empty)),
        template_predicate (template_app (template_hole 20, t_empty)),
        template_predicate (template_app (template_hole 20, t_empty)),
        template_predicate (template_app (template_hole 20, t_empty)),
        template_predicate (template_app (template_hole 20, t_empty))],
       template_predicate
        (
           template_app
            (template_app
              (template_app (template_var 0, template_var 2),
               template_var 1),
             template_app
              (template_app
                (template_app (template_hole 14, template_var 4),
                 template_var 2),
               template_var 1))
           )))]:
   (string * thm * template) list
### theory "Draft.Elliptic_AxclassMoreTemplates"
### 0.511s elapsed time, 0.770s cpu time, 0.127s GC time
val it = (): unit
