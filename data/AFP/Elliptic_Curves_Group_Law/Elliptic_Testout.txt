Loading theory "HOL-Decision_Procs.Conversions" (required by "Draft.Elliptic_TestMoreTemplates" via "Draft.Elliptic_Test" via "Draft.Elliptic_Locale" via "HOL-Decision_Procs.Reflective_Field" via "HOL-Decision_Procs.Commutative_Ring")
Loading theory "HOL-Library.Cancellation" (required by "Draft.Elliptic_TestMoreTemplates" via "Draft.Elliptic_Test" via "HOL-Number_Theory.Residues" via "HOL-Number_Theory.Cong" via "HOL-Computational_Algebra.Primes" via "HOL-Computational_Algebra.Euclidean_Algorithm" via "HOL-Computational_Algebra.Factorial_Ring" via "HOL-Library.Multiset")
Loading theory "HOL-Library.Code_Abstract_Nat" (required by "Draft.Elliptic_TestMoreTemplates" via "Draft.Elliptic_Test" via "Draft.Elliptic_Locale" via "HOL-Decision_Procs.Reflective_Field" via "HOL-Decision_Procs.Commutative_Ring" via "HOL-Library.Code_Target_Numeral" via "HOL-Library.Code_Target_Nat")
Loading theory "HOL-Library.Code_Target_Int" (required by "Draft.Elliptic_TestMoreTemplates" via "Draft.Elliptic_Test" via "Draft.Elliptic_Locale" via "HOL-Decision_Procs.Reflective_Field" via "HOL-Decision_Procs.Commutative_Ring" via "HOL-Library.Code_Target_Numeral")
val tactic_of_conv = fn: conv -> int -> thm -> thm Seq.seq
val binop_conv = fn: conv -> conv -> conv
val err = fn: string -> cterm -> 'a
### Code generator: dropping subsumed code equation
### 1 == Int.Pos num.One
### Code generator: dropping subsumed code equation
### Int.Neg ?m + Int.Neg ?n == Int.Neg (?m + ?n)
### Code generator: dropping subsumed code equation
### Int.Neg ?m + Int.Pos ?n == Int.sub ?n ?m
### Code generator: dropping subsumed code equation
### Int.Pos ?m + Int.Neg ?n == Int.sub ?m ?n
### Code generator: dropping subsumed code equation
### Int.Pos ?m + Int.Pos ?n == Int.Pos (?m + ?n)
### Code generator: dropping subsumed code equation
### 0 + ?l == ?l
### Code generator: dropping subsumed code equation
### ?k + 0 == ?k
### Code generator: dropping subsumed code equation
### - Int.Neg ?m == Int.Pos ?m
### Code generator: dropping subsumed code equation
### - Int.Pos ?m == Int.Neg ?m
### Code generator: dropping subsumed code equation
### - 0 == 0
### Code generator: dropping subsumed code equation
### Int.Neg ?m - Int.Neg ?n == Int.sub ?n ?m
### Code generator: dropping subsumed code equation
### Int.Neg ?m - Int.Pos ?n == Int.Neg (?m + ?n)
### Code generator: dropping subsumed code equation
### Int.Pos ?m - Int.Neg ?n == Int.Pos (?m + ?n)
### Code generator: dropping subsumed code equation
### Int.Pos ?m - Int.Pos ?n == Int.sub ?m ?n
### Code generator: dropping subsumed code equation
### 0 - ?l == - ?l
### Code generator: dropping subsumed code equation
### ?k - 0 == ?k
### Code generator: dropping subsumed code equation
### Int.dup (Int.Neg ?n) == Int.Neg (num.Bit0 ?n)
### Code generator: dropping subsumed code equation
### Int.dup (Int.Pos ?n) == Int.Pos (num.Bit0 ?n)
### Code generator: dropping subsumed code equation
### Int.dup 0 == 0
### Code generator: dropping subsumed code equation
### Int.Neg ?m * Int.Neg ?n == Int.Pos (?m * ?n)
### Code generator: dropping subsumed code equation
### Int.Neg ?m * Int.Pos ?n == Int.Neg (?m * ?n)
### Code generator: dropping subsumed code equation
### Int.Pos ?m * Int.Neg ?n == Int.Neg (?m * ?n)
### Code generator: dropping subsumed code equation
### Int.Pos ?m * Int.Pos ?n == Int.Pos (?m * ?n)
### Code generator: dropping subsumed code equation
### 0 * ?l == 0
### Code generator: dropping subsumed code equation
### ?k * 0 == 0
val strip_app = fn: cterm -> string * cterm list
val inst = fn: ctyp list -> cterm list -> thm -> thm
val transitive' = fn: thm -> (cterm -> thm) -> thm
val type_of_eqn = fn: thm -> ctyp
val cong1 = fn: (cterm -> thm) -> cterm -> thm
val cong1' = fn: (cterm -> thm) -> (cterm -> thm) -> cterm -> thm
val cong2 = fn: (cterm -> thm) -> (cterm -> thm) -> cterm -> thm
val cong2' = fn:
   (cterm -> cterm -> thm) ->
     (cterm -> thm) -> (cterm -> thm) -> cterm -> thm
val cong2'' = fn: (cterm -> cterm -> thm) -> thm -> thm -> thm
val args1 = fn: (cterm -> 'a) -> cterm -> 'a
val args2 = fn: (cterm -> cterm -> 'a) -> cterm -> 'a
### Code generator: dropping subsumed code equation
### Int.Neg ?m div Int.Neg ?n == fst (divmod ?m ?n)
### Code generator: dropping subsumed code equation
### Int.Pos ?m div Int.Neg ?n == - Divides.adjust_div (divmod ?m ?n)
### Code generator: dropping subsumed code equation
### Int.Neg ?m div Int.Pos ?n == - Divides.adjust_div (divmod ?m ?n)
### theory "HOL-Library.Code_Abstract_Nat"
### 0.076s elapsed time, 0.337s cpu time, 0.000s GC time
### Code generator: dropping subsumed code equation
### Int.Pos ?m div Int.Pos ?n == fst (divmod ?m ?n)
Loading theory "HOL-Library.Code_Target_Nat" (required by "Draft.Elliptic_TestMoreTemplates" via "Draft.Elliptic_Test" via "Draft.Elliptic_Locale" via "HOL-Decision_Procs.Reflective_Field" via "HOL-Decision_Procs.Commutative_Ring" via "HOL-Library.Code_Target_Numeral")
### Code generator: dropping subsumed code equation
### ?k div Int.Neg num.One == - ?k
### Code generator: dropping subsumed code equation
### ?k div Int.Pos num.One == ?k
### Code generator: dropping subsumed code equation
### 0 div ?k == 0
### Code generator: dropping subsumed code equation
### ?k div 0 == 0
### Code generator: dropping subsumed code equation
### Int.Neg ?m mod Int.Neg ?n == - snd (divmod ?m ?n)
### Code generator: dropping subsumed code equation
### Int.Pos ?m mod Int.Neg ?n ==
### - Divides.adjust_mod (Int.Pos ?n) (snd (divmod ?m ?n))
### Code generator: dropping subsumed code equation
### Int.Neg ?m mod Int.Pos ?n ==
### Divides.adjust_mod (Int.Pos ?n) (snd (divmod ?m ?n))
### Code generator: dropping subsumed code equation
### Int.Pos ?m mod Int.Pos ?n == snd (divmod ?m ?n)
### Code generator: dropping subsumed code equation
### ?k mod Int.Neg num.One == 0
### Code generator: dropping subsumed code equation
### ?k mod Int.Pos num.One == 0
### Code generator: dropping subsumed code equation
### 0 mod ?k == 0
### Code generator: dropping subsumed code equation
### ?k mod 0 == ?k
### Code generator: dropping subsumed code equation
### divmod (num.Bit1 ?m) (num.Bit1 ?n) ==
### if ?m < ?n then (0, numeral (num.Bit1 ?m))
### else divmod_step (num.Bit1 ?n)
###       (divmod (num.Bit1 ?m) (num.Bit0 (num.Bit1 ?n)))
### Code generator: dropping subsumed code equation
### divmod (num.Bit0 ?m) (num.Bit1 ?n) ==
### if ?m <= ?n then (0, numeral (num.Bit0 ?m))
### else divmod_step (num.Bit1 ?n)
###       (divmod (num.Bit0 ?m) (num.Bit0 (num.Bit1 ?n)))
### Code generator: dropping subsumed code equation
### divmod (num.Bit1 ?m) (num.Bit0 ?n) ==
### case divmod ?m ?n of (q, r) => (q, 2 * r + 1)
### Code generator: dropping subsumed code equation
### divmod (num.Bit0 ?m) (num.Bit0 ?n) ==
### case divmod ?m ?n of (q, r) => (q, 2 * r)
### Code generator: dropping subsumed code equation
### divmod num.One (num.Bit1 ?n) == (0, Numeral1)
val strip_numeral = fn: cterm -> string * cterm list
### Code generator: dropping subsumed code equation
### divmod num.One (num.Bit0 ?n) == (0, Numeral1)
### Code generator: dropping subsumed code equation
### divmod ?m num.One == (numeral ?m, 0)
### Code generator: dropping subsumed code equation
### equal_class.equal ?k ?k == True
### Code generator: dropping subsumed code equation
### equal_class.equal (Int.Neg ?k) (Int.Neg ?l) == equal_class.equal ?k ?l
### Code generator: dropping subsumed code equation
### equal_class.equal (Int.Neg ?k) (Int.Pos ?l) == False
### Code generator: dropping subsumed code equation
### equal_class.equal (Int.Neg ?k) 0 == False
### Code generator: dropping subsumed code equation
### equal_class.equal (Int.Pos ?k) (Int.Neg ?l) == False
### Code generator: dropping subsumed code equation
### equal_class.equal (Int.Pos ?k) (Int.Pos ?l) == equal_class.equal ?k ?l
### Code generator: dropping subsumed code equation
### equal_class.equal (Int.Pos ?k) 0 == False
### Code generator: dropping subsumed code equation
### equal_class.equal 0 (Int.Neg ?l) == False
### Code generator: dropping subsumed code equation
### equal_class.equal 0 (Int.Pos ?l) == False
### Code generator: dropping subsumed code equation
### equal_class.equal 0 0 == True
### Code generator: dropping subsumed code equation
### Int.Neg ?k <= Int.Neg ?l == ?l <= ?k
### Code generator: dropping subsumed code equation
### Int.Neg ?k <= Int.Pos ?l == True
### Code generator: dropping subsumed code equation
### Int.Neg ?k <= 0 == True
### Code generator: dropping subsumed code equation
### Int.Pos ?k <= Int.Neg ?l == False
### Code generator: dropping subsumed code equation
### Int.Pos ?k <= Int.Pos ?l == ?k <= ?l
### Code generator: dropping subsumed code equation
### Int.Pos ?k <= 0 == False
### Code generator: dropping subsumed code equation
### 0 <= Int.Neg ?l == False
### Code generator: dropping subsumed code equation
### 0 <= Int.Pos ?l == True
### Code generator: dropping subsumed code equation
### 0 <= 0 == True
### Code generator: dropping subsumed code equation
### Int.Neg ?k < Int.Neg ?l == ?l < ?k
### ML warning (line 97 of "~~/src/HOL/Decision_Procs/Conversions.thy"):
### Matches are not exhaustive.
### ML warning (line 93 of "~~/src/HOL/Decision_Procs/Conversions.thy"):
### Matches are not exhaustive.
val nat_conv = fn: cterm -> thm
### Code generator: dropping subsumed code equation
### Int.Neg ?k < Int.Pos ?l == True
### Code generator: dropping subsumed code equation
### Int.Neg ?k < 0 == True
### Code generator: dropping subsumed code equation
### Int.Pos ?k < Int.Neg ?l == False
### Code generator: dropping subsumed code equation
### Int.Pos ?k < Int.Pos ?l == ?k < ?l
### Code generator: dropping subsumed code equation
### Int.Pos ?k < 0 == False
### Code generator: dropping subsumed code equation
### 0 < Int.Neg ?l == False
### Code generator: dropping subsumed code equation
### 0 < Int.Pos ?l == True
### Code generator: dropping subsumed code equation
### 0 < 0 == False
### ML warning (line 103 of "~~/src/HOL/Decision_Procs/Conversions.thy"):
### Matches are not exhaustive.
val add_num_conv = fn: cterm -> cterm -> thm
### ML warning (line 137 of "~~/src/HOL/Decision_Procs/Conversions.thy"):
### Matches are not exhaustive.
val BitM_conv = fn: cterm -> thm
### ML warning (line 159 of "~~/src/HOL/Decision_Procs/Conversions.thy"):
### Matches are not exhaustive.
val dbl_conv = fn: ctyp -> cterm -> thm
### ML warning (line 178 of "~~/src/HOL/Decision_Procs/Conversions.thy"):
### Matches are not exhaustive.
val dbl_inc_conv = fn: ctyp -> cterm -> thm
### ML warning (line 200 of "~~/src/HOL/Decision_Procs/Conversions.thy"):
### Matches are not exhaustive.
val dbl_dec_conv = fn: ctyp -> cterm -> thm
### ML warning (line 212 of "~~/src/HOL/Decision_Procs/Conversions.thy"):
### Pattern is not exhaustive.
### ML warning (line 221 of "~~/src/HOL/Decision_Procs/Conversions.thy"):
### Matches are not exhaustive.
val sub_conv = fn: ctyp -> cterm -> cterm -> thm
val expand1 = fn: ctyp -> cterm -> thm
val norm1_eq = fn: ctyp -> thm -> thm
### Code generator: dropping subsumed code equation
### divmod_nat ?m ?n ==
### if ?n = 0 | ?m < ?n then (0, ?m)
### else let (q, y) = divmod_nat (?m - ?n) ?n in (Suc q, y)
### Code generator: dropping subsumed code equation
### of_int (Int.Pos ?k) == numeral ?k
### Code generator: dropping subsumed code equation
### of_int 0 == 0::?'a
### Code generator: dropping subsumed code equation
### of_int (Int.Neg ?k) == - numeral ?k
### Code generator: dropping subsumed code equation
### divmod (num.Bit1 ?m) (num.Bit1 ?n) ==
### if ?m < ?n then (0, numeral (num.Bit1 ?m))
### else divmod_step (num.Bit1 ?n)
###       (divmod (num.Bit1 ?m) (num.Bit0 (num.Bit1 ?n)))
### Code generator: dropping subsumed code equation
### divmod (num.Bit0 ?m) (num.Bit1 ?n) ==
### if ?m <= ?n then (0, numeral (num.Bit0 ?m))
### else divmod_step (num.Bit1 ?n)
###       (divmod (num.Bit0 ?m) (num.Bit0 (num.Bit1 ?n)))
### Code generator: dropping subsumed code equation
### divmod (num.Bit1 ?m) (num.Bit0 ?n) ==
### case divmod ?m ?n of (q, r) => (q, 2 * r + 1)
### Code generator: dropping subsumed code equation
### divmod (num.Bit0 ?m) (num.Bit0 ?n) ==
### case divmod ?m ?n of (q, r) => (q, 2 * r)
### Code generator: dropping subsumed code equation
### divmod num.One (num.Bit1 ?n) == (0, Numeral1)
### Code generator: dropping subsumed code equation
### divmod num.One (num.Bit0 ?n) == (0, Numeral1)
### Code generator: dropping subsumed code equation
### divmod ?m num.One == (numeral ?m, 0)
### Code generator: dropping subsumed code equation
### nat (Int.Pos ?k) == nat_of_num ?k
### Code generator: dropping subsumed code equation
### nat 0 == 0
### Code generator: dropping subsumed code equation
### nat (Int.Neg ?k) == 0
### Code generator: dropping subsumed code equation
### Suc ?m <= ?n == ?m < ?n
### Code generator: dropping subsumed code equation
### 0 <= ?n == True
val plus_conv = fn:
   ((cterm -> cterm -> thm) -> cterm -> cterm -> thm) ->
     ctyp -> cterm -> cterm -> thm
val nat_plus_conv = fn: cterm -> cterm -> thm
### Code generator: dropping subsumed code equation
### ?m < Suc ?n == ?m <= ?n
### Code generator: dropping subsumed code equation
### ?n < 0 == False
val plus_neg_conv = fn:
   ctyp -> (cterm -> cterm -> thm) -> cterm -> cterm -> thm
val plus_conv' = fn: ctyp -> cterm -> cterm -> thm
val int_plus_conv = fn: cterm -> cterm -> thm
### theory "HOL-Library.Code_Target_Int"
### 0.196s elapsed time, 0.781s cpu time, 0.017s GC time
Loading theory "HOL-Library.FuncSet" (required by "Draft.Elliptic_TestMoreTemplates" via "Draft.Elliptic_Test" via "Draft.Elliptic_Locale" via "HOL-Decision_Procs.Reflective_Field" via "HOL-Decision_Procs.Commutative_Ring" via "HOL-Decision_Procs.Algebra_Aux" via "HOL-Algebra.Ring" via "HOL-Algebra.FiniteProduct" via "HOL-Algebra.Group" via "HOL-Algebra.Complete_Lattice" via "HOL-Algebra.Lattice" via "HOL-Algebra.Order" via "HOL-Algebra.Congruence")
### ML warning (line 354 of "~~/src/HOL/Decision_Procs/Conversions.thy"):
### Matches are not exhaustive.
val uminus_conv = fn: ctyp -> cterm -> thm
val int_neg_conv = fn: cterm -> thm
### ML warning (line 366 of "~~/src/HOL/Decision_Procs/Conversions.thy"):
### Pattern is not exhaustive.
val minus_conv = fn: ctyp -> cterm -> cterm -> thm
val int_minus_conv = fn: cterm -> cterm -> thm
### Code generator: dropping subsumed code equation
### of_nat ?n == semiring_1_class.of_nat_aux (%i. i + (1::?'a)) ?n (0::?'a)
val int_numeral = fn: cterm -> cterm
val nat_minus_refl = "(-) == (-)": thm
val expand1_nat = fn: cterm -> thm
val nat_minus_conv = fn: cterm -> cterm -> thm
### ML warning (line 423 of "~~/src/HOL/Decision_Procs/Conversions.thy"):
### Matches are not exhaustive.
val mult_num_conv = fn: cterm -> cterm -> thm
val mult_conv = fn:
   ((cterm -> cterm -> thm) -> cterm -> cterm -> thm) ->
     ctyp -> cterm -> cterm -> thm
val nat_mult_conv = fn: cterm -> cterm -> thm
### theory "HOL-Library.Code_Target_Nat"
### 0.169s elapsed time, 0.646s cpu time, 0.017s GC time
Loading theory "HOL-Library.Code_Target_Numeral" (required by "Draft.Elliptic_TestMoreTemplates" via "Draft.Elliptic_Test" via "Draft.Elliptic_Locale" via "HOL-Decision_Procs.Reflective_Field" via "HOL-Decision_Procs.Commutative_Ring")
### ML warning (line 472 of "~~/src/HOL/Decision_Procs/Conversions.thy"):
### Pattern is not exhaustive.
val mult_neg_conv = fn:
   ctyp -> (cterm -> cterm -> thm) -> cterm -> cterm -> thm
val mult_conv' = fn: ctyp -> cterm -> cterm -> thm
val int_mult_conv = fn: cterm -> cterm -> thm
### ML warning (line 500 of "~~/src/HOL/Decision_Procs/Conversions.thy"):
### Matches are not exhaustive.
val eq_num_conv = fn: cterm -> cterm -> thm
val eq_conv = fn:
   ((cterm -> cterm -> thm) -> cterm -> cterm -> thm) ->
     ctyp -> cterm -> cterm -> thm
val nat_eq_conv = fn: cterm -> cterm -> thm
val eq_neg_conv = fn:
   ctyp -> (cterm -> cterm -> thm) -> cterm -> cterm -> thm
val eq_conv' = fn: ctyp -> cterm -> cterm -> thm
val int_eq_conv = fn: cterm -> cterm -> thm
### ML warning (line 589 of "~~/src/HOL/Decision_Procs/Conversions.thy"):
### Matches are not exhaustive.
### ML warning (line 613 of "~~/src/HOL/Decision_Procs/Conversions.thy"):
### Matches are not exhaustive.
val le_num_conv = fn: cterm -> cterm -> thm
val less_num_conv = fn: cterm -> cterm -> thm
val le_conv = fn:
   ((cterm -> cterm -> thm) -> cterm -> cterm -> thm) ->
     ctyp -> cterm -> cterm -> thm
val nat_le_conv = fn: cterm -> cterm -> thm
val le_neg_conv = fn:
   ctyp -> (cterm -> cterm -> thm) -> cterm -> cterm -> thm
val le_conv' = fn: ctyp -> cterm -> cterm -> thm
val int_le_conv = fn: cterm -> cterm -> thm
val less_conv = fn:
   ((cterm -> cterm -> thm) -> cterm -> cterm -> thm) ->
     ctyp -> cterm -> cterm -> thm
val nat_less_conv = fn: cterm -> cterm -> thm
val less_neg_conv = fn:
   ctyp -> (cterm -> cterm -> thm) -> cterm -> cterm -> thm
val less_conv' = fn: ctyp -> cterm -> cterm -> thm
val int_less_conv = fn: cterm -> cterm -> thm
### ML warning (line 771 of "~~/src/HOL/Decision_Procs/Conversions.thy"):
### Matches are not exhaustive.
val If_conv = fn:
   ctyp ->
     (cterm -> thm) -> (cterm -> thm) -> (cterm -> thm) -> cterm -> thm
### ML warning (line 814 of "~~/src/HOL/Decision_Procs/Conversions.thy"):
### Matches are not exhaustive.
val drop_conv = fn: ctyp -> cterm -> cterm -> thm
### ML warning (line 830 of "~~/src/HOL/Decision_Procs/Conversions.thy"):
### Matches are not exhaustive.
val nth_conv = fn: ctyp -> cterm -> cterm -> thm
signature CANCEL = sig val proc: Proof.context -> cterm -> thm option end
functor Cancel_Fun (Data: CANCEL_NUMERALS_DATA): CANCEL
### theory "HOL-Decision_Procs.Conversions"
### 0.355s elapsed time, 1.403s cpu time, 0.049s GC time
Loading theory "HOL-Library.Function_Algebras" (required by "Draft.Elliptic_TestMoreTemplates" via "Draft.ExtrEqs" via "HOL-Library.BigO")
### theory "HOL-Library.Code_Target_Numeral"
### 0.117s elapsed time, 0.458s cpu time, 0.031s GC time
Loading theory "HOL-Library.Infinite_Set" (required by "Draft.Elliptic_TestMoreTemplates" via "Draft.Elliptic_Test" via "HOL-Number_Theory.Residues" via "HOL-Algebra.Multiplicative_Group" via "HOL-Algebra.Elementary_Groups")
instantiation
  fun :: (type, plus) plus
  plus_fun == plus :: ('a => 'b) => ('a => 'b) => 'a => 'b
signature CANCEL_DATA =
  sig
    val dest_coeff: term -> int * term
    val dest_sum: term -> term list
    val find_first_coeff: term -> term list -> int * term list
    val mk_coeff: int * term -> term
    val mk_sum: typ -> term list -> term
    val norm_ss1: simpset
    val norm_ss2: simpset
    val norm_tac: Proof.context -> tactic
    val numeral_simp_tac: Proof.context -> tactic
    val prove_conv:
       tactic list -> Proof.context -> thm list -> term * term -> thm option
    val simplify_meta_eq: Proof.context -> thm -> thm
    val trans_tac: Proof.context -> thm option -> tactic
  end
structure Cancel_Data: CANCEL_DATA
instantiation
  fun :: (type, zero) zero
  zero_fun == zero_class.zero :: 'a => 'b
instantiation
  fun :: (type, times) times
  times_fun == times :: ('a => 'b) => ('a => 'b) => 'a => 'b
instantiation
  fun :: (type, one) one
  one_fun == one_class.one :: 'a => 'b
### theory "HOL-Library.Function_Algebras"
### 0.115s elapsed time, 0.447s cpu time, 0.069s GC time
Loading theory "HOL-Library.Nat_Bijection" (required by "Draft.Elliptic_TestMoreTemplates" via "Draft.ExtrEqs" via "HOL-Library.Stream")
signature CANCEL_SIMPROCS =
  sig
    val diff_cancel: Proof.context -> cterm -> thm option
    val eq_cancel: Proof.context -> cterm -> thm option
    val less_cancel: Proof.context -> cterm -> thm option
    val less_eq_cancel: Proof.context -> cterm -> thm option
  end
structure Cancel_Simprocs: CANCEL_SIMPROCS
### theory "HOL-Library.Cancellation"
### 0.493s elapsed time, 1.947s cpu time, 0.117s GC time
Loading theory "HOL-Library.Multiset" (required by "Draft.Elliptic_TestMoreTemplates" via "Draft.Elliptic_Test" via "HOL-Number_Theory.Residues" via "HOL-Number_Theory.Cong" via "HOL-Computational_Algebra.Primes" via "HOL-Computational_Algebra.Euclidean_Algorithm" via "HOL-Computational_Algebra.Factorial_Ring")
consts
  enumerate :: "'a set => nat => 'a"
Found termination order: "(%p. size (snd p)) <*mlex*> {}"
### theory "HOL-Library.FuncSet"
### 0.417s elapsed time, 1.636s cpu time, 0.210s GC time
Loading theory "HOL-Algebra.Congruence" (required by "Draft.Elliptic_TestMoreTemplates" via "Draft.Elliptic_Test" via "Draft.Elliptic_Locale" via "HOL-Decision_Procs.Reflective_Field" via "HOL-Decision_Procs.Commutative_Ring" via "HOL-Decision_Procs.Algebra_Aux" via "HOL-Algebra.Ring" via "HOL-Algebra.FiniteProduct" via "HOL-Algebra.Group" via "HOL-Algebra.Complete_Lattice" via "HOL-Algebra.Lattice" via "HOL-Algebra.Order")
instantiation
  multiset :: (type) cancel_comm_monoid_add
  zero_multiset == zero_class.zero :: 'a multiset
  minus_multiset == minus :: 'a multiset => 'a multiset => 'a multiset
  plus_multiset == plus :: 'a multiset => 'a multiset => 'a multiset
### theory "HOL-Library.Infinite_Set"
### 0.290s elapsed time, 1.128s cpu time, 0.179s GC time
Loading theory "HOL-Library.Set_Algebras" (required by "Draft.Elliptic_TestMoreTemplates" via "Draft.ExtrEqs" via "HOL-Library.BigO")
instantiation
  set :: (plus) plus
  plus_set == plus :: 'a set => 'a set => 'a set
Found termination order: "size_list size <*mlex*> {}"
instantiation
  set :: (times) times
  times_set == times :: 'a set => 'a set => 'a set
instantiation
  set :: (zero) zero
  zero_set == zero_class.zero :: 'a set
instantiation
  set :: (one) one
  one_set == one_class.one :: 'a set
### theory "HOL-Library.Nat_Bijection"
### 0.506s elapsed time, 1.837s cpu time, 0.596s GC time
Loading theory "HOL-Library.Stream" (required by "Draft.Elliptic_TestMoreTemplates" via "Draft.ExtrEqs")
### theory "HOL-Library.Set_Algebras"
### 0.431s elapsed time, 1.541s cpu time, 0.527s GC time
Loading theory "HOL-Library.Tree" (required by "Draft.Elliptic_TestMoreTemplates" via "Draft.ExtrEqs" via "Draft.Templates")
### Partially applied constant "Multiset.inter_mset" on left hand side of equation, in theorem:
### semilattice_inf.Inf_fin (\<inter>#) (set (?x # ?xs)) ==
### fold (\<inter>#) ?xs ?x
consts
  shift :: "'a list => 'a stream => 'a stream"
locale equivalence
  fixes S :: "('a, 'b) eq_object_scheme"  (structure)
  assumes "equivalence S"
Proofs for coinductive predicate(s) "streamsp"
locale partition
  fixes A :: "'a set"
    and B :: "'a set set"
  assumes "Congruence.partition A B"
  Proving monotonicity ...
### Partially applied constant "Multiset.union_mset" on left hand side of equation, in theorem:
### semilattice_sup.Sup_fin (\<union>#) (set (?x # ?xs)) ==
### fold (\<union>#) ?xs ?x
consts
  snth :: "'a stream => nat => 'a"
consts
  stake :: "nat => 'a stream => 'a list"
consts
  sdrop :: "nat => 'a stream => 'a stream"
consts
  sfilter :: "('a => bool) => 'a stream => 'a stream"
### theory "HOL-Algebra.Congruence"
### 1.027s elapsed time, 3.884s cpu time, 0.777s GC time
Loading theory "HOL-Algebra.Order" (required by "Draft.Elliptic_TestMoreTemplates" via "Draft.Elliptic_Test" via "Draft.Elliptic_Locale" via "HOL-Decision_Procs.Reflective_Field" via "HOL-Decision_Procs.Commutative_Ring" via "HOL-Decision_Procs.Algebra_Aux" via "HOL-Algebra.Ring" via "HOL-Algebra.FiniteProduct" via "HOL-Algebra.Group" via "HOL-Algebra.Complete_Lattice" via "HOL-Algebra.Lattice")
consts
  cycle :: "'a list => 'a stream"
consts
  siterate :: "('a => 'a) => 'a => 'a stream"
signature MULTISET_SIMPROCS =
  sig
    val subset_cancel_msets: Proof.context -> cterm -> thm option
    val subseteq_cancel_msets: Proof.context -> cterm -> thm option
  end
structure Multiset_Simprocs: MULTISET_SIMPROCS
consts
  left :: "'a tree => 'a tree"
consts
  right :: "'a tree => 'a tree"
instantiation
  multiset :: (type) Inf
  Inf_multiset == Inf :: 'a multiset set => 'a multiset
consts
  flat :: "'a list stream => 'a stream"
instantiation
  multiset :: (type) Sup
  Sup_multiset == Sup :: 'a multiset set => 'a multiset
Found termination order: "size <*mlex*> {}"
consts
  sinterleave :: "'a stream => 'a stream => 'a stream"
consts
  szip :: "'a stream => 'b stream => ('a * 'b) stream"
Found termination order: "size <*mlex*> {}"
consts
  smap2 :: "('a => 'b => 'c) => 'a stream => 'b stream => 'c stream"
locale weak_partial_order
  fixes L :: "('a, 'b) gorder_scheme"  (structure)
  assumes "weak_partial_order L"
### theory "HOL-Library.Stream"
### 0.966s elapsed time, 3.793s cpu time, 0.445s GC time
Loading theory "HOL-Library.BigO" (required by "Draft.Elliptic_TestMoreTemplates" via "Draft.ExtrEqs")
locale weak_partial_order
  fixes L :: "('a, 'b) gorder_scheme"  (structure)
  assumes "weak_partial_order L"
instantiation
  multiset :: (type) size
  size_multiset == size :: 'a multiset => nat
Found termination order: "size <*mlex*> {}"
class height = type +
  fixes height :: "'a => nat"
instantiation
  tree :: (type) height
  height_tree == height :: 'a tree => nat
locale comp_fun_commute
  fixes f :: "'a => 'b => 'b"
  assumes "comp_fun_commute f"
Found termination order: "size <*mlex*> {}"
Found termination order: "size <*mlex*> {}"
consts
  mset :: "'a list => 'a multiset"
Found termination order: "size <*mlex*> {}"
locale weak_partial_order
  fixes L :: "('a, 'b) gorder_scheme"  (structure)
  assumes "weak_partial_order L"
Found termination order: "size <*mlex*> {}"
class linorder = order +
  assumes "linear": "!!x y. x <= y | y <= x"
Found termination order: "size <*mlex*> {}"
locale partial_order
  fixes L :: "('a, 'b) gorder_scheme"  (structure)
  assumes "partial_order L"
Found termination order: "size <*mlex*> {}"
locale comm_monoid_mset
  fixes f :: "'a => 'a => 'a"  (infixl \<open>\<^bold>*\<close> 70)
    and z :: "'a"  (\<open>\<^bold>1\<close>)
  assumes "comm_monoid_mset (\<^bold>*) \<^bold>1"
locale weak_partial_order_bottom
  fixes L :: "('a, 'b) gorder_scheme"  (structure)
  assumes "weak_partial_order_bottom L"
Found termination order: "size <*mlex*> {}"
locale weak_partial_order_top
  fixes L :: "('a, 'b) gorder_scheme"  (structure)
  assumes "weak_partial_order_top L"
locale weak_total_order
  fixes L :: "('a, 'b) gorder_scheme"  (structure)
  assumes "weak_total_order L"
class comm_monoid_add = ab_semigroup_add + monoid_add +
  assumes "add_0": "!!a. (0::'a) + a = a"
locale total_order
  fixes L :: "('a, 'b) gorder_scheme"  (structure)
  assumes "total_order L"
### theory "HOL-Algebra.Order"
### 0.968s elapsed time, 3.800s cpu time, 0.423s GC time
Loading theory "HOL-Algebra.Lattice" (required by "Draft.Elliptic_TestMoreTemplates" via "Draft.Elliptic_Test" via "Draft.Elliptic_Locale" via "HOL-Decision_Procs.Reflective_Field" via "HOL-Decision_Procs.Commutative_Ring" via "HOL-Decision_Procs.Algebra_Aux" via "HOL-Algebra.Ring" via "HOL-Algebra.FiniteProduct" via "HOL-Algebra.Group" via "HOL-Algebra.Complete_Lattice")
Found termination order: "(%p. size (fst p)) <*mlex*> {}"
class comm_monoid_add = ab_semigroup_add + monoid_add +
  assumes "add_0": "!!a. (0::'a) + a = a"
class canonically_ordered_monoid_add = ordered_comm_monoid_add +
  assumes "le_iff_add": "!!a b. (a <= b) = (EX c. b = a + c)"
Found termination order: "size <*mlex*> {}"
locale weak_upper_semilattice
  fixes L :: "('a, 'b) gorder_scheme"  (structure)
  assumes "weak_upper_semilattice L"
locale weak_lower_semilattice
  fixes L :: "('a, 'b) gorder_scheme"  (structure)
  assumes "weak_lower_semilattice L"
Found termination order: "(%p. size (snd p)) <*mlex*> {}"
locale weak_lattice
  fixes L :: "('a, 'b) gorder_scheme"  (structure)
  assumes "weak_lattice L"
### theory "HOL-Library.BigO"
### 1.207s elapsed time, 4.537s cpu time, 1.371s GC time
class comm_monoid_mult = ab_semigroup_mult + monoid_mult + dvd +
  assumes "mult_1": "!!a. (1::'a) * a = a"
Found termination order: "size <*mlex*> {}"
locale weak_bounded_lattice
  fixes L :: "('a, 'b) gorder_scheme"  (structure)
  assumes "weak_bounded_lattice L"
locale upper_semilattice
  fixes L :: "('a, 'b) gorder_scheme"  (structure)
  assumes "upper_semilattice L"
### theory "HOL-Library.Tree"
### 2.480s elapsed time, 9.187s cpu time, 1.923s GC time
Loading theory "Draft.Templates" (required by "Draft.Elliptic_TestMoreTemplates" via "Draft.ExtrEqs")
locale lower_semilattice
  fixes L :: "('a, 'b) gorder_scheme"  (structure)
  assumes "lower_semilattice L"
locale Lattice.lattice
  fixes L :: "('a, 'b) gorder_scheme"  (structure)
  assumes "lattice L"
datatype template_term
=
     t_empty
   | template_app of template_term * template_term
   | template_hole of int
   | template_var of int
datatype sign
= equals | greater_equals | greater_than | less_equals | less_than
datatype template
=
     template_bimplication of template * template
   | template_dunno
   | template_equation of template_term * template_term
   | template_implication of template list * template
   | template_inequation of sign * template_term * template_term
   | template_negation of template
   | template_predicate of template_term
constructor t_empty: template_term
constructor template_app: template_term * template_term -> template_term
constructor template_hole: int -> template_term
constructor template_var: int -> template_term
constructor equals: sign
constructor greater_equals: sign
constructor greater_than: sign
constructor less_equals: sign
constructor less_than: sign
constructor template_bimplication: template * template -> template
constructor template_dunno: template
constructor template_equation: template_term * template_term -> template
constructor template_implication: template list * template -> template
constructor template_inequation:
   sign * template_term * template_term -> template
constructor template_negation: template -> template
constructor template_predicate: template_term -> template
val vfs = fn: term -> (indexname * typ) list * (string * typ) list
val indexOf = fn: ''a list -> ''a -> int -> int
val has_eq = fn: term -> bool
val term2template = fn:
   (indexname * typ) list -> (string * typ) list -> term -> template_term
val lemma2predicate = fn: term -> term -> template
val makeTemplatewithContext = fn: term -> term -> template
val lemma2template = fn: term -> template
val thm2template = fn: thm -> template
val tterm2string = fn: template_term -> string
val template2string = fn: template -> string
val t = "height ?t <= size ?t": thm
val th =
   Const ("HOL.Trueprop", "bool => prop") $
     (Const ("Orderings.ord_class.less_eq", "nat => nat => bool") $
       (Const ("Tree.height_class.height", "?'a tree => nat") $
         Var (("t", 0), "?'a tree")) $
       (Const ("Nat.size_class.size", "?'a tree => nat") $
         Var (("t", 0), "?'a tree"))):
   term
### theory "Draft.Templates"
### 0.060s elapsed time, 0.180s cpu time, 0.000s GC time
Loading theory "Draft.ExtrEqs" (required by "Draft.Elliptic_TestMoreTemplates")
locale Lattice.bounded_lattice
  fixes L :: "('a, 'b) gorder_scheme"  (structure)
  assumes "bounded_lattice L"
locale Lattice.bounded_lattice
  fixes L :: "('a, 'b) gorder_scheme"  (structure)
  assumes "bounded_lattice L"
### theory "HOL-Algebra.Lattice"
### 1.118s elapsed time, 3.684s cpu time, 1.305s GC time
Loading theory "HOL-Algebra.Complete_Lattice" (required by "Draft.Elliptic_TestMoreTemplates" via "Draft.Elliptic_Test" via "Draft.Elliptic_Locale" via "HOL-Decision_Procs.Reflective_Field" via "HOL-Decision_Procs.Commutative_Ring" via "HOL-Decision_Procs.Algebra_Aux" via "HOL-Algebra.Ring" via "HOL-Algebra.FiniteProduct" via "HOL-Algebra.Group")
locale weak_complete_lattice
  fixes L :: "('a, 'b) gorder_scheme"  (structure)
  assumes "weak_complete_lattice L"
class linorder = order +
  assumes "linear": "!!x y. x <= y | y <= x"
locale weak_complete_lattice
  fixes L :: "('a, 'b) gorder_scheme"  (structure)
  assumes "weak_complete_lattice L"
locale weak_complete_lattice
  fixes L :: "('a, 'b) gorder_scheme"  (structure)
  assumes "weak_complete_lattice L"
instantiation
  multiset :: (preorder) order
  less_eq_multiset == less_eq :: 'a multiset => 'a multiset => bool
  less_multiset == less :: 'a multiset => 'a multiset => bool
instantiation
  multiset :: (preorder) ordered_ab_semigroup_add
Proofs for inductive predicate(s) "pw_leq"
  Proving monotonicity ...
locale Complete_Lattice.complete_lattice
  fixes L :: "('a, 'b) gorder_scheme"  (structure)
  assumes "complete_lattice L"
locale Complete_Lattice.complete_lattice
  fixes L :: "('a, 'b) gorder_scheme"  (structure)
  assumes "complete_lattice L"
val eqpattern =
   Pattern
    (
       Const ("HOL.Trueprop", "bool => prop") $
         (Const ("HOL.eq", "?'a => ?'a => bool") $
           Var (("_dummy_", 1), "?'a") $ Var (("_dummy_", 2), "?'a"))
       ):
   term Find_Theorems.criterion
val badeqpattern = Pattern (Const ("Pure.eq", "?'a => ?'a => prop")):
   term Find_Theorems.criterion
val undefpattern =
   Pattern
    (
       Const ("HOL.Trueprop", "bool => prop") $
         (Const ("HOL.eq", "?'a => ?'a => bool") $
           Var (("_dummy_", 1), "?'a") $ Const ("HOL.undefined", "?'a"))
       ):
   term Find_Theorems.criterion
val thmpattern =
   Pattern
    (Const ("HOL.Trueprop", "bool => prop") $ Var (("_dummy_", 1), "bool")):
   term Find_Theorems.criterion
val badnames =
   ["*nitpick*", "*Nitpick*", "*full_exhaustive*", "*_def*", "Enum.finite*",
    "*Quickcheck*", "ATP*", "*Nunchaku*", "*Code*", "*BNF*", "*SMT*",
    "*.*.*"]:
   string list
val unwanted_names =
   [(false, Name "*nitpick*"), (false, Name "*Nitpick*"),
    (false, Name "*full_exhaustive*"), (false, Name "*_def*"),
    (false, Name "Enum.finite*"), (false, Name "*Quickcheck*"),
    (false, Name "ATP*"), (false, Name "*Nunchaku*"),
    (false, Name "*Code*"), (false, Name "*BNF*"), (false, Name "*SMT*"),
    (false, Name "*.*.*")]:
   (bool * term Find_Theorems.criterion) list
val has_vars = fn: term -> bool
val get_all_eqs = fn: string -> Proof.context -> (string * thm) list
val get_all_thms = fn: string -> Proof.context -> (string * thm) list
val get_noneq_thms = fn: string -> Proof.context -> (string * thm) list
val template_eqs = fn:
   string -> Proof.context -> (string * thm * template) list
val template_thms = fn:
   string -> Proof.context -> (string * thm * template) list
### theory "Draft.ExtrEqs"
### 1.002s elapsed time, 3.174s cpu time, 1.365s GC time
locale weak_complete_lattice
  fixes L :: "('a, 'b) gorder_scheme"  (structure)
  assumes "weak_complete_lattice L"
Found termination order: "(%p. length (fst p)) <*mlex*> {}"
instantiation
  multiset :: (equal) equal
  equal_multiset == equal_class.equal :: 'a multiset => 'a multiset => bool
### theory "HOL-Algebra.Complete_Lattice"
### 1.034s elapsed time, 3.149s cpu time, 1.409s GC time
Loading theory "HOL-Algebra.Group" (required by "Draft.Elliptic_TestMoreTemplates" via "Draft.Elliptic_Test" via "Draft.Elliptic_Locale" via "HOL-Decision_Procs.Reflective_Field" via "HOL-Decision_Procs.Commutative_Ring" via "HOL-Decision_Procs.Algebra_Aux" via "HOL-Algebra.Ring" via "HOL-Algebra.FiniteProduct")
instantiation
  multiset :: (random) random
  random_multiset == random_class.random ::
    natural
    => natural * natural
       => ('a multiset * (unit => term)) * natural * natural
instantiation
  multiset :: (full_exhaustive) full_exhaustive
  full_exhaustive_multiset == full_exhaustive_class.full_exhaustive ::
    ('a multiset * (unit => term) => (bool * term list) option)
    => natural => (bool * term list) option
Proofs for inductive predicate(s) "pred_mset"
  Proving monotonicity ...
Proofs for inductive predicate(s) "rel_mset'"
  Proving monotonicity ...
### theory "HOL-Library.Multiset"
### 4.486s elapsed time, 15.469s cpu time, 4.137s GC time
Loading theory "HOL-Computational_Algebra.Factorial_Ring" (required by "Draft.Elliptic_TestMoreTemplates" via "Draft.Elliptic_Test" via "HOL-Number_Theory.Residues" via "HOL-Number_Theory.Cong" via "HOL-Computational_Algebra.Primes" via "HOL-Computational_Algebra.Euclidean_Algorithm")
locale Group.monoid
  fixes G :: "('a, 'b) monoid_scheme"  (structure)
  assumes "Group.monoid G"
locale Group.group
  fixes G :: "('a, 'b) monoid_scheme"  (structure)
  assumes "Group.group G"
overloading
  nat_pow \<equiv> pow :: ('a, 'b) monoid_scheme => 'a => nat => 'a
overloading
  int_pow \<equiv> pow :: ('a, 'b) monoid_scheme => 'a => int => 'a
locale submonoid
  fixes H :: "'a set"
    and G :: "('a, 'b) monoid_scheme"  (structure)
  assumes "submonoid H G"
locale subgroup
  fixes H :: "'a set"
    and G :: "('a, 'b) monoid_scheme"  (structure)
  assumes "subgroup H G"
locale group_hom
  fixes G :: "('a, 'b) monoid_scheme"  (structure)
    and H :: "('c, 'd) monoid_scheme"  (structure)
    and h :: "'a => 'c"
  assumes "group_hom G H h"
class normalization_semidom = algebraic_semidom +
  semidom_divide_unit_factor +
  fixes normalize :: "'a => 'a"
  assumes
    "unit_factor_mult_normalize": "!!a. unit_factor a * normalize a = a"
    and "normalize_0": "normalize (0::'a) = (0::'a)"
locale Group.comm_monoid
  fixes G :: "('a, 'b) monoid_scheme"  (structure)
  assumes "Group.comm_monoid G"
locale comm_group
  fixes G :: "('a, 'b) monoid_scheme"  (structure)
  assumes "comm_group G"
### theory "HOL-Algebra.Group"
### 1.323s elapsed time, 2.971s cpu time, 0.500s GC time
Loading theory "HOL-Algebra.Coset" (required by "Draft.Elliptic_TestMoreTemplates" via "Draft.Elliptic_Test" via "HOL-Number_Theory.Residues" via "HOL-Algebra.Multiplicative_Group")
Loading theory "HOL-Algebra.FiniteProduct" (required by "Draft.Elliptic_TestMoreTemplates" via "Draft.Elliptic_Test" via "Draft.Elliptic_Locale" via "HOL-Decision_Procs.Reflective_Field" via "HOL-Decision_Procs.Commutative_Ring" via "HOL-Decision_Procs.Algebra_Aux" via "HOL-Algebra.Ring")
class semiring_gcd = gcd + normalization_semidom +
  assumes "gcd_dvd1": "!!a b. gcd a b dvd a"
    and "gcd_dvd2": "!!a b. gcd a b dvd b"
    and "gcd_greatest": "!!c a b. [| c dvd a; c dvd b |] ==> c dvd gcd a b"
    and "normalize_gcd": "!!a b. normalize (gcd a b) = gcd a b"
    and "lcm_gcd": "!!a b. lcm a b = normalize (a * b div gcd a b)"
Proofs for inductive predicate(s) "foldSetDp"
  Proving monotonicity ...
locale normal
  fixes H :: "'a set"
    and G :: "('a, 'b) monoid_scheme"  (structure)
  assumes "normal H G"
locale LCD
  fixes B :: "'b set"
    and D :: "'a set"
    and f :: "'b => 'a => 'a"  (infixl \<open>\<cdot>\<close> 70)
  assumes "LCD B D (\<cdot>)"
locale ACeD
  fixes D :: "'a set"
    and f :: "'a => 'a => 'a"  (infixl \<open>\<cdot>\<close> 70)
    and e :: "'a"
  assumes "ACeD D (\<cdot>) e"
locale Group.comm_monoid
  fixes G :: "('a, 'b) monoid_scheme"  (structure)
  assumes "Group.comm_monoid G"
locale Group.comm_monoid
  fixes G :: "('a, 'b) monoid_scheme"  (structure)
  assumes "Group.comm_monoid G"
### theory "HOL-Algebra.FiniteProduct"
### 0.428s elapsed time, 1.315s cpu time, 0.168s GC time
Loading theory "HOL-Algebra.Ring" (required by "Draft.Elliptic_TestMoreTemplates" via "Draft.Elliptic_Test" via "Draft.Elliptic_Locale" via "HOL-Decision_Procs.Reflective_Field" via "HOL-Decision_Procs.Commutative_Ring" via "HOL-Decision_Procs.Algebra_Aux")
### Ambiguous input (line 611 of "~~/src/HOL/Algebra/Coset.thy") produces 2 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("\<^fixed>r_congruent_indexed" ("_index" ("_position" G))
###       ("_position" H))
###     ("_Coll" ("_pattern" ("_position" x) ("_position" y))
###       ("\<^const>HOL.conj"
###         ("\<^const>Set.member" ("_position" x)
###           ("_applC" ("_position" carrier) ("_position" G)))
###         ("\<^const>HOL.conj"
###           ("\<^const>Set.member" ("_position" y)
###             ("_applC" ("_position" carrier) ("_position" G)))
###           ("\<^const>Set.member"
###             ("\<^const>Group.monoid.mult_indexed"
###               ("\<^const>Group.m_inv_indexed" ("_index" ("_position" G))
###                 ("_position" x))
###               ("_index" ("_position" G)) ("_position" y))
###             ("_position" H)))))))
### ("\<^const>HOL.Trueprop"
###   ("\<^fixed>r_congruent_indexed" ("_index" ("_position" G))
###     ("\<^const>HOL.eq" ("_position" H)
###       ("_Coll" ("_pattern" ("_position" x) ("_position" y))
###         ("\<^const>HOL.conj"
###           ("\<^const>Set.member" ("_position" x)
###             ("_applC" ("_position" carrier) ("_position" G)))
###           ("\<^const>HOL.conj"
###             ("\<^const>Set.member" ("_position" y)
###               ("_applC" ("_position" carrier) ("_position" G)))
###             ("\<^const>Set.member"
###               ("\<^const>Group.monoid.mult_indexed"
###                 ("\<^const>Group.m_inv_indexed" ("_index" ("_position" G))
###                   ("_position" x))
###                 ("_index" ("_position" G)) ("_position" y))
###               ("_position" H))))))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
class factorial_semiring = normalization_semidom +
  assumes
    "prime_factorization_exists":
      "!!x. x ~= (0::'a) ==>
            EX A. (ALL x. x :# A --> prime_elem x) &
                  normalize (\<Prod>\<^sub># A) = normalize x"
locale abelian_monoid
  fixes G :: "('a, 'b) ring_scheme"  (structure)
  assumes "abelian_monoid G"
locale abelian_group
  fixes G :: "('a, 'b) ring_scheme"  (structure)
  assumes "abelian_group G"
### Cannot skip proof of schematic goal statement
class factorial_semiring = normalization_semidom +
  assumes
    "prime_factorization_exists":
      "!!x. x ~= (0::'a) ==>
            EX A. (ALL x. x :# A --> prime_elem x) &
                  normalize (\<Prod>\<^sub># A) = normalize x"
locale abelian_monoid
  fixes G :: "('a, 'b) ring_scheme"  (structure)
  assumes "abelian_monoid G"
### Cannot skip proof of schematic goal statement
locale abelian_monoid
  fixes G :: "('a, 'b) ring_scheme"  (structure)
  assumes "abelian_monoid G"
### Cannot skip proof of schematic goal statement
locale abelian_group
  fixes G :: "('a, 'b) ring_scheme"  (structure)
  assumes "abelian_group G"
### Cannot skip proof of schematic goal statement
locale Ring.semiring
  fixes R :: "('a, 'b) ring_scheme"  (structure)
  assumes "semiring R"
### theory "HOL-Algebra.Coset"
### 1.161s elapsed time, 3.563s cpu time, 0.476s GC time
Loading theory "HOL-Algebra.Generated_Groups" (required by "Draft.Elliptic_TestMoreTemplates" via "Draft.Elliptic_Test" via "HOL-Number_Theory.Residues" via "HOL-Algebra.Multiplicative_Group")
Proofs for inductive predicate(s) "generatep"
  Proving monotonicity ...
locale Ring.ring
  fixes R :: "('a, 'b) ring_scheme"  (structure)
  assumes "ring R"
locale cring
  fixes R :: "('a, 'b) ring_scheme"  (structure)
  assumes "cring R"
locale domain
  fixes R :: "('a, 'b) ring_scheme"  (structure)
  assumes "domain R"
locale Ring.field
  fixes R :: "('a, 'b) ring_scheme"  (structure)
  assumes "field R"
locale Ring.ring
  fixes R :: "('a, 'b) ring_scheme"  (structure)
  assumes "ring R"
carrier (| carrier = ?carrier, ... = ?more |) = ?carrier
partial_object.more (| carrier = ?carrier, ... = ?more |) = ?more
carrier_update ?carrier' (| carrier = ?carrier, ... = ?more |) =
(| carrier = ?carrier' ?carrier, ... = ?more |)
partial_object.more_update ?more' (| carrier = ?carrier, ... = ?more |) =
(| carrier = ?carrier, ... = ?more' ?more |)
(\<otimes>\<^bsub>(| carrier = ?carrier, mult = ?mult, one = ?one, ... = ?more |)\<^esub>) =
?mult
\<one>\<^bsub>(| carrier = ?carrier, mult = ?mult, one = ?one, ... = ?more |)\<^esub> =
?one
monoid.more
 (| carrier = ?carrier, mult = ?mult, one = ?one, ... = ?more |) =
?more
mult_update ?mult'
 (| carrier = ?carrier, mult = ?mult, one = ?one, ... = ?more |) =
(| carrier = ?carrier, mult = ?mult' ?mult, one = ?one, ... = ?more |)
one_update ?one'
 (| carrier = ?carrier, mult = ?mult, one = ?one, ... = ?more |) =
(| carrier = ?carrier, mult = ?mult, one = ?one' ?one, ... = ?more |)
monoid.more_update ?more'
 (| carrier = ?carrier, mult = ?mult, one = ?one, ... = ?more |) =
(| carrier = ?carrier, mult = ?mult, one = ?one, ... = ?more' ?more |)
locale Ring.ring
  fixes R :: "('a, 'b) ring_scheme"  (structure)
  assumes "ring R"
### ML warning (line 44 of "~~/src/HOL/Algebra/ringsimp.ML"):
### Value identifier (s) has not been referenced.
### ML warning (line 47 of "~~/src/HOL/Algebra/ringsimp.ML"):
### Matches are not exhaustive.
signature RINGSIMP =
  sig
    val add_struct: string * term list -> attribute
    val algebra_tac: Proof.context -> int -> tactic
    val del_struct: string * term list -> attribute
    val print_structures: Proof.context -> unit
  end
structure Ringsimp: RINGSIMP
### theory "HOL-Algebra.Generated_Groups"
### 0.642s elapsed time, 1.955s cpu time, 0.199s GC time
Loading theory "HOL-Algebra.Elementary_Groups" (required by "Draft.Elliptic_TestMoreTemplates" via "Draft.Elliptic_Test" via "HOL-Number_Theory.Residues" via "HOL-Algebra.Multiplicative_Group")
locale group_disjoint_sum
  fixes G :: "('a, 'b) monoid_scheme"  (structure)
    and A :: "'a set"
    and B :: "'a set"
  assumes "group_disjoint_sum G A B"
locale Ring.semiring
  fixes R :: "('a, 'b) ring_scheme"  (structure)
  assumes "semiring R"
locale domain
  fixes R :: "('a, 'b) ring_scheme"  (structure)
  assumes "domain R"
### theory "HOL-Algebra.Elementary_Groups"
### 0.482s elapsed time, 1.467s cpu time, 0.089s GC time
class factorial_semiring_gcd = factorial_semiring + Gcd +
  assumes "gcd_eq_gcd_factorial": "!!a b. gcd a b = gcd_factorial a b"
    and "lcm_eq_lcm_factorial": "!!a b. lcm a b = lcm_factorial a b"
    and "Gcd_eq_Gcd_factorial": "!!A. Gcd A = Gcd_factorial A"
    and "Lcm_eq_Lcm_factorial": "!!A. Lcm A = Lcm_factorial A"
locale ring_hom_cring
  fixes R :: "('a, 'b) ring_scheme"  (structure)
    and S :: "('c, 'd) ring_scheme"  (structure)
    and h :: "'a => 'c"
  assumes "ring_hom_cring R S h"
### theory "HOL-Algebra.Ring"
### 2.531s elapsed time, 7.116s cpu time, 0.767s GC time
Loading theory "HOL-Algebra.AbelCoset" (required by "Draft.Elliptic_TestMoreTemplates" via "Draft.Elliptic_Test" via "HOL-Number_Theory.Residues" via "HOL-Algebra.Multiplicative_Group" via "HOL-Algebra.UnivPoly" via "HOL-Algebra.RingHom" via "HOL-Algebra.Ideal")
Loading theory "HOL-Algebra.Module" (required by "Draft.Elliptic_TestMoreTemplates" via "Draft.Elliptic_Test" via "HOL-Number_Theory.Residues" via "HOL-Algebra.Multiplicative_Group" via "HOL-Algebra.UnivPoly")
Loading theory "HOL-Decision_Procs.Algebra_Aux" (required by "Draft.Elliptic_TestMoreTemplates" via "Draft.Elliptic_Test" via "Draft.Elliptic_Locale" via "HOL-Decision_Procs.Reflective_Field" via "HOL-Decision_Procs.Commutative_Ring")
locale Ring.ring
  fixes R :: "('a, 'b) ring_scheme"  (structure)
  assumes "ring R"
### Cannot skip proof of schematic goal statement
locale module
  fixes R :: "('a, 'b) ring_scheme"  (structure)
    and M :: "('a, 'c, 'd) module_scheme"  (structure)
  assumes "module R M"
locale abelian_group_hom
  fixes G :: "('a, 'b) ring_scheme"  (structure)
    and H :: "('c, 'd) ring_scheme"  (structure)
    and h :: "'a => 'c"
  assumes "abelian_group_hom G H h"
### Cannot skip proof of schematic goal statement
locale abelian_group
  fixes G :: "('a, 'b) ring_scheme"  (structure)
  assumes "abelian_group G"
locale Ring.field
  fixes R :: "('a, 'b) ring_scheme"  (structure)
  assumes "field R"
### Ignoring duplicate rewrite rule:
### inv \<one> == \<one>
locale algebra
  fixes R :: "('a, 'b) ring_scheme"  (structure)
    and M :: "('a, 'c, 'd) module_scheme"  (structure)
  assumes "algebra R M"
### Cannot skip proof of schematic goal statement
locale additive_subgroup
  fixes H :: "'a set"
    and G :: "('a, 'b) ring_scheme"  (structure)
  assumes "additive_subgroup H G"
### theory "HOL-Decision_Procs.Algebra_Aux"
### 0.898s elapsed time, 3.558s cpu time, 0.358s GC time
Loading theory "HOL-Decision_Procs.Commutative_Ring" (required by "Draft.Elliptic_TestMoreTemplates" via "Draft.Elliptic_Test" via "Draft.Elliptic_Locale" via "HOL-Decision_Procs.Reflective_Field")
locale abelian_subgroup
  fixes H :: "'a set"
    and G :: "('a, 'b) ring_scheme"  (structure)
  assumes "abelian_subgroup H G"
locale submodule
  fixes H :: "'c set"
    and R :: "('a, 'b) ring_scheme"
    and M :: "('a, 'c, 'd) module_scheme"  (structure)
  assumes "submodule H R M"
### theory "HOL-Algebra.Module"
### 1.541s elapsed time, 6.104s cpu time, 0.537s GC time
[| ?M <= carrier G; ?g : carrier G; ?h : carrier G |]
==> ?M #>\<^bsub>add_monoid G\<^esub> ?g #>\<^bsub>add_monoid G\<^esub> ?h =
    ?M #>\<^bsub>add_monoid G\<^esub> ?g \<oplus> ?h
[| abelian_group ?G; ?M <= carrier ?G; ?g : carrier ?G; ?h : carrier ?G |]
==> ?M +>\<^bsub>?G\<^esub> ?g +>\<^bsub>?G\<^esub> ?h =
    ?M +>\<^bsub>?G\<^esub> ?g \<oplus>\<^bsub>?G\<^esub> ?h
### theory "HOL-Computational_Algebra.Factorial_Ring"
### 6.251s elapsed time, 18.980s cpu time, 2.052s GC time
Loading theory "HOL-Computational_Algebra.Euclidean_Algorithm" (required by "Draft.Elliptic_TestMoreTemplates" via "Draft.Elliptic_Test" via "HOL-Number_Theory.Residues" via "HOL-Number_Theory.Cong" via "HOL-Computational_Algebra.Primes")
### theory "HOL-Algebra.AbelCoset"
### 2.617s elapsed time, 9.526s cpu time, 0.872s GC time
Loading theory "HOL-Algebra.Ideal" (required by "Draft.Elliptic_TestMoreTemplates" via "Draft.Elliptic_Test" via "HOL-Number_Theory.Residues" via "HOL-Algebra.Multiplicative_Group" via "HOL-Algebra.UnivPoly" via "HOL-Algebra.RingHom")
locale cring
  fixes R :: "('a, 'b) ring_scheme"  (structure)
  assumes "cring R"
consts
  head :: "'a list => 'a"
consts
  Ipol :: "'a list => pol => 'a"
consts
  Ipolex :: "'a list => polex => 'a"
locale ideal
  fixes I :: "'a set"
    and R :: "('a, 'b) ring_scheme"  (structure)
  assumes "ideal I R"
locale principalideal
  fixes I :: "'a set"
    and R :: "('a, 'b) ring_scheme"  (structure)
  assumes "principalideal I R"
locale maximalideal
  fixes I :: "'a set"
    and R :: "('a, 'b) ring_scheme"  (structure)
  assumes "maximalideal I R"
locale primeideal
  fixes I :: "'a set"
    and R :: "('a, 'b) ring_scheme"  (structure)
  assumes "primeideal I R"
consts
  neg :: "pol => pol"
consts
  sqr :: "pol => pol"
### Rewrite rule not in simpset:
### Wellfounded.accp pow_rel (?n1, ?P1) ==>
### pow ?n1 ?P1 ==
### if ?n1 = 0 then Pc 1
### else if even ?n1 then pow (?n1 div 2) (sqr ?P1)
###      else ?P1 \<langle>*\<rangle> pow (?n1 div 2) (sqr ?P1)
Found termination order: "(%p. size (fst p)) <*mlex*> {}"
consts
  norm :: "polex => pol"
locale cring
  fixes R :: "('a, 'b) ring_scheme"  (structure)
  assumes "cring R"
consts
  Imon :: "'a list => mon => 'a"
consts
  mkMX :: "nat => mon => mon"
class euclidean_semiring_gcd = normalization_euclidean_semiring + Gcd +
  assumes "gcd_eucl": "normalization_euclidean_semiring_class.gcd = gcd"
    and "lcm_eucl": "normalization_euclidean_semiring_class.lcm = lcm"
  assumes "Gcd_eucl": "normalization_euclidean_semiring_class.Gcd = Gcd"
    and "Lcm_eucl": "normalization_euclidean_semiring_class.Lcm = Lcm"
### theory "HOL-Algebra.Ideal"
### 1.821s elapsed time, 5.539s cpu time, 0.465s GC time
Loading theory "HOL-Algebra.RingHom" (required by "Draft.Elliptic_TestMoreTemplates" via "Draft.Elliptic_Test" via "HOL-Number_Theory.Residues" via "HOL-Algebra.Multiplicative_Group" via "HOL-Algebra.UnivPoly")
Found termination order: "(%p. size (fst p)) <*mlex*> {}"
locale ring_hom_ring
  fixes R :: "('a, 'b) ring_scheme"  (structure)
    and S :: "('c, 'd) ring_scheme"  (structure)
    and h :: "'a => 'c"
  assumes "ring_hom_ring R S h"
Found termination order:
  "(%p. size (fst p)) <*mlex*> (%p. size (snd p)) <*mlex*> {}"
consts
  mon_of_pol :: "pol => mon option"
Found termination order:
  "(%p. size_list (%p. size (snd p)) (snd p)) <*mlex*> {}"
### theory "HOL-Algebra.RingHom"
### 0.783s elapsed time, 2.403s cpu time, 0.210s GC time
Loading theory "HOL-Algebra.UnivPoly" (required by "Draft.Elliptic_TestMoreTemplates" via "Draft.Elliptic_Test" via "HOL-Number_Theory.Residues" via "HOL-Algebra.Multiplicative_Group")
Found termination order:
  "(%p. size_list (%p. size (snd p)) (snd p)) <*mlex*> {}"
Found termination order: "size_list (%p. size (snd p)) <*mlex*> {}"
locale bound
  fixes z :: "'a"
    and n :: "nat"
    and f :: "nat => 'a"
  assumes "bound z n f"
Found termination order: "(%p. size (snd (snd (snd p)))) <*mlex*> {}"
Found termination order:
  "(%p. size_list (%p. size (snd p)) (fst (snd p))) <*mlex*> {}"
Found termination order:
  "(%p. size_list (%p. size (snd p)) (fst (snd p))) <*mlex*> {}"
Found termination order: "(%p. size (fst (snd (snd p)))) <*mlex*> {}"
locale Ring.ring
  fixes R :: "('a, 'b) ring_scheme"  (structure)
  assumes "ring R"
locale UP
  fixes R :: "('a, 'b) ring_scheme"  (structure)
    and P :: "('a, nat => 'a) up_ring"  (structure)
  defines "P == UP R"
locale UP_ring
  fixes R :: "('a, 'b) ring_scheme"  (structure)
    and P :: "('a, nat => 'a) up_ring"  (structure)
  assumes "UP_ring R"
  defines "P == UP R"
locale UP_cring
  fixes R :: "('a, 'b) ring_scheme"  (structure)
    and P :: "('a, nat => 'a) up_ring"  (structure)
  assumes "UP_cring R"
  defines "P == UP R"
locale UP_domain
  fixes R :: "('a, 'b) ring_scheme"  (structure)
    and P :: "('a, nat => 'a) up_ring"  (structure)
  assumes "UP_domain R"
  defines "P == UP R"
locale UP
  fixes R :: "('a, 'b) ring_scheme"  (structure)
    and P :: "('a, nat => 'a) up_ring"  (structure)
  defines "P == UP R"
locale UP_ring
  fixes R :: "('a, 'b) ring_scheme"  (structure)
    and P :: "('a, nat => 'a) up_ring"  (structure)
  assumes "UP_ring R"
  defines "P == UP R"
locale UP_ring
  fixes R :: "('a, 'b) ring_scheme"  (structure)
    and P :: "('a, nat => 'a) up_ring"  (structure)
  assumes "UP_ring R"
  defines "P == UP R"
locale UP_ring
  fixes R :: "('a, 'b) ring_scheme"  (structure)
    and P :: "('a, nat => 'a) up_ring"  (structure)
  assumes "UP_ring R"
  defines "P == UP R"
locale UP_cring
  fixes R :: "('a, 'b) ring_scheme"  (structure)
    and P :: "('a, nat => 'a) up_ring"  (structure)
  assumes "UP_cring R"
  defines "P == UP R"
locale UP_ring
  fixes R :: "('a, 'b) ring_scheme"  (structure)
    and P :: "('a, nat => 'a) up_ring"  (structure)
  assumes "UP_ring R"
  defines "P == UP R"
locale UP_ring
  fixes R :: "('a, 'b) ring_scheme"  (structure)
    and P :: "('a, nat => 'a) up_ring"  (structure)
  assumes "UP_ring R"
  defines "P == UP R"
val term_of_nat = fn: Isabelle6281132.Generated_Code.nat -> term
val term_of_int = fn: Isabelle6281132.Generated_Code.inta -> term
val term_of_pol = fn: Isabelle6281132.Generated_Code.pol -> term
val cv = fn: Proof.context -> conv
### ML warning (line 781 of "~~/src/HOL/Decision_Procs/Commutative_Ring.thy"):
### Value identifier (t) has not been referenced.
### ML warning (line 785 of "~~/src/HOL/Decision_Procs/Commutative_Ring.thy"):
### Matches are not exhaustive.
### ML warning (line 796 of "~~/src/HOL/Decision_Procs/Commutative_Ring.thy"):
### Matches are not exhaustive.
### ML warning (line 787 of "~~/src/HOL/Decision_Procs/Commutative_Ring.thy"):
### Matches are not exhaustive.
### ML warning (line 826 of "~~/src/HOL/Decision_Procs/Commutative_Ring.thy"):
### Matches are not exhaustive.
### ML warning (line 815 of "~~/src/HOL/Decision_Procs/Commutative_Ring.thy"):
### Matches are not exhaustive.
### ML warning (line 863 of "~~/src/HOL/Decision_Procs/Commutative_Ring.thy"):
### Matches are not exhaustive.
### ML warning (line 861 of "~~/src/HOL/Decision_Procs/Commutative_Ring.thy"):
### Matches are not exhaustive.
### ML warning (line 857 of "~~/src/HOL/Decision_Procs/Commutative_Ring.thy"):
### Matches are not exhaustive.
### ML warning (line 880 of "~~/src/HOL/Decision_Procs/Commutative_Ring.thy"):
### Pattern is not exhaustive.
signature RING_TAC =
  sig
    structure Ring_Simps:
      sig
        type T
        val get: Context.generic -> T
        val map: (T -> T) -> Context.generic -> Context.generic
        val put: T -> Context.generic -> Context.generic
      end
    val eq_ring_simps:
       (term * (thm list * thm list * thm list * thm list * thm * thm)) *
       (term * (thm list * thm list * thm list * thm list * thm * thm))
         -> bool
    val get_matching_rules:
       Proof.context -> (term * 'a) Net.net -> term -> 'a option
    val insert_rules:
       ((term * 'a) * (term * 'a) -> bool) ->
         term * 'a -> (term * 'a) Net.net -> (term * 'a) Net.net
    val mk_in_carrier:
       Proof.context -> term -> thm list -> (string * typ) list -> thm
    val mk_ring: typ -> term
    val norm: thm -> thm
    val ring_tac: bool -> thm list -> Proof.context -> int -> tactic
  end
structure Ring_Tac: RING_TAC
locale cring
  fixes R :: "('a, 'b) ring_scheme"  (structure)
  assumes "cring R"
### theory "HOL-Decision_Procs.Commutative_Ring"
### 6.411s elapsed time, 20.261s cpu time, 1.769s GC time
Loading theory "HOL-Decision_Procs.Reflective_Field" (required by "Draft.Elliptic_TestMoreTemplates" via "Draft.Elliptic_Test" via "Draft.Elliptic_Locale")
locale UP_ring
  fixes R :: "('a, 'b) ring_scheme"  (structure)
    and P :: "('a, nat => 'a) up_ring"  (structure)
  assumes "UP_ring R"
  defines "P == UP R"
locale UP_ring
  fixes R :: "('a, 'b) ring_scheme"  (structure)
    and P :: "('a, nat => 'a) up_ring"  (structure)
  assumes "UP_ring R"
  defines "P == UP R"
locale UP_domain
  fixes R :: "('a, 'b) ring_scheme"  (structure)
    and P :: "('a, nat => 'a) up_ring"  (structure)
  assumes "UP_domain R"
  defines "P == UP R"
locale UP_ring
  fixes R :: "('a, 'b) ring_scheme"  (structure)
    and P :: "('a, nat => 'a) up_ring"  (structure)
  assumes "UP_ring R"
  defines "P == UP R"
locale UP_domain
  fixes R :: "('a, 'b) ring_scheme"  (structure)
    and P :: "('a, nat => 'a) up_ring"  (structure)
  assumes "UP_domain R"
  defines "P == UP R"
Found termination order: "(%p. size (snd p)) <*mlex*> {}"
locale UP_ring
  fixes R :: "('a, 'b) ring_scheme"  (structure)
    and P :: "('a, nat => 'a) up_ring"  (structure)
  assumes "UP_ring R"
  defines "P == UP R"
consts
  feval :: "'a list => fexpr => 'a"
locale UP_domain
  fixes R :: "('a, 'b) ring_scheme"  (structure)
    and P :: "('a, nat => 'a) up_ring"  (structure)
  assumes "UP_domain R"
  defines "P == UP R"
locale Ring.ring
  fixes R :: "('a, 'b) ring_scheme"  (structure)
  assumes "ring R"
locale UP
  fixes R :: "('a, 'b) ring_scheme"  (structure)
    and P :: "('a, nat => 'a) up_ring"  (structure)
  defines "P == UP R"
locale UP_pre_univ_prop
  fixes R :: "('a, 'b) ring_scheme"  (structure)
    and S :: "('c, 'd) ring_scheme"  (structure)
    and h :: "'a => 'c"
    and P :: "('a, nat => 'a) up_ring"  (structure)
  assumes "UP_pre_univ_prop R S h"
  defines "P == UP R"
locale UP_univ_prop
  fixes R :: "('a, 'b) ring_scheme"  (structure)
    and S :: "('c, 'd) ring_scheme"  (structure)
    and h :: "'a => 'c"
    and P :: "('a, nat => 'a) up_ring"  (structure)
    and s :: "'c"
    and Eval :: "(nat => 'a) => 'c"
  assumes "UP_univ_prop R S h s"
  defines "P == UP R"
    and "Eval == eval R S h s"
locale UP_pre_univ_prop
  fixes R :: "('a, 'b) ring_scheme"  (structure)
    and S :: "('c, 'd) ring_scheme"  (structure)
    and h :: "'a => 'c"
    and P :: "('a, nat => 'a) up_ring"  (structure)
  assumes "UP_pre_univ_prop R S h"
  defines "P == UP R"
### theory "HOL-Computational_Algebra.Euclidean_Algorithm"
### 8.628s elapsed time, 26.474s cpu time, 2.698s GC time
Loading theory "HOL-Computational_Algebra.Primes" (required by "Draft.Elliptic_TestMoreTemplates" via "Draft.Elliptic_Test" via "HOL-Number_Theory.Residues" via "HOL-Number_Theory.Cong")
### theory "HOL-Computational_Algebra.Primes"
### 0.257s elapsed time, 0.819s cpu time, 0.103s GC time
Loading theory "HOL-Number_Theory.Cong" (required by "Draft.Elliptic_TestMoreTemplates" via "Draft.Elliptic_Test" via "HOL-Number_Theory.Residues")
Found termination order: "(%p. size (snd p)) <*mlex*> {}"
class unique_euclidean_semiring = euclidean_semiring_cancel +
  fixes division_segment :: "'a => 'a"
  assumes
    "euclidean_size_mult":
      "!!a b. euclidean_size (a * b) = euclidean_size a * euclidean_size b"
  assumes "is_unit_division_segment": "!!a. is_unit (division_segment a)"
    and
    "division_segment_mult":
      "!!a b.
          [| a ~= (0::'a); b ~= (0::'a) |]
          ==> division_segment (a * b) =
              division_segment a * division_segment b"
    and
    "division_segment_mod":
      "!!b a.
          [| b ~= (0::'a); ~ b dvd a |]
          ==> division_segment (a mod b) = division_segment b"
  assumes
    "div_bounded":
      "!!b r q.
          [| b ~= (0::'a); division_segment r = division_segment b;
             euclidean_size r < euclidean_size b |]
          ==> (q * b + r) div b = q"
Found termination order: "(%p. size (snd p)) <*mlex*> {}"
### theory "HOL-Number_Theory.Cong"
### 0.853s elapsed time, 2.621s cpu time, 0.390s GC time
Loading theory "HOL-Number_Theory.Totient" (required by "Draft.Elliptic_TestMoreTemplates" via "Draft.Elliptic_Test" via "HOL-Number_Theory.Residues")
locale UP_pre_univ_prop
  fixes R :: "('a, 'b) ring_scheme"  (structure)
    and S :: "('c, 'd) ring_scheme"  (structure)
    and h :: "'a => 'c"
    and P :: "('a, nat => 'a) up_ring"  (structure)
  assumes "UP_pre_univ_prop R S h"
  defines "P == UP R"
locale Group.monoid
  fixes G :: "('a, 'b) monoid_scheme"  (structure)
  assumes "Group.monoid G"
Found termination order: "(%p. size (fst (snd (snd p)))) <*mlex*> {}"
locale UP_ring
  fixes R :: "('a, 'b) ring_scheme"  (structure)
    and P :: "('a, nat => 'a) up_ring"  (structure)
  assumes "UP_ring R"
  defines "P == UP R"
consts
  totient_naive :: "nat => nat => nat => nat"
### theory "HOL-Number_Theory.Totient"
### 0.513s elapsed time, 1.640s cpu time, 0.188s GC time
Found termination order: "(%p. size (fst p)) <*mlex*> {}"
locale UP_cring
  fixes R :: "('a, 'b) ring_scheme"  (structure)
    and P :: "('a, nat => 'a) up_ring"  (structure)
  assumes "UP_cring R"
  defines "P == UP R"
locale UP_cring
  fixes R :: "('a, 'b) ring_scheme"  (structure)
    and P :: "('a, nat => 'a) up_ring"  (structure)
  assumes "UP_cring R"
  defines "P == UP R"
Found termination order: "size <*mlex*> {}"
consts
  nonzero :: "'a list => pexpr list => bool"
### theory "HOL-Algebra.UnivPoly"
### 9.564s elapsed time, 28.866s cpu time, 7.001s GC time
Loading theory "HOL-Algebra.Multiplicative_Group" (required by "Draft.Elliptic_TestMoreTemplates" via "Draft.Elliptic_Test" via "HOL-Number_Theory.Residues")
val term_of_nat = fn: Isabelle6650264.Generated_Code.nat -> term
val term_of_int = fn: Isabelle6650264.Generated_Code.inta -> term
val term_of_pexpr = fn: Isabelle6650264.Generated_Code.pexpr -> term
val term_of_pexpr1 = fn: Isabelle6650264.Generated_Code.pexpr1 -> term
val term_of_pexpr2 = fn: Isabelle6650264.Generated_Code.pexpr2 -> term
val term_of_result = fn:
   Isabelle6650264.Generated_Code.pexpr *
   (Isabelle6650264.Generated_Code.pexpr *
    Isabelle6650264.Generated_Code.pexpr list)
     -> term
val cv = fn: Proof.context -> conv
### ML warning (line 711 of "~~/src/HOL/Decision_Procs/Reflective_Field.thy"):
### Value identifier (vs) has not been referenced.
### ML warning (line 710 of "~~/src/HOL/Decision_Procs/Reflective_Field.thy"):
### Value identifier (vs) has not been referenced.
### ML warning (line 709 of "~~/src/HOL/Decision_Procs/Reflective_Field.thy"):
### Value identifier (vs) has not been referenced.
### ML warning (line 724 of "~~/src/HOL/Decision_Procs/Reflective_Field.thy"):
### Value identifier (vs) has not been referenced.
### ML warning (line 723 of "~~/src/HOL/Decision_Procs/Reflective_Field.thy"):
### Value identifier (vs) has not been referenced.
### ML warning (line 722 of "~~/src/HOL/Decision_Procs/Reflective_Field.thy"):
### Value identifier (vs) has not been referenced.
### ML warning (line 759 of "~~/src/HOL/Decision_Procs/Reflective_Field.thy"):
### Matches are not exhaustive.
### ML warning (line 777 of "~~/src/HOL/Decision_Procs/Reflective_Field.thy"):
### Matches are not exhaustive.
### ML warning (line 767 of "~~/src/HOL/Decision_Procs/Reflective_Field.thy"):
### Matches are not exhaustive.
### ML warning (line 816 of "~~/src/HOL/Decision_Procs/Reflective_Field.thy"):
### Matches are not exhaustive.
### ML warning (line 834 of "~~/src/HOL/Decision_Procs/Reflective_Field.thy"):
### Matches are not exhaustive.
### ML warning (line 815 of "~~/src/HOL/Decision_Procs/Reflective_Field.thy"):
### Matches are not exhaustive.
### ML warning (line 804 of "~~/src/HOL/Decision_Procs/Reflective_Field.thy"):
### Matches are not exhaustive.
### ML warning (line 850 of "~~/src/HOL/Decision_Procs/Reflective_Field.thy"):
### Matches are not exhaustive.
### ML warning (line 842 of "~~/src/HOL/Decision_Procs/Reflective_Field.thy"):
### Matches are not exhaustive.
### ML warning (line 860 of "~~/src/HOL/Decision_Procs/Reflective_Field.thy"):
### Value identifier (i) has not been referenced.
### ML warning (line 885 of "~~/src/HOL/Decision_Procs/Reflective_Field.thy"):
### Pattern is not exhaustive.
### ML warning (line 886 of "~~/src/HOL/Decision_Procs/Reflective_Field.thy"):
### Pattern is not exhaustive.
signature FIELD_TAC =
  sig
    structure Field_Simps:
      sig
        type T
        val get: Context.generic -> T
        val map: (T -> T) -> Context.generic -> Context.generic
        val put: T -> Context.generic -> Context.generic
      end
    val eq_field_simps:
       (term * (thm list * thm list * thm list * thm * thm)) *
       (term * (thm list * thm list * thm list * thm * thm))
         -> bool
    val field_tac: bool -> Proof.context -> int -> tactic
  end
structure Field_Tac: FIELD_TAC
locale UP_ring
  fixes R :: "('a, 'b) ring_scheme"  (structure)
    and P :: "('a, nat => 'a) up_ring"  (structure)
  assumes "UP_ring R"
  defines "P == UP R"
locale Ring.field
  fixes R :: "('a, 'b) ring_scheme"  (structure)
  assumes "field R"
### theory "HOL-Decision_Procs.Reflective_Field"
### 8.312s elapsed time, 24.720s cpu time, 6.666s GC time
Loading theory "Draft.Elliptic_Locale" (required by "Draft.Elliptic_TestMoreTemplates" via "Draft.Elliptic_Test")
locale UP_cring
  fixes R :: "('a, 'b) ring_scheme"  (structure)
    and P :: "('a, nat => 'a) up_ring"  (structure)
  assumes "UP_cring R"
  defines "P == UP R"
locale Group.group
  fixes G :: "('a, 'b) monoid_scheme"  (structure)
  assumes "Group.group G"
locale ell_field
  fixes R :: "('a, 'b) ring_scheme"  (structure)
  assumes "ell_field R"
locale Ring.field
  fixes R :: "('a, 'b) ring_scheme"  (structure)
  assumes "field R"
consts
  point_mult :: "'a => nat => 'a point => 'a point"
locale UP_cring
  fixes R :: "('a, 'b) ring_scheme"  (structure)
    and P :: "('a, nat => 'a) up_ring"  (structure)
  assumes "UP_cring R"
  defines "P == UP R"
locale UP_domain
  fixes R :: "('a, 'b) ring_scheme"  (structure)
    and P :: "('a, nat => 'a) up_ring"  (structure)
  assumes "UP_domain R"
  defines "P == UP R"
locale Ring.field
  fixes R :: "('a, 'b) ring_scheme"  (structure)
  assumes "field R"
### theory "HOL-Algebra.Multiplicative_Group"
### 2.294s elapsed time, 5.333s cpu time, 0.716s GC time
Loading theory "HOL-Number_Theory.Residues" (required by "Draft.Elliptic_TestMoreTemplates" via "Draft.Elliptic_Test")
locale residues
  fixes m :: "int"
    and R :: "int ring"  (structure)
  assumes "residues m"
  defines "R == residue_ring m"
consts
  ppoint_mult :: "'a => nat => 'a * 'a * 'a => 'a * 'a * 'a"
locale residues
  fixes m :: "int"
    and R :: "int ring"  (structure)
  assumes "residues m"
  defines "R == residue_ring m"
locale residues_prime
  fixes p :: "nat"
    and R :: "int ring"  (structure)
  assumes "residues_prime p"
  defines "R == residue_ring (int p)"
### theory "Draft.Elliptic_Locale"
### 2.425s elapsed time, 5.205s cpu time, 0.787s GC time
locale residues_prime
  fixes p :: "nat"
    and R :: "int ring"  (structure)
  assumes "residues_prime p"
  defines "R == residue_ring (int p)"
### theory "HOL-Number_Theory.Residues"
### 1.363s elapsed time, 2.577s cpu time, 0.366s GC time
Loading theory "Draft.Elliptic_Test" (required by "Draft.Elliptic_TestMoreTemplates")
Found termination order: "(%p. size (fst (snd (snd p)))) <*mlex*> {}"
locale residues_prime_gt2
  fixes p :: "nat"
    and R :: "int ring"  (structure)
  assumes "residues_prime_gt2 p"
  defines "R == residue_ring (int p)"
### theory "Draft.Elliptic_Test"
### 2.212s elapsed time, 2.401s cpu time, 0.264s GC time
Loading theory "Draft.Elliptic_TestMoreTemplates"
val templateLemmas =
   [("Elliptic_Test.fast_ppoint_mult_0",
     "fast_ppoint_mult ?m ?a 0 ?p = (0, 0, 0)",
     template_equation
      (template_app
        (template_app
          (template_app
            (template_app (template_hole 4, template_var 2),
             template_var 1),
           template_hole 3),
         template_var 0),
       template_app
        (template_app (template_hole 2, template_hole 1),
         template_app
          (template_app (template_hole 0, template_hole 1),
           template_hole 1)))),
    ("Elliptic_Test.fast_ppoint_mult_even",
     "[| ?n ~= 0; ?n mod 2 = 0 |]
      ==> fast_ppoint_mult ?m ?a ?n ?p =
          mpdouble ?m ?a (fast_ppoint_mult ?m ?a (?n div 2) ?p)",
     template_implication
      ([template_negation
         (template_equation (template_var 3, template_hole 8)),
        template_equation
         (template_app
           (template_app (template_hole 7, template_var 3),
            template_app
             (template_hole 6,
              template_app (template_hole 5, template_hole 4))),
          template_hole 8)],
       template_equation
        (template_app
          (template_app
            (template_app
              (template_app (template_hole 2, template_var 2),
               template_var 1),
             template_var 3),
           template_var 0),
         template_app
          (template_app
            (template_app (template_hole 1, template_var 2),
             template_var 1),
           template_app
            (template_app
              (template_app
                (template_app (template_hole 2, template_var 2),
                 template_var 1),
               template_app
                (template_app (template_hole 0, template_var 3),
                 template_app
                  (template_hole 6,
                   template_app (template_hole 5, template_hole 4)))),
             template_var 0))))),
    ("Elliptic_Test.fast_ppoint_mult_odd",
     "[| ?n ~= 0; ?n mod 2 ~= 0 |]
      ==> fast_ppoint_mult ?m ?a ?n ?p =
          mpadd ?m ?a ?p
           (mpdouble ?m ?a (fast_ppoint_mult ?m ?a (?n div 2) ?p))",
     template_implication
      ([template_negation
         (template_equation (template_var 3, template_hole 9)),
        template_negation
         (
            template_equation
             (template_app
               (template_app (template_hole 8, template_var 3),
                template_app
                 (template_hole 7,
                  template_app (template_hole 6, template_hole 5))),
              template_hole 9)
            )],
       template_equation
        (template_app
          (template_app
            (template_app
              (template_app (template_hole 3, template_var 2),
               template_var 1),
             template_var 3),
           template_var 0),
         template_app
          (template_app
            (template_app
              (template_app (template_hole 2, template_var 2),
               template_var 1),
             template_var 0),
           template_app
            (template_app
              (template_app (template_hole 1, template_var 2),
               template_var 1),
             template_app
              (template_app
                (template_app
                  (template_app (template_hole 3, template_var 2),
                   template_var 1),
                 template_app
                  (template_app (template_hole 0, template_var 3),
                   template_app
                    (template_hole 7,
                     template_app (template_hole 6, template_hole 5)))),
               template_var 0))))))]:
   (string * thm * template) list
### theory "Draft.Elliptic_TestMoreTemplates"
### 0.713s elapsed time, 1.053s cpu time, 0.114s GC time
val it = (): unit
