   [("Algebra.pequiv_refl", "?a \<simeq> ?a",
     template_predicate
      (
         template_app
          (template_app (template_hole 0, template_var 0), template_var 0)
         )),
    ("Linear_Algebra.of_real_differentiable", "of_real differentiable ?F",
     template_predicate
      (
         template_app
          (template_app (template_hole 1, template_hole 0), template_var 0)
         )),
    ("Function_Algebras.one_fun_apply", "1 ?x = (1::?'a)",
     template_equation
      (template_app (template_hole 1, template_var 0), template_hole 0)),
    ("Function_Algebras.zero_fun_apply", "0 ?x = (0::?'a)",
     template_equation
      (template_app (template_hole 1, template_var 0), template_hole 0)),
    ("Linear_Algebra.collinear_sing", "collinear {?x}",
     template_predicate
      (
         template_app
          (template_hole 2,
           template_app
            (template_app (template_hole 1, template_var 0),
             template_hole 0))
         )),
    ("Linear_Algebra.infnorm_pos_le", "0 <= infnorm ?x",
     template_inequation
      (less_equals, template_hole 1,
       template_app (template_hole 0, template_var 0))),
    ("Linear_Algebra.in_span_Basis", "?x : span Basis",
     template_predicate
      (
         template_app
          (template_app (template_hole 2, template_var 0),
           template_app (template_hole 1, template_hole 0))
         )),
    ("Algebra.dr_Abort", "drefines ?\<phi> ?G Abort Abort",
     template_predicate
      (
         template_app
          (template_app
            (template_app
              (template_app (template_hole 2, template_var 1),
               template_var 0),
             template_hole 1),
           template_hole 0)
         )),
    ("Algebra.dr_Skip", "drefines ?\<phi> ?G Skip Skip",
     template_predicate
      (
         template_app
          (template_app
            (template_app
              (template_app (template_hole 2, template_var 1),
               template_var 0),
             template_hole 1),
           template_hole 0)
         )),
    ("Algebra.pcorres_Skip", "pcorres ?\<phi> ?G Skip Skip",
     template_predicate
      (
         template_app
          (template_app
            (template_app
              (template_app (template_hole 2, template_var 1),
               template_var 0),
             template_hole 1),
           template_hole 0)
         )),
    ("Algebra.left_refines_AC", "?a \<sqsubseteq> (?a \<Squnion> ?b)",
     template_predicate
      (
         template_app
          (template_app (template_hole 1, template_var 1),
           template_app
            (template_app (template_hole 0, template_var 1),
             template_var 0))
         )),
    ("Algebra.right_refines_AC", "?b \<sqsubseteq> (?a \<Squnion> ?b)",
     template_predicate
      (
         template_app
          (template_app (template_hole 1, template_var 1),
           template_app
            (template_app (template_hole 0, template_var 0),
             template_var 1))
         )),
    ("Algebra.left_refines_DC", "(?a \<Sqinter> ?b) \<sqsubseteq> ?a",
     template_predicate
      (
         template_app
          (template_app
            (template_hole 1,
             template_app
              (template_app (template_hole 0, template_var 1),
               template_var 0)),
           template_var 1)
         )),
    ("Algebra.right_refines_DC", "(?a \<Sqinter> ?b) \<sqsubseteq> ?b",
     template_predicate
      (
         template_app
          (template_app
            (template_hole 1,
             template_app
              (template_app (template_hole 0, template_var 1),
               template_var 0)),
           template_var 0)
         )),
    ("Linear_Algebra.sum_clauses", "sum ?f {} = (0::?'a)",
     template_equation
      (template_app
        (template_app (template_hole 2, template_var 0), template_hole 1),
       template_hole 0)),
    ("Algebra.AC_idem", "?a \<Squnion> ?a = ?a",
     template_equation
      (template_app
        (template_app (template_hole 0, template_var 0), template_var 0),
       template_var 0)),
    ("Algebra.DC_idem", "?a \<Sqinter> ?a = ?a",
     template_equation
      (template_app
        (template_app (template_hole 0, template_var 0), template_var 0),
       template_var 0)),
    ("Set_Algebras.set_zero_plus", "(0::?'a) +o ?C = ?C",
     template_equation
      (template_app
        (template_app (template_hole 1, template_hole 0), template_var 0),
       template_var 0)),
    ("Set_Algebras.set_one_times", "(1::?'a) *o ?C = ?C",
     template_equation
      (template_app
        (template_app (template_hole 1, template_hole 0), template_var 0),
       template_var 0)),
    ("Linear_Algebra.bilinear_conv_bounded_bilinear",
     "bilinear ?h = bounded_bilinear ?h",
     template_equation
      (template_app (template_hole 1, template_var 0),
       template_app (template_hole 0, template_var 0))),
    ("Linear_Algebra.linear_linear", "bounded_linear ?f = linear ?f",
     template_equation
      (template_app (template_hole 1, template_var 0),
       template_app (template_hole 0, template_var 0))),
    ("Linear_Algebra.linear_conv_bounded_linear",
     "linear ?f = bounded_linear ?f",
     template_equation
      (template_app (template_hole 1, template_var 0),
       template_app (template_hole 0, template_var 0))),
    ("Linear_Algebra.infnorm_le_norm", "infnorm ?x <= norm ?x",
     template_inequation
      (less_equals, template_app (template_hole 1, template_var 0),
       template_app (template_hole 0, template_var 0))),
    ("Linear_Algebra.translate_inj_on", "inj_on ((+) ?a) ?A",
     template_predicate
      (
         template_app
          (template_app (template_hole 1, t_empty), template_var 0)
         )),
    ("Function_Algebras.of_nat_fun_apply", "of_nat ?n ?x = of_nat ?n",
     template_equation
      (template_app
        (template_app (template_hole 1, template_var 1), template_var 0),
       template_app (template_hole 0, template_var 1))),
    ("Function_Algebras.numeral_fun_apply", "numeral ?n ?x = numeral ?n",
     template_equation
      (template_app
        (template_app (template_hole 1, template_var 1), template_var 0),
       template_app (template_hole 0, template_var 1))),
    ("Function_Algebras.of_nat_fun", "of_nat ?n = (%x. of_nat ?n)",
     template_equation
      (template_app (template_hole 1, template_var 0), t_empty)),
    ("Function_Algebras.numeral_fun", "numeral ?n = (%x. numeral ?n)",
     template_equation
      (template_app (template_hole 1, template_var 0), t_empty)),
    ("Algebra.PC_idem", "?a \<^bsub>?p\<^esub>\<oplus> ?a = ?a",
     template_equation
      (template_app
        (template_app
          (template_app (template_hole 0, template_var 1), template_var 0),
         template_var 1),
       template_var 1)),
    ("Linear_Algebra.real_abs_infnorm",
     "\<bar>infnorm ?x\<bar> = infnorm ?x",
     template_equation
      (template_app
        (template_hole 1, template_app (template_hole 0, template_var 0)),
       template_app (template_hole 0, template_var 0))),
    ("Linear_Algebra.infnorm_neg", "infnorm (- ?x) = infnorm ?x",
     template_equation
      (template_app
        (template_hole 1, template_app (template_hole 0, template_var 0)),
       template_app (template_hole 1, template_var 0))),
    ("Linear_Algebra.collinear_2", "collinear {?x, ?y}",
     template_predicate
      (
         template_app
          (template_hole 2,
           template_app
            (template_app (template_hole 1, template_var 1),
             template_app
              (template_app (template_hole 1, template_var 0),
               template_hole 0)))
         )),
    ("Linear_Algebra.subspace_orthogonal_to_vector",
     "subspace {y. orthogonal ?x y}",
     template_predicate
      (
         template_app
          (template_hole 2, template_app (template_hole 1, t_empty))
         )),
    ("Boolean_Algebras.sup_boolI1", "?P ==> sup ?P ?Q",
     template_implication
      ([template_predicate (template_var 1)],
       template_predicate
        (
           template_app
            (template_app (template_hole 0, template_var 1), template_var 0)
           ))),
    ("Boolean_Algebras.sup_boolI2", "?Q ==> sup ?P ?Q",
     template_implication
      ([template_predicate (template_var 1)],
       template_predicate
        (
           template_app
            (template_app (template_hole 0, template_var 0), template_var 1)
           ))),
    ("Linear_Algebra.orthogonal_transformation_linear",
     "orthogonal_transformation ?f ==> linear ?f",
     template_implication
      ([template_predicate
         (template_app (template_hole 1, template_var 0))],
       template_predicate
        (template_app (template_hole 0, template_var 0)))),
    ("Algebra.DC_refines_AC",
     "(?a \<Sqinter> ?b) \<sqsubseteq> (?a \<Squnion> ?b)",
     template_predicate
      (
         template_app
          (template_app
            (template_hole 2,
             template_app
              (template_app (template_hole 1, template_var 1),
               template_var 0)),
           template_app
            (template_app (template_hole 0, template_var 1),
             template_var 0))
         )),
    ("Algebra.AC_comm", "?a \<Squnion> ?b = ?b \<Squnion> ?a",
     template_equation
      (template_app
        (template_app (template_hole 0, template_var 1), template_var 0),
       template_app
        (template_app (template_hole 0, template_var 0), template_var 1))),
    ("Algebra.DC_comm", "?a \<Sqinter> ?b = ?b \<Sqinter> ?a",
     template_equation
      (template_app
        (template_app (template_hole 0, template_var 1), template_var 0),
       template_app
        (template_app (template_hole 0, template_var 0), template_var 1))),
    ("Algebra.pequiv_comm", "?a \<simeq> ?b = ?b \<simeq> ?a",
     template_equation
      (template_app
        (template_app (template_hole 0, template_var 1), template_var 0),
       template_app
        (template_app (template_hole 0, template_var 0), template_var 1))),
    ("Linear_Algebra.orthogonal_commute",
     "orthogonal ?x ?y = orthogonal ?y ?x",
     template_equation
      (template_app
        (template_app (template_hole 0, template_var 1), template_var 0),
       template_app
        (template_app (template_hole 0, template_var 0), template_var 1))),
    ("Linear_Algebra.orthogonal_transformation_inj",
     "orthogonal_transformation ?f ==> inj ?f",
     template_implication
      ([template_predicate
         (template_app (template_hole 2, template_var 0))],
       template_predicate
        (
           template_app
            (template_app (template_hole 1, template_var 0),
             template_hole 0)
           ))),
    ("Linear_Algebra.bounded_linear_imp_differentiable",
     "bounded_linear ?f ==> ?f differentiable ?net",
     template_implication
      ([template_predicate
         (template_app (template_hole 1, template_var 1))],
       template_predicate
        (
           template_app
            (template_app (template_hole 0, template_var 1), template_var 0)
           ))),
    ("Linear_Algebra.linear_continuous_on",
     "bounded_linear ?f ==> continuous_on ?s ?f",
     template_implication
      ([template_predicate
         (template_app (template_hole 1, template_var 1))],
       template_predicate
        (
           template_app
            (template_app (template_hole 0, template_var 0), template_var 1)
           ))),
    ("Linear_Algebra.linear_imp_differentiable",
     "linear ?f ==> ?f differentiable ?net",
     template_implication
      ([template_predicate
         (template_app (template_hole 1, template_var 1))],
       template_predicate
        (
           template_app
            (template_app (template_hole 0, template_var 1), template_var 0)
           ))),
    ("Linear_Algebra.adjoint_linear", "linear ?f ==> linear (adjoint ?f)",
     template_implication
      ([template_predicate
         (template_app (template_hole 2, template_var 0))],
       template_predicate
        (
           template_app
            (template_hole 1,
             template_app (template_hole 0, template_var 0))
           ))),
    ("Algebra.Abort_refines", "well_def ?a ==> Abort \<sqsubseteq> ?a",
     template_implication
      ([template_predicate
         (template_app (template_hole 2, template_var 0))],
       template_predicate
        (
           template_app
            (template_app (template_hole 1, template_hole 0),
             template_var 0)
           ))),
    ("Linear_Algebra.independent_imp_finite",
     "independent ?B ==> finite ?B",
     template_implication
      ([template_negation
         (
            template_predicate
             (template_app (template_hole 1, template_var 0))
            )],
       template_predicate
        (template_app (template_hole 0, template_var 0)))),
    ("Linear_Algebra.pairwise_orthogonal_imp_finite",
     "pairwise orthogonal ?S ==> finite ?S",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 2, template_hole 1),
              template_var 0)
            )],
       template_predicate
        (template_app (template_hole 0, template_var 0)))),
    ("Linear_Algebra.infnorm_eq_0", "(infnorm ?x = 0) = (?x = (0::?'a))",
     template_bimplication
      (template_equation
        (template_app (template_hole 3, template_var 0), template_hole 2),
       template_equation (template_var 0, template_hole 0))),
    ("Linear_Algebra.orthogonal_transformation_neg",
     "orthogonal_transformation (%x. - ?f x) =
      orthogonal_transformation ?f",
     template_equation
      (template_app (template_hole 1, t_empty),
       template_app (template_hole 1, template_var 0))),
    ("Linear_Algebra.subspace_hyperplane2",
     "subspace {x. x \<bullet> ?a = 0}",
     template_predicate
      (
         template_app
          (template_hole 4, template_app (template_hole 3, t_empty))
         )),
    ("Linear_Algebra.subspace_hyperplane",
     "subspace {x. ?a \<bullet> x = 0}",
     template_predicate
      (
         template_app
          (template_hole 4, template_app (template_hole 3, t_empty))
         )),
    ("Boolean_Algebras.sup1I1", "?A ?x ==> sup ?A ?B ?x",
     template_implication
      ([template_predicate (template_app (template_var 2, template_var 1))],
       template_predicate
        (
           template_app
            (template_app
              (template_app (template_hole 0, template_var 2),
               template_var 0),
             template_var 1)
           ))),
    ("Boolean_Algebras.sup1I2", "?B ?x ==> sup ?A ?B ?x",
     template_implication
      ([template_predicate (template_app (template_var 2, template_var 1))],
       template_predicate
        (
           template_app
            (template_app
              (template_app (template_hole 0, template_var 0),
               template_var 2),
             template_var 1)
           ))),
    ("Linear_Algebra.orthogonal_transformation_bij",
     "orthogonal_transformation ?f ==> bij ?f",
     template_implication
      ([template_predicate
         (template_app (template_hole 2, template_var 0))],
       template_predicate
        (
           template_app
            (template_app
              (template_app (template_hole 1, template_var 0),
               template_hole 0),
             template_hole 0)
           ))),
    ("Linear_Algebra.orthogonal_transformation_inv",
     "orthogonal_transformation ?f ==> orthogonal_transformation (inv ?f)",
     template_implication
      ([template_predicate
         (template_app (template_hole 2, template_var 0))],
       template_predicate
        (
           template_app
            (template_hole 2,
             template_app
              (template_app (template_hole 1, template_hole 0),
               template_var 0))
           ))),
    ("Linear_Algebra.bounded_linear_imp_has_derivative",
     "bounded_linear ?f ==> (?f has_derivative ?f) ?net",
     template_implication
      ([template_predicate
         (template_app (template_hole 1, template_var 1))],
       template_predicate
        (
           template_app
            (template_app
              (template_app (template_hole 0, template_var 1),
               template_var 1),
             template_var 0)
           ))),
    ("Linear_Algebra.linear_simps",
     "bounded_linear ?f ==> ?f (0::?'a) = (0::?'b)",
     template_implication
      ([template_predicate
         (template_app (template_hole 3, template_var 0))],
       template_equation
        (template_app (template_var 0, template_hole 1), template_hole 0))),
    ("Linear_Algebra.linear_imp_has_derivative",
     "linear ?f ==> (?f has_derivative ?f) ?net",
     template_implication
      ([template_predicate
         (template_app (template_hole 1, template_var 1))],
       template_predicate
        (
           template_app
            (template_app
              (template_app (template_hole 0, template_var 1),
               template_var 1),
             template_var 0)
           ))),
    ("Algebra.pequiv_pr", "?a \<simeq> ?b ==> ?a \<sqsubseteq> ?b",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 1, template_var 1),
              template_var 0)
            )],
       template_predicate
        (
           template_app
            (template_app (template_hole 0, template_var 1), template_var 0)
           ))),
    ("Linear_Algebra.independent_substdbasis",
     "?d <= Basis ==> independent ?d",
     template_implication
      ([template_inequation (less_equals, template_var 0, template_hole 2)],
       template_negation
        (
           template_predicate
            (template_app (template_hole 0, template_var 0))
           ))),
    ("Boolean_Algebras.inf1D1", "inf ?A ?B ?x ==> ?A ?x",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app (template_hole 0, template_var 2),
                template_var 1),
              template_var 0)
            )],
       template_predicate (template_app (template_var 2, template_var 0)))),
    ("Boolean_Algebras.inf1D2", "inf ?A ?B ?x ==> ?B ?x",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app (template_hole 0, template_var 2),
                template_var 1),
              template_var 0)
            )],
       template_predicate (template_app (template_var 1, template_var 0)))),
    ("Algebra.pequiv_equiv_trans",
     "?a \<simeq> ?b = equiv_trans (wp ?a) (wp ?b)",
     template_equation
      (template_app
        (template_app (template_hole 2, template_var 1), template_var 0),
       template_app
        (template_app
          (template_hole 1, template_app (template_hole 0, template_var 1)),
         template_app (template_hole 0, template_var 0)))),
    ("Linear_Algebra.infnorm_pos_lt", "(0 < infnorm ?x) = (?x ~= (0::?'a))",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 5, template_hole 4),
              template_app (template_hole 3, template_var 0))
            )],
       template_negation
        (template_equation (template_var 0, template_hole 0)))),
    ("Linear_Algebra.infnorm_sub", "infnorm (?x - ?y) = infnorm (?y - ?x)",
     template_equation
      (template_app
        (template_hole 1,
         template_app
          (template_app (template_hole 0, template_var 1), template_var 0)),
       template_app
        (template_hole 1,
         template_app
          (template_app (template_hole 0, template_var 0),
           template_var 1)))),
    ("Linear_Algebra.subspace_orthogonal_to_vectors",
     "subspace {y. ALL x:?S. orthogonal x y}",
     template_predicate
      (
         template_app
          (template_hole 3, template_app (template_hole 2, t_empty))
         )),
    ("Linear_Algebra.bilinear_lzero",
     "bilinear ?h ==> ?h (0::?'a) ?x = (0::?'c)",
     template_implication
      ([template_predicate
         (template_app (template_hole 3, template_var 1))],
       template_equation
        (template_app
          (template_app (template_var 1, template_hole 1), template_var 0),
         template_hole 0))),
    ("Linear_Algebra.bilinear_rzero",
     "bilinear ?h ==> ?h ?x (0::?'b) = (0::?'c)",
     template_implication
      ([template_predicate
         (template_app (template_hole 3, template_var 1))],
       template_equation
        (template_app
          (template_app (template_var 1, template_var 0), template_hole 1),
         template_hole 0))),
    ("Linear_Algebra.orthogonal_transformation_surj",
     "orthogonal_transformation ?f ==> surj ?f",
     template_implication
      ([template_predicate
         (template_app (template_hole 3, template_var 0))],
       template_equation
        (template_app
          (template_app (template_hole 1, template_var 0), template_hole 0),
         template_hole 0))),
    ("Linear_Algebra.linear_continuous_at",
     "bounded_linear ?f ==> isCont ?f ?a",
     template_implication
      ([template_predicate
         (template_app (template_hole 3, template_var 1))],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 2,
               template_app
                (template_app (template_hole 1, template_var 0),
                 template_hole 0)),
             template_var 1)
           ))),
    ("Linear_Algebra.linear_continuous_within",
     "bounded_linear ?f ==> continuous (at ?x within ?s) ?f",
     template_implication
      ([template_predicate
         (template_app (template_hole 2, template_var 2))],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 1,
               template_app
                (template_app (template_hole 0, template_var 1),
                 template_var 0)),
             template_var 2)
           ))),
    ("Linear_Algebra.adjoint_adjoint",
     "linear ?f ==> adjoint (adjoint ?f) = ?f",
     template_implication
      ([template_predicate
         (template_app (template_hole 3, template_var 0))],
       template_equation
        (template_app
          (template_hole 1, template_app (template_hole 0, template_var 0)),
         template_var 0))),
    ("Function_Algebras.plus_fun_apply", "(?f + ?g) ?x = ?f ?x + ?g ?x",
     template_equation
      (template_app
        (template_app
          (template_app (template_hole 1, template_var 2), template_var 1),
         template_var 0),
       template_app
        (template_app
          (template_hole 0, template_app (template_var 2, template_var 0)),
         template_app (template_var 1, template_var 0)))),
    ("Function_Algebras.times_fun_apply", "(?f * ?g) ?x = ?f ?x * ?g ?x",
     template_equation
      (template_app
        (template_app
          (template_app (template_hole 1, template_var 2), template_var 1),
         template_var 0),
       template_app
        (template_app
          (template_hole 0, template_app (template_var 2, template_var 0)),
         template_app (template_var 1, template_var 0)))),
    ("Function_Algebras.func_plus", "?f + ?g = (%x. ?f x + ?g x)",
     template_equation
      (template_app
        (template_app (template_hole 1, template_var 1), template_var 0),
       t_empty)),
    ("Function_Algebras.func_times", "?f * ?g = (%x. ?f x * ?g x)",
     template_equation
      (template_app
        (template_app (template_hole 1, template_var 1), template_var 0),
       t_empty)),
    ("Linear_Algebra.infnorm_mul",
     "infnorm (?a *\<^sub>R ?x) = \<bar>?a\<bar> * infnorm ?x",
     template_equation
      (template_app
        (template_hole 3,
         template_app
          (template_app (template_hole 2, template_var 1), template_var 0)),
       template_app
        (template_app
          (template_hole 1, template_app (template_hole 0, template_var 1)),
         template_app (template_hole 3, template_var 0)))),
    ("Linear_Algebra.norm_le_infnorm",
     "norm ?x <= sqrt (real DIM(?'a)) * infnorm ?x",
     template_inequation
      (less_equals, template_app (template_hole 6, template_var 0),
       template_app
        (template_app
          (template_hole 5,
           template_app
            (template_hole 4,
             template_app
              (template_hole 3,
               template_app (template_hole 2, template_hole 1)))),
         template_app (template_hole 0, template_var 0)))),
    ("Linear_Algebra.infnorm_triangle",
     "infnorm (?x + ?y) <= infnorm ?x + infnorm ?y",
     template_inequation
      (less_equals,
       template_app
        (template_hole 2,
         template_app
          (template_app (template_hole 1, template_var 1), template_var 0)),
       template_app
        (template_app
          (template_hole 0, template_app (template_hole 2, template_var 1)),
         template_app (template_hole 2, template_var 0)))),
    ("Linear_Algebra.infnorm_mul_lemma",
     "infnorm (?a *\<^sub>R ?x) <= \<bar>?a\<bar> * infnorm ?x",
     template_inequation
      (less_equals,
       template_app
        (template_hole 3,
         template_app
          (template_app (template_hole 2, template_var 1), template_var 0)),
       template_app
        (template_app
          (template_hole 1, template_app (template_hole 0, template_var 1)),
         template_app (template_hole 3, template_var 0)))),
    ("Linear_Algebra.orthogonal_transformation_norm",
     "orthogonal_transformation ?f ==> norm (?f ?x) = norm ?x",
     template_implication
      ([template_predicate
         (template_app (template_hole 3, template_var 1))],
       template_equation
        (template_app
          (template_hole 1, template_app (template_var 1, template_var 0)),
         template_app (template_hole 0, template_var 0)))),
    ("Boolean_Algebras.sup2I1", "?A ?x ?y ==> sup ?A ?B ?x ?y",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_var 3, template_var 2), template_var 1)
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_app
                (template_app (template_hole 0, template_var 3),
                 template_var 0),
               template_var 2),
             template_var 1)
           ))),
    ("Boolean_Algebras.sup2I2", "?B ?x ?y ==> sup ?A ?B ?x ?y",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_var 3, template_var 2), template_var 1)
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_app
                (template_app (template_hole 0, template_var 0),
                 template_var 3),
               template_var 2),
             template_var 1)
           ))),
    ("Linear_Algebra.independent_card_le",
     "independent ?S ==> card ?S <= DIM(?'a)",
     template_implication
      ([template_negation
         (
            template_predicate
             (template_app (template_hole 3, template_var 0))
            )],
       template_inequation
        (less_equals, template_app (template_hole 1, template_var 0),
         template_app (template_hole 1, template_hole 0)))),
    ("Set_Algebras.set_zero_plus2", "(0::?'a) : ?A ==> ?B <= ?A + ?B",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 3, template_hole 2),
              template_var 1)
            )],
       template_inequation
        (less_equals, template_var 0,
         template_app
          (template_app (template_hole 0, template_var 1),
           template_var 0)))),
    ("Boolean_Algebras.inf2D1", "inf ?A ?B ?x ?y ==> ?A ?x ?y",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_app (template_hole 0, template_var 3),
                  template_var 2),
                template_var 1),
              template_var 0)
            )],
       template_predicate
        (
           template_app
            (template_app (template_var 3, template_var 1), template_var 0)
           ))),
    ("Boolean_Algebras.inf2D2", "inf ?A ?B ?x ?y ==> ?B ?x ?y",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_app (template_hole 0, template_var 3),
                  template_var 2),
                template_var 1),
              template_var 0)
            )],
       template_predicate
        (
           template_app
            (template_app (template_var 2, template_var 1), template_var 0)
           ))),
    ("Algebra.AC_assoc",
     "?a \<Squnion> ?b \<Squnion> ?c = (?a \<Squnion> ?b) \<Squnion> ?c",
     template_equation
      (template_app
        (template_app (template_hole 0, template_var 2),
         template_app
          (template_app (template_hole 0, template_var 1), template_var 0)),
       template_app
        (template_app
          (template_hole 0,
           template_app
            (template_app (template_hole 0, template_var 2),
             template_var 1)),
         template_var 0))),
    ("Algebra.DC_assoc",
     "?a \<Sqinter> ?b \<Sqinter> ?c = (?a \<Sqinter> ?b) \<Sqinter> ?c",
     template_equation
      (template_app
        (template_app (template_hole 0, template_var 2),
         template_app
          (template_app (template_hole 0, template_var 1), template_var 0)),
       template_app
        (template_app
          (template_hole 0,
           template_app
            (template_app (template_hole 0, template_var 2),
             template_var 1)),
         template_var 0))),
    ("Algebra.Seq_assoc", "?A ;; (?B ;; ?C) = ?A ;; ?B ;; ?C",
     template_equation
      (template_app
        (template_app (template_hole 0, template_var 2),
         template_app
          (template_app (template_hole 0, template_var 1), template_var 0)),
       template_app
        (template_app
          (template_hole 0,
           template_app
            (template_app (template_hole 0, template_var 2),
             template_var 1)),
         template_var 0))),
    ("Set_Algebras.set_plus_rearrange3", "?a +o ?B + ?C = ?a +o (?B + ?C)",
     template_equation
      (template_app
        (template_app
          (template_hole 1,
           template_app
            (template_app (template_hole 0, template_var 2),
             template_var 1)),
         template_var 0),
       template_app
        (template_app (template_hole 0, template_var 2),
         template_app
          (template_app (template_hole 1, template_var 1),
           template_var 0)))),
    ("Set_Algebras.set_plus_rearrange2",
     "?a +o (?b +o ?C) = (?a + ?b) +o ?C",
     template_equation
      (template_app
        (template_app (template_hole 1, template_var 2),
         template_app
          (template_app (template_hole 1, template_var 1), template_var 0)),
       template_app
        (template_app
          (template_hole 1,
           template_app
            (template_app (template_hole 0, template_var 2),
             template_var 1)),
         template_var 0))),
    ("Set_Algebras.set_times_rearrange3", "?a *o ?B * ?C = ?a *o (?B * ?C)",
     template_equation
      (template_app
        (template_app
          (template_hole 1,
           template_app
            (template_app (template_hole 0, template_var 2),
             template_var 1)),
         template_var 0),
       template_app
        (template_app (template_hole 0, template_var 2),
         template_app
          (template_app (template_hole 1, template_var 1),
           template_var 0)))),
    ("Set_Algebras.set_times_rearrange2",
     "?a *o (?b *o ?C) = (?a * ?b) *o ?C",
     template_equation
      (template_app
        (template_app (template_hole 1, template_var 2),
         template_app
          (template_app (template_hole 1, template_var 1), template_var 0)),
       template_app
        (template_app
          (template_hole 1,
           template_app
            (template_app (template_hole 0, template_var 2),
             template_var 1)),
         template_var 0))),
    ("Set_Algebras.set_plus_rearrange4", "?C + ?a +o ?D = ?a +o (?C + ?D)",
     template_equation
      (template_app
        (template_app (template_hole 1, template_var 2),
         template_app
          (template_app (template_hole 0, template_var 1), template_var 0)),
       template_app
        (template_app (template_hole 0, template_var 1),
         template_app
          (template_app (template_hole 1, template_var 2),
           template_var 0)))),
    ("Set_Algebras.set_times_rearrange4", "?C * ?a *o ?D = ?a *o (?C * ?D)",
     template_equation
      (template_app
        (template_app (template_hole 1, template_var 2),
         template_app
          (template_app (template_hole 0, template_var 1), template_var 0)),
       template_app
        (template_app (template_hole 0, template_var 1),
         template_app
          (template_app (template_hole 1, template_var 2),
           template_var 0)))),
    ("Set_Algebras.set_minus_plus", "(?a - ?b : ?C) = (?a : ?b +o ?C)",
     template_equation
      (template_app
        (template_app
          (template_hole 2,
           template_app
            (template_app (template_hole 1, template_var 2),
             template_var 1)),
         template_var 0),
       template_app
        (template_app (template_hole 2, template_var 2),
         template_app
          (template_app (template_hole 0, template_var 1),
           template_var 0)))),
    ("Linear_Algebra.infnorm_Max",
     "infnorm ?x = (MAX i\<in>Basis. \<bar>?x \<bullet> i\<bar>)",
     template_equation
      (template_app (template_hole 5, template_var 0),
       template_app
        (template_hole 4,
         template_app
          (template_app (template_hole 3, t_empty), template_hole 0)))),
    ("Linear_Algebra.absdiff_infnorm",
     "\<bar>infnorm ?x - infnorm ?y\<bar> <= infnorm (?x - ?y)",
     template_inequation
      (less_equals,
       template_app
        (template_hole 3,
         template_app
          (template_app
            (template_hole 2,
             template_app (template_hole 1, template_var 1)),
           template_app (template_hole 1, template_var 0))),
       template_app
        (template_hole 1,
         template_app
          (template_app (template_hole 0, template_var 1),
           template_var 0)))),
    ("Linear_Algebra.linear_lim_0",
     "bounded_linear ?f ==> ?f \<midarrow>0::?'a\<rightarrow> (0::?'b)",
     template_implication
      ([template_predicate
         (template_app (template_hole 6, template_var 0))],
       template_predicate
        (
           template_app
            (template_app
              (template_app (template_hole 5, template_var 0),
               template_app (template_hole 4, template_hole 3)),
             template_app
              (template_app (template_hole 2, template_hole 1),
               template_hole 0))
           ))),
    ("Linear_Algebra.linear_simps",
     "bounded_linear ?f ==> ?f (- ?a) = - ?f ?a",
     template_implication
      ([template_predicate
         (template_app (template_hole 3, template_var 1))],
       template_equation
        (template_app
          (template_var 1, template_app (template_hole 1, template_var 0)),
         template_app
          (template_hole 0,
           template_app (template_var 1, template_var 0))))),
    ("Linear_Algebra.collinear_subset",
     "[| collinear ?T; ?S <= ?T |] ==> collinear ?S",
     template_implication
      ([template_predicate (template_app (template_hole 1, template_var 1)),
        template_inequation (less_equals, template_var 0, template_var 1)],
       template_predicate
        (template_app (template_hole 1, template_var 0)))),
    ("Algebra.DC_refines_PC",
     "unitary ?p ==>
      (?a \<Sqinter> ?b) \<sqsubseteq> (?a \<^bsub>?p\<^esub>\<oplus> ?b)",
     template_implication
      ([template_predicate
         (template_app (template_hole 3, template_var 2))],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 2,
               template_app
                (template_app (template_hole 1, template_var 1),
                 template_var 0)),
             template_app
              (template_app
                (template_app (template_hole 0, template_var 1),
                 template_var 2),
               template_var 0))
           ))),
    ("Algebra.PC_refines_AC",
     "unitary ?p ==>
      (?a \<^bsub>?p\<^esub>\<oplus> ?b) \<sqsubseteq> (?a \<Squnion> ?b)",
     template_implication
      ([template_predicate
         (template_app (template_hole 3, template_var 2))],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 2,
               template_app
                (template_app
                  (template_app (template_hole 1, template_var 1),
                   template_var 2),
                 template_var 0)),
             template_app
              (template_app (template_hole 0, template_var 1),
               template_var 0))
           ))),
    ("Set_Algebras.set_plus_mono", "?C <= ?D ==> ?a +o ?C <= ?a +o ?D",
     template_implication
      ([template_inequation (less_equals, template_var 2, template_var 1)],
       template_inequation
        (less_equals,
         template_app
          (template_app (template_hole 0, template_var 0), template_var 2),
         template_app
          (template_app (template_hole 0, template_var 0),
           template_var 1)))),
    ("Set_Algebras.set_times_mono", "?C <= ?D ==> ?a *o ?C <= ?a *o ?D",
     template_implication
      ([template_inequation (less_equals, template_var 2, template_var 1)],
       template_inequation
        (less_equals,
         template_app
          (template_app (template_hole 0, template_var 0), template_var 2),
         template_app
          (template_app (template_hole 0, template_var 0),
           template_var 1)))),
    ("Set_Algebras.set_plus_mono3", "?a : ?C ==> ?a +o ?D <= ?C + ?D",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 3, template_var 2),
              template_var 1)
            )],
       template_inequation
        (less_equals,
         template_app
          (template_app (template_hole 1, template_var 2), template_var 0),
         template_app
          (template_app (template_hole 0, template_var 1),
           template_var 0)))),
    ("Set_Algebras.set_plus_intro2", "?b : ?C ==> ?a + ?b : ?a +o ?C",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 2, template_var 2),
              template_var 1)
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 2,
               template_app
                (template_app (template_hole 1, template_var 0),
                 template_var 2)),
             template_app
              (template_app (template_hole 0, template_var 0),
               template_var 1))
           ))),
    ("Set_Algebras.set_times_mono3", "?a : ?C ==> ?a *o ?D <= ?C * ?D",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 3, template_var 2),
              template_var 1)
            )],
       template_inequation
        (less_equals,
         template_app
          (template_app (template_hole 1, template_var 2), template_var 0),
         template_app
          (template_app (template_hole 0, template_var 1),
           template_var 0)))),
    ("Set_Algebras.set_times_intro2", "?b : ?C ==> ?a * ?b : ?a *o ?C",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 2, template_var 2),
              template_var 1)
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 2,
               template_app
                (template_app (template_hole 1, template_var 0),
                 template_var 2)),
             template_app
              (template_app (template_hole 0, template_var 0),
               template_var 1))
           ))),
    ("Set_Algebras.set_neg_intro2", "?a : ?C ==> - ?a : - (1::?'a) *o ?C",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 3, template_var 1),
              template_var 0)
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 3,
               template_app (template_hole 2, template_var 1)),
             template_app
              (template_app
                (template_hole 1,
                 template_app (template_hole 2, template_hole 0)),
               template_var 0))
           ))),
    ("Set_Algebras.set_plus_mono4", "?a : ?C ==> ?a +o ?D <= ?D + ?C",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 3, template_var 2),
              template_var 1)
            )],
       template_inequation
        (less_equals,
         template_app
          (template_app (template_hole 1, template_var 2), template_var 0),
         template_app
          (template_app (template_hole 0, template_var 0),
           template_var 1)))),
    ("Set_Algebras.set_times_mono4", "?a : ?C ==> ?a *o ?D <= ?D * ?C",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 3, template_var 2),
              template_var 1)
            )],
       template_inequation
        (less_equals,
         template_app
          (template_app (template_hole 1, template_var 2), template_var 0),
         template_app
          (template_app (template_hole 0, template_var 0),
           template_var 1)))),
    ("Linear_Algebra.Basis_le_infnorm",
     "?b : Basis ==> \<bar>?x \<bullet> ?b\<bar> <= infnorm ?x",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 5, template_var 1),
              template_hole 4)
            )],
       template_inequation
        (less_equals,
         template_app
          (template_hole 2,
           template_app
            (template_app (template_hole 1, template_var 0),
             template_var 1)),
         template_app (template_hole 0, template_var 0)))),
    ("Set_Algebras.set_plus_imp_minus", "?a : ?b +o ?C ==> ?a - ?b : ?C",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 2, template_var 2),
              template_app
               (template_app (template_hole 1, template_var 1),
                template_var 0))
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 2,
               template_app
                (template_app (template_hole 0, template_var 2),
                 template_var 1)),
             template_var 0)
           ))),
    ("Set_Algebras.set_minus_imp_plus", "?a - ?b : ?C ==> ?a : ?b +o ?C",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_hole 2,
                template_app
                 (template_app (template_hole 1, template_var 2),
                  template_var 1)),
              template_var 0)
            )],
       template_predicate
        (
           template_app
            (template_app (template_hole 2, template_var 2),
             template_app
              (template_app (template_hole 0, template_var 1),
               template_var 0))
           ))),
    ("Set_Algebras.set_neg_intro", "?a : - (1::?'a) *o ?C ==> - ?a : ?C",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 3, template_var 1),
              template_app
               (template_app
                 (template_hole 2,
                  template_app (template_hole 1, template_hole 0)),
                template_var 0))
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 3,
               template_app (template_hole 1, template_var 1)),
             template_var 0)
           ))),
    ("Boolean_Algebras.inf1I", "[| ?A ?x; ?B ?x |] ==> inf ?A ?B ?x",
     template_implication
      ([template_predicate (template_app (template_var 2, template_var 1)),
        template_predicate (template_app (template_var 0, template_var 1))],
       template_predicate
        (
           template_app
            (template_app
              (template_app (template_hole 0, template_var 2),
               template_var 0),
             template_var 1)
           ))),
    ("Algebra.determ_maximal", "[| pdeterm ?a; ?a <= ?x |] ==> ?a = ?x",
     template_implication
      ([template_predicate (template_app (template_hole 2, template_var 1)),
        template_inequation (less_equals, template_var 1, template_var 0)],
       template_equation (template_var 1, template_var 0))),
    ("Set_Algebras.finite_set_plus",
     "[| finite ?s; finite ?t |] ==> finite (?s + ?t)",
     template_implication
      ([template_predicate (template_app (template_hole 1, template_var 1)),
        template_predicate
         (template_app (template_hole 1, template_var 0))],
       template_predicate
        (
           template_app
            (template_hole 1,
             template_app
              (template_app (template_hole 0, template_var 1),
               template_var 0))
           ))),
    ("Set_Algebras.finite_set_times",
     "[| finite ?s; finite ?t |] ==> finite (?s * ?t)",
     template_implication
      ([template_predicate (template_app (template_hole 1, template_var 1)),
        template_predicate
         (template_app (template_hole 1, template_var 0))],
       template_predicate
        (
           template_app
            (template_hole 1,
             template_app
              (template_app (template_hole 0, template_var 1),
               template_var 0))
           ))),
    ("Linear_Algebra.orthogonal_transformation_compose",
     "[| orthogonal_transformation ?f; orthogonal_transformation ?g |]
      ==> orthogonal_transformation (?f o ?g)",
     template_implication
      ([template_predicate (template_app (template_hole 3, template_var 1)),
        template_predicate
         (template_app (template_hole 2, template_var 0))],
       template_predicate
        (
           template_app
            (template_hole 1,
             template_app
              (template_app (template_hole 0, template_var 1),
               template_var 0))
           ))),
    ("Linear_Algebra.finite_Atleast_Atmost_nat",
     "finite {?f x |x. x : UNIV}",
     template_predicate
      (
         template_app
          (template_hole 6, template_app (template_hole 5, t_empty))
         )),
    ("Algebra.PC_quasi_comm",
     "?a \<^bsub>?p\<^esub>\<oplus> ?b =
      ?b \<^bsub>(%s. 1 - ?p s)\<^esub>\<oplus> ?a",
     template_equation
      (template_app
        (template_app
          (template_app (template_hole 2, template_var 2), template_var 1),
         template_var 0),
       template_app
        (template_app
          (template_app (template_hole 2, template_var 0), t_empty),
         template_var 2))),
    ("Set_Algebras.set_times_Un_distrib",
     "?A * (?B Un ?C) = ?A * ?B Un ?A * ?C",
     template_equation
      (template_app
        (template_app (template_hole 1, template_var 2),
         template_app
          (template_app (template_hole 0, template_var 1), template_var 0)),
       template_app
        (template_app
          (template_hole 0,
           template_app
            (template_app (template_hole 1, template_var 2),
             template_var 1)),
         template_app
          (template_app (template_hole 1, template_var 2),
           template_var 0)))),
    ("Set_Algebras.set_times_Un_distrib",
     "(?A Un ?B) * ?C = ?A * ?C Un ?B * ?C",
     template_equation
      (template_app
        (template_app
          (template_hole 1,
           template_app
            (template_app (template_hole 0, template_var 2),
             template_var 1)),
         template_var 0),
       template_app
        (template_app
          (template_hole 0,
           template_app
            (template_app (template_hole 1, template_var 2),
             template_var 0)),
         template_app
          (template_app (template_hole 1, template_var 1),
           template_var 0)))),
    ("Set_Algebras.set_times_plus_distrib2",
     "?a *o (?B + ?C) = ?a *o ?B + ?a *o ?C",
     template_equation
      (template_app
        (template_app (template_hole 1, template_var 2),
         template_app
          (template_app (template_hole 0, template_var 1), template_var 0)),
       template_app
        (template_app
          (template_hole 0,
           template_app
            (template_app (template_hole 1, template_var 2),
             template_var 1)),
         template_app
          (template_app (template_hole 1, template_var 2),
           template_var 0)))),
    ("Set_Algebras.set_times_plus_distrib",
     "?a *o (?b +o ?C) = ?a * ?b +o ?a *o ?C",
     template_equation
      (template_app
        (template_app (template_hole 2, template_var 2),
         template_app
          (template_app (template_hole 1, template_var 1), template_var 0)),
       template_app
        (template_app
          (template_hole 1,
           template_app
            (template_app (template_hole 0, template_var 2),
             template_var 1)),
         template_app
          (template_app (template_hole 2, template_var 2),
           template_var 0)))),
    ("Linear_Algebra.vector_eq_ldot",
     "(ALL x. x \<bullet> ?y = x \<bullet> ?z) = (?y = ?z)",
     template_implication
      ([template_predicate (template_app (template_hole 3, t_empty))],
       template_equation (template_var 1, template_var 0))),
    ("Linear_Algebra.vector_eq_rdot",
     "(ALL z. ?x \<bullet> z = ?y \<bullet> z) = (?x = ?y)",
     template_implication
      ([template_predicate (template_app (template_hole 3, t_empty))],
       template_equation (template_var 1, template_var 0))),
    ("Linear_Algebra.subset_translation_eq",
     "((+) ?a ` ?s <= (+) ?a ` ?t) = (?s <= ?t)",
     template_equation
      (template_app
        (template_app
          (template_hole 2,
           template_app
            (template_app
              (template_hole 1,
               template_app (template_hole 0, template_var 2)),
             template_var 1)),
         template_app
          (template_app
            (template_hole 1,
             template_app (template_hole 0, template_var 2)),
           template_var 0)),
       template_app
        (template_app (template_hole 2, template_var 1), template_var 0))),
    ("Set_Algebras.set_times_plus_distrib3",
     "?a +o ?C * ?D <= ?a *o ?D + ?C * ?D",
     template_inequation
      (less_equals,
       template_app
        (template_app
          (template_hole 3,
           template_app
            (template_app (template_hole 2, template_var 2),
             template_var 1)),
         template_var 0),
       template_app
        (template_app
          (template_hole 1,
           template_app
            (template_app (template_hole 0, template_var 2),
             template_var 0)),
         template_app
          (template_app (template_hole 3, template_var 1),
           template_var 0)))),
    ("Linear_Algebra.bilinear_rneg",
     "bilinear ?h ==> ?h ?x (- ?y) = - ?h ?x ?y",
     template_implication
      ([template_predicate
         (template_app (template_hole 3, template_var 2))],
       template_equation
        (template_app
          (template_app (template_var 2, template_var 1),
           template_app (template_hole 1, template_var 0)),
         template_app
          (template_hole 0,
           template_app
            (template_app (template_var 2, template_var 1),
             template_var 0))))),
    ("Linear_Algebra.bilinear_lneg",
     "bilinear ?h ==> ?h (- ?x) ?y = - ?h ?x ?y",
     template_implication
      ([template_predicate
         (template_app (template_hole 3, template_var 2))],
       template_equation
        (template_app
          (template_app
            (template_var 2,
             template_app (template_hole 1, template_var 1)),
           template_var 0),
         template_app
          (template_hole 0,
           template_app
            (template_app (template_var 2, template_var 1),
             template_var 0))))),
    ("Linear_Algebra.orthogonal_transformation_scaleR",
     "orthogonal_transformation ?f ==>
      ?f (?c *\<^sub>R ?v) = ?c *\<^sub>R ?f ?v",
     template_implication
      ([template_predicate
         (template_app (template_hole 3, template_var 2))],
       template_equation
        (template_app
          (template_var 2,
           template_app
            (template_app (template_hole 1, template_var 1),
             template_var 0)),
         template_app
          (template_app (template_hole 0, template_var 1),
           template_app (template_var 2, template_var 0))))),
    ("Linear_Algebra.orthogonal_orthogonal_transformation",
     "orthogonal_transformation ?f ==>
      orthogonal (?f ?x) (?f ?y) = orthogonal ?x ?y",
     template_implication
      ([template_predicate
         (template_app (template_hole 3, template_var 2))],
       template_equation
        (template_app
          (template_app
            (template_hole 1,
             template_app (template_var 2, template_var 1)),
           template_app (template_var 2, template_var 0)),
         template_app
          (template_app (template_hole 0, template_var 1),
           template_var 0)))),
    ("Linear_Algebra.linear_simps",
     "bounded_linear ?f ==> ?f (?s *\<^sub>R ?v) = ?s *\<^sub>R ?f ?v",
     template_implication
      ([template_predicate
         (template_app (template_hole 3, template_var 2))],
       template_equation
        (template_app
          (template_var 2,
           template_app
            (template_app (template_hole 1, template_var 1),
             template_var 0)),
         template_app
          (template_app (template_hole 0, template_var 1),
           template_app (template_var 2, template_var 0))))),
    ("Linear_Algebra.independent_bound",
     "independent ?S ==> finite ?S & card ?S <= DIM(?'a)",
     template_implication
      ([template_negation
         (
            template_predicate
             (template_app (template_hole 5, template_var 0))
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 4,
               template_app (template_hole 3, template_var 0)),
             template_app
              (template_app
                (template_hole 2,
                 template_app (template_hole 1, template_var 0)),
               template_app (template_hole 1, template_hole 0)))
           ))),
    ("Linear_Algebra.orthogonal_scaleR",
     "?c ~= 0 ==> orthogonal (?c *\<^sub>R ?x) = orthogonal ?x",
     template_implication
      ([template_negation
         (template_equation (template_var 1, template_hole 3))],
       template_equation
        (template_app
          (template_hole 1,
           template_app
            (template_app (template_hole 0, template_var 1),
             template_var 0)),
         template_app (template_hole 1, template_var 0)))),
    ("Boolean_Algebras.sup1CI", "(~ ?B ?x ==> ?A ?x) ==> sup ?A ?B ?x",
     template_implication
      ([template_implication
         ([template_negation
            (
               template_predicate
                (template_app (template_var 2, template_var 1))
               )],
          template_predicate
           (template_app (template_var 0, template_var 1)))],
       template_predicate
        (
           template_app
            (template_app
              (template_app (template_hole 0, template_var 0),
               template_var 2),
             template_var 1)
           ))),
    ("Linear_Algebra.dependent_biggerset",
     "(finite ?S ==> DIM(?'a) < card ?S) ==> dependent ?S",
     template_implication
      ([template_implication
         ([template_predicate
            (template_app (template_hole 4, template_var 0))],
          template_inequation
           (less_than, template_app (template_hole 2, template_hole 1),
            template_app (template_hole 2, template_var 0)))],
       template_predicate
        (template_app (template_hole 0, template_var 0)))),
    ("Linear_Algebra.inj_linear_imp_inv_bounded_linear",
     "[| bounded_linear ?f; inj ?f |] ==> bounded_linear (inv ?f)",
     template_implication
      ([template_predicate (template_app (template_hole 3, template_var 0)),
        template_predicate
         (
            template_app
             (template_app (template_hole 2, template_var 0),
              template_hole 1)
            )],
       template_predicate
        (
           template_app
            (template_hole 3,
             template_app
              (template_app (template_hole 0, template_hole 1),
               template_var 0))
           ))),
    ("Algebra.pequiv_trans",
     "[| ?a \<simeq> ?b; ?b \<simeq> ?c |] ==> ?a \<simeq> ?c",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 0, template_var 2),
              template_var 1)
            ),
        template_predicate
         (
            template_app
             (template_app (template_hole 0, template_var 1),
              template_var 0)
            )],
       template_predicate
        (
           template_app
            (template_app (template_hole 0, template_var 2), template_var 0)
           ))),
    ("Algebra.pequiv_pr_trans",
     "[| ?a \<simeq> ?b; ?b \<sqsubseteq> ?c |] ==> ?a \<sqsubseteq> ?c",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 1, template_var 2),
              template_var 1)
            ),
        template_predicate
         (
            template_app
             (template_app (template_hole 0, template_var 1),
              template_var 0)
            )],
       template_predicate
        (
           template_app
            (template_app (template_hole 0, template_var 2), template_var 0)
           ))),
    ("Algebra.eq_det",
     "[| ?a \<simeq> ?b; determ (wp ?a) |] ==> determ (wp ?b)",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 2, template_var 1),
              template_var 0)
            ),
        template_predicate
         (
            template_app
             (template_hole 1,
              template_app (template_hole 0, template_var 1))
            )],
       template_predicate
        (
           template_app
            (template_hole 1,
             template_app (template_hole 0, template_var 0))
           ))),
    ("Algebra.pr_trans",
     "[| ?A \<sqsubseteq> ?B; ?B \<sqsubseteq> ?C |]
      ==> ?A \<sqsubseteq> ?C",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 0, template_var 2),
              template_var 1)
            ),
        template_predicate
         (
            template_app
             (template_app (template_hole 0, template_var 1),
              template_var 0)
            )],
       template_predicate
        (
           template_app
            (template_app (template_hole 0, template_var 2), template_var 0)
           ))),
    ("Algebra.pr_pequiv_trans",
     "[| ?a \<sqsubseteq> ?b; ?b \<simeq> ?c |] ==> ?a \<sqsubseteq> ?c",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 1, template_var 2),
              template_var 1)
            ),
        template_predicate
         (
            template_app
             (template_app (template_hole 0, template_var 1),
              template_var 0)
            )],
       template_predicate
        (
           template_app
            (template_app (template_hole 1, template_var 2), template_var 0)
           ))),
    ("Algebra.pequiv_antisym",
     "[| ?a \<sqsubseteq> ?b; ?b \<sqsubseteq> ?a |] ==> ?a \<simeq> ?b",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 1, template_var 1),
              template_var 0)
            ),
        template_predicate
         (
            template_app
             (template_app (template_hole 1, template_var 0),
              template_var 1)
            )],
       template_predicate
        (
           template_app
            (template_app (template_hole 0, template_var 1), template_var 0)
           ))),
    ("Linear_Algebra.orthogonal_transformation",
     "orthogonal_transformation ?f =
      (linear ?f & (ALL v. norm (?f v) = norm v))",
     template_equation
      (template_app (template_hole 6, template_var 0),
       template_app
        (template_app
          (template_hole 5, template_app (template_hole 4, template_var 0)),
         template_app (template_hole 3, t_empty)))),
    ("Linear_Algebra.collinear_iff_Reals",
     "collinear {0, ?w, ?z} = (?z / ?w : \<real>)",
     template_equation
      (template_app
        (template_hole 6,
         template_app
          (template_app (template_hole 5, template_hole 4),
           template_app
            (template_app (template_hole 5, template_var 1),
             template_app
              (template_app (template_hole 5, template_var 0),
               template_hole 3)))),
       template_app
        (template_app
          (template_hole 2,
           template_app
            (template_app (template_hole 1, template_var 0),
             template_var 1)),
         template_hole 0))),
    ("Linear_Algebra.subspace_substandard",
     "subspace {x. ALL i:Basis. ?P i --> x \<bullet> i = 0}",
     template_predicate
      (
         template_app
          (template_hole 7, template_app (template_hole 6, t_empty))
         )),
    ("Linear_Algebra.linear_simps",
     "bounded_linear ?f ==> ?f (?a - ?b) = ?f ?a - ?f ?b",
     template_implication
      ([template_predicate
         (template_app (template_hole 3, template_var 2))],
       template_equation
        (template_app
          (template_var 2,
           template_app
            (template_app (template_hole 1, template_var 1),
             template_var 0)),
         template_app
          (template_app
            (template_hole 0,
             template_app (template_var 2, template_var 1)),
           template_app (template_var 2, template_var 0))))),
    ("Linear_Algebra.linear_simps",
     "bounded_linear ?f ==> ?f (?a + ?b) = ?f ?a + ?f ?b",
     template_implication
      ([template_predicate
         (template_app (template_hole 3, template_var 2))],
       template_equation
        (template_app
          (template_var 2,
           template_app
            (template_app (template_hole 1, template_var 1),
             template_var 0)),
         template_app
          (template_app
            (template_hole 0,
             template_app (template_var 2, template_var 1)),
           template_app (template_var 2, template_var 0))))),
    ("Linear_Algebra.adjoint_works",
     "linear ?f ==> ?x \<bullet> adjoint ?f ?y = ?f ?x \<bullet> ?y",
     template_implication
      ([template_predicate
         (template_app (template_hole 4, template_var 2))],
       template_equation
        (template_app
          (template_app (template_hole 2, template_var 1),
           template_app
            (template_app (template_hole 1, template_var 2),
             template_var 0)),
         template_app
          (template_app
            (template_hole 0,
             template_app (template_var 2, template_var 1)),
           template_var 0)))),
    ("Linear_Algebra.adjoint_clauses",
     "linear ?f ==> adjoint ?f ?y \<bullet> ?x = ?y \<bullet> ?f ?x",
     template_implication
      ([template_predicate
         (template_app (template_hole 4, template_var 2))],
       template_equation
        (template_app
          (template_app
            (template_hole 2,
             template_app
              (template_app (template_hole 1, template_var 2),
               template_var 1)),
           template_var 0),
         template_app
          (template_app (template_hole 0, template_var 1),
           template_app (template_var 2, template_var 0))))),
    ("Linear_Algebra.pairwise_orthogonal_independent",
     "[| pairwise orthogonal ?S; (0::?'a) ~: ?S |] ==> independent ?S",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 5, template_hole 4),
              template_var 0)
            ),
        template_negation
         (
            template_predicate
             (
                template_app
                 (template_app (template_hole 2, template_hole 1),
                  template_var 0)
                )
            )],
       template_negation
        (
           template_predicate
            (template_app (template_hole 0, template_var 0))
           ))),
    ("Linear_Algebra.infnorm_set_lemma",
     "finite {\<bar>?x \<bullet> i\<bar> |i. i : Basis}",
     template_predicate
      (
         template_app
          (template_hole 8, template_app (template_hole 7, t_empty))
         )),
    ("Set_Algebras.set_plus_image",
     "?S + ?T = (%(x, y). x + y) ` (?S \<times> ?T)",
     template_equation
      (template_app
        (template_app (template_hole 4, template_var 1), template_var 0),
       template_app
        (template_app
          (template_hole 3, template_app (template_hole 2, t_empty)),
         template_app
          (template_app (template_hole 0, template_var 1), t_empty)))),
    ("Set_Algebras.set_times_image",
     "?S * ?T = (%(x, y). x * y) ` (?S \<times> ?T)",
     template_equation
      (template_app
        (template_app (template_hole 4, template_var 1), template_var 0),
       template_app
        (template_app
          (template_hole 3, template_app (template_hole 2, t_empty)),
         template_app
          (template_app (template_hole 0, template_var 1), t_empty)))),
    ("Set_Algebras.set_times_UNION_distrib",
     "?A * \<Union> (?M ` ?I) = (UN i:?I. ?A * ?M i)",
     template_equation
      (template_app
        (template_app (template_hole 2, template_var 2),
         template_app
          (template_hole 1,
           template_app
            (template_app (template_hole 0, template_var 1),
             template_var 0))),
       template_app
        (template_hole 1,
         template_app
          (template_app (template_hole 0, t_empty), template_var 0)))),
    ("Set_Algebras.set_times_UNION_distrib",
     "\<Union> (?M ` ?I) * ?A = (UN i:?I. ?M i * ?A)",
     template_equation
      (template_app
        (template_app
          (template_hole 2,
           template_app
            (template_hole 1,
             template_app
              (template_app (template_hole 0, template_var 2),
               template_var 1))),
         template_var 0),
       template_app
        (template_hole 1,
         template_app
          (template_app (template_hole 0, t_empty), template_var 1)))),
    ("Set_Algebras.set_plus_rearrange",
     "?a +o ?C + ?b +o ?D = (?a + ?b) +o (?C + ?D)",
     template_equation
      (template_app
        (template_app
          (template_hole 2,
           template_app
            (template_app (template_hole 1, template_var 3),
             template_var 2)),
         template_app
          (template_app (template_hole 1, template_var 1), template_var 0)),
       template_app
        (template_app
          (template_hole 1,
           template_app
            (template_app (template_hole 0, template_var 3),
             template_var 1)),
         template_app
          (template_app (template_hole 2, template_var 2),
           template_var 0)))),
    ("Set_Algebras.set_times_rearrange",
     "?a *o ?C * ?b *o ?D = (?a * ?b) *o (?C * ?D)",
     template_equation
      (template_app
        (template_app
          (template_hole 2,
           template_app
            (template_app (template_hole 1, template_var 3),
             template_var 2)),
         template_app
          (template_app (template_hole 1, template_var 1), template_var 0)),
       template_app
        (template_app
          (template_hole 1,
           template_app
            (template_app (template_hole 0, template_var 3),
             template_var 1)),
         template_app
          (template_app (template_hole 2, template_var 2),
           template_var 0)))),
    ("Linear_Algebra.vector_sub_project_orthogonal",
     "?b \<bullet>
      (?x - (?b \<bullet> ?x / (?b \<bullet> ?b)) *\<^sub>R ?b) =
      0",
     template_equation
      (template_app
        (template_app (template_hole 4, template_var 1),
         template_app
          (template_app (template_hole 3, template_var 0),
           template_app
            (template_app
              (template_hole 2,
               template_app
                (template_app
                  (template_hole 1,
                   template_app
                    (template_app (template_hole 4, template_var 1),
                     template_var 0)),
                 template_app
                  (template_app (template_hole 4, template_var 1),
                   template_var 1))),
             template_var 1))),
       template_hole 0)),
    ("Linear_Algebra.bilinear_rmul",
     "bilinear ?h ==> ?h ?x (?c *\<^sub>R ?y) = ?c *\<^sub>R ?h ?x ?y",
     template_implication
      ([template_predicate
         (template_app (template_hole 3, template_var 3))],
       template_equation
        (template_app
          (template_app (template_var 3, template_var 2),
           template_app
            (template_app (template_hole 1, template_var 1),
             template_var 0)),
         template_app
          (template_app (template_hole 0, template_var 1),
           template_app
            (template_app (template_var 3, template_var 2),
             template_var 0))))),
    ("Linear_Algebra.bilinear_lmul",
     "bilinear ?h ==> ?h (?c *\<^sub>R ?x) ?y = ?c *\<^sub>R ?h ?x ?y",
     template_implication
      ([template_predicate
         (template_app (template_hole 3, template_var 3))],
       template_equation
        (template_app
          (template_app
            (template_var 3,
             template_app
              (template_app (template_hole 1, template_var 2),
               template_var 1)),
           template_var 0),
         template_app
          (template_app (template_hole 0, template_var 2),
           template_app
            (template_app (template_var 3, template_var 1),
             template_var 0))))),
    ("Boolean_Algebras.inf2I",
     "[| ?A ?x ?y; ?B ?x ?y |] ==> inf ?A ?B ?x ?y",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_var 3, template_var 2), template_var 1)
            ),
        template_predicate
         (
            template_app
             (template_app (template_var 0, template_var 2), template_var 1)
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_app
                (template_app (template_hole 0, template_var 3),
                 template_var 0),
               template_var 2),
             template_var 1)
           ))),
    ("Algebra.refines_drefines",
     "[| ?a \<sqsubseteq> ?b; well_def ?b |] ==> drefines (%s. s) ?G ?a ?b",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 2, template_var 2),
              template_var 1)
            ),
        template_predicate
         (template_app (template_hole 1, template_var 1))],
       template_predicate
        (
           template_app
            (template_app
              (template_app
                (template_app (template_hole 0, t_empty), template_var 0),
               template_var 2),
             template_var 1)
           ))),
    ("Algebra.DC_refines",
     "[| ?a \<sqsubseteq> ?b; ?a \<sqsubseteq> ?c |]
      ==> ?a \<sqsubseteq> (?b \<Sqinter> ?c)",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 1, template_var 2),
              template_var 1)
            ),
        template_predicate
         (
            template_app
             (template_app (template_hole 1, template_var 2),
              template_var 0)
            )],
       template_predicate
        (
           template_app
            (template_app (template_hole 1, template_var 2),
             template_app
              (template_app (template_hole 0, template_var 1),
               template_var 0))
           ))),
    ("Algebra.AC_refines",
     "[| ?a \<sqsubseteq> ?c; ?b \<sqsubseteq> ?c |]
      ==> (?a \<Squnion> ?b) \<sqsubseteq> ?c",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 1, template_var 2),
              template_var 1)
            ),
        template_predicate
         (
            template_app
             (template_app (template_hole 1, template_var 0),
              template_var 1)
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 1,
               template_app
                (template_app (template_hole 0, template_var 2),
                 template_var 0)),
             template_var 1)
           ))),
    ("Linear_Algebra.linear_continuous_compose",
     "[| continuous ?F ?f; linear ?g |] ==> continuous ?F (%x. ?g (?f x))",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 2, template_var 2),
              template_var 1)
            ),
        template_predicate
         (template_app (template_hole 1, template_var 0))],
       template_predicate
        (
           template_app
            (template_app (template_hole 0, template_var 2), t_empty)
           ))),
    ("Linear_Algebra.linear_continuous_on_compose",
     "[| continuous_on ?S ?f; linear ?g |]
      ==> continuous_on ?S (%x. ?g (?f x))",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 2, template_var 2),
              template_var 1)
            ),
        template_predicate
         (template_app (template_hole 1, template_var 0))],
       template_predicate
        (
           template_app
            (template_app (template_hole 0, template_var 2), t_empty)
           ))),
    ("Linear_Algebra.linear_bounded",
     "linear ?f ==> EX B. ALL x. norm (?f x) <= B * norm x",
     template_implication
      ([template_predicate
         (template_app (template_hole 6, template_var 0))],
       template_predicate (template_app (template_hole 5, t_empty)))),
    ("Linear_Algebra.ex_card", "?n <= card ?A ==> EX S<=?A. card S = ?n",
     template_implication
      ([template_inequation
         (less_equals, template_var 1,
          template_app (template_hole 4, template_var 0))],
       template_predicate (template_app (template_hole 3, t_empty)))),
    ("Linear_Algebra.tendsto_infnorm",
     "(?f \<longlongrightarrow> ?a) ?F ==>
      ((%x. infnorm (?f x)) \<longlongrightarrow> infnorm ?a) ?F",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app (template_hole 4, template_var 2),
                template_app (template_hole 3, template_var 1)),
              template_var 0)
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_app (template_hole 2, t_empty),
               template_app
                (template_hole 0,
                 template_app (template_hole 1, template_var 1))),
             template_var 0)
           ))),
    ("Algebra.dr_Apply",
     "?f o ?\<phi> = ?\<phi> o ?g ==>
      drefines ?\<phi> ?G (Apply ?f) (Apply ?g)",
     template_implication
      ([template_equation
         (template_app
           (template_app (template_hole 4, template_var 3), template_var 2),
          template_app
           (template_app (template_hole 3, template_var 2),
            template_var 1))],
       template_predicate
        (
           template_app
            (template_app
              (template_app
                (template_app (template_hole 2, template_var 2),
                 template_var 0),
               template_app (template_hole 1, template_var 3)),
             template_app (template_hole 0, template_var 1))
           ))),
    ("Boolean_Algebras.sup2CI",
     "(~ ?B ?x ?y ==> ?A ?x ?y) ==> sup ?A ?B ?x ?y",
     template_implication
      ([template_implication
         ([template_negation
            (
               template_predicate
                (
                   template_app
                    (template_app (template_var 3, template_var 2),
                     template_var 1)
                   )
               )],
          template_predicate
           (
              template_app
               (template_app (template_var 0, template_var 2),
                template_var 1)
              ))],
       template_predicate
        (
           template_app
            (template_app
              (template_app
                (template_app (template_hole 0, template_var 0),
                 template_var 3),
               template_var 2),
             template_var 1)
           ))),
    ("Algebra.pequivD",
     "[| ?prog \<simeq> ?prog'; sound ?P |] ==> wp ?prog ?P = wp ?prog' ?P",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 3, template_var 2),
              template_var 1)
            ),
        template_predicate
         (template_app (template_hole 2, template_var 0))],
       template_equation
        (template_app
          (template_app (template_hole 0, template_var 2), template_var 0),
         template_app
          (template_app (template_hole 0, template_var 1),
           template_var 0)))),
    ("Algebra.refinesD",
     "[| ?prog \<sqsubseteq> ?prog'; sound ?P |]
      ==> wp ?prog ?P \<tturnstile> wp ?prog' ?P",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 3, template_var 2),
              template_var 1)
            ),
        template_predicate
         (template_app (template_hole 2, template_var 0))],
       template_inequation
        (less_equals,
         template_app
          (template_app (template_hole 0, template_var 2), template_var 0),
         template_app
          (template_app (template_hole 0, template_var 1),
           template_var 0)))),
    ("Algebra.pcorres_drefine",
     "[| pcorres ?\<phi> ?G ?A ?C; well_def ?C |]
      ==> drefines ?\<phi> ?G ?A ?C",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_app (template_hole 2, template_var 3),
                  template_var 2),
                template_var 1),
              template_var 0)
            ),
        template_predicate
         (template_app (template_hole 1, template_var 0))],
       template_predicate
        (
           template_app
            (template_app
              (template_app
                (template_app (template_hole 0, template_var 3),
                 template_var 2),
               template_var 1),
             template_var 0)
           ))),
    ("Linear_Algebra.infnorm_set_lemma",
     "{\<bar>?x \<bullet> i\<bar> |i. i : Basis} ~= {}",
     template_negation
      (
         template_equation
          (template_app (template_hole 8, t_empty), template_hole 0)
         )),
    ("Linear_Algebra.bilinear_radd",
     "bilinear ?h ==> ?h ?x (?y + ?z) = ?h ?x ?y + ?h ?x ?z",
     template_implication
      ([template_predicate
         (template_app (template_hole 3, template_var 3))],
       template_equation
        (template_app
          (template_app (template_var 3, template_var 2),
           template_app
            (template_app (template_hole 1, template_var 1),
             template_var 0)),
         template_app
          (template_app
            (template_hole 0,
             template_app
              (template_app (template_var 3, template_var 2),
               template_var 1)),
           template_app
            (template_app (template_var 3, template_var 2),
             template_var 0))))),
    ("Linear_Algebra.bilinear_rsub",
     "bilinear ?h ==> ?h ?z (?x - ?y) = ?h ?z ?x - ?h ?z ?y",
     template_implication
      ([template_predicate
         (template_app (template_hole 3, template_var 3))],
       template_equation
        (template_app
          (template_app (template_var 3, template_var 2),
           template_app
            (template_app (template_hole 1, template_var 1),
             template_var 0)),
         template_app
          (template_app
            (template_hole 0,
             template_app
              (template_app (template_var 3, template_var 2),
               template_var 1)),
           template_app
            (template_app (template_var 3, template_var 2),
             template_var 0))))),
    ("Linear_Algebra.bilinear_lsub",
     "bilinear ?h ==> ?h (?x - ?y) ?z = ?h ?x ?z - ?h ?y ?z",
     template_implication
      ([template_predicate
         (template_app (template_hole 3, template_var 3))],
       template_equation
        (template_app
          (template_app
            (template_var 3,
             template_app
              (template_app (template_hole 1, template_var 2),
               template_var 1)),
           template_var 0),
         template_app
          (template_app
            (template_hole 0,
             template_app
              (template_app (template_var 3, template_var 2),
               template_var 0)),
           template_app
            (template_app (template_var 3, template_var 1),
             template_var 0))))),
    ("Linear_Algebra.bilinear_ladd",
     "bilinear ?h ==> ?h (?x + ?y) ?z = ?h ?x ?z + ?h ?y ?z",
     template_implication
      ([template_predicate
         (template_app (template_hole 3, template_var 3))],
       template_equation
        (template_app
          (template_app
            (template_var 3,
             template_app
              (template_app (template_hole 1, template_var 2),
               template_var 1)),
           template_var 0),
         template_app
          (template_app
            (template_hole 0,
             template_app
              (template_app (template_var 3, template_var 2),
               template_var 0)),
           template_app
            (template_app (template_var 3, template_var 1),
             template_var 0))))),
    ("Algebra.pequiv_AC",
     "[| ?a \<simeq> ?c; ?b \<simeq> ?d |]
      ==> (?a \<Squnion> ?b) \<simeq> (?c \<Squnion> ?d)",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 1, template_var 3),
              template_var 2)
            ),
        template_predicate
         (
            template_app
             (template_app (template_hole 1, template_var 1),
              template_var 0)
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 1,
               template_app
                (template_app (template_hole 0, template_var 3),
                 template_var 1)),
             template_app
              (template_app (template_hole 0, template_var 2),
               template_var 0))
           ))),
    ("Algebra.pequiv_DC",
     "[| ?a \<simeq> ?c; ?b \<simeq> ?d |]
      ==> (?a \<Sqinter> ?b) \<simeq> (?c \<Sqinter> ?d)",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 1, template_var 3),
              template_var 2)
            ),
        template_predicate
         (
            template_app
             (template_app (template_hole 1, template_var 1),
              template_var 0)
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 1,
               template_app
                (template_app (template_hole 0, template_var 3),
                 template_var 1)),
             template_app
              (template_app (template_hole 0, template_var 2),
               template_var 0))
           ))),
    ("Algebra.pr_dr_trans",
     "[| ?A \<sqsubseteq> ?B; drefines ?\<phi> ?G ?B ?C |]
      ==> drefines ?\<phi> ?G ?A ?C",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 1, template_var 4),
              template_var 3)
            ),
        template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_app (template_hole 0, template_var 2),
                  template_var 1),
                template_var 3),
              template_var 0)
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_app
                (template_app (template_hole 0, template_var 2),
                 template_var 1),
               template_var 4),
             template_var 0)
           ))),
    ("Algebra.AC_mono",
     "[| ?a \<sqsubseteq> ?b; ?c \<sqsubseteq> ?d |]
      ==> (?a \<Squnion> ?c) \<sqsubseteq> (?b \<Squnion> ?d)",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 1, template_var 3),
              template_var 2)
            ),
        template_predicate
         (
            template_app
             (template_app (template_hole 1, template_var 1),
              template_var 0)
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 1,
               template_app
                (template_app (template_hole 0, template_var 3),
                 template_var 1)),
             template_app
              (template_app (template_hole 0, template_var 2),
               template_var 0))
           ))),
    ("Algebra.DC_mono",
     "[| ?a \<sqsubseteq> ?b; ?c \<sqsubseteq> ?d |]
      ==> (?a \<Sqinter> ?c) \<sqsubseteq> (?b \<Sqinter> ?d)",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 1, template_var 3),
              template_var 2)
            ),
        template_predicate
         (
            template_app
             (template_app (template_hole 1, template_var 1),
              template_var 0)
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 1,
               template_app
                (template_app (template_hole 0, template_var 3),
                 template_var 1)),
             template_app
              (template_app (template_hole 0, template_var 2),
               template_var 0))
           ))),
    ("Set_Algebras.set_plus_mono2",
     "[| ?C <= ?D; ?E <= ?F |] ==> ?C + ?E <= ?D + ?F",
     template_implication
      ([template_inequation (less_equals, template_var 3, template_var 2),
        template_inequation (less_equals, template_var 1, template_var 0)],
       template_inequation
        (less_equals,
         template_app
          (template_app (template_hole 0, template_var 3), template_var 1),
         template_app
          (template_app (template_hole 0, template_var 2),
           template_var 0)))),
    ("Set_Algebras.set_plus_mono_b",
     "[| ?C <= ?D; ?x : ?a +o ?C |] ==> ?x : ?a +o ?D",
     template_implication
      ([template_inequation (less_equals, template_var 3, template_var 2),
        template_predicate
         (
            template_app
             (template_app (template_hole 1, template_var 1),
              template_app
               (template_app (template_hole 0, template_var 0),
                template_var 3))
            )],
       template_predicate
        (
           template_app
            (template_app (template_hole 1, template_var 1),
             template_app
              (template_app (template_hole 0, template_var 0),
               template_var 2))
           ))),
    ("Set_Algebras.set_times_mono2",
     "[| ?C <= ?D; ?E <= ?F |] ==> ?C * ?E <= ?D * ?F",
     template_implication
      ([template_inequation (less_equals, template_var 3, template_var 2),
        template_inequation (less_equals, template_var 1, template_var 0)],
       template_inequation
        (less_equals,
         template_app
          (template_app (template_hole 0, template_var 3), template_var 1),
         template_app
          (template_app (template_hole 0, template_var 2),
           template_var 0)))),
    ("Set_Algebras.set_times_mono_b",
     "[| ?C <= ?D; ?x : ?a *o ?C |] ==> ?x : ?a *o ?D",
     template_implication
      ([template_inequation (less_equals, template_var 3, template_var 2),
        template_predicate
         (
            template_app
             (template_app (template_hole 1, template_var 1),
              template_app
               (template_app (template_hole 0, template_var 0),
                template_var 3))
            )],
       template_predicate
        (
           template_app
            (template_app (template_hole 1, template_var 1),
             template_app
              (template_app (template_hole 0, template_var 0),
               template_var 2))
           ))),
    ("Set_Algebras.set_plus_mono5",
     "[| ?a : ?C; ?B <= ?D |] ==> ?a +o ?B <= ?C + ?D",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 3, template_var 3),
              template_var 2)
            ),
        template_inequation (less_equals, template_var 1, template_var 0)],
       template_inequation
        (less_equals,
         template_app
          (template_app (template_hole 1, template_var 3), template_var 1),
         template_app
          (template_app (template_hole 0, template_var 2),
           template_var 0)))),
    ("Set_Algebras.set_plus_intro",
     "[| ?a : ?C; ?b : ?D |] ==> ?a + ?b : ?C + ?D",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 2, template_var 3),
              template_var 2)
            ),
        template_predicate
         (
            template_app
             (template_app (template_hole 2, template_var 1),
              template_var 0)
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 2,
               template_app
                (template_app (template_hole 1, template_var 3),
                 template_var 1)),
             template_app
              (template_app (template_hole 0, template_var 2),
               template_var 0))
           ))),
    ("Set_Algebras.set_plus_mono3_b",
     "[| ?a : ?C; ?x : ?a +o ?D |] ==> ?x : ?C + ?D",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 2, template_var 3),
              template_var 2)
            ),
        template_predicate
         (
            template_app
             (template_app (template_hole 2, template_var 1),
              template_app
               (template_app (template_hole 1, template_var 3),
                template_var 0))
            )],
       template_predicate
        (
           template_app
            (template_app (template_hole 2, template_var 1),
             template_app
              (template_app (template_hole 0, template_var 2),
               template_var 0))
           ))),
    ("Set_Algebras.set_times_mono5",
     "[| ?a : ?C; ?B <= ?D |] ==> ?a *o ?B <= ?C * ?D",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 3, template_var 3),
              template_var 2)
            ),
        template_inequation (less_equals, template_var 1, template_var 0)],
       template_inequation
        (less_equals,
         template_app
          (template_app (template_hole 1, template_var 3), template_var 1),
         template_app
          (template_app (template_hole 0, template_var 2),
           template_var 0)))),
    ("Set_Algebras.set_times_intro",
     "[| ?a : ?C; ?b : ?D |] ==> ?a * ?b : ?C * ?D",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 2, template_var 3),
              template_var 2)
            ),
        template_predicate
         (
            template_app
             (template_app (template_hole 2, template_var 1),
              template_var 0)
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 2,
               template_app
                (template_app (template_hole 1, template_var 3),
                 template_var 1)),
             template_app
              (template_app (template_hole 0, template_var 2),
               template_var 0))
           ))),
    ("Set_Algebras.set_times_mono3_b",
     "[| ?a : ?C; ?x : ?a *o ?D |] ==> ?x : ?C * ?D",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 2, template_var 3),
              template_var 2)
            ),
        template_predicate
         (
            template_app
             (template_app (template_hole 2, template_var 1),
              template_app
               (template_app (template_hole 1, template_var 3),
                template_var 0))
            )],
       template_predicate
        (
           template_app
            (template_app (template_hole 2, template_var 1),
             template_app
              (template_app (template_hole 0, template_var 2),
               template_var 0))
           ))),
    ("Set_Algebras.set_plus_mono4_b",
     "[| ?a : ?C; ?x : ?a +o ?D |] ==> ?x : ?D + ?C",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 2, template_var 3),
              template_var 2)
            ),
        template_predicate
         (
            template_app
             (template_app (template_hole 2, template_var 1),
              template_app
               (template_app (template_hole 1, template_var 3),
                template_var 0))
            )],
       template_predicate
        (
           template_app
            (template_app (template_hole 2, template_var 1),
             template_app
              (template_app (template_hole 0, template_var 0),
               template_var 2))
           ))),
    ("Set_Algebras.set_times_mono4_b",
     "[| ?a : ?C; ?x : ?a *o ?D |] ==> ?x : ?D * ?C",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 2, template_var 3),
              template_var 2)
            ),
        template_predicate
         (
            template_app
             (template_app (template_hole 2, template_var 1),
              template_app
               (template_app (template_hole 1, template_var 3),
                template_var 0))
            )],
       template_predicate
        (
           template_app
            (template_app (template_hole 2, template_var 1),
             template_app
              (template_app (template_hole 0, template_var 0),
               template_var 2))
           ))),
    ("Algebra.dr_pr_trans",
     "[| drefines ?\<phi> ?G ?A ?B; ?B \<sqsubseteq> ?C |]
      ==> drefines ?\<phi> ?G ?A ?C",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_app (template_hole 1, template_var 4),
                  template_var 3),
                template_var 2),
              template_var 1)
            ),
        template_predicate
         (
            template_app
             (template_app (template_hole 0, template_var 1),
              template_var 0)
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_app
                (template_app (template_hole 1, template_var 4),
                 template_var 3),
               template_var 2),
             template_var 0)
           ))),
    ("Linear_Algebra.translation_galois",
     "(?T = (+) ?a ` ?S) = (?S = (+) (- ?a) ` ?T)",
     template_bimplication
      (template_equation
        (template_var 2,
         template_app
          (template_app (template_hole 2, t_empty), template_var 0)),
       template_equation
        (template_var 0,
         template_app
          (template_app (template_hole 2, t_empty), template_var 2)))),
    ("Linear_Algebra.dim_special_hyperplane",
     "?k : Basis ==> dim {x. ?k \<bullet> x = 0} = DIM(?'n) - 1",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 10, template_var 0),
              template_hole 9)
            )],
       template_equation
        (template_app
          (template_hole 7, template_app (template_hole 6, t_empty)),
         template_app
          (template_app
            (template_hole 2,
             template_app (template_hole 1, template_hole 9)),
           template_hole 0)))),
    ("Linear_Algebra.translation_invert",
     "(+) ?a ` ?A = (+) ?a ` ?B ==> ?A = ?B",
     template_implication
      ([template_equation
         (template_app
           (template_app (template_hole 1, t_empty), template_var 1),
          template_app
           (template_app (template_hole 1, t_empty), template_var 0))],
       template_equation (template_var 1, template_var 0))),
    ("Algebra.pequivI",
     "(!!P. sound P ==> wp ?prog P = wp ?prog' P) ==>
      ?prog \<simeq> ?prog'",
     template_implication
      ([template_predicate (template_app (template_hole 5, t_empty))],
       template_predicate
        (
           template_app
            (template_app (template_hole 0, template_var 1), template_var 0)
           ))),
    ("Algebra.refinesI",
     "(!!P. sound P ==> wp ?prog P \<tturnstile> wp ?prog' P) ==>
      ?prog \<sqsubseteq> ?prog'",
     template_implication
      ([template_predicate (template_app (template_hole 5, t_empty))],
       template_predicate
        (
           template_app
            (template_app (template_hole 0, template_var 1), template_var 0)
           ))),
    ("Boolean_Algebras.inf1E",
     "[| inf ?A ?B ?x; [| ?A ?x; ?B ?x |] ==> ?P |] ==> ?P",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app (template_hole 0, template_var 3),
                template_var 2),
              template_var 1)
            ),
        template_implication
         ([template_predicate
            (template_app (template_var 3, template_var 1))],
          template_implication
           ([template_predicate
              (template_app (template_var 2, template_var 1))],
            template_predicate (template_var 0)))],
       template_predicate (template_var 0))),
    ("Boolean_Algebras.sup_boolE",
     "[| sup ?P ?Q; ?P ==> ?R; ?Q ==> ?R |] ==> ?R",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 0, template_var 2),
              template_var 1)
            ),
        template_implication
         ([template_predicate (template_var 2)],
          template_predicate (template_var 0)),
        template_implication
         ([template_predicate (template_var 1)],
          template_predicate (template_var 0))],
       template_predicate (template_var 0))),
    ("Linear_Algebra.collinear_alt",
     "collinear ?S = (EX u v. ALL x:?S. EX c. x = u + c *\<^sub>R v)",
     template_equation
      (template_app (template_hole 6, template_var 0),
       template_app (template_hole 5, t_empty))),
    ("Linear_Algebra.vector_eq",
     "(?x = ?y) =
      (?x \<bullet> ?x = ?x \<bullet> ?y &
       ?y \<bullet> ?y = ?x \<bullet> ?x)",
     template_bimplication
      (template_equation (template_var 1, template_var 0),
       template_predicate
        (
           template_app
            (template_app
              (template_hole 2,
               template_app
                (template_app
                  (template_hole 1,
                   template_app
                    (template_app (template_hole 0, template_var 1),
                     template_var 1)),
                 template_app
                  (template_app (template_hole 0, template_var 1),
                   template_var 0))),
             template_app
              (template_app
                (template_hole 1,
                 template_app
                  (template_app (template_hole 0, template_var 0),
                   template_var 0)),
               template_app
                (template_app (template_hole 0, template_var 1),
                 template_var 1)))
           ))),
    ("Linear_Algebra.norm_cauchy_schwarz_eq",
     "(?x \<bullet> ?y = norm ?x * norm ?y) =
      (norm ?x *\<^sub>R ?y = norm ?y *\<^sub>R ?x)",
     template_bimplication
      (template_equation
        (template_app
          (template_app (template_hole 4, template_var 1), template_var 0),
         template_app
          (template_app
            (template_hole 3,
             template_app (template_hole 2, template_var 1)),
           template_app (template_hole 2, template_var 0))),
       template_equation
        (template_app
          (template_app
            (template_hole 0,
             template_app (template_hole 2, template_var 1)),
           template_var 0),
         template_app
          (template_app
            (template_hole 0,
             template_app (template_hole 2, template_var 0)),
           template_var 1)))),
    ("Linear_Algebra.norm_cauchy_schwarz_equal",
     "(\<bar>?x \<bullet> ?y\<bar> = norm ?x * norm ?y) =
      collinear {0::?'a, ?x, ?y}",
     template_equation
      (template_app
        (template_app
          (template_hole 8,
           template_app
            (template_hole 7,
             template_app
              (template_app (template_hole 6, template_var 1),
               template_var 0))),
         template_app
          (template_app
            (template_hole 5,
             template_app (template_hole 4, template_var 1)),
           template_app (template_hole 4, template_var 0))),
       template_app
        (template_hole 3,
         template_app
          (template_app (template_hole 2, template_hole 1),
           template_app
            (template_app (template_hole 2, template_var 1),
             template_app
              (template_app (template_hole 2, template_var 0),
               template_hole 0)))))),
    ("Linear_Algebra.special_hyperplane_span",
     "?k : Basis ==> {x. ?k \<bullet> x = 0} = span (Basis - {?k})",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 10, template_var 0),
              template_hole 9)
            )],
       template_equation
        (template_app (template_hole 7, t_empty),
         template_app
          (template_hole 3,
           template_app
            (template_app (template_hole 2, template_hole 9),
             template_app
              (template_app (template_hole 1, template_var 0),
               template_hole 0)))))),
    ("Linear_Algebra.dim_hyperplane",
     "?a ~= (0::?'a) ==> dim {x. ?a \<bullet> x = 0} = DIM(?'a) - 1",
     template_implication
      ([template_negation
         (template_equation (template_var 0, template_hole 10))],
       template_equation
        (template_app
          (template_hole 8, template_app (template_hole 7, t_empty)),
         template_app
          (template_app
            (template_hole 3,
             template_app (template_hole 2, template_hole 1)),
           template_hole 0)))),
    ("Linear_Algebra.translation_inverse_subset",
     "(+) (- ?a) ` ?V <= ?S ==> ?V <= (+) ?a ` ?S",
     template_implication
      ([template_inequation
         (less_equals,
          template_app
           (template_app (template_hole 2, t_empty), template_var 1),
          template_var 0)],
       template_inequation
        (less_equals, template_var 1,
         template_app
          (template_app (template_hole 2, t_empty), template_var 0)))),
    ("Linear_Algebra.adjoint_unique",
     "ALL x y. ?f x \<bullet> y = x \<bullet> ?g y ==> adjoint ?f = ?g",
     template_implication
      ([template_predicate (template_app (template_hole 6, t_empty))],
       template_equation
        (template_app (template_hole 0, template_var 1), template_var 0))),
    ("Linear_Algebra.translation_assoc",
     "(+) ?b ` (+) ?a ` ?S = (+) (?a + ?b) ` ?S",
     template_equation
      (template_app
        (template_app (template_hole 1, t_empty),
         template_app
          (template_app (template_hole 1, t_empty), template_var 0)),
       template_app
        (template_app (template_hole 1, t_empty), template_var 0))),
    ("Linear_Algebra.norm_triangle_eq",
     "(norm (?x + ?y) = norm ?x + norm ?y) =
      (norm ?x *\<^sub>R ?y = norm ?y *\<^sub>R ?x)",
     template_bimplication
      (template_equation
        (template_app
          (template_hole 4,
           template_app
            (template_app (template_hole 3, template_var 1),
             template_var 0)),
         template_app
          (template_app
            (template_hole 2,
             template_app (template_hole 4, template_var 1)),
           template_app (template_hole 4, template_var 0))),
       template_equation
        (template_app
          (template_app
            (template_hole 0,
             template_app (template_hole 4, template_var 1)),
           template_var 0),
         template_app
          (template_app
            (template_hole 0,
             template_app (template_hole 4, template_var 0)),
           template_var 1)))),
    ("Linear_Algebra.linear_componentwise",
     "linear ?f ==>
      ?f ?x \<bullet> ?j =
      (SUM i:Basis. ?x \<bullet> i * (?f i \<bullet> ?j))",
     template_implication
      ([template_predicate
         (template_app (template_hole 6, template_var 2))],
       template_equation
        (template_app
          (template_app
            (template_hole 4,
             template_app (template_var 2, template_var 1)),
           template_var 0),
         template_app
          (template_app (template_hole 3, t_empty), template_hole 0)))),
    ("Linear_Algebra.norm_triangle_eq_imp_collinear",
     "norm (?x + ?y) = norm ?x + norm ?y ==> collinear {0::?'a, ?x, ?y}",
     template_implication
      ([template_equation
         (template_app
           (template_hole 6,
            template_app
             (template_app (template_hole 5, template_var 1),
              template_var 0)),
          template_app
           (template_app
             (template_hole 4,
              template_app (template_hole 6, template_var 1)),
            template_app (template_hole 6, template_var 0)))],
       template_predicate
        (
           template_app
            (template_hole 3,
             template_app
              (template_app (template_hole 2, template_hole 1),
               template_app
                (template_app (template_hole 2, template_var 1),
                 template_app
                  (template_app (template_hole 2, template_var 0),
                   template_hole 0))))
           ))),
    ("Linear_Algebra.Lim_linear",
     "[| (?f \<longlongrightarrow> ?l) ?F; linear ?h |]
      ==> ((%x. ?h (?f x)) \<longlongrightarrow> ?h ?l) ?F",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app (template_hole 4, template_var 3),
                template_app (template_hole 3, template_var 2)),
              template_var 1)
            ),
        template_predicate
         (template_app (template_hole 2, template_var 0))],
       template_predicate
        (
           template_app
            (template_app
              (template_app (template_hole 1, t_empty),
               template_app
                (template_hole 0,
                 template_app (template_var 0, template_var 2))),
             template_var 1)
           ))),
    ("Linear_Algebra.orthogonal_to_span",
     "[| ?a : span ?S; !!y. y : ?S ==> orthogonal ?x y |]
      ==> orthogonal ?x ?a",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 3, template_var 2),
              template_app (template_hole 2, template_var 1))
            ),
        template_predicate (template_app (template_hole 1, t_empty))],
       template_predicate
        (
           template_app
            (template_app (template_hole 0, template_var 0), template_var 2)
           ))),
    ("Boolean_Algebras.inf2E",
     "[| inf ?A ?B ?x ?y; [| ?A ?x ?y; ?B ?x ?y |] ==> ?P |] ==> ?P",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_app (template_hole 0, template_var 4),
                  template_var 3),
                template_var 2),
              template_var 1)
            ),
        template_implication
         ([template_predicate
            (
               template_app
                (template_app (template_var 4, template_var 2),
                 template_var 1)
               )],
          template_implication
           ([template_predicate
              (
                 template_app
                  (template_app (template_var 3, template_var 2),
                   template_var 1)
                 )],
            template_predicate (template_var 0)))],
       template_predicate (template_var 0))),
    ("Boolean_Algebras.sup1E",
     "[| sup ?A ?B ?x; ?A ?x ==> ?P; ?B ?x ==> ?P |] ==> ?P",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app (template_hole 0, template_var 3),
                template_var 2),
              template_var 1)
            ),
        template_implication
         ([template_predicate
            (template_app (template_var 3, template_var 1))],
          template_predicate (template_var 0)),
        template_implication
         ([template_predicate
            (template_app (template_var 2, template_var 1))],
          template_predicate (template_var 0))],
       template_predicate (template_var 0))),
    ("Algebra.refines_determ",
     "[| determ (wp ?a); well_def ?a; well_def ?b; ?a \<sqsubseteq> ?b |]
      ==> ?a \<simeq> ?b",
     template_implication
      ([template_predicate
         (
            template_app
             (template_hole 4,
              template_app (template_hole 3, template_var 1))
            ),
        template_predicate (template_app (template_hole 2, template_var 1)),
        template_predicate (template_app (template_hole 2, template_var 0)),
        template_predicate
         (
            template_app
             (template_app (template_hole 1, template_var 1),
              template_var 0)
            )],
       template_predicate
        (
           template_app
            (template_app (template_hole 0, template_var 1), template_var 0)
           ))),
    ("Linear_Algebra.infnorm_set_image",
     "{\<bar>?x \<bullet> i\<bar> |i. i : Basis} =
      (%i. \<bar>?x \<bullet> i\<bar>) ` Basis",
     template_equation
      (template_app (template_hole 8, t_empty),
       template_app
        (template_app (template_hole 0, t_empty), template_hole 1))),
    ("Linear_Algebra.bilinear_bounded",
     "bilinear ?h ==> EX B. ALL x y. norm (?h x y) <= B * norm x * norm y",
     template_implication
      ([template_predicate
         (template_app (template_hole 8, template_var 0))],
       template_predicate (template_app (template_hole 7, t_empty)))),
    ("Linear_Algebra.vector_in_orthogonal_spanningset",
     "(!!S. [| ?a : S; pairwise orthogonal S; span S = UNIV |]
            ==> ?thesis) ==>
      ?thesis",
     template_implication
      ([template_predicate (template_app (template_hole 7, t_empty))],
       template_predicate (template_var 0))),
    ("Linear_Algebra.orthogonal_rvsum",
     "[| finite ?s; !!y. y : ?s ==> orthogonal ?x (?f y) |]
      ==> orthogonal ?x (sum ?f ?s)",
     template_implication
      ([template_predicate (template_app (template_hole 4, template_var 2)),
        template_predicate (template_app (template_hole 3, t_empty))],
       template_predicate
        (
           template_app
            (template_app (template_hole 1, template_var 1),
             template_app
              (template_app (template_hole 0, template_var 0),
               template_var 2))
           ))),
    ("Linear_Algebra.orthogonal_lvsum",
     "[| finite ?s; !!x. x : ?s ==> orthogonal (?f x) ?y |]
      ==> orthogonal (sum ?f ?s) ?y",
     template_implication
      ([template_predicate (template_app (template_hole 4, template_var 2)),
        template_predicate (template_app (template_hole 3, t_empty))],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 1,
               template_app
                (template_app (template_hole 0, template_var 1),
                 template_var 2)),
             template_var 0)
           ))),
    ("Linear_Algebra.pairwise_orthogonal_insert",
     "[| pairwise orthogonal ?S; !!y. y : ?S ==> orthogonal ?x y |]
      ==> pairwise orthogonal (insert ?x ?S)",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 4, template_hole 3),
              template_var 1)
            ),
        template_predicate (template_app (template_hole 2, t_empty))],
       template_predicate
        (
           template_app
            (template_app (template_hole 4, template_hole 3),
             template_app
              (template_app (template_hole 0, template_var 0),
               template_var 1))
           ))),
    ("Algebra.dr_strengthen_guard",
     "[| !!s. ?F s ==> ?G s; drefines ?\<phi> ?G ?a ?b |]
      ==> drefines ?\<phi> ?F ?a ?b",
     template_implication
      ([template_predicate (template_app (template_hole 2, t_empty)),
        template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_app (template_hole 0, template_var 2),
                  template_var 3),
                template_var 1),
              template_var 0)
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_app
                (template_app (template_hole 0, template_var 2),
                 template_var 4),
               template_var 1),
             template_var 0)
           ))),
    ("Set_Algebras.set_plus_mono2_b",
     "[| ?C <= ?D; ?E <= ?F; ?x : ?C + ?E |] ==> ?x : ?D + ?F",
     template_implication
      ([template_inequation (less_equals, template_var 4, template_var 3),
        template_inequation (less_equals, template_var 2, template_var 1),
        template_predicate
         (
            template_app
             (template_app (template_hole 1, template_var 0),
              template_app
               (template_app (template_hole 0, template_var 4),
                template_var 2))
            )],
       template_predicate
        (
           template_app
            (template_app (template_hole 1, template_var 0),
             template_app
              (template_app (template_hole 0, template_var 3),
               template_var 1))
           ))),
    ("Set_Algebras.set_times_mono2_b",
     "[| ?C <= ?D; ?E <= ?F; ?x : ?C * ?E |] ==> ?x : ?D * ?F",
     template_implication
      ([template_inequation (less_equals, template_var 4, template_var 3),
        template_inequation (less_equals, template_var 2, template_var 1),
        template_predicate
         (
            template_app
             (template_app (template_hole 1, template_var 0),
              template_app
               (template_app (template_hole 0, template_var 4),
                template_var 2))
            )],
       template_predicate
        (
           template_app
            (template_app (template_hole 1, template_var 0),
             template_app
              (template_app (template_hole 0, template_var 3),
               template_var 1))
           ))),
    ("Linear_Algebra.bilinear_continuous_compose",
     "[| continuous ?F ?f; continuous ?F ?g; bilinear ?h |]
      ==> continuous ?F (%x. ?h (?f x) (?g x))",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 3, template_var 3),
              template_var 2)
            ),
        template_predicate
         (
            template_app
             (template_app (template_hole 2, template_var 3),
              template_var 1)
            ),
        template_predicate
         (template_app (template_hole 1, template_var 0))],
       template_predicate
        (
           template_app
            (template_app (template_hole 0, template_var 3), t_empty)
           ))),
    ("Linear_Algebra.bilinear_continuous_on_compose",
     "[| continuous_on ?S ?f; continuous_on ?S ?g; bilinear ?h |]
      ==> continuous_on ?S (%x. ?h (?f x) (?g x))",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 3, template_var 3),
              template_var 2)
            ),
        template_predicate
         (
            template_app
             (template_app (template_hole 2, template_var 3),
              template_var 1)
            ),
        template_predicate
         (template_app (template_hole 1, template_var 0))],
       template_predicate
        (
           template_app
            (template_app (template_hole 0, template_var 3), t_empty)
           ))),
    ("Linear_Algebra.sum_clauses",
     "finite ?S ==>
      sum ?f (insert ?x ?S) =
      (if ?x : ?S then sum ?f ?S else ?f ?x + sum ?f ?S)",
     template_implication
      ([template_predicate
         (template_app (template_hole 6, template_var 2))],
       template_equation
        (template_app
          (template_app (template_hole 4, template_var 1),
           template_app
            (template_app (template_hole 3, template_var 0),
             template_var 2)),
         template_app
          (template_app
            (template_app
              (template_hole 2,
               template_app
                (template_app (template_hole 1, template_var 0),
                 template_var 2)),
             template_app
              (template_app (template_hole 4, template_var 1),
               template_var 2)),
           template_app
            (template_app
              (template_hole 0,
               template_app (template_var 1, template_var 0)),
             template_app
              (template_app (template_hole 4, template_var 1),
               template_var 2)))))),
    ("Linear_Algebra.span_not_univ_orthogonal",
     "span ?S ~= UNIV ==>
      EX a. a ~= (0::?'a) & (ALL x:span ?S. a \<bullet> x = 0)",
     template_implication
      ([template_negation
         (
            template_equation
             (template_app (template_hole 9, template_var 0),
              template_hole 8)
            )],
       template_predicate (template_app (template_hole 7, t_empty)))),
    ("Linear_Algebra.collinear_lemma",
     "collinear {0::?'a, ?x, ?y} =
      (?x = (0::?'a) | ?y = (0::?'a) | (EX c. ?y = c *\<^sub>R ?x))",
     template_implication
      ([template_predicate
         (
            template_app
             (template_hole 7,
              template_app
               (template_app (template_hole 6, template_hole 5),
                template_app
                 (template_app (template_hole 6, template_var 1),
                  template_app
                   (template_app (template_hole 6, template_var 0),
                    template_hole 4))))
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 3,
               template_app
                (template_app (template_hole 2, template_var 1),
                 template_hole 5)),
             template_app
              (template_app
                (template_hole 3,
                 template_app
                  (template_app (template_hole 2, template_var 0),
                   template_hole 5)),
               template_app (template_hole 1, t_empty)))
           ))),
    ("Linear_Algebra.basis_orthogonal",
     "finite ?B ==>
      EX C. finite C &
            card C <= card ?B & span C = span ?B & pairwise orthogonal C",
     template_implication
      ([template_predicate
         (template_app (template_hole 8, template_var 0))],
       template_predicate (template_app (template_hole 7, t_empty)))),
    ("Linear_Algebra.dim_substandard",
     "?d <= Basis ==>
      dim {x. ALL i:Basis. i ~: ?d --> x \<bullet> i = 0} = card ?d",
     template_implication
      ([template_inequation
         (less_equals, template_var 0, template_hole 11)],
       template_equation
        (template_app
          (template_hole 9, template_app (template_hole 8, t_empty)),
         template_app (template_hole 0, template_var 0)))),
    ("Linear_Algebra.span_not_univ_subset_hyperplane",
     "span ?S ~= UNIV ==>
      EX a. a ~= (0::?'a) & span ?S <= {x. a \<bullet> x = 0}",
     template_implication
      ([template_negation
         (
            template_equation
             (template_app (template_hole 10, template_var 0),
              template_hole 9)
            )],
       template_predicate (template_app (template_hole 8, t_empty)))),
    ("Linear_Algebra.lowdim_subset_hyperplane",
     "dim ?S < DIM(?'a) ==>
      EX a. a ~= (0::?'a) & span ?S <= {x. a \<bullet> x = 0}",
     template_implication
      ([template_inequation
         (less_than, template_app (template_hole 13, template_var 0),
          template_app (template_hole 12, template_hole 11))],
       template_predicate (template_app (template_hole 10, t_empty)))),
    ("Boolean_Algebras.sup2E",
     "[| sup ?A ?B ?x ?y; ?A ?x ?y ==> ?P; ?B ?x ?y ==> ?P |] ==> ?P",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_app (template_hole 0, template_var 4),
                  template_var 3),
                template_var 2),
              template_var 1)
            ),
        template_implication
         ([template_predicate
            (
               template_app
                (template_app (template_var 4, template_var 2),
                 template_var 1)
               )],
          template_predicate (template_var 0)),
        template_implication
         ([template_predicate
            (
               template_app
                (template_app (template_var 3, template_var 2),
                 template_var 1)
               )],
          template_predicate (template_var 0))],
       template_predicate (template_var 0))),
    ("Linear_Algebra.orthogonal_basis_exists",
     "EX B. independent B &
            B <= span ?V &
            ?V <= span B & card B = dim ?V & pairwise orthogonal B",
     template_predicate (template_app (template_hole 10, t_empty))),
    ("Linear_Algebra.collinear",
     "collinear ?S =
      (EX u. u ~= (0::?'a) &
             (ALL x:?S. ALL y:?S. EX c. x - y = c *\<^sub>R u))",
     template_equation
      (template_app (template_hole 9, template_var 0),
       template_app (template_hole 8, t_empty))),
    ("Linear_Algebra.dim_eq_hyperplane",
     "(dim ?S = DIM(?'n) - 1) =
      (EX a. a ~= (0::?'n) & span ?S = {x. a \<bullet> x = 0})",
     template_equation
      (template_app
        (template_app
          (template_hole 16,
           template_app (template_hole 15, template_var 0)),
         template_app
          (template_app
            (template_hole 14,
             template_app (template_hole 13, template_hole 12)),
           template_hole 11)),
       template_app (template_hole 10, t_empty))),
    ("Linear_Algebra.bilinear_sum",
     "bilinear ?h ==>
      ?h (sum ?f ?S) (sum ?g ?T) =
      (SUM (i, j):?S \<times> ?T. ?h (?f i) (?g j))",
     template_implication
      ([template_predicate
         (template_app (template_hole 6, template_var 4))],
       template_equation
        (template_app
          (template_app
            (template_var 4,
             template_app
              (template_app (template_hole 4, template_var 3),
               template_var 2)),
           template_app
            (template_app (template_hole 3, template_var 1),
             template_var 0)),
         template_app
          (template_app
            (template_hole 2, template_app (template_hole 1, t_empty)),
           template_app
            (template_app (template_hole 0, template_var 2), t_empty))))),
    ("Linear_Algebra.orthogonal_to_vector_exists",
     "[| 2 <= DIM(?'a);
         !!y. [| y ~= (0::?'a); orthogonal ?x y |] ==> ?thesis |]
      ==> ?thesis",
     template_implication
      ([template_inequation
         (less_equals,
          template_app
           (template_hole 9,
            template_app (template_hole 8, template_hole 7)),
          template_app (template_hole 6, template_hole 5)),
        template_predicate (template_app (template_hole 4, t_empty))],
       template_predicate (template_var 0))),
    ("Linear_Algebra.linear_eq_stdbasis",
     "[| linear ?f; linear ?g; !!b. b : Basis ==> ?f b = ?g b |]
      ==> ?f = ?g",
     template_implication
      ([template_predicate (template_app (template_hole 5, template_var 1)),
        template_predicate (template_app (template_hole 5, template_var 0)),
        template_predicate (template_app (template_hole 4, t_empty))],
       template_equation (template_var 1, template_var 0))),
    ("Algebra.drefines_determ",
     "[| determ (wp ?a); well_def ?a; well_def ?b;
         drefines ?\<phi> ?G ?a ?b |]
      ==> pcorres ?\<phi> ?G ?a ?b",
     template_implication
      ([template_predicate
         (
            template_app
             (template_hole 5,
              template_app (template_hole 4, template_var 3))
            ),
        template_predicate (template_app (template_hole 3, template_var 3)),
        template_predicate (template_app (template_hole 2, template_var 2)),
        template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_app (template_hole 1, template_var 1),
                  template_var 0),
                template_var 3),
              template_var 2)
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_app
                (template_app (template_hole 0, template_var 1),
                 template_var 0),
               template_var 3),
             template_var 2)
           ))),
    ("Set_Algebras.set_sum_alt",
     "finite ?I ==> sum ?S ?I = {sum s ?I |s. ALL i:?I. s i : ?S i}",
     template_implication
      ([template_predicate
         (template_app (template_hole 9, template_var 1))],
       template_equation
        (template_app
          (template_app (template_hole 7, template_var 0), template_var 1),
         template_app (template_hole 6, t_empty)))),
    ("Linear_Algebra.bilinear_bounded_pos",
     "bilinear ?h ==>
      EX B>0. ALL x y. norm (?h x y) <= B * norm x * norm y",
     template_implication
      ([template_predicate
         (template_app (template_hole 11, template_var 0))],
       template_predicate (template_app (template_hole 10, t_empty)))),
    ("Linear_Algebra.pairwise_ortho_scaleR",
     "pairwise (%i j. orthogonal (?f i) (?g j)) ?B ==>
      pairwise
       (%i j. orthogonal (?a i *\<^sub>R ?f i) (?a j *\<^sub>R ?g j)) ?B",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 2, t_empty), template_var 1)
            )],
       template_predicate
        (
           template_app
            (template_app (template_hole 2, t_empty), template_var 1)
           ))),
    ("Linear_Algebra.orthogonal_spanningset_subspace",
     "[| subspace ?S;
         !!B. [| B <= ?S; pairwise orthogonal B; span B = ?S |]
              ==> ?thesis |]
      ==> ?thesis",
     template_implication
      ([template_predicate (template_app (template_hole 6, template_var 1)),
        template_predicate (template_app (template_hole 5, t_empty))],
       template_predicate (template_var 0))),
    ("Linear_Algebra.norm_add_Pythagorean",
     "orthogonal ?a ?b ==>
      (norm (?a + ?b))\<^sup>2 = (norm ?a)\<^sup>2 + (norm ?b)\<^sup>2",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 8, template_var 1),
              template_var 0)
            )],
       template_equation
        (template_app
          (template_app
            (template_hole 6,
             template_app
              (template_hole 5,
               template_app
                (template_app (template_hole 4, template_var 1),
                 template_var 0))),
           template_app
            (template_hole 3,
             template_app (template_hole 2, template_hole 1))),
         template_app
          (template_app
            (template_hole 0,
             template_app
              (template_app
                (template_hole 6,
                 template_app (template_hole 5, template_var 1)),
               template_app
                (template_hole 3,
                 template_app (template_hole 2, template_hole 1)))),
           template_app
            (template_app
              (template_hole 6,
               template_app (template_hole 5, template_var 0)),
             template_app
              (template_hole 3,
               template_app (template_hole 2, template_hole 1))))))),
    ("Linear_Algebra.linear_bounded_pos",
     "[| linear ?f;
         !!B. [| 0 < B; !!x. norm (?f x) <= B * norm x |] ==> ?thesis |]
      ==> ?thesis",
     template_implication
      ([template_predicate (template_app (template_hole 8, template_var 1)),
        template_predicate (template_app (template_hole 7, t_empty))],
       template_predicate (template_var 0))),
    ("Linear_Algebra.Gram_Schmidt_step",
     "[| pairwise orthogonal ?S; ?x : span ?S |]
      ==> orthogonal ?x
           (?a -
            (SUM b:?S. (b \<bullet> ?a / (b \<bullet> b)) *\<^sub>R b))",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 8, template_hole 7),
              template_var 2)
            ),
        template_predicate
         (
            template_app
             (template_app (template_hole 6, template_var 1),
              template_app (template_hole 5, template_var 2))
            )],
       template_predicate
        (
           template_app
            (template_app (template_hole 7, template_var 1),
             template_app
              (template_app (template_hole 4, template_var 0),
               template_app
                (template_app (template_hole 3, t_empty), template_var 2)))
           ))),
    ("Algebra.dr_refl",
     "[| well_def ?a;
         !!Q. unitary Q ==>
              wp ?a Q o ?\<phi> \<tturnstile> wp ?a (Q o ?\<phi>) |]
      ==> drefines ?\<phi> ?G ?a ?a",
     template_implication
      ([template_predicate (template_app (template_hole 6, template_var 2)),
        template_predicate (template_app (template_hole 5, t_empty))],
       template_predicate
        (
           template_app
            (template_app
              (template_app
                (template_app (template_hole 0, template_var 1),
                 template_var 0),
               template_var 2),
             template_var 2)
           ))),
    ("Algebra.pcorresD",
     "[| pcorres ?\<phi> ?G ?A ?B; unitary ?Q |]
      ==> \<guillemotleft> ?G \<guillemotright> && (wp ?A ?Q o ?\<phi>) =
          \<guillemotleft> ?G \<guillemotright> && wp ?B (?Q o ?\<phi>)",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_app (template_hole 7, template_var 4),
                  template_var 3),
                template_var 2),
              template_var 1)
            ),
        template_predicate
         (template_app (template_hole 6, template_var 0))],
       template_equation
        (template_app
          (template_app
            (template_hole 4,
             template_app (template_hole 3, template_var 3)),
           template_app
            (template_app
              (template_hole 2,
               template_app
                (template_app (template_hole 1, template_var 2),
                 template_var 0)),
             template_var 4)),
         template_app
          (template_app
            (template_hole 4,
             template_app (template_hole 3, template_var 3)),
           template_app
            (template_app (template_hole 0, template_var 1),
             template_app
              (template_app (template_hole 2, template_var 0),
               template_var 4)))))),
    ("Linear_Algebra.dist_triangle_eq",
     "(dist ?x ?z = dist ?x ?y + dist ?y ?z) =
      (norm (?x - ?y) *\<^sub>R (?y - ?z) =
       norm (?y - ?z) *\<^sub>R (?x - ?y))",
     template_bimplication
      (template_equation
        (template_app
          (template_app (template_hole 5, template_var 2), template_var 1),
         template_app
          (template_app
            (template_hole 4,
             template_app
              (template_app (template_hole 5, template_var 2),
               template_var 0)),
           template_app
            (template_app (template_hole 5, template_var 0),
             template_var 1))),
       template_equation
        (template_app
          (template_app
            (template_hole 2,
             template_app
              (template_hole 1,
               template_app
                (template_app (template_hole 0, template_var 2),
                 template_var 0))),
           template_app
            (template_app (template_hole 0, template_var 0),
             template_var 1)),
         template_app
          (template_app
            (template_hole 2,
             template_app
              (template_hole 1,
               template_app
                (template_app (template_hole 0, template_var 0),
                 template_var 1))),
           template_app
            (template_app (template_hole 0, template_var 2),
             template_var 0))))),
    ("Linear_Algebra.collinear_scaleR_iff",
     "collinear {0::?'a, ?\<alpha> *\<^sub>R ?w, ?\<beta> *\<^sub>R ?z} =
      (collinear {0::?'a, ?w, ?z} | ?\<alpha> = 0 | ?\<beta> = 0)",
     template_implication
      ([template_predicate
         (
            template_app
             (template_hole 7,
              template_app
               (template_app (template_hole 6, template_hole 5),
                template_app
                 (template_app
                   (template_hole 6,
                    template_app
                     (template_app (template_hole 4, template_var 3),
                      template_var 2)),
                  template_app
                   (template_app
                     (template_hole 6,
                      template_app
                       (template_app (template_hole 4, template_var 1),
                        template_var 0)),
                    template_hole 3))))
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 2,
               template_app
                (template_hole 7,
                 template_app
                  (template_app (template_hole 6, template_hole 5),
                   template_app
                    (template_app (template_hole 6, template_var 2),
                     template_app
                      (template_app (template_hole 6, template_var 0),
                       template_hole 3))))),
             template_app
              (template_app
                (template_hole 2,
                 template_app
                  (template_app (template_hole 1, template_var 3),
                   template_hole 0)),
               template_app
                (template_app (template_hole 1, template_var 1),
                 template_hole 0)))
           ))),
    ("Linear_Algebra.orthogonal_extension",
     "[| pairwise orthogonal ?S;
         !!U. [| pairwise orthogonal (?S Un U);
                 span (?S Un U) = span (?S Un ?T) |]
              ==> ?thesis |]
      ==> ?thesis",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 5, template_hole 4),
              template_var 2)
            ),
        template_predicate (template_app (template_hole 3, t_empty))],
       template_predicate (template_var 0))),
    ("Algebra.pcorresI",
     "(!!Q. unitary Q ==>
            \<guillemotleft> ?G \<guillemotright> && (wp ?A Q o ?\<phi>) =
            \<guillemotleft> ?G \<guillemotright> &&
            wp ?B (Q o ?\<phi>)) ==>
      pcorres ?\<phi> ?G ?A ?B",
     template_implication
      ([template_predicate (template_app (template_hole 9, t_empty))],
       template_predicate
        (
           template_app
            (template_app
              (template_app
                (template_app (template_hole 0, template_var 1),
                 template_var 3),
               template_var 2),
             template_var 0)
           ))),
    ("Linear_Algebra.abs_triangle_half_l",
     "[| \<bar>?x - ?y\<bar> < ?e / (2::?'a);
         \<bar>?x' - ?y\<bar> < ?e / (2::?'a) |]
      ==> \<bar>?x - ?x'\<bar> < ?e",
     template_implication
      ([template_inequation
         (less_than,
          template_app
           (template_hole 5,
            template_app
             (template_app (template_hole 4, template_var 3),
              template_var 2)),
          template_app
           (template_app (template_hole 3, template_var 1),
            template_app
             (template_hole 2,
              template_app (template_hole 1, template_hole 0)))),
        template_inequation
         (less_than,
          template_app
           (template_hole 5,
            template_app
             (template_app (template_hole 4, template_var 0),
              template_var 2)),
          template_app
           (template_app (template_hole 3, template_var 1),
            template_app
             (template_hole 2,
              template_app (template_hole 1, template_hole 0))))],
       template_inequation
        (less_than,
         template_app
          (template_hole 5,
           template_app
            (template_app (template_hole 4, template_var 3),
             template_var 0)),
         template_var 1))),
    ("Linear_Algebra.abs_triangle_half_r",
     "[| \<bar>?y - ?x1.0\<bar> < ?e / (2::?'a);
         \<bar>?y - ?x2.0\<bar> < ?e / (2::?'a) |]
      ==> \<bar>?x1.0 - ?x2.0\<bar> < ?e",
     template_implication
      ([template_inequation
         (less_than,
          template_app
           (template_hole 5,
            template_app
             (template_app (template_hole 4, template_var 3),
              template_var 2)),
          template_app
           (template_app (template_hole 3, template_var 1),
            template_app
             (template_hole 2,
              template_app (template_hole 1, template_hole 0)))),
        template_inequation
         (less_than,
          template_app
           (template_hole 5,
            template_app
             (template_app (template_hole 4, template_var 3),
              template_var 0)),
          template_app
           (template_app (template_hole 3, template_var 1),
            template_app
             (template_hole 2,
              template_app (template_hole 1, template_hole 0))))],
       template_inequation
        (less_than,
         template_app
          (template_hole 5,
           template_app
            (template_app (template_hole 4, template_var 2),
             template_var 0)),
         template_var 1))),
    ("Linear_Algebra.norm_triangle_half_l",
     "[| norm (?x - ?y) < ?e / 2; norm (?x' - ?y) < ?e / 2 |]
      ==> norm (?x - ?x') < ?e",
     template_implication
      ([template_inequation
         (less_than,
          template_app
           (template_hole 5,
            template_app
             (template_app (template_hole 4, template_var 3),
              template_var 2)),
          template_app
           (template_app (template_hole 3, template_var 1),
            template_app
             (template_hole 2,
              template_app (template_hole 1, template_hole 0)))),
        template_inequation
         (less_than,
          template_app
           (template_hole 5,
            template_app
             (template_app (template_hole 4, template_var 0),
              template_var 2)),
          template_app
           (template_app (template_hole 3, template_var 1),
            template_app
             (template_hole 2,
              template_app (template_hole 1, template_hole 0))))],
       template_inequation
        (less_than,
         template_app
          (template_hole 5,
           template_app
            (template_app (template_hole 4, template_var 3),
             template_var 0)),
         template_var 1))),
    ("Linear_Algebra.norm_triangle_half_r",
     "[| norm (?y - ?x1.0) < ?e / 2; norm (?y - ?x2.0) < ?e / 2 |]
      ==> norm (?x1.0 - ?x2.0) < ?e",
     template_implication
      ([template_inequation
         (less_than,
          template_app
           (template_hole 5,
            template_app
             (template_app (template_hole 4, template_var 3),
              template_var 2)),
          template_app
           (template_app (template_hole 3, template_var 1),
            template_app
             (template_hole 2,
              template_app (template_hole 1, template_hole 0)))),
        template_inequation
         (less_than,
          template_app
           (template_hole 5,
            template_app
             (template_app (template_hole 4, template_var 3),
              template_var 0)),
          template_app
           (template_app (template_hole 3, template_var 1),
            template_app
             (template_hole 2,
              template_app (template_hole 1, template_hole 0))))],
       template_inequation
        (less_than,
         template_app
          (template_hole 5,
           template_app
            (template_app (template_hole 4, template_var 2),
             template_var 0)),
         template_var 1))),
    ("Linear_Algebra.orthogonal_extension_aux",
     "[| finite ?T; finite ?S; pairwise orthogonal ?S |]
      ==> EX U. pairwise orthogonal (?S Un U) &
                span (?S Un U) = span (?S Un ?T)",
     template_implication
      ([template_predicate (template_app (template_hole 7, template_var 1)),
        template_predicate (template_app (template_hole 7, template_var 0)),
        template_predicate
         (
            template_app
             (template_app (template_hole 6, template_hole 5),
              template_var 0)
            )],
       template_predicate (template_app (template_hole 4, t_empty)))),
    ("Linear_Algebra.norm_cauchy_schwarz_abs_eq",
     "(\<bar>?x \<bullet> ?y\<bar> = norm ?x * norm ?y) =
      (norm ?x *\<^sub>R ?y = norm ?y *\<^sub>R ?x |
       norm ?x *\<^sub>R ?y = - norm ?y *\<^sub>R ?x)",
     template_bimplication
      (template_equation
        (template_app
          (template_hole 7,
           template_app
            (template_app (template_hole 6, template_var 1),
             template_var 0)),
         template_app
          (template_app
            (template_hole 5,
             template_app (template_hole 4, template_var 1)),
           template_app (template_hole 4, template_var 0))),
       template_predicate
        (
           template_app
            (template_app
              (template_hole 3,
               template_app
                (template_app
                  (template_hole 2,
                   template_app
                    (template_app
                      (template_hole 1,
                       template_app (template_hole 4, template_var 1)),
                     template_var 0)),
                 template_app
                  (template_app
                    (template_hole 1,
                     template_app (template_hole 4, template_var 0)),
                   template_var 1))),
             template_app
              (template_app
                (template_hole 2,
                 template_app
                  (template_app
                    (template_hole 1,
                     template_app (template_hole 4, template_var 1)),
                   template_var 0)),
               template_app
                (template_app
                  (template_hole 1,
                   template_app
                    (template_hole 0,
                     template_app (template_hole 4, template_var 0))),
                 template_var 1)))
           ))),
    ("Linear_Algebra.dim_orthogonal_sum",
     "(!!x y. [| x : ?A; y : ?B |] ==> x \<bullet> y = 0) ==>
      dim (?A Un ?B) = dim ?A + dim ?B",
     template_implication
      ([template_predicate (template_app (template_hole 9, t_empty))],
       template_equation
        (template_app
          (template_hole 2,
           template_app
            (template_app (template_hole 1, template_var 1),
             template_var 0)),
         template_app
          (template_app
            (template_hole 0,
             template_app (template_hole 2, template_var 1)),
           template_app (template_hole 2, template_var 0))))),
    ("Algebra.drefinesD3",
     "[| drefines ?\<phi> ?G ?a ?b; ?G ?s; unitary ?Q; well_def ?a |]
      ==> wp ?a ?Q (?\<phi> ?s) <= wp ?b (?Q o ?\<phi>) ?s",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_app (template_hole 6, template_var 5),
                  template_var 4),
                template_var 3),
              template_var 2)
            ),
        template_predicate (template_app (template_var 4, template_var 1)),
        template_predicate (template_app (template_hole 5, template_var 0)),
        template_predicate
         (template_app (template_hole 4, template_var 3))],
       template_inequation
        (less_equals,
         template_app
          (template_app
            (template_app (template_hole 2, template_var 3),
             template_var 0),
           template_app (template_var 5, template_var 1)),
         template_app
          (template_app
            (template_app (template_hole 1, template_var 2),
             template_app
              (template_app (template_hole 0, template_var 0),
               template_var 5)),
           template_var 1)))),
    ("Linear_Algebra.orthogonal_to_subspace_exists",
     "[| dim ?S < DIM(?'a);
         !!x. [| x ~= (0::?'a); !!y. y : span ?S ==> orthogonal x y |]
              ==> ?thesis |]
      ==> ?thesis",
     template_implication
      ([template_inequation
         (less_than, template_app (template_hole 9, template_var 1),
          template_app (template_hole 8, template_hole 7)),
        template_predicate (template_app (template_hole 6, t_empty))],
       template_predicate (template_var 0))),
    ("Set_Algebras.set_plus_elim",
     "[| ?x : ?A + ?B;
         !!a b. [| ?x = a + b; a : ?A; b : ?B |] ==> ?thesis |]
      ==> ?thesis",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 4, template_var 3),
              template_app
               (template_app (template_hole 3, template_var 2),
                template_var 1))
            ),
        template_predicate (template_app (template_hole 2, t_empty))],
       template_predicate (template_var 0))),
    ("Set_Algebras.set_times_elim",
     "[| ?x : ?A * ?B;
         !!a b. [| ?x = a * b; a : ?A; b : ?B |] ==> ?thesis |]
      ==> ?thesis",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 4, template_var 3),
              template_app
               (template_app (template_hole 3, template_var 2),
                template_var 1))
            ),
        template_predicate (template_app (template_hole 2, t_empty))],
       template_predicate (template_var 0))),
    ("Linear_Algebra.linear_inj_bounded_below_pos",
     "[| linear ?f; inj ?f;
         !!B. [| 0 < B; !!x. B * norm x <= norm (?f x) |] ==> ?thesis |]
      ==> ?thesis",
     template_implication
      ([template_predicate
         (template_app (template_hole 10, template_var 1)),
        template_predicate
         (
            template_app
             (template_app (template_hole 9, template_var 1),
              template_hole 8)
            ),
        template_predicate (template_app (template_hole 7, t_empty))],
       template_predicate (template_var 0))),
    ("Linear_Algebra.dim_subspace_orthogonal_to_vectors",
     "[| subspace ?A; subspace ?B; ?A <= ?B |]
      ==> dim {y: ?B. ALL x:?A. orthogonal x y} + dim ?A = dim ?B",
     template_implication
      ([template_predicate (template_app (template_hole 9, template_var 1)),
        template_predicate (template_app (template_hole 9, template_var 0)),
        template_inequation (less_equals, template_var 1, template_var 0)],
       template_equation
        (template_app
          (template_app
            (template_hole 6,
             template_app
              (template_hole 5, template_app (template_hole 4, t_empty))),
           template_app (template_hole 5, template_var 1)),
         template_app (template_hole 5, template_var 0)))),
    ("Algebra.dr_trans",
     "[| drefines ?\<phi> ?G ?A ?B; drefines ?\<phi>' ?G' ?B ?C;
         !!s. ?G' s ==> ?G (?\<phi>' s) |]
      ==> drefines (?\<phi> o ?\<phi>') ?G' ?A ?C",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_app (template_hole 4, template_var 6),
                  template_var 5),
                template_var 4),
              template_var 3)
            ),
        template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_app (template_hole 3, template_var 2),
                  template_var 1),
                template_var 3),
              template_var 0)
            ),
        template_predicate (template_app (template_hole 2, t_empty))],
       template_predicate
        (
           template_app
            (template_app
              (template_app
                (template_app
                  (template_hole 1,
                   template_app
                    (template_app (template_hole 0, template_var 6),
                     template_var 2)),
                 template_var 1),
               template_var 4),
             template_var 0)
           ))),
    ("Linear_Algebra.lowdim_eq_hyperplane",
     "[| dim ?S = DIM(?'a) - 1;
         !!a. [| a ~= (0::?'a); span ?S = {x. a \<bullet> x = 0} |]
              ==> ?thesis |]
      ==> ?thesis",
     template_implication
      ([template_equation
         (template_app (template_hole 14, template_var 1),
          template_app
           (template_app
             (template_hole 13,
              template_app (template_hole 12, template_hole 11)),
            template_hole 10)),
        template_predicate (template_app (template_hole 9, t_empty))],
       template_predicate (template_var 0))),
    ("Linear_Algebra.bounded_linearI'",
     "[| !!x y. ?f (x + y) = ?f x + ?f y;
         !!c x. ?f (c *\<^sub>R x) = c *\<^sub>R ?f x |]
      ==> bounded_linear ?f",
     template_implication
      ([template_predicate (template_app (template_hole 8, t_empty)),
        template_predicate (template_app (template_hole 3, t_empty))],
       template_predicate
        (template_app (template_hole 0, template_var 0)))),
    ("Algebra.dr_repeat",
     "[| drefines ?\<phi> ?G ?a ?b;
         \<guillemotleft> ?G \<guillemotright> \<tturnstile> wp ?b
                        \<guillemotleft> ?G \<guillemotright>;
         well_def ?a; well_def ?b |]
      ==> drefines ?\<phi> ?G (repeat ?n ?a) (repeat ?n ?b)",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_app (template_hole 7, template_var 4),
                  template_var 3),
                template_var 2),
              template_var 1)
            ),
        template_inequation
         (less_equals, template_app (template_hole 5, template_var 3),
          template_app
           (template_app (template_hole 4, template_var 1),
            template_app (template_hole 5, template_var 3))),
        template_predicate (template_app (template_hole 3, template_var 2)),
        template_predicate
         (template_app (template_hole 2, template_var 1))],
       template_predicate
        (
           template_app
            (template_app
              (template_app
                (template_app (template_hole 7, template_var 4),
                 template_var 3),
               template_app
                (template_app (template_hole 1, template_var 0),
                 template_var 2)),
             template_app
              (template_app (template_hole 0, template_var 0),
               template_var 1))
           ))),
    ("Linear_Algebra.orthogonal_subspace_decomp_exists",
     "(!!y z.
          [| y : span ?S; !!w. w : span ?S ==> orthogonal z w; ?x = y + z |]
          ==> ?thesis) ==>
      ?thesis",
     template_implication
      ([template_predicate (template_app (template_hole 6, t_empty))],
       template_predicate (template_var 0))),
    ("Linear_Algebra.norm_sum_Pythagorean",
     "[| finite ?I; pairwise (%i j. orthogonal (?f i) (?f j)) ?I |]
      ==> (norm (sum ?f ?I))\<^sup>2 = (SUM i:?I. (norm (?f i))\<^sup>2)",
     template_implication
      ([template_predicate
         (template_app (template_hole 10, template_var 1)),
        template_predicate
         (
            template_app
             (template_app (template_hole 9, t_empty), template_var 1)
            )],
       template_equation
        (template_app
          (template_app
            (template_hole 6,
             template_app
              (template_hole 5,
               template_app
                (template_app (template_hole 4, template_var 0),
                 template_var 1))),
           template_app
            (template_hole 3,
             template_app (template_hole 2, template_hole 1))),
         template_app
          (template_app (template_hole 0, t_empty), template_var 1)))),
    ("Linear_Algebra.bilinear_eq_stdbasis",
     "[| bilinear ?f; bilinear ?g;
         !!i j. [| i : Basis; j : Basis |] ==> ?f i j = ?g i j |]
      ==> ?f = ?g",
     template_implication
      ([template_predicate (template_app (template_hole 8, template_var 1)),
        template_predicate (template_app (template_hole 8, template_var 0)),
        template_predicate (template_app (template_hole 7, t_empty))],
       template_equation (template_var 1, template_var 0))),
    ("Algebra.drefinesD",
     "[| drefines ?\<phi> ?G ?A ?B; unitary ?P; unitary ?Q;
         ?P \<tturnstile> wp ?A ?Q |]
      ==> \<guillemotleft> ?G \<guillemotright> &&
          (?P o ?\<phi>) \<tturnstile> wp ?B (?Q o ?\<phi>)",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_app (template_hole 8, template_var 5),
                  template_var 4),
                template_var 3),
              template_var 2)
            ),
        template_predicate (template_app (template_hole 7, template_var 1)),
        template_predicate (template_app (template_hole 7, template_var 0)),
        template_inequation
         (less_equals, template_var 1,
          template_app
           (template_app (template_hole 5, template_var 3),
            template_var 0))],
       template_inequation
        (less_equals,
         template_app
          (template_app
            (template_hole 3,
             template_app (template_hole 2, template_var 4)),
           template_app
            (template_app (template_hole 1, template_var 1),
             template_var 5)),
         template_app
          (template_app (template_hole 0, template_var 2),
           template_app
            (template_app (template_hole 1, template_var 0),
             template_var 5))))),
    ("Algebra.pcorresD2",
     "[| pcorres ?\<phi> ?G ?A ?B; unitary ?Q; well_def ?A; well_def ?B;
         ?G ?s |]
      ==> wp ?A ?Q (?\<phi> ?s) = wp ?B (?Q o ?\<phi>) ?s",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_app (template_hole 7, template_var 5),
                  template_var 4),
                template_var 3),
              template_var 2)
            ),
        template_predicate (template_app (template_hole 6, template_var 1)),
        template_predicate (template_app (template_hole 5, template_var 3)),
        template_predicate (template_app (template_hole 4, template_var 2)),
        template_predicate (template_app (template_var 4, template_var 0))],
       template_equation
        (template_app
          (template_app
            (template_app (template_hole 2, template_var 3),
             template_var 1),
           template_app (template_var 5, template_var 0)),
         template_app
          (template_app
            (template_app (template_hole 1, template_var 2),
             template_app
              (template_app (template_hole 0, template_var 1),
               template_var 5)),
           template_var 0)))),
    ("Set_Algebras.sum_set_linear",
     "[| !!A B. ?f A + ?f B = ?f (A + B); ?f {0::?'a} = {0::?'b} |]
      ==> ?f (sum ?S ?I) = sum (?f o ?S) ?I",
     template_implication
      ([template_predicate (template_app (template_hole 13, t_empty)),
        template_equation
         (template_app
           (template_var 2,
            template_app
             (template_app (template_hole 8, template_hole 7),
              template_hole 6)),
          template_app
           (template_app (template_hole 5, template_hole 4),
            template_hole 3))],
       template_equation
        (template_app
          (template_var 2,
           template_app
            (template_app (template_hole 2, template_var 1),
             template_var 0)),
         template_app
          (template_app
            (template_hole 1,
             template_app
              (template_app (template_hole 0, template_var 2),
               template_var 1)),
           template_var 0)))),
    ("Algebra.drefinesD2",
     "[| drefines ?\<phi> ?G ?A ?B; unitary ?P; unitary ?Q;
         ?P \<tturnstile> wp ?A ?Q; ?G ?s |]
      ==> (?P o ?\<phi>) ?s <= wp ?B (?Q o ?\<phi>) ?s",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_app (template_hole 6, template_var 6),
                  template_var 5),
                template_var 4),
              template_var 3)
            ),
        template_predicate (template_app (template_hole 5, template_var 2)),
        template_predicate (template_app (template_hole 5, template_var 1)),
        template_inequation
         (less_equals, template_var 2,
          template_app
           (template_app (template_hole 3, template_var 4),
            template_var 1)),
        template_predicate (template_app (template_var 5, template_var 0))],
       template_inequation
        (less_equals,
         template_app
          (template_app
            (template_app (template_hole 1, template_var 2),
             template_var 6),
           template_var 0),
         template_app
          (template_app
            (template_app (template_hole 0, template_var 3),
             template_app
              (template_app (template_hole 1, template_var 1),
               template_var 6)),
           template_var 0)))),
    ("Algebra.drefinesI",
     "(!!P Q.
          [| unitary P; unitary Q; P \<tturnstile> wp ?A Q |]
          ==> \<guillemotleft> ?G \<guillemotright> &&
              (P o ?\<phi>) \<tturnstile> wp ?B (Q o ?\<phi>)) ==>
      drefines ?\<phi> ?G ?A ?B",
     template_implication
      ([template_predicate (template_app (template_hole 10, t_empty))],
       template_predicate
        (
           template_app
            (template_app
              (template_app
                (template_app (template_hole 0, template_var 1),
                 template_var 2),
               template_var 3),
             template_var 0)
           ))),
    ("Linear_Algebra.orthogonal_extension_strong",
     "[| pairwise orthogonal ?S;
         !!U. [| U Int insert (0::?'a) ?S = {};
                 pairwise orthogonal (?S Un U);
                 span (?S Un U) = span (?S Un ?T) |]
              ==> ?thesis |]
      ==> ?thesis",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 9, template_hole 8),
              template_var 2)
            ),
        template_predicate (template_app (template_hole 7, t_empty))],
       template_predicate (template_var 0))),
    ("Linear_Algebra.orthogonal_to_subspace_exists_gen",
     "[| span ?S < span ?T;
         !!x. [| x ~= (0::?'a); x : span ?T;
                 !!y. y : span ?S ==> orthogonal x y |]
              ==> ?thesis |]
      ==> ?thesis",
     template_implication
      ([template_inequation
         (less_than, template_app (template_hole 6, template_var 2),
          template_app (template_hole 6, template_var 1)),
        template_predicate (template_app (template_hole 5, t_empty))],
       template_predicate (template_var 0))),
    ("Linear_Algebra.linear_invertible_bounded_below_pos",
     "[| linear ?f; linear ?g; ?g o ?f = id;
         !!B. [| 0 < B; !!x. B * norm x <= norm (?f x) |] ==> ?thesis |]
      ==> ?thesis",
     template_implication
      ([template_predicate
         (template_app (template_hole 12, template_var 2)),
        template_predicate
         (template_app (template_hole 11, template_var 1)),
        template_equation
         (template_app
           (template_app (template_hole 9, template_var 1), template_var 2),
          template_hole 8),
        template_predicate (template_app (template_hole 7, t_empty))],
       template_predicate (template_var 0))),
    ("Linear_Algebra.substdbasis_expansion_unique",
     "?d <= Basis ==>
      ((SUM i:?d. ?f i *\<^sub>R i) = ?x) =
      (ALL i:Basis.
          (i : ?d --> ?f i = ?x \<bullet> i) &
          (i ~: ?d --> ?x \<bullet> i = 0))",
     template_implication
      ([template_inequation
         (less_equals, template_var 2, template_hole 12)],
       template_equation
        (template_app
          (template_app
            (template_hole 10,
             template_app
              (template_app (template_hole 9, t_empty), template_var 2)),
           template_var 0),
         template_app
          (template_app (template_hole 7, template_hole 12), t_empty)))),
    ("Algebra.pcorresI2",
     "[| !!Q s.
            [| unitary Q; ?G s |]
            ==> wp ?A Q (?\<phi> s) = wp ?B (Q o ?\<phi>) s;
         well_def ?A; well_def ?B |]
      ==> pcorres ?\<phi> ?G ?A ?B",
     template_implication
      ([template_predicate (template_app (template_hole 10, t_empty)),
        template_predicate (template_app (template_hole 2, template_var 2)),
        template_predicate
         (template_app (template_hole 1, template_var 0))],
       template_predicate
        (
           template_app
            (template_app
              (template_app
                (template_app (template_hole 0, template_var 1),
                 template_var 3),
               template_var 2),
             template_var 0)
           ))),
    ("Linear_Algebra.orthogonal_basis_subspace",
     "[| subspace ?S;
         !!B. [| (0::?'a) ~: B; B <= ?S; pairwise orthogonal B;
                 independent B; card B = dim ?S; span B = ?S |]
              ==> ?thesis |]
      ==> ?thesis",
     template_implication
      ([template_predicate
         (template_app (template_hole 13, template_var 1)),
        template_predicate (template_app (template_hole 12, t_empty))],
       template_predicate (template_var 0))),
    ("Algebra.dr_Seq",
     "[| drefines ?\<phi> ?P ?A ?B; drefines ?\<phi> ?Q ?C ?D;
         \<guillemotleft> ?P \<guillemotright> \<tturnstile> wp ?B
                        \<guillemotleft> ?Q \<guillemotright>;
         well_def ?B; well_def ?C; well_def ?D |]
      ==> drefines ?\<phi> ?P (?A ;; ?C) (?B ;; ?D)",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_app (template_hole 7, template_var 6),
                  template_var 5),
                template_var 4),
              template_var 3)
            ),
        template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_app (template_hole 7, template_var 6),
                  template_var 2),
                template_var 1),
              template_var 0)
            ),
        template_inequation
         (less_equals, template_app (template_hole 5, template_var 5),
          template_app
           (template_app (template_hole 4, template_var 3),
            template_app (template_hole 5, template_var 2))),
        template_predicate (template_app (template_hole 3, template_var 3)),
        template_predicate (template_app (template_hole 2, template_var 1)),
        template_predicate
         (template_app (template_hole 3, template_var 0))],
       template_predicate
        (
           template_app
            (template_app
              (template_app
                (template_app (template_hole 7, template_var 6),
                 template_var 5),
               template_app
                (template_app (template_hole 1, template_var 4),
                 template_var 1)),
             template_app
              (template_app (template_hole 0, template_var 3),
               template_var 0))
           ))),
    ("Algebra.drefinesI2",
     "[| well_def ?B;
         !!P Q s.
            [| unitary P; unitary Q; ?G s; P \<tturnstile> wp ?A Q |]
            ==> (P o ?\<phi>) s <= wp ?B (Q o ?\<phi>) s |]
      ==> drefines ?\<phi> ?G ?A ?B",
     template_implication
      ([template_predicate (template_app (template_hole 9, template_var 3)),
        template_predicate (template_app (template_hole 8, t_empty))],
       template_predicate
        (
           template_app
            (template_app
              (template_app
                (template_app (template_hole 0, template_var 0),
                 template_var 2),
               template_var 1),
             template_var 3)
           ))),
    ("Linear_Algebra.vector_in_orthogonal_basis",
     "[| ?a ~= (0::?'a);
         !!S. [| ?a : S; (0::?'a) ~: S; pairwise orthogonal S;
                 independent S; finite S; span S = UNIV;
                 card S = DIM(?'a) |]
              ==> ?thesis |]
      ==> ?thesis",
     template_implication
      ([template_negation
         (template_equation (template_var 1, template_hole 12)),
        template_predicate (template_app (template_hole 11, t_empty))],
       template_predicate (template_var 0))),
    ("Linear_Algebra.orthonormal_basis_subspace",
     "[| subspace ?S;
         !!B. [| B <= ?S; pairwise orthogonal B; !!x. x : B ==> norm x = 1;
                 independent B; card B = dim ?S; span B = ?S |]
              ==> ?thesis |]
      ==> ?thesis",
     template_implication
      ([template_predicate
         (template_app (template_hole 16, template_var 1)),
        template_predicate (template_app (template_hole 15, t_empty))],
       template_predicate (template_var 0))),
    ("Linear_Algebra.vector_in_orthonormal_basis",
     "[| norm ?a = 1;
         !!S. [| ?a : S; pairwise orthogonal S; !!x. x : S ==> norm x = 1;
                 independent S; card S = DIM(?'a); span S = UNIV |]
              ==> ?thesis |]
      ==> ?thesis",
     template_implication
      ([template_equation
         (template_app (template_hole 14, template_var 1),
          template_hole 13),
        template_predicate (template_app (template_hole 12, t_empty))],
       template_predicate (template_var 0))),
    ("Linear_Algebra.orthogonal_subspace_decomp_unique",
     "[| ?x + ?y = ?x' + ?y'; ?x : span ?S; ?x' : span ?S; ?y : span ?T;
         ?y' : span ?T; !!a b. [| a : ?S; b : ?T |] ==> orthogonal a b |]
      ==> ?x = ?x' & ?y = ?y'",
     template_implication
      ([template_equation
         (template_app
           (template_app (template_hole 5, template_var 5), template_var 4),
          template_app
           (template_app (template_hole 5, template_var 3),
            template_var 2)),
        template_predicate
         (
            template_app
             (template_app (template_hole 4, template_var 5),
              template_app (template_hole 3, template_var 1))
            ),
        template_predicate
         (
            template_app
             (template_app (template_hole 4, template_var 3),
              template_app (template_hole 3, template_var 1))
            ),
        template_predicate
         (
            template_app
             (template_app (template_hole 4, template_var 4),
              template_app (template_hole 3, template_var 0))
            ),
        template_predicate
         (
            template_app
             (template_app (template_hole 4, template_var 2),
              template_app (template_hole 3, template_var 0))
            ),
        template_predicate (template_app (template_hole 2, t_empty))],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 0,
               template_app
                (template_app (template_hole 6, template_var 5),
                 template_var 3)),
             template_app
              (template_app (template_hole 6, template_var 4),
               template_var 2))
           ))),
    ("Linear_Algebra.bilinear_eq",
     "[| bilinear ?f; bilinear ?g; ?S <= span ?B; ?T <= span ?C; ?x : ?S;
         ?y : ?T; !!x y. [| x : ?B; y : ?C |] ==> ?f x y = ?g x y |]
      ==> ?f ?x ?y = ?g ?x ?y",
     template_implication
      ([template_predicate (template_app (template_hole 9, template_var 7)),
        template_predicate (template_app (template_hole 9, template_var 6)),
        template_inequation
         (less_equals, template_var 5,
          template_app (template_hole 7, template_var 4)),
        template_inequation
         (less_equals, template_var 3,
          template_app (template_hole 5, template_var 2)),
        template_predicate
         (
            template_app
             (template_app (template_hole 4, template_var 1),
              template_var 5)
            ),
        template_predicate
         (
            template_app
             (template_app (template_hole 3, template_var 0),
              template_var 3)
            ),
        template_predicate (template_app (template_hole 2, t_empty))],
       template_equation
        (template_app
          (template_app (template_var 7, template_var 1), template_var 0),
         template_app
          (template_app (template_var 6, template_var 1),
           template_var 0)))),
    ("Algebra.pcorres_Seq",
     "[| pcorres ?\<phi> ?G ?A ?B; pcorres ?\<phi> ?H ?C ?D; well_def ?A;
         well_def ?B; well_def ?C; well_def ?D;
         !!Q. unitary Q ==>
              \<guillemotleft> ?I \<guillemotright> && wp ?B Q =
              wp ?B (\<guillemotleft> ?H \<guillemotright> && Q);
         !!s. ?G s ==> ?I s |]
      ==> pcorres ?\<phi> ?G (?A ;; ?C) (?B ;; ?D)",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_app (template_hole 11, template_var 7),
                  template_var 6),
                template_var 5),
              template_var 4)
            ),
        template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_app (template_hole 11, template_var 7),
                  template_var 3),
                template_var 2),
              template_var 1)
            ),
        template_predicate
         (template_app (template_hole 10, template_var 5)),
        template_predicate (template_app (template_hole 9, template_var 4)),
        template_predicate
         (template_app (template_hole 10, template_var 2)),
        template_predicate (template_app (template_hole 9, template_var 1)),
        template_predicate (template_app (template_hole 8, t_empty)),
        template_predicate (template_app (template_hole 2, t_empty))],
       template_predicate
        (
           template_app
            (template_app
              (template_app
                (template_app (template_hole 11, template_var 7),
                 template_var 6),
               template_app
                (template_app (template_hole 1, template_var 5),
                 template_var 2)),
             template_app
              (template_app (template_hole 0, template_var 4),
               template_var 1))
           ))),
    ("Set_Algebras.sum_set_cond_linear",
     "[| !!A B. [| ?P A; ?P B |] ==> ?P (A + B); ?P {0::?'a};
         !!A B. [| ?P A; ?P B |] ==> ?f (A + B) = ?f A + ?f B;
         ?f {0::?'a} = {0::?'b}; !!i. i : ?I ==> ?P (?S i) |]
      ==> ?f (sum ?S ?I) = sum (?f o ?S) ?I",
     template_implication
      ([template_predicate (template_app (template_hole 15, t_empty)),
        template_predicate
         (
            template_app
             (template_var 3,
              template_app
               (template_app (template_hole 12, template_hole 11),
                template_hole 10))
            ),
        template_predicate (template_app (template_hole 15, t_empty)),
        template_equation
         (template_app
           (template_var 2,
            template_app
             (template_app (template_hole 12, template_hole 11),
              template_hole 10)),
          template_app
           (template_app (template_hole 7, template_hole 6),
            template_hole 5)),
        template_predicate (template_app (template_hole 4, t_empty))],
       template_equation
        (template_app
          (template_var 2,
           template_app
            (template_app (template_hole 2, template_var 0),
             template_var 1)),
         template_app
          (template_app
            (template_hole 1,
             template_app
              (template_app (template_hole 0, template_var 2),
               template_var 0)),
           template_var 1))))]
