   [("Expectations.bounded_const", "Expectations.bounded (%x. ?c)",
     template_predicate (template_app (template_hole 0, t_empty))),
    ("Expectations.embed_bool_bounded",
     "Expectations.bounded \<guillemotleft> ?P \<guillemotright>",
     template_predicate
      (
         template_app
          (template_hole 1, template_app (template_hole 0, template_var 0))
         )),
    ("Expectations.embed_bool_nneg",
     "nneg \<guillemotleft> ?P \<guillemotright>",
     template_predicate
      (
         template_app
          (template_hole 1, template_app (template_hole 0, template_var 0))
         )),
    ("Expectations.standard_sound",
     "sound \<guillemotleft> ?P \<guillemotright>",
     template_predicate
      (
         template_app
          (template_hole 1, template_app (template_hole 0, template_var 0))
         )),
    ("Expectations.unitary_embed",
     "unitary \<guillemotleft> ?P \<guillemotright>",
     template_predicate
      (
         template_app
          (template_hole 1, template_app (template_hole 0, template_var 0))
         )),
    ("Expectations.embed_bool_bounded_by_1",
     "bounded_by 1 \<guillemotleft> ?P \<guillemotright>",
     template_predicate
      (
         template_app
          (template_app (template_hole 2, template_hole 1),
           template_app (template_hole 0, template_var 0))
         )),
    ("Expectations.negate_negate", "\<N> (\<N> ?P) = ?P",
     template_equation
      (template_app
        (template_hole 0, template_app (template_hole 0, template_var 0)),
       template_var 0)),
    ("Expectations.bound_of_const", "bound_of (%x. ?c) = ?c",
     template_equation
      (template_app (template_hole 0, t_empty), template_var 0)),
    ("Expectations.embed_ge_0",
     "0 <= \<guillemotleft> ?G \<guillemotright> ?s",
     template_inequation
      (less_equals, template_hole 1,
       template_app
        (template_app (template_hole 0, template_var 1), template_var 0))),
    ("Expectations.pconj_nneg", "0 <= ?a .& ?b",
     template_inequation
      (less_equals, template_hole 1,
       template_app
        (template_app (template_hole 0, template_var 1), template_var 0))),
    ("Expectations.embed_le_1",
     "\<guillemotleft> ?G \<guillemotright> ?s <= 1",
     template_inequation
      (less_equals,
       template_app
        (template_app (template_hole 1, template_var 1), template_var 0),
       template_hole 0)),
    ("Expectations.exp_conj_nneg", "%s. 0 \<tturnstile> ?P && ?Q",
     template_inequation
      (less_equals, t_empty,
       template_app
        (template_app (template_hole 0, template_var 1), template_var 0))),
    ("Expectations.sound_bounded", "sound ?P ==> Expectations.bounded ?P",
     template_implication
      ([template_predicate
         (template_app (template_hole 1, template_var 0))],
       template_predicate
        (template_app (template_hole 0, template_var 0)))),
    ("Expectations.sound_nneg", "sound ?P ==> nneg ?P",
     template_implication
      ([template_predicate
         (template_app (template_hole 1, template_var 0))],
       template_predicate
        (template_app (template_hole 0, template_var 0)))),
    ("Expectations.unitary_sound", "unitary ?P ==> sound ?P",
     template_implication
      ([template_predicate
         (template_app (template_hole 1, template_var 0))],
       template_predicate
        (template_app (template_hole 0, template_var 0)))),
    ("Expectations.exp_conj_comm", "?a && ?b = ?b && ?a",
     template_equation
      (template_app
        (template_app (template_hole 0, template_var 1), template_var 0),
       template_app
        (template_app (template_hole 0, template_var 0), template_var 1))),
    ("Expectations.nneg_const", "nneg (%x. ?c) = ((0::?'b) <= ?c)",
     template_equation
      (template_app (template_hole 2, t_empty),
       template_app
        (template_app (template_hole 1, template_hole 0), template_var 0))),
    ("Expectations.pconj_comm", "?a .& ?b = ?b .& ?a",
     template_equation
      (template_app
        (template_app (template_hole 0, template_var 1), template_var 0),
       template_app
        (template_app (template_hole 0, template_var 0), template_var 1))),
    ("Expectations.embed_le_1_alt",
     "0 <= 1 - \<guillemotleft> ?G \<guillemotright> ?s",
     template_inequation
      (less_equals, template_hole 3,
       template_app
        (template_app (template_hole 2, template_hole 1),
         template_app
          (template_app (template_hole 0, template_var 1),
           template_var 0)))),
    ("Expectations.unitary_bound", "unitary ?P ==> bounded_by 1 ?P",
     template_implication
      ([template_predicate
         (template_app (template_hole 2, template_var 0))],
       template_predicate
        (
           template_app
            (template_app (template_hole 1, template_hole 0),
             template_var 0)
           ))),
    ("Expectations.bounded_by_imp_bounded",
     "bounded_by ?b ?P ==> Expectations.bounded ?P",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 1, template_var 1),
              template_var 0)
            )],
       template_predicate
        (template_app (template_hole 0, template_var 0)))),
    ("Expectations.exp_conj_idem",
     "\<guillemotleft> ?P \<guillemotright> &&
      \<guillemotleft> ?P \<guillemotright> =
      \<guillemotleft> ?P \<guillemotright>",
     template_equation
      (template_app
        (template_app
          (template_hole 1, template_app (template_hole 0, template_var 0)),
         template_app (template_hole 0, template_var 0)),
       template_app (template_hole 0, template_var 0))),
    ("Expectations.bounded_bdd_above",
     "Expectations.bounded ?P ==> bdd_above (range ?P)",
     template_implication
      ([template_predicate
         (template_app (template_hole 3, template_var 0))],
       template_predicate
        (
           template_app
            (template_hole 2,
             template_app
              (template_app (template_hole 1, template_var 0),
               template_hole 0))
           ))),
    ("Expectations.bounded_by_bound_of",
     "Expectations.bounded ?P ==> bounded_by (bound_of ?P) ?P",
     template_implication
      ([template_predicate
         (template_app (template_hole 2, template_var 0))],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 1,
               template_app (template_hole 0, template_var 0)),
             template_var 0)
           ))),
    ("Expectations.nneg_bdd_below", "nneg ?P ==> bdd_below (range ?P)",
     template_implication
      ([template_predicate
         (template_app (template_hole 3, template_var 0))],
       template_predicate
        (
           template_app
            (template_hole 2,
             template_app
              (template_app (template_hole 1, template_var 0),
               template_hole 0))
           ))),
    ("Expectations.nneg_o", "nneg ?P ==> nneg (?P o ?f)",
     template_implication
      ([template_predicate
         (template_app (template_hole 2, template_var 1))],
       template_predicate
        (
           template_app
            (template_hole 1,
             template_app
              (template_app (template_hole 0, template_var 1),
               template_var 0))
           ))),
    ("Expectations.nnegD", "nneg ?P ==> (0::?'b) <= ?P ?x",
     template_implication
      ([template_predicate
         (template_app (template_hole 2, template_var 1))],
       template_inequation
        (less_equals, template_hole 0,
         template_app (template_var 1, template_var 0)))),
    ("Expectations.nnegD2", "nneg ?P ==> (%s. 0::?'b) <= ?P",
     template_implication
      ([template_predicate
         (template_app (template_hole 2, template_var 0))],
       template_inequation (less_equals, t_empty, template_var 0))),
    ("Expectations.sound_o", "sound ?P ==> sound (?P o ?f)",
     template_implication
      ([template_predicate
         (template_app (template_hole 2, template_var 1))],
       template_predicate
        (
           template_app
            (template_hole 1,
             template_app
              (template_app (template_hole 0, template_var 1),
               template_var 0))
           ))),
    ("Expectations.bound_of_sound", "sound ?P ==> 0 <= bound_of ?P",
     template_implication
      ([template_predicate
         (template_app (template_hole 3, template_var 0))],
       template_inequation
        (less_equals, template_hole 1,
         template_app (template_hole 0, template_var 0)))),
    ("Expectations.unitary_comp", "unitary ?P ==> unitary (?P o ?f)",
     template_implication
      ([template_predicate
         (template_app (template_hole 2, template_var 1))],
       template_predicate
        (
           template_app
            (template_hole 1,
             template_app
              (template_app (template_hole 0, template_var 1),
               template_var 0))
           ))),
    ("Expectations.negateI", "~ ?P ?s ==> \<N> ?P ?s",
     template_implication
      ([template_negation
         (
            template_predicate
             (template_app (template_var 1, template_var 0))
            )],
       template_predicate
        (
           template_app
            (template_app (template_hole 0, template_var 1), template_var 0)
           ))),
    ("Expectations.eq_entails", "?P = ?Q ==> ?P \<tturnstile> ?Q",
     template_implication
      ([template_equation (template_var 1, template_var 0)],
       template_inequation (less_equals, template_var 1, template_var 0))),
    ("Expectations.const_sound", "0 <= ?c ==> sound (%s. ?c)",
     template_implication
      ([template_inequation (less_equals, template_hole 1, template_var 0)],
       template_predicate (template_app (template_hole 0, t_empty)))),
    ("Expectations.nnegI2", "(%s. 0::?'b) <= ?P ==> nneg ?P",
     template_implication
      ([template_inequation (less_equals, t_empty, template_var 0)],
       template_predicate
        (template_app (template_hole 0, template_var 0)))),
    ("Expectations.embed_o",
     "\<guillemotleft> ?P \<guillemotright> o ?f =
      \<guillemotleft> ?P o ?f \<guillemotright>",
     template_equation
      (template_app
        (template_app
          (template_hole 3, template_app (template_hole 2, template_var 1)),
         template_var 0),
       template_app
        (template_hole 1,
         template_app
          (template_app (template_hole 0, template_var 1),
           template_var 0)))),
    ("Expectations.bound_of_greater",
     "Expectations.bounded ?P ==> ?P ?x <= bound_of ?P",
     template_implication
      ([template_predicate
         (template_app (template_hole 2, template_var 1))],
       template_inequation
        (less_equals, template_app (template_var 1, template_var 0),
         template_app (template_hole 0, template_var 1)))),
    ("Expectations.le_bound_of",
     "Expectations.bounded ?f ==> ?f ?x <= bound_of ?f",
     template_implication
      ([template_predicate
         (template_app (template_hole 2, template_var 1))],
       template_inequation
        (less_equals, template_app (template_var 1, template_var 0),
         template_app (template_hole 0, template_var 1)))),
    ("Expectations.eval_embed_true",
     "?P ?s ==> \<guillemotleft> ?P \<guillemotright> ?s = 1",
     template_implication
      ([template_predicate (template_app (template_var 1, template_var 0))],
       template_equation
        (template_app
          (template_app (template_hole 1, template_var 1), template_var 0),
         template_hole 0))),
    ("Expectations.expect_1_I",
     "?P ?x ==> 1 <= \<guillemotleft> ?P \<guillemotright> ?x",
     template_implication
      ([template_predicate (template_app (template_var 1, template_var 0))],
       template_inequation
        (less_equals, template_hole 1,
         template_app
          (template_app (template_hole 0, template_var 1),
           template_var 0)))),
    ("Expectations.bounded_byD2",
     "bounded_by ?b ?P ==> ?P \<tturnstile> %s. ?b",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 1, template_var 1),
              template_var 0)
            )],
       template_inequation (less_equals, template_var 0, t_empty))),
    ("Expectations.bound_of_least",
     "bounded_by ?b ?P ==> bound_of ?P <= ?b",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 2, template_var 1),
              template_var 0)
            )],
       template_inequation
        (less_equals, template_app (template_hole 0, template_var 0),
         template_var 1))),
    ("Expectations.bounded_byD", "bounded_by ?b ?P ==> ?P ?x <= ?b",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 1, template_var 2),
              template_var 1)
            )],
       template_inequation
        (less_equals, template_app (template_var 1, template_var 0),
         template_var 2))),
    ("Expectations.bounded_by_const", "?c <= ?b ==> bounded_by ?b (%x. ?c)",
     template_implication
      ([template_inequation (less_equals, template_var 1, template_var 0)],
       template_predicate
        (
           template_app
            (template_app (template_hole 0, template_var 0), t_empty)
           ))),
    ("Expectations.bounded_byI2",
     "?P \<tturnstile> %s. ?b ==> bounded_by ?b ?P",
     template_implication
      ([template_inequation (less_equals, template_var 1, t_empty)],
       template_predicate
        (
           template_app
            (template_app (template_hole 0, template_var 0), template_var 1)
           ))),
    ("Expectations.negate_embed",
     "\<guillemotleft> \<N> ?P \<guillemotright> ?s =
      1 - \<guillemotleft> ?P \<guillemotright> ?s",
     template_equation
      (template_app
        (template_app
          (template_hole 3, template_app (template_hole 2, template_var 1)),
         template_var 0),
       template_app
        (template_app (template_hole 1, template_hole 0),
         template_app
          (template_app (template_hole 3, template_var 1),
           template_var 0)))),
    ("Expectations.embed_bool_cancel",
     "\<guillemotleft> ?G \<guillemotright> ?s *
      \<guillemotleft> \<N> ?G \<guillemotright> ?s =
      0",
     template_equation
      (template_app
        (template_app
          (template_hole 3,
           template_app
            (template_app (template_hole 2, template_var 1),
             template_var 0)),
         template_app
          (template_app
            (template_hole 2,
             template_app (template_hole 1, template_var 1)),
           template_var 0)),
       template_hole 0)),
    ("Expectations.exp_conj_1_right", "nneg ?A ==> ?A && (%_. 1) = ?A",
     template_implication
      ([template_predicate
         (template_app (template_hole 3, template_var 0))],
       template_equation
        (template_app
          (template_app (template_hole 1, template_var 0), t_empty),
         template_var 0))),
    ("Expectations.eval_nembed_true",
     "?P ?s ==> \<guillemotleft> \<N> ?P \<guillemotright> ?s = 0",
     template_implication
      ([template_predicate (template_app (template_var 1, template_var 0))],
       template_equation
        (template_app
          (template_app
            (template_hole 2,
             template_app (template_hole 1, template_var 1)),
           template_var 0),
         template_hole 0))),
    ("Expectations.bounded_by_o",
     "bounded_by ?b ?P ==> bounded_by ?b (?P o ?f)",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 2, template_var 2),
              template_var 1)
            )],
       template_predicate
        (
           template_app
            (template_app (template_hole 1, template_var 2),
             template_app
              (template_app (template_hole 0, template_var 1),
               template_var 0))
           ))),
    ("Expectations.eval_embed_false",
     "~ ?P ?s ==> \<guillemotleft> ?P \<guillemotright> ?s = 0",
     template_implication
      ([template_negation
         (
            template_predicate
             (template_app (template_var 1, template_var 0))
            )],
       template_equation
        (template_app
          (template_app (template_hole 1, template_var 1), template_var 0),
         template_hole 0))),
    ("Expectations.entailsD", "?P \<tturnstile> ?Q ==> ?P ?s <= ?Q ?s",
     template_implication
      ([template_inequation (less_equals, template_var 2, template_var 1)],
       template_inequation
        (less_equals, template_app (template_var 2, template_var 0),
         template_app (template_var 1, template_var 0)))),
    ("Expectations.pconj_lone", "0 <= ?b ==> 1 .& ?b = ?b",
     template_implication
      ([template_inequation (less_equals, template_hole 3, template_var 0)],
       template_equation
        (template_app
          (template_app (template_hole 1, template_hole 0), template_var 0),
         template_var 0))),
    ("Expectations.pconj_rone", "0 <= ?b ==> ?b .& 1 = ?b",
     template_implication
      ([template_inequation (less_equals, template_hole 3, template_var 0)],
       template_equation
        (template_app
          (template_app (template_hole 1, template_var 0), template_hole 0),
         template_var 0))),
    ("Expectations.pconj_lzero", "?b <= 1 ==> 0 .& ?b = 0",
     template_implication
      ([template_inequation (less_equals, template_var 0, template_hole 3)],
       template_equation
        (template_app
          (template_app (template_hole 1, template_hole 0), template_var 0),
         template_hole 0))),
    ("Expectations.pconj_rzero", "?b <= 1 ==> ?b .& 0 = 0",
     template_implication
      ([template_inequation (less_equals, template_var 0, template_hole 3)],
       template_equation
        (template_app
          (template_app (template_hole 1, template_var 0), template_hole 0),
         template_hole 0))),
    ("Expectations.nnegI", "(!!x. (0::?'b) <= ?P x) ==> nneg ?P",
     template_implication
      ([template_predicate (template_app (template_hole 4, t_empty))],
       template_predicate
        (template_app (template_hole 0, template_var 0)))),
    ("Expectations.soundI",
     "[| Expectations.bounded ?P; nneg ?P |] ==> sound ?P",
     template_implication
      ([template_predicate (template_app (template_hole 2, template_var 0)),
        template_predicate
         (template_app (template_hole 1, template_var 0))],
       template_predicate
        (template_app (template_hole 0, template_var 0)))),
    ("Expectations.pconj_idem",
     "\<guillemotleft> ?P \<guillemotright> ?s .&
      \<guillemotleft> ?P \<guillemotright> ?s =
      \<guillemotleft> ?P \<guillemotright> ?s",
     template_equation
      (template_app
        (template_app
          (template_hole 1,
           template_app
            (template_app (template_hole 0, template_var 1),
             template_var 0)),
         template_app
          (template_app (template_hole 0, template_var 1), template_var 0)),
       template_app
        (template_app (template_hole 0, template_var 1), template_var 0))),
    ("Expectations.embed_bool_idem",
     "\<guillemotleft> ?P \<guillemotright> ?s *
      \<guillemotleft> ?P \<guillemotright> ?s =
      \<guillemotleft> ?P \<guillemotright> ?s",
     template_equation
      (template_app
        (template_app
          (template_hole 1,
           template_app
            (template_app (template_hole 0, template_var 1),
             template_var 0)),
         template_app
          (template_app (template_hole 0, template_var 1), template_var 0)),
       template_app
        (template_app (template_hole 0, template_var 1), template_var 0))),
    ("Expectations.exp_conj_top_right",
     "sound ?P ==> ?P && \<guillemotleft> %_. True \<guillemotright> = ?P",
     template_implication
      ([template_predicate
         (template_app (template_hole 4, template_var 0))],
       template_equation
        (template_app
          (template_app (template_hole 2, template_var 0),
           template_app (template_hole 1, t_empty)),
         template_var 0))),
    ("Expectations.exp_conj_top_left",
     "sound ?P ==> \<guillemotleft> %_. True \<guillemotright> && ?P = ?P",
     template_implication
      ([template_predicate
         (template_app (template_hole 4, template_var 0))],
       template_equation
        (template_app
          (template_app
            (template_hole 2, template_app (template_hole 1, t_empty)),
           template_var 0),
         template_var 0))),
    ("Expectations.eval_nembed_false",
     "~ ?P ?s ==> \<guillemotleft> \<N> ?P \<guillemotright> ?s = 1",
     template_implication
      ([template_negation
         (
            template_predicate
             (template_app (template_var 1, template_var 0))
            )],
       template_equation
        (template_app
          (template_app
            (template_hole 2,
             template_app (template_hole 1, template_var 1)),
           template_var 0),
         template_hole 0))),
    ("Expectations.bounded_byI", "(!!x. ?P x <= ?b) ==> bounded_by ?b ?P",
     template_implication
      ([template_predicate (template_app (template_hole 3, t_empty))],
       template_predicate
        (
           template_app
            (template_app (template_hole 0, template_var 0), template_var 1)
           ))),
    ("Expectations.unitaryI2",
     "[| nneg ?P; bounded_by 1 ?P |] ==> unitary ?P",
     template_implication
      ([template_predicate (template_app (template_hole 3, template_var 0)),
        template_predicate
         (
            template_app
             (template_app (template_hole 2, template_hole 1),
              template_var 0)
            )],
       template_predicate
        (template_app (template_hole 0, template_var 0)))),
    ("Expectations.unitaryI",
     "[| sound ?P; bounded_by 1 ?P |] ==> unitary ?P",
     template_implication
      ([template_predicate (template_app (template_hole 3, template_var 0)),
        template_predicate
         (
            template_app
             (template_app (template_hole 2, template_hole 1),
              template_var 0)
            )],
       template_predicate
        (template_app (template_hole 0, template_var 0)))),
    ("Expectations.soundI2", "[| bounded_by ?b ?P; nneg ?P |] ==> sound ?P",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 2, template_var 1),
              template_var 0)
            ),
        template_predicate
         (template_app (template_hole 1, template_var 0))],
       template_predicate
        (template_app (template_hole 0, template_var 0)))),
    ("Expectations.exp_conj_rzero",
     "bounded_by 1 ?P ==> ?P && (%s. 0) = (%s. 0)",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 4, template_hole 3),
              template_var 0)
            )],
       template_equation
        (template_app
          (template_app (template_hole 1, template_var 0), t_empty),
         t_empty))),
    ("Expectations.exp_conj_mono_left",
     "?P \<tturnstile> ?Q ==> ?P && ?R \<tturnstile> ?Q && ?R",
     template_implication
      ([template_inequation (less_equals, template_var 2, template_var 1)],
       template_inequation
        (less_equals,
         template_app
          (template_app (template_hole 0, template_var 2), template_var 0),
         template_app
          (template_app (template_hole 0, template_var 1),
           template_var 0)))),
    ("Expectations.exp_conj_mono_right",
     "?Q \<tturnstile> ?R ==> ?P && ?Q \<tturnstile> ?P && ?R",
     template_implication
      ([template_inequation (less_equals, template_var 2, template_var 1)],
       template_inequation
        (less_equals,
         template_app
          (template_app (template_hole 0, template_var 0), template_var 2),
         template_app
          (template_app (template_hole 0, template_var 0),
           template_var 1)))),
    ("Expectations.pconj_less_one", "?a + ?b < 1 ==> ?a .& ?b = 0",
     template_implication
      ([template_inequation
         (less_than,
          template_app
           (template_app (template_hole 4, template_var 1), template_var 0),
          template_hole 3)],
       template_equation
        (template_app
          (template_app (template_hole 1, template_var 1), template_var 0),
         template_hole 0))),
    ("Expectations.bound_of_leI", "(!!x. ?P x <= ?c) ==> bound_of ?P <= ?c",
     template_implication
      ([template_predicate (template_app (template_hole 3, t_empty))],
       template_inequation
        (less_equals, template_app (template_hole 0, template_var 1),
         template_var 0))),
    ("Expectations.entailsI", "(!!s. ?P s <= ?Q s) ==> ?P \<tturnstile> ?Q",
     template_implication
      ([template_predicate (template_app (template_hole 3, t_empty))],
       template_inequation (less_equals, template_var 1, template_var 0))),
    ("Expectations.nneg_bound_nneg",
     "[| Expectations.bounded ?P; nneg ?P |] ==> 0 <= bound_of ?P",
     template_implication
      ([template_predicate (template_app (template_hole 4, template_var 0)),
        template_predicate
         (template_app (template_hole 3, template_var 0))],
       template_inequation
        (less_equals, template_hole 1,
         template_app (template_hole 0, template_var 0)))),
    ("Expectations.exp_conj_sound",
     "[| sound ?P; sound ?Q |] ==> sound (?P && ?Q)",
     template_implication
      ([template_predicate (template_app (template_hole 1, template_var 1)),
        template_predicate
         (template_app (template_hole 1, template_var 0))],
       template_predicate
        (
           template_app
            (template_hole 1,
             template_app
              (template_app (template_hole 0, template_var 1),
               template_var 0))
           ))),
    ("Expectations.exp_conj_unitary",
     "[| unitary ?P; unitary ?Q |] ==> unitary (?P && ?Q)",
     template_implication
      ([template_predicate (template_app (template_hole 1, template_var 1)),
        template_predicate
         (template_app (template_hole 1, template_var 0))],
       template_predicate
        (
           template_app
            (template_hole 1,
             template_app
              (template_app (template_hole 0, template_var 1),
               template_var 0))
           ))),
    ("Expectations.nneg_bounded_by_nneg",
     "[| bounded_by ?b ?P; nneg ?P |] ==> 0 <= ?b",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 3, template_var 1),
              template_var 0)
            ),
        template_predicate
         (template_app (template_hole 2, template_var 0))],
       template_inequation (less_equals, template_hole 0, template_var 1))),
    ("Expectations.bounded_by_nneg",
     "[| bounded_by ?b ?P; nneg ?P |] ==> 0 <= ?b",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 3, template_var 1),
              template_var 0)
            ),
        template_predicate
         (template_app (template_hole 2, template_var 0))],
       template_inequation (less_equals, template_hole 0, template_var 1))),
    ("Expectations.exp_conj_o_distrib",
     "?P && ?Q o ?f = (?P o ?f) && (?Q o ?f)",
     template_equation
      (template_app
        (template_app
          (template_hole 2,
           template_app
            (template_app (template_hole 1, template_var 2),
             template_var 1)),
         template_var 0),
       template_app
        (template_app
          (template_hole 0,
           template_app
            (template_app (template_hole 2, template_var 2),
             template_var 0)),
         template_app
          (template_app (template_hole 2, template_var 1),
           template_var 0)))),
    ("Expectations.exp_conj_std_split",
     "\<guillemotleft> %s. ?P s & ?Q s \<guillemotright> =
      \<guillemotleft> ?P \<guillemotright> &&
      \<guillemotleft> ?Q \<guillemotright>",
     template_equation
      (template_app (template_hole 2, t_empty),
       template_app
        (template_app
          (template_hole 0, template_app (template_hole 2, template_var 1)),
         template_app (template_hole 2, template_var 0)))),
    ("Expectations.bounded_by_bound_of_alt",
     "[| Expectations.bounded ?P; bound_of ?P = ?a |] ==> bounded_by ?a ?P",
     template_implication
      ([template_predicate (template_app (template_hole 3, template_var 1)),
        template_equation
         (template_app (template_hole 1, template_var 1), template_var 0)],
       template_predicate
        (
           template_app
            (template_app (template_hole 0, template_var 0), template_var 1)
           ))),
    ("Expectations.bounded_by_mono",
     "[| bounded_by ?a ?P; ?a <= ?b |] ==> bounded_by ?b ?P",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 1, template_var 2),
              template_var 1)
            ),
        template_inequation (less_equals, template_var 2, template_var 0)],
       template_predicate
        (
           template_app
            (template_app (template_hole 1, template_var 0), template_var 1)
           ))),
    ("Expectations.bounded_by_mono_alt",
     "[| bounded_by ?b ?Q; ?P \<tturnstile> ?Q |] ==> bounded_by ?b ?P",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 1, template_var 2),
              template_var 1)
            ),
        template_inequation (less_equals, template_var 0, template_var 1)],
       template_predicate
        (
           template_app
            (template_app (template_hole 1, template_var 2), template_var 0)
           ))),
    ("Expectations.entails_trans",
     "[| ?P \<tturnstile> ?Q; ?Q \<tturnstile> ?R |]
      ==> ?P \<tturnstile> ?R",
     template_implication
      ([template_inequation (less_equals, template_var 2, template_var 1),
        template_inequation (less_equals, template_var 1, template_var 0)],
       template_inequation (less_equals, template_var 2, template_var 0))),
    ("Expectations.unitary_const",
     "[| 0 <= ?c; ?c <= 1 |] ==> unitary (%s. ?c)",
     template_implication
      ([template_inequation (less_equals, template_hole 2, template_var 0),
        template_inequation (less_equals, template_var 0, template_hole 1)],
       template_predicate (template_app (template_hole 0, t_empty)))),
    ("Expectations.entails_implies",
     "[| \<guillemotleft> ?P \<guillemotright> \<tturnstile> \<guillemotleft> ?Q \<guillemotright>;
         ?P ?s |]
      ==> ?Q ?s",
     template_implication
      ([template_inequation
         (less_equals, template_app (template_hole 0, template_var 2),
          template_app (template_hole 0, template_var 1)),
        template_predicate (template_app (template_var 2, template_var 0))],
       template_predicate (template_app (template_var 1, template_var 0)))),
    ("Expectations.min_pconj",
     "min ?a ?b .& min ?c ?d <= min (?a .& ?c) (?b .& ?d)",
     template_inequation
      (less_equals,
       template_app
        (template_app
          (template_hole 1,
           template_app
            (template_app (template_hole 0, template_var 3),
             template_var 2)),
         template_app
          (template_app (template_hole 0, template_var 1), template_var 0)),
       template_app
        (template_app
          (template_hole 0,
           template_app
            (template_app (template_hole 1, template_var 3),
             template_var 1)),
         template_app
          (template_app (template_hole 1, template_var 2),
           template_var 0)))),
    ("Expectations.implies_entails",
     "(!!s. ?P s ==> ?Q s) ==>
      \<guillemotleft> ?P \<guillemotright> \<tturnstile> \<guillemotleft> ?Q \<guillemotright>",
     template_implication
      ([template_predicate (template_app (template_hole 3, t_empty))],
       template_inequation
        (less_equals, template_app (template_hole 0, template_var 1),
         template_app (template_hole 0, template_var 0)))),
    ("Expectations.sound_sum",
     "[| sound ?P; sound ?Q |] ==> sound (%s. ?P s + ?Q s)",
     template_implication
      ([template_predicate (template_app (template_hole 1, template_var 1)),
        template_predicate
         (template_app (template_hole 1, template_var 0))],
       template_predicate (template_app (template_hole 1, t_empty)))),
    ("Expectations.mult_sound",
     "[| sound ?P; sound ?Q |] ==> sound (%s. ?P s * ?Q s)",
     template_implication
      ([template_predicate (template_app (template_hole 1, template_var 1)),
        template_predicate
         (template_app (template_hole 1, template_var 0))],
       template_predicate (template_app (template_hole 1, t_empty)))),
    ("Expectations.div_sound",
     "[| sound ?P; 0 < ?c |] ==> sound (%s. ?P s / ?c)",
     template_implication
      ([template_predicate (template_app (template_hole 3, template_var 1)),
        template_inequation (less_than, template_hole 1, template_var 0)],
       template_predicate (template_app (template_hole 3, t_empty)))),
    ("Expectations.sc_bounded",
     "[| sound ?P; 0 <= ?c |] ==> Expectations.bounded (%x. ?c * ?P x)",
     template_implication
      ([template_predicate (template_app (template_hole 4, template_var 1)),
        template_inequation (less_equals, template_hole 2, template_var 0)],
       template_predicate (template_app (template_hole 1, t_empty)))),
    ("Expectations.sc_sound",
     "[| sound ?P; 0 <= ?c |] ==> sound (%s. ?c * ?P s)",
     template_implication
      ([template_predicate (template_app (template_hole 3, template_var 1)),
        template_inequation (less_equals, template_hole 1, template_var 0)],
       template_predicate (template_app (template_hole 3, t_empty)))),
    ("Expectations.tminus_sound",
     "[| sound ?P; 0 <= ?c |] ==> sound (%s. ?P s \<ominus> ?c)",
     template_implication
      ([template_predicate (template_app (template_hole 3, template_var 1)),
        template_inequation (less_equals, template_hole 1, template_var 0)],
       template_predicate (template_app (template_hole 3, t_empty)))),
    ("Expectations.unitary_mult",
     "[| unitary ?A; unitary ?B |] ==> unitary (%s. ?A s * ?B s)",
     template_implication
      ([template_predicate (template_app (template_hole 1, template_var 1)),
        template_predicate
         (template_app (template_hole 1, template_var 0))],
       template_predicate (template_app (template_hole 1, t_empty)))),
    ("Expectations.exp_conj_bounded_by",
     "[| bounded_by 1 ?P; bounded_by 1 ?Q |] ==> bounded_by 1 (?P && ?Q)",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 2, template_hole 1),
              template_var 1)
            ),
        template_predicate
         (
            template_app
             (template_app (template_hole 2, template_hole 1),
              template_var 0)
            )],
       template_predicate
        (
           template_app
            (template_app (template_hole 2, template_hole 1),
             template_app
              (template_app (template_hole 0, template_var 1),
               template_var 0))
           ))),
    ("Expectations.pconj_bconj",
     "\<guillemotleft> ?a \<guillemotright> ?s .&
      \<guillemotleft> ?b \<guillemotright> ?s =
      \<guillemotleft> %s. ?a s & ?b s \<guillemotright> ?s",
     template_equation
      (template_app
        (template_app
          (template_hole 2,
           template_app
            (template_app (template_hole 1, template_var 2),
             template_var 1)),
         template_app
          (template_app (template_hole 1, template_var 0), template_var 1)),
       template_app
        (template_app (template_hole 1, t_empty), template_var 1))),
    ("Expectations.pconj_ge_one", "1 <= ?a + ?b ==> ?a .& ?b = ?a + ?b - 1",
     template_implication
      ([template_inequation
         (less_equals, template_hole 4,
          template_app
           (template_app (template_hole 3, template_var 1),
            template_var 0))],
       template_equation
        (template_app
          (template_app (template_hole 1, template_var 1), template_var 0),
         template_app
          (template_app
            (template_hole 0,
             template_app
              (template_app (template_hole 3, template_var 1),
               template_var 0)),
           template_hole 4)))),
    ("Expectations.sum_sound",
     "ALL x:?S. sound (?P x) ==> sound (%s. SUM x:?S. ?P x s)",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 2, template_var 1), t_empty)
            )],
       template_predicate (template_app (template_hole 1, t_empty)))),
    ("Expectations.embed_split",
     "?f ?s =
      \<guillemotleft> ?P \<guillemotright> ?s * ?f ?s +
      \<guillemotleft> \<N> ?P \<guillemotright> ?s * ?f ?s",
     template_equation
      (template_app (template_var 2, template_var 1),
       template_app
        (template_app
          (template_hole 3,
           template_app
            (template_app
              (template_hole 2,
               template_app
                (template_app (template_hole 1, template_var 0),
                 template_var 1)),
             template_app (template_var 2, template_var 1))),
         template_app
          (template_app
            (template_hole 2,
             template_app
              (template_app
                (template_hole 1,
                 template_app (template_hole 0, template_var 0)),
               template_var 1)),
           template_app (template_var 2, template_var 1))))),
    ("Expectations.entails_frame",
     "[| ?P \<tturnstile> ?R; ?Q \<tturnstile> ?S |]
      ==> ?P && ?Q \<tturnstile> ?R && ?S",
     template_implication
      ([template_inequation (less_equals, template_var 3, template_var 2),
        template_inequation (less_equals, template_var 1, template_var 0)],
       template_inequation
        (less_equals,
         template_app
          (template_app (template_hole 0, template_var 3), template_var 1),
         template_app
          (template_app (template_hole 0, template_var 2),
           template_var 0)))),
    ("Expectations.pconj_mono",
     "[| ?a <= ?b; ?c <= ?d |] ==> ?a .& ?c <= ?b .& ?d",
     template_implication
      ([template_inequation (less_equals, template_var 3, template_var 2),
        template_inequation (less_equals, template_var 1, template_var 0)],
       template_inequation
        (less_equals,
         template_app
          (template_app (template_hole 0, template_var 3), template_var 1),
         template_app
          (template_app (template_hole 0, template_var 2),
           template_var 0)))),
    ("Expectations.bound_of_mono",
     "[| ?P \<tturnstile> ?Q; Expectations.bounded ?P;
         Expectations.bounded ?Q |]
      ==> bound_of ?P <= bound_of ?Q",
     template_implication
      ([template_inequation (less_equals, template_var 1, template_var 0),
        template_predicate (template_app (template_hole 2, template_var 1)),
        template_predicate
         (template_app (template_hole 2, template_var 0))],
       template_inequation
        (less_equals, template_app (template_hole 0, template_var 1),
         template_app (template_hole 0, template_var 0)))),
    ("Expectations.sc_bounded_by",
     "[| sound ?P; 0 <= ?c |]
      ==> bounded_by (?c * bound_of ?P) (%x. ?c * ?P x)",
     template_implication
      ([template_predicate (template_app (template_hole 5, template_var 1)),
        template_inequation (less_equals, template_hole 3, template_var 0)],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 2,
               template_app
                (template_app (template_hole 1, template_var 0),
                 template_app (template_hole 0, template_var 1))),
             t_empty)
           ))),
    ("Expectations.sc_bound",
     "[| sound ?P; 0 <= ?c |]
      ==> ?c * bound_of ?P = bound_of (%x. ?c * ?P x)",
     template_implication
      ([template_predicate (template_app (template_hole 5, template_var 1)),
        template_inequation (less_equals, template_hole 3, template_var 0)],
       template_equation
        (template_app
          (template_app (template_hole 1, template_var 0),
           template_app (template_hole 0, template_var 1)),
         template_app (template_hole 0, t_empty)))),
    ("Expectations.bounded_by_add",
     "[| bounded_by ?a ?P; bounded_by ?b ?Q |]
      ==> bounded_by (?a + ?b) (%s. ?P s + ?Q s)",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 1, template_var 3),
              template_var 2)
            ),
        template_predicate
         (
            template_app
             (template_app (template_hole 1, template_var 1),
              template_var 0)
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 1,
               template_app
                (template_app (template_hole 0, template_var 3),
                 template_var 1)),
             t_empty)
           ))),
    ("Expectations.exp_conj_assoc",
     "[| unitary ?P; unitary ?Q; unitary ?R |]
      ==> ?P && (?Q && ?R) = ?P && ?Q && ?R",
     template_implication
      ([template_predicate (template_app (template_hole 2, template_var 2)),
        template_predicate (template_app (template_hole 2, template_var 1)),
        template_predicate
         (template_app (template_hole 2, template_var 0))],
       template_equation
        (template_app
          (template_app (template_hole 0, template_var 2),
           template_app
            (template_app (template_hole 0, template_var 1),
             template_var 0)),
         template_app
          (template_app
            (template_hole 0,
             template_app
              (template_app (template_hole 0, template_var 2),
               template_var 1)),
           template_var 0)))),
    ("Expectations.unit_mult",
     "[| sound ?P; bounded_by 1 ?P; sound ?Q; bounded_by 1 ?Q |]
      ==> bounded_by 1 (%s. ?P s * ?Q s)",
     template_implication
      ([template_predicate (template_app (template_hole 3, template_var 1)),
        template_predicate
         (
            template_app
             (template_app (template_hole 2, template_hole 1),
              template_var 1)
            ),
        template_predicate (template_app (template_hole 3, template_var 0)),
        template_predicate
         (
            template_app
             (template_app (template_hole 2, template_hole 1),
              template_var 0)
            )],
       template_predicate
        (
           template_app
            (template_app (template_hole 2, template_hole 1), t_empty)
           ))),
    ("Expectations.bounded_by_mult",
     "[| sound ?P; bounded_by ?a ?P; sound ?Q; bounded_by ?b ?Q |]
      ==> bounded_by (?a * ?b) (%s. ?P s * ?Q s)",
     template_implication
      ([template_predicate (template_app (template_hole 2, template_var 3)),
        template_predicate
         (
            template_app
             (template_app (template_hole 1, template_var 2),
              template_var 3)
            ),
        template_predicate (template_app (template_hole 2, template_var 1)),
        template_predicate
         (
            template_app
             (template_app (template_hole 1, template_var 0),
              template_var 1)
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 1,
               template_app
                (template_app (template_hole 0, template_var 2),
                 template_var 0)),
             t_empty)
           ))),
    ("Expectations.pconj_assoc",
     "[| 0 <= ?a; ?a <= 1; 0 <= ?b; ?b <= 1; 0 <= ?c; ?c <= 1 |]
      ==> ?a .& (?b .& ?c) = ?a .& ?b .& ?c",
     template_implication
      ([template_inequation (less_equals, template_hole 3, template_var 2),
        template_inequation (less_equals, template_var 2, template_hole 2),
        template_inequation (less_equals, template_hole 3, template_var 1),
        template_inequation (less_equals, template_var 1, template_hole 2),
        template_inequation (less_equals, template_hole 3, template_var 0),
        template_inequation (less_equals, template_var 0, template_hole 2)],
       template_equation
        (template_app
          (template_app (template_hole 0, template_var 2),
           template_app
            (template_app (template_hole 0, template_var 1),
             template_var 0)),
         template_app
          (template_app
            (template_hole 0,
             template_app
              (template_app (template_hole 0, template_var 2),
               template_var 1)),
           template_var 0)))),
    ("Expectations.pentails_cases",
     "[| !!x. ?P x \<tturnstile> ?Q x; !!s. EX x. ?P (x s) s = 1;
         !!x. ?P x && ?R \<tturnstile> ?Q x && ?S; sound ?R; sound ?S;
         !!x. bounded_by 1 (?Q x) |]
      ==> ?R \<tturnstile> ?S",
     template_implication
      ([template_predicate (template_app (template_hole 9, t_empty)),
        template_predicate (template_app (template_hole 6, t_empty)),
        template_predicate (template_app (template_hole 9, t_empty)),
        template_predicate (template_app (template_hole 1, template_var 1)),
        template_predicate (template_app (template_hole 1, template_var 0)),
        template_predicate (template_app (template_hole 9, t_empty))],
       template_inequation (less_equals, template_var 1, template_var 0)))]
