   [("Induction.gfp_exp_nneg", "nneg (gfp_exp ?t)",
     template_predicate
      (
         template_app
          (template_hole 1, template_app (template_hole 0, template_var 0))
         )),
    ("Induction.feasible_lfp_exp_sound",
     "feasible ?t ==> sound (lfp_exp ?t)",
     template_implication
      ([template_predicate
         (template_app (template_hole 2, template_var 0))],
       template_predicate
        (
           template_app
            (template_hole 1,
             template_app (template_hole 0, template_var 0))
           ))),
    ("Induction.gfp_trans_unitary",
     "unitary ?P ==> unitary (gfp_trans ?T ?P)",
     template_implication
      ([template_predicate
         (template_app (template_hole 1, template_var 1))],
       template_predicate
        (
           template_app
            (template_hole 1,
             template_app
              (template_app (template_hole 0, template_var 0),
               template_var 1))
           ))),
    ("Induction.feasible_Sup_trans",
     "ALL t:?S. feasible t ==> feasible (Sup_trans ?S)",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 2, template_var 0), t_empty)
            )],
       template_predicate
        (
           template_app
            (template_hole 1,
             template_app (template_hole 0, template_var 0))
           ))),
    ("Induction.lfp_exp_sound",
     "[| ?t ?R \<tturnstile> ?R; sound ?R |] ==> sound (lfp_exp ?t)",
     template_implication
      ([template_inequation
         (less_equals, template_app (template_var 1, template_var 0),
          template_var 0),
        template_predicate
         (template_app (template_hole 1, template_var 0))],
       template_predicate
        (
           template_app
            (template_hole 1,
             template_app (template_hole 0, template_var 1))
           ))),
    ("Induction.gfp_exp_unitary",
     "(!!P. unitary P ==> unitary (?t P)) ==> unitary (gfp_exp ?t)",
     template_implication
      ([template_predicate (template_app (template_hole 3, t_empty))],
       template_predicate
        (
           template_app
            (template_hole 1,
             template_app (template_hole 0, template_var 0))
           ))),
    ("Induction.lfp_exp_unitary",
     "(!!P. unitary P ==> unitary (?t P)) ==> unitary (lfp_exp ?t)",
     template_implication
      ([template_predicate (template_app (template_hole 3, t_empty))],
       template_predicate
        (
           template_app
            (template_hole 1,
             template_app (template_hole 0, template_var 0))
           ))),
    ("Induction.gfp_exp_upperbound",
     "[| ?P \<tturnstile> ?t ?P; unitary ?P |]
      ==> ?P \<tturnstile> gfp_exp ?t",
     template_implication
      ([template_inequation
         (less_equals, template_var 1,
          template_app (template_var 0, template_var 1)),
        template_predicate
         (template_app (template_hole 1, template_var 1))],
       template_inequation
        (less_equals, template_var 1,
         template_app (template_hole 0, template_var 0)))),
    ("Induction.lfp_exp_lowerbound",
     "[| ?t ?P \<tturnstile> ?P; sound ?P |]
      ==> lfp_exp ?t \<tturnstile> ?P",
     template_implication
      ([template_inequation
         (less_equals, template_app (template_var 1, template_var 0),
          template_var 0),
        template_predicate
         (template_app (template_hole 1, template_var 0))],
       template_inequation
        (less_equals, template_app (template_hole 0, template_var 1),
         template_var 0))),
    ("Induction.gfp_exp_bound",
     "(!!P. unitary P ==> unitary (?t P)) ==> bounded_by 1 (gfp_exp ?t)",
     template_implication
      ([template_predicate (template_app (template_hole 5, t_empty))],
       template_predicate
        (
           template_app
            (template_app (template_hole 2, template_hole 1),
             template_app (template_hole 0, template_var 0))
           ))),
    ("Induction.lfp_exp_bound",
     "(!!P. unitary P ==> unitary (?t P)) ==> bounded_by 1 (lfp_exp ?t)",
     template_implication
      ([template_predicate (template_app (template_hole 5, t_empty))],
       template_predicate
        (
           template_app
            (template_app (template_hole 2, template_hole 1),
             template_app (template_hole 0, template_var 0))
           ))),
    ("Induction.Inf_exp_lower",
     "[| ?P : ?S; ALL P:?S. nneg P |] ==> Inf_exp ?S \<tturnstile> ?P",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 4, template_var 1),
              template_var 0)
            ),
        template_predicate
         (
            template_app
             (template_app (template_hole 3, template_var 0), t_empty)
            )],
       template_inequation
        (less_equals, template_app (template_hole 0, template_var 0),
         template_var 1))),
    ("Induction.Sup_exp_least",
     "[| ALL P:?S. P \<tturnstile> ?Q; nneg ?Q |]
      ==> Sup_exp ?S \<tturnstile> ?Q",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 3, template_var 1), t_empty)
            ),
        template_predicate
         (template_app (template_hole 1, template_var 0))],
       template_inequation
        (less_equals, template_app (template_hole 0, template_var 1),
         template_var 0))),
    ("Induction.Sup_exp_upper",
     "[| ?P : ?S; ALL P:?S. bounded_by ?b P |]
      ==> ?P \<tturnstile> Sup_exp ?S",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 4, template_var 2),
              template_var 1)
            ),
        template_predicate
         (
            template_app
             (template_app (template_hole 3, template_var 1), t_empty)
            )],
       template_inequation
        (less_equals, template_var 2,
         template_app (template_hole 0, template_var 1)))),
    ("Induction.Inf_exp_greatest",
     "[| ?S ~= {}; ALL P:?S. ?Q \<tturnstile> P |]
      ==> ?Q \<tturnstile> Inf_exp ?S",
     template_implication
      ([template_negation
         (template_equation (template_var 1, template_hole 3)),
        template_predicate
         (
            template_app
             (template_app (template_hole 2, template_var 1), t_empty)
            )],
       template_inequation
        (less_equals, template_var 0,
         template_app (template_hole 0, template_var 1)))),
    ("Induction.Inf_trans_greatest",
     "[| ?S ~= {}; ALL t:?S. ALL P. le_trans ?u t |]
      ==> le_trans ?u (Inf_trans ?S)",
     template_implication
      ([template_negation
         (template_equation (template_var 1, template_hole 4)),
        template_predicate
         (
            template_app
             (template_app (template_hole 3, template_var 1), t_empty)
            )],
       template_predicate
        (
           template_app
            (template_app (template_hole 1, template_var 0),
             template_app (template_hole 0, template_var 1))
           ))),
    ("Induction.lfp_trans_lowerbound",
     "[| le_trans (?T ?t) ?t; !!P. sound P ==> sound (?t P) |]
      ==> le_trans (lfp_trans ?T) ?t",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_hole 3,
                template_app (template_var 1, template_var 0)),
              template_var 0)
            ),
        template_predicate (template_app (template_hole 2, t_empty))],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 3,
               template_app (template_hole 0, template_var 1)),
             template_var 0)
           ))),
    ("Induction.gfp_trans_upperbound",
     "[| le_utrans ?t (?T ?t); !!P. unitary P ==> unitary (?t P) |]
      ==> le_utrans ?t (gfp_trans ?T)",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 3, template_var 1),
              template_app (template_var 0, template_var 1))
            ),
        template_predicate (template_app (template_hole 2, t_empty))],
       template_predicate
        (
           template_app
            (template_app (template_hole 3, template_var 1),
             template_app (template_hole 0, template_var 0))
           ))),
    ("Induction.Inf_trans_lower",
     "[| ?t : ?S; ALL u:?S. ALL P. sound P --> sound (u P) |]
      ==> le_trans (Inf_trans ?S) ?t",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 6, template_var 1),
              template_var 0)
            ),
        template_predicate
         (
            template_app
             (template_app (template_hole 5, template_var 0), t_empty)
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 1,
               template_app (template_hole 0, template_var 0)),
             template_var 1)
           ))),
    ("Induction.Sup_trans_upper",
     "[| ?t : ?S; ALL u:?S. ALL P. unitary P --> unitary (u P) |]
      ==> le_utrans ?t (Sup_trans ?S)",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 6, template_var 1),
              template_var 0)
            ),
        template_predicate
         (
            template_app
             (template_app (template_hole 5, template_var 0), t_empty)
            )],
       template_predicate
        (
           template_app
            (template_app (template_hole 1, template_var 1),
             template_app (template_hole 0, template_var 0))
           ))),
    ("Induction.Inf_utrans_lower",
     "[| ?t : ?S; ALL t:?S. ALL P. unitary P --> unitary (t P) |]
      ==> le_utrans (Inf_utrans ?S) ?t",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 6, template_var 1),
              template_var 0)
            ),
        template_predicate
         (
            template_app
             (template_app (template_hole 5, template_var 0), t_empty)
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 1,
               template_app (template_hole 0, template_var 0)),
             template_var 1)
           ))),
    ("Induction.Sup_trans_least",
     "[| ALL t:?S. le_utrans t ?u; !!P. unitary P ==> unitary (?u P) |]
      ==> le_utrans (Sup_trans ?S) ?u",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 4, template_var 1), t_empty)
            ),
        template_predicate (template_app (template_hole 2, t_empty))],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 3,
               template_app (template_hole 0, template_var 1)),
             template_var 0)
           ))),
    ("Induction.Inf_utrans_greatest",
     "[| !!P. unitary P ==> unitary (?t P); ALL u:?S. le_utrans ?t u |]
      ==> le_utrans ?t (Inf_utrans ?S)",
     template_implication
      ([template_predicate (template_app (template_hole 5, t_empty)),
        template_predicate
         (
            template_app
             (template_app (template_hole 2, template_var 0), t_empty)
            )],
       template_predicate
        (
           template_app
            (template_app (template_hole 1, template_var 1),
             template_app (template_hole 0, template_var 0))
           ))),
    ("Induction.gfp_exp_least",
     "[| !!P. [| P \<tturnstile> ?t P; unitary P |] ==> P \<tturnstile> ?Q;
         unitary ?Q |]
      ==> gfp_exp ?t \<tturnstile> ?Q",
     template_implication
      ([template_predicate (template_app (template_hole 4, t_empty)),
        template_predicate
         (template_app (template_hole 1, template_var 0))],
       template_inequation
        (less_equals, template_app (template_hole 0, template_var 1),
         template_var 0))),
    ("Induction.lfp_trans_sound",
     "[| sound ?P; le_trans (?T ?v) ?v; !!P. sound P ==> sound (?v P) |]
      ==> sound (lfp_trans ?T ?P)",
     template_implication
      ([template_predicate (template_app (template_hole 3, template_var 2)),
        template_predicate
         (
            template_app
             (template_app
               (template_hole 2,
                template_app (template_var 1, template_var 0)),
              template_var 0)
            ),
        template_predicate (template_app (template_hole 1, t_empty))],
       template_predicate
        (
           template_app
            (template_hole 3,
             template_app
              (template_app (template_hole 0, template_var 1),
               template_var 2))
           ))),
    ("Induction.Sup_exp_sound",
     "[| !!P. P : ?S ==> sound P; !!P. P : ?S ==> bounded_by ?b P |]
      ==> sound (Sup_exp ?S)",
     template_implication
      ([template_predicate (template_app (template_hole 5, t_empty)),
        template_predicate (template_app (template_hole 5, t_empty))],
       template_predicate
        (
           template_app
            (template_hole 2,
             template_app (template_hole 0, template_var 1))
           ))),
    ("Induction.lfp_exp_unfold",
     "[| !!P. sound P ==> sound (?t P); mono_trans ?t;
         ?t ?R \<tturnstile> ?R; sound ?R |]
      ==> lfp_exp ?t = ?t (lfp_exp ?t)",
     template_implication
      ([template_predicate (template_app (template_hole 6, t_empty)),
        template_predicate (template_app (template_hole 3, template_var 1)),
        template_inequation
         (less_equals, template_app (template_var 1, template_var 0),
          template_var 0),
        template_predicate
         (template_app (template_hole 4, template_var 0))],
       template_equation
        (template_app (template_hole 0, template_var 1),
         template_app
          (template_var 1,
           template_app (template_hole 0, template_var 1))))),
    ("Induction.lfp_exp_lemma3",
     "[| !!P. sound P ==> sound (?t P); mono_trans ?t;
         ?t ?R \<tturnstile> ?R; sound ?R |]
      ==> lfp_exp ?t \<tturnstile> ?t (lfp_exp ?t)",
     template_implication
      ([template_predicate (template_app (template_hole 5, t_empty)),
        template_predicate (template_app (template_hole 2, template_var 1)),
        template_inequation
         (less_equals, template_app (template_var 1, template_var 0),
          template_var 0),
        template_predicate
         (template_app (template_hole 3, template_var 0))],
       template_inequation
        (less_equals, template_app (template_hole 0, template_var 1),
         template_app
          (template_var 1,
           template_app (template_hole 0, template_var 1))))),
    ("Induction.lfp_exp_lemma2",
     "[| !!P. sound P ==> sound (?t P); mono_trans ?t;
         ?t ?R \<tturnstile> ?R; sound ?R |]
      ==> ?t (lfp_exp ?t) \<tturnstile> lfp_exp ?t",
     template_implication
      ([template_predicate (template_app (template_hole 5, t_empty)),
        template_predicate (template_app (template_hole 2, template_var 1)),
        template_inequation
         (less_equals, template_app (template_var 1, template_var 0),
          template_var 0),
        template_predicate
         (template_app (template_hole 3, template_var 0))],
       template_inequation
        (less_equals,
         template_app
          (template_var 1, template_app (template_hole 0, template_var 1)),
         template_app (template_hole 0, template_var 1)))),
    ("Induction.lfp_exp_greatest",
     "[| !!P. [| ?t P \<tturnstile> P; sound P |] ==> ?Q \<tturnstile> P;
         sound ?Q; ?t ?R \<tturnstile> ?R; sound ?R |]
      ==> ?Q \<tturnstile> lfp_exp ?t",
     template_implication
      ([template_predicate (template_app (template_hole 4, t_empty)),
        template_predicate (template_app (template_hole 1, template_var 1)),
        template_inequation
         (less_equals, template_app (template_var 2, template_var 0),
          template_var 0),
        template_predicate
         (template_app (template_hole 1, template_var 0))],
       template_inequation
        (less_equals, template_var 1,
         template_app (template_hole 0, template_var 2)))),
    ("Induction.lfp_trans_unitary",
     "[| unitary ?P; le_trans (?T ?v) ?v; !!P. sound P ==> sound (?v P);
         le_trans (?T (%P s. bound_of P)) (%P s. bound_of P) |]
      ==> unitary (lfp_trans ?T ?P)",
     template_implication
      ([template_predicate (template_app (template_hole 5, template_var 2)),
        template_predicate
         (
            template_app
             (template_app
               (template_hole 4,
                template_app (template_var 1, template_var 0)),
              template_var 0)
            ),
        template_predicate (template_app (template_hole 3, t_empty)),
        template_predicate
         (
            template_app
             (template_app
               (template_hole 4, template_app (template_var 1, t_empty)),
              t_empty)
            )],
       template_predicate
        (
           template_app
            (template_hole 5,
             template_app
              (template_app (template_hole 0, template_var 1),
               template_var 2))
           ))),
    ("Induction.gfp_trans_least",
     "[| !!t. [| le_utrans t (?T t); !!P. unitary P ==> unitary (t P) |]
              ==> le_utrans t ?u;
         !!P. unitary P ==> unitary (?u P) |]
      ==> le_utrans (gfp_trans ?T) ?u",
     template_implication
      ([template_predicate (template_app (template_hole 5, t_empty)),
        template_predicate (template_app (template_hole 2, t_empty))],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 3,
               template_app (template_hole 0, template_var 1)),
             template_var 0)
           ))),
    ("Induction.gfp_exp_unfold",
     "[| !!P. unitary P ==> unitary (?t P);
         !!P Q.
            [| unitary P; unitary Q; P \<tturnstile> Q |]
            ==> ?t P \<tturnstile> ?t Q |]
      ==> gfp_exp ?t = ?t (gfp_exp ?t)",
     template_implication
      ([template_predicate (template_app (template_hole 5, t_empty)),
        template_predicate (template_app (template_hole 5, t_empty))],
       template_equation
        (template_app (template_hole 0, template_var 0),
         template_app
          (template_var 0,
           template_app (template_hole 0, template_var 0))))),
    ("Induction.gfp_exp_lemma2",
     "[| !!P. unitary P ==> unitary (?t P);
         !!P Q.
            [| unitary P; unitary Q; P \<tturnstile> Q |]
            ==> ?t P \<tturnstile> ?t Q |]
      ==> gfp_exp ?t \<tturnstile> ?t (gfp_exp ?t)",
     template_implication
      ([template_predicate (template_app (template_hole 4, t_empty)),
        template_predicate (template_app (template_hole 4, t_empty))],
       template_inequation
        (less_equals, template_app (template_hole 0, template_var 0),
         template_app
          (template_var 0,
           template_app (template_hole 0, template_var 0))))),
    ("Induction.gfp_exp_lemma3",
     "[| !!P. unitary P ==> unitary (?t P);
         !!P Q.
            [| unitary P; unitary Q; P \<tturnstile> Q |]
            ==> ?t P \<tturnstile> ?t Q |]
      ==> ?t (gfp_exp ?t) \<tturnstile> gfp_exp ?t",
     template_implication
      ([template_predicate (template_app (template_hole 4, t_empty)),
        template_predicate (template_app (template_hole 4, t_empty))],
       template_inequation
        (less_equals,
         template_app
          (template_var 0, template_app (template_hole 0, template_var 0)),
         template_app (template_hole 0, template_var 0)))),
    ("Induction.Sup_trans_upper2",
     "[| ?t : ?S;
         ALL u:?S.
            ALL P.
               nneg P & bounded_by ?b P -->
               nneg (u P) & bounded_by ?b (u P);
         nneg ?P; bounded_by ?b ?P |]
      ==> ?t ?P \<tturnstile> Sup_trans ?S ?P",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 8, template_var 3),
              template_var 2)
            ),
        template_predicate
         (
            template_app
             (template_app (template_hole 7, template_var 2), t_empty)
            ),
        template_predicate (template_app (template_hole 3, template_var 0)),
        template_predicate
         (
            template_app
             (template_app (template_hole 2, template_var 1),
              template_var 0)
            )],
       template_inequation
        (less_equals, template_app (template_var 3, template_var 0),
         template_app
          (template_app (template_hole 0, template_var 2),
           template_var 0)))),
    ("Induction.lfp_trans_greatest",
     "[| !!t P.
            [| le_trans (?T t) t; !!P. sound P ==> sound (t P) |]
            ==> le_trans ?u t;
         !!P. sound P ==> sound (?v P); le_trans (?T ?v) ?v |]
      ==> le_trans ?u (lfp_trans ?T)",
     template_implication
      ([template_predicate (template_app (template_hole 6, t_empty)),
        template_predicate (template_app (template_hole 2, t_empty)),
        template_predicate
         (
            template_app
             (template_app
               (template_hole 3,
                template_app (template_var 2, template_var 0)),
              template_var 0)
            )],
       template_predicate
        (
           template_app
            (template_app (template_hole 3, template_var 1),
             template_app (template_hole 0, template_var 2))
           ))),
    ("Induction.gfp_trans_unfold",
     "[| !!t u.
            [| le_utrans t u; !!P. unitary P ==> unitary (t P);
               !!P. unitary P ==> unitary (u P) |]
            ==> le_utrans (?T t) (?T u);
         !!t P.
            [| !!Q. unitary Q ==> unitary (t Q); unitary P |]
            ==> unitary (?T t P) |]
      ==> equiv_utrans (gfp_trans ?T) (?T (gfp_trans ?T))",
     template_implication
      ([template_predicate (template_app (template_hole 6, t_empty)),
        template_predicate (template_app (template_hole 6, t_empty))],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 1,
               template_app (template_hole 0, template_var 0)),
             template_app
              (template_var 0,
               template_app (template_hole 0, template_var 0)))
           ))),
    ("Induction.gfp_trans_lemma2",
     "[| !!t u.
            [| le_utrans t u; !!P. unitary P ==> unitary (t P);
               !!P. unitary P ==> unitary (u P) |]
            ==> le_utrans (?T t) (?T u);
         !!t P.
            [| !!Q. unitary Q ==> unitary (t Q); unitary P |]
            ==> unitary (?T t P) |]
      ==> le_utrans (gfp_trans ?T) (?T (gfp_trans ?T))",
     template_implication
      ([template_predicate (template_app (template_hole 5, t_empty)),
        template_predicate (template_app (template_hole 5, t_empty))],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 3,
               template_app (template_hole 0, template_var 0)),
             template_app
              (template_var 0,
               template_app (template_hole 0, template_var 0)))
           ))),
    ("Induction.gfp_trans_lemma3",
     "[| !!t u.
            [| le_utrans t u; !!P. unitary P ==> unitary (t P);
               !!P. unitary P ==> unitary (u P) |]
            ==> le_utrans (?T t) (?T u);
         !!t P.
            [| !!Q. unitary Q ==> unitary (t Q); unitary P |]
            ==> unitary (?T t P) |]
      ==> le_utrans (?T (gfp_trans ?T)) (gfp_trans ?T)",
     template_implication
      ([template_predicate (template_app (template_hole 5, t_empty)),
        template_predicate (template_app (template_hole 5, t_empty))],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 3,
               template_app
                (template_var 0,
                 template_app (template_hole 0, template_var 0))),
             template_app (template_hole 0, template_var 0))
           ))),
    ("Induction.Sup_trans_least2",
     "[| ALL t:?S.
            ALL P. nneg P --> bounded_by ?b P --> t P \<tturnstile> ?u P;
         ALL u:?S.
            ALL P.
               nneg P & bounded_by ?b P -->
               nneg (u P) & bounded_by ?b (u P);
         nneg ?P; bounded_by ?b ?P;
         !!P. [| nneg P; bounded_by ?b P |] ==> nneg (?u P) |]
      ==> Sup_trans ?S ?P \<tturnstile> ?u ?P",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 8, template_var 3), t_empty)
            ),
        template_predicate
         (
            template_app
             (template_app (template_hole 8, template_var 3), t_empty)
            ),
        template_predicate (template_app (template_hole 5, template_var 0)),
        template_predicate
         (
            template_app
             (template_app (template_hole 4, template_var 2),
              template_var 0)
            ),
        template_predicate (template_app (template_hole 1, t_empty))],
       template_inequation
        (less_equals,
         template_app
          (template_app (template_hole 0, template_var 3), template_var 0),
         template_app (template_var 1, template_var 0)))),
    ("Induction.lfp_trans_unfold",
     "[| !!t u.
            [| le_trans t u; !!P. sound P ==> sound (t P);
               !!P. sound P ==> sound (u P) |]
            ==> le_trans (?T t) (?T u);
         !!t P.
            [| !!Q. sound Q ==> sound (t Q); sound P |] ==> sound (?T t P);
         le_trans (?T ?v) ?v; !!P. sound P ==> sound (?v P) |]
      ==> equiv_trans (lfp_trans ?T) (?T (lfp_trans ?T))",
     template_implication
      ([template_predicate (template_app (template_hole 6, t_empty)),
        template_predicate (template_app (template_hole 6, t_empty)),
        template_predicate
         (
            template_app
             (template_app
               (template_hole 4,
                template_app (template_var 1, template_var 0)),
              template_var 0)
            ),
        template_predicate (template_app (template_hole 3, t_empty))],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 1,
               template_app (template_hole 0, template_var 1)),
             template_app
              (template_var 1,
               template_app (template_hole 0, template_var 1)))
           ))),
    ("Induction.lfp_trans_lemma3",
     "[| !!t u.
            [| le_trans t u; !!P. sound P ==> sound (t P);
               !!P. sound P ==> sound (u P) |]
            ==> le_trans (?T t) (?T u);
         !!t P.
            [| !!Q. sound Q ==> sound (t Q); sound P |] ==> sound (?T t P);
         le_trans (?T ?v) ?v; !!P. sound P ==> sound (?v P) |]
      ==> le_trans (lfp_trans ?T) (?T (lfp_trans ?T))",
     template_implication
      ([template_predicate (template_app (template_hole 5, t_empty)),
        template_predicate (template_app (template_hole 5, t_empty)),
        template_predicate
         (
            template_app
             (template_app
               (template_hole 3,
                template_app (template_var 1, template_var 0)),
              template_var 0)
            ),
        template_predicate (template_app (template_hole 2, t_empty))],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 3,
               template_app (template_hole 0, template_var 1)),
             template_app
              (template_var 1,
               template_app (template_hole 0, template_var 1)))
           ))),
    ("Induction.lfp_trans_lemma2",
     "[| !!t u.
            [| le_trans t u; !!P. sound P ==> sound (t P);
               !!P. sound P ==> sound (u P) |]
            ==> le_trans (?T t) (?T u);
         !!t P.
            [| !!Q. sound Q ==> sound (t Q); sound P |] ==> sound (?T t P);
         le_trans (?T ?v) ?v; !!P. sound P ==> sound (?v P) |]
      ==> le_trans (?T (lfp_trans ?T)) (lfp_trans ?T)",
     template_implication
      ([template_predicate (template_app (template_hole 5, t_empty)),
        template_predicate (template_app (template_hole 5, t_empty)),
        template_predicate
         (
            template_app
             (template_app
               (template_hole 3,
                template_app (template_var 1, template_var 0)),
              template_var 0)
            ),
        template_predicate (template_app (template_hole 2, t_empty))],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 3,
               template_app
                (template_var 1,
                 template_app (template_hole 0, template_var 1))),
             template_app (template_hole 0, template_var 1))
           ))),
    ("Induction.lfp_pulldown",
     "[| !!u P. sound P ==> ?T u P = ?t P (u P);
         !!P Q. [| sound P; sound Q |] ==> sound (?t P Q);
         !!P. sound P ==> mono_trans (?t P);
         !!t u.
            [| le_trans t u; !!P. sound P ==> sound (t P);
               !!P. sound P ==> sound (u P) |]
            ==> le_trans (?T t) (?T u);
         !!t P.
            [| !!Q. sound Q ==> sound (t Q); sound P |] ==> sound (?T t P);
         le_trans (?T ?v) ?v; !!P. sound P ==> sound (?v P); sound ?P |]
      ==> lfp_trans ?T ?P = lfp_exp (?t ?P)",
     template_implication
      ([template_predicate (template_app (template_hole 8, t_empty)),
        template_predicate (template_app (template_hole 7, t_empty)),
        template_predicate (template_app (template_hole 7, t_empty)),
        template_predicate (template_app (template_hole 8, t_empty)),
        template_predicate (template_app (template_hole 8, t_empty)),
        template_predicate
         (
            template_app
             (template_app
               (template_hole 2,
                template_app (template_var 3, template_var 1)),
              template_var 1)
            ),
        template_predicate (template_app (template_hole 7, t_empty)),
        template_predicate
         (template_app (template_hole 5, template_var 0))],
       template_equation
        (template_app
          (template_app (template_hole 1, template_var 3), template_var 0),
         template_app
          (template_hole 0,
           template_app (template_var 2, template_var 0))))),
    ("Induction.gfp_pulldown",
     "[| !!u P. unitary P ==> ?T u P = ?t P (u P);
         !!t P.
            [| !!Q. unitary Q ==> unitary (t Q); unitary P |]
            ==> unitary (?T t P);
         !!P Q. [| unitary P; unitary Q |] ==> unitary (?t P Q);
         !!P Q R.
            [| unitary P; unitary Q; unitary R; Q \<tturnstile> R |]
            ==> ?t P Q \<tturnstile> ?t P R;
         unitary ?P;
         !!t u.
            [| le_utrans t u; !!P. unitary P ==> unitary (t P);
               !!P. unitary P ==> unitary (u P) |]
            ==> le_utrans (?T t) (?T u) |]
      ==> gfp_trans ?T ?P = gfp_exp (?t ?P)",
     template_implication
      ([template_predicate (template_app (template_hole 8, t_empty)),
        template_predicate (template_app (template_hole 8, t_empty)),
        template_predicate (template_app (template_hole 7, t_empty)),
        template_predicate (template_app (template_hole 7, t_empty)),
        template_predicate (template_app (template_hole 5, template_var 0)),
        template_predicate (template_app (template_hole 8, t_empty))],
       template_equation
        (template_app
          (template_app (template_hole 1, template_var 2), template_var 0),
         template_app
          (template_hole 0,
           template_app (template_var 1, template_var 0)))))]
