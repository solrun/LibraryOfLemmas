Loading theory "HOL-Combinatorics.Transposition" (required by "Draft.AlgebraMoreTemplates" via "Draft.Algebra" via "Draft.WellDefined" via "Draft.Healthiness" via "Draft.Embedding" via "Draft.Misc" via "HOL-Analysis.Multivariate_Analysis" via "HOL-Analysis.Ordered_Euclidean_Space" via "HOL-Analysis.Convex_Euclidean_Space" via "HOL-Analysis.Topology_Euclidean_Space" via "HOL-Analysis.Elementary_Normed_Spaces" via "HOL-Analysis.Cartesian_Space")
Loading theory "HOL-Library.FuncSet" (required by "Draft.AlgebraMoreTemplates" via "Draft.Algebra" via "Draft.WellDefined" via "Draft.Healthiness" via "Draft.Embedding" via "Draft.Misc" via "HOL-Analysis.Multivariate_Analysis" via "HOL-Analysis.Ordered_Euclidean_Space" via "HOL-Analysis.Convex_Euclidean_Space" via "HOL-Analysis.Topology_Euclidean_Space" via "HOL-Analysis.Elementary_Normed_Spaces")
Loading theory "HOL-Library.Cancellation" (required by "Draft.AlgebraMoreTemplates" via "Draft.Algebra" via "Draft.WellDefined" via "Draft.Healthiness" via "Draft.Embedding" via "Draft.Misc" via "HOL-Analysis.Multivariate_Analysis" via "HOL-Analysis.Determinants" via "HOL-Combinatorics.Permutations" via "HOL-Library.Multiset")
Loading theory "HOL-Library.Function_Algebras" (required by "Draft.AlgebraMoreTemplates" via "Draft.ExtrEqs" via "HOL-Library.BigO")
instantiation
  fun :: (type, plus) plus
  plus_fun == plus :: ('a => 'b) => ('a => 'b) => 'a => 'b
instantiation
  fun :: (type, zero) zero
  zero_fun == zero_class.zero :: 'a => 'b
instantiation
  fun :: (type, times) times
  times_fun == times :: ('a => 'b) => ('a => 'b) => 'a => 'b
instantiation
  fun :: (type, one) one
  one_fun == one_class.one :: 'a => 'b
### theory "HOL-Library.Function_Algebras"
### 0.116s elapsed time, 0.486s cpu time, 0.033s GC time
Loading theory "HOL-Library.Infinite_Set" (required by "Draft.AlgebraMoreTemplates" via "Draft.Algebra" via "Draft.WellDefined" via "Draft.Healthiness" via "Draft.Embedding" via "Draft.Misc" via "HOL-Analysis.Multivariate_Analysis" via "HOL-Analysis.Ordered_Euclidean_Space" via "HOL-Analysis.Convex_Euclidean_Space" via "HOL-Analysis.Convex" via "HOL-Analysis.Affine" via "HOL-Analysis.Linear_Algebra")
### theory "HOL-Combinatorics.Transposition"
### 0.137s elapsed time, 0.567s cpu time, 0.033s GC time
Loading theory "HOL-Library.Nat_Bijection" (required by "Draft.AlgebraMoreTemplates" via "Draft.ExtrEqs" via "HOL-Library.Stream")
Found termination order: "(%p. size (snd p)) <*mlex*> {}"
consts
  enumerate :: "'a set => nat => 'a"
signature CANCEL = sig val proc: Proof.context -> cterm -> thm option end
functor Cancel_Fun (Data: CANCEL_NUMERALS_DATA): CANCEL
Found termination order: "size_list size <*mlex*> {}"
signature CANCEL_DATA =
  sig
    val dest_coeff: term -> int * term
    val dest_sum: term -> term list
    val find_first_coeff: term -> term list -> int * term list
    val mk_coeff: int * term -> term
    val mk_sum: typ -> term list -> term
    val norm_ss1: simpset
    val norm_ss2: simpset
    val norm_tac: Proof.context -> tactic
    val numeral_simp_tac: Proof.context -> tactic
    val prove_conv:
       tactic list -> Proof.context -> thm list -> term * term -> thm option
    val simplify_meta_eq: Proof.context -> thm -> thm
    val trans_tac: Proof.context -> thm option -> tactic
  end
structure Cancel_Data: CANCEL_DATA
### theory "HOL-Library.Infinite_Set"
### 0.284s elapsed time, 1.120s cpu time, 0.152s GC time
Loading theory "HOL-Library.Old_Datatype" (required by "Draft.AlgebraMoreTemplates" via "Draft.Algebra" via "Draft.WellDefined" via "Draft.Healthiness" via "Draft.Embedding" via "Draft.Misc" via "HOL-Analysis.Multivariate_Analysis" via "HOL-Analysis.Ordered_Euclidean_Space" via "HOL-Analysis.Convex_Euclidean_Space" via "HOL-Analysis.Topology_Euclidean_Space" via "HOL-Analysis.Elementary_Normed_Spaces" via "HOL-Analysis.Elementary_Metric_Spaces" via "HOL-Analysis.Abstract_Topology_2" via "HOL-Analysis.Elementary_Topology" via "HOL-Library.Set_Idioms" via "HOL-Library.Countable_Set" via "HOL-Library.Countable")
### theory "HOL-Library.FuncSet"
### 0.401s elapsed time, 1.599s cpu time, 0.186s GC time
Loading theory "HOL-Library.Disjoint_Sets" (required by "Draft.AlgebraMoreTemplates" via "Draft.Algebra" via "Draft.WellDefined" via "Draft.Healthiness" via "Draft.Embedding" via "Draft.Misc" via "HOL-Analysis.Multivariate_Analysis" via "HOL-Analysis.Ordered_Euclidean_Space" via "HOL-Analysis.Convex_Euclidean_Space" via "HOL-Analysis.Topology_Euclidean_Space" via "HOL-Analysis.Elementary_Normed_Spaces" via "HOL-Analysis.Elementary_Metric_Spaces" via "HOL-Analysis.Abstract_Topology_2" via "HOL-Analysis.Elementary_Topology")
signature CANCEL_SIMPROCS =
  sig
    val diff_cancel: Proof.context -> cterm -> thm option
    val eq_cancel: Proof.context -> cterm -> thm option
    val less_cancel: Proof.context -> cterm -> thm option
    val less_eq_cancel: Proof.context -> cterm -> thm option
  end
structure Cancel_Simprocs: CANCEL_SIMPROCS
### theory "HOL-Library.Cancellation"
### 0.432s elapsed time, 1.721s cpu time, 0.186s GC time
Loading theory "HOL-Library.Multiset" (required by "Draft.AlgebraMoreTemplates" via "Draft.Algebra" via "Draft.WellDefined" via "Draft.Healthiness" via "Draft.Embedding" via "Draft.Misc" via "HOL-Analysis.Multivariate_Analysis" via "HOL-Analysis.Determinants" via "HOL-Combinatorics.Permutations")
### theory "HOL-Library.Nat_Bijection"
### 0.310s elapsed time, 1.221s cpu time, 0.152s GC time
Loading theory "HOL-Library.Stream" (required by "Draft.AlgebraMoreTemplates" via "Draft.ExtrEqs")
locale comm_monoid_set
  fixes f :: "'a => 'a => 'a"  (infixl \<open>\<^bold>*\<close> 70)
    and z :: "'a"  (\<open>\<^bold>1\<close>)
  assumes "comm_monoid_set (\<^bold>*) \<^bold>1"
instantiation
  multiset :: (type) cancel_comm_monoid_add
  zero_multiset == zero_class.zero :: 'a multiset
  minus_multiset == minus :: 'a multiset => 'a multiset => 'a multiset
  plus_multiset == plus :: 'a multiset => 'a multiset => 'a multiset
### theory "HOL-Library.Disjoint_Sets"
### 0.269s elapsed time, 1.053s cpu time, 0.186s GC time
Loading theory "HOL-Library.Phantom_Type" (required by "Draft.AlgebraMoreTemplates" via "Draft.Algebra" via "Draft.WellDefined" via "Draft.Healthiness" via "Draft.Embedding" via "Draft.Misc" via "HOL-Analysis.Multivariate_Analysis" via "HOL-Analysis.Ordered_Euclidean_Space" via "HOL-Analysis.Convex_Euclidean_Space" via "HOL-Analysis.Topology_Euclidean_Space" via "HOL-Analysis.Elementary_Normed_Spaces" via "HOL-Analysis.Cartesian_Space" via "HOL-Analysis.Finite_Cartesian_Product" via "HOL-Library.Numeral_Type" via "HOL-Library.Cardinality")
signature OLD_DATATYPE =
  sig
    val check_specs: spec list -> theory -> spec list * Proof.context
    type config = {quiet: bool, strict: bool}
    val default_config: config
    type descr =
       (int * (string * dtyp list * (string * dtyp list) list)) list
    val distinct_lemma: thm
    datatype dtyp
    = DtRec of int | DtTFree of string * sort | DtType of string * dtyp list
    type info =
       {case_cong: thm,
        case_cong_weak: thm,
        case_name: string,
        case_rewrites: thm list,
        descr: descr,
        distinct: thm list,
        exhaust: thm,
        index: int,
        induct: thm,
        inducts: thm list,
        inject: thm list,
        nchotomy: thm,
        rec_names: string list,
        rec_rewrites: thm list, split: thm, split_asm: thm}
    val read_specs: spec_cmd list -> theory -> spec list * Proof.context
    type spec =
       (binding * (string * sort) list * mixfix) *
       (binding * typ list * mixfix) list
    type spec_cmd =
       (binding * (string * string option) list * mixfix) *
       (binding * string list * mixfix) list
  end
structure Old_Datatype: OLD_DATATYPE
### theory "HOL-Library.Old_Datatype"
### 0.382s elapsed time, 1.505s cpu time, 0.186s GC time
Loading theory "HOL-Library.Product_Plus" (required by "Draft.AlgebraMoreTemplates" via "Draft.Algebra" via "Draft.WellDefined" via "Draft.Healthiness" via "Draft.Embedding" via "Draft.Misc" via "HOL-Analysis.Multivariate_Analysis" via "HOL-Analysis.Ordered_Euclidean_Space" via "HOL-Analysis.Convex_Euclidean_Space" via "HOL-Analysis.Convex" via "HOL-Analysis.Affine" via "HOL-Analysis.Linear_Algebra" via "HOL-Analysis.Euclidean_Space" via "HOL-Analysis.Product_Vector")
instantiation
  prod :: (zero, zero) zero
  zero_prod == zero_class.zero :: 'a * 'b
instantiation
  prod :: (plus, plus) plus
  plus_prod == plus :: 'a * 'b => 'a * 'b => 'a * 'b
instantiation
  prod :: (minus, minus) minus
  minus_prod == minus :: 'a * 'b => 'a * 'b => 'a * 'b
instantiation
  prod :: (uminus, uminus) uminus
  uminus_prod == uminus :: 'a * 'b => 'a * 'b
consts
  shift :: "'a list => 'a stream => 'a stream"
Proofs for coinductive predicate(s) "streamsp"
  Proving monotonicity ...
### theory "HOL-Library.Product_Plus"
### 0.278s elapsed time, 0.949s cpu time, 0.538s GC time
Loading theory "HOL-Library.Product_Order" (required by "Draft.AlgebraMoreTemplates" via "Draft.Algebra" via "Draft.WellDefined" via "Draft.Healthiness" via "Draft.Embedding" via "Draft.Misc" via "HOL-Analysis.Multivariate_Analysis" via "HOL-Analysis.Ordered_Euclidean_Space")
instantiation
  prod :: (ord, ord) ord
  less_eq_prod == less_eq :: 'a * 'b => 'a * 'b => bool
  less_prod == less :: 'a * 'b => 'a * 'b => bool
instantiation
  prod :: (inf, inf) inf
  inf_prod == inf :: 'a * 'b => 'a * 'b => 'a * 'b
consts
  snth :: "'a stream => nat => 'a"
instantiation
  prod :: (sup, sup) sup
  sup_prod == sup :: 'a * 'b => 'a * 'b => 'a * 'b
consts
  stake :: "nat => 'a stream => 'a list"
instantiation
  prod :: (top, top) top
  top_prod == top :: 'a * 'b
consts
  sdrop :: "nat => 'a stream => 'a stream"
instantiation
  prod :: (bot, bot) bot
  bot_prod == bot :: 'a * 'b
instantiation
  prod :: (Inf, Inf) Inf
  Inf_prod == Inf :: ('a * 'b) set => 'a * 'b
instantiation
  prod :: (Sup, Sup) Sup
  Sup_prod == Sup :: ('a * 'b) set => 'a * 'b
consts
  sfilter :: "('a => bool) => 'a stream => 'a stream"
consts
  cycle :: "'a list => 'a stream"
### theory "HOL-Library.Product_Order"
### 0.223s elapsed time, 0.878s cpu time, 0.107s GC time
Loading theory "HOL-Library.Set_Algebras" (required by "Draft.AlgebraMoreTemplates" via "Draft.ExtrEqs" via "HOL-Library.BigO")
instantiation
  set :: (plus) plus
  plus_set == plus :: 'a set => 'a set => 'a set
instantiation
  set :: (times) times
  times_set == times :: 'a set => 'a set => 'a set
consts
  siterate :: "('a => 'a) => 'a => 'a stream"
instantiation
  set :: (zero) zero
  zero_set == zero_class.zero :: 'a set
instantiation
  set :: (one) one
  one_set == one_class.one :: 'a set
consts
  flat :: "'a list stream => 'a stream"
### Partially applied constant "Multiset.inter_mset" on left hand side of equation, in theorem:
### semilattice_inf.Inf_fin (\<inter>#) (set (?x # ?xs)) ==
### fold (\<inter>#) ?xs ?x
consts
  sinterleave :: "'a stream => 'a stream => 'a stream"
consts
  szip :: "'a stream => 'b stream => ('a * 'b) stream"
### Partially applied constant "Multiset.union_mset" on left hand side of equation, in theorem:
### semilattice_sup.Sup_fin (\<union>#) (set (?x # ?xs)) ==
### fold (\<union>#) ?xs ?x
### theory "HOL-Library.Phantom_Type"
### 0.837s elapsed time, 3.159s cpu time, 0.790s GC time
Loading theory "HOL-Library.Cardinality" (required by "Draft.AlgebraMoreTemplates" via "Draft.Algebra" via "Draft.WellDefined" via "Draft.Healthiness" via "Draft.Embedding" via "Draft.Misc" via "HOL-Analysis.Multivariate_Analysis" via "HOL-Analysis.Ordered_Euclidean_Space" via "HOL-Analysis.Convex_Euclidean_Space" via "HOL-Analysis.Topology_Euclidean_Space" via "HOL-Analysis.Elementary_Normed_Spaces" via "HOL-Analysis.Cartesian_Space" via "HOL-Analysis.Finite_Cartesian_Product" via "HOL-Library.Numeral_Type")
consts
  smap2 :: "('a => 'b => 'c) => 'a stream => 'b stream => 'c stream"
### theory "HOL-Library.Set_Algebras"
### 0.227s elapsed time, 0.902s cpu time, 0.092s GC time
Loading theory "HOL-Library.Tree" (required by "Draft.AlgebraMoreTemplates" via "Draft.ExtrEqs" via "Draft.Templates")
### theory "HOL-Library.Stream"
### 1.108s elapsed time, 4.218s cpu time, 0.976s GC time
Loading theory "HOL-Library.Countable" (required by "Draft.AlgebraMoreTemplates" via "Draft.Algebra" via "Draft.WellDefined" via "Draft.Healthiness" via "Draft.Embedding" via "Draft.Misc" via "HOL-Analysis.Multivariate_Analysis" via "HOL-Analysis.Ordered_Euclidean_Space" via "HOL-Analysis.Convex_Euclidean_Space" via "HOL-Analysis.Topology_Euclidean_Space" via "HOL-Analysis.Elementary_Normed_Spaces" via "HOL-Analysis.Elementary_Metric_Spaces" via "HOL-Analysis.Abstract_Topology_2" via "HOL-Analysis.Elementary_Topology" via "HOL-Library.Set_Idioms" via "HOL-Library.Countable_Set")
### Additional type variable(s) in locale specification "CARD_1": 'a
class CARD_1 = type +
  assumes "CARD_1": "CARD('a) = 1"
signature MULTISET_SIMPROCS =
  sig
    val subset_cancel_msets: Proof.context -> cterm -> thm option
    val subseteq_cancel_msets: Proof.context -> cterm -> thm option
  end
structure Multiset_Simprocs: MULTISET_SIMPROCS
instantiation
  multiset :: (type) Inf
  Inf_multiset == Inf :: 'a multiset set => 'a multiset
### Additional type variable(s) in locale specification "card2": 'a
instantiation
  multiset :: (type) Sup
  Sup_multiset == Sup :: 'a multiset set => 'a multiset
class card2 = finite +
  assumes "two_le_card": "2 <= CARD('a)"
class finite_UNIV = type +
  fixes finite_UNIV :: "('a, bool) phantom"
  assumes "finite_UNIV": "finite_UNIV = Phantom('a) (finite UNIV)"
class card_UNIV = finite_UNIV +
  fixes card_UNIV :: "('a, nat) phantom"
  assumes "card_UNIV": "card_UNIV_class.card_UNIV = Phantom('a) CARD('a)"
instantiation
  nat :: card_UNIV
  card_UNIV_nat == card_UNIV_class.card_UNIV :: (nat, nat) phantom
  finite_UNIV_nat == finite_UNIV :: (nat, bool) phantom
instantiation
  int :: card_UNIV
  card_UNIV_int == card_UNIV_class.card_UNIV :: (int, nat) phantom
  finite_UNIV_int == finite_UNIV :: (int, bool) phantom
instantiation
  multiset :: (type) size
  size_multiset == size :: 'a multiset => nat
instantiation
  natural :: card_UNIV
  card_UNIV_natural == card_UNIV_class.card_UNIV :: (natural, nat) phantom
  finite_UNIV_natural == finite_UNIV :: (natural, bool) phantom
instantiation
  integer :: card_UNIV
  card_UNIV_integer == card_UNIV_class.card_UNIV :: (integer, nat) phantom
  finite_UNIV_integer == finite_UNIV :: (integer, bool) phantom
instantiation
  list :: (type) card_UNIV
  card_UNIV_list == card_UNIV_class.card_UNIV :: ('a list, nat) phantom
  finite_UNIV_list == finite_UNIV :: ('a list, bool) phantom
### Additional type variable(s) in locale specification "countable": 'a
instantiation
  unit :: card_UNIV
  card_UNIV_unit == card_UNIV_class.card_UNIV :: (unit, nat) phantom
  finite_UNIV_unit == finite_UNIV :: (unit, bool) phantom
instantiation
  bool :: card_UNIV
  card_UNIV_bool == card_UNIV_class.card_UNIV :: (bool, nat) phantom
  finite_UNIV_bool == finite_UNIV :: (bool, bool) phantom
instantiation
  char :: card_UNIV
  card_UNIV_char == card_UNIV_class.card_UNIV :: (char, nat) phantom
  finite_UNIV_char == finite_UNIV :: (char, bool) phantom
locale comp_fun_commute
  fixes f :: "'a => 'b => 'b"
  assumes "comp_fun_commute f"
class countable = type +
  assumes "ex_inj": "EX to_nat. inj to_nat"
instantiation
  prod :: (finite_UNIV, finite_UNIV) finite_UNIV
  finite_UNIV_prod == finite_UNIV :: ('a * 'b, bool) phantom
instantiation
  prod :: (card_UNIV, card_UNIV) card_UNIV
  card_UNIV_prod == card_UNIV_class.card_UNIV :: ('a * 'b, nat) phantom
instantiation
  sum :: (finite_UNIV, finite_UNIV) finite_UNIV
  finite_UNIV_sum == finite_UNIV :: ('a + 'b, bool) phantom
instantiation
  sum :: (card_UNIV, card_UNIV) card_UNIV
  card_UNIV_sum == card_UNIV_class.card_UNIV :: ('a + 'b, nat) phantom
instantiation
  fun :: (finite_UNIV, card_UNIV) finite_UNIV
  finite_UNIV_fun == finite_UNIV :: ('a => 'b, bool) phantom
instantiation
  fun :: (card_UNIV, card_UNIV) card_UNIV
  card_UNIV_fun == card_UNIV_class.card_UNIV :: ('a => 'b, nat) phantom
instantiation
  option :: (finite_UNIV) finite_UNIV
  finite_UNIV_option == finite_UNIV :: ('a option, bool) phantom
consts
  left :: "'a tree => 'a tree"
consts
  right :: "'a tree => 'a tree"
instantiation
  option :: (card_UNIV) card_UNIV
  card_UNIV_option == card_UNIV_class.card_UNIV :: ('a option, nat) phantom
instantiation
  String.literal :: card_UNIV
  card_UNIV_literal == card_UNIV_class.card_UNIV ::
    (String.literal, nat) phantom
  finite_UNIV_literal == finite_UNIV :: (String.literal, bool) phantom
consts
  mset :: "'a list => 'a multiset"
instantiation
  set :: (finite_UNIV) finite_UNIV
  finite_UNIV_set == finite_UNIV :: ('a set, bool) phantom
instantiation
  set :: (card_UNIV) card_UNIV
  card_UNIV_set == card_UNIV_class.card_UNIV :: ('a set, nat) phantom
instantiation
  Enum.finite_1 :: card_UNIV
  card_UNIV_finite_1 == card_UNIV_class.card_UNIV ::
    (Enum.finite_1, nat) phantom
  finite_UNIV_finite_1 == finite_UNIV :: (Enum.finite_1, bool) phantom
Found termination order: "size <*mlex*> {}"
instantiation
  Enum.finite_2 :: card_UNIV
  card_UNIV_finite_2 == card_UNIV_class.card_UNIV ::
    (Enum.finite_2, nat) phantom
  finite_UNIV_finite_2 == finite_UNIV :: (Enum.finite_2, bool) phantom
instantiation
  Enum.finite_3 :: card_UNIV
  card_UNIV_finite_3 == card_UNIV_class.card_UNIV ::
    (Enum.finite_3, nat) phantom
  finite_UNIV_finite_3 == finite_UNIV :: (Enum.finite_3, bool) phantom
instantiation
  Enum.finite_4 :: card_UNIV
  card_UNIV_finite_4 == card_UNIV_class.card_UNIV ::
    (Enum.finite_4, nat) phantom
  finite_UNIV_finite_4 == finite_UNIV :: (Enum.finite_4, bool) phantom
Proofs for inductive predicate(s) "finite_item"
instantiation
  Enum.finite_5 :: card_UNIV
  card_UNIV_finite_5 == card_UNIV_class.card_UNIV ::
    (Enum.finite_5, nat) phantom
  finite_UNIV_finite_5 == finite_UNIV :: (Enum.finite_5, bool) phantom
  Proving monotonicity ...
Found termination order: "size <*mlex*> {}"
### theory "HOL-Library.Cardinality"
### 0.791s elapsed time, 3.116s cpu time, 0.363s GC time
Loading theory "HOL-Library.Numeral_Type" (required by "Draft.AlgebraMoreTemplates" via "Draft.Algebra" via "Draft.WellDefined" via "Draft.Healthiness" via "Draft.Embedding" via "Draft.Misc" via "HOL-Analysis.Multivariate_Analysis" via "HOL-Analysis.Ordered_Euclidean_Space" via "HOL-Analysis.Convex_Euclidean_Space" via "HOL-Analysis.Topology_Euclidean_Space" via "HOL-Analysis.Elementary_Normed_Spaces" via "HOL-Analysis.Cartesian_Space" via "HOL-Analysis.Finite_Cartesian_Product")
Found termination order: "size <*mlex*> {}"
class linorder = order +
  assumes "linear": "!!x y. x <= y | y <= x"
class height = type +
  fixes height :: "'a => nat"
instantiation
  tree :: (type) height
  height_tree == height :: 'a tree => nat
val old_countable_datatype_tac = fn: Proof.context -> int -> tactic
instantiation
  num1 :: CARD_1
instantiation
  num1 :: {comm_monoid_mult,numeral,comm_ring}
  uminus_num1 == uminus :: num1 => num1
  zero_num1 == zero_class.zero :: num1
  minus_num1 == minus :: num1 => num1 => num1
  plus_num1 == plus :: num1 => num1 => num1
  one_num1 == one_class.one :: num1
  times_num1 == times :: num1 => num1 => num1
instantiation
  num1 :: linorder
  less_eq_num1 == less_eq :: num1 => num1 => bool
  less_num1 == less :: num1 => num1 => bool
Found termination order: "size <*mlex*> {}"
locale comm_monoid_mset
  fixes f :: "'a => 'a => 'a"  (infixl \<open>\<^bold>*\<close> 70)
    and z :: "'a"  (\<open>\<^bold>1\<close>)
  assumes "comm_monoid_mset (\<^bold>*) \<^bold>1"
locale mod_type
  fixes n :: "int"
    and Rep :: "'a => int"
    and Abs :: "int => 'a"
  assumes "mod_type n Rep Abs"
### ML warning (line 93 of "~~/src/HOL/Tools/BNF/bnf_lfp_countable.ML"):
### Pattern is not exhaustive.
### ML warning (line 139 of "~~/src/HOL/Tools/BNF/bnf_lfp_countable.ML"):
### Pattern is not exhaustive.
### ML warning (line 143 of "~~/src/HOL/Tools/BNF/bnf_lfp_countable.ML"):
### Matches are not exhaustive.
### ML warning (line 145 of "~~/src/HOL/Tools/BNF/bnf_lfp_countable.ML"):
### Matches are not exhaustive.
### ML warning (line 156 of "~~/src/HOL/Tools/BNF/bnf_lfp_countable.ML"):
### Pattern is not exhaustive.
signature BNF_LFP_COUNTABLE =
  sig
    val countable_datatype_tac: Proof.context -> tactic
    val derive_encode_injectives_thms:
       Proof.context -> string list -> thm list
  end
structure BNF_LFP_Countable: BNF_LFP_COUNTABLE
locale mod_ring
  fixes n :: "int"
    and Rep :: "'a => int"
    and Abs :: "int => 'a"
  assumes "mod_ring n Rep Abs"
val countable_datatype_tac = fn: Proof.context -> thm -> thm Seq.seq
val countable_tac = fn: Proof.context -> int -> tactic
Found termination order: "size <*mlex*> {}"
instantiation
  bit0 :: (finite) {minus,one,plus,times,uminus,zero}
  bit1 :: (finite) {minus,one,plus,times,uminus,zero}
  zero_bit0 == zero_class.zero :: 'a bit0
  uminus_bit0 == uminus :: 'a bit0 => 'a bit0
  times_bit0 == times :: 'a bit0 => 'a bit0 => 'a bit0
  plus_bit0 == plus :: 'a bit0 => 'a bit0 => 'a bit0
  one_bit0 == one_class.one :: 'a bit0
  minus_bit0 == minus :: 'a bit0 => 'a bit0 => 'a bit0
  zero_bit1 == zero_class.zero :: 'a bit1
  uminus_bit1 == uminus :: 'a bit1 => 'a bit1
  times_bit1 == times :: 'a bit1 => 'a bit1 => 'a bit1
  plus_bit1 == plus :: 'a bit1 => 'a bit1 => 'a bit1
  one_bit1 == one_class.one :: 'a bit1
  minus_bit1 == minus :: 'a bit1 => 'a bit1 => 'a bit1
class comm_monoid_add = ab_semigroup_add + monoid_add +
  assumes "add_0": "!!a. (0::'a) + a = a"
Found termination order: "size <*mlex*> {}"
class comm_monoid_add = ab_semigroup_add + monoid_add +
  assumes "add_0": "!!a. (0::'a) + a = a"
Found termination order: "size <*mlex*> {}"
class canonically_ordered_monoid_add = ordered_comm_monoid_add +
  assumes "le_iff_add": "!!a b. (a <= b) = (EX c. b = a + c)"
instantiation
  bit0 :: (finite) linorder
  bit1 :: (finite) linorder
  less_eq_bit0 == less_eq :: 'a bit0 => 'a bit0 => bool
  less_bit0 == less :: 'a bit0 => 'a bit0 => bool
  less_eq_bit1 == less_eq :: 'a bit1 => 'a bit1 => bool
  less_bit1 == less :: 'a bit1 => 'a bit1 => bool
Found termination order: "size <*mlex*> {}"
instantiation
  num0 :: equal
  equal_num0 == equal_class.equal :: num0 => num0 => bool
### theory "HOL-Library.Countable"
### 1.292s elapsed time, 5.075s cpu time, 0.664s GC time
Loading theory "HOL-Library.Countable_Set" (required by "Draft.AlgebraMoreTemplates" via "Draft.Algebra" via "Draft.WellDefined" via "Draft.Healthiness" via "Draft.Embedding" via "Draft.Misc" via "HOL-Analysis.Multivariate_Analysis" via "HOL-Analysis.Ordered_Euclidean_Space" via "HOL-Analysis.Convex_Euclidean_Space" via "HOL-Analysis.Topology_Euclidean_Space" via "HOL-Analysis.Elementary_Normed_Spaces" via "HOL-Analysis.Elementary_Metric_Spaces" via "HOL-Analysis.Abstract_Topology_2" via "HOL-Analysis.Elementary_Topology" via "HOL-Library.Set_Idioms")
instantiation
  num1 :: equal
  equal_num1 == equal_class.equal :: num1 => num1 => bool
instantiation
  num1 :: enum
  enum_num1 == enum_class.enum :: num1 list
  enum_all_num1 == enum_class.enum_all :: (num1 => bool) => bool
  enum_ex_num1 == enum_class.enum_ex :: (num1 => bool) => bool
Found termination order: "size <*mlex*> {}"
instantiation
  num0 :: card_UNIV
  num1 :: card_UNIV
  card_UNIV_num0 == card_UNIV_class.card_UNIV :: (num0, nat) phantom
  finite_UNIV_num0 == finite_UNIV :: (num0, bool) phantom
  card_UNIV_num1 == card_UNIV_class.card_UNIV :: (num1, nat) phantom
  finite_UNIV_num1 == finite_UNIV :: (num1, bool) phantom
Found termination order: "size <*mlex*> {}"
instantiation
  bit0 :: (finite) equal
  bit1 :: (finite) equal
  equal_bit0 == equal_class.equal :: 'a bit0 => 'a bit0 => bool
  equal_bit1 == equal_class.equal :: 'a bit1 => 'a bit1 => bool
instantiation
  bit0 :: (finite) enum
  enum_bit0 == enum_class.enum :: 'a bit0 list
  enum_all_bit0 == enum_class.enum_all :: ('a bit0 => bool) => bool
  enum_ex_bit0 == enum_class.enum_ex :: ('a bit0 => bool) => bool
class comm_monoid_mult = ab_semigroup_mult + monoid_mult + dvd +
  assumes "mult_1": "!!a. (1::'a) * a = a"
instantiation
  bit1 :: (finite) enum
  enum_bit1 == enum_class.enum :: 'a bit1 list
  enum_all_bit1 == enum_class.enum_all :: ('a bit1 => bool) => bool
  enum_ex_bit1 == enum_class.enum_ex :: ('a bit1 => bool) => bool
Found termination order: "(%p. size (fst p)) <*mlex*> {}"
instantiation
  bit0 :: (finite) finite_UNIV
  bit1 :: (finite) finite_UNIV
  finite_UNIV_bit0 == finite_UNIV :: ('a bit0, bool) phantom
  finite_UNIV_bit1 == finite_UNIV :: ('a bit1, bool) phantom
instantiation
  bit0 :: ({card_UNIV,finite}) card_UNIV
  bit1 :: ({card_UNIV,finite}) card_UNIV
  card_UNIV_bit0 == card_UNIV_class.card_UNIV :: ('a bit0, nat) phantom
  card_UNIV_bit1 == card_UNIV_class.card_UNIV :: ('a bit1, nat) phantom
### theory "HOL-Library.Numeral_Type"
### 0.811s elapsed time, 3.172s cpu time, 0.431s GC time
Loading theory "HOL-Analysis.Metric_Arith" (required by "Draft.AlgebraMoreTemplates" via "Draft.Algebra" via "Draft.WellDefined" via "Draft.Healthiness" via "Draft.Embedding" via "Draft.Misc" via "HOL-Analysis.Multivariate_Analysis" via "HOL-Analysis.Ordered_Euclidean_Space" via "HOL-Analysis.Convex_Euclidean_Space" via "HOL-Analysis.Topology_Euclidean_Space" via "HOL-Analysis.Elementary_Normed_Spaces" via "HOL-Analysis.Elementary_Metric_Spaces")
Found termination order: "size <*mlex*> {}"
locale comm_monoid_set
  fixes f :: "'a => 'a => 'a"  (infixl \<open>\<^bold>*\<close> 70)
    and z :: "'a"  (\<open>\<^bold>1\<close>)
  assumes "comm_monoid_set (\<^bold>*) \<^bold>1"
Found termination order: "(%p. size (snd p)) <*mlex*> {}"
### theory "HOL-Library.Countable_Set"
### 0.485s elapsed time, 1.908s cpu time, 0.189s GC time
Loading theory "HOL-Library.Countable_Complete_Lattices" (required by "Draft.AlgebraMoreTemplates" via "Draft.Algebra" via "Draft.WellDefined" via "Draft.Healthiness" via "Draft.Embedding" via "Draft.Misc" via "HOL-Analysis.Multivariate_Analysis" via "HOL-Analysis.Cross3" via "HOL-Analysis.Cartesian_Euclidean_Space" via "HOL-Analysis.Derivative" via "HOL-Analysis.Bounded_Linear_Function" via "HOL-Analysis.Uniform_Limit" via "HOL-Analysis.Summation_Tests" via "HOL-Library.Extended_Real" via "HOL-Library.Extended_Nat" via "HOL-Library.Order_Continuity")
Found termination order: "size <*mlex*> {}"
class linorder = order +
  assumes "linear": "!!x y. x <= y | y <= x"
### theory "HOL-Library.Tree"
### 2.148s elapsed time, 8.441s cpu time, 0.977s GC time
Loading theory "Draft.Templates" (required by "Draft.AlgebraMoreTemplates" via "Draft.ExtrEqs")
datatype template_term
=
     t_empty
   | template_app of template_term * template_term
   | template_hole of int
   | template_var of int
datatype sign
= equals | greater_equals | greater_than | less_equals | less_than
datatype template
=
     template_bimplication of template * template
   | template_dunno
   | template_equation of template_term * template_term
   | template_implication of template list * template
   | template_inequation of sign * template_term * template_term
   | template_negation of template
   | template_predicate of template_term
constructor t_empty: template_term
constructor template_app: template_term * template_term -> template_term
constructor template_hole: int -> template_term
constructor template_var: int -> template_term
constructor equals: sign
constructor greater_equals: sign
constructor greater_than: sign
constructor less_equals: sign
constructor less_than: sign
constructor template_bimplication: template * template -> template
constructor template_dunno: template
constructor template_equation: template_term * template_term -> template
constructor template_implication: template list * template -> template
constructor template_inequation:
   sign * template_term * template_term -> template
constructor template_negation: template -> template
constructor template_predicate: template_term -> template
val vfs = fn: term -> (indexname * typ) list * (string * typ) list
val indexOf = fn: ''a list -> ''a -> int -> int
val has_eq = fn: term -> bool
val term2template = fn:
   (indexname * typ) list -> (string * typ) list -> term -> template_term
val lemma2predicate = fn: term -> term -> template
val makeTemplatewithContext = fn: term -> term -> template
val lemma2template = fn: term -> template
val thm2template = fn: thm -> template
val tterm2string = fn: template_term -> string
val template2string = fn: template -> string
val t = "height ?t <= size ?t": thm
val th =
   Const ("HOL.Trueprop", "bool => prop") $
     (Const ("Orderings.ord_class.less_eq", "nat => nat => bool") $
       (Const ("Tree.height_class.height", "?'a tree => nat") $
         Var (("t", 0), "?'a tree")) $
       (Const ("Nat.size_class.size", "?'a tree => nat") $
         Var (("t", 0), "?'a tree"))):
   term
### theory "Draft.Templates"
### 0.086s elapsed time, 0.337s cpu time, 0.062s GC time
Loading theory "HOL-Library.Set_Idioms" (required by "Draft.AlgebraMoreTemplates" via "Draft.Algebra" via "Draft.WellDefined" via "Draft.Healthiness" via "Draft.Embedding" via "Draft.Misc" via "HOL-Analysis.Multivariate_Analysis" via "HOL-Analysis.Ordered_Euclidean_Space" via "HOL-Analysis.Convex_Euclidean_Space" via "HOL-Analysis.Topology_Euclidean_Space" via "HOL-Analysis.Elementary_Normed_Spaces" via "HOL-Analysis.Elementary_Metric_Spaces" via "HOL-Analysis.Abstract_Topology_2" via "HOL-Analysis.Elementary_Topology")
signature METRIC_ARITH =
  sig
    val argo_timeout: real Config.T
    val metric_arith_tac: Proof.context -> int -> tactic
    val trace: bool Config.T
  end
structure Metric_Arith: METRIC_ARITH
### theory "HOL-Analysis.Metric_Arith"
### 0.658s elapsed time, 2.578s cpu time, 0.245s GC time
Loading theory "HOL-Analysis.Inner_Product" (required by "Draft.AlgebraMoreTemplates" via "Draft.Algebra" via "Draft.WellDefined" via "Draft.Healthiness" via "Draft.Embedding" via "Draft.Misc" via "HOL-Analysis.Multivariate_Analysis" via "HOL-Analysis.Ordered_Euclidean_Space" via "HOL-Analysis.Convex_Euclidean_Space" via "HOL-Analysis.Convex" via "HOL-Analysis.Affine" via "HOL-Analysis.Linear_Algebra" via "HOL-Analysis.Euclidean_Space")
class countable_complete_lattice = Inf + Sup + lattice + bot + top +
  assumes "ccInf_lower": "!!A x. [| countable A; x : A |] ==> Inf A <= x"
  assumes
    "ccInf_greatest":
      "!!A z. [| countable A; !!x. x : A ==> z <= x |] ==> z <= Inf A"
  assumes "ccSup_upper": "!!A x. [| countable A; x : A |] ==> x <= Sup A"
  assumes
    "ccSup_least":
      "!!A z. [| countable A; !!x. x : A ==> x <= z |] ==> Sup A <= z"
  assumes "ccInf_empty": "Inf {} = top"
  assumes "ccSup_empty": "Sup {} = bot"
instantiation
  multiset :: (preorder) order
  less_eq_multiset == less_eq :: 'a multiset => 'a multiset => bool
  less_multiset == less :: 'a multiset => 'a multiset => bool
instantiation
  multiset :: (preorder) ordered_ab_semigroup_add
Proofs for inductive predicate(s) "pw_leq"
  Proving monotonicity ...
### theory "HOL-Library.Set_Idioms"
### 0.243s elapsed time, 0.937s cpu time, 0.112s GC time
Loading theory "HOL-Analysis.Abstract_Topology" (required by "Draft.AlgebraMoreTemplates" via "Draft.Algebra" via "Draft.WellDefined" via "Draft.Healthiness" via "Draft.Embedding" via "Draft.Misc" via "HOL-Analysis.Multivariate_Analysis" via "HOL-Analysis.Ordered_Euclidean_Space" via "HOL-Analysis.Convex_Euclidean_Space" via "HOL-Analysis.Topology_Euclidean_Space" via "HOL-Analysis.Elementary_Normed_Spaces" via "HOL-Analysis.Elementary_Metric_Spaces" via "HOL-Analysis.Abstract_Topology_2")
Found termination order: "(%p. length (fst p)) <*mlex*> {}"
instantiation
  multiset :: (equal) equal
  equal_multiset == equal_class.equal :: 'a multiset => 'a multiset => bool
instantiation
  multiset :: (random) random
  random_multiset == random_class.random ::
    natural
    => natural * natural
       => ('a multiset * (unit => term)) * natural * natural
instantiation
  multiset :: (full_exhaustive) full_exhaustive
  full_exhaustive_multiset == full_exhaustive_class.full_exhaustive ::
    ('a multiset * (unit => term) => (bool * term list) option)
    => natural => (bool * term list) option
Proofs for inductive predicate(s) "pred_mset"
  Proving monotonicity ...
class real_inner = dist_norm + real_vector + sgn_div_norm +
  uniformity_dist + open_uniformity +
  fixes inner :: "'a => 'a => real"
  assumes "inner_commute": "!!x y. inner x y = inner y x"
    and "inner_add_left": "!!x y z. inner (x + y) z = inner x z + inner y z"
    and
    "inner_scaleR_left": "!!r x y. inner (r *\<^sub>R x) y = r * inner x y"
    and "inner_ge_zero": "!!x. 0 <= inner x x"
    and "inner_eq_zero_iff": "!!x. (inner x x = 0) = (x = (0::'a))"
    and "norm_eq_sqrt_inner": "!!x. norm x = sqrt (inner x x)"
Proofs for inductive predicate(s) "rel_mset'"
  Proving monotonicity ...
### theory "HOL-Library.Multiset"
### 4.402s elapsed time, 16.986s cpu time, 3.524s GC time
Loading theory "HOL-Combinatorics.Permutations" (required by "Draft.AlgebraMoreTemplates" via "Draft.Algebra" via "Draft.WellDefined" via "Draft.Healthiness" via "Draft.Embedding" via "Draft.Misc" via "HOL-Analysis.Multivariate_Analysis" via "HOL-Analysis.Determinants")
instantiation
  real :: real_inner
  inner_real == inner :: real => real => real
instantiation
  complex :: real_inner
  inner_complex == inner :: complex => complex => real
bundle inner_syntax
class countable_complete_distrib_lattice = countable_complete_lattice +
  assumes
    "sup_ccInf": "!!B a. countable B ==> sup a (Inf B) = Inf (sup a ` B)"
  assumes
    "inf_ccSup": "!!B a. countable B ==> inf a (Sup B) = Sup (inf a ` B)"
bundle no_inner_syntax
### theory "HOL-Analysis.Inner_Product"
### 1.475s elapsed time, 5.774s cpu time, 1.691s GC time
Loading theory "HOL-Analysis.L2_Norm" (required by "Draft.AlgebraMoreTemplates" via "Draft.Algebra" via "Draft.WellDefined" via "Draft.Healthiness" via "Draft.Embedding" via "Draft.Misc" via "HOL-Analysis.Multivariate_Analysis" via "HOL-Analysis.Ordered_Euclidean_Space" via "HOL-Analysis.Convex_Euclidean_Space" via "HOL-Analysis.Convex" via "HOL-Analysis.Affine" via "HOL-Analysis.Linear_Algebra" via "HOL-Analysis.Euclidean_Space")
### theory "HOL-Analysis.L2_Norm"
### 0.496s elapsed time, 1.771s cpu time, 1.364s GC time
Loading theory "HOL-Analysis.Operator_Norm" (required by "Draft.AlgebraMoreTemplates" via "Draft.Algebra" via "Draft.WellDefined" via "Draft.Healthiness" via "Draft.Embedding" via "Draft.Misc" via "HOL-Analysis.Multivariate_Analysis" via "HOL-Analysis.Cross3" via "HOL-Analysis.Cartesian_Euclidean_Space" via "HOL-Analysis.Derivative" via "HOL-Analysis.Bounded_Linear_Function")
Proofs for inductive predicate(s) "swapidseq"
  Proving monotonicity ...
### theory "HOL-Analysis.Operator_Norm"
### 0.112s elapsed time, 0.437s cpu time, 0.046s GC time
Loading theory "HOL-Analysis.Product_Vector" (required by "Draft.AlgebraMoreTemplates" via "Draft.Algebra" via "Draft.WellDefined" via "Draft.Healthiness" via "Draft.Embedding" via "Draft.Misc" via "HOL-Analysis.Multivariate_Analysis" via "HOL-Analysis.Ordered_Euclidean_Space" via "HOL-Analysis.Convex_Euclidean_Space" via "HOL-Analysis.Convex" via "HOL-Analysis.Affine" via "HOL-Analysis.Linear_Algebra" via "HOL-Analysis.Euclidean_Space")
locale comm_monoid_set
  fixes f :: "'a => 'a => 'a"  (infixl \<open>\<^bold>*\<close> 70)
    and z :: "'a"  (\<open>\<^bold>1\<close>)
  assumes "comm_monoid_set (\<^bold>*) \<^bold>1"
locale module_prod
  fixes s1 :: "'a => 'b => 'b"
    and s2 :: "'a => 'c => 'c"
  assumes "module_prod s1 s2"
Found termination order: "(%p. size_list size (fst p)) <*mlex*> {}"
### theory "HOL-Combinatorics.Permutations"
### 1.394s elapsed time, 5.415s cpu time, 1.733s GC time
Loading theory "HOL-Library.BigO" (required by "Draft.AlgebraMoreTemplates" via "Draft.ExtrEqs")
locale vector_space_prod
  fixes s1 :: "'a => 'b => 'b"  (infixr \<open>*a\<close> 75)
    and s2 :: "'a => 'c => 'c"  (infixr \<open>*b\<close> 75)
  assumes "vector_space_prod (*a) (*b)"
### Cannot skip proof of schematic goal statement
instantiation
  prod :: (real_vector, real_vector) real_vector
  scaleR_prod == scaleR :: real => 'a * 'b => 'a * 'b
### Cannot skip proof of schematic goal statement
instantiation
  prod :: (metric_space, metric_space) dist
  dist_prod == dist :: 'a * 'b => 'a * 'b => real
instantiation
  prod :: (uniformity, uniformity) uniformity
  uniformity_prod == uniformity :: (('a * 'b) * 'a * 'b) filter
### theory "HOL-Library.Countable_Complete_Lattices"
### 3.123s elapsed time, 12.056s cpu time, 3.558s GC time
Loading theory "HOL-Library.Discrete" (required by "Draft.AlgebraMoreTemplates" via "Draft.Algebra" via "Draft.WellDefined" via "Draft.Healthiness" via "Draft.Embedding" via "Draft.Misc" via "HOL-Analysis.Multivariate_Analysis" via "HOL-Analysis.Cross3" via "HOL-Analysis.Cartesian_Euclidean_Space" via "HOL-Analysis.Derivative" via "HOL-Analysis.Bounded_Linear_Function" via "HOL-Analysis.Uniform_Limit" via "HOL-Analysis.Summation_Tests")
instantiation
  prod :: (uniform_space, uniform_space) uniform_space
instantiation
  prod :: (metric_space, metric_space) uniformity_dist
instantiation
  prod :: (metric_space, metric_space) metric_space
instantiation
  prod :: (real_normed_vector, real_normed_vector) real_normed_vector
  sgn_prod == sgn :: 'a * 'b => 'a * 'b
  norm_prod == norm :: 'a * 'b => real
### Rewrite rule not in simpset:
### Wellfounded.accp log_rel ?n1 ==>
### log ?n1 == if ?n1 < 2 then 0 else Suc (log (?n1 div 2))
Found termination order: "size <*mlex*> {}"
### theory "HOL-Library.Discrete"
### 0.172s elapsed time, 0.676s cpu time, 0.064s GC time
Loading theory "HOL-Library.Indicator_Function" (required by "Draft.AlgebraMoreTemplates" via "Draft.Algebra" via "Draft.WellDefined" via "Draft.Healthiness" via "Draft.Embedding" via "Draft.Misc" via "HOL-Analysis.Multivariate_Analysis" via "HOL-Analysis.Ordered_Euclidean_Space" via "HOL-Analysis.Convex_Euclidean_Space" via "HOL-Analysis.Topology_Euclidean_Space" via "HOL-Analysis.Elementary_Normed_Spaces" via "HOL-Analysis.Elementary_Metric_Spaces" via "HOL-Analysis.Abstract_Topology_2")
locale finite_dimensional_vector_space_prod
  fixes s1 :: "'a => 'b => 'b"  (infixr \<open>*a\<close> 75)
    and s2 :: "'a => 'c => 'c"  (infixr \<open>*b\<close> 75)
    and B1 :: "'b set"
    and B2 :: "'c set"
  assumes "finite_dimensional_vector_space_prod (*a) (*b) B1 B2"
### theory "HOL-Analysis.Product_Vector"
### 0.977s elapsed time, 3.848s cpu time, 0.396s GC time
Loading theory "HOL-Analysis.Elementary_Topology" (required by "Draft.AlgebraMoreTemplates" via "Draft.Algebra" via "Draft.WellDefined" via "Draft.Healthiness" via "Draft.Embedding" via "Draft.Misc" via "HOL-Analysis.Multivariate_Analysis" via "HOL-Analysis.Ordered_Euclidean_Space" via "HOL-Analysis.Convex_Euclidean_Space" via "HOL-Analysis.Topology_Euclidean_Space" via "HOL-Analysis.Elementary_Normed_Spaces" via "HOL-Analysis.Elementary_Metric_Spaces" via "HOL-Analysis.Abstract_Topology_2")
### theory "HOL-Library.Indicator_Function"
### 0.424s elapsed time, 1.681s cpu time, 0.145s GC time
Loading theory "HOL-Analysis.Euclidean_Space" (required by "Draft.AlgebraMoreTemplates" via "Draft.Algebra" via "Draft.WellDefined" via "Draft.Healthiness" via "Draft.Embedding" via "Draft.Misc" via "HOL-Analysis.Multivariate_Analysis" via "HOL-Analysis.Ordered_Euclidean_Space" via "HOL-Analysis.Convex_Euclidean_Space" via "HOL-Analysis.Convex" via "HOL-Analysis.Affine" via "HOL-Analysis.Linear_Algebra")
### theory "HOL-Library.BigO"
### 0.848s elapsed time, 3.337s cpu time, 0.338s GC time
Loading theory "Draft.ExtrEqs" (required by "Draft.AlgebraMoreTemplates")
Proofs for inductive predicate(s) "generate_topology_on"
  Proving monotonicity ...
### theory "HOL-Analysis.Abstract_Topology"
### 3.411s elapsed time, 13.231s cpu time, 3.577s GC time
Loading theory "HOL-Analysis.Abstract_Limits" (required by "Draft.AlgebraMoreTemplates" via "Draft.Algebra" via "Draft.WellDefined" via "Draft.Healthiness" via "Draft.Embedding" via "Draft.Misc" via "HOL-Analysis.Multivariate_Analysis" via "HOL-Analysis.Cross3" via "HOL-Analysis.Cartesian_Euclidean_Space" via "HOL-Analysis.Derivative" via "HOL-Analysis.Bounded_Linear_Function" via "HOL-Analysis.Function_Topology")
class topological_space = open +
  assumes "open_UNIV": "open UNIV"
  assumes "open_Int": "!!S T. [| open S; open T |] ==> open (S Int T)"
  assumes "open_Union": "!!K. Ball K open ==> open (\<Union> K)"
locale countable_basis
  fixes p :: "'a set => bool"
    and B :: "'a set set"
  assumes "countable_basis p B"
### theory "HOL-Analysis.Abstract_Limits"
### 0.222s elapsed time, 0.873s cpu time, 0.046s GC time
Loading theory "HOL-Library.Liminf_Limsup" (required by "Draft.AlgebraMoreTemplates" via "Draft.Algebra" via "Draft.WellDefined" via "Draft.Healthiness" via "Draft.Embedding" via "Draft.Misc" via "HOL-Analysis.Multivariate_Analysis" via "HOL-Analysis.Cross3" via "HOL-Analysis.Cartesian_Euclidean_Space" via "HOL-Analysis.Derivative" via "HOL-Analysis.Bounded_Linear_Function" via "HOL-Analysis.Uniform_Limit" via "HOL-Analysis.Summation_Tests" via "HOL-Library.Extended_Real")
class second_countable_topology = topological_space +
  assumes
    "ex_countable_subbasis":
      "EX B. countable B & open = generate_topology B"
val eqpattern =
   Pattern
    (
       Const ("HOL.Trueprop", "bool => prop") $
         (Const ("HOL.eq", "?'a => ?'a => bool") $
           Var (("_dummy_", 1), "?'a") $ Var (("_dummy_", 2), "?'a"))
       ):
   term Find_Theorems.criterion
val badeqpattern = Pattern (Const ("Pure.eq", "?'a => ?'a => prop")):
   term Find_Theorems.criterion
val undefpattern =
   Pattern
    (
       Const ("HOL.Trueprop", "bool => prop") $
         (Const ("HOL.eq", "?'a => ?'a => bool") $
           Var (("_dummy_", 1), "?'a") $ Const ("HOL.undefined", "?'a"))
       ):
   term Find_Theorems.criterion
val thmpattern =
   Pattern
    (Const ("HOL.Trueprop", "bool => prop") $ Var (("_dummy_", 1), "bool")):
   term Find_Theorems.criterion
val badnames =
   ["*nitpick*", "*Nitpick*", "*full_exhaustive*", "*_def*", "Enum.finite*",
    "*Quickcheck*", "ATP*", "*Nunchaku*", "*Code*", "*BNF*", "*SMT*",
    "*.*.*"]:
   string list
val unwanted_names =
   [(false, Name "*nitpick*"), (false, Name "*Nitpick*"),
    (false, Name "*full_exhaustive*"), (false, Name "*_def*"),
    (false, Name "Enum.finite*"), (false, Name "*Quickcheck*"),
    (false, Name "ATP*"), (false, Name "*Nunchaku*"),
    (false, Name "*Code*"), (false, Name "*BNF*"), (false, Name "*SMT*"),
    (false, Name "*.*.*")]:
   (bool * term Find_Theorems.criterion) list
val has_vars = fn: term -> bool
val get_all_eqs = fn: string -> Proof.context -> (string * thm) list
val get_all_thms = fn: string -> Proof.context -> (string * thm) list
val get_noneq_thms = fn: string -> Proof.context -> (string * thm) list
val template_eqs = fn:
   string -> Proof.context -> (string * thm * template) list
val template_thms = fn:
   string -> Proof.context -> (string * thm * template) list
### theory "Draft.ExtrEqs"
### 0.691s elapsed time, 2.727s cpu time, 0.245s GC time
Loading theory "HOL-Library.Order_Continuity" (required by "Draft.AlgebraMoreTemplates" via "Draft.Algebra" via "Draft.WellDefined" via "Draft.Healthiness" via "Draft.Embedding" via "Draft.Misc" via "HOL-Analysis.Multivariate_Analysis" via "HOL-Analysis.Cross3" via "HOL-Analysis.Cartesian_Euclidean_Space" via "HOL-Analysis.Derivative" via "HOL-Analysis.Bounded_Linear_Function" via "HOL-Analysis.Uniform_Limit" via "HOL-Analysis.Summation_Tests" via "HOL-Library.Extended_Real" via "HOL-Library.Extended_Nat")
class euclidean_space = real_inner +
  fixes Basis :: "'a set"
  assumes "nonempty_Basis": "Basis ~= {}"
  assumes "finite_Basis": "finite Basis"
  assumes
    "inner_Basis":
      "!!u v.
          [| u : Basis; v : Basis |]
          ==> inner u v = (if u = v then 1 else 0)"
  assumes
    "euclidean_all_zero_iff":
      "!!x. (ALL u:Basis. inner x u = 0) = (x = (0::'a))"
### theory "HOL-Library.Liminf_Limsup"
### 0.507s elapsed time, 1.988s cpu time, 0.183s GC time
Loading theory "HOL-Library.Sum_of_Squares" (required by "Draft.AlgebraMoreTemplates" via "Draft.Algebra" via "Draft.WellDefined" via "Draft.Healthiness" via "Draft.Embedding" via "Draft.Misc" via "HOL-Analysis.Multivariate_Analysis" via "HOL-Analysis.Ordered_Euclidean_Space" via "HOL-Analysis.Convex_Euclidean_Space" via "HOL-Analysis.Topology_Euclidean_Space" via "HOL-Analysis.Norm_Arith")
### theory "HOL-Library.Order_Continuity"
### 0.609s elapsed time, 2.379s cpu time, 0.227s GC time
Loading theory "HOL-Library.Extended_Nat" (required by "Draft.AlgebraMoreTemplates" via "Draft.Algebra" via "Draft.WellDefined" via "Draft.Healthiness" via "Draft.Embedding" via "Draft.Misc" via "HOL-Analysis.Multivariate_Analysis" via "HOL-Analysis.Cross3" via "HOL-Analysis.Cartesian_Euclidean_Space" via "HOL-Analysis.Derivative" via "HOL-Analysis.Bounded_Linear_Function" via "HOL-Analysis.Uniform_Limit" via "HOL-Analysis.Summation_Tests" via "HOL-Library.Extended_Real")
class infinity = type +
  fixes infinity :: "'a"
instantiation
  enat :: infinity
  infinity_enat == infinity :: enat
Proofs for inductive predicate(s) "rec_set_enat"
instantiation
  real :: euclidean_space
  Basis_real == Basis :: real set
instantiation
  complex :: euclidean_space
  Basis_complex == Basis :: complex set
instantiation
  prod :: (real_inner, real_inner) real_inner
  inner_prod == inner :: 'a * 'b => 'a * 'b => real
instantiation
  prod :: (euclidean_space, euclidean_space) euclidean_space
  Basis_prod == Basis :: ('a * 'b) set
### Cannot skip proof of schematic goal statement
### Cannot skip proof of schematic goal statement
### theory "HOL-Analysis.Euclidean_Space"
### 1.755s elapsed time, 6.871s cpu time, 0.720s GC time
Loading theory "HOL-Analysis.Finite_Cartesian_Product" (required by "Draft.AlgebraMoreTemplates" via "Draft.Algebra" via "Draft.WellDefined" via "Draft.Healthiness" via "Draft.Embedding" via "Draft.Misc" via "HOL-Analysis.Multivariate_Analysis" via "HOL-Analysis.Ordered_Euclidean_Space" via "HOL-Analysis.Convex_Euclidean_Space" via "HOL-Analysis.Topology_Euclidean_Space" via "HOL-Analysis.Elementary_Normed_Spaces" via "HOL-Analysis.Cartesian_Space")
### No equation for constructor "Extended_Nat.infinity_class.infinity"
### in definition of function "the_enat"
consts
  the_enat :: "enat => nat"
instantiation
  enat :: zero_neq_one
  one_enat == one_class.one :: enat
  zero_enat == zero_class.zero :: enat
instantiation
  enat :: comm_monoid_add
  plus_enat == plus :: enat => enat => enat
instantiation
  enat :: {comm_semiring_1,semiring_no_zero_divisors}
  times_enat == times :: enat => enat => enat
### theory "HOL-Analysis.Elementary_Topology"
### 2.052s elapsed time, 8.039s cpu time, 0.849s GC time
Loading theory "HOL-Analysis.Linear_Algebra" (required by "Draft.AlgebraMoreTemplates" via "Draft.Algebra" via "Draft.WellDefined" via "Draft.Healthiness" via "Draft.Embedding" via "Draft.Misc" via "HOL-Analysis.Multivariate_Analysis" via "HOL-Analysis.Ordered_Euclidean_Space" via "HOL-Analysis.Convex_Euclidean_Space" via "HOL-Analysis.Convex" via "HOL-Analysis.Affine")
instantiation
  enat :: minus
  minus_enat == minus :: enat => enat => enat
instantiation
  enat :: linordered_ab_semigroup_add
  less_eq_enat == less_eq :: enat => enat => bool
  less_enat == less :: enat => enat => bool
instantiation
  enat :: {order_bot,order_top}
  top_enat == top :: enat
  bot_enat == bot :: enat
structure Cancel_Enat_Common:
  sig
    val dest_sum: term -> term list
    val dest_summing: term * term list -> term list
    val find_first: term -> term list -> term list
    val find_first_t: term list -> term -> term list -> term list
    val mk_eq: term * term -> term
    val mk_sum: typ -> term list -> term
    val norm_ss: simpset
    val norm_tac: Proof.context -> tactic
    val simplify_meta_eq: Proof.context -> thm -> thm -> thm
    val trans_tac: Proof.context -> thm option -> tactic
  end
structure Eq_Enat_Cancel:
  sig val proc: Proof.context -> term -> thm option end
structure Le_Enat_Cancel:
  sig val proc: Proof.context -> term -> thm option end
structure Less_Enat_Cancel:
  sig val proc: Proof.context -> term -> thm option end
instantiation
  enat :: complete_lattice
  Inf_enat == Inf :: enat set => enat
  Sup_enat == Sup :: enat set => enat
  sup_enat == sup :: enat => enat => enat
  inf_enat == inf :: enat => enat => enat
### ML warning (line 261 of "~~/src/HOL/Library/Sum_of_Squares/positivstellensatz.ML"):
### Value identifier (pth_abs) has not been referenced.
### ML warning (line 265 of "~~/src/HOL/Library/Sum_of_Squares/positivstellensatz.ML"):
### Value identifier (pth_max) has not been referenced.
### ML warning (line 269 of "~~/src/HOL/Library/Sum_of_Squares/positivstellensatz.ML"):
### Value identifier (pth_min) has not been referenced.
### ML warning (line 379 of "~~/src/HOL/Library/Sum_of_Squares/positivstellensatz.ML"):
### Pattern is not exhaustive.
signature FUNC =
  sig
    exception DUP of key
    exception SAME
    exception UNDEF of key
    val apply: 'a table -> key -> 'a
    val applyd: 'a table -> (key -> 'a) -> key -> 'a
    val build: ('a table -> 'a table) -> 'a table
    val choose: 'a table -> key * 'a
    val combine:
       ('a -> 'a -> 'a) -> ('a -> bool) -> 'a table -> 'a table -> 'a table
    val cons_list: key * 'a -> 'a list table -> 'a list table
    val default: key * 'a -> 'a table -> 'a table
    val defined: 'a table -> key -> bool
    val delete: key -> 'a table -> 'a table
    val delete_safe: key -> 'a table -> 'a table
    val dest: 'a table -> (key * 'a) list
    val dest_list: 'a list table -> (key * 'a) list
    val dom: 'a table -> key list
    val empty: 'a table
    val exists: (key * 'a -> bool) -> 'a table -> bool
    val fold: (key * 'a -> 'b -> 'b) -> 'a table -> 'b -> 'b
    val fold_rev: (key * 'a -> 'b -> 'b) -> 'a table -> 'b -> 'b
    val forall: (key * 'a -> bool) -> 'a table -> bool
    val get_first: (key * 'a -> 'b option) -> 'a table -> 'b option
    val insert: ('a * 'a -> bool) -> key * 'a -> 'a table -> 'a table
    val insert_list:
       ('a * 'a -> bool) -> key * 'a -> 'a list table -> 'a list table
    val insert_set: key -> set -> set
    val is_empty: 'a table -> bool
    val is_single: 'a table -> bool
    val join: (key -> 'a * 'a -> 'a) -> 'a table * 'a table -> 'a table
    type key
    val keys: 'a table -> key list
    val lookup: 'a table -> key -> 'a option
    val lookup_key: 'a table -> key -> (key * 'a) option
    val lookup_list: 'a list table -> key -> 'a list
    val make: (key * 'a) list -> 'a table
    val make_list: (key * 'a) list -> 'a list table
    val make_set: key list -> set
    val map: (key -> 'a -> 'b) -> 'a table -> 'b table
    val map_default: key * 'a -> ('a -> 'a) -> 'a table -> 'a table
    val map_entry: key -> ('a -> 'a) -> 'a table -> 'a table
    val max: 'a table -> (key * 'a) option
    val member: ('a * 'b -> bool) -> 'b table -> key * 'a -> bool
    val merge: ('a * 'a -> bool) -> 'a table * 'a table -> 'a table
    val merge_list:
       ('a * 'a -> bool) -> 'a list table * 'a list table -> 'a list table
    val min: 'a table -> (key * 'a) option
    val onefunc: key * 'a -> 'a table
    val remove: ('a * 'b -> bool) -> key * 'a -> 'b table -> 'b table
    val remove_list:
       ('a * 'b -> bool) -> key * 'a -> 'b list table -> 'b list table
    val remove_set: key -> set -> set
    type set = unit table
    type 'a table
    val tryapplyd: 'a table -> key -> 'a -> 'a
    val update: key * 'a -> 'a table -> 'a table
    val update_list:
       ('a * 'a -> bool) -> key * 'a -> 'a list table -> 'a list table
    val update_new: key * 'a -> 'a table -> 'a table
    val updatep: (key * 'a -> bool) -> key * 'a -> 'a table -> 'a table
  end
functor FuncFun (Key: KEY): FUNC
signature REAL_ARITH =
  sig
    type cert_conv = cterm -> thm * pss_tree
    val cterm_of_rat: Rat.rat -> cterm
    val dest_ratconst: cterm -> Rat.rat
    val gen_gen_real_arith:
       Proof.context ->
         (Rat.rat -> cterm) * conv * conv * conv * conv * conv * conv *
         conv * conv * conv * prover
           -> cert_conv
    val gen_prover_real_arith: Proof.context -> prover -> cert_conv
    val gen_real_arith:
       Proof.context ->
         (Rat.rat -> cterm) * conv * conv * conv * conv * conv * conv *
         conv * prover
           -> cert_conv
    val is_ratconst: cterm -> bool
    datatype positivstellensatz
    =
         Axiom_eq of int
       | Axiom_le of int
       | Axiom_lt of int
       | Eqmul of FuncUtil.poly * positivstellensatz
       | Product of positivstellensatz * positivstellensatz
       | Rational_eq of Rat.rat
       | Rational_le of Rat.rat
       | Rational_lt of Rat.rat
       | Square of FuncUtil.poly
       | Sum of positivstellensatz * positivstellensatz
    type prover =
       tree_choice list ->
         (thm list * thm list * thm list -> positivstellensatz -> thm) ->
           thm list * thm list * thm list -> thm * pss_tree
    datatype pss_tree
    = Branch of pss_tree * pss_tree | Cert of positivstellensatz | Trivial
    val real_linear_prover:
       (thm list * thm list * thm list -> positivstellensatz -> thm) ->
         thm list * thm list * thm list -> thm * pss_tree
    datatype tree_choice = Left | Right
  end
structure FuncUtil:
  sig
    structure Ctermfunc: FUNC
    structure Intfunc: FUNC
    structure Intpairfunc: FUNC
    structure Monomialfunc: FUNC
    structure Ratfunc: FUNC
    structure Symfunc: FUNC
    structure Termfunc: FUNC
    val dest_monomial: 'a Ctermfunc.table -> (cterm * 'a) list
    type monomial = int Ctermfunc.table
    val monomial_ord: int Ctermfunc.table * int Ctermfunc.table -> order
    val monomial_order: int Ctermfunc.table * int Ctermfunc.table -> order
    type poly = Rat.rat Monomialfunc.table
  end
structure RealArith: REAL_ARITH
### theory "HOL-Library.Extended_Nat"
### 0.768s elapsed time, 2.963s cpu time, 0.349s GC time
Loading theory "HOL-Analysis.Abstract_Topology_2" (required by "Draft.AlgebraMoreTemplates" via "Draft.Algebra" via "Draft.WellDefined" via "Draft.Healthiness" via "Draft.Embedding" via "Draft.Misc" via "HOL-Analysis.Multivariate_Analysis" via "HOL-Analysis.Ordered_Euclidean_Space" via "HOL-Analysis.Convex_Euclidean_Space" via "HOL-Analysis.Topology_Euclidean_Space" via "HOL-Analysis.Elementary_Normed_Spaces" via "HOL-Analysis.Elementary_Metric_Spaces")
signature POSITIVSTELLENSATZ_TOOLS =
  sig
    val print_cert: RealArith.pss_tree -> string
    val read_cert: Proof.context -> string -> RealArith.pss_tree
  end
structure Positivstellensatz_Tools: POSITIVSTELLENSATZ_TOOLS
class real_inner = real_normed_vector +
  fixes inner :: "'a => 'a => real"
  assumes "inner_commute": "!!x y. x \<bullet> y = y \<bullet> x"
    and
    "inner_add_left":
      "!!x y z. (x + y) \<bullet> z = x \<bullet> z + y \<bullet> z"
    and
    "inner_scaleR_left":
      "!!r x y. r *\<^sub>R x \<bullet> y = r * (x \<bullet> y)"
    and "inner_ge_zero": "!!x. 0 <= x \<bullet> x"
    and "inner_eq_zero_iff": "!!x. (x \<bullet> x = 0) = (x = (0::'a))"
    and "norm_eq_sqrt_inner": "!!x. norm x = sqrt (x \<bullet> x)"
signature SUM_OF_SQUARES =
  sig
    exception Failure of string
    val debug: bool Config.T
    val debug_message: Proof.context -> (unit -> string) -> unit
    datatype proof_method
    = Certificate of RealArith.pss_tree | Prover of string -> string
    val sos_tac:
       (RealArith.pss_tree -> unit) ->
         proof_method -> Proof.context -> int -> tactic
    val trace: bool Config.T
    val trace_message: Proof.context -> (unit -> string) -> unit
  end
structure Sum_of_Squares: SUM_OF_SQUARES
signature SOS_WRAPPER =
  sig val sos_tac: Proof.context -> string option -> int -> tactic end
structure SOS_Wrapper: SOS_WRAPPER
### theory "HOL-Library.Sum_of_Squares"
### 1.410s elapsed time, 5.466s cpu time, 0.662s GC time
Loading theory "HOL-Library.Extended_Real" (required by "Draft.AlgebraMoreTemplates" via "Draft.Algebra" via "Draft.WellDefined" via "Draft.Healthiness" via "Draft.Embedding" via "Draft.Misc" via "HOL-Analysis.Multivariate_Analysis" via "HOL-Analysis.Cross3" via "HOL-Analysis.Cartesian_Euclidean_Space" via "HOL-Analysis.Derivative" via "HOL-Analysis.Bounded_Linear_Function" via "HOL-Analysis.Uniform_Limit" via "HOL-Analysis.Summation_Tests")
bundle vec_syntax
bundle no_vec_syntax
instantiation
  vec :: (zero, finite) zero
  zero_vec == zero_class.zero :: ('a, 'b) vec
instantiation
  vec :: (plus, finite) plus
  plus_vec == plus :: ('a, 'b) vec => ('a, 'b) vec => ('a, 'b) vec
instantiation
  vec :: (minus, finite) minus
  minus_vec == minus :: ('a, 'b) vec => ('a, 'b) vec => ('a, 'b) vec
instantiation
  vec :: (uminus, finite) uminus
  uminus_vec == uminus :: ('a, 'b) vec => ('a, 'b) vec
instantiation
  vec :: (times, finite) times
  times_vec == times :: ('a, 'b) vec => ('a, 'b) vec => ('a, 'b) vec
instantiation
  vec :: (one, finite) one
  one_vec == one_class.one :: ('a, 'b) vec
instantiation
  vec :: (ord, finite) ord
  less_eq_vec == less_eq :: ('a, 'b) vec => ('a, 'b) vec => bool
  less_vec == less :: ('a, 'b) vec => ('a, 'b) vec => bool
instantiation
  vec :: (real_vector, finite) real_vector
  scaleR_vec == scaleR :: real => ('a, 'b) vec => ('a, 'b) vec
instantiation
  vec :: (topological_space, finite) topological_space
  open_vec == open :: ('a, 'b) vec set => bool
instantiation
  enat :: linorder_topology
  open_enat == open :: enat set => bool
instantiation
  vec :: (metric_space, finite) dist
  dist_vec == dist :: ('a, 'b) vec => ('a, 'b) vec => real
### theory "HOL-Analysis.Linear_Algebra"
### 1.064s elapsed time, 4.123s cpu time, 0.497s GC time
Loading theory "HOL-Analysis.Affine" (required by "Draft.AlgebraMoreTemplates" via "Draft.Algebra" via "Draft.WellDefined" via "Draft.Healthiness" via "Draft.Embedding" via "Draft.Misc" via "HOL-Analysis.Multivariate_Analysis" via "HOL-Analysis.Ordered_Euclidean_Space" via "HOL-Analysis.Convex_Euclidean_Space" via "HOL-Analysis.Convex")
instantiation
  vec :: (metric_space, finite) uniformity_dist
  uniformity_vec == uniformity :: (('a, 'b) vec * ('a, 'b) vec) filter
instantiation
  vec :: (metric_space, finite) metric_space
instantiation
  vec :: (real_normed_vector, finite) real_normed_vector
  sgn_vec == sgn :: ('a, 'b) vec => ('a, 'b) vec
  norm_vec == norm :: ('a, 'b) vec => real
instantiation
  vec :: (real_inner, finite) real_inner
  inner_vec == inner :: ('a, 'b) vec => ('a, 'b) vec => real
instantiation
  vec :: (euclidean_space, finite) euclidean_space
  Basis_vec == Basis :: ('a, 'b) vec set
instantiation
  ereal :: uminus
  uminus_ereal == uminus :: ereal => ereal
Found termination order: "{}"
instantiation
  ereal :: infinity
  infinity_ereal == infinity :: ereal
### theory "HOL-Analysis.Affine"
### 0.579s elapsed time, 2.212s cpu time, 0.374s GC time
Loading theory "HOL-Analysis.Convex" (required by "Draft.AlgebraMoreTemplates" via "Draft.Algebra" via "Draft.WellDefined" via "Draft.Healthiness" via "Draft.Embedding" via "Draft.Misc" via "HOL-Analysis.Multivariate_Analysis" via "HOL-Analysis.Ordered_Euclidean_Space" via "HOL-Analysis.Convex_Euclidean_Space")
### theory "HOL-Analysis.Finite_Cartesian_Product"
### 1.820s elapsed time, 7.010s cpu time, 0.975s GC time
Loading theory "HOL-Analysis.Cartesian_Space" (required by "Draft.AlgebraMoreTemplates" via "Draft.Algebra" via "Draft.WellDefined" via "Draft.Healthiness" via "Draft.Embedding" via "Draft.Misc" via "HOL-Analysis.Multivariate_Analysis" via "HOL-Analysis.Ordered_Euclidean_Space" via "HOL-Analysis.Convex_Euclidean_Space" via "HOL-Analysis.Topology_Euclidean_Space" via "HOL-Analysis.Elementary_Normed_Spaces")
instantiation
  ereal :: abs
  abs_ereal == abs :: ereal => ereal
### theory "HOL-Analysis.Abstract_Topology_2"
### 2.187s elapsed time, 8.308s cpu time, 3.392s GC time
Loading theory "HOL-Analysis.Connected" (required by "Draft.AlgebraMoreTemplates" via "Draft.Algebra" via "Draft.WellDefined" via "Draft.Healthiness" via "Draft.Embedding" via "Draft.Misc" via "HOL-Analysis.Multivariate_Analysis" via "HOL-Analysis.Ordered_Euclidean_Space" via "HOL-Analysis.Convex_Euclidean_Space" via "HOL-Analysis.Topology_Euclidean_Space" via "HOL-Analysis.Elementary_Normed_Spaces")
instantiation
  ereal :: {comm_monoid_add,zero_neq_one}
  one_ereal == one_class.one :: ereal
  zero_ereal == zero_class.zero :: ereal
  plus_ereal == plus :: ereal => ereal => ereal
instantiation
  ereal :: linorder
  less_eq_ereal == less_eq :: ereal => ereal => bool
  less_ereal == less :: ereal => ereal => bool
### theory "HOL-Analysis.Connected"
### 0.322s elapsed time, 1.256s cpu time, 0.131s GC time
Loading theory "HOL-Analysis.Function_Topology" (required by "Draft.AlgebraMoreTemplates" via "Draft.Algebra" via "Draft.WellDefined" via "Draft.Healthiness" via "Draft.Embedding" via "Draft.Misc" via "HOL-Analysis.Multivariate_Analysis" via "HOL-Analysis.Cross3" via "HOL-Analysis.Cartesian_Euclidean_Space" via "HOL-Analysis.Derivative" via "HOL-Analysis.Bounded_Linear_Function")
instantiation
  ereal :: {comm_monoid_mult,sgn}
  sgn_ereal == sgn :: ereal => ereal
  times_ereal == times :: ereal => ereal => ereal
instantiation
  ereal :: minus
  minus_ereal == minus :: ereal => ereal => ereal
instantiation
  fun :: (type, topological_space) topological_space
  open_fun == open :: ('a => 'b) set => bool
instantiation
  ereal :: inverse
  inverse_ereal == inverse :: ereal => ereal
  divide_ereal == divide :: ereal => ereal => ereal
### theory "HOL-Analysis.Convex"
### 1.696s elapsed time, 6.445s cpu time, 3.061s GC time
Loading theory "HOL-Analysis.Elementary_Metric_Spaces" (required by "Draft.AlgebraMoreTemplates" via "Draft.Algebra" via "Draft.WellDefined" via "Draft.Healthiness" via "Draft.Embedding" via "Draft.Misc" via "HOL-Analysis.Multivariate_Analysis" via "HOL-Analysis.Ordered_Euclidean_Space" via "HOL-Analysis.Convex_Euclidean_Space" via "HOL-Analysis.Topology_Euclidean_Space" via "HOL-Analysis.Elementary_Normed_Spaces")
instantiation
  ereal :: lattice
  inf_ereal == inf :: ereal => ereal => ereal
  sup_ereal == sup :: ereal => ereal => ereal
instantiation
  ereal :: complete_lattice
  Inf_ereal == Inf :: ereal set => ereal
  Sup_ereal == Sup :: ereal set => ereal
  bot_ereal == bot :: ereal
  top_ereal == top :: ereal
### theory "HOL-Analysis.Function_Topology"
### 0.750s elapsed time, 2.901s cpu time, 0.475s GC time
Loading theory "HOL-Analysis.Norm_Arith" (required by "Draft.AlgebraMoreTemplates" via "Draft.Algebra" via "Draft.WellDefined" via "Draft.Healthiness" via "Draft.Embedding" via "Draft.Misc" via "HOL-Analysis.Multivariate_Analysis" via "HOL-Analysis.Ordered_Euclidean_Space" via "HOL-Analysis.Convex_Euclidean_Space" via "HOL-Analysis.Topology_Euclidean_Space")
instantiation
  ereal :: linear_continuum_topology
  open_ereal == open :: ereal set => bool
locale linear_first_finite_dimensional_vector_space
  fixes scaleB :: "'a => 'b => 'b"  (infixr \<open>*b\<close> 75)
    and scaleC :: "'a => 'c => 'c"  (infixr \<open>*c\<close> 75)
    and BasisB :: "'b set"
    and f :: "'b => 'c"
  assumes "linear_first_finite_dimensional_vector_space (*b) (*c) BasisB f"
### ML warning (line 103 of "~~/src/HOL/Analysis/normarith.ML"):
### Matches are not exhaustive.
signature NORM_ARITH =
  sig
    val norm_arith: Proof.context -> conv
    val norm_arith_tac: Proof.context -> int -> tactic
  end
structure NormArith: NORM_ARITH
### theory "HOL-Analysis.Norm_Arith"
### 0.328s elapsed time, 1.243s cpu time, 0.182s GC time
"(bij, bij_betw, permutation)"
  :: "(('a => 'b) => bool) *
      (('c => 'd) => 'c set => 'd set => bool) * (('e => 'e) => bool)"
### theory "HOL-Analysis.Cartesian_Space"
### 2.476s elapsed time, 9.318s cpu time, 3.568s GC time
Loading theory "HOL-Analysis.Determinants" (required by "Draft.AlgebraMoreTemplates" via "Draft.Algebra" via "Draft.WellDefined" via "Draft.Healthiness" via "Draft.Embedding" via "Draft.Misc" via "HOL-Analysis.Multivariate_Analysis")
class heine_borel = metric_space +
  assumes
    "bounded_imp_convergent_subsequence":
      "!!f. bounded (range f) ==>
            EX l r. strict_mono r & (f o r) \<longlonglongrightarrow> l"
### theory "HOL-Library.Extended_Real"
### 4.605s elapsed time, 17.158s cpu time, 7.419s GC time
Loading theory "HOL-Library.Extended_Nonnegative_Real" (required by "Draft.AlgebraMoreTemplates" via "Draft.Algebra" via "Draft.WellDefined" via "Draft.Healthiness" via "Draft.Embedding" via "Draft.Misc" via "HOL-Analysis.Multivariate_Analysis" via "HOL-Analysis.Cross3" via "HOL-Analysis.Cartesian_Euclidean_Space" via "HOL-Analysis.Derivative" via "HOL-Analysis.Bounded_Linear_Function" via "HOL-Analysis.Uniform_Limit" via "HOL-Analysis.Summation_Tests" via "HOL-Analysis.Extended_Real_Limits")
"- \<infinity>"
  :: "ereal"
"\<infinity>"
  :: "ereal"
"ereal (13 / 4)"
  :: "ereal"
"True"
  :: "bool"
instantiation
  ennreal :: complete_linorder
  Inf_ennreal == Inf :: ennreal set => ennreal
  Sup_ennreal == Sup :: ennreal set => ennreal
  bot_ennreal == bot :: ennreal
  sup_ennreal == sup :: ennreal => ennreal => ennreal
  top_ennreal == top :: ennreal
  inf_ennreal == inf :: ennreal => ennreal => ennreal
  less_eq_ennreal == less_eq :: ennreal => ennreal => bool
  less_ennreal == less :: ennreal => ennreal => bool
"True"
  :: "bool"
### theory "HOL-Analysis.Determinants"
### 11.203s elapsed time, 36.991s cpu time, 33.616s GC time
instantiation
  ennreal :: infinity
  infinity_ennreal == infinity :: ennreal
instantiation
  ennreal :: {comm_semiring_1,semiring_1_no_zero_divisors}
  zero_ennreal == zero_class.zero :: ennreal
  plus_ennreal == plus :: ennreal => ennreal => ennreal
  one_ennreal == one_class.one :: ennreal
  times_ennreal == times :: ennreal => ennreal => ennreal
instantiation
  ennreal :: minus
  minus_ennreal == minus :: ennreal => ennreal => ennreal
instantiation
  ennreal :: inverse
  inverse_ennreal == inverse :: ennreal => ennreal
  divide_ennreal == divide :: ennreal => ennreal => ennreal
structure Cancel_Ennreal_Common:
  sig
    val dest_sum: term -> term list
    val dest_summing: term * term list -> term list
    val find_first: term -> term list -> term list
    val find_first_t: term list -> term -> term list -> term list
    val mk_eq: term * term -> term
    val mk_sum: typ -> term list -> term
    val norm_ss: simpset
    val norm_tac: Proof.context -> tactic
    val simplify_meta_eq: Proof.context -> thm -> thm -> thm
    val trans_tac: Proof.context -> thm option -> tactic
  end
structure Eq_Ennreal_Cancel:
  sig val proc: Proof.context -> term -> thm option end
structure Le_Ennreal_Cancel:
  sig val proc: Proof.context -> term -> thm option end
structure Less_Ennreal_Cancel:
  sig val proc: Proof.context -> term -> thm option end
### theory "HOL-Analysis.Elementary_Metric_Spaces"
### 12.139s elapsed time, 40.128s cpu time, 34.064s GC time
Loading theory "HOL-Analysis.Elementary_Normed_Spaces" (required by "Draft.AlgebraMoreTemplates" via "Draft.Algebra" via "Draft.WellDefined" via "Draft.Healthiness" via "Draft.Embedding" via "Draft.Misc" via "HOL-Analysis.Multivariate_Analysis" via "HOL-Analysis.Ordered_Euclidean_Space" via "HOL-Analysis.Convex_Euclidean_Space" via "HOL-Analysis.Topology_Euclidean_Space")
instantiation
  ennreal :: linear_continuum_topology
  open_ennreal == open :: ennreal set => bool
### theory "HOL-Library.Extended_Nonnegative_Real"
### 10.813s elapsed time, 34.506s cpu time, 30.630s GC time
### theory "HOL-Analysis.Elementary_Normed_Spaces"
### 0.994s elapsed time, 1.691s cpu time, 0.253s GC time
Loading theory "HOL-Analysis.Topology_Euclidean_Space" (required by "Draft.AlgebraMoreTemplates" via "Draft.Algebra" via "Draft.WellDefined" via "Draft.Healthiness" via "Draft.Embedding" via "Draft.Misc" via "HOL-Analysis.Multivariate_Analysis" via "HOL-Analysis.Ordered_Euclidean_Space" via "HOL-Analysis.Convex_Euclidean_Space")
### theory "HOL-Analysis.Topology_Euclidean_Space"
### 1.461s elapsed time, 1.694s cpu time, 0.316s GC time
Loading theory "HOL-Analysis.Convex_Euclidean_Space" (required by "Draft.AlgebraMoreTemplates" via "Draft.Algebra" via "Draft.WellDefined" via "Draft.Healthiness" via "Draft.Embedding" via "Draft.Misc" via "HOL-Analysis.Multivariate_Analysis" via "HOL-Analysis.Ordered_Euclidean_Space")
Loading theory "HOL-Analysis.Extended_Real_Limits" (required by "Draft.AlgebraMoreTemplates" via "Draft.Algebra" via "Draft.WellDefined" via "Draft.Healthiness" via "Draft.Embedding" via "Draft.Misc" via "HOL-Analysis.Multivariate_Analysis" via "HOL-Analysis.Cross3" via "HOL-Analysis.Cartesian_Euclidean_Space" via "HOL-Analysis.Derivative" via "HOL-Analysis.Bounded_Linear_Function" via "HOL-Analysis.Uniform_Limit" via "HOL-Analysis.Summation_Tests")
Loading theory "HOL-Analysis.Line_Segment" (required by "Draft.AlgebraMoreTemplates" via "Draft.Algebra" via "Draft.WellDefined" via "Draft.Healthiness" via "Draft.Embedding" via "Draft.Misc" via "HOL-Analysis.Multivariate_Analysis" via "HOL-Analysis.Cross3" via "HOL-Analysis.Cartesian_Euclidean_Space" via "HOL-Analysis.Derivative")
### theory "HOL-Analysis.Line_Segment"
### 0.842s elapsed time, 2.659s cpu time, 0.615s GC time
### theory "HOL-Analysis.Convex_Euclidean_Space"
### 0.916s elapsed time, 2.797s cpu time, 0.615s GC time
Loading theory "HOL-Analysis.Ordered_Euclidean_Space" (required by "Draft.AlgebraMoreTemplates" via "Draft.Algebra" via "Draft.WellDefined" via "Draft.Healthiness" via "Draft.Embedding" via "Draft.Misc" via "HOL-Analysis.Multivariate_Analysis")
Loading theory "HOL-Analysis.Starlike" (required by "Draft.AlgebraMoreTemplates" via "Draft.Algebra" via "Draft.WellDefined" via "Draft.Healthiness" via "Draft.Embedding" via "Draft.Misc" via "HOL-Analysis.Multivariate_Analysis")
### theory "HOL-Analysis.Extended_Real_Limits"
### 0.943s elapsed time, 2.871s cpu time, 0.615s GC time
Loading theory "HOL-Analysis.Summation_Tests" (required by "Draft.AlgebraMoreTemplates" via "Draft.Algebra" via "Draft.WellDefined" via "Draft.Healthiness" via "Draft.Embedding" via "Draft.Misc" via "HOL-Analysis.Multivariate_Analysis" via "HOL-Analysis.Cross3" via "HOL-Analysis.Cartesian_Euclidean_Space" via "HOL-Analysis.Derivative" via "HOL-Analysis.Bounded_Linear_Function" via "HOL-Analysis.Uniform_Limit")
### theory "HOL-Analysis.Summation_Tests"
### 0.724s elapsed time, 2.244s cpu time, 0.352s GC time
Loading theory "HOL-Analysis.Uniform_Limit" (required by "Draft.AlgebraMoreTemplates" via "Draft.Algebra" via "Draft.WellDefined" via "Draft.Healthiness" via "Draft.Embedding" via "Draft.Misc" via "HOL-Analysis.Multivariate_Analysis" via "HOL-Analysis.Cross3" via "HOL-Analysis.Cartesian_Euclidean_Space" via "HOL-Analysis.Derivative" via "HOL-Analysis.Bounded_Linear_Function")
class ordered_euclidean_space = Inf + Sup + euclidean_space + abs + inf +
  sup + ord +
  assumes
    "eucl_le":
      "!!x y. (x <= y) = (ALL i:Basis. x \<bullet> i <= y \<bullet> i)"
  assumes "eucl_less_le_not_le": "!!x y. (x < y) = (x <= y & ~ y <= x)"
  assumes
    "eucl_inf":
      "!!x y.
          inf x y =
          (SUM i:Basis. inf (x \<bullet> i) (y \<bullet> i) *\<^sub>R i)"
  assumes
    "eucl_sup":
      "!!x y.
          sup x y =
          (SUM i:Basis. sup (x \<bullet> i) (y \<bullet> i) *\<^sub>R i)"
  assumes
    "eucl_Inf":
      "!!X. Inf X = (SUM i:Basis. (INF x\<in>X. x \<bullet> i) *\<^sub>R i)"
  assumes
    "eucl_Sup":
      "!!X. Sup X = (SUM i:Basis. (SUP x\<in>X. x \<bullet> i) *\<^sub>R i)"
  assumes
    "eucl_abs":
      "!!x. \<bar>x\<bar> =
            (SUM i:Basis. \<bar>x \<bullet> i\<bar> *\<^sub>R i)"
### theory "HOL-Analysis.Uniform_Limit"
### 0.571s elapsed time, 1.770s cpu time, 0.292s GC time
Loading theory "HOL-Analysis.Bounded_Linear_Function" (required by "Draft.AlgebraMoreTemplates" via "Draft.Algebra" via "Draft.WellDefined" via "Draft.Healthiness" via "Draft.Embedding" via "Draft.Misc" via "HOL-Analysis.Multivariate_Analysis" via "HOL-Analysis.Cross3" via "HOL-Analysis.Cartesian_Euclidean_Space" via "HOL-Analysis.Derivative")
?a : affine hull ?S ==> aff_dim ?S = int (dim ((+) (- ?a) ` ?S))
### theory "HOL-Analysis.Starlike"
### 1.630s elapsed time, 5.071s cpu time, 0.957s GC time
instantiation
  blinfun :: (real_normed_vector, real_normed_vector) real_normed_vector
  uminus_blinfun == uminus ::
    'a \<Rightarrow>\<^sub>L 'b => 'a \<Rightarrow>\<^sub>L 'b
  zero_blinfun == zero_class.zero :: 'a \<Rightarrow>\<^sub>L 'b
  minus_blinfun == minus ::
    'a \<Rightarrow>\<^sub>L 'b
    => 'a \<Rightarrow>\<^sub>L 'b => 'a \<Rightarrow>\<^sub>L 'b
  plus_blinfun == plus ::
    'a \<Rightarrow>\<^sub>L 'b
    => 'a \<Rightarrow>\<^sub>L 'b => 'a \<Rightarrow>\<^sub>L 'b
  sgn_blinfun == sgn ::
    'a \<Rightarrow>\<^sub>L 'b => 'a \<Rightarrow>\<^sub>L 'b
  norm_blinfun == norm :: 'a \<Rightarrow>\<^sub>L 'b => real
  scaleR_blinfun == scaleR ::
    real => 'a \<Rightarrow>\<^sub>L 'b => 'a \<Rightarrow>\<^sub>L 'b
  dist_blinfun == dist ::
    'a \<Rightarrow>\<^sub>L 'b => 'a \<Rightarrow>\<^sub>L 'b => real
  uniformity_blinfun == uniformity ::
    ('a \<Rightarrow>\<^sub>L 'b * 'a \<Rightarrow>\<^sub>L 'b) filter
  open_blinfun == open :: ('a \<Rightarrow>\<^sub>L 'b) set => bool
locale bounded_bilinear
  fixes prod :: "'a => 'b => 'c"  (infixl \<open>**\<close> 70)
  assumes "bounded_bilinear (**)"
locale bounded_bilinear
  fixes prod :: "'a => 'b => 'c"  (infixl \<open>**\<close> 70)
  assumes "bounded_bilinear (**)"
### theory "HOL-Analysis.Bounded_Linear_Function"
### 1.515s elapsed time, 3.444s cpu time, 0.325s GC time
Loading theory "HOL-Analysis.Derivative" (required by "Draft.AlgebraMoreTemplates" via "Draft.Algebra" via "Draft.WellDefined" via "Draft.Healthiness" via "Draft.Embedding" via "Draft.Misc" via "HOL-Analysis.Multivariate_Analysis" via "HOL-Analysis.Cross3" via "HOL-Analysis.Cartesian_Euclidean_Space")
instantiation
  prod :: (abs, abs) abs
  abs_prod == abs :: 'a * 'b => 'a * 'b
instantiation
  vec :: (ordered_euclidean_space, finite) ordered_euclidean_space
  abs_vec == abs :: ('a, 'b) vec => ('a, 'b) vec
  inf_vec == inf :: ('a, 'b) vec => ('a, 'b) vec => ('a, 'b) vec
  sup_vec == sup :: ('a, 'b) vec => ('a, 'b) vec => ('a, 'b) vec
  Inf_vec == Inf :: ('a, 'b) vec set => ('a, 'b) vec
  Sup_vec == Sup :: ('a, 'b) vec set => ('a, 'b) vec
### theory "HOL-Analysis.Ordered_Euclidean_Space"
### 3.025s elapsed time, 7.987s cpu time, 1.095s GC time
### theory "HOL-Analysis.Derivative"
### 1.357s elapsed time, 1.694s cpu time, 0.290s GC time
Loading theory "HOL-Analysis.Cartesian_Euclidean_Space" (required by "Draft.AlgebraMoreTemplates" via "Draft.Algebra" via "Draft.WellDefined" via "Draft.Healthiness" via "Draft.Embedding" via "Draft.Misc" via "HOL-Analysis.Multivariate_Analysis" via "HOL-Analysis.Cross3")
Loading theory "HOL-Analysis.Lipschitz" (required by "Draft.AlgebraMoreTemplates" via "Draft.Algebra" via "Draft.WellDefined" via "Draft.Healthiness" via "Draft.Embedding" via "Draft.Misc" via "HOL-Analysis.Multivariate_Analysis")
bundle lipschitz_syntax
bundle no_lipschitz_syntax
### theory "HOL-Analysis.Cartesian_Euclidean_Space"
### 0.260s elapsed time, 0.576s cpu time, 0.120s GC time
Loading theory "HOL-Analysis.Cross3" (required by "Draft.AlgebraMoreTemplates" via "Draft.Algebra" via "Draft.WellDefined" via "Draft.Healthiness" via "Draft.Embedding" via "Draft.Misc" via "HOL-Analysis.Multivariate_Analysis")
### theory "HOL-Analysis.Lipschitz"
### 0.425s elapsed time, 0.939s cpu time, 0.189s GC time
bundle cross3_syntax
bundle no_cross3_syntax
### theory "HOL-Analysis.Cross3"
### 1.726s elapsed time, 2.098s cpu time, 0.311s GC time
Loading theory "HOL-Analysis.Multivariate_Analysis" (required by "Draft.AlgebraMoreTemplates" via "Draft.Algebra" via "Draft.WellDefined" via "Draft.Healthiness" via "Draft.Embedding" via "Draft.Misc")
### theory "HOL-Analysis.Multivariate_Analysis"
### 0.829s elapsed time, 0.866s cpu time, 0.047s GC time
Loading theory "Draft.Misc" (required by "Draft.AlgebraMoreTemplates" via "Draft.Algebra" via "Draft.WellDefined" via "Draft.Healthiness" via "Draft.Embedding")
### theory "Draft.Misc"
### 0.117s elapsed time, 0.117s cpu time, 0.000s GC time
Loading theory "Draft.Expectations" (required by "Draft.AlgebraMoreTemplates" via "Draft.Algebra" via "Draft.WellDefined" via "Draft.Healthiness" via "Draft.Embedding" via "Draft.Induction")
### theory "Draft.Expectations"
### 0.277s elapsed time, 0.325s cpu time, 0.065s GC time
Loading theory "Draft.Transformers" (required by "Draft.AlgebraMoreTemplates" via "Draft.Algebra" via "Draft.WellDefined" via "Draft.Healthiness" via "Draft.Embedding" via "Draft.Induction")
bound_of (%x. ?c) = ?c
### Ambiguous input (line 651 of "$AFP/pGCL/Transformers.thy") produces 32 parse trees (10 displayed):
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.iff"
###     ("_applC" ("_position" nearly_healthy) ("_position" t))
###     ("\<^const>HOL.conj"
###       ("\<^const>HOL.All_binder" ("_position" P)
###         ("\<^const>HOL.implies"
###           ("_applC" ("_position" unitary) ("_position" P))
###           ("_applC" ("_position" unitary)
###             ("_applC" ("_position" t) ("_position" P)))))
###       ("\<^const>HOL.All_binder" ("_idts" ("_position" P) ("_position" Q))
###         ("\<^const>HOL.implies"
###           ("_applC" ("_position" unitary) ("_position" P))
###           ("\<^const>HOL.implies"
###             ("_applC" ("_position" unitary) ("_position" Q))
###             ("\<^const>Expectations.entails"
###               ("\<^const>HOL.implies"
###                 ("\<^const>Expectations.entails" ("_position" P)
###                   ("_position" Q))
###                 ("_applC" ("_position" t) ("_position" P)))
###               ("_applC" ("_position" t) ("_position" Q)))))))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.iff"
###     ("_applC" ("_position" nearly_healthy) ("_position" t))
###     ("\<^const>HOL.conj"
###       ("\<^const>HOL.All_binder" ("_position" P)
###         ("\<^const>HOL.implies"
###           ("_applC" ("_position" unitary) ("_position" P))
###           ("_applC" ("_position" unitary)
###             ("_applC" ("_position" t) ("_position" P)))))
###       ("\<^const>HOL.All_binder" ("_idts" ("_position" P) ("_position" Q))
###         ("\<^const>HOL.implies"
###           ("_applC" ("_position" unitary) ("_position" P))
###           ("\<^const>Expectations.entails"
###             ("\<^const>HOL.implies"
###               ("_applC" ("_position" unitary) ("_position" Q))
###               ("\<^const>HOL.implies"
###                 ("\<^const>Expectations.entails" ("_position" P)
###                   ("_position" Q))
###                 ("_applC" ("_position" t) ("_position" P))))
###             ("_applC" ("_position" t) ("_position" Q))))))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.iff"
###     ("_applC" ("_position" nearly_healthy) ("_position" t))
###     ("\<^const>HOL.conj"
###       ("\<^const>HOL.All_binder" ("_position" P)
###         ("\<^const>HOL.implies"
###           ("_applC" ("_position" unitary) ("_position" P))
###           ("_applC" ("_position" unitary)
###             ("_applC" ("_position" t) ("_position" P)))))
###       ("\<^const>Expectations.entails"
###         ("\<^const>HOL.All_binder" ("_idts" ("_position" P) ("_position" Q))
###           ("\<^const>HOL.implies"
###             ("_applC" ("_position" unitary) ("_position" P))
###             ("\<^const>HOL.implies"
###               ("_applC" ("_position" unitary) ("_position" Q))
###               ("\<^const>HOL.implies"
###                 ("\<^const>Expectations.entails" ("_position" P)
###                   ("_position" Q))
###                 ("_applC" ("_position" t) ("_position" P))))))
###         ("_applC" ("_position" t) ("_position" Q))))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.iff"
###     ("_applC" ("_position" nearly_healthy) ("_position" t))
###     ("\<^const>HOL.conj"
###       ("\<^const>HOL.All_binder" ("_position" P)
###         ("\<^const>HOL.implies"
###           ("_applC" ("_position" unitary) ("_position" P))
###           ("_applC" ("_position" unitary)
###             ("_applC" ("_position" t) ("_position" P)))))
###       ("\<^const>HOL.All_binder" ("_idts" ("_position" P) ("_position" Q))
###         ("\<^const>Expectations.entails"
###           ("\<^const>HOL.implies"
###             ("_applC" ("_position" unitary) ("_position" P))
###             ("\<^const>HOL.implies"
###               ("_applC" ("_position" unitary) ("_position" Q))
###               ("\<^const>HOL.implies"
###                 ("\<^const>Expectations.entails" ("_position" P)
###                   ("_position" Q))
###                 ("_applC" ("_position" t) ("_position" P)))))
###           ("_applC" ("_position" t) ("_position" Q)))))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.iff"
###     ("_applC" ("_position" nearly_healthy) ("_position" t))
###     ("\<^const>HOL.conj"
###       ("\<^const>HOL.All_binder" ("_position" P)
###         ("\<^const>HOL.implies"
###           ("_applC" ("_position" unitary) ("_position" P))
###           ("_applC" ("_position" unitary)
###             ("_applC" ("_position" t) ("_position" P)))))
###       ("\<^const>HOL.All_binder" ("_idts" ("_position" P) ("_position" Q))
###         ("\<^const>HOL.implies"
###           ("_applC" ("_position" unitary) ("_position" P))
###           ("\<^const>Expectations.entails"
###             ("\<^const>HOL.implies"
###               ("\<^const>Expectations.entails"
###                 ("\<^const>HOL.implies"
###                   ("_applC" ("_position" unitary) ("_position" Q))
###                   ("_position" P))
###                 ("_position" Q))
###               ("_applC" ("_position" t) ("_position" P)))
###             ("_applC" ("_position" t) ("_position" Q))))))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.iff"
###     ("_applC" ("_position" nearly_healthy) ("_position" t))
###     ("\<^const>HOL.conj"
###       ("\<^const>HOL.All_binder" ("_position" P)
###         ("\<^const>HOL.implies"
###           ("_applC" ("_position" unitary) ("_position" P))
###           ("_applC" ("_position" unitary)
###             ("_applC" ("_position" t) ("_position" P)))))
###       ("\<^const>Expectations.entails"
###         ("\<^const>HOL.All_binder" ("_idts" ("_position" P) ("_position" Q))
###           ("\<^const>HOL.implies"
###             ("_applC" ("_position" unitary) ("_position" P))
###             ("\<^const>HOL.implies"
###               ("\<^const>Expectations.entails"
###                 ("\<^const>HOL.implies"
###                   ("_applC" ("_position" unitary) ("_position" Q))
###                   ("_position" P))
###                 ("_position" Q))
###               ("_applC" ("_position" t) ("_position" P)))))
###         ("_applC" ("_position" t) ("_position" Q))))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.iff"
###     ("_applC" ("_position" nearly_healthy) ("_position" t))
###     ("\<^const>HOL.conj"
###       ("\<^const>HOL.All_binder" ("_position" P)
###         ("\<^const>HOL.implies"
###           ("_applC" ("_position" unitary) ("_position" P))
###           ("_applC" ("_position" unitary)
###             ("_applC" ("_position" t) ("_position" P)))))
###       ("\<^const>HOL.All_binder" ("_idts" ("_position" P) ("_position" Q))
###         ("\<^const>Expectations.entails"
###           ("\<^const>HOL.implies"
###             ("_applC" ("_position" unitary) ("_position" P))
###             ("\<^const>HOL.implies"
###               ("\<^const>Expectations.entails"
###                 ("\<^const>HOL.implies"
###                   ("_applC" ("_position" unitary) ("_position" Q))
###                   ("_position" P))
###                 ("_position" Q))
###               ("_applC" ("_position" t) ("_position" P))))
###           ("_applC" ("_position" t) ("_position" Q)))))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.iff"
###     ("_applC" ("_position" nearly_healthy) ("_position" t))
###     ("\<^const>HOL.conj"
###       ("\<^const>HOL.All_binder" ("_position" P)
###         ("\<^const>HOL.implies"
###           ("_applC" ("_position" unitary) ("_position" P))
###           ("_applC" ("_position" unitary)
###             ("_applC" ("_position" t) ("_position" P)))))
###       ("\<^const>Expectations.entails"
###         ("\<^const>HOL.implies"
###           ("\<^const>Expectations.entails"
###             ("\<^const>HOL.All_binder"
###               ("_idts" ("_position" P) ("_position" Q))
###               ("\<^const>HOL.implies"
###                 ("_applC" ("_position" unitary) ("_position" P))
###                 ("\<^const>HOL.implies"
###                   ("_applC" ("_position" unitary) ("_position" Q))
###                   ("_position" P))))
###             ("_position" Q))
###           ("_applC" ("_position" t) ("_position" P)))
###         ("_applC" ("_position" t) ("_position" Q))))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.iff"
###     ("_applC" ("_position" nearly_healthy) ("_position" t))
###     ("\<^const>HOL.conj"
###       ("\<^const>HOL.All_binder" ("_position" P)
###         ("\<^const>HOL.implies"
###           ("_applC" ("_position" unitary) ("_position" P))
###           ("_applC" ("_position" unitary)
###             ("_applC" ("_position" t) ("_position" P)))))
###       ("\<^const>Expectations.entails"
###         ("\<^const>HOL.All_binder" ("_idts" ("_position" P) ("_position" Q))
###           ("\<^const>HOL.implies"
###             ("\<^const>Expectations.entails"
###               ("\<^const>HOL.implies"
###                 ("_applC" ("_position" unitary) ("_position" P))
###                 ("\<^const>HOL.implies"
###                   ("_applC" ("_position" unitary) ("_position" Q))
###                   ("_position" P)))
###               ("_position" Q))
###             ("_applC" ("_position" t) ("_position" P))))
###         ("_applC" ("_position" t) ("_position" Q))))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.iff"
###     ("_applC" ("_position" nearly_healthy) ("_position" t))
###     ("\<^const>HOL.conj"
###       ("\<^const>HOL.All_binder" ("_position" P)
###         ("\<^const>HOL.implies"
###           ("_applC" ("_position" unitary) ("_position" P))
###           ("_applC" ("_position" unitary)
###             ("_applC" ("_position" t) ("_position" P)))))
###       ("\<^const>HOL.All_binder" ("_idts" ("_position" P) ("_position" Q))
###         ("\<^const>Expectations.entails"
###           ("\<^const>HOL.implies"
###             ("\<^const>Expectations.entails"
###               ("\<^const>HOL.implies"
###                 ("_applC" ("_position" unitary) ("_position" P))
###                 ("\<^const>HOL.implies"
###                   ("_applC" ("_position" unitary) ("_position" Q))
###                   ("_position" P)))
###               ("_position" Q))
###             ("_applC" ("_position" t) ("_position" P)))
###           ("_applC" ("_position" t) ("_position" Q)))))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 787 of "$AFP/pGCL/Transformers.thy") produces 2 parse trees:
### ("_bigimpl"
###   ("_asm"
###     ("\<^const>Pure.all_binder" ("_idts" ("_position" P) ("_position" Q))
###       ("_bigimpl"
###         ("_asms"
###           ("\<^const>HOL.Trueprop"
###             ("_applC" ("_position" sound) ("_position" P)))
###           ("_asm"
###             ("\<^const>HOL.Trueprop"
###               ("_applC" ("_position" sound) ("_position" Q)))))
###         ("\<^const>HOL.Trueprop"
###           ("\<^const>Expectations.entails"
###             ("_lambda" ("_position" s)
###               ("\<^const>Groups.plus_class.plus"
###                 ("_applC" ("_position" t)
###                   ("_cargs" ("_position" P) ("_position" s)))
###                 ("_applC" ("_position" t)
###                   ("_cargs" ("_position" Q) ("_position" s)))))
###             ("_applC" ("_position" t)
###               ("_lambda" ("_position" s)
###                 ("\<^const>Groups.plus_class.plus"
###                   ("_applC" ("_position" P) ("_position" s))
###                   ("_applC" ("_position" Q) ("_position" s))))))))))
###   ("\<^const>HOL.Trueprop"
###     ("_applC" ("_position" sub_add) ("_position" t))))
### ("_bigimpl"
###   ("_asm"
###     ("\<^const>Pure.all_binder" ("_idts" ("_position" P) ("_position" Q))
###       ("_bigimpl"
###         ("_asms"
###           ("\<^const>HOL.Trueprop"
###             ("_applC" ("_position" sound) ("_position" P)))
###           ("_asm"
###             ("\<^const>HOL.Trueprop"
###               ("_applC" ("_position" sound) ("_position" Q)))))
###         ("\<^const>HOL.Trueprop"
###           ("_lambda" ("_position" s)
###             ("\<^const>Expectations.entails"
###               ("\<^const>Groups.plus_class.plus"
###                 ("_applC" ("_position" t)
###                   ("_cargs" ("_position" P) ("_position" s)))
###                 ("_applC" ("_position" t)
###                   ("_cargs" ("_position" Q) ("_position" s))))
###               ("_applC" ("_position" t)
###                 ("_lambda" ("_position" s)
###                   ("\<^const>Groups.plus_class.plus"
###                     ("_applC" ("_position" P) ("_position" s))
###                     ("_applC" ("_position" Q) ("_position" s)))))))))))
###   ("\<^const>HOL.Trueprop"
###     ("_applC" ("_position" sub_add) ("_position" t))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 958 of "$AFP/pGCL/Transformers.thy") produces 2 parse trees:
### ("_bigimpl"
###   ("_asm"
###     ("\<^const>Pure.all_binder" ("_position" P)
###       ("\<^const>Pure.imp"
###         ("\<^const>HOL.Trueprop"
###           ("_applC" ("_position" sound) ("_position" P)))
###         ("\<^const>HOL.Trueprop"
###           ("\<^const>Expectations.entails"
###             ("_lambda" ("_position" s)
###               ("\<^const>Misc.tminus"
###                 ("_applC" ("_position" t)
###                   ("_cargs" ("_position" P) ("_position" s)))
###                 ("\<^const>Groups.one_class.one")))
###             ("_applC" ("_position" t)
###               ("_lambda" ("_position" s)
###                 ("\<^const>Misc.tminus"
###                   ("_applC" ("_position" P) ("_position" s))
###                   ("\<^const>Groups.one_class.one")))))))))
###   ("\<^const>HOL.Trueprop"
###     ("_applC" ("_position" sub_distrib) ("_position" t))))
### ("_bigimpl"
###   ("_asm"
###     ("\<^const>Pure.all_binder" ("_position" P)
###       ("\<^const>Pure.imp"
###         ("\<^const>HOL.Trueprop"
###           ("_applC" ("_position" sound) ("_position" P)))
###         ("\<^const>HOL.Trueprop"
###           ("_lambda" ("_position" s)
###             ("\<^const>Expectations.entails"
###               ("\<^const>Misc.tminus"
###                 ("_applC" ("_position" t)
###                   ("_cargs" ("_position" P) ("_position" s)))
###                 ("\<^const>Groups.one_class.one"))
###               ("_applC" ("_position" t)
###                 ("_lambda" ("_position" s)
###                   ("\<^const>Misc.tminus"
###                     ("_applC" ("_position" P) ("_position" s))
###                     ("\<^const>Groups.one_class.one"))))))))))
###   ("\<^const>HOL.Trueprop"
###     ("_applC" ("_position" sub_distrib) ("_position" t))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 1101 of "$AFP/pGCL/Transformers.thy") produces 3 parse trees:
### ("\<^const>Pure.eq" ("_applC" ("_position" sub_conj) ("_position" t))
###   ("\<^const>Expectations.entails"
###     ("\<^const>HOL.All_binder" ("_idts" ("_position" P) ("_position" Q))
###       ("\<^const>HOL.implies"
###         ("\<^const>HOL.conj" ("_applC" ("_position" sound) ("_position" P))
###           ("_applC" ("_position" sound) ("_position" Q)))
###         ("\<^const>Expectations.exp_conj"
###           ("_applC" ("_position" t) ("_position" P))
###           ("_applC" ("_position" t) ("_position" Q)))))
###     ("_applC" ("_position" t)
###       ("\<^const>Expectations.exp_conj" ("_position" P) ("_position" Q)))))
### ("\<^const>Pure.eq" ("_applC" ("_position" sub_conj) ("_position" t))
###   ("\<^const>HOL.All_binder" ("_idts" ("_position" P) ("_position" Q))
###     ("\<^const>Expectations.entails"
###       ("\<^const>HOL.implies"
###         ("\<^const>HOL.conj" ("_applC" ("_position" sound) ("_position" P))
###           ("_applC" ("_position" sound) ("_position" Q)))
###         ("\<^const>Expectations.exp_conj"
###           ("_applC" ("_position" t) ("_position" P))
###           ("_applC" ("_position" t) ("_position" Q))))
###       ("_applC" ("_position" t)
###         ("\<^const>Expectations.exp_conj" ("_position" P)
###           ("_position" Q))))))
### ("\<^const>Pure.eq" ("_applC" ("_position" sub_conj) ("_position" t))
###   ("\<^const>HOL.All_binder" ("_idts" ("_position" P) ("_position" Q))
###     ("\<^const>HOL.implies"
###       ("\<^const>HOL.conj" ("_applC" ("_position" sound) ("_position" P))
###         ("_applC" ("_position" sound) ("_position" Q)))
###       ("\<^const>Expectations.entails"
###         ("\<^const>Expectations.exp_conj"
###           ("_applC" ("_position" t) ("_position" P))
###           ("_applC" ("_position" t) ("_position" Q)))
###         ("_applC" ("_position" t)
###           ("\<^const>Expectations.exp_conj" ("_position" P)
###             ("_position" Q)))))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### theory "Draft.Transformers"
### 0.487s elapsed time, 0.588s cpu time, 0.127s GC time
Loading theory "Draft.Induction" (required by "Draft.AlgebraMoreTemplates" via "Draft.Algebra" via "Draft.WellDefined" via "Draft.Healthiness" via "Draft.Embedding")
### Ambiguous input (line 265 of "$AFP/pGCL/Induction.thy") produces 5 parse trees:
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("_Ball" ("_position" t) ("_position" S)
###         ("\<^const>HOL.All_binder" ("_position" P)
###           ("\<^const>HOL.implies"
###             ("_applC" ("_position" nneg) ("_position" P))
###             ("\<^const>HOL.implies"
###               ("_applC" ("_position" bounded_by)
###                 ("_cargs" ("_position" b) ("_position" P)))
###               ("\<^const>Expectations.entails"
###                 ("_applC" ("_position" t) ("_position" P))
###                 ("_applC" ("_position" u) ("_position" P))))))))
###     ("_asms"
###       ("\<^const>HOL.Trueprop"
###         ("_Ball" ("_position" u) ("_position" S)
###           ("\<^const>HOL.All_binder" ("_position" P)
###             ("\<^const>HOL.implies"
###               ("\<^const>HOL.conj"
###                 ("_applC" ("_position" nneg) ("_position" P))
###                 ("_applC" ("_position" bounded_by)
###                   ("_cargs" ("_position" b) ("_position" P))))
###               ("\<^const>HOL.conj"
###                 ("_applC" ("_position" nneg)
###                   ("_applC" ("_position" u) ("_position" P)))
###                 ("_applC" ("_position" bounded_by)
###                   ("_cargs" ("_position" b)
###                     ("_applC" ("_position" u) ("_position" P)))))))))
###       ("_asms"
###         ("\<^const>HOL.Trueprop"
###           ("_applC" ("_position" nneg) ("_position" P)))
###         ("_asms"
###           ("\<^const>HOL.Trueprop"
###             ("_applC" ("_position" bounded_by)
###               ("_cargs" ("_position" b) ("_position" P))))
###           ("_asm"
###             ("\<^const>Pure.all_binder" ("_position" P)
###               ("_bigimpl"
###                 ("_asms"
###                   ("\<^const>HOL.Trueprop"
###                     ("_applC" ("_position" nneg) ("_position" P)))
###                   ("_asm"
###                     ("\<^const>HOL.Trueprop"
###                       ("_applC" ("_position" bounded_by)
###                         ("_cargs" ("_position" b) ("_position" P))))))
###                 ("\<^const>HOL.Trueprop"
###                   ("_applC" ("_position" nneg)
###                     ("_applC" ("_position" u) ("_position" P)))))))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Expectations.entails"
###       ("_applC" ("_position" Sup_trans)
###         ("_cargs" ("_position" S) ("_position" P)))
###       ("_applC" ("_position" u) ("_position" P)))))
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("_Ball" ("_position" t) ("_position" S)
###         ("\<^const>HOL.All_binder" ("_position" P)
###           ("\<^const>HOL.implies"
###             ("_applC" ("_position" nneg) ("_position" P))
###             ("\<^const>Expectations.entails"
###               ("\<^const>HOL.implies"
###                 ("_applC" ("_position" bounded_by)
###                   ("_cargs" ("_position" b) ("_position" P)))
###                 ("_applC" ("_position" t) ("_position" P)))
###               ("_applC" ("_position" u) ("_position" P)))))))
###     ("_asms"
###       ("\<^const>HOL.Trueprop"
###         ("_Ball" ("_position" u) ("_position" S)
###           ("\<^const>HOL.All_binder" ("_position" P)
###             ("\<^const>HOL.implies"
###               ("\<^const>HOL.conj"
###                 ("_applC" ("_position" nneg) ("_position" P))
###                 ("_applC" ("_position" bounded_by)
###                   ("_cargs" ("_position" b) ("_position" P))))
###               ("\<^const>HOL.conj"
###                 ("_applC" ("_position" nneg)
###                   ("_applC" ("_position" u) ("_position" P)))
###                 ("_applC" ("_position" bounded_by)
###                   ("_cargs" ("_position" b)
###                     ("_applC" ("_position" u) ("_position" P)))))))))
###       ("_asms"
###         ("\<^const>HOL.Trueprop"
###           ("_applC" ("_position" nneg) ("_position" P)))
###         ("_asms"
###           ("\<^const>HOL.Trueprop"
###             ("_applC" ("_position" bounded_by)
###               ("_cargs" ("_position" b) ("_position" P))))
###           ("_asm"
###             ("\<^const>Pure.all_binder" ("_position" P)
###               ("_bigimpl"
###                 ("_asms"
###                   ("\<^const>HOL.Trueprop"
###                     ("_applC" ("_position" nneg) ("_position" P)))
###                   ("_asm"
###                     ("\<^const>HOL.Trueprop"
###                       ("_applC" ("_position" bounded_by)
###                         ("_cargs" ("_position" b) ("_position" P))))))
###                 ("\<^const>HOL.Trueprop"
###                   ("_applC" ("_position" nneg)
###                     ("_applC" ("_position" u) ("_position" P)))))))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Expectations.entails"
###       ("_applC" ("_position" Sup_trans)
###         ("_cargs" ("_position" S) ("_position" P)))
###       ("_applC" ("_position" u) ("_position" P)))))
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("_Ball" ("_position" t) ("_position" S)
###         ("\<^const>HOL.All_binder" ("_position" P)
###           ("\<^const>Expectations.entails"
###             ("\<^const>HOL.implies"
###               ("_applC" ("_position" nneg) ("_position" P))
###               ("\<^const>HOL.implies"
###                 ("_applC" ("_position" bounded_by)
###                   ("_cargs" ("_position" b) ("_position" P)))
###                 ("_applC" ("_position" t) ("_position" P))))
###             ("_applC" ("_position" u) ("_position" P))))))
###     ("_asms"
###       ("\<^const>HOL.Trueprop"
###         ("_Ball" ("_position" u) ("_position" S)
###           ("\<^const>HOL.All_binder" ("_position" P)
###             ("\<^const>HOL.implies"
###               ("\<^const>HOL.conj"
###                 ("_applC" ("_position" nneg) ("_position" P))
###                 ("_applC" ("_position" bounded_by)
###                   ("_cargs" ("_position" b) ("_position" P))))
###               ("\<^const>HOL.conj"
###                 ("_applC" ("_position" nneg)
###                   ("_applC" ("_position" u) ("_position" P)))
###                 ("_applC" ("_position" bounded_by)
###                   ("_cargs" ("_position" b)
###                     ("_applC" ("_position" u) ("_position" P)))))))))
###       ("_asms"
###         ("\<^const>HOL.Trueprop"
###           ("_applC" ("_position" nneg) ("_position" P)))
###         ("_asms"
###           ("\<^const>HOL.Trueprop"
###             ("_applC" ("_position" bounded_by)
###               ("_cargs" ("_position" b) ("_position" P))))
###           ("_asm"
###             ("\<^const>Pure.all_binder" ("_position" P)
###               ("_bigimpl"
###                 ("_asms"
###                   ("\<^const>HOL.Trueprop"
###                     ("_applC" ("_position" nneg) ("_position" P)))
###                   ("_asm"
###                     ("\<^const>HOL.Trueprop"
###                       ("_applC" ("_position" bounded_by)
###                         ("_cargs" ("_position" b) ("_position" P))))))
###                 ("\<^const>HOL.Trueprop"
###                   ("_applC" ("_position" nneg)
###                     ("_applC" ("_position" u) ("_position" P)))))))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Expectations.entails"
###       ("_applC" ("_position" Sup_trans)
###         ("_cargs" ("_position" S) ("_position" P)))
###       ("_applC" ("_position" u) ("_position" P)))))
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>Expectations.entails"
###         ("_Ball" ("_position" t) ("_position" S)
###           ("\<^const>HOL.All_binder" ("_position" P)
###             ("\<^const>HOL.implies"
###               ("_applC" ("_position" nneg) ("_position" P))
###               ("\<^const>HOL.implies"
###                 ("_applC" ("_position" bounded_by)
###                   ("_cargs" ("_position" b) ("_position" P)))
###                 ("_applC" ("_position" t) ("_position" P))))))
###         ("_applC" ("_position" u) ("_position" P))))
###     ("_asms"
###       ("\<^const>HOL.Trueprop"
###         ("_Ball" ("_position" u) ("_position" S)
###           ("\<^const>HOL.All_binder" ("_position" P)
###             ("\<^const>HOL.implies"
###               ("\<^const>HOL.conj"
###                 ("_applC" ("_position" nneg) ("_position" P))
###                 ("_applC" ("_position" bounded_by)
###                   ("_cargs" ("_position" b) ("_position" P))))
###               ("\<^const>HOL.conj"
###                 ("_applC" ("_position" nneg)
###                   ("_applC" ("_position" u) ("_position" P)))
###                 ("_applC" ("_position" bounded_by)
###                   ("_cargs" ("_position" b)
###                     ("_applC" ("_position" u) ("_position" P)))))))))
###       ("_asms"
###         ("\<^const>HOL.Trueprop"
###           ("_applC" ("_position" nneg) ("_position" P)))
###         ("_asms"
###           ("\<^const>HOL.Trueprop"
###             ("_applC" ("_position" bounded_by)
###               ("_cargs" ("_position" b) ("_position" P))))
###           ("_asm"
###             ("\<^const>Pure.all_binder" ("_position" P)
###               ("_bigimpl"
###                 ("_asms"
###                   ("\<^const>HOL.Trueprop"
###                     ("_applC" ("_position" nneg) ("_position" P)))
###                   ("_asm"
###                     ("\<^const>HOL.Trueprop"
###                       ("_applC" ("_position" bounded_by)
###                         ("_cargs" ("_position" b) ("_position" P))))))
###                 ("\<^const>HOL.Trueprop"
###                   ("_applC" ("_position" nneg)
###                     ("_applC" ("_position" u) ("_position" P)))))))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Expectations.entails"
###       ("_applC" ("_position" Sup_trans)
###         ("_cargs" ("_position" S) ("_position" P)))
###       ("_applC" ("_position" u) ("_position" P)))))
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("_Ball" ("_position" t) ("_position" S)
###         ("\<^const>Expectations.entails"
###           ("\<^const>HOL.All_binder" ("_position" P)
###             ("\<^const>HOL.implies"
###               ("_applC" ("_position" nneg) ("_position" P))
###               ("\<^const>HOL.implies"
###                 ("_applC" ("_position" bounded_by)
###                   ("_cargs" ("_position" b) ("_position" P)))
###                 ("_applC" ("_position" t) ("_position" P)))))
###           ("_applC" ("_position" u) ("_position" P)))))
###     ("_asms"
###       ("\<^const>HOL.Trueprop"
###         ("_Ball" ("_position" u) ("_position" S)
###           ("\<^const>HOL.All_binder" ("_position" P)
###             ("\<^const>HOL.implies"
###               ("\<^const>HOL.conj"
###                 ("_applC" ("_position" nneg) ("_position" P))
###                 ("_applC" ("_position" bounded_by)
###                   ("_cargs" ("_position" b) ("_position" P))))
###               ("\<^const>HOL.conj"
###                 ("_applC" ("_position" nneg)
###                   ("_applC" ("_position" u) ("_position" P)))
###                 ("_applC" ("_position" bounded_by)
###                   ("_cargs" ("_position" b)
###                     ("_applC" ("_position" u) ("_position" P)))))))))
###       ("_asms"
###         ("\<^const>HOL.Trueprop"
###           ("_applC" ("_position" nneg) ("_position" P)))
###         ("_asms"
###           ("\<^const>HOL.Trueprop"
###             ("_applC" ("_position" bounded_by)
###               ("_cargs" ("_position" b) ("_position" P))))
###           ("_asm"
###             ("\<^const>Pure.all_binder" ("_position" P)
###               ("_bigimpl"
###                 ("_asms"
###                   ("\<^const>HOL.Trueprop"
###                     ("_applC" ("_position" nneg) ("_position" P)))
###                   ("_asm"
###                     ("\<^const>HOL.Trueprop"
###                       ("_applC" ("_position" bounded_by)
###                         ("_cargs" ("_position" b) ("_position" P))))))
###                 ("\<^const>HOL.Trueprop"
###                   ("_applC" ("_position" nneg)
###                     ("_applC" ("_position" u) ("_position" P)))))))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Expectations.entails"
###       ("_applC" ("_position" Sup_trans)
###         ("_cargs" ("_position" S) ("_position" P)))
###       ("_applC" ("_position" u) ("_position" P)))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### theory "Draft.Induction"
### 0.304s elapsed time, 0.340s cpu time, 0.050s GC time
Loading theory "Draft.Embedding" (required by "Draft.AlgebraMoreTemplates" via "Draft.Algebra" via "Draft.WellDefined" via "Draft.Healthiness")
consts
  repeat ::
    "nat
     => (bool => ('a => real) => 'a => real)
        => bool => ('a => real) => 'a => real"
val assign_tr = fn: 'a -> term list -> term
val set_pc_tr = fn: 'a -> term list -> term
val set_dc_tr = fn: 'a -> term list -> term
### theory "Draft.Embedding"
### 0.217s elapsed time, 0.218s cpu time, 0.000s GC time
Loading theory "Draft.Healthiness" (required by "Draft.AlgebraMoreTemplates" via "Draft.Algebra" via "Draft.WellDefined")
### Ambiguous input (line 696 of "$AFP/pGCL/Healthiness.thy") produces 2 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Expectations.entails"
###     ("_lambda" ("_position" s)
###       ("\<^const>Groups.plus_class.plus"
###         ("\<^const>Groups.times_class.times"
###           ("_applC" ("\<^const>Expectations.embed_bool" ("_position" G))
###             ("_position" s))
###           ("_applC" ("_position" wp)
###             ("_cargs" ("_position" body)
###               ("_cargs"
###                 ("_lambda" ("_position" s)
###                   ("_applC" ("_position" bound_of) ("_position" P)))
###                 ("_position" s)))))
###         ("\<^const>Groups.times_class.times"
###           ("_applC"
###             ("\<^const>Expectations.embed_bool"
###               ("_applC" ("\<^const>Expectations.negate") ("_position" G)))
###             ("_position" s))
###           ("_applC" ("_position" P) ("_position" s)))))
###     ("_lambda" ("_position" s)
###       ("_applC" ("_position" bound_of) ("_position" P)))))
### ("\<^const>HOL.Trueprop"
###   ("_lambda" ("_position" s)
###     ("\<^const>Expectations.entails"
###       ("\<^const>Groups.plus_class.plus"
###         ("\<^const>Groups.times_class.times"
###           ("_applC" ("\<^const>Expectations.embed_bool" ("_position" G))
###             ("_position" s))
###           ("_applC" ("_position" wp)
###             ("_cargs" ("_position" body)
###               ("_cargs"
###                 ("_lambda" ("_position" s)
###                   ("_applC" ("_position" bound_of) ("_position" P)))
###                 ("_position" s)))))
###         ("\<^const>Groups.times_class.times"
###           ("_applC"
###             ("\<^const>Expectations.embed_bool"
###               ("_applC" ("\<^const>Expectations.negate") ("_position" G)))
###             ("_position" s))
###           ("_applC" ("_position" P) ("_position" s))))
###       ("_lambda" ("_position" s)
###         ("_applC" ("_position" bound_of) ("_position" P))))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 714 of "$AFP/pGCL/Healthiness.thy") produces 2 parse trees:
### ("\<^const>Pure.all_binder" ("_position" R)
###   ("\<^const>Pure.imp"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>Expectations.entails"
###         ("_lambda" ("_position" s)
###           ("\<^const>Groups.plus_class.plus"
###             ("\<^const>Groups.times_class.times"
###               ("_applC" ("\<^const>Expectations.embed_bool" ("_position" G))
###                 ("_position" s))
###               ("_applC" ("_position" wp)
###                 ("_cargs" ("_position" body)
###                   ("_cargs" ("_position" R) ("_position" s)))))
###             ("\<^const>Groups.times_class.times"
###               ("_applC"
###                 ("\<^const>Expectations.embed_bool"
###                   ("_applC" ("\<^const>Expectations.negate")
###                     ("_position" G)))
###                 ("_position" s))
###               ("_applC" ("_position" P) ("_position" s)))))
###         ("_position" R)))
###     ("\<^const>Pure.imp"
###       ("\<^const>HOL.Trueprop"
###         ("_applC" ("_position" sound) ("_position" R)))
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Expectations.entails" ("_position" Q)
###           ("_position" R))))))
### ("\<^const>Pure.all_binder" ("_position" R)
###   ("\<^const>Pure.imp"
###     ("\<^const>HOL.Trueprop"
###       ("_lambda" ("_position" s)
###         ("\<^const>Expectations.entails"
###           ("\<^const>Groups.plus_class.plus"
###             ("\<^const>Groups.times_class.times"
###               ("_applC" ("\<^const>Expectations.embed_bool" ("_position" G))
###                 ("_position" s))
###               ("_applC" ("_position" wp)
###                 ("_cargs" ("_position" body)
###                   ("_cargs" ("_position" R) ("_position" s)))))
###             ("\<^const>Groups.times_class.times"
###               ("_applC"
###                 ("\<^const>Expectations.embed_bool"
###                   ("_applC" ("\<^const>Expectations.negate")
###                     ("_position" G)))
###                 ("_position" s))
###               ("_applC" ("_position" P) ("_position" s))))
###           ("_position" R))))
###     ("\<^const>Pure.imp"
###       ("\<^const>HOL.Trueprop"
###         ("_applC" ("_position" sound) ("_position" R)))
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Expectations.entails" ("_position" Q)
###           ("_position" R))))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### theory "Draft.Healthiness"
### 0.198s elapsed time, 0.198s cpu time, 0.000s GC time
Loading theory "Draft.Continuity" (required by "Draft.AlgebraMoreTemplates" via "Draft.Algebra" via "Draft.WellDefined" via "Draft.Sublinearity" via "Draft.LoopInduction")
(?x : closure ?S) = (ALL e>0. EX y:?S. dist y ?x < e)
### theory "Draft.Continuity"
### 0.210s elapsed time, 0.283s cpu time, 0.099s GC time
Loading theory "Draft.LoopInduction" (required by "Draft.AlgebraMoreTemplates" via "Draft.Algebra" via "Draft.WellDefined" via "Draft.Sublinearity")
### theory "Draft.LoopInduction"
### 0.168s elapsed time, 0.243s cpu time, 0.102s GC time
Loading theory "Draft.Sublinearity" (required by "Draft.AlgebraMoreTemplates" via "Draft.Algebra" via "Draft.WellDefined")
### theory "Draft.Sublinearity"
### 0.089s elapsed time, 0.089s cpu time, 0.000s GC time
Loading theory "Draft.WellDefined" (required by "Draft.AlgebraMoreTemplates" via "Draft.Algebra")
### Ambiguous input (line 32 of "$AFP/pGCL/WellDefined.thy") produces 3 parse trees:
### ("\<^const>Pure.eq" ("_applC" ("_position" wp_under_wlp) ("_position" prog))
###   ("\<^const>Expectations.entails"
###     ("\<^const>HOL.All_binder" ("_position" P)
###       ("\<^const>HOL.implies"
###         ("_applC" ("_position" unitary) ("_position" P))
###         ("_applC" ("_position" wp)
###           ("_cargs" ("_position" prog) ("_position" P)))))
###     ("_applC" ("_position" wlp)
###       ("_cargs" ("_position" prog) ("_position" P)))))
### ("\<^const>Pure.eq" ("_applC" ("_position" wp_under_wlp) ("_position" prog))
###   ("\<^const>HOL.All_binder" ("_position" P)
###     ("\<^const>Expectations.entails"
###       ("\<^const>HOL.implies"
###         ("_applC" ("_position" unitary) ("_position" P))
###         ("_applC" ("_position" wp)
###           ("_cargs" ("_position" prog) ("_position" P))))
###       ("_applC" ("_position" wlp)
###         ("_cargs" ("_position" prog) ("_position" P))))))
### ("\<^const>Pure.eq" ("_applC" ("_position" wp_under_wlp) ("_position" prog))
###   ("\<^const>HOL.All_binder" ("_position" P)
###     ("\<^const>HOL.implies" ("_applC" ("_position" unitary) ("_position" P))
###       ("\<^const>Expectations.entails"
###         ("_applC" ("_position" wp)
###           ("_cargs" ("_position" prog) ("_position" P)))
###         ("_applC" ("_position" wlp)
###           ("_cargs" ("_position" prog) ("_position" P)))))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
[| healthy (wp ?body); sound ?P |]
==> %s. \<guillemotleft> ?G \<guillemotright> s *
        wp ?body (%s. bound_of ?P) s +
        \<guillemotleft> \<N> ?G \<guillemotright> s *
        ?P s \<tturnstile> %s. bound_of ?P
### Ambiguous input (line 228 of "$AFP/pGCL/WellDefined.thy") produces 4 parse trees:
### ("\<^const>Pure.eq"
###   ("_applC" ("_position" sub_distrib_pconj) ("_position" prog))
###   ("\<^const>Expectations.entails"
###     ("\<^const>HOL.All_binder" ("_idts" ("_position" P) ("_position" Q))
###       ("\<^const>HOL.implies"
###         ("_applC" ("_position" unitary) ("_position" P))
###         ("\<^const>HOL.implies"
###           ("_applC" ("_position" unitary) ("_position" Q))
###           ("\<^const>Expectations.exp_conj"
###             ("_applC" ("_position" wlp)
###               ("_cargs" ("_position" prog) ("_position" P)))
###             ("_applC" ("_position" wp)
###               ("_cargs" ("_position" prog) ("_position" Q)))))))
###     ("_applC" ("_position" wp)
###       ("_cargs" ("_position" prog)
###         ("\<^const>Expectations.exp_conj" ("_position" P)
###           ("_position" Q))))))
### ("\<^const>Pure.eq"
###   ("_applC" ("_position" sub_distrib_pconj) ("_position" prog))
###   ("\<^const>HOL.All_binder" ("_idts" ("_position" P) ("_position" Q))
###     ("\<^const>Expectations.entails"
###       ("\<^const>HOL.implies"
###         ("_applC" ("_position" unitary) ("_position" P))
###         ("\<^const>HOL.implies"
###           ("_applC" ("_position" unitary) ("_position" Q))
###           ("\<^const>Expectations.exp_conj"
###             ("_applC" ("_position" wlp)
###               ("_cargs" ("_position" prog) ("_position" P)))
###             ("_applC" ("_position" wp)
###               ("_cargs" ("_position" prog) ("_position" Q))))))
###       ("_applC" ("_position" wp)
###         ("_cargs" ("_position" prog)
###           ("\<^const>Expectations.exp_conj" ("_position" P)
###             ("_position" Q)))))))
### ("\<^const>Pure.eq"
###   ("_applC" ("_position" sub_distrib_pconj) ("_position" prog))
###   ("\<^const>HOL.All_binder" ("_idts" ("_position" P) ("_position" Q))
###     ("\<^const>HOL.implies" ("_applC" ("_position" unitary) ("_position" P))
###       ("\<^const>Expectations.entails"
###         ("\<^const>HOL.implies"
###           ("_applC" ("_position" unitary) ("_position" Q))
###           ("\<^const>Expectations.exp_conj"
###             ("_applC" ("_position" wlp)
###               ("_cargs" ("_position" prog) ("_position" P)))
###             ("_applC" ("_position" wp)
###               ("_cargs" ("_position" prog) ("_position" Q)))))
###         ("_applC" ("_position" wp)
###           ("_cargs" ("_position" prog)
###             ("\<^const>Expectations.exp_conj" ("_position" P)
###               ("_position" Q))))))))
### ("\<^const>Pure.eq"
###   ("_applC" ("_position" sub_distrib_pconj) ("_position" prog))
###   ("\<^const>HOL.All_binder" ("_idts" ("_position" P) ("_position" Q))
###     ("\<^const>HOL.implies" ("_applC" ("_position" unitary) ("_position" P))
###       ("\<^const>HOL.implies"
###         ("_applC" ("_position" unitary) ("_position" Q))
###         ("\<^const>Expectations.entails"
###           ("\<^const>Expectations.exp_conj"
###             ("_applC" ("_position" wlp)
###               ("_cargs" ("_position" prog) ("_position" P)))
###             ("_applC" ("_position" wp)
###               ("_cargs" ("_position" prog) ("_position" Q))))
###           ("_applC" ("_position" wp)
###             ("_cargs" ("_position" prog)
###               ("\<^const>Expectations.exp_conj" ("_position" P)
###                 ("_position" Q)))))))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### theory "Draft.WellDefined"
### 0.221s elapsed time, 0.277s cpu time, 0.076s GC time
Loading theory "Draft.Algebra" (required by "Draft.AlgebraMoreTemplates")
### Ambiguous input (line 30 of "$AFP/pGCL/Algebra.thy") produces 3 parse trees:
### ("\<^const>Pure.eq"
###   ("\<^fixed>refines" ("_position" prog) ("_position" prog'))
###   ("\<^const>Expectations.entails"
###     ("\<^const>HOL.All_binder" ("_position" P)
###       ("\<^const>HOL.implies" ("_applC" ("_position" sound) ("_position" P))
###         ("_applC" ("_position" wp)
###           ("_cargs" ("_position" prog) ("_position" P)))))
###     ("_applC" ("_position" wp)
###       ("_cargs" ("_position" prog') ("_position" P)))))
### ("\<^const>Pure.eq"
###   ("\<^fixed>refines" ("_position" prog) ("_position" prog'))
###   ("\<^const>HOL.All_binder" ("_position" P)
###     ("\<^const>Expectations.entails"
###       ("\<^const>HOL.implies" ("_applC" ("_position" sound) ("_position" P))
###         ("_applC" ("_position" wp)
###           ("_cargs" ("_position" prog) ("_position" P))))
###       ("_applC" ("_position" wp)
###         ("_cargs" ("_position" prog') ("_position" P))))))
### ("\<^const>Pure.eq"
###   ("\<^fixed>refines" ("_position" prog) ("_position" prog'))
###   ("\<^const>HOL.All_binder" ("_position" P)
###     ("\<^const>HOL.implies" ("_applC" ("_position" sound) ("_position" P))
###       ("\<^const>Expectations.entails"
###         ("_applC" ("_position" wp)
###           ("_cargs" ("_position" prog) ("_position" P)))
###         ("_applC" ("_position" wp)
###           ("_cargs" ("_position" prog') ("_position" P)))))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
instantiation
  program :: (type) semilattice_inf
  inf_program == inf :: 'a program => 'a program => 'a program
  less_eq_program == less_eq :: 'a program => 'a program => bool
  less_program == less :: 'a program => 'a program => bool
instantiation
  program :: (type) bot
  bot_program == bot :: 'a program
### theory "Draft.Algebra"
### 0.447s elapsed time, 0.527s cpu time, 0.110s GC time
Loading theory "Draft.AlgebraMoreTemplates"
val templateLemmas =
   [("Algebra.pequiv_refl", "?a \<simeq> ?a",
     template_predicate
      (
         template_app
          (template_app (template_hole 0, template_var 0), template_var 0)
         )),
    ("Linear_Algebra.of_real_differentiable", "of_real differentiable ?F",
     template_predicate
      (
         template_app
          (template_app (template_hole 1, template_hole 0), template_var 0)
         )),
    ("Function_Algebras.one_fun_apply", "1 ?x = (1::?'a)",
     template_equation
      (template_app (template_hole 1, template_var 0), template_hole 0)),
    ("Function_Algebras.zero_fun_apply", "0 ?x = (0::?'a)",
     template_equation
      (template_app (template_hole 1, template_var 0), template_hole 0)),
    ("Linear_Algebra.collinear_sing", "collinear {?x}",
     template_predicate
      (
         template_app
          (template_hole 2,
           template_app
            (template_app (template_hole 1, template_var 0),
             template_hole 0))
         )),
    ("Linear_Algebra.infnorm_pos_le", "0 <= infnorm ?x",
     template_inequation
      (less_equals, template_hole 1,
       template_app (template_hole 0, template_var 0))),
    ("Linear_Algebra.in_span_Basis", "?x : span Basis",
     template_predicate
      (
         template_app
          (template_app (template_hole 2, template_var 0),
           template_app (template_hole 1, template_hole 0))
         )),
    ("Algebra.dr_Abort", "drefines ?\<phi> ?G Abort Abort",
     template_predicate
      (
         template_app
          (template_app
            (template_app
              (template_app (template_hole 2, template_var 1),
               template_var 0),
             template_hole 1),
           template_hole 0)
         )),
    ("Algebra.dr_Skip", "drefines ?\<phi> ?G Skip Skip",
     template_predicate
      (
         template_app
          (template_app
            (template_app
              (template_app (template_hole 2, template_var 1),
               template_var 0),
             template_hole 1),
           template_hole 0)
         )),
    ("Algebra.pcorres_Skip", "pcorres ?\<phi> ?G Skip Skip",
     template_predicate
      (
         template_app
          (template_app
            (template_app
              (template_app (template_hole 2, template_var 1),
               template_var 0),
             template_hole 1),
           template_hole 0)
         )),
    ("Algebra.left_refines_AC", "?a \<sqsubseteq> (?a \<Squnion> ?b)",
     template_predicate
      (
         template_app
          (template_app (template_hole 1, template_var 1),
           template_app
            (template_app (template_hole 0, template_var 1),
             template_var 0))
         )),
    ("Algebra.right_refines_AC", "?b \<sqsubseteq> (?a \<Squnion> ?b)",
     template_predicate
      (
         template_app
          (template_app (template_hole 1, template_var 1),
           template_app
            (template_app (template_hole 0, template_var 0),
             template_var 1))
         )),
    ("Algebra.left_refines_DC", "(?a \<Sqinter> ?b) \<sqsubseteq> ?a",
     template_predicate
      (
         template_app
          (template_app
            (template_hole 1,
             template_app
              (template_app (template_hole 0, template_var 1),
               template_var 0)),
           template_var 1)
         )),
    ("Algebra.right_refines_DC", "(?a \<Sqinter> ?b) \<sqsubseteq> ?b",
     template_predicate
      (
         template_app
          (template_app
            (template_hole 1,
             template_app
              (template_app (template_hole 0, template_var 1),
               template_var 0)),
           template_var 0)
         )),
    ("Linear_Algebra.sum_clauses", "sum ?f {} = (0::?'a)",
     template_equation
      (template_app
        (template_app (template_hole 2, template_var 0), template_hole 1),
       template_hole 0)),
    ("Algebra.AC_idem", "?a \<Squnion> ?a = ?a",
     template_equation
      (template_app
        (template_app (template_hole 0, template_var 0), template_var 0),
       template_var 0)),
    ("Algebra.DC_idem", "?a \<Sqinter> ?a = ?a",
     template_equation
      (template_app
        (template_app (template_hole 0, template_var 0), template_var 0),
       template_var 0)),
    ("Set_Algebras.set_zero_plus", "(0::?'a) +o ?C = ?C",
     template_equation
      (template_app
        (template_app (template_hole 1, template_hole 0), template_var 0),
       template_var 0)),
    ("Set_Algebras.set_one_times", "(1::?'a) *o ?C = ?C",
     template_equation
      (template_app
        (template_app (template_hole 1, template_hole 0), template_var 0),
       template_var 0)),
    ("Linear_Algebra.bilinear_conv_bounded_bilinear",
     "bilinear ?h = bounded_bilinear ?h",
     template_equation
      (template_app (template_hole 1, template_var 0),
       template_app (template_hole 0, template_var 0))),
    ("Linear_Algebra.linear_linear", "bounded_linear ?f = linear ?f",
     template_equation
      (template_app (template_hole 1, template_var 0),
       template_app (template_hole 0, template_var 0))),
    ("Linear_Algebra.linear_conv_bounded_linear",
     "linear ?f = bounded_linear ?f",
     template_equation
      (template_app (template_hole 1, template_var 0),
       template_app (template_hole 0, template_var 0))),
    ("Linear_Algebra.infnorm_le_norm", "infnorm ?x <= norm ?x",
     template_inequation
      (less_equals, template_app (template_hole 1, template_var 0),
       template_app (template_hole 0, template_var 0))),
    ("Linear_Algebra.translate_inj_on", "inj_on ((+) ?a) ?A",
     template_predicate
      (
         template_app
          (template_app (template_hole 1, t_empty), template_var 0)
         )),
    ("Function_Algebras.of_nat_fun_apply", "of_nat ?n ?x = of_nat ?n",
     template_equation
      (template_app
        (template_app (template_hole 1, template_var 1), template_var 0),
       template_app (template_hole 0, template_var 1))),
    ("Function_Algebras.numeral_fun_apply", "numeral ?n ?x = numeral ?n",
     template_equation
      (template_app
        (template_app (template_hole 1, template_var 1), template_var 0),
       template_app (template_hole 0, template_var 1))),
    ("Function_Algebras.of_nat_fun", "of_nat ?n = (%x. of_nat ?n)",
     template_equation
      (template_app (template_hole 1, template_var 0), t_empty)),
    ("Function_Algebras.numeral_fun", "numeral ?n = (%x. numeral ?n)",
     template_equation
      (template_app (template_hole 1, template_var 0), t_empty)),
    ("Algebra.PC_idem", "?a \<^bsub>?p\<^esub>\<oplus> ?a = ?a",
     template_equation
      (template_app
        (template_app
          (template_app (template_hole 0, template_var 1), template_var 0),
         template_var 1),
       template_var 1)),
    ("Linear_Algebra.real_abs_infnorm",
     "\<bar>infnorm ?x\<bar> = infnorm ?x",
     template_equation
      (template_app
        (template_hole 1, template_app (template_hole 0, template_var 0)),
       template_app (template_hole 0, template_var 0))),
    ("Linear_Algebra.infnorm_neg", "infnorm (- ?x) = infnorm ?x",
     template_equation
      (template_app
        (template_hole 1, template_app (template_hole 0, template_var 0)),
       template_app (template_hole 1, template_var 0))),
    ("Linear_Algebra.collinear_2", "collinear {?x, ?y}",
     template_predicate
      (
         template_app
          (template_hole 2,
           template_app
            (template_app (template_hole 1, template_var 1),
             template_app
              (template_app (template_hole 1, template_var 0),
               template_hole 0)))
         )),
    ("Linear_Algebra.subspace_orthogonal_to_vector",
     "subspace {y. orthogonal ?x y}",
     template_predicate
      (
         template_app
          (template_hole 2, template_app (template_hole 1, t_empty))
         )),
    ("Boolean_Algebras.sup_boolI1", "?P ==> sup ?P ?Q",
     template_implication
      ([template_predicate (template_var 1)],
       template_predicate
        (
           template_app
            (template_app (template_hole 0, template_var 1), template_var 0)
           ))),
    ("Boolean_Algebras.sup_boolI2", "?Q ==> sup ?P ?Q",
     template_implication
      ([template_predicate (template_var 1)],
       template_predicate
        (
           template_app
            (template_app (template_hole 0, template_var 0), template_var 1)
           ))),
    ("Linear_Algebra.orthogonal_transformation_linear",
     "orthogonal_transformation ?f ==> linear ?f",
     template_implication
      ([template_predicate
         (template_app (template_hole 1, template_var 0))],
       template_predicate
        (template_app (template_hole 0, template_var 0)))),
    ("Algebra.DC_refines_AC",
     "(?a \<Sqinter> ?b) \<sqsubseteq> (?a \<Squnion> ?b)",
     template_predicate
      (
         template_app
          (template_app
            (template_hole 2,
             template_app
              (template_app (template_hole 1, template_var 1),
               template_var 0)),
           template_app
            (template_app (template_hole 0, template_var 1),
             template_var 0))
         )),
    ("Algebra.AC_comm", "?a \<Squnion> ?b = ?b \<Squnion> ?a",
     template_equation
      (template_app
        (template_app (template_hole 0, template_var 1), template_var 0),
       template_app
        (template_app (template_hole 0, template_var 0), template_var 1))),
    ("Algebra.DC_comm", "?a \<Sqinter> ?b = ?b \<Sqinter> ?a",
     template_equation
      (template_app
        (template_app (template_hole 0, template_var 1), template_var 0),
       template_app
        (template_app (template_hole 0, template_var 0), template_var 1))),
    ("Algebra.pequiv_comm", "?a \<simeq> ?b = ?b \<simeq> ?a",
     template_equation
      (template_app
        (template_app (template_hole 0, template_var 1), template_var 0),
       template_app
        (template_app (template_hole 0, template_var 0), template_var 1))),
    ("Linear_Algebra.orthogonal_commute",
     "orthogonal ?x ?y = orthogonal ?y ?x",
     template_equation
      (template_app
        (template_app (template_hole 0, template_var 1), template_var 0),
       template_app
        (template_app (template_hole 0, template_var 0), template_var 1))),
    ("Linear_Algebra.orthogonal_transformation_inj",
     "orthogonal_transformation ?f ==> inj ?f",
     template_implication
      ([template_predicate
         (template_app (template_hole 2, template_var 0))],
       template_predicate
        (
           template_app
            (template_app (template_hole 1, template_var 0),
             template_hole 0)
           ))),
    ("Linear_Algebra.bounded_linear_imp_differentiable",
     "bounded_linear ?f ==> ?f differentiable ?net",
     template_implication
      ([template_predicate
         (template_app (template_hole 1, template_var 1))],
       template_predicate
        (
           template_app
            (template_app (template_hole 0, template_var 1), template_var 0)
           ))),
    ("Linear_Algebra.linear_continuous_on",
     "bounded_linear ?f ==> continuous_on ?s ?f",
     template_implication
      ([template_predicate
         (template_app (template_hole 1, template_var 1))],
       template_predicate
        (
           template_app
            (template_app (template_hole 0, template_var 0), template_var 1)
           ))),
    ("Linear_Algebra.linear_imp_differentiable",
     "linear ?f ==> ?f differentiable ?net",
     template_implication
      ([template_predicate
         (template_app (template_hole 1, template_var 1))],
       template_predicate
        (
           template_app
            (template_app (template_hole 0, template_var 1), template_var 0)
           ))),
    ("Linear_Algebra.adjoint_linear", "linear ?f ==> linear (adjoint ?f)",
     template_implication
      ([template_predicate
         (template_app (template_hole 2, template_var 0))],
       template_predicate
        (
           template_app
            (template_hole 1,
             template_app (template_hole 0, template_var 0))
           ))),
    ("Algebra.Abort_refines", "well_def ?a ==> Abort \<sqsubseteq> ?a",
     template_implication
      ([template_predicate
         (template_app (template_hole 2, template_var 0))],
       template_predicate
        (
           template_app
            (template_app (template_hole 1, template_hole 0),
             template_var 0)
           ))),
    ("Linear_Algebra.independent_imp_finite",
     "independent ?B ==> finite ?B",
     template_implication
      ([template_negation
         (
            template_predicate
             (template_app (template_hole 1, template_var 0))
            )],
       template_predicate
        (template_app (template_hole 0, template_var 0)))),
    ("Linear_Algebra.pairwise_orthogonal_imp_finite",
     "pairwise orthogonal ?S ==> finite ?S",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 2, template_hole 1),
              template_var 0)
            )],
       template_predicate
        (template_app (template_hole 0, template_var 0)))),
    ("Linear_Algebra.infnorm_eq_0", "(infnorm ?x = 0) = (?x = (0::?'a))",
     template_bimplication
      (template_equation
        (template_app (template_hole 3, template_var 0), template_hole 2),
       template_equation (template_var 0, template_hole 0))),
    ("Linear_Algebra.orthogonal_transformation_neg",
     "orthogonal_transformation (%x. - ?f x) =
      orthogonal_transformation ?f",
     template_equation
      (template_app (template_hole 1, t_empty),
       template_app (template_hole 1, template_var 0))),
    ("Linear_Algebra.subspace_hyperplane2",
     "subspace {x. x \<bullet> ?a = 0}",
     template_predicate
      (
         template_app
          (template_hole 4, template_app (template_hole 3, t_empty))
         )),
    ("Linear_Algebra.subspace_hyperplane",
     "subspace {x. ?a \<bullet> x = 0}",
     template_predicate
      (
         template_app
          (template_hole 4, template_app (template_hole 3, t_empty))
         )),
    ("Boolean_Algebras.sup1I1", "?A ?x ==> sup ?A ?B ?x",
     template_implication
      ([template_predicate (template_app (template_var 2, template_var 1))],
       template_predicate
        (
           template_app
            (template_app
              (template_app (template_hole 0, template_var 2),
               template_var 0),
             template_var 1)
           ))),
    ("Boolean_Algebras.sup1I2", "?B ?x ==> sup ?A ?B ?x",
     template_implication
      ([template_predicate (template_app (template_var 2, template_var 1))],
       template_predicate
        (
           template_app
            (template_app
              (template_app (template_hole 0, template_var 0),
               template_var 2),
             template_var 1)
           ))),
    ("Linear_Algebra.orthogonal_transformation_bij",
     "orthogonal_transformation ?f ==> bij ?f",
     template_implication
      ([template_predicate
         (template_app (template_hole 2, template_var 0))],
       template_predicate
        (
           template_app
            (template_app
              (template_app (template_hole 1, template_var 0),
               template_hole 0),
             template_hole 0)
           ))),
    ("Linear_Algebra.orthogonal_transformation_inv",
     "orthogonal_transformation ?f ==> orthogonal_transformation (inv ?f)",
     template_implication
      ([template_predicate
         (template_app (template_hole 2, template_var 0))],
       template_predicate
        (
           template_app
            (template_hole 2,
             template_app
              (template_app (template_hole 1, template_hole 0),
               template_var 0))
           ))),
    ("Linear_Algebra.bounded_linear_imp_has_derivative",
     "bounded_linear ?f ==> (?f has_derivative ?f) ?net",
     template_implication
      ([template_predicate
         (template_app (template_hole 1, template_var 1))],
       template_predicate
        (
           template_app
            (template_app
              (template_app (template_hole 0, template_var 1),
               template_var 1),
             template_var 0)
           ))),
    ("Linear_Algebra.linear_simps",
     "bounded_linear ?f ==> ?f (0::?'a) = (0::?'b)",
     template_implication
      ([template_predicate
         (template_app (template_hole 3, template_var 0))],
       template_equation
        (template_app (template_var 0, template_hole 1), template_hole 0))),
    ("Linear_Algebra.linear_imp_has_derivative",
     "linear ?f ==> (?f has_derivative ?f) ?net",
     template_implication
      ([template_predicate
         (template_app (template_hole 1, template_var 1))],
       template_predicate
        (
           template_app
            (template_app
              (template_app (template_hole 0, template_var 1),
               template_var 1),
             template_var 0)
           ))),
    ("Algebra.pequiv_pr", "?a \<simeq> ?b ==> ?a \<sqsubseteq> ?b",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 1, template_var 1),
              template_var 0)
            )],
       template_predicate
        (
           template_app
            (template_app (template_hole 0, template_var 1), template_var 0)
           ))),
    ("Linear_Algebra.independent_substdbasis",
     "?d <= Basis ==> independent ?d",
     template_implication
      ([template_inequation (less_equals, template_var 0, template_hole 2)],
       template_negation
        (
           template_predicate
            (template_app (template_hole 0, template_var 0))
           ))),
    ("Boolean_Algebras.inf1D1", "inf ?A ?B ?x ==> ?A ?x",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app (template_hole 0, template_var 2),
                template_var 1),
              template_var 0)
            )],
       template_predicate (template_app (template_var 2, template_var 0)))),
    ("Boolean_Algebras.inf1D2", "inf ?A ?B ?x ==> ?B ?x",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app (template_hole 0, template_var 2),
                template_var 1),
              template_var 0)
            )],
       template_predicate (template_app (template_var 1, template_var 0)))),
    ("Algebra.pequiv_equiv_trans",
     "?a \<simeq> ?b = equiv_trans (wp ?a) (wp ?b)",
     template_equation
      (template_app
        (template_app (template_hole 2, template_var 1), template_var 0),
       template_app
        (template_app
          (template_hole 1, template_app (template_hole 0, template_var 1)),
         template_app (template_hole 0, template_var 0)))),
    ("Linear_Algebra.infnorm_pos_lt", "(0 < infnorm ?x) = (?x ~= (0::?'a))",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 5, template_hole 4),
              template_app (template_hole 3, template_var 0))
            )],
       template_negation
        (template_equation (template_var 0, template_hole 0)))),
    ("Linear_Algebra.infnorm_sub", "infnorm (?x - ?y) = infnorm (?y - ?x)",
     template_equation
      (template_app
        (template_hole 1,
         template_app
          (template_app (template_hole 0, template_var 1), template_var 0)),
       template_app
        (template_hole 1,
         template_app
          (template_app (template_hole 0, template_var 0),
           template_var 1)))),
    ("Linear_Algebra.subspace_orthogonal_to_vectors",
     "subspace {y. ALL x:?S. orthogonal x y}",
     template_predicate
      (
         template_app
          (template_hole 3, template_app (template_hole 2, t_empty))
         )),
    ("Linear_Algebra.bilinear_lzero",
     "bilinear ?h ==> ?h (0::?'a) ?x = (0::?'c)",
     template_implication
      ([template_predicate
         (template_app (template_hole 3, template_var 1))],
       template_equation
        (template_app
          (template_app (template_var 1, template_hole 1), template_var 0),
         template_hole 0))),
    ("Linear_Algebra.bilinear_rzero",
     "bilinear ?h ==> ?h ?x (0::?'b) = (0::?'c)",
     template_implication
      ([template_predicate
         (template_app (template_hole 3, template_var 1))],
       template_equation
        (template_app
          (template_app (template_var 1, template_var 0), template_hole 1),
         template_hole 0))),
    ("Linear_Algebra.orthogonal_transformation_surj",
     "orthogonal_transformation ?f ==> surj ?f",
     template_implication
      ([template_predicate
         (template_app (template_hole 3, template_var 0))],
       template_equation
        (template_app
          (template_app (template_hole 1, template_var 0), template_hole 0),
         template_hole 0))),
    ("Linear_Algebra.linear_continuous_at",
     "bounded_linear ?f ==> isCont ?f ?a",
     template_implication
      ([template_predicate
         (template_app (template_hole 3, template_var 1))],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 2,
               template_app
                (template_app (template_hole 1, template_var 0),
                 template_hole 0)),
             template_var 1)
           ))),
    ("Linear_Algebra.linear_continuous_within",
     "bounded_linear ?f ==> continuous (at ?x within ?s) ?f",
     template_implication
      ([template_predicate
         (template_app (template_hole 2, template_var 2))],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 1,
               template_app
                (template_app (template_hole 0, template_var 1),
                 template_var 0)),
             template_var 2)
           ))),
    ("Linear_Algebra.adjoint_adjoint",
     "linear ?f ==> adjoint (adjoint ?f) = ?f",
     template_implication
      ([template_predicate
         (template_app (template_hole 3, template_var 0))],
       template_equation
        (template_app
          (template_hole 1, template_app (template_hole 0, template_var 0)),
         template_var 0))),
    ("Function_Algebras.plus_fun_apply", "(?f + ?g) ?x = ?f ?x + ?g ?x",
     template_equation
      (template_app
        (template_app
          (template_app (template_hole 1, template_var 2), template_var 1),
         template_var 0),
       template_app
        (template_app
          (template_hole 0, template_app (template_var 2, template_var 0)),
         template_app (template_var 1, template_var 0)))),
    ("Function_Algebras.times_fun_apply", "(?f * ?g) ?x = ?f ?x * ?g ?x",
     template_equation
      (template_app
        (template_app
          (template_app (template_hole 1, template_var 2), template_var 1),
         template_var 0),
       template_app
        (template_app
          (template_hole 0, template_app (template_var 2, template_var 0)),
         template_app (template_var 1, template_var 0)))),
    ("Function_Algebras.func_plus", "?f + ?g = (%x. ?f x + ?g x)",
     template_equation
      (template_app
        (template_app (template_hole 1, template_var 1), template_var 0),
       t_empty)),
    ("Function_Algebras.func_times", "?f * ?g = (%x. ?f x * ?g x)",
     template_equation
      (template_app
        (template_app (template_hole 1, template_var 1), template_var 0),
       t_empty)),
    ("Linear_Algebra.infnorm_mul",
     "infnorm (?a *\<^sub>R ?x) = \<bar>?a\<bar> * infnorm ?x",
     template_equation
      (template_app
        (template_hole 3,
         template_app
          (template_app (template_hole 2, template_var 1), template_var 0)),
       template_app
        (template_app
          (template_hole 1, template_app (template_hole 0, template_var 1)),
         template_app (template_hole 3, template_var 0)))),
    ("Linear_Algebra.norm_le_infnorm",
     "norm ?x <= sqrt (real DIM(?'a)) * infnorm ?x",
     template_inequation
      (less_equals, template_app (template_hole 6, template_var 0),
       template_app
        (template_app
          (template_hole 5,
           template_app
            (template_hole 4,
             template_app
              (template_hole 3,
               template_app (template_hole 2, template_hole 1)))),
         template_app (template_hole 0, template_var 0)))),
    ("Linear_Algebra.infnorm_triangle",
     "infnorm (?x + ?y) <= infnorm ?x + infnorm ?y",
     template_inequation
      (less_equals,
       template_app
        (template_hole 2,
         template_app
          (template_app (template_hole 1, template_var 1), template_var 0)),
       template_app
        (template_app
          (template_hole 0, template_app (template_hole 2, template_var 1)),
         template_app (template_hole 2, template_var 0)))),
    ("Linear_Algebra.infnorm_mul_lemma",
     "infnorm (?a *\<^sub>R ?x) <= \<bar>?a\<bar> * infnorm ?x",
     template_inequation
      (less_equals,
       template_app
        (template_hole 3,
         template_app
          (template_app (template_hole 2, template_var 1), template_var 0)),
       template_app
        (template_app
          (template_hole 1, template_app (template_hole 0, template_var 1)),
         template_app (template_hole 3, template_var 0)))),
    ("Linear_Algebra.orthogonal_transformation_norm",
     "orthogonal_transformation ?f ==> norm (?f ?x) = norm ?x",
     template_implication
      ([template_predicate
         (template_app (template_hole 3, template_var 1))],
       template_equation
        (template_app
          (template_hole 1, template_app (template_var 1, template_var 0)),
         template_app (template_hole 0, template_var 0)))),
    ("Boolean_Algebras.sup2I1", "?A ?x ?y ==> sup ?A ?B ?x ?y",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_var 3, template_var 2), template_var 1)
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_app
                (template_app (template_hole 0, template_var 3),
                 template_var 0),
               template_var 2),
             template_var 1)
           ))),
    ("Boolean_Algebras.sup2I2", "?B ?x ?y ==> sup ?A ?B ?x ?y",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_var 3, template_var 2), template_var 1)
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_app
                (template_app (template_hole 0, template_var 0),
                 template_var 3),
               template_var 2),
             template_var 1)
           ))),
    ("Linear_Algebra.independent_card_le",
     "independent ?S ==> card ?S <= DIM(?'a)",
     template_implication
      ([template_negation
         (
            template_predicate
             (template_app (template_hole 3, template_var 0))
            )],
       template_inequation
        (less_equals, template_app (template_hole 1, template_var 0),
         template_app (template_hole 1, template_hole 0)))),
    ("Set_Algebras.set_zero_plus2", "(0::?'a) : ?A ==> ?B <= ?A + ?B",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 3, template_hole 2),
              template_var 1)
            )],
       template_inequation
        (less_equals, template_var 0,
         template_app
          (template_app (template_hole 0, template_var 1),
           template_var 0)))),
    ("Boolean_Algebras.inf2D1", "inf ?A ?B ?x ?y ==> ?A ?x ?y",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_app (template_hole 0, template_var 3),
                  template_var 2),
                template_var 1),
              template_var 0)
            )],
       template_predicate
        (
           template_app
            (template_app (template_var 3, template_var 1), template_var 0)
           ))),
    ("Boolean_Algebras.inf2D2", "inf ?A ?B ?x ?y ==> ?B ?x ?y",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_app (template_hole 0, template_var 3),
                  template_var 2),
                template_var 1),
              template_var 0)
            )],
       template_predicate
        (
           template_app
            (template_app (template_var 2, template_var 1), template_var 0)
           ))),
    ("Algebra.AC_assoc",
     "?a \<Squnion> ?b \<Squnion> ?c = (?a \<Squnion> ?b) \<Squnion> ?c",
     template_equation
      (template_app
        (template_app (template_hole 0, template_var 2),
         template_app
          (template_app (template_hole 0, template_var 1), template_var 0)),
       template_app
        (template_app
          (template_hole 0,
           template_app
            (template_app (template_hole 0, template_var 2),
             template_var 1)),
         template_var 0))),
    ("Algebra.DC_assoc",
     "?a \<Sqinter> ?b \<Sqinter> ?c = (?a \<Sqinter> ?b) \<Sqinter> ?c",
     template_equation
      (template_app
        (template_app (template_hole 0, template_var 2),
         template_app
          (template_app (template_hole 0, template_var 1), template_var 0)),
       template_app
        (template_app
          (template_hole 0,
           template_app
            (template_app (template_hole 0, template_var 2),
             template_var 1)),
         template_var 0))),
    ("Algebra.Seq_assoc", "?A ;; (?B ;; ?C) = ?A ;; ?B ;; ?C",
     template_equation
      (template_app
        (template_app (template_hole 0, template_var 2),
         template_app
          (template_app (template_hole 0, template_var 1), template_var 0)),
       template_app
        (template_app
          (template_hole 0,
           template_app
            (template_app (template_hole 0, template_var 2),
             template_var 1)),
         template_var 0))),
    ("Set_Algebras.set_plus_rearrange3", "?a +o ?B + ?C = ?a +o (?B + ?C)",
     template_equation
      (template_app
        (template_app
          (template_hole 1,
           template_app
            (template_app (template_hole 0, template_var 2),
             template_var 1)),
         template_var 0),
       template_app
        (template_app (template_hole 0, template_var 2),
         template_app
          (template_app (template_hole 1, template_var 1),
           template_var 0)))),
    ("Set_Algebras.set_plus_rearrange2",
     "?a +o (?b +o ?C) = (?a + ?b) +o ?C",
     template_equation
      (template_app
        (template_app (template_hole 1, template_var 2),
         template_app
          (template_app (template_hole 1, template_var 1), template_var 0)),
       template_app
        (template_app
          (template_hole 1,
           template_app
            (template_app (template_hole 0, template_var 2),
             template_var 1)),
         template_var 0))),
    ("Set_Algebras.set_times_rearrange3", "?a *o ?B * ?C = ?a *o (?B * ?C)",
     template_equation
      (template_app
        (template_app
          (template_hole 1,
           template_app
            (template_app (template_hole 0, template_var 2),
             template_var 1)),
         template_var 0),
       template_app
        (template_app (template_hole 0, template_var 2),
         template_app
          (template_app (template_hole 1, template_var 1),
           template_var 0)))),
    ("Set_Algebras.set_times_rearrange2",
     "?a *o (?b *o ?C) = (?a * ?b) *o ?C",
     template_equation
      (template_app
        (template_app (template_hole 1, template_var 2),
         template_app
          (template_app (template_hole 1, template_var 1), template_var 0)),
       template_app
        (template_app
          (template_hole 1,
           template_app
            (template_app (template_hole 0, template_var 2),
             template_var 1)),
         template_var 0))),
    ("Set_Algebras.set_plus_rearrange4", "?C + ?a +o ?D = ?a +o (?C + ?D)",
     template_equation
      (template_app
        (template_app (template_hole 1, template_var 2),
         template_app
          (template_app (template_hole 0, template_var 1), template_var 0)),
       template_app
        (template_app (template_hole 0, template_var 1),
         template_app
          (template_app (template_hole 1, template_var 2),
           template_var 0)))),
    ("Set_Algebras.set_times_rearrange4", "?C * ?a *o ?D = ?a *o (?C * ?D)",
     template_equation
      (template_app
        (template_app (template_hole 1, template_var 2),
         template_app
          (template_app (template_hole 0, template_var 1), template_var 0)),
       template_app
        (template_app (template_hole 0, template_var 1),
         template_app
          (template_app (template_hole 1, template_var 2),
           template_var 0)))),
    ("Set_Algebras.set_minus_plus", "(?a - ?b : ?C) = (?a : ?b +o ?C)",
     template_equation
      (template_app
        (template_app
          (template_hole 2,
           template_app
            (template_app (template_hole 1, template_var 2),
             template_var 1)),
         template_var 0),
       template_app
        (template_app (template_hole 2, template_var 2),
         template_app
          (template_app (template_hole 0, template_var 1),
           template_var 0)))),
    ("Linear_Algebra.infnorm_Max",
     "infnorm ?x = (MAX i\<in>Basis. \<bar>?x \<bullet> i\<bar>)",
     template_equation
      (template_app (template_hole 5, template_var 0),
       template_app
        (template_hole 4,
         template_app
          (template_app (template_hole 3, t_empty), template_hole 0)))),
    ("Linear_Algebra.absdiff_infnorm",
     "\<bar>infnorm ?x - infnorm ?y\<bar> <= infnorm (?x - ?y)",
     template_inequation
      (less_equals,
       template_app
        (template_hole 3,
         template_app
          (template_app
            (template_hole 2,
             template_app (template_hole 1, template_var 1)),
           template_app (template_hole 1, template_var 0))),
       template_app
        (template_hole 1,
         template_app
          (template_app (template_hole 0, template_var 1),
           template_var 0)))),
    ("Linear_Algebra.linear_lim_0",
     "bounded_linear ?f ==> ?f \<midarrow>0::?'a\<rightarrow> (0::?'b)",
     template_implication
      ([template_predicate
         (template_app (template_hole 6, template_var 0))],
       template_predicate
        (
           template_app
            (template_app
              (template_app (template_hole 5, template_var 0),
               template_app (template_hole 4, template_hole 3)),
             template_app
              (template_app (template_hole 2, template_hole 1),
               template_hole 0))
           ))),
    ("Linear_Algebra.linear_simps",
     "bounded_linear ?f ==> ?f (- ?a) = - ?f ?a",
     template_implication
      ([template_predicate
         (template_app (template_hole 3, template_var 1))],
       template_equation
        (template_app
          (template_var 1, template_app (template_hole 1, template_var 0)),
         template_app
          (template_hole 0,
           template_app (template_var 1, template_var 0))))),
    ("Linear_Algebra.collinear_subset",
     "[| collinear ?T; ?S <= ?T |] ==> collinear ?S",
     template_implication
      ([template_predicate (template_app (template_hole 1, template_var 1)),
        template_inequation (less_equals, template_var 0, template_var 1)],
       template_predicate
        (template_app (template_hole 1, template_var 0)))),
    ("Algebra.DC_refines_PC",
     "unitary ?p ==>
      (?a \<Sqinter> ?b) \<sqsubseteq> (?a \<^bsub>?p\<^esub>\<oplus> ?b)",
     template_implication
      ([template_predicate
         (template_app (template_hole 3, template_var 2))],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 2,
               template_app
                (template_app (template_hole 1, template_var 1),
                 template_var 0)),
             template_app
              (template_app
                (template_app (template_hole 0, template_var 1),
                 template_var 2),
               template_var 0))
           ))),
    ("Algebra.PC_refines_AC",
     "unitary ?p ==>
      (?a \<^bsub>?p\<^esub>\<oplus> ?b) \<sqsubseteq> (?a \<Squnion> ?b)",
     template_implication
      ([template_predicate
         (template_app (template_hole 3, template_var 2))],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 2,
               template_app
                (template_app
                  (template_app (template_hole 1, template_var 1),
                   template_var 2),
                 template_var 0)),
             template_app
              (template_app (template_hole 0, template_var 1),
               template_var 0))
           ))),
    ("Set_Algebras.set_plus_mono", "?C <= ?D ==> ?a +o ?C <= ?a +o ?D",
     template_implication
      ([template_inequation (less_equals, template_var 2, template_var 1)],
       template_inequation
        (less_equals,
         template_app
          (template_app (template_hole 0, template_var 0), template_var 2),
         template_app
          (template_app (template_hole 0, template_var 0),
           template_var 1)))),
    ("Set_Algebras.set_times_mono", "?C <= ?D ==> ?a *o ?C <= ?a *o ?D",
     template_implication
      ([template_inequation (less_equals, template_var 2, template_var 1)],
       template_inequation
        (less_equals,
         template_app
          (template_app (template_hole 0, template_var 0), template_var 2),
         template_app
          (template_app (template_hole 0, template_var 0),
           template_var 1)))),
    ("Set_Algebras.set_plus_mono3", "?a : ?C ==> ?a +o ?D <= ?C + ?D",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 3, template_var 2),
              template_var 1)
            )],
       template_inequation
        (less_equals,
         template_app
          (template_app (template_hole 1, template_var 2), template_var 0),
         template_app
          (template_app (template_hole 0, template_var 1),
           template_var 0)))),
    ("Set_Algebras.set_plus_intro2", "?b : ?C ==> ?a + ?b : ?a +o ?C",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 2, template_var 2),
              template_var 1)
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 2,
               template_app
                (template_app (template_hole 1, template_var 0),
                 template_var 2)),
             template_app
              (template_app (template_hole 0, template_var 0),
               template_var 1))
           ))),
    ("Set_Algebras.set_times_mono3", "?a : ?C ==> ?a *o ?D <= ?C * ?D",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 3, template_var 2),
              template_var 1)
            )],
       template_inequation
        (less_equals,
         template_app
          (template_app (template_hole 1, template_var 2), template_var 0),
         template_app
          (template_app (template_hole 0, template_var 1),
           template_var 0)))),
    ("Set_Algebras.set_times_intro2", "?b : ?C ==> ?a * ?b : ?a *o ?C",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 2, template_var 2),
              template_var 1)
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 2,
               template_app
                (template_app (template_hole 1, template_var 0),
                 template_var 2)),
             template_app
              (template_app (template_hole 0, template_var 0),
               template_var 1))
           ))),
    ("Set_Algebras.set_neg_intro2", "?a : ?C ==> - ?a : - (1::?'a) *o ?C",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 3, template_var 1),
              template_var 0)
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 3,
               template_app (template_hole 2, template_var 1)),
             template_app
              (template_app
                (template_hole 1,
                 template_app (template_hole 2, template_hole 0)),
               template_var 0))
           ))),
    ("Set_Algebras.set_plus_mono4", "?a : ?C ==> ?a +o ?D <= ?D + ?C",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 3, template_var 2),
              template_var 1)
            )],
       template_inequation
        (less_equals,
         template_app
          (template_app (template_hole 1, template_var 2), template_var 0),
         template_app
          (template_app (template_hole 0, template_var 0),
           template_var 1)))),
    ("Set_Algebras.set_times_mono4", "?a : ?C ==> ?a *o ?D <= ?D * ?C",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 3, template_var 2),
              template_var 1)
            )],
       template_inequation
        (less_equals,
         template_app
          (template_app (template_hole 1, template_var 2), template_var 0),
         template_app
          (template_app (template_hole 0, template_var 0),
           template_var 1)))),
    ("Linear_Algebra.Basis_le_infnorm",
     "?b : Basis ==> \<bar>?x \<bullet> ?b\<bar> <= infnorm ?x",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 5, template_var 1),
              template_hole 4)
            )],
       template_inequation
        (less_equals,
         template_app
          (template_hole 2,
           template_app
            (template_app (template_hole 1, template_var 0),
             template_var 1)),
         template_app (template_hole 0, template_var 0)))),
    ("Set_Algebras.set_plus_imp_minus", "?a : ?b +o ?C ==> ?a - ?b : ?C",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 2, template_var 2),
              template_app
               (template_app (template_hole 1, template_var 1),
                template_var 0))
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 2,
               template_app
                (template_app (template_hole 0, template_var 2),
                 template_var 1)),
             template_var 0)
           ))),
    ("Set_Algebras.set_minus_imp_plus", "?a - ?b : ?C ==> ?a : ?b +o ?C",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_hole 2,
                template_app
                 (template_app (template_hole 1, template_var 2),
                  template_var 1)),
              template_var 0)
            )],
       template_predicate
        (
           template_app
            (template_app (template_hole 2, template_var 2),
             template_app
              (template_app (template_hole 0, template_var 1),
               template_var 0))
           ))),
    ("Set_Algebras.set_neg_intro", "?a : - (1::?'a) *o ?C ==> - ?a : ?C",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 3, template_var 1),
              template_app
               (template_app
                 (template_hole 2,
                  template_app (template_hole 1, template_hole 0)),
                template_var 0))
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 3,
               template_app (template_hole 1, template_var 1)),
             template_var 0)
           ))),
    ("Boolean_Algebras.inf1I", "[| ?A ?x; ?B ?x |] ==> inf ?A ?B ?x",
     template_implication
      ([template_predicate (template_app (template_var 2, template_var 1)),
        template_predicate (template_app (template_var 0, template_var 1))],
       template_predicate
        (
           template_app
            (template_app
              (template_app (template_hole 0, template_var 2),
               template_var 0),
             template_var 1)
           ))),
    ("Algebra.determ_maximal", "[| pdeterm ?a; ?a <= ?x |] ==> ?a = ?x",
     template_implication
      ([template_predicate (template_app (template_hole 2, template_var 1)),
        template_inequation (less_equals, template_var 1, template_var 0)],
       template_equation (template_var 1, template_var 0))),
    ("Set_Algebras.finite_set_plus",
     "[| finite ?s; finite ?t |] ==> finite (?s + ?t)",
     template_implication
      ([template_predicate (template_app (template_hole 1, template_var 1)),
        template_predicate
         (template_app (template_hole 1, template_var 0))],
       template_predicate
        (
           template_app
            (template_hole 1,
             template_app
              (template_app (template_hole 0, template_var 1),
               template_var 0))
           ))),
    ("Set_Algebras.finite_set_times",
     "[| finite ?s; finite ?t |] ==> finite (?s * ?t)",
     template_implication
      ([template_predicate (template_app (template_hole 1, template_var 1)),
        template_predicate
         (template_app (template_hole 1, template_var 0))],
       template_predicate
        (
           template_app
            (template_hole 1,
             template_app
              (template_app (template_hole 0, template_var 1),
               template_var 0))
           ))),
    ("Linear_Algebra.orthogonal_transformation_compose",
     "[| orthogonal_transformation ?f; orthogonal_transformation ?g |]
      ==> orthogonal_transformation (?f o ?g)",
     template_implication
      ([template_predicate (template_app (template_hole 3, template_var 1)),
        template_predicate
         (template_app (template_hole 2, template_var 0))],
       template_predicate
        (
           template_app
            (template_hole 1,
             template_app
              (template_app (template_hole 0, template_var 1),
               template_var 0))
           ))),
    ("Linear_Algebra.finite_Atleast_Atmost_nat",
     "finite {?f x |x. x : UNIV}",
     template_predicate
      (
         template_app
          (template_hole 6, template_app (template_hole 5, t_empty))
         )),
    ("Algebra.PC_quasi_comm",
     "?a \<^bsub>?p\<^esub>\<oplus> ?b =
      ?b \<^bsub>(%s. 1 - ?p s)\<^esub>\<oplus> ?a",
     template_equation
      (template_app
        (template_app
          (template_app (template_hole 2, template_var 2), template_var 1),
         template_var 0),
       template_app
        (template_app
          (template_app (template_hole 2, template_var 0), t_empty),
         template_var 2))),
    ("Set_Algebras.set_times_Un_distrib",
     "?A * (?B Un ?C) = ?A * ?B Un ?A * ?C",
     template_equation
      (template_app
        (template_app (template_hole 1, template_var 2),
         template_app
          (template_app (template_hole 0, template_var 1), template_var 0)),
       template_app
        (template_app
          (template_hole 0,
           template_app
            (template_app (template_hole 1, template_var 2),
             template_var 1)),
         template_app
          (template_app (template_hole 1, template_var 2),
           template_var 0)))),
    ("Set_Algebras.set_times_Un_distrib",
     "(?A Un ?B) * ?C = ?A * ?C Un ?B * ?C",
     template_equation
      (template_app
        (template_app
          (template_hole 1,
           template_app
            (template_app (template_hole 0, template_var 2),
             template_var 1)),
         template_var 0),
       template_app
        (template_app
          (template_hole 0,
           template_app
            (template_app (template_hole 1, template_var 2),
             template_var 0)),
         template_app
          (template_app (template_hole 1, template_var 1),
           template_var 0)))),
    ("Set_Algebras.set_times_plus_distrib2",
     "?a *o (?B + ?C) = ?a *o ?B + ?a *o ?C",
     template_equation
      (template_app
        (template_app (template_hole 1, template_var 2),
         template_app
          (template_app (template_hole 0, template_var 1), template_var 0)),
       template_app
        (template_app
          (template_hole 0,
           template_app
            (template_app (template_hole 1, template_var 2),
             template_var 1)),
         template_app
          (template_app (template_hole 1, template_var 2),
           template_var 0)))),
    ("Set_Algebras.set_times_plus_distrib",
     "?a *o (?b +o ?C) = ?a * ?b +o ?a *o ?C",
     template_equation
      (template_app
        (template_app (template_hole 2, template_var 2),
         template_app
          (template_app (template_hole 1, template_var 1), template_var 0)),
       template_app
        (template_app
          (template_hole 1,
           template_app
            (template_app (template_hole 0, template_var 2),
             template_var 1)),
         template_app
          (template_app (template_hole 2, template_var 2),
           template_var 0)))),
    ("Linear_Algebra.vector_eq_ldot",
     "(ALL x. x \<bullet> ?y = x \<bullet> ?z) = (?y = ?z)",
     template_implication
      ([template_predicate (template_app (template_hole 3, t_empty))],
       template_equation (template_var 1, template_var 0))),
    ("Linear_Algebra.vector_eq_rdot",
     "(ALL z. ?x \<bullet> z = ?y \<bullet> z) = (?x = ?y)",
     template_implication
      ([template_predicate (template_app (template_hole 3, t_empty))],
       template_equation (template_var 1, template_var 0))),
    ("Linear_Algebra.subset_translation_eq",
     "((+) ?a ` ?s <= (+) ?a ` ?t) = (?s <= ?t)",
     template_equation
      (template_app
        (template_app
          (template_hole 2,
           template_app
            (template_app
              (template_hole 1,
               template_app (template_hole 0, template_var 2)),
             template_var 1)),
         template_app
          (template_app
            (template_hole 1,
             template_app (template_hole 0, template_var 2)),
           template_var 0)),
       template_app
        (template_app (template_hole 2, template_var 1), template_var 0))),
    ("Set_Algebras.set_times_plus_distrib3",
     "?a +o ?C * ?D <= ?a *o ?D + ?C * ?D",
     template_inequation
      (less_equals,
       template_app
        (template_app
          (template_hole 3,
           template_app
            (template_app (template_hole 2, template_var 2),
             template_var 1)),
         template_var 0),
       template_app
        (template_app
          (template_hole 1,
           template_app
            (template_app (template_hole 0, template_var 2),
             template_var 0)),
         template_app
          (template_app (template_hole 3, template_var 1),
           template_var 0)))),
    ("Linear_Algebra.bilinear_rneg",
     "bilinear ?h ==> ?h ?x (- ?y) = - ?h ?x ?y",
     template_implication
      ([template_predicate
         (template_app (template_hole 3, template_var 2))],
       template_equation
        (template_app
          (template_app (template_var 2, template_var 1),
           template_app (template_hole 1, template_var 0)),
         template_app
          (template_hole 0,
           template_app
            (template_app (template_var 2, template_var 1),
             template_var 0))))),
    ("Linear_Algebra.bilinear_lneg",
     "bilinear ?h ==> ?h (- ?x) ?y = - ?h ?x ?y",
     template_implication
      ([template_predicate
         (template_app (template_hole 3, template_var 2))],
       template_equation
        (template_app
          (template_app
            (template_var 2,
             template_app (template_hole 1, template_var 1)),
           template_var 0),
         template_app
          (template_hole 0,
           template_app
            (template_app (template_var 2, template_var 1),
             template_var 0))))),
    ("Linear_Algebra.orthogonal_transformation_scaleR",
     "orthogonal_transformation ?f ==>
      ?f (?c *\<^sub>R ?v) = ?c *\<^sub>R ?f ?v",
     template_implication
      ([template_predicate
         (template_app (template_hole 3, template_var 2))],
       template_equation
        (template_app
          (template_var 2,
           template_app
            (template_app (template_hole 1, template_var 1),
             template_var 0)),
         template_app
          (template_app (template_hole 0, template_var 1),
           template_app (template_var 2, template_var 0))))),
    ("Linear_Algebra.orthogonal_orthogonal_transformation",
     "orthogonal_transformation ?f ==>
      orthogonal (?f ?x) (?f ?y) = orthogonal ?x ?y",
     template_implication
      ([template_predicate
         (template_app (template_hole 3, template_var 2))],
       template_equation
        (template_app
          (template_app
            (template_hole 1,
             template_app (template_var 2, template_var 1)),
           template_app (template_var 2, template_var 0)),
         template_app
          (template_app (template_hole 0, template_var 1),
           template_var 0)))),
    ("Linear_Algebra.linear_simps",
     "bounded_linear ?f ==> ?f (?s *\<^sub>R ?v) = ?s *\<^sub>R ?f ?v",
     template_implication
      ([template_predicate
         (template_app (template_hole 3, template_var 2))],
       template_equation
        (template_app
          (template_var 2,
           template_app
            (template_app (template_hole 1, template_var 1),
             template_var 0)),
         template_app
          (template_app (template_hole 0, template_var 1),
           template_app (template_var 2, template_var 0))))),
    ("Linear_Algebra.independent_bound",
     "independent ?S ==> finite ?S & card ?S <= DIM(?'a)",
     template_implication
      ([template_negation
         (
            template_predicate
             (template_app (template_hole 5, template_var 0))
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 4,
               template_app (template_hole 3, template_var 0)),
             template_app
              (template_app
                (template_hole 2,
                 template_app (template_hole 1, template_var 0)),
               template_app (template_hole 1, template_hole 0)))
           ))),
    ("Linear_Algebra.orthogonal_scaleR",
     "?c ~= 0 ==> orthogonal (?c *\<^sub>R ?x) = orthogonal ?x",
     template_implication
      ([template_negation
         (template_equation (template_var 1, template_hole 3))],
       template_equation
        (template_app
          (template_hole 1,
           template_app
            (template_app (template_hole 0, template_var 1),
             template_var 0)),
         template_app (template_hole 1, template_var 0)))),
    ("Boolean_Algebras.sup1CI", "(~ ?B ?x ==> ?A ?x) ==> sup ?A ?B ?x",
     template_implication
      ([template_implication
         ([template_negation
            (
               template_predicate
                (template_app (template_var 2, template_var 1))
               )],
          template_predicate
           (template_app (template_var 0, template_var 1)))],
       template_predicate
        (
           template_app
            (template_app
              (template_app (template_hole 0, template_var 0),
               template_var 2),
             template_var 1)
           ))),
    ("Linear_Algebra.dependent_biggerset",
     "(finite ?S ==> DIM(?'a) < card ?S) ==> dependent ?S",
     template_implication
      ([template_implication
         ([template_predicate
            (template_app (template_hole 4, template_var 0))],
          template_inequation
           (less_than, template_app (template_hole 2, template_hole 1),
            template_app (template_hole 2, template_var 0)))],
       template_predicate
        (template_app (template_hole 0, template_var 0)))),
    ("Linear_Algebra.inj_linear_imp_inv_bounded_linear",
     "[| bounded_linear ?f; inj ?f |] ==> bounded_linear (inv ?f)",
     template_implication
      ([template_predicate (template_app (template_hole 3, template_var 0)),
        template_predicate
         (
            template_app
             (template_app (template_hole 2, template_var 0),
              template_hole 1)
            )],
       template_predicate
        (
           template_app
            (template_hole 3,
             template_app
              (template_app (template_hole 0, template_hole 1),
               template_var 0))
           ))),
    ("Algebra.pequiv_trans",
     "[| ?a \<simeq> ?b; ?b \<simeq> ?c |] ==> ?a \<simeq> ?c",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 0, template_var 2),
              template_var 1)
            ),
        template_predicate
         (
            template_app
             (template_app (template_hole 0, template_var 1),
              template_var 0)
            )],
       template_predicate
        (
           template_app
            (template_app (template_hole 0, template_var 2), template_var 0)
           ))),
    ("Algebra.pequiv_pr_trans",
     "[| ?a \<simeq> ?b; ?b \<sqsubseteq> ?c |] ==> ?a \<sqsubseteq> ?c",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 1, template_var 2),
              template_var 1)
            ),
        template_predicate
         (
            template_app
             (template_app (template_hole 0, template_var 1),
              template_var 0)
            )],
       template_predicate
        (
           template_app
            (template_app (template_hole 0, template_var 2), template_var 0)
           ))),
    ("Algebra.eq_det",
     "[| ?a \<simeq> ?b; determ (wp ?a) |] ==> determ (wp ?b)",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 2, template_var 1),
              template_var 0)
            ),
        template_predicate
         (
            template_app
             (template_hole 1,
              template_app (template_hole 0, template_var 1))
            )],
       template_predicate
        (
           template_app
            (template_hole 1,
             template_app (template_hole 0, template_var 0))
           ))),
    ("Algebra.pr_trans",
     "[| ?A \<sqsubseteq> ?B; ?B \<sqsubseteq> ?C |]
      ==> ?A \<sqsubseteq> ?C",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 0, template_var 2),
              template_var 1)
            ),
        template_predicate
         (
            template_app
             (template_app (template_hole 0, template_var 1),
              template_var 0)
            )],
       template_predicate
        (
           template_app
            (template_app (template_hole 0, template_var 2), template_var 0)
           ))),
    ("Algebra.pr_pequiv_trans",
     "[| ?a \<sqsubseteq> ?b; ?b \<simeq> ?c |] ==> ?a \<sqsubseteq> ?c",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 1, template_var 2),
              template_var 1)
            ),
        template_predicate
         (
            template_app
             (template_app (template_hole 0, template_var 1),
              template_var 0)
            )],
       template_predicate
        (
           template_app
            (template_app (template_hole 1, template_var 2), template_var 0)
           ))),
    ("Algebra.pequiv_antisym",
     "[| ?a \<sqsubseteq> ?b; ?b \<sqsubseteq> ?a |] ==> ?a \<simeq> ?b",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 1, template_var 1),
              template_var 0)
            ),
        template_predicate
         (
            template_app
             (template_app (template_hole 1, template_var 0),
              template_var 1)
            )],
       template_predicate
        (
           template_app
            (template_app (template_hole 0, template_var 1), template_var 0)
           ))),
    ("Linear_Algebra.orthogonal_transformation",
     "orthogonal_transformation ?f =
      (linear ?f & (ALL v. norm (?f v) = norm v))",
     template_equation
      (template_app (template_hole 6, template_var 0),
       template_app
        (template_app
          (template_hole 5, template_app (template_hole 4, template_var 0)),
         template_app (template_hole 3, t_empty)))),
    ("Linear_Algebra.collinear_iff_Reals",
     "collinear {0, ?w, ?z} = (?z / ?w : \<real>)",
     template_equation
      (template_app
        (template_hole 6,
         template_app
          (template_app (template_hole 5, template_hole 4),
           template_app
            (template_app (template_hole 5, template_var 1),
             template_app
              (template_app (template_hole 5, template_var 0),
               template_hole 3)))),
       template_app
        (template_app
          (template_hole 2,
           template_app
            (template_app (template_hole 1, template_var 0),
             template_var 1)),
         template_hole 0))),
    ("Linear_Algebra.subspace_substandard",
     "subspace {x. ALL i:Basis. ?P i --> x \<bullet> i = 0}",
     template_predicate
      (
         template_app
          (template_hole 7, template_app (template_hole 6, t_empty))
         )),
    ("Linear_Algebra.linear_simps",
     "bounded_linear ?f ==> ?f (?a - ?b) = ?f ?a - ?f ?b",
     template_implication
      ([template_predicate
         (template_app (template_hole 3, template_var 2))],
       template_equation
        (template_app
          (template_var 2,
           template_app
            (template_app (template_hole 1, template_var 1),
             template_var 0)),
         template_app
          (template_app
            (template_hole 0,
             template_app (template_var 2, template_var 1)),
           template_app (template_var 2, template_var 0))))),
    ("Linear_Algebra.linear_simps",
     "bounded_linear ?f ==> ?f (?a + ?b) = ?f ?a + ?f ?b",
     template_implication
      ([template_predicate
         (template_app (template_hole 3, template_var 2))],
       template_equation
        (template_app
          (template_var 2,
           template_app
            (template_app (template_hole 1, template_var 1),
             template_var 0)),
         template_app
          (template_app
            (template_hole 0,
             template_app (template_var 2, template_var 1)),
           template_app (template_var 2, template_var 0))))),
    ("Linear_Algebra.adjoint_works",
     "linear ?f ==> ?x \<bullet> adjoint ?f ?y = ?f ?x \<bullet> ?y",
     template_implication
      ([template_predicate
         (template_app (template_hole 4, template_var 2))],
       template_equation
        (template_app
          (template_app (template_hole 2, template_var 1),
           template_app
            (template_app (template_hole 1, template_var 2),
             template_var 0)),
         template_app
          (template_app
            (template_hole 0,
             template_app (template_var 2, template_var 1)),
           template_var 0)))),
    ("Linear_Algebra.adjoint_clauses",
     "linear ?f ==> adjoint ?f ?y \<bullet> ?x = ?y \<bullet> ?f ?x",
     template_implication
      ([template_predicate
         (template_app (template_hole 4, template_var 2))],
       template_equation
        (template_app
          (template_app
            (template_hole 2,
             template_app
              (template_app (template_hole 1, template_var 2),
               template_var 1)),
           template_var 0),
         template_app
          (template_app (template_hole 0, template_var 1),
           template_app (template_var 2, template_var 0))))),
    ("Linear_Algebra.pairwise_orthogonal_independent",
     "[| pairwise orthogonal ?S; (0::?'a) ~: ?S |] ==> independent ?S",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 5, template_hole 4),
              template_var 0)
            ),
        template_negation
         (
            template_predicate
             (
                template_app
                 (template_app (template_hole 2, template_hole 1),
                  template_var 0)
                )
            )],
       template_negation
        (
           template_predicate
            (template_app (template_hole 0, template_var 0))
           ))),
    ("Linear_Algebra.infnorm_set_lemma",
     "finite {\<bar>?x \<bullet> i\<bar> |i. i : Basis}",
     template_predicate
      (
         template_app
          (template_hole 8, template_app (template_hole 7, t_empty))
         )),
    ("Set_Algebras.set_plus_image",
     "?S + ?T = (%(x, y). x + y) ` (?S \<times> ?T)",
     template_equation
      (template_app
        (template_app (template_hole 4, template_var 1), template_var 0),
       template_app
        (template_app
          (template_hole 3, template_app (template_hole 2, t_empty)),
         template_app
          (template_app (template_hole 0, template_var 1), t_empty)))),
    ("Set_Algebras.set_times_image",
     "?S * ?T = (%(x, y). x * y) ` (?S \<times> ?T)",
     template_equation
      (template_app
        (template_app (template_hole 4, template_var 1), template_var 0),
       template_app
        (template_app
          (template_hole 3, template_app (template_hole 2, t_empty)),
         template_app
          (template_app (template_hole 0, template_var 1), t_empty)))),
    ("Set_Algebras.set_times_UNION_distrib",
     "?A * \<Union> (?M ` ?I) = (UN i:?I. ?A * ?M i)",
     template_equation
      (template_app
        (template_app (template_hole 2, template_var 2),
         template_app
          (template_hole 1,
           template_app
            (template_app (template_hole 0, template_var 1),
             template_var 0))),
       template_app
        (template_hole 1,
         template_app
          (template_app (template_hole 0, t_empty), template_var 0)))),
    ("Set_Algebras.set_times_UNION_distrib",
     "\<Union> (?M ` ?I) * ?A = (UN i:?I. ?M i * ?A)",
     template_equation
      (template_app
        (template_app
          (template_hole 2,
           template_app
            (template_hole 1,
             template_app
              (template_app (template_hole 0, template_var 2),
               template_var 1))),
         template_var 0),
       template_app
        (template_hole 1,
         template_app
          (template_app (template_hole 0, t_empty), template_var 1)))),
    ("Set_Algebras.set_plus_rearrange",
     "?a +o ?C + ?b +o ?D = (?a + ?b) +o (?C + ?D)",
     template_equation
      (template_app
        (template_app
          (template_hole 2,
           template_app
            (template_app (template_hole 1, template_var 3),
             template_var 2)),
         template_app
          (template_app (template_hole 1, template_var 1), template_var 0)),
       template_app
        (template_app
          (template_hole 1,
           template_app
            (template_app (template_hole 0, template_var 3),
             template_var 1)),
         template_app
          (template_app (template_hole 2, template_var 2),
           template_var 0)))),
    ("Set_Algebras.set_times_rearrange",
     "?a *o ?C * ?b *o ?D = (?a * ?b) *o (?C * ?D)",
     template_equation
      (template_app
        (template_app
          (template_hole 2,
           template_app
            (template_app (template_hole 1, template_var 3),
             template_var 2)),
         template_app
          (template_app (template_hole 1, template_var 1), template_var 0)),
       template_app
        (template_app
          (template_hole 1,
           template_app
            (template_app (template_hole 0, template_var 3),
             template_var 1)),
         template_app
          (template_app (template_hole 2, template_var 2),
           template_var 0)))),
    ("Linear_Algebra.vector_sub_project_orthogonal",
     "?b \<bullet>
      (?x - (?b \<bullet> ?x / (?b \<bullet> ?b)) *\<^sub>R ?b) =
      0",
     template_equation
      (template_app
        (template_app (template_hole 4, template_var 1),
         template_app
          (template_app (template_hole 3, template_var 0),
           template_app
            (template_app
              (template_hole 2,
               template_app
                (template_app
                  (template_hole 1,
                   template_app
                    (template_app (template_hole 4, template_var 1),
                     template_var 0)),
                 template_app
                  (template_app (template_hole 4, template_var 1),
                   template_var 1))),
             template_var 1))),
       template_hole 0)),
    ("Linear_Algebra.bilinear_rmul",
     "bilinear ?h ==> ?h ?x (?c *\<^sub>R ?y) = ?c *\<^sub>R ?h ?x ?y",
     template_implication
      ([template_predicate
         (template_app (template_hole 3, template_var 3))],
       template_equation
        (template_app
          (template_app (template_var 3, template_var 2),
           template_app
            (template_app (template_hole 1, template_var 1),
             template_var 0)),
         template_app
          (template_app (template_hole 0, template_var 1),
           template_app
            (template_app (template_var 3, template_var 2),
             template_var 0))))),
    ("Linear_Algebra.bilinear_lmul",
     "bilinear ?h ==> ?h (?c *\<^sub>R ?x) ?y = ?c *\<^sub>R ?h ?x ?y",
     template_implication
      ([template_predicate
         (template_app (template_hole 3, template_var 3))],
       template_equation
        (template_app
          (template_app
            (template_var 3,
             template_app
              (template_app (template_hole 1, template_var 2),
               template_var 1)),
           template_var 0),
         template_app
          (template_app (template_hole 0, template_var 2),
           template_app
            (template_app (template_var 3, template_var 1),
             template_var 0))))),
    ("Boolean_Algebras.inf2I",
     "[| ?A ?x ?y; ?B ?x ?y |] ==> inf ?A ?B ?x ?y",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_var 3, template_var 2), template_var 1)
            ),
        template_predicate
         (
            template_app
             (template_app (template_var 0, template_var 2), template_var 1)
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_app
                (template_app (template_hole 0, template_var 3),
                 template_var 0),
               template_var 2),
             template_var 1)
           ))),
    ("Algebra.refines_drefines",
     "[| ?a \<sqsubseteq> ?b; well_def ?b |] ==> drefines (%s. s) ?G ?a ?b",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 2, template_var 2),
              template_var 1)
            ),
        template_predicate
         (template_app (template_hole 1, template_var 1))],
       template_predicate
        (
           template_app
            (template_app
              (template_app
                (template_app (template_hole 0, t_empty), template_var 0),
               template_var 2),
             template_var 1)
           ))),
    ("Algebra.DC_refines",
     "[| ?a \<sqsubseteq> ?b; ?a \<sqsubseteq> ?c |]
      ==> ?a \<sqsubseteq> (?b \<Sqinter> ?c)",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 1, template_var 2),
              template_var 1)
            ),
        template_predicate
         (
            template_app
             (template_app (template_hole 1, template_var 2),
              template_var 0)
            )],
       template_predicate
        (
           template_app
            (template_app (template_hole 1, template_var 2),
             template_app
              (template_app (template_hole 0, template_var 1),
               template_var 0))
           ))),
    ("Algebra.AC_refines",
     "[| ?a \<sqsubseteq> ?c; ?b \<sqsubseteq> ?c |]
      ==> (?a \<Squnion> ?b) \<sqsubseteq> ?c",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 1, template_var 2),
              template_var 1)
            ),
        template_predicate
         (
            template_app
             (template_app (template_hole 1, template_var 0),
              template_var 1)
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 1,
               template_app
                (template_app (template_hole 0, template_var 2),
                 template_var 0)),
             template_var 1)
           ))),
    ("Linear_Algebra.linear_continuous_compose",
     "[| continuous ?F ?f; linear ?g |] ==> continuous ?F (%x. ?g (?f x))",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 2, template_var 2),
              template_var 1)
            ),
        template_predicate
         (template_app (template_hole 1, template_var 0))],
       template_predicate
        (
           template_app
            (template_app (template_hole 0, template_var 2), t_empty)
           ))),
    ("Linear_Algebra.linear_continuous_on_compose",
     "[| continuous_on ?S ?f; linear ?g |]
      ==> continuous_on ?S (%x. ?g (?f x))",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 2, template_var 2),
              template_var 1)
            ),
        template_predicate
         (template_app (template_hole 1, template_var 0))],
       template_predicate
        (
           template_app
            (template_app (template_hole 0, template_var 2), t_empty)
           ))),
    ("Linear_Algebra.linear_bounded",
     "linear ?f ==> EX B. ALL x. norm (?f x) <= B * norm x",
     template_implication
      ([template_predicate
         (template_app (template_hole 6, template_var 0))],
       template_predicate (template_app (template_hole 5, t_empty)))),
    ("Linear_Algebra.ex_card", "?n <= card ?A ==> EX S<=?A. card S = ?n",
     template_implication
      ([template_inequation
         (less_equals, template_var 1,
          template_app (template_hole 4, template_var 0))],
       template_predicate (template_app (template_hole 3, t_empty)))),
    ("Linear_Algebra.tendsto_infnorm",
     "(?f \<longlongrightarrow> ?a) ?F ==>
      ((%x. infnorm (?f x)) \<longlongrightarrow> infnorm ?a) ?F",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app (template_hole 4, template_var 2),
                template_app (template_hole 3, template_var 1)),
              template_var 0)
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_app (template_hole 2, t_empty),
               template_app
                (template_hole 0,
                 template_app (template_hole 1, template_var 1))),
             template_var 0)
           ))),
    ("Algebra.dr_Apply",
     "?f o ?\<phi> = ?\<phi> o ?g ==>
      drefines ?\<phi> ?G (Apply ?f) (Apply ?g)",
     template_implication
      ([template_equation
         (template_app
           (template_app (template_hole 4, template_var 3), template_var 2),
          template_app
           (template_app (template_hole 3, template_var 2),
            template_var 1))],
       template_predicate
        (
           template_app
            (template_app
              (template_app
                (template_app (template_hole 2, template_var 2),
                 template_var 0),
               template_app (template_hole 1, template_var 3)),
             template_app (template_hole 0, template_var 1))
           ))),
    ("Boolean_Algebras.sup2CI",
     "(~ ?B ?x ?y ==> ?A ?x ?y) ==> sup ?A ?B ?x ?y",
     template_implication
      ([template_implication
         ([template_negation
            (
               template_predicate
                (
                   template_app
                    (template_app (template_var 3, template_var 2),
                     template_var 1)
                   )
               )],
          template_predicate
           (
              template_app
               (template_app (template_var 0, template_var 2),
                template_var 1)
              ))],
       template_predicate
        (
           template_app
            (template_app
              (template_app
                (template_app (template_hole 0, template_var 0),
                 template_var 3),
               template_var 2),
             template_var 1)
           ))),
    ("Algebra.pequivD",
     "[| ?prog \<simeq> ?prog'; sound ?P |] ==> wp ?prog ?P = wp ?prog' ?P",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 3, template_var 2),
              template_var 1)
            ),
        template_predicate
         (template_app (template_hole 2, template_var 0))],
       template_equation
        (template_app
          (template_app (template_hole 0, template_var 2), template_var 0),
         template_app
          (template_app (template_hole 0, template_var 1),
           template_var 0)))),
    ("Algebra.refinesD",
     "[| ?prog \<sqsubseteq> ?prog'; sound ?P |]
      ==> wp ?prog ?P \<tturnstile> wp ?prog' ?P",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 3, template_var 2),
              template_var 1)
            ),
        template_predicate
         (template_app (template_hole 2, template_var 0))],
       template_inequation
        (less_equals,
         template_app
          (template_app (template_hole 0, template_var 2), template_var 0),
         template_app
          (template_app (template_hole 0, template_var 1),
           template_var 0)))),
    ("Algebra.pcorres_drefine",
     "[| pcorres ?\<phi> ?G ?A ?C; well_def ?C |]
      ==> drefines ?\<phi> ?G ?A ?C",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_app (template_hole 2, template_var 3),
                  template_var 2),
                template_var 1),
              template_var 0)
            ),
        template_predicate
         (template_app (template_hole 1, template_var 0))],
       template_predicate
        (
           template_app
            (template_app
              (template_app
                (template_app (template_hole 0, template_var 3),
                 template_var 2),
               template_var 1),
             template_var 0)
           ))),
    ("Linear_Algebra.infnorm_set_lemma",
     "{\<bar>?x \<bullet> i\<bar> |i. i : Basis} ~= {}",
     template_negation
      (
         template_equation
          (template_app (template_hole 8, t_empty), template_hole 0)
         )),
    ("Linear_Algebra.bilinear_radd",
     "bilinear ?h ==> ?h ?x (?y + ?z) = ?h ?x ?y + ?h ?x ?z",
     template_implication
      ([template_predicate
         (template_app (template_hole 3, template_var 3))],
       template_equation
        (template_app
          (template_app (template_var 3, template_var 2),
           template_app
            (template_app (template_hole 1, template_var 1),
             template_var 0)),
         template_app
          (template_app
            (template_hole 0,
             template_app
              (template_app (template_var 3, template_var 2),
               template_var 1)),
           template_app
            (template_app (template_var 3, template_var 2),
             template_var 0))))),
    ("Linear_Algebra.bilinear_rsub",
     "bilinear ?h ==> ?h ?z (?x - ?y) = ?h ?z ?x - ?h ?z ?y",
     template_implication
      ([template_predicate
         (template_app (template_hole 3, template_var 3))],
       template_equation
        (template_app
          (template_app (template_var 3, template_var 2),
           template_app
            (template_app (template_hole 1, template_var 1),
             template_var 0)),
         template_app
          (template_app
            (template_hole 0,
             template_app
              (template_app (template_var 3, template_var 2),
               template_var 1)),
           template_app
            (template_app (template_var 3, template_var 2),
             template_var 0))))),
    ("Linear_Algebra.bilinear_lsub",
     "bilinear ?h ==> ?h (?x - ?y) ?z = ?h ?x ?z - ?h ?y ?z",
     template_implication
      ([template_predicate
         (template_app (template_hole 3, template_var 3))],
       template_equation
        (template_app
          (template_app
            (template_var 3,
             template_app
              (template_app (template_hole 1, template_var 2),
               template_var 1)),
           template_var 0),
         template_app
          (template_app
            (template_hole 0,
             template_app
              (template_app (template_var 3, template_var 2),
               template_var 0)),
           template_app
            (template_app (template_var 3, template_var 1),
             template_var 0))))),
    ("Linear_Algebra.bilinear_ladd",
     "bilinear ?h ==> ?h (?x + ?y) ?z = ?h ?x ?z + ?h ?y ?z",
     template_implication
      ([template_predicate
         (template_app (template_hole 3, template_var 3))],
       template_equation
        (template_app
          (template_app
            (template_var 3,
             template_app
              (template_app (template_hole 1, template_var 2),
               template_var 1)),
           template_var 0),
         template_app
          (template_app
            (template_hole 0,
             template_app
              (template_app (template_var 3, template_var 2),
               template_var 0)),
           template_app
            (template_app (template_var 3, template_var 1),
             template_var 0))))),
    ("Algebra.pequiv_AC",
     "[| ?a \<simeq> ?c; ?b \<simeq> ?d |]
      ==> (?a \<Squnion> ?b) \<simeq> (?c \<Squnion> ?d)",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 1, template_var 3),
              template_var 2)
            ),
        template_predicate
         (
            template_app
             (template_app (template_hole 1, template_var 1),
              template_var 0)
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 1,
               template_app
                (template_app (template_hole 0, template_var 3),
                 template_var 1)),
             template_app
              (template_app (template_hole 0, template_var 2),
               template_var 0))
           ))),
    ("Algebra.pequiv_DC",
     "[| ?a \<simeq> ?c; ?b \<simeq> ?d |]
      ==> (?a \<Sqinter> ?b) \<simeq> (?c \<Sqinter> ?d)",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 1, template_var 3),
              template_var 2)
            ),
        template_predicate
         (
            template_app
             (template_app (template_hole 1, template_var 1),
              template_var 0)
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 1,
               template_app
                (template_app (template_hole 0, template_var 3),
                 template_var 1)),
             template_app
              (template_app (template_hole 0, template_var 2),
               template_var 0))
           ))),
    ("Algebra.pr_dr_trans",
     "[| ?A \<sqsubseteq> ?B; drefines ?\<phi> ?G ?B ?C |]
      ==> drefines ?\<phi> ?G ?A ?C",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 1, template_var 4),
              template_var 3)
            ),
        template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_app (template_hole 0, template_var 2),
                  template_var 1),
                template_var 3),
              template_var 0)
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_app
                (template_app (template_hole 0, template_var 2),
                 template_var 1),
               template_var 4),
             template_var 0)
           ))),
    ("Algebra.AC_mono",
     "[| ?a \<sqsubseteq> ?b; ?c \<sqsubseteq> ?d |]
      ==> (?a \<Squnion> ?c) \<sqsubseteq> (?b \<Squnion> ?d)",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 1, template_var 3),
              template_var 2)
            ),
        template_predicate
         (
            template_app
             (template_app (template_hole 1, template_var 1),
              template_var 0)
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 1,
               template_app
                (template_app (template_hole 0, template_var 3),
                 template_var 1)),
             template_app
              (template_app (template_hole 0, template_var 2),
               template_var 0))
           ))),
    ("Algebra.DC_mono",
     "[| ?a \<sqsubseteq> ?b; ?c \<sqsubseteq> ?d |]
      ==> (?a \<Sqinter> ?c) \<sqsubseteq> (?b \<Sqinter> ?d)",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 1, template_var 3),
              template_var 2)
            ),
        template_predicate
         (
            template_app
             (template_app (template_hole 1, template_var 1),
              template_var 0)
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 1,
               template_app
                (template_app (template_hole 0, template_var 3),
                 template_var 1)),
             template_app
              (template_app (template_hole 0, template_var 2),
               template_var 0))
           ))),
    ("Set_Algebras.set_plus_mono2",
     "[| ?C <= ?D; ?E <= ?F |] ==> ?C + ?E <= ?D + ?F",
     template_implication
      ([template_inequation (less_equals, template_var 3, template_var 2),
        template_inequation (less_equals, template_var 1, template_var 0)],
       template_inequation
        (less_equals,
         template_app
          (template_app (template_hole 0, template_var 3), template_var 1),
         template_app
          (template_app (template_hole 0, template_var 2),
           template_var 0)))),
    ("Set_Algebras.set_plus_mono_b",
     "[| ?C <= ?D; ?x : ?a +o ?C |] ==> ?x : ?a +o ?D",
     template_implication
      ([template_inequation (less_equals, template_var 3, template_var 2),
        template_predicate
         (
            template_app
             (template_app (template_hole 1, template_var 1),
              template_app
               (template_app (template_hole 0, template_var 0),
                template_var 3))
            )],
       template_predicate
        (
           template_app
            (template_app (template_hole 1, template_var 1),
             template_app
              (template_app (template_hole 0, template_var 0),
               template_var 2))
           ))),
    ("Set_Algebras.set_times_mono2",
     "[| ?C <= ?D; ?E <= ?F |] ==> ?C * ?E <= ?D * ?F",
     template_implication
      ([template_inequation (less_equals, template_var 3, template_var 2),
        template_inequation (less_equals, template_var 1, template_var 0)],
       template_inequation
        (less_equals,
         template_app
          (template_app (template_hole 0, template_var 3), template_var 1),
         template_app
          (template_app (template_hole 0, template_var 2),
           template_var 0)))),
    ("Set_Algebras.set_times_mono_b",
     "[| ?C <= ?D; ?x : ?a *o ?C |] ==> ?x : ?a *o ?D",
     template_implication
      ([template_inequation (less_equals, template_var 3, template_var 2),
        template_predicate
         (
            template_app
             (template_app (template_hole 1, template_var 1),
              template_app
               (template_app (template_hole 0, template_var 0),
                template_var 3))
            )],
       template_predicate
        (
           template_app
            (template_app (template_hole 1, template_var 1),
             template_app
              (template_app (template_hole 0, template_var 0),
               template_var 2))
           ))),
    ("Set_Algebras.set_plus_mono5",
     "[| ?a : ?C; ?B <= ?D |] ==> ?a +o ?B <= ?C + ?D",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 3, template_var 3),
              template_var 2)
            ),
        template_inequation (less_equals, template_var 1, template_var 0)],
       template_inequation
        (less_equals,
         template_app
          (template_app (template_hole 1, template_var 3), template_var 1),
         template_app
          (template_app (template_hole 0, template_var 2),
           template_var 0)))),
    ("Set_Algebras.set_plus_intro",
     "[| ?a : ?C; ?b : ?D |] ==> ?a + ?b : ?C + ?D",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 2, template_var 3),
              template_var 2)
            ),
        template_predicate
         (
            template_app
             (template_app (template_hole 2, template_var 1),
              template_var 0)
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 2,
               template_app
                (template_app (template_hole 1, template_var 3),
                 template_var 1)),
             template_app
              (template_app (template_hole 0, template_var 2),
               template_var 0))
           ))),
    ("Set_Algebras.set_plus_mono3_b",
     "[| ?a : ?C; ?x : ?a +o ?D |] ==> ?x : ?C + ?D",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 2, template_var 3),
              template_var 2)
            ),
        template_predicate
         (
            template_app
             (template_app (template_hole 2, template_var 1),
              template_app
               (template_app (template_hole 1, template_var 3),
                template_var 0))
            )],
       template_predicate
        (
           template_app
            (template_app (template_hole 2, template_var 1),
             template_app
              (template_app (template_hole 0, template_var 2),
               template_var 0))
           ))),
    ("Set_Algebras.set_times_mono5",
     "[| ?a : ?C; ?B <= ?D |] ==> ?a *o ?B <= ?C * ?D",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 3, template_var 3),
              template_var 2)
            ),
        template_inequation (less_equals, template_var 1, template_var 0)],
       template_inequation
        (less_equals,
         template_app
          (template_app (template_hole 1, template_var 3), template_var 1),
         template_app
          (template_app (template_hole 0, template_var 2),
           template_var 0)))),
    ("Set_Algebras.set_times_intro",
     "[| ?a : ?C; ?b : ?D |] ==> ?a * ?b : ?C * ?D",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 2, template_var 3),
              template_var 2)
            ),
        template_predicate
         (
            template_app
             (template_app (template_hole 2, template_var 1),
              template_var 0)
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 2,
               template_app
                (template_app (template_hole 1, template_var 3),
                 template_var 1)),
             template_app
              (template_app (template_hole 0, template_var 2),
               template_var 0))
           ))),
    ("Set_Algebras.set_times_mono3_b",
     "[| ?a : ?C; ?x : ?a *o ?D |] ==> ?x : ?C * ?D",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 2, template_var 3),
              template_var 2)
            ),
        template_predicate
         (
            template_app
             (template_app (template_hole 2, template_var 1),
              template_app
               (template_app (template_hole 1, template_var 3),
                template_var 0))
            )],
       template_predicate
        (
           template_app
            (template_app (template_hole 2, template_var 1),
             template_app
              (template_app (template_hole 0, template_var 2),
               template_var 0))
           ))),
    ("Set_Algebras.set_plus_mono4_b",
     "[| ?a : ?C; ?x : ?a +o ?D |] ==> ?x : ?D + ?C",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 2, template_var 3),
              template_var 2)
            ),
        template_predicate
         (
            template_app
             (template_app (template_hole 2, template_var 1),
              template_app
               (template_app (template_hole 1, template_var 3),
                template_var 0))
            )],
       template_predicate
        (
           template_app
            (template_app (template_hole 2, template_var 1),
             template_app
              (template_app (template_hole 0, template_var 0),
               template_var 2))
           ))),
    ("Set_Algebras.set_times_mono4_b",
     "[| ?a : ?C; ?x : ?a *o ?D |] ==> ?x : ?D * ?C",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 2, template_var 3),
              template_var 2)
            ),
        template_predicate
         (
            template_app
             (template_app (template_hole 2, template_var 1),
              template_app
               (template_app (template_hole 1, template_var 3),
                template_var 0))
            )],
       template_predicate
        (
           template_app
            (template_app (template_hole 2, template_var 1),
             template_app
              (template_app (template_hole 0, template_var 0),
               template_var 2))
           ))),
    ("Algebra.dr_pr_trans",
     "[| drefines ?\<phi> ?G ?A ?B; ?B \<sqsubseteq> ?C |]
      ==> drefines ?\<phi> ?G ?A ?C",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_app (template_hole 1, template_var 4),
                  template_var 3),
                template_var 2),
              template_var 1)
            ),
        template_predicate
         (
            template_app
             (template_app (template_hole 0, template_var 1),
              template_var 0)
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_app
                (template_app (template_hole 1, template_var 4),
                 template_var 3),
               template_var 2),
             template_var 0)
           ))),
    ("Linear_Algebra.translation_galois",
     "(?T = (+) ?a ` ?S) = (?S = (+) (- ?a) ` ?T)",
     template_bimplication
      (template_equation
        (template_var 2,
         template_app
          (template_app (template_hole 2, t_empty), template_var 0)),
       template_equation
        (template_var 0,
         template_app
          (template_app (template_hole 2, t_empty), template_var 2)))),
    ("Linear_Algebra.dim_special_hyperplane",
     "?k : Basis ==> dim {x. ?k \<bullet> x = 0} = DIM(?'n) - 1",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 10, template_var 0),
              template_hole 9)
            )],
       template_equation
        (template_app
          (template_hole 7, template_app (template_hole 6, t_empty)),
         template_app
          (template_app
            (template_hole 2,
             template_app (template_hole 1, template_hole 9)),
           template_hole 0)))),
    ("Linear_Algebra.translation_invert",
     "(+) ?a ` ?A = (+) ?a ` ?B ==> ?A = ?B",
     template_implication
      ([template_equation
         (template_app
           (template_app (template_hole 1, t_empty), template_var 1),
          template_app
           (template_app (template_hole 1, t_empty), template_var 0))],
       template_equation (template_var 1, template_var 0))),
    ("Algebra.pequivI",
     "(!!P. sound P ==> wp ?prog P = wp ?prog' P) ==>
      ?prog \<simeq> ?prog'",
     template_implication
      ([template_predicate (template_app (template_hole 5, t_empty))],
       template_predicate
        (
           template_app
            (template_app (template_hole 0, template_var 1), template_var 0)
           ))),
    ("Algebra.refinesI",
     "(!!P. sound P ==> wp ?prog P \<tturnstile> wp ?prog' P) ==>
      ?prog \<sqsubseteq> ?prog'",
     template_implication
      ([template_predicate (template_app (template_hole 5, t_empty))],
       template_predicate
        (
           template_app
            (template_app (template_hole 0, template_var 1), template_var 0)
           ))),
    ("Boolean_Algebras.inf1E",
     "[| inf ?A ?B ?x; [| ?A ?x; ?B ?x |] ==> ?P |] ==> ?P",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app (template_hole 0, template_var 3),
                template_var 2),
              template_var 1)
            ),
        template_implication
         ([template_predicate
            (template_app (template_var 3, template_var 1))],
          template_implication
           ([template_predicate
              (template_app (template_var 2, template_var 1))],
            template_predicate (template_var 0)))],
       template_predicate (template_var 0))),
    ("Boolean_Algebras.sup_boolE",
     "[| sup ?P ?Q; ?P ==> ?R; ?Q ==> ?R |] ==> ?R",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 0, template_var 2),
              template_var 1)
            ),
        template_implication
         ([template_predicate (template_var 2)],
          template_predicate (template_var 0)),
        template_implication
         ([template_predicate (template_var 1)],
          template_predicate (template_var 0))],
       template_predicate (template_var 0))),
    ("Linear_Algebra.collinear_alt",
     "collinear ?S = (EX u v. ALL x:?S. EX c. x = u + c *\<^sub>R v)",
     template_equation
      (template_app (template_hole 6, template_var 0),
       template_app (template_hole 5, t_empty))),
    ("Linear_Algebra.vector_eq",
     "(?x = ?y) =
      (?x \<bullet> ?x = ?x \<bullet> ?y &
       ?y \<bullet> ?y = ?x \<bullet> ?x)",
     template_bimplication
      (template_equation (template_var 1, template_var 0),
       template_predicate
        (
           template_app
            (template_app
              (template_hole 2,
               template_app
                (template_app
                  (template_hole 1,
                   template_app
                    (template_app (template_hole 0, template_var 1),
                     template_var 1)),
                 template_app
                  (template_app (template_hole 0, template_var 1),
                   template_var 0))),
             template_app
              (template_app
                (template_hole 1,
                 template_app
                  (template_app (template_hole 0, template_var 0),
                   template_var 0)),
               template_app
                (template_app (template_hole 0, template_var 1),
                 template_var 1)))
           ))),
    ("Linear_Algebra.norm_cauchy_schwarz_eq",
     "(?x \<bullet> ?y = norm ?x * norm ?y) =
      (norm ?x *\<^sub>R ?y = norm ?y *\<^sub>R ?x)",
     template_bimplication
      (template_equation
        (template_app
          (template_app (template_hole 4, template_var 1), template_var 0),
         template_app
          (template_app
            (template_hole 3,
             template_app (template_hole 2, template_var 1)),
           template_app (template_hole 2, template_var 0))),
       template_equation
        (template_app
          (template_app
            (template_hole 0,
             template_app (template_hole 2, template_var 1)),
           template_var 0),
         template_app
          (template_app
            (template_hole 0,
             template_app (template_hole 2, template_var 0)),
           template_var 1)))),
    ("Linear_Algebra.norm_cauchy_schwarz_equal",
     "(\<bar>?x \<bullet> ?y\<bar> = norm ?x * norm ?y) =
      collinear {0::?'a, ?x, ?y}",
     template_equation
      (template_app
        (template_app
          (template_hole 8,
           template_app
            (template_hole 7,
             template_app
              (template_app (template_hole 6, template_var 1),
               template_var 0))),
         template_app
          (template_app
            (template_hole 5,
             template_app (template_hole 4, template_var 1)),
           template_app (template_hole 4, template_var 0))),
       template_app
        (template_hole 3,
         template_app
          (template_app (template_hole 2, template_hole 1),
           template_app
            (template_app (template_hole 2, template_var 1),
             template_app
              (template_app (template_hole 2, template_var 0),
               template_hole 0)))))),
    ("Linear_Algebra.special_hyperplane_span",
     "?k : Basis ==> {x. ?k \<bullet> x = 0} = span (Basis - {?k})",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 10, template_var 0),
              template_hole 9)
            )],
       template_equation
        (template_app (template_hole 7, t_empty),
         template_app
          (template_hole 3,
           template_app
            (template_app (template_hole 2, template_hole 9),
             template_app
              (template_app (template_hole 1, template_var 0),
               template_hole 0)))))),
    ("Linear_Algebra.dim_hyperplane",
     "?a ~= (0::?'a) ==> dim {x. ?a \<bullet> x = 0} = DIM(?'a) - 1",
     template_implication
      ([template_negation
         (template_equation (template_var 0, template_hole 10))],
       template_equation
        (template_app
          (template_hole 8, template_app (template_hole 7, t_empty)),
         template_app
          (template_app
            (template_hole 3,
             template_app (template_hole 2, template_hole 1)),
           template_hole 0)))),
    ("Linear_Algebra.translation_inverse_subset",
     "(+) (- ?a) ` ?V <= ?S ==> ?V <= (+) ?a ` ?S",
     template_implication
      ([template_inequation
         (less_equals,
          template_app
           (template_app (template_hole 2, t_empty), template_var 1),
          template_var 0)],
       template_inequation
        (less_equals, template_var 1,
         template_app
          (template_app (template_hole 2, t_empty), template_var 0)))),
    ("Linear_Algebra.adjoint_unique",
     "ALL x y. ?f x \<bullet> y = x \<bullet> ?g y ==> adjoint ?f = ?g",
     template_implication
      ([template_predicate (template_app (template_hole 6, t_empty))],
       template_equation
        (template_app (template_hole 0, template_var 1), template_var 0))),
    ("Linear_Algebra.translation_assoc",
     "(+) ?b ` (+) ?a ` ?S = (+) (?a + ?b) ` ?S",
     template_equation
      (template_app
        (template_app (template_hole 1, t_empty),
         template_app
          (template_app (template_hole 1, t_empty), template_var 0)),
       template_app
        (template_app (template_hole 1, t_empty), template_var 0))),
    ("Linear_Algebra.norm_triangle_eq",
     "(norm (?x + ?y) = norm ?x + norm ?y) =
      (norm ?x *\<^sub>R ?y = norm ?y *\<^sub>R ?x)",
     template_bimplication
      (template_equation
        (template_app
          (template_hole 4,
           template_app
            (template_app (template_hole 3, template_var 1),
             template_var 0)),
         template_app
          (template_app
            (template_hole 2,
             template_app (template_hole 4, template_var 1)),
           template_app (template_hole 4, template_var 0))),
       template_equation
        (template_app
          (template_app
            (template_hole 0,
             template_app (template_hole 4, template_var 1)),
           template_var 0),
         template_app
          (template_app
            (template_hole 0,
             template_app (template_hole 4, template_var 0)),
           template_var 1)))),
    ("Linear_Algebra.linear_componentwise",
     "linear ?f ==>
      ?f ?x \<bullet> ?j =
      (SUM i:Basis. ?x \<bullet> i * (?f i \<bullet> ?j))",
     template_implication
      ([template_predicate
         (template_app (template_hole 6, template_var 2))],
       template_equation
        (template_app
          (template_app
            (template_hole 4,
             template_app (template_var 2, template_var 1)),
           template_var 0),
         template_app
          (template_app (template_hole 3, t_empty), template_hole 0)))),
    ("Linear_Algebra.norm_triangle_eq_imp_collinear",
     "norm (?x + ?y) = norm ?x + norm ?y ==> collinear {0::?'a, ?x, ?y}",
     template_implication
      ([template_equation
         (template_app
           (template_hole 6,
            template_app
             (template_app (template_hole 5, template_var 1),
              template_var 0)),
          template_app
           (template_app
             (template_hole 4,
              template_app (template_hole 6, template_var 1)),
            template_app (template_hole 6, template_var 0)))],
       template_predicate
        (
           template_app
            (template_hole 3,
             template_app
              (template_app (template_hole 2, template_hole 1),
               template_app
                (template_app (template_hole 2, template_var 1),
                 template_app
                  (template_app (template_hole 2, template_var 0),
                   template_hole 0))))
           ))),
    ("Linear_Algebra.Lim_linear",
     "[| (?f \<longlongrightarrow> ?l) ?F; linear ?h |]
      ==> ((%x. ?h (?f x)) \<longlongrightarrow> ?h ?l) ?F",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app (template_hole 4, template_var 3),
                template_app (template_hole 3, template_var 2)),
              template_var 1)
            ),
        template_predicate
         (template_app (template_hole 2, template_var 0))],
       template_predicate
        (
           template_app
            (template_app
              (template_app (template_hole 1, t_empty),
               template_app
                (template_hole 0,
                 template_app (template_var 0, template_var 2))),
             template_var 1)
           ))),
    ("Linear_Algebra.orthogonal_to_span",
     "[| ?a : span ?S; !!y. y : ?S ==> orthogonal ?x y |]
      ==> orthogonal ?x ?a",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 3, template_var 2),
              template_app (template_hole 2, template_var 1))
            ),
        template_predicate (template_app (template_hole 1, t_empty))],
       template_predicate
        (
           template_app
            (template_app (template_hole 0, template_var 0), template_var 2)
           ))),
    ("Boolean_Algebras.inf2E",
     "[| inf ?A ?B ?x ?y; [| ?A ?x ?y; ?B ?x ?y |] ==> ?P |] ==> ?P",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_app (template_hole 0, template_var 4),
                  template_var 3),
                template_var 2),
              template_var 1)
            ),
        template_implication
         ([template_predicate
            (
               template_app
                (template_app (template_var 4, template_var 2),
                 template_var 1)
               )],
          template_implication
           ([template_predicate
              (
                 template_app
                  (template_app (template_var 3, template_var 2),
                   template_var 1)
                 )],
            template_predicate (template_var 0)))],
       template_predicate (template_var 0))),
    ("Boolean_Algebras.sup1E",
     "[| sup ?A ?B ?x; ?A ?x ==> ?P; ?B ?x ==> ?P |] ==> ?P",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app (template_hole 0, template_var 3),
                template_var 2),
              template_var 1)
            ),
        template_implication
         ([template_predicate
            (template_app (template_var 3, template_var 1))],
          template_predicate (template_var 0)),
        template_implication
         ([template_predicate
            (template_app (template_var 2, template_var 1))],
          template_predicate (template_var 0))],
       template_predicate (template_var 0))),
    ("Algebra.refines_determ",
     "[| determ (wp ?a); well_def ?a; well_def ?b; ?a \<sqsubseteq> ?b |]
      ==> ?a \<simeq> ?b",
     template_implication
      ([template_predicate
         (
            template_app
             (template_hole 4,
              template_app (template_hole 3, template_var 1))
            ),
        template_predicate (template_app (template_hole 2, template_var 1)),
        template_predicate (template_app (template_hole 2, template_var 0)),
        template_predicate
         (
            template_app
             (template_app (template_hole 1, template_var 1),
              template_var 0)
            )],
       template_predicate
        (
           template_app
            (template_app (template_hole 0, template_var 1), template_var 0)
           ))),
    ("Linear_Algebra.infnorm_set_image",
     "{\<bar>?x \<bullet> i\<bar> |i. i : Basis} =
      (%i. \<bar>?x \<bullet> i\<bar>) ` Basis",
     template_equation
      (template_app (template_hole 8, t_empty),
       template_app
        (template_app (template_hole 0, t_empty), template_hole 1))),
    ("Linear_Algebra.bilinear_bounded",
     "bilinear ?h ==> EX B. ALL x y. norm (?h x y) <= B * norm x * norm y",
     template_implication
      ([template_predicate
         (template_app (template_hole 8, template_var 0))],
       template_predicate (template_app (template_hole 7, t_empty)))),
    ("Linear_Algebra.vector_in_orthogonal_spanningset",
     "(!!S. [| ?a : S; pairwise orthogonal S; span S = UNIV |]
            ==> ?thesis) ==>
      ?thesis",
     template_implication
      ([template_predicate (template_app (template_hole 7, t_empty))],
       template_predicate (template_var 0))),
    ("Linear_Algebra.orthogonal_rvsum",
     "[| finite ?s; !!y. y : ?s ==> orthogonal ?x (?f y) |]
      ==> orthogonal ?x (sum ?f ?s)",
     template_implication
      ([template_predicate (template_app (template_hole 4, template_var 2)),
        template_predicate (template_app (template_hole 3, t_empty))],
       template_predicate
        (
           template_app
            (template_app (template_hole 1, template_var 1),
             template_app
              (template_app (template_hole 0, template_var 0),
               template_var 2))
           ))),
    ("Linear_Algebra.orthogonal_lvsum",
     "[| finite ?s; !!x. x : ?s ==> orthogonal (?f x) ?y |]
      ==> orthogonal (sum ?f ?s) ?y",
     template_implication
      ([template_predicate (template_app (template_hole 4, template_var 2)),
        template_predicate (template_app (template_hole 3, t_empty))],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 1,
               template_app
                (template_app (template_hole 0, template_var 1),
                 template_var 2)),
             template_var 0)
           ))),
    ("Linear_Algebra.pairwise_orthogonal_insert",
     "[| pairwise orthogonal ?S; !!y. y : ?S ==> orthogonal ?x y |]
      ==> pairwise orthogonal (insert ?x ?S)",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 4, template_hole 3),
              template_var 1)
            ),
        template_predicate (template_app (template_hole 2, t_empty))],
       template_predicate
        (
           template_app
            (template_app (template_hole 4, template_hole 3),
             template_app
              (template_app (template_hole 0, template_var 0),
               template_var 1))
           ))),
    ("Algebra.dr_strengthen_guard",
     "[| !!s. ?F s ==> ?G s; drefines ?\<phi> ?G ?a ?b |]
      ==> drefines ?\<phi> ?F ?a ?b",
     template_implication
      ([template_predicate (template_app (template_hole 2, t_empty)),
        template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_app (template_hole 0, template_var 2),
                  template_var 3),
                template_var 1),
              template_var 0)
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_app
                (template_app (template_hole 0, template_var 2),
                 template_var 4),
               template_var 1),
             template_var 0)
           ))),
    ("Set_Algebras.set_plus_mono2_b",
     "[| ?C <= ?D; ?E <= ?F; ?x : ?C + ?E |] ==> ?x : ?D + ?F",
     template_implication
      ([template_inequation (less_equals, template_var 4, template_var 3),
        template_inequation (less_equals, template_var 2, template_var 1),
        template_predicate
         (
            template_app
             (template_app (template_hole 1, template_var 0),
              template_app
               (template_app (template_hole 0, template_var 4),
                template_var 2))
            )],
       template_predicate
        (
           template_app
            (template_app (template_hole 1, template_var 0),
             template_app
              (template_app (template_hole 0, template_var 3),
               template_var 1))
           ))),
    ("Set_Algebras.set_times_mono2_b",
     "[| ?C <= ?D; ?E <= ?F; ?x : ?C * ?E |] ==> ?x : ?D * ?F",
     template_implication
      ([template_inequation (less_equals, template_var 4, template_var 3),
        template_inequation (less_equals, template_var 2, template_var 1),
        template_predicate
         (
            template_app
             (template_app (template_hole 1, template_var 0),
              template_app
               (template_app (template_hole 0, template_var 4),
                template_var 2))
            )],
       template_predicate
        (
           template_app
            (template_app (template_hole 1, template_var 0),
             template_app
              (template_app (template_hole 0, template_var 3),
               template_var 1))
           ))),
    ("Linear_Algebra.bilinear_continuous_compose",
     "[| continuous ?F ?f; continuous ?F ?g; bilinear ?h |]
      ==> continuous ?F (%x. ?h (?f x) (?g x))",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 3, template_var 3),
              template_var 2)
            ),
        template_predicate
         (
            template_app
             (template_app (template_hole 2, template_var 3),
              template_var 1)
            ),
        template_predicate
         (template_app (template_hole 1, template_var 0))],
       template_predicate
        (
           template_app
            (template_app (template_hole 0, template_var 3), t_empty)
           ))),
    ("Linear_Algebra.bilinear_continuous_on_compose",
     "[| continuous_on ?S ?f; continuous_on ?S ?g; bilinear ?h |]
      ==> continuous_on ?S (%x. ?h (?f x) (?g x))",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 3, template_var 3),
              template_var 2)
            ),
        template_predicate
         (
            template_app
             (template_app (template_hole 2, template_var 3),
              template_var 1)
            ),
        template_predicate
         (template_app (template_hole 1, template_var 0))],
       template_predicate
        (
           template_app
            (template_app (template_hole 0, template_var 3), t_empty)
           ))),
    ("Linear_Algebra.sum_clauses",
     "finite ?S ==>
      sum ?f (insert ?x ?S) =
      (if ?x : ?S then sum ?f ?S else ?f ?x + sum ?f ?S)",
     template_implication
      ([template_predicate
         (template_app (template_hole 6, template_var 2))],
       template_equation
        (template_app
          (template_app (template_hole 4, template_var 1),
           template_app
            (template_app (template_hole 3, template_var 0),
             template_var 2)),
         template_app
          (template_app
            (template_app
              (template_hole 2,
               template_app
                (template_app (template_hole 1, template_var 0),
                 template_var 2)),
             template_app
              (template_app (template_hole 4, template_var 1),
               template_var 2)),
           template_app
            (template_app
              (template_hole 0,
               template_app (template_var 1, template_var 0)),
             template_app
              (template_app (template_hole 4, template_var 1),
               template_var 2)))))),
    ("Linear_Algebra.span_not_univ_orthogonal",
     "span ?S ~= UNIV ==>
      EX a. a ~= (0::?'a) & (ALL x:span ?S. a \<bullet> x = 0)",
     template_implication
      ([template_negation
         (
            template_equation
             (template_app (template_hole 9, template_var 0),
              template_hole 8)
            )],
       template_predicate (template_app (template_hole 7, t_empty)))),
    ("Linear_Algebra.collinear_lemma",
     "collinear {0::?'a, ?x, ?y} =
      (?x = (0::?'a) | ?y = (0::?'a) | (EX c. ?y = c *\<^sub>R ?x))",
     template_implication
      ([template_predicate
         (
            template_app
             (template_hole 7,
              template_app
               (template_app (template_hole 6, template_hole 5),
                template_app
                 (template_app (template_hole 6, template_var 1),
                  template_app
                   (template_app (template_hole 6, template_var 0),
                    template_hole 4))))
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 3,
               template_app
                (template_app (template_hole 2, template_var 1),
                 template_hole 5)),
             template_app
              (template_app
                (template_hole 3,
                 template_app
                  (template_app (template_hole 2, template_var 0),
                   template_hole 5)),
               template_app (template_hole 1, t_empty)))
           ))),
    ("Linear_Algebra.basis_orthogonal",
     "finite ?B ==>
      EX C. finite C &
            card C <= card ?B & span C = span ?B & pairwise orthogonal C",
     template_implication
      ([template_predicate
         (template_app (template_hole 8, template_var 0))],
       template_predicate (template_app (template_hole 7, t_empty)))),
    ("Linear_Algebra.dim_substandard",
     "?d <= Basis ==>
      dim {x. ALL i:Basis. i ~: ?d --> x \<bullet> i = 0} = card ?d",
     template_implication
      ([template_inequation
         (less_equals, template_var 0, template_hole 11)],
       template_equation
        (template_app
          (template_hole 9, template_app (template_hole 8, t_empty)),
         template_app (template_hole 0, template_var 0)))),
    ("Linear_Algebra.span_not_univ_subset_hyperplane",
     "span ?S ~= UNIV ==>
      EX a. a ~= (0::?'a) & span ?S <= {x. a \<bullet> x = 0}",
     template_implication
      ([template_negation
         (
            template_equation
             (template_app (template_hole 10, template_var 0),
              template_hole 9)
            )],
       template_predicate (template_app (template_hole 8, t_empty)))),
    ("Linear_Algebra.lowdim_subset_hyperplane",
     "dim ?S < DIM(?'a) ==>
      EX a. a ~= (0::?'a) & span ?S <= {x. a \<bullet> x = 0}",
     template_implication
      ([template_inequation
         (less_than, template_app (template_hole 13, template_var 0),
          template_app (template_hole 12, template_hole 11))],
       template_predicate (template_app (template_hole 10, t_empty)))),
    ("Boolean_Algebras.sup2E",
     "[| sup ?A ?B ?x ?y; ?A ?x ?y ==> ?P; ?B ?x ?y ==> ?P |] ==> ?P",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_app (template_hole 0, template_var 4),
                  template_var 3),
                template_var 2),
              template_var 1)
            ),
        template_implication
         ([template_predicate
            (
               template_app
                (template_app (template_var 4, template_var 2),
                 template_var 1)
               )],
          template_predicate (template_var 0)),
        template_implication
         ([template_predicate
            (
               template_app
                (template_app (template_var 3, template_var 2),
                 template_var 1)
               )],
          template_predicate (template_var 0))],
       template_predicate (template_var 0))),
    ("Linear_Algebra.orthogonal_basis_exists",
     "EX B. independent B &
            B <= span ?V &
            ?V <= span B & card B = dim ?V & pairwise orthogonal B",
     template_predicate (template_app (template_hole 10, t_empty))),
    ("Linear_Algebra.collinear",
     "collinear ?S =
      (EX u. u ~= (0::?'a) &
             (ALL x:?S. ALL y:?S. EX c. x - y = c *\<^sub>R u))",
     template_equation
      (template_app (template_hole 9, template_var 0),
       template_app (template_hole 8, t_empty))),
    ("Linear_Algebra.dim_eq_hyperplane",
     "(dim ?S = DIM(?'n) - 1) =
      (EX a. a ~= (0::?'n) & span ?S = {x. a \<bullet> x = 0})",
     template_equation
      (template_app
        (template_app
          (template_hole 16,
           template_app (template_hole 15, template_var 0)),
         template_app
          (template_app
            (template_hole 14,
             template_app (template_hole 13, template_hole 12)),
           template_hole 11)),
       template_app (template_hole 10, t_empty))),
    ("Linear_Algebra.bilinear_sum",
     "bilinear ?h ==>
      ?h (sum ?f ?S) (sum ?g ?T) =
      (SUM (i, j):?S \<times> ?T. ?h (?f i) (?g j))",
     template_implication
      ([template_predicate
         (template_app (template_hole 6, template_var 4))],
       template_equation
        (template_app
          (template_app
            (template_var 4,
             template_app
              (template_app (template_hole 4, template_var 3),
               template_var 2)),
           template_app
            (template_app (template_hole 3, template_var 1),
             template_var 0)),
         template_app
          (template_app
            (template_hole 2, template_app (template_hole 1, t_empty)),
           template_app
            (template_app (template_hole 0, template_var 2), t_empty))))),
    ("Linear_Algebra.orthogonal_to_vector_exists",
     "[| 2 <= DIM(?'a);
         !!y. [| y ~= (0::?'a); orthogonal ?x y |] ==> ?thesis |]
      ==> ?thesis",
     template_implication
      ([template_inequation
         (less_equals,
          template_app
           (template_hole 9,
            template_app (template_hole 8, template_hole 7)),
          template_app (template_hole 6, template_hole 5)),
        template_predicate (template_app (template_hole 4, t_empty))],
       template_predicate (template_var 0))),
    ("Linear_Algebra.linear_eq_stdbasis",
     "[| linear ?f; linear ?g; !!b. b : Basis ==> ?f b = ?g b |]
      ==> ?f = ?g",
     template_implication
      ([template_predicate (template_app (template_hole 5, template_var 1)),
        template_predicate (template_app (template_hole 5, template_var 0)),
        template_predicate (template_app (template_hole 4, t_empty))],
       template_equation (template_var 1, template_var 0))),
    ("Algebra.drefines_determ",
     "[| determ (wp ?a); well_def ?a; well_def ?b;
         drefines ?\<phi> ?G ?a ?b |]
      ==> pcorres ?\<phi> ?G ?a ?b",
     template_implication
      ([template_predicate
         (
            template_app
             (template_hole 5,
              template_app (template_hole 4, template_var 3))
            ),
        template_predicate (template_app (template_hole 3, template_var 3)),
        template_predicate (template_app (template_hole 2, template_var 2)),
        template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_app (template_hole 1, template_var 1),
                  template_var 0),
                template_var 3),
              template_var 2)
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_app
                (template_app (template_hole 0, template_var 1),
                 template_var 0),
               template_var 3),
             template_var 2)
           ))),
    ("Set_Algebras.set_sum_alt",
     "finite ?I ==> sum ?S ?I = {sum s ?I |s. ALL i:?I. s i : ?S i}",
     template_implication
      ([template_predicate
         (template_app (template_hole 9, template_var 1))],
       template_equation
        (template_app
          (template_app (template_hole 7, template_var 0), template_var 1),
         template_app (template_hole 6, t_empty)))),
    ("Linear_Algebra.bilinear_bounded_pos",
     "bilinear ?h ==>
      EX B>0. ALL x y. norm (?h x y) <= B * norm x * norm y",
     template_implication
      ([template_predicate
         (template_app (template_hole 11, template_var 0))],
       template_predicate (template_app (template_hole 10, t_empty)))),
    ("Linear_Algebra.pairwise_ortho_scaleR",
     "pairwise (%i j. orthogonal (?f i) (?g j)) ?B ==>
      pairwise
       (%i j. orthogonal (?a i *\<^sub>R ?f i) (?a j *\<^sub>R ?g j)) ?B",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 2, t_empty), template_var 1)
            )],
       template_predicate
        (
           template_app
            (template_app (template_hole 2, t_empty), template_var 1)
           ))),
    ("Linear_Algebra.orthogonal_spanningset_subspace",
     "[| subspace ?S;
         !!B. [| B <= ?S; pairwise orthogonal B; span B = ?S |]
              ==> ?thesis |]
      ==> ?thesis",
     template_implication
      ([template_predicate (template_app (template_hole 6, template_var 1)),
        template_predicate (template_app (template_hole 5, t_empty))],
       template_predicate (template_var 0))),
    ("Linear_Algebra.norm_add_Pythagorean",
     "orthogonal ?a ?b ==>
      (norm (?a + ?b))\<^sup>2 = (norm ?a)\<^sup>2 + (norm ?b)\<^sup>2",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 8, template_var 1),
              template_var 0)
            )],
       template_equation
        (template_app
          (template_app
            (template_hole 6,
             template_app
              (template_hole 5,
               template_app
                (template_app (template_hole 4, template_var 1),
                 template_var 0))),
           template_app
            (template_hole 3,
             template_app (template_hole 2, template_hole 1))),
         template_app
          (template_app
            (template_hole 0,
             template_app
              (template_app
                (template_hole 6,
                 template_app (template_hole 5, template_var 1)),
               template_app
                (template_hole 3,
                 template_app (template_hole 2, template_hole 1)))),
           template_app
            (template_app
              (template_hole 6,
               template_app (template_hole 5, template_var 0)),
             template_app
              (template_hole 3,
               template_app (template_hole 2, template_hole 1))))))),
    ("Linear_Algebra.linear_bounded_pos",
     "[| linear ?f;
         !!B. [| 0 < B; !!x. norm (?f x) <= B * norm x |] ==> ?thesis |]
      ==> ?thesis",
     template_implication
      ([template_predicate (template_app (template_hole 8, template_var 1)),
        template_predicate (template_app (template_hole 7, t_empty))],
       template_predicate (template_var 0))),
    ("Linear_Algebra.Gram_Schmidt_step",
     "[| pairwise orthogonal ?S; ?x : span ?S |]
      ==> orthogonal ?x
           (?a -
            (SUM b:?S. (b \<bullet> ?a / (b \<bullet> b)) *\<^sub>R b))",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 8, template_hole 7),
              template_var 2)
            ),
        template_predicate
         (
            template_app
             (template_app (template_hole 6, template_var 1),
              template_app (template_hole 5, template_var 2))
            )],
       template_predicate
        (
           template_app
            (template_app (template_hole 7, template_var 1),
             template_app
              (template_app (template_hole 4, template_var 0),
               template_app
                (template_app (template_hole 3, t_empty), template_var 2)))
           ))),
    ("Algebra.dr_refl",
     "[| well_def ?a;
         !!Q. unitary Q ==>
              wp ?a Q o ?\<phi> \<tturnstile> wp ?a (Q o ?\<phi>) |]
      ==> drefines ?\<phi> ?G ?a ?a",
     template_implication
      ([template_predicate (template_app (template_hole 6, template_var 2)),
        template_predicate (template_app (template_hole 5, t_empty))],
       template_predicate
        (
           template_app
            (template_app
              (template_app
                (template_app (template_hole 0, template_var 1),
                 template_var 0),
               template_var 2),
             template_var 2)
           ))),
    ("Algebra.pcorresD",
     "[| pcorres ?\<phi> ?G ?A ?B; unitary ?Q |]
      ==> \<guillemotleft> ?G \<guillemotright> && (wp ?A ?Q o ?\<phi>) =
          \<guillemotleft> ?G \<guillemotright> && wp ?B (?Q o ?\<phi>)",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_app (template_hole 7, template_var 4),
                  template_var 3),
                template_var 2),
              template_var 1)
            ),
        template_predicate
         (template_app (template_hole 6, template_var 0))],
       template_equation
        (template_app
          (template_app
            (template_hole 4,
             template_app (template_hole 3, template_var 3)),
           template_app
            (template_app
              (template_hole 2,
               template_app
                (template_app (template_hole 1, template_var 2),
                 template_var 0)),
             template_var 4)),
         template_app
          (template_app
            (template_hole 4,
             template_app (template_hole 3, template_var 3)),
           template_app
            (template_app (template_hole 0, template_var 1),
             template_app
              (template_app (template_hole 2, template_var 0),
               template_var 4)))))),
    ("Linear_Algebra.dist_triangle_eq",
     "(dist ?x ?z = dist ?x ?y + dist ?y ?z) =
      (norm (?x - ?y) *\<^sub>R (?y - ?z) =
       norm (?y - ?z) *\<^sub>R (?x - ?y))",
     template_bimplication
      (template_equation
        (template_app
          (template_app (template_hole 5, template_var 2), template_var 1),
         template_app
          (template_app
            (template_hole 4,
             template_app
              (template_app (template_hole 5, template_var 2),
               template_var 0)),
           template_app
            (template_app (template_hole 5, template_var 0),
             template_var 1))),
       template_equation
        (template_app
          (template_app
            (template_hole 2,
             template_app
              (template_hole 1,
               template_app
                (template_app (template_hole 0, template_var 2),
                 template_var 0))),
           template_app
            (template_app (template_hole 0, template_var 0),
             template_var 1)),
         template_app
          (template_app
            (template_hole 2,
             template_app
              (template_hole 1,
               template_app
                (template_app (template_hole 0, template_var 0),
                 template_var 1))),
           template_app
            (template_app (template_hole 0, template_var 2),
             template_var 0))))),
    ("Linear_Algebra.collinear_scaleR_iff",
     "collinear {0::?'a, ?\<alpha> *\<^sub>R ?w, ?\<beta> *\<^sub>R ?z} =
      (collinear {0::?'a, ?w, ?z} | ?\<alpha> = 0 | ?\<beta> = 0)",
     template_implication
      ([template_predicate
         (
            template_app
             (template_hole 7,
              template_app
               (template_app (template_hole 6, template_hole 5),
                template_app
                 (template_app
                   (template_hole 6,
                    template_app
                     (template_app (template_hole 4, template_var 3),
                      template_var 2)),
                  template_app
                   (template_app
                     (template_hole 6,
                      template_app
                       (template_app (template_hole 4, template_var 1),
                        template_var 0)),
                    template_hole 3))))
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 2,
               template_app
                (template_hole 7,
                 template_app
                  (template_app (template_hole 6, template_hole 5),
                   template_app
                    (template_app (template_hole 6, template_var 2),
                     template_app
                      (template_app (template_hole 6, template_var 0),
                       template_hole 3))))),
             template_app
              (template_app
                (template_hole 2,
                 template_app
                  (template_app (template_hole 1, template_var 3),
                   template_hole 0)),
               template_app
                (template_app (template_hole 1, template_var 1),
                 template_hole 0)))
           ))),
    ("Linear_Algebra.orthogonal_extension",
     "[| pairwise orthogonal ?S;
         !!U. [| pairwise orthogonal (?S Un U);
                 span (?S Un U) = span (?S Un ?T) |]
              ==> ?thesis |]
      ==> ?thesis",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 5, template_hole 4),
              template_var 2)
            ),
        template_predicate (template_app (template_hole 3, t_empty))],
       template_predicate (template_var 0))),
    ("Algebra.pcorresI",
     "(!!Q. unitary Q ==>
            \<guillemotleft> ?G \<guillemotright> && (wp ?A Q o ?\<phi>) =
            \<guillemotleft> ?G \<guillemotright> &&
            wp ?B (Q o ?\<phi>)) ==>
      pcorres ?\<phi> ?G ?A ?B",
     template_implication
      ([template_predicate (template_app (template_hole 9, t_empty))],
       template_predicate
        (
           template_app
            (template_app
              (template_app
                (template_app (template_hole 0, template_var 1),
                 template_var 3),
               template_var 2),
             template_var 0)
           ))),
    ("Linear_Algebra.abs_triangle_half_l",
     "[| \<bar>?x - ?y\<bar> < ?e / (2::?'a);
         \<bar>?x' - ?y\<bar> < ?e / (2::?'a) |]
      ==> \<bar>?x - ?x'\<bar> < ?e",
     template_implication
      ([template_inequation
         (less_than,
          template_app
           (template_hole 5,
            template_app
             (template_app (template_hole 4, template_var 3),
              template_var 2)),
          template_app
           (template_app (template_hole 3, template_var 1),
            template_app
             (template_hole 2,
              template_app (template_hole 1, template_hole 0)))),
        template_inequation
         (less_than,
          template_app
           (template_hole 5,
            template_app
             (template_app (template_hole 4, template_var 0),
              template_var 2)),
          template_app
           (template_app (template_hole 3, template_var 1),
            template_app
             (template_hole 2,
              template_app (template_hole 1, template_hole 0))))],
       template_inequation
        (less_than,
         template_app
          (template_hole 5,
           template_app
            (template_app (template_hole 4, template_var 3),
             template_var 0)),
         template_var 1))),
    ("Linear_Algebra.abs_triangle_half_r",
     "[| \<bar>?y - ?x1.0\<bar> < ?e / (2::?'a);
         \<bar>?y - ?x2.0\<bar> < ?e / (2::?'a) |]
      ==> \<bar>?x1.0 - ?x2.0\<bar> < ?e",
     template_implication
      ([template_inequation
         (less_than,
          template_app
           (template_hole 5,
            template_app
             (template_app (template_hole 4, template_var 3),
              template_var 2)),
          template_app
           (template_app (template_hole 3, template_var 1),
            template_app
             (template_hole 2,
              template_app (template_hole 1, template_hole 0)))),
        template_inequation
         (less_than,
          template_app
           (template_hole 5,
            template_app
             (template_app (template_hole 4, template_var 3),
              template_var 0)),
          template_app
           (template_app (template_hole 3, template_var 1),
            template_app
             (template_hole 2,
              template_app (template_hole 1, template_hole 0))))],
       template_inequation
        (less_than,
         template_app
          (template_hole 5,
           template_app
            (template_app (template_hole 4, template_var 2),
             template_var 0)),
         template_var 1))),
    ("Linear_Algebra.norm_triangle_half_l",
     "[| norm (?x - ?y) < ?e / 2; norm (?x' - ?y) < ?e / 2 |]
      ==> norm (?x - ?x') < ?e",
     template_implication
      ([template_inequation
         (less_than,
          template_app
           (template_hole 5,
            template_app
             (template_app (template_hole 4, template_var 3),
              template_var 2)),
          template_app
           (template_app (template_hole 3, template_var 1),
            template_app
             (template_hole 2,
              template_app (template_hole 1, template_hole 0)))),
        template_inequation
         (less_than,
          template_app
           (template_hole 5,
            template_app
             (template_app (template_hole 4, template_var 0),
              template_var 2)),
          template_app
           (template_app (template_hole 3, template_var 1),
            template_app
             (template_hole 2,
              template_app (template_hole 1, template_hole 0))))],
       template_inequation
        (less_than,
         template_app
          (template_hole 5,
           template_app
            (template_app (template_hole 4, template_var 3),
             template_var 0)),
         template_var 1))),
    ("Linear_Algebra.norm_triangle_half_r",
     "[| norm (?y - ?x1.0) < ?e / 2; norm (?y - ?x2.0) < ?e / 2 |]
      ==> norm (?x1.0 - ?x2.0) < ?e",
     template_implication
      ([template_inequation
         (less_than,
          template_app
           (template_hole 5,
            template_app
             (template_app (template_hole 4, template_var 3),
              template_var 2)),
          template_app
           (template_app (template_hole 3, template_var 1),
            template_app
             (template_hole 2,
              template_app (template_hole 1, template_hole 0)))),
        template_inequation
         (less_than,
          template_app
           (template_hole 5,
            template_app
             (template_app (template_hole 4, template_var 3),
              template_var 0)),
          template_app
           (template_app (template_hole 3, template_var 1),
            template_app
             (template_hole 2,
              template_app (template_hole 1, template_hole 0))))],
       template_inequation
        (less_than,
         template_app
          (template_hole 5,
           template_app
            (template_app (template_hole 4, template_var 2),
             template_var 0)),
         template_var 1))),
    ("Linear_Algebra.orthogonal_extension_aux",
     "[| finite ?T; finite ?S; pairwise orthogonal ?S |]
      ==> EX U. pairwise orthogonal (?S Un U) &
                span (?S Un U) = span (?S Un ?T)",
     template_implication
      ([template_predicate (template_app (template_hole 7, template_var 1)),
        template_predicate (template_app (template_hole 7, template_var 0)),
        template_predicate
         (
            template_app
             (template_app (template_hole 6, template_hole 5),
              template_var 0)
            )],
       template_predicate (template_app (template_hole 4, t_empty)))),
    ("Linear_Algebra.norm_cauchy_schwarz_abs_eq",
     "(\<bar>?x \<bullet> ?y\<bar> = norm ?x * norm ?y) =
      (norm ?x *\<^sub>R ?y = norm ?y *\<^sub>R ?x |
       norm ?x *\<^sub>R ?y = - norm ?y *\<^sub>R ?x)",
     template_bimplication
      (template_equation
        (template_app
          (template_hole 7,
           template_app
            (template_app (template_hole 6, template_var 1),
             template_var 0)),
         template_app
          (template_app
            (template_hole 5,
             template_app (template_hole 4, template_var 1)),
           template_app (template_hole 4, template_var 0))),
       template_predicate
        (
           template_app
            (template_app
              (template_hole 3,
               template_app
                (template_app
                  (template_hole 2,
                   template_app
                    (template_app
                      (template_hole 1,
                       template_app (template_hole 4, template_var 1)),
                     template_var 0)),
                 template_app
                  (template_app
                    (template_hole 1,
                     template_app (template_hole 4, template_var 0)),
                   template_var 1))),
             template_app
              (template_app
                (template_hole 2,
                 template_app
                  (template_app
                    (template_hole 1,
                     template_app (template_hole 4, template_var 1)),
                   template_var 0)),
               template_app
                (template_app
                  (template_hole 1,
                   template_app
                    (template_hole 0,
                     template_app (template_hole 4, template_var 0))),
                 template_var 1)))
           ))),
    ("Linear_Algebra.dim_orthogonal_sum",
     "(!!x y. [| x : ?A; y : ?B |] ==> x \<bullet> y = 0) ==>
      dim (?A Un ?B) = dim ?A + dim ?B",
     template_implication
      ([template_predicate (template_app (template_hole 9, t_empty))],
       template_equation
        (template_app
          (template_hole 2,
           template_app
            (template_app (template_hole 1, template_var 1),
             template_var 0)),
         template_app
          (template_app
            (template_hole 0,
             template_app (template_hole 2, template_var 1)),
           template_app (template_hole 2, template_var 0))))),
    ("Algebra.drefinesD3",
     "[| drefines ?\<phi> ?G ?a ?b; ?G ?s; unitary ?Q; well_def ?a |]
      ==> wp ?a ?Q (?\<phi> ?s) <= wp ?b (?Q o ?\<phi>) ?s",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_app (template_hole 6, template_var 5),
                  template_var 4),
                template_var 3),
              template_var 2)
            ),
        template_predicate (template_app (template_var 4, template_var 1)),
        template_predicate (template_app (template_hole 5, template_var 0)),
        template_predicate
         (template_app (template_hole 4, template_var 3))],
       template_inequation
        (less_equals,
         template_app
          (template_app
            (template_app (template_hole 2, template_var 3),
             template_var 0),
           template_app (template_var 5, template_var 1)),
         template_app
          (template_app
            (template_app (template_hole 1, template_var 2),
             template_app
              (template_app (template_hole 0, template_var 0),
               template_var 5)),
           template_var 1)))),
    ("Linear_Algebra.orthogonal_to_subspace_exists",
     "[| dim ?S < DIM(?'a);
         !!x. [| x ~= (0::?'a); !!y. y : span ?S ==> orthogonal x y |]
              ==> ?thesis |]
      ==> ?thesis",
     template_implication
      ([template_inequation
         (less_than, template_app (template_hole 9, template_var 1),
          template_app (template_hole 8, template_hole 7)),
        template_predicate (template_app (template_hole 6, t_empty))],
       template_predicate (template_var 0))),
    ("Set_Algebras.set_plus_elim",
     "[| ?x : ?A + ?B;
         !!a b. [| ?x = a + b; a : ?A; b : ?B |] ==> ?thesis |]
      ==> ?thesis",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 4, template_var 3),
              template_app
               (template_app (template_hole 3, template_var 2),
                template_var 1))
            ),
        template_predicate (template_app (template_hole 2, t_empty))],
       template_predicate (template_var 0))),
    ("Set_Algebras.set_times_elim",
     "[| ?x : ?A * ?B;
         !!a b. [| ?x = a * b; a : ?A; b : ?B |] ==> ?thesis |]
      ==> ?thesis",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 4, template_var 3),
              template_app
               (template_app (template_hole 3, template_var 2),
                template_var 1))
            ),
        template_predicate (template_app (template_hole 2, t_empty))],
       template_predicate (template_var 0))),
    ("Linear_Algebra.linear_inj_bounded_below_pos",
     "[| linear ?f; inj ?f;
         !!B. [| 0 < B; !!x. B * norm x <= norm (?f x) |] ==> ?thesis |]
      ==> ?thesis",
     template_implication
      ([template_predicate
         (template_app (template_hole 10, template_var 1)),
        template_predicate
         (
            template_app
             (template_app (template_hole 9, template_var 1),
              template_hole 8)
            ),
        template_predicate (template_app (template_hole 7, t_empty))],
       template_predicate (template_var 0))),
    ("Linear_Algebra.dim_subspace_orthogonal_to_vectors",
     "[| subspace ?A; subspace ?B; ?A <= ?B |]
      ==> dim {y: ?B. ALL x:?A. orthogonal x y} + dim ?A = dim ?B",
     template_implication
      ([template_predicate (template_app (template_hole 9, template_var 1)),
        template_predicate (template_app (template_hole 9, template_var 0)),
        template_inequation (less_equals, template_var 1, template_var 0)],
       template_equation
        (template_app
          (template_app
            (template_hole 6,
             template_app
              (template_hole 5, template_app (template_hole 4, t_empty))),
           template_app (template_hole 5, template_var 1)),
         template_app (template_hole 5, template_var 0)))),
    ("Algebra.dr_trans",
     "[| drefines ?\<phi> ?G ?A ?B; drefines ?\<phi>' ?G' ?B ?C;
         !!s. ?G' s ==> ?G (?\<phi>' s) |]
      ==> drefines (?\<phi> o ?\<phi>') ?G' ?A ?C",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_app (template_hole 4, template_var 6),
                  template_var 5),
                template_var 4),
              template_var 3)
            ),
        template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_app (template_hole 3, template_var 2),
                  template_var 1),
                template_var 3),
              template_var 0)
            ),
        template_predicate (template_app (template_hole 2, t_empty))],
       template_predicate
        (
           template_app
            (template_app
              (template_app
                (template_app
                  (template_hole 1,
                   template_app
                    (template_app (template_hole 0, template_var 6),
                     template_var 2)),
                 template_var 1),
               template_var 4),
             template_var 0)
           ))),
    ("Linear_Algebra.lowdim_eq_hyperplane",
     "[| dim ?S = DIM(?'a) - 1;
         !!a. [| a ~= (0::?'a); span ?S = {x. a \<bullet> x = 0} |]
              ==> ?thesis |]
      ==> ?thesis",
     template_implication
      ([template_equation
         (template_app (template_hole 14, template_var 1),
          template_app
           (template_app
             (template_hole 13,
              template_app (template_hole 12, template_hole 11)),
            template_hole 10)),
        template_predicate (template_app (template_hole 9, t_empty))],
       template_predicate (template_var 0))),
    ("Linear_Algebra.bounded_linearI'",
     "[| !!x y. ?f (x + y) = ?f x + ?f y;
         !!c x. ?f (c *\<^sub>R x) = c *\<^sub>R ?f x |]
      ==> bounded_linear ?f",
     template_implication
      ([template_predicate (template_app (template_hole 8, t_empty)),
        template_predicate (template_app (template_hole 3, t_empty))],
       template_predicate
        (template_app (template_hole 0, template_var 0)))),
    ("Algebra.dr_repeat",
     "[| drefines ?\<phi> ?G ?a ?b;
         \<guillemotleft> ?G \<guillemotright> \<tturnstile> wp ?b
                        \<guillemotleft> ?G \<guillemotright>;
         well_def ?a; well_def ?b |]
      ==> drefines ?\<phi> ?G (repeat ?n ?a) (repeat ?n ?b)",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_app (template_hole 7, template_var 4),
                  template_var 3),
                template_var 2),
              template_var 1)
            ),
        template_inequation
         (less_equals, template_app (template_hole 5, template_var 3),
          template_app
           (template_app (template_hole 4, template_var 1),
            template_app (template_hole 5, template_var 3))),
        template_predicate (template_app (template_hole 3, template_var 2)),
        template_predicate
         (template_app (template_hole 2, template_var 1))],
       template_predicate
        (
           template_app
            (template_app
              (template_app
                (template_app (template_hole 7, template_var 4),
                 template_var 3),
               template_app
                (template_app (template_hole 1, template_var 0),
                 template_var 2)),
             template_app
              (template_app (template_hole 0, template_var 0),
               template_var 1))
           ))),
    ("Linear_Algebra.orthogonal_subspace_decomp_exists",
     "(!!y z.
          [| y : span ?S; !!w. w : span ?S ==> orthogonal z w; ?x = y + z |]
          ==> ?thesis) ==>
      ?thesis",
     template_implication
      ([template_predicate (template_app (template_hole 6, t_empty))],
       template_predicate (template_var 0))),
    ("Linear_Algebra.norm_sum_Pythagorean",
     "[| finite ?I; pairwise (%i j. orthogonal (?f i) (?f j)) ?I |]
      ==> (norm (sum ?f ?I))\<^sup>2 = (SUM i:?I. (norm (?f i))\<^sup>2)",
     template_implication
      ([template_predicate
         (template_app (template_hole 10, template_var 1)),
        template_predicate
         (
            template_app
             (template_app (template_hole 9, t_empty), template_var 1)
            )],
       template_equation
        (template_app
          (template_app
            (template_hole 6,
             template_app
              (template_hole 5,
               template_app
                (template_app (template_hole 4, template_var 0),
                 template_var 1))),
           template_app
            (template_hole 3,
             template_app (template_hole 2, template_hole 1))),
         template_app
          (template_app (template_hole 0, t_empty), template_var 1)))),
    ("Linear_Algebra.bilinear_eq_stdbasis",
     "[| bilinear ?f; bilinear ?g;
         !!i j. [| i : Basis; j : Basis |] ==> ?f i j = ?g i j |]
      ==> ?f = ?g",
     template_implication
      ([template_predicate (template_app (template_hole 8, template_var 1)),
        template_predicate (template_app (template_hole 8, template_var 0)),
        template_predicate (template_app (template_hole 7, t_empty))],
       template_equation (template_var 1, template_var 0))),
    ("Algebra.drefinesD",
     "[| drefines ?\<phi> ?G ?A ?B; unitary ?P; unitary ?Q;
         ?P \<tturnstile> wp ?A ?Q |]
      ==> \<guillemotleft> ?G \<guillemotright> &&
          (?P o ?\<phi>) \<tturnstile> wp ?B (?Q o ?\<phi>)",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_app (template_hole 8, template_var 5),
                  template_var 4),
                template_var 3),
              template_var 2)
            ),
        template_predicate (template_app (template_hole 7, template_var 1)),
        template_predicate (template_app (template_hole 7, template_var 0)),
        template_inequation
         (less_equals, template_var 1,
          template_app
           (template_app (template_hole 5, template_var 3),
            template_var 0))],
       template_inequation
        (less_equals,
         template_app
          (template_app
            (template_hole 3,
             template_app (template_hole 2, template_var 4)),
           template_app
            (template_app (template_hole 1, template_var 1),
             template_var 5)),
         template_app
          (template_app (template_hole 0, template_var 2),
           template_app
            (template_app (template_hole 1, template_var 0),
             template_var 5))))),
    ("Algebra.pcorresD2",
     "[| pcorres ?\<phi> ?G ?A ?B; unitary ?Q; well_def ?A; well_def ?B;
         ?G ?s |]
      ==> wp ?A ?Q (?\<phi> ?s) = wp ?B (?Q o ?\<phi>) ?s",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_app (template_hole 7, template_var 5),
                  template_var 4),
                template_var 3),
              template_var 2)
            ),
        template_predicate (template_app (template_hole 6, template_var 1)),
        template_predicate (template_app (template_hole 5, template_var 3)),
        template_predicate (template_app (template_hole 4, template_var 2)),
        template_predicate (template_app (template_var 4, template_var 0))],
       template_equation
        (template_app
          (template_app
            (template_app (template_hole 2, template_var 3),
             template_var 1),
           template_app (template_var 5, template_var 0)),
         template_app
          (template_app
            (template_app (template_hole 1, template_var 2),
             template_app
              (template_app (template_hole 0, template_var 1),
               template_var 5)),
           template_var 0)))),
    ("Set_Algebras.sum_set_linear",
     "[| !!A B. ?f A + ?f B = ?f (A + B); ?f {0::?'a} = {0::?'b} |]
      ==> ?f (sum ?S ?I) = sum (?f o ?S) ?I",
     template_implication
      ([template_predicate (template_app (template_hole 13, t_empty)),
        template_equation
         (template_app
           (template_var 2,
            template_app
             (template_app (template_hole 8, template_hole 7),
              template_hole 6)),
          template_app
           (template_app (template_hole 5, template_hole 4),
            template_hole 3))],
       template_equation
        (template_app
          (template_var 2,
           template_app
            (template_app (template_hole 2, template_var 1),
             template_var 0)),
         template_app
          (template_app
            (template_hole 1,
             template_app
              (template_app (template_hole 0, template_var 2),
               template_var 1)),
           template_var 0)))),
    ("Algebra.drefinesD2",
     "[| drefines ?\<phi> ?G ?A ?B; unitary ?P; unitary ?Q;
         ?P \<tturnstile> wp ?A ?Q; ?G ?s |]
      ==> (?P o ?\<phi>) ?s <= wp ?B (?Q o ?\<phi>) ?s",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_app (template_hole 6, template_var 6),
                  template_var 5),
                template_var 4),
              template_var 3)
            ),
        template_predicate (template_app (template_hole 5, template_var 2)),
        template_predicate (template_app (template_hole 5, template_var 1)),
        template_inequation
         (less_equals, template_var 2,
          template_app
           (template_app (template_hole 3, template_var 4),
            template_var 1)),
        template_predicate (template_app (template_var 5, template_var 0))],
       template_inequation
        (less_equals,
         template_app
          (template_app
            (template_app (template_hole 1, template_var 2),
             template_var 6),
           template_var 0),
         template_app
          (template_app
            (template_app (template_hole 0, template_var 3),
             template_app
              (template_app (template_hole 1, template_var 1),
               template_var 6)),
           template_var 0)))),
    ("Algebra.drefinesI",
     "(!!P Q.
          [| unitary P; unitary Q; P \<tturnstile> wp ?A Q |]
          ==> \<guillemotleft> ?G \<guillemotright> &&
              (P o ?\<phi>) \<tturnstile> wp ?B (Q o ?\<phi>)) ==>
      drefines ?\<phi> ?G ?A ?B",
     template_implication
      ([template_predicate (template_app (template_hole 10, t_empty))],
       template_predicate
        (
           template_app
            (template_app
              (template_app
                (template_app (template_hole 0, template_var 1),
                 template_var 2),
               template_var 3),
             template_var 0)
           ))),
    ("Linear_Algebra.orthogonal_extension_strong",
     "[| pairwise orthogonal ?S;
         !!U. [| U Int insert (0::?'a) ?S = {};
                 pairwise orthogonal (?S Un U);
                 span (?S Un U) = span (?S Un ?T) |]
              ==> ?thesis |]
      ==> ?thesis",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 9, template_hole 8),
              template_var 2)
            ),
        template_predicate (template_app (template_hole 7, t_empty))],
       template_predicate (template_var 0))),
    ("Linear_Algebra.orthogonal_to_subspace_exists_gen",
     "[| span ?S < span ?T;
         !!x. [| x ~= (0::?'a); x : span ?T;
                 !!y. y : span ?S ==> orthogonal x y |]
              ==> ?thesis |]
      ==> ?thesis",
     template_implication
      ([template_inequation
         (less_than, template_app (template_hole 6, template_var 2),
          template_app (template_hole 6, template_var 1)),
        template_predicate (template_app (template_hole 5, t_empty))],
       template_predicate (template_var 0))),
    ("Linear_Algebra.linear_invertible_bounded_below_pos",
     "[| linear ?f; linear ?g; ?g o ?f = id;
         !!B. [| 0 < B; !!x. B * norm x <= norm (?f x) |] ==> ?thesis |]
      ==> ?thesis",
     template_implication
      ([template_predicate
         (template_app (template_hole 12, template_var 2)),
        template_predicate
         (template_app (template_hole 11, template_var 1)),
        template_equation
         (template_app
           (template_app (template_hole 9, template_var 1), template_var 2),
          template_hole 8),
        template_predicate (template_app (template_hole 7, t_empty))],
       template_predicate (template_var 0))),
    ("Linear_Algebra.substdbasis_expansion_unique",
     "?d <= Basis ==>
      ((SUM i:?d. ?f i *\<^sub>R i) = ?x) =
      (ALL i:Basis.
          (i : ?d --> ?f i = ?x \<bullet> i) &
          (i ~: ?d --> ?x \<bullet> i = 0))",
     template_implication
      ([template_inequation
         (less_equals, template_var 2, template_hole 12)],
       template_equation
        (template_app
          (template_app
            (template_hole 10,
             template_app
              (template_app (template_hole 9, t_empty), template_var 2)),
           template_var 0),
         template_app
          (template_app (template_hole 7, template_hole 12), t_empty)))),
    ("Algebra.pcorresI2",
     "[| !!Q s.
            [| unitary Q; ?G s |]
            ==> wp ?A Q (?\<phi> s) = wp ?B (Q o ?\<phi>) s;
         well_def ?A; well_def ?B |]
      ==> pcorres ?\<phi> ?G ?A ?B",
     template_implication
      ([template_predicate (template_app (template_hole 10, t_empty)),
        template_predicate (template_app (template_hole 2, template_var 2)),
        template_predicate
         (template_app (template_hole 1, template_var 0))],
       template_predicate
        (
           template_app
            (template_app
              (template_app
                (template_app (template_hole 0, template_var 1),
                 template_var 3),
               template_var 2),
             template_var 0)
           ))),
    ("Linear_Algebra.orthogonal_basis_subspace",
     "[| subspace ?S;
         !!B. [| (0::?'a) ~: B; B <= ?S; pairwise orthogonal B;
                 independent B; card B = dim ?S; span B = ?S |]
              ==> ?thesis |]
      ==> ?thesis",
     template_implication
      ([template_predicate
         (template_app (template_hole 13, template_var 1)),
        template_predicate (template_app (template_hole 12, t_empty))],
       template_predicate (template_var 0))),
    ("Algebra.dr_Seq",
     "[| drefines ?\<phi> ?P ?A ?B; drefines ?\<phi> ?Q ?C ?D;
         \<guillemotleft> ?P \<guillemotright> \<tturnstile> wp ?B
                        \<guillemotleft> ?Q \<guillemotright>;
         well_def ?B; well_def ?C; well_def ?D |]
      ==> drefines ?\<phi> ?P (?A ;; ?C) (?B ;; ?D)",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_app (template_hole 7, template_var 6),
                  template_var 5),
                template_var 4),
              template_var 3)
            ),
        template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_app (template_hole 7, template_var 6),
                  template_var 2),
                template_var 1),
              template_var 0)
            ),
        template_inequation
         (less_equals, template_app (template_hole 5, template_var 5),
          template_app
           (template_app (template_hole 4, template_var 3),
            template_app (template_hole 5, template_var 2))),
        template_predicate (template_app (template_hole 3, template_var 3)),
        template_predicate (template_app (template_hole 2, template_var 1)),
        template_predicate
         (template_app (template_hole 3, template_var 0))],
       template_predicate
        (
           template_app
            (template_app
              (template_app
                (template_app (template_hole 7, template_var 6),
                 template_var 5),
               template_app
                (template_app (template_hole 1, template_var 4),
                 template_var 1)),
             template_app
              (template_app (template_hole 0, template_var 3),
               template_var 0))
           ))),
    ("Algebra.drefinesI2",
     "[| well_def ?B;
         !!P Q s.
            [| unitary P; unitary Q; ?G s; P \<tturnstile> wp ?A Q |]
            ==> (P o ?\<phi>) s <= wp ?B (Q o ?\<phi>) s |]
      ==> drefines ?\<phi> ?G ?A ?B",
     template_implication
      ([template_predicate (template_app (template_hole 9, template_var 3)),
        template_predicate (template_app (template_hole 8, t_empty))],
       template_predicate
        (
           template_app
            (template_app
              (template_app
                (template_app (template_hole 0, template_var 0),
                 template_var 2),
               template_var 1),
             template_var 3)
           ))),
    ("Linear_Algebra.vector_in_orthogonal_basis",
     "[| ?a ~= (0::?'a);
         !!S. [| ?a : S; (0::?'a) ~: S; pairwise orthogonal S;
                 independent S; finite S; span S = UNIV;
                 card S = DIM(?'a) |]
              ==> ?thesis |]
      ==> ?thesis",
     template_implication
      ([template_negation
         (template_equation (template_var 1, template_hole 12)),
        template_predicate (template_app (template_hole 11, t_empty))],
       template_predicate (template_var 0))),
    ("Linear_Algebra.orthonormal_basis_subspace",
     "[| subspace ?S;
         !!B. [| B <= ?S; pairwise orthogonal B; !!x. x : B ==> norm x = 1;
                 independent B; card B = dim ?S; span B = ?S |]
              ==> ?thesis |]
      ==> ?thesis",
     template_implication
      ([template_predicate
         (template_app (template_hole 16, template_var 1)),
        template_predicate (template_app (template_hole 15, t_empty))],
       template_predicate (template_var 0))),
    ("Linear_Algebra.vector_in_orthonormal_basis",
     "[| norm ?a = 1;
         !!S. [| ?a : S; pairwise orthogonal S; !!x. x : S ==> norm x = 1;
                 independent S; card S = DIM(?'a); span S = UNIV |]
              ==> ?thesis |]
      ==> ?thesis",
     template_implication
      ([template_equation
         (template_app (template_hole 14, template_var 1),
          template_hole 13),
        template_predicate (template_app (template_hole 12, t_empty))],
       template_predicate (template_var 0))),
    ("Linear_Algebra.orthogonal_subspace_decomp_unique",
     "[| ?x + ?y = ?x' + ?y'; ?x : span ?S; ?x' : span ?S; ?y : span ?T;
         ?y' : span ?T; !!a b. [| a : ?S; b : ?T |] ==> orthogonal a b |]
      ==> ?x = ?x' & ?y = ?y'",
     template_implication
      ([template_equation
         (template_app
           (template_app (template_hole 5, template_var 5), template_var 4),
          template_app
           (template_app (template_hole 5, template_var 3),
            template_var 2)),
        template_predicate
         (
            template_app
             (template_app (template_hole 4, template_var 5),
              template_app (template_hole 3, template_var 1))
            ),
        template_predicate
         (
            template_app
             (template_app (template_hole 4, template_var 3),
              template_app (template_hole 3, template_var 1))
            ),
        template_predicate
         (
            template_app
             (template_app (template_hole 4, template_var 4),
              template_app (template_hole 3, template_var 0))
            ),
        template_predicate
         (
            template_app
             (template_app (template_hole 4, template_var 2),
              template_app (template_hole 3, template_var 0))
            ),
        template_predicate (template_app (template_hole 2, t_empty))],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 0,
               template_app
                (template_app (template_hole 6, template_var 5),
                 template_var 3)),
             template_app
              (template_app (template_hole 6, template_var 4),
               template_var 2))
           ))),
    ("Linear_Algebra.bilinear_eq",
     "[| bilinear ?f; bilinear ?g; ?S <= span ?B; ?T <= span ?C; ?x : ?S;
         ?y : ?T; !!x y. [| x : ?B; y : ?C |] ==> ?f x y = ?g x y |]
      ==> ?f ?x ?y = ?g ?x ?y",
     template_implication
      ([template_predicate (template_app (template_hole 9, template_var 7)),
        template_predicate (template_app (template_hole 9, template_var 6)),
        template_inequation
         (less_equals, template_var 5,
          template_app (template_hole 7, template_var 4)),
        template_inequation
         (less_equals, template_var 3,
          template_app (template_hole 5, template_var 2)),
        template_predicate
         (
            template_app
             (template_app (template_hole 4, template_var 1),
              template_var 5)
            ),
        template_predicate
         (
            template_app
             (template_app (template_hole 3, template_var 0),
              template_var 3)
            ),
        template_predicate (template_app (template_hole 2, t_empty))],
       template_equation
        (template_app
          (template_app (template_var 7, template_var 1), template_var 0),
         template_app
          (template_app (template_var 6, template_var 1),
           template_var 0)))),
    ("Algebra.pcorres_Seq",
     "[| pcorres ?\<phi> ?G ?A ?B; pcorres ?\<phi> ?H ?C ?D; well_def ?A;
         well_def ?B; well_def ?C; well_def ?D;
         !!Q. unitary Q ==>
              \<guillemotleft> ?I \<guillemotright> && wp ?B Q =
              wp ?B (\<guillemotleft> ?H \<guillemotright> && Q);
         !!s. ?G s ==> ?I s |]
      ==> pcorres ?\<phi> ?G (?A ;; ?C) (?B ;; ?D)",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_app (template_hole 11, template_var 7),
                  template_var 6),
                template_var 5),
              template_var 4)
            ),
        template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_app (template_hole 11, template_var 7),
                  template_var 3),
                template_var 2),
              template_var 1)
            ),
        template_predicate
         (template_app (template_hole 10, template_var 5)),
        template_predicate (template_app (template_hole 9, template_var 4)),
        template_predicate
         (template_app (template_hole 10, template_var 2)),
        template_predicate (template_app (template_hole 9, template_var 1)),
        template_predicate (template_app (template_hole 8, t_empty)),
        template_predicate (template_app (template_hole 2, t_empty))],
       template_predicate
        (
           template_app
            (template_app
              (template_app
                (template_app (template_hole 11, template_var 7),
                 template_var 6),
               template_app
                (template_app (template_hole 1, template_var 5),
                 template_var 2)),
             template_app
              (template_app (template_hole 0, template_var 4),
               template_var 1))
           ))),
    ("Set_Algebras.sum_set_cond_linear",
     "[| !!A B. [| ?P A; ?P B |] ==> ?P (A + B); ?P {0::?'a};
         !!A B. [| ?P A; ?P B |] ==> ?f (A + B) = ?f A + ?f B;
         ?f {0::?'a} = {0::?'b}; !!i. i : ?I ==> ?P (?S i) |]
      ==> ?f (sum ?S ?I) = sum (?f o ?S) ?I",
     template_implication
      ([template_predicate (template_app (template_hole 15, t_empty)),
        template_predicate
         (
            template_app
             (template_var 3,
              template_app
               (template_app (template_hole 12, template_hole 11),
                template_hole 10))
            ),
        template_predicate (template_app (template_hole 15, t_empty)),
        template_equation
         (template_app
           (template_var 2,
            template_app
             (template_app (template_hole 12, template_hole 11),
              template_hole 10)),
          template_app
           (template_app (template_hole 7, template_hole 6),
            template_hole 5)),
        template_predicate (template_app (template_hole 4, t_empty))],
       template_equation
        (template_app
          (template_var 2,
           template_app
            (template_app (template_hole 2, template_var 0),
             template_var 1)),
         template_app
          (template_app
            (template_hole 1,
             template_app
              (template_app (template_hole 0, template_var 2),
               template_var 0)),
           template_var 1))))]:
   (string * thm * template) list
### theory "Draft.AlgebraMoreTemplates"
### 0.869s elapsed time, 1.153s cpu time, 0.147s GC time
val it = (): unit
