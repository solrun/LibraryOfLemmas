Loading theory "HOL-Combinatorics.Transposition" (required by "Draft.LoopInductionMoreTemplates" via "Draft.LoopInduction" via "Draft.Healthiness" via "Draft.Embedding" via "Draft.Misc" via "HOL-Analysis.Multivariate_Analysis" via "HOL-Analysis.Ordered_Euclidean_Space" via "HOL-Analysis.Convex_Euclidean_Space" via "HOL-Analysis.Topology_Euclidean_Space" via "HOL-Analysis.Elementary_Normed_Spaces" via "HOL-Analysis.Cartesian_Space")
Loading theory "HOL-Library.FuncSet" (required by "Draft.LoopInductionMoreTemplates" via "Draft.LoopInduction" via "Draft.Healthiness" via "Draft.Embedding" via "Draft.Misc" via "HOL-Analysis.Multivariate_Analysis" via "HOL-Analysis.Ordered_Euclidean_Space" via "HOL-Analysis.Convex_Euclidean_Space" via "HOL-Analysis.Topology_Euclidean_Space" via "HOL-Analysis.Elementary_Normed_Spaces")
Loading theory "HOL-Library.Function_Algebras" (required by "Draft.LoopInductionMoreTemplates" via "Draft.ExtrEqs" via "HOL-Library.BigO")
Loading theory "HOL-Library.Cancellation" (required by "Draft.LoopInductionMoreTemplates" via "Draft.LoopInduction" via "Draft.Healthiness" via "Draft.Embedding" via "Draft.Misc" via "HOL-Analysis.Multivariate_Analysis" via "HOL-Analysis.Determinants" via "HOL-Combinatorics.Permutations" via "HOL-Library.Multiset")
instantiation
  fun :: (type, plus) plus
  plus_fun == plus :: ('a => 'b) => ('a => 'b) => 'a => 'b
instantiation
  fun :: (type, zero) zero
  zero_fun == zero_class.zero :: 'a => 'b
instantiation
  fun :: (type, times) times
  times_fun == times :: ('a => 'b) => ('a => 'b) => 'a => 'b
instantiation
  fun :: (type, one) one
  one_fun == one_class.one :: 'a => 'b
### theory "HOL-Library.Function_Algebras"
### 0.116s elapsed time, 0.487s cpu time, 0.034s GC time
Loading theory "HOL-Library.Infinite_Set" (required by "Draft.LoopInductionMoreTemplates" via "Draft.LoopInduction" via "Draft.Healthiness" via "Draft.Embedding" via "Draft.Misc" via "HOL-Analysis.Multivariate_Analysis" via "HOL-Analysis.Ordered_Euclidean_Space" via "HOL-Analysis.Convex_Euclidean_Space" via "HOL-Analysis.Convex" via "HOL-Analysis.Affine" via "HOL-Analysis.Linear_Algebra")
### theory "HOL-Combinatorics.Transposition"
### 0.167s elapsed time, 0.688s cpu time, 0.034s GC time
Loading theory "HOL-Library.Nat_Bijection" (required by "Draft.LoopInductionMoreTemplates" via "Draft.ExtrEqs" via "HOL-Library.Stream")
Found termination order: "(%p. size (snd p)) <*mlex*> {}"
consts
  enumerate :: "'a set => nat => 'a"
signature CANCEL = sig val proc: Proof.context -> cterm -> thm option end
functor Cancel_Fun (Data: CANCEL_NUMERALS_DATA): CANCEL
Found termination order: "size_list size <*mlex*> {}"
signature CANCEL_DATA =
  sig
    val dest_coeff: term -> int * term
    val dest_sum: term -> term list
    val find_first_coeff: term -> term list -> int * term list
    val mk_coeff: int * term -> term
    val mk_sum: typ -> term list -> term
    val norm_ss1: simpset
    val norm_ss2: simpset
    val norm_tac: Proof.context -> tactic
    val numeral_simp_tac: Proof.context -> tactic
    val prove_conv:
       tactic list -> Proof.context -> thm list -> term * term -> thm option
    val simplify_meta_eq: Proof.context -> thm -> thm
    val trans_tac: Proof.context -> thm option -> tactic
  end
structure Cancel_Data: CANCEL_DATA
### theory "HOL-Library.Infinite_Set"
### 0.264s elapsed time, 1.041s cpu time, 0.064s GC time
Loading theory "HOL-Library.Old_Datatype" (required by "Draft.LoopInductionMoreTemplates" via "Draft.LoopInduction" via "Draft.Healthiness" via "Draft.Embedding" via "Draft.Misc" via "HOL-Analysis.Multivariate_Analysis" via "HOL-Analysis.Ordered_Euclidean_Space" via "HOL-Analysis.Convex_Euclidean_Space" via "HOL-Analysis.Topology_Euclidean_Space" via "HOL-Analysis.Elementary_Normed_Spaces" via "HOL-Analysis.Elementary_Metric_Spaces" via "HOL-Analysis.Abstract_Topology_2" via "HOL-Analysis.Elementary_Topology" via "HOL-Library.Set_Idioms" via "HOL-Library.Countable_Set" via "HOL-Library.Countable")
### theory "HOL-Library.FuncSet"
### 0.415s elapsed time, 1.648s cpu time, 0.173s GC time
Loading theory "HOL-Library.Disjoint_Sets" (required by "Draft.LoopInductionMoreTemplates" via "Draft.LoopInduction" via "Draft.Healthiness" via "Draft.Embedding" via "Draft.Misc" via "HOL-Analysis.Multivariate_Analysis" via "HOL-Analysis.Ordered_Euclidean_Space" via "HOL-Analysis.Convex_Euclidean_Space" via "HOL-Analysis.Topology_Euclidean_Space" via "HOL-Analysis.Elementary_Normed_Spaces" via "HOL-Analysis.Elementary_Metric_Spaces" via "HOL-Analysis.Abstract_Topology_2" via "HOL-Analysis.Elementary_Topology")
signature CANCEL_SIMPROCS =
  sig
    val diff_cancel: Proof.context -> cterm -> thm option
    val eq_cancel: Proof.context -> cterm -> thm option
    val less_cancel: Proof.context -> cterm -> thm option
    val less_eq_cancel: Proof.context -> cterm -> thm option
  end
structure Cancel_Simprocs: CANCEL_SIMPROCS
### theory "HOL-Library.Cancellation"
### 0.476s elapsed time, 1.907s cpu time, 0.173s GC time
Loading theory "HOL-Library.Multiset" (required by "Draft.LoopInductionMoreTemplates" via "Draft.LoopInduction" via "Draft.Healthiness" via "Draft.Embedding" via "Draft.Misc" via "HOL-Analysis.Multivariate_Analysis" via "HOL-Analysis.Determinants" via "HOL-Combinatorics.Permutations")
### theory "HOL-Library.Nat_Bijection"
### 0.323s elapsed time, 1.269s cpu time, 0.139s GC time
Loading theory "HOL-Library.Stream" (required by "Draft.LoopInductionMoreTemplates" via "Draft.ExtrEqs")
locale comm_monoid_set
  fixes f :: "'a => 'a => 'a"  (infixl \<open>\<^bold>*\<close> 70)
    and z :: "'a"  (\<open>\<^bold>1\<close>)
  assumes "comm_monoid_set (\<^bold>*) \<^bold>1"
instantiation
  multiset :: (type) cancel_comm_monoid_add
  zero_multiset == zero_class.zero :: 'a multiset
  minus_multiset == minus :: 'a multiset => 'a multiset => 'a multiset
  plus_multiset == plus :: 'a multiset => 'a multiset => 'a multiset
### theory "HOL-Library.Disjoint_Sets"
### 0.285s elapsed time, 1.127s cpu time, 0.113s GC time
Loading theory "HOL-Library.Phantom_Type" (required by "Draft.LoopInductionMoreTemplates" via "Draft.LoopInduction" via "Draft.Healthiness" via "Draft.Embedding" via "Draft.Misc" via "HOL-Analysis.Multivariate_Analysis" via "HOL-Analysis.Ordered_Euclidean_Space" via "HOL-Analysis.Convex_Euclidean_Space" via "HOL-Analysis.Topology_Euclidean_Space" via "HOL-Analysis.Elementary_Normed_Spaces" via "HOL-Analysis.Cartesian_Space" via "HOL-Analysis.Finite_Cartesian_Product" via "HOL-Library.Numeral_Type" via "HOL-Library.Cardinality")
signature OLD_DATATYPE =
  sig
    val check_specs: spec list -> theory -> spec list * Proof.context
    type config = {quiet: bool, strict: bool}
    val default_config: config
    type descr =
       (int * (string * dtyp list * (string * dtyp list) list)) list
    val distinct_lemma: thm
    datatype dtyp
    = DtRec of int | DtTFree of string * sort | DtType of string * dtyp list
    type info =
       {case_cong: thm,
        case_cong_weak: thm,
        case_name: string,
        case_rewrites: thm list,
        descr: descr,
        distinct: thm list,
        exhaust: thm,
        index: int,
        induct: thm,
        inducts: thm list,
        inject: thm list,
        nchotomy: thm,
        rec_names: string list,
        rec_rewrites: thm list, split: thm, split_asm: thm}
    val read_specs: spec_cmd list -> theory -> spec list * Proof.context
    type spec =
       (binding * (string * sort) list * mixfix) *
       (binding * typ list * mixfix) list
    type spec_cmd =
       (binding * (string * string option) list * mixfix) *
       (binding * string list * mixfix) list
  end
structure Old_Datatype: OLD_DATATYPE
### theory "HOL-Library.Old_Datatype"
### 0.461s elapsed time, 1.806s cpu time, 0.274s GC time
Loading theory "HOL-Library.Product_Plus" (required by "Draft.LoopInductionMoreTemplates" via "Draft.LoopInduction" via "Draft.Healthiness" via "Draft.Embedding" via "Draft.Misc" via "HOL-Analysis.Multivariate_Analysis" via "HOL-Analysis.Ordered_Euclidean_Space" via "HOL-Analysis.Convex_Euclidean_Space" via "HOL-Analysis.Convex" via "HOL-Analysis.Affine" via "HOL-Analysis.Linear_Algebra" via "HOL-Analysis.Euclidean_Space" via "HOL-Analysis.Product_Vector")
instantiation
  prod :: (zero, zero) zero
  zero_prod == zero_class.zero :: 'a * 'b
instantiation
  prod :: (plus, plus) plus
  plus_prod == plus :: 'a * 'b => 'a * 'b => 'a * 'b
instantiation
  prod :: (minus, minus) minus
  minus_prod == minus :: 'a * 'b => 'a * 'b => 'a * 'b
instantiation
  prod :: (uminus, uminus) uminus
  uminus_prod == uminus :: 'a * 'b => 'a * 'b
### theory "HOL-Library.Product_Plus"
### 0.280s elapsed time, 0.953s cpu time, 0.537s GC time
Loading theory "HOL-Library.Product_Order" (required by "Draft.LoopInductionMoreTemplates" via "Draft.LoopInduction" via "Draft.Healthiness" via "Draft.Embedding" via "Draft.Misc" via "HOL-Analysis.Multivariate_Analysis" via "HOL-Analysis.Ordered_Euclidean_Space")
consts
  shift :: "'a list => 'a stream => 'a stream"
instantiation
  prod :: (ord, ord) ord
  less_eq_prod == less_eq :: 'a * 'b => 'a * 'b => bool
  less_prod == less :: 'a * 'b => 'a * 'b => bool
Proofs for coinductive predicate(s) "streamsp"
  Proving monotonicity ...
instantiation
  prod :: (inf, inf) inf
  inf_prod == inf :: 'a * 'b => 'a * 'b => 'a * 'b
instantiation
  prod :: (sup, sup) sup
  sup_prod == sup :: 'a * 'b => 'a * 'b => 'a * 'b
instantiation
  prod :: (top, top) top
  top_prod == top :: 'a * 'b
instantiation
  prod :: (bot, bot) bot
  bot_prod == bot :: 'a * 'b
consts
  snth :: "'a stream => nat => 'a"
instantiation
  prod :: (Inf, Inf) Inf
  Inf_prod == Inf :: ('a * 'b) set => 'a * 'b
instantiation
  prod :: (Sup, Sup) Sup
  Sup_prod == Sup :: ('a * 'b) set => 'a * 'b
consts
  stake :: "nat => 'a stream => 'a list"
consts
  sdrop :: "nat => 'a stream => 'a stream"
### theory "HOL-Library.Product_Order"
### 0.241s elapsed time, 0.943s cpu time, 0.146s GC time
Loading theory "HOL-Library.Set_Algebras" (required by "Draft.LoopInductionMoreTemplates" via "Draft.ExtrEqs" via "HOL-Library.BigO")
consts
  sfilter :: "('a => bool) => 'a stream => 'a stream"
instantiation
  set :: (plus) plus
  plus_set == plus :: 'a set => 'a set => 'a set
instantiation
  set :: (times) times
  times_set == times :: 'a set => 'a set => 'a set
consts
  cycle :: "'a list => 'a stream"
instantiation
  set :: (zero) zero
  zero_set == zero_class.zero :: 'a set
instantiation
  set :: (one) one
  one_set == one_class.one :: 'a set
### Partially applied constant "Multiset.inter_mset" on left hand side of equation, in theorem:
### semilattice_inf.Inf_fin (\<inter>#) (set (?x # ?xs)) ==
### fold (\<inter>#) ?xs ?x
consts
  siterate :: "('a => 'a) => 'a => 'a stream"
consts
  flat :: "'a list stream => 'a stream"
### theory "HOL-Library.Phantom_Type"
### 0.812s elapsed time, 3.037s cpu time, 0.841s GC time
Loading theory "HOL-Library.Cardinality" (required by "Draft.LoopInductionMoreTemplates" via "Draft.LoopInduction" via "Draft.Healthiness" via "Draft.Embedding" via "Draft.Misc" via "HOL-Analysis.Multivariate_Analysis" via "HOL-Analysis.Ordered_Euclidean_Space" via "HOL-Analysis.Convex_Euclidean_Space" via "HOL-Analysis.Topology_Euclidean_Space" via "HOL-Analysis.Elementary_Normed_Spaces" via "HOL-Analysis.Cartesian_Space" via "HOL-Analysis.Finite_Cartesian_Product" via "HOL-Library.Numeral_Type")
### Partially applied constant "Multiset.union_mset" on left hand side of equation, in theorem:
### semilattice_sup.Sup_fin (\<union>#) (set (?x # ?xs)) ==
### fold (\<union>#) ?xs ?x
consts
  sinterleave :: "'a stream => 'a stream => 'a stream"
### Additional type variable(s) in locale specification "CARD_1": 'a
consts
  szip :: "'a stream => 'b stream => ('a * 'b) stream"
### theory "HOL-Library.Set_Algebras"
### 0.234s elapsed time, 0.925s cpu time, 0.072s GC time
Loading theory "HOL-Library.Tree" (required by "Draft.LoopInductionMoreTemplates" via "Draft.ExtrEqs" via "Draft.Templates")
class CARD_1 = type +
  assumes "CARD_1": "CARD('a) = 1"
consts
  smap2 :: "('a => 'b => 'c) => 'a stream => 'b stream => 'c stream"
### theory "HOL-Library.Stream"
### 1.197s elapsed time, 4.544s cpu time, 1.064s GC time
Loading theory "HOL-Library.Countable" (required by "Draft.LoopInductionMoreTemplates" via "Draft.LoopInduction" via "Draft.Healthiness" via "Draft.Embedding" via "Draft.Misc" via "HOL-Analysis.Multivariate_Analysis" via "HOL-Analysis.Ordered_Euclidean_Space" via "HOL-Analysis.Convex_Euclidean_Space" via "HOL-Analysis.Topology_Euclidean_Space" via "HOL-Analysis.Elementary_Normed_Spaces" via "HOL-Analysis.Elementary_Metric_Spaces" via "HOL-Analysis.Abstract_Topology_2" via "HOL-Analysis.Elementary_Topology" via "HOL-Library.Set_Idioms" via "HOL-Library.Countable_Set")
signature MULTISET_SIMPROCS =
  sig
    val subset_cancel_msets: Proof.context -> cterm -> thm option
    val subseteq_cancel_msets: Proof.context -> cterm -> thm option
  end
structure Multiset_Simprocs: MULTISET_SIMPROCS
### Additional type variable(s) in locale specification "card2": 'a
instantiation
  multiset :: (type) Inf
  Inf_multiset == Inf :: 'a multiset set => 'a multiset
class card2 = finite +
  assumes "two_le_card": "2 <= CARD('a)"
instantiation
  multiset :: (type) Sup
  Sup_multiset == Sup :: 'a multiset set => 'a multiset
class finite_UNIV = type +
  fixes finite_UNIV :: "('a, bool) phantom"
  assumes "finite_UNIV": "finite_UNIV = Phantom('a) (finite UNIV)"
class card_UNIV = finite_UNIV +
  fixes card_UNIV :: "('a, nat) phantom"
  assumes "card_UNIV": "card_UNIV_class.card_UNIV = Phantom('a) CARD('a)"
instantiation
  nat :: card_UNIV
  card_UNIV_nat == card_UNIV_class.card_UNIV :: (nat, nat) phantom
  finite_UNIV_nat == finite_UNIV :: (nat, bool) phantom
instantiation
  int :: card_UNIV
  card_UNIV_int == card_UNIV_class.card_UNIV :: (int, nat) phantom
  finite_UNIV_int == finite_UNIV :: (int, bool) phantom
instantiation
  natural :: card_UNIV
  card_UNIV_natural == card_UNIV_class.card_UNIV :: (natural, nat) phantom
  finite_UNIV_natural == finite_UNIV :: (natural, bool) phantom
instantiation
  integer :: card_UNIV
  card_UNIV_integer == card_UNIV_class.card_UNIV :: (integer, nat) phantom
  finite_UNIV_integer == finite_UNIV :: (integer, bool) phantom
instantiation
  list :: (type) card_UNIV
  card_UNIV_list == card_UNIV_class.card_UNIV :: ('a list, nat) phantom
  finite_UNIV_list == finite_UNIV :: ('a list, bool) phantom
instantiation
  multiset :: (type) size
  size_multiset == size :: 'a multiset => nat
instantiation
  unit :: card_UNIV
  card_UNIV_unit == card_UNIV_class.card_UNIV :: (unit, nat) phantom
  finite_UNIV_unit == finite_UNIV :: (unit, bool) phantom
instantiation
  bool :: card_UNIV
  card_UNIV_bool == card_UNIV_class.card_UNIV :: (bool, nat) phantom
  finite_UNIV_bool == finite_UNIV :: (bool, bool) phantom
instantiation
  char :: card_UNIV
  card_UNIV_char == card_UNIV_class.card_UNIV :: (char, nat) phantom
  finite_UNIV_char == finite_UNIV :: (char, bool) phantom
instantiation
  prod :: (finite_UNIV, finite_UNIV) finite_UNIV
  finite_UNIV_prod == finite_UNIV :: ('a * 'b, bool) phantom
instantiation
  prod :: (card_UNIV, card_UNIV) card_UNIV
  card_UNIV_prod == card_UNIV_class.card_UNIV :: ('a * 'b, nat) phantom
instantiation
  sum :: (finite_UNIV, finite_UNIV) finite_UNIV
  finite_UNIV_sum == finite_UNIV :: ('a + 'b, bool) phantom
instantiation
  sum :: (card_UNIV, card_UNIV) card_UNIV
  card_UNIV_sum == card_UNIV_class.card_UNIV :: ('a + 'b, nat) phantom
instantiation
  fun :: (finite_UNIV, card_UNIV) finite_UNIV
  finite_UNIV_fun == finite_UNIV :: ('a => 'b, bool) phantom
locale comp_fun_commute
  fixes f :: "'a => 'b => 'b"
  assumes "comp_fun_commute f"
### Additional type variable(s) in locale specification "countable": 'a
instantiation
  fun :: (card_UNIV, card_UNIV) card_UNIV
  card_UNIV_fun == card_UNIV_class.card_UNIV :: ('a => 'b, nat) phantom
instantiation
  option :: (finite_UNIV) finite_UNIV
  finite_UNIV_option == finite_UNIV :: ('a option, bool) phantom
instantiation
  option :: (card_UNIV) card_UNIV
  card_UNIV_option == card_UNIV_class.card_UNIV :: ('a option, nat) phantom
instantiation
  String.literal :: card_UNIV
  card_UNIV_literal == card_UNIV_class.card_UNIV ::
    (String.literal, nat) phantom
  finite_UNIV_literal == finite_UNIV :: (String.literal, bool) phantom
class countable = type +
  assumes "ex_inj": "EX to_nat. inj to_nat"
instantiation
  set :: (finite_UNIV) finite_UNIV
  finite_UNIV_set == finite_UNIV :: ('a set, bool) phantom
instantiation
  set :: (card_UNIV) card_UNIV
  card_UNIV_set == card_UNIV_class.card_UNIV :: ('a set, nat) phantom
instantiation
  Enum.finite_1 :: card_UNIV
  card_UNIV_finite_1 == card_UNIV_class.card_UNIV ::
    (Enum.finite_1, nat) phantom
  finite_UNIV_finite_1 == finite_UNIV :: (Enum.finite_1, bool) phantom
instantiation
  Enum.finite_2 :: card_UNIV
  card_UNIV_finite_2 == card_UNIV_class.card_UNIV ::
    (Enum.finite_2, nat) phantom
  finite_UNIV_finite_2 == finite_UNIV :: (Enum.finite_2, bool) phantom
consts
  mset :: "'a list => 'a multiset"
consts
  left :: "'a tree => 'a tree"
instantiation
  Enum.finite_3 :: card_UNIV
  card_UNIV_finite_3 == card_UNIV_class.card_UNIV ::
    (Enum.finite_3, nat) phantom
  finite_UNIV_finite_3 == finite_UNIV :: (Enum.finite_3, bool) phantom
consts
  right :: "'a tree => 'a tree"
instantiation
  Enum.finite_4 :: card_UNIV
  card_UNIV_finite_4 == card_UNIV_class.card_UNIV ::
    (Enum.finite_4, nat) phantom
  finite_UNIV_finite_4 == finite_UNIV :: (Enum.finite_4, bool) phantom
instantiation
  Enum.finite_5 :: card_UNIV
  card_UNIV_finite_5 == card_UNIV_class.card_UNIV ::
    (Enum.finite_5, nat) phantom
  finite_UNIV_finite_5 == finite_UNIV :: (Enum.finite_5, bool) phantom
### theory "HOL-Library.Cardinality"
### 0.781s elapsed time, 3.073s cpu time, 0.372s GC time
Loading theory "HOL-Library.Numeral_Type" (required by "Draft.LoopInductionMoreTemplates" via "Draft.LoopInduction" via "Draft.Healthiness" via "Draft.Embedding" via "Draft.Misc" via "HOL-Analysis.Multivariate_Analysis" via "HOL-Analysis.Ordered_Euclidean_Space" via "HOL-Analysis.Convex_Euclidean_Space" via "HOL-Analysis.Topology_Euclidean_Space" via "HOL-Analysis.Elementary_Normed_Spaces" via "HOL-Analysis.Cartesian_Space" via "HOL-Analysis.Finite_Cartesian_Product")
Found termination order: "size <*mlex*> {}"
Found termination order: "size <*mlex*> {}"
Proofs for inductive predicate(s) "finite_item"
  Proving monotonicity ...
class linorder = order +
  assumes "linear": "!!x y. x <= y | y <= x"
instantiation
  num1 :: CARD_1
Found termination order: "size <*mlex*> {}"
instantiation
  num1 :: {comm_monoid_mult,numeral,comm_ring}
  uminus_num1 == uminus :: num1 => num1
  zero_num1 == zero_class.zero :: num1
  minus_num1 == minus :: num1 => num1 => num1
  plus_num1 == plus :: num1 => num1 => num1
  one_num1 == one_class.one :: num1
  times_num1 == times :: num1 => num1 => num1
instantiation
  num1 :: linorder
  less_eq_num1 == less_eq :: num1 => num1 => bool
  less_num1 == less :: num1 => num1 => bool
class height = type +
  fixes height :: "'a => nat"
instantiation
  tree :: (type) height
  height_tree == height :: 'a tree => nat
locale mod_type
  fixes n :: "int"
    and Rep :: "'a => int"
    and Abs :: "int => 'a"
  assumes "mod_type n Rep Abs"
locale mod_ring
  fixes n :: "int"
    and Rep :: "'a => int"
    and Abs :: "int => 'a"
  assumes "mod_ring n Rep Abs"
locale comm_monoid_mset
  fixes f :: "'a => 'a => 'a"  (infixl \<open>\<^bold>*\<close> 70)
    and z :: "'a"  (\<open>\<^bold>1\<close>)
  assumes "comm_monoid_mset (\<^bold>*) \<^bold>1"
instantiation
  bit0 :: (finite) {minus,one,plus,times,uminus,zero}
  bit1 :: (finite) {minus,one,plus,times,uminus,zero}
  zero_bit0 == zero_class.zero :: 'a bit0
  uminus_bit0 == uminus :: 'a bit0 => 'a bit0
  times_bit0 == times :: 'a bit0 => 'a bit0 => 'a bit0
  plus_bit0 == plus :: 'a bit0 => 'a bit0 => 'a bit0
  one_bit0 == one_class.one :: 'a bit0
  minus_bit0 == minus :: 'a bit0 => 'a bit0 => 'a bit0
  zero_bit1 == zero_class.zero :: 'a bit1
  uminus_bit1 == uminus :: 'a bit1 => 'a bit1
  times_bit1 == times :: 'a bit1 => 'a bit1 => 'a bit1
  plus_bit1 == plus :: 'a bit1 => 'a bit1 => 'a bit1
  one_bit1 == one_class.one :: 'a bit1
  minus_bit1 == minus :: 'a bit1 => 'a bit1 => 'a bit1
val old_countable_datatype_tac = fn: Proof.context -> int -> tactic
Found termination order: "size <*mlex*> {}"
### ML warning (line 93 of "~~/src/HOL/Tools/BNF/bnf_lfp_countable.ML"):
### Pattern is not exhaustive.
### ML warning (line 139 of "~~/src/HOL/Tools/BNF/bnf_lfp_countable.ML"):
### Pattern is not exhaustive.
### ML warning (line 143 of "~~/src/HOL/Tools/BNF/bnf_lfp_countable.ML"):
### Matches are not exhaustive.
### ML warning (line 145 of "~~/src/HOL/Tools/BNF/bnf_lfp_countable.ML"):
### Matches are not exhaustive.
### ML warning (line 156 of "~~/src/HOL/Tools/BNF/bnf_lfp_countable.ML"):
### Pattern is not exhaustive.
signature BNF_LFP_COUNTABLE =
  sig
    val countable_datatype_tac: Proof.context -> tactic
    val derive_encode_injectives_thms:
       Proof.context -> string list -> thm list
  end
structure BNF_LFP_Countable: BNF_LFP_COUNTABLE
val countable_datatype_tac = fn: Proof.context -> thm -> thm Seq.seq
val countable_tac = fn: Proof.context -> int -> tactic
class comm_monoid_add = ab_semigroup_add + monoid_add +
  assumes "add_0": "!!a. (0::'a) + a = a"
Found termination order: "size <*mlex*> {}"
class comm_monoid_add = ab_semigroup_add + monoid_add +
  assumes "add_0": "!!a. (0::'a) + a = a"
instantiation
  bit0 :: (finite) linorder
  bit1 :: (finite) linorder
  less_eq_bit0 == less_eq :: 'a bit0 => 'a bit0 => bool
  less_bit0 == less :: 'a bit0 => 'a bit0 => bool
  less_eq_bit1 == less_eq :: 'a bit1 => 'a bit1 => bool
  less_bit1 == less :: 'a bit1 => 'a bit1 => bool
Found termination order: "size <*mlex*> {}"
class canonically_ordered_monoid_add = ordered_comm_monoid_add +
  assumes "le_iff_add": "!!a b. (a <= b) = (EX c. b = a + c)"
instantiation
  num0 :: equal
  equal_num0 == equal_class.equal :: num0 => num0 => bool
Found termination order: "size <*mlex*> {}"
instantiation
  num1 :: equal
  equal_num1 == equal_class.equal :: num1 => num1 => bool
instantiation
  num1 :: enum
  enum_num1 == enum_class.enum :: num1 list
  enum_all_num1 == enum_class.enum_all :: (num1 => bool) => bool
  enum_ex_num1 == enum_class.enum_ex :: (num1 => bool) => bool
instantiation
  num0 :: card_UNIV
  num1 :: card_UNIV
  card_UNIV_num0 == card_UNIV_class.card_UNIV :: (num0, nat) phantom
  finite_UNIV_num0 == finite_UNIV :: (num0, bool) phantom
  card_UNIV_num1 == card_UNIV_class.card_UNIV :: (num1, nat) phantom
  finite_UNIV_num1 == finite_UNIV :: (num1, bool) phantom
Found termination order: "size <*mlex*> {}"
### theory "HOL-Library.Countable"
### 1.247s elapsed time, 4.898s cpu time, 0.556s GC time
Loading theory "HOL-Library.Countable_Set" (required by "Draft.LoopInductionMoreTemplates" via "Draft.LoopInduction" via "Draft.Healthiness" via "Draft.Embedding" via "Draft.Misc" via "HOL-Analysis.Multivariate_Analysis" via "HOL-Analysis.Ordered_Euclidean_Space" via "HOL-Analysis.Convex_Euclidean_Space" via "HOL-Analysis.Topology_Euclidean_Space" via "HOL-Analysis.Elementary_Normed_Spaces" via "HOL-Analysis.Elementary_Metric_Spaces" via "HOL-Analysis.Abstract_Topology_2" via "HOL-Analysis.Elementary_Topology" via "HOL-Library.Set_Idioms")
instantiation
  bit0 :: (finite) equal
  bit1 :: (finite) equal
  equal_bit0 == equal_class.equal :: 'a bit0 => 'a bit0 => bool
  equal_bit1 == equal_class.equal :: 'a bit1 => 'a bit1 => bool
instantiation
  bit0 :: (finite) enum
  enum_bit0 == enum_class.enum :: 'a bit0 list
  enum_all_bit0 == enum_class.enum_all :: ('a bit0 => bool) => bool
  enum_ex_bit0 == enum_class.enum_ex :: ('a bit0 => bool) => bool
Found termination order: "size <*mlex*> {}"
instantiation
  bit1 :: (finite) enum
  enum_bit1 == enum_class.enum :: 'a bit1 list
  enum_all_bit1 == enum_class.enum_all :: ('a bit1 => bool) => bool
  enum_ex_bit1 == enum_class.enum_ex :: ('a bit1 => bool) => bool
instantiation
  bit0 :: (finite) finite_UNIV
  bit1 :: (finite) finite_UNIV
  finite_UNIV_bit0 == finite_UNIV :: ('a bit0, bool) phantom
  finite_UNIV_bit1 == finite_UNIV :: ('a bit1, bool) phantom
Found termination order: "size <*mlex*> {}"
instantiation
  bit0 :: ({card_UNIV,finite}) card_UNIV
  bit1 :: ({card_UNIV,finite}) card_UNIV
  card_UNIV_bit0 == card_UNIV_class.card_UNIV :: ('a bit0, nat) phantom
  card_UNIV_bit1 == card_UNIV_class.card_UNIV :: ('a bit1, nat) phantom
class comm_monoid_mult = ab_semigroup_mult + monoid_mult + dvd +
  assumes "mult_1": "!!a. (1::'a) * a = a"
### theory "HOL-Library.Numeral_Type"
### 0.788s elapsed time, 3.094s cpu time, 0.353s GC time
Loading theory "HOL-Analysis.Metric_Arith" (required by "Draft.LoopInductionMoreTemplates" via "Draft.LoopInduction" via "Draft.Healthiness" via "Draft.Embedding" via "Draft.Misc" via "HOL-Analysis.Multivariate_Analysis" via "HOL-Analysis.Ordered_Euclidean_Space" via "HOL-Analysis.Convex_Euclidean_Space" via "HOL-Analysis.Topology_Euclidean_Space" via "HOL-Analysis.Elementary_Normed_Spaces" via "HOL-Analysis.Elementary_Metric_Spaces")
Found termination order: "(%p. size (fst p)) <*mlex*> {}"
Found termination order: "size <*mlex*> {}"
locale comm_monoid_set
  fixes f :: "'a => 'a => 'a"  (infixl \<open>\<^bold>*\<close> 70)
    and z :: "'a"  (\<open>\<^bold>1\<close>)
  assumes "comm_monoid_set (\<^bold>*) \<^bold>1"
Found termination order: "(%p. size (snd p)) <*mlex*> {}"
### theory "HOL-Library.Countable_Set"
### 0.478s elapsed time, 1.874s cpu time, 0.178s GC time
Loading theory "HOL-Library.Countable_Complete_Lattices" (required by "Draft.LoopInductionMoreTemplates" via "Draft.LoopInduction" via "Draft.Healthiness" via "Draft.Embedding" via "Draft.Misc" via "HOL-Analysis.Multivariate_Analysis" via "HOL-Analysis.Cross3" via "HOL-Analysis.Cartesian_Euclidean_Space" via "HOL-Analysis.Derivative" via "HOL-Analysis.Bounded_Linear_Function" via "HOL-Analysis.Uniform_Limit" via "HOL-Analysis.Summation_Tests" via "HOL-Library.Extended_Real" via "HOL-Library.Extended_Nat" via "HOL-Library.Order_Continuity")
Found termination order: "size <*mlex*> {}"
class linorder = order +
  assumes "linear": "!!x y. x <= y | y <= x"
signature METRIC_ARITH =
  sig
    val argo_timeout: real Config.T
    val metric_arith_tac: Proof.context -> int -> tactic
    val trace: bool Config.T
  end
structure Metric_Arith: METRIC_ARITH
### theory "HOL-Analysis.Metric_Arith"
### 0.663s elapsed time, 2.605s cpu time, 0.252s GC time
Loading theory "HOL-Library.Set_Idioms" (required by "Draft.LoopInductionMoreTemplates" via "Draft.LoopInduction" via "Draft.Healthiness" via "Draft.Embedding" via "Draft.Misc" via "HOL-Analysis.Multivariate_Analysis" via "HOL-Analysis.Ordered_Euclidean_Space" via "HOL-Analysis.Convex_Euclidean_Space" via "HOL-Analysis.Topology_Euclidean_Space" via "HOL-Analysis.Elementary_Normed_Spaces" via "HOL-Analysis.Elementary_Metric_Spaces" via "HOL-Analysis.Abstract_Topology_2" via "HOL-Analysis.Elementary_Topology")
### theory "HOL-Library.Tree"
### 2.173s elapsed time, 8.515s cpu time, 1.022s GC time
Loading theory "Draft.Templates" (required by "Draft.LoopInductionMoreTemplates" via "Draft.ExtrEqs")
datatype template_term
=
     t_empty
   | template_app of template_term * template_term
   | template_hole of int
   | template_var of int
datatype sign
= equals | greater_equals | greater_than | less_equals | less_than
datatype template
=
     template_bimplication of template * template
   | template_dunno
   | template_equation of template_term * template_term
   | template_implication of template list * template
   | template_inequation of sign * template_term * template_term
   | template_negation of template
   | template_predicate of template_term
constructor t_empty: template_term
constructor template_app: template_term * template_term -> template_term
constructor template_hole: int -> template_term
constructor template_var: int -> template_term
constructor equals: sign
constructor greater_equals: sign
constructor greater_than: sign
constructor less_equals: sign
constructor less_than: sign
constructor template_bimplication: template * template -> template
constructor template_dunno: template
constructor template_equation: template_term * template_term -> template
constructor template_implication: template list * template -> template
constructor template_inequation:
   sign * template_term * template_term -> template
constructor template_negation: template -> template
constructor template_predicate: template_term -> template
val vfs = fn: term -> (indexname * typ) list * (string * typ) list
val indexOf = fn: ''a list -> ''a -> int -> int
val has_eq = fn: term -> bool
val term2template = fn:
   (indexname * typ) list -> (string * typ) list -> term -> template_term
val lemma2predicate = fn: term -> term -> template
val makeTemplatewithContext = fn: term -> term -> template
val lemma2template = fn: term -> template
val thm2template = fn: thm -> template
val tterm2string = fn: template_term -> string
val template2string = fn: template -> string
val t = "height ?t <= size ?t": thm
val th =
   Const ("HOL.Trueprop", "bool => prop") $
     (Const ("Orderings.ord_class.less_eq", "nat => nat => bool") $
       (Const ("Tree.height_class.height", "?'a tree => nat") $
         Var (("t", 0), "?'a tree")) $
       (Const ("Nat.size_class.size", "?'a tree => nat") $
         Var (("t", 0), "?'a tree"))):
   term
### theory "Draft.Templates"
### 0.067s elapsed time, 0.271s cpu time, 0.000s GC time
Loading theory "HOL-Analysis.Inner_Product" (required by "Draft.LoopInductionMoreTemplates" via "Draft.LoopInduction" via "Draft.Healthiness" via "Draft.Embedding" via "Draft.Misc" via "HOL-Analysis.Multivariate_Analysis" via "HOL-Analysis.Ordered_Euclidean_Space" via "HOL-Analysis.Convex_Euclidean_Space" via "HOL-Analysis.Convex" via "HOL-Analysis.Affine" via "HOL-Analysis.Linear_Algebra" via "HOL-Analysis.Euclidean_Space")
instantiation
  multiset :: (preorder) order
  less_eq_multiset == less_eq :: 'a multiset => 'a multiset => bool
  less_multiset == less :: 'a multiset => 'a multiset => bool
class countable_complete_lattice = Inf + Sup + lattice + bot + top +
  assumes "ccInf_lower": "!!A x. [| countable A; x : A |] ==> Inf A <= x"
  assumes
    "ccInf_greatest":
      "!!A z. [| countable A; !!x. x : A ==> z <= x |] ==> z <= Inf A"
  assumes "ccSup_upper": "!!A x. [| countable A; x : A |] ==> x <= Sup A"
  assumes
    "ccSup_least":
      "!!A z. [| countable A; !!x. x : A ==> x <= z |] ==> Sup A <= z"
  assumes "ccInf_empty": "Inf {} = top"
  assumes "ccSup_empty": "Sup {} = bot"
instantiation
  multiset :: (preorder) ordered_ab_semigroup_add
Proofs for inductive predicate(s) "pw_leq"
  Proving monotonicity ...
### theory "HOL-Library.Set_Idioms"
### 0.254s elapsed time, 0.997s cpu time, 0.117s GC time
Loading theory "HOL-Analysis.Abstract_Topology" (required by "Draft.LoopInductionMoreTemplates" via "Draft.LoopInduction" via "Draft.Healthiness" via "Draft.Embedding" via "Draft.Misc" via "HOL-Analysis.Multivariate_Analysis" via "HOL-Analysis.Ordered_Euclidean_Space" via "HOL-Analysis.Convex_Euclidean_Space" via "HOL-Analysis.Topology_Euclidean_Space" via "HOL-Analysis.Elementary_Normed_Spaces" via "HOL-Analysis.Elementary_Metric_Spaces" via "HOL-Analysis.Abstract_Topology_2")
Found termination order: "(%p. length (fst p)) <*mlex*> {}"
instantiation
  multiset :: (equal) equal
  equal_multiset == equal_class.equal :: 'a multiset => 'a multiset => bool
instantiation
  multiset :: (random) random
  random_multiset == random_class.random ::
    natural
    => natural * natural
       => ('a multiset * (unit => term)) * natural * natural
instantiation
  multiset :: (full_exhaustive) full_exhaustive
  full_exhaustive_multiset == full_exhaustive_class.full_exhaustive ::
    ('a multiset * (unit => term) => (bool * term list) option)
    => natural => (bool * term list) option
Proofs for inductive predicate(s) "pred_mset"
  Proving monotonicity ...
Proofs for inductive predicate(s) "rel_mset'"
  Proving monotonicity ...
class real_inner = dist_norm + real_vector + sgn_div_norm +
  uniformity_dist + open_uniformity +
  fixes inner :: "'a => 'a => real"
  assumes "inner_commute": "!!x y. inner x y = inner y x"
    and "inner_add_left": "!!x y z. inner (x + y) z = inner x z + inner y z"
    and
    "inner_scaleR_left": "!!r x y. inner (r *\<^sub>R x) y = r * inner x y"
    and "inner_ge_zero": "!!x. 0 <= inner x x"
    and "inner_eq_zero_iff": "!!x. (inner x x = 0) = (x = (0::'a))"
    and "norm_eq_sqrt_inner": "!!x. norm x = sqrt (inner x x)"
### theory "HOL-Library.Multiset"
### 4.389s elapsed time, 16.916s cpu time, 3.413s GC time
Loading theory "HOL-Combinatorics.Permutations" (required by "Draft.LoopInductionMoreTemplates" via "Draft.LoopInduction" via "Draft.Healthiness" via "Draft.Embedding" via "Draft.Misc" via "HOL-Analysis.Multivariate_Analysis" via "HOL-Analysis.Determinants")
instantiation
  real :: real_inner
  inner_real == inner :: real => real => real
instantiation
  complex :: real_inner
  inner_complex == inner :: complex => complex => real
bundle inner_syntax
bundle no_inner_syntax
### theory "HOL-Analysis.Inner_Product"
### 1.446s elapsed time, 5.651s cpu time, 1.594s GC time
Loading theory "HOL-Analysis.L2_Norm" (required by "Draft.LoopInductionMoreTemplates" via "Draft.LoopInduction" via "Draft.Healthiness" via "Draft.Embedding" via "Draft.Misc" via "HOL-Analysis.Multivariate_Analysis" via "HOL-Analysis.Ordered_Euclidean_Space" via "HOL-Analysis.Convex_Euclidean_Space" via "HOL-Analysis.Convex" via "HOL-Analysis.Affine" via "HOL-Analysis.Linear_Algebra" via "HOL-Analysis.Euclidean_Space")
class countable_complete_distrib_lattice = countable_complete_lattice +
  assumes
    "sup_ccInf": "!!B a. countable B ==> sup a (Inf B) = Inf (sup a ` B)"
  assumes
    "inf_ccSup": "!!B a. countable B ==> inf a (Sup B) = Sup (inf a ` B)"
Proofs for inductive predicate(s) "swapidseq"
### theory "HOL-Analysis.L2_Norm"
### 0.105s elapsed time, 0.408s cpu time, 0.057s GC time
Loading theory "HOL-Analysis.Operator_Norm" (required by "Draft.LoopInductionMoreTemplates" via "Draft.LoopInduction" via "Draft.Healthiness" via "Draft.Embedding" via "Draft.Misc" via "HOL-Analysis.Multivariate_Analysis" via "HOL-Analysis.Cross3" via "HOL-Analysis.Cartesian_Euclidean_Space" via "HOL-Analysis.Derivative" via "HOL-Analysis.Bounded_Linear_Function")
  Proving monotonicity ...
### theory "HOL-Analysis.Operator_Norm"
### 0.117s elapsed time, 0.458s cpu time, 0.070s GC time
Loading theory "HOL-Analysis.Product_Vector" (required by "Draft.LoopInductionMoreTemplates" via "Draft.LoopInduction" via "Draft.Healthiness" via "Draft.Embedding" via "Draft.Misc" via "HOL-Analysis.Multivariate_Analysis" via "HOL-Analysis.Ordered_Euclidean_Space" via "HOL-Analysis.Convex_Euclidean_Space" via "HOL-Analysis.Convex" via "HOL-Analysis.Affine" via "HOL-Analysis.Linear_Algebra" via "HOL-Analysis.Euclidean_Space")
locale comm_monoid_set
  fixes f :: "'a => 'a => 'a"  (infixl \<open>\<^bold>*\<close> 70)
    and z :: "'a"  (\<open>\<^bold>1\<close>)
  assumes "comm_monoid_set (\<^bold>*) \<^bold>1"
Found termination order: "(%p. size_list size (fst p)) <*mlex*> {}"
locale module_prod
  fixes s1 :: "'a => 'b => 'b"
    and s2 :: "'a => 'c => 'c"
  assumes "module_prod s1 s2"
### theory "HOL-Combinatorics.Permutations"
### 1.001s elapsed time, 4.020s cpu time, 0.528s GC time
Loading theory "HOL-Library.BigO" (required by "Draft.LoopInductionMoreTemplates" via "Draft.ExtrEqs")
locale vector_space_prod
  fixes s1 :: "'a => 'b => 'b"  (infixr \<open>*a\<close> 75)
    and s2 :: "'a => 'c => 'c"  (infixr \<open>*b\<close> 75)
  assumes "vector_space_prod (*a) (*b)"
### Cannot skip proof of schematic goal statement
instantiation
  prod :: (real_vector, real_vector) real_vector
  scaleR_prod == scaleR :: real => 'a * 'b => 'a * 'b
### Cannot skip proof of schematic goal statement
instantiation
  prod :: (metric_space, metric_space) dist
  dist_prod == dist :: 'a * 'b => 'a * 'b => real
instantiation
  prod :: (uniformity, uniformity) uniformity
  uniformity_prod == uniformity :: (('a * 'b) * 'a * 'b) filter
instantiation
  prod :: (uniform_space, uniform_space) uniform_space
instantiation
  prod :: (metric_space, metric_space) uniformity_dist
instantiation
  prod :: (metric_space, metric_space) metric_space
### theory "HOL-Library.Countable_Complete_Lattices"
### 2.740s elapsed time, 10.685s cpu time, 2.243s GC time
Loading theory "HOL-Library.Discrete" (required by "Draft.LoopInductionMoreTemplates" via "Draft.LoopInduction" via "Draft.Healthiness" via "Draft.Embedding" via "Draft.Misc" via "HOL-Analysis.Multivariate_Analysis" via "HOL-Analysis.Cross3" via "HOL-Analysis.Cartesian_Euclidean_Space" via "HOL-Analysis.Derivative" via "HOL-Analysis.Bounded_Linear_Function" via "HOL-Analysis.Uniform_Limit" via "HOL-Analysis.Summation_Tests")
instantiation
  prod :: (real_normed_vector, real_normed_vector) real_normed_vector
  sgn_prod == sgn :: 'a * 'b => 'a * 'b
  norm_prod == norm :: 'a * 'b => real
### Rewrite rule not in simpset:
### Wellfounded.accp log_rel ?n1 ==>
### log ?n1 == if ?n1 < 2 then 0 else Suc (log (?n1 div 2))
Found termination order: "size <*mlex*> {}"
### theory "HOL-Library.Discrete"
### 0.181s elapsed time, 0.700s cpu time, 0.095s GC time
Loading theory "HOL-Library.Indicator_Function" (required by "Draft.LoopInductionMoreTemplates" via "Draft.LoopInduction" via "Draft.Healthiness" via "Draft.Embedding" via "Draft.Misc" via "HOL-Analysis.Multivariate_Analysis" via "HOL-Analysis.Ordered_Euclidean_Space" via "HOL-Analysis.Convex_Euclidean_Space" via "HOL-Analysis.Topology_Euclidean_Space" via "HOL-Analysis.Elementary_Normed_Spaces" via "HOL-Analysis.Elementary_Metric_Spaces" via "HOL-Analysis.Abstract_Topology_2")
locale finite_dimensional_vector_space_prod
  fixes s1 :: "'a => 'b => 'b"  (infixr \<open>*a\<close> 75)
    and s2 :: "'a => 'c => 'c"  (infixr \<open>*b\<close> 75)
    and B1 :: "'b set"
    and B2 :: "'c set"
  assumes "finite_dimensional_vector_space_prod (*a) (*b) B1 B2"
### theory "HOL-Analysis.Product_Vector"
### 1.007s elapsed time, 3.915s cpu time, 0.536s GC time
Loading theory "HOL-Analysis.Elementary_Topology" (required by "Draft.LoopInductionMoreTemplates" via "Draft.LoopInduction" via "Draft.Healthiness" via "Draft.Embedding" via "Draft.Misc" via "HOL-Analysis.Multivariate_Analysis" via "HOL-Analysis.Ordered_Euclidean_Space" via "HOL-Analysis.Convex_Euclidean_Space" via "HOL-Analysis.Topology_Euclidean_Space" via "HOL-Analysis.Elementary_Normed_Spaces" via "HOL-Analysis.Elementary_Metric_Spaces" via "HOL-Analysis.Abstract_Topology_2")
### theory "HOL-Library.BigO"
### 0.864s elapsed time, 3.365s cpu time, 0.430s GC time
Loading theory "HOL-Analysis.Euclidean_Space" (required by "Draft.LoopInductionMoreTemplates" via "Draft.LoopInduction" via "Draft.Healthiness" via "Draft.Embedding" via "Draft.Misc" via "HOL-Analysis.Multivariate_Analysis" via "HOL-Analysis.Ordered_Euclidean_Space" via "HOL-Analysis.Convex_Euclidean_Space" via "HOL-Analysis.Convex" via "HOL-Analysis.Affine" via "HOL-Analysis.Linear_Algebra")
### theory "HOL-Library.Indicator_Function"
### 0.449s elapsed time, 1.748s cpu time, 0.235s GC time
Loading theory "Draft.ExtrEqs" (required by "Draft.LoopInductionMoreTemplates")
Proofs for inductive predicate(s) "generate_topology_on"
  Proving monotonicity ...
### theory "HOL-Analysis.Abstract_Topology"
### 3.087s elapsed time, 12.014s cpu time, 2.431s GC time
Loading theory "HOL-Analysis.Abstract_Limits" (required by "Draft.LoopInductionMoreTemplates" via "Draft.LoopInduction" via "Draft.Healthiness" via "Draft.Embedding" via "Draft.Misc" via "HOL-Analysis.Multivariate_Analysis" via "HOL-Analysis.Cross3" via "HOL-Analysis.Cartesian_Euclidean_Space" via "HOL-Analysis.Derivative" via "HOL-Analysis.Bounded_Linear_Function" via "HOL-Analysis.Function_Topology")
class topological_space = open +
  assumes "open_UNIV": "open UNIV"
  assumes "open_Int": "!!S T. [| open S; open T |] ==> open (S Int T)"
  assumes "open_Union": "!!K. Ball K open ==> open (\<Union> K)"
locale countable_basis
  fixes p :: "'a set => bool"
    and B :: "'a set set"
  assumes "countable_basis p B"
### theory "HOL-Analysis.Abstract_Limits"
### 0.234s elapsed time, 0.915s cpu time, 0.073s GC time
Loading theory "HOL-Library.Liminf_Limsup" (required by "Draft.LoopInductionMoreTemplates" via "Draft.LoopInduction" via "Draft.Healthiness" via "Draft.Embedding" via "Draft.Misc" via "HOL-Analysis.Multivariate_Analysis" via "HOL-Analysis.Cross3" via "HOL-Analysis.Cartesian_Euclidean_Space" via "HOL-Analysis.Derivative" via "HOL-Analysis.Bounded_Linear_Function" via "HOL-Analysis.Uniform_Limit" via "HOL-Analysis.Summation_Tests" via "HOL-Library.Extended_Real")
class second_countable_topology = topological_space +
  assumes
    "ex_countable_subbasis":
      "EX B. countable B & open = generate_topology B"
val eqpattern =
   Pattern
    (
       Const ("HOL.Trueprop", "bool => prop") $
         (Const ("HOL.eq", "?'a => ?'a => bool") $
           Var (("_dummy_", 1), "?'a") $ Var (("_dummy_", 2), "?'a"))
       ):
   term Find_Theorems.criterion
val badeqpattern = Pattern (Const ("Pure.eq", "?'a => ?'a => prop")):
   term Find_Theorems.criterion
val undefpattern =
   Pattern
    (
       Const ("HOL.Trueprop", "bool => prop") $
         (Const ("HOL.eq", "?'a => ?'a => bool") $
           Var (("_dummy_", 1), "?'a") $ Const ("HOL.undefined", "?'a"))
       ):
   term Find_Theorems.criterion
val thmpattern =
   Pattern
    (Const ("HOL.Trueprop", "bool => prop") $ Var (("_dummy_", 1), "bool")):
   term Find_Theorems.criterion
val badnames =
   ["*nitpick*", "*Nitpick*", "*full_exhaustive*", "*_def*", "Enum.finite*",
    "*Quickcheck*", "ATP*", "*Nunchaku*", "*Code*", "*BNF*", "*SMT*",
    "*.*.*"]:
   string list
val unwanted_names =
   [(false, Name "*nitpick*"), (false, Name "*Nitpick*"),
    (false, Name "*full_exhaustive*"), (false, Name "*_def*"),
    (false, Name "Enum.finite*"), (false, Name "*Quickcheck*"),
    (false, Name "ATP*"), (false, Name "*Nunchaku*"),
    (false, Name "*Code*"), (false, Name "*BNF*"), (false, Name "*SMT*"),
    (false, Name "*.*.*")]:
   (bool * term Find_Theorems.criterion) list
val has_vars = fn: term -> bool
val get_all_eqs = fn: string -> Proof.context -> (string * thm) list
val get_all_thms = fn: string -> Proof.context -> (string * thm) list
val get_noneq_thms = fn: string -> Proof.context -> (string * thm) list
val template_eqs = fn:
   string -> Proof.context -> (string * thm * template) list
val template_thms = fn:
   string -> Proof.context -> (string * thm * template) list
### theory "Draft.ExtrEqs"
### 0.726s elapsed time, 2.813s cpu time, 0.278s GC time
Loading theory "HOL-Library.Order_Continuity" (required by "Draft.LoopInductionMoreTemplates" via "Draft.LoopInduction" via "Draft.Healthiness" via "Draft.Embedding" via "Draft.Misc" via "HOL-Analysis.Multivariate_Analysis" via "HOL-Analysis.Cross3" via "HOL-Analysis.Cartesian_Euclidean_Space" via "HOL-Analysis.Derivative" via "HOL-Analysis.Bounded_Linear_Function" via "HOL-Analysis.Uniform_Limit" via "HOL-Analysis.Summation_Tests" via "HOL-Library.Extended_Real" via "HOL-Library.Extended_Nat")
class euclidean_space = real_inner +
  fixes Basis :: "'a set"
  assumes "nonempty_Basis": "Basis ~= {}"
  assumes "finite_Basis": "finite Basis"
  assumes
    "inner_Basis":
      "!!u v.
          [| u : Basis; v : Basis |]
          ==> inner u v = (if u = v then 1 else 0)"
  assumes
    "euclidean_all_zero_iff":
      "!!x. (ALL u:Basis. inner x u = 0) = (x = (0::'a))"
### theory "HOL-Library.Liminf_Limsup"
### 0.517s elapsed time, 1.994s cpu time, 0.209s GC time
Loading theory "HOL-Library.Sum_of_Squares" (required by "Draft.LoopInductionMoreTemplates" via "Draft.LoopInduction" via "Draft.Healthiness" via "Draft.Embedding" via "Draft.Misc" via "HOL-Analysis.Multivariate_Analysis" via "HOL-Analysis.Ordered_Euclidean_Space" via "HOL-Analysis.Convex_Euclidean_Space" via "HOL-Analysis.Topology_Euclidean_Space" via "HOL-Analysis.Norm_Arith")
### theory "HOL-Library.Order_Continuity"
### 1.159s elapsed time, 4.329s cpu time, 2.152s GC time
Loading theory "HOL-Library.Extended_Nat" (required by "Draft.LoopInductionMoreTemplates" via "Draft.LoopInduction" via "Draft.Healthiness" via "Draft.Embedding" via "Draft.Misc" via "HOL-Analysis.Multivariate_Analysis" via "HOL-Analysis.Cross3" via "HOL-Analysis.Cartesian_Euclidean_Space" via "HOL-Analysis.Derivative" via "HOL-Analysis.Bounded_Linear_Function" via "HOL-Analysis.Uniform_Limit" via "HOL-Analysis.Summation_Tests" via "HOL-Library.Extended_Real")
class infinity = type +
  fixes infinity :: "'a"
instantiation
  enat :: infinity
  infinity_enat == infinity :: enat
Proofs for inductive predicate(s) "rec_set_enat"
instantiation
  real :: euclidean_space
  Basis_real == Basis :: real set
instantiation
  complex :: euclidean_space
  Basis_complex == Basis :: complex set
instantiation
  prod :: (real_inner, real_inner) real_inner
  inner_prod == inner :: 'a * 'b => 'a * 'b => real
instantiation
  prod :: (euclidean_space, euclidean_space) euclidean_space
  Basis_prod == Basis :: ('a * 'b) set
### Cannot skip proof of schematic goal statement
### Cannot skip proof of schematic goal statement
### No equation for constructor "Extended_Nat.infinity_class.infinity"
### in definition of function "the_enat"
consts
  the_enat :: "enat => nat"
instantiation
  enat :: zero_neq_one
  one_enat == one_class.one :: enat
  zero_enat == zero_class.zero :: enat
### theory "HOL-Analysis.Euclidean_Space"
### 2.859s elapsed time, 10.757s cpu time, 4.597s GC time
Loading theory "HOL-Analysis.Finite_Cartesian_Product" (required by "Draft.LoopInductionMoreTemplates" via "Draft.LoopInduction" via "Draft.Healthiness" via "Draft.Embedding" via "Draft.Misc" via "HOL-Analysis.Multivariate_Analysis" via "HOL-Analysis.Ordered_Euclidean_Space" via "HOL-Analysis.Convex_Euclidean_Space" via "HOL-Analysis.Topology_Euclidean_Space" via "HOL-Analysis.Elementary_Normed_Spaces" via "HOL-Analysis.Cartesian_Space")
instantiation
  enat :: comm_monoid_add
  plus_enat == plus :: enat => enat => enat
instantiation
  enat :: {comm_semiring_1,semiring_no_zero_divisors}
  times_enat == times :: enat => enat => enat
### theory "HOL-Analysis.Elementary_Topology"
### 3.169s elapsed time, 11.959s cpu time, 4.773s GC time
Loading theory "HOL-Analysis.Linear_Algebra" (required by "Draft.LoopInductionMoreTemplates" via "Draft.LoopInduction" via "Draft.Healthiness" via "Draft.Embedding" via "Draft.Misc" via "HOL-Analysis.Multivariate_Analysis" via "HOL-Analysis.Ordered_Euclidean_Space" via "HOL-Analysis.Convex_Euclidean_Space" via "HOL-Analysis.Convex" via "HOL-Analysis.Affine")
instantiation
  enat :: minus
  minus_enat == minus :: enat => enat => enat
instantiation
  enat :: linordered_ab_semigroup_add
  less_eq_enat == less_eq :: enat => enat => bool
  less_enat == less :: enat => enat => bool
instantiation
  enat :: {order_bot,order_top}
  top_enat == top :: enat
  bot_enat == bot :: enat
structure Cancel_Enat_Common:
  sig
    val dest_sum: term -> term list
    val dest_summing: term * term list -> term list
    val find_first: term -> term list -> term list
    val find_first_t: term list -> term -> term list -> term list
    val mk_eq: term * term -> term
    val mk_sum: typ -> term list -> term
    val norm_ss: simpset
    val norm_tac: Proof.context -> tactic
    val simplify_meta_eq: Proof.context -> thm -> thm -> thm
    val trans_tac: Proof.context -> thm option -> tactic
  end
structure Eq_Enat_Cancel:
  sig val proc: Proof.context -> term -> thm option end
structure Le_Enat_Cancel:
  sig val proc: Proof.context -> term -> thm option end
structure Less_Enat_Cancel:
  sig val proc: Proof.context -> term -> thm option end
instantiation
  enat :: complete_lattice
  Inf_enat == Inf :: enat set => enat
  Sup_enat == Sup :: enat set => enat
  sup_enat == sup :: enat => enat => enat
  inf_enat == inf :: enat => enat => enat
### ML warning (line 261 of "~~/src/HOL/Library/Sum_of_Squares/positivstellensatz.ML"):
### Value identifier (pth_abs) has not been referenced.
### ML warning (line 265 of "~~/src/HOL/Library/Sum_of_Squares/positivstellensatz.ML"):
### Value identifier (pth_max) has not been referenced.
### ML warning (line 269 of "~~/src/HOL/Library/Sum_of_Squares/positivstellensatz.ML"):
### Value identifier (pth_min) has not been referenced.
### ML warning (line 379 of "~~/src/HOL/Library/Sum_of_Squares/positivstellensatz.ML"):
### Pattern is not exhaustive.
signature FUNC =
  sig
    exception DUP of key
    exception SAME
    exception UNDEF of key
    val apply: 'a table -> key -> 'a
    val applyd: 'a table -> (key -> 'a) -> key -> 'a
    val build: ('a table -> 'a table) -> 'a table
    val choose: 'a table -> key * 'a
    val combine:
       ('a -> 'a -> 'a) -> ('a -> bool) -> 'a table -> 'a table -> 'a table
    val cons_list: key * 'a -> 'a list table -> 'a list table
    val default: key * 'a -> 'a table -> 'a table
    val defined: 'a table -> key -> bool
    val delete: key -> 'a table -> 'a table
    val delete_safe: key -> 'a table -> 'a table
    val dest: 'a table -> (key * 'a) list
    val dest_list: 'a list table -> (key * 'a) list
    val dom: 'a table -> key list
    val empty: 'a table
    val exists: (key * 'a -> bool) -> 'a table -> bool
    val fold: (key * 'a -> 'b -> 'b) -> 'a table -> 'b -> 'b
    val fold_rev: (key * 'a -> 'b -> 'b) -> 'a table -> 'b -> 'b
    val forall: (key * 'a -> bool) -> 'a table -> bool
    val get_first: (key * 'a -> 'b option) -> 'a table -> 'b option
    val insert: ('a * 'a -> bool) -> key * 'a -> 'a table -> 'a table
    val insert_list:
       ('a * 'a -> bool) -> key * 'a -> 'a list table -> 'a list table
    val insert_set: key -> set -> set
    val is_empty: 'a table -> bool
    val is_single: 'a table -> bool
    val join: (key -> 'a * 'a -> 'a) -> 'a table * 'a table -> 'a table
    type key
    val keys: 'a table -> key list
    val lookup: 'a table -> key -> 'a option
    val lookup_key: 'a table -> key -> (key * 'a) option
    val lookup_list: 'a list table -> key -> 'a list
    val make: (key * 'a) list -> 'a table
    val make_list: (key * 'a) list -> 'a list table
    val make_set: key list -> set
    val map: (key -> 'a -> 'b) -> 'a table -> 'b table
    val map_default: key * 'a -> ('a -> 'a) -> 'a table -> 'a table
    val map_entry: key -> ('a -> 'a) -> 'a table -> 'a table
    val max: 'a table -> (key * 'a) option
    val member: ('a * 'b -> bool) -> 'b table -> key * 'a -> bool
    val merge: ('a * 'a -> bool) -> 'a table * 'a table -> 'a table
    val merge_list:
       ('a * 'a -> bool) -> 'a list table * 'a list table -> 'a list table
    val min: 'a table -> (key * 'a) option
    val onefunc: key * 'a -> 'a table
    val remove: ('a * 'b -> bool) -> key * 'a -> 'b table -> 'b table
    val remove_list:
       ('a * 'b -> bool) -> key * 'a -> 'b list table -> 'b list table
    val remove_set: key -> set -> set
    type set = unit table
    type 'a table
    val tryapplyd: 'a table -> key -> 'a -> 'a
    val update: key * 'a -> 'a table -> 'a table
    val update_list:
       ('a * 'a -> bool) -> key * 'a -> 'a list table -> 'a list table
    val update_new: key * 'a -> 'a table -> 'a table
    val updatep: (key * 'a -> bool) -> key * 'a -> 'a table -> 'a table
  end
functor FuncFun (Key: KEY): FUNC
signature REAL_ARITH =
  sig
    type cert_conv = cterm -> thm * pss_tree
    val cterm_of_rat: Rat.rat -> cterm
    val dest_ratconst: cterm -> Rat.rat
    val gen_gen_real_arith:
       Proof.context ->
         (Rat.rat -> cterm) * conv * conv * conv * conv * conv * conv *
         conv * conv * conv * prover
           -> cert_conv
    val gen_prover_real_arith: Proof.context -> prover -> cert_conv
    val gen_real_arith:
       Proof.context ->
         (Rat.rat -> cterm) * conv * conv * conv * conv * conv * conv *
         conv * prover
           -> cert_conv
    val is_ratconst: cterm -> bool
    datatype positivstellensatz
    =
         Axiom_eq of int
       | Axiom_le of int
       | Axiom_lt of int
       | Eqmul of FuncUtil.poly * positivstellensatz
       | Product of positivstellensatz * positivstellensatz
       | Rational_eq of Rat.rat
       | Rational_le of Rat.rat
       | Rational_lt of Rat.rat
       | Square of FuncUtil.poly
       | Sum of positivstellensatz * positivstellensatz
    type prover =
       tree_choice list ->
         (thm list * thm list * thm list -> positivstellensatz -> thm) ->
           thm list * thm list * thm list -> thm * pss_tree
    datatype pss_tree
    = Branch of pss_tree * pss_tree | Cert of positivstellensatz | Trivial
    val real_linear_prover:
       (thm list * thm list * thm list -> positivstellensatz -> thm) ->
         thm list * thm list * thm list -> thm * pss_tree
    datatype tree_choice = Left | Right
  end
structure FuncUtil:
  sig
    structure Ctermfunc: FUNC
    structure Intfunc: FUNC
    structure Intpairfunc: FUNC
    structure Monomialfunc: FUNC
    structure Ratfunc: FUNC
    structure Symfunc: FUNC
    structure Termfunc: FUNC
    val dest_monomial: 'a Ctermfunc.table -> (cterm * 'a) list
    type monomial = int Ctermfunc.table
    val monomial_ord: int Ctermfunc.table * int Ctermfunc.table -> order
    val monomial_order: int Ctermfunc.table * int Ctermfunc.table -> order
    type poly = Rat.rat Monomialfunc.table
  end
structure RealArith: REAL_ARITH
### theory "HOL-Library.Extended_Nat"
### 1.299s elapsed time, 4.882s cpu time, 2.283s GC time
Loading theory "HOL-Analysis.Abstract_Topology_2" (required by "Draft.LoopInductionMoreTemplates" via "Draft.LoopInduction" via "Draft.Healthiness" via "Draft.Embedding" via "Draft.Misc" via "HOL-Analysis.Multivariate_Analysis" via "HOL-Analysis.Ordered_Euclidean_Space" via "HOL-Analysis.Convex_Euclidean_Space" via "HOL-Analysis.Topology_Euclidean_Space" via "HOL-Analysis.Elementary_Normed_Spaces" via "HOL-Analysis.Elementary_Metric_Spaces")
signature POSITIVSTELLENSATZ_TOOLS =
  sig
    val print_cert: RealArith.pss_tree -> string
    val read_cert: Proof.context -> string -> RealArith.pss_tree
  end
structure Positivstellensatz_Tools: POSITIVSTELLENSATZ_TOOLS
class real_inner = real_normed_vector +
  fixes inner :: "'a => 'a => real"
  assumes "inner_commute": "!!x y. x \<bullet> y = y \<bullet> x"
    and
    "inner_add_left":
      "!!x y z. (x + y) \<bullet> z = x \<bullet> z + y \<bullet> z"
    and
    "inner_scaleR_left":
      "!!r x y. r *\<^sub>R x \<bullet> y = r * (x \<bullet> y)"
    and "inner_ge_zero": "!!x. 0 <= x \<bullet> x"
    and "inner_eq_zero_iff": "!!x. (x \<bullet> x = 0) = (x = (0::'a))"
    and "norm_eq_sqrt_inner": "!!x. norm x = sqrt (x \<bullet> x)"
signature SUM_OF_SQUARES =
  sig
    exception Failure of string
    val debug: bool Config.T
    val debug_message: Proof.context -> (unit -> string) -> unit
    datatype proof_method
    = Certificate of RealArith.pss_tree | Prover of string -> string
    val sos_tac:
       (RealArith.pss_tree -> unit) ->
         proof_method -> Proof.context -> int -> tactic
    val trace: bool Config.T
    val trace_message: Proof.context -> (unit -> string) -> unit
  end
structure Sum_of_Squares: SUM_OF_SQUARES
signature SOS_WRAPPER =
  sig val sos_tac: Proof.context -> string option -> int -> tactic end
structure SOS_Wrapper: SOS_WRAPPER
### theory "HOL-Library.Sum_of_Squares"
### 2.503s elapsed time, 9.411s cpu time, 4.463s GC time
Loading theory "HOL-Library.Extended_Real" (required by "Draft.LoopInductionMoreTemplates" via "Draft.LoopInduction" via "Draft.Healthiness" via "Draft.Embedding" via "Draft.Misc" via "HOL-Analysis.Multivariate_Analysis" via "HOL-Analysis.Cross3" via "HOL-Analysis.Cartesian_Euclidean_Space" via "HOL-Analysis.Derivative" via "HOL-Analysis.Bounded_Linear_Function" via "HOL-Analysis.Uniform_Limit" via "HOL-Analysis.Summation_Tests")
bundle vec_syntax
bundle no_vec_syntax
instantiation
  vec :: (zero, finite) zero
  zero_vec == zero_class.zero :: ('a, 'b) vec
instantiation
  vec :: (plus, finite) plus
  plus_vec == plus :: ('a, 'b) vec => ('a, 'b) vec => ('a, 'b) vec
instantiation
  vec :: (minus, finite) minus
  minus_vec == minus :: ('a, 'b) vec => ('a, 'b) vec => ('a, 'b) vec
instantiation
  vec :: (uminus, finite) uminus
  uminus_vec == uminus :: ('a, 'b) vec => ('a, 'b) vec
instantiation
  vec :: (times, finite) times
  times_vec == times :: ('a, 'b) vec => ('a, 'b) vec => ('a, 'b) vec
instantiation
  vec :: (one, finite) one
  one_vec == one_class.one :: ('a, 'b) vec
instantiation
  vec :: (ord, finite) ord
  less_eq_vec == less_eq :: ('a, 'b) vec => ('a, 'b) vec => bool
  less_vec == less :: ('a, 'b) vec => ('a, 'b) vec => bool
instantiation
  vec :: (real_vector, finite) real_vector
  scaleR_vec == scaleR :: real => ('a, 'b) vec => ('a, 'b) vec
instantiation
  enat :: linorder_topology
  open_enat == open :: enat set => bool
instantiation
  vec :: (topological_space, finite) topological_space
  open_vec == open :: ('a, 'b) vec set => bool
### theory "HOL-Analysis.Linear_Algebra"
### 1.055s elapsed time, 4.142s cpu time, 0.436s GC time
Loading theory "HOL-Analysis.Affine" (required by "Draft.LoopInductionMoreTemplates" via "Draft.LoopInduction" via "Draft.Healthiness" via "Draft.Embedding" via "Draft.Misc" via "HOL-Analysis.Multivariate_Analysis" via "HOL-Analysis.Ordered_Euclidean_Space" via "HOL-Analysis.Convex_Euclidean_Space" via "HOL-Analysis.Convex")
instantiation
  vec :: (metric_space, finite) dist
  dist_vec == dist :: ('a, 'b) vec => ('a, 'b) vec => real
instantiation
  vec :: (metric_space, finite) uniformity_dist
  uniformity_vec == uniformity :: (('a, 'b) vec * ('a, 'b) vec) filter
instantiation
  vec :: (metric_space, finite) metric_space
instantiation
  vec :: (real_normed_vector, finite) real_normed_vector
  sgn_vec == sgn :: ('a, 'b) vec => ('a, 'b) vec
  norm_vec == norm :: ('a, 'b) vec => real
instantiation
  vec :: (real_inner, finite) real_inner
  inner_vec == inner :: ('a, 'b) vec => ('a, 'b) vec => real
instantiation
  vec :: (euclidean_space, finite) euclidean_space
  Basis_vec == Basis :: ('a, 'b) vec set
instantiation
  ereal :: uminus
  uminus_ereal == uminus :: ereal => ereal
Found termination order: "{}"
### theory "HOL-Analysis.Affine"
### 0.534s elapsed time, 2.083s cpu time, 0.362s GC time
Loading theory "HOL-Analysis.Convex" (required by "Draft.LoopInductionMoreTemplates" via "Draft.LoopInduction" via "Draft.Healthiness" via "Draft.Embedding" via "Draft.Misc" via "HOL-Analysis.Multivariate_Analysis" via "HOL-Analysis.Ordered_Euclidean_Space" via "HOL-Analysis.Convex_Euclidean_Space")
instantiation
  ereal :: infinity
  infinity_ereal == infinity :: ereal
### theory "HOL-Analysis.Abstract_Topology_2"
### 1.433s elapsed time, 5.600s cpu time, 0.759s GC time
Loading theory "HOL-Analysis.Connected" (required by "Draft.LoopInductionMoreTemplates" via "Draft.LoopInduction" via "Draft.Healthiness" via "Draft.Embedding" via "Draft.Misc" via "HOL-Analysis.Multivariate_Analysis" via "HOL-Analysis.Ordered_Euclidean_Space" via "HOL-Analysis.Convex_Euclidean_Space" via "HOL-Analysis.Topology_Euclidean_Space" via "HOL-Analysis.Elementary_Normed_Spaces")
instantiation
  ereal :: abs
  abs_ereal == abs :: ereal => ereal
### theory "HOL-Analysis.Finite_Cartesian_Product"
### 1.815s elapsed time, 7.098s cpu time, 0.905s GC time
Loading theory "HOL-Analysis.Cartesian_Space" (required by "Draft.LoopInductionMoreTemplates" via "Draft.LoopInduction" via "Draft.Healthiness" via "Draft.Embedding" via "Draft.Misc" via "HOL-Analysis.Multivariate_Analysis" via "HOL-Analysis.Ordered_Euclidean_Space" via "HOL-Analysis.Convex_Euclidean_Space" via "HOL-Analysis.Topology_Euclidean_Space" via "HOL-Analysis.Elementary_Normed_Spaces")
instantiation
  ereal :: {comm_monoid_add,zero_neq_one}
  one_ereal == one_class.one :: ereal
  zero_ereal == zero_class.zero :: ereal
  plus_ereal == plus :: ereal => ereal => ereal
instantiation
  ereal :: linorder
  less_eq_ereal == less_eq :: ereal => ereal => bool
  less_ereal == less :: ereal => ereal => bool
### theory "HOL-Analysis.Connected"
### 0.314s elapsed time, 1.232s cpu time, 0.108s GC time
Loading theory "HOL-Analysis.Function_Topology" (required by "Draft.LoopInductionMoreTemplates" via "Draft.LoopInduction" via "Draft.Healthiness" via "Draft.Embedding" via "Draft.Misc" via "HOL-Analysis.Multivariate_Analysis" via "HOL-Analysis.Cross3" via "HOL-Analysis.Cartesian_Euclidean_Space" via "HOL-Analysis.Derivative" via "HOL-Analysis.Bounded_Linear_Function")
instantiation
  ereal :: {comm_monoid_mult,sgn}
  sgn_ereal == sgn :: ereal => ereal
  times_ereal == times :: ereal => ereal => ereal
instantiation
  ereal :: minus
  minus_ereal == minus :: ereal => ereal => ereal
instantiation
  fun :: (type, topological_space) topological_space
  open_fun == open :: ('a => 'b) set => bool
instantiation
  ereal :: inverse
  inverse_ereal == inverse :: ereal => ereal
  divide_ereal == divide :: ereal => ereal => ereal
### theory "HOL-Analysis.Convex"
### 1.069s elapsed time, 4.155s cpu time, 0.736s GC time
Loading theory "HOL-Analysis.Elementary_Metric_Spaces" (required by "Draft.LoopInductionMoreTemplates" via "Draft.LoopInduction" via "Draft.Healthiness" via "Draft.Embedding" via "Draft.Misc" via "HOL-Analysis.Multivariate_Analysis" via "HOL-Analysis.Ordered_Euclidean_Space" via "HOL-Analysis.Convex_Euclidean_Space" via "HOL-Analysis.Topology_Euclidean_Space" via "HOL-Analysis.Elementary_Normed_Spaces")
instantiation
  ereal :: lattice
  inf_ereal == inf :: ereal => ereal => ereal
  sup_ereal == sup :: ereal => ereal => ereal
### theory "HOL-Analysis.Function_Topology"
### 0.771s elapsed time, 2.985s cpu time, 0.619s GC time
Loading theory "HOL-Analysis.Norm_Arith" (required by "Draft.LoopInductionMoreTemplates" via "Draft.LoopInduction" via "Draft.Healthiness" via "Draft.Embedding" via "Draft.Misc" via "HOL-Analysis.Multivariate_Analysis" via "HOL-Analysis.Ordered_Euclidean_Space" via "HOL-Analysis.Convex_Euclidean_Space" via "HOL-Analysis.Topology_Euclidean_Space")
instantiation
  ereal :: complete_lattice
  Inf_ereal == Inf :: ereal set => ereal
  Sup_ereal == Sup :: ereal set => ereal
  bot_ereal == bot :: ereal
  top_ereal == top :: ereal
instantiation
  ereal :: linear_continuum_topology
  open_ereal == open :: ereal set => bool
locale linear_first_finite_dimensional_vector_space
  fixes scaleB :: "'a => 'b => 'b"  (infixr \<open>*b\<close> 75)
    and scaleC :: "'a => 'c => 'c"  (infixr \<open>*c\<close> 75)
    and BasisB :: "'b set"
    and f :: "'b => 'c"
  assumes "linear_first_finite_dimensional_vector_space (*b) (*c) BasisB f"
### ML warning (line 103 of "~~/src/HOL/Analysis/normarith.ML"):
### Matches are not exhaustive.
signature NORM_ARITH =
  sig
    val norm_arith: Proof.context -> conv
    val norm_arith_tac: Proof.context -> int -> tactic
  end
structure NormArith: NORM_ARITH
### theory "HOL-Analysis.Norm_Arith"
### 0.317s elapsed time, 1.210s cpu time, 0.191s GC time
"(bij, bij_betw, permutation)"
  :: "(('a => 'b) => bool) *
      (('c => 'd) => 'c set => 'd set => bool) * (('e => 'e) => bool)"
### theory "HOL-Analysis.Cartesian_Space"
### 1.835s elapsed time, 6.889s cpu time, 1.329s GC time
Loading theory "HOL-Analysis.Determinants" (required by "Draft.LoopInductionMoreTemplates" via "Draft.LoopInduction" via "Draft.Healthiness" via "Draft.Embedding" via "Draft.Misc" via "HOL-Analysis.Multivariate_Analysis")
class heine_borel = metric_space +
  assumes
    "bounded_imp_convergent_subsequence":
      "!!f. bounded (range f) ==>
            EX l r. strict_mono r & (f o r) \<longlonglongrightarrow> l"
### theory "HOL-Library.Extended_Real"
### 3.141s elapsed time, 11.801s cpu time, 2.164s GC time
Loading theory "HOL-Library.Extended_Nonnegative_Real" (required by "Draft.LoopInductionMoreTemplates" via "Draft.LoopInduction" via "Draft.Healthiness" via "Draft.Embedding" via "Draft.Misc" via "HOL-Analysis.Multivariate_Analysis" via "HOL-Analysis.Cross3" via "HOL-Analysis.Cartesian_Euclidean_Space" via "HOL-Analysis.Derivative" via "HOL-Analysis.Bounded_Linear_Function" via "HOL-Analysis.Uniform_Limit" via "HOL-Analysis.Summation_Tests" via "HOL-Analysis.Extended_Real_Limits")
"- \<infinity>"
  :: "ereal"
"\<infinity>"
  :: "ereal"
instantiation
  ennreal :: complete_linorder
  Inf_ennreal == Inf :: ennreal set => ennreal
  Sup_ennreal == Sup :: ennreal set => ennreal
  bot_ennreal == bot :: ennreal
  sup_ennreal == sup :: ennreal => ennreal => ennreal
  top_ennreal == top :: ennreal
  inf_ennreal == inf :: ennreal => ennreal => ennreal
  less_eq_ennreal == less_eq :: ennreal => ennreal => bool
  less_ennreal == less :: ennreal => ennreal => bool
"ereal (13 / 4)"
  :: "ereal"
"True"
  :: "bool"
"True"
  :: "bool"
### theory "HOL-Analysis.Determinants"
### 1.195s elapsed time, 4.172s cpu time, 1.143s GC time
instantiation
  ennreal :: infinity
  infinity_ennreal == infinity :: ennreal
instantiation
  ennreal :: {comm_semiring_1,semiring_1_no_zero_divisors}
  zero_ennreal == zero_class.zero :: ennreal
  plus_ennreal == plus :: ennreal => ennreal => ennreal
  one_ennreal == one_class.one :: ennreal
  times_ennreal == times :: ennreal => ennreal => ennreal
instantiation
  ennreal :: minus
  minus_ennreal == minus :: ennreal => ennreal => ennreal
instantiation
  ennreal :: inverse
  inverse_ennreal == inverse :: ennreal => ennreal
  divide_ennreal == divide :: ennreal => ennreal => ennreal
structure Cancel_Ennreal_Common:
  sig
    val dest_sum: term -> term list
    val dest_summing: term * term list -> term list
    val find_first: term -> term list -> term list
    val find_first_t: term list -> term -> term list -> term list
    val mk_eq: term * term -> term
    val mk_sum: typ -> term list -> term
    val norm_ss: simpset
    val norm_tac: Proof.context -> tactic
    val simplify_meta_eq: Proof.context -> thm -> thm -> thm
    val trans_tac: Proof.context -> thm option -> tactic
  end
structure Eq_Ennreal_Cancel:
  sig val proc: Proof.context -> term -> thm option end
structure Le_Ennreal_Cancel:
  sig val proc: Proof.context -> term -> thm option end
structure Less_Ennreal_Cancel:
  sig val proc: Proof.context -> term -> thm option end
### theory "HOL-Analysis.Elementary_Metric_Spaces"
### 3.148s elapsed time, 10.942s cpu time, 5.179s GC time
Loading theory "HOL-Analysis.Elementary_Normed_Spaces" (required by "Draft.LoopInductionMoreTemplates" via "Draft.LoopInduction" via "Draft.Healthiness" via "Draft.Embedding" via "Draft.Misc" via "HOL-Analysis.Multivariate_Analysis" via "HOL-Analysis.Ordered_Euclidean_Space" via "HOL-Analysis.Convex_Euclidean_Space" via "HOL-Analysis.Topology_Euclidean_Space")
instantiation
  ennreal :: linear_continuum_topology
  open_ennreal == open :: ennreal set => bool
### theory "HOL-Library.Extended_Nonnegative_Real"
### 2.604s elapsed time, 8.193s cpu time, 4.461s GC time
### theory "HOL-Analysis.Elementary_Normed_Spaces"
### 1.005s elapsed time, 1.709s cpu time, 0.240s GC time
Loading theory "HOL-Analysis.Topology_Euclidean_Space" (required by "Draft.LoopInductionMoreTemplates" via "Draft.LoopInduction" via "Draft.Healthiness" via "Draft.Embedding" via "Draft.Misc" via "HOL-Analysis.Multivariate_Analysis" via "HOL-Analysis.Ordered_Euclidean_Space" via "HOL-Analysis.Convex_Euclidean_Space")
### theory "HOL-Analysis.Topology_Euclidean_Space"
### 1.429s elapsed time, 1.584s cpu time, 0.221s GC time
Loading theory "HOL-Analysis.Convex_Euclidean_Space" (required by "Draft.LoopInductionMoreTemplates" via "Draft.LoopInduction" via "Draft.Healthiness" via "Draft.Embedding" via "Draft.Misc" via "HOL-Analysis.Multivariate_Analysis" via "HOL-Analysis.Ordered_Euclidean_Space")
Loading theory "HOL-Analysis.Extended_Real_Limits" (required by "Draft.LoopInductionMoreTemplates" via "Draft.LoopInduction" via "Draft.Healthiness" via "Draft.Embedding" via "Draft.Misc" via "HOL-Analysis.Multivariate_Analysis" via "HOL-Analysis.Cross3" via "HOL-Analysis.Cartesian_Euclidean_Space" via "HOL-Analysis.Derivative" via "HOL-Analysis.Bounded_Linear_Function" via "HOL-Analysis.Uniform_Limit" via "HOL-Analysis.Summation_Tests")
Loading theory "HOL-Analysis.Line_Segment" (required by "Draft.LoopInductionMoreTemplates" via "Draft.LoopInduction" via "Draft.Healthiness" via "Draft.Embedding" via "Draft.Misc" via "HOL-Analysis.Multivariate_Analysis" via "HOL-Analysis.Cross3" via "HOL-Analysis.Cartesian_Euclidean_Space" via "HOL-Analysis.Derivative")
### theory "HOL-Analysis.Line_Segment"
### 0.817s elapsed time, 2.472s cpu time, 0.483s GC time
### theory "HOL-Analysis.Convex_Euclidean_Space"
### 13.305s elapsed time, 42.835s cpu time, 40.662s GC time
Loading theory "HOL-Analysis.Ordered_Euclidean_Space" (required by "Draft.LoopInductionMoreTemplates" via "Draft.LoopInduction" via "Draft.Healthiness" via "Draft.Embedding" via "Draft.Misc" via "HOL-Analysis.Multivariate_Analysis")
Loading theory "HOL-Analysis.Starlike" (required by "Draft.LoopInductionMoreTemplates" via "Draft.LoopInduction" via "Draft.Healthiness" via "Draft.Embedding" via "Draft.Misc" via "HOL-Analysis.Multivariate_Analysis")
### theory "HOL-Analysis.Extended_Real_Limits"
### 13.326s elapsed time, 42.897s cpu time, 40.662s GC time
Loading theory "HOL-Analysis.Summation_Tests" (required by "Draft.LoopInductionMoreTemplates" via "Draft.LoopInduction" via "Draft.Healthiness" via "Draft.Embedding" via "Draft.Misc" via "HOL-Analysis.Multivariate_Analysis" via "HOL-Analysis.Cross3" via "HOL-Analysis.Cartesian_Euclidean_Space" via "HOL-Analysis.Derivative" via "HOL-Analysis.Bounded_Linear_Function" via "HOL-Analysis.Uniform_Limit")
### theory "HOL-Analysis.Summation_Tests"
### 0.848s elapsed time, 2.606s cpu time, 0.359s GC time
Loading theory "HOL-Analysis.Uniform_Limit" (required by "Draft.LoopInductionMoreTemplates" via "Draft.LoopInduction" via "Draft.Healthiness" via "Draft.Embedding" via "Draft.Misc" via "HOL-Analysis.Multivariate_Analysis" via "HOL-Analysis.Cross3" via "HOL-Analysis.Cartesian_Euclidean_Space" via "HOL-Analysis.Derivative" via "HOL-Analysis.Bounded_Linear_Function")
class ordered_euclidean_space = Inf + Sup + euclidean_space + abs + inf +
  sup + ord +
  assumes
    "eucl_le":
      "!!x y. (x <= y) = (ALL i:Basis. x \<bullet> i <= y \<bullet> i)"
  assumes "eucl_less_le_not_le": "!!x y. (x < y) = (x <= y & ~ y <= x)"
  assumes
    "eucl_inf":
      "!!x y.
          inf x y =
          (SUM i:Basis. inf (x \<bullet> i) (y \<bullet> i) *\<^sub>R i)"
  assumes
    "eucl_sup":
      "!!x y.
          sup x y =
          (SUM i:Basis. sup (x \<bullet> i) (y \<bullet> i) *\<^sub>R i)"
  assumes
    "eucl_Inf":
      "!!X. Inf X = (SUM i:Basis. (INF x\<in>X. x \<bullet> i) *\<^sub>R i)"
  assumes
    "eucl_Sup":
      "!!X. Sup X = (SUM i:Basis. (SUP x\<in>X. x \<bullet> i) *\<^sub>R i)"
  assumes
    "eucl_abs":
      "!!x. \<bar>x\<bar> =
            (SUM i:Basis. \<bar>x \<bullet> i\<bar> *\<^sub>R i)"
### theory "HOL-Analysis.Uniform_Limit"
### 0.568s elapsed time, 1.733s cpu time, 0.202s GC time
Loading theory "HOL-Analysis.Bounded_Linear_Function" (required by "Draft.LoopInductionMoreTemplates" via "Draft.LoopInduction" via "Draft.Healthiness" via "Draft.Embedding" via "Draft.Misc" via "HOL-Analysis.Multivariate_Analysis" via "HOL-Analysis.Cross3" via "HOL-Analysis.Cartesian_Euclidean_Space" via "HOL-Analysis.Derivative")
?a : affine hull ?S ==> aff_dim ?S = int (dim ((+) (- ?a) ` ?S))
### theory "HOL-Analysis.Starlike"
### 1.699s elapsed time, 5.205s cpu time, 0.679s GC time
instantiation
  blinfun :: (real_normed_vector, real_normed_vector) real_normed_vector
  uminus_blinfun == uminus ::
    'a \<Rightarrow>\<^sub>L 'b => 'a \<Rightarrow>\<^sub>L 'b
  zero_blinfun == zero_class.zero :: 'a \<Rightarrow>\<^sub>L 'b
  minus_blinfun == minus ::
    'a \<Rightarrow>\<^sub>L 'b
    => 'a \<Rightarrow>\<^sub>L 'b => 'a \<Rightarrow>\<^sub>L 'b
  plus_blinfun == plus ::
    'a \<Rightarrow>\<^sub>L 'b
    => 'a \<Rightarrow>\<^sub>L 'b => 'a \<Rightarrow>\<^sub>L 'b
  sgn_blinfun == sgn ::
    'a \<Rightarrow>\<^sub>L 'b => 'a \<Rightarrow>\<^sub>L 'b
  norm_blinfun == norm :: 'a \<Rightarrow>\<^sub>L 'b => real
  scaleR_blinfun == scaleR ::
    real => 'a \<Rightarrow>\<^sub>L 'b => 'a \<Rightarrow>\<^sub>L 'b
  dist_blinfun == dist ::
    'a \<Rightarrow>\<^sub>L 'b => 'a \<Rightarrow>\<^sub>L 'b => real
  uniformity_blinfun == uniformity ::
    ('a \<Rightarrow>\<^sub>L 'b * 'a \<Rightarrow>\<^sub>L 'b) filter
  open_blinfun == open :: ('a \<Rightarrow>\<^sub>L 'b) set => bool
locale bounded_bilinear
  fixes prod :: "'a => 'b => 'c"  (infixl \<open>**\<close> 70)
  assumes "bounded_bilinear (**)"
locale bounded_bilinear
  fixes prod :: "'a => 'b => 'c"  (infixl \<open>**\<close> 70)
  assumes "bounded_bilinear (**)"
### theory "HOL-Analysis.Bounded_Linear_Function"
### 1.493s elapsed time, 3.385s cpu time, 0.255s GC time
Loading theory "HOL-Analysis.Derivative" (required by "Draft.LoopInductionMoreTemplates" via "Draft.LoopInduction" via "Draft.Healthiness" via "Draft.Embedding" via "Draft.Misc" via "HOL-Analysis.Multivariate_Analysis" via "HOL-Analysis.Cross3" via "HOL-Analysis.Cartesian_Euclidean_Space")
instantiation
  prod :: (abs, abs) abs
  abs_prod == abs :: 'a * 'b => 'a * 'b
instantiation
  vec :: (ordered_euclidean_space, finite) ordered_euclidean_space
  abs_vec == abs :: ('a, 'b) vec => ('a, 'b) vec
  inf_vec == inf :: ('a, 'b) vec => ('a, 'b) vec => ('a, 'b) vec
  sup_vec == sup :: ('a, 'b) vec => ('a, 'b) vec => ('a, 'b) vec
  Inf_vec == Inf :: ('a, 'b) vec set => ('a, 'b) vec
  Sup_vec == Sup :: ('a, 'b) vec set => ('a, 'b) vec
### theory "HOL-Analysis.Ordered_Euclidean_Space"
### 3.100s elapsed time, 8.149s cpu time, 0.816s GC time
### theory "HOL-Analysis.Derivative"
### 1.340s elapsed time, 1.625s cpu time, 0.194s GC time
Loading theory "HOL-Analysis.Cartesian_Euclidean_Space" (required by "Draft.LoopInductionMoreTemplates" via "Draft.LoopInduction" via "Draft.Healthiness" via "Draft.Embedding" via "Draft.Misc" via "HOL-Analysis.Multivariate_Analysis" via "HOL-Analysis.Cross3")
Loading theory "HOL-Analysis.Lipschitz" (required by "Draft.LoopInductionMoreTemplates" via "Draft.LoopInduction" via "Draft.Healthiness" via "Draft.Embedding" via "Draft.Misc" via "HOL-Analysis.Multivariate_Analysis")
bundle lipschitz_syntax
bundle no_lipschitz_syntax
### theory "HOL-Analysis.Cartesian_Euclidean_Space"
### 0.241s elapsed time, 0.529s cpu time, 0.099s GC time
Loading theory "HOL-Analysis.Cross3" (required by "Draft.LoopInductionMoreTemplates" via "Draft.LoopInduction" via "Draft.Healthiness" via "Draft.Embedding" via "Draft.Misc" via "HOL-Analysis.Multivariate_Analysis")
### theory "HOL-Analysis.Lipschitz"
### 0.394s elapsed time, 0.864s cpu time, 0.163s GC time
bundle cross3_syntax
bundle no_cross3_syntax
### theory "HOL-Analysis.Cross3"
### 1.683s elapsed time, 2.021s cpu time, 0.286s GC time
Loading theory "HOL-Analysis.Multivariate_Analysis" (required by "Draft.LoopInductionMoreTemplates" via "Draft.LoopInduction" via "Draft.Healthiness" via "Draft.Embedding" via "Draft.Misc")
### theory "HOL-Analysis.Multivariate_Analysis"
### 0.822s elapsed time, 0.850s cpu time, 0.036s GC time
Loading theory "Draft.Misc" (required by "Draft.LoopInductionMoreTemplates" via "Draft.LoopInduction" via "Draft.Healthiness" via "Draft.Embedding")
### theory "Draft.Misc"
### 0.134s elapsed time, 0.179s cpu time, 0.061s GC time
Loading theory "Draft.Expectations" (required by "Draft.LoopInductionMoreTemplates" via "Draft.LoopInduction" via "Draft.Healthiness" via "Draft.Embedding" via "Draft.Induction")
### theory "Draft.Expectations"
### 0.253s elapsed time, 0.253s cpu time, 0.000s GC time
Loading theory "Draft.Transformers" (required by "Draft.LoopInductionMoreTemplates" via "Draft.LoopInduction" via "Draft.Healthiness" via "Draft.Embedding" via "Draft.Induction")
bound_of (%x. ?c) = ?c
### Ambiguous input (line 651 of "$AFP/pGCL/Transformers.thy") produces 32 parse trees (10 displayed):
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.iff"
###     ("_applC" ("_position" nearly_healthy) ("_position" t))
###     ("\<^const>HOL.conj"
###       ("\<^const>HOL.All_binder" ("_position" P)
###         ("\<^const>HOL.implies"
###           ("_applC" ("_position" unitary) ("_position" P))
###           ("_applC" ("_position" unitary)
###             ("_applC" ("_position" t) ("_position" P)))))
###       ("\<^const>HOL.All_binder" ("_idts" ("_position" P) ("_position" Q))
###         ("\<^const>HOL.implies"
###           ("_applC" ("_position" unitary) ("_position" P))
###           ("\<^const>HOL.implies"
###             ("_applC" ("_position" unitary) ("_position" Q))
###             ("\<^const>Expectations.entails"
###               ("\<^const>HOL.implies"
###                 ("\<^const>Expectations.entails" ("_position" P)
###                   ("_position" Q))
###                 ("_applC" ("_position" t) ("_position" P)))
###               ("_applC" ("_position" t) ("_position" Q)))))))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.iff"
###     ("_applC" ("_position" nearly_healthy) ("_position" t))
###     ("\<^const>HOL.conj"
###       ("\<^const>HOL.All_binder" ("_position" P)
###         ("\<^const>HOL.implies"
###           ("_applC" ("_position" unitary) ("_position" P))
###           ("_applC" ("_position" unitary)
###             ("_applC" ("_position" t) ("_position" P)))))
###       ("\<^const>HOL.All_binder" ("_idts" ("_position" P) ("_position" Q))
###         ("\<^const>HOL.implies"
###           ("_applC" ("_position" unitary) ("_position" P))
###           ("\<^const>Expectations.entails"
###             ("\<^const>HOL.implies"
###               ("_applC" ("_position" unitary) ("_position" Q))
###               ("\<^const>HOL.implies"
###                 ("\<^const>Expectations.entails" ("_position" P)
###                   ("_position" Q))
###                 ("_applC" ("_position" t) ("_position" P))))
###             ("_applC" ("_position" t) ("_position" Q))))))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.iff"
###     ("_applC" ("_position" nearly_healthy) ("_position" t))
###     ("\<^const>HOL.conj"
###       ("\<^const>HOL.All_binder" ("_position" P)
###         ("\<^const>HOL.implies"
###           ("_applC" ("_position" unitary) ("_position" P))
###           ("_applC" ("_position" unitary)
###             ("_applC" ("_position" t) ("_position" P)))))
###       ("\<^const>Expectations.entails"
###         ("\<^const>HOL.All_binder" ("_idts" ("_position" P) ("_position" Q))
###           ("\<^const>HOL.implies"
###             ("_applC" ("_position" unitary) ("_position" P))
###             ("\<^const>HOL.implies"
###               ("_applC" ("_position" unitary) ("_position" Q))
###               ("\<^const>HOL.implies"
###                 ("\<^const>Expectations.entails" ("_position" P)
###                   ("_position" Q))
###                 ("_applC" ("_position" t) ("_position" P))))))
###         ("_applC" ("_position" t) ("_position" Q))))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.iff"
###     ("_applC" ("_position" nearly_healthy) ("_position" t))
###     ("\<^const>HOL.conj"
###       ("\<^const>HOL.All_binder" ("_position" P)
###         ("\<^const>HOL.implies"
###           ("_applC" ("_position" unitary) ("_position" P))
###           ("_applC" ("_position" unitary)
###             ("_applC" ("_position" t) ("_position" P)))))
###       ("\<^const>HOL.All_binder" ("_idts" ("_position" P) ("_position" Q))
###         ("\<^const>Expectations.entails"
###           ("\<^const>HOL.implies"
###             ("_applC" ("_position" unitary) ("_position" P))
###             ("\<^const>HOL.implies"
###               ("_applC" ("_position" unitary) ("_position" Q))
###               ("\<^const>HOL.implies"
###                 ("\<^const>Expectations.entails" ("_position" P)
###                   ("_position" Q))
###                 ("_applC" ("_position" t) ("_position" P)))))
###           ("_applC" ("_position" t) ("_position" Q)))))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.iff"
###     ("_applC" ("_position" nearly_healthy) ("_position" t))
###     ("\<^const>HOL.conj"
###       ("\<^const>HOL.All_binder" ("_position" P)
###         ("\<^const>HOL.implies"
###           ("_applC" ("_position" unitary) ("_position" P))
###           ("_applC" ("_position" unitary)
###             ("_applC" ("_position" t) ("_position" P)))))
###       ("\<^const>HOL.All_binder" ("_idts" ("_position" P) ("_position" Q))
###         ("\<^const>HOL.implies"
###           ("_applC" ("_position" unitary) ("_position" P))
###           ("\<^const>Expectations.entails"
###             ("\<^const>HOL.implies"
###               ("\<^const>Expectations.entails"
###                 ("\<^const>HOL.implies"
###                   ("_applC" ("_position" unitary) ("_position" Q))
###                   ("_position" P))
###                 ("_position" Q))
###               ("_applC" ("_position" t) ("_position" P)))
###             ("_applC" ("_position" t) ("_position" Q))))))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.iff"
###     ("_applC" ("_position" nearly_healthy) ("_position" t))
###     ("\<^const>HOL.conj"
###       ("\<^const>HOL.All_binder" ("_position" P)
###         ("\<^const>HOL.implies"
###           ("_applC" ("_position" unitary) ("_position" P))
###           ("_applC" ("_position" unitary)
###             ("_applC" ("_position" t) ("_position" P)))))
###       ("\<^const>Expectations.entails"
###         ("\<^const>HOL.All_binder" ("_idts" ("_position" P) ("_position" Q))
###           ("\<^const>HOL.implies"
###             ("_applC" ("_position" unitary) ("_position" P))
###             ("\<^const>HOL.implies"
###               ("\<^const>Expectations.entails"
###                 ("\<^const>HOL.implies"
###                   ("_applC" ("_position" unitary) ("_position" Q))
###                   ("_position" P))
###                 ("_position" Q))
###               ("_applC" ("_position" t) ("_position" P)))))
###         ("_applC" ("_position" t) ("_position" Q))))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.iff"
###     ("_applC" ("_position" nearly_healthy) ("_position" t))
###     ("\<^const>HOL.conj"
###       ("\<^const>HOL.All_binder" ("_position" P)
###         ("\<^const>HOL.implies"
###           ("_applC" ("_position" unitary) ("_position" P))
###           ("_applC" ("_position" unitary)
###             ("_applC" ("_position" t) ("_position" P)))))
###       ("\<^const>HOL.All_binder" ("_idts" ("_position" P) ("_position" Q))
###         ("\<^const>Expectations.entails"
###           ("\<^const>HOL.implies"
###             ("_applC" ("_position" unitary) ("_position" P))
###             ("\<^const>HOL.implies"
###               ("\<^const>Expectations.entails"
###                 ("\<^const>HOL.implies"
###                   ("_applC" ("_position" unitary) ("_position" Q))
###                   ("_position" P))
###                 ("_position" Q))
###               ("_applC" ("_position" t) ("_position" P))))
###           ("_applC" ("_position" t) ("_position" Q)))))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.iff"
###     ("_applC" ("_position" nearly_healthy) ("_position" t))
###     ("\<^const>HOL.conj"
###       ("\<^const>HOL.All_binder" ("_position" P)
###         ("\<^const>HOL.implies"
###           ("_applC" ("_position" unitary) ("_position" P))
###           ("_applC" ("_position" unitary)
###             ("_applC" ("_position" t) ("_position" P)))))
###       ("\<^const>Expectations.entails"
###         ("\<^const>HOL.implies"
###           ("\<^const>Expectations.entails"
###             ("\<^const>HOL.All_binder"
###               ("_idts" ("_position" P) ("_position" Q))
###               ("\<^const>HOL.implies"
###                 ("_applC" ("_position" unitary) ("_position" P))
###                 ("\<^const>HOL.implies"
###                   ("_applC" ("_position" unitary) ("_position" Q))
###                   ("_position" P))))
###             ("_position" Q))
###           ("_applC" ("_position" t) ("_position" P)))
###         ("_applC" ("_position" t) ("_position" Q))))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.iff"
###     ("_applC" ("_position" nearly_healthy) ("_position" t))
###     ("\<^const>HOL.conj"
###       ("\<^const>HOL.All_binder" ("_position" P)
###         ("\<^const>HOL.implies"
###           ("_applC" ("_position" unitary) ("_position" P))
###           ("_applC" ("_position" unitary)
###             ("_applC" ("_position" t) ("_position" P)))))
###       ("\<^const>Expectations.entails"
###         ("\<^const>HOL.All_binder" ("_idts" ("_position" P) ("_position" Q))
###           ("\<^const>HOL.implies"
###             ("\<^const>Expectations.entails"
###               ("\<^const>HOL.implies"
###                 ("_applC" ("_position" unitary) ("_position" P))
###                 ("\<^const>HOL.implies"
###                   ("_applC" ("_position" unitary) ("_position" Q))
###                   ("_position" P)))
###               ("_position" Q))
###             ("_applC" ("_position" t) ("_position" P))))
###         ("_applC" ("_position" t) ("_position" Q))))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.iff"
###     ("_applC" ("_position" nearly_healthy) ("_position" t))
###     ("\<^const>HOL.conj"
###       ("\<^const>HOL.All_binder" ("_position" P)
###         ("\<^const>HOL.implies"
###           ("_applC" ("_position" unitary) ("_position" P))
###           ("_applC" ("_position" unitary)
###             ("_applC" ("_position" t) ("_position" P)))))
###       ("\<^const>HOL.All_binder" ("_idts" ("_position" P) ("_position" Q))
###         ("\<^const>Expectations.entails"
###           ("\<^const>HOL.implies"
###             ("\<^const>Expectations.entails"
###               ("\<^const>HOL.implies"
###                 ("_applC" ("_position" unitary) ("_position" P))
###                 ("\<^const>HOL.implies"
###                   ("_applC" ("_position" unitary) ("_position" Q))
###                   ("_position" P)))
###               ("_position" Q))
###             ("_applC" ("_position" t) ("_position" P)))
###           ("_applC" ("_position" t) ("_position" Q)))))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 787 of "$AFP/pGCL/Transformers.thy") produces 2 parse trees:
### ("_bigimpl"
###   ("_asm"
###     ("\<^const>Pure.all_binder" ("_idts" ("_position" P) ("_position" Q))
###       ("_bigimpl"
###         ("_asms"
###           ("\<^const>HOL.Trueprop"
###             ("_applC" ("_position" sound) ("_position" P)))
###           ("_asm"
###             ("\<^const>HOL.Trueprop"
###               ("_applC" ("_position" sound) ("_position" Q)))))
###         ("\<^const>HOL.Trueprop"
###           ("\<^const>Expectations.entails"
###             ("_lambda" ("_position" s)
###               ("\<^const>Groups.plus_class.plus"
###                 ("_applC" ("_position" t)
###                   ("_cargs" ("_position" P) ("_position" s)))
###                 ("_applC" ("_position" t)
###                   ("_cargs" ("_position" Q) ("_position" s)))))
###             ("_applC" ("_position" t)
###               ("_lambda" ("_position" s)
###                 ("\<^const>Groups.plus_class.plus"
###                   ("_applC" ("_position" P) ("_position" s))
###                   ("_applC" ("_position" Q) ("_position" s))))))))))
###   ("\<^const>HOL.Trueprop"
###     ("_applC" ("_position" sub_add) ("_position" t))))
### ("_bigimpl"
###   ("_asm"
###     ("\<^const>Pure.all_binder" ("_idts" ("_position" P) ("_position" Q))
###       ("_bigimpl"
###         ("_asms"
###           ("\<^const>HOL.Trueprop"
###             ("_applC" ("_position" sound) ("_position" P)))
###           ("_asm"
###             ("\<^const>HOL.Trueprop"
###               ("_applC" ("_position" sound) ("_position" Q)))))
###         ("\<^const>HOL.Trueprop"
###           ("_lambda" ("_position" s)
###             ("\<^const>Expectations.entails"
###               ("\<^const>Groups.plus_class.plus"
###                 ("_applC" ("_position" t)
###                   ("_cargs" ("_position" P) ("_position" s)))
###                 ("_applC" ("_position" t)
###                   ("_cargs" ("_position" Q) ("_position" s))))
###               ("_applC" ("_position" t)
###                 ("_lambda" ("_position" s)
###                   ("\<^const>Groups.plus_class.plus"
###                     ("_applC" ("_position" P) ("_position" s))
###                     ("_applC" ("_position" Q) ("_position" s)))))))))))
###   ("\<^const>HOL.Trueprop"
###     ("_applC" ("_position" sub_add) ("_position" t))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 958 of "$AFP/pGCL/Transformers.thy") produces 2 parse trees:
### ("_bigimpl"
###   ("_asm"
###     ("\<^const>Pure.all_binder" ("_position" P)
###       ("\<^const>Pure.imp"
###         ("\<^const>HOL.Trueprop"
###           ("_applC" ("_position" sound) ("_position" P)))
###         ("\<^const>HOL.Trueprop"
###           ("\<^const>Expectations.entails"
###             ("_lambda" ("_position" s)
###               ("\<^const>Misc.tminus"
###                 ("_applC" ("_position" t)
###                   ("_cargs" ("_position" P) ("_position" s)))
###                 ("\<^const>Groups.one_class.one")))
###             ("_applC" ("_position" t)
###               ("_lambda" ("_position" s)
###                 ("\<^const>Misc.tminus"
###                   ("_applC" ("_position" P) ("_position" s))
###                   ("\<^const>Groups.one_class.one")))))))))
###   ("\<^const>HOL.Trueprop"
###     ("_applC" ("_position" sub_distrib) ("_position" t))))
### ("_bigimpl"
###   ("_asm"
###     ("\<^const>Pure.all_binder" ("_position" P)
###       ("\<^const>Pure.imp"
###         ("\<^const>HOL.Trueprop"
###           ("_applC" ("_position" sound) ("_position" P)))
###         ("\<^const>HOL.Trueprop"
###           ("_lambda" ("_position" s)
###             ("\<^const>Expectations.entails"
###               ("\<^const>Misc.tminus"
###                 ("_applC" ("_position" t)
###                   ("_cargs" ("_position" P) ("_position" s)))
###                 ("\<^const>Groups.one_class.one"))
###               ("_applC" ("_position" t)
###                 ("_lambda" ("_position" s)
###                   ("\<^const>Misc.tminus"
###                     ("_applC" ("_position" P) ("_position" s))
###                     ("\<^const>Groups.one_class.one"))))))))))
###   ("\<^const>HOL.Trueprop"
###     ("_applC" ("_position" sub_distrib) ("_position" t))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 1101 of "$AFP/pGCL/Transformers.thy") produces 3 parse trees:
### ("\<^const>Pure.eq" ("_applC" ("_position" sub_conj) ("_position" t))
###   ("\<^const>Expectations.entails"
###     ("\<^const>HOL.All_binder" ("_idts" ("_position" P) ("_position" Q))
###       ("\<^const>HOL.implies"
###         ("\<^const>HOL.conj" ("_applC" ("_position" sound) ("_position" P))
###           ("_applC" ("_position" sound) ("_position" Q)))
###         ("\<^const>Expectations.exp_conj"
###           ("_applC" ("_position" t) ("_position" P))
###           ("_applC" ("_position" t) ("_position" Q)))))
###     ("_applC" ("_position" t)
###       ("\<^const>Expectations.exp_conj" ("_position" P) ("_position" Q)))))
### ("\<^const>Pure.eq" ("_applC" ("_position" sub_conj) ("_position" t))
###   ("\<^const>HOL.All_binder" ("_idts" ("_position" P) ("_position" Q))
###     ("\<^const>Expectations.entails"
###       ("\<^const>HOL.implies"
###         ("\<^const>HOL.conj" ("_applC" ("_position" sound) ("_position" P))
###           ("_applC" ("_position" sound) ("_position" Q)))
###         ("\<^const>Expectations.exp_conj"
###           ("_applC" ("_position" t) ("_position" P))
###           ("_applC" ("_position" t) ("_position" Q))))
###       ("_applC" ("_position" t)
###         ("\<^const>Expectations.exp_conj" ("_position" P)
###           ("_position" Q))))))
### ("\<^const>Pure.eq" ("_applC" ("_position" sub_conj) ("_position" t))
###   ("\<^const>HOL.All_binder" ("_idts" ("_position" P) ("_position" Q))
###     ("\<^const>HOL.implies"
###       ("\<^const>HOL.conj" ("_applC" ("_position" sound) ("_position" P))
###         ("_applC" ("_position" sound) ("_position" Q)))
###       ("\<^const>Expectations.entails"
###         ("\<^const>Expectations.exp_conj"
###           ("_applC" ("_position" t) ("_position" P))
###           ("_applC" ("_position" t) ("_position" Q)))
###         ("_applC" ("_position" t)
###           ("\<^const>Expectations.exp_conj" ("_position" P)
###             ("_position" Q)))))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### theory "Draft.Transformers"
### 0.481s elapsed time, 0.577s cpu time, 0.120s GC time
Loading theory "Draft.Induction" (required by "Draft.LoopInductionMoreTemplates" via "Draft.LoopInduction" via "Draft.Healthiness" via "Draft.Embedding")
### Ambiguous input (line 265 of "$AFP/pGCL/Induction.thy") produces 5 parse trees:
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("_Ball" ("_position" t) ("_position" S)
###         ("\<^const>HOL.All_binder" ("_position" P)
###           ("\<^const>HOL.implies"
###             ("_applC" ("_position" nneg) ("_position" P))
###             ("\<^const>HOL.implies"
###               ("_applC" ("_position" bounded_by)
###                 ("_cargs" ("_position" b) ("_position" P)))
###               ("\<^const>Expectations.entails"
###                 ("_applC" ("_position" t) ("_position" P))
###                 ("_applC" ("_position" u) ("_position" P))))))))
###     ("_asms"
###       ("\<^const>HOL.Trueprop"
###         ("_Ball" ("_position" u) ("_position" S)
###           ("\<^const>HOL.All_binder" ("_position" P)
###             ("\<^const>HOL.implies"
###               ("\<^const>HOL.conj"
###                 ("_applC" ("_position" nneg) ("_position" P))
###                 ("_applC" ("_position" bounded_by)
###                   ("_cargs" ("_position" b) ("_position" P))))
###               ("\<^const>HOL.conj"
###                 ("_applC" ("_position" nneg)
###                   ("_applC" ("_position" u) ("_position" P)))
###                 ("_applC" ("_position" bounded_by)
###                   ("_cargs" ("_position" b)
###                     ("_applC" ("_position" u) ("_position" P)))))))))
###       ("_asms"
###         ("\<^const>HOL.Trueprop"
###           ("_applC" ("_position" nneg) ("_position" P)))
###         ("_asms"
###           ("\<^const>HOL.Trueprop"
###             ("_applC" ("_position" bounded_by)
###               ("_cargs" ("_position" b) ("_position" P))))
###           ("_asm"
###             ("\<^const>Pure.all_binder" ("_position" P)
###               ("_bigimpl"
###                 ("_asms"
###                   ("\<^const>HOL.Trueprop"
###                     ("_applC" ("_position" nneg) ("_position" P)))
###                   ("_asm"
###                     ("\<^const>HOL.Trueprop"
###                       ("_applC" ("_position" bounded_by)
###                         ("_cargs" ("_position" b) ("_position" P))))))
###                 ("\<^const>HOL.Trueprop"
###                   ("_applC" ("_position" nneg)
###                     ("_applC" ("_position" u) ("_position" P)))))))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Expectations.entails"
###       ("_applC" ("_position" Sup_trans)
###         ("_cargs" ("_position" S) ("_position" P)))
###       ("_applC" ("_position" u) ("_position" P)))))
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("_Ball" ("_position" t) ("_position" S)
###         ("\<^const>HOL.All_binder" ("_position" P)
###           ("\<^const>HOL.implies"
###             ("_applC" ("_position" nneg) ("_position" P))
###             ("\<^const>Expectations.entails"
###               ("\<^const>HOL.implies"
###                 ("_applC" ("_position" bounded_by)
###                   ("_cargs" ("_position" b) ("_position" P)))
###                 ("_applC" ("_position" t) ("_position" P)))
###               ("_applC" ("_position" u) ("_position" P)))))))
###     ("_asms"
###       ("\<^const>HOL.Trueprop"
###         ("_Ball" ("_position" u) ("_position" S)
###           ("\<^const>HOL.All_binder" ("_position" P)
###             ("\<^const>HOL.implies"
###               ("\<^const>HOL.conj"
###                 ("_applC" ("_position" nneg) ("_position" P))
###                 ("_applC" ("_position" bounded_by)
###                   ("_cargs" ("_position" b) ("_position" P))))
###               ("\<^const>HOL.conj"
###                 ("_applC" ("_position" nneg)
###                   ("_applC" ("_position" u) ("_position" P)))
###                 ("_applC" ("_position" bounded_by)
###                   ("_cargs" ("_position" b)
###                     ("_applC" ("_position" u) ("_position" P)))))))))
###       ("_asms"
###         ("\<^const>HOL.Trueprop"
###           ("_applC" ("_position" nneg) ("_position" P)))
###         ("_asms"
###           ("\<^const>HOL.Trueprop"
###             ("_applC" ("_position" bounded_by)
###               ("_cargs" ("_position" b) ("_position" P))))
###           ("_asm"
###             ("\<^const>Pure.all_binder" ("_position" P)
###               ("_bigimpl"
###                 ("_asms"
###                   ("\<^const>HOL.Trueprop"
###                     ("_applC" ("_position" nneg) ("_position" P)))
###                   ("_asm"
###                     ("\<^const>HOL.Trueprop"
###                       ("_applC" ("_position" bounded_by)
###                         ("_cargs" ("_position" b) ("_position" P))))))
###                 ("\<^const>HOL.Trueprop"
###                   ("_applC" ("_position" nneg)
###                     ("_applC" ("_position" u) ("_position" P)))))))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Expectations.entails"
###       ("_applC" ("_position" Sup_trans)
###         ("_cargs" ("_position" S) ("_position" P)))
###       ("_applC" ("_position" u) ("_position" P)))))
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("_Ball" ("_position" t) ("_position" S)
###         ("\<^const>HOL.All_binder" ("_position" P)
###           ("\<^const>Expectations.entails"
###             ("\<^const>HOL.implies"
###               ("_applC" ("_position" nneg) ("_position" P))
###               ("\<^const>HOL.implies"
###                 ("_applC" ("_position" bounded_by)
###                   ("_cargs" ("_position" b) ("_position" P)))
###                 ("_applC" ("_position" t) ("_position" P))))
###             ("_applC" ("_position" u) ("_position" P))))))
###     ("_asms"
###       ("\<^const>HOL.Trueprop"
###         ("_Ball" ("_position" u) ("_position" S)
###           ("\<^const>HOL.All_binder" ("_position" P)
###             ("\<^const>HOL.implies"
###               ("\<^const>HOL.conj"
###                 ("_applC" ("_position" nneg) ("_position" P))
###                 ("_applC" ("_position" bounded_by)
###                   ("_cargs" ("_position" b) ("_position" P))))
###               ("\<^const>HOL.conj"
###                 ("_applC" ("_position" nneg)
###                   ("_applC" ("_position" u) ("_position" P)))
###                 ("_applC" ("_position" bounded_by)
###                   ("_cargs" ("_position" b)
###                     ("_applC" ("_position" u) ("_position" P)))))))))
###       ("_asms"
###         ("\<^const>HOL.Trueprop"
###           ("_applC" ("_position" nneg) ("_position" P)))
###         ("_asms"
###           ("\<^const>HOL.Trueprop"
###             ("_applC" ("_position" bounded_by)
###               ("_cargs" ("_position" b) ("_position" P))))
###           ("_asm"
###             ("\<^const>Pure.all_binder" ("_position" P)
###               ("_bigimpl"
###                 ("_asms"
###                   ("\<^const>HOL.Trueprop"
###                     ("_applC" ("_position" nneg) ("_position" P)))
###                   ("_asm"
###                     ("\<^const>HOL.Trueprop"
###                       ("_applC" ("_position" bounded_by)
###                         ("_cargs" ("_position" b) ("_position" P))))))
###                 ("\<^const>HOL.Trueprop"
###                   ("_applC" ("_position" nneg)
###                     ("_applC" ("_position" u) ("_position" P)))))))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Expectations.entails"
###       ("_applC" ("_position" Sup_trans)
###         ("_cargs" ("_position" S) ("_position" P)))
###       ("_applC" ("_position" u) ("_position" P)))))
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>Expectations.entails"
###         ("_Ball" ("_position" t) ("_position" S)
###           ("\<^const>HOL.All_binder" ("_position" P)
###             ("\<^const>HOL.implies"
###               ("_applC" ("_position" nneg) ("_position" P))
###               ("\<^const>HOL.implies"
###                 ("_applC" ("_position" bounded_by)
###                   ("_cargs" ("_position" b) ("_position" P)))
###                 ("_applC" ("_position" t) ("_position" P))))))
###         ("_applC" ("_position" u) ("_position" P))))
###     ("_asms"
###       ("\<^const>HOL.Trueprop"
###         ("_Ball" ("_position" u) ("_position" S)
###           ("\<^const>HOL.All_binder" ("_position" P)
###             ("\<^const>HOL.implies"
###               ("\<^const>HOL.conj"
###                 ("_applC" ("_position" nneg) ("_position" P))
###                 ("_applC" ("_position" bounded_by)
###                   ("_cargs" ("_position" b) ("_position" P))))
###               ("\<^const>HOL.conj"
###                 ("_applC" ("_position" nneg)
###                   ("_applC" ("_position" u) ("_position" P)))
###                 ("_applC" ("_position" bounded_by)
###                   ("_cargs" ("_position" b)
###                     ("_applC" ("_position" u) ("_position" P)))))))))
###       ("_asms"
###         ("\<^const>HOL.Trueprop"
###           ("_applC" ("_position" nneg) ("_position" P)))
###         ("_asms"
###           ("\<^const>HOL.Trueprop"
###             ("_applC" ("_position" bounded_by)
###               ("_cargs" ("_position" b) ("_position" P))))
###           ("_asm"
###             ("\<^const>Pure.all_binder" ("_position" P)
###               ("_bigimpl"
###                 ("_asms"
###                   ("\<^const>HOL.Trueprop"
###                     ("_applC" ("_position" nneg) ("_position" P)))
###                   ("_asm"
###                     ("\<^const>HOL.Trueprop"
###                       ("_applC" ("_position" bounded_by)
###                         ("_cargs" ("_position" b) ("_position" P))))))
###                 ("\<^const>HOL.Trueprop"
###                   ("_applC" ("_position" nneg)
###                     ("_applC" ("_position" u) ("_position" P)))))))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Expectations.entails"
###       ("_applC" ("_position" Sup_trans)
###         ("_cargs" ("_position" S) ("_position" P)))
###       ("_applC" ("_position" u) ("_position" P)))))
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("_Ball" ("_position" t) ("_position" S)
###         ("\<^const>Expectations.entails"
###           ("\<^const>HOL.All_binder" ("_position" P)
###             ("\<^const>HOL.implies"
###               ("_applC" ("_position" nneg) ("_position" P))
###               ("\<^const>HOL.implies"
###                 ("_applC" ("_position" bounded_by)
###                   ("_cargs" ("_position" b) ("_position" P)))
###                 ("_applC" ("_position" t) ("_position" P)))))
###           ("_applC" ("_position" u) ("_position" P)))))
###     ("_asms"
###       ("\<^const>HOL.Trueprop"
###         ("_Ball" ("_position" u) ("_position" S)
###           ("\<^const>HOL.All_binder" ("_position" P)
###             ("\<^const>HOL.implies"
###               ("\<^const>HOL.conj"
###                 ("_applC" ("_position" nneg) ("_position" P))
###                 ("_applC" ("_position" bounded_by)
###                   ("_cargs" ("_position" b) ("_position" P))))
###               ("\<^const>HOL.conj"
###                 ("_applC" ("_position" nneg)
###                   ("_applC" ("_position" u) ("_position" P)))
###                 ("_applC" ("_position" bounded_by)
###                   ("_cargs" ("_position" b)
###                     ("_applC" ("_position" u) ("_position" P)))))))))
###       ("_asms"
###         ("\<^const>HOL.Trueprop"
###           ("_applC" ("_position" nneg) ("_position" P)))
###         ("_asms"
###           ("\<^const>HOL.Trueprop"
###             ("_applC" ("_position" bounded_by)
###               ("_cargs" ("_position" b) ("_position" P))))
###           ("_asm"
###             ("\<^const>Pure.all_binder" ("_position" P)
###               ("_bigimpl"
###                 ("_asms"
###                   ("\<^const>HOL.Trueprop"
###                     ("_applC" ("_position" nneg) ("_position" P)))
###                   ("_asm"
###                     ("\<^const>HOL.Trueprop"
###                       ("_applC" ("_position" bounded_by)
###                         ("_cargs" ("_position" b) ("_position" P))))))
###                 ("\<^const>HOL.Trueprop"
###                   ("_applC" ("_position" nneg)
###                     ("_applC" ("_position" u) ("_position" P)))))))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Expectations.entails"
###       ("_applC" ("_position" Sup_trans)
###         ("_cargs" ("_position" S) ("_position" P)))
###       ("_applC" ("_position" u) ("_position" P)))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### theory "Draft.Induction"
### 0.306s elapsed time, 0.350s cpu time, 0.060s GC time
Loading theory "Draft.Embedding" (required by "Draft.LoopInductionMoreTemplates" via "Draft.LoopInduction" via "Draft.Healthiness")
consts
  repeat ::
    "nat
     => (bool => ('a => real) => 'a => real)
        => bool => ('a => real) => 'a => real"
val assign_tr = fn: 'a -> term list -> term
val set_pc_tr = fn: 'a -> term list -> term
val set_dc_tr = fn: 'a -> term list -> term
### theory "Draft.Embedding"
### 0.224s elapsed time, 0.250s cpu time, 0.037s GC time
Loading theory "Draft.Healthiness" (required by "Draft.LoopInductionMoreTemplates" via "Draft.LoopInduction")
### Ambiguous input (line 696 of "$AFP/pGCL/Healthiness.thy") produces 2 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Expectations.entails"
###     ("_lambda" ("_position" s)
###       ("\<^const>Groups.plus_class.plus"
###         ("\<^const>Groups.times_class.times"
###           ("_applC" ("\<^const>Expectations.embed_bool" ("_position" G))
###             ("_position" s))
###           ("_applC" ("_position" wp)
###             ("_cargs" ("_position" body)
###               ("_cargs"
###                 ("_lambda" ("_position" s)
###                   ("_applC" ("_position" bound_of) ("_position" P)))
###                 ("_position" s)))))
###         ("\<^const>Groups.times_class.times"
###           ("_applC"
###             ("\<^const>Expectations.embed_bool"
###               ("_applC" ("\<^const>Expectations.negate") ("_position" G)))
###             ("_position" s))
###           ("_applC" ("_position" P) ("_position" s)))))
###     ("_lambda" ("_position" s)
###       ("_applC" ("_position" bound_of) ("_position" P)))))
### ("\<^const>HOL.Trueprop"
###   ("_lambda" ("_position" s)
###     ("\<^const>Expectations.entails"
###       ("\<^const>Groups.plus_class.plus"
###         ("\<^const>Groups.times_class.times"
###           ("_applC" ("\<^const>Expectations.embed_bool" ("_position" G))
###             ("_position" s))
###           ("_applC" ("_position" wp)
###             ("_cargs" ("_position" body)
###               ("_cargs"
###                 ("_lambda" ("_position" s)
###                   ("_applC" ("_position" bound_of) ("_position" P)))
###                 ("_position" s)))))
###         ("\<^const>Groups.times_class.times"
###           ("_applC"
###             ("\<^const>Expectations.embed_bool"
###               ("_applC" ("\<^const>Expectations.negate") ("_position" G)))
###             ("_position" s))
###           ("_applC" ("_position" P) ("_position" s))))
###       ("_lambda" ("_position" s)
###         ("_applC" ("_position" bound_of) ("_position" P))))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 714 of "$AFP/pGCL/Healthiness.thy") produces 2 parse trees:
### ("\<^const>Pure.all_binder" ("_position" R)
###   ("\<^const>Pure.imp"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>Expectations.entails"
###         ("_lambda" ("_position" s)
###           ("\<^const>Groups.plus_class.plus"
###             ("\<^const>Groups.times_class.times"
###               ("_applC" ("\<^const>Expectations.embed_bool" ("_position" G))
###                 ("_position" s))
###               ("_applC" ("_position" wp)
###                 ("_cargs" ("_position" body)
###                   ("_cargs" ("_position" R) ("_position" s)))))
###             ("\<^const>Groups.times_class.times"
###               ("_applC"
###                 ("\<^const>Expectations.embed_bool"
###                   ("_applC" ("\<^const>Expectations.negate")
###                     ("_position" G)))
###                 ("_position" s))
###               ("_applC" ("_position" P) ("_position" s)))))
###         ("_position" R)))
###     ("\<^const>Pure.imp"
###       ("\<^const>HOL.Trueprop"
###         ("_applC" ("_position" sound) ("_position" R)))
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Expectations.entails" ("_position" Q)
###           ("_position" R))))))
### ("\<^const>Pure.all_binder" ("_position" R)
###   ("\<^const>Pure.imp"
###     ("\<^const>HOL.Trueprop"
###       ("_lambda" ("_position" s)
###         ("\<^const>Expectations.entails"
###           ("\<^const>Groups.plus_class.plus"
###             ("\<^const>Groups.times_class.times"
###               ("_applC" ("\<^const>Expectations.embed_bool" ("_position" G))
###                 ("_position" s))
###               ("_applC" ("_position" wp)
###                 ("_cargs" ("_position" body)
###                   ("_cargs" ("_position" R) ("_position" s)))))
###             ("\<^const>Groups.times_class.times"
###               ("_applC"
###                 ("\<^const>Expectations.embed_bool"
###                   ("_applC" ("\<^const>Expectations.negate")
###                     ("_position" G)))
###                 ("_position" s))
###               ("_applC" ("_position" P) ("_position" s))))
###           ("_position" R))))
###     ("\<^const>Pure.imp"
###       ("\<^const>HOL.Trueprop"
###         ("_applC" ("_position" sound) ("_position" R)))
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Expectations.entails" ("_position" Q)
###           ("_position" R))))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### theory "Draft.Healthiness"
### 0.218s elapsed time, 0.273s cpu time, 0.077s GC time
Loading theory "Draft.Continuity" (required by "Draft.LoopInductionMoreTemplates" via "Draft.LoopInduction")
(?x : closure ?S) = (ALL e>0. EX y:?S. dist y ?x < e)
### theory "Draft.Continuity"
### 0.205s elapsed time, 0.276s cpu time, 0.097s GC time
Loading theory "Draft.LoopInduction" (required by "Draft.LoopInductionMoreTemplates")
### theory "Draft.LoopInduction"
### 0.135s elapsed time, 0.135s cpu time, 0.000s GC time
Loading theory "Draft.LoopInductionMoreTemplates"
val templateLemmas =
   [("LoopInduction.cts_intros", "bd_cts (wp (Apply ?f))",
     template_predicate
      (
         template_app
          (template_hole 2,
           template_app
            (template_hole 1,
             template_app (template_hole 0, template_var 0)))
         )),
    ("LoopInduction.iterates_0", "iterates ?body ?G 0 = (%P s. 0)",
     template_equation
      (template_app
        (template_app
          (template_app (template_hole 2, template_var 1), template_var 0),
         template_hole 1),
       t_empty)),
    ("LoopInduction.cts_intros", "bd_cts ?t ==> bd_cts (wp (Embed ?t))",
     template_implication
      ([template_predicate
         (template_app (template_hole 2, template_var 0))],
       template_predicate
        (
           template_app
            (template_hole 2,
             template_app
              (template_hole 1,
               template_app (template_hole 0, template_var 0)))
           ))),
    ("LoopInduction.iterates_healthy",
     "healthy (wp ?body) ==> healthy (iterates ?body ?G ?i)",
     template_implication
      ([template_predicate
         (
            template_app
             (template_hole 2,
              template_app (template_hole 1, template_var 2))
            )],
       template_predicate
        (
           template_app
            (template_hole 2,
             template_app
              (template_app
                (template_app (template_hole 0, template_var 2),
                 template_var 1),
               template_var 0))
           ))),
    ("LoopInduction.cts_intros",
     "(!!s. bd_cts (wp (?a (?f s)))) ==> bd_cts (wp (Bind ?f ?a))",
     template_implication
      ([template_predicate (template_app (template_hole 4, t_empty))],
       template_predicate
        (
           template_app
            (template_hole 2,
             template_app
              (template_hole 1,
               template_app
                (template_app (template_hole 0, template_var 0),
                 template_var 1)))
           ))),
    ("LoopInduction.iterates_increasing",
     "healthy (wp ?body) ==>
      le_trans (iterates ?body ?G ?i) (iterates ?body ?G (Suc ?i))",
     template_implication
      ([template_predicate
         (
            template_app
             (template_hole 4,
              template_app (template_hole 3, template_var 2))
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 2,
               template_app
                (template_app
                  (template_app (template_hole 1, template_var 2),
                   template_var 1),
                 template_var 0)),
             template_app
              (template_app
                (template_app (template_hole 1, template_var 2),
                 template_var 1),
               template_app (template_hole 0, template_var 0)))
           ))),
    ("LoopInduction.cts_intros",
     "[| bd_cts (wp ?a); healthy (wp ?a) |] ==> bd_cts (wp (repeat ?n ?a))",
     template_implication
      ([template_predicate
         (
            template_app
             (template_hole 3,
              template_app (template_hole 2, template_var 1))
            ),
        template_predicate
         (
            template_app
             (template_hole 1,
              template_app (template_hole 2, template_var 1))
            )],
       template_predicate
        (
           template_app
            (template_hole 3,
             template_app
              (template_hole 2,
               template_app
                (template_app (template_hole 0, template_var 0),
                 template_var 1)))
           ))),
    ("LoopInduction.cts_iterates",
     "[| healthy (wp ?body); bd_cts (wp ?body) |]
      ==> bd_cts (iterates ?body ?G ?i)",
     template_implication
      ([template_predicate
         (
            template_app
             (template_hole 3,
              template_app (template_hole 2, template_var 2))
            ),
        template_predicate
         (
            template_app
             (template_hole 1,
              template_app (template_hole 2, template_var 2))
            )],
       template_predicate
        (
           template_app
            (template_hole 1,
             template_app
              (template_app
                (template_app (template_hole 0, template_var 2),
                 template_var 1),
               template_var 0))
           ))),
    ("LoopInduction.iterates_Suc",
     "iterates ?body ?G (Suc ?i) =
      wp (?body ;;
          Embed
           (iterates ?body ?G
             ?i) \<^bsub>\<guillemotleft> ?G \<guillemotright>\<^esub>\<oplus> Skip)",
     template_equation
      (template_app
        (template_app
          (template_app (template_hole 7, template_var 2), template_var 1),
         template_app (template_hole 6, template_var 0)),
       template_app
        (template_hole 5,
         template_app
          (template_app
            (template_app
              (template_hole 4,
               template_app
                (template_app (template_hole 3, template_var 2),
                 template_app
                  (template_hole 2,
                   template_app
                    (template_app
                      (template_app (template_hole 7, template_var 2),
                       template_var 1),
                     template_var 0)))),
             template_app (template_hole 1, template_var 1)),
           template_hole 0)))),
    ("LoopInduction.cts_intros",
     "[| bd_cts (wp ?a); bd_cts (wp ?b); healthy (wp ?b) |]
      ==> bd_cts (wp (?a ;; ?b))",
     template_implication
      ([template_predicate
         (
            template_app
             (template_hole 3,
              template_app (template_hole 2, template_var 1))
            ),
        template_predicate
         (
            template_app
             (template_hole 3,
              template_app (template_hole 2, template_var 0))
            ),
        template_predicate
         (
            template_app
             (template_hole 1,
              template_app (template_hole 2, template_var 0))
            )],
       template_predicate
        (
           template_app
            (template_hole 3,
             template_app
              (template_hole 2,
               template_app
                (template_app (template_hole 0, template_var 1),
                 template_var 0)))
           ))),
    ("LoopInduction.cts_wp_loop",
     "[| healthy (wp ?body); bd_cts (wp ?body) |]
      ==> bd_cts
           (wp (\<mu>x.
                   ?body ;;
                   x \<^bsub>\<guillemotleft> ?G \<guillemotright>\<^esub>\<oplus> Skip))",
     template_implication
      ([template_predicate
         (
            template_app
             (template_hole 7,
              template_app (template_hole 6, template_var 1))
            ),
        template_predicate
         (
            template_app
             (template_hole 5,
              template_app (template_hole 6, template_var 1))
            )],
       template_predicate
        (
           template_app
            (template_hole 5,
             template_app
              (template_hole 6, template_app (template_hole 4, t_empty)))
           ))),
    ("LoopInduction.cts_intros",
     "[| bd_cts (wp ?a); bd_cts (wp ?b); healthy (wp ?a); healthy (wp ?b) |]
      ==> bd_cts (wp (?a \<Sqinter> ?b))",
     template_implication
      ([template_predicate
         (
            template_app
             (template_hole 3,
              template_app (template_hole 2, template_var 1))
            ),
        template_predicate
         (
            template_app
             (template_hole 3,
              template_app (template_hole 2, template_var 0))
            ),
        template_predicate
         (
            template_app
             (template_hole 1,
              template_app (template_hole 2, template_var 1))
            ),
        template_predicate
         (
            template_app
             (template_hole 1,
              template_app (template_hole 2, template_var 0))
            )],
       template_predicate
        (
           template_app
            (template_hole 3,
             template_app
              (template_hole 2,
               template_app
                (template_app (template_hole 0, template_var 1),
                 template_var 0)))
           ))),
    ("LoopInduction.lfp_iterates",
     "[| healthy (wp ?body); bd_cts (wp ?body) |]
      ==> equiv_trans
           (wp (\<mu>x.
                   ?body ;;
                   x \<^bsub>\<guillemotleft> ?G \<guillemotright>\<^esub>\<oplus> Skip))
           (Sup_trans (range (iterates ?body ?G)))",
     template_implication
      ([template_predicate
         (
            template_app
             (template_hole 12,
              template_app (template_hole 11, template_var 1))
            ),
        template_predicate
         (
            template_app
             (template_hole 10,
              template_app (template_hole 11, template_var 1))
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 9,
               template_app
                (template_hole 11,
                 template_app (template_hole 8, t_empty))),
             template_app
              (template_hole 3,
               template_app
                (template_app
                  (template_hole 2,
                   template_app
                    (template_app (template_hole 1, template_var 1),
                     template_var 0)),
                 template_hole 0)))
           ))),
    ("LoopInduction.wp_loop_step_mono_trans",
     "[| sound ?P; healthy (wp ?body) |]
      ==> mono_trans
           (%Q s. \<guillemotleft> ?G \<guillemotright> s * wp ?body Q s +
                  \<guillemotleft> \<N> ?G \<guillemotright> s * ?P s)",
     template_implication
      ([template_predicate (template_app (template_hole 7, template_var 2)),
        template_predicate
         (
            template_app
             (template_hole 6,
              template_app (template_hole 5, template_var 1))
            )],
       template_predicate (template_app (template_hole 4, t_empty)))),
    ("LoopInduction.lfp_loop_unitary",
     "[| healthy (wp ?body); unitary ?P |]
      ==> unitary
           (lfp_exp
             (%Q s. \<guillemotleft> ?G \<guillemotright> s * wp ?body Q s +
                    \<guillemotleft> \<N> ?G \<guillemotright> s * ?P s))",
     template_implication
      ([template_predicate
         (
            template_app
             (template_hole 7,
              template_app (template_hole 6, template_var 2))
            ),
        template_predicate
         (template_app (template_hole 5, template_var 1))],
       template_predicate
        (
           template_app
            (template_hole 5, template_app (template_hole 4, t_empty))
           ))),
    ("LoopInduction.wp_loop_step_bounded",
     "[| nneg ?Q; bounded_by ?b ?Q; healthy ?t; healthy (wp ?body) |]
      ==> bounded_by ?b
           (wp (?body ;;
                Embed
                 ?t \<^bsub>\<guillemotleft> ?G \<guillemotright>\<^esub>\<oplus> Skip)
             ?Q)",
     template_implication
      ([template_predicate (template_app (template_hole 8, template_var 4)),
        template_predicate
         (
            template_app
             (template_app (template_hole 7, template_var 3),
              template_var 4)
            ),
        template_predicate (template_app (template_hole 6, template_var 2)),
        template_predicate
         (
            template_app
             (template_hole 6,
              template_app (template_hole 5, template_var 1))
            )],
       template_predicate
        (
           template_app
            (template_app (template_hole 7, template_var 3),
             template_app
              (template_app
                (template_hole 5,
                 template_app
                  (template_app
                    (template_app
                      (template_hole 4,
                       template_app
                        (template_app (template_hole 3, template_var 1),
                         template_app (template_hole 2, template_var 2))),
                     template_app (template_hole 1, template_var 0)),
                   template_hole 0)),
               template_var 4))
           ))),
    ("LoopInduction.cts_intros",
     "[| bd_cts (wp ?a); bd_cts (wp ?b); healthy (wp ?a); healthy (wp ?b);
         unitary ?p |]
      ==> bd_cts (wp (?a \<^bsub>?p\<^esub>\<oplus> ?b))",
     template_implication
      ([template_predicate
         (
            template_app
             (template_hole 4,
              template_app (template_hole 3, template_var 2))
            ),
        template_predicate
         (
            template_app
             (template_hole 4,
              template_app (template_hole 3, template_var 1))
            ),
        template_predicate
         (
            template_app
             (template_hole 2,
              template_app (template_hole 3, template_var 2))
            ),
        template_predicate
         (
            template_app
             (template_hole 2,
              template_app (template_hole 3, template_var 1))
            ),
        template_predicate
         (template_app (template_hole 1, template_var 0))],
       template_predicate
        (
           template_app
            (template_hole 4,
             template_app
              (template_hole 3,
               template_app
                (template_app
                  (template_app (template_hole 0, template_var 2),
                   template_var 0),
                 template_var 1)))
           ))),
    ("LoopInduction.wp_loop_step_unitary",
     "[| healthy (wp ?body); unitary ?P; unitary ?Q |]
      ==> unitary
           (%s. \<guillemotleft> ?G \<guillemotright> s * wp ?body ?Q s +
                \<guillemotleft> \<N> ?G \<guillemotright> s * ?P s)",
     template_implication
      ([template_predicate
         (
            template_app
             (template_hole 6,
              template_app (template_hole 5, template_var 3))
            ),
        template_predicate (template_app (template_hole 4, template_var 2)),
        template_predicate
         (template_app (template_hole 4, template_var 1))],
       template_predicate (template_app (template_hole 4, t_empty)))),
    ("LoopInduction.loop_iterates",
     "[| healthy (wp ?body); bd_cts (wp ?body); sound ?P |]
      ==> (%i. iterates ?body ?G i ?P ?s)
          \<longlonglongrightarrow> wp (\<mu>x.
     ?body ;;
     x \<^bsub>\<guillemotleft> ?G \<guillemotright>\<^esub>\<oplus> Skip)
                                     ?P ?s",
     template_implication
      ([template_predicate
         (
            template_app
             (template_hole 12,
              template_app (template_hole 11, template_var 3))
            ),
        template_predicate
         (
            template_app
             (template_hole 10,
              template_app (template_hole 11, template_var 3))
            ),
        template_predicate
         (template_app (template_hole 9, template_var 2))],
       template_predicate
        (
           template_app
            (template_app
              (template_app (template_hole 8, t_empty),
               template_app
                (template_hole 6,
                 template_app
                  (template_app
                    (template_app
                      (template_hole 11,
                       template_app (template_hole 5, t_empty)),
                     template_var 2),
                   template_var 0))),
             template_hole 0)
           ))),
    ("LoopInduction.cts_intros",
     "[| !!x s. x : ?S s ==> bd_cts (wp (?a x));
         !!x s. x : ?S s ==> healthy (wp (?a x)); !!s. finite (?S s);
         !!s. ?S s ~= {} |]
      ==> bd_cts (wp (SetDC ?a ?S))",
     template_implication
      ([template_predicate (template_app (template_hole 11, t_empty)),
        template_predicate (template_app (template_hole 11, t_empty)),
        template_predicate (template_app (template_hole 10, t_empty)),
        template_predicate (template_app (template_hole 10, t_empty))],
       template_predicate
        (
           template_app
            (template_hole 7,
             template_app
              (template_hole 6,
               template_app
                (template_app (template_hole 0, template_var 0),
                 template_var 1)))
           ))),
    ("LoopInduction.lfp_wp_loop_unfold",
     "[| healthy (wp ?body); sound ?P |]
      ==> lfp_exp
           (%Q s. \<guillemotleft> ?G \<guillemotright> s * wp ?body Q s +
                  \<guillemotleft> \<N> ?G \<guillemotright> s * ?P s) =
          (%s. \<guillemotleft> ?G \<guillemotright> s *
               wp ?body
                (lfp_exp
                  (%Q s. \<guillemotleft> ?G \<guillemotright> s *
                         wp ?body Q s +
                         \<guillemotleft> \<N> ?G \<guillemotright> s *
                         ?P s))
                s +
               \<guillemotleft> \<N> ?G \<guillemotright> s * ?P s)",
     template_implication
      ([template_predicate
         (
            template_app
             (template_hole 8,
              template_app (template_hole 7, template_var 2))
            ),
        template_predicate
         (template_app (template_hole 6, template_var 1))],
       template_equation
        (template_app (template_hole 4, t_empty), t_empty))),
    ("LoopInduction.cts_intros",
     "[| !!x s. x : supp (?p s) ==> bd_cts (wp (?a x));
         !!x s. x : supp (?p s) ==> healthy (wp (?a x));
         !!s. unitary (?p s); !!s. sum (?p s) (supp (?p s)) <= 1;
         !!s. finite (supp (?p s)) |]
      ==> bd_cts (wp (SetPC ?a ?p))",
     template_implication
      ([template_predicate (template_app (template_hole 13, t_empty)),
        template_predicate (template_app (template_hole 13, t_empty)),
        template_predicate (template_app (template_hole 12, t_empty)),
        template_predicate (template_app (template_hole 12, t_empty)),
        template_predicate (template_app (template_hole 12, t_empty))],
       template_predicate
        (
           template_app
            (template_hole 8,
             template_app
              (template_hole 7,
               template_app
                (template_app (template_hole 0, template_var 0),
                 template_var 1)))
           ))),
    ("LoopInduction.loop_induct",
     "[| healthy (wp ?body); nearly_healthy (wlp ?body);
         !!S. [| ALL x:S. ?P (fst x) (snd x); ALL x:S. feasible (fst x);
                 ALL x:S. ALL Q. unitary Q --> unitary (snd x Q) |]
              ==> ?P (Sup_trans (fst ` S)) (Inf_utrans (snd ` S));
         !!t u.
            [| ?P t u; feasible t; !!Q. unitary Q ==> unitary (u Q) |]
            ==> ?P (wp (?body ;;
                        Embed
                         t \<^bsub>\<guillemotleft> ?G \<guillemotright>\<^esub>\<oplus> Skip))
                 (wlp (?body ;;
                       Embed
                        u \<^bsub>\<guillemotleft> ?G \<guillemotright>\<^esub>\<oplus> Skip));
         !!t t' u u'.
            [| ?P t u; equiv_trans t t'; equiv_utrans u u' |]
            ==> ?P t' u' |]
      ==> ?P (wp (\<mu>x.
                     ?body ;;
                     x \<^bsub>\<guillemotleft> ?G \<guillemotright>\<^esub>\<oplus> Skip))
           (wlp (\<mu>x.
                    ?body ;;
                    x \<^bsub>\<guillemotleft> ?G \<guillemotright>\<^esub>\<oplus> Skip))",
     template_implication
      ([template_predicate
         (
            template_app
             (template_hole 24,
              template_app (template_hole 23, template_var 2))
            ),
        template_predicate
         (
            template_app
             (template_hole 22,
              template_app (template_hole 21, template_var 2))
            ),
        template_predicate (template_app (template_hole 20, t_empty)),
        template_predicate (template_app (template_hole 9, t_empty)),
        template_predicate (template_app (template_hole 9, t_empty))],
       template_predicate
        (
           template_app
            (template_app
              (template_var 1,
               template_app
                (template_hole 23,
                 template_app (template_hole 0, t_empty))),
             template_app
              (template_hole 21, template_app (template_hole 0, t_empty)))
           )))]:
   (string * thm * template) list
### theory "Draft.LoopInductionMoreTemplates"
### 0.803s elapsed time, 1.145s cpu time, 0.184s GC time
val it = (): unit
