   [("LoopInduction.cts_intros", "bd_cts (wp (Apply ?f))",
     template_predicate
      (
         template_app
          (template_hole 2,
           template_app
            (template_hole 1,
             template_app (template_hole 0, template_var 0)))
         )),
    ("LoopInduction.iterates_0", "iterates ?body ?G 0 = (%P s. 0)",
     template_equation
      (template_app
        (template_app
          (template_app (template_hole 2, template_var 1), template_var 0),
         template_hole 1),
       t_empty)),
    ("LoopInduction.cts_intros", "bd_cts ?t ==> bd_cts (wp (Embed ?t))",
     template_implication
      ([template_predicate
         (template_app (template_hole 2, template_var 0))],
       template_predicate
        (
           template_app
            (template_hole 2,
             template_app
              (template_hole 1,
               template_app (template_hole 0, template_var 0)))
           ))),
    ("LoopInduction.iterates_healthy",
     "healthy (wp ?body) ==> healthy (iterates ?body ?G ?i)",
     template_implication
      ([template_predicate
         (
            template_app
             (template_hole 2,
              template_app (template_hole 1, template_var 2))
            )],
       template_predicate
        (
           template_app
            (template_hole 2,
             template_app
              (template_app
                (template_app (template_hole 0, template_var 2),
                 template_var 1),
               template_var 0))
           ))),
    ("LoopInduction.cts_intros",
     "(!!s. bd_cts (wp (?a (?f s)))) ==> bd_cts (wp (Bind ?f ?a))",
     template_implication
      ([template_predicate (template_app (template_hole 4, t_empty))],
       template_predicate
        (
           template_app
            (template_hole 2,
             template_app
              (template_hole 1,
               template_app
                (template_app (template_hole 0, template_var 0),
                 template_var 1)))
           ))),
    ("LoopInduction.iterates_increasing",
     "healthy (wp ?body) ==>
      le_trans (iterates ?body ?G ?i) (iterates ?body ?G (Suc ?i))",
     template_implication
      ([template_predicate
         (
            template_app
             (template_hole 4,
              template_app (template_hole 3, template_var 2))
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 2,
               template_app
                (template_app
                  (template_app (template_hole 1, template_var 2),
                   template_var 1),
                 template_var 0)),
             template_app
              (template_app
                (template_app (template_hole 1, template_var 2),
                 template_var 1),
               template_app (template_hole 0, template_var 0)))
           ))),
    ("LoopInduction.cts_intros",
     "[| bd_cts (wp ?a); healthy (wp ?a) |] ==> bd_cts (wp (repeat ?n ?a))",
     template_implication
      ([template_predicate
         (
            template_app
             (template_hole 3,
              template_app (template_hole 2, template_var 1))
            ),
        template_predicate
         (
            template_app
             (template_hole 1,
              template_app (template_hole 2, template_var 1))
            )],
       template_predicate
        (
           template_app
            (template_hole 3,
             template_app
              (template_hole 2,
               template_app
                (template_app (template_hole 0, template_var 0),
                 template_var 1)))
           ))),
    ("LoopInduction.cts_iterates",
     "[| healthy (wp ?body); bd_cts (wp ?body) |]
      ==> bd_cts (iterates ?body ?G ?i)",
     template_implication
      ([template_predicate
         (
            template_app
             (template_hole 3,
              template_app (template_hole 2, template_var 2))
            ),
        template_predicate
         (
            template_app
             (template_hole 1,
              template_app (template_hole 2, template_var 2))
            )],
       template_predicate
        (
           template_app
            (template_hole 1,
             template_app
              (template_app
                (template_app (template_hole 0, template_var 2),
                 template_var 1),
               template_var 0))
           ))),
    ("LoopInduction.iterates_Suc",
     "iterates ?body ?G (Suc ?i) =
      wp (?body ;;
          Embed
           (iterates ?body ?G
             ?i) \<^bsub>\<guillemotleft> ?G \<guillemotright>\<^esub>\<oplus> Skip)",
     template_equation
      (template_app
        (template_app
          (template_app (template_hole 7, template_var 2), template_var 1),
         template_app (template_hole 6, template_var 0)),
       template_app
        (template_hole 5,
         template_app
          (template_app
            (template_app
              (template_hole 4,
               template_app
                (template_app (template_hole 3, template_var 2),
                 template_app
                  (template_hole 2,
                   template_app
                    (template_app
                      (template_app (template_hole 7, template_var 2),
                       template_var 1),
                     template_var 0)))),
             template_app (template_hole 1, template_var 1)),
           template_hole 0)))),
    ("LoopInduction.cts_intros",
     "[| bd_cts (wp ?a); bd_cts (wp ?b); healthy (wp ?b) |]
      ==> bd_cts (wp (?a ;; ?b))",
     template_implication
      ([template_predicate
         (
            template_app
             (template_hole 3,
              template_app (template_hole 2, template_var 1))
            ),
        template_predicate
         (
            template_app
             (template_hole 3,
              template_app (template_hole 2, template_var 0))
            ),
        template_predicate
         (
            template_app
             (template_hole 1,
              template_app (template_hole 2, template_var 0))
            )],
       template_predicate
        (
           template_app
            (template_hole 3,
             template_app
              (template_hole 2,
               template_app
                (template_app (template_hole 0, template_var 1),
                 template_var 0)))
           ))),
    ("LoopInduction.cts_wp_loop",
     "[| healthy (wp ?body); bd_cts (wp ?body) |]
      ==> bd_cts
           (wp (\<mu>x.
                   ?body ;;
                   x \<^bsub>\<guillemotleft> ?G \<guillemotright>\<^esub>\<oplus> Skip))",
     template_implication
      ([template_predicate
         (
            template_app
             (template_hole 7,
              template_app (template_hole 6, template_var 1))
            ),
        template_predicate
         (
            template_app
             (template_hole 5,
              template_app (template_hole 6, template_var 1))
            )],
       template_predicate
        (
           template_app
            (template_hole 5,
             template_app
              (template_hole 6, template_app (template_hole 4, t_empty)))
           ))),
    ("LoopInduction.cts_intros",
     "[| bd_cts (wp ?a); bd_cts (wp ?b); healthy (wp ?a); healthy (wp ?b) |]
      ==> bd_cts (wp (?a \<Sqinter> ?b))",
     template_implication
      ([template_predicate
         (
            template_app
             (template_hole 3,
              template_app (template_hole 2, template_var 1))
            ),
        template_predicate
         (
            template_app
             (template_hole 3,
              template_app (template_hole 2, template_var 0))
            ),
        template_predicate
         (
            template_app
             (template_hole 1,
              template_app (template_hole 2, template_var 1))
            ),
        template_predicate
         (
            template_app
             (template_hole 1,
              template_app (template_hole 2, template_var 0))
            )],
       template_predicate
        (
           template_app
            (template_hole 3,
             template_app
              (template_hole 2,
               template_app
                (template_app (template_hole 0, template_var 1),
                 template_var 0)))
           ))),
    ("LoopInduction.lfp_iterates",
     "[| healthy (wp ?body); bd_cts (wp ?body) |]
      ==> equiv_trans
           (wp (\<mu>x.
                   ?body ;;
                   x \<^bsub>\<guillemotleft> ?G \<guillemotright>\<^esub>\<oplus> Skip))
           (Sup_trans (range (iterates ?body ?G)))",
     template_implication
      ([template_predicate
         (
            template_app
             (template_hole 12,
              template_app (template_hole 11, template_var 1))
            ),
        template_predicate
         (
            template_app
             (template_hole 10,
              template_app (template_hole 11, template_var 1))
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 9,
               template_app
                (template_hole 11,
                 template_app (template_hole 8, t_empty))),
             template_app
              (template_hole 3,
               template_app
                (template_app
                  (template_hole 2,
                   template_app
                    (template_app (template_hole 1, template_var 1),
                     template_var 0)),
                 template_hole 0)))
           ))),
    ("LoopInduction.wp_loop_step_mono_trans",
     "[| sound ?P; healthy (wp ?body) |]
      ==> mono_trans
           (%Q s. \<guillemotleft> ?G \<guillemotright> s * wp ?body Q s +
                  \<guillemotleft> \<N> ?G \<guillemotright> s * ?P s)",
     template_implication
      ([template_predicate (template_app (template_hole 7, template_var 2)),
        template_predicate
         (
            template_app
             (template_hole 6,
              template_app (template_hole 5, template_var 1))
            )],
       template_predicate (template_app (template_hole 4, t_empty)))),
    ("LoopInduction.lfp_loop_unitary",
     "[| healthy (wp ?body); unitary ?P |]
      ==> unitary
           (lfp_exp
             (%Q s. \<guillemotleft> ?G \<guillemotright> s * wp ?body Q s +
                    \<guillemotleft> \<N> ?G \<guillemotright> s * ?P s))",
     template_implication
      ([template_predicate
         (
            template_app
             (template_hole 7,
              template_app (template_hole 6, template_var 2))
            ),
        template_predicate
         (template_app (template_hole 5, template_var 1))],
       template_predicate
        (
           template_app
            (template_hole 5, template_app (template_hole 4, t_empty))
           ))),
    ("LoopInduction.wp_loop_step_bounded",
     "[| nneg ?Q; bounded_by ?b ?Q; healthy ?t; healthy (wp ?body) |]
      ==> bounded_by ?b
           (wp (?body ;;
                Embed
                 ?t \<^bsub>\<guillemotleft> ?G \<guillemotright>\<^esub>\<oplus> Skip)
             ?Q)",
     template_implication
      ([template_predicate (template_app (template_hole 8, template_var 4)),
        template_predicate
         (
            template_app
             (template_app (template_hole 7, template_var 3),
              template_var 4)
            ),
        template_predicate (template_app (template_hole 6, template_var 2)),
        template_predicate
         (
            template_app
             (template_hole 6,
              template_app (template_hole 5, template_var 1))
            )],
       template_predicate
        (
           template_app
            (template_app (template_hole 7, template_var 3),
             template_app
              (template_app
                (template_hole 5,
                 template_app
                  (template_app
                    (template_app
                      (template_hole 4,
                       template_app
                        (template_app (template_hole 3, template_var 1),
                         template_app (template_hole 2, template_var 2))),
                     template_app (template_hole 1, template_var 0)),
                   template_hole 0)),
               template_var 4))
           ))),
    ("LoopInduction.cts_intros",
     "[| bd_cts (wp ?a); bd_cts (wp ?b); healthy (wp ?a); healthy (wp ?b);
         unitary ?p |]
      ==> bd_cts (wp (?a \<^bsub>?p\<^esub>\<oplus> ?b))",
     template_implication
      ([template_predicate
         (
            template_app
             (template_hole 4,
              template_app (template_hole 3, template_var 2))
            ),
        template_predicate
         (
            template_app
             (template_hole 4,
              template_app (template_hole 3, template_var 1))
            ),
        template_predicate
         (
            template_app
             (template_hole 2,
              template_app (template_hole 3, template_var 2))
            ),
        template_predicate
         (
            template_app
             (template_hole 2,
              template_app (template_hole 3, template_var 1))
            ),
        template_predicate
         (template_app (template_hole 1, template_var 0))],
       template_predicate
        (
           template_app
            (template_hole 4,
             template_app
              (template_hole 3,
               template_app
                (template_app
                  (template_app (template_hole 0, template_var 2),
                   template_var 0),
                 template_var 1)))
           ))),
    ("LoopInduction.wp_loop_step_unitary",
     "[| healthy (wp ?body); unitary ?P; unitary ?Q |]
      ==> unitary
           (%s. \<guillemotleft> ?G \<guillemotright> s * wp ?body ?Q s +
                \<guillemotleft> \<N> ?G \<guillemotright> s * ?P s)",
     template_implication
      ([template_predicate
         (
            template_app
             (template_hole 6,
              template_app (template_hole 5, template_var 3))
            ),
        template_predicate (template_app (template_hole 4, template_var 2)),
        template_predicate
         (template_app (template_hole 4, template_var 1))],
       template_predicate (template_app (template_hole 4, t_empty)))),
    ("LoopInduction.loop_iterates",
     "[| healthy (wp ?body); bd_cts (wp ?body); sound ?P |]
      ==> (%i. iterates ?body ?G i ?P ?s)
          \<longlonglongrightarrow> wp (\<mu>x.
     ?body ;;
     x \<^bsub>\<guillemotleft> ?G \<guillemotright>\<^esub>\<oplus> Skip)
                                     ?P ?s",
     template_implication
      ([template_predicate
         (
            template_app
             (template_hole 12,
              template_app (template_hole 11, template_var 3))
            ),
        template_predicate
         (
            template_app
             (template_hole 10,
              template_app (template_hole 11, template_var 3))
            ),
        template_predicate
         (template_app (template_hole 9, template_var 2))],
       template_predicate
        (
           template_app
            (template_app
              (template_app (template_hole 8, t_empty),
               template_app
                (template_hole 6,
                 template_app
                  (template_app
                    (template_app
                      (template_hole 11,
                       template_app (template_hole 5, t_empty)),
                     template_var 2),
                   template_var 0))),
             template_hole 0)
           ))),
    ("LoopInduction.cts_intros",
     "[| !!x s. x : ?S s ==> bd_cts (wp (?a x));
         !!x s. x : ?S s ==> healthy (wp (?a x)); !!s. finite (?S s);
         !!s. ?S s ~= {} |]
      ==> bd_cts (wp (SetDC ?a ?S))",
     template_implication
      ([template_predicate (template_app (template_hole 11, t_empty)),
        template_predicate (template_app (template_hole 11, t_empty)),
        template_predicate (template_app (template_hole 10, t_empty)),
        template_predicate (template_app (template_hole 10, t_empty))],
       template_predicate
        (
           template_app
            (template_hole 7,
             template_app
              (template_hole 6,
               template_app
                (template_app (template_hole 0, template_var 0),
                 template_var 1)))
           ))),
    ("LoopInduction.lfp_wp_loop_unfold",
     "[| healthy (wp ?body); sound ?P |]
      ==> lfp_exp
           (%Q s. \<guillemotleft> ?G \<guillemotright> s * wp ?body Q s +
                  \<guillemotleft> \<N> ?G \<guillemotright> s * ?P s) =
          (%s. \<guillemotleft> ?G \<guillemotright> s *
               wp ?body
                (lfp_exp
                  (%Q s. \<guillemotleft> ?G \<guillemotright> s *
                         wp ?body Q s +
                         \<guillemotleft> \<N> ?G \<guillemotright> s *
                         ?P s))
                s +
               \<guillemotleft> \<N> ?G \<guillemotright> s * ?P s)",
     template_implication
      ([template_predicate
         (
            template_app
             (template_hole 8,
              template_app (template_hole 7, template_var 2))
            ),
        template_predicate
         (template_app (template_hole 6, template_var 1))],
       template_equation
        (template_app (template_hole 4, t_empty), t_empty))),
    ("LoopInduction.cts_intros",
     "[| !!x s. x : supp (?p s) ==> bd_cts (wp (?a x));
         !!x s. x : supp (?p s) ==> healthy (wp (?a x));
         !!s. unitary (?p s); !!s. sum (?p s) (supp (?p s)) <= 1;
         !!s. finite (supp (?p s)) |]
      ==> bd_cts (wp (SetPC ?a ?p))",
     template_implication
      ([template_predicate (template_app (template_hole 13, t_empty)),
        template_predicate (template_app (template_hole 13, t_empty)),
        template_predicate (template_app (template_hole 12, t_empty)),
        template_predicate (template_app (template_hole 12, t_empty)),
        template_predicate (template_app (template_hole 12, t_empty))],
       template_predicate
        (
           template_app
            (template_hole 8,
             template_app
              (template_hole 7,
               template_app
                (template_app (template_hole 0, template_var 0),
                 template_var 1)))
           ))),
    ("LoopInduction.loop_induct",
     "[| healthy (wp ?body); nearly_healthy (wlp ?body);
         !!S. [| ALL x:S. ?P (fst x) (snd x); ALL x:S. feasible (fst x);
                 ALL x:S. ALL Q. unitary Q --> unitary (snd x Q) |]
              ==> ?P (Sup_trans (fst ` S)) (Inf_utrans (snd ` S));
         !!t u.
            [| ?P t u; feasible t; !!Q. unitary Q ==> unitary (u Q) |]
            ==> ?P (wp (?body ;;
                        Embed
                         t \<^bsub>\<guillemotleft> ?G \<guillemotright>\<^esub>\<oplus> Skip))
                 (wlp (?body ;;
                       Embed
                        u \<^bsub>\<guillemotleft> ?G \<guillemotright>\<^esub>\<oplus> Skip));
         !!t t' u u'.
            [| ?P t u; equiv_trans t t'; equiv_utrans u u' |]
            ==> ?P t' u' |]
      ==> ?P (wp (\<mu>x.
                     ?body ;;
                     x \<^bsub>\<guillemotleft> ?G \<guillemotright>\<^esub>\<oplus> Skip))
           (wlp (\<mu>x.
                    ?body ;;
                    x \<^bsub>\<guillemotleft> ?G \<guillemotright>\<^esub>\<oplus> Skip))",
     template_implication
      ([template_predicate
         (
            template_app
             (template_hole 24,
              template_app (template_hole 23, template_var 2))
            ),
        template_predicate
         (
            template_app
             (template_hole 22,
              template_app (template_hole 21, template_var 2))
            ),
        template_predicate (template_app (template_hole 20, t_empty)),
        template_predicate (template_app (template_hole 9, t_empty)),
        template_predicate (template_app (template_hole 9, t_empty))],
       template_predicate
        (
           template_app
            (template_app
              (template_var 1,
               template_app
                (template_hole 23,
                 template_app (template_hole 0, t_empty))),
             template_app
              (template_hole 21, template_app (template_hole 0, t_empty)))
           )))]
