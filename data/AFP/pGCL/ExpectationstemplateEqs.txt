   [("Expectations.negate_negate", "\<N> (\<N> ?P) = ?P",
     template_equation
      (template_app
        (template_hole 0, template_app (template_hole 0, template_var 0)),
       template_var 0)),
    ("Expectations.bound_of_const", "bound_of (%x. ?c) = ?c",
     template_equation
      (template_app (template_hole 0, t_empty), template_var 0)),
    ("Expectations.exp_conj_comm", "?a && ?b = ?b && ?a",
     template_equation
      (template_app
        (template_app (template_hole 0, template_var 1), template_var 0),
       template_app
        (template_app (template_hole 0, template_var 0), template_var 1))),
    ("Expectations.nneg_const", "nneg (%x. ?c) = ((0::?'b) <= ?c)",
     template_equation
      (template_app (template_hole 2, t_empty),
       template_app
        (template_app (template_hole 1, template_hole 0), template_var 0))),
    ("Expectations.pconj_comm", "?a .& ?b = ?b .& ?a",
     template_equation
      (template_app
        (template_app (template_hole 0, template_var 1), template_var 0),
       template_app
        (template_app (template_hole 0, template_var 0), template_var 1))),
    ("Expectations.exp_conj_idem",
     "\<guillemotleft> ?P \<guillemotright> &&
      \<guillemotleft> ?P \<guillemotright> =
      \<guillemotleft> ?P \<guillemotright>",
     template_equation
      (template_app
        (template_app
          (template_hole 1, template_app (template_hole 0, template_var 0)),
         template_app (template_hole 0, template_var 0)),
       template_app (template_hole 0, template_var 0))),
    ("Expectations.embed_o",
     "\<guillemotleft> ?P \<guillemotright> o ?f =
      \<guillemotleft> ?P o ?f \<guillemotright>",
     template_equation
      (template_app
        (template_app
          (template_hole 3, template_app (template_hole 2, template_var 1)),
         template_var 0),
       template_app
        (template_hole 1,
         template_app
          (template_app (template_hole 0, template_var 1),
           template_var 0)))),
    ("Expectations.negate_embed",
     "\<guillemotleft> \<N> ?P \<guillemotright> ?s =
      1 - \<guillemotleft> ?P \<guillemotright> ?s",
     template_equation
      (template_app
        (template_app
          (template_hole 3, template_app (template_hole 2, template_var 1)),
         template_var 0),
       template_app
        (template_app (template_hole 1, template_hole 0),
         template_app
          (template_app (template_hole 3, template_var 1),
           template_var 0)))),
    ("Expectations.embed_bool_cancel",
     "\<guillemotleft> ?G \<guillemotright> ?s *
      \<guillemotleft> \<N> ?G \<guillemotright> ?s =
      0",
     template_equation
      (template_app
        (template_app
          (template_hole 3,
           template_app
            (template_app (template_hole 2, template_var 1),
             template_var 0)),
         template_app
          (template_app
            (template_hole 2,
             template_app (template_hole 1, template_var 1)),
           template_var 0)),
       template_hole 0)),
    ("Expectations.pconj_idem",
     "\<guillemotleft> ?P \<guillemotright> ?s .&
      \<guillemotleft> ?P \<guillemotright> ?s =
      \<guillemotleft> ?P \<guillemotright> ?s",
     template_equation
      (template_app
        (template_app
          (template_hole 1,
           template_app
            (template_app (template_hole 0, template_var 1),
             template_var 0)),
         template_app
          (template_app (template_hole 0, template_var 1), template_var 0)),
       template_app
        (template_app (template_hole 0, template_var 1), template_var 0))),
    ("Expectations.embed_bool_idem",
     "\<guillemotleft> ?P \<guillemotright> ?s *
      \<guillemotleft> ?P \<guillemotright> ?s =
      \<guillemotleft> ?P \<guillemotright> ?s",
     template_equation
      (template_app
        (template_app
          (template_hole 1,
           template_app
            (template_app (template_hole 0, template_var 1),
             template_var 0)),
         template_app
          (template_app (template_hole 0, template_var 1), template_var 0)),
       template_app
        (template_app (template_hole 0, template_var 1), template_var 0))),
    ("Expectations.exp_conj_o_distrib",
     "?P && ?Q o ?f = (?P o ?f) && (?Q o ?f)",
     template_equation
      (template_app
        (template_app
          (template_hole 2,
           template_app
            (template_app (template_hole 1, template_var 2),
             template_var 1)),
         template_var 0),
       template_app
        (template_app
          (template_hole 0,
           template_app
            (template_app (template_hole 2, template_var 2),
             template_var 0)),
         template_app
          (template_app (template_hole 2, template_var 1),
           template_var 0)))),
    ("Expectations.exp_conj_std_split",
     "\<guillemotleft> %s. ?P s & ?Q s \<guillemotright> =
      \<guillemotleft> ?P \<guillemotright> &&
      \<guillemotleft> ?Q \<guillemotright>",
     template_equation
      (template_app (template_hole 2, t_empty),
       template_app
        (template_app
          (template_hole 0, template_app (template_hole 2, template_var 1)),
         template_app (template_hole 2, template_var 0)))),
    ("Expectations.pconj_bconj",
     "\<guillemotleft> ?a \<guillemotright> ?s .&
      \<guillemotleft> ?b \<guillemotright> ?s =
      \<guillemotleft> %s. ?a s & ?b s \<guillemotright> ?s",
     template_equation
      (template_app
        (template_app
          (template_hole 2,
           template_app
            (template_app (template_hole 1, template_var 2),
             template_var 1)),
         template_app
          (template_app (template_hole 1, template_var 0), template_var 1)),
       template_app
        (template_app (template_hole 1, t_empty), template_var 1))),
    ("Expectations.embed_split",
     "?f ?s =
      \<guillemotleft> ?P \<guillemotright> ?s * ?f ?s +
      \<guillemotleft> \<N> ?P \<guillemotright> ?s * ?f ?s",
     template_equation
      (template_app (template_var 2, template_var 1),
       template_app
        (template_app
          (template_hole 3,
           template_app
            (template_app
              (template_hole 2,
               template_app
                (template_app (template_hole 1, template_var 0),
                 template_var 1)),
             template_app (template_var 2, template_var 1))),
         template_app
          (template_app
            (template_hole 2,
             template_app
              (template_app
                (template_hole 1,
                 template_app (template_hole 0, template_var 0)),
               template_var 1)),
           template_app (template_var 2, template_var 1)))))]
