   [("Transformers.equiv_trans_refl", "equiv_trans ?t ?t",
     template_predicate
      (
         template_app
          (template_app (template_hole 0, template_var 0), template_var 0)
         )),
    ("Transformers.equiv_utrans_refl", "equiv_utrans ?t ?t",
     template_predicate
      (
         template_app
          (template_app (template_hole 0, template_var 0), template_var 0)
         )),
    ("Transformers.le_trans_refl", "le_trans ?x ?x",
     template_predicate
      (
         template_app
          (template_app (template_hole 0, template_var 0), template_var 0)
         )),
    ("Transformers.le_utrans_refl", "le_utrans ?x ?x",
     template_predicate
      (
         template_app
          (template_app (template_hole 0, template_var 0), template_var 0)
         )),
    ("Transformers.additive_sub_add",
     "Transformers.additive ?t ==> sub_add ?t",
     template_implication
      ([template_predicate
         (template_app (template_hole 1, template_var 0))],
       template_predicate
        (template_app (template_hole 0, template_var 0)))),
    ("Transformers.determ_additiveD",
     "determ ?t ==> Transformers.additive ?t",
     template_implication
      ([template_predicate
         (template_app (template_hole 1, template_var 0))],
       template_predicate
        (template_app (template_hole 0, template_var 0)))),
    ("Transformers.determ_maximalD", "determ ?t ==> maximal ?t",
     template_implication
      ([template_predicate
         (template_app (template_hole 1, template_var 0))],
       template_predicate
        (template_app (template_hole 0, template_var 0)))),
    ("Transformers.healthy_feasibleD", "healthy ?t ==> feasible ?t",
     template_implication
      ([template_predicate
         (template_app (template_hole 1, template_var 0))],
       template_predicate
        (template_app (template_hole 0, template_var 0)))),
    ("Transformers.healthy_monoD", "healthy ?t ==> mono_trans ?t",
     template_implication
      ([template_predicate
         (template_app (template_hole 1, template_var 0))],
       template_predicate
        (template_app (template_hole 0, template_var 0)))),
    ("Transformers.healthy_nearly_healthy",
     "healthy ?t ==> nearly_healthy ?t",
     template_implication
      ([template_predicate
         (template_app (template_hole 1, template_var 0))],
       template_predicate
        (template_app (template_hole 0, template_var 0)))),
    ("Transformers.healthy_scalingD", "healthy ?t ==> scaling ?t",
     template_implication
      ([template_predicate
         (template_app (template_hole 1, template_var 0))],
       template_predicate
        (template_app (template_hole 0, template_var 0)))),
    ("Transformers.sublinear_sub_conj", "sublinear ?t ==> sub_conj ?t",
     template_implication
      ([template_predicate
         (template_app (template_hole 1, template_var 0))],
       template_predicate
        (template_app (template_hole 0, template_var 0)))),
    ("Transformers.sublinear_sub_distrib",
     "sublinear ?t ==> sub_distrib ?t",
     template_implication
      ([template_predicate
         (template_app (template_hole 1, template_var 0))],
       template_predicate
        (template_app (template_hole 0, template_var 0)))),
    ("Transformers.equiv_trans_comm",
     "equiv_trans ?t ?u = equiv_trans ?u ?t",
     template_equation
      (template_app
        (template_app (template_hole 0, template_var 1), template_var 0),
       template_app
        (template_app (template_hole 0, template_var 0), template_var 1))),
    ("Transformers.equiv_utrans_comm",
     "equiv_utrans ?t ?u = equiv_utrans ?u ?t",
     template_equation
      (template_app
        (template_app (template_hole 0, template_var 1), template_var 0),
       template_app
        (template_app (template_hole 0, template_var 0), template_var 1))),
    ("Transformers.equiv_trans_equiv_utrans",
     "equiv_trans ?t ?u ==> equiv_utrans ?t ?u",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 1, template_var 1),
              template_var 0)
            )],
       template_predicate
        (
           template_app
            (template_app (template_hole 0, template_var 1), template_var 0)
           ))),
    ("Transformers.equiv_imp_le", "equiv_trans ?t ?u ==> le_trans ?t ?u",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 1, template_var 1),
              template_var 0)
            )],
       template_predicate
        (
           template_app
            (template_app (template_hole 0, template_var 1), template_var 0)
           ))),
    ("Transformers.equiv_imp_le_alt",
     "equiv_trans ?t ?u ==> le_trans ?u ?t",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 1, template_var 1),
              template_var 0)
            )],
       template_predicate
        (
           template_app
            (template_app (template_hole 0, template_var 0), template_var 1)
           ))),
    ("Transformers.equivu_imp_le", "equiv_utrans ?t ?u ==> le_utrans ?t ?u",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 1, template_var 1),
              template_var 0)
            )],
       template_predicate
        (
           template_app
            (template_app (template_hole 0, template_var 1), template_var 0)
           ))),
    ("Transformers.equiv_uimp_le_alt",
     "equiv_utrans ?t ?u ==> le_utrans ?u ?t",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 1, template_var 1),
              template_var 0)
            )],
       template_predicate
        (
           template_app
            (template_app (template_hole 0, template_var 0), template_var 1)
           ))),
    ("Transformers.le_trans_le_utrans",
     "le_trans ?t ?u ==> le_utrans ?t ?u",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 1, template_var 1),
              template_var 0)
            )],
       template_predicate
        (
           template_app
            (template_app (template_hole 0, template_var 1), template_var 0)
           ))),
    ("Transformers.le_trans_bot", "healthy ?t ==> le_trans (%P s. 0) ?t",
     template_implication
      ([template_predicate
         (template_app (template_hole 2, template_var 0))],
       template_predicate
        (
           template_app
            (template_app (template_hole 1, t_empty), template_var 0)
           ))),
    ("Transformers.feasible_fixes_bot",
     "feasible ?t ==> ?t (%s. 0) = (%s. 0)",
     template_implication
      ([template_predicate
         (template_app (template_hole 2, template_var 0))],
       template_equation
        (template_app (template_var 0, t_empty), t_empty))),
    ("Transformers.feasible_fixes_top",
     "feasible ?t ==> ?t (%s. 1) \<tturnstile> %s. 1",
     template_implication
      ([template_predicate
         (template_app (template_hole 2, template_var 0))],
       template_inequation
        (less_equals, template_app (template_var 0, t_empty), t_empty))),
    ("Transformers.feasible_pr_0", "feasible ?t ==> ?t (%x. 0) = (%x. 0)",
     template_implication
      ([template_predicate
         (template_app (template_hole 2, template_var 0))],
       template_equation
        (template_app (template_var 0, t_empty), t_empty))),
    ("Transformers.healthy_pr_bot", "healthy ?t ==> ?t (%s. 0) = (%s. 0)",
     template_implication
      ([template_predicate
         (template_app (template_hole 2, template_var 0))],
       template_equation
        (template_app (template_var 0, t_empty), t_empty))),
    ("Transformers.le_trans_top",
     "healthy ?t ==> le_trans ?t (%P s. bound_of P)",
     template_implication
      ([template_predicate
         (template_app (template_hole 2, template_var 0))],
       template_predicate
        (
           template_app
            (template_app (template_hole 1, template_var 0), t_empty)
           ))),
    ("Transformers.healthy_equiv",
     "equiv_trans ?t ?u ==> healthy ?t = healthy ?u",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 2, template_var 1),
              template_var 0)
            )],
       template_equation
        (template_app (template_hole 0, template_var 1),
         template_app (template_hole 0, template_var 0)))),
    ("Transformers.determI",
     "[| Transformers.additive ?t; maximal ?t |] ==> determ ?t",
     template_implication
      ([template_predicate (template_app (template_hole 2, template_var 0)),
        template_predicate
         (template_app (template_hole 1, template_var 0))],
       template_predicate
        (template_app (template_hole 0, template_var 0)))),
    ("Transformers.sublinear_subadd",
     "[| sublinear ?t; feasible ?t |] ==> sub_add ?t",
     template_implication
      ([template_predicate (template_app (template_hole 2, template_var 0)),
        template_predicate
         (template_app (template_hole 1, template_var 0))],
       template_predicate
        (template_app (template_hole 0, template_var 0)))),
    ("Transformers.feasible_sound",
     "[| feasible ?t; sound ?P |] ==> sound (?t ?P)",
     template_implication
      ([template_predicate (template_app (template_hole 1, template_var 1)),
        template_predicate
         (template_app (template_hole 0, template_var 0))],
       template_predicate
        (
           template_app
            (template_hole 0, template_app (template_var 1, template_var 0))
           ))),
    ("Transformers.feasible_unitaryD",
     "[| feasible ?t; unitary ?P |] ==> unitary (?t ?P)",
     template_implication
      ([template_predicate (template_app (template_hole 1, template_var 1)),
        template_predicate
         (template_app (template_hole 0, template_var 0))],
       template_predicate
        (
           template_app
            (template_hole 0, template_app (template_var 1, template_var 0))
           ))),
    ("Transformers.healthy_boundedD",
     "[| healthy ?t; sound ?P |] ==> Expectations.bounded (?t ?P)",
     template_implication
      ([template_predicate (template_app (template_hole 2, template_var 1)),
        template_predicate
         (template_app (template_hole 1, template_var 0))],
       template_predicate
        (
           template_app
            (template_hole 0, template_app (template_var 1, template_var 0))
           ))),
    ("Transformers.healthy_nnegD",
     "[| healthy ?t; sound ?P |] ==> nneg (?t ?P)",
     template_implication
      ([template_predicate (template_app (template_hole 2, template_var 1)),
        template_predicate
         (template_app (template_hole 1, template_var 0))],
       template_predicate
        (
           template_app
            (template_hole 0, template_app (template_var 1, template_var 0))
           ))),
    ("Transformers.healthy_sound",
     "[| healthy ?t; sound ?P |] ==> sound (?t ?P)",
     template_implication
      ([template_predicate (template_app (template_hole 1, template_var 1)),
        template_predicate
         (template_app (template_hole 0, template_var 0))],
       template_predicate
        (
           template_app
            (template_hole 0, template_app (template_var 1, template_var 0))
           ))),
    ("Transformers.healthy_unitary",
     "[| healthy ?t; unitary ?P |] ==> unitary (?t ?P)",
     template_implication
      ([template_predicate (template_app (template_hole 1, template_var 1)),
        template_predicate
         (template_app (template_hole 0, template_var 0))],
       template_predicate
        (
           template_app
            (template_hole 0, template_app (template_var 1, template_var 0))
           ))),
    ("Transformers.nearly_healthy_unitaryD",
     "[| nearly_healthy ?t; unitary ?P |] ==> unitary (?t ?P)",
     template_implication
      ([template_predicate (template_app (template_hole 1, template_var 1)),
        template_predicate
         (template_app (template_hole 0, template_var 0))],
       template_predicate
        (
           template_app
            (template_hole 0, template_app (template_var 1, template_var 0))
           ))),
    ("Transformers.healthy_equivI",
     "[| equiv_trans ?t ?u; healthy ?t |] ==> healthy ?u",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 1, template_var 1),
              template_var 0)
            ),
        template_predicate
         (template_app (template_hole 0, template_var 1))],
       template_predicate
        (template_app (template_hole 0, template_var 0)))),
    ("Transformers.equiv_sub_add",
     "[| equiv_trans ?t ?u; sub_add ?t |] ==> sub_add ?u",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 1, template_var 1),
              template_var 0)
            ),
        template_predicate
         (template_app (template_hole 0, template_var 1))],
       template_predicate
        (template_app (template_hole 0, template_var 0)))),
    ("Transformers.equiv_sub_distrib",
     "[| equiv_trans ?t ?u; sub_distrib ?t |] ==> sub_distrib ?u",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 1, template_var 1),
              template_var 0)
            ),
        template_predicate
         (template_app (template_hole 0, template_var 1))],
       template_predicate
        (template_app (template_hole 0, template_var 0)))),
    ("Transformers.le_trans_equiv_rsp",
     "equiv_trans ?t ?u ==> le_trans ?t ?v = le_trans ?u ?v",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 2, template_var 2),
              template_var 1)
            )],
       template_equation
        (template_app
          (template_app (template_hole 0, template_var 2), template_var 0),
         template_app
          (template_app (template_hole 0, template_var 1),
           template_var 0)))),
    ("Transformers.le_trans_equiv_rsp_right",
     "equiv_trans ?t ?u ==> le_trans ?v ?t = le_trans ?v ?u",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 2, template_var 2),
              template_var 1)
            )],
       template_equation
        (template_app
          (template_app (template_hole 0, template_var 0), template_var 2),
         template_app
          (template_app (template_hole 0, template_var 0),
           template_var 1)))),
    ("Transformers.le_utrans_equiv_rsp",
     "equiv_utrans ?t ?u ==> le_utrans ?t ?v = le_utrans ?u ?v",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 2, template_var 2),
              template_var 1)
            )],
       template_equation
        (template_app
          (template_app (template_hole 0, template_var 2), template_var 0),
         template_app
          (template_app (template_hole 0, template_var 1),
           template_var 0)))),
    ("Transformers.le_utrans_equiv_rsp_right",
     "equiv_utrans ?t ?u ==> le_utrans ?v ?t = le_utrans ?v ?u",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 2, template_var 2),
              template_var 1)
            )],
       template_equation
        (template_app
          (template_app (template_hole 0, template_var 0), template_var 2),
         template_app
          (template_app (template_hole 0, template_var 0),
           template_var 1)))),
    ("Transformers.equiv_trans_le_trans",
     "[| equiv_trans ?t ?u; le_trans ?u ?v |] ==> le_trans ?t ?v",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 1, template_var 2),
              template_var 1)
            ),
        template_predicate
         (
            template_app
             (template_app (template_hole 0, template_var 1),
              template_var 0)
            )],
       template_predicate
        (
           template_app
            (template_app (template_hole 0, template_var 2), template_var 0)
           ))),
    ("Transformers.equiv_trans_trans",
     "[| equiv_trans ?x ?y; equiv_trans ?y ?z |] ==> equiv_trans ?x ?z",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 0, template_var 2),
              template_var 1)
            ),
        template_predicate
         (
            template_app
             (template_app (template_hole 0, template_var 1),
              template_var 0)
            )],
       template_predicate
        (
           template_app
            (template_app (template_hole 0, template_var 2), template_var 0)
           ))),
    ("Transformers.equiv_utrans_le_utrans",
     "[| equiv_utrans ?t ?u; le_utrans ?u ?v |] ==> le_utrans ?t ?v",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 1, template_var 2),
              template_var 1)
            ),
        template_predicate
         (
            template_app
             (template_app (template_hole 0, template_var 1),
              template_var 0)
            )],
       template_predicate
        (
           template_app
            (template_app (template_hole 0, template_var 2), template_var 0)
           ))),
    ("Transformers.equiv_utrans_trans",
     "[| equiv_utrans ?x ?y; equiv_utrans ?y ?z |] ==> equiv_utrans ?x ?z",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 0, template_var 2),
              template_var 1)
            ),
        template_predicate
         (
            template_app
             (template_app (template_hole 0, template_var 1),
              template_var 0)
            )],
       template_predicate
        (
           template_app
            (template_app (template_hole 0, template_var 2), template_var 0)
           ))),
    ("Transformers.le_trans_equiv_trans",
     "[| le_trans ?t ?u; equiv_trans ?u ?v |] ==> le_trans ?t ?v",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 1, template_var 2),
              template_var 1)
            ),
        template_predicate
         (
            template_app
             (template_app (template_hole 0, template_var 1),
              template_var 0)
            )],
       template_predicate
        (
           template_app
            (template_app (template_hole 1, template_var 2), template_var 0)
           ))),
    ("Transformers.le_trans_antisym",
     "[| le_trans ?x ?y; le_trans ?y ?x |] ==> equiv_trans ?x ?y",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 1, template_var 1),
              template_var 0)
            ),
        template_predicate
         (
            template_app
             (template_app (template_hole 1, template_var 0),
              template_var 1)
            )],
       template_predicate
        (
           template_app
            (template_app (template_hole 0, template_var 1), template_var 0)
           ))),
    ("Transformers.le_trans_trans",
     "[| le_trans ?x ?y; le_trans ?y ?z |] ==> le_trans ?x ?z",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 0, template_var 2),
              template_var 1)
            ),
        template_predicate
         (
            template_app
             (template_app (template_hole 0, template_var 1),
              template_var 0)
            )],
       template_predicate
        (
           template_app
            (template_app (template_hole 0, template_var 2), template_var 0)
           ))),
    ("Transformers.le_utrans_equiv_utrans",
     "[| le_utrans ?t ?u; equiv_utrans ?u ?v |] ==> le_utrans ?t ?v",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 1, template_var 2),
              template_var 1)
            ),
        template_predicate
         (
            template_app
             (template_app (template_hole 0, template_var 1),
              template_var 0)
            )],
       template_predicate
        (
           template_app
            (template_app (template_hole 1, template_var 2), template_var 0)
           ))),
    ("Transformers.le_utrans_antisym",
     "[| le_utrans ?x ?y; le_utrans ?y ?x |] ==> equiv_utrans ?x ?y",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 1, template_var 1),
              template_var 0)
            ),
        template_predicate
         (
            template_app
             (template_app (template_hole 1, template_var 0),
              template_var 1)
            )],
       template_predicate
        (
           template_app
            (template_app (template_hole 0, template_var 1), template_var 0)
           ))),
    ("Transformers.le_utrans_trans",
     "[| le_utrans ?x ?y; le_utrans ?y ?z |] ==> le_utrans ?x ?z",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 0, template_var 2),
              template_var 1)
            ),
        template_predicate
         (
            template_app
             (template_app (template_hole 0, template_var 1),
              template_var 0)
            )],
       template_predicate
        (
           template_app
            (template_app (template_hole 0, template_var 2), template_var 0)
           ))),
    ("Transformers.sub_conj_wp_twice",
     "ALL s. sub_conj (?f s) ==> sub_conj (%P s. ?f s P s)",
     template_implication
      ([template_predicate (template_app (template_hole 1, t_empty))],
       template_predicate (template_app (template_hole 0, t_empty)))),
    ("Transformers.equiv_transD",
     "[| equiv_trans ?t ?u; sound ?P |] ==> ?t ?P = ?u ?P",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 2, template_var 2),
              template_var 1)
            ),
        template_predicate
         (template_app (template_hole 1, template_var 0))],
       template_equation
        (template_app (template_var 2, template_var 0),
         template_app (template_var 1, template_var 0)))),
    ("Transformers.equiv_utransD",
     "[| equiv_utrans ?t ?u; unitary ?P |] ==> ?t ?P = ?u ?P",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 2, template_var 2),
              template_var 1)
            ),
        template_predicate
         (template_app (template_hole 1, template_var 0))],
       template_equation
        (template_app (template_var 2, template_var 0),
         template_app (template_var 1, template_var 0)))),
    ("Transformers.le_transD",
     "[| le_trans ?t ?u; sound ?P |] ==> ?t ?P \<tturnstile> ?u ?P",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 2, template_var 2),
              template_var 1)
            ),
        template_predicate
         (template_app (template_hole 1, template_var 0))],
       template_inequation
        (less_equals, template_app (template_var 2, template_var 0),
         template_app (template_var 1, template_var 0)))),
    ("Transformers.le_utransD",
     "[| le_utrans ?t ?u; unitary ?P |] ==> ?t ?P \<tturnstile> ?u ?P",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 2, template_var 2),
              template_var 1)
            ),
        template_predicate
         (template_app (template_hole 1, template_var 0))],
       template_inequation
        (less_equals, template_app (template_var 2, template_var 0),
         template_app (template_var 1, template_var 0)))),
    ("Transformers.healthyI",
     "[| feasible ?t; mono_trans ?t; scaling ?t |] ==> healthy ?t",
     template_implication
      ([template_predicate (template_app (template_hole 3, template_var 0)),
        template_predicate (template_app (template_hole 2, template_var 0)),
        template_predicate
         (template_app (template_hole 1, template_var 0))],
       template_predicate
        (template_app (template_hole 0, template_var 0)))),
    ("Transformers.sd_sa_sublinear",
     "[| sub_distrib ?t; sub_add ?t; healthy ?t |] ==> sublinear ?t",
     template_implication
      ([template_predicate (template_app (template_hole 3, template_var 0)),
        template_predicate (template_app (template_hole 2, template_var 0)),
        template_predicate
         (template_app (template_hole 1, template_var 0))],
       template_predicate
        (template_app (template_hole 0, template_var 0)))),
    ("Transformers.maximalD",
     "[| maximal ?t; 0 <= ?c |] ==> ?t (%_. ?c) = (%_. ?c)",
     template_implication
      ([template_predicate (template_app (template_hole 3, template_var 1)),
        template_inequation (less_equals, template_hole 1, template_var 0)],
       template_equation
        (template_app (template_var 1, t_empty), t_empty))),
    ("Transformers.entails_weaken_pre",
     "[| ?Q \<tturnstile> ?t ?R; ?P \<tturnstile> ?Q |]
      ==> ?P \<tturnstile> ?t ?R",
     template_implication
      ([template_inequation
         (less_equals, template_var 3,
          template_app (template_var 2, template_var 1)),
        template_inequation (less_equals, template_var 0, template_var 3)],
       template_inequation
        (less_equals, template_var 0,
         template_app (template_var 2, template_var 1)))),
    ("Transformers.equiv_sublinear",
     "[| equiv_trans ?t ?u; sublinear ?t; healthy ?t |] ==> sublinear ?u",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 2, template_var 1),
              template_var 0)
            ),
        template_predicate (template_app (template_hole 1, template_var 1)),
        template_predicate
         (template_app (template_hole 0, template_var 1))],
       template_predicate
        (template_app (template_hole 1, template_var 0)))),
    ("Transformers.determ_negate",
     "determ ?t ==>
      ?t \<guillemotleft> ?P \<guillemotright> ?s +
      ?t \<guillemotleft> \<N> ?P \<guillemotright> ?s =
      1",
     template_implication
      ([template_predicate
         (template_app (template_hole 5, template_var 2))],
       template_equation
        (template_app
          (template_app
            (template_hole 3,
             template_app
              (template_app
                (template_var 2,
                 template_app (template_hole 2, template_var 1)),
               template_var 0)),
           template_app
            (template_app
              (template_var 2,
               template_app
                (template_hole 2,
                 template_app (template_hole 1, template_var 1))),
             template_var 0)),
         template_hole 0))),
    ("Transformers.equiv_transI",
     "(!!P. sound P ==> ?t P = ?u P) ==> equiv_trans ?t ?u",
     template_implication
      ([template_predicate (template_app (template_hole 4, t_empty))],
       template_predicate
        (
           template_app
            (template_app (template_hole 0, template_var 1), template_var 0)
           ))),
    ("Transformers.equiv_utransI",
     "(!!P. sound P ==> ?t P = ?u P) ==> equiv_utrans ?t ?u",
     template_implication
      ([template_predicate (template_app (template_hole 4, t_empty))],
       template_predicate
        (
           template_app
            (template_app (template_hole 0, template_var 1), template_var 0)
           ))),
    ("Transformers.le_transI",
     "(!!P. sound P ==> ?t P \<tturnstile> ?u P) ==> le_trans ?t ?u",
     template_implication
      ([template_predicate (template_app (template_hole 4, t_empty))],
       template_predicate
        (
           template_app
            (template_app (template_hole 0, template_var 1), template_var 0)
           ))),
    ("Transformers.le_utransI",
     "(!!P. unitary P ==> ?t P \<tturnstile> ?u P) ==> le_utrans ?t ?u",
     template_implication
      ([template_predicate (template_app (template_hole 4, t_empty))],
       template_predicate
        (
           template_app
            (template_app (template_hole 0, template_var 1), template_var 0)
           ))),
    ("Transformers.feasible_nnegD",
     "[| feasible ?t; bounded_by ?b ?P; nneg ?P |] ==> nneg (?t ?P)",
     template_implication
      ([template_predicate (template_app (template_hole 2, template_var 2)),
        template_predicate
         (
            template_app
             (template_app (template_hole 1, template_var 1),
              template_var 0)
            ),
        template_predicate
         (template_app (template_hole 0, template_var 0))],
       template_predicate
        (
           template_app
            (template_hole 0, template_app (template_var 2, template_var 0))
           ))),
    ("Transformers.healthy_nnegD2",
     "[| healthy ?t; bounded_by ?b ?P; nneg ?P |] ==> nneg (?t ?P)",
     template_implication
      ([template_predicate (template_app (template_hole 2, template_var 2)),
        template_predicate
         (
            template_app
             (template_app (template_hole 1, template_var 1),
              template_var 0)
            ),
        template_predicate
         (template_app (template_hole 0, template_var 0))],
       template_predicate
        (
           template_app
            (template_hole 0, template_app (template_var 2, template_var 0))
           ))),
    ("Transformers.maximalI",
     "(!!c. 0 <= c ==> ?t (%_. c) = (%_. c)) ==> maximal ?t",
     template_implication
      ([template_predicate (template_app (template_hole 5, t_empty))],
       template_predicate
        (template_app (template_hole 0, template_var 0)))),
    ("Transformers.feasible_bounded_by",
     "[| feasible ?t; sound ?P; bounded_by ?b ?P |]
      ==> bounded_by ?b (?t ?P)",
     template_implication
      ([template_predicate (template_app (template_hole 2, template_var 2)),
        template_predicate (template_app (template_hole 1, template_var 1)),
        template_predicate
         (
            template_app
             (template_app (template_hole 0, template_var 0),
              template_var 1)
            )],
       template_predicate
        (
           template_app
            (template_app (template_hole 0, template_var 0),
             template_app (template_var 2, template_var 1))
           ))),
    ("Transformers.feasible_boundedD",
     "[| feasible ?t; bounded_by ?b ?P; nneg ?P |]
      ==> bounded_by ?b (?t ?P)",
     template_implication
      ([template_predicate (template_app (template_hole 2, template_var 2)),
        template_predicate
         (
            template_app
             (template_app (template_hole 1, template_var 1),
              template_var 0)
            ),
        template_predicate
         (template_app (template_hole 0, template_var 0))],
       template_predicate
        (
           template_app
            (template_app (template_hole 1, template_var 1),
             template_app (template_var 2, template_var 0))
           ))),
    ("Transformers.healthy_bounded_byD",
     "[| healthy ?t; bounded_by ?b ?P; nneg ?P |]
      ==> bounded_by ?b (?t ?P)",
     template_implication
      ([template_predicate (template_app (template_hole 2, template_var 2)),
        template_predicate
         (
            template_app
             (template_app (template_hole 1, template_var 1),
              template_var 0)
            ),
        template_predicate
         (template_app (template_hole 0, template_var 0))],
       template_predicate
        (
           template_app
            (template_app (template_hole 1, template_var 1),
             template_app (template_var 2, template_var 0))
           ))),
    ("Transformers.healthy_bounded_byD2",
     "[| healthy ?t; bounded_by ?b ?P; sound ?P |]
      ==> bounded_by ?b (?t ?P)",
     template_implication
      ([template_predicate (template_app (template_hole 2, template_var 2)),
        template_predicate
         (
            template_app
             (template_app (template_hole 1, template_var 1),
              template_var 0)
            ),
        template_predicate
         (template_app (template_hole 0, template_var 0))],
       template_predicate
        (
           template_app
            (template_app (template_hole 1, template_var 1),
             template_app (template_var 2, template_var 0))
           ))),
    ("Transformers.standard_negate",
     "[| healthy ?t; sub_add ?t |]
      ==> ?t \<guillemotleft> ?P \<guillemotright> ?s +
          ?t \<guillemotleft> \<N> ?P \<guillemotright> ?s
          <= 1",
     template_implication
      ([template_predicate (template_app (template_hole 6, template_var 2)),
        template_predicate
         (template_app (template_hole 5, template_var 2))],
       template_inequation
        (less_equals,
         template_app
          (template_app
            (template_hole 3,
             template_app
              (template_app
                (template_var 2,
                 template_app (template_hole 2, template_var 1)),
               template_var 0)),
           template_app
            (template_app
              (template_var 2,
               template_app
                (template_hole 2,
                 template_app (template_hole 1, template_var 1))),
             template_var 0)),
         template_hole 0))),
    ("Transformers.sub_distribD",
     "[| sub_distrib ?t; sound ?P |]
      ==> ?t ?P ?s \<ominus> 1 <= ?t (%s'. ?P s' \<ominus> 1) ?s",
     template_implication
      ([template_predicate (template_app (template_hole 4, template_var 2)),
        template_predicate
         (template_app (template_hole 3, template_var 1))],
       template_inequation
        (less_equals,
         template_app
          (template_app
            (template_hole 1,
             template_app
              (template_app (template_var 2, template_var 1),
               template_var 0)),
           template_hole 0),
         template_app
          (template_app (template_var 2, t_empty), template_var 0)))),
    ("Transformers.conj_post",
     "[| ?P \<tturnstile> ?t \<guillemotleft> %s.
           ?Q s & ?R s \<guillemotright>;
         healthy ?t |]
      ==> ?P \<tturnstile> ?t \<guillemotleft> ?Q \<guillemotright>",
     template_implication
      ([template_inequation
         (less_equals, template_var 3,
          template_app
           (template_var 2, template_app (template_hole 2, t_empty))),
        template_predicate
         (template_app (template_hole 0, template_var 2))],
       template_inequation
        (less_equals, template_var 3,
         template_app
          (template_var 2,
           template_app (template_hole 2, template_var 1))))),
    ("Transformers.healthy_scale",
     "[| healthy ?t; 0 <= ?c; ?c <= 1 |] ==> healthy (%P s. ?c * ?t P s)",
     template_implication
      ([template_predicate (template_app (template_hole 4, template_var 1)),
        template_inequation (less_equals, template_hole 2, template_var 0),
        template_inequation (less_equals, template_var 0, template_hole 1)],
       template_predicate (template_app (template_hole 4, t_empty)))),
    ("Transformers.sub_conjD",
     "[| sub_conj ?t; sound ?P; sound ?Q |]
      ==> ?t ?P && ?t ?Q \<tturnstile> ?t (?P && ?Q)",
     template_implication
      ([template_predicate (template_app (template_hole 3, template_var 2)),
        template_predicate (template_app (template_hole 2, template_var 1)),
        template_predicate
         (template_app (template_hole 2, template_var 0))],
       template_inequation
        (less_equals,
         template_app
          (template_app
            (template_hole 0,
             template_app (template_var 2, template_var 1)),
           template_app (template_var 2, template_var 0)),
         template_app
          (template_var 2,
           template_app
            (template_app (template_hole 0, template_var 1),
             template_var 0))))),
    ("Transformers.healthy_monoD2",
     "[| healthy ?t; sound ?P; sound ?Q; ?P \<tturnstile> ?Q |]
      ==> ?t ?P \<tturnstile> ?t ?Q",
     template_implication
      ([template_predicate (template_app (template_hole 2, template_var 2)),
        template_predicate (template_app (template_hole 1, template_var 1)),
        template_predicate (template_app (template_hole 1, template_var 0)),
        template_inequation (less_equals, template_var 1, template_var 0)],
       template_inequation
        (less_equals, template_app (template_var 2, template_var 1),
         template_app (template_var 2, template_var 0)))),
    ("Transformers.mono_transD",
     "[| mono_trans ?t; sound ?P; sound ?Q; ?P \<tturnstile> ?Q |]
      ==> ?t ?P \<tturnstile> ?t ?Q",
     template_implication
      ([template_predicate (template_app (template_hole 2, template_var 2)),
        template_predicate (template_app (template_hole 1, template_var 1)),
        template_predicate (template_app (template_hole 1, template_var 0)),
        template_inequation (less_equals, template_var 1, template_var 0)],
       template_inequation
        (less_equals, template_app (template_var 2, template_var 1),
         template_app (template_var 2, template_var 0)))),
    ("Transformers.nearly_healthy_monoD",
     "[| nearly_healthy ?t; ?P \<tturnstile> ?Q; unitary ?P; unitary ?Q |]
      ==> ?t ?P \<tturnstile> ?t ?Q",
     template_implication
      ([template_predicate (template_app (template_hole 2, template_var 2)),
        template_inequation (less_equals, template_var 1, template_var 0),
        template_predicate (template_app (template_hole 0, template_var 1)),
        template_predicate
         (template_app (template_hole 0, template_var 0))],
       template_inequation
        (less_equals, template_app (template_var 2, template_var 1),
         template_app (template_var 2, template_var 0)))),
    ("Transformers.sub_distribI2",
     "(!!P. sound P ==>
            %s. ?t P s \<ominus>
                1 \<tturnstile> ?t (%s. P s \<ominus> 1)) ==>
      sub_distrib ?t",
     template_implication
      ([template_predicate (template_app (template_hole 6, t_empty))],
       template_predicate
        (template_app (template_hole 0, template_var 0)))),
    ("Transformers.fold_premise",
     "[| healthy ?t;
         \<guillemotleft> ?P \<guillemotright> \<tturnstile> ?t
                        \<guillemotleft> ?Q \<guillemotright> |]
      ==> ALL s. ?P s --> 1 <= ?t \<guillemotleft> ?Q \<guillemotright> s",
     template_implication
      ([template_predicate (template_app (template_hole 6, template_var 2)),
        template_inequation
         (less_equals, template_app (template_hole 4, template_var 1),
          template_app
           (template_var 2,
            template_app (template_hole 4, template_var 0)))],
       template_predicate (template_app (template_hole 3, t_empty)))),
    ("Transformers.use_premise",
     "[| healthy ?t;
         !!s. ?P s ==> 1 <= ?t \<guillemotleft> ?Q \<guillemotright> s |]
      ==> \<guillemotleft> ?P \<guillemotright> \<tturnstile> ?t
                         \<guillemotleft> ?Q \<guillemotright>",
     template_implication
      ([template_predicate (template_app (template_hole 5, template_var 2)),
        template_predicate (template_app (template_hole 4, t_empty))],
       template_inequation
        (less_equals, template_app (template_hole 1, template_var 1),
         template_app
          (template_var 2,
           template_app (template_hole 1, template_var 0))))),
    ("Transformers.sub_distribI",
     "(!!P s.
          sound P ==>
          ?t P s \<ominus> 1 <= ?t (%s'. P s' \<ominus> 1) s) ==>
      sub_distrib ?t",
     template_implication
      ([template_predicate (template_app (template_hole 7, t_empty))],
       template_predicate
        (template_app (template_hole 0, template_var 0)))),
    ("Transformers.sub_conjI",
     "(!!P Q.
          [| sound P; sound Q |]
          ==> ?t P && ?t Q \<tturnstile> ?t (P && Q)) ==>
      sub_conj ?t",
     template_implication
      ([template_predicate (template_app (template_hole 5, t_empty))],
       template_predicate
        (template_app (template_hole 0, template_var 0)))),
    ("Transformers.mono_transI",
     "(!!P Q.
          [| sound P; sound Q; P \<tturnstile> Q |]
          ==> ?t P \<tturnstile> ?t Q) ==>
      mono_trans ?t",
     template_implication
      ([template_predicate (template_app (template_hole 4, t_empty))],
       template_predicate
        (template_app (template_hole 0, template_var 0)))),
    ("Transformers.scalingD",
     "[| scaling ?t; sound ?P; 0 <= ?c |]
      ==> ?c * ?t ?P ?x = ?t (%x. ?c * ?P x) ?x",
     template_implication
      ([template_predicate (template_app (template_hole 5, template_var 3)),
        template_predicate (template_app (template_hole 4, template_var 2)),
        template_inequation (less_equals, template_hole 2, template_var 1)],
       template_equation
        (template_app
          (template_app (template_hole 0, template_var 1),
           template_app
            (template_app (template_var 3, template_var 2),
             template_var 0)),
         template_app
          (template_app (template_var 3, t_empty), template_var 0)))),
    ("Transformers.right_scalingD",
     "[| scaling ?t; sound ?P; 0 <= ?c |]
      ==> ?t ?P ?s * ?c = ?t (%s. ?P s * ?c) ?s",
     template_implication
      ([template_predicate (template_app (template_hole 5, template_var 3)),
        template_predicate (template_app (template_hole 4, template_var 2)),
        template_inequation (less_equals, template_hole 2, template_var 1)],
       template_equation
        (template_app
          (template_app
            (template_hole 0,
             template_app
              (template_app (template_var 3, template_var 2),
               template_var 0)),
           template_var 1),
         template_app
          (template_app (template_var 3, t_empty), template_var 0)))),
    ("Transformers.entails_strengthen_post",
     "[| ?P \<tturnstile> ?t ?Q; healthy ?t; sound ?R; ?Q \<tturnstile> ?R;
         sound ?Q |]
      ==> ?P \<tturnstile> ?t ?R",
     template_implication
      ([template_inequation
         (less_equals, template_var 3,
          template_app (template_var 2, template_var 1)),
        template_predicate (template_app (template_hole 1, template_var 2)),
        template_predicate (template_app (template_hole 0, template_var 0)),
        template_inequation (less_equals, template_var 1, template_var 0),
        template_predicate
         (template_app (template_hole 0, template_var 1))],
       template_inequation
        (less_equals, template_var 3,
         template_app (template_var 2, template_var 0)))),
    ("Transformers.additiveD",
     "[| Transformers.additive ?t; sound ?P; sound ?Q |]
      ==> ?t (%s. ?P s + ?Q s) = (%s. ?t ?P s + ?t ?Q s)",
     template_implication
      ([template_predicate (template_app (template_hole 3, template_var 2)),
        template_predicate (template_app (template_hole 2, template_var 1)),
        template_predicate
         (template_app (template_hole 2, template_var 0))],
       template_equation
        (template_app (template_var 2, t_empty), t_empty))),
    ("Transformers.sub_addD",
     "[| sub_add ?t; sound ?P; sound ?Q |]
      ==> ?t ?P ?s + ?t ?Q ?s <= ?t (%s'. ?P s' + ?Q s') ?s",
     template_implication
      ([template_predicate (template_app (template_hole 3, template_var 3)),
        template_predicate (template_app (template_hole 2, template_var 2)),
        template_predicate
         (template_app (template_hole 2, template_var 1))],
       template_inequation
        (less_equals,
         template_app
          (template_app
            (template_hole 0,
             template_app
              (template_app (template_var 3, template_var 2),
               template_var 0)),
           template_app
            (template_app (template_var 3, template_var 1),
             template_var 0)),
         template_app
          (template_app (template_var 3, t_empty), template_var 0)))),
    ("Transformers.additive_delta_split",
     "[| Transformers.additive ?t; healthy ?t; sound ?P |]
      ==> ?t ?P ?x =
          (SUM y:UNIV.
              ?P y * ?t \<guillemotleft> %z. z = y \<guillemotright> ?x)",
     template_implication
      ([template_predicate (template_app (template_hole 8, template_var 2)),
        template_predicate (template_app (template_hole 7, template_var 2)),
        template_predicate
         (template_app (template_hole 6, template_var 1))],
       template_equation
        (template_app
          (template_app (template_var 2, template_var 1), template_var 0),
         template_app
          (template_app (template_hole 4, t_empty), template_hole 0)))),
    ("Transformers.entails_scale",
     "[| ?P \<tturnstile> ?t ?Q; healthy ?t; sound ?Q; 0 <= ?c |]
      ==> %s. ?c * ?P s \<tturnstile> ?t (%s. ?c * ?Q s)",
     template_implication
      ([template_inequation
         (less_equals, template_var 3,
          template_app (template_var 2, template_var 1)),
        template_predicate (template_app (template_hole 4, template_var 2)),
        template_predicate (template_app (template_hole 3, template_var 1)),
        template_inequation (less_equals, template_hole 1, template_var 0)],
       template_inequation
        (less_equals, t_empty, template_app (template_var 2, t_empty)))),
    ("Transformers.sub_addI2",
     "(!!P Q.
          [| sound P; sound Q |]
          ==> %s. ?t P s + ?t Q s \<tturnstile> ?t (%s. P s + Q s)) ==>
      sub_add ?t",
     template_implication
      ([template_predicate (template_app (template_hole 5, t_empty))],
       template_predicate
        (template_app (template_hole 0, template_var 0)))),
    ("Transformers.scalingI",
     "(!!P c x.
          [| sound P; 0 <= c |] ==> c * ?t P x = ?t (%x. c * P x) x) ==>
      scaling ?t",
     template_implication
      ([template_predicate (template_app (template_hole 9, t_empty))],
       template_predicate
        (template_app (template_hole 0, template_var 0)))),
    ("Transformers.sub_add_sum",
     "[| sub_add ?t; healthy ?t; !!x. sound (?P x) |]
      ==> %x. SUM y:?S.
                 ?t (?P y) x \<tturnstile> ?t (%x. SUM y:?S. ?P y x)",
     template_implication
      ([template_predicate (template_app (template_hole 5, template_var 2)),
        template_predicate (template_app (template_hole 4, template_var 2)),
        template_predicate (template_app (template_hole 3, t_empty))],
       template_inequation
        (less_equals, t_empty, template_app (template_var 2, t_empty)))),
    ("Transformers.entails_combine",
     "[| ?P \<tturnstile> ?t ?R; ?Q \<tturnstile> ?t ?S; sub_conj ?t;
         sound ?R; sound ?S |]
      ==> ?P && ?Q \<tturnstile> ?t (?R && ?S)",
     template_implication
      ([template_inequation
         (less_equals, template_var 4,
          template_app (template_var 3, template_var 2)),
        template_inequation
         (less_equals, template_var 1,
          template_app (template_var 3, template_var 0)),
        template_predicate (template_app (template_hole 2, template_var 3)),
        template_predicate (template_app (template_hole 1, template_var 2)),
        template_predicate
         (template_app (template_hole 1, template_var 0))],
       template_inequation
        (less_equals,
         template_app
          (template_app (template_hole 0, template_var 4), template_var 1),
         template_app
          (template_var 3,
           template_app
            (template_app (template_hole 0, template_var 2),
             template_var 0))))),
    ("Transformers.entails_pconj_assumption",
     "[| feasible ?t; !!s. ?P s ==> ?Q s <= ?t ?R s; unitary ?Q;
         unitary ?R |]
      ==> \<guillemotleft> ?P \<guillemotright> && ?Q \<tturnstile> ?t ?R",
     template_implication
      ([template_predicate (template_app (template_hole 6, template_var 3)),
        template_predicate (template_app (template_hole 5, t_empty)),
        template_predicate (template_app (template_hole 3, template_var 1)),
        template_predicate
         (template_app (template_hole 3, template_var 0))],
       template_inequation
        (less_equals,
         template_app
          (template_app
            (template_hole 1,
             template_app (template_hole 0, template_var 2)),
           template_var 1),
         template_app (template_var 3, template_var 0)))),
    ("Transformers.additiveI",
     "(!!P Q s.
          [| sound P; sound Q |]
          ==> ?t (%s. P s + Q s) s = ?t P s + ?t Q s) ==>
      Transformers.additive ?t",
     template_implication
      ([template_predicate (template_app (template_hole 6, t_empty))],
       template_predicate
        (template_app (template_hole 0, template_var 0)))),
    ("Transformers.sub_addI",
     "(!!P Q s.
          [| sound P; sound Q |]
          ==> ?t P s + ?t Q s <= ?t (%s'. P s' + Q s') s) ==>
      sub_add ?t",
     template_implication
      ([template_predicate (template_app (template_hole 6, t_empty))],
       template_predicate
        (template_app (template_hole 0, template_var 0)))),
    ("Transformers.additive_sum",
     "[| Transformers.additive ?t; healthy ?t; finite ?S;
         !!z. sound (?P z) |]
      ==> ?t (%x. SUM y:?S. ?P y x) = (%x. SUM y:?S. ?t (?P y) x)",
     template_implication
      ([template_predicate (template_app (template_hole 6, template_var 2)),
        template_predicate (template_app (template_hole 5, template_var 2)),
        template_predicate (template_app (template_hole 4, template_var 1)),
        template_predicate (template_app (template_hole 3, t_empty))],
       template_equation
        (template_app (template_var 2, t_empty), t_empty))),
    ("Transformers.nearly_healthyI",
     "[| !!P. unitary P ==> unitary (?t P);
         !!P Q.
            [| unitary P; unitary Q; P \<tturnstile> Q |]
            ==> ?t P \<tturnstile> ?t Q |]
      ==> nearly_healthy ?t",
     template_implication
      ([template_predicate (template_app (template_hole 4, t_empty)),
        template_predicate (template_app (template_hole 4, t_empty))],
       template_predicate
        (template_app (template_hole 0, template_var 0)))),
    ("Transformers.feasibleI",
     "[| !!b P. [| bounded_by b P; nneg P |] ==> bounded_by b (?t P);
         !!b P. [| bounded_by b P; nneg P |] ==> nneg (?t P) |]
      ==> feasible ?t",
     template_implication
      ([template_predicate (template_app (template_hole 5, t_empty)),
        template_predicate (template_app (template_hole 5, t_empty))],
       template_predicate
        (template_app (template_hole 0, template_var 0)))),
    ("Transformers.additive_guard_split",
     "[| Transformers.additive ?t; healthy ?t; sound ?P |]
      ==> ?t ?P ?x =
          (SUM y:{s. ?G s}.
              ?P y * ?t \<guillemotleft> %z. z = y \<guillemotright> ?x) +
          (SUM y:{s. ~ ?G s}.
              ?P y * ?t \<guillemotleft> %z. z = y \<guillemotright> ?x)",
     template_implication
      ([template_predicate
         (template_app (template_hole 10, template_var 3)),
        template_predicate (template_app (template_hole 9, template_var 3)),
        template_predicate
         (template_app (template_hole 8, template_var 2))],
       template_equation
        (template_app
          (template_app (template_var 3, template_var 2), template_var 1),
         template_app
          (template_app
            (template_hole 6,
             template_app
              (template_app (template_hole 5, t_empty),
               template_app (template_hole 1, t_empty))),
           template_app
            (template_app (template_hole 5, t_empty),
             template_app (template_hole 1, t_empty)))))),
    ("Transformers.sub_add_guard_split",
     "[| sub_add ?t; healthy ?t; sound ?P |]
      ==> (SUM y:{s. ?G s}.
              ?P y * ?t \<guillemotleft> %z. z = y \<guillemotright> ?s) +
          (SUM y:{s. ~ ?G s}.
              ?P y * ?t \<guillemotleft> %z. z = y \<guillemotright> ?s)
          <= ?t ?P ?s",
     template_implication
      ([template_predicate
         (template_app (template_hole 10, template_var 3)),
        template_predicate (template_app (template_hole 9, template_var 3)),
        template_predicate
         (template_app (template_hole 8, template_var 2))],
       template_inequation
        (less_equals,
         template_app
          (template_app
            (template_hole 6,
             template_app
              (template_app (template_hole 5, t_empty),
               template_app (template_hole 1, t_empty))),
           template_app
            (template_app (template_hole 5, t_empty),
             template_app (template_hole 1, t_empty))),
         template_app
          (template_app (template_var 3, template_var 2),
           template_var 1)))),
    ("Transformers.sublinearD",
     "[| sublinear ?t; sound ?P; sound ?Q; 0 <= ?a; 0 <= ?b; 0 <= ?c |]
      ==> ?a * ?t ?P ?s + ?b * ?t ?Q ?s \<ominus> ?c
          <= ?t (%s'. ?a * ?P s' + ?b * ?Q s' \<ominus> ?c) ?s",
     template_implication
      ([template_predicate (template_app (template_hole 6, template_var 6)),
        template_predicate (template_app (template_hole 5, template_var 5)),
        template_predicate (template_app (template_hole 5, template_var 4)),
        template_inequation (less_equals, template_hole 3, template_var 3),
        template_inequation (less_equals, template_hole 3, template_var 2),
        template_inequation (less_equals, template_hole 3, template_var 1)],
       template_inequation
        (less_equals,
         template_app
          (template_app
            (template_hole 2,
             template_app
              (template_app
                (template_hole 1,
                 template_app
                  (template_app (template_hole 0, template_var 3),
                   template_app
                    (template_app (template_var 6, template_var 5),
                     template_var 0))),
               template_app
                (template_app (template_hole 0, template_var 2),
                 template_app
                  (template_app (template_var 6, template_var 4),
                   template_var 0)))),
           template_var 1),
         template_app
          (template_app (template_var 6, t_empty), template_var 0)))),
    ("Transformers.sublinearI",
     "(!!a b c P Q s.
          [| sound P; sound Q; 0 <= a; 0 <= b; 0 <= c |]
          ==> a * ?t P s + b * ?t Q s \<ominus> c
              <= ?t (%s'. a * P s' + b * Q s' \<ominus> c) s) ==>
      sublinear ?t",
     template_implication
      ([template_predicate (template_app (template_hole 10, t_empty))],
       template_predicate
        (template_app (template_hole 0, template_var 0)))),
    ("Transformers.healthy_parts",
     "[| !!b P. [| bounded_by b P; nneg P |] ==> bounded_by b (?t P);
         !!b P. [| bounded_by b P; nneg P |] ==> nneg (?t P);
         !!P Q.
            [| sound P; sound Q; P \<tturnstile> Q |]
            ==> ?t P \<tturnstile> ?t Q;
         !!P c x.
            [| sound P; 0 <= c |] ==> c * ?t P x = ?t (%x. c * P x) x |]
      ==> healthy ?t",
     template_implication
      ([template_predicate (template_app (template_hole 12, t_empty)),
        template_predicate (template_app (template_hole 12, t_empty)),
        template_predicate (template_app (template_hole 11, t_empty)),
        template_predicate (template_app (template_hole 11, t_empty))],
       template_predicate
        (template_app (template_hole 0, template_var 0))))]
