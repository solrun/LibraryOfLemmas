Loading theory "Draft.Binary_Relations" (required by "Draft.Kleene_Fixed_PointMoreTemplates" via "Draft.Kleene_Fixed_Point" via "Draft.Complete_Relations")
Loading theory "HOL-Library.Function_Algebras" (required by "Draft.Kleene_Fixed_PointMoreTemplates" via "Draft.ExtrEqs" via "HOL-Library.BigO")
Loading theory "HOL-Library.Nat_Bijection" (required by "Draft.Kleene_Fixed_PointMoreTemplates" via "Draft.ExtrEqs" via "HOL-Library.Stream")
Loading theory "HOL-Library.Set_Algebras" (required by "Draft.Kleene_Fixed_PointMoreTemplates" via "Draft.ExtrEqs" via "HOL-Library.BigO")
instantiation
  set :: (plus) plus
  plus_set == plus :: 'a set => 'a set => 'a set
instantiation
  fun :: (type, plus) plus
  plus_fun == plus :: ('a => 'b) => ('a => 'b) => 'a => 'b
instantiation
  set :: (times) times
  times_set == times :: 'a set => 'a set => 'a set
instantiation
  fun :: (type, zero) zero
  zero_fun == zero_class.zero :: 'a => 'b
instantiation
  set :: (zero) zero
  zero_set == zero_class.zero :: 'a set
instantiation
  fun :: (type, times) times
  times_fun == times :: ('a => 'b) => ('a => 'b) => 'a => 'b
instantiation
  set :: (one) one
  one_set == one_class.one :: 'a set
instantiation
  fun :: (type, one) one
  one_fun == one_class.one :: 'a => 'b
Found termination order: "(%p. size (snd p)) <*mlex*> {}"
### theory "HOL-Library.Function_Algebras"
### 0.127s elapsed time, 0.530s cpu time, 0.050s GC time
Loading theory "HOL-Library.Tree" (required by "Draft.Kleene_Fixed_PointMoreTemplates" via "Draft.ExtrEqs" via "Draft.Templates")
Found termination order: "size_list size <*mlex*> {}"
### theory "HOL-Library.Set_Algebras"
### 0.219s elapsed time, 0.894s cpu time, 0.050s GC time
Loading theory "HOL-Library.BigO" (required by "Draft.Kleene_Fixed_PointMoreTemplates" via "Draft.ExtrEqs")
locale less_eq_syntax
  fixes
    less_eq :: "'a => 'a => bool"  (infix \<open>\<sqsubseteq>\<close> 50)
locale less_syntax
  fixes less :: "'a => 'a => bool"  (infix \<open>\<sqsubset>\<close> 50)
locale equivalence_syntax
  fixes equiv :: "'a => 'a => bool"  (infix \<open>\<sim>\<close> 50)
locale less_eq_notations
  fixes
    less_eq :: "'a => 'a => bool"  (infix \<open>\<sqsubseteq>\<close> 50)
locale less_notations
  fixes less :: "'a => 'a => bool"  (infix \<open>\<sqsubset>\<close> 50)
locale related_set
  fixes A :: "'a set"
    and
    less_eq :: "'a => 'a => bool"  (infix \<open>\<sqsubseteq>\<close> 50)
locale reflexive
  fixes A :: "'a set"
    and
    less_eq :: "'a => 'a => bool"  (infix \<open>\<sqsubseteq>\<close> 50)
  assumes "reflexive A (\<sqsubseteq>)"
### theory "HOL-Library.Nat_Bijection"
### 0.325s elapsed time, 1.301s cpu time, 0.126s GC time
Loading theory "HOL-Library.Stream" (required by "Draft.Kleene_Fixed_PointMoreTemplates" via "Draft.ExtrEqs")
locale irreflexive
  fixes A :: "'a set"
    and less :: "'a => 'a => bool"  (infix \<open>\<sqsubset>\<close> 50)
  assumes "irreflexive A (\<sqsubset>)"
locale transitive
  fixes A :: "'a set"
    and
    less_eq :: "'a => 'a => bool"  (infix \<open>\<sqsubseteq>\<close> 50)
  assumes "transitive A (\<sqsubseteq>)"
locale symmetric
  fixes A :: "'a set"
    and equiv :: "'a => 'a => bool"  (infix \<open>\<sim>\<close> 50)
  assumes "symmetric A (\<sim>)"
### Cannot skip proof of schematic goal statement
locale antisymmetric
  fixes A :: "'a set"
    and
    less_eq :: "'a => 'a => bool"  (infix \<open>\<sqsubseteq>\<close> 50)
  assumes "antisymmetric A (\<sqsubseteq>)"
locale semiattractive
  fixes A :: "'a set"
    and
    less_eq :: "'a => 'a => bool"  (infix \<open>\<sqsubseteq>\<close> 50)
  assumes "semiattractive A (\<sqsubseteq>)"
locale attractive
  fixes A :: "'a set"
    and
    less_eq :: "'a => 'a => bool"  (infix \<open>\<sqsubseteq>\<close> 50)
  assumes "attractive A (\<sqsubseteq>)"
### Cannot skip proof of schematic goal statement
### Rule already declared as introduction (intro)
### (!!x. ?f x = ?g x) ==> ?f = ?g
locale antisymmetric
  fixes A :: "'a set"
    and
    less_eq :: "'a => 'a => bool"  (infix \<open>\<sqsubseteq>\<close> 50)
  assumes "antisymmetric A (\<sqsubseteq>)"
locale transitive
  fixes A :: "'a set"
    and
    less_eq :: "'a => 'a => bool"  (infix \<open>\<sqsubseteq>\<close> 50)
  assumes "transitive A (\<sqsubseteq>)"
### Cannot skip proof of schematic goal statement
### Rule already declared as introduction (intro)
### (!!x. ?f x = ?g x) ==> ?f = ?g
locale asymmetric
  fixes A :: "'a set"
    and less :: "'a => 'a => bool"  (infix \<open>\<sqsubset>\<close> 50)
  assumes "asymmetric A (\<sqsubset>)"
locale quasi_ordered_set
  fixes A :: "'a set"
    and
    less_eq :: "'a => 'a => bool"  (infix \<open>\<sqsubseteq>\<close> 50)
  assumes "quasi_ordered_set A (\<sqsubseteq>)"
locale near_ordered_set
  fixes A :: "'a set"
    and
    less_eq :: "'a => 'a => bool"  (infix \<open>\<sqsubseteq>\<close> 50)
  assumes "near_ordered_set A (\<sqsubseteq>)"
locale pseudo_ordered_set
  fixes A :: "'a set"
    and
    less_eq :: "'a => 'a => bool"  (infix \<open>\<sqsubseteq>\<close> 50)
  assumes "pseudo_ordered_set A (\<sqsubseteq>)"
consts
  left :: "'a tree => 'a tree"
consts
  right :: "'a tree => 'a tree"
locale partially_ordered_set
  fixes A :: "'a set"
    and
    less_eq :: "'a => 'a => bool"  (infix \<open>\<sqsubseteq>\<close> 50)
  assumes "partially_ordered_set A (\<sqsubseteq>)"
locale strict_ordered_set
  fixes A :: "'a set"
    and less :: "'a => 'a => bool"  (infix \<open>\<sqsubset>\<close> 50)
  assumes "strict_ordered_set A (\<sqsubset>)"
Found termination order: "size <*mlex*> {}"
consts
  shift :: "'a list => 'a stream => 'a stream"
locale tolerance
  fixes A :: "'a set"
    and equiv :: "'a => 'a => bool"  (infix \<open>\<sim>\<close> 50)
  assumes "tolerance A (\<sim>)"
Proofs for coinductive predicate(s) "streamsp"
  Proving monotonicity ...
### Cannot skip proof of schematic goal statement
locale partial_equivalence
  fixes A :: "'a set"
    and equiv :: "'a => 'a => bool"  (infix \<open>\<sim>\<close> 50)
  assumes "partial_equivalence A (\<sim>)"
Found termination order: "size <*mlex*> {}"
consts
  snth :: "'a stream => nat => 'a"
consts
  stake :: "nat => 'a stream => 'a list"
locale equivalence
  fixes A :: "'a set"
    and equiv :: "'a => 'a => bool"  (infix \<open>\<sim>\<close> 50)
  assumes "equivalence A (\<sim>)"
consts
  sdrop :: "nat => 'a stream => 'a stream"
Found termination order: "size <*mlex*> {}"
locale semiconnex
  fixes A :: "'a set"
    and less :: "'a => 'a => bool"  (infix \<open>\<sqsubset>\<close> 50)
  assumes "semiconnex A (\<sqsubset>)"
consts
  sfilter :: "('a => bool) => 'a stream => 'a stream"
locale semiconnex_irreflexive
  fixes A :: "'a set"
    and less :: "'a => 'a => bool"  (infix \<open>\<sqsubset>\<close> 50)
  assumes "semiconnex_irreflexive A (\<sqsubset>)"
class height = type +
  fixes height :: "'a => nat"
instantiation
  tree :: (type) height
  height_tree == height :: 'a tree => nat
consts
  cycle :: "'a list => 'a stream"
locale connex
  fixes A :: "'a set"
    and
    less_eq :: "'a => 'a => bool"  (infix \<open>\<sqsubseteq>\<close> 50)
  assumes "connex A (\<sqsubseteq>)"
consts
  siterate :: "('a => 'a) => 'a => 'a stream"
### theory "HOL-Library.BigO"
### 1.021s elapsed time, 3.820s cpu time, 0.889s GC time
Found termination order: "size <*mlex*> {}"
locale total_pseudo_ordered_set
  fixes A :: "'a set"
    and
    less_eq :: "'a => 'a => bool"  (infix \<open>\<sqsubseteq>\<close> 50)
  assumes "total_pseudo_ordered_set A (\<sqsubseteq>)"
locale total_quasi_ordered_set
  fixes A :: "'a set"
    and
    less_eq :: "'a => 'a => bool"  (infix \<open>\<sqsubseteq>\<close> 50)
  assumes "total_quasi_ordered_set A (\<sqsubseteq>)"
consts
  flat :: "'a list stream => 'a stream"
locale total_ordered_set
  fixes A :: "'a set"
    and
    less_eq :: "'a => 'a => bool"  (infix \<open>\<sqsubseteq>\<close> 50)
  assumes "total_ordered_set A (\<sqsubseteq>)"
Found termination order: "size <*mlex*> {}"
locale well_founded
  fixes A :: "'a set"
    and less :: "'a => 'a => bool"  (infix \<open>\<sqsubset>\<close> 50)
  assumes "well_founded A (\<sqsubset>)"
consts
  sinterleave :: "'a stream => 'a stream => 'a stream"
### Cannot skip proof of schematic goal statement
consts
  szip :: "'a stream => 'b stream => ('a * 'b) stream"
### Cannot skip proof of schematic goal statement
Found termination order: "size <*mlex*> {}"
consts
  smap2 :: "('a => 'b => 'c) => 'a stream => 'b stream => 'c stream"
### theory "HOL-Library.Stream"
### 1.117s elapsed time, 4.043s cpu time, 0.880s GC time
Found termination order: "size <*mlex*> {}"
locale well_founded_ordered_set
  fixes A :: "'a set"
    and less :: "'a => 'a => bool"  (infix \<open>\<sqsubset>\<close> 50)
  assumes "well_founded_ordered_set A (\<sqsubset>)"
locale well_related_set
  fixes A :: "'a set"
    and
    less_eq :: "'a => 'a => bool"  (infix \<open>\<sqsubseteq>\<close> 50)
  assumes "well_related_set A (\<sqsubseteq>)"
Found termination order: "size <*mlex*> {}"
locale pre_well_ordered_set
  fixes A :: "'a set"
    and
    less_eq :: "'a => 'a => bool"  (infix \<open>\<sqsubseteq>\<close> 50)
  assumes "pre_well_ordered_set A (\<sqsubseteq>)"
Found termination order: "size <*mlex*> {}"
locale well_ordered_set
  fixes A :: "'a set"
    and
    less_eq :: "'a => 'a => bool"  (infix \<open>\<sqsubseteq>\<close> 50)
  assumes "well_ordered_set A (\<sqsubseteq>)"
Found termination order: "size <*mlex*> {}"
Found termination order: "(%p. size (fst p)) <*mlex*> {}"
locale connex
  fixes A :: "'a set"
    and
    less_eq :: "'a => 'a => bool"  (infix \<open>\<sqsubseteq>\<close> 50)
  assumes "connex A (\<sqsubseteq>)"
locale compatible
  fixes A :: "'a set"
    and
    less_eq :: "'a => 'a => bool"  (infix \<open>\<sqsubseteq>\<close> 50)
    and less :: "'a => 'a => bool"  (infix \<open>\<sqsubset>\<close> 50)
  assumes "compatible A (\<sqsubseteq>) (\<sqsubset>)"
locale compatible_ordering
  fixes A :: "'a set"
    and
    less_eq :: "'a => 'a => bool"  (infix \<open>\<sqsubseteq>\<close> 50)
    and less :: "'a => 'a => bool"  (infix \<open>\<sqsubset>\<close> 50)
  assumes "compatible_ordering A (\<sqsubseteq>) (\<sqsubset>)"
Found termination order: "size <*mlex*> {}"
[| ?x \<sqsubset> ?y; ?y \<sqsubset> ?z; ?x : A; ?y : A; ?z : A |]
==> ?x \<sqsubset> ?z
[| ?x \<sqsubset> ?y; ?y \<sqsubset> ?x; ?x : A; ?y : A |] ==> False
?x : A ==> ~ ?x \<sqsubset> ?x
locale transitive
  fixes A :: "'a set"
    and
    less_eq :: "'a => 'a => bool"  (infix \<open>\<sqsubseteq>\<close> 50)
  assumes "transitive A (\<sqsubseteq>)"
locale attractive_ordering
  fixes A :: "'a set"
    and
    less_eq :: "'a => 'a => bool"  (infix \<open>\<sqsubseteq>\<close> 50)
    and less :: "'a => 'a => bool"  (infix \<open>\<sqsubset>\<close> 50)
  assumes "attractive_ordering A (\<sqsubseteq>) (\<sqsubset>)"
locale pseudo_ordering
  fixes A :: "'a set"
    and
    less_eq :: "'a => 'a => bool"  (infix \<open>\<sqsubseteq>\<close> 50)
    and less :: "'a => 'a => bool"  (infix \<open>\<sqsubset>\<close> 50)
  assumes "pseudo_ordering A (\<sqsubseteq>) (\<sqsubset>)"
Found termination order: "(%p. size (snd p)) <*mlex*> {}"
locale quasi_ordering
  fixes A :: "'a set"
    and
    less_eq :: "'a => 'a => bool"  (infix \<open>\<sqsubseteq>\<close> 50)
    and less :: "'a => 'a => bool"  (infix \<open>\<sqsubset>\<close> 50)
  assumes "quasi_ordering A (\<sqsubseteq>) (\<sqsubset>)"
locale partial_ordering
  fixes A :: "'a set"
    and
    less_eq :: "'a => 'a => bool"  (infix \<open>\<sqsubseteq>\<close> 50)
    and less :: "'a => 'a => bool"  (infix \<open>\<sqsubset>\<close> 50)
  assumes "partial_ordering A (\<sqsubseteq>) (\<sqsubset>)"
locale well_founded_ordering
  fixes A :: "'a set"
    and
    less_eq :: "'a => 'a => bool"  (infix \<open>\<sqsubseteq>\<close> 50)
    and less :: "'a => 'a => bool"  (infix \<open>\<sqsubset>\<close> 50)
  assumes "well_founded_ordering A (\<sqsubseteq>) (\<sqsubset>)"
locale total_ordering
  fixes A :: "'a set"
    and
    less_eq :: "'a => 'a => bool"  (infix \<open>\<sqsubseteq>\<close> 50)
    and less :: "'a => 'a => bool"  (infix \<open>\<sqsubset>\<close> 50)
  assumes "total_ordering A (\<sqsubseteq>) (\<sqsubset>)"
locale strict_total_ordering
  fixes A :: "'a set"
    and
    less_eq :: "'a => 'a => bool"  (infix \<open>\<sqsubseteq>\<close> 50)
    and less :: "'a => 'a => bool"  (infix \<open>\<sqsubset>\<close> 50)
  assumes "strict_total_ordering A (\<sqsubseteq>) (\<sqsubset>)"
class ord = type +
  fixes less_eq :: "'a => 'a => bool"
    and less :: "'a => 'a => bool"
Found termination order: "size <*mlex*> {}"
class compat = ord +
  assumes "compatible_ordering UNIV (<=) (<)"
### Cannot skip proof of schematic goal statement
[| ?a <= ?b; ?b <= ?c |] ==> ?a <= ?c
[| ?x < ?y; ?y < ?z |] ==> ?x < ?z
?x <= ?x
~ ?x < ?x
[| ?x < ?y; ?y < ?x |] ==> False
supremum {?x} ?x
### theory "HOL-Library.Tree"
### 2.063s elapsed time, 6.390s cpu time, 1.103s GC time
Loading theory "Draft.Templates" (required by "Draft.Kleene_Fixed_PointMoreTemplates" via "Draft.ExtrEqs")
datatype template_term
=
     t_empty
   | template_app of template_term * template_term
   | template_hole of int
   | template_var of int
datatype sign
= equals | greater_equals | greater_than | less_equals | less_than
datatype template
=
     template_bimplication of template * template
   | template_dunno
   | template_equation of template_term * template_term
   | template_implication of template list * template
   | template_inequation of sign * template_term * template_term
   | template_negation of template
   | template_predicate of template_term
constructor t_empty: template_term
constructor template_app: template_term * template_term -> template_term
constructor template_hole: int -> template_term
constructor template_var: int -> template_term
constructor equals: sign
constructor greater_equals: sign
constructor greater_than: sign
constructor less_equals: sign
constructor less_than: sign
constructor template_bimplication: template * template -> template
constructor template_dunno: template
constructor template_equation: template_term * template_term -> template
constructor template_implication: template list * template -> template
constructor template_inequation:
   sign * template_term * template_term -> template
constructor template_negation: template -> template
constructor template_predicate: template_term -> template
val vfs = fn: term -> (indexname * typ) list * (string * typ) list
val indexOf = fn: ''a list -> ''a -> int -> int
val has_eq = fn: term -> bool
val term2template = fn:
   (indexname * typ) list -> (string * typ) list -> term -> template_term
val lemma2predicate = fn: term -> term -> template
val makeTemplatewithContext = fn: term -> term -> template
val lemma2template = fn: term -> template
val thm2template = fn: thm -> template
val tterm2string = fn: template_term -> string
val template2string = fn: template -> string
val t = "height ?t <= size ?t": thm
val th =
   Const ("HOL.Trueprop", "bool => prop") $
     (Const ("Orderings.ord_class.less_eq", "nat => nat => bool") $
       (Const ("Tree.height_class.height", "?'a tree => nat") $
         Var (("t", 0), "?'a tree")) $
       (Const ("Nat.size_class.size", "?'a tree => nat") $
         Var (("t", 0), "?'a tree"))):
   term
### theory "Draft.Templates"
### 0.055s elapsed time, 0.111s cpu time, 0.000s GC time
Loading theory "Draft.ExtrEqs" (required by "Draft.Kleene_Fixed_PointMoreTemplates")
class attractive_order = ord +
  assumes "attractive_ordering UNIV (<=) (<)"
### Cannot skip proof of schematic goal statement
[| ?C ~= {}; ALL y:?C. sympartp (<=) y ?x |] ==> supremum ?C ?x
class psorder = ord +
  assumes "pseudo_ordering UNIV (<=) (<)"
### Cannot skip proof of schematic goal statement
class qorder = ord +
  assumes "quasi_ordering UNIV (<=) (<)"
val eqpattern =
   Pattern
    (
       Const ("HOL.Trueprop", "bool => prop") $
         (Const ("HOL.eq", "?'a => ?'a => bool") $
           Var (("_dummy_", 1), "?'a") $ Var (("_dummy_", 2), "?'a"))
       ):
   term Find_Theorems.criterion
val badeqpattern = Pattern (Const ("Pure.eq", "?'a => ?'a => prop")):
   term Find_Theorems.criterion
val undefpattern =
   Pattern
    (
       Const ("HOL.Trueprop", "bool => prop") $
         (Const ("HOL.eq", "?'a => ?'a => bool") $
           Var (("_dummy_", 1), "?'a") $ Const ("HOL.undefined", "?'a"))
       ):
   term Find_Theorems.criterion
val thmpattern =
   Pattern
    (Const ("HOL.Trueprop", "bool => prop") $ Var (("_dummy_", 1), "bool")):
   term Find_Theorems.criterion
val badnames =
   ["*nitpick*", "*Nitpick*", "*full_exhaustive*", "*_def*", "Enum.finite*",
    "*Quickcheck*", "ATP*", "*Nunchaku*", "*Code*", "*BNF*", "*SMT*",
    "*.*.*"]:
   string list
val unwanted_names =
   [(false, Name "*nitpick*"), (false, Name "*Nitpick*"),
    (false, Name "*full_exhaustive*"), (false, Name "*_def*"),
    (false, Name "Enum.finite*"), (false, Name "*Quickcheck*"),
    (false, Name "ATP*"), (false, Name "*Nunchaku*"),
    (false, Name "*Code*"), (false, Name "*BNF*"), (false, Name "*SMT*"),
    (false, Name "*.*.*")]:
   (bool * term Find_Theorems.criterion) list
val has_vars = fn: term -> bool
val get_all_eqs = fn: string -> Proof.context -> (string * thm) list
val get_all_thms = fn: string -> Proof.context -> (string * thm) list
val get_noneq_thms = fn: string -> Proof.context -> (string * thm) list
val template_eqs = fn:
   string -> Proof.context -> (string * thm * template) list
val template_thms = fn:
   string -> Proof.context -> (string * thm * template) list
### theory "Draft.ExtrEqs"
### 0.516s elapsed time, 1.050s cpu time, 0.042s GC time
### Cannot skip proof of schematic goal statement
class porder = ord +
  assumes "partial_ordering UNIV (<=) (<)"
### Cannot skip proof of schematic goal statement
class wf_qorder = ord +
  assumes "well_founded_ordering UNIV (<=) (<)"
### Cannot skip proof of schematic goal statement
class totalorder = ord +
  assumes "total_ordering UNIV (<=) (<)"
### Cannot skip proof of schematic goal statement
class linorder = order +
  assumes "linear": "!!x y. x <= y | y <= x"
### Cannot skip proof of schematic goal statement
[| ?x < ?y; ?y < ?z |] ==> ?x < ?z
supremum {?x} ?y = (?x = ?y)
[| ?C ~= {}; ALL y:?C. sympartp (<=) y ?x |] ==> supremum ?C ?x
[| ?x <= ?y; ?y <= ?z |] ==> ?x <= ?z
[| ?x <= ?y ==> ?P; ?y <= ?x ==> ?P |] ==> ?P
[| ?x < ?y ==> ?P; ?x = ?y ==> ?P; ?y < ?x ==> ?P |] ==> ?P
### Cannot skip proof of schematic goal statement
locale attractive
  fixes A :: "'a set"
    and
    less_eq :: "'a => 'a => bool"  (infix \<open>\<sqsubseteq>\<close> 50)
  assumes "attractive A (\<sqsubseteq>)"
### Cannot skip proof of schematic goal statement
### Rule already declared as introduction (intro)
### (!!x. ?f x = ?g x) ==> ?f = ?g
locale irreflexive
  fixes A :: "'a set"
    and less :: "'a => 'a => bool"  (infix \<open>\<sqsubset>\<close> 50)
  assumes "irreflexive A (\<sqsubset>)"
### theory "Draft.Binary_Relations"
### 5.623s elapsed time, 10.995s cpu time, 1.384s GC time
Loading theory "Draft.Complete_Relations" (required by "Draft.Kleene_Fixed_PointMoreTemplates" via "Draft.Kleene_Fixed_Point")
### theory "Draft.Complete_Relations"
### 0.270s elapsed time, 0.382s cpu time, 0.052s GC time
Loading theory "Draft.Kleene_Fixed_Point" (required by "Draft.Kleene_Fixed_PointMoreTemplates")
### Ambiguous input (line 118 of "$AFP/Complete_Non_Orders/Kleene_Fixed_Point.thy") produces 2 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("_applC" ("_position" monotone_on)
###     ("_cargs" ("_position" A)
###       ("_cargs" ("_position" r)
###         ("_cargs" ("_position" r)
###           ("\<^const>Nat.compower" ("_position" f) ("_position" n)))))))
### ("\<^const>HOL.Trueprop"
###   ("_applC" ("_position" monotone_on)
###     ("_cargs" ("_position" A)
###       ("_cargs" ("_position" r)
###         ("_cargs" ("_position" r)
###           ("\<^const>Power.power_class.power" ("_position" f)
###             ("_position" n)))))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 140 of "$AFP/Complete_Non_Orders/Kleene_Fixed_Point.thy") produces 2 parse trees:
### ("\<^const>Pure.eq" ("_position" Fn)
###   ("_range"
###     ("\<^const>Power.power_class.power" ("_position" f)
###       ("_applC" ("_position" n) ("\<^fixed>bot")))
###     ("_idtyp" ("_position" n) ("_type_name" nat))))
### ("\<^const>Pure.eq" ("_position" Fn)
###   ("_range"
###     ("_applC" ("\<^const>Nat.compower" ("_position" f) ("_position" n))
###       ("\<^fixed>bot"))
###     ("_idtyp" ("_position" n) ("_type_name" nat))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 142 of "$AFP/Complete_Non_Orders/Kleene_Fixed_Point.thy") produces 4 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^fixed>less_eq"
###     ("_applC" ("\<^const>Nat.compower" ("_position" f) ("_position" n))
###       ("\<^fixed>bot"))
###     ("\<^const>Power.power_class.power" ("_position" f)
###       ("_applC" ("_position" n) ("\<^fixed>bot")))))
### ("\<^const>HOL.Trueprop"
###   ("\<^fixed>less_eq"
###     ("\<^const>Power.power_class.power" ("_position" f)
###       ("_applC" ("_position" n) ("\<^fixed>bot")))
###     ("\<^const>Power.power_class.power" ("_position" f)
###       ("_applC" ("_position" n) ("\<^fixed>bot")))))
### ("\<^const>HOL.Trueprop"
###   ("\<^fixed>less_eq"
###     ("_applC" ("\<^const>Nat.compower" ("_position" f) ("_position" n))
###       ("\<^fixed>bot"))
###     ("_applC" ("\<^const>Nat.compower" ("_position" f) ("_position" n))
###       ("\<^fixed>bot"))))
### ("\<^const>HOL.Trueprop"
###   ("\<^fixed>less_eq"
###     ("\<^const>Power.power_class.power" ("_position" f)
###       ("_applC" ("_position" n) ("\<^fixed>bot")))
###     ("_applC" ("\<^const>Nat.compower" ("_position" f) ("_position" n))
###       ("\<^fixed>bot"))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 142 of "$AFP/Complete_Non_Orders/Kleene_Fixed_Point.thy") produces 2 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Set.member"
###     ("_applC" ("\<^const>Nat.compower" ("_position" f) ("_position" n))
###       ("\<^fixed>bot"))
###     ("_position" A)))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Set.member"
###     ("\<^const>Power.power_class.power" ("_position" f)
###       ("_applC" ("_position" n) ("\<^fixed>bot")))
###     ("_position" A)))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 155 of "$AFP/Complete_Non_Orders/Kleene_Fixed_Point.thy") produces 2 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("_applC" ("_position" monotone)
###     ("_cargs" ("\<^const>Orderings.ord_class.less_eq")
###       ("_cargs" ("\<^fixed>less_eq")
###         ("_lambda" ("_position" n)
###           ("\<^const>Power.power_class.power" ("_position" f)
###             ("_applC" ("_position" n) ("\<^fixed>bot"))))))))
### ("\<^const>HOL.Trueprop"
###   ("_applC" ("_position" monotone)
###     ("_cargs" ("\<^const>Orderings.ord_class.less_eq")
###       ("_cargs" ("\<^fixed>less_eq")
###         ("_lambda" ("_position" n)
###           ("_applC"
###             ("\<^const>Nat.compower" ("_position" f) ("_position" n))
###             ("\<^fixed>bot")))))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 164 of "$AFP/Complete_Non_Orders/Kleene_Fixed_Point.thy") produces 2 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq" ("_position" Fn)
###     ("_applC" ("_position" range)
###       ("_lambda" ("_position" n)
###         ("\<^const>Power.power_class.power" ("_position" f)
###           ("_applC" ("_position" n) ("\<^fixed>bot")))))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq" ("_position" Fn)
###     ("_applC" ("_position" range)
###       ("_lambda" ("_position" n)
###         ("_applC" ("\<^const>Nat.compower" ("_position" f) ("_position" n))
###           ("\<^fixed>bot"))))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
locale attractive
  fixes A :: "'a set"
    and
    less_eq :: "'a => 'a => bool"  (infix \<open>\<sqsubseteq>\<close> 50)
  assumes "attractive A (\<sqsubseteq>)"
### Ambiguous input (line 274 of "$AFP/Complete_Non_Orders/Kleene_Fixed_Point.thy") produces 2 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("_applC" ("_position" extreme_bound)
###       ("_cargs" ("_position" A)
###         ("_cargs" ("\<^fixed>less_eq")
###           ("_range"
###             ("\<^const>Power.power_class.power" ("_position" f)
###               ("_applC" ("_position" n) ("_position" b)))
###             ("_idtyp" ("_position" n) ("_type_name" nat))))))
###     ("_applC" ("_position" extreme)
###       ("_cargs"
###         ("_Collect" ("_position" s) ("_position" A)
###           ("\<^const>local.sym" ("_applC" ("_position" f) ("_position" s))
###             ("_position" s)))
###         ("\<^const>local.greater_eq")))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("_applC" ("_position" extreme_bound)
###       ("_cargs" ("_position" A)
###         ("_cargs" ("\<^fixed>less_eq")
###           ("_range"
###             ("_applC"
###               ("\<^const>Nat.compower" ("_position" f) ("_position" n))
###               ("_position" b))
###             ("_idtyp" ("_position" n) ("_type_name" nat))))))
###     ("_applC" ("_position" extreme)
###       ("_cargs"
###         ("_Collect" ("_position" s) ("_position" A)
###           ("\<^const>local.sym" ("_applC" ("_position" f) ("_position" s))
###             ("_position" s)))
###         ("\<^const>local.greater_eq")))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 284 of "$AFP/Complete_Non_Orders/Kleene_Fixed_Point.thy") produces 2 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("_applC" ("_position" extreme_bound)
###     ("_cargs" ("_position" A)
###       ("_cargs" ("\<^fixed>less_eq")
###         ("_cargs"
###           ("_range"
###             ("_applC"
###               ("\<^const>Nat.compower" ("_position" f) ("_position" n))
###               ("_position" b))
###             ("_idtyp" ("_position" n) ("_type_name" nat)))
###           ("_position" p))))))
### ("\<^const>HOL.Trueprop"
###   ("_applC" ("_position" extreme_bound)
###     ("_cargs" ("_position" A)
###       ("_cargs" ("\<^fixed>less_eq")
###         ("_cargs"
###           ("_range"
###             ("\<^const>Power.power_class.power" ("_position" f)
###               ("_applC" ("_position" n) ("_position" b)))
###             ("_idtyp" ("_position" n) ("_type_name" nat)))
###           ("_position" p))))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### theory "Draft.Kleene_Fixed_Point"
### 0.187s elapsed time, 0.197s cpu time, 0.000s GC time
Loading theory "Draft.Kleene_Fixed_PointMoreTemplates"
val templateLemmas =
   [("Kleene_Fixed_Point.scott_continuous_imp_omega_continuous",
     "scott_continuous ?A ?less_eq ?f ==> omega_continuous ?A ?less_eq ?f",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app (template_hole 1, template_var 2),
                template_var 1),
              template_var 0)
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_app (template_hole 0, template_var 2),
               template_var 1),
             template_var 0)
           ))),
    ("Kleene_Fixed_Point.omega_continuousDdom",
     "omega_continuous ?A ?less_eq ?f ==> ?f ` ?A <= ?A",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app (template_hole 2, template_var 2),
                template_var 1),
              template_var 0)
            )],
       template_inequation
        (less_equals,
         template_app
          (template_app (template_hole 0, template_var 0), template_var 2),
         template_var 2))),
    ("Kleene_Fixed_Point.mono_funpow",
     "[| ?f ` ?A <= ?A; monotone_on ?A ?r ?r ?f |]
      ==> monotone_on ?A ?r ?r (?f ^^ ?n)",
     template_implication
      ([template_inequation
         (less_equals,
          template_app
           (template_app (template_hole 2, template_var 3), template_var 2),
          template_var 2),
        template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_app (template_hole 1, template_var 2),
                  template_var 1),
                template_var 1),
              template_var 3)
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_app
                (template_app (template_hole 1, template_var 2),
                 template_var 1),
               template_var 1),
             template_app
              (template_app (template_hole 0, template_var 0),
               template_var 3))
           ))),
    ("Kleene_Fixed_Point.f",
     "[| ?bot : ?A; ALL q:?A. ?less_eq ?bot q;
         omega_continuous ?A ?less_eq ?f |]
      ==> ?f ` ?A <= ?A",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 4, template_var 3),
              template_var 2)
            ),
        template_predicate
         (
            template_app
             (template_app (template_hole 3, template_var 2), t_empty)
            ),
        template_predicate
         (
            template_app
             (template_app
               (template_app (template_hole 2, template_var 2),
                template_var 1),
              template_var 0)
            )],
       template_inequation
        (less_equals,
         template_app
          (template_app (template_hole 0, template_var 0), template_var 2),
         template_var 2))),
    ("Kleene_Fixed_Point.fnA",
     "[| ?bot : ?A; ALL q:?A. ?less_eq ?bot q;
         omega_continuous ?A ?less_eq ?f |]
      ==> (?f ^^ ?n) ?bot : ?A",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 3, template_var 4),
              template_var 3)
            ),
        template_predicate
         (
            template_app
             (template_app (template_hole 2, template_var 3), t_empty)
            ),
        template_predicate
         (
            template_app
             (template_app
               (template_app (template_hole 1, template_var 3),
                template_var 2),
              template_var 1)
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 3,
               template_app
                (template_app
                  (template_app (template_hole 0, template_var 0),
                   template_var 1),
                 template_var 4)),
             template_var 3)
           ))),
    ("Kleene_Fixed_Point.fn_monotone",
     "[| ?bot : ?A; ALL q:?A. ?less_eq ?bot q;
         omega_continuous ?A ?less_eq ?f |]
      ==> monotone (<=) ?less_eq (%n. (?f ^^ n) ?bot)",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 5, template_var 3),
              template_var 2)
            ),
        template_predicate
         (
            template_app
             (template_app (template_hole 4, template_var 2), t_empty)
            ),
        template_predicate
         (
            template_app
             (template_app
               (template_app (template_hole 3, template_var 2),
                template_var 1),
              template_var 0)
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_app (template_hole 2, template_hole 1),
               template_var 1),
             t_empty)
           ))),
    ("Kleene_Fixed_Point.fn_ref",
     "[| ?bot : ?A; ALL q:?A. ?less_eq ?bot q;
         omega_continuous ?A ?less_eq ?f |]
      ==> ?less_eq ((?f ^^ ?n) ?bot) ((?f ^^ ?n) ?bot)",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 3, template_var 4),
              template_var 3)
            ),
        template_predicate
         (
            template_app
             (template_app (template_hole 2, template_var 3), t_empty)
            ),
        template_predicate
         (
            template_app
             (template_app
               (template_app (template_hole 1, template_var 3),
                template_var 2),
              template_var 1)
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_var 2,
               template_app
                (template_app
                  (template_app (template_hole 0, template_var 0),
                   template_var 1),
                 template_var 4)),
             template_app
              (template_app
                (template_app (template_hole 0, template_var 0),
                 template_var 1),
               template_var 4))
           ))),
    ("Kleene_Fixed_Point.scott_continuous_imp_mono_refl",
     "[| scott_continuous ?A ?less_eq ?f; ?x : ?A; ?y : ?A; ?less_eq ?x ?y;
         ?less_eq ?y ?y |]
      ==> ?less_eq (?f ?x) (?f ?y)",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app (template_hole 1, template_var 4),
                template_var 3),
              template_var 2)
            ),
        template_predicate
         (
            template_app
             (template_app (template_hole 0, template_var 1),
              template_var 4)
            ),
        template_predicate
         (
            template_app
             (template_app (template_hole 0, template_var 0),
              template_var 4)
            ),
        template_predicate
         (
            template_app
             (template_app (template_var 3, template_var 1), template_var 0)
            ),
        template_predicate
         (
            template_app
             (template_app (template_var 3, template_var 0), template_var 0)
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_var 3,
               template_app (template_var 2, template_var 1)),
             template_app (template_var 2, template_var 0))
           ))),
    ("Kleene_Fixed_Point.FnA",
     "[| ?bot : ?A; ALL q:?A. ?less_eq ?bot q;
         omega_continuous ?A ?less_eq ?f |]
      ==> {(?f ^^ n) ?bot |. n} <= ?A",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 9, template_var 3),
              template_var 2)
            ),
        template_predicate
         (
            template_app
             (template_app (template_hole 8, template_var 2), t_empty)
            ),
        template_predicate
         (
            template_app
             (template_app
               (template_app (template_hole 7, template_var 2),
                template_var 1),
              template_var 0)
            )],
       template_inequation
        (less_equals, template_app (template_hole 5, t_empty),
         template_var 2))),
    ("Kleene_Fixed_Point.omega_continuous_imp_mono_refl",
     "[| omega_continuous ?A ?less_eq ?f; ?x : ?A; ?y : ?A; ?less_eq ?x ?y;
         ?less_eq ?x ?x; ?less_eq ?y ?y |]
      ==> ?less_eq (?f ?x) (?f ?y)",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app (template_hole 1, template_var 4),
                template_var 3),
              template_var 2)
            ),
        template_predicate
         (
            template_app
             (template_app (template_hole 0, template_var 1),
              template_var 4)
            ),
        template_predicate
         (
            template_app
             (template_app (template_hole 0, template_var 0),
              template_var 4)
            ),
        template_predicate
         (
            template_app
             (template_app (template_var 3, template_var 1), template_var 0)
            ),
        template_predicate
         (
            template_app
             (template_app (template_var 3, template_var 1), template_var 1)
            ),
        template_predicate
         (
            template_app
             (template_app (template_var 3, template_var 0), template_var 0)
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_var 3,
               template_app (template_var 2, template_var 1)),
             template_app (template_var 2, template_var 0))
           ))),
    ("Kleene_Fixed_Point.Fn",
     "[| ?bot : ?A; ALL q:?A. ?less_eq ?bot q;
         omega_continuous ?A ?less_eq ?f |]
      ==> {(?f ^^ n) ?bot |. n} = range (%n. (?f ^^ n) ?bot)",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 11, template_var 3),
              template_var 2)
            ),
        template_predicate
         (
            template_app
             (template_app (template_hole 10, template_var 2), t_empty)
            ),
        template_predicate
         (
            template_app
             (template_app
               (template_app (template_hole 9, template_var 2),
                template_var 1),
              template_var 0)
            )],
       template_equation
        (template_app (template_hole 7, t_empty),
         template_app
          (template_app (template_hole 1, t_empty), template_hole 0)))),
    ("Kleene_Fixed_Point.ex_kleene_qfp",
     "[| ?bot : ?A; ALL q:?A. ?less_eq ?bot q;
         omega_continuous ?A ?less_eq ?f; omega_complete ?A ?less_eq |]
      ==> Ex (extreme_bound ?A ?less_eq {(?f ^^ n) ?bot |. n})",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 12, template_var 3),
              template_var 2)
            ),
        template_predicate
         (
            template_app
             (template_app (template_hole 11, template_var 2), t_empty)
            ),
        template_predicate
         (
            template_app
             (template_app
               (template_app (template_hole 10, template_var 2),
                template_var 1),
              template_var 0)
            ),
        template_predicate
         (
            template_app
             (template_app (template_hole 9, template_var 2),
              template_var 1)
            )],
       template_predicate (template_app (template_hole 8, t_empty)))),
    ("Kleene_Fixed_Point.kleene_qfp",
     "[| ?bot : ?A; ALL q:?A. ?less_eq ?bot q;
         omega_continuous ?A ?less_eq ?f;
         extreme_bound ?A ?less_eq {(?f ^^ n) ?bot |. n} ?q |]
      ==> sympartp ?less_eq (?f ?q) ?q",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 11, template_var 4),
              template_var 3)
            ),
        template_predicate
         (
            template_app
             (template_app (template_hole 10, template_var 3), t_empty)
            ),
        template_predicate
         (
            template_app
             (template_app
               (template_app (template_hole 9, template_var 3),
                template_var 2),
              template_var 1)
            ),
        template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_hole 8, template_app (template_hole 7, t_empty)),
                t_empty),
              template_var 0)
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_app (template_hole 0, template_var 2),
               template_app (template_var 1, template_var 0)),
             template_var 0)
           ))),
    ("Kleene_Fixed_Point.omega_continuousD",
     "[| omega_continuous ?A ?less_eq ?f; ?b : ?A; range ?c <= ?A;
         monotone (<=) ?less_eq ?c;
         extreme_bound ?A ?less_eq (range ?c) ?b |]
      ==> extreme_bound ?A ?less_eq (?f ` range ?c) (?f ?b)",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app (template_hole 11, template_var 4),
                template_var 3),
              template_var 2)
            ),
        template_predicate
         (
            template_app
             (template_app (template_hole 10, template_var 1),
              template_var 4)
            ),
        template_inequation
         (less_equals,
          template_app
           (template_app (template_hole 8, template_var 0),
            template_hole 7),
          template_var 4),
        template_predicate
         (
            template_app
             (template_app
               (template_app (template_hole 6, template_hole 5),
                template_var 3),
              template_var 0)
            ),
        template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_hole 4, template_app (template_hole 3, t_empty)),
                t_empty),
              template_var 1)
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_app
                (template_hole 4, template_app (template_hole 3, t_empty)),
               t_empty),
             template_app (template_var 2, template_var 1))
           ))),
    ("Kleene_Fixed_Point.scott_continuousI",
     "[| ?f ` ?A <= ?A;
         !!X s.
            [| X <= ?A; directed X ?less_eq; X ~= {};
               extreme_bound ?A ?less_eq X s |]
            ==> extreme_bound ?A ?less_eq (?f ` X) (?f s) |]
      ==> scott_continuous ?A ?less_eq ?f",
     template_implication
      ([template_inequation
         (less_equals,
          template_app
           (template_app (template_hole 12, template_var 2),
            template_var 1),
          template_var 1),
        template_predicate (template_app (template_hole 11, t_empty))],
       template_predicate
        (
           template_app
            (template_app
              (template_app (template_hole 0, template_var 1),
               template_var 0),
             template_var 2)
           ))),
    ("Kleene_Fixed_Point.scott_continuousE",
     "[| scott_continuous ?A ?less_eq ?f;
         [| ?f ` ?A <= ?A;
            !!X s.
               [| X <= ?A; directed X ?less_eq; X ~= {};
                  extreme_bound ?A ?less_eq X s |]
               ==> extreme_bound ?A ?less_eq (?f ` X) (?f s) |]
         ==> PROP ?W |]
      ==> PROP ?W",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app (template_hole 13, template_var 3),
                template_var 2),
              template_var 1)
            ),
        template_implication
         ([template_inequation
            (less_equals,
             template_app
              (template_app (template_hole 11, template_var 1),
               template_var 3),
             template_var 3)],
          template_implication
           ([template_predicate (template_app (template_hole 10, t_empty))],
            template_predicate (template_var 0)))],
       template_predicate (template_var 0))),
    ("Kleene_Fixed_Point.omega_continuousI",
     "[| ?f ` ?A <= ?A;
         !!c b.
            [| b : ?A; range c <= ?A; monotone (<=) ?less_eq c;
               extreme_bound ?A ?less_eq (range c) b |]
            ==> extreme_bound ?A ?less_eq (?f ` range c) (?f b) |]
      ==> omega_continuous ?A ?less_eq ?f",
     template_implication
      ([template_inequation
         (less_equals,
          template_app
           (template_app (template_hole 12, template_var 2),
            template_var 1),
          template_var 1),
        template_predicate (template_app (template_hole 11, t_empty))],
       template_predicate
        (
           template_app
            (template_app
              (template_app (template_hole 0, template_var 1),
               template_var 0),
             template_var 2)
           ))),
    ("Kleene_Fixed_Point.omega_continuousE",
     "[| omega_continuous ?A ?less_eq ?f;
         [| ?f ` ?A <= ?A;
            !!c b.
               [| b : ?A; range c <= ?A; monotone (<=) ?less_eq c;
                  extreme_bound ?A ?less_eq (range c) b |]
               ==> extreme_bound ?A ?less_eq (?f ` range c) (?f b) |]
         ==> PROP ?W |]
      ==> PROP ?W",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app (template_hole 13, template_var 3),
                template_var 2),
              template_var 1)
            ),
        template_implication
         ([template_inequation
            (less_equals,
             template_app
              (template_app (template_hole 11, template_var 1),
               template_var 3),
             template_var 3)],
          template_implication
           ([template_predicate (template_app (template_hole 10, t_empty))],
            template_predicate (template_var 0)))],
       template_predicate (template_var 0))),
    ("Kleene_Fixed_Point.kleene_qfp_is_least",
     "[| ?bot : ?A; ALL q:?A. ?less_eq ?bot q;
         omega_continuous ?A ?less_eq ?f;
         ALL q:?A.
            ALL x:?A.
               sympartp ?less_eq (?f q) q -->
               ?less_eq x (?f q) --> ?less_eq x q;
         extreme_bound ?A ?less_eq {(?f ^^ n) ?bot |. n} ?q |]
      ==> extreme {s: ?A. sympartp ?less_eq (?f s) s} (%x y. ?less_eq y x)
           ?q",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 12, template_var 4),
              template_var 3)
            ),
        template_predicate
         (
            template_app
             (template_app (template_hole 11, template_var 3), t_empty)
            ),
        template_predicate
         (
            template_app
             (template_app
               (template_app (template_hole 10, template_var 3),
                template_var 2),
              template_var 1)
            ),
        template_predicate
         (
            template_app
             (template_app (template_hole 11, template_var 3), t_empty)
            ),
        template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_hole 7, template_app (template_hole 6, t_empty)),
                t_empty),
              template_var 0)
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_app
                (template_hole 7, template_app (template_hole 6, t_empty)),
               t_empty),
             template_var 0)
           ))),
    ("Kleene_Fixed_Point.kleene_qfp_iff_least",
     "[| ?bot : ?A; ALL q:?A. ?less_eq ?bot q;
         omega_continuous ?A ?less_eq ?f; omega_complete ?A ?less_eq;
         ALL q:?A.
            ALL x:?A.
               sympartp ?less_eq (?f q) q -->
               ?less_eq x (?f q) --> ?less_eq x q;
         ALL p:?A.
            ALL q:?A.
               ALL x:?A.
                  sympartp ?less_eq p q --> ?less_eq q x --> ?less_eq p x |]
      ==> extreme_bound ?A ?less_eq {(?f ^^ n) ?bot |. n} =
          extreme {s: ?A. sympartp ?less_eq (?f s) s} (%x y. ?less_eq y x)",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 14, template_var 3),
              template_var 2)
            ),
        template_predicate
         (
            template_app
             (template_app (template_hole 13, template_var 2), t_empty)
            ),
        template_predicate
         (
            template_app
             (template_app
               (template_app (template_hole 12, template_var 2),
                template_var 1),
              template_var 0)
            ),
        template_predicate
         (
            template_app
             (template_app (template_hole 11, template_var 2),
              template_var 1)
            ),
        template_predicate
         (
            template_app
             (template_app (template_hole 13, template_var 2), t_empty)
            ),
        template_predicate
         (
            template_app
             (template_app (template_hole 13, template_var 2), t_empty)
            )],
       template_equation
        (template_app
          (template_app
            (template_hole 7, template_app (template_hole 6, t_empty)),
           t_empty),
         template_app
          (template_app
            (template_hole 7, template_app (template_hole 6, t_empty)),
           t_empty))))]:
   (string * thm * template) list
### theory "Draft.Kleene_Fixed_PointMoreTemplates"
### 0.610s elapsed time, 1.294s cpu time, 0.769s GC time
val it = (): unit
