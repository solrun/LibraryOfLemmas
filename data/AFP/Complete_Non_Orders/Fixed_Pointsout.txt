Loading theory "Draft.Binary_Relations" (required by "Draft.Fixed_PointsMoreTemplates" via "Draft.Fixed_Points" via "Draft.Complete_Relations")
Loading theory "HOL-Library.Function_Algebras" (required by "Draft.Fixed_PointsMoreTemplates" via "Draft.ExtrEqs" via "HOL-Library.BigO")
Loading theory "HOL-Library.Nat_Bijection" (required by "Draft.Fixed_PointsMoreTemplates" via "Draft.ExtrEqs" via "HOL-Library.Stream")
Loading theory "HOL-Library.Set_Algebras" (required by "Draft.Fixed_PointsMoreTemplates" via "Draft.ExtrEqs" via "HOL-Library.BigO")
instantiation
  set :: (plus) plus
  plus_set == plus :: 'a set => 'a set => 'a set
instantiation
  fun :: (type, plus) plus
  plus_fun == plus :: ('a => 'b) => ('a => 'b) => 'a => 'b
instantiation
  set :: (times) times
  times_set == times :: 'a set => 'a set => 'a set
instantiation
  fun :: (type, zero) zero
  zero_fun == zero_class.zero :: 'a => 'b
instantiation
  set :: (zero) zero
  zero_set == zero_class.zero :: 'a set
instantiation
  fun :: (type, times) times
  times_fun == times :: ('a => 'b) => ('a => 'b) => 'a => 'b
instantiation
  set :: (one) one
  one_set == one_class.one :: 'a set
instantiation
  fun :: (type, one) one
  one_fun == one_class.one :: 'a => 'b
Found termination order: "(%p. size (snd p)) <*mlex*> {}"
### theory "HOL-Library.Function_Algebras"
### 0.154s elapsed time, 0.633s cpu time, 0.050s GC time
Loading theory "HOL-Library.Tree" (required by "Draft.Fixed_PointsMoreTemplates" via "Draft.ExtrEqs" via "Draft.Templates")
Found termination order: "size_list size <*mlex*> {}"
locale less_eq_syntax
  fixes
    less_eq :: "'a => 'a => bool"  (infix \<open>\<sqsubseteq>\<close> 50)
locale less_syntax
  fixes less :: "'a => 'a => bool"  (infix \<open>\<sqsubset>\<close> 50)
locale equivalence_syntax
  fixes equiv :: "'a => 'a => bool"  (infix \<open>\<sim>\<close> 50)
### theory "HOL-Library.Set_Algebras"
### 0.261s elapsed time, 1.058s cpu time, 0.050s GC time
Loading theory "HOL-Library.BigO" (required by "Draft.Fixed_PointsMoreTemplates" via "Draft.ExtrEqs")
locale less_eq_notations
  fixes
    less_eq :: "'a => 'a => bool"  (infix \<open>\<sqsubseteq>\<close> 50)
locale less_notations
  fixes less :: "'a => 'a => bool"  (infix \<open>\<sqsubset>\<close> 50)
locale related_set
  fixes A :: "'a set"
    and
    less_eq :: "'a => 'a => bool"  (infix \<open>\<sqsubseteq>\<close> 50)
locale reflexive
  fixes A :: "'a set"
    and
    less_eq :: "'a => 'a => bool"  (infix \<open>\<sqsubseteq>\<close> 50)
  assumes "reflexive A (\<sqsubseteq>)"
locale irreflexive
  fixes A :: "'a set"
    and less :: "'a => 'a => bool"  (infix \<open>\<sqsubset>\<close> 50)
  assumes "irreflexive A (\<sqsubset>)"
### theory "HOL-Library.Nat_Bijection"
### 0.344s elapsed time, 1.371s cpu time, 0.147s GC time
Loading theory "HOL-Library.Stream" (required by "Draft.Fixed_PointsMoreTemplates" via "Draft.ExtrEqs")
locale transitive
  fixes A :: "'a set"
    and
    less_eq :: "'a => 'a => bool"  (infix \<open>\<sqsubseteq>\<close> 50)
  assumes "transitive A (\<sqsubseteq>)"
locale symmetric
  fixes A :: "'a set"
    and equiv :: "'a => 'a => bool"  (infix \<open>\<sim>\<close> 50)
  assumes "symmetric A (\<sim>)"
### Cannot skip proof of schematic goal statement
locale antisymmetric
  fixes A :: "'a set"
    and
    less_eq :: "'a => 'a => bool"  (infix \<open>\<sqsubseteq>\<close> 50)
  assumes "antisymmetric A (\<sqsubseteq>)"
locale semiattractive
  fixes A :: "'a set"
    and
    less_eq :: "'a => 'a => bool"  (infix \<open>\<sqsubseteq>\<close> 50)
  assumes "semiattractive A (\<sqsubseteq>)"
locale attractive
  fixes A :: "'a set"
    and
    less_eq :: "'a => 'a => bool"  (infix \<open>\<sqsubseteq>\<close> 50)
  assumes "attractive A (\<sqsubseteq>)"
### Cannot skip proof of schematic goal statement
### Rule already declared as introduction (intro)
### (!!x. ?f x = ?g x) ==> ?f = ?g
locale antisymmetric
  fixes A :: "'a set"
    and
    less_eq :: "'a => 'a => bool"  (infix \<open>\<sqsubseteq>\<close> 50)
  assumes "antisymmetric A (\<sqsubseteq>)"
locale transitive
  fixes A :: "'a set"
    and
    less_eq :: "'a => 'a => bool"  (infix \<open>\<sqsubseteq>\<close> 50)
  assumes "transitive A (\<sqsubseteq>)"
### Cannot skip proof of schematic goal statement
### Rule already declared as introduction (intro)
### (!!x. ?f x = ?g x) ==> ?f = ?g
locale asymmetric
  fixes A :: "'a set"
    and less :: "'a => 'a => bool"  (infix \<open>\<sqsubset>\<close> 50)
  assumes "asymmetric A (\<sqsubset>)"
locale quasi_ordered_set
  fixes A :: "'a set"
    and
    less_eq :: "'a => 'a => bool"  (infix \<open>\<sqsubseteq>\<close> 50)
  assumes "quasi_ordered_set A (\<sqsubseteq>)"
locale near_ordered_set
  fixes A :: "'a set"
    and
    less_eq :: "'a => 'a => bool"  (infix \<open>\<sqsubseteq>\<close> 50)
  assumes "near_ordered_set A (\<sqsubseteq>)"
locale pseudo_ordered_set
  fixes A :: "'a set"
    and
    less_eq :: "'a => 'a => bool"  (infix \<open>\<sqsubseteq>\<close> 50)
  assumes "pseudo_ordered_set A (\<sqsubseteq>)"
consts
  left :: "'a tree => 'a tree"
locale partially_ordered_set
  fixes A :: "'a set"
    and
    less_eq :: "'a => 'a => bool"  (infix \<open>\<sqsubseteq>\<close> 50)
  assumes "partially_ordered_set A (\<sqsubseteq>)"
consts
  right :: "'a tree => 'a tree"
locale strict_ordered_set
  fixes A :: "'a set"
    and less :: "'a => 'a => bool"  (infix \<open>\<sqsubset>\<close> 50)
  assumes "strict_ordered_set A (\<sqsubset>)"
consts
  shift :: "'a list => 'a stream => 'a stream"
Found termination order: "size <*mlex*> {}"
locale tolerance
  fixes A :: "'a set"
    and equiv :: "'a => 'a => bool"  (infix \<open>\<sim>\<close> 50)
  assumes "tolerance A (\<sim>)"
Proofs for coinductive predicate(s) "streamsp"
  Proving monotonicity ...
### Cannot skip proof of schematic goal statement
locale partial_equivalence
  fixes A :: "'a set"
    and equiv :: "'a => 'a => bool"  (infix \<open>\<sim>\<close> 50)
  assumes "partial_equivalence A (\<sim>)"
Found termination order: "size <*mlex*> {}"
locale equivalence
  fixes A :: "'a set"
    and equiv :: "'a => 'a => bool"  (infix \<open>\<sim>\<close> 50)
  assumes "equivalence A (\<sim>)"
consts
  snth :: "'a stream => nat => 'a"
consts
  stake :: "nat => 'a stream => 'a list"
locale semiconnex
  fixes A :: "'a set"
    and less :: "'a => 'a => bool"  (infix \<open>\<sqsubset>\<close> 50)
  assumes "semiconnex A (\<sqsubset>)"
consts
  sdrop :: "nat => 'a stream => 'a stream"
locale semiconnex_irreflexive
  fixes A :: "'a set"
    and less :: "'a => 'a => bool"  (infix \<open>\<sqsubset>\<close> 50)
  assumes "semiconnex_irreflexive A (\<sqsubset>)"
Found termination order: "size <*mlex*> {}"
locale connex
  fixes A :: "'a set"
    and
    less_eq :: "'a => 'a => bool"  (infix \<open>\<sqsubseteq>\<close> 50)
  assumes "connex A (\<sqsubseteq>)"
class height = type +
  fixes height :: "'a => nat"
consts
  sfilter :: "('a => bool) => 'a stream => 'a stream"
instantiation
  tree :: (type) height
  height_tree == height :: 'a tree => nat
locale total_pseudo_ordered_set
  fixes A :: "'a set"
    and
    less_eq :: "'a => 'a => bool"  (infix \<open>\<sqsubseteq>\<close> 50)
  assumes "total_pseudo_ordered_set A (\<sqsubseteq>)"
consts
  cycle :: "'a list => 'a stream"
locale total_quasi_ordered_set
  fixes A :: "'a set"
    and
    less_eq :: "'a => 'a => bool"  (infix \<open>\<sqsubseteq>\<close> 50)
  assumes "total_quasi_ordered_set A (\<sqsubseteq>)"
Found termination order: "size <*mlex*> {}"
locale total_ordered_set
  fixes A :: "'a set"
    and
    less_eq :: "'a => 'a => bool"  (infix \<open>\<sqsubseteq>\<close> 50)
  assumes "total_ordered_set A (\<sqsubseteq>)"
consts
  siterate :: "('a => 'a) => 'a => 'a stream"
locale well_founded
  fixes A :: "'a set"
    and less :: "'a => 'a => bool"  (infix \<open>\<sqsubset>\<close> 50)
  assumes "well_founded A (\<sqsubset>)"
### Cannot skip proof of schematic goal statement
consts
  flat :: "'a list stream => 'a stream"
Found termination order: "size <*mlex*> {}"
### Cannot skip proof of schematic goal statement
### theory "HOL-Library.BigO"
### 1.079s elapsed time, 4.068s cpu time, 0.871s GC time
consts
  sinterleave :: "'a stream => 'a stream => 'a stream"
Found termination order: "size <*mlex*> {}"
consts
  szip :: "'a stream => 'b stream => ('a * 'b) stream"
locale well_founded_ordered_set
  fixes A :: "'a set"
    and less :: "'a => 'a => bool"  (infix \<open>\<sqsubset>\<close> 50)
  assumes "well_founded_ordered_set A (\<sqsubset>)"
consts
  smap2 :: "('a => 'b => 'c) => 'a stream => 'b stream => 'c stream"
### theory "HOL-Library.Stream"
### 1.180s elapsed time, 4.329s cpu time, 0.969s GC time
locale well_related_set
  fixes A :: "'a set"
    and
    less_eq :: "'a => 'a => bool"  (infix \<open>\<sqsubseteq>\<close> 50)
  assumes "well_related_set A (\<sqsubseteq>)"
Found termination order: "size <*mlex*> {}"
locale pre_well_ordered_set
  fixes A :: "'a set"
    and
    less_eq :: "'a => 'a => bool"  (infix \<open>\<sqsubseteq>\<close> 50)
  assumes "pre_well_ordered_set A (\<sqsubseteq>)"
Found termination order: "size <*mlex*> {}"
locale well_ordered_set
  fixes A :: "'a set"
    and
    less_eq :: "'a => 'a => bool"  (infix \<open>\<sqsubseteq>\<close> 50)
  assumes "well_ordered_set A (\<sqsubseteq>)"
Found termination order: "size <*mlex*> {}"
Found termination order: "size <*mlex*> {}"
locale connex
  fixes A :: "'a set"
    and
    less_eq :: "'a => 'a => bool"  (infix \<open>\<sqsubseteq>\<close> 50)
  assumes "connex A (\<sqsubseteq>)"
locale compatible
  fixes A :: "'a set"
    and
    less_eq :: "'a => 'a => bool"  (infix \<open>\<sqsubseteq>\<close> 50)
    and less :: "'a => 'a => bool"  (infix \<open>\<sqsubset>\<close> 50)
  assumes "compatible A (\<sqsubseteq>) (\<sqsubset>)"
locale compatible_ordering
  fixes A :: "'a set"
    and
    less_eq :: "'a => 'a => bool"  (infix \<open>\<sqsubseteq>\<close> 50)
    and less :: "'a => 'a => bool"  (infix \<open>\<sqsubset>\<close> 50)
  assumes "compatible_ordering A (\<sqsubseteq>) (\<sqsubset>)"
[| ?x \<sqsubset> ?y; ?y \<sqsubset> ?z; ?x : A; ?y : A; ?z : A |]
==> ?x \<sqsubset> ?z
[| ?x \<sqsubset> ?y; ?y \<sqsubset> ?x; ?x : A; ?y : A |] ==> False
?x : A ==> ~ ?x \<sqsubset> ?x
Found termination order: "(%p. size (fst p)) <*mlex*> {}"
locale transitive
  fixes A :: "'a set"
    and
    less_eq :: "'a => 'a => bool"  (infix \<open>\<sqsubseteq>\<close> 50)
  assumes "transitive A (\<sqsubseteq>)"
locale attractive_ordering
  fixes A :: "'a set"
    and
    less_eq :: "'a => 'a => bool"  (infix \<open>\<sqsubseteq>\<close> 50)
    and less :: "'a => 'a => bool"  (infix \<open>\<sqsubset>\<close> 50)
  assumes "attractive_ordering A (\<sqsubseteq>) (\<sqsubset>)"
Found termination order: "size <*mlex*> {}"
locale pseudo_ordering
  fixes A :: "'a set"
    and
    less_eq :: "'a => 'a => bool"  (infix \<open>\<sqsubseteq>\<close> 50)
    and less :: "'a => 'a => bool"  (infix \<open>\<sqsubset>\<close> 50)
  assumes "pseudo_ordering A (\<sqsubseteq>) (\<sqsubset>)"
locale quasi_ordering
  fixes A :: "'a set"
    and
    less_eq :: "'a => 'a => bool"  (infix \<open>\<sqsubseteq>\<close> 50)
    and less :: "'a => 'a => bool"  (infix \<open>\<sqsubset>\<close> 50)
  assumes "quasi_ordering A (\<sqsubseteq>) (\<sqsubset>)"
locale partial_ordering
  fixes A :: "'a set"
    and
    less_eq :: "'a => 'a => bool"  (infix \<open>\<sqsubseteq>\<close> 50)
    and less :: "'a => 'a => bool"  (infix \<open>\<sqsubset>\<close> 50)
  assumes "partial_ordering A (\<sqsubseteq>) (\<sqsubset>)"
Found termination order: "(%p. size (snd p)) <*mlex*> {}"
locale well_founded_ordering
  fixes A :: "'a set"
    and
    less_eq :: "'a => 'a => bool"  (infix \<open>\<sqsubseteq>\<close> 50)
    and less :: "'a => 'a => bool"  (infix \<open>\<sqsubset>\<close> 50)
  assumes "well_founded_ordering A (\<sqsubseteq>) (\<sqsubset>)"
locale total_ordering
  fixes A :: "'a set"
    and
    less_eq :: "'a => 'a => bool"  (infix \<open>\<sqsubseteq>\<close> 50)
    and less :: "'a => 'a => bool"  (infix \<open>\<sqsubset>\<close> 50)
  assumes "total_ordering A (\<sqsubseteq>) (\<sqsubset>)"
locale strict_total_ordering
  fixes A :: "'a set"
    and
    less_eq :: "'a => 'a => bool"  (infix \<open>\<sqsubseteq>\<close> 50)
    and less :: "'a => 'a => bool"  (infix \<open>\<sqsubset>\<close> 50)
  assumes "strict_total_ordering A (\<sqsubseteq>) (\<sqsubset>)"
class ord = type +
  fixes less_eq :: "'a => 'a => bool"
    and less :: "'a => 'a => bool"
class compat = ord +
  assumes "compatible_ordering UNIV (<=) (<)"
Found termination order: "size <*mlex*> {}"
### Cannot skip proof of schematic goal statement
[| ?a <= ?b; ?b <= ?c |] ==> ?a <= ?c
[| ?x < ?y; ?y < ?z |] ==> ?x < ?z
?x <= ?x
~ ?x < ?x
[| ?x < ?y; ?y < ?x |] ==> False
supremum {?x} ?x
class attractive_order = ord +
  assumes "attractive_ordering UNIV (<=) (<)"
### theory "HOL-Library.Tree"
### 2.114s elapsed time, 6.651s cpu time, 1.230s GC time
Loading theory "Draft.Templates" (required by "Draft.Fixed_PointsMoreTemplates" via "Draft.ExtrEqs")
datatype template_term
=
     t_empty
   | template_app of template_term * template_term
   | template_hole of int
   | template_var of int
datatype sign
= equals | greater_equals | greater_than | less_equals | less_than
datatype template
=
     template_bimplication of template * template
   | template_dunno
   | template_equation of template_term * template_term
   | template_implication of template list * template
   | template_inequation of sign * template_term * template_term
   | template_negation of template
   | template_predicate of template_term
constructor t_empty: template_term
constructor template_app: template_term * template_term -> template_term
constructor template_hole: int -> template_term
constructor template_var: int -> template_term
constructor equals: sign
constructor greater_equals: sign
constructor greater_than: sign
constructor less_equals: sign
constructor less_than: sign
constructor template_bimplication: template * template -> template
constructor template_dunno: template
constructor template_equation: template_term * template_term -> template
constructor template_implication: template list * template -> template
constructor template_inequation:
   sign * template_term * template_term -> template
constructor template_negation: template -> template
constructor template_predicate: template_term -> template
val vfs = fn: term -> (indexname * typ) list * (string * typ) list
val indexOf = fn: ''a list -> ''a -> int -> int
val has_eq = fn: term -> bool
val term2template = fn:
   (indexname * typ) list -> (string * typ) list -> term -> template_term
val lemma2predicate = fn: term -> term -> template
val makeTemplatewithContext = fn: term -> term -> template
val lemma2template = fn: term -> template
val thm2template = fn: thm -> template
val tterm2string = fn: template_term -> string
val template2string = fn: template -> string
val t = "height ?t <= size ?t": thm
val th =
   Const ("HOL.Trueprop", "bool => prop") $
     (Const ("Orderings.ord_class.less_eq", "nat => nat => bool") $
       (Const ("Tree.height_class.height", "?'a tree => nat") $
         Var (("t", 0), "?'a tree")) $
       (Const ("Nat.size_class.size", "?'a tree => nat") $
         Var (("t", 0), "?'a tree"))):
   term
### theory "Draft.Templates"
### 0.053s elapsed time, 0.104s cpu time, 0.000s GC time
Loading theory "Draft.ExtrEqs" (required by "Draft.Fixed_PointsMoreTemplates")
### Cannot skip proof of schematic goal statement
[| ?C ~= {}; ALL y:?C. sympartp (<=) y ?x |] ==> supremum ?C ?x
class psorder = ord +
  assumes "pseudo_ordering UNIV (<=) (<)"
### Cannot skip proof of schematic goal statement
class qorder = ord +
  assumes "quasi_ordering UNIV (<=) (<)"
val eqpattern =
   Pattern
    (
       Const ("HOL.Trueprop", "bool => prop") $
         (Const ("HOL.eq", "?'a => ?'a => bool") $
           Var (("_dummy_", 1), "?'a") $ Var (("_dummy_", 2), "?'a"))
       ):
   term Find_Theorems.criterion
val badeqpattern = Pattern (Const ("Pure.eq", "?'a => ?'a => prop")):
   term Find_Theorems.criterion
val undefpattern =
   Pattern
    (
       Const ("HOL.Trueprop", "bool => prop") $
         (Const ("HOL.eq", "?'a => ?'a => bool") $
           Var (("_dummy_", 1), "?'a") $ Const ("HOL.undefined", "?'a"))
       ):
   term Find_Theorems.criterion
val thmpattern =
   Pattern
    (Const ("HOL.Trueprop", "bool => prop") $ Var (("_dummy_", 1), "bool")):
   term Find_Theorems.criterion
val badnames =
   ["*nitpick*", "*Nitpick*", "*full_exhaustive*", "*_def*", "Enum.finite*",
    "*Quickcheck*", "ATP*", "*Nunchaku*", "*Code*", "*BNF*", "*SMT*",
    "*.*.*"]:
   string list
val unwanted_names =
   [(false, Name "*nitpick*"), (false, Name "*Nitpick*"),
    (false, Name "*full_exhaustive*"), (false, Name "*_def*"),
    (false, Name "Enum.finite*"), (false, Name "*Quickcheck*"),
    (false, Name "ATP*"), (false, Name "*Nunchaku*"),
    (false, Name "*Code*"), (false, Name "*BNF*"), (false, Name "*SMT*"),
    (false, Name "*.*.*")]:
   (bool * term Find_Theorems.criterion) list
val has_vars = fn: term -> bool
val get_all_eqs = fn: string -> Proof.context -> (string * thm) list
val get_all_thms = fn: string -> Proof.context -> (string * thm) list
val get_noneq_thms = fn: string -> Proof.context -> (string * thm) list
val template_eqs = fn:
   string -> Proof.context -> (string * thm * template) list
val template_thms = fn:
   string -> Proof.context -> (string * thm * template) list
### theory "Draft.ExtrEqs"
### 0.536s elapsed time, 1.118s cpu time, 0.106s GC time
### Cannot skip proof of schematic goal statement
class porder = ord +
  assumes "partial_ordering UNIV (<=) (<)"
### Cannot skip proof of schematic goal statement
class wf_qorder = ord +
  assumes "well_founded_ordering UNIV (<=) (<)"
### Cannot skip proof of schematic goal statement
class totalorder = ord +
  assumes "total_ordering UNIV (<=) (<)"
### Cannot skip proof of schematic goal statement
class linorder = order +
  assumes "linear": "!!x y. x <= y | y <= x"
### Cannot skip proof of schematic goal statement
[| ?x < ?y; ?y < ?z |] ==> ?x < ?z
supremum {?x} ?y = (?x = ?y)
[| ?x <= ?y; ?y <= ?z |] ==> ?x <= ?z
[| ?C ~= {}; ALL y:?C. sympartp (<=) y ?x |] ==> supremum ?C ?x
[| ?x <= ?y ==> ?P; ?y <= ?x ==> ?P |] ==> ?P
[| ?x < ?y ==> ?P; ?x = ?y ==> ?P; ?y < ?x ==> ?P |] ==> ?P
### Cannot skip proof of schematic goal statement
locale attractive
  fixes A :: "'a set"
    and
    less_eq :: "'a => 'a => bool"  (infix \<open>\<sqsubseteq>\<close> 50)
  assumes "attractive A (\<sqsubseteq>)"
### Cannot skip proof of schematic goal statement
### Rule already declared as introduction (intro)
### (!!x. ?f x = ?g x) ==> ?f = ?g
locale irreflexive
  fixes A :: "'a set"
    and less :: "'a => 'a => bool"  (infix \<open>\<sqsubset>\<close> 50)
  assumes "irreflexive A (\<sqsubset>)"
### theory "Draft.Binary_Relations"
### 5.638s elapsed time, 11.316s cpu time, 1.558s GC time
Loading theory "Draft.Complete_Relations" (required by "Draft.Fixed_PointsMoreTemplates" via "Draft.Fixed_Points")
### theory "Draft.Complete_Relations"
### 0.262s elapsed time, 0.369s cpu time, 0.048s GC time
Loading theory "Draft.Fixed_Points" (required by "Draft.Fixed_PointsMoreTemplates")
locale fixed_point_proof
  fixes A :: "'a set"
    and
    less_eq :: "'a => 'a => bool"  (infix \<open>\<sqsubseteq>\<close> 50)
    and f :: "'a => 'a"
  assumes "fixed_point_proof A f"
locale semiattractive
  fixes A :: "'a set"
    and
    less_eq :: "'a => 'a => bool"  (infix \<open>\<sqsubseteq>\<close> 50)
  assumes "semiattractive A (\<sqsubseteq>)"
locale fixed_point_proof
  fixes A :: "'a set"
    and
    less_eq :: "'a => 'a => bool"  (infix \<open>\<sqsubseteq>\<close> 50)
    and f :: "'a => 'a"
  assumes "fixed_point_proof A f"
locale fixed_point_proof
  fixes A :: "'a set"
    and
    less_eq :: "'a => 'a => bool"  (infix \<open>\<sqsubseteq>\<close> 50)
    and f :: "'a => 'a"
  assumes "fixed_point_proof A f"
locale attractive
  fixes A :: "'a set"
    and
    less_eq :: "'a => 'a => bool"  (infix \<open>\<sqsubseteq>\<close> 50)
  assumes "attractive A (\<sqsubseteq>)"
locale antisymmetric
  fixes A :: "'a set"
    and
    less_eq :: "'a => 'a => bool"  (infix \<open>\<sqsubseteq>\<close> 50)
  assumes "antisymmetric A (\<sqsubseteq>)"
### theory "Draft.Fixed_Points"
### 0.759s elapsed time, 1.317s cpu time, 0.791s GC time
Loading theory "Draft.Fixed_PointsMoreTemplates"
val templateLemmas =
   [("Fixed_Points.setwiseI",
     "(!!x xa. [| x : ?X; xa : ?Y |] ==> ?r x xa) ==> setwise ?r ?X ?Y",
     template_implication
      ([template_predicate (template_app (template_hole 5, t_empty))],
       template_predicate
        (
           template_app
            (template_app
              (template_app (template_hole 0, template_var 0),
               template_var 2),
             template_var 1)
           ))),
    ("Fixed_Points.setwiseE",
     "[| setwise ?r ?X ?Y;
         (!!x xa. [| x : ?X; xa : ?Y |] ==> ?r x xa) ==> PROP ?W |]
      ==> PROP ?W",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app (template_hole 4, template_var 3),
                template_var 2),
              template_var 1)
            ),
        template_implication
         ([template_predicate (template_app (template_hole 3, t_empty))],
          template_predicate (template_var 0))],
       template_predicate (template_var 0))),
    ("Fixed_Points.bound_monotone_on",
     "[| monotone_on ?A ?r ?s ?f; ?X <= ?A; ?a : ?A; bound ?X ?r ?a |]
      ==> bound (?f ` ?X) ?s (?f ?a)",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_app (template_hole 5, template_var 5),
                  template_var 4),
                template_var 3),
              template_var 2)
            ),
        template_inequation (less_equals, template_var 1, template_var 5),
        template_predicate
         (
            template_app
             (template_app (template_hole 3, template_var 0),
              template_var 5)
            ),
        template_predicate
         (
            template_app
             (template_app
               (template_app (template_hole 2, template_var 1),
                template_var 4),
              template_var 0)
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_app
                (template_hole 1,
                 template_app
                  (template_app (template_hole 0, template_var 2),
                   template_var 1)),
               template_var 3),
             template_app (template_var 2, template_var 0))
           ))),
    ("Fixed_Points.complete_infl_mono_imp_ex_qfp",
     "[| ?f ` ?A <= ?A; UNIV-complete ?A ?less_eq;
         ALL a:?A.
            ?less_eq a (?f a) |
            (ALL b:?A. ?less_eq b a --> ?less_eq (?f b) (?f a)) |]
      ==> EX s:?A. sympartp ?less_eq (?f s) s",
     template_implication
      ([template_inequation
         (less_equals,
          template_app
           (template_app (template_hole 7, template_var 2), template_var 1),
          template_var 1),
        template_predicate
         (
            template_app
             (template_app
               (template_app (template_hole 6, template_hole 5),
                template_var 1),
              template_var 0)
            ),
        template_predicate
         (
            template_app
             (template_app (template_hole 4, template_var 1), t_empty)
            )],
       template_predicate
        (
           template_app
            (template_app (template_hole 1, template_var 1), t_empty)
           )))]:
   (string * thm * template) list
### theory "Draft.Fixed_PointsMoreTemplates"
### 0.348s elapsed time, 0.573s cpu time, 0.016s GC time
val it = (): unit
