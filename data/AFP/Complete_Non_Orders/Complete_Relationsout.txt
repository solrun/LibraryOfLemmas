Loading theory "Draft.Binary_Relations" (required by "Draft.Complete_RelationsMoreTemplates" via "Draft.Complete_Relations")
Loading theory "HOL-Library.Function_Algebras" (required by "Draft.Complete_RelationsMoreTemplates" via "Draft.ExtrEqs" via "HOL-Library.BigO")
Loading theory "HOL-Library.Nat_Bijection" (required by "Draft.Complete_RelationsMoreTemplates" via "Draft.ExtrEqs" via "HOL-Library.Stream")
Loading theory "HOL-Library.Set_Algebras" (required by "Draft.Complete_RelationsMoreTemplates" via "Draft.ExtrEqs" via "HOL-Library.BigO")
instantiation
  fun :: (type, plus) plus
  plus_fun == plus :: ('a => 'b) => ('a => 'b) => 'a => 'b
instantiation
  set :: (plus) plus
  plus_set == plus :: 'a set => 'a set => 'a set
instantiation
  fun :: (type, zero) zero
  zero_fun == zero_class.zero :: 'a => 'b
instantiation
  set :: (times) times
  times_set == times :: 'a set => 'a set => 'a set
instantiation
  fun :: (type, times) times
  times_fun == times :: ('a => 'b) => ('a => 'b) => 'a => 'b
instantiation
  set :: (zero) zero
  zero_set == zero_class.zero :: 'a set
instantiation
  fun :: (type, one) one
  one_fun == one_class.one :: 'a => 'b
instantiation
  set :: (one) one
  one_set == one_class.one :: 'a set
Found termination order: "(%p. size (snd p)) <*mlex*> {}"
### theory "HOL-Library.Function_Algebras"
### 0.129s elapsed time, 0.539s cpu time, 0.060s GC time
Loading theory "HOL-Library.Tree" (required by "Draft.Complete_RelationsMoreTemplates" via "Draft.ExtrEqs" via "Draft.Templates")
Found termination order: "size_list size <*mlex*> {}"
### theory "HOL-Library.Set_Algebras"
### 0.259s elapsed time, 1.055s cpu time, 0.060s GC time
Loading theory "HOL-Library.BigO" (required by "Draft.Complete_RelationsMoreTemplates" via "Draft.ExtrEqs")
locale less_eq_syntax
  fixes
    less_eq :: "'a => 'a => bool"  (infix \<open>\<sqsubseteq>\<close> 50)
### theory "HOL-Library.Nat_Bijection"
### 0.327s elapsed time, 1.309s cpu time, 0.150s GC time
Loading theory "HOL-Library.Stream" (required by "Draft.Complete_RelationsMoreTemplates" via "Draft.ExtrEqs")
locale less_syntax
  fixes less :: "'a => 'a => bool"  (infix \<open>\<sqsubset>\<close> 50)
locale equivalence_syntax
  fixes equiv :: "'a => 'a => bool"  (infix \<open>\<sim>\<close> 50)
locale less_eq_notations
  fixes
    less_eq :: "'a => 'a => bool"  (infix \<open>\<sqsubseteq>\<close> 50)
locale less_notations
  fixes less :: "'a => 'a => bool"  (infix \<open>\<sqsubset>\<close> 50)
locale related_set
  fixes A :: "'a set"
    and
    less_eq :: "'a => 'a => bool"  (infix \<open>\<sqsubseteq>\<close> 50)
locale reflexive
  fixes A :: "'a set"
    and
    less_eq :: "'a => 'a => bool"  (infix \<open>\<sqsubseteq>\<close> 50)
  assumes "reflexive A (\<sqsubseteq>)"
locale irreflexive
  fixes A :: "'a set"
    and less :: "'a => 'a => bool"  (infix \<open>\<sqsubset>\<close> 50)
  assumes "irreflexive A (\<sqsubset>)"
locale transitive
  fixes A :: "'a set"
    and
    less_eq :: "'a => 'a => bool"  (infix \<open>\<sqsubseteq>\<close> 50)
  assumes "transitive A (\<sqsubseteq>)"
locale symmetric
  fixes A :: "'a set"
    and equiv :: "'a => 'a => bool"  (infix \<open>\<sim>\<close> 50)
  assumes "symmetric A (\<sim>)"
### Cannot skip proof of schematic goal statement
locale antisymmetric
  fixes A :: "'a set"
    and
    less_eq :: "'a => 'a => bool"  (infix \<open>\<sqsubseteq>\<close> 50)
  assumes "antisymmetric A (\<sqsubseteq>)"
locale semiattractive
  fixes A :: "'a set"
    and
    less_eq :: "'a => 'a => bool"  (infix \<open>\<sqsubseteq>\<close> 50)
  assumes "semiattractive A (\<sqsubseteq>)"
locale attractive
  fixes A :: "'a set"
    and
    less_eq :: "'a => 'a => bool"  (infix \<open>\<sqsubseteq>\<close> 50)
  assumes "attractive A (\<sqsubseteq>)"
### Cannot skip proof of schematic goal statement
### Rule already declared as introduction (intro)
### (!!x. ?f x = ?g x) ==> ?f = ?g
locale antisymmetric
  fixes A :: "'a set"
    and
    less_eq :: "'a => 'a => bool"  (infix \<open>\<sqsubseteq>\<close> 50)
  assumes "antisymmetric A (\<sqsubseteq>)"
locale transitive
  fixes A :: "'a set"
    and
    less_eq :: "'a => 'a => bool"  (infix \<open>\<sqsubseteq>\<close> 50)
  assumes "transitive A (\<sqsubseteq>)"
### Cannot skip proof of schematic goal statement
### Rule already declared as introduction (intro)
### (!!x. ?f x = ?g x) ==> ?f = ?g
consts
  left :: "'a tree => 'a tree"
consts
  right :: "'a tree => 'a tree"
locale asymmetric
  fixes A :: "'a set"
    and less :: "'a => 'a => bool"  (infix \<open>\<sqsubset>\<close> 50)
  assumes "asymmetric A (\<sqsubset>)"
locale quasi_ordered_set
  fixes A :: "'a set"
    and
    less_eq :: "'a => 'a => bool"  (infix \<open>\<sqsubseteq>\<close> 50)
  assumes "quasi_ordered_set A (\<sqsubseteq>)"
locale near_ordered_set
  fixes A :: "'a set"
    and
    less_eq :: "'a => 'a => bool"  (infix \<open>\<sqsubseteq>\<close> 50)
  assumes "near_ordered_set A (\<sqsubseteq>)"
Found termination order: "size <*mlex*> {}"
locale pseudo_ordered_set
  fixes A :: "'a set"
    and
    less_eq :: "'a => 'a => bool"  (infix \<open>\<sqsubseteq>\<close> 50)
  assumes "pseudo_ordered_set A (\<sqsubseteq>)"
consts
  shift :: "'a list => 'a stream => 'a stream"
Proofs for coinductive predicate(s) "streamsp"
  Proving monotonicity ...
Found termination order: "size <*mlex*> {}"
locale partially_ordered_set
  fixes A :: "'a set"
    and
    less_eq :: "'a => 'a => bool"  (infix \<open>\<sqsubseteq>\<close> 50)
  assumes "partially_ordered_set A (\<sqsubseteq>)"
locale strict_ordered_set
  fixes A :: "'a set"
    and less :: "'a => 'a => bool"  (infix \<open>\<sqsubset>\<close> 50)
  assumes "strict_ordered_set A (\<sqsubset>)"
Found termination order: "size <*mlex*> {}"
consts
  snth :: "'a stream => nat => 'a"
locale tolerance
  fixes A :: "'a set"
    and equiv :: "'a => 'a => bool"  (infix \<open>\<sim>\<close> 50)
  assumes "tolerance A (\<sim>)"
### Cannot skip proof of schematic goal statement
consts
  stake :: "nat => 'a stream => 'a list"
locale partial_equivalence
  fixes A :: "'a set"
    and equiv :: "'a => 'a => bool"  (infix \<open>\<sim>\<close> 50)
  assumes "partial_equivalence A (\<sim>)"
consts
  sdrop :: "nat => 'a stream => 'a stream"
class height = type +
  fixes height :: "'a => nat"
instantiation
  tree :: (type) height
  height_tree == height :: 'a tree => nat
locale equivalence
  fixes A :: "'a set"
    and equiv :: "'a => 'a => bool"  (infix \<open>\<sim>\<close> 50)
  assumes "equivalence A (\<sim>)"
consts
  sfilter :: "('a => bool) => 'a stream => 'a stream"
locale semiconnex
  fixes A :: "'a set"
    and less :: "'a => 'a => bool"  (infix \<open>\<sqsubset>\<close> 50)
  assumes "semiconnex A (\<sqsubset>)"
Found termination order: "size <*mlex*> {}"
consts
  cycle :: "'a list => 'a stream"
locale semiconnex_irreflexive
  fixes A :: "'a set"
    and less :: "'a => 'a => bool"  (infix \<open>\<sqsubset>\<close> 50)
  assumes "semiconnex_irreflexive A (\<sqsubset>)"
locale connex
  fixes A :: "'a set"
    and
    less_eq :: "'a => 'a => bool"  (infix \<open>\<sqsubseteq>\<close> 50)
  assumes "connex A (\<sqsubseteq>)"
consts
  siterate :: "('a => 'a) => 'a => 'a stream"
Found termination order: "size <*mlex*> {}"
locale total_pseudo_ordered_set
  fixes A :: "'a set"
    and
    less_eq :: "'a => 'a => bool"  (infix \<open>\<sqsubseteq>\<close> 50)
  assumes "total_pseudo_ordered_set A (\<sqsubseteq>)"
consts
  flat :: "'a list stream => 'a stream"
locale total_quasi_ordered_set
  fixes A :: "'a set"
    and
    less_eq :: "'a => 'a => bool"  (infix \<open>\<sqsubseteq>\<close> 50)
  assumes "total_quasi_ordered_set A (\<sqsubseteq>)"
Found termination order: "size <*mlex*> {}"
locale total_ordered_set
  fixes A :: "'a set"
    and
    less_eq :: "'a => 'a => bool"  (infix \<open>\<sqsubseteq>\<close> 50)
  assumes "total_ordered_set A (\<sqsubseteq>)"
locale well_founded
  fixes A :: "'a set"
    and less :: "'a => 'a => bool"  (infix \<open>\<sqsubset>\<close> 50)
  assumes "well_founded A (\<sqsubset>)"
### theory "HOL-Library.BigO"
### 1.069s elapsed time, 4.025s cpu time, 0.869s GC time
consts
  sinterleave :: "'a stream => 'a stream => 'a stream"
### Cannot skip proof of schematic goal statement
consts
  szip :: "'a stream => 'b stream => ('a * 'b) stream"
### Cannot skip proof of schematic goal statement
Found termination order: "size <*mlex*> {}"
consts
  smap2 :: "('a => 'b => 'c) => 'a stream => 'b stream => 'c stream"
### theory "HOL-Library.Stream"
### 1.161s elapsed time, 4.280s cpu time, 0.953s GC time
Found termination order: "size <*mlex*> {}"
locale well_founded_ordered_set
  fixes A :: "'a set"
    and less :: "'a => 'a => bool"  (infix \<open>\<sqsubset>\<close> 50)
  assumes "well_founded_ordered_set A (\<sqsubset>)"
locale well_related_set
  fixes A :: "'a set"
    and
    less_eq :: "'a => 'a => bool"  (infix \<open>\<sqsubseteq>\<close> 50)
  assumes "well_related_set A (\<sqsubseteq>)"
Found termination order: "size <*mlex*> {}"
locale pre_well_ordered_set
  fixes A :: "'a set"
    and
    less_eq :: "'a => 'a => bool"  (infix \<open>\<sqsubseteq>\<close> 50)
  assumes "pre_well_ordered_set A (\<sqsubseteq>)"
Found termination order: "size <*mlex*> {}"
locale well_ordered_set
  fixes A :: "'a set"
    and
    less_eq :: "'a => 'a => bool"  (infix \<open>\<sqsubseteq>\<close> 50)
  assumes "well_ordered_set A (\<sqsubseteq>)"
Found termination order: "(%p. size (fst p)) <*mlex*> {}"
locale connex
  fixes A :: "'a set"
    and
    less_eq :: "'a => 'a => bool"  (infix \<open>\<sqsubseteq>\<close> 50)
  assumes "connex A (\<sqsubseteq>)"
Found termination order: "size <*mlex*> {}"
locale compatible
  fixes A :: "'a set"
    and
    less_eq :: "'a => 'a => bool"  (infix \<open>\<sqsubseteq>\<close> 50)
    and less :: "'a => 'a => bool"  (infix \<open>\<sqsubset>\<close> 50)
  assumes "compatible A (\<sqsubseteq>) (\<sqsubset>)"
locale compatible_ordering
  fixes A :: "'a set"
    and
    less_eq :: "'a => 'a => bool"  (infix \<open>\<sqsubseteq>\<close> 50)
    and less :: "'a => 'a => bool"  (infix \<open>\<sqsubset>\<close> 50)
  assumes "compatible_ordering A (\<sqsubseteq>) (\<sqsubset>)"
[| ?x \<sqsubset> ?y; ?y \<sqsubset> ?z; ?x : A; ?y : A; ?z : A |]
==> ?x \<sqsubset> ?z
[| ?x \<sqsubset> ?y; ?y \<sqsubset> ?x; ?x : A; ?y : A |] ==> False
?x : A ==> ~ ?x \<sqsubset> ?x
locale transitive
  fixes A :: "'a set"
    and
    less_eq :: "'a => 'a => bool"  (infix \<open>\<sqsubseteq>\<close> 50)
  assumes "transitive A (\<sqsubseteq>)"
Found termination order: "(%p. size (snd p)) <*mlex*> {}"
locale attractive_ordering
  fixes A :: "'a set"
    and
    less_eq :: "'a => 'a => bool"  (infix \<open>\<sqsubseteq>\<close> 50)
    and less :: "'a => 'a => bool"  (infix \<open>\<sqsubset>\<close> 50)
  assumes "attractive_ordering A (\<sqsubseteq>) (\<sqsubset>)"
locale pseudo_ordering
  fixes A :: "'a set"
    and
    less_eq :: "'a => 'a => bool"  (infix \<open>\<sqsubseteq>\<close> 50)
    and less :: "'a => 'a => bool"  (infix \<open>\<sqsubset>\<close> 50)
  assumes "pseudo_ordering A (\<sqsubseteq>) (\<sqsubset>)"
locale quasi_ordering
  fixes A :: "'a set"
    and
    less_eq :: "'a => 'a => bool"  (infix \<open>\<sqsubseteq>\<close> 50)
    and less :: "'a => 'a => bool"  (infix \<open>\<sqsubset>\<close> 50)
  assumes "quasi_ordering A (\<sqsubseteq>) (\<sqsubset>)"
locale partial_ordering
  fixes A :: "'a set"
    and
    less_eq :: "'a => 'a => bool"  (infix \<open>\<sqsubseteq>\<close> 50)
    and less :: "'a => 'a => bool"  (infix \<open>\<sqsubset>\<close> 50)
  assumes "partial_ordering A (\<sqsubseteq>) (\<sqsubset>)"
locale well_founded_ordering
  fixes A :: "'a set"
    and
    less_eq :: "'a => 'a => bool"  (infix \<open>\<sqsubseteq>\<close> 50)
    and less :: "'a => 'a => bool"  (infix \<open>\<sqsubset>\<close> 50)
  assumes "well_founded_ordering A (\<sqsubseteq>) (\<sqsubset>)"
locale total_ordering
  fixes A :: "'a set"
    and
    less_eq :: "'a => 'a => bool"  (infix \<open>\<sqsubseteq>\<close> 50)
    and less :: "'a => 'a => bool"  (infix \<open>\<sqsubset>\<close> 50)
  assumes "total_ordering A (\<sqsubseteq>) (\<sqsubset>)"
locale strict_total_ordering
  fixes A :: "'a set"
    and
    less_eq :: "'a => 'a => bool"  (infix \<open>\<sqsubseteq>\<close> 50)
    and less :: "'a => 'a => bool"  (infix \<open>\<sqsubset>\<close> 50)
  assumes "strict_total_ordering A (\<sqsubseteq>) (\<sqsubset>)"
class ord = type +
  fixes less_eq :: "'a => 'a => bool"
    and less :: "'a => 'a => bool"
Found termination order: "size <*mlex*> {}"
class compat = ord +
  assumes "compatible_ordering UNIV (<=) (<)"
### Cannot skip proof of schematic goal statement
### theory "HOL-Library.Tree"
### 2.088s elapsed time, 6.616s cpu time, 1.231s GC time
Loading theory "Draft.Templates" (required by "Draft.Complete_RelationsMoreTemplates" via "Draft.ExtrEqs")
[| ?a <= ?b; ?b <= ?c |] ==> ?a <= ?c
[| ?x < ?y; ?y < ?z |] ==> ?x < ?z
?x <= ?x
~ ?x < ?x
[| ?x < ?y; ?y < ?x |] ==> False
supremum {?x} ?x
datatype template_term
=
     t_empty
   | template_app of template_term * template_term
   | template_hole of int
   | template_var of int
datatype sign
= equals | greater_equals | greater_than | less_equals | less_than
datatype template
=
     template_bimplication of template * template
   | template_dunno
   | template_equation of template_term * template_term
   | template_implication of template list * template
   | template_inequation of sign * template_term * template_term
   | template_negation of template
   | template_predicate of template_term
constructor t_empty: template_term
constructor template_app: template_term * template_term -> template_term
constructor template_hole: int -> template_term
constructor template_var: int -> template_term
constructor equals: sign
constructor greater_equals: sign
constructor greater_than: sign
constructor less_equals: sign
constructor less_than: sign
constructor template_bimplication: template * template -> template
constructor template_dunno: template
constructor template_equation: template_term * template_term -> template
constructor template_implication: template list * template -> template
constructor template_inequation:
   sign * template_term * template_term -> template
constructor template_negation: template -> template
constructor template_predicate: template_term -> template
val vfs = fn: term -> (indexname * typ) list * (string * typ) list
val indexOf = fn: ''a list -> ''a -> int -> int
val has_eq = fn: term -> bool
val term2template = fn:
   (indexname * typ) list -> (string * typ) list -> term -> template_term
val lemma2predicate = fn: term -> term -> template
val makeTemplatewithContext = fn: term -> term -> template
val lemma2template = fn: term -> template
val thm2template = fn: thm -> template
val tterm2string = fn: template_term -> string
val template2string = fn: template -> string
val t = "height ?t <= size ?t": thm
val th =
   Const ("HOL.Trueprop", "bool => prop") $
     (Const ("Orderings.ord_class.less_eq", "nat => nat => bool") $
       (Const ("Tree.height_class.height", "?'a tree => nat") $
         Var (("t", 0), "?'a tree")) $
       (Const ("Nat.size_class.size", "?'a tree => nat") $
         Var (("t", 0), "?'a tree"))):
   term
### theory "Draft.Templates"
### 0.055s elapsed time, 0.112s cpu time, 0.000s GC time
Loading theory "Draft.ExtrEqs" (required by "Draft.Complete_RelationsMoreTemplates")
class attractive_order = ord +
  assumes "attractive_ordering UNIV (<=) (<)"
### Cannot skip proof of schematic goal statement
[| ?C ~= {}; ALL y:?C. sympartp (<=) y ?x |] ==> supremum ?C ?x
class psorder = ord +
  assumes "pseudo_ordering UNIV (<=) (<)"
### Cannot skip proof of schematic goal statement
val eqpattern =
   Pattern
    (
       Const ("HOL.Trueprop", "bool => prop") $
         (Const ("HOL.eq", "?'a => ?'a => bool") $
           Var (("_dummy_", 1), "?'a") $ Var (("_dummy_", 2), "?'a"))
       ):
   term Find_Theorems.criterion
val badeqpattern = Pattern (Const ("Pure.eq", "?'a => ?'a => prop")):
   term Find_Theorems.criterion
val undefpattern =
   Pattern
    (
       Const ("HOL.Trueprop", "bool => prop") $
         (Const ("HOL.eq", "?'a => ?'a => bool") $
           Var (("_dummy_", 1), "?'a") $ Const ("HOL.undefined", "?'a"))
       ):
   term Find_Theorems.criterion
val thmpattern =
   Pattern
    (Const ("HOL.Trueprop", "bool => prop") $ Var (("_dummy_", 1), "bool")):
   term Find_Theorems.criterion
val badnames =
   ["*nitpick*", "*Nitpick*", "*full_exhaustive*", "*_def*", "Enum.finite*",
    "*Quickcheck*", "ATP*", "*Nunchaku*", "*Code*", "*BNF*", "*SMT*",
    "*.*.*"]:
   string list
val unwanted_names =
   [(false, Name "*nitpick*"), (false, Name "*Nitpick*"),
    (false, Name "*full_exhaustive*"), (false, Name "*_def*"),
    (false, Name "Enum.finite*"), (false, Name "*Quickcheck*"),
    (false, Name "ATP*"), (false, Name "*Nunchaku*"),
    (false, Name "*Code*"), (false, Name "*BNF*"), (false, Name "*SMT*"),
    (false, Name "*.*.*")]:
   (bool * term Find_Theorems.criterion) list
val has_vars = fn: term -> bool
val get_all_eqs = fn: string -> Proof.context -> (string * thm) list
val get_all_thms = fn: string -> Proof.context -> (string * thm) list
val get_noneq_thms = fn: string -> Proof.context -> (string * thm) list
val template_eqs = fn:
   string -> Proof.context -> (string * thm * template) list
val template_thms = fn:
   string -> Proof.context -> (string * thm * template) list
### theory "Draft.ExtrEqs"
### 0.523s elapsed time, 1.068s cpu time, 0.050s GC time
class qorder = ord +
  assumes "quasi_ordering UNIV (<=) (<)"
### Cannot skip proof of schematic goal statement
class porder = ord +
  assumes "partial_ordering UNIV (<=) (<)"
### Cannot skip proof of schematic goal statement
class wf_qorder = ord +
  assumes "well_founded_ordering UNIV (<=) (<)"
### Cannot skip proof of schematic goal statement
class totalorder = ord +
  assumes "total_ordering UNIV (<=) (<)"
### Cannot skip proof of schematic goal statement
class linorder = order +
  assumes "linear": "!!x y. x <= y | y <= x"
### Cannot skip proof of schematic goal statement
[| ?x < ?y; ?y < ?z |] ==> ?x < ?z
supremum {?x} ?y = (?x = ?y)
[| ?C ~= {}; ALL y:?C. sympartp (<=) y ?x |] ==> supremum ?C ?x
[| ?x <= ?y; ?y <= ?z |] ==> ?x <= ?z
[| ?x <= ?y ==> ?P; ?y <= ?x ==> ?P |] ==> ?P
[| ?x < ?y ==> ?P; ?x = ?y ==> ?P; ?y < ?x ==> ?P |] ==> ?P
### Cannot skip proof of schematic goal statement
locale attractive
  fixes A :: "'a set"
    and
    less_eq :: "'a => 'a => bool"  (infix \<open>\<sqsubseteq>\<close> 50)
  assumes "attractive A (\<sqsubseteq>)"
### Cannot skip proof of schematic goal statement
### Rule already declared as introduction (intro)
### (!!x. ?f x = ?g x) ==> ?f = ?g
locale irreflexive
  fixes A :: "'a set"
    and less :: "'a => 'a => bool"  (infix \<open>\<sqsubset>\<close> 50)
  assumes "irreflexive A (\<sqsubset>)"
### theory "Draft.Binary_Relations"
### 5.676s elapsed time, 11.262s cpu time, 1.556s GC time
Loading theory "Draft.Complete_Relations" (required by "Draft.Complete_RelationsMoreTemplates")
### theory "Draft.Complete_Relations"
### 0.263s elapsed time, 0.368s cpu time, 0.046s GC time
Loading theory "Draft.Complete_RelationsMoreTemplates"
val templateLemmas =
   [("Complete_Relations.pair_complete_imp_directed",
     "pair_complete ?A ?less_eq ==> directed ?A ?less_eq",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 1, template_var 1),
              template_var 0)
            )],
       template_predicate
        (
           template_app
            (template_app (template_hole 0, template_var 1), template_var 0)
           ))),
    ("Complete_Relations.complete_empty",
     "?CC-complete {} ?r = ({} ~: ?CC)",
     template_equation
      (template_app
        (template_app
          (template_app (template_hole 3, template_var 1), template_hole 2),
         template_var 0),
       template_app
        (template_hole 1,
         template_app
          (template_app (template_hole 0, template_hole 2),
           template_var 1)))),
    ("Complete_Relations.extremed_iff_UNIV_complete",
     "extremed ?A ?less_eq = {?A}-complete ?A ?less_eq",
     template_equation
      (template_app
        (template_app (template_hole 3, template_var 1), template_var 0),
       template_app
        (template_app
          (template_app
            (template_hole 2,
             template_app
              (template_app (template_hole 1, template_var 1),
               template_hole 0)),
           template_var 1),
         template_var 0))),
    ("Complete_Relations.complete_cmono",
     "?CC <= ?DD ==> ?DD-complete <= ?CC-complete",
     template_implication
      ([template_inequation (less_equals, template_var 1, template_var 0)],
       template_inequation
        (less_equals, template_app (template_hole 0, template_var 0),
         template_app (template_hole 0, template_var 1)))),
    ("Complete_Relations.connex_directed_complete",
     "{DC. directed DC (<=)}-complete {C. connex C ?r} (<=)",
     template_predicate
      (
         template_app
          (template_app
            (template_app
              (template_hole 5, template_app (template_hole 4, t_empty)),
             template_app (template_hole 1, t_empty)),
           template_hole 2)
         )),
    ("Complete_Relations.pointed_iff_empty_complete",
     "extremed ?A ?less_eq = {{}}-complete ?A (%x y. ?less_eq y x)",
     template_equation
      (template_app
        (template_app (template_hole 4, template_var 1), template_var 0),
       template_app
        (template_app
          (template_app
            (template_hole 3,
             template_app
              (template_app (template_hole 2, template_hole 1),
               template_hole 0)),
           template_var 1),
         t_empty))),
    ("Complete_Relations.complete_dual",
     "UNIV-complete ?A ?less_eq ==> UNIV-complete ?A (%x y. ?less_eq y x)",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app (template_hole 1, template_hole 0),
                template_var 1),
              template_var 0)
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_app (template_hole 1, template_hole 0),
               template_var 1),
             t_empty)
           ))),
    ("Complete_Relations.complete_union",
     "(?CC Un ?CC')-complete ?A ?r =
      (?CC-complete ?A ?r & ?CC'-complete ?A ?r)",
     template_equation
      (template_app
        (template_app
          (template_app
            (template_hole 2,
             template_app
              (template_app (template_hole 1, template_var 3),
               template_var 2)),
           template_var 1),
         template_var 0),
       template_app
        (template_app
          (template_hole 0,
           template_app
            (template_app
              (template_app (template_hole 2, template_var 3),
               template_var 1),
             template_var 0)),
         template_app
          (template_app
            (template_app (template_hole 2, template_var 2),
             template_var 1),
           template_var 0)))),
    ("Complete_Relations.connex_dual_semicomplete",
     "semicomplete {C. connex C ?r} (%x y. y <= x)",
     template_predicate
      (
         template_app
          (template_app
            (template_app
              (template_hole 7, template_app (template_hole 6, t_empty)),
             template_app (template_hole 2, t_empty)),
           t_empty)
         )),
    ("Complete_Relations.extremed_imp_ex_bound",
     "[| extremed ?A ?r; ?X <= ?A |] ==> EX b:?A. bound ?X ?r b",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 3, template_var 2),
              template_var 1)
            ),
        template_inequation (less_equals, template_var 0, template_var 2)],
       template_predicate
        (
           template_app
            (template_app (template_hole 1, template_var 2), t_empty)
           ))),
    ("Complete_Relations.connex_directed_Un",
     "[| ?CC <= {C. connex C ?r}; directed ?CC (<=) |]
      ==> connex (\<Union> ?CC) ?r",
     template_implication
      ([template_inequation
         (less_equals, template_var 1,
          template_app (template_hole 4, t_empty)),
        template_predicate
         (
            template_app
             (template_app (template_hole 2, template_var 1),
              template_hole 1)
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 3,
               template_app (template_hole 0, template_var 1)),
             template_var 0)
           ))),
    ("Complete_Relations.directed_complete_pair_complete_imp_extremed",
     "[| directed_complete ?A ?less_eq; pair_complete ?A ?less_eq;
         ?A ~= {} |]
      ==> extremed ?A ?less_eq",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 5, template_var 1),
              template_var 0)
            ),
        template_predicate
         (
            template_app
             (template_app (template_hole 4, template_var 1),
              template_var 0)
            ),
        template_negation
         (template_equation (template_var 1, template_hole 1))],
       template_predicate
        (
           template_app
            (template_app (template_hole 0, template_var 1), template_var 0)
           ))),
    ("Complete_Relations.pointed_directed_complete",
     "{X. directed X ?r}-complete ?A ?r =
      (directed_complete ?A ?r & extremed ?A (%x y. ?r y x))",
     template_equation
      (template_app
        (template_app
          (template_app
            (template_hole 5, template_app (template_hole 4, t_empty)),
           template_var 0),
         template_var 1),
       template_app
        (template_app
          (template_hole 2,
           template_app
            (template_app (template_hole 1, template_var 0),
             template_var 1)),
         template_app
          (template_app (template_hole 0, template_var 0), t_empty)))),
    ("Complete_Relations.semicomplete_nonempty_imp_extremed",
     "[| semicomplete ?A ?r; ?A ~= {} |] ==> extremed ?A ?r",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_hole 5, template_app (template_hole 4, t_empty)),
                template_var 1),
              template_var 0)
            ),
        template_negation
         (template_equation (template_var 1, template_hole 1))],
       template_predicate
        (
           template_app
            (template_app (template_hole 0, template_var 1), template_var 0)
           ))),
    ("Complete_Relations.complete_iff_pointed_semicomplete",
     "UNIV-complete ?A ?less_eq =
      (semicomplete ?A ?less_eq & extremed ?A (%x y. ?less_eq y x))",
     template_equation
      (template_app
        (template_app
          (template_app (template_hole 7, template_hole 6), template_var 1),
         template_var 0),
       template_app
        (template_app
          (template_hole 5,
           template_app
            (template_app
              (template_app
                (template_hole 7, template_app (template_hole 4, t_empty)),
               template_var 1),
             template_var 0)),
         template_app
          (template_app (template_hole 0, template_var 1), t_empty)))),
    ("Complete_Relations.connex_bounded_complete",
     "bounded_complete {C. connex C ?r} (<=)",
     template_predicate
      (
         template_app
          (template_app
            (template_app
              (template_hole 6, template_app (template_hole 5, t_empty)),
             template_app (template_hole 3, t_empty)),
           t_empty)
         )),
    ("Complete_Relations.bounded_complete_iff_dual_semicomplete",
     "bounded_complete ?A ?less_eq = semicomplete ?A (%x y. ?less_eq y x)",
     template_equation
      (template_app
        (template_app
          (template_app
            (template_hole 6, template_app (template_hole 5, t_empty)),
           template_var 1),
         template_var 0),
       template_app
        (template_app
          (template_app
            (template_hole 6, template_app (template_hole 5, t_empty)),
           template_var 1),
         t_empty))),
    ("Complete_Relations.conditionally_complete_imp_pair_complete_iff_directed",
     "conditionally_complete ?A ?less_eq ==>
      pair_complete ?A ?less_eq = directed ?A ?less_eq",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_hole 10,
                  template_app (template_hole 9, t_empty)),
                template_var 1),
              template_var 0)
            )],
       template_equation
        (template_app
          (template_app (template_hole 1, template_var 1), template_var 0),
         template_app
          (template_app (template_hole 0, template_var 1),
           template_var 0)))),
    ("Complete_Relations.completeD",
     "[| ?CC-complete ?A ?r; ?X <= ?A; ?X : ?CC |]
      ==> Ex (extreme_bound ?A ?r ?X)",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app (template_hole 8, template_var 3),
                template_var 2),
              template_var 1)
            ),
        template_inequation (less_equals, template_var 0, template_var 2),
        template_predicate
         (
            template_app
             (template_app (template_hole 6, template_var 0),
              template_var 3)
            )],
       template_predicate
        (
           template_app
            (template_hole 5,
             template_app
              (template_app
                (template_hole 4, template_app (template_hole 3, t_empty)),
               t_empty))
           ))),
    ("Complete_Relations.complete_iff_conditionally_complete_extremed_pointed",
     "UNIV-complete ?A ?less_eq =
      (conditionally_complete ?A ?less_eq &
       extremed ?A ?less_eq & extremed ?A (%x y. ?less_eq y x))",
     template_equation
      (template_app
        (template_app
          (template_app (template_hole 9, template_hole 8), template_var 1),
         template_var 0),
       template_app
        (template_app
          (template_hole 7,
           template_app
            (template_app
              (template_app
                (template_hole 9, template_app (template_hole 6, t_empty)),
               template_var 1),
             template_var 0)),
         template_app
          (template_app
            (template_hole 7,
             template_app
              (template_app (template_hole 0, template_var 1),
               template_var 0)),
           template_app
            (template_app (template_hole 0, template_var 1), t_empty))))),
    ("Complete_Relations.directed_sets_directed_complete",
     "ALL DC<=?AA. (ALL X:DC. directed X ?r) --> \<Union> DC : ?AA ==>
      {DC. directed DC (<=)}-complete {X: ?AA. directed X ?r} (<=)",
     template_implication
      ([template_predicate (template_app (template_hole 12, t_empty))],
       template_predicate
        (
           template_app
            (template_app
              (template_app
                (template_hole 5, template_app (template_hole 4, t_empty)),
               template_app (template_hole 1, t_empty)),
             template_hole 2)
           ))),
    ("Complete_Relations.completeI",
     "(!!X. [| X <= ?A; X : ?CC |] ==> Ex (extreme_bound ?A ?r X)) ==>
      ?CC-complete ?A ?r",
     template_implication
      ([template_predicate (template_app (template_hole 10, t_empty))],
       template_predicate
        (
           template_app
            (template_app
              (template_app (template_hole 0, template_var 1),
               template_var 2),
             template_var 0)
           ))),
    ("Complete_Relations.semicomplete_iff_conditionally_complete_extremed",
     "?A ~= {} ==>
      semicomplete ?A ?less_eq =
      (conditionally_complete ?A ?less_eq & extremed ?A ?less_eq)",
     template_implication
      ([template_negation
         (template_equation (template_var 1, template_hole 7))],
       template_equation
        (template_app
          (template_app
            (template_app
              (template_hole 5, template_app (template_hole 4, t_empty)),
             template_var 1),
           template_var 0),
         template_app
          (template_app
            (template_hole 3,
             template_app
              (template_app
                (template_app
                  (template_hole 5,
                   template_app (template_hole 4, t_empty)),
                 template_var 1),
               template_var 0)),
           template_app
            (template_app (template_hole 0, template_var 1),
             template_var 0))))),
    ("Complete_Relations.pair_completeD",
     "[| pair_complete ?A ?r; ?x : ?A; ?y : ?A |]
      ==> Ex (extreme_bound ?A ?r {?x, ?y})",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 8, template_var 3),
              template_var 2)
            ),
        template_predicate
         (
            template_app
             (template_app (template_hole 7, template_var 1),
              template_var 3)
            ),
        template_predicate
         (
            template_app
             (template_app (template_hole 7, template_var 0),
              template_var 3)
            )],
       template_predicate (template_app (template_hole 6, t_empty)))),
    ("Complete_Relations.pair_completeI",
     "(!!x y. [| x : ?A; y : ?A |] ==> Ex (extreme_bound ?A ?r {x, y})) ==>
      pair_complete ?A ?r",
     template_implication
      ([template_predicate (template_app (template_hole 10, t_empty))],
       template_predicate
        (
           template_app
            (template_app (template_hole 0, template_var 1), template_var 0)
           ))),
    ("Complete_Relations.pointed_conditionally_complete_iff_bounded_complete",
     "?A ~= {} ==>
      (conditionally_complete ?A ?less_eq &
       extremed ?A (%x y. ?less_eq y x)) =
      bounded_complete ?A ?less_eq",
     template_implication
      ([template_negation
         (template_equation (template_var 1, template_hole 7))],
       template_equation
        (template_app
          (template_app
            (template_hole 5,
             template_app
              (template_app
                (template_app
                  (template_hole 4,
                   template_app (template_hole 3, t_empty)),
                 template_var 1),
               template_var 0)),
           template_app
            (template_app (template_hole 0, template_var 1), t_empty)),
         template_app
          (template_app
            (template_app
              (template_hole 4, template_app (template_hole 3, t_empty)),
             template_var 1),
           template_var 0)))),
    ("Complete_Relations.conditionally_complete_dual",
     "conditionally_complete ?A ?less_eq ==>
      conditionally_complete ?A (%x y. ?less_eq y x)",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_hole 7, template_app (template_hole 6, t_empty)),
                template_var 1),
              template_var 0)
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_app
                (template_hole 7, template_app (template_hole 6, t_empty)),
               template_var 1),
             t_empty)
           ))),
    ("Complete_Relations.monotone_directed_complete",
     "[| directed_complete ?A ?r; ?f ` ?I <= ?A; directed ?I ?ri; ?I ~= {};
         monotone_on ?I ?ri ?r ?f |]
      ==> Ex (extreme_bound ?A ?r (?f ` ?I))",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 13, template_var 4),
              template_var 3)
            ),
        template_inequation
         (less_equals,
          template_app
           (template_app (template_hole 11, template_var 2),
            template_var 1),
          template_var 4),
        template_predicate
         (
            template_app
             (template_app (template_hole 10, template_var 1),
              template_var 0)
            ),
        template_negation
         (template_equation (template_var 1, template_hole 7)),
        template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_app (template_hole 6, template_var 1),
                  template_var 0),
                template_var 3),
              template_var 2)
            )],
       template_predicate (template_app (template_hole 5, t_empty)))),
    ("Complete_Relations.conditionally_complete_imp_nonempty_imp_ex_extreme_bound_iff_ex_bound",
     "[| conditionally_complete ?A ?r; ?X <= ?A; ?X ~= {} |]
      ==> Ex (extreme_bound ?A ?r ?X) = (EX b:?A. bound ?X ?r b)",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_hole 13,
                  template_app (template_hole 12, t_empty)),
                template_var 2),
              template_var 1)
            ),
        template_inequation (less_equals, template_var 0, template_var 2),
        template_negation
         (template_equation (template_var 0, template_hole 6))],
       template_equation
        (template_app (template_hole 3, t_empty),
         template_app
          (template_app (template_hole 11, template_var 2), t_empty))))]:
   (string * thm * template) list
### theory "Draft.Complete_RelationsMoreTemplates"
### 0.347s elapsed time, 0.532s cpu time, 0.063s GC time
val it = (): unit
