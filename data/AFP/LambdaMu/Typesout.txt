Loading theory "Draft.Syntax" (required by "Draft.TypesMoreTemplates" via "Draft.Types")
Loading theory "HOL-Library.Function_Algebras" (required by "Draft.TypesMoreTemplates" via "Draft.ExtrEqs" via "HOL-Library.BigO")
Loading theory "HOL-Library.Nat_Bijection" (required by "Draft.TypesMoreTemplates" via "Draft.ExtrEqs" via "HOL-Library.Stream")
Loading theory "HOL-Library.Set_Algebras" (required by "Draft.TypesMoreTemplates" via "Draft.ExtrEqs" via "HOL-Library.BigO")
instantiation
  fun :: (type, plus) plus
  plus_fun == plus :: ('a => 'b) => ('a => 'b) => 'a => 'b
instantiation
  set :: (plus) plus
  plus_set == plus :: 'a set => 'a set => 'a set
instantiation
  fun :: (type, zero) zero
  zero_fun == zero_class.zero :: 'a => 'b
instantiation
  set :: (times) times
  times_set == times :: 'a set => 'a set => 'a set
instantiation
  fun :: (type, times) times
  times_fun == times :: ('a => 'b) => ('a => 'b) => 'a => 'b
instantiation
  set :: (zero) zero
  zero_set == zero_class.zero :: 'a set
instantiation
  fun :: (type, one) one
  one_fun == one_class.one :: 'a => 'b
instantiation
  set :: (one) one
  one_set == one_class.one :: 'a set
Found termination order: "(%p. size (snd p)) <*mlex*> {}"
### theory "HOL-Library.Function_Algebras"
### 0.126s elapsed time, 0.520s cpu time, 0.047s GC time
Loading theory "HOL-Library.Tree" (required by "Draft.TypesMoreTemplates" via "Draft.ExtrEqs" via "Draft.Templates")
### theory "HOL-Library.Set_Algebras"
### 0.213s elapsed time, 0.866s cpu time, 0.047s GC time
Loading theory "HOL-Library.BigO" (required by "Draft.TypesMoreTemplates" via "Draft.ExtrEqs")
Found termination order: "size_list size <*mlex*> {}"
### theory "HOL-Library.Nat_Bijection"
### 0.336s elapsed time, 1.344s cpu time, 0.126s GC time
Loading theory "HOL-Library.Stream" (required by "Draft.TypesMoreTemplates" via "Draft.ExtrEqs")
consts
  left :: "'a tree => 'a tree"
consts
  right :: "'a tree => 'a tree"
Found termination order: "size <*mlex*> {}"
consts
  shift :: "'a list => 'a stream => 'a stream"
Proofs for coinductive predicate(s) "streamsp"
  Proving monotonicity ...
Found termination order: "size <*mlex*> {}"
Found termination order: "size <*mlex*> {}"
consts
  snth :: "'a stream => nat => 'a"
consts
  stake :: "nat => 'a stream => 'a list"
class height = type +
  fixes height :: "'a => nat"
instantiation
  tree :: (type) height
  height_tree == height :: 'a tree => nat
consts
  sdrop :: "nat => 'a stream => 'a stream"
consts
  sfilter :: "('a => bool) => 'a stream => 'a stream"
Found termination order: "size <*mlex*> {}"
consts
  cycle :: "'a list => 'a stream"
Found termination order: "size <*mlex*> {}"
consts
  siterate :: "('a => 'a) => 'a => 'a stream"
### theory "HOL-Library.BigO"
### 1.001s elapsed time, 3.788s cpu time, 0.847s GC time
consts
  flat :: "'a list stream => 'a stream"
Found termination order: "size <*mlex*> {}"
consts
  sinterleave :: "'a stream => 'a stream => 'a stream"
consts
  szip :: "'a stream => 'b stream => ('a * 'b) stream"
Found termination order: "size <*mlex*> {}"
consts
  smap2 :: "('a => 'b => 'c) => 'a stream => 'b stream => 'c stream"
### theory "HOL-Library.Stream"
### 1.056s elapsed time, 3.848s cpu time, 0.768s GC time
Found termination order: "size <*mlex*> {}"
Found termination order: "size <*mlex*> {}"
Found termination order: "size <*mlex*> {}"
Found termination order: "(%p. size (fst p)) <*mlex*> {}"
Found termination order: "size <*mlex*> {}"
consts
  ctxt_app :: "ctxt => ctxt => ctxt"
Found termination order: "(%p. size (snd p)) <*mlex*> {}"
Found termination order: "{}"
### theory "Draft.Syntax"
### 1.764s elapsed time, 6.030s cpu time, 1.024s GC time
Loading theory "Draft.Types" (required by "Draft.TypesMoreTemplates")
Proofs for inductive predicate(s) "typing_trm", "typing_cmd"
  Proving monotonicity ...
### theory "Draft.Types"
### 0.116s elapsed time, 0.237s cpu time, 0.000s GC time
Found termination order: "size <*mlex*> {}"
### theory "HOL-Library.Tree"
### 1.937s elapsed time, 5.948s cpu time, 1.015s GC time
Loading theory "Draft.Templates" (required by "Draft.TypesMoreTemplates" via "Draft.ExtrEqs")
datatype template_term
=
     t_empty
   | template_app of template_term * template_term
   | template_hole of int
   | template_var of int
datatype sign
= equals | greater_equals | greater_than | less_equals | less_than
datatype template
=
     template_bimplication of template * template
   | template_dunno
   | template_equation of template_term * template_term
   | template_implication of template list * template
   | template_inequation of sign * template_term * template_term
   | template_negation of template
   | template_predicate of template_term
constructor t_empty: template_term
constructor template_app: template_term * template_term -> template_term
constructor template_hole: int -> template_term
constructor template_var: int -> template_term
constructor equals: sign
constructor greater_equals: sign
constructor greater_than: sign
constructor less_equals: sign
constructor less_than: sign
constructor template_bimplication: template * template -> template
constructor template_dunno: template
constructor template_equation: template_term * template_term -> template
constructor template_implication: template list * template -> template
constructor template_inequation:
   sign * template_term * template_term -> template
constructor template_negation: template -> template
constructor template_predicate: template_term -> template
val vfs = fn: term -> (indexname * typ) list * (string * typ) list
val indexOf = fn: ''a list -> ''a -> int -> int
val has_eq = fn: term -> bool
val term2template = fn:
   (indexname * typ) list -> (string * typ) list -> term -> template_term
val lemma2predicate = fn: term -> term -> template
val makeTemplatewithContext = fn: term -> term -> template
val lemma2template = fn: term -> template
val thm2template = fn: thm -> template
val tterm2string = fn: template_term -> string
val template2string = fn: template -> string
val t = "height ?t <= size ?t": thm
val th =
   Const ("HOL.Trueprop", "bool => prop") $
     (Const ("Orderings.ord_class.less_eq", "nat => nat => bool") $
       (Const ("Tree.height_class.height", "?'a tree => nat") $
         Var (("t", 0), "?'a tree")) $
       (Const ("Nat.size_class.size", "?'a tree => nat") $
         Var (("t", 0), "?'a tree"))):
   term
### theory "Draft.Templates"
### 0.048s elapsed time, 0.064s cpu time, 0.000s GC time
Loading theory "Draft.ExtrEqs" (required by "Draft.TypesMoreTemplates")
val eqpattern =
   Pattern
    (
       Const ("HOL.Trueprop", "bool => prop") $
         (Const ("HOL.eq", "?'a => ?'a => bool") $
           Var (("_dummy_", 1), "?'a") $ Var (("_dummy_", 2), "?'a"))
       ):
   term Find_Theorems.criterion
val badeqpattern = Pattern (Const ("Pure.eq", "?'a => ?'a => prop")):
   term Find_Theorems.criterion
val undefpattern =
   Pattern
    (
       Const ("HOL.Trueprop", "bool => prop") $
         (Const ("HOL.eq", "?'a => ?'a => bool") $
           Var (("_dummy_", 1), "?'a") $ Const ("HOL.undefined", "?'a"))
       ):
   term Find_Theorems.criterion
val thmpattern =
   Pattern
    (Const ("HOL.Trueprop", "bool => prop") $ Var (("_dummy_", 1), "bool")):
   term Find_Theorems.criterion
val badnames =
   ["*nitpick*", "*Nitpick*", "*full_exhaustive*", "*_def*", "Enum.finite*",
    "*Quickcheck*", "ATP*", "*Nunchaku*", "*Code*", "*BNF*", "*SMT*",
    "*.*.*"]:
   string list
val unwanted_names =
   [(false, Name "*nitpick*"), (false, Name "*Nitpick*"),
    (false, Name "*full_exhaustive*"), (false, Name "*_def*"),
    (false, Name "Enum.finite*"), (false, Name "*Quickcheck*"),
    (false, Name "ATP*"), (false, Name "*Nunchaku*"),
    (false, Name "*Code*"), (false, Name "*BNF*"), (false, Name "*SMT*"),
    (false, Name "*.*.*")]:
   (bool * term Find_Theorems.criterion) list
val has_vars = fn: term -> bool
val get_all_eqs = fn: string -> Proof.context -> (string * thm) list
val get_all_thms = fn: string -> Proof.context -> (string * thm) list
val get_noneq_thms = fn: string -> Proof.context -> (string * thm) list
val template_eqs = fn:
   string -> Proof.context -> (string * thm * template) list
val template_thms = fn:
   string -> Proof.context -> (string * thm * template) list
### theory "Draft.ExtrEqs"
### 0.463s elapsed time, 0.516s cpu time, 0.066s GC time
Loading theory "Draft.TypesMoreTemplates"
val templateLemmas =
   [("Types.uniqueness",
     "?\<Gamma> , ?\<Delta> \<turnstile>\<^sub>C ?c ==>
      ?\<Gamma> , ?\<Delta> \<turnstile>\<^sub>C ?c",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app (template_hole 0, template_var 2),
                template_var 1),
              template_var 0)
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_app (template_hole 0, template_var 2),
               template_var 1),
             template_var 0)
           ))),
    ("Types.shift_eq", "?i = ?j ==> (?e\<langle>?i:?T\<rangle>) ?j = ?T",
     template_implication
      ([template_equation (template_var 3, template_var 2)],
       template_equation
        (template_app
          (template_app
            (template_app
              (template_app (template_hole 0, template_var 1),
               template_var 3),
             template_var 0),
           template_var 2),
         template_var 0))),
    ("Types.shift_gt", "?j < ?i ==> (?e\<langle>?i:?T\<rangle>) ?j = ?e ?j",
     template_implication
      ([template_inequation (less_than, template_var 3, template_var 2)],
       template_equation
        (template_app
          (template_app
            (template_app
              (template_app (template_hole 0, template_var 1),
               template_var 2),
             template_var 0),
           template_var 3),
         template_app (template_var 1, template_var 3)))),
    ("Types.shift_lt",
     "?i < ?j ==> (?e\<langle>?i:?T\<rangle>) ?j = ?e (?j - 1)",
     template_implication
      ([template_inequation (less_than, template_var 3, template_var 2)],
       template_equation
        (template_app
          (template_app
            (template_app
              (template_app (template_hole 2, template_var 1),
               template_var 3),
             template_var 0),
           template_var 2),
         template_app
          (template_var 1,
           template_app
            (template_app (template_hole 1, template_var 2),
             template_hole 0))))),
    ("Types.shift_commute",
     "?e\<langle>?i:?U\<rangle>\<langle>0:?T\<rangle> =
      ?e\<langle>0:?T\<rangle>\<langle>Suc ?i:?U\<rangle>",
     template_equation
      (template_app
        (template_app
          (template_app
            (template_hole 2,
             template_app
              (template_app
                (template_app (template_hole 2, template_var 3),
                 template_var 2),
               template_var 1)),
           template_hole 1),
         template_var 0),
       template_app
        (template_app
          (template_app
            (template_hole 2,
             template_app
              (template_app
                (template_app (template_hole 2, template_var 3),
                 template_hole 1),
               template_var 0)),
           template_app (template_hole 0, template_var 2)),
         template_var 1))),
    ("Types.uniqueness",
     "[| ?\<Gamma> , ?\<Delta> \<turnstile>\<^sub>T ?t : ?T1.0;
         ?\<Gamma> , ?\<Delta> \<turnstile>\<^sub>T ?t : ?T2.0 |]
      ==> ?T1.0 = ?T2.0",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_app (template_hole 1, template_var 4),
                  template_var 3),
                template_var 2),
              template_var 1)
            ),
        template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_app (template_hole 1, template_var 4),
                  template_var 3),
                template_var 2),
              template_var 0)
            )],
       template_equation (template_var 1, template_var 0))),
    ("Types.typing_elims",
     "[| ?\<Gamma> , ?\<Delta> \<turnstile>\<^sub>T `?x : ?T;
         ?\<Gamma> ?x = ?T ==> ?P |]
      ==> ?P",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_app (template_hole 2, template_var 4),
                  template_var 3),
                template_app (template_hole 1, template_var 2)),
              template_var 1)
            ),
        template_implication
         ([template_equation
            (template_app (template_var 4, template_var 2),
             template_var 1)],
          template_predicate (template_var 0))],
       template_predicate (template_var 0))),
    ("Types.typing_elims",
     "[| ?\<Gamma> , ?\<Delta> \<turnstile>\<^sub>C <?x>?t;
         ?\<Gamma> , ?\<Delta> \<turnstile>\<^sub>T ?t : ?\<Delta> ?x ==>
         ?P |]
      ==> ?P",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app (template_hole 2, template_var 4),
                template_var 3),
              template_app
               (template_app (template_hole 1, template_var 2),
                template_var 1))
            ),
        template_implication
         ([template_predicate
            (
               template_app
                (template_app
                  (template_app
                    (template_app (template_hole 0, template_var 4),
                     template_var 3),
                   template_var 1),
                 template_app (template_var 3, template_var 2))
               )],
          template_predicate (template_var 0))],
       template_predicate (template_var 0))),
    ("Types.typing_elims",
     "[| ?\<Gamma> , ?\<Delta> \<turnstile>\<^sub>T \<mu>?T1.0:?t : ?T;
         [| ?T = ?T1.0;
            ?\<Gamma> , ?\<Delta>\<langle>0:?T1.0\<rangle> \<turnstile>\<^sub>C ?t |]
         ==> ?P |]
      ==> ?P",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_app (template_hole 5, template_var 5),
                  template_var 4),
                template_app
                 (template_app (template_hole 4, template_var 3),
                  template_var 2)),
              template_var 1)
            ),
        template_implication
         ([template_equation (template_var 1, template_var 3)],
          template_implication
           ([template_predicate
              (
                 template_app
                  (template_app
                    (template_app (template_hole 2, template_var 5),
                     template_app
                      (template_app
                        (template_app (template_hole 1, template_var 4),
                         template_hole 0),
                       template_var 3)),
                   template_var 2)
                 )],
            template_predicate (template_var 0)))],
       template_predicate (template_var 0))),
    ("Types.typing_elims",
     "[| ?\<Gamma> , ?\<Delta> \<turnstile>\<^sub>T ?t \<degree> ?s : ?T;
         !!T1. [| ?\<Gamma> , ?\<Delta> \<turnstile>\<^sub>T ?t : T1 \<rightarrow>
                            ?T;
                  ?\<Gamma> , ?\<Delta> \<turnstile>\<^sub>T ?s : T1 |]
               ==> ?P |]
      ==> ?P",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_app (template_hole 3, template_var 5),
                  template_var 4),
                template_app
                 (template_app (template_hole 2, template_var 3),
                  template_var 2)),
              template_var 1)
            ),
        template_predicate (template_app (template_hole 1, t_empty))],
       template_predicate (template_var 0))),
    ("Types.typing_elims",
     "[| ?\<Gamma> , ?\<Delta> \<turnstile>\<^sub>T \<lambda>?T1.0:?t : ?T;
         !!T2. [| ?T = ?T1.0 \<rightarrow> T2;
                  ?\<Gamma>\<langle>0:?T1.0\<rangle> , ?\<Delta> \<turnstile>\<^sub>T ?t : T2 |]
               ==> ?P |]
      ==> ?P",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_app (template_hole 6, template_var 5),
                  template_var 4),
                template_app
                 (template_app (template_hole 5, template_var 3),
                  template_var 2)),
              template_var 1)
            ),
        template_predicate (template_app (template_hole 4, t_empty))],
       template_predicate (template_var 0))),
    ("Types.type_arrow_elim",
     "[| ?\<Gamma> , ?\<Delta> \<turnstile>\<^sub>T ?t : ?T1.0 \<rightarrow>
                   ?T2.0;
         !!x. [| ?t = `x; ?\<Gamma> x = ?T1.0 \<rightarrow> ?T2.0 |] ==> ?P;
         !!t T1 s.
            [| ?t = t \<degree> s;
               ?\<Gamma> , ?\<Delta> \<turnstile>\<^sub>T t : T1 \<rightarrow>
                        ?T1.0 \<rightarrow> ?T2.0;
               ?\<Gamma> , ?\<Delta> \<turnstile>\<^sub>T s : T1 |]
            ==> ?P;
         !!t. [| ?t = \<lambda>?T1.0:t;
                 ?\<Gamma>\<langle>0:?T1.0\<rangle> , ?\<Delta> \<turnstile>\<^sub>T t : ?T2.0 |]
              ==> ?P;
         !!c. [| ?t = \<mu>?T1.0 \<rightarrow> ?T2.0:c;
                 ?\<Gamma> , ?\<Delta>\<langle>0:?T1.0 \<rightarrow>
           ?T2.0\<rangle> \<turnstile>\<^sub>C c |]
              ==> ?P |]
      ==> ?P",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_app (template_hole 14, template_var 5),
                  template_var 4),
                template_var 3),
              template_app
               (template_app (template_hole 13, template_var 2),
                template_var 1))
            ),
        template_predicate (template_app (template_hole 12, t_empty)),
        template_predicate (template_app (template_hole 8, t_empty)),
        template_predicate (template_app (template_hole 8, t_empty)),
        template_predicate (template_app (template_hole 2, t_empty))],
       template_predicate (template_var 0)))]:
   (string * thm * template) list
### theory "Draft.TypesMoreTemplates"
### 0.323s elapsed time, 0.406s cpu time, 0.000s GC time
val it = (): unit
