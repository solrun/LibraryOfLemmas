Loading theory "HOL-Library.Function_Algebras" (required by "Draft.SemiringsMoreTemplates" via "Draft.ExtrEqs" via "HOL-Library.BigO")
Loading theory "HOL-Library.Nat_Bijection" (required by "Draft.SemiringsMoreTemplates" via "Draft.ExtrEqs" via "HOL-Library.Stream")
Loading theory "HOL-Library.Set_Algebras" (required by "Draft.SemiringsMoreTemplates" via "Draft.ExtrEqs" via "HOL-Library.BigO")
Loading theory "HOL-Library.Tree" (required by "Draft.SemiringsMoreTemplates" via "Draft.ExtrEqs" via "Draft.Templates")
instantiation
  fun :: (type, plus) plus
  plus_fun == plus :: ('a => 'b) => ('a => 'b) => 'a => 'b
instantiation
  set :: (plus) plus
  plus_set == plus :: 'a set => 'a set => 'a set
instantiation
  set :: (times) times
  times_set == times :: 'a set => 'a set => 'a set
instantiation
  fun :: (type, zero) zero
  zero_fun == zero_class.zero :: 'a => 'b
instantiation
  fun :: (type, times) times
  times_fun == times :: ('a => 'b) => ('a => 'b) => 'a => 'b
instantiation
  set :: (zero) zero
  zero_set == zero_class.zero :: 'a set
instantiation
  set :: (one) one
  one_set == one_class.one :: 'a set
instantiation
  fun :: (type, one) one
  one_fun == one_class.one :: 'a => 'b
Found termination order: "(%p. size (snd p)) <*mlex*> {}"
### theory "HOL-Library.Function_Algebras"
### 0.142s elapsed time, 0.583s cpu time, 0.019s GC time
Loading theory "Stone_Algebras.Lattice_Basics" (required by "Draft.SemiringsMoreTemplates" via "Draft.Semirings" via "Draft.Fixpoints")
class sup = type +
  fixes sup :: "'a => 'a => 'a"
Found termination order: "size_list size <*mlex*> {}"
class inf = type +
  fixes inf :: "'a => 'a => 'a"
class uminus = type +
  fixes uminus :: "'a => 'a"
### theory "HOL-Library.Set_Algebras"
### 0.255s elapsed time, 1.020s cpu time, 0.101s GC time
Loading theory "HOL-Library.BigO" (required by "Draft.SemiringsMoreTemplates" via "Draft.ExtrEqs")
### theory "HOL-Library.Nat_Bijection"
### 0.309s elapsed time, 1.233s cpu time, 0.101s GC time
Loading theory "HOL-Library.Stream" (required by "Draft.SemiringsMoreTemplates" via "Draft.ExtrEqs")
class ord = type +
  fixes less_eq :: "'a => 'a => bool"
    and less :: "'a => 'a => bool"
class order = preorder +
  assumes "order_antisym": "!!x y. [| x <= y; y <= x |] ==> x = y"
class semilattice_sup = sup + order +
  assumes "sup_ge1": "!!x y. x <= x \<squnion> y"
    and "sup_ge2": "!!y x. y <= x \<squnion> y"
    and "sup_least": "!!y x z. [| y <= x; z <= x |] ==> y \<squnion> z <= x"
### Partially applied constant "Lattices.sup_class.sup" on left hand side of equation, in theorem:
### monoid_add.sum_list (\<squnion>) bot ?xs == foldr (\<squnion>) ?xs bot
consts
  left :: "'a tree => 'a tree"
consts
  right :: "'a tree => 'a tree"
### Partially applied constant "Lattices.sup_class.sup" on left hand side of equation, in theorem:
### comm_monoid_add.sum (\<squnion>) bot ?g (set ?xs) ==
### sup_monoid.sum_list (map ?g (remdups ?xs))
Found termination order: "size <*mlex*> {}"
Found termination order: "size <*mlex*> {}"
class semilattice_inf = inf + order +
  assumes "inf_le1": "!!x y. x \<sqinter> y <= x"
    and "inf_le2": "!!x y. x \<sqinter> y <= y"
    and
    "inf_greatest": "!!x y z. [| x <= y; x <= z |] ==> x <= y \<sqinter> z"
consts
  shift :: "'a list => 'a stream => 'a stream"
Found termination order: "size <*mlex*> {}"
Proofs for coinductive predicate(s) "streamsp"
  Proving monotonicity ...
class height = type +
  fixes height :: "'a => nat"
instantiation
  tree :: (type) height
  height_tree == height :: 'a tree => nat
consts
  snth :: "'a stream => nat => 'a"
consts
  stake :: "nat => 'a stream => 'a list"
Found termination order: "size <*mlex*> {}"
consts
  sdrop :: "nat => 'a stream => 'a stream"
Found termination order: "size <*mlex*> {}"
class directed_semilattice_inf = semilattice_inf +
  assumes "ub": "!!x y. EX z>=x. y <= z"
consts
  sfilter :: "('a => bool) => 'a stream => 'a stream"
consts
  cycle :: "'a list => 'a stream"
Found termination order: "size <*mlex*> {}"
consts
  siterate :: "('a => 'a) => 'a => 'a stream"
consts
  flat :: "'a list stream => 'a stream"
### theory "HOL-Library.BigO"
### 0.954s elapsed time, 3.605s cpu time, 0.703s GC time
Found termination order: "size <*mlex*> {}"
consts
  sinterleave :: "'a stream => 'a stream => 'a stream"
Found termination order: "size <*mlex*> {}"
consts
  szip :: "'a stream => 'b stream => ('a * 'b) stream"
consts
  smap2 :: "('a => 'b => 'c) => 'a stream => 'b stream => 'c stream"
Found termination order: "size <*mlex*> {}"
### theory "HOL-Library.Stream"
### 1.079s elapsed time, 3.954s cpu time, 0.771s GC time
Found termination order: "size <*mlex*> {}"
Found termination order: "(%p. size (fst p)) <*mlex*> {}"
Found termination order: "size <*mlex*> {}"
Found termination order: "(%p. size (snd p)) <*mlex*> {}"
### Partially applied constant "Lattices.inf_class.inf" on left hand side of equation, in theorem:
### monoid_add.sum_list (\<sqinter>) top ?xs == foldr (\<sqinter>) ?xs top
### Partially applied constant "Lattices.inf_class.inf" on left hand side of equation, in theorem:
### comm_monoid_add.sum (\<sqinter>) top ?g (set ?xs) ==
### inf.sup_monoid.sum_list (map ?g (remdups ?xs))
Found termination order: "size <*mlex*> {}"
### theory "HOL-Library.Tree"
### 2.000s elapsed time, 6.467s cpu time, 0.973s GC time
Loading theory "Draft.Templates" (required by "Draft.SemiringsMoreTemplates" via "Draft.ExtrEqs")
datatype template_term
=
     t_empty
   | template_app of template_term * template_term
   | template_hole of int
   | template_var of int
datatype sign
= equals | greater_equals | greater_than | less_equals | less_than
datatype template
=
     template_bimplication of template * template
   | template_dunno
   | template_equation of template_term * template_term
   | template_implication of template list * template
   | template_inequation of sign * template_term * template_term
   | template_negation of template
   | template_predicate of template_term
constructor t_empty: template_term
constructor template_app: template_term * template_term -> template_term
constructor template_hole: int -> template_term
constructor template_var: int -> template_term
constructor equals: sign
constructor greater_equals: sign
constructor greater_than: sign
constructor less_equals: sign
constructor less_than: sign
constructor template_bimplication: template * template -> template
constructor template_dunno: template
constructor template_equation: template_term * template_term -> template
constructor template_implication: template list * template -> template
constructor template_inequation:
   sign * template_term * template_term -> template
constructor template_negation: template -> template
constructor template_predicate: template_term -> template
val vfs = fn: term -> (indexname * typ) list * (string * typ) list
val indexOf = fn: ''a list -> ''a -> int -> int
val has_eq = fn: term -> bool
val term2template = fn:
   (indexname * typ) list -> (string * typ) list -> term -> template_term
val lemma2predicate = fn: term -> term -> template
val makeTemplatewithContext = fn: term -> term -> template
val lemma2template = fn: term -> template
val thm2template = fn: thm -> template
val tterm2string = fn: template_term -> string
val template2string = fn: template -> string
val t = "height ?t <= size ?t": thm
val th =
   Const ("HOL.Trueprop", "bool => prop") $
     (Const ("Orderings.ord_class.less_eq", "nat => nat => bool") $
       (Const ("Tree.height_class.height", "?'a tree => nat") $
         Var (("t", 0), "?'a tree")) $
       (Const ("Nat.size_class.size", "?'a tree => nat") $
         Var (("t", 0), "?'a tree"))):
   term
### theory "Draft.Templates"
### 0.053s elapsed time, 0.120s cpu time, 0.000s GC time
Loading theory "Draft.ExtrEqs" (required by "Draft.SemiringsMoreTemplates")
val eqpattern =
   Pattern
    (
       Const ("HOL.Trueprop", "bool => prop") $
         (Const ("HOL.eq", "?'a => ?'a => bool") $
           Var (("_dummy_", 1), "?'a") $ Var (("_dummy_", 2), "?'a"))
       ):
   term Find_Theorems.criterion
val badeqpattern = Pattern (Const ("Pure.eq", "?'a => ?'a => prop")):
   term Find_Theorems.criterion
val undefpattern =
   Pattern
    (
       Const ("HOL.Trueprop", "bool => prop") $
         (Const ("HOL.eq", "?'a => ?'a => bool") $
           Var (("_dummy_", 1), "?'a") $ Const ("HOL.undefined", "?'a"))
       ):
   term Find_Theorems.criterion
val thmpattern =
   Pattern
    (Const ("HOL.Trueprop", "bool => prop") $ Var (("_dummy_", 1), "bool")):
   term Find_Theorems.criterion
val badnames =
   ["*nitpick*", "*Nitpick*", "*full_exhaustive*", "*_def*", "Enum.finite*",
    "*Quickcheck*", "ATP*", "*Nunchaku*", "*Code*", "*BNF*", "*SMT*",
    "*.*.*"]:
   string list
val unwanted_names =
   [(false, Name "*nitpick*"), (false, Name "*Nitpick*"),
    (false, Name "*full_exhaustive*"), (false, Name "*_def*"),
    (false, Name "Enum.finite*"), (false, Name "*Quickcheck*"),
    (false, Name "ATP*"), (false, Name "*Nunchaku*"),
    (false, Name "*Code*"), (false, Name "*BNF*"), (false, Name "*SMT*"),
    (false, Name "*.*.*")]:
   (bool * term Find_Theorems.criterion) list
val has_vars = fn: term -> bool
val get_all_eqs = fn: string -> Proof.context -> (string * thm) list
val get_all_thms = fn: string -> Proof.context -> (string * thm) list
val get_noneq_thms = fn: string -> Proof.context -> (string * thm) list
val template_eqs = fn:
   string -> Proof.context -> (string * thm * template) list
val template_thms = fn:
   string -> Proof.context -> (string * thm * template) list
### theory "Draft.ExtrEqs"
### 0.522s elapsed time, 1.086s cpu time, 0.083s GC time
class dense_lattice = bounded_lattice +
  assumes
    "bot_meet_irreducible":
      "!!x y. x \<sqinter> y = bot --> x = bot | y = bot"
class distrib_lattice = lattice +
  assumes
    "sup_inf_distrib1":
      "!!x y z.
          x \<squnion> y \<sqinter> z =
          (x \<squnion> y) \<sqinter> (x \<squnion> z)"
class linorder_lattice_expansion = bounded_linorder + inf + sup +
  assumes "sup_def": "!!x y. x \<squnion> y = max x y"
  assumes "inf_def": "!!x y. x \<sqinter> y = min x y"
### Additional type variable(s) in locale specification "non_trivial": 'a
class non_trivial = type +
  assumes "consistent": "EX x y. x ~= y"
class boolean_algebra = minus + uminus + bounded_lattice + distrib_lattice +
  assumes "inf_compl_bot": "!!x. x \<sqinter> - x = bot"
    and "sup_compl_top": "!!x. x \<squnion> - x = top"
  assumes "diff_eq": "!!x y. x - y = x \<sqinter> - y"
### theory "Stone_Algebras.Lattice_Basics"
### 8.070s elapsed time, 12.916s cpu time, 1.314s GC time
Loading theory "Draft.Fixpoints" (required by "Draft.SemiringsMoreTemplates" via "Draft.Semirings")
class order = preorder +
  assumes "order_antisym": "!!x y. [| x <= y; y <= x |] ==> x = y"
### theory "Draft.Fixpoints"
### 1.126s elapsed time, 1.542s cpu time, 0.097s GC time
Loading theory "Draft.Semirings" (required by "Draft.SemiringsMoreTemplates")
class non_associative_left_semiring = one + times +
  bounded_semilattice_sup_bot +
  assumes
    "mult_left_sub_dist_sup":
      "!!x y z. x * y \<squnion> x * z <= x * (y \<squnion> z)"
  assumes
    "mult_right_dist_sup":
      "!!x y z. (x \<squnion> y) * z = x * z \<squnion> y * z"
  assumes "mult_left_zero": "!!x. bot * x = bot"
  assumes "mult_left_one": "!!x. (1::'a) * x = x"
  assumes "mult_sub_right_one": "!!x. x <= x * (1::'a)"
class pre_left_semiring = non_associative_left_semiring +
  assumes "mult_semi_associative": "!!x y z. x * y * z <= x * (y * z)"
class residuated_pre_left_semiring = divide + pre_left_semiring +
  assumes "lres_galois": "!!x y z. (x * y <= z) = (x <= z / y)"
class idempotent_left_zero_semiring = idempotent_left_semiring +
  assumes
    "mult_left_dist_sup":
      "!!x y z. x * (y \<squnion> z) = x * y \<squnion> x * z"
### Partially applied constant "Lattices.sup_class.sup" on left hand side of equation, in theorem:
### semiring.numeral num.One == 1::?'a
### Partially applied constant "Lattices.sup_class.sup" on left hand side of equation, in theorem:
### semiring.numeral (num.Bit0 ?n) ==
### let m = semiring.numeral ?n in m \<squnion> m
### Partially applied constant "Lattices.sup_class.sup" on left hand side of equation, in theorem:
### semiring.numeral (num.Bit1 ?n) ==
### let m = semiring.numeral ?n in m \<squnion> m \<squnion> (1::?'a)
class idempotent_semiring = idempotent_left_zero_semiring +
  assumes "mult_right_zero": "!!x. x * bot = bot"
class bounded_non_associative_left_semiring = top +
  non_associative_left_semiring +
  assumes "sup_right_top": "!!x. x \<squnion> top = top"
### theory "Draft.Semirings"
### 4.919s elapsed time, 5.364s cpu time, 0.334s GC time
Loading theory "Draft.SemiringsMoreTemplates"
val templateLemmas = []: (string * thm * template) list
### theory "Draft.SemiringsMoreTemplates"
### 0.361s elapsed time, 0.613s cpu time, 0.054s GC time
val it = (): unit
