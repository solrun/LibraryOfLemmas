   [("LevellistProof.dag_Null", "dag Null ?l ?r = Tip",
     template_equation
      (template_app
        (template_app
          (template_app (template_hole 2, template_hole 1), template_var 1),
         template_var 0),
       template_hole 0)),
    ("LevellistProof.first_simps", "first (?r # ?rs) = ?r",
     template_equation
      (template_app
        (template_hole 1,
         template_app
          (template_app (template_hole 0, template_var 1), template_var 0)),
       template_var 1)),
    ("LevellistProof.allD", "ALL ll. ?P ll ==> ?P ?ll",
     template_implication
      ([template_predicate (template_app (template_hole 0, t_empty))],
       template_predicate (template_app (template_var 1, template_var 0)))),
    ("LevellistProof.all_stop_cong", "(ALL x. ?P x) = (ALL x. ?P x)",
     template_equation
      (template_app (template_hole 0, t_empty),
       template_app (template_hole 0, t_empty))),
    ("LevellistProof.Levellist_length",
     "Levellist ?hds ?p ?ll ==> length ?ll = length ?hds",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app (template_hole 3, template_var 2),
                template_var 1),
              template_var 0)
            )],
       template_equation
        (template_app (template_hole 1, template_var 0),
         template_app (template_hole 0, template_var 2)))),
    ("LevellistProof.Levellist_unique",
     "[| Levellist ?hds ?next ?ll; Levellist ?hds ?next ?ll' |]
      ==> ?ll = ?ll'",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app (template_hole 1, template_var 3),
                template_var 2),
              template_var 1)
            ),
        template_predicate
         (
            template_app
             (template_app
               (template_app (template_hole 1, template_var 3),
                template_var 2),
              template_var 0)
            )],
       template_equation (template_var 1, template_var 0))),
    ("LevellistProof.wf_levellist_subset",
     "wf_levellist ?t ?ll ?ll' ?var ==>
      set (concat ?ll') <= set (concat ?ll) Un set_of ?t",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_app (template_hole 5, template_var 3),
                  template_var 2),
                template_var 1),
              template_var 0)
            )],
       template_inequation
        (less_equals,
         template_app
          (template_hole 3, template_app (template_hole 2, template_var 1)),
         template_app
          (template_app
            (template_hole 1,
             template_app
              (template_hole 3,
               template_app (template_hole 2, template_var 2))),
           template_app (template_hole 0, template_var 3))))),
    ("LevellistProof.Levellist_unique_ex_conj_simp",
     "Levellist ?hds ?next ?ll ==>
      (EX ll. Levellist ?hds ?next ll & ?P ll) = ?P ?ll",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app (template_hole 3, template_var 3),
                template_var 2),
              template_var 1)
            )],
       template_equation
        (template_app (template_hole 1, t_empty),
         template_app (template_var 0, template_var 1)))),
    ("LevellistProof.map_update",
     "?i < length ?xss ==>
      map ?f (?xss[?i := ?xs]) = (map ?f ?xss)[?i := ?f ?xs]",
     template_implication
      ([template_inequation
         (less_than, template_var 3,
          template_app (template_hole 4, template_var 2))],
       template_equation
        (template_app
          (template_app (template_hole 2, template_var 1),
           template_app
            (template_app
              (template_app (template_hole 1, template_var 2),
               template_var 3),
             template_var 0)),
         template_app
          (template_app
            (template_app
              (template_hole 0,
               template_app
                (template_app (template_hole 2, template_var 1),
                 template_var 2)),
             template_var 3),
           template_app (template_var 1, template_var 0))))),
    ("LevellistProof.in_set_concat_idx",
     "?x : set (concat ?xss) ==> EX i<length ?xss. ?x : set (?xss ! i)",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 7, template_var 1),
              template_app
               (template_hole 6,
                template_app (template_hole 5, template_var 0)))
            )],
       template_predicate (template_app (template_hole 4, t_empty)))),
    ("LevellistProof.Dag_unique_ex_conjI",
     "[| Dag ?p ?l ?r ?t; ?P ?t |] ==> EX t. Dag ?p ?l ?r t & ?P t",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_app (template_hole 2, template_var 4),
                  template_var 3),
                template_var 2),
              template_var 1)
            ),
        template_predicate (template_app (template_var 0, template_var 1))],
       template_predicate (template_app (template_hole 1, t_empty)))),
    ("LevellistProof.Levellist_ext_to_all",
     "((EX ll. Levellist ?hds ?next ll & ?P ll) --> ?Q) =
      (ALL ll. Levellist ?hds ?next ll & ?P ll --> ?Q)",
     template_equation
      (template_app
        (template_app
          (template_hole 4, template_app (template_hole 3, t_empty)),
         template_var 0),
       template_app (template_hole 0, t_empty))),
    ("LevellistProof.replicate_spec",
     "[| ALL i<?n. ?xs ! i = ?x; ?n = length ?xs |]
      ==> replicate (length ?xs) ?x = ?xs",
     template_implication
      ([template_predicate (template_app (template_hole 8, t_empty)),
        template_equation
         (template_var 2, template_app (template_hole 2, template_var 1))],
       template_equation
        (template_app
          (template_app
            (template_hole 0,
             template_app (template_hole 2, template_var 1)),
           template_var 0),
         template_var 1))),
    ("LevellistProof.Dag_RefD",
     "[| Dag ?p ?l ?r ?t; ?p ~= Null |]
      ==> EX lt rt.
             ?t = dag.Node lt ?p rt &
             Dag (?l ?p) ?l ?r lt & Dag (?r ?p) ?l ?r rt",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_app (template_hole 7, template_var 3),
                  template_var 2),
                template_var 1),
              template_var 0)
            ),
        template_negation
         (template_equation (template_var 3, template_hole 4))],
       template_predicate (template_app (template_hole 3, t_empty))))]
