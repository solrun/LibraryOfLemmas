Loading theory "HOL-Library.Nat_Bijection" (required by "Draft.Pratts_CounterexamplesTemplates" via "Draft.ExtrEqs" via "HOL-Library.Stream")
Loading theory "HOL-Library.Function_Algebras" (required by "Draft.Pratts_CounterexamplesTemplates" via "Draft.ExtrEqs" via "HOL-Library.BigO")
Loading theory "HOL-Library.Tree" (required by "Draft.Pratts_CounterexamplesTemplates" via "Draft.ExtrEqs" via "Draft.Templates")
Loading theory "HOL-Library.Set_Algebras" (required by "Draft.Pratts_CounterexamplesTemplates" via "Draft.ExtrEqs" via "HOL-Library.BigO")
instantiation
  set :: (plus) plus
  plus_set == plus :: 'a set => 'a set => 'a set
instantiation
  fun :: (type, plus) plus
  plus_fun == plus :: ('a => 'b) => ('a => 'b) => 'a => 'b
instantiation
  set :: (times) times
  times_set == times :: 'a set => 'a set => 'a set
instantiation
  fun :: (type, zero) zero
  zero_fun == zero_class.zero :: 'a => 'b
instantiation
  set :: (zero) zero
  zero_set == zero_class.zero :: 'a set
instantiation
  fun :: (type, times) times
  times_fun == times :: ('a => 'b) => ('a => 'b) => 'a => 'b
instantiation
  set :: (one) one
  one_set == one_class.one :: 'a set
instantiation
  fun :: (type, one) one
  one_fun == one_class.one :: 'a => 'b
Found termination order: "(%p. size (snd p)) <*mlex*> {}"
### theory "HOL-Library.Function_Algebras"
### 0.129s elapsed time, 0.524s cpu time, 0.053s GC time
Loading theory "Draft.Dioid_Power_Sum" (required by "Draft.Pratts_CounterexamplesTemplates" via "Draft.Pratts_Counterexamples" via "Draft.Regular_Algebras")
Found termination order: "size_list size <*mlex*> {}"
### theory "HOL-Library.Set_Algebras"
### 0.215s elapsed time, 0.867s cpu time, 0.053s GC time
Loading theory "HOL-Library.BigO" (required by "Draft.Pratts_CounterexamplesTemplates" via "Draft.ExtrEqs")
### theory "HOL-Library.Nat_Bijection"
### 0.335s elapsed time, 1.318s cpu time, 0.159s GC time
Loading theory "HOL-Library.Stream" (required by "Draft.Pratts_CounterexamplesTemplates" via "Draft.ExtrEqs")
### theory "Draft.Dioid_Power_Sum"
### 0.398s elapsed time, 1.547s cpu time, 0.169s GC time
Loading theory "Draft.Regular_Algebras" (required by "Draft.Pratts_CounterexamplesTemplates" via "Draft.Pratts_Counterexamples")
consts
  left :: "'a tree => 'a tree"
consts
  right :: "'a tree => 'a tree"
Found termination order: "size <*mlex*> {}"
Found termination order: "size <*mlex*> {}"
Found termination order: "size <*mlex*> {}"
consts
  shift :: "'a list => 'a stream => 'a stream"
Proofs for coinductive predicate(s) "streamsp"
  Proving monotonicity ...
class height = type +
  fixes height :: "'a => nat"
instantiation
  tree :: (type) height
  height_tree == height :: 'a tree => nat
consts
  snth :: "'a stream => nat => 'a"
Found termination order: "size <*mlex*> {}"
consts
  stake :: "nat => 'a stream => 'a list"
consts
  sdrop :: "nat => 'a stream => 'a stream"
Found termination order: "size <*mlex*> {}"
consts
  sfilter :: "('a => bool) => 'a stream => 'a stream"
consts
  cycle :: "'a list => 'a stream"
Found termination order: "size <*mlex*> {}"
consts
  siterate :: "('a => 'a) => 'a => 'a stream"
consts
  flat :: "'a list stream => 'a stream"
### theory "HOL-Library.BigO"
### 0.944s elapsed time, 3.556s cpu time, 0.803s GC time
Found termination order: "size <*mlex*> {}"
consts
  sinterleave :: "'a stream => 'a stream => 'a stream"
consts
  szip :: "'a stream => 'b stream => ('a * 'b) stream"
Found termination order: "size <*mlex*> {}"
consts
  smap2 :: "('a => 'b => 'c) => 'a stream => 'b stream => 'c stream"
### theory "HOL-Library.Stream"
### 0.951s elapsed time, 3.500s cpu time, 0.696s GC time
Found termination order: "size <*mlex*> {}"
Found termination order: "size <*mlex*> {}"
Found termination order: "(%p. size (fst p)) <*mlex*> {}"
Found termination order: "size <*mlex*> {}"
Found termination order: "(%p. size (snd p)) <*mlex*> {}"
Found termination order: "size <*mlex*> {}"
class conway_dioid = star_dioid +
  assumes
    "C11":
      "!!x y.
          (x + y)\<^sup>\<star> =
          (x\<^sup>\<star> \<cdot> y)\<^sup>\<star> \<cdot> x\<^sup>\<star>"
    and
    "C12":
      "!!x y.
          (x \<cdot> y)\<^sup>\<star> =
          (1::'a) + x \<cdot> (y \<cdot> x)\<^sup>\<star> \<cdot> y"
### theory "HOL-Library.Tree"
### 1.927s elapsed time, 6.169s cpu time, 1.022s GC time
Loading theory "Draft.Templates" (required by "Draft.Pratts_CounterexamplesTemplates" via "Draft.ExtrEqs")
datatype template_term
=
     t_empty
   | template_app of template_term * template_term
   | template_hole of int
   | template_var of int
datatype sign
= equals | greater_equals | greater_than | less_equals | less_than
datatype template
=
     template_bimplication of template * template
   | template_dunno
   | template_equation of template_term * template_term
   | template_implication of template list * template
   | template_inequation of sign * template_term * template_term
   | template_negation of template
   | template_predicate of template_term
constructor t_empty: template_term
constructor template_app: template_term * template_term -> template_term
constructor template_hole: int -> template_term
constructor template_var: int -> template_term
constructor equals: sign
constructor greater_equals: sign
constructor greater_than: sign
constructor less_equals: sign
constructor less_than: sign
constructor template_bimplication: template * template -> template
constructor template_dunno: template
constructor template_equation: template_term * template_term -> template
constructor template_implication: template list * template -> template
constructor template_inequation:
   sign * template_term * template_term -> template
constructor template_negation: template -> template
constructor template_predicate: template_term -> template
val vfs = fn: term -> (indexname * typ) list * (string * typ) list
val indexOf = fn: ''a list -> ''a -> int -> int
val has_eq = fn: term -> bool
val term2template = fn:
   (indexname * typ) list -> (string * typ) list -> term -> template_term
val lemma2predicate = fn: term -> term -> template
val makeTemplatewithContext = fn: term -> term -> template
val lemma2template = fn: term -> template
val thm2template = fn: thm -> template
val tterm2string = fn: template_term -> string
val template2string = fn: template -> string
val t = "height ?t <= size ?t": thm
val th =
   Const ("HOL.Trueprop", "bool => prop") $
     (Const ("Orderings.ord_class.less_eq", "nat => nat => bool") $
       (Const ("Tree.height_class.height", "?'a tree => nat") $
         Var (("t", 0), "?'a tree")) $
       (Const ("Nat.size_class.size", "?'a tree => nat") $
         Var (("t", 0), "?'a tree"))):
   term
### theory "Draft.Templates"
### 0.074s elapsed time, 0.182s cpu time, 0.048s GC time
Loading theory "Draft.ExtrEqs" (required by "Draft.Pratts_CounterexamplesTemplates")
class strong_conway_dioid = conway_dioid +
  assumes "C13": "!!x. (x\<^sup>\<star>)\<^sup>\<star> = x\<^sup>\<star>"
val eqpattern =
   Pattern
    (
       Const ("HOL.Trueprop", "bool => prop") $
         (Const ("HOL.eq", "?'a => ?'a => bool") $
           Var (("_dummy_", 1), "?'a") $ Var (("_dummy_", 2), "?'a"))
       ):
   term Find_Theorems.criterion
val badeqpattern = Pattern (Const ("Pure.eq", "?'a => ?'a => prop")):
   term Find_Theorems.criterion
val undefpattern =
   Pattern
    (
       Const ("HOL.Trueprop", "bool => prop") $
         (Const ("HOL.eq", "?'a => ?'a => bool") $
           Var (("_dummy_", 1), "?'a") $ Const ("HOL.undefined", "?'a"))
       ):
   term Find_Theorems.criterion
val thmpattern =
   Pattern
    (Const ("HOL.Trueprop", "bool => prop") $ Var (("_dummy_", 1), "bool")):
   term Find_Theorems.criterion
val badnames =
   ["*nitpick*", "*Nitpick*", "*full_exhaustive*", "*_def*", "Enum.finite*",
    "*Quickcheck*", "ATP*", "*Nunchaku*", "*Code*", "*BNF*", "*SMT*",
    "*.*.*"]:
   string list
val unwanted_names =
   [(false, Name "*nitpick*"), (false, Name "*Nitpick*"),
    (false, Name "*full_exhaustive*"), (false, Name "*_def*"),
    (false, Name "Enum.finite*"), (false, Name "*Quickcheck*"),
    (false, Name "ATP*"), (false, Name "*Nunchaku*"),
    (false, Name "*Code*"), (false, Name "*BNF*"), (false, Name "*SMT*"),
    (false, Name "*.*.*")]:
   (bool * term Find_Theorems.criterion) list
val has_vars = fn: term -> bool
val get_all_eqs = fn: string -> Proof.context -> (string * thm) list
val get_all_thms = fn: string -> Proof.context -> (string * thm) list
val get_noneq_thms = fn: string -> Proof.context -> (string * thm) list
val template_eqs = fn:
   string -> Proof.context -> (string * thm * template) list
val template_thms = fn:
   string -> Proof.context -> (string * thm * template) list
### theory "Draft.ExtrEqs"
### 0.549s elapsed time, 1.123s cpu time, 0.060s GC time
class C_algebra = strong_conway_dioid +
  assumes
    "C14":
      "!!x n.
          x\<^sup>\<star> =
          (x\<^bsup>n + 1\<^esup>)\<^sup>\<star> \<cdot>
          x\<^bsub>0\<^esub>\<^bsup>n\<^esup>"
class C_algebra = strong_conway_dioid +
  assumes
    "C14":
      "!!x n.
          x\<^sup>\<star> =
          (x\<^bsup>n + 1\<^esup>)\<^sup>\<star> \<cdot>
          x\<^bsub>0\<^esub>\<^bsup>n\<^esup>"
class B1_algebra = conway_dioid +
  assumes "R": "!!x. x \<cdot> x = x ==> x\<^sup>\<star> = (1::'a) + x"
class B2_algebra = star_dioid +
  assumes "B21": "!!x. (1::'a) + x <= x\<^sup>\<star>"
    and
    "B22": "!!x. x\<^sup>\<star> \<cdot> x\<^sup>\<star> = x\<^sup>\<star>"
    and
    "B23":
      "!!x y.
          [| (1::'a) + x <= y; y \<cdot> y = y |] ==> x\<^sup>\<star> <= y"
class B2_algebra = star_dioid +
  assumes "B21": "!!x. (1::'a) + x <= x\<^sup>\<star>"
    and
    "B22": "!!x. x\<^sup>\<star> \<cdot> x\<^sup>\<star> = x\<^sup>\<star>"
    and
    "B23":
      "!!x y.
          [| (1::'a) + x <= y; y \<cdot> y = y |] ==> x\<^sup>\<star> <= y"
### Ignoring duplicate rewrite rule:
### ?x1\<^sup>\<star> \<cdot> ?x1\<^sup>\<star> == ?x1\<^sup>\<star>
class B2_algebra = star_dioid +
  assumes "B21": "!!x. (1::'a) + x <= x\<^sup>\<star>"
    and
    "B22": "!!x. x\<^sup>\<star> \<cdot> x\<^sup>\<star> = x\<^sup>\<star>"
    and
    "B23":
      "!!x y.
          [| (1::'a) + x <= y; y \<cdot> y = y |] ==> x\<^sup>\<star> <= y"
### Ambiguous input (line 709 of "$AFP/Regular_Algebras/Regular_Algebras.thy") produces 20 parse trees (10 displayed):
### ("\<^const>Pure.eq" ("_applC" ("_position" conway_assms) ("_position" x))
###   ("\<^const>HOL.All_binder" ("_idts" ("_position" i) ("_position" j))
###     ("\<^const>Regular_Algebras.boffa_pair"
###       ("\<^const>HOL.conj"
###         ("\<^const>Groups.times_class.times"
###           ("\<^const>Regular_Algebras.boffa_mon.Rep_boffa_mon"
###             ("_position" x) ("_position" i))
###           ("\<^const>Regular_Algebras.boffa_mon.Rep_boffa_mon"
###             ("\<^const>Orderings.ord_class.less_eq"
###               ("\<^const>Regular_Algebras.boffa_mon.Rep_boffa_mon"
###                 ("_position" x) ("_position" j))
###               ("_position" x))
###             ("\<^const>Groups.times_class.times" ("_position" i)
###               ("_position" j))))
###         ("\<^const>HOL.eq"
###           ("\<^const>Signatures.star_op_class.star"
###             ("\<^const>Regular_Algebras.boffa_pair" ("_position" x)
###               ("_position" i) ("_position" i)))
###           ("_position" x)))
###       ("_position" i) ("_position" i))))
### ("\<^const>Pure.eq" ("_applC" ("_position" conway_assms) ("_position" x))
###   ("\<^const>Regular_Algebras.boffa_pair"
###     ("\<^const>HOL.All_binder" ("_idts" ("_position" i) ("_position" j))
###       ("\<^const>HOL.conj"
###         ("\<^const>Groups.times_class.times"
###           ("\<^const>Regular_Algebras.boffa_mon.Rep_boffa_mon"
###             ("_position" x) ("_position" i))
###           ("\<^const>Regular_Algebras.boffa_mon.Rep_boffa_mon"
###             ("\<^const>Orderings.ord_class.less_eq"
###               ("\<^const>Regular_Algebras.boffa_mon.Rep_boffa_mon"
###                 ("_position" x) ("_position" j))
###               ("_position" x))
###             ("\<^const>Groups.times_class.times" ("_position" i)
###               ("_position" j))))
###         ("\<^const>HOL.eq"
###           ("\<^const>Signatures.star_op_class.star"
###             ("\<^const>Regular_Algebras.boffa_pair" ("_position" x)
###               ("_position" i) ("_position" i)))
###           ("_position" x))))
###     ("_position" i) ("_position" i)))
### ("\<^const>Pure.eq" ("_applC" ("_position" conway_assms) ("_position" x))
###   ("\<^const>HOL.All_binder" ("_idts" ("_position" i) ("_position" j))
###     ("\<^const>HOL.conj"
###       ("\<^const>Orderings.ord_class.less_eq"
###         ("\<^const>Groups.times_class.times"
###           ("\<^const>Regular_Algebras.boffa_mon.Rep_boffa_mon"
###             ("_position" x) ("_position" i))
###           ("\<^const>Regular_Algebras.boffa_mon.Rep_boffa_mon"
###             ("_position" x) ("_position" j)))
###         ("\<^const>Regular_Algebras.boffa_mon.Rep_boffa_mon" ("_position" x)
###           ("\<^const>Groups.times_class.times" ("_position" i)
###             ("_position" j))))
###       ("\<^const>Regular_Algebras.boffa_pair"
###         ("\<^const>HOL.eq"
###           ("\<^const>Signatures.star_op_class.star"
###             ("\<^const>Regular_Algebras.boffa_pair" ("_position" x)
###               ("_position" i) ("_position" i)))
###           ("_position" x))
###         ("_position" i) ("_position" i)))))
### ("\<^const>Pure.eq" ("_applC" ("_position" conway_assms) ("_position" x))
###   ("\<^const>HOL.All_binder" ("_idts" ("_position" i) ("_position" j))
###     ("\<^const>HOL.conj"
###       ("\<^const>Orderings.ord_class.less_eq"
###         ("\<^const>Regular_Algebras.boffa_mon.Rep_boffa_mon"
###           ("\<^const>Groups.times_class.times"
###             ("\<^const>Regular_Algebras.boffa_mon.Rep_boffa_mon"
###               ("_position" x) ("_position" i))
###             ("_position" x))
###           ("_position" j))
###         ("\<^const>Regular_Algebras.boffa_mon.Rep_boffa_mon" ("_position" x)
###           ("\<^const>Groups.times_class.times" ("_position" i)
###             ("_position" j))))
###       ("\<^const>Regular_Algebras.boffa_pair"
###         ("\<^const>HOL.eq"
###           ("\<^const>Signatures.star_op_class.star"
###             ("\<^const>Regular_Algebras.boffa_pair" ("_position" x)
###               ("_position" i) ("_position" i)))
###           ("_position" x))
###         ("_position" i) ("_position" i)))))
### ("\<^const>Pure.eq" ("_applC" ("_position" conway_assms) ("_position" x))
###   ("\<^const>HOL.All_binder" ("_idts" ("_position" i) ("_position" j))
###     ("\<^const>HOL.conj"
###       ("\<^const>Regular_Algebras.boffa_mon.Rep_boffa_mon"
###         ("\<^const>Orderings.ord_class.less_eq"
###           ("\<^const>Regular_Algebras.boffa_mon.Rep_boffa_mon"
###             ("\<^const>Groups.times_class.times"
###               ("\<^const>Regular_Algebras.boffa_mon.Rep_boffa_mon"
###                 ("_position" x) ("_position" i))
###               ("_position" x))
###             ("_position" j))
###           ("_position" x))
###         ("\<^const>Groups.times_class.times" ("_position" i)
###           ("_position" j)))
###       ("\<^const>Regular_Algebras.boffa_pair"
###         ("\<^const>HOL.eq"
###           ("\<^const>Signatures.star_op_class.star"
###             ("\<^const>Regular_Algebras.boffa_pair" ("_position" x)
###               ("_position" i) ("_position" i)))
###           ("_position" x))
###         ("_position" i) ("_position" i)))))
### ("\<^const>Pure.eq" ("_applC" ("_position" conway_assms) ("_position" x))
###   ("\<^const>HOL.All_binder" ("_idts" ("_position" i) ("_position" j))
###     ("\<^const>HOL.conj"
###       ("\<^const>Regular_Algebras.boffa_mon.Rep_boffa_mon"
###         ("\<^const>Orderings.ord_class.less_eq"
###           ("\<^const>Groups.times_class.times"
###             ("\<^const>Regular_Algebras.boffa_mon.Rep_boffa_mon"
###               ("_position" x) ("_position" i))
###             ("\<^const>Regular_Algebras.boffa_mon.Rep_boffa_mon"
###               ("_position" x) ("_position" j)))
###           ("_position" x))
###         ("\<^const>Groups.times_class.times" ("_position" i)
###           ("_position" j)))
###       ("\<^const>Regular_Algebras.boffa_pair"
###         ("\<^const>HOL.eq"
###           ("\<^const>Signatures.star_op_class.star"
###             ("\<^const>Regular_Algebras.boffa_pair" ("_position" x)
###               ("_position" i) ("_position" i)))
###           ("_position" x))
###         ("_position" i) ("_position" i)))))
### ("\<^const>Pure.eq" ("_applC" ("_position" conway_assms) ("_position" x))
###   ("\<^const>HOL.All_binder" ("_idts" ("_position" i) ("_position" j))
###     ("\<^const>HOL.conj"
###       ("\<^const>Groups.times_class.times"
###         ("\<^const>Regular_Algebras.boffa_mon.Rep_boffa_mon" ("_position" x)
###           ("_position" i))
###         ("\<^const>Regular_Algebras.boffa_mon.Rep_boffa_mon"
###           ("\<^const>Orderings.ord_class.less_eq"
###             ("\<^const>Regular_Algebras.boffa_mon.Rep_boffa_mon"
###               ("_position" x) ("_position" j))
###             ("_position" x))
###           ("\<^const>Groups.times_class.times" ("_position" i)
###             ("_position" j))))
###       ("\<^const>Regular_Algebras.boffa_pair"
###         ("\<^const>HOL.eq"
###           ("\<^const>Signatures.star_op_class.star"
###             ("\<^const>Regular_Algebras.boffa_pair" ("_position" x)
###               ("_position" i) ("_position" i)))
###           ("_position" x))
###         ("_position" i) ("_position" i)))))
### ("\<^const>Pure.eq" ("_applC" ("_position" conway_assms) ("_position" x))
###   ("\<^const>HOL.All_binder" ("_idts" ("_position" i) ("_position" j))
###     ("\<^const>Regular_Algebras.boffa_pair"
###       ("\<^const>HOL.conj"
###         ("\<^const>Regular_Algebras.boffa_mon.Rep_boffa_mon"
###           ("\<^const>Orderings.ord_class.less_eq"
###             ("\<^const>Groups.times_class.times"
###               ("\<^const>Regular_Algebras.boffa_mon.Rep_boffa_mon"
###                 ("_position" x) ("_position" i))
###               ("\<^const>Regular_Algebras.boffa_mon.Rep_boffa_mon"
###                 ("_position" x) ("_position" j)))
###             ("_position" x))
###           ("\<^const>Groups.times_class.times" ("_position" i)
###             ("_position" j)))
###         ("\<^const>HOL.eq"
###           ("\<^const>Signatures.star_op_class.star"
###             ("\<^const>Regular_Algebras.boffa_pair" ("_position" x)
###               ("_position" i) ("_position" i)))
###           ("_position" x)))
###       ("_position" i) ("_position" i))))
### ("\<^const>Pure.eq" ("_applC" ("_position" conway_assms) ("_position" x))
###   ("\<^const>Regular_Algebras.boffa_pair"
###     ("\<^const>HOL.All_binder" ("_idts" ("_position" i) ("_position" j))
###       ("\<^const>HOL.conj"
###         ("\<^const>Regular_Algebras.boffa_mon.Rep_boffa_mon"
###           ("\<^const>Orderings.ord_class.less_eq"
###             ("\<^const>Groups.times_class.times"
###               ("\<^const>Regular_Algebras.boffa_mon.Rep_boffa_mon"
###                 ("_position" x) ("_position" i))
###               ("\<^const>Regular_Algebras.boffa_mon.Rep_boffa_mon"
###                 ("_position" x) ("_position" j)))
###             ("_position" x))
###           ("\<^const>Groups.times_class.times" ("_position" i)
###             ("_position" j)))
###         ("\<^const>HOL.eq"
###           ("\<^const>Signatures.star_op_class.star"
###             ("\<^const>Regular_Algebras.boffa_pair" ("_position" x)
###               ("_position" i) ("_position" i)))
###           ("_position" x))))
###     ("_position" i) ("_position" i)))
### ("\<^const>Pure.eq" ("_applC" ("_position" conway_assms) ("_position" x))
###   ("\<^const>HOL.All_binder" ("_idts" ("_position" i) ("_position" j))
###     ("\<^const>Regular_Algebras.boffa_pair"
###       ("\<^const>HOL.conj"
###         ("\<^const>Regular_Algebras.boffa_mon.Rep_boffa_mon"
###           ("\<^const>Orderings.ord_class.less_eq"
###             ("\<^const>Regular_Algebras.boffa_mon.Rep_boffa_mon"
###               ("\<^const>Groups.times_class.times"
###                 ("\<^const>Regular_Algebras.boffa_mon.Rep_boffa_mon"
###                   ("_position" x) ("_position" i))
###                 ("_position" x))
###               ("_position" j))
###             ("_position" x))
###           ("\<^const>Groups.times_class.times" ("_position" i)
###             ("_position" j)))
###         ("\<^const>HOL.eq"
###           ("\<^const>Signatures.star_op_class.star"
###             ("\<^const>Regular_Algebras.boffa_pair" ("_position" x)
###               ("_position" i) ("_position" i)))
###           ("_position" x)))
###       ("_position" i) ("_position" i))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 711 of "$AFP/Regular_Algebras/Regular_Algebras.thy") produces 2 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("\<^const>Regular_Algebras.boffa_pair" ("_position" x)
###       ("\<^const>Groups.one_class.one") ("\<^const>Groups.one_class.one"))
###     ("\<^const>Regular_Algebras.boffa_mon.Rep_boffa_mon" ("_position" x)
###       ("\<^const>Groups.one_class.one"))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Regular_Algebras.boffa_mon.Rep_boffa_mon"
###     ("\<^const>HOL.eq"
###       ("\<^const>Regular_Algebras.boffa_pair" ("_position" x)
###         ("\<^const>Groups.one_class.one") ("\<^const>Groups.one_class.one"))
###       ("_position" x))
###     ("\<^const>Groups.one_class.one")))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 714 of "$AFP/Regular_Algebras/Regular_Algebras.thy") produces 14 parse trees (10 displayed):
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq" ("_applC" ("_position" conway_assm1) ("_position" x))
###     ("\<^const>HOL.All_binder" ("_idts" ("_position" i) ("_position" j))
###       ("\<^const>Groups.times_class.times"
###         ("\<^const>Regular_Algebras.boffa_mon.Rep_boffa_mon" ("_position" x)
###           ("_position" i))
###         ("\<^const>Regular_Algebras.boffa_mon.Rep_boffa_mon"
###           ("\<^const>Orderings.ord_class.less_eq"
###             ("\<^const>Regular_Algebras.boffa_mon.Rep_boffa_mon"
###               ("_position" x) ("_position" j))
###             ("_position" x))
###           ("\<^const>Groups.times_class.times" ("_position" i)
###             ("_position" j)))))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq" ("_applC" ("_position" conway_assm1) ("_position" x))
###     ("\<^const>Groups.times_class.times"
###       ("\<^const>Regular_Algebras.boffa_mon.Rep_boffa_mon"
###         ("\<^const>HOL.All_binder" ("_idts" ("_position" i) ("_position" j))
###           ("_position" x))
###         ("_position" i))
###       ("\<^const>Regular_Algebras.boffa_mon.Rep_boffa_mon"
###         ("\<^const>Orderings.ord_class.less_eq"
###           ("\<^const>Regular_Algebras.boffa_mon.Rep_boffa_mon"
###             ("_position" x) ("_position" j))
###           ("_position" x))
###         ("\<^const>Groups.times_class.times" ("_position" i)
###           ("_position" j))))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq" ("_applC" ("_position" conway_assm1) ("_position" x))
###     ("\<^const>Regular_Algebras.boffa_mon.Rep_boffa_mon"
###       ("\<^const>Orderings.ord_class.less_eq"
###         ("\<^const>Groups.times_class.times"
###           ("\<^const>Regular_Algebras.boffa_mon.Rep_boffa_mon"
###             ("\<^const>HOL.All_binder"
###               ("_idts" ("_position" i) ("_position" j)) ("_position" x))
###             ("_position" i))
###           ("\<^const>Regular_Algebras.boffa_mon.Rep_boffa_mon"
###             ("_position" x) ("_position" j)))
###         ("_position" x))
###       ("\<^const>Groups.times_class.times" ("_position" i)
###         ("_position" j)))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq" ("_applC" ("_position" conway_assm1) ("_position" x))
###     ("\<^const>HOL.All_binder" ("_idts" ("_position" i) ("_position" j))
###       ("\<^const>Regular_Algebras.boffa_mon.Rep_boffa_mon"
###         ("\<^const>Orderings.ord_class.less_eq"
###           ("\<^const>Groups.times_class.times"
###             ("\<^const>Regular_Algebras.boffa_mon.Rep_boffa_mon"
###               ("_position" x) ("_position" i))
###             ("\<^const>Regular_Algebras.boffa_mon.Rep_boffa_mon"
###               ("_position" x) ("_position" j)))
###           ("_position" x))
###         ("\<^const>Groups.times_class.times" ("_position" i)
###           ("_position" j))))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq" ("_applC" ("_position" conway_assm1) ("_position" x))
###     ("\<^const>Regular_Algebras.boffa_mon.Rep_boffa_mon"
###       ("\<^const>HOL.All_binder" ("_idts" ("_position" i) ("_position" j))
###         ("\<^const>Orderings.ord_class.less_eq"
###           ("\<^const>Groups.times_class.times"
###             ("\<^const>Regular_Algebras.boffa_mon.Rep_boffa_mon"
###               ("_position" x) ("_position" i))
###             ("\<^const>Regular_Algebras.boffa_mon.Rep_boffa_mon"
###               ("_position" x) ("_position" j)))
###           ("_position" x)))
###       ("\<^const>Groups.times_class.times" ("_position" i)
###         ("_position" j)))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq" ("_applC" ("_position" conway_assm1) ("_position" x))
###     ("\<^const>Regular_Algebras.boffa_mon.Rep_boffa_mon"
###       ("\<^const>Orderings.ord_class.less_eq"
###         ("\<^const>Regular_Algebras.boffa_mon.Rep_boffa_mon"
###           ("\<^const>HOL.All_binder"
###             ("_idts" ("_position" i) ("_position" j))
###             ("\<^const>Groups.times_class.times"
###               ("\<^const>Regular_Algebras.boffa_mon.Rep_boffa_mon"
###                 ("_position" x) ("_position" i))
###               ("_position" x)))
###           ("_position" j))
###         ("_position" x))
###       ("\<^const>Groups.times_class.times" ("_position" i)
###         ("_position" j)))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq" ("_applC" ("_position" conway_assm1) ("_position" x))
###     ("\<^const>HOL.All_binder" ("_idts" ("_position" i) ("_position" j))
###       ("\<^const>Regular_Algebras.boffa_mon.Rep_boffa_mon"
###         ("\<^const>Orderings.ord_class.less_eq"
###           ("\<^const>Regular_Algebras.boffa_mon.Rep_boffa_mon"
###             ("\<^const>Groups.times_class.times"
###               ("\<^const>Regular_Algebras.boffa_mon.Rep_boffa_mon"
###                 ("_position" x) ("_position" i))
###               ("_position" x))
###             ("_position" j))
###           ("_position" x))
###         ("\<^const>Groups.times_class.times" ("_position" i)
###           ("_position" j))))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq" ("_applC" ("_position" conway_assm1) ("_position" x))
###     ("\<^const>Regular_Algebras.boffa_mon.Rep_boffa_mon"
###       ("\<^const>HOL.All_binder" ("_idts" ("_position" i) ("_position" j))
###         ("\<^const>Orderings.ord_class.less_eq"
###           ("\<^const>Regular_Algebras.boffa_mon.Rep_boffa_mon"
###             ("\<^const>Groups.times_class.times"
###               ("\<^const>Regular_Algebras.boffa_mon.Rep_boffa_mon"
###                 ("_position" x) ("_position" i))
###               ("_position" x))
###             ("_position" j))
###           ("_position" x)))
###       ("\<^const>Groups.times_class.times" ("_position" i)
###         ("_position" j)))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq" ("_applC" ("_position" conway_assm1) ("_position" x))
###     ("\<^const>Regular_Algebras.boffa_mon.Rep_boffa_mon"
###       ("\<^const>Orderings.ord_class.less_eq"
###         ("\<^const>Regular_Algebras.boffa_mon.Rep_boffa_mon"
###           ("\<^const>Groups.times_class.times"
###             ("\<^const>Regular_Algebras.boffa_mon.Rep_boffa_mon"
###               ("\<^const>HOL.All_binder"
###                 ("_idts" ("_position" i) ("_position" j)) ("_position" x))
###               ("_position" i))
###             ("_position" x))
###           ("_position" j))
###         ("_position" x))
###       ("\<^const>Groups.times_class.times" ("_position" i)
###         ("_position" j)))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq" ("_applC" ("_position" conway_assm1) ("_position" x))
###     ("\<^const>Orderings.ord_class.less_eq"
###       ("\<^const>Regular_Algebras.boffa_mon.Rep_boffa_mon"
###         ("\<^const>Groups.times_class.times"
###           ("\<^const>Regular_Algebras.boffa_mon.Rep_boffa_mon"
###             ("\<^const>HOL.All_binder"
###               ("_idts" ("_position" i) ("_position" j)) ("_position" x))
###             ("_position" i))
###           ("_position" x))
###         ("_position" j))
###       ("\<^const>Regular_Algebras.boffa_mon.Rep_boffa_mon" ("_position" x)
###         ("\<^const>Groups.times_class.times" ("_position" i)
###           ("_position" j))))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 715 of "$AFP/Regular_Algebras/Regular_Algebras.thy") produces 5 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq" ("_applC" ("_position" conway_assm2) ("_position" x))
###     ("\<^const>HOL.All_binder" ("_position" i)
###       ("\<^const>Regular_Algebras.boffa_pair"
###         ("\<^const>HOL.eq"
###           ("\<^const>Signatures.star_op_class.star"
###             ("\<^const>Regular_Algebras.boffa_pair" ("_position" x)
###               ("_position" i) ("_position" i)))
###           ("_position" x))
###         ("_position" i) ("_position" i)))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq" ("_applC" ("_position" conway_assm2) ("_position" x))
###     ("\<^const>Regular_Algebras.boffa_pair"
###       ("\<^const>HOL.All_binder" ("_position" i)
###         ("\<^const>HOL.eq"
###           ("\<^const>Signatures.star_op_class.star"
###             ("\<^const>Regular_Algebras.boffa_pair" ("_position" x)
###               ("_position" i) ("_position" i)))
###           ("_position" x)))
###       ("_position" i) ("_position" i))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq" ("_applC" ("_position" conway_assm2) ("_position" x))
###     ("\<^const>Regular_Algebras.boffa_pair"
###       ("\<^const>HOL.eq"
###         ("\<^const>Signatures.star_op_class.star"
###           ("\<^const>Regular_Algebras.boffa_pair"
###             ("\<^const>HOL.All_binder" ("_position" i) ("_position" x))
###             ("_position" i) ("_position" i)))
###         ("_position" x))
###       ("_position" i) ("_position" i))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq" ("_applC" ("_position" conway_assm2) ("_position" x))
###     ("\<^const>HOL.eq"
###       ("\<^const>Signatures.star_op_class.star"
###         ("\<^const>Regular_Algebras.boffa_pair"
###           ("\<^const>HOL.All_binder" ("_position" i) ("_position" x))
###           ("_position" i) ("_position" i)))
###       ("\<^const>Regular_Algebras.boffa_pair" ("_position" x)
###         ("_position" i) ("_position" i)))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq" ("_applC" ("_position" conway_assm2) ("_position" x))
###     ("\<^const>HOL.All_binder" ("_position" i)
###       ("\<^const>HOL.eq"
###         ("\<^const>Signatures.star_op_class.star"
###           ("\<^const>Regular_Algebras.boffa_pair" ("_position" x)
###             ("_position" i) ("_position" i)))
###         ("\<^const>Regular_Algebras.boffa_pair" ("_position" x)
###           ("_position" i) ("_position" i))))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 719 of "$AFP/Regular_Algebras/Regular_Algebras.thy") produces 2 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("\<^const>Signatures.star_op_class.star"
###       ("\<^const>Regular_Algebras.boffa_mon.Rep_boffa_mon" ("_position" x)
###         ("\<^const>Groups.one_class.one")))
###     ("\<^const>Regular_Algebras.boffa_mon.Rep_boffa_mon" ("_position" x)
###       ("\<^const>Groups.one_class.one"))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Regular_Algebras.boffa_mon.Rep_boffa_mon"
###     ("\<^const>HOL.eq"
###       ("\<^const>Signatures.star_op_class.star"
###         ("\<^const>Regular_Algebras.boffa_mon.Rep_boffa_mon" ("_position" x)
###           ("\<^const>Groups.one_class.one")))
###       ("_position" x))
###     ("\<^const>Groups.one_class.one")))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 731 of "$AFP/Regular_Algebras/Regular_Algebras.thy") produces 3 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("\<^const>Regular_Algebras.boffa_mon.Rep_boffa_mon" ("_position" x)
###       ("\<^const>Groups.one_class.one"))
###     ("\<^const>Groups.plus_class.plus" ("\<^const>Groups.one_class.one")
###       ("\<^const>Regular_Algebras.boffa_mon.Rep_boffa_mon" ("_position" x)
###         ("\<^const>Groups.one_class.one")))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Regular_Algebras.boffa_mon.Rep_boffa_mon"
###     ("\<^const>HOL.eq"
###       ("\<^const>Regular_Algebras.boffa_mon.Rep_boffa_mon" ("_position" x)
###         ("\<^const>Groups.one_class.one"))
###       ("\<^const>Groups.plus_class.plus" ("\<^const>Groups.one_class.one")
###         ("_position" x)))
###     ("\<^const>Groups.one_class.one")))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("\<^const>Regular_Algebras.boffa_mon.Rep_boffa_mon" ("_position" x)
###       ("\<^const>Groups.one_class.one"))
###     ("\<^const>Regular_Algebras.boffa_mon.Rep_boffa_mon"
###       ("\<^const>Groups.plus_class.plus" ("\<^const>Groups.one_class.one")
###         ("_position" x))
###       ("\<^const>Groups.one_class.one"))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 765 of "$AFP/Regular_Algebras/Regular_Algebras.thy") produces 2 parse trees:
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("_applC" ("_position" conway_assm1) ("_position" x)))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Orderings.ord_class.less_eq"
###       ("_applC" ("\<^const>Groups_Big.comm_monoid_add_class.Sum")
###         ("_Setcompr"
###           ("\<^const>Regular_Algebras.boffa_mon.Rep_boffa_mon"
###             ("\<^const>Groups.times_class.times"
###               ("\<^const>Regular_Algebras.boffa_mon.Rep_boffa_mon"
###                 ("_position" x) ("_position" i))
###               ("_position" x))
###             ("_position" j))
###           ("_idts" ("_position" i) ("_position" j))
###           ("\<^const>HOL.conj"
###             ("\<^const>Set.member" ("_position" i) ("_position" UNIV))
###             ("\<^const>Set.member" ("_position" j) ("_position" UNIV)))))
###       ("_applC" ("\<^const>Groups_Big.comm_monoid_add_class.Sum")
###         ("_Setcompr"
###           ("\<^const>Regular_Algebras.boffa_mon.Rep_boffa_mon"
###             ("_position" x)
###             ("\<^const>Groups.times_class.times" ("_position" i)
###               ("_position" j)))
###           ("_idts" ("_position" i) ("_position" j))
###           ("\<^const>HOL.conj"
###             ("\<^const>Set.member" ("_position" i) ("_position" UNIV))
###             ("\<^const>Set.member" ("_position" j) ("_position" UNIV))))))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("_applC" ("_position" conway_assm1) ("_position" x)))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Orderings.ord_class.less_eq"
###       ("_applC" ("\<^const>Groups_Big.comm_monoid_add_class.Sum")
###         ("_Setcompr"
###           ("\<^const>Groups.times_class.times"
###             ("\<^const>Regular_Algebras.boffa_mon.Rep_boffa_mon"
###               ("_position" x) ("_position" i))
###             ("\<^const>Regular_Algebras.boffa_mon.Rep_boffa_mon"
###               ("_position" x) ("_position" j)))
###           ("_idts" ("_position" i) ("_position" j))
###           ("\<^const>HOL.conj"
###             ("\<^const>Set.member" ("_position" i) ("_position" UNIV))
###             ("\<^const>Set.member" ("_position" j) ("_position" UNIV)))))
###       ("_applC" ("\<^const>Groups_Big.comm_monoid_add_class.Sum")
###         ("_Setcompr"
###           ("\<^const>Regular_Algebras.boffa_mon.Rep_boffa_mon"
###             ("_position" x)
###             ("\<^const>Groups.times_class.times" ("_position" i)
###               ("_position" j)))
###           ("_idts" ("_position" i) ("_position" j))
###           ("\<^const>HOL.conj"
###             ("\<^const>Set.member" ("_position" i) ("_position" UNIV))
###             ("\<^const>Set.member" ("_position" j) ("_position" UNIV))))))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 773 of "$AFP/Regular_Algebras/Regular_Algebras.thy") produces 2 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("\<^const>Groups.plus_class.plus"
###       ("_applC" ("\<^const>Groups_Big.comm_monoid_add_class.Sum")
###         ("_Setcompr"
###           ("\<^const>Regular_Algebras.boffa_mon.Rep_boffa_mon"
###             ("_position" x) ("_position" i))
###           ("_position" i)
###           ("\<^const>Set.member" ("_position" i) ("_position" UNIV))))
###       ("_applC" ("\<^const>Groups_Big.comm_monoid_add_class.Sum")
###         ("_Setcompr"
###           ("\<^const>Groups.times_class.times"
###             ("\<^const>Regular_Algebras.boffa_mon.Rep_boffa_mon"
###               ("_position" x) ("_position" i))
###             ("\<^const>Regular_Algebras.boffa_mon.Rep_boffa_mon"
###               ("_position" x) ("_position" j)))
###           ("_idts" ("_position" i) ("_position" j))
###           ("\<^const>HOL.conj"
###             ("\<^const>Set.member" ("_position" i) ("_position" UNIV))
###             ("\<^const>Set.member" ("_position" j) ("_position" UNIV))))))
###     ("_applC" ("\<^const>Groups_Big.comm_monoid_add_class.Sum")
###       ("_Setcompr"
###         ("\<^const>Regular_Algebras.boffa_mon.Rep_boffa_mon" ("_position" x)
###           ("_position" i))
###         ("_position" i)
###         ("\<^const>Set.member" ("_position" i) ("_position" UNIV))))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("\<^const>Groups.plus_class.plus"
###       ("_applC" ("\<^const>Groups_Big.comm_monoid_add_class.Sum")
###         ("_Setcompr"
###           ("\<^const>Regular_Algebras.boffa_mon.Rep_boffa_mon"
###             ("_position" x) ("_position" i))
###           ("_position" i)
###           ("\<^const>Set.member" ("_position" i) ("_position" UNIV))))
###       ("_applC" ("\<^const>Groups_Big.comm_monoid_add_class.Sum")
###         ("_Setcompr"
###           ("\<^const>Regular_Algebras.boffa_mon.Rep_boffa_mon"
###             ("\<^const>Groups.times_class.times"
###               ("\<^const>Regular_Algebras.boffa_mon.Rep_boffa_mon"
###                 ("_position" x) ("_position" i))
###               ("_position" x))
###             ("_position" j))
###           ("_idts" ("_position" i) ("_position" j))
###           ("\<^const>HOL.conj"
###             ("\<^const>Set.member" ("_position" i) ("_position" UNIV))
###             ("\<^const>Set.member" ("_position" j) ("_position" UNIV))))))
###     ("_applC" ("\<^const>Groups_Big.comm_monoid_add_class.Sum")
###       ("_Setcompr"
###         ("\<^const>Regular_Algebras.boffa_mon.Rep_boffa_mon" ("_position" x)
###           ("_position" i))
###         ("_position" i)
###         ("\<^const>Set.member" ("_position" i) ("_position" UNIV))))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
class C0_algebra = strong_conway_dioid +
  assumes
    "C0":
      "!!x y z.
          x \<cdot> y = y \<cdot> z ==>
          x\<^sup>\<star> \<cdot> y = y \<cdot> z\<^sup>\<star>"
class C1l_algebra = strong_conway_dioid +
  assumes
    "C1l":
      "!!x y z.
          x \<cdot> y <= y \<cdot> z ==>
          x\<^sup>\<star> \<cdot> y <= y \<cdot> z\<^sup>\<star>"
class C1r_algebra = strong_conway_dioid +
  assumes
    "C1r":
      "!!y x z.
          y \<cdot> x <= z \<cdot> y ==>
          y \<cdot> x\<^sup>\<star> <= z\<^sup>\<star> \<cdot> y"
class C2l_algebra = conway_dioid +
  assumes "C2l": "!!x y. x = y \<cdot> x ==> x = y\<^sup>\<star> \<cdot> x"
class C2r_algebra = conway_dioid +
  assumes "C2r": "!!x y. x = x \<cdot> y ==> x = x \<cdot> y\<^sup>\<star>"
class C3l_algebra = conway_dioid +
  assumes
    "C3l": "!!x y. x \<cdot> y <= y ==> x\<^sup>\<star> \<cdot> y <= y"
class C3r_algebra = conway_dioid +
  assumes
    "C3r": "!!y x. y \<cdot> x <= y ==> y \<cdot> x\<^sup>\<star> <= y"
### Partially applied constant "Dioid.times_class.opp_mult" on left hand side of equation, in theorem:
### monoid_mult.prod_list (1::?'a) (\<odot>) ?xs == foldr (\<odot>) ?xs (1::?'a)
### Partially applied constant "Dioid.times_class.opp_mult" on left hand side of equation, in theorem:
### monoid_mult.prod_list (1::?'a) (\<odot>) ?xs == foldr (\<odot>) ?xs (1::?'a)
### Partially applied constant "Dioid.times_class.opp_mult" on left hand side of equation, in theorem:
### monoid_mult.prod_list (1::?'a) (\<odot>) ?xs == foldr (\<odot>) ?xs (1::?'a)
### Partially applied constant "Dioid.times_class.opp_mult" on left hand side of equation, in theorem:
### monoid_mult.prod_list (1::?'a) (\<odot>) ?xs == foldr (\<odot>) ?xs (1::?'a)
class Kl_base = star_dioid +
  assumes
    "Kl": "!!x. (1::'a) + x \<cdot> x\<^sup>\<star> <= x\<^sup>\<star>"
class Kr_base = star_dioid +
  assumes
    "Kr": "!!x. (1::'a) + x\<^sup>\<star> \<cdot> x <= x\<^sup>\<star>"
class K1l_algebra = Kl_base +
  assumes
    "star_inductl":
      "!!x y. x \<cdot> y <= y ==> x\<^sup>\<star> \<cdot> y <= y"
class K1r_algebra = Kr_base +
  assumes
    "star_inductr":
      "!!y x. y \<cdot> x <= y ==> y \<cdot> x\<^sup>\<star> <= y"
class K2l_algebra = Kl_base +
  assumes
    "star_inductl_var":
      "!!z x y. z + x \<cdot> y <= y ==> x\<^sup>\<star> \<cdot> z <= y"
class K2r_algebra = Kr_base +
  assumes
    "star_inductr_var":
      "!!z y x. z + y \<cdot> x <= y ==> z \<cdot> x\<^sup>\<star> <= y"
### Partially applied constant "Dioid.times_class.opp_mult" on left hand side of equation, in theorem:
### monoid_mult.prod_list (1::?'a) (\<odot>) ?xs == foldr (\<odot>) ?xs (1::?'a)
### Partially applied constant "Dioid.times_class.opp_mult" on left hand side of equation, in theorem:
### monoid_mult.prod_list (1::?'a) (\<odot>) ?xs == foldr (\<odot>) ?xs (1::?'a)
### Partially applied constant "Dioid.times_class.opp_mult" on left hand side of equation, in theorem:
### monoid_mult.prod_list (1::?'a) (\<odot>) ?xs == foldr (\<odot>) ?xs (1::?'a)
class salomaa_base = star_dioid +
  fixes ewp :: "'a => bool"
  assumes "S11": "!!x. ((1::'a) + x)\<^sup>\<star> = x\<^sup>\<star>"
    and "EWP": "!!x. ewp x = (EX y. x = (1::'a) + y & ~ ewp y)"
class Sr_algebra = salomaa_base +
  assumes
    "S12r": "!!x. (1::'a) + x\<^sup>\<star> \<cdot> x = x\<^sup>\<star>"
    and
    "Ar":
      "!!y x z.
          [| ~ ewp y; x = x \<cdot> y + z |]
          ==> x = z \<cdot> y\<^sup>\<star>"
class Sl_algebra = salomaa_base +
  assumes
    "S12l": "!!x. (1::'a) + x \<cdot> x\<^sup>\<star> = x\<^sup>\<star>"
    and
    "Al":
      "!!y x z.
          [| ~ ewp y; x = y \<cdot> x + z |]
          ==> x = y\<^sup>\<star> \<cdot> z"
### Partially applied constant "Dioid.times_class.opp_mult" on left hand side of equation, in theorem:
### monoid_mult.prod_list (1::?'a) (\<odot>) ?xs == foldr (\<odot>) ?xs (1::?'a)
class Sr_algebra = salomaa_base +
  assumes
    "S12r": "!!x. (1::'a) + x\<^sup>\<star> \<cdot> x = x\<^sup>\<star>"
    and
    "Ar":
      "!!y x z.
          [| ~ ewp y; x = x \<cdot> y + z |]
          ==> x = z \<cdot> y\<^sup>\<star>"
class Sl_algebra = salomaa_base +
  assumes
    "S12l": "!!x. (1::'a) + x \<cdot> x\<^sup>\<star> = x\<^sup>\<star>"
    and
    "Al":
      "!!y x z.
          [| ~ ewp y; x = y \<cdot> x + z |]
          ==> x = y\<^sup>\<star> \<cdot> z"
### Partially applied constant "Dioid.times_class.opp_mult" on left hand side of equation, in theorem:
### monoid_mult.prod_list (1::?'a) (\<odot>) ?xs == foldr (\<odot>) ?xs (1::?'a)
### Partially applied constant "Dioid.times.opp_mult" on left hand side of equation, in theorem:
### monoid_mult.prod_list (1::?'a) Sl_algebra_class.dual.opp_mult ?xs ==
### foldr Sl_algebra_class.dual.opp_mult ?xs (1::?'a)
class salomaa_conj_r = salomaa_base +
  assumes
    "salomaa_small_unfold":
      "!!x. (1::'a) + x\<^sup>\<star> \<cdot> x = x\<^sup>\<star>"
  assumes
    "salomaa_small_r":
      "!!y x.
          [| ~ ewp y; x = x \<cdot> y + (1::'a) |] ==> x = y\<^sup>\<star>"
### theory "Draft.Regular_Algebras"
### 36.419s elapsed time, 42.946s cpu time, 6.097s GC time
Loading theory "Draft.Pratts_Counterexamples" (required by "Draft.Pratts_CounterexamplesTemplates")
Found termination order: "{}"
Found termination order: "{}"
Found termination order: "{}"
Found termination order: "{}"
instantiation
  pratt1 :: selective_semiring
  zero_pratt1 == zero_class.zero :: pratt1
  one_pratt1 == one_class.one :: pratt1
  less_eq_pratt1 == less_eq :: pratt1 => pratt1 => bool
  less_pratt1 == less :: pratt1 => pratt1 => bool
  times_pratt1 == times :: pratt1 => pratt1 => pratt1
  plus_pratt1 == plus :: pratt1 => pratt1 => pratt1
instantiation
  pratt2 :: selective_semiring
  zero_pratt2 == zero_class.zero :: pratt2
  one_pratt2 == one_class.one :: pratt2
  less_eq_pratt2 == less_eq :: pratt2 => pratt2 => bool
  less_pratt2 == less :: pratt2 => pratt2 => bool
  times_pratt2 == times :: pratt2 => pratt2 => pratt2
  plus_pratt2 == plus :: pratt2 => pratt2 => pratt2
instantiation
  pratt1 :: star_op
  star_pratt1 == star :: pratt1 => pratt1
instantiation
  pratt2 :: star_op
  star_pratt2 == star :: pratt2 => pratt2
### theory "Draft.Pratts_Counterexamples"
### 1.392s elapsed time, 2.496s cpu time, 0.290s GC time
Loading theory "Draft.Pratts_CounterexamplesTemplates"
val templateLemmas =
   [("Pratts_Counterexamples.top_greatest", "?x <= \<top>\<^sub>1",
     template_inequation (less_equals, template_var 0, template_hole 0)),
    ("Pratts_Counterexamples.plusl_infty_num",
     "0 < ?x ==>
      \<infinity>\<^sub>1 +\<^sub>1 [?x]\<^sub>1 = \<top>\<^sub>1",
     template_implication
      ([template_inequation (less_than, template_hole 5, template_var 0)],
       template_equation
        (template_app
          (template_app (template_hole 3, template_hole 2),
           template_app (template_hole 1, template_var 0)),
         template_hole 0))),
    ("Pratts_Counterexamples.plusl_num_infty",
     "0 < ?x ==>
      [?x]\<^sub>1 +\<^sub>1 \<infinity>\<^sub>1 = \<infinity>\<^sub>1",
     template_implication
      ([template_inequation (less_than, template_hole 4, template_var 0)],
       template_equation
        (template_app
          (template_app
            (template_hole 2,
             template_app (template_hole 1, template_var 0)),
           template_hole 0),
         template_hole 0)))]:
   (string * thm * template) list
### theory "Draft.Pratts_CounterexamplesTemplates"
### 0.568s elapsed time, 0.885s cpu time, 0.096s GC time
val it = (): unit
