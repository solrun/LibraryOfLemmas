Loading theory "Draft.Graph" (required by "Draft.NetCheckTemplates" via "Draft.NetCheck" via "Draft.Network")
Loading theory "HOL-Library.Function_Algebras" (required by "Draft.NetCheckTemplates" via "Draft.ExtrEqs" via "HOL-Library.BigO")
Loading theory "HOL-Library.Stream" (required by "Draft.NetCheckTemplates" via "Draft.ExtrEqs")
Loading theory "HOL-Library.Set_Algebras" (required by "Draft.NetCheckTemplates" via "Draft.ExtrEqs" via "HOL-Library.BigO")
instantiation
  fun :: (type, plus) plus
  plus_fun == plus :: ('a => 'b) => ('a => 'b) => 'a => 'b
instantiation
  set :: (plus) plus
  plus_set == plus :: 'a set => 'a set => 'a set
instantiation
  set :: (times) times
  times_set == times :: 'a set => 'a set => 'a set
instantiation
  fun :: (type, zero) zero
  zero_fun == zero_class.zero :: 'a => 'b
instantiation
  set :: (zero) zero
  zero_set == zero_class.zero :: 'a set
locale Graph
  fixes c :: "nat * nat => 'capacity"
instantiation
  fun :: (type, times) times
  times_fun == times :: ('a => 'b) => ('a => 'b) => 'a => 'b
instantiation
  set :: (one) one
  one_set == one_class.one :: 'a set
instantiation
  fun :: (type, one) one
  one_fun == one_class.one :: 'a => 'b
locale Finite_Graph
  fixes c :: "nat * nat => 'a"
  assumes "Finite_Graph c"
locale Graph
  fixes c :: "nat * nat => 'capacity"
### theory "HOL-Library.Function_Algebras"
### 0.136s elapsed time, 0.553s cpu time, 0.064s GC time
Loading theory "HOL-Library.Tree" (required by "Draft.NetCheckTemplates" via "Draft.ExtrEqs" via "Draft.Templates")
Found termination order:
  "(%p. size_list (%p. size (snd p)) (fst (snd p))) <*mlex*> {}"
### theory "HOL-Library.Set_Algebras"
### 0.224s elapsed time, 0.901s cpu time, 0.064s GC time
Loading theory "HOL-Library.BigO" (required by "Draft.NetCheckTemplates" via "Draft.ExtrEqs")
Found termination order:
  "(%p. size_list (%p. size (snd p)) (snd p)) <*mlex*> {}"
locale Graph
  fixes c :: "nat * nat => 'capacity"
consts
  shift :: "'a list => 'a stream => 'a stream"
Proofs for coinductive predicate(s) "streamsp"
  Proving monotonicity ...
consts
  snth :: "'a stream => nat => 'a"
consts
  stake :: "nat => 'a stream => 'a list"
consts
  sdrop :: "nat => 'a stream => 'a stream"
consts
  sfilter :: "('a => bool) => 'a stream => 'a stream"
consts
  cycle :: "'a list => 'a stream"
consts
  siterate :: "('a => 'a) => 'a => 'a stream"
consts
  left :: "'a tree => 'a tree"
consts
  right :: "'a tree => 'a tree"
consts
  flat :: "'a list stream => 'a stream"
Found termination order: "size <*mlex*> {}"
consts
  sinterleave :: "'a stream => 'a stream => 'a stream"
consts
  szip :: "'a stream => 'b stream => ('a * 'b) stream"
Found termination order: "size <*mlex*> {}"
consts
  smap2 :: "('a => 'b => 'c) => 'a stream => 'b stream => 'c stream"
Found termination order: "size <*mlex*> {}"
### theory "HOL-Library.Stream"
### 0.940s elapsed time, 3.642s cpu time, 0.419s GC time
Loading theory "Draft.Fofu_Abs_Base" (required by "Draft.NetCheckTemplates" via "Draft.NetCheck" via "Draft.Refine_Add_Fofu" via "Draft.Fofu_Impl_Base")
class height = type +
  fixes height :: "'a => nat"
instantiation
  tree :: (type) height
  height_tree == height :: 'a tree => nat
Found termination order: "size <*mlex*> {}"
### theory "HOL-Library.BigO"
### 1.079s elapsed time, 4.007s cpu time, 1.043s GC time
Found termination order: "size <*mlex*> {}"
locale Finite_Graph
  fixes c :: "nat * nat => 'a"
  assumes "Finite_Graph c"
### theory "Draft.Graph"
### 1.366s elapsed time, 5.090s cpu time, 1.107s GC time
Loading theory "Draft.Network" (required by "Draft.NetCheckTemplates" via "Draft.NetCheck")
Found termination order: "size <*mlex*> {}"
locale Preflow
  fixes c :: "nat * nat => 'capacity"
    and s :: "nat"
    and t :: "nat"
    and f :: "nat * nat => 'capacity"
  assumes "Preflow c s t f"
Found termination order: "size <*mlex*> {}"
locale Flow
  fixes c :: "nat * nat => 'capacity"
    and s :: "nat"
    and t :: "nat"
    and f :: "nat * nat => 'capacity"
  assumes "Flow c s t f"
Found termination order: "size <*mlex*> {}"
locale Finite_Preflow
  fixes c :: "nat * nat => 'capacity"
    and s :: "nat"
    and t :: "nat"
    and f :: "nat * nat => 'capacity"
  assumes "Finite_Preflow c s t f"
Found termination order: "size <*mlex*> {}"
locale Finite_Flow
  fixes c :: "nat * nat => 'capacity"
    and s :: "nat"
    and t :: "nat"
    and f :: "nat * nat => 'capacity"
  assumes "Finite_Flow c s t f"
Found termination order: "size <*mlex*> {}"
locale Cut
  fixes c :: "nat * nat => 'a"
    and k :: "nat set"
  assumes "Cut c k"
Found termination order: "(%p. size (fst p)) <*mlex*> {}"
locale Network
  fixes c :: "nat * nat => 'capacity"
    and s :: "nat"
    and t :: "nat"
  assumes "Network c s t"
Found termination order: "size <*mlex*> {}"
locale NPreflow
  fixes c :: "nat * nat => 'capacity"
    and s :: "nat"
    and t :: "nat"
    and f :: "nat * nat => 'capacity"
  assumes "NPreflow c s t f"
Found termination order: "(%p. size (snd p)) <*mlex*> {}"
locale NFlow
  fixes c :: "nat * nat => 'capacity"
    and s :: "nat"
    and t :: "nat"
    and f :: "nat * nat => 'capacity"
  assumes "NFlow c s t f"
locale NCut
  fixes c :: "nat * nat => 'capacity"
    and s :: "nat"
    and t :: "nat"
    and k :: "nat set"
  assumes "NCut c s t k"
locale Preflow
  fixes c :: "nat * nat => 'capacity"
    and s :: "nat"
    and t :: "nat"
    and f :: "nat * nat => 'capacity"
  assumes "Preflow c s t f"
locale Flow
  fixes c :: "nat * nat => 'capacity"
    and s :: "nat"
    and t :: "nat"
    and f :: "nat * nat => 'capacity"
  assumes "Flow c s t f"
locale Finite_Preflow
  fixes c :: "nat * nat => 'capacity"
    and s :: "nat"
    and t :: "nat"
    and f :: "nat * nat => 'capacity"
  assumes "Finite_Preflow c s t f"
### theory "Draft.Fofu_Abs_Base"
### 1.259s elapsed time, 3.965s cpu time, 1.015s GC time
Loading theory "Draft.Fofu_Impl_Base" (required by "Draft.NetCheckTemplates" via "Draft.NetCheck" via "Draft.Refine_Add_Fofu")
locale Network
  fixes c :: "nat * nat => 'capacity"
    and s :: "nat"
    and t :: "nat"
  assumes "Network c s t"
Found termination order: "size <*mlex*> {}"
locale NPreflow
  fixes c :: "nat * nat => 'capacity"
    and s :: "nat"
    and t :: "nat"
    and f :: "nat * nat => 'capacity"
  assumes "NPreflow c s t f"
locale NFlow
  fixes c :: "nat * nat => 'capacity"
    and s :: "nat"
    and t :: "nat"
    and f :: "nat * nat => 'capacity"
  assumes "NFlow c s t f"
### theory "Draft.Network"
### 0.967s elapsed time, 2.913s cpu time, 0.408s GC time
### theory "HOL-Library.Tree"
### 2.306s elapsed time, 7.728s cpu time, 1.451s GC time
Loading theory "Draft.Templates" (required by "Draft.NetCheckTemplates" via "Draft.ExtrEqs")
datatype template_term
=
     t_empty
   | template_app of template_term * template_term
   | template_hole of int
   | template_var of int
datatype sign
= equals | greater_equals | greater_than | less_equals | less_than
datatype template
=
     template_bimplication of template * template
   | template_dunno
   | template_equation of template_term * template_term
   | template_implication of template list * template
   | template_inequation of sign * template_term * template_term
   | template_negation of template
   | template_predicate of template_term
constructor t_empty: template_term
constructor template_app: template_term * template_term -> template_term
constructor template_hole: int -> template_term
constructor template_var: int -> template_term
constructor equals: sign
constructor greater_equals: sign
constructor greater_than: sign
constructor less_equals: sign
constructor less_than: sign
constructor template_bimplication: template * template -> template
constructor template_dunno: template
constructor template_equation: template_term * template_term -> template
constructor template_implication: template list * template -> template
constructor template_inequation:
   sign * template_term * template_term -> template
constructor template_negation: template -> template
constructor template_predicate: template_term -> template
val vfs = fn: term -> (indexname * typ) list * (string * typ) list
val indexOf = fn: ''a list -> ''a -> int -> int
val has_eq = fn: term -> bool
val term2template = fn:
   (indexname * typ) list -> (string * typ) list -> term -> template_term
val lemma2predicate = fn: term -> term -> template
val makeTemplatewithContext = fn: term -> term -> template
val lemma2template = fn: term -> template
val thm2template = fn: thm -> template
val tterm2string = fn: template_term -> string
val template2string = fn: template -> string
val t = "height ?t <= size ?t": thm
val th =
   Const ("HOL.Trueprop", "bool => prop") $
     (Const ("Orderings.ord_class.less_eq", "nat => nat => bool") $
       (Const ("Tree.height_class.height", "?'a tree => nat") $
         Var (("t", 0), "?'a tree")) $
       (Const ("Nat.size_class.size", "?'a tree => nat") $
         Var (("t", 0), "?'a tree"))):
   term
### theory "Draft.Templates"
### 0.297s elapsed time, 0.983s cpu time, 0.846s GC time
Loading theory "Draft.ExtrEqs" (required by "Draft.NetCheckTemplates")
val eqpattern =
   Pattern
    (
       Const ("HOL.Trueprop", "bool => prop") $
         (Const ("HOL.eq", "?'a => ?'a => bool") $
           Var (("_dummy_", 1), "?'a") $ Var (("_dummy_", 2), "?'a"))
       ):
   term Find_Theorems.criterion
val badeqpattern = Pattern (Const ("Pure.eq", "?'a => ?'a => prop")):
   term Find_Theorems.criterion
val undefpattern =
   Pattern
    (
       Const ("HOL.Trueprop", "bool => prop") $
         (Const ("HOL.eq", "?'a => ?'a => bool") $
           Var (("_dummy_", 1), "?'a") $ Const ("HOL.undefined", "?'a"))
       ):
   term Find_Theorems.criterion
val thmpattern =
   Pattern
    (Const ("HOL.Trueprop", "bool => prop") $ Var (("_dummy_", 1), "bool")):
   term Find_Theorems.criterion
val badnames =
   ["*nitpick*", "*Nitpick*", "*full_exhaustive*", "*_def*", "Enum.finite*",
    "*Quickcheck*", "ATP*", "*Nunchaku*", "*Code*", "*BNF*", "*SMT*",
    "*.*.*"]:
   string list
val unwanted_names =
   [(false, Name "*nitpick*"), (false, Name "*Nitpick*"),
    (false, Name "*full_exhaustive*"), (false, Name "*_def*"),
    (false, Name "Enum.finite*"), (false, Name "*Quickcheck*"),
    (false, Name "ATP*"), (false, Name "*Nunchaku*"),
    (false, Name "*Code*"), (false, Name "*BNF*"), (false, Name "*SMT*"),
    (false, Name "*.*.*")]:
   (bool * term Find_Theorems.criterion) list
val has_vars = fn: term -> bool
val get_all_eqs = fn: string -> Proof.context -> (string * thm) list
val get_all_thms = fn: string -> Proof.context -> (string * thm) list
val get_noneq_thms = fn: string -> Proof.context -> (string * thm) list
val template_eqs = fn:
   string -> Proof.context -> (string * thm * template) list
val template_thms = fn:
   string -> Proof.context -> (string * thm * template) list
### theory "Draft.ExtrEqs"
### 0.560s elapsed time, 1.133s cpu time, 0.036s GC time
### theory "Draft.Fofu_Impl_Base"
### 2.195s elapsed time, 3.983s cpu time, 1.093s GC time
Loading theory "Draft.Refine_Add_Fofu" (required by "Draft.NetCheckTemplates" via "Draft.NetCheck")
### theory "Draft.Refine_Add_Fofu"
### 0.251s elapsed time, 0.251s cpu time, 0.000s GC time
Loading theory "Draft.Graph_Impl" (required by "Draft.NetCheckTemplates" via "Draft.NetCheck")
locale Impl_Succ
  fixes absG :: "'ga => nat * nat => int"
    and ifT :: "'ig itself"
    and succ :: "'ga => nat => nat list nres"
    and isG :: "'ga => 'gi => assn"
    and succ_impl :: "'gi => nat => nat list Heap"
  assumes "Impl_Succ absG succ isG succ_impl"
succ ::\<^sub>i TYPE('ig => nat => nat list nres)
### theory "Draft.Graph_Impl"
### 0.248s elapsed time, 0.248s cpu time, 0.000s GC time
Loading theory "Draft.NetCheck" (required by "Draft.NetCheckTemplates")
### Ambiguous input (line 84 of "$AFP/Flow_Networks/NetCheck.thy") produces 16 parse trees (10 displayed):
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("_applC" ("_position" read)
###       ("_cargs"
###         ("\<^const>List.list.Cons"
###           ("_tuple" ("_position" u)
###             ("_tuple_args" ("_position" v) ("_tuple_arg" ("_position" c))))
###           ("_position" es))
###         ("_cargs" ("_position" s) ("_position" t))))
###     ("_case_syntax"
###       ("_applC" ("_position" read)
###         ("_cargs" ("_position" es)
###           ("_cargs" ("_position" s) ("_position" t))))
###       ("_case2"
###         ("_case1" ("_applC" ("_position" Some) ("_position" x))
###           ("\<^const>HOL.If"
###             ("\<^const>HOL.conj"
###               ("\<^const>HOL.eq"
###                 ("_applC" ("_applC" ("_position" pn_c) ("_position" x))
###                   ("_tuple" ("_position" u) ("_tuple_arg" ("_position" v))))
###                 ("\<^const>Groups.zero_class.zero"))
###               ("\<^const>HOL.conj"
###                 ("\<^const>HOL.eq"
###                   ("_applC" ("_applC" ("_position" pn_c) ("_position" x))
###                     ("_tuple" ("_position" v)
###                       ("_tuple_arg" ("_position" u))))
###                   ("\<^const>Groups.zero_class.zero"))
###                 ("\<^const>Orderings.ord_class.greater" ("_position" c)
###                   ("\<^const>Groups.zero_class.zero"))))
###             ("\<^const>HOL.If"
###               ("\<^const>HOL.disj"
###                 ("\<^const>HOL.eq" ("_position" u) ("_position" v))
###                 ("\<^const>HOL.disj"
###                   ("\<^const>HOL.eq" ("_position" v) ("_position" s))
###                   ("\<^const>HOL.eq" ("_position" u) ("_position" t))))
###               ("_position" None)
###               ("_applC" ("_position" Some)
###                 ("_record_update" ("_position" x)
###                   ("_field_updates"
###                     ("_field_update" ("_constify" pn_c)
###                       ("_Update"
###                         ("_applC" ("_position" pn_c) ("_position" x))
###                         ("_updbind"
###                           ("_tuple" ("_position" u)
###                             ("_tuple_arg" ("_position" v)))
###                           ("_position" c))))
###                     ("_field_updates"
###                       ("_field_update" ("_constify" pn_V)
###                         ("_applC" ("_position" insert)
###                           ("_cargs" ("_position" u)
###                             ("_applC" ("_position" insert)
###                               ("_cargs" ("_position" v)
###                                 ("_applC" ("_position" pn_V)
###                                   ("_position" x)))))))
###                       ("_field_updates"
###                         ("_field_update" ("_constify" pn_succ)
###                           ("_Update"
###                             ("_applC" ("_position" pn_succ) ("_position" x))
###                             ("_updbind" ("_position" u)
###                               ("\<^const>List.list.Cons" ("_position" v)
###                                 ("_applC"
###                                   ("_applC" ("_position" pn_succ)
###                                     ("_position" x))
###                                   ("_position" u))))))
###                         ("_field_updates"
###                           ("_field_update" ("_constify" pn_pred)
###                             ("_Update"
###                               ("_applC" ("_position" pn_pred)
###                                 ("_position" x))
###                               ("_updbind" ("_position" v)
###                                 ("\<^const>List.list.Cons" ("_position" u)
###                                   ("_applC"
###                                     ("_applC" ("_position" pn_pred)
### ("_position" x))
###                                     ("_position" v))))))
###                           ("_field_updates"
###                             ("_field_update" ("_constify" pn_adjmap)
###                               ("_Update"
###                                 ("_applC" ("_position" pn_adjmap)
###                                   ("_position" x))
###                                 ("_updbinds"
###                                   ("_updbind" ("_position" u)
###                                     ("\<^const>List.list.Cons"
### ("_position" v)
### ("_applC" ("_applC" ("_position" pn_adjmap) ("_position" x))
###   ("_position" u))))
###                                   ("_updbind" ("_position" v)
###                                     ("\<^const>List.list.Cons"
### ("_position" u)
### ("_applC" ("_applC" ("_position" pn_adjmap) ("_position" x))
###   ("_position" v)))))))
###                             ("_field_updates"
###                               ("_field_update" ("_constify" pn_s_node)
###                                 ("\<^const>HOL.disj"
###                                   ("_applC" ("_position" pn_s_node)
###                                     ("_position" x))
###                                   ("\<^const>HOL.eq" ("_position" u)
###                                     ("_position" s))))
###                               ("_field_update" ("_constify" pn_t_node)
###                                 ("\<^const>HOL.disj"
###                                   ("_applC" ("_position" pn_t_node)
###                                     ("_position" x))
###                                   ("\<^const>HOL.eq" ("_position" v)
###                                     ("_position" t)))))))))))))
###             ("_position" None)))
###         ("_case1" ("_position" None) ("_position" None))))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("_applC" ("_position" read)
###       ("_cargs"
###         ("\<^const>List.list.Cons"
###           ("_tuple" ("_position" u)
###             ("_tuple_args" ("_position" v) ("_tuple_arg" ("_position" c))))
###           ("_position" es))
###         ("_cargs" ("_position" s) ("_position" t))))
###     ("_case_syntax"
###       ("_applC" ("_position" read)
###         ("_cargs" ("_position" es)
###           ("_cargs" ("_position" s) ("_position" t))))
###       ("_case2"
###         ("_case1" ("_applC" ("_position" Some) ("_position" x))
###           ("\<^const>HOL.If"
###             ("\<^const>HOL.conj"
###               ("\<^const>HOL.eq"
###                 ("_applC" ("_applC" ("_position" pn_c) ("_position" x))
###                   ("_tuple" ("_position" u) ("_tuple_arg" ("_position" v))))
###                 ("\<^const>Groups.zero_class.zero"))
###               ("\<^const>HOL.conj"
###                 ("\<^const>HOL.eq"
###                   ("_applC" ("_applC" ("_position" pn_c) ("_position" x))
###                     ("_tuple" ("_position" v)
###                       ("_tuple_arg" ("_position" u))))
###                   ("\<^const>Groups.zero_class.zero"))
###                 ("\<^const>Orderings.ord_class.greater" ("_position" c)
###                   ("\<^const>Groups.zero_class.zero"))))
###             ("\<^const>HOL.If"
###               ("\<^const>HOL.disj"
###                 ("\<^const>HOL.eq" ("_position" u) ("_position" v))
###                 ("\<^const>HOL.disj"
###                   ("\<^const>HOL.eq" ("_position" v) ("_position" s))
###                   ("\<^const>HOL.eq" ("_position" u) ("_position" t))))
###               ("_position" None)
###               ("_applC" ("_position" Some)
###                 ("_record_update" ("_position" x)
###                   ("_field_updates"
###                     ("_field_update" ("_constify" pn_c)
###                       ("_applC"
###                         ("_applC" ("_position" pn_c) ("_position" x))
###                         ("\<^const>Ref.update"
###                           ("_tuple" ("_position" u)
###                             ("_tuple_arg" ("_position" v)))
###                           ("_position" c))))
###                     ("_field_updates"
###                       ("_field_update" ("_constify" pn_V)
###                         ("_applC" ("_position" insert)
###                           ("_cargs" ("_position" u)
###                             ("_applC" ("_position" insert)
###                               ("_cargs" ("_position" v)
###                                 ("_applC" ("_position" pn_V)
###                                   ("_position" x)))))))
###                       ("_field_updates"
###                         ("_field_update" ("_constify" pn_succ)
###                           ("_Update"
###                             ("_applC" ("_position" pn_succ) ("_position" x))
###                             ("_updbind" ("_position" u)
###                               ("\<^const>List.list.Cons" ("_position" v)
###                                 ("_applC"
###                                   ("_applC" ("_position" pn_succ)
###                                     ("_position" x))
###                                   ("_position" u))))))
###                         ("_field_updates"
###                           ("_field_update" ("_constify" pn_pred)
###                             ("_Update"
###                               ("_applC" ("_position" pn_pred)
###                                 ("_position" x))
###                               ("_updbind" ("_position" v)
###                                 ("\<^const>List.list.Cons" ("_position" u)
###                                   ("_applC"
###                                     ("_applC" ("_position" pn_pred)
### ("_position" x))
###                                     ("_position" v))))))
###                           ("_field_updates"
###                             ("_field_update" ("_constify" pn_adjmap)
###                               ("_Update"
###                                 ("_applC" ("_position" pn_adjmap)
###                                   ("_position" x))
###                                 ("_updbinds"
###                                   ("_updbind" ("_position" u)
###                                     ("\<^const>List.list.Cons"
### ("_position" v)
### ("_applC" ("_applC" ("_position" pn_adjmap) ("_position" x))
###   ("_position" u))))
###                                   ("_updbind" ("_position" v)
###                                     ("\<^const>List.list.Cons"
### ("_position" u)
### ("_applC" ("_applC" ("_position" pn_adjmap) ("_position" x))
###   ("_position" v)))))))
###                             ("_field_updates"
###                               ("_field_update" ("_constify" pn_s_node)
###                                 ("\<^const>HOL.disj"
###                                   ("_applC" ("_position" pn_s_node)
###                                     ("_position" x))
###                                   ("\<^const>HOL.eq" ("_position" u)
###                                     ("_position" s))))
###                               ("_field_update" ("_constify" pn_t_node)
###                                 ("\<^const>HOL.disj"
###                                   ("_applC" ("_position" pn_t_node)
###                                     ("_position" x))
###                                   ("\<^const>HOL.eq" ("_position" v)
###                                     ("_position" t)))))))))))))
###             ("_position" None)))
###         ("_case1" ("_position" None) ("_position" None))))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("_applC" ("_position" read)
###       ("_cargs"
###         ("\<^const>List.list.Cons"
###           ("_tuple" ("_position" u)
###             ("_tuple_args" ("_position" v) ("_tuple_arg" ("_position" c))))
###           ("_position" es))
###         ("_cargs" ("_position" s) ("_position" t))))
###     ("_case_syntax"
###       ("_applC" ("_position" read)
###         ("_cargs" ("_position" es)
###           ("_cargs" ("_position" s) ("_position" t))))
###       ("_case2"
###         ("_case1" ("_applC" ("_position" Some) ("_position" x))
###           ("\<^const>HOL.If"
###             ("\<^const>HOL.conj"
###               ("\<^const>HOL.eq"
###                 ("_applC" ("_applC" ("_position" pn_c) ("_position" x))
###                   ("_tuple" ("_position" u) ("_tuple_arg" ("_position" v))))
###                 ("\<^const>Groups.zero_class.zero"))
###               ("\<^const>HOL.conj"
###                 ("\<^const>HOL.eq"
###                   ("_applC" ("_applC" ("_position" pn_c) ("_position" x))
###                     ("_tuple" ("_position" v)
###                       ("_tuple_arg" ("_position" u))))
###                   ("\<^const>Groups.zero_class.zero"))
###                 ("\<^const>Orderings.ord_class.greater" ("_position" c)
###                   ("\<^const>Groups.zero_class.zero"))))
###             ("\<^const>HOL.If"
###               ("\<^const>HOL.disj"
###                 ("\<^const>HOL.eq" ("_position" u) ("_position" v))
###                 ("\<^const>HOL.disj"
###                   ("\<^const>HOL.eq" ("_position" v) ("_position" s))
###                   ("\<^const>HOL.eq" ("_position" u) ("_position" t))))
###               ("_position" None)
###               ("_applC" ("_position" Some)
###                 ("_record_update" ("_position" x)
###                   ("_field_updates"
###                     ("_field_update" ("_constify" pn_c)
###                       ("_Update"
###                         ("_applC" ("_position" pn_c) ("_position" x))
###                         ("_updbind"
###                           ("_tuple" ("_position" u)
###                             ("_tuple_arg" ("_position" v)))
###                           ("_position" c))))
###                     ("_field_updates"
###                       ("_field_update" ("_constify" pn_V)
###                         ("_applC" ("_position" insert)
###                           ("_cargs" ("_position" u)
###                             ("_applC" ("_position" insert)
###                               ("_cargs" ("_position" v)
###                                 ("_applC" ("_position" pn_V)
###                                   ("_position" x)))))))
###                       ("_field_updates"
###                         ("_field_update" ("_constify" pn_succ)
###                           ("_applC"
###                             ("_applC" ("_position" pn_succ) ("_position" x))
###                             ("\<^const>Ref.update" ("_position" u)
###                               ("\<^const>List.list.Cons" ("_position" v)
###                                 ("_applC"
###                                   ("_applC" ("_position" pn_succ)
###                                     ("_position" x))
###                                   ("_position" u))))))
###                         ("_field_updates"
###                           ("_field_update" ("_constify" pn_pred)
###                             ("_Update"
###                               ("_applC" ("_position" pn_pred)
###                                 ("_position" x))
###                               ("_updbind" ("_position" v)
###                                 ("\<^const>List.list.Cons" ("_position" u)
###                                   ("_applC"
###                                     ("_applC" ("_position" pn_pred)
### ("_position" x))
###                                     ("_position" v))))))
###                           ("_field_updates"
###                             ("_field_update" ("_constify" pn_adjmap)
###                               ("_Update"
###                                 ("_applC" ("_position" pn_adjmap)
###                                   ("_position" x))
###                                 ("_updbinds"
###                                   ("_updbind" ("_position" u)
###                                     ("\<^const>List.list.Cons"
### ("_position" v)
### ("_applC" ("_applC" ("_position" pn_adjmap) ("_position" x))
###   ("_position" u))))
###                                   ("_updbind" ("_position" v)
###                                     ("\<^const>List.list.Cons"
### ("_position" u)
### ("_applC" ("_applC" ("_position" pn_adjmap) ("_position" x))
###   ("_position" v)))))))
###                             ("_field_updates"
###                               ("_field_update" ("_constify" pn_s_node)
###                                 ("\<^const>HOL.disj"
###                                   ("_applC" ("_position" pn_s_node)
###                                     ("_position" x))
###                                   ("\<^const>HOL.eq" ("_position" u)
###                                     ("_position" s))))
###                               ("_field_update" ("_constify" pn_t_node)
###                                 ("\<^const>HOL.disj"
###                                   ("_applC" ("_position" pn_t_node)
###                                     ("_position" x))
###                                   ("\<^const>HOL.eq" ("_position" v)
###                                     ("_position" t)))))))))))))
###             ("_position" None)))
###         ("_case1" ("_position" None) ("_position" None))))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("_applC" ("_position" read)
###       ("_cargs"
###         ("\<^const>List.list.Cons"
###           ("_tuple" ("_position" u)
###             ("_tuple_args" ("_position" v) ("_tuple_arg" ("_position" c))))
###           ("_position" es))
###         ("_cargs" ("_position" s) ("_position" t))))
###     ("_case_syntax"
###       ("_applC" ("_position" read)
###         ("_cargs" ("_position" es)
###           ("_cargs" ("_position" s) ("_position" t))))
###       ("_case2"
###         ("_case1" ("_applC" ("_position" Some) ("_position" x))
###           ("\<^const>HOL.If"
###             ("\<^const>HOL.conj"
###               ("\<^const>HOL.eq"
###                 ("_applC" ("_applC" ("_position" pn_c) ("_position" x))
###                   ("_tuple" ("_position" u) ("_tuple_arg" ("_position" v))))
###                 ("\<^const>Groups.zero_class.zero"))
###               ("\<^const>HOL.conj"
###                 ("\<^const>HOL.eq"
###                   ("_applC" ("_applC" ("_position" pn_c) ("_position" x))
###                     ("_tuple" ("_position" v)
###                       ("_tuple_arg" ("_position" u))))
###                   ("\<^const>Groups.zero_class.zero"))
###                 ("\<^const>Orderings.ord_class.greater" ("_position" c)
###                   ("\<^const>Groups.zero_class.zero"))))
###             ("\<^const>HOL.If"
###               ("\<^const>HOL.disj"
###                 ("\<^const>HOL.eq" ("_position" u) ("_position" v))
###                 ("\<^const>HOL.disj"
###                   ("\<^const>HOL.eq" ("_position" v) ("_position" s))
###                   ("\<^const>HOL.eq" ("_position" u) ("_position" t))))
###               ("_position" None)
###               ("_applC" ("_position" Some)
###                 ("_record_update" ("_position" x)
###                   ("_field_updates"
###                     ("_field_update" ("_constify" pn_c)
###                       ("_applC"
###                         ("_applC" ("_position" pn_c) ("_position" x))
###                         ("\<^const>Ref.update"
###                           ("_tuple" ("_position" u)
###                             ("_tuple_arg" ("_position" v)))
###                           ("_position" c))))
###                     ("_field_updates"
###                       ("_field_update" ("_constify" pn_V)
###                         ("_applC" ("_position" insert)
###                           ("_cargs" ("_position" u)
###                             ("_applC" ("_position" insert)
###                               ("_cargs" ("_position" v)
###                                 ("_applC" ("_position" pn_V)
###                                   ("_position" x)))))))
###                       ("_field_updates"
###                         ("_field_update" ("_constify" pn_succ)
###                           ("_applC"
###                             ("_applC" ("_position" pn_succ) ("_position" x))
###                             ("\<^const>Ref.update" ("_position" u)
###                               ("\<^const>List.list.Cons" ("_position" v)
###                                 ("_applC"
###                                   ("_applC" ("_position" pn_succ)
###                                     ("_position" x))
###                                   ("_position" u))))))
###                         ("_field_updates"
###                           ("_field_update" ("_constify" pn_pred)
###                             ("_Update"
###                               ("_applC" ("_position" pn_pred)
###                                 ("_position" x))
###                               ("_updbind" ("_position" v)
###                                 ("\<^const>List.list.Cons" ("_position" u)
###                                   ("_applC"
###                                     ("_applC" ("_position" pn_pred)
### ("_position" x))
###                                     ("_position" v))))))
###                           ("_field_updates"
###                             ("_field_update" ("_constify" pn_adjmap)
###                               ("_Update"
###                                 ("_applC" ("_position" pn_adjmap)
###                                   ("_position" x))
###                                 ("_updbinds"
###                                   ("_updbind" ("_position" u)
###                                     ("\<^const>List.list.Cons"
### ("_position" v)
### ("_applC" ("_applC" ("_position" pn_adjmap) ("_position" x))
###   ("_position" u))))
###                                   ("_updbind" ("_position" v)
###                                     ("\<^const>List.list.Cons"
### ("_position" u)
### ("_applC" ("_applC" ("_position" pn_adjmap) ("_position" x))
###   ("_position" v)))))))
###                             ("_field_updates"
###                               ("_field_update" ("_constify" pn_s_node)
###                                 ("\<^const>HOL.disj"
###                                   ("_applC" ("_position" pn_s_node)
###                                     ("_position" x))
###                                   ("\<^const>HOL.eq" ("_position" u)
###                                     ("_position" s))))
###                               ("_field_update" ("_constify" pn_t_node)
###                                 ("\<^const>HOL.disj"
###                                   ("_applC" ("_position" pn_t_node)
###                                     ("_position" x))
###                                   ("\<^const>HOL.eq" ("_position" v)
###                                     ("_position" t)))))))))))))
###             ("_position" None)))
###         ("_case1" ("_position" None) ("_position" None))))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("_applC" ("_position" read)
###       ("_cargs"
###         ("\<^const>List.list.Cons"
###           ("_tuple" ("_position" u)
###             ("_tuple_args" ("_position" v) ("_tuple_arg" ("_position" c))))
###           ("_position" es))
###         ("_cargs" ("_position" s) ("_position" t))))
###     ("_case_syntax"
###       ("_applC" ("_position" read)
###         ("_cargs" ("_position" es)
###           ("_cargs" ("_position" s) ("_position" t))))
###       ("_case2"
###         ("_case1" ("_applC" ("_position" Some) ("_position" x))
###           ("\<^const>HOL.If"
###             ("\<^const>HOL.conj"
###               ("\<^const>HOL.eq"
###                 ("_applC" ("_applC" ("_position" pn_c) ("_position" x))
###                   ("_tuple" ("_position" u) ("_tuple_arg" ("_position" v))))
###                 ("\<^const>Groups.zero_class.zero"))
###               ("\<^const>HOL.conj"
###                 ("\<^const>HOL.eq"
###                   ("_applC" ("_applC" ("_position" pn_c) ("_position" x))
###                     ("_tuple" ("_position" v)
###                       ("_tuple_arg" ("_position" u))))
###                   ("\<^const>Groups.zero_class.zero"))
###                 ("\<^const>Orderings.ord_class.greater" ("_position" c)
###                   ("\<^const>Groups.zero_class.zero"))))
###             ("\<^const>HOL.If"
###               ("\<^const>HOL.disj"
###                 ("\<^const>HOL.eq" ("_position" u) ("_position" v))
###                 ("\<^const>HOL.disj"
###                   ("\<^const>HOL.eq" ("_position" v) ("_position" s))
###                   ("\<^const>HOL.eq" ("_position" u) ("_position" t))))
###               ("_position" None)
###               ("_applC" ("_position" Some)
###                 ("_record_update" ("_position" x)
###                   ("_field_updates"
###                     ("_field_update" ("_constify" pn_c)
###                       ("_Update"
###                         ("_applC" ("_position" pn_c) ("_position" x))
###                         ("_updbind"
###                           ("_tuple" ("_position" u)
###                             ("_tuple_arg" ("_position" v)))
###                           ("_position" c))))
###                     ("_field_updates"
###                       ("_field_update" ("_constify" pn_V)
###                         ("_applC" ("_position" insert)
###                           ("_cargs" ("_position" u)
###                             ("_applC" ("_position" insert)
###                               ("_cargs" ("_position" v)
###                                 ("_applC" ("_position" pn_V)
###                                   ("_position" x)))))))
###                       ("_field_updates"
###                         ("_field_update" ("_constify" pn_succ)
###                           ("_Update"
###                             ("_applC" ("_position" pn_succ) ("_position" x))
###                             ("_updbind" ("_position" u)
###                               ("\<^const>List.list.Cons" ("_position" v)
###                                 ("_applC"
###                                   ("_applC" ("_position" pn_succ)
###                                     ("_position" x))
###                                   ("_position" u))))))
###                         ("_field_updates"
###                           ("_field_update" ("_constify" pn_pred)
###                             ("_applC"
###                               ("_applC" ("_position" pn_pred)
###                                 ("_position" x))
###                               ("\<^const>Ref.update" ("_position" v)
###                                 ("\<^const>List.list.Cons" ("_position" u)
###                                   ("_applC"
###                                     ("_applC" ("_position" pn_pred)
### ("_position" x))
###                                     ("_position" v))))))
###                           ("_field_updates"
###                             ("_field_update" ("_constify" pn_adjmap)
###                               ("_Update"
###                                 ("_applC" ("_position" pn_adjmap)
###                                   ("_position" x))
###                                 ("_updbinds"
###                                   ("_updbind" ("_position" u)
###                                     ("\<^const>List.list.Cons"
### ("_position" v)
### ("_applC" ("_applC" ("_position" pn_adjmap) ("_position" x))
###   ("_position" u))))
###                                   ("_updbind" ("_position" v)
###                                     ("\<^const>List.list.Cons"
### ("_position" u)
### ("_applC" ("_applC" ("_position" pn_adjmap) ("_position" x))
###   ("_position" v)))))))
###                             ("_field_updates"
###                               ("_field_update" ("_constify" pn_s_node)
###                                 ("\<^const>HOL.disj"
###                                   ("_applC" ("_position" pn_s_node)
###                                     ("_position" x))
###                                   ("\<^const>HOL.eq" ("_position" u)
###                                     ("_position" s))))
###                               ("_field_update" ("_constify" pn_t_node)
###                                 ("\<^const>HOL.disj"
###                                   ("_applC" ("_position" pn_t_node)
###                                     ("_position" x))
###                                   ("\<^const>HOL.eq" ("_position" v)
###                                     ("_position" t)))))))))))))
###             ("_position" None)))
###         ("_case1" ("_position" None) ("_position" None))))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("_applC" ("_position" read)
###       ("_cargs"
###         ("\<^const>List.list.Cons"
###           ("_tuple" ("_position" u)
###             ("_tuple_args" ("_position" v) ("_tuple_arg" ("_position" c))))
###           ("_position" es))
###         ("_cargs" ("_position" s) ("_position" t))))
###     ("_case_syntax"
###       ("_applC" ("_position" read)
###         ("_cargs" ("_position" es)
###           ("_cargs" ("_position" s) ("_position" t))))
###       ("_case2"
###         ("_case1" ("_applC" ("_position" Some) ("_position" x))
###           ("\<^const>HOL.If"
###             ("\<^const>HOL.conj"
###               ("\<^const>HOL.eq"
###                 ("_applC" ("_applC" ("_position" pn_c) ("_position" x))
###                   ("_tuple" ("_position" u) ("_tuple_arg" ("_position" v))))
###                 ("\<^const>Groups.zero_class.zero"))
###               ("\<^const>HOL.conj"
###                 ("\<^const>HOL.eq"
###                   ("_applC" ("_applC" ("_position" pn_c) ("_position" x))
###                     ("_tuple" ("_position" v)
###                       ("_tuple_arg" ("_position" u))))
###                   ("\<^const>Groups.zero_class.zero"))
###                 ("\<^const>Orderings.ord_class.greater" ("_position" c)
###                   ("\<^const>Groups.zero_class.zero"))))
###             ("\<^const>HOL.If"
###               ("\<^const>HOL.disj"
###                 ("\<^const>HOL.eq" ("_position" u) ("_position" v))
###                 ("\<^const>HOL.disj"
###                   ("\<^const>HOL.eq" ("_position" v) ("_position" s))
###                   ("\<^const>HOL.eq" ("_position" u) ("_position" t))))
###               ("_position" None)
###               ("_applC" ("_position" Some)
###                 ("_record_update" ("_position" x)
###                   ("_field_updates"
###                     ("_field_update" ("_constify" pn_c)
###                       ("_applC"
###                         ("_applC" ("_position" pn_c) ("_position" x))
###                         ("\<^const>Ref.update"
###                           ("_tuple" ("_position" u)
###                             ("_tuple_arg" ("_position" v)))
###                           ("_position" c))))
###                     ("_field_updates"
###                       ("_field_update" ("_constify" pn_V)
###                         ("_applC" ("_position" insert)
###                           ("_cargs" ("_position" u)
###                             ("_applC" ("_position" insert)
###                               ("_cargs" ("_position" v)
###                                 ("_applC" ("_position" pn_V)
###                                   ("_position" x)))))))
###                       ("_field_updates"
###                         ("_field_update" ("_constify" pn_succ)
###                           ("_Update"
###                             ("_applC" ("_position" pn_succ) ("_position" x))
###                             ("_updbind" ("_position" u)
###                               ("\<^const>List.list.Cons" ("_position" v)
###                                 ("_applC"
###                                   ("_applC" ("_position" pn_succ)
###                                     ("_position" x))
###                                   ("_position" u))))))
###                         ("_field_updates"
###                           ("_field_update" ("_constify" pn_pred)
###                             ("_applC"
###                               ("_applC" ("_position" pn_pred)
###                                 ("_position" x))
###                               ("\<^const>Ref.update" ("_position" v)
###                                 ("\<^const>List.list.Cons" ("_position" u)
###                                   ("_applC"
###                                     ("_applC" ("_position" pn_pred)
### ("_position" x))
###                                     ("_position" v))))))
###                           ("_field_updates"
###                             ("_field_update" ("_constify" pn_adjmap)
###                               ("_Update"
###                                 ("_applC" ("_position" pn_adjmap)
###                                   ("_position" x))
###                                 ("_updbinds"
###                                   ("_updbind" ("_position" u)
###                                     ("\<^const>List.list.Cons"
### ("_position" v)
### ("_applC" ("_applC" ("_position" pn_adjmap) ("_position" x))
###   ("_position" u))))
###                                   ("_updbind" ("_position" v)
###                                     ("\<^const>List.list.Cons"
### ("_position" u)
### ("_applC" ("_applC" ("_position" pn_adjmap) ("_position" x))
###   ("_position" v)))))))
###                             ("_field_updates"
###                               ("_field_update" ("_constify" pn_s_node)
###                                 ("\<^const>HOL.disj"
###                                   ("_applC" ("_position" pn_s_node)
###                                     ("_position" x))
###                                   ("\<^const>HOL.eq" ("_position" u)
###                                     ("_position" s))))
###                               ("_field_update" ("_constify" pn_t_node)
###                                 ("\<^const>HOL.disj"
###                                   ("_applC" ("_position" pn_t_node)
###                                     ("_position" x))
###                                   ("\<^const>HOL.eq" ("_position" v)
###                                     ("_position" t)))))))))))))
###             ("_position" None)))
###         ("_case1" ("_position" None) ("_position" None))))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("_applC" ("_position" read)
###       ("_cargs"
###         ("\<^const>List.list.Cons"
###           ("_tuple" ("_position" u)
###             ("_tuple_args" ("_position" v) ("_tuple_arg" ("_position" c))))
###           ("_position" es))
###         ("_cargs" ("_position" s) ("_position" t))))
###     ("_case_syntax"
###       ("_applC" ("_position" read)
###         ("_cargs" ("_position" es)
###           ("_cargs" ("_position" s) ("_position" t))))
###       ("_case2"
###         ("_case1" ("_applC" ("_position" Some) ("_position" x))
###           ("\<^const>HOL.If"
###             ("\<^const>HOL.conj"
###               ("\<^const>HOL.eq"
###                 ("_applC" ("_applC" ("_position" pn_c) ("_position" x))
###                   ("_tuple" ("_position" u) ("_tuple_arg" ("_position" v))))
###                 ("\<^const>Groups.zero_class.zero"))
###               ("\<^const>HOL.conj"
###                 ("\<^const>HOL.eq"
###                   ("_applC" ("_applC" ("_position" pn_c) ("_position" x))
###                     ("_tuple" ("_position" v)
###                       ("_tuple_arg" ("_position" u))))
###                   ("\<^const>Groups.zero_class.zero"))
###                 ("\<^const>Orderings.ord_class.greater" ("_position" c)
###                   ("\<^const>Groups.zero_class.zero"))))
###             ("\<^const>HOL.If"
###               ("\<^const>HOL.disj"
###                 ("\<^const>HOL.eq" ("_position" u) ("_position" v))
###                 ("\<^const>HOL.disj"
###                   ("\<^const>HOL.eq" ("_position" v) ("_position" s))
###                   ("\<^const>HOL.eq" ("_position" u) ("_position" t))))
###               ("_position" None)
###               ("_applC" ("_position" Some)
###                 ("_record_update" ("_position" x)
###                   ("_field_updates"
###                     ("_field_update" ("_constify" pn_c)
###                       ("_Update"
###                         ("_applC" ("_position" pn_c) ("_position" x))
###                         ("_updbind"
###                           ("_tuple" ("_position" u)
###                             ("_tuple_arg" ("_position" v)))
###                           ("_position" c))))
###                     ("_field_updates"
###                       ("_field_update" ("_constify" pn_V)
###                         ("_applC" ("_position" insert)
###                           ("_cargs" ("_position" u)
###                             ("_applC" ("_position" insert)
###                               ("_cargs" ("_position" v)
###                                 ("_applC" ("_position" pn_V)
###                                   ("_position" x)))))))
###                       ("_field_updates"
###                         ("_field_update" ("_constify" pn_succ)
###                           ("_applC"
###                             ("_applC" ("_position" pn_succ) ("_position" x))
###                             ("\<^const>Ref.update" ("_position" u)
###                               ("\<^const>List.list.Cons" ("_position" v)
###                                 ("_applC"
###                                   ("_applC" ("_position" pn_succ)
###                                     ("_position" x))
###                                   ("_position" u))))))
###                         ("_field_updates"
###                           ("_field_update" ("_constify" pn_pred)
###                             ("_applC"
###                               ("_applC" ("_position" pn_pred)
###                                 ("_position" x))
###                               ("\<^const>Ref.update" ("_position" v)
###                                 ("\<^const>List.list.Cons" ("_position" u)
###                                   ("_applC"
###                                     ("_applC" ("_position" pn_pred)
### ("_position" x))
###                                     ("_position" v))))))
###                           ("_field_updates"
###                             ("_field_update" ("_constify" pn_adjmap)
###                               ("_Update"
###                                 ("_applC" ("_position" pn_adjmap)
###                                   ("_position" x))
###                                 ("_updbinds"
###                                   ("_updbind" ("_position" u)
###                                     ("\<^const>List.list.Cons"
### ("_position" v)
### ("_applC" ("_applC" ("_position" pn_adjmap) ("_position" x))
###   ("_position" u))))
###                                   ("_updbind" ("_position" v)
###                                     ("\<^const>List.list.Cons"
### ("_position" u)
### ("_applC" ("_applC" ("_position" pn_adjmap) ("_position" x))
###   ("_position" v)))))))
###                             ("_field_updates"
###                               ("_field_update" ("_constify" pn_s_node)
###                                 ("\<^const>HOL.disj"
###                                   ("_applC" ("_position" pn_s_node)
###                                     ("_position" x))
###                                   ("\<^const>HOL.eq" ("_position" u)
###                                     ("_position" s))))
###                               ("_field_update" ("_constify" pn_t_node)
###                                 ("\<^const>HOL.disj"
###                                   ("_applC" ("_position" pn_t_node)
###                                     ("_position" x))
###                                   ("\<^const>HOL.eq" ("_position" v)
###                                     ("_position" t)))))))))))))
###             ("_position" None)))
###         ("_case1" ("_position" None) ("_position" None))))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("_applC" ("_position" read)
###       ("_cargs"
###         ("\<^const>List.list.Cons"
###           ("_tuple" ("_position" u)
###             ("_tuple_args" ("_position" v) ("_tuple_arg" ("_position" c))))
###           ("_position" es))
###         ("_cargs" ("_position" s) ("_position" t))))
###     ("_case_syntax"
###       ("_applC" ("_position" read)
###         ("_cargs" ("_position" es)
###           ("_cargs" ("_position" s) ("_position" t))))
###       ("_case2"
###         ("_case1" ("_applC" ("_position" Some) ("_position" x))
###           ("\<^const>HOL.If"
###             ("\<^const>HOL.conj"
###               ("\<^const>HOL.eq"
###                 ("_applC" ("_applC" ("_position" pn_c) ("_position" x))
###                   ("_tuple" ("_position" u) ("_tuple_arg" ("_position" v))))
###                 ("\<^const>Groups.zero_class.zero"))
###               ("\<^const>HOL.conj"
###                 ("\<^const>HOL.eq"
###                   ("_applC" ("_applC" ("_position" pn_c) ("_position" x))
###                     ("_tuple" ("_position" v)
###                       ("_tuple_arg" ("_position" u))))
###                   ("\<^const>Groups.zero_class.zero"))
###                 ("\<^const>Orderings.ord_class.greater" ("_position" c)
###                   ("\<^const>Groups.zero_class.zero"))))
###             ("\<^const>HOL.If"
###               ("\<^const>HOL.disj"
###                 ("\<^const>HOL.eq" ("_position" u) ("_position" v))
###                 ("\<^const>HOL.disj"
###                   ("\<^const>HOL.eq" ("_position" v) ("_position" s))
###                   ("\<^const>HOL.eq" ("_position" u) ("_position" t))))
###               ("_position" None)
###               ("_applC" ("_position" Some)
###                 ("_record_update" ("_position" x)
###                   ("_field_updates"
###                     ("_field_update" ("_constify" pn_c)
###                       ("_applC"
###                         ("_applC" ("_position" pn_c) ("_position" x))
###                         ("\<^const>Ref.update"
###                           ("_tuple" ("_position" u)
###                             ("_tuple_arg" ("_position" v)))
###                           ("_position" c))))
###                     ("_field_updates"
###                       ("_field_update" ("_constify" pn_V)
###                         ("_applC" ("_position" insert)
###                           ("_cargs" ("_position" u)
###                             ("_applC" ("_position" insert)
###                               ("_cargs" ("_position" v)
###                                 ("_applC" ("_position" pn_V)
###                                   ("_position" x)))))))
###                       ("_field_updates"
###                         ("_field_update" ("_constify" pn_succ)
###                           ("_applC"
###                             ("_applC" ("_position" pn_succ) ("_position" x))
###                             ("\<^const>Ref.update" ("_position" u)
###                               ("\<^const>List.list.Cons" ("_position" v)
###                                 ("_applC"
###                                   ("_applC" ("_position" pn_succ)
###                                     ("_position" x))
###                                   ("_position" u))))))
###                         ("_field_updates"
###                           ("_field_update" ("_constify" pn_pred)
###                             ("_applC"
###                               ("_applC" ("_position" pn_pred)
###                                 ("_position" x))
###                               ("\<^const>Ref.update" ("_position" v)
###                                 ("\<^const>List.list.Cons" ("_position" u)
###                                   ("_applC"
###                                     ("_applC" ("_position" pn_pred)
### ("_position" x))
###                                     ("_position" v))))))
###                           ("_field_updates"
###                             ("_field_update" ("_constify" pn_adjmap)
###                               ("_Update"
###                                 ("_applC" ("_position" pn_adjmap)
###                                   ("_position" x))
###                                 ("_updbinds"
###                                   ("_updbind" ("_position" u)
###                                     ("\<^const>List.list.Cons"
### ("_position" v)
### ("_applC" ("_applC" ("_position" pn_adjmap) ("_position" x))
###   ("_position" u))))
###                                   ("_updbind" ("_position" v)
###                                     ("\<^const>List.list.Cons"
### ("_position" u)
### ("_applC" ("_applC" ("_position" pn_adjmap) ("_position" x))
###   ("_position" v)))))))
###                             ("_field_updates"
###                               ("_field_update" ("_constify" pn_s_node)
###                                 ("\<^const>HOL.disj"
###                                   ("_applC" ("_position" pn_s_node)
###                                     ("_position" x))
###                                   ("\<^const>HOL.eq" ("_position" u)
###                                     ("_position" s))))
###                               ("_field_update" ("_constify" pn_t_node)
###                                 ("\<^const>HOL.disj"
###                                   ("_applC" ("_position" pn_t_node)
###                                     ("_position" x))
###                                   ("\<^const>HOL.eq" ("_position" v)
###                                     ("_position" t)))))))))))))
###             ("_position" None)))
###         ("_case1" ("_position" None) ("_position" None))))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("_applC" ("_position" read)
###       ("_cargs"
###         ("\<^const>List.list.Cons"
###           ("_tuple" ("_position" u)
###             ("_tuple_args" ("_position" v) ("_tuple_arg" ("_position" c))))
###           ("_position" es))
###         ("_cargs" ("_position" s) ("_position" t))))
###     ("_case_syntax"
###       ("_applC" ("_position" read)
###         ("_cargs" ("_position" es)
###           ("_cargs" ("_position" s) ("_position" t))))
###       ("_case2"
###         ("_case1" ("_applC" ("_position" Some) ("_position" x))
###           ("\<^const>HOL.If"
###             ("\<^const>HOL.conj"
###               ("\<^const>HOL.eq"
###                 ("_applC" ("_applC" ("_position" pn_c) ("_position" x))
###                   ("_tuple" ("_position" u) ("_tuple_arg" ("_position" v))))
###                 ("\<^const>Groups.zero_class.zero"))
###               ("\<^const>HOL.conj"
###                 ("\<^const>HOL.eq"
###                   ("_applC" ("_applC" ("_position" pn_c) ("_position" x))
###                     ("_tuple" ("_position" v)
###                       ("_tuple_arg" ("_position" u))))
###                   ("\<^const>Groups.zero_class.zero"))
###                 ("\<^const>Orderings.ord_class.greater" ("_position" c)
###                   ("\<^const>Groups.zero_class.zero"))))
###             ("\<^const>HOL.If"
###               ("\<^const>HOL.disj"
###                 ("\<^const>HOL.eq" ("_position" u) ("_position" v))
###                 ("\<^const>HOL.disj"
###                   ("\<^const>HOL.eq" ("_position" v) ("_position" s))
###                   ("\<^const>HOL.eq" ("_position" u) ("_position" t))))
###               ("_position" None)
###               ("_applC" ("_position" Some)
###                 ("_record_update" ("_position" x)
###                   ("_field_updates"
###                     ("_field_update" ("_constify" pn_c)
###                       ("_Update"
###                         ("_applC" ("_position" pn_c) ("_position" x))
###                         ("_updbind"
###                           ("_tuple" ("_position" u)
###                             ("_tuple_arg" ("_position" v)))
###                           ("_position" c))))
###                     ("_field_updates"
###                       ("_field_update" ("_constify" pn_V)
###                         ("_applC" ("_position" insert)
###                           ("_cargs" ("_position" u)
###                             ("_applC" ("_position" insert)
###                               ("_cargs" ("_position" v)
###                                 ("_applC" ("_position" pn_V)
###                                   ("_position" x)))))))
###                       ("_field_updates"
###                         ("_field_update" ("_constify" pn_succ)
###                           ("_Update"
###                             ("_applC" ("_position" pn_succ) ("_position" x))
###                             ("_updbind" ("_position" u)
###                               ("\<^const>List.list.Cons" ("_position" v)
###                                 ("_applC"
###                                   ("_applC" ("_position" pn_succ)
###                                     ("_position" x))
###                                   ("_position" u))))))
###                         ("_field_updates"
###                           ("_field_update" ("_constify" pn_pred)
###                             ("_Update"
###                               ("_applC" ("_position" pn_pred)
###                                 ("_position" x))
###                               ("_updbind" ("_position" v)
###                                 ("\<^const>List.list.Cons" ("_position" u)
###                                   ("_applC"
###                                     ("_applC" ("_position" pn_pred)
### ("_position" x))
###                                     ("_position" v))))))
###                           ("_field_updates"
###                             ("_field_update" ("_constify" pn_adjmap)
###                               ("_applC"
###                                 ("_applC" ("_position" pn_adjmap)
###                                   ("_position" x))
###                                 ("_tuple"
###                                   ("\<^const>Ref.update" ("_position" u)
###                                     ("\<^const>List.list.Cons"
### ("_position" v)
### ("_applC" ("_applC" ("_position" pn_adjmap) ("_position" x))
###   ("_position" u))))
###                                   ("_tuple_arg"
###                                     ("\<^const>Ref.update" ("_position" v)
### ("\<^const>List.list.Cons" ("_position" u)
###   ("_applC" ("_applC" ("_position" pn_adjmap) ("_position" x))
###     ("_position" v))))))))
###                             ("_field_updates"
###                               ("_field_update" ("_constify" pn_s_node)
###                                 ("\<^const>HOL.disj"
###                                   ("_applC" ("_position" pn_s_node)
###                                     ("_position" x))
###                                   ("\<^const>HOL.eq" ("_position" u)
###                                     ("_position" s))))
###                               ("_field_update" ("_constify" pn_t_node)
###                                 ("\<^const>HOL.disj"
###                                   ("_applC" ("_position" pn_t_node)
###                                     ("_position" x))
###                                   ("\<^const>HOL.eq" ("_position" v)
###                                     ("_position" t)))))))))))))
###             ("_position" None)))
###         ("_case1" ("_position" None) ("_position" None))))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("_applC" ("_position" read)
###       ("_cargs"
###         ("\<^const>List.list.Cons"
###           ("_tuple" ("_position" u)
###             ("_tuple_args" ("_position" v) ("_tuple_arg" ("_position" c))))
###           ("_position" es))
###         ("_cargs" ("_position" s) ("_position" t))))
###     ("_case_syntax"
###       ("_applC" ("_position" read)
###         ("_cargs" ("_position" es)
###           ("_cargs" ("_position" s) ("_position" t))))
###       ("_case2"
###         ("_case1" ("_applC" ("_position" Some) ("_position" x))
###           ("\<^const>HOL.If"
###             ("\<^const>HOL.conj"
###               ("\<^const>HOL.eq"
###                 ("_applC" ("_applC" ("_position" pn_c) ("_position" x))
###                   ("_tuple" ("_position" u) ("_tuple_arg" ("_position" v))))
###                 ("\<^const>Groups.zero_class.zero"))
###               ("\<^const>HOL.conj"
###                 ("\<^const>HOL.eq"
###                   ("_applC" ("_applC" ("_position" pn_c) ("_position" x))
###                     ("_tuple" ("_position" v)
###                       ("_tuple_arg" ("_position" u))))
###                   ("\<^const>Groups.zero_class.zero"))
###                 ("\<^const>Orderings.ord_class.greater" ("_position" c)
###                   ("\<^const>Groups.zero_class.zero"))))
###             ("\<^const>HOL.If"
###               ("\<^const>HOL.disj"
###                 ("\<^const>HOL.eq" ("_position" u) ("_position" v))
###                 ("\<^const>HOL.disj"
###                   ("\<^const>HOL.eq" ("_position" v) ("_position" s))
###                   ("\<^const>HOL.eq" ("_position" u) ("_position" t))))
###               ("_position" None)
###               ("_applC" ("_position" Some)
###                 ("_record_update" ("_position" x)
###                   ("_field_updates"
###                     ("_field_update" ("_constify" pn_c)
###                       ("_applC"
###                         ("_applC" ("_position" pn_c) ("_position" x))
###                         ("\<^const>Ref.update"
###                           ("_tuple" ("_position" u)
###                             ("_tuple_arg" ("_position" v)))
###                           ("_position" c))))
###                     ("_field_updates"
###                       ("_field_update" ("_constify" pn_V)
###                         ("_applC" ("_position" insert)
###                           ("_cargs" ("_position" u)
###                             ("_applC" ("_position" insert)
###                               ("_cargs" ("_position" v)
###                                 ("_applC" ("_position" pn_V)
###                                   ("_position" x)))))))
###                       ("_field_updates"
###                         ("_field_update" ("_constify" pn_succ)
###                           ("_Update"
###                             ("_applC" ("_position" pn_succ) ("_position" x))
###                             ("_updbind" ("_position" u)
###                               ("\<^const>List.list.Cons" ("_position" v)
###                                 ("_applC"
###                                   ("_applC" ("_position" pn_succ)
###                                     ("_position" x))
###                                   ("_position" u))))))
###                         ("_field_updates"
###                           ("_field_update" ("_constify" pn_pred)
###                             ("_Update"
###                               ("_applC" ("_position" pn_pred)
###                                 ("_position" x))
###                               ("_updbind" ("_position" v)
###                                 ("\<^const>List.list.Cons" ("_position" u)
###                                   ("_applC"
###                                     ("_applC" ("_position" pn_pred)
### ("_position" x))
###                                     ("_position" v))))))
###                           ("_field_updates"
###                             ("_field_update" ("_constify" pn_adjmap)
###                               ("_applC"
###                                 ("_applC" ("_position" pn_adjmap)
###                                   ("_position" x))
###                                 ("_tuple"
###                                   ("\<^const>Ref.update" ("_position" u)
###                                     ("\<^const>List.list.Cons"
### ("_position" v)
### ("_applC" ("_applC" ("_position" pn_adjmap) ("_position" x))
###   ("_position" u))))
###                                   ("_tuple_arg"
###                                     ("\<^const>Ref.update" ("_position" v)
### ("\<^const>List.list.Cons" ("_position" u)
###   ("_applC" ("_applC" ("_position" pn_adjmap) ("_position" x))
###     ("_position" v))))))))
###                             ("_field_updates"
###                               ("_field_update" ("_constify" pn_s_node)
###                                 ("\<^const>HOL.disj"
###                                   ("_applC" ("_position" pn_s_node)
###                                     ("_position" x))
###                                   ("\<^const>HOL.eq" ("_position" u)
###                                     ("_position" s))))
###                               ("_field_update" ("_constify" pn_t_node)
###                                 ("\<^const>HOL.disj"
###                                   ("_applC" ("_position" pn_t_node)
###                                     ("_position" x))
###                                   ("\<^const>HOL.eq" ("_position" v)
###                                     ("_position" t)))))))))))))
###             ("_position" None)))
###         ("_case1" ("_position" None) ("_position" None))))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
Found termination order:
  "(%p. size_list (%p. (nat o abs) (snd (snd p))) (fst p)) <*mlex*> {}"
Found termination order:
  "(%p. size_list (%p. size (fst (snd p))) (fst p)) <*mlex*> {}"
### theory "Draft.NetCheck"
### 5.191s elapsed time, 6.182s cpu time, 1.374s GC time
*** Failed to load theory "Draft.NetCheckTemplates" (unresolved "Draft.NetCheck")
*** exception Protocol_Message
***   [("function", "invoke_scala"), ("name", "make_directory"), ("id", "256")] raised (line 124 of "General/output.ML")
*** At command "export_code" (line 708 of "$AFP/Flow_Networks/NetCheck.thy")
Exception- TOPLEVEL_ERROR raised
