Loading theory "Draft.Graph" (required by "Draft.Network_ImplTemplates" via "Draft.Network_Impl" via "Draft.Ford_Fulkerson" via "Draft.Augmenting_Flow" via "Draft.Residual_Graph" via "Draft.Network")
Loading theory "HOL-Library.Stream" (required by "Draft.Network_ImplTemplates" via "Draft.ExtrEqs")
Loading theory "HOL-Library.Set_Algebras" (required by "Draft.Network_ImplTemplates" via "Draft.ExtrEqs" via "HOL-Library.BigO")
Loading theory "HOL-Library.Function_Algebras" (required by "Draft.Network_ImplTemplates" via "Draft.ExtrEqs" via "HOL-Library.BigO")
instantiation
  fun :: (type, plus) plus
  plus_fun == plus :: ('a => 'b) => ('a => 'b) => 'a => 'b
instantiation
  set :: (plus) plus
  plus_set == plus :: 'a set => 'a set => 'a set
instantiation
  fun :: (type, zero) zero
  zero_fun == zero_class.zero :: 'a => 'b
instantiation
  fun :: (type, times) times
  times_fun == times :: ('a => 'b) => ('a => 'b) => 'a => 'b
instantiation
  set :: (times) times
  times_set == times :: 'a set => 'a set => 'a set
instantiation
  fun :: (type, one) one
  one_fun == one_class.one :: 'a => 'b
locale Graph
  fixes c :: "nat * nat => 'capacity"
instantiation
  set :: (zero) zero
  zero_set == zero_class.zero :: 'a set
instantiation
  set :: (one) one
  one_set == one_class.one :: 'a set
### theory "HOL-Library.Function_Algebras"
### 0.150s elapsed time, 0.595s cpu time, 0.065s GC time
Loading theory "HOL-Library.Tree" (required by "Draft.Network_ImplTemplates" via "Draft.ExtrEqs" via "Draft.Templates")
locale Finite_Graph
  fixes c :: "nat * nat => 'a"
  assumes "Finite_Graph c"
locale Graph
  fixes c :: "nat * nat => 'capacity"
Found termination order:
  "(%p. size_list (%p. size (snd p)) (fst (snd p))) <*mlex*> {}"
### theory "HOL-Library.Set_Algebras"
### 0.273s elapsed time, 1.078s cpu time, 0.065s GC time
Loading theory "HOL-Library.BigO" (required by "Draft.Network_ImplTemplates" via "Draft.ExtrEqs")
Found termination order:
  "(%p. size_list (%p. size (snd p)) (snd p)) <*mlex*> {}"
locale Graph
  fixes c :: "nat * nat => 'capacity"
consts
  shift :: "'a list => 'a stream => 'a stream"
Proofs for coinductive predicate(s) "streamsp"
  Proving monotonicity ...
consts
  snth :: "'a stream => nat => 'a"
consts
  stake :: "nat => 'a stream => 'a list"
consts
  sdrop :: "nat => 'a stream => 'a stream"
consts
  sfilter :: "('a => bool) => 'a stream => 'a stream"
consts
  cycle :: "'a list => 'a stream"
consts
  left :: "'a tree => 'a tree"
consts
  right :: "'a tree => 'a tree"
consts
  siterate :: "('a => 'a) => 'a => 'a stream"
Found termination order: "size <*mlex*> {}"
consts
  flat :: "'a list stream => 'a stream"
Found termination order: "size <*mlex*> {}"
consts
  sinterleave :: "'a stream => 'a stream => 'a stream"
consts
  szip :: "'a stream => 'b stream => ('a * 'b) stream"
consts
  smap2 :: "('a => 'b => 'c) => 'a stream => 'b stream => 'c stream"
Found termination order: "size <*mlex*> {}"
### theory "HOL-Library.Stream"
### 0.898s elapsed time, 3.472s cpu time, 0.395s GC time
Loading theory "Draft.Fofu_Abs_Base" (required by "Draft.Network_ImplTemplates" via "Draft.Network_Impl" via "Draft.Refine_Add_Fofu" via "Draft.Fofu_Impl_Base")
class height = type +
  fixes height :: "'a => nat"
instantiation
  tree :: (type) height
  height_tree == height :: 'a tree => nat
Found termination order: "size <*mlex*> {}"
Found termination order: "size <*mlex*> {}"
Found termination order: "size <*mlex*> {}"
### theory "HOL-Library.BigO"
### 0.998s elapsed time, 3.778s cpu time, 0.762s GC time
Found termination order: "size <*mlex*> {}"
locale Finite_Graph
  fixes c :: "nat * nat => 'a"
  assumes "Finite_Graph c"
### theory "Draft.Graph"
### 1.365s elapsed time, 5.143s cpu time, 0.944s GC time
Loading theory "Draft.Network" (required by "Draft.Network_ImplTemplates" via "Draft.Network_Impl" via "Draft.Ford_Fulkerson" via "Draft.Augmenting_Flow" via "Draft.Residual_Graph")
Found termination order: "size <*mlex*> {}"
locale Preflow
  fixes c :: "nat * nat => 'capacity"
    and s :: "nat"
    and t :: "nat"
    and f :: "nat * nat => 'capacity"
  assumes "Preflow c s t f"
Found termination order: "size <*mlex*> {}"
locale Flow
  fixes c :: "nat * nat => 'capacity"
    and s :: "nat"
    and t :: "nat"
    and f :: "nat * nat => 'capacity"
  assumes "Flow c s t f"
Found termination order: "size <*mlex*> {}"
locale Finite_Preflow
  fixes c :: "nat * nat => 'capacity"
    and s :: "nat"
    and t :: "nat"
    and f :: "nat * nat => 'capacity"
  assumes "Finite_Preflow c s t f"
Found termination order: "(%p. size (fst p)) <*mlex*> {}"
locale Finite_Flow
  fixes c :: "nat * nat => 'capacity"
    and s :: "nat"
    and t :: "nat"
    and f :: "nat * nat => 'capacity"
  assumes "Finite_Flow c s t f"
Found termination order: "size <*mlex*> {}"
locale Cut
  fixes c :: "nat * nat => 'a"
    and k :: "nat set"
  assumes "Cut c k"
locale Network
  fixes c :: "nat * nat => 'capacity"
    and s :: "nat"
    and t :: "nat"
  assumes "Network c s t"
Found termination order: "(%p. size (snd p)) <*mlex*> {}"
locale NPreflow
  fixes c :: "nat * nat => 'capacity"
    and s :: "nat"
    and t :: "nat"
    and f :: "nat * nat => 'capacity"
  assumes "NPreflow c s t f"
locale NFlow
  fixes c :: "nat * nat => 'capacity"
    and s :: "nat"
    and t :: "nat"
    and f :: "nat * nat => 'capacity"
  assumes "NFlow c s t f"
locale NCut
  fixes c :: "nat * nat => 'capacity"
    and s :: "nat"
    and t :: "nat"
    and k :: "nat set"
  assumes "NCut c s t k"
### theory "Draft.Fofu_Abs_Base"
### 1.104s elapsed time, 3.592s cpu time, 0.805s GC time
Loading theory "Draft.Fofu_Impl_Base" (required by "Draft.Network_ImplTemplates" via "Draft.Network_Impl" via "Draft.Refine_Add_Fofu")
locale Preflow
  fixes c :: "nat * nat => 'capacity"
    and s :: "nat"
    and t :: "nat"
    and f :: "nat * nat => 'capacity"
  assumes "Preflow c s t f"
Found termination order: "size <*mlex*> {}"
locale Flow
  fixes c :: "nat * nat => 'capacity"
    and s :: "nat"
    and t :: "nat"
    and f :: "nat * nat => 'capacity"
  assumes "Flow c s t f"
locale Finite_Preflow
  fixes c :: "nat * nat => 'capacity"
    and s :: "nat"
    and t :: "nat"
    and f :: "nat * nat => 'capacity"
  assumes "Finite_Preflow c s t f"
locale Network
  fixes c :: "nat * nat => 'capacity"
    and s :: "nat"
    and t :: "nat"
  assumes "Network c s t"
locale NPreflow
  fixes c :: "nat * nat => 'capacity"
    and s :: "nat"
    and t :: "nat"
    and f :: "nat * nat => 'capacity"
  assumes "NPreflow c s t f"
### theory "HOL-Library.Tree"
### 2.065s elapsed time, 7.119s cpu time, 1.207s GC time
Loading theory "Draft.Templates" (required by "Draft.Network_ImplTemplates" via "Draft.ExtrEqs")
locale NFlow
  fixes c :: "nat * nat => 'capacity"
    and s :: "nat"
    and t :: "nat"
    and f :: "nat * nat => 'capacity"
  assumes "NFlow c s t f"
### theory "Draft.Network"
### 0.823s elapsed time, 2.459s cpu time, 0.244s GC time
Loading theory "Draft.Residual_Graph" (required by "Draft.Network_ImplTemplates" via "Draft.Network_Impl" via "Draft.Ford_Fulkerson" via "Draft.Augmenting_Flow")
datatype template_term
=
     t_empty
   | template_app of template_term * template_term
   | template_hole of int
   | template_var of int
datatype sign
= equals | greater_equals | greater_than | less_equals | less_than
datatype template
=
     template_bimplication of template * template
   | template_dunno
   | template_equation of template_term * template_term
   | template_implication of template list * template
   | template_inequation of sign * template_term * template_term
   | template_negation of template
   | template_predicate of template_term
constructor t_empty: template_term
constructor template_app: template_term * template_term -> template_term
constructor template_hole: int -> template_term
constructor template_var: int -> template_term
constructor equals: sign
constructor greater_equals: sign
constructor greater_than: sign
constructor less_equals: sign
constructor less_than: sign
constructor template_bimplication: template * template -> template
constructor template_dunno: template
constructor template_equation: template_term * template_term -> template
constructor template_implication: template list * template -> template
constructor template_inequation:
   sign * template_term * template_term -> template
constructor template_negation: template -> template
constructor template_predicate: template_term -> template
val vfs = fn: term -> (indexname * typ) list * (string * typ) list
val indexOf = fn: ''a list -> ''a -> int -> int
val has_eq = fn: term -> bool
val term2template = fn:
   (indexname * typ) list -> (string * typ) list -> term -> template_term
val lemma2predicate = fn: term -> term -> template
val makeTemplatewithContext = fn: term -> term -> template
val lemma2template = fn: term -> template
val thm2template = fn: thm -> template
val tterm2string = fn: template_term -> string
val template2string = fn: template -> string
val t = "height ?t <= size ?t": thm
val th =
   Const ("HOL.Trueprop", "bool => prop") $
     (Const ("Orderings.ord_class.less_eq", "nat => nat => bool") $
       (Const ("Tree.height_class.height", "?'a tree => nat") $
         Var (("t", 0), "?'a tree")) $
       (Const ("Nat.size_class.size", "?'a tree => nat") $
         Var (("t", 0), "?'a tree"))):
   term
### theory "Draft.Templates"
### 0.271s elapsed time, 0.919s cpu time, 0.742s GC time
Loading theory "Draft.ExtrEqs" (required by "Draft.Network_ImplTemplates")
locale Network
  fixes c :: "nat * nat => 'capacity"
    and s :: "nat"
    and t :: "nat"
  assumes "Network c s t"
locale NPreflow
  fixes c :: "nat * nat => 'capacity"
    and s :: "nat"
    and t :: "nat"
    and f :: "nat * nat => 'capacity"
  assumes "NPreflow c s t f"
locale RPreGraph
  fixes c :: "nat * nat => 'a"
    and s :: "nat"
    and t :: "nat"
    and cf :: "nat * nat => 'a"
  assumes "RPreGraph c s t cf"
val eqpattern =
   Pattern
    (
       Const ("HOL.Trueprop", "bool => prop") $
         (Const ("HOL.eq", "?'a => ?'a => bool") $
           Var (("_dummy_", 1), "?'a") $ Var (("_dummy_", 2), "?'a"))
       ):
   term Find_Theorems.criterion
val badeqpattern = Pattern (Const ("Pure.eq", "?'a => ?'a => prop")):
   term Find_Theorems.criterion
val undefpattern =
   Pattern
    (
       Const ("HOL.Trueprop", "bool => prop") $
         (Const ("HOL.eq", "?'a => ?'a => bool") $
           Var (("_dummy_", 1), "?'a") $ Const ("HOL.undefined", "?'a"))
       ):
   term Find_Theorems.criterion
val thmpattern =
   Pattern
    (Const ("HOL.Trueprop", "bool => prop") $ Var (("_dummy_", 1), "bool")):
   term Find_Theorems.criterion
val badnames =
   ["*nitpick*", "*Nitpick*", "*full_exhaustive*", "*_def*", "Enum.finite*",
    "*Quickcheck*", "ATP*", "*Nunchaku*", "*Code*", "*BNF*", "*SMT*",
    "*.*.*"]:
   string list
val unwanted_names =
   [(false, Name "*nitpick*"), (false, Name "*Nitpick*"),
    (false, Name "*full_exhaustive*"), (false, Name "*_def*"),
    (false, Name "Enum.finite*"), (false, Name "*Quickcheck*"),
    (false, Name "ATP*"), (false, Name "*Nunchaku*"),
    (false, Name "*Code*"), (false, Name "*BNF*"), (false, Name "*SMT*"),
    (false, Name "*.*.*")]:
   (bool * term Find_Theorems.criterion) list
val has_vars = fn: term -> bool
val get_all_eqs = fn: string -> Proof.context -> (string * thm) list
val get_all_thms = fn: string -> Proof.context -> (string * thm) list
val get_noneq_thms = fn: string -> Proof.context -> (string * thm) list
val template_eqs = fn:
   string -> Proof.context -> (string * thm * template) list
val template_thms = fn:
   string -> Proof.context -> (string * thm * template) list
### theory "Draft.ExtrEqs"
### 0.609s elapsed time, 1.816s cpu time, 0.114s GC time
locale NPreflow
  fixes c :: "nat * nat => 'capacity"
    and s :: "nat"
    and t :: "nat"
    and f :: "nat * nat => 'capacity"
  assumes "NPreflow c s t f"
locale RGraph
  fixes c :: "nat * nat => 'a"
    and s :: "nat"
    and t :: "nat"
    and cf :: "nat * nat => 'a"
  assumes "RGraph c s t cf"
locale NFlow
  fixes c :: "nat * nat => 'capacity"
    and s :: "nat"
    and t :: "nat"
    and f :: "nat * nat => 'capacity"
  assumes "NFlow c s t f"
### theory "Draft.Residual_Graph"
### 1.343s elapsed time, 3.671s cpu time, 0.948s GC time
Loading theory "Draft.Augmenting_Flow" (required by "Draft.Network_ImplTemplates" via "Draft.Network_Impl" via "Draft.Ford_Fulkerson")
Loading theory "Draft.Augmenting_Path" (required by "Draft.Network_ImplTemplates" via "Draft.Network_Impl" via "Draft.Ford_Fulkerson")
locale NPreflow
  fixes c :: "nat * nat => 'capacity"
    and s :: "nat"
    and t :: "nat"
    and f :: "nat * nat => 'capacity"
  assumes "NPreflow c s t f"
locale NFlow
  fixes c :: "nat * nat => 'capacity"
    and s :: "nat"
    and t :: "nat"
    and f :: "nat * nat => 'capacity"
  assumes "NFlow c s t f"
### theory "Draft.Augmenting_Path"
### 0.142s elapsed time, 0.429s cpu time, 0.000s GC time
### theory "Draft.Augmenting_Flow"
### 0.161s elapsed time, 0.462s cpu time, 0.000s GC time
Loading theory "Draft.Ford_Fulkerson" (required by "Draft.Network_ImplTemplates" via "Draft.Network_Impl")
locale NFlowCut
  fixes c :: "nat * nat => 'capacity"
    and s :: "nat"
    and t :: "nat"
    and f :: "nat * nat => 'capacity"
    and k :: "nat set"
  assumes "NFlowCut c s t f k"
locale NFlow
  fixes c :: "nat * nat => 'capacity"
    and s :: "nat"
    and t :: "nat"
    and f :: "nat * nat => 'capacity"
  assumes "NFlow c s t f"
### theory "Draft.Ford_Fulkerson"
### 0.380s elapsed time, 0.774s cpu time, 0.050s GC time
### theory "Draft.Fofu_Impl_Base"
### 2.464s elapsed time, 6.070s cpu time, 1.138s GC time
Loading theory "Draft.Refine_Add_Fofu" (required by "Draft.Network_ImplTemplates" via "Draft.Network_Impl")
### theory "Draft.Refine_Add_Fofu"
### 0.273s elapsed time, 0.273s cpu time, 0.000s GC time
Loading theory "Draft.Network_Impl" (required by "Draft.Network_ImplTemplates")
locale Network_Impl
  fixes c :: "nat * nat => int"
    and s :: "nat"
    and t :: "nat"
    and N :: "nat"
  assumes "Network_Impl c s t N"
locale Network_Impl
  fixes c :: "nat * nat => int"
    and s :: "nat"
    and t :: "nat"
    and N :: "nat"
  assumes "Network_Impl c s t N"
### Ambiguous input (line 32 of "$AFP/Flow_Networks/Network_Impl.thy") produces 2 parse trees:
### ("\<^const>Pure.eq"
###   ("_applC" ("_position" cf_get)
###     ("_cargs" ("_position" cf) ("_position" e)))
###   ("_do_block"
###     ("_do_cons"
###       ("_do_then"
###         ("_applC" ("\<^const>Refine_Basic.ASSERT")
###           ("\<^const>Set.member" ("_position" e)
###             ("\<^const>Set.union" ("_position" E)
###               ("\<^const>Relation.converse" ("_position" E))))))
###       ("_do_final"
###         ("_applC" ("\<^const>Refine_Basic.RETURN")
###           ("_applC" ("_position" cf) ("_position" e)))))))
### ("\<^const>Pure.eq"
###   ("_applC" ("_position" cf_get)
###     ("_cargs" ("_position" cf) ("_position" e)))
###   ("_do_block"
###     ("_do_cons"
###       ("_do_then"
###         ("_applC" ("\<^const>Refine_Basic.ASSERT")
###           ("\<^const>Set.member" ("_position" e)
###             ("\<^const>Set.union" ("_position" E)
###               ("\<^const>Relation.converse" ("_position" E))))))
###       ("_do_final"
###         ("_applC" ("\<^const>Heap_Monad.return")
###           ("_applC" ("_position" cf) ("_position" e)))))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 39 of "$AFP/Flow_Networks/Network_Impl.thy") produces 4 parse trees:
### ("\<^const>Pure.eq"
###   ("_applC" ("_position" cf_set)
###     ("_cargs" ("_position" cf) ("_cargs" ("_position" e) ("_position" x))))
###   ("_do_block"
###     ("_do_cons"
###       ("_do_then"
###         ("_applC" ("\<^const>Refine_Basic.ASSERT")
###           ("\<^const>Set.member" ("_position" e)
###             ("\<^const>Set.union" ("_position" E)
###               ("\<^const>Relation.converse" ("_position" E))))))
###       ("_do_final"
###         ("_applC" ("\<^const>Refine_Basic.RETURN")
###           ("_Update" ("_position" cf)
###             ("_updbind" ("_position" e) ("_position" x))))))))
### ("\<^const>Pure.eq"
###   ("_applC" ("_position" cf_set)
###     ("_cargs" ("_position" cf) ("_cargs" ("_position" e) ("_position" x))))
###   ("_do_block"
###     ("_do_cons"
###       ("_do_then"
###         ("_applC" ("\<^const>Refine_Basic.ASSERT")
###           ("\<^const>Set.member" ("_position" e)
###             ("\<^const>Set.union" ("_position" E)
###               ("\<^const>Relation.converse" ("_position" E))))))
###       ("_do_final"
###         ("_applC" ("\<^const>Heap_Monad.return")
###           ("_Update" ("_position" cf)
###             ("_updbind" ("_position" e) ("_position" x))))))))
### ("\<^const>Pure.eq"
###   ("_applC" ("_position" cf_set)
###     ("_cargs" ("_position" cf) ("_cargs" ("_position" e) ("_position" x))))
###   ("_do_block"
###     ("_do_cons"
###       ("_do_then"
###         ("_applC" ("\<^const>Refine_Basic.ASSERT")
###           ("\<^const>Set.member" ("_position" e)
###             ("\<^const>Set.union" ("_position" E)
###               ("\<^const>Relation.converse" ("_position" E))))))
###       ("_do_final"
###         ("_applC" ("\<^const>Refine_Basic.RETURN")
###           ("_applC" ("_position" cf)
###             ("\<^const>Ref.update" ("_position" e) ("_position" x))))))))
### ("\<^const>Pure.eq"
###   ("_applC" ("_position" cf_set)
###     ("_cargs" ("_position" cf) ("_cargs" ("_position" e) ("_position" x))))
###   ("_do_block"
###     ("_do_cons"
###       ("_do_then"
###         ("_applC" ("\<^const>Refine_Basic.ASSERT")
###           ("\<^const>Set.member" ("_position" e)
###             ("\<^const>Set.union" ("_position" E)
###               ("\<^const>Relation.converse" ("_position" E))))))
###       ("_do_final"
###         ("_applC" ("\<^const>Heap_Monad.return")
###           ("_applC" ("_position" cf)
###             ("\<^const>Ref.update" ("_position" e) ("_position" x))))))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 46 of "$AFP/Flow_Networks/Network_Impl.thy") produces 2 parse trees:
### ("\<^const>Pure.eq" ("_position" cf_init)
###   ("_applC" ("\<^const>Heap_Monad.return")
###     ("_applC" ("_position" op_mtx_new) ("_position" c))))
### ("\<^const>Pure.eq" ("_position" cf_init)
###   ("_applC" ("\<^const>Refine_Basic.RETURN")
###     ("_applC" ("_position" op_mtx_new) ("_position" c))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 51 of "$AFP/Flow_Networks/Network_Impl.thy") produces 2 parse trees:
### ("\<^const>Pure.eq"
###   ("_applC" ("_position" am_get)
###     ("_cargs" ("_position" am) ("_position" u)))
###   ("_do_block"
###     ("_do_cons"
###       ("_do_then"
###         ("_applC" ("\<^const>Refine_Basic.ASSERT")
###           ("\<^const>Set.member" ("_position" u) ("_position" V))))
###       ("_do_final"
###         ("_applC" ("\<^const>Refine_Basic.RETURN")
###           ("_applC" ("_position" am) ("_position" u)))))))
### ("\<^const>Pure.eq"
###   ("_applC" ("_position" am_get)
###     ("_cargs" ("_position" am) ("_position" u)))
###   ("_do_block"
###     ("_do_cons"
###       ("_do_then"
###         ("_applC" ("\<^const>Refine_Basic.ASSERT")
###           ("\<^const>Set.member" ("_position" u) ("_position" V))))
###       ("_do_final"
###         ("_applC" ("\<^const>Heap_Monad.return")
###           ("_applC" ("_position" am) ("_position" u)))))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 62 of "$AFP/Flow_Networks/Network_Impl.thy") produces 2 parse trees:
### ("\<^const>Pure.eq"
###   ("_applC" ("_position" am_is_in_V)
###     ("_cargs" ("_position" am) ("_position" u)))
###   ("_do_block"
###     ("_do_final"
###       ("_applC" ("\<^const>Refine_Basic.RETURN")
###         ("\<^const>HOL.not_equal"
###           ("_applC" ("_position" am) ("_position" u))
###           ("\<^const>List.list.Nil"))))))
### ("\<^const>Pure.eq"
###   ("_applC" ("_position" am_is_in_V)
###     ("_cargs" ("_position" am) ("_position" u)))
###   ("_do_block"
###     ("_do_final"
###       ("_applC" ("\<^const>Heap_Monad.return")
###         ("\<^const>HOL.not_equal"
###           ("_applC" ("_position" am) ("_position" u))
###           ("\<^const>List.list.Nil"))))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
bundle Network_Impl_Sepref_Register
locale Network_Impl
  fixes c :: "nat * nat => int"
    and s :: "nat"
    and t :: "nat"
    and N :: "nat"
  assumes "Network_Impl c s t N"
N ::\<^sub>i TYPE(nat)
s ::\<^sub>i TYPE(nat)
t ::\<^sub>i TYPE(nat)
c ::\<^sub>i TYPE(nat * nat => int)
PR_CONST cf_get ::\<^sub>i TYPE(int i_mtx => nat * nat => int nres)
PR_CONST cf_set ::\<^sub>i
TYPE(int i_mtx => nat * nat => int => int i_mtx nres)
PR_CONST cf_init ::\<^sub>i TYPE(int i_mtx nres)
PR_CONST am_get ::\<^sub>i TYPE((nat => nat list) => nat => nat list nres)
am_is_in_V ::\<^sub>i TYPE((nat => nat list) => nat => bool nres)
### Ambiguous input (line 143 of "$AFP/Flow_Networks/Network_Impl.thy") produces 2 parse trees:
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Orderings.ord_class.less" ("_position" v) ("_position" N)))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Hoare_Triple.hoare_triple"
###       ("_applC" ("_position" is_nf)
###         ("_cargs" ("_position" N)
###           ("_cargs" ("_position" dflt)
###             ("_cargs" ("_position" f) ("_position" a)))))
###       ("_applC" ("_position" Array.upd)
###         ("_cargs" ("_position" v)
###           ("_cargs" ("_position" x) ("_position" a))))
###       ("_applC" ("_position" is_nf)
###         ("_cargs" ("_position" N)
###           ("_cargs" ("_position" dflt)
###             ("_Update" ("_position" f)
###               ("_updbind" ("_position" v) ("_position" x)))))))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Orderings.ord_class.less" ("_position" v) ("_position" N)))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Hoare_Triple.hoare_triple"
###       ("_applC" ("_position" is_nf)
###         ("_cargs" ("_position" N)
###           ("_cargs" ("_position" dflt)
###             ("_cargs" ("_position" f) ("_position" a)))))
###       ("_applC" ("_position" Array.upd)
###         ("_cargs" ("_position" v)
###           ("_cargs" ("_position" x) ("_position" a))))
###       ("_applC" ("_position" is_nf)
###         ("_cargs" ("_position" N)
###           ("_cargs" ("_position" dflt)
###             ("_applC" ("_position" f)
###               ("\<^const>Ref.update" ("_position" v) ("_position" x)))))))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
locale Network_Impl
  fixes c :: "nat * nat => int"
    and s :: "nat"
    and t :: "nat"
    and N :: "nat"
  assumes "Network_Impl c s t N"
### Ambiguous input (line 180 of "$AFP/Flow_Networks/Network_Impl.thy") produces 2 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Set.member"
###     ("_tuple"
###       ("_applC" ("_position" uncurry0)
###         ("_applC" ("\<^const>Heap_Monad.return") ("_position" c)))
###       ("_tuple_arg"
###         ("_applC" ("_position" uncurry0)
###           ("_applC" ("_position" RETURN) ("_position" c)))))
###     ("\<^const>Sepref_Rules.hfreft"
###       ("\<^const>Sepref_Rules.hfkeep" ("_position" unit_assn))
###       ("_applC" ("_position" pure)
###         ("\<^const>Relators.fun_rel_syn"
###           ("\<^const>Relators.prod_rel_syn" ("_position" nat_rel)
###             ("_position" nat_rel))
###           ("_position" Id))))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Set.member"
###     ("_tuple"
###       ("_applC" ("_position" uncurry0)
###         ("_applC" ("\<^const>Refine_Basic.RETURN") ("_position" c)))
###       ("_tuple_arg"
###         ("_applC" ("_position" uncurry0)
###           ("_applC" ("_position" RETURN) ("_position" c)))))
###     ("\<^const>Sepref_Rules.hfreft"
###       ("\<^const>Sepref_Rules.hfkeep" ("_position" unit_assn))
###       ("_applC" ("_position" pure)
###         ("\<^const>Relators.fun_rel_syn"
###           ("\<^const>Relators.prod_rel_syn" ("_position" nat_rel)
###             ("_position" nat_rel))
###           ("_position" Id))))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Cannot skip proof of schematic goal statement
(uncurry (mtx_get N), uncurry (PR_CONST cf_get))
: local.cf_assn\<^sup>k *\<^sub>a
  edge_assn\<^sup>k \<rightarrow>\<^sub>a cap_assn
### Cannot skip proof of schematic goal statement
(uncurry2 (mtx_set N), uncurry2 (PR_CONST cf_set))
: local.cf_assn\<^sup>d *\<^sub>a edge_assn\<^sup>k *\<^sub>a
  cap_assn\<^sup>k \<rightarrow>\<^sub>a local.cf_assn
### Cannot skip proof of schematic goal statement
(uncurry0 (mtx_tabulate N N c), uncurry0 (PR_CONST cf_init))
: unit_assn\<^sup>k \<rightarrow>\<^sub>a local.cf_assn
### Ambiguous input (line 230 of "$AFP/Flow_Networks/Network_Impl.thy") produces 2 parse trees:
### ("\<^const>Pure.eq"
###   ("_applC" ("_position" am_is_in_V_impl)
###     ("_cargs" ("_position" am) ("_position" u)))
###   ("_do_block"
###     ("_do_cons"
###       ("_do_bind" ("_position" amu)
###         ("_applC" ("_position" Array.nth)
###           ("_cargs" ("_position" am) ("_position" u))))
###       ("_do_final"
###         ("_applC" ("\<^const>Refine_Basic.RETURN")
###           ("\<^const>HOL.Not"
###             ("_applC" ("_position" is_Nil) ("_position" amu))))))))
### ("\<^const>Pure.eq"
###   ("_applC" ("_position" am_is_in_V_impl)
###     ("_cargs" ("_position" am) ("_position" u)))
###   ("_do_block"
###     ("_do_cons"
###       ("_do_bind" ("_position" amu)
###         ("_applC" ("_position" Array.nth)
###           ("_cargs" ("_position" am) ("_position" u))))
###       ("_do_final"
###         ("_applC" ("\<^const>Heap_Monad.return")
###           ("\<^const>HOL.Not"
###             ("_applC" ("_position" is_Nil) ("_position" amu))))))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
locale RGraph_Impl
  fixes c :: "nat * nat => int"
    and s :: "nat"
    and t :: "nat"
    and N :: "nat"
    and cf :: "nat * nat => int"
  assumes "RGraph_Impl c s t N cf"
locale Network_Impl
  fixes c :: "nat * nat => int"
    and s :: "nat"
    and t :: "nat"
    and N :: "nat"
  assumes "Network_Impl c s t N"
### Ambiguous input (line 294 of "$AFP/Flow_Networks/Network_Impl.thy") produces 2 parse trees:
### ("\<^const>Pure.eq"
###   ("_applC" ("_position" compute_flow_val)
###     ("_cargs" ("_position" am) ("_position" cf)))
###   ("_do_block"
###     ("_do_cons"
###       ("_do_bind" ("_position" succs)
###         ("_applC" ("_position" am_get)
###           ("_cargs" ("_position" am) ("_position" s))))
###       ("_do_final"
###         ("_applC" ("_position" nfoldli)
###           ("_cargs" ("_position" succs)
###             ("_cargs" ("_lambda" ("_idtdummy") ("_position" True))
###               ("_cargs"
###                 ("_lambda" ("_pttrns" ("_position" x) ("_position" a))
###                   ("_do_block"
###                     ("_do_cons"
###                       ("_do_bind" ("_position" b)
###                         ("_applC" ("_position" cf_get)
###                           ("_cargs" ("_position" cf)
###                             ("_tuple" ("_position" x)
###                               ("_tuple_arg" ("_position" s))))))
###                       ("_do_final"
###                         ("_applC" ("\<^const>Refine_Basic.RETURN")
###                           ("\<^const>Groups.plus_class.plus" ("_position" a)
###                             ("_position" b)))))))
###                 ("\<^const>Groups.zero_class.zero")))))))))
### ("\<^const>Pure.eq"
###   ("_applC" ("_position" compute_flow_val)
###     ("_cargs" ("_position" am) ("_position" cf)))
###   ("_do_block"
###     ("_do_cons"
###       ("_do_bind" ("_position" succs)
###         ("_applC" ("_position" am_get)
###           ("_cargs" ("_position" am) ("_position" s))))
###       ("_do_final"
###         ("_applC" ("_position" nfoldli)
###           ("_cargs" ("_position" succs)
###             ("_cargs" ("_lambda" ("_idtdummy") ("_position" True))
###               ("_cargs"
###                 ("_lambda" ("_pttrns" ("_position" x) ("_position" a))
###                   ("_do_block"
###                     ("_do_cons"
###                       ("_do_bind" ("_position" b)
###                         ("_applC" ("_position" cf_get)
###                           ("_cargs" ("_position" cf)
###                             ("_tuple" ("_position" x)
###                               ("_tuple_arg" ("_position" s))))))
###                       ("_do_final"
###                         ("_applC" ("\<^const>Heap_Monad.return")
###                           ("\<^const>Groups.plus_class.plus" ("_position" a)
###                             ("_position" b)))))))
###                 ("\<^const>Groups.zero_class.zero")))))))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
PR_CONST compute_flow_val ::\<^sub>i
TYPE((nat => nat list) => int i_mtx => int nres)
### Cannot skip proof of schematic goal statement
(uncurry
  (%ai bi.
      Array.nth ai s >>=
      (%x'. imp_nfoldli x' (%\<sigma>. return True)
             (%xb \<sigma>.
                 cf_get_impl N bi (xb, s) >>=
                 (%x'c. return (\<sigma> + x'c)))
             0)),
 uncurry (PR_CONST compute_flow_val))
: local.am_assn\<^sup>k *\<^sub>a
  local.cf_assn\<^sup>k \<rightarrow>\<^sub>a cap_assn
locale Network_Impl
  fixes c :: "nat * nat => int"
    and s :: "nat"
    and t :: "nat"
    and N :: "nat"
  assumes "Network_Impl c s t N"
### Ambiguous input (line 378 of "$AFP/Flow_Networks/Network_Impl.thy") produces 4 parse trees:
### ("\<^const>Pure.eq" ("_applC" ("_position" init_C) ("_position" am))
###   ("_do_block"
###     ("_do_cons"
###       ("_do_let" ("_position" cardV) ("\<^const>Groups.zero_class.zero"))
###       ("_do_final"
###         ("_applC" ("_position" nfoldli)
###           ("_cargs"
###             ("\<^const>List.upt" ("\<^const>Groups.zero_class.zero")
###               ("_position" N))
###             ("_cargs" ("_lambda" ("_idtdummy") ("_position" True))
###               ("_cargs"
###                 ("_lambda" ("_pttrns" ("_position" v) ("_position" cardV))
###                   ("_do_block"
###                     ("_do_cons"
###                       ("_do_then"
###                         ("_applC" ("\<^const>Refine_Basic.ASSERT")
###                           ("\<^const>Orderings.ord_class.less"
###                             ("_position" v) ("_position" N))))
###                       ("_do_cons"
###                         ("_do_bind" ("_position" inV)
###                           ("_applC" ("_position" am_is_in_V)
###                             ("_cargs" ("_position" am) ("_position" v))))
###                         ("_do_final"
###                           ("\<^const>HOL.If" ("_position" inV)
###                             ("_do_block"
###                               ("_do_final"
###                                 ("_applC" ("\<^const>Refine_Basic.RETURN")
###                                   ("\<^const>Groups.plus_class.plus"
###                                     ("_position" cardV)
###                                     ("\<^const>Groups.one_class.one")))))
###                             ("_applC" ("\<^const>Heap_Monad.return")
###                               ("_position" cardV))))))))
###                 ("_position" cardV)))))))))
### ("\<^const>Pure.eq" ("_applC" ("_position" init_C) ("_position" am))
###   ("_do_block"
###     ("_do_cons"
###       ("_do_let" ("_position" cardV) ("\<^const>Groups.zero_class.zero"))
###       ("_do_final"
###         ("_applC" ("_position" nfoldli)
###           ("_cargs"
###             ("\<^const>List.upt" ("\<^const>Groups.zero_class.zero")
###               ("_position" N))
###             ("_cargs" ("_lambda" ("_idtdummy") ("_position" True))
###               ("_cargs"
###                 ("_lambda" ("_pttrns" ("_position" v) ("_position" cardV))
###                   ("_do_block"
###                     ("_do_cons"
###                       ("_do_then"
###                         ("_applC" ("\<^const>Refine_Basic.ASSERT")
###                           ("\<^const>Orderings.ord_class.less"
###                             ("_position" v) ("_position" N))))
###                       ("_do_cons"
###                         ("_do_bind" ("_position" inV)
###                           ("_applC" ("_position" am_is_in_V)
###                             ("_cargs" ("_position" am) ("_position" v))))
###                         ("_do_final"
###                           ("\<^const>HOL.If" ("_position" inV)
###                             ("_do_block"
###                               ("_do_final"
###                                 ("_applC" ("\<^const>Heap_Monad.return")
###                                   ("\<^const>Groups.plus_class.plus"
###                                     ("_position" cardV)
###                                     ("\<^const>Groups.one_class.one")))))
###                             ("_applC" ("\<^const>Heap_Monad.return")
###                               ("_position" cardV))))))))
###                 ("_position" cardV)))))))))
### ("\<^const>Pure.eq" ("_applC" ("_position" init_C) ("_position" am))
###   ("_do_block"
###     ("_do_cons"
###       ("_do_let" ("_position" cardV) ("\<^const>Groups.zero_class.zero"))
###       ("_do_final"
###         ("_applC" ("_position" nfoldli)
###           ("_cargs"
###             ("\<^const>List.upt" ("\<^const>Groups.zero_class.zero")
###               ("_position" N))
###             ("_cargs" ("_lambda" ("_idtdummy") ("_position" True))
###               ("_cargs"
###                 ("_lambda" ("_pttrns" ("_position" v) ("_position" cardV))
###                   ("_do_block"
###                     ("_do_cons"
###                       ("_do_then"
###                         ("_applC" ("\<^const>Refine_Basic.ASSERT")
###                           ("\<^const>Orderings.ord_class.less"
###                             ("_position" v) ("_position" N))))
###                       ("_do_cons"
###                         ("_do_bind" ("_position" inV)
###                           ("_applC" ("_position" am_is_in_V)
###                             ("_cargs" ("_position" am) ("_position" v))))
###                         ("_do_final"
###                           ("\<^const>HOL.If" ("_position" inV)
###                             ("_do_block"
###                               ("_do_final"
###                                 ("_applC" ("\<^const>Refine_Basic.RETURN")
###                                   ("\<^const>Groups.plus_class.plus"
###                                     ("_position" cardV)
###                                     ("\<^const>Groups.one_class.one")))))
###                             ("_applC" ("\<^const>Refine_Basic.RETURN")
###                               ("_position" cardV))))))))
###                 ("_position" cardV)))))))))
### ("\<^const>Pure.eq" ("_applC" ("_position" init_C) ("_position" am))
###   ("_do_block"
###     ("_do_cons"
###       ("_do_let" ("_position" cardV) ("\<^const>Groups.zero_class.zero"))
###       ("_do_final"
###         ("_applC" ("_position" nfoldli)
###           ("_cargs"
###             ("\<^const>List.upt" ("\<^const>Groups.zero_class.zero")
###               ("_position" N))
###             ("_cargs" ("_lambda" ("_idtdummy") ("_position" True))
###               ("_cargs"
###                 ("_lambda" ("_pttrns" ("_position" v) ("_position" cardV))
###                   ("_do_block"
###                     ("_do_cons"
###                       ("_do_then"
###                         ("_applC" ("\<^const>Refine_Basic.ASSERT")
###                           ("\<^const>Orderings.ord_class.less"
###                             ("_position" v) ("_position" N))))
###                       ("_do_cons"
###                         ("_do_bind" ("_position" inV)
###                           ("_applC" ("_position" am_is_in_V)
###                             ("_cargs" ("_position" am) ("_position" v))))
###                         ("_do_final"
###                           ("\<^const>HOL.If" ("_position" inV)
###                             ("_do_block"
###                               ("_do_final"
###                                 ("_applC" ("\<^const>Heap_Monad.return")
###                                   ("\<^const>Groups.plus_class.plus"
###                                     ("_position" cardV)
###                                     ("\<^const>Groups.one_class.one")))))
###                             ("_applC" ("\<^const>Refine_Basic.RETURN")
###                               ("_position" cardV))))))))
###                 ("_position" cardV)))))))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
PR_CONST init_C ::\<^sub>i TYPE((nat => nat list) => ?'a1 nres)
### Cannot skip proof of schematic goal statement
(%xi. imp_for' 0 N
       (%xd \<sigma>.
           am_is_in_V_impl xi xd >>=
           (%x'd. return (if x'd then \<sigma> + 1 else \<sigma>)))
       0,
 PR_CONST init_C)
: local.am_assn\<^sup>k \<rightarrow>\<^sub>a nat_assn
### theory "Draft.Network_Impl"
### 3.103s elapsed time, 4.014s cpu time, 1.287s GC time
Loading theory "Draft.Network_ImplTemplates"
val templateLemmas =
   [("Network_Impl.nf_init_rule",
     "<emp> Array.new ?N ?dflt <is_nf ?N ?dflt (%_. ?dflt)>",
     template_predicate
      (
         template_app
          (template_app
            (template_app (template_hole 3, template_hole 2),
             template_app
              (template_app (template_hole 1, template_var 1),
               template_var 0)),
           template_app
            (template_app
              (template_app (template_hole 0, template_var 1),
               template_var 0),
             t_empty))
         )),
    ("Network_Impl.nf_copy_rule",
     "<is_nf ?N ?dflt ?f ?a> array_copy ?a
      <%r. is_nf ?N ?dflt ?f ?a * is_nf ?N ?dflt ?f r>",
     template_predicate
      (
         template_app
          (template_app
            (template_app
              (template_hole 3,
               template_app
                (template_app
                  (template_app
                    (template_app (template_hole 2, template_var 3),
                     template_var 2),
                   template_var 1),
                 template_var 0)),
             template_app (template_hole 1, template_var 0)),
           t_empty)
         )),
    ("Network_Impl.rgraph_and_network_impl_imp_rgraph_impl",
     "[| RGraph ?c ?s ?t ?cf; Network_Impl ?c ?s ?t ?N |]
      ==> RGraph_Impl ?c ?s ?t ?N ?cf",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_app (template_hole 2, template_var 4),
                  template_var 3),
                template_var 2),
              template_var 1)
            ),
        template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_app (template_hole 1, template_var 4),
                  template_var 3),
                template_var 2),
              template_var 0)
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_app
                (template_app
                  (template_app (template_hole 0, template_var 4),
                   template_var 3),
                 template_var 2),
               template_var 0),
             template_var 1)
           ))),
    ("Network_Impl.nf_update_rule",
     "?v < ?N ==>
      <is_nf ?N ?dflt ?f ?a> Array.upd ?v ?x ?a
      <is_nf ?N ?dflt (?f(?v := ?x))>",
     template_implication
      ([template_inequation (less_than, template_var 5, template_var 4)],
       template_predicate
        (
           template_app
            (template_app
              (template_app
                (template_hole 3,
                 template_app
                  (template_app
                    (template_app
                      (template_app (template_hole 2, template_var 4),
                       template_var 3),
                     template_var 2),
                   template_var 1)),
               template_app
                (template_app
                  (template_app (template_hole 1, template_var 5),
                   template_var 0),
                 template_var 1)),
             template_app
              (template_app
                (template_app (template_hole 2, template_var 4),
                 template_var 3),
               template_app
                (template_app
                  (template_app (template_hole 0, template_var 2),
                   template_var 5),
                 template_var 0)))
           ))),
    ("Network_Impl.nf_lookup_rule",
     "?v < ?N ==>
      <is_nf ?N ?dflt ?f ?a> Array.nth ?a ?v
      <%r. is_nf ?N ?dflt ?f ?a * \<up> (r = ?f ?v)>",
     template_implication
      ([template_inequation (less_than, template_var 4, template_var 3)],
       template_predicate
        (
           template_app
            (template_app
              (template_app
                (template_hole 5,
                 template_app
                  (template_app
                    (template_app
                      (template_app (template_hole 4, template_var 3),
                       template_var 2),
                     template_var 1),
                   template_var 0)),
               template_app
                (template_app (template_hole 3, template_var 0),
                 template_var 4)),
             t_empty)
           ))),
    ("Network_Impl.compute_flow_val_impl_correct",
     "[| RGraph_Impl ?c ?s ?t ?N ?cf; Graph.is_adj_map ?c ?am |]
      ==> <cf_assn ?N ?cf ?cfi *
           am_assn ?N ?am
            ?ami> compute_flow_val_impl ?s ?N ?ami
                   ?cfi <%r. cf_assn ?N ?cf ?cfi * am_assn ?N ?am ?ami *
                             \<up>
                              (r =
                               Flow.val ?c ?s
                                (RPreGraph.f ?c ?cf))>\<^sub>t",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_app
                   (template_app (template_hole 11, template_var 7),
                    template_var 6),
                  template_var 5),
                template_var 4),
              template_var 3)
            ),
        template_predicate
         (
            template_app
             (template_app (template_hole 10, template_var 7),
              template_var 2)
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_app
                (template_hole 9,
                 template_app
                  (template_app
                    (template_hole 8,
                     template_app
                      (template_app
                        (template_app (template_hole 7, template_var 4),
                         template_var 3),
                       template_var 1)),
                   template_app
                    (template_app
                      (template_app (template_hole 6, template_var 4),
                       template_var 2),
                     template_var 0))),
               template_app
                (template_app
                  (template_app
                    (template_app (template_hole 5, template_var 6),
                     template_var 4),
                   template_var 0),
                 template_var 1)),
             t_empty)
           )))]:
   (string * thm * template) list
### theory "Draft.Network_ImplTemplates"
### 3.007s elapsed time, 4.233s cpu time, 1.321s GC time
val it = (): unit
