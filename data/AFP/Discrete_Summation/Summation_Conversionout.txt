Loading theory "Draft.Discrete_Summation" (required by "Draft.Summation_ConversionMoreTemplates" via "Draft.Summation_Conversion")
Loading theory "HOL-Combinatorics.Stirling" (required by "Draft.Summation_ConversionMoreTemplates" via "Draft.Summation_Conversion" via "Draft.Factorials")
Loading theory "HOL-Library.Function_Algebras" (required by "Draft.Summation_ConversionMoreTemplates" via "Draft.ExtrEqs" via "HOL-Library.BigO")
Loading theory "HOL-Library.Nat_Bijection" (required by "Draft.Summation_ConversionMoreTemplates" via "Draft.ExtrEqs" via "HOL-Library.Stream")
instantiation
  fun :: (type, plus) plus
  plus_fun == plus :: ('a => 'b) => ('a => 'b) => 'a => 'b
instantiation
  fun :: (type, zero) zero
  zero_fun == zero_class.zero :: 'a => 'b
instantiation
  fun :: (type, times) times
  times_fun == times :: ('a => 'b) => ('a => 'b) => 'a => 'b
instantiation
  fun :: (type, one) one
  one_fun == one_class.one :: 'a => 'b
### theory "Draft.Discrete_Summation"
### 0.087s elapsed time, 0.384s cpu time, 0.000s GC time
Loading theory "HOL-Library.Set_Algebras" (required by "Draft.Summation_ConversionMoreTemplates" via "Draft.ExtrEqs" via "HOL-Library.BigO")
Found termination order:
  "(%p. size (snd p)) <*mlex*> (%p. size (fst p)) <*mlex*> {}"
Found termination order: "(%p. size (snd p)) <*mlex*> {}"
instantiation
  set :: (plus) plus
  plus_set == plus :: 'a set => 'a set => 'a set
### theory "HOL-Library.Function_Algebras"
### 0.129s elapsed time, 0.534s cpu time, 0.037s GC time
Loading theory "HOL-Library.Tree" (required by "Draft.Summation_ConversionMoreTemplates" via "Draft.ExtrEqs" via "Draft.Templates")
instantiation
  set :: (times) times
  times_set == times :: 'a set => 'a set => 'a set
instantiation
  set :: (zero) zero
  zero_set == zero_class.zero :: 'a set
instantiation
  set :: (one) one
  one_set == one_class.one :: 'a set
Found termination order:
  "(%p. size (snd p)) <*mlex*> (%p. size (fst p)) <*mlex*> {}"
Found termination order: "size_list size <*mlex*> {}"
consts
  stirling_row_aux :: "'a => 'a => 'a list => 'a list"
### theory "HOL-Combinatorics.Stirling"
### 0.284s elapsed time, 1.141s cpu time, 0.120s GC time
Loading theory "Draft.Factorials" (required by "Draft.Summation_ConversionMoreTemplates" via "Draft.Summation_Conversion")
### theory "HOL-Library.Set_Algebras"
### 0.210s elapsed time, 0.828s cpu time, 0.083s GC time
Loading theory "HOL-Library.BigO" (required by "Draft.Summation_ConversionMoreTemplates" via "Draft.ExtrEqs")
### theory "HOL-Library.Nat_Bijection"
### 0.374s elapsed time, 1.496s cpu time, 0.120s GC time
Loading theory "HOL-Library.Stream" (required by "Draft.Summation_ConversionMoreTemplates" via "Draft.ExtrEqs")
### theory "Draft.Factorials"
### 0.295s elapsed time, 1.172s cpu time, 0.073s GC time
Loading theory "Draft.Summation_Conversion" (required by "Draft.Summation_ConversionMoreTemplates")
consts
  left :: "'a tree => 'a tree"
consts
  right :: "'a tree => 'a tree"
Found termination order: "size <*mlex*> {}"
Found termination order: "size <*mlex*> {}"
consts
  shift :: "'a list => 'a stream => 'a stream"
Proofs for coinductive predicate(s) "streamsp"
  Proving monotonicity ...
Found termination order: "size <*mlex*> {}"
class height = type +
  fixes height :: "'a => nat"
instantiation
  tree :: (type) height
  height_tree == height :: 'a tree => nat
consts
  snth :: "'a stream => nat => 'a"
consts
  stake :: "nat => 'a stream => 'a list"
consts
  sdrop :: "nat => 'a stream => 'a stream"
Found termination order: "size <*mlex*> {}"
consts
  sfilter :: "('a => bool) => 'a stream => 'a stream"
Found termination order: "size <*mlex*> {}"
consts
  cycle :: "'a list => 'a stream"
signature SUMMATION = sig val conv: Proof.context -> conv end
structure Summation: SUMMATION
### theory "Draft.Summation_Conversion"
### 0.521s elapsed time, 1.946s cpu time, 0.546s GC time
consts
  siterate :: "('a => 'a) => 'a => 'a stream"
Found termination order: "size <*mlex*> {}"
### theory "HOL-Library.BigO"
### 0.838s elapsed time, 3.149s cpu time, 0.619s GC time
consts
  flat :: "'a list stream => 'a stream"
Found termination order: "size <*mlex*> {}"
consts
  sinterleave :: "'a stream => 'a stream => 'a stream"
consts
  szip :: "'a stream => 'b stream => ('a * 'b) stream"
Found termination order: "size <*mlex*> {}"
consts
  smap2 :: "('a => 'b => 'c) => 'a stream => 'b stream => 'c stream"
### theory "HOL-Library.Stream"
### 0.909s elapsed time, 3.181s cpu time, 0.655s GC time
Found termination order: "size <*mlex*> {}"
Found termination order: "size <*mlex*> {}"
Found termination order: "(%p. size (fst p)) <*mlex*> {}"
Found termination order: "size <*mlex*> {}"
Found termination order: "(%p. size (snd p)) <*mlex*> {}"
Found termination order: "size <*mlex*> {}"
### theory "HOL-Library.Tree"
### 1.738s elapsed time, 4.817s cpu time, 0.812s GC time
Loading theory "Draft.Templates" (required by "Draft.Summation_ConversionMoreTemplates" via "Draft.ExtrEqs")
datatype template_term
=
     t_empty
   | template_app of template_term * template_term
   | template_hole of int
   | template_var of int
datatype sign
= equals | greater_equals | greater_than | less_equals | less_than
datatype template
=
     template_bimplication of template * template
   | template_dunno
   | template_equation of template_term * template_term
   | template_implication of template list * template
   | template_inequation of sign * template_term * template_term
   | template_negation of template
   | template_predicate of template_term
constructor t_empty: template_term
constructor template_app: template_term * template_term -> template_term
constructor template_hole: int -> template_term
constructor template_var: int -> template_term
constructor equals: sign
constructor greater_equals: sign
constructor greater_than: sign
constructor less_equals: sign
constructor less_than: sign
constructor template_bimplication: template * template -> template
constructor template_dunno: template
constructor template_equation: template_term * template_term -> template
constructor template_implication: template list * template -> template
constructor template_inequation:
   sign * template_term * template_term -> template
constructor template_negation: template -> template
constructor template_predicate: template_term -> template
val vfs = fn: term -> (indexname * typ) list * (string * typ) list
val indexOf = fn: ''a list -> ''a -> int -> int
val has_eq = fn: term -> bool
val term2template = fn:
   (indexname * typ) list -> (string * typ) list -> term -> template_term
val lemma2predicate = fn: term -> term -> template
val makeTemplatewithContext = fn: term -> term -> template
val lemma2template = fn: term -> template
val thm2template = fn: thm -> template
val tterm2string = fn: template_term -> string
val template2string = fn: template -> string
val t = "height ?t <= size ?t": thm
val th =
   Const ("HOL.Trueprop", "bool => prop") $
     (Const ("Orderings.ord_class.less_eq", "nat => nat => bool") $
       (Const ("Tree.height_class.height", "?'a tree => nat") $
         Var (("t", 0), "?'a tree")) $
       (Const ("Nat.size_class.size", "?'a tree => nat") $
         Var (("t", 0), "?'a tree"))):
   term
### theory "Draft.Templates"
### 0.063s elapsed time, 0.116s cpu time, 0.052s GC time
Loading theory "Draft.ExtrEqs" (required by "Draft.Summation_ConversionMoreTemplates")
val eqpattern =
   Pattern
    (
       Const ("HOL.Trueprop", "bool => prop") $
         (Const ("HOL.eq", "?'a => ?'a => bool") $
           Var (("_dummy_", 1), "?'a") $ Var (("_dummy_", 2), "?'a"))
       ):
   term Find_Theorems.criterion
val badeqpattern = Pattern (Const ("Pure.eq", "?'a => ?'a => prop")):
   term Find_Theorems.criterion
val undefpattern =
   Pattern
    (
       Const ("HOL.Trueprop", "bool => prop") $
         (Const ("HOL.eq", "?'a => ?'a => bool") $
           Var (("_dummy_", 1), "?'a") $ Const ("HOL.undefined", "?'a"))
       ):
   term Find_Theorems.criterion
val thmpattern =
   Pattern
    (Const ("HOL.Trueprop", "bool => prop") $ Var (("_dummy_", 1), "bool")):
   term Find_Theorems.criterion
val badnames =
   ["*nitpick*", "*Nitpick*", "*full_exhaustive*", "*_def*", "Enum.finite*",
    "*Quickcheck*", "ATP*", "*Nunchaku*", "*Code*", "*BNF*", "*SMT*",
    "*.*.*"]:
   string list
val unwanted_names =
   [(false, Name "*nitpick*"), (false, Name "*Nitpick*"),
    (false, Name "*full_exhaustive*"), (false, Name "*_def*"),
    (false, Name "Enum.finite*"), (false, Name "*Quickcheck*"),
    (false, Name "ATP*"), (false, Name "*Nunchaku*"),
    (false, Name "*Code*"), (false, Name "*BNF*"), (false, Name "*SMT*"),
    (false, Name "*.*.*")]:
   (bool * term Find_Theorems.criterion) list
val has_vars = fn: term -> bool
val get_all_eqs = fn: string -> Proof.context -> (string * thm) list
val get_all_thms = fn: string -> Proof.context -> (string * thm) list
val get_noneq_thms = fn: string -> Proof.context -> (string * thm) list
val template_eqs = fn:
   string -> Proof.context -> (string * thm * template) list
val template_thms = fn:
   string -> Proof.context -> (string * thm * template) list
### theory "Draft.ExtrEqs"
### 0.460s elapsed time, 0.465s cpu time, 0.000s GC time
Loading theory "Draft.Summation_ConversionMoreTemplates"
val templateLemmas =
   [("Summation_Conversion.summation", "0 <= int ?n",
     template_inequation
      (less_equals, template_hole 1,
       template_app (template_hole 0, template_var 0))),
    ("Summation_Conversion.summation", "0 <= numeral ?m",
     template_inequation
      (less_equals, template_hole 1,
       template_app (template_hole 0, template_var 0))),
    ("Summation_Conversion.nat_simps", "(0::?'a) * ?a = (0::?'a)",
     template_equation
      (template_app
        (template_app (template_hole 1, template_hole 0), template_var 0),
       template_hole 0)),
    ("Summation_Conversion.nat_simps", "?a * (0::?'a) = (0::?'a)",
     template_equation
      (template_app
        (template_app (template_hole 1, template_var 0), template_hole 0),
       template_hole 0)),
    ("Summation_Conversion.nat_simps", "(0::?'a) + ?a = ?a",
     template_equation
      (template_app
        (template_app (template_hole 1, template_hole 0), template_var 0),
       template_var 0)),
    ("Summation_Conversion.nat_simps", "?a + (0::?'a) = ?a",
     template_equation
      (template_app
        (template_app (template_hole 1, template_var 0), template_hole 0),
       template_var 0)),
    ("Summation_Conversion.of_int_pull_in",
     "of_int (numeral ?k) = numeral ?k",
     template_equation
      (template_app
        (template_hole 2, template_app (template_hole 1, template_var 0)),
       template_app (template_hole 0, template_var 0))),
    ("Summation_Conversion.summation", "lift_nat (%n. ?m) = (%k. int ?m)",
     template_equation (template_app (template_hole 1, t_empty), t_empty)),
    ("Summation_Conversion.of_int_pull_in",
     "of_int (- numeral ?k) = - numeral ?k",
     template_equation
      (template_app
        (template_hole 4,
         template_app
          (template_hole 3,
           template_app (template_hole 2, template_var 0))),
       template_app
        (template_hole 1, template_app (template_hole 0, template_var 0)))),
    ("Summation_Conversion.nat_simps",
     "of_nat (Suc ?m) = (1::?'a) + of_nat ?m",
     template_equation
      (template_app
        (template_hole 3, template_app (template_hole 2, template_var 0)),
       template_app
        (template_app (template_hole 1, template_hole 0),
         template_app (template_hole 3, template_var 0)))),
    ("Summation_Conversion.of_int_pull_in",
     "of_int (?z ^ ?n) = of_int ?z ^ ?n",
     template_equation
      (template_app
        (template_hole 2,
         template_app
          (template_app (template_hole 1, template_var 1), template_var 0)),
       template_app
        (template_app
          (template_hole 0, template_app (template_hole 2, template_var 1)),
         template_var 0))),
    ("Summation_Conversion.nat_simps", "?m + Suc ?n = Suc (?m + ?n)",
     template_equation
      (template_app
        (template_app (template_hole 1, template_var 1),
         template_app (template_hole 0, template_var 0)),
       template_app
        (template_hole 0,
         template_app
          (template_app (template_hole 1, template_var 1),
           template_var 0)))),
    ("Summation_Conversion.nat_simps", "Suc ?m + ?n = Suc (?m + ?n)",
     template_equation
      (template_app
        (template_app
          (template_hole 1, template_app (template_hole 0, template_var 1)),
         template_var 0),
       template_app
        (template_hole 0,
         template_app
          (template_app (template_hole 1, template_var 1),
           template_var 0)))),
    ("Summation_Conversion.of_int_pull_in",
     "of_int (?w - ?z) = of_int ?w - of_int ?z",
     template_equation
      (template_app
        (template_hole 2,
         template_app
          (template_app (template_hole 1, template_var 1), template_var 0)),
       template_app
        (template_app
          (template_hole 0, template_app (template_hole 2, template_var 1)),
         template_app (template_hole 2, template_var 0)))),
    ("Summation_Conversion.of_int_pull_in",
     "of_int (?w + ?z) = of_int ?w + of_int ?z",
     template_equation
      (template_app
        (template_hole 2,
         template_app
          (template_app (template_hole 1, template_var 1), template_var 0)),
       template_app
        (template_app
          (template_hole 0, template_app (template_hole 2, template_var 1)),
         template_app (template_hole 2, template_var 0)))),
    ("Summation_Conversion.of_int_pull_in",
     "of_int (?w * ?z) = of_int ?w * of_int ?z",
     template_equation
      (template_app
        (template_hole 2,
         template_app
          (template_app (template_hole 1, template_var 1), template_var 0)),
       template_app
        (template_app
          (template_hole 0, template_app (template_hole 2, template_var 1)),
         template_app (template_hole 2, template_var 0)))),
    ("Summation_Conversion.of_int_pull_out",
     "of_int ?w - of_int ?z = of_int (?w - ?z)",
     template_equation
      (template_app
        (template_app
          (template_hole 2, template_app (template_hole 1, template_var 1)),
         template_app (template_hole 1, template_var 0)),
       template_app
        (template_hole 1,
         template_app
          (template_app (template_hole 0, template_var 1),
           template_var 0)))),
    ("Summation_Conversion.of_int_pull_out",
     "of_int ?w + of_int ?z = of_int (?w + ?z)",
     template_equation
      (template_app
        (template_app
          (template_hole 2, template_app (template_hole 1, template_var 1)),
         template_app (template_hole 1, template_var 0)),
       template_app
        (template_hole 1,
         template_app
          (template_app (template_hole 0, template_var 1),
           template_var 0)))),
    ("Summation_Conversion.of_int_pull_out",
     "of_int ?w * of_int ?z = of_int (?w * ?z)",
     template_equation
      (template_app
        (template_app
          (template_hole 2, template_app (template_hole 1, template_var 1)),
         template_app (template_hole 1, template_var 0)),
       template_app
        (template_hole 1,
         template_app
          (template_app (template_hole 0, template_var 1),
           template_var 0)))),
    ("Summation_Conversion.nat_simps",
     "of_nat (?m + ?n) = of_nat ?m + of_nat ?n",
     template_equation
      (template_app
        (template_hole 2,
         template_app
          (template_app (template_hole 1, template_var 1), template_var 0)),
       template_app
        (template_app
          (template_hole 0, template_app (template_hole 2, template_var 1)),
         template_app (template_hole 2, template_var 0)))),
    ("Summation_Conversion.nat_simps",
     "of_nat (?m * ?n) = of_nat ?m * of_nat ?n",
     template_equation
      (template_app
        (template_hole 2,
         template_app
          (template_app (template_hole 1, template_var 1), template_var 0)),
       template_app
        (template_app
          (template_hole 0, template_app (template_hole 2, template_var 1)),
         template_app (template_hole 2, template_var 0)))),
    ("Summation_Conversion.of_nat_pull_out",
     "of_nat ?m + of_nat ?n = of_nat (?m + ?n)",
     template_equation
      (template_app
        (template_app
          (template_hole 2, template_app (template_hole 1, template_var 1)),
         template_app (template_hole 1, template_var 0)),
       template_app
        (template_hole 1,
         template_app
          (template_app (template_hole 0, template_var 1),
           template_var 0)))),
    ("Summation_Conversion.of_nat_pull_out",
     "of_nat ?m * of_nat ?n = of_nat (?m * ?n)",
     template_equation
      (template_app
        (template_app
          (template_hole 2, template_app (template_hole 1, template_var 1)),
         template_app (template_hole 1, template_var 0)),
       template_app
        (template_hole 1,
         template_app
          (template_app (template_hole 0, template_var 1),
           template_var 0)))),
    ("Summation_Conversion.intervall_simps", "sum ?f {0..0} = ?f 0",
     template_equation
      (template_app
        (template_app (template_hole 2, t_empty),
         template_app
          (template_app (template_hole 1, template_hole 0),
           template_hole 0)),
       template_app (template_var 0, template_hole 0))),
    ("Summation_Conversion.nat_simps", "?m * Suc ?n = ?m + ?m * ?n",
     template_equation
      (template_app
        (template_app (template_hole 2, template_var 1),
         template_app (template_hole 1, template_var 0)),
       template_app
        (template_app (template_hole 0, template_var 1),
         template_app
          (template_app (template_hole 2, template_var 1),
           template_var 0)))),
    ("Summation_Conversion.nat_simps", "Suc ?m * ?n = ?n + ?m * ?n",
     template_equation
      (template_app
        (template_app
          (template_hole 2, template_app (template_hole 1, template_var 1)),
         template_var 0),
       template_app
        (template_app (template_hole 0, template_var 0),
         template_app
          (template_app (template_hole 2, template_var 1),
           template_var 0)))),
    ("Summation_Conversion.nat_pull_in", "nat (int ?a + int ?b) = ?a + ?b",
     template_equation
      (template_app
        (template_hole 3,
         template_app
          (template_app
            (template_hole 2,
             template_app (template_hole 1, template_var 1)),
           template_app (template_hole 1, template_var 0))),
       template_app
        (template_app (template_hole 0, template_var 1), template_var 0))),
    ("Summation_Conversion.of_int_pull_in", "?b * ?a / ?c = ?b / ?c * ?a",
     template_equation
      (template_app
        (template_app
          (template_hole 1,
           template_app
            (template_app (template_hole 0, template_var 2),
             template_var 1)),
         template_var 0),
       template_app
        (template_app
          (template_hole 0,
           template_app
            (template_app (template_hole 1, template_var 2),
             template_var 0)),
         template_var 1))),
    ("Summation_Conversion.of_int_coeff",
     "of_int ?l * numeral ?k = of_int (?l * numeral ?k)",
     template_equation
      (template_app
        (template_app
          (template_hole 4, template_app (template_hole 3, template_var 1)),
         template_app (template_hole 2, template_var 0)),
       template_app
        (template_hole 3,
         template_app
          (template_app (template_hole 1, template_var 1),
           template_app (template_hole 0, template_var 0))))),
    ("Summation_Conversion.of_int_pull_in",
     "of_int (?l * numeral ?k) = of_int ?l * numeral ?k",
     template_equation
      (template_app
        (template_hole 4,
         template_app
          (template_app (template_hole 3, template_var 1),
           template_app (template_hole 2, template_var 0))),
       template_app
        (template_app
          (template_hole 1, template_app (template_hole 4, template_var 1)),
         template_app (template_hole 0, template_var 0)))),
    ("Summation_Conversion.of_nat_coeff",
     "of_nat ?n * numeral ?m = of_nat (?n * numeral ?m)",
     template_equation
      (template_app
        (template_app
          (template_hole 4, template_app (template_hole 3, template_var 1)),
         template_app (template_hole 2, template_var 0)),
       template_app
        (template_hole 3,
         template_app
          (template_app (template_hole 1, template_var 1),
           template_app (template_hole 0, template_var 0))))),
    ("Summation_Conversion.summation",
     "\<Sigma> (%k. ?c) ?j ?l = of_int (?l - ?j) * ?c",
     template_equation
      (template_app
        (template_app
          (template_app (template_hole 3, t_empty), template_var 1),
         template_var 0),
       template_app
        (template_app
          (template_hole 2,
           template_app
            (template_hole 1,
             template_app
              (template_app (template_hole 0, template_var 0),
               template_var 1))),
         template_var 2))),
    ("Summation_Conversion.of_int_pull_in",
     "(?a - ?b) / ?c = ?a / ?c - ?b / ?c",
     template_equation
      (template_app
        (template_app
          (template_hole 1,
           template_app
            (template_app (template_hole 0, template_var 2),
             template_var 1)),
         template_var 0),
       template_app
        (template_app
          (template_hole 0,
           template_app
            (template_app (template_hole 1, template_var 2),
             template_var 0)),
         template_app
          (template_app (template_hole 1, template_var 1),
           template_var 0)))),
    ("Summation_Conversion.of_int_pull_in",
     "(?a + ?b) / ?c = ?a / ?c + ?b / ?c",
     template_equation
      (template_app
        (template_app
          (template_hole 1,
           template_app
            (template_app (template_hole 0, template_var 2),
             template_var 1)),
         template_var 0),
       template_app
        (template_app
          (template_hole 0,
           template_app
            (template_app (template_hole 1, template_var 2),
             template_var 0)),
         template_app
          (template_app (template_hole 1, template_var 1),
           template_var 0)))),
    ("Summation_Conversion.summation",
     "lift_nat (%n. ?f n ^ ?m) = (%k. lift_nat ?f k ^ ?m)",
     template_equation (template_app (template_hole 2, t_empty), t_empty)),
    ("Summation_Conversion.summation",
     "\<Sigma>\<^sub>\<nat> ?f ?m ?n =
      nat (\<Sigma> (lift_nat ?f) (int ?m) (int ?n))",
     template_equation
      (template_app
        (template_app
          (template_app (template_hole 4, template_var 2), template_var 1),
         template_var 0),
       template_app
        (template_hole 3,
         template_app
          (template_app
            (template_app
              (template_hole 2,
               template_app (template_hole 1, template_var 2)),
             template_app (template_hole 0, template_var 1)),
           template_app (template_hole 0, template_var 0))))),
    ("Summation_Conversion.\<Delta>_ffact",
     "\<Delta> (ffact (Suc ?n)) ?k =
      of_nat (Suc ?n) * ffact ?n (of_int ?k)",
     template_equation
      (template_app
        (template_app
          (template_hole 5,
           template_app
            (template_hole 4,
             template_app (template_hole 3, template_var 1))),
         template_var 0),
       template_app
        (template_app
          (template_hole 2,
           template_app
            (template_hole 1,
             template_app (template_hole 3, template_var 1))),
         template_app
          (template_app (template_hole 4, template_var 1),
           template_app (template_hole 0, template_var 0))))),
    ("Summation_Conversion.summation",
     "lift_nat (%n. ?m * ?f n) = (%k. int ?m * lift_nat ?f k)",
     template_equation (template_app (template_hole 3, t_empty), t_empty)),
    ("Summation_Conversion.summation",
     "lift_nat (%n. ?f n * ?m) = (%k. lift_nat ?f k * int ?m)",
     template_equation (template_app (template_hole 3, t_empty), t_empty)),
    ("Summation_Conversion.summation",
     "lift_nat (%n. ?f n + ?g n) = (%k. lift_nat ?f k + lift_nat ?g k)",
     template_equation (template_app (template_hole 2, t_empty), t_empty)),
    ("Summation_Conversion.summation",
     "\<Sigma> (%k. ?c * ?f k) ?j ?l = ?c * \<Sigma> ?f ?j ?l",
     template_equation
      (template_app
        (template_app
          (template_app (template_hole 1, t_empty), template_var 1),
         template_var 0),
       template_app
        (template_app (template_hole 0, template_var 3),
         template_app
          (template_app
            (template_app (template_hole 1, t_empty), template_var 1),
           template_var 0)))),
    ("Summation_Conversion.summation",
     "?a ^ ?n = (SUM k = 0..?n. of_nat (Stirling ?n k) * ffact k ?a)",
     template_equation
      (template_app
        (template_app (template_hole 7, template_var 1), template_var 0),
       template_app
        (template_app (template_hole 6, t_empty),
         template_app
          (template_app (template_hole 1, template_hole 0),
           template_var 0)))),
    ("Summation_Conversion.summation",
     "\<Sigma> (%k. ?f k + ?g k) ?j ?l =
      \<Sigma> ?f ?j ?l + \<Sigma> ?g ?j ?l",
     template_equation
      (template_app
        (template_app
          (template_app (template_hole 1, t_empty), template_var 1),
         template_var 0),
       template_app
        (template_app
          (template_hole 0,
           template_app
            (template_app
              (template_app (template_hole 1, template_var 3),
               template_var 1),
             template_var 0)),
         template_app
          (template_app
            (template_app (template_hole 1, template_var 2),
             template_var 1),
           template_var 0)))),
    ("Summation_Conversion.intervall_simps",
     "sum ?f {0..Suc ?n} = ?f (Suc ?n) + sum ?f {0..?n}",
     template_equation
      (template_app
        (template_app (template_hole 4, t_empty),
         template_app
          (template_app (template_hole 3, template_hole 2),
           template_app (template_hole 1, template_var 0))),
       template_app
        (template_app
          (template_hole 0,
           template_app
            (template_var 1,
             template_app (template_hole 1, template_var 0))),
         template_app
          (template_app (template_hole 4, t_empty),
           template_app
            (template_app (template_hole 3, template_hole 2),
             template_var 0))))),
    ("Summation_Conversion.\<Sigma>_ffact_divide",
     "\<Sigma> (ffact ?n) ?j ?l =
      (ffact (Suc ?n) (of_int ?l) - ffact (Suc ?n) (of_int ?j)) div
      of_nat (Suc ?n)",
     template_equation
      (template_app
        (template_app
          (template_app
            (template_hole 6,
             template_app (template_hole 5, template_var 2)),
           template_var 1),
         template_var 0),
       template_app
        (template_app
          (template_hole 4,
           template_app
            (template_app
              (template_hole 3,
               template_app
                (template_app
                  (template_hole 5,
                   template_app (template_hole 2, template_var 2)),
                 template_app (template_hole 1, template_var 0))),
             template_app
              (template_app
                (template_hole 5,
                 template_app (template_hole 2, template_var 2)),
               template_app (template_hole 1, template_var 1)))),
         template_app
          (template_hole 0,
           template_app (template_hole 2, template_var 2))))),
    ("Summation_Conversion.\<Sigma>_pos_id",
     "[| 0 <= ?k; 0 <= ?l |]
      ==> \<Sigma> (%r. ?f (pos_id r)) ?k ?l = \<Sigma> ?f ?k ?l",
     template_implication
      ([template_inequation (less_equals, template_hole 3, template_var 2),
        template_inequation (less_equals, template_hole 3, template_var 1)],
       template_equation
        (template_app
          (template_app
            (template_app (template_hole 1, t_empty), template_var 2),
           template_var 1),
         template_app
          (template_app
            (template_app (template_hole 1, template_var 0),
             template_var 2),
           template_var 1))))]:
   (string * thm * template) list
### theory "Draft.Summation_ConversionMoreTemplates"
### 0.332s elapsed time, 0.455s cpu time, 0.058s GC time
val it = (): unit
