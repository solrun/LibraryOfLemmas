Loading theory "HOL-Library.Function_Algebras" (required by "Draft.FactorialsMoreTemplates" via "Draft.ExtrEqs" via "HOL-Library.BigO")
Loading theory "HOL-Library.Set_Algebras" (required by "Draft.FactorialsMoreTemplates" via "Draft.ExtrEqs" via "HOL-Library.BigO")
Loading theory "HOL-Combinatorics.Stirling" (required by "Draft.FactorialsMoreTemplates" via "Draft.Factorials")
Loading theory "HOL-Library.Nat_Bijection" (required by "Draft.FactorialsMoreTemplates" via "Draft.ExtrEqs" via "HOL-Library.Stream")
instantiation
  fun :: (type, plus) plus
  plus_fun == plus :: ('a => 'b) => ('a => 'b) => 'a => 'b
instantiation
  set :: (plus) plus
  plus_set == plus :: 'a set => 'a set => 'a set
instantiation
  fun :: (type, zero) zero
  zero_fun == zero_class.zero :: 'a => 'b
instantiation
  set :: (times) times
  times_set == times :: 'a set => 'a set => 'a set
instantiation
  fun :: (type, times) times
  times_fun == times :: ('a => 'b) => ('a => 'b) => 'a => 'b
instantiation
  set :: (zero) zero
  zero_set == zero_class.zero :: 'a set
instantiation
  fun :: (type, one) one
  one_fun == one_class.one :: 'a => 'b
instantiation
  set :: (one) one
  one_set == one_class.one :: 'a set
Found termination order: "(%p. size (snd p)) <*mlex*> {}"
### theory "HOL-Library.Function_Algebras"
### 0.138s elapsed time, 0.565s cpu time, 0.051s GC time
Loading theory "HOL-Library.Tree" (required by "Draft.FactorialsMoreTemplates" via "Draft.ExtrEqs" via "Draft.Templates")
Found termination order:
  "(%p. size (snd p)) <*mlex*> (%p. size (fst p)) <*mlex*> {}"
### theory "HOL-Library.Set_Algebras"
### 0.232s elapsed time, 0.944s cpu time, 0.051s GC time
Loading theory "HOL-Library.BigO" (required by "Draft.FactorialsMoreTemplates" via "Draft.ExtrEqs")
Found termination order:
  "(%p. size (snd p)) <*mlex*> (%p. size (fst p)) <*mlex*> {}"
Found termination order: "size_list size <*mlex*> {}"
consts
  stirling_row_aux :: "'a => 'a => 'a list => 'a list"
### theory "HOL-Combinatorics.Stirling"
### 0.373s elapsed time, 1.491s cpu time, 0.145s GC time
Loading theory "Draft.Factorials" (required by "Draft.FactorialsMoreTemplates")
### theory "HOL-Library.Nat_Bijection"
### 0.418s elapsed time, 1.664s cpu time, 0.145s GC time
Loading theory "HOL-Library.Stream" (required by "Draft.FactorialsMoreTemplates" via "Draft.ExtrEqs")
consts
  left :: "'a tree => 'a tree"
### theory "Draft.Factorials"
### 0.267s elapsed time, 1.048s cpu time, 0.072s GC time
consts
  right :: "'a tree => 'a tree"
Found termination order: "size <*mlex*> {}"
Found termination order: "size <*mlex*> {}"
consts
  shift :: "'a list => 'a stream => 'a stream"
Proofs for coinductive predicate(s) "streamsp"
  Proving monotonicity ...
Found termination order: "size <*mlex*> {}"
class height = type +
  fixes height :: "'a => nat"
instantiation
  tree :: (type) height
  height_tree == height :: 'a tree => nat
consts
  snth :: "'a stream => nat => 'a"
consts
  stake :: "nat => 'a stream => 'a list"
consts
  sdrop :: "nat => 'a stream => 'a stream"
Found termination order: "size <*mlex*> {}"
consts
  sfilter :: "('a => bool) => 'a stream => 'a stream"
### theory "HOL-Library.BigO"
### 0.736s elapsed time, 2.606s cpu time, 0.300s GC time
consts
  cycle :: "'a list => 'a stream"
Found termination order: "size <*mlex*> {}"
consts
  siterate :: "('a => 'a) => 'a => 'a stream"
Found termination order: "size <*mlex*> {}"
consts
  flat :: "'a list stream => 'a stream"
consts
  sinterleave :: "'a stream => 'a stream => 'a stream"
Found termination order: "size <*mlex*> {}"
consts
  szip :: "'a stream => 'b stream => ('a * 'b) stream"
consts
  smap2 :: "('a => 'b => 'c) => 'a stream => 'b stream => 'c stream"
Found termination order: "size <*mlex*> {}"
### theory "HOL-Library.Stream"
### 0.950s elapsed time, 2.853s cpu time, 0.696s GC time
Found termination order: "size <*mlex*> {}"
Found termination order: "size <*mlex*> {}"
Found termination order: "(%p. size (fst p)) <*mlex*> {}"
Found termination order: "size <*mlex*> {}"
Found termination order: "(%p. size (snd p)) <*mlex*> {}"
Found termination order: "size <*mlex*> {}"
### theory "HOL-Library.Tree"
### 1.873s elapsed time, 4.679s cpu time, 0.871s GC time
Loading theory "Draft.Templates" (required by "Draft.FactorialsMoreTemplates" via "Draft.ExtrEqs")
datatype template_term
=
     t_empty
   | template_app of template_term * template_term
   | template_hole of int
   | template_var of int
datatype sign
= equals | greater_equals | greater_than | less_equals | less_than
datatype template
=
     template_bimplication of template * template
   | template_dunno
   | template_equation of template_term * template_term
   | template_implication of template list * template
   | template_inequation of sign * template_term * template_term
   | template_negation of template
   | template_predicate of template_term
constructor t_empty: template_term
constructor template_app: template_term * template_term -> template_term
constructor template_hole: int -> template_term
constructor template_var: int -> template_term
constructor equals: sign
constructor greater_equals: sign
constructor greater_than: sign
constructor less_equals: sign
constructor less_than: sign
constructor template_bimplication: template * template -> template
constructor template_dunno: template
constructor template_equation: template_term * template_term -> template
constructor template_implication: template list * template -> template
constructor template_inequation:
   sign * template_term * template_term -> template
constructor template_negation: template -> template
constructor template_predicate: template_term -> template
val vfs = fn: term -> (indexname * typ) list * (string * typ) list
val indexOf = fn: ''a list -> ''a -> int -> int
val has_eq = fn: term -> bool
val term2template = fn:
   (indexname * typ) list -> (string * typ) list -> term -> template_term
val lemma2predicate = fn: term -> term -> template
val makeTemplatewithContext = fn: term -> term -> template
val lemma2template = fn: term -> template
val thm2template = fn: thm -> template
val tterm2string = fn: template_term -> string
val template2string = fn: template -> string
val t = "height ?t <= size ?t": thm
val th =
   Const ("HOL.Trueprop", "bool => prop") $
     (Const ("Orderings.ord_class.less_eq", "nat => nat => bool") $
       (Const ("Tree.height_class.height", "?'a tree => nat") $
         Var (("t", 0), "?'a tree")) $
       (Const ("Nat.size_class.size", "?'a tree => nat") $
         Var (("t", 0), "?'a tree"))):
   term
### theory "Draft.Templates"
### 0.050s elapsed time, 0.064s cpu time, 0.000s GC time
Loading theory "Draft.ExtrEqs" (required by "Draft.FactorialsMoreTemplates")
val eqpattern =
   Pattern
    (
       Const ("HOL.Trueprop", "bool => prop") $
         (Const ("HOL.eq", "?'a => ?'a => bool") $
           Var (("_dummy_", 1), "?'a") $ Var (("_dummy_", 2), "?'a"))
       ):
   term Find_Theorems.criterion
val badeqpattern = Pattern (Const ("Pure.eq", "?'a => ?'a => prop")):
   term Find_Theorems.criterion
val undefpattern =
   Pattern
    (
       Const ("HOL.Trueprop", "bool => prop") $
         (Const ("HOL.eq", "?'a => ?'a => bool") $
           Var (("_dummy_", 1), "?'a") $ Const ("HOL.undefined", "?'a"))
       ):
   term Find_Theorems.criterion
val thmpattern =
   Pattern
    (Const ("HOL.Trueprop", "bool => prop") $ Var (("_dummy_", 1), "bool")):
   term Find_Theorems.criterion
val badnames =
   ["*nitpick*", "*Nitpick*", "*full_exhaustive*", "*_def*", "Enum.finite*",
    "*Quickcheck*", "ATP*", "*Nunchaku*", "*Code*", "*BNF*", "*SMT*",
    "*.*.*"]:
   string list
val unwanted_names =
   [(false, Name "*nitpick*"), (false, Name "*Nitpick*"),
    (false, Name "*full_exhaustive*"), (false, Name "*_def*"),
    (false, Name "Enum.finite*"), (false, Name "*Quickcheck*"),
    (false, Name "ATP*"), (false, Name "*Nunchaku*"),
    (false, Name "*Code*"), (false, Name "*BNF*"), (false, Name "*SMT*"),
    (false, Name "*.*.*")]:
   (bool * term Find_Theorems.criterion) list
val has_vars = fn: term -> bool
val get_all_eqs = fn: string -> Proof.context -> (string * thm) list
val get_all_thms = fn: string -> Proof.context -> (string * thm) list
val get_noneq_thms = fn: string -> Proof.context -> (string * thm) list
val template_eqs = fn:
   string -> Proof.context -> (string * thm * template) list
val template_thms = fn:
   string -> Proof.context -> (string * thm * template) list
### theory "Draft.ExtrEqs"
### 0.477s elapsed time, 0.523s cpu time, 0.056s GC time
Loading theory "Draft.FactorialsMoreTemplates"
val templateLemmas =
   [("Factorials.ffact_fact", "ffact ?n (of_nat ?n) = of_nat (fact ?n)",
     template_equation
      (template_app
        (template_app (template_hole 2, template_var 0),
         template_app (template_hole 1, template_var 0)),
       template_app
        (template_hole 1, template_app (template_hole 0, template_var 0)))),
    ("Factorials.of_int_ffact",
     "of_int (ffact ?n ?k) = ffact ?n (of_int ?k)",
     template_equation
      (template_app
        (template_hole 2,
         template_app
          (template_app (template_hole 1, template_var 1), template_var 0)),
       template_app
        (template_app (template_hole 0, template_var 1),
         template_app (template_hole 2, template_var 0)))),
    ("Factorials.of_nat_ffact",
     "of_nat (ffact ?n ?m) = ffact ?n (of_nat ?m)",
     template_equation
      (template_app
        (template_hole 2,
         template_app
          (template_app (template_hole 1, template_var 1), template_var 0)),
       template_app
        (template_app (template_hole 0, template_var 1),
         template_app (template_hole 2, template_var 0)))),
    ("Factorials.ffact_eq_fact_mult_binomial",
     "ffact ?k ?n = fact ?k * (?n choose ?k)",
     template_equation
      (template_app
        (template_app (template_hole 3, template_var 1), template_var 0),
       template_app
        (template_app
          (template_hole 2, template_app (template_hole 1, template_var 1)),
         template_app
          (template_app (template_hole 0, template_var 0),
           template_var 1)))),
    ("Factorials.pochhammer_0", "0 < ?n ==> pochhammer 0 ?n = 0",
     template_implication
      ([template_inequation (less_than, template_hole 2, template_var 0)],
       template_equation
        (template_app
          (template_app (template_hole 0, template_hole 2), template_var 0),
         template_hole 2))),
    ("Factorials.ffact_nat_triv", "?m < ?n ==> ffact ?n ?m = 0",
     template_implication
      ([template_inequation (less_than, template_var 1, template_var 0)],
       template_equation
        (template_app
          (template_app (template_hole 1, template_var 0), template_var 1),
         template_hole 0))),
    ("Factorials.ffact_Suc",
     "ffact (Suc ?n) ?a = ?a * ffact ?n (?a - (1::?'a))",
     template_equation
      (template_app
        (template_app
          (template_hole 4, template_app (template_hole 3, template_var 1)),
         template_var 0),
       template_app
        (template_app (template_hole 2, template_var 0),
         template_app
          (template_app (template_hole 4, template_var 1),
           template_app
            (template_app (template_hole 1, template_var 0),
             template_hole 0))))),
    ("Factorials.ffact_Suc_nat",
     "ffact (Suc ?n) ?m = ?m * ffact ?n (?m - 1)",
     template_equation
      (template_app
        (template_app
          (template_hole 4, template_app (template_hole 3, template_var 1)),
         template_var 0),
       template_app
        (template_app (template_hole 2, template_var 0),
         template_app
          (template_app (template_hole 4, template_var 1),
           template_app
            (template_app (template_hole 1, template_var 0),
             template_hole 0))))),
    ("Factorials.ffact_Suc_rev_nat",
     "ffact (Suc ?n) ?m = (?m - ?n) * ffact ?n ?m",
     template_equation
      (template_app
        (template_app
          (template_hole 3, template_app (template_hole 2, template_var 1)),
         template_var 0),
       template_app
        (template_app
          (template_hole 1,
           template_app
            (template_app (template_hole 0, template_var 0),
             template_var 1)),
         template_app
          (template_app (template_hole 3, template_var 1),
           template_var 0)))),
    ("Factorials.prod_ffact_nat", "prod ((-) ?m) {0..<?n} = ffact ?n ?m",
     template_equation
      (template_app
        (template_app (template_hole 4, t_empty),
         template_app
          (template_app (template_hole 2, template_hole 1),
           template_var 0)),
       template_app
        (template_app (template_hole 0, template_var 0), template_var 1))),
    ("Factorials.prod_ffact",
     "(PROD i = 0..<?n. ?m - of_nat i) = ffact ?n ?m",
     template_equation
      (template_app
        (template_app (template_hole 5, t_empty),
         template_app
          (template_app (template_hole 2, template_hole 1),
           template_var 0)),
       template_app
        (template_app (template_hole 0, template_var 0), template_var 1))),
    ("Factorials.ffact_minus",
     "ffact ?n (- ?x) = (- (1::?'a)) ^ ?n * pochhammer ?x ?n",
     template_equation
      (template_app
        (template_app (template_hole 5, template_var 1),
         template_app (template_hole 4, template_var 0)),
       template_app
        (template_app
          (template_hole 3,
           template_app
            (template_app
              (template_hole 2,
               template_app (template_hole 4, template_hole 1)),
             template_var 1)),
         template_app
          (template_app (template_hole 0, template_var 0),
           template_var 1)))),
    ("Factorials.ffact_Suc_rev",
     "ffact (Suc ?n) ?m = (?m - of_nat ?n) * ffact ?n ?m",
     template_equation
      (template_app
        (template_app
          (template_hole 4, template_app (template_hole 3, template_var 1)),
         template_var 0),
       template_app
        (template_app
          (template_hole 2,
           template_app
            (template_app (template_hole 1, template_var 0),
             template_app (template_hole 0, template_var 1))),
         template_app
          (template_app (template_hole 4, template_var 1),
           template_var 0)))),
    ("Factorials.prod_rev_ffact",
     "(PROD i = 1..?n. ?m - of_nat ?n + of_nat i) = ffact ?n ?m",
     template_equation
      (template_app
        (template_app (template_hole 6, t_empty),
         template_app
          (template_app (template_hole 2, template_hole 1),
           template_var 0)),
       template_app
        (template_app (template_hole 0, template_var 0), template_var 1))),
    ("Factorials.fact_div_fact_ffact_nat",
     "?k <= ?n ==> fact ?n div fact (?n - ?k) = ffact ?k ?n",
     template_implication
      ([template_inequation (less_equals, template_var 1, template_var 0)],
       template_equation
        (template_app
          (template_app
            (template_hole 3,
             template_app (template_hole 2, template_var 0)),
           template_app
            (template_hole 2,
             template_app
              (template_app (template_hole 1, template_var 0),
               template_var 1))),
         template_app
          (template_app (template_hole 0, template_var 1),
           template_var 0)))),
    ("Factorials.fact_div_fact_ffact",
     "?m <= ?n ==> fact ?n div fact ?m = ffact (?n - ?m) ?n",
     template_implication
      ([template_inequation (less_equals, template_var 1, template_var 0)],
       template_equation
        (template_app
          (template_app
            (template_hole 3,
             template_app (template_hole 2, template_var 0)),
           template_app (template_hole 2, template_var 1)),
         template_app
          (template_app
            (template_hole 1,
             template_app
              (template_app (template_hole 0, template_var 0),
               template_var 1)),
           template_var 0)))),
    ("Factorials.monomial_ffact",
     "?a ^ ?n = (SUM k = 0..?n. of_nat (Stirling ?n k) * ffact k ?a)",
     template_equation
      (template_app
        (template_app (template_hole 7, template_var 1), template_var 0),
       template_app
        (template_app (template_hole 6, t_empty),
         template_app
          (template_app (template_hole 1, template_hole 0),
           template_var 0)))),
    ("Factorials.mult_ffact",
     "?a * ffact ?n ?a = ffact (Suc ?n) ?a + of_nat ?n * ffact ?n ?a",
     template_equation
      (template_app
        (template_app (template_hole 4, template_var 1),
         template_app
          (template_app (template_hole 3, template_var 0), template_var 1)),
       template_app
        (template_app
          (template_hole 2,
           template_app
            (template_app
              (template_hole 3,
               template_app (template_hole 1, template_var 0)),
             template_var 1)),
         template_app
          (template_app
            (template_hole 4,
             template_app (template_hole 0, template_var 0)),
           template_app
            (template_app (template_hole 3, template_var 0),
             template_var 1))))),
    ("Factorials.prod_rev_ffact_nat'",
     "?n <= ?m ==> \<Prod>{?m - ?n + 1..?m} = ffact ?n ?m",
     template_implication
      ([template_inequation (less_equals, template_var 1, template_var 0)],
       template_equation
        (template_app
          (template_app (template_hole 5, t_empty),
           template_app
            (template_app
              (template_hole 4,
               template_app
                (template_app
                  (template_hole 3,
                   template_app
                    (template_app (template_hole 2, template_var 0),
                     template_var 1)),
                 template_hole 1)),
             template_var 0)),
         template_app
          (template_app (template_hole 0, template_var 1),
           template_var 0)))),
    ("Factorials.prod_rev_ffact_nat",
     "?n <= ?m ==> prod ((+) (?m - ?n)) {1..?n} = ffact ?n ?m",
     template_implication
      ([template_inequation (less_equals, template_var 1, template_var 0)],
       template_equation
        (template_app
          (template_app (template_hole 5, t_empty),
           template_app
            (template_app (template_hole 2, template_hole 1),
             template_var 1)),
         template_app
          (template_app (template_hole 0, template_var 1),
           template_var 0)))),
    ("Factorials.ffact_add_diff_assoc",
     "(?a - of_nat ?n) * ffact ?n ?a + of_nat ?n * ffact ?n ?a =
      ?a * ffact ?n ?a",
     template_equation
      (template_app
        (template_app
          (template_hole 4,
           template_app
            (template_app
              (template_hole 3,
               template_app
                (template_app (template_hole 2, template_var 1),
                 template_app (template_hole 1, template_var 0))),
             template_app
              (template_app (template_hole 0, template_var 0),
               template_var 1))),
         template_app
          (template_app
            (template_hole 3,
             template_app (template_hole 1, template_var 0)),
           template_app
            (template_app (template_hole 0, template_var 0),
             template_var 1))),
       template_app
        (template_app (template_hole 3, template_var 1),
         template_app
          (template_app (template_hole 0, template_var 0),
           template_var 1)))),
    ("Factorials.ffact_monomial",
     "ffact ?n ?a =
      (SUM k = 0..?n.
       (- (1::?'a)) ^ (?n - k) * of_nat (stirling ?n k) * ?a ^ k)",
     template_equation
      (template_app
        (template_app (template_hole 10, template_var 1), template_var 0),
       template_app
        (template_app (template_hole 9, t_empty),
         template_app
          (template_app (template_hole 1, template_hole 0),
           template_var 1))))]:
   (string * thm * template) list
### theory "Draft.FactorialsMoreTemplates"
### 0.282s elapsed time, 0.381s cpu time, 0.000s GC time
val it = (): unit
