Loading theory "Draft.AssocLists" (required by "Draft.ReachabilityMoreTemplates" via "Draft.Reachability" via "Draft.Language")
Loading theory "HOL-Library.Function_Algebras" (required by "Draft.ReachabilityMoreTemplates" via "Draft.ExtrEqs" via "HOL-Library.BigO")
Loading theory "HOL-Library.Nat_Bijection" (required by "Draft.ReachabilityMoreTemplates" via "Draft.ExtrEqs" via "HOL-Library.Stream")
Loading theory "HOL-Library.Set_Algebras" (required by "Draft.ReachabilityMoreTemplates" via "Draft.ExtrEqs" via "HOL-Library.BigO")
instantiation
  fun :: (type, plus) plus
  plus_fun == plus :: ('a => 'b) => ('a => 'b) => 'a => 'b
instantiation
  set :: (plus) plus
  plus_set == plus :: 'a set => 'a set => 'a set
consts
  lookup :: "('a * 'b) list => 'a => 'b option"
instantiation
  fun :: (type, zero) zero
  zero_fun == zero_class.zero :: 'a => 'b
### Ambiguous input (line 26 of "$AFP/BytecodeLogicJmlTypes/AssocLists.thy") produces 2 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.All_binder" ("_idts" ("_position" a) ("_position" b))
###     ("\<^const>HOL.implies"
###       ("\<^const>HOL.eq"
###         ("\<^const>AssocLists.lookup" ("_position" L) ("_position" a))
###         ("_applC" ("_position" Some) ("_position" b)))
###       ("\<^const>Set.member"
###         ("_tuple" ("_position" a) ("_tuple_arg" ("_position" b)))
###         ("_applC" ("_position" set) ("_position" L))))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.All_binder" ("_idts" ("_position" a) ("_position" b))
###     ("\<^const>HOL.implies"
###       ("\<^const>AssocLists.lookup" ("_position" L)
###         ("\<^const>HOL.eq" ("_position" a)
###           ("_applC" ("_position" Some) ("_position" b))))
###       ("\<^const>Set.member"
###         ("_tuple" ("_position" a) ("_tuple_arg" ("_position" b)))
###         ("_applC" ("_position" set) ("_position" L))))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 29 of "$AFP/BytecodeLogicJmlTypes/AssocLists.thy") produces 3 parse trees:
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>HOL.eq" ("_position" a) ("_position" b)))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>AssocLists.lookup"
###       ("\<^const>AssocLists.lookup" ("_position" L)
###         ("\<^const>HOL.eq" ("_position" a) ("_position" L)))
###       ("_position" b))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>HOL.eq" ("_position" a) ("_position" b)))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>AssocLists.lookup" ("_position" L)
###       ("\<^const>HOL.eq" ("_position" a)
###         ("\<^const>AssocLists.lookup" ("_position" L) ("_position" b))))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>HOL.eq" ("_position" a) ("_position" b)))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>HOL.eq"
###       ("\<^const>AssocLists.lookup" ("_position" L) ("_position" a))
###       ("\<^const>AssocLists.lookup" ("_position" L) ("_position" b)))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
instantiation
  fun :: (type, times) times
  times_fun == times :: ('a => 'b) => ('a => 'b) => 'a => 'b
instantiation
  set :: (times) times
  times_set == times :: 'a set => 'a set => 'a set
### Ambiguous input (line 31 of "$AFP/BytecodeLogicJmlTypes/AssocLists.thy") produces 4 parse trees:
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>HOL.eq"
###         ("\<^const>AssocLists.lookup" ("_position" L) ("_position" a))
###         ("_position" X)))
###     ("_asm"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>HOL.eq"
###           ("\<^const>AssocLists.lookup" ("_position" L) ("_position" a))
###           ("_position" Y)))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>HOL.eq" ("_position" X) ("_position" Y))))
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>AssocLists.lookup" ("_position" L)
###         ("\<^const>HOL.eq" ("_position" a) ("_position" X))))
###     ("_asm"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>HOL.eq"
###           ("\<^const>AssocLists.lookup" ("_position" L) ("_position" a))
###           ("_position" Y)))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>HOL.eq" ("_position" X) ("_position" Y))))
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>HOL.eq"
###         ("\<^const>AssocLists.lookup" ("_position" L) ("_position" a))
###         ("_position" X)))
###     ("_asm"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>AssocLists.lookup" ("_position" L)
###           ("\<^const>HOL.eq" ("_position" a) ("_position" Y))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>HOL.eq" ("_position" X) ("_position" Y))))
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>AssocLists.lookup" ("_position" L)
###         ("\<^const>HOL.eq" ("_position" a) ("_position" X))))
###     ("_asm"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>AssocLists.lookup" ("_position" L)
###           ("\<^const>HOL.eq" ("_position" a) ("_position" Y))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>HOL.eq" ("_position" X) ("_position" Y))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 33 of "$AFP/BytecodeLogicJmlTypes/AssocLists.thy") produces 4 parse trees:
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>HOL.eq" ("_position" L) ("_position" M)))
###     ("_asm"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>HOL.eq"
###           ("\<^const>AssocLists.lookup" ("_position" M) ("_position" b))
###           ("_position" X)))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>AssocLists.lookup" ("_position" L)
###       ("\<^const>HOL.eq" ("_position" b) ("_position" X)))))
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>HOL.eq" ("_position" L) ("_position" M)))
###     ("_asm"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>AssocLists.lookup" ("_position" M)
###           ("\<^const>HOL.eq" ("_position" b) ("_position" X))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>AssocLists.lookup" ("_position" L)
###       ("\<^const>HOL.eq" ("_position" b) ("_position" X)))))
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>HOL.eq" ("_position" L) ("_position" M)))
###     ("_asm"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>HOL.eq"
###           ("\<^const>AssocLists.lookup" ("_position" M) ("_position" b))
###           ("_position" X)))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>HOL.eq"
###       ("\<^const>AssocLists.lookup" ("_position" L) ("_position" b))
###       ("_position" X))))
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>HOL.eq" ("_position" L) ("_position" M)))
###     ("_asm"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>AssocLists.lookup" ("_position" M)
###           ("\<^const>HOL.eq" ("_position" b) ("_position" X))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>HOL.eq"
###       ("\<^const>AssocLists.lookup" ("_position" L) ("_position" b))
###       ("_position" X))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
instantiation
  fun :: (type, one) one
  one_fun == one_class.one :: 'a => 'b
### Ambiguous input (line 35 of "$AFP/BytecodeLogicJmlTypes/AssocLists.thy") produces 4 parse trees:
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>HOL.eq" ("_position" L) ("_position" M)))
###     ("_asm"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>HOL.eq"
###           ("\<^const>AssocLists.lookup" ("_position" L) ("_position" b))
###           ("_position" X)))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>AssocLists.lookup" ("_position" M)
###       ("\<^const>HOL.eq" ("_position" b) ("_position" X)))))
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>HOL.eq" ("_position" L) ("_position" M)))
###     ("_asm"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>AssocLists.lookup" ("_position" L)
###           ("\<^const>HOL.eq" ("_position" b) ("_position" X))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>AssocLists.lookup" ("_position" M)
###       ("\<^const>HOL.eq" ("_position" b) ("_position" X)))))
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>HOL.eq" ("_position" L) ("_position" M)))
###     ("_asm"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>HOL.eq"
###           ("\<^const>AssocLists.lookup" ("_position" L) ("_position" b))
###           ("_position" X)))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>HOL.eq"
###       ("\<^const>AssocLists.lookup" ("_position" M) ("_position" b))
###       ("_position" X))))
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>HOL.eq" ("_position" L) ("_position" M)))
###     ("_asm"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>AssocLists.lookup" ("_position" L)
###           ("\<^const>HOL.eq" ("_position" b) ("_position" X))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>HOL.eq"
###       ("\<^const>AssocLists.lookup" ("_position" M) ("_position" b))
###       ("_position" X))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
instantiation
  set :: (zero) zero
  zero_set == zero_class.zero :: 'a set
consts
  delete :: "('a * 'b) list => 'a => ('a * 'b) list"
instantiation
  set :: (one) one
  one_set == one_class.one :: 'a set
### Ambiguous input (line 50 of "$AFP/BytecodeLogicJmlTypes/AssocLists.thy") produces 2 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>AssocLists.lookup"
###     ("_applC" ("_position" delete)
###       ("_cargs" ("_position" L) ("_position" a)))
###     ("\<^const>HOL.eq" ("_position" a) ("_position" None))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("\<^const>AssocLists.lookup"
###       ("_applC" ("_position" delete)
###         ("_cargs" ("_position" L) ("_position" a)))
###       ("_position" a))
###     ("_position" None)))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 53 of "$AFP/BytecodeLogicJmlTypes/AssocLists.thy") produces 3 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.implies"
###     ("\<^const>HOL.not_equal" ("_position" b) ("_position" a))
###     ("\<^const>AssocLists.lookup"
###       ("\<^const>AssocLists.lookup"
###         ("_applC" ("_position" delete)
###           ("_cargs" ("_position" l) ("_position" a)))
###         ("\<^const>HOL.eq" ("_position" b) ("_position" l)))
###       ("_position" b))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.implies"
###     ("\<^const>HOL.not_equal" ("_position" b) ("_position" a))
###     ("\<^const>HOL.eq"
###       ("\<^const>AssocLists.lookup"
###         ("_applC" ("_position" delete)
###           ("_cargs" ("_position" l) ("_position" a)))
###         ("_position" b))
###       ("\<^const>AssocLists.lookup" ("_position" l) ("_position" b)))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.implies"
###     ("\<^const>HOL.not_equal" ("_position" b) ("_position" a))
###     ("\<^const>AssocLists.lookup"
###       ("_applC" ("_position" delete)
###         ("_cargs" ("_position" l) ("_position" a)))
###       ("\<^const>HOL.eq" ("_position" b)
###         ("\<^const>AssocLists.lookup" ("_position" l) ("_position" b))))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 56 of "$AFP/BytecodeLogicJmlTypes/AssocLists.thy") produces 4 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>AssocLists.lookup" ("_position" L)
###     ("\<^const>Pure.imp"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>HOL.eq" ("_position" a) ("_position" None)))
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>HOL.eq"
###           ("_applC" ("_position" delete)
###             ("_cargs" ("_position" L) ("_position" a)))
###           ("_position" L))))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>AssocLists.lookup" ("_position" L)
###       ("\<^const>HOL.eq" ("_position" a) ("_position" None))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>HOL.eq"
###       ("_applC" ("_position" delete)
###         ("_cargs" ("_position" L) ("_position" a)))
###       ("_position" L))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>HOL.eq"
###       ("\<^const>AssocLists.lookup" ("_position" L) ("_position" a))
###       ("_position" None)))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>HOL.eq"
###       ("_applC" ("_position" delete)
###         ("_cargs" ("_position" L) ("_position" a)))
###       ("_position" L))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("\<^const>AssocLists.lookup" ("_position" L)
###       ("\<^const>Pure.imp"
###         ("\<^const>HOL.Trueprop"
###           ("\<^const>HOL.eq" ("_position" a) ("_position" None)))
###         ("\<^const>HOL.Trueprop"
###           ("_applC" ("_position" delete)
###             ("_cargs" ("_position" L) ("_position" a))))))
###     ("_position" L)))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 67 of "$AFP/BytecodeLogicJmlTypes/AssocLists.thy") produces 4 parse trees:
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>HOL.not_equal" ("_position" b) ("_position" a)))
###     ("_asm"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>HOL.eq"
###           ("\<^const>AssocLists.lookup" ("_position" l) ("_position" b))
###           ("_position" x)))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>AssocLists.lookup"
###       ("_applC" ("_position" delete)
###         ("_cargs" ("_position" l) ("_position" a)))
###       ("\<^const>HOL.eq" ("_position" b) ("_position" x)))))
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>HOL.not_equal" ("_position" b) ("_position" a)))
###     ("_asm"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>AssocLists.lookup" ("_position" l)
###           ("\<^const>HOL.eq" ("_position" b) ("_position" x))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>AssocLists.lookup"
###       ("_applC" ("_position" delete)
###         ("_cargs" ("_position" l) ("_position" a)))
###       ("\<^const>HOL.eq" ("_position" b) ("_position" x)))))
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>HOL.not_equal" ("_position" b) ("_position" a)))
###     ("_asm"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>HOL.eq"
###           ("\<^const>AssocLists.lookup" ("_position" l) ("_position" b))
###           ("_position" x)))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>HOL.eq"
###       ("\<^const>AssocLists.lookup"
###         ("_applC" ("_position" delete)
###           ("_cargs" ("_position" l) ("_position" a)))
###         ("_position" b))
###       ("_position" x))))
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>HOL.not_equal" ("_position" b) ("_position" a)))
###     ("_asm"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>AssocLists.lookup" ("_position" l)
###           ("\<^const>HOL.eq" ("_position" b) ("_position" x))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>HOL.eq"
###       ("\<^const>AssocLists.lookup"
###         ("_applC" ("_position" delete)
###           ("_cargs" ("_position" l) ("_position" a)))
###         ("_position" b))
###       ("_position" x))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 84 of "$AFP/BytecodeLogicJmlTypes/AssocLists.thy") produces 4 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>AssocLists.lookup"
###     ("_applC"
###       ("_constrain" ("_position" L)
###         ("_tappl" ("_position_sort" 'a) ("_position_sort" 'b)
###           ("_type_name" AssList)))
###       ("_Map" ("_maplet" ("_position" a) ("_position" b))))
###     ("\<^const>HOL.eq" ("_position" a)
###       ("_applC" ("_position" Some) ("_position" b)))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>AssocLists.lookup"
###     ("\<^const>AssocLists.upd"
###       ("_constrain" ("_position" L)
###         ("_tappl" ("_position_sort" 'a) ("_position_sort" 'b)
###           ("_type_name" AssList)))
###       ("_position" a) ("_position" b))
###     ("\<^const>HOL.eq" ("_position" a)
###       ("_applC" ("_position" Some) ("_position" b)))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("\<^const>AssocLists.lookup"
###       ("_applC"
###         ("_constrain" ("_position" L)
###           ("_tappl" ("_position_sort" 'a) ("_position_sort" 'b)
###             ("_type_name" AssList)))
###         ("_Map" ("_maplet" ("_position" a) ("_position" b))))
###       ("_position" a))
###     ("_applC" ("_position" Some) ("_position" b))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("\<^const>AssocLists.lookup"
###       ("\<^const>AssocLists.upd"
###         ("_constrain" ("_position" L)
###           ("_tappl" ("_position_sort" 'a) ("_position_sort" 'b)
###             ("_type_name" AssList)))
###         ("_position" a) ("_position" b))
###       ("_position" a))
###     ("_applC" ("_position" Some) ("_position" b))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 87 of "$AFP/BytecodeLogicJmlTypes/AssocLists.thy") produces 4 parse trees:
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>HOL.eq" ("_position" a) ("_position" c)))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>AssocLists.lookup"
###       ("_applC"
###         ("_constrain" ("_position" L)
###           ("_tappl" ("_position_sort" 'a) ("_position_sort" 'b)
###             ("_type_name" AssList)))
###         ("_Map" ("_maplet" ("_position" a) ("_position" b))))
###       ("\<^const>HOL.eq" ("_position" c)
###         ("_applC" ("_position" Some) ("_position" b))))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>HOL.eq" ("_position" a) ("_position" c)))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>AssocLists.lookup"
###       ("\<^const>AssocLists.upd"
###         ("_constrain" ("_position" L)
###           ("_tappl" ("_position_sort" 'a) ("_position_sort" 'b)
###             ("_type_name" AssList)))
###         ("_position" a) ("_position" b))
###       ("\<^const>HOL.eq" ("_position" c)
###         ("_applC" ("_position" Some) ("_position" b))))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>HOL.eq" ("_position" a) ("_position" c)))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>HOL.eq"
###       ("\<^const>AssocLists.lookup"
###         ("_applC"
###           ("_constrain" ("_position" L)
###             ("_tappl" ("_position_sort" 'a) ("_position_sort" 'b)
###               ("_type_name" AssList)))
###           ("_Map" ("_maplet" ("_position" a) ("_position" b))))
###         ("_position" c))
###       ("_applC" ("_position" Some) ("_position" b)))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>HOL.eq" ("_position" a) ("_position" c)))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>HOL.eq"
###       ("\<^const>AssocLists.lookup"
###         ("\<^const>AssocLists.upd"
###           ("_constrain" ("_position" L)
###             ("_tappl" ("_position_sort" 'a) ("_position_sort" 'b)
###               ("_type_name" AssList)))
###           ("_position" a) ("_position" b))
###         ("_position" c))
###       ("_applC" ("_position" Some) ("_position" b)))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 89 of "$AFP/BytecodeLogicJmlTypes/AssocLists.thy") produces 6 parse trees:
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>HOL.not_equal" ("_position" a) ("_position" b)))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>AssocLists.lookup"
###       ("\<^const>AssocLists.lookup"
###         ("_applC"
###           ("_constrain" ("_position" L)
###             ("_tappl" ("_position_sort" 'a) ("_position_sort" 'b)
###               ("_type_name" AssList)))
###           ("_Map" ("_maplet" ("_position" a) ("_position" v))))
###         ("\<^const>HOL.eq" ("_position" b) ("_position" L)))
###       ("_position" b))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>HOL.not_equal" ("_position" a) ("_position" b)))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>AssocLists.lookup"
###       ("\<^const>AssocLists.lookup"
###         ("\<^const>AssocLists.upd"
###           ("_constrain" ("_position" L)
###             ("_tappl" ("_position_sort" 'a) ("_position_sort" 'b)
###               ("_type_name" AssList)))
###           ("_position" a) ("_position" v))
###         ("\<^const>HOL.eq" ("_position" b) ("_position" L)))
###       ("_position" b))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>HOL.not_equal" ("_position" a) ("_position" b)))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>AssocLists.lookup"
###       ("_applC"
###         ("_constrain" ("_position" L)
###           ("_tappl" ("_position_sort" 'a) ("_position_sort" 'b)
###             ("_type_name" AssList)))
###         ("_Map" ("_maplet" ("_position" a) ("_position" v))))
###       ("\<^const>HOL.eq" ("_position" b)
###         ("\<^const>AssocLists.lookup" ("_position" L) ("_position" b))))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>HOL.not_equal" ("_position" a) ("_position" b)))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>AssocLists.lookup"
###       ("\<^const>AssocLists.upd"
###         ("_constrain" ("_position" L)
###           ("_tappl" ("_position_sort" 'a) ("_position_sort" 'b)
###             ("_type_name" AssList)))
###         ("_position" a) ("_position" v))
###       ("\<^const>HOL.eq" ("_position" b)
###         ("\<^const>AssocLists.lookup" ("_position" L) ("_position" b))))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>HOL.not_equal" ("_position" a) ("_position" b)))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>HOL.eq"
###       ("\<^const>AssocLists.lookup"
###         ("_applC"
###           ("_constrain" ("_position" L)
###             ("_tappl" ("_position_sort" 'a) ("_position_sort" 'b)
###               ("_type_name" AssList)))
###           ("_Map" ("_maplet" ("_position" a) ("_position" v))))
###         ("_position" b))
###       ("\<^const>AssocLists.lookup" ("_position" L) ("_position" b)))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>HOL.not_equal" ("_position" a) ("_position" b)))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>HOL.eq"
###       ("\<^const>AssocLists.lookup"
###         ("\<^const>AssocLists.upd"
###           ("_constrain" ("_position" L)
###             ("_tappl" ("_position_sort" 'a) ("_position_sort" 'b)
###               ("_type_name" AssList)))
###           ("_position" a) ("_position" v))
###         ("_position" b))
###       ("\<^const>AssocLists.lookup" ("_position" L) ("_position" b)))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
Found termination order: "(%p. size (snd p)) <*mlex*> {}"
### theory "HOL-Library.Function_Algebras"
### 0.139s elapsed time, 0.562s cpu time, 0.041s GC time
Loading theory "HOL-Library.Tree" (required by "Draft.ReachabilityMoreTemplates" via "Draft.ExtrEqs" via "Draft.Templates")
### Ambiguous input (line 92 of "$AFP/BytecodeLogicJmlTypes/AssocLists.thy") produces 8 parse trees:
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>HOL.eq"
###         ("\<^const>AssocLists.lookup"
###           ("\<^const>AssocLists.upd"
###             ("_constrain" ("_position" L)
###               ("_tappl" ("_position_sort" 'a) ("_position_sort" 'b)
###                 ("_type_name" AssList)))
###             ("_position" a) ("_position" v))
###           ("_position" b))
###         ("_position" X)))
###     ("_asm"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>HOL.not_equal" ("_position" a) ("_position" b)))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>AssocLists.lookup" ("_position" L)
###       ("\<^const>HOL.eq" ("_position" b) ("_position" X)))))
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>HOL.eq"
###         ("\<^const>AssocLists.lookup"
###           ("_applC"
###             ("_constrain" ("_position" L)
###               ("_tappl" ("_position_sort" 'a) ("_position_sort" 'b)
###                 ("_type_name" AssList)))
###             ("_Map" ("_maplet" ("_position" a) ("_position" v))))
###           ("_position" b))
###         ("_position" X)))
###     ("_asm"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>HOL.not_equal" ("_position" a) ("_position" b)))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>AssocLists.lookup" ("_position" L)
###       ("\<^const>HOL.eq" ("_position" b) ("_position" X)))))
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>AssocLists.lookup"
###         ("\<^const>AssocLists.upd"
###           ("_constrain" ("_position" L)
###             ("_tappl" ("_position_sort" 'a) ("_position_sort" 'b)
###               ("_type_name" AssList)))
###           ("_position" a) ("_position" v))
###         ("\<^const>HOL.eq" ("_position" b) ("_position" X))))
###     ("_asm"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>HOL.not_equal" ("_position" a) ("_position" b)))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>AssocLists.lookup" ("_position" L)
###       ("\<^const>HOL.eq" ("_position" b) ("_position" X)))))
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>AssocLists.lookup"
###         ("_applC"
###           ("_constrain" ("_position" L)
###             ("_tappl" ("_position_sort" 'a) ("_position_sort" 'b)
###               ("_type_name" AssList)))
###           ("_Map" ("_maplet" ("_position" a) ("_position" v))))
###         ("\<^const>HOL.eq" ("_position" b) ("_position" X))))
###     ("_asm"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>HOL.not_equal" ("_position" a) ("_position" b)))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>AssocLists.lookup" ("_position" L)
###       ("\<^const>HOL.eq" ("_position" b) ("_position" X)))))
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>HOL.eq"
###         ("\<^const>AssocLists.lookup"
###           ("\<^const>AssocLists.upd"
###             ("_constrain" ("_position" L)
###               ("_tappl" ("_position_sort" 'a) ("_position_sort" 'b)
###                 ("_type_name" AssList)))
###             ("_position" a) ("_position" v))
###           ("_position" b))
###         ("_position" X)))
###     ("_asm"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>HOL.not_equal" ("_position" a) ("_position" b)))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>HOL.eq"
###       ("\<^const>AssocLists.lookup" ("_position" L) ("_position" b))
###       ("_position" X))))
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>HOL.eq"
###         ("\<^const>AssocLists.lookup"
###           ("_applC"
###             ("_constrain" ("_position" L)
###               ("_tappl" ("_position_sort" 'a) ("_position_sort" 'b)
###                 ("_type_name" AssList)))
###             ("_Map" ("_maplet" ("_position" a) ("_position" v))))
###           ("_position" b))
###         ("_position" X)))
###     ("_asm"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>HOL.not_equal" ("_position" a) ("_position" b)))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>HOL.eq"
###       ("\<^const>AssocLists.lookup" ("_position" L) ("_position" b))
###       ("_position" X))))
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>AssocLists.lookup"
###         ("\<^const>AssocLists.upd"
###           ("_constrain" ("_position" L)
###             ("_tappl" ("_position_sort" 'a) ("_position_sort" 'b)
###               ("_type_name" AssList)))
###           ("_position" a) ("_position" v))
###         ("\<^const>HOL.eq" ("_position" b) ("_position" X))))
###     ("_asm"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>HOL.not_equal" ("_position" a) ("_position" b)))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>HOL.eq"
###       ("\<^const>AssocLists.lookup" ("_position" L) ("_position" b))
###       ("_position" X))))
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>AssocLists.lookup"
###         ("_applC"
###           ("_constrain" ("_position" L)
###             ("_tappl" ("_position_sort" 'a) ("_position_sort" 'b)
###               ("_type_name" AssList)))
###           ("_Map" ("_maplet" ("_position" a) ("_position" v))))
###         ("\<^const>HOL.eq" ("_position" b) ("_position" X))))
###     ("_asm"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>HOL.not_equal" ("_position" a) ("_position" b)))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>HOL.eq"
###       ("\<^const>AssocLists.lookup" ("_position" L) ("_position" b))
###       ("_position" X))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 95 of "$AFP/BytecodeLogicJmlTypes/AssocLists.thy") produces 8 parse trees:
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>HOL.eq"
###         ("\<^const>AssocLists.lookup"
###           ("_constrain" ("_position" L)
###             ("_tappl" ("_position_sort" 'a) ("_position_sort" 'b)
###               ("_type_name" AssList)))
###           ("_position" b))
###         ("_applC" ("_position" Some) ("_position" X))))
###     ("_asm"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>HOL.not_equal" ("_position" a) ("_position" b)))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>AssocLists.lookup"
###       ("_applC" ("_position" L)
###         ("_Map" ("_maplet" ("_position" a) ("_position" v))))
###       ("\<^const>HOL.eq" ("_position" b)
###         ("_applC" ("_position" Some) ("_position" X))))))
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>AssocLists.lookup"
###         ("_constrain" ("_position" L)
###           ("_tappl" ("_position_sort" 'a) ("_position_sort" 'b)
###             ("_type_name" AssList)))
###         ("\<^const>HOL.eq" ("_position" b)
###           ("_applC" ("_position" Some) ("_position" X)))))
###     ("_asm"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>HOL.not_equal" ("_position" a) ("_position" b)))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>AssocLists.lookup"
###       ("_applC" ("_position" L)
###         ("_Map" ("_maplet" ("_position" a) ("_position" v))))
###       ("\<^const>HOL.eq" ("_position" b)
###         ("_applC" ("_position" Some) ("_position" X))))))
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>HOL.eq"
###         ("\<^const>AssocLists.lookup"
###           ("_constrain" ("_position" L)
###             ("_tappl" ("_position_sort" 'a) ("_position_sort" 'b)
###               ("_type_name" AssList)))
###           ("_position" b))
###         ("_applC" ("_position" Some) ("_position" X))))
###     ("_asm"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>HOL.not_equal" ("_position" a) ("_position" b)))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>AssocLists.lookup"
###       ("\<^const>AssocLists.upd" ("_position" L) ("_position" a)
###         ("_position" v))
###       ("\<^const>HOL.eq" ("_position" b)
###         ("_applC" ("_position" Some) ("_position" X))))))
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>AssocLists.lookup"
###         ("_constrain" ("_position" L)
###           ("_tappl" ("_position_sort" 'a) ("_position_sort" 'b)
###             ("_type_name" AssList)))
###         ("\<^const>HOL.eq" ("_position" b)
###           ("_applC" ("_position" Some) ("_position" X)))))
###     ("_asm"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>HOL.not_equal" ("_position" a) ("_position" b)))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>AssocLists.lookup"
###       ("\<^const>AssocLists.upd" ("_position" L) ("_position" a)
###         ("_position" v))
###       ("\<^const>HOL.eq" ("_position" b)
###         ("_applC" ("_position" Some) ("_position" X))))))
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>HOL.eq"
###         ("\<^const>AssocLists.lookup"
###           ("_constrain" ("_position" L)
###             ("_tappl" ("_position_sort" 'a) ("_position_sort" 'b)
###               ("_type_name" AssList)))
###           ("_position" b))
###         ("_applC" ("_position" Some) ("_position" X))))
###     ("_asm"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>HOL.not_equal" ("_position" a) ("_position" b)))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>HOL.eq"
###       ("\<^const>AssocLists.lookup"
###         ("_applC" ("_position" L)
###           ("_Map" ("_maplet" ("_position" a) ("_position" v))))
###         ("_position" b))
###       ("_applC" ("_position" Some) ("_position" X)))))
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>AssocLists.lookup"
###         ("_constrain" ("_position" L)
###           ("_tappl" ("_position_sort" 'a) ("_position_sort" 'b)
###             ("_type_name" AssList)))
###         ("\<^const>HOL.eq" ("_position" b)
###           ("_applC" ("_position" Some) ("_position" X)))))
###     ("_asm"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>HOL.not_equal" ("_position" a) ("_position" b)))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>HOL.eq"
###       ("\<^const>AssocLists.lookup"
###         ("_applC" ("_position" L)
###           ("_Map" ("_maplet" ("_position" a) ("_position" v))))
###         ("_position" b))
###       ("_applC" ("_position" Some) ("_position" X)))))
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>HOL.eq"
###         ("\<^const>AssocLists.lookup"
###           ("_constrain" ("_position" L)
###             ("_tappl" ("_position_sort" 'a) ("_position_sort" 'b)
###               ("_type_name" AssList)))
###           ("_position" b))
###         ("_applC" ("_position" Some) ("_position" X))))
###     ("_asm"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>HOL.not_equal" ("_position" a) ("_position" b)))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>HOL.eq"
###       ("\<^const>AssocLists.lookup"
###         ("\<^const>AssocLists.upd" ("_position" L) ("_position" a)
###           ("_position" v))
###         ("_position" b))
###       ("_applC" ("_position" Some) ("_position" X)))))
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>AssocLists.lookup"
###         ("_constrain" ("_position" L)
###           ("_tappl" ("_position_sort" 'a) ("_position_sort" 'b)
###             ("_type_name" AssList)))
###         ("\<^const>HOL.eq" ("_position" b)
###           ("_applC" ("_position" Some) ("_position" X)))))
###     ("_asm"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>HOL.not_equal" ("_position" a) ("_position" b)))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>HOL.eq"
###       ("\<^const>AssocLists.lookup"
###         ("\<^const>AssocLists.upd" ("_position" L) ("_position" a)
###           ("_position" v))
###         ("_position" b))
###       ("_applC" ("_position" Some) ("_position" X)))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 98 of "$AFP/BytecodeLogicJmlTypes/AssocLists.thy") produces 8 parse trees:
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>HOL.eq"
###         ("\<^const>AssocLists.lookup"
###           ("_constrain" ("_position" L)
###             ("_tappl" ("_position_sort" 'a) ("_position_sort" 'b)
###               ("_type_name" AssList)))
###           ("_position" b))
###         ("_position" M)))
###     ("_asm"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>HOL.not_equal" ("_position" a) ("_position" b)))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>AssocLists.lookup"
###       ("_applC" ("_position" L)
###         ("_Map" ("_maplet" ("_position" a) ("_position" X))))
###       ("\<^const>HOL.eq" ("_position" b) ("_position" M)))))
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>AssocLists.lookup"
###         ("_constrain" ("_position" L)
###           ("_tappl" ("_position_sort" 'a) ("_position_sort" 'b)
###             ("_type_name" AssList)))
###         ("\<^const>HOL.eq" ("_position" b) ("_position" M))))
###     ("_asm"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>HOL.not_equal" ("_position" a) ("_position" b)))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>AssocLists.lookup"
###       ("_applC" ("_position" L)
###         ("_Map" ("_maplet" ("_position" a) ("_position" X))))
###       ("\<^const>HOL.eq" ("_position" b) ("_position" M)))))
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>HOL.eq"
###         ("\<^const>AssocLists.lookup"
###           ("_constrain" ("_position" L)
###             ("_tappl" ("_position_sort" 'a) ("_position_sort" 'b)
###               ("_type_name" AssList)))
###           ("_position" b))
###         ("_position" M)))
###     ("_asm"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>HOL.not_equal" ("_position" a) ("_position" b)))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>AssocLists.lookup"
###       ("\<^const>AssocLists.upd" ("_position" L) ("_position" a)
###         ("_position" X))
###       ("\<^const>HOL.eq" ("_position" b) ("_position" M)))))
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>AssocLists.lookup"
###         ("_constrain" ("_position" L)
###           ("_tappl" ("_position_sort" 'a) ("_position_sort" 'b)
###             ("_type_name" AssList)))
###         ("\<^const>HOL.eq" ("_position" b) ("_position" M))))
###     ("_asm"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>HOL.not_equal" ("_position" a) ("_position" b)))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>AssocLists.lookup"
###       ("\<^const>AssocLists.upd" ("_position" L) ("_position" a)
###         ("_position" X))
###       ("\<^const>HOL.eq" ("_position" b) ("_position" M)))))
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>HOL.eq"
###         ("\<^const>AssocLists.lookup"
###           ("_constrain" ("_position" L)
###             ("_tappl" ("_position_sort" 'a) ("_position_sort" 'b)
###               ("_type_name" AssList)))
###           ("_position" b))
###         ("_position" M)))
###     ("_asm"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>HOL.not_equal" ("_position" a) ("_position" b)))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>HOL.eq"
###       ("\<^const>AssocLists.lookup"
###         ("_applC" ("_position" L)
###           ("_Map" ("_maplet" ("_position" a) ("_position" X))))
###         ("_position" b))
###       ("_position" M))))
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>AssocLists.lookup"
###         ("_constrain" ("_position" L)
###           ("_tappl" ("_position_sort" 'a) ("_position_sort" 'b)
###             ("_type_name" AssList)))
###         ("\<^const>HOL.eq" ("_position" b) ("_position" M))))
###     ("_asm"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>HOL.not_equal" ("_position" a) ("_position" b)))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>HOL.eq"
###       ("\<^const>AssocLists.lookup"
###         ("_applC" ("_position" L)
###           ("_Map" ("_maplet" ("_position" a) ("_position" X))))
###         ("_position" b))
###       ("_position" M))))
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>HOL.eq"
###         ("\<^const>AssocLists.lookup"
###           ("_constrain" ("_position" L)
###             ("_tappl" ("_position_sort" 'a) ("_position_sort" 'b)
###               ("_type_name" AssList)))
###           ("_position" b))
###         ("_position" M)))
###     ("_asm"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>HOL.not_equal" ("_position" a) ("_position" b)))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>HOL.eq"
###       ("\<^const>AssocLists.lookup"
###         ("\<^const>AssocLists.upd" ("_position" L) ("_position" a)
###           ("_position" X))
###         ("_position" b))
###       ("_position" M))))
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>AssocLists.lookup"
###         ("_constrain" ("_position" L)
###           ("_tappl" ("_position_sort" 'a) ("_position_sort" 'b)
###             ("_type_name" AssList)))
###         ("\<^const>HOL.eq" ("_position" b) ("_position" M))))
###     ("_asm"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>HOL.not_equal" ("_position" a) ("_position" b)))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>HOL.eq"
###       ("\<^const>AssocLists.lookup"
###         ("\<^const>AssocLists.upd" ("_position" L) ("_position" a)
###           ("_position" X))
###         ("_position" b))
###       ("_position" M))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 109 of "$AFP/BytecodeLogicJmlTypes/AssocLists.thy") produces 2 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>AssocLists.lookup" ("_position" emp)
###     ("\<^const>HOL.eq" ("_position" a) ("_position" None))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("\<^const>AssocLists.lookup" ("_position" emp) ("_position" a))
###     ("_position" None)))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 113 of "$AFP/BytecodeLogicJmlTypes/AssocLists.thy") produces 2 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq" ("_applC" ("_position" AL_isEmp) ("_position" l))
###     ("\<^const>HOL.All_binder" ("_position" a)
###       ("\<^const>AssocLists.lookup" ("_position" l)
###         ("\<^const>HOL.eq" ("_position" a) ("_position" None))))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq" ("_applC" ("_position" AL_isEmp) ("_position" l))
###     ("\<^const>HOL.All_binder" ("_position" a)
###       ("\<^const>HOL.eq"
###         ("\<^const>AssocLists.lookup" ("_position" l) ("_position" a))
###         ("_position" None)))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 117 of "$AFP/BytecodeLogicJmlTypes/AssocLists.thy") produces 9 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("_applC" ("_position" contained)
###       ("_cargs" ("_position" L) ("_position" M)))
###     ("\<^const>HOL.All_binder" ("_idts" ("_position" a) ("_position" b))
###       ("\<^const>HOL.eq"
###         ("\<^const>AssocLists.lookup"
###           ("\<^const>AssocLists.lookup" ("_position" L)
###             ("\<^const>HOL.implies"
###               ("\<^const>HOL.eq" ("_position" a)
###                 ("_applC" ("_position" Some) ("_position" b)))
###               ("_position" M)))
###           ("_position" a))
###         ("_applC" ("_position" Some) ("_position" b))))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("_applC" ("_position" contained)
###       ("_cargs" ("_position" L) ("_position" M)))
###     ("\<^const>HOL.All_binder" ("_idts" ("_position" a) ("_position" b))
###       ("\<^const>HOL.eq"
###         ("\<^const>AssocLists.lookup" ("_position" L)
###           ("\<^const>HOL.implies"
###             ("\<^const>HOL.eq" ("_position" a)
###               ("_applC" ("_position" Some) ("_position" b)))
###             ("\<^const>AssocLists.lookup" ("_position" M) ("_position" a))))
###         ("_applC" ("_position" Some) ("_position" b))))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("_applC" ("_position" contained)
###       ("_cargs" ("_position" L) ("_position" M)))
###     ("\<^const>HOL.All_binder" ("_idts" ("_position" a) ("_position" b))
###       ("\<^const>AssocLists.lookup"
###         ("\<^const>AssocLists.lookup" ("_position" L)
###           ("\<^const>HOL.implies"
###             ("\<^const>HOL.eq" ("_position" a)
###               ("_applC" ("_position" Some) ("_position" b)))
###             ("_position" M)))
###         ("\<^const>HOL.eq" ("_position" a)
###           ("_applC" ("_position" Some) ("_position" b)))))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("_applC" ("_position" contained)
###       ("_cargs" ("_position" L) ("_position" M)))
###     ("\<^const>HOL.All_binder" ("_idts" ("_position" a) ("_position" b))
###       ("\<^const>HOL.implies"
###         ("\<^const>AssocLists.lookup" ("_position" L)
###           ("\<^const>HOL.eq" ("_position" a)
###             ("_applC" ("_position" Some) ("_position" b))))
###         ("\<^const>AssocLists.lookup" ("_position" M)
###           ("\<^const>HOL.eq" ("_position" a)
###             ("_applC" ("_position" Some) ("_position" b))))))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("_applC" ("_position" contained)
###       ("_cargs" ("_position" L) ("_position" M)))
###     ("\<^const>HOL.All_binder" ("_idts" ("_position" a) ("_position" b))
###       ("\<^const>AssocLists.lookup" ("_position" L)
###         ("\<^const>HOL.implies"
###           ("\<^const>HOL.eq" ("_position" a)
###             ("_applC" ("_position" Some) ("_position" b)))
###           ("\<^const>AssocLists.lookup" ("_position" M)
###             ("\<^const>HOL.eq" ("_position" a)
###               ("_applC" ("_position" Some) ("_position" b)))))))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("_applC" ("_position" contained)
###       ("_cargs" ("_position" L) ("_position" M)))
###     ("\<^const>HOL.All_binder" ("_idts" ("_position" a) ("_position" b))
###       ("\<^const>HOL.implies"
###         ("\<^const>HOL.eq"
###           ("\<^const>AssocLists.lookup" ("_position" L) ("_position" a))
###           ("_applC" ("_position" Some) ("_position" b)))
###         ("\<^const>AssocLists.lookup" ("_position" M)
###           ("\<^const>HOL.eq" ("_position" a)
###             ("_applC" ("_position" Some) ("_position" b))))))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("_applC" ("_position" contained)
###       ("_cargs" ("_position" L) ("_position" M)))
###     ("\<^const>HOL.All_binder" ("_idts" ("_position" a) ("_position" b))
###       ("\<^const>HOL.implies"
###         ("\<^const>AssocLists.lookup" ("_position" L)
###           ("\<^const>HOL.eq" ("_position" a)
###             ("_applC" ("_position" Some) ("_position" b))))
###         ("\<^const>HOL.eq"
###           ("\<^const>AssocLists.lookup" ("_position" M) ("_position" a))
###           ("_applC" ("_position" Some) ("_position" b)))))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("_applC" ("_position" contained)
###       ("_cargs" ("_position" L) ("_position" M)))
###     ("\<^const>HOL.All_binder" ("_idts" ("_position" a) ("_position" b))
###       ("\<^const>AssocLists.lookup" ("_position" L)
###         ("\<^const>HOL.implies"
###           ("\<^const>HOL.eq" ("_position" a)
###             ("_applC" ("_position" Some) ("_position" b)))
###           ("\<^const>HOL.eq"
###             ("\<^const>AssocLists.lookup" ("_position" M) ("_position" a))
###             ("_applC" ("_position" Some) ("_position" b))))))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("_applC" ("_position" contained)
###       ("_cargs" ("_position" L) ("_position" M)))
###     ("\<^const>HOL.All_binder" ("_idts" ("_position" a) ("_position" b))
###       ("\<^const>HOL.implies"
###         ("\<^const>HOL.eq"
###           ("\<^const>AssocLists.lookup" ("_position" L) ("_position" a))
###           ("_applC" ("_position" Some) ("_position" b)))
###         ("\<^const>HOL.eq"
###           ("\<^const>AssocLists.lookup" ("_position" M) ("_position" a))
###           ("_applC" ("_position" Some) ("_position" b)))))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
Found termination order: "length <*mlex*> {}"
### Ambiguous input (line 129 of "$AFP/BytecodeLogicJmlTypes/AssocLists.thy") produces 2 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.All_binder" ("_position" n)
###     ("\<^const>HOL.implies"
###       ("\<^const>HOL.eq" ("\<^const>AssocLists.AL_Size" ("_position" L))
###         ("_applC" ("_position" Suc) ("_position" n)))
###       ("\<^const>HOL.Ex_binder" ("_idts" ("_position" a) ("_position" b))
###         ("\<^const>AssocLists.lookup" ("_position" L)
###           ("\<^const>HOL.eq" ("_position" a)
###             ("_applC" ("_position" Some) ("_position" b))))))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.All_binder" ("_position" n)
###     ("\<^const>HOL.implies"
###       ("\<^const>HOL.eq" ("\<^const>AssocLists.AL_Size" ("_position" L))
###         ("_applC" ("_position" Suc) ("_position" n)))
###       ("\<^const>HOL.Ex_binder" ("_idts" ("_position" a) ("_position" b))
###         ("\<^const>HOL.eq"
###           ("\<^const>AssocLists.lookup" ("_position" L) ("_position" a))
###           ("_applC" ("_position" Some) ("_position" b)))))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 136 of "$AFP/BytecodeLogicJmlTypes/AssocLists.thy") produces 4 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>AssocLists.lookup" ("_position" L)
###     ("\<^const>Pure.imp"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>HOL.eq" ("_position" a) ("_position" None)))
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>HOL.eq"
###           ("\<^const>AssocLists.AL_Size"
###             ("\<^const>AssocLists.upd" ("_position" L) ("_position" a)
###               ("_position" b)))
###           ("_applC" ("_position" Suc)
###             ("\<^const>AssocLists.AL_Size" ("_position" L))))))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>AssocLists.lookup" ("_position" L)
###       ("\<^const>HOL.eq" ("_position" a) ("_position" None))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>HOL.eq"
###       ("\<^const>AssocLists.AL_Size"
###         ("\<^const>AssocLists.upd" ("_position" L) ("_position" a)
###           ("_position" b)))
###       ("_applC" ("_position" Suc)
###         ("\<^const>AssocLists.AL_Size" ("_position" L))))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>HOL.eq"
###       ("\<^const>AssocLists.lookup" ("_position" L) ("_position" a))
###       ("_position" None)))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>HOL.eq"
###       ("\<^const>AssocLists.AL_Size"
###         ("\<^const>AssocLists.upd" ("_position" L) ("_position" a)
###           ("_position" b)))
###       ("_applC" ("_position" Suc)
###         ("\<^const>AssocLists.AL_Size" ("_position" L))))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("\<^const>AssocLists.lookup" ("_position" L)
###       ("\<^const>Pure.imp"
###         ("\<^const>HOL.Trueprop"
###           ("\<^const>HOL.eq" ("_position" a) ("_position" None)))
###         ("\<^const>HOL.Trueprop"
###           ("\<^const>AssocLists.AL_Size"
###             ("\<^const>AssocLists.upd" ("_position" L) ("_position" a)
###               ("_position" b))))))
###     ("_applC" ("_position" Suc)
###       ("\<^const>AssocLists.AL_Size" ("_position" L)))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
Found termination order: "size_list size <*mlex*> {}"
### theory "HOL-Library.Set_Algebras"
### 0.316s elapsed time, 1.252s cpu time, 0.111s GC time
Loading theory "HOL-Library.BigO" (required by "Draft.ReachabilityMoreTemplates" via "Draft.ExtrEqs")
### Ambiguous input (line 147 of "$AFP/BytecodeLogicJmlTypes/AssocLists.thy") produces 45 parse trees (10 displayed):
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.All_binder" ("_position" n)
###     ("\<^const>HOL.implies"
###       ("\<^const>HOL.eq" ("\<^const>AssocLists.AL_Size" ("_position" L))
###         ("_applC" ("_position" Suc) ("_position" n)))
###       ("\<^const>HOL.Ex_binder"
###         ("_idts" ("_position" a) ("_idts" ("_position" b) ("_position" M)))
###         ("\<^const>HOL.conj"
###           ("\<^const>HOL.eq" ("\<^const>AssocLists.AL_Size" ("_position" M))
###             ("_position" n))
###           ("\<^const>HOL.conj"
###             ("\<^const>HOL.eq"
###               ("\<^const>AssocLists.lookup"
###                 ("\<^const>AssocLists.lookup" ("_position" M)
###                   ("\<^const>HOL.conj"
###                     ("\<^const>HOL.eq" ("_position" a) ("_position" None))
###                     ("_position" L)))
###                 ("_position" a))
###               ("_applC" ("_position" Some) ("_position" b)))
###             ("\<^const>HOL.All_binder" ("_position" c)
###               ("\<^const>HOL.implies"
###                 ("\<^const>HOL.not_equal" ("_position" c) ("_position" a))
###                 ("\<^const>AssocLists.lookup"
###                   ("\<^const>AssocLists.lookup" ("_position" M)
###                     ("\<^const>HOL.eq" ("_position" c) ("_position" L)))
###                   ("_position" c))))))))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.All_binder" ("_position" n)
###     ("\<^const>HOL.implies"
###       ("\<^const>HOL.eq" ("\<^const>AssocLists.AL_Size" ("_position" L))
###         ("_applC" ("_position" Suc) ("_position" n)))
###       ("\<^const>HOL.Ex_binder"
###         ("_idts" ("_position" a) ("_idts" ("_position" b) ("_position" M)))
###         ("\<^const>HOL.conj"
###           ("\<^const>HOL.eq" ("\<^const>AssocLists.AL_Size" ("_position" M))
###             ("_position" n))
###           ("\<^const>HOL.conj"
###             ("\<^const>HOL.eq"
###               ("\<^const>AssocLists.lookup" ("_position" M)
###                 ("\<^const>HOL.conj"
###                   ("\<^const>HOL.eq" ("_position" a) ("_position" None))
###                   ("\<^const>AssocLists.lookup" ("_position" L)
###                     ("_position" a))))
###               ("_applC" ("_position" Some) ("_position" b)))
###             ("\<^const>HOL.All_binder" ("_position" c)
###               ("\<^const>HOL.implies"
###                 ("\<^const>HOL.not_equal" ("_position" c) ("_position" a))
###                 ("\<^const>AssocLists.lookup"
###                   ("\<^const>AssocLists.lookup" ("_position" M)
###                     ("\<^const>HOL.eq" ("_position" c) ("_position" L)))
###                   ("_position" c))))))))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.All_binder" ("_position" n)
###     ("\<^const>HOL.implies"
###       ("\<^const>HOL.eq" ("\<^const>AssocLists.AL_Size" ("_position" L))
###         ("_applC" ("_position" Suc) ("_position" n)))
###       ("\<^const>HOL.Ex_binder"
###         ("_idts" ("_position" a) ("_idts" ("_position" b) ("_position" M)))
###         ("\<^const>HOL.conj"
###           ("\<^const>HOL.eq" ("\<^const>AssocLists.AL_Size" ("_position" M))
###             ("_position" n))
###           ("\<^const>HOL.conj"
###             ("\<^const>AssocLists.lookup"
###               ("\<^const>AssocLists.lookup" ("_position" M)
###                 ("\<^const>HOL.conj"
###                   ("\<^const>HOL.eq" ("_position" a) ("_position" None))
###                   ("_position" L)))
###               ("\<^const>HOL.eq" ("_position" a)
###                 ("_applC" ("_position" Some) ("_position" b))))
###             ("\<^const>HOL.All_binder" ("_position" c)
###               ("\<^const>HOL.implies"
###                 ("\<^const>HOL.not_equal" ("_position" c) ("_position" a))
###                 ("\<^const>AssocLists.lookup"
###                   ("\<^const>AssocLists.lookup" ("_position" M)
###                     ("\<^const>HOL.eq" ("_position" c) ("_position" L)))
###                   ("_position" c))))))))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.All_binder" ("_position" n)
###     ("\<^const>HOL.implies"
###       ("\<^const>HOL.eq" ("\<^const>AssocLists.AL_Size" ("_position" L))
###         ("_applC" ("_position" Suc) ("_position" n)))
###       ("\<^const>HOL.Ex_binder"
###         ("_idts" ("_position" a) ("_idts" ("_position" b) ("_position" M)))
###         ("\<^const>HOL.conj"
###           ("\<^const>HOL.eq" ("\<^const>AssocLists.AL_Size" ("_position" M))
###             ("_position" n))
###           ("\<^const>HOL.conj"
###             ("\<^const>AssocLists.lookup" ("_position" M)
###               ("\<^const>HOL.conj"
###                 ("\<^const>HOL.eq" ("_position" a) ("_position" None))
###                 ("\<^const>AssocLists.lookup" ("_position" L)
###                   ("\<^const>HOL.eq" ("_position" a)
###                     ("_applC" ("_position" Some) ("_position" b))))))
###             ("\<^const>HOL.All_binder" ("_position" c)
###               ("\<^const>HOL.implies"
###                 ("\<^const>HOL.not_equal" ("_position" c) ("_position" a))
###                 ("\<^const>AssocLists.lookup"
###                   ("\<^const>AssocLists.lookup" ("_position" M)
###                     ("\<^const>HOL.eq" ("_position" c) ("_position" L)))
###                   ("_position" c))))))))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.All_binder" ("_position" n)
###     ("\<^const>HOL.implies"
###       ("\<^const>HOL.eq" ("\<^const>AssocLists.AL_Size" ("_position" L))
###         ("_applC" ("_position" Suc) ("_position" n)))
###       ("\<^const>HOL.Ex_binder"
###         ("_idts" ("_position" a) ("_idts" ("_position" b) ("_position" M)))
###         ("\<^const>HOL.conj"
###           ("\<^const>HOL.eq" ("\<^const>AssocLists.AL_Size" ("_position" M))
###             ("_position" n))
###           ("\<^const>HOL.conj"
###             ("\<^const>AssocLists.lookup" ("_position" M)
###               ("\<^const>HOL.eq" ("_position" a) ("_position" None)))
###             ("\<^const>HOL.conj"
###               ("\<^const>AssocLists.lookup" ("_position" L)
###                 ("\<^const>HOL.eq" ("_position" a)
###                   ("_applC" ("_position" Some) ("_position" b))))
###               ("\<^const>HOL.All_binder" ("_position" c)
###                 ("\<^const>HOL.implies"
###                   ("\<^const>HOL.not_equal" ("_position" c) ("_position" a))
###                   ("\<^const>AssocLists.lookup"
###                     ("\<^const>AssocLists.lookup" ("_position" M)
###                       ("\<^const>HOL.eq" ("_position" c) ("_position" L)))
###                     ("_position" c)))))))))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.All_binder" ("_position" n)
###     ("\<^const>HOL.implies"
###       ("\<^const>HOL.eq" ("\<^const>AssocLists.AL_Size" ("_position" L))
###         ("_applC" ("_position" Suc) ("_position" n)))
###       ("\<^const>HOL.Ex_binder"
###         ("_idts" ("_position" a) ("_idts" ("_position" b) ("_position" M)))
###         ("\<^const>HOL.conj"
###           ("\<^const>HOL.eq" ("\<^const>AssocLists.AL_Size" ("_position" M))
###             ("_position" n))
###           ("\<^const>AssocLists.lookup" ("_position" M)
###             ("\<^const>HOL.conj"
###               ("\<^const>HOL.eq" ("_position" a) ("_position" None))
###               ("\<^const>HOL.conj"
###                 ("\<^const>AssocLists.lookup" ("_position" L)
###                   ("\<^const>HOL.eq" ("_position" a)
###                     ("_applC" ("_position" Some) ("_position" b))))
###                 ("\<^const>HOL.All_binder" ("_position" c)
###                   ("\<^const>HOL.implies"
###                     ("\<^const>HOL.not_equal" ("_position" c)
###                       ("_position" a))
###                     ("\<^const>AssocLists.lookup"
###                       ("\<^const>AssocLists.lookup" ("_position" M)
###                         ("\<^const>HOL.eq" ("_position" c) ("_position" L)))
###                       ("_position" c))))))))))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.All_binder" ("_position" n)
###     ("\<^const>HOL.implies"
###       ("\<^const>HOL.eq" ("\<^const>AssocLists.AL_Size" ("_position" L))
###         ("_applC" ("_position" Suc) ("_position" n)))
###       ("\<^const>HOL.Ex_binder"
###         ("_idts" ("_position" a) ("_idts" ("_position" b) ("_position" M)))
###         ("\<^const>HOL.conj"
###           ("\<^const>HOL.eq" ("\<^const>AssocLists.AL_Size" ("_position" M))
###             ("_position" n))
###           ("\<^const>HOL.conj"
###             ("\<^const>HOL.eq"
###               ("\<^const>AssocLists.lookup" ("_position" M) ("_position" a))
###               ("_position" None))
###             ("\<^const>HOL.conj"
###               ("\<^const>AssocLists.lookup" ("_position" L)
###                 ("\<^const>HOL.eq" ("_position" a)
###                   ("_applC" ("_position" Some) ("_position" b))))
###               ("\<^const>HOL.All_binder" ("_position" c)
###                 ("\<^const>HOL.implies"
###                   ("\<^const>HOL.not_equal" ("_position" c) ("_position" a))
###                   ("\<^const>AssocLists.lookup"
###                     ("\<^const>AssocLists.lookup" ("_position" M)
###                       ("\<^const>HOL.eq" ("_position" c) ("_position" L)))
###                     ("_position" c)))))))))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.All_binder" ("_position" n)
###     ("\<^const>HOL.implies"
###       ("\<^const>HOL.eq" ("\<^const>AssocLists.AL_Size" ("_position" L))
###         ("_applC" ("_position" Suc) ("_position" n)))
###       ("\<^const>HOL.Ex_binder"
###         ("_idts" ("_position" a) ("_idts" ("_position" b) ("_position" M)))
###         ("\<^const>HOL.conj"
###           ("\<^const>HOL.eq" ("\<^const>AssocLists.AL_Size" ("_position" M))
###             ("_position" n))
###           ("\<^const>AssocLists.lookup"
###             ("\<^const>AssocLists.lookup" ("_position" M)
###               ("\<^const>HOL.conj"
###                 ("\<^const>HOL.eq" ("_position" a) ("_position" None))
###                 ("_position" L)))
###             ("\<^const>HOL.conj"
###               ("\<^const>HOL.eq" ("_position" a)
###                 ("_applC" ("_position" Some) ("_position" b)))
###               ("\<^const>HOL.All_binder" ("_position" c)
###                 ("\<^const>HOL.implies"
###                   ("\<^const>HOL.not_equal" ("_position" c) ("_position" a))
###                   ("\<^const>AssocLists.lookup"
###                     ("\<^const>AssocLists.lookup" ("_position" M)
###                       ("\<^const>HOL.eq" ("_position" c) ("_position" L)))
###                     ("_position" c)))))))))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.All_binder" ("_position" n)
###     ("\<^const>HOL.implies"
###       ("\<^const>HOL.eq" ("\<^const>AssocLists.AL_Size" ("_position" L))
###         ("_applC" ("_position" Suc) ("_position" n)))
###       ("\<^const>HOL.Ex_binder"
###         ("_idts" ("_position" a) ("_idts" ("_position" b) ("_position" M)))
###         ("\<^const>HOL.conj"
###           ("\<^const>HOL.eq" ("\<^const>AssocLists.AL_Size" ("_position" M))
###             ("_position" n))
###           ("\<^const>HOL.conj"
###             ("\<^const>AssocLists.lookup" ("_position" M)
###               ("\<^const>HOL.eq" ("_position" a) ("_position" None)))
###             ("\<^const>AssocLists.lookup" ("_position" L)
###               ("\<^const>HOL.conj"
###                 ("\<^const>HOL.eq" ("_position" a)
###                   ("_applC" ("_position" Some) ("_position" b)))
###                 ("\<^const>HOL.All_binder" ("_position" c)
###                   ("\<^const>HOL.implies"
###                     ("\<^const>HOL.not_equal" ("_position" c)
###                       ("_position" a))
###                     ("\<^const>AssocLists.lookup"
###                       ("\<^const>AssocLists.lookup" ("_position" M)
###                         ("\<^const>HOL.eq" ("_position" c) ("_position" L)))
###                       ("_position" c))))))))))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.All_binder" ("_position" n)
###     ("\<^const>HOL.implies"
###       ("\<^const>HOL.eq" ("\<^const>AssocLists.AL_Size" ("_position" L))
###         ("_applC" ("_position" Suc) ("_position" n)))
###       ("\<^const>HOL.Ex_binder"
###         ("_idts" ("_position" a) ("_idts" ("_position" b) ("_position" M)))
###         ("\<^const>HOL.conj"
###           ("\<^const>HOL.eq" ("\<^const>AssocLists.AL_Size" ("_position" M))
###             ("_position" n))
###           ("\<^const>AssocLists.lookup" ("_position" M)
###             ("\<^const>HOL.conj"
###               ("\<^const>HOL.eq" ("_position" a) ("_position" None))
###               ("\<^const>AssocLists.lookup" ("_position" L)
###                 ("\<^const>HOL.conj"
###                   ("\<^const>HOL.eq" ("_position" a)
###                     ("_applC" ("_position" Some) ("_position" b)))
###                   ("\<^const>HOL.All_binder" ("_position" c)
###                     ("\<^const>HOL.implies"
###                       ("\<^const>HOL.not_equal" ("_position" c)
###                         ("_position" a))
###                       ("\<^const>AssocLists.lookup"
###                         ("\<^const>AssocLists.lookup" ("_position" M)
###                           ("\<^const>HOL.eq" ("_position" c)
###                             ("_position" L)))
###                         ("_position" c)))))))))))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 159 of "$AFP/BytecodeLogicJmlTypes/AssocLists.thy") produces 4 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.All_binder"
###     ("_idts" ("_position" h)
###       ("_idts" ("_position" a)
###         ("_idts" ("_position" obj) ("_position" obj1))))
###     ("\<^const>HOL.implies"
###       ("\<^const>HOL.eq"
###         ("\<^const>AssocLists.AL_Size"
###           ("\<^const>AssocLists.upd" ("_position" h) ("_position" a)
###             ("_position" obj1)))
###         ("_position" n))
###       ("\<^const>HOL.eq"
###         ("\<^const>AssocLists.lookup" ("_position" h)
###           ("\<^const>HOL.implies"
###             ("\<^const>HOL.eq" ("_position" a)
###               ("_applC" ("_position" Some) ("_position" obj)))
###             ("\<^const>AssocLists.AL_Size" ("_position" h))))
###         ("_position" n)))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.All_binder"
###     ("_idts" ("_position" h)
###       ("_idts" ("_position" a)
###         ("_idts" ("_position" obj) ("_position" obj1))))
###     ("\<^const>HOL.implies"
###       ("\<^const>HOL.eq"
###         ("\<^const>AssocLists.AL_Size"
###           ("\<^const>AssocLists.upd" ("_position" h) ("_position" a)
###             ("_position" obj1)))
###         ("_position" n))
###       ("\<^const>HOL.implies"
###         ("\<^const>HOL.eq"
###           ("\<^const>AssocLists.lookup" ("_position" h) ("_position" a))
###           ("_applC" ("_position" Some) ("_position" obj)))
###         ("\<^const>HOL.eq" ("\<^const>AssocLists.AL_Size" ("_position" h))
###           ("_position" n))))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.All_binder"
###     ("_idts" ("_position" h)
###       ("_idts" ("_position" a)
###         ("_idts" ("_position" obj) ("_position" obj1))))
###     ("\<^const>HOL.implies"
###       ("\<^const>HOL.eq"
###         ("\<^const>AssocLists.AL_Size"
###           ("\<^const>AssocLists.upd" ("_position" h) ("_position" a)
###             ("_position" obj1)))
###         ("_position" n))
###       ("\<^const>AssocLists.lookup" ("_position" h)
###         ("\<^const>HOL.implies"
###           ("\<^const>HOL.eq" ("_position" a)
###             ("_applC" ("_position" Some) ("_position" obj)))
###           ("\<^const>HOL.eq" ("\<^const>AssocLists.AL_Size" ("_position" h))
###             ("_position" n)))))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.All_binder"
###     ("_idts" ("_position" h)
###       ("_idts" ("_position" a)
###         ("_idts" ("_position" obj) ("_position" obj1))))
###     ("\<^const>HOL.implies"
###       ("\<^const>HOL.eq"
###         ("\<^const>AssocLists.AL_Size"
###           ("\<^const>AssocLists.upd" ("_position" h) ("_position" a)
###             ("_position" obj1)))
###         ("_position" n))
###       ("\<^const>HOL.implies"
###         ("\<^const>AssocLists.lookup" ("_position" h)
###           ("\<^const>HOL.eq" ("_position" a)
###             ("_applC" ("_position" Some) ("_position" obj))))
###         ("\<^const>HOL.eq" ("\<^const>AssocLists.AL_Size" ("_position" h))
###           ("_position" n))))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 184 of "$AFP/BytecodeLogicJmlTypes/AssocLists.thy") produces 4 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>AssocLists.lookup" ("_position" h)
###     ("\<^const>Pure.imp"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>HOL.eq" ("_position" a)
###           ("_applC" ("_position" Some) ("_position" obj))))
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>HOL.eq"
###           ("\<^const>AssocLists.AL_Size"
###             ("\<^const>AssocLists.upd" ("_position" h) ("_position" a)
###               ("_position" obj1)))
###           ("\<^const>AssocLists.AL_Size" ("_position" h)))))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>AssocLists.lookup" ("_position" h)
###       ("\<^const>HOL.eq" ("_position" a)
###         ("_applC" ("_position" Some) ("_position" obj)))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>HOL.eq"
###       ("\<^const>AssocLists.AL_Size"
###         ("\<^const>AssocLists.upd" ("_position" h) ("_position" a)
###           ("_position" obj1)))
###       ("\<^const>AssocLists.AL_Size" ("_position" h)))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>HOL.eq"
###       ("\<^const>AssocLists.lookup" ("_position" h) ("_position" a))
###       ("_applC" ("_position" Some) ("_position" obj))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>HOL.eq"
###       ("\<^const>AssocLists.AL_Size"
###         ("\<^const>AssocLists.upd" ("_position" h) ("_position" a)
###           ("_position" obj1)))
###       ("\<^const>AssocLists.AL_Size" ("_position" h)))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("\<^const>AssocLists.lookup" ("_position" h)
###       ("\<^const>Pure.imp"
###         ("\<^const>HOL.Trueprop"
###           ("\<^const>HOL.eq" ("_position" a)
###             ("_applC" ("_position" Some) ("_position" obj))))
###         ("\<^const>HOL.Trueprop"
###           ("\<^const>AssocLists.AL_Size"
###             ("\<^const>AssocLists.upd" ("_position" h) ("_position" a)
###               ("_position" obj1))))))
###     ("\<^const>AssocLists.AL_Size" ("_position" h))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### theory "Draft.AssocLists"
### 0.370s elapsed time, 1.463s cpu time, 0.111s GC time
Loading theory "Draft.Language" (required by "Draft.ReachabilityMoreTemplates" via "Draft.Reachability")
### theory "HOL-Library.Nat_Bijection"
### 0.427s elapsed time, 1.700s cpu time, 0.111s GC time
Loading theory "HOL-Library.Stream" (required by "Draft.ReachabilityMoreTemplates" via "Draft.ExtrEqs")
consts
  left :: "'a tree => 'a tree"
consts
  right :: "'a tree => 'a tree"
Found termination order: "size <*mlex*> {}"
Found termination order: "size <*mlex*> {}"
consts
  shift :: "'a list => 'a stream => 'a stream"
Proofs for coinductive predicate(s) "streamsp"
  Proving monotonicity ...
Found termination order: "size <*mlex*> {}"
class height = type +
  fixes height :: "'a => nat"
instantiation
  tree :: (type) height
  height_tree == height :: 'a tree => nat
consts
  snth :: "'a stream => nat => 'a"
consts
  stake :: "nat => 'a stream => 'a list"
consts
  sdrop :: "nat => 'a stream => 'a stream"
Found termination order: "size <*mlex*> {}"
consts
  sfilter :: "('a => bool) => 'a stream => 'a stream"
Found termination order: "size <*mlex*> {}"
consts
  cycle :: "'a list => 'a stream"
consts
  siterate :: "('a => 'a) => 'a => 'a stream"
Found termination order: "size <*mlex*> {}"
### theory "HOL-Library.BigO"
### 0.980s elapsed time, 3.712s cpu time, 0.775s GC time
consts
  flat :: "'a list stream => 'a stream"
Found termination order: "size <*mlex*> {}"
consts
  sinterleave :: "'a stream => 'a stream => 'a stream"
consts
  szip :: "'a stream => 'b stream => ('a * 'b) stream"
Found termination order: "size <*mlex*> {}"
consts
  smap2 :: "('a => 'b => 'c) => 'a stream => 'b stream => 'c stream"
### theory "HOL-Library.Stream"
### 1.059s elapsed time, 3.854s cpu time, 0.846s GC time
Found termination order: "size <*mlex*> {}"
Found termination order: "size <*mlex*> {}"
Found termination order: "(%p. size (fst p)) <*mlex*> {}"
### Ambiguous input (line 143 of "$AFP/BytecodeLogicJmlTypes/Language.thy") produces 9 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("_applC" ("_position" mbody_is)
###       ("_cargs" ("_position" C) ("_cargs" ("_position" m) ("_position" M))))
###     ("\<^const>HOL.Ex_binder" ("_position" CD)
###       ("\<^const>HOL.eq"
###         ("\<^const>AssocLists.lookup"
###           ("\<^const>AssocLists.lookup" ("_position" P)
###             ("\<^const>HOL.conj"
###               ("\<^const>HOL.eq" ("_position" C)
###                 ("_applC" ("_position" Some) ("_position" CD)))
###               ("_position" CD)))
###           ("_position" m))
###         ("_applC" ("_position" Some) ("_position" M))))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("_applC" ("_position" mbody_is)
###       ("_cargs" ("_position" C) ("_cargs" ("_position" m) ("_position" M))))
###     ("\<^const>HOL.Ex_binder" ("_position" CD)
###       ("\<^const>HOL.eq"
###         ("\<^const>AssocLists.lookup" ("_position" P)
###           ("\<^const>HOL.conj"
###             ("\<^const>HOL.eq" ("_position" C)
###               ("_applC" ("_position" Some) ("_position" CD)))
###             ("\<^const>AssocLists.lookup" ("_position" CD)
###               ("_position" m))))
###         ("_applC" ("_position" Some) ("_position" M))))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("_applC" ("_position" mbody_is)
###       ("_cargs" ("_position" C) ("_cargs" ("_position" m) ("_position" M))))
###     ("\<^const>HOL.Ex_binder" ("_position" CD)
###       ("\<^const>AssocLists.lookup"
###         ("\<^const>AssocLists.lookup" ("_position" P)
###           ("\<^const>HOL.conj"
###             ("\<^const>HOL.eq" ("_position" C)
###               ("_applC" ("_position" Some) ("_position" CD)))
###             ("_position" CD)))
###         ("\<^const>HOL.eq" ("_position" m)
###           ("_applC" ("_position" Some) ("_position" M)))))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("_applC" ("_position" mbody_is)
###       ("_cargs" ("_position" C) ("_cargs" ("_position" m) ("_position" M))))
###     ("\<^const>HOL.Ex_binder" ("_position" CD)
###       ("\<^const>HOL.conj"
###         ("\<^const>AssocLists.lookup" ("_position" P)
###           ("\<^const>HOL.eq" ("_position" C)
###             ("_applC" ("_position" Some) ("_position" CD))))
###         ("\<^const>AssocLists.lookup" ("_position" CD)
###           ("\<^const>HOL.eq" ("_position" m)
###             ("_applC" ("_position" Some) ("_position" M))))))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("_applC" ("_position" mbody_is)
###       ("_cargs" ("_position" C) ("_cargs" ("_position" m) ("_position" M))))
###     ("\<^const>HOL.Ex_binder" ("_position" CD)
###       ("\<^const>AssocLists.lookup" ("_position" P)
###         ("\<^const>HOL.conj"
###           ("\<^const>HOL.eq" ("_position" C)
###             ("_applC" ("_position" Some) ("_position" CD)))
###           ("\<^const>AssocLists.lookup" ("_position" CD)
###             ("\<^const>HOL.eq" ("_position" m)
###               ("_applC" ("_position" Some) ("_position" M)))))))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("_applC" ("_position" mbody_is)
###       ("_cargs" ("_position" C) ("_cargs" ("_position" m) ("_position" M))))
###     ("\<^const>HOL.Ex_binder" ("_position" CD)
###       ("\<^const>HOL.conj"
###         ("\<^const>HOL.eq"
###           ("\<^const>AssocLists.lookup" ("_position" P) ("_position" C))
###           ("_applC" ("_position" Some) ("_position" CD)))
###         ("\<^const>AssocLists.lookup" ("_position" CD)
###           ("\<^const>HOL.eq" ("_position" m)
###             ("_applC" ("_position" Some) ("_position" M))))))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("_applC" ("_position" mbody_is)
###       ("_cargs" ("_position" C) ("_cargs" ("_position" m) ("_position" M))))
###     ("\<^const>HOL.Ex_binder" ("_position" CD)
###       ("\<^const>HOL.conj"
###         ("\<^const>AssocLists.lookup" ("_position" P)
###           ("\<^const>HOL.eq" ("_position" C)
###             ("_applC" ("_position" Some) ("_position" CD))))
###         ("\<^const>HOL.eq"
###           ("\<^const>AssocLists.lookup" ("_position" CD) ("_position" m))
###           ("_applC" ("_position" Some) ("_position" M)))))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("_applC" ("_position" mbody_is)
###       ("_cargs" ("_position" C) ("_cargs" ("_position" m) ("_position" M))))
###     ("\<^const>HOL.Ex_binder" ("_position" CD)
###       ("\<^const>AssocLists.lookup" ("_position" P)
###         ("\<^const>HOL.conj"
###           ("\<^const>HOL.eq" ("_position" C)
###             ("_applC" ("_position" Some) ("_position" CD)))
###           ("\<^const>HOL.eq"
###             ("\<^const>AssocLists.lookup" ("_position" CD) ("_position" m))
###             ("_applC" ("_position" Some) ("_position" M))))))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("_applC" ("_position" mbody_is)
###       ("_cargs" ("_position" C) ("_cargs" ("_position" m) ("_position" M))))
###     ("\<^const>HOL.Ex_binder" ("_position" CD)
###       ("\<^const>HOL.conj"
###         ("\<^const>HOL.eq"
###           ("\<^const>AssocLists.lookup" ("_position" P) ("_position" C))
###           ("_applC" ("_position" Some) ("_position" CD)))
###         ("\<^const>HOL.eq"
###           ("\<^const>AssocLists.lookup" ("_position" CD) ("_position" m))
###           ("_applC" ("_position" Some) ("_position" M)))))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 159 of "$AFP/BytecodeLogicJmlTypes/Language.thy") produces 2 parse trees:
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>Set.member"
###         ("_tuple" ("_position" oo)
###           ("_tuple_args" ("_position" par)
###             ("_tuple_args" ("_position" S)
###               ("_tuple_arg" ("_position" ops)))))
###         ("_position" Frame)))
###     ("_asm"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>HOL.eq" ("_position" R)
###           ("_applC" ("_position" S)
###             ("_Map" ("_maplet" ("_position" x) ("_position" v))))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Set.member"
###       ("_tuple" ("\<^const>List.list.Cons" ("_position" v) ("_position" oo))
###         ("_tuple_args"
###           ("\<^const>List.list.Cons" ("_position" x) ("_position" par))
###           ("_tuple_args" ("_position" R) ("_tuple_arg" ("_position" ops)))))
###       ("_position" Frame))))
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>Set.member"
###         ("_tuple" ("_position" oo)
###           ("_tuple_args" ("_position" par)
###             ("_tuple_args" ("_position" S)
###               ("_tuple_arg" ("_position" ops)))))
###         ("_position" Frame)))
###     ("_asm"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>HOL.eq" ("_position" R)
###           ("\<^const>AssocLists.upd" ("_position" S) ("_position" x)
###             ("_position" v))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Set.member"
###       ("_tuple" ("\<^const>List.list.Cons" ("_position" v) ("_position" oo))
###         ("_tuple_args"
###           ("\<^const>List.list.Cons" ("_position" x) ("_position" par))
###           ("_tuple_args" ("_position" R) ("_tuple_arg" ("_position" ops)))))
###       ("_position" Frame))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
Proofs for inductive predicate(s) "Framep"
  Proving monotonicity ...
Found termination order: "size <*mlex*> {}"
### Ambiguous input (line 178 of "$AFP/BytecodeLogicJmlTypes/Language.thy") produces 2 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>AssocLists.lookup" ("_position" h)
###     ("\<^const>HOL.eq" ("_applC" ("_position" nextLoc) ("_position" h))
###       ("_position" None))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("\<^const>AssocLists.lookup" ("_position" h)
###       ("_applC" ("_position" nextLoc) ("_position" h)))
###     ("_position" None)))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 233 of "$AFP/BytecodeLogicJmlTypes/Language.thy") produces 2 parse trees:
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>HOL.eq"
###         ("_applC" ("_position" get_ins)
###           ("_cargs" ("_position" M) ("_position" l)))
###         ("_applC" ("_position" Some)
###           ("_applC" ("_position" load) ("_position" x)))))
###     ("_asms"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>HOL.eq"
###           ("\<^const>AssocLists.lookup" ("_position" s) ("_position" x))
###           ("_applC" ("_position" Some) ("_position" v))))
###       ("_asms"
###         ("\<^const>HOL.Trueprop"
###           ("\<^const>HOL.eq" ("_position" NEXT)
###             ("_tuple"
###               ("\<^const>List.list.Cons" ("_position" v) ("_position" os))
###               ("_tuple_args" ("_position" s)
###                 ("_tuple_arg" ("_position" h))))))
###         ("_asm"
###           ("\<^const>HOL.Trueprop"
###             ("\<^const>HOL.eq" ("_position" ll)
###               ("\<^const>Groups.plus_class.plus" ("_position" l)
###                 ("\<^const>Groups.one_class.one"))))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Set.member"
###       ("_tuple" ("_position" M)
###         ("_tuple_args" ("_position" l)
###           ("_tuple_args"
###             ("_tuple" ("_position" os)
###               ("_tuple_args" ("_position" s)
###                 ("_tuple_arg" ("_position" h))))
###             ("_tuple_args" ("\<^const>Groups.one_class.one")
###               ("_tuple_args" ("_position" ll)
###                 ("_tuple_arg" ("_position" NEXT)))))))
###       ("_position" Step))))
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>HOL.eq"
###         ("_applC" ("_position" get_ins)
###           ("_cargs" ("_position" M) ("_position" l)))
###         ("_applC" ("_position" Some)
###           ("_applC" ("_position" load) ("_position" x)))))
###     ("_asms"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>AssocLists.lookup" ("_position" s)
###           ("\<^const>HOL.eq" ("_position" x)
###             ("_applC" ("_position" Some) ("_position" v)))))
###       ("_asms"
###         ("\<^const>HOL.Trueprop"
###           ("\<^const>HOL.eq" ("_position" NEXT)
###             ("_tuple"
###               ("\<^const>List.list.Cons" ("_position" v) ("_position" os))
###               ("_tuple_args" ("_position" s)
###                 ("_tuple_arg" ("_position" h))))))
###         ("_asm"
###           ("\<^const>HOL.Trueprop"
###             ("\<^const>HOL.eq" ("_position" ll)
###               ("\<^const>Groups.plus_class.plus" ("_position" l)
###                 ("\<^const>Groups.one_class.one"))))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Set.member"
###       ("_tuple" ("_position" M)
###         ("_tuple_args" ("_position" l)
###           ("_tuple_args"
###             ("_tuple" ("_position" os)
###               ("_tuple_args" ("_position" s)
###                 ("_tuple_arg" ("_position" h))))
###             ("_tuple_args" ("\<^const>Groups.one_class.one")
###               ("_tuple_args" ("_position" ll)
###                 ("_tuple_arg" ("_position" NEXT)))))))
###       ("_position" Step))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 237 of "$AFP/BytecodeLogicJmlTypes/Language.thy") produces 2 parse trees:
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>HOL.eq"
###         ("_applC" ("_position" get_ins)
###           ("_cargs" ("_position" M) ("_position" l)))
###         ("_applC" ("_position" Some)
###           ("_applC" ("_position" store) ("_position" x)))))
###     ("_asms"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>HOL.eq" ("_position" NEXT)
###           ("_tuple" ("_position" os)
###             ("_tuple_args"
###               ("\<^const>AssocLists.upd" ("_position" s) ("_position" x)
###                 ("_position" v))
###               ("_tuple_arg" ("_position" h))))))
###       ("_asm"
###         ("\<^const>HOL.Trueprop"
###           ("\<^const>HOL.eq" ("_position" ll)
###             ("\<^const>Groups.plus_class.plus" ("_position" l)
###               ("\<^const>Groups.one_class.one")))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Set.member"
###       ("_tuple" ("_position" M)
###         ("_tuple_args" ("_position" l)
###           ("_tuple_args"
###             ("_tuple"
###               ("\<^const>List.list.Cons" ("_position" v) ("_position" os))
###               ("_tuple_args" ("_position" s)
###                 ("_tuple_arg" ("_position" h))))
###             ("_tuple_args" ("\<^const>Groups.one_class.one")
###               ("_tuple_args" ("_position" ll)
###                 ("_tuple_arg" ("_position" NEXT)))))))
###       ("_position" Step))))
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>HOL.eq"
###         ("_applC" ("_position" get_ins)
###           ("_cargs" ("_position" M) ("_position" l)))
###         ("_applC" ("_position" Some)
###           ("_applC" ("_position" store) ("_position" x)))))
###     ("_asms"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>HOL.eq" ("_position" NEXT)
###           ("_tuple" ("_position" os)
###             ("_tuple_args"
###               ("_applC" ("_position" s)
###                 ("_Map" ("_maplet" ("_position" x) ("_position" v))))
###               ("_tuple_arg" ("_position" h))))))
###       ("_asm"
###         ("\<^const>HOL.Trueprop"
###           ("\<^const>HOL.eq" ("_position" ll)
###             ("\<^const>Groups.plus_class.plus" ("_position" l)
###               ("\<^const>Groups.one_class.one")))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Set.member"
###       ("_tuple" ("_position" M)
###         ("_tuple_args" ("_position" l)
###           ("_tuple_args"
###             ("_tuple"
###               ("\<^const>List.list.Cons" ("_position" v) ("_position" os))
###               ("_tuple_args" ("_position" s)
###                 ("_tuple_arg" ("_position" h))))
###             ("_tuple_args" ("\<^const>Groups.one_class.one")
###               ("_tuple_args" ("_position" ll)
###                 ("_tuple_arg" ("_position" NEXT)))))))
###       ("_position" Step))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 254 of "$AFP/BytecodeLogicJmlTypes/Language.thy") produces 8 parse trees:
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>HOL.eq"
###         ("_applC" ("_position" get_ins)
###           ("_cargs" ("_position" M) ("_position" l)))
###         ("_applC" ("_position" Some)
###           ("_applC" ("_position" putfield)
###             ("_cargs" ("_position" d) ("_position" F))))))
###     ("_asms"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>HOL.eq"
###           ("\<^const>AssocLists.lookup" ("_position" h) ("_position" a))
###           ("_applC" ("_position" Some)
###             ("_tuple" ("_position" d) ("_tuple_arg" ("_position" Flds))))))
###       ("_asms"
###         ("\<^const>HOL.Trueprop"
###           ("\<^const>HOL.eq" ("_position" newobj)
###             ("_tuple" ("_position" d)
###               ("_tuple_arg"
###                 ("\<^const>AssocLists.upd" ("_position" Flds)
###                   ("_position" F) ("_position" v))))))
###         ("_asms"
###           ("\<^const>HOL.Trueprop"
###             ("\<^const>HOL.eq" ("_position" NEXT)
###               ("_tuple" ("_position" os)
###                 ("_tuple_args" ("_position" s)
###                   ("_tuple_arg"
###                     ("\<^const>AssocLists.upd" ("_position" h)
###                       ("_position" a) ("_position" newobj)))))))
###           ("_asm"
###             ("\<^const>HOL.Trueprop"
###               ("\<^const>HOL.eq" ("_position" ll)
###                 ("\<^const>Groups.plus_class.plus" ("_position" l)
###                   ("\<^const>Groups.one_class.one")))))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Set.member"
###       ("_tuple" ("_position" M)
###         ("_tuple_args" ("_position" l)
###           ("_tuple_args"
###             ("_tuple"
###               ("\<^const>List.list.Cons" ("_position" v)
###                 ("\<^const>List.list.Cons"
###                   ("_applC" ("_position" RVal)
###                     ("_applC" ("_position" Loc) ("_position" a)))
###                   ("_position" os)))
###               ("_tuple_args" ("_position" s)
###                 ("_tuple_arg" ("_position" h))))
###             ("_tuple_args" ("\<^const>Groups.one_class.one")
###               ("_tuple_args" ("_position" ll)
###                 ("_tuple_arg" ("_position" NEXT)))))))
###       ("_position" Step))))
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>HOL.eq"
###         ("_applC" ("_position" get_ins)
###           ("_cargs" ("_position" M) ("_position" l)))
###         ("_applC" ("_position" Some)
###           ("_applC" ("_position" putfield)
###             ("_cargs" ("_position" d) ("_position" F))))))
###     ("_asms"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>AssocLists.lookup" ("_position" h)
###           ("\<^const>HOL.eq" ("_position" a)
###             ("_applC" ("_position" Some)
###               ("_tuple" ("_position" d)
###                 ("_tuple_arg" ("_position" Flds)))))))
###       ("_asms"
###         ("\<^const>HOL.Trueprop"
###           ("\<^const>HOL.eq" ("_position" newobj)
###             ("_tuple" ("_position" d)
###               ("_tuple_arg"
###                 ("\<^const>AssocLists.upd" ("_position" Flds)
###                   ("_position" F) ("_position" v))))))
###         ("_asms"
###           ("\<^const>HOL.Trueprop"
###             ("\<^const>HOL.eq" ("_position" NEXT)
###               ("_tuple" ("_position" os)
###                 ("_tuple_args" ("_position" s)
###                   ("_tuple_arg"
###                     ("\<^const>AssocLists.upd" ("_position" h)
###                       ("_position" a) ("_position" newobj)))))))
###           ("_asm"
###             ("\<^const>HOL.Trueprop"
###               ("\<^const>HOL.eq" ("_position" ll)
###                 ("\<^const>Groups.plus_class.plus" ("_position" l)
###                   ("\<^const>Groups.one_class.one")))))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Set.member"
###       ("_tuple" ("_position" M)
###         ("_tuple_args" ("_position" l)
###           ("_tuple_args"
###             ("_tuple"
###               ("\<^const>List.list.Cons" ("_position" v)
###                 ("\<^const>List.list.Cons"
###                   ("_applC" ("_position" RVal)
###                     ("_applC" ("_position" Loc) ("_position" a)))
###                   ("_position" os)))
###               ("_tuple_args" ("_position" s)
###                 ("_tuple_arg" ("_position" h))))
###             ("_tuple_args" ("\<^const>Groups.one_class.one")
###               ("_tuple_args" ("_position" ll)
###                 ("_tuple_arg" ("_position" NEXT)))))))
###       ("_position" Step))))
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>HOL.eq"
###         ("_applC" ("_position" get_ins)
###           ("_cargs" ("_position" M) ("_position" l)))
###         ("_applC" ("_position" Some)
###           ("_applC" ("_position" putfield)
###             ("_cargs" ("_position" d) ("_position" F))))))
###     ("_asms"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>HOL.eq"
###           ("\<^const>AssocLists.lookup" ("_position" h) ("_position" a))
###           ("_applC" ("_position" Some)
###             ("_tuple" ("_position" d) ("_tuple_arg" ("_position" Flds))))))
###       ("_asms"
###         ("\<^const>HOL.Trueprop"
###           ("\<^const>HOL.eq" ("_position" newobj)
###             ("_tuple" ("_position" d)
###               ("_tuple_arg"
###                 ("_applC" ("_position" Flds)
###                   ("_Map" ("_maplet" ("_position" F) ("_position" v))))))))
###         ("_asms"
###           ("\<^const>HOL.Trueprop"
###             ("\<^const>HOL.eq" ("_position" NEXT)
###               ("_tuple" ("_position" os)
###                 ("_tuple_args" ("_position" s)
###                   ("_tuple_arg"
###                     ("\<^const>AssocLists.upd" ("_position" h)
###                       ("_position" a) ("_position" newobj)))))))
###           ("_asm"
###             ("\<^const>HOL.Trueprop"
###               ("\<^const>HOL.eq" ("_position" ll)
###                 ("\<^const>Groups.plus_class.plus" ("_position" l)
###                   ("\<^const>Groups.one_class.one")))))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Set.member"
###       ("_tuple" ("_position" M)
###         ("_tuple_args" ("_position" l)
###           ("_tuple_args"
###             ("_tuple"
###               ("\<^const>List.list.Cons" ("_position" v)
###                 ("\<^const>List.list.Cons"
###                   ("_applC" ("_position" RVal)
###                     ("_applC" ("_position" Loc) ("_position" a)))
###                   ("_position" os)))
###               ("_tuple_args" ("_position" s)
###                 ("_tuple_arg" ("_position" h))))
###             ("_tuple_args" ("\<^const>Groups.one_class.one")
###               ("_tuple_args" ("_position" ll)
###                 ("_tuple_arg" ("_position" NEXT)))))))
###       ("_position" Step))))
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>HOL.eq"
###         ("_applC" ("_position" get_ins)
###           ("_cargs" ("_position" M) ("_position" l)))
###         ("_applC" ("_position" Some)
###           ("_applC" ("_position" putfield)
###             ("_cargs" ("_position" d) ("_position" F))))))
###     ("_asms"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>AssocLists.lookup" ("_position" h)
###           ("\<^const>HOL.eq" ("_position" a)
###             ("_applC" ("_position" Some)
###               ("_tuple" ("_position" d)
###                 ("_tuple_arg" ("_position" Flds)))))))
###       ("_asms"
###         ("\<^const>HOL.Trueprop"
###           ("\<^const>HOL.eq" ("_position" newobj)
###             ("_tuple" ("_position" d)
###               ("_tuple_arg"
###                 ("_applC" ("_position" Flds)
###                   ("_Map" ("_maplet" ("_position" F) ("_position" v))))))))
###         ("_asms"
###           ("\<^const>HOL.Trueprop"
###             ("\<^const>HOL.eq" ("_position" NEXT)
###               ("_tuple" ("_position" os)
###                 ("_tuple_args" ("_position" s)
###                   ("_tuple_arg"
###                     ("\<^const>AssocLists.upd" ("_position" h)
###                       ("_position" a) ("_position" newobj)))))))
###           ("_asm"
###             ("\<^const>HOL.Trueprop"
###               ("\<^const>HOL.eq" ("_position" ll)
###                 ("\<^const>Groups.plus_class.plus" ("_position" l)
###                   ("\<^const>Groups.one_class.one")))))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Set.member"
###       ("_tuple" ("_position" M)
###         ("_tuple_args" ("_position" l)
###           ("_tuple_args"
###             ("_tuple"
###               ("\<^const>List.list.Cons" ("_position" v)
###                 ("\<^const>List.list.Cons"
###                   ("_applC" ("_position" RVal)
###                     ("_applC" ("_position" Loc) ("_position" a)))
###                   ("_position" os)))
###               ("_tuple_args" ("_position" s)
###                 ("_tuple_arg" ("_position" h))))
###             ("_tuple_args" ("\<^const>Groups.one_class.one")
###               ("_tuple_args" ("_position" ll)
###                 ("_tuple_arg" ("_position" NEXT)))))))
###       ("_position" Step))))
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>HOL.eq"
###         ("_applC" ("_position" get_ins)
###           ("_cargs" ("_position" M) ("_position" l)))
###         ("_applC" ("_position" Some)
###           ("_applC" ("_position" putfield)
###             ("_cargs" ("_position" d) ("_position" F))))))
###     ("_asms"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>HOL.eq"
###           ("\<^const>AssocLists.lookup" ("_position" h) ("_position" a))
###           ("_applC" ("_position" Some)
###             ("_tuple" ("_position" d) ("_tuple_arg" ("_position" Flds))))))
###       ("_asms"
###         ("\<^const>HOL.Trueprop"
###           ("\<^const>HOL.eq" ("_position" newobj)
###             ("_tuple" ("_position" d)
###               ("_tuple_arg"
###                 ("\<^const>AssocLists.upd" ("_position" Flds)
###                   ("_position" F) ("_position" v))))))
###         ("_asms"
###           ("\<^const>HOL.Trueprop"
###             ("\<^const>HOL.eq" ("_position" NEXT)
###               ("_tuple" ("_position" os)
###                 ("_tuple_args" ("_position" s)
###                   ("_tuple_arg"
###                     ("_applC" ("_position" h)
###                       ("_Map"
###                         ("_maplet" ("_position" a)
###                           ("_position" newobj)))))))))
###           ("_asm"
###             ("\<^const>HOL.Trueprop"
###               ("\<^const>HOL.eq" ("_position" ll)
###                 ("\<^const>Groups.plus_class.plus" ("_position" l)
###                   ("\<^const>Groups.one_class.one")))))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Set.member"
###       ("_tuple" ("_position" M)
###         ("_tuple_args" ("_position" l)
###           ("_tuple_args"
###             ("_tuple"
###               ("\<^const>List.list.Cons" ("_position" v)
###                 ("\<^const>List.list.Cons"
###                   ("_applC" ("_position" RVal)
###                     ("_applC" ("_position" Loc) ("_position" a)))
###                   ("_position" os)))
###               ("_tuple_args" ("_position" s)
###                 ("_tuple_arg" ("_position" h))))
###             ("_tuple_args" ("\<^const>Groups.one_class.one")
###               ("_tuple_args" ("_position" ll)
###                 ("_tuple_arg" ("_position" NEXT)))))))
###       ("_position" Step))))
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>HOL.eq"
###         ("_applC" ("_position" get_ins)
###           ("_cargs" ("_position" M) ("_position" l)))
###         ("_applC" ("_position" Some)
###           ("_applC" ("_position" putfield)
###             ("_cargs" ("_position" d) ("_position" F))))))
###     ("_asms"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>AssocLists.lookup" ("_position" h)
###           ("\<^const>HOL.eq" ("_position" a)
###             ("_applC" ("_position" Some)
###               ("_tuple" ("_position" d)
###                 ("_tuple_arg" ("_position" Flds)))))))
###       ("_asms"
###         ("\<^const>HOL.Trueprop"
###           ("\<^const>HOL.eq" ("_position" newobj)
###             ("_tuple" ("_position" d)
###               ("_tuple_arg"
###                 ("\<^const>AssocLists.upd" ("_position" Flds)
###                   ("_position" F) ("_position" v))))))
###         ("_asms"
###           ("\<^const>HOL.Trueprop"
###             ("\<^const>HOL.eq" ("_position" NEXT)
###               ("_tuple" ("_position" os)
###                 ("_tuple_args" ("_position" s)
###                   ("_tuple_arg"
###                     ("_applC" ("_position" h)
###                       ("_Map"
###                         ("_maplet" ("_position" a)
###                           ("_position" newobj)))))))))
###           ("_asm"
###             ("\<^const>HOL.Trueprop"
###               ("\<^const>HOL.eq" ("_position" ll)
###                 ("\<^const>Groups.plus_class.plus" ("_position" l)
###                   ("\<^const>Groups.one_class.one")))))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Set.member"
###       ("_tuple" ("_position" M)
###         ("_tuple_args" ("_position" l)
###           ("_tuple_args"
###             ("_tuple"
###               ("\<^const>List.list.Cons" ("_position" v)
###                 ("\<^const>List.list.Cons"
###                   ("_applC" ("_position" RVal)
###                     ("_applC" ("_position" Loc) ("_position" a)))
###                   ("_position" os)))
###               ("_tuple_args" ("_position" s)
###                 ("_tuple_arg" ("_position" h))))
###             ("_tuple_args" ("\<^const>Groups.one_class.one")
###               ("_tuple_args" ("_position" ll)
###                 ("_tuple_arg" ("_position" NEXT)))))))
###       ("_position" Step))))
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>HOL.eq"
###         ("_applC" ("_position" get_ins)
###           ("_cargs" ("_position" M) ("_position" l)))
###         ("_applC" ("_position" Some)
###           ("_applC" ("_position" putfield)
###             ("_cargs" ("_position" d) ("_position" F))))))
###     ("_asms"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>HOL.eq"
###           ("\<^const>AssocLists.lookup" ("_position" h) ("_position" a))
###           ("_applC" ("_position" Some)
###             ("_tuple" ("_position" d) ("_tuple_arg" ("_position" Flds))))))
###       ("_asms"
###         ("\<^const>HOL.Trueprop"
###           ("\<^const>HOL.eq" ("_position" newobj)
###             ("_tuple" ("_position" d)
###               ("_tuple_arg"
###                 ("_applC" ("_position" Flds)
###                   ("_Map" ("_maplet" ("_position" F) ("_position" v))))))))
###         ("_asms"
###           ("\<^const>HOL.Trueprop"
###             ("\<^const>HOL.eq" ("_position" NEXT)
###               ("_tuple" ("_position" os)
###                 ("_tuple_args" ("_position" s)
###                   ("_tuple_arg"
###                     ("_applC" ("_position" h)
###                       ("_Map"
###                         ("_maplet" ("_position" a)
###                           ("_position" newobj)))))))))
###           ("_asm"
###             ("\<^const>HOL.Trueprop"
###               ("\<^const>HOL.eq" ("_position" ll)
###                 ("\<^const>Groups.plus_class.plus" ("_position" l)
###                   ("\<^const>Groups.one_class.one")))))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Set.member"
###       ("_tuple" ("_position" M)
###         ("_tuple_args" ("_position" l)
###           ("_tuple_args"
###             ("_tuple"
###               ("\<^const>List.list.Cons" ("_position" v)
###                 ("\<^const>List.list.Cons"
###                   ("_applC" ("_position" RVal)
###                     ("_applC" ("_position" Loc) ("_position" a)))
###                   ("_position" os)))
###               ("_tuple_args" ("_position" s)
###                 ("_tuple_arg" ("_position" h))))
###             ("_tuple_args" ("\<^const>Groups.one_class.one")
###               ("_tuple_args" ("_position" ll)
###                 ("_tuple_arg" ("_position" NEXT)))))))
###       ("_position" Step))))
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>HOL.eq"
###         ("_applC" ("_position" get_ins)
###           ("_cargs" ("_position" M) ("_position" l)))
###         ("_applC" ("_position" Some)
###           ("_applC" ("_position" putfield)
###             ("_cargs" ("_position" d) ("_position" F))))))
###     ("_asms"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>AssocLists.lookup" ("_position" h)
###           ("\<^const>HOL.eq" ("_position" a)
###             ("_applC" ("_position" Some)
###               ("_tuple" ("_position" d)
###                 ("_tuple_arg" ("_position" Flds)))))))
###       ("_asms"
###         ("\<^const>HOL.Trueprop"
###           ("\<^const>HOL.eq" ("_position" newobj)
###             ("_tuple" ("_position" d)
###               ("_tuple_arg"
###                 ("_applC" ("_position" Flds)
###                   ("_Map" ("_maplet" ("_position" F) ("_position" v))))))))
###         ("_asms"
###           ("\<^const>HOL.Trueprop"
###             ("\<^const>HOL.eq" ("_position" NEXT)
###               ("_tuple" ("_position" os)
###                 ("_tuple_args" ("_position" s)
###                   ("_tuple_arg"
###                     ("_applC" ("_position" h)
###                       ("_Map"
###                         ("_maplet" ("_position" a)
###                           ("_position" newobj)))))))))
###           ("_asm"
###             ("\<^const>HOL.Trueprop"
###               ("\<^const>HOL.eq" ("_position" ll)
###                 ("\<^const>Groups.plus_class.plus" ("_position" l)
###                   ("\<^const>Groups.one_class.one")))))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Set.member"
###       ("_tuple" ("_position" M)
###         ("_tuple_args" ("_position" l)
###           ("_tuple_args"
###             ("_tuple"
###               ("\<^const>List.list.Cons" ("_position" v)
###                 ("\<^const>List.list.Cons"
###                   ("_applC" ("_position" RVal)
###                     ("_applC" ("_position" Loc) ("_position" a)))
###                   ("_position" os)))
###               ("_tuple_args" ("_position" s)
###                 ("_tuple_arg" ("_position" h))))
###             ("_tuple_args" ("\<^const>Groups.one_class.one")
###               ("_tuple_args" ("_position" ll)
###                 ("_tuple_arg" ("_position" NEXT)))))))
###       ("_position" Step))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
Found termination order: "(%p. size (snd p)) <*mlex*> {}"
### Ambiguous input (line 258 of "$AFP/BytecodeLogicJmlTypes/Language.thy") produces 2 parse trees:
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>HOL.eq"
###         ("_applC" ("_position" get_ins)
###           ("_cargs" ("_position" M) ("_position" l)))
###         ("_applC" ("_position" Some)
###           ("_applC" ("_position" checkcast) ("_position" d)))))
###     ("_asms"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>HOL.eq"
###           ("\<^const>AssocLists.lookup" ("_position" h) ("_position" a))
###           ("_applC" ("_position" Some)
###             ("_tuple" ("_position" d) ("_tuple_arg" ("_position" Flds))))))
###       ("_asms"
###         ("\<^const>HOL.Trueprop"
###           ("\<^const>HOL.eq" ("_position" NEXT)
###             ("_tuple"
###               ("\<^const>List.list.Cons"
###                 ("_applC" ("_position" RVal)
###                   ("_applC" ("_position" Loc) ("_position" a)))
###                 ("_position" os))
###               ("_tuple_args" ("_position" s)
###                 ("_tuple_arg" ("_position" h))))))
###         ("_asm"
###           ("\<^const>HOL.Trueprop"
###             ("\<^const>HOL.eq" ("_position" ll)
###               ("\<^const>Groups.plus_class.plus" ("_position" l)
###                 ("\<^const>Groups.one_class.one"))))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Set.member"
###       ("_tuple" ("_position" M)
###         ("_tuple_args" ("_position" l)
###           ("_tuple_args"
###             ("_tuple"
###               ("\<^const>List.list.Cons"
###                 ("_applC" ("_position" RVal)
###                   ("_applC" ("_position" Loc) ("_position" a)))
###                 ("_position" os))
###               ("_tuple_args" ("_position" s)
###                 ("_tuple_arg" ("_position" h))))
###             ("_tuple_args" ("\<^const>Groups.one_class.one")
###               ("_tuple_args" ("_position" ll)
###                 ("_tuple_arg" ("_position" NEXT)))))))
###       ("_position" Step))))
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>HOL.eq"
###         ("_applC" ("_position" get_ins)
###           ("_cargs" ("_position" M) ("_position" l)))
###         ("_applC" ("_position" Some)
###           ("_applC" ("_position" checkcast) ("_position" d)))))
###     ("_asms"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>AssocLists.lookup" ("_position" h)
###           ("\<^const>HOL.eq" ("_position" a)
###             ("_applC" ("_position" Some)
###               ("_tuple" ("_position" d)
###                 ("_tuple_arg" ("_position" Flds)))))))
###       ("_asms"
###         ("\<^const>HOL.Trueprop"
###           ("\<^const>HOL.eq" ("_position" NEXT)
###             ("_tuple"
###               ("\<^const>List.list.Cons"
###                 ("_applC" ("_position" RVal)
###                   ("_applC" ("_position" Loc) ("_position" a)))
###                 ("_position" os))
###               ("_tuple_args" ("_position" s)
###                 ("_tuple_arg" ("_position" h))))))
###         ("_asm"
###           ("\<^const>HOL.Trueprop"
###             ("\<^const>HOL.eq" ("_position" ll)
###               ("\<^const>Groups.plus_class.plus" ("_position" l)
###                 ("\<^const>Groups.one_class.one"))))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Set.member"
###       ("_tuple" ("_position" M)
###         ("_tuple_args" ("_position" l)
###           ("_tuple_args"
###             ("_tuple"
###               ("\<^const>List.list.Cons"
###                 ("_applC" ("_position" RVal)
###                   ("_applC" ("_position" Loc) ("_position" a)))
###                 ("_position" os))
###               ("_tuple_args" ("_position" s)
###                 ("_tuple_arg" ("_position" h))))
###             ("_tuple_args" ("\<^const>Groups.one_class.one")
###               ("_tuple_args" ("_position" ll)
###                 ("_tuple_arg" ("_position" NEXT)))))))
###       ("_position" Step))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 246 of "$AFP/BytecodeLogicJmlTypes/Language.thy") produces 2 parse trees:
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>HOL.eq"
###         ("_applC" ("_position" get_ins)
###           ("_cargs" ("_position" M) ("_position" l)))
###         ("_applC" ("_position" Some)
###           ("_applC" ("_position" new) ("_position" d)))))
###     ("_asms"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>HOL.eq" ("_position" newobj)
###           ("_tuple" ("_position" d) ("_tuple_arg" ("_position" emp)))))
###       ("_asms"
###         ("\<^const>HOL.Trueprop"
###           ("\<^const>HOL.eq" ("_position" a)
###             ("_applC" ("_position" nextLoc) ("_position" h))))
###         ("_asms"
###           ("\<^const>HOL.Trueprop"
###             ("\<^const>HOL.eq" ("_position" NEXT)
###               ("_tuple"
###                 ("\<^const>List.list.Cons"
###                   ("_applC" ("_position" RVal)
###                     ("_applC" ("_position" Loc) ("_position" a)))
###                   ("_position" os))
###                 ("_tuple_args" ("_position" s)
###                   ("_tuple_arg"
###                     ("\<^const>AssocLists.upd" ("_position" h)
###                       ("_position" a) ("_position" newobj)))))))
###           ("_asm"
###             ("\<^const>HOL.Trueprop"
###               ("\<^const>HOL.eq" ("_position" ll)
###                 ("\<^const>Groups.plus_class.plus" ("_position" l)
###                   ("\<^const>Groups.one_class.one")))))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Set.member"
###       ("_tuple" ("_position" M)
###         ("_tuple_args" ("_position" l)
###           ("_tuple_args"
###             ("_tuple" ("_position" os)
###               ("_tuple_args" ("_position" s)
###                 ("_tuple_arg" ("_position" h))))
###             ("_tuple_args" ("\<^const>Groups.one_class.one")
###               ("_tuple_args" ("_position" ll)
###                 ("_tuple_arg" ("_position" NEXT)))))))
###       ("_position" Step))))
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>HOL.eq"
###         ("_applC" ("_position" get_ins)
###           ("_cargs" ("_position" M) ("_position" l)))
###         ("_applC" ("_position" Some)
###           ("_applC" ("_position" new) ("_position" d)))))
###     ("_asms"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>HOL.eq" ("_position" newobj)
###           ("_tuple" ("_position" d) ("_tuple_arg" ("_position" emp)))))
###       ("_asms"
###         ("\<^const>HOL.Trueprop"
###           ("\<^const>HOL.eq" ("_position" a)
###             ("_applC" ("_position" nextLoc) ("_position" h))))
###         ("_asms"
###           ("\<^const>HOL.Trueprop"
###             ("\<^const>HOL.eq" ("_position" NEXT)
###               ("_tuple"
###                 ("\<^const>List.list.Cons"
###                   ("_applC" ("_position" RVal)
###                     ("_applC" ("_position" Loc) ("_position" a)))
###                   ("_position" os))
###                 ("_tuple_args" ("_position" s)
###                   ("_tuple_arg"
###                     ("_applC" ("_position" h)
###                       ("_Map"
###                         ("_maplet" ("_position" a)
###                           ("_position" newobj)))))))))
###           ("_asm"
###             ("\<^const>HOL.Trueprop"
###               ("\<^const>HOL.eq" ("_position" ll)
###                 ("\<^const>Groups.plus_class.plus" ("_position" l)
###                   ("\<^const>Groups.one_class.one")))))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Set.member"
###       ("_tuple" ("_position" M)
###         ("_tuple_args" ("_position" l)
###           ("_tuple_args"
###             ("_tuple" ("_position" os)
###               ("_tuple_args" ("_position" s)
###                 ("_tuple_arg" ("_position" h))))
###             ("_tuple_args" ("\<^const>Groups.one_class.one")
###               ("_tuple_args" ("_position" ll)
###                 ("_tuple_arg" ("_position" NEXT)))))))
###       ("_position" Step))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 250 of "$AFP/BytecodeLogicJmlTypes/Language.thy") produces 4 parse trees:
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>HOL.eq"
###         ("_applC" ("_position" get_ins)
###           ("_cargs" ("_position" M) ("_position" l)))
###         ("_applC" ("_position" Some)
###           ("_applC" ("_position" getfield)
###             ("_cargs" ("_position" d) ("_position" F))))))
###     ("_asms"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>HOL.eq"
###           ("\<^const>AssocLists.lookup" ("_position" h) ("_position" a))
###           ("_applC" ("_position" Some)
###             ("_tuple" ("_position" d) ("_tuple_arg" ("_position" Flds))))))
###       ("_asms"
###         ("\<^const>HOL.Trueprop"
###           ("\<^const>HOL.eq"
###             ("\<^const>AssocLists.lookup" ("_position" Flds)
###               ("_position" F))
###             ("_applC" ("_position" Some) ("_position" v))))
###         ("_asms"
###           ("\<^const>HOL.Trueprop"
###             ("\<^const>HOL.eq" ("_position" NEXT)
###               ("_tuple"
###                 ("\<^const>List.list.Cons" ("_position" v) ("_position" os))
###                 ("_tuple_args" ("_position" s)
###                   ("_tuple_arg" ("_position" h))))))
###           ("_asm"
###             ("\<^const>HOL.Trueprop"
###               ("\<^const>HOL.eq" ("_position" ll)
###                 ("\<^const>Groups.plus_class.plus" ("_position" l)
###                   ("\<^const>Groups.one_class.one")))))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Set.member"
###       ("_tuple" ("_position" M)
###         ("_tuple_args" ("_position" l)
###           ("_tuple_args"
###             ("_tuple"
###               ("\<^const>List.list.Cons"
###                 ("_applC" ("_position" RVal)
###                   ("_applC" ("_position" Loc) ("_position" a)))
###                 ("_position" os))
###               ("_tuple_args" ("_position" s)
###                 ("_tuple_arg" ("_position" h))))
###             ("_tuple_args" ("\<^const>Groups.one_class.one")
###               ("_tuple_args" ("_position" ll)
###                 ("_tuple_arg" ("_position" NEXT)))))))
###       ("_position" Step))))
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>HOL.eq"
###         ("_applC" ("_position" get_ins)
###           ("_cargs" ("_position" M) ("_position" l)))
###         ("_applC" ("_position" Some)
###           ("_applC" ("_position" getfield)
###             ("_cargs" ("_position" d) ("_position" F))))))
###     ("_asms"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>AssocLists.lookup" ("_position" h)
###           ("\<^const>HOL.eq" ("_position" a)
###             ("_applC" ("_position" Some)
###               ("_tuple" ("_position" d)
###                 ("_tuple_arg" ("_position" Flds)))))))
###       ("_asms"
###         ("\<^const>HOL.Trueprop"
###           ("\<^const>HOL.eq"
###             ("\<^const>AssocLists.lookup" ("_position" Flds)
###               ("_position" F))
###             ("_applC" ("_position" Some) ("_position" v))))
###         ("_asms"
###           ("\<^const>HOL.Trueprop"
###             ("\<^const>HOL.eq" ("_position" NEXT)
###               ("_tuple"
###                 ("\<^const>List.list.Cons" ("_position" v) ("_position" os))
###                 ("_tuple_args" ("_position" s)
###                   ("_tuple_arg" ("_position" h))))))
###           ("_asm"
###             ("\<^const>HOL.Trueprop"
###               ("\<^const>HOL.eq" ("_position" ll)
###                 ("\<^const>Groups.plus_class.plus" ("_position" l)
###                   ("\<^const>Groups.one_class.one")))))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Set.member"
###       ("_tuple" ("_position" M)
###         ("_tuple_args" ("_position" l)
###           ("_tuple_args"
###             ("_tuple"
###               ("\<^const>List.list.Cons"
###                 ("_applC" ("_position" RVal)
###                   ("_applC" ("_position" Loc) ("_position" a)))
###                 ("_position" os))
###               ("_tuple_args" ("_position" s)
###                 ("_tuple_arg" ("_position" h))))
###             ("_tuple_args" ("\<^const>Groups.one_class.one")
###               ("_tuple_args" ("_position" ll)
###                 ("_tuple_arg" ("_position" NEXT)))))))
###       ("_position" Step))))
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>HOL.eq"
###         ("_applC" ("_position" get_ins)
###           ("_cargs" ("_position" M) ("_position" l)))
###         ("_applC" ("_position" Some)
###           ("_applC" ("_position" getfield)
###             ("_cargs" ("_position" d) ("_position" F))))))
###     ("_asms"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>HOL.eq"
###           ("\<^const>AssocLists.lookup" ("_position" h) ("_position" a))
###           ("_applC" ("_position" Some)
###             ("_tuple" ("_position" d) ("_tuple_arg" ("_position" Flds))))))
###       ("_asms"
###         ("\<^const>HOL.Trueprop"
###           ("\<^const>AssocLists.lookup" ("_position" Flds)
###             ("\<^const>HOL.eq" ("_position" F)
###               ("_applC" ("_position" Some) ("_position" v)))))
###         ("_asms"
###           ("\<^const>HOL.Trueprop"
###             ("\<^const>HOL.eq" ("_position" NEXT)
###               ("_tuple"
###                 ("\<^const>List.list.Cons" ("_position" v) ("_position" os))
###                 ("_tuple_args" ("_position" s)
###                   ("_tuple_arg" ("_position" h))))))
###           ("_asm"
###             ("\<^const>HOL.Trueprop"
###               ("\<^const>HOL.eq" ("_position" ll)
###                 ("\<^const>Groups.plus_class.plus" ("_position" l)
###                   ("\<^const>Groups.one_class.one")))))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Set.member"
###       ("_tuple" ("_position" M)
###         ("_tuple_args" ("_position" l)
###           ("_tuple_args"
###             ("_tuple"
###               ("\<^const>List.list.Cons"
###                 ("_applC" ("_position" RVal)
###                   ("_applC" ("_position" Loc) ("_position" a)))
###                 ("_position" os))
###               ("_tuple_args" ("_position" s)
###                 ("_tuple_arg" ("_position" h))))
###             ("_tuple_args" ("\<^const>Groups.one_class.one")
###               ("_tuple_args" ("_position" ll)
###                 ("_tuple_arg" ("_position" NEXT)))))))
###       ("_position" Step))))
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>HOL.eq"
###         ("_applC" ("_position" get_ins)
###           ("_cargs" ("_position" M) ("_position" l)))
###         ("_applC" ("_position" Some)
###           ("_applC" ("_position" getfield)
###             ("_cargs" ("_position" d) ("_position" F))))))
###     ("_asms"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>AssocLists.lookup" ("_position" h)
###           ("\<^const>HOL.eq" ("_position" a)
###             ("_applC" ("_position" Some)
###               ("_tuple" ("_position" d)
###                 ("_tuple_arg" ("_position" Flds)))))))
###       ("_asms"
###         ("\<^const>HOL.Trueprop"
###           ("\<^const>AssocLists.lookup" ("_position" Flds)
###             ("\<^const>HOL.eq" ("_position" F)
###               ("_applC" ("_position" Some) ("_position" v)))))
###         ("_asms"
###           ("\<^const>HOL.Trueprop"
###             ("\<^const>HOL.eq" ("_position" NEXT)
###               ("_tuple"
###                 ("\<^const>List.list.Cons" ("_position" v) ("_position" os))
###                 ("_tuple_args" ("_position" s)
###                   ("_tuple_arg" ("_position" h))))))
###           ("_asm"
###             ("\<^const>HOL.Trueprop"
###               ("\<^const>HOL.eq" ("_position" ll)
###                 ("\<^const>Groups.plus_class.plus" ("_position" l)
###                   ("\<^const>Groups.one_class.one")))))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Set.member"
###       ("_tuple" ("_position" M)
###         ("_tuple_args" ("_position" l)
###           ("_tuple_args"
###             ("_tuple"
###               ("\<^const>List.list.Cons"
###                 ("_applC" ("_position" RVal)
###                   ("_applC" ("_position" Loc) ("_position" a)))
###                 ("_position" os))
###               ("_tuple_args" ("_position" s)
###                 ("_tuple_arg" ("_position" h))))
###             ("_tuple_args" ("\<^const>Groups.one_class.one")
###               ("_tuple_args" ("_position" ll)
###                 ("_tuple_arg" ("_position" NEXT)))))))
###       ("_position" Step))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
Proofs for inductive predicate(s) "Stepp", "Execp"
Found termination order: "size <*mlex*> {}"
  Proving monotonicity ...
### theory "HOL-Library.Tree"
### 2.007s elapsed time, 6.413s cpu time, 1.048s GC time
Loading theory "Draft.Templates" (required by "Draft.ReachabilityMoreTemplates" via "Draft.ExtrEqs")
datatype template_term
=
     t_empty
   | template_app of template_term * template_term
   | template_hole of int
   | template_var of int
datatype sign
= equals | greater_equals | greater_than | less_equals | less_than
datatype template
=
     template_bimplication of template * template
   | template_dunno
   | template_equation of template_term * template_term
   | template_implication of template list * template
   | template_inequation of sign * template_term * template_term
   | template_negation of template
   | template_predicate of template_term
constructor t_empty: template_term
constructor template_app: template_term * template_term -> template_term
constructor template_hole: int -> template_term
constructor template_var: int -> template_term
constructor equals: sign
constructor greater_equals: sign
constructor greater_than: sign
constructor less_equals: sign
constructor less_than: sign
constructor template_bimplication: template * template -> template
constructor template_dunno: template
constructor template_equation: template_term * template_term -> template
constructor template_implication: template list * template -> template
constructor template_inequation:
   sign * template_term * template_term -> template
constructor template_negation: template -> template
constructor template_predicate: template_term -> template
val vfs = fn: term -> (indexname * typ) list * (string * typ) list
val indexOf = fn: ''a list -> ''a -> int -> int
val has_eq = fn: term -> bool
val term2template = fn:
   (indexname * typ) list -> (string * typ) list -> term -> template_term
val lemma2predicate = fn: term -> term -> template
val makeTemplatewithContext = fn: term -> term -> template
val lemma2template = fn: term -> template
val thm2template = fn: thm -> template
val tterm2string = fn: template_term -> string
val template2string = fn: template -> string
val t = "height ?t <= size ?t": thm
val th =
   Const ("HOL.Trueprop", "bool => prop") $
     (Const ("Orderings.ord_class.less_eq", "nat => nat => bool") $
       (Const ("Tree.height_class.height", "?'a tree => nat") $
         Var (("t", 0), "?'a tree")) $
       (Const ("Nat.size_class.size", "?'a tree => nat") $
         Var (("t", 0), "?'a tree"))):
   term
### theory "Draft.Templates"
### 0.053s elapsed time, 0.105s cpu time, 0.000s GC time
Loading theory "Draft.ExtrEqs" (required by "Draft.ReachabilityMoreTemplates")
val eqpattern =
   Pattern
    (
       Const ("HOL.Trueprop", "bool => prop") $
         (Const ("HOL.eq", "?'a => ?'a => bool") $
           Var (("_dummy_", 1), "?'a") $ Var (("_dummy_", 2), "?'a"))
       ):
   term Find_Theorems.criterion
val badeqpattern = Pattern (Const ("Pure.eq", "?'a => ?'a => prop")):
   term Find_Theorems.criterion
val undefpattern =
   Pattern
    (
       Const ("HOL.Trueprop", "bool => prop") $
         (Const ("HOL.eq", "?'a => ?'a => bool") $
           Var (("_dummy_", 1), "?'a") $ Const ("HOL.undefined", "?'a"))
       ):
   term Find_Theorems.criterion
val thmpattern =
   Pattern
    (Const ("HOL.Trueprop", "bool => prop") $ Var (("_dummy_", 1), "bool")):
   term Find_Theorems.criterion
val badnames =
   ["*nitpick*", "*Nitpick*", "*full_exhaustive*", "*_def*", "Enum.finite*",
    "*Quickcheck*", "ATP*", "*Nunchaku*", "*Code*", "*BNF*", "*SMT*",
    "*.*.*"]:
   string list
val unwanted_names =
   [(false, Name "*nitpick*"), (false, Name "*Nitpick*"),
    (false, Name "*full_exhaustive*"), (false, Name "*_def*"),
    (false, Name "Enum.finite*"), (false, Name "*Quickcheck*"),
    (false, Name "ATP*"), (false, Name "*Nunchaku*"),
    (false, Name "*Code*"), (false, Name "*BNF*"), (false, Name "*SMT*"),
    (false, Name "*.*.*")]:
   (bool * term Find_Theorems.criterion) list
val has_vars = fn: term -> bool
val get_all_eqs = fn: string -> Proof.context -> (string * thm) list
val get_all_thms = fn: string -> Proof.context -> (string * thm) list
val get_noneq_thms = fn: string -> Proof.context -> (string * thm) list
val template_eqs = fn:
   string -> Proof.context -> (string * thm * template) list
val template_thms = fn:
   string -> Proof.context -> (string * thm * template) list
### theory "Draft.ExtrEqs"
### 0.521s elapsed time, 1.071s cpu time, 0.078s GC time
### Ambiguous input (line 335 of "$AFP/BytecodeLogicJmlTypes/Language.thy") produces 9 parse trees:
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>Set.member"
###         ("_tuple" ("_position" M)
###           ("_tuple_args" ("_position" l)
###             ("_tuple_args"
###               ("_tuple" ("_position" os)
###                 ("_tuple_args" ("_position" S)
###                   ("_tuple_arg" ("_position" h))))
###               ("_tuple_args" ("_position" n)
###                 ("_tuple_args" ("_position" ll)
###                   ("_tuple_arg" ("_position" t)))))))
###         ("_position" Step)))
###     ("_asm"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>HOL.eq"
###           ("_applC" ("_position" get_ins)
###             ("_cargs" ("_position" M) ("_position" l)))
###           ("_applC" ("_position" Some)
###             ("_applC" ("_position" load) ("_position" x)))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>HOL.Ex_binder" ("_position" v)
###       ("\<^const>HOL.eq"
###         ("\<^const>AssocLists.lookup" ("_position" S)
###           ("\<^const>HOL.conj"
###             ("\<^const>HOL.eq" ("_position" x)
###               ("_applC" ("_position" Some) ("_position" v)))
###             ("\<^const>HOL.conj"
###               ("\<^const>HOL.eq" ("_position" n)
###                 ("_applC" ("_position" Suc)
###                   ("\<^const>Groups.zero_class.zero")))
###               ("\<^const>HOL.conj"
###                 ("\<^const>HOL.eq" ("_position" t)
###                   ("_tuple"
###                     ("\<^const>List.list.Cons" ("_position" v)
###                       ("_position" os))
###                     ("_tuple_args" ("_position" S)
###                       ("_tuple_arg" ("_position" h)))))
###                 ("_position" ll)))))
###         ("\<^const>Groups.plus_class.plus" ("_position" l)
###           ("\<^const>Groups.one_class.one"))))))
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>Set.member"
###         ("_tuple" ("_position" M)
###           ("_tuple_args" ("_position" l)
###             ("_tuple_args"
###               ("_tuple" ("_position" os)
###                 ("_tuple_args" ("_position" S)
###                   ("_tuple_arg" ("_position" h))))
###               ("_tuple_args" ("_position" n)
###                 ("_tuple_args" ("_position" ll)
###                   ("_tuple_arg" ("_position" t)))))))
###         ("_position" Step)))
###     ("_asm"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>HOL.eq"
###           ("_applC" ("_position" get_ins)
###             ("_cargs" ("_position" M) ("_position" l)))
###           ("_applC" ("_position" Some)
###             ("_applC" ("_position" load) ("_position" x)))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>HOL.Ex_binder" ("_position" v)
###       ("\<^const>HOL.conj"
###         ("\<^const>HOL.eq"
###           ("\<^const>AssocLists.lookup" ("_position" S)
###             ("\<^const>HOL.conj"
###               ("\<^const>HOL.eq" ("_position" x)
###                 ("_applC" ("_position" Some) ("_position" v)))
###               ("\<^const>HOL.conj"
###                 ("\<^const>HOL.eq" ("_position" n)
###                   ("_applC" ("_position" Suc)
###                     ("\<^const>Groups.zero_class.zero")))
###                 ("_position" t))))
###           ("_tuple"
###             ("\<^const>List.list.Cons" ("_position" v) ("_position" os))
###             ("_tuple_args" ("_position" S) ("_tuple_arg" ("_position" h)))))
###         ("\<^const>HOL.eq" ("_position" ll)
###           ("\<^const>Groups.plus_class.plus" ("_position" l)
###             ("\<^const>Groups.one_class.one")))))))
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>Set.member"
###         ("_tuple" ("_position" M)
###           ("_tuple_args" ("_position" l)
###             ("_tuple_args"
###               ("_tuple" ("_position" os)
###                 ("_tuple_args" ("_position" S)
###                   ("_tuple_arg" ("_position" h))))
###               ("_tuple_args" ("_position" n)
###                 ("_tuple_args" ("_position" ll)
###                   ("_tuple_arg" ("_position" t)))))))
###         ("_position" Step)))
###     ("_asm"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>HOL.eq"
###           ("_applC" ("_position" get_ins)
###             ("_cargs" ("_position" M) ("_position" l)))
###           ("_applC" ("_position" Some)
###             ("_applC" ("_position" load) ("_position" x)))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>HOL.Ex_binder" ("_position" v)
###       ("\<^const>HOL.conj"
###         ("\<^const>HOL.eq"
###           ("\<^const>AssocLists.lookup" ("_position" S)
###             ("\<^const>HOL.conj"
###               ("\<^const>HOL.eq" ("_position" x)
###                 ("_applC" ("_position" Some) ("_position" v)))
###               ("_position" n)))
###           ("_applC" ("_position" Suc) ("\<^const>Groups.zero_class.zero")))
###         ("\<^const>HOL.conj"
###           ("\<^const>HOL.eq" ("_position" t)
###             ("_tuple"
###               ("\<^const>List.list.Cons" ("_position" v) ("_position" os))
###               ("_tuple_args" ("_position" S)
###                 ("_tuple_arg" ("_position" h)))))
###           ("\<^const>HOL.eq" ("_position" ll)
###             ("\<^const>Groups.plus_class.plus" ("_position" l)
###               ("\<^const>Groups.one_class.one"))))))))
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>Set.member"
###         ("_tuple" ("_position" M)
###           ("_tuple_args" ("_position" l)
###             ("_tuple_args"
###               ("_tuple" ("_position" os)
###                 ("_tuple_args" ("_position" S)
###                   ("_tuple_arg" ("_position" h))))
###               ("_tuple_args" ("_position" n)
###                 ("_tuple_args" ("_position" ll)
###                   ("_tuple_arg" ("_position" t)))))))
###         ("_position" Step)))
###     ("_asm"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>HOL.eq"
###           ("_applC" ("_position" get_ins)
###             ("_cargs" ("_position" M) ("_position" l)))
###           ("_applC" ("_position" Some)
###             ("_applC" ("_position" load) ("_position" x)))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>HOL.Ex_binder" ("_position" v)
###       ("\<^const>HOL.conj"
###         ("\<^const>HOL.eq"
###           ("\<^const>AssocLists.lookup" ("_position" S) ("_position" x))
###           ("_applC" ("_position" Some) ("_position" v)))
###         ("\<^const>HOL.conj"
###           ("\<^const>HOL.eq" ("_position" n)
###             ("_applC" ("_position" Suc)
###               ("\<^const>Groups.zero_class.zero")))
###           ("\<^const>HOL.conj"
###             ("\<^const>HOL.eq" ("_position" t)
###               ("_tuple"
###                 ("\<^const>List.list.Cons" ("_position" v) ("_position" os))
###                 ("_tuple_args" ("_position" S)
###                   ("_tuple_arg" ("_position" h)))))
###             ("\<^const>HOL.eq" ("_position" ll)
###               ("\<^const>Groups.plus_class.plus" ("_position" l)
###                 ("\<^const>Groups.one_class.one")))))))))
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>Set.member"
###         ("_tuple" ("_position" M)
###           ("_tuple_args" ("_position" l)
###             ("_tuple_args"
###               ("_tuple" ("_position" os)
###                 ("_tuple_args" ("_position" S)
###                   ("_tuple_arg" ("_position" h))))
###               ("_tuple_args" ("_position" n)
###                 ("_tuple_args" ("_position" ll)
###                   ("_tuple_arg" ("_position" t)))))))
###         ("_position" Step)))
###     ("_asm"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>HOL.eq"
###           ("_applC" ("_position" get_ins)
###             ("_cargs" ("_position" M) ("_position" l)))
###           ("_applC" ("_position" Some)
###             ("_applC" ("_position" load) ("_position" x)))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>HOL.Ex_binder" ("_position" v)
###       ("\<^const>AssocLists.lookup" ("_position" S)
###         ("\<^const>HOL.conj"
###           ("\<^const>HOL.eq" ("_position" x)
###             ("_applC" ("_position" Some) ("_position" v)))
###           ("\<^const>HOL.conj"
###             ("\<^const>HOL.eq" ("_position" n)
###               ("_applC" ("_position" Suc)
###                 ("\<^const>Groups.zero_class.zero")))
###             ("\<^const>HOL.conj"
###               ("\<^const>HOL.eq" ("_position" t)
###                 ("_tuple"
###                   ("\<^const>List.list.Cons" ("_position" v)
###                     ("_position" os))
###                   ("_tuple_args" ("_position" S)
###                     ("_tuple_arg" ("_position" h)))))
###               ("\<^const>HOL.eq" ("_position" ll)
###                 ("\<^const>Groups.plus_class.plus" ("_position" l)
###                   ("\<^const>Groups.one_class.one"))))))))))
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>Set.member"
###         ("_tuple" ("_position" M)
###           ("_tuple_args" ("_position" l)
###             ("_tuple_args"
###               ("_tuple" ("_position" os)
###                 ("_tuple_args" ("_position" S)
###                   ("_tuple_arg" ("_position" h))))
###               ("_tuple_args" ("_position" n)
###                 ("_tuple_args" ("_position" ll)
###                   ("_tuple_arg" ("_position" t)))))))
###         ("_position" Step)))
###     ("_asm"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>HOL.eq"
###           ("_applC" ("_position" get_ins)
###             ("_cargs" ("_position" M) ("_position" l)))
###           ("_applC" ("_position" Some)
###             ("_applC" ("_position" load) ("_position" x)))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>HOL.Ex_binder" ("_position" v)
###       ("\<^const>HOL.conj"
###         ("\<^const>AssocLists.lookup" ("_position" S)
###           ("\<^const>HOL.eq" ("_position" x)
###             ("_applC" ("_position" Some) ("_position" v))))
###         ("\<^const>HOL.conj"
###           ("\<^const>HOL.eq" ("_position" n)
###             ("_applC" ("_position" Suc)
###               ("\<^const>Groups.zero_class.zero")))
###           ("\<^const>HOL.conj"
###             ("\<^const>HOL.eq" ("_position" t)
###               ("_tuple"
###                 ("\<^const>List.list.Cons" ("_position" v) ("_position" os))
###                 ("_tuple_args" ("_position" S)
###                   ("_tuple_arg" ("_position" h)))))
###             ("\<^const>HOL.eq" ("_position" ll)
###               ("\<^const>Groups.plus_class.plus" ("_position" l)
###                 ("\<^const>Groups.one_class.one")))))))))
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>Set.member"
###         ("_tuple" ("_position" M)
###           ("_tuple_args" ("_position" l)
###             ("_tuple_args"
###               ("_tuple" ("_position" os)
###                 ("_tuple_args" ("_position" S)
###                   ("_tuple_arg" ("_position" h))))
###               ("_tuple_args" ("_position" n)
###                 ("_tuple_args" ("_position" ll)
###                   ("_tuple_arg" ("_position" t)))))))
###         ("_position" Step)))
###     ("_asm"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>HOL.eq"
###           ("_applC" ("_position" get_ins)
###             ("_cargs" ("_position" M) ("_position" l)))
###           ("_applC" ("_position" Some)
###             ("_applC" ("_position" load) ("_position" x)))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>HOL.Ex_binder" ("_position" v)
###       ("\<^const>HOL.conj"
###         ("\<^const>AssocLists.lookup" ("_position" S)
###           ("\<^const>HOL.conj"
###             ("\<^const>HOL.eq" ("_position" x)
###               ("_applC" ("_position" Some) ("_position" v)))
###             ("\<^const>HOL.eq" ("_position" n)
###               ("_applC" ("_position" Suc)
###                 ("\<^const>Groups.zero_class.zero")))))
###         ("\<^const>HOL.conj"
###           ("\<^const>HOL.eq" ("_position" t)
###             ("_tuple"
###               ("\<^const>List.list.Cons" ("_position" v) ("_position" os))
###               ("_tuple_args" ("_position" S)
###                 ("_tuple_arg" ("_position" h)))))
###           ("\<^const>HOL.eq" ("_position" ll)
###             ("\<^const>Groups.plus_class.plus" ("_position" l)
###               ("\<^const>Groups.one_class.one"))))))))
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>Set.member"
###         ("_tuple" ("_position" M)
###           ("_tuple_args" ("_position" l)
###             ("_tuple_args"
###               ("_tuple" ("_position" os)
###                 ("_tuple_args" ("_position" S)
###                   ("_tuple_arg" ("_position" h))))
###               ("_tuple_args" ("_position" n)
###                 ("_tuple_args" ("_position" ll)
###                   ("_tuple_arg" ("_position" t)))))))
###         ("_position" Step)))
###     ("_asm"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>HOL.eq"
###           ("_applC" ("_position" get_ins)
###             ("_cargs" ("_position" M) ("_position" l)))
###           ("_applC" ("_position" Some)
###             ("_applC" ("_position" load) ("_position" x)))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>HOL.Ex_binder" ("_position" v)
###       ("\<^const>HOL.conj"
###         ("\<^const>AssocLists.lookup" ("_position" S)
###           ("\<^const>HOL.conj"
###             ("\<^const>HOL.eq" ("_position" x)
###               ("_applC" ("_position" Some) ("_position" v)))
###             ("\<^const>HOL.conj"
###               ("\<^const>HOL.eq" ("_position" n)
###                 ("_applC" ("_position" Suc)
###                   ("\<^const>Groups.zero_class.zero")))
###               ("\<^const>HOL.eq" ("_position" t)
###                 ("_tuple"
###                   ("\<^const>List.list.Cons" ("_position" v)
###                     ("_position" os))
###                   ("_tuple_args" ("_position" S)
###                     ("_tuple_arg" ("_position" h))))))))
###         ("\<^const>HOL.eq" ("_position" ll)
###           ("\<^const>Groups.plus_class.plus" ("_position" l)
###             ("\<^const>Groups.one_class.one")))))))
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>Set.member"
###         ("_tuple" ("_position" M)
###           ("_tuple_args" ("_position" l)
###             ("_tuple_args"
###               ("_tuple" ("_position" os)
###                 ("_tuple_args" ("_position" S)
###                   ("_tuple_arg" ("_position" h))))
###               ("_tuple_args" ("_position" n)
###                 ("_tuple_args" ("_position" ll)
###                   ("_tuple_arg" ("_position" t)))))))
###         ("_position" Step)))
###     ("_asm"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>HOL.eq"
###           ("_applC" ("_position" get_ins)
###             ("_cargs" ("_position" M) ("_position" l)))
###           ("_applC" ("_position" Some)
###             ("_applC" ("_position" load) ("_position" x)))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>HOL.Ex_binder" ("_position" v)
###       ("\<^const>Groups.plus_class.plus"
###         ("\<^const>AssocLists.lookup" ("_position" S)
###           ("\<^const>HOL.conj"
###             ("\<^const>HOL.eq" ("_position" x)
###               ("_applC" ("_position" Some) ("_position" v)))
###             ("\<^const>HOL.conj"
###               ("\<^const>HOL.eq" ("_position" n)
###                 ("_applC" ("_position" Suc)
###                   ("\<^const>Groups.zero_class.zero")))
###               ("\<^const>HOL.conj"
###                 ("\<^const>HOL.eq" ("_position" t)
###                   ("_tuple"
###                     ("\<^const>List.list.Cons" ("_position" v)
###                       ("_position" os))
###                     ("_tuple_args" ("_position" S)
###                       ("_tuple_arg" ("_position" h)))))
###                 ("\<^const>HOL.eq" ("_position" ll) ("_position" l))))))
###         ("\<^const>Groups.one_class.one")))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 339 of "$AFP/BytecodeLogicJmlTypes/Language.thy") produces 2 parse trees:
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>Set.member"
###         ("_tuple" ("_position" M)
###           ("_tuple_args" ("_position" l)
###             ("_tuple_args"
###               ("_tuple" ("_position" os)
###                 ("_tuple_args" ("_position" S)
###                   ("_tuple_arg" ("_position" h))))
###               ("_tuple_args" ("_position" n)
###                 ("_tuple_args" ("_position" ll)
###                   ("_tuple_arg" ("_position" t)))))))
###         ("_position" Step)))
###     ("_asm"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>HOL.eq"
###           ("_applC" ("_position" get_ins)
###             ("_cargs" ("_position" M) ("_position" l)))
###           ("_applC" ("_position" Some)
###             ("_applC" ("_position" store) ("_position" x)))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>HOL.Ex_binder" ("_idts" ("_position" v) ("_position" ops))
###       ("\<^const>HOL.conj"
###         ("\<^const>HOL.eq" ("_position" os)
###           ("\<^const>List.list.Cons" ("_position" v) ("_position" ops)))
###         ("\<^const>HOL.conj"
###           ("\<^const>HOL.eq" ("_position" n)
###             ("_applC" ("_position" Suc)
###               ("\<^const>Groups.zero_class.zero")))
###           ("\<^const>HOL.conj"
###             ("\<^const>HOL.eq" ("_position" t)
###               ("_tuple" ("_position" ops)
###                 ("_tuple_args"
###                   ("_applC" ("_position" S)
###                     ("_Map" ("_maplet" ("_position" x) ("_position" v))))
###                   ("_tuple_arg" ("_position" h)))))
###             ("\<^const>HOL.eq" ("_position" ll)
###               ("\<^const>Groups.plus_class.plus" ("_position" l)
###                 ("\<^const>Groups.one_class.one")))))))))
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>Set.member"
###         ("_tuple" ("_position" M)
###           ("_tuple_args" ("_position" l)
###             ("_tuple_args"
###               ("_tuple" ("_position" os)
###                 ("_tuple_args" ("_position" S)
###                   ("_tuple_arg" ("_position" h))))
###               ("_tuple_args" ("_position" n)
###                 ("_tuple_args" ("_position" ll)
###                   ("_tuple_arg" ("_position" t)))))))
###         ("_position" Step)))
###     ("_asm"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>HOL.eq"
###           ("_applC" ("_position" get_ins)
###             ("_cargs" ("_position" M) ("_position" l)))
###           ("_applC" ("_position" Some)
###             ("_applC" ("_position" store) ("_position" x)))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>HOL.Ex_binder" ("_idts" ("_position" v) ("_position" ops))
###       ("\<^const>HOL.conj"
###         ("\<^const>HOL.eq" ("_position" os)
###           ("\<^const>List.list.Cons" ("_position" v) ("_position" ops)))
###         ("\<^const>HOL.conj"
###           ("\<^const>HOL.eq" ("_position" n)
###             ("_applC" ("_position" Suc)
###               ("\<^const>Groups.zero_class.zero")))
###           ("\<^const>HOL.conj"
###             ("\<^const>HOL.eq" ("_position" t)
###               ("_tuple" ("_position" ops)
###                 ("_tuple_args"
###                   ("\<^const>AssocLists.upd" ("_position" S) ("_position" x)
###                     ("_position" v))
###                   ("_tuple_arg" ("_position" h)))))
###             ("\<^const>HOL.eq" ("_position" ll)
###               ("\<^const>Groups.plus_class.plus" ("_position" l)
###                 ("\<^const>Groups.one_class.one")))))))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 351 of "$AFP/BytecodeLogicJmlTypes/Language.thy") produces 2 parse trees:
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>Set.member"
###         ("_tuple" ("_position" M)
###           ("_tuple_args" ("_position" l)
###             ("_tuple_args"
###               ("_tuple" ("_position" os)
###                 ("_tuple_args" ("_position" S)
###                   ("_tuple_arg" ("_position" h))))
###               ("_tuple_args" ("_position" n)
###                 ("_tuple_args" ("_position" ll)
###                   ("_tuple_arg" ("_position" t)))))))
###         ("_position" Step)))
###     ("_asm"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>HOL.eq"
###           ("_applC" ("_position" get_ins)
###             ("_cargs" ("_position" M) ("_position" l)))
###           ("_applC" ("_position" Some)
###             ("_applC" ("_position" new) ("_position" d)))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>HOL.Ex_binder" ("_position" a)
###       ("\<^const>HOL.conj"
###         ("\<^const>HOL.eq" ("_position" a)
###           ("_applC" ("_position" nextLoc) ("_position" h)))
###         ("\<^const>HOL.conj"
###           ("\<^const>HOL.eq" ("_position" n)
###             ("_applC" ("_position" Suc)
###               ("\<^const>Groups.zero_class.zero")))
###           ("\<^const>HOL.conj"
###             ("\<^const>HOL.eq" ("_position" t)
###               ("_tuple"
###                 ("\<^const>List.list.Cons"
###                   ("_applC" ("_position" RVal)
###                     ("_applC" ("_position" Loc) ("_position" a)))
###                   ("_position" os))
###                 ("_tuple_args" ("_position" S)
###                   ("_tuple_arg"
###                     ("_applC" ("_position" h)
###                       ("_Map"
###                         ("_maplet" ("_position" a)
###                           ("_tuple" ("_position" d)
###                             ("_tuple_arg" ("_position" emp))))))))))
###             ("\<^const>HOL.eq" ("_position" ll)
###               ("\<^const>Groups.plus_class.plus" ("_position" l)
###                 ("\<^const>Groups.one_class.one")))))))))
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>Set.member"
###         ("_tuple" ("_position" M)
###           ("_tuple_args" ("_position" l)
###             ("_tuple_args"
###               ("_tuple" ("_position" os)
###                 ("_tuple_args" ("_position" S)
###                   ("_tuple_arg" ("_position" h))))
###               ("_tuple_args" ("_position" n)
###                 ("_tuple_args" ("_position" ll)
###                   ("_tuple_arg" ("_position" t)))))))
###         ("_position" Step)))
###     ("_asm"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>HOL.eq"
###           ("_applC" ("_position" get_ins)
###             ("_cargs" ("_position" M) ("_position" l)))
###           ("_applC" ("_position" Some)
###             ("_applC" ("_position" new) ("_position" d)))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>HOL.Ex_binder" ("_position" a)
###       ("\<^const>HOL.conj"
###         ("\<^const>HOL.eq" ("_position" a)
###           ("_applC" ("_position" nextLoc) ("_position" h)))
###         ("\<^const>HOL.conj"
###           ("\<^const>HOL.eq" ("_position" n)
###             ("_applC" ("_position" Suc)
###               ("\<^const>Groups.zero_class.zero")))
###           ("\<^const>HOL.conj"
###             ("\<^const>HOL.eq" ("_position" t)
###               ("_tuple"
###                 ("\<^const>List.list.Cons"
###                   ("_applC" ("_position" RVal)
###                     ("_applC" ("_position" Loc) ("_position" a)))
###                   ("_position" os))
###                 ("_tuple_args" ("_position" S)
###                   ("_tuple_arg"
###                     ("\<^const>AssocLists.upd" ("_position" h)
###                       ("_position" a)
###                       ("_tuple" ("_position" d)
###                         ("_tuple_arg" ("_position" emp))))))))
###             ("\<^const>HOL.eq" ("_position" ll)
###               ("\<^const>Groups.plus_class.plus" ("_position" l)
###                 ("\<^const>Groups.one_class.one")))))))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 355 of "$AFP/BytecodeLogicJmlTypes/Language.thy") produces 114 parse trees (10 displayed):
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>Set.member"
###         ("_tuple" ("_position" M)
###           ("_tuple_args" ("_position" l)
###             ("_tuple_args"
###               ("_tuple" ("_position" os)
###                 ("_tuple_args" ("_position" S)
###                   ("_tuple_arg" ("_position" h))))
###               ("_tuple_args" ("_position" n)
###                 ("_tuple_args" ("_position" ll)
###                   ("_tuple_arg" ("_position" t)))))))
###         ("_position" Step)))
###     ("_asm"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>HOL.eq"
###           ("_applC" ("_position" get_ins)
###             ("_cargs" ("_position" M) ("_position" l)))
###           ("_applC" ("_position" Some)
###             ("_applC" ("_position" getfield)
###               ("_cargs" ("_position" d) ("_position" F))))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>HOL.Ex_binder"
###       ("_idts" ("_position" a)
###         ("_idts" ("_position" Flds)
###           ("_idts" ("_position" v) ("_position" ops))))
###       ("\<^const>HOL.eq"
###         ("\<^const>AssocLists.lookup" ("_position" h)
###           ("\<^const>HOL.conj"
###             ("\<^const>HOL.eq" ("_position" a)
###               ("_applC" ("_position" Some)
###                 ("_tuple" ("_position" d)
###                   ("_tuple_arg" ("_position" Flds)))))
###             ("\<^const>HOL.conj"
###               ("\<^const>HOL.eq"
###                 ("\<^const>AssocLists.lookup" ("_position" Flds)
###                   ("\<^const>HOL.conj"
###                     ("\<^const>HOL.eq" ("_position" F)
###                       ("_applC" ("_position" Some) ("_position" v)))
###                     ("\<^const>HOL.conj"
###                       ("\<^const>HOL.eq" ("_position" os)
###                         ("\<^const>List.list.Cons"
###                           ("_applC" ("_position" RVal)
###                             ("_applC" ("_position" Loc) ("_position" a)))
###                           ("_position" ops)))
###                       ("\<^const>HOL.conj"
###                         ("\<^const>HOL.eq" ("_position" n)
###                           ("_applC" ("_position" Suc)
###                             ("\<^const>Groups.zero_class.zero")))
###                         ("_position" t)))))
###                 ("_tuple"
###                   ("\<^const>List.list.Cons" ("_position" v)
###                     ("_position" ops))
###                   ("_tuple_args" ("_position" S)
###                     ("_tuple_arg" ("_position" h)))))
###               ("_position" ll))))
###         ("\<^const>Groups.plus_class.plus" ("_position" l)
###           ("\<^const>Groups.one_class.one"))))))
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>Set.member"
###         ("_tuple" ("_position" M)
###           ("_tuple_args" ("_position" l)
###             ("_tuple_args"
###               ("_tuple" ("_position" os)
###                 ("_tuple_args" ("_position" S)
###                   ("_tuple_arg" ("_position" h))))
###               ("_tuple_args" ("_position" n)
###                 ("_tuple_args" ("_position" ll)
###                   ("_tuple_arg" ("_position" t)))))))
###         ("_position" Step)))
###     ("_asm"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>HOL.eq"
###           ("_applC" ("_position" get_ins)
###             ("_cargs" ("_position" M) ("_position" l)))
###           ("_applC" ("_position" Some)
###             ("_applC" ("_position" getfield)
###               ("_cargs" ("_position" d) ("_position" F))))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>HOL.Ex_binder"
###       ("_idts" ("_position" a)
###         ("_idts" ("_position" Flds)
###           ("_idts" ("_position" v) ("_position" ops))))
###       ("\<^const>HOL.eq"
###         ("\<^const>AssocLists.lookup" ("_position" h)
###           ("\<^const>HOL.conj"
###             ("\<^const>HOL.eq" ("_position" a)
###               ("_applC" ("_position" Some)
###                 ("_tuple" ("_position" d)
###                   ("_tuple_arg" ("_position" Flds)))))
###             ("\<^const>HOL.conj"
###               ("\<^const>HOL.eq"
###                 ("\<^const>AssocLists.lookup" ("_position" Flds)
###                   ("\<^const>HOL.conj"
###                     ("\<^const>HOL.eq" ("_position" F)
###                       ("_applC" ("_position" Some) ("_position" v)))
###                     ("\<^const>HOL.conj"
###                       ("\<^const>HOL.eq" ("_position" os)
###                         ("\<^const>List.list.Cons"
###                           ("_applC" ("_position" RVal)
###                             ("_applC" ("_position" Loc) ("_position" a)))
###                           ("_position" ops)))
###                       ("_position" n))))
###                 ("_applC" ("_position" Suc)
###                   ("\<^const>Groups.zero_class.zero")))
###               ("\<^const>HOL.conj"
###                 ("\<^const>HOL.eq" ("_position" t)
###                   ("_tuple"
###                     ("\<^const>List.list.Cons" ("_position" v)
###                       ("_position" ops))
###                     ("_tuple_args" ("_position" S)
###                       ("_tuple_arg" ("_position" h)))))
###                 ("_position" ll)))))
###         ("\<^const>Groups.plus_class.plus" ("_position" l)
###           ("\<^const>Groups.one_class.one"))))))
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>Set.member"
###         ("_tuple" ("_position" M)
###           ("_tuple_args" ("_position" l)
###             ("_tuple_args"
###               ("_tuple" ("_position" os)
###                 ("_tuple_args" ("_position" S)
###                   ("_tuple_arg" ("_position" h))))
###               ("_tuple_args" ("_position" n)
###                 ("_tuple_args" ("_position" ll)
###                   ("_tuple_arg" ("_position" t)))))))
###         ("_position" Step)))
###     ("_asm"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>HOL.eq"
###           ("_applC" ("_position" get_ins)
###             ("_cargs" ("_position" M) ("_position" l)))
###           ("_applC" ("_position" Some)
###             ("_applC" ("_position" getfield)
###               ("_cargs" ("_position" d) ("_position" F))))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>HOL.Ex_binder"
###       ("_idts" ("_position" a)
###         ("_idts" ("_position" Flds)
###           ("_idts" ("_position" v) ("_position" ops))))
###       ("\<^const>HOL.eq"
###         ("\<^const>AssocLists.lookup" ("_position" h)
###           ("\<^const>HOL.conj"
###             ("\<^const>HOL.eq" ("_position" a)
###               ("_applC" ("_position" Some)
###                 ("_tuple" ("_position" d)
###                   ("_tuple_arg" ("_position" Flds)))))
###             ("\<^const>HOL.conj"
###               ("\<^const>HOL.eq"
###                 ("\<^const>AssocLists.lookup" ("_position" Flds)
###                   ("\<^const>HOL.conj"
###                     ("\<^const>HOL.eq" ("_position" F)
###                       ("_applC" ("_position" Some) ("_position" v)))
###                     ("_position" os)))
###                 ("\<^const>List.list.Cons"
###                   ("_applC" ("_position" RVal)
###                     ("_applC" ("_position" Loc) ("_position" a)))
###                   ("_position" ops)))
###               ("\<^const>HOL.conj"
###                 ("\<^const>HOL.eq" ("_position" n)
###                   ("_applC" ("_position" Suc)
###                     ("\<^const>Groups.zero_class.zero")))
###                 ("\<^const>HOL.conj"
###                   ("\<^const>HOL.eq" ("_position" t)
###                     ("_tuple"
###                       ("\<^const>List.list.Cons" ("_position" v)
###                         ("_position" ops))
###                       ("_tuple_args" ("_position" S)
###                         ("_tuple_arg" ("_position" h)))))
###                   ("_position" ll))))))
###         ("\<^const>Groups.plus_class.plus" ("_position" l)
###           ("\<^const>Groups.one_class.one"))))))
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>Set.member"
###         ("_tuple" ("_position" M)
###           ("_tuple_args" ("_position" l)
###             ("_tuple_args"
###               ("_tuple" ("_position" os)
###                 ("_tuple_args" ("_position" S)
###                   ("_tuple_arg" ("_position" h))))
###               ("_tuple_args" ("_position" n)
###                 ("_tuple_args" ("_position" ll)
###                   ("_tuple_arg" ("_position" t)))))))
###         ("_position" Step)))
###     ("_asm"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>HOL.eq"
###           ("_applC" ("_position" get_ins)
###             ("_cargs" ("_position" M) ("_position" l)))
###           ("_applC" ("_position" Some)
###             ("_applC" ("_position" getfield)
###               ("_cargs" ("_position" d) ("_position" F))))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>HOL.Ex_binder"
###       ("_idts" ("_position" a)
###         ("_idts" ("_position" Flds)
###           ("_idts" ("_position" v) ("_position" ops))))
###       ("\<^const>HOL.eq"
###         ("\<^const>AssocLists.lookup" ("_position" h)
###           ("\<^const>HOL.conj"
###             ("\<^const>HOL.eq" ("_position" a)
###               ("_applC" ("_position" Some)
###                 ("_tuple" ("_position" d)
###                   ("_tuple_arg" ("_position" Flds)))))
###             ("\<^const>HOL.conj"
###               ("\<^const>HOL.eq"
###                 ("\<^const>AssocLists.lookup" ("_position" Flds)
###                   ("_position" F))
###                 ("_applC" ("_position" Some) ("_position" v)))
###               ("\<^const>HOL.conj"
###                 ("\<^const>HOL.eq" ("_position" os)
###                   ("\<^const>List.list.Cons"
###                     ("_applC" ("_position" RVal)
###                       ("_applC" ("_position" Loc) ("_position" a)))
###                     ("_position" ops)))
###                 ("\<^const>HOL.conj"
###                   ("\<^const>HOL.eq" ("_position" n)
###                     ("_applC" ("_position" Suc)
###                       ("\<^const>Groups.zero_class.zero")))
###                   ("\<^const>HOL.conj"
###                     ("\<^const>HOL.eq" ("_position" t)
###                       ("_tuple"
###                         ("\<^const>List.list.Cons" ("_position" v)
###                           ("_position" ops))
###                         ("_tuple_args" ("_position" S)
###                           ("_tuple_arg" ("_position" h)))))
###                     ("_position" ll)))))))
###         ("\<^const>Groups.plus_class.plus" ("_position" l)
###           ("\<^const>Groups.one_class.one"))))))
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>Set.member"
###         ("_tuple" ("_position" M)
###           ("_tuple_args" ("_position" l)
###             ("_tuple_args"
###               ("_tuple" ("_position" os)
###                 ("_tuple_args" ("_position" S)
###                   ("_tuple_arg" ("_position" h))))
###               ("_tuple_args" ("_position" n)
###                 ("_tuple_args" ("_position" ll)
###                   ("_tuple_arg" ("_position" t)))))))
###         ("_position" Step)))
###     ("_asm"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>HOL.eq"
###           ("_applC" ("_position" get_ins)
###             ("_cargs" ("_position" M) ("_position" l)))
###           ("_applC" ("_position" Some)
###             ("_applC" ("_position" getfield)
###               ("_cargs" ("_position" d) ("_position" F))))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>HOL.Ex_binder"
###       ("_idts" ("_position" a)
###         ("_idts" ("_position" Flds)
###           ("_idts" ("_position" v) ("_position" ops))))
###       ("\<^const>HOL.conj"
###         ("\<^const>HOL.eq"
###           ("\<^const>AssocLists.lookup" ("_position" h) ("_position" a))
###           ("_applC" ("_position" Some)
###             ("_tuple" ("_position" d) ("_tuple_arg" ("_position" Flds)))))
###         ("\<^const>HOL.eq"
###           ("\<^const>AssocLists.lookup" ("_position" Flds)
###             ("\<^const>HOL.conj"
###               ("\<^const>HOL.eq" ("_position" F)
###                 ("_applC" ("_position" Some) ("_position" v)))
###               ("\<^const>HOL.conj"
###                 ("\<^const>HOL.eq" ("_position" os)
###                   ("\<^const>List.list.Cons"
###                     ("_applC" ("_position" RVal)
###                       ("_applC" ("_position" Loc) ("_position" a)))
###                     ("_position" ops)))
###                 ("\<^const>HOL.conj"
###                   ("\<^const>HOL.eq" ("_position" n)
###                     ("_applC" ("_position" Suc)
###                       ("\<^const>Groups.zero_class.zero")))
###                   ("\<^const>HOL.conj"
###                     ("\<^const>HOL.eq" ("_position" t)
###                       ("_tuple"
###                         ("\<^const>List.list.Cons" ("_position" v)
###                           ("_position" ops))
###                         ("_tuple_args" ("_position" S)
###                           ("_tuple_arg" ("_position" h)))))
###                     ("_position" ll))))))
###           ("\<^const>Groups.plus_class.plus" ("_position" l)
###             ("\<^const>Groups.one_class.one")))))))
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>Set.member"
###         ("_tuple" ("_position" M)
###           ("_tuple_args" ("_position" l)
###             ("_tuple_args"
###               ("_tuple" ("_position" os)
###                 ("_tuple_args" ("_position" S)
###                   ("_tuple_arg" ("_position" h))))
###               ("_tuple_args" ("_position" n)
###                 ("_tuple_args" ("_position" ll)
###                   ("_tuple_arg" ("_position" t)))))))
###         ("_position" Step)))
###     ("_asm"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>HOL.eq"
###           ("_applC" ("_position" get_ins)
###             ("_cargs" ("_position" M) ("_position" l)))
###           ("_applC" ("_position" Some)
###             ("_applC" ("_position" getfield)
###               ("_cargs" ("_position" d) ("_position" F))))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>HOL.Ex_binder"
###       ("_idts" ("_position" a)
###         ("_idts" ("_position" Flds)
###           ("_idts" ("_position" v) ("_position" ops))))
###       ("\<^const>AssocLists.lookup" ("_position" h)
###         ("\<^const>HOL.conj"
###           ("\<^const>HOL.eq" ("_position" a)
###             ("_applC" ("_position" Some)
###               ("_tuple" ("_position" d) ("_tuple_arg" ("_position" Flds)))))
###           ("\<^const>HOL.eq"
###             ("\<^const>AssocLists.lookup" ("_position" Flds)
###               ("\<^const>HOL.conj"
###                 ("\<^const>HOL.eq" ("_position" F)
###                   ("_applC" ("_position" Some) ("_position" v)))
###                 ("\<^const>HOL.conj"
###                   ("\<^const>HOL.eq" ("_position" os)
###                     ("\<^const>List.list.Cons"
###                       ("_applC" ("_position" RVal)
###                         ("_applC" ("_position" Loc) ("_position" a)))
###                       ("_position" ops)))
###                   ("\<^const>HOL.conj"
###                     ("\<^const>HOL.eq" ("_position" n)
###                       ("_applC" ("_position" Suc)
###                         ("\<^const>Groups.zero_class.zero")))
###                     ("\<^const>HOL.conj"
###                       ("\<^const>HOL.eq" ("_position" t)
###                         ("_tuple"
###                           ("\<^const>List.list.Cons" ("_position" v)
###                             ("_position" ops))
###                           ("_tuple_args" ("_position" S)
###                             ("_tuple_arg" ("_position" h)))))
###                       ("_position" ll))))))
###             ("\<^const>Groups.plus_class.plus" ("_position" l)
###               ("\<^const>Groups.one_class.one"))))))))
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>Set.member"
###         ("_tuple" ("_position" M)
###           ("_tuple_args" ("_position" l)
###             ("_tuple_args"
###               ("_tuple" ("_position" os)
###                 ("_tuple_args" ("_position" S)
###                   ("_tuple_arg" ("_position" h))))
###               ("_tuple_args" ("_position" n)
###                 ("_tuple_args" ("_position" ll)
###                   ("_tuple_arg" ("_position" t)))))))
###         ("_position" Step)))
###     ("_asm"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>HOL.eq"
###           ("_applC" ("_position" get_ins)
###             ("_cargs" ("_position" M) ("_position" l)))
###           ("_applC" ("_position" Some)
###             ("_applC" ("_position" getfield)
###               ("_cargs" ("_position" d) ("_position" F))))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>HOL.Ex_binder"
###       ("_idts" ("_position" a)
###         ("_idts" ("_position" Flds)
###           ("_idts" ("_position" v) ("_position" ops))))
###       ("\<^const>HOL.conj"
###         ("\<^const>AssocLists.lookup" ("_position" h)
###           ("\<^const>HOL.eq" ("_position" a)
###             ("_applC" ("_position" Some)
###               ("_tuple" ("_position" d)
###                 ("_tuple_arg" ("_position" Flds))))))
###         ("\<^const>HOL.eq"
###           ("\<^const>AssocLists.lookup" ("_position" Flds)
###             ("\<^const>HOL.conj"
###               ("\<^const>HOL.eq" ("_position" F)
###                 ("_applC" ("_position" Some) ("_position" v)))
###               ("\<^const>HOL.conj"
###                 ("\<^const>HOL.eq" ("_position" os)
###                   ("\<^const>List.list.Cons"
###                     ("_applC" ("_position" RVal)
###                       ("_applC" ("_position" Loc) ("_position" a)))
###                     ("_position" ops)))
###                 ("\<^const>HOL.conj"
###                   ("\<^const>HOL.eq" ("_position" n)
###                     ("_applC" ("_position" Suc)
###                       ("\<^const>Groups.zero_class.zero")))
###                   ("\<^const>HOL.conj"
###                     ("\<^const>HOL.eq" ("_position" t)
###                       ("_tuple"
###                         ("\<^const>List.list.Cons" ("_position" v)
###                           ("_position" ops))
###                         ("_tuple_args" ("_position" S)
###                           ("_tuple_arg" ("_position" h)))))
###                     ("_position" ll))))))
###           ("\<^const>Groups.plus_class.plus" ("_position" l)
###             ("\<^const>Groups.one_class.one")))))))
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>Set.member"
###         ("_tuple" ("_position" M)
###           ("_tuple_args" ("_position" l)
###             ("_tuple_args"
###               ("_tuple" ("_position" os)
###                 ("_tuple_args" ("_position" S)
###                   ("_tuple_arg" ("_position" h))))
###               ("_tuple_args" ("_position" n)
###                 ("_tuple_args" ("_position" ll)
###                   ("_tuple_arg" ("_position" t)))))))
###         ("_position" Step)))
###     ("_asm"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>HOL.eq"
###           ("_applC" ("_position" get_ins)
###             ("_cargs" ("_position" M) ("_position" l)))
###           ("_applC" ("_position" Some)
###             ("_applC" ("_position" getfield)
###               ("_cargs" ("_position" d) ("_position" F))))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>HOL.Ex_binder"
###       ("_idts" ("_position" a)
###         ("_idts" ("_position" Flds)
###           ("_idts" ("_position" v) ("_position" ops))))
###       ("\<^const>HOL.eq"
###         ("\<^const>AssocLists.lookup" ("_position" h)
###           ("\<^const>HOL.conj"
###             ("\<^const>HOL.eq" ("_position" a)
###               ("_applC" ("_position" Some)
###                 ("_tuple" ("_position" d)
###                   ("_tuple_arg" ("_position" Flds)))))
###             ("\<^const>AssocLists.lookup" ("_position" Flds)
###               ("\<^const>HOL.conj"
###                 ("\<^const>HOL.eq" ("_position" F)
###                   ("_applC" ("_position" Some) ("_position" v)))
###                 ("\<^const>HOL.conj"
###                   ("\<^const>HOL.eq" ("_position" os)
###                     ("\<^const>List.list.Cons"
###                       ("_applC" ("_position" RVal)
###                         ("_applC" ("_position" Loc) ("_position" a)))
###                       ("_position" ops)))
###                   ("\<^const>HOL.conj"
###                     ("\<^const>HOL.eq" ("_position" n)
###                       ("_applC" ("_position" Suc)
###                         ("\<^const>Groups.zero_class.zero")))
###                     ("\<^const>HOL.conj"
###                       ("\<^const>HOL.eq" ("_position" t)
###                         ("_tuple"
###                           ("\<^const>List.list.Cons" ("_position" v)
###                             ("_position" ops))
###                           ("_tuple_args" ("_position" S)
###                             ("_tuple_arg" ("_position" h)))))
###                       ("_position" ll))))))))
###         ("\<^const>Groups.plus_class.plus" ("_position" l)
###           ("\<^const>Groups.one_class.one"))))))
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>Set.member"
###         ("_tuple" ("_position" M)
###           ("_tuple_args" ("_position" l)
###             ("_tuple_args"
###               ("_tuple" ("_position" os)
###                 ("_tuple_args" ("_position" S)
###                   ("_tuple_arg" ("_position" h))))
###               ("_tuple_args" ("_position" n)
###                 ("_tuple_args" ("_position" ll)
###                   ("_tuple_arg" ("_position" t)))))))
###         ("_position" Step)))
###     ("_asm"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>HOL.eq"
###           ("_applC" ("_position" get_ins)
###             ("_cargs" ("_position" M) ("_position" l)))
###           ("_applC" ("_position" Some)
###             ("_applC" ("_position" getfield)
###               ("_cargs" ("_position" d) ("_position" F))))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>HOL.Ex_binder"
###       ("_idts" ("_position" a)
###         ("_idts" ("_position" Flds)
###           ("_idts" ("_position" v) ("_position" ops))))
###       ("\<^const>HOL.eq"
###         ("\<^const>AssocLists.lookup"
###           ("\<^const>AssocLists.lookup" ("_position" h)
###             ("\<^const>HOL.conj"
###               ("\<^const>HOL.eq" ("_position" a)
###                 ("_applC" ("_position" Some)
###                   ("_tuple" ("_position" d)
###                     ("_tuple_arg" ("_position" Flds)))))
###               ("_position" Flds)))
###           ("\<^const>HOL.conj"
###             ("\<^const>HOL.eq" ("_position" F)
###               ("_applC" ("_position" Some) ("_position" v)))
###             ("\<^const>HOL.conj"
###               ("\<^const>HOL.eq" ("_position" os)
###                 ("\<^const>List.list.Cons"
###                   ("_applC" ("_position" RVal)
###                     ("_applC" ("_position" Loc) ("_position" a)))
###                   ("_position" ops)))
###               ("\<^const>HOL.conj"
###                 ("\<^const>HOL.eq" ("_position" n)
###                   ("_applC" ("_position" Suc)
###                     ("\<^const>Groups.zero_class.zero")))
###                 ("\<^const>HOL.conj"
###                   ("\<^const>HOL.eq" ("_position" t)
###                     ("_tuple"
###                       ("\<^const>List.list.Cons" ("_position" v)
###                         ("_position" ops))
###                       ("_tuple_args" ("_position" S)
###                         ("_tuple_arg" ("_position" h)))))
###                   ("_position" ll))))))
###         ("\<^const>Groups.plus_class.plus" ("_position" l)
###           ("\<^const>Groups.one_class.one"))))))
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>Set.member"
###         ("_tuple" ("_position" M)
###           ("_tuple_args" ("_position" l)
###             ("_tuple_args"
###               ("_tuple" ("_position" os)
###                 ("_tuple_args" ("_position" S)
###                   ("_tuple_arg" ("_position" h))))
###               ("_tuple_args" ("_position" n)
###                 ("_tuple_args" ("_position" ll)
###                   ("_tuple_arg" ("_position" t)))))))
###         ("_position" Step)))
###     ("_asm"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>HOL.eq"
###           ("_applC" ("_position" get_ins)
###             ("_cargs" ("_position" M) ("_position" l)))
###           ("_applC" ("_position" Some)
###             ("_applC" ("_position" getfield)
###               ("_cargs" ("_position" d) ("_position" F))))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>HOL.Ex_binder"
###       ("_idts" ("_position" a)
###         ("_idts" ("_position" Flds)
###           ("_idts" ("_position" v) ("_position" ops))))
###       ("\<^const>HOL.eq"
###         ("\<^const>AssocLists.lookup" ("_position" h)
###           ("\<^const>HOL.conj"
###             ("\<^const>HOL.eq" ("_position" a)
###               ("_applC" ("_position" Some)
###                 ("_tuple" ("_position" d)
###                   ("_tuple_arg" ("_position" Flds)))))
###             ("\<^const>HOL.conj"
###               ("\<^const>AssocLists.lookup" ("_position" Flds)
###                 ("\<^const>HOL.eq" ("_position" F)
###                   ("_applC" ("_position" Some) ("_position" v))))
###               ("\<^const>HOL.conj"
###                 ("\<^const>HOL.eq" ("_position" os)
###                   ("\<^const>List.list.Cons"
###                     ("_applC" ("_position" RVal)
###                       ("_applC" ("_position" Loc) ("_position" a)))
###                     ("_position" ops)))
###                 ("\<^const>HOL.conj"
###                   ("\<^const>HOL.eq" ("_position" n)
###                     ("_applC" ("_position" Suc)
###                       ("\<^const>Groups.zero_class.zero")))
###                   ("\<^const>HOL.conj"
###                     ("\<^const>HOL.eq" ("_position" t)
###                       ("_tuple"
###                         ("\<^const>List.list.Cons" ("_position" v)
###                           ("_position" ops))
###                         ("_tuple_args" ("_position" S)
###                           ("_tuple_arg" ("_position" h)))))
###                     ("_position" ll)))))))
###         ("\<^const>Groups.plus_class.plus" ("_position" l)
###           ("\<^const>Groups.one_class.one"))))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 360 of "$AFP/BytecodeLogicJmlTypes/Language.thy") produces 52 parse trees (10 displayed):
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>Set.member"
###         ("_tuple" ("_position" M)
###           ("_tuple_args" ("_position" l)
###             ("_tuple_args"
###               ("_tuple" ("_position" os)
###                 ("_tuple_args" ("_position" S)
###                   ("_tuple_arg" ("_position" h))))
###               ("_tuple_args" ("_position" n)
###                 ("_tuple_args" ("_position" ll)
###                   ("_tuple_arg" ("_position" t)))))))
###         ("_position" Step)))
###     ("_asm"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>HOL.eq"
###           ("_applC" ("_position" get_ins)
###             ("_cargs" ("_position" M) ("_position" l)))
###           ("_applC" ("_position" Some)
###             ("_applC" ("_position" putfield)
###               ("_cargs" ("_position" d) ("_position" F))))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>HOL.Ex_binder"
###       ("_idts" ("_position" a)
###         ("_idts" ("_position" Flds)
###           ("_idts" ("_position" v) ("_position" ops))))
###       ("\<^const>HOL.eq"
###         ("\<^const>AssocLists.lookup" ("_position" h)
###           ("\<^const>HOL.conj"
###             ("\<^const>HOL.eq" ("_position" a)
###               ("_applC" ("_position" Some)
###                 ("_tuple" ("_position" d)
###                   ("_tuple_arg" ("_position" Flds)))))
###             ("\<^const>HOL.conj"
###               ("\<^const>HOL.eq" ("_position" os)
###                 ("\<^const>List.list.Cons" ("_position" v)
###                   ("\<^const>List.list.Cons"
###                     ("_applC" ("_position" RVal)
###                       ("_applC" ("_position" Loc) ("_position" a)))
###                     ("_position" ops))))
###               ("\<^const>HOL.conj"
###                 ("\<^const>HOL.eq" ("_position" n)
###                   ("_applC" ("_position" Suc)
###                     ("\<^const>Groups.zero_class.zero")))
###                 ("\<^const>HOL.conj"
###                   ("\<^const>HOL.eq" ("_position" t)
###                     ("_tuple" ("_position" ops)
###                       ("_tuple_args" ("_position" S)
###                         ("_tuple_arg"
###                           ("_applC" ("_position" h)
###                             ("_Map"
###                               ("_maplet" ("_position" a)
###                                 ("_tuple" ("_position" d)
###                                   ("_tuple_arg"
###                                     ("_applC" ("_position" Flds)
### ("_Map" ("_maplet" ("_position" F) ("_position" v)))))))))))))
###                   ("_position" ll))))))
###         ("\<^const>Groups.plus_class.plus" ("_position" l)
###           ("\<^const>Groups.one_class.one"))))))
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>Set.member"
###         ("_tuple" ("_position" M)
###           ("_tuple_args" ("_position" l)
###             ("_tuple_args"
###               ("_tuple" ("_position" os)
###                 ("_tuple_args" ("_position" S)
###                   ("_tuple_arg" ("_position" h))))
###               ("_tuple_args" ("_position" n)
###                 ("_tuple_args" ("_position" ll)
###                   ("_tuple_arg" ("_position" t)))))))
###         ("_position" Step)))
###     ("_asm"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>HOL.eq"
###           ("_applC" ("_position" get_ins)
###             ("_cargs" ("_position" M) ("_position" l)))
###           ("_applC" ("_position" Some)
###             ("_applC" ("_position" putfield)
###               ("_cargs" ("_position" d) ("_position" F))))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>HOL.Ex_binder"
###       ("_idts" ("_position" a)
###         ("_idts" ("_position" Flds)
###           ("_idts" ("_position" v) ("_position" ops))))
###       ("\<^const>HOL.eq"
###         ("\<^const>AssocLists.lookup" ("_position" h)
###           ("\<^const>HOL.conj"
###             ("\<^const>HOL.eq" ("_position" a)
###               ("_applC" ("_position" Some)
###                 ("_tuple" ("_position" d)
###                   ("_tuple_arg" ("_position" Flds)))))
###             ("\<^const>HOL.conj"
###               ("\<^const>HOL.eq" ("_position" os)
###                 ("\<^const>List.list.Cons" ("_position" v)
###                   ("\<^const>List.list.Cons"
###                     ("_applC" ("_position" RVal)
###                       ("_applC" ("_position" Loc) ("_position" a)))
###                     ("_position" ops))))
###               ("\<^const>HOL.conj"
###                 ("\<^const>HOL.eq" ("_position" n)
###                   ("_applC" ("_position" Suc)
###                     ("\<^const>Groups.zero_class.zero")))
###                 ("\<^const>HOL.conj"
###                   ("\<^const>HOL.eq" ("_position" t)
###                     ("_tuple" ("_position" ops)
###                       ("_tuple_args" ("_position" S)
###                         ("_tuple_arg"
###                           ("\<^const>AssocLists.upd" ("_position" h)
###                             ("_position" a)
###                             ("_tuple" ("_position" d)
###                               ("_tuple_arg"
###                                 ("_applC" ("_position" Flds)
###                                   ("_Map"
###                                     ("_maplet" ("_position" F)
### ("_position" v)))))))))))
###                   ("_position" ll))))))
###         ("\<^const>Groups.plus_class.plus" ("_position" l)
###           ("\<^const>Groups.one_class.one"))))))
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>Set.member"
###         ("_tuple" ("_position" M)
###           ("_tuple_args" ("_position" l)
###             ("_tuple_args"
###               ("_tuple" ("_position" os)
###                 ("_tuple_args" ("_position" S)
###                   ("_tuple_arg" ("_position" h))))
###               ("_tuple_args" ("_position" n)
###                 ("_tuple_args" ("_position" ll)
###                   ("_tuple_arg" ("_position" t)))))))
###         ("_position" Step)))
###     ("_asm"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>HOL.eq"
###           ("_applC" ("_position" get_ins)
###             ("_cargs" ("_position" M) ("_position" l)))
###           ("_applC" ("_position" Some)
###             ("_applC" ("_position" putfield)
###               ("_cargs" ("_position" d) ("_position" F))))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>HOL.Ex_binder"
###       ("_idts" ("_position" a)
###         ("_idts" ("_position" Flds)
###           ("_idts" ("_position" v) ("_position" ops))))
###       ("\<^const>HOL.eq"
###         ("\<^const>AssocLists.lookup" ("_position" h)
###           ("\<^const>HOL.conj"
###             ("\<^const>HOL.eq" ("_position" a)
###               ("_applC" ("_position" Some)
###                 ("_tuple" ("_position" d)
###                   ("_tuple_arg" ("_position" Flds)))))
###             ("\<^const>HOL.conj"
###               ("\<^const>HOL.eq" ("_position" os)
###                 ("\<^const>List.list.Cons" ("_position" v)
###                   ("\<^const>List.list.Cons"
###                     ("_applC" ("_position" RVal)
###                       ("_applC" ("_position" Loc) ("_position" a)))
###                     ("_position" ops))))
###               ("\<^const>HOL.conj"
###                 ("\<^const>HOL.eq" ("_position" n)
###                   ("_applC" ("_position" Suc)
###                     ("\<^const>Groups.zero_class.zero")))
###                 ("\<^const>HOL.conj"
###                   ("\<^const>HOL.eq" ("_position" t)
###                     ("_tuple" ("_position" ops)
###                       ("_tuple_args" ("_position" S)
###                         ("_tuple_arg"
###                           ("_applC" ("_position" h)
###                             ("_Map"
###                               ("_maplet" ("_position" a)
###                                 ("_tuple" ("_position" d)
###                                   ("_tuple_arg"
###                                     ("\<^const>AssocLists.upd"
### ("_position" Flds) ("_position" F) ("_position" v)))))))))))
###                   ("_position" ll))))))
###         ("\<^const>Groups.plus_class.plus" ("_position" l)
###           ("\<^const>Groups.one_class.one"))))))
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>Set.member"
###         ("_tuple" ("_position" M)
###           ("_tuple_args" ("_position" l)
###             ("_tuple_args"
###               ("_tuple" ("_position" os)
###                 ("_tuple_args" ("_position" S)
###                   ("_tuple_arg" ("_position" h))))
###               ("_tuple_args" ("_position" n)
###                 ("_tuple_args" ("_position" ll)
###                   ("_tuple_arg" ("_position" t)))))))
###         ("_position" Step)))
###     ("_asm"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>HOL.eq"
###           ("_applC" ("_position" get_ins)
###             ("_cargs" ("_position" M) ("_position" l)))
###           ("_applC" ("_position" Some)
###             ("_applC" ("_position" putfield)
###               ("_cargs" ("_position" d) ("_position" F))))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>HOL.Ex_binder"
###       ("_idts" ("_position" a)
###         ("_idts" ("_position" Flds)
###           ("_idts" ("_position" v) ("_position" ops))))
###       ("\<^const>HOL.eq"
###         ("\<^const>AssocLists.lookup" ("_position" h)
###           ("\<^const>HOL.conj"
###             ("\<^const>HOL.eq" ("_position" a)
###               ("_applC" ("_position" Some)
###                 ("_tuple" ("_position" d)
###                   ("_tuple_arg" ("_position" Flds)))))
###             ("\<^const>HOL.conj"
###               ("\<^const>HOL.eq" ("_position" os)
###                 ("\<^const>List.list.Cons" ("_position" v)
###                   ("\<^const>List.list.Cons"
###                     ("_applC" ("_position" RVal)
###                       ("_applC" ("_position" Loc) ("_position" a)))
###                     ("_position" ops))))
###               ("\<^const>HOL.conj"
###                 ("\<^const>HOL.eq" ("_position" n)
###                   ("_applC" ("_position" Suc)
###                     ("\<^const>Groups.zero_class.zero")))
###                 ("\<^const>HOL.conj"
###                   ("\<^const>HOL.eq" ("_position" t)
###                     ("_tuple" ("_position" ops)
###                       ("_tuple_args" ("_position" S)
###                         ("_tuple_arg"
###                           ("\<^const>AssocLists.upd" ("_position" h)
###                             ("_position" a)
###                             ("_tuple" ("_position" d)
###                               ("_tuple_arg"
###                                 ("\<^const>AssocLists.upd"
###                                   ("_position" Flds) ("_position" F)
###                                   ("_position" v)))))))))
###                   ("_position" ll))))))
###         ("\<^const>Groups.plus_class.plus" ("_position" l)
###           ("\<^const>Groups.one_class.one"))))))
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>Set.member"
###         ("_tuple" ("_position" M)
###           ("_tuple_args" ("_position" l)
###             ("_tuple_args"
###               ("_tuple" ("_position" os)
###                 ("_tuple_args" ("_position" S)
###                   ("_tuple_arg" ("_position" h))))
###               ("_tuple_args" ("_position" n)
###                 ("_tuple_args" ("_position" ll)
###                   ("_tuple_arg" ("_position" t)))))))
###         ("_position" Step)))
###     ("_asm"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>HOL.eq"
###           ("_applC" ("_position" get_ins)
###             ("_cargs" ("_position" M) ("_position" l)))
###           ("_applC" ("_position" Some)
###             ("_applC" ("_position" putfield)
###               ("_cargs" ("_position" d) ("_position" F))))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>HOL.Ex_binder"
###       ("_idts" ("_position" a)
###         ("_idts" ("_position" Flds)
###           ("_idts" ("_position" v) ("_position" ops))))
###       ("\<^const>HOL.conj"
###         ("\<^const>HOL.eq"
###           ("\<^const>AssocLists.lookup" ("_position" h)
###             ("\<^const>HOL.conj"
###               ("\<^const>HOL.eq" ("_position" a)
###                 ("_applC" ("_position" Some)
###                   ("_tuple" ("_position" d)
###                     ("_tuple_arg" ("_position" Flds)))))
###               ("\<^const>HOL.conj"
###                 ("\<^const>HOL.eq" ("_position" os)
###                   ("\<^const>List.list.Cons" ("_position" v)
###                     ("\<^const>List.list.Cons"
###                       ("_applC" ("_position" RVal)
###                         ("_applC" ("_position" Loc) ("_position" a)))
###                       ("_position" ops))))
###                 ("\<^const>HOL.conj"
###                   ("\<^const>HOL.eq" ("_position" n)
###                     ("_applC" ("_position" Suc)
###                       ("\<^const>Groups.zero_class.zero")))
###                   ("_position" t)))))
###           ("_tuple" ("_position" ops)
###             ("_tuple_args" ("_position" S)
###               ("_tuple_arg"
###                 ("_applC" ("_position" h)
###                   ("_Map"
###                     ("_maplet" ("_position" a)
###                       ("_tuple" ("_position" d)
###                         ("_tuple_arg"
###                           ("_applC" ("_position" Flds)
###                             ("_Map"
###                               ("_maplet" ("_position" F)
###                                 ("_position" v)))))))))))))
###         ("\<^const>HOL.eq" ("_position" ll)
###           ("\<^const>Groups.plus_class.plus" ("_position" l)
###             ("\<^const>Groups.one_class.one")))))))
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>Set.member"
###         ("_tuple" ("_position" M)
###           ("_tuple_args" ("_position" l)
###             ("_tuple_args"
###               ("_tuple" ("_position" os)
###                 ("_tuple_args" ("_position" S)
###                   ("_tuple_arg" ("_position" h))))
###               ("_tuple_args" ("_position" n)
###                 ("_tuple_args" ("_position" ll)
###                   ("_tuple_arg" ("_position" t)))))))
###         ("_position" Step)))
###     ("_asm"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>HOL.eq"
###           ("_applC" ("_position" get_ins)
###             ("_cargs" ("_position" M) ("_position" l)))
###           ("_applC" ("_position" Some)
###             ("_applC" ("_position" putfield)
###               ("_cargs" ("_position" d) ("_position" F))))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>HOL.Ex_binder"
###       ("_idts" ("_position" a)
###         ("_idts" ("_position" Flds)
###           ("_idts" ("_position" v) ("_position" ops))))
###       ("\<^const>HOL.conj"
###         ("\<^const>HOL.eq"
###           ("\<^const>AssocLists.lookup" ("_position" h)
###             ("\<^const>HOL.conj"
###               ("\<^const>HOL.eq" ("_position" a)
###                 ("_applC" ("_position" Some)
###                   ("_tuple" ("_position" d)
###                     ("_tuple_arg" ("_position" Flds)))))
###               ("\<^const>HOL.conj"
###                 ("\<^const>HOL.eq" ("_position" os)
###                   ("\<^const>List.list.Cons" ("_position" v)
###                     ("\<^const>List.list.Cons"
###                       ("_applC" ("_position" RVal)
###                         ("_applC" ("_position" Loc) ("_position" a)))
###                       ("_position" ops))))
###                 ("_position" n))))
###           ("_applC" ("_position" Suc) ("\<^const>Groups.zero_class.zero")))
###         ("\<^const>HOL.conj"
###           ("\<^const>HOL.eq" ("_position" t)
###             ("_tuple" ("_position" ops)
###               ("_tuple_args" ("_position" S)
###                 ("_tuple_arg"
###                   ("_applC" ("_position" h)
###                     ("_Map"
###                       ("_maplet" ("_position" a)
###                         ("_tuple" ("_position" d)
###                           ("_tuple_arg"
###                             ("_applC" ("_position" Flds)
###                               ("_Map"
###                                 ("_maplet" ("_position" F)
###                                   ("_position" v)))))))))))))
###           ("\<^const>HOL.eq" ("_position" ll)
###             ("\<^const>Groups.plus_class.plus" ("_position" l)
###               ("\<^const>Groups.one_class.one"))))))))
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>Set.member"
###         ("_tuple" ("_position" M)
###           ("_tuple_args" ("_position" l)
###             ("_tuple_args"
###               ("_tuple" ("_position" os)
###                 ("_tuple_args" ("_position" S)
###                   ("_tuple_arg" ("_position" h))))
###               ("_tuple_args" ("_position" n)
###                 ("_tuple_args" ("_position" ll)
###                   ("_tuple_arg" ("_position" t)))))))
###         ("_position" Step)))
###     ("_asm"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>HOL.eq"
###           ("_applC" ("_position" get_ins)
###             ("_cargs" ("_position" M) ("_position" l)))
###           ("_applC" ("_position" Some)
###             ("_applC" ("_position" putfield)
###               ("_cargs" ("_position" d) ("_position" F))))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>HOL.Ex_binder"
###       ("_idts" ("_position" a)
###         ("_idts" ("_position" Flds)
###           ("_idts" ("_position" v) ("_position" ops))))
###       ("\<^const>HOL.conj"
###         ("\<^const>HOL.eq"
###           ("\<^const>AssocLists.lookup" ("_position" h)
###             ("\<^const>HOL.conj"
###               ("\<^const>HOL.eq" ("_position" a)
###                 ("_applC" ("_position" Some)
###                   ("_tuple" ("_position" d)
###                     ("_tuple_arg" ("_position" Flds)))))
###               ("_position" os)))
###           ("\<^const>List.list.Cons" ("_position" v)
###             ("\<^const>List.list.Cons"
###               ("_applC" ("_position" RVal)
###                 ("_applC" ("_position" Loc) ("_position" a)))
###               ("_position" ops))))
###         ("\<^const>HOL.conj"
###           ("\<^const>HOL.eq" ("_position" n)
###             ("_applC" ("_position" Suc)
###               ("\<^const>Groups.zero_class.zero")))
###           ("\<^const>HOL.conj"
###             ("\<^const>HOL.eq" ("_position" t)
###               ("_tuple" ("_position" ops)
###                 ("_tuple_args" ("_position" S)
###                   ("_tuple_arg"
###                     ("_applC" ("_position" h)
###                       ("_Map"
###                         ("_maplet" ("_position" a)
###                           ("_tuple" ("_position" d)
###                             ("_tuple_arg"
###                               ("_applC" ("_position" Flds)
###                                 ("_Map"
###                                   ("_maplet" ("_position" F)
###                                     ("_position" v)))))))))))))
###             ("\<^const>HOL.eq" ("_position" ll)
###               ("\<^const>Groups.plus_class.plus" ("_position" l)
###                 ("\<^const>Groups.one_class.one")))))))))
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>Set.member"
###         ("_tuple" ("_position" M)
###           ("_tuple_args" ("_position" l)
###             ("_tuple_args"
###               ("_tuple" ("_position" os)
###                 ("_tuple_args" ("_position" S)
###                   ("_tuple_arg" ("_position" h))))
###               ("_tuple_args" ("_position" n)
###                 ("_tuple_args" ("_position" ll)
###                   ("_tuple_arg" ("_position" t)))))))
###         ("_position" Step)))
###     ("_asm"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>HOL.eq"
###           ("_applC" ("_position" get_ins)
###             ("_cargs" ("_position" M) ("_position" l)))
###           ("_applC" ("_position" Some)
###             ("_applC" ("_position" putfield)
###               ("_cargs" ("_position" d) ("_position" F))))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>HOL.Ex_binder"
###       ("_idts" ("_position" a)
###         ("_idts" ("_position" Flds)
###           ("_idts" ("_position" v) ("_position" ops))))
###       ("\<^const>HOL.conj"
###         ("\<^const>HOL.eq"
###           ("\<^const>AssocLists.lookup" ("_position" h) ("_position" a))
###           ("_applC" ("_position" Some)
###             ("_tuple" ("_position" d) ("_tuple_arg" ("_position" Flds)))))
###         ("\<^const>HOL.conj"
###           ("\<^const>HOL.eq" ("_position" os)
###             ("\<^const>List.list.Cons" ("_position" v)
###               ("\<^const>List.list.Cons"
###                 ("_applC" ("_position" RVal)
###                   ("_applC" ("_position" Loc) ("_position" a)))
###                 ("_position" ops))))
###           ("\<^const>HOL.conj"
###             ("\<^const>HOL.eq" ("_position" n)
###               ("_applC" ("_position" Suc)
###                 ("\<^const>Groups.zero_class.zero")))
###             ("\<^const>HOL.conj"
###               ("\<^const>HOL.eq" ("_position" t)
###                 ("_tuple" ("_position" ops)
###                   ("_tuple_args" ("_position" S)
###                     ("_tuple_arg"
###                       ("_applC" ("_position" h)
###                         ("_Map"
###                           ("_maplet" ("_position" a)
###                             ("_tuple" ("_position" d)
###                               ("_tuple_arg"
###                                 ("_applC" ("_position" Flds)
###                                   ("_Map"
###                                     ("_maplet" ("_position" F)
### ("_position" v)))))))))))))
###               ("\<^const>HOL.eq" ("_position" ll)
###                 ("\<^const>Groups.plus_class.plus" ("_position" l)
###                   ("\<^const>Groups.one_class.one"))))))))))
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>Set.member"
###         ("_tuple" ("_position" M)
###           ("_tuple_args" ("_position" l)
###             ("_tuple_args"
###               ("_tuple" ("_position" os)
###                 ("_tuple_args" ("_position" S)
###                   ("_tuple_arg" ("_position" h))))
###               ("_tuple_args" ("_position" n)
###                 ("_tuple_args" ("_position" ll)
###                   ("_tuple_arg" ("_position" t)))))))
###         ("_position" Step)))
###     ("_asm"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>HOL.eq"
###           ("_applC" ("_position" get_ins)
###             ("_cargs" ("_position" M) ("_position" l)))
###           ("_applC" ("_position" Some)
###             ("_applC" ("_position" putfield)
###               ("_cargs" ("_position" d) ("_position" F))))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>HOL.Ex_binder"
###       ("_idts" ("_position" a)
###         ("_idts" ("_position" Flds)
###           ("_idts" ("_position" v) ("_position" ops))))
###       ("\<^const>AssocLists.lookup" ("_position" h)
###         ("\<^const>HOL.conj"
###           ("\<^const>HOL.eq" ("_position" a)
###             ("_applC" ("_position" Some)
###               ("_tuple" ("_position" d) ("_tuple_arg" ("_position" Flds)))))
###           ("\<^const>HOL.conj"
###             ("\<^const>HOL.eq" ("_position" os)
###               ("\<^const>List.list.Cons" ("_position" v)
###                 ("\<^const>List.list.Cons"
###                   ("_applC" ("_position" RVal)
###                     ("_applC" ("_position" Loc) ("_position" a)))
###                   ("_position" ops))))
###             ("\<^const>HOL.conj"
###               ("\<^const>HOL.eq" ("_position" n)
###                 ("_applC" ("_position" Suc)
###                   ("\<^const>Groups.zero_class.zero")))
###               ("\<^const>HOL.conj"
###                 ("\<^const>HOL.eq" ("_position" t)
###                   ("_tuple" ("_position" ops)
###                     ("_tuple_args" ("_position" S)
###                       ("_tuple_arg"
###                         ("_applC" ("_position" h)
###                           ("_Map"
###                             ("_maplet" ("_position" a)
###                               ("_tuple" ("_position" d)
###                                 ("_tuple_arg"
###                                   ("_applC" ("_position" Flds)
###                                     ("_Map"
### ("_maplet" ("_position" F) ("_position" v)))))))))))))
###                 ("\<^const>HOL.eq" ("_position" ll)
###                   ("\<^const>Groups.plus_class.plus" ("_position" l)
###                     ("\<^const>Groups.one_class.one")))))))))))
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>Set.member"
###         ("_tuple" ("_position" M)
###           ("_tuple_args" ("_position" l)
###             ("_tuple_args"
###               ("_tuple" ("_position" os)
###                 ("_tuple_args" ("_position" S)
###                   ("_tuple_arg" ("_position" h))))
###               ("_tuple_args" ("_position" n)
###                 ("_tuple_args" ("_position" ll)
###                   ("_tuple_arg" ("_position" t)))))))
###         ("_position" Step)))
###     ("_asm"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>HOL.eq"
###           ("_applC" ("_position" get_ins)
###             ("_cargs" ("_position" M) ("_position" l)))
###           ("_applC" ("_position" Some)
###             ("_applC" ("_position" putfield)
###               ("_cargs" ("_position" d) ("_position" F))))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>HOL.Ex_binder"
###       ("_idts" ("_position" a)
###         ("_idts" ("_position" Flds)
###           ("_idts" ("_position" v) ("_position" ops))))
###       ("\<^const>HOL.conj"
###         ("\<^const>AssocLists.lookup" ("_position" h)
###           ("\<^const>HOL.eq" ("_position" a)
###             ("_applC" ("_position" Some)
###               ("_tuple" ("_position" d)
###                 ("_tuple_arg" ("_position" Flds))))))
###         ("\<^const>HOL.conj"
###           ("\<^const>HOL.eq" ("_position" os)
###             ("\<^const>List.list.Cons" ("_position" v)
###               ("\<^const>List.list.Cons"
###                 ("_applC" ("_position" RVal)
###                   ("_applC" ("_position" Loc) ("_position" a)))
###                 ("_position" ops))))
###           ("\<^const>HOL.conj"
###             ("\<^const>HOL.eq" ("_position" n)
###               ("_applC" ("_position" Suc)
###                 ("\<^const>Groups.zero_class.zero")))
###             ("\<^const>HOL.conj"
###               ("\<^const>HOL.eq" ("_position" t)
###                 ("_tuple" ("_position" ops)
###                   ("_tuple_args" ("_position" S)
###                     ("_tuple_arg"
###                       ("_applC" ("_position" h)
###                         ("_Map"
###                           ("_maplet" ("_position" a)
###                             ("_tuple" ("_position" d)
###                               ("_tuple_arg"
###                                 ("_applC" ("_position" Flds)
###                                   ("_Map"
###                                     ("_maplet" ("_position" F)
### ("_position" v)))))))))))))
###               ("\<^const>HOL.eq" ("_position" ll)
###                 ("\<^const>Groups.plus_class.plus" ("_position" l)
###                   ("\<^const>Groups.one_class.one"))))))))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 365 of "$AFP/BytecodeLogicJmlTypes/Language.thy") produces 12 parse trees (10 displayed):
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>Set.member"
###         ("_tuple" ("_position" M)
###           ("_tuple_args" ("_position" l)
###             ("_tuple_args"
###               ("_tuple" ("_position" os)
###                 ("_tuple_args" ("_position" S)
###                   ("_tuple_arg" ("_position" h))))
###               ("_tuple_args" ("_position" n)
###                 ("_tuple_args" ("_position" ll)
###                   ("_tuple_arg" ("_position" t)))))))
###         ("_position" Step)))
###     ("_asm"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>HOL.eq"
###           ("_applC" ("_position" get_ins)
###             ("_cargs" ("_position" M) ("_position" l)))
###           ("_applC" ("_position" Some)
###             ("_applC" ("_position" checkcast) ("_position" d)))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>HOL.Ex_binder"
###       ("_idts" ("_position" a)
###         ("_idts" ("_position" Flds) ("_position" ops)))
###       ("\<^const>HOL.eq"
###         ("\<^const>AssocLists.lookup" ("_position" h)
###           ("\<^const>HOL.conj"
###             ("\<^const>HOL.eq" ("_position" a)
###               ("_applC" ("_position" Some)
###                 ("_tuple" ("_position" d)
###                   ("_tuple_arg" ("_position" Flds)))))
###             ("\<^const>HOL.conj"
###               ("\<^const>HOL.eq" ("_position" os)
###                 ("\<^const>List.list.Cons"
###                   ("_applC" ("_position" RVal)
###                     ("_applC" ("_position" Loc) ("_position" a)))
###                   ("_position" ops)))
###               ("\<^const>HOL.conj"
###                 ("\<^const>HOL.eq" ("_position" n)
###                   ("_applC" ("_position" Suc)
###                     ("\<^const>Groups.zero_class.zero")))
###                 ("\<^const>HOL.conj"
###                   ("\<^const>HOL.eq" ("_position" t)
###                     ("_tuple"
###                       ("\<^const>List.list.Cons"
###                         ("_applC" ("_position" RVal)
###                           ("_applC" ("_position" Loc) ("_position" a)))
###                         ("_position" ops))
###                       ("_tuple_args" ("_position" S)
###                         ("_tuple_arg" ("_position" h)))))
###                   ("_position" ll))))))
###         ("\<^const>Groups.plus_class.plus" ("_position" l)
###           ("\<^const>Groups.one_class.one"))))))
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>Set.member"
###         ("_tuple" ("_position" M)
###           ("_tuple_args" ("_position" l)
###             ("_tuple_args"
###               ("_tuple" ("_position" os)
###                 ("_tuple_args" ("_position" S)
###                   ("_tuple_arg" ("_position" h))))
###               ("_tuple_args" ("_position" n)
###                 ("_tuple_args" ("_position" ll)
###                   ("_tuple_arg" ("_position" t)))))))
###         ("_position" Step)))
###     ("_asm"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>HOL.eq"
###           ("_applC" ("_position" get_ins)
###             ("_cargs" ("_position" M) ("_position" l)))
###           ("_applC" ("_position" Some)
###             ("_applC" ("_position" checkcast) ("_position" d)))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>HOL.Ex_binder"
###       ("_idts" ("_position" a)
###         ("_idts" ("_position" Flds) ("_position" ops)))
###       ("\<^const>HOL.conj"
###         ("\<^const>HOL.eq"
###           ("\<^const>AssocLists.lookup" ("_position" h)
###             ("\<^const>HOL.conj"
###               ("\<^const>HOL.eq" ("_position" a)
###                 ("_applC" ("_position" Some)
###                   ("_tuple" ("_position" d)
###                     ("_tuple_arg" ("_position" Flds)))))
###               ("\<^const>HOL.conj"
###                 ("\<^const>HOL.eq" ("_position" os)
###                   ("\<^const>List.list.Cons"
###                     ("_applC" ("_position" RVal)
###                       ("_applC" ("_position" Loc) ("_position" a)))
###                     ("_position" ops)))
###                 ("\<^const>HOL.conj"
###                   ("\<^const>HOL.eq" ("_position" n)
###                     ("_applC" ("_position" Suc)
###                       ("\<^const>Groups.zero_class.zero")))
###                   ("_position" t)))))
###           ("_tuple"
###             ("\<^const>List.list.Cons"
###               ("_applC" ("_position" RVal)
###                 ("_applC" ("_position" Loc) ("_position" a)))
###               ("_position" ops))
###             ("_tuple_args" ("_position" S) ("_tuple_arg" ("_position" h)))))
###         ("\<^const>HOL.eq" ("_position" ll)
###           ("\<^const>Groups.plus_class.plus" ("_position" l)
###             ("\<^const>Groups.one_class.one")))))))
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>Set.member"
###         ("_tuple" ("_position" M)
###           ("_tuple_args" ("_position" l)
###             ("_tuple_args"
###               ("_tuple" ("_position" os)
###                 ("_tuple_args" ("_position" S)
###                   ("_tuple_arg" ("_position" h))))
###               ("_tuple_args" ("_position" n)
###                 ("_tuple_args" ("_position" ll)
###                   ("_tuple_arg" ("_position" t)))))))
###         ("_position" Step)))
###     ("_asm"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>HOL.eq"
###           ("_applC" ("_position" get_ins)
###             ("_cargs" ("_position" M) ("_position" l)))
###           ("_applC" ("_position" Some)
###             ("_applC" ("_position" checkcast) ("_position" d)))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>HOL.Ex_binder"
###       ("_idts" ("_position" a)
###         ("_idts" ("_position" Flds) ("_position" ops)))
###       ("\<^const>HOL.conj"
###         ("\<^const>HOL.eq"
###           ("\<^const>AssocLists.lookup" ("_position" h)
###             ("\<^const>HOL.conj"
###               ("\<^const>HOL.eq" ("_position" a)
###                 ("_applC" ("_position" Some)
###                   ("_tuple" ("_position" d)
###                     ("_tuple_arg" ("_position" Flds)))))
###               ("\<^const>HOL.conj"
###                 ("\<^const>HOL.eq" ("_position" os)
###                   ("\<^const>List.list.Cons"
###                     ("_applC" ("_position" RVal)
###                       ("_applC" ("_position" Loc) ("_position" a)))
###                     ("_position" ops)))
###                 ("_position" n))))
###           ("_applC" ("_position" Suc) ("\<^const>Groups.zero_class.zero")))
###         ("\<^const>HOL.conj"
###           ("\<^const>HOL.eq" ("_position" t)
###             ("_tuple"
###               ("\<^const>List.list.Cons"
###                 ("_applC" ("_position" RVal)
###                   ("_applC" ("_position" Loc) ("_position" a)))
###                 ("_position" ops))
###               ("_tuple_args" ("_position" S)
###                 ("_tuple_arg" ("_position" h)))))
###           ("\<^const>HOL.eq" ("_position" ll)
###             ("\<^const>Groups.plus_class.plus" ("_position" l)
###               ("\<^const>Groups.one_class.one"))))))))
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>Set.member"
###         ("_tuple" ("_position" M)
###           ("_tuple_args" ("_position" l)
###             ("_tuple_args"
###               ("_tuple" ("_position" os)
###                 ("_tuple_args" ("_position" S)
###                   ("_tuple_arg" ("_position" h))))
###               ("_tuple_args" ("_position" n)
###                 ("_tuple_args" ("_position" ll)
###                   ("_tuple_arg" ("_position" t)))))))
###         ("_position" Step)))
###     ("_asm"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>HOL.eq"
###           ("_applC" ("_position" get_ins)
###             ("_cargs" ("_position" M) ("_position" l)))
###           ("_applC" ("_position" Some)
###             ("_applC" ("_position" checkcast) ("_position" d)))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>HOL.Ex_binder"
###       ("_idts" ("_position" a)
###         ("_idts" ("_position" Flds) ("_position" ops)))
###       ("\<^const>HOL.conj"
###         ("\<^const>HOL.eq"
###           ("\<^const>AssocLists.lookup" ("_position" h)
###             ("\<^const>HOL.conj"
###               ("\<^const>HOL.eq" ("_position" a)
###                 ("_applC" ("_position" Some)
###                   ("_tuple" ("_position" d)
###                     ("_tuple_arg" ("_position" Flds)))))
###               ("_position" os)))
###           ("\<^const>List.list.Cons"
###             ("_applC" ("_position" RVal)
###               ("_applC" ("_position" Loc) ("_position" a)))
###             ("_position" ops)))
###         ("\<^const>HOL.conj"
###           ("\<^const>HOL.eq" ("_position" n)
###             ("_applC" ("_position" Suc)
###               ("\<^const>Groups.zero_class.zero")))
###           ("\<^const>HOL.conj"
###             ("\<^const>HOL.eq" ("_position" t)
###               ("_tuple"
###                 ("\<^const>List.list.Cons"
###                   ("_applC" ("_position" RVal)
###                     ("_applC" ("_position" Loc) ("_position" a)))
###                   ("_position" ops))
###                 ("_tuple_args" ("_position" S)
###                   ("_tuple_arg" ("_position" h)))))
###             ("\<^const>HOL.eq" ("_position" ll)
###               ("\<^const>Groups.plus_class.plus" ("_position" l)
###                 ("\<^const>Groups.one_class.one")))))))))
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>Set.member"
###         ("_tuple" ("_position" M)
###           ("_tuple_args" ("_position" l)
###             ("_tuple_args"
###               ("_tuple" ("_position" os)
###                 ("_tuple_args" ("_position" S)
###                   ("_tuple_arg" ("_position" h))))
###               ("_tuple_args" ("_position" n)
###                 ("_tuple_args" ("_position" ll)
###                   ("_tuple_arg" ("_position" t)))))))
###         ("_position" Step)))
###     ("_asm"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>HOL.eq"
###           ("_applC" ("_position" get_ins)
###             ("_cargs" ("_position" M) ("_position" l)))
###           ("_applC" ("_position" Some)
###             ("_applC" ("_position" checkcast) ("_position" d)))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>HOL.Ex_binder"
###       ("_idts" ("_position" a)
###         ("_idts" ("_position" Flds) ("_position" ops)))
###       ("\<^const>HOL.conj"
###         ("\<^const>HOL.eq"
###           ("\<^const>AssocLists.lookup" ("_position" h) ("_position" a))
###           ("_applC" ("_position" Some)
###             ("_tuple" ("_position" d) ("_tuple_arg" ("_position" Flds)))))
###         ("\<^const>HOL.conj"
###           ("\<^const>HOL.eq" ("_position" os)
###             ("\<^const>List.list.Cons"
###               ("_applC" ("_position" RVal)
###                 ("_applC" ("_position" Loc) ("_position" a)))
###               ("_position" ops)))
###           ("\<^const>HOL.conj"
###             ("\<^const>HOL.eq" ("_position" n)
###               ("_applC" ("_position" Suc)
###                 ("\<^const>Groups.zero_class.zero")))
###             ("\<^const>HOL.conj"
###               ("\<^const>HOL.eq" ("_position" t)
###                 ("_tuple"
###                   ("\<^const>List.list.Cons"
###                     ("_applC" ("_position" RVal)
###                       ("_applC" ("_position" Loc) ("_position" a)))
###                     ("_position" ops))
###                   ("_tuple_args" ("_position" S)
###                     ("_tuple_arg" ("_position" h)))))
###               ("\<^const>HOL.eq" ("_position" ll)
###                 ("\<^const>Groups.plus_class.plus" ("_position" l)
###                   ("\<^const>Groups.one_class.one"))))))))))
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>Set.member"
###         ("_tuple" ("_position" M)
###           ("_tuple_args" ("_position" l)
###             ("_tuple_args"
###               ("_tuple" ("_position" os)
###                 ("_tuple_args" ("_position" S)
###                   ("_tuple_arg" ("_position" h))))
###               ("_tuple_args" ("_position" n)
###                 ("_tuple_args" ("_position" ll)
###                   ("_tuple_arg" ("_position" t)))))))
###         ("_position" Step)))
###     ("_asm"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>HOL.eq"
###           ("_applC" ("_position" get_ins)
###             ("_cargs" ("_position" M) ("_position" l)))
###           ("_applC" ("_position" Some)
###             ("_applC" ("_position" checkcast) ("_position" d)))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>HOL.Ex_binder"
###       ("_idts" ("_position" a)
###         ("_idts" ("_position" Flds) ("_position" ops)))
###       ("\<^const>AssocLists.lookup" ("_position" h)
###         ("\<^const>HOL.conj"
###           ("\<^const>HOL.eq" ("_position" a)
###             ("_applC" ("_position" Some)
###               ("_tuple" ("_position" d) ("_tuple_arg" ("_position" Flds)))))
###           ("\<^const>HOL.conj"
###             ("\<^const>HOL.eq" ("_position" os)
###               ("\<^const>List.list.Cons"
###                 ("_applC" ("_position" RVal)
###                   ("_applC" ("_position" Loc) ("_position" a)))
###                 ("_position" ops)))
###             ("\<^const>HOL.conj"
###               ("\<^const>HOL.eq" ("_position" n)
###                 ("_applC" ("_position" Suc)
###                   ("\<^const>Groups.zero_class.zero")))
###               ("\<^const>HOL.conj"
###                 ("\<^const>HOL.eq" ("_position" t)
###                   ("_tuple"
###                     ("\<^const>List.list.Cons"
###                       ("_applC" ("_position" RVal)
###                         ("_applC" ("_position" Loc) ("_position" a)))
###                       ("_position" ops))
###                     ("_tuple_args" ("_position" S)
###                       ("_tuple_arg" ("_position" h)))))
###                 ("\<^const>HOL.eq" ("_position" ll)
###                   ("\<^const>Groups.plus_class.plus" ("_position" l)
###                     ("\<^const>Groups.one_class.one")))))))))))
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>Set.member"
###         ("_tuple" ("_position" M)
###           ("_tuple_args" ("_position" l)
###             ("_tuple_args"
###               ("_tuple" ("_position" os)
###                 ("_tuple_args" ("_position" S)
###                   ("_tuple_arg" ("_position" h))))
###               ("_tuple_args" ("_position" n)
###                 ("_tuple_args" ("_position" ll)
###                   ("_tuple_arg" ("_position" t)))))))
###         ("_position" Step)))
###     ("_asm"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>HOL.eq"
###           ("_applC" ("_position" get_ins)
###             ("_cargs" ("_position" M) ("_position" l)))
###           ("_applC" ("_position" Some)
###             ("_applC" ("_position" checkcast) ("_position" d)))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>HOL.Ex_binder"
###       ("_idts" ("_position" a)
###         ("_idts" ("_position" Flds) ("_position" ops)))
###       ("\<^const>HOL.conj"
###         ("\<^const>AssocLists.lookup" ("_position" h)
###           ("\<^const>HOL.eq" ("_position" a)
###             ("_applC" ("_position" Some)
###               ("_tuple" ("_position" d)
###                 ("_tuple_arg" ("_position" Flds))))))
###         ("\<^const>HOL.conj"
###           ("\<^const>HOL.eq" ("_position" os)
###             ("\<^const>List.list.Cons"
###               ("_applC" ("_position" RVal)
###                 ("_applC" ("_position" Loc) ("_position" a)))
###               ("_position" ops)))
###           ("\<^const>HOL.conj"
###             ("\<^const>HOL.eq" ("_position" n)
###               ("_applC" ("_position" Suc)
###                 ("\<^const>Groups.zero_class.zero")))
###             ("\<^const>HOL.conj"
###               ("\<^const>HOL.eq" ("_position" t)
###                 ("_tuple"
###                   ("\<^const>List.list.Cons"
###                     ("_applC" ("_position" RVal)
###                       ("_applC" ("_position" Loc) ("_position" a)))
###                     ("_position" ops))
###                   ("_tuple_args" ("_position" S)
###                     ("_tuple_arg" ("_position" h)))))
###               ("\<^const>HOL.eq" ("_position" ll)
###                 ("\<^const>Groups.plus_class.plus" ("_position" l)
###                   ("\<^const>Groups.one_class.one"))))))))))
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>Set.member"
###         ("_tuple" ("_position" M)
###           ("_tuple_args" ("_position" l)
###             ("_tuple_args"
###               ("_tuple" ("_position" os)
###                 ("_tuple_args" ("_position" S)
###                   ("_tuple_arg" ("_position" h))))
###               ("_tuple_args" ("_position" n)
###                 ("_tuple_args" ("_position" ll)
###                   ("_tuple_arg" ("_position" t)))))))
###         ("_position" Step)))
###     ("_asm"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>HOL.eq"
###           ("_applC" ("_position" get_ins)
###             ("_cargs" ("_position" M) ("_position" l)))
###           ("_applC" ("_position" Some)
###             ("_applC" ("_position" checkcast) ("_position" d)))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>HOL.Ex_binder"
###       ("_idts" ("_position" a)
###         ("_idts" ("_position" Flds) ("_position" ops)))
###       ("\<^const>HOL.conj"
###         ("\<^const>AssocLists.lookup" ("_position" h)
###           ("\<^const>HOL.conj"
###             ("\<^const>HOL.eq" ("_position" a)
###               ("_applC" ("_position" Some)
###                 ("_tuple" ("_position" d)
###                   ("_tuple_arg" ("_position" Flds)))))
###             ("\<^const>HOL.eq" ("_position" os)
###               ("\<^const>List.list.Cons"
###                 ("_applC" ("_position" RVal)
###                   ("_applC" ("_position" Loc) ("_position" a)))
###                 ("_position" ops)))))
###         ("\<^const>HOL.conj"
###           ("\<^const>HOL.eq" ("_position" n)
###             ("_applC" ("_position" Suc)
###               ("\<^const>Groups.zero_class.zero")))
###           ("\<^const>HOL.conj"
###             ("\<^const>HOL.eq" ("_position" t)
###               ("_tuple"
###                 ("\<^const>List.list.Cons"
###                   ("_applC" ("_position" RVal)
###                     ("_applC" ("_position" Loc) ("_position" a)))
###                   ("_position" ops))
###                 ("_tuple_args" ("_position" S)
###                   ("_tuple_arg" ("_position" h)))))
###             ("\<^const>HOL.eq" ("_position" ll)
###               ("\<^const>Groups.plus_class.plus" ("_position" l)
###                 ("\<^const>Groups.one_class.one")))))))))
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>Set.member"
###         ("_tuple" ("_position" M)
###           ("_tuple_args" ("_position" l)
###             ("_tuple_args"
###               ("_tuple" ("_position" os)
###                 ("_tuple_args" ("_position" S)
###                   ("_tuple_arg" ("_position" h))))
###               ("_tuple_args" ("_position" n)
###                 ("_tuple_args" ("_position" ll)
###                   ("_tuple_arg" ("_position" t)))))))
###         ("_position" Step)))
###     ("_asm"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>HOL.eq"
###           ("_applC" ("_position" get_ins)
###             ("_cargs" ("_position" M) ("_position" l)))
###           ("_applC" ("_position" Some)
###             ("_applC" ("_position" checkcast) ("_position" d)))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>HOL.Ex_binder"
###       ("_idts" ("_position" a)
###         ("_idts" ("_position" Flds) ("_position" ops)))
###       ("\<^const>HOL.conj"
###         ("\<^const>List.list.Cons"
###           ("\<^const>AssocLists.lookup" ("_position" h)
###             ("\<^const>HOL.conj"
###               ("\<^const>HOL.eq" ("_position" a)
###                 ("_applC" ("_position" Some)
###                   ("_tuple" ("_position" d)
###                     ("_tuple_arg" ("_position" Flds)))))
###               ("\<^const>HOL.eq" ("_position" os)
###                 ("_applC" ("_position" RVal)
###                   ("_applC" ("_position" Loc) ("_position" a))))))
###           ("_position" ops))
###         ("\<^const>HOL.conj"
###           ("\<^const>HOL.eq" ("_position" n)
###             ("_applC" ("_position" Suc)
###               ("\<^const>Groups.zero_class.zero")))
###           ("\<^const>HOL.conj"
###             ("\<^const>HOL.eq" ("_position" t)
###               ("_tuple"
###                 ("\<^const>List.list.Cons"
###                   ("_applC" ("_position" RVal)
###                     ("_applC" ("_position" Loc) ("_position" a)))
###                   ("_position" ops))
###                 ("_tuple_args" ("_position" S)
###                   ("_tuple_arg" ("_position" h)))))
###             ("\<^const>HOL.eq" ("_position" ll)
###               ("\<^const>Groups.plus_class.plus" ("_position" l)
###                 ("\<^const>Groups.one_class.one")))))))))
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>Set.member"
###         ("_tuple" ("_position" M)
###           ("_tuple_args" ("_position" l)
###             ("_tuple_args"
###               ("_tuple" ("_position" os)
###                 ("_tuple_args" ("_position" S)
###                   ("_tuple_arg" ("_position" h))))
###               ("_tuple_args" ("_position" n)
###                 ("_tuple_args" ("_position" ll)
###                   ("_tuple_arg" ("_position" t)))))))
###         ("_position" Step)))
###     ("_asm"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>HOL.eq"
###           ("_applC" ("_position" get_ins)
###             ("_cargs" ("_position" M) ("_position" l)))
###           ("_applC" ("_position" Some)
###             ("_applC" ("_position" checkcast) ("_position" d)))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>HOL.Ex_binder"
###       ("_idts" ("_position" a)
###         ("_idts" ("_position" Flds) ("_position" ops)))
###       ("\<^const>HOL.conj"
###         ("\<^const>AssocLists.lookup" ("_position" h)
###           ("\<^const>HOL.conj"
###             ("\<^const>HOL.eq" ("_position" a)
###               ("_applC" ("_position" Some)
###                 ("_tuple" ("_position" d)
###                   ("_tuple_arg" ("_position" Flds)))))
###             ("\<^const>HOL.conj"
###               ("\<^const>HOL.eq" ("_position" os)
###                 ("\<^const>List.list.Cons"
###                   ("_applC" ("_position" RVal)
###                     ("_applC" ("_position" Loc) ("_position" a)))
###                   ("_position" ops)))
###               ("\<^const>HOL.eq" ("_position" n)
###                 ("_applC" ("_position" Suc)
###                   ("\<^const>Groups.zero_class.zero"))))))
###         ("\<^const>HOL.conj"
###           ("\<^const>HOL.eq" ("_position" t)
###             ("_tuple"
###               ("\<^const>List.list.Cons"
###                 ("_applC" ("_position" RVal)
###                   ("_applC" ("_position" Loc) ("_position" a)))
###                 ("_position" ops))
###               ("_tuple_args" ("_position" S)
###                 ("_tuple_arg" ("_position" h)))))
###           ("\<^const>HOL.eq" ("_position" ll)
###             ("\<^const>Groups.plus_class.plus" ("_position" l)
###               ("\<^const>Groups.one_class.one"))))))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### theory "Draft.Language"
### 2.931s elapsed time, 7.409s cpu time, 1.129s GC time
Loading theory "Draft.Reachability" (required by "Draft.ReachabilityMoreTemplates")
Proofs for inductive predicate(s) "Reachablep"
  Proving monotonicity ...
### theory "Draft.Reachability"
### 0.278s elapsed time, 0.305s cpu time, 0.028s GC time
Loading theory "Draft.ReachabilityMoreTemplates"
val templateLemmas =
   [("Reachability.ZeroHeightReachableElim",
     "(?M, ?l, ?s, 0, ?r) : Reachable ==> ?r = ?s",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_hole 7,
                template_app
                 (template_app (template_hole 6, template_var 3),
                  template_app
                   (template_app (template_hole 5, template_var 2),
                    template_app
                     (template_app (template_hole 4, template_var 1),
                      template_app
                       (template_app (template_hole 3, template_hole 2),
                        template_var 0))))),
              template_hole 1)
            )],
       template_equation (template_var 0, template_var 1))),
    ("Reachability.ZeroHeightReachableElimAux",
     "[| (?M, ?l, ?s, ?k, ?r) : Reachable; 0 = ?k |] ==> ?r = ?s",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_hole 8,
                template_app
                 (template_app (template_hole 7, template_var 4),
                  template_app
                   (template_app (template_hole 6, template_var 3),
                    template_app
                     (template_app (template_hole 5, template_var 2),
                      template_app
                       (template_app (template_hole 4, template_var 1),
                        template_var 0))))),
              template_hole 3)
            ),
        template_equation (template_hole 1, template_var 1)],
       template_equation (template_var 0, template_var 2))),
    ("Reachability.Reachable_returnElim",
     "[| (?M, ?l, ?s, ?k, ?t) : Reachable; get_ins ?M ?l = Some vreturn |]
      ==> ?t = ?s",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_hole 10,
                template_app
                 (template_app (template_hole 9, template_var 4),
                  template_app
                   (template_app (template_hole 8, template_var 3),
                    template_app
                     (template_app (template_hole 7, template_var 2),
                      template_app
                       (template_app (template_hole 6, template_var 1),
                        template_var 0))))),
              template_hole 5)
            ),
        template_equation
         (template_app
           (template_app (template_hole 3, template_var 4), template_var 3),
          template_app (template_hole 2, template_hole 1))],
       template_equation (template_var 0, template_var 2))),
    ("Reachability.ReachableSplit",
     "[| (?M, ?l, ?s, ?k, ?t) : Reachable; 1 <= ?k |]
      ==> (EX n m r ll.
              (?M, ?l, ?s, n, ll, r) : Step &
              (?M, ll, r, m, ?t) : Reachable & Suc m + n = ?k) |
          (EX n ops S h c m par R ops1 code l0.
              ?s = (ops, S, h) &
              get_ins ?M ?l = Some (invokeS c m) &
              mbody_is c m (par, code, l0) &
              (ops, par, R, ops1) : Frame &
              ((par, code, l0), l0, ([], R, h), n, ?t) : Reachable &
              Suc n = ?k)",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_hole 45,
                template_app
                 (template_app (template_hole 44, template_var 4),
                  template_app
                   (template_app (template_hole 43, template_var 3),
                    template_app
                     (template_app (template_hole 42, template_var 2),
                      template_app
                       (template_app (template_hole 41, template_var 1),
                        template_var 0))))),
              template_hole 40)
            ),
        template_inequation
         (less_equals, template_hole 38, template_var 1)],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 37, template_app (template_hole 36, t_empty)),
             template_app (template_hole 36, t_empty))
           )))]:
   (string * thm * template) list
### theory "Draft.ReachabilityMoreTemplates"
### 0.314s elapsed time, 0.433s cpu time, 0.000s GC time
val it = (): unit
