Loading theory "Draft.AssocLists" (required by "Draft.AssocListsMoreTemplates")
Loading theory "HOL-Library.Function_Algebras" (required by "Draft.AssocListsMoreTemplates" via "Draft.ExtrEqs" via "HOL-Library.BigO")
Loading theory "HOL-Library.Nat_Bijection" (required by "Draft.AssocListsMoreTemplates" via "Draft.ExtrEqs" via "HOL-Library.Stream")
Loading theory "HOL-Library.Set_Algebras" (required by "Draft.AssocListsMoreTemplates" via "Draft.ExtrEqs" via "HOL-Library.BigO")
instantiation
  set :: (plus) plus
  plus_set == plus :: 'a set => 'a set => 'a set
instantiation
  fun :: (type, plus) plus
  plus_fun == plus :: ('a => 'b) => ('a => 'b) => 'a => 'b
consts
  lookup :: "('a * 'b) list => 'a => 'b option"
instantiation
  set :: (times) times
  times_set == times :: 'a set => 'a set => 'a set
instantiation
  fun :: (type, zero) zero
  zero_fun == zero_class.zero :: 'a => 'b
### Ambiguous input (line 26 of "$AFP/BytecodeLogicJmlTypes/AssocLists.thy") produces 2 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.All_binder" ("_idts" ("_position" a) ("_position" b))
###     ("\<^const>HOL.implies"
###       ("\<^const>HOL.eq"
###         ("\<^const>AssocLists.lookup" ("_position" L) ("_position" a))
###         ("_applC" ("_position" Some) ("_position" b)))
###       ("\<^const>Set.member"
###         ("_tuple" ("_position" a) ("_tuple_arg" ("_position" b)))
###         ("_applC" ("_position" set) ("_position" L))))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.All_binder" ("_idts" ("_position" a) ("_position" b))
###     ("\<^const>HOL.implies"
###       ("\<^const>AssocLists.lookup" ("_position" L)
###         ("\<^const>HOL.eq" ("_position" a)
###           ("_applC" ("_position" Some) ("_position" b))))
###       ("\<^const>Set.member"
###         ("_tuple" ("_position" a) ("_tuple_arg" ("_position" b)))
###         ("_applC" ("_position" set) ("_position" L))))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
instantiation
  fun :: (type, times) times
  times_fun == times :: ('a => 'b) => ('a => 'b) => 'a => 'b
### Ambiguous input (line 29 of "$AFP/BytecodeLogicJmlTypes/AssocLists.thy") produces 3 parse trees:
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>HOL.eq" ("_position" a) ("_position" b)))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>AssocLists.lookup"
###       ("\<^const>AssocLists.lookup" ("_position" L)
###         ("\<^const>HOL.eq" ("_position" a) ("_position" L)))
###       ("_position" b))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>HOL.eq" ("_position" a) ("_position" b)))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>AssocLists.lookup" ("_position" L)
###       ("\<^const>HOL.eq" ("_position" a)
###         ("\<^const>AssocLists.lookup" ("_position" L) ("_position" b))))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>HOL.eq" ("_position" a) ("_position" b)))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>HOL.eq"
###       ("\<^const>AssocLists.lookup" ("_position" L) ("_position" a))
###       ("\<^const>AssocLists.lookup" ("_position" L) ("_position" b)))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
instantiation
  set :: (zero) zero
  zero_set == zero_class.zero :: 'a set
### Ambiguous input (line 31 of "$AFP/BytecodeLogicJmlTypes/AssocLists.thy") produces 4 parse trees:
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>HOL.eq"
###         ("\<^const>AssocLists.lookup" ("_position" L) ("_position" a))
###         ("_position" X)))
###     ("_asm"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>HOL.eq"
###           ("\<^const>AssocLists.lookup" ("_position" L) ("_position" a))
###           ("_position" Y)))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>HOL.eq" ("_position" X) ("_position" Y))))
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>AssocLists.lookup" ("_position" L)
###         ("\<^const>HOL.eq" ("_position" a) ("_position" X))))
###     ("_asm"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>HOL.eq"
###           ("\<^const>AssocLists.lookup" ("_position" L) ("_position" a))
###           ("_position" Y)))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>HOL.eq" ("_position" X) ("_position" Y))))
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>HOL.eq"
###         ("\<^const>AssocLists.lookup" ("_position" L) ("_position" a))
###         ("_position" X)))
###     ("_asm"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>AssocLists.lookup" ("_position" L)
###           ("\<^const>HOL.eq" ("_position" a) ("_position" Y))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>HOL.eq" ("_position" X) ("_position" Y))))
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>AssocLists.lookup" ("_position" L)
###         ("\<^const>HOL.eq" ("_position" a) ("_position" X))))
###     ("_asm"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>AssocLists.lookup" ("_position" L)
###           ("\<^const>HOL.eq" ("_position" a) ("_position" Y))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>HOL.eq" ("_position" X) ("_position" Y))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
instantiation
  set :: (one) one
  one_set == one_class.one :: 'a set
### Ambiguous input (line 33 of "$AFP/BytecodeLogicJmlTypes/AssocLists.thy") produces 4 parse trees:
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>HOL.eq" ("_position" L) ("_position" M)))
###     ("_asm"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>HOL.eq"
###           ("\<^const>AssocLists.lookup" ("_position" M) ("_position" b))
###           ("_position" X)))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>AssocLists.lookup" ("_position" L)
###       ("\<^const>HOL.eq" ("_position" b) ("_position" X)))))
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>HOL.eq" ("_position" L) ("_position" M)))
###     ("_asm"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>AssocLists.lookup" ("_position" M)
###           ("\<^const>HOL.eq" ("_position" b) ("_position" X))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>AssocLists.lookup" ("_position" L)
###       ("\<^const>HOL.eq" ("_position" b) ("_position" X)))))
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>HOL.eq" ("_position" L) ("_position" M)))
###     ("_asm"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>HOL.eq"
###           ("\<^const>AssocLists.lookup" ("_position" M) ("_position" b))
###           ("_position" X)))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>HOL.eq"
###       ("\<^const>AssocLists.lookup" ("_position" L) ("_position" b))
###       ("_position" X))))
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>HOL.eq" ("_position" L) ("_position" M)))
###     ("_asm"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>AssocLists.lookup" ("_position" M)
###           ("\<^const>HOL.eq" ("_position" b) ("_position" X))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>HOL.eq"
###       ("\<^const>AssocLists.lookup" ("_position" L) ("_position" b))
###       ("_position" X))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
instantiation
  fun :: (type, one) one
  one_fun == one_class.one :: 'a => 'b
### Ambiguous input (line 35 of "$AFP/BytecodeLogicJmlTypes/AssocLists.thy") produces 4 parse trees:
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>HOL.eq" ("_position" L) ("_position" M)))
###     ("_asm"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>HOL.eq"
###           ("\<^const>AssocLists.lookup" ("_position" L) ("_position" b))
###           ("_position" X)))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>AssocLists.lookup" ("_position" M)
###       ("\<^const>HOL.eq" ("_position" b) ("_position" X)))))
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>HOL.eq" ("_position" L) ("_position" M)))
###     ("_asm"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>AssocLists.lookup" ("_position" L)
###           ("\<^const>HOL.eq" ("_position" b) ("_position" X))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>AssocLists.lookup" ("_position" M)
###       ("\<^const>HOL.eq" ("_position" b) ("_position" X)))))
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>HOL.eq" ("_position" L) ("_position" M)))
###     ("_asm"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>HOL.eq"
###           ("\<^const>AssocLists.lookup" ("_position" L) ("_position" b))
###           ("_position" X)))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>HOL.eq"
###       ("\<^const>AssocLists.lookup" ("_position" M) ("_position" b))
###       ("_position" X))))
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>HOL.eq" ("_position" L) ("_position" M)))
###     ("_asm"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>AssocLists.lookup" ("_position" L)
###           ("\<^const>HOL.eq" ("_position" b) ("_position" X))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>HOL.eq"
###       ("\<^const>AssocLists.lookup" ("_position" M) ("_position" b))
###       ("_position" X))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
consts
  delete :: "('a * 'b) list => 'a => ('a * 'b) list"
### Ambiguous input (line 50 of "$AFP/BytecodeLogicJmlTypes/AssocLists.thy") produces 2 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>AssocLists.lookup"
###     ("_applC" ("_position" delete)
###       ("_cargs" ("_position" L) ("_position" a)))
###     ("\<^const>HOL.eq" ("_position" a) ("_position" None))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("\<^const>AssocLists.lookup"
###       ("_applC" ("_position" delete)
###         ("_cargs" ("_position" L) ("_position" a)))
###       ("_position" a))
###     ("_position" None)))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 53 of "$AFP/BytecodeLogicJmlTypes/AssocLists.thy") produces 3 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.implies"
###     ("\<^const>HOL.not_equal" ("_position" b) ("_position" a))
###     ("\<^const>AssocLists.lookup"
###       ("\<^const>AssocLists.lookup"
###         ("_applC" ("_position" delete)
###           ("_cargs" ("_position" l) ("_position" a)))
###         ("\<^const>HOL.eq" ("_position" b) ("_position" l)))
###       ("_position" b))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.implies"
###     ("\<^const>HOL.not_equal" ("_position" b) ("_position" a))
###     ("\<^const>HOL.eq"
###       ("\<^const>AssocLists.lookup"
###         ("_applC" ("_position" delete)
###           ("_cargs" ("_position" l) ("_position" a)))
###         ("_position" b))
###       ("\<^const>AssocLists.lookup" ("_position" l) ("_position" b)))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.implies"
###     ("\<^const>HOL.not_equal" ("_position" b) ("_position" a))
###     ("\<^const>AssocLists.lookup"
###       ("_applC" ("_position" delete)
###         ("_cargs" ("_position" l) ("_position" a)))
###       ("\<^const>HOL.eq" ("_position" b)
###         ("\<^const>AssocLists.lookup" ("_position" l) ("_position" b))))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 56 of "$AFP/BytecodeLogicJmlTypes/AssocLists.thy") produces 4 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>AssocLists.lookup" ("_position" L)
###     ("\<^const>Pure.imp"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>HOL.eq" ("_position" a) ("_position" None)))
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>HOL.eq"
###           ("_applC" ("_position" delete)
###             ("_cargs" ("_position" L) ("_position" a)))
###           ("_position" L))))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>AssocLists.lookup" ("_position" L)
###       ("\<^const>HOL.eq" ("_position" a) ("_position" None))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>HOL.eq"
###       ("_applC" ("_position" delete)
###         ("_cargs" ("_position" L) ("_position" a)))
###       ("_position" L))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>HOL.eq"
###       ("\<^const>AssocLists.lookup" ("_position" L) ("_position" a))
###       ("_position" None)))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>HOL.eq"
###       ("_applC" ("_position" delete)
###         ("_cargs" ("_position" L) ("_position" a)))
###       ("_position" L))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("\<^const>AssocLists.lookup" ("_position" L)
###       ("\<^const>Pure.imp"
###         ("\<^const>HOL.Trueprop"
###           ("\<^const>HOL.eq" ("_position" a) ("_position" None)))
###         ("\<^const>HOL.Trueprop"
###           ("_applC" ("_position" delete)
###             ("_cargs" ("_position" L) ("_position" a))))))
###     ("_position" L)))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 67 of "$AFP/BytecodeLogicJmlTypes/AssocLists.thy") produces 4 parse trees:
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>HOL.not_equal" ("_position" b) ("_position" a)))
###     ("_asm"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>HOL.eq"
###           ("\<^const>AssocLists.lookup" ("_position" l) ("_position" b))
###           ("_position" x)))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>AssocLists.lookup"
###       ("_applC" ("_position" delete)
###         ("_cargs" ("_position" l) ("_position" a)))
###       ("\<^const>HOL.eq" ("_position" b) ("_position" x)))))
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>HOL.not_equal" ("_position" b) ("_position" a)))
###     ("_asm"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>AssocLists.lookup" ("_position" l)
###           ("\<^const>HOL.eq" ("_position" b) ("_position" x))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>AssocLists.lookup"
###       ("_applC" ("_position" delete)
###         ("_cargs" ("_position" l) ("_position" a)))
###       ("\<^const>HOL.eq" ("_position" b) ("_position" x)))))
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>HOL.not_equal" ("_position" b) ("_position" a)))
###     ("_asm"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>HOL.eq"
###           ("\<^const>AssocLists.lookup" ("_position" l) ("_position" b))
###           ("_position" x)))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>HOL.eq"
###       ("\<^const>AssocLists.lookup"
###         ("_applC" ("_position" delete)
###           ("_cargs" ("_position" l) ("_position" a)))
###         ("_position" b))
###       ("_position" x))))
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>HOL.not_equal" ("_position" b) ("_position" a)))
###     ("_asm"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>AssocLists.lookup" ("_position" l)
###           ("\<^const>HOL.eq" ("_position" b) ("_position" x))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>HOL.eq"
###       ("\<^const>AssocLists.lookup"
###         ("_applC" ("_position" delete)
###           ("_cargs" ("_position" l) ("_position" a)))
###         ("_position" b))
###       ("_position" x))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 84 of "$AFP/BytecodeLogicJmlTypes/AssocLists.thy") produces 4 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>AssocLists.lookup"
###     ("_applC"
###       ("_constrain" ("_position" L)
###         ("_tappl" ("_position_sort" 'a) ("_position_sort" 'b)
###           ("_type_name" AssList)))
###       ("_Map" ("_maplet" ("_position" a) ("_position" b))))
###     ("\<^const>HOL.eq" ("_position" a)
###       ("_applC" ("_position" Some) ("_position" b)))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>AssocLists.lookup"
###     ("\<^const>AssocLists.upd"
###       ("_constrain" ("_position" L)
###         ("_tappl" ("_position_sort" 'a) ("_position_sort" 'b)
###           ("_type_name" AssList)))
###       ("_position" a) ("_position" b))
###     ("\<^const>HOL.eq" ("_position" a)
###       ("_applC" ("_position" Some) ("_position" b)))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("\<^const>AssocLists.lookup"
###       ("_applC"
###         ("_constrain" ("_position" L)
###           ("_tappl" ("_position_sort" 'a) ("_position_sort" 'b)
###             ("_type_name" AssList)))
###         ("_Map" ("_maplet" ("_position" a) ("_position" b))))
###       ("_position" a))
###     ("_applC" ("_position" Some) ("_position" b))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("\<^const>AssocLists.lookup"
###       ("\<^const>AssocLists.upd"
###         ("_constrain" ("_position" L)
###           ("_tappl" ("_position_sort" 'a) ("_position_sort" 'b)
###             ("_type_name" AssList)))
###         ("_position" a) ("_position" b))
###       ("_position" a))
###     ("_applC" ("_position" Some) ("_position" b))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
Found termination order: "(%p. size (snd p)) <*mlex*> {}"
### Ambiguous input (line 87 of "$AFP/BytecodeLogicJmlTypes/AssocLists.thy") produces 4 parse trees:
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>HOL.eq" ("_position" a) ("_position" c)))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>AssocLists.lookup"
###       ("_applC"
###         ("_constrain" ("_position" L)
###           ("_tappl" ("_position_sort" 'a) ("_position_sort" 'b)
###             ("_type_name" AssList)))
###         ("_Map" ("_maplet" ("_position" a) ("_position" b))))
###       ("\<^const>HOL.eq" ("_position" c)
###         ("_applC" ("_position" Some) ("_position" b))))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>HOL.eq" ("_position" a) ("_position" c)))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>AssocLists.lookup"
###       ("\<^const>AssocLists.upd"
###         ("_constrain" ("_position" L)
###           ("_tappl" ("_position_sort" 'a) ("_position_sort" 'b)
###             ("_type_name" AssList)))
###         ("_position" a) ("_position" b))
###       ("\<^const>HOL.eq" ("_position" c)
###         ("_applC" ("_position" Some) ("_position" b))))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>HOL.eq" ("_position" a) ("_position" c)))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>HOL.eq"
###       ("\<^const>AssocLists.lookup"
###         ("_applC"
###           ("_constrain" ("_position" L)
###             ("_tappl" ("_position_sort" 'a) ("_position_sort" 'b)
###               ("_type_name" AssList)))
###           ("_Map" ("_maplet" ("_position" a) ("_position" b))))
###         ("_position" c))
###       ("_applC" ("_position" Some) ("_position" b)))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>HOL.eq" ("_position" a) ("_position" c)))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>HOL.eq"
###       ("\<^const>AssocLists.lookup"
###         ("\<^const>AssocLists.upd"
###           ("_constrain" ("_position" L)
###             ("_tappl" ("_position_sort" 'a) ("_position_sort" 'b)
###               ("_type_name" AssList)))
###           ("_position" a) ("_position" b))
###         ("_position" c))
###       ("_applC" ("_position" Some) ("_position" b)))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 89 of "$AFP/BytecodeLogicJmlTypes/AssocLists.thy") produces 6 parse trees:
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>HOL.not_equal" ("_position" a) ("_position" b)))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>AssocLists.lookup"
###       ("\<^const>AssocLists.lookup"
###         ("_applC"
###           ("_constrain" ("_position" L)
###             ("_tappl" ("_position_sort" 'a) ("_position_sort" 'b)
###               ("_type_name" AssList)))
###           ("_Map" ("_maplet" ("_position" a) ("_position" v))))
###         ("\<^const>HOL.eq" ("_position" b) ("_position" L)))
###       ("_position" b))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>HOL.not_equal" ("_position" a) ("_position" b)))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>AssocLists.lookup"
###       ("\<^const>AssocLists.lookup"
###         ("\<^const>AssocLists.upd"
###           ("_constrain" ("_position" L)
###             ("_tappl" ("_position_sort" 'a) ("_position_sort" 'b)
###               ("_type_name" AssList)))
###           ("_position" a) ("_position" v))
###         ("\<^const>HOL.eq" ("_position" b) ("_position" L)))
###       ("_position" b))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>HOL.not_equal" ("_position" a) ("_position" b)))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>AssocLists.lookup"
###       ("_applC"
###         ("_constrain" ("_position" L)
###           ("_tappl" ("_position_sort" 'a) ("_position_sort" 'b)
###             ("_type_name" AssList)))
###         ("_Map" ("_maplet" ("_position" a) ("_position" v))))
###       ("\<^const>HOL.eq" ("_position" b)
###         ("\<^const>AssocLists.lookup" ("_position" L) ("_position" b))))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>HOL.not_equal" ("_position" a) ("_position" b)))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>AssocLists.lookup"
###       ("\<^const>AssocLists.upd"
###         ("_constrain" ("_position" L)
###           ("_tappl" ("_position_sort" 'a) ("_position_sort" 'b)
###             ("_type_name" AssList)))
###         ("_position" a) ("_position" v))
###       ("\<^const>HOL.eq" ("_position" b)
###         ("\<^const>AssocLists.lookup" ("_position" L) ("_position" b))))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>HOL.not_equal" ("_position" a) ("_position" b)))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>HOL.eq"
###       ("\<^const>AssocLists.lookup"
###         ("_applC"
###           ("_constrain" ("_position" L)
###             ("_tappl" ("_position_sort" 'a) ("_position_sort" 'b)
###               ("_type_name" AssList)))
###           ("_Map" ("_maplet" ("_position" a) ("_position" v))))
###         ("_position" b))
###       ("\<^const>AssocLists.lookup" ("_position" L) ("_position" b)))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>HOL.not_equal" ("_position" a) ("_position" b)))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>HOL.eq"
###       ("\<^const>AssocLists.lookup"
###         ("\<^const>AssocLists.upd"
###           ("_constrain" ("_position" L)
###             ("_tappl" ("_position_sort" 'a) ("_position_sort" 'b)
###               ("_type_name" AssList)))
###           ("_position" a) ("_position" v))
###         ("_position" b))
###       ("\<^const>AssocLists.lookup" ("_position" L) ("_position" b)))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 92 of "$AFP/BytecodeLogicJmlTypes/AssocLists.thy") produces 8 parse trees:
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>HOL.eq"
###         ("\<^const>AssocLists.lookup"
###           ("\<^const>AssocLists.upd"
###             ("_constrain" ("_position" L)
###               ("_tappl" ("_position_sort" 'a) ("_position_sort" 'b)
###                 ("_type_name" AssList)))
###             ("_position" a) ("_position" v))
###           ("_position" b))
###         ("_position" X)))
###     ("_asm"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>HOL.not_equal" ("_position" a) ("_position" b)))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>AssocLists.lookup" ("_position" L)
###       ("\<^const>HOL.eq" ("_position" b) ("_position" X)))))
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>HOL.eq"
###         ("\<^const>AssocLists.lookup"
###           ("_applC"
###             ("_constrain" ("_position" L)
###               ("_tappl" ("_position_sort" 'a) ("_position_sort" 'b)
###                 ("_type_name" AssList)))
###             ("_Map" ("_maplet" ("_position" a) ("_position" v))))
###           ("_position" b))
###         ("_position" X)))
###     ("_asm"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>HOL.not_equal" ("_position" a) ("_position" b)))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>AssocLists.lookup" ("_position" L)
###       ("\<^const>HOL.eq" ("_position" b) ("_position" X)))))
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>AssocLists.lookup"
###         ("\<^const>AssocLists.upd"
###           ("_constrain" ("_position" L)
###             ("_tappl" ("_position_sort" 'a) ("_position_sort" 'b)
###               ("_type_name" AssList)))
###           ("_position" a) ("_position" v))
###         ("\<^const>HOL.eq" ("_position" b) ("_position" X))))
###     ("_asm"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>HOL.not_equal" ("_position" a) ("_position" b)))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>AssocLists.lookup" ("_position" L)
###       ("\<^const>HOL.eq" ("_position" b) ("_position" X)))))
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>AssocLists.lookup"
###         ("_applC"
###           ("_constrain" ("_position" L)
###             ("_tappl" ("_position_sort" 'a) ("_position_sort" 'b)
###               ("_type_name" AssList)))
###           ("_Map" ("_maplet" ("_position" a) ("_position" v))))
###         ("\<^const>HOL.eq" ("_position" b) ("_position" X))))
###     ("_asm"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>HOL.not_equal" ("_position" a) ("_position" b)))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>AssocLists.lookup" ("_position" L)
###       ("\<^const>HOL.eq" ("_position" b) ("_position" X)))))
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>HOL.eq"
###         ("\<^const>AssocLists.lookup"
###           ("\<^const>AssocLists.upd"
###             ("_constrain" ("_position" L)
###               ("_tappl" ("_position_sort" 'a) ("_position_sort" 'b)
###                 ("_type_name" AssList)))
###             ("_position" a) ("_position" v))
###           ("_position" b))
###         ("_position" X)))
###     ("_asm"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>HOL.not_equal" ("_position" a) ("_position" b)))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>HOL.eq"
###       ("\<^const>AssocLists.lookup" ("_position" L) ("_position" b))
###       ("_position" X))))
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>HOL.eq"
###         ("\<^const>AssocLists.lookup"
###           ("_applC"
###             ("_constrain" ("_position" L)
###               ("_tappl" ("_position_sort" 'a) ("_position_sort" 'b)
###                 ("_type_name" AssList)))
###             ("_Map" ("_maplet" ("_position" a) ("_position" v))))
###           ("_position" b))
###         ("_position" X)))
###     ("_asm"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>HOL.not_equal" ("_position" a) ("_position" b)))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>HOL.eq"
###       ("\<^const>AssocLists.lookup" ("_position" L) ("_position" b))
###       ("_position" X))))
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>AssocLists.lookup"
###         ("\<^const>AssocLists.upd"
###           ("_constrain" ("_position" L)
###             ("_tappl" ("_position_sort" 'a) ("_position_sort" 'b)
###               ("_type_name" AssList)))
###           ("_position" a) ("_position" v))
###         ("\<^const>HOL.eq" ("_position" b) ("_position" X))))
###     ("_asm"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>HOL.not_equal" ("_position" a) ("_position" b)))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>HOL.eq"
###       ("\<^const>AssocLists.lookup" ("_position" L) ("_position" b))
###       ("_position" X))))
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>AssocLists.lookup"
###         ("_applC"
###           ("_constrain" ("_position" L)
###             ("_tappl" ("_position_sort" 'a) ("_position_sort" 'b)
###               ("_type_name" AssList)))
###           ("_Map" ("_maplet" ("_position" a) ("_position" v))))
###         ("\<^const>HOL.eq" ("_position" b) ("_position" X))))
###     ("_asm"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>HOL.not_equal" ("_position" a) ("_position" b)))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>HOL.eq"
###       ("\<^const>AssocLists.lookup" ("_position" L) ("_position" b))
###       ("_position" X))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 95 of "$AFP/BytecodeLogicJmlTypes/AssocLists.thy") produces 8 parse trees:
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>HOL.eq"
###         ("\<^const>AssocLists.lookup"
###           ("_constrain" ("_position" L)
###             ("_tappl" ("_position_sort" 'a) ("_position_sort" 'b)
###               ("_type_name" AssList)))
###           ("_position" b))
###         ("_applC" ("_position" Some) ("_position" X))))
###     ("_asm"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>HOL.not_equal" ("_position" a) ("_position" b)))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>AssocLists.lookup"
###       ("_applC" ("_position" L)
###         ("_Map" ("_maplet" ("_position" a) ("_position" v))))
###       ("\<^const>HOL.eq" ("_position" b)
###         ("_applC" ("_position" Some) ("_position" X))))))
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>AssocLists.lookup"
###         ("_constrain" ("_position" L)
###           ("_tappl" ("_position_sort" 'a) ("_position_sort" 'b)
###             ("_type_name" AssList)))
###         ("\<^const>HOL.eq" ("_position" b)
###           ("_applC" ("_position" Some) ("_position" X)))))
###     ("_asm"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>HOL.not_equal" ("_position" a) ("_position" b)))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>AssocLists.lookup"
###       ("_applC" ("_position" L)
###         ("_Map" ("_maplet" ("_position" a) ("_position" v))))
###       ("\<^const>HOL.eq" ("_position" b)
###         ("_applC" ("_position" Some) ("_position" X))))))
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>HOL.eq"
###         ("\<^const>AssocLists.lookup"
###           ("_constrain" ("_position" L)
###             ("_tappl" ("_position_sort" 'a) ("_position_sort" 'b)
###               ("_type_name" AssList)))
###           ("_position" b))
###         ("_applC" ("_position" Some) ("_position" X))))
###     ("_asm"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>HOL.not_equal" ("_position" a) ("_position" b)))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>AssocLists.lookup"
###       ("\<^const>AssocLists.upd" ("_position" L) ("_position" a)
###         ("_position" v))
###       ("\<^const>HOL.eq" ("_position" b)
###         ("_applC" ("_position" Some) ("_position" X))))))
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>AssocLists.lookup"
###         ("_constrain" ("_position" L)
###           ("_tappl" ("_position_sort" 'a) ("_position_sort" 'b)
###             ("_type_name" AssList)))
###         ("\<^const>HOL.eq" ("_position" b)
###           ("_applC" ("_position" Some) ("_position" X)))))
###     ("_asm"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>HOL.not_equal" ("_position" a) ("_position" b)))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>AssocLists.lookup"
###       ("\<^const>AssocLists.upd" ("_position" L) ("_position" a)
###         ("_position" v))
###       ("\<^const>HOL.eq" ("_position" b)
###         ("_applC" ("_position" Some) ("_position" X))))))
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>HOL.eq"
###         ("\<^const>AssocLists.lookup"
###           ("_constrain" ("_position" L)
###             ("_tappl" ("_position_sort" 'a) ("_position_sort" 'b)
###               ("_type_name" AssList)))
###           ("_position" b))
###         ("_applC" ("_position" Some) ("_position" X))))
###     ("_asm"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>HOL.not_equal" ("_position" a) ("_position" b)))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>HOL.eq"
###       ("\<^const>AssocLists.lookup"
###         ("_applC" ("_position" L)
###           ("_Map" ("_maplet" ("_position" a) ("_position" v))))
###         ("_position" b))
###       ("_applC" ("_position" Some) ("_position" X)))))
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>AssocLists.lookup"
###         ("_constrain" ("_position" L)
###           ("_tappl" ("_position_sort" 'a) ("_position_sort" 'b)
###             ("_type_name" AssList)))
###         ("\<^const>HOL.eq" ("_position" b)
###           ("_applC" ("_position" Some) ("_position" X)))))
###     ("_asm"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>HOL.not_equal" ("_position" a) ("_position" b)))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>HOL.eq"
###       ("\<^const>AssocLists.lookup"
###         ("_applC" ("_position" L)
###           ("_Map" ("_maplet" ("_position" a) ("_position" v))))
###         ("_position" b))
###       ("_applC" ("_position" Some) ("_position" X)))))
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>HOL.eq"
###         ("\<^const>AssocLists.lookup"
###           ("_constrain" ("_position" L)
###             ("_tappl" ("_position_sort" 'a) ("_position_sort" 'b)
###               ("_type_name" AssList)))
###           ("_position" b))
###         ("_applC" ("_position" Some) ("_position" X))))
###     ("_asm"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>HOL.not_equal" ("_position" a) ("_position" b)))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>HOL.eq"
###       ("\<^const>AssocLists.lookup"
###         ("\<^const>AssocLists.upd" ("_position" L) ("_position" a)
###           ("_position" v))
###         ("_position" b))
###       ("_applC" ("_position" Some) ("_position" X)))))
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>AssocLists.lookup"
###         ("_constrain" ("_position" L)
###           ("_tappl" ("_position_sort" 'a) ("_position_sort" 'b)
###             ("_type_name" AssList)))
###         ("\<^const>HOL.eq" ("_position" b)
###           ("_applC" ("_position" Some) ("_position" X)))))
###     ("_asm"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>HOL.not_equal" ("_position" a) ("_position" b)))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>HOL.eq"
###       ("\<^const>AssocLists.lookup"
###         ("\<^const>AssocLists.upd" ("_position" L) ("_position" a)
###           ("_position" v))
###         ("_position" b))
###       ("_applC" ("_position" Some) ("_position" X)))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### theory "HOL-Library.Function_Algebras"
### 0.157s elapsed time, 0.641s cpu time, 0.045s GC time
Loading theory "HOL-Library.Tree" (required by "Draft.AssocListsMoreTemplates" via "Draft.ExtrEqs" via "Draft.Templates")
### Ambiguous input (line 98 of "$AFP/BytecodeLogicJmlTypes/AssocLists.thy") produces 8 parse trees:
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>HOL.eq"
###         ("\<^const>AssocLists.lookup"
###           ("_constrain" ("_position" L)
###             ("_tappl" ("_position_sort" 'a) ("_position_sort" 'b)
###               ("_type_name" AssList)))
###           ("_position" b))
###         ("_position" M)))
###     ("_asm"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>HOL.not_equal" ("_position" a) ("_position" b)))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>AssocLists.lookup"
###       ("_applC" ("_position" L)
###         ("_Map" ("_maplet" ("_position" a) ("_position" X))))
###       ("\<^const>HOL.eq" ("_position" b) ("_position" M)))))
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>AssocLists.lookup"
###         ("_constrain" ("_position" L)
###           ("_tappl" ("_position_sort" 'a) ("_position_sort" 'b)
###             ("_type_name" AssList)))
###         ("\<^const>HOL.eq" ("_position" b) ("_position" M))))
###     ("_asm"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>HOL.not_equal" ("_position" a) ("_position" b)))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>AssocLists.lookup"
###       ("_applC" ("_position" L)
###         ("_Map" ("_maplet" ("_position" a) ("_position" X))))
###       ("\<^const>HOL.eq" ("_position" b) ("_position" M)))))
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>HOL.eq"
###         ("\<^const>AssocLists.lookup"
###           ("_constrain" ("_position" L)
###             ("_tappl" ("_position_sort" 'a) ("_position_sort" 'b)
###               ("_type_name" AssList)))
###           ("_position" b))
###         ("_position" M)))
###     ("_asm"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>HOL.not_equal" ("_position" a) ("_position" b)))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>AssocLists.lookup"
###       ("\<^const>AssocLists.upd" ("_position" L) ("_position" a)
###         ("_position" X))
###       ("\<^const>HOL.eq" ("_position" b) ("_position" M)))))
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>AssocLists.lookup"
###         ("_constrain" ("_position" L)
###           ("_tappl" ("_position_sort" 'a) ("_position_sort" 'b)
###             ("_type_name" AssList)))
###         ("\<^const>HOL.eq" ("_position" b) ("_position" M))))
###     ("_asm"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>HOL.not_equal" ("_position" a) ("_position" b)))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>AssocLists.lookup"
###       ("\<^const>AssocLists.upd" ("_position" L) ("_position" a)
###         ("_position" X))
###       ("\<^const>HOL.eq" ("_position" b) ("_position" M)))))
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>HOL.eq"
###         ("\<^const>AssocLists.lookup"
###           ("_constrain" ("_position" L)
###             ("_tappl" ("_position_sort" 'a) ("_position_sort" 'b)
###               ("_type_name" AssList)))
###           ("_position" b))
###         ("_position" M)))
###     ("_asm"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>HOL.not_equal" ("_position" a) ("_position" b)))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>HOL.eq"
###       ("\<^const>AssocLists.lookup"
###         ("_applC" ("_position" L)
###           ("_Map" ("_maplet" ("_position" a) ("_position" X))))
###         ("_position" b))
###       ("_position" M))))
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>AssocLists.lookup"
###         ("_constrain" ("_position" L)
###           ("_tappl" ("_position_sort" 'a) ("_position_sort" 'b)
###             ("_type_name" AssList)))
###         ("\<^const>HOL.eq" ("_position" b) ("_position" M))))
###     ("_asm"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>HOL.not_equal" ("_position" a) ("_position" b)))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>HOL.eq"
###       ("\<^const>AssocLists.lookup"
###         ("_applC" ("_position" L)
###           ("_Map" ("_maplet" ("_position" a) ("_position" X))))
###         ("_position" b))
###       ("_position" M))))
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>HOL.eq"
###         ("\<^const>AssocLists.lookup"
###           ("_constrain" ("_position" L)
###             ("_tappl" ("_position_sort" 'a) ("_position_sort" 'b)
###               ("_type_name" AssList)))
###           ("_position" b))
###         ("_position" M)))
###     ("_asm"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>HOL.not_equal" ("_position" a) ("_position" b)))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>HOL.eq"
###       ("\<^const>AssocLists.lookup"
###         ("\<^const>AssocLists.upd" ("_position" L) ("_position" a)
###           ("_position" X))
###         ("_position" b))
###       ("_position" M))))
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>AssocLists.lookup"
###         ("_constrain" ("_position" L)
###           ("_tappl" ("_position_sort" 'a) ("_position_sort" 'b)
###             ("_type_name" AssList)))
###         ("\<^const>HOL.eq" ("_position" b) ("_position" M))))
###     ("_asm"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>HOL.not_equal" ("_position" a) ("_position" b)))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>HOL.eq"
###       ("\<^const>AssocLists.lookup"
###         ("\<^const>AssocLists.upd" ("_position" L) ("_position" a)
###           ("_position" X))
###         ("_position" b))
###       ("_position" M))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 109 of "$AFP/BytecodeLogicJmlTypes/AssocLists.thy") produces 2 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>AssocLists.lookup" ("_position" emp)
###     ("\<^const>HOL.eq" ("_position" a) ("_position" None))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("\<^const>AssocLists.lookup" ("_position" emp) ("_position" a))
###     ("_position" None)))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 113 of "$AFP/BytecodeLogicJmlTypes/AssocLists.thy") produces 2 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq" ("_applC" ("_position" AL_isEmp) ("_position" l))
###     ("\<^const>HOL.All_binder" ("_position" a)
###       ("\<^const>AssocLists.lookup" ("_position" l)
###         ("\<^const>HOL.eq" ("_position" a) ("_position" None))))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq" ("_applC" ("_position" AL_isEmp) ("_position" l))
###     ("\<^const>HOL.All_binder" ("_position" a)
###       ("\<^const>HOL.eq"
###         ("\<^const>AssocLists.lookup" ("_position" l) ("_position" a))
###         ("_position" None)))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 117 of "$AFP/BytecodeLogicJmlTypes/AssocLists.thy") produces 9 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("_applC" ("_position" contained)
###       ("_cargs" ("_position" L) ("_position" M)))
###     ("\<^const>HOL.All_binder" ("_idts" ("_position" a) ("_position" b))
###       ("\<^const>HOL.eq"
###         ("\<^const>AssocLists.lookup"
###           ("\<^const>AssocLists.lookup" ("_position" L)
###             ("\<^const>HOL.implies"
###               ("\<^const>HOL.eq" ("_position" a)
###                 ("_applC" ("_position" Some) ("_position" b)))
###               ("_position" M)))
###           ("_position" a))
###         ("_applC" ("_position" Some) ("_position" b))))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("_applC" ("_position" contained)
###       ("_cargs" ("_position" L) ("_position" M)))
###     ("\<^const>HOL.All_binder" ("_idts" ("_position" a) ("_position" b))
###       ("\<^const>HOL.eq"
###         ("\<^const>AssocLists.lookup" ("_position" L)
###           ("\<^const>HOL.implies"
###             ("\<^const>HOL.eq" ("_position" a)
###               ("_applC" ("_position" Some) ("_position" b)))
###             ("\<^const>AssocLists.lookup" ("_position" M) ("_position" a))))
###         ("_applC" ("_position" Some) ("_position" b))))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("_applC" ("_position" contained)
###       ("_cargs" ("_position" L) ("_position" M)))
###     ("\<^const>HOL.All_binder" ("_idts" ("_position" a) ("_position" b))
###       ("\<^const>AssocLists.lookup"
###         ("\<^const>AssocLists.lookup" ("_position" L)
###           ("\<^const>HOL.implies"
###             ("\<^const>HOL.eq" ("_position" a)
###               ("_applC" ("_position" Some) ("_position" b)))
###             ("_position" M)))
###         ("\<^const>HOL.eq" ("_position" a)
###           ("_applC" ("_position" Some) ("_position" b)))))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("_applC" ("_position" contained)
###       ("_cargs" ("_position" L) ("_position" M)))
###     ("\<^const>HOL.All_binder" ("_idts" ("_position" a) ("_position" b))
###       ("\<^const>HOL.implies"
###         ("\<^const>AssocLists.lookup" ("_position" L)
###           ("\<^const>HOL.eq" ("_position" a)
###             ("_applC" ("_position" Some) ("_position" b))))
###         ("\<^const>AssocLists.lookup" ("_position" M)
###           ("\<^const>HOL.eq" ("_position" a)
###             ("_applC" ("_position" Some) ("_position" b))))))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("_applC" ("_position" contained)
###       ("_cargs" ("_position" L) ("_position" M)))
###     ("\<^const>HOL.All_binder" ("_idts" ("_position" a) ("_position" b))
###       ("\<^const>AssocLists.lookup" ("_position" L)
###         ("\<^const>HOL.implies"
###           ("\<^const>HOL.eq" ("_position" a)
###             ("_applC" ("_position" Some) ("_position" b)))
###           ("\<^const>AssocLists.lookup" ("_position" M)
###             ("\<^const>HOL.eq" ("_position" a)
###               ("_applC" ("_position" Some) ("_position" b)))))))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("_applC" ("_position" contained)
###       ("_cargs" ("_position" L) ("_position" M)))
###     ("\<^const>HOL.All_binder" ("_idts" ("_position" a) ("_position" b))
###       ("\<^const>HOL.implies"
###         ("\<^const>HOL.eq"
###           ("\<^const>AssocLists.lookup" ("_position" L) ("_position" a))
###           ("_applC" ("_position" Some) ("_position" b)))
###         ("\<^const>AssocLists.lookup" ("_position" M)
###           ("\<^const>HOL.eq" ("_position" a)
###             ("_applC" ("_position" Some) ("_position" b))))))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("_applC" ("_position" contained)
###       ("_cargs" ("_position" L) ("_position" M)))
###     ("\<^const>HOL.All_binder" ("_idts" ("_position" a) ("_position" b))
###       ("\<^const>HOL.implies"
###         ("\<^const>AssocLists.lookup" ("_position" L)
###           ("\<^const>HOL.eq" ("_position" a)
###             ("_applC" ("_position" Some) ("_position" b))))
###         ("\<^const>HOL.eq"
###           ("\<^const>AssocLists.lookup" ("_position" M) ("_position" a))
###           ("_applC" ("_position" Some) ("_position" b)))))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("_applC" ("_position" contained)
###       ("_cargs" ("_position" L) ("_position" M)))
###     ("\<^const>HOL.All_binder" ("_idts" ("_position" a) ("_position" b))
###       ("\<^const>AssocLists.lookup" ("_position" L)
###         ("\<^const>HOL.implies"
###           ("\<^const>HOL.eq" ("_position" a)
###             ("_applC" ("_position" Some) ("_position" b)))
###           ("\<^const>HOL.eq"
###             ("\<^const>AssocLists.lookup" ("_position" M) ("_position" a))
###             ("_applC" ("_position" Some) ("_position" b))))))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("_applC" ("_position" contained)
###       ("_cargs" ("_position" L) ("_position" M)))
###     ("\<^const>HOL.All_binder" ("_idts" ("_position" a) ("_position" b))
###       ("\<^const>HOL.implies"
###         ("\<^const>HOL.eq"
###           ("\<^const>AssocLists.lookup" ("_position" L) ("_position" a))
###           ("_applC" ("_position" Some) ("_position" b)))
###         ("\<^const>HOL.eq"
###           ("\<^const>AssocLists.lookup" ("_position" M) ("_position" a))
###           ("_applC" ("_position" Some) ("_position" b)))))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### theory "HOL-Library.Set_Algebras"
### 0.229s elapsed time, 0.926s cpu time, 0.045s GC time
Loading theory "HOL-Library.BigO" (required by "Draft.AssocListsMoreTemplates" via "Draft.ExtrEqs")
Found termination order: "length <*mlex*> {}"
Found termination order: "size_list size <*mlex*> {}"
### Ambiguous input (line 129 of "$AFP/BytecodeLogicJmlTypes/AssocLists.thy") produces 2 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.All_binder" ("_position" n)
###     ("\<^const>HOL.implies"
###       ("\<^const>HOL.eq" ("\<^const>AssocLists.AL_Size" ("_position" L))
###         ("_applC" ("_position" Suc) ("_position" n)))
###       ("\<^const>HOL.Ex_binder" ("_idts" ("_position" a) ("_position" b))
###         ("\<^const>AssocLists.lookup" ("_position" L)
###           ("\<^const>HOL.eq" ("_position" a)
###             ("_applC" ("_position" Some) ("_position" b))))))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.All_binder" ("_position" n)
###     ("\<^const>HOL.implies"
###       ("\<^const>HOL.eq" ("\<^const>AssocLists.AL_Size" ("_position" L))
###         ("_applC" ("_position" Suc) ("_position" n)))
###       ("\<^const>HOL.Ex_binder" ("_idts" ("_position" a) ("_position" b))
###         ("\<^const>HOL.eq"
###           ("\<^const>AssocLists.lookup" ("_position" L) ("_position" a))
###           ("_applC" ("_position" Some) ("_position" b)))))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 136 of "$AFP/BytecodeLogicJmlTypes/AssocLists.thy") produces 4 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>AssocLists.lookup" ("_position" L)
###     ("\<^const>Pure.imp"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>HOL.eq" ("_position" a) ("_position" None)))
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>HOL.eq"
###           ("\<^const>AssocLists.AL_Size"
###             ("\<^const>AssocLists.upd" ("_position" L) ("_position" a)
###               ("_position" b)))
###           ("_applC" ("_position" Suc)
###             ("\<^const>AssocLists.AL_Size" ("_position" L))))))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>AssocLists.lookup" ("_position" L)
###       ("\<^const>HOL.eq" ("_position" a) ("_position" None))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>HOL.eq"
###       ("\<^const>AssocLists.AL_Size"
###         ("\<^const>AssocLists.upd" ("_position" L) ("_position" a)
###           ("_position" b)))
###       ("_applC" ("_position" Suc)
###         ("\<^const>AssocLists.AL_Size" ("_position" L))))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>HOL.eq"
###       ("\<^const>AssocLists.lookup" ("_position" L) ("_position" a))
###       ("_position" None)))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>HOL.eq"
###       ("\<^const>AssocLists.AL_Size"
###         ("\<^const>AssocLists.upd" ("_position" L) ("_position" a)
###           ("_position" b)))
###       ("_applC" ("_position" Suc)
###         ("\<^const>AssocLists.AL_Size" ("_position" L))))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("\<^const>AssocLists.lookup" ("_position" L)
###       ("\<^const>Pure.imp"
###         ("\<^const>HOL.Trueprop"
###           ("\<^const>HOL.eq" ("_position" a) ("_position" None)))
###         ("\<^const>HOL.Trueprop"
###           ("\<^const>AssocLists.AL_Size"
###             ("\<^const>AssocLists.upd" ("_position" L) ("_position" a)
###               ("_position" b))))))
###     ("_applC" ("_position" Suc)
###       ("\<^const>AssocLists.AL_Size" ("_position" L)))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 147 of "$AFP/BytecodeLogicJmlTypes/AssocLists.thy") produces 45 parse trees (10 displayed):
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.All_binder" ("_position" n)
###     ("\<^const>HOL.implies"
###       ("\<^const>HOL.eq" ("\<^const>AssocLists.AL_Size" ("_position" L))
###         ("_applC" ("_position" Suc) ("_position" n)))
###       ("\<^const>HOL.Ex_binder"
###         ("_idts" ("_position" a) ("_idts" ("_position" b) ("_position" M)))
###         ("\<^const>HOL.conj"
###           ("\<^const>HOL.eq" ("\<^const>AssocLists.AL_Size" ("_position" M))
###             ("_position" n))
###           ("\<^const>HOL.conj"
###             ("\<^const>HOL.eq"
###               ("\<^const>AssocLists.lookup"
###                 ("\<^const>AssocLists.lookup" ("_position" M)
###                   ("\<^const>HOL.conj"
###                     ("\<^const>HOL.eq" ("_position" a) ("_position" None))
###                     ("_position" L)))
###                 ("_position" a))
###               ("_applC" ("_position" Some) ("_position" b)))
###             ("\<^const>HOL.All_binder" ("_position" c)
###               ("\<^const>HOL.implies"
###                 ("\<^const>HOL.not_equal" ("_position" c) ("_position" a))
###                 ("\<^const>AssocLists.lookup"
###                   ("\<^const>AssocLists.lookup" ("_position" M)
###                     ("\<^const>HOL.eq" ("_position" c) ("_position" L)))
###                   ("_position" c))))))))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.All_binder" ("_position" n)
###     ("\<^const>HOL.implies"
###       ("\<^const>HOL.eq" ("\<^const>AssocLists.AL_Size" ("_position" L))
###         ("_applC" ("_position" Suc) ("_position" n)))
###       ("\<^const>HOL.Ex_binder"
###         ("_idts" ("_position" a) ("_idts" ("_position" b) ("_position" M)))
###         ("\<^const>HOL.conj"
###           ("\<^const>HOL.eq" ("\<^const>AssocLists.AL_Size" ("_position" M))
###             ("_position" n))
###           ("\<^const>HOL.conj"
###             ("\<^const>HOL.eq"
###               ("\<^const>AssocLists.lookup" ("_position" M)
###                 ("\<^const>HOL.conj"
###                   ("\<^const>HOL.eq" ("_position" a) ("_position" None))
###                   ("\<^const>AssocLists.lookup" ("_position" L)
###                     ("_position" a))))
###               ("_applC" ("_position" Some) ("_position" b)))
###             ("\<^const>HOL.All_binder" ("_position" c)
###               ("\<^const>HOL.implies"
###                 ("\<^const>HOL.not_equal" ("_position" c) ("_position" a))
###                 ("\<^const>AssocLists.lookup"
###                   ("\<^const>AssocLists.lookup" ("_position" M)
###                     ("\<^const>HOL.eq" ("_position" c) ("_position" L)))
###                   ("_position" c))))))))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.All_binder" ("_position" n)
###     ("\<^const>HOL.implies"
###       ("\<^const>HOL.eq" ("\<^const>AssocLists.AL_Size" ("_position" L))
###         ("_applC" ("_position" Suc) ("_position" n)))
###       ("\<^const>HOL.Ex_binder"
###         ("_idts" ("_position" a) ("_idts" ("_position" b) ("_position" M)))
###         ("\<^const>HOL.conj"
###           ("\<^const>HOL.eq" ("\<^const>AssocLists.AL_Size" ("_position" M))
###             ("_position" n))
###           ("\<^const>HOL.conj"
###             ("\<^const>AssocLists.lookup"
###               ("\<^const>AssocLists.lookup" ("_position" M)
###                 ("\<^const>HOL.conj"
###                   ("\<^const>HOL.eq" ("_position" a) ("_position" None))
###                   ("_position" L)))
###               ("\<^const>HOL.eq" ("_position" a)
###                 ("_applC" ("_position" Some) ("_position" b))))
###             ("\<^const>HOL.All_binder" ("_position" c)
###               ("\<^const>HOL.implies"
###                 ("\<^const>HOL.not_equal" ("_position" c) ("_position" a))
###                 ("\<^const>AssocLists.lookup"
###                   ("\<^const>AssocLists.lookup" ("_position" M)
###                     ("\<^const>HOL.eq" ("_position" c) ("_position" L)))
###                   ("_position" c))))))))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.All_binder" ("_position" n)
###     ("\<^const>HOL.implies"
###       ("\<^const>HOL.eq" ("\<^const>AssocLists.AL_Size" ("_position" L))
###         ("_applC" ("_position" Suc) ("_position" n)))
###       ("\<^const>HOL.Ex_binder"
###         ("_idts" ("_position" a) ("_idts" ("_position" b) ("_position" M)))
###         ("\<^const>HOL.conj"
###           ("\<^const>HOL.eq" ("\<^const>AssocLists.AL_Size" ("_position" M))
###             ("_position" n))
###           ("\<^const>HOL.conj"
###             ("\<^const>AssocLists.lookup" ("_position" M)
###               ("\<^const>HOL.conj"
###                 ("\<^const>HOL.eq" ("_position" a) ("_position" None))
###                 ("\<^const>AssocLists.lookup" ("_position" L)
###                   ("\<^const>HOL.eq" ("_position" a)
###                     ("_applC" ("_position" Some) ("_position" b))))))
###             ("\<^const>HOL.All_binder" ("_position" c)
###               ("\<^const>HOL.implies"
###                 ("\<^const>HOL.not_equal" ("_position" c) ("_position" a))
###                 ("\<^const>AssocLists.lookup"
###                   ("\<^const>AssocLists.lookup" ("_position" M)
###                     ("\<^const>HOL.eq" ("_position" c) ("_position" L)))
###                   ("_position" c))))))))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.All_binder" ("_position" n)
###     ("\<^const>HOL.implies"
###       ("\<^const>HOL.eq" ("\<^const>AssocLists.AL_Size" ("_position" L))
###         ("_applC" ("_position" Suc) ("_position" n)))
###       ("\<^const>HOL.Ex_binder"
###         ("_idts" ("_position" a) ("_idts" ("_position" b) ("_position" M)))
###         ("\<^const>HOL.conj"
###           ("\<^const>HOL.eq" ("\<^const>AssocLists.AL_Size" ("_position" M))
###             ("_position" n))
###           ("\<^const>HOL.conj"
###             ("\<^const>AssocLists.lookup" ("_position" M)
###               ("\<^const>HOL.eq" ("_position" a) ("_position" None)))
###             ("\<^const>HOL.conj"
###               ("\<^const>AssocLists.lookup" ("_position" L)
###                 ("\<^const>HOL.eq" ("_position" a)
###                   ("_applC" ("_position" Some) ("_position" b))))
###               ("\<^const>HOL.All_binder" ("_position" c)
###                 ("\<^const>HOL.implies"
###                   ("\<^const>HOL.not_equal" ("_position" c) ("_position" a))
###                   ("\<^const>AssocLists.lookup"
###                     ("\<^const>AssocLists.lookup" ("_position" M)
###                       ("\<^const>HOL.eq" ("_position" c) ("_position" L)))
###                     ("_position" c)))))))))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.All_binder" ("_position" n)
###     ("\<^const>HOL.implies"
###       ("\<^const>HOL.eq" ("\<^const>AssocLists.AL_Size" ("_position" L))
###         ("_applC" ("_position" Suc) ("_position" n)))
###       ("\<^const>HOL.Ex_binder"
###         ("_idts" ("_position" a) ("_idts" ("_position" b) ("_position" M)))
###         ("\<^const>HOL.conj"
###           ("\<^const>HOL.eq" ("\<^const>AssocLists.AL_Size" ("_position" M))
###             ("_position" n))
###           ("\<^const>AssocLists.lookup" ("_position" M)
###             ("\<^const>HOL.conj"
###               ("\<^const>HOL.eq" ("_position" a) ("_position" None))
###               ("\<^const>HOL.conj"
###                 ("\<^const>AssocLists.lookup" ("_position" L)
###                   ("\<^const>HOL.eq" ("_position" a)
###                     ("_applC" ("_position" Some) ("_position" b))))
###                 ("\<^const>HOL.All_binder" ("_position" c)
###                   ("\<^const>HOL.implies"
###                     ("\<^const>HOL.not_equal" ("_position" c)
###                       ("_position" a))
###                     ("\<^const>AssocLists.lookup"
###                       ("\<^const>AssocLists.lookup" ("_position" M)
###                         ("\<^const>HOL.eq" ("_position" c) ("_position" L)))
###                       ("_position" c))))))))))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.All_binder" ("_position" n)
###     ("\<^const>HOL.implies"
###       ("\<^const>HOL.eq" ("\<^const>AssocLists.AL_Size" ("_position" L))
###         ("_applC" ("_position" Suc) ("_position" n)))
###       ("\<^const>HOL.Ex_binder"
###         ("_idts" ("_position" a) ("_idts" ("_position" b) ("_position" M)))
###         ("\<^const>HOL.conj"
###           ("\<^const>HOL.eq" ("\<^const>AssocLists.AL_Size" ("_position" M))
###             ("_position" n))
###           ("\<^const>HOL.conj"
###             ("\<^const>HOL.eq"
###               ("\<^const>AssocLists.lookup" ("_position" M) ("_position" a))
###               ("_position" None))
###             ("\<^const>HOL.conj"
###               ("\<^const>AssocLists.lookup" ("_position" L)
###                 ("\<^const>HOL.eq" ("_position" a)
###                   ("_applC" ("_position" Some) ("_position" b))))
###               ("\<^const>HOL.All_binder" ("_position" c)
###                 ("\<^const>HOL.implies"
###                   ("\<^const>HOL.not_equal" ("_position" c) ("_position" a))
###                   ("\<^const>AssocLists.lookup"
###                     ("\<^const>AssocLists.lookup" ("_position" M)
###                       ("\<^const>HOL.eq" ("_position" c) ("_position" L)))
###                     ("_position" c)))))))))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.All_binder" ("_position" n)
###     ("\<^const>HOL.implies"
###       ("\<^const>HOL.eq" ("\<^const>AssocLists.AL_Size" ("_position" L))
###         ("_applC" ("_position" Suc) ("_position" n)))
###       ("\<^const>HOL.Ex_binder"
###         ("_idts" ("_position" a) ("_idts" ("_position" b) ("_position" M)))
###         ("\<^const>HOL.conj"
###           ("\<^const>HOL.eq" ("\<^const>AssocLists.AL_Size" ("_position" M))
###             ("_position" n))
###           ("\<^const>AssocLists.lookup"
###             ("\<^const>AssocLists.lookup" ("_position" M)
###               ("\<^const>HOL.conj"
###                 ("\<^const>HOL.eq" ("_position" a) ("_position" None))
###                 ("_position" L)))
###             ("\<^const>HOL.conj"
###               ("\<^const>HOL.eq" ("_position" a)
###                 ("_applC" ("_position" Some) ("_position" b)))
###               ("\<^const>HOL.All_binder" ("_position" c)
###                 ("\<^const>HOL.implies"
###                   ("\<^const>HOL.not_equal" ("_position" c) ("_position" a))
###                   ("\<^const>AssocLists.lookup"
###                     ("\<^const>AssocLists.lookup" ("_position" M)
###                       ("\<^const>HOL.eq" ("_position" c) ("_position" L)))
###                     ("_position" c)))))))))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.All_binder" ("_position" n)
###     ("\<^const>HOL.implies"
###       ("\<^const>HOL.eq" ("\<^const>AssocLists.AL_Size" ("_position" L))
###         ("_applC" ("_position" Suc) ("_position" n)))
###       ("\<^const>HOL.Ex_binder"
###         ("_idts" ("_position" a) ("_idts" ("_position" b) ("_position" M)))
###         ("\<^const>HOL.conj"
###           ("\<^const>HOL.eq" ("\<^const>AssocLists.AL_Size" ("_position" M))
###             ("_position" n))
###           ("\<^const>HOL.conj"
###             ("\<^const>AssocLists.lookup" ("_position" M)
###               ("\<^const>HOL.eq" ("_position" a) ("_position" None)))
###             ("\<^const>AssocLists.lookup" ("_position" L)
###               ("\<^const>HOL.conj"
###                 ("\<^const>HOL.eq" ("_position" a)
###                   ("_applC" ("_position" Some) ("_position" b)))
###                 ("\<^const>HOL.All_binder" ("_position" c)
###                   ("\<^const>HOL.implies"
###                     ("\<^const>HOL.not_equal" ("_position" c)
###                       ("_position" a))
###                     ("\<^const>AssocLists.lookup"
###                       ("\<^const>AssocLists.lookup" ("_position" M)
###                         ("\<^const>HOL.eq" ("_position" c) ("_position" L)))
###                       ("_position" c))))))))))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.All_binder" ("_position" n)
###     ("\<^const>HOL.implies"
###       ("\<^const>HOL.eq" ("\<^const>AssocLists.AL_Size" ("_position" L))
###         ("_applC" ("_position" Suc) ("_position" n)))
###       ("\<^const>HOL.Ex_binder"
###         ("_idts" ("_position" a) ("_idts" ("_position" b) ("_position" M)))
###         ("\<^const>HOL.conj"
###           ("\<^const>HOL.eq" ("\<^const>AssocLists.AL_Size" ("_position" M))
###             ("_position" n))
###           ("\<^const>AssocLists.lookup" ("_position" M)
###             ("\<^const>HOL.conj"
###               ("\<^const>HOL.eq" ("_position" a) ("_position" None))
###               ("\<^const>AssocLists.lookup" ("_position" L)
###                 ("\<^const>HOL.conj"
###                   ("\<^const>HOL.eq" ("_position" a)
###                     ("_applC" ("_position" Some) ("_position" b)))
###                   ("\<^const>HOL.All_binder" ("_position" c)
###                     ("\<^const>HOL.implies"
###                       ("\<^const>HOL.not_equal" ("_position" c)
###                         ("_position" a))
###                       ("\<^const>AssocLists.lookup"
###                         ("\<^const>AssocLists.lookup" ("_position" M)
###                           ("\<^const>HOL.eq" ("_position" c)
###                             ("_position" L)))
###                         ("_position" c)))))))))))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 159 of "$AFP/BytecodeLogicJmlTypes/AssocLists.thy") produces 4 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.All_binder"
###     ("_idts" ("_position" h)
###       ("_idts" ("_position" a)
###         ("_idts" ("_position" obj) ("_position" obj1))))
###     ("\<^const>HOL.implies"
###       ("\<^const>HOL.eq"
###         ("\<^const>AssocLists.AL_Size"
###           ("\<^const>AssocLists.upd" ("_position" h) ("_position" a)
###             ("_position" obj1)))
###         ("_position" n))
###       ("\<^const>HOL.eq"
###         ("\<^const>AssocLists.lookup" ("_position" h)
###           ("\<^const>HOL.implies"
###             ("\<^const>HOL.eq" ("_position" a)
###               ("_applC" ("_position" Some) ("_position" obj)))
###             ("\<^const>AssocLists.AL_Size" ("_position" h))))
###         ("_position" n)))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.All_binder"
###     ("_idts" ("_position" h)
###       ("_idts" ("_position" a)
###         ("_idts" ("_position" obj) ("_position" obj1))))
###     ("\<^const>HOL.implies"
###       ("\<^const>HOL.eq"
###         ("\<^const>AssocLists.AL_Size"
###           ("\<^const>AssocLists.upd" ("_position" h) ("_position" a)
###             ("_position" obj1)))
###         ("_position" n))
###       ("\<^const>HOL.implies"
###         ("\<^const>HOL.eq"
###           ("\<^const>AssocLists.lookup" ("_position" h) ("_position" a))
###           ("_applC" ("_position" Some) ("_position" obj)))
###         ("\<^const>HOL.eq" ("\<^const>AssocLists.AL_Size" ("_position" h))
###           ("_position" n))))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.All_binder"
###     ("_idts" ("_position" h)
###       ("_idts" ("_position" a)
###         ("_idts" ("_position" obj) ("_position" obj1))))
###     ("\<^const>HOL.implies"
###       ("\<^const>HOL.eq"
###         ("\<^const>AssocLists.AL_Size"
###           ("\<^const>AssocLists.upd" ("_position" h) ("_position" a)
###             ("_position" obj1)))
###         ("_position" n))
###       ("\<^const>AssocLists.lookup" ("_position" h)
###         ("\<^const>HOL.implies"
###           ("\<^const>HOL.eq" ("_position" a)
###             ("_applC" ("_position" Some) ("_position" obj)))
###           ("\<^const>HOL.eq" ("\<^const>AssocLists.AL_Size" ("_position" h))
###             ("_position" n)))))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.All_binder"
###     ("_idts" ("_position" h)
###       ("_idts" ("_position" a)
###         ("_idts" ("_position" obj) ("_position" obj1))))
###     ("\<^const>HOL.implies"
###       ("\<^const>HOL.eq"
###         ("\<^const>AssocLists.AL_Size"
###           ("\<^const>AssocLists.upd" ("_position" h) ("_position" a)
###             ("_position" obj1)))
###         ("_position" n))
###       ("\<^const>HOL.implies"
###         ("\<^const>AssocLists.lookup" ("_position" h)
###           ("\<^const>HOL.eq" ("_position" a)
###             ("_applC" ("_position" Some) ("_position" obj))))
###         ("\<^const>HOL.eq" ("\<^const>AssocLists.AL_Size" ("_position" h))
###           ("_position" n))))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 184 of "$AFP/BytecodeLogicJmlTypes/AssocLists.thy") produces 4 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>AssocLists.lookup" ("_position" h)
###     ("\<^const>Pure.imp"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>HOL.eq" ("_position" a)
###           ("_applC" ("_position" Some) ("_position" obj))))
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>HOL.eq"
###           ("\<^const>AssocLists.AL_Size"
###             ("\<^const>AssocLists.upd" ("_position" h) ("_position" a)
###               ("_position" obj1)))
###           ("\<^const>AssocLists.AL_Size" ("_position" h)))))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>AssocLists.lookup" ("_position" h)
###       ("\<^const>HOL.eq" ("_position" a)
###         ("_applC" ("_position" Some) ("_position" obj)))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>HOL.eq"
###       ("\<^const>AssocLists.AL_Size"
###         ("\<^const>AssocLists.upd" ("_position" h) ("_position" a)
###           ("_position" obj1)))
###       ("\<^const>AssocLists.AL_Size" ("_position" h)))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>HOL.eq"
###       ("\<^const>AssocLists.lookup" ("_position" h) ("_position" a))
###       ("_applC" ("_position" Some) ("_position" obj))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>HOL.eq"
###       ("\<^const>AssocLists.AL_Size"
###         ("\<^const>AssocLists.upd" ("_position" h) ("_position" a)
###           ("_position" obj1)))
###       ("\<^const>AssocLists.AL_Size" ("_position" h)))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("\<^const>AssocLists.lookup" ("_position" h)
###       ("\<^const>Pure.imp"
###         ("\<^const>HOL.Trueprop"
###           ("\<^const>HOL.eq" ("_position" a)
###             ("_applC" ("_position" Some) ("_position" obj))))
###         ("\<^const>HOL.Trueprop"
###           ("\<^const>AssocLists.AL_Size"
###             ("\<^const>AssocLists.upd" ("_position" h) ("_position" a)
###               ("_position" obj1))))))
###     ("\<^const>AssocLists.AL_Size" ("_position" h))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### theory "Draft.AssocLists"
### 0.376s elapsed time, 1.501s cpu time, 0.128s GC time
### theory "HOL-Library.Nat_Bijection"
### 0.396s elapsed time, 1.555s cpu time, 0.128s GC time
Loading theory "HOL-Library.Stream" (required by "Draft.AssocListsMoreTemplates" via "Draft.ExtrEqs")
consts
  left :: "'a tree => 'a tree"
consts
  right :: "'a tree => 'a tree"
Found termination order: "size <*mlex*> {}"
consts
  shift :: "'a list => 'a stream => 'a stream"
Proofs for coinductive predicate(s) "streamsp"
  Proving monotonicity ...
Found termination order: "size <*mlex*> {}"
consts
  snth :: "'a stream => nat => 'a"
Found termination order: "size <*mlex*> {}"
consts
  stake :: "nat => 'a stream => 'a list"
consts
  sdrop :: "nat => 'a stream => 'a stream"
class height = type +
  fixes height :: "'a => nat"
instantiation
  tree :: (type) height
  height_tree == height :: 'a tree => nat
consts
  sfilter :: "('a => bool) => 'a stream => 'a stream"
Found termination order: "size <*mlex*> {}"
### theory "HOL-Library.BigO"
### 0.755s elapsed time, 2.433s cpu time, 0.320s GC time
consts
  cycle :: "'a list => 'a stream"
consts
  siterate :: "('a => 'a) => 'a => 'a stream"
Found termination order: "size <*mlex*> {}"
consts
  flat :: "'a list stream => 'a stream"
Found termination order: "size <*mlex*> {}"
consts
  sinterleave :: "'a stream => 'a stream => 'a stream"
consts
  szip :: "'a stream => 'b stream => ('a * 'b) stream"
Found termination order: "size <*mlex*> {}"
consts
  smap2 :: "('a => 'b => 'c) => 'a stream => 'b stream => 'c stream"
### theory "HOL-Library.Stream"
### 0.957s elapsed time, 2.714s cpu time, 0.733s GC time
Found termination order: "size <*mlex*> {}"
Found termination order: "size <*mlex*> {}"
Found termination order: "size <*mlex*> {}"
Found termination order: "(%p. size (fst p)) <*mlex*> {}"
Found termination order: "size <*mlex*> {}"
Found termination order: "(%p. size (snd p)) <*mlex*> {}"
Found termination order: "size <*mlex*> {}"
### theory "HOL-Library.Tree"
### 1.880s elapsed time, 4.387s cpu time, 0.887s GC time
Loading theory "Draft.Templates" (required by "Draft.AssocListsMoreTemplates" via "Draft.ExtrEqs")
datatype template_term
=
     t_empty
   | template_app of template_term * template_term
   | template_hole of int
   | template_var of int
datatype sign
= equals | greater_equals | greater_than | less_equals | less_than
datatype template
=
     template_bimplication of template * template
   | template_dunno
   | template_equation of template_term * template_term
   | template_implication of template list * template
   | template_inequation of sign * template_term * template_term
   | template_negation of template
   | template_predicate of template_term
constructor t_empty: template_term
constructor template_app: template_term * template_term -> template_term
constructor template_hole: int -> template_term
constructor template_var: int -> template_term
constructor equals: sign
constructor greater_equals: sign
constructor greater_than: sign
constructor less_equals: sign
constructor less_than: sign
constructor template_bimplication: template * template -> template
constructor template_dunno: template
constructor template_equation: template_term * template_term -> template
constructor template_implication: template list * template -> template
constructor template_inequation:
   sign * template_term * template_term -> template
constructor template_negation: template -> template
constructor template_predicate: template_term -> template
val vfs = fn: term -> (indexname * typ) list * (string * typ) list
val indexOf = fn: ''a list -> ''a -> int -> int
val has_eq = fn: term -> bool
val term2template = fn:
   (indexname * typ) list -> (string * typ) list -> term -> template_term
val lemma2predicate = fn: term -> term -> template
val makeTemplatewithContext = fn: term -> term -> template
val lemma2template = fn: term -> template
val thm2template = fn: thm -> template
val tterm2string = fn: template_term -> string
val template2string = fn: template -> string
val t = "height ?t <= size ?t": thm
val th =
   Const ("HOL.Trueprop", "bool => prop") $
     (Const ("Orderings.ord_class.less_eq", "nat => nat => bool") $
       (Const ("Tree.height_class.height", "?'a tree => nat") $
         Var (("t", 0), "?'a tree")) $
       (Const ("Nat.size_class.size", "?'a tree => nat") $
         Var (("t", 0), "?'a tree"))):
   term
### theory "Draft.Templates"
### 0.050s elapsed time, 0.065s cpu time, 0.000s GC time
Loading theory "Draft.ExtrEqs" (required by "Draft.AssocListsMoreTemplates")
val eqpattern =
   Pattern
    (
       Const ("HOL.Trueprop", "bool => prop") $
         (Const ("HOL.eq", "?'a => ?'a => bool") $
           Var (("_dummy_", 1), "?'a") $ Var (("_dummy_", 2), "?'a"))
       ):
   term Find_Theorems.criterion
val badeqpattern = Pattern (Const ("Pure.eq", "?'a => ?'a => prop")):
   term Find_Theorems.criterion
val undefpattern =
   Pattern
    (
       Const ("HOL.Trueprop", "bool => prop") $
         (Const ("HOL.eq", "?'a => ?'a => bool") $
           Var (("_dummy_", 1), "?'a") $ Const ("HOL.undefined", "?'a"))
       ):
   term Find_Theorems.criterion
val thmpattern =
   Pattern
    (Const ("HOL.Trueprop", "bool => prop") $ Var (("_dummy_", 1), "bool")):
   term Find_Theorems.criterion
val badnames =
   ["*nitpick*", "*Nitpick*", "*full_exhaustive*", "*_def*", "Enum.finite*",
    "*Quickcheck*", "ATP*", "*Nunchaku*", "*Code*", "*BNF*", "*SMT*",
    "*.*.*"]:
   string list
val unwanted_names =
   [(false, Name "*nitpick*"), (false, Name "*Nitpick*"),
    (false, Name "*full_exhaustive*"), (false, Name "*_def*"),
    (false, Name "Enum.finite*"), (false, Name "*Quickcheck*"),
    (false, Name "ATP*"), (false, Name "*Nunchaku*"),
    (false, Name "*Code*"), (false, Name "*BNF*"), (false, Name "*SMT*"),
    (false, Name "*.*.*")]:
   (bool * term Find_Theorems.criterion) list
val has_vars = fn: term -> bool
val get_all_eqs = fn: string -> Proof.context -> (string * thm) list
val get_all_thms = fn: string -> Proof.context -> (string * thm) list
val get_noneq_thms = fn: string -> Proof.context -> (string * thm) list
val template_eqs = fn:
   string -> Proof.context -> (string * thm * template) list
val template_thms = fn:
   string -> Proof.context -> (string * thm * template) list
### theory "Draft.ExtrEqs"
### 0.484s elapsed time, 0.532s cpu time, 0.061s GC time
Loading theory "Draft.AssocListsMoreTemplates"
val templateLemmas =
   [("AssocLists.AL_emp1", "emp\<down>?a = None",
     template_equation
      (template_app
        (template_app (template_hole 2, template_hole 1), template_var 0),
       template_hole 0)),
    ("AssocLists.AL_delete1", "delete ?L ?a\<down>?a = None",
     template_equation
      (template_app
        (template_app
          (template_hole 2,
           template_app
            (template_app (template_hole 1, template_var 1),
             template_var 0)),
         template_var 0),
       template_hole 0)),
    ("AssocLists.AL_delete4", "length (delete ?t ?a) < Suc (length ?t)",
     template_inequation
      (less_than,
       template_app
        (template_hole 2,
         template_app
          (template_app (template_hole 1, template_var 1), template_var 0)),
       template_app
        (template_hole 0, template_app (template_hole 2, template_var 1)))),
    ("AssocLists.AL_delete_idempotent",
     "delete ?M ?x = delete (delete ?M ?x) ?x",
     template_equation
      (template_app
        (template_app (template_hole 0, template_var 1), template_var 0),
       template_app
        (template_app
          (template_hole 0,
           template_app
            (template_app (template_hole 0, template_var 1),
             template_var 0)),
         template_var 0))),
    ("AssocLists.AL_update1", "?L[?a\<mapsto>?b]\<down>?a = Some ?b",
     template_equation
      (template_app
        (template_app
          (template_hole 2,
           template_app
            (template_app
              (template_app (template_hole 1, template_var 2),
               template_var 1),
             template_var 0)),
         template_var 1),
       template_app (template_hole 0, template_var 0))),
    ("AssocLists.AL_delete_commutative",
     "delete (delete ?M ?c) ?x = delete (delete ?M ?x) ?c",
     template_equation
      (template_app
        (template_app
          (template_hole 0,
           template_app
            (template_app (template_hole 0, template_var 2),
             template_var 1)),
         template_var 0),
       template_app
        (template_app
          (template_hole 0,
           template_app
            (template_app (template_hole 0, template_var 2),
             template_var 0)),
         template_var 1))),
    ("AssocLists.AL_Size_Zero", "|?L| = 0 ==> None = ?L\<down>?a",
     template_implication
      ([template_equation
         (template_app (template_hole 4, template_var 1), template_hole 3)],
       template_equation
        (template_hole 1,
         template_app
          (template_app (template_hole 0, template_var 1),
           template_var 0)))),
    ("AssocLists.AL_Triv1", "?a = ?b ==> ?L\<down>?a = ?L\<down>?b",
     template_implication
      ([template_equation (template_var 2, template_var 1)],
       template_equation
        (template_app
          (template_app (template_hole 0, template_var 0), template_var 2),
         template_app
          (template_app (template_hole 0, template_var 0),
           template_var 1)))),
    ("AssocLists.AL_delete3", "?L\<down>?a = None ==> delete ?L ?a = ?L",
     template_implication
      ([template_equation
         (template_app
           (template_app (template_hole 3, template_var 1), template_var 0),
          template_hole 2)],
       template_equation
        (template_app
          (template_app (template_hole 0, template_var 1), template_var 0),
         template_var 1))),
    ("AssocLists.AL_update1a",
     "?a = ?c ==> ?L[?a\<mapsto>?b]\<down>?c = Some ?b",
     template_implication
      ([template_equation (template_var 3, template_var 2)],
       template_equation
        (template_app
          (template_app
            (template_hole 2,
             template_app
              (template_app
                (template_app (template_hole 1, template_var 1),
                 template_var 3),
               template_var 0)),
           template_var 2),
         template_app (template_hole 0, template_var 0)))),
    ("AssocLists.AL_lookup1", "?L\<down>?a = Some ?b ==> (?a, ?b) : set ?L",
     template_implication
      ([template_equation
         (template_app
           (template_app (template_hole 4, template_var 2), template_var 1),
          template_app (template_hole 3, template_var 0))],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 2,
               template_app
                (template_app (template_hole 1, template_var 1),
                 template_var 0)),
             template_app (template_hole 0, template_var 2))
           ))),
    ("AssocLists.AL_delete2",
     "?b ~= ?a ==> delete ?l ?a\<down>?b = ?l\<down>?b",
     template_implication
      ([template_negation
         (template_equation (template_var 2, template_var 1))],
       template_equation
        (template_app
          (template_app
            (template_hole 1,
             template_app
              (template_app (template_hole 0, template_var 0),
               template_var 1)),
           template_var 2),
         template_app
          (template_app (template_hole 1, template_var 0),
           template_var 2)))),
    ("AssocLists.AL_update2",
     "?a ~= ?b ==> ?L[?a\<mapsto>?v]\<down>?b = ?L\<down>?b",
     template_implication
      ([template_negation
         (template_equation (template_var 3, template_var 2))],
       template_equation
        (template_app
          (template_app
            (template_hole 1,
             template_app
              (template_app
                (template_app (template_hole 0, template_var 1),
                 template_var 3),
               template_var 0)),
           template_var 2),
         template_app
          (template_app (template_hole 1, template_var 1),
           template_var 2)))),
    ("AssocLists.AL_Size_UpdateSuc",
     "?L\<down>?a = None ==> |?L[?a\<mapsto>?b]| = Suc |?L|",
     template_implication
      ([template_equation
         (template_app
           (template_app (template_hole 5, template_var 2), template_var 1),
          template_hole 4)],
       template_equation
        (template_app
          (template_hole 2,
           template_app
            (template_app
              (template_app (template_hole 1, template_var 2),
               template_var 1),
             template_var 0)),
         template_app
          (template_hole 0,
           template_app (template_hole 2, template_var 2))))),
    ("AssocLists.updSize",
     "?h\<down>?a = Some ?obj ==> |?h[?a\<mapsto>?obj1.0]| = |?h|",
     template_implication
      ([template_equation
         (template_app
           (template_app (template_hole 4, template_var 3), template_var 2),
          template_app (template_hole 3, template_var 1))],
       template_equation
        (template_app
          (template_hole 1,
           template_app
            (template_app
              (template_app (template_hole 0, template_var 3),
               template_var 2),
             template_var 0)),
         template_app (template_hole 1, template_var 3)))),
    ("AssocLists.AL_Triv4",
     "[| ?L = ?M; ?L\<down>?b = ?X |] ==> ?M\<down>?b = ?X",
     template_implication
      ([template_equation (template_var 3, template_var 2),
        template_equation
         (template_app
           (template_app (template_hole 0, template_var 3), template_var 1),
          template_var 0)],
       template_equation
        (template_app
          (template_app (template_hole 0, template_var 2), template_var 1),
         template_var 0))),
    ("AssocLists.AL_Triv3",
     "[| ?L = ?M; ?M\<down>?b = ?X |] ==> ?L\<down>?b = ?X",
     template_implication
      ([template_equation (template_var 3, template_var 2),
        template_equation
         (template_app
           (template_app (template_hole 0, template_var 2), template_var 1),
          template_var 0)],
       template_equation
        (template_app
          (template_app (template_hole 0, template_var 3), template_var 1),
         template_var 0))),
    ("AssocLists.AL_Triv2",
     "[| ?L\<down>?a = ?X; ?L\<down>?a = ?Y |] ==> ?X = ?Y",
     template_implication
      ([template_equation
         (template_app
           (template_app (template_hole 0, template_var 3), template_var 2),
          template_var 1),
        template_equation
         (template_app
           (template_app (template_hole 0, template_var 3), template_var 2),
          template_var 0)],
       template_equation (template_var 1, template_var 0))),
    ("AssocLists.AL_Size_Suc",
     "ALL n. |?L| = Suc n --> (EX a b. ?L\<down>a = Some b)",
     template_predicate (template_app (template_hole 9, t_empty))),
    ("AssocLists.AL_delete5",
     "[| ?b ~= ?a; ?l\<down>?b = ?x |] ==> delete ?l ?a\<down>?b = ?x",
     template_implication
      ([template_negation
         (template_equation (template_var 3, template_var 2)),
        template_equation
         (template_app
           (template_app (template_hole 1, template_var 1), template_var 3),
          template_var 0)],
       template_equation
        (template_app
          (template_app
            (template_hole 1,
             template_app
              (template_app (template_hole 0, template_var 1),
               template_var 2)),
           template_var 3),
         template_var 0))),
    ("AssocLists.AL_update5",
     "[| ?L\<down>?b = ?M; ?a ~= ?b |] ==> ?L[?a\<mapsto>?X]\<down>?b = ?M",
     template_implication
      ([template_equation
         (template_app
           (template_app (template_hole 3, template_var 4), template_var 3),
          template_var 2),
        template_negation
         (template_equation (template_var 1, template_var 3))],
       template_equation
        (template_app
          (template_app
            (template_hole 3,
             template_app
              (template_app
                (template_app (template_hole 0, template_var 4),
                 template_var 1),
               template_var 0)),
           template_var 3),
         template_var 2))),
    ("AssocLists.updSizeAux",
     "[| |?h[?a\<mapsto>?obj1.0]| = ?n; ?h\<down>?a = Some ?obj |]
      ==> |?h| = ?n",
     template_implication
      ([template_equation
         (template_app
           (template_hole 4,
            template_app
             (template_app
               (template_app (template_hole 3, template_var 4),
                template_var 3),
              template_var 2)),
          template_var 1),
        template_equation
         (template_app
           (template_app (template_hole 1, template_var 4), template_var 3),
          template_app (template_hole 0, template_var 0))],
       template_equation
        (template_app (template_hole 4, template_var 4), template_var 1))),
    ("AssocLists.AL_update3",
     "[| ?L[?a\<mapsto>?v]\<down>?b = ?X; ?a ~= ?b |] ==> ?L\<down>?b = ?X",
     template_implication
      ([template_equation
         (template_app
           (template_app
             (template_hole 3,
              template_app
               (template_app
                 (template_app (template_hole 2, template_var 4),
                  template_var 3),
                template_var 2)),
            template_var 1),
          template_var 0),
        template_negation
         (template_equation (template_var 3, template_var 1))],
       template_equation
        (template_app
          (template_app (template_hole 3, template_var 4), template_var 1),
         template_var 0))),
    ("AssocLists.AL_update4",
     "[| ?L\<down>?b = Some ?X; ?a ~= ?b |]
      ==> ?L[?a\<mapsto>?v]\<down>?b = Some ?X",
     template_implication
      ([template_equation
         (template_app
           (template_app (template_hole 4, template_var 4), template_var 3),
          template_app (template_hole 3, template_var 2)),
        template_negation
         (template_equation (template_var 1, template_var 3))],
       template_equation
        (template_app
          (template_app
            (template_hole 4,
             template_app
              (template_app
                (template_app (template_hole 0, template_var 4),
                 template_var 1),
               template_var 0)),
           template_var 3),
         template_app (template_hole 3, template_var 2)))),
    ("AssocLists.AL_Size_SucSplit",
     "|?L| = Suc ?n ==>
      EX a b M.
         |M| = ?n &
         M\<down>a = None &
         ?L\<down>a = Some b & (ALL c. c ~= a --> M\<down>c = ?L\<down>c)",
     template_implication
      ([template_equation
         (template_app (template_hole 13, template_var 1),
          template_app (template_hole 12, template_var 0))],
       template_predicate (template_app (template_hole 11, t_empty))))]:
   (string * thm * template) list
### theory "Draft.AssocListsMoreTemplates"
### 0.304s elapsed time, 0.398s cpu time, 0.000s GC time
val it = (): unit
