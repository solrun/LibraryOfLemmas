   [("Logic.AssertionsImplyMethInvariants",
     "[| ?G \<rhd> \<lbrace> ?A \<rbrace> ?C,?m,?l \<lbrace> ?B \<rbrace> ?I;
         ?A ?s0.0 ?s |]
      ==> ?I ?s0.0 ?s (Language.heap ?s)",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_hole 10,
                template_app
                 (template_app (template_hole 9, template_hole 8),
                  template_app
                   (template_app (template_hole 7, template_var 8),
                    template_app
                     (template_app (template_hole 6, template_var 7),
                      template_app
                       (template_app (template_hole 5, template_var 6),
                        template_app
                         (template_app (template_hole 4, template_var 5),
                          template_app
                           (template_app (template_hole 3, template_var 4),
                            template_app
                             (template_app
                               (template_hole 2, template_var 3),
                              template_var 2)))))))),
              template_hole 1)
            ),
        template_predicate
         (
            template_app
             (template_app (template_var 4, template_var 1), template_var 0)
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_app (template_var 2, template_var 1),
               template_var 0),
             template_app (template_hole 0, template_var 0))
           ))),
    ("Logic.AssertionsImplyAnnoInvariants",
     "[| ?G \<rhd> \<lbrace> ?A \<rbrace> ?C,?m,?l \<lbrace> ?B \<rbrace> ?I;
         MST\<down>(?C, ?m) = Some (?Mspec, ?Minv, ?Anno);
         ?Anno\<down>?l = Some ?Q; ?A ?s0.0 ?s |]
      ==> ?Q ?s0.0 ?s",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_hole 19,
                template_app
                 (template_app (template_hole 18, template_hole 17),
                  template_app
                   (template_app (template_hole 16, template_var 12),
                    template_app
                     (template_app (template_hole 15, template_var 11),
                      template_app
                       (template_app (template_hole 14, template_var 10),
                        template_app
                         (template_app (template_hole 13, template_var 9),
                          template_app
                           (template_app (template_hole 12, template_var 8),
                            template_app
                             (template_app
                               (template_hole 11, template_var 7),
                              template_var 6)))))))),
              template_hole 10)
            ),
        template_equation
         (template_app
           (template_app (template_hole 8, template_hole 7),
            template_app
             (template_app (template_hole 6, template_var 11),
              template_var 10)),
          template_app
           (template_hole 5,
            template_app
             (template_app (template_hole 4, template_var 5),
              template_app
               (template_app (template_hole 3, template_var 4),
                template_var 3)))),
        template_equation
         (template_app
           (template_app (template_hole 1, template_var 3), template_var 9),
          template_app (template_hole 0, template_var 2)),
        template_predicate
         (
            template_app
             (template_app (template_var 8, template_var 1), template_var 0)
            )],
       template_predicate
        (
           template_app
            (template_app (template_var 2, template_var 1), template_var 0)
           ))),
    ("Logic.AssertionsImplyInvariantsAux",
     "?G \<rhd> \<lbrace> ?A \<rbrace> ?C,?m,?l \<lbrace> ?B \<rbrace> ?I ==>
      (ALL s0 s t. ?A s0 s --> ?I s0 s (Language.heap s)) &
      (ALL Mspec Minv Anno.
          MST\<down>(?C, ?m) = Some (Mspec, Minv, Anno) -->
          (ALL Q.
              Anno\<down>?l = Some Q --> (ALL s0 s. ?A s0 s --> Q s0 s)))",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_hole 29,
                template_app
                 (template_app (template_hole 28, template_hole 27),
                  template_app
                   (template_app (template_hole 26, template_var 6),
                    template_app
                     (template_app (template_hole 25, template_var 5),
                      template_app
                       (template_app (template_hole 24, template_var 4),
                        template_app
                         (template_app (template_hole 23, template_var 3),
                          template_app
                           (template_app (template_hole 22, template_var 2),
                            template_app
                             (template_app
                               (template_hole 21, template_var 1),
                              template_var 0)))))))),
              template_hole 20)
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 19, template_app (template_hole 18, t_empty)),
             template_app (template_hole 13, t_empty))
           )))]
