   [("Sound.MST_valid_validn", "MST_valid ==> MST_validn ?K",
     template_implication
      ([template_predicate (template_hole 1)],
       template_predicate
        (template_app (template_hole 0, template_var 0)))),
    ("Sound.VPG_MST", "VP_G ?G ==> MST_valid",
     template_implication
      ([template_predicate
         (template_app (template_hole 1, template_var 0))],
       template_predicate (template_hole 0))),
    ("Sound.VPG_MSTn", "VP_G ?G ==> MST_validn ?k",
     template_implication
      ([template_predicate
         (template_app (template_hole 1, template_var 1))],
       template_predicate
        (template_app (template_hole 0, template_var 0)))),
    ("Sound.G_valid_validn", "G_valid ?G ==> G_validn ?K ?G",
     template_implication
      ([template_predicate
         (template_app (template_hole 1, template_var 1))],
       template_predicate
        (
           template_app
            (template_app (template_hole 0, template_var 0), template_var 1)
           ))),
    ("Sound.G_validn_valid", "ALL K. G_validn K ?G ==> G_valid ?G",
     template_implication
      ([template_predicate (template_app (template_hole 2, t_empty))],
       template_predicate
        (template_app (template_hole 0, template_var 0)))),
    ("Sound.VPG_MST_G", "[| VP_G ?G; MST_valid |] ==> G_valid ?G",
     template_implication
      ([template_predicate (template_app (template_hole 2, template_var 0)),
        template_predicate (template_hole 1)],
       template_predicate
        (template_app (template_hole 0, template_var 0)))),
    ("Sound.VPG_MSTn_Gn", "[| VP_G ?G; MST_validn ?k |] ==> G_validn ?k ?G",
     template_implication
      ([template_predicate (template_app (template_hole 2, template_var 1)),
        template_predicate
         (template_app (template_hole 1, template_var 0))],
       template_predicate
        (
           template_app
            (template_app (template_hole 0, template_var 0), template_var 1)
           ))),
    ("Sound.MST_validn_lower",
     "[| MST_validn ?K; ?L <= ?K |] ==> MST_validn ?L",
     template_implication
      ([template_predicate (template_app (template_hole 1, template_var 1)),
        template_inequation (less_equals, template_var 0, template_var 1)],
       template_predicate
        (template_app (template_hole 1, template_var 0)))),
    ("Sound.G_validn_lower",
     "[| G_validn ?K ?G; ?L <= ?K |] ==> G_validn ?L ?G",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 1, template_var 2),
              template_var 1)
            ),
        template_inequation (less_equals, template_var 0, template_var 2)],
       template_predicate
        (
           template_app
            (template_app (template_hole 1, template_var 0), template_var 1)
           ))),
    ("Sound.INVS_soundK_all",
     "INVS_soundK ?K ?G ?C ?m ?l ?D ?m' ?T ?MI ?Anno ?Anno2.0 ?M' ?A ?B ?I",
     template_predicate
      (
         template_app
          (template_app
            (template_app
              (template_app
                (template_app
                  (template_app
                    (template_app
                      (template_app
                        (template_app
                          (template_app
                            (template_app
                              (template_app
                                (template_app
                                  (template_app
                                    (template_app
(template_hole 0, template_var 14),
                                     template_var 13),
                                   template_var 12),
                                 template_var 11),
                               template_var 10),
                             template_var 9),
                           template_var 8),
                         template_var 7),
                       template_var 6),
                     template_var 5),
                   template_var 4),
                 template_var 3),
               template_var 2),
             template_var 1),
           template_var 0)
         )),
    ("Sound.valid_validn",
     " \<Turnstile> \<lbrace> ?A \<rbrace> ?C , ?m , ?l \<lbrace> ?B \<rbrace> ?I ==>
      \<Turnstile>\<^sub>?K \<lbrace> ?A \<rbrace> ?C , ?m , ?l \<lbrace> ?B \<rbrace> ?I ",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_app
                   (template_app
                     (template_app (template_hole 1, template_var 6),
                      template_var 5),
                    template_var 4),
                  template_var 3),
                template_var 2),
              template_var 1)
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_app
                (template_app
                  (template_app
                    (template_app
                      (template_app (template_hole 0, template_var 0),
                       template_var 6),
                     template_var 5),
                   template_var 4),
                 template_var 3),
               template_var 2),
             template_var 1)
           ))),
    ("Sound.validn_valid",
     "ALL K.
         \<Turnstile>\<^sub>K \<lbrace> ?A \<rbrace> ?C , ?m , ?l \<lbrace> ?B \<rbrace> ?I  ==>
       \<Turnstile> \<lbrace> ?A \<rbrace> ?C , ?m , ?l \<lbrace> ?B \<rbrace> ?I",
     template_implication
      ([template_predicate (template_app (template_hole 2, t_empty))],
       template_predicate
        (
           template_app
            (template_app
              (template_app
                (template_app
                  (template_app
                    (template_app (template_hole 0, template_var 5),
                     template_var 4),
                   template_var 3),
                 template_var 2),
               template_var 1),
             template_var 0)
           ))),
    ("Sound.validn_lower",
     "[| \<Turnstile>\<^sub>?K \<lbrace> ?A \<rbrace> ?C , ?m , ?l \<lbrace> ?B \<rbrace> ?I ;
         ?L <= ?K |]
      ==> \<Turnstile>\<^sub>?L \<lbrace> ?A \<rbrace> ?C , ?m , ?l \<lbrace> ?B \<rbrace> ?I ",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_app
                   (template_app
                     (template_app
                       (template_app (template_hole 1, template_var 7),
                        template_var 6),
                      template_var 5),
                    template_var 4),
                  template_var 3),
                template_var 2),
              template_var 1)
            ),
        template_inequation (less_equals, template_var 0, template_var 7)],
       template_predicate
        (
           template_app
            (template_app
              (template_app
                (template_app
                  (template_app
                    (template_app
                      (template_app (template_hole 1, template_var 0),
                       template_var 6),
                     template_var 5),
                   template_var 4),
                 template_var 3),
               template_var 2),
             template_var 1)
           ))),
    ("Sound.SOUND_in_CTXT",
     "[| ?G \<rhd> \<lbrace> ?A \<rbrace> ?C,?m,?l \<lbrace> ?B \<rbrace> ?I;
         G_valid ?G; MST_valid |]
      ==>  \<Turnstile> \<lbrace> ?A \<rbrace> ?C , ?m , ?l \<lbrace> ?B \<rbrace> ?I",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_hole 12,
                template_app
                 (template_app (template_hole 11, template_hole 10),
                  template_app
                   (template_app (template_hole 9, template_var 6),
                    template_app
                     (template_app (template_hole 8, template_var 5),
                      template_app
                       (template_app (template_hole 7, template_var 4),
                        template_app
                         (template_app (template_hole 6, template_var 3),
                          template_app
                           (template_app (template_hole 5, template_var 2),
                            template_app
                             (template_app
                               (template_hole 4, template_var 1),
                              template_var 0)))))))),
              template_hole 3)
            ),
        template_predicate (template_app (template_hole 2, template_var 6)),
        template_predicate (template_hole 1)],
       template_predicate
        (
           template_app
            (template_app
              (template_app
                (template_app
                  (template_app
                    (template_app (template_hole 0, template_var 5),
                     template_var 4),
                   template_var 3),
                 template_var 2),
               template_var 1),
             template_var 0)
           ))),
    ("Sound.SOUND_K",
     "[| ?G \<rhd> \<lbrace> ?A \<rbrace> ?C,?m,?l \<lbrace> ?B \<rbrace> ?I;
         G_validn ?K ?G; MST_validn ?K |]
      ==> \<Turnstile>\<^sub>Suc ?K \<lbrace> ?A \<rbrace> ?C , ?m , ?l \<lbrace> ?B \<rbrace> ?I ",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_hole 13,
                template_app
                 (template_app (template_hole 12, template_hole 11),
                  template_app
                   (template_app (template_hole 10, template_var 7),
                    template_app
                     (template_app (template_hole 9, template_var 6),
                      template_app
                       (template_app (template_hole 8, template_var 5),
                        template_app
                         (template_app (template_hole 7, template_var 4),
                          template_app
                           (template_app (template_hole 6, template_var 3),
                            template_app
                             (template_app
                               (template_hole 5, template_var 2),
                              template_var 1)))))))),
              template_hole 4)
            ),
        template_predicate
         (
            template_app
             (template_app (template_hole 3, template_var 0),
              template_var 7)
            ),
        template_predicate
         (template_app (template_hole 2, template_var 0))],
       template_predicate
        (
           template_app
            (template_app
              (template_app
                (template_app
                  (template_app
                    (template_app
                      (template_app
                        (template_hole 1,
                         template_app (template_hole 0, template_var 0)),
                       template_var 6),
                     template_var 5),
                   template_var 4),
                 template_var 3),
               template_var 2),
             template_var 1)
           ))),
    ("Sound.SOUND_Aux",
     "[| (?b, ?G, ?C, ?m, ?l, ?A, ?B, ?I) : SP_Judgement; G_validn ?K ?G;
         MST_validn ?K |]
      ==> (?b -->
           \<Turnstile>\<^sub>?K \<lbrace> ?A \<rbrace> ?C , ?m , ?l \<lbrace> ?B \<rbrace> ?I ) &
          (~ ?b -->
           \<Turnstile>\<^sub>Suc ?K \<lbrace> ?A \<rbrace> ?C , ?m , ?l \<lbrace> ?B \<rbrace> ?I )",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_hole 15,
                template_app
                 (template_app (template_hole 14, template_var 8),
                  template_app
                   (template_app (template_hole 13, template_var 7),
                    template_app
                     (template_app (template_hole 12, template_var 6),
                      template_app
                       (template_app (template_hole 11, template_var 5),
                        template_app
                         (template_app (template_hole 10, template_var 4),
                          template_app
                           (template_app (template_hole 9, template_var 3),
                            template_app
                             (template_app
                               (template_hole 8, template_var 2),
                              template_var 1)))))))),
              template_hole 7)
            ),
        template_predicate
         (
            template_app
             (template_app (template_hole 6, template_var 0),
              template_var 7)
            ),
        template_predicate
         (template_app (template_hole 5, template_var 0))],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 4,
               template_app
                (template_app (template_hole 3, template_var 8),
                 template_app
                  (template_app
                    (template_app
                      (template_app
                        (template_app
                          (template_app
                            (template_app (template_hole 2, template_var 0),
                             template_var 6),
                           template_var 5),
                         template_var 4),
                       template_var 3),
                     template_var 2),
                   template_var 1))),
             template_app
              (template_app
                (template_hole 3,
                 template_app (template_hole 1, template_var 8)),
               template_app
                (template_app
                  (template_app
                    (template_app
                      (template_app
                        (template_app
                          (template_app
                            (template_hole 2,
                             template_app
                              (template_hole 0, template_var 0)),
                           template_var 6),
                         template_var 5),
                       template_var 4),
                     template_var 3),
                   template_var 2),
                 template_var 1)))
           )))]
